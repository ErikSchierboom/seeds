--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-24 13:14:44	2014-07-24 13:14:44
2	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-25 19:23:07	2014-07-25 19:23:07
3	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-26 17:36:02	2014-07-26 17:36:02
4	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-25 00:46:01	2014-07-25 00:46:01
5	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-26 12:29:34	2014-07-26 12:29:34
6	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-26 00:24:46	2014-07-26 00:24:46
7	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-24 19:38:02	2014-07-24 19:38:02
8	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-26 14:14:01	2014-07-26 14:14:01
9	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-07-14 12:46:24	2014-07-14 12:46:24
10	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-01-23 17:21:20	2014-01-23 17:21:20
11	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-06-07 15:49:56	2014-06-07 15:49:56
12	2	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-05-24 08:09:59	2014-05-24 08:09:59
13	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-02-13 09:11:06	2014-02-13 09:11:06
14	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-05-15 10:03:28	2014-05-15 10:03:28
15	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-01-14 06:54:08	2014-01-14 06:54:08
16	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-02-17 15:11:21	2014-02-17 15:11:21
17	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-03-18 19:23:17	2014-03-18 19:23:17
18	2	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-06-09 16:25:39	2014-06-09 16:25:39
19	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-07-20 19:07:25	2014-07-20 19:07:25
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	8	2	A COMMENT	\N	2014-05-31 20:13:03	2014-05-31 20:13:03
2	39	2	A COMMENT	\N	2014-06-15 08:43:15	2014-06-15 08:43:15
3	47	2	A COMMENT	\N	2014-06-16 04:54:37	2014-06-16 04:54:37
4	1	2	A COMMENT	\N	2014-06-29 14:28:36	2014-06-29 14:28:36
5	47	2	A COMMENT	\N	2014-06-30 13:28:09	2014-06-30 13:28:09
6	14	2	A COMMENT	\N	2014-07-05 02:26:28	2014-07-05 02:26:28
7	10	3	A COMMENT	\N	2014-01-13 16:49:49	2014-01-13 16:49:49
8	45	3	A COMMENT	\N	2014-04-29 10:45:59	2014-04-29 10:45:59
9	11	3	A COMMENT	\N	2014-06-02 01:21:17	2014-06-02 01:21:17
10	43	3	A COMMENT	\N	2014-06-23 20:06:22	2014-06-23 20:06:22
11	45	3	A COMMENT	\N	2014-07-01 23:26:56	2014-07-01 23:26:56
12	2	3	A COMMENT	\N	2014-07-07 23:50:22	2014-07-07 23:50:22
13	27	3	A COMMENT	\N	2014-07-09 00:03:43	2014-07-09 00:03:43
14	32	3	A COMMENT	\N	2014-07-13 07:22:43	2014-07-13 07:22:43
15	21	6	A COMMENT	\N	2014-04-23 17:35:01	2014-04-23 17:35:01
16	10	6	A COMMENT	\N	2014-05-02 06:57:16	2014-05-02 06:57:16
17	27	6	A COMMENT	\N	2014-05-25 15:19:20	2014-05-25 15:19:20
18	32	6	A COMMENT	\N	2014-06-02 21:10:04	2014-06-02 21:10:04
19	43	6	A COMMENT	\N	2014-07-03 22:00:59	2014-07-03 22:00:59
20	10	7	A COMMENT	\N	2014-04-06 18:47:20	2014-04-06 18:47:20
21	43	7	A COMMENT	\N	2014-04-10 00:39:57	2014-04-10 00:39:57
22	10	7	A COMMENT	\N	2014-04-30 08:08:15	2014-04-30 08:08:15
23	30	7	A COMMENT	\N	2014-05-29 19:42:35	2014-05-29 19:42:35
24	30	8	A COMMENT	\N	2014-07-17 01:04:24	2014-07-17 01:04:24
25	10	9	A COMMENT	\N	2014-06-20 17:26:13	2014-06-20 17:26:13
26	47	9	A COMMENT	\N	2014-06-21 08:58:15	2014-06-21 08:58:15
27	32	9	A COMMENT	\N	2014-06-22 12:17:04	2014-06-22 12:17:04
28	10	9	A COMMENT	\N	2014-06-24 02:28:19	2014-06-24 02:28:19
29	8	9	A COMMENT	\N	2014-06-25 19:22:23	2014-06-25 19:22:23
30	30	9	A COMMENT	\N	2014-06-29 14:07:37	2014-06-29 14:07:37
31	2	9	A COMMENT	\N	2014-07-01 11:48:42	2014-07-01 11:48:42
32	45	9	A COMMENT	\N	2014-07-08 10:53:32	2014-07-08 10:53:32
33	27	9	A COMMENT	\N	2014-07-13 07:47:58	2014-07-13 07:47:58
34	3	9	A COMMENT	\N	2014-07-21 12:14:56	2014-07-21 12:14:56
35	27	9	A COMMENT	\N	2014-07-22 05:55:54	2014-07-22 05:55:54
36	4	9	A COMMENT	\N	2014-07-22 13:34:28	2014-07-22 13:34:28
37	3	10	A COMMENT	\N	2014-03-12 06:34:53	2014-03-12 06:34:53
38	8	10	A COMMENT	\N	2014-04-01 13:27:12	2014-04-01 13:27:12
39	8	10	A COMMENT	\N	2014-04-09 17:18:02	2014-04-09 17:18:02
40	30	10	A COMMENT	\N	2014-04-17 06:19:35	2014-04-17 06:19:35
41	14	11	A COMMENT	\N	2014-07-15 18:31:45	2014-07-15 18:31:45
42	37	12	A COMMENT	\N	2014-04-19 17:42:38	2014-04-19 17:42:38
43	4	12	A COMMENT	\N	2014-05-26 22:13:28	2014-05-26 22:13:28
44	10	12	A COMMENT	\N	2014-06-07 15:19:30	2014-06-07 15:19:30
45	1	12	A COMMENT	\N	2014-06-16 07:42:26	2014-06-16 07:42:26
46	39	12	A COMMENT	\N	2014-07-07 22:02:47	2014-07-07 22:02:47
47	10	13	A COMMENT	\N	2014-03-20 21:57:38	2014-03-20 21:57:38
48	3	13	A COMMENT	\N	2014-04-10 18:50:34	2014-04-10 18:50:34
49	37	13	A COMMENT	\N	2014-04-11 10:41:31	2014-04-11 10:41:31
50	45	13	A COMMENT	\N	2014-04-13 15:42:09	2014-04-13 15:42:09
51	39	13	A COMMENT	\N	2014-04-14 01:00:57	2014-04-14 01:00:57
52	43	13	A COMMENT	\N	2014-04-17 08:35:43	2014-04-17 08:35:43
53	28	13	A COMMENT	\N	2014-04-18 22:37:28	2014-04-18 22:37:28
54	37	13	A COMMENT	\N	2014-04-24 03:09:38	2014-04-24 03:09:38
55	3	13	A COMMENT	\N	2014-04-25 18:25:42	2014-04-25 18:25:42
56	14	13	A COMMENT	\N	2014-05-10 00:36:13	2014-05-10 00:36:13
57	4	13	A COMMENT	\N	2014-06-04 20:12:54	2014-06-04 20:12:54
58	37	13	A COMMENT	\N	2014-06-22 02:44:37	2014-06-22 02:44:37
59	28	13	A COMMENT	\N	2014-06-29 05:36:25	2014-06-29 05:36:25
60	27	13	A COMMENT	\N	2014-07-07 18:56:36	2014-07-07 18:56:36
61	21	13	A COMMENT	\N	2014-07-13 12:20:01	2014-07-13 12:20:01
62	47	13	A COMMENT	\N	2014-07-17 05:21:17	2014-07-17 05:21:17
63	43	13	A COMMENT	\N	2014-07-18 19:10:19	2014-07-18 19:10:19
64	45	13	A COMMENT	\N	2014-07-26 03:26:08	2014-07-26 03:26:08
65	10	14	A COMMENT	\N	2014-03-22 12:33:49	2014-03-22 12:33:49
66	10	14	A COMMENT	\N	2014-03-25 20:32:45	2014-03-25 20:32:45
67	47	14	A COMMENT	\N	2014-03-27 17:26:38	2014-03-27 17:26:38
68	2	14	A COMMENT	\N	2014-05-09 06:54:05	2014-05-09 06:54:05
69	45	14	A COMMENT	\N	2014-05-25 19:30:11	2014-05-25 19:30:11
70	11	15	A COMMENT	\N	2014-07-03 21:53:24	2014-07-03 21:53:24
71	43	15	A COMMENT	\N	2014-07-04 18:28:24	2014-07-04 18:28:24
72	1	15	A COMMENT	\N	2014-07-08 00:17:57	2014-07-08 00:17:57
73	30	15	A COMMENT	\N	2014-07-13 12:48:25	2014-07-13 12:48:25
74	21	15	A COMMENT	\N	2014-07-15 02:54:42	2014-07-15 02:54:42
75	1	15	A COMMENT	\N	2014-07-18 04:56:51	2014-07-18 04:56:51
76	28	15	A COMMENT	\N	2014-07-18 16:34:34	2014-07-18 16:34:34
77	37	15	A COMMENT	\N	2014-07-23 10:42:55	2014-07-23 10:42:55
78	14	15	A COMMENT	\N	2014-07-26 16:37:23	2014-07-26 16:37:23
79	11	17	A COMMENT	\N	2014-07-08 11:19:17	2014-07-08 11:19:17
80	37	17	A COMMENT	\N	2014-07-08 17:04:26	2014-07-08 17:04:26
81	43	17	A COMMENT	\N	2014-07-09 12:35:24	2014-07-09 12:35:24
82	37	17	A COMMENT	\N	2014-07-23 01:28:51	2014-07-23 01:28:51
83	11	20	A COMMENT	\N	2014-07-11 19:37:51	2014-07-11 19:37:51
84	30	20	A COMMENT	\N	2014-07-21 15:51:20	2014-07-21 15:51:20
85	43	20	A COMMENT	\N	2014-07-23 04:29:55	2014-07-23 04:29:55
86	4	22	A COMMENT	\N	2014-06-13 14:39:49	2014-06-13 14:39:49
87	32	22	A COMMENT	\N	2014-06-13 21:32:17	2014-06-13 21:32:17
88	28	22	A COMMENT	\N	2014-06-20 06:58:18	2014-06-20 06:58:18
89	39	22	A COMMENT	\N	2014-06-23 13:07:35	2014-06-23 13:07:35
90	8	22	A COMMENT	\N	2014-06-26 00:35:27	2014-06-26 00:35:27
91	11	22	A COMMENT	\N	2014-06-28 00:54:22	2014-06-28 00:54:22
92	21	22	A COMMENT	\N	2014-07-01 04:37:34	2014-07-01 04:37:34
93	43	22	A COMMENT	\N	2014-07-01 23:20:57	2014-07-01 23:20:57
94	37	22	A COMMENT	\N	2014-07-03 14:20:26	2014-07-03 14:20:26
95	45	22	A COMMENT	\N	2014-07-05 08:43:23	2014-07-05 08:43:23
96	47	22	A COMMENT	\N	2014-07-07 22:51:49	2014-07-07 22:51:49
97	1	22	A COMMENT	\N	2014-07-17 05:38:57	2014-07-17 05:38:57
98	30	22	A COMMENT	\N	2014-07-17 06:08:56	2014-07-17 06:08:56
99	14	23	A COMMENT	\N	2014-07-07 00:12:36	2014-07-07 00:12:36
100	11	23	A COMMENT	\N	2014-07-19 20:06:52	2014-07-19 20:06:52
101	1	23	A COMMENT	\N	2014-07-21 00:02:55	2014-07-21 00:02:55
102	14	24	A COMMENT	\N	2014-06-15 21:16:17	2014-06-15 21:16:17
103	1	24	A COMMENT	\N	2014-06-16 14:21:02	2014-06-16 14:21:02
104	2	24	A COMMENT	\N	2014-06-17 05:29:13	2014-06-17 05:29:13
105	21	24	A COMMENT	\N	2014-06-19 20:16:55	2014-06-19 20:16:55
106	32	24	A COMMENT	\N	2014-06-24 10:52:30	2014-06-24 10:52:30
107	47	24	A COMMENT	\N	2014-06-26 16:05:39	2014-06-26 16:05:39
108	37	24	A COMMENT	\N	2014-06-28 04:33:05	2014-06-28 04:33:05
109	32	24	A COMMENT	\N	2014-06-28 09:00:05	2014-06-28 09:00:05
110	10	24	A COMMENT	\N	2014-06-28 12:37:33	2014-06-28 12:37:33
111	30	24	A COMMENT	\N	2014-07-01 05:22:31	2014-07-01 05:22:31
112	10	24	A COMMENT	\N	2014-07-01 23:57:47	2014-07-01 23:57:47
113	21	24	A COMMENT	\N	2014-07-02 18:04:00	2014-07-02 18:04:00
114	39	24	A COMMENT	\N	2014-07-05 06:16:09	2014-07-05 06:16:09
115	28	24	A COMMENT	\N	2014-07-07 18:16:54	2014-07-07 18:16:54
116	1	24	A COMMENT	\N	2014-07-12 17:02:39	2014-07-12 17:02:39
117	27	24	A COMMENT	\N	2014-07-14 12:57:30	2014-07-14 12:57:30
118	11	24	A COMMENT	\N	2014-07-18 04:10:49	2014-07-18 04:10:49
119	47	24	A COMMENT	\N	2014-07-18 12:41:33	2014-07-18 12:41:33
120	30	24	A COMMENT	\N	2014-07-20 06:57:45	2014-07-20 06:57:45
121	14	24	A COMMENT	\N	2014-07-22 06:53:02	2014-07-22 06:53:02
122	43	24	A COMMENT	\N	2014-07-26 18:33:05	2014-07-26 18:33:05
123	14	25	A COMMENT	\N	2014-07-01 01:43:52	2014-07-01 01:43:52
124	28	25	A COMMENT	\N	2014-07-02 23:54:53	2014-07-02 23:54:53
125	14	26	A COMMENT	\N	2014-05-13 17:38:55	2014-05-13 17:38:55
126	37	26	A COMMENT	\N	2014-06-07 18:31:32	2014-06-07 18:31:32
127	21	26	A COMMENT	\N	2014-06-13 19:00:25	2014-06-13 19:00:25
128	14	27	A COMMENT	\N	2014-05-24 00:50:30	2014-05-24 00:50:30
129	2	27	A COMMENT	\N	2014-06-05 04:42:08	2014-06-05 04:42:08
130	21	27	A COMMENT	\N	2014-06-18 07:47:18	2014-06-18 07:47:18
131	14	28	A COMMENT	\N	2014-05-27 22:45:18	2014-05-27 22:45:18
132	10	29	A COMMENT	\N	2014-06-08 21:42:03	2014-06-08 21:42:03
133	8	29	A COMMENT	\N	2014-06-15 10:32:31	2014-06-15 10:32:31
134	39	29	A COMMENT	\N	2014-07-03 15:20:52	2014-07-03 15:20:52
135	30	29	A COMMENT	\N	2014-07-21 04:44:11	2014-07-21 04:44:11
136	37	29	A COMMENT	\N	2014-07-24 23:10:53	2014-07-24 23:10:53
137	14	30	A COMMENT	\N	2014-05-30 00:10:05	2014-05-30 00:10:05
138	21	30	A COMMENT	\N	2014-06-28 21:16:14	2014-06-28 21:16:14
139	8	30	A COMMENT	\N	2014-07-10 05:42:12	2014-07-10 05:42:12
140	11	30	A COMMENT	\N	2014-07-21 09:40:38	2014-07-21 09:40:38
141	45	30	A COMMENT	\N	2014-07-22 09:39:11	2014-07-22 09:39:11
142	28	30	A COMMENT	\N	2014-07-23 23:07:57	2014-07-23 23:07:57
143	4	31	A COMMENT	\N	2014-06-29 07:41:55	2014-06-29 07:41:55
144	28	31	A COMMENT	\N	2014-07-07 06:15:28	2014-07-07 06:15:28
145	10	31	A COMMENT	\N	2014-07-25 19:14:24	2014-07-25 19:14:24
146	32	32	A COMMENT	\N	2014-07-01 07:49:30	2014-07-01 07:49:30
147	27	33	A COMMENT	\N	2014-07-13 23:39:48	2014-07-13 23:39:48
148	21	33	A COMMENT	\N	2014-07-16 06:02:44	2014-07-16 06:02:44
149	37	33	A COMMENT	\N	2014-07-18 01:14:01	2014-07-18 01:14:01
150	32	33	A COMMENT	\N	2014-07-18 21:12:42	2014-07-18 21:12:42
151	45	33	A COMMENT	\N	2014-07-19 21:24:07	2014-07-19 21:24:07
152	14	34	A COMMENT	\N	2014-07-13 18:26:44	2014-07-13 18:26:44
153	14	35	A COMMENT	\N	2014-06-12 00:15:21	2014-06-12 00:15:21
154	14	35	A COMMENT	\N	2014-07-18 22:00:58	2014-07-18 22:00:58
155	21	35	A COMMENT	\N	2014-07-26 22:20:07	2014-07-26 22:20:07
156	39	36	A COMMENT	\N	2014-06-17 07:08:31	2014-06-17 07:08:31
157	11	36	A COMMENT	\N	2014-06-23 02:18:38	2014-06-23 02:18:38
158	4	36	A COMMENT	\N	2014-06-25 10:07:36	2014-06-25 10:07:36
159	8	36	A COMMENT	\N	2014-06-25 13:16:47	2014-06-25 13:16:47
160	1	36	A COMMENT	\N	2014-07-12 12:27:05	2014-07-12 12:27:05
161	39	36	A COMMENT	\N	2014-07-24 17:42:46	2014-07-24 17:42:46
162	27	37	A COMMENT	\N	2014-06-24 20:28:05	2014-06-24 20:28:05
163	2	37	A COMMENT	\N	2014-07-05 09:54:33	2014-07-05 09:54:33
164	1	37	A COMMENT	\N	2014-07-10 13:42:15	2014-07-10 13:42:15
165	11	37	A COMMENT	\N	2014-07-12 20:56:25	2014-07-12 20:56:25
166	39	37	A COMMENT	\N	2014-07-23 13:49:52	2014-07-23 13:49:52
167	32	39	A COMMENT	\N	2014-07-21 02:18:47	2014-07-21 02:18:47
168	27	39	A COMMENT	\N	2014-07-21 10:33:04	2014-07-21 10:33:04
169	47	39	A COMMENT	\N	2014-07-23 12:22:54	2014-07-23 12:22:54
170	43	39	A COMMENT	\N	2014-07-23 19:19:18	2014-07-23 19:19:18
171	27	39	A COMMENT	\N	2014-07-24 03:23:01	2014-07-24 03:23:01
172	30	39	A COMMENT	\N	2014-07-24 21:26:48	2014-07-24 21:26:48
173	39	39	A COMMENT	\N	2014-07-24 22:52:12	2014-07-24 22:52:12
174	8	39	A COMMENT	\N	2014-07-25 16:50:10	2014-07-25 16:50:10
175	14	40	A COMMENT	\N	2014-07-20 21:52:22	2014-07-20 21:52:22
176	1	40	A COMMENT	\N	2014-07-21 23:16:21	2014-07-21 23:16:21
177	21	41	A COMMENT	\N	2014-07-16 08:33:25	2014-07-16 08:33:25
178	43	41	A COMMENT	\N	2014-07-18 01:08:45	2014-07-18 01:08:45
179	2	41	A COMMENT	\N	2014-07-18 05:21:53	2014-07-18 05:21:53
180	3	41	A COMMENT	\N	2014-07-18 09:35:11	2014-07-18 09:35:11
181	8	41	A COMMENT	\N	2014-07-18 10:07:54	2014-07-18 10:07:54
182	45	41	A COMMENT	\N	2014-07-19 09:47:37	2014-07-19 09:47:37
183	1	41	A COMMENT	\N	2014-07-20 09:12:45	2014-07-20 09:12:45
184	1	41	A COMMENT	\N	2014-07-20 21:00:53	2014-07-20 21:00:53
185	37	41	A COMMENT	\N	2014-07-23 06:05:15	2014-07-23 06:05:15
186	21	41	A COMMENT	\N	2014-07-24 11:44:27	2014-07-24 11:44:27
187	1	43	A COMMENT	\N	2014-07-17 20:02:20	2014-07-17 20:02:20
188	37	43	A COMMENT	\N	2014-07-18 09:18:23	2014-07-18 09:18:23
189	47	43	A COMMENT	\N	2014-07-19 09:16:54	2014-07-19 09:16:54
190	3	43	A COMMENT	\N	2014-07-21 00:51:09	2014-07-21 00:51:09
191	27	43	A COMMENT	\N	2014-07-21 05:15:47	2014-07-21 05:15:47
192	14	43	A COMMENT	\N	2014-07-21 07:51:23	2014-07-21 07:51:23
193	1	43	A COMMENT	\N	2014-07-21 23:40:33	2014-07-21 23:40:33
194	14	43	A COMMENT	\N	2014-07-22 03:42:47	2014-07-22 03:42:47
195	4	43	A COMMENT	\N	2014-07-23 11:34:23	2014-07-23 11:34:23
196	21	43	A COMMENT	\N	2014-07-23 16:36:05	2014-07-23 16:36:05
197	45	43	A COMMENT	\N	2014-07-23 23:39:16	2014-07-23 23:39:16
198	2	43	A COMMENT	\N	2014-07-26 06:01:59	2014-07-26 06:01:59
199	14	44	A COMMENT	\N	2014-07-14 13:14:02	2014-07-14 13:14:02
200	28	44	A COMMENT	\N	2014-07-15 23:51:41	2014-07-15 23:51:41
201	4	44	A COMMENT	\N	2014-07-20 00:12:19	2014-07-20 00:12:19
202	27	44	A COMMENT	\N	2014-07-24 23:43:13	2014-07-24 23:43:13
203	14	44	A COMMENT	\N	2014-07-25 12:23:59	2014-07-25 12:23:59
204	21	45	A COMMENT	\N	2014-07-20 13:34:41	2014-07-20 13:34:41
205	2	45	A COMMENT	\N	2014-07-21 09:13:26	2014-07-21 09:13:26
206	1	45	A COMMENT	\N	2014-07-22 10:27:52	2014-07-22 10:27:52
207	11	45	A COMMENT	\N	2014-07-22 18:48:52	2014-07-22 18:48:52
208	43	45	A COMMENT	\N	2014-07-23 14:22:26	2014-07-23 14:22:26
209	2	45	A COMMENT	\N	2014-07-24 13:03:21	2014-07-24 13:03:21
210	4	45	A COMMENT	\N	2014-07-25 19:51:18	2014-07-25 19:51:18
211	30	45	A COMMENT	\N	2014-07-26 01:50:19	2014-07-26 01:50:19
212	47	46	A COMMENT	\N	2014-07-23 07:08:40	2014-07-23 07:08:40
213	30	46	A COMMENT	\N	2014-07-23 08:07:09	2014-07-23 08:07:09
214	32	46	A COMMENT	\N	2014-07-23 08:23:31	2014-07-23 08:23:31
215	8	46	A COMMENT	\N	2014-07-23 10:22:13	2014-07-23 10:22:13
216	47	46	A COMMENT	\N	2014-07-23 14:37:02	2014-07-23 14:37:02
217	3	46	A COMMENT	\N	2014-07-23 17:52:58	2014-07-23 17:52:58
218	32	46	A COMMENT	\N	2014-07-24 01:31:43	2014-07-24 01:31:43
219	3	46	A COMMENT	\N	2014-07-24 07:53:55	2014-07-24 07:53:55
220	2	46	A COMMENT	\N	2014-07-24 10:55:51	2014-07-24 10:55:51
221	43	46	A COMMENT	\N	2014-07-24 14:48:06	2014-07-24 14:48:06
222	39	46	A COMMENT	\N	2014-07-24 15:22:31	2014-07-24 15:22:31
223	2	46	A COMMENT	\N	2014-07-24 23:39:06	2014-07-24 23:39:06
224	45	46	A COMMENT	\N	2014-07-25 01:13:25	2014-07-25 01:13:25
225	37	46	A COMMENT	\N	2014-07-25 06:16:47	2014-07-25 06:16:47
226	39	46	A COMMENT	\N	2014-07-25 10:06:44	2014-07-25 10:06:44
227	14	46	A COMMENT	\N	2014-07-25 12:53:37	2014-07-25 12:53:37
228	3	46	A COMMENT	\N	2014-07-25 14:53:04	2014-07-25 14:53:04
229	21	46	A COMMENT	\N	2014-07-25 22:03:30	2014-07-25 22:03:30
230	45	46	A COMMENT	\N	2014-07-25 22:26:31	2014-07-25 22:26:31
231	39	46	A COMMENT	\N	2014-07-25 22:41:49	2014-07-25 22:41:49
232	27	47	A COMMENT	\N	2014-02-09 04:14:25	2014-02-09 04:14:25
233	11	47	A COMMENT	\N	2014-02-22 04:32:07	2014-02-22 04:32:07
234	21	47	A COMMENT	\N	2014-05-23 21:25:43	2014-05-23 21:25:43
235	39	49	A COMMENT	\N	2014-03-01 15:28:58	2014-03-01 15:28:58
236	39	49	A COMMENT	\N	2014-06-30 02:10:33	2014-06-30 02:10:33
237	45	49	A COMMENT	\N	2014-07-07 11:49:29	2014-07-07 11:49:29
238	28	50	A COMMENT	\N	2014-03-21 20:49:51	2014-03-21 20:49:51
239	43	51	A COMMENT	\N	2014-04-15 14:09:38	2014-04-15 14:09:38
240	47	51	A COMMENT	\N	2014-04-19 09:00:14	2014-04-19 09:00:14
241	28	52	A COMMENT	\N	2014-04-26 19:26:48	2014-04-26 19:26:48
242	3	52	A COMMENT	\N	2014-05-13 22:16:27	2014-05-13 22:16:27
243	4	52	A COMMENT	\N	2014-05-16 09:46:07	2014-05-16 09:46:07
244	45	52	A COMMENT	\N	2014-05-20 00:27:29	2014-05-20 00:27:29
245	37	52	A COMMENT	\N	2014-05-23 17:20:25	2014-05-23 17:20:25
246	4	52	A COMMENT	\N	2014-05-29 21:38:31	2014-05-29 21:38:31
247	45	52	A COMMENT	\N	2014-06-28 02:13:49	2014-06-28 02:13:49
248	32	52	A COMMENT	\N	2014-07-05 20:01:24	2014-07-05 20:01:24
249	45	52	A COMMENT	\N	2014-07-14 03:06:04	2014-07-14 03:06:04
250	1	52	A COMMENT	\N	2014-07-23 00:07:46	2014-07-23 00:07:46
251	30	55	A COMMENT	\N	2014-07-16 15:07:15	2014-07-16 15:07:15
252	11	55	A COMMENT	\N	2014-07-17 00:11:31	2014-07-17 00:11:31
253	1	55	A COMMENT	\N	2014-07-17 18:24:20	2014-07-17 18:24:20
254	8	55	A COMMENT	\N	2014-07-18 09:08:52	2014-07-18 09:08:52
255	10	55	A COMMENT	\N	2014-07-20 00:05:24	2014-07-20 00:05:24
256	37	55	A COMMENT	\N	2014-07-23 11:25:15	2014-07-23 11:25:15
257	30	56	A COMMENT	\N	2014-07-24 15:44:06	2014-07-24 15:44:06
258	30	57	A COMMENT	\N	2014-07-20 16:38:13	2014-07-20 16:38:13
259	30	58	A COMMENT	\N	2014-07-22 07:46:29	2014-07-22 07:46:29
260	2	58	A COMMENT	\N	2014-07-22 17:50:30	2014-07-22 17:50:30
261	10	58	A COMMENT	\N	2014-07-23 01:14:57	2014-07-23 01:14:57
262	30	58	A COMMENT	\N	2014-07-23 04:50:08	2014-07-23 04:50:08
263	37	58	A COMMENT	\N	2014-07-23 08:39:31	2014-07-23 08:39:31
264	14	58	A COMMENT	\N	2014-07-23 09:45:34	2014-07-23 09:45:34
265	3	58	A COMMENT	\N	2014-07-24 04:53:30	2014-07-24 04:53:30
266	2	58	A COMMENT	\N	2014-07-25 03:40:57	2014-07-25 03:40:57
267	37	58	A COMMENT	\N	2014-07-25 08:13:11	2014-07-25 08:13:11
268	10	58	A COMMENT	\N	2014-07-26 08:32:45	2014-07-26 08:32:45
269	27	59	A COMMENT	\N	2014-07-24 05:36:10	2014-07-24 05:36:10
270	45	59	A COMMENT	\N	2014-07-24 05:45:41	2014-07-24 05:45:41
271	21	59	A COMMENT	\N	2014-07-24 11:12:36	2014-07-24 11:12:36
272	45	59	A COMMENT	\N	2014-07-26 04:00:30	2014-07-26 04:00:30
273	30	60	A COMMENT	\N	2014-07-19 00:49:21	2014-07-19 00:49:21
274	30	61	A COMMENT	\N	2014-07-20 22:54:17	2014-07-20 22:54:17
275	43	62	A COMMENT	\N	2014-07-19 09:15:18	2014-07-19 09:15:18
276	8	62	A COMMENT	\N	2014-07-20 05:18:32	2014-07-20 05:18:32
277	2	62	A COMMENT	\N	2014-07-21 10:23:05	2014-07-21 10:23:05
278	4	62	A COMMENT	\N	2014-07-25 06:10:15	2014-07-25 06:10:15
279	27	62	A COMMENT	\N	2014-07-26 04:39:47	2014-07-26 04:39:47
280	27	63	A COMMENT	\N	2014-07-21 06:55:37	2014-07-21 06:55:37
281	8	63	A COMMENT	\N	2014-07-21 16:51:35	2014-07-21 16:51:35
282	3	63	A COMMENT	\N	2014-07-22 00:54:51	2014-07-22 00:54:51
283	28	63	A COMMENT	\N	2014-07-22 05:05:29	2014-07-22 05:05:29
284	43	63	A COMMENT	\N	2014-07-22 08:08:39	2014-07-22 08:08:39
285	28	63	A COMMENT	\N	2014-07-22 18:09:00	2014-07-22 18:09:00
286	21	63	A COMMENT	\N	2014-07-23 12:15:28	2014-07-23 12:15:28
287	30	63	A COMMENT	\N	2014-07-23 15:45:21	2014-07-23 15:45:21
288	43	63	A COMMENT	\N	2014-07-24 10:08:16	2014-07-24 10:08:16
289	28	63	A COMMENT	\N	2014-07-24 17:50:32	2014-07-24 17:50:32
290	10	63	A COMMENT	\N	2014-07-25 12:10:50	2014-07-25 12:10:50
291	47	63	A COMMENT	\N	2014-07-25 18:12:31	2014-07-25 18:12:31
292	27	63	A COMMENT	\N	2014-07-25 20:42:04	2014-07-25 20:42:04
293	11	63	A COMMENT	\N	2014-07-26 04:26:23	2014-07-26 04:26:23
294	10	63	A COMMENT	\N	2014-07-26 05:41:48	2014-07-26 05:41:48
295	2	63	A COMMENT	\N	2014-07-26 07:01:57	2014-07-26 07:01:57
296	45	63	A COMMENT	\N	2014-07-26 15:20:28	2014-07-26 15:20:28
297	3	64	A COMMENT	\N	2014-07-02 10:10:58	2014-07-02 10:10:58
298	10	64	A COMMENT	\N	2014-07-04 01:14:40	2014-07-04 01:14:40
299	3	64	A COMMENT	\N	2014-07-08 11:41:32	2014-07-08 11:41:32
300	11	64	A COMMENT	\N	2014-07-12 07:03:01	2014-07-12 07:03:01
301	2	64	A COMMENT	\N	2014-07-19 09:48:30	2014-07-19 09:48:30
302	32	64	A COMMENT	\N	2014-07-19 13:11:25	2014-07-19 13:11:25
303	37	64	A COMMENT	\N	2014-07-20 21:29:45	2014-07-20 21:29:45
304	43	64	A COMMENT	\N	2014-07-22 15:08:05	2014-07-22 15:08:05
305	4	65	A COMMENT	\N	2014-06-02 04:49:53	2014-06-02 04:49:53
306	21	65	A COMMENT	\N	2014-06-02 08:39:20	2014-06-02 08:39:20
307	21	65	A COMMENT	\N	2014-06-09 05:16:23	2014-06-09 05:16:23
308	3	65	A COMMENT	\N	2014-06-13 15:01:44	2014-06-13 15:01:44
309	39	65	A COMMENT	\N	2014-06-21 04:46:15	2014-06-21 04:46:15
310	8	65	A COMMENT	\N	2014-06-21 10:19:39	2014-06-21 10:19:39
311	39	65	A COMMENT	\N	2014-07-13 03:31:26	2014-07-13 03:31:26
312	28	65	A COMMENT	\N	2014-07-13 11:47:16	2014-07-13 11:47:16
313	8	65	A COMMENT	\N	2014-07-13 23:09:40	2014-07-13 23:09:40
314	11	65	A COMMENT	\N	2014-07-23 01:57:36	2014-07-23 01:57:36
315	32	66	A COMMENT	\N	2014-06-08 04:19:26	2014-06-08 04:19:26
316	37	66	A COMMENT	\N	2014-06-09 00:55:00	2014-06-09 00:55:00
317	8	66	A COMMENT	\N	2014-06-28 07:05:51	2014-06-28 07:05:51
318	14	66	A COMMENT	\N	2014-07-16 14:45:21	2014-07-16 14:45:21
319	3	66	A COMMENT	\N	2014-07-23 13:23:22	2014-07-23 13:23:22
320	8	67	A COMMENT	\N	2014-06-14 08:20:43	2014-06-14 08:20:43
321	32	67	A COMMENT	\N	2014-06-16 08:25:14	2014-06-16 08:25:14
322	10	67	A COMMENT	\N	2014-06-16 13:35:25	2014-06-16 13:35:25
323	28	67	A COMMENT	\N	2014-06-16 20:42:31	2014-06-16 20:42:31
324	27	67	A COMMENT	\N	2014-06-18 13:34:01	2014-06-18 13:34:01
325	14	67	A COMMENT	\N	2014-06-20 17:55:52	2014-06-20 17:55:52
326	2	67	A COMMENT	\N	2014-06-23 12:58:29	2014-06-23 12:58:29
327	4	67	A COMMENT	\N	2014-06-25 08:27:03	2014-06-25 08:27:03
328	11	67	A COMMENT	\N	2014-06-25 21:54:53	2014-06-25 21:54:53
329	32	67	A COMMENT	\N	2014-06-29 02:43:52	2014-06-29 02:43:52
330	37	67	A COMMENT	\N	2014-06-30 12:48:07	2014-06-30 12:48:07
331	8	67	A COMMENT	\N	2014-06-30 20:24:27	2014-06-30 20:24:27
332	37	67	A COMMENT	\N	2014-07-07 06:28:50	2014-07-07 06:28:50
333	47	67	A COMMENT	\N	2014-07-07 20:18:11	2014-07-07 20:18:11
334	10	67	A COMMENT	\N	2014-07-09 19:18:35	2014-07-09 19:18:35
335	2	67	A COMMENT	\N	2014-07-14 04:44:01	2014-07-14 04:44:01
336	2	67	A COMMENT	\N	2014-07-14 13:04:28	2014-07-14 13:04:28
337	37	67	A COMMENT	\N	2014-07-22 11:02:45	2014-07-22 11:02:45
338	3	68	A COMMENT	\N	2014-06-20 22:15:06	2014-06-20 22:15:06
339	43	68	A COMMENT	\N	2014-06-29 05:04:14	2014-06-29 05:04:14
340	8	68	A COMMENT	\N	2014-06-30 07:36:57	2014-06-30 07:36:57
341	21	68	A COMMENT	\N	2014-07-01 12:08:19	2014-07-01 12:08:19
342	14	68	A COMMENT	\N	2014-07-02 04:55:04	2014-07-02 04:55:04
343	37	68	A COMMENT	\N	2014-07-03 23:23:56	2014-07-03 23:23:56
344	30	68	A COMMENT	\N	2014-07-05 07:21:44	2014-07-05 07:21:44
345	43	68	A COMMENT	\N	2014-07-07 18:53:53	2014-07-07 18:53:53
346	3	68	A COMMENT	\N	2014-07-10 20:39:48	2014-07-10 20:39:48
347	45	68	A COMMENT	\N	2014-07-17 08:50:36	2014-07-17 08:50:36
348	2	68	A COMMENT	\N	2014-07-20 23:31:08	2014-07-20 23:31:08
349	27	68	A COMMENT	\N	2014-07-21 15:31:55	2014-07-21 15:31:55
350	39	68	A COMMENT	\N	2014-07-26 00:24:03	2014-07-26 00:24:03
351	14	68	A COMMENT	\N	2014-07-26 01:51:46	2014-07-26 01:51:46
352	37	68	A COMMENT	\N	2014-07-26 02:40:18	2014-07-26 02:40:18
353	28	69	A COMMENT	\N	2014-06-28 01:14:17	2014-06-28 01:14:17
354	37	69	A COMMENT	\N	2014-06-28 20:17:46	2014-06-28 20:17:46
355	8	69	A COMMENT	\N	2014-07-01 04:24:17	2014-07-01 04:24:17
356	30	69	A COMMENT	\N	2014-07-02 10:03:42	2014-07-02 10:03:42
357	11	69	A COMMENT	\N	2014-07-09 00:39:19	2014-07-09 00:39:19
358	3	69	A COMMENT	\N	2014-07-09 16:32:17	2014-07-09 16:32:17
359	47	69	A COMMENT	\N	2014-07-14 09:42:30	2014-07-14 09:42:30
360	21	69	A COMMENT	\N	2014-07-14 17:08:23	2014-07-14 17:08:23
361	37	69	A COMMENT	\N	2014-07-18 05:16:38	2014-07-18 05:16:38
362	1	69	A COMMENT	\N	2014-07-22 16:12:54	2014-07-22 16:12:54
363	32	70	A COMMENT	\N	2014-07-04 02:22:56	2014-07-04 02:22:56
364	1	73	A COMMENT	\N	2014-06-06 06:13:01	2014-06-06 06:13:01
365	4	73	A COMMENT	\N	2014-06-08 16:37:41	2014-06-08 16:37:41
366	10	73	A COMMENT	\N	2014-06-15 11:19:17	2014-06-15 11:19:17
367	2	73	A COMMENT	\N	2014-06-20 07:31:36	2014-06-20 07:31:36
368	27	73	A COMMENT	\N	2014-06-25 19:00:23	2014-06-25 19:00:23
369	43	73	A COMMENT	\N	2014-07-04 14:58:30	2014-07-04 14:58:30
370	47	73	A COMMENT	\N	2014-07-04 20:45:37	2014-07-04 20:45:37
371	45	73	A COMMENT	\N	2014-07-06 14:59:29	2014-07-06 14:59:29
372	27	73	A COMMENT	\N	2014-07-07 00:04:25	2014-07-07 00:04:25
373	14	73	A COMMENT	\N	2014-07-07 03:07:28	2014-07-07 03:07:28
374	43	73	A COMMENT	\N	2014-07-15 12:36:10	2014-07-15 12:36:10
375	32	73	A COMMENT	\N	2014-07-20 04:39:54	2014-07-20 04:39:54
376	11	73	A COMMENT	\N	2014-07-24 18:02:50	2014-07-24 18:02:50
377	21	73	A COMMENT	\N	2014-07-26 10:54:05	2014-07-26 10:54:05
378	30	74	A COMMENT	\N	2014-06-16 11:37:39	2014-06-16 11:37:39
379	37	74	A COMMENT	\N	2014-06-19 04:36:07	2014-06-19 04:36:07
380	28	74	A COMMENT	\N	2014-06-20 16:41:11	2014-06-20 16:41:11
381	2	74	A COMMENT	\N	2014-06-23 04:40:52	2014-06-23 04:40:52
382	21	74	A COMMENT	\N	2014-06-24 01:12:18	2014-06-24 01:12:18
383	45	74	A COMMENT	\N	2014-06-25 08:13:52	2014-06-25 08:13:52
384	14	74	A COMMENT	\N	2014-06-27 23:48:00	2014-06-27 23:48:00
385	11	74	A COMMENT	\N	2014-07-04 15:11:03	2014-07-04 15:11:03
386	32	74	A COMMENT	\N	2014-07-08 04:26:02	2014-07-08 04:26:02
387	39	74	A COMMENT	\N	2014-07-14 04:20:31	2014-07-14 04:20:31
388	8	74	A COMMENT	\N	2014-07-18 06:04:31	2014-07-18 06:04:31
389	1	74	A COMMENT	\N	2014-07-19 10:44:28	2014-07-19 10:44:28
390	39	74	A COMMENT	\N	2014-07-22 18:13:12	2014-07-22 18:13:12
391	45	74	A COMMENT	\N	2014-07-23 10:52:08	2014-07-23 10:52:08
392	37	75	A COMMENT	\N	2014-06-20 08:30:39	2014-06-20 08:30:39
393	32	75	A COMMENT	\N	2014-06-23 02:08:36	2014-06-23 02:08:36
394	21	75	A COMMENT	\N	2014-06-25 14:02:19	2014-06-25 14:02:19
395	27	75	A COMMENT	\N	2014-07-13 09:37:41	2014-07-13 09:37:41
396	21	75	A COMMENT	\N	2014-07-26 00:04:14	2014-07-26 00:04:14
397	37	76	A COMMENT	\N	2014-06-23 10:56:35	2014-06-23 10:56:35
398	8	77	A COMMENT	\N	2014-07-18 19:09:01	2014-07-18 19:09:01
399	37	77	A COMMENT	\N	2014-07-26 19:55:23	2014-07-26 19:55:23
400	3	78	A COMMENT	\N	2014-07-25 23:12:05	2014-07-25 23:12:05
401	10	79	A COMMENT	\N	2014-06-05 23:57:49	2014-06-05 23:57:49
402	1	79	A COMMENT	\N	2014-06-11 00:57:16	2014-06-11 00:57:16
403	27	79	A COMMENT	\N	2014-06-25 13:55:25	2014-06-25 13:55:25
404	43	79	A COMMENT	\N	2014-06-25 18:04:46	2014-06-25 18:04:46
405	39	79	A COMMENT	\N	2014-06-27 07:09:37	2014-06-27 07:09:37
406	32	79	A COMMENT	\N	2014-06-28 15:56:53	2014-06-28 15:56:53
407	3	79	A COMMENT	\N	2014-06-30 02:01:07	2014-06-30 02:01:07
408	14	79	A COMMENT	\N	2014-06-30 20:18:53	2014-06-30 20:18:53
409	8	79	A COMMENT	\N	2014-07-02 21:05:54	2014-07-02 21:05:54
410	2	79	A COMMENT	\N	2014-07-25 00:12:24	2014-07-25 00:12:24
411	14	80	A COMMENT	\N	2014-06-30 02:22:44	2014-06-30 02:22:44
412	8	81	A COMMENT	\N	2014-06-14 11:09:39	2014-06-14 11:09:39
413	27	81	A COMMENT	\N	2014-06-18 08:26:18	2014-06-18 08:26:18
414	28	81	A COMMENT	\N	2014-06-19 10:08:57	2014-06-19 10:08:57
415	8	81	A COMMENT	\N	2014-07-13 12:20:58	2014-07-13 12:20:58
416	45	81	A COMMENT	\N	2014-07-13 14:53:01	2014-07-13 14:53:01
417	21	81	A COMMENT	\N	2014-07-16 16:01:57	2014-07-16 16:01:57
418	39	81	A COMMENT	\N	2014-07-18 09:23:01	2014-07-18 09:23:01
419	11	82	A COMMENT	\N	2014-07-04 16:31:54	2014-07-04 16:31:54
420	37	83	A COMMENT	\N	2014-06-02 02:39:43	2014-06-02 02:39:43
421	11	83	A COMMENT	\N	2014-07-02 08:51:32	2014-07-02 08:51:32
422	37	84	A COMMENT	\N	2014-06-23 14:27:20	2014-06-23 14:27:20
423	27	84	A COMMENT	\N	2014-06-25 03:53:42	2014-06-25 03:53:42
424	32	84	A COMMENT	\N	2014-07-03 09:52:26	2014-07-03 09:52:26
425	14	84	A COMMENT	\N	2014-07-03 10:05:33	2014-07-03 10:05:33
426	37	84	A COMMENT	\N	2014-07-08 04:44:44	2014-07-08 04:44:44
427	2	84	A COMMENT	\N	2014-07-11 11:37:02	2014-07-11 11:37:02
428	14	84	A COMMENT	\N	2014-07-12 08:29:07	2014-07-12 08:29:07
429	47	84	A COMMENT	\N	2014-07-13 00:47:35	2014-07-13 00:47:35
430	30	84	A COMMENT	\N	2014-07-18 08:41:58	2014-07-18 08:41:58
431	21	84	A COMMENT	\N	2014-07-21 10:57:07	2014-07-21 10:57:07
432	8	84	A COMMENT	\N	2014-07-23 09:26:38	2014-07-23 09:26:38
433	4	84	A COMMENT	\N	2014-07-24 02:31:26	2014-07-24 02:31:26
434	4	84	A COMMENT	\N	2014-07-25 01:17:52	2014-07-25 01:17:52
435	4	85	A COMMENT	\N	2014-06-29 00:49:07	2014-06-29 00:49:07
436	27	86	A COMMENT	\N	2014-07-11 21:10:30	2014-07-11 21:10:30
437	28	87	A COMMENT	\N	2014-06-15 08:39:43	2014-06-15 08:39:43
438	21	87	A COMMENT	\N	2014-06-15 13:12:38	2014-06-15 13:12:38
439	8	87	A COMMENT	\N	2014-07-05 11:18:45	2014-07-05 11:18:45
440	39	87	A COMMENT	\N	2014-07-06 20:15:47	2014-07-06 20:15:47
441	14	87	A COMMENT	\N	2014-07-12 10:09:38	2014-07-12 10:09:38
442	14	87	A COMMENT	\N	2014-07-17 23:23:19	2014-07-17 23:23:19
443	43	89	A COMMENT	\N	2014-04-17 03:42:55	2014-04-17 03:42:55
444	28	89	A COMMENT	\N	2014-05-06 22:38:46	2014-05-06 22:38:46
445	14	89	A COMMENT	\N	2014-05-09 18:45:02	2014-05-09 18:45:02
446	30	89	A COMMENT	\N	2014-05-14 15:28:03	2014-05-14 15:28:03
447	45	89	A COMMENT	\N	2014-05-22 19:19:07	2014-05-22 19:19:07
448	39	89	A COMMENT	\N	2014-06-12 06:51:27	2014-06-12 06:51:27
449	21	89	A COMMENT	\N	2014-06-14 01:05:20	2014-06-14 01:05:20
450	32	89	A COMMENT	\N	2014-06-17 19:12:56	2014-06-17 19:12:56
451	3	89	A COMMENT	\N	2014-07-02 03:00:23	2014-07-02 03:00:23
452	37	89	A COMMENT	\N	2014-07-09 12:14:32	2014-07-09 12:14:32
453	27	89	A COMMENT	\N	2014-07-10 14:33:10	2014-07-10 14:33:10
454	45	90	A COMMENT	\N	2014-07-22 17:50:27	2014-07-22 17:50:27
455	8	90	A COMMENT	\N	2014-07-23 02:24:02	2014-07-23 02:24:02
456	1	90	A COMMENT	\N	2014-07-24 03:02:19	2014-07-24 03:02:19
457	45	90	A COMMENT	\N	2014-07-24 07:18:16	2014-07-24 07:18:16
458	8	90	A COMMENT	\N	2014-07-24 09:23:51	2014-07-24 09:23:51
459	3	90	A COMMENT	\N	2014-07-25 16:46:21	2014-07-25 16:46:21
460	28	90	A COMMENT	\N	2014-07-26 19:58:42	2014-07-26 19:58:42
461	11	93	A COMMENT	\N	2014-07-18 02:10:10	2014-07-18 02:10:10
462	8	93	A COMMENT	\N	2014-07-18 02:19:53	2014-07-18 02:19:53
463	2	93	A COMMENT	\N	2014-07-18 06:05:16	2014-07-18 06:05:16
464	10	93	A COMMENT	\N	2014-07-19 10:47:47	2014-07-19 10:47:47
465	11	93	A COMMENT	\N	2014-07-19 18:17:43	2014-07-19 18:17:43
466	27	93	A COMMENT	\N	2014-07-20 12:29:01	2014-07-20 12:29:01
467	30	93	A COMMENT	\N	2014-07-21 02:44:13	2014-07-21 02:44:13
468	32	93	A COMMENT	\N	2014-07-21 10:11:51	2014-07-21 10:11:51
469	32	93	A COMMENT	\N	2014-07-21 12:57:18	2014-07-21 12:57:18
470	3	93	A COMMENT	\N	2014-07-22 06:25:23	2014-07-22 06:25:23
471	27	93	A COMMENT	\N	2014-07-22 17:25:37	2014-07-22 17:25:37
472	21	93	A COMMENT	\N	2014-07-23 18:35:42	2014-07-23 18:35:42
473	3	93	A COMMENT	\N	2014-07-24 14:01:27	2014-07-24 14:01:27
474	4	93	A COMMENT	\N	2014-07-24 17:32:07	2014-07-24 17:32:07
475	28	93	A COMMENT	\N	2014-07-25 17:37:38	2014-07-25 17:37:38
476	28	93	A COMMENT	\N	2014-07-25 21:41:14	2014-07-25 21:41:14
477	39	93	A COMMENT	\N	2014-07-26 12:23:21	2014-07-26 12:23:21
478	4	93	A COMMENT	\N	2014-07-26 13:14:48	2014-07-26 13:14:48
479	47	94	A COMMENT	\N	2014-06-23 14:19:41	2014-06-23 14:19:41
480	39	94	A COMMENT	\N	2014-07-02 00:36:29	2014-07-02 00:36:29
481	10	94	A COMMENT	\N	2014-07-10 22:35:55	2014-07-10 22:35:55
482	28	94	A COMMENT	\N	2014-07-16 02:35:50	2014-07-16 02:35:50
483	27	94	A COMMENT	\N	2014-07-17 15:27:05	2014-07-17 15:27:05
484	2	94	A COMMENT	\N	2014-07-18 22:03:09	2014-07-18 22:03:09
485	2	94	A COMMENT	\N	2014-07-20 16:46:54	2014-07-20 16:46:54
486	28	94	A COMMENT	\N	2014-07-20 19:08:04	2014-07-20 19:08:04
487	43	94	A COMMENT	\N	2014-07-21 19:44:00	2014-07-21 19:44:00
488	14	95	A COMMENT	\N	2014-07-05 06:42:41	2014-07-05 06:42:41
489	2	95	A COMMENT	\N	2014-07-11 07:13:47	2014-07-11 07:13:47
490	39	95	A COMMENT	\N	2014-07-18 17:40:51	2014-07-18 17:40:51
491	11	95	A COMMENT	\N	2014-07-24 19:07:31	2014-07-24 19:07:31
492	47	96	A COMMENT	\N	2014-07-06 21:41:12	2014-07-06 21:41:12
493	11	96	A COMMENT	\N	2014-07-07 02:06:57	2014-07-07 02:06:57
494	4	96	A COMMENT	\N	2014-07-07 07:44:10	2014-07-07 07:44:10
495	37	96	A COMMENT	\N	2014-07-13 04:36:09	2014-07-13 04:36:09
496	8	96	A COMMENT	\N	2014-07-14 17:56:44	2014-07-14 17:56:44
497	2	96	A COMMENT	\N	2014-07-15 01:18:16	2014-07-15 01:18:16
498	47	96	A COMMENT	\N	2014-07-18 07:39:55	2014-07-18 07:39:55
499	11	97	A COMMENT	\N	2014-06-24 13:24:48	2014-06-24 13:24:48
500	45	97	A COMMENT	\N	2014-06-25 21:02:55	2014-06-25 21:02:55
501	28	97	A COMMENT	\N	2014-07-12 22:43:16	2014-07-12 22:43:16
502	8	97	A COMMENT	\N	2014-07-14 19:07:23	2014-07-14 19:07:23
503	3	97	A COMMENT	\N	2014-07-18 02:53:44	2014-07-18 02:53:44
504	37	97	A COMMENT	\N	2014-07-19 05:08:57	2014-07-19 05:08:57
505	47	99	A COMMENT	\N	2014-07-05 05:47:33	2014-07-05 05:47:33
506	43	101	A COMMENT	\N	2014-06-15 21:06:38	2014-06-15 21:06:38
507	30	101	A COMMENT	\N	2014-07-12 13:37:48	2014-07-12 13:37:48
508	11	101	A COMMENT	\N	2014-07-16 16:08:11	2014-07-16 16:08:11
509	14	103	A COMMENT	\N	2014-07-05 23:52:28	2014-07-05 23:52:28
510	48	104	A COMMENT	\N	2014-04-11 12:25:39	2014-04-11 12:25:39
511	1	104	A COMMENT	\N	2014-04-29 09:29:20	2014-04-29 09:29:20
512	39	104	A COMMENT	\N	2014-05-26 01:36:08	2014-05-26 01:36:08
513	27	105	A COMMENT	\N	2014-06-21 23:35:54	2014-06-21 23:35:54
514	21	105	A COMMENT	\N	2014-06-24 13:16:25	2014-06-24 13:16:25
515	21	105	A COMMENT	\N	2014-07-07 11:58:04	2014-07-07 11:58:04
516	30	106	A COMMENT	\N	2014-07-18 14:07:47	2014-07-18 14:07:47
517	48	107	A COMMENT	\N	2014-05-11 05:29:13	2014-05-11 05:29:13
518	11	107	A COMMENT	\N	2014-05-22 01:18:39	2014-05-22 01:18:39
519	30	107	A COMMENT	\N	2014-06-10 09:46:21	2014-06-10 09:46:21
520	47	108	A COMMENT	\N	2014-06-10 11:52:12	2014-06-10 11:52:12
521	4	108	A COMMENT	\N	2014-06-22 10:07:03	2014-06-22 10:07:03
522	32	108	A COMMENT	\N	2014-07-05 02:01:29	2014-07-05 02:01:29
523	2	108	A COMMENT	\N	2014-07-17 15:44:17	2014-07-17 15:44:17
524	37	108	A COMMENT	\N	2014-07-18 01:47:39	2014-07-18 01:47:39
525	48	109	A COMMENT	\N	2014-05-18 21:27:33	2014-05-18 21:27:33
526	1	109	A COMMENT	\N	2014-05-29 07:36:05	2014-05-29 07:36:05
527	43	109	A COMMENT	\N	2014-06-11 07:51:52	2014-06-11 07:51:52
528	39	109	A COMMENT	\N	2014-06-13 16:58:56	2014-06-13 16:58:56
529	21	109	A COMMENT	\N	2014-06-17 21:31:39	2014-06-17 21:31:39
530	3	109	A COMMENT	\N	2014-06-18 10:07:31	2014-06-18 10:07:31
531	2	109	A COMMENT	\N	2014-06-23 10:50:41	2014-06-23 10:50:41
532	47	109	A COMMENT	\N	2014-06-24 20:34:30	2014-06-24 20:34:30
533	11	109	A COMMENT	\N	2014-06-29 10:03:34	2014-06-29 10:03:34
534	1	109	A COMMENT	\N	2014-07-21 14:42:28	2014-07-21 14:42:28
535	2	109	A COMMENT	\N	2014-07-21 22:43:32	2014-07-21 22:43:32
536	8	111	A COMMENT	\N	2014-05-04 20:11:45	2014-05-04 20:11:45
537	10	111	A COMMENT	\N	2014-05-11 13:53:32	2014-05-11 13:53:32
538	39	111	A COMMENT	\N	2014-07-01 11:06:01	2014-07-01 11:06:01
539	1	114	A COMMENT	\N	2014-05-28 05:41:17	2014-05-28 05:41:17
540	47	114	A COMMENT	\N	2014-06-13 16:01:55	2014-06-13 16:01:55
541	4	114	A COMMENT	\N	2014-06-13 17:42:20	2014-06-13 17:42:20
542	10	114	A COMMENT	\N	2014-06-25 03:39:07	2014-06-25 03:39:07
543	21	114	A COMMENT	\N	2014-07-11 14:16:52	2014-07-11 14:16:52
544	14	115	A COMMENT	\N	2014-04-14 19:50:14	2014-04-14 19:50:14
545	37	115	A COMMENT	\N	2014-04-16 08:39:32	2014-04-16 08:39:32
546	3	115	A COMMENT	\N	2014-05-01 17:38:07	2014-05-01 17:38:07
547	11	115	A COMMENT	\N	2014-05-05 18:12:17	2014-05-05 18:12:17
548	47	115	A COMMENT	\N	2014-05-06 16:23:56	2014-05-06 16:23:56
549	11	115	A COMMENT	\N	2014-05-10 15:59:52	2014-05-10 15:59:52
550	30	115	A COMMENT	\N	2014-05-15 13:27:33	2014-05-15 13:27:33
551	21	115	A COMMENT	\N	2014-06-07 06:34:51	2014-06-07 06:34:51
552	32	115	A COMMENT	\N	2014-06-16 21:25:21	2014-06-16 21:25:21
553	1	115	A COMMENT	\N	2014-06-22 17:07:15	2014-06-22 17:07:15
554	14	115	A COMMENT	\N	2014-07-02 16:23:30	2014-07-02 16:23:30
555	3	115	A COMMENT	\N	2014-07-04 17:24:58	2014-07-04 17:24:58
556	21	115	A COMMENT	\N	2014-07-04 22:50:20	2014-07-04 22:50:20
557	32	115	A COMMENT	\N	2014-07-13 20:34:02	2014-07-13 20:34:02
558	8	115	A COMMENT	\N	2014-07-14 21:45:26	2014-07-14 21:45:26
559	28	115	A COMMENT	\N	2014-07-18 08:07:08	2014-07-18 08:07:08
560	47	116	A COMMENT	\N	2014-05-15 20:54:14	2014-05-15 20:54:14
561	4	116	A COMMENT	\N	2014-06-22 21:04:14	2014-06-22 21:04:14
562	30	116	A COMMENT	\N	2014-06-29 00:17:25	2014-06-29 00:17:25
563	39	116	A COMMENT	\N	2014-07-04 09:21:21	2014-07-04 09:21:21
564	45	116	A COMMENT	\N	2014-07-05 05:47:50	2014-07-05 05:47:50
565	48	119	A COMMENT	\N	2014-06-13 16:01:48	2014-06-13 16:01:48
566	30	119	A COMMENT	\N	2014-07-05 21:59:15	2014-07-05 21:59:15
567	45	120	A COMMENT	\N	2014-06-20 00:33:35	2014-06-20 00:33:35
568	45	120	A COMMENT	\N	2014-06-20 03:34:29	2014-06-20 03:34:29
569	1	120	A COMMENT	\N	2014-06-21 17:49:00	2014-06-21 17:49:00
570	4	120	A COMMENT	\N	2014-06-24 15:00:36	2014-06-24 15:00:36
571	27	120	A COMMENT	\N	2014-07-03 05:44:47	2014-07-03 05:44:47
572	37	120	A COMMENT	\N	2014-07-09 10:55:33	2014-07-09 10:55:33
573	3	120	A COMMENT	\N	2014-07-19 04:36:39	2014-07-19 04:36:39
574	27	121	A COMMENT	\N	2014-05-31 23:14:34	2014-05-31 23:14:34
575	47	121	A COMMENT	\N	2014-06-25 10:00:22	2014-06-25 10:00:22
576	21	121	A COMMENT	\N	2014-06-29 20:53:01	2014-06-29 20:53:01
577	1	121	A COMMENT	\N	2014-06-30 03:36:49	2014-06-30 03:36:49
578	48	122	A COMMENT	\N	2014-05-11 00:34:40	2014-05-11 00:34:40
579	10	122	A COMMENT	\N	2014-05-15 00:53:48	2014-05-15 00:53:48
580	30	122	A COMMENT	\N	2014-05-19 11:15:43	2014-05-19 11:15:43
581	32	122	A COMMENT	\N	2014-06-01 09:23:27	2014-06-01 09:23:27
582	28	122	A COMMENT	\N	2014-07-21 22:35:45	2014-07-21 22:35:45
583	2	123	A COMMENT	\N	2014-06-09 05:03:01	2014-06-09 05:03:01
584	4	124	A COMMENT	\N	2014-07-23 01:49:03	2014-07-23 01:49:03
585	28	126	A COMMENT	\N	2014-05-27 12:42:15	2014-05-27 12:42:15
586	11	126	A COMMENT	\N	2014-06-07 10:03:03	2014-06-07 10:03:03
587	3	126	A COMMENT	\N	2014-06-10 20:33:09	2014-06-10 20:33:09
588	8	126	A COMMENT	\N	2014-07-16 07:24:08	2014-07-16 07:24:08
589	32	126	A COMMENT	\N	2014-07-22 16:08:44	2014-07-22 16:08:44
590	48	127	A COMMENT	\N	2014-04-11 21:54:51	2014-04-11 21:54:51
591	47	127	A COMMENT	\N	2014-07-01 14:10:02	2014-07-01 14:10:02
592	4	128	A COMMENT	\N	2014-07-01 00:41:42	2014-07-01 00:41:42
593	43	130	A COMMENT	\N	2014-06-16 08:36:17	2014-06-16 08:36:17
594	45	130	A COMMENT	\N	2014-06-19 02:52:35	2014-06-19 02:52:35
595	10	130	A COMMENT	\N	2014-06-21 09:40:02	2014-06-21 09:40:02
596	14	130	A COMMENT	\N	2014-06-25 20:16:57	2014-06-25 20:16:57
597	2	130	A COMMENT	\N	2014-06-28 11:56:03	2014-06-28 11:56:03
598	37	130	A COMMENT	\N	2014-07-14 05:06:41	2014-07-14 05:06:41
599	48	131	A COMMENT	\N	2014-07-07 20:44:19	2014-07-07 20:44:19
600	11	131	A COMMENT	\N	2014-07-09 04:51:52	2014-07-09 04:51:52
601	8	131	A COMMENT	\N	2014-07-13 17:32:23	2014-07-13 17:32:23
602	45	131	A COMMENT	\N	2014-07-16 01:56:33	2014-07-16 01:56:33
603	14	131	A COMMENT	\N	2014-07-23 13:14:21	2014-07-23 13:14:21
604	1	131	A COMMENT	\N	2014-07-23 22:23:17	2014-07-23 22:23:17
605	48	132	A COMMENT	\N	2014-04-21 06:56:17	2014-04-21 06:56:17
606	21	133	A COMMENT	\N	2014-05-13 11:14:29	2014-05-13 11:14:29
607	14	133	A COMMENT	\N	2014-05-18 07:20:55	2014-05-18 07:20:55
608	28	133	A COMMENT	\N	2014-05-28 15:08:12	2014-05-28 15:08:12
609	32	133	A COMMENT	\N	2014-06-02 11:17:46	2014-06-02 11:17:46
610	4	133	A COMMENT	\N	2014-06-03 22:26:39	2014-06-03 22:26:39
611	37	133	A COMMENT	\N	2014-06-10 19:28:36	2014-06-10 19:28:36
612	3	133	A COMMENT	\N	2014-06-23 18:19:27	2014-06-23 18:19:27
613	8	133	A COMMENT	\N	2014-07-05 16:53:52	2014-07-05 16:53:52
614	21	133	A COMMENT	\N	2014-07-09 22:32:08	2014-07-09 22:32:08
615	43	134	A COMMENT	\N	2014-06-09 04:16:00	2014-06-09 04:16:00
616	2	134	A COMMENT	\N	2014-06-25 19:57:11	2014-06-25 19:57:11
617	21	134	A COMMENT	\N	2014-07-16 11:18:02	2014-07-16 11:18:02
618	28	134	A COMMENT	\N	2014-07-25 21:50:00	2014-07-25 21:50:00
619	37	136	A COMMENT	\N	2014-04-20 07:05:45	2014-04-20 07:05:45
620	11	136	A COMMENT	\N	2014-04-25 07:52:42	2014-04-25 07:52:42
621	43	136	A COMMENT	\N	2014-04-27 01:34:31	2014-04-27 01:34:31
622	4	136	A COMMENT	\N	2014-05-05 17:42:11	2014-05-05 17:42:11
623	28	136	A COMMENT	\N	2014-05-10 04:15:39	2014-05-10 04:15:39
624	28	136	A COMMENT	\N	2014-05-26 05:41:29	2014-05-26 05:41:29
625	45	136	A COMMENT	\N	2014-05-27 03:37:25	2014-05-27 03:37:25
626	4	136	A COMMENT	\N	2014-05-27 19:02:49	2014-05-27 19:02:49
627	2	136	A COMMENT	\N	2014-06-03 09:27:16	2014-06-03 09:27:16
628	39	136	A COMMENT	\N	2014-06-14 05:55:03	2014-06-14 05:55:03
629	45	136	A COMMENT	\N	2014-06-18 22:52:30	2014-06-18 22:52:30
630	10	136	A COMMENT	\N	2014-06-24 10:34:46	2014-06-24 10:34:46
631	32	136	A COMMENT	\N	2014-07-15 07:26:32	2014-07-15 07:26:32
632	8	136	A COMMENT	\N	2014-07-16 11:43:57	2014-07-16 11:43:57
633	10	136	A COMMENT	\N	2014-07-17 22:45:48	2014-07-17 22:45:48
634	10	137	A COMMENT	\N	2014-07-02 12:14:16	2014-07-02 12:14:16
635	32	137	A COMMENT	\N	2014-07-04 17:19:16	2014-07-04 17:19:16
636	43	137	A COMMENT	\N	2014-07-25 16:24:44	2014-07-25 16:24:44
637	32	138	A COMMENT	\N	2014-05-21 00:32:21	2014-05-21 00:32:21
638	30	138	A COMMENT	\N	2014-06-29 06:02:30	2014-06-29 06:02:30
639	3	138	A COMMENT	\N	2014-07-14 00:52:54	2014-07-14 00:52:54
640	45	138	A COMMENT	\N	2014-07-23 09:05:49	2014-07-23 09:05:49
641	28	139	A COMMENT	\N	2014-06-12 03:40:28	2014-06-12 03:40:28
642	4	139	A COMMENT	\N	2014-06-13 12:05:46	2014-06-13 12:05:46
643	11	139	A COMMENT	\N	2014-06-14 12:49:19	2014-06-14 12:49:19
644	21	139	A COMMENT	\N	2014-06-14 18:55:26	2014-06-14 18:55:26
645	28	139	A COMMENT	\N	2014-06-15 19:56:03	2014-06-15 19:56:03
646	43	139	A COMMENT	\N	2014-06-16 02:42:47	2014-06-16 02:42:47
647	27	139	A COMMENT	\N	2014-06-16 13:04:05	2014-06-16 13:04:05
648	47	139	A COMMENT	\N	2014-06-19 23:31:09	2014-06-19 23:31:09
649	37	139	A COMMENT	\N	2014-06-20 23:05:08	2014-06-20 23:05:08
650	14	139	A COMMENT	\N	2014-06-25 23:36:30	2014-06-25 23:36:30
651	14	139	A COMMENT	\N	2014-06-30 22:52:39	2014-06-30 22:52:39
652	32	139	A COMMENT	\N	2014-07-04 02:42:07	2014-07-04 02:42:07
653	32	139	A COMMENT	\N	2014-07-05 07:16:37	2014-07-05 07:16:37
654	45	139	A COMMENT	\N	2014-07-07 14:31:31	2014-07-07 14:31:31
655	4	139	A COMMENT	\N	2014-07-18 19:24:58	2014-07-18 19:24:58
656	30	139	A COMMENT	\N	2014-07-22 07:56:21	2014-07-22 07:56:21
657	21	139	A COMMENT	\N	2014-07-22 13:19:08	2014-07-22 13:19:08
658	43	139	A COMMENT	\N	2014-07-24 20:34:20	2014-07-24 20:34:20
659	2	139	A COMMENT	\N	2014-07-26 17:15:35	2014-07-26 17:15:35
660	48	140	A COMMENT	\N	2014-06-30 02:00:57	2014-06-30 02:00:57
661	8	140	A COMMENT	\N	2014-07-06 20:24:41	2014-07-06 20:24:41
662	43	141	A COMMENT	\N	2014-05-18 00:28:02	2014-05-18 00:28:02
663	11	141	A COMMENT	\N	2014-06-01 15:48:06	2014-06-01 15:48:06
664	1	141	A COMMENT	\N	2014-06-07 08:11:58	2014-06-07 08:11:58
665	10	141	A COMMENT	\N	2014-06-07 17:20:52	2014-06-07 17:20:52
666	4	141	A COMMENT	\N	2014-06-17 16:37:33	2014-06-17 16:37:33
667	47	141	A COMMENT	\N	2014-07-01 06:46:07	2014-07-01 06:46:07
668	2	141	A COMMENT	\N	2014-07-10 09:05:31	2014-07-10 09:05:31
669	8	141	A COMMENT	\N	2014-07-15 19:16:21	2014-07-15 19:16:21
670	27	141	A COMMENT	\N	2014-07-16 00:27:14	2014-07-16 00:27:14
671	4	143	A COMMENT	\N	2014-07-17 21:22:57	2014-07-17 21:22:57
672	11	143	A COMMENT	\N	2014-07-25 11:33:29	2014-07-25 11:33:29
673	8	144	A COMMENT	\N	2014-06-09 10:50:25	2014-06-09 10:50:25
674	8	145	A COMMENT	\N	2014-06-24 21:05:36	2014-06-24 21:05:36
675	10	145	A COMMENT	\N	2014-06-27 03:12:28	2014-06-27 03:12:28
676	43	145	A COMMENT	\N	2014-07-12 04:58:36	2014-07-12 04:58:36
677	30	145	A COMMENT	\N	2014-07-23 20:16:04	2014-07-23 20:16:04
678	4	146	A COMMENT	\N	2014-07-21 02:04:11	2014-07-21 02:04:11
679	10	146	A COMMENT	\N	2014-07-23 10:49:37	2014-07-23 10:49:37
680	25	147	A COMMENT	\N	2014-06-29 19:10:23	2014-06-29 19:10:23
681	14	148	A COMMENT	\N	2014-07-04 23:06:06	2014-07-04 23:06:06
682	37	148	A COMMENT	\N	2014-07-10 08:03:20	2014-07-10 08:03:20
683	43	148	A COMMENT	\N	2014-07-15 20:40:06	2014-07-15 20:40:06
684	27	148	A COMMENT	\N	2014-07-19 19:04:07	2014-07-19 19:04:07
685	8	148	A COMMENT	\N	2014-07-26 15:08:11	2014-07-26 15:08:11
686	25	149	A COMMENT	\N	2014-06-28 09:18:03	2014-06-28 09:18:03
687	47	151	A COMMENT	\N	2014-07-03 09:53:36	2014-07-03 09:53:36
688	8	151	A COMMENT	\N	2014-07-14 05:32:05	2014-07-14 05:32:05
689	37	151	A COMMENT	\N	2014-07-16 02:15:11	2014-07-16 02:15:11
690	47	151	A COMMENT	\N	2014-07-16 06:14:13	2014-07-16 06:14:13
691	30	152	A COMMENT	\N	2014-07-13 14:35:55	2014-07-13 14:35:55
692	8	152	A COMMENT	\N	2014-07-14 11:37:46	2014-07-14 11:37:46
693	1	152	A COMMENT	\N	2014-07-15 00:25:44	2014-07-15 00:25:44
694	30	152	A COMMENT	\N	2014-07-16 00:59:00	2014-07-16 00:59:00
695	1	152	A COMMENT	\N	2014-07-16 01:09:05	2014-07-16 01:09:05
696	27	152	A COMMENT	\N	2014-07-16 20:48:53	2014-07-16 20:48:53
697	21	152	A COMMENT	\N	2014-07-17 11:12:00	2014-07-17 11:12:00
698	21	152	A COMMENT	\N	2014-07-19 01:10:28	2014-07-19 01:10:28
699	1	152	A COMMENT	\N	2014-07-19 01:20:12	2014-07-19 01:20:12
700	32	152	A COMMENT	\N	2014-07-19 22:17:25	2014-07-19 22:17:25
701	2	152	A COMMENT	\N	2014-07-20 07:32:12	2014-07-20 07:32:12
702	39	152	A COMMENT	\N	2014-07-21 04:44:15	2014-07-21 04:44:15
703	3	152	A COMMENT	\N	2014-07-21 11:44:34	2014-07-21 11:44:34
704	28	152	A COMMENT	\N	2014-07-21 13:46:35	2014-07-21 13:46:35
705	14	152	A COMMENT	\N	2014-07-21 21:15:34	2014-07-21 21:15:34
706	43	152	A COMMENT	\N	2014-07-25 20:40:17	2014-07-25 20:40:17
707	45	153	A COMMENT	\N	2014-07-18 15:19:24	2014-07-18 15:19:24
708	4	153	A COMMENT	\N	2014-07-19 09:57:02	2014-07-19 09:57:02
709	3	153	A COMMENT	\N	2014-07-19 16:25:20	2014-07-19 16:25:20
710	39	153	A COMMENT	\N	2014-07-20 14:50:22	2014-07-20 14:50:22
711	8	153	A COMMENT	\N	2014-07-21 12:08:55	2014-07-21 12:08:55
712	21	153	A COMMENT	\N	2014-07-24 18:40:39	2014-07-24 18:40:39
713	2	153	A COMMENT	\N	2014-07-25 00:51:00	2014-07-25 00:51:00
714	8	153	A COMMENT	\N	2014-07-26 02:48:27	2014-07-26 02:48:27
715	37	153	A COMMENT	\N	2014-07-26 08:35:27	2014-07-26 08:35:27
716	21	154	A COMMENT	\N	2014-07-19 08:38:56	2014-07-19 08:38:56
717	4	154	A COMMENT	\N	2014-07-19 11:31:52	2014-07-19 11:31:52
718	43	154	A COMMENT	\N	2014-07-19 15:04:26	2014-07-19 15:04:26
719	39	154	A COMMENT	\N	2014-07-20 04:02:24	2014-07-20 04:02:24
720	27	154	A COMMENT	\N	2014-07-20 11:35:28	2014-07-20 11:35:28
721	1	154	A COMMENT	\N	2014-07-20 14:18:37	2014-07-20 14:18:37
722	14	154	A COMMENT	\N	2014-07-21 18:12:45	2014-07-21 18:12:45
723	21	154	A COMMENT	\N	2014-07-21 22:13:15	2014-07-21 22:13:15
724	37	154	A COMMENT	\N	2014-07-22 05:50:12	2014-07-22 05:50:12
725	8	154	A COMMENT	\N	2014-07-23 04:32:18	2014-07-23 04:32:18
726	2	154	A COMMENT	\N	2014-07-23 09:47:58	2014-07-23 09:47:58
727	30	154	A COMMENT	\N	2014-07-23 18:09:29	2014-07-23 18:09:29
728	11	154	A COMMENT	\N	2014-07-24 05:42:15	2014-07-24 05:42:15
729	21	154	A COMMENT	\N	2014-07-24 08:18:57	2014-07-24 08:18:57
730	10	154	A COMMENT	\N	2014-07-24 20:46:14	2014-07-24 20:46:14
731	3	154	A COMMENT	\N	2014-07-25 02:27:26	2014-07-25 02:27:26
732	37	154	A COMMENT	\N	2014-07-26 10:38:09	2014-07-26 10:38:09
733	14	154	A COMMENT	\N	2014-07-26 15:05:25	2014-07-26 15:05:25
734	10	155	A COMMENT	\N	2014-07-24 01:56:24	2014-07-24 01:56:24
735	21	155	A COMMENT	\N	2014-07-24 05:43:29	2014-07-24 05:43:29
736	47	155	A COMMENT	\N	2014-07-24 07:09:15	2014-07-24 07:09:15
737	32	155	A COMMENT	\N	2014-07-24 12:00:28	2014-07-24 12:00:28
738	27	155	A COMMENT	\N	2014-07-25 06:20:19	2014-07-25 06:20:19
739	3	155	A COMMENT	\N	2014-07-25 12:46:46	2014-07-25 12:46:46
740	11	155	A COMMENT	\N	2014-07-25 15:48:47	2014-07-25 15:48:47
741	14	155	A COMMENT	\N	2014-07-26 11:09:49	2014-07-26 11:09:49
742	25	158	A COMMENT	\N	2014-06-27 05:21:52	2014-06-27 05:21:52
743	2	158	A COMMENT	\N	2014-07-05 05:16:45	2014-07-05 05:16:45
744	11	158	A COMMENT	\N	2014-07-13 08:57:56	2014-07-13 08:57:56
745	43	158	A COMMENT	\N	2014-07-22 11:26:58	2014-07-22 11:26:58
746	25	159	A COMMENT	\N	2014-07-05 15:49:24	2014-07-05 15:49:24
747	11	159	A COMMENT	\N	2014-07-06 14:09:16	2014-07-06 14:09:16
748	30	159	A COMMENT	\N	2014-07-08 03:35:43	2014-07-08 03:35:43
749	2	159	A COMMENT	\N	2014-07-17 19:22:46	2014-07-17 19:22:46
750	4	159	A COMMENT	\N	2014-07-22 13:24:21	2014-07-22 13:24:21
751	27	159	A COMMENT	\N	2014-07-22 16:24:44	2014-07-22 16:24:44
752	2	160	A COMMENT	\N	2014-07-13 21:55:54	2014-07-13 21:55:54
753	8	160	A COMMENT	\N	2014-07-21 20:54:45	2014-07-21 20:54:45
754	30	160	A COMMENT	\N	2014-07-24 05:58:52	2014-07-24 05:58:52
755	21	160	A COMMENT	\N	2014-07-26 11:25:56	2014-07-26 11:25:56
756	27	162	A COMMENT	\N	2014-07-13 00:21:25	2014-07-13 00:21:25
757	11	162	A COMMENT	\N	2014-07-14 19:52:26	2014-07-14 19:52:26
758	2	162	A COMMENT	\N	2014-07-15 01:58:58	2014-07-15 01:58:58
759	3	162	A COMMENT	\N	2014-07-15 19:17:23	2014-07-15 19:17:23
760	4	162	A COMMENT	\N	2014-07-15 19:25:29	2014-07-15 19:25:29
761	37	162	A COMMENT	\N	2014-07-16 05:07:37	2014-07-16 05:07:37
762	30	162	A COMMENT	\N	2014-07-16 14:24:43	2014-07-16 14:24:43
763	3	162	A COMMENT	\N	2014-07-17 23:20:18	2014-07-17 23:20:18
764	8	162	A COMMENT	\N	2014-07-19 04:45:31	2014-07-19 04:45:31
765	32	162	A COMMENT	\N	2014-07-19 07:39:13	2014-07-19 07:39:13
766	28	162	A COMMENT	\N	2014-07-20 11:52:14	2014-07-20 11:52:14
767	4	162	A COMMENT	\N	2014-07-22 19:46:18	2014-07-22 19:46:18
768	45	162	A COMMENT	\N	2014-07-23 09:59:44	2014-07-23 09:59:44
769	2	162	A COMMENT	\N	2014-07-23 19:01:20	2014-07-23 19:01:20
770	45	163	A COMMENT	\N	2014-07-08 08:52:24	2014-07-08 08:52:24
771	14	163	A COMMENT	\N	2014-07-08 18:22:20	2014-07-08 18:22:20
772	45	163	A COMMENT	\N	2014-07-19 19:11:37	2014-07-19 19:11:37
773	47	163	A COMMENT	\N	2014-07-25 15:43:48	2014-07-25 15:43:48
774	8	164	A COMMENT	\N	2014-07-06 01:03:02	2014-07-06 01:03:02
775	32	164	A COMMENT	\N	2014-07-08 13:27:16	2014-07-08 13:27:16
776	32	164	A COMMENT	\N	2014-07-12 04:13:11	2014-07-12 04:13:11
777	39	164	A COMMENT	\N	2014-07-15 09:49:44	2014-07-15 09:49:44
778	4	164	A COMMENT	\N	2014-07-20 09:36:01	2014-07-20 09:36:01
779	25	165	A COMMENT	\N	2014-07-04 20:01:17	2014-07-04 20:01:17
780	43	165	A COMMENT	\N	2014-07-04 21:30:01	2014-07-04 21:30:01
781	28	165	A COMMENT	\N	2014-07-08 08:52:16	2014-07-08 08:52:16
782	27	165	A COMMENT	\N	2014-07-15 00:09:52	2014-07-15 00:09:52
783	30	165	A COMMENT	\N	2014-07-17 08:38:59	2014-07-17 08:38:59
784	4	165	A COMMENT	\N	2014-07-18 05:01:02	2014-07-18 05:01:02
785	8	166	A COMMENT	\N	2014-07-06 19:09:05	2014-07-06 19:09:05
786	1	166	A COMMENT	\N	2014-07-06 22:46:55	2014-07-06 22:46:55
787	39	166	A COMMENT	\N	2014-07-07 15:56:32	2014-07-07 15:56:32
788	28	166	A COMMENT	\N	2014-07-07 23:14:41	2014-07-07 23:14:41
789	32	166	A COMMENT	\N	2014-07-08 10:34:35	2014-07-08 10:34:35
790	10	166	A COMMENT	\N	2014-07-09 03:26:55	2014-07-09 03:26:55
791	1	166	A COMMENT	\N	2014-07-11 01:02:48	2014-07-11 01:02:48
792	8	166	A COMMENT	\N	2014-07-12 10:33:18	2014-07-12 10:33:18
793	14	166	A COMMENT	\N	2014-07-12 22:36:26	2014-07-12 22:36:26
794	32	166	A COMMENT	\N	2014-07-13 05:35:10	2014-07-13 05:35:10
795	37	166	A COMMENT	\N	2014-07-13 07:20:09	2014-07-13 07:20:09
796	45	166	A COMMENT	\N	2014-07-13 09:53:54	2014-07-13 09:53:54
797	4	166	A COMMENT	\N	2014-07-14 09:27:27	2014-07-14 09:27:27
798	4	166	A COMMENT	\N	2014-07-17 01:39:00	2014-07-17 01:39:00
799	27	166	A COMMENT	\N	2014-07-17 17:51:07	2014-07-17 17:51:07
800	2	166	A COMMENT	\N	2014-07-20 02:40:28	2014-07-20 02:40:28
801	30	166	A COMMENT	\N	2014-07-21 19:32:09	2014-07-21 19:32:09
802	14	166	A COMMENT	\N	2014-07-22 20:18:42	2014-07-22 20:18:42
803	39	166	A COMMENT	\N	2014-07-23 09:36:21	2014-07-23 09:36:21
804	11	166	A COMMENT	\N	2014-07-26 11:54:04	2014-07-26 11:54:04
805	6	168	A COMMENT	\N	2014-07-21 22:59:22	2014-07-21 22:59:22
806	32	168	A COMMENT	\N	2014-07-23 16:01:49	2014-07-23 16:01:49
807	8	168	A COMMENT	\N	2014-07-23 17:59:09	2014-07-23 17:59:09
808	10	168	A COMMENT	\N	2014-07-24 03:54:38	2014-07-24 03:54:38
809	47	168	A COMMENT	\N	2014-07-25 03:03:12	2014-07-25 03:03:12
810	10	168	A COMMENT	\N	2014-07-25 18:05:40	2014-07-25 18:05:40
811	6	169	A COMMENT	\N	2014-07-21 20:01:44	2014-07-21 20:01:44
812	6	170	A COMMENT	\N	2014-07-19 01:13:58	2014-07-19 01:13:58
813	30	171	A COMMENT	\N	2014-07-23 18:04:02	2014-07-23 18:04:02
814	45	172	A COMMENT	\N	2014-07-20 20:37:27	2014-07-20 20:37:27
815	10	172	A COMMENT	\N	2014-07-26 02:19:45	2014-07-26 02:19:45
816	8	174	A COMMENT	\N	2014-07-18 23:36:31	2014-07-18 23:36:31
817	2	174	A COMMENT	\N	2014-07-19 20:45:22	2014-07-19 20:45:22
818	37	174	A COMMENT	\N	2014-07-20 02:57:07	2014-07-20 02:57:07
819	43	174	A COMMENT	\N	2014-07-22 07:52:11	2014-07-22 07:52:11
820	1	174	A COMMENT	\N	2014-07-23 01:34:18	2014-07-23 01:34:18
821	3	174	A COMMENT	\N	2014-07-23 17:11:26	2014-07-23 17:11:26
822	32	174	A COMMENT	\N	2014-07-24 04:05:31	2014-07-24 04:05:31
823	4	174	A COMMENT	\N	2014-07-26 10:37:10	2014-07-26 10:37:10
824	32	174	A COMMENT	\N	2014-07-26 21:24:14	2014-07-26 21:24:14
825	6	175	A COMMENT	\N	2014-07-21 01:26:58	2014-07-21 01:26:58
826	3	175	A COMMENT	\N	2014-07-24 14:43:26	2014-07-24 14:43:26
827	10	177	A COMMENT	\N	2014-07-04 12:14:20	2014-07-04 12:14:20
828	4	177	A COMMENT	\N	2014-07-11 05:31:49	2014-07-11 05:31:49
829	2	177	A COMMENT	\N	2014-07-13 01:29:08	2014-07-13 01:29:08
830	28	177	A COMMENT	\N	2014-07-14 19:36:55	2014-07-14 19:36:55
831	3	177	A COMMENT	\N	2014-07-15 05:50:39	2014-07-15 05:50:39
832	45	177	A COMMENT	\N	2014-07-15 18:17:43	2014-07-15 18:17:43
833	39	177	A COMMENT	\N	2014-07-18 00:50:30	2014-07-18 00:50:30
834	43	177	A COMMENT	\N	2014-07-21 05:45:17	2014-07-21 05:45:17
835	47	177	A COMMENT	\N	2014-07-21 18:52:54	2014-07-21 18:52:54
836	11	177	A COMMENT	\N	2014-07-24 18:10:26	2014-07-24 18:10:26
837	16	180	A COMMENT	\N	2014-05-29 05:51:21	2014-05-29 05:51:21
838	11	180	A COMMENT	\N	2014-06-14 14:00:10	2014-06-14 14:00:10
839	4	180	A COMMENT	\N	2014-06-16 08:52:59	2014-06-16 08:52:59
840	2	180	A COMMENT	\N	2014-06-30 04:02:32	2014-06-30 04:02:32
841	14	180	A COMMENT	\N	2014-07-12 15:39:23	2014-07-12 15:39:23
842	8	180	A COMMENT	\N	2014-07-24 03:42:36	2014-07-24 03:42:36
843	8	181	A COMMENT	\N	2014-04-21 07:34:57	2014-04-21 07:34:57
844	8	181	A COMMENT	\N	2014-05-02 05:36:29	2014-05-02 05:36:29
845	21	181	A COMMENT	\N	2014-05-05 15:45:02	2014-05-05 15:45:02
846	1	181	A COMMENT	\N	2014-05-27 07:05:32	2014-05-27 07:05:32
847	43	181	A COMMENT	\N	2014-06-18 22:59:48	2014-06-18 22:59:48
848	30	181	A COMMENT	\N	2014-06-19 08:02:49	2014-06-19 08:02:49
849	10	181	A COMMENT	\N	2014-06-23 21:10:46	2014-06-23 21:10:46
850	45	181	A COMMENT	\N	2014-07-24 17:07:30	2014-07-24 17:07:30
851	2	183	A COMMENT	\N	2014-04-10 10:55:50	2014-04-10 10:55:50
852	37	183	A COMMENT	\N	2014-04-11 07:36:21	2014-04-11 07:36:21
853	1	183	A COMMENT	\N	2014-04-15 02:10:23	2014-04-15 02:10:23
854	47	183	A COMMENT	\N	2014-04-17 14:09:50	2014-04-17 14:09:50
855	28	183	A COMMENT	\N	2014-04-22 13:55:27	2014-04-22 13:55:27
856	47	183	A COMMENT	\N	2014-04-23 21:49:28	2014-04-23 21:49:28
857	30	183	A COMMENT	\N	2014-05-16 00:20:48	2014-05-16 00:20:48
858	14	183	A COMMENT	\N	2014-06-15 06:01:41	2014-06-15 06:01:41
859	27	183	A COMMENT	\N	2014-06-16 18:39:09	2014-06-16 18:39:09
860	4	183	A COMMENT	\N	2014-06-19 22:51:01	2014-06-19 22:51:01
861	37	183	A COMMENT	\N	2014-06-24 00:19:24	2014-06-24 00:19:24
862	32	183	A COMMENT	\N	2014-07-26 14:46:56	2014-07-26 14:46:56
863	11	183	A COMMENT	\N	2014-07-26 21:43:02	2014-07-26 21:43:02
864	16	184	A COMMENT	\N	2014-04-26 16:05:24	2014-04-26 16:05:24
865	3	184	A COMMENT	\N	2014-05-08 19:11:27	2014-05-08 19:11:27
866	14	184	A COMMENT	\N	2014-07-18 22:04:01	2014-07-18 22:04:01
867	19	185	A COMMENT	\N	2014-05-29 13:57:55	2014-05-29 13:57:55
868	4	185	A COMMENT	\N	2014-05-30 17:23:22	2014-05-30 17:23:22
869	47	185	A COMMENT	\N	2014-06-06 18:47:23	2014-06-06 18:47:23
870	30	185	A COMMENT	\N	2014-06-07 18:38:30	2014-06-07 18:38:30
871	1	185	A COMMENT	\N	2014-06-11 12:56:29	2014-06-11 12:56:29
872	39	185	A COMMENT	\N	2014-07-01 05:37:24	2014-07-01 05:37:24
873	14	185	A COMMENT	\N	2014-07-02 07:23:41	2014-07-02 07:23:41
874	37	185	A COMMENT	\N	2014-07-07 19:12:02	2014-07-07 19:12:02
875	3	186	A COMMENT	\N	2014-05-14 03:22:27	2014-05-14 03:22:27
876	14	186	A COMMENT	\N	2014-05-23 00:04:49	2014-05-23 00:04:49
877	32	186	A COMMENT	\N	2014-05-26 13:53:47	2014-05-26 13:53:47
878	47	186	A COMMENT	\N	2014-06-04 14:46:50	2014-06-04 14:46:50
879	30	186	A COMMENT	\N	2014-06-09 14:26:57	2014-06-09 14:26:57
880	11	186	A COMMENT	\N	2014-06-17 22:13:20	2014-06-17 22:13:20
881	28	186	A COMMENT	\N	2014-06-23 01:12:26	2014-06-23 01:12:26
882	10	186	A COMMENT	\N	2014-07-07 02:56:59	2014-07-07 02:56:59
883	43	186	A COMMENT	\N	2014-07-19 11:40:00	2014-07-19 11:40:00
884	10	186	A COMMENT	\N	2014-07-22 01:58:41	2014-07-22 01:58:41
885	4	186	A COMMENT	\N	2014-07-22 11:54:38	2014-07-22 11:54:38
886	8	187	A COMMENT	\N	2014-06-22 12:44:14	2014-06-22 12:44:14
887	19	189	A COMMENT	\N	2014-05-30 09:12:26	2014-05-30 09:12:26
888	1	189	A COMMENT	\N	2014-06-11 04:14:44	2014-06-11 04:14:44
889	8	189	A COMMENT	\N	2014-07-10 13:12:59	2014-07-10 13:12:59
890	2	189	A COMMENT	\N	2014-07-14 18:04:54	2014-07-14 18:04:54
891	32	190	A COMMENT	\N	2014-05-12 00:23:52	2014-05-12 00:23:52
892	3	190	A COMMENT	\N	2014-05-30 12:20:30	2014-05-30 12:20:30
893	2	190	A COMMENT	\N	2014-05-30 14:49:36	2014-05-30 14:49:36
894	39	190	A COMMENT	\N	2014-06-14 03:23:55	2014-06-14 03:23:55
895	2	190	A COMMENT	\N	2014-07-02 11:55:59	2014-07-02 11:55:59
896	1	190	A COMMENT	\N	2014-07-10 04:51:01	2014-07-10 04:51:01
897	20	191	A COMMENT	\N	2014-07-07 15:11:27	2014-07-07 15:11:27
898	45	191	A COMMENT	\N	2014-07-08 09:24:58	2014-07-08 09:24:58
899	3	191	A COMMENT	\N	2014-07-10 12:12:28	2014-07-10 12:12:28
900	4	191	A COMMENT	\N	2014-07-11 22:59:54	2014-07-11 22:59:54
901	3	191	A COMMENT	\N	2014-07-14 22:06:34	2014-07-14 22:06:34
902	21	191	A COMMENT	\N	2014-07-15 07:45:10	2014-07-15 07:45:10
903	14	191	A COMMENT	\N	2014-07-16 21:14:56	2014-07-16 21:14:56
904	4	191	A COMMENT	\N	2014-07-17 19:59:36	2014-07-17 19:59:36
905	1	191	A COMMENT	\N	2014-07-24 14:01:12	2014-07-24 14:01:12
906	32	192	A COMMENT	\N	2014-04-08 22:02:20	2014-04-08 22:02:20
907	2	192	A COMMENT	\N	2014-04-13 04:17:25	2014-04-13 04:17:25
908	32	192	A COMMENT	\N	2014-04-25 11:31:21	2014-04-25 11:31:21
909	45	192	A COMMENT	\N	2014-05-04 01:19:30	2014-05-04 01:19:30
910	8	192	A COMMENT	\N	2014-05-14 08:08:01	2014-05-14 08:08:01
911	37	192	A COMMENT	\N	2014-06-11 06:35:09	2014-06-11 06:35:09
912	27	192	A COMMENT	\N	2014-06-17 22:41:15	2014-06-17 22:41:15
913	39	192	A COMMENT	\N	2014-06-19 04:20:22	2014-06-19 04:20:22
914	43	192	A COMMENT	\N	2014-06-30 21:57:41	2014-06-30 21:57:41
915	3	192	A COMMENT	\N	2014-07-14 21:46:06	2014-07-14 21:46:06
916	11	193	A COMMENT	\N	2014-05-18 04:19:37	2014-05-18 04:19:37
917	3	193	A COMMENT	\N	2014-05-21 05:06:32	2014-05-21 05:06:32
918	8	193	A COMMENT	\N	2014-05-30 20:34:11	2014-05-30 20:34:11
919	37	193	A COMMENT	\N	2014-06-02 13:21:12	2014-06-02 13:21:12
920	21	193	A COMMENT	\N	2014-06-03 09:30:16	2014-06-03 09:30:16
921	3	193	A COMMENT	\N	2014-06-04 12:02:09	2014-06-04 12:02:09
922	27	193	A COMMENT	\N	2014-06-05 13:47:03	2014-06-05 13:47:03
923	2	193	A COMMENT	\N	2014-06-22 18:20:49	2014-06-22 18:20:49
924	47	193	A COMMENT	\N	2014-07-01 18:35:49	2014-07-01 18:35:49
925	14	193	A COMMENT	\N	2014-07-08 04:00:46	2014-07-08 04:00:46
926	14	193	A COMMENT	\N	2014-07-10 04:04:46	2014-07-10 04:04:46
927	3	193	A COMMENT	\N	2014-07-10 14:33:33	2014-07-10 14:33:33
928	37	194	A COMMENT	\N	2014-05-27 18:34:35	2014-05-27 18:34:35
929	11	194	A COMMENT	\N	2014-05-29 16:30:29	2014-05-29 16:30:29
930	28	194	A COMMENT	\N	2014-05-31 21:26:24	2014-05-31 21:26:24
931	43	194	A COMMENT	\N	2014-06-01 09:12:45	2014-06-01 09:12:45
932	1	194	A COMMENT	\N	2014-06-03 07:37:03	2014-06-03 07:37:03
933	4	194	A COMMENT	\N	2014-06-04 01:25:09	2014-06-04 01:25:09
934	45	194	A COMMENT	\N	2014-06-08 18:20:43	2014-06-08 18:20:43
935	1	194	A COMMENT	\N	2014-06-11 17:56:57	2014-06-11 17:56:57
936	47	194	A COMMENT	\N	2014-06-16 05:15:58	2014-06-16 05:15:58
937	43	194	A COMMENT	\N	2014-06-16 07:43:40	2014-06-16 07:43:40
938	27	194	A COMMENT	\N	2014-06-20 05:46:53	2014-06-20 05:46:53
939	2	194	A COMMENT	\N	2014-06-23 13:11:10	2014-06-23 13:11:10
940	30	194	A COMMENT	\N	2014-06-28 16:49:39	2014-06-28 16:49:39
941	14	194	A COMMENT	\N	2014-07-01 12:27:16	2014-07-01 12:27:16
942	28	194	A COMMENT	\N	2014-07-07 17:31:16	2014-07-07 17:31:16
943	14	194	A COMMENT	\N	2014-07-09 00:49:59	2014-07-09 00:49:59
944	39	194	A COMMENT	\N	2014-07-13 01:54:38	2014-07-13 01:54:38
945	47	194	A COMMENT	\N	2014-07-15 21:10:00	2014-07-15 21:10:00
946	8	194	A COMMENT	\N	2014-07-15 22:36:54	2014-07-15 22:36:54
947	30	194	A COMMENT	\N	2014-07-26 04:40:19	2014-07-26 04:40:19
948	20	195	A COMMENT	\N	2014-03-26 21:19:17	2014-03-26 21:19:17
949	32	195	A COMMENT	\N	2014-04-17 22:54:36	2014-04-17 22:54:36
950	4	195	A COMMENT	\N	2014-04-29 14:42:30	2014-04-29 14:42:30
951	43	195	A COMMENT	\N	2014-05-17 05:51:11	2014-05-17 05:51:11
952	37	195	A COMMENT	\N	2014-06-01 05:59:55	2014-06-01 05:59:55
953	1	195	A COMMENT	\N	2014-06-04 17:37:55	2014-06-04 17:37:55
954	8	196	A COMMENT	\N	2014-04-12 10:20:39	2014-04-12 10:20:39
955	21	196	A COMMENT	\N	2014-04-14 13:20:16	2014-04-14 13:20:16
956	47	196	A COMMENT	\N	2014-04-22 18:15:35	2014-04-22 18:15:35
957	28	196	A COMMENT	\N	2014-04-26 10:36:53	2014-04-26 10:36:53
958	32	196	A COMMENT	\N	2014-05-29 01:28:23	2014-05-29 01:28:23
959	2	196	A COMMENT	\N	2014-06-02 21:39:52	2014-06-02 21:39:52
960	30	196	A COMMENT	\N	2014-06-20 16:27:11	2014-06-20 16:27:11
961	14	196	A COMMENT	\N	2014-06-24 04:26:32	2014-06-24 04:26:32
962	21	196	A COMMENT	\N	2014-06-28 00:52:14	2014-06-28 00:52:14
963	28	196	A COMMENT	\N	2014-06-28 12:47:09	2014-06-28 12:47:09
964	11	196	A COMMENT	\N	2014-07-13 17:49:17	2014-07-13 17:49:17
965	37	196	A COMMENT	\N	2014-07-15 01:52:52	2014-07-15 01:52:52
966	11	196	A COMMENT	\N	2014-07-18 23:40:44	2014-07-18 23:40:44
967	20	197	A COMMENT	\N	2014-04-08 23:08:55	2014-04-08 23:08:55
968	45	197	A COMMENT	\N	2014-05-24 21:39:15	2014-05-24 21:39:15
969	1	197	A COMMENT	\N	2014-06-30 20:01:17	2014-06-30 20:01:17
970	8	200	A COMMENT	\N	2014-05-09 12:41:31	2014-05-09 12:41:31
971	2	200	A COMMENT	\N	2014-05-09 15:55:33	2014-05-09 15:55:33
972	30	200	A COMMENT	\N	2014-05-13 02:43:09	2014-05-13 02:43:09
973	27	200	A COMMENT	\N	2014-05-22 13:28:24	2014-05-22 13:28:24
974	47	200	A COMMENT	\N	2014-05-26 01:05:26	2014-05-26 01:05:26
975	1	200	A COMMENT	\N	2014-06-01 08:44:10	2014-06-01 08:44:10
976	21	200	A COMMENT	\N	2014-06-06 02:49:13	2014-06-06 02:49:13
977	30	200	A COMMENT	\N	2014-06-08 14:21:32	2014-06-08 14:21:32
978	39	200	A COMMENT	\N	2014-06-08 15:59:45	2014-06-08 15:59:45
979	14	200	A COMMENT	\N	2014-06-09 13:47:30	2014-06-09 13:47:30
980	11	200	A COMMENT	\N	2014-06-09 14:18:44	2014-06-09 14:18:44
981	21	200	A COMMENT	\N	2014-06-23 06:09:55	2014-06-23 06:09:55
982	47	200	A COMMENT	\N	2014-06-23 12:24:50	2014-06-23 12:24:50
983	45	200	A COMMENT	\N	2014-06-25 14:50:43	2014-06-25 14:50:43
984	45	200	A COMMENT	\N	2014-07-19 00:01:15	2014-07-19 00:01:15
985	1	200	A COMMENT	\N	2014-07-20 16:25:01	2014-07-20 16:25:01
986	3	200	A COMMENT	\N	2014-07-25 06:33:49	2014-07-25 06:33:49
987	4	200	A COMMENT	\N	2014-07-25 10:53:33	2014-07-25 10:53:33
988	8	201	A COMMENT	\N	2014-05-21 15:11:32	2014-05-21 15:11:32
989	32	201	A COMMENT	\N	2014-06-07 20:19:12	2014-06-07 20:19:12
990	45	201	A COMMENT	\N	2014-06-16 01:39:46	2014-06-16 01:39:46
991	30	201	A COMMENT	\N	2014-06-26 17:00:29	2014-06-26 17:00:29
992	37	201	A COMMENT	\N	2014-07-02 23:13:59	2014-07-02 23:13:59
993	11	202	A COMMENT	\N	2014-06-10 04:45:03	2014-06-10 04:45:03
994	4	202	A COMMENT	\N	2014-07-01 06:31:11	2014-07-01 06:31:11
995	27	202	A COMMENT	\N	2014-07-13 20:38:51	2014-07-13 20:38:51
996	20	204	A COMMENT	\N	2014-07-15 07:18:14	2014-07-15 07:18:14
997	47	204	A COMMENT	\N	2014-07-26 08:55:39	2014-07-26 08:55:39
998	20	205	A COMMENT	\N	2014-04-07 13:51:08	2014-04-07 13:51:08
999	28	205	A COMMENT	\N	2014-04-08 22:15:45	2014-04-08 22:15:45
1000	2	205	A COMMENT	\N	2014-04-09 18:22:29	2014-04-09 18:22:29
1001	47	205	A COMMENT	\N	2014-04-17 12:44:37	2014-04-17 12:44:37
1002	8	205	A COMMENT	\N	2014-05-01 00:44:34	2014-05-01 00:44:34
1003	27	205	A COMMENT	\N	2014-05-05 02:29:47	2014-05-05 02:29:47
1004	10	205	A COMMENT	\N	2014-05-09 19:02:46	2014-05-09 19:02:46
1005	45	205	A COMMENT	\N	2014-05-10 07:12:53	2014-05-10 07:12:53
1006	10	205	A COMMENT	\N	2014-05-22 06:15:46	2014-05-22 06:15:46
1007	11	205	A COMMENT	\N	2014-05-29 09:01:51	2014-05-29 09:01:51
1008	1	205	A COMMENT	\N	2014-06-01 12:51:00	2014-06-01 12:51:00
1009	27	205	A COMMENT	\N	2014-06-01 17:31:20	2014-06-01 17:31:20
1010	4	205	A COMMENT	\N	2014-06-03 04:23:56	2014-06-03 04:23:56
1011	45	205	A COMMENT	\N	2014-06-14 21:26:51	2014-06-14 21:26:51
1012	1	205	A COMMENT	\N	2014-06-18 13:09:06	2014-06-18 13:09:06
1013	47	205	A COMMENT	\N	2014-06-20 08:14:17	2014-06-20 08:14:17
1014	43	205	A COMMENT	\N	2014-07-10 19:14:45	2014-07-10 19:14:45
1015	30	205	A COMMENT	\N	2014-07-15 21:46:06	2014-07-15 21:46:06
1016	3	205	A COMMENT	\N	2014-07-19 11:58:55	2014-07-19 11:58:55
1017	32	205	A COMMENT	\N	2014-07-19 20:49:41	2014-07-19 20:49:41
1018	37	205	A COMMENT	\N	2014-07-25 02:34:37	2014-07-25 02:34:37
1019	11	207	A COMMENT	\N	2014-06-14 18:47:44	2014-06-14 18:47:44
1020	28	207	A COMMENT	\N	2014-07-10 05:04:45	2014-07-10 05:04:45
1021	45	207	A COMMENT	\N	2014-07-13 16:08:09	2014-07-13 16:08:09
1022	35	209	A COMMENT	\N	2014-02-16 00:28:27	2014-02-16 00:28:27
1023	4	209	A COMMENT	\N	2014-03-21 21:37:27	2014-03-21 21:37:27
1024	32	209	A COMMENT	\N	2014-04-24 08:19:42	2014-04-24 08:19:42
1025	21	209	A COMMENT	\N	2014-05-27 05:32:41	2014-05-27 05:32:41
1026	28	209	A COMMENT	\N	2014-05-29 07:25:21	2014-05-29 07:25:21
1027	27	209	A COMMENT	\N	2014-06-09 19:14:19	2014-06-09 19:14:19
1028	2	209	A COMMENT	\N	2014-06-20 06:31:30	2014-06-20 06:31:30
1029	28	209	A COMMENT	\N	2014-07-13 11:49:45	2014-07-13 11:49:45
1030	28	210	A COMMENT	\N	2014-04-01 08:39:14	2014-04-01 08:39:14
1031	35	212	A COMMENT	\N	2013-11-19 01:20:34	2013-11-19 01:20:34
1032	8	212	A COMMENT	\N	2013-12-11 02:11:57	2013-12-11 02:11:57
1033	2	212	A COMMENT	\N	2014-02-16 02:30:21	2014-02-16 02:30:21
1034	39	212	A COMMENT	\N	2014-04-24 20:30:07	2014-04-24 20:30:07
1035	43	212	A COMMENT	\N	2014-06-05 10:55:48	2014-06-05 10:55:48
1036	47	212	A COMMENT	\N	2014-06-25 05:23:04	2014-06-25 05:23:04
1037	4	212	A COMMENT	\N	2014-07-05 23:31:05	2014-07-05 23:31:05
1038	47	213	A COMMENT	\N	2013-12-15 23:11:39	2013-12-15 23:11:39
1039	3	213	A COMMENT	\N	2014-03-27 15:31:15	2014-03-27 15:31:15
1040	27	213	A COMMENT	\N	2014-04-21 03:17:07	2014-04-21 03:17:07
1041	47	213	A COMMENT	\N	2014-07-14 02:11:16	2014-07-14 02:11:16
1042	11	214	A COMMENT	\N	2013-12-13 06:04:15	2013-12-13 06:04:15
1043	2	214	A COMMENT	\N	2014-07-21 09:15:56	2014-07-21 09:15:56
1044	39	215	A COMMENT	\N	2014-04-11 09:36:52	2014-04-11 09:36:52
1045	11	215	A COMMENT	\N	2014-04-12 08:46:40	2014-04-12 08:46:40
1046	4	215	A COMMENT	\N	2014-04-17 12:51:20	2014-04-17 12:51:20
1047	47	215	A COMMENT	\N	2014-04-22 02:49:37	2014-04-22 02:49:37
1048	1	215	A COMMENT	\N	2014-04-27 16:30:40	2014-04-27 16:30:40
1049	28	215	A COMMENT	\N	2014-05-12 13:58:26	2014-05-12 13:58:26
1050	3	215	A COMMENT	\N	2014-05-18 08:15:27	2014-05-18 08:15:27
1051	28	215	A COMMENT	\N	2014-05-25 17:28:27	2014-05-25 17:28:27
1052	37	215	A COMMENT	\N	2014-05-30 16:20:59	2014-05-30 16:20:59
1053	43	215	A COMMENT	\N	2014-06-08 11:50:46	2014-06-08 11:50:46
1054	45	215	A COMMENT	\N	2014-06-18 14:40:15	2014-06-18 14:40:15
1055	39	215	A COMMENT	\N	2014-06-20 05:48:32	2014-06-20 05:48:32
1056	43	215	A COMMENT	\N	2014-06-30 07:16:11	2014-06-30 07:16:11
1057	8	215	A COMMENT	\N	2014-07-02 00:00:35	2014-07-02 00:00:35
1058	28	215	A COMMENT	\N	2014-07-06 20:06:27	2014-07-06 20:06:27
1059	14	215	A COMMENT	\N	2014-07-12 11:03:19	2014-07-12 11:03:19
1060	30	215	A COMMENT	\N	2014-07-20 03:38:54	2014-07-20 03:38:54
1061	30	215	A COMMENT	\N	2014-07-25 19:51:19	2014-07-25 19:51:19
1062	14	216	A COMMENT	\N	2013-12-28 17:01:23	2013-12-28 17:01:23
1063	47	216	A COMMENT	\N	2014-06-16 07:45:42	2014-06-16 07:45:42
1064	4	220	A COMMENT	\N	2014-03-02 00:38:57	2014-03-02 00:38:57
1065	11	220	A COMMENT	\N	2014-03-28 20:55:11	2014-03-28 20:55:11
1066	4	220	A COMMENT	\N	2014-03-31 22:54:35	2014-03-31 22:54:35
1067	14	220	A COMMENT	\N	2014-04-01 00:06:23	2014-04-01 00:06:23
1068	39	220	A COMMENT	\N	2014-04-30 23:09:37	2014-04-30 23:09:37
1069	47	220	A COMMENT	\N	2014-05-03 22:06:50	2014-05-03 22:06:50
1070	21	220	A COMMENT	\N	2014-05-09 19:43:21	2014-05-09 19:43:21
1071	8	220	A COMMENT	\N	2014-05-15 09:49:58	2014-05-15 09:49:58
1072	43	220	A COMMENT	\N	2014-05-16 07:46:24	2014-05-16 07:46:24
1073	39	220	A COMMENT	\N	2014-05-30 14:56:06	2014-05-30 14:56:06
1074	2	220	A COMMENT	\N	2014-06-03 17:52:53	2014-06-03 17:52:53
1075	3	220	A COMMENT	\N	2014-06-29 09:19:09	2014-06-29 09:19:09
1076	4	220	A COMMENT	\N	2014-07-07 01:17:42	2014-07-07 01:17:42
1077	27	221	A COMMENT	\N	2013-12-04 16:26:42	2013-12-04 16:26:42
1078	32	221	A COMMENT	\N	2013-12-05 13:45:04	2013-12-05 13:45:04
1079	4	221	A COMMENT	\N	2013-12-22 04:25:11	2013-12-22 04:25:11
1080	1	221	A COMMENT	\N	2014-02-01 05:36:09	2014-02-01 05:36:09
1081	27	221	A COMMENT	\N	2014-02-06 23:39:53	2014-02-06 23:39:53
1082	2	221	A COMMENT	\N	2014-02-24 11:21:47	2014-02-24 11:21:47
1083	43	221	A COMMENT	\N	2014-04-17 18:44:38	2014-04-17 18:44:38
1084	8	221	A COMMENT	\N	2014-06-14 12:23:12	2014-06-14 12:23:12
1085	47	221	A COMMENT	\N	2014-06-16 02:19:18	2014-06-16 02:19:18
1086	30	222	A COMMENT	\N	2014-01-09 00:16:53	2014-01-09 00:16:53
1087	21	222	A COMMENT	\N	2014-03-25 17:00:39	2014-03-25 17:00:39
1088	28	222	A COMMENT	\N	2014-06-25 06:35:03	2014-06-25 06:35:03
1089	45	223	A COMMENT	\N	2014-06-14 06:48:16	2014-06-14 06:48:16
1090	35	224	A COMMENT	\N	2014-01-01 12:27:18	2014-01-01 12:27:18
1091	14	224	A COMMENT	\N	2014-01-25 19:13:07	2014-01-25 19:13:07
1092	1	224	A COMMENT	\N	2014-06-09 00:46:26	2014-06-09 00:46:26
1093	28	226	A COMMENT	\N	2014-01-04 03:49:08	2014-01-04 03:49:08
1094	30	226	A COMMENT	\N	2014-01-10 11:55:34	2014-01-10 11:55:34
1095	14	226	A COMMENT	\N	2014-01-23 02:27:53	2014-01-23 02:27:53
1096	21	226	A COMMENT	\N	2014-02-10 05:13:25	2014-02-10 05:13:25
1097	14	226	A COMMENT	\N	2014-02-11 02:48:13	2014-02-11 02:48:13
1098	45	226	A COMMENT	\N	2014-03-01 19:27:40	2014-03-01 19:27:40
1099	45	226	A COMMENT	\N	2014-05-02 12:04:42	2014-05-02 12:04:42
1100	32	226	A COMMENT	\N	2014-05-09 19:47:07	2014-05-09 19:47:07
1101	4	226	A COMMENT	\N	2014-05-16 03:08:07	2014-05-16 03:08:07
1102	8	226	A COMMENT	\N	2014-06-20 02:37:44	2014-06-20 02:37:44
1103	39	227	A COMMENT	\N	2014-03-22 01:02:12	2014-03-22 01:02:12
1104	4	228	A COMMENT	\N	2014-04-13 08:32:31	2014-04-13 08:32:31
1105	27	228	A COMMENT	\N	2014-04-28 05:59:53	2014-04-28 05:59:53
1106	3	228	A COMMENT	\N	2014-05-07 05:33:31	2014-05-07 05:33:31
1107	30	228	A COMMENT	\N	2014-06-08 12:01:48	2014-06-08 12:01:48
1108	35	229	A COMMENT	\N	2014-01-17 14:30:44	2014-01-17 14:30:44
1109	1	230	A COMMENT	\N	2014-05-19 03:22:34	2014-05-19 03:22:34
1110	28	230	A COMMENT	\N	2014-05-22 02:32:34	2014-05-22 02:32:34
1111	4	230	A COMMENT	\N	2014-06-14 10:52:46	2014-06-14 10:52:46
1112	35	231	A COMMENT	\N	2014-02-01 11:18:32	2014-02-01 11:18:32
1113	21	231	A COMMENT	\N	2014-02-07 05:48:34	2014-02-07 05:48:34
1114	47	231	A COMMENT	\N	2014-03-14 15:32:14	2014-03-14 15:32:14
1115	28	231	A COMMENT	\N	2014-03-15 21:34:54	2014-03-15 21:34:54
1116	1	231	A COMMENT	\N	2014-03-17 13:41:55	2014-03-17 13:41:55
1117	14	231	A COMMENT	\N	2014-03-18 21:03:58	2014-03-18 21:03:58
1118	39	231	A COMMENT	\N	2014-04-03 14:05:22	2014-04-03 14:05:22
1119	14	231	A COMMENT	\N	2014-04-09 19:00:43	2014-04-09 19:00:43
1120	10	231	A COMMENT	\N	2014-05-06 01:41:17	2014-05-06 01:41:17
1121	8	231	A COMMENT	\N	2014-05-07 10:43:49	2014-05-07 10:43:49
1122	45	231	A COMMENT	\N	2014-06-13 14:43:43	2014-06-13 14:43:43
1123	11	232	A COMMENT	\N	2014-04-12 00:49:01	2014-04-12 00:49:01
1124	28	232	A COMMENT	\N	2014-05-04 07:07:55	2014-05-04 07:07:55
1125	45	232	A COMMENT	\N	2014-05-04 22:35:00	2014-05-04 22:35:00
1126	35	233	A COMMENT	\N	2014-04-01 04:55:22	2014-04-01 04:55:22
1127	43	235	A COMMENT	\N	2014-07-13 04:38:05	2014-07-13 04:38:05
1128	28	235	A COMMENT	\N	2014-07-21 16:27:19	2014-07-21 16:27:19
1129	30	236	A COMMENT	\N	2014-03-11 05:34:54	2014-03-11 05:34:54
1130	21	236	A COMMENT	\N	2014-03-18 13:57:38	2014-03-18 13:57:38
1131	35	237	A COMMENT	\N	2014-03-10 18:32:44	2014-03-10 18:32:44
1132	35	239	A COMMENT	\N	2014-02-14 19:25:41	2014-02-14 19:25:41
1133	30	240	A COMMENT	\N	2013-12-23 07:52:55	2013-12-23 07:52:55
1134	4	240	A COMMENT	\N	2014-01-14 02:31:47	2014-01-14 02:31:47
1135	1	240	A COMMENT	\N	2014-02-06 16:29:28	2014-02-06 16:29:28
1136	3	240	A COMMENT	\N	2014-02-21 14:10:33	2014-02-21 14:10:33
1137	4	240	A COMMENT	\N	2014-03-19 20:27:29	2014-03-19 20:27:29
1138	2	240	A COMMENT	\N	2014-03-26 03:39:41	2014-03-26 03:39:41
1139	11	240	A COMMENT	\N	2014-04-15 21:22:17	2014-04-15 21:22:17
1140	28	240	A COMMENT	\N	2014-04-29 22:32:54	2014-04-29 22:32:54
1141	14	240	A COMMENT	\N	2014-05-05 06:27:08	2014-05-05 06:27:08
1142	21	240	A COMMENT	\N	2014-05-14 05:14:12	2014-05-14 05:14:12
1143	27	240	A COMMENT	\N	2014-06-04 08:27:05	2014-06-04 08:27:05
1144	2	240	A COMMENT	\N	2014-06-04 10:51:56	2014-06-04 10:51:56
1145	47	240	A COMMENT	\N	2014-06-07 11:45:41	2014-06-07 11:45:41
1146	8	240	A COMMENT	\N	2014-07-24 01:01:19	2014-07-24 01:01:19
1147	2	241	A COMMENT	\N	2014-06-07 09:43:45	2014-06-07 09:43:45
1148	37	241	A COMMENT	\N	2014-06-21 12:02:12	2014-06-21 12:02:12
1149	47	241	A COMMENT	\N	2014-06-23 10:26:03	2014-06-23 10:26:03
1150	28	242	A COMMENT	\N	2014-06-15 18:46:29	2014-06-15 18:46:29
1151	21	243	A COMMENT	\N	2014-07-03 21:24:57	2014-07-03 21:24:57
1152	35	244	A COMMENT	\N	2014-03-31 13:22:18	2014-03-31 13:22:18
1153	27	244	A COMMENT	\N	2014-05-02 15:53:20	2014-05-02 15:53:20
1154	27	244	A COMMENT	\N	2014-05-09 09:35:51	2014-05-09 09:35:51
1155	32	244	A COMMENT	\N	2014-05-10 07:37:25	2014-05-10 07:37:25
1156	45	244	A COMMENT	\N	2014-05-29 20:56:21	2014-05-29 20:56:21
1157	8	244	A COMMENT	\N	2014-06-21 05:35:16	2014-06-21 05:35:16
1158	35	248	A COMMENT	\N	2014-01-03 03:45:02	2014-01-03 03:45:02
1159	21	248	A COMMENT	\N	2014-01-13 17:15:31	2014-01-13 17:15:31
1160	47	248	A COMMENT	\N	2014-03-29 19:12:59	2014-03-29 19:12:59
1161	10	248	A COMMENT	\N	2014-05-04 03:11:48	2014-05-04 03:11:48
1162	27	249	A COMMENT	\N	2014-06-24 23:53:31	2014-06-24 23:53:31
1163	35	250	A COMMENT	\N	2013-12-14 16:29:38	2013-12-14 16:29:38
1164	11	250	A COMMENT	\N	2013-12-18 15:43:14	2013-12-18 15:43:14
1165	37	250	A COMMENT	\N	2014-02-03 06:44:12	2014-02-03 06:44:12
1166	10	250	A COMMENT	\N	2014-03-03 23:40:13	2014-03-03 23:40:13
1167	4	250	A COMMENT	\N	2014-07-18 12:55:04	2014-07-18 12:55:04
1168	35	251	A COMMENT	\N	2013-11-30 02:30:03	2013-11-30 02:30:03
1169	30	251	A COMMENT	\N	2014-01-28 05:02:43	2014-01-28 05:02:43
1170	4	251	A COMMENT	\N	2014-01-31 02:19:34	2014-01-31 02:19:34
1171	11	251	A COMMENT	\N	2014-02-04 14:32:08	2014-02-04 14:32:08
1172	30	251	A COMMENT	\N	2014-02-26 06:35:41	2014-02-26 06:35:41
1173	1	251	A COMMENT	\N	2014-05-20 20:35:12	2014-05-20 20:35:12
1174	8	251	A COMMENT	\N	2014-06-01 14:36:54	2014-06-01 14:36:54
1175	11	251	A COMMENT	\N	2014-06-12 19:30:07	2014-06-12 19:30:07
1176	27	251	A COMMENT	\N	2014-06-25 06:33:55	2014-06-25 06:33:55
1177	35	252	A COMMENT	\N	2013-12-08 20:47:01	2013-12-08 20:47:01
1178	35	254	A COMMENT	\N	2014-02-23 12:31:05	2014-02-23 12:31:05
1179	11	254	A COMMENT	\N	2014-02-23 23:09:31	2014-02-23 23:09:31
1180	14	254	A COMMENT	\N	2014-02-25 07:53:37	2014-02-25 07:53:37
1181	11	254	A COMMENT	\N	2014-02-28 13:24:53	2014-02-28 13:24:53
1182	32	254	A COMMENT	\N	2014-03-27 06:18:06	2014-03-27 06:18:06
1183	1	254	A COMMENT	\N	2014-04-02 12:17:05	2014-04-02 12:17:05
1184	39	254	A COMMENT	\N	2014-04-23 11:05:03	2014-04-23 11:05:03
1185	27	254	A COMMENT	\N	2014-04-28 02:13:15	2014-04-28 02:13:15
1186	3	254	A COMMENT	\N	2014-05-02 21:09:51	2014-05-02 21:09:51
1187	47	254	A COMMENT	\N	2014-05-04 04:41:53	2014-05-04 04:41:53
1188	1	254	A COMMENT	\N	2014-05-04 12:18:11	2014-05-04 12:18:11
1189	4	254	A COMMENT	\N	2014-05-09 07:07:47	2014-05-09 07:07:47
1190	30	254	A COMMENT	\N	2014-05-19 22:49:05	2014-05-19 22:49:05
1191	2	254	A COMMENT	\N	2014-05-25 17:29:40	2014-05-25 17:29:40
1192	4	254	A COMMENT	\N	2014-05-28 10:46:51	2014-05-28 10:46:51
1193	39	254	A COMMENT	\N	2014-06-09 20:23:48	2014-06-09 20:23:48
1194	21	254	A COMMENT	\N	2014-06-10 12:32:16	2014-06-10 12:32:16
1195	32	254	A COMMENT	\N	2014-06-20 00:18:49	2014-06-20 00:18:49
1196	43	254	A COMMENT	\N	2014-06-23 06:24:35	2014-06-23 06:24:35
1197	28	254	A COMMENT	\N	2014-07-24 01:33:01	2014-07-24 01:33:01
1198	4	255	A COMMENT	\N	2014-03-02 08:26:43	2014-03-02 08:26:43
1199	21	255	A COMMENT	\N	2014-04-02 03:22:52	2014-04-02 03:22:52
1200	27	255	A COMMENT	\N	2014-06-17 00:03:40	2014-06-17 00:03:40
1201	27	256	A COMMENT	\N	2014-02-28 08:01:55	2014-02-28 08:01:55
1202	3	256	A COMMENT	\N	2014-03-03 06:30:43	2014-03-03 06:30:43
1203	3	256	A COMMENT	\N	2014-06-16 17:49:41	2014-06-16 17:49:41
1204	21	256	A COMMENT	\N	2014-07-09 21:02:15	2014-07-09 21:02:15
1205	30	257	A COMMENT	\N	2014-05-03 08:51:49	2014-05-03 08:51:49
1206	3	257	A COMMENT	\N	2014-05-19 17:36:50	2014-05-19 17:36:50
1207	32	257	A COMMENT	\N	2014-05-28 04:55:33	2014-05-28 04:55:33
1208	3	258	A COMMENT	\N	2014-04-18 15:37:42	2014-04-18 15:37:42
1209	32	258	A COMMENT	\N	2014-04-28 19:23:03	2014-04-28 19:23:03
1210	28	258	A COMMENT	\N	2014-05-27 16:12:23	2014-05-27 16:12:23
1211	1	258	A COMMENT	\N	2014-06-22 01:55:48	2014-06-22 01:55:48
1212	8	258	A COMMENT	\N	2014-07-21 04:31:31	2014-07-21 04:31:31
1213	8	263	A COMMENT	\N	2014-04-29 00:44:03	2014-04-29 00:44:03
1214	45	263	A COMMENT	\N	2014-05-17 22:51:45	2014-05-17 22:51:45
1215	30	263	A COMMENT	\N	2014-05-29 17:54:50	2014-05-29 17:54:50
1216	13	265	A COMMENT	\N	2014-04-06 06:19:16	2014-04-06 06:19:16
1217	39	265	A COMMENT	\N	2014-06-12 11:24:20	2014-06-12 11:24:20
1218	13	267	A COMMENT	\N	2014-05-12 03:10:24	2014-05-12 03:10:24
1219	10	267	A COMMENT	\N	2014-05-16 19:50:24	2014-05-16 19:50:24
1220	47	267	A COMMENT	\N	2014-06-01 02:01:13	2014-06-01 02:01:13
1221	1	267	A COMMENT	\N	2014-06-05 18:32:59	2014-06-05 18:32:59
1222	27	267	A COMMENT	\N	2014-06-13 14:08:47	2014-06-13 14:08:47
1223	4	267	A COMMENT	\N	2014-07-09 12:31:02	2014-07-09 12:31:02
1224	14	268	A COMMENT	\N	2014-05-18 08:56:25	2014-05-18 08:56:25
1225	4	268	A COMMENT	\N	2014-05-22 13:59:09	2014-05-22 13:59:09
1226	10	268	A COMMENT	\N	2014-05-28 12:33:38	2014-05-28 12:33:38
1227	11	268	A COMMENT	\N	2014-05-29 14:32:47	2014-05-29 14:32:47
1228	27	268	A COMMENT	\N	2014-06-16 02:39:17	2014-06-16 02:39:17
1229	30	268	A COMMENT	\N	2014-06-21 01:20:03	2014-06-21 01:20:03
1230	37	268	A COMMENT	\N	2014-07-13 06:14:21	2014-07-13 06:14:21
1231	14	268	A COMMENT	\N	2014-07-22 22:42:28	2014-07-22 22:42:28
1232	43	269	A COMMENT	\N	2014-04-10 23:22:38	2014-04-10 23:22:38
1233	3	269	A COMMENT	\N	2014-04-16 12:11:15	2014-04-16 12:11:15
1234	28	269	A COMMENT	\N	2014-05-01 08:29:48	2014-05-01 08:29:48
1235	2	269	A COMMENT	\N	2014-06-06 16:00:47	2014-06-06 16:00:47
1236	43	269	A COMMENT	\N	2014-06-15 23:37:45	2014-06-15 23:37:45
1237	10	269	A COMMENT	\N	2014-07-08 16:01:56	2014-07-08 16:01:56
1238	27	269	A COMMENT	\N	2014-07-13 05:14:09	2014-07-13 05:14:09
1239	8	270	A COMMENT	\N	2013-12-05 04:53:01	2013-12-05 04:53:01
1240	10	270	A COMMENT	\N	2014-01-26 07:46:16	2014-01-26 07:46:16
1241	28	270	A COMMENT	\N	2014-02-26 23:31:22	2014-02-26 23:31:22
1242	43	270	A COMMENT	\N	2014-03-04 14:32:24	2014-03-04 14:32:24
1243	21	270	A COMMENT	\N	2014-03-24 06:46:09	2014-03-24 06:46:09
1244	8	270	A COMMENT	\N	2014-03-27 07:41:41	2014-03-27 07:41:41
1245	14	270	A COMMENT	\N	2014-03-30 19:06:09	2014-03-30 19:06:09
1246	2	270	A COMMENT	\N	2014-04-07 22:08:57	2014-04-07 22:08:57
1247	43	271	A COMMENT	\N	2014-04-21 03:41:10	2014-04-21 03:41:10
1248	37	271	A COMMENT	\N	2014-05-20 23:47:39	2014-05-20 23:47:39
1249	45	271	A COMMENT	\N	2014-06-20 10:06:38	2014-06-20 10:06:38
1250	28	271	A COMMENT	\N	2014-07-06 14:31:01	2014-07-06 14:31:01
1251	4	271	A COMMENT	\N	2014-07-09 10:13:26	2014-07-09 10:13:26
1252	14	273	A COMMENT	\N	2014-06-20 10:51:01	2014-06-20 10:51:01
1253	45	273	A COMMENT	\N	2014-06-30 00:48:02	2014-06-30 00:48:02
1254	40	275	A COMMENT	\N	2014-03-22 04:33:51	2014-03-22 04:33:51
1255	28	276	A COMMENT	\N	2014-01-23 13:21:51	2014-01-23 13:21:51
1256	14	276	A COMMENT	\N	2014-04-08 01:32:20	2014-04-08 01:32:20
1257	11	276	A COMMENT	\N	2014-06-15 19:48:02	2014-06-15 19:48:02
1258	14	276	A COMMENT	\N	2014-07-05 11:18:40	2014-07-05 11:18:40
1259	27	276	A COMMENT	\N	2014-07-15 04:20:50	2014-07-15 04:20:50
1260	39	277	A COMMENT	\N	2014-01-12 12:27:41	2014-01-12 12:27:41
1261	10	277	A COMMENT	\N	2014-02-16 00:57:53	2014-02-16 00:57:53
1262	1	277	A COMMENT	\N	2014-03-14 08:13:22	2014-03-14 08:13:22
1263	10	277	A COMMENT	\N	2014-04-12 16:11:00	2014-04-12 16:11:00
1264	1	277	A COMMENT	\N	2014-06-09 18:02:11	2014-06-09 18:02:11
1265	39	278	A COMMENT	\N	2013-12-31 15:55:55	2013-12-31 15:55:55
1266	40	279	A COMMENT	\N	2014-04-29 04:13:58	2014-04-29 04:13:58
1267	39	279	A COMMENT	\N	2014-05-05 23:18:13	2014-05-05 23:18:13
1268	43	279	A COMMENT	\N	2014-06-06 08:55:39	2014-06-06 08:55:39
1269	43	279	A COMMENT	\N	2014-06-12 03:35:17	2014-06-12 03:35:17
1270	32	279	A COMMENT	\N	2014-06-23 18:41:13	2014-06-23 18:41:13
1271	45	279	A COMMENT	\N	2014-07-13 00:43:54	2014-07-13 00:43:54
1272	2	279	A COMMENT	\N	2014-07-18 15:50:39	2014-07-18 15:50:39
1273	40	280	A COMMENT	\N	2014-05-06 07:08:05	2014-05-06 07:08:05
1274	21	280	A COMMENT	\N	2014-05-08 10:59:21	2014-05-08 10:59:21
1275	39	280	A COMMENT	\N	2014-05-29 20:27:33	2014-05-29 20:27:33
1276	21	280	A COMMENT	\N	2014-06-11 17:29:09	2014-06-11 17:29:09
1277	14	280	A COMMENT	\N	2014-06-25 08:37:39	2014-06-25 08:37:39
1278	28	280	A COMMENT	\N	2014-07-13 13:29:36	2014-07-13 13:29:36
1279	43	280	A COMMENT	\N	2014-07-21 02:13:56	2014-07-21 02:13:56
1280	2	280	A COMMENT	\N	2014-07-25 15:52:32	2014-07-25 15:52:32
1281	8	281	A COMMENT	\N	2014-06-23 11:16:04	2014-06-23 11:16:04
1282	2	281	A COMMENT	\N	2014-06-30 00:35:00	2014-06-30 00:35:00
1283	47	281	A COMMENT	\N	2014-07-17 13:51:20	2014-07-17 13:51:20
1284	27	282	A COMMENT	\N	2014-07-11 14:40:22	2014-07-11 14:40:22
1285	47	282	A COMMENT	\N	2014-07-14 09:09:01	2014-07-14 09:09:01
1286	28	282	A COMMENT	\N	2014-07-19 05:06:17	2014-07-19 05:06:17
1287	40	283	A COMMENT	\N	2013-11-15 08:56:00	2013-11-15 08:56:00
1288	14	283	A COMMENT	\N	2013-11-28 22:31:59	2013-11-28 22:31:59
1289	30	283	A COMMENT	\N	2013-12-10 12:16:03	2013-12-10 12:16:03
1290	2	283	A COMMENT	\N	2014-01-02 01:11:29	2014-01-02 01:11:29
1291	43	283	A COMMENT	\N	2014-02-10 03:46:18	2014-02-10 03:46:18
1292	47	283	A COMMENT	\N	2014-04-16 03:54:55	2014-04-16 03:54:55
1293	2	283	A COMMENT	\N	2014-07-23 02:39:09	2014-07-23 02:39:09
1294	8	284	A COMMENT	\N	2014-04-25 06:32:02	2014-04-25 06:32:02
1295	21	285	A COMMENT	\N	2013-12-28 22:04:45	2013-12-28 22:04:45
1296	21	285	A COMMENT	\N	2014-01-17 18:52:56	2014-01-17 18:52:56
1297	27	285	A COMMENT	\N	2014-01-28 12:03:13	2014-01-28 12:03:13
1298	3	285	A COMMENT	\N	2014-03-13 21:00:34	2014-03-13 21:00:34
1299	4	285	A COMMENT	\N	2014-03-20 01:23:47	2014-03-20 01:23:47
1300	2	285	A COMMENT	\N	2014-04-21 00:21:26	2014-04-21 00:21:26
1301	43	285	A COMMENT	\N	2014-04-26 11:50:45	2014-04-26 11:50:45
1302	30	285	A COMMENT	\N	2014-04-27 07:06:50	2014-04-27 07:06:50
1303	43	285	A COMMENT	\N	2014-04-28 01:54:50	2014-04-28 01:54:50
1304	11	285	A COMMENT	\N	2014-06-08 02:20:02	2014-06-08 02:20:02
1305	45	286	A COMMENT	\N	2014-03-02 21:26:18	2014-03-02 21:26:18
1306	21	286	A COMMENT	\N	2014-04-08 19:33:41	2014-04-08 19:33:41
1307	8	286	A COMMENT	\N	2014-04-23 06:02:50	2014-04-23 06:02:50
1308	37	286	A COMMENT	\N	2014-07-09 17:16:17	2014-07-09 17:16:17
1309	28	287	A COMMENT	\N	2014-03-27 10:53:57	2014-03-27 10:53:57
1310	39	287	A COMMENT	\N	2014-06-08 13:33:39	2014-06-08 13:33:39
1311	45	289	A COMMENT	\N	2014-04-10 04:38:05	2014-04-10 04:38:05
1312	3	290	A COMMENT	\N	2014-03-12 05:57:47	2014-03-12 05:57:47
1313	14	290	A COMMENT	\N	2014-04-05 08:25:27	2014-04-05 08:25:27
1314	11	290	A COMMENT	\N	2014-05-20 17:40:35	2014-05-20 17:40:35
1315	45	290	A COMMENT	\N	2014-06-16 05:03:07	2014-06-16 05:03:07
1316	1	290	A COMMENT	\N	2014-07-12 04:00:44	2014-07-12 04:00:44
1317	40	291	A COMMENT	\N	2014-02-15 06:28:37	2014-02-15 06:28:37
1318	37	291	A COMMENT	\N	2014-03-08 23:52:26	2014-03-08 23:52:26
1319	45	291	A COMMENT	\N	2014-03-14 22:35:24	2014-03-14 22:35:24
1320	47	291	A COMMENT	\N	2014-05-10 09:15:29	2014-05-10 09:15:29
1321	40	294	A COMMENT	\N	2014-03-15 07:13:10	2014-03-15 07:13:10
1322	40	295	A COMMENT	\N	2013-11-19 18:46:25	2013-11-19 18:46:25
1323	40	296	A COMMENT	\N	2014-02-04 11:36:46	2014-02-04 11:36:46
1324	30	298	A COMMENT	\N	2013-12-16 14:58:04	2013-12-16 14:58:04
1325	43	298	A COMMENT	\N	2013-12-23 02:25:59	2013-12-23 02:25:59
1326	45	298	A COMMENT	\N	2013-12-23 18:59:14	2013-12-23 18:59:14
1327	4	298	A COMMENT	\N	2014-01-01 22:51:16	2014-01-01 22:51:16
1328	27	298	A COMMENT	\N	2014-02-18 12:22:59	2014-02-18 12:22:59
1329	30	298	A COMMENT	\N	2014-02-19 10:12:01	2014-02-19 10:12:01
1330	28	298	A COMMENT	\N	2014-02-20 13:46:53	2014-02-20 13:46:53
1331	11	298	A COMMENT	\N	2014-02-24 17:15:57	2014-02-24 17:15:57
1332	37	298	A COMMENT	\N	2014-02-26 23:46:06	2014-02-26 23:46:06
1333	21	298	A COMMENT	\N	2014-03-20 05:56:28	2014-03-20 05:56:28
1334	47	298	A COMMENT	\N	2014-03-30 22:55:09	2014-03-30 22:55:09
1335	43	298	A COMMENT	\N	2014-04-09 04:02:34	2014-04-09 04:02:34
1336	32	298	A COMMENT	\N	2014-05-05 00:51:47	2014-05-05 00:51:47
1337	1	298	A COMMENT	\N	2014-05-07 19:09:42	2014-05-07 19:09:42
1338	10	298	A COMMENT	\N	2014-05-16 06:57:30	2014-05-16 06:57:30
1339	37	298	A COMMENT	\N	2014-05-31 19:03:02	2014-05-31 19:03:02
1340	21	298	A COMMENT	\N	2014-06-18 04:03:02	2014-06-18 04:03:02
1341	3	298	A COMMENT	\N	2014-06-21 07:31:00	2014-06-21 07:31:00
1342	32	299	A COMMENT	\N	2014-02-06 08:31:17	2014-02-06 08:31:17
1343	1	299	A COMMENT	\N	2014-02-21 07:30:34	2014-02-21 07:30:34
1344	47	299	A COMMENT	\N	2014-03-05 01:19:01	2014-03-05 01:19:01
1345	30	299	A COMMENT	\N	2014-03-25 11:45:14	2014-03-25 11:45:14
1346	8	299	A COMMENT	\N	2014-07-10 11:33:58	2014-07-10 11:33:58
1347	8	299	A COMMENT	\N	2014-07-12 08:15:02	2014-07-12 08:15:02
1348	27	299	A COMMENT	\N	2014-07-17 18:55:07	2014-07-17 18:55:07
1349	40	300	A COMMENT	\N	2013-11-28 06:42:00	2013-11-28 06:42:00
1350	45	302	A COMMENT	\N	2014-04-15 02:54:14	2014-04-15 02:54:14
1351	27	302	A COMMENT	\N	2014-04-25 07:45:20	2014-04-25 07:45:20
1352	37	302	A COMMENT	\N	2014-05-09 16:28:59	2014-05-09 16:28:59
1353	14	302	A COMMENT	\N	2014-05-24 02:54:46	2014-05-24 02:54:46
1354	45	302	A COMMENT	\N	2014-05-24 20:59:04	2014-05-24 20:59:04
1355	4	302	A COMMENT	\N	2014-05-30 09:14:23	2014-05-30 09:14:23
1356	37	302	A COMMENT	\N	2014-06-24 14:25:49	2014-06-24 14:25:49
1357	10	302	A COMMENT	\N	2014-07-14 10:10:11	2014-07-14 10:10:11
1358	10	303	A COMMENT	\N	2014-06-07 11:16:50	2014-06-07 11:16:50
1359	10	303	A COMMENT	\N	2014-07-03 19:05:00	2014-07-03 19:05:00
1360	14	303	A COMMENT	\N	2014-07-03 19:18:12	2014-07-03 19:18:12
1361	4	303	A COMMENT	\N	2014-07-07 02:18:31	2014-07-07 02:18:31
1362	8	303	A COMMENT	\N	2014-07-20 19:25:26	2014-07-20 19:25:26
1363	10	305	A COMMENT	\N	2013-12-28 23:35:22	2013-12-28 23:35:22
1364	32	305	A COMMENT	\N	2014-01-24 12:02:22	2014-01-24 12:02:22
1365	4	305	A COMMENT	\N	2014-03-06 09:49:40	2014-03-06 09:49:40
1366	39	305	A COMMENT	\N	2014-04-08 10:46:06	2014-04-08 10:46:06
1367	3	305	A COMMENT	\N	2014-07-01 12:32:03	2014-07-01 12:32:03
1368	32	307	A COMMENT	\N	2014-03-23 00:10:28	2014-03-23 00:10:28
1369	1	307	A COMMENT	\N	2014-05-06 17:20:09	2014-05-06 17:20:09
1370	27	307	A COMMENT	\N	2014-06-15 12:34:01	2014-06-15 12:34:01
1371	39	307	A COMMENT	\N	2014-07-07 21:17:50	2014-07-07 21:17:50
1372	10	307	A COMMENT	\N	2014-07-11 08:53:00	2014-07-11 08:53:00
1373	40	308	A COMMENT	\N	2014-02-28 13:41:11	2014-02-28 13:41:11
1374	32	308	A COMMENT	\N	2014-03-12 19:40:10	2014-03-12 19:40:10
1375	40	309	A COMMENT	\N	2014-04-17 01:37:21	2014-04-17 01:37:21
1376	45	310	A COMMENT	\N	2014-07-02 01:40:12	2014-07-02 01:40:12
1377	3	310	A COMMENT	\N	2014-07-07 16:04:41	2014-07-07 16:04:41
1378	28	310	A COMMENT	\N	2014-07-13 18:32:14	2014-07-13 18:32:14
1379	40	312	A COMMENT	\N	2014-01-25 06:20:33	2014-01-25 06:20:33
1380	2	312	A COMMENT	\N	2014-01-31 22:48:30	2014-01-31 22:48:30
1381	32	312	A COMMENT	\N	2014-02-01 12:21:33	2014-02-01 12:21:33
1382	1	312	A COMMENT	\N	2014-04-14 05:55:16	2014-04-14 05:55:16
1383	43	312	A COMMENT	\N	2014-04-24 10:37:53	2014-04-24 10:37:53
1384	43	312	A COMMENT	\N	2014-06-26 11:35:13	2014-06-26 11:35:13
1385	40	314	A COMMENT	\N	2014-02-06 00:26:45	2014-02-06 00:26:45
1386	10	314	A COMMENT	\N	2014-05-05 23:28:31	2014-05-05 23:28:31
1387	45	314	A COMMENT	\N	2014-07-22 02:09:57	2014-07-22 02:09:57
1388	40	315	A COMMENT	\N	2014-01-03 09:33:17	2014-01-03 09:33:17
1389	30	315	A COMMENT	\N	2014-01-08 20:49:21	2014-01-08 20:49:21
1390	8	315	A COMMENT	\N	2014-02-03 04:08:40	2014-02-03 04:08:40
1391	47	315	A COMMENT	\N	2014-03-05 20:46:46	2014-03-05 20:46:46
1392	4	315	A COMMENT	\N	2014-03-12 23:05:56	2014-03-12 23:05:56
1393	4	315	A COMMENT	\N	2014-03-20 06:08:18	2014-03-20 06:08:18
1394	32	315	A COMMENT	\N	2014-03-25 04:57:48	2014-03-25 04:57:48
1395	21	315	A COMMENT	\N	2014-03-29 18:01:54	2014-03-29 18:01:54
1396	45	315	A COMMENT	\N	2014-04-10 04:44:20	2014-04-10 04:44:20
1397	47	315	A COMMENT	\N	2014-04-11 02:36:30	2014-04-11 02:36:30
1398	43	315	A COMMENT	\N	2014-04-27 16:16:29	2014-04-27 16:16:29
1399	30	315	A COMMENT	\N	2014-05-07 15:40:21	2014-05-07 15:40:21
1400	3	315	A COMMENT	\N	2014-05-17 08:13:46	2014-05-17 08:13:46
1401	4	315	A COMMENT	\N	2014-06-02 09:58:26	2014-06-02 09:58:26
1402	11	315	A COMMENT	\N	2014-06-06 23:17:25	2014-06-06 23:17:25
1403	8	315	A COMMENT	\N	2014-06-16 22:59:10	2014-06-16 22:59:10
1404	37	315	A COMMENT	\N	2014-07-13 21:59:14	2014-07-13 21:59:14
1405	40	316	A COMMENT	\N	2014-02-13 23:06:24	2014-02-13 23:06:24
1406	39	316	A COMMENT	\N	2014-04-29 22:23:40	2014-04-29 22:23:40
1407	37	316	A COMMENT	\N	2014-05-06 03:36:04	2014-05-06 03:36:04
1408	37	316	A COMMENT	\N	2014-06-25 23:44:49	2014-06-25 23:44:49
1409	11	316	A COMMENT	\N	2014-07-17 20:58:12	2014-07-17 20:58:12
1410	39	317	A COMMENT	\N	2013-12-06 08:12:14	2013-12-06 08:12:14
1411	21	317	A COMMENT	\N	2013-12-15 04:48:01	2013-12-15 04:48:01
1412	8	317	A COMMENT	\N	2014-01-02 19:24:43	2014-01-02 19:24:43
1413	2	317	A COMMENT	\N	2014-03-30 12:06:32	2014-03-30 12:06:32
1414	10	317	A COMMENT	\N	2014-04-09 16:22:31	2014-04-09 16:22:31
1415	27	317	A COMMENT	\N	2014-04-17 08:22:28	2014-04-17 08:22:28
1416	14	317	A COMMENT	\N	2014-04-20 08:39:10	2014-04-20 08:39:10
1417	43	317	A COMMENT	\N	2014-04-23 08:17:30	2014-04-23 08:17:30
1418	1	317	A COMMENT	\N	2014-07-03 02:27:50	2014-07-03 02:27:50
1419	11	317	A COMMENT	\N	2014-07-13 04:05:57	2014-07-13 04:05:57
1420	4	318	A COMMENT	\N	2014-04-09 23:08:52	2014-04-09 23:08:52
1421	28	318	A COMMENT	\N	2014-04-27 08:03:49	2014-04-27 08:03:49
1422	32	318	A COMMENT	\N	2014-05-08 07:00:47	2014-05-08 07:00:47
1423	14	318	A COMMENT	\N	2014-05-16 22:31:49	2014-05-16 22:31:49
1424	39	318	A COMMENT	\N	2014-06-13 04:47:26	2014-06-13 04:47:26
1425	47	319	A COMMENT	\N	2014-01-17 06:44:44	2014-01-17 06:44:44
1426	39	319	A COMMENT	\N	2014-07-05 14:53:26	2014-07-05 14:53:26
1427	39	320	A COMMENT	\N	2013-12-08 21:46:24	2013-12-08 21:46:24
1428	2	320	A COMMENT	\N	2014-01-04 17:01:13	2014-01-04 17:01:13
1429	14	320	A COMMENT	\N	2014-02-21 07:32:03	2014-02-21 07:32:03
1430	47	320	A COMMENT	\N	2014-03-04 10:48:22	2014-03-04 10:48:22
1431	32	320	A COMMENT	\N	2014-05-07 23:19:30	2014-05-07 23:19:30
1432	27	320	A COMMENT	\N	2014-06-16 06:19:43	2014-06-16 06:19:43
1433	2	320	A COMMENT	\N	2014-06-24 08:16:58	2014-06-24 08:16:58
1434	3	321	A COMMENT	\N	2014-02-20 11:12:10	2014-02-20 11:12:10
1435	43	321	A COMMENT	\N	2014-02-25 06:13:33	2014-02-25 06:13:33
1436	27	321	A COMMENT	\N	2014-03-01 20:43:09	2014-03-01 20:43:09
1437	1	321	A COMMENT	\N	2014-03-09 15:15:14	2014-03-09 15:15:14
1438	39	321	A COMMENT	\N	2014-03-11 04:28:27	2014-03-11 04:28:27
1439	45	321	A COMMENT	\N	2014-03-19 09:03:23	2014-03-19 09:03:23
1440	2	321	A COMMENT	\N	2014-04-28 20:35:09	2014-04-28 20:35:09
1441	30	321	A COMMENT	\N	2014-06-18 05:19:27	2014-06-18 05:19:27
1442	27	321	A COMMENT	\N	2014-06-30 15:23:34	2014-06-30 15:23:34
1443	14	321	A COMMENT	\N	2014-06-30 23:25:25	2014-06-30 23:25:25
1444	21	321	A COMMENT	\N	2014-07-18 04:37:35	2014-07-18 04:37:35
1445	37	321	A COMMENT	\N	2014-07-19 00:13:32	2014-07-19 00:13:32
1446	43	321	A COMMENT	\N	2014-07-20 22:34:22	2014-07-20 22:34:22
1447	37	322	A COMMENT	\N	2014-02-26 22:02:33	2014-02-26 22:02:33
1448	45	322	A COMMENT	\N	2014-03-07 22:37:59	2014-03-07 22:37:59
1449	39	322	A COMMENT	\N	2014-03-11 06:48:19	2014-03-11 06:48:19
1450	14	322	A COMMENT	\N	2014-03-11 20:11:41	2014-03-11 20:11:41
1451	28	322	A COMMENT	\N	2014-04-06 22:46:40	2014-04-06 22:46:40
1452	21	322	A COMMENT	\N	2014-04-29 14:45:24	2014-04-29 14:45:24
1453	2	322	A COMMENT	\N	2014-05-09 02:10:23	2014-05-09 02:10:23
1454	27	322	A COMMENT	\N	2014-05-10 12:22:58	2014-05-10 12:22:58
1455	11	322	A COMMENT	\N	2014-06-03 08:19:43	2014-06-03 08:19:43
1456	10	322	A COMMENT	\N	2014-07-16 00:08:53	2014-07-16 00:08:53
1457	40	323	A COMMENT	\N	2014-04-27 19:50:32	2014-04-27 19:50:32
1458	39	323	A COMMENT	\N	2014-06-03 18:06:41	2014-06-03 18:06:41
1459	3	323	A COMMENT	\N	2014-06-10 14:51:00	2014-06-10 14:51:00
1460	30	323	A COMMENT	\N	2014-06-18 22:29:26	2014-06-18 22:29:26
1461	1	323	A COMMENT	\N	2014-07-20 01:03:02	2014-07-20 01:03:02
1462	10	324	A COMMENT	\N	2014-01-12 14:43:30	2014-01-12 14:43:30
1463	21	324	A COMMENT	\N	2014-02-25 21:04:53	2014-02-25 21:04:53
1464	32	324	A COMMENT	\N	2014-04-23 19:49:34	2014-04-23 19:49:34
1465	32	324	A COMMENT	\N	2014-04-25 06:38:58	2014-04-25 06:38:58
1466	11	324	A COMMENT	\N	2014-05-11 21:32:18	2014-05-11 21:32:18
1467	4	324	A COMMENT	\N	2014-05-12 00:08:34	2014-05-12 00:08:34
1468	39	324	A COMMENT	\N	2014-05-31 06:59:09	2014-05-31 06:59:09
1469	47	324	A COMMENT	\N	2014-06-25 01:58:11	2014-06-25 01:58:11
1470	1	324	A COMMENT	\N	2014-07-13 18:13:24	2014-07-13 18:13:24
1471	21	325	A COMMENT	\N	2014-02-15 00:55:36	2014-02-15 00:55:36
1472	30	325	A COMMENT	\N	2014-07-09 23:00:41	2014-07-09 23:00:41
1473	47	326	A COMMENT	\N	2014-07-18 12:01:39	2014-07-18 12:01:39
1474	30	328	A COMMENT	\N	2014-06-06 14:18:13	2014-06-06 14:18:13
1475	32	328	A COMMENT	\N	2014-06-27 23:38:19	2014-06-27 23:38:19
1476	5	329	A COMMENT	\N	2014-04-09 04:29:30	2014-04-09 04:29:30
1477	11	329	A COMMENT	\N	2014-04-15 21:59:09	2014-04-15 21:59:09
1478	2	329	A COMMENT	\N	2014-05-09 20:52:51	2014-05-09 20:52:51
1479	39	329	A COMMENT	\N	2014-05-26 22:39:59	2014-05-26 22:39:59
1480	8	329	A COMMENT	\N	2014-07-10 06:15:36	2014-07-10 06:15:36
1481	5	330	A COMMENT	\N	2014-03-21 12:00:20	2014-03-21 12:00:20
1482	1	330	A COMMENT	\N	2014-03-26 05:21:18	2014-03-26 05:21:18
1483	30	330	A COMMENT	\N	2014-06-03 20:22:55	2014-06-03 20:22:55
1484	8	330	A COMMENT	\N	2014-06-05 17:40:47	2014-06-05 17:40:47
1485	33	332	A COMMENT	\N	2013-11-30 02:24:45	2013-11-30 02:24:45
1486	30	332	A COMMENT	\N	2014-03-14 12:14:05	2014-03-14 12:14:05
1487	10	332	A COMMENT	\N	2014-03-30 10:47:48	2014-03-30 10:47:48
1488	10	333	A COMMENT	\N	2014-02-11 10:16:53	2014-02-11 10:16:53
1489	8	333	A COMMENT	\N	2014-02-22 04:49:20	2014-02-22 04:49:20
1490	10	333	A COMMENT	\N	2014-04-02 03:48:48	2014-04-02 03:48:48
1491	2	333	A COMMENT	\N	2014-05-23 16:20:42	2014-05-23 16:20:42
1492	11	333	A COMMENT	\N	2014-07-01 14:12:25	2014-07-01 14:12:25
1493	33	334	A COMMENT	\N	2014-04-23 19:40:36	2014-04-23 19:40:36
1494	4	334	A COMMENT	\N	2014-04-29 08:06:02	2014-04-29 08:06:02
1495	37	334	A COMMENT	\N	2014-05-04 07:34:23	2014-05-04 07:34:23
1496	30	334	A COMMENT	\N	2014-05-04 21:10:06	2014-05-04 21:10:06
1497	8	334	A COMMENT	\N	2014-05-04 23:05:48	2014-05-04 23:05:48
1498	1	334	A COMMENT	\N	2014-05-05 12:54:33	2014-05-05 12:54:33
1499	10	334	A COMMENT	\N	2014-05-11 16:19:23	2014-05-11 16:19:23
1500	10	334	A COMMENT	\N	2014-05-20 06:30:30	2014-05-20 06:30:30
1501	21	334	A COMMENT	\N	2014-05-22 10:27:29	2014-05-22 10:27:29
1502	4	334	A COMMENT	\N	2014-05-31 12:24:37	2014-05-31 12:24:37
1503	8	334	A COMMENT	\N	2014-06-08 02:29:10	2014-06-08 02:29:10
1504	2	334	A COMMENT	\N	2014-06-10 11:25:16	2014-06-10 11:25:16
1505	45	334	A COMMENT	\N	2014-06-15 21:34:43	2014-06-15 21:34:43
1506	10	334	A COMMENT	\N	2014-06-25 18:09:11	2014-06-25 18:09:11
1507	47	334	A COMMENT	\N	2014-06-28 14:16:38	2014-06-28 14:16:38
1508	32	334	A COMMENT	\N	2014-07-01 08:09:31	2014-07-01 08:09:31
1509	11	334	A COMMENT	\N	2014-07-07 06:42:01	2014-07-07 06:42:01
1510	1	334	A COMMENT	\N	2014-07-12 05:26:08	2014-07-12 05:26:08
1511	11	334	A COMMENT	\N	2014-07-15 00:42:55	2014-07-15 00:42:55
1512	14	334	A COMMENT	\N	2014-07-20 03:11:36	2014-07-20 03:11:36
1513	3	334	A COMMENT	\N	2014-07-22 09:10:59	2014-07-22 09:10:59
1514	21	335	A COMMENT	\N	2014-01-21 06:01:37	2014-01-21 06:01:37
1515	8	335	A COMMENT	\N	2014-01-31 15:26:18	2014-01-31 15:26:18
1516	10	335	A COMMENT	\N	2014-02-08 23:28:05	2014-02-08 23:28:05
1517	30	335	A COMMENT	\N	2014-03-16 10:50:00	2014-03-16 10:50:00
1518	21	335	A COMMENT	\N	2014-07-04 02:35:23	2014-07-04 02:35:23
1519	33	336	A COMMENT	\N	2014-01-05 10:05:12	2014-01-05 10:05:12
1520	4	336	A COMMENT	\N	2014-01-06 13:23:21	2014-01-06 13:23:21
1521	3	336	A COMMENT	\N	2014-02-16 09:16:42	2014-02-16 09:16:42
1522	45	336	A COMMENT	\N	2014-02-25 13:21:48	2014-02-25 13:21:48
1523	37	336	A COMMENT	\N	2014-03-16 10:19:02	2014-03-16 10:19:02
1524	37	336	A COMMENT	\N	2014-04-13 14:21:34	2014-04-13 14:21:34
1525	10	336	A COMMENT	\N	2014-05-06 01:01:50	2014-05-06 01:01:50
1526	3	336	A COMMENT	\N	2014-06-01 13:00:10	2014-06-01 13:00:10
1527	1	336	A COMMENT	\N	2014-06-01 23:54:07	2014-06-01 23:54:07
1528	28	336	A COMMENT	\N	2014-06-06 03:47:52	2014-06-06 03:47:52
1529	43	336	A COMMENT	\N	2014-06-14 22:15:28	2014-06-14 22:15:28
1530	8	336	A COMMENT	\N	2014-07-03 13:50:23	2014-07-03 13:50:23
1531	1	336	A COMMENT	\N	2014-07-25 04:50:51	2014-07-25 04:50:51
1532	27	338	A COMMENT	\N	2014-03-05 12:30:30	2014-03-05 12:30:30
1533	39	338	A COMMENT	\N	2014-06-09 02:48:05	2014-06-09 02:48:05
1534	4	338	A COMMENT	\N	2014-07-21 11:34:20	2014-07-21 11:34:20
1535	43	340	A COMMENT	\N	2014-03-25 06:41:26	2014-03-25 06:41:26
1536	1	340	A COMMENT	\N	2014-03-27 18:18:35	2014-03-27 18:18:35
1537	21	340	A COMMENT	\N	2014-03-30 17:58:25	2014-03-30 17:58:25
1538	4	340	A COMMENT	\N	2014-04-13 16:43:59	2014-04-13 16:43:59
1539	37	340	A COMMENT	\N	2014-04-17 02:51:26	2014-04-17 02:51:26
1540	27	340	A COMMENT	\N	2014-04-30 05:52:13	2014-04-30 05:52:13
1541	10	340	A COMMENT	\N	2014-05-02 20:46:04	2014-05-02 20:46:04
1542	8	340	A COMMENT	\N	2014-05-14 04:44:18	2014-05-14 04:44:18
1543	11	340	A COMMENT	\N	2014-06-03 14:48:23	2014-06-03 14:48:23
1544	27	340	A COMMENT	\N	2014-06-23 03:38:17	2014-06-23 03:38:17
1545	37	340	A COMMENT	\N	2014-07-07 12:54:12	2014-07-07 12:54:12
1546	3	342	A COMMENT	\N	2014-07-20 02:53:54	2014-07-20 02:53:54
1547	27	342	A COMMENT	\N	2014-07-25 01:42:21	2014-07-25 01:42:21
1548	11	343	A COMMENT	\N	2014-03-11 21:05:46	2014-03-11 21:05:46
1549	30	343	A COMMENT	\N	2014-06-03 10:16:01	2014-06-03 10:16:01
1550	47	343	A COMMENT	\N	2014-06-16 13:06:51	2014-06-16 13:06:51
1551	2	343	A COMMENT	\N	2014-06-25 01:01:11	2014-06-25 01:01:11
1552	27	343	A COMMENT	\N	2014-07-06 22:15:30	2014-07-06 22:15:30
1553	39	344	A COMMENT	\N	2014-07-26 06:28:23	2014-07-26 06:28:23
1554	4	345	A COMMENT	\N	2014-03-24 22:35:13	2014-03-24 22:35:13
1555	1	345	A COMMENT	\N	2014-04-01 22:01:25	2014-04-01 22:01:25
1556	21	345	A COMMENT	\N	2014-04-12 03:19:25	2014-04-12 03:19:25
1557	47	345	A COMMENT	\N	2014-04-24 05:34:15	2014-04-24 05:34:15
1558	11	345	A COMMENT	\N	2014-04-26 20:05:08	2014-04-26 20:05:08
1559	43	345	A COMMENT	\N	2014-05-25 03:46:50	2014-05-25 03:46:50
1560	21	345	A COMMENT	\N	2014-06-09 11:48:26	2014-06-09 11:48:26
1561	27	345	A COMMENT	\N	2014-06-17 10:43:02	2014-06-17 10:43:02
1562	4	345	A COMMENT	\N	2014-07-23 14:38:06	2014-07-23 14:38:06
1563	15	346	A COMMENT	\N	2014-04-20 01:15:05	2014-04-20 01:15:05
1564	1	346	A COMMENT	\N	2014-04-24 13:00:01	2014-04-24 13:00:01
1565	3	346	A COMMENT	\N	2014-05-04 14:31:32	2014-05-04 14:31:32
1566	47	346	A COMMENT	\N	2014-05-23 11:23:51	2014-05-23 11:23:51
1567	11	346	A COMMENT	\N	2014-06-29 16:27:07	2014-06-29 16:27:07
1568	21	346	A COMMENT	\N	2014-07-14 15:49:36	2014-07-14 15:49:36
1569	32	347	A COMMENT	\N	2014-01-18 05:05:39	2014-01-18 05:05:39
1570	43	347	A COMMENT	\N	2014-01-30 19:38:02	2014-01-30 19:38:02
1571	37	347	A COMMENT	\N	2014-02-13 04:16:57	2014-02-13 04:16:57
1572	28	347	A COMMENT	\N	2014-02-20 02:40:40	2014-02-20 02:40:40
1573	3	347	A COMMENT	\N	2014-03-03 23:53:43	2014-03-03 23:53:43
1574	39	347	A COMMENT	\N	2014-05-02 03:00:05	2014-05-02 03:00:05
1575	3	347	A COMMENT	\N	2014-05-09 06:59:15	2014-05-09 06:59:15
1576	8	347	A COMMENT	\N	2014-06-04 10:18:09	2014-06-04 10:18:09
1577	27	347	A COMMENT	\N	2014-06-12 22:29:23	2014-06-12 22:29:23
1578	17	350	A COMMENT	\N	2014-01-28 08:57:20	2014-01-28 08:57:20
1579	17	355	A COMMENT	\N	2014-03-15 22:21:49	2014-03-15 22:21:49
1580	17	356	A COMMENT	\N	2014-06-20 23:19:36	2014-06-20 23:19:36
1581	17	357	A COMMENT	\N	2014-03-16 22:20:03	2014-03-16 22:20:03
1582	17	358	A COMMENT	\N	2014-04-29 10:34:17	2014-04-29 10:34:17
1583	17	361	A COMMENT	\N	2014-01-10 01:43:42	2014-01-10 01:43:42
1584	17	363	A COMMENT	\N	2014-03-18 21:42:26	2014-03-18 21:42:26
1585	17	364	A COMMENT	\N	2014-03-26 01:52:27	2014-03-26 01:52:27
1586	17	366	A COMMENT	\N	2014-07-02 00:04:19	2014-07-02 00:04:19
1587	17	368	A COMMENT	\N	2014-04-04 03:27:26	2014-04-04 03:27:26
1588	17	371	A COMMENT	\N	2014-02-15 08:31:37	2014-02-15 08:31:37
1589	17	378	A COMMENT	\N	2014-01-18 20:07:08	2014-01-18 20:07:08
1590	17	379	A COMMENT	\N	2014-03-03 05:19:13	2014-03-03 05:19:13
1591	17	385	A COMMENT	\N	2014-06-24 04:21:52	2014-06-24 04:21:52
1592	23	391	A COMMENT	\N	2014-01-01 22:09:26	2014-01-01 22:09:26
1593	23	394	A COMMENT	\N	2014-05-21 00:35:57	2014-05-21 00:35:57
1594	41	396	A COMMENT	\N	2014-05-17 07:37:21	2014-05-17 07:37:21
1595	41	399	A COMMENT	\N	2014-06-19 13:07:25	2014-06-19 13:07:25
1596	41	400	A COMMENT	\N	2014-07-03 01:20:06	2014-07-03 01:20:06
1597	26	404	A COMMENT	\N	2014-07-18 16:49:35	2014-07-18 16:49:35
1598	26	407	A COMMENT	\N	2014-07-19 08:49:11	2014-07-19 08:49:11
1599	26	409	A COMMENT	\N	2014-07-20 22:11:01	2014-07-20 22:11:01
1600	26	413	A COMMENT	\N	2014-07-16 16:14:19	2014-07-16 16:14:19
1601	26	414	A COMMENT	\N	2014-07-19 04:15:20	2014-07-19 04:15:20
1602	26	417	A COMMENT	\N	2014-07-21 01:42:23	2014-07-21 01:42:23
1603	26	421	A COMMENT	\N	2014-07-20 21:07:12	2014-07-20 21:07:12
1604	26	424	A COMMENT	\N	2014-07-20 16:21:53	2014-07-20 16:21:53
1605	26	426	A COMMENT	\N	2014-07-22 05:23:06	2014-07-22 05:23:06
1606	26	431	A COMMENT	\N	2014-07-17 04:16:37	2014-07-17 04:16:37
1607	26	433	A COMMENT	\N	2014-07-20 19:01:50	2014-07-20 19:01:50
1608	26	434	A COMMENT	\N	2014-07-24 10:04:24	2014-07-24 10:04:24
1609	26	436	A COMMENT	\N	2014-07-20 13:49:48	2014-07-20 13:49:48
1610	26	437	A COMMENT	\N	2014-07-22 00:52:00	2014-07-22 00:52:00
1611	26	438	A COMMENT	\N	2014-07-18 16:56:06	2014-07-18 16:56:06
1612	26	439	A COMMENT	\N	2014-07-20 12:26:37	2014-07-20 12:26:37
1613	44	441	A COMMENT	\N	2014-06-22 16:17:45	2014-06-22 16:17:45
1614	44	443	A COMMENT	\N	2014-07-17 09:29:31	2014-07-17 09:29:31
1615	44	447	A COMMENT	\N	2014-07-19 11:24:42	2014-07-19 11:24:42
1616	44	448	A COMMENT	\N	2014-07-21 12:29:25	2014-07-21 12:29:25
1617	44	452	A COMMENT	\N	2014-06-22 01:45:54	2014-06-22 01:45:54
1618	44	453	A COMMENT	\N	2014-06-23 03:14:08	2014-06-23 03:14:08
1619	48	70	A COMMENT	\N	2014-07-11 22:37:19	2014-07-11 22:37:19
1620	25	168	A COMMENT	\N	2014-07-21 23:35:31	2014-07-21 23:35:31
1621	6	448	A COMMENT	\N	2014-07-25 12:07:19	2014-07-25 12:07:19
1622	22	55	A COMMENT	\N	2014-07-23 13:23:16	2014-07-23 13:23:16
1623	16	342	A COMMENT	\N	2014-04-13 06:17:44	2014-04-13 06:17:44
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1623, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	5	fetched	2014-01-19 01:41:18.607887	2014-01-19 01:41:18.607887	2014-01-19 01:41:18.607887
7	6	joined	\N	\N	\N
8	6	fetched	2014-07-16 18:25:10.610673	2014-07-16 18:25:10.610673	2014-07-16 18:25:10.610673
9	7	joined	\N	\N	\N
10	8	joined	\N	\N	\N
11	8	fetched	2014-04-18 14:48:24.614914	2014-04-18 14:48:24.614914	2014-04-18 14:48:24.614914
12	9	joined	\N	\N	\N
13	10	joined	\N	\N	\N
14	10	fetched	2014-01-05 05:36:57.623388	2014-01-05 05:36:57.623388	2014-01-05 05:36:57.623388
15	11	joined	\N	\N	\N
16	11	fetched	2014-06-30 09:44:31.626074	2014-06-30 09:44:31.626074	2014-06-30 09:44:31.626074
17	12	joined	\N	\N	\N
18	13	joined	\N	\N	\N
19	13	fetched	2014-02-23 06:31:31.630416	2014-02-23 06:31:31.630416	2014-02-23 06:31:31.630416
20	14	joined	\N	\N	\N
21	14	fetched	2014-05-13 02:04:36.633136	2014-05-13 02:04:36.633136	2014-05-13 02:04:36.633136
22	15	joined	\N	\N	\N
23	15	fetched	2013-12-17 18:17:51.636503	2013-12-17 18:17:51.636503	2013-12-17 18:17:51.636503
24	16	joined	\N	\N	\N
25	16	fetched	2014-03-29 13:51:48.639933	2014-03-29 13:51:48.639933	2014-03-29 13:51:48.639933
26	17	joined	\N	\N	\N
27	17	fetched	2013-12-08 08:44:55.643127	2013-12-08 08:44:55.643127	2013-12-08 08:44:55.643127
28	18	joined	\N	\N	\N
29	18	fetched	2014-02-14 21:03:47.645828	2014-02-14 21:03:47.645828	2014-02-14 21:03:47.645828
30	19	joined	\N	\N	\N
31	19	fetched	2014-04-16 20:58:50.648329	2014-04-16 20:58:50.648329	2014-04-16 20:58:50.648329
32	20	joined	\N	\N	\N
33	20	fetched	2014-03-24 10:54:37.650835	2014-03-24 10:54:37.650835	2014-03-24 10:54:37.650835
34	21	joined	\N	\N	\N
35	21	fetched	2014-07-09 04:26:29.653351	2014-07-09 04:26:29.653351	2014-07-09 04:26:29.653351
36	22	joined	\N	\N	\N
37	22	fetched	2014-06-21 17:38:43.655831	2014-06-21 17:38:43.655831	2014-06-21 17:38:43.655831
38	23	joined	\N	\N	\N
39	23	fetched	2013-11-12 13:33:20.658296	2013-11-12 13:33:20.658296	2013-11-12 13:33:20.658296
40	24	joined	\N	\N	\N
41	24	fetched	2014-07-08 21:18:01.660791	2014-07-08 21:18:01.660791	2014-07-08 21:18:01.660791
42	25	joined	\N	\N	\N
43	25	fetched	2014-06-24 04:26:28.663208	2014-06-24 04:26:28.663208	2014-06-24 04:26:28.663208
44	26	joined	\N	\N	\N
45	26	fetched	2014-07-15 20:49:31.665627	2014-07-15 20:49:31.665627	2014-07-15 20:49:31.665627
46	27	joined	\N	\N	\N
47	27	fetched	2014-01-27 06:38:44.668106	2014-01-27 06:38:44.668106	2014-01-27 06:38:44.668106
48	28	joined	\N	\N	\N
49	28	fetched	2014-02-05 12:27:42.670548	2014-02-05 12:27:42.670548	2014-02-05 12:27:42.670548
50	29	joined	\N	\N	\N
51	29	fetched	2014-02-05 17:12:09.672973	2014-02-05 17:12:09.672973	2014-02-05 17:12:09.672973
52	30	joined	\N	\N	\N
53	30	fetched	2014-07-16 13:06:48.675528	2014-07-16 13:06:48.675528	2014-07-16 13:06:48.675528
54	31	joined	\N	\N	\N
55	31	fetched	2014-03-10 00:35:33.678784	2014-03-10 00:35:33.678784	2014-03-10 00:35:33.678784
56	32	joined	\N	\N	\N
57	32	fetched	2014-05-24 06:05:33.681222	2014-05-24 06:05:33.681222	2014-05-24 06:05:33.681222
58	33	joined	\N	\N	\N
59	33	fetched	2013-11-18 08:56:56.68361	2013-11-18 08:56:56.68361	2013-11-18 08:56:56.68361
60	34	joined	\N	\N	\N
61	34	fetched	2013-10-31 15:29:14.686043	2013-10-31 15:29:14.686043	2013-10-31 15:29:14.686043
62	35	joined	\N	\N	\N
63	35	fetched	2013-11-14 15:50:24.68856	2013-11-14 15:50:24.68856	2013-11-14 15:50:24.68856
64	36	joined	\N	\N	\N
65	36	fetched	2014-03-29 15:40:14.691048	2014-03-29 15:40:14.691048	2014-03-29 15:40:14.691048
66	37	joined	\N	\N	\N
67	37	fetched	2014-05-26 10:32:28.69361	2014-05-26 10:32:28.69361	2014-05-26 10:32:28.69361
68	38	joined	\N	\N	\N
69	39	joined	\N	\N	\N
70	39	fetched	2014-05-22 17:58:07.697696	2014-05-22 17:58:07.697696	2014-05-22 17:58:07.697696
71	40	joined	\N	\N	\N
72	40	fetched	2013-11-13 18:22:16.700144	2013-11-13 18:22:16.700144	2013-11-13 18:22:16.700144
73	41	joined	\N	\N	\N
74	41	fetched	2014-05-03 07:04:58.702579	2014-05-03 07:04:58.702579	2014-05-03 07:04:58.702579
75	42	joined	\N	\N	\N
76	42	fetched	2013-12-26 12:30:08.705119	2013-12-26 12:30:08.705119	2013-12-26 12:30:08.705119
77	43	joined	\N	\N	\N
78	43	fetched	2014-03-27 23:04:01.707563	2014-03-27 23:04:01.707563	2014-03-27 23:04:01.707563
79	44	joined	\N	\N	\N
80	44	fetched	2014-06-20 08:47:17.709991	2014-06-20 08:47:17.709991	2014-06-20 08:47:17.709991
81	45	joined	\N	\N	\N
82	45	fetched	2014-07-22 04:35:59.712395	2014-07-22 04:35:59.712395	2014-07-22 04:35:59.712395
83	46	joined	\N	\N	\N
84	47	joined	\N	\N	\N
85	47	fetched	2014-06-14 21:54:51.716903	2014-06-14 21:54:51.716903	2014-06-14 21:54:51.716903
86	48	joined	\N	\N	\N
87	48	fetched	2014-04-07 14:00:13.719457	2014-04-07 14:00:13.719457	2014-04-07 14:00:13.719457
88	8	submitted	2014-04-20 03:23:22	2014-04-20 03:23:22	2014-04-20 03:23:22
89	8	completed	2014-04-20 06:09:42	2014-04-20 06:09:42	2014-04-20 06:09:42
90	8	received_feedback	2014-06-15 08:43:15	2014-06-15 08:43:15	2014-06-15 08:43:15
91	39	commented	2014-06-15 08:43:15	2014-06-15 08:43:15	2014-06-15 08:43:15
92	47	commented	2014-06-16 04:54:37	2014-06-16 04:54:37	2014-06-16 04:54:37
93	1	commented	2014-06-29 14:28:36	2014-06-29 14:28:36	2014-06-29 14:28:36
94	14	commented	2014-07-05 02:26:28	2014-07-05 02:26:28	2014-07-05 02:26:28
95	10	submitted	2014-01-13 16:43:39	2014-01-13 16:43:39	2014-01-13 16:43:39
96	10	received_feedback	2014-04-29 10:45:59	2014-04-29 10:45:59	2014-04-29 10:45:59
97	45	commented	2014-04-29 10:45:59	2014-04-29 10:45:59	2014-04-29 10:45:59
98	11	commented	2014-06-02 01:21:17	2014-06-02 01:21:17	2014-06-02 01:21:17
99	43	commented	2014-06-23 20:06:22	2014-06-23 20:06:22	2014-06-23 20:06:22
100	2	commented	2014-07-07 23:50:22	2014-07-07 23:50:22	2014-07-07 23:50:22
101	27	commented	2014-07-09 00:03:43	2014-07-09 00:03:43	2014-07-09 00:03:43
102	32	commented	2014-07-13 07:22:43	2014-07-13 07:22:43	2014-07-13 07:22:43
103	21	commented	2014-04-23 17:35:01	2014-04-23 17:35:01	2014-04-23 17:35:01
104	30	commented	2014-05-29 19:42:35	2014-05-29 19:42:35	2014-05-29 19:42:35
105	8	commented	2014-06-25 19:22:23	2014-06-25 19:22:23	2014-06-25 19:22:23
106	3	commented	2014-07-21 12:14:56	2014-07-21 12:14:56	2014-07-21 12:14:56
107	4	commented	2014-07-22 13:34:28	2014-07-22 13:34:28	2014-07-22 13:34:28
108	10	completed	2014-06-21 10:40:15	2014-06-21 10:40:15	2014-06-21 10:40:15
109	37	commented	2014-04-19 17:42:38	2014-04-19 17:42:38	2014-04-19 17:42:38
110	28	commented	2014-04-18 22:37:28	2014-04-18 22:37:28	2014-04-18 22:37:28
111	11	submitted	2014-07-03 21:47:08	2014-07-03 21:47:08	2014-07-03 21:47:08
112	11	received_feedback	2014-07-04 18:28:24	2014-07-04 18:28:24	2014-07-04 18:28:24
113	1	onboarded	2014-07-08 00:17:57	2014-07-08 00:17:57	2014-07-08 00:17:57
114	14	onboarded	2014-07-26 16:37:23	2014-07-26 16:37:23	2014-07-26 16:37:23
115	14	submitted	2014-06-11 11:55:29	2014-06-11 11:55:29	2014-06-11 11:55:29
116	14	received_feedback	2014-06-13 14:39:49	2014-06-13 14:39:49	2014-06-13 14:39:49
117	28	onboarded	2014-07-18 16:34:34	2014-07-18 16:34:34	2014-07-18 16:34:34
118	39	onboarded	2014-06-23 13:07:35	2014-06-23 13:07:35	2014-06-23 13:07:35
119	21	onboarded	2014-07-15 02:54:42	2014-07-15 02:54:42	2014-07-15 02:54:42
120	43	onboarded	2014-07-04 18:28:24	2014-07-04 18:28:24	2014-07-04 18:28:24
121	37	onboarded	2014-07-08 17:04:26	2014-07-08 17:04:26	2014-07-08 17:04:26
122	47	onboarded	2014-07-07 22:51:49	2014-07-07 22:51:49	2014-07-07 22:51:49
123	30	onboarded	2014-07-17 06:08:56	2014-07-17 06:08:56	2014-07-17 06:08:56
124	14	completed	2014-06-13 20:00:49	2014-06-13 20:00:49	2014-06-13 20:00:49
125	10	commented	2014-06-28 12:37:33	2014-06-28 12:37:33	2014-06-28 12:37:33
126	21	submitted	2014-07-13 09:41:12	2014-07-13 09:41:12	2014-07-13 09:41:12
127	21	completed	2014-07-20 22:41:33	2014-07-20 22:41:33	2014-07-20 22:41:33
128	21	received_feedback	2014-07-21 02:18:47	2014-07-21 02:18:47	2014-07-21 02:18:47
129	32	onboarded	2014-07-21 02:18:47	2014-07-21 02:18:47	2014-07-21 02:18:47
130	27	onboarded	2014-07-21 10:33:04	2014-07-21 10:33:04	2014-07-21 10:33:04
131	8	onboarded	2014-07-25 16:50:10	2014-07-25 16:50:10	2014-07-25 16:50:10
132	2	onboarded	2014-07-18 05:21:53	2014-07-18 05:21:53	2014-07-18 05:21:53
133	45	onboarded	2014-07-19 09:47:37	2014-07-19 09:47:37	2014-07-19 09:47:37
134	4	onboarded	2014-07-23 11:34:23	2014-07-23 11:34:23	2014-07-23 11:34:23
135	11	onboarded	2014-07-22 18:48:52	2014-07-22 18:48:52	2014-07-22 18:48:52
136	27	submitted	2014-02-09 04:10:38	2014-02-09 04:10:38	2014-02-09 04:10:38
137	27	received_feedback	2014-02-22 04:32:07	2014-02-22 04:32:07	2014-02-22 04:32:07
138	27	completed	2014-03-06 12:39:30	2014-03-06 12:39:30	2014-03-06 12:39:30
139	28	submitted	2014-02-18 15:13:12	2014-02-18 15:13:12	2014-02-18 15:13:12
140	28	received_feedback	2014-03-01 15:28:58	2014-03-01 15:28:58	2014-03-01 15:28:58
141	28	completed	2014-04-02 04:35:56	2014-04-02 04:35:56	2014-04-02 04:35:56
142	3	onboarded	2014-07-18 09:35:11	2014-07-18 09:35:11	2014-07-18 09:35:11
143	30	submitted	2014-07-17 09:30:56	2014-07-17 09:30:56	2014-07-17 09:30:56
144	30	completed	2014-07-26 23:05:42.890727	2014-07-26 23:05:42.890727	2014-07-26 23:05:42.890727
145	30	received_feedback	2014-07-17 00:11:31	2014-07-17 00:11:31	2014-07-17 00:11:31
146	32	submitted	2014-06-22 19:17:50	2014-06-22 19:17:50	2014-06-22 19:17:50
147	32	received_feedback	2014-07-02 10:10:58	2014-07-02 10:10:58	2014-07-02 10:10:58
148	10	onboarded	2014-07-20 00:05:24	2014-07-20 00:05:24	2014-07-20 00:05:24
149	32	completed	2014-07-16 02:09:33	2014-07-16 02:09:33	2014-07-16 02:09:33
150	37	submitted	2014-05-27 05:28:33	2014-05-27 05:28:33	2014-05-27 05:28:33
151	37	received_feedback	2014-06-06 06:13:01	2014-06-06 06:13:01	2014-06-06 06:13:01
152	37	completed	2014-06-25 23:24:37	2014-06-25 23:24:37	2014-06-25 23:24:37
153	39	submitted	2014-05-24 15:46:28	2014-05-24 15:46:28	2014-05-24 15:46:28
154	39	received_feedback	2014-06-15 08:39:43	2014-06-15 08:39:43	2014-06-15 08:39:43
155	43	submitted	2014-05-24 00:08:11	2014-05-24 00:08:11	2014-05-24 00:08:11
156	43	completed	2014-05-24 13:38:50	2014-05-24 13:38:50	2014-05-24 13:38:50
157	43	received_feedback	2014-05-06 22:38:46	2014-05-06 22:38:46	2014-05-06 22:38:46
158	45	submitted	2014-07-22 17:45:56	2014-07-22 17:45:56	2014-07-22 17:45:56
159	45	received_feedback	2014-07-23 02:24:02	2014-07-23 02:24:02	2014-07-23 02:24:02
160	45	completed	2014-07-26 23:05:43.820219	2014-07-26 23:05:43.820219	2014-07-26 23:05:43.820219
161	47	submitted	2014-06-30 11:03:35	2014-06-30 11:03:35	2014-06-30 11:03:35
162	47	completed	2014-07-05 06:32:13	2014-07-05 06:32:13	2014-07-05 06:32:13
163	47	received_feedback	2014-07-18 02:10:10	2014-07-18 02:10:10	2014-07-18 02:10:10
164	48	submitted	2014-05-04 20:40:03	2014-05-04 20:40:03	2014-05-04 20:40:03
165	48	received_feedback	2014-06-15 21:06:38	2014-06-15 21:06:38	2014-06-15 21:06:38
166	25	submitted	2014-06-29 19:03:06	2014-06-29 19:03:06	2014-06-29 19:03:06
167	25	received_feedback	2014-07-04 23:06:06	2014-07-04 23:06:06	2014-07-04 23:06:06
168	6	submitted	2014-07-18 04:54:22	2014-07-18 04:54:22	2014-07-18 04:54:22
169	6	received_feedback	2014-07-23 16:01:49	2014-07-23 16:01:49	2014-07-23 16:01:49
170	22	submitted	2014-06-28 03:08:39	2014-06-28 03:08:39	2014-06-28 03:08:39
171	22	received_feedback	2014-07-04 12:14:20	2014-07-04 12:14:20	2014-07-04 12:14:20
172	16	submitted	2014-04-23 18:36:25	2014-04-23 18:36:25	2014-04-23 18:36:25
173	16	received_feedback	2014-06-14 14:00:10	2014-06-14 14:00:10	2014-06-14 14:00:10
174	19	submitted	2014-05-29 13:50:00	2014-05-29 13:50:00	2014-05-29 13:50:00
175	19	received_feedback	2014-05-30 17:23:22	2014-05-30 17:23:22	2014-05-30 17:23:22
176	19	completed	2014-06-09 20:04:44	2014-06-09 20:04:44	2014-06-09 20:04:44
177	20	submitted	2014-04-12 14:50:04	2014-04-12 14:50:04	2014-04-12 14:50:04
178	20	received_feedback	2014-05-12 00:23:52	2014-05-12 00:23:52	2014-05-12 00:23:52
179	20	completed	2014-07-13 19:44:52	2014-07-13 19:44:52	2014-07-13 19:44:52
180	35	submitted	2014-02-16 00:24:25	2014-02-16 00:24:25	2014-02-16 00:24:25
181	35	received_feedback	2014-03-21 21:37:27	2014-03-21 21:37:27	2014-03-21 21:37:27
182	35	completed	2014-02-26 10:29:14	2014-02-26 10:29:14	2014-02-26 10:29:14
183	29	submitted	2014-04-16 06:38:57	2014-04-16 06:38:57	2014-04-16 06:38:57
184	29	received_feedback	2014-04-18 15:37:42	2014-04-18 15:37:42	2014-04-18 15:37:42
185	29	completed	2014-04-27 20:14:03	2014-04-27 20:14:03	2014-04-27 20:14:03
186	34	submitted	2013-12-07 12:02:25	2013-12-07 12:02:25	2013-12-07 12:02:25
187	34	completed	2013-12-12 17:58:15	2013-12-12 17:58:15	2013-12-12 17:58:15
188	13	submitted	2014-03-03 07:09:05	2014-03-03 07:09:05	2014-03-03 07:09:05
189	13	received_feedback	2014-04-29 00:44:03	2014-04-29 00:44:03	2014-04-29 00:44:03
190	40	submitted	2013-11-26 09:24:46	2013-11-26 09:24:46	2013-11-26 09:24:46
191	40	received_feedback	2013-12-05 04:53:01	2013-12-05 04:53:01	2013-12-05 04:53:01
192	5	submitted	2014-06-01 04:33:19	2014-06-01 04:33:19	2014-06-01 04:33:19
193	5	received_feedback	2014-06-06 14:18:13	2014-06-06 14:18:13	2014-06-06 14:18:13
194	33	submitted	2014-05-23 01:23:14	2014-05-23 01:23:14	2014-05-23 01:23:14
195	33	received_feedback	2014-03-14 12:14:05	2014-03-14 12:14:05	2014-03-14 12:14:05
196	15	submitted	2014-03-18 19:05:27	2014-03-18 19:05:27	2014-03-18 19:05:27
197	15	received_feedback	2014-03-25 06:41:26	2014-03-25 06:41:26	2014-03-25 06:41:26
198	17	submitted	2014-04-11 05:53:41	2014-04-11 05:53:41	2014-04-11 05:53:41
199	23	submitted	2014-01-19 15:00:39	2014-01-19 15:00:39	2014-01-19 15:00:39
200	41	submitted	2014-05-17 07:27:36	2014-05-17 07:27:36	2014-05-17 07:27:36
201	26	submitted	2014-07-18 08:48:18	2014-07-18 08:48:18	2014-07-18 08:48:18
202	44	submitted	2014-06-22 16:13:45	2014-06-22 16:13:45	2014-06-22 16:13:45
203	48	commented	2014-07-11 22:37:19	2014-07-11 22:37:19	2014-07-11 22:37:19
204	25	commented	2014-07-21 23:35:31	2014-07-21 23:35:31	2014-07-21 23:35:31
205	44	received_feedback	2014-07-25 12:07:19	2014-07-25 12:07:19	2014-07-25 12:07:19
206	6	commented	2014-07-25 12:07:19	2014-07-25 12:07:19	2014-07-25 12:07:19
207	22	commented	2014-07-23 13:23:16	2014-07-23 13:23:16	2014-07-23 13:23:16
208	16	commented	2014-04-13 06:17:44	2014-04-13 06:17:44	2014-04-13 06:17:44
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 208, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 1, false);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
1	8	76d00862cafc04ec05112539	done	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  @@seconds_per_earth_year = 31557600.00\n  @@earth_year_ratios = Hash[\n    "earth",   1.00000000,\n    "mercury", 0.24084670,\n    "venus",   0.61519726,\n    "mars",    1.88081580,\n    "jupiter", 11.8626150,\n    "saturn",  29.447498,\n    "uranus",  84.016846,\n    "neptune", 164.79132\n    ]\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  def method_missing(method_name, *args)\n    years_on_planet($1) if method_name =~ /^on_(.+)/\n  end\n\n  def earth_years\n    @seconds / @@seconds_per_earth_year\n  end\n\n  def years_on_planet(planet_name)\n    (earth_years / @@earth_year_ratios[planet_name]).round(2)\n  end\n\nend	2014-04-20 06:09:42	\N	0	1	2014-04-20 03:23:22	2014-04-20 03:23:22	1	space-age.rb
2	8	1bda75f876f9e2ffb5f8a07f	done	haskell	beer-song	-- "8 bottles of beer on the wall, 8 bottles of beer.\\nTake one down and pass it around, 7 bottles of beer on the wall.\\n"\nmodule Beer (sing, verse) where\n\n-- meh...\nverse :: Int -> String\nverse x\n  | x == 2 = strInt ++" bottles of beer on the wall, " ++ strInt ++ " bottles of beer.\\n"++\n             "Take one down and pass it around, 1 bottle of beer on the wall.\\n"\n  | x == 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\n"++\n             "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n  | x == 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n" ++\n             "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  | otherwise = strInt ++ " bottles of beer on the wall, " ++ strInt ++ " bottles of beer.\\n"++\n                "Take one down and pass it around, " ++ strInt1++ " bottles of beer on the wall.\\n"\n  where strInt  = show x\n        strInt1 = show (x-1)\n\nsing :: Int -> Int -> String\nsing x y = foldl(\\a x -> a ++ (verse x) ++ "\\n" ) "" $ reverse([y..x])	2014-06-01 14:37:48	\N	0	1	2014-05-31 20:09:52	2014-05-31 20:09:52	2	Beer.hs
3	10	9044a3da4f27eca3b8b091aa	superseded	ruby	sum-of-multiples	class SumOfMultiples\n  attr_reader :numbers\n\n  def initialize(*numbers)\n    @numbers = numbers\n  end\n\n  def to(input)\n    range = (0...input)\n    sum = []\n    range.select do |num|\n      numbers.select do |multiple|\n        sum << num if num % multiple == 0\n      end\n    end\n\n    sum.uniq.inject(:+)\n  end\n\n  def self.to(input)\n    sum = []\n    range = (0...input)\n\n    range.each do |num|\n      if (num % 3 == 0)|| (num % 5 == 0)\n        sum << num\n      end\n    end\n\n    sum.uniq.inject(:+)\n  end\n\nend	\N	\N	0	2	2014-01-13 16:43:39	2014-01-13 16:43:39	3	sum.rb
4	10	4697826e67a9a59092a6b80c	superseded	ruby	sum-of-multiples	class SumOfMultiples\n  attr_reader :div\n\n  def initialize(first = 3, second = 5, third = nil)\n    @div = []\n    @div << first\n    @div << second\n    @div << third unless third == nil\n  end\n\n  def to(input)\n    sum = []\n    (0..input-1).each do |num|\n      if div.count == 2\n        if (num % div.first == 0)|| (num % div[1] == 0)\n          sum << num\n        end\n      elsif div.count == 3 \n        if (num % div.first == 0)|| (num % div[1] == 0) || (num % div[2] == 0)\n          sum << num\n        end\n      end\n    end\n\n    sum.inject(:+)\n  end\n\n  def self.to(input)\n    #take the input and count upto it\n    sum = []\n    (0...input).each do |num|\n      if (num % 3 == 0)|| (num % 5 == 0)\n        sum << num\n      end\n    end\n\n    sum.inject(:+)\n  end\n\nend	\N	\N	0	1	2014-02-21 02:55:17	2014-02-21 02:55:17	3	sum.rb
5	10	0d4953334ba98d9717362623	superseded	ruby	sum-of-multiples	class SumOfMultiples\n  attr_reader :numbers\n\n  def initialize(*numbers)\n    @numbers = numbers\n  end\n\n  def to(input)\n    range = (0...input)\n\n    range.select do |number|\n      number if numbers.any? { |multiple| number % multiple == 0 }\n    end.inject(:+)\n\n  end\n\n  def self.to(input, factors=[3,5])\n    range = (0...input)\n\n    range.select do |number|\n      number if factors.any? { |multiple| number % multiple == 0 }\n    end.inject(:+)\n\n  end\n\nend	\N	\N	0	3	2014-03-19 14:41:02	2014-03-19 14:41:02	3	sum.rb
6	10	be3d92351444248905c1bc96	superseded	ruby	sum-of-multiples	class SumOfMultiples\n  attr_reader :numbers\n\n  def initialize(*numbers)\n    @numbers = numbers\n  end\n\n  def to(input)\n    self.class.to(input, numbers)\n  end\n\n  def self.to(input, factors=[3,5])\n    range = (0...input)\n\n    range.select do |number|\n      number if factors.any? { |multiple| number % multiple == 0 }\n    end.inject(:+)\n\n  end\n\nend	\N	\N	0	4	2014-04-03 00:26:35	2014-04-03 00:26:35	3	sum.rb
7	10	f552457adcf9cc2e37787bac	superseded	ruby	sum-of-multiples	class SumOfMultiples\n  attr_reader :factors\n\n  def initialize(*factors)\n    @factors = factors \n  end\n\n  def to(input)\n    range = (0...input)\n\n    range.select do |number|\n      number if factors.any? { |multiple| number % multiple == 0 }\n    end.inject(:+)\n\n  end\n\n  def self.to(input, factors=[3,5])\n    new(*factors).to(input)\n  end\n\nend	\N	\N	0	5	2014-04-06 18:42:31	2014-04-06 18:42:31	3	sum.rb
8	10	ebfe7a9fe92460e66a138fc5	pending	ruby	sum-of-multiples	class SumOfMultiples\n  def self.to(number, factors=[3,5])\n    new(*factors).to(number)\n  end\n\n  def initialize(*factors)\n    @factors = factors\n  end\n\n  def to(number)\n    (0...number).select do |number|\n      factor?(number)\n    end.inject(:+)\n  end\n\n  private\n\n  attr_reader :factors\n\n  def factor?(number)\n    factors.any? do |multiple|\n      number % multiple == 0\n    end\n  end\nend	\N	\N	0	6	2014-04-17 07:57:06	2014-04-17 07:57:06	3	sum.rb
9	10	1ac93d4d4bc00826773f238a	done	ruby	hamming	class Hamming\n  class << self\n    def compute(a,b)\n      limit = [a.size,b.size].min\n\n      (0...limit).inject(0) do |sum, i|\n        a[i] == b[i] ? sum : sum += 1\n      end\n    end\n  end\nend	2014-06-21 10:40:15	\N	0	1	2014-06-20 17:24:05	2014-06-20 17:24:05	4	hamming.rb
10	10	a4428ac8690d3a910a4cd267	superseded	ruby	rna-transcription	module Complement\n  extend self\n\n  RNA_TO_DNA = { "G" => "C", "C" => "G", "T" => "A", "A" => "U" }\n  DNA_TO_RNA = { "G" => "C", "C" => "G", "U" => "A", "A" => "T" }\n\n  def of_dna(dna)\n    dna.each_char.map { |n| RNA_TO_DNA[n] }.join\n  end\n\n  def of_rna(rna)\n    rna.each_char.map { |n| DNA_TO_RNA[n] }.join\n  end\n\nend	\N	\N	0	1	2014-01-25 15:50:08	2014-01-25 15:50:08	5	complement.rb
11	10	80b9b484dd4c30cac3b15d2a	superseded	ruby	rna-transcription	module Complement\n  extend self\n\n  DNA_TO_RNA = { "G" => "C", "C" => "G", "T" => "A", "A" => "U" }\n\n  def of_dna(dna)\n    complement dna, DNA_TO_RNA\n  end\n\n  def of_rna(rna)\n    complement rna, DNA_TO_RNA.invert\n  end\n\nprivate\n\n  def complement(sequence, map)\n    sequence.each_char.map { |n| map[n] }.join\n  end\nend	\N	\N	0	2	2014-02-01 03:16:19	2014-02-01 03:16:19	5	complement.rb
12	10	cafdaf470f536f50b46ae72e	pending	ruby	rna-transcription	module Complement\n  extend self\n\n  DNA = "GCTA"\n  RNA = "CGAU"\n\n  def of_dna(dna)\n    dna.tr DNA, RNA\n  end\n\n  def of_rna(rna)\n    rna.tr RNA, DNA\n  end\nend	\N	\N	0	3	2014-03-17 12:10:16	2014-03-17 12:10:16	5	complement.rb
110	48	7e1d798188e8f05d03419e72	pending	ruby	rna-transcription	class Complement\n\n  def self.of_dna(a)\n    a.tr "GCTA", "CGAU"\n  end\n\n  def self.of_rna(a)\n    a.tr "CGAU", "GCTA"\n  end\n\nend	\N	\N	0	2	2014-06-29 21:54:17	2014-06-29 21:54:17	52	complement.rb
111	48	8ceab6871f29321c60eb6ce9	superseded	ruby	bob	class Bob\n\n  def hey(phrase)\n\n    # if the phrase is empty\n    if phrase.gsub(/\\s+/, " ").strip.empty?\n      "Fine. Be that way!"\n    # if the phrase is 'yelling'\n    elsif phrase.upcase === phrase\n      "Woah, chill out!"\n    # if the phrase is a question\n    elsif phrase[-1] === "?"\n      "Sure."\n    # otherwise whatever if phrase exists\n    else\n      "Whatever." if phrase\n    end\n\n  end\n\nend	\N	\N	0	1	2014-04-18 23:59:23	2014-04-18 23:59:23	53	bob.rb
13	10	ac7469a9ab2fa171967b1661	done	python	word-count	import re\n\nclass Phrase(object):\n\tdef __init__(self, string):\n\t\tself.normalized = string.lower()\n\n\n\tdef word_count(self):\n\t\tcounts = {}\n\t\tno_punctuation = re.findall(r'\\w+', self.normalized)\t\n\t\tfor word in no_punctuation:\n\t\t\tif counts.get(word) is not None:\n\t\t\t\tcounts[word] +=1\n\t\t\telse:\n\t\t\t\tcounts[word] = 1\t\t\n\t\treturn counts\n\n\t\t	2014-03-22 14:36:20	\N	0	1	2014-03-18 02:26:07	2014-03-18 02:26:07	6	word-count.py
14	10	095db6614f52b4ea2db0dcc8	done	javascript	nucleotide-count	// not sure if it's against the spirit of the exercise,\n// but I finally figured out how to get it...\n\n// Generated by CoffeeScript 1.6.3\n(function() {\n  var DNA;\n\n  DNA = (function() {\n    function DNA(sequence) {\n      this.sequence = sequence;\n    }\n\n    DNA.prototype.occurrencesOf = function(nucleotide) {\n      return this.sequence.split(nucleotide).length - 1;\n    };\n\n    DNA.prototype.count = function(nucleotide) {\n      var NUCLEOTIDES;\n      NUCLEOTIDES = "ACGTU";\n      if (NUCLEOTIDES.indexOf(nucleotide) === -1) {\n        throw new Error("Invalid Nucleotide");\n      } else {\n        return this.occurrencesOf(nucleotide);\n      }\n    };\n\n    DNA.prototype.nucleotideCounts = function() {\n      return {\n        A: this.count('A'),\n        T: this.count('T'),\n        C: this.count('C'),\n        G: this.count('G')\n      };\n    };\n\n    return DNA;\n\n  })();\n\n  global.DNA = DNA;\n\n}).call(this);	2014-03-23 01:49:26	\N	0	1	2014-03-22 12:25:07	2014-03-22 12:25:07	7	nucleotide-count.js
15	11	1178893626a6f994e5ceeb50	pending	ruby	bob	class Bob\n\n  # @param drivel [String] The drivel Bob is responding to\n  # @return response [String] Bob's response to the drivel\n  def hey(drivel)\n    @drivel = drivel\n    case\n    when silent_drivel? then annoyed_response\n    when yelled_drivel? then alarmed_response\n    when asked_drivel?  then resigned_response\n    else                indifferent_response\n    end\n  end\n\n  private\n\n  def drivel\n    @drivel\n  end\n\n  def silent_drivel?\n    drivel.to_s.strip == ''\n  end\n\n  def annoyed_response\n    "Fine. Be that way!"\n  end\n\n  def yelled_drivel?\n    drivel.upcase == drivel\n  end\n\n  def alarmed_response\n    "Woah, chill out!"\n  end\n\n  def asked_drivel?\n    drivel.end_with?('?')\n  end\n\n  def resigned_response\n    "Sure."\n  end\n\n  def indifferent_response\n    "Whatever."\n  end\n\nend	\N	\N	0	7	2014-07-03 21:47:08	2014-07-03 21:47:08	8	bob.rb
16	11	d537f4922470073070b636df	superseded	ruby	bob	class Bob\n  RESPONSES = {\n    :dismissal    => "Fine. Be that way.",\n    :serenity     => "Woah, chill out!",\n    :acceptance   => "Sure.",\n    :indifference => "Whatever.",\n  }\n\n  # @param msg [String] The message Bob is responding to\n  # @return response [String] Bob's response to the message\n  def hey(msg)\n    message_type = MessageType.new(msg).message_type\n    response_type = ResponseType.new(message_type).response_type\n    RESPONSES.fetch(response_type)\n  end\n\n  # Determines the response_type for a given message\n  # @param msg [String]\n  ResponseType = Struct.new(:message_type) do\n    TYPES = {\n      silent:    :dismissal,\n      shout:     :serenity,\n      question:  :acceptance,\n      statement: :indifference,\n      demand:    :indifference,\n    }\n\n    # @return response_type [Symbol]\n    def response_type\n      TYPES.fetch(message_type)\n    end\n\n  end\n\n  # Determines the message_type for a given message\n  # @param msg [String]\n  MessageType = Struct.new(:msg) do\n\n    # @return message_type [Symbol]\n    def message_type\n      case\n      when silence?   then :silent\n      when shouting?  then :shout\n      when asking?    then :question\n      when stating?   then :statement\n      when demanding? then :demand\n      else\n        STDERR.puts "Could not determine response for #{msg}"\n      end\n    end\n\n    private\n\n    def shouting?\n      msg.upcase == msg\n    end\n\n    def stating?\n      msg.end_with?('.')\n    end\n\n    def asking?\n      msg.end_with?('?')\n    end\n\n    def demanding?\n      msg.end_with?('!')\n    end\n\n    def silence?\n      msg.nil? || msg == ''\n    end\n\n  end\n\nend	\N	\N	0	4	2014-07-04 20:37:27	2014-07-04 20:37:27	8	bob.rb
17	11	e7531cb3a320aad5d89e4319	superseded	ruby	bob	class Bob\n\n  def initialize\n    @responses = {\n    :silent    => "Fine. Be that way!",\n    :shout     => "Woah, chill out!",\n    :question  => "Sure.",\n    :statement => "Whatever.",\n    :demand    => "Whatever.",\n    }\n  end\n\n  # @param msg [String] The message Bob is responding to\n  # @return response [String] Bob's response to the message\n  def hey(msg)\n    @responses.fetch(message_type(msg))\n  end\n\n  private\n\n  def message_type(msg)\n    MessageType.new(msg).message_type\n  end\n\n  # Determines the message_type for a given message\n  # @param msg [String]\n  MessageType = Struct.new(:msg) do\n\n    # @return message_type [Symbol]\n    def message_type\n      case\n      when silence?   then :silent\n      when shouting?  then :shout\n      when asking?    then :question\n      when stating?   then :statement\n      when demanding? then :demand\n      else\n        STDERR.puts "Could not determine message type for #{msg}"\n      end\n    end\n\n    private\n\n    def shouting?\n      msg.upcase == msg\n    end\n\n    def stating?\n      msg.end_with?('.')\n    end\n\n    def asking?\n      msg.end_with?('?')\n    end\n\n    def demanding?\n      msg.end_with?('!')\n    end\n\n    def silence?\n      msg.nil? || msg.strip == ''\n    end\n\n  end\n\nend	\N	\N	0	5	2014-07-06 18:22:54	2014-07-06 18:22:54	8	bob.rb
18	11	d58763d0eada973acda510e9	superseded	ruby	bob	class Bob\n\n  # @param msg [String] The message Bob is responding to\n  # @return response [String] Bob's response to the message\n  def hey(msg)\n    Response.new(msg).response\n  end\n\n  Response = Struct.new(:msg) do\n    RESPONSES = {\n      :dismissal   => "Fine. Be that way.",\n      :calming     => "Woah, chill out!",\n      :request     => "Sure.",\n      :indifferent => "Whatever.",\n    }\n\n    def response\n      RESPONSES.fetch(response_type) { no_response_found_error }\n    end\n\n    def no_response_found_error\n      raise "Could not determine response for #{msg}"\n    end\n\n    def response_type\n      if silence?\n        :dismissal\n      elsif shouting?\n        :calming\n      elsif asking?\n        :request\n      elsif stating? or demanding?\n        :indifferent\n      end\n    end\n\n    def shouting?\n      msg.upcase == msg\n    end\n\n    def stating?\n      msg[-1] == '.'\n    end\n\n    def asking?\n      msg[-1] == '?'\n    end\n\n    def demanding?\n      "Whatever."\n    end\n\n    def silence?\n      msg.nil? || msg == ''\n    end\n\n  end\n\nend	\N	\N	0	2	2014-07-08 18:13:54	2014-07-08 18:13:54	8	bob.rb
19	11	374f1e608a6cce327ec35d68	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    Response.new(msg).response\n  end\n\n  Response = Struct.new(:msg) do\n    RESPONSES = {\n      :dismissal     => "Fine. Be that way.",\n      :calming    => "Woah, chill out!",\n      :request      => "Sure.",\n      :indifferent => "Whatever.",\n    }\n\n    def response\n      RESPONSES.fetch(response_type) { no_response_found_error }\n    end\n\n    def no_response_found_error\n      raise "Could not determine response for #{msg}"\n    end\n\n    def response_type\n      if silence?\n        :dismissal\n      elsif shouting?\n        :calming\n      elsif asking?\n        :request\n      elsif stating? or demanding?\n        :indifferent\n      end\n    end\n\n    def shouting?\n      msg.upcase == msg\n    end\n\n    def stating?\n      msg[-1] == '.'\n    end\n\n    def asking?\n      msg[-1] == '?'\n    end\n\n    def demanding?\n      "Whatever."\n    end\n\n    def silence?\n      msg.nil? || msg == ''\n    end\n\n  end\n\nend	\N	\N	0	1	2014-07-10 16:01:20	2014-07-10 16:01:20	8	bob.rb
20	11	6eb2d44d81f156682ba3e8b7	superseded	ruby	bob	class Bob\n\n  # @param msg [String] The message Bob is responding to\n  # @return response [String] Bob's response to the message\n  def hey(msg)\n    Response.new(msg).response\n  end\n\n  Response = Struct.new(:msg) do\n    RESPONSES = {\n      :dismissal   => "Fine. Be that way.",\n      :calming     => "Woah, chill out!",\n      :request     => "Sure.",\n      :indifferent => "Whatever.",\n    }\n\n    def response\n      RESPONSES.fetch(response_type) { no_response_found_error }\n    end\n\n    def no_response_found_error\n      raise "Could not determine response for #{msg}"\n    end\n\n    def response_type\n      if silence?\n        :dismissal\n      elsif shouting?\n        :calming\n      elsif asking?\n        :request\n      elsif stating? or demanding?\n        :indifferent\n      end\n    end\n\n    def shouting?\n      msg.upcase == msg\n    end\n\n    def stating?\n      msg[-1] == '.'\n    end\n\n    def asking?\n      msg[-1] == '?'\n    end\n\n    def demanding?\n      msg[-1] == '!'\n    end\n\n    def silence?\n      msg.nil? || msg == ''\n    end\n\n  end\n\nend	\N	\N	0	3	2014-07-11 17:29:42	2014-07-11 17:29:42	8	bob.rb
21	11	248d6aca4bdcf31f4b2f8db3	superseded	ruby	bob	class Bob\n\n  # @param msg [String] The message Bob is responding to\n  # @return response [String] Bob's response to the message\n  def hey(msg)\n    case message_type(msg)\n    when :silent   then "Fine. Be that way!"\n    when :shout    then "Woah, chill out!"\n    when :question then "Sure."\n    else                "Whatever."\n    end\n  end\n\n  private\n\n  def message_type(msg)\n    MessageType.new(msg).message_type\n  end\n\n  # Determines the message_type for a given message\n  # @param msg [String]\n  MessageType = Struct.new(:msg) do\n\n    # @return message_type [Symbol]\n    def message_type\n      case\n      when silence?   then :silent\n      when shouting?  then :shout\n      when asking?    then :question\n      when stating?   then :statement\n      when demanding? then :demand\n      else\n        STDERR.puts "Could not determine message type for #{msg}"\n      end\n    end\n\n    private\n\n    def shouting?\n      msg.upcase == msg\n    end\n\n    def stating?\n      msg.end_with?('.')\n    end\n\n    def asking?\n      msg.end_with?('?')\n    end\n\n    def demanding?\n      msg.end_with?('!')\n    end\n\n    def silence?\n      msg.nil? || msg.strip == ''\n    end\n\n  end\n\nend	\N	\N	0	6	2014-07-12 12:21:53	2014-07-12 12:21:53	8	bob.rb
22	14	aeadf0a5a7235eab8f0b49d1	done	ruby	leap	class Year\n  def self.leap?(year)\n    year % 400 == 0 or ( year % 100 != 0 and year % 4 == 0 )\n  end\nend	2014-06-13 20:00:49	\N	0	1	2014-06-11 11:55:29	2014-06-11 11:55:29	9	year.rb
23	14	879c1818cc9e667d9ef247ba	done	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n\n  iex> Words.count("foo bar")\n  HashDict.new [{"foo", 1}, {"bar", 1}]\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    String.downcase(sentence)\n    |> String.split\n    |> Enum.reduce(HashDict.new, add_or_increment_entry(&1, &2))\n  end\n\nend	2014-07-08 22:17:06	\N	0	1	2014-07-07 00:03:12	2014-07-07 00:03:12	10	word_count.exs
24	14	9ca916debfca4bc0296441a6	done	clojure	bob	(ns bob)\n\n(defn silence [prompt]\n  (clojure.string/blank? prompt))\n\n(defn yelling [prompt]\n  (and (= (clojure.string/upper-case prompt) prompt)\n       (not (= (clojure.string/lower-case prompt) prompt))))\n\n(defn question [prompt]\n  (= (last prompt) \\?))\n\n(defn response-for [prompt]\n  (cond (silence prompt) "Fine. Be that way!"\n        (yelling prompt) "Woah, chill out!"\n        (question prompt) "Sure."\n        true "Whatever."))	2014-06-26 17:20:21	\N	0	1	2014-06-15 21:09:28	2014-06-15 21:09:28	11	bob.clj
25	14	fcc1779cd2242cc9989d0bef	done	ruby	house	class House\n  def verse(n)\n    output = "This is"\n    (n - 2).downto(0) do |i|\n      noun, verb = COMPONENTS[i]\n      output << " the #{noun} that #{verb}"\n    end\n    output + " the house that Jack built.\\n"\n  end\n\n  def verses(first, last)\n    first.upto(last).map { |i| verse(i) }.join("\\n") + "\\n"\n  end\n\n  COMPONENTS = [\n    ["malt", "lay in"],\n    ["rat", "ate"],\n    ["cat", "killed"],\n    ["dog", "worried"],\n    ["cow with the crumpled horn", "tossed"],\n    ["maiden all forlorn", "milked"],\n    ["man all tattered and torn", "kissed"],\n    ["priest all shaven and shorn", "married"],\n    ["rooster that crowed in the morn", "woke"],\n    ["farmer sowing his corn", "kept"],\n    ["horse and the hound and the horn", "belonged to"]\n  ]\nend	2014-07-11 01:05:30	\N	0	1	2014-07-01 01:41:08	2014-07-01 01:41:08	12	house.rb
26	14	05bf7c12be9e6896964d7640	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nimport Data.List (foldl')\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = foldl' (\\acc (x, y) -> if x then acc ++ y else acc) []\r\n            [(nDivisibleBy 3, "Pling")\r\n            ,(nDivisibleBy 5, "Plang")\r\n            ,(nDivisibleBy 7, "Plong")\r\n            ]\r\n    nDivisibleBy k = n `mod` k == 0	\N	\N	0	6	2014-05-13 17:29:45	2014-05-13 17:29:45	13	Raindrops.hs
27	14	e1b89dd895e1cefa2c27eb79	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = concat\r\n            [nDivisibleBy 3 "Pling"\r\n            ,nDivisibleBy 5 "Plang"\r\n            ,nDivisibleBy 7 "Plong"\r\n            ]\r\n    nDivisibleBy k result\r\n        | n `mod` k == 0 = result\r\n        | otherwise      = ""	\N	\N	0	7	2014-05-24 00:42:35	2014-05-24 00:42:35	13	Raindrops.hs
28	14	ac586912f571f1e651c0213b	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nimport Data.List (foldl')\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = concat [ x | (p, x) <- [(nDivisibleBy 3, "Pling")\r\n                                   ,(nDivisibleBy 5, "Plang")\r\n                                   ,(nDivisibleBy 7, "Plong")]\r\n                                   , p\r\n                                   ]\r\n    nDivisibleBy k = n `mod` k == 0	\N	\N	0	8	2014-05-27 22:39:30	2014-05-27 22:39:30	13	Raindrops.hs
29	14	fe323523d9ed152250706a67	pending	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = concat [ x | (True, x) <- [(nDivisibleBy 3, "Pling")\r\n                                      ,(nDivisibleBy 5, "Plang")\r\n                                      ,(nDivisibleBy 7, "Plong")]\r\n                                      ]\r\n    nDivisibleBy k = n `mod` k == 0	\N	\N	0	9	2014-05-27 23:21:23	2014-05-27 23:21:23	13	Raindrops.hs
30	14	e5c9d1d6ed3e8564234ddc85	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    if notValidPrimes then show n else\r\n        (if hasPrime 3 then "Pling" else "")\r\n        ++\r\n        (if hasPrime 5 then "Plang" else "")\r\n        ++\r\n        (if hasPrime 7 then "Plong" else "")\r\n  where\r\n    primes         = factors n 2 []\r\n    hasPrime       = (`elem` primes)\r\n    notValidPrimes = not $ any hasPrime [3, 5, 7]\r\n\r\nfactors :: Integer -> Integer -> [Integer] -> [Integer]\r\nfactors 1 _ acc = acc\r\nfactors n k acc = if n `mod` k == 0\r\n                    then factors (n `div` k) k    (k:acc)\r\n                    else factors  n         (k+1)    acc	\N	\N	0	1	2014-05-30 00:04:58	2014-05-30 00:04:58	13	Raindrops.hs
31	14	c617522547316fd320596b64	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    if notValidFactor then show n else\r\n        (if n `divisibleBy` 3 then "Pling" else "")\r\n        ++\r\n        (if n `divisibleBy` 5 then "Plang" else "")\r\n        ++\r\n        (if n `divisibleBy` 7 then "Plong" else "")\r\n  where\r\n    notValidFactor    = not $ any (divisibleBy n) [3, 5, 7]\r\n    j `divisibleBy` k = j `mod` k == 0	\N	\N	0	3	2014-06-10 17:20:47	2014-06-10 17:20:47	13	Raindrops.hs
32	14	370a5e5a309529bb7ec89dfe	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    if notValidPrimes then show n else\r\n        (if 3 `elem` primes then "Pling" else "")\r\n        ++\r\n        (if 5 `elem` primes then "Plang" else "")\r\n        ++\r\n        (if 7 `elem` primes then "Plong" else "")\r\n  where\r\n    primes         = factors n 2 []\r\n    notValidPrimes = not $ any (`elem` primes) [3, 5, 7]\r\n\r\nfactors :: Integer -> Integer -> [Integer] -> [Integer]\r\nfactors 1 _ acc = acc\r\nfactors n k acc = if n `mod` k == 0\r\n                    then factors (n `div` k) k    (k:acc)\r\n                    else factors  n         (k+1)    acc	\N	\N	0	2	2014-06-15 09:29:42	2014-06-15 09:29:42	13	Raindrops.hs
33	14	e3a1424ebca8d02f41d11b07	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    (\\x -> if null x then show n else x) $\r\n        (\\x -> if divisibleBy 3 then "Pling" ++ x else x) $\r\n            (\\x -> if divisibleBy 5 then "Plang" ++ x else x) $\r\n                (\\x -> if divisibleBy 7 then "Plong" ++ x else x)\r\n                    []\r\n  where\r\n    divisibleBy k = n `mod` k == 0	\N	\N	0	4	2014-07-06 16:57:38	2014-07-06 16:57:38	13	Raindrops.hs
34	14	6277845ef4ea8b15059f89f1	superseded	haskell	raindrops	module Raindrops (convert) where\r\nimport Data.List (foldl')\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = foldl' (\\acc (x, y) -> if x then acc ++ y else acc) []\r\n            [(divisibleBy 3, "Pling")\r\n            ,(divisibleBy 5, "Plang")\r\n            ,(divisibleBy 7, "Plong")]\r\n\r\n    divisibleBy k = n `mod` k == 0	\N	\N	0	5	2014-07-13 18:19:57	2014-07-13 18:19:57	13	Raindrops.hs
35	14	75edb2d88764cccfcb3356df	done	ruby	food-chain	class FoodChainSong\r\n\r\n\tANIMALS = [\t\r\n\t\t\t\t\t\t\t["fly", ""],\r\n\t\t\t\t\t\t\t["spider", "It wriggled and jiggled and tickled inside her."],\r\n\t\t\t\t\t\t\t["bird", "How absurd to swallow a bird!"],\r\n\t\t\t\t\t\t\t["cat", "Imagine that, to swallow a cat!"],\r\n\t\t\t\t\t\t\t["dog", "What a hog, to swallow a dog!"],\r\n\t\t\t\t\t\t\t["goat", "Just opened her throat and swallowed a goat!"],\r\n\t\t\t\t\t\t\t["cow", "I don't know how she swallowed a cow!"],\t\r\n\t\t\t\t\t\t\t["horse", ""]\r\n\t\t\t\t\t\t]\r\n\t\r\n\tdef verse(number)\r\n\t\tsong = "I know an old lady who swallowed a " \r\n\t\tif number < 8\r\n\t\t\tfor n in number.downto(2) do \r\n\t\t\t\t song += ANIMALS[n - 1][0] + "#{ n == 2 && number != 2 ? ANIMALS[n - 1][1].gsub(/It/, ' that') : "." + "#{ ("\\n" + ANIMALS[n - 1][1]) unless n > 2 && n != number }" }" + "\\n" + "She swallowed the " + ANIMALS[n - 1][0] + " to catch the "  \r\n\t\t\tend\t\r\n\t\t\tsong += ANIMALS[0][0]\r\n\t\t\tsong += ".\\n" + "I don't know why she swallowed the fly. Perhaps she'll die.\\n"\r\n\t\telsif number == 8\r\n\t\t\tsong += ANIMALS[7][0] +".\\n" + "She's dead, of course!\\n"\r\n\t\tend\r\n\t\tsong\r\n\tend\r\n\t\r\n\tdef verses(from, to)\r\n\t\tsong = ''\r\n\t\t(from..to).each do |n|\r\n\t\t\tsong += verse(n) + "\\n"\r\n\t\tend\r\n\t\tsong\r\n\tend\r\n\t\r\n\tdef sing\r\n\t\tself.verses(1,8)\r\n\tend\r\n\r\nend	2014-06-12 02:13:15	\N	0	1	2014-06-11 05:25:10	2014-06-11 05:25:10	14	food_chain.rb
36	14	53c0bf02925b233d4d0e36a1	superseded	ruby	scrabble-score	class ScrabbleLetter\n  def self.score letter\n    case letter.upcase\n      when 'A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T' then 1\n      when 'D', 'G' then 2\n      when 'B', 'C', 'M', 'P' then 3\n      when 'F', 'H', 'V', 'W', 'Y' then 4\n      when 'K' then 5\n      when 'J', 'X' then 8\n      when 'Q', 'Z' then 10\n      else 0\n    end\n  end\nend\n\nclass Scrabble\n\n  def initialize letters\n    @letters = letters || ''\n  end\n\n  def self.score letters\n    Scrabble.new(letters).score\n  end\n\n  def score\n    @letters.chars.map { |letter| score_letter letter }.inject(:+) || 0\n  end\n\n  private\n\n  def score_letter letter\n    ScrabbleLetter.score letter\n  end\nend	\N	\N	0	1	2014-06-14 00:20:11	2014-06-14 00:20:11	15	scrabble-score.rb
37	14	4984b8200cf637b7616edbf8	done	ruby	scrabble-score	class ScrabbleLetter\n  def self.score letter\n    case letter.upcase\n      when 'A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T' then 1\n      when 'D', 'G' then 2\n      when 'B', 'C', 'M', 'P' then 3\n      when 'F', 'H', 'V', 'W', 'Y' then 4\n      when 'K' then 5\n      when 'J', 'X' then 8\n      when 'Q', 'Z' then 10\n      else 0\n    end\n  end\nend\n\nclass Scrabble\n\n  def initialize letters\n    @letters = letters || ''\n  end\n\n  def self.score letters\n    Scrabble.new(letters).score\n  end\n\n  def score\n    @letters.chars.reduce(0) { |sum, letter| sum + score_letter(letter) }\n  end\n\n  private\n\n  def score_letter letter\n    ScrabbleLetter.score letter\n  end\nend	2014-06-19 18:26:57	\N	0	2	2014-06-17 06:23:56	2014-06-17 06:23:56	15	scrabble-score.rb
38	21	fd0b3c8ad7789beb8ef7c4ac	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tif year % 400 == 0 {\n\t\treturn true\n\t} else if year % 100 == 0 {\n\t\treturn false\n\t} else if year % 4 == 0 {\n\t\treturn true\n\t}\n\treturn false\n}	2014-07-20 22:41:33	\N	0	1	2014-07-13 09:41:12	2014-07-13 09:41:12	16	leap.go
39	21	ade4f38afba54d0c204cccc2	done	javascript	word-count	function words (string) {\n    counter = {}\n    words = string\n        .toLowerCase() // normalize case\n        .replace(/[^a-zA-Z0-9 ]/g, "") // remove punctuation\n        .split(' ');\n    words.forEach(function(word) {\n        if(word != '') {\n            if(counter[word] === undefined)\n                counter[word] = 0;\n            counter[word]++;\n        }\n    })\n    return counter\n}\nmodule.exports = words	2014-07-26 23:05:42.541897	\N	0	1	2014-07-17 12:47:58	2014-07-17 12:47:58	17	word-count.js
40	21	781e98737bbd6a90e4540d28	superseded	ruby	triangle	class TriangleError < Exception\nend\n\nclass Triangle\n  \n  def initialize(*sides)\n    @sides = sides\n  end\n\n  def kind\n    validate\n    return :equilateral if equilateral?\n    return :isosceles if isosceles?\n    return :scalene if scalene?\n  end\n  \n  def validate\n    raise TriangleError if negative_or_zero_sides? || triangle_inequality?\n  end\n\n  def equilateral?\n    @sides.combination(2).all? {|side1, side2| side1 == side2}\n  end\n\n  def isosceles?\n    @sides.combination(2).any? {|side1, side2| side1 == side2}\n  end\n\n  def scalene?\n    @sides.combination(2).none? {|side1, side2| side1 == side2}\n  end\n\n  def negative_or_zero_sides?\n    @sides.any? {|side| side <= 0}\n  end\n\n  def triangle_inequality?\n    @sides.permutation.any? {|a, b, c| a + b <= c}\n  end\n\nend	\N	\N	0	1	2014-07-10 23:39:45	2014-07-10 23:39:45	18	triangle.rb
41	21	f7558d011b5473901ad597bc	pending	ruby	triangle	class TriangleError < Exception\nend\n\nclass Triangle\n  \n  def initialize(*sides)\n    @sides = sides\n    validate\n  end\n\n  def kind\n    return :equilateral if equilateral?\n    return :isosceles if isosceles?\n    return :scalene if scalene?\n  end\n  \n  def validate\n    raise TriangleError, 'zero or negative sides' if negative_or_zero_sides?\n    raise TriangleError, 'impossible triangle' if  triangle_inequality?\n  end\n\n  def equilateral?\n    @sides.combination(2).all? {|side1, side2| side1 == side2}\n  end\n\n  def isosceles?\n    @sides.combination(2).any? {|side1, side2| side1 == side2}\n  end\n\n  def scalene?\n    @sides.combination(2).none? {|side1, side2| side1 == side2}\n  end\n\n  def negative_or_zero_sides?\n    @sides.any? {|side| side <= 0}\n  end\n\n  def triangle_inequality?\n    @sides.permutation.any? {|a, b, c| a + b <= c}\n  end\n\nend	\N	\N	0	2	2014-07-16 08:28:53	2014-07-16 08:28:53	18	triangle.rb
42	21	ec2527c133b07d6e4eaf2481	superseded	javascript	bob	var Bob = function(){};\n\nBob.prototype.hey = function() {\n\treturn "Whatever.";\n};	\N	\N	0	1	2014-07-12 00:52:45	2014-07-12 00:52:45	19	bob_test.js
43	21	bdb37ed7689f4e87aaa1dae1	done	javascript	bob	var Bob = function(){};\n\nBob.prototype.hey = function(str) {\n\tif (!!str.match(/[0-9]+$/g)) {\n\t\treturn "Whatever.";\n\t} else if (!!str.match(/[0-9]+[?]$/g)) {\n\t\treturn "Sure.";\n\t} else if (str.trim() === "") {\n\t\treturn "Fine. Be that way!";\n\t} else if (str === str.toUpperCase()) {\n\t\treturn "Woah, chill out!";\n\t} else if (!!str.match(/.*[?]$/g)) {\n\t\treturn "Sure.";\n\t} else if (str === '') {\n\t\treturn "Fine. Be that way!";\n\t} else {\n\t\treturn "Whatever.";\n\t}\n};	2014-07-17 09:28:18	\N	0	2	2014-07-15 19:48:56	2014-07-15 19:48:56	19	bob_test.js
44	21	6fdb711347f9bd20662ce288	superseded	ruby	word-count	class Phrase\n\n  def initialize(content)\n    @content = content\n  end\n\n  def normalized_words\n    @content.split(/[^\\w]+/).map(&:downcase)\n  end\n\n  def word_count\n    counts = Hash.new(0)\n\n    normalized_words.each do |word|\n      counts[word] += 1\n    end\n\n    counts\n  end\nend	\N	\N	0	1	2014-07-11 14:38:02	2014-07-11 14:38:02	20	word-count.rb
45	21	165f16d7f0422f64d6dde68d	done	ruby	word-count	class Phrase\n\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    WordArray.parse(@content).uniq_counts\n  end\nend\n\nclass WordArray < Array\n  def self.parse(content)\n    new(content.split(/[^\\w]+/).map(&:downcase))\n  end\n\n  def uniq_counts\n    counts = Hash.new(0)\n\n    each do |word|\n      counts[word] += 1\n    end\n\n    counts\n  end\nend	2014-07-26 23:05:42.710261	\N	0	3	2014-07-20 13:26:57	2014-07-20 13:26:57	20	word-count.rb
46	21	b21c2d0690230653195d0f7b	superseded	ruby	word-count	class Phrase\n\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    WordArray.parse(@content).uniq_counts\n  end\nend\n\nclass WordArray\n  def self.parse(content)\n    new(content.split(/[^\\w]+/).map(&:downcase))\n  end\n\n  def uniq_counts\n    counts = Hash.new(0)\n\n    normalized_words.each do |word|\n      counts[word] += 1\n    end\n\n    counts\n  end\nend	\N	\N	0	2	2014-07-23 04:43:40	2014-07-23 04:43:40	20	word-count.rb
47	27	bf3dcf64638700953e281db6	superseded	ruby	roman-numerals	class Integer < Numeric\r\n\t@@n = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\r\n\t@@n2r = { 1000=>'M', 900=>'CM',\r\n\t\t       500=>'D', 400=>'CD',\r\n\t\t\t   100=>'C',  90=>'XC',\r\n\t\t        50=>'L',  40=>'XL',\r\n\t\t        10=>'X',   9=>'IX',\r\n\t\t         5=>'V',   4=>'IV',\r\n\t\t         1=>'I' }\r\n\t\t          \r\n\tdef to_roman\r\n\t\tif @@n.include?(self)\r\n\t\t\t@@n2r[self]\r\n\t\telsif self==0\r\n\t\t\t''\r\n\t\telse\r\n\t\t\t@@n.each do |x| #build string left to right recursively\r\n\t\t\t\tself > x ? (return @@n2r[x] + (self-x).to_roman) : nil\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend	\N	\N	0	1	2014-02-09 04:10:38	2014-02-09 04:10:38	21	roman.rb
48	27	c7343905855855b64cae8ca2	done	ruby	roman-numerals	class Integer < Numeric\r\n\t@@n = [1000,900,500,400,100,90,50,40,10,9,5,4,1,0]\r\n\t@@n2r = { 1000=>'M', 900=>'CM', 500=>'D', 400=>'CD',\r\n\t\t\t   100=>'C',  90=>'XC',  50=>'L',  40=>'XL',\r\n\t\t        10=>'X',   9=>'IX',   5=>'V',   4=>'IV', 1=>'I', 0=>'' }\r\n\t\t          \r\n\tdef to_roman\r\n\t\tif @@n.include?(self)\r\n\t\t\t@@n2r[self]\r\n\t\telse #build string left to right recursively\r\n\t\t\t@@n.each { |x| self > x ? (return @@n2r[x] + (self-x).to_roman) : nil }\r\n\t\tend\r\n\tend\r\nend	2014-03-06 12:39:30	\N	0	2	2014-03-05 06:06:53	2014-03-05 06:06:53	21	roman.rb
49	28	51b8396511b90094619c56ab	pending	elixir	roman-numerals	defmodule Roman do\n  @doc """\n  Convert `n` to roman numerals.\n  """\n  @spec numerals(non_neg_integer) :: String.t\n  def numerals(n) do\n    l = [ List.duplicate(?M, div(n, 1000)),\n          part(rem(div(n, 100), 10), { ?C, ?D, ?M }),\n          part(rem(div(n, 10), 10), { ?X, ?L, ?C }),\n          part(rem(n, 10), { ?I, ?V, ?X }) ]\n    iolist_to_binary(l)\n  end\n\n  # Precondition: 0 <= n <= 9\n  defp part(0, _), do: []\n  defp part(4, { one, five, _ }), do: [one, five]\n  defp part(9, { one, _, ten }), do: [one, ten]\n  defp part(n, { one, _, _ }) when n <= 3, do: List.duplicate(one, n) \n  defp part(n, { one, five, _ }) when n <= 8, do: [five, List.duplicate(one, n-5)]\nend	\N	\N	0	1	2014-02-18 15:13:12	2014-02-18 15:13:12	22	roman-numerals.exs
50	28	93dfbd5c24c1ddd35196450a	done	ruby	gigasecond	class Gigasecond\n  attr_reader :date\n\n  def initialize d\n    @date = d + (((10**9)/60)/60)/24\n  end\n\nend	2014-04-02 04:35:56	\N	0	1	2014-03-21 20:40:57	2014-03-21 20:40:57	23	gigasecond.rb
51	28	36e26ccb10cb30c11de42dc1	done	ruby	beer-song	class BeerSong\n  def sing\n    verses(99, 0)\n  end\n\n  def verses(start, stop)\n    start.downto(stop).map{|number| verse(number) + "\\n"}.join\n  end\n\n  def verse(number)\n    Verse.for(number).to_s\n  end\nend\n\nclass Verse\n  def self.for(number)\n    case number\n    when 0 then Verse0\n    when 1 then Verse1\n    when 2 then Verse2\n    else Verse\n    end.new(number)\n  end\n\n  attr_reader :number\n  def initialize(number)\n    @number = number\n  end\n  \n  def to_s\n    "#{current_inventory.to_s.capitalize} #{current_container} of beer on the wall, " +\n    "#{current_inventory} #{current_container} of beer.\\n" +\n    "#{action}, " +\n    "#{next_inventory} #{next_container} of beer on the wall.\\n"\n  end\n  \n  def current_inventory; number end\n  def next_inventory; number - 1 end\n  def current_container; "bottles" end\n  def next_container; "bottles" end\n  def action; "Take #{pronoun} down and pass it around" end\n  def pronoun; "one" end\nend\n\nclass Verse0 < Verse\n  def current_inventory; "no more" end\n  def next_inventory; 99 end\n  def action; "Go to the store and buy some more" end\nend\n\nclass Verse1 < Verse\n  def next_inventory; "no more" end\n  def current_container; "bottle" end\n  def pronoun; "it" end\nend\n\nclass Verse2 < Verse\n  def next_container; "bottle" end\nend	2014-03-28 20:57:50	\N	0	2	2014-03-27 02:36:58	2014-03-27 02:36:58	24	beer_song.rb
52	28	0aadf25a03eb229b51ccabc6	superseded	ruby	beer-song	class BeerSong\n  def sing\n    verses(99, 0)\n  end\n\n  def verses(start, stop)\n    start.downto(stop).map{|number| verse(number) + "\\n"}.join\n  end\n\n  def verse(number)\n    Verse.new(number).to_s\n  end\nend\n\nclass Verse\n  attr_reader :number\n  def initialize(number)\n    @number = number\n  end\n  \n  def to_s\n    "#{current_inventory.to_s.capitalize} #{current_container} of beer on the wall, " +\n    "#{current_inventory} #{current_container} of beer.\\n" +\n    "#{action}, " +\n    "#{next_inventory} #{next_container} of beer on the wall.\\n"\n  end\n  \n  def current_inventory\n    if number == 0\n      "no more"\n    else\n      number\n    end\n  end\n\n  def next_inventory\n    if number == 1\n      "no more"\n    elsif number == 0\n      99\n    else\n      number - 1\n    end\n  end\n\n  def next_container\n    if number == 2\n      "bottle"\n    else\n      "bottles"\n    end\n  end\n  \n  def current_container\n    if number == 1\n      "bottle"\n    else\n      "bottles"\n    end\n  end\n \n  def action\n    if number == 0\n      "Go to the store and buy some more"\n    else\n      "Take #{pronoun} down and pass it around"\n    end\n  end\n\n  def pronoun\n    if number == 1\n      "it"\n    else\n      "one"\n    end\n  end\nend	\N	\N	0	1	2014-04-26 19:22:53	2014-04-26 19:22:53	24	beer_song.rb
53	30	9b8615267f270694fc5ddc7b	done	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\r\n\r\nimport Control.Monad\r\nimport Data.IORef\r\nimport System.Random\r\n\r\n\r\ntype Robot = IORef String\r\n\r\n\r\nmkRobot :: IO Robot\r\nmkRobot = genName >>= newIORef\r\n\r\n\r\nrobotName :: Robot -> IO String\r\nrobotName = readIORef\r\n\r\n\r\nresetName :: Robot -> IO ()\r\nresetName robot = genName >>= writeIORef robot\r\n\r\n\r\ngenName :: IO String\r\ngenName = sequence [letter, letter, digit, digit, digit]\r\n  where\r\n    letter = randomRIO ('A', 'Z')\r\n    digit = randomRIO ('0', '9')	2014-07-26 23:05:42.890727	\N	0	1	2014-07-17 09:30:56	2014-07-17 09:30:56	25	robot-name.hs
54	30	eb3b268ba36f7727c3c18e53	pending	javascript	grains	'use strict';\n\nvar Grains = function() {\n  this.squareObj = { 1: 1 };\n  for (var i = 2; i <= 64; i++) {\n    this.squareObj[i] = this.squareObj[i-1] * 2;\n  }\n};\n\nGrains.prototype.square = function (squareNum) {\n  return this.squareObj[squareNum];\n};\n\nGrains.prototype.total = function () {\n  var totalOutput = 0;\n  for (var key in this.squareObj) {\n    totalOutput += this.squareObj[key];\n  }\n  return totalOutput;\n};	\N	\N	0	1	2014-07-17 07:55:57	2014-07-17 07:55:57	26	grains_test.js
55	30	7607ca4844b9e62226129a17	done	ruby	bob	class Bob\n  def hey(text)\n    str = text.gsub(/\\d/, "")\n    if text.gsub(/\\s/,'').empty?\n      'Fine. Be that way!'\n    elsif str == str.upcase && str =~ /[a-zA-Z]/\n      'Woah, chill out!'\n    elsif text[-1] == '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	2014-07-26 23:05:42.930481	\N	0	1	2014-07-16 15:04:59	2014-07-16 15:04:59	27	bob.rb
56	30	8c9bb084b07a5592498a1857	superseded	javascript	anagram	module.exports = function Anagram(word) {\n\n  word = word.toLowerCase();\n  sortedWord = sorted(word);\n\n  function match(words) {\n    return words.filter(isAnagram);\n  }\n\n  function isAnagram(otherWord) {\n    otherWord = otherWord.toLowerCase();\n    return word !== otherWord && sortedWord == sorted(otherWord);\n  }\n\n  function sorted(word) {\n    return word.split("").sort().join("");\n  }\n\n  return {\n    match: match\n  };\n\n};	\N	\N	0	3	2014-07-16 16:31:21	2014-07-16 16:31:21	28	anagram.js
57	30	daee2df44813a8358b488768	superseded	javascript	anagram	function letters(word) {\n  return word.split("").sort().join("");\n}\n\nfunction Anagram(word) {\n  this.letters = letters(word);\n}\n\nAnagram.prototype.match = function(words) {\n  return words.filter(function(word) {\n    return letters(word) === this.letters;\n  }, this);\n}\n\nmodule.exports = Anagram;	\N	\N	0	1	2014-07-20 16:31:18	2014-07-20 16:31:18	28	anagram.js
58	30	27c0cac427cd78aa0445dc20	superseded	javascript	anagram	function Anagram(word) {\n  this.letters = this.sortLetters(word);\n}\n\nAnagram.prototype.match = function(words) {\n  return words.filter(this.isAnagram, this);\n};\n\nAnagram.prototype.sortLetters = function(word) {\n  return word.split("").sort().join("");\n};\n\nAnagram.prototype.isAnagram = function(word) {\n  return this.sortLetters(word) === this.letters;\n};\n\nmodule.exports = Anagram;	\N	\N	0	2	2014-07-22 07:38:46	2014-07-22 07:38:46	28	anagram.js
59	30	8af76b4b8bb102692beca18a	done	javascript	anagram	module.exports = function Anagram(word) {\n\n  var sortedWord = sorted(word.toLowerCase());\n\n  function match(words) {\n    return words.filter(isAnagram);\n  }\n\n  function isAnagram(otherWord) {\n    otherWord = otherWord.toLowerCase();\n    return word !== otherWord && sortedWord == sorted(otherWord);\n  }\n\n  function sorted(word) {\n    return word.split("").sort().join("");\n  }\n\n  return {\n    match: match\n  };\n\n};	2014-07-26 04:30:10	\N	0	4	2014-07-24 02:53:17	2014-07-24 02:53:17	28	anagram.js
60	30	2f73f147d38b694f6adcd61b	superseded	scala	hamming	object Hamming {\r\n  def compute(xs: String, ys: String): Int =\r\n    (xs zip ys).map { case (x, y) => if (x != y) 1 else 0 }.sum\r\n}	\N	\N	0	1	2014-07-19 00:40:29	2014-07-19 00:40:29	29	Hamming.scala
61	30	c669022471d6fb23e242820a	done	scala	hamming	object Hamming {\r\n  def compute(xs: String, ys: String): Int =\r\n    xs zip ys count { case (x, y) => x != y }\r\n}	2014-07-23 12:43:15	\N	0	2	2014-07-20 22:50:17	2014-07-20 22:50:17	29	Hamming.scala
62	30	26aaee173599c973abeb81f8	superseded	clojure	nucleotide-count	(ns dna\n  (:require [clojure.string :refer (blank?)]))\n\n(defn frequencies-of [char str]\n  ((merge {\\A 0 \\T 0 \\C 0 \\G 0 \\U 0} (frequencies str)) char))\n\n(defn valid-dna? [d]\n  (re-matches #"[ACGTU]" (str d)))\n\n(defn count [char str]\n  (if (valid-dna? char)\n    (frequencies-of char str)\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [dna-str]\n  {\\A (count \\A dna-str) \\G (count \\G dna-str) \\C (count \\C dna-str) \\T (count \\T dna-str)})	\N	\N	0	1	2014-07-18 03:23:54	2014-07-18 03:23:54	30	dna.clj
63	30	b451716981e962455a5800a0	done	clojure	nucleotide-count	(ns dna\n  (:require [clojure.string :refer (blank?)]))\n\n(defn frequencies-of [char str]\n  ((merge {\\A 0 \\T 0 \\C 0 \\G 0 \\U 0} (frequencies str)) char))\n\n(defn valid-dna? [d]\n  (re-matches #"[ACGTU]" (str d)))\n\n(defn count [char str]\n  (if (valid-dna? char)\n    (frequencies-of char str)\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [dna-str]\n  (reduce #(assoc %1 %2 (count %2 dna-str)) {} "ACGT"))	2014-07-26 23:05:43.085319	\N	0	2	2014-07-20 10:58:43	2014-07-20 10:58:43	30	dna.clj
64	32	9ca59bc6eca0e0f78983dd4a	pending	haskell	leap	module LeapYear (isLeapYear) where\r\n\r\nisLeapYear :: Int -> Bool\r\nisLeapYear year = year `mod` 4 == 0 && (year `mod` 100 /= 0 || year `mod` 400 == 0)\r	\N	\N	0	1	2014-06-22 19:17:50	2014-06-22 19:17:50	31	LeapYear.hs
65	32	afc917d0dcecd932f613a9c2	superseded	elixir	bob	defmodule Teenager do\n  defmodule Statement do\n    def nothing?(nil), do: true\n    def nothing?(""), do: true\n    def nothing?(_), do: false\n\n    def yelling?(statement) do\n      String.upcase(statement) == statement\n    end\n\n    def question?(statement) do\n      String.last(statement) == "?"\n    end\n  end\n\n  def hey(statement) do\n    cond do\n      Statement.nothing?(statement) -> "Fine. Be that way!"\n      Statement.yelling?(statement) -> "Woah, chill out!"\n      Statement.question?(statement) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend	\N	\N	0	3	2014-06-01 17:54:23	2014-06-01 17:54:23	32	bob.exs
66	32	b2cd00cdb9407f6c037d6ca1	superseded	elixir	bob	defmodule Teenager do\n  defmodule Statement do\n    def nothing?(nil), do: true\n    def nothing?(""), do: true\n    def nothing?(_), do: false\n\n    def yelling?(statement) do\n      String.upcase(statement) == statement\n    end\n\n    def question?(statement) do\n      String.ends_with?(statement, "?")\n    end\n  end\n\n  def hey(statement) do\n    cond do\n      Statement.nothing?(statement) -> "Fine. Be that way!"\n      Statement.yelling?(statement) -> "Woah, chill out!"\n      Statement.question?(statement) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend	\N	\N	0	4	2014-06-08 04:15:04	2014-06-08 04:15:04	32	bob.exs
67	32	7c69a428e1fa32aeb9f753bd	superseded	elixir	bob	defmodule Words do\n  import String, only: [ downcase: 1, split: 2 ]\n  import Regex, only: [ replace: 3 ]\n\n  def count(sentence) do\n    sentence\n    |> downcase\n    |> remove_punctuation\n    |> to_word_list\n    |> _count( HashDict.new )\n  end\n\n  def remove_punctuation(sentence) do\n    replace( %r/[^a-z0-9A-Z ]/, sentence, "" )\n  end\n\n  def to_word_list(sentence) do\n    split( sentence, %r/\\s+/ )\n  end\n\n  defp _count( [ word | rest ], hash ) do\n    _count( rest, HashDict.update( hash, word, 1, fn(c) -> c + 1 end ) )\n  end\n\n  defp _count( [], hash ) do\n    hash\n  end\nend	\N	\N	0	6	2014-06-13 12:01:17	2014-06-13 12:01:17	32	bob.exs
68	32	3491b9232e54ede5320d0e47	superseded	elixir	bob	defmodule Teenager do\n  defmodule Statement do\n    def nothing?(statement) do\n      statement == nil || String.strip(statement) == ""\n    end\n\n    def yelling?(statement) do\n      String.upcase(statement) == statement\n    end\n\n    def question?(statement) do\n      String.at(statement, -1) == "?"\n    end\n  end\n\n  def hey(statement) do\n    cond do\n      Statement.nothing?(statement) -> "Fine. Be that way!"\n      Statement.yelling?(statement) -> "Woah, chill out!"\n      Statement.question?(statement) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-06-17 22:39:37	2014-06-17 22:39:37	32	bob.exs
69	32	4ed928a447f096199b99c794	superseded	elixir	bob	defmodule Statement do\n  def nothing?(nil), do: true\n  def nothing?(statement) do\n    String.strip(statement) == ""\n  end\n\n  def yelling?(statement) do\n    String.upcase(statement) == statement\n  end\n\n  def question?(statement) do\n    String.ends_with?(statement, "?")\n  end\nend\n\ndefmodule Teenager do\n  def hey(statement) do\n    cond do\n      Statement.nothing?(statement) -> "Fine. Be that way!"\n      Statement.yelling?(statement) -> "Woah, chill out!"\n      Statement.question?(statement) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend	\N	\N	0	5	2014-06-18 19:03:12	2014-06-18 19:03:12	32	bob.exs
70	32	b702f607876db0a8852f9182	superseded	elixir	bob	defmodule Teenager do\n  defmodule Statement do\n    def nothing?(statement) do\n      statement == nil || String.strip(statement) == ""\n    end\n\n    def yelling?(statement) do\n      String.upcase(statement) == statement\n    end\n\n    def question?(statement) do\n      String.last(statement) == "?"\n    end\n  end\n\n  def hey(statement) do\n    cond do\n      Statement.nothing?(statement) -> "Fine. Be that way!"\n      Statement.yelling?(statement) -> "Woah, chill out!"\n      Statement.question?(statement) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend	\N	\N	0	2	2014-07-04 02:16:03	2014-07-04 02:16:03	32	bob.exs
71	32	a4cbedd0a9a0904e85b57da5	done	elixir	bob	defmodule Statement do\n  def nothing?(nil), do: true\n  def nothing?(statement) do\n    String.strip(statement) == ""\n  end\n\n  def yelling?(statement) do\n    String.upcase(statement) == statement\n  end\n\n  def question?(statement) do\n    String.ends_with?(statement, "?")\n  end\nend\n\ndefmodule Teenager do\n  import Statement\n\n  def hey(statement) do\n    cond do\n      nothing?(statement)  -> "Fine. Be that way!"\n      yelling?(statement)  -> "Woah, chill out!"\n      question?(statement) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend	2014-07-16 02:09:33	\N	0	7	2014-07-05 23:38:37	2014-07-05 23:38:37	32	bob.exs
72	37	13199b5ec175231eb0ac36b0	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    case\n    when msg.strip == ''\n      'Fine. Be that way!'\n    when msg =~ /[A-Z]/ && msg.upcase == msg\n      'Woah, chill out!'\n    when msg[-1] == '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend	\N	\N	0	1	2014-05-27 05:28:33	2014-05-27 05:28:33	33	bob.rb
73	37	3e9d740e237d583f3bade3b4	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    if nothing?(msg)\n      'Fine. Be that way!'\n    elsif yelling?(msg)\n      'Woah, chill out!'\n    elsif question?(msg)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def nothing?(msg)\n    msg.strip.empty?\n  end\n\n  def yelling?(msg)\n    msg =~ /[A-Z]/ && msg.upcase == msg\n  end\n\n  def question?(msg)\n    msg.end_with? '?'\n  end\n\nend	\N	\N	0	3	2014-06-05 02:17:47	2014-06-05 02:17:47	33	bob.rb
74	37	fb00fa4fa890417127801ed3	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    if nothing?(msg)\n      'Fine. Be that way!'\n    elsif yelling?(msg)\n      'Woah, chill out!'\n    elsif question?(msg)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def nothing?(msg)\n    msg.strip.empty?\n  end\n\n  def yelling?(msg)\n    msg.upcase == msg\n  end\n\n  def question?(msg)\n    msg.end_with? '?'\n  end\n\nend	\N	\N	0	4	2014-06-13 13:00:14	2014-06-13 13:00:14	33	bob.rb
75	37	0f34c4c19ac399b0b1bbce58	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    if msg.strip.empty?\n      'Fine. Be that way!'\n    elsif msg =~ /[A-Z]/ && msg.upcase == msg\n      'Woah, chill out!'\n    elsif msg.end_with? '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend	\N	\N	0	2	2014-06-20 08:20:49	2014-06-20 08:20:49	33	bob.rb
76	37	a862092ba9fb63505750d170	done	ruby	bob	class Bob\n\n  def hey(msg)\n    message_mood = MessageMood.new(msg)\n    if message_mood.nothing?\n      'Fine. Be that way!'\n    elsif message_mood.yelling?\n      'Woah, chill out!'\n    elsif message_mood.question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend\n\nclass MessageMood\n\n  def initialize(msg)\n    @msg = msg\n  end\n\n  def nothing?\n    @msg.strip.empty?\n  end\n\n  def yelling?\n    @msg.upcase == @msg\n  end\n\n  def question?\n    @msg.end_with? '?'\n  end\n\nend	2014-06-25 23:24:37	\N	0	5	2014-06-23 10:50:33	2014-06-23 10:50:33	33	bob.rb
90	45	1a5b3325c5b31bb2ac70135b	done	ruby	roman-numerals	class Fixnum\r\n\r\n\tdef to_roman\r\n\t\troman_number = ''\r\n\t\tnumber = self\r\n\t\t#M\r\n\t\t\tm = number.divmod(1000)[0]\r\n\t\t\tm.times {roman_number += 'M'}\r\n\t\t\tnumber = number.divmod(1000)[1]\r\n\t\t#CM\r\n\t\tif number >= 900\r\n\t\t\troman_number += 'CM'\r\n\t\t\tnumber = number - 900\r\n\t\tend\r\n\t\t#D\r\n\t\t\td = number.divmod(500)[0]\r\n\t\t\td.times {roman_number += 'D'}\r\n\t\t\tnumber = number.divmod(500)[1]\r\n\t\t#CD\r\n\t\tif number >= 400\r\n\t\t\troman_number += 'CD'\r\n\t\t\tnumber = number - 400\r\n\t\tend\r\n\t\t#C\r\n\t\t\tc = number.divmod(100)[0]\r\n\t\t\tc.times {roman_number += 'C'}\r\n\t\t\tnumber = number.divmod(100)[1]\r\n\t\t#XC\r\n\t\tif number >= 90\r\n\t\t\troman_number += 'XC'\r\n\t\t\tnumber = number - 90\r\n\t\tend\r\n\t\t#L\r\n\t\t\tl = number.divmod(50)[0]\r\n\t\t\tl.times {roman_number += 'L'}\r\n\t\t\tnumber = number.divmod(50)[1]\r\n\t\t#XL\r\n\t\tif number >= 40\r\n\t\t\troman_number += 'XL'\r\n\t\t\tnumber = number - 40\r\n\t\tend\r\n\t\t#X\r\n\t\t\tx = number.divmod(10)[0]\r\n\t\t\tx.times {roman_number += 'X'}\r\n\t\t\tnumber = number.divmod(10)[1]\r\n\t\t#IX\r\n\t\tif number >= 9\r\n\t\t\troman_number += 'IX'\r\n\t\t\tnumber = number - 9\r\n\t\tend\r\n\t\t#V\r\n\t\t\tv = number.divmod(5)[0]\r\n\t\t\tv.times {roman_number += 'V'}\r\n\t\t\tnumber = number.divmod(5)[1]\r\n\t\t#IV\r\n\t\tif number >= 4\r\n\t\t\troman_number += 'IV'\r\n\t\t\tnumber = number - 4\r\n\t\tend\r\n\t\t#I\r\n\t\t\ti = number\r\n\t\t\ti.times {roman_number += 'I'}\t\t\r\n\t\troman_number\r\n\tend\r\n\t\r\nend	2014-07-26 23:05:43.820219	\N	0	1	2014-07-22 17:45:56	2014-07-22 17:45:56	41	roman.rb
91	47	0210a5d2cc3503629ffe06d7	done	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize name\n    @name = name\n    @db = Hash.new { |hash, key| hash[key] = []}\n  end\n\n  def add name, grade\n    db[grade] << name\n  end\n\n  def grade grade\n    db[grade]\n  end\n\n  def sort\n    db.keys.sort.each_with_object({}) { |grade, hash|\n      hash[grade] = grade(grade).sort\n    }\n  end\n\nend	2014-07-05 06:32:13	\N	0	3	2014-06-30 11:03:35	2014-06-30 11:03:35	42	grade-school.rb
126	48	c79030d176731e92cb014a48	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize word\n    @word = word.downcase\n  end\n\n  def match candidates\n    candidates.select do |candidate|\n      matches? Anagram.new candidate\n    end\n  end\n\n  def matches? other\n    letters == other.letters and\n       word != other.word\n  end\n\n  def letters\n    @letters ||= word.chars.sort\n  end\nend	\N	\N	0	1	2014-05-27 02:03:43	2014-05-27 02:03:43	60	anagram.rb
127	48	aa955168f1c7c89a5adbe26e	pending	elixir	anagram	defmodule Anagram do\n\tdef match(baseword, potential_anagrams) do\n\t\tEnum.filter(potential_anagrams, anagram_matcher(baseword))\n\tend\n\t\n\tdefp anagram_matcher(baseword) do\n\t\tsorted_base_letters = sorted_letters(baseword)\n\t\tfn(potential_match) ->\n\t\t\tsorted_base_letters == sorted_letters(potential_match)\n\t\tend\n\tend\n\t\n\tdefp sorted_letters(word) do\n\t\tword |>\n\t\t String.to_char_list! |>\n\t\t Enum.sort\n\tend\nend	\N	\N	0	5	2014-04-11 21:46:24	2014-04-11 21:46:24	61	anagram.exs
128	48	32f86a4f1d5b7bfa5e6d0d74	superseded	elixir	anagram	defmodule Anagram do\n\tdef match(baseword, potentials) do\n\t\tEnum.filter(potentials, fn(x) -> sort_letters(baseword) == sort_letters(x) end)\n\tend\n\t\n\tdefp sort_letters(word) do\n\t\tword |>\n\t\t String.to_char_list! |>\n\t\t Enum.sort            |>\n\t\t String.from_char_list!\n\tend\nend	\N	\N	0	1	2014-05-10 06:21:56	2014-05-10 06:21:56	61	anagram.exs
129	48	60bbfc4a3943ab92176baedd	superseded	elixir	anagram	defmodule Anagram do\n\tdef match(baseword, potentials) do\n\t\tEnum.filter(potentials, match_anagram(baseword, &1))\n\tend\n\t\n\tdef match_anagram(baseword, potential) do\n\t\tsort_letters(baseword) == sort_letters(potential)\n\tend\n\t\n\t\n\tdefp sort_letters(word) do\n\t\tword |>\n\t\t String.to_char_list! |>\n\t\t Enum.sort            |>\n\t\t String.from_char_list!\n\tend\nend	\N	\N	0	2	2014-06-10 18:21:09	2014-06-10 18:21:09	61	anagram.exs
130	48	6f69b0c59f33d5d90805a222	superseded	elixir	anagram	defmodule Anagram do\n\tdef match(baseword, potentials) do\n\t\tEnum.filter(potentials, match_anagram(baseword, &1))\n\tend\n\t\n\tdefp match_anagram(baseword, potential) do\n\t\tsort_letters(baseword) == sort_letters(potential)\n\tend\n\t\n\tdefp sort_letters(word) do\n\t\tword |>\n\t\t String.to_char_list! |>\n\t\t Enum.sort            |>\n\t\t String.from_char_list!\n\tend\nend	\N	\N	0	3	2014-06-15 23:48:44	2014-06-15 23:48:44	61	anagram.exs
77	37	1fc465434cc182ce5c2401b4	done	ruby	space-age	class SpaceAge \n  attr_accessor :seconds, :on_earth, :on_mercury, :on_venus, :on_mars, :on_jupiter, :on_saturn, :on_uranus, :on_neptune\n  \n  def initialize(age_in_seconds)\n    self.seconds = age_in_seconds\n\n    @@earth_years = seconds_to_earth_year(age_in_seconds)\n\n    self.on_earth   = @@earth_years.round(2)\n    self.on_mercury = years_to_space_years("Mercury")\n    self.on_venus   = years_to_space_years("Venus")\n    self.on_mars    = years_to_space_years("Mars")\n    self.on_jupiter = years_to_space_years("Jupiter")\n    self.on_saturn  = years_to_space_years("Saturn")\n    self.on_uranus  = years_to_space_years("Uranus")\n    self.on_neptune = years_to_space_years("Neptune")\n  end\n\n  def seconds_to_earth_year(seconds)\n    (seconds / 31557600.0)\n  end\n\n  def years_to_space_years(planet)\n    # Accepts planets name\n    # divides earth years by ratio of planet-years to earth-years\n    # returns years in age of planet rounded to 2 decimal places\n    case planet\n    when "Mercury"\n      age = @@earth_years / 0.2408467\n    when "Venus"\n      age = @@earth_years / 0.61519726\n    when "Mars"\n      age = @@earth_years / 1.8808158\n    when "Jupiter"\n      age = @@earth_years / 11.862615 \n    when "Saturn"\n      age = @@earth_years / 29.447498 \n    when "Uranus"\n      age = @@earth_years / 84.016846 \n    when "Neptune"\n      age = @@earth_years / 164.79132 \n    end\n    \n    return age.round(2)\n  end\nend	2014-07-18 08:32:04	\N	0	1	2014-07-16 22:37:08	2014-07-16 22:37:08	34	space-age.rb
78	37	75476e5d7ff0a73c89fb10c2	superseded	haskell	matrix	module Matrix\r\n( Matrix\r\n, row\r\n, rows\r\n, column\r\n, cols\r\n, shape\r\n, transpose\r\n, reshape\r\n, flatten\r\n, fromString\r\n, Matrix.fromList\r\n) where\r\n\r\nimport           Data.Vector\r\nimport qualified Data.Vector as V\r\nimport qualified Prelude as P\r\nimport           Prelude hiding\r\n  (map\r\n  ,concat\r\n  ,words\r\n  ,length\r\n  ,head\r\n  ,null\r\n  ,splitAt\r\n  ,any\r\n  ,tail)\r\n\r\ndata Matrix a = Matrix (Vector (Vector a))\r\n                deriving (Eq, Show)\r\n\r\nrow :: Int -> Matrix a -> Vector a\r\nrow n (Matrix vs) = vs ! n\r\n\r\ncolumn :: Int -> Matrix a -> Vector a\r\ncolumn n (Matrix vs) = map (! n) vs\r\n\r\nrows :: Matrix a -> Int\r\nrows (Matrix vs) = length vs\r\n\r\ncols :: Matrix a -> Int\r\ncols (Matrix vs)\r\n    | length vs == 0 = 0\r\n    | otherwise      = length $ head vs\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape x = (rows x, cols x)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (_, n) (Matrix vs) = Matrix (chunksOf n . flattenVs $ vs)\r\n  where\r\n    chunksOf z = unfoldr (\\x -> if null x then Nothing else Just $ splitAt z x)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vs) = flattenVs vs\r\n\r\nflattenVs :: Vector (Vector a) -> Vector a\r\nflattenVs = concat . toList\r\n\r\ntranspose :: Matrix a-> Matrix a\r\ntranspose (Matrix vs) = Matrix (transposeVs vs)\r\n\r\ntransposeVs :: Vector (Vector a) -> Vector (Vector a)\r\ntransposeVs vs\r\n    | any null vs = empty\r\n    | otherwise   = map head vs `cons` transposeVs (map tail vs)\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix $ V.fromList (P.map V.fromList xs)\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = P.map (P.map P.read . sep) . P.lines $ str\r\n    sep xs\r\n        | P.head xs == '"' = [xs] -- Don't split sentences\r\n        | otherwise        = P.words xs	\N	\N	0	1	2014-06-01 13:49:56	2014-06-01 13:49:56	35	Matrix.hs
79	37	62b91a59a8fa64eae281a56e	superseded	haskell	matrix	module Matrix\r\n( Matrix\r\n, row\r\n, rows\r\n, column\r\n, cols\r\n, shape\r\n, transpose\r\n, reshape\r\n, flatten\r\n, fromString\r\n, Matrix.fromList\r\n) where\r\n\r\nimport           Data.Vector\r\nimport qualified Data.Vector as V\r\nimport qualified Prelude as P\r\nimport           Prelude hiding\r\n  ( map\r\n  , concat\r\n  , words\r\n  , length\r\n  , head\r\n  , null\r\n  , splitAt\r\n  , any\r\n  , tail )\r\n\r\ndata Matrix a = Matrix (Vector (Vector a))\r\n                deriving (Eq, Show)\r\n\r\nrow :: Int -> Matrix a -> Vector a\r\nrow n (Matrix vs) = vs ! n\r\n\r\ncolumn :: Int -> Matrix a -> Vector a\r\ncolumn n (Matrix vs) = map (! n) vs\r\n\r\nrows :: Matrix a -> Int\r\nrows (Matrix vs) = length vs\r\n\r\ncols :: Matrix a -> Int\r\ncols (Matrix vs)\r\n    | length vs == 0 = 0\r\n    | otherwise      = length $ head vs\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape x = (rows x, cols x)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (_, n) (Matrix vs) = Matrix (chunksOf n . flattenVs $ vs)\r\n  where\r\n    chunksOf z = unfoldr (\\x -> if null x then Nothing else Just $ splitAt z x)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vs) = flattenVs vs\r\n\r\nflattenVs :: Vector (Vector a) -> Vector a\r\nflattenVs = concat . toList\r\n\r\ntranspose :: Matrix a-> Matrix a\r\ntranspose (Matrix vs) = Matrix (transposeVs vs)\r\n  where\r\n    transposeVs zs\r\n        | any null zs = empty\r\n        | otherwise   = map head zs `cons` transposeVs (map tail zs)\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix $ V.fromList (P.map V.fromList xs)\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = P.map (P.map P.read . sep) . P.lines $ str\r\n    sep xs\r\n        | P.head xs == '"' = [xs] -- Don't split sentences\r\n        | otherwise        = P.words xs	\N	\N	0	2	2014-06-02 21:56:51	2014-06-02 21:56:51	35	Matrix.hs
80	37	819f5686802cf3b5deff8e69	superseded	haskell	matrix	module Matrix\r\n  ( Matrix\r\n  , row\r\n  , rows\r\n  , column\r\n  , cols\r\n  , shape\r\n  , transpose\r\n  , reshape\r\n  , flatten\r\n  , fromString\r\n  , Matrix.fromList\r\n  ) where\r\n\r\nimport           Data.Vector (Vector)\r\nimport qualified Data.Vector as V\r\n\r\ntype Rows = Int\r\ntype Cols = Int\r\ndata Matrix a = Matrix (Vector a) (Rows, Cols)\r\n                deriving (Eq, Show)\r\n\r\nrows, cols :: Matrix a -> Int\r\nrows (Matrix _ (rs, _)) = rs\r\ncols (Matrix _ (_, cs)) = cs\r\n\r\nrow, column :: Int -> Matrix a -> Vector a\r\nrow    n (Matrix vec (_ , cs)) = V.slice (n * cs) cs vec\r\n\r\ncolumn n (Matrix vec (rs, cs)) = V.fromList $ map (vec V.!) indxs\r\n  where\r\n    indxs = [n,n+cs..cs*rs-1]\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape (Matrix _ (rs, cs)) = (rs, cs)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (rs, cs) (Matrix vec _) = Matrix vec (rs, cs)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vec _) = vec\r\n\r\ntranspose :: Matrix a -> Matrix a\r\ntranspose mtrx@(Matrix _ (rs, cs)) = Matrix vec (cs, rs)\r\n  where\r\n   vec= V.concat [column c mtrx | c <- [0..cs-1]]\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = map (map read . sep) . lines $ str\r\n    sep xs\r\n        | head xs == '"' = [xs] -- Kepp sentences intact\r\n        | otherwise      = words xs\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix (V.fromList $ concat xs) (rows', cols')\r\n  where\r\n    rows' = length xs\r\n    cols' = case xs of (x:_) -> length x\r\n                       _     -> 0	\N	\N	0	4	2014-06-11 10:51:18	2014-06-11 10:51:18	35	Matrix.hs
92	47	bafa869c395ada729f5c92cf	superseded	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize name\n    @name = name\n    @db = {}\n  end\n\n  def add name, grade\n    @db[grade] = [] unless @db[grade]\n    @db[grade] << name\n  end\n\n  def grade grade\n    return @db[grade] if @db[grade]\n    []\n  end\n\n  def sort\n    @db.keys.sort.each_with_object({}) { |k,hash| hash[k] = sort_students @db[k] }\n  end\n\n  private\n\n  def sort_students students\n    students.sort\n  end\n\nend	\N	\N	0	1	2014-07-14 20:29:10	2014-07-14 20:29:10	42	grade-school.rb
93	47	28beff02254f2a718f98146d	superseded	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize name\n    @name = name\n    @db = Hash.new { |hash, key| hash[key] = []}\n  end\n\n  def add name, grade\n    db[grade] << name\n  end\n\n  def grade grade\n    db[grade] if db[grade]\n  end\n\n  def sort\n    db.keys.sort.each_with_object({}) { |grade, hash|\n      hash[grade] = grade(grade).sort\n    }\n  end\n\nend	\N	\N	0	2	2014-07-16 09:23:48	2014-07-16 09:23:48	42	grade-school.rb
81	37	6f986a72c8bf74920e29b322	superseded	haskell	matrix	module Matrix\r\n  ( Matrix\r\n  , row\r\n  , rows\r\n  , column\r\n  , cols\r\n  , shape\r\n  , transpose\r\n  , reshape\r\n  , flatten\r\n  , fromString\r\n  , Matrix.fromList\r\n  ) where\r\n\r\nimport           Data.Vector (Vector)\r\nimport qualified Data.Vector as V\r\n\r\ntype Rows = Int\r\ntype Cols = Int\r\ndata Matrix a = Matrix (Vector a) (Rows, Cols)\r\n                deriving (Eq, Show)\r\n\r\nrows, cols :: Matrix a -> Int\r\nrows (Matrix _ (rs, _)) = rs\r\ncols (Matrix _ (_, cs)) = cs\r\n\r\nrow, column :: Int -> Matrix a -> Vector a\r\nrow    n (Matrix vec (_ , cs)) = V.slice (n * cs) cs vec\r\n\r\ncolumn n (Matrix vec (rs, cs)) = V.fromList $ map (vec V.!) indxs\r\n  where\r\n    indxs = [n,n+cs..cs*rs-1]\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape (Matrix _ (rs, cs)) = (rs, cs)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (rs, cs) (Matrix vs _) = Matrix vs (rs, cs)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vs _) = vs\r\n\r\ntranspose :: Matrix a -> Matrix a\r\ntranspose mtrx@(Matrix _ (rs, cs)) = Matrix vs (cs, rs)\r\n  where\r\n    vs = V.concat [column c mtrx | c <- [0..cs-1]]\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = map (map read . sep) . lines $ str\r\n    sep xs\r\n        | head xs == '"' = [xs] -- Kepp sentences intact\r\n        | otherwise      = words xs\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix (V.fromList $ concat xs) (rows', cols')\r\n  where\r\n    rows' = length xs\r\n    cols' = case xs of (x:_) -> length x\r\n                       _     -> 0	\N	\N	0	3	2014-06-12 10:25:17	2014-06-12 10:25:17	35	Matrix.hs
82	37	134726bc9c7c5caaa21e7ab0	pending	haskell	matrix	module Matrix\r\n  ( Matrix\r\n  , row\r\n  , rows\r\n  , column\r\n  , cols\r\n  , shape\r\n  , transpose\r\n  , reshape\r\n  , flatten\r\n  , fromString\r\n  , Matrix.fromList\r\n  ) where\r\n\r\nimport           Data.Vector (Vector)\r\nimport qualified Data.Vector as V\r\n\r\ntype Rows = Int\r\ntype Cols = Int\r\ndata Matrix a = Matrix Rows Cols (Vector a)\r\n                deriving (Eq, Show)\r\n\r\nrows, cols :: Matrix a -> Int\r\nrows (Matrix rs _  _) = rs\r\ncols (Matrix _  cs _) = cs\r\n\r\nrow, column :: Int -> Matrix a -> Vector a\r\nrow    n (Matrix _  cs vec) = V.slice (n * cs) cs vec\r\n\r\ncolumn n (Matrix rs cs vec) = V.fromList $ map (vec V.!) indxs\r\n  where\r\n    indxs = [n,n+cs..cs*rs-1]\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape (Matrix rs cs _) = (rs, cs)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (rs, cs) (Matrix _ _ vec) = Matrix rs cs vec\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix _ _ vec) = vec\r\n\r\ntranspose :: Matrix a -> Matrix a\r\ntranspose mtrx@(Matrix rs cs _) = Matrix cs rs vec\r\n  where\r\n   vec= V.concat [column c mtrx | c <- [0..cs-1]]\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = map (map read . sep) . lines $ str\r\n    sep xs\r\n        | head xs == '"' = [xs] -- Keep sentences intact\r\n        | otherwise      = words xs\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix rows' cols' (V.fromList $ concat xs)\r\n  where\r\n    rows' = length xs\r\n    cols' = case xs of (x:_) -> length x\r\n                       _     -> 0	\N	\N	0	5	2014-06-17 05:38:43	2014-06-17 05:38:43	35	Matrix.hs
83	37	2f32e49d6fd21fba1823dd66	done	perl5	rna-transcription	use strict;\nuse warnings;\n\n{\n  package DNA;\n  sub to_rna {\n    my $strand = shift;\n    $strand =~ tr/T/U/;\n    $strand;\n  }\n}\n1;	2014-06-08 01:22:43	\N	0	2	2014-06-02 02:34:47	2014-06-02 02:34:47	36	rna-transcription.pm
84	37	a8d1c7fe7418ece98cf85978	superseded	perl5	rna-transcription	use strict;\nuse warnings;\n\n{\n  package DNA;\n  sub to_rna {\n    my $strand = shift;\n    $strand =~ s/T/U/g;\n    $strand;\n  }\n}\n1;	\N	\N	0	1	2014-06-23 14:24:57	2014-06-23 14:24:57	36	rna-transcription.pm
85	37	3b3a9bdbe2973d08a85f2b8e	superseded	scala	hamming	object Hamming {\n  def compute(strand1: String, strand2: String): Int = {\n    strand1 zip strand2 filter (pair => pair._1 != pair._2) length\n  }\n}	\N	\N	0	1	2014-06-21 03:10:46	2014-06-21 03:10:46	37	hamming.scala
86	37	23e4cd9ecf0a203e808b5084	done	scala	hamming	object Hamming {\n  def compute(strand1: String, strand2: String): Int = {\n    strand1 zip strand2 count (pair => pair._1 != pair._2)\n  }\n}	2014-06-29 14:09:50	\N	0	2	2014-06-21 19:29:54	2014-06-21 19:29:54	37	hamming.scala
87	39	13efb9f4cd023ed678ca0d76	pending	elixir	space-age	defmodule SpaceAge do\n  planets = [   "earth",  "mercury",  "venus",    "mars",\n              "jupiter",  "saturn",  "uranus", "neptune", ]\n\n  earth_year = 31557600\n  earth_year_fraction = [ 1.0,       0.2408467,   0.61519726,   1.8808158,\n                         11.862615, 29.447498,   84.016846,   164.79132, ]\n\n  Enum.each(Enum.zip(planets, earth_year_fraction), fn {planet, fraction} ->\n    planet_year_seconds = fraction * earth_year\n    planet_year = binary_to_atom "#{planet}_years"\n    def unquote(planet_year)(seconds) do\n      seconds / unquote(planet_year_seconds)\n    end\n  end)\nend	\N	\N	0	1	2014-05-24 15:46:28	2014-05-24 15:46:28	38	space-age.exs
88	43	2a07fdcd0f876e520463508e	done	ruby	leap	class Year\n  def self.leap?(year)\n    return false unless divisible_by?(year, 4)\n\n    is_century_but_not_fourth?(year) ? false : true\n  end\n\n  private\n  def self.divisible_by?(number, numerator)\n    number % numerator == 0\n  end\n\n  def self.is_century_but_not_fourth?(year)\n    divisible_by?(year, 100) && !divisible_by?(year, 400)\n  end\nend	2014-05-24 13:38:50	\N	0	1	2014-05-24 00:08:11	2014-05-24 00:08:11	39	year.rb
89	43	835aff906ad033f0fae04697	pending	haskell	meetup	module Meetup (\r\n  Weekday(..)\r\n, Schedule(..)\r\n, meetupDay\r\n)  where\r\n\r\nimport           Data.Time.Calendar (fromGregorian)\r\n\r\n\r\ndata Weekday = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday deriving (Show, Ord, Eq)\r\n\r\n\r\ndata Schedule = Teenth | First | Second | Third | Fourth | Last deriving (Show, Ord, Eq)\r\n\r\nmeetupDay :: Schedule -> Weekday -> Integer -> Integer\r\nmeetupDay = undefined\r	\N	\N	0	1	2014-04-17 03:38:24	2014-04-17 03:38:24	40	Meetup.hs
94	47	1c9bcdaba72413e74e1f59c4	done	javascript	word-count	module.exports = function wordFrequencies(phrase) {\n  var words = phrase.toLowerCase().match(/\\w+/g);\n  return words.reduce(function (frequencies, word) {\n    frequencies[word] = (frequencies[word] || 0) + 1;\n    return frequencies;\n  }, {});\n}	2014-07-04 13:38:26	\N	0	3	2014-06-23 14:10:29	2014-06-23 14:10:29	43	word-count.js
95	47	72df37a23ed6aebfc71e8ef3	superseded	javascript	word-count	module.exports = function words(phrase) {\n  var counts = {};\n  var wordPattern = /[\\w']+/g;\n  var match;\n  while(match = wordPattern.exec(phrase)) {\n    var word = match[0].toLowerCase();\n    if (!counts[word]) { counts[word] = 0; }\n    counts[word] += 1;\n  }\n  return counts;\n}	\N	\N	0	1	2014-07-03 10:54:38	2014-07-03 10:54:38	43	word-count.js
96	47	d9119a4f3bc75cce1b1d85e1	superseded	javascript	word-count	module.exports = function wordFrequencies(phrase) {\n  return phrase   .\n    toLowerCase() .\n    match(/\\w+/g) .\n    reduce(function(counts, word) {\n      counts[word] = (counts[word] || 0) + 1;\n      return counts;\n    },{});\n}	\N	\N	0	2	2014-07-06 21:33:09	2014-07-06 21:33:09	43	word-count.js
97	47	6ef6bea028a5922153290448	done	ruby	phone-number	class PhoneNumber\n\tdef initialize( phone_number )\n\t\t@phone_number = phone_number.gsub( /\\D/, '' )\n\t\tverify_format if @phone_number.length != 10\n\tend\n\n\tdef verify_format\n\t\tif @phone_number.start_with?( '1' ) && @phone_number.length == 11\n\t\t\t@phone_number[0] = ''\n\t\telse\n\t\t\t@phone_number = '0000000000'\n\t\tend\n\tend\n\n\tdef number\n\t\t@phone_number\n\tend\n\n\tdef area_code\n\t\t@phone_number[0..2]\n\tend\n\n\tdef to_s\n\t\t"(#{@phone_number[0..2]}) #{@phone_number[3..5]}-#{@phone_number[6..9]}"\n\tend\nend	2014-07-01 23:52:14	\N	0	1	2014-06-20 20:14:15	2014-06-20 20:14:15	44	phone-number.rb
98	47	1a4b508a4d86b7e534742d24	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.select do |candidate|\n      word != candidate.downcase &&\n        word_distribution == distribution_for(candidate)\n    end\n  end\n\n  private\n\n  def word_distribution\n    @word_distribution ||= distribution_for(word)\n  end\n\n  def distribution_for(word)\n    word.downcase.chars.each_with_object(Hash.new(0)) do |c, result|\n      result[c] += 1\n    end\n  end\nend	2014-07-10 22:44:15	\N	0	1	2014-07-05 23:42:29	2014-07-05 23:42:29	45	anagram.rb
99	47	1f1b3f57413ec6416b1e384b	pending	coffeescript	bob	class Bob\n  hey: (words) ->\n    if /^\\s*$/.test words\n      'Fine. Be that way!'\n    else if /^[A-Z 0-9,%@#$!(*^]+[!?]?$/.test words\n      'Woah, chill out!'\n    else if /\\?$/.test words\n      'Sure.'\n    else\n      'Whatever.'\n\nmodule.exports = Bob	\N	\N	0	1	2014-07-05 05:39:28	2014-07-05 05:39:28	46	bob.coffee
100	48	97fb15239051389758f7d8e5	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance x y = length . (filter id) $ zipWith (/=) x y	\N	\N	0	2	2014-05-04 20:40:03	2014-05-04 20:40:03	47	point-mutations.hs
101	48	b2788aecc41241ce4a0e5900	pending	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance = (truths .) . zipWith (/=)\n  where truths = length . filter id	\N	\N	0	3	2014-06-01 15:21:02	2014-06-01 15:21:02	47	point-mutations.hs
102	48	be0bbc84a794ffbee1d7e4b4	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance [] _ = 0\nhammingDistance _ [] = 0\nhammingDistance (x:xs) (y:ys) = unequal x y + hammingDistance xs ys\n  where unequal x y\n          | x == y    = 0\n          | otherwise = 1	\N	\N	0	1	2014-07-17 07:56:51	2014-07-17 07:56:51	47	point-mutations.hs
103	48	969a7c89109d68a7706abc9b	pending	clojure	kindergarten-garden	(require '[clojure.string :as str])\n\n(def char->veggie\n  {\\G :grass, \\C :clover, \\R :radishes, \\V :violets})\n\n(def default-children\n  ["Alice" "Bob" "Charlie" "David" "Eve" "Fred" "Ginny" "Harriet" "Ileana" "Joseph" "Kincaid" "Larry"])\n\n(defn- into-keywords\n  "Convert a list of strings to keywords."\n  [names]\n  (map #(keyword (str/lower-case %)) names))\n\n(defn- into-lines\n  "Break the garden string into individual lines."\n  [string]\n  (str/split string #"\\n"))\n\n(defn- string->veggies\n  "Convert a string of veggie characters into a list of veggie symbols."\n  [string]\n  (into [] (map char->veggie string)))\n\n(defn- first-two-chars\n  "Get the first two characters of string."\n  [string]\n  (apply str (take 2 string)))\n\n(defn- pull-two-chars-from-each\n  "Return a string of the first two characters from both a and b."\n  [a b]\n  (str (first-two-chars a) (first-two-chars b)))\n\n(defn- regroup\n  "Regroup the two lines into quads of veggie characters."\n  [[a b]]\n  (loop [result []  a a  b b]\n    (if (empty? a) result\n        (recur (conj result (pull-two-chars-from-each a b))\n               (drop 2 a)\n               (drop 2 b)))))\n\n(defn- parse-garden\n  "Parse the garden string to a list of veggie lists."\n  [string]\n  (map string->veggies (regroup (into-lines string))))\n\n(defn garden\n  "Return a garden map for the garden string."\n  ([string]\n     (garden string default-children))\n  ([string children]\n     (into {}\n           (map #(vector %1 %2)\n                (into-keywords (sort-by identity children))\n                (parse-garden string)))))	\N	\N	0	1	2014-06-06 10:55:57	2014-06-06 10:55:57	48	garden.clj
104	48	5f3c2c6a17e1218ad66ef81b	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n}	\N	\N	0	1	2014-04-11 12:16:27	2014-04-11 12:16:27	49	leap.go
105	48	9cc8866b43f2e10f5147b101	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%100 != 0 || year%400 == 0)\n}	\N	\N	0	2	2014-05-30 20:08:14	2014-05-30 20:08:14	49	leap.go
106	48	3cd8aea8d64cc3d3b89b38f2	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isAlpha, isSpace, toUpper)\n\nresponseFor :: String -> String\nresponseFor s\n  | silence s = "Fine. Be that way!"\n  | yell s = "Woah, chill out!"\n  | question s = "Sure."\n  | otherwise = "Whatever."\n\nsilence :: String -> Bool\nsilence = all isSpace\n\nyell :: String -> Bool\nyell s = anyAlpha && allCaps\n  where\n    anyAlpha = any isAlpha s\n    allCaps = all (\\x -> x == toUpper x) s\n\nquestion :: String -> Bool\nquestion s = last s == '?'	\N	\N	0	1	2014-04-27 09:54:13	2014-04-27 09:54:13	50	Bob.hs
107	48	33669d434ddde19e39ad2d76	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isAlpha, isLower, isSpace)\n\nresponseFor :: String -> String\nresponseFor s\n  | silence s = "Fine. Be that way!"\n  | yell s = "Woah, chill out!"\n  | question s = "Sure."\n  | otherwise = "Whatever."\n\nsilence :: String -> Bool\nsilence = all isSpace\n\nyell :: String -> Bool\nyell s = anyAlpha && noneLower\n  where\n    anyAlpha = any isAlpha s\n    noneLower = not (any isLower s)\n\nquestion :: String -> Bool\nquestion s = last s == '?'	\N	\N	0	2	2014-05-11 05:26:48	2014-05-11 05:26:48	50	Bob.hs
108	48	4923e0e33a2ee6e8cf4cbed1	pending	python	beer-song	class Beer:\n    def verse(self, n):\n        return '''{0} of beer on the wall, {1} of beer.\n{2} {3} of beer on the wall.\n'''.format(self.bottles(n).capitalize(),\n           self.bottles(n),\n           self.bridge(n),\n           self.bottles(n-1))\n\n    def sing(self, a, b=0):\n        s = ""\n        for i in reversed(range(b, a+1)):\n            s += self.verse(i) + "\\n"\n        return s\n\n    def bottles(self, n):\n        if   n == -1: return "99 bottles"\n        elif n ==  0: return "no more bottles"\n        elif n ==  1: return "1 bottle"\n        else:         return "{0} bottles".format(n)\n\n    def bridge(self, n):\n        if   n == 0:  return "Go to the store and buy some more,"\n        elif n == 1:  return "Take it down and pass it around,"\n        else:         return "Take one down and pass it around,"	\N	\N	0	1	2014-05-02 08:26:15	2014-05-02 08:26:15	51	beer-song.py
109	48	fc02d89df493bb9a1d78ca90	superseded	ruby	rna-transcription	class Complement\n\n  def self.of_dna(a)\n    transcribed = ""\n    aa = a.split(//)\n\n    aa.each { |val|\n      transcribed += case\n                  when val == 'G'\n                    'C'\n                  when val == 'C'\n                    'G'\n                  when val == 'T'\n                    'A'\n                  when val == 'A'\n                    'U'\n                  end\n    }\n\n    return transcribed\n\n  end\n\n  def self.of_rna(a)\n    transcribed = ""\n    aa = a.split(//)\n\n    aa.each { |val|\n      transcribed += case\n                  when val == 'G'\n                    'C'\n                  when val == 'C'\n                    'G'\n                  when val == 'A'\n                    'T'\n                  when val == 'U'\n                    'A'\n                  end\n    }\n\n    return transcribed\n\n  end\n\nend	\N	\N	0	1	2014-05-18 21:21:51	2014-05-18 21:21:51	52	complement.rb
112	48	6da8f344b2b2523fb69f535a	superseded	ruby	bob	class Bob\n\n  def hey(received_message)\n    @message = Message.new(received_message)\n\n    if @message.silent?\n      "Fine. Be that way!"\n    elsif @message.shouting?\n      "Woah, chill out!"\n    elsif @message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend\n\nclass Message\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def silent?\n    @phrase.strip.empty?\n  end\n\n  def shouting?\n    @phrase.upcase == @phrase\n  end\n\n  def question?\n    @phrase.end_with?("?")\n  end\n\nend	\N	\N	0	2	2014-06-04 09:50:05	2014-06-04 09:50:05	53	bob.rb
113	48	3d68722d0cfcea9876892824	pending	ruby	bob	class Bob\n\n  def hey(received_message)\n    message = Message.new(received_message)\n\n    if message.silent?\n      "Fine. Be that way!"\n    elsif message.shouting?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend\n\nclass Message\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def silent?\n    @phrase.strip.empty?\n  end\n\n  def shouting?\n    @phrase.upcase == @phrase\n  end\n\n  def question?\n    @phrase.end_with?("?")\n  end\n\nend	\N	\N	0	3	2014-06-21 03:03:55	2014-06-21 03:03:55	53	bob.rb
114	48	b3097bfcdd244d2439e9a267	pending	javascript	circular-buffer	// I didn't know how to do this. Moving on....	\N	\N	0	1	2014-05-03 07:10:42	2014-05-03 07:10:42	54	circular-buffer.js
115	48	2c4f2e6c6cbbc4a5415c5944	superseded	javascript	etl	(function(){\n  'use strict';\n\n  var ETL = {};\n\n  ETL.transform = function(inputObject) {\n    var transformed = {};\n    for (var prop in inputObject) {\n      for (var key in inputObject[prop]) {\n        transformed[inputObject[prop][key].toLowerCase()] = parseInt(prop);\n      };\n    }\n    return transformed;\n  };\n\n  module.exports = ETL;\n})();	\N	\N	0	1	2014-04-13 19:49:40	2014-04-13 19:49:40	55	transform.js
116	48	962ff4122bd5940b234b5241	superseded	javascript	etl	(function(){\n  'use strict';\n\n  module.exports  = {\n    transform: function(scoreCard) {\n      return Object.keys(scoreCard).reduce(function(output, score) {\n        scoreCard[score].forEach(function(word) {\n          output[word.toLowerCase()] = Number(score);\n        });\n        return output;\n      }, {});\n    }\n  };\n})();	\N	\N	0	4	2014-04-19 04:57:11	2014-04-19 04:57:11	55	transform.js
117	48	6c3b62c4c49eb5442d579f6b	superseded	javascript	etl	(function(){\n  'use strict';\n\n  var ETL = function(rack) {\n    var letterScores = {};\n\n    for (var score in rack) {\n      rack[score].forEach(function(letter) {\n        letterScores[letter.toLowerCase()] = parseInt(score);\n      });\n    }\n\n    return letterScores;\n  };\n\n  module.exports = ETL;\n})();	\N	\N	0	2	2014-04-24 01:14:10	2014-04-24 01:14:10	55	etl.js
118	48	ee5ecfcb35fb6c66fc66cee5	superseded	javascript	etl	(function(){\n  'use strict';\n\n  var ETL = {};\n\n  ETL.transform = function(inputObject) {\n    var transformed = {};\n    for (var prop in inputObject) {\n      for (var key in inputObject[prop]) {\n        transformed[inputObject[prop][key].toLowerCase()] = Number(prop);\n      };\n    }\n    return transformed;\n  };\n\n  module.exports = ETL;\n})();	\N	\N	0	3	2014-04-26 11:59:48	2014-04-26 11:59:48	55	transform.js
119	48	f99fce5357310929fc021dd4	pending	javascript	etl	(function(){\n  'use strict';\n\n  module.exports = {\n    transform: function(oldScores) {\n      return Object.keys(oldScores).reduce(function(newScores, score) {\n        oldScores[score].forEach(function(word) {\n          newScores[word.toLowerCase()] = Number(score);\n        });\n        return newScores;\n      }, {});\n    }\n  };\n})();	\N	\N	0	5	2014-06-13 15:53:07	2014-06-13 15:53:07	55	transform.js
120	48	70759cf04bc17fad19c9ff84	pending	ruby	hamming	class DNA\n\tattr_reader :dna\n\t\n\tdef initialize(dna)\n\t\t@dna = dna\n\tend\n\n\tdef hamming_distance(strand)\n\t\tmin_length = [@dna.length, strand.length].min\n\t\t(0...min_length).each_with_object([]) { |i, indexes| indexes << i if mutation?(@dna[i], strand[i]) }.count\n\tend\n\n\tprivate\n\t\tdef mutation?(a, b)\n\t\t\ta != b\n\t\tend\nend	\N	\N	0	1	2014-06-17 12:42:50	2014-06-17 12:42:50	56	point-mutations.rb
121	48	05516bb0f21682d177b3544a	superseded	javascript	meetup	var Meetup = function(month, year) {\n  this.findTeenthday = function(day) {\n    for (var i= 13; i < 20; i++) {\n      var date = new Date(year, month, i);\n      if (date.getUTCDay() == day) {\n       return date;\n      }\n    }\n} \n  \n  this.monteenth = function() {\n    return this.findTeenthday(1);\n  }  \n\n  this.tuesteenth = function() {\n    return this.findTeenthday(2);\n  }\n  \n  this.wednesteenth = function() {\n    return this.findTeenthday(3);\n  }\n\t\n  this.thursteenth = function() {\n    return this.findTeenthday(4);\n  }\n\n  this.friteenth = function() {\n    return this.findTeenthday(5);\n  }\n\n  this.saturteenth = function() {\n    return this.findTeenthday(6);\n  }\n\t\n  this.sunteenth = function() {\n    return this.findTeenthday(7);\n  }\n};\n  \nmodule.exports = Meetup;	\N	\N	0	1	2014-05-02 17:44:16	2014-05-02 17:44:16	57	meetup.js
122	48	00195fad32fe1b8ace5f5ee2	pending	javascript	meetup	var Meetup = function(month, year) {\n  this.findTeenthday = function(day) {\n    for (var i= 13; i < 20; i++) {\n      var date = new Date(year, month, i);\n      if (date.getUTCDay() === day) {\n       return date;\n      }\n    }\n\t} \n  \n  this.monteenth = function() {\n    return this.findTeenthday(1);\n  }  \n\n  this.tuesteenth = function() {\n    return this.findTeenthday(2);\n  }\n  \n  this.wednesteenth = function() {\n    return this.findTeenthday(3);\n  }\n\t\n  this.thursteenth = function() {\n    return this.findTeenthday(4);\n  }\n\n  this.friteenth = function() {\n    return this.findTeenthday(5);\n  }\n\n  this.saturteenth = function() {\n    return this.findTeenthday(6);\n  }\n\t\n  this.sunteenth = function() {\n    return this.findTeenthday(7);\n  }\n};\n  \nmodule.exports = Meetup;	\N	\N	0	2	2014-05-11 00:25:22	2014-05-11 00:25:22	57	meetup.js
123	48	8109c769aff7aa97c965b2b2	pending	haskell	phone-number	module Phone(\n            areaCode\n          , prettyPrint\n          , number\n          ) where\n\nimport Data.Char (isDigit)\n\ndefaultNumber = "0000000000"\n\nareaCode :: String -> String\nareaCode = take 3\n\nprettyPrint :: String -> String\nprettyPrint x = "(" ++ code ++ ") " ++ rest1 ++ "-" ++ rest2\n        where digits         = if length x == 11 then tail x else x\n              (code, rest)   = splitAt 3 digits\n              (rest1, rest2) = splitAt 3 rest\n\nnumber :: String -> String\nnumber x = case isValid x of\n           Just d  -> d\n           Nothing -> defaultNumber\n     where y = isValid x\n\nisValid :: String -> Maybe String\nisValid x = case length digits of\n                11 -> if head digits == '1'\n                      then Just $ tail digits\n                      else Nothing\n                10 -> Just digits\n                _  -> Nothing\n        where digits = filter isDigit x	\N	\N	0	1	2014-05-21 06:31:54	2014-05-21 06:31:54	58	Phone.hs
124	48	e44c83df05825ad94594e2b6	pending	ruby	grains	class Grains\n\n\tdef square(num)\n\t\t2**(num-1)\n\tend\n\n\tdef total\n\t\tsquare(65) - 1\n\tend\n\nend	\N	\N	0	1	2014-06-24 04:44:25	2014-06-24 04:44:25	59	grains.rb
125	48	3eaeafaec928938519c3550e	pending	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize word\n    @word = word.downcase\n  end\n\n  def match candidates\n    candidates.select do |candidate|\n      matches? Anagram.new candidate\n    end\n  end\n\n  def matches? other\n    self.letters == other.letters and\n      self.word != other.word\n  end\n\n  def letters\n    @letters ||= word.chars.sort\n  end\nend	\N	\N	0	2	2014-05-17 13:34:41	2014-05-17 13:34:41	60	anagram.rb
131	48	5b5a3f18acbd7c34fc07de02	superseded	elixir	anagram	defmodule Anagram do\n\tdef match(baseword, potentials) do\n\t\tEnum.filter(potentials, match_anagram(baseword, &1))\n\tend\n\t\n\tdefp match_anagram(baseword, potential) do\n\t\tsorted_letters_of(baseword) == sorted_letters_of(potential)\n\tend\n\t\n\tdefp sorted_letters_of(word) do\n\t\tword |>\n\t\t String.to_char_list! |>\n\t\t Enum.sort\n\tend\nend	\N	\N	0	4	2014-07-07 20:36:06	2014-07-07 20:36:06	61	anagram.exs
132	48	3444a3960d7612a87d8d229b	pending	go	binary	package binary\n\nfunc validDigit(digit string) bool {\n\treturn digit == "1" || digit == "0"\n}\n\nfunc ToDecimal(binaryNumber string) int {\n\tdecimal := 0\n\tindex := len(binaryNumber) - 1\n\tfor power := 1; 0 <= index; index, power = index-1, 2*power {\n\t\tbinaryDigit := string(binaryNumber[index])\n\t\tif validDigit(binaryDigit) {\n\t\t\tif binaryDigit == "1" {\n\t\t\t\tdecimal += power\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\treturn decimal\n}	\N	\N	0	1	2014-04-21 06:50:57	2014-04-21 06:50:57	62	binary.go
133	48	9f6354081ec70218f9a7ffd2	superseded	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(argDate)\n    @start = argDate\n    return date\n  end\n\n  def date\n    gs = 10**9\n    min = 60\n    hr = 60\n    day = 24\n\n    days = gs/(min*hr*day)\n\n    giga_date = @start + days\n  end\n\nend\n\n# Gigasecond.new(Date.new(2011, 4, 25))	\N	\N	0	1	2014-04-13 07:26:16	2014-04-13 07:26:16	63	gigasecond.rb
134	48	f4d852cac9b32010c68c6ffc	superseded	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    gs = 10**9\n    min = 60\n    hr = 60\n    day = 24\n\n    days = gs/(min*hr*day)\n\n    @birth_date + days\n  end\n\nend	\N	\N	0	2	2014-06-01 04:37:02	2014-06-01 04:37:02	63	gigasecond.rb
135	48	9643f6db21a86ac66070a084	pending	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    (@birth_date.to_time + (10**9)).to_date\n  end\n\nend	\N	\N	0	3	2014-06-09 03:22:18	2014-06-09 03:22:18	63	gigasecond.rb
136	48	4d714bc91507f27e32dca75e	pending	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar (Day,fromGregorian)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday = Monday \n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday\n             deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Teenth\n              | Last \n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay s w y m = fromGregorian y m dm where\n    dm = case s of\n           First  -> d\n           Second -> d+7\n           Third  -> d+14\n           Fourth -> d+21\n           Teenth -> head [d | d <- ds, d > 12]\n           Last   -> last ds\n    ds = [x | x <- [1..31], \n          let (_,_,w') = toWeekDate (fromGregorian y m x),\n          w' == 1 + fromEnum w]\n    d  = head ds	\N	\N	0	1	2014-04-16 18:55:13	2014-04-16 18:55:13	64	meetup.hs
137	48	c46f94e64e1cbf2634d1f287	pending	ruby	space-age	require 'mathn'\n\nclass SpaceAge\n  attr_reader :seconds\n\n  def on_earth\n    age_by_earth_seconds.round(2)\n  end\n\n  def on_mercury\n    get_planetary_age(24.08467)\n  end\n\n  def on_venus\n    get_planetary_age(61.519726)\n  end\n\n  def on_mars\n    get_planetary_age(188.08158)\n  end\n\n  def on_jupiter\n    get_planetary_age(1186.2615)\n  end\n\n  def on_saturn\n    get_planetary_age(2944.7498)\n  end\n\n  def on_uranus\n    get_planetary_age(8401.6846)\n  end\n\n  def on_neptune\n    get_planetary_age(16479.132)\n  end\n\nprivate\n\n  def initialize(age)\n    @seconds = age\n  end\n\n  def age_by_earth_seconds\n    Rational(seconds / 31557600)\n  end\n\n  def get_planetary_age(orbital_period)\n    ans = age_by_earth_seconds / fractionize(orbital_period)\n    ans.round(2)\n  end\n\n  def fractionize(n)\n    Rational(n/100)\n  end\nend	\N	\N	0	1	2014-04-17 08:35:28	2014-04-17 08:35:28	65	space-age.rb
138	48	9c620c8d5ac3827164eeaf4f	superseded	python	bob	class Bob:\n  def hey(self, msg):\n    if self.is_silent(msg):\n      return 'Fine. Be that way!'\n    elif self.is_shouted(msg):\n      return 'Woah, chill out!'\n    elif self.is_question(msg):\n      return 'Sure.'\n    else:\n      return 'Whatever.'\n\n  def is_question(self, msg):\n    return msg[-1] == '?'\n\n  def is_shouted(self, msg):\n    return msg.upper() == msg\n\n  def is_silent(self, msg):\n    if msg == None:\n      return True\n    else:\n      return msg.strip() == ""	\N	\N	0	1	2014-05-03 09:04:16	2014-05-03 09:04:16	66	bob.py
139	48	322d17b6077c10815173e6bf	pending	python	bob	def is_empty(msg):\n  return not msg or not msg.strip()\n\ndef is_shouted(msg):\n  return msg.isupper()\n\ndef is_question(msg):\n  return msg.endswith('?')\n\nclass Bob:\n  def hey(self, msg):\n    if is_empty(msg):\n      return 'Fine. Be that way!'\n    elif is_shouted(msg):\n      return 'Woah, chill out!'\n    elif is_question(msg):\n      return 'Sure.'\n    return 'Whatever.'	\N	\N	0	3	2014-06-11 22:10:21	2014-06-11 22:10:21	66	bob.py
140	48	3b8d711e860424602dd2568c	superseded	python	bob	def is_empty(msg):\n  return not msg or not msg.strip()\n\ndef is_shouted(msg):\n  return msg.upper() == msg\n\ndef is_question(msg):\n  return msg.endswith('?')\n\nclass Bob:\n  def hey(self, msg):\n    if is_empty(msg):\n      return 'Fine. Be that way!'\n    elif is_shouted(msg):\n      return 'Woah, chill out!'\n    elif is_question(msg):\n      return 'Sure.'\n    return 'Whatever.'	\N	\N	0	2	2014-06-30 01:51:39	2014-06-30 01:51:39	66	bob.py
141	48	fad05de0e58881ede4899769	pending	haskell	nucleotide-count	module DNA \n( count\n, nucleotideCounts\n) where\n\nimport qualified Data.Map as M\nimport Control.Exception\n\n\nnucleotideCounts :: String -> M.Map Char Int\nnucleotideCounts = foldr (\\x acc -> M.adjust (+1) x acc)\n                         $ M.fromList [('A', 0), ('T', 0), ('C', 0), ('G', 0)]\n\n\ncount :: Char -> String -> Int\ncount 'U' _      = 0\ncount letter txt = case M.lookup letter $ nucleotideCounts txt of\n    Just x  -> x\n    Nothing -> throw (ErrorCall $ "invalid nucleotide " ++ (show letter))	\N	\N	0	1	2014-04-26 03:46:15	2014-04-26 03:46:15	67	DNA.hs
142	48	cb74f736c010436d938695f9	pending	python	anagram	class Anagram(object):\n  def __init__(self, word):\n    self.word = word\n    self.compressed = Anagram._compress(self.word)\n\n  def match(self, candidates):\n    matches = []\n    for c in candidates:\n      if self._matches_word(c):\n        matches.append(c)\n    return matches\n\n  def _matches_word(self, c):\n    return self.compressed == Anagram._compress(c) and c != self.word\n\n  @staticmethod\n  def _compress(word):\n    return ''.join(sorted(word.lower()))	\N	\N	0	1	2014-07-05 20:29:29	2014-07-05 20:29:29	68	anagram.py
153	25	410f46cfe8c8e0316693c2f2	superseded	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(sequence)\n    calculate_distance_between coupled_nucleoties(sequence)\n  end\n\n  private\n\n  def coupled_nucleotides(sequence)\n    @strand.chars.zip(sequence.chars)\n  end\n\n  def calculate_distance_between(nucleotide_pairings)\n    nucleotide_pairings.inject(0) do |sum, pair|\n      increment_distance?(pair) ? sum + 1 : sum\n    end\n  end\n\n  def increment_distance?(pair)\n    valid_pair?(pair) && substitution_required?(pair)\n  end\n\n  def valid_pair?(pair)\n    !pair[0].nil? && !pair[1].nil?\n  end\n\n  def substitution_required?(pair)\n    pair[0] != pair[1]\n  end\n\nend	\N	\N	0	4	2014-07-17 23:08:02	2014-07-17 23:08:02	73	point-mutations.rb
143	48	437ad5a1851d56f084d42404	pending	go	bob	package bob\n\nimport (\n\t"strings"\n)\n\n// isShouting returns true if there are letters, all of which are uppercase\nfunc isShouting(s string) bool {\n\tletters := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"\n\tif strings.ContainsAny(s, letters) && s == strings.ToUpper(s) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// isSilence returns true if s only has whitespace\nfunc isSilence(s string) bool {\n\tif strings.TrimSpace(s) == "" {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// isQuestion returns true if the statement ends with a ?\nfunc isQuestion(s string) bool {\n\tif s[len(s)-1] == '?' {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// Hey returns a comment from a sullen teenager named Bob\n//   He answers 'Woah, chill out!' if you yell at him.\n//   Bob answers 'Sure.' if you ask him a question.\n//   He says 'Fine. Be that way!' if you address him without actually saying anything.\n//   He answers 'Whatever.' to anything else.\nfunc Hey(s string) string {\n\tswitch {\n\tcase isSilence(s):\n\t\treturn "Fine. Be that way!"\n\tcase isShouting(s):\n\t\treturn "Woah, chill out!"\n\tcase isQuestion(s):\n\t\treturn "Sure."\n\t}\n\treturn "Whatever."\n}	\N	\N	0	1	2014-07-17 16:58:01	2014-07-17 16:58:01	69	bob.go
144	48	c649a47cd517c8cc1d39ac91	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word.downcase] += 1\n    end\n  end\n\nprivate\n  def words\n    phrase.scan(/[A-Za-z0-9']+/)\n  end\nend	\N	\N	0	1	2014-05-17 18:30:20	2014-05-17 18:30:20	70	phrase.rb
145	48	d8f2400946b65b7bba505537	pending	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word.downcase] += 1\n    end\n  end\n\nprivate\n  def words\n    phrase.scan(/[\\w']+/)\n  end\nend	\N	\N	0	2	2014-06-21 11:06:36	2014-06-21 11:06:36	70	phrase.rb
146	48	86eb054092cdd6bf076c18a7	pending	python	sum-of-multiples	class SumOfMultiples(object):\n    def __init__(self, *mults):\n        if not mults:\n            mults = (3, 5)\n        self.mults = mults\n\n    def to(self, up):\n        return sum(n for n in xrange(up) if any(n % i == 0 for i in self.mults))	\N	\N	0	1	2014-07-18 14:43:52	2014-07-18 14:43:52	71	sum_of_multiples.py
147	25	237827b8e14d114acdcfa6a1	superseded	haskell	ocr-numbers	module OCR\n(convert)\nwhere\n\nimport           Data.List (transpose, intercalate)\nimport           Data.List.Split (chunksOf)\nimport qualified Data.Map.Strict as M\n\ntype Tile = String\ntype Digit = Char\n\nconvert :: String -> String\nconvert = intercalate "," \n        . map (map convertTile) \n        . tiles\n    where \n        convertTile t = M.findWithDefault '?' t lookupTable\n\ntiles :: String -> [[Tile]]\ntiles = map toTiles \n      . chunksOf 4 \n      . lines\n    where \n        toTiles = map (unlines . transpose) . chunksOf 3 . transpose\n\nlookupTable :: M.Map Tile Digit\nlookupTable = M.fromList [ (tile0, '0')\n                         , (tile1, '1')\n                         , (tile2, '2')\n                         , (tile3, '3')\n                         , (tile4, '4')\n                         , (tile5, '5')\n                         , (tile6, '6')\n                         , (tile7, '7')\n                         , (tile8, '8')\n                         , (tile9, '9')\n                         ]\n\ntile0, tile1, tile2, tile3, tile4, tile5, tile6, tile7, tile8, tile9 :: Tile\n\ntile0 = unlines [ " _ "\n                , "| |"\n                , "|_|"\n                , "   " ]\n\ntile1 = unlines [ "   "\n                , "  |"\n                , "  |"\n                , "   "]\n\ntile2 = unlines [ " _ "\n                , " _|"\n                , "|_ "\n                , "   "]\n\ntile3 = unlines [ " _ "\n                , " _|"\n                , " _|"\n                , "   " ]\n\ntile4 = unlines [ "   "\n                , "|_|"\n                , "  |"\n                , "   " ]\n\ntile5 = unlines [ " _ "\n                , "|_ "\n                , " _|"\n                , "   " ]\n\ntile6 = unlines [ " _ "\n                , "|_ "\n                , "|_|"\n                , "   "]\n\ntile7 = unlines [ " _ "\n                , "  |"\n                , "  |"\n                , "   " ]\n\ntile8 = unlines [ " _ "\n                , "|_|"\n                , "|_|"\n                , "   " ]\n\ntile9 = unlines [ " _ "\n                , "|_|"\n                , " _|"\n                , "   "]	\N	\N	0	1	2014-06-29 19:03:06	2014-06-29 19:03:06	72	OCR.hs
148	25	c12124075201c6bdcc9c4c54	pending	haskell	ocr-numbers	module OCR\n(convert)\nwhere\n\nimport           Data.List (transpose, intercalate)\nimport           Data.List.Split (chunksOf)\nimport qualified Data.Map.Strict as M\n\ntype Document = String\ntype Tile = String\ntype Digit = Char\n\nconvert :: Document -> String\nconvert = intercalate "," \n        . map (map convertTile) \n        . tilesFromDoc\n    where \n        convertTile t = M.findWithDefault '?' t lookupTable\n\ntilesFromDoc :: Document -> [[Tile]]\ntilesFromDoc = map toTiles \n             . chunksOf tileHeight\n             . lines\n    where \n        toTiles = map (unlines . transpose) . chunksOf tileWidth . transpose\n        tileWidth = 3\n        tileHeight = 4\n\nlookupTable :: M.Map Tile Digit\nlookupTable = M.fromList $ zip tiles ['0'..]\n\ntiles :: [Tile]\ntiles = map unlines \n            [ [ " _ "\n              , "| |"\n              , "|_|"\n              , "   " \n              ]\n            , [ "   "\n              , "  |"\n              , "  |"\n              , "   " \n              ]\n            , [ " _ "\n              , " _|"\n              , "|_ "\n              , "   "\n              ]\n            , [ " _ "\n              , " _|"\n              , " _|"\n              , "   " \n              ]\n            , [ "   "\n              , "|_|"\n              , "  |"\n              , "   " \n              ]\n            , [ " _ "\n              , "|_ "\n              , " _|"\n              , "   " \n              ]\n            , [ " _ "\n              , "|_ "\n              , "|_|"\n              , "   "\n              ]\n            , [ " _ "\n              , "  |"\n              , "  |"\n              , "   " \n              ]\n            , [ " _ "\n              , "|_|"\n              , "|_|"\n              , "   " \n              ]\n            , [ " _ "\n              , "|_|"\n              , " _|"\n              , "   "\n              ]\n            ]	\N	\N	0	2	2014-07-04 20:26:55	2014-07-04 20:26:55	72	OCR.hs
149	25	c10d46b453c3599274061312	superseded	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(sequence)\n    calculate_distance_between coupled_nucleotides(sequence)\n  end\n\n  private\n\n  def coupled_nucleotides(sequence)\n    @strand.chars.zip(sequence.chars)\n  end\n\n  def calculate_distance_between(nucleotide_pairings)\n    nucleotide_pairings.inject(0) do |sum, pair|\n      increment_distance?(pair) ? sum + 1 : sum\n    end\n  end\n\n  def increment_distance?(pair)\n    valid_pair?(pair) && substitution_required?(pair)\n  end\n\n  def valid_pair?(pair)\n    !pair[0].nil? && !pair[1].nil?\n  end\n\n  def substitution_required?(pair)\n    pair[0] != pair[1]\n  end\n\nend	\N	\N	0	5	2014-06-28 09:13:12	2014-06-28 09:13:12	73	point-mutations.rb
150	25	83312d159e5d4f5b2e74ab8f	superseded	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(sequence)\n    calculate_distance([@strand,sequence].sort_by{|molecule|molecule.length})\n  end\n\n  private\n\n  def calculate_distance(strands)\n    count=0\n    strands[0].chars.each_index do |index|\n      if strands[0][index]!=strands[1][index]\n        count+=1\n      end\n    end\n    count\n  end\n\nend	\N	\N	0	2	2014-07-01 02:22:53	2014-07-01 02:22:53	73	point-mutations.rb
151	25	bf640d753632ca579e82d9d0	superseded	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(sequence)\n    if sequence.length < @strand.length\n      calculate_distance(sequence,@strand)\n    else\n      calculate_distance(@strand,sequence)\n    end\n  end\n\n  private\n\n  def calculate_distance(short_strand, long_strand)\n    count=0\n    short_strand.chars.each_index do |index|\n      if short_strand[index]!=long_strand[index]\n        count+=1\n      end\n    end\n    count\n  end\n\nend	\N	\N	0	1	2014-07-02 21:15:46	2014-07-02 21:15:46	73	point-mutations.rb
152	25	c9b02030ff844187008ccf5c	superseded	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(sequence)\n    calculate_distance(@strand.chars.zip(sequence.chars))\n  end\n\n  private\n\n  def calculate_distance(nucleotide_pairings)\n    nucleotide_pairings.inject(0) do |sum, pair|\n      valid_pair?(pair) && substitution_required?(pair) ? sum + 1 : sum\n    end\n  end\n\n  def valid_pair?(pair)\n    !pair[0].nil? && !pair[1].nil?\n  end\n\n  def substitution_required?(pair)\n    pair[0] != pair[1]\n  end\n\nend	\N	\N	0	3	2014-07-13 02:16:15	2014-07-13 02:16:15	73	point-mutations.rb
154	25	46816bd14971d344ef59eb1e	superseded	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(sequence)\n    zip(@strand, sequence).count{ |pair| mutation?(pair) }\n  end\n\n  private\n\n  def zip(strand_0,strand_1)\n    strand_0.chars.zip(strand_1.chars)\n  end\n\n  def mutation?(pair)\n    valid_pair?(pair) && increment?(pair)\n  end\n\n  def valid_pair?(pair)\n    pair[0] && pair[1]\n  end\n\n  def increment?(pair)\n    pair[0] != pair[1]\n  end\n\nend	\N	\N	0	6	2014-07-19 07:41:45	2014-07-19 07:41:45	73	point-mutations.rb
155	25	7fe503bb8ae2397953356624	pending	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(sequence)\n    Pairs.of(@strand, sequence).count(&:error?)\n  end\nend\n\nclass Pairs\n  class << self\n    def of(str1, str2)\n      couples(str1,str2).map{ |couple| Pair.new(couple) }\n    end\n\n    private\n\n    def couples(str1, str2)\n      str1.chars.zip(str2.chars)\n    end\n  end\nend\n\nclass Pair\n  def initialize(couple)\n    @char1, @char2 = couple[0], couple[1]\n  end\n\n  def error?\n    valid_pair? and different_nucleotides?\n  end\n\n  def valid_pair?\n    @char1 and @char2\n  end\n\n  private\n\n  def different_nucleotides?\n    @char1 != @char2\n  end\nend	\N	\N	0	7	2014-07-22 20:05:13	2014-07-22 20:05:13	73	point-mutations.rb
156	25	445c188a75d3cb8e918c0dfd	superseded	haskell	matrix	module Matrix ( Matrix\n              , row\n              , column\n              , rows\n              , cols\n              , shape\n              , transpose\n              , reshape\n              , flatten\n              , fromString\n              , fromList\n              , stride\n              , cstride\n              , rstride\n              , (!)\n              , toList\n              )\nwhere\n\nimport Data.Vector (Vector)  \nimport qualified Data.Vector as V\nimport Control.Arrow ((&&&))\n\ndata Matrix a = Matrix { content :: Vector a\n                       , rows :: Int\n                       , cols :: Int\n                       , rstride :: Int\n                       , cstride :: Int\n                       }\n              deriving (Read, Show)\n\nextractVector :: Int -> Int -> Int -> Matrix a -> Vector a\nextractVector len start stride m =\n  V.generate len (\\ i -> content m V.! (start + stride * i) )\n\nrow :: Int -> Matrix a -> Vector a\nrow n m = extractVector (cols m) (n * rstride m) (cstride m) m\n\ncolumn :: Int -> Matrix a -> Vector a\ncolumn n m = extractVector (rows m) (n * cstride m) (rstride m) m\n\nflatten :: Matrix a -> Vector a\nflatten m = V.concat [ row i m | i <- [0..pred (rows m)]]\n\nshape :: Matrix a -> (Int, Int)\nshape = rows &&& cols\n\nstride :: Matrix a -> (Int, Int)\nstride = rstride &&& cstride\n\ntranspose :: Matrix a -> Matrix a\ntranspose m = Matrix { content = content m\n                     , cols    = rows m\n                     , rows    = cols m\n                     , rstride = cstride m\n                     , cstride = rstride m }\n\nreshape :: (Int, Int) -> Matrix a -> Matrix a\nreshape (nr, nc) m = updateStrides m { cols = nc, rows = nr }\n  where updateStrides m =\n          if rstride m < cstride m then\n            m { cstride = rows m * rstride m }\n          else\n            m { rstride = cols m * cstride m }\n\nreadLine :: Read a => String -> [a]\nreadLine str =\n  case reads str of\n    [] -> []\n    (value, rest) : _ -> value : readLine rest\n\nfromString :: (Read a) => String -> Matrix a\nfromString = fromList . map readLine . lines\n\n-- | Assume well-formed list!\nfromList :: [[a]] -> Matrix a\nfromList l = Matrix { content = V.fromList $ concat l\n                    , rows = rows\n                    , cols = cols\n                    , rstride = cols\n                    , cstride = 1\n                    }\n  where\n    rows = length l\n    cols = if rows == 0 then 0 else length (head l)\n\nindex :: Matrix m -> (Int, Int) -> Int\nindex m (i,j) = rstride m * i + cstride m * j\n\ninfixl 5 !\n(!) :: Matrix a -> (Int, Int) -> a\nm ! (i,j) = content m V.! (index m (i,j))\n\nlinear :: Matrix a -> Int -> a\nlinear m idx = m ! (idx `divMod` nc)\n  where\n    nc = cols m\n\ntoList :: Matrix a -> [[a]]\ntoList m = map (\\ i -> map (\\ j -> m ! (i-1,j-1) ) [1 .. cols m]) [1 .. rows m]\n\ninstance Eq a => Eq (Matrix a) where\n  m1 == m2 =\n    if stride m1 == stride m2 then content m1 == content m2\n    else (shape m1 == shape m2) &&\n         (all id $ map (\\ i -> l1 i == l2 i) [0 .. len])\n    where\n      l1 = linear m1\n      l2 = linear m2\n      len = pred $ V.length (content m1)	\N	\N	0	1	2014-07-02 12:28:23	2014-07-02 12:28:23	74	Matrix.hs
157	25	2841f722739a517216f7ec2b	pending	haskell	matrix	module Matrix ( Matrix\n              , row\n              , column\n              , rows\n              , cols\n              , shape\n              , transpose\n              , reshape\n              , flatten\n              , fromString\n              , fromList\n              , stride\n              , cstride\n              , rstride\n              , (!)\n              , toList\n              )\nwhere\n\nimport Data.Vector (Vector)  \nimport qualified Data.Vector as V\nimport Control.Arrow ((&&&))\n\n-- | Representation of a matrix with a content, nb rows, nb columns and \n-- | stride to define how the matrix is encoded\n-- | The main advantage is the creation of views of the matrix that doesn't\n-- | require copying the data\ndata Matrix a = Matrix { content :: Vector a\n                       , rows :: Int\n                       , cols :: Int\n                       , rstride :: Int\n                       , cstride :: Int\n                       }\n              deriving (Read, Show)\n\n-- | Extract a vector from the matrix, knowing the start position,\n-- | the stride and the length\nextractVector :: Int -> Int -> Int -> Matrix a -> Vector a\nextractVector len start strid m =\n  V.generate len (\\ i -> content m V.! (start + strid * i) )\n\n-- | Extract a row of the matrix\nrow :: Int -> Matrix a -> Vector a\nrow n m = extractVector (cols m) (n * rstride m) (cstride m) m\n\n-- | Extract a column of the matrix\ncolumn :: Int -> Matrix a -> Vector a\ncolumn n m = extractVector (rows m) (n * cstride m) (rstride m) m\n\n-- | Flatten the matrix, always in row major mode\nflatten :: Matrix a -> Vector a\nflatten m = V.concat [ row i m | i <- [0..pred (rows m)]]\n\n-- | Get the shape as a pair of integer\nshape :: Matrix a -> (Int, Int)\nshape = rows &&& cols\n\n-- | Get the stride of the matrix\nstride :: Matrix a -> (Int, Int)\nstride = rstride &&& cstride\n\n-- | Transpose the matrix\n-- | Note: with this implementation, this correspond to exchanging \n-- | metadata about rows and columns\ntranspose :: Matrix a -> Matrix a\ntranspose m = Matrix { content = content m\n                     , cols    = rows m\n                     , rows    = cols m\n                     , rstride = cstride m\n                     , cstride = rstride m }\n\n-- | Change the shape of the matrix\n-- | Note: simply recalculates the strides\nreshape :: (Int, Int) -> Matrix a -> Matrix a\nreshape (nr, nc) m = updateStrides m { cols = nc, rows = nr }\n  where updateStrides mm =\n          if rstride m < cstride m then\n            mm { cstride = rows mm * rstride mm }\n          else\n            mm { rstride = cols mm * cstride mm }\n\n-- | Read a line of the matrix from a string\nreadLine :: Read a => String -> [a]\nreadLine str =\n  case reads str of\n    [] -> []\n    (value, rest) : _ -> value : readLine rest\n\n-- | Read a matrix from a string\nfromString :: (Read a) => String -> Matrix a\nfromString = fromList . map readLine . lines\n\n-- | Read a matrix from a list of lists\n-- | Assume well-formed list!\nfromList :: [[a]] -> Matrix a\nfromList l = Matrix { content = V.fromList $ concat l\n                    , rows = rws\n                    , cols = cls\n                    , rstride = cls\n                    , cstride = 1\n                    }\n  where\n    rws = length l\n    cls = if rws == 0 then 0 else length (head l)\n\n-- | Get the linear index for a 2D position\nindex :: Matrix m -> (Int, Int) -> Int\nindex m (i,j) = rstride m * i + cstride m * j\n\n-- | Define the bang operator to extract a value at a given position\ninfixl 5 !\n(!) :: Matrix a -> (Int, Int) -> a\nm ! (i,j) = content m V.! (index m (i,j))\n\n-- | Extract a value from an index given in row-major mode\n-- | That is equivalent to (flatten m) V.! m\nlinear :: Matrix a -> Int -> a\nlinear m idx = m ! (idx `divMod` nc)\n  where\n    nc = cols m\n\n-- | Return a list of list corresponding to the matrix\ntoList :: Matrix a -> [[a]]\ntoList m = map (\\ i -> map (\\ j -> m ! (i-1,j-1) ) [1 .. cols m]) [1 .. rows m]\n\n-- | Create an instance of matrices as equal\ninstance Eq a => Eq (Matrix a) where\n  m1 == m2 =\n    if stride m1 == stride m2 then content m1 == content m2\n    else (shape m1 == shape m2) &&\n         (and $ map (\\ i -> l1 i == l2 i) [0 .. len])\n    where\n      l1 = linear m1\n      l2 = linear m2\n      len = pred $ V.length (content m1)	\N	\N	0	2	2014-07-04 19:56:51	2014-07-04 19:56:51	74	Matrix.hs
158	25	396a3df7d08a2ba64ff1ddc7	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand1, strand2) do\n    # zip always returns a list the length of its first argument.\n    # If first is longer than second, then you get `nil`s for the missing\n    # values.\n    # But if first is shorter than second, then the remainder of second\n    # is truncated.\n    # We want the latter.\n    shorter = Enum.min_by([strand1, strand2], &Enum.count/1)\n    longer  = if shorter == strand1 do strand2 else strand1 end\n    Enum.zip(shorter, longer)\n    |> Enum.reject( fn\n        {_n, _n} -> true\n         _       -> false\n       end)\n    |> Enum.count\n  end\nend	\N	\N	0	1	2014-06-27 05:16:04	2014-06-27 05:16:04	75	point-mutations.exs
159	25	afd1fc93bd1b1584fe54490e	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand1, strand2) do\n    zip(strand1, strand2)\n    |> Enum.reject(&hd_eq_tl?/1)\n    |> Enum.count\n  end\n\n  defp hd_eq_tl?(tuple) do\n    elem(tuple, 0) == elem(tuple, 1)\n  end\n\n  defp zip(e1, e2) do\n    Enum.zip(e1, e2) |> Enum.reject &(elem(&1, 1) == nil)\n  end\nend	\N	\N	0	3	2014-07-05 15:43:11	2014-07-05 15:43:11	75	point-mutations.exs
160	25	eab056825ec1f2f846819fad	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand1, strand2) do\n    Enum.zip(strand1, strand2)\n    |> Enum.reject(fn\n        {_, nil} -> true  # ignore nils when strand1 is longer than strand2\n        {_n, _n} -> true\n         _       -> false\n       end)\n    |> Enum.count\n  end\nend	\N	\N	0	4	2014-07-09 06:40:43	2014-07-09 06:40:43	75	point-mutations.exs
161	25	6c41e91f2ad4a72d757646ae	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand1, strand2) do\n    Enum.zip(strand1, strand2)\n    |> Enum.reject(fn\n        {_, nil} -> true  # ignore nils when strand1 is longer than strand2\n        {_n, _n} -> true\n         _       -> false\n       end)\n    |> Enum.count\n  end\nend	\N	\N	0	2	2014-07-11 06:55:02	2014-07-11 06:55:02	75	point-mutations.exs
162	25	e6e69bc9c5f55ac89f19d2df	pending	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand1, strand2) do\n    Enum.zip(strand1, strand2)\n    |> Enum.count(&nucleotides_differ?/1)\n  end\n\n  defp nucleotides_differ?({  _a,  _a}) do false end\n  defp nucleotides_differ?({  _a, nil}) do false end\n  defp nucleotides_differ?({  _a,  _b}) do true  end\nend	\N	\N	0	5	2014-07-11 10:08:09	2014-07-11 10:08:09	75	point-mutations.exs
163	25	fb4cf282a8853f817ff24691	pending	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y\n    | y `rem` 400 == 0 = True\n    | y `rem` 100 == 0 = False\n    | y `rem` 4 == 0 = True\n    | otherwise = False	\N	\N	0	1	2014-07-03 00:44:50	2014-07-03 00:44:50	76	LeapYear.hs
164	25	30da715a03211f588d999258	superseded	ruby	bob	class Bob\n  def hey(text)\n    text.strip!\n    if text.empty?\n      "Fine. Be that way!"\n    elsif text =~ /[a-z]/i and text == text.upcase\n      "Woah, chill out!"\n    elsif text.chars.last == "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-07-04 10:40:58	2014-07-04 10:40:58	77	bob.rb
165	25	e975a360ded6e524da1d2e9d	superseded	ruby	bob	class Bob\n  def hey(text)\n    return "Fine. Be that way!" if silence? text\n    return "Woah, chill out!" if yelling? text\n    return "Sure." if question? text\n\n    "Whatever."\n  end\n\n  private\n\n  def silence?(text)\n    text.strip.empty?\n  end\n\n  def yelling?(text)\n    text =~ /[a-z]/i and text == text.upcase\n  end\n\n  def question?(text)\n    text.end_with? "?"\n  end\nend	\N	\N	0	2	2014-07-04 19:52:46	2014-07-04 19:52:46	77	bob.rb
166	25	970204d889080ade9e52ded6	pending	ruby	bob	class Bob\n  def hey(text)\n    sentence = Sentence.new(text)\n    case\n    when sentence.silence?  then "Fine. Be that way!"\n    when sentence.yell?     then "Woah, chill out!"\n    when sentence.question? then "Sure."\n    else                         "Whatever."\n    end\n  end\nend\n\nclass Sentence\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def silence?\n    text.strip.empty?\n  end\n\n  def yell?\n    text =~ /[a-z]/i and text == text.upcase\n  end\n\n  def question?\n    text.end_with? "?"\n  end\nend	\N	\N	0	3	2014-07-05 21:24:16	2014-07-05 21:24:16	77	bob.rb
167	6	13b4c6d4942a6205696ea87b	pending	haskell	phone-number	module Phone (number, areaCode, prettyPrint) where\n\nimport Data.Char\n\nnumber :: String -> String\nnumber s\n    | len == 10 = t\n    | len == 11 && head t == '1' = tail t\n    | otherwise = replicate 10 '0'\n    where t = filter isDigit s\n          len = length t\n\nareaCode :: String -> String\nareaCode = take 3 . filter isDigit\n\nprettyPrint :: String -> String\nprettyPrint s = let digits = number s\n                    (areaCode, exchangeSubscriber) = splitAt 3 digits\n                    (exchange, subscriber) = splitAt 3 exchangeSubscriber\n                in "(" ++ areaCode ++ ") " ++ exchange ++ "-" ++ subscriber	\N	\N	0	2	2014-07-18 04:54:22	2014-07-18 04:54:22	78	phone-number.hs
168	6	8a33b7ee7d4ddcac1b1c82b1	superseded	haskell	phone-number	module Phone (number, areaCode, prettyPrint) where\n\nimport Data.Char\n\nnumber :: String -> String\nnumber s = \n    let\n        t = filter isDigit s\n        test len | len == 10 = t\n                 | len == 11 && head t == '1' = tail t\n                 | otherwise = replicate 10 '0'\n    in test $ length t\n\nareaCode :: String -> String\nareaCode = take 3 . filter isDigit\n\nprettyPrint :: String -> String\nprettyPrint s = let t = number s\n                    (a, b) = splitAt 3 t\n                    (c, d) = splitAt 3 b\n                in "(" ++ a ++ ") " ++ c ++ "-" ++ d	\N	\N	0	1	2014-07-21 22:55:25	2014-07-21 22:55:25	78	phone-number.hs
169	6	c773bb5220b7f2df1b97d42f	pending	clojure	binary	(ns binary)\r\n\r\n(declare valid? convert)\r\n\r\n(defn to-decimal [s]\r\n  ;; Convert binary number string to decimal,\r\n  ;; or return 0 if no valid representation.\r\n  (if (valid? s)\r\n    (convert s)\r\n    0))\r\n\r\n(defn- valid? [s]\r\n  ;; Is s an valid binary number representation?\r\n  (re-matches #"[01]*" s))\r\n\r\n(defn- convert [s]\r\n  ;; Convert binary number string to decimal\r\n  (let [digits (map #(Integer/parseInt (str %))\r\n                    (reverse s))\r\n        position-values (map-indexed (fn [idx digit]\r\n                                       (* digit (Math/pow 2 idx)))\r\n                                     digits)\r\n        value (reduce + position-values)]\r\n    (int value)))\r	\N	\N	0	1	2014-07-21 19:57:24	2014-07-21 19:57:24	79	binary.clj
170	6	b4d54988afb4fde3798e6c76	superseded	ruby	simple-cipher	class Cipher\r\n  LETTERS = "abcdefghijklmnopqrstuvwxyz"\r\n\r\n  attr_reader :key\r\n\r\n  def self.generate_key(len=100)\r\n    len.times.reduce("") do |key|\r\n      key << LETTERS[(rand*26).floor]\r\n    end\r\n  end\r\n\r\n  def initialize(new_key)\r\n    new_key ||= Cipher.generate_key\r\n    raise ArgumentError.new("Invalid Key") unless valid_key? new_key\r\n    @key = new_key\r\n  end\r\n\r\n  def encode(plain_text)\r\n    transcode(plain_text, &:+)\r\n  end\r\n\r\n  def decode(code)\r\n    transcode(code, &:-)\r\n  end\r\n\r\n  private\r\n\r\n  def valid_key?(new_key)\r\n    !!new_key.match(/\\A[a-z]+\\Z/)\r\n  end\r\n\r\n  def get_letters(plain_text)\r\n    plain_text.downcase.chars.select do |c|\r\n      c.match /[a-z]/\r\n    end\r\n  end\r\n\r\n  def transcode(text, &direction)\r\n    output = ""\r\n    get_letters(text).each_with_index do |letter, i|\r\n      output << translate(letter, @key[i], &direction)\r\n    end\r\n    output\r\n  end\r\n\r\n  def translate(letter, key_char, &direction)\r\n    LETTERS[yield(letter.ord - "a".ord, key_char.ord - "a".ord) % 26]\r\n  end\r\n\r\nend\r	\N	\N	0	1	2014-07-19 01:07:59	2014-07-19 01:07:59	80	simple-cipher.rb
171	6	a6dd65fc2d4b0554fe2e6304	pending	ruby	simple-cipher	class Cipher\r\n  LETTERS = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\r\n\r\n  attr_reader :key\r\n\r\n  def self.generate_key(len = 100)\r\n    len.times.map{ |key| LETTERS[(rand*26).floor] }.join\r\n  end\r\n\r\n  def initialize(new_key)\r\n    fail ArgumentError.new("Invalid Key") unless valid_key? new_key\r\n\r\n    @key = new_key || Cipher.generate_key\r\n  end\r\n\r\n  def encode(plain_text)\r\n    transcode(plain_text, &:+)\r\n  end\r\n\r\n  def decode(code)\r\n    transcode(code, &:-)\r\n  end\r\n\r\n  private\r\n\r\n  def valid_key?(new_key)\r\n    !new_key || !!new_key.match(/\\A[a-z]+\\Z/)\r\n  end\r\n\r\n  def get_letters(plain_text)\r\n    plain_text.downcase.scan /[a-z]/\r\n  end\r\n\r\n  def transcode(text, &direction)\r\n    output = ""\r\n    get_letters(text).each_with_index do |letter, i|\r\n      output << translate(letter, key[i % key.length], &direction)\r\n    end\r\n    output\r\n  end\r\n\r\n  def translate(letter, key_char)\r\n    LETTERS[yield(letter.ord - "a".ord, key_char.ord - "a".ord) % 26]\r\n  end\r\nend\r	\N	\N	0	2	2014-07-19 05:11:13	2014-07-19 05:11:13	80	cipher.rb
172	6	151150e25d4b1295dab2dfeb	superseded	javascript	word-count	var nonWord = /\\W+/;\nvar hasString = Boolean;\nfunction increment(count, word) {\n    count[word] = (count[word] || 0) + 1;\n    return count;\n}\n\nvar Words = module.exports = function(phrase) {\n    this.count = phrase\n        .toLowerCase()\n        .split(nonWord)\n        .filter(hasString)\n        .reduce(increment, {});\n};	\N	\N	0	1	2014-07-18 00:21:23	2014-07-18 00:21:23	81	word-count.js
173	6	31715d0dad95fcec0b11931b	pending	javascript	word-count	"use strict";\n\nvar nonWord = /\\W+/;\nvar hasString = Boolean;\nfunction increment(count, word) {\n    count[word] = (count[word] || 0) + 1;\n    return count;\n}\n\nvar Words = module.exports = function(phrase) {\n    this.count = phrase\n        .toLowerCase()\n        .split(nonWord)\n        .filter(hasString)\n        .reduce(increment, {});\n};	\N	\N	0	2	2014-07-21 15:07:56	2014-07-21 15:07:56	81	word-count.js
174	6	c3b148f726fa0fe57ff8e585	superseded	javascript	bob	var Bob = function() {\n\tthis.hey = function(input){\n\t\tif (!input) \n\t\t\treturn "Fine. Be that way.";\n\t\t\n\t\tvar last_char = input.slice(-1);\n\t\tif (last_char == "!") \n\t\t\treturn 'Woah, chill out!';\n\t\telse if (last_char == "?") \n\t\t\treturn 'Sure.';\n\t\t else \n\t\t\treturn 'Whatever.';\n\t};\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-07-17 09:00:13	2014-07-17 09:00:13	82	bob.js
175	6	79bcca15e1a12d51a915a762	superseded	javascript	bob	var Bob = function() {\n\tthis.hey = function(input){\n\t\tif (!input) \n\t\t\treturn "Fine. Be that way.";\n\t\t\n\t\tvar last_char = input.slice(-1);\n\t\tif (last_char == "!") \n\t\t\treturn 'Woah, chill out!';\n\t\telse if (last_char == "?") \n\t\t\treturn 'Sure.';\n\t\telse \n\t\t\treturn 'Whatever.';\n\t};\n};\n\nmodule.exports = Bob;	\N	\N	0	2	2014-07-21 01:16:58	2014-07-21 01:16:58	82	bob.js
176	6	4ee9198e4a96201623bb7507	pending	javascript	bob	var Bob = function() {\n\tthis.hey = function(input){\n\t\tif (!input)  // "" == false\n\t\t\treturn "Fine. Be that way.";\n\t\t\n\t\tvar last_char = input.slice(-1);\n\t\tif (last_char == "!") \n\t\t\treturn 'Woah, chill out!';\n\t\telse if (last_char == "?") \n\t\t\treturn 'Sure.';\n\t\telse \n\t\t\treturn 'Whatever.';\n\t};\n};\n\nmodule.exports = Bob;	\N	\N	0	3	2014-07-23 23:29:06	2014-07-23 23:29:06	82	bob.js
177	22	ebff4583e9dc51972431841e	pending	ruby	bob	class Bob\n  def hey(str)\n    if str.strip == "" || str.nil?\n      "Fine. Be that way!"\n    elsif str.upcase == str\n      "Woah, chill out!"\n    elsif str[-1] == "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-06-28 03:08:39	2014-06-28 03:08:39	83	bob.rb
178	22	be1088a43d47eff9dd222d2c	pending	clojure	word-count	(ns phrase)\n\n(defn word-count [s]\n  (-> s\n      clojure.string/lower-case\n      (clojure.string/split #"[\\s\\p{Punct}]+")\n      frequencies))	\N	\N	0	1	2014-06-27 21:01:24	2014-06-27 21:01:24	84	word-count.clj
179	16	1016fea996f2def513f7523b	superseded	ruby	leap	class Year\n\tdef self.leap?(num)\n\t\tif num % 4 == 0 && num % 100 != 0 \n\t\t\ttrue\n\t\telsif num % 400 == 0 \n\t\t\ttrue\n\t\telse\n\t\t\tfalse\n\t\tend\n\tend\nend	\N	\N	0	1	2014-04-23 18:36:25	2014-04-23 18:36:25	85	year.rb
180	16	81dcc9b414ed84e649fbf28b	pending	ruby	leap	class Year\n\tdef self.leap?(num)\n\t\t(num % 4 == 0 && num % 100 != 0) || (num % 400 == 0)\n\tend\nend	\N	\N	0	2	2014-05-29 05:43:10	2014-05-29 05:43:10	85	year.rb
181	16	b85a2d3dade3334d09edd5e9	superseded	python	roman-numerals	#!/usr/bin/env python\n\nROMAN_DIGITS = {1000: 'M',\n                900: 'CM',\n                500: 'D',\n                400: 'CD',\n                100: 'C',\n                90: 'XC',\n                50: 'L',\n                40: 'XL',\n                10: 'X',\n                9: 'IX',\n                5: 'V',\n                4: 'IV',\n                1: 'I'}\n\nclass RomanNumeral:\n    def __init__(self, number):\n        self.number = number\n    \n    def __str__(self):\n        roman = ""\n        value = self.number\n        while value > 0:\n            for rd_value in reversed(sorted(ROMAN_DIGITS.keys())):\n                if rd_value <= value:\n                    roman += ROMAN_DIGITS[rd_value]\n                    value -= rd_value\n                    break\n        return roman	\N	\N	0	1	2014-04-21 00:02:09	2014-04-21 00:02:09	86	roman.py
182	16	926df73f18bd1fa324f8bb10	pending	python	roman-numerals	from collections import OrderedDict\n\n\nROMAN_DIGITS = OrderedDict(((1000, 'M'), (900, 'CM'), (500, 'D'),\n                            (400, 'CD'), (100, 'C'), (90, 'XC'),\n                            (50, 'L'), (40, 'XL'), (10, 'X'),\n                            (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n                            ))\n\n\nclass RomanNumeral(object):\n\n    """A number in roman numerals."""\n\n    def __init__(self, number):\n        """Create new roman numeral from decimal number."""\n        self.number = number\n\n    def __str__(self):\n        """Return a string representation of this roman numeral."""\n        roman = ""\n        number = self.number\n        for value, digit in ROMAN_DIGITS.items():\n            while value <= number:\n                roman += digit\n                number -= value\n        return roman	\N	\N	0	2	2014-05-14 11:12:47	2014-05-14 11:12:47	86	roman.py
183	16	e0d1b8bb01c2457b0bd8cecb	pending	ruby	bob	class Bob\n  def hey(what)\n    return "Fine. Be that way!" if what.strip.empty?\n    return "Woah, chill out!" if shouted?(what)\n    return "Sure." if question?(what)\n    "Whatever."\n  end\n\n  private\n  def shouted?(s)\n    s.match(/[[:alpha:]]/) and s.match(/[[:lower:]]/).nil?\n  end\n                  \n  def question?(q)\n    q.end_with?("?")\n  end\nend	\N	\N	0	2	2014-03-29 18:50:26	2014-03-29 18:50:26	87	bob.rb
184	16	a920cac586a3d1ef13b83592	superseded	ruby	bob	class Bob\n  def hey(what)\n    return "Fine. Be that way!" if what.strip.empty?\n    return "Sure." if question?(what) and not shouted?(what)\n    return "Woah, chill out!" if shouted?(what)\n    "Whatever."\n  end\n\n  def shouted?(s)\n    s.match(/[[:alpha:]]/) and s.match(/[[:lower:]]/).nil?\n  end\n                  \n  def question?(q)\n    q.end_with?("?")\n  end\nend	\N	\N	0	1	2014-04-26 15:58:37	2014-04-26 15:58:37	87	bob.rb
185	19	399dacc7f788e5851f0589af	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.reject { |word| word.downcase == @word.downcase } \\\n         .select { |word| canonical(word) == canonical(@word) }\n  end\n\n  private\n\n  def canonical(word)\n    @canonical_words ||= Hash.new do |h, k|\n      h[k] = k.chars.sort\n    end\n\n    @canonical_words[word.downcase]\n  end\nend	2014-06-09 20:04:44	\N	0	1	2014-05-29 13:50:00	2014-05-29 13:50:00	88	anagram.rb
186	19	693b48d22a7d6a5def930e3a	done	ruby	bob	class Bob\n\n  def hey(conversation)\n    if silent?(conversation)\n      'Fine. Be that way!'\n    elsif shouting?(conversation)\n      'Woah, chill out!'\n    elsif question?(conversation)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def silent?(conversation)\n    conversation.strip.empty?\n  end\n\n  def question?(conversation)\n    conversation[-1] == '?'\n  end\n\n  def shouting?(conversation)\n    conversation !~ /[a-z]/ && conversation =~ /[A-Z]/\n  end\n\nend	2014-05-09 21:33:18	\N	0	2	2014-05-07 12:15:26	2014-05-07 12:15:26	89	bob.rb
187	19	81641898ed5150cf7f11efad	superseded	ruby	bob	class Bob\n\n  def hey(conversation)\n    if conversation.gsub(/\\s/,"") == ""\n      'Fine. Be that way!'\n    elsif conversation.gsub(/(\\W)|(\\d)/,"") != "" && conversation.gsub(/(\\W)|(\\d)/,"") == conversation.gsub(/(\\W)|(\\d)/,"").upcase\n      'Woah, chill out!'\n    elsif conversation[-1] == '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend	\N	\N	0	1	2014-06-08 13:28:00	2014-06-08 13:28:00	89	bob.rb
188	19	ac0971c612079fdd0dcbce1d	done	ruby	gigasecond	class Gigasecond\n\tdef initialize(date)\n\t\t@date = date\n\tend\n\n    def date\n        @date + 11574\n    end\n\n    #     newdate(@date)\n    # end\n\n    # def newdate(date)\n    #     time = date.to_time\n    #     time = time + (10**9)\n    #     date = time.to_date\n    # end\nend	2014-06-20 03:29:14	\N	0	1	2014-06-16 19:02:26	2014-06-16 19:02:26	90	gigasecond.rb
396	41	e2626ae53a8131d7c4cf33a0	superseded	clojure	anagram	(ns anagram\n\t (use [clojure.string :only [join lower-case ]]))\n\n(defn- sort_word\n\t[word]\n\t(join "" (sort (char-array (lower-case word))) ))\n\n(defn- anagrams\n\t[word, candidates]\n\t(filter #(= (sort_word %)(sort_word word)) candidates) )\n\n(defn anagrams-for\n\t[word, candidates]\t\t\n\t (filter #( not (= % word) ) \n\t \t(anagrams word candidates)))\n     	\N	\N	0	1	2014-05-17 07:27:36	2014-05-17 07:27:36	195	anagram.clj
397	41	d6a34f660601b0c2c939f317	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [join lower-case]]))\n\n(defn- sort-word\n  [word]\n    (sort (lower-case word)))\n\n(defn- anagrams\n  [word, candidates]\n    (filter #(=(sort-word %)(sort-word word)) candidates))\n\n(defn anagrams-for\n  [word, candidates]      \n    (filter #(not= % word) (anagrams word candidates)))	\N	\N	0	2	2014-05-20 12:39:38	2014-05-20 12:39:38	195	anagram.clj
398	41	cb258c491365f8f24be12c5b	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn- sort-word\n  [word]\n    (sort (lower-case word)))\n\n(defn- not-same?\n  [anagram sorted-word]\n    (not=(lower-case anagram) sorted-word))\n\n(defn- anagrams\n  [candidates sorted-word]\n    (filter #(= (sort-word %) sorted-word) candidates))\n\n(defn anagrams-for\n  [word candidates]  \n  \t(let [sorted-word (sort-word word)]    \n      (filter #(not-same? % sorted-word) (anagrams candidates sorted-word))))	\N	\N	0	3	2014-06-17 23:47:26	2014-06-17 23:47:26	195	anagram.clj
189	19	af43331d36b65d62240624a5	done	haskell	scrabble-score	{-# LANGUAGE TupleSections #-}\r\nmodule Scrabble(scoreLetter, scoreWord) where\r\n\r\nimport Data.Char\r\nimport Data.Map.Strict(Map, (!))\r\nimport qualified Data.Map.Strict as Map\r\n\r\nscoreWord :: String -> Int\r\nscoreWord word = sum $ map scoreLetter word\r\n\r\nscoreLetter :: Char -> Int\r\nscoreLetter letter = letterScores ! toUpper letter\r\n\r\nletterScores :: Map Char Int\r\nletterScores =\r\n    Map.fromList $\r\n    concatMap (\\(letters, score) -> map (, score) letters) $\r\n    [\r\n        ("AEIOULNRST", 1), ("DG", 2), ("BCMP", 3),\r\n        ("FHVWY", 4), ("K", 5), ("JX", 8),("QZ", 10)\r\n    ]\r	2014-06-03 14:52:35	\N	0	1	2014-05-30 09:02:33	2014-05-30 09:02:33	91	Scrabble.hs
190	20	2891862705c355b013710909	superseded	ruby	word-count	# encoding: utf-8\n\n# Phase implementation for exercism word-count exercise\nclass Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words(@phrase).reduce({}) do |counts, word|\n      counts[word] ||= 0\n      counts[word] += 1\n      counts\n    end\n  end\n\n  private\n\n  def words(phrase)\n    phrase.split(/[^A-Za-z0-9']/)\n      .delete_if(&:empty?)\n      .map(&:downcase)\n  end\nend	\N	\N	0	1	2014-04-12 14:50:04	2014-04-12 14:50:04	92	phrase.rb
191	20	19dc6a9d962389fe30171649	done	ruby	word-count	# encoding: utf-8\n\n# Phase implementation for exercism word-count exercise\nclass Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    # Note: I normally really don't like Hash's default option,\n    # but in this case it actually works elegantly.\n    words(@phrase).each_with_object(Hash.new(0)) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  private\n\n  def words(phrase)\n    phrase.split(/[^A-Za-z0-9']/)\n      .delete_if(&:empty?)\n      .map(&:downcase)\n  end\nend	2014-07-13 19:44:52	\N	0	2	2014-07-07 15:05:59	2014-07-07 15:05:59	92	phrase.rb
192	20	173c054ee6c66f142a1309fb	done	haskell	bank-account	module BankAccount\n    ( BankAccount\n    , openAccount\n    , closeAccount\n    , getBalance\n    , incrementBalance )\nwhere\n\nimport           Control.Applicative    ((<$>))\nimport           Control.Concurrent.STM (TVar, atomically, newTVarIO, readTVar,\n                                         writeTVar)\n\nnewtype BankAccount = BankAccount { getAccount :: TVar (Maybe Int)}\n\nopenAccount :: IO BankAccount\nopenAccount = BankAccount <$> newTVarIO (Just 0)\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount = atomically . flip writeTVar Nothing . getAccount\n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance = atomically . readTVar . getAccount\n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance a i = atomically $ do\n    v <- f <$> readTVar t\n    writeTVar t v\n    return v\n    where\n        t = getAccount a\n        f = fmap (+i)	2014-03-28 08:09:53	\N	0	3	2014-03-26 19:48:01	2014-03-26 19:48:01	93	BankAccount.hs
193	20	8fc6ea4c56dcfab213e98884	superseded	haskell	bank-account	module BankAccount\n    ( BankAccount\n    , openAccount\n    , closeAccount\n    , getBalance\n    , incrementBalance )\nwhere\n\nimport           Control.Applicative     ((<$>))\nimport           Control.Concurrent.MVar (MVar, modifyMVar_, newMVar,\n                                          tryReadMVar, tryTakeMVar)\nimport           Control.Monad           ((>=>))\n\nnewtype BankAccount = BankAccount { getAccount :: MVar Int }\n\nopenAccount :: IO BankAccount\nopenAccount = BankAccount <$> newMVar 0\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount = tryTakeMVar . getAccount >=> (\\_ -> return ())\n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance = tryReadMVar . getAccount\n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance acc i = modifyMVar_ (getAccount acc) (return . (+i))\n    >> getBalance acc	\N	\N	0	1	2014-05-03 04:02:54	2014-05-03 04:02:54	93	BankAccount.hs
194	20	ac11381ab0f43202a6a8400b	superseded	haskell	bank-account	module BankAccount\n    ( BankAccount\n    , openAccount\n    , closeAccount\n    , getBalance\n    , incrementBalance )\nwhere\n\nimport           Control.Applicative    ((<$>))\nimport           Control.Concurrent.STM (TMVar, atomically, newTMVarIO,\n                                         putTMVar, tryReadTMVar, tryTakeTMVar)\nimport           Control.Monad          ((>=>))\n\nnewtype BankAccount = BankAccount { getAccount :: TMVar Int}\n\nopenAccount :: IO BankAccount\nopenAccount = BankAccount <$> newTMVarIO 0\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount = atomically . (tryTakeTMVar . getAccount >=> (\\_ -> return ()))\n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance = atomically . tryReadTMVar . getAccount\n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance a i =\n    let f = fmap (+i)\n        tm = getAccount a\n    in atomically $ do\n        v <- f <$> tryTakeTMVar tm\n        maybe (return ()) (putTMVar tm) v\n        return v	\N	\N	0	2	2014-05-26 22:40:36	2014-05-26 22:40:36	93	BankAccount.hs
195	20	45fd8fd022631a006afca273	done	clojure	triangle	(defn- valid?\n  "returns truthy/falsey value if a triangle can exist, given sorted sides."\n  [[x y z]]\n  (> (+ x y) z))\n\n(defn- uniq-sides-count\n  [[& sides]]\n  (count (distinct sides)))\n\n(defn- triangle-type\n  [[& sides]]\n  (get [:equilateral :isosceles :scalene]\n       (dec (uniq-sides-count sides))))\n\n(defn triangle\n  [& sides]\n  (if (valid? (sort sides))\n    (triangle-type sides)\n    :illogical))	2014-04-03 01:08:44	\N	0	1	2014-03-26 21:14:31	2014-03-26 21:14:31	94	triangle.clj
196	20	25c4136afd4679b1a785d95e	superseded	ruby	nucleotide-count	class DNA < Struct.new(:sequence)\n  DNA_NUCLEOTIDES = ['A','T','C','G']\n  ALL_NUCLEOTIDES = ['A','T','C','G','U']\n\n  def nucleotide_counts\n    counts = Hash.new { |hash,key| hash[key] = self.count(key) }\n    DNA_NUCLEOTIDES.each { |nucleotide| counts[nucleotide] }\n    return counts\n  end\n\n  def count nucleotide\n    raise ArgumentError unless ALL_NUCLEOTIDES.include? nucleotide\n    sequence.count nucleotide\n  end\nend	\N	\N	0	2	2014-04-08 00:53:07	2014-04-08 00:53:07	95	nucleotide-count.rb
197	20	28c3080939c39feb78346429	superseded	ruby	nucleotide-count	module Nucleotides\n  GUANINE   = 'G'\n  ADENINE   = 'A'\n  THYMINE   = 'T'\n  CYTOSINE  = 'C'\n  URACIL    = 'U'\n\n  def Nucleotides.dna\n    [ADENINE, THYMINE, CYTOSINE, GUANINE]\n  end\n\n  def Nucleotides.rna\n    [ADENINE, CYTOSINE, GUANINE, URACIL]\n  end\n\n  def Nucleotides.all\n    (dna + rna).uniq\n  end\n\n  def Nucleotides.valid? nucleotide\n    all.include?(nucleotide) ? true : raise_error(nucleotide)\n  end\n\n  private\n\n  def Nucleotides.raise_error nucleotide\n    raise ArgumentError, "#{nucleotide} is not a valid nucleotide."\n  end\nend\n\nclass DNA\n  require 'attr_extras'\n\n  pattr_initialize :sequence\n\n  def nucleotide_counts\n    Nucleotides.dna.inject({}) do |result, nucleotide|\n      result[nucleotide] = count nucleotide\n      result\n    end\n  end\n\n  def count nucleotide\n    sequence.count nucleotide if Nucleotides.valid? nucleotide\n  end\nend	\N	\N	0	5	2014-04-08 23:01:56	2014-04-08 23:01:56	95	nucleotide-count.rb
198	20	3133e1793c68193d27bdcb59	superseded	ruby	nucleotide-count	class DNA < Struct.new(:sequence)\n  DNA_NUCLEOTIDES = ['A','T','C','G']\n  ALL_NUCLEOTIDES = ['A','T','C','G','U']\n\n  def nucleotide_counts\n    counts = Hash.new { |hash,key| hash[key] = self.count(key) }\n    DNA_NUCLEOTIDES.each { |nucleotide| counts[nucleotide] }\n    return counts\n  end\n\n  def count nucleotide\n    raise ArgumentError unless ALL_NUCLEOTIDES.include? nucleotide\n    String.new(sequence).count nucleotide\n  end\nend	\N	\N	0	1	2014-04-13 08:07:09	2014-04-13 08:07:09	95	nucleotide-count.rb
199	20	78788fd8cc4eb73f8c8dbe99	superseded	ruby	nucleotide-count	module Nucleotides\n  GUANINE   = 'G'\n  ADENINE   = 'A'\n  THYMINE   = 'T'\n  CYTOSINE  = 'C'\n  URACIL    = 'U'\n\n  def Nucleotides.dna\n    [ADENINE, THYMINE, CYTOSINE, GUANINE]\n  end\n\n  def Nucleotides.rna\n    [ADENINE, CYTOSINE, GUANINE, URACIL]\n  end\n\n  def Nucleotides.all\n    (dna + rna).uniq\n  end\n\n  def Nucleotides.valid? nucleotide\n    all.include? nucleotide\n  end\nend\n\nclass DNA\n  attr_reader :sequence\n  private     :sequence\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def nucleotide_counts\n    Nucleotides.dna.inject({}) do |result, nucleotide|\n      result[nucleotide] = count nucleotide\n      result\n    end\n  end\n\n  def count nucleotide\n    Nucleotides.valid?(nucleotide) \\\n      ? sequence.count(nucleotide)\n      : raise_error(nucleotide)\n  end\n\n  private\n\n  def raise_error nucleotide\n    raise ArgumentError, "#{nucleotide} is not a valid nucleotide."\n  end\nend	\N	\N	0	6	2014-04-16 09:37:24	2014-04-16 09:37:24	95	nucleotide-count.rb
200	20	8a3b1975cf68d9565eb29585	superseded	ruby	nucleotide-count	class DNA < String\n  DNA_NUCLEOTIDES = ['A','T','C','G']\n  ALL_NUCLEOTIDES = ['A','T','C','G','U']\n\n  def nucleotide_counts\n    counts = Hash.new { |hash,key| hash[key] = self.count(key) }\n    DNA_NUCLEOTIDES.each { |nucleotide| counts[nucleotide] }\n    return counts\n  end\n\n  def count nucleotide\n    raise ArgumentError unless ALL_NUCLEOTIDES.include? nucleotide\n    super\n  end\nend	\N	\N	0	3	2014-05-09 01:48:32	2014-05-09 01:48:32	95	nucleotide-count.rb
201	20	81c5b2a213e3925531728305	superseded	ruby	nucleotide-count	module Nucleotides\n  GUANINE   = 'G'\n  ADENINE   = 'A'\n  THYMINE   = 'T'\n  CYTOSINE  = 'C'\n  URACIL    = 'U'\n\n  def self.dna\n    [ADENINE, THYMINE, CYTOSINE, GUANINE]\n  end\n\n  def self.rna\n    [ADENINE, CYTOSINE, GUANINE, URACIL]\n  end\n\n  def self.all\n    dna | rna\n  end\n\n  def self.valid? nucleotide\n    all.include? nucleotide\n  end\nend\n\nclass DNA\n  attr_reader :sequence; private :sequence\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def nucleotide_counts\n    Nucleotides.dna.each_with_object({}) do |nucleotide, result|\n      result[nucleotide] = count nucleotide\n    end\n  end\n\n  def count nucleotide\n    ensure_valid_nucleotide nucleotide\n    sequence.count nucleotide\n  end\n\n  private\n\n  def ensure_valid_nucleotide nucleotide\n    raise ArgumentError, "#{nucleotide} is not a valid nucleotide." \\\n    unless Nucleotides.valid? nucleotide\n  end\nend	\N	\N	0	8	2014-05-10 13:59:38	2014-05-10 13:59:38	95	nucleotide-count.rb
202	20	9969e2793a0bc33bf477fdb4	superseded	ruby	nucleotide-count	module Nucleotides\n  GUANINE   = 'G'\n  ADENINE   = 'A'\n  THYMINE   = 'T'\n  CYTOSINE  = 'C'\n  URACIL    = 'U'\n\n  def Nucleotides.dna\n    [ADENINE, THYMINE, CYTOSINE, GUANINE]\n  end\n\n  def Nucleotides.rna\n    [ADENINE, CYTOSINE, GUANINE, URACIL]\n  end\n\n  def Nucleotides.all\n    (dna + rna).uniq\n  end\n\n  def Nucleotides.valid? nucleotide\n    all.include? nucleotide\n  end\nend\n\nclass DNA\n  attr_reader :sequence\n  private     :sequence\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def nucleotide_counts\n    Nucleotides.dna.inject({}) do |result, nucleotide|\n      result[nucleotide] = count nucleotide\n      result\n    end\n  end\n\n  def count nucleotide\n    Nucleotides.valid?(nucleotide) \\\n      ? sequence.count(nucleotide)\n      : argument_error(nucleotide)\n  end\n\n  private\n\n  def argument_error nucleotide\n    raise ArgumentError, "#{nucleotide} is not a valid nucleotide."\n  end\nend	\N	\N	0	7	2014-06-08 21:24:49	2014-06-08 21:24:49	95	nucleotide-count.rb
203	20	7250857280ac40f3f52a6598	superseded	ruby	nucleotide-count	module Nucleotides\n  GUANINE   = 'G'\n  ADENINE   = 'A'\n  THYMINE   = 'T'\n  CYTOSINE  = 'C'\n  URACIL    = 'U'\n\n  def dna_nucleotides\n    [ADENINE,THYMINE,CYTOSINE,GUANINE]\n  end\n\n  def all_nucleotides\n    dna_nucleotides + [URACIL]\n  end\nend\n\nclass DNA < Struct.new(:sequence)\n  include Nucleotides\n\n  def nucleotide_counts\n    dna_nucleotides.inject({}) do |result, nucleotide|\n      result[nucleotide] = count nucleotide\n      result\n    end\n  end\n\n  def count nucleotide\n    raise ArgumentError, "#{nucleotide} is not a valid nucleotide." \\\n    unless all_nucleotides.include? nucleotide\n    sequence.count nucleotide\n  end\nend	\N	\N	0	4	2014-07-13 18:05:34	2014-07-13 18:05:34	95	nucleotide-count.rb
204	20	acb4a019587baaf8310ede84	done	ruby	nucleotide-count	module Nucleotides\n  GUANINE   = 'G'\n  ADENINE   = 'A'\n  THYMINE   = 'T'\n  CYTOSINE  = 'C'\n  URACIL    = 'U'\n\n  def self.dna\n    [ADENINE, THYMINE, CYTOSINE, GUANINE]\n  end\n\n  def self.rna\n    [ADENINE, CYTOSINE, GUANINE, URACIL]\n  end\n\n  def self.all\n    dna | rna\n  end\n\n  def self.valid? nucleotide\n    all.include? nucleotide\n  end\nend\n\nclass DNA\n  attr_reader :sequence; private :sequence\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def nucleotide_counts\n    Nucleotides.dna.each_with_object({}) do |nucleotide, result|\n      result[nucleotide] = count nucleotide\n    end\n  end\n\n  def count nucleotide\n    ensure_valid_nucleotide nucleotide\n    sequence.count nucleotide\n  end\n\n  private\n\n  def ensure_valid_nucleotide nucleotide\n    unless Nucleotides.valid? nucleotide\n      raise ArgumentError, "#{nucleotide} is not a valid nucleotide."\n    end\n  end\nend	2014-07-24 06:49:32	\N	0	9	2014-07-15 07:10:38	2014-07-15 07:10:38	95	nucleotide-count.rb
205	20	6b7ec2d965199141938de449	superseded	haskell	word-count	module WordCount\n  ( wordCount\n  ) where\n\nimport Data.Char\nimport Data.Map hiding (map)\n\nwordCount :: String -> Map String Integer\nwordCount =  count . words . normalize\n\nnormalize :: String -> String\nnormalize = map normalizeOne where\n  normalizeOne c\n    | isAlpha c = toLower c\n    | isDigit c = c\n    | otherwise = ' '\n\ncount :: [String] -> Map String Integer\ncount = foldr f empty where\n  f word = insertWith (+) word 1	\N	\N	0	2	2014-04-07 13:43:54	2014-04-07 13:43:54	96	word-count.hs
206	20	343cb120b4ce8acaa0c640fa	superseded	haskell	word-count	module WordCount\n  ( wordCount\n  ) where\n\nimport Data.Char\nimport Data.Map hiding (map)\n\nwordCount :: String -> Map String Integer\nwordCount =  count . words . normalize\n\nnormalize :: String -> String\nnormalize = map normalizeOne where\n  normalizeOne c\n    | isAlpha c = toLower c\n    | isDigit c = c\n    | otherwise = ' '\n\ncount :: [String] -> Map String Integer\ncount = foldr f empty where\n  f word acc = insert word (find word acc + 1) acc\n  find = findWithDefault 0	\N	\N	0	1	2014-06-02 09:55:19	2014-06-02 09:55:19	96	word-count.hs
207	20	27aca36508dcf300103c7cef	done	haskell	word-count	{-# LANGUAGE TupleSections #-}\n\nmodule WordCount\n  ( wordCount\n  ) where\n\nimport Data.Char\nimport Data.Map hiding (map)\n\nwordCount :: String -> Map String Integer\nwordCount =  count . words . normalize\n\nnormalize :: String -> String\nnormalize = map normalizeOne where\n  normalizeOne c\n    | isAlpha c = toLower c\n    | isDigit c = c\n    | otherwise = ' '\n\ncount :: [String] -> Map String Integer\ncount = fromListWith (+) . map (,1)\n  \n  	2014-06-17 20:30:01	\N	0	3	2014-06-12 20:27:16	2014-06-12 20:27:16	96	word-count.hs
208	20	208ffdad3279546bac835729	done	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(student, grade)\n    db[grade] ? db[grade] << student : db[grade] = [student]\n  end\n\n  def grade(year)\n    db[year] ||= []\n  end\n\n  def sort \n    Hash[school_array.sort]\n  end\n\n  def school_array\n    db.collect { |grade, names| [grade, names.sort] }\n  end\n\nend	2014-04-10 16:36:41	\N	0	1	2014-03-30 11:13:15	2014-03-30 11:13:15	97	grade-school.rb
209	35	4f8135a46a2cc4672f1229c2	done	ruby	strain	# Using enumerable, but not the methods mentioned in\n# the Readme, which directly implement the keep\n# and discard behaviour.\n#\n# I felt like this was okay, becaues to remove it\n# is just to make `to_keep` a local variable, which\n# is a trivial change. I figure it's okay to use `#each`\n# since that's actually implemented by Array and not\n# Enumerable. Alternative is to access elements by index,\n# but even then, we're using `Array#[]`, so it seems\n# equally cheating as `Array#each`\nclass Array\n  def keep\n    each_with_object Array.new do |element, to_keep|\n      to_keep << element if yield element\n    end\n  end\n\n  def discard\n    keep { |element| not yield element }\n  end\nend	2014-02-26 10:29:14	\N	0	1	2014-02-16 00:24:25	2014-02-16 00:24:25	98	strain.rb
210	35	ddb802254e5c8258995ec4ae	superseded	go	queen-attack	package queenattack\n\nimport (\n\t"errors"\n\t"fmt"\n\t"regexp"\n)\n\nvar squareRegex = regexp.MustCompile(`[a-h][0-8]`)\n\ntype Square struct {\n\tRow, Column uint8\n}\n\nfunc SquareFromString(pos string) (square Square, err error) {\n\tif valid := squareRegex.MatchString(pos); !valid {\n\t\terr = fmt.Errorf("invalid position %q", pos)\n\t} else {\n\t\tsquare.Row = pos[0] - 'a'\n\t\tsquare.Column = pos[1] - '1'\n\t}\n\treturn\n}\n\nfunc CanQueenAttack(wpos, bpos string) (attack bool, err error) {\n\tbqueen, err := SquareFromString(bpos)\n\tif err != nil {\n\t\treturn\n\t}\n\twqueen, err := SquareFromString(wpos)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif bqueen == wqueen {\n\t\terr = errors.New("Queens are in the same square")\n\t} else {\n\t\tattack = (wqueen.Row == bqueen.Row || // Same row.\n\t\t\twqueen.Column == bqueen.Column || // Same column.\n\t\t\tabsdiff(wqueen.Row, bqueen.Row) == absdiff(wqueen.Column, bqueen.Column)) // Same diagonal.\n\t}\n\treturn\n}\n\nfunc absdiff(a, b uint8) uint8 {\n\tif a < b {\n\t\treturn b - a\n\t}\n\treturn a - b\n}	\N	\N	0	1	2014-02-24 14:43:42	2014-02-24 14:43:42	99	queen_attack.go
211	35	a64732e487064eba98438d1e	done	go	queen-attack	package queenattack\n\nimport (\n\t"fmt"\n\t"regexp"\n)\n\nvar squareRegex = regexp.MustCompile(`^[a-h][1-8]$`)\n\ntype Square struct {\n\tRow, Column uint8\n}\n\nfunc SquareFromString(pos string) (square Square, err error) {\n\tif valid := squareRegex.MatchString(pos); !valid {\n\t\terr = fmt.Errorf("invalid position %q", pos)\n\t} else {\n\t\tsquare.Row = pos[0] - 'a'\n\t\tsquare.Column = pos[1] - '1'\n\t}\n\treturn\n}\n\nfunc CanQueenAttack(wpos, bpos string) (attack bool, err error) {\n\tbqueen, err := SquareFromString(bpos)\n\tif err != nil {\n\t\treturn\n\t}\n\twqueen, err := SquareFromString(wpos)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif bqueen == wqueen {\n\t\terr = fmt.Errorf("Queens are in the same square %q", bpos)\n\t} else {\n\t\tattack = (wqueen.Row == bqueen.Row || // Same row.\n\t\t\twqueen.Column == bqueen.Column || // Same column.\n\t\t\tabsdiff(wqueen.Row, bqueen.Row) == absdiff(wqueen.Column, bqueen.Column)) // Same diagonal.\n\t}\n\treturn\n}\n\nfunc absdiff(a, b uint8) uint8 {\n\tif a < b {\n\t\treturn b - a\n\t}\n\treturn a - b\n}	2014-04-19 12:02:11	\N	0	2	2014-04-12 20:09:33	2014-04-12 20:09:33	99	queen_attack.go
212	35	f5baa60d1b96d5dab2b13007	done	ruby	prime-factors	require 'prime'\n\nclass PrimeFactors\n  class << self\n    def for(number)\n      Prime.instance.prime_division(number).inject([]){|factors, (factor, index)| factors + [factor] * index}\n    end\n  end\nend	2013-11-28 09:29:46	\N	0	1	2013-11-19 01:17:11	2013-11-19 01:17:11	100	prime-factors.rb
213	35	4dfb5d75ca56119f1ee100bd	done	go	grains	package grains\n\nimport "fmt"\n\nfunc Square(s int) (uint64, error) {\n\tif s < 1 || s > 64 {\n\t\treturn 0, fmt.Errorf("Argument %d invalid.  "+\n\t\t\t"Chessboard squares are numbered 1 to 64.", s)\n\t}\n\t// Place value of bit 0 is 1, the answer for square 1.\n\t// Place value of each successive bit is twice as much as the one before,\n\t// corresponding exactly to the doubling of grains of rice.\n\t// Subtract 1 from square number to get bit index, then shift a 1 into\n\t// that place to get the answer.\n\treturn 1 << uint(s-1), nil\n}\n\nfunc Total() uint64 {\n\t// Total grains of rice for all 64 squares filled is total of place values\n\t// for all bits of a 64 bit integer.  Complement of a 64 bit 0 is 64 bits\n\t// all set to 1, the answer.\n\treturn ^uint64(0)\n}	2013-11-21 08:47:43	\N	0	3	2013-11-16 10:10:43	2013-11-16 10:10:43	101	grains.go
214	35	eb9de09a66bbc3f5a25d08e2	superseded	go	grains	package grains\n\nfunc Square(s int) uint64 {\n\treturn 1 << uint(s-1)\n}\n\nfunc Total() uint64 {\n\treturn 1<<64 - 1\n}	\N	\N	0	1	2013-11-23 09:22:39	2013-11-23 09:22:39	101	grains.go
215	35	618df4c782b23b1c255af681	superseded	go	grains	package grains\n\nimport "fmt"\n\nfunc Square(s int) (uint64, error) {\n\tif s < 1 || s > 64 {\n\t\treturn 0, fmt.Errorf("Argument %d invalid.  "+\n\t\t\t"Chessboard squares are numbered 1 to 64.", s)\n\t}\n\t// Place value of bit 0 is 1, the answer for square 1.\n\t// Place value of each successive bit is twice as much as the one before,\n\t// corresponding exactly to the doubling of grains of rice.\n\t// Subtract 1 from square number to get bit index, then shift a 1 into\n\t// that place to get the answer.\n\treturn 1 << uint(s-1), nil\n}\n\nfunc Total() (t uint64) {\n\t// Total grains of rice for all 64 squares filled is total of place values\n\t// for all bits of a 64 bit integer.  Complement of a 64 bit 0 is 64 bits\n\t// all set to 1, the answer.\n\treturn ^uint64(0)\n}	\N	\N	0	2	2014-03-23 09:53:09	2014-03-23 09:53:09	101	grains.go
216	35	a3b43e338c15fc2ed76cc55f	superseded	python	matrix	class Matrix(object):\n    """docstring for Matrix"""\n    def __init__(self, matrix_string):\n        super(Matrix, self).__init__()\n        elements = [int(character) for character in matrix_string.split()]\n        nrows = matrix_string.count("\\n")+1\n        ncols = len(elements)/nrows\n        Matrix.rows = [elements[x*ncols:x*ncols+ncols] for x in range(0,nrows)]\n        Matrix.columns = [elements[x:-1:ncols] for x in range(0,ncols)]\n\n\n\n\nif __name__ == '__main__':\n    matrix = Matrix("1 2 3\\n4 5 6\\n7 8 9\\n 8 7 6")\n    print matrix.columns\n    \n        	\N	\N	0	1	2013-12-18 09:48:32	2013-12-18 09:48:32	102	matrix.py
217	35	523893b925766f8db7492ce2	done	python	matrix	class Matrix(object):\n    """docstring for Matrix"""\n    def __init__(self, matrix_string):\n        super(Matrix, self).__init__()\n        self.rows = [[int(e) for e in row.split()] for row in matrix_string.split('\\n')]\n        self.columns = [list(column) for column in zip(*self.rows)]	2014-02-04 22:18:03	\N	0	2	2014-02-04 11:24:25	2014-02-04 11:24:25	102	matrix.py
218	35	63285bcf762be3917b135767	done	javascript	bob	Bob = function(){\n  this.hey = function(comment){\n\n    if (saidNothing(comment)) {\n      return 'Fine, be that way.';\n    } else if (yelled(comment)) {\n      return 'Woah, chill out!';\n    } else if (askedQuestion(comment)) {\n      return 'Sure';\n    } else {\n      return 'Whatever'; \n    }\n  };\n\n  function saidNothing(comment) {\n    return comment === '';\n  };\n\n  function yelled(comment) {\n    return comment === comment.toUpperCase();\n  }\n\n  function askedQuestion(comment) {\n    return (comment[comment.length - 1] === "?");\n  }\n};	2013-12-25 06:33:00	\N	0	2	2013-12-18 17:26:44	2013-12-18 17:26:44	103	bob.js
219	35	8693f58d9555d12a96d20bd8	superseded	javascript	bob	Bob = function(){\n  this.hey = function(comment){\n    if (comment === '') {\n      return 'Fine, be that way.';\n    } else if(comment === comment.toUpperCase()){\n      return 'Woah, chill out!';\n    } else if (comment[comment.length - 1] === "?") {\n      return 'Sure';\n    } else{\n      return 'Whatever'; \n    }\n  }; \n};	\N	\N	0	1	2014-06-05 22:24:31	2014-06-05 22:24:31	103	bob.js
220	35	63326c819ad4e0b269676802	done	ruby	grade-school	class School\n\n  attr_reader :db\n  def initialize\n    @db ||= Hash.new { |students, grade| students[grade] = [] }\n  end\n\n  def add(student, grade)\n    db[grade] << student\n  end\n\n  def grade(grade_level)\n    db[grade_level]\n  end\n\n  def sort\n    sort_array = db.sort\n    Hash[sort_array.map { |grade,students| [grade, students.sort] } ]\n  end\nend	2014-02-26 01:29:57	\N	0	1	2014-02-15 03:45:45	2014-02-15 03:45:45	104	grade-school.rb
221	35	5fc7029e37b861a30bd3244f	superseded	ruby	leap	class Year\n  attr_reader :year\n  \n  def initialize(year)\n    @year = year\n  end\n  \n  def leap?\n    divisible_by?(4) && !divisible_by?(100) || divisible_by?(400)\n  end\n  \n  private\n  \n  def divisible_by?(divisor)\n    year % divisor == 0\n  end\nend	\N	\N	0	1	2013-11-26 23:03:49	2013-11-26 23:03:49	105	year.rb
222	35	5dcff659c9e74cbb7603fb81	done	ruby	leap	class Year\n  attr_reader :year\n  \n  def initialize(year)\n    @year = year\n  end\n  \n  def leap?\n    divisible_by?(4) && !divisible_by?(100) || divisible_by?(400)\n  end\n  \n  private\n  \n  def divisible_by?(divisor)\n    year.modulo(divisor).zero?\n  end\nend	2013-12-15 20:25:27	\N	0	2	2013-12-10 08:51:43	2013-12-10 08:51:43	105	year.rb
223	35	944191cd52191e05af098c56	done	python	word-count	import string\n\nclass Phrase(object):\n    def __init__(self,phrase):\n        self.phrase = phrase\n\n    def word_count(self):\n        phrase = self.phrase\n        exclude = list(string.punctuation)\n        phrase = ''.join(ch for ch in phrase if ch not in exclude)\n        freqs = {} \n        for word in phrase.lower().split():\n            freqs[word] = freqs.get(word,0) + 1\n        return freqs\n\n            	2014-05-05 07:09:41	\N	0	1	2014-04-28 02:41:12	2014-04-28 02:41:12	106	wordcount.py
224	35	19fb20f54837d272336823cd	done	perl5	linked-list	#!/usr/bin/env perl\n\npackage Deque;\n\nuse Modern::Perl;\n\nsub new {\n    my %self = ( head => undef, tail => undef, data => 0 , count=>0);\n    my ($class) = @_;\n    return bless \\%self, $class;\n}\n\nsub pop {\n    my ($self)=@_;\n    my $data;\n    return undef if $self->{count} ==0;\n    my $node = $self->{head};\n    $data = $node->{data};\n    if ($self->{count}==1) {\n        $self->{head}           = undef;\n        $self->{tail}           = undef;\n        undef $node;\n    } else {\n        $self->{head}           =$node->{left};\n        $node->{left}{right}    =$node->{left};\n        $node->{right}{left}    =$node->{right};\n        undef $node;\n    }\n    $self->{count}--;\n    return $data;\n}\nsub push{\n    my ($self,$data)=@_;\n    my $node = _newnode(data=>$data);\n    if ($self->{count}) {\n        $node->{left}           =$self->{head};\n        $node->{right}          =$self->{tail};\n        $node->{left}{right}    =$node;\n        $node->{right}{left}    =$node;\n        $self->{head}           =$node;\n    } else {\n        $node->{left}           =$node;\n        $node->{right}          =$node;\n        $self->{head}           =$node;\n        $self->{tail}           =$node;\n    }\n    $self->{count}++;\n    return $self;\n}\n\nsub unshift{\n    my ($self,$data)=@_;\n    my $node = _newnode(data=>$data);\n    if ($self->{count}) {\n        $node->{left}           =$self->{head};\n        $node->{right}          =$self->{tail};\n        $node->{left}{right}    =$node;\n        $node->{right}{left}    =$node;\n        $self->{tail}           =$node;\n    } else {\n        $node->{left}           =$node;\n        $node->{right}          =$node;\n        $self->{head}           =$node;\n        $self->{tail}           =$node;\n    }\n    $self->{count}++;\n    return $self;\n}\n\nsub shift{\n    my ($self)=@_;\n    my $data;\n    return undef if $self->{count} ==0;\n    my $node = $self->{tail};\n    $data = $node->{data};\n    if ($self->{count}==1) {\n        $self->{head}           = undef;\n        $self->{tail}           = undef;\n        undef $node;\n    } else {\n        $self->{tail}           =$node->{right};\n        $node->{left}{right}    =$node->{left};\n        $node->{right}{left}    =$node->{right};\n        undef $node;\n    }\n    $self->{count}--;\n    return $data;\n}\n\nsub _newnode{\n    return { left=>undef, right=>undef, data=>undef, @_ };\n}\n\n1;	2014-01-01 17:53:47	\N	0	1	2014-01-01 12:19:03	2014-01-01 12:19:03	107	linked-list.pm
225	35	ec2725b52337a4b4e0474797	done	ruby	bob	class Bob\r\n  def hey(message_text)\r\n    message = Message.new(message_text)\r\n    case\r\n    when message.shouting?\r\n      'Woah, chill out!'\r\n    when message.asking?\r\n      'Sure.'\r\n    when message.silence?\r\n      'Fine. Be that way!' \r\n    else\r\n      'Whatever.'\r\n    end\r\n  end\r\nend\r\n\r\nclass Message\r\n  attr_accessor :text\r\n  \r\n  def initialize(text)\r\n    @text = text\r\n  end\r\n  \r\n  def shouting?\r\n    text.match /[A-Za-z]/ and text == text.upcase\r\n  end\r\n  \r\n  def asking?\r\n    text.end_with? '?'\r\n  end\r\n  \r\n  def silence?\r\n    text.strip.empty?\r\n  end\r\nend	2013-12-14 16:35:03	\N	0	3	2013-12-13 23:47:50	2013-12-13 23:47:50	108	bob.rb
226	35	297059955e3fcd246ace96a3	superseded	ruby	bob	class Bob\r\n  def hey(message_text)\r\n    message = Message.new(message_text)\r\n    return 'Woah, chill out!' if message.shouting?\r\n    return 'Sure.' if message.asking?\r\n    return 'Fine. Be that way!' if message.silence?\r\n    return 'Whatever.'\r\n  end\r\nend\r\n\r\nclass Message\r\n  attr_accessor :text\r\n  \r\n  def initialize(text)\r\n    @text = text\r\n  end\r\n  \r\n  def shouting?\r\n    text.match /[A-Za-z]/ and text == text.upcase\r\n  end\r\n  \r\n  def asking?\r\n    text.end_with? '?'\r\n  end\r\n  \r\n  def silence?\r\n    text.gsub(/\\s/, '') == ''\r\n  end\r\nend	\N	\N	0	1	2013-12-29 16:57:05	2013-12-29 16:57:05	108	bob.rb
227	35	1c8f7a944a93bcc8b093965a	superseded	ruby	bob	class Bob\r\n  def hey(message_text)\r\n    message = Message.new(message_text)\r\n    case\r\n    when message.shouting?\r\n      'Woah, chill out!'\r\n    when message.asking?\r\n      'Sure.'\r\n    when message.silence?\r\n      'Fine. Be that way!' \r\n    else\r\n      'Whatever.'\r\n    end\r\n  end\r\nend\r\n\r\nclass Message\r\n  attr_accessor :text\r\n  \r\n  def initialize(text)\r\n    @text = text\r\n  end\r\n  \r\n  def shouting?\r\n    text.match /[A-Za-z]/ and text == text.upcase\r\n  end\r\n  \r\n  def asking?\r\n    text.end_with? '?'\r\n  end\r\n  \r\n  def silence?\r\n    text.gsub(/\\s/, '') == ''\r\n  end\r\nend	\N	\N	0	2	2014-02-04 08:07:05	2014-02-04 08:07:05	108	bob.rb
228	35	bceaa08a468624a9896d93e0	done	perl5	luhn	package Luhn;\nuse Modern::Perl;\nuse List::AllUtils qw(sum);\n\nsub new{ bless\\pop,shift }\n\nsub addends{\n\tmy $self=shift;\n\tmy $i=0;\n\t[reverse map { $i++%2?2*$_-($_>4?9:0):$_ } reverse split '', $$self]\n}\n\nsub checksum{\n\tsum @{shift->addends};\t\n}\n\nsub is_valid{\n\tnot shift->checksum % 10;\n}\n\nsub create{\n\tmy $self = shift;\n\t$_->is_valid and return $$_ for map{ Luhn->new($$self.$_) } 0..9;\n}\n\n1;	2014-04-17 10:31:16	\N	0	1	2014-04-06 11:51:14	2014-04-06 11:51:14	109	Luhn.pm
229	35	ecd6543367c38d4e83c0ff62	done	ruby	gigasecond	class Gigasecond\n  attr_accessor :date\n  def initialize birthdate\n    @date = gigasecond_anniversary(birthdate)\n  end\n\n  private\n\n  def gigasecond_anniversary(birthdate)\n    seconds_old = birthdate.to_time.to_i\n    anniversary = Time.at(seconds_old + 1000000000)\n    anniversary.to_date\n  end\nend	2014-01-28 21:39:53	\N	0	1	2014-01-17 14:22:37	2014-01-17 14:22:37	110	gigasecond.rb
230	35	a3180b461afc8b132da6919d	done	scala	word-count	class Phrase(content: String) {\n  val words =\n    content.\n      replaceAll("""[^A-Za-z0-9',\\s]""", "").\n      split("""[\\s,]+""").\n      map(_.toLowerCase)\n\n  def wordCount: Map[String, Int] =\n    words.groupBy(identity).mapValues(_.size)\n}	2014-05-01 05:08:00	\N	0	1	2014-04-26 15:06:46	2014-04-26 15:06:46	111	phrase.scala
231	35	e85cc85f443ee197f803246c	superseded	haskell	binary	module Binary\n( toDecimal )\nwhere\n\ntoDecimal :: String -> Int\ntoDecimal s | all zeroOrOne s = sum values\n            | otherwise       = 0\n  where\n  zeroOrOne c    = c == '0' || c == '1'\n  values         = zipWith digitValue (reverse s) ([0..] :: [Int])\n  digitValue b e = val b * 2 ^ e\n    where\n    val '1' = 1\n    val _   = 0	\N	\N	0	1	2014-02-01 11:12:03	2014-02-01 11:12:03	112	binary.hs
232	35	d0a7ad376004538071759f2a	done	haskell	binary	module Binary\n( toDecimal )\nwhere\n\nimport           Data.List (foldl')\n\ntoDecimal :: String -> Int\ntoDecimal s | all zeroOrOne s = foldl' incr 0 s\n            | otherwise       = 0\n  where\n  zeroOrOne c = c == '0' || c == '1'\n  incr a b    = a * 2 + val b\n    where\n    val '1' = 1\n    val _   = 0	2014-04-02 22:33:00	\N	0	2	2014-03-30 21:52:55	2014-03-30 21:52:55	112	binary.hs
233	35	20a233d109bbc2aa870dd48a	done	javascript	nucleotide-count	var DNA = function(nucl){\n  this.sequence = nucl.split('');\n  this.tides = {\n      A: 0,\n      T: 0,\n      C: 0,\n      G: 0\n    };\n  this.countAll = function(){\n    for (var i = 0; i < this.sequence.length; i++){\n      this.tides[this.sequence[i]] += 1;\n    }\n    return this.tides;\n  }\n  this.nucleotideCounts = this.countAll();\n  this.count = function(letter) {\n    var counter = 0;\n    if (letter.match(/[ATCGU]/)){\n      for (var i = 0; i < this.sequence.length; i++){\n        if (this.sequence[i] === letter){\n          counter += 1\n        }\n      }\n      return counter;\n    }else{\n      throw new Error ("Invalid Nucleotide");\n    }\n  }\n};	2014-04-11 18:32:29	\N	0	3	2014-04-01 04:46:26	2014-04-01 04:46:26	113	nucleotide-count.js
234	35	666abbf0bdada460f7308299	superseded	javascript	nucleotide-count	var DNA = function(nucl){\n  this.sequence = nucl.split('');\n  this.tides = {\n      A: 0,\n      T: 0,\n      C: 0,\n      G: 0\n    };\n  this.countAll = function(){\n    for (var i = 0; i < this.sequence.length; i++){\n      this.tides[this.sequence[i]] += 1;\n    }\n    return this.tides;\n  }\n  this.nucleotideCounts = this.countAll();\n};\n\nDNA.prototype.count = function(letter) {\n  var counter = 0;\n  if (letter.match(/[ATCGU]/)){\n    for (var i = 0; i < this.sequence.length; i++){\n      if (this.sequence[i] === letter){\n        counter += 1\n      }\n    }\n    return counter;\n  }else{\n    throw new Error ("Invalid Nucleotide");\n  }\n};	\N	\N	0	1	2014-04-21 02:10:58	2014-04-21 02:10:58	113	nucleotide-count.js
235	35	2c35e8af9ed60992ee635a6c	superseded	javascript	nucleotide-count	var DNA = function(nucl){\n  this.sequence = nucl.split('');\n  this.tides = {\n      A: 0,\n      T: 0,\n      C: 0,\n      G: 0\n    };\n  this.countAll = function(){\n    for (var i = 0; i < this.sequence.length; i++){\n      this.tides[this.sequence[i]] += 1;\n    }\n    return this.tides;\n  }\n  this.nucleotideCounts = this.countAll();\n    this.count = function(letter) {\n    var counter = 0;\n    if (letter.match(/[ATCGU]/)){\n      for (var i = 0; i < this.sequence.length; i++){\n        if (this.sequence[i] === letter){\n          counter += 1\n        }\n      }\n      return counter;\n    }else{\n      throw new Error ("Invalid Nucleotide");\n    }\n  }\n};	\N	\N	0	2	2014-06-25 19:39:53	2014-06-25 19:39:53	113	nucleotide-count.js
236	35	c13590723adbad480cf4fcdb	superseded	go	anagram	package anagram\r\n\r\nimport (\r\n\t"sort"\r\n\t"strings"\r\n)\r\n\r\ntype Rune []rune\r\n\r\nfunc (r Rune) Len() int {\r\n\treturn len(r)\r\n}\r\n\r\nfunc (r Rune) Swap(i, j int) {\r\n\tr[i], r[j] = r[j], r[i]\r\n}\r\n\r\nfunc (r Rune) Less(i, j int) bool {\r\n\treturn r[i] < r[j]\r\n}\r\n\r\nfunc stringSort(s string) string {\r\n\trunes := []rune(s)\r\n\tsort.Sort(Rune(runes))\r\n\treturn string(runes)\r\n}\r\n\r\n// two sorted anagrams will always be the same word\r\nfunc Detect(subject string, candidates []string) []string {\r\n\r\n\tvar anagrams = make([]string, 0)\r\n\r\n\t// sort subject\r\n\tsortedSubject := stringSort(strings.ToLower(subject))\r\n\r\n\t// for each candidate\r\n\tfor _, candidate := range candidates {\r\n\r\n\t\tcandidate = strings.ToLower(candidate)\r\n\r\n\t\tif subject == candidate {\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\t// sort the candidate\r\n\t\tsortedCandidate := stringSort(candidate)\r\n\r\n\t\tif sortedCandidate == sortedSubject {\r\n\t\t\tanagrams = append(anagrams, candidate)\r\n\t\t}\r\n\t}\r\n\treturn anagrams\r\n}\r	\N	\N	0	1	2013-12-12 04:37:56	2013-12-12 04:37:56	114	anagram.go
237	35	334b2ce485c01d40d9ff5953	superseded	go	anagram	package anagram\r\n\r\nimport (\r\n\t"sort"\r\n\t"strings"\r\n)\r\n\r\ntype Rune []rune\r\n\r\nfunc (r Rune) Len() int { return len(r) }\r\n\r\nfunc (r Rune) Swap(i, j int) { r[i], r[j] = r[j], r[i] }\r\n\r\nfunc (r Rune) Less(i, j int) bool { return r[i] < r[j] }\r\n\r\nfunc stringSort(s string) string {\r\n\trunes := []rune(s)\r\n\tsort.Sort(Rune(runes))\r\n\treturn string(runes)\r\n}\r\n\r\nfunc Detect(subject string, candidates []string) (anagrams []string) {\r\n\tanagrams = make([]string, 0)\r\n\tsortedSubject := stringSort(strings.ToLower(subject))\r\n\tfor _, candidate := range candidates {\r\n\t\tcandidate = strings.ToLower(candidate)\r\n\t\tif subject == candidate {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tsortedCandidate := stringSort(candidate)\r\n\t\t// two sorted anagrams will always be the same word\r\n\t\tif sortedCandidate == sortedSubject {\r\n\t\t\tanagrams = append(anagrams, candidate)\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r	\N	\N	0	2	2014-03-10 18:27:47	2014-03-10 18:27:47	114	anagram.go
238	35	9c3e7186596145be864c46e5	done	go	anagram	package anagram\r\n\r\nimport (\r\n\t"sort"\r\n\t"strings"\r\n)\r\n\r\ntype Rune []rune\r\n\r\nfunc (r Rune) Len() int           { return len(r) }\r\nfunc (r Rune) Swap(i, j int)      { r[i], r[j] = r[j], r[i] }\r\nfunc (r Rune) Less(i, j int) bool { return r[i] < r[j] }\r\n\r\nfunc stringSort(s string) string {\r\n\trunes := []rune(s)\r\n\tsort.Sort(Rune(runes))\r\n\treturn string(runes)\r\n}\r\n\r\nfunc Detect(subject string, candidates []string) (anagrams []string) {\r\n\tanagrams = make([]string, 0)\r\n\tsortedSubject := stringSort(strings.ToLower(subject))\r\n\tfor _, candidate := range candidates {\r\n\t\tcandidate = strings.ToLower(candidate)\r\n\t\tif subject == candidate {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tsortedCandidate := stringSort(candidate)\r\n\t\t// two sorted anagrams will always be the same word\r\n\t\tif sortedCandidate == sortedSubject {\r\n\t\t\tanagrams = append(anagrams, candidate)\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r	2014-05-12 19:36:51	\N	0	3	2014-05-03 11:10:26	2014-05-03 11:10:26	114	anagram.go
239	35	6043b55294dda0083ea20129	done	ruby	pig-latin	class PigLatin\n\n  VOWELS = ["a", "e", "i", "o", "u"]\n\n  CONSONANTS = ["qu"] + ("a".."z").to_a - VOWELS\n\n  def self.translate(string)\n    string.split(" ").map do | word |\n      translate_word(word)\n    end.join(" ")\n  end\n\nprivate\n\n#   def self.translate_word(string)\n#     rest_of_word = ""\n#     consonants = ""\n#     string.each_char.with_index do | char, index |\n#       if VOWELS.include?(char)\n#         rest_of_word = string[index..-1]\n#         break\n#       else\n#         if char == "q"\n#           consonants += char + string[index+1]\n#           rest_of_word = string[index+2..-1]\n#           break\n#         else\n#           consonants += char\n#         end\n#       end\n#     end\n#     rest_of_word + consonants + "ay"\n#   end\n# end\n\n\n  def self.translate_word(string)\n    start_at = 0\n    string.each_char.with_index do |char, index|\n      if VOWELS.include?(char)\n        start_at = index\n        if char == "u" && string[index-1] == "q"\n          start_at = index + 1\n        end\n        break\n      end\n    end\n    string[start_at..-1] + string[0...start_at] + "ay"\n  end\nend	2014-02-18 22:28:40	\N	0	1	2014-02-14 19:18:51	2014-02-14 19:18:51	115	pig-latin.rb
261	34	fc12d943e18b1df05c8f65a6	done	go	difference-of-squares	package diffsquares\n\n// SquareOfSums squares the sums the numbers 0...n\nfunc SquareOfSums(n int) int {\n\treturn (n*n*n*n + 2*n*n*n + n*n) / 4\n}\n\n// SumOfSquares sums the squares of numbers 0...n\nfunc SumOfSquares(n int) int {\n\treturn n * (n + 1) * (2*n + 1) / 6\n}\n\n// Difference subtracts SumOfSquares from SquareOfSums\nfunc Difference(n int) int {\n\treturn SquareOfSums(n) - SumOfSquares(n)\n}	2014-04-13 10:30:08	\N	0	2	2014-04-07 03:09:14	2014-04-07 03:09:14	126	difference_of_squares.go
262	13	817cb06d9db5452f6e341a1c	superseded	javascript	word-count	function count_each() {\n    var WORD_SEPARATOR = /[^a-zA-Z0-9]/,\n        word_counts = {},\n        word_list = [],\n        input_string = "";\n\n    count_each_word_of = function(input) {\n        input_string = input.toLowerCase();\n        make_word_list();\n        return count_words();\n    };\n\n    var make_word_list = function() {\n        word_list = input_string.split(WORD_SEPARATOR);\n        word_counts = {};\n    };\n\n    var count_words = function() {\n        var word_index, word;\n        for(word_index in word_list) {\n            word = word_list[word_index].trim();\n            if(word.length > 0)\n                update_counts_for_word(word);\n        }\n\n        return word_counts;\n    };\n\n    var update_counts_for_word = function(word) {\n        if(word_counts[word] === undefined) {\n            word_counts[word] = 1;\n        }\n        else {\n            word_counts[word]++;\n        }\n    };\n\n    return count_each_word_of;\n} \n\nmodule.exports = count_each();	\N	\N	0	1	2014-03-03 07:09:05	2014-03-03 07:09:05	127	word-count.js
292	40	89e31502f6ee5451d27d7ec0	pending	javascript	robot-name	var POSSIBLE_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\nvar POSSIBLE_NUMBER = "0123456789";\nvar Robot = function(){\n    var text = '';\n    this.reset = function(){\n        text = '';\n        for(var i=0; i < 5; i++){\n            if(i < 2)\n                text += POSSIBLE_STRING.charAt(Math.floor(Math.random()*POSSIBLE_STRING.length));\n            else\n                text += POSSIBLE_NUMBER.charAt(Math.floor(Math.random()*POSSIBLE_NUMBER.length));\n        }\n        this.name = text;\n    }\n    this.reset();\n}\n\nmodule.exports = Robot;	\N	\N	0	1	2014-03-15 02:03:13	2014-03-15 02:03:13	140	robot-name.js
399	41	8c4134968515bb08eab1ac08	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn- sort-word\n  [word]\n    (sort (lower-case word)))\n\n(defn- not-same?\n  [word anagram]\n    (not=(lower-case anagram) word))\n\n(defn- anagram?\n  [word anagram]\n    (= word (sort-word anagram)))\n\n(defn- is-anagram?\n  [word anagram]\n  (and (not-same? word anagram) (anagram? word anagram)))\n\n(defn anagrams-for\n  [word candidates]  \n  \t(let [sorted-word (sort-word word)]    \n      (filter #(is-anagram? sorted-word %) candidates)))	\N	\N	0	4	2014-06-19 12:58:49	2014-06-19 12:58:49	195	anagram.clj
240	35	06c26858f0ed877af7b25dd6	done	ruby	phone-number	require 'pry'\n\nclass PhoneNumber\n\n\tdef initialize(string)\n\t\t@number = string\n\tend\n\n\tdef number\n\t\treturn bad_number if letter_check(@number)\n\t\tnum = tokenize(@number)\n\t\tcheck_eleven_digits_with_one(num)\n\t\tlength_check(num)\n\tend\n\n\tdef area_code\n\t\tnumber[0..2]\n\tend\n\n\tdef to_s\n\t\t"(#{area_code}) #{middle_numbers}-#{end_numbers}"\n\tend\n\n\tprivate\n\n\tdef length_check(number)\n\t\tif number.length < 10 or number.length > 10\n\t\t\tbad_number\n\t\telse\n\t\t\tnumber\n\t\tend\n\tend\n\n\tdef check_eleven_digits_with_one(number)\n\t\tif number.length == 11 and number[0] == "1"\n\t\t\tnumber[0] = ''\n\t\t\tnumber\n\t\telse\n\t\t\tbad_number\n\t\tend\n\tend\n\n\tdef letter_check(number)\n\t\tnumber.match(/[a-z]/)\n\tend\n\n\tdef middle_numbers\n\t\tnumber[3..5]\n\tend\n\n\tdef end_numbers\n\t\tnumber[6..9]\n\tend\n\n\tdef tokenize(number)\n\t\tnumber.gsub(/\\D/, "")\n\tend\n\n\tdef bad_number\n\t\t"0000000000"\n\tend\nend	2013-11-25 04:40:58	\N	0	3	2013-11-18 10:44:28	2013-11-18 10:44:28	116	phone_number.rb
241	35	049cbba885eeafc316ceac41	superseded	ruby	phone-number	class Phone\n\n  def initialize digits\n    @digits = digits.gsub(/[^0-9]/, "")\n  end\n\n  def number\n    if good_number?\n      @digits[0] =''\n      @digits\n    elsif bad_number?\n      "0000000000"\n    else\n      @digits\n    end\n  end\n\n  def area_code\n    @digits[0..2]\n  end\n\n  def to_s \n    num = number\n    "(" + "#{num[0..2]}" + ") " + "#{num[3..5]}" + "-" + "#{num[6..9]}"\n  end\n\n  private\n\n  def good_number?\n    @digits.length == 11 && @digits[0] == '1'\n  end\n\n  def bad_number?\n    @digits.length == 11 or @digits.length == 9\n  end\nend	\N	\N	0	2	2014-05-16 18:38:28	2014-05-16 18:38:28	116	phone-number.rb
242	35	845af08c9269e7887a324acc	superseded	ruby	phone-number	class Phone\n\n  def initialize digits\n    @digits = digits.gsub(/[^0-9]/, "")\n  end\n\n  def number\n    if @digits.length == 11 && @digits[0] == '1'\n      @digits[0] =''\n      @digits\n    elsif @digits.length == 11 or @digits.length == 9\n      "0000000000"\n    else\n      @digits\n    end\n  end\n\n  def area_code\n    @digits[0..2]\n  end\n\n  def to_s \n    pretty_print_number\n  end\n\n  private\n\n  def pretty_print_number\n    num = number\n    "(" + "#{num[0..2]}" + ") " + "#{num[3..5]}" + "-" + "#{num[6..9]}"\n  end\n\nend	\N	\N	0	1	2014-05-29 19:05:46	2014-05-29 19:05:46	116	phone-number.rb
243	35	90fb3eab96c5c5f812bd33ca	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram? [a b]\n  (= (sort (seq a))\n     (sort (seq b))))\n\n(defn anagrams-for\n  "returns a list of anagrams for a given word and list of possible anagrams"\n  [word possibles]\n  (loop [anagrams []\n         my-possibles (seq possibles)]\n    (if-let [possible (first my-possibles)]\n      (if (anagram? word possible)\n        (recur (conj anagrams possible) (rest my-possibles))\n        (recur anagrams (rest my-possibles)))\n      anagrams)))	\N	\N	0	1	2014-02-06 12:25:10	2014-02-06 12:25:10	117	anagram.clj
244	35	ab43a364766f60d933555f25	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram [a b]\n  (when (= (sort (seq a))\n           (sort (seq b)))\n    b))\n\n(defn anagrams-for\n  "returns a list of anagrams for a given word and list of possible anagrams"\n  [word possibles]\n  (filter identity (mapv #(anagram word %) possibles)))	\N	\N	0	2	2014-03-31 13:14:37	2014-03-31 13:14:37	117	anagram.clj
245	35	9036648d4f1bef8b1090b22b	done	clojure	anagram	(ns anagram)\n\n(defn- normalize [word]\n  (sort word))\n\n(defn anagrams-for\n  "returns a list of anagrams for a given word and list of possible anagrams"\n  [word possibles]\n  (let [normalized-word (normalize word)]\n    (filter #(= normalized-word (normalize %)) possibles)))	2014-05-19 14:33:54	\N	0	3	2014-05-10 21:52:49	2014-05-10 21:52:49	117	anagram.clj
246	35	714d92afbfddc478fac87c0c	superseded	ruby	hamming	class Hamming\n\n  def self.compute(val1, val2)\n    acum = 0\n    \n    for i in 0..val1.length\n\n      if val1[i] != val2[i]\n        acum = acum + 1\n      end\n\n    end\n\n    return acum\n\n  end\nend	\N	\N	0	1	2014-03-04 17:28:56	2014-03-04 17:28:56	118	hamming.rb
247	35	2829762315aed2c7c4fe0c17	done	ruby	hamming	# cuarto rubocop\nclass Hamming\n  def self.compute(val1, val2)\n    acum = 0\n    j = 1\n    for i in 0..val1.length\n      if val1[i] != val2[i]\n        acum = acum + 1\n        j = j + 2\n      end\n    end\n    acum\n  end\nend	2014-05-26 23:59:43	\N	0	2	2014-05-18 18:17:57	2014-05-18 18:17:57	118	hamming.rb
248	35	cebbab9a8889bb8092e103b9	superseded	go	accumulate	package accumulate\n\ntype function func(string) string\n\nfunc Accumulate(in []string, f function) []string {\n\tout := make([]string, len(in))\n\tfor i := 0; i < len(in); i++ {\n\t\tout[i] = f(in[i])\n\t}\n\treturn out\n}	\N	\N	0	1	2014-01-03 03:38:09	2014-01-03 03:38:09	119	accumulate.go
249	35	2ee22af6613794dcfe691ac8	done	go	accumulate	package accumulate\n\ntype function func(string) string\n\nfunc Accumulate(in []string, f function) []string {\n\tout := make([]string, len(in))\n\tfor i, str := range in {\n\t\tout[i] = f(str)\n\t}\n\treturn out\n}	2014-04-14 07:37:06	\N	0	2	2014-04-13 20:24:14	2014-04-13 20:24:14	119	accumulate.go
285	40	18c8c29df13cbc22987175ab	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport qualified Data.List as L\nimport Data.Char\n\nnormalized :: String -> String\nnormalized x = L.sort $ map toLower x\n\nanagramsFor :: String -> [String] -> [String]\n-- anagramsFor x xs = [ a | a <- xs, a /= x, normalized a == normalized x]\nanagramsFor x xs = filter (\\a -> normalized a == normalized x) . filter (/= x) 	\N	\N	0	2	2013-11-18 13:52:08	2013-11-18 13:52:08	138	anagram.hs
286	40	2d14ae248092c93690472008	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport qualified Data.List as L\nimport Data.Char\n\nnormalized :: String -> String\nnormalized x = L.sort $ map toLower x\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor x xs = [ a | a <- xs, a /= x, normalized a == normalized x]	\N	\N	0	1	2014-02-09 16:35:39	2014-02-09 16:35:39	138	anagram.hs
287	40	1e1315f23871bba8e9b59b9e	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport qualified Data.List as L\nimport Data.Char\n\nnormalized :: String -> String\nnormalized x = L.sort $ map toLower x\n\nanagramsFor :: String -> [String] -> [String]\n-- anagramsFor x xs = [ a | a <- xs, a /= x, normalized a == normalized x]\nanagramsFor x xs = filter (\\a -> normalized a == normalized x) $ filter (/= x) xs	\N	\N	0	3	2014-02-15 17:49:47	2014-02-15 17:49:47	138	anagram.hs
288	40	df387b894ce87dc2389f7158	pending	haskell	anagram	module Anagram (anagramsFor) where\n\nimport qualified Data.List as L\nimport Data.Char\nimport Data.Function\n\nnormalized :: String -> String\nnormalized x = L.sort $ map toLower x\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor x xs = \n  let matches = (==) `on` normalized\n  in filter (matches x) $ filter (/= x) xs	\N	\N	0	4	2014-05-10 19:40:31	2014-05-10 19:40:31	138	anagram.hs
289	40	bd60d76a0a6507e57da6f1d2	superseded	haskell	etl	module ETL\n\n(transform)\n\nwhere\n\nimport Data.Char (toLower)\nimport Data.List as L\nimport Data.Map.Strict as M\n\ntype Letter = String\ntype OldFormat = M.Map Int [Letter]\ntype NewFormat = M.Map Letter Int\n\ntransform :: OldFormat -> NewFormat\ntransform old = M.fromList new_assocs\n    where \n        new_assocs = concatMap rev $ M.toList old\n        rev (scr, ltrs) = [(L.map toLower l, scr) | l <- ltrs]	\N	\N	0	1	2013-12-16 18:49:19	2013-12-16 18:49:19	139	ETL.hs
290	40	80e51ed6306ac739b10374a4	superseded	haskell	etl	module ETL\n\n(transform)\n\nwhere\n\nimport Data.Char (toLower)\nimport Data.List as L\nimport Data.Map.Strict as M\n\ntype Letter = String\ntype OldFormat = M.Map Int [Letter]\ntype NewFormat = M.Map Letter Int\n\ntransform :: OldFormat -> NewFormat\ntransform old = M.fromList newAssocs\n    where \n        newAssocs = concatMap rev $ M.toList old\n        rev (scr, ltrs) = [(L.map toLower l, scr) | l <- ltrs]	\N	\N	0	2	2013-12-31 10:40:29	2013-12-31 10:40:29	139	ETL.hs
250	35	73bd73a0b90cbb66af759da6	done	haskell	beer-song	module Beer\n    ( sing\n    , verse\n    ) where\n\nimport Data.List\nimport Text.Printf\n\nnoLeft :: String\nnoLeft = \n    "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\noneLeft :: String\noneLeft = \n    "Take it down and pass it around, no more bottles of beer on the wall.\\n"  \n\nnleft :: Int -> String\nnleft 2 = foo 2 ++ \n    printf "Take one down and pass it around, 1 bottle of beer on the wall.\\n" \nnleft n =               \n    foo n ++\n    printf "Take one down and pass it around, %d bottles of beer on the wall.\\n"\n        (n - 1)\n        \n\nfoo :: Int -> String\nfoo 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n"\nfoo 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\n"\nfoo n = printf "%d bottles of beer on the wall, %d bottles of beer.\\n" n n\n\n\nsing :: Int -> Int -> String \nsing start end = \n    (++ "\\n") . intercalate "\\n" . map verse $ [start, start - 1 .. end]\n                                                                         \nverse :: Int -> String\nverse 0 = foo 0 ++ noLeft\nverse 1 = foo 1 ++ oneLeft\nverse n = nleft n	2013-12-25 19:50:30	\N	0	1	2013-12-14 16:21:29	2013-12-14 16:21:29	120	beer-song.hs
251	35	b74a1e6f91bfb6f69dca0d88	done	haskell	accumulate	module Accumulate where\n\naccumulate :: (a->b) -> [a] -> [b]\naccumulate f = foldl (\\acc x -> acc ++ [f x]) [] \n-- accumulate = map would be the trivial solution	2013-12-03 11:44:57	\N	0	1	2013-11-30 02:21:19	2013-11-30 02:21:19	121	accumulate.hs
252	35	c8439fc71d054ffc0de9b56a	done	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond time.Duration = 1e9 * time.Second\n\nfunc AddGigasecond(input time.Time) time.Time {\n\treturn input.Add(Gigasecond)\n}	2013-12-12 22:01:40	\N	0	1	2013-12-08 20:40:43	2013-12-08 20:40:43	122	gigasecond.go
253	35	95540eb98e19848a7a9fa07a	superseded	javascript	word-count	function Words(sentence) {\n    'use strict';\n\n    this.count = {};\n\n    var countWord = function(word) {\n        word = word.toLowerCase();\n        if (this.count[word]) {\n            this.count[word] += 1;\n        } else {\n            this.count[word] = 1;\n        }\n    }.bind(this);\n\n    sentence.match(/[a-zA-Z0-9]+/g).forEach(countWord);\n}\n\nmodule.exports = Words;	\N	\N	0	4	2014-01-04 08:09:39	2014-01-04 08:09:39	123	word-count.js
254	35	d30d71db70a571c93f07d0b4	done	javascript	word-count	function Words(sentence) {\n    'use strict';\n\n    this.count = {};\n\n    var countWord = function(word) {\n        word = word.toLowerCase();\n        this.count[word] = (this.count[word] || 0) + 1;\n    }.bind(this);\n\n    sentence.match(/[a-zA-Z0-9]+/g).forEach(countWord);\n}\n\nmodule.exports = Words;	2014-03-06 02:28:04	\N	0	5	2014-02-23 12:21:15	2014-02-23 12:21:15	123	word-count.js
255	35	2b05f308feb13599f403a594	superseded	javascript	word-count	function Words(sentence) {\n    'use strict';\n\n    var countWordsIn = function(sentence) {\n        var wordsCounter = {};\n\n        sentence.split(' ').forEach(function(word) {\n            word = normalizeWord(word);\n\n            if (word === '') {\n                return;\n            }\n\n            if (typeof wordsCounter[word] === 'number') {\n                wordsCounter[word] += 1;\n            } else {\n                wordsCounter[word] = 1;\n            }\n        });\n\n        return wordsCounter;\n    };\n\n    var normalizeWord = function(word) {\n        return stripPunctuation(word).toLowerCase();\n    };\n\n    var stripPunctuation = function(word) {\n        return word.replace(/[^a-zA-Z0-9]+/, '');\n    };\n\n    this.count = countWordsIn(sentence);\n}\n\nmodule.exports = Words;	\N	\N	0	1	2014-02-25 05:25:39	2014-02-25 05:25:39	123	word-count.js
256	35	98a3e21459407ed707e9539a	superseded	javascript	word-count	function Words(sentence) {\n    'use strict';\n\n    this.count = {};\n\n    var countWord = function(word) {\n        word = normalizeWord(word);\n\n        if (this.count[word]) {\n            this.count[word] += 1;\n        } else {\n            this.count[word] = 1;\n        }\n    }.bind(this);\n\n    var normalizeWord = function(word) {\n        return word.toLowerCase();\n    };\n\n    sentence.match(/[a-zA-Z0-9]+/g).forEach(countWord);\n}\n\nmodule.exports = Words;	\N	\N	0	3	2014-02-27 05:48:52	2014-02-27 05:48:52	123	word-count.js
257	35	482fa22ee429e1b357ebf4f1	superseded	javascript	word-count	function Words(sentence) {\n    'use strict';\n\n    this.count = {};\n\n    var countWord = function(word) {\n        word = normalizeWord(word);\n\n        if (typeof this.count[word] === 'number') {\n            this.count[word] += 1;\n        } else {\n            this.count[word] = 1;\n        }\n    };\n\n    var normalizeWord = function(word) {\n        return word.toLowerCase();\n    };\n\n    sentence.match(/[a-zA-Z0-9]+/g).forEach(countWord, this);\n}\n\nmodule.exports = Words;	\N	\N	0	2	2014-03-20 01:49:21	2014-03-20 01:49:21	123	word-count.js
258	29	98745836af4ab12a3bcacfdf	done	python	rna-transcription	THYMIDINE = "T"\nURACIL = "U"\n\nclass DNA(object):\n\n  def __init__(self, dna_string):\n    self.dna_string = dna_string\n\n  def to_rna(self):\n    return self.dna_string.replace(THYMIDINE, URACIL)	2014-04-27 20:14:03	\N	0	1	2014-04-16 06:38:57	2014-04-16 06:38:57	124	rna-transcription.py
259	34	f5b21f79aefb634beeaecd2b	done	ruby	grade-school	class School\n\tdef initialize\n\t\t@roster = {}\n\tend\n\n\tdef db\n\t\t@roster\n\tend\n\n\tdef add(student, grade)\n\t\tcurrent_students = @roster[grade]\n\n\t\tif current_students\n\t\t\tcurrent_students << student\n\t\telse\n\t\t\tcurrent_students = [student]\n\t\tend\n\n\t\t@roster[grade] = current_students\n\tend\n\n\tdef grade(grade)\n\t\t@roster[grade] ? @roster[grade] : []\n\tend\n\n\tdef sort \n\t\tordered = {}\n\t\t@roster.sort.each do |key, value| \n\t\t\tordered[key] = @roster[key]\n\t\t\tordered[key] = value.sort\n\t\tend\n\n\t\tordered\n\tend\nend	2013-12-12 17:58:15	\N	0	1	2013-12-07 12:02:25	2013-12-07 12:02:25	125	grade-school.rb
260	34	c127c8979582cb0bd49b9b83	superseded	go	difference-of-squares	package diffsquares\n\n// SquareOfSums squares the sums the numbers 0...n\nfunc SquareOfSums(n int) int {\n\tsums := 0\n\tfor i := n; i > 0; i-- {\n\t\tsums += i\n\t}\n\treturn sums * sums\n}\n\n// SumOfSquares sums the squares of numbers 0...n\nfunc SumOfSquares(n int) int {\n\tsums := 0\n\tfor i := n; i > 0; i-- {\n\t\tsums += i * i\n\t}\n\treturn sums\n}\n\n// Difference subtracts SumOfSquares from SquareOfSums\nfunc Difference(n int) int {\n\treturn SquareOfSums(n) - SumOfSquares(n)\n}	\N	\N	0	1	2013-12-07 19:50:17	2013-12-07 19:50:17	126	difference_of_squares.go
317	40	455eb271a1ebb454686576f2	superseded	ruby	grains	class Grains\n  def initialize\n    build_grains\n  end\n  def square(id)\n    @grains[id]\n  end\n  def total\n    @grains.values.reduce(:+)\n  end\n  def build_grains\n    @grains = (2..64).each_with_object({1 => 1}) do |n, obj| \n      obj[n] = obj[n-1] * 2\n    end\n  end\nend	\N	\N	0	1	2013-11-23 07:19:16	2013-11-23 07:19:16	155	grains.rb
318	40	40474788083fa77d4e8fcd36	pending	ruby	grains	class Grains\n  def initialize(size=64)\n    @size = size\n  end\n  def square(id)\n    1 << (id - 1)\n  end\n  def total\n    square(@size+1) - 1\n  end\nend	\N	\N	0	2	2014-03-25 18:39:56	2014-03-25 18:39:56	155	grains.rb
330	5	39c5b029bc5522256d7deffb	pending	perl5	binary-search	use 5.20.0;\n\npackage BinarySearch {\n\n    use experimental 'signatures', 'postderef';\n\n    sub binary_search( $key, $data ) {\n        my( $min, $max ) = ( 0, $data->$#* );\n\n        until ( $min > $max ) {\n            die if $data->[$min] gt $data->[$max];\n\n            my $middle = int( ( $max + $min ) / 2 );\n\n            return $middle if $data->[$middle] eq $key;\n\n            my $verdict = $data->[$middle] lt $key;\n\n            ( $verdict ? $min : $max ) = $middle + ( $verdict ? +1 : -1 );\n        }\n\n        return undef;\n    }\n\n};\n\n1;	\N	\N	0	1	2014-03-21 11:52:19	2014-03-21 11:52:19	162	BinarySearch.pm
263	13	783067097286a4276d63f0df	superseded	javascript	word-count	function count_each() {\n    var WORD_SEPARATOR = /\\W+/;\n\n    count_each_word_of = function(input) {\n        var input_string = input.toLowerCase();\n        var word_list = make_word_list(input_string);\n        return count_words(word_list);\n    };\n\n    var make_word_list = function(input_string) {\n        var word_list = input_string.split(WORD_SEPARATOR);\n        return remove_empties_from(word_list);\n    };\n\n    var remove_empties_from = function(word_list) {\n        return word_list.filter(function(word) { \n            return word.length > 0;\n        });\n    }\n\n    var count_words = function(word_list) {\n        var word_index,\n            word,\n            word_counts = {};\n\n        for(word_index in word_list) {\n            word = word_list[word_index];\n            update_counts_for_word(word_counts, word);\n        }\n\n        return word_counts;\n    };\n\n    var update_counts_for_word = function(word_counts, word) {\n        if(word_counts[word] === undefined) {\n            word_counts[word] = 1;\n        }\n        else {\n            word_counts[word]++;\n        }\n    };\n\n    return count_each_word_of;\n} \n\nmodule.exports = count_each();	\N	\N	0	2	2014-03-04 10:36:47	2014-03-04 10:36:47	127	word-count.js
264	13	1b0640b120dcf7ab9963078e	superseded	javascript	word-count	;\r\nvar countEach = function() {\r\n    var WORD_GREP = /\\w+/g,\r\n        downcase = function(word) {\r\n            return word.toLowerCase();\r\n        },\r\n        incrementCount = function(wordCounts, word) {\r\n            wordCounts[word] = wordCounts[word] + 1 || 1;\r\n            return wordCounts;\r\n        };\r\n\r\n\r\n    return function(inputString) {\r\n        return inputString.match(WORD_GREP).\r\n                   map(downcase).reduce(incrementCount, {});\r\n    };\r\n};\r\n\r\nmodule.exports = countEach();\r	\N	\N	0	3	2014-04-03 08:30:26	2014-04-03 08:30:26	127	word-count.js
265	13	5960a8c151517fad3c4b11c2	pending	javascript	word-count	;\r\nvar countEach = function() {\r\n    var WORD_GREP = /\\w+/g,\r\n        incrementCount = function(wordCounts, word) {\r\n            wordCounts[word] = wordCounts[word] + 1 || 1;\r\n            return wordCounts;\r\n        };\r\n\r\n\r\n    return function(inputString) {\r\n        var wordList = inputString.toLowerCase().match(WORD_GREP);\r\n        return wordList.reduce(incrementCount, {});\r\n    };\r\n};\r\n\r\nmodule.exports = countEach();\r	\N	\N	0	4	2014-04-06 06:11:14	2014-04-06 06:11:14	127	word-count.js
266	13	9fc850737c1a171c6666cc7b	pending	clojure	rna-transcription	(ns dna)\n(def replace_base {\\G \\C\n                   \\C \\G\n                   \\T \\A\n                   \\A \\U})\n(defn to-rna\n  [strand]\n  (let [ch (first strand)\n         lst (rest strand)]\n    (if ch\n      (let [rep (replace_base ch)]\n        (assert (not (nil? rep)))\n        (str rep (to-rna lst)))\n      "")))	\N	\N	0	1	2014-03-04 05:51:09	2014-03-04 05:51:09	128	dna.clj
267	13	c89eeb6ca08c05e4d4187883	superseded	haskell	raindrops	module Raindrops (convert) where\n\nimport PrimeFactors (primeFactors)\nimport Data.List (nub)\n\nconvert :: Integer -> String\nconvert x = convert' $ translator $ nub $ primeFactors x\n  where convert' "" = show x\n        convert' s  = s\n        translator  = concatMap translate\n        translate 3 = "Pling"\n        translate 5 = "Plang"\n        translate 7 = "Plong"\n        translate _ = ""	\N	\N	0	1	2014-05-12 03:01:59	2014-05-12 03:01:59	129	Raindrops.hs
268	13	6768426cd3db58b38b220d75	pending	haskell	raindrops	module Raindrops (convert) where\n\nconvert :: Integer -> String\nconvert x = convert' translator\n  where convert' "" = show x\n        convert' s  = s\n        translator  = concatMap mapper [3, 5, 7]\n        mapper d    = if x `mod` d == 0 then translate d else ""\n        translate 3 = "Pling"\n        translate 5 = "Plang"\n        translate 7 = "Plong"\n        translate _ = ""	\N	\N	0	2	2014-05-17 10:23:37	2014-05-17 10:23:37	129	Raindrops.hs
269	13	756d58db95fde9b5d6dcf86d	pending	ruby	bob	class Bob\n\n  def hey message\n    if silent? message\n     'Fine. Be that way!'\n    elsif yelling? message\n     'Woah, chill out!'\n    elsif question? message\n     'Sure.'\n    else\n     "Whatever." \n    end\n  end\n  \n  private\n  def yelling? message\n    message == message.upcase\n  end\n\n  def question? message\n    message.end_with?('?')\n  end\n\n  def silent? message\n    message.nil? || message.strip.empty?\n  end\n\nend	\N	\N	0	1	2014-03-25 03:03:44	2014-03-25 03:03:44	130	bob.rb
270	40	26081b82345298c48d309b06	superseded	python	bob	class Bob:\n  \n  def hey(self, to_bob):\n    # to_bob should be a string representing an expression said to Bob.\n    # Remove spaces since they aren't relevant to the logic of Bob's reponse.\n    to_bob = to_bob.strip()\n    return self.bobs_response(to_bob)\n\n  def bobs_response(self, to_bob):\n    # Check if anything meaningful was said to Bob\n    if len(to_bob):\n\n      # A string that is all caps indicates yelling\n      if to_bob.upper() == to_bob and to_bob.lower() != to_bob:\n        return 'Woah, chill out!'\n\n      # A string ending in '?' indicates a question.\n      elif to_bob[-1] == '?':\n        return 'Sure.'\n\n      else:\n        return 'Whatever.'\n\n    # Bob doesn't like the silent treatment\n    else:\n      return 'Fine. Be that way!'	\N	\N	0	3	2013-11-26 09:24:46	2013-11-26 09:24:46	131	bob.py
271	40	bee49e76b3f5c7fc7af136f4	superseded	python	bob	class Bob:\n\n  def hey(self, what_I_say_to_bob):\n    # Spaces are meaningless. Remove them.\n    what_I_say_to_bob = what_I_say_to_bob.strip()\n\n    if len(what_I_say_to_bob) > 0:\n\n      if ( what_I_say_to_bob.upper() == what_I_say_to_bob \n           and what_I_say_to_bob.lower() != what_I_say_to_bob ):\n        return self.when_yelled_at()\n\n      elif what_I_say_to_bob[-1] == '?':\n        return self.when_asked_a_question()\n\n      else:\n        return self.default_response()\n\n    elif len(what_I_say_to_bob) == 0:\n      return self.when_ignored()\n    \n\n  def when_asked_a_question(self):\n    return 'Sure.'\n\n  def when_yelled_at(self):\n    return 'Woah, chill out!'\n\n  def when_ignored(self):\n    return 'Fine. Be that way!'\n\n  def default_response(self):\n    return 'Whatever.'	\N	\N	0	2	2014-04-01 13:38:45	2014-04-01 13:38:45	131	bob.py
272	40	475ac7069a5ef3afaf2528e6	pending	python	bob	class Bob:\n  \n  def hey(self, to_bob):\n    # to_bob should be a string representing an expression said to Bob.\n    # Remove spaces since they aren't relevant to the logic of Bob's reponse.\n    to_bob = to_bob.strip()\n    return self.bobs_response(to_bob)\n\n  def bobs_response(self, to_bob):\n    # Check if anything meaningful was said to Bob\n    if len(to_bob):\n\n      # A string that is all caps indicates yelling\n      if to_bob.isupper():\n        return 'Woah, chill out!'\n\n      # A string ending in '?' indicates a question.\n      elif to_bob.endswith('?'):\n        return 'Sure.'\n\n      else:\n        return 'Whatever.'\n\n    # Bob doesn't like the silent treatment\n    else:\n      return 'Fine. Be that way!'	\N	\N	0	4	2014-05-13 14:30:13	2014-05-13 14:30:13	131	bob.py
291	40	63257e17d98665bc84a76248	pending	haskell	etl	module ETL\n\n(transform)\n\nwhere\n\nimport Data.Char (toLower)\nimport qualified Data.Map.Strict as M\n\ntype Letter = String\ntype OldFormat = M.Map Int [Letter]\ntype NewFormat = M.Map Letter Int\n\ntransform :: OldFormat -> NewFormat\ntransform old = M.fromList newAssocs\n    where \n        newAssocs = concatMap rev $ M.toList old\n        rev (scr, ltrs) = [(fmap toLower l, scr) | l <- ltrs]	\N	\N	0	3	2014-02-15 06:22:48	2014-02-15 06:22:48	139	ETL.hs
273	40	1da313d9cd5f2e4274c0ba92	superseded	python	bob	class Bob:\n\n  def hey(self, what_I_say_to_bob):\n    # Spaces are meaningless. Remove them.\n    what_I_say_to_bob = what_I_say_to_bob.strip()\n\n    if len(what_I_say_to_bob) > 0:\n\n      if ( what_I_say_to_bob.upper() == what_I_say_to_bob \n           and what_I_say_to_bob.lower() != what_I_say_to_bob ):\n        return self.when_yelled_at()\n\n      elif what_I_say_to_bob[-1] == '?':\n        return self.when_asked_a_question()\n\n      else:\n        return self.default_response()\n\n    elif len(what_I_say_to_bob) == 0:\n      return self.when_ignored()\n    \n\n  def when_asked_a_question(self):\n    return 'Sure.'\n\n  def when_yelled_at(self):\n    # string is all caps\n    return 'Woah, chill out!'\n\n  def when_ignored(self):\n    # don't say anything\n    return 'Fine. Be that way!'\n\n  def default_response(self):\n    return 'Whatever.'	\N	\N	0	1	2014-05-26 04:12:22	2014-05-26 04:12:22	131	bob.py
274	40	d993054c9f4e81def0b6463a	superseded	haskell	pascals-triangle	module Triangle (triangle, row) where\n\ntriangle :: (Integral a) => [[a]]\ntriangle = iterate makeRow [1]\n  where\n    makeRow r = zipWith (+) (0:r) (r ++ [0])\n\nrow n = scanl (\\c r -> (c * (n-r+1)) `div` r) 1 [1..n]	\N	\N	0	1	2014-01-13 05:49:22	2014-01-13 05:49:22	132	pascals-triangle.hs
275	40	830c868552039fe989ec4ab5	pending	haskell	pascals-triangle	module Triangle (triangle, row) where\n\ntriangle :: (Integral a) => [[a]]\ntriangle = iterate makeRow [1]\n  where\n    makeRow r = zipWith (+) (0:r) (r ++ [0])\n\nrow :: (Integral a) => a -> [a]\nrow n = scanl (\\c r -> (c * (n-r)) `div` r) 1 [1..n-1]	\N	\N	0	2	2014-03-22 04:24:43	2014-03-22 04:24:43	132	pascals-triangle.hs
276	40	160510fef01d878750affa90	pending	ruby	secret-handshake	class SecretHandshake\n  TYPES = [\n    'wink',\n    'double blink',\n    'close your eyes',\n    'jump',\n  ]\n\n  def initialize bit_pattern\n    @bit_pattern = bit_pattern.to_i\n  end\n\n  def commands\n    commands =\n      TYPES.select.with_index do |_, index|\n        bit_on? index\n      end\n    commands.reverse! if reversed?\n    commands\n  end\n\n  private\n\n  def reversed?\n    bit_on? 4\n  end\n\n  def bit_on? bit\n    0 != @bit_pattern & (2**bit)\n  end\nend	\N	\N	0	1	2014-01-17 15:31:12	2014-01-17 15:31:12	133	secret_handshake.rb
277	40	c8455b95181ac3803b11d2ae	pending	perl5	rna-transcription	=head1 NAME\n\nDNA\n\n=head1 DESCRIPTION\n\n\n=head1 AUTHOR\n\nlhare\n\n=head1 METHODS\n\n=over\n\n=cut\n\npackage DNA;\n\nuse strict;\nuse warnings;\n\nsub to_rna {\n    my ($sequence) = @_;\n    $sequence =~ s/T/U/g;\n    return $sequence;\n}\n\n\n\n=back\n\n=cut\n\n1;	\N	\N	0	1	2013-12-26 11:37:38	2013-12-26 11:37:38	134	rna-transcription.pm
278	40	ec527095e687d5962745979a	superseded	javascript	bob	function Bob() {\n\t\n}\n\nBob.prototype.hey = function(input) {\n\t\n\tif (isShouting(input)) {\n\t\treturn 'Woah, chill out!';\n\t} else if (input.slice(-1) === '?') {\n\t\treturn 'Sure.';\n\t} else if (input.trim().length == 0) {\n\t\treturn 'Fine. Be that way!';\n\t};\n\treturn 'Whatever.';\n}\n\nfunction isShouting(str) {\n\tvar hasNonDigits = str.match(/[a-zA-Z]+/g);\n\treturn str === str.toUpperCase() && hasNonDigits;\n}\n\nmodule.exports = Bob;	\N	\N	0	1	2013-12-23 13:09:20	2013-12-23 13:09:20	135	bob.js
279	40	1af842a35664515f2cc7a0db	superseded	javascript	bob	function Bob() {\n\t\n}\n\nBob.prototype.hey = function(input) {\n\t\n\tinput = input.trim();\n\t\n\tvar shouting = isShouting(input);\n\tvar asking = input.slice(-1) === '?';\n\tvar silent = input.length == 0;\n\t\n\tif (silent) {\n\t\treturn 'Fine. Be that way!';\n\t} else if (shouting) {\n\t\treturn 'Woah, chill out!';\n\t} else if (asking) {\n\t\treturn 'Sure.';\n\t} \n\t\n\treturn 'Whatever.';\n}\n\nfunction isShouting(str) {\n\tvar hasNonDigits = str.match(/[a-zA-Z]+/g);\n\treturn str === str.toUpperCase() && hasNonDigits;\n}\n\nmodule.exports = Bob;	\N	\N	0	3	2014-04-29 04:05:34	2014-04-29 04:05:34	135	bob.js
280	40	fb2b98e966e4f3289ecdef8c	superseded	javascript	bob	function Bob() {\n\t\n}\n\nBob.prototype.hey = function(input) {\n\t\n\tinput = input.trim();\n\t\n\tif (isShouting(input)) {\n\t\treturn 'Woah, chill out!';\n\t} else if (input.slice(-1) === '?') {\n\t\treturn 'Sure.';\n\t} else if (input.length == 0) {\n\t\treturn 'Fine. Be that way!';\n\t};\n\treturn 'Whatever.';\n}\n\nfunction isShouting(str) {\n\tvar hasNonDigits = str.match(/[a-zA-Z]+/g);\n\treturn str === str.toUpperCase() && hasNonDigits;\n}\n\nmodule.exports = Bob;	\N	\N	0	2	2014-05-06 07:01:28	2014-05-06 07:01:28	135	bob.js
281	40	c3dda5e545269eeafbb8174c	superseded	javascript	bob	function Bob() {\n\t\n}\n\nBob.prototype.hey = function(input) {\n\t\n\tinput = input.trim();\n\t\n\tvar silent = input.length == 0;\n\tvar shouting = isShouting(input);\n\tvar asking = input.slice(-1) === '?';\n\t\n\tif (silent) {\n\t\treturn 'Fine. Be that way!';\n\t} else if (shouting) {\n\t\treturn 'Woah, chill out!';\n\t} else if (asking) {\n\t\treturn 'Sure.';\n\t} \n\t\n\treturn 'Whatever.';\n}\n\nfunction isShouting(str) {\n\tvar hasCharacters = str.match(/[a-zA-Z]+/g);\n\treturn str === str.toUpperCase() && hasCharacters;\n}\n\nmodule.exports = Bob;	\N	\N	0	4	2014-05-18 00:24:54	2014-05-18 00:24:54	135	bob.js
282	40	60ee9568a0dde7827b5aedd2	pending	javascript	bob	function Bob() {\n\t\n\tthis.hey = function hey(input) {\n\t\tinput = input.trim();\n\n\t\tvar silent = input.length === 0;\n\t\tvar shouting = isShouting(input);\n\t\tvar asking = input.slice(-1) === '?';\n\n\t\tif (silent) {\n\t\t\treturn 'Fine. Be that way!';\n\t\t} else if (shouting) {\n\t\t\treturn 'Woah, chill out!';\n\t\t} else if (asking) {\n\t\t\treturn 'Sure.';\n\t\t} \n\n\t\treturn 'Whatever.';\n\t}\n\t\n\tfunction isShouting(str) {\n\t\tvar hasCharacters = str.match(/[a-zA-Z]+/g);\n\t\treturn str === str.toUpperCase() && hasCharacters;\n\t}\n}\n\nmodule.exports = Bob;	\N	\N	0	5	2014-07-04 10:58:31	2014-07-04 10:58:31	135	bob.js
283	40	5f9b5009216fc6c6df52baf6	pending	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [a b]\n  (apply +\n         (map #(if (= %1 %2) 0 1)\n              a\n              b)))	\N	\N	0	1	2013-11-15 08:47:21	2013-11-15 08:47:21	136	point-mutations.clj
284	40	6efecbbac6bccff10af9decc	pending	ruby	meetup	class Meetup\n  SUNDAY = 0\n  MONDAY = 1\n  TUESDAY = 2\n  WEDNESDAY = 3\n  THURSDAY = 4\n  FRIDAY = 5\n  SATURDAY = 6\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  %w{sun mon tues wednes thurs fri satur}.each do |prefix|\n    the_day = self.const_get("#{prefix.upcase}DAY")\n\n    define_method "#{prefix}teenth" do\n      someteenth the_day\n    end\n\n    define_method "first_#{prefix}day" do\n      first_someday the_day\n    end\n\n    define_method "second_#{prefix}day" do\n      second_someday the_day\n    end\n\n    define_method "third_#{prefix}day" do\n      third_someday the_day\n    end\n\n    define_method "fourth_#{prefix}day" do\n      fourth_someday the_day\n    end\n\n    define_method "last_#{prefix}day" do\n      last_someday the_day\n    end\n  end\n\nprivate\n\n  def someteenth(day_of_week)\n    someday(day_of_week, 13..19)\n  end\n\n  def first_someday(day_of_week)\n    someday(day_of_week, 1..7)\n  end\n\n  def second_someday(day_of_week)\n    someday(day_of_week, 8..14)\n  end\n\n  def third_someday(day_of_week)\n    someday(day_of_week, 15..21)\n  end\n\n  def fourth_someday(day_of_week)\n    someday(day_of_week, 22..28)\n  end\n\n  def last_someday(day_of_week)\n    first_day_of_the_next_month = if @month < 12\n      Date.new(@year, @month + 1, 1)\n    else\n      Date.new(@year + 1, 1, 1)\n    end\n    last_day_of_this_month = first_day_of_the_next_month.day - 1\n    someday(day_of_week, (last_day_of_this_month-7)..last_day_of_this_month)\n  end\n\n  def someday(day_of_week, range)\n    current_date = nil\n    range.each do | mday |\n      current_date = Date.new(@year, @month, mday)\n      break if current_date.wday == day_of_week\n    end\n    current_date\n  end\n\n\n\nend	\N	\N	0	1	2014-04-25 06:11:19	2014-04-25 06:11:19	137	meetup.rb
293	40	ad9223d007df002bc742c059	pending	go	clock	package clock\n\nimport (\n  "strconv"\n)\n\ntype Clock struct {\n  hour    int\n  minutes int\n}\n\nfunc New(h, m int) Clock {\n  hour := h\n  minutes := m\n  return Clock{hour, minutes}\n}\n\nfunc (c Clock) String() string {\n  return leadZero(c.hour) + ":" + leadZero(c.minutes)\n}\n\nfunc (c Clock) Add(x int) Clock {\n  c.hour += x / 60\n  c.minutes += x % 60\n\n  min_overhead := c.minutes / 60\n\n  c.minutes = c.minutes % 60\n\n  if c.minutes < 0 {\n    min_overhead -= 1\n    c.minutes = 60 + c.minutes\n  }\n\n  c.hour += min_overhead\n\n  c.hour = c.hour % 24\n\n  if c.hour < 0 {\n    c.hour = 24 + c.hour\n  }\n\n  return c\n}\n\nfunc leadZero(y int) string {\n  str := strconv.Itoa(y)\n\n  if y < 10 {\n    str = "0" + str\n  }\n\n  return str\n}	\N	\N	0	1	2013-12-02 01:43:19	2013-12-02 01:43:19	141	clock.go
294	40	9e20cdfd060cff81645ef9bc	pending	haskell	grains	module Grains\n  ( square\n  , total\n  ) where\n\nimport Data.Word\nimport Data.Bits\n\nsquare :: Int -> Word64\n-- square i = 2 ^ (i - 1)\nsquare i = 0 `setBit` (i - 1)\n\n\ntotal :: Word64\n-- total = 2 ^ 64 - 1\ntotal = complement 0	\N	\N	0	1	2014-03-15 07:05:17	2014-03-15 07:05:17	142	Grains.hs
295	40	2a45ca47065290fe7532524b	pending	javascript	food-chain	song = {\n\n  verse: function(verse){\n\n    if (verse === 1) return this.verseOne();\n\n    if (verse === 2) return this.verseTwo();\n\n    if (verse === 3) return this.verseThree();\n\n    if (verse === 4) return this.verseFour();\n\n    if (verse === 5) return this.verseFive();\n\n    if (verse === 6) return this.verseSix();\n\n    if (verse === 7) return this.verseSeven();\n\n    if (verse === 8) return this.verseEight();\n\n  },\n\n  verses: function(start, last){\n\n    var song = "";\n\n    for (var i = 1; i <= last; i++) {\n      song += this.verse(i);\n      song += '\\n';\n    }\n\n    return song;\n\n  },\n\n  sing: function(){\n    return this.verses(1, 8);\n  },\n\n  verseOne: function() {\n    var text = this.firstLine('fly');\n    text += this.lastLine();\n\n    return text;\n  },\n\n  verseTwo: function() {\n    var animal = 'spider';\n    var text = this.firstLine(animal);\n    text += "It wriggled and jiggled and tickled inside her.\\n";\n    text += "She swallowed the spider to catch the fly.\\n";\n    text += this.lastLine();\n\n    return text;\n  },\n\n  verseThree: function() {\n    var animal = 'bird';\n    var text = this.firstLine(animal);\n    text += "How absurd to swallow a bird!\\n";\n    text += "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n";\n    text += "She swallowed the spider to catch the fly.\\n";\n    text += this.lastLine();\n\n    return text;\n  },\n\n  verseFour: function() {\n    var animal = 'cat';\n    var text = this.firstLine(animal);\n    text += "Imagine that, to swallow a cat!\\n";\n    text += "She swallowed the cat to catch the bird.\\n";\n    text += "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n";\n    text += "She swallowed the spider to catch the fly.\\n";\n    text += this.lastLine();\n\n    return text;\n  },\n\n  verseFive: function() {\n    var animal = 'dog';\n    var text = this.firstLine(animal);\n    text += "What a hog, to swallow a dog!\\n";\n    text += "She swallowed the dog to catch the cat.\\n";\n    text += "She swallowed the cat to catch the bird.\\n";\n    text += "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n";\n    text += "She swallowed the spider to catch the fly.\\n";\n    text += this.lastLine();\n\n    return text;\n  },\n\n  verseSix: function() {\n    var animal = 'goat';\n    var text = this.firstLine(animal);\n    text += "Just opened her throat and swallowed a goat!\\n";\n    text += "She swallowed the goat to catch the dog.\\n";\n    text += "She swallowed the dog to catch the cat.\\n";\n    text += "She swallowed the cat to catch the bird.\\n";\n    text += "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n";\n    text += "She swallowed the spider to catch the fly.\\n";\n    text += this.lastLine();\n\n    return text;\n  },\n\n  verseSeven: function() {\n    var animal = 'cow';\n    var text = this.firstLine(animal);\n    text += "I don't know how she swallowed a cow!\\n";\n    text += "She swallowed the cow to catch the goat.\\n";\n    text += "She swallowed the goat to catch the dog.\\n";\n    text += "She swallowed the dog to catch the cat.\\n";\n    text += "She swallowed the cat to catch the bird.\\n";\n    text += "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n";\n    text += "She swallowed the spider to catch the fly.\\n";\n    text += this.lastLine();\n\n    return text;\n  },\n\n  verseEight: function() {\n    var animal = 'horse';\n    var text = this.firstLine(animal);\n    text += "She's dead, of course!\\n";\n\n    return text;\n  },\n\n  firstLine: function(animal){\n    return  "I know an old lady who swallowed a " + animal + ".\\n";\n  },\n\n  lastLine: function(){\n    return  "I don't know why she swallowed the fly. Perhaps she'll die.\\n";\n  }\n\n};\n\nmodule.exports = song;	\N	\N	0	1	2013-11-19 18:42:14	2013-11-19 18:42:14	143	food-chain.js
296	40	d8fac4b3df96d0f73be8988e	pending	go	leap	package leap\n\n\nfunc evenlyDivisible( val int, div int ) bool {\n\treturn (val%div)==0\n}\n\nfunc IsLeapYear( year int ) bool {\n\n\treturn evenlyDivisible( year, 4 ) &&\n\t\t( !evenlyDivisible( year, 100 ) || evenlyDivisible( year, 400 ) ) ;\n\t\t\n}	\N	\N	0	2	2014-02-04 11:31:27	2014-02-04 11:31:27	144	leap.go
297	40	0da4d088fe37d3602a3dfb94	superseded	go	leap	package leap\n\n\nfunc evenlyDivisible( val int, div int ) bool {\n\treturn (val/div)*div==val\n}\n\nfunc IsLeapYear( year int ) bool {\n\n\treturn evenlyDivisible( year, 4 ) &&\n\t\t( !evenlyDivisible( year, 100 ) || evenlyDivisible( year, 400 ) ) ;\n\t\t\n}	\N	\N	0	1	2014-03-20 05:27:49	2014-03-20 05:27:49	144	leap.go
298	40	5e09783163a520139376e71f	superseded	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :refer :all]))\n\n(def valid-vals #{"C" "G" "A" "U" "T"})\n\n(defn transform-char [c]\n  (let [v (upper-case (str c))]\n    (assert (contains? valid-vals v))\n    (cond (= v "T") "U" :else v)))\n\n(defn to-rna [x]\n  (join "" (map transform-char x)))	\N	\N	0	1	2013-12-14 21:21:26	2013-12-14 21:21:26	145	dna.clj
299	40	876b96f2108d58742f369ae9	pending	clojure	rna-transcription	(ns dna\n  (:use [clojure.string :only [upper-case]]))\n\n\n(def valid-vals #{\\C \\G \\A \\U \\T})\n\n\n(defn valid? [c]\n  (contains? valid-vals c))\n\n\n(defn assert-valid [c]\n  (assert (valid? c))\n  c)\n\n\n(defn char-upper-case [c]\n  (first (upper-case c)))\n\n\n(defn change-char[c]\n  (if (= c \\T) \n    \\U \n    c))\n\n\n(defn transform-char [c]\n  (-> c\n      char-upper-case \n      assert-valid\n      change-char))\n\n\n(defn to-rna [x]\n  (apply str (map transform-char x)))	\N	\N	0	2	2014-01-22 06:16:57	2014-01-22 06:16:57	145	dna.clj
300	40	1227eed59db567965f292c7f	pending	ruby	bob	Remark = Struct.new(:what_was_said) do\n  def nothing_said?\n    what_was_said == '' || what_was_said.nil?\n  end\n\n  def question?\n    what_was_said.end_with? '?'\n  end\n\n  def shouting?\n    what_was_said == what_was_said.upcase\n  end  \nend\n\nclass Bob\n  def hey(what_was_said)\n    remark = Remark.new(what_was_said)\n\n    return "Fine. Be that way!" if remark.nothing_said?\n    return "Woah, chill out!" if remark.shouting?\n    return "Sure." if remark.question?\n\n    "Whatever."\n  end\nend	\N	\N	0	4	2013-11-28 06:38:39	2013-11-28 06:38:39	146	bob.rb
301	40	e4bc387cf208cb734561b062	superseded	ruby	bob	class Remark < Struct.new(:what_was_said)\n  def blank?\n    what_was_said == '' || what_was_said.nil?\n  end\n\n  def question?\n    what_was_said.end_with? '?'\n  end\n\n  def shouting?\n    what_was_said == what_was_said.upcase\n  end  \nend\n\nclass Bob\n  def hey(what_was_said)\n    remark = Remark.new(what_was_said)\n\n    return "Fine. Be that way!" if remark.blank?\n    return "Woah, chill out!" if remark.shouting?\n    return "Sure." if remark.question?\n\n    "Whatever."\n  end\nend	\N	\N	0	2	2014-03-28 16:12:32	2014-03-28 16:12:32	146	bob.rb
302	40	632aeb58ea3e076862818d43	superseded	ruby	bob	class NilClass\n  def blank?\n    self.nil?\n  end\nend\n\nclass String\n  def blank?\n    self == '' || self.nil?\n  end\n\n  def question?\n    self.end_with? '?'\n  end\n\n  def shouting?\n    self == self.upcase\n  end\nend\n\nclass Bob\n  def hey(message)\n    return "Fine. Be that way!" if message.blank?\n    return "Woah, chill out!" if message.shouting?\n    return "Sure." if message.question?\n\n    "Whatever."\n  end\nend	\N	\N	0	1	2014-04-10 05:54:40	2014-04-10 05:54:40	146	bob.rb
303	40	15bba15cedd7ff63566e10b8	superseded	ruby	bob	Remark = Struct.new(:what_was_said) do\n  def blank?\n    what_was_said == '' || what_was_said.nil?\n  end\n\n  def question?\n    what_was_said.end_with? '?'\n  end\n\n  def shouting?\n    what_was_said == what_was_said.upcase\n  end  \nend\n\nclass Bob\n  def hey(what_was_said)\n    remark = Remark.new(what_was_said)\n\n    return "Fine. Be that way!" if remark.blank?\n    return "Woah, chill out!" if remark.shouting?\n    return "Sure." if remark.question?\n\n    "Whatever."\n  end\nend	\N	\N	0	3	2014-04-17 00:57:19	2014-04-17 00:57:19	146	bob.rb
304	40	d45a9882119232c36f92ce7d	pending	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b = length . filter mismatch $ zip a b\n  where mismatch (x, y) = x /= y	\N	\N	0	1	2013-11-22 20:45:19	2013-11-22 20:45:19	147	point-mutations.hs
305	40	c52041e7428319ed5d602327	superseded	ruby	nucleotide-count	class DNA\n\n  attr_reader :string, :counts\n  def initialize(string = '')\n    raise ArgumentError unless dna_nucleotides?(string)\n    @string = string\n    buildcounts\n  end\n\n  def count(char='Z')\n    raise ArgumentError unless nucleotide?(char)\n    counts[char]\n  end\n\n  def nucleotide_counts\n    counts\n  end\n\n  def initcounts\n    @counts = Hash.new(0)\n    dna_nucleotides.each {|n| @counts[n] = 0 }\n  end\n\n  def buildcounts\n    initcounts\n    string.chars.each {|ch| @counts[ch] += 1 }\n  end\n\n  def dna_nucleotides\n    ['A', 'T', 'C', 'G']\n  end\n\n  def dna_nucleotide?(char)\n    dna_nucleotides.include? char\n  end\n\n  def dna_nucleotides?(string)\n    string.chars.inject(true) do |answer, c|\n      answer && dna_nucleotide?(c)\n    end\n  end\n\n  def nucleotide?(char)\n    dna_nucleotide?(char) || (char == 'U')\n  end\n\nend	\N	\N	0	1	2013-12-20 12:17:59	2013-12-20 12:17:59	148	nucleotide-count.rb
306	40	9e5ca0e1258ec8a577f4989c	pending	ruby	nucleotide-count	class DNA\n\n  attr_reader :string, :counts\n  def initialize(string = '')\n    raise ArgumentError unless dna_nucleotides?(string)\n    @string = string\n    buildcounts\n  end\n\n  def count(char='Z')\n    raise ArgumentError unless nucleotide?(char)\n    counts[char]\n  end\n\n  def nucleotide_counts\n    counts\n  end\n\nprivate\n  def initcounts\n    @counts = Hash.new(0)\n    dna_nucleotides.each {|n| @counts[n] = 0 }\n  end\n\n  def buildcounts\n    initcounts\n    string.chars.each {|ch| @counts[ch] += 1 }\n  end\n\n  def dna_nucleotides\n    ['A', 'T', 'C', 'G']\n  end\n\n  def dna_nucleotide?(char)\n    dna_nucleotides.include? char\n  end\n\n  def dna_nucleotides?(string)\n    string.chars.inject(true) do |answer, c|\n      answer && dna_nucleotide?(c)\n    end\n  end\n\n  def nucleotide?(char)\n    dna_nucleotide?(char) || (char == 'U')\n  end\n\nend	\N	\N	0	2	2014-01-11 17:46:06	2014-01-11 17:46:06	148	nucleotide-count.rb
307	40	f5831296c8ce6fa94f4c7f47	superseded	go	raindrops	package raindrops\n\nimport "fmt"\nimport "strconv"\n\nvar sounds = []struct {\n\tfactor int\n\tsound  string\n}{\n\t{3, "Pling"},\n\t{5, "Plang"},\n\t{7, "Plong"},\n}\n\nfunc Convert(n int) string {\n\toutput := ""\n\tfor _, s := range sounds {\n\t\tif n%s.factor == 0 {\n\t\t\toutput += s.sound\n\t\t}\n\t}\n\tif len(output) > 0 {\n\t\treturn output\n\t}\n\treturn strconv.Itoa(n)\n}	\N	\N	0	2	2014-02-23 13:21:45	2014-02-23 13:21:45	149	raindrops.go
308	40	a5ddde012bf3d5d4f6b35120	superseded	go	raindrops	package raindrops\n\nimport "fmt"\n\n// Convert basic plingplangplong Un-optimized, but readable\nfunc Convert(num int) string {\n\tvar answer string\n\tmatched := false\n\n\tif num%3 == 0 {\n\t\tmatched = true\n\t\tanswer += "Pling"\n\t}\n\tif num%5 == 0 {\n\t\tmatched = true\n\t\tanswer += "Plang"\n\t}\n\tif num%7 == 0 {\n\t\tmatched = true\n\t\tanswer += "Plong"\n\t}\n\n\tif !matched {\n\t\tanswer += fmt.Sprintf("%d", num)\n\t}\n\n\treturn answer\n}	\N	\N	0	1	2014-02-28 13:37:12	2014-02-28 13:37:12	149	raindrops.go
309	40	d225ce97477bb5b40cadc965	superseded	go	raindrops	package raindrops\n\nimport "strconv"\n\nvar sounds = []struct {\n\tfactor int\n\tsound  string\n}{\n\t{3, "Pling"},\n\t{5, "Plang"},\n\t{7, "Plong"},\n}\n\nfunc Convert(n int) string {\n\toutput := ""\n\tfor _, s := range sounds {\n\t\tif n%s.factor == 0 {\n\t\t\toutput += s.sound\n\t\t}\n\t}\n\tif len(output) > 0 {\n\t\treturn output\n\t}\n\treturn strconv.Itoa(n)\n}	\N	\N	0	3	2014-04-17 01:30:39	2014-04-17 01:30:39	149	raindrops.go
310	40	26a9c8f81e7f39e46ae2d3d4	pending	go	raindrops	// Pulled from @sjakobi who has what i think is the best submittal for this exercise\npackage raindrops\n\nimport "strconv"\n\nvar sounds = []struct {\n\tfactor int\n\tsound  string\n}{\n\t{3, "Pling"},\n\t{5, "Plang"},\n\t{7, "Plong"},\n}\n\nfunc Convert(n int) string {\n\toutput := ""\n\tfor _, s := range sounds {\n\t\tif n%s.factor == 0 {\n\t\t\toutput += s.sound\n\t\t}\n\t}\n\tif len(output) > 0 {\n\t\treturn output\n\t}\n\treturn strconv.Itoa(n)\n}	\N	\N	0	4	2014-06-19 03:30:58	2014-06-19 03:30:58	149	raindrops.go
311	40	7ce9f7803887a5a89b5d14ef	pending	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  RELATIVE_ORBITAL_PERIODS = {\n    earth:   1.0,\n    mercury: 0.2408467,\n    venus:   0.61519726,\n    mars:    1.8808158,\n    jupiter: 11.862615,\n    saturn:  29.447498,\n    uranus:  84.016846,\n    neptune: 164.79132\n  }.freeze\n\n  def initialize(seconds)\n    @seconds = seconds\n\n    RELATIVE_ORBITAL_PERIODS.each do |planet, relative_period|\n     self.class.send :define_method, "on_#{planet}" do\n        (seconds_in_earth_year / relative_period).round(2)\n      end\n    end\n  end\n\n  private\n  def seconds_in_earth_year\n    seconds.to_f / 60 / 60 / 24 / 365.25\n  end\nend	\N	\N	0	1	2014-01-18 16:05:38	2014-01-18 16:05:38	150	space-age.rb
312	40	6ce3eedeb43b71f586952612	pending	ruby	hamming	class Hamming\n\tdef self.compute(strand_1, strand_2)\n\t\tlength = [strand_1.size, strand_2.size].min\n\t\t(0...length).inject(0) do |sum, index|\n\t\t\tstrand_1[index] == strand_2[index] ? sum : sum += 1\n\t\tend\n\tend\nend	\N	\N	0	1	2014-01-25 06:17:21	2014-01-25 06:17:21	151	hamming.rb
313	40	c09da0292369134b3c1633a2	superseded	elixir	atbash-cipher	defmodule Atbash do\n  @doc """\n  Encode a given plaintext to the corresponding ciphertext\n\n  ## Examples\n\n  iex> Atbash.encode("completely insecure")\n  "xlnko vgvob rmhvx fiv"\n  """\n  @spec encode(String.t) :: String.t\n  def encode(plaintext) do\n    plaintext\n    |> sanitize\n    |> cipher\n    |> format\n  end\n\n  @rejected_characters ~r/[^a-z\\d]/\n\n  defp sanitize(string) do\n    Regex.replace(@rejected_characters, String.downcase(string), "")\n  end\n\n  defp cipher(sanitized_string) do\n    to_string(Enum.map to_char_list(sanitized_string), &cipher_char/1)\n  end\n\n  @cipher_range ?a..?z\n\n  defp cipher_char(char_code) do\n    if Enum.member?(@cipher_range, char_code) do\n      @cipher_range.last - (char_code - @cipher_range.first)\n    else\n      char_code\n    end\n  end\n\n  defp format(string) do\n    String.strip(Regex.replace(~r/(.....)/, string, "\\\\1 "))\n  end\n\nend	\N	\N	0	1	2013-12-08 15:38:27	2013-12-08 15:38:27	152	atbash.exs
314	40	16add34a9f736baf892fd981	pending	elixir	atbash-cipher	defmodule Atbash do\n  @doc """\n  Encode a given plaintext to the corresponding ciphertext\n\n  ## Examples\n\n  iex> Atbash.encode("completely insecure")\n  "xlnko vgvob rmhvx fiv"\n  """\n  @spec encode(String.t) :: String.t\n  def encode(plaintext) do\n    plaintext\n    |> sanitize\n    |> cipher\n    |> format\n  end\n\n  @rejected_characters ~r/[^a-z\\d]/\n\n  defp sanitize(string) do\n    Regex.replace(@rejected_characters, String.downcase(string), "")\n  end\n\n  defp cipher(sanitized_string) do\n    to_string(Enum.map to_char_list(sanitized_string), &cipher_char/1)\n  end\n\n  @cipher_range ?a..?z\n\n  defp cipher_char(char_code) when char_code in @cipher_range do\n    @cipher_range.last - (char_code - @cipher_range.first)\n  end\n  defp cipher_char(char_code), do: char_code\n\n  defp format(string) do\n    String.strip(Regex.replace(~r/(.....)/, string, "\\\\1 "))\n  end\n\nend	\N	\N	0	2	2014-02-06 00:17:16	2014-02-06 00:17:16	152	atbash.exs
315	40	d6ef08fbb0a8196d414737ef	pending	haskell	linked-list	module Deque\n  ( mkDeque\n  , push\n  , pop\n  , shift\n  , unshift\n  ) where\n\n\nimport Control.Arrow\nimport Control.Concurrent.MVar\n\n\n-- | Real-time deque (from "Purely Functional Data Structures" Chris Okasaki).\n-- | It's based on banker's deques, but every operation (cons/snoc/tail/init)\n-- | is O(1) non-amortized (sic!) complexity.\n-- |\n-- | These operations based on "lazy rebuilding" and "Lazy rebuilding" based\n-- | on that fact of lazy evaluation:\n-- |\n-- | let x = looooongCalculatedList\n-- | head x -- slow\n-- | head x -- fast\n-- |\n-- | Also\n-- |\n-- | let x = looooongCalculatedList\n-- | let z = a:b:x\n-- | head $ drop 3 z -- slow\n-- |\n-- | but\n-- | let x = looooongCalculatedList\n-- | let z = a:b:x\n-- | head looooongCalculatedList -- slow\n-- | head $ drop 3 z -- fast!\n-- |\n-- | so we can force calculation of lists step by step, not entirely.\n-- | Therefore there is no amortization; it's fully spreaded in every\n-- | call.\n--\ndata Deque a = Deque\n                 Int -- ^ number of elements in front part of queue.\n                     --   It's used for rebalancing queue.\n                 [a] -- ^ front part of queue.\n                 [a] -- ^ copy of previous list for step-by-step evaluation.\n                 Int -- ^ number of elements in rear part of queue.\n                     --   It's used for rebalancing queue.\n                 [a] -- ^ rear part of queue\n                 [a] -- ^ copy of previous list for step-by-step evaluation.\n                 deriving (Show)\n\n\nc = 3 -- balancing ratio. It may be 2 or 3\n\n\nempty :: Deque a\nempty = Deque 0 [] [] 0 [] []\n\n\n-- | Force evaluation head of list\nexec1 ::  [a] -> [a]\nexec1 [] = []\nexec1 (_:s) = s\n\n\n-- | Force evaluation 2 heads of list\nexec2 ::  [a] -> [a]\nexec2 s = exec1 $ exec1 s\n\n\n\n-- | Lazy step-by-step analog for "f ++ reverse (drop j r)"\nrotateDrop f j r\n  | j < c = rotateRev f (drop j r) []\n  | otherwise =\n      let (x:f') = f\n      in x:(rotateDrop f' (j - c) (drop c r))\n  where\n    rotateRev ::  [a] -> [a] -> [a] -> [a]\n    rotateRev [] r a = (reverse r) ++ a\n    rotateRev (x:f) r a =\n      x:(rotateRev f (drop c r) (reverse (take c r) ++ a))\n\n\n-- | Rebalancing front/rear if need\ncheck :: Deque a -> Deque a\ncheck q@(Deque lenf f _ lenr r _)\n  | lenf > c * lenr + 1 =\n    let i = (lenf + lenr) `div` 2\n        j = lenf + lenr - i\n        f' = take i f\n        r' = rotateDrop r i f\n    in Deque i f' f' j r' r' -- rebalance and forming lists (second f' & r') for step-by-step evaluation\n  | lenr > c * lenf + 1 =\n    let j = (lenf + lenr) `div` 2\n        i = lenf + lenr - j\n        r' = take j r\n        f' = rotateDrop f j r\n    in Deque i f' f' j r' r'\n  | otherwise = q\n\n\n-- | Append element at front\ndcons :: a -> Deque a -> Deque a\ndcons v (Deque lenf f sf lenr r sr) =\n  -- rebalance & force one step of list lazy evaluation\n  check $ Deque (lenf + 1) (v:f) (exec1 sf) lenr r (exec1 sr)\n\n\n-- | Tail of deque\ndtail :: Deque a -> Deque a\ndtail (Deque _    []     _  _    []    _) = error "Empty deque"\ndtail (Deque _    []     _  _    (_:_) _) = empty\ndtail (Deque lenf (_:f') sf lenr r     sr) =\n  -- rebalance & force two steps of list lazy evaluation\n  check $ Deque (lenf - 1) f' (exec2 sf) lenr r (exec2 sr)\n\n\n-- | First element of deque\ndhead :: Deque a -> Maybe a\ndhead (Deque _ []    _ _ []    _) = Nothing\ndhead (Deque _ []    _ _ (x:_) _) = Just x\ndhead (Deque _ (x:_) _ _ _     _) = Just x\n\n\n-- | Append element at rear\ndsnoc :: a -> Deque a -> Deque a\ndsnoc v (Deque lenf f sf lenr r sr) =\n  -- rebalance & force one step of list lazy evaluation\n  check $ Deque lenf f (exec1 sf) (lenr + 1) (v:r) (exec1 sr)\n\n\n-- | Last element of deque\ndlast :: Deque a -> Maybe a\ndlast (Deque _ []    _ _ []    _) = Nothing\ndlast (Deque _ (x:_) _ _ []    _) = Just x\ndlast (Deque _ _     _ _ (x:_) _) = Just x\n\n\n-- | First elements of deque (excepting last element)\ndinit :: Deque a -> Deque a\ndinit (Deque _    []    _  _    []     _) = error "Empty"\ndinit (Deque _    (_:_) _  _    []     _) = empty\ndinit (Deque lenf f     sf lenr (_:r') sr) =\n  -- rebalance & force two steps of list lazy evaluation\n  check $ Deque lenf f (exec2 sf) (lenr - 1) r' (exec2 sr)\n\n\n-- Interface for test\n\n\ntype MDeque a = MVar (Deque a)\n\n\nmkDeque :: IO (MDeque a)\nmkDeque = newMVar empty\n\n\npush :: MDeque a -> a -> IO ()\npush d v = modifyMVar_ d (return . dcons v)\n\n\npop :: MDeque a -> IO (Maybe a)\npop d = modifyMVar d (return . (dtail &&& dhead))\n\n\nunshift :: MDeque a -> a -> IO ()\nunshift d v = modifyMVar_ d (return . dsnoc v)\n\n\nshift :: MDeque a -> IO (Maybe a)\nshift d = modifyMVar d (return . (dinit &&& dlast))	\N	\N	0	1	2014-01-03 09:30:13	2014-01-03 09:30:13	153	Deque.hs
316	40	9b6fabd5fdc9f880ea5ae4d4	pending	ruby	food-chain	require "yaml"\n\nclass FoodChainSong\n  INTRO = [\n           "She's dead, of course!",\n           "I don't know how she swallowed a cow!",\n           "Just opened her throat and swallowed a goat!",\n           "What a hog, to swallow a dog!",\n           "Imagine that, to swallow a cat!",\n           "How absurd to swallow a bird!",\n           "It wriggled and jiggled and tickled inside her.",\n           nil,\n          ]\n\n  REASON = [\n            "She swallowed the cow to catch the goat.",\n            "She swallowed the goat to catch the dog.",\n            "She swallowed the dog to catch the cat.",\n            "She swallowed the cat to catch the bird.",\n            "She swallowed the bird to catch the spider " +\n              "that wriggled and jiggled and tickled inside her.",\n            "She swallowed the spider to catch the fly.",\n            "I don't know why she swallowed the fly. Perhaps she'll die.",\n           ]\n\n  ANIMAL = %w[horse cow goat dog cat bird spider fly]\n\n  def verse n\n    [\n     "I know an old lady who swallowed a #{ANIMAL[-n]}.",\n     INTRO[-n],\n     (REASON.last(n) if n.between?(1, 7)),\n     ""\n    ].flatten.compact.join "\\n"\n  end\n\n  def verses a, b\n    (a..b).map { |n| verse n }.join("\\n") +\n      "\\n" # wtf?\n  end\n\n  def sing\n    verses 1, 8\n  end\nend	\N	\N	0	1	2014-02-13 22:56:24	2014-02-13 22:56:24	154	food_chain.rb
319	40	ebfa0811e741b4f200eb9a9e	pending	haskell	beer-song	{-# LANGUAGE UnicodeSyntax #-}\nmodule Beer (sing, verse) where\n\nimport Data.Char (toLower)\n\nnumBottles ∷ Int → String\nnumBottles 0 = "No more bottles"\nnumBottles 1 = "1 bottle"\nnumBottles n = show n ++ " bottles"\n\nfirstLineTemplate ∷ Int → String\nfirstLineTemplate i =\n    phr ++ " of beer on the wall, " ++\n    map toLower phr ++ " of beer.\\n"\n    where phr = numBottles i\n\nsecondLineTemplate ∷ Int → String\nsecondLineTemplate 0 =\n    "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nsecondLineTemplate i =\n    "Take " ++ pron ++ " down and pass it around, " ++ map toLower phr ++\n    " of beer on the wall.\\n"\n    where pron = if i == 1 then "it" else "one"\n          phr  = numBottles $ i - 1\n\nverse ∷ Int → String\nverse i = firstLineTemplate i ++ secondLineTemplate i\n\nsing ∷ Int -> Int -> String\nsing a b = concat [verse s ++ "\\n" | s <- reverse [b..a]]	\N	\N	0	1	2013-12-17 23:23:30	2013-12-17 23:23:30	156	Beer.hs
320	40	50a4375999c981e780ccf829	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match potential_anagrams\n    potential_anagrams.select { |word| anagram?(word) }\n  end\n\n  private\n  attr_reader :word\n\n  def anagram?(potential_anagram)\n    comparable_word.downcase == comparable(potential_anagram).downcase\n  end\n\n  def comparable_word\n    @comparable_word ||= comparable(word)\n  end\n\n  def comparable potential_anagram\n    potential_anagram.chars.sort { |a, b| a.downcase <=> b.downcase }.join\n  end\nend	\N	\N	0	3	2013-11-19 12:29:54	2013-11-19 12:29:54	157	anagram.rb
321	40	d7a0d286ebaa645abde2c607	superseded	ruby	anagram	class Anagram\n  def initialize spartacus\n    @spartacus = spartacus\n  end\n\n  def match doppelgangers\n    doppelgangers.select { |clone| clone?(clone) }\n  end\n\n  private\n\n  def clone?(person)\n    dna_spartacus[/\\A#{dna(person)}\\z/i]\n  end\n\n  def dna_spartacus\n    @dna_spartacus ||= dna(@spartacus)\n  end\n\n  def dna person\n    person.chars.sort { |a, b| a.downcase <=> b.downcase }.join\n  end\nend	\N	\N	0	2	2014-01-09 16:17:34	2014-01-09 16:17:34	157	anagram.rb
322	40	5fcd7f2070f19b16b823513d	pending	ruby	anagram	class Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match potential_anagrams\n    potential_anagrams.select { |potential_anagram| anagram?(potential_anagram) }\n  end\n\n  private\n  attr_reader :word\n\n  def anagram?(potential_anagram)\n    comparable_word[/\\A#{comparable(potential_anagram)}\\z/i]\n  end\n\n  def comparable_word\n    @comparable_word ||= comparable(word)\n  end\n\n  def comparable potential_anagram\n    potential_anagram.downcase.chars.sort.join\n  end\nend	\N	\N	0	4	2014-02-10 07:20:05	2014-02-10 07:20:05	157	anagram.rb
323	40	f30ee063d03b78d5fa97d354	superseded	ruby	anagram	class Anagram\n  def initialize spartacus\n    @spartacus = spartacus\n  end\n\n  def match doppelgangers\n    doppelgangers.map do |clone|\n      clone?(clone) ? clone : nil\n    end.compact\n  end\n\n  private\n\n  def clone?(person)\n    dna_spartacus[/\\A#{dna(person)}\\z/i]\n  end\n\n  def dna_spartacus\n    @dna_spartacus ||= dna(@spartacus)\n  end\n\n  def dna person\n    person.split(//).sort { |a, b| a.downcase <=> b.downcase }.join\n  end\nend	\N	\N	0	1	2014-04-27 19:47:40	2014-04-27 19:47:40	157	anagram.rb
324	40	5becf0de3340d95d0e8cbc4c	superseded	haskell	bob	{-\r\n\r\nCopyright Bas Bossink (bas.bossink@gmail.com)\r\nThis file is part of  bob.\r\n\r\nbob is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nbob is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with bob. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n-}\r\n\r\nmodule Bob where\r\n\r\nimport Data.Char\r\n\r\nresponseFor a \r\n    | or [all isSpace a, a == ""] = "Fine. Be that way!" \r\n    | and [ last a == '?', all (\\x -> or [isSpace x, isUpper x]) $ tail $ reverse a ] =  "Woah, chill out!"\r\n    | last a == '?' = "Sure."\r\n    | and [ map toUpper a == a, any isLetter a] = "Woah, chill out!"\r\n    | otherwise = "Whatever."\r	\N	\N	0	1	2013-11-14 08:09:46	2013-11-14 08:09:46	158	Bob.hs
325	40	1422ae4f1b9e975afb3794f5	superseded	haskell	bob	{-\r\nCopyright 2014 Bas Bossink (bas.bossink@gmail.com).\r\n-}\r\n\r\nmodule Bob (responseFor) where\r\n\r\nimport Data.Char\r\n\r\nresponseFor :: [Char] -> [Char]\r\nresponseFor a \r\n  | all isSpace a = "Fine. Be that way!" \r\n  | and [ map toUpper a == a, any isLetter a] = "Woah, chill out!"\r\n  | last a == '?' = "Sure."\r\n  | otherwise = "Whatever."\r	\N	\N	0	2	2014-01-25 09:56:46	2014-01-25 09:56:46	158	Bob.hs
326	40	7ba41ac9b7936a1183e841f7	pending	haskell	bob	{-\r\nCopyright 2014 Bas Bossink (bas.bossink@gmail.com).\r\n-}\r\n\r\nmodule Bob (responseFor) where\r\n\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor a \r\n  | all isSpace a = "Fine. Be that way!" \r\n  | and [map toUpper a == a, any isLetter a] = "Woah, chill out!"\r\n  | last a == '?' = "Sure."\r\n  | otherwise = "Whatever."\r	\N	\N	0	3	2014-05-03 14:29:28	2014-05-03 14:29:28	158	Bob.hs
327	40	f4bfb1a0965b691317d22ade	pending	haskell	kindergarten-garden	module Garden\n  ( garden\n  , defaultGarden\n  , lookupPlants\n  , Plant(..)\n  ) where\n\n\nimport qualified Data.HashMap.Strict as M\nimport Data.List\n\n\ndata Plant\n  = Violets\n  | Radishes\n  | Grass\n  | Clover\n  deriving (Show, Eq)\n\n\n-- encode children by his/her name first letters\ntype Garden = M.HashMap Char [Plant]\n\n\ngardenByFirstLetters :: [Char] -> String -> Garden\ngardenByFirstLetters children plants = M.fromList $ zip (sort children) (convertPlants plants)\n  where\n    convertPlants :: String -> [[Plant]]\n    convertPlants plants = reorder $ transpose $ lines plants\n    reorder [] = []\n    reorder ([p1,p2]:[p3,p4]:ps) = (map restorePlantByName [p1,p3,p2,p4]):(reorder ps)\n    reorder _ = undefined\n    restorePlantByName 'V' = Violets\n    restorePlantByName 'R' = Radishes\n    restorePlantByName 'G' = Grass\n    restorePlantByName 'C' = Clover\n    restorePlantByName _   = undefined\n\n\ngarden :: [String] -> String -> Garden\ngarden children plants = gardenByFirstLetters (map head children) plants\n\n\ndefaultGarden :: String -> Garden\ndefaultGarden = gardenByFirstLetters ['A'..'Z']\n\n\nlookupPlants :: String -> Garden -> [Plant]\nlookupPlants child garden = M.lookupDefault [] (head child) garden	\N	\N	0	1	2013-11-20 20:37:38	2013-11-20 20:37:38	159	Garden.hs
328	5	f7a0b15428c601db608def89	pending	ruby	gigasecond	class Gigasecond\r\n\r\n  def initialize(date)\r\n    @time = date.to_time\r\n  end\r\n\r\n  def date\r\n    (@time + 10**9).to_date\r\n  end\r\n\r\nend	\N	\N	0	1	2014-06-01 04:33:19	2014-06-01 04:33:19	160	gigasecond.rb
329	5	f4e19c83b575f0a6f274bafb	pending	ruby	bob	class Bob\n\n  def hey(message)\n    if shouting?(message)\n      return "Woah, chill out!"\n    elsif question?(message)\n      return "Sure."\n    elsif empty_message?(message)\n      return "Fine. Be that way!"\n    end\n\n    "Whatever."\n  end\n\nprivate\n\n  def shouting?(message)\n    message.match(/[a-z]/).nil? && message.match(/[A-Z]/)\n  end\n\n  def question?(message)\n    message[-1] == "?"\n  end\n\n  def empty_message?(message)\n    message.strip == ""\n  end\n\nend	\N	\N	0	1	2014-04-09 04:24:06	2014-04-09 04:24:06	161	bob.rb
331	33	45914d91ce5f93157453f0c4	pending	javascript	pascals-triangle	(function() {\n  'use strict';\n\n  var Triangle = function(input) {\n    this.rows = generateRows(input);\n    this.lastRow = this.rows[this.rows.length - 1];\n  };\n\n  function generateRows(max) {\n    var i, j, collector, inner, last, sum;\n    collector = [];\n    i = 0;\n    last = [0];\n\n    while (i < max) {\n      inner = [];\n      for (j = 0; j < i + 1; j++) {\n        if (j === 0 || j === i) {\n          sum = 1;\n        } else {\n          sum = (last[j]) + (last[j - 1]);\n        }\n        inner.push(sum);\n      }\n      collector.push(inner);\n      last = inner;\n      i++;\n    }\n    return collector;\n  }\n\n  module.exports = Triangle;\n})();	\N	\N	0	1	2014-05-23 01:23:14	2014-05-23 01:23:14	163	triangle.js
332	33	0e407f4ad815ac2452b03605	pending	elixir	word-count	defmodule Words do\n\n\tdef count(phrase) do\n\t\tphrase |> String.downcase |> to_words |> aggregate_counters\n\tend\n\n\tdefp to_words(phrase), do: Regex.scan(%r/\\w+/, phrase)\n\n\tdefp aggregate_counters(words) do\n\t\tEnum.reduce words, HashDict.new, &increment_counter/2\n\tend\n\tdefp increment_counter([key], dict), do: HashDict.update(dict, key, 1, &(&1+1))\n\nend	\N	\N	0	1	2013-11-30 02:21:28	2013-11-30 02:21:28	164	word-count.exs
333	33	99a341711cddec692d9d0365	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map nucleotide where\n    nucleotide 'G' = 'C'\n    nucleotide 'C' = 'G'\n    nucleotide 'T' = 'A'\n    nucleotide 'A' = 'U'\n    nucleotide _ = undefined	\N	\N	0	1	2014-01-22 23:36:22	2014-01-22 23:36:22	165	dna.hs
334	33	3338111a1bd6d441a891c224	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map replaceByComplement\n\nreplaceByComplement :: Char -> Char\nreplaceByComplement nucleotide = case nucleotide of\n  'G' -> 'C'\n  'C' -> 'G'\n  'T' -> 'A'\n  'A' -> 'U'\n  _ -> error $ "Undefined nucleotide: " ++ show nucleotide	\N	\N	0	2	2014-04-23 19:32:05	2014-04-23 19:32:05	165	dna.hs
335	33	6a6dad21bbe02a3f3df4563c	pending	ruby	nucleotide-count	class DNA\n\t@@DNA_BASES = 'ACGT'\n\t@@BASES = "#{@@DNA_BASES}U"\n\n\tdef initialize(sequence)\n\t\traise ArgumentError, 'Invalid base in sequence' unless sequence.empty? or sequence.count("^#{@@DNA_BASES}") == 0\n\t\t@sequence = sequence\n\tend\n\tdef nucleotide_counts()\n\t\treturn @@DNA_BASES.chars.each_with_object({}) { |key, hash|\n\t\t\thash[key] = count(key)\n\t\t}\n\tend\n\tdef count(base)\n\t\traise ArgumentError, 'Invalid base' unless @@BASES.include?(base)\n\t\treturn @sequence.count(base)\n\tend\nend	\N	\N	0	3	2013-12-05 06:05:54	2013-12-05 06:05:54	166	nucleotide-count.rb
336	33	8a11f5601e4854ecb62e5ca4	superseded	ruby	nucleotide-count	class DNA\n\t@@DNA_BASES = 'ACGT'\n\t@@BASES = "#{@@DNA_BASES}U"\n\n\tdef initialize(sequence)\n\t\tif !sequence.empty? and sequence !~ /\\A[#{@@DNA_BASES}]+\\Z/ then \n\t\t\traise ArgumentError, 'Invalid base in sequence'\n\t\tend\n\t\t@sequence = sequence\n\tend\n\tdef nucleotide_counts()\n\t\treturn @@DNA_BASES.chars.each_with_object({}) { |key, hash|\n\t\t\thash[key] = count(key)\n\t\t}\n\tend\n\tdef count(base)\n\t\tunless @@BASES.include?(base) then\n\t\t\traise ArgumentError, 'Invalid base'\n\t\tend\n\t\treturn @sequence.count(base)\n\tend\nend	\N	\N	0	1	2014-01-05 09:58:48	2014-01-05 09:58:48	166	nucleotide-count.rb
337	33	a678dff78be07c4907aeef05	superseded	ruby	nucleotide-count	class DNA\n\t@@DNA_BASES = 'ACGT'\n\t@@BASES = "#{@@DNA_BASES}U"\n\n\tdef initialize(sequence)\n\t\traise ArgumentError, 'Invalid base in sequence' unless sequence.empty? or sequence =~ /\\A[#{@@DNA_BASES}]+\\Z/\n\t\t@sequence = sequence\n\tend\n\tdef nucleotide_counts()\n\t\treturn @@DNA_BASES.chars.each_with_object({}) { |key, hash|\n\t\t\thash[key] = count(key)\n\t\t}\n\tend\n\tdef count(base)\n\t\traise ArgumentError, 'Invalid base' unless @@BASES.include?(base)\n\t\treturn @sequence.count(base)\n\tend\nend	\N	\N	0	2	2014-03-02 05:35:51	2014-03-02 05:35:51	166	nucleotide-count.rb
338	33	73af3acf7f3b642f093a3de1	pending	javascript	robot-name	;\r\nvar LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",\r\n    DIGITS = "0123456789",\r\n    LETTERS_LENGTH_SQUARED = LETTERS.length*LETTERS.length,\r\n    selectRandomNFromSet = function(n, set) {\r\n        var s = "", i, len = set.length;\r\n        for(i = 0; i < n; i++)\r\n            s += set[Math.floor(Math.random()*len)];\r\n        return s;\r\n    },\r\n    randomLetters = function(n) {\r\n        return selectRandomNFromSet(n, LETTERS);\r\n    },\r\n    randomDigits = function(n) {\r\n        return selectRandomNFromSet(n, DIGITS);\r\n    },\r\n\r\n    nameCache = {},\r\n    numberOfDigits = 3,\r\n    numberOfNames = 0,\r\n    maxNamesFor = function(n) {\r\n        return LETTERS_LENGTH_SQUARED*Math.pow(10,n);\r\n    },\r\n    maxNumberOfNames = maxNamesFor(numberOfDigits),\r\n    cache = function(name) {\r\n        nameCache[name] = 1;\r\n        numberOfNames++;\r\n        if(numberOfNames >= maxNumberOfNames) {\r\n            numberOfDigits++;\r\n            maxNumberOfNames = maxNamesFor(numberOfDigits);\r\n        }\r\n        return name;\r\n    },\r\n    uniqueName = function() {\r\n        var newName;\r\n        do {\r\n            newName = randomLetters(2) + randomDigits(numberOfDigits);\r\n        } while(newName in nameCache);\r\n        return newName;\r\n    },\r\n    makeName = function() {\r\n        return cache(uniqueName());\r\n    },\r\n    Robot = function() {\r\n        var self = this;\r\n        this.reset = function() {\r\n            return self.name = makeName();\r\n        };\r\n        this.reset();\r\n    };\r\n\r\nmodule.exports = Robot;\r\n\r\n// Added test to robot-name_test.spec.js\r\n\r\nfunction testNoRepeats() {\r\n  it("generates a million names and never repeats", function() {\r\n    var robot = new Robot(),\r\n        originalName = robot.name, n = 1000000, t = 20,\r\n        i = 0;\r\n\r\n    setInterval(function() {\r\n      var k = 10000;\r\n      for(var j = 0; j < k; j++)\r\n          expect(originalName).not.toEqual(robot.reset());\r\n      i += k;\r\n    }, 1);\r\n\r\n    waitsFor(function() {\r\n      return i >= n;\r\n    }, "robot to generate " + n + " names in " + t + " seconds.", t * 1000);\r\n\r\n    runs(function() {\r\n      console.log("Got up to " + i);\r\n    });\r\n  });\r\n}\r	\N	\N	0	2	2014-01-15 01:00:21	2014-01-15 01:00:21	167	robot-name.js
339	33	0c7d9ef57e24964edff07c38	superseded	javascript	robot-name	;\n\nvar LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",\n    DIGITS = "0123456789",\n    LETTERS_LENGTH = LETTERS.length,\n    selectRandomNFromSet = function(n, set) {\n        var s = "", i, len = set.length;\n        for(i = 0; i < n; i++)\n            s += set[Math.floor(Math.random()*len)];\n        return s;\n    },\n    randomLetters = function(n) {\n        return selectRandomNFromSet(n, LETTERS);\n    },\n    randomDigits = function(n) {\n        return selectRandomNFromSet(n, DIGITS);\n    },\n    \n    nameCache = {},\n    numberOfDigits = 3,\n    numberOfNames = 0,\n    maxNamesFor = function(n) {\n        return LETTERS_LENGTH*LETTERS_LENGTH*Math.pow(10,n);\n    },\n    maxNumberOfNames = maxNamesFor(numberOfDigits),\n    makeName = function() {\n        var newName;\n        do {\n            newName = randomLetters(2) + randomDigits(numberOfDigits);\n        } while(newName in nameCache);\n        \n        nameCache[newName] = 1;\n        numberOfNames++;\n        if(numberOfNames > maxNumberOfNames) {\n            numberOfDigits++;\n            maxNumberOfNames = maxNamesFor(numberOfDigits);\n        }\n        return newName; \n    };\n\nvar Robot = function() {\n    var self = this;\n    this.name = makeName();\n    this.reset = function() {\n        self.name = makeName();\n    };\n};\n\nmodule.exports = Robot;	\N	\N	0	1	2014-04-13 14:15:37	2014-04-13 14:15:37	167	robot-name.js
340	15	bcad7668d43aa227a38558cb	pending	ruby	word-count	class Phrase\n  attr_reader :input \n\n  def initialize(input)\n    @input = input.downcase.scan(/\\w+/)\n\n  end\n\n  def word_count\n      counts = Hash.new(0)\n      @input.each { |word| counts[word] += 1}\n      return counts\n  end\n\nend	\N	\N	0	1	2014-03-18 19:05:27	2014-03-18 19:05:27	168	word-count.rb
341	15	654e3effb992c75bd1e23abd	pending	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport qualified Data.Map as Map\nimport Data.List (union)\n\ndnaNucleotides = ['A','T','C','G']\nrnaNucleotides = ['A','U','C','G']\nvalidNucleotides = dnaNucleotides `union` rnaNucleotides\n\ncount :: Char -> String -> Int\ncount c strand = length $ filter (== nucleotide) strand\n  where nucleotide = if c `elem` validNucleotides\n                     then c\n                     else error ("invalid nucleotide " ++ show c)\n\nnucleotideCounts :: String -> Map.Map Char Int\nnucleotideCounts strand = Map.fromListWith (+) (map zero dnaNucleotides ++ map one strand)\n  where zero n = (n, 0)\n        one n  = (n, 1)	\N	\N	0	2	2014-03-10 12:36:48	2014-03-10 12:36:48	169	nucleotide-count.hs
342	15	a8c0f1dbc149ec1d313b7a7e	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport qualified Data.Map as Map\nimport Data.List (union)\n\ndnaNucleotides = ['A','T','C','G']\nrnaNucleotides = ['A','U','C','G']\nvalidNucleotides = dnaNucleotides `union` rnaNucleotides\n\ncount :: Char -> String -> Integer\ncount c "" = 0\ncount c (x:xs) = increment + count nucleotide xs\n  where increment  = if c == x then 1 else 0\n        nucleotide = if c `elem` validNucleotides\n                     then c\n                     else error("invalid nucleotide '" ++ [c] ++ "'")\n\nnucleotideCounts :: String -> Map.Map Char Integer\nnucleotideCounts strand = Map.fromList $ map doCount dnaNucleotides\n  where doCount n = (n, count n strand)	\N	\N	0	1	2014-04-06 15:30:18	2014-04-06 15:30:18	169	nucleotide-count.hs
343	15	9d53971ffeb0e16fff20c21c	pending	clojure	bob	(ns bob (:require [clojure.string :as str]))\n\n(defn silent? [message]\n  (empty? (str/trim message)))\n\n(def upper (set (map #(char (+ % (int \\A))) (range 26))))\n(def lower (set (map #(char (+ % (int \\a))) (range 26))))\n\n(defn shouting? [message]\n  (and (some upper message) (not-any? lower message)))\n\n(defn question? [message]\n  (= \\? (last message)))\n\n(defn response-for [message]\n  (cond\n   (silent? message) "Fine. Be that way!"\n   (shouting? message) "Woah, chill out!"\n   (question? message) "Sure."\n   true "Whatever."))	\N	\N	0	2	2014-03-08 07:49:01	2014-03-08 07:49:01	170	bob.clj
344	15	322a35acaaee7109f01bb182	superseded	clojure	bob	(ns bob (:require [clojure.string :as str]))\n\n(defn silent? [message]\n  (= "" (str/trim message)))\n\n(defn shouting? [message]\n  (and (= message (str/upper-case message))\n       (not= message (str/lower-case message))))\n\n(defn question? [message]\n  (= \\? (first (reverse message))))\n\n(defn response-for [message]\n  (cond (silent? message) "Fine. Be that way!"\n\t(shouting? message) "Woah, chill out!"\n\t(question? message) "Sure."\n\ttrue "Whatever."))	\N	\N	0	1	2014-05-11 02:54:27	2014-05-11 02:54:27	170	bob.clj
345	15	baf9eedf7f8b3629d4d04e9d	superseded	ruby	accumulate	class Array\n  def accumulate\n    op = []\n    for e in self do\n      op << yield(e)\n    end\n    op\n  end\nend	\N	\N	0	1	2014-03-24 01:18:21	2014-03-24 01:18:21	171	array.rb
346	15	851634d0adea606292bdd0b8	pending	ruby	accumulate	class Array\n  def accumulate\n    self.each_with_object([]) do |element, array|\n    \tarray << yield(element)\n    end\n  end\nend	\N	\N	0	2	2014-04-20 01:11:46	2014-04-20 01:11:46	171	array.rb
347	15	49e21b45ea4c753b7fdb1838	pending	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    db[grade] ||= []\n    db[grade] << name\n  end\n\n  def grade(grade)\n    db[grade] || []\n  end\n\n  def sort\n    sorted = {}\n    db.keys.sort.each { |grade| sorted[grade] = @db[grade].sort }\n    sorted\n  end\nend	\N	\N	0	1	2014-01-07 16:31:26	2014-01-07 16:31:26	172	grade-school.rb
348	17	c2d752a6b3ac555f919eb3e8	superseded	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\nmodule WordProblem (answer) where\n\nimport qualified Data.Text as T\nimport Data.Attoparsec.Text\nimport Control.Monad\nimport Control.Applicative\nimport Data.List\n\noperation :: Parser (Integer -> Integer)\noperation = do\n    func <- (string "plus"          >> pure (+))\n        <|> (string "multiplied by" >> pure (*))\n        <|> (string "minus"         >> pure (-))\n        <|> (string "divided by"    >> pure div)\n    skipSpace\n    n <- signed decimal\n    skipSpace\n    return (`func` n)\n\nquestionParser :: Parser Integer\nquestionParser = do\n    void $ string "What is "\n    initialnumber <- signed decimal\n    skipSpace\n    operations <- many operation\n    char '?' >> endOfInput\n    return (foldl' (flip ($)) initialnumber operations)\n\nanswer :: String -> Maybe Integer\nanswer s = case parseOnly questionParser (T.pack s) of\n               Left _ -> Nothing\n               Right r -> Just r	\N	\N	0	1	2014-04-11 05:53:41	2014-04-11 05:53:41	173	wordy.hs
349	17	d9906463909f448e62109c29	pending	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\nmodule WordProblem (answer) where\n\nimport qualified Data.Text as T\nimport Data.Attoparsec.Text\nimport Control.Monad\nimport Control.Applicative\nimport Data.List\n\noperation :: Parser (Integer -> Integer)\noperation = do\n    func <- ("plus"          .*> pure (+))\n        <|> ("multiplied by" .*> pure (*))\n        <|> ("minus"         .*> pure (-))\n        <|> ("divided by"    .*> pure div)\n    skipSpace\n    n <- signed decimal\n    skipSpace\n    return (`func` n)\n\nquestionParser :: Parser Integer\nquestionParser = do\n    void $ string "What is "\n    initialnumber <- signed decimal\n    skipSpace\n    operations <- many operation\n    char '?' >> endOfInput\n    return (foldl' (flip ($)) initialnumber operations)\n\nanswer :: String -> Maybe Integer\nanswer s = case parseOnly questionParser (T.pack s) of\n               Left _ -> Nothing\n               Right r -> Just r	\N	\N	0	2	2014-04-11 08:17:36	2014-04-11 08:17:36	173	wordy.hs
350	17	2cfadccc8b732ecb8b1e752e	pending	go	raindrops	package raindrops\n\nimport "strconv"\n\nfunc Convert(input int) string {\n\tresult := ""\n\tif input % 3 == 0 {\n\t\tresult += "Pling"\n\t}\n\n\tif input % 5 == 0 {\n\t\tresult += "Plang"\n\t}\n\n\tif input % 7 == 0 {\n\t\tresult += "Plong"\n\t}\n\n\tif result == "" {\n\t\tresult += strconv.Itoa(input)\n\t}\n\n\treturn result\n}	\N	\N	0	1	2014-01-28 08:54:47	2014-01-28 08:54:47	174	raindrops.go
351	17	7c7e5aa58e4db8b8cd1e4914	superseded	ruby	scrabble-score	class Scrabble\n\n  SCORES = {'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1, 'l' => 1, 'n' => 1, 'r' => 1, 's' => 1, 't' => 1, \n            'd' => 2, 'g' => 2,\n            'b' => 3, 'c' => 3, 'm' => 3, 'p' => 3, \n            'f' => 4, 'h' => 4, 'v' => 4, 'w' => 4, 'y' => 4, \n            'k' => 5, \n            'j' => 8, 'x' => 8, \n            'q' => 10, 'z' => 10\n  }\n\n  def initialize (word)\n    @word = word\n  end\n\n  def self.score (word)\n    score = 0\n    if (word && word.strip.length > 0)\n      word.split(//).each { |letter| score += SCORES[letter.downcase] }\n    end\n    return score\n  end\n\n  def score\n    self.class.score(@word)\n  end\n\nend	\N	\N	0	1	2013-12-18 01:41:21	2013-12-18 01:41:21	175	scrabble.rb
352	17	4139634ced3a1e3e1a6d563b	pending	ruby	scrabble-score	class Scrabble\n\n  SCORES = {'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1, 'l' => 1, 'n' => 1, 'r' => 1, 's' => 1, 't' => 1,\n            'd' => 2, 'g' => 2,\n            'b' => 3, 'c' => 3, 'm' => 3, 'p' => 3,\n            'f' => 4, 'h' => 4, 'v' => 4, 'w' => 4, 'y' => 4,\n            'k' => 5,\n            'j' => 8, 'x' => 8,\n            'q' => 10, 'z' => 10\n  }\n\n  def initialize (word)\n    @word = word.strip if word\n  end\n\n  def self.score (word)\n    score = 0\n    if (word && word.length > 0)\n      letter_scores = word.split('').map { |letter| SCORES[letter.downcase]}\n      score = letter_scores.inject { |total, letter_score| total + letter_score }\n    end\n    score\n  end\n\n  def score\n    self.class.score(@word)\n  end\n\nend	\N	\N	0	2	2014-04-20 23:05:35	2014-04-20 23:05:35	175	scrabble.rb
353	17	a158fce2792afd0608af378b	superseded	elixir	scrabble-score	defmodule Scrabble do\n\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word\n    |> String.upcase\n    |> String.to_char_list!\n    |> Enum.map(&score_letter/1)\n    |> Enum.reduce(0, &(&1 + &2))\n  end\n\n  lc { letters, value } inlist [\n    {'AEIOULNRST', 1},\n    {'DG',         2},\n    {'BCMP',       3},\n    {'FHVWY',      4},\n    {'K',          5},\n    {'JX',         8},\n    {'QZ',        10}],\n  letter inlist letters do\n    defp score_letter(unquote(letter)), do: unquote(value)\n  end\n\n  defp score_letter(_), do: 0\n\nend	\N	\N	0	3	2014-01-02 11:31:13	2014-01-02 11:31:13	176	scrabble-score.exs
354	17	5dec69d3cf406786553e66c4	superseded	elixir	scrabble-score	defmodule Scoring do\n  defmacro define_score(letter, score) do\n    quote do\n      defp score_letter(unquote(letter)), do: unquote(score)\n    end\n  end\nend\n\ndefmodule Scrabble do\n  require Scoring\n\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word\n    |> String.downcase\n    |> scores\n    |> Enum.reduce(0, &(&1 + &2))\n  end\n\n  defp scores(word) do\n    case String.to_char_list(word) do\n      { :ok, chars } -> Enum.map(chars, &score_letter/1)\n    end\n  end\n\n  Enum.each 'AEIOULNRST', &(Scoring.define_score &1,  1)\n  Enum.each 'DG',         &(Scoring.define_score &1,  2)\n  Enum.each 'BCMP',       &(Scoring.define_score &1,  3)\n  Enum.each 'FHVWY',      &(Scoring.define_score &1,  4)\n  Enum.each 'K',          &(Scoring.define_score &1,  5)\n  Enum.each 'JX',         &(Scoring.define_score &1,  8)\n  Enum.each 'QZ',         &(Scoring.define_score &1, 10)\n\n  defp score_letter(_), do: 0\n\nend	\N	\N	0	1	2014-02-06 06:18:36	2014-02-06 06:18:36	176	scrabble-score.exs
355	17	ee82c6f24d15fb1ae0fbca25	superseded	elixir	scrabble-score	defmodule Scrabble do\n\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word |> String.upcase |> calculate_score |> Enum.reduce 0, &(&1 + &2)\n  end\n\n  defp calculate_score(word) do\n    case String.to_char_list(word) do\n      { :ok, chars } -> Enum.map(chars, &score_letter/1)\n    end\n  end\n\n  lc { letters, value } inlist [\n    {'AEIOULNRST', 1},\n    {'DG',         2},\n    {'BCMP',       3},\n    {'FHVWY',      4},\n    {'K',          5},\n    {'JX',         8},\n    {'QZ',        10}],\n  letter inlist letters do\n    defp score_letter(unquote(letter)), do: unquote(value)\n  end\n\n  defp score_letter(_), do: 0\n\nend	\N	\N	0	2	2014-03-15 22:11:51	2014-03-15 22:11:51	176	scrabble-score.exs
356	17	5584379179f26df9e749df2d	pending	elixir	scrabble-score	defmodule Scrabble do\n  import String, only: [upcase: 1, to_char_list!: 1]\n  import Enum,   only: [reduce: 3]\n\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word |> upcase |> to_char_list! |> reduce(0, &(score_letter(&1) + &2))\n  end\n\n  lc { letters, value } inlist [\n    {'AEIOULNRST', 1},\n    {'DG',         2},\n    {'BCMP',       3},\n    {'FHVWY',      4},\n    {'K',          5},\n    {'JX',         8},\n    {'QZ',        10}],\n  letter inlist letters do\n    defp score_letter(unquote(letter)), do: unquote(value)\n  end\n\n  defp score_letter(_), do: 0\n\nend	\N	\N	0	4	2014-06-20 23:09:42	2014-06-20 23:09:42	176	scrabble-score.exs
357	17	3e9da01ee9b7a4fc33df4eaf	superseded	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\n-- finds anagrams in list, returns [] if none found\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w x = filter (w `isAnagramOf`) x\n\nisAnagramOf :: String -> String -> Bool\nw `isAnagramOf` x\n  | fix w == fix x && w /= x  = True\n  | otherwise                 = False\n    where fix = sort . map toLower	\N	\N	0	1	2014-03-16 22:10:35	2014-03-16 22:10:35	177	Anagram.hs
358	17	df369ec66c087d6e0cb14a80	pending	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\n-- finds anagrams in list, returns [] if none found\n\nanagramsFor1 :: String -> [String] -> [String]\nanagramsFor1 w = filter (w `isAnagramOf`)\n where\n   isAnagramOf x y = fix x == fix y && x /= y\n   fix = sort . map toLower\n\nanagramsFor2 :: String -> [String] -> [String]\nanagramsFor2 w = filter isAnagramOf\n where\n   isAnagramOf y = length y == l && fix y == c && map toLower y /= lw\n   fix = sort . map toLower\n   l = length w\n   c = fix w\n   lw = map toLower w\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor = ensureAll2 [anagramsFor1, anagramsFor2]\n\nensureAll2 :: Eq c => [a -> b -> c] -> a -> b -> c\nensureAll2 fns a b = if allEq list then head list else error "Not consistent"\n  where\n    list = map (\\x -> x a b) fns\n    allEq x = all (== head x) (tail x)	\N	\N	0	2	2014-04-29 10:25:13	2014-04-29 10:25:13	177	Anagram.hs
359	17	5bb9a5d91aec9a7c4e75fc8e	pending	clojure	roman-numerals	(ns roman (:require [clojure.string :as string]))\n\n(def symbols ["I", "V", "X", "L", "C", "D", "M"])\n\n(defn expand-I [x]\n  (apply str (repeat x "I")))\n\n(defn upgrade-marked [s]\n  (cond\n   (re-find #"XXXX([VI])X"\n            s)\n   (upgrade-marked (string/replace s\n                                   #"XXXX(.)X"\n                                   "$1L"))\n\n   (re-find #"CCCC([IVXL])C"\n            s)\n   (upgrade-marked (string/replace s\n                                   #"CCCC([IVX])C"\n                                   "$1D")),\n\n   (re-find #"V(I)V" s)\n   (upgrade-marked (string/replace s #"VIV" "IX"))\n\n   (re-find #"L([IVX])L" s)\n   (upgrade-marked (string/replace s #"L([IVXCDM])L" "$1C")),\n\n   (re-find #"D([IVXLC])D" s)\n   (upgrade-marked (string/replace s\n                                   #"D([IVXLC])D"\n                                   "$1M"))\n   :else s))\n\n(defn prefix-all [s]\n  (-> s\n      (string/replace #"IIII" "IV")\n      (string/replace #"XXXX" "XL")\n      (string/replace #"CCCC" "CD")\n      upgrade-marked))\n\n(defn collapse [s]\n  (-> s\n      (string/replace #"IIIII" "V")\n      (string/replace #"VV" "X")\n      (string/replace #"XXXXX" "L")\n      (string/replace #"LL" "C")\n      (string/replace #"CCCCC" "D")\n      (string/replace #"DD" "M")))\n\n(defn numerals [x]\n  (-> x\n      expand-I\n      collapse\n      prefix-all))	\N	\N	0	1	2014-03-11 12:06:03	2014-03-11 12:06:03	178	roman.clj
360	17	eec591f9c486bedf3e693b4e	pending	ruby	house	class House\n  def verse(num)\n    @num = num\n    @verses = ""\n    write(@num)\n  end\n\n  def verses(start, stop)\n    verses = (start..stop).map do |n|\n      verse(n) + "\\n"\n    end\n    verses.join("")\n  end\n\n  def write(num)\n\n    verses = {\n      1 => "the house that Jack built.\\n",\n      2 => "the malt that lay in ",\n      3 => "the rat that ate ",\n      4 => "the cat that killed ",\n      5 => "the dog that worried ",\n      6 => "the cow with the crumpled horn that tossed ",\n      7 => "the maiden all forlorn that milked ",   \n      8 => "the man all tattered and torn that kissed ",\n      9 => "the priest all shaven and shorn that married ",\n      10 => "the rooster that crowed in the morn that woke ",\n      11 => "the farmer sowing his corn that kept ",\n      12 => "the horse and the hound and the horn that belonged to ",\n    }\n    @verses = "#{@verses}#{verses[num]}"\n    @num -= 1\n    return "This is #{@verses}" if @num < 1\n    write(@num)\n  end\nend	\N	\N	0	1	2014-01-31 11:38:13	2014-01-31 11:38:13	179	house.rb
372	17	d97f6f7b8f4dca7d65d44575	pending	ruby	space-age	class SpaceAge\n\n  def initialize(age)\n    @age = age\n  end\n\n  def seconds\n    @age\n  end\n\n  def on_earth\n    (@age.to_f / 31557600).round(2)\n  end\n\n  def on_mercury\n    (@age.to_f / (31557600 * 0.2408467)).round(2)\n  end\n\n  def on_venus\n    (@age.to_f / (31557600 * 0.61519726)).round(2)\n  end\n\n  def on_mars\n    (@age.to_f / (31557600 * 1.8808158)).round(2)\n  end\n\n  def on_jupiter\n    (@age.to_f / (31557600 * 11.862615)).round(2)\n  end\n\n  def on_saturn\n    (@age.to_f / (31557600 * 29.447498)).round(2)\n  end\n\n  def on_uranus\n    (@age.to_f / (31557600 * 84.016846)).round(2)\n  end\n\n  def on_neptune\n    (@age.to_f / (31557600 * 164.79132)).round(2)\n  end\nend	\N	\N	0	1	2014-02-22 11:46:41	2014-02-22 11:46:41	185	space_age.rb
361	17	52b08235934a02cb0024b57a	pending	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    # remove special characters\n    forbiddenSigns = [".", ",", ":", ";", "!", "&", "@", "$", "%", "^"]\n    withoutPunctuation = String.replace sentence, forbiddenSigns, ""\n\n    # replace all _ with a space\n    underscoreIsSpace = String.replace withoutPunctuation, "_", " "\n\n    # downcase to normalize\n    downcasedSentence = String.downcase underscoreIsSpace\n\n    # make list of single words\n    splitSentence = String.split downcasedSentence\n\n    # returns a filtered version of splitSentence where all words\n    # that aren't the given input are removed\n    splitSentenceFilteredByWord = fn\n      input -> Enum.filter splitSentence, fn(word) -> word == input end\n    end\n\n    # create a tuple for finally making the HashDict\n    createTupleWithCount = fn\n      word -> {word, Enum.count splitSentenceFilteredByWord.(word)}\n    end\n\n    # add tuple with count for every word in splitSentence to a new HashDict\n    HashDict.new Enum.map splitSentence, createTupleWithCount\n  end\nend	\N	\N	0	1	2014-01-10 01:35:52	2014-01-10 01:35:52	180	word_count.exs
362	17	e5153d9bd3eccabf375b99e4	superseded	ruby	rna-transcription	class RibonucleicAcid < String\n        def initialize(code)\n                super code\n        end\n\nend\n\nclass DeoxyribonucleicAcid < String\n\n        def initialize(code)\n                super code\n        end\n\n        def to_rna\n                rna_code = gsub('T', 'U')\n                RibonucleicAcid.new(rna_code)\n        end\nend	\N	\N	0	1	2014-02-05 19:52:58	2014-02-05 19:52:58	181	rna-transcription.rb
363	17	98b37835161c814802ac9127	superseded	ruby	rna-transcription	class RibonucleicAcid < String\n  def initialize(code)\n    super code\n  end\n\nend\n\nclass DeoxyribonucleicAcid < String\n\n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  def initialize(code)\n    super code\n  end\n\n  def to_rna\n    rna_code = gsub(THYMIDINE, URACIL)\n    RibonucleicAcid.new(rna_code)\n  end\nend	\N	\N	0	3	2014-03-18 21:39:03	2014-03-18 21:39:03	181	rna-transcription.rb
364	17	2f75d52e40bf5cf9b8f55d52	superseded	ruby	rna-transcription	class RibonucleicAcid < String\n  def initialize(code)\n    super code\n  end\n\nend\n\nclass DeoxyribonucleicAcid < String\n\n  def initialize(code)\n    super code\n  end\n\n  def to_rna\n    rna_code = gsub('T', 'U')\n    RibonucleicAcid.new(rna_code)\n  end\nend	\N	\N	0	2	2014-03-26 01:47:11	2014-03-26 01:47:11	181	rna-transcription.rb
365	17	404d311d899f6ea8887223f8	superseded	ruby	rna-transcription	module StringComparable\n  def ==(other)\n    if other.respond_to? :to_str\n      to_str == other\n    else\n      super.==(other)\n    end\n  end\nend\n\nclass RibonucleicAcid\n\n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  include StringComparable\n\n  def initialize(code)\n    @code = code\n  end\n\n  def self.from_dna(code)\n    new(code.gsub(THYMIDINE, URACIL))\n  end\n  \n  def to_str\n    @code\n  end\n\nend\n\nclass DeoxyribonucleicAcid\n  \n  include StringComparable\n\n  def initialize(code)\n    @code = code\n    @rna = RibonucleicAcid.from_dna(code)\n  end\n\n  def to_rna\n    @rna\n  end\n\n  def to_str\n    @code\n  end\nend	\N	\N	0	4	2014-04-08 05:25:06	2014-04-08 05:25:06	181	rna-transcription.rb
366	17	1b782c5b04a91d6dfcd94653	pending	ruby	rna-transcription	module StringComparable\n  def ==(other)\n    if other.respond_to? :to_str\n      to_str == other\n    else\n      super.==(other)\n    end\n  end\nend\n\nclass Acid\n  include StringComparable\n\n  def initialize(code)\n    @code = code\n  end\n\n  def to_str\n    @code\n  end\nend\n\nclass RibonucleicAcid < Acid\n  URACIL = 'U'\n\n  def self.from_dna(code)\n    new(code.gsub(DeoxyribonucleicAcid::THYMIDINE, URACIL))\n  end\n\nend\n\nclass DeoxyribonucleicAcid < Acid\n  THYMIDINE = 'T'\n\n  def initialize(code)\n    super(code)\n    @rna = RibonucleicAcid.from_dna(code)\n  end\n\n  def to_rna\n    @rna\n  end\n\nend	\N	\N	0	5	2014-07-01 23:55:21	2014-07-01 23:55:21	181	rna-transcription.rb
367	17	98cfeb16252197f69cd3706d	superseded	javascript	robot-name	var Robot = (function(){\n  "use strict";\n  var robots = [];\n  \n  function Robot(){\n    this.name = generateName();\n  };\n  \n  Robot.prototype.reset = function(){\n    this.name = generateName();\n  };\n  \n  var generateName = function(){\n    var name;\n    while(robots.indexOf(name=randomName()) !== -1){}\n    robots.push(name);\n    return name;\n  };\n  \n  var pad = function(string, padchar, length){\n    var output = "";\n    var toPad = length - string.length;\n    for(var i = 0; i < toPad; i++){\n      output+=padchar;\n    }\n    return output+string;\n  }\n  \n  var rand = function(min,max){\n    return Math.random() * (max - min) + min;\n  };\n  \n  var randomChar = function(){\n    return String.fromCharCode(rand(65,90))\n  };\n  \n  var randomName = function(){\n    return [randomChar(),randomChar(),pad(rand(0,999).toString(),'0',3)].join('')\n  };\n  \n  return Robot;\n})();\nmodule.exports = Robot;	\N	\N	0	1	2014-03-14 02:23:05	2014-03-14 02:23:05	182	robot-name.js
368	17	2580412894e0c1c704a8a12a	pending	javascript	robot-name	var Robot = (function(){\n  "use strict";\n  var robots = [];\n  \n  function Robot(){\n    this.reset();\n  };\n  \n  Robot.prototype.reset = function(){\n    this.name = generateName();\n  };\n  \n  var generateName = function(){\n    var name;\n    while(robots.indexOf(name=randomName()) !== -1){}\n    robots.push(name);\n    return name;\n  };\n  \n  var pad = function(string, padchar, length){\n    var output = "";\n    var toPad = length - string.length;\n    for(var i = 0; i < toPad; i++){\n      output+=padchar;\n    }\n    return output+string;\n  }\n  \n  var rand = function(min,max){\n    return Math.random() * (max - min) + min;\n  };\n  \n  var randomChar = function(){\n    return String.fromCharCode(rand(65,90));\n  };\n  \n  var randomName = function(){\n    return [randomChar(),\n            randomChar(),\n            pad(rand(0,999).toString(),'0',3)].join('')\n  };\n  \n  return Robot;\n})();\nmodule.exports = Robot;	\N	\N	0	2	2014-04-04 03:22:20	2014-04-04 03:22:20	182	robot-name.js
369	17	4b2e225216a5a5e29c184c24	pending	ruby	gigasecond	class Gigasecond\n  def initialize(birthdate)\n    @birthdate  = birthdate\n  end\n\n  def date\n    @birthdate + 1000000000/ 86400\n  end\nend	\N	\N	0	1	2014-05-14 15:17:50	2014-05-14 15:17:50	183	gigasecond.rb
370	17	6736d0220eed198a34d50ed4	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    regular_leap_year? or exceptional_century?\n  end\n\n  private\n\n  def regular_leap_year?\n    divisible_by_four? and !divisible_by_one_hundred?\n  end\n\n  def exceptional_century?\n    divisible_by_four_hundred?\n  end\n\n  def divisible_by_four?\n    divisible_by?(4)\n  end\n\n  def divisible_by_one_hundred?\n    divisible_by?(100)\n  end\n\n  def divisible_by_four_hundred?\n    divisible_by?(400)\n  end\n\n  def divisible_by?(number)\n    year.modulo(number).zero?\n  end\nend	\N	\N	0	1	2014-01-17 16:27:41	2014-01-17 16:27:41	184	leap.rb
371	17	0ec6fe5cfbb05c063438a417	pending	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    regular_leap_year? or exceptional_century?\n  end\n\n  private\n\n  def regular_leap_year?\n    divisible_by?(4) and !divisible_by?(100)\n  end\n\n  def exceptional_century?\n    divisible_by?(400)\n  end\n\n  def divisible_by?(number)\n    year.modulo(number).zero?\n  end\nend	\N	\N	0	2	2014-02-15 08:27:05	2014-02-15 08:27:05	184	leap.rb
373	17	561f76f1f41e7f9a76cfe57b	pending	clojure	atbash-cipher	(ns atbash\r\n  (require [clojure.string :as str]))\r\n\r\n(def ^:private alphabet (map char (range (int \\a) (inc (int \\z)))))\r\n(def ^:private cipher (zipmap alphabet (reverse alphabet)))\r\n\r\n(defn encode [s]\r\n  ;; Encode s in atbash cipher\r\n  (let [cleaned (-> (str/lower-case s)\r\n                    (str/replace #"\\W" ""))\r\n        encrypted (map #(cipher % %) cleaned)\r\n        grouped (->> (partition-all 5 encrypted)\r\n                     (interpose " ")\r\n                     (flatten)\r\n                     (apply str))]\r\n    grouped))\r	\N	\N	0	2	2014-04-20 20:03:37	2014-04-20 20:03:37	186	atbash.clj
374	17	d2f4d197e42ec33373bd7795	superseded	clojure	atbash-cipher	(ns atbash\r\n  (require [clojure.string :as str]))\r\n\r\n(def ^:private alphabet (map char (range (int \\a) (inc (int \\z)))))\r\n(def ^:private cipher (zipmap alphabet (reverse alphabet)))\r\n\r\n(defn encode [s]\r\n  ;; Encode s in atbash cipher\r\n  (let [cleaned (-> (str/lower-case s)\r\n                    (str/replace #"\\W" ""))\r\n        encrypted (map #(cipher % %) cleaned)\r\n        grouped (->> (partition-all 5 encrypted)\r\n                     (map (partial apply str))\r\n                     (interpose " "))]\r\n    (apply str grouped)))\r	\N	\N	0	1	2014-05-25 10:36:00	2014-05-25 10:36:00	186	atbash.clj
375	17	dd455410cb5f71f03ccbd97e	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @words = extract_words(phrase)\n  end\n\n  def word_count\n    score = {}\n    @words.each do |word|\n      score[word] = @words.grep(word).count\n    end\n    score\n  end\n\n  private\n\n  def extract_words(phrase)\n    phrase.split(/\\W/).reject do |word|\n      word.empty?\n    end.map do |word|\n      word.downcase\n    end\n  end\nend	\N	\N	0	1	2014-01-11 10:10:22	2014-01-11 10:10:22	187	word-count.rb
376	17	7b69536c95c41bd8743c2659	pending	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.split(/\\W+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) do |word, score|\n      score[word] += 1\n    end\n  end\nend	\N	\N	0	2	2014-02-12 06:20:21	2014-02-12 06:20:21	187	word-count.rb
377	17	4bdaa9fe05193d85545bc8c7	superseded	clojure	beer-song	(ns beer)\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (list "2 bottles" "1 bottle" "Take one down and pass it around")\n\t\t(= n 1) (list "1 bottle" "no more bottles" "Take it down and pass it around")\n\t\t(= n 0) (list "no more bottles" "99 bottles" "Go to the store and buy some more")\n\t\t:else (list (str n " bottles") (str (- n 1) " bottles") "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (first vc)\n\t\t  next (second vc)\n\t\t  action (last vc)]\n\t(str (clojure.string/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(clojure.string/join\n\t\t(map #(str % "\\n")\n\t\t\t(map #(verse %) (range number (- stopAt 1) -1))))))	\N	\N	0	5	2014-01-03 15:52:46	2014-01-03 15:52:46	188	beer-song.clj
378	17	8efe61058a311872d5ecf9ad	superseded	clojure	beer-song	(ns beer\n\t(:require [clojure.string :as s :only [capitalize join]]))\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (hash-map :bottles "2 bottles" :next "1 bottle" :action "Take one down and pass it around")\n\t\t(= n 1) (hash-map :bottles "1 bottle" :next "no more bottles" :action "Take it down and pass it around")\n\t\t(= n 0) (hash-map :bottles "no more bottles" :next "99 bottles" :action "Go to the store and buy some more")\n\t\t:else (hash-map :bottles (str n " bottles") :next (str (- n 1) " bottles") :action "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (vc :bottles)\n\t\t  next (vc :next)\n\t\t  action (vc :action)]\n\t(str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(s/join\n\t\t(map #(str % "\\n")\n\t\t\t(map #(verse %) (range number (- stopAt 1) -1))))))	\N	\N	0	7	2014-01-18 19:59:28	2014-01-18 19:59:28	188	beer-song.clj
379	17	c54885fd5d74ec5bb874e6ae	pending	clojure	beer-song	(ns beer\n\t(:require [clojure.string :as s :only [capitalize join]]))\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (hash-map :b "2 bottles" :n "1 bottle" :a "Take one down and pass it around")\n\t\t(= n 1) (hash-map :b "1 bottle" :n "no more bottles" :a "Take it down and pass it around")\n\t\t(= n 0) (hash-map :b "no more bottles" :n "99 bottles" :a "Go to the store and buy some more")\n\t\t:else (hash-map :b (str n " bottles") :n (str (dec n) " bottles") :a "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [{bottles :b next :n action :a} (verse-components number)]\n\t(str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(s/join\n\t\t(map #(str % "\\n")\n\t\t\t(map #(verse %) (range number (dec stopAt) -1))))))	\N	\N	0	9	2014-03-03 05:13:39	2014-03-03 05:13:39	188	beer-song.clj
380	17	3c370499b6feb050d3a8951f	superseded	clojure	beer-song	(ns beer\n\t(:require [clojure.string :as s :only [capitalize join]]))\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (hash-map :bottles "2 bottles" :next "1 bottle" :action "Take one down and pass it around")\n\t\t(= n 1) (hash-map :bottles "1 bottle" :next "no more bottles" :action "Take it down and pass it around")\n\t\t(= n 0) (hash-map :bottles "no more bottles" :next "99 bottles" :action "Go to the store and buy some more")\n\t\t:else (hash-map :bottles (str n " bottles") :next (str (dec n) " bottles") :action "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (vc :bottles)\n\t\t  next (vc :next)\n\t\t  action (vc :action)]\n\t(str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(s/join\n\t\t(map #(str % "\\n")\n\t\t\t(map #(verse %) (range number (dec stopAt) -1))))))	\N	\N	0	8	2014-03-04 16:30:45	2014-03-04 16:30:45	188	beer-song.clj
381	17	a33c250cc10cf561bd76698c	superseded	clojure	beer-song	(ns beer)\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (list "2 bottles" "1 bottle" "Take one down and pass it around")\n\t\t(= n 1) (list "1 bottle" "no more bottles" "Take it down and pass it around")\n\t\t(= n 0) (list "no more bottles" "99 bottles" "Go to the store and buy some more")\n\t\t:else (list (str n " bottles") (str (- n 1) " bottles") "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (first vc)\n\t\t  next (second vc)\n\t\t  action (last vc)]\n\t(str (clojure.string/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(str (clojure.string/join "\\n"\n\t\t(map #(verse %) (range number (- stopAt 1) -1))) "\\n")))	\N	\N	0	1	2014-03-06 13:37:14	2014-03-06 13:37:14	188	beer-song.clj
394	23	9a17dc09a68a065bd72e10ef	superseded	ruby	hamming	class Hamming\n\n  def self.compute(first, second)\n    HammingComputer.new(first, second).compute\n  end\n\nend\n\nclass HammingComputer\n\n  def initialize(first, second)\n    @first = first\n    @second = second\n  end\n\n  def compute\n    (0...length_of_shortest_strand).reduce(0) {|sum, index| sum + distance_value_at_index(index)}\n  end\n\n  private\n\n  attr_reader :first, :second, :length\n\n  def length_of_shortest_strand\n    [first.length, second.length].min\n  end\n\n  def distance_value_at_index(index)\n    first[index] != second[index] ? 1 : 0\n  end\n\nend	\N	\N	0	1	2014-05-21 00:33:34	2014-05-21 00:33:34	193	hamming.rb
382	17	890af9643082d42f33c0949a	superseded	clojure	beer-song	(ns beer)\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (list "2 bottles" "1 bottle" "Take one down and pass it around")\n\t\t(= n 1) (list "1 bottle" "no more bottles" "Take it down and pass it around")\n\t\t(= n 0) (list "no more bottles" "99 bottles" "Go to the store and buy some more")\n\t\t:else (list (str n " bottles") (str (- n 1) " bottles") "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (first vc)\n\t\t  next (second vc)\n\t\t  action (last vc)]\n\t(str (clojure.string/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(str (clojure.string/join "\\n"\n\t\t(map #(verse %) (range number (- stopAt 1) -1))) "\\n")))	\N	\N	0	3	2014-03-20 05:39:19	2014-03-20 05:39:19	188	beer-song.clj
383	17	4a4cf352179d31520ca61230	superseded	clojure	beer-song	(ns beer\n\t(:require [clojure.string :as s :only [capitalize join]]))\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (list "2 bottles" "1 bottle" "Take one down and pass it around")\n\t\t(= n 1) (list "1 bottle" "no more bottles" "Take it down and pass it around")\n\t\t(= n 0) (list "no more bottles" "99 bottles" "Go to the store and buy some more")\n\t\t:else (list (str n " bottles") (str (- n 1) " bottles") "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (first vc)\n\t\t  next (second vc)\n\t\t  action (last vc)]\n\t(str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(s/join\n\t\t(map #(str % "\\n")\n\t\t\t(map #(verse %) (range number (- stopAt 1) -1))))))	\N	\N	0	6	2014-05-20 15:08:40	2014-05-20 15:08:40	188	beer-song.clj
384	17	324ff19711aff42c33faa4bc	superseded	clojure	beer-song	(ns beer)\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (list "2 bottles" "1 bottle" "Take one down and pass it around")\n\t\t(= n 1) (list "1 bottle" "no more bottles" "Take it down and pass it around")\n\t\t(= n 0) (list "no more bottles" "99 bottles" "Go to the store and buy some more")\n\t\t:else (list (str n " bottles") (str (- n 1) " bottles") "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (first vc)\n\t\t  next (second vc)\n\t\t  action (last vc)]\n\t(str (clojure.string/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t\t(map #(str % "\\n")\n\t\t\t(map #(verse %) (range number (- stopAt 1) -1))\n\t\t) \n\t\t\t))	\N	\N	0	4	2014-06-19 06:13:00	2014-06-19 06:13:00	188	beer-song.clj
385	17	69b742a1c2e3aec5a58516c9	superseded	clojure	beer-song	(ns beer)\n\n(defn- verse-components [n]\n\t(cond \n\t\t(= n 2) (list "2 bottles" "1 bottle" "Take one down and pass it around")\n\t\t(= n 1) (list "1 bottle" "no more bottles" "Take it down and pass it around")\n\t\t(= n 0) (list "no more bottles" "99 bottles" "Go to the store and buy some more")\n\t\t:else (list (str n " bottles") (str (- n 1) " bottles") "Take one down and pass it around")))\n\n(defn verse [number]\n\t(let [vc (verse-components number) \n\t\t  bottles (first vc)\n\t\t  next (second vc)\n\t\t  action (last vc)]\n\t(str (clojure.string/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n"\n\t\t  action ", " next " of beer on the wall.\\n")))\n\n(defn sing\n \t([number] (sing number 0))\n\t([number, stopAt] \n\t(str (map #(verse %) (range number (- stopAt 1) -1)) "\\n")))	\N	\N	0	2	2014-06-24 04:16:33	2014-06-24 04:16:33	188	beer-song.clj
386	17	0243aa9786ed75fe60e5d538	pending	ruby	etl	module ETL\n  def self.transform(old)\n    res = {}\n    old.each do |key, values| \n      values.each do |val| \n        res[val.downcase] = key\n      end\n    end\n    res\n  end\nend	\N	\N	0	1	2013-12-24 20:29:43	2013-12-24 20:29:43	189	etl.rb
387	23	12dd071ecbf66bb2b7a976da	pending	python	matrix	class Matrix:\r\n\tdef __init__(self, matrixString):\r\n\t\tself.rows = self.stringToMatrixRows(matrixString)\r\n\t\tself.columns = self.rowsToColumns(self.rows)\r\n\t\t\r\n\tdef stringToMatrixRows(self, matrixString):\r\n\t\treturn [[int(number) for number in row.strip().split(" ")] for row in matrixString.split("\\n")]\r\n\t\r\n\tdef rowsToColumns(self, rows):\r\n\t\treturn [[row[n] for row in rows] for n in range(len(rows[0]))]	\N	\N	0	1	2014-01-19 15:00:39	2014-01-19 15:00:39	190	matrix.py
388	23	25c965dd4bcba20ba91c4fd0	superseded	haskell	word-count	module WordCount\n( wordCount\n) where\n\nimport Data.Char (isDigit, isLetter, toLower)\nimport Data.List (foldl')\nimport Data.Map (Map)\nimport qualified Data.Map as M\n\nwordCount :: String -> Map String Int\nwordCount = foldl' (\\m k -> M.insertWith (+) k 1 m) M.empty\n          . filter (not . null) . words\n          . map (\\c -> if isLetter c || isDigit c then toLower c else ' ')	\N	\N	0	1	2013-11-19 18:08:07	2013-11-19 18:08:07	191	WordCount.hs
389	23	3dd80e6cc83cad2287f07dd5	superseded	haskell	word-count	module WordCount\n( wordCount\n) where\n\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List (foldl')\nimport Data.Map (Map)\nimport qualified Data.Map as M\n\nwordCount :: String -> Map String Int\nwordCount = foldl' (\\m k -> M.insertWith (+) k 1 m) M.empty . words\n          . map (\\c -> if isAlphaNum c then toLower c else ' ')	\N	\N	0	2	2014-05-15 01:57:28	2014-05-15 01:57:28	191	WordCount.hs
390	23	5e90b874e1e7c6d67ad16925	pending	haskell	word-count	module WordCount\n( wordCount\n) where\n\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as M\n\nwordCount :: String -> Map String Int\nwordCount = M.fromListWith (+) . map (flip (,) 1 . map toLower)\n          . wordsBy (not . isAlphaNum)	\N	\N	0	3	2014-06-29 21:25:05	2014-06-29 21:25:05	191	WordCount.hs
391	23	cea182310e98d116be9ef232	pending	ruby	leap	class Year\n    def self.leap?(year)\n        leap = false\n        if (((year % 4  == 0) && (year % 100 != 0)) ||\n                (year % 400 == 0))\n            leap = true\n        end\n        return leap\n    end\nend	\N	\N	0	1	2014-01-01 22:01:07	2014-01-01 22:01:07	192	year.rb
392	23	ee4ace14f41dbacb990f528b	superseded	ruby	hamming	class Hamming\n\n  def self.compute(first, second)\n    self.new(first, second).compute\n  end\n\n  def initialize(first, second)\n    @first = first\n    @second = second\n  end\n\n  def compute\n    (0...length_of_shortest_strand).reduce(0) {\n      |sum, index| sum + distance_value_at(index)\n    }\n  end\n\n  private\n\n  attr_reader :first, :second\n\n  def length_of_shortest_strand\n    [first.length, second.length].min\n  end\n\n  def distance_value_at(index)\n    first[index] != second[index] ? 1 : 0\n  end\n\nend	\N	\N	0	2	2013-11-24 15:53:16	2013-11-24 15:53:16	193	hamming.rb
393	23	d9fff1181831f96ea757358b	pending	ruby	hamming	class Hamming\n\n  def self.compute(first, second)\n    (0...common_length(first, second)).count do |index|\n      first[index] != second[index]\n    end\n  end\n\n  private\n\n  def self.common_length(first, second)\n    [first.length, second.length].min\n  end\n\nend	\N	\N	0	3	2013-11-24 18:30:16	2013-11-24 18:30:16	193	hamming.rb
395	23	134f221c3d90f1d705b1c472	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map toRNAChar\n        where toRNAChar 'T' = 'U'\n              toRNAChar z = z\n          	\N	\N	0	1	2013-11-27 03:54:38	2013-11-27 03:54:38	194	DNA.hs
400	41	cf2e617005b52dcad0ef196d	pending	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn- sort-word\n  [word]\n    (sort (lower-case word)))\n\n(defn- not-identical-word?\n  [word anagram]\n    (not= (lower-case word) (lower-case anagram)))\n\n(defn- anagram?\n  [alphagram candidate]\n    (= alphagram (sort-word candidate)))\n\n(defn anagrams-for\n  [word candidates]  \n    (let [alphagram (sort-word word)]    \n      (filter #(and (not-identical-word? word % ) (anagram? alphagram %)) candidates)))	\N	\N	0	5	2014-07-03 01:13:22	2014-07-03 01:13:22	195	anagram.clj
401	41	cf201134a7faa81011f9f780	pending	ruby	grains	class Grains\n  def square(number)\n    2**(number-1)\n  end\n\n  def total\n    chessboard_squares = 64\n     (2**chessboard_squares)-1\n  end\n\nend	\N	\N	0	1	2014-06-02 19:39:13	2014-06-02 19:39:13	196	grains.rb
402	26	40d7f10dde9c967c188820c2	pending	javascript	grade-school	var School = function () {\n  this.db = {};\n\n  this.roster = function () {\n    return this.db;\n  };\n\n  this.add = function (name, grade) {\n    if (!this.db[grade]) {\n      this.db[grade] = [];\n    }\n    this.db[grade].push(name);\n    this.db[grade].sort();\n  };\n\n  this.grade = function (grade) {\n    return this.db[grade] || [];\n  };\n};\n\nmodule.exports = School;	\N	\N	0	1	2014-07-18 08:48:18	2014-07-18 08:48:18	197	grade-school.js
403	26	ddb78830f10854c4d9263dee	superseded	javascript	bob	function Bob() {\n}\n\nfunction nothing(msg) {\n    return !msg || !msg.trim();\n}\n\nfunction yelling(msg) {\n    return msg\n        && msg.match(/[A-Z]/)\n        && msg.toUpperCase() == msg;\n}\n\nfunction question(msg) {\n    return msg && msg[msg.length-1] === '?';\n}\n\nBob.prototype.hey = function(msg) {\n    if(nothing(msg)) return "Fine. Be that way!";\n    if(yelling(msg)) return "Woah, chill out!";\n    if(question(msg)) return "Sure.";\n\n    return "Whatever.";\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-07-16 22:37:55	2014-07-16 22:37:55	198	bob.js
404	26	c7a4cc28539db840192dffc0	pending	javascript	bob	function nothing(msg) {\n    return !msg || !msg.trim();\n}\n\nfunction yelling(msg) {\n    return msg\n        && msg.match(/[A-Z]/)\n        && msg.toUpperCase() === msg;\n}\n\nfunction question(msg) {\n    return msg && msg.charAt(msg.length-1) === '?';\n}\n\nfunction Bob() {\n}\n\nBob.prototype.hey = function(msg) {\n    if(nothing(msg)) return "Fine. Be that way!";\n    if(yelling(msg)) return "Woah, chill out!";\n    if(question(msg)) return "Sure.";\n\n    return "Whatever.";\n};\n\nmodule.exports = Bob;	\N	\N	0	3	2014-07-18 16:46:26	2014-07-18 16:46:26	198	bob.js
405	26	048da820348ea2b92001fbf2	superseded	javascript	bob	function Bob() {\n}\n\nfunction nothing(msg) {\n    return !msg || !msg.trim();\n}\n\nfunction yelling(msg) {\n    return msg\n        && msg.match(/[A-Z]/)\n        && msg.toUpperCase() == msg;\n}\n\nfunction question(msg) {\n    return msg && msg.charAt(msg.length-1) === '?';\n}\n\nBob.prototype.hey = function(msg) {\n    if(nothing(msg)) return "Fine. Be that way!";\n    if(yelling(msg)) return "Woah, chill out!";\n    if(question(msg)) return "Sure.";\n\n    return "Whatever.";\n};\n\nmodule.exports = Bob;	\N	\N	0	2	2014-07-21 15:54:14	2014-07-21 15:54:14	198	bob.js
406	26	d8546f95cd9f847323c4118e	superseded	haskell	bob	\r\nmodule Bob (responseFor) where\r\n\r\nimport Data.Char (isAlpha, toUpper)\r\nimport Data.List (isSuffixOf)\r\nimport Control.Applicative (liftA2)\r\n\r\nisAllCaps :: String -> Bool\r\nisAllCaps = (==) <*> allCaps\r\n    where allCaps = map toUpper\r\n\r\nhasAtLeastOneLetter :: String -> Bool\r\nhasAtLeastOneLetter = any isAlpha\r\n\r\nisShouted :: String -> Bool\r\nisShouted = liftA2 (&&) hasAtLeastOneLetter isAllCaps\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion = isSuffixOf "?"\r\n\r\nisSilence :: String -> Bool\r\nisSilence = null . words\r\n\r\nresponseFor :: String -> String\r\nresponseFor phrase\r\n    | isSilence phrase  = "Fine. Be that way!"\r\n    | isShouted phrase  = "Woah, chill out!"\r\n    | isQuestion phrase = "Sure."\r\n    | otherwise         = "Whatever."\r	\N	\N	0	5	2014-07-17 21:18:11	2014-07-17 21:18:11	199	bob.hs
407	26	cf1e113d9136f86ec52a646d	superseded	haskell	bob	\r\nmodule Bob (responseFor) where\r\n\r\nimport Data.Char (isAlpha, toUpper)\r\nimport Data.List (isSuffixOf)\r\nimport Control.Applicative (liftA2)\r\n\r\nisAllCaps :: String -> Bool\r\nisAllCaps = liftA2 (==) allCaps id\r\n    where allCaps = map toUpper\r\n\r\nhasAtLeastOneLetter :: String -> Bool\r\nhasAtLeastOneLetter = any isAlpha\r\n\r\nisShouted :: String -> Bool\r\nisShouted = liftA2 (&&) hasAtLeastOneLetter isAllCaps\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion = isSuffixOf "?"\r\n\r\nisSilence :: String -> Bool\r\nisSilence = null . words\r\n\r\nresponseFor :: String -> String\r\nresponseFor phrase\r\n    | isSilence phrase  = "Fine. Be that way!"\r\n    | isShouted phrase  = "Woah, chill out!"\r\n    | isQuestion phrase = "Sure."\r\n    | otherwise         = "Whatever."\r	\N	\N	0	4	2014-07-19 08:43:32	2014-07-19 08:43:32	199	bob.hs
408	26	423352918cbbfc16617c21d3	superseded	haskell	bob	\r\n\r\nmodule Bob (responseFor) where\r\n\r\n    import Data.Char (isAlpha, toUpper)\r\n    import Data.List (isSuffixOf)\r\n\r\n    capitalize :: String -> String\r\n    capitalize = map toUpper\r\n\r\n    hasAtLeastOneLetter :: String -> Bool\r\n    hasAtLeastOneLetter = any isAlpha\r\n\r\n    isShouted :: String -> Bool\r\n    isShouted phrase =\r\n        (hasAtLeastOneLetter phrase) &&\r\n        (capitalize phrase == phrase)\r\n\r\n    isQuestion :: String -> Bool\r\n    isQuestion = isSuffixOf "?"\r\n\r\n    isSilence :: String -> Bool\r\n    isSilence = null . words\r\n\r\n    responseFor :: String -> String\r\n    responseFor phrase\r\n        | isSilence phrase  = "Fine. Be that way!"\r\n        | isShouted phrase  = "Woah, chill out!"\r\n        | isQuestion phrase = "Sure."\r\n        | otherwise         = "Whatever."\r	\N	\N	0	1	2014-07-19 18:10:10	2014-07-19 18:10:10	199	bob.hs
409	26	61bb3a2993a270218ca5110d	superseded	haskell	bob	\r\n\r\nmodule Bob (responseFor) where\r\n\r\nimport Data.Char (isAlpha, toUpper)\r\nimport Data.List (isSuffixOf)\r\n\r\ncapitalize :: String -> String\r\ncapitalize = map toUpper\r\n\r\nhasAtLeastOneLetter :: String -> Bool\r\nhasAtLeastOneLetter = any isAlpha\r\n\r\nisShouted :: String -> Bool\r\nisShouted phrase =\r\n    (hasAtLeastOneLetter phrase) &&\r\n    (capitalize phrase == phrase)\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion = isSuffixOf "?"\r\n\r\nisSilence :: String -> Bool\r\nisSilence = null . words\r\n\r\nresponseFor :: String -> String\r\nresponseFor phrase\r\n    | isSilence phrase  = "Fine. Be that way!"\r\n    | isShouted phrase  = "Woah, chill out!"\r\n    | isQuestion phrase = "Sure."\r\n    | otherwise         = "Whatever."\r	\N	\N	0	2	2014-07-20 22:05:11	2014-07-20 22:05:11	199	bob.hs
410	26	49ba5db6a2d78dc4f24cc126	superseded	haskell	bob	\r\nmodule Bob (responseFor) where\r\n\r\nimport Data.Char (isAlpha, toUpper)\r\nimport Data.List (isSuffixOf)\r\n\r\nisAllCaps :: String -> Bool\r\nisAllCaps string = map toUpper string == string\r\n\r\nhasAtLeastOneLetter :: String -> Bool\r\nhasAtLeastOneLetter = any isAlpha\r\n\r\nisShouted :: String -> Bool\r\nisShouted phrase =\r\n    hasAtLeastOneLetter phrase &&\r\n    isAllCaps phrase\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion = isSuffixOf "?"\r\n\r\nisSilence :: String -> Bool\r\nisSilence = null . words\r\n\r\nresponseFor :: String -> String\r\nresponseFor phrase\r\n    | isSilence phrase  = "Fine. Be that way!"\r\n    | isShouted phrase  = "Woah, chill out!"\r\n    | isQuestion phrase = "Sure."\r\n    | otherwise         = "Whatever."\r	\N	\N	0	3	2014-07-22 08:44:16	2014-07-22 08:44:16	199	bob.hs
411	26	025d1fee425a8ff263dad1c1	pending	haskell	bob	\r\nmodule Bob (responseFor) where\r\n\r\nimport Data.Char (isAlpha, toUpper)\r\nimport Data.List (isSuffixOf)\r\nimport Control.Applicative (liftA2, (<*>))\r\n\r\nisAllCaps :: String -> Bool\r\nisAllCaps = (==) <*> allCaps\r\n    where allCaps = map toUpper\r\n\r\nhasAtLeastOneLetter :: String -> Bool\r\nhasAtLeastOneLetter = any isAlpha\r\n\r\nisShouted :: String -> Bool\r\nisShouted = liftA2 (&&) hasAtLeastOneLetter isAllCaps\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion = isSuffixOf "?"\r\n\r\nisSilence :: String -> Bool\r\nisSilence = null . words\r\n\r\nresponseFor :: String -> String\r\nresponseFor phrase\r\n    | isSilence phrase  = "Fine. Be that way!"\r\n    | isShouted phrase  = "Woah, chill out!"\r\n    | isQuestion phrase = "Sure."\r\n    | otherwise         = "Whatever."\r	\N	\N	0	6	2014-07-22 16:15:47	2014-07-22 16:15:47	199	bob.hs
412	26	d829950cefb16379e2c433b0	pending	ruby	leap	class Year\n  class << self\n    def leap? year\n      centennial, quadricentennial = year % 100 == 0, year % 400 == 0\n      exception_to_leap_year = centennial && !quadricentennial\n\n      year % 4 == 0 && !exception_to_leap_year\n    end\n  end\nend	\N	\N	0	1	2014-07-18 09:55:07	2014-07-18 09:55:07	200	year.rb
413	26	92492c597a53f219892444dd	superseded	haskell	simple-cipher	module Cipher\n  ( caesarEncode\n  , caesarDecode\n  , caesarEncodeRandom\n  ) where\n\n\nimport Data.Char\nimport System.Random\n\n\ncaesarTransformWith :: (Int -> Int -> Int) -> String -> String -> String\ncaesarTransformWith op shifts text = zipWith shiftLetter text (cycle intShifts)\n  where\n    intShifts = map (subtract orda . ord) shifts\n    shiftLetter plainLetter shift = chr $ orda + ((ord plainLetter - orda) `op` shift) `mod` (ordz - orda + 1)\n    orda = ord 'a'\n    ordz = ord 'z'\n\n\ncaesarEncode :: String -> String -> String\ncaesarEncode = caesarTransformWith (+)\n\n\ncaesarDecode :: String -> String -> String\ncaesarDecode = caesarTransformWith (-)\n\n\ncaesarEncodeRandom :: String -> IO (String, String)\ncaesarEncodeRandom plaintext = do\n  g <- newStdGen\n  let key = take (length plaintext) $ randomRs ('a', 'z') g\n  return (key, caesarEncode key plaintext)	\N	\N	0	1	2014-07-16 16:09:32	2014-07-16 16:09:32	201	Cipher.hs
414	26	cfe459f126121ffed176bf1e	pending	haskell	simple-cipher	module Cipher\n  ( caesarEncode\n  , caesarDecode\n  , caesarEncodeRandom\n  ) where\n\n\nimport System.Random\n\n\ncaesarTransformWith :: (Int -> Int -> Int) -> String -> String -> String\ncaesarTransformWith op shifts text = zipWith shiftLetter text (cycle intShifts)\n  where\n    intShifts = map (subtract fromEnumA . fromEnum) shifts\n    shiftLetter plainLetter shift = toEnum $ fromEnumA + ((fromEnum plainLetter - fromEnumA) `op` shift) `mod` (fromEnumZ - fromEnumA + 1)\n    fromEnumA = fromEnum 'a'\n    fromEnumZ = fromEnum 'z'\n\n\ncaesarEncode :: String -> String -> String\ncaesarEncode = caesarTransformWith (+)\n\n\ncaesarDecode :: String -> String -> String\ncaesarDecode = caesarTransformWith (-)\n\n\ncaesarEncodeRandom :: String -> IO (String, String)\ncaesarEncodeRandom plaintext = do\n  g <- newStdGen\n  let key = take (length plaintext) $ randomRs ('a', 'z') g\n  return (key, caesarEncode key plaintext)	\N	\N	0	2	2014-07-19 04:11:22	2014-07-19 04:11:22	201	Cipher.hs
415	26	a292f5b8732c8ec937345173	superseded	ruby	queen-attack	class Queens\n  def initialize(white: [0, 3], black: [7, 3])\n    raise ArgumentError if white == black\n    @white, @black = white, black\n  end\n\n  def white\n    @white\n  end\n\n  def black\n    @black\n  end\n\n  def attack?\n    same_row? || same_column? || diagonal?\n  end\n\n  def to_s\n    (0..7).map do |row|\n      (0..7).map do |column|\n        cell row, column\n      end.join " " \n    end.join "\\n"\n  end\n\nprivate\n  def same_row?\n    @white[0] == @black[0]\n  end\n\n  def same_column?\n    @white[1] == @black[1]\n  end\n\n  def diagonal?\n    (@white[0] - @black[0]).abs == (@white[1] - @black[1]).abs\n  end\n\n  def cell(*position)\n    white_queen_cell(position) || black_queen_cell(position) || "O"\n  end\n\n  def white_queen_cell(position)\n    "W" if @white == position\n  end\n\n  def black_queen_cell(position)\n    "B" if @black == position\n  end\nend	\N	\N	0	1	2014-07-16 08:52:26	2014-07-16 08:52:26	202	queens.rb
416	26	dd174a899acf54837bd94673	superseded	ruby	queen-attack	class Queens\n  attr_reader :white, :black\n\n  def initialize(white: [0, 3], black: [7, 3])\n    raise ArgumentError if white == black\n    @white, @black = [white,black].map { |o| o.extend(Positioned) }\n  end\n\n  def attack?\n    same_row? || same_column? || diagonal?\n  end\n\n  def to_s\n    rows.join "\\n"\n  end\n\nprivate\n  module Positioned\n    def row\n      self[0]\n    end\n\n    def column\n      self[1]\n    end\n  end\n\n  def same_row?\n    white.row == black.row\n  end\n\n  def same_column?\n    white.column == black.column\n  end\n\n  def diagonal?\n    (white.row - black.row).abs == (white.column - black.column).abs\n  end\n\n  def rows\n    (0..7).map { |row| cells_in(row).join " " }\n  end\n\n  def cells_in(row)\n    (0..7).map { |column| cell row, column }\n  end\n\n  def cell(*position)\n    case position\n    when white then "W"\n    when black then "B"\n    else "O"\n    end\n  end\nend	\N	\N	0	2	2014-07-18 09:46:27	2014-07-18 09:46:27	202	queens.rb
417	26	c777d21a83d0110e0baacec9	pending	ruby	queen-attack	class Queens\n  attr_reader :white, :black\n\n  def initialize(white: [0, 3], black: [7, 3])\n    raise ArgumentError if white == black\n    @white, @black = [white,black].map { |o| o.extend Positioned }\n  end\n\n  def attack?\n    same_row? || same_column? || same_diagonal?\n  end\n\n  def to_s\n    rows.join "\\n"\n  end\n\nprivate\n  module Positioned\n    def row\n      self[0]\n    end\n\n    def column\n      self[1]\n    end\n  end\n\n  def same_row?\n    white.row == black.row\n  end\n\n  def same_column?\n    white.column == black.column\n  end\n\n  def same_diagonal?\n    (white.row - black.row).abs == (white.column - black.column).abs\n  end\n\n  def rows\n    (0..7).map { |row| cells_in(row).join " " }\n  end\n\n  def cells_in(row)\n    (0..7).map { |column| cell row, column }\n  end\n\n  def cell(*position)\n    case position\n    when white then "W"\n    when black then "B"\n    else "O"\n    end\n  end\nend	\N	\N	0	3	2014-07-21 01:39:08	2014-07-21 01:39:08	202	queens.rb
418	26	bea37f3c07f4da6f39ccb830	pending	ruby	roman-numerals	module Roman\n\n  NUMBER_CORRESPONDANCE = {\n    1000 => 'M',\n    900  => 'CM',\n    500  => 'D',\n    400  => 'CD',\n    100  => 'C',\n    90   => 'XC',\n    50   => 'L',\n    40   => 'XL',\n    10   => 'X',\n    9    => 'IX',\n    5    => 'V',\n    4    => 'IV',\n    1    => 'I',\n    0    => ''\n  }\n\n  def to_roman\n    if NUMBER_CORRESPONDANCE.has_key? self\n      NUMBER_CORRESPONDANCE[ self ]\n    else\n       NUMBER_CORRESPONDANCE[ best_roman ] + ( self - best_roman ).to_roman\n    end\n  end\n\nprivate\n\n  def best_roman\n    NUMBER_CORRESPONDANCE.keys.find do |value|\n      value < self\n    end\n  end\n\nend\n\nFixnum.send( :include, Roman )	\N	\N	0	1	2014-07-20 09:26:09	2014-07-20 09:26:09	203	roman.rb
419	26	ac333430a84500d7b837e9f1	pending	javascript	difference-of-squares	function Squares (limit) {\n  var sumOfSquares = 0;\n  var squareOfSums = 0;\n  var difference = 0;\n  for (var i = 1; i <= limit; i++) {\n    sumOfSquares += i*i;\n    squareOfSums += i;\n  }\n  squareOfSums *= squareOfSums;\n  difference = squareOfSums - sumOfSquares;\n\n  this.sumOfSquares = sumOfSquares;\n  this.squareOfSums = squareOfSums;\n  this.difference = difference;\n}	\N	\N	0	1	2014-07-24 19:56:52	2014-07-24 19:56:52	204	difference-of-squares_test.js
420	26	5fa37dcfd391faeb6818ba4c	superseded	ruby	anagram	 require 'prime'\n\nclass Anagram\n\tdef initialize(word)\n    @word = word.downcase\n    @prime_map ||= alphaprime_map \n    @word_sum = prime_checksum(@word)\n  end\n\n  def match(possible_matches)\n    matches = []\n    possible_matches.each do |match|\n      w = match.downcase\n      if @word_sum == prime_checksum(w) && (@word.scan /[#{match}]/i).count == match.size\n        matches << match unless w == @word\n      end\n    end\n    matches\n  end\n\n  def alphaprime_map\n    letters = ('a'..'z').to_a\n    primes = Prime.first 26\n    map = {}\n    (0..25).each do |i|\n      map[letters[i]] = primes[i]\n    end\n    map\n  end\n\n  def prime_checksum(word)\n    word.chars.inject(0) { |sum,c| sum += @prime_map[c]}\n  end\n\nend	\N	\N	0	1	2014-07-20 11:58:00	2014-07-20 11:58:00	205	anagram.rb
421	26	e407933bcf4b97f09a24895e	pending	ruby	anagram	 require 'prime'\n\nclass Anagram\n\tdef initialize(word)\n    @word = word.downcase\n    @prime_map ||= alphaprime_map \n    @word_sum = prime_checksum(@word)\n  end\n\n  def match(possible_matches)\n    matches = []\n    possible_matches.each do |match|\n      w = match.downcase\n      if passes_checksum(w) && has_all_the_same_letters(match)\n        matches << match unless w == @word\n      end\n    end\n    matches\n  end\n\n  private\n\n  def has_all_the_same_letters(match)\n    (@word.scan /[#{match}]/i).count == match.size\n  end\n\n  def passes_checksum(word)\n    @word_sum == prime_checksum(word)\n  end\n\n  def prime_checksum(word)\n    word.chars.inject(0) { |sum,c| sum += @prime_map[c]}\n  end\n\n  def alphaprime_map\n    letters = ('a'..'z').to_a\n    primes = Prime.first 26\n    map = {}\n    (0..25).each do |i|\n      map[letters[i]] = primes[i]\n    end\n    map\n  end\n\nend	\N	\N	0	2	2014-07-20 21:05:08	2014-07-20 21:05:08	205	anagram.rb
422	26	812ee001de6bc46317677682	pending	javascript	word-count	var words = function(phrase) {\n\n  var phraseArray = phrase.toLowerCase().replace(/[:!,&@$%^¿?¡]/g, " ").replace(/\\n/g, " ").split(" ");\n  var results = {};\n\n  phraseArray.forEach(function(el) {\n    if(el === 'constructor') {\n      if(results[el] >= 1) {\n        results[el] += 1;\n      } else {\n        results[el] = 1;\n      }\n    } else if (el === "") {\n      delete results[el];\n    } else if (typeof results[el] === 'undefined') {\n      results[el] = 1;\n    } else {\n      results[el] += 1;\n    }\n  });\n\n  return results;\n};	\N	\N	0	1	2014-07-19 20:28:37	2014-07-19 20:28:37	206	word-count.js
423	26	76c11c508068812f0c713d3c	superseded	ruby	bob	class Bob\n\n  def hey(s)\n    if is_a_yell? s\n      answer="Woah, chill out!"\n    elsif is_a_question? s\n      answer="Sure."\n    elsif is_a_silence? s\n      answer="Fine. Be that way!"\n    else\n      answer="Whatever."\n    end\n\n    return answer\n  end\nend\n\ndef is_a_question? s\n  return ((not s.empty?) and (s[-1] == "?"))\nend\n\ndef is_a_yell? s\n  return (s =~ /[[:alpha:]]/ and s == s.upcase)\nend\n\ndef is_a_silence? s\n  return s.strip == ""\nend	\N	\N	0	1	2014-07-19 19:53:10	2014-07-19 19:53:10	207	bob.rb
424	26	e79e662948ffd193e6c261ba	superseded	ruby	bob	class Bob\n\n  ANSWERS = {\n    question: "Sure.",\n    yell: "Woah, chill out!",\n    silence: "Fine. Be that way!",\n  }\n\n  DEFAULT_ANSWER = "Whatever."\n\n  def hey s\n    type = Message.new(s).type\n    ANSWERS.fetch(type, DEFAULT_ANSWER)\n  end\nend\n\nclass Message\n  def initialize s\n    @string = s.to_s\n  end\n\n  def yell?\n    @string =~ /[[:alpha:]]/ and @string == @string.upcase\n  end\n  \n  def question?\n    @string.end_with?("?") and not yell?\n  end\n\n  def silence?\n    @string.strip.empty?\n  end\n\n  def type\n    case\n    when question?\n      :question\n    when yell?\n      :yell\n    when silence?\n      :silence\n    else\n      :other\n    end\n  end\nend	\N	\N	0	3	2014-07-20 16:13:56	2014-07-20 16:13:56	207	bob.rb
425	26	694b2e73f475879e8d266c7f	pending	ruby	bob	class Bob\n\n  ANSWERS = {\n    question: "Sure.",\n    yell: "Woah, chill out!",\n    silence: "Fine. Be that way!",\n  }\n\n  DEFAULT_ANSWER = "Whatever."\n\n  def hey s\n    message = Message.new s\n    ANSWERS.fetch(message.type, DEFAULT_ANSWER)\n  end\nend\n\nclass Message\n  def initialize s\n    @string = s.to_s\n  end\n\n  def yell?\n    @string =~ /[[:alpha:]]/ and @string == @string.upcase\n  end\n  \n  def question?\n    @string.end_with?("?") and not yell?\n  end\n\n  def silence?\n    @string.strip.empty?\n  end\n\n  def type\n    case\n    when question?\n      :question\n    when yell?\n      :yell\n    when silence?\n      :silence\n    else\n      :other\n    end\n  end\nend	\N	\N	0	4	2014-07-21 23:22:05	2014-07-21 23:22:05	207	bob.rb
426	26	01634e944f3572b8e7c02ff4	superseded	ruby	bob	class Bob\n\n  @@answers = {\n    question: "Sure.",\n    yell: "Woah, chill out!",\n    silence: "Fine. Be that way!",\n    other: "Whatever."\n  }\n\n  def hey s\n    return @@answers[Message.new(s).type]\n  end\nend\n\nclass Message\n  def initialize s\n    @string = s.to_s\n  end\n\n  def is_a_yell?\n    @string =~ /[[:alpha:]]/ and @string == @string.upcase\n  end\n  \n  def is_a_question?\n    @string.end_with?("?") and not is_a_yell?\n  end\n\n  def is_a_silence?\n    @string.strip.empty?\n  end\n\n  def type\n    case\n    when is_a_question?\n      return :question\n    when is_a_yell?\n      return :yell\n    when is_a_silence?\n      return :silence\n    else\n      return :other\n    end\n  end\nend	\N	\N	0	2	2014-07-22 05:17:29	2014-07-22 05:17:29	207	bob.rb
427	26	f30b937a1cb6b5913c770238	pending	clojure	phone-number	(ns phone)\n\n(declare numbers-only ensure-valid-number)\n\n(defn number [raw]\n  (-> raw numbers-only ensure-valid-number))\n\n(defn area-code [number]\n  (subs number 0 3))\n\n(defn exchange [number]\n  (subs number 3 6))\n\n(defn subscriber [number]\n  (subs number 6))\n\n(defn pretty-print [input]\n  (let [processed (number input)\n        area-code (area-code processed)\n        exchange (exchange processed)\n        subscriber (subscriber processed)\n        ]\n    (str "(" area-code ")" " " exchange "-" subscriber)))\n\n(defn- numbers-only [string]\n  (apply str (re-seq #"\\d" string)))\n\n(defn- ensure-valid-number [number]\n  (let [length (count number)]\n    (cond (and (= length 11) (= (subs number 0 1) "1")) (subs number 1)\n          (= length 10) number\n          :else "0000000000")))	\N	\N	0	3	2014-07-19 02:15:27	2014-07-19 02:15:27	208	phone-number.clj
428	26	58e4c27846641ee6aa28f82e	superseded	clojure	phone-number	(ns phone)\n\n(declare numbers-only trim-leading-1 validate-length)\n\n(defn number [raw]\n  (-> raw numbers-only trim-leading-1 validate-length))\n\n(defn area-code [number]\n  (subs number 0 3))\n\n(defn exchange [number]\n  (subs number 3 6))\n\n(defn subscriber [number]\n  (subs number 6))\n\n(defn pretty-print [input]\n  (let [processed (number input)\n        area-code (area-code processed)\n        exchange (exchange processed)\n        subscriber (subscriber processed)\n        ]\n    (str "(" area-code ")" " " exchange "-" subscriber)))\n\n(defn- numbers-only [string]\n  (apply str (re-seq #"\\d" string)))\n\n(defn- trim-leading-1 [number]\n  (if (and (= (count number) 11)\n           (= (subs number 0 1) "1"))\n    (subs number 1)\n    number))\n\n(defn- validate-length [number]\n  (if (= (count number) 10) \n    number\n    "0000000000"))	\N	\N	0	2	2014-07-20 09:56:12	2014-07-20 09:56:12	208	phone-number.clj
429	26	a6932f209af6b95a0fce3b88	superseded	clojure	phone-number	(ns phone)\n\n(defn- numbers-only [string]\n  (clojure.string/join "" (re-seq #"\\d" string)))\n\n(defn- trim-leading-1 [number]\n  (if (and (= (count number) 11)\n           (= (subs number 0 1) "1"))\n    (subs number 1)\n    number))\n\n(defn- validate-length [number]\n  (if (= (count number) 10) \n    number\n    "0000000000"))\n\n(defn number [raw]\n  (-> raw numbers-only trim-leading-1 validate-length))\n\n(defn area-code [number]\n  (subs number 0 3))\n\n(defn exchange [number]\n  (subs number 3 6))\n\n(defn subscriber [number]\n  (subs number 6))\n\n(defn pretty-print [input]\n  (let [processed (number input)]\n    (str "(" (area-code processed) ")" \n         " " (exchange processed) "-" (subscriber processed))))	\N	\N	0	1	2014-07-24 01:31:14	2014-07-24 01:31:14	208	phone-number.clj
430	26	80bcd347d8b393f9df3182af	pending	javascript	etl	var transform = function(old) {\n  var expected = {};\n  var points = Object.keys(old);\n  //loop through each point in old system\n  for (var x = 0; x < points.length; x++) {\n    //loop through each letter assignment within each point in old system\n    for (var i = 0; i < old[points[x]].length; i++) {\n      //assign letter to point value in system object\n      expected[String(old[points[x]][i]).toLowerCase()] = parseInt(points[x]);\n    }\n  }\n  return expected;\n};	\N	\N	0	1	2014-07-16 09:00:36	2014-07-16 09:00:36	209	etl_test.js
431	26	4513e76ebe7b7ef5e28ff636	pending	scala	word-count	class Phrase(val text: String) {\n  def wordCount(): Map[String,Int] =\n    text.toLowerCase.split("[^a-z0-9']+").groupBy(identity).mapValues(_.length)\n}	\N	\N	0	1	2014-07-17 04:12:43	2014-07-17 04:12:43	210	wordcount.scala
432	26	08a8fef284691303eadb749f	pending	python	word-count	import collections\nimport re\n\nclass Phrase(object):\n    def __init__(self, sentence):\n        self._sentence = sentence\n\n    def word_count(self):\n        """Return number of occurences of each word in the sentence"""\n        return collections.Counter(self._words())\n\n    def _words(self):\n        """Return array of words in the sentence"""\n        word = r'\\w+'\n        sentence = self._sentence.lower()\n        return re.findall(word, sentence)	\N	\N	0	3	2014-07-17 04:25:15	2014-07-17 04:25:15	211	word-count.py
433	26	c4a8811211b981e7bcc2413d	superseded	python	word-count	import re\n\nclass Phrase(object):\n    def __init__(self, sentence):\n        self._sentence = sentence\n\n    def word_count(self):\n        """Return number of occurences of each word in the sentence"""\n        count = {}\n        for word in self._words():\n            if word in count:\n                count[word] += 1\n            else:\n                count[word] = 1\n\n        return count\n\n    def _words(self):\n        """Return array of words in the sentence"""\n        word = r'\\w+'\n        sentence = self._sentence.lower()\n        return re.findall(word, sentence)	\N	\N	0	1	2014-07-20 18:59:08	2014-07-20 18:59:08	211	word-count.py
434	26	0182cff795c130e815eece45	superseded	python	word-count	import collections\nimport re\n\nclass Phrase(object):\n    def __init__(self, sentence):\n        self._sentence = sentence\n\n    def word_count(self):\n        """Return number of occurences of each word in the sentence"""\n        return collections.Counter(self._words())\n\n    def _words(self):\n        """Return array of words in the sentence"""\n        word = r'\\w+'\n        sentence = self._sentence.lower()\n        self.__words = re.findall(word, sentence)\n        return self.__words	\N	\N	0	2	2014-07-24 09:54:28	2014-07-24 09:54:28	211	word-count.py
435	26	f6a8c5e51d79c9debd808cbb	superseded	haskell	bank-account	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule BankAccount( BankAccount, openAccount, closeAccount,\n                    getBalance, incrementBalance ) where\n\nimport Control.Concurrent.MVar\n\nnewtype BankAccount = Account (MVar (Maybe Integer))\n\nopenAccount :: IO BankAccount\nopenAccount = do \n  b <- newMVar (Just 0)\n  return (Account b)\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount (Account a) = do\n  _ <- takeMVar a    -- Acquire lock\n  putMVar a Nothing -- Release lock\n\ngetBalance :: BankAccount -> IO (Maybe Integer)\ngetBalance (Account a) = readMVar a -- Blocks if lock held\n\nincrementBalance :: BankAccount -> Integer -> IO (Maybe Integer)\nincrementBalance (Account a) d = do\n  b <- takeMVar a -- Acquire lock\n  let u = mkNewBalance b d\n  putMVar a u -- release lock\n  return u\n\nmkNewBalance :: Maybe Integer -> Integer -> Maybe Integer\nmkNewBalance Nothing _ = Nothing\nmkNewBalance (Just b) d | b + d >= 0 = Just (b + d)\n                        | otherwise = Just b	\N	\N	0	1	2014-07-17 00:18:44	2014-07-17 00:18:44	212	BankAccount.hs
436	26	954b5898e93a571834c20310	superseded	haskell	bank-account	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule BankAccount( BankAccount, openAccount, closeAccount,\n                    getBalance, incrementBalance ) where\n\nimport Control.Concurrent.MVar\nimport Control.Arrow( (&&&) )\n\nnewtype BankAccount = Account (MVar (Maybe Integer))\n\nopenAccount :: IO BankAccount\nopenAccount = newMVar (Just 0) >>= return . Account\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount (Account a) = swapMVar a Nothing >> return ()\n\ngetBalance :: BankAccount -> IO (Maybe Integer)\ngetBalance (Account a) = readMVar a -- Blocks if lock held\n\nincrementBalance :: BankAccount -> Integer -> IO (Maybe Integer)\nincrementBalance (Account a) d = \n  modifyMVar a $ \\b -> do \n    return . (id &&& id) $ fmap (+d) b	\N	\N	0	2	2014-07-20 13:42:24	2014-07-20 13:42:24	212	BankAccount.hs
437	26	05f5b05cdf739b2f83ac8e0f	pending	haskell	bank-account	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule BankAccount( BankAccount, openAccount, closeAccount,\n                    getBalance, incrementBalance ) where\nimport Control.Concurrent.MVar\nimport Control.Monad( void, join )\nimport Control.Applicative( (<$>) )\n\nnewtype BankAccount = Account (MVar (Maybe Integer))\n\nopenAccount :: IO BankAccount\nopenAccount = Account <$> newMVar (Just 0)\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount (Account a) = void $ swapMVar a Nothing\n\ngetBalance :: BankAccount -> IO (Maybe Integer)\ngetBalance (Account a) = readMVar a -- Blocks if lock held\n\nincrementBalance :: BankAccount -> Integer -> IO (Maybe Integer)\nincrementBalance (Account a) d = modifyMVar a update\n  where\n    update = return . join (,) . fmap (d +)	\N	\N	0	3	2014-07-22 00:43:35	2014-07-22 00:43:35	212	BankAccount.hs
438	26	713fd88cdad331459d6692d4	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand_one, strand_two)\n    strand_one = strand_one.split('')\n    strand_two = strand_two.split('')\n\n    strand_one.zip(strand_two).count do |string_a, string_b|\n      self.substitution?(string_a, string_b)\n    end\n  end\n\n  def self.substitution?(string_a, string_b)\n    unless string_a == nil || string_b == nil\n      string_a != string_b\n    end\n  end\n\nend	\N	\N	0	1	2014-07-18 16:47:21	2014-07-18 16:47:21	213	hamming.rb
439	26	2d90db9b9af45117d703b9a0	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand1, strand2)\n    strand1 = strand1.split('')\n    strand2 = strand2.split('')\n\n    strand1.zip(strand2).count do |string1, string2|\n      self.substitution?(string1, string2)\n    end\n  end\n\n  def self.substitution?(string1, string2)\n    if string1 && string2\n      string1 != string2\n    end\n  end\n\nend	\N	\N	0	2	2014-07-20 12:18:50	2014-07-20 12:18:50	213	hamming.rb
440	26	160ba2fd8fca871837c3a9f0	pending	ruby	hamming	class Hamming\n\n  def self.compute(strand1, strand2)\n    strand1.chars.zip(strand2.chars).count do |s1, s2|\n      self.substitution?(s1, s2)\n    end\n  end\n\n  def self.substitution?(s1, s2)\n    s1 && s2 && s1 != s2\n  end\n\nend	\N	\N	0	3	2014-07-26 05:36:58	2014-07-26 05:36:58	213	hamming.rb
441	44	ae87adac4d9287a4ca0ac62c	superseded	ruby	beer-song	class Beer\n\tdef setup\n\t\t@beer = beer\n\tend\n\n    def sing(start, finish)\n        verses = []\n        start.downto(finish) do |number|\n            verses << verse(number) + "\\n"\n        end\n        verses.join\n    end\n\n\tdef verse(number)\n        answer_bottles = "#{number - 1} bottles"\n        number_bottles = "#{number} bottles"\n        it = "one"\n      \n        if number == 2\n            answer_bottles = "1 bottle"\n             return "#{number_bottles} of beer on the wall, #{number_bottles} of beer.\\nTake #{it} down and pass it around, #{answer_bottles} of beer on the wall.\\n"\n        end \n\n        if number == 8\n            number_bottles = "8 bottles"\n             return "#{number_bottles} of beer on the wall, #{number_bottles} of beer.\\nTake #{it} down and pass it around, #{answer_bottles} of beer on the wall.\\n"\n        end\n\n        if number == 1\n            answer_bottles = "no more bottles"\n            number_bottles = "1 bottle"\n            it = "it"\n             return "#{number_bottles} of beer on the wall, #{number_bottles} of beer.\\nTake #{it} down and pass it around, #{answer_bottles} of beer on the wall.\\n"\n        end \n\n        if number == 0\n            number_bottles = "No more bottles"\n\n            return "#{number_bottles} of beer on the wall, #{number_bottles.downcase} of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n        end\n    end     \nend	\N	\N	0	1	2014-06-22 16:13:45	2014-06-22 16:13:45	214	beer-song.rb
442	44	842a3f8010fb9b66867b4d8b	superseded	ruby	beer-song	class Beer\n  def sing(start, finish = 0)\n    start.downto(finish).collect {|number|\n    verse(number) + "\\n"}.join\n  end\n\n  def verse (number)\n   if number == 1\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n   elsif number == 2\n    "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number - 1} bottle of beer on the wall.\\n"   \n   elsif number == 0\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n   else\n    "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number - 1} bottles of beer on the wall.\\n"\n   end\n  end\nend	\N	\N	0	2	2014-07-02 21:38:40	2014-07-02 21:38:40	214	beer-song.rb
443	44	b25c4a64a87d9fdc1cf82d90	pending	ruby	beer-song	class Beer\n  def sing(start, finish = 0)\n    start.downto(finish).collect {|number| verse(number) + "\\n"}.join\n  end\n\n  def verse(number)\n   if number == 1\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n   elsif number == 2\n    "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number - 1} bottle of beer on the wall.\\n"   \n   elsif number == 0\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n   else\n    "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number - 1} bottles of beer on the wall.\\n"\n   end\n  end\nend	\N	\N	0	3	2014-07-17 09:23:56	2014-07-17 09:23:56	214	beer-song.rb
444	44	2979d9f722d71b997818cb7a	pending	javascript	bob	function Bob() {\r\n}\r\n\r\nBob.prototype.hey = function(input) {\r\n  const SILENCE_REPLY = 'Fine. Be that way!'\r\n  const YELLING_REPLY = 'Woah, chill out!'\r\n  const QUESTION_REPLY = 'Sure.'\r\n  const DEFAULT_REPLY = 'Whatever.'\r\n\r\n  var feeling = new Feeling(input)\r\n  \r\n  if (feeling.ignored()) return SILENCE_REPLY\r\n  if (feeling.yelledAt()) return YELLING_REPLY\r\n  if (feeling.questioned()) return QUESTION_REPLY\r\n  return DEFAULT_REPLY\r\n}\r\n\r\n// The idea for Feeling was taken from thomasmarshall\r\n// http://exercism.io/submissions/07110c5e3ec9899965969d95\r\nfunction Feeling(input) {\r\n  var _input = input.trim()\r\n  \r\n  this.ignored = function() {\r\n    return _input.length === 0\r\n  }\r\n  \r\n  this.yelledAt = function() {\r\n    var isUppercase = _input.toUpperCase() === _input\r\n    var hasLetters = _input.toLowerCase() !== _input\r\n    \r\n    return isUppercase && hasLetters\r\n  }\r\n  \r\n  this.questioned = function() {\r\n    var lastIdx = _input.length - 1\r\n    return _input[lastIdx] === '?'\r\n  }\r\n}\r\n\r\nmodule.exports = Bob\r	\N	\N	0	1	2014-06-28 04:16:44	2014-06-28 04:16:44	215	bob.js
445	44	52bb11edcfa1f72ab0df2088	superseded	ruby	hamming	class Hamming\r\n\tdef self.compute(strand1, strand2)\r\n\t\tnew.compute strand1, strand2\r\n\tend\r\n\r\n\tdef compute(strand1, strand2)\r\n\t\tif strands_are_equivalent? strand1, strand2\r\n\t\t\t0\t\r\n\t\telse\r\n\t\t\tcompute_hamming_difference strand1, strand2\r\n\t\tend\r\n\tend\r\n\r\n\tprivate\r\n\tdef compute_hamming_difference(strand1, strand2)\r\n\t\tdiffCount = 0\r\n\t\tsArray1, sArray2 = to_char_array(strand1), to_char_array(strand2)\r\n\r\n\t\tsArray1.each_index do |i|\r\n\t\t\tdiffCount+=1 if !sArray2[i].nil? &&\r\n\t\t\t sArray1[i] != sArray2[i]\r\n\t\tend\r\n\r\n\t\tdiffCount\r\n\tend\r\n\r\n\tdef strands_are_equivalent?(strand1, strand2)\r\n\t\tstrand1 == strand2\r\n\tend\r\n\r\n\tdef to_char_array(strand)\r\n\t\tstrand.split(//)\t\r\n\tend\r\nend	\N	\N	0	1	2014-07-13 08:56:37	2014-07-13 08:56:37	216	hamming.rb
446	44	3a25f748b5286c2d0e8b5921	pending	ruby	hamming	class Hamming\r\n\tdef self.compute(strand1, strand2)\r\n\t\tmutations = 0\r\n    \tstrand1.chars.take(strand2.length).each_with_index do |genome1, index|\r\n    \t\tgenome2 = strand2[index]\r\n      \t\tmutations += 1 unless genome1 == genome2\r\n    \tend\r\n    \tmutations\r\n\tend\r\nend	\N	\N	0	4	2014-07-17 08:12:24	2014-07-17 08:12:24	216	hamming.rb
447	44	0a149dc9584eee17a60c0eea	superseded	ruby	hamming	class Hamming\r\n\tdef self.compute(strand1, strand2)\r\n\t\tmutations = 0\r\n    \tstrand1.chars.take(strand2.length).each_with_index do |genome1, index|\r\n    \t\tgenome2 = strand2[index]\r\n      \t\tmutations += 1 unless genome1 == genome2\r\n    \tend\r\n    \tmutations\r\n\tend\r\nend	\N	\N	0	2	2014-07-19 11:21:44	2014-07-19 11:21:44	216	hamming.rb
448	44	d83b35bce88edd1d38202153	superseded	ruby	hamming	class TestCount\r\n\tdef initialize\r\n\t\t4.times do \t\r\n\t\t\t@items << Item.new(:prop => true)\t\t\t\r\n\t\tend\r\n\t\t3.times do \t\r\n\t\t\t@items << Item.new(:prop => false)\t\t\t\r\n\t\tend\r\n\tend\r\n\tdef display\r\n\t\tp "#{@items.count(&:prop)}"\r\n\tend\r\nend\r\n\r\nclass Item\r\n\tattr_accessible :prop\r\nend\r\n\r\nTestCount.new.display	\N	\N	0	3	2014-07-21 12:23:09	2014-07-21 12:23:09	216	hamming.rb
449	44	fcbbf0b4182242e9c25bebce	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\r\nimport Data.Map.Strict (Map) \r\nimport qualified Data.Map as M\r\nimport Text.Printf (printf)\r\n\r\n\r\nnewtype Nucleotide = Nucleotide Char deriving (Eq, Show, Ord)\r\ntype Strand = [Nucleotide]\r\n\r\nfromChar :: Char -> Nucleotide\r\nfromChar c | c `elem` ok = Nucleotide c \r\n           | otherwise   = error $ printf "invalid nucleotide \\'%c\\'" c \r\n  where\r\n    ok = "ACGTU" -- adenine, cytosine, guanine, thymidine, uracil\r\n\r\nstrToStrand :: String -> Strand\r\nstrToStrand = map fromChar\r\n\r\nnucleotideCounts :: String -> M.Map Char Int\r\nnucleotideCounts = (`M.union` base) . nucleotideCounts' . frequency . strToStrand\r\n  where \r\n    base                  = M.fromList $ zip "ACGT" $ repeat 0\r\n    nucleotideCounts'     = M.mapKeys toChar \r\n    toChar (Nucleotide x) = x \r\n\r\ncount :: Char -> String -> Int\r\ncount n s = count' (fromChar n) (strToStrand s)\r\n  where\r\n    count' x = length . filter (==x)\r\n\r\nfrequency :: (Ord a) => [a] -> Map a Int\r\nfrequency lst = M.fromListWith (+) baseList\r\n  where \r\n    baseList = zip lst $ repeat 1	\N	\N	0	1	2014-07-03 16:34:22	2014-07-03 16:34:22	217	DNA.hs
450	44	0c8f48e361bfd2faed6de3b5	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\r\nimport Data.Map.Strict (Map) \r\nimport qualified Data.Map as M\r\n\r\n\r\nnewtype Nucleotide = Nucleotide Char deriving (Eq, Show, Ord)\r\ntype Strand = [Nucleotide]\r\n\r\nfromChar :: Char -> Nucleotide\r\nfromChar c | c `elem` ok = Nucleotide c \r\n           | otherwise   = error $ "invalid nucleotide " ++ show c  \r\n  where\r\n    ok = "ACGTU" -- adenine, cytosine, guanine, thymidine, uracil\r\n\r\nstrToStrand :: String -> Strand\r\nstrToStrand = map fromChar\r\n\r\nnucleotideCounts :: String -> M.Map Char Int\r\nnucleotideCounts = (`M.union` base) . nucleotideCounts' . frequency . strToStrand\r\n  where \r\n    base              = M.fromList $ zip "ACGT" $ repeat 0\r\n    nucleotideCounts' = M.mapKeys (\\(Nucleotide x)-> x)\r\n\r\ncount :: Char -> String -> Int\r\ncount n s = count' (fromChar n) (strToStrand s)\r\n  where\r\n    count' x = length . filter (==x)\r\n\r\nfrequency :: (Ord a) => [a] -> Map a Int\r\nfrequency lst = M.fromListWith (+) baseList\r\n  where \r\n    baseList = zip lst $ repeat 1	\N	\N	0	2	2014-07-12 01:40:30	2014-07-12 01:40:30	217	DNA.hs
451	44	2b505d0dac24892eac4fc0be	pending	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\r\nimport Data.Map.Strict (Map) \r\nimport qualified Data.Map.Strict as M\r\n\r\nnewtype Nucleotide = Nucleotide Char deriving (Eq, Show, Ord)\r\ntype Strand = [Nucleotide]\r\n\r\nfromChar :: Char -> Nucleotide\r\nfromChar c | c `elem` ok = Nucleotide c \r\n           | otherwise   = error $ "invalid nucleotide " ++ show c  \r\n  where\r\n    ok = "ACGTU" -- adenine, cytosine, guanine, thymidine, uracil\r\n\r\nstrToStrand :: String -> Strand\r\nstrToStrand = map fromChar\r\n\r\nnucleotideCounts :: String -> M.Map Char Int\r\nnucleotideCounts = (`M.union` base) . nucleotideCounts' . frequency . strToStrand\r\n  where \r\n    base              = M.fromList $ zip "ACGT" $ repeat 0\r\n    nucleotideCounts' = M.mapKeys (\\(Nucleotide x)-> x)\r\n\r\ncount :: Char -> String -> Int\r\ncount n s = count' (fromChar n) (strToStrand s)\r\n  where count' x = length . filter (==x)\r\n\r\nfrequency :: (Ord a) => [a] -> Map a Int\r\nfrequency lst = M.fromListWith (+) baseList\r\n  where baseList = zip lst $ repeat 1	\N	\N	0	3	2014-07-15 17:51:38	2014-07-15 17:51:38	217	DNA.hs
452	44	8d182e6caa2ee249da39503c	pending	ruby	house	class House\n\n  START = "This is"\n  ENDING = ".\\n"\n  PHRASES = ['the house that Jack built',\n            'the malt that lay in ',\n            'the rat that ate ',\n            'the cat that killed ',\n            'the dog that worried ',\n            'the cow with the crumpled horn that tossed ',\n            'the maiden all forlorn that milked ',\n            'the man all tattered and torn that kissed ',\n            'the priest all shaven and shorn that married ',\n            'the rooster that crowed in the morn that woke ',\n            'the farmer sowing his corn that kept ',\n            'the horse and the hound and the horn that belonged to '\n            ]\n\n  def verse n\n    "#{START} #{body(n)}#{ENDING}"\n  end\n\n  def verses(n1, n2)\n    n1.upto(n2).map { |n| body(n) }.join(' ')\n  end\n\n  def body n\n    text = ''\n    n -= 1\n    until n < 0 \n      text << PHRASES[n]\n      n -= 1\n    end\n    text\n  end\n\nend	\N	\N	0	1	2014-06-22 01:38:37	2014-06-22 01:38:37	218	house.rb
453	44	5265cba76a2464d5a4f4c0ea	superseded	scala	hamming	object Hamming {\n    def compute(str1 : String, str2 : String) : Int = {\n        str1 zip str2 count (p => p._1 != p._2)\n    }\n}	\N	\N	0	1	2014-06-23 03:06:51	2014-06-23 03:06:51	219	Hamming.scala
454	44	277ac921ee45d237dfcf10ab	pending	scala	hamming	object Hamming {\n  def compute(str1: String, str2: String) : Int = {\n    str1 zip str2 count (p => p._1 != p._2)\n  }\n}	\N	\N	0	2	2014-07-07 09:41:40	2014-07-07 09:41:40	219	Hamming.scala
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 454, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	2	1
3	3	1
4	1	2
5	1	3
6	1	4
7	2	4
8	3	5
9	2	6
10	2	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	2001-03-26 04:38:03	2001-03-26 04:38:03	t
2	1	14	2006-06-05 01:36:10	2006-06-05 01:36:10	t
3	1	17	2008-04-12 14:33:26	2008-04-12 14:33:26	t
4	1	22	1994-01-25 14:48:50	1994-01-25 14:48:50	t
5	1	10	1991-09-04 21:14:31	1991-09-04 21:14:31	t
6	1	7	2004-11-20 12:38:33	2004-11-20 12:38:33	t
7	1	6	1978-09-08 10:01:31	1978-09-08 10:01:31	t
8	1	29	1990-04-13 03:50:23	1990-04-13 03:50:23	t
9	1	30	1971-12-24 01:31:45	1971-12-24 01:31:45	t
10	1	35	1997-05-18 06:25:28	1997-05-18 06:25:28	t
11	1	15	1982-10-12 18:59:37	1982-10-12 18:59:37	f
12	1	16	1991-12-23 06:52:09	1991-12-23 06:52:09	f
13	1	28	1986-06-08 02:54:37	1986-06-08 02:54:37	f
14	1	31	2001-04-04 21:23:01	2001-04-04 21:23:01	f
15	1	37	2010-01-30 11:43:17	2010-01-30 11:43:17	f
16	1	41	1970-03-03 16:27:22	1970-03-03 16:27:22	f
17	1	42	1981-01-20 03:30:01	1981-01-20 03:30:01	f
18	1	46	1987-09-12 23:28:15	1987-09-12 23:28:15	f
19	2	2	2008-07-30 07:08:59	2008-07-30 07:08:59	t
20	2	35	1981-10-09 20:43:04	1981-10-09 20:43:04	t
21	2	30	1991-07-23 04:43:22	1991-07-23 04:43:22	t
22	2	46	2010-03-10 23:54:34	2010-03-10 23:54:34	t
23	2	18	2012-06-19 20:53:54	2012-06-19 20:53:54	f
24	2	37	1993-01-31 13:36:03	1993-01-31 13:36:03	f
25	3	37	1976-10-07 02:42:06	1976-10-07 02:42:06	f
26	3	2	1999-12-04 23:46:40	1999-12-04 23:46:40	f
27	4	2	2005-10-22 12:31:14	2005-10-22 12:31:14	t
28	4	31	1985-05-09 21:41:39	1985-05-09 21:41:39	t
29	4	21	1999-12-20 11:06:04	1999-12-20 11:06:04	t
30	4	26	1985-11-19 17:00:56	1985-11-19 17:00:56	t
31	4	19	2011-05-11 22:06:21	2011-05-11 22:06:21	t
32	4	24	1976-01-21 13:27:50	1976-01-21 13:27:50	t
33	4	18	1990-09-24 06:24:19	1990-09-24 06:24:19	t
34	4	23	1980-05-31 14:34:30	1980-05-31 14:34:30	t
35	4	25	1991-02-03 18:26:13	1991-02-03 18:26:13	t
36	4	20	1996-06-16 01:20:16	1996-06-16 01:20:16	t
37	4	37	2001-02-14 09:36:25	2001-02-14 09:36:25	f
38	4	11	2007-04-07 21:57:38	2007-04-07 21:57:38	f
39	4	13	1973-08-05 19:34:14	1973-08-05 19:34:14	f
40	5	31	1977-08-17 09:23:27	1977-08-17 09:23:27	t
41	5	39	1974-11-01 03:16:35	1974-11-01 03:16:35	t
42	5	34	2002-03-19 13:26:22	2002-03-19 13:26:22	t
43	5	36	2010-09-29 06:05:10	2010-09-29 06:05:10	t
44	5	32	2002-11-12 02:43:38	2002-11-12 02:43:38	t
45	5	35	1978-08-28 16:15:47	1978-08-28 16:15:47	t
46	5	33	2010-04-19 01:10:27	2010-04-19 01:10:27	t
47	5	38	1977-07-30 15:10:07	1977-07-30 15:10:07	t
48	5	40	2006-09-09 19:17:00	2006-09-09 19:17:00	f
49	5	37	2010-09-09 19:38:42	2010-09-09 19:38:42	f
50	5	2	2012-11-03 13:34:53	2012-11-03 13:34:53	f
51	6	5	1993-10-31 23:04:21	1993-10-31 23:04:21	t
52	6	6	2000-07-14 12:27:59	2000-07-14 12:27:59	t
53	6	7	2007-10-08 03:36:04	2007-10-08 03:36:04	t
54	6	8	1981-01-28 14:51:42	1981-01-28 14:51:42	t
55	6	10	1978-10-02 06:38:04	1978-10-02 06:38:04	t
56	6	11	2001-10-24 00:27:37	2001-10-24 00:27:37	t
57	6	12	1979-08-21 06:35:15	1979-08-21 06:35:15	t
58	6	13	1998-05-24 22:14:18	1998-05-24 22:14:18	t
59	6	14	1998-11-14 19:49:17	1998-11-14 19:49:17	t
60	6	15	2005-05-20 03:59:10	2005-05-20 03:59:10	t
61	6	16	1989-12-24 19:10:29	1989-12-24 19:10:29	t
62	6	17	1998-05-25 14:13:12	1998-05-25 14:13:12	t
63	6	22	1984-08-09 17:25:04	1984-08-09 17:25:04	t
64	6	27	1982-09-23 08:11:30	1982-09-23 08:11:30	t
65	6	28	1982-03-28 11:59:52	1982-03-28 11:59:52	t
66	6	29	1992-12-20 08:56:47	1992-12-20 08:56:47	t
67	6	30	1999-03-11 15:11:57	1999-03-11 15:11:57	t
68	6	31	1971-12-30 14:42:50	1971-12-30 14:42:50	t
69	6	37	1989-11-14 05:18:14	1989-11-14 05:18:14	t
70	6	41	2009-11-21 21:35:34	2009-11-21 21:35:34	t
71	6	42	1984-08-24 01:34:20	1984-08-24 01:34:20	t
72	6	43	2008-11-25 05:38:49	2008-11-25 05:38:49	t
73	6	44	1976-11-30 01:19:44	1976-11-30 01:19:44	t
74	6	45	1998-09-15 23:06:05	1998-09-15 23:06:05	t
75	6	46	1998-11-22 14:59:46	1998-11-22 14:59:46	t
76	6	47	1973-04-08 13:19:10	1973-04-08 13:19:10	t
77	6	48	2008-11-29 04:27:51	2008-11-29 04:27:51	t
78	7	2	1983-09-30 04:20:49	1983-09-30 04:20:49	t
79	7	38	1981-09-22 00:03:50	1981-09-22 00:03:50	t
80	7	31	1973-06-20 10:42:16	1973-06-20 10:42:16	t
81	7	37	2014-02-07 07:11:53	2014-02-07 07:11:53	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-07-24 07:54:53.722166	2014-07-24 07:54:53.722166	baconesia
2	chocolades	2013-12-06 19:36:03.760232	2013-12-06 19:36:03.760232	chocolades
3	ghost	2014-04-15 00:46:46.769687	2014-04-15 00:46:46.769687	ghost
4	motley	2013-11-21 20:59:47.781982	2013-11-21 20:59:47.781982	motley
5	rugrats	2014-02-09 05:17:21.803704	2014-02-09 05:17:21.803704	rugrats
6	slate	2014-03-06 10:02:03.820101	2014-03-06 10:02:03.820101	slate
7	polkadots	2014-05-22 15:06:27.854089	2014-05-22 15:06:27.854089	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	8	ruby	space-age	1	done	2014-04-20 06:09:42	2014-04-20 03:23:22	2014-04-20 03:23:22	200c270a1fde55a90eb5b63d	t
2	8	haskell	beer-song	1	done	2014-06-01 14:37:48	2014-05-31 20:09:52	2014-05-31 20:09:52	e3226312c285eacd3c563059	t
3	10	ruby	sum-of-multiples	6	pending	\N	2014-01-13 16:43:39	2014-01-13 16:43:39	2db2e07e0aadfe4d3dc7dbec	f
4	10	ruby	hamming	1	done	2014-06-21 10:40:15	2014-06-20 17:24:05	2014-06-20 17:24:05	1f4c7135871acf03db490d02	t
5	10	ruby	rna-transcription	3	pending	\N	2014-01-25 15:50:08	2014-01-25 15:50:08	4bc393e0986daf46ad331161	f
6	10	python	word-count	1	done	2014-03-22 14:36:20	2014-03-18 02:26:07	2014-03-18 02:26:07	1d7880d4c850ff949c13f399	t
7	10	javascript	nucleotide-count	1	done	2014-03-23 01:49:26	2014-03-22 12:25:07	2014-03-22 12:25:07	590677679afcf5d10362f413	t
8	11	ruby	bob	7	pending	\N	2014-07-03 21:47:08	2014-07-03 21:47:08	1a52a0b78a16c32e72d0a9a6	f
9	14	ruby	leap	1	done	2014-06-13 20:00:49	2014-06-11 11:55:29	2014-06-11 11:55:29	c4a39f392f8adad860497ace	t
10	14	elixir	word-count	1	done	2014-07-08 22:17:06	2014-07-07 00:03:12	2014-07-07 00:03:12	8d7ebfe1c74a6326d0232927	t
11	14	clojure	bob	1	done	2014-06-26 17:20:21	2014-06-15 21:09:28	2014-06-15 21:09:28	2b765c091fe63f3039669517	t
12	14	ruby	house	1	done	2014-07-11 01:05:30	2014-07-01 01:41:08	2014-07-01 01:41:08	4017e417ac8544cefc74e7c7	t
13	14	haskell	raindrops	9	pending	\N	2014-05-13 17:29:45	2014-05-13 17:29:45	ef2cefaa25f4f28711e5dd21	f
14	14	ruby	food-chain	1	done	2014-06-12 02:13:15	2014-06-11 05:25:10	2014-06-11 05:25:10	630f3b43ec70f60a30d3d9ce	t
15	14	ruby	scrabble-score	2	done	2014-06-19 18:26:57	2014-06-14 00:20:11	2014-06-14 00:20:11	2c4a4eca97aef4c187ceeebd	t
16	21	go	leap	1	done	2014-07-20 22:41:33	2014-07-13 09:41:12	2014-07-13 09:41:12	a7633df85655a6917de8cd2b	t
17	21	javascript	word-count	1	done	2014-07-26 23:05:42.541897	2014-07-17 12:47:58	2014-07-17 12:47:58	b1bfa0d29eadd4ac7d472664	t
18	21	ruby	triangle	2	pending	\N	2014-07-10 23:39:45	2014-07-10 23:39:45	c6ddfb4a9dfd974246d3f452	f
19	21	javascript	bob	2	done	2014-07-17 09:28:18	2014-07-12 00:52:45	2014-07-12 00:52:45	26021fc1060789ed6d0ca541	t
20	21	ruby	word-count	3	done	2014-07-26 23:05:42.710261	2014-07-11 14:38:02	2014-07-11 14:38:02	2b40a24c50864fa968ce2edf	t
21	27	ruby	roman-numerals	2	done	2014-03-06 12:39:30	2014-02-09 04:10:38	2014-02-09 04:10:38	4574703720c9ca1cbb5cdcbf	t
22	28	elixir	roman-numerals	1	pending	\N	2014-02-18 15:13:12	2014-02-18 15:13:12	9b511c31d82e60cf28deb1e1	f
23	28	ruby	gigasecond	1	done	2014-04-02 04:35:56	2014-03-21 20:40:57	2014-03-21 20:40:57	21071b365cca5de9c04137da	t
24	28	ruby	beer-song	2	done	2014-03-28 20:57:50	2014-03-27 02:36:58	2014-03-27 02:36:58	d2116429837cb1b21cebb192	t
25	30	haskell	robot-name	1	done	2014-07-26 23:05:42.890727	2014-07-17 09:30:56	2014-07-17 09:30:56	e7d130aa6a86ffc068b72a60	t
26	30	javascript	grains	1	pending	\N	2014-07-17 07:55:57	2014-07-17 07:55:57	510b26ad4478100723bc2932	f
27	30	ruby	bob	1	done	2014-07-26 23:05:42.930481	2014-07-16 15:04:59	2014-07-16 15:04:59	65452392171c7dd1e2b3219f	t
28	30	javascript	anagram	4	done	2014-07-26 04:30:10	2014-07-16 16:31:21	2014-07-16 16:31:21	2a8ea159b653763de94e41a3	t
29	30	scala	hamming	2	done	2014-07-23 12:43:15	2014-07-19 00:40:29	2014-07-19 00:40:29	cef40dc30de42a6696e43953	t
30	30	clojure	nucleotide-count	2	done	2014-07-26 23:05:43.085319	2014-07-18 03:23:54	2014-07-18 03:23:54	df610bb47ea55931cadc7506	t
31	32	haskell	leap	1	pending	\N	2014-06-22 19:17:50	2014-06-22 19:17:50	0e298762cb08949007032a4e	f
32	32	elixir	bob	7	done	2014-07-16 02:09:33	2014-06-01 17:54:23	2014-06-01 17:54:23	600fdd2df396330bc64816d5	t
33	37	ruby	bob	5	done	2014-06-25 23:24:37	2014-05-27 05:28:33	2014-05-27 05:28:33	9f39652ce007f4c06066118f	t
34	37	ruby	space-age	1	done	2014-07-18 08:32:04	2014-07-16 22:37:08	2014-07-16 22:37:08	766a5da86743a88c9153a2d4	t
35	37	haskell	matrix	5	pending	\N	2014-06-01 13:49:56	2014-06-01 13:49:56	652c9ff702787bc0b65c6310	f
36	37	perl5	rna-transcription	2	done	2014-06-08 01:22:43	2014-06-02 02:34:47	2014-06-02 02:34:47	b99611c386c0d047d9b2ba67	t
37	37	scala	hamming	2	done	2014-06-29 14:09:50	2014-06-21 03:10:46	2014-06-21 03:10:46	661b1edfab3f47f55536859d	t
38	39	elixir	space-age	1	pending	\N	2014-05-24 15:46:28	2014-05-24 15:46:28	5ac5c9e218c52cc6ae4d811a	f
39	43	ruby	leap	1	done	2014-05-24 13:38:50	2014-05-24 00:08:11	2014-05-24 00:08:11	0c19276f345dee3f2a17dd1b	t
40	43	haskell	meetup	1	pending	\N	2014-04-17 03:38:24	2014-04-17 03:38:24	a3e87e8a3fa2f46593e3bc4f	f
41	45	ruby	roman-numerals	1	done	2014-07-26 23:05:43.820219	2014-07-22 17:45:56	2014-07-22 17:45:56	11078b22a9f2b2b79e491d01	t
42	47	ruby	grade-school	3	done	2014-07-05 06:32:13	2014-06-30 11:03:35	2014-06-30 11:03:35	9ef093a59f2f21d95033fb48	t
43	47	javascript	word-count	3	done	2014-07-04 13:38:26	2014-06-23 14:10:29	2014-06-23 14:10:29	b6d29b4e8c263c6977c8ec9c	t
44	47	ruby	phone-number	1	done	2014-07-01 23:52:14	2014-06-20 20:14:15	2014-06-20 20:14:15	f35e349e292ac20184233dc4	t
45	47	ruby	anagram	1	done	2014-07-10 22:44:15	2014-07-05 23:42:29	2014-07-05 23:42:29	226fd97166aebeb5c29ea4af	t
46	47	coffeescript	bob	1	pending	\N	2014-07-05 05:39:28	2014-07-05 05:39:28	e2eb19a6953003d6e078552c	f
47	48	haskell	point-mutations	3	pending	\N	2014-05-04 20:40:03	2014-05-04 20:40:03	1763af3c099ab145403e73ac	f
48	48	clojure	kindergarten-garden	1	pending	\N	2014-06-06 10:55:57	2014-06-06 10:55:57	380ab8ed3fc57ef3706c33ee	f
49	48	go	leap	2	pending	\N	2014-04-11 12:16:27	2014-04-11 12:16:27	eb0f4e13ba0a7e6522ff7615	f
50	48	haskell	bob	2	pending	\N	2014-04-27 09:54:13	2014-04-27 09:54:13	6a2a8f9b7990d9bbc7916c8c	f
51	48	python	beer-song	1	pending	\N	2014-05-02 08:26:15	2014-05-02 08:26:15	435cecae0fb330042cc397bb	f
52	48	ruby	rna-transcription	2	pending	\N	2014-05-18 21:21:51	2014-05-18 21:21:51	31ed902dc06bb3881ce978ae	f
53	48	ruby	bob	3	pending	\N	2014-04-18 23:59:23	2014-04-18 23:59:23	7bea07c47e076a00f638b2a7	f
54	48	javascript	circular-buffer	1	pending	\N	2014-05-03 07:10:42	2014-05-03 07:10:42	c8679420545f5332ee3340b4	f
55	48	javascript	etl	5	pending	\N	2014-04-13 19:49:40	2014-04-13 19:49:40	909b3af9c944d46e591a248f	f
56	48	ruby	hamming	1	pending	\N	2014-06-17 12:42:50	2014-06-17 12:42:50	f0d18b111985436e76fd7896	f
57	48	javascript	meetup	2	pending	\N	2014-05-02 17:44:16	2014-05-02 17:44:16	25b852c9a8a5ee2e3cc758d1	f
58	48	haskell	phone-number	1	pending	\N	2014-05-21 06:31:54	2014-05-21 06:31:54	19323aab1a976c2d9633e7f7	f
59	48	ruby	grains	1	pending	\N	2014-06-24 04:44:25	2014-06-24 04:44:25	657b10ac791442e80608ce1a	f
60	48	ruby	anagram	2	pending	\N	2014-05-17 13:34:41	2014-05-17 13:34:41	96b8296ee294c7e01c6702b8	f
61	48	elixir	anagram	5	pending	\N	2014-04-11 21:46:24	2014-04-11 21:46:24	0bd111eb237eda6d88408703	f
62	48	go	binary	1	pending	\N	2014-04-21 06:50:57	2014-04-21 06:50:57	3c6e2035a0d46dcfc8e9e061	f
63	48	ruby	gigasecond	3	pending	\N	2014-04-13 07:26:16	2014-04-13 07:26:16	e3db85685735fba3013a5987	f
64	48	haskell	meetup	1	pending	\N	2014-04-16 18:55:13	2014-04-16 18:55:13	9520c36c8536eb13879e5fa6	f
65	48	ruby	space-age	1	pending	\N	2014-04-17 08:35:28	2014-04-17 08:35:28	cb80ab684448a1945bc8572d	f
66	48	python	bob	3	pending	\N	2014-05-03 09:04:16	2014-05-03 09:04:16	3032bd8f78a292bd8ee46154	f
67	48	haskell	nucleotide-count	1	pending	\N	2014-04-26 03:46:15	2014-04-26 03:46:15	3c202af217771388e6624b29	f
68	48	python	anagram	1	pending	\N	2014-07-05 20:29:29	2014-07-05 20:29:29	342da5a5985b85edc87cd8d7	f
69	48	go	bob	1	pending	\N	2014-07-17 16:58:01	2014-07-17 16:58:01	9834a4689a063271b09aaa40	f
70	48	ruby	word-count	2	pending	\N	2014-05-17 18:30:20	2014-05-17 18:30:20	03f9ac0e06ab3ef5cef47dff	f
71	48	python	sum-of-multiples	1	pending	\N	2014-07-18 14:43:52	2014-07-18 14:43:52	c41461a9434a2b2802ee5430	f
72	25	haskell	ocr-numbers	2	pending	\N	2014-06-29 19:03:06	2014-06-29 19:03:06	05d0597b484d99db8f3bdb04	f
73	25	ruby	point-mutations	7	pending	\N	2014-06-28 09:13:12	2014-06-28 09:13:12	5510697aa07386cc9e6b7fbc	f
74	25	haskell	matrix	2	pending	\N	2014-07-02 12:28:23	2014-07-02 12:28:23	267bb018d8ce0444fa219453	f
75	25	elixir	point-mutations	5	pending	\N	2014-06-27 05:16:04	2014-06-27 05:16:04	3ef72a5a0b080a4c8b682acb	f
76	25	haskell	leap	1	pending	\N	2014-07-03 00:44:50	2014-07-03 00:44:50	bf75bcd3b76e27f434e8b6a4	f
77	25	ruby	bob	3	pending	\N	2014-07-04 10:40:58	2014-07-04 10:40:58	53d1b23a1e945aaca3376529	f
78	6	haskell	phone-number	2	pending	\N	2014-07-18 04:54:22	2014-07-18 04:54:22	86194536a5d642d4604f2460	f
79	6	clojure	binary	1	pending	\N	2014-07-21 19:57:24	2014-07-21 19:57:24	10dcf04f17c7bf86b6221709	f
80	6	ruby	simple-cipher	2	pending	\N	2014-07-19 01:07:59	2014-07-19 01:07:59	05e428664f59a15e385ed84e	f
81	6	javascript	word-count	2	pending	\N	2014-07-18 00:21:23	2014-07-18 00:21:23	b4363da1643f97e6b4fc2388	f
82	6	javascript	bob	3	pending	\N	2014-07-17 09:00:13	2014-07-17 09:00:13	ebdfc6c60158996f4d171c51	f
83	22	ruby	bob	1	pending	\N	2014-06-28 03:08:39	2014-06-28 03:08:39	b7ae7d0cd572bbdd9cc2a012	f
84	22	clojure	word-count	1	pending	\N	2014-06-27 21:01:24	2014-06-27 21:01:24	ddb2a1cff83bca4eb28e6ba4	f
85	16	ruby	leap	2	pending	\N	2014-04-23 18:36:25	2014-04-23 18:36:25	f38cdcd8581a723922056ce9	f
86	16	python	roman-numerals	2	pending	\N	2014-04-21 00:02:09	2014-04-21 00:02:09	01849313cd958b6917073174	f
87	16	ruby	bob	2	pending	\N	2014-03-29 18:50:26	2014-03-29 18:50:26	d687ccdf38418266e63ddecc	f
88	19	ruby	anagram	1	done	2014-06-09 20:04:44	2014-05-29 13:50:00	2014-05-29 13:50:00	62abdb7a423d0d30f4925136	t
89	19	ruby	bob	2	done	2014-05-09 21:33:18	2014-05-07 12:15:26	2014-05-07 12:15:26	3bd25758f1426afd9762c6ed	t
90	19	ruby	gigasecond	1	done	2014-06-20 03:29:14	2014-06-16 19:02:26	2014-06-16 19:02:26	7bc8fe08c88acbf58d29be67	t
91	19	haskell	scrabble-score	1	done	2014-06-03 14:52:35	2014-05-30 09:02:33	2014-05-30 09:02:33	74ff583d6dc0b2730c5f47e7	t
92	20	ruby	word-count	2	done	2014-07-13 19:44:52	2014-04-12 14:50:04	2014-04-12 14:50:04	37c1d569136467830b0f5c2c	t
93	20	haskell	bank-account	3	done	2014-03-28 08:09:53	2014-03-26 19:48:01	2014-03-26 19:48:01	9c0a7ca07c081b61eee0567f	t
94	20	clojure	triangle	1	done	2014-04-03 01:08:44	2014-03-26 21:14:31	2014-03-26 21:14:31	26464f5af79ddd529c012226	t
95	20	ruby	nucleotide-count	9	done	2014-07-24 06:49:32	2014-04-08 00:53:07	2014-04-08 00:53:07	c36f5079b74167be59b32487	t
96	20	haskell	word-count	3	done	2014-06-17 20:30:01	2014-04-07 13:43:54	2014-04-07 13:43:54	2db8ca0bd17082af685d9d28	t
97	20	ruby	grade-school	1	done	2014-04-10 16:36:41	2014-03-30 11:13:15	2014-03-30 11:13:15	48098b6644c0afb52c8b0f74	t
98	35	ruby	strain	1	done	2014-02-26 10:29:14	2014-02-16 00:24:25	2014-02-16 00:24:25	a43fb8aa34d326d6f430c11e	t
99	35	go	queen-attack	2	done	2014-04-19 12:02:11	2014-02-24 14:43:42	2014-02-24 14:43:42	b5e10a5d52bdf137eda5df44	t
100	35	ruby	prime-factors	1	done	2013-11-28 09:29:46	2013-11-19 01:17:11	2013-11-19 01:17:11	40cc41e0b72d2ea2e0c682f4	t
101	35	go	grains	3	done	2013-11-21 08:47:43	2013-11-16 10:10:43	2013-11-16 10:10:43	efc22fd9a4a8341becfd7f3f	t
102	35	python	matrix	2	done	2014-02-04 22:18:03	2013-12-18 09:48:32	2013-12-18 09:48:32	2fbc7de484210f7117ee5af4	t
103	35	javascript	bob	2	done	2013-12-25 06:33:00	2013-12-18 17:26:44	2013-12-18 17:26:44	4907419e854623f4b5a889a7	t
104	35	ruby	grade-school	1	done	2014-02-26 01:29:57	2014-02-15 03:45:45	2014-02-15 03:45:45	a55d5ecfd47379301bc52540	t
105	35	ruby	leap	2	done	2013-12-15 20:25:27	2013-11-26 23:03:49	2013-11-26 23:03:49	367090b3a3643b3c3c9dba2b	t
106	35	python	word-count	1	done	2014-05-05 07:09:41	2014-04-28 02:41:12	2014-04-28 02:41:12	b0e48c8db90acde3347252e7	t
107	35	perl5	linked-list	1	done	2014-01-01 17:53:47	2014-01-01 12:19:03	2014-01-01 12:19:03	19dfc8a8d15e3b9b3ae610a8	t
108	35	ruby	bob	3	done	2013-12-14 16:35:03	2013-12-13 23:47:50	2013-12-13 23:47:50	a2eaf937111ce874ca1cc895	t
109	35	perl5	luhn	1	done	2014-04-17 10:31:16	2014-04-06 11:51:14	2014-04-06 11:51:14	edf07c161d5616d27d64171d	t
110	35	ruby	gigasecond	1	done	2014-01-28 21:39:53	2014-01-17 14:22:37	2014-01-17 14:22:37	436462338fcc8d0cc5ee8ee7	t
111	35	scala	word-count	1	done	2014-05-01 05:08:00	2014-04-26 15:06:46	2014-04-26 15:06:46	ea5c2c0988fe999336cbd423	t
112	35	haskell	binary	2	done	2014-04-02 22:33:00	2014-02-01 11:12:03	2014-02-01 11:12:03	4f4e5e1144c806c2b9e04fdf	t
113	35	javascript	nucleotide-count	3	done	2014-04-11 18:32:29	2014-04-01 04:46:26	2014-04-01 04:46:26	44a551527688b50b5c8bc423	t
114	35	go	anagram	3	done	2014-05-12 19:36:51	2013-12-12 04:37:56	2013-12-12 04:37:56	4e2e0223108003b2e07e7704	t
115	35	ruby	pig-latin	1	done	2014-02-18 22:28:40	2014-02-14 19:18:51	2014-02-14 19:18:51	87b907869ae98ef4616bcf44	t
116	35	ruby	phone-number	3	done	2013-11-25 04:40:58	2013-11-18 10:44:28	2013-11-18 10:44:28	66613b3a060399f62459c909	t
117	35	clojure	anagram	3	done	2014-05-19 14:33:54	2014-02-06 12:25:10	2014-02-06 12:25:10	00f46b7ab77ba3c87f92f06e	t
118	35	ruby	hamming	2	done	2014-05-26 23:59:43	2014-03-04 17:28:56	2014-03-04 17:28:56	2ff2c4a492a178ae9be5c6b0	t
119	35	go	accumulate	2	done	2014-04-14 07:37:06	2014-01-03 03:38:09	2014-01-03 03:38:09	2be05db98e9cafe35dd18e0a	t
120	35	haskell	beer-song	1	done	2013-12-25 19:50:30	2013-12-14 16:21:29	2013-12-14 16:21:29	e150ae38ac921c1cc6c37771	t
121	35	haskell	accumulate	1	done	2013-12-03 11:44:57	2013-11-30 02:21:19	2013-11-30 02:21:19	34ee59e188b40cda7ac8b429	t
122	35	go	gigasecond	1	done	2013-12-12 22:01:40	2013-12-08 20:40:43	2013-12-08 20:40:43	97bc31b509f82bb0e61b3d96	t
123	35	javascript	word-count	5	done	2014-03-06 02:28:04	2014-01-04 08:09:39	2014-01-04 08:09:39	e4894db84176d939bf3c9318	t
124	29	python	rna-transcription	1	done	2014-04-27 20:14:03	2014-04-16 06:38:57	2014-04-16 06:38:57	12eaaa6e7b519dee320887f9	t
125	34	ruby	grade-school	1	done	2013-12-12 17:58:15	2013-12-07 12:02:25	2013-12-07 12:02:25	8d0a296bfe94158935a450cb	t
126	34	go	difference-of-squares	2	done	2014-04-13 10:30:08	2013-12-07 19:50:17	2013-12-07 19:50:17	3a9d86a9290f77cc7615e8b8	t
127	13	javascript	word-count	4	pending	\N	2014-03-03 07:09:05	2014-03-03 07:09:05	f05687a9168563fa8d25b6c6	f
128	13	clojure	rna-transcription	1	pending	\N	2014-03-04 05:51:09	2014-03-04 05:51:09	3e653f043f52d8629c876424	f
129	13	haskell	raindrops	2	pending	\N	2014-05-12 03:01:59	2014-05-12 03:01:59	c0e26fd0738f6e795b4d5fde	f
130	13	ruby	bob	1	pending	\N	2014-03-25 03:03:44	2014-03-25 03:03:44	f3318ff37134bab59219b01f	f
131	40	python	bob	4	pending	\N	2013-11-26 09:24:46	2013-11-26 09:24:46	7abeee3701b07469e10fdf4a	f
132	40	haskell	pascals-triangle	2	pending	\N	2014-01-13 05:49:22	2014-01-13 05:49:22	0538c06f678fb9df96de1a60	f
133	40	ruby	secret-handshake	1	pending	\N	2014-01-17 15:31:12	2014-01-17 15:31:12	a1f953210e05e65c3e46d483	f
134	40	perl5	rna-transcription	1	pending	\N	2013-12-26 11:37:38	2013-12-26 11:37:38	80bf2375d606c86c9191719b	f
135	40	javascript	bob	5	pending	\N	2013-12-23 13:09:20	2013-12-23 13:09:20	d1382292b49766f4bd7305be	f
136	40	clojure	point-mutations	1	pending	\N	2013-11-15 08:47:21	2013-11-15 08:47:21	acdf7f6b874a97b7677f55af	f
137	40	ruby	meetup	1	pending	\N	2014-04-25 06:11:19	2014-04-25 06:11:19	13d6bbe2cd98410b35a4ca24	f
138	40	haskell	anagram	4	pending	\N	2013-11-18 13:52:08	2013-11-18 13:52:08	b18704fe24c329cf8ec2c1cf	f
139	40	haskell	etl	3	pending	\N	2013-12-16 18:49:19	2013-12-16 18:49:19	c16b758d5246f4c662ac3cab	f
140	40	javascript	robot-name	1	pending	\N	2014-03-15 02:03:13	2014-03-15 02:03:13	e6e1f49e47d0aabde3ef63b1	f
141	40	go	clock	1	pending	\N	2013-12-02 01:43:19	2013-12-02 01:43:19	6d59b48d04409ee78335cb67	f
142	40	haskell	grains	1	pending	\N	2014-03-15 07:05:17	2014-03-15 07:05:17	98f5478365fdf011d266688c	f
143	40	javascript	food-chain	1	pending	\N	2013-11-19 18:42:14	2013-11-19 18:42:14	925f5c8d6be8df821a8ca7d6	f
144	40	go	leap	2	pending	\N	2014-02-04 11:31:27	2014-02-04 11:31:27	bcc44dd57954e9cbb11f0bd3	f
145	40	clojure	rna-transcription	2	pending	\N	2013-12-14 21:21:26	2013-12-14 21:21:26	2715bd731e237ec7d9530a26	f
146	40	ruby	bob	4	pending	\N	2013-11-28 06:38:39	2013-11-28 06:38:39	9604c947ac095d1f40e175ff	f
147	40	haskell	point-mutations	1	pending	\N	2013-11-22 20:45:19	2013-11-22 20:45:19	07bf343ce0377916709e7635	f
148	40	ruby	nucleotide-count	2	pending	\N	2013-12-20 12:17:59	2013-12-20 12:17:59	4db269ad14563476bf40201e	f
149	40	go	raindrops	4	pending	\N	2014-02-23 13:21:45	2014-02-23 13:21:45	4b3877b3f027aafb48592bb0	f
150	40	ruby	space-age	1	pending	\N	2014-01-18 16:05:38	2014-01-18 16:05:38	1ca10c6ca4266943c7078507	f
151	40	ruby	hamming	1	pending	\N	2014-01-25 06:17:21	2014-01-25 06:17:21	35168ce23282a39f851f7f84	f
152	40	elixir	atbash-cipher	2	pending	\N	2013-12-08 15:38:27	2013-12-08 15:38:27	156fbb2fa9bc27d6cd43de87	f
153	40	haskell	linked-list	1	pending	\N	2014-01-03 09:30:13	2014-01-03 09:30:13	2dd8ab8bec3f1491b392853a	f
154	40	ruby	food-chain	1	pending	\N	2014-02-13 22:56:24	2014-02-13 22:56:24	648d1fda8d58c54358c240e8	f
155	40	ruby	grains	2	pending	\N	2013-11-23 07:19:16	2013-11-23 07:19:16	4686d87a6da21ea56722a2f5	f
156	40	haskell	beer-song	1	pending	\N	2013-12-17 23:23:30	2013-12-17 23:23:30	c79bdab73c02016aa159cc53	f
157	40	ruby	anagram	4	pending	\N	2013-11-19 12:29:54	2013-11-19 12:29:54	658e0acdd62693d8e9585047	f
158	40	haskell	bob	3	pending	\N	2013-11-14 08:09:46	2013-11-14 08:09:46	f730d246222e5a6d4be531c9	f
159	40	haskell	kindergarten-garden	1	pending	\N	2013-11-20 20:37:38	2013-11-20 20:37:38	f0af39b933a73a6aeccc451d	f
160	5	ruby	gigasecond	1	pending	\N	2014-06-01 04:33:19	2014-06-01 04:33:19	c6483a1126a67df0da445aa2	f
161	5	ruby	bob	1	pending	\N	2014-04-09 04:24:06	2014-04-09 04:24:06	694c0c9b286150cc9a7f21f7	f
162	5	perl5	binary-search	1	pending	\N	2014-03-21 11:52:19	2014-03-21 11:52:19	7923ee95d4c1f28a6de8f4cc	f
163	33	javascript	pascals-triangle	1	pending	\N	2014-05-23 01:23:14	2014-05-23 01:23:14	b2428ce61734c20566fde9b8	f
164	33	elixir	word-count	1	pending	\N	2013-11-30 02:21:28	2013-11-30 02:21:28	7de5e61df774662ca2c3e35c	f
165	33	haskell	rna-transcription	2	pending	\N	2014-01-22 23:36:22	2014-01-22 23:36:22	5b47a4cc5527462a786d6477	f
166	33	ruby	nucleotide-count	3	pending	\N	2013-12-05 06:05:54	2013-12-05 06:05:54	e92ace03b545e6e2a12ada3a	f
167	33	javascript	robot-name	2	pending	\N	2014-01-15 01:00:21	2014-01-15 01:00:21	dbde685286beba63120be149	f
168	15	ruby	word-count	1	pending	\N	2014-03-18 19:05:27	2014-03-18 19:05:27	61508d3cf63977fa9f651f42	f
169	15	haskell	nucleotide-count	2	pending	\N	2014-03-10 12:36:48	2014-03-10 12:36:48	251e1d5c91f686ed9807216f	f
170	15	clojure	bob	2	pending	\N	2014-03-08 07:49:01	2014-03-08 07:49:01	73a03e41d0616106fbb4a382	f
171	15	ruby	accumulate	2	pending	\N	2014-03-24 01:18:21	2014-03-24 01:18:21	dbae5b1e3d2199c15d024616	f
172	15	ruby	grade-school	1	pending	\N	2014-01-07 16:31:26	2014-01-07 16:31:26	96e9cd0af408530ea5f4d775	f
173	17	haskell	wordy	2	pending	\N	2014-04-11 05:53:41	2014-04-11 05:53:41	73b658dbfc40cb4a227142ac	f
174	17	go	raindrops	1	pending	\N	2014-01-28 08:54:47	2014-01-28 08:54:47	54aae9c2e4dac09a4b565750	f
175	17	ruby	scrabble-score	2	pending	\N	2013-12-18 01:41:21	2013-12-18 01:41:21	7efd91fbcf87a2894efe6968	f
176	17	elixir	scrabble-score	4	pending	\N	2014-01-02 11:31:13	2014-01-02 11:31:13	8a038fab3f03089430178bb1	f
177	17	haskell	anagram	2	pending	\N	2014-03-16 22:10:35	2014-03-16 22:10:35	50a093a2b38adc72861dceb2	f
178	17	clojure	roman-numerals	1	pending	\N	2014-03-11 12:06:03	2014-03-11 12:06:03	671935f434b6a9cbfc0fc0b3	f
179	17	ruby	house	1	pending	\N	2014-01-31 11:38:13	2014-01-31 11:38:13	2f1b488c9fd00e861570f12b	f
180	17	elixir	word-count	1	pending	\N	2014-01-10 01:35:52	2014-01-10 01:35:52	c39c2ecf0313cb6caab9b5a3	f
181	17	ruby	rna-transcription	5	pending	\N	2014-02-05 19:52:58	2014-02-05 19:52:58	d3f971311241d2ac354b14e8	f
182	17	javascript	robot-name	2	pending	\N	2014-03-14 02:23:05	2014-03-14 02:23:05	b4aa6f34594dc371295a107b	f
183	17	ruby	gigasecond	1	pending	\N	2014-05-14 15:17:50	2014-05-14 15:17:50	79a831a4023576d805c78530	f
184	17	ruby	leap	2	pending	\N	2014-01-17 16:27:41	2014-01-17 16:27:41	be3a04bc30b4d726138b94e6	f
185	17	ruby	space-age	1	pending	\N	2014-02-22 11:46:41	2014-02-22 11:46:41	2825a6727bdcae1eefa21413	f
186	17	clojure	atbash-cipher	2	pending	\N	2014-04-20 20:03:37	2014-04-20 20:03:37	59ad8d74f36e81f739868384	f
187	17	ruby	word-count	2	pending	\N	2014-01-11 10:10:22	2014-01-11 10:10:22	e1447bbe4842414919a44bfc	f
188	17	clojure	beer-song	9	pending	\N	2014-01-03 15:52:46	2014-01-03 15:52:46	5376bd26d6b12ad91529fc71	f
189	17	ruby	etl	1	pending	\N	2013-12-24 20:29:43	2013-12-24 20:29:43	1f4f7b20de4f59f20f497d0a	f
190	23	python	matrix	1	pending	\N	2014-01-19 15:00:39	2014-01-19 15:00:39	b329aaca7a1a53a2d517de76	f
191	23	haskell	word-count	3	pending	\N	2013-11-19 18:08:07	2013-11-19 18:08:07	9114619d49435bbbe68e47bc	f
192	23	ruby	leap	1	pending	\N	2014-01-01 22:01:07	2014-01-01 22:01:07	19d1b433adb1d8296b258ff6	f
193	23	ruby	hamming	3	pending	\N	2013-11-24 15:53:16	2013-11-24 15:53:16	5b38053dd34060d652fd4ba3	f
194	23	haskell	rna-transcription	1	pending	\N	2013-11-27 03:54:38	2013-11-27 03:54:38	7b90ed7e0fa8017527bd78f8	f
195	41	clojure	anagram	5	pending	\N	2014-05-17 07:27:36	2014-05-17 07:27:36	1f845f76fd61771d6a09ee2f	f
196	41	ruby	grains	1	pending	\N	2014-06-02 19:39:13	2014-06-02 19:39:13	41195da33aa663b02cd943a1	f
197	26	javascript	grade-school	1	pending	\N	2014-07-18 08:48:18	2014-07-18 08:48:18	08f035f78166de7cab878e37	f
198	26	javascript	bob	3	pending	\N	2014-07-16 22:37:55	2014-07-16 22:37:55	790fa3f2a56ddd1dc1a2c539	f
199	26	haskell	bob	6	pending	\N	2014-07-17 21:18:11	2014-07-17 21:18:11	56c1fd8ed826ef39a440063c	f
200	26	ruby	leap	1	pending	\N	2014-07-18 09:55:07	2014-07-18 09:55:07	01c399332c7918cd67e0a39e	f
201	26	haskell	simple-cipher	2	pending	\N	2014-07-16 16:09:32	2014-07-16 16:09:32	288a5a15ec4833caeddc92c4	f
202	26	ruby	queen-attack	3	pending	\N	2014-07-16 08:52:26	2014-07-16 08:52:26	c3e28f9c6a45246693fd02be	f
203	26	ruby	roman-numerals	1	pending	\N	2014-07-20 09:26:09	2014-07-20 09:26:09	ea7158fb6e00c2358558e084	f
204	26	javascript	difference-of-squares	1	pending	\N	2014-07-24 19:56:52	2014-07-24 19:56:52	a2d20b0a95a0add6a4e70658	f
205	26	ruby	anagram	2	pending	\N	2014-07-20 11:58:00	2014-07-20 11:58:00	1dbd1fa587964b103fe723f8	f
206	26	javascript	word-count	1	pending	\N	2014-07-19 20:28:37	2014-07-19 20:28:37	eb95529e56deb1d6fd3b6e3f	f
207	26	ruby	bob	4	pending	\N	2014-07-19 19:53:10	2014-07-19 19:53:10	32bc7a9747cb479f6d1a901a	f
208	26	clojure	phone-number	3	pending	\N	2014-07-19 02:15:27	2014-07-19 02:15:27	6db4b0e1f95b36061afc3884	f
209	26	javascript	etl	1	pending	\N	2014-07-16 09:00:36	2014-07-16 09:00:36	dd7002ecec625e892fe4d042	f
210	26	scala	word-count	1	pending	\N	2014-07-17 04:12:43	2014-07-17 04:12:43	d22495857230232e4dc90b2b	f
211	26	python	word-count	3	pending	\N	2014-07-17 04:25:15	2014-07-17 04:25:15	11e87b825618bfe5e4d19f4f	f
212	26	haskell	bank-account	3	pending	\N	2014-07-17 00:18:44	2014-07-17 00:18:44	ba69c0446dfebbbe9eb0d1c9	f
213	26	ruby	hamming	3	pending	\N	2014-07-18 16:47:21	2014-07-18 16:47:21	166bf262bd99e8cdc0a3c378	f
214	44	ruby	beer-song	3	pending	\N	2014-06-22 16:13:45	2014-06-22 16:13:45	fff3a7adef56bd82a52b624d	f
215	44	javascript	bob	1	pending	\N	2014-06-28 04:16:44	2014-06-28 04:16:44	4ed6dcf7670caa19d1dc0791	f
216	44	ruby	hamming	4	pending	\N	2014-07-13 08:56:37	2014-07-13 08:56:37	6ab3e9dab81fab689362888c	f
217	44	haskell	nucleotide-count	3	pending	\N	2014-07-03 16:34:22	2014-07-03 16:34:22	b2a305ea215cceaeb5a6e9ed	f
218	44	ruby	house	1	pending	\N	2014-06-22 01:38:37	2014-06-22 01:38:37	1cbc76e1e65ae3d1076b1371	f
219	44	scala	hamming	2	pending	\N	2014-06-23 03:06:51	2014-06-23 03:06:51	fb065eda21819db15a139f3d	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 219, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
5	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg	-68246	ark765	--- []\n	2014-01-19 01:37:42.607887	2014-01-19 01:37:42.607887	\N
6	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg	-9063	xqx105	--- []\n	2014-07-16 18:20:46.610673	2014-07-16 18:20:46.610673	\N
7	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg	-26055	any862	--- []\n	2014-03-16 12:25:08.613307	2014-03-16 12:25:08.613307	\N
9	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg	-1303	fbt832	--- []\n	2014-07-22 22:50:19.617352	2014-07-22 22:50:19.617352	\N
12	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg	-35149	krq991	--- []\n	2014-03-04 06:56:36.628512	2014-03-04 06:56:36.628512	\N
13	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg	-26917	ssg639	--- []\n	2014-02-23 06:25:59.630416	2014-02-23 06:25:59.630416	\N
15	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg	-78098	npw440	--- []\n	2013-12-17 18:14:00.636503	2013-12-17 18:14:00.636503	\N
16	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg	-69031	qzq133	--- []\n	2014-03-29 13:45:00.639933	2014-03-29 13:45:00.639933	\N
17	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg	-75475	gnx322	--- []\n	2013-12-08 08:36:18.643127	2013-12-08 08:36:18.643127	\N
18	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg	-56139	zhb727	--- []\n	2014-02-14 20:54:03.645828	2014-02-14 20:54:03.645828	\N
19	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg	-13768	dff598	--- []\n	2014-04-16 20:49:05.648329	2014-04-16 20:49:05.648329	\N
20	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg	-20876	hti265	--- []\n	2014-03-24 10:52:23.650835	2014-03-24 10:52:23.650835	\N
22	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg	-92735	jwz918	--- []\n	2014-06-21 17:30:10.655831	2014-06-21 17:30:10.655831	\N
23	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg	-71728	fur971	--- []\n	2013-11-12 13:25:18.658296	2013-11-12 13:25:18.658296	\N
24	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg	-77088	fir577	--- []\n	2014-07-08 21:10:44.660791	2014-07-08 21:10:44.660791	\N
25	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg	-98264	cln526	--- []\n	2014-06-24 04:21:46.663208	2014-06-24 04:21:46.663208	\N
26	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg	-28846	zie122	--- []\n	2014-07-15 20:44:28.665627	2014-07-15 20:44:28.665627	\N
29	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg	-1168	irj913	--- []\n	2014-02-05 17:06:03.672973	2014-02-05 17:06:03.672973	\N
31	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg	-71643	uzh394	--- []\n	2014-03-10 00:32:26.678784	2014-03-10 00:32:26.678784	\N
33	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg	-31333	fak705	--- []\n	2013-11-18 08:50:31.68361	2013-11-18 08:50:31.68361	\N
34	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg	-64360	zqd476	--- []\n	2013-10-31 15:20:23.686043	2013-10-31 15:20:23.686043	\N
35	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg	-71480	ugv686	--- []\n	2013-11-14 15:42:17.68856	2013-11-14 15:42:17.68856	\N
36	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg	-46601	gso364	--- []\n	2014-03-29 15:32:08.691048	2014-03-29 15:32:08.691048	\N
38	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg	-43601	rtf827	--- []\n	2014-04-27 03:52:43.696067	2014-04-27 03:52:43.696067	\N
40	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flame_kaizar/128.jpg	-42450	jdr202	--- []\n	2013-11-13 18:12:26.700144	2013-11-13 18:12:26.700144	\N
41	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg	-69973	fqc781	--- []\n	2014-05-03 07:01:20.702579	2014-05-03 07:01:20.702579	\N
42	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg	-6454	opv972	--- []\n	2013-12-26 12:22:37.705119	2013-12-26 12:22:37.705119	\N
44	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg	-44620	mrw250	--- []\n	2014-06-20 08:38:55.709991	2014-06-20 08:38:55.709991	\N
46	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg	-51968	kpr478	--- []\n	2014-01-26 08:17:48.715261	2014-01-26 08:17:48.715261	\N
4	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg	-89397	lso931	---\n- python\n	2014-07-02 01:22:22.606079	2014-07-02 01:22:22.606079	2014-01-06 13:23:21
43	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg	-47158	xzn136	--- []\n	2014-03-27 22:57:32.707563	2014-03-27 22:57:32.707563	2014-04-10 00:39:57
39	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg	-57564	fby662	--- []\n	2014-05-22 17:52:15.697696	2014-05-22 17:52:15.697696	2014-03-22 01:02:12
10	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flame_kaizar/128.jpg	-76244	kro179	--- []\n	2014-01-05 05:31:49.623388	2014-01-05 05:31:49.623388	2014-03-03 23:40:13
3	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg	-67146	vgj671	---\n- javascript\n- erlang\n- elixir\n	2014-03-25 02:24:51.603829	2014-03-25 02:24:51.603829	2014-02-21 14:10:33
21	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg	-64538	tpn552	--- []\n	2014-07-09 04:20:54.653351	2014-07-09 04:20:54.653351	2014-01-21 06:01:37
30	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg	-90934	ilt992	--- []\n	2014-07-16 12:59:27.675528	2014-07-16 12:59:27.675528	2014-03-14 12:14:05
27	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg	-86102	fcp902	--- []\n	2014-01-27 06:30:17.668106	2014-01-27 06:30:17.668106	2014-03-05 12:30:30
47	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg	-34958	cpe190	--- []\n	2014-06-14 21:50:54.716903	2014-06-14 21:50:54.716903	2014-03-27 17:26:38
8	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg	-13355	mgs698	--- []\n	2014-04-18 14:44:58.614914	2014-04-18 14:44:58.614914	2014-01-31 15:26:18
37	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg	-25100	zsi982	--- []\n	2014-05-26 10:23:46.69361	2014-05-26 10:23:46.69361	2014-02-26 22:02:33
14	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg	-40252	nza220	--- []\n	2014-05-13 02:00:31.633136	2014-05-13 02:00:31.633136	2014-04-14 19:50:14
11	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/fahdos/128.jpg	-19770	ghu246	--- []\n	2014-06-30 09:38:33.626074	2014-06-30 09:38:33.626074	2014-02-24 17:15:57
28	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg	-74956	ozm198	--- []\n	2014-02-05 12:19:18.670548	2014-02-05 12:19:18.670548	2014-02-20 02:40:40
2	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg	-66176	yea934	---\n- ruby\n- haskell\n	2014-04-17 03:40:07.601364	2014-04-17 03:40:07.601364	2014-04-09 18:22:29
32	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg	-94946	nlh116	--- []\n	2014-05-24 05:56:44.681222	2014-05-24 05:56:44.681222	2014-01-24 12:02:22
45	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg	-5354	ozc511	--- []\n	2014-07-22 04:28:03.712395	2014-07-22 04:28:03.712395	2014-03-01 19:27:40
48	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg	-14287	mbx524	--- []\n	2014-04-07 13:52:13.719457	2014-04-07 13:52:13.719457	\N
1	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg	-448	kib787	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-07-09 03:13:08.587873	2014-07-09 03:13:08.587873	2014-03-26 05:21:18
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- PostgreSQL database dump complete
--

