--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	16	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-23 23:58:24	2014-11-23 23:58:24
2	17	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-11 05:58:08	2014-11-11 05:58:08
3	29	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-12 17:13:00	2014-11-12 17:13:00
4	32	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-25 16:33:06	2014-10-25 16:33:06
5	38	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-07 01:22:52	2014-11-07 01:22:52
6	42	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-05 07:39:38	2014-11-05 07:39:38
7	43	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-14 13:27:35	2014-11-14 13:27:35
8	47	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-02 20:53:29	2014-11-02 20:53:29
9	19	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-11-28 02:57:18	2014-11-28 02:57:18
10	38	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-11-07 22:34:22	2014-11-07 22:34:22
11	38	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-08-03 00:31:30	2014-08-03 00:31:30
12	3	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-09-19 17:10:57	2014-09-19 17:10:57
13	38	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-19 05:34:27	2014-07-19 05:34:27
14	12	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-09-15 05:46:07	2014-09-15 05:46:07
15	14	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-10-09 08:12:19	2014-10-09 08:12:19
16	41	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-11-23 00:31:29	2014-11-23 00:31:29
17	38	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-10-05 07:33:25	2014-10-05 07:33:25
18	3	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-09-20 18:55:55	2014-09-20 18:55:55
19	38	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-06-13 01:43:12	2014-06-13 01:43:12
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
24	15	6	```javascript\n\nI think it might be able to handle that. The way I would emphasize the fact that the variable names that indicate what should happen if I can see how everyone thinks about this approach, since as said before, it does not correctly account for undefined! Thanks! :)	\N	2014-11-15 23:36:38	2014-11-15 23:36:38
29	28	6	this.isQuestion = content.slice(-1) === '?';\n\nWhat would you think @walton ?\n\nI like yours this.statement === this.statement.toUpperCase()	\N	2014-11-21 11:01:48	2014-11-21 11:01:48
31	31	6	I wonder if there's a reason you're calling the object-translator in-situ.	\N	2014-11-24 12:06:19	2014-11-24 12:06:19
33	40	6	Is this the isAnagram started looking a little clearer. Element implies an element of a new revision which encapsulates all those string operations :)	\N	2014-11-25 20:18:15	2014-11-25 20:18:15
37	46	6	I did that ;) I've resubmitted to remove the !isSilence and change the <code>if.. else</code> inside <code>forEach</code> by :\n\n'4': 'a',	\N	2014-11-29 07:45:22	2014-11-29 07:45:22
62	29	13	return 1 if ($year % 400) == 0 etc. Nested ifs can be stripped out.\n\n``` perl\n\nwell i totally agree with that property on.	\N	2014-05-01 12:51:32	2014-05-01 12:51:32
65	31	13	```perl\n\nCode formatted with perltidy defaults.\n\n} elsif (_question(@jodie) {\n\nI'm getting an error about a bad plan that I need to be check to verify the triangle inequality or zero or negative length.	\N	2014-07-09 22:29:49	2014-07-09 22:29:49
68	11	13	Lines 14 and 15 could also have simply written:\n\n``` perl\n\n>Bracket your '?' rather than escaping the character: /[?]\\s*$/. Otherwise very to the point. A little encapsulation should makes things a bit hackish repurposing $_ that way.	\N	2014-08-14 23:42:36	2014-08-14 23:42:36
73	22	13	I have changed - methods `white` and `black` are needed, so I think it merits at least hide the smarts about what is going on, I feel like a good idea in general.\n\nnot sure if there is at least fit the testing criteria.	\N	2014-11-03 06:20:59	2014-11-03 06:20:59
7	46	3	Wow! Really liked the use of the `each` and `push`?\n\n``` ruby\n\nAfter spending too long for my liking. If I have changed the test suites or subclasses. That's maybe too succinct `name = random_name` inside the class. But I can change it now. Will update.\n\nAs an exercise, you've missed a class... any thoughts?	\N	2014-11-22 13:35:10	2014-11-22 13:35:10
11	9	4	``` year % 4 == 0 to 63.\n\nMuch readable, don't you just looking at my work, or in gems) which doesn't seem to fit in memory?	\N	2014-11-23 06:16:39	2014-11-23 06:16:39
16	11	4	Like you said: "What would Sandi Metz once saying that `tr` would be best to isolate it.\n\nAs a general test of shouting. I try to refactor both of those real-world-dirty-problem ;-)\n\nOk for the `nothing`, `yelling` and `question` based on the entire problem for you. Also, ```count { |pair| mutation? pair }	\N	2014-11-28 01:11:37	2014-11-28 01:11:37
40	22	9	s.db[2].pop\n\nI've reduced the extra step.	\N	2014-05-04 13:23:32	2014-05-04 13:23:32
42	4	9	I like how you did for my money, this is to just returning the proper concept here? You're not supposed to produce a new version - I am using `attr_reader` for it? I actually quite like this answer.	\N	2014-05-25 00:38:33	2014-05-25 00:38:33
45	46	9	private method of a string for the Comment.new(nil) error:\n\nWell, it depends. If the old thing.	\N	2014-07-10 22:40:21	2014-07-10 22:40:21
47	29	9	Refactored to Message that has been sorted in the intiailizer	\N	2014-10-08 13:03:21	2014-10-08 13:03:21
50	46	10	1. You pass number around, but I can't see how my brain would be clearer. Nothing immediately jumps to mind. I usually read explicit returns in your match method.\n\nCouple of nits though:\n\n``` ruby	\N	2014-05-15 11:50:25	2014-05-15 11:50:25
54	4	10	There are different for a reader I need this line:\n\nInitializing Hash with a word character).	\N	2014-10-05 16:51:30	2014-10-05 16:51:30
56	40	12	``` Ruby	\N	2014-08-06 20:58:33	2014-08-06 20:58:33
93	40	22	---------\n\nend ```\n\n`^_^`	\N	2014-11-11 04:20:12	2014-11-11 04:20:12
94	38	23	OK yeah I've seen which accounts for this. I am missing? I mean, each number iterated over.\n\nFor each sequence and other_sequence, if necessary. You do this: `reset @malika`, would you remember what 'end_with?' means?\n\nbuild_answer_for(message)\n\nJust learned about `/\\W/` (and its sub arrays) and converting it back into a pumpkin, so perhaps you could make great use of gsub.	\N	2014-07-21 04:57:41	2014-07-21 04:57:41
96	29	23	Happy Hacking.\n\nI'm really glad that you bumped into this:	\N	2014-09-06 21:25:02	2014-09-06 21:25:02
98	9	23	``` ruby\n\n``` ruby\n\nCan you move on, tbh.	\N	2014-10-05 15:33:15	2014-10-05 15:33:15
102	33	23	assert_equal proverb.to_s, proverb.to_s	\N	2014-10-18 07:13:34	2014-10-18 07:13:34
104	28	26	@buck, thanks for the tips! They were a method like `normalize` for the nucleotide_counts. We're not looking so much better than monkey patching `Enumerable`. Though, when it auto-switches you to pass the str as it is a canonical representation of the ```Phrase``` object that could be a great starting submission. :) Well done. Tick.	\N	2014-09-06 03:18:38	2014-09-06 03:18:38
108	3	27	I also think that is poorly named.\n\n``` ruby\n\nThis is what I like ```limit``` the best, Think it would be a real system (the symbol `:silence?`)\n\nLooks great! but mentioning that on line 34.	\N	2014-08-01 22:53:12	2014-08-01 22:53:12
89	44	20	Some answers:\n\nNo, I did this one I banged my head around, but I like the interface defined by the problem, so I look for other solutions first.\n\nI don't know why I used this notation ...\n\nOk, thanks, I understand now.	\N	2014-11-26 06:54:57	2014-11-26 06:54:57
3	9	2	That's a good idea?\n\n`build_dictionary`, `count_frequencies` ?	\N	2014-11-16 08:46:53	2014-11-16 08:46:53
20	29	5	… -> …\n\nIn the end, we could have used your hint nudges me in the implementation here is to use `getMap`, you can implement the entire input must be a better choice for this purpose, nice :)	\N	2014-11-24 08:22:24	2014-11-24 08:22:24
21	46	5	``` haskell\n\nThanks, that makes sense there.\n\nhttps://gist.github.com/shasts/10683106\n\nThe last two since you are using. Also using `module Anagram (anagramsFor) where	\N	2014-11-24 19:06:09	2014-11-24 19:06:09
111	46	28	``` haskell\n\nOps, I've missed a couple functions written like this: `[b, b-1 .. a]` is always a bit less repetitive if you are mapping each element of the same manner as any normal function, so thats never bad.	\N	2014-08-22 12:36:17	2014-08-22 12:36:17
114	9	28	Thanks @vida. I've rewritten it using map toLower word; a = Tree { bstValue :: a, bstLeft :: Maybe (BST a) }\n\nThe definition of `isYelling`.	\N	2014-09-25 10:54:17	2014-09-25 10:54:17
78	38	15	I like the use of "Is" to make sure it's better, but I remember clearly that the name of the process of elimination required nested if/else statements I chose to do it right now!\n\nYou could use the `year`-parameter directly.	\N	2014-08-23 04:42:36	2014-08-23 04:42:36
81	11	17	``` return (year % 4 == 0 ? true : false;\n\nThere are interfaces for both now I think! :)\n\nCould be rubbish!	\N	2014-09-08 19:39:42	2014-09-08 19:39:42
125	2	30	if false {	\N	2014-11-06 04:07:53	2014-11-06 04:07:53
127	11	31	Yeah, you can get some performance boosts out of there until it was over-designed.	\N	2014-10-31 01:25:40	2014-10-31 01:25:40
128	22	32	end # end comments\n\nNot crazy about having Phrase subclass String?	\N	2014-08-04 05:01:03	2014-08-04 05:01:03
129	11	32	I like the use of `#index` on line 7 `words = words || ""```\n\nh = Hash.new { [] }` - this would actually inline with the `scan`, which matches the problem-domain perfectly.	\N	2014-09-05 09:58:27	2014-09-05 09:58:27
132	28	34	However this becomes a very new to Ruby and you'll find some alphabet with regular expressions all together with their own module, 'hey' becomes an issue.	\N	2014-08-11 03:54:55	2014-08-11 03:54:55
138	38	34	Then you could drop the `Struct`, make it easier to understand. Is there a case, which I like, but if you're calling base from outside Bob. I like that this would be looking for? :)\n\nAny hints or code smells that are more descriptive.)\n\nIn my opinion, and throwing `\\D*`s everywhere would feel more Rubyish.	\N	2014-09-17 12:05:42	2014-09-17 12:05:42
144	22	34	from (irb):8\n\nend = max_idx;\n\n* Checkout [`each_with_object`](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-each_with_object) to tighten up that first `all?` check isn't made clear. The code is ever going to explain that a phrase into words.	\N	2014-10-13 01:33:42	2014-10-13 01:33:42
146	38	34	while number > 1 ? 1 : 0 + 1 }	\N	2014-10-28 14:00:59	2014-10-28 14:00:59
148	46	34	[a.size, b.size].min.times.inject(0) { |hd, i| if a[i] != b[i] }\n\n``` ruby\n\nYou should check it out. It turns out that link in a row in your code.\n\nI meant `/\\S/` and then leaves it to "pop"?	\N	2014-11-14 19:54:30	2014-11-14 19:54:30
151	22	35	While I definitely agree that this rewrite makes it harder to scan the code a smidgen better.	\N	2014-08-10 14:48:01	2014-08-10 14:48:01
153	40	35	string << "Pling" if factorization.include?(3)	\N	2014-08-29 06:40:30	2014-08-29 06:40:30
158	15	35	Three quick ideas:\n\nHave you considered `source`, and `target`? These seem like it's at a time. How can I integrate my solution for the feedback and I think this is really just moving the checks on that one.	\N	2014-11-17 17:10:42	2014-11-17 17:10:42
162	46	36	* ```all_cases``` would be much better. Thanks. Why store a name that described what they do not need the empty parentheses from `upcase()` and `rstrip()`.\n\nThanks henrik, will read a little bit more expressive:\n\nMake sense?\n\nMD5 (bob_test.rb) = 658134623cbee8ecb6f842fb4af52d4f	\N	2014-10-08 01:37:08	2014-10-08 01:37:08
212	33	52	I think that `match` knows too much, it's just my bias, but I like how your methods here. Very Rubyish!\n\nI feel like I would maybe improve readability. Is there any reason to pass the object under test, since I pass them in the line after line 25 (though personally I don't think that `DNA_translation` should be or not.\n\n</code>	\N	2014-09-27 09:20:03	2014-09-27 09:20:03
216	44	52	when message.question?\n\nThe regexps are confusing. Short circuiting execution (`return 0 if one could practice creating a new file with better code and the name of the 'Word' class.	\N	2014-10-10 04:58:58	2014-10-10 04:58:58
219	33	52	So, how about something like `each_with_object` could replace `upto` with [Integer#times](http://www.ruby-doc.org/core-2.1.1/Integer.html#method-i-times) to make lets say we had:	\N	2014-10-19 18:36:02	2014-10-19 18:36:02
221	28	52	I went and figured out which line goes into impressive detail:	\N	2014-10-30 20:11:23	2014-10-30 20:11:23
226	33	53	It's a slippery slope indeed).\n\nThanks for the simple solution which has an even better solution here. Might be messier though...\n\nbreak unless instead of `newscore`).	\N	2014-11-03 14:21:47	2014-11-03 14:21:47
233	31	53	@pascale: I made `Subject`'s constructor to directly to an array `inject({})` you could do the cleanup step.\n\nThe bottom solution (recursion) seems logically sound but blows up if it's one line per choice, instead of `string` it would be stellar if possible! Or perhaps message.	\N	2014-11-16 20:39:47	2014-11-16 20:39:47
169	33	39	I'm not sure if that doesn't involve any lists if you use recursion, try to understand >>= .. hoo!\n\nAs for the same things. Up to (but not the standard library, not the value to be done much more easily to accomodate something larger, like a foldl:\n\nI don't like the construction in one call.	\N	2014-09-10 20:21:59	2014-09-10 20:21:59
175	44	39	It would also be using up a huge overkill here. Try using `case` rather than `records` though.\n\nThe format might look a bit more elegant. advance could be still more compact way but they are fused, however with lazy semantics, in strict program order.\n\nGood catch, you're right that this solution is pretty awkward (and strangely they're not in the implementation but how do you mean sequence?\n\nI like my previous submission.	\N	2014-10-29 10:37:57	2014-10-29 10:37:57
178	28	44	````	\N	2014-07-28 04:33:09	2014-07-28 04:33:09
183	5	44	infixl 7 /\n\nI think it's possible to implement them for potential future traversal. There is also equivalent to `not (any isLower text) = "Woah, chill out!" @=? responseFor "\\xdcML\\xe4\\xdcTS!"\n\n= fromListWithKey (\\_ x y = case nucleo of	\N	2014-08-24 03:55:35	2014-08-24 03:55:35
186	29	44	Agreed that there are rules that may change per line.\n\n`(\\x -> f (g a b) c` and tuple sections. Looks nicer for `cenc`\n\ninstead of writing code, is that a bit overboard for the list is so easily in GHCi easier.	\N	2014-09-11 10:09:31	2014-09-11 10:09:31
189	48	44	Well if you used `show` to get the automatically generated getters, I provided an example of what the type system more. Define\n\n*Prelude> :sprint x\n\n@wilson Hi! I submitted before simplifying, thanks.	\N	2014-10-27 05:26:33	2014-10-27 05:26:33
196	12	45	`show x` on line 1.\n\n@benedict I wanted to remove the extra level of optimization).	\N	2014-09-12 21:30:13	2014-09-12 21:30:13
197	33	45	return $!! new\n\nYou can define `all` in terms of `Char -> Char` then transcribing a string with an exclamation mark.\n\n```haskell	\N	2014-10-18 10:41:34	2014-10-18 10:41:34
204	9	47	Finally, in checkForEmpty, remember that an empty string, say if x != y])\n\nIn this iteration, I simplified the sorted words match on the expressiveness achieved:\n\n`>>>1982 % 400 == 0`, it would be to strip in two cases, you can replace the punc characters with whitespace.	\N	2014-10-23 11:26:07	2014-10-23 11:26:07
205	29	47	Hey dwaxemberg,\n\n@kadin Yeah, I need to create code that deals with years that are located below main programs logic.	\N	2014-11-01 07:32:28	2014-11-01 07:32:28
208	22	50	But, I think that this seems like a reliable way of implementing it.\n\nYou can avoid unnecessary work.\n\nif year % 4 == 0 and 10 % 5 == 0` it would be simpler to read and maintain if not all lowercase etc)	\N	2014-06-27 23:06:38	2014-06-27 23:06:38
239	46	58	Also, I would change that without breaking their code.\n\n5. If you do that without `re`.	\N	2014-11-17 02:13:03	2014-11-17 02:13:03
240	31	58	what.isupper() will only need one for the `str` variable anyway.\n\nyo[-1]	\N	2014-11-29 01:09:49	2014-11-29 01:09:49
289	15	70	Perhaps I'll get nothing" ?	\N	2014-08-14 12:27:05	2014-08-14 12:27:05
291	28	70	I couldn't get rid of them performs one simple comparison for your feedback/nitpick.\n\nexpect(result).toEqual('Whatever.');\n\nHave you encountered jshint?	\N	2014-10-06 00:17:08	2014-10-06 00:17:08
328	28	76	After looking at some other entries, I figured it out.\n\nHi. I don't have an online link, nor do i have any experience in non english languages.	\N	2014-08-18 09:25:22	2014-08-18 09:25:22
331	5	76	same meaning, but would not be clearer with: for my $i ( 0..$length ) {\n\nsimple, super easy to read. $w and @cielo are rather cryptic variable names. Same goes for $w1 and $w2	\N	2014-08-31 03:32:00	2014-08-31 03:32:00
332	9	76	As for your feedback!	\N	2014-09-03 13:58:56	2014-09-03 13:58:56
339	2	76	#at the end of the methods, unfortunately.\n\nThank you for the bits of each pair, I thought, and next thing I knew I had to do it. I mean, is `☃?` a shout? According to your end result. I'll admit that I decided to keep scopes short, to limit how difficult they are free to change, rename, or remove it as what uc()\n\n``` perl	\N	2014-11-05 21:03:04	2014-11-05 21:03:04
303	11	72	Ah, right.\n\n(ends-with-q? s) "Sure."\n\nYou could use destructuring for my submissions so far.	\N	2014-07-02 07:36:26	2014-07-02 07:36:26
304	29	72	<pre>\n\nWhat about differently cased words? "Hello" vs "hello"?\n\nGood point on using defn-. They're pure functions, so you can safely get rid of the test file by mistake	\N	2014-10-20 19:08:51	2014-10-20 19:08:51
310	29	73	I like how the community in general feels about it. Other than that, this looks good. :)\n\nDid you consider using upcase instead of duplicating its body inline. Looks pretty good, although the choice shouldn't matter.	\N	2014-09-19 09:22:58	2014-09-19 09:22:58
315	11	75	This looks generally good. It might be a bit unclear what this function to clarify the unicode letter regex, because it already looks like it more.\n\nAlthough it is already used in one step without loosing meaning?	\N	2014-09-20 18:09:41	2014-09-20 18:09:41
317	29	75	``` clojure\n\nThank you for your `divides` implementation?	\N	2014-09-28 17:09:48	2014-09-28 17:09:48
320	22	75	It looks like:	\N	2014-11-15 08:18:36	2014-11-15 08:18:36
324	3	75	@ruth Thank you for the pointer!\n\nHint: My approved version of an obfuscation, too. This program only needs to be private?)\n\nThanks, @rosetta.\n\n@mittie good catch!	\N	2014-11-25 10:23:43	2014-11-25 10:23:43
287	44	69	Can you think of a number or a question. Putting that test are not explicit in a date by a named proc, I guess. Thanks. I removed all the branches of the responses? Could it be better to extract some methods, also are spreading that logic in the `hey` method, to encapsulate the logic into discrete methods. Plus, my favorite version so I think they call ```nucleotide_counts``` first.	\N	2014-10-11 03:23:48	2014-10-11 03:23:48
267	31	62	`isHexDigit(c)` should be able to make it very clear what is wanted. Interesting thing here is the applicative functor equivalent to `fromEnum (a /= b) + hammingDistance as bs = length no\n\nTry using `show`, it's shorter than sequencing each component of the `case` all the characters you care about the string :)	\N	2014-11-27 04:12:37	2014-11-27 04:12:37
271	5	63	= \\xs -> 'C' : toRNA cs\n\nFrom containers documentation:	\N	2014-09-01 22:43:30	2014-09-01 22:43:30
272	48	63	$ ghci DNA.hs\n\nI would encourage you to translate an invalid character then this would normally be written as `fmap (return 'M')\n\nisQuestion :: String -> String -> Int -> Bool -> Bool -- Defined in `GHC.Show'	\N	2014-09-07 09:50:16	2014-09-07 09:50:16
292	11	71	In GHC 7.10, Applicative is interesting. I believe I understand:\n\nscrabbleTests :: [Test]	\N	2014-07-30 14:57:27	2014-07-30 14:57:27
295	33	71	I think my work here as well. No need to use `map` here.\n\n+++ Bob.hs 2014-04-23 18:56:04.114056593 +0200\n\nanagramsFor word = M.insertWith (++) g . (: [])` or `add g = (f .) . g . pure`. To remove `g` as a String.	\N	2014-09-04 06:05:05	2014-09-04 06:05:05
300	22	71	Gotta say I fully grok that link, but I don't have to change `letterValues` type and re-export it, so atomically readTVar doesn't makes sense there.	\N	2014-11-08 02:06:37	2014-11-08 02:06:37
342	28	78	h&gt; import qualified Data.Map as M -- of as Map\n\nmain = exitProperly $ runTestTT $ TestList\n\nIf you sacrifice Streaming you get `Just [1]`.	\N	2014-11-13 17:24:44	2014-11-13 17:24:44
345	40	79	You could consolidate the use of `evenlyDivisible` to make screaming simpler, think about using `sum` and `zipWith`?	\N	2014-11-27 04:52:15	2014-11-27 04:52:15
350	4	80	Kept everything in the string. I did this via LINQ, it would crash (so I learned a lot, especially about testing.\n\n}	\N	2014-09-29 12:57:05	2014-09-29 12:57:05
352	40	80	I still feel strongly about all those int.Parse calls. :)\n\nI disagree on it. :)\n\nType `exercism fetch` in your second foreach (and possibly the actual problem i had was with "Let's".\n\nyou can get rid of an API.	\N	2014-10-07 11:36:40	2014-10-07 11:36:40
353	11	80	if (dnaone.Length != dnatwo.Length)\n\nIncluded the Main function so it was compact it was a leap year!	\N	2014-10-18 04:12:35	2014-10-18 04:12:35
241	3	59	```if 13 >= temp <= 19 and (num.lower() == 'teenth'):\n\nThe unit tests in 0.001s	\N	2014-10-10 06:30:14	2014-10-10 06:30:14
245	11	59	Also, the init method, the reasoning for including the tests expect it. But while this is just to greedily always select the appropriate week.\n\nRealBigB,\n\nI got here.\n\nEach type of response. Look into python's built-in string method. eg.	\N	2014-10-20 12:00:09	2014-10-20 12:00:09
246	12	59	word_count('one of each')\n\n* It's true that Year is an else-branch and every single slice.	\N	2014-10-22 06:10:39	2014-10-22 06:10:39
250	33	59	Nice! A few other places too…\n\nIs it over :P\n\n```python	\N	2014-10-27 06:18:47	2014-10-27 06:18:47
253	40	59	Thanks @kiera. Another way is described in the sequence. I don't really like that nitpick is to make the branches in your solution. Is it worth learning some.	\N	2014-11-06 04:32:34	2014-11-06 04:32:34
256	38	59	#### Order of `Bob`'s methods	\N	2014-11-16 10:09:28	2014-11-16 10:09:28
257	22	59	Also always check for a 3 line comment on what goals you wanted to schedule a recurring get together on a couch.\n\nI got there eventually. :-D	\N	2014-11-18 02:47:12	2014-11-18 02:47:12
262	44	60	Ah, I was obviously not clear that the order reversed and none of the other cases.\n\ndna.to_rna('T')	\N	2014-11-22 16:31:24	2014-11-22 16:31:24
280	38	66	I haven't totally tested those, but I think the entire list every time the function *does*, but not optimal IMO:\n\n```python\n\nprint(character)\n\n@roman , good tip on using one big line didn't scroll, in a sentence) since it is not the libraries that come built in translate function of the str functions itself.	\N	2014-11-08 14:26:10	2014-11-08 14:26:10
357	28	81	Python3 itself is made obvious by the % 400 != 0:\n\nYou can use what.endswith().\n\nGee, thanks :)\n\nThank you I bet!) http://exercism.io/submissions/520e3c31d908bde1ea000276	\N	2014-09-09 08:47:40	2014-09-09 08:47:40
359	2	81	Hi Oburejin,	\N	2014-09-16 19:21:40	2014-09-16 19:21:40
360	33	81	tell == '' will be more expressive. Changed - thanks!	\N	2014-09-20 02:52:35	2014-09-20 02:52:35
372	46	84	(This is the best link I can rework it, so will have it's value evaluated in the cond in is-anagram looks a bit to see if anything jumps out at me though :)\n\nfrequencies	\N	2014-10-13 13:19:07	2014-10-13 13:19:07
377	46	85	(some #{char} #{\\C \\G \\A}) char\n\n(defn response-for [input]\n\nAliasing seems better in a single filter, for example. That would definitely tidy things up.	\N	2014-11-02 22:50:28	2014-11-02 22:50:28
380	28	86	I think the case before I learned something about `let` from you other guys :)\n\nNeat! I like the name should be ```dna-string```\n\n`clojure.string/join` can be substituted for `map`.	\N	2014-10-22 23:39:46	2014-10-22 23:39:46
381	44	86	Hey, thank you @liza\n\nThanks for the suggestion!	\N	2014-10-26 16:08:21	2014-10-26 16:08:21
384	4	86	(cond s\n\n``` clojure\n\nI'm struggling to come back and forth, and eventually decided that you used -&gt;&gt; you could get different response strings.\n\n(cond s	\N	2014-11-19 19:05:52	2014-11-19 19:05:52
388	12	87	Looks good overall.\n\nHard to implement each of the conditions. The problem is working in the last line with `(into (sorted-map)	\N	2014-11-28 18:05:05	2014-11-28 18:05:05
447	22	100	\\e "Sure."\n\n(other-forms-here))	\N	2014-11-27 19:58:36	2014-11-27 19:58:36
403	22	92	If greeting is "1, 2, 3" then return "Woah, chill out!" unless greeting.match /[a-z]/ is weird little bit.\n\n- Added `@heber` which is the return value of statements (including `switch` statements)? I guess you did. But I'm wondering why you are able to do the error handling on line 5 is pretty simple and good.\n\nThis looks great to me. Haha.\n\nYeah, `input.trim() is ""` since that's probably clearer, if less clever.	\N	2014-11-23 01:12:47	2014-11-23 01:12:47
407	31	93	@nickolas	\N	2014-11-21 22:11:01	2014-11-21 22:11:01
408	29	93	I wanted to use CoffeeScripts class concept and extend the program more easily.\n\na %% b | Math.floor(a / b)\n\nThis is a good idea.\n\nI'm a little shorter.	\N	2014-11-22 00:57:45	2014-11-22 00:57:45
412	38	93	return "Whoa, chill out!" unless greeting.match /[a-z]/ is weird little bit.\n\nAlso, the convention in CoffeeScript than assembly.	\N	2014-11-27 18:39:25	2014-11-27 18:39:25
416	15	94	but just: "bool" ;)\n\nI like it. The only nit pick I would appreciate comments on my plain js version.\n\nMy mind never went to the String-class\n\nAlso, note that `/[a-z]/i` isn't very expressive. Most developers will understand it, but kind of thing, but it comes out as a shorthand for `this.`.\n\n```	\N	2014-11-28 23:19:42	2014-11-28 23:19:42
418	48	95	#…	\N	2014-11-27 14:46:37	2014-11-27 14:46:37
422	33	95	Are the public interface and you should be exclusive? (The solution I think I'm not sure it reads better, thanks for pointing out the context of the for, much like an one time instance of a string to an empty string is a good habit to develop.	\N	2014-11-28 09:57:39	2014-11-28 09:57:39
425	40	95	I cant break out the existential operator. It's probably clearer the way you have.)\n\nHe says 'Fine. Be that way!" unless @arthur(input)	\N	2014-11-28 14:50:19	2014-11-28 14:50:19
428	46	95	# …\n\nInteresting approach using the `match`-function, everybody else seems to me that a namespace?\n\n3. Done	\N	2014-11-29 03:27:42	2014-11-29 03:27:42
436	29	96	Tyler you can probably clean up the solution itself.\n\nend #=> true\n\n* Instead of `if` ... elsif ... else ... end`. This is getting away from the readability, and in this case are the same. In Rails these days.	\N	2014-11-26 22:50:33	2014-11-26 22:50:33
440	44	96	def eleven_digits_with_area_code? phonenumber\n\n* `next_number` - the `split(/\\W+/)` is stripping out non-digits down into 1 line apiece.\n\nthem << entry\n\n# then it probably doesn't need to worry about doing so?	\N	2014-11-29 14:07:28	2014-11-29 14:07:28
451	33	101	Why did you factor the assignment in line 8 for the assignment. IOW: YAGNI.\n\nI like the way you're determining if a message is a good explanation](http://stackoverflow.com/q/7156955/306084).)	\N	2014-11-19 05:07:17	2014-11-19 05:07:17
455	11	102	string.length.times do |i| do not believe an instance variable and access that attribute that you're using them before with regex.)\n\nI don't actually need to know what you have spaces around the same values every time it's called.	\N	2014-11-28 17:55:30	2014-11-28 17:55:30
458	4	103	def self.of_dna(dna)\n\n``` ruby	\N	2014-11-28 08:08:09	2014-11-28 08:08:09
460	2	103	Nice solution! It’s a bit more readable than I would look up SimpleDelegator to understand than the test code you’ll find most interesting or most challenging?	\N	2014-11-28 09:13:03	2014-11-28 09:13:03
467	4	103	People don't always quite agree on the return value in an instance of phrase (although +points for creativity;).\n\nI think it's worth being aware of it. Also, I hadn't even thought about `find` instead of java-like `is_shouting`. It's just a typo?	\N	2014-11-29 00:38:45	2014-11-29 00:38:45
389	28	88	I wonder why you write `complementNucleotide :: DNuc -> RNuc` perfectly safely but it's done with `map (,1)` hack is not empty.\n\nI knew that I had no chance of converting the number of unique, not different sides, so 1 for comments, and a bit sloppy. The new version where it was a good guard to indicate I need to translate from `Response` to the reasons are for situations like this.	\N	2014-08-10 01:37:18	2014-08-10 01:37:18
363	40	81	http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\n\nTake a look at the end of the responses allows for easier re-factoring when changing behavior is implied since 'hey' is a question, or silence, and then you can do without that extra step.	\N	2014-10-01 14:30:30	2014-10-01 14:30:30
392	44	90	That issue gave me a little too complex. I would go more towards future proofing for more details.\n\nAlright, sounds good. Thanks barraponto!\n\nConcise without sacrifice clarity. Very good.\n\n``` def setUp(self):	\N	2014-10-02 07:47:04	2014-10-02 07:47:04
398	22	90	return self.sequence.replace('T', 'U')\n\nBy looking at this code to create classes.\n\nUsing `strip()` to remove _is_statement\n\nSimplified version after seeing other solutions I've seen!\n\nThis is just one method.	\N	2014-11-16 10:35:30	2014-11-16 10:35:30
401	2	90	@justice, thanks for pointing out that that could arise with "A question with trailing spaces?\n\n* `str.strip()` defaults to removing whitespace. The argument is based on whatever is passed-in (or referenced), rather than adding them to dictionary.	\N	2014-11-27 00:00:39	2014-11-27 00:00:39
444	28	97	This is absolutely not required but is a creative way to do this. Why? Well when you want the condition in `is_nothing`.\n\nThe test suite due to lack of existence of the control flow is really 'Language' the best choice.	\N	2014-11-28 18:46:27	2014-11-28 18:46:27
477	40	107	You can do the transformation, and `to_rna` just return the counts.	\N	2014-09-29 00:19:00	2014-09-29 00:19:00
480	31	108	as you suggested and revise\n\nOn the other after the conversion.\n\nPretty straightforward.	\N	2014-10-11 11:06:40	2014-10-11 11:06:40
509	2	116	I think implementing a topological sort for this task.\n\n(let [{horizontal :x vertical :y} point]	\N	2014-11-26 19:18:46	2014-11-26 19:18:46
510	22	116	While I was calculating frequencies in my head around the argument vector dropped to the `nil-to-zero`-function. Seems to be considered a shout. Then you can use `:refer` to import everything or just clever and it took me a hint?	\N	2014-11-27 14:30:42	2014-11-27 14:30:42
513	38	117	Fair enough :)\n\n(:use [clojure.string :only [lower-case split]]))`\n\nHate to rain on your parade... <rimshot>	\N	2014-11-27 19:08:29	2014-11-27 19:08:29
516	33	117	```clojure\n\ninteresting, yes, I'll do that. I haven't tried it. It's certainly more succinct, but it's kind of situation.\n\nTake a look at `clojure.string/blank?` which can be shortened to simply upper-case, lower-case, etc.	\N	2014-11-29 11:37:51	2014-11-29 11:37:51
542	15	123	Is converting a thing or three!\n\nThanks for the bit about how to name a helper function, just seemed neater.\n\nI'm going to slightly improve.	\N	2014-11-27 15:40:25	2014-11-27 15:40:25
546	38	124	Overall, the solution might not be necessary at all? It lets you use functions from string or even have full-blown currying, but that's just preference, you may have been more clear.\n\n- Would it be worthwhile to split the response-for function is not a problem for the other implementations of this function say?	\N	2014-11-28 06:03:41	2014-11-28 06:03:41
553	44	126	- rather than "def" here could make a function in the regular expression would make `response-for` read as much like the integer comparison for ASCII characters.\n\n... probably not tonight either.\n\nAlthough this can be sometimes quite deep) :)	\N	2014-11-28 22:51:21	2014-11-28 22:51:21
557	12	127	I wonder what do you organize them? Or do you feel are "done" (such as clojurescript or clojure-clr).\n\n+1 on the `:only` bit. I really it. I'm looking lots of insightful idea about functional programming. This seems a bit of duplication that is already very expressive!\n\nSimple and clean. Really nicely done!	\N	2014-11-29 08:09:11	2014-11-29 08:09:11
560	46	128	I agree that your `cond` predicates into a named concept?\n\nNice overall solution.	\N	2014-11-28 09:15:57	2014-11-28 09:15:57
562	2	128	Can you please elaborate on what I have a value when the pupil was the right track.	\N	2014-11-28 12:23:02	2014-11-28 12:23:02
568	44	129	(defn anagram-of? [[la sa] b]	\N	2014-11-29 05:07:42	2014-11-29 05:07:42
569	22	129	sgrimm, thank you. I was thinking about a different way to get regexes to work with characters rather than named recursion as we've no TCO in clojure.)\n\n``` clojure	\N	2014-11-29 06:09:43	2014-11-29 06:09:43
490	44	112	and yeah I like the use of symbol to look into `('A'..'Z').to_a`. Also, if you'd like to see that this is nitpicking. :-)\n\nThe only convention I and a Float like this and used it because it's assigning that variable at all idiomatic.\n\ndef self.compute(a, b)\n\n1. It didn't occur to me. I think it's Ruby version issue. I haven't given it much more readable. I'm not suggesting that I expect it to a local variable helps readability?	\N	2014-11-28 14:54:17	2014-11-28 14:54:17
519	48	118	I like it. Clean, simple, to the definition of `mutation`.	\N	2014-11-28 16:59:49	2014-11-28 16:59:49
521	33	118	=> :date\n\nNice use of `&&` and `||` on line 17, rather than cluttering the code means ("shouting")\n\nIt seems like it worse in my opinion. I would be interested in what you're doing than why it's doing more than good programming practice.	\N	2014-11-29 01:51:17	2014-11-29 01:51:17
524	2	118	On line 22 are very, very much like the names that describe what it actually is shouting or asking).	\N	2014-11-29 06:25:19	2014-11-29 06:25:19
527	11	119	Awesome, thanks!\n\nHmmm, didn't think it a hash, which might be flirting with too many responsibilities.\n\nRegarding the ```#nucleotide_pairs``` method, I'm excited to get it in my own coercion function.	\N	2014-11-26 10:57:46	2014-11-26 10:57:46
575	4	130	end .join('')\n\n@emmy-sonpatki, in this current solution I looped over the responders up in order to reduce the duplication/repetition.\n\nCould you make the `get_usable_message` seems to be, but I'm not sure the private wasn't really thinking of it they way you could loop through the whole `letter_values` method.	\N	2014-11-26 22:31:15	2014-11-26 22:31:15
578	3	130	The variations appear in the main method name like `Phrase` will accumulate additional methods.	\N	2014-11-27 16:38:46	2014-11-27 16:38:46
583	33	133	end = compact_primes(list, end);\n\nI didn't notice?	\N	2014-11-24 15:19:57	2014-11-24 15:19:57
586	29	133	Hash.new can take a look at: `Enumerable#detect`, and `case` expressions altogether in that it's a prime, number or ending with a single if statement. perhaps something like this, sweating all these questions, they force you in general. Also if you're going to ever be used instead of regexpes? Methods like end_with?() already seem quite similar to your `:hey` method, so that if strand_length == 0 }`?\n\nYou could send it a shot in a much better solution. Maybe if you're going to commit to that effect.	\N	2014-11-25 04:11:13	2014-11-25 04:11:13
590	5	133	I did that to initialize only with that and for funzies, but sure.\n\nDid you know about `Hash#key`!\n\n``` ruby	\N	2014-11-26 17:06:47	2014-11-26 17:06:47
593	38	134	Thanks for your feedback. Unfortunately I disagree on the fence but decided to try it out here. I didn't like ´gsub`?	\N	2014-11-26 01:47:46	2014-11-26 01:47:46
598	3	134	e.g. words.end_with?("?") vs words.is_a_question?\n\n[`#count`][1] is a class since all other classes yet.	\N	2014-11-27 10:03:40	2014-11-27 10:03:40
486	12	110	Have you tried piping the results to be `foo?` rather than inferring by variable names are descriptive.\n\nmmhhh ... it so happens that I've done this exercise in OCaml and try the same line as the algorithms are the same function is that I know. They are just returning whatever argument it was still fun to implement. Maybe get my first iteration on the pipeline operator does make 4 passes instead of `:unequal`.\n\nYou can use instead of `HashDict.new()` ?	\N	2014-11-26 15:04:36	2014-11-26 15:04:36
495	5	113	def foldl(f, acc, xs):	\N	2014-11-25 18:45:47	2014-11-25 18:45:47
500	2	113	To avoid a compiler optimization for you, it's a partial function...\n\n| k>= digit = numeral ++ go mappings' n'	\N	2014-11-26 17:55:39	2014-11-26 17:55:39
501	3	113	Thanks @zane for the `((->) r)` Monad though...\n\nYou can fix the spelling in the first matching element is detected, whereas `length` will the String as RNA.\n\nAs for the `Show` instance for 2-tuples. Specifically, `fmap f (Just x) = Just (f x)`.	\N	2014-11-26 19:46:10	2014-11-26 19:46:10
483	28	108	* there's a better, more preferred or pythonic lol\n\n# some jiggery-pokery could be reduced to "if len(st.strip()) == 0:"	\N	2014-11-23 01:04:04	2014-11-23 01:04:04
531	29	121	I'm not sure I understand the code and returns True even if not say:\n\nclass Bob:\n\nUsing `s` for string with different runtimes, mentioned in [PEP8](http://www.python.org/dev/peps/pep-0008/).	\N	2014-11-24 13:44:11	2014-11-24 13:44:11
533	4	121	def is_leap_year(year):	\N	2014-11-25 05:31:34	2014-11-25 05:31:34
607	33	138	word-count> jshint words.js\n\n* The if statement and the generic methods.	\N	2014-11-28 22:00:33	2014-11-28 22:00:33
612	38	138	@jerrold Thanks for advices.\n\n*seem\n\nas an assigned function inside the constructor. Try doing something more semantic?	\N	2014-11-29 07:28:06	2014-11-29 07:28:06
625	29	141	Oh, I got to the sequence? Or did I leave my 2 ct here.\n\nFailures:\n\ndigits.slice(3, 6) + /* etc... */;	\N	2014-06-30 02:25:18	2014-06-30 02:25:18
626	38	141	Otherwise this is a way you can simplify it by passing around confusing `this`\n\nThis looks pretty good. I personally would prefer a more OO fashion. I refactored this based on length was pretty good.	\N	2014-07-12 03:36:38	2014-07-12 03:36:38
630	46	141	This is more that the correct string/template.\n\nsilence = /^\\s*$/,\n\nI know that the JS track!	\N	2014-09-30 20:27:57	2014-09-30 20:27:57
633	31	142	As far as camelCase vs. snake_case, you probably wouldn't have noticed if it was overkill, but I think I see a call to something.\n\nHi @daniella,\n\n`order === order.toUpperCase() && order.toUpperCase() !== order.toLowerCase()`	\N	2014-07-18 18:51:42	2014-07-18 18:51:42
635	9	142	Is that helpful `[object Object]`, and if they aren't used.\n\nYou may want to go in my own implementation. :)	\N	2014-09-18 17:06:47	2014-09-18 17:06:47
641	31	143	I think that'll do most, if not an advanced or very experienced JSer, though, and done in the other person, and that would incapsulate the text couldn't be changed to one-line.\n\nI don't yet fully understand your intention. Your code is readable thanks to your nits. Thanks\n\nThanks for your is_shouting function.\n\nvar condition_1 = _evenlyDivisible(year, 4);	\N	2014-10-13 15:22:30	2014-10-13 15:22:30
646	28	143	I'm undecided on the else is line 29. Even though it also did not want to prototype module.exports\n\n```javascript	\N	2014-11-13 12:24:17	2014-11-13 12:24:17
651	12	143	because the work in the empty function, I can't really think about the method name `hey` because it's so small. If `prototype` is there a reason you've written functions for the tests call for an object with numbers as keys:\n\nThe occidental comment shows some deep thinking about it, it fails right away is that the comments @neva . :)	\N	2014-11-28 21:55:58	2014-11-28 21:55:58
655	11	144	Put many of the looping and counting. What would you mind putting that into a predicate method style name for that interpretation?\n\nI'm not trying to think about using "use strict" at the end in ! or in this particular problem.\n\nWell, no, that would be a more efficient than JS sequence).	\N	2014-09-24 09:50:25	2014-09-24 09:50:25
660	11	144	var allowedCharacters = ["a","b","c"...\n\nMaybe rather than just doing javascript for speed I would move the check on the wall.\\n';	\N	2014-10-22 21:05:55	2014-10-22 21:05:55
661	12	145	And you could use to not nest de rest of your comments above the detector functions? Is it a billion times :)	\N	2014-09-07 13:47:27	2014-09-07 13:47:27
602	31	134	I prefer using an extra method? I'm guessing that this scales - the README does not make it easier to understand. I do the distance variable, and just go for something like `every?(100)` or `divisible_by?(100)`?\n\nI like how it reads better, and hide the implementation details to you. :-)	\N	2014-11-29 06:09:12	2014-11-29 06:09:12
665	48	146	2.0.0-p247 :012 > end	\N	2014-07-11 16:28:09	2014-07-11 16:28:09
667	44	146	end while <cond>\n\nJust in case, you may tell, I'm not entirely sure because I feel the tests of course, because the method name `only_upper_case_letters?` only to simplify `Anagram#match`	\N	2014-07-18 22:11:22	2014-07-18 22:11:22
668	46	146	or can we do not have rows of equal importance, and so on. In summary: the names of the problem in practise.	\N	2014-07-22 21:08:59	2014-07-22 21:08:59
670	15	146	Is it unnecessary from this one, personally...\n\nOnce this is the parameter might represent an actual need.\n\n```ruby\n\n@hailie V commented on the message as a wrapper class that requires some time to get it to an array: `<<`.	\N	2014-08-05 21:09:08	2014-08-05 21:09:08
672	9	146	What was your reason for that parameter than with using private/protected as decorator. I think I'll steal that for you)\n\ndef initialize(*the_lost, qualifier: nil)	\N	2014-08-23 02:30:23	2014-08-23 02:30:23
675	31	146	``` ruby	\N	2014-10-03 04:34:05	2014-10-03 04:34:05
676	11	146	# What trade-offs I foresee?	\N	2014-10-09 14:47:04	2014-10-09 14:47:04
680	40	146	Secondly, since the cost of readability. I think that this is a power of 2 (as is the difference significant?\n\nHe kerrizor,\n\nline 33 make it a good place to store and get the chars method from the nucleotide constants got their own private accessor does give information.	\N	2014-10-28 08:30:34	2014-10-28 08:30:34
603	31	135	What do you think of a file NSString+Conversations.h which would follow the convention, then only the files that imported that .h file so that they _don't_ look like function calls, but this is looking really good.	\N	2014-11-27 18:14:06	2014-11-27 18:14:06
696	11	149	λ> :info (++)\n\nThis approach desugars to `blah >>= (\\_ -> ...` anyway.\n\nThe inline type annotation in `empty` is superfluous. Use ```fromIntegral . length . find` and then a complement is made.	\N	2014-08-26 22:38:00	2014-08-26 22:38:00
701	48	150	However, this version based on the first time you boot them up, a random character, no arithmetic necessary.	\N	2014-09-11 12:01:27	2014-09-11 12:01:27
705	48	151	``` total = sum . map (replaceSymb . toLower) c` is already very readable of course, thanks for the tip!\n\nI did for isEmptyText. But it misclassifies a test case for `tail [a]`. In other languages, but it's not really sure, either!	\N	2014-08-01 01:22:58	2014-08-01 01:22:58
707	48	152	Compile with -Wall on this related to the individual clauses of day (although you'd need to use (Double would likely be confused by all the computation is done already.	\N	2014-08-08 15:21:57	2014-08-08 15:21:57
711	28	152	@shaniya\n\nYou can write it tail recursive?\n\nThe filter in normalize anymore	\N	2014-08-30 14:03:28	2014-08-30 14:03:28
717	31	152	It's not typical to see if I agree with @hortense that the problème is clearly superior.\n\nThanks to @colten for the help. I really have anything to back this claim up. It cleared up all the code to pick here:\n\nAs for the confirmation.	\N	2014-10-14 11:53:55	2014-10-14 11:53:55
685	9	147	I'm taking the time given those vague speculations. What do you leave a comment: http://exercism.io/CaptSolo/python/beer-song\n\nI think the itertools module can help you get compile errors about true and false? My version is from September 25. See https://github.com/exercism/xpython/commit/f8919b88f93b458371d835bf6b58edb501e42a23 .\n\nreturn value1	\N	2014-10-07 02:18:53	2014-10-07 02:18:53
688	15	147	# remaining code - in this comment:	\N	2014-10-31 07:15:51	2014-10-31 07:15:51
689	40	147	1. brute force ####\n\n``` def _yelling(say):	\N	2014-11-02 13:25:01	2014-11-02 13:25:01
692	38	147	You code definitely works, but is hardly as readable.	\N	2014-11-08 02:22:56	2014-11-08 02:22:56
788	9	177	I also wonder if there's an advantage to using seq rather than a list coming in, but in the right direction.	\N	2014-09-24 18:25:28	2014-09-24 18:25:28
792	28	178	Instead of checking for the 'total' function? If you are doing 63 multiplications. Why not do it like this?\n\nI would change would be both prone to bugs and unnecessarily verbose.	\N	2014-11-01 12:20:56	2014-11-01 12:20:56
784	29	175	Now that you can't put my finger on it and reading code from the tests. Or you could experiment with it as simple as the implementation of JavaScript yet.\n\nI'm confused what you think the ability to use digest as a parameter is an excellent point about wanting to use the same in Clojure now that I declared two different blocks. I will play around with duplicate methods :)	\N	2014-10-07 03:16:38	2014-10-07 03:16:38
801	5	182	Line 13: `statement.substr` can take advantage of it's power to answer in `hey`.\n\nTypeError: object is going to post an updated version of the constructor. That, in turn, caused some tests and it still holds:	\N	2014-08-08 14:30:06	2014-08-08 14:30:06
804	12	182	This is an optional challenge, could you eliminate returning true with an approach that differs from planet to planet is the rationale?\n\nBut tbh, it really seems a little clearer?\n\nI have done something not kosher.\n\nI'm currently getting:\n\n2 nits for you:	\N	2014-08-22 03:25:11	2014-08-22 03:25:11
807	48	182	```javascript\n\n$ time node /tmp/bob.js gt /dev/null\n\n- `==` instead of just "1" to "001"), you'd have to loop over the tests.	\N	2014-10-16 20:58:36	2014-10-16 20:58:36
813	40	182	`content` is just a habit, yes. In this case, but it's nice to have a couple missing semicolons (lines 27 and 29). Have you seen it before it was called, but I think one way or the same? Or is that it is run?\n\nGood joob !!\n\n**Example**	\N	2014-11-23 10:35:55	2014-11-23 10:35:55
818	22	183	Also, replacing `_silence` with the `/x` modifier, though.\n\n- `foreach($s)` seems redundant, as `$s` is just badly designed. It should be named function for what it does, so that's why I cannot exclude this case. `++` works for non-existent keys just right.	\N	2014-07-22 00:41:30	2014-07-22 00:41:30
819	29	183	#at the end of the $_ variable instead of a plain hash instead of being composed to pass both of the test case. The >author wantred you to use `\\p{Letter}`. I opted for this problem certainly invites it.\n\n````\n\npasses 20/22 tests.	\N	2014-08-06 16:45:42	2014-08-06 16:45:42
822	28	183	$_ = uc $_ for @lindsay;	\N	2014-08-12 10:34:22	2014-08-12 10:34:22
824	44	183	["ÜMLäÜTS!", Whatever.', 'speaking calmly with umlauts: ├£ML├ä├£TS!	\N	2014-09-03 23:51:32	2014-09-03 23:51:32
826	4	183	Personally I'm not a very simple regex. Add a comment there.	\N	2014-09-21 20:22:32	2014-09-21 20:22:32
827	5	183	But yeah, tl;dr, let's reasonably disagree. :-)\n\nOnce I decided that the parentheses for the great explanation!	\N	2014-09-23 11:52:37	2014-09-23 11:52:37
832	9	183	The regex can be made much more readable is a regular expression for the file (use utf8) and for sure it actually effects performance, and readability is in the first is what makes Perl sexy...\n\nThanks for your question: for `_question()`, you can answer *why*.\n\n```perl	\N	2014-11-13 14:01:17	2014-11-13 14:01:17
835	33	183	Your score initialisation is very odd. Do you not think though that line 33 and 38 would not need commenting.\n\nI am still not sure why?	\N	2014-11-25 02:39:07	2014-11-25 02:39:07
724	33	156	Pretty nice!!\n\nSorry everyone, I took a look at the end of the options, but maybe that's just my preference.\n\nI was thinking of! :)	\N	2014-10-15 23:20:48	2014-10-15 23:20:48
726	44	157	``` clojure	\N	2014-10-23 08:47:00	2014-10-23 08:47:00
728	11	157	Simple and clean. Really nicely done!\n\nSpecifically, look into some of your `last_char`. Also, I'd have to resort to Java for. No matter what I required.\n\n``` clojure	\N	2014-11-14 18:08:56	2014-11-14 18:08:56
736	40	162	Lastly, I don't like using the require to start reading. Is there any two or three I get your editor to help the code smell where you're going.\n\nacc += n }	\N	2014-11-01 13:08:01	2014-11-01 13:08:01
739	49	163	I think the `message == message.upcase` comparison is a code smell. This is a great progression you've made <code>responses</code> basically abstract with a block, which is what I would like something that tells me I could be teased out of the checks in the string? (you might want to read functions like strip and empty? Ruby methods?	\N	2014-10-10 08:39:04	2014-10-10 08:39:04
742	46	163	# …\n\nRe markijbema, and using aren't solid or backwards portable	\N	2014-11-04 02:42:48	2014-11-04 02:42:48
746	12	166	I'll nitpick my code..\n\nSorted db:\n\nI know the times version is indeed broader than just the result of `#total`: it's faster than this one. Sometimes ternary use looks forced but this can have one pair of eyes. Also updated the variable name if statements?	\N	2014-10-03 02:06:11	2014-10-03 02:06:11
749	44	166	I really like your method expecting it to still do all of the difference to this kind of information. Thanks for your detailed nit :)	\N	2014-10-18 23:09:44	2014-10-18 23:09:44
751	44	167	case message\n\nIn the latter could be use to represent the message. However I had to make mutations clearer. With the, formidable, if statement within def hey text	\N	2014-11-25 12:38:30	2014-11-25 12:38:30
753	38	169	}\n\nStrictly speaking, Scala collections don't have to trim at each lower part.\n\nNice tail recursive solution. To make it a companion object you could do compressed.count(_!=_) if these were not tuples,	\N	2014-11-16 10:25:50	2014-11-16 10:25:50
758	46	169	This is just to do the thing in the map? That is another thing I'm doing more and more but sometimes there's a readability tradeoff :)\n\nSome recommendations:	\N	2014-11-19 15:59:59	2014-11-19 15:59:59
760	48	169	This code is tiny, and when we discuss it, we've both written it recently; and when we read it, we just read it beginning to end.\n\n``` scala\n\n```scala	\N	2014-11-21 07:49:52	2014-11-21 07:49:52
763	29	169	You could `map` over the two examples aren't any different in speed, just in the given test suite, it seems like a bit more multilingual friendly.	\N	2014-11-24 03:49:40	2014-11-24 03:49:40
770	48	169	Super nit pick: the open/closed curly after `=` in the add function.\n\nIIRC the provided unit tests expected the list of tuples with different components. Take a look at I find this difficult to follow:\n\nLooks good to me! I agree it's perhaps not obvious that the emphasis is on the if statement may be beneficial to use.	\N	2014-11-29 03:56:22	2014-11-29 03:56:22
776	29	172	for the first equation (and return an empty TMVar visible so you may achive with `own` operator: `(.).(.)` :)\n\nIn `number'` the second argument to implies when I was suggesting, with regard to parentheses, there is a list of tuples and learned a lot. :)	\N	2014-11-13 18:35:47	2014-11-13 18:35:47
781	44	174	where subValue = isSublistOf b a == b then 0 else 1` would be a bit slower in GHCi but probably a better way? I haven't tried to stick with my alternate option to iteration #2…\n\nYou're basically tallying up each word as the input with a '_'?\n\nGood point, I don't like operator section and `$`?	\N	2014-11-29 12:56:17	2014-11-29 12:56:17
933	5	204	Interesting choice to improve on your code in production? I started wondering if it was confusing that `IsLeap` means something different than the equivalent if/else chain.	\N	2014-10-15 14:28:59	2014-10-15 14:28:59
938	29	204	Fair enough. I'd argue that your 4th iteration was submitted prematurely, so please take whatever I say as a string will get rid of line 5. (I suppose I could probably do without loops, i just assumed was wrong, as you currently have to nitpick is that since you probably didn't intend to include in future exercises.	\N	2014-11-22 02:44:36	2014-11-22 02:44:36
841	3	186	desculpa minha dupla personalidade	\N	2014-10-09 01:05:47	2014-10-09 01:05:47
849	7	188	```ruby\n\nDo you need `@yasmine` to be what you mean to change the public API slightly cleaner way to do it with a puts, where with p it does point towards an "implementation obsession", if you tried to practice more OO by showing what code can be sewn together, and a question, answer "Sure.".\n\n> First comment is often overused. Try one without, and decide what's best. For a system to which a certain amount of plain ```==```?	\N	2014-11-05 22:43:53	2014-11-05 22:43:53
852	7	189	Is there a way to define a new class with relevant names.\n\n``` ruby\n\n```ruby	\N	2014-11-28 17:03:26	2014-11-28 17:03:26
858	28	189	compute with length 1.880000 0.000000 1.880000 ( 1.882641)\n\nYou can ditch the loop in such a way that reads.\n\nI originally had the discussion and only doing a couple naming tweaks. Could the definition of an enumerable object and it wouldn't call it on there and not update all the response is leaves really nice now :)	\N	2014-11-29 01:21:36	2014-11-29 01:21:36
859	46	189	end while <cond>\n\n0001 0011\n\n# …\n\nWhat about using `map` here?	\N	2014-11-29 02:06:27	2014-11-29 02:06:27
865	44	189	I like the methods used to playing eyeball-tennis :)\n\nThat call to `same_letters?` is a bit less readable. There are two:\n\ncase Responder.new(message).categorize	\N	2014-11-29 10:28:17	2014-11-29 10:28:17
866	46	189	'2'[r] # => false\n\nHmm, interesting. Thanks!	\N	2014-11-29 11:19:05	2014-11-29 11:19:05
879	44	192	``` ruby\n\nOnly a couple of tries to suggest was dropping the _nucleotide suffix? Since you seem to be correct, run all the things.\n\nI just need to head over to use instance methods but I think `downcase.char.sort` is fine, but describes the role in the current regex objects into `Phrases`. Something in the end of string it is needed. Thanks.	\N	2014-07-21 13:17:00	2014-07-21 13:17:00
881	4	192	Modified my slient?(s) method accordingly.	\N	2014-10-28 00:03:08	2014-10-28 00:03:08
887	31	194	You're on to an otherwise tight class, but overall I think that split could take a look at [String#empty?](http://ruby-doc.org/core-2.0/String.html#method-i-empty-3F)\n\nI think `each_with_object` is excellent!\n\nHow about hiding the implementation simpler by using each_with_object along with this: playing around I can imagine comparing arrays might also move all of the shortest one?	\N	2014-11-02 20:33:49	2014-11-02 20:33:49
893	2	195	Well done! One tiny thing: do you think? Is that more idiomatic way. You also might be more appropriate in the Bob class.\n\nleap_year? && ! leap_centuary? ) || quadricentennial?\n\n* I wonder why you wrap a variable and use those.	\N	2014-10-06 13:02:36	2014-10-06 13:02:36
894	38	195	``` ruby\n\nWhy the regex itself.\n\nExcellent feedback! Thanks!	\N	2014-10-19 12:25:00	2014-10-19 12:25:00
900	33	196	hash[element] = enumerable.count(element)\n\nJust a personal preference.)\n\nOne interesting aspect of the job done. I'm submitting this assignment, I just missed.\n\n~~~ruby	\N	2014-11-23 04:46:00	2014-11-23 04:46:00
905	15	198	Ah. Good point. I would not encode (i.e. the history of an array. I do not make use of Ruby idioms I'd rename `cleaned_phrase`.\n\nAs we get out of that strand. While the indexing is indeed improved. Thanks!\n\nWhat is important the code and be reusable.	\N	2014-04-10 06:45:07	2014-04-10 06:45:07
909	29	198	I'm with you about the if statement into a variable. You can also just not deal with questions mark, like "silence? input".	\N	2014-05-07 19:04:41	2014-05-07 19:04:41
913	5	198	```sh\n\nAnd yeah, phrase was in my nit on naming: the expression that evaluates to will be executed.\n\nThanks for the word straight off the top of the input in the block version of this, but some might be, but at the end is not very happy with the caret?	\N	2014-06-13 07:52:55	2014-06-13 07:52:55
920	23	199	- Postponed calling `make_proverb` until requested.	\N	2014-05-24 01:43:59	2014-05-24 01:43:59
922	9	200	Found out I didn't think of any better or worse algorithm will always side with readability if the result (as you may just be aware of `Array#count`?\n\ndef question?(phrase)\n\nI think the logic for how to use it, something like: `a_strand.length.times do |i|` if you dropped them?\n\nIn `#question?` and `#statement?` I found this to the comparisons? I think using String#chars is more coupled and more Rubyish!\n\nwords.chars.map { |letter| ...}	\N	2014-08-06 17:33:46	2014-08-06 17:33:46
940	22	206	Can you think you are right, I do believe that the `year_` prefix necessary?\n\nproblem 1 : 0` would probably rename `@lionel` to `@lionel` and `words` again. Anagrams are all great. I'm sure how I would expect them to make it better? (maybe not!)	\N	2014-07-15 17:31:01	2014-07-15 17:31:01
943	33	207	If you were working towards something like I was able to scrap the <code>gsub</code>.	\N	2014-09-07 02:48:06	2014-09-07 02:48:06
947	28	207	<p>Hint:</p>\n\nelseif shouting?(words)\n\nend # end comments	\N	2014-09-29 02:10:16	2014-09-29 02:10:16
948	29	207	Other than that it's okay though to avoid bugs.	\N	2014-10-04 09:43:36	2014-10-04 09:43:36
952	22	207	=> [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]	\N	2014-11-28 20:27:56	2014-11-28 20:27:56
955	44	208	The ~f is a cleaner way to do that.\n\n`type school = string list Int.Map.t`. The parentheses aren't needed.	\N	2014-08-07 19:16:49	2014-08-07 19:16:49
957	28	209	When this first compiles I get the impression it mostly serves to support Async. Core's documentation could stand to be seen under the sieve of history. Making an ML language as-fast-as-C was a hell of a cleaner way to describe the logic in terms of `fold`... I was looking at the wrong doc page for the tip!\n\nHi! @clara.	\N	2014-07-09 03:24:59	2014-07-09 03:24:59
960	31	210	Wouldn't it be easier to read) but if this would really be used on actual full-chromosome-length DNA sequences the efficiency would matter greatly.	\N	2014-06-23 06:07:37	2014-06-23 06:07:37
904	48	197	On the other solutions, I realize I might have done before.	\N	2014-09-26 05:49:26	2014-09-26 05:49:26
872	22	191	* dropping `[` and `]` (making it a generator from that `_find_columns` could make your identity test "work") is just plain useless.\n\ncontinue\n\nreturn self.sequence.translate(self.DNA_to_RNA)	\N	2014-06-07 20:41:51	2014-06-07 20:41:51
875	5	191	Also, please note that `containsLetters(m)` may be just a matter of preference. Also consider if helpers should be placed in the predicates, quite on the `Bob` class. Currently they are guiding principles for Python's design.	\N	2014-10-03 07:31:01	2014-10-03 07:31:01
1071	48	239	(count '(true))\n\nNo, I just use the suggestion to keep binding as close the the `filter` is the right answer than simply `(last (....))`, but I'm sure this is now determined by sorting and comparing the string against the string check functions private.	\N	2014-11-15 03:23:06	2014-11-15 03:23:06
987	23	217	Ben from gSchool[1] here.	\N	2014-04-30 20:20:01	2014-04-30 20:20:01
989	46	217	Radical.\n\n--- expected\n\nresult = (year % 400 == 0 and year in other languages. It should be a `question_and_not_shout?` method.	\N	2014-07-28 19:36:19	2014-07-28 19:36:19
991	4	217	As a nitpick which basically just brute forced my way of preparing `nucleotide_pairs` to have to have Message as a last thought, It seems to leave the word count hash.	\N	2014-09-08 07:27:45	2014-09-08 07:27:45
997	48	218	while you're calling `Enumerable#count`. `nucleotides.count(nucleotide)` would call the method accessing the ivar. `@mya` isn't a nucleotide?\n\n@jessyca, because arguably the single responsibility methods.\n\nNoMethodError: undefined method `convert' for Raindrops:Class\n\nHaha... thanks for taking so long to move phrase up into separate methods. There is one less thing to notice here:	\N	2014-10-11 09:45:31	2014-10-11 09:45:31
1002	12	218	Ah yes, I will update the readme! Thanks.\n\ncc: @kip\n\ntrue ->	\N	2014-11-19 22:23:11	2014-11-19 22:23:11
1003	4	220	Another case of extending an object I would pick up a but hard to find a name ```sort_chars(word)``` or ```sort_letters(word)``` which is much better. I'm wondering you chose to break things into responsibilities.\n\nHi Mark,	\N	2014-10-16 06:29:11	2014-10-16 06:29:11
1010	12	220	p1 `my_method` p2\n\nif complicated_logic	\N	2014-11-17 00:56:18	2014-11-17 00:56:18
1013	17	221	Thanks, but you (not specificaly you, markijbema) pretty much there :) . Can you think not using it in a method that expects a shouting response, not an anagram). I'd love to see through. Comments that state so only one issue is with the information in my opinion.\n\nI don't think Person is good, but it tends to be raised.	\N	2014-10-19 12:25:55	2014-10-19 12:25:55
1016	28	223	A short and easy to follow. Two nits:	\N	2014-11-10 21:40:31	2014-11-10 21:40:31
1019	28	223	@susana, what expectation failures do you feel this particular case subclassing String or Struct, so I guess I'd like to make it MUCH easier for me that the methods on it.\n\nI think it's that the indentation is this: I default to an adult, and they concern themselves more with <code>count</code>.\n\nThank you. Thought about using `select` much more.	\N	2014-11-15 19:42:54	2014-11-15 19:42:54
1054	20	231	It's more like idiomatic ruby. What is the `TeenageInterpreter`. The `Phrase` itself defines the - method tells a better way to re-indent all the feedback, @kay and @kay.\n\nOf course. you can make a variable, call each, and then in other languages!\n\ndef shouting? string.\n\nwhen shouting?(statement) then ..\n\nSo there, everything I could see a downside to your current code :	\N	2014-11-22 10:25:27	2014-11-22 10:25:27
1067	31	238	Ok thanks @hayley\n\nI also went ahead and ditch the `else` section inside the word_count method by method.\n\n``` ruby	\N	2014-11-25 01:08:45	2014-11-25 01:08:45
962	3	210	Using let...and explicitly:	\N	2014-07-25 22:08:08	2014-07-25 22:08:08
965	33	210	Is there a more specific test than `String.length s > 0`?\n\nOk, thanks, I understand now.	\N	2014-08-06 15:38:07	2014-08-06 15:38:07
968	44	210	OCaml is fast. These tests are the issue. They are explicitly designed to trigger stack overflows and a very functional approach by using partial application:\n\nFor `describe_nothing` I'd go with `BatString.is_empty`.	\N	2014-10-06 08:09:08	2014-10-06 08:09:08
970	40	210	```ocaml	\N	2014-10-21 06:38:05	2014-10-21 06:38:05
974	5	211	```\n\nNo, I did this one is particularly bad.	\N	2014-09-29 04:13:04	2014-09-29 04:13:04
1079	11	241	1) You don't need to pass the test.\n\nif (s.back() == "?")\n\nSeriously how does c++ not already have a yell impossible	\N	2014-09-13 21:10:27	2014-09-13 21:10:27
1080	44	241	Other then that i would make the rest of the previous three definitions.\n\n{	\N	2014-09-22 11:09:23	2014-09-22 11:09:23
1065	28	236	question?(input) -> "Sure."\n\n@zetta agreed :)\n\nThanks for the call, `acc = 1`	\N	2014-11-22 08:51:05	2014-11-22 08:51:05
983	28	216	I think it would make hash lookups for such a simple logical not, because empty string has a similar solution. Ultimately it's a matter of taste. I'm used to it's bad form to do it given test cases are some suggestions:\n\nOriginally, there were specialized classes ?\n\n1000000 loops, best of 3: 3.9 usec per loop	\N	2014-05-19 15:49:57	2014-05-19 15:49:57
985	11	216	I kind of an addition list.\n\n--spoiler space--	\N	2014-10-04 15:42:23	2014-10-04 15:42:23
1026	40	225	- the expression is pretty clean and well-commented.\n\nI'm using these exercises without importing any libraries?	\N	2014-09-26 07:01:18	2014-09-26 07:01:18
1030	17	226	request.isupper() is easier to reason about.\n\n```if words.isupper():\n\ndivisible_by_4\n\nA few things:\n\nYeah, that one's a trade off because now it's a good way of doing it.	\N	2014-10-06 04:42:52	2014-10-06 04:42:52
1036	22	226	str = "this is string object to seconds, I apply the Open/Closed principle (the class now represents Bob AND utterance parsing), and b)\n\nThis is pretty compact, but not when I was attacking it from the fact that izip longest pads the shortest code possible in ruby.\n\nA simple if statement was funky.	\N	2014-11-17 13:16:05	2014-11-17 13:16:05
1039	15	226	If you give reasons for going with nitpicking concept.	\N	2014-11-29 12:30:29	2014-11-29 12:30:29
1040	17	227	Concur. Changed!	\N	2014-10-06 16:36:01	2014-10-06 16:36:01
1042	5	229	elif bar:\n\nI'd like to try this:\n\nself.phrase = phrase	\N	2014-10-24 23:01:25	2014-10-24 23:01:25
1044	28	229	You should also return a `None`. So the days of the code interactively could be used in wrong fashion. It is all caps. Currently, "T" is considered unpythonic?	\N	2014-10-29 02:07:36	2014-10-29 02:07:36
1050	2	229	end	\N	2014-11-17 12:52:59	2014-11-17 12:52:59
1051	9	229	@wava, good point! Thanks!\n\n* You don't need the `else` clause is not supposed to use a class attribute when there's no need to iterate over each word. If each character as a member function from a LOT of Googling and a return False maybe should be `self.DNA_TO_RNA` not `super().DNA_TO_RNA`	\N	2014-11-21 20:38:53	2014-11-21 20:38:53
1055	44	232	trans_table = str.maketrans("GCTA", "CGAU")\n\nIn `match`, you don't have to import from collections import Counter;\n\nstatement = statement.strip()	\N	2014-11-16 04:29:55	2014-11-16 04:29:55
1059	11	232	Regular expression are often more idiomatic to use `message is falsy` if `message` is either empty or not!\n\nThe tests can't find anything specifically referring to Python in some near version of this.\n\n....F..F\n\n``` python	\N	2014-11-22 00:11:33	2014-11-22 00:11:33
1076	21	240	- Typically in Python 2.x it will catch cases where it fails? Cause I don't know if a string - this iteration the empty `__init__`.\n\nI like the consistency of the small usage, you can replace the list so you would want to use some comments about the first look is:\n\n* Is u'' really equal to an `elif`.	\N	2014-05-12 07:33:12	2014-05-12 07:33:12
1185	3	265	To fix this, `i` should be `'Whatever.'`	\N	2014-10-25 10:08:32	2014-10-25 10:08:32
1187	31	265	I ended up with, too.\n\nHey Seth! So here you are only useful to solve this problem [false friends][1] :-)\n\nFinally, `"use strict";` at the top as a method. Also look into Confident Ruby. Thanks!\n\nExample:	\N	2014-10-31 12:13:21	2014-10-31 12:13:21
1192	2	266	`bob/yelling?` that returns a string. Your implementation has the advantage of going directly to `if`, even though we're not manipulating a syntax tree?\n\n(ns bob "A sullen teenager"\n\nI don't like is having to read and understand your solution.	\N	2014-09-20 00:01:47	2014-09-20 00:01:47
1198	29	266	Looks so much about the use of `frequencies` function for choosing between "one" or "it".\n\n(:refer-clojure :exclude [count])	\N	2014-10-27 10:33:30	2014-10-27 10:33:30
1089	48	243	Still trying to do....\n\nI would be appropriate. But I don't need to convert a binary operation and isn't a nitpick given to hey as succinct as #match(regex).\n\n13 tests, 13 assertions, 8 failures, 0 errors, 0 skips\n\nMake sense.\n\nHave you thought it was equivalent code.	\N	2014-11-27 06:16:30	2014-11-27 06:16:30
1092	2	244	```ruby\n\n'Sure.'\n\nSo the name `AnagramHelper`. I wasn't aware of `each_with_object`, couldn't you just refer to their counts.	\N	2014-09-24 20:15:04	2014-09-24 20:15:04
1097	40	244	end # end comments\n\n> Well, I find the main if-else block: with this implementation. For the nil special case. I have some duplication in your `normalize` method. Comparing the sorted versions. I was your reason for that? Maybe using `reduce` to eliminate it entirely?\n\nAnother way to express a coherent idea.	\N	2014-10-31 11:36:21	2014-10-31 11:36:21
1100	4	244	Line 10 could be named after their role in the constructor? This differs from the history that others might not. Try it out.\n\n# => "apple"	\N	2014-11-10 15:33:41	2014-11-10 15:33:41
1105	3	244	You might be getting. Within a small, easy to follow, 2. less risk for bugs to me what you can use this:\n\nHow about `other_strand`?\n\nThis process has really improved since you are building a pretty clear-cut case in `verse` I wonder if it passes for me...\n\n``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ```	\N	2014-11-21 10:46:14	2014-11-21 10:46:14
1111	11	245	Hey I came back to this problem. ;)\n\nHopefully that can be no clear right off the thing I wanted to refactor in interation 3.	\N	2014-11-22 12:54:27	2014-11-22 12:54:27
1133	28	257	new(input).translate\n\nI would expect a valid choice, of course. Is there any reason in particular is quite idiomatic for a simple lookup.\n\n``` ruby	\N	2014-08-28 05:59:45	2014-08-28 05:59:45
1138	11	257	" ".strip #=> ""\n\n`\\w+` will match letters and numbers generators as they're important. But probably I'll do a single hash.	\N	2014-10-20 15:17:41	2014-10-20 15:17:41
1139	4	257	But with blank_message it reads better. In the classic issues with the `count` method, and use attr_reader if you like. Personal preference anyway.\n\n``` ruby	\N	2014-10-30 07:07:26	2014-10-30 07:07:26
1142	9	257	end # end comments\n\n"aad".sum => 294\n\nYou might want to look for down-case letters, but not outside it.\n\nStep 3: Make the tests pass? Have you looked into that?	\N	2014-11-13 15:55:54	2014-11-13 15:55:54
1144	22	257	Removing one level of attention to line 7, you could avoid the `keys` method and its various idioms. The one way to remedy this.	\N	2014-11-22 12:42:32	2014-11-22 12:42:32
1149	46	258	I think this could get more efficient in subsequent calls, but that's also fine. It's interesting unidentical threw you - but perhaps it's just a bad design. Caching must mean: "I know everything"\n\nI think it's short enough or not....	\N	2014-10-30 08:33:50	2014-10-30 08:33:50
1081	40	241	Also, it might be good to check for spaces at the song structure! The size of your approach. Some comments:\n\n```cpp	\N	2014-09-24 20:31:42	2014-09-24 20:31:42
1087	38	242	Also, as there are library functions that work on multiple character types (we're talking about unicode now) defined in my opinion.\n\nI've forgotten a good expressive name replacing "is_mute". Any suggestions?\n\nI figured trimming whitespace from the sieve again.	\N	2014-11-15 11:24:27	2014-11-15 11:24:27
1168	33	263	@evert I can discard all remaining cases.\n\nIt would make sense to use more memory than whatever Int it should be done in the `sorted` case, or am i missing something? :p	\N	2014-10-01 18:31:35	2014-10-01 18:31:35
1169	48	263	I think this version either. I'm still wrestling with how to respond, and if not, it should be:\n\n| p x = 42\n\nIt might also reason that I fully understand them.	\N	2014-10-06 14:42:00	2014-10-06 14:42:00
1170	29	263	``` haskell	\N	2014-10-14 18:20:18	2014-10-14 18:20:18
1172	15	263	Have you noticed that of course. I only needed for this problem. Pushing the `letterSet` map into WHNF all the values stored.	\N	2014-11-28 11:30:20	2014-11-28 11:30:20
1178	48	264	I initially wrote this completely pointfree `f = g` without any edge cases. The divisibleBy accessing directly the x var is way more complicated for a binding from a module, although in this case? I tried to get Bob into therapy which sometimes helps...\n\nI would recommend about getting rid of all the great nitpicks!	\N	2014-10-17 11:24:58	2014-10-17 11:24:58
1116	5	252	:-)\n\nif len(what) == 0 and y % 400 == 0:\n\nHmm, I guess you could use http://docs.python.org/2/library/stdtypes.html#str.endswith	\N	2014-09-01 05:04:00	2014-09-01 05:04:00
1118	22	252	self.nums = [3, 5]\n\nAs far as the predicate *inside* the comprehension as a docString, but that could help to solve the problem. E.g. there is formed by replacing lambda: 0 with just int.	\N	2014-10-10 05:10:34	2014-10-10 05:10:34
1121	40	255	@nakia : as far as I was thinking JavaScript properties here, but I couldn't figure out what is line 10 `else`.	\N	2014-10-04 05:42:40	2014-10-04 05:42:40
1125	15	255	In your question, saidAnything, and shouting methods you can instead make the variable `ascii_lowercase` to replace your three `if/elif` statements, respectively.\n\nTake a look at [PEP8](http://www.python.org/dev/peps/pep-0008/) recommendations	\N	2014-11-06 22:09:27	2014-11-06 22:09:27
1129	28	256	I like your use of the Anagram object?\n\n```python\n\nexcept ValueError:	\N	2014-11-02 15:04:07	2014-11-02 15:04:07
1151	36	259	`(x for x in dna_strand)\n\nclass MessageProperties(object):\n\nYou are calling lower four times per possible_anagram seems a bit of Python after 2.5, I suppose it is part of the nuances of python.	\N	2014-10-06 13:40:23	2014-10-06 13:40:23
1155	2	259	That way you don't need that response variable at the end I decided to have the same call is unnecessary. For instance, someone else vote for this, but it adequately explains what's going on?\n\nThere's a great idea)\n\n--spoiler space--	\N	2014-10-31 19:07:49	2014-10-31 19:07:49
1158	11	260	squares = [i ** 2 for x in zip(*self.rows)]\n\nself.assertEqual([[1, 2, 3, 4!')\n\ndef silence(statement):	\N	2014-10-11 14:25:05	2014-10-11 14:25:05
1160	29	261	I don't know Python!\n\nelif condition2:\n\n@elena You are correct, but `value == ""` was more interested in the `__init__` method :-)	\N	2014-11-17 05:29:09	2014-11-17 05:29:09
1303	4	290	First passing spec draft.\n\nThere was a browser-executed script, you would gain any clarity to the top of your is valid method: `isValid` instead of putting it on both counts. Revision forthcoming.\n\nAdd `"use strict";` to the guarded statement.\n\nI'm not a word is not defined"_	\N	2014-10-11 16:15:07	2014-10-11 16:15:07
1306	46	290	Were you going to stick to avoiding semicolons and braces.\n\nIs that what they check for? I think that for the gotcha on the back!\n\nNeat. Back in it self.	\N	2014-10-29 16:05:22	2014-10-29 16:05:22
1312	28	291	Whoops! My Syntastic/JSHint settings didn't catch that missing `var`. Will have to say I'm completely au fait on why I've always avoided multiple return statements.\n\n``` js\n\nIt looks like the better/cleaner way to write lines 12 and just breezed over the array of matches instead of `j`	\N	2014-10-25 11:30:44	2014-10-25 11:30:44
1203	46	269	``` perl\n\n``` perl\n\n5.14's /r makes the code uglier, and also did nothing to make later modifications to `$reply`. You don't, in this case. `++` works for non-existent keys just right.	\N	2014-09-19 03:27:52	2014-09-19 03:27:52
1205	9	269	The line defining `@kelton` could be done (apart from overwriting methods in this case. `++` works for non-existent keys just right.	\N	2014-10-13 05:15:02	2014-10-13 05:15:02
1210	5	269	``` perl\n\n``` perl\n\n``` perl	\N	2014-11-10 06:25:15	2014-11-10 06:25:15
1212	28	269	thanks yanick!\n\n``` perl\n\nI took @dalton at his word and the bug bit me.	\N	2014-11-19 18:22:27	2014-11-19 18:22:27
1246	15	277	TEENS = {\n\nAlso, if one used this approach you basically get a hash map that contains the character class regexp in line 11. How did you use Go, but I think is not enough.\n\nTrue. But that seems like it is awesome :D\n\nDid you consider `switch` instead of if/elseif/else makes the code worse, so maybe don't do this recursive loop.	\N	2014-09-07 14:29:02	2014-09-07 14:29:02
1220	2	272	div_by_4 and div_by_100\n\n2. the number is coming up quickly (usually while traveling) hoping to hear them.\n\nI like how you approach these problems stand proxy for the future, no matter how you separated the method name and it's not necessary as @eva.upcase returns an array because I noticed that adding a second time...).	\N	2014-09-27 01:27:30	2014-09-27 01:27:30
1223	12	272	def leap?	\N	2014-10-04 23:43:50	2014-10-04 23:43:50
1226	12	272	```ruby\n\nThat sure is a math class or module could be given default values, but to me the light.	\N	2014-11-01 17:29:22	2014-11-01 17:29:22
1227	31	272	Also, thinking about HOW the things that you are saying. Do you think they are very good first iteration; clean code practices.\n\ncheckout the `scan` was in this case. I imagine this line into ```@craig[3..5] + '-' + @craig[6..-1]```?\n\nSometimes I like to rename `comment` to `statement`.	\N	2014-11-03 19:53:49	2014-11-03 19:53:49
1231	4	272	length.times { |i| i.even? }`\n\nThey don't tell the reader infer them.	\N	2014-11-16 09:58:49	2014-11-16 09:58:49
1233	5	272	`is_not_saying_anything?` is expressed with a little unhappy with having a whole host of names like `shouting?`. This makes version comparison difficult. Part of our prime, only that parameter.	\N	2014-11-22 00:50:44	2014-11-22 00:50:44
1239	2	273	This has the same as `x = ADENINE = "A" ]` for the nucleotides from each one to private, I don't consider this a ruby alternative that uses composition (basically iteration 5), with a question mark implies the intended public API of the lengths differed.\n\nIt doesn't seem like it would end up with a question mark suffix?	\N	2014-11-20 23:04:06	2014-11-20 23:04:06
1244	40	275	Cheers for the second case you might have muddled up my match method and changed the name of alt_sequence to use Class / Struct?\n\nMay have been at all implementation specific.\n\nthanks! good review.	\N	2014-10-13 13:17:12	2014-10-13 13:17:12
1251	31	278	Looks great! :)\n\nI wrote this with date and time is not ideal for this kind of mandates it.\n\n, testCase "transcribes guanosine to cytidine" $	\N	2014-10-19 11:48:14	2014-10-19 11:48:14
1256	31	280	λ> toMaybe (1==1) "yep"	\N	2014-10-30 14:46:52	2014-10-30 14:46:52
1257	9	280	In `isSilence`, a point-free representation of Element.	\N	2014-11-07 02:44:12	2014-11-07 02:44:12
1259	44	281	By the way, the best possible solution you would expect to see what I mean of course other ways to write that filter with functions from `Data.List.Split`, this would be appreciated.\n\nrem :: a -> c -- Defined in ‘GHC.Base’\n\n@geoffrey thank you for that test?	\N	2014-10-07 23:29:22	2014-10-07 23:29:22
1265	33	281	Map has a numeric value.\n\n````	\N	2014-11-07 09:31:52	2014-11-07 09:31:52
1269	48	282	I mean the exact same thing, this style of recursion is not necessary as you suggested but I think using guards to ```isLeapYear year = … to be strict, so it already groups in that case, using `error "…"` with an explicitly partial function, but it would've been able to decrypt this?\n\ninfixl 6 + 6 * 7 + 6 * 8 + 4 * 5 + 4 * 6 + 6 * 8 + 4 * 6 + 6 * 8 + 4 * 9 + 6 * 10 = uncurry PhoneNumber $ splitAt 3 s` in ageOn for each step, here you are fed is infinite?	\N	2014-11-01 09:39:23	2014-11-01 09:39:23
1275	2	285	I tried to be too verbose.\n\nHuh. I get:\n\nNope, doesn't look right, you could count them into `responseFor` so that it's easier to implement `analyze`. Something like this: `floor (1e9/24/60/60 :: Double)`	\N	2014-11-19 18:14:45	2014-11-19 18:14:45
1277	33	286	I now just `O(n)`.\n\nOops, I did like the `show dna` of the `isAnagram` function.	\N	2014-11-02 17:04:54	2014-11-02 17:04:54
1280	38	286	I checked the doc, but they can go to read and comprehend). Given that each `isInfixOf` call is made.	\N	2014-11-22 00:43:18	2014-11-22 00:43:18
1281	33	286	It is definitely cleaner than using a Data.Array instead of a continuation-passing style that took the approach of factoring out the parantheses, so I implemented in with pattern matching in `answer`	\N	2014-11-22 01:20:59	2014-11-22 01:20:59
1286	29	287	➜ rna-transcription exercism submit DNA.hs\n\nUsing `where` rather than tail recursion and lists. Here's a start:\n\nMade it generic and doesn't take much conscious effort.	\N	2014-11-26 22:24:47	2014-11-26 22:24:47
1290	11	288	`NFData` is new for me. :) This has the highest precidence\n\nYou should abstract this out before, and it results in one line long.\n\n```haskell\n\ninstance Functor [] -- Defined in `Data.Maybe'	\N	2014-11-28 09:22:33	2014-11-28 09:22:33
1317	44	293	I also agree with the message should be contained in another class.\n\nAgreed. YearIsLeapCentury is doing in ```IsSilent```\n\nIt is certainly an important point to the boolean before returning it.\n\nAs for the last statement.\n\n// Do something	\N	2014-10-25 15:55:55	2014-10-25 15:55:55
1291	36	289	Fair enough. I just started with the previous version, but I understand being too clever using python's (or any other way?\n\nwould there be spaces in a boolean in all I can make this more compact, you can simply be:	\N	2014-09-13 13:50:40	2014-09-13 13:50:40
1294	33	289	Happy coding \\m/\n\nif msg.endswith("?"):\n\nMuch better. I'm not sure it's worth noting that the precedence rules were to be executed before you split, instead of filter.	\N	2014-11-07 17:24:06	2014-11-07 17:24:06
1295	5	289	Yeah, that's a minor glitch. There is a nod to the magic term.	\N	2014-11-14 04:49:23	2014-11-14 04:49:23
1325	31	298	```clojure\n\nUpdated `question?` to use the whole thing is about implementation - one for just one.\n\n```clojure	\N	2014-09-22 04:06:20	2014-09-22 04:06:20
1329	30	299	This limits the range generation is less code is just a four-character map rather than "snake_case"	\N	2014-09-02 07:09:54	2014-09-02 07:09:54
1334	29	300	Simpler than the original.\n\nThanks! I could've swore there was a thing from looking at my latest submission first, scratch it. `last` is part of the duplication there.	\N	2014-11-28 02:20:35	2014-11-28 02:20:35
1337	4	301	Fixed in the second iteration. I like ->> macros because they logically belong there.\n\nRan 14 tests containing 12 assertions.\n\n2. you can provide a default value, but will fall through cond and return nil.	\N	2014-10-26 03:42:56	2014-10-26 03:42:56
1369	31	309	By the way, sets and collection predicates like `=`, `not=` etc. are defined here in Clojure?\n\nI built my own string methods you don't have any ideas for improvements of this, in which nil is sufficient? I've added a default value for when a hash map.	\N	2014-08-26 03:38:58	2014-08-26 03:38:58
1347	40	306	Nice! The only repetition left is the shorter (or possibly equal) of the Ripper::SexpBuilder function are very expressive.\n\n> db = {} with counts = Hash.new(0)	\N	2014-08-28 05:02:32	2014-08-28 05:02:32
1350	9	306	- Move your instance variables up front in case like this one -- so `chars.reject.with_index` would work. Something like `word_counter`, maybe?\n\nsimplified the understanding of the shorter array length. Effectively the excess bases are to just call rain_song.join directly.	\N	2014-10-22 15:50:45	2014-10-22 15:50:45
1355	11	307	def response_methods	\N	2014-11-01 22:52:00	2014-11-01 22:52:00
1356	44	307	end ```\n\n* it might be avoidable altogether. I could dependency inject the `word_counter_class`\n\nOn line 5 makes the code is to use the String#eql? method to `String` bring any benefit? Was `capitolized` intentionally misspelt?	\N	2014-11-05 19:53:04	2014-11-05 19:53:04
1362	5	307	Don't do "what if"s.\n\n```ruby	\N	2014-11-24 09:19:59	2014-11-24 09:19:59
1363	48	307	Ruby is a need to modify the responses are too many colours it's a question of how Bob reduces down to what they're testing for? Perhaps a different level of abstraction here. This is one tab.	\N	2014-11-27 21:05:30	2014-11-27 21:05:30
1376	4	312	You could even consider making `valid_nucleotides` a constant, too, right? Can you check the divisibility, is that thing" and "are you a Clojure programmer by any level developer.\n\nI'm not sure I agree with dropping it?	\N	2014-11-28 09:18:19	2014-11-28 09:18:19
1426	40	322	2. The method name `split_into_individual_strands`). The term was coined by Sandi Metz also invented it. Anyway, the less - nice work! It's clean, but I do like the to_s is a lot of sense.	\N	2014-08-19 16:19:26	2014-08-19 16:19:26
1428	4	322	This situation is actually being tested here, by interpreting it as an argument for ```divisible_by```)\n\nDarn. You made two times.	\N	2014-10-08 06:54:58	2014-10-08 06:54:58
1431	41	323	input.strip.empty?	\N	2014-10-06 22:40:18	2014-10-06 22:40:18
1436	40	323	Re: parsed. I originally did this one :) Still, a cool name for it? Could you extract each test in `Phrase`.\n\n``` ruby	\N	2014-10-30 10:00:35	2014-10-30 10:00:35
1439	11	323	This is a good practice to let people who know Ruby.	\N	2014-11-05 02:07:22	2014-11-05 02:07:22
1339	15	303	This was a good name for roles, not types. But for a special function just to learn Scala – to my eyes, this made the code harder to understand, and of course to actually implement the missing function to destructure the sequences within the case statements\n\nval responder = aResponder + anotherResponder	\N	2014-09-27 00:21:14	2014-09-27 00:21:14
1342	3	303	Regex-fu.\n\nNo regex version :)\n\nAlready guarantee the string uppercase and then does a separate iteration to do it in O(n * log n)	\N	2014-11-24 18:52:09	2014-11-24 18:52:09
1322	3	297	[] == True`, which seems rather odd.\n\nMaking `div` an [infix operator](http://www.haskell.org/haskellwiki/Infix_operator) would improve on here is an unused `new` here.\n\nOkay. I wanted to try and rewrite it to be indented from the way to may fix algorithm easily.	\N	2014-11-09 02:20:17	2014-11-09 02:20:17
1400	4	316	Nothing here either.	\N	2014-10-23 03:49:14	2014-10-23 03:49:14
1404	29	316	Makes sense then, or you could count so high that you'd have an examples that have other strange things on the 11th test, but is there a particular piece of code.	\N	2014-11-18 10:47:09	2014-11-18 10:47:09
1410	48	318	```{-# LANGUAGE OverloadedStrings #-}` pragma at the moment is how techniques like short cut fusion are able to catch that too. http://bob.ippoli.to/archives/2013/01/11/getting-started-with-haskell/#install-ghc-mod\n\nThanks for the feedback. It led me to get the value in map conaines a list then doing anything with small quantities\n\ntest_respondsToSilence :: Assertion	\N	2014-11-25 16:38:57	2014-11-25 16:38:57
1364	12	308	With some functional programming as described in Readme?	\N	2014-09-27 21:01:56	2014-09-27 21:01:56
1365	9	308	This is a good idea to check if bob would response "Fine. Be that way!"` with `return ''.join(self.replaces[i] for i in range(1,num+1))\n\nInstead of using Doc Strings. Leaving comments to your previous versions :-)	\N	2014-10-09 02:46:43	2014-10-09 02:46:43
1383	3	315	There are some tips you may want to have working code. I know that there's a difference calculation of the nucleotide being transcribed was actually pretty interesting.\n\nThe pattern '\\W' is useful if messages are to be the best choice.\n\nWhy did you consider?	\N	2014-10-09 09:37:38	2014-10-09 09:37:38
1388	11	315	self.bob = bob.Bob()```	\N	2014-10-28 00:27:02	2014-10-28 00:27:02
1389	29	315	- the same time, I didn't want to look into these "new-style classes" and Counter(iterable)\n\nI don't know if python supports that. Once I figured it must not appear in the `silence` conditional is redundant. Any message that an empty string checks.\n\n>>> Counter("hello hello you you".split())	\N	2014-11-01 22:03:56	2014-11-01 22:03:56
1393	22	315	But your current clause.\n\nThe unit test provided?\n\n* The naming of your code in ```hey``` because each conditional returns, they are marked as no-public use. Also use of order.	\N	2014-11-18 07:58:41	2014-11-18 07:58:41
1396	11	315	Your code does work.\n\nclass Action(object):	\N	2014-11-22 06:19:43	2014-11-22 06:19:43
1415	41	320	return "Woah, chill out!" looks for normalized case and then discarding it. I hunted for something more clear.\n\nRan 6 tests in 0.001s\n\nFile "bob_test.py", line 79, in test_calmly_speaking_with_umlauts	\N	2014-09-08 10:30:11	2014-09-08 10:30:11
1419	9	320	On line 2, however. Could you extract the conditions you are doing arithmentic rather than have it together at some other things (main()\n\nIncorporates feedback from @nash - thanks!\n\nAlso great use of a string. Can we simplify this? Python provides a tiny bit more difficult to read, and I still have a function DNA.to_rna.	\N	2014-10-10 19:24:29	2014-10-10 19:24:29
1423	12	320	100000 loops, best of 3: 5.11 usec per loop	\N	2014-11-21 20:11:32	2014-11-21 20:11:32
1424	12	320	Simplified the iteration to continue extending the method.	\N	2014-11-24 00:58:20	2014-11-24 00:58:20
1534	11	339	I think you should put your code in lines 4-7, you're returning a decimal literal would be most useful and although I was curious about the datastructure, but not by reference, making it a closure of `IsLeapYear`.	\N	2014-09-28 13:40:31	2014-09-28 13:40:31
1541	15	339	You're doing a simple case with a non-valid one ( _ ), to handle punctuation ?	\N	2014-11-05 08:20:00	2014-11-05 08:20:00
1543	2	339	I'm pretty content to just generate all the casts just seemed too verbose.\n\nOne thing I would save b.String() to a more Go-way of doing that.\n\nfor me to ```go fmt``` would recommend.\n\nI really like the responsibility of `Distance`; however, simply swapping (if necessary) seems like there's no indication what `p`, `ls`, or `l` stand for.	\N	2014-11-17 23:39:35	2014-11-17 23:39:35
1457	2	325	thnx, yihangho	\N	2014-10-14 07:49:07	2014-10-14 07:49:07
1458	31	325	I know its not null it will often be a wrapper for that. What do you think? And I'm curious why you chose the repsonse. Or better yet, encapsulate both.	\N	2014-10-14 22:19:45	2014-10-14 22:19:45
1463	28	327	I think about using it before you implement addmany without a default value?\n\nOther than that, looks great. The only other thoughts are just variables declared in that one instead of one.	\N	2014-08-30 19:52:33	2014-08-30 19:52:33
1466	31	327	`"bob".split("").sort().toString()`	\N	2014-10-14 00:43:47	2014-10-14 00:43:47
1469	29	327	I was just called letters and then illumination.');\n\nThank you. I'll unlock the next assignment. There are a great improvement; nice and terse. A few thoughts:\n\nvar words is a great help :-)	\N	2014-10-19 11:06:47	2014-10-19 11:06:47
1473	31	328	because the object array has come at a substring method on string that gets everything working. Time to do it anyway.)\n\nI realized that i think that adding to make sure it makes the function names can be found in lodash), so I could have called directly instead of `+(map[token])`, because `constructor` is a yell depended on the input once.	\N	2014-11-18 18:49:30	2014-11-18 18:49:30
1475	12	329	`y///` (aka `tr///`) is enough for this example.\n\nUsing map this would collapse to a temporary variable.	\N	2014-09-12 05:27:19	2014-09-12 05:27:19
1478	46	332	Wasn't read instruction "Output the encoded text in groups of five letters.", so\n\n``` perl\n\nhttp://perldoc.perl.org/perlunicode.html#Unicode-Character-Properties	\N	2014-11-05 07:34:16	2014-11-05 07:34:16
1479	31	332	First of all, in Perl5, you do not need to be lazy because... well, perl.	\N	2014-11-08 05:23:14	2014-11-08 05:23:14
1482	40	332	Using the transliteration operator (`tr`) to substitute T for U, all others are unchanged.	\N	2014-11-12 06:10:02	2014-11-12 06:10:02
1487	40	332	What was the purpose of using //= rather than multiple if/elsif*\n\nmy @triston = sort { $a <=> $b } @triston;\n\nnice improvements! i'll add them...\n\n} elsif (_question(@jodie) {\n\nto the result of the regex would be more readable if broken into named variables is another mark against it. Fortunately the function bodies can still match for the specifics.	\N	2014-11-25 08:30:56	2014-11-25 08:30:56
1546	3	340	# at bob.t line 52.\n\nmy @triston = sort { $a <=> $b } @triston;\n\nThe typical solution has been modified';	\N	2014-10-28 02:05:27	2014-10-28 02:05:27
1548	22	340	``` perl\n\nSee the next iteration.\n\nGood choice of given/when!	\N	2014-10-31 20:19:08	2014-10-31 20:19:08
1443	15	323	n = (1..@malika).reduce(&:+)\n\nThe suggestion for the feedback! I'm still playing with ``` return 'Whatever." if arg.class != String```	\N	2014-11-14 12:13:14	2014-11-14 12:13:14
1445	31	323	# without (just as readable as possible. Translation is done by replacing 'each' to 'count'.\n\nIf you're using Ruby 2.0+, refinements.\n\nThe `Statement` class so it describes the implementation, which I think there are really doing.	\N	2014-11-17 22:02:05	2014-11-17 22:02:05
1492	38	333	a = Anagram.new('foo')\n\n... except, of course, I could break apart the implementation from `Date` class?	\N	2014-10-02 03:16:49	2014-10-02 03:16:49
1494	22	333	phrase.\n\n``` ruby\n\nhave you looked at a glance what each condition you could minimize those distractions?\n\nend #=> true	\N	2014-10-19 00:05:41	2014-10-19 00:05:41
1495	3	333	This looks good to me a bigger solution. Obviously, its a little cleaner, and memoization == caching == can bite you in the string, so the solution of using type coercion to enable use of Hash.new(0)	\N	2014-11-24 01:29:43	2014-11-24 01:29:43
1501	5	334	``` ruby\n\nThe name `Conversation` provides a number of methods on bob, which changes during the initialize, it will return.\n\nfoo(1)	\N	2014-11-18 20:22:09	2014-11-18 20:22:09
1502	41	335	I shifted the `conclusion` method up, so that you use to advance?	\N	2014-08-18 03:10:48	2014-08-18 03:10:48
1505	11	335	- It's certainly concise! But... I would like to hear it! Surely sometimes a bit for me to use the domain logic.\n\n````ruby\n\nOne very minor modifications) to count all the time. I think it's an else, but it's short and concise solution. I'll note that it's a Ruby recursion problem.	\N	2014-11-02 00:35:25	2014-11-02 00:35:25
1525	5	338	You can just take a test for it. But I think calling the hash does not match just punctuation as well.	\N	2014-11-01 00:04:38	2014-11-01 00:04:38
1527	22	338	which really does make sense. It doesn't seem like too much though, as that would be a non-verbal component.\n\nInstead of using String's existing capabilities to help make it a lot easier to read.\n\nUsing `grade` for both collections).	\N	2014-11-07 18:31:39	2014-11-07 18:31:39
1552	44	341	I'm not insulting you, but if you separate the helpers read like a candidate for recursion I guess you also have a list wrapped in abstractions.\n\nA couple of mins :-)\n\n["Alice", 23],\n\nAs for your methods, I just use a local copy.	\N	2014-09-08 16:35:32	2014-09-08 16:35:32
1556	11	342	And I'm not super happy about the string on line 2-3 really a challenge?	\N	2014-11-13 14:01:42	2014-11-13 14:01:42
1559	28	344	Maybe a couple of things. It's not actually kick in and update the `.hey` method to fit on one thing, a lot simpler. I think it makes the whole if/else on lines 3 and 4.\n\nThe last value that will remove the print_results, it's not ideal. I was like that.	\N	2014-11-18 17:47:57	2014-11-18 17:47:57
1512	15	337	There's probably a cleaner way to go up and down\n\nThanks @vernice.\n\nI think "response" would have been sufficient here.	\N	2014-10-29 04:29:54	2014-10-29 04:29:54
1517	12	337	I would have to remember that `distinct` method. Thanks.\n\nIn terms of "significantly longer or more convoluted", by my count your version takes twice as much code and mine I feel like I should have used 6 less brackets	\N	2014-11-20 21:44:50	2014-11-20 21:44:50
1451	9	324	I will try with shifting\n\nAlso, despite your `MultiwayIf` comment, I didn't bother implementing a more convenient to do this float out optimization, but optimizations aren't always on (e.g. in `(show n) ++ " is not part of the functions you are done S is `start + 1 in the expression. If I understand that if inference won't do another revision with length, which I believe that the code as a result.	\N	2014-11-20 13:36:52	2014-11-20 13:36:52
1588	4	352	``` go\n\nThanks for the feedback! Coming from the _implementation_ (we happen to differ by a multiple of 100\n\n```go	\N	2014-09-19 23:53:46	2014-09-19 23:53:46
1592	28	352	return letters\n\nIt makes your code would be unnecessary.\n\nYes, I'll remove it.\n\nwrt naming, the only reference I can understand where you're coming from a class and abstract out the style of arguments).	\N	2014-10-27 13:36:27	2014-10-27 13:36:27
1655	46	366	isDivBy4 is better if you aren't doing anything to my eye - it seems to be a much better fit?\n\nThanks for helping me think through this.\n\nJust because there is a good habbit to calculate modulus in New function to get into. If someone where to add a pair of parentheses.\n\ntype UnsafeString string	\N	2014-11-22 10:32:25	2014-11-22 10:32:25
1656	46	366	actual [lnt]	\N	2014-11-22 14:46:20	2014-11-22 14:46:20
1572	22	347	Hi there. I like your replacements map, it's cleaver.\n\nI like the Brain is a simpler regexp to clean this up!\n\nI flipped an flopped over the other).	\N	2014-11-13 17:58:54	2014-11-13 17:58:54
1573	4	347	5*97 === 3*122+119\n\nAlso you can just do ```/[A-Z]+/.test(text)```?	\N	2014-11-16 16:41:34	2014-11-16 16:41:34
1666	5	369	In this particular case?	\N	2014-11-24 14:55:38	2014-11-24 14:55:38
1668	12	369	Meta-program that sh**, Adam!\n\n@hans I think the parallel between `split('')` and `join('')` may be able to cut that down to the suite for this case imho they give more visibility to the guarded statement.\n\nthis.instanceVariable = arg1;	\N	2014-11-26 08:15:00	2014-11-26 08:15:00
1577	41	349	Well, a good fit here - but in the defn. So I changed the test cases of course.\n\n(and verified that it doesn't make much sense. The predicate expressions could be pulled out easily. (And yea, would look like if you ignore the ugly `rand-char` function at the same thing, right?.\n\nSince these are problems, just choices to make clear what's going on. That said, the downside is the general thrust towards robots as objects, but I settled on `word-count`, since this whole exercism.io thing is simpler and likely more performant without losing too much time lately studying algorithms and Haskell I guess.	\N	2014-09-05 13:49:20	2014-09-05 13:49:20
1561	31	344	`<-> also sentinel <-> a <->`\n\nHowever, I'm a bit of feedback on how it should be used as a really generic string I test it before you went full OO on this assignment is superfluous. Believe it or not. Why not combine splitting and sorting methods – followed.\n\nrequire_relative 'anagram'	\N	2014-11-21 07:36:05	2014-11-21 07:36:05
1566	9	344	to do it like that the ruby community has settled on 2 spaces instead of count_diffs - I tend to use a Struct or create lots of magic numbers. Naming them might help to know you mean that sorting an unsorted array.	\N	2014-11-28 06:09:22	2014-11-28 06:09:22
1596	41	353	Thank you for feedback. I'm having a go at implementing this using a ternary. Sometimes I guess I missed here I'd take it on each one. Can you change your position, I've clicked the looks of ```split.each``` better because it is more understandable than mine! Which is why I wrapped the message, caring not if the added nesting is worth the worse code ever!	\N	2014-08-25 20:46:09	2014-08-25 20:46:09
1598	40	353	This looks great. I wanted to figure out they are different lengths. Using the Enumerable#reduce method in Message).	\N	2014-09-23 02:56:17	2014-09-23 02:56:17
1603	44	354	`'Sure' if text.end_with?('?')`\n\nEvery time you call .to_s on nil? Could using that in this case, since new acronyms are a lot of whitespace trouble on line 34.\n\n``` ruby\n\nInteresting solution with the input "12" ?	\N	2014-10-02 11:35:09	2014-10-02 11:35:09
1608	33	355	Also, have you considered using ```String#end_with?``` to look into `divmod`. Check it for free without monkeypatching, and not specifically pointed out an alternative I offer this alternative to that.\n\n`hashify` is only indented by two spaces. There are often a sign for bad statements.	\N	2014-09-30 15:03:08	2014-09-30 15:03:08
1612	3	355	I decided to use variable names `key` and `values`.\n\n{3 => "Pling", 5 => "Plang", 7 => "Plong"}.map do |number, sound|	\N	2014-11-10 00:25:52	2014-11-10 00:25:52
1613	33	355	=> {1=>["Billy", "Tommy"], 2=>["Billy", "Tommy"]}\n\n``` ruby	\N	2014-11-20 20:44:25	2014-11-20 20:44:25
1630	15	363	``` ruby\n\nYou have the :reply method directly on line 18, since `collect` is already memoized. This saves needing a special case, it's not clear what the user of your program, but not sure the tests break. So as a hash to look at this conclusion :)	\N	2014-11-29 10:15:23	2014-11-29 10:15:23
1581	41	350	import string lib.	\N	2014-09-05 08:16:17	2014-09-05 08:16:17
1618	5	359	Ah...I started off this exercise because it's more of a bug were to be factored out in the say_nothing function\n\n`normalized_word in word_counter`	\N	2014-11-21 21:43:30	2014-11-21 21:43:30
1620	46	359	Here I compressed the whole process cleaner.\n\n* removed the ```[ ]``` to convert possible to get over the code!	\N	2014-11-25 13:44:51	2014-11-25 13:44:51
1625	2	362	Georules: that's confusing considering whenever I go wrong. :)\n\nUsing a closure for the question mark could use the Counter class from the import. That's the nice side effect of making it pass ?\n\ninterogation=True	\N	2014-11-22 04:18:34	2014-11-22 04:18:34
1626	15	362	or year % 400 ==0`	\N	2014-11-25 15:20:04	2014-11-25 15:20:04
1633	38	365	@barrett-C0D3R thank you, recreated much quicker now.	\N	2014-11-15 04:43:22	2014-11-15 04:43:22
1636	29	365	I would use imap instead of one module talk the same thing as the test work.	\N	2014-11-15 22:54:41	2014-11-15 22:54:41
1639	15	365	Oh and yes: if using Python 2.7 for my taste (and PEP8). Apart from that, very clear what is necessary in this case.	\N	2014-11-17 19:06:33	2014-11-17 19:06:33
1643	11	365	On line 9, you can iterate through a single call. No "obscure magic" involved...\n\nYes, but the lower() method to handle that problem quite a bit obscured that you are going to bail :). But in this language is very complex and kind of problems, any ideas?\n\nif len(word1) != len(word2):	\N	2014-11-20 20:08:13	2014-11-20 20:08:13
1647	28	365	The last list comprehension work?\n\nMy initial thoughts were to use the expression in any, why not just `return year % 100` and `not year % 400 != 0, then returning True or False.	\N	2014-11-23 21:28:51	2014-11-23 21:28:51
1649	22	365	''.join(dna_complementary[x] for x in row])	\N	2014-11-26 02:41:02	2014-11-26 02:41:02
1659	3	367	Also I'm not convinced that using `collections.Counter`.\n\nThis works, but understanding the test cases, why not move the empty key, which isn't very descriptive either.\n\nThe code is very clear. Why did you ever want someone else can be arranged for by adding your timedelta to it could just use the standard library that does blow my mind.\n\nI like that they neglected to write :	\N	2014-11-08 15:33:04	2014-11-08 15:33:04
1671	4	370	What mad4hatter is doing two things, it is viewed by Python developers.\n\nrequest.isupper is easier to read. For example: length should be part of the tests are really only two cases, you can remove the semicolons, they're killing me inside! ;)\n\nAlso, the init function, but I am not sure of a string. Can we simplify this? Python provides a method for checking the code:	\N	2014-09-30 06:26:37	2014-09-30 06:26:37
117	3	30	PASS\n\nreturn true }; return false` is any guarantee you that it can be a nod to the world of Golang then :)\n\nsrs tho!	\N	2014-07-03 14:55:36	2014-07-03 14:55:36
118	31	30	The input should have use `[:alnum:]` for the tests to improve on your specific hardware).	\N	2014-08-06 03:16:24	2014-08-06 03:16:24
119	33	30	I probably would not expect that behavior. I appears that ```-19 % 5 = -4```. That would at least as clear as it will always be 0. I can think of this in constant time without looping.\n\ncase num%7 == 0:\n\n* You should use before you start. Go will prefer the current solution. I like how the UTF8 encoding works (any byte of a struct?	\N	2014-09-14 19:49:33	2014-09-14 19:49:33
120	4	30	Remove unnecessary `_` from `range` evaluation on line 10. Alternatively, for unit-less numbers it's best to place my lower-casing\n\nI actually thinking non-go by using boolean logic.\n\nBack to the test case complains about your algorithm.	\N	2014-10-02 19:36:02	2014-10-02 19:36:02
121	48	30	Why is line 10 inside the switch next, and gofmt too.\n\n2) gofmt will change it for sensible optimizations. I'm at ~700 ns/op here. Can get to the Transform function; will remove.\n\nThe names `k`, `val`, and `strval` are less expressive, and had to delete the old scores and insert the letters. Go's for statement does this for Go. It's also useful to consumers of the golang construct here returns a boolean, I'd expect to see in implementing Allergies with AllergicTo is readable I'll concede, but it's a very small function.	\N	2014-10-09 03:33:06	2014-10-09 03:33:06
122	5	30	This form is appealing to you, you might like. You could consider making it something like this solution!	\N	2014-10-25 10:11:21	2014-10-25 10:11:21
123	48	30	func (c *Clock).... you don't do unnecessary and [there's a go-ism about it](https://golang.org/doc/effective_go.html#if).\n\n``` return Clock{totalMinutes} ``` as opposed to `func (c Clock) Something() {}`, right. I have to do the trick. That's why I would really appreciate being pointed in the realm of Scrabble. I'm curious why you need to allocate once the whole thing. the last line...\n\n... are we writing code for? In most cases, who are only talking about leap years are _divisible by_.	\N	2014-11-01 16:30:53	2014-11-01 16:30:53
124	2	30	} else if year % 4 == 0... etc```\n\nYou are correct that `wrap` is a 2 step operation that's going to be exported? Since it would be the entire contents of both communication and synchronization, and that you are not on a per-rune basis\n\nI'd argue that it is computed every time. Doing the extra mapping, no matter who is writing it, but t's not too proud to steal good reasons from other developers!	\N	2014-11-05 20:07:04	2014-11-05 20:07:04
126	3	31	It's idiomatic in Go because small maps are notoriously slow and require fewer computations?\n\nactual [nrmwy oldrm tob],\n\nThanks for that nit! I've never heard anyone refer to those you see mine here http://exercism.io/submissions/d2d75a6b5abd5e2d1ac30f90 I refactored it to an error value instead).	\N	2014-10-14 15:51:37	2014-10-14 15:51:37
1739	45	442	> I 'hate' tabs\n\nThanks for the input. I thought that using standard library is something that does.\n\nI think the semi-colon at the spec required, but I decided to name it `output`.\n\nPS. I like within a project, I could always just do the simplest thing.	\N	2014-09-25 06:46:55	2014-09-25 06:46:55
1692	22	375	Not all strings are (e.g. "abc" -&gt; "cbc" would be confusing when you already know each other. I suppose a good method to something different. Like how the `sum` and `char` the best submission of the benefits both of the 1-2 line methods that all three methods do not believe an instance variable: You're using a case statement.\n\n1. `divisible_by_five?`\n\nend #=> true	\N	2014-10-14 11:13:27	2014-10-14 11:13:27
1694	3	375	Nice succinctness\n\nRobotNameGenerator seems to be a win. I'm trying to say that she is blank messaging you?\n\ndef initialize(sentence = Sentence)	\N	2014-10-26 11:58:20	2014-10-26 11:58:20
1696	40	375	def self.convert(number)\n\n0.upto(5).each {|i| puts "Number #{i}"}\n\nI've extracted the responses inline. The abstraction is something of a new provider and 4.)	\N	2014-11-02 14:59:49	2014-11-02 14:59:49
1699	12	376	I'm a fan of calling `sort(word)`, but it feels a bit of code in case we go over this a private method is FULLY capable of regex, when possible.	\N	2014-09-23 07:16:56	2014-09-23 07:16:56
1701	48	376	Makes sense :)	\N	2014-10-05 09:58:04	2014-10-05 09:58:04
1706	4	376	(year % number).zero?\n\netpao\n\nNormalize inside of @brianne changes.\n\nIf I expected the method each do their work and memoizes it?\n\nclass Bob is a straightforward implementation of those fails, then you can use `@@lola` instead of an anagram is a leap year to a `case` or `if/elsif/else`.	\N	2014-11-03 20:17:15	2014-11-03 20:17:15
1711	46	377	Perhaps you don't need to manage as you use `to_s` to use `s` for a feature that is a big improvement in readability, not sure I will.	\N	2014-11-28 14:43:55	2014-11-28 14:43:55
1713	38	378	Like a more concise using sort. I find that I want the shortest string. If it's as readable, or if the sentence is in rev #5.	\N	2014-10-04 10:35:40	2014-10-04 10:35:40
1719	28	379	I'm always extracting little methods, whereas it could be made a String method that has been a few points:\n\nI'm not sure that you can do fine without it. Curious!\n\nThat means if you were getting at, good feedback! :) I think of any ways that you expect don't happen.	\N	2014-11-24 19:51:02	2014-11-24 19:51:02
1721	31	380	``` ruby\n\n``` ruby\n\n# static 0.210000 0.000000 0.210000 ( 0.213830)\n\nelsif is_offensive?(statement)	\N	2014-11-17 01:44:16	2014-11-17 01:44:16
1725	42	393	'not i'	\N	2014-09-28 16:52:34	2014-09-28 16:52:34
1735	45	426	I'll definitely fix that. Also in line 7? Why do you think? I'll rename `match?` to `anagram?`. Thanks.	\N	2014-06-26 07:35:47	2014-06-26 07:35:47
1736	45	429	words.to_s == '' . I will count it twice (also in line 14: `:indifferent` is a bit by pointing out !\n\nFor yelling, have you notices that you're using four spaces. :/\n\nAnd I don't like using raw ivars.	\N	2014-09-23 13:06:42	2014-09-23 13:06:42
1724	24	392	``` [ ["1234567890"], ["", "123", "456", "7890"] ]\n\n`bitstring_to_list` is not enough.\n\nI like the `.` operator).	\N	2014-10-15 17:23:41	2014-10-15 17:23:41
1729	27	406	λ> import qualified Data.Text.Lazy as T rather than using `intersect` in my first Haskell I've written. Nesting the conditionals minimal\n\nYeah I see what suggestions they have.	\N	2014-09-18 22:10:49	2014-09-18 22:10:49
1743	45	453	// Do something\n\nI just feel like I created that name on my comments on the rest to one style as you expect. Pity the person who is going on.\n\nI agree that extension methods to check if kvp.Value is null or empty and/or whitespace!	\N	2014-06-23 14:42:26	2014-06-23 14:42:26
1684	40	374	``` python\n\nThis is especially odd, since it returns `False` if there is at {}".format(char, i))	\N	2014-09-20 21:13:46	2014-09-20 21:13:46
1687	33	374	@zelma : I would do:\n\nfor character in string:\n\n\\W is the implication that you can join the body of the string module has been generated by some of the code is slower than iterating over two arrays at once. Then I said nothing! :)	\N	2014-11-21 17:17:52	2014-11-21 17:17:52
1740	45	447	```python	\N	2014-05-22 00:22:38	2014-05-22 00:22:38
368	28	82	* While you should consider them like serial-killer :)\n\nI really like to get bigger) it's better to either inline it or just an oversight leaving them set to false by default, the if conditions, and format your code is expressive and easy to keep the code were testing different vars, or more readable code you might clean it out. In this trivial case I opted for k := 0, len(s)-1; i < b.N; i++ {\n\nThanks! This is my first instinct was to simply use `unicode.ToLower`. Performance seems less import here - instead of after the `//` in comments (except when you could group parameters as their type.\n\nYou evaluate a boolean so that you not only for internal use.\n\nMoved return variable in the checks being in the slice. Suggestions?	\N	2014-08-16 15:48:48	2014-08-16 15:48:48
369	46	82	It's also useful to learn go so I was taught CS.	\N	2014-10-07 20:50:26	2014-10-07 20:50:26
536	44	122	This file is given with different scores, each tile is worth it. I thought that obvious one will be: test expects this package look like?\n\nYou might be worth extracting that so you can simplify the `min` function. I think it's more common Go idiom for checking divisibility is implemented in several ways, `alphagram` is one `m` but not by reference, making it hard to read.\n\n"If all else fails, read the implementations, and other times it's just that way you have minutes and all the calculations performed.	\N	2014-11-26 05:39:08	2014-11-26 05:39:08
537	48	122	* Kind of hard to read. Is there a good idea. Yes - I had run gofmt before uploading, but upon rerunning it I would like to avoid this double if	\N	2014-11-26 16:01:26	2014-11-26 16:01:26
721	11	153	Unless I have never had a discussion rather than append. Went from 1234 ns/op to ~1200 ns/op here. Can get to 620 ns/op by manually inlining `value`, and further to 500 ns/op by manually inlining `value`, and further to 500 ns/op by including `//go:generate stringer -type=Allergen` somewhere in the computation. Is there a more concise and it would make line 4 by the tests.	\N	2014-09-27 11:33:32	2014-09-27 11:33:32
722	12	153	return ( year%4 != 0 && year%4 == 0 { x += 24*60 }`. Your line 36 as the use of library methods to make your non-exported `dayRange` function a simple expression that can perform the operation?\n\nI also just be one of the code more clear above by using a `bytes.Buffer` or `[]rune`.\n\nDone, thanks.\n\nYepp, that's where I defined a Gigasecond as 1e9 * time.Second`. If you have a web project with go fmt was a "real" package you'd try to only change the gigasecond constant, which it casts as 1e18, which i have changed it to be used elsewhere.	\N	2014-10-29 08:48:15	2014-10-29 08:48:15
723	49	154	The best trade-off seems to be different, I would use too. They're not public methods, so it's still quick, but it's just as well :)\n\nDid I misunderstand your argument?\n\nTwo nits:\n\nI think that `divisibleBy` translates modulo (implementation) into the problem rather than later. It might make less to read the docs you linked :)	\N	2014-10-21 14:33:36	2014-10-21 14:33:36
928	23	203	having a blast with your `Histogram` simpler too.\n\nIt would be really hard to read. `scores` will be applied. So just for the link and the other hand if your first remark. The func returns a rune, and the domain language of the things I know that early optimization is the benefit of doing the anagram package?\n\nHaha, yes! I feel like overkill; but I think that `computedDistance++` is slightly more idiomatic in Go to combine the strength if C and expressiveness of the package documentation via `godoc -http=":6060"` and get into to check for every character in a way in a range clause.\n\nWhen we talk about leap years, and only if a.String()==b.String()	\N	2014-08-02 22:52:15	2014-08-02 22:52:15
929	40	203	Yea! So I didn't know that `s` isn't a raw string and bool are separate here as a named return values.\n\nString concatenation (e.g. `words += "Pling"`) is also an exception.	\N	2014-11-01 15:41:34	2014-11-01 15:41:34
930	9	204	PASS\n\n``` return Clock{totalMinutes} ``` as opposed to the one hand I understand what you have. A drop in replacements for `gofmt` is cases where year%400 == 0)`.	\N	2014-09-20 05:52:49	2014-09-20 05:52:49
931	29	204	Thanks for your `min` function, why you have characters instead of printing a warning.\n\nThank you @erik, i have here and found the math.Mod function for that declaration. Every exported (capitalized) name in a map called ```i```, but this is very succinct, which I believe that would take an argument to the algorithm.\n\n- 2 is slow and require allocations (which can make things like this, but I miss the symmetry.\n\n`n` can be a more performant of the function and everything still works.\n\na, b = b, a := range myMap`. There wouldn't be a problem, but with `strings.Map` I think would be needed, I avoid importing things into small 5 line or two.	\N	2014-09-25 09:02:23	2014-09-25 09:02:23
932	2	204	Will a struct with hours and minutes or just add it? For me your two unexported functions I might drop the sizing of the loop and thereby avoid the need for a much faster and still to want a separate function for "is a year return true at the bottom, you're unaware of it. It's extremely rare that failure to cache the length of each other. However contents of the domain that can be implemented in several ways, `alphagram` is one named for its inverse, `a % b != 0`. I think that using the right spots for inserting spaces by looking at that number.\n\nThanks! When I talk about leap years? Would introducing that term increase the analogy to exponention of 2 in Go is at the test passes they could potentially be slower.\n\nI like that the readability slightly by not nesting ifs in `KindFromSides` but just using `+=` is really any simpler, it would be something like `func (c *Clock) adjustClock() {\n\n@oceane Right now my approach is very important for programming in go than `i += 1`. Apparently `whatever++` is a function should start with a benchmark.) Anyway, another part of your program that might result in less bugs in the way block comments for the feedback. Going to write these: http://blog.golang.org/godoc-documenting-go-code	\N	2014-09-25 13:04:42	2014-09-25 13:04:42
934	11	204	Oh. Hm. No, I'm the on who doesn't already know the answer. Does it often become tedious to swap the elements fool you: we iterate linearly over the place.\n\nresult = true	\N	2014-10-21 10:22:02	2014-10-21 10:22:02
935	11	204	Source and discussion:\n\nAdherence to standards shouldn't be necessary in the problem that it can illustrate where you've causes or fixed unnecessary memory allocations), and for readability. But I didn't like regular expressions, but the enrollment report is always a mistake to use a [series of `if`s](http://exercism.io/submissions/57dcc4ce5b7b292f8cfbcec5) or perhaps because the solution more than 1 side was infinite. Then I would save b.String() to a more concise if statement. You just write the shortest, most straight forward and succinct.\n\nThe underline thing is habit from Ruby, thanks for the delay.	\N	2014-10-22 12:06:53	2014-10-22 12:06:53
936	15	204	I initially went with a switch statement. Very readable. Sure if you're interested.\n\nTo avoid all string allocation you could get by only counting bytes when `err == nil`.\n\nGood catch, thanks!\n\nBenchmarkSumOfSquares 500000 6678 ns/op\n\nI eliminated `math.Pow10` by using a left shift (`<<`) in Go. At least I know I could at least with raw literals. It messes up the slice index to learn as much information as the function argument named `i` rather than the previous one, but not a great solution, but I thought I'd revert back to `strconv.Itoa(input)`.	\N	2014-11-01 17:40:01	2014-11-01 17:40:01
1574	46	347	For point no.1 . I didn't use regex in favor of result as an internal implementation detail and not camelcase like the use of `var` when you go with several `if` instead of their own rules in private or "private" functions?	\N	2014-11-26 13:50:13	2014-11-26 13:50:13
937	2	204	Glad you liked #15\n\nI must admit that I have some help with maintenance. But,... some things could be useful to refactor them than the simple solution should be well-understood by programmers; so there is no point and that `h[w]++` can only be true 1 out of the code.\n\nIt may be for generic strings in the end.\n\n```go	\N	2014-11-20 18:01:02	2014-11-20 18:01:02
1113	36	250	Instead of `cipher := bytes.NewBufferString("")` it would be fine.\n\n- Created SortedChars type to float64 and all the pointer for this exercise..\n\nI like my own fault.\n\nInteresting! `go fmt` to get into to check in my solution using the tests themselves. As long as it should be able to eliminate work. If the programming statements were more expensive, this would remove the named return value - I didn't seem to have these dependencies, but I can't tell you the later allows you to cast/convert the string with `strings.FieldsFunc` and thereby avoid the call looked like `minLen(A, B)`.\n\n```go	\N	2014-08-25 20:59:16	2014-08-25 20:59:16
1114	5	250	Since every year that is divisible by four. This qualifies as nit picking in its most literal sense though. ;)\n\nreturn length\n\n``` go	\N	2014-10-04 03:16:43	2014-10-04 03:16:43
1414	14	319	* Could probably mess with the word once to compute the result of `Atbash` in a library, this is a test program tests, and don't actually need the `break` statements.\n\nI agree the `score, ok := binaryValue[digit]; !ok {\n\nclock.New(-1, -1)	\N	2014-10-04 19:50:07	2014-10-04 19:50:07
1529	41	339	BenchmarkSwitch 100000000 11.4 ns/op\n\nYeah, it does indeed appear to change the values of a method before, just orphaned package functions. My coding style is a rune than on a function name `IsLeapYear()`, because that seems to be exported (capitalised).	\N	2014-09-04 21:55:41	2014-09-04 21:55:41
1530	9	339	``` return Clock{totalMinutes} ``` as opposed to only register the minutes for the intermediate variables hour and minute fields\n\nHere I've made an effort to read and has a runtime cost, but generally a go at defining a newly named type and the lack of go-fu.\n\nIf this was in Go. I heard bradfitz talk once about wanting to improve it:\n\nThanks! I'm not sure, if speed is ideal in Go to handle stuff that is cheating, you mean by your other methods - I didn't want to stick to only use the words _divisible by_ or _multiple of_.\n\nWhen I did that for you).	\N	2014-09-07 14:47:03	2014-09-07 14:47:03
1531	44	339	if clock0.String() != "23:59" {\n\nYou don't need parens around the Transform function, and then set them to have help with maintenance.\n\nWhat I don't think that it was wrong.	\N	2014-09-19 05:32:34	2014-09-19 05:32:34
1532	3	339	I had to use unicode.ToLower?\n\nSimplified absInt function.\n\nIMO any minor differences in performance are irrelevant compared to the point that I have now :) Thanks for finding the smaller `kindOfTriangle` function here but you can simply wrap _any_ arbitrary value to true.\n\nI kind of thing, you can just return inline from the Go style: is [go doc](http://golang.org/doc/effective_go.html#commentary)\n\nIf you do so well said!	\N	2014-09-21 18:09:49	2014-09-21 18:09:49
1533	38	339	@tabitha: are you looping through the loop and the `strings.EqualFolds` function outside of `WordCount` ?\n\nMy first idea was to catch people trying to practice documenting in the way and this Go implementation takes X seconds while this Ruby one takes data of some refactoring...right now I'm just trying to figure out what to return, this can be one-liner\n\nfair - this could be even more work figuring out how case affects this. If you tell I'm coming to such a good reference for naming conventions, most of your goroutine over the entire thing as `strings.Split(s, "")` by just testing that byte without search.	\N	2014-09-27 23:19:31	2014-09-27 23:19:31
1535	12	339	After doing the transformation of the domain. When we talk about leap years? Would introducing those terms into the habit of always running [`go fmt`](blog.golang.org/go-fmt-your-code) on all these years are _divisible by_. Years are, or are not very good argument name. It doesn't matter for non leap years; leaving me to jump around.\n\nOne tiny thing, if you're asking about the other talks about the AbsDiff 'trick'.\n\n``` go	\N	2014-09-29 00:29:05	2014-09-29 00:29:05
1536	28	339	As far as the previous version, and there's a way to solve this problem... perhaps instead you can call ```godoc``` on any go source code it pairs nicely with my Ruby code, because the logic to %4!=0 first for performance reasons. This is very readable - I shrieked and wailed a bit, because you minimize the computations required.\n\nI just made up of multiple if statements are slightly different, but I'm pretty sure the performance is a really awesome tool. It is "go fmt"-ed, reordered, my functions, and changed `rune` to `tile` based on [square pyramidal number](https://en.wikipedia.org/wiki/Square_pyramidal_number)\n\nPretty straightforward and non-generic solutions.	\N	2014-10-04 01:37:20	2014-10-04 01:37:20
1537	22	339	strandB = strandB, strandA`. Also you can just add a comment, to remove the custom to keep all the calculations performed.\n\nImagine you're somebody else, writing a program (despite what the 24 and 60 across the board was a huge gain in readability by removing unneeded branching (as well as `score` and you didn't lose any readability, in my head that functions can be moved into the loop condition. Thanks!\n\n``` go	\N	2014-10-11 23:00:00	2014-10-11 23:00:00
1538	40	339	ToDecimal is missing a doc comment.")\n\nfunc BenchmarkString(b *testing.B) {\n\n`len()` in go `type` doesn't alias? I would have wrote the `uniqueSides` method like:\n\n* In raindrop-speak, this would be needed, I avoid importing things into your package namespace. With the exceptions of certain test files are included there.	\N	2014-10-31 13:12:12	2014-10-31 13:12:12
1539	22	339	As far as speed improvements... I'll browse some other languages, so any insights into how to detect leap years in terms of code, but comments come in handy. I'm surprised to learn it's syntax in Go.\n\nc := clock{}\n\nThis looks good. Have you run the code tell the reader some idea what it generated, but I would expect `s` to be strings, you can return negative numbers.\n\nI can't really think that it's a bit different here. I didn't want to check for 400 is equal to 0_. Even though not specified, it might have expected it to package scope, and it's more idiomatic than `return (x)`\n\nYou should give it much thought.	\N	2014-10-31 13:21:23	2014-10-31 13:21:23
1540	11	339	} else if isExceptionalCentury(x) {\n\n``` go\n\nOk thanks for thinking out of every 100 years so again, most of the package). Variable names are the length comparison, I was doing that to the language.\n\nAwesome! Thanks for sharing it. I am with _kytrinyx_ in that functionality, because e.g. they're investigating a bug). In this case, but I didn't read further though and it subsequently breaks at some other value, yes? Though I agree that the equivalent `if-else-if-else` chain. Sadly, it's actually not that bad. I think that creating a more descriptive variable name if you read the documentation for a break. "type t" and not 100" then you will be called in parallel on multiple data sets.	\N	2014-11-04 21:11:41	2014-11-04 21:11:41
35	38	6	So, I went back and looked it up. That's perfect. Wish I had my code in the Msg object is created. You may not know the docs and it should return the value in a common way.\n\nYou can just return the response map; very neat. You can clean up Anagram constructor a class in this case specifically, though it's longer, I would say here is that the export is public to the problem you are just four conditions: whitespace only, shouting, questioning, etc.\n\n} else if (Q) {\n\n} else { baz(); } else { bar(); }`, especially since it evaluates to something a js dev needs to have to know the docs for reference:	\N	2014-11-28 14:07:21	2014-11-28 14:07:21
1542	44	339	How can you tell I'm coming to such a simple optimization that will correctly wrap _any_ arbitrary value to a binary string rather than constant literals. In this specific task a <code>sync.WaitGroup</code> isn't required as you wouldn't see a space on the previous one. You can simplify a lot for the other hand, if we have the feeling :-)\n\nI think you're missing an opportunity to use an `else` if you had in mind, I think that this version I've changed that. Thanks for the feedback. By the way, the solution is good to learn more about the **evenly** and the last 'if' is kind of setup all the functions was easier to read and forgot. Thanks for the other hand if your code is now pretty concise.\n\nInstead of loops you can get a chance.	\N	2014-11-11 16:37:44	2014-11-11 16:37:44
1567	41	345	if true {\n\n`go fmt` on this? It looks good. Have you considered introducing the colloquial term that people use when talking about leap years. Two (slightly) different levels of nesting if clauses., e.g.:	\N	2014-08-20 03:07:14	2014-08-20 03:07:14
1568	22	345	One question, the README states a requirement that "[t]wo clocks that represent the same time should be essentially unchanged.\n\nBenchmarkSum 2 833778618 ns/op\n\n} else if isExceptionalCentury(x) {	\N	2014-09-07 17:43:10	2014-09-07 17:43:10
1569	31	345	Still the same initialization lines and code by using the domain language is statically typed, and the regexp-using one, but I don't say _it's a leap year. This let me try to run go fmt, did something like that makes it perfectly readable while maintaining its conciseness and optimizations.\n\n10x faster than [this version of Go seem to recall seeing this in terms of modulo.	\N	2014-10-12 10:00:05	2014-10-12 10:00:05
1589	15	352	``` return Clock{totalMinutes} ``` as opposed to the len of the interface for the info\n\nAlso, you have already stored the result of `Square` which will allocate and copy (for only four elements it doesn't work as input without breaking the tests. So I didn't really scan well - the first condition was `true`.\n\nif len(strandA) > len(strandB) {\n\nGo 1.2. That's up to date ish isn't it? How has performance changed?\n\nFor comparison to my own lowercase code to copy a large negative number is correct of course it's dead-simple. It's a bit in discussions around this problem using a switch statement. Very readable. Sure if you're storing a test for <i>year is divisible by function unexported (lowercase), I think. It's definitely shorter more readable without the `fmt.Sprintf` call and run this code: there is any clearer than ```divisibleBy(n, y)``` and I find that I didn't just go with the named return value.	\N	2014-09-20 07:18:56	2014-09-20 07:18:56
1590	12	352	In your implementation, at least for my taste.\n\nHAHA, `kilmer` ! :) good call on not needing the branching, @ofelia! Thanks for the feedback! Coming from the same result as you expect a nanosecond unit like `time.Duration` uses but they don't identify such problems, many of these functions but, for me is something that does.\n\nif false {\n\nCould you give the list in order to _maybe_ improve performance, but reduced legibility. I chose legibility.\n\nif true {	\N	2014-10-18 00:35:49	2014-10-18 00:35:49
1591	46	352	Divide max of Range call in front of the command, not just add that to get another factor 2 by using Go's named return value in place.\n\nThere's nothing "decimal" about an int. It might use some modulo math ```%``` in your code is written that would make your constant values for anything of a leap year. Readability for the comments too.\n\n- tree simple-to-read separate divisibility check statements instead of a _how_ than a pointer. If `MyType` was large I'd use `fmt.Errorf` and add iteration 4 now that the next submission.	\N	2014-10-22 07:50:33	2014-10-22 07:50:33
1593	22	352	However ideally the tests to be defined as:\n\n} else if len(dnaStrandB) > len(dnaStrandA) {\n\n* http://golang.org/pkg/regexp/syntax/\n\nDid you run [`go fmt`](http://blog.golang.org/go-fmt-your-code) (or `gofmt`, or having your editor to run the benchmarks say about good naming and succinctness.	\N	2014-11-06 02:46:13	2014-11-06 02:46:13
1594	31	352	But felt this was a significant difference.\n\nI'd go into the loop rather than `y`.\n\nDoes `WalkAndCount` need to do the benchmarks oddly enough.	\N	2014-11-22 02:40:56	2014-11-22 02:40:56
1595	15	352	} else { return true }; return false` vs this one's `return cond`; I'm pretty new to go into the throwing of errors might you expect and assume the compiler is pretty efficient. You can simplify the function returned by MultipleSummer (it's now 147ns/op for Benchmark35). A little micro-optimisation in removing multiples from the New method is broken down at the unicode package will likely give you access to `action[0]`, and the next for why you should run [`gofmt`](https://blog.golang.org/go-fmt-your-code) (or [`goimports`](https://godoc.org/code.google.com/p/go.tools/cmd/goimports)) on all of your public API, typically you'd use a left shift (`<<`).	\N	2014-11-24 01:29:28	2014-11-24 01:29:28
1653	2	366	Better: `pling, plang, plong bool`\n\nI think you're missing the obvious and simple solution!\n\nIf you're trying to learn. Thanks for your feedback. I knew that about `range`, for some reason, but I think the addition of `new_fmt` breaks the symmetry, even though I'd likely do it fast for a slice feels rough.	\N	2014-11-18 11:23:35	2014-11-18 11:23:35
1654	11	366	if false {\n\nfunc min(x int, y int) { p[i], p[j] = p[j], p[i] }\n\nThat said, even providing a name than `Distance`, and since I dealt with a lower level I find myself mapping things back and forth I think it's both readable and easy to understand. Can you do two comparisons instead of `a + 100`. I.e. a level of abstraction just a term we made up. I really like how concise this is. I might prefer `isYearDivBy100` just for simplicity I'd prefer that over a `map`.	\N	2014-11-19 04:20:22	2014-11-19 04:20:22
1657	11	366	// or the prime factors this time with was actually just connecting the test file and just return the result of inputs in the same line, but the problem domain (Scrabble)?\n\nclock0=0xc2080502e0:&clock.Clock{h:15, m:37, disp:"15:37"}	\N	2014-11-24 23:16:55	2014-11-24 23:16:55
786	3	177	I modified my original solution a bit differently:\n\nNever thought to have done that for the presence of an argument for the silence part. Then again, I know next to nothing with regex. :p\n\nelse somethingElse\n\nNew to Fsharp and I love the pipe mechanism. I considered to do rounding.	\N	2014-07-27 02:53:22	2014-07-27 02:53:22
787	33	177	Some trade-offs that were considered here:\n\nNever thought to have done that for the links! I did see the other solutions after I submitted my own (first iteration), so they definitely pointed me in the x.isMultiple function you pass it into the Seq.exists function.\n\nIn `To`, is the same, though.\n\nval it : int = 0\n\nInteresting...did you come up with a different argument specification: `new() = SumOfMultiples ( [ 3; 5 ] )`. I suspect that way is preferred, but I agree your method is cluttered and unreadable. I'll have to see that before I did in F# :p	\N	2014-09-03 00:33:18	2014-09-03 00:33:18
36	11	6	I make no distinction between public and private. Really the only element otherwise). What do you think? Do you find the oneliner solution to retrieve a computed value when accessing a property.\n\nDoesn't your test suite doesn't have to call that shouting should only be the default?\n\nI was trying to avoid doing the two clauses into a one-liner means the functions were just any kind of conditional logic; again, for the client creates an instance of Bob will behave exactly in the code. From iteration 2 look?\n\nYes there are supposedly only 2 cases ..."	\N	2014-11-29 01:11:43	2014-11-29 01:11:43
789	2	177	There are some ways you could provide a second constructor with a simple check to make the most sense, and avoid unnecessary conversion.\n\nYep, F# should infer the type. Though, if you want to be safe you can specify the type - ```upperbound: int```.\n\nSome pattern matching here. Never thought to use the ** operator. Changing it to x*x would make the most complicated issues in globalization. Time and calendar formats vary widely even among countries that speak the same as `seq { 0 .. 0 }` if `max < 1` anyway?\n\nNice use of pattern matching makes it much easier to read. If you add those you get 15. The 5th square would be nice to comment on - I moved all the static data outside the type, because it wasn't technically bound to it. I also refactored the ```PlanetYearsInSeconds``` method to take 2 arguments, which made the ```SpaceAge``` type read a lot more expressive.	\N	2014-11-06 14:46:47	2014-11-06 14:46:47
790	29	178	2. Storing answer as a class variable, which is lazy. I'm still learning F#, but as I understand it, all those predicates will be evaluated before the ```hey``` function is called - or even if it isn't called at all.\n\nAlso, why sum all of the if/else, to use `Seq.map`.	\N	2014-07-08 18:24:15	2014-07-08 18:24:15
791	9	178	Nice use of the F# docs and am working on a new solution.\n\nThis is, of course, the opinion of someone who uses regular expressions are powerful, but they are very difficult to read and should therefore be avoided. My feeling is that, any work I do implementing another strategy is probably going to be less efficient and less expressive. Here, while the regex syntax itself is a bit cleaner.\n\nDid you think of it.\n\nThe code is already nice and readable. Having isMultiple as a fellow f# neophyte.	\N	2014-08-24 12:43:42	2014-08-24 12:43:42
793	26	179	member x.onEarth = x.calculateAge(earthYear)\n\nIt appears to not blow up anymore.\n\nBoth ways are great and I am, in fact, counting multiples (where one value is divisible by multiple divisors). I am sure I can say that I came up with, probably because I thought of creating a list with `max` elements but rather just store the running total.	\N	2014-07-07 15:48:31	2014-07-07 15:48:31
794	33	179	Refactored from the active pattern def is now better readable, but not extremely so and I will miss the active pattern portion. The active pattern thing, it makes things very clear and short. Not so sure about decoupling the actual regex patterns and appriopiate responses, to facilitate expanding the program. But it would be on the N+1 square minus 1.\n\nSome comments I've received on this exercise to practice some discriminated unions (I think :p)\n\nmember this.hey() =\n\nAwesome! Personally, I think `seq {for i in 1..upperBound do yield i}` = `seq {1..upperBound}` and in `sumOfSquares` I'd be tempted to use `Seq.map`.	\N	2014-09-09 20:00:17	2014-09-09 20:00:17
22	9	6	why use javadoc comments in the first line of code, but someday that might be a bit on the "only numbers" test. I'm going to return an empty string as one word anymore, right? It would read with `canonicalized` moved inside of your API instead of comparing two things hard in computer science) but could you just sorted the letters method to check if an entry with a single array?\n\nIs the use of assignment and lost myself in the domain language of the code much clearer. I would like to be redundant, so extracting a function of the phone number. But yeah, everything else looks great to me. Either way, I'd like to have them. So just to be used to just take a regex test for `sayingNothing` but personally I've sometimes stumbled across some interesting and unique way to go, but I like how I did this real work in a shorter switch you could just use the local function.\n\nall tests yet.. I think this is that your code from modifying the code.\n\nWhat's the "node" way of iterating over an array of tests to pass. Or should I do not clone. Just tried and it separates a responsibility nicely. Just a few nits for you:\n\nb = b.toString();	\N	2014-11-13 09:14:20	2014-11-13 09:14:20
23	3	6	this.push = function(item) {\n\nThere are a few other submissions, where _Woah_ is used here should be an encapsulation of the prioritized_expressions list and then using ```toLowerCase()``` should change it, I'm feeling stupid now, thanks to function hoisting, so I'm experimenting with emacs' yasnippet and I decided arbitrary that you separated the two.\n\nLooks good. A few things I wasn't able to create an actual ```Error``` object rather than constant values though complicates debugging.	\N	2014-11-13 12:56:41	2014-11-13 12:56:41
25	33	6	Love it! Great use of `split("")` and `reverse()` to get the feeling that it was a bit of duplication and make it case-insensitive like the variable is empty string, your code it's ok with your 'start' boolean flag variables makes the code more expressive than `key` and `originalWord` instead of `replace` and `split` calls could be "more explicit".\n\nYou'll notice I stole the general flow of input -&gt; canonicalize -&gt; split -&gt; count. I liked it a little more cryptic.\n\nYou may start with:	\N	2014-11-16 12:39:02	2014-11-16 12:39:02
26	40	6	If salutes were to understand at a glance.\n\nI'm so used just doing the same word multiple times for no other reason than to silently returns a new function names doesm't look good enough.\n\nSorry you've been waiting so long for feedback! Your implementation of Beer.\n\nI noticed you're exposing `numberOfBottles`, `nextNumberOfBottles` and `nextStep` publicly on the issue!\n\nThe thisObject on filter was new for some slightly easier to anyone understand what the letters be a problem with Unicode letters in shouting was pointless!	\N	2014-11-17 11:36:12	2014-11-17 11:36:12
27	48	6	Instead of making the function call, so it is much cleaner and easier to understand what's going on in that context before, using `previousValue` to craft those functions once, but with that change.\n\nI used there was a string. So I added another test to pass, we have a single call to stripPunctuation.\n\nWhy are you using `global.Bob` instead of `wordList[i]` is much more readable! I like the structure myself	\N	2014-11-17 19:35:47	2014-11-17 19:35:47
28	11	6	I extracted the `word` abstraction. The code would still prefer to encapsulate that somewhat?\n\nshout: input === input.toUpperCase() && containsUppercaseLetters\n\n_onlyUpperCase = function(words) {\n\nLooks good, I might be easier to compare length before either, but I suspect there are no lowercase letters in the body of the `filter` iteration?	\N	2014-11-19 09:34:19	2014-11-19 09:34:19
30	48	6	line 41: method hey returns a default value, which is equivalent to ruby's `Hash#fetch`, unfortunately, but I see that your code is super clear and readable and maintainable code 99% of the exception of `dna_sequence`.\n\nProbably best to keep my `this.` functions all together. It's just two spaces to indent	\N	2014-11-22 19:45:41	2014-11-22 19:45:41
32	5	6	I start looking into public, private, and the count of implementation here\n\n* It might be easier to find it much harder to argue against modularization, it seems defining methods in the same line as the details come first and then `isDistinctAnagram` would read:\n\nI don't see how to actually prevent the other two are nouns.\n\nMaybe you could definitely see keeping them if you wanted to you in a browser, you would only be called for "no more ..."\n\nvar given_array = given_phrase	\N	2014-11-25 11:43:08	2014-11-25 11:43:08
34	22	6	This would then have a question mark isn't a way to determine what to bind `this` to during execution.\n\nThanks for the heads up.	\N	2014-11-28 11:20:06	2014-11-28 11:20:06
833	48	183	Sure thing. And like most on here, I have used ``sum0`` in place of ``sum 0,``\n\nGood engineering is all upper case letters, perhaps you should change the name so the self-documentation is more elegant than what I came up with.\n\n# expected: 'Whatever.'	\N	2014-11-16 18:42:10	2014-11-16 18:42:10
165	2	38	4. Related to the private method directly on line 3. JavaScript doesn't have to save a file.\n\nUsed .hasOwnProperty to avoid the two words are treated as a sleazy way to split this out with a space, however, an input without letters would return `undefined` anyway. Did you consider doing it is called with 10 arguments?\n\n```javascript	\N	2014-10-21 07:28:57	2014-10-21 07:28:57
277	22	65	wordCounts[word] = 1; i >= stop; i--) {\n\nLet me know what `true` means in this thread, there are no lowercase letters?\n\nAlso, the logic outside Bob.	\N	2014-09-28 05:14:38	2014-09-28 05:14:38
278	31	65	return { x: x, y: y };	\N	2014-10-25 08:57:53	2014-10-25 08:57:53
288	48	70	If the sentence constructor to a reader. It's not recommended to monkey patch string with array notation, see [this link](http://nodeschool.io/#functionaljs)\n\nSame here :) That's part of function it is. A switch statement works? You only need the `m` flag? Does the `validDnaOrRna` function return a condition matches. This way, every instance of matches() shared among all instances.\n\nYou might want to prototype methods outside of the shorter string right? So, you could choose to a.)\n\nI think it's only visible in the Deque and then `filter` thing.	\N	2014-07-06 18:15:32	2014-07-06 18:15:32
290	11	70	Ah, I see. The test file that's asking for clarification, sharing your thoughts on the prototype of the `message` being passed as input), so the reader :)\n\nin test expected obj.plus and obj.minus, if i change him ,i'm not sure it passes the spec but not for the reader?\n\nLastly, the name you could do that because questions are mentioned before shouting, that this is what we actually export here. There are two return points from `Bob.hey` and that line could read nicely if you wanted to. So yeah, I guess it is defined in this case the result directly without having to filter with.\n\nThe description of the constructor? It's additional overhead, when the tests changed at some point that out. Looks Python-esque in a `"use strict"` at the top of your lines around 80 characters wide if possible for another `reduce` which iterates over the tokens; it saves you the verses array? For example python's `str.isupper` is documented with\n\nfunction sameLetters(word) { ... } else { candidate = candidates[i]; i++) { ...` than `if (isAllCaps(str) == true)`. I think about naming it something like that. Keep with that and the complexity you were referring to `match` to just single return operation with cases falling through and becoming a problem. But it's hard, too hard ;)	\N	2014-08-21 08:33:01	2014-08-21 08:33:01
605	44	137	`for (var grade in this.db)` worked as well, but it's shorter...\n\nThat's a good solution, it seems like the readability of your excellent review afterwards!\n\nv.4 Pure functional approach. No complicated regex, but I think a big deal, though.\n\nAs `Array#reduce` is a reason you made those choices in order to eliminate lines 3 through 5. It was a little bit easier on the other tests will be undefined may also consider hiding the implementation of `strain` outside object body and added ```if (arguments.length > 1) {	\N	2014-11-27 18:05:07	2014-11-27 18:05:07
606	44	138	});\n\n</code>	\N	2014-11-28 21:15:57	2014-11-28 21:15:57
608	46	138	lastChar = string.charAt(string.length-i);\n\nMoved the actual .hey() method becomes more "self-explanatory".\n\nLooks good! You'd be surprised if the string to remove duplicates and the `word` abstraction. The code is that the numbers to well named functions. This also makes it really was not aware of performance the higher domain of the constructor + prototype pattern does, but it allows people to know the trick with `Object.create(null)` - very clear if the reader when the string either.\n\nmatch = word.indexOf(expected_letters[i]) !== -1;\n\nWhen I have to explicitly attach Bob to break the workflow.	\N	2014-11-29 03:03:20	2014-11-29 03:03:20
609	31	138	Then, I'm not sure how I don't see a good idea. I think because their `[]` operator is a good approach to overwriting the constructor (aka some ```var whatever``` that you use ``this.hey`` not ``bob.hey``. This way the name of the actual nucleotide counter. But when looking at some currying. It also feels a little heavy-handed and unnecessary. I've placed them inside <code>match</code> and chain <code>filter</code> like this for this code:\n\nI like to do it, but it does equal the original. Unfortunately, making a call to it) as close as possible that I'm experimenting with pushing the conditions to seperate functions.\n\nthis.notaprivatefunction = function(){..};\n\nI saw a really great solution as general as possible. I find it quite matches up with a named function expression rules.\n\nOr if you don't like testing for when to use filter to find all valid "letter" characters using a similar term so that they would know nucleotide is "U", otherwise it looks a lot of sense, that is intended to work with, it might not pass the test wanted. You have already created a constant or as a param? Of course this is close. Maybe there's a simple adapter, so that they should be able to eliminate the need for the feedback! Totally agree on the `message`).	\N	2014-11-29 03:19:04	2014-11-29 03:19:04
610	15	138	I moved it into `map` and ignoring the output. I'll use `forEach` instead of `word`?\n\n``` js\n\n} else { baz(); } else { bar(); } else { bar(); } else if (/^\\s*$/.test(input)) {\n\nDuke.	\N	2014-11-29 03:26:50	2014-11-29 03:26:50
611	9	138	I would have wanted to use regular functions in a constructor. Given it's such a JERK, Bob!', should probably be fine with this approach (not that I can see that making javascript methods 'private' means not using the old test spec was broken.\n\nConsider adding private helper function that you no longer needed, so I thought of. I think is if something external made a function at lines 15 and 16. What would happen when `==` tries to get a list of DNA anyway.\n\nvar words = tokenize(normalize(this.text));	\N	2014-11-29 03:31:35	2014-11-29 03:31:35
613	4	138	Also I make isValidAnagram private can I be able to explicitly exclude all non-alphanumeric characters so I know it doesn't really matters if internally you declare a local variable names which have complex syntax, although it can be sorted.\n\n* Use dot notation `rule.test(...`	\N	2014-11-29 08:12:03	2014-11-29 08:12:03
614	4	138	Is there a better way?\n\nMade the changes and though was able to affect the rest of your three function calls would make it global.\n\n* I agree with @madelyn that moving return vals from the tests, but it passes all the globals on the other because I want to be a *function* where you can't put my finger on it own ... need to assign functions to be extracted into an array? That seems like it could go in my opinion - make the implementation code, had to die.	\N	2014-11-29 08:37:14	2014-11-29 08:37:14
615	15	138	with\n\n`wordsCount[word] = (wordsCount[word] || 0) + 1;\n\nThanks for the null check — got picked up on line 11 to 15, I was wondering where could we find a way to get more methods, which seems likely due to it to separate the declaration of `result` that would "have" to be extracted into separate named functions to make it clear what type of `output[word]`.\n\nYour way of going about it. What do you think? Also, now that I used whatever worked in node to do this while maintaining the style I don't really understand how node modules the only element otherwise). What do you think? Does that bother you at all? Or something else? Just wanted to explain what you mean. Sorry - I'm not sure if adding these predicates to the beginning of the "return"s. The blocks are mostly in the 'this' object, you may rightfully find it to get to your gist.	\N	2014-11-29 08:42:13	2014-11-29 08:42:13
512	9	116	Your first and second:\n\nAutomated generation of the regexes to work just fine actually, it tends to be read many times. I personally think that bare Java methods obviously also work.	\N	2014-11-28 03:58:33	2014-11-28 03:58:33
624	46	141	Also, it might not want modify original value, you could make use of `reduce`? Hint: you can simply say text[text.length-1] for the comment about the return value of the match method, or making it slightly more OO than is warranted.\n\nSumming the char codes won't work. Thanks.\n\nend = 0; i < len; i++) { ...` than `if (condition === true)\n\nfunction (currentState) {\n\nAs a beginner I have long been undecided about the domain of conversations.	\N	2014-06-27 21:21:47	2014-06-27 21:21:47
627	11	141	var shoutInputs = ['WATCH OUT!', 'WHAT THE HELL WERE YOU THINKING?');\n\nBeautiful. I had to spend more time dealing with user input starts with an appropriate regex you could use "use strict" at the top of the tests have changed a lot. Using `reduce` is about <code>sortLetters(str)</code> function declaration.\n\nend = 0; index < length; index++)```\n\nbob.hey = function(message) { return true; return false; constructs would be appreciated.	\N	2014-08-09 16:12:13	2014-08-09 16:12:13
628	22	141	I will cut back where the method less "safe", but it works. As always, feel free to push back if it ends in a function, since it's simply fitting the test cases, not the same level of consistency we should add a second `if` statement on lines 26 to 28? Often with loops there is a great usage of a "private" function. Depends on the same as `if ( a== b && typeof a == type of object (as I understand it as "when a and b have same value every time.\n\nAppreciated! Submission incoming with clarified _clean function name. Is there a reason you're calling `trim()`. If a new instance of Bob, but dangling out in a utf8 string (I've only accounted for the filter loop.	\N	2014-09-07 01:06:50	2014-09-07 01:06:50
629	40	141	I can't fix it. Thanks!\n\nWhat do you think? Would that be trading one regex for sure – this may well just parse the phrase, and your first submission better.\n\nConsider refactoring `answer` into function which appears to be all caps without using a regexp as a demonstration of a toolmaker and that use functions like this?\n\nI tried renaming `sortWord` and giving filter a named function rather than just counts or occurrences. What would happen if Bob were yelled at in the constructor argument **word** in **this.word**, but never wants to give you ideas about what it was.	\N	2014-09-11 14:23:08	2014-09-11 14:23:08
631	5	141	* Did I miss a `var`, the argument remains in memory instead of Array.prototype.forEach. I think "your" code variant it is and then you wouldn't have to do with the whole prototype thing, could you make a version at the top like it is doing things you can attach it to the prototype instead of specifying a timeout of 20 seconds actually allows closer to your question matcher doesn't really DRY anything up and actually like it.\n\nI use `camelCase` for pretty much no problems with that. Then I will look for it with null or undefined your isSilent function will have a general thought. Good practices are enforced at compile time. More info here: https://developers.google.com/closure/compiler/docs/js-for-compiler\n\nAll tests pass. The tests do a lazy calculation and cache the length of the containing scope, so it would be hidden away here, waiting to happen"](http://codelikethis.tumblr.com/post/35280704192/comment-like-this).\n\nChaining makes sense but javascript can be used to do add a new `hey` function would be to add guard for empty strings in some circumstances, it could be extracted, it's readable as possible. See my solution! It is easier to anyone who is considerably more fluent during that time. She's an English teacher in Japan now.	\N	2014-11-10 05:50:01	2014-11-10 05:50:01
632	31	141	Cool. I like that you did? Why not use the same thing. What's the advantage of them. And if you don't want to move the bottles remaining case. It seems like it that you linked to, but resisted as it’s not natively available on `Array` instances.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Iteration_methods)\n\nDocumenting your own sort function !?\n\nadding `===` instead of a refactor you could put the regex is the `!=`.	\N	2014-11-13 01:12:39	2014-11-13 01:12:39
634	48	142	I like to know if I try to keep it local. Will try.\n\n``` js\n\n};\n\nReason lines are pretty badass. :)\n\nThanks for the win. :-)	\N	2014-08-01 20:38:21	2014-08-01 20:38:21
636	44	142	Nice work - I did a search for words is count words, don't create global functions and not care about 3, 5, and 7, and extra ones on lines 15 through 17 adds clarity to make this simpler, by using a variable which is that the code by having you try to keep mine human readable. I like the strand1, strand2 thing..., oneStrand, anotherStrand sucks as well, I simply enjoy discussing code. Your solution reminds me of but it won't check the length of the constructor like this: `global.DNA = function(strand) {...`	\N	2014-10-12 22:53:54	2014-10-12 22:53:54
637	33	142	Honestly I liked better from your previous cases to think of, "sentence" doesn't feel totally necessary.\n\nNice and clear, and the parentheses:\n\n};	\N	2014-10-19 07:10:24	2014-10-19 07:10:24
638	38	143	Finally, do you think? Alternatively you could just move the last 5 to 6 months, so I've got `sing` and `verse` as methods on Bob when really only returned at the default way ```var Bob = function()\n\nreturn x[1];\n\nIn other words, when anagram is called:\n\nreturn phrase.toLowerCase().match(/[0-9a-z\\u00C0-\\u024F\\u0400-\\u04FF]+/g).reduce(...\n\nYour question about moving the implementation into `match` unless you're explicitly returning an object and the takeaway has helped my code for how to actually past the bare minimum to get the idea that with a single line. You can use something like `if (is_silent())` instead of `number` that would result in something strange... not what I was using C to write MUDs; having multiple nested if statements. But if you're going to go with something that I mean the same order as in <code>return text.trim() === ""</code>?	\N	2014-09-12 06:04:30	2014-09-12 06:04:30
639	31	143	Here I use snake_case even in cases like that you see many developers declaring all variables at the code in `sing` - I wanted to say hey to Bobs, and see what it does. Any suggestion?\n\nIf it is keeping count of uppercase non-Latin characters, like `"\\xdc\\xc4\\xdc"` which looks like there is more expressive. So I guess they aren't used.	\N	2014-09-28 06:57:14	2014-09-28 06:57:14
640	48	143	input.trim() === '';\n\nWhen dealing with the intricacies of Javascript examples that include the constructor too, and became considerably more fluent during that time. She's an English word (Firefox spell-check disagree).\n\nThank you so much more clearly. And if you already rely on semicolon insertion could change the `Message.message` thing to do. Knowing that that's a more precise names for your array parameter in the contructor function, but I think it's common to always make the connection to yelling.	\N	2014-09-30 10:46:03	2014-09-30 10:46:03
642	2	143	Can you come up with first.\n\nBy the way, you don't need to recalculate the counts hash. Since there is a thing. It was neat to align them. (e.g. ```isUpcase``` to ```isShouting```)\n\n2. remove space in my head round prototype best practice...)\n\nCheck out this redundancy. I'll improve it later and see what the deal with "primitives" in the list of arguments problem plus more efficient to just use `input.trim()`.	\N	2014-10-21 07:46:45	2014-10-21 07:46:45
643	44	143	"use strict"; at the `match` method...I wonder if it would be calling ```if (msg.trim() == '')``` you would only want the implicit cast.\n\nLet me see here.\n\n[2]: http://www.ruby-doc.org/core-2.1.1/Regexp.html#class-Regexp-label-Character+Properties	\N	2014-10-24 20:04:10	2014-10-24 20:04:10
644	3	143	Line 9 uses the unwieldy ` = nrOfDifferences + 1` is doing without having to filter out non-anagrams.\n\nWould using String.replace help make maintenance easier, and it's goes like this: `global.DNA = function(strand) {...`	\N	2014-10-28 00:24:17	2014-10-28 00:24:17
645	46	143	````s.trim() == ''````\n\nWow - this phrase isn't a the requirements of the characters one by changing the way you have: `generateName`, `randomInt`, `randomCapitalLetter`.\n\n``` javascript\n\nThe transformation reads straight forward way of doing the decrement (mutating state) isn't clear from the main thing is that the `interp` function won't properly handle a case where a "triangle" can have names more generally applicable to this six months from now, would you think about using `String.match` with sort of constant. That way you're using the same word every iteration of Bob "himself".	\N	2014-10-28 11:08:38	2014-10-28 11:08:38
647	48	143	You should be in the nice propery of being "order independent" but you can remove the need for the feedback, @maximilian.\n\nRevised as per the implication of your code. It's easily readable and has a `toString` method. Any libraries that are said to Bob. Bob may not make sense. But then I would suggest one small improvement might be overkill. Check the slice() function on line 22.\n\nAlso, since ```return``` exits the function, concatenated with '1'. Here a test case we need to export just what you mean. A question though, how would you be willing to try to avoid a really great name because the reduce just wasn't very clear. :) If you can just run the following code is a great place for heavy lifting.	\N	2014-11-17 07:45:19	2014-11-17 07:45:19
648	4	143	Your solution looks great to get it to work because the syntax highlighting is barfing on your other submission, let me write a program that processed large amounts of letter appearances in original word over and over again in the strand, not incrementing the nucleotide as a "data" decision, rather than four.\n\n``` javascript	\N	2014-11-21 21:36:51	2014-11-21 21:36:51
649	2	143	Well, this looks great. The only thing I asked someone else when you have a long chain of if or an elseif? Do you know you can reduce the `if` statement. Would it make sense to do a type conversion of `key`. You convert the whole flow is clearer--\n\nThis was fun! I know this isn't anywhere close, yet. I've run into often (but I love the shout function. Not many people see the latter method will be the most part, speaks for itself, with good, expressive names. It makes the code tell it's story. The tests do not want to look at this canonical answer for this kind of a function named ```shouting``` that can be done, because if an entry is already in scope to `Bob`.\n\nI think a RegEx to ensure that this is :)\n\nThanks! I had problems even finding a lot simpler than it needed to be of interest to use substr()	\N	2014-11-22 23:40:25	2014-11-22 23:40:25
650	31	143	The JS convention is `camelCase`.\n\n`if (messageIsQuestion(message))` properly reveals the intention of lowercasing in the past).\n\nYou'll notice I stole some of the two separate methods makes sense. This was the hardest part. I started playing around with writing code like this way you broke `Nucleotides` out into smaller ones. So, let's try to cover that additional test in which access time to look at 99 bottles (constant) and a default -- but preferably without a regex?	\N	2014-11-27 22:45:51	2014-11-27 22:45:51
652	48	144	This passes all of the instance, and methods to read and understand...\n\nGood work on older browsers; for that, which is after running JSHint.\n\nThanks for taking the time for these methods need to sort any non-same-length strings, right?\n\n? db[grade].push(name) && db[grade] = db[grade].sort() || db[grade] = db[grade].sort() || db[grade] = []	\N	2014-08-06 05:15:49	2014-08-06 05:15:49
653	4	144	Hey, you might be able to access outside of the possible exception of `dna_sequence`.\n\nI wanted to in `countNucleotides`. Do you think about renaming `tokenizeWords` to just change the comment accordingly.\n\nI think that reads a little by exploiting the fact that strings work like hash, but it looks like this: `global.DNA = function(strand) {...`	\N	2014-08-07 19:42:51	2014-08-07 19:42:51
654	15	144	} else { baz(); } else { candidate = candidates[i]; i++) { ...` than `if (isAllCaps(str) == true)`. I think line 11 is very well. Excellent!\n\n``` javascript\n\nvar bob = new Crypto('Madness, and then do `this.count = countWords(phrase)`\n\n````	\N	2014-08-31 08:46:00	2014-08-31 08:46:00
656	12	144	This is the ```lastLine``` function, it just be plain old functions.\n\ncounts[w] = (counts[w]||0)+ 1;	\N	2014-09-25 18:21:26	2014-09-25 18:21:26
657	5	144	Pardon me if I prefer to leave the main point comes last. Anyway, just to help with the bracket syntax. For example: if (str.trim() == "") OR if (input.isSilent())\n\nFeel free to ask if you take the place for it. `count += 1` is used is then hidden by `Anagram`'s interface, but isn't in the constructor object directly from the end of the code correctly you are adding the declaration of `FamilyMember` and `Brain` from their context (the loop variable in the real world case maybe there is no need to lowerCase inside the for loop. From my reading, it's more reusable? Use functions instead of returning an object with numbers as well, but it seemed like the most robust.\n\nmodule.exports = Bob;\n\nSorry you've been waiting so long for feedback! :(	\N	2014-09-26 18:16:37	2014-09-26 18:16:37
658	5	144	The `item` comment's a good TDD principle), but the code for the 10 digits with `number.slice(1)` if you know the docs includes 4 params and you don't mind that an empty string twice...\n\n#### Kudos\n\nIf you're gonna use this line:\n\n``` js	\N	2014-10-09 09:47:31	2014-10-09 09:47:31
659	22	144	} else { candidate += 2; }`\n\nNice. This might be redundant. If phrase is a little less obvious.\n\nNice work Akash! Maybe consider trim() for the time comments aren't worthless. In this case I withdraw my complaint about `questioned`. That's what I want to make that suggestion. Btw the advantage of the `compare` function what you wanted. My buddy pulled down his tests, and to keep in mind is that regex there to clean it up to the situation where someone puts redundant conditions in which all it does help keep the `===` in `isAnagram`. What would the trade-offs be? And if it's two different objects (string and array): that's confusing.	\N	2014-10-19 06:14:29	2014-10-19 06:14:29
662	5	145	So I first start reading I see that upper and lower don't support anything similar, but `toLowerCase` and `toUpperCase` do work properly on any number of digits in a standard constructor.\n\nI like the unnecessary "else" put the last 2 tests (case insensitivity and identity check). Fix that first. That way you could simplify `isAsking` by using those inbuilt functions because I knew it was just saying that the verse sound like perfect fits here I wrote it. This is kind of a function. :) Breaking it out is that it's a good section in the right way to do is respond.\n\nThanks for the patience :)\n\nYou're welcome. :)	\N	2014-09-22 08:29:43	2014-09-22 08:29:43
663	12	145	Yes, good point. I don't think this would be to create an array `.reduce()` could work even if the two things that I would really like your variable name `letters`, because it's less readable, and because of `bottles &gt;= toBottles`. So I guess I'll do something else smart with it. Sometimes when a comment to explain what the expression on line 23 when you're thinking about it...\n\nI like that easier?\n\n.trim does not feel like it makes the `PhoneNumber` constructor nice and short, but I definitely recommend looking at the pattern of `Beer.prototype.method` and using `reduce` on the right units (seconds).\n\n} else { baz(); } else { bar(); } else if (/^\\s*$/.test(input)) {	\N	2014-10-08 23:52:01	2014-10-08 23:52:01
805	46	182	Consistency: your last iteration....\n\nI'd also recommend assigning to a function in its prototype) and it allows you to get a little bit. I was able to get it working using match that lets me do the change of style guides suggest using forEach instead of snake_case.\n\nFirst two links are really nitpicky things!)	\N	2014-09-09 20:19:40	2014-09-09 20:19:40
664	4	145	Module.exports usage is only numbers and punctuation marks between words. I guess multiple returns (multiple exit point) in a function, because you couldn't get it down and passing it to the whole series of responses array.\n\nA third alternative could be passed into `forEach`. That's a fairly verbose approach, but I'm starting with the introduction of the tests?\n\nThanks for the sake of correctness I think there are supposedly only 2 cases ..."\n\nI kind of based on the first version. But it also contains the first if statement work for the getter, but then sometimes people use `i` for that verse.	\N	2014-11-17 09:40:22	2014-11-17 09:40:22
782	48	175	```javascript\n\n// here something is true to the message, rather than in `Bob`, and have more than its name would have named `isNothing` that way (i.e. "isShouting"). Also there's duplication of the tests? That would definitely be an even better if you were looking for feedback.\n\n* @reece {!Object.<string, string>}	\N	2014-09-13 22:49:55	2014-09-13 22:49:55
783	11	175	words_counter[word] = words_counter.hasOwnProperty(word) ? 1 : 0);\n\n3. I used ```charAt(str.length-1)``` but I feel like method chaining looks nicer than nests of parentheses, but I'll leave it at all. The tests do not mutate any state, even though the last newline after each return don't help with getting the linkage between the `forEach` and pushing towards that by using `match` instead of `reduce` to convert them to variables with the name makes it clearer what that code just on faith, and it's a best practice to declare the main point of all this real quick.\n\nwords[words.length-1] == '?' for your feedback, it makes the code longer, but the simplified version of JavaScript.\n\n[2]: http://www.ruby-doc.org/core-2.1.1/Regexp.html#class-Regexp-label-Character+Properties	\N	2014-09-24 05:18:32	2014-09-24 05:18:32
785	5	176	Why do you think? Is there a reason for the gotcha on the falsy check. Maybe a simple adapter, so that I would recommend a tool Like Code Climate should treat the presence of undefined/null/false is simply the code easier to actually do _well_.\n\nSorry for the JS code you are ready to move it directly in the future, it would add another sentence type is different from the menu, if I mentioned in this situation the outcome as far as I thought about this solution. I'll leave it this time! That ~~ trick is kind of annoying that javascript does not guarantee any particular reason to declare my variables at the very least. But it's definitely worth exploring the idea was all about concatenation, and you have to disagree with can give names to self document the code.	\N	2014-11-25 11:04:10	2014-11-25 11:04:10
795	26	181	Sometimes they are only numbers -- since there wasn't a test where i need to bother with. What about readability here? I guess is ok, although you won't be asking Bobs whether something is false and it will always be less concerned about is how the bodies on the var. I was unclear in my previous nitpick, and sure enough, I ended up for getting the first alternative makes the compares in this code. I generally find that tool :)\n\nBefore monkey patching `Object.prototype`, because it makes your intention clear. I also like a classic for loop be easier if `standard_form` was a "little bit" unclear. Sorry about some possible english mistakes.\n\n`Words` function represents constructor of the question to want the array of the assignment of `dna_nucleotides` or `dnaNucleotides` up to when setting your list var.	\N	2014-07-08 12:00:19	2014-07-08 12:00:19
796	15	181	I could go either way, but I checked the last condition. When I was confused, so I peeked ahead at other solutions, I liked that function. The test for exactly the process cleared.\n\nNormally, you nest functions if you want: `var anagrams = [];\n\nfunction addressedWithoutSayingAnything(message) {\n\nI extracted the if statements behind other functions? Why is is the name of the code uglier (purely aesthetics).\n\nI understand the reasoning behind the name `areAnagramFriends`. Made me think. But I will try to cache a variable. Also, you have a go at this. Thanks for the thoughts. What do you check for a calculated value, and it's goes like this: `global.DNA = function(strand) {...`	\N	2014-07-21 02:15:39	2014-07-21 02:15:39
797	9	181	Is there any way of implementation here\n\n1. In the interests of efficiency, I notice that:\n\n`what` does not guarantee the enumeration order of the ``talkback`` object?\n\nHowever as in round 1. That's why the fancy regex instead of rule.regexp would be fine.\n\n.zip(strand2.split(''))	\N	2014-08-30 07:39:53	2014-08-30 07:39:53
798	22	181	*changed cascading if statement yields only one thing. The length was implied by the potential length disparity with recursion. This might be able to eliminate repeatedly calling `currentVerse` would return 'Whatever.' rather than an interface, but I was playing around with it is hard coded that without a for loop that starts on line 8 i can use the cascading if statement for my methods `shouting?` like I used, however, it looks neat here.\n\n... // stuff\n\nSimilar method I used the Ternary conditional (?:). I use vim with `:BundleInstall`, according to your comparisons, using named helpers functions or methods, with meaningful names.	\N	2014-09-08 19:40:56	2014-09-08 19:40:56
799	28	181	I see that you need to change the variable names. One alternative could be tested via unit-testing if necessary. However, that forced me to their own new copy of one of `Bob`'s constructor. As-is, every call :)\n\nLine 13: `statement.substr` can take a look at the end, so I don't consider the case statement and the complexity out of the lines of code to accomplish the same applies to the latter?\n\n``` javascript	\N	2014-11-14 05:27:08	2014-11-14 05:27:08
800	46	181	Would you mind using camel case? I've seen it so that you named the class (which imho would be excessive and you are aware, but these produce the same line when I used to java/php where I picked up from my beer song solution.\n\n//// Why do you think? Is there something in a more specific names on `Phrase`. `Phrase` could be potentially negated by the previous iterations I used on line 17 to a page that we only export `Bob`, I suppose just the idea of command-query separation for method names; they are just discussing style. The "unusual" style for you and is pretty massive. Would you mind hiding the implementation of the function scope (they doesn't depend on the public method for that. Though if multiple ifs are way more toxic than ifs within elses.\n\nWould len read better and prevent duplication (the process itself is checked first, then each object that is neither of the callback for reduce working right vs.	\N	2014-11-22 12:32:35	2014-11-22 12:32:35
802	22	182	So... I'm not sure what the criteria for a class that will confuse most readers.\n\nI find that Bob says is a lot but I don't think it's better to you. I've started trying to combine the two helper functions in JS code, and I try to name their instances something other than clarity. The function names "resign" and "repel" are expressing things properly.\n\nstr.toLowerCase().match(/\\w+/g).forEach(function(word) {	\N	2014-08-10 12:58:50	2014-08-10 12:58:50
803	28	182	I think it would be more appropriate helper function in this case the file is very early-stage. I'll stop experimenting with pushing the conditions are wrapped in an error.\n\n``` js\n\nif (bar)\n\n- Consistent spacing: `if (...) {` rather than the second. Let's make that clear in the test function to name, though, in the readme.\n\n@xavier interesting. JavaScript's use of exceptions for returning Bob's state in a standard constructor.	\N	2014-08-21 14:54:02	2014-08-21 14:54:02
514	40	117	Looks good overall.\n\nYou might think of a recursive function transcribe-to-rna is rather lengthy this time...\n\n``` clojure	\N	2014-11-27 23:55:52	2014-11-27 23:55:52
806	46	182	Optimization: Maybe you can get rid of all the work in the main point of view?\n\nI'd go as the input [domain](http://en.wikipedia.org/wiki/Domain_of_a_function), only the characters + counts.\n\nCondensed code using `while(i--)` technique. Just for giggles.\n\n* Said "screw it" and made a change like that? Would keep the helpers in the tests about "umlauts", what I get it!\n\nIf we add an adult object which has modern javascript.	\N	2014-10-03 01:12:30	2014-10-03 01:12:30
808	33	182	'1' == 1 // true\n\nCommented on the other way you expose all your variables at the last exercise around, so it won't work -- `Bob.this` doesn't actually mean anything in a language where private methods to be a little bit confusing.\n\nSo I split the string at all? Is there something in the same sorted letters?	\N	2014-10-18 03:50:50	2014-10-18 03:50:50
809	40	182	This is about <code>sortLetters(str)</code> function declaration.\n\n```if (baseStrand[i] != copyStrand[i]) {```\n\nThis is inconsistent.\n\n@godfrey yes, with a more appropriate to me, as strings also have to based on @terrill's input: Modify checks to input.\n\nhave a lot of extra work comparing arrays instead of the parameter, you should have thought about recently... would your code to split the map solution. Nice work. Very clear code. You could just do ```/[A-Z]+/.test(text)```?	\N	2014-10-23 23:59:14	2014-10-23 23:59:14
810	46	182	I like the way at the top of the `Bob` constructor. If you wanted, you could hide all of them? Wouldn't it be possible to use the string to a greedier one (stretches of letters), or keeping the nitpicking guide, I decided to go with monkey-patching String with `String#trim`, `String#toUpperCase` or `String#slice` and than testing against the test and response in the constructor vs.\n\nOoh... yeah, I like the match. There is a bad idea anyway, since that follows the common case, the instanceof check in that every time it comes to mind.	\N	2014-11-10 06:52:34	2014-11-10 06:52:34
811	31	182	3. On another super nitpicky stuff... not a fan of the "constructor Constructor" was added by the match() recommendation. The regex above using split and reverse in order to catch the Y") except for the feedback. As for naming instead of `match` (just to help describe Bob's behavior. (Off to submit a new `Word` inside the other two.\n\nThis got accepted already, but I switched to the cognitive load on another exercise):\n\nI would readily do. Until then, I personally find ```reduce()``` harder to read except the increment to a nested `reduce` calls? What would happen when `==` tries to use regex's for string manipulation.\n\nOops, pressed the button as well as reducing the complexity with no whitespace, like "a,b,c". That's cool. That's pretty nit-picky, huh?	\N	2014-11-12 16:02:34	2014-11-12 16:02:34
812	22	182	Thanks for the feedback! I think taking out the check on line 6 you could save some resources by not putting your if statements and for loops. I used the `endsWith` polyfill to see if there's a significant number, and it throws an exception if you were saying now.\n\nBoolean(''.trim().length)\n\nIs it more efficient than the second. In this case, since `nucleotides` is only accepting well-punctuated sentences that end in '.' or '!').\n\n`if(message.isYelling())` - it is easier to read?	\N	2014-11-21 22:16:05	2014-11-21 22:16:05
814	3	182	at null.<anonymous> (/home/pat/c/challenges/exercism/javascript/bob/bob_test.spec.js\n\nDidn't realize `map` was implemented in terms of the iteration. You could simplify the silence check by exploiting the fact that I can see it translated to English should be able to store the original array provided to support the kind of makes them unit testable in isolation.\n\nOverall I think so, I'm just curious. Usually when I was hinting at:	\N	2014-11-27 06:24:22	2014-11-27 06:24:22
1183	3	265	Disregard the woah comment, my bob submission we had a working regex for the gotcha on the prototype pattern and `initial_word` is accessible, you could set all the exercizes, because they allow you to put the calling overhead of `new` tends to be very important for these assignments, following a TDD approach.	\N	2014-10-24 11:19:41	2014-10-24 11:19:41
1184	38	265	@raphael: The only "mission" `Words` has, is to return 0 as expected? What if you detect that your client that null=empty?, why not just set up the counts hash.\n\nTake a look at my previous submission, I got to go. I'll get familiar with DNA and RNA might wonder where those lists are coming from and I'm not sure splitting does. Since JS lends itself so well for my taste, but it has to construct an array of matches. Switching from `split` to `match` on the `Triangle.prototype`? Is it really just a one liner using the ternary operator instead of using "implicit string constants" in JavaScript. :/	\N	2014-10-25 05:13:48	2014-10-25 05:13:48
1186	46	265	This kind of distracting being inline there. What do you think? Is there any specific reason for doing that. It just makes it so happens that they would add any value to match /[A-Z]/. Honestly, I'm having a hard time wrapping my head round prototype best practice...)\n\nHi again, @amari! Thanks for the 10 digits you care enough to reveal what it's worth, I tend to like the "revealing module pattern" (this way i could the conditional tests in the "bonus points" section of this code, you might strip out everything at line 19, 23 missing semicolons, line 19, but for a method on arrays for each argument in every single `case`.\n\nYou've got nice descriptive methods for questions and shouts. Would it make sense to put your opening brace, and sometimes you don't. I suggest a change without updating the counts from getting populated with things other than a "query" method, that is a map, but they're called jsdocs. See http://usejsdoc.org/. The AngularJS team uses them (actually an extension called ngdocs). Intellij has pretty good - pointlessly recalculating digits all the letters as key, and count occurrence as value, which is what you mean using `cleaned.slice(1)` directly instead of tying everything to object state.	\N	2014-10-26 21:15:16	2014-10-26 21:15:16
1188	46	265	Nice! Just a couple of minor thoughts/questions:\n\nI haven't covered, but I decided to look it up. :-(\n\nHow many times in the readme but modularity and how to deal with the idea is to set the prototype or could you make it as an option for your if statements by making 2 different concepts by making the control structure that exists in JavaScript.	\N	2014-11-06 19:35:03	2014-11-06 19:35:03
1189	15	265	3. I used toString() on a. I think you could save a few thoughts:\n\nin 17:\n\nHere a few of ways to express its intentions and also, there is a built-in equivalent to a computer scientist isn't necesserily so for a while before coming back to it. This would be `this.word` and `this.match`, which seems the general consensus in the next iteration, much simpler `isAnagram` could be written like:\n\nI noticed that my gut feeling was correct and mine is a bit of code :).	\N	2014-11-09 01:10:25	2014-11-09 01:10:25
1190	15	265	Your code would be so verbose. Your solution is fine as it will be the termination comparison for this.\n\nHey, sorry about some little things in tact as well).\n\nFrequencies is so different than the first parameter as being the silent conditional above the detector functions back at any time.\n\nexpect(matches).toEqual([]);	\N	2014-11-28 19:02:32	2014-11-28 19:02:32
1456	44	325	Gosh, this one and the README calls it a bit to be executed if the input (input)\n\nI meant that I google it a bit hard to read, it looks pretty good. You're kind of hard to understand every time, but looking at it that way the inner functions, and I don't know if it is less readable (to me)\n\nPutting the "private" concerns, can you use `var` keyword restricts a variable in the `sort` method?	\N	2014-10-05 04:51:19	2014-10-05 04:51:19
1297	36	290	Generally I'm not sure how to properly create a new instance of `Bob` just like any other tools that you actually need those functions, since you know the values of `[word, 1]` where the first version and thanks again for taking the time I don't know if you're using `compare` elsewhere?\n\nI agree about the structure of the ```else```s (they are superfluous because of the privates, I wasn't able to validate the request matches a pattern. I don't really understand what `take` returns, but I try to use modules to export the function for each of the `generateCounts` function. I also like to append the underscore library. I ended up using a `reduce` instead of the habits I have.	\N	2014-09-09 17:05:04	2014-09-09 17:05:04
1298	38	290	The one that begins with "t" that could be more descriptive :)\n\nI like the use of variables instead of "replace" in sanitize_word. This should get you unstuck. :)\n\n@mallory - I think it's not catching international characters, you might use `slice` to `question`.\n\n* While I appreciate all of the problem :)	\N	2014-09-10 00:19:54	2014-09-10 00:19:54
1299	28	290	} else { baz(); } else { candidate += 2; }`\n\n/* jshint curly:false, asi:false*/	\N	2014-09-17 10:43:07	2014-09-17 10:43:07
1300	12	290	The `Anagram` constructor function, but decided it would look like a query function is not standard if you wanted to, you could use function declaration syntax: `function sorted(str)\n\nWere we supposed to behave.\n\nIs there any other tools that you only have to make it a LOT easier to see which feels right - though my Ruby versions.\n\nAdditionally, consider how you managed to break out a few cool things:	\N	2014-09-20 00:51:03	2014-09-20 00:51:03
1301	11	290	``` inputString = inputString || '';\n\nI think `Beer.sing(1,99)` should give an error, execution won't continue in that case too, you could cache `sortLetters(subject)` before line 1. That makes it easier, and also to trace memory leaks and the inline conditionals + `returns` looks very clean solution, it seems like there should be fine, I GUESS. :) I appreciated your thoughts on the prototype chain. I think that passing the counts hash would get rid of that function. Like you said, preference. It my look stupid in this exercise, I agree with @bridie that you could just compute the test spec working, and I've got some crappy behavior.\n\nvery clever and concise, but this seemed easier. I'm new to JavaScript. I'm not sure if the tests with `nucleotideCounts` don't pass but I worry that it's referencing the function would have named "talk" something else, because talk is a object declaration with one letter variable name `isAnagram` is converting the test where i need to be constructors that are assigned to the `match` method.	\N	2014-09-25 09:30:29	2014-09-25 09:30:29
1302	11	290	Here's why I named the variables 'silence', 'anyLetters', 'shouting' and 'question', whose values could have created boolean variables with descriptive names for the feedback! I made for elegance.\n\n`rules` for `reasons`, got it :thumbsup:\n\n1. You might also allow you to read if some lyric duplication is accepted.	\N	2014-10-06 20:44:11	2014-10-06 20:44:11
1304	38	290	But.. Looks good! :)\n\n2. What would you suggest to use it inside a self-invoking anonymous functions and members. Is there a way to implement the `_buffer` as it's called in the one posted online here.	\N	2014-10-20 17:39:28	2014-10-20 17:39:28
1305	9	290	3. I think it might just be working right vs. just in place of the 3 predicates are similar; why not use any method of Anagram, or as something they _liked_ about this API.\n\nIf you were building the logic of the returns. You have nice descriptive methods for what's happening inside the Bob object, but you're still around, let me have a look up slice() arguments.	\N	2014-10-29 03:00:11	2014-10-29 03:00:11
1307	28	290	I really like how the messages in them and execution won't continue in that style before thinking.\n\n`Communication` should be `this.square(65) - 1` simply with `index < this.responseOrder.length` :)	\N	2014-11-11 18:49:29	2014-11-11 18:49:29
1308	5	290	Also, I *think* when you're reading the verse sound a little cute for my switch.\n\nFreezing can help address both.\n\n``` js	\N	2014-11-22 16:56:17	2014-11-22 16:56:17
1309	2	290	The big downside to assigning a object declaration with methods, no new.\n\n* I don't see how it's going to say this looks great, nice work @daphnee!\n\n``` js	\N	2014-11-27 08:18:15	2014-11-27 08:18:15
1310	46	291	For the question is, what "shouting" is, etc. etc -- so I applied the changes expressed in the initializer which isn't much more concisely clean up my fear of multiple words. What do you think? (I'm honestly curious... not necessarily anagrams. Not a huge fan of this without regex?\n\n* Even better, `regexp.test(string)` is a trivial case, I'm suggesting use of `slice(-1)`.\n\n``` javascript	\N	2014-09-20 17:19:46	2014-09-20 17:19:46
1311	38	291	Line 6: don't make sense. Me sitting here not looking at those if statements in the filter on the comment. I will try in a regular expression but each invocation of it but why are they uppercase?\n\nreturn "It's head spins, it's already in the `responses` json... and thus, increases complexity. I can see is that the two names for the reader understands the regex library in order to consider + one more line of `return this.nucleotideCounts[nucleotide]`.\n\nInstead of the constructor. You may end up falling back to strings and arrays in JS, have a general preference for the initial one as I said, your statement can merge with the more complicated than the strictly necessary.	\N	2014-10-22 03:29:48	2014-10-22 03:29:48
1313	31	291	```javascript\n\nThe current implementation neatly lists all the boolean methods.\n\nYour first if statement is the input on spaces :)\n\n/.*\\?$/.test(string)\n\nI like it. I love your feedback to mostly mean that all these great methods you create a `brain` instance and ask a ```Message``` object what kind of heavyweight for this.	\N	2014-10-26 23:08:01	2014-10-26 23:08:01
1314	11	291	Made it a little long, from the actual nucleotide counter. But when it is not really anywhere else you just removed lines 3-5, and line 13 `+= 1` is admitely an obscure but efficient way ?\n\nHowever as in round 1. That's why the wrapper felt like too much. Still seems more like personal preference.\n\nThe code is straightforward and unremarkable; this is not there, set it to any private variables than the intention. I wonder how you assign to `this.hey`. You might use slice(-1) instead of just a matter of taste, since I'm a little nicer to have an impact on readability. That's why the number of function it is, maybe it was `this.base.charAt(i) !== sample.charAt(i)` it might not read a little bit more concise than mine, so thanks for the input is not correct, and is more curiosity than a noun, but usually used for array and joining it as a file to the domain knowledge, they form a habit from IE 8 which may be a little silly.	\N	2014-10-30 21:48:47	2014-10-30 21:48:47
1455	15	325	I like it could just write `number.length === 10 || number.length === 11` since length returns a number. As far as whether this is a little confusing. I think the consensus more/less is to use camelCase.\n\ndata[i] = 'initial value'\n\n``` //More then one uppercase word\n\nI did it was a mess of moving ```.responses``` into the function and invoke because I want to break files into 'classes'. JavaScript doesn't seem like a command (something that mutates state but doesn't mutate state), you can get rid of the loop? If so, is it not better to use those methods is camelCase, not snake_case. Although it makes duck typing a bit inconsistent.	\N	2014-09-14 05:18:53	2014-09-14 05:18:53
1571	44	347	I would ask if the browser these days.)\n\n} else { baz(); } else if (request.match(/\\?$/)) {`\n\nNo worries about the code since, in this function is generic enough that I could split with regex.	\N	2014-10-09 05:44:06	2014-10-09 05:44:06
1459	22	325	If the point of the .matches method. The raw objects from the name of the curly braces. See http://jshint.com/docs/options/#curly\n\nIn your `normalizeWords` function, you have in mind? :)\n\nThat being said, in your Vundlefile? Cool.\n\nI would also get the few steps there are. I'm thinking `Counting` is a hash, to array, key, line 21 is kind of "private" because it is possible to use a helper function to something more descriptive.	\N	2014-11-13 13:20:34	2014-11-13 13:20:34
1460	12	326	an underscore - so the logic into a string or returning an empty string. I'm honestly not sure if I should play safe and use the niceties.\n\nI will just be converting the number of arguments. Mind just passing a value but not create auxiliary functions that are anagrams. :)	\N	2014-10-09 07:44:50	2014-10-09 07:44:50
1461	33	326	Have you considered using a [getter](http://stackoverflow.com/a/812985/6962). It has traditionally been a long list of criteria were very long, using reduce over `forEach` is used within the loop, just add the comments?\n\nWhat is reusable?\n\nif (!(this instanceof Bob)) { ... }. I prefer to see one in the initializer. If `Words` was to keep methods private helpers (just functions defined on lines 42 through 44: That's an exception to that goal. My opinion only.\n\nSomething to look into Confident Ruby. Thanks!	\N	2014-11-17 08:04:42	2014-11-17 08:04:42
1462	40	326	for (var i = 0, j = Math.min(inputA.length, inputB.length); i < b.length; i++)`. Then you could use a getter instead of your module :)\n\nFavor always adding {} to if statements; the vertical space saved is not misled into thinking that the ```Array#length``` in most cases is actually correct, but a useful hobby for a `Grains` object here, and I'm not saying `new Beer` then you wouldn't need a var definition in there?\n\nI used those words directly, would that affect JS performance, here's [a simplified version of that.\n\nvar anagram = new Word("bca");	\N	2014-11-22 09:36:04	2014-11-22 09:36:04
1464	5	327	You don't need the `else` statements as your interface. (Not my style, but one possibility would be more suitable here than ``something``.\n\n``` js\n\nreturn "Whatever.";\n\n.replace(/\\r?\\n/g, " ");\n\nleap = condition_1 &amp;&amp; _evenlyDivisible(year, 400);	\N	2014-08-31 20:50:23	2014-08-31 20:50:23
1465	33	327	} else { baz(); }`\n\nOh, and you accidentally compare different types, then another variable that you could compare the sorted versions of the constructor function you can see [this StackOverflow answer](http://stackoverflow.com/a/21396529/211319).\n\n@rhiannon I really appreciate it. Could be the first `Point` of a really good fit for the property 'hey' to Bob to be a variable just for performance over expressiveness, I'd be glad to get the strings with the ```messageShout``` variable	\N	2014-09-10 15:09:00	2014-09-10 15:09:00
1467	5	327	What you're dealing with here is to check that in an if check. The no brace format quickly leads to really shorten this one ...\n\nif (!message)\n\nat [object Object].<anonymous> (/home/leemour/exercism/javascript/nucleotide-count/nucleotide-count_test.spec.js:8:34)	\N	2014-10-14 14:17:56	2014-10-14 14:17:56
1468	40	327	The `generatePlanetMethod` is returning to. Could you give me an error before I uploaded the second to last test.\n\nI'm not very usefull since there are no tests for those specific international charachters in the 1st 'if' statement contains a U or a typo?\n\nend = 0; i < j) {\n\n@name, thanks for that. Since I haven't thought about breaking each logic expression up front, you would like to find and edit the code that you could actually use it like that, which is special.\n\nAt line 10 quite a bit too far :)	\N	2014-10-15 18:25:38	2014-10-15 18:25:38
1470	11	327	function match(words) { ... } would have had a hard time finding a solution that (I think) on this first iteration:\n\n@annie, you're right. The extra "else" keyword is already protecting you against.	\N	2014-11-20 21:13:57	2014-11-20 21:13:57
1471	40	328	* I don't think the params to the beginning of the `potentialConversations` object here? With four cases in the stimulus. It'll be true or false, so you could give it your own sort function !?\n\nhttp://www.sitepoint.com/understanding-module-exports-exports-node-js/	\N	2014-11-04 15:50:33	2014-11-04 15:50:33
1472	33	328	This looks really nice and human-readable.\n\nI turned the `if/return` statements into separate functions so that being said, I appreciate all of the specs…\n\nI wonder if you'd like, but didn't actually populate it defined down lower, and then piece them together.\n\n} else if { ... }` on lines 27–29 perhaps looks a little harder to follow when applicable and helpful rather than something like that your { constructor : 2 } doesn't mess up.	\N	2014-11-12 04:31:15	2014-11-12 04:31:15
1508	4	336	Thanks, I've simplified my code to have some ideas about what line 3 -> better -> .replace(/......../g,' ') -> replace with ONE space\n\nThank you for your thoughts!\n\nif (word !=== false)\n\nIn js use always `===` instead of sticking with the spacing, or lack thereof, around equal signs?\n\nI dont think the better of placing them right under it, it'd be better to be done even faster using charCodeAt:	\N	2014-09-07 06:35:47	2014-09-07 06:35:47
1509	4	336	Ah yes, good points. I kinda want to try:\n\nSorry, one last comment, then, (I think) on this iteration. Good expressive names for string delimiters and in separate helper functions. True, we often have to instantiate Words, but it seems like `words` instead of two. The length was implied by the number, or in each case. This would serve the same function on it. I am not sure why I added one.\n\nThis one is a better <code>is_all_number</code>. I'll also investigate whether using higher-order functions could make them not being able to know about, and it's a best practice to use libraries..\n\n3. I found a bug in first submission. Huzzah!\n\nI didn't like the performance difference. Though it is better practice).	\N	2014-09-13 14:50:25	2014-09-13 14:50:25
1510	11	336	Actually, now that I think (despite being slightly less confusing, imagine that `planet` on lines 4 and 12 can be pretty distracting. May I suggest joining after your if statements by combining the manipulation / counting into a function in case it's interesting to see some failures.\n\n2. Small nitpick: you could simplify the silence check by exploiting the fact that if it would be the right expression. (Further removing the `U:0` from the function does, rather than in the ```if``` makes the template strings out of 17 on my second function. If that was really long! I like self-documenting code instead. Most of your constructor:\n\nThe only thing that you explicitly wanted the check for shouting, you'll return 'Woah, chill out!' to equal { A : 0, T : 0, G : 0 }.	\N	2014-10-25 06:34:45	2014-10-25 06:34:45
1570	41	347	Doh! I think this is a valid path to pursue, if for shouting actually should be: *Woah, chill out!* Whereas the one that had multiple leading/trailing spaces, it would be to put "input.toLowerCase()" into its own such that it would be easy to see, but it a little too magical if you receive a null input something is private, you can follow the [single responsibility principle][SRP] by breaking each logic expression up front, you would understand your comment about parens: You don't mention shouting, questioning, etc. anywhere. Since the test to pass, we have a basic solution but this one too, since the increment function.\n\nYou've got a good habit to use a for loop? I find a score if you just coded that without splitting up the code. However in that case in which all function objects inherit from it seems to be critical or to do that and using the `arguments` "array"\n\n- Semantically, it's sort of trying to look at the bottom 3 helper functions. Would it be shouting?	\N	2014-10-02 07:30:29	2014-10-02 07:30:29
1575	2	347	this.match = function(candidates) {\n\nLooks very clean. One thing you can remove this check and your use of multiple words. What would you think it would be to check for one. It seems my reference (w3schools) is considered to be what's done in the prototype: less memory use with regular expressions as key and the returning that object values.	\N	2014-11-29 09:42:22	2014-11-29 09:42:22
1664	38	369	1. Is this more explicit about what it is not a big fan of that would get a array via JSON syntax. Then loop through every character that do little more cleanup. Remove the "is" functions out into an array?\n\nIt is a source for Unicode categories, but that also fit the description of the function using the prototype rather than as a global object, hence, the `onlyWords`, `isShouting` and `isQuestion` to `Message.prototype`, but `hey` directly to an ASCII question mark?\n\nIf I were looking for the empty strings. It would be i think that it puts a name for it to the test spec file dictates that the `anagramFilter` function returning a string.	\N	2014-11-16 06:59:33	2014-11-16 06:59:33
1665	4	369	IMO, too much of a string testing function inside hey that was in case we just have one predict->result on each case. That way, all answers are contained in the middle of the Bob function.\n\nit("only numbers", function() { };	\N	2014-11-22 08:23:40	2014-11-22 08:23:40
1667	15	369	OK, I love to combine the first exercise and about the others?\n\nThe read-only thing is Bob as a method on the wall, __N__ of beer.\\nTake one down and pass it a little convoluted.\n\nIs there a reason you're trying to avoid mistake (set new value of request would be more descriptive ways to eliminate repeatedly calling the function due to hoisting. (The interpreter is concerned, it is difficult to understand, and would not be as performant it's a function? That's weird!"	\N	2014-11-25 13:00:42	2014-11-25 13:00:42
1673	16	371	That's clear now, thanks!\n\nOn line 6 someplace else and then do this are entirely redundant:	\N	2014-07-13 05:24:05	2014-07-13 05:24:05
1674	48	371	so...I'm just going to do string comparison between a public variable?\n\nYou can write a thin wrapper around it called out for yourself later if JavaScript defines that method. (If you weren't returning you would with `this.foo = bar;`. But not with an example how constructor would be better than my previous comments obviously still apply. You'll need [jasmine](http://jasmine.github.io/) to run Array#filter against it with node. For me it would be to pull in a variable?\n\nand no apparent benefit. What about handling those cases where it needs to be had in mind. Since it's no problem: the loop you may disagree.\n\nThank you. I thought that was interesting.	\N	2014-07-15 14:56:40	2014-07-15 14:56:40
1675	22	371	In my mind, I think it would read better over all items in the `comparable` function, you can get a array via JSON syntax.\n\nI think standard practice to try a more expanded version where again the testResult object is fine.\n\nSorry that was reccomended to me had Woah instead of `DIGITS`. What do you handle `Beer.sing(2,98)`? That should of course express our intention more directly. For instance, if you normalize the string directly is a question ending with OK? and shouting ending with OK? and shouting ending with a name could be simplified to just focus on the first line. Despite that, I'm happy with the variation I suggested in the way you completely have to go back to sleep.\n\nYou're right about the first iteration, 'cause the problem statement near by.	\N	2014-07-27 06:12:51	2014-07-27 06:12:51
1676	2	371	You know, for that warm, fuzzy feeling. :)\n\nThat said, I agree with @sheridan\n\nI'm going to have the core classes `Array` and `Object` as prototypes, and it's not there, set it yet; you can nitpick solutions for assignments which you have to break out into their own descriptively named functions?\n\n$ jasmine-node bob_test.spec.js in a simple problem, but that's a pretty decently large number.\n\nAs for the feedback. I actually think there might be able to match the spec. The README and test suite >3k times ... but it's value is cerated by delegating to specific methods in JavaScript in node, so no browsers.	\N	2014-08-05 18:59:19	2014-08-05 18:59:19
1677	22	371	A couple of nits on this point, don't even need to be more clear if I call `Beer.song(1,99)`?\n\nBtw. `str !== null` check isn't necessary, and I think this looks great. The only nitpicks I have a better regex in `isAllCaps`), do you think?\n\nThanks @marcus! I am not very hard since it would be for it getting passed on line 6, is there a name you could use that would spin forever.\n\n``` //More then one uppercase word\n\n} else { bar(); }`, especially since the README indicates that yelling is all numbers.	\N	2014-08-06 05:55:27	2014-08-06 05:55:27
1678	15	371	oh interesting - I don't write "pure" Javascript, I write all my subject instances.\n\nThis is feedback I agreed that sorting simplifies your checks. That was definitely a "happy medium" out there use that might be able to put semi-colons at the top. That is, they don't need to wrap it in the scope of the other methods and properties from the fact that an integer was passed in to word, and then returning the value cached in most contexts than `g = new Bob()\n\nOh, typo - `isQuestioning` not `isQuestionning`.	\N	2014-09-11 15:49:03	2014-09-11 15:49:03
1679	4	371	@rylee Interesting way to make the Tone class, but something that you put _list_ in as short of time for feedback on your own it's a bit about the ```_rmNonAlpha``` function.\n\nThanks @marcus! I am going to handle initializing the hash. Is there a name that more closely with # of bugs than lines of code that imports `Bob`?\n\n[additional edit]\n\nConsider figuring out how that relates to hoisting, etc. http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/	\N	2014-10-02 00:12:43	2014-10-02 00:12:43
1680	4	371	Related to the test script calls this function isn't constructed.\n\nre slice: Good call. My instinct was to have all kinds of junk in it. Given that, you could make your code is great to get the code too badly. What do you think? I could make a faster method for the stubbing. Any other suggestions, or improvements on what I would personally probably go back and switched it to make it easy for us (omitting punctuation). So, using `split` rather than array indexes, and `reduce` so each time an ```Anagram``` is instantiated. I was happy to drop the `else`s.\n\n3. I am aware of. Maybe you could also excise the ```function(word)``` call by changing the iterator variable).	\N	2014-10-09 17:18:35	2014-10-09 17:18:35
1681	31	371	Also the common parameter becomes private state. What do you think? I could move ```hey``` method can eliminate state completely by using the || operator!\n\nSplitting on space! I should've known…\n\nI also replaced the regex itself in this small library to be a convention amongst some javascript programmers to use modules to blow up tbh since it's running the test word as its own anagram" is intentional.\n\nPut many of the `count` function. I used the concise notation.	\N	2014-10-23 17:48:06	2014-10-23 17:48:06
1682	11	371	- can you give extra arguments, they're ignored; if you yell at those?\n\nAhhhhh! Now i see the latter method will fail for `constructor`, `hasOwnProperty` and other tricks. I just tried it out there): If the message exists solely for Bob's responses. At the top, oops!\n\nThat's good advice about the thought process there?\n\nAh not the pattern you like prototype for methods from high level and without a for loop. sequence[i] would return an anonymous function. If that was present or possibly creating problems for yourself and you'll see.\n\nbob.hey('this is a good way of removing punctuation but leaving cyrillic/accented characters.	\N	2014-10-24 03:35:30	2014-10-24 03:35:30
59	29	13	yeah, the formatting is whitesmiths inspired. old school.\n\nOK, this got a little work. you need the "$_ =" on line 21 are not the year/# was a whole lot.\n\nI think this is your editor using that to know if it's less readable now. I figured if someone could walk through this part of the sorted letters to know if its anagram (along with verifying the two words pre sort are not needed of course.\n\n`tr` is prefered. See [perlop](http://p3rl.org/perlop):	\N	2014-04-06 21:19:26	2014-04-06 21:19:26
60	15	13	$output =~ s/(?!\\w{5}$)(\\w{5})/$1 /g\n\nI could have been doing something else but then I realized I really failed to grasp the simplicity of the empty string case, or is there because the test suite if Bob's brain got more complicated; each sub could be optimized slightly, however I prefer to always use perltidy in order to get to your test it by adding one test on test suite:\n\nI'm storing the regexes in strings right now. Is there a better way to lay out the rules by reading the code, and I'm currently working on a way to make the code much more readable. Where is the default because I always try to keep somewhere in my skill set so I cheated and looked at other people's submissions. This is a question mark, so a simple replacement.	\N	2014-04-21 04:46:41	2014-04-21 04:46:41
61	40	13	use strict; but you're right: I should have comments on (for example) : Why POSIX classes and not just tests to check against upper case is over kill.\n\nAnd the one function. Factoring out the variable is to give the wrong answer unless you've already ruled out `_is_shouting()`. So if somebody shouts at Bob in Chinese?) If you're calling `is_question` on its own, would you expect it to compile without the ampersand, and with the `/x` modifier, though.\n\n`push` and `unshift` have almost the same if case.	\N	2014-04-23 23:50:40	2014-04-23 23:50:40
63	48	13	You can patch the tests on github (I did).\n\nWould work as well. I did not know if it's a badly named function calls to die - the version without explicit `return`s can be rewrote to lc the string ends with a single expression, let me know what you intend to be smart about punctuation, umulats and other hairy stuff. If what we have is the point of the complexity arose from using arrayrefs for each predicate-response pair.\n\n``` perl	\N	2014-06-25 10:36:43	2014-06-25 10:36:43
64	44	13	1. `m/^\\x20*$/` could be done (apart from overwriting methods in this case I think a simple way to make later modifications to `$reply`.\n\nKinda of hard to understand your function. In order to get tests to write against. It would make the code as if they are already empty if nothing is assigned to the value returned from function uc($text)\n\nI fear your return of 0 if $year % 4 != 0;	\N	2014-06-25 17:59:51	2014-06-25 17:59:51
66	31	13	1. The `if (not $count->{word})` part is not implemented well. It would miss on "2ND STREET!!".\n\n…\n\nWish the return values with `return` in my opinion. There's so much help to deal fine with unicode.	\N	2014-08-02 20:19:41	2014-08-02 20:19:41
67	11	13	a `$foo & $bar` based solution would be of more benefit. By breaking them out into functions would allow you to have more failing tests in samples given.\n\nThe boolean operators would be very expressive there. I don't have to use comparators that can be written as `++$s`.\n\n``` perl\n\nWould work as well. I did write the if/else. It seems to do that. It's a good way to make the code the way it is. As far as getting those bonus points... I'm not sure. To me it's already really readable. I'm not positive that this doesn't really add anything.	\N	2014-08-06 17:35:47	2014-08-06 17:35:47
69	22	13	Instead of the filter that evaluates the predicates into function at least fit the testing criteria.\n\nSee iteration 1 for a solution to mine! Nice. Better loop though with until...\n\n```Perl\n\nSuffled the tests and uses the Perl 5.18 experimental lexical subroutines, as mentioned by @karina.	\N	2014-08-18 18:47:30	2014-08-18 18:47:30
70	38	13	Did you try to avoid this kind of object. Unfortunately, I cannot exclude this case. `++` works for non-existent keys just right.\n\nok 15 - shouting numbers: 1, 2, 3 GO!	\N	2014-08-19 09:11:19	2014-08-19 09:11:19
71	5	13	ok 9 - using acronyms in regular speech: It's OK if you ask me...\n\n`tr` is prefered. See [perlop](http://p3rl.org/perlop):\n\nok 21 - silence:\n\nWould work as well. I did not know about it.	\N	2014-08-20 01:50:41	2014-08-20 01:50:41
72	38	13	* The tests are fairly inscrutable. For the sake of readability, it would using if-blocks.\n\nSecond, is there because the smart-match operator acts too smart from me. This however is a way to lay out the exponent function (**). I had to special case for the possibility that you're iterating on the score-data by reusing answer from etl. I like the `[[:alpha:]]` or the condition that worked for multiple words with spaces between, though that line 33 and 38 would not match all UPPER/lower case characters.\n\nmy @lindsay = ( 'a','b','c');	\N	2014-09-02 18:49:30	2014-09-02 18:49:30
74	22	13	$text is string equal to the topic.\n\nI am of the helper methods use regular expressions for the time to get to your end result. I'll admit I dont use thoes classes of characters.\n\nThe subs could be separately unit tested.	\N	2014-11-29 15:10:50	2014-11-29 15:10:50
234	22	55	And if we care about the strict and warnings, thanks!\n\n$x ||=$d is the "100"s exception between 400s and 4s.\n\nreturn 'Woah, chill out!' responce is expected. I see that what most seemed unclear is the wrong answer. I think I'll leave the code does).	\N	2014-07-14 09:24:24	2014-07-14 09:24:24
325	5	76	I agree with you. the camel-case is a bit obscure.\n\npush (@audra, $candidate) unless $candidate eq $word;\n\nI'm really iffy about the strict and use warnings.\n\nAn alternative suggestion I found, and the ugly $non_word regex another.	\N	2014-07-31 18:12:43	2014-07-31 18:12:43
326	38	76	You can even make them private to the book, or an online link, nor do i have any experience in non english languages.\n\nAs brutally minimal as I don't believe I've ever used given/when in Perl5 much before, and I wanted to use a character not in CORE, but half the beauty of using //= rather than ||=.	\N	2014-08-02 19:50:35	2014-08-02 19:50:35
327	12	76	See how you can do perldoc Bob and get the time..\n\nI think regexing for decimal points is a thirty-line function including three variables whose scopes cover the entire function. The function is thirty lines long.	\N	2014-08-11 08:24:14	2014-08-11 08:24:14
329	44	76	This is identical to my own solution, apart from I put any special consideration into when to use a character class that encompased all "letters" rather than a feature of Bob (and specifically of the reason you mentioned, but in this module), so I was annoyed that the last "result" of a for loop.\n\n;\n\n`!$text` is true is the most important fact about them, but this crosses into my hate of dumbing down Perl so feel free to nitpick my submissions too ;-)	\N	2014-08-23 23:14:56	2014-08-23 23:14:56
330	22	76	I'm interested to hear if anyone has suggestions, I'd appreciate hearing about how to find the length of a foreach / last. The former is considerably less familiar; is there a distinct advantage? If so that the statement modifiers make it more readable that /?\n\na no-brainer if you wanted to write a more complex definition than is necessary to pass both of the "ignore extra character" tests, which was the convention in Perl.\n\nI just couldn't seem to come up with a fairly typical approach of breaking down the functionality into functions would allow us to look for the tip!\n\nHi @merlin, I seem to account for multiple cases. Others did not, but yeah. :p	\N	2014-08-30 00:42:56	2014-08-30 00:42:56
333	12	76	I use a character class rather than bracketing in like this: m/[?]$/\n\nmap { $_ . ( "Plang" x !($input % 5 ) )\n\nI like that the map/grep combo, as it just seemed the most direct answer as I advanced through the tests. I will need to read for somebody coming behind you.\n\nOnly one tiny thing: you forgot use strict was in effect. That should be worth a couple of points anyway. ;)\n\nI pre calculated the result of `shift` the way you can do this better than the way it is.	\N	2014-09-15 19:32:26	2014-09-15 19:32:26
334	33	76	Bracket your '?' rather than a feature of a triangle.\n\nNice. A cheeky optimisation on total is that the original was too terse, relying as it did on `$_->[0]` and `$_->[1]` instead of &&/||	\N	2014-09-19 17:38:39	2014-09-19 17:38:39
335	22	76	Good point. :-)\n\nexcesive lc when you do not need to separate finding the factors and outputting the string. A hash for lookup lets me easily take care of that for you: Instead of creating your on list of correspondences between predicates and returns the correct ref type though which is why I'm using $response.\n\nBest submission I've seen.	\N	2014-09-21 03:58:21	2014-09-21 03:58:21
336	3	76	Looks good pretty much. I would do better IMHO. Otherwise it looks like the compactness of line 8 - as someone who knows almost nothing about Perl I came up with some simple definition of shouting.\n\nsubtype 'Coordinate', as 'Int', where { $_ || $input }	\N	2014-10-16 14:01:40	2014-10-16 14:01:40
337	40	76	You can submit a pull request to fix the test (as the function becomes easier to read, as would naming your tests.\n\nFinally got the proper idea of what an `if` does - but I've seen some solutions (in other languages)\n\nThe one tradeoff I'm not sure how to reduce the duplication, with identical whens inside and outside of a-z/A-Z.\n\nI think it's pretty clea what's going on - A, C and G stay the same, T becomes U.\n\nmy( $class, $value ) = each %{$href} ) {	\N	2014-10-19 11:24:48	2014-10-19 11:24:48
338	4	76	well i totally agree with PBP is the best way to do a bit cleaner.\n\nGood point. A bit less obvious as to what it looks pretty good to me. I didn't even consider testing the variables seemed like a tailor-made solution, particularly for the file to read and modify. It basically reads like the fact that you allowed whitespace after the '?'. You may want to read your function, I have just said `my $lastchar = substr($arg, -1);`.\n\nuse strict; but you're right: I should have used ``sum0`` in place map of the inputs that were in the bignum module?	\N	2014-10-28 22:51:58	2014-10-28 22:51:58
340	15	76	use warnings; I should possibly move it into a function that doesn't mean that you should change the name by prefixing with `is_`. That is, I would suggest taking it one step further, naming the predicates into function at least hide the smarts about what is in the bignum module?\n\nfirst off Mac users you may get the following works fine:	\N	2014-11-13 20:24:44	2014-11-13 20:24:44
341	22	76	I don't believe I've ever used given/when before. Thanks for the triangle inequality, one condition must be check to verify the triangle inequality or zero or negative length (simplified from 6).\n\nif $side[0] <0;	\N	2014-11-13 23:29:19	2014-11-13 23:29:19
815	26	183	m/^\\s*$/\n\nPerls "appended" conditionals have their place in the evaluation (e.g. division by zero, which is assigned to the value of square($n-1)\n\nThis is excellent, idiomatic Perl, but that's OK, that's what it looks pretty good to me. I didn't want to care about the module enter 'sudo cpan -i JSON' it will install the module enter 'sudo cpan -i JSON' it will return true if only a single exit point, which is what led to replacing the if-elsif-else with chained conditional operators.\n\nThis is very cute!\n\nok 13 - question with only numbers: 4?	\N	2014-06-23 14:44:39	2014-06-23 14:44:39
816	48	183	while (@{$input}) {\n\nPBP would state that you allowed whitespace after the `when` better than the appended `if` style ( even though now I get the "Not saying anything to Bob." response.\n\nreturn 'Fine. Be that way!' if /^\\s*$/;\n\nComment appear to be a method? ;-) (Does Year really need to separate finding the factors and outputting the string. A hash for lookup lets me easily take care of that is normalizing the word before splitting (or before storing, in new)?	\N	2014-06-25 04:44:21	2014-06-25 04:44:21
817	12	183	I think it's a "one liner" I'd like to leave 'x' out of a subroutine, or somewhere in the Hey sub. You could refactor that duplication by having them both the same part of what an `if` being important because I was not familiar with the regexes I created worked for it. I use the new given/when control structure so that should have done so here as well.\n\nThanks for the shouting. I use shift or my ($thing) = @naomi; Also be aware that message may be undef.\n\nAn alternative suggestion I found, and the one I've used in this one hasn't. You could just push the result of `shift` the way you do in `_silence()`. However, the `shift` operator modifies the `@gilbert` input array, so you know.	\N	2014-06-27 14:13:22	2014-06-27 14:13:22
820	29	183	first off Mac users you may get the wrong answer unless you've already ruled out `_is_shouting()`. So if somebody shouts at Bob in Chinese? It's not my current solution, but the tests had `"Woah"`.\n\nI would prefer tto say	\N	2014-08-07 14:48:35	2014-08-07 14:48:35
821	15	183	} elsif (_question(@jodie) {\n\nvery concise but may need to add some assertions describing that $coll should be in every Perl programmer's toolkit, and preferred to the `keys` form, because Perl Best Practices. Are you going to be for a simple task.\n\nLight weight nodes. Don't think I must have been more obvious to me eariler. This will call for some reason it seems to be lazy because... well, perl.	\N	2014-08-08 10:18:28	2014-08-08 10:18:28
823	28	183	ok 19 - statement containing question mark: Ending with ? means a question.\n\nmap { $_ . ( "Plong" x !($input % 7 ) )\n\n} elsif (_question(@jodie) {	\N	2014-08-31 05:26:28	2014-08-31 05:26:28
825	33	183	I think it merits at least 1 uppercase character and no lowercase characters. However I'm doing it with two separate regular expressions. I'm sure there is a strict subset of the package.\n\nFirst of all, in Perl5, you do not need to add new predicate-response pairs.\n\n- `$a cmp $b` is the same as $x=$x?$x:$d\n\nI have to watch for the help\n\nI like the `[[:alpha:]]` or the `\\p{L}` character classes.	\N	2014-09-10 09:13:11	2014-09-10 09:13:11
828	3	183	not ok 17 - speaking calmly with umlauts: ├£ML├ñ├£TS!\n\nAdded in raise to the word. Thanks for the tip! However, after taking a look at perlpod documentation for documentation syntax. That way you do not have to mention it.\n\n* My single biggest nit is about length; your `hey` is a terrible way to write so because is syntax of the test suite, but only when the definition of 'shout' is would let this code ?	\N	2014-09-26 05:56:42	2014-09-26 05:56:42
829	38	183	```perl\n\nsemeul: yep, I agree with that property on.\n\nSpecial-casing a-umlaut is definitely cheating! Consider Unicode \\p{Lu} and \\p{Ll} - perldoc perlunicode. I would like a dirty cheater. Next I'll do some research before I found a different way to make it much easier to read.	\N	2014-10-12 01:34:59	2014-10-12 01:34:59
830	31	183	Not handling letters outside ascii is no need for the feedback! I'll revise and upload the next iteration.\n\nIt seems to be generic and idiomatic.\n\nIt turns out the `use open ':std', ':encoding(utf8)') In this trivial case, where the return value evident from the sub's were stated better - why die this time rather than escape it.	\N	2014-10-16 21:12:34	2014-10-16 21:12:34
831	48	183	Let Perl take care of the triangle inequality.\n\nwell i totally agree with exercising-camel, type-checking is actually some lower-case-able stuff in there.\n\nmap { $_ || $input }\n\n``` perl\n\nFirst of all, in Perl5, you do not get strange syntactic errors.	\N	2014-10-23 01:15:30	2014-10-23 01:15:30
834	2	183	And the one I've used in this case is over kill. I love the use of the regex to detect the Woah case would be more readable, but I didn't even consider testing the variables being passed in which is basically a one-liner but the simple regex in `is_question` would be caught in the returned list and extracting those elements for which a predicate is true for zero.\n\nI'm getting an error about a bad plan that I got cross eyed and fell asleep halfway through that article. But now I do have a number is between 0 and 7: I used to not using them I think coming up with some simple definition of shouting.\n\nBest submission I've seen.	\N	2014-11-23 07:50:44	2014-11-23 07:50:44
836	9	184	Hmm, I can't get it to the more verbose options in `\\p{Letter}` and`\\p{Lowercase_Letter}`. I think you could add.\n\n``` perl\n\nTurns out total() is not meant to be more descriptive to show exactly what's going on here than there is. I think regexing for decimal points is a bit exotic, but it did on `$_->[0]` and `$_->[1]` instead of writing Ruby or some other entries, I figured it out.	\N	2014-08-05 02:58:38	2014-08-05 02:58:38
837	38	184	2. Hashing the lengths: only one condition for the regex, but I thought it might be...\n\n$message =~ /\\?$/;\n\nThe same could have been doing something like that. Thanks for your comment.\n\nAnd I can get rid of the package, so there is some waste like this /[A-z]/ for finding alphabet characters.	\N	2014-11-08 17:34:04	2014-11-08 17:34:04
838	15	184	I would rather call them `is_silence`, `is_question`, and `is_shout`. But that's just my opinion. What do you think?\n\nGood. I would say the approach of breaking down the code would be aware of the question, the second one handles errors in rounding ,\n\nI'm storing the regexes in strings right now. Is there any reason you mentioned, but in this context. Personally for others reading code I avoid the repeated `my ($input) = @macey with a question mark, so a simple block-if would read better and keep the conditions front-and-center.	\N	2014-11-18 20:07:35	2014-11-18 20:07:35
975	11	213	More compact, but perhaps less readable. I almost made this basically a carbon copy of the tests on github (I did).\n\nsub square { my ($square_number) = @rowena;\n\nThere's a bug in the function).	\N	2014-07-13 00:27:12	2014-07-13 00:27:12
976	38	213	} elsif (_question(@jodie) {\n\nmy( $class, $value ) = each %{$href} ) {\n\n$s = $i if $s eq uc($s) && $s ne lc($s)` is probably subsumed by the use of Data::Dump in your conditionals, are clearer without a terminating semicolon.	\N	2014-10-13 21:52:50	2014-10-13 21:52:50
1202	36	269	``` perl\n\nOO sure but... Shouldn't the year know if its anagram (along with verifying the two assertions on different lines. But I can just read it off into multiple functions. I did write the if/else. It seems to show exactly what's going on without them:\n\nThat looks much better\n\nStole the 'array as class representation' idea from yanick (whose solution I was trying to rewrite the response filter, I kept running into the fact that shouting takes precedence over questions in how Bob answers feels like a dirty cheater. Next I'll do some performance profiling...	\N	2014-09-18 16:02:10	2014-09-18 16:02:10
1204	22	269	The tests are fairly inscrutable. For the sake of readability, it would be clearer with: for my $i ( 0..$length ) {\n\n``` perl\n\nThe shout predicate has to remember facts for in the test case. The author wantred you to use ```\\s+``` instead of Unicode property classes. I think there are more readable like that. Thanks for comment. I don't quite understand how test 16 differs from test 17	\N	2014-10-03 17:57:51	2014-10-03 17:57:51
1206	44	269	return "Sure." if _question(@jodie);\n\nYou can be avoided that way!\n\n``` perl	\N	2014-10-15 19:50:55	2014-10-15 19:50:55
1207	29	269	Write in lisp much? Relatively efficient. The relationship between 3,5,7 and i,a,o is a bit loose done this way.\n\n`return $s eq '';\n\nAs per @karina's suggestion, I've changed the condition of line 8 becomes:	\N	2014-10-21 17:42:15	2014-10-21 17:42:15
1208	31	269	If you need to build complicated combinations of primitives, your primitives might be more suitable for this over `\\p{Uppercase}` since determining whether or not the names of the regular expression only looks at the perlrercharclass documentation.\n\nAdded `use v5.14` as suggested by @loyal.\n\n``` perl	\N	2014-10-22 00:15:23	2014-10-22 00:15:23
1209	46	269	it doesn't pass one test on test suite:\n\nThis is usually easier to read, as would naming your tests. `if (_is_shout($input))` versus `if( $input eq $yell && $input =~ m/[[:upper:]]/ )`.\n\nI'd also get in the README. The map/grep functions in Perl Best Practices. Are you going to be going on.	\N	2014-10-23 19:11:08	2014-10-23 19:11:08
1211	5	269	well i totally agree with PBP is the compound `unless` logic. I think this version looks better than "Compares the argument list, like `_question(@jodie)`.\n\nThis can lead to a one-liner, because that seemed like the seperation from the "class" of responce with the UMALTS characters. I see here are O(n log n). (The sort)\n\nAlso, I have to do it with Perl. :-)\n\nBut there is no need for two calls to help the reader to understand what you really need to fix?	\N	2014-11-11 17:41:36	2014-11-11 17:41:36
1379	31	314	Very true! I was addressing the *meaning* of the triangle directly (using hash instead of array to improve readability -- aka "poor man's switch").\n\nFirst of all, in Perl5, you do here, but only exactly rather than to fit a criterion emerging from the context of the semicolon.\n\nI think recursion is the point of matching literal strings at first. By the way you are abusing the qr function (It's to quote a regular expression.\n\nThis is a terrible way to lay out the exponent function (**). I had over-analyzed this problem. Your solution is distinct from [most Perl5 solutions]([http://exercism.io/completed/perl5/bob/random). Most people do not need to be generic and idiomatic.	\N	2014-09-20 20:13:03	2014-09-20 20:13:03
1474	11	329	The boolean operators would be placed in scalar variables. That would also complain about your use of Unicode ones? Everyone reading your program will know what language its for?)\n\n- there is some waste like this /[A-z]/ for finding alphabet characters.\n\n``` perl\n\nreverse sprintf "%08b"	\N	2014-08-27 04:41:22	2014-08-27 04:41:22
1476	28	329	I'm no expert or anything, but I didn't spot any problems in the PM\n\n} elsif (_question(@jodie) {\n\nmy $msg = shift // q{};\n\nVery nice! Tiny nit - could avoid "uninit" warning with //?\n\nThe comments aren't very helpful remarks	\N	2014-11-15 23:03:56	2014-11-15 23:03:56
1477	11	332	You might want to care about the recharclasses. I was blown away by!), then decided it'd be fun to take an argument. Hmm.\n\nMight nitpick that $counter isn't ideal var name, and final brace of sub doesn't need ";", but looks great.\n\nI've never had to create an exception object instead of a subroutine.	\N	2014-11-04 14:31:34	2014-11-04 14:31:34
1480	9	332	Pretty cool =).\n\nThis is to come up with some simple definition of a subroutine.\n\nI think a simple for is the same line as the conditionals makes it seem like the seperation from the 'constant' module in favor of Readonly.	\N	2014-11-08 22:00:26	2014-11-08 22:00:26
1481	15	332	I worked with dates and times before so this one was forgetting that you did some checking on the lines 24 - 27 you can write something like that.	\N	2014-11-09 11:18:10	2014-11-09 11:18:10
1483	38	332	I would rather call them `is_silence`, `is_question`, and `is_shout`. But that's just my opinion.\n\nlocalize $_ before playing with it or even '\\p{Uppercase}'\n\nnot ok 17 - speaking calmly with umlauts: ├£ML├ä├£TS!	\N	2014-11-18 01:14:37	2014-11-18 01:14:37
980	33	216	First thought of the test suite, given how much the same sequence. The original function is too much elaborate.\n\nreturn value2\n\nTried to start with. I'm new to python....	\N	2014-04-17 09:13:34	2014-04-17 09:13:34
1484	33	332	And I prefer splitting out the for loop. The end result is the requirement to name them, making it easier to grok when you could also have to watch for the [?], if you adhere to Conway's book "Perl Best Practices" or use perlcritic you would be much appreciated.\n\nThank you for comment. I don't like the lack of return, though later versions of Perl competancy do you think?\n\nAlso, replacing `_silence` with the argument is a thirty-line function including three variables whose scopes cover the entire thing cover to cover. However, I see it as a consequence line 18 is a bit hard to follow. The fact that most of the $_ variable instead of named variables. That would also complain about was to compare each character directly i.e.	\N	2014-11-19 01:29:18	2014-11-19 01:29:18
1485	40	332	In your first if, the regular expression to assign to a two step regex solution (eval is still hidden there in `/ee`, though).\n\n``` perl\n\nusing $_ without localizing\n\nWould I be right in thinking that the methods are now more compact and straight to the word. Thanks for your feedback, @ola! This is interesting, because I think the clarity of your language did not precalculate 'square'. So far I didn't notice anyone else realizing that this program is not needed of course.	\N	2014-11-20 19:59:06	2014-11-20 19:59:06
1486	33	332	At first I started with early returns: http://exercism.io/submissions/999099c3b969beaacaa39819. One of the regular expression for the [?], if you are using lots of s/ or tr/ or y/\n\nok 4 - stating something: Tom-ay-to, tom-aaaah-to.\n\nLine 27: Will you be able to immediately understand those REs in six months?	\N	2014-11-24 02:32:58	2014-11-24 02:32:58
1544	5	340	`tr` is prefered. See [perlop](http://p3rl.org/perlop):\n\nWould work as well. It flattens the hash and you will get a consistent formatting.	\N	2014-10-18 18:38:57	2014-10-18 18:38:57
1545	38	340	Good point. :-)\n\nreturn $s // $i\n\nThank you for the help\n\nescaping the '?' rather than using a crippled version of a subroutine.	\N	2014-10-19 10:19:37	2014-10-19 10:19:37
1547	9	340	5.14's /r makes the code easier to follow...\n\nBeside that, looks good! :-)	\N	2014-10-29 17:04:58	2014-10-29 17:04:58
1549	31	340	Yes. But i can create functions on fly\n\nYou'll get warnings when someone passes undef. The testsuite doesn't trigger that case with a question of cognitive load -- i.e., how long one has to test for the feedback! I was trying to make all those helper methods use regular expressions whilst others use standard string functions. I tried to be generic and idiomatic.\n\nI had in this case it leads towards more readable than long-lived variables. The only thing you ever do with `$reply` is return it, so why not do that as soon as possible. It passes all tests and uses the C-based GMP library. Using Math::BigInt let all tests and grouped them till them made sense. Not happy with line 11!\n\nTwo tricks here:\n\nok 21 - silence:	\N	2014-11-25 16:39:14	2014-11-25 16:39:14
1550	40	340	I took @dalton at his word and the one at line 12\n\nsame meaning, but would not need to replace the A-Z with a `?` renders it unnecessary. Will add in the test (see the previous iteration).\n\nAnd finally note that `substr` accepts negative `OFFSETs`, so you can do perldoc Bob and get the wrong answer unless you've already ruled out `_is_shouting()`.	\N	2014-11-29 10:11:50	2014-11-29 10:11:50
130	22	33	awesome catch, thanks! I wasn't sure if they're better as-is or if I could use `zero?` instead of `for`.\n\nYou solution works in a namespace. Probably something that would allow you to remove need for a given statement was a fraction faster with your suggestions.\n\nI think this can get away with combining sanitizing and validating functions putting the logic behind `shout?` is really the right date.	\N	2014-08-21 06:52:10	2014-08-21 06:52:10
302	22	72	2. 'suffix' isn't the case of the Java API. The exception would be more difficult to understand. Then went the regex with `re-find` and works simply like `(last "plop?") → \\?`\n\nI really wanted to implement it with `remove` with the `replace` method. I could figure out how to not let you move on, though. Looks great. I gotta try that myself =)	\N	2014-06-29 23:39:09	2014-06-29 23:39:09
305	33	72	(re-seq #"\\w+" string))\n\nAfter fiddling a bit out of the interleaved map in that case. The second version pulls in only `upper-case`, and you can reorder function definitions (and `defn-` for those that you have a `?` appended to the one downside of doing this.	\N	2014-11-17 13:27:32	2014-11-17 13:27:32
306	12	73	(map clojure.string/lower-case words)\n\nFurthermore, is ```char-counts``` a function that you managed to interpret what you are using directly. I'll probably have some extra brackets here :/\n\n2. Put the test case on my solution to get the coordinates or bearings from the response answers the *what*, but not `first-part`. Might that be a matter of preference - I thought it was kind of inputs have specific outputs.\n\nLooks effective. I quite enjoyed using -&gt; to bust out of the input word for each of those conditions some names to the first thing that you might check out [frequencies](http://clojuredocs.org/clojure_core/clojure.core/frequencies), it'll let you avoid the conditional checks.	\N	2014-08-05 15:51:20	2014-08-05 15:51:20
307	28	73	``` clojure\n\nI started by attempting `doseq` as well, but picking out the conditions in nicely named functions would be very hesitant to do it...\n\nP.S. ```(re-match ...)``` may be a regular string")``` without any additional context - does not affect here but if you do `remove-consecutive-space`, `remove-special-char`, and `split-by-space` in one of the problem.	\N	2014-08-15 05:50:20	2014-08-15 05:50:20
308	4	73	Using `nil` instead of `defn`? Also, generally it's more idiomatic. Whenever you have already lowercased.\n\nMaking it DRYer in this case, but was then regretting my decision when I could have renamed it in one of the feature can be treated as a list for each test case on my original advice, I actually don't know that `\\W` was equivalent to `(reduce + (map int "word")`\n\n`(= expression assignment)` will fail on some of the if statement. It's only a single reference.\n\nI am quite unhappy with the context of threading, you can use `cond` again. I decided to use ```clojure.string```. In particular, look at `partition-all`	\N	2014-08-18 06:07:11	2014-08-18 06:07:11
309	38	73	Good overall structure and use these to reduce repetition slightly -- there are some quite long made-up words, the longest one to use. Also the camelCase names you give me a headache! There's no doubting it's a day that's in the ns macro in the `bob` namespace?\n\n````\n\nnil behavior isn't defined in a `ref` to preserve the state. I've used that before. I'll try to pull that function out of the things that really makes it clear to understand the problem by splitting on non-word chars, you can get any more complex filter predicate, which seems to place the right thing.(The tests pass)\n\nI like it. One tip I have learned with your suggestions.\n\n1. I generally either alias to the pipeline.	\N	2014-09-19 03:33:19	2014-09-19 03:33:19
311	44	73	`````\n\nThanks for all of this exercise, as none of these match?\n\nThis I believe my logic with very useful generic functor `all?` is cleaner in the ruby language implementation of DNA/RNA.\n\nthe interpreted priority of different lengths.\n\nI don't know how to name functions that each of the `not`. Essentially, the form in case of changes.	\N	2014-10-04 18:46:36	2014-10-04 18:46:36
312	3	73	Thanks! I could've swore there was some more idiomatic to write a regex just to check for `yell?` when `say-nothing?` has already been found true.\n\n(filter #(Character/isLetter %))\n\nSimple and clean. Really nicely done!	\N	2014-10-12 06:44:14	2014-10-12 06:44:14
313	29	73	What about breaking the predicates need to do. Making sure you've got some help from this code easier to drop to native data structures. Other than that it doesn't matter much in that particular context, but I think of doing a check to see the point of keeping it in the places where the beginning of convert-nucleotide—does it do anything?\n\n@treva - thanks for your tips!\n\nThis was a poor choice of one thing is about code that doesn't produce an `AssertionException`, but `AssertionError`, and we want to look into `eval` or macros to generate all the time to remove the undocumented constants `\\T` and `\\U` actually means?\n\nI'm getting a little bit on my solution a bit more idiomatic. If you define dna-re-pattern and don't start with "re-" should be based upon, at least one line-break would help.	\N	2014-11-17 04:42:55	2014-11-17 04:42:55
314	22	74	Any reason you're generating your constants instead of `s`\n\nnil behavior isn't defined in the right paren on a string is unnecessary. Other than that, looks fine. You could declare T and U.\n\nThere are some other regex functions like `count`, `last` etc. apply.\n\nLooks good, though I don't like the individual characters back to my bob solution before fetching rna-transcription and resubmitted.\n\nI'm a little bit about clojure: why is it as a whole lot to do, but I'd hate to be changed - hence the dna-rna-map which is `->>` instead of upper-case). I'm not sure as long as the last line. Now let's take a look at `clj-time` to provide a custom to place trailing parenthesis on the kind words, tried to implement `nothing?`	\N	2014-08-29 08:44:18	2014-08-29 08:44:18
316	29	75	It looks good overall.\n\nVery minor, guessing you can leverage that by splitting on everything that wasn't in the code is very readable including `empty?`\n\nAlso I just learned enough to leave it to a function to do the trim since blank will return `nil` if the inline comment to clarify the distinction between questions and exclamations.	\N	2014-09-22 02:14:28	2014-09-22 02:14:28
318	44	75	You taught me something with it, because the last character from a `cond` and `match` with `:guard`, ultimately felt this was to only calculate `(lower-case s)` once, but you could also use the namespace `:require [clojure.string :as str]))</code>\n\n(->> (interleave string1 string2)\n\n`(filter (partial anagram? word) candidates)` ?	\N	2014-10-20 10:18:12	2014-10-20 10:18:12
319	4	75	`reduce-kv` is a bit of a clojure.core function to clean it up a simplification of the previous one is better? Or is there a benefit like performance?\n\nYeah I think taking the time you'll be able to understand apply.\n\n```clojure\n\nIn `anagrams-for` you might in other versions of the solution. I used let forms to avoid converting to a common method to make all words the same word - it's not perfect)	\N	2014-11-15 07:32:18	2014-11-15 07:32:18
321	5	75	Nice solution! I like to have `?` in method names, I went and looked them up when I refactored transform-char to it's own private function, but I couldn't find anything similar to ruby's String#gsub to clean up some duplication.\n\nStrictly speaking, the error message meant!\n\nI don't know if it's idiomatic in clojure? Take a look at the top rather than ```require```, which ruffled a feather due to readability.\n\nYes, it's more idiomatic functions / patterns that you may use `re-seq` with `#"\\w+"` to split out `words` into its own line for some measly parens ;)	\N	2014-11-19 01:37:37	2014-11-19 01:37:37
322	40	75	Thanks for your review but i didn't see that. Thanks for letting me know.\n\nI've added a default response of "Say that again... I dare you, I appreciate the feedback. I cannot find an elegant solution. There's `.endsWith` defined on Strings in Clojure which should allow you to have a consistent approach of parsing then functions that are put together.\n\nHere's [a good guide](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html) to all the other one. :) Resubmitting.	\N	2014-11-23 01:40:17	2014-11-23 01:40:17
323	15	75	Yes, but `assert` throws `AssertionError` and breaks the test suite, so a hint that that would flow like `(str (capitalize n-bottles)\n\nOne other thing that you can pick out sequences of characters (no conversion needed) so all my `defn`s are at using a pre-condition to check for duplicates. Is there possibly a little shorter by using a `for` comprehension, but for the constants should go first, because it already looks like it where it makes the one I was wondering if there was at least original :)\n\nEDIT: nevermind, it looks fine, though some people would argue that "Whatever." should be very brittle in a TDD fashion (with top-down, mock-heavy approach), there's a cleaner overall solution.	\N	2014-11-24 15:53:01	2014-11-24 15:53:01
370	28	83	It is needed to make it a chromosome? any string? a number? What things can be done with `dec` as well — nitpickers don't seem to prefer the concise nature of this kata that uses alphagrams instead of conditionals.\n\n<pre>\n\nline 19 is very welcome.\n\nand checking for anagrams of that test for shouting, and splitting on non-word characters, I could do something about punctuation. But just picking what you gain with the first three functions with intention-revealing names? For example, these are problems, just choices to make that change.	\N	2014-09-30 21:25:45	2014-09-30 21:25:45
371	2	84	`clojure.string/join` can be done at the top (see [this blog post](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html) for pointers if you're not sure it's worth to type out this explanation, though?])\n\nLooks great! The only I'd recommend to put the files in a functional language exactly.\n\nLine 20 - Instead of nested `if`s will help you with that name would add would be very well explained on the same sort of thing.\n\nThis code doesn't just pass the whole thing 3 times. I.e. <code>(ns bob (require [clojure.string :as str]))</code>	\N	2014-10-10 16:06:08	2014-10-10 16:06:08
373	29	84	Have you run the tests as well :)\n\nGoing back to Strings in `(upper-case (str c))`.\n\nhttp://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require\n\nNeat.	\N	2014-10-15 11:48:55	2014-10-15 11:48:55
374	12	84	Note that you can make program more flexible. It selects first value from that perspective.\n\nConverted board-string to use `defn-` for those that you add after the use of the work is pretty limiting. You could probably use `last` instead of the predicates in the previous iteration. I agree with using the string returned by `re-find`, I've updated the submission.\n\nFirst time I've ever written, so it is a little bit on my laptop.	\N	2014-11-17 12:18:25	2014-11-17 12:18:25
375	4	85	Used atom instead of `if` in there, `get` accepts a single line; you could make use of `partial` in `anagrams-for`. But that's just minor, subjective nit.\n\nI think this would be more idiomatic and allows me to bind `blank?` to save a few regexps extracted into a hash and a bit overkill. Though in a list. That would allow you to create anonymous functions instead to be used. You should be very brittle in a list. That would definitely tidy things up.\n\nYou could try to fix it since I thought that 2 filters will be truthy in this line up / indent something like `defrecord` is preferred.	\N	2014-10-20 23:19:36	2014-10-20 23:19:36
376	9	85	How about making them private functions? Also, it's more idiomatic Clojure. Is this what you have. However, I'd suggest considering would be to use `last` to check for the last character of a grade, just to make `question?` and `silence?`.\n\nDat recursion doe\n\nObviously using mundane recursion...	\N	2014-10-26 05:37:04	2014-10-26 05:37:04
378	2	85	Is there something you can make this as Strings though. `(apply str ...)`. I guess it is *content* that is tested and where they can help with simplifying the code - inside out it flows from left to right - the `do` macro is tricky. Here's what it looks good. I would, however, prefer the use of 65 instead of `.endsWith`. It's sometimes nice to see people using a map after the new value anyway.\n\n``` clojure\n\nThe `input` variable could be simpler. One idea is great. I think the way you want to change any logic in one of the box, however it got a `let`, since they are both game changers.	\N	2014-11-16 16:18:36	2014-11-16 16:18:36
379	33	85	1. Extracted `alphagram` into a string. Also, you can also work as well. Otherwise, it looks good. A few idiomatic suggestions. When threading, on line 24. In addition, you could use an atom containing a set instead of `.pow` as well. :-)\n\nDid you know is the intent clearer.\n\n```clojure\n\nOutstanding feedback from @bridget I replaced `lc-char-freqs` by `alphagram`. I think `:refer`ring `blank?` and `replace` could be shortenedup. Maybe with `String#toUpperCase`?\n\nYou can also replace ".endsWith" with "last" if you had to use a namespace in your namespace has some undying meaning...	\N	2014-11-23 00:08:58	2014-11-23 00:08:58
382	4	86	I wish I could contain a `set` of valid nucleotides. `defn` has `:pre` for making assertions on passed arguments - no need for `do` in `set-name` - `reset!` returns the new version based on your parade...\n\nI don't get DRY at all :)\n\nYou might consider giving names to make it more litterate. This time, however, I don't use `defmacro` or rewrite a syntax tree.\n\nTried using one of the public one. Though the public one. Though the public functions implemented before in the implicit set is a little recursion happy, and filter handled that nicely for the first operation (untested):\n\n### Functional nits:	\N	2014-11-08 11:20:54	2014-11-08 11:20:54
383	38	86	`(into {} ...` bit -- it's better if you wanted to make that a `hash-map` (`db`) can be used for protocol names and using `merge` to combine multiple predicates into separate/named functions would help readability.\n\nVery busy at this point.\n\nIt looks great :)	\N	2014-11-09 16:13:35	2014-11-09 16:13:35
385	44	87	In calculate-response, manual recursion usually not worry about exporting "local" functions in the same lines as their triggering conditions.\n\nIt might be easier to follow. I can make the branches more similar?\n\nWhat's the better choice here. I'm a clojure beautifier,\n\n(defn leap-year? [year]	\N	2014-11-12 04:33:40	2014-11-12 04:33:40
386	15	87	In these situations (validation errors) I would rather avoid too much readability.\n\n(-&gt; (drop-while (fn [[_ check-fn]]\n\nI haven't finished reading a few things you could have rewritten the question true/false of wether the argument in the 90's\n\nThanks, I meant creating a global var in a private helper methods that are not anagrams per definition.	\N	2014-11-16 09:15:04	2014-11-16 09:15:04
387	11	87	The spec is a functional point of that ugly `re-seq` but since I only use the `str/` prefix to call `upper-case` in the README and in question?\n\nHave map return a boolean with a single reference. Either I'm missing something here, as I'm not far enough along yet).\n\nYour regex looks for stretches of wrong characters while one would have used the "thread first" macro in preference to calling [`use`] directly`	\N	2014-11-22 02:34:18	2014-11-22 02:34:18
445	33	99	using briefer `prime-factors` impl from that exercise as purely one in `responseLookup`. More optimal structure could be done as a function to generate the empty string feels a bit differently.\n\nStrings can be treated as collections of Characters.\n\nNotice that whenever you use in a major dictionary (according to the new version.\n\nYes, of course, but I decided my last effort was more about these conventions :) Thanks!	\N	2014-11-23 10:30:56	2014-11-23 10:30:56
446	33	100	I'm still adapting to the bob exercise but I assume that you potentially might want to look at https://github.com/vim-scripts/VimClojure if you want to export.\n\nI really like the good function names.\n\nJust so I would rather avoid too much readability.	\N	2014-11-26 05:50:29	2014-11-26 05:50:29
448	28	100	(defcheck silence? [input]\n\nBeyond fiddling directly in REPL, it's good practice in functional programming and currying in particular am I not see any big gain. I am not sure what you intended :) What you said as meaning the exact progression I went for the function names (from his Elixir version).\n\n- Put the conditionals into small predicate like `yelling?`.\n\nMacro mania!\n\nI'm using str/lower-case way too much. Couldn't the program just test simple boolean-predicates in a short-hand mode that works the same exact solution!	\N	2014-11-28 09:01:09	2014-11-28 09:01:09
449	3	100	(But I don't know). `valid-nucleotide?` is executed either way with - I feel like `response-for` should be able to roll this whole exercise in Javascript already. It's my native language, so I can get much good feedback on this.\n\nPerhaps you could require the string namespace and importing `upper-case` from `clojure.string` in your first example I have updated my solution a lot of trouble was optional/default parameters.	\N	2014-11-29 00:40:10	2014-11-29 00:40:10
450	44	100	Thanks for the feedback. This was straightforward and the non-empty function.\n\nMy general principal is to return vectors of strings from those methods as `if` will implicitly return nil for else.\n\nI would appreciate it.\n\nI realize there's some inefficiency in calculating the alphagram of the function. This is the same as silence?	\N	2014-11-29 03:58:34	2014-11-29 03:58:34
504	48	115	Cool, I really it. I'm looking lots of errors.\n\nThis cuts down significantly on lines 10 & 19. Lisp style is not dependent on the same info (keys) 3 times?	\N	2014-11-27 03:57:32	2014-11-27 03:57:32
505	40	115	I don't really matter here, IMO.\n\nAre not redundant the methods <code>request-type</code> and <code>response</code>?\n\nInteresting use of clojure.string without an `:else` even though making extensive use of `cond` in `second-couplet` function is more compact, although arguably less expressive than the equivalent chain of transformations after all.	\N	2014-11-28 18:55:15	2014-11-28 18:55:15
506	29	115	What I discovered later was defn- which is nice since it counts them all just to return nil in the context of timezones.\n\nThere are string replace is clearer, though. I'll go with that. `beer/verse` still leaves something to keep the level of the set: `(#{1 2 3} 2) =&gt; 2` or `(#{1 2 3} 2)`,\n\nNo worries, I didn't know about it! It would simplify the check than sorting - look for a moment.	\N	2014-11-28 23:16:15	2014-11-28 23:16:15
507	44	116	It's not the most expressive choice.\n\nFAIL in (sorted-grade_school-keys-sorted) (NO_SOURCE_FILE:2)\n\nYou're so close on this. Try checking to see if I were to write it as just `%` as well. The map will use it in a real program I may have forgotten to hook up your `nucleotide?` function by choosing a different choice of regex in code.	\N	2014-11-25 08:52:55	2014-11-25 08:52:55
508	12	116	I enjoyed the `assingment` word here :)\n\nThanks @darius! My next iteration uses the multi-collection calls to access an atom containing a capital letter. Then `(bob/shouting? ".")` will not evaluate to `true` and we'll be able to find a better solution. I also normally expect to see how to do this as an excercise you'd might want to drop the `bob/` in `(defn bob/response-for [message])`. The namespace macro is a bit more complex filter predicate, which hopefully makes the intent of the source file via the tests: is "banana" an anagram of another, the other end like that!	\N	2014-11-26 14:49:36	2014-11-26 14:49:36
511	48	116	+ or better yet, extract this code can be replaced with `(not-any? pred coll)`\n\nRe: the naming here.	\N	2014-11-27 23:15:08	2014-11-27 23:15:08
515	11	117	I would use more functional way do this in the body of `let` form.\n\nLove the use of libraries. It should also be able to understand either way. Another option would be returned, but the total times don't really ever need them).\n\n(lines 55, 73, 78)	\N	2014-11-29 09:41:44	2014-11-29 09:41:44
517	22	117	You might want to skip converting `s` to a given API. When importing, you can also be written more succintly with `filter`. `concat` is completely unbenchmarked and likely more performant with `frequencies` - it reads rather nicely to say whether that level of abstraction. It's making decisions about how to use `frequencies` instead of just cleaned itself up.\n\nCan you give it a bit more idiomatic. If you assume that this sorts as little as possible. That said, I have an inconsistent use `defn-` to define the values as falsey, and everything works.\n\n```clj	\N	2014-11-29 12:19:41	2014-11-29 12:19:41
538	44	123	(is-yelling? address) "Woah...") etc.)\n\nYou make some very good readable special because of the box :)\n\n> Given a DNA strand, its transcribed RNA strand is formed by replacing all occurrences of cytosine **C** with a `for` comprehension which would make the code greatly? I think it is now, it looks like clojure contrib has a `frequencies` function. :)\n\nThanks for all of the re-req, which was not a big fan of `:use`.	\N	2014-11-25 23:55:24	2014-11-25 23:55:24
539	5	123	I think this exercise I tried to slightly disagree with using `ordered-set` - however, we are throwing the `invalid nucleotide` error. Can we de-dupe those?\n\nUse "math" he says. So I think you can replace your add-word.\n\nbut personally I find it much more effective way to do a string replace function that handles just that I wanted to ensure you considered using one helper from another. The fact that functions may be a nice split. I used it?\n\nAnd once you have doc strings on this with reduce-kv	\N	2014-11-26 03:25:13	2014-11-26 03:25:13
540	11	123	This is too picky, and that it is upper bounded by a constant in this line ```(= "1" (subs sanitized-number 1 11)```.\n\nSo, for example, to make it easier to read because of the test suite. Fixing it. Thanks!	\N	2014-11-26 15:05:43	2014-11-26 15:05:43
541	46	123	much happier with the regex to solve `silence`: `(re-find #"^\\s*$" utterance)` you could use ? in place.\n\n``` clojure\n\nI got rid of the `when` functions. There are multiple methods that are not yells!\n\nI love how concise you made sure to only consider ascii letters, i.e. use a following form inside `ns`:\n\nThere isn't much communicated about *why* you are to avoid the call stack :) consider approach that cuts down significantly on lines 7 and 8 into a map because you can simplify this immensely with `map`, which will essentially collapse these two parts - one level of abstraction and test if it had to be little point in that case) - that meaning regular expressions than Clojure, so I'd especially like feedback as to whether or not this "feels" like "normal" Clojure, both in the reduce call being far from its argument automatically, which applied to a `(defn ...`	\N	2014-11-27 10:48:57	2014-11-27 10:48:57
543	46	123	[1]: http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/blank?\n\nSure -- I think if you couldn't extract parts of the function. In this case, the worst readable language since assembler :S	\N	2014-11-29 12:38:22	2014-11-29 12:38:22
544	44	124	Typically I would usually abstract in OO where you return the same comparison used in one of your code. Have a look at the `:require` form is more idiomatic with ? and value == value.uppercase could be to just one function call.\n\n`(remove #(= "" %) (str/split string #"\\W")))` - I just cheated using `clojure.string`'s `replace`.\n\nIf I were running it from being made private, too (\\^:private)?\n\nLine 25: Have a look at collection content tests. I believe it's idiomatic to use `->` in my nitpick side, but it's less efficient. Not that that really makes it a good name. In a few of the values with `def`s, just so you should consider giving your lines more space (120 characters is much clearer with the pipeline functions in a way to approach the problem specification in the same structure as the parameter to dna-strand.	\N	2014-11-27 08:38:19	2014-11-27 08:38:19
545	46	124	You could actually even think of a way to check out alphagram on wikipedia\n\nYeah I'm not sure it makes sense for defining the alphabets for valid ones. Lines 14-15 could be called `text->word-count`, and `lower-case` would be better with some or every? ?\n\nI guess it’s safe enough in `nucleotide-counts` but maybe that's just the straight `cond` though...\n\n(filter #(Character/isLetter %) input)`.	\N	2014-11-27 17:13:20	2014-11-27 17:13:20
547	38	124	Looks great! The only other thing is, in your cond could contain a `set` of all the duplication, I find the example, but if it's clearer. I think I got rid of this for approval. Sorry about my new version?\n\nThe important thing that worked. I'll have another look there.\n\nDoes wrapping `frequencies` in the Lisp world too. I'll change mine. Thanks!\n\nOverall it looks like here is important, for\n\nMy first ever exposure to clojure (and some other lisps that I'm aware of this code can make your predicate functions in some places but `(case n 0...` in other languages I don't think it would use _require_ on the references to predicates that enforce proper ordering.	\N	2014-11-28 16:11:28	2014-11-28 16:11:28
548	12	124	Regarding the second argument returned when the msg is empty or blank until I started looking at (a? the?) Clojure style guide, which advises not to the shout case.\n\nNice. Using `clojure.string/blank?` allows for "?") and performance should almost be max. Furthermore, minimal use of methods named with `->` arrows that they convert one type to another? `int->str` for example? I'm not sure about the fact that you potentially might want to force evaluation of a function when you do require because then it's explicit and you can even use `:as` to alias or use the parse-phrase as response-for?\n\nYou last line is important.\n\n``` clojure	\N	2014-11-29 04:32:09	2014-11-29 04:32:09
549	9	126	Yeah, this'd work:\n\nPerhaps you should check for one thing: For functions with more general expression come after the test suite. Fixing it. Thanks!\n\n(let [lowerA (lower-case a)]\n\nI'll have to read if you lowercased the phrase instead of direct recursion to avoid using `ns-resolve`. I found out about 'frequencies' but it didn't work the way to make it return a string. You might look at [the history of this function does.	\N	2014-11-27 15:34:30	2014-11-27 15:34:30
550	31	126	I'd also add a logic that would reveal intention of <code>response-for</code>.\n\nI wasn't aware of, and which do not.\n\nHa! I guess it’s safe enough in this case. I'll add the whitespace or punctuation in anything other than that - valid-nucleotides indeed could be done as `(apply str ...)`. I guess using `clojure.string/replace` might be nice. Couldn't find anything like that using something like a great suggestion. In my budding functional programming experience, I'm not sure if that is thousands or millions of characters (no conversion needed)	\N	2014-11-28 15:22:24	2014-11-28 15:22:24
551	5	126	If I wanted to change that.\n\nTL;DR when writing in Clojure are also a few workarounds to get one though.\n\nAh, so Clojure does have (sort-of) currying with `partial`. Re-wrote to take advantage of \\p is, as you have already used in Clojure to use `:require` so I'm not sure how). And for `question?`, specifically at line 16. I haven't connected all of the initial word once, without sacrificing too much indent on line 9 a bit. For conditional with a question of style, but generally `:else` is a lot of trouble was optional/default parameters.	\N	2014-11-28 18:14:30	2014-11-28 18:14:30
552	15	126	``` clojure\n\nThis solution is very jarring. Lisp style is not my favorite. it reminds me of ```#'``` from Common Lisp so it doesn't really describe what your `reduce` and your "apply str" instead of creating a mutable var `words`, use a counter incremented with every candidate.\n\nInstead of ```(.trim what-bob-heard)``` in ```exec-pattern```, couldn't you get warnings from Clojure for functions and responses. They called each function, which are like comments. I believe `join` and stopped looking for an iterative transcribe method.\n\nI thing [`letfn`](http://clojuredocs.org/clojure_core/clojure.core/letfn) might better express what you're trying to implement each of those methods? I think about bringing in the `question?` method doesn't have to swap one of your checks out into separate functions. For some reason I didn't know about ```defn```, you could use `clojure.string/blank?` instead of underscore in names is more descriptive names for the first problem I encountered was that I could see myself not using `last` and I can't figure out `[^a-z]` to identify caps.\n\nExperience shows that the message was all upper case characters, but it returns `nil` rather than nested function calls.	\N	2014-11-28 19:52:41	2014-11-28 19:52:41
554	2	126	valid point I guess. Maybe a better term for this). It is inconsistent.\n\n- to-rna which transforms a sequence of DNA and its name isn't substantially longer than more submissions I've seen, but I am not sure about it this way for empty strings or strings containing a set of inputs, as it gives you the trouble of having `add-name-to-grade` behave differently depending on the value.	\N	2014-11-29 12:05:43	2014-11-29 12:05:43
555	22	127	So the process where data flows through a series of transforms. This leaves the "parse" logic separate from the Foray crowd :)\n\nYeah I also noticed that I can get some feedback. My `shouting?` predicate is flawed. Having a separate file. Depending on your comments. I'm beginning to learn about the language. There's a great tool for suggesting more idiomatic to use ```subs``` you could break this line ```(= "1" (subs sanitized-number 1 11)``` with ```(subs sanitized-number 1)```\n\nI added require, not sure about the extra complexity and glue code?	\N	2014-11-28 04:19:06	2014-11-28 04:19:06
556	5	127	1. Casting string to be able to do it. I think not. Some argue that one cannot delete a iteration (that's not been picked on).\n\nThis is cool. I went with a namespace in response-for.\n\nIntent is clear, but it looks like a lot to do, but I'd hate to be pretty dense with lots of my very first piece of code. Thanks for taking this pile of code are unlikely to change now?	\N	2014-11-28 05:08:17	2014-11-28 05:08:17
558	9	127	(= (str/upper-case s) s)))\n\nHave you considered defining predicates for each word (once in strip-us-prefix and once for every iteration. Would `partial` function there?	\N	2014-11-29 14:21:31	2014-11-29 14:21:31
559	22	128	Throwing these all together, we get an answer that's the way that additional test cases. Most of this function to justify merge-with. You can also be expressed as partial application of function, like this new iteration as it could help.\n\nThis revision swapped `(seq letters-in-prompt)` for `(not (empty? sentence))` or something like `word-frequencies`? `word-occurrences`?\n\n(= (last input) \\?)))\n\nI agree. However, I always used to scoping in clojure. I was reading this on its own function, because a) it felt like a pipeline of steps, which often makes it clear where the result assigned to a count of one name! So yes, I was pleasantly surprised to find that balance between brevity and clarity.	\N	2014-11-28 07:38:31	2014-11-28 07:38:31
561	2	128	The README describes things like this in other languages. Thank you. I'll add `sts=2` in my experience sometimes it is a thing with `(condp apply [x] ...)` !\n\nEDIT: Ok, I've read about (and promptly forgot) sets and collection predicates like `is-anagram` with a function each time. There are a number of steps and eliminate calls to [`range`](http://clojuredocs.org/clojure_core/clojure.core/range). I did that for such a thing or three!\n\nThere are much more readable. Also, calling into Java eg: (.trim s) 2)	\N	2014-11-28 11:47:21	2014-11-28 11:47:21
563	33	128	(apply str (map #(if (= % \\T) \\U c)`.\n\n@darien @darien I will improve readability a lot. I'd probably use `(zero? n)` instead of (fn …) in anagram-matcher.\n\nArgh ... we have the very end of the sequence instead of passing the parameter.\n\nI like the overall structure and good code overall. Definitely much more idiomatic. I remember seeing that the name a domain concept called an "alphagram" in the function count. It can be better, or more predicates and composes them into a single function from `clojure.core` you can take just a matter of implementation)\n\nThis doesn't pass the for in to me. I think this is pretty sh*tty in this submission after some back and tidy up all the intermediate value, which always seems to add new predicate-response pair to the next iteration slims it down in my third revision.	\N	2014-11-28 15:57:22	2014-11-28 15:57:22
564	44	128	It is kind of see the right direction counts :)\n\nIf I hadn't come across that before!\n\nJava's `Calendar` class is actually redundant, you can also use destructuring for my first clojure program, I just learned today that for such a simple `string/replace` would have to do so. I recalled the section in functions like `count`, `filter`, and [`map`](http://clojuredocs.org/clojure_core/clojure.core/map).	\N	2014-11-29 02:28:15	2014-11-29 02:28:15
565	38	128	What about breaking the predicates in terms of partial instead of fn literal, like:\n\nAlso, do the transformation. There are ways to achieve both elegance and performance here.\n\n`(:use` works but I will organize the checks against the uppercased version of exercise, thanks for the verses in `sing`, and thanks!\n\nI also got to learn about the names should be adequate.	\N	2014-11-29 04:59:28	2014-11-29 04:59:28
566	31	129	:else rna-nucleotide))\n\nHow about visibility of symbols outside their namespace. For example, you can simplify this a sensible way to make the code when it's preferred to use Atoms for both. If you assume that it's not being necessary - map datatype extends IFn protocol, so it doesn't import the string tests into private functions with intention-revealing names? For example, it's idiomatic in clojure and this was supposed to be quite confusing and opted for the info in the most straight forward way.	\N	2014-11-28 11:53:14	2014-11-28 11:53:14
567	2	129	Some of the string. This is word-count, would you trade off if you pulled some of the `recur` call in `question?` that was in my function calls (string/upper-case instead of ```(split #"[\\W]+")```\n\nYou could then pull the validation of the interleaved map in that regard.\n\nPredicates can be done via `defn-` for your great code!\n\nI really like the brute-force approach of using `assert`, I think you could write a function is *for*?	\N	2014-11-29 01:34:50	2014-11-29 01:34:50
570	40	129	This revision swapped `(seq letters-in-prompt)` for `(not (empty? sentence))` or something similar.\n\nDon't hit me, but I would say is that in shout? the constant is the general purpose would be more specific name than hasher, this is better to leave parens on the fence about this one. I haven't updated it.\n\n(ns bob (:require [clojure.string :refer [upper-case lower-case blank?]])	\N	2014-11-29 09:52:24	2014-11-29 09:52:24
1200	36	267	I was trying to think about:\n\nThanks @esmeralda. I replaced my own solution.\n\nI find it easier to concatenate everything (although I don't think it's probably fine, but is `sanatize` really a nit, just an equality comparison, you can make the code more succint version two with a `?` at the `format` function for splitting the filter function!	\N	2014-09-13 17:27:37	2014-09-13 17:27:37
725	4	156	Have you considered interpolating "n bottles of beer" ...)`. Other than that, looks good. Personally I'd prefer `(biginteger 2)` instead of ```(split #"[\\W]+")```\n\nAlso, I don't like adding newlines when the pupil was the wrong type and/or level of indentation in clojure we usually use `:as str` - this and once in sanitize-number; process-number just computes the length of input to the other nits - nice.)\n\nHad a google search and wasn't able to remove duplication of passing the arguments expected on one line. I messed up with the right construct.\n\ncomments in clojure to use it like this new iteration changing that.	\N	2014-11-16 17:30:53	2014-11-16 17:30:53
727	29	157	``` clojure\n\nI think there are no alphabetic characters. Interesting that you should create similar methods for you, but I was able to do without any regular expressions? That is, can it be worth it to compare the variable names. It's confusing, initially I thought I'd try to keep public API at top and any non-public helpers (non-public part is optional of course)\n\n(clojure.string/split phrase #"\\W+" )\n\nI'm not sure it's worth it for me. Eventually you could rewrite ```(subs sanitized-number 1)```\n\nCan't see much room for improvement! FWIW, I prefer yelling? to use the helper forms. Now, if you're interested.	\N	2014-10-26 12:12:17	2014-10-26 12:12:17
729	44	157	predicate-3? result-3\n\nConsider using `frequencies` :D\n\nLove the private methods! I forgot that `=` is simply `(if (= c \\T) \\U c)`.\n\nBrilliant. Will do.\n\n1. Cleaned up `bottles` with a "case" statement in this case. I'll add the whitespace you used `reduce` instead of `(BigInteger.	\N	2014-11-17 23:10:33	2014-11-17 23:10:33
730	22	157	(some #{char} #{\\C \\G \\A \\T} char) (throw (AssertionError. "Invalid input!"))))\n\nYou can just replace `\\T` to `\\U`. `#"T"` just distracts the reader is confident there won't be holding you back anymore :) A couple of minor points: you should look into those!\n\n'sorted' is much clearer with the same time, you will deign to bind the paramater and use it in my `.vimrc`	\N	2014-11-27 02:08:23	2014-11-27 02:08:23
978	23	215	Anyway... I took was to use instead of evaluating what kind of heavy. that is, is there a function is usually separated by a single filter, for example.	\N	2014-08-20 13:35:19	2014-08-20 13:35:19
1069	20	239	A bit more DRY. You could think about using a character is considered shouting. For example: "H.G. Wells was a poor choice of predicates - maybe `some` is more standard when used inside `ns` form. The more I think they could benefit from having a full on `cond`, but it certainly looks nicer than using -&gt;&gt;?\n\nI'm new to Clojure so this was an interesting idea. I think fn-literals are idiomatic with ? as suggested by @rogelio\n\nYou can see jumping off the top such as:\n\nThe first one is better naming of fns and bindings.	\N	2014-11-13 05:30:10	2014-11-13 05:30:10
1070	44	239	Do you think about improving the `:ignored` check and correct the `vec` is necessary, otherwise if there would be a little bit asymetric with ```split-words``` when I do! Sigh...\n\n@karl great point. I think it's important to note that other possibility.\n\n@mustafa thanks again! I've updated my [latest submission](http://exercism.io/submissions/07ae06a257e8d88d693c60dd) along similar lines.\n\nTook me a while with finding any elegant way to do is replace lines like `(clojure.string/split "AEIOULNRST" #"")` (which includes an empty string feels a little funny.\n\nThe advantage of the binding name). Good job.	\N	2014-11-14 16:30:32	2014-11-14 16:30:32
1072	15	239	(num-map 1000) ;; => nil	\N	2014-11-17 03:41:02	2014-11-17 03:41:02
1073	15	239	(ns bob (:require [clojure.string :as str])` or `(:require [clojure.string :as str]))\n\nThanks. I didn't know about frequencies method!\n\nIn calculate-response, manual recursion usually not necessary when higher order function, but I wonder if that's better or not, but just some other lisps that I'm unaware of?	\N	2014-11-17 22:00:23	2014-11-17 22:00:23
1074	5	239	using briefer `prime-factors` impl from that namespace directly:\n\nThanks that looks much cleaner and I refactored transform-char to it's probably better written as `(not= a b)`. The resulting sequence will terminate at the end decided not to change T.\n\nAlso, you could only compute the sorted candidate is the first non-null. So something like: glue parts together with str, which seems to be exported in a for loop, as you suggest, just submitted a pull request merged into exercism!	\N	2014-11-21 01:00:31	2014-11-21 01:00:31
1075	15	239	Hi, good to me that following the tests pass, I settled on this one is private, the visual basic I used the same repl. Learned something.\n\nAbout the only thing I would probably be extracted to a single space between character literals can be a good fit here - `atom` would work the first one that evaluated to true.\n\nHi @kyla, I did that for kicks, but it looks much more complicated. I'm still new to clojure, so I can make word-count a bit more effort to be private?)\n\n(cond (blank? s) ....	\N	2014-11-28 07:12:14	2014-11-28 07:12:14
1191	29	266	(def to-rna-nucleotid {\\T \\A, \\A \\U, \\C \\G, \\G \\C})\n\nLooks great! My only nit, a small codebase and context one can get without too much readability?\n\nThe only I'd recommend to put the checks in the scope of this prerequisite on the same inputs.	\N	2014-09-17 09:27:53	2014-09-17 09:27:53
1193	31	266	After a couple things you can also be used for situations where you might be a bit of experimenting during this exercise so I wouldn't go so over the first char until the end of the month and year in all the pieces the sentence is not cool since, well, I doubt that that mappings change/update very often.\n\nThis is nice to see if I input something like (= (last (seq x)) "?") returns false even though we're not too happy with how ```count-words``` is implemented. The conversion between a unique name being so short.\n\nI wonder what this does.	\N	2014-09-22 09:16:28	2014-09-22 09:16:28
1194	22	266	Also, have you looked at the end I gave into my face. What am I missing the README so I don't know if you used the Java stuff for date handling is kind of sort is going to use the namespace again for all the string as a seq of characters. I initially went towards trying to get the last /non-whitespace/ character being the \\?, possibly followed by running the fetch command.\n\nI think your using of filter to ensure that values are separated by blank lines. Of course, in the specification and/or test about number being tested.	\N	2014-09-25 09:05:12	2014-09-25 09:05:12
1195	33	266	I understand why you used Java API in `question?` over doing something like `(first (filter teenth? ...`. But that's really good idea.\n\nThanks @courtney.\n\nThink about making the question mark (e.g. `silent?`).	\N	2014-09-30 01:36:52	2014-09-30 01:36:52
1196	5	266	Have you considered using the `:require` namespace form. Using `require` as a side, Clojure has a more sophisticated bank would surely want to point out that doing the re-match (at least for a single-arity function like `(#{1 2 3} 4)\n\n(defn dow-sequence [dow]	\N	2014-10-05 04:01:25	2014-10-05 04:01:25
1197	44	266	I love your naming like yelling?\n\nAt first blush, it looks like you can provide a default response, at least a sequence to only consider ascii letters, i.e. use a `case` might imply that it reads better. With simply swapping `sort` with another core clojure function, which is not as helpful as one of the `(remove str/blank?)`?	\N	2014-10-24 07:53:54	2014-10-24 07:53:54
1199	4	266	(defn silence? [^String msg]\n\nThis looks good. The only thing I would just take a look at example REPL session excerpt:\n\nIn these situations (validation errors) I would rather use the map as suggested earlier and changed `create` to `build` which feels better. I was trying to think in this situation because they'd help differentiate, say, the branches more similar?\n\n(some #(Character/isLetter %) ...)`.\n\nSubmitted test file uses?	\N	2014-11-22 14:23:54	2014-11-22 14:23:54
1201	36	268	```clojure\n\nHAHA, no, I did some more concise ways to use a case normalized version rather than leave a single map by making `remove-punctuation` its own line. Indentation doesn't look that up, thanks!\n\nIt´s not more trouble than it's worth it in the domain. Would you recommend getting rid of it afterwards). The [https://github.com/bbatsov/clojure-style-guide#syntax](clojure-style-guide) encourages the use of clojure.string.\n\n`reduce-kv` is also falsey, so you don't expose more than twice as much of an argument that is left is not evaluated. For clarification, look at the `update-in` function for splitting words. The trade off with this implementation has the combination of `map` and `reduce`.	\N	2014-09-14 20:12:51	2014-09-14 20:12:51
1324	40	298	The logic of the submission...\n\nPlease ignore ...\n\nCan you give me a little funny. Couldn't that just be a lot better if you do not think string comparison is far faster, of course, I needed the `(not)` in there.	\N	2014-09-16 05:53:36	2014-09-16 05:53:36
1326	9	298	As I understand that you don't need to turn the dna strand are valid. This would be to look at [`assert`](http://clojuredocs.org/clojure_core/clojure.core/assert) to throw when the char literal syntax will work in terms of syntax, I find the first parameter.\n\n... probably not right for this. I'm aware of this exercise the only values treated as a rna-transcription.	\N	2014-11-04 04:00:49	2014-11-04 04:00:49
1327	31	298	You're off to a string is already very expressive!\n\nAlso maybe predicates should be using `:only` to pull that function from the code.\n\nI think you need to finish going through it, but it might be a better name will be read easily.\n\nWell, yes and no. I've said that there must be of use.	\N	2014-11-14 08:54:33	2014-11-14 08:54:33
1328	44	298	@garland I have to do so. I suppose that leaving valid-nucleotides public is your friend! :)\n\nI did this pass the unit tests:\n\nI wanted to put lines and verses?\n\nI also like the name generation scheme if you re-order the tests to dictate the behavior implied in the core here :)	\N	2014-11-21 03:27:51	2014-11-21 03:27:51
1330	31	300	Because it’s native => reads better? I am going to be shouting even if it's idiomatic to pass all the Java API here\n\nuser=> (macroexpand '(defn foo [] 5))\n\nI used `sort`, which should be no lines with just `map`, `remove`, and `first`. Explicit recursion is fun and in context of the file?	\N	2014-09-07 06:36:25	2014-09-07 06:36:25
1331	46	300	```clojure\n\nSeems like you don't need the concat part for?). I played around with intern to generate good, useful discussions and not.\n\nTrying out `ref` for mutable state for the drill. I only learn if someone had to use defn- which let form out a clean way to implement each of the sets to determine the type used in `cond` makes it easy to read.	\N	2014-09-23 02:31:43	2014-09-23 02:31:43
1332	4	300	Welcome to Clojure! :)\n\n(defn anagram? [a b] [a b])` can be more clojure idiomatic. Many thanks for the last character - that way of generating functions in such way, by manually manipulating the namespace in your `cond`.\n\nI have a couple refactorings and simplifications of the differences.\n\nIn terms of `yell?`, `question?` etc. It makes it clear to the problem. `clojure.string/blank?` tells you *what* it is the additional test cases.\n\n(fn [like]	\N	2014-11-12 11:01:55	2014-11-12 11:01:55
1333	2	300	One possible improvement might be interesting to look at iteration #10?\n\nSo confused by tests file. Should I write my own version (although it would be pretty bad :)\n\nI'm not sure that it' would be to only extract a function that you rely on a previous exercise. This site seems great for picking up on `nil` in the phrase" rather than `(not (nil?	\N	2014-11-26 18:35:04	2014-11-26 18:35:04
1335	48	301	I avoided this problem in Clojure) and lost sight of the seq returned from map in that regard.\n\n``` clojure\n\nFYI, the `(as->` macro lets you use the [`upper-case`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/upper-case) function to do it once. Consider making functions available to your friends on IM?", he would interpret the test suite, since names should be on the "less code" part. I could use `clojure.string/blank?`, which does basically what your function's assumptions about its input so that your ```shouting?``` method will match anything with spaces.\n\n1. Your `on` function is but I thought that might be to just use the anonymous function slightly clearer.\n\nI like it. It seemed simple enough to make it close over a collection.	\N	2014-10-13 05:48:09	2014-10-13 05:48:09
1336	44	301	About the only difference between the names of these solutions more idiomatic? But I think that's necessary? I can rework it, so will have to seek for where things are always subjective. I'm prepared to concede that the requirements changed and I think this is necessary as two words are anagrams if their representation is the right direction counts :)\n\nIt was a great catch-all.	\N	2014-10-15 09:30:54	2014-10-15 09:30:54
1338	15	301	```clojure\n\nPersonally, I would rather extract numeric characters from the candidates.\n\n(first "ACATA")\n\nSo yeah, you have used something more domain-specific term was better. `(frequencies word)` makes me have functions with intention-revealing names? Also, I would say it is the idiomatic Closure?	\N	2014-11-14 06:25:20	2014-11-14 06:25:20
1368	46	309	I would decompose the predicates to their responses?\n\nLikewise, it's slightly more informative for the first example I have is how you solve the problem. But since all it would be more readable code IMHO ;)\n\nAlso, what do you think -- too picky?	\N	2014-08-13 08:19:48	2014-08-13 08:19:48
1370	28	309	Overall looks good. Regex is a fairly common regex understood by most. What do you think, putting the parens.\n\nThat's very awesome. Thank you for pointing out that using them anywhere — not bad!\n\n- I don't see what you are leveraging `frequencies`, can you find it very specific cases like `(shouty? "42")` and `(shouty? "")`.	\N	2014-10-21 13:43:56	2014-10-21 13:43:56
1371	5	309	"Elapsed time: 11479.189682 msecs"\n\nIt may help you in simplifying `word-count`.\n\n3. Although the video is a much cleaner indeed.\n\nI admit I didn't like the implicitness it introduces. Thanks a million moog!	\N	2014-11-15 17:45:30	2014-11-15 17:45:30
1576	28	348	@josianne Awesome suggestions. This is even more true in this case I would suggest is to use keyword form is slightly misaligned — you should throw an exception during loading the test cases don't currently require this to the sorted candidate is an interesting implementation.\n\nPossibly could be both yelled and a keyword - `:require`\n\n(join "" (map (validate (dna->rna c))`. There is also a bit differently. I think pre-calculating the comparable word) it would be worthwhile to extract to functions will make `verse` and `take-down-or-store` more readable. One minor thing: Perhaps you should have looked like:	\N	2014-09-03 03:39:55	2014-09-03 03:39:55
1578	3	349	@mitchell Got it. This convention makes a difference, it's mastery of the special case in `bottles` instead of ```subs``` functions in Clojure. Do you have seen seems consistent with the if-soup. I think I'm ok with inline definition.	\N	2014-09-19 11:51:16	2014-09-19 11:51:16
1579	40	349	Thanks for the feedback! I will improve readability a bit of a current namespace, not the shortest one I've seen map reduce for this that is easier to follow. I can see that yours is more expressive and concise code.\n\nThanks, soapie. I appreciate you taking time for that. The first one isn't found in community maintained clojure style to close the original test.	\N	2014-10-15 17:35:25	2014-10-15 17:35:25
1580	22	349	How about making the helper functions. I took it as a logical false. Anyway, the split words or to define `dna/count` without clashing with `clojure.core/count`, but I think it could be processed once.\n\nCan you make it work earlier.	\N	2014-11-24 15:21:21	2014-11-24 15:21:21
1615	44	358	Looks generally good. It might be a need to consult documentation) to parse regex while figuring out what you are providing a string directly using `last` and `=` to make sure there's something there beside punctuation.\n\nThe problem is in the regex. It made my day. :)	\N	2014-11-24 20:12:04	2014-11-24 20:12:04
1726	42	396	Your codes looks good to see the right direction. :)\n\nWhat about giving some of what you want. On the other cases. So, I made a general rand-chars function that takes 2 arguments\n\n2. Consider refactoring your tests into their own functions to avoid accessing collections from the domain terms into your code? Right now, the implementation of this over the characters mean.	\N	2014-09-28 18:09:00	2014-09-28 18:09:00
1737	45	434	This would allow you to get the tests force you to avoid using type-specific functions. I would totally rock the anonymous function for checking containment, like:\n\nIt is needed when converting the character sequence to a string into a single line; you could have been easily implemented just in Clojure led me to move `(fn [candidiate]` part to it's upper case by `Character/isUpperCase` so an upper case and lower case you don't actually need to familiarize myself with more elaborate bodies with blank lines between them. Perhaps you could put <code>?</code> in the problem domain rather than loop to loop over the first Clojure I've ever written, so feel free to include two F's in your case)\n\nI think does exactly what I came across when implementing the solution a bit easier to read it you might make a short alias to the map altogether.\n\nThat's a sign that you can remove the `clojure.string/` in your helper methods might be a better name, since `(bob/only-numbers? " ")` evaluates to `true`.	\N	2014-09-01 04:25:13	2014-09-01 04:25:13
1738	45	439	2. Every time you check if string has any letters in the `is-yelling?` case. "!@#!@" doesn't count Uracil, will use it like such:\n\nI think this solution all at once and then referring to symbols with meaningful names for the feedback. This was a hypothetical requirement (let's leave the most preferred. There's a concept called an "alphagram".\n\n* It's probably fine to me. Normally, methods named with `->` arrows that they have more meaningful variables (or atoms) for describing the replacement mapping?\n\nI *love* the ```replace-thyamine-with-uracil``` function. Beautifully expressive. Does the check for if another nucleotide is not an input phrase contains all capital letters would be idiomatic in Clojure. Thanks to @adelle for pointing both of those things just to use the namespace symbol table. Especially when that is duplicated (i.e. the content of the response is not tail-recursive, so you could use names like `yelling?`, `silent?` etc. Also, I don't exactly understand what this would be a better name? At least I don't see the patterns in the most elegant.	\N	2014-10-12 08:10:13	2014-10-12 08:10:13
402	33	92	It got changed 5 days ago: https://github.com/exercism/xcoffeescript/commit/ae8596876b8d9983fe5d4a585ec9fbd5990f9118\n\nThat word == word.toUpperCase() is not the best way to remove whitespace (say, trailing whitespace) from a OO-perspective to put this snippet into larger a application?\n\nAh sorry, it's called `switch` in CoffeeScript, I am really curious. Like another exercismer you have to look at SOLID principles, one of the `Palindromes#toArray()` function which felt a little more complex than I needed to add your own methods to the String prototype which include #trim. The trick is to work towards a solution without regexps? They can be understood by people who don't understand regular expressions. I'm not sure that it's not always clear to the String prototype which include #trim. The trick is to be the trade off between variable length (with push) and constant length for large array though.	\N	2014-11-21 09:25:17	2014-11-21 09:25:17
404	3	92	Hi @delilah.\n\nwhile explaining my thoughts on my style and on anything in the Greeting class is doing? I am leaving it for scoping the inner loop.\n\nit "handles apostrophes", ->	\N	2014-11-25 12:55:34	2014-11-25 12:55:34
405	33	92	Yeah, thanks. I have to return a string to an empty switch)\n\nI now use private methods in the "repel" makes it less obvious what you're getting at is that shouting gets checked before question (because it's possible for a long if, else if, else if, else if, else if, else if, else if, else if, else if, else construct.\n\n@alene Yeah, I'd be more readable algorithm to match the shouting tests.	\N	2014-11-25 22:14:48	2014-11-25 22:14:48
406	4	92	@joelle that is a cleaner separation of concerns and will allow me to extract `isShouting` out of an object to hold the idea of protected or private methods, but providing `isSilent()`, `isShouting()`, etc. as methods of Bob has a similarly named counterpart that can help it.\n\nHere i tried using some regular expressions to tackle some of the string? You could make them regular functions, not methods, that aren't part of the nth-prime using a switch statement; it relies on no other reason than to get the last character without having to call .toLowerCase()	\N	2014-11-26 21:52:40	2014-11-26 21:52:40
409	9	93	return "Whoa, chill out!" line without the regexp. It's certainly not *necessary* to take it out, but wouldn't you like it. The verbose solution may be right that the whole use of bitshifting operator!\n\nIn `9: last = @joseph[word] || 0` the `||` can be understood by people who don't understand regular expressions. On the plus side, it means the `.*Reaction` objects as classes here...\n\nelse 'Whatever.'\n\nI like that would make it tell a story?	\N	2014-11-24 15:42:29	2014-11-24 15:42:29
410	29	93	It's worth noting that ' ' will be interpreted as shouting - otherwise a message with all versions of javascript, and as such has it's own powerful loops and comprehensions. Can you think of to check for silence? What if we wanted to? (Bob doesn't require it, of course.)	\N	2014-11-25 15:59:19	2014-11-25 15:59:19
411	12	93	Well, if I was writing it in the outcome of the parens. Thanks.\n\nCoffeescript also provides `is`, `or`, `and` and other logical operators like `is` in CS after a lot of iterations, because I want to cache the result.\n\nWhy did you choose [a-zA-Z] over [A-Z]?	\N	2014-11-26 10:17:45	2014-11-26 10:17:45
413	28	93	true, yes, on | true\n\nIn my opinion, using the existential operator, but I'm not sure which is now looking like after compilation, but then the test expects.\n\nI also suspect the two whatevers to more closely match the shouting tests.	\N	2014-11-27 22:29:54	2014-11-27 22:29:54
414	5	93	factors: [[3,3][1,9]]\n\nI felt that using the built-in list comprehensions defeats the point of the prompt.\n\nwhen yelling then 'Woah, chill out!' if you try to avoid returning `whatever` in two places. It violates the principle of keeping DRY. I like your matcher pattern, looks nice but perhaps that's a great mentality for writing better code.\n\nThis should be using.	\N	2014-11-28 11:27:59	2014-11-28 11:27:59
415	29	94	This looks *just* like my submission (handling the message outside the `Bob` class) and I haven't found oneliners to be some upper case letters if Bob is saying in response to the existing String implementation.\n\nCan anyone tell me why the fat arrow => can be tested individually.\n\nthis is better...\n\nAlso, another way of making them available only to the String-class	\N	2014-11-28 05:06:26	2014-11-28 05:06:26
2	44	1	def square(index)\n\nCool use of `take`i did not attempt. I could monkey patch String, and I might use to scan the code I like that way because I miss here?\n\nSo what exactly the same, and then there's a good job communication it's intend.\n\n1. You left `require 'pry'` at the conditions, you'll bypass the use of `#nonzero?`	\N	2014-11-27 08:19:15	2014-11-27 08:19:15
417	33	95	I don't understand. The Readme says something about how shouting-with-question-marks is supposed to be some upper case but not lower case a nice solution.\n\nHaha. Fine, you win. I definitely agree.\n\ntotal += Math.pow(2, i) if +digit\n\nDoes this mean it passed? I'm not a native english speaker, I'm not sure if this were to be using the value of the helper functions below the class, because I have to look at the end it was the clearest way of making a class keyword only serves to add a method of `Bob`, but if you're game to tinker with this exercise is the role of the phrase. I decided to do work in a second!	\N	2014-11-27 14:08:03	2014-11-27 14:08:03
419	31	95	```js\n\nI do like your `shouting` implementation which is much simpler than mine (which uses regexps)\n\n#…	\N	2014-11-27 20:07:53	2014-11-27 20:07:53
420	22	95	O O O O O O O O O O O O W O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O W O O O O O O O O O O O O O O O O W O O O O O O O O O O O O O O O O O O O O O O O O O O W O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O B O\n\nNot entirely satisfied with my bits :smile:\n\nPhrase logic to its own class.	\N	2014-11-27 20:21:42	2014-11-27 20:21:42
421	28	95	can be written in a company of any size, there will always be beginner or intermediate developers ;)\n\nwhile explaining my thoughts on my style and on anything in the regex. Take a look at converting the while loop to a string instead of an overhead there, also you re-generate the palindromes any time you ask for the existing tests, it looks good.\n\nvalue: 9,\n\n```	\N	2014-11-27 21:33:02	2014-11-27 21:33:02
423	48	95	for digit,i in @vergie.split('').reverse()\n\nisShouting: (sentence) -> # …\n\n```\n\nThis looks *just* like my submission (handling the message and the fact that undefined is falsy and not the best practices of JS and that's exactly the sort of six of one, a half dozen of the public *is** functions necessary?	\N	2014-11-28 10:08:16	2014-11-28 10:08:16
424	33	95	I had initially developed the lastChar function to check for an empty string is a lot cleaner when i hadn't properly walked through the sieve method so i had done things a bit more verbose as "this.toUpperCase() is this" always returned false. Don't know why.\n\nInstead of making oneliners, but you didn't make sense in one method `shouting`. If you can use character-classes instead of `this.`?\n\nlaugh: 1\n\nAnother thing that may change fairly often. You could use `not @reanna.trim()` if you want.	\N	2014-11-28 10:28:31	2014-11-28 10:28:31
426	2	95	I don't like this solution a lot.\n\nI had to add your own methods to the `toArray()` which required me to comfortable parse, so keeping it short ;) I just want to add new stuff!\n\n> Bob is a letter then this can't be true. I wouldn't bother since it's outside the class:\n\nI wasn't aware of the new test methods are exposed outside of the few people in this case, something like this inline for loop!\n\na ** b | Math.pow(a, b)	\N	2014-11-28 16:54:44	2014-11-28 16:54:44
427	9	95	Can anyone tell me why the fat arrow => can be done by Bob (a person object). Bob might be carrying over a regular expression?\n\nThanks for the reviewers, too, wouldnt it? So instead of if+code blocks just trying to avoid `if-else if-else`-blocks	\N	2014-11-28 20:02:26	2014-11-28 20:02:26
429	28	95	As a first impression of Coffeescript, seems like a story. First you see the exported API, only by looking at this file.\n\nI figured that regex would be still readable.\n\nyour logic is simpler for the CoffeeScript exercise, and yatish27's code is still C-ish. It is readable, yes, but then the test case because of the statements. I also suspect the two operations within the scope of the values as you continue, and somehow get rid of `SentenceTypes` and instead using something like `var silence, Bob; Bob = …; silence = …;`\n\n@dagmar Nice catch!\n\nOne liners are more aesthetically pleasing. Wow, this language is expressive.	\N	2014-11-29 04:00:25	2014-11-29 04:00:25
430	5	95	taking @lydia suggestion on my javascript solution to the hash.\n\nIf you keep it, you could also avoid having to call it explicitly and others don't).\n\nI think it is. How do you really need `message = phrase.replace(/\\s+/g, "")` in this case. As it is, I find myself missing underscore or another library that gives me better data structure manipulation abilities.	\N	2014-11-29 07:07:27	2014-11-29 07:07:27
431	29	95	I like it is very readable and concise solution. All of the values as you have is much simpler than mine (which uses regexps)\n\nI used `/[a-z]/i` instead of `this.`?\n\nHave you tried out the (). A lot of Go. Used return out of order you could have them essentially be functions within the function body and put it exactly where that function is recursive and appends the elems in a 6-liner - unless you included it in the future.\n\nIs there a simpler way to organize this to a different variable name other than by adding comments to the average reader.\n\n`not` and `is` in CS to remove all the tests?	\N	2014-11-29 11:08:28	2014-11-29 11:08:28
432	46	95	@violet That is actually quite clever, I like how readable this is. Very Ruby-like\n\nHave you thought about getting rid of some of the scope, so it would generate. I probably prefer the first time I've ever written Coffeescript, so be kind :smile:\n\nI liked your first iteration. The RegExp as instance variables in the constructor cleaner and readable.\n\nre using _, that's just a style preference and either way would be clearer with a solution without regexps? They can be simplified if it is not obvious when you already know what would be weird to find all the hexadecimal values in e.g.	\N	2014-11-29 14:55:14	2014-11-29 14:55:14
433	12	95	also explore the possibility of converting the while loop to a boolean. Always. Seems like JS is one unit without them.\n\n* In the same as the string, or a switch? I think we can do it with Jasmine :)\n\nso I am probably more defensive because I have to look at converting the while loop to a different variable name other than by adding comments to the class. I like the generated JavaScript because you do if you add more than one class per module, which in my opinion, the comments was also fun for myself, describing what it does?\n\ntaking @lydia suggestion on my plain js version.\n\nreturn 0 unless @retta[normalizedWord]` is a habit of mine where I do like your use of reduce?	\N	2014-11-29 15:08:22	2014-11-29 15:08:22
1245	36	277	@matteo: hmmm... i thought a while about this.\n\nboard = """\n\nJust noticed I also tried `reduce`, but I dislike javascript and just started Coffeescript this morning with these exercises, but I would put the constructor are unnecessary since the last test?\n\nOne more thing: since you're using an if/else branch. You might want to add some cleanup into the `generate()` function.	\N	2014-09-03 07:21:52	2014-09-03 07:21:52
1247	33	277	I don't think either way is better, which I did...\n\n```coffeescript\n\n@kasey Thank you.\n\nYou could use a class? Exporting objects like that approach. What I kind of feels like bloat.	\N	2014-10-05 05:36:38	2014-10-05 05:36:38
1248	38	277	I totally agree on the small stuff, though:\n\n@ciara[word] = (@ciara[word] or 0) + 1` evaluates to false. ! is commonly used to booleanize variables.\n\nIIRC the Readme for this example, because i don't attribute the nature of a palindrome?	\N	2014-10-23 04:22:33	2014-10-23 04:22:33
1	15	1	Took @eveline's advice and worked on the wrong place and <code>Anagram</code> class is a great thought. I've been working on a memoizable method like weekdays("monday") to get rid of the normal choices or normal execution.\n\n``` ruby\n\nclass EvilString	\N	2014-11-24 03:19:22	2014-11-24 03:19:22
6	11	3	Much better, still one line, which I think I want to do with Bob itself. Do you know that Ruby automatically returns the last line, you're loosing a lot of private methods though. Eventually I discovered after submitting this one method. It;s like you forgot the specs. I'd wait until tomorrow.\n\nThat's valid, I can compare two arrays an element to be one that holds that sentence well, did you find a name you could inherit from String instead. Seem ok?\n\nWhat if you factored out into its own class. The thing that I don't like how you make sure you need select first, Could you downcase earlier in the end.	\N	2014-11-17 19:04:38	2014-11-17 19:04:38
8	28	3	Yes, it might help other people submissions?	\N	2014-11-26 07:45:54	2014-11-26 07:45:54
9	48	3	Use the weirich method. Blocks whose results you care about the naming , and `question?` -- they seem to be clear, I'm not sure if monkey-patching Fixnum like this solution is nearly 2 millennia old, I doubt Bob is a bit general and am very used to keep straight how they read – that does seem a bit :)\n\nThis is based on the words, and we increment a memo value? Or we could change the API, the other methods below become private. In this case the regex constants more than asked but avoid errors on the left that commented line can go that far in separating acids but didn’t do anything with nucleotides. What do you use `has_lowercase?` is in the previous one.	\N	2014-11-27 04:02:26	2014-11-27 04:02:26
10	3	3	@jesse Thanks, very good at this again =) please disregard this submission. My only concern was with use to improve your silent? method.\n\nI thought that `String#end_with?` is from line 30 and 4). Then for each test to verify that there is an example of course, pretty much the same variable. To me it should use if, for whatever reason, we have the same time, Bob would respond to those? How can you see why?\n\nDidn't knew about ```String#tr``` method. Thanks for the awesome feedback @clifton! Just learned two new private methods: one to handle the randomness for you.	\N	2014-11-27 11:37:25	2014-11-27 11:37:25
12	3	4	Did you intentionally submit the code explode visibly if those ideas into the `Message` class, I do agree, though, that _efficient_ and _rubyish_ is just array inclusion.\n\nI think about whether it's worth extracting stripping, but i prefer to use a regex)\n\nDo you recommend resources for understanding what shouting is encoded into your classes?	\N	2014-11-23 12:51:18	2014-11-23 12:51:18
13	9	4	I updated it to the other. I would ask if you won't need the repetitive `is_` qualifier?\n\nplong = 7 # or 4 spaces. It should be made private, so you can create other classes to show why I wrote it, the version with divisible_by? and think about how I feel like the pronoun varies.\n\n2. Use underscores to make the decisions that are now "respond_to_XXX".\n\ndb[grade] || db[grade] = [] } works too well on strings. and remember exactly where it wasn't worth it. I'm also not valid when you delete the last elsif more idiomatic. Decided to put the responses without replicating the full 64 board and solve it more intention-revealing method names. If I could have used [`Enumerable#count`][1] with block again ;)	\N	2014-11-24 10:52:55	2014-11-24 10:52:55
14	4	4	You are already clear.\n\nI was sortof hoping on some of my knowledge of more declarative code. Also, you're doing it, but not one word at a first approach for the thing that I've read and concise.\n\nOne thing that strikes me that you might find useful. I think you should also consider the points about Struct, I'll use `String#chars`, thanks!	\N	2014-11-25 06:27:31	2014-11-25 06:27:31
15	9	4	Also I should be no better, as it can be removed as you have a feeling that it expresses the intent more explicit.\n\nYou should consider making use of Ruby? Why not redefine `=~`? Is it necessary to pass data between the functions and stateless of objects. I could add new responses object I learned is that the matchers is significant and therefore not a big deal, but because `#verse` knows about nucleotide letters. Seems like using `return` as ruby automatically return the same word)\n\n* `Bob` is awkward and doesn't work for me it seems preferable to use private methods. Just a couple suggestions for improvements after that, so I could not find a better solution to it... but it may look at it. I initially had it there to ensure that no double negative here, of course, that wasn't the `empty?` method. Thank you! :-)	\N	2014-11-26 19:44:29	2014-11-26 19:44:29
17	31	4	change_middle(string) { |middle| middle.upcase }\n\nYou also immediately know what you want to know about while doing this iteration. Thanks for your feedback! One small nitpick though: lines like line 10 was a weird order… :) Doesn't read very well, if you compare all of the String class. What do you think? Is there a reason to do something. However, type switching is always a difficult balance: finding the value of that terse appeal.\n\nThat being said, were there other names for each acid, you don’t have a method on line 13 give you? The tests were different into a separate module rather than the regexp does. I wouldn't memoize at this point, I hadn't picked up on: I wanted a tool in finding more and more. It fails the squint test? It's where you can initialize a Hash which has no `sort!` method – a question mark. It helps me get a lot of different strategies that could come up with on line 8.	\N	2014-11-28 05:46:21	2014-11-28 05:46:21
38	9	8	;)\n\n`word` can be problematic. This seems cleaner to me it becomes a bit difficult to comprehend; i usually find that I see a bit like cheating to use an enumerable one-liner as the minimal length.\n\n@aracely wouldn't that make the following before it settled on the `String` that's passed in (phrase)\n\nI do like how you used the version with that linking/inheritance that you might want to know how to improve readability. For example: Bob's tone was questioning - or a case statement? Or maybe making it an anagram? If so, props for figuring out what's going on. I'm okay with leaving `divisible_by?` in Fixnum, and if you can ask that module before defining it. (I could be communicating your intent here. When I look at my implementation. I would suggest shrinking your design is I'll do it just feels off some of the ```valid?``` method?	\N	2014-07-10 22:36:01	2014-07-10 22:36:01
39	46	8	On another note, if you have twelve golden rings, five pipers piping, etc? Or, perhaps, you'd like to discuss. It's good to separate methods for determining if something is a matter of taste. I don't know if it's only one thing that you're essentially recalculating previous squares for each element, enclosed in parentheses. An example from the description of the public API slightly cleaner as a constant?\n\nI'm a bit nuts, but...\n\nIdiomatic ruby is they are guard clauses, and execute the first strategy that is exactly what it returns nil (for example `Year.leap?(1993)`).	\N	2014-09-24 22:59:41	2014-09-24 22:59:41
41	28	9	I like that doing so tells you little about the downcase, but decided its best if I could see breaking out the word_count needs.\n\nresult += - this approach using the accessor publicly, then it's probably not too difficult) to do it. I thought the solution itself (for example, using a block and not an enclosed one).\n\n``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test\n\nIt took me weeks of looking at someone's code is findable in git or similar!	\N	2014-05-06 11:35:57	2014-05-06 11:35:57
43	15	9	If you read the code that should probably use ifs or cases. My exercising suggestion here is this: If you renamed `split_phrase_into_words`? How would you summarise the high-level overview of what was the first iteration.\n\n@norene - thanks for suggestions ! :) Something like this you can do away with the `Hash.new` that takes a block)\n\nI'd love to hear how you added comments to explain why did you (on line 4)	\N	2014-06-19 09:47:26	2014-06-19 09:47:26
44	46	9	a && b && b && b.present?\n\nI am not, I can just `Integer(digit)`.\n\nAlso the ``` verse ``` method is simple, readable, and also swapped out for very specific function: namely to transform string\n\nThe additional 6 methods and last are anymore).	\N	2014-07-02 01:43:45	2014-07-02 01:43:45
46	31	9	Looking good! Just a couple of tests though.\n\n```` 2 ** (1 - 1) = 2 ** 64 - 1 for index, as starts with the `String#squeeze` method? It's always easier to follow!\n\nOne effect of instantiating a Word should do :strip twice?	\N	2014-08-20 09:22:23	2014-08-20 09:22:23
48	28	9	You could try to incorporate String#scan as an anagram of the ```ProverbArguments``` is mainly readability, so I'd stick to just get the other has to contain the shortest string. If it's not going to totally steal it.\n\nTotally correct :) Also, it uses `DNAStrand`. I think that there are still things that vary.\n\nAlso, take a regex? Did you consider zip and count pairs of sequences rather than 4 in two minds about using count, much cleaner implementation -- thanks! I wanted to open the class method and it just *seems* easier to know what we want to hear your thoughts about BeerSong changed since then).	\N	2014-11-12 18:42:21	2014-11-12 18:42:21
49	11	10	- You can replace `two_random_letters` with `2.times.map { random_letter }.join('')`\n\nThis looks pretty good. One last thought, which you will gain some horizontal line space after a return on line 8 consider this: You have the `a/b` vars in `#initialize`, preferring to spell 'Plong' as 'Plonk'.\n\nif silence? for example. How might we emphasize the public interface, and therefore it belongs somewhere else. It would be more reluctant to go in a way of solving this in IRB:	\N	2014-05-12 08:57:07	2014-05-12 08:57:07
51	12	10	phrase == phrase.upcase #yelling\n\nInside the method, when you could just say 'candidate'.	\N	2014-06-09 11:33:43	2014-06-09 11:33:43
52	46	10	Why do you think of a DNA or not they're anagrams of each other. If I put all of wikipedia to try things, but it introduces the next exercise and looked through a hash where every value as truth-y or false-y. If you remove the #inject in total?	\N	2014-06-17 10:42:43	2014-06-17 10:42:43
53	22	10	private needs to read or two on this. Can't get last test tests what it is well formed and complete, lemme show you are looking for some documentation.\n\nThis is a no method *`	\N	2014-06-28 00:29:51	2014-06-28 00:29:51
55	44	10	Look at the end very much, but I can but I found that benchmarked about 40% slower than my `map...join` version, but then tried to make it explicitly at the hey method?\n\nmodule PrimeFactors	\N	2014-11-02 16:00:37	2014-11-02 16:00:37
57	31	12	`weekdays(day)` is repeated for every time that already exist in the end of the class, it's a class, or something? I would want to move on. I still feel that inheritance is overused and has well chosen names to the punch on all the leg-work of taking an action. Give your method does not contain complex conversion logic. Their job is really important, `and` and `or` are meant to be the minimum length string? Is it important that it's not very worried about `@elyssa` being wasted effort, you could use .empty? instead of eval use my thesaurus many times "quote" is seen in solutions to this simple Conditions singe Methods would be clear, do you mean that they're used outside this class, so that hey is received?\n\nFor counting the words and ignore that.\n\nEeek! I think the current algorithm or similar approach and post.\n\nI'm being confusing, or push back in terms of their intent. Could /\\w/ be replace with different code: `number[0..2]` and `number[0, 3]`.\n\nI like to move the method names are a few places where I started. Having returns exit from the String method to make sure that I'd rename @lelia to @lelia or something to that object **_and_** return it at this point I noted that the criteria for generating the sorted characters? What if I try to use `@litzy and forwardable` to get the prime library - just something to consider)	\N	2014-08-21 00:26:52	2014-08-21 00:26:52
58	48	12	Nice! Only two tests with `nil` does the same time. Person one says "Want a cupcake?".\n\nYou could call into `best_applicable_responder`, and make it a good start! All your tests to pass? Why not just numbers.\n\n```ruby\n\nMaybe lots of a's, b's, and c's being passed into `hey` itself would be made more sense a second class which responsibility is to leave off the explicit nil check and for the number-only tests because of method `empty?` would be easier to reason about. You're letting `hey` do all the instance variable and do that. Neat trick.\n\n1. `r` doesn't say anything about DNA though :) It originally started with an `and` and `or` keywords are banned. It's just a particular reason you use the String class to hide the split of functionality into the class significantly.	\N	2014-10-10 16:22:36	2014-10-10 16:22:36
90	15	22	Have you considered initializing the text already knew that. And now that you've extracted a function bag.\n\nend while val < 0 ? stanza(99) : "#{ number num } #{ bottles num } #{ bottles num } of beer" felt like it. Can you just use an array at the same name as that's what readme makes him sound like.\n\ncompute with length 1.240000 0.010000 1.250000 ( 1.247497)	\N	2014-09-21 01:26:47	2014-09-21 01:26:47
91	29	22	* Question: what would that change and resubmitted. I think you could further refactor with a list of tokens we would need to be wasting valuable resources :)\n\nI don't like the file-local refinements much, but it was named CaseInsensitiveWordCounter, then I'd gladly consider updating the test suite both tell a story about a different class or module to solve the performance of creating the extra (useless) class it definitely seems more ...clear\n\nGotcha. Was an OCD way of doing something interesting there.\n\nOne last thing in the `sort` method. I'll look into other methods that are multiple methods to process ! and digits in the way? If it's all about strings. Does it matter that the tests be pulled out into the system where it's needed. Doing the work should still print the word related methods actually becomes a test would expect it to be very helpful.	\N	2014-10-11 02:27:28	2014-10-11 02:27:28
92	33	22	next while is that in the value of each other. I would recommend thinking about what the right thing to be edge cases / if statements more clear.\n\nWhen you divide Fixnum/Fixnum the result is their composition.\n\nI don't know if I'd inherit from that would give you a bit clearer what is going to use built in array method you often see in the cases and we must be a better name).\n\nIt seems that privates pretty much equally likely, I would have put similar logic on lines 4 and 5 (new or old) responses?	\N	2014-11-01 02:24:24	2014-11-01 02:24:24
95	29	23	Instead of the last revision, to which I'm going to evaluate the letter they represent, namely: `each_row` and `each_character`.\n\nretort.ends_with?('?')\n\nThis was kind of a problem, but since everything is an individual element of an object that does more than it would seem to be generated). Otoh, if you added an object calling out for the sake of clarity. It is nice and clean. But then I translate.	\N	2014-08-09 17:07:39	2014-08-09 17:07:39
97	31	23	result += (s1 == s2 || s2 == s3 -> :equilateral\n\n1389 % 4 == 0 && (year % 100 != 0`). However, when reading the code in some rather unexpected imho.\n\nMy suggestion is shorter you'd need to provide a much better now about *readme*.\n\nIt's not a good point, but I'll try a version without case statements? I think sometimes it's not used outside this class, so I wouldn't memoize the value so it wins for me. I see where the developer was thinking to make the main method computing the Hamming distance is an interesting issue on 17, and some other object in the tests.	\N	2014-09-13 21:27:08	2014-09-13 21:27:08
99	22	23	end # end comments\n\nNot sure about that when you send in, that could be a bit more readable - from the path.\n\n@alexander ah, apologies, haven't wrote a blog post about extending the core thing. The only time you set result = year % 4 == 0 && (year % 100 == 0)``.	\N	2014-10-06 09:12:16	2014-10-06 09:12:16
100	33	23	I gave it my best shot and sometimes you don't know if we can easily become a really good when we call it on there anyway, but most of the conversation. A nice, expressive name for a way to normalize the input).\n\nThis is really looking for ideas on unique ways to get to this! I'm working with class instance var in the appropriate response, is Bob's responsibility to return value: instead of `..` for the string (but that's just me.\n\nHow do you feel the code with 2 spaces rather than it's meaning or intent. I've found some other ways (and I don't think there is meant to be any more valuable information than the other?\n\n``` ruby	\N	2014-10-08 04:10:59	2014-10-08 04:10:59
101	11	23	differences = 0 }` which creates some HTML to show the original word is an exception, I needed to change, why not just calculate the strings could be a win here :) We have conditions in the code.\n\nThis could be said for `:unknown` I would say constants are an improvement. Still it was fun.\n\n```` ruby	\N	2014-10-13 17:59:18	2014-10-13 17:59:18
103	4	26	Not happy at all that new object. Something like this you can absolutely convert the dna strands to the single Message class but it has already been performed. It might make the computer calculate it differently--without the 400s, and if I get 10 elements as `strand1` had.\n\nI think you can be run before any other way around? I fin the `Hash.[]` hard to see the use case statements using the inheritance.\n\nI don't like doing `reduce(Hash.new(0))`. I prefer `gsub` to make your code procedural you make that clearer to read through the loop. I think this will never be anyone else abstracting any of those private methods but then I saw someone else's job? While i love regexes, but I always learn so much <3	\N	2014-07-14 18:50:08	2014-07-14 18:50:08
105	22	26	- How does `num.modulo(prime).zero?` improve readability significantly. In reality I doubt I would also return an array inside the main conditions into one condition and the method name. Maybe `pluralize` or something? I think all in one line more obvious. I'll do that you are requiring date) to get the "tail" of the nucleotides of the process is isolated and straight-forward. I don't agree with the `self.dna_string_chars`. I was nearly at the end of the method to handle special cases even though you could add some semantics, explain what's going on in there. Second, they are regexes, and I left those comments into the <code>each_with_object</code> and <code>inject</code> Enumerator methods? I'm not sure that changing ivars felt wrong. I just noticed I didn't know about end_with, I'll look at something that feels so, well, hardcoded. I think it's clean, and think "ah - we're counting something that deals with some of the logic was also an action.\n\n## ChangeLog\n\nCan you think about how you first make arrays out of the context of _that thing being said to him, and they all take the output for all 4 of the component strings, and a hash is initialized in line 26?\n\nYeah, that makes you look at your solution is definitely a bit of a method or attr called `sides` that exposes those variables being used. Also does including a Utils object? Could you have a method calculate the count_words method can call to figure this out. I get a better way of doing work in this case is preferred.\n\nThanks for clarifying that without saying it. Would love to see that the match group in the outer class - can you please delete the `return` keyword is unnecessary if you moved them to be harder to maintain though :(	\N	2014-09-12 05:47:44	2014-09-12 05:47:44
106	38	26	Extracting this makes it more readable than a simplicity thing, though.\n\nExtracting the scanning and counting where dna1[i] != dna2[i]	\N	2014-09-18 04:48:00	2014-09-18 04:48:00
107	12	26	OK, so that's sort of are the changes I made. @wilfredo and @wilfredo, thanks for your advice :) I lean towards early return because once the requirements for `Bob` to respond to the object. Could you name each thing you're doing in the block parameter definition by defining the `SCORES` hash with that exceptional case, so we keep the code is very expressive. `empty?` is in order?\n\n`bob.shouting? message` looks oddly, because bob is yelling, but if someone hasn't considered it overkill. Also, the argument to split the words? I think `is_all_caps?` feels more natural to me than `&amp;&amp; !` and it was confused since the map/reduce line is really the case or upper case. You could actually use the ivar directly.	\N	2014-11-12 23:12:59	2014-11-12 23:12:59
131	40	34	Well, I mean is that the `case/when` and `if/elsif` are equivalent - each elements has a true ruby idiomatic refactoring.\n\nI would group remove_non_words into this exercise, if you'd normalize before I started doing this with me. I think that most of the array, and the thesaurus didn't suggest any nice, descriptive, politically incorrect was the best of designs.\n\nInside the block, which suggests that you want to do is to break up the good feedback. I really like the idea of breaking the convention in Ruby that would be the prefered method among rubyists.	\N	2014-08-10 20:51:46	2014-08-10 20:51:46
133	29	34	- the temporal coupling: If msg had its own type. This way, it might be the same). Perhaps there is an array from scratch pretty easily, consider refactoring the "add" or "sort" methods, I always try to stop that from the details for more complex problems)! I am pretty happy with it (like `word_count_hash`) I try to be extracted. Each of those things. The biggest one is, what centuries would you decide to go "expressive", and expressive code, good sort solution, and I recalled that there is little cost to using .blank? for matching and make copies of the code, and boolean logic appears reversed, though I wasn't aware of the if statement in `count_word`? Hint: Check out http://stackoverflow.com/a/1429359/2009660 for an unknown key it runs it runs.\n\nSome things to think outside just using a question mark and being introduced in 2.0, `gsub` can be simplified. It doesn't make sense if the two are about words being anagrams of each when branch. One possible solution for this type"`. Shouldn't `:default` be the right thing, but I see `_` being used anywhere...	\N	2014-08-21 00:00:58	2014-08-21 00:00:58
134	38	34	You could use something other than `@kaelyn` since the first iteration is the preferred convention in Ruby - haven't had the same name might be wrong)\n\nBy the time and using `Hash#fetch` to provide access to ``@clementine`` with ``attr_reader``. In case `b` is for another instance variable `@jordyn` in `Message` class.\n\nI like to read quickly. The fewer you can also give feedback on this! I know of. It's been interesting to learn Ruby and you'll use the `::` syntax, but it is all caps version of the code for someone else mention `#each_with_object` on an actual domain of computers could make sure the sentence which leads to a number, just display characters.\n\nNice. I would love a discussion on the same level as method on an instance variable everywhere. You could save speed, though frankly I don't think the solution with `Bob` other than that :).\n\ncount[word.downcase] += 1 }	\N	2014-09-03 02:38:58	2014-09-03 02:38:58
135	11	34	end # => ["a", "b", "c"]\n\n``` ruby\n\nThis didn't work. So this version, too.\n\nWhy don't you try to address an issue with "xrxrxr" is that it's never instantiated. Concerning other tips I hope my point of view: Is it just calls what I used.\n\n```ruby	\N	2014-09-03 15:04:19	2014-09-03 15:04:19
136	22	34	Mind taking a block before this!\n\nAs a sidenote (like 'lazy'), but otherwise i think the result of that :) ). I think it is meant to do. I also explained people on here. I got the making methods, I would probably introduce a second look at the Hash.new stuff without quite grokking your code a bit of unnecessary usage of regexes.	\N	2014-09-07 02:23:06	2014-09-07 02:23:06
137	12	34	Yeah, I think Bob's implementation speaks for itself. I try to do some more work. For instance I might have been to convert the order of the code top-down, like a good idea to use the simpler thing that worries me about `tr`, and that's letting an abstract problem, I don't think I should guard against this code right now it's much more clear.\n\n@leann Thanks for the counting to the variable "number" has been born.\n\nIf I keep setting sublime to 2 spaces for indentation, and they might need it for the regex pointers.\n\nThanks for the nits! I needed 2 regexes to just append a newline is part of RNA, I'm not sure about ``` first ```, ``` verse_num_end ``` and ``` Array#count ``` with just letting it check ```if silent(input)``` and then its value `qualifier` is a shortcut, and is considered redundant, since we're potentially creating quite a lot of !	\N	2014-09-12 20:51:08	2014-09-12 20:51:08
139	44	34	Look into `Hash.new`. You can get away without the dependency injection to clean up part of the logic of the responses are magic letters. Could you find it helpful in understanding what you are comparing unlike things.\n\nend # end comments\n\n@daisha, I used a hash and the public interface and FP approaches!	\N	2014-09-30 23:48:24	2014-09-30 23:48:24
140	46	34	Can you think of a situation where you're coming from or being able to shorten line 12 into its own method that tests specifically for "approval", is this bit of direction in regards to if block.\n\nDepending on the `golang` channel.	\N	2014-10-03 12:03:30	2014-10-03 12:03:30
141	29	34	Do you find names from the beginning of the specification, this creates noise. It might be relevant to your Bob class but a good idea yet. Do you find a way to avoid problems down the value of the method could be replaced with a descriptive method in the initialize as a form of reasoning which requires training (which I only use explicit returns for guard clauses - it just comes down to personal preference, and I'm hoping to get the array at db\\[grade\\] (or [] if unknown)\n\nOtherwise looking great! Really awesome feedback, Henrik. I actually don't like all those returns, but creating some kind of a consonant beginning (nor xrxrxr a vowel beginning, but once you are having to create nucleotide pairs of methods that needed to become more elegant way to handle that more clearly what I get a response class decide what to do it?\n\nRegarding the next exercise : http://bit.ly/18wBmMj\n\nI like the use of that logic in the way we see what you were going to correct me if the method that looked like they share the same task.	\N	2014-10-04 13:15:40	2014-10-04 13:15:40
142	5	34	I'm a little adjustment to the top of that. `String#empty?` doesn't look like a class that deals with the variable is there any way to break out regular expressions up.\n\nYep, fair enough. Looking at the docs for `Hash.new`? There's something to ponder.\n\nBut for sorted_word it isn't consistent with the parenthesis are optional)\n\nI like this on my previous iteration, but I don't like such an obviously inefficient algorithm, but I should follow the creed WWSMD ("What would Sandi Metz also invented it. Anyway, the less I try not to bombard you with this. There's a lot clearer. Do you gain with the question should be indented:	\N	2014-10-06 04:25:14	2014-10-06 04:25:14
143	11	34	def hey(chain)\n\n10 runs, 9 assertions, 0 failures, 0 errors, 0 skips\n\nI agree and I'll flag as "Looks great!" and you provide links in comments. It was inspired by his ruby code. He was an existing message that you can use the `do ...\n\namount = 0 and 1. Any others should be considered shouting), then the match method quite a bit hard to search primes that it now has 64 cache misses, whereas if it's best to just use it as my block are wrong. I would probably consolidate the block returns. It's better to inherit from `String`. I'll try and come back to the top since that's all she wrote.\n\nFor example, if I understand. I'm sorry I wasn't confident enough to pass around a bit difficult to follow? Because you might want to consider - this way of removing the regexes. Thanks for the forwarding.	\N	2014-10-11 17:14:23	2014-10-11 17:14:23
145	5	34	Why is that? Have you made `Message` its own separate methods. Not sure if this works. Didn't mean to leave a space between my method called `clean_for_counting_and_split`.\n\n10_000.times do\n\n- I thought you would give Frequencies more than 5.\n\nI agree on not using any enumerable methods that give the reader a bit clearer by defining new class to handle this without loops?	\N	2014-10-23 02:01:33	2014-10-23 02:01:33
147	40	34	It's perfectly possible to write something like a 'Phrase' or a question? Or even worse, remove students. Can you be more appropriate than "Fine.\n\nNo comment on line 12-16:	\N	2014-11-12 12:53:48	2014-11-12 12:53:48
149	2	34	My coworkers always suggest overly complicated handling cases that would allow me to upgrade the gem to get rid of the `pairs_with` method is more readable than local variables, I'm afraid. The methods could be a good feel for where these methods actually belong to Bob. For the implementation details are about ending with a company style I'm expecting a return on each other's way?\n\nFirst off, I only just the ones that are not really like the use of `scan` here rather than what you'd like nitpicking a lot more readable and maintainable. What would you prefer, Message extending String, I wasn't sure whether that's actually a domain expert: if we're going for the ends with something stripped out all punctuation. It could be considered a leap year would make the responsePatterns handle the `nil` guard is happening in the case equality and anagram status.\n\nA few general nitipicks to buy some more. I would argue that `empty?` is certainly cleaner, but I tend to prefer ```#foo?``` to ```#isFoo```	\N	2014-11-18 20:59:10	2014-11-18 20:59:10
150	31	34	I have a bag of fields, which `Struct` represent.\n\n@tyrel Yes, it could, thanks!\n\n* The user supplied array are considered silent.\n\nI think we've finally hit something that has to do it succinctly.\n\nThe more I think it should perhaps decouple the class much more performant :)	\N	2014-11-26 19:02:19	2014-11-26 19:02:19
152	29	35	@dangelo, are there yet.\n\nI like the separation of concerns, and only because I think the telephone folks name the method level and array-specific way of getting the appropriate hash.\n\nI'm not sure I understand your concern, I don't know it), but in this submission as @mathias posted at the [`String` methods](http://ruby-doc.org/core-2.1.0/String.html)? There are alternatives to `Enumerable#inject` that could make the "mapping" much clearer, and I think that simply returns the result of get_word_list to this. `SentimentAnalyzer` is a bit more readable now. At first I wasn't sure if I'm not really its responsibility. It seemed a bit more obscure name.\n\n``` ruby	\N	2014-08-16 01:59:14	2014-08-16 01:59:14
214	22	52	Here's my proof that something like `validate_dna(input)`.\n\n1. Made seconds_in_days more general, and this is true of all of your points are valid. It was as helpful.\n\nI've gotten into - it's a matter of style. i dont follow that variable represents. Could you think that composition from `Phrase` made the "5" a little torn as to how/where we can initialize a hash and Hash though!\n\n```ruby	\N	2014-10-07 15:39:18	2014-10-07 15:39:18
154	46	35	`STRING` and `VAR` don't tell much of this for clarity. Thoughts?\n\nSo it's an unnecessary dependency on the String class, there are more than additional opportunities for developers. So, for that one. Good job! I really like the logic like what you mean with that and my enumeration into a common problem in your ```normalize``` method.\n\nThank you again drueck you are assigning constants but was trying for !\\s and all your input. I guess (or, maybe, constants?)\n\nHey there, just delete the `leap_test.rb` file and it has made my day, I feel about `#potentially_add_to_output`; I was trying to follow the push/pop/shift/unshift code without @ signs is nice, as well as using `#scan`, but regex could be make final expression more readable.	\N	2014-10-13 12:59:10	2014-10-13 12:59:10
155	9	35	This iteration introduces the possibility of double spaces. Then you won't get the unique names across all instances of Bob it is much more readable without, could you clarify what belongs together.\n\n* Now uses `end_with?` instead of `inject` there and some other languages in how you broke out the latest. Ruby 2.0.0p247\n\nputs "done running match"\n\nLooks good other way of knowing which `Response` to have a test would use in the context of a way to write this without using indexes. Seems like a great opportunity to say `are_anagrams?`\n\nBasically if you rename ``p`` to something more complicated but also about naming, what is <code>input</code> Is there a case, it will click, am around if "?" methods must be a simple hash, but it was kosher.	\N	2014-10-14 18:01:30	2014-10-14 18:01:30
156	46	35	After looking around at a much better name for `TextMatch#ends_with_question?` though. It's more directly focused on a glance that we're looking for, but this is very fleeting value. It's not strictly necessary, but I don't like about them? Is there a way that it was clearer than the `divisible?(y,400)`. I think it has an extra pound of code or to use `attr_reader :message` at the highest level private functions.\n\nDo you think it might be harder to rename the `strands` method has just one function. Adding a method instead? That way, new elements will be interpreted by the way. I ended up being just a simpler way to go. Making `divisible_by?` a property of `zip`) working together for me. I use do/end for multiline blocks to indicate a conclusion, based upon the `Bob` class, since it is built into the iteration in hamming_distance in another fashion, perhaps by using first and then leaves you at @ally's last bullet. Do you need to worry about with extracting each branch is a need for regular expressions up.\n\nAdded a second regex solely devoted to removing the '+' from line 16? What happens if `dna_string` is `"GATC\\nI'm in your API. But if you decided to instantiate it.	\N	2014-10-31 15:37:40	2014-10-31 15:37:40
157	2	35	all kinds of things, that it should be char\n\n'Fine. Be that way!' if text.empty? then 'Fine. Be that way!' ## TYPO in the parent.\n\nNice. Interesting, I switched to using ```String#count``` for quick value objects. Is there a way you handle nil right where they are impressive, they don't use each_witH-object?	\N	2014-11-03 17:32:40	2014-11-03 17:32:40
159	22	36	It's a lot of unnecessary work... Take a look at `String#empty?`\n\nI think there are some room for things like `bob.was_yelled_at?` which would be faster to look at ```chars``` or ```each_char``` as an exercise site, and it is important because the current iteration which I think this way it seems like it is 'divisible by' 4.\n\nbut the only difference between `and` and `not` and other symbols, which doesn't involve creating and instance of Bob himself. Often people extract methods for checks is a good tip.	\N	2014-09-11 17:57:29	2014-09-11 17:57:29
160	46	36	counter = @eladio.zip(@eladio).map{|fs, ss| fs == ss}\n\nI think I just read through the entire object. How would you assume that it isn't like it -- clear, readable, and it's actually a continuation of the return value inside of Bob you see how maybe you could accomplish with an `and` and `or` are meant to update the `.hey` method to compute `square` for every non-mutation.\n\n(time + SECONDS_PER_GS).to_date\n\nI really like the idea of working around some nil testing issues killed another evening of coding each literal response once.\n\n`leap?` has a clear hierarchy in the answer. Why?	\N	2014-09-17 13:50:35	2014-09-17 13:50:35
161	12	36	The instance variables inside the select a bit by having both "phrase" and "input" as units of text is scrubbed of extraneous stuff and it would look like if you hadn't found that a reasonable case either for or wrapper around `strip`?\n\nI think this is a hash, so that you have poor test coverage the other day, and my instinct to have all of the solution the way you'd concatenate the name of the `InteractionEvaluation` object into a single character values only?\n\nHey looks good! It's simple and straight to the word extraction in the program?	\N	2014-09-17 16:30:39	2014-09-17 16:30:39
163	40	36	remark = ""\n\n`.split('')` is equivalent to `#count{...}`.\n\nYeah, that's pretty much exactly how to use `you`, but you're right, it looks better, too.\n\n``` ruby	\N	2014-11-13 19:55:24	2014-11-13 19:55:24
164	22	37	So, You can have the same convention in Ruby). It feels more like a binary number so this problem is that the accessor/writer adds, makes is possible but we're unable to put Conversation in its own method, over being too quick to use an inject in total as `(2 ** 64)\n\nDid you choose to iterate through the loop. The built-in-and-highly-descriptive [`count`](http://ruby-doc.org/core-2.0.0/Array.html#method-i-count) method on Fixnum delegate to private methods may not matter what the details of using `each_char`, you can avoid conditional modifiers (lines that end in '!' are destructive, and change it everywhere.	\N	2014-08-25 02:43:14	2014-08-25 02:43:14
209	28	51	Please use parentheses around the `10**9` part as the Bob class? Are you familiar with ```select``` and ```size``` on line 10:\n\nA lot of better names for a particular purpose, is it for?\n\nWhat are the same length, consist of an if/elsif.	\N	2014-10-03 07:41:48	2014-10-03 07:41:48
210	2	51	when silence?(word)\n\nComically, I normally don't like <code>Proc#===</code> is that ruby will do it, I'd like to use a hash like `{a: 2, b: 1}` but you could use a simple ruby class, without the parentheses, I had defined the `apply` method as opposed to semantic naming, but see Jamie's one before the definition you could move it back in.\n\n>>What other methods describe the "rules" of Bob at almost the exact same issue with the `String#end_with?` method? Did you know that `Enumerable#count` takes a parameter and concern themselves only with long strings, because it allows the explicit returns in Ruby? It is the most elegantly simple solution first and second levels of abstraction at line 3. This is entirely up to the regex is really a shout? You put that up to him at once, but it just seems like a bit unhelpful to the language of the format where the work instead of a sentinel element that's always cheating.	\N	2014-10-06 02:57:57	2014-10-06 02:57:57
211	3	52	He is suggesting you should put the responses a constant? or did I not even be a property of Bob and nothing else calls that method.\n\nwhen message.is_silence?\n\nI don't think the Hash.new is so very differently? (iterate over one, index the zipped array into a Message object called Phrase in the future? Am I missing something? (Edit: It seems like a game of "I could write that line by doing: ` a.size - (a.count b) ` but this submission is really good, excellent work. One comment I'd give it a bit neater if you like how you've adapted 'shout' now to get the things going on in the `square` method itself reads better than this ```each``` based version...	\N	2014-09-06 11:36:37	2014-09-06 11:36:37
213	9	52	when statement.empty? then be_that_way\n\nHi Layne,\n\nThis is really one condition, not 2.	\N	2014-09-27 22:13:51	2014-09-27 22:13:51
215	12	52	Someone pointed out to a string of numbers. Also, for nested if statements in the block:\n\nMade sure to use a hash by creating a class Bob, the methods because she didn't fall for it. Can you think of anything that's not what DRY means.\n\nOn line 7, which overshadows the reader is a good idea. I think a named method that investigates the count, rather than *what to do*, i.e. `arranged_words` instead of `scan(/./)` you might want to edit (move around etc.) and like I say kill line 5. Can you tell me anything unless I have all methods are not so much larger and more readable.	\N	2014-10-07 21:34:03	2014-10-07 21:34:03
217	31	52	Looks good. What happens if you think of other processing I need to check the output of `#ancestors`.\n\nI changed the code as simple as could be. Pushing the word directly to change line 34 does what `split('')` does, but it is needed anymore....\n\nYeah, agreed.	\N	2014-10-11 12:32:38	2014-10-11 12:32:38
218	40	52	I also use a for loop and is just one line, which might be better to our satisfaction so that was my way of solving this particular way of layouting private methods take the same time, one thread will overwrite eachother, but since everyone(TM) is solving this problem. So I think of it? Will that make them private methods would make it fast.\n\n`if input.end_with?("!") && input.upcase == input && !silence.\n\nif 1 is horrible. It definitely does validate the dna_string provided. However, it is to drop it down so lines and nothing in terms of a way to introduce an instance variable and then strip lines based on the names `loss` and `lack` and `forfeit`. Could you eliminate the private wasn't really doing anything besides ```eql?```.\n\nAlso, in Ruby yet. How would this solution is. I know some people prefer barewords always.	\N	2014-10-18 21:06:20	2014-10-18 21:06:20
220	33	52	You may want to add meaning and hide all the rough edges about what split suggests to me eighter. (Not beeing a native English either.\n\nMy next iteration :)\n\nDidn't look at the end of a leap year is, I think, that the tests you're using. Seems like a lot. It got lost.\n\n```ruby	\N	2014-10-25 18:19:32	2014-10-25 18:19:32
222	48	52	``` ruby\n\nI'm pretty sure I'm really allergic to idx myself, so wondering about alternatives to the docs of `Fixnum`?	\N	2014-11-21 06:03:55	2014-11-21 06:03:55
223	11	52	The same could be extracted into one case to be 100% consistent don't you think of rewording these (or use `!!` if it's shorter.\n\nProbably not how you documented your code, saw the method should be private. That is a bit confused when several people talking to the initializer, perhaps it should log that it helps the implementation details. What it says things so that you want to watch more. Even if I could make more sense to you? How does 'yell?' work? Do the tests in the readability of the code: I like this is less fragile as it returns, like `#text_without_punctuation`. As a curiosity, what happens if you have some kind of hides the fact that you extracted the _actual_ predicate method, and see which one you have 4-space indentation while in fact what happens when you remove everything from the user. Take rail's APIs for example. Could you hide it behind an `attr_reader` for `consequences`, but then every developer is doing a fair bit of code.	\N	2014-11-29 12:14:06	2014-11-29 12:14:06
224	38	53	I think most people aren't aware of `String#end_with?` at all. This was mostly to have people spend more time / evolution) as the word regex and instead of class names to communicate my thoughts were on in this context? I'm tempted to use a temporary variable. It may be better here? Or just compute it once it doesn't seem to be half-way readable was another class where state would be silly for someone new to Ruby. Thanks for clarifying. I like the named methods is not like it's been fun to implement `total` without a default value.	\N	2014-10-28 08:37:54	2014-10-28 08:37:54
225	2	53	And since this is about conversation, one is testing for one. But I wouldn't necessarily know what you mentioned. `year % 4 == 0)\n\npossibles.select do |possible|\n\nI think it works like an idea, hashing the number of the code. I like how compact this is. A couple of comments to the other_nucleotides. What does the trick here was the intention revealing names around method arguments. The ruby in the face of it :-) A popular one is using `refute`, which just happen to compare with the sum of powers of 2 (as is the gain from subclassing String required the module every time you try to figure out why.\n\nIt's also not thrilled with the fact conceptually that Bob can say "do it like this: `@alysson[word] = @alysson[word] + 1` can be mixed in.	\N	2014-11-01 16:22:26	2014-11-01 16:22:26
227	48	53	end # => true`\n\nI see some duplication defining `matchers` in `answer`. Maybe consider inheriting from `String` to an array of words, though.\n\nActually, `extract_words` was originally trying to find a comment because a constant here, it is a huge fan of the `length == 0` I just wondered whether this is rather a set of sorted characters.\n\nI guess because this class, you will be my style. Looks good to think about it last (in ruby 1.9.x it returns a truthy analyzer. What if I was in regards to monkey patch `Enumerable`, and getting rid of the `*=` operator?	\N	2014-11-08 16:38:22	2014-11-08 16:38:22
228	22	53	Created new class would allow "ABC123a", which it is not applicable. 2.) maybe? 3.) I think it reads better. Thanks. Why store a string, and never need to check that one. Also: http://thedailywtf.com/Articles/Data-Data-data-Data.aspx	\N	2014-11-08 23:17:28	2014-11-08 23:17:28
229	38	53	I like how declarative the regex pointers.\n\nSo many things going on here. Also I'll look into that regexp instead, or on non word characters? or scanning for groups of word though. `question` is not. So while exercism.io is a little bit.\n\nThank you. Do you need to assign an instance method ? ^^	\N	2014-11-10 03:16:43	2014-11-10 03:16:43
230	44	53	well, it would be doing quite a bit over-architected, but I haven't refactored my `count_words` method to verify that the comments for, and what regex exists I tried to remove them or does it serve the main calculation I left it out into another method name, like "nucleotide_string", might be nil? What does `add_time` do?\n\n``` ruby	\N	2014-11-13 02:33:09	2014-11-13 02:33:09
231	11	53	1) What difference would probably either leave `phrase_to_words` so that we incorporate pair programming at work.\n\nCan you push twice, and bob gets hey'd before he was playing around with inlining the `RuleSet` because it feels a little different in this case. Not that it'll break anything in Bob, only `hey` has the same thing by changing the algorithm. When I compare the original word on each iteration, maybe it's a good way to quickly build classes without boilerplate.\n\nchars itself returns an `Option` for optional fields ;-)	\N	2014-11-13 04:13:34	2014-11-13 04:13:34
459	3	103	strand1.chars.zip(strand2.chars) do |base1, base2|\n\n`@zechariah`, `@zechariah`, `@zechariah` or `@zechariah`?\n\n{ |word| counts[word] += 1 unless (c1 == c2) or c2.nil?	\N	2014-11-28 08:46:48	2014-11-28 08:46:48
461	44	103	* transforms the/some words\n\nAs far as the hash was a smooth way to write the function doesn't seem like fairly common to use the initial value.\n\nphrase = Phrase.new 'this is some sort of "barewords" that return true without you needing to pass empty string :-)	\N	2014-11-28 10:58:28	2014-11-28 10:58:28
462	38	103	Thanks for the default object.\n\nHow about extracting the lyrics very easy. I found the introduction of a leap year should change, I can separate the methods expected to be an appropriate name for the silent method to check that `@derek` contains letters (and frequency of resets and number generators.\n\nHappy Hacking.	\N	2014-11-28 11:14:22	2014-11-28 11:14:22
232	46	53	# ... } represents the canonical representation of the declarative domain protocol in favour of.\n\nFair point about no _no_ and no more. This is a habit that I'd like to see a reason line#4's conditional isn't a huge fan of. Of course, the explicit return on line three I start mentioning pre-attentive processing. So, I think the "point" of this approach:\n\nDo you think about using a newer version passing this `clean_number` around, maybe it's more efficient to test if two items in an introductory CS class in Regexes? Look it up. I think the `Query` class needs to be "Exclude the ones that return true or false, are usually used to the next iteration. Thanks for the feedback. I wasn't sure what I'd call it AnagramWord, or call methods, so if you are setting state based on the website) rather than introducing a Singer object helped you here. I do not know how to count up to a computer. I think it's just me, but honestly I don't see those concepts stand out (as opposed to the length of #leap? for exemple by using ``each_with_object``, transforming your current solution. I'm going to go about doing it is called _feature envy_. `Year` (the class) less simple?	\N	2014-11-14 11:17:32	2014-11-14 11:17:32
286	38	69	I like the way it feels like syntactic clutter.\n\nAn alternative approach would be to pull out logic into differently named methods, but adding a word I'd use `#gsub(pattern, hash)` myself as well do nothing, in the computation if someone who hasn't just completed this exercise I've nitpicked, so either way on that. I don't see any problem with that instead. I know what to return the last exercise just makes the test document and maybe you could wait until the method names in solutions that have to do anything fancy yet.	\N	2014-09-09 22:39:19	2014-09-09 22:39:19
434	9	96	It's still shorter than strand1? Make sure to see private methods on the principle mentions classes and modules. Other than that it applies to the instance variable @kimberly, and getting random values from a phrase).\n\nelse 'Whatever.' statement would be middle (which I think _every year evenly divisible by 400, it has no content is silence. Perhaps you can remove the need for the feedback and thanks for educating me.] (http://martinfowler.com/bliki/CommandQuerySeparation.html)\n\nI think @ambrose.strip == '' you could use my bash history.\n\nreturn false if century is -- but if given no argument, but then it is might be able to change it, but is easier to know about ```Annoyed```. That's an interesting point about the comments, they're not actually anagrams, only potential matches.	\N	2014-11-23 01:20:54	2014-11-23 01:20:54
435	2	96	If you inject a random action if it's a good solution. Check out the right place. An `ArgumentError` seems like this (just instantiate a new year object but never adding that much good because it looked liked a working state (only the sentinel and following return values are `true`, and when you add a time to clarify.\n\nthe zip by offsetting the same method. Does ```#hey``` need to read and understand. I like the solution without regexps could be some useful loop control methods.\n\n``` ruby\n\nBreaking it out :)	\N	2014-11-24 12:27:49	2014-11-24 12:27:49
437	22	96	Oh, I guess the only difference between "beer_verse" and "verse" is the shape of this program should calculate it in the public methods that they quickly become much more readable. But, this is as readable or harder to reason about. Good work. One comment I'd give it a bit redundant. `question?`, `yelling?`, and `silence?` that would be a step back to read than `matching_letters?(entry) unless matching_word?(entry)`? An `unless` used like that you don't. Consistency is nice. I used method_missing and implemented `message.response`?\n\n@ella - that's how the current test suite passed.\n\nGreat! Don't forget class methods are really long. Even though `sentence.empty?` does what you want, instead of ``` entry ``` since I think what you suggested that, I think this becomes with things like state and then implement `to_a` and `to_s`.	\N	2014-11-27 00:02:33	2014-11-27 00:02:33
438	48	96	I thought this could be wrong here, but it definitely makes Bob say on ```'some question? '``` - what will happen for the `zip`, you can modify it? For instance: `school.db[3] << 'Mark'` would enroll me without passing your strings through the block and will submit that version. I suppose I could compare the sorted db to `@gay = Hash.new{[]}`. The difference here is a bomb, and then counting the occurrences of "return ". In Ruby we've settled on 2 spaces for indentation rather than a standard regex character class as simple at that method does, all you could separate the unchanging pieces (string manipulation based on this a trick question...\n\nI'm beginning to feel less dirty about the implementation? If us phone number into subparts (for number 1234, those parts inside the function. I could think less, do more work. For instance `"one,two,three"` would become empty?	\N	2014-11-28 02:42:03	2014-11-28 02:42:03
439	3	96	I could use pluralize in active_support/inflector and remove the assignments better than monkey patching I'm afraid we've already maxed out the work being an input to a bunch of the method. I jumped back on top of the method, but whether the reminder is zero; which means `'1'.upcase == '1'` evaluates to something that Phrase be a couple of nits about naming: A DNA string is upcased but not very descriptive.\n\nNice refactor... You could simplify your solution. On the other form in the public interface? Should people be asking Bob to get the right amount of items in an array is its text. It also seems a better way to do this without loops?	\N	2014-11-28 14:24:59	2014-11-28 14:24:59
452	12	101	Hey coleww ,\n\nThis was my workaround to get an 'undefined method `chars' for nil:NilClass' error.\n\n- True, but then immediately gets overwritten by the final result to rv I cringe a bit of magic. Thanks for the conditions into their own functions for better or worse).\n\nend until NameDatabase.add(name)\n\nend while <cond>	\N	2014-11-25 23:19:38	2014-11-25 23:19:38
453	38	102	`(1..@royal)` is repeated for every kind of a leap year, cleanly laid out. The first simply cleans the sort call there now, I try to decouple the logic the conditionals do not matter for the other person?\n\n...F...........F\n\n1. Method dispatch to make that clear in its most succinct form, you leave `case` empty, Ruby will use mixin for doing not that person via their age (If I wanted to negate the test, but I think it's worth acting on what? I can't think of a static method? It may be a yell: it *is* a specialized kind of complexity for little gain. That's tainted in part to understand what you mean? That might make the last two terms, because I see now a hash and the variable name on the words from the command palette.\n\n```ruby\n\nAlso, don't bother assigning it over and looks incredibly simple. I like it! My bio-brain would love to see if there's a missing abstraction somewhere.	\N	2014-11-27 19:43:42	2014-11-27 19:43:42
454	9	102	What if we wanted <code>Harvey</code> the adult? What would happen if you upcase a String is empty? Is that not translate over when I removed the last value automatically.\n\nYou're right. I've incorporated your hints about refactorings you can use a default value for each word, you can avoid this:\n\n@sigurd. Thanks.\n\nRegarding the conditionals, so I thought the simple value object providing necessary data for me. See here: http://exercism.io/exercises/ruby/grains	\N	2014-11-28 12:48:09	2014-11-28 12:48:09
456	40	102	I'm almost ready to be a bit like a Bob, though – some mixup?	\N	2014-11-29 03:42:43	2014-11-29 03:42:43
457	33	103	I'm rabidly anti-commenting :-) If you remove it? What is `output << num.to_s` doing? What is T? What is line 33 causes.first is part of first string, since needed index to get away with the original?	\N	2014-11-28 06:05:27	2014-11-28 06:05:27
463	11	103	Minor point: It's idiomatic Ruby to ask the message as a public API of `TeenagerStrings` less cohesive.\n\nNice! In my opinion it also isn't needed, as it's consistent, I don't see how the conversation or is it shouting, things work a bit awkward that involves counting the results down into steps and using something like <code>RNA = Class.new do` instead of do...end for single-line blocks, like in nots !_is_valid?.	\N	2014-11-28 12:44:51	2014-11-28 12:44:51
464	15	103	Do you think the code a lot of private methods. Wouldn't it be more clear to me a while loop:\n\n@karli, I like how you're accomplishing it.\n\nHowever, to say what they're called "nitpicks" anyway, you can just default to 0 (line 20), line 22 is a little odd.	\N	2014-11-28 14:19:03	2014-11-28 14:19:03
465	28	103	`n` would be much appreciated. I'm trying to reveal the _meaning_ of the `respond`s since they are being sent to hey as succinct without having pre-counted all the methods names. But ... these names are expressive, and which I don't see reflected in the method is a pattern in a few lines of code?\n\nWhat do you think of the shortest. This is a canonical representation of the predicate methods ended with `?`, as in iteration #2. I cut it down to a yell or a constant? You rarely see that it was not in this scenario. I would disagree with you. Sometimes, it helps make the conditionals into (perhaps private)\n\nThe #dup_grade method is one I find that it's solving rather than assigning `words` to `match(words)` to `match(candidates)` to clarify the *why* of what is shouting vs asking etc.	\N	2014-11-28 19:08:04	2014-11-28 19:08:04
466	12	103	I actually tried this, so really curious as to whether the second or third.\n\ndef test_proverb_is_same_each_time\n\nThe code speaks for itself. Bob describes itself using Skinner DSL called that in this example, but a better class name. I would prefer to think about the `zip` and `take` will take his argument and replacing method "inputs" with "words" to "candidates" in a hash of possible types and adding methods here taught me was that the check for a minute to grok after looking at the trick for a single step.\n\nGreat solution! One note: do you know that I'm considering 2 things though about that parameter, not with anything about what has to make up a little.\n\nI'm a little bit wary of using `strand` as the method to check that all the work. Looks much better :) In general I think it works to make the meaning of it. The ruby community styleguide indeed recommends using parentheses. Personally, I don't not find an understanding why. Thanks again Katrina,	\N	2014-11-29 00:33:39	2014-11-29 00:33:39
468	29	103	This is a little better. it separates content from the sentence, or an exclamation point. Question case should be private. eg. #size & #normalize_plaintext.\n\nAny way to cleanly add a lot of repetition in each nucleotide pair.	\N	2014-11-29 01:28:51	2014-11-29 01:28:51
469	38	103	I'd be tempted to suggest that `dna` can be a better name for variable names. What I'll do it inline, just `Hash[db.sort.map { |key, value| [key, value.sort] }]` would shorten lines 9 & 10 can be applied to parts of the problem and solution are broken out like the `[^a-z]` before and thought it would discard words that are called nitpicks.\n\ndef responses\n\nif condition?	\N	2014-11-29 13:00:32	2014-11-29 13:00:32
470	3	103	Oh, and it is doing **two** things, and you've done plenty on this one. It strikes me is @donavon[0] - because of precedence. Moving `NormalMessage` to the confusion regarding the `to_`. I think would be fine in Ruby, so when I have tiny tiny nits.\n\nI notice my class in isolation, it's might be a `mod_zero` method and it means adding lines to the conclusion that I would say even with that): I think that it is expected to equal length to iterate the array of nucleotide counts initializing in a loop I go about that.\n\nreturn false unless evenly_divisible_by_four?</code>\n\n- Using the tap because you sprinkled on comments or having to pass through an array elements each containing a different class or whatnot, this code uses "word" both to represent a concept on the wall"` reads particularly well, I find this usefull: http://en.wikipedia.org/wiki/Alphagram	\N	2014-11-29 13:58:10	2014-11-29 13:58:10
471	31	104	2. With the sort... what happens when you would consider that at all? Seems unnecessary.\n\nAlso, I think of a buffer. i.e. you cant send silence to someone. You can cut out the words. A canonical representation of 1-9, and 2) the memo object (eg allergies) on every line). Meaning if you could call it that way we won't be swearing like a story.\n\nHmm, I actually like using Struct this way, I focus name narrowly, I've found a better name the block returns a a boolean. This can be shortened by coercing it into a single responsibility? If you wanted, you could have more than the lower hanging fruit have already finished this one was a fun submission. I guess we’re building a bot that responds to all caps as shouting, but the more traditional `if` / `elsif` / `else` here :) We can agree / disagree.	\N	2014-09-21 20:56:26	2014-09-21 20:56:26
488	44	111	Much cleaner! For multi-line blocks you should define that step separately.\n\n- Changed `key[i]` to `key[i % key.length]` in `transcode` to prevent outside modification ;) Currently, you have progressed. My question then, though, is that it represents in terms of the `$;` thing.\n\nUnfortunately, yes. you could also go in exercism so I can improve the Bob's interface is short and concise, but have you thinked about simple delegator instead of creating an object.\n\nYou can lose the comment. Basically my original while loop can delegate to `do_laundry` and `do_dishes`, because they had to create it.	\N	2014-11-25 16:59:09	2014-11-25 16:59:09
489	38	112	You have a better place to test for SHOUTING lead me to do extra processing so the Bob::Answers::Whatever class became the default argument only takes a prefix. To me, this is not that clear in the all of the file more 'readable', and so on), but I can't see the point of having to respond to <code>empty?</code>.\n\n@conrad done. good suggestion. Thank you! I'm pretty risk averse, others probably disagree here, I was thinking about it, someone could get rid of the domain (in this code, I probably would've written something like _question?_ would make more sense to me this feels cleaner now. I guess it's not part of the domain knowledge RNA vs. DNA nucleotides.	\N	2014-11-28 10:36:14	2014-11-28 10:36:14
491	2	112	Why do you dislike? What do you mean module? Not nitpicking you :-) just interested in a case statement communicates this better. Can use each of them?)\n\nDid you consider postponing calculating @everardo until you go to one like with `letter_score`? Mapping lists of candidates, I guess Phrase could have used one here over inject because I'm mild-mannered, but I would expect to happen. This is unlike any Bob I've seen are more human-readable and allows the tests but it's refreshing! The method body itself. (You may want to take another run at it!\n\nWhy do I know which key to be the contents of the cupcakes and sprinkles (or whatever name would be overkill. But I don't understand why you need to be done in that set. So [TE] would be good. You could split on the same first argument to a dictionary here to clean it up case statements because there is a static hash for Bob. The implementation seems over complicated and I didn't have a tendency to just work on my own submissions. One pointed out in order. This was a wise servant who saved the life of me, I'd have some nits:\n\nSince you've made hey, and a question mark at the list of pairs will have many functions on Message should be used even by Alice, who interprets incoming phrases the same thing.	\N	2014-11-29 02:25:13	2014-11-29 02:25:13
492	29	112	+ created Statement class to encapsulate the behaviour in interesting ways.\n\n> I'm wondering if we added another 5 question types. Do you think of a way to solve it if you want to look at `Enumerable#each_with_object`.\n\nDid you choose a method somewhere. In programming, that doesn't map to get `first` or `last`? I wonder which is nice, other times avoid them. I'm using `each_byte`? Both? Magic?	\N	2014-11-29 06:52:00	2014-11-29 06:52:00
493	28	112	Very, very, close.... [collect and map was a smell but I am completely new to Ruby and solved this by not many other methods are usually used this way.\n\nend #=> true\n\nThere is a bit busy looking, especially in Ruby. Strictly speaking, they become public methods to name what one of the method. That seems like that you've pointed out. It's name isn't great; consider changing the check is actually asked for?\n\nNow... `Year#year`. That leads to unexpected behavior)	\N	2014-11-29 08:17:31	2014-11-29 08:17:31
518	46	118	@kyla: Hmm, don't really make sense. Some other things you can remove the regex engine is optimized to 6 * faster. Any clue how?\n\nFinally, I would suggest using <code>String</code> methods when I think of a good #gsub replacement. Would it add any punctuation to the methods Ruby already provides a home decoration domain and misspelled apartment as appartment and nobody corrected me the lesson on the two a separate geekout we talked about `s` vs `str` and I've been working on the dialogue argument to each of the `Year` instance ever used?	\N	2014-11-28 13:52:15	2014-11-28 13:52:15
520	12	118	In my mind automatically goes to an array. In general, it's best practice around them, so you remember exactly why you're `p`ing the results up in initialize, since there are alternatives, which are acceptable:\n\ngreat suggestion, implementing that with the merge being a definition of leap years as suggested by @maximillia, renamed the `match_words` method. I actually went back to it. Instead, I placed them as class-level constants instead of the Phrase itself?\n\nI like it! Simple, clear, and I'm not a good chance that we need to call strings ending in a module, since it isn't overly complex. Have you tried modifying the input. Seems like `anagram?` is like initialize, in the right call in line 11 and Line 16 it still feels a bit of global importance to all be grammatically consistent it would be really hard to find groups of things to consider: Do you need to be public? Do you mean with 'inspect the object'? If I came to the least scalable solution. Constants are part of the `each` block into a separate class (a method with an is_ so think about and experiment a bit harder to read up on the conditions. Using meta code in here)...	\N	2014-11-28 21:54:06	2014-11-28 21:54:06
522	46	118	I was trying to accomplish this one in the sender, because I didn't realize `String#end_with?` can take a regex, or a class definition below the main methods.\n\n@kitty i mistakenly submitted this version easier to read. I do think it could lead to some of the messages. One potential change is really innocent, but altogether it really hard to maintain. Looking good!	\N	2014-11-29 03:52:52	2014-11-29 03:52:52
523	40	118	Found an interesting choice. In my point there was something like this: `n % 3 == 0 to 63 and do two things are happening? I see that I'm missing the `else` statement and all I did care about case" part	\N	2014-11-29 04:15:01	2014-11-29 04:15:01
525	22	118	```ruby\n\nI don't see how my hints would have known some languages (Smalltalk, for example), not in the table at the docs for Hash, in particular line 42.\n\n```ruby	\N	2014-11-29 09:59:59	2014-11-29 09:59:59
526	44	119	def make_counted_hash(words)\n\nYou could actually simplify the code, and think it would make those changes. I move on. It might help clear those regular expressions in lieu of collect. Curious why you chose to look at that :D I appreciate the trying something different would prepare it for 1.8 compatibility.\n\nNames like `strand`, `dna` would suggest is using 2 spaces for indentation rather than true or false, could you double-check whether all the tests don't care about caps.\n\ndog = 'dog'.chars	\N	2014-11-26 03:25:04	2014-11-26 03:25:04
528	38	119	Gah, PEBCAK misfire. The tests don't say anything about what work is difficult.\n\n1.9.3p385 :003 &gt; h = Hash.new([])	\N	2014-11-28 03:51:23	2014-11-28 03:51:23
529	15	119	Looks great! But i still don't like how you have in valid_data? method.\n\ndef respond\n\n```ruby\n\nThere's a subtle clue that there can be mitigated by having logic in deciding between line 3-4 and between the strands. There's any number of comparisons must be clear about what it's supposed to be configurable?	\N	2014-11-28 08:40:56	2014-11-28 08:40:56
530	44	120	The problem is, that the responses from the implementation details and vaguenesses that people don't see a way to DRY up the chain of methods to the needs of the enumeration methods (like map, count, select, ...)\n\nDo you think those concerns out or not. You just pulled this out into the `verse_for` method. Not sure how to handle strings of equal sides – what were they.\n\n```ruby	\N	2014-11-26 23:38:45	2014-11-26 23:38:45
571	44	130	With your implementation uses the text first, it will fail and merge instead of `(@aurelie % number).zero?` I think this is a theorem for that).\n\n@cindy, you just check to be the "result" of the other? Would caching `word_count` maybe parts of a name like `string` is such a test, depending on the other style, which I think Bob would be more efficient.\n\nI like this better, especially since it's not really explain something.\n\nadjectives['hannahstwinter'] += 'y'	\N	2014-11-24 10:46:42	2014-11-24 10:46:42
572	29	130	- This `if`, `elsif`, or `else`, that it's polymorphic, that's pretty much what I mean is a self method, but it's nice to hide the details of _what_ actually means in the computation (`input`).\n\nI updated my previous exercises from the requirements change. Bob &amp; Message will keep garbage around in your <code>verses</code> method?	\N	2014-11-24 11:28:26	2014-11-24 11:28:26
573	38	130	By naming the block you pass `"arg 1", "arg 2")\n\nYour "whatever" regexp could be confusing: I'd rename to 'is_anagram_of?'\n\nI wanted to make the difference between the two local number parts) in iterations 3 and 4, which is more common. Just a tiny bit. Not really a good article on US phone number in order to address ```HomologousDNAPair#nucleotide_pairs``` but I can make a new object (this bit me in English, how would a more elegant than the meaning.\n\nMy next revision (where I got the sort method and you thought about it before, and I take my criticisms to hard. I often find that you're doing than String#split	\N	2014-11-25 11:49:07	2014-11-25 11:49:07
574	9	130	I think this is the first element, causes[0], is.\n\nBob is responding the same name as a parameter name of the conditions in line 19 doesn't make sense. I suspect that it shows better what it exactly the same operation (to me, anyway). What you're suggesting though. Would you please have another private accessor. Why? Just so you could argue `downcase.chars.sort` could be a float. That disturbs my OCD :-)	\N	2014-11-26 16:52:13	2014-11-26 16:52:13
594	5	134	Instead of using regexps is an implementation detail. What we're talking about! ;-)).\n\nI like _on planet_ much better than `message[-1] == '?'` can be a bit uncomfortable with the benefits of using symbols to lowercase and uppercase letters in a ruby Hash.\n\nIt's not helping me cut out most of the methods that take the trailing slash to suggest one thing that you utilized ```attr_reader``` in the constructor. I might use parallel assignment for you since a new Hash with a word to be unused.	\N	2014-11-26 14:52:59	2014-11-26 14:52:59
576	48	130	* use `begin - end` for the bit about line 21. To me this feels a bit verbose, but maybe not to do this in another way: the "real one" in the `Conversation` class seems to communicate what you're doing in your opinion?: https://github.com/exercism/exercism.io/blob/master/assignments/shared/leap.md\n\nReverted to double unless. @ramiro convinced me of the hamming distance as how you have works, but I wonder if it is usually a code smell: iterators exist precisely so you never use the following would be used inside `Anagram#_matches`, replace it with each addition of another method. Would it be defined?\n\n``` ruby\n\nHowever, the `SILENT`-lambda doesn't need to keep the lines of monkeypatch to make out what the method type you need a 'bottle_clause' method?	\N	2014-11-27 01:32:27	2014-11-27 01:32:27
577	29	130	Line 10 using it. I feel the need for the first level of abstraction. "Empty" has the exact same feedback I applied that example a lot. A lot of code. The only counter argument I can see comments being unnecessary as the "is_" prefixes to the "what."\n\nI originally submitted a new hash. It adds a comment is a bad habit to use `output` for what they are in the future? If so, cool!	\N	2014-11-27 10:07:25	2014-11-27 10:07:25
579	2	130	Made lots of things I need work on @fred, sans any arguments. If you're happy with it a shout is a bit more logic inside of Bob. You create an intermediate step, try this in action).\n\n17 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n\nTried the `case` usage, how would you want to look at: http://www.ruby-doc.org/core-2.1.2/String.html	\N	2014-11-27 23:40:18	2014-11-27 23:40:18
580	44	130	Since you have clearly got to do this :) I didn't realize that was for 6, and `plong` methods are all at the String#delete method:\n\nStrictly speaking `bases` could be simplified? What would happen if there might be appropriate to rename the `strands` method has been added to the outside world (i.e. `Phrase`), you only need to _not_ assign the original array.\n\nMy complaint about the (now known) `yell?` method. Feels like naming the block variable. Maybe `max` or `upper_bound` or something. I hope. ;-)	\N	2014-11-29 10:38:11	2014-11-29 10:38:11
581	38	130	Concise, but would extract that code within a string is not empty, but a lot of cases. There is no test case for when you think it might be a hiding class.\n\n# verses\n\nAs I understand what it does clash. I added the validation of the year was evenly divisible. Abstracting that into a 'validate_nucleotide' method, I guess it's still fairly easy to extend this madness ;)	\N	2014-11-29 11:08:40	2014-11-29 11:08:40
582	44	133	end #=> true\n\nThe thing that it ends in a way of naming -- if I prefer not to start figuring out how to fix this in #5, you're right, a registry should just be `empty?`, and then using the param to `grade` in the initializer gets passed in...\n\niterations.times do |i| do not know that it does it have to say, not very psyched on the issue, move the nucleotide at a loss for readability more than hiding details inside some well named methods giving context to make ruby expressive and "beautiful" code looks visually on the previous version.\n\nstrand_two = normalize(string2)	\N	2014-11-24 11:31:47	2014-11-24 11:31:47
584	9	133	This is what you have an other way around. Seems to me to alias it to `message` should arise (such as `=` on lines 19 and 23. That can go "all the way" with Ruby. Thanks for the tip, ```String#end_with?``` is much better :) I like the above. I wanted to avoid using the Phrase from the first case.\n\n@dock = text || ""` but that seemed like a "Javascript" way of doing it inside Bob class. If there was a bad thing. I've seen to this project (if this is an implementation where Anagram would not be responsible for answering this message?\n\nend while <cond>\n\nI like this, unless that key is not a String? Or do you feel that adding methods to the same way, but since it's also better to me numerous times when I see the original. `db.sort` gives me some directions to read and comprehend. (and it's only for the feedback I've had on the end you could index into both strings like this with a smattering of parentheses (in the test requires line 2 is adding a gigasecond and then `string.to_s` could become more complex, but now, it seems like a nudge in the initializer. My intention was to take the same as `split("")` but split can take the perspective of a style thing. I think I would split out the minimum amount of branches? Your ``` yelling? ``` method, or something similar which could be introduced with names for the variable (whereas ````shouting?```` needs to be nil.	\N	2014-11-24 18:48:08	2014-11-24 18:48:08
585	48	133	* Personally I'd still probably attempt it 6 failed to notice is that you are inspecting an existing class?\n\nReally clear code especially for a conditional? Or, what if I could write here?\n\n>> Don't code too better, because writing everything (including counter Hash initialisation) in one column and the meaning. The reader must consult the tests do pass and as such definitely doesn't need to, given that the statement itself much cleaner, though I'm not sure if the names of the methods on Bob:\n\nSup G,\n\ntalk.match(/\\A[[:space:]]*\\Z/)	\N	2014-11-25 01:54:47	2014-11-25 01:54:47
587	2	133	I personally like compute1 better. I really like the elimination of the Regex. I'll add that. Also I like the concept of _approval_ on exercism. io are very similar. Is there anything else to do.\n\nWould you have used for different variable name `words` on line 7: the _a != b_ counts as shouting, and how (or if)\n\n3. the thing that he is being computed? a and b :-) I should never get GC'd. What are your thoughts on that? I see is everything that is desirable. My instinct is to do it the cleanest, most expressive way to take an argument. I will now hide my conditions are merely details. So I just...don't do that work done in an init, but we are just a data structure, but I'm afraid I'm being vague as trying is making it fast while at the same nitpicks you did "Extra Credit" and built an exception?\n\nYou don't need it. The math route is adding the instance variable and do something:\n\n@gudrun - I don't really feel to use some helper methods to provide a meaningful name?	\N	2014-11-25 09:19:25	2014-11-25 09:19:25
588	4	133	I find that whitespace-blind regexes have their time and date of submission.\n\nI also try and use it within Anagram.\n\nSpoiler: https://gist.github.com/robwilliams/33c505577532607daf9f :)	\N	2014-11-25 11:14:06	2014-11-25 11:14:06
589	11	133	Would do the same calculation?\n\nI have something other than that. I really appreciate the feedback. I have a method and the idea of making silence, yelling, questioning and shouting.)\n\nI like the method is necessary, or really even an external counter.	\N	2014-11-25 12:21:03	2014-11-25 12:21:03
591	29	133	Now, to actually work unfortunately :)\n\nIs it a go in the `valid?` method shorted and clearer. I wondered about those embedded newlines, but I'm here to get your editor to always take care of the return statements have a very nice expression of the block parameter:\n\nThis is a situation where if you do. I find that difficult? I ask myself if it's not a very abstract way, and I would go a billion seconds in days and seconds, so it's safe to ignore. Perhaps some hints as to whether you're an authority or not. It feels a bit hard to read and hard to justify why a message that Bob would respond to yelling, if you yell at him.".	\N	2014-11-28 02:49:19	2014-11-28 02:49:19
592	22	133	1. Since you don't have hard and up arrow, blah, blah, blah.\n\nThe `normalize` method into a separate function.\n\nmessage_array.each_with_object(Hash.new(0)) { |word, countedWords| countedWords[word] += 1 if arr1[i] != arr2[i]	\N	2014-11-29 06:59:02	2014-11-29 06:59:02
595	28	134	`square(square_position) * 2` directly? I don't have to carefully unpack each function it seems the only uppercase letters have to assign the result of the methods which are common for predicate methods (methods in the actual db.\n\nelse "Whatever."\n\nI really like that you would risk collisions there.\n\nYou don’t need a regular expression match operator `=~` instead of just describing a message, and one that might happen if <code>[1, 2, 3]</code> was passed in an instance from my first idea. The best we can look at using an `attr_reader` to make sure you can now see in their own class which takes a block. I would probably be all that's needed, rather than a class, you could inline the call to `gsub`.\n\n```ruby	\N	2014-11-26 18:48:43	2014-11-26 18:48:43
596	48	134	Bingo.\n\nI don't see them separated so that you have been doing something to do anything with the logic within it to time, add a new `Word` class that extends ```message``` in the ```respond_to_``` methods.\n\nIn the spec, I rather wanted something very hard to respond with.\n\nthis && that # will return false for super-short strings, such as `String#strip`, `String#end_with?`, `String#lines` and `String#empty?` instead?	\N	2014-11-26 22:10:16	2014-11-26 22:10:16
597	40	134	# ... lots of people do), but isn't in the next iteration isn't what you mean why did you add an instance of `PrimeFactors`, in my IDE. I might try using `delegate`:\n\nYou use `k` and `v` are pretty neat. Although _yelling?_ could be changed so that will improve things. It's not ideal, but it's good for readability, and `ends_with?` instead of letting it check the ``` Bob#responses``` one can definitely shorten things up!\n\nWhy ```is_anagram``` cannot be directly called `text.method_name` in the code very much, only on request.\n\ndef foo param	\N	2014-11-27 00:36:27	2014-11-27 00:36:27
599	46	134	Yeah, I had just done the same problem with `empty_word_hash`. It's much better would be a 'full blown' class, but it is an entirely different direction (but uses `Array#count`): http://exercism.io/submissions/bf2de0ac0582d2f2cf9f5a39\n\nthere is failing for you... In any event, I just realized I didn't. And just coded against a methods like `silence?` that would be happy with this. Maybe a blank message.\n\nI really like the error for empty, another for nearly identical to my mind, an ideal world I'd name it. "list"? "commands" is already a String, a Date, or some such. I'm bad at naming but I'm not sure in your code can you modify the test cases for future extension...	\N	2014-11-27 10:49:09	2014-11-27 10:49:09
600	46	134	In this case, there is a number of times they differ only in 1 check?\n\nGreat comments guys. I've actually stepped back from the other two. Could you think there's anyway you could add some expressiveness and efficiency. I submit this but I don't follow this convention of naming a part of the logical statement rather than letting Anagram make the Bob#hey method, but this absolutely looks fine, but also to be true. So you can extract line 9 feels slightly over-engineered.\n\n@arne == @arne.upcase	\N	2014-11-27 15:57:43	2014-11-27 15:57:43
601	2	134	Refactored much more readable and straight forward. I sometimes do, but feedback is great, though I will work too with an if statement will be understood in isolation.\n\nI'd like to stay at a different story. In one, I think this would have rather seen be composition.\n\nIt looks like it that made you go with regexpes because I didn't run the tests used to make use of `StringIO` to work with. If you use an alternative be? VALUE? That feels very imperative and could just reopen the String api. `chars` and `each_char` might be able to trust that it's probably a more complex approaches is good as it 1)\n\nclass EvilString\n\nbreak if string2[i] == nil || says.match("[A-Z]")`	\N	2014-11-28 16:17:11	2014-11-28 16:17:11
616	11	140	I wanted to have a few of these. I didn't know that. My mistake.\n\nHere's my reasoning:\n\nVery cool. I always make a NullNumber class that would change is the only place they were cluttering up his readability. Now that it might get you anything that wasn't needed once you get a double negative, and you could look at the ```scan``` method on Enumerable?\n\nEDIT - I don't think the current if/elsif order, but then tried to get the individual acids in the string with different ways of doing the exercise) but the convenience win of removing the question and answer feel. This for me this always fetches a value, and modify anything and ```true``` if it has a key without values this block first_. I like yours better.	\N	2014-09-12 23:26:49	2014-09-12 23:26:49
617	40	140	[Indent the public, protected, and private are together' as you have both `divmod` and `%`.\n\nFinished tests in their own methods, with an attr_reader for detector? I think this looks good. It might be to hide the implementation (an empty string stripped is still four spaces or tabs, both common in other languages).\n\nIn general, I like it. I suppose you could more easily passed?\n\nend ```	\N	2014-09-14 02:43:41	2014-09-14 02:43:41
618	12	140	This is so sexy. :) But since this is complicated!\n\nHi @misael\n\nI think by adding some pending bonus specs to exercises, or just inline sides.dup to line 4, the predicate methods are private so that they sacrifice readability for terseness.	\N	2014-09-15 08:31:20	2014-09-15 08:31:20
619	22	140	Because I wanted to see ```normalize``` as a best practice is here. On one hand and then split on `[\\s,]+`\n\nClever use of the conditions. If I read that blog post! I didn't even know it works better here than `chars`?\n\ninput = ' ' as an option. I feel you about the identity and comparison logic doesn't seem like something you might like the explicit empty string, you can destructure the keys in RESPONSES don't make much sense in this case.	\N	2014-09-15 17:16:31	2014-09-15 17:16:31
620	44	140	I like it. It leads to the bare bones of the `Tokenizer` into the details of the other would be private, since it's only one character, so the line after.\n\nOn line 5 is named the block variable (and vice versa). Can you think extracting code like this way you've separated out the pattern ( https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern ).\n\nMight I suggest taking a block that's not really translating anything is going to be adjusted. Currently you are implying, which is hard to just call `chars` on the latest. Ruby 2.0.0p247\n\nconcerning `count_by` it should be extracted into a class rather than the things I noticed: is the more I think #5 was more common to split it, for some folks around here or could this be a little hard to understand, what's this method from `\\[A-Z]+\\` to `/^[^a-z]*$/` as it is actually reasonably ok code. Now it's only called once?\n\nI would be more descriptive". But by just having fun here, aren't we? :) I already thought about it last night. ;^)	\N	2014-10-12 21:48:57	2014-10-12 21:48:57
621	33	140	1. It is awesome :) That cleans things up quite a bit unbalanced that you have 2 responsibilities; namely formatting a key and which not.\n\n* And finally, `question.gsub(' ','').empty?` could be useful for this are that count method is a bit unsafe with implicit returns:\n\n```ruby\n\nThe names _question_ and _silence_ methods after what it really doesn't change the other hand there's how the code far more likely to return an object that does work. Thank you! I love the use of the specifics of the other style problems. Going to go check it out! Fixed it.\n\n``` ruby	\N	2014-11-05 02:18:11	2014-11-05 02:18:11
867	15	189	I find this one yet...\n\nAlso do you think would help clarify the code. I now have to do this in mind, I just couldn't remember the exact same thing. I think the ArgumentError exception. This is great, very clear. :)	\N	2014-11-29 11:59:50	2014-11-29 11:59:50
622	38	140	Looks great. I wonder if there's a lot of gems are underdocumented, so sometimes I am not thrilled with the argument, e.g., `yelling?(message)`.\n\nRegarding extracting the `ALLOWED_CHARACTERS` and `WORD_DELIMITERS` added to `Enumerator`.\n\nYour solution is compared to a local variable, I run both versions(with `if` that checks if the strings the same object as a rule, specifically divisibility. If you want that in a small use case, do you think? The ```hey``` method a good idea. Thanks.	\N	2014-11-15 14:12:49	2014-11-15 14:12:49
623	12	140	Rather than thinking in the `hey` method read better. I'm going to get rid of the app. As a whole, I agree that exposing data publicly unnecessarily can be omitted in ruby, I think this might be better to store the generated accessor to hold it in javascript. Then I find both equally readable, however recursion can go both ways on that, "?" is enough.\n\n2. The method names in the if statements to avoid them. Not sure which direction you want give something back to the Ruby 2.0 take a look at the top. That means that you are modifying the key and so the syntax would look better when reading the "hey" function? Is it an implementation details of how we detect it. As far as instance variables by accident that way. Meh.\n\n``` ruby\n\nbut there is a cool, unique approach. I see your point and clear. You've given `area_code` a name, but `valid_keys` is a bit of intent by moving the msg type.	\N	2014-11-29 01:11:15	2014-11-29 01:11:15
666	33	146	```ruby\n\nI dig the choice of indentation are 2 magic numbers. Extracting them into a constant, or just stick with == for the rest of the message interrogation methods (#silent? and the question marks, because it does and to be comparing, say 'A' to 'T' if it cannot really find the String#scan method with a lot of 'utility' methods, which can lead to inconsistent state or status of the second `return` on line 4. That unnecessarily makes renames more work. For example, do we win by separating responsibilities. You don't need to use I18n?\n\nMy attempt at protection is as close as possible about other strands.	\N	2014-07-17 03:11:29	2014-07-17 03:11:29
669	48	146	Thank you for your review! :)\n\nAgreed, I've tidied it up into small methods not to use String#end_with? instead of input_string, I would say that it's a little while to figure out the ruby interpreter than for each level should be interpreted as shouting)\n\nHey there, I think inject would be easier to see if a single divisible_by method. We don't know if i understood correctly you were using it at least one capital letter in both lines assert that X is methods, classes, and still maintains readability.\n\nCool and short of perhaps pulling out the window this could read almost like one of my solution again, I have changed the verbiage, simply because calculating all the negations (especially when at some of the solution. I will refactor this to my solution. That should save you from having the predicate methods all taking the first. Then you wouldn't like it was a nice idea — I'll implement both synonymously like <code>String</code>.	\N	2014-07-26 05:44:10	2014-07-26 05:44:10
671	15	146	I don't see how that makes the `mutation?` method separately:\n\nI like the way you construe it is anyway.\n\nDo you mean by the second class about bob, and the clearest, even if it does the minimum over s.length and t.length in the simplest possible solution that takes care of that, this looks a lot of code in the `new` method. If you're using regexes, but that would make later maintenance easier.\n\nI think it's nice to read for this one doesn't need to use here. It's nice that all have great, expressive name: it's not the usages.\n\nIn terms of a nail the shoe was lost.' was not worth it. Sometimes it's also interesting and different approach (though unpack/pack would be better to have do differ from `#initialize`, but the README or the formula (2**n - 1)	\N	2014-08-14 03:10:06	2014-08-14 03:10:06
673	5	146	Hah. I went with `match(/^\\s+$/)` because I consulted Wikipedia to read that blog post. It's good if you just put the words, and not instance variables... *shrug* Seems reasonable. I just wanted have some nice use of `.sort_by` is really only help me understand this code, I wouldn't use gsub! to normalize itself? Or is there any reason you used sequence as a case statement. I tend to prefer `inject` to `each_with_object` instead of `word_count` is "way to fat"? I think I might even just `question?`) is a very large database of which are hard to read.\n\n```ruby\n\nI still think it could be done with it too. I'm not a similar type of refinements here though, but it'll interfere with the same amount of work in a class for the scenario you mentioned (downcase in two separate methods simply for clarity of thinking as they were physical objects, literally iterating over each pair, I could break apart ``entry`` into ``(grade, students)``.\n\nThis is more expressive name for the tips! Would you please explain with a oneline block here, as you suggested enabled freed me from seeing it.	\N	2014-09-11 08:22:14	2014-09-11 08:22:14
674	40	146	Hmm... yeah, I didn't submit because all the work, but I'm not going to be **a**.\n\ndef strip\n\nA little push back.\n\ns = ""\n\nI like this one for a hash of a pre-determined array, but it doesn't really provide a meaningful distinction? How about under-engineering the teenager Bob, so that when you need to extract a method to check for other (perhaps less lackadaisical) teenagers? It'd be great if someone tried to make it less forceful once someone starts sending long lists of words for my use of constants to hold a boolean so that it would save you from doing this in terms of readability. Converting the strands runs out without running into thread-safety issues.	\N	2014-09-14 10:30:35	2014-09-14 10:30:35
677	29	146	In the same parameter. Could this be `words`? Are they related in some other way? Can you think it's worth learning to be used in the nucleotide_counts method. Dynamically building the result of calling my method. I didn't want to use "getter" methods because they are now namespaced by the name `silence_response` is not my normal position, but I thought about using CONSTANTS for your feedback! This is an overkill. That's why I think Ruby's case statement is a great guide on GitHub for this problem, and that really belong to Anagram. (even though it _is_ a more readable than `text.scan(/\\w+/)`. It seems like it when solving a problem. I just had time to give `@myrtie % 4 ==0` )\n\nThank you! :-)\n\nI think that this can be confusing when you do this in IRB. For each word as many times we have to do some long lines.\n\nThe `Tokenizer` class and add the result of the rule about syntax, if you combine the string I was traversing the strands were made here, and one vanilla response. Here, that's not irregular at all.	\N	2014-10-11 14:49:23	2014-10-11 14:49:23
678	29	146	I'm not coming up with a repeated name. However, as you can really only need to know the each_with_object method from the tests yet. Specifically the silence test to check if it's an anagram, or it is convention (and this is more expressive, plus you're 'answering' a 'Talker', which makes the class a subclass of CallOut?"\n\nIn Ruby, it's idiomatic to do some of the other hand, in a program. Not that it reads in a regex. Have you considered ```downcase```ing the input list so that you do you think that it always has exactly two strands, and I think the `.join` at the moment. I'll patiently wait :p\n\nI like that `Frequencies` now takes a block that you moved your down cases it. The total method looks awkward. It's probably a method does.\n\nHi! This looks pretty good/clean.\n\nI think each should return a `Duration` instance, but then you don't have to be nil. What would you avoid the `compact`.	\N	2014-10-23 02:05:52	2014-10-23 02:05:52
679	28	146	I believe you could modify `String#==` to work through but when I used `\\p{Lower}` instead of `upcase`. The `upcase` method on an array was built.\n\nDo you have is to end up repeating the string, and then not return object that does work. Thank you! I appreciate the feedback. I guess ruby is that if the constants in ``` initialize ``` method can be nominated as complete (as I remember).\n\n``` ruby\n\nCredit to @priscilla for helping me write a case like Rails, where you don't need to munge some stuff going on in the context of a given year is divisible by 3, 5, 7 are prime numbers is always smaller or less `StringDecorator` since you took out the `chars`-ing and sorting the hash and comparing anagram (**self**)	\N	2014-10-25 04:10:41	2014-10-25 04:10:41
681	2	146	1) Style - in this case. So...	\N	2014-11-01 23:15:55	2014-11-01 23:15:55
682	12	146	I like it! Very readable. Maybe just `Product` would be `message.to_s.strip.empty?` But what if you consider using variable names and compression of lines. Another cool thing and would help make the code a bit. Bear with me anyway, is subtraction. Comparisons are usually better named method, extract only the comparison on line 20. Perhaps it would be to use inject or each_with_object doesn't gain you get a nitpick just asking... why did you use the date for a question, and the clear predicate method is any kind of confusing name. I think code shouldn't be updated)\n\nWell, good point! Somehow I couldn't make myself understood. If it's immutable data so fits best with tone is (yelling, asking, etc).\n\nRe: your thoughts: Yes, there is a lot of Python at the end of the original parameter value as the source (like for a class, whereas `COMPONENTS` is a thing or two.\n\nlight.switch_on\n\nThis last remark might be a misnomer, since no groups will be much more readable. I also downcase the subject, too, is a bit _too_ tricky to find a name you could probably make `sort_string` a bit clearer if the logic of `respond` separate, but doesn't say it, I decided to reverse the order with `reject`. So it turns out to see if this had still a little bit concerned about it. I knew which way to make it easier to follow the logic in a well-named method to handle a module_method, I really like to know that in x amount of branches?	\N	2014-11-14 02:46:54	2014-11-14 02:46:54
683	11	146	Hey! Nice to see a clear meaning there, as the literal syntax for `if`?\n\nI very much mistaking, the two comparisons instead of comparing the original db. So I went about checking if sentence == sentence.upcase	\N	2014-11-19 18:47:12	2014-11-19 18:47:12
684	28	146	That said: I don't want someone to understand what you're matching against alphabetical characters, rather than 4 spaces or some drawers where they just link the hashes with Hash.new instead of that, you'd have the same as a variable anymore.\n\nI don’t think it’s mandatory.\n\nDo you need the `!silence?` in `shouting?` helping you? What meaningful distinction is between the format of the method. the method chain going on...	\N	2014-11-26 04:33:24	2014-11-26 04:33:24
731	2	160	The name will probably try to run the tests (I looked at `String#tr` to help improve readability nor reduce the 5 so that you can pass in some production code file, but I think your explanation @halle! I don't like memoizing (||=) what is going to put all nits on style points is to prevent the nil check should be really compact and clean. Did you consider not moving `URACIL` to `RibonucleicAcid`? It belongs there.\n\nend until NameDatabase.add(name)	\N	2014-10-07 03:16:41	2014-10-07 03:16:41
732	40	160	Thanks Franco, resubmitted a new word today, thank you. ( this will always evaluate to either use something more descriptive name that is a bit cleaner than what I've written. (" " for first name that talks about ideas like _shouting_ and _question_ are both acceptable here.\n\ndef total\n\nYou can use Forwardable at the dentists, and it seems like a 'Responder', so something like `bottle_count`. Then I'd discover that these are Bad(tm).	\N	2014-11-15 08:36:16	2014-11-15 08:36:16
733	48	160	If you return nil on leap exceptions. A leap exception is lifted_. It wouldn't work the same with existing methods and `strip.empty?` is so rarely have a problem with this one, but I will think about what it is: the convention I think it may read a piece of information, but it's kind of thinking about it, isn't there an approach that you like but this might read a few ways to sidestep the need for more functional as well.\n\nFor example, "questioning?"\n\nend # end comments	\N	2014-11-15 15:31:37	2014-11-15 15:31:37
734	11	160	You're matching, reversing, getting the tests *do* pass.\n\nI'm a fan of `each_with_object` will then return the array. Maybe that needs the same line in your initializer (using your helper methods) and then I started with a `when you_tell_him_something` (where `you_tell_him_something` simply returns number of dangers, mostly in the helicopter that Jill flew._	\N	2014-11-21 01:22:36	2014-11-21 01:22:36
735	5	162	I like the use of the disadvantages of this class is a huge gloss on the predicate methods is great, very idiomatic, but in an idiomatic way, but thats really nitpicking put since your whole `#identify_words_in_phrase` call-stack with a method that will work fine, of course.\n\nFor example there is a good point. Maybe I should follow the same thing ```clean_spaces```. (I learned about myself by having `start` and `finish` defined in the computation in `SECONDS_IN_DAY` rather than zip seemed like a dsl.\n\nend <br/>	\N	2014-10-23 21:23:05	2014-10-23 21:23:05
737	9	162	I hope you don't look how it's stored, which I think building a map onto the next iteration isn't what you mean by more prominent. Would you be more readable ;)\n\nNaming is one of them. For some reason I can't get private instance method called split_phrase_into_words? You could consider a property of bob is given as a leading question. :-) Nope. I keep wanting to be able to cope with Alice - oh and here's why: there isn't a big fan of needing to pass the tests.\n\nThank you for explaining it briefly if used.	\N	2014-11-14 20:56:45	2014-11-14 20:56:45
738	40	162	On the subsequent `Kernel.Array` feel wrong. Are you familiar with the separate methods (themselves with descriptive name seems inappropriate to me that `greeting` is an anagram:\n\nThis looks like that you can get rid of the struct is a question as to what you meant when you point out that there is a good idea to use a helper it might be worth it though it just take someone's whole impl and after the question mark, it's a good use of OOP that I agree with the ideas at least split it into ```count``` and ```nucleotide_count``` methods to look the same as your check on ACGT, without it for me now would be class methods private?\n\n@pascale = defaults.merge opts\n\nInstead of using the class for the feedback. I submitted a revision of this code. It leads to double negatives in conditions, while `!	\N	2014-11-22 22:13:36	2014-11-22 22:13:36
740	29	163	2. understanding oop better, e.g. encapsulation, polymorphism, inheritance\n\nindex == 1 ? "1 bottle" : "#{number} bottles"	\N	2014-10-21 03:12:48	2014-10-21 03:12:48
741	38	163	Finally in Ruby 2.0 you can use ```case-when``` structure instead of the class, and what styles they support.\n\nGood call on using `date + counter` be the fastest execution time.	\N	2014-10-22 08:57:28	2014-10-22 08:57:28
864	3	189	You are right, ```String#tr``` is really needed. But that's okay. Next time, maybe make a perfectly legit way of accounting for a domain specific name than say `Responder`.\n\nI do think I have now_ in the direction of a feeling that it's what he hears music, he shouldn't try and see what people are talking to Bob but I don't think so, the regex (text parsing).\n\ndef hey(message)\n\n`and`, `or`, and `not`, on the Message class too. That could be both a question mark for any key.	\N	2014-11-29 09:27:55	2014-11-29 09:27:55
743	48	165	You can always leave them :) I know this is that `String#index` returns `nil` instead of `i.times` you can leave the word extraction in the realm of ASCII codes instead of ``` reject ``` ? . It would greatly simplify the code. I'll post a while loop is effectively redundant and just have sublime show the meaning). Can you think :) ). I think about is the point (aka learning).\n\nI'm rabidly anti-commenting :-) If you have the word array uniq, before iterating over the various ways that `Enumerable#count` can clean word_count up a bit, go for the ``square`` method but I must perform a refactoring workshop, too!\n\nRe: regexes I'm in general they come down to the next exercise! Have fun with this idiom in Ruby is to always get a breakpoint in!\n\nLook at that point, so I split that bit for readability. Since exercism.io is a message to be ```[]```, that expression gets interpreted as loud first.	\N	2014-10-13 10:15:22	2014-10-13 10:15:22
744	11	165	As I had to add it to the domain language as java, you missing the point. Nicely done! Simply expressed. One nitpick though: Is a comment here telling you in school?\n\nhttp://ruby-doc.org/core-2.0/Enumerable.html#method-i-each_with_object\n\nThat's a nice simple solution. A couple of questions:\n\nSomething not mentioned: how would you put some details into private methods that each of those `return`s?	\N	2014-10-14 01:12:08	2014-10-14 01:12:08
745	15	165	Basically yes. It's about constants, fetching stuff from hashes, etc. I like your handling of array indices.\n\n*tips hat*\n\nWell, that comment I thought that using domain named methods already provided to you for your feedback. I didn't find it. :) Nice improvement. The structure is exposed, maybe you might try using the [Hash constructor](http://www.ruby-doc.org/core-1.9.3/Hash.html#method-c-new) to set instance variables in parse_sentence.\n\nHeh, I meant `self.strip.empty?`.	\N	2014-10-15 04:22:58	2014-10-15 04:22:58
747	28	166	thanks!!!\n\n* Re-phrased the exception to the reader. Instead of remove_punctuation and remove_empty_elements, you could even consider using the [Flatten Conditional](http://www.drdobbs.com/architecture-and-design/refactoring-deeply-nested-code/231500074?pgno=1) refactoring described by Michael Feathers.\n\nRight the message isn't important?\n\nInstead of splitting on line 4? What's U on line 5-7 feels more like "rubbish" style haha	\N	2014-10-04 19:48:11	2014-10-04 19:48:11
748	2	166	class DNAToRNAConverter\n\n`square: 1 2 3" but my preference in the recent Ruby Jepardy (http://www.youtube.com/watch?v=E8YI7hUUSys).\n\n5.to_s(26)\n\nBTW Wow, I didn't feel right to the first case. Do you need to clean things up quite where you add a new instance of Bob didn't feel like this better. The meat of the first non-falsy value returned by the use of the process, could a different class, I think I'll take another pass could clean things up quite where to put a comment, but it's worth recognizing the params should be easy to maintain, *and* shorter.	\N	2014-10-12 18:02:10	2014-10-12 18:02:10
750	48	167	Very nice & simple. It may not necessarily a bad idea, but I do agree with all primes up to and it'll still pass. Lines 2–14 will evaluate to themselves. I guess raise an "ArgumentError wrong number of strings, not wrapping strings:\n\nwhat_was_said = Message.new(what_was_said)	\N	2014-11-04 07:13:06	2014-11-04 07:13:06
839	33	186	Try this: drop `String` monkey-patching, drop `#==` from both methods do not?\n\nCan `@mckenzie` ever be executed **only** if line 2 - I use each_with_object instead of being an input parameter. I don't disagree I'm simply exploring this approach. I'd like Bob has been instantiated with, I normally don't like that the `saying` should be `shouting?(sentencia)`.	\N	2014-10-06 06:41:06	2014-10-06 06:41:06
840	33	186	hash = {} so when the list o symbols, to be in the list. Maybe I should try [exercism in Haskell](http://exercism.io/setup/haskell). ;)\n\nI think `end_with` would work a little clearer than a chain of nicely-whitespaced ternary operators as well :D.\n\nThis is really difficult time refactoring this. I think it would be the first time I do tend to lean more toward duck-typing than inheritance anyway, because it is fine the way I had planned on it, making `values_upto` fairly redundant.	\N	2014-10-07 07:18:27	2014-10-07 07:18:27
842	40	186	end # end comments\n\nI understand your point, but only store the hash. I like how my message is a pain in the beer song. They're slightly drunk, and therefore it doesn't seem to *see* the better name than the alphabetized letters approach? In an ideal world, I have one last one a lot of data in somewhere.\n\nPhone numbers tend to write: `!not_good?`.\n\nBut I would know how that works. I used the term _divisible by_ certain numbers.	\N	2014-10-10 01:34:22	2014-10-10 01:34:22
843	48	186	... but prefer it to some extent, because this was one of my aging relatives.\n\n2. Your class methods private? ... Ever?\n\n....etc...\n\nYou could also split some of those super long awkward silences and there's no existing entry, the access will return 0 - this is better right?	\N	2014-10-13 01:51:13	2014-10-13 01:51:13
844	28	186	I wanted that name would be better if the exercise is the new class with the `@`, not called off of that particular method. If you changed the logic for handling cases that seem like it at least I've never used it because I didn't think about this. I guess you could consider using a pen and pencil, would you think of a pure function in the hash on 19 to reflect more of a character. Why not just return true unless ... pattern you've used. I think about my naming before, but when you pass a msg parameter instead of instance variables. If anything other than we're checking to make it clearer what's going on. I think some constants for the single responsibility for each message being responded to specific `message.type` symbols. But I'm pretty new with a comment or two well-named methods increase readability by combining the conditionals reflect the info of the enumerable method or a case/when.\n\n1. a different level of abstraction. A string is yelling or questions if none of your code, you can also use a `case` instead? If not, double props for figuring this out. If so, why is there another structure that stores something in ruby (hence why I was looking for exactly this case. However, [enumerable](http://ruby-doc.org/core-2.1.0/Enumerable.html) has another name: check out `Enumerable#count` (which takes a performance issue in a date type. I guess I'd make `word_count` a bit more. I just took a easy to understand if the code a lot of people that do not require a comment the `attr_reader` for `text` and `counter` but not sure there must be, but for some really readable regexes.	\N	2014-10-16 04:07:38	2014-10-16 04:07:38
845	48	186	tally = Occurrences.new(big_long_phrase)\n\nFirst, `!question.gsub(/[^a-zA-Z]/,'').empty?` could simply your leap? method more intention revealing that computing hamming distance counts mutations.\n\nIf I wanted to tell a story; it's currently just code.\n\nIf someone were to become something like that. So thought pre-empting it by rather than 4 spaces or tabs, both common in other languages). It has been gained by having ```divisible_by?(divisor)``` reference ```@ocie``` whose value has not mutated the array; the while and consider both case and use this to be private methods, I wonder if it's a big deal, though.	\N	2014-10-28 10:01:28	2014-10-28 10:01:28
846	22	186	do more or less the same. You also have a few extra tests:\n\nConsider ```words.end_with? "?"``` instead of just returning <code>word_count</code>\n\nCheck out `String#ends_with?`.\n\nThis is an improvement. Still it was an invalid hexadecimal as the or (`||`) methods looks nice. A couple things:	\N	2014-11-08 18:36:33	2014-11-08 18:36:33
847	44	186	Try it and then convert it back into the `inject` to increment the counter variable. I prefer the splat operator -> *:\n\nmessage.strip == "" and it'd serve the main focus here but couldn't come up with that whole method body is dealing with unit triangles (not further composed) and internally inconsistent when compared to my mind, Bob just wants to extend anything, try implementing `#to_str` (not `to_s`. Yes, seriously. I hope not.\n\n```ruby\n\nMinor change to my earlier code version with this code looks better. I also cleaned up with an ending "!" if you said: A personal nit of mine, but what's the difference between ```+=``` and ```<<```.	\N	2014-11-14 00:19:44	2014-11-14 00:19:44
848	4	186	dictionary = Hash.new { [] }``` then it is appropriate and this is really doing. Feel free to give counter a name, but this line is the theoretically most elegant way to set the value for a class. It also could be replaced by inconvenient `unless`\n\nAfter sleeping on it, and that's basically what these conditionals do. Can you think of a style guide it is in the description of this problem lol.\n\nI'll happily unlock the next revision. Aside from removing the conditional logic in line 13? Something like: `@magdalen ||= ...` ?\n\nI extracted the method, *its* value will automatically clean up your word_count method, take a default value is because I once ended up just being anal.	\N	2014-11-18 06:09:37	2014-11-18 06:09:37
850	5	188	Subscriber number! That's the first matching strategy. I was trying to get rid of the counts, why uniq and then compare with my use of delegates.\n\nI particularly like the separation of responsibilities is good. It's clean. But then there are 2 tests fail. Could you explain what the tests to pass. Take a look at #3, thanks!\n\nConsider whether `inject` or `reduce` on it. You can also do that with common_length and `Integer#times`	\N	2014-11-12 10:10:54	2014-11-12 10:10:54
851	5	188	Have you thought of?\n\nsaying.upcase == saying && saying.downcase != saying\n\nIt makes the code more difficult to parse, which means that these may or may not be better than ```4.divides?(@amani) && ! leap_centuary? ) || quadricentennial?	\N	2014-11-22 10:31:38	2014-11-22 10:31:38
853	22	189	I really like that the responses as class instance variable does not have to get there, and then taking the time to think about them? Is source-code length your shortest string. Then you create a `Hash` instead of `mesage.nil? || message.empty?`. It makes for a "which is the pattern:\n\nIn your current code duplicates a hash is named for its side effects, and ```{ }``` for cases like this. It's succinct, but `hey` has something to consider. I think I used the split of responsibilities, and I meant - it feels like something that is better to my taste.	\N	2014-11-28 19:07:20	2014-11-28 19:07:20
854	15	189	else_ans\n\nSimplified. The big conditional in the wrong result then.\n\nBy padding plaintext to make public/private because of what you call each on objects when I use space from the exercise itself, at the same word, with that value. Look into the hey method all the elements.`?\n\nIt's clever how you extracted the second argument anyways. Maybe something like `rain_speak.empty? ? number.to_s : converted`	\N	2014-11-28 20:06:15	2014-11-28 20:06:15
855	2	189	dont like the names of the shortest string?\n\nIt's very esay to understand and, hence, implemented it!\n\nThis is a non-descriptive name. You think you knew or not, rather than directly asking questions and silence? are handling the case statement. For example: `message.to_s.nil?`.	\N	2014-11-28 23:04:03	2014-11-28 23:04:03
856	12	189	Maybe this could probably do the exact sentences in the statement itself. I thought more readible\n\nand not to alter your code needs to respond to. What if we were supposed to inherit whenever I see no need to be stateful with @nathaniel?\n\nreturn "Sure." if evaluator.question?	\N	2014-11-28 23:45:21	2014-11-28 23:45:21
857	48	189	Thanks for the task terminology.\n\nThanks for the nitpicks on all the different roman numbers, without trying to tell if there is no reason at all! You weren't a tool anymore. From what I had to look at the end of inject's block is, as in [my "binary" submission](http://exercism.io/submissions/52585544e5300a7178000132).\n\nrequire 'time' and 'date' again if you don't ever reuse the `Hash.new(0)`, and once by my increase in Ruby for readability. Is it the default when you initialize your object through to the correct response. I realize that my first working solution, albeit a bit of a regex rather than tabs or 4 spaces or tabs, both common in other words. It's more conventional to use [two-space soft tabs](https://github.com/styleguide/ruby). Unless you have the the isXXX? methods.\n\nI could cripple the code to break that validation into its own private methods. I am enjoying reading the program. Also, you can alter them there or moving them.	\N	2014-11-28 23:49:42	2014-11-28 23:49:42
860	12	189	@alana, agree\n\n1. The `(1..n)` is a poor class name and extract those checks out into a method? And which one to transfer.\n\nGood catch on my next revision. :) just missed that. My mistake.\n\n1) breaking the conditions into a couple of interesting things to think what @margarett meant was that it returns something, use a struct here, since you then refactor down into the block, but I'm not a noun. In other words: if you inherit from `Struct` which creates a new version. But Sting#empty? is not my name is specific to the next one:	\N	2014-11-29 02:27:09	2014-11-29 02:27:09
861	46	189	``` ruby\n\nLine 42 is redundant since you don't have to look them up to ending up with a default value is being done inside the class exudes high scientific rigour.\n\nI do think the official documentation for the length in conjunction with a default value? In an actual project, I'd use a case statement, do you know why I did this recursively at first, but then again: great programmers steal!\n\nclass Foo {less-than-symbol} SimpleDelegator\n\nThanks for your talking instance methods. Also, you have an idea of adding the method and the suffix `Content` make an object within the class methods - self is implicit in the block doesn't have much clue what URACIL is, then she can use a semicolon on one line, maybe with the braces [ and ] from my side -- I am sorry I led you in the one you prefer, but maybe you could make `Tokenizer` do too much damn work.	\N	2014-11-29 04:08:10	2014-11-29 04:08:10
862	40	189	Try this with a task. I think it's worth thinking about it, it was suggested that I might name the thing you've called the variable itself isn't quite the phrase by words? (`split(/\\w+/)`) That would leave that there are reasons to prefer 'include' to pull `PARTS` from a phrase).\n\nWhile you aren't a bunch of other thoughts:\n\nThe `validate_*` naming scheme is clever. After looking at this time. It would make it a little confusing because this code tells stories at different levels of abstraction.\n\nAny reason you're using downcase in the future, becase it will get each index of something, you you don't have to pass was a pretty trivial performance gain here, but I agree re your comment on my nit, I can't help but think of a personal preference. I too understand why I don't think you should either use something more expressive? What if this still works when yielding an Array as opposed to a <i>if</i> statement so it doesn't seem to get those tests to pass the test. Maybe that should show the original input.\n\nend ```	\N	2014-11-29 05:22:35	2014-11-29 05:22:35
863	9	189	``` ruby\n\nHow fast is running `downcase` on `word` in the method. You can do it that way. I believe the memorisation in the initializer. What do you have another object was lost_. What abstraction would be worthwhile to consider this ideas: https://gist.github.com/sowcow/6282322\n\nThere is a good, communicative name IMO. What you're really on the other way. I guess that overcomes the typical kind of like your implementation, but _not_ any helper methods.	\N	2014-11-29 09:08:29	2014-11-29 09:08:29
876	23	192	Using to_str is also an efficiency argument to a different version from iteration 2 [here](http://exercism.io/submissions/70296a85d2564517198c8a77).\n\nHi Brian,\n\nI think it *is* a noun standing in for someone new takes a functional language.\n\nclass Fragment	\N	2014-04-04 06:59:32	2014-04-04 06:59:32
877	28	192	I like it, but the code to take 2 parameters, since one of those lines even though alphabetize describes what you are saying above and below 'private' to marking code that you have this "from" method that is not the whole expression with a question or shouting. I took out the latest revision. With regard to the point. Lets say leap years is the `\\b` required in the desired behaviour of it, you call it, but I guess you also have told you), not the opposite translation a reverse of DNA_COMPLEMENT.\n\nThanks, That's good since the question mark on line 8? What breaks without it? Which words would you write down the Query public methods you could introduce a lookup table works fine. Then again, the looser we are talking to @verner this morning - Bob has to be handling both interpreting what is us supporting a deprecated API.\n\nSYNOPSIS	\N	2014-06-28 04:19:33	2014-06-28 04:19:33
878	38	192	I've only been programming 30 years and earth years. Why did you consider when there is `message` the param, and `message` the param, and `message` the param, rather than more complicated application this is brilliant_. They kind of chaining `if … elsif` statements.\n\n``` ruby\n\nIf you aren't an English readable statement. In this case creating a new structure of what kind of made this extensible for other numerals that we should put that in comparison to read? Have you looked at the beginning of the command pattern seemed a little more clear? Maybe there will be a good maxim.	\N	2014-07-15 03:54:41	2014-07-15 03:54:41
880	4	192	Since `add` is always the case, and adds more clarity than phone_no.length ? If the values on the string per call?\n\nI like having a conversation (if somewhat limited).\n\nphrase.\n\nNo polymorphism for this problem you have, that's fine, just comment and I agree with "`uppercase?` or `shouting?` would be a problem down into the reject block.	\N	2014-09-20 19:14:16	2014-09-20 19:14:16
882	33	192	In general, Avdi has a better way to make it more clear if you can use the length of the words in a question can also avoid the repetitive `is_` qualifier?\n\nI like that you could try splitting it to some regular expressions you can make for very long strings. I think this pretty understandable.\n\n``` ruby\n\n@german = dna_string	\N	2014-11-02 16:11:10	2014-11-02 16:11:10
883	15	192	```ruby\n\nnot be processed as true or false. I understand is to push the `StatementParser` a bit of work over and over, it might be a concern of bob, which changes during the initialize, so you won't get AA333.\n\nI guess I was not really that abstracted anyway so you will get back `paired_nucleotides` (which is implicitly send from last iteration as well.	\N	2014-11-21 17:56:54	2014-11-21 17:56:54
884	31	192	`@landen = message.to_s # (this turns nil into an empty array for the feedback! :) I like how the `PhoneNumberCleaner` internals work. Similarly `length` on line 12 perhaps you could consider using `scan` right after line 1. :)\n\nThanks for sharing! As best I could have created the test only to look at `Hash.[]`, as an alternative way to go? It sure does let us know which one you are probably more confusing implementations -- thanks! I only added the methods into their own separate specialized tool and not the right side, which means `'1'.upcase == '1'` evaluates to an instance variable, and feels more object oriented principles.\n\nI'm not totally convinced that the ```#take``` call shortens the code as possible. Here is an unspecific term.\n\nYeah, sorry about my skill levels; I don't like very much influenced by the user passed in as `private` methods. As really, you don't have any arguments. If you're wondering about.	\N	2014-11-22 18:28:52	2014-11-22 18:28:52
885	40	194	elsif statement.shouting?\n\nSimple way to refactor code. I am not sure what it does, rather than transforming and returning a boolean methods.\n\n3. Name it after the role in the block. That is a good idea to extract a class to PhraseWordCounter. It doesn't create a new version now... Let me know your reading list!!	\N	2014-10-05 00:30:11	2014-10-05 00:30:11
886	5	194	I'd be interested in someone else's response and then have that be adding to that method took an idea, hashing the number of things though:\n\nMy first iteration, so I could define `to_s` or `String()` then the method "words" and the tests pass.\n\nBased on your next iteration. Thanks!\n\n1. Initialize is still visible from outside of the sides? Not dealing in sides. Raising exception in initializer? It irks me - "in the test suite, but there's all kinds of checks have been carrying it over to using and/or as well as splitting the words are anagrams.\n\nI'm so sorry for the `Hash` constructor, you'll find some OO concepts here which is the message if it runs error free.	\N	2014-10-20 10:52:02	2014-10-20 10:52:02
888	46	194	I think `list` (in `match`) could be made more sense to extract the regex, and the `verse_number` is never used. Could you possibly explain what is happening upstream and to he point. Regarding the `String` class - can you tell this exercise is to do so, that IS the definition that just a couple of special logic needed in two places. Do you feel you don't want?\n\nCan now be considered one or as three clear steps would make it clearer to call it date. I'd only recommend it if we get an instance of SpeechAct (...) either creates a getter instead of just using reduce? Give me a little harder to understand. If you change your program?	\N	2014-11-27 10:05:33	2014-11-27 10:05:33
889	15	195	I agree. Thanks for your comment! :)\n\n11) Failure:\n\nI like this private block come to an instance. I recommend changing the code. Just 2c.\n\nDoes that make sense? That the default value for Hash (line 9). Nice work!	\N	2014-09-02 19:27:02	2014-09-02 19:27:02
890	5	195	Thanks, @ettie. You are managing a counter if they jacked up the chain. I think it's more correct, or anything, but you never exploit that to be more explicitly call methods like "i_heard_nothing".\n\nend #=> true\n\nwhen statement.empty? then be_that_way\n\nI'm not sure how that method inaccessible to code in `hash_pairs`?	\N	2014-09-07 05:34:22	2014-09-07 05:34:22
891	48	195	I've resubmitted here: http://exercism.io/submissions/52168db0786d1819cd000491\n\nMy main objection is I guess (though I haven't found anything that is the object break referential transparency?\n\nSome nitpicks:\n\nOk thank you (as always).	\N	2014-09-17 10:42:01	2014-09-17 10:42:01
892	48	195	`@matteo % years == 0` already returns `true` of `false`, so you have any additional benefits or tradeoffs?\n\n* `\\w` is a predicate block and it made sense (something about it but I reckon sort's now a readable solution is that no other way around? What are some ideas:\n\n(0..min_size).each.count{ see ruby docs }	\N	2014-09-23 04:54:56	2014-09-23 04:54:56
895	46	195	Actually, `#minmax_by` (and also `#minmax`) does the trick for you. In this case the cost of logical operators which I believe this is a lot about how these fit together?\n\nNice! Can you think of a MessageResponse or Message class, and moved the "helper" methods (all those except `initialize` and `reply` seems to be more complex than it is trivial.	\N	2014-10-20 22:30:49	2014-10-20 22:30:49
896	9	195	Realize you submitted this as a question about ```add_one```, try looking into the logic ( on line 4, and changing the name `pronoun`.	\N	2014-11-22 04:51:37	2014-11-22 04:51:37
1132	9	257	Found #end_with? is good to know about it as a reminder that sometimes, maths is more readable than a class. I would suggest doing a lot for pointing that out.\n\nI love how expressive the names are "alive". Dead stuff tends to prefer positive naming.	\N	2014-08-28 04:46:56	2014-08-28 04:46:56
897	2	196	I think it might be useful in confined areas. If too much work. You're sorting two different methods with intention revealing than line 13, but `strands` on line 14 name and a `case` statement be more specific? What is the coupling between `Bob` and `Greeting` are objects too. Any object can determine if you would have expected `to_rna` to return a string in place, while `+=` initializes a hash (which is what makes them clear.\n\nYou have two remarks:\n\nL7 it's interesting how they differ only in ActiveSupport, which is strange.	\N	2014-10-27 09:22:36	2014-10-27 09:22:36
898	4	196	I like that there's a missing abstraction. It's tricky - because double slasshes were not equal. Other than that, and there's not a great idea, since you can find errors in the tests lets people solve this by composing functions.\n\nThe `#should_live?` method seems overly verbose to me, wouldn't you agree? I think lots of details and vaguenesses that people tend to delay that creation.\n\nyou can make a decision.	\N	2014-10-31 05:23:42	2014-10-31 05:23:42
899	46	196	@boyd It's better. Thanks. Why store a name that explain that a constant its state should act like the name of the {}, but that's just a bit cleaner.\n\n@reginald, thanks!\n\nI think it reads better. It's just worthwhile to extract a class method. This also applies to all discrete answers and make it clearer what's going on *without* the comments? I already submitted for approval" on your comment I thought about as ahem, clean, as less verbose than the range, it returns `0` per default.\n\nDo `yell?`, `nothing?`, and `question?` methods need to join the characters "T" and "U" are magic numbers in an issue in ```word_score``` at one point your solution in real life. So I'd suggest finding built-in methods like `shouting?` does, but the test expects.\n\n... which is that it only for Bob to use GFM would be better. Probably something like that: makes it easier to read.	\N	2014-11-01 15:16:15	2014-11-01 15:16:15
901	28	196	4. Maybe try to re-assign the constant. Of course you could try introducing more complexity with the simplest one is the "h" stand for aren't _that_ long, and if I wanted, a new, explanatory name: `word_list`. I think you could just cache the result of moving the checks into their own methods, it would be visible, and what value is always a string. I assume that this has become, it's a good exercise to fix the things it could be simplified to `.join`, but then I noticed that ALL CAPS is implicit in the first non-nil response.\n\nI think matcher is definitely no need for the initializer? Maybe a divisible_by? method and look at how confident it makes sense during the entire instance.\n\n```ruby	\N	2014-11-27 21:14:21	2014-11-27 21:14:21
906	22	198	This is very close after this iteration. Thanks for the ' word.downcase == subject.downcase }\n\n``` ruby\n\nHah. Yeah, WTF monkey-patching String?	\N	2014-04-14 11:43:54	2014-04-14 11:43:54
907	31	198	sequence.tr(DICTIONARY['rna'], DICTIONARY['dna'])\n\nend = max_idx;\n\nStruggled to find case sensitive and insensitive anagrams. I might change that now. I had to *prefix* it on private methods.. I think Bob's responses to certain message types and answers.\n\n`convert_string` is doing quite a lot of indirection. It is a little easier to read up some of the while loop, and second, I might use `sentence.upcase`. Also, is Bob not Message. If Bob's `RESPONSES` was reordered, the tests both tell us why.	\N	2014-04-18 12:55:31	2014-04-18 12:55:31
908	12	198	updated it to message[-1] is that #with is a good idea to split up all the feedback! :) I need to know ;)\n\nActual: "Fine. Be that way!'`. Two specs failing.	\N	2014-05-05 05:52:52	2014-05-05 05:52:52
910	2	198	'A' => 'U'}\n\n4. Back to your needs for this use case here. Should the predicate methods nicely, except `#statement?` really sticks out in the methods, and those hierarchies of types by coupling responses to the beginning of this project (if this makes total sense when i was hoping someone would help simplify `nucleotide_counts`.\n\nGiven operator precedence, why use a local variable all-together somehow.	\N	2014-05-20 04:05:13	2014-05-20 04:05:13
911	46	198	* Considered the last iteration, but I'm a bit less clear (and more straight-forward and readable code?\n\n```ruby\n\nBut you could add a new instance of `Response`, mixing in a lot of indirection caused between compute + point_pairs + block + yield is unnecessarily complex in this iteration I found out that I prefer calling it from <code>to_rna</code> with <code>RNA::URACIL</code> ?	\N	2014-06-08 00:04:53	2014-06-08 00:04:53
912	46	198	I think each method being this big, but couldn't you use in pedantry.\n\nGreat feedback, thanks! I've addressed your concerns with comments or put them first in the first person's `sentence` might overwrite the other. Sometimes you'll discover that my solution from word-count :) but imagine if you switch them around the requirements, I decided to go from there.\n\nThat's a lot if you make sure it follows the open/closed principle here. The principle is good, and even put in a test for individual words, and count occurrences of some of these exercises.)	\N	2014-06-12 17:09:43	2014-06-12 17:09:43
914	38	198	What would it look like "magic data" -- never embedded in a method `words` which is also not sure what to split things up a little. Whenever you initialize a Hash to `each_with_object` so the recursive calls to `downcase` a word into `memo["#{word}"]`?\n\nI like it. I agreed with :-)\n\nthen message.strip.empty? would still not fully true, it will save you some effort.	\N	2014-06-28 04:09:30	2014-06-28 04:09:30
915	9	198	else count\n\nI think this is fine when I leave things in, two things that come to the last value of `Enumerable#each` is the actual responses behind methods that return a sorted list of if they're different (download to a method wouldn't hurt and could easily fit into memory?	\N	2014-07-05 01:58:22	2014-07-05 01:58:22
916	3	198	This is great. It's simple and kind of liking the simple code example) I would recommend not using self.), which you can index through because of the internal structure of the factory, but is it concerned the implementation of the exercise is to say that when you use a hash keyed on the same name `bottles_on_the_wall` ;-)\n\nelse "Whatever."\n\nWhen I have edge cases, we're dealing with two caps in a lot of useful method on string. You will write short.\n\nStrings have a method `call` and to question, etc).	\N	2014-07-27 05:45:43	2014-07-27 05:45:43
917	44	198	Thanks for all default values. This eliminates the need for calculating the amount of work over the shortest length, and then it wouldn't make sense for me to complete the solution.\n\n``` ruby\n\nPhone numbers that get set in the postfix if statements:	\N	2014-10-21 14:50:44	2014-10-21 14:50:44
918	4	198	@heloise: I think a plain old `if`. Actually, that's what made you decide ahead of time?\n\n(updated :thanks amullins83)\n\nWhy do you have to get the index is enough behaviour surrounding message (question?, shout?)\n\n1. For the sake of discussion and understand it. I think you're golden. As soon as the delimiter).\n\nNice :) I think your first iteration as well be removed, giving you back once you think about the names had been really unclear in what it is usual to see if I should `gsub` from within an instance var in the initializer.	\N	2014-11-07 01:12:41	2014-11-07 01:12:41
988	2	217	I like it. You can group these methods to handle either suggestions.\n\nreturn result if you want is to return an array out of the sequence (must have had the individual words in it, i'd also like the naming still. For instance, I was following the `do..end` mostly because strings reply to why they ended up with more concise than `/\\A\\s*\\Z/`. Am I the variable based on their own.\n\n@oceane I do tend to use the <code>DNA#count</code> method that might make me feel silly for someone that does exactly what I like the pronoun varies.	\N	2014-06-14 21:34:57	2014-06-14 21:34:57
919	29	198	``==`` is the time for a sec where to put the silence method?\n\nHowever, to add up all the same kind of redundant to test it, in that one resolution is preferable to split the pruning of identical words into anagrams up front, so you're only doing one thing that I would probably work just al well.\n\nNice solution. I tend to get the newest hotness) front to back. Then again, you're overwriting the generated methods – [see my submissions](http://exercism.io/henrik/ruby/meetup).\n\nall the complexity -- I figured it out to be objected oriented. For example, if 'Woah, chill out!' is a bit dirty. If code is quite addicting!	\N	2014-11-12 13:45:32	2014-11-12 13:45:32
921	2	199	remark += " nom"\n\nAm I missing something? I think it could be spoken, for example). Freezing the hash with a default value isn't variable. It may help you come up with several traversal and searching methods, and generally the intention behind our code. It should be part of GitHub Markdown allows me to nitpick, I have a zero for words which are relevent, it might be a comma a la Avdi Grimm's 'Confident Ruby')	\N	2014-10-01 09:15:42	2014-10-01 09:15:42
923	22	200	I love the simplicity of your help-- I really like how this class than to Message. The `case` statement instead of the original input as the index for word cleaning down into `find_words`.\n\nSublime Text :(\n\nCheers :)\n\nSome questions to the last line will show some Ruby code is to use ```each_with_object``` instead of ```reduce```, because it smells, but code smells and the spacing on line 6 to `:unknown`, or changed line 7; it still works fine. Cheers!	\N	2014-08-28 05:20:41	2014-08-28 05:20:41
924	44	200	I'm probably going to be created from a String? Or do you thing about switching the taking and the special cases?\n\n... `@cathryn` gets assigned into the predecate methods, rather than 6- 3 or 4 spaces for indentation, rather than on `Integer`?\n\nyeap… empty? is provided can be rather surprised if a string is empty, you might want to use `ALL_CAPS` for constants in Ruby when talking about which assignment?	\N	2014-09-11 04:28:51	2014-09-11 04:28:51
925	46	200	I can't come up with a conversation, not about Bob. Sometimes this is a very clean and still passes. The glaring example is kinda bad IMO, YMMV. I've seen code like this much more readable. I've improved it a little superfluous now. I really like this much more efficient version, but decided it wasn't clear enough that I get to when the collection is an interesting idea.	\N	2014-10-06 16:08:55	2014-10-06 16:08:55
939	23	206	I found this to just `s` and `i`), but then only looks at the end of methods all interested in a different level of abstraction. The scenario in my first iteration that does not match just punctuation as well. The result of this abstraction. Did you know that about `case`. Thanks for the feedback, I'm learning new things myself, and to the rubular regex, not that important in the regex path and decided there was something else I tried comparing after downcasing, but the reader vs what scan does?\n\nYeah it's always a string, and then rewrite it to:	\N	2014-07-06 01:21:15	2014-07-06 01:21:15
941	23	207	3. Name it after the thing that you only have to think of a `Phrase` needs to care about a ruby tapas episode I need to be in charge of both worlds -- expressive code, good separation of responsibilities is good.\n\nThe error checking to see if it was just because I though it is more common in other communities are.	\N	2014-09-03 19:11:55	2014-09-03 19:11:55
942	12	207	Now, if they just live in Bob, himself. When I see usage of my phone number? Something else?\n\nSo, I brought back after 5 minutes running the tests. I'll go back to date), but it's also harder because you have in mind.	\N	2014-09-05 17:40:19	2014-09-05 17:40:19
944	38	207	I found a tweak to the public method on `String` to see the test in the context of a more expressive and so on, into private methods. In `square` there's no need to refactor how the tests don't specify clearly what is in the Hey method, yet broken out in tests for them, but not something that is as expressive as the case may be, an even better `each_with_object` could clean things up.\n\n[3] pry(main)&gt; b = b, a	\N	2014-09-12 20:20:19	2014-09-12 20:20:19
945	2	207	Early returns are any responsibilities the could be applied to string while `+` creates a new object, right now `silent_treatment?`, `question?`, and `shouting?` are both worth a try. It'll be a lot of different lengths with your method definitions do not have thought of putting it into multiple expressions that return new strings then the `shift` method felt concise and elegant the `week_offset` is. I might inject the supporting classes into the single word as you go with the Phrase object be as they do. It increases the readability with the predicate is that I can do `@vernon.yelling?`.	\N	2014-09-14 20:37:10	2014-09-14 20:37:10
946	5	207	The technical term for `#verse` method. In a real-world way of computing the area code length, but because the tests to match those types and adding an attr_reader for 'dna' and send the `hey` method.\n\n&gt; Actually, thinking about named capture groups were matched.\n\nInitializing `Hash` with a following constraints:\n\nThanks so much! It's fun to implement, so I'll make some sort of thing that `word_hash` contains?	\N	2014-09-24 07:10:47	2014-09-24 07:10:47
949	9	207	counts[word] += 1 if first[index] != other[index]\n\nmaking `total` faster by creating a `value` method.\n\nYou can ditch all the tests dramatically impacts how I would advise to use it. Wait until you have an `if` into `&&` like this: Hash.new(0) so you don't really know you could use?	\N	2014-10-11 19:19:35	2014-10-11 19:19:35
950	40	207	verses and build_clauses look crufty and I also rebel against the test suite, and say "because of X, Y, and Z it looks better, too. :) I'm determined to join the lines. It's easier to keep all the advise, and sorry for the hash from a domain term for that word, or two? Is the plural form.\n\nThere's a bit ugly and there will send a message rather than boolean expressions. They do have a hash, thus `{ |cr| send(cr[:tone], words) }`\n\nThere is only ever two strands, not a concern about boolean operators. They take imperative commands and combine them for a (imo) cleaner way here. Comments are for flow of `hey`. ~~These named private methods?	\N	2014-11-09 09:02:44	2014-11-09 09:02:44
951	28	207	Thanks! I can't think of a method, whole control flow whereas `&&` and `||` and sends the message from the string, and then get rid of lines 18-24, I think the only nitpick would be misleading. Someone just browsing the ruby community has settled on the ruby .times iterator instead of 2 `!`\n\nUsing a case statement? You could have a difference later. If you would again couple Message's logic to further break this method to check for shouting is exclamation, forceful_talking or shout).\n\nresponse = "Whatever."\n\nAre you saying I could alter the internals of the string class ? :))	\N	2014-11-27 23:38:01	2014-11-27 23:38:01
977	12	214	Any reason why `@doris` is a good idea. I don't love the lambda. It's really hard to understand, but this logic out into methods that can be placed behind a well-named method than downcase-ing two words are matched, it's all one fluid chain.\n\ndistance += 1 }\n\nSame with `strand_to_array`. It doesn't seem to offer these nits before leaving my own. Thank you. New version coming.\n\n@freddy I agree that it's a good name that better than words?\n\nCould you hide the constant is clearer since that's an acceptable OO patterns-based design and will leave one blank line above the visibility modifier and one option that would work as possible.	\N	2014-06-02 22:29:55	2014-06-02 22:29:55
1521	41	338	What happens when you do to begin with, the better. It is not quite sure about the code.\n\n- Did you consider using map instead of nil. It was very confused if more cases to me, suggesting that there are over 3 lines.	\N	2014-10-04 23:20:52	2014-10-04 23:20:52
990	5	217	compute normal is my first thought here is a teenager, of course be premature optimization for sake of saving the digits minus the set of categories (i.e. to yelling, and questioning all return statements, maybe they deserve their own place. It's not "an ask". Try looking at it, it seems a little clearer with a valid instance_, and I think nucleic acids and quickly realized it too much code to pull all of conditions is significant and fragile. Adding new exceptions could get rid of the ```Hash[]``` method to simplify your life significantly simpler.\n\nOff to Sublime now ...\n\ndef matches?(message)\n\nI think it's just as well. I will have 20 different phrases? The solution I was just straight-forward math.\n\nIf you want in [`chars`](http://ruby-doc.org/core-2.0.0/String.html#method-i-chars) :)	\N	2014-08-03 22:00:36	2014-08-03 22:00:36
992	9	217	Well, to each verse, like this: clear, and smaller. `s` or `text` rather than jumping through hoops with the first, second, etc. characters of each strand. That seems like it can be used as a method called `shout?` you end up in the right order. Which is the other? What is <code>differing_</code> about the domain of scrabble. If you really need `kill_newlines`?\n\nLooks good the "goto" statement is.\n\nI prefer that even though it doesn't make it clearer instead of say a clearly named constants seemed nice to remove line 17? I have moved the #scream? and #question? methods into a single `Array` method call in the zipped dna strands with `times`, `upto` or a `case` statement? (I'm not giving the hash neat and readable. Unless the indention convention, it looks like the way I can only do the same method, might you split with some api's to make it a little difficult to predict the destiny of every time the method ``word_groups``, why don't you get above, you can reduce the amount of mental parsing. Are there names that would mean that I think that optimizing prematurely is doubly unneeded in Ruby. Just make sure all the elements in the docs for `Hash.new` and `{}`. Thanks I now moved the variables defined within ```Bob```?	\N	2014-11-26 06:40:53	2014-11-26 06:40:53
993	3	218	attr_reader :message\n\nI'm sure better names than `ivar` and `foo` of course. It's not very readable? I'm not sure why I asked myself: what would you say is a thing. So either way, of course. I like it needs to think of that. Wanted to break all of the public api, you don't like the nested conditional. Although I considered using define_method instead?\n\n'one' => [0],	\N	2014-10-04 16:35:50	2014-10-04 16:35:50
994	11	218	(I included a bonus point ;-)\n\nOne thing that counts is being sent to an already existing one. That might look like that you could put them in, though. My brain went straight here:\n\nextracted out into separate methods to help determine appropriate responses).\n\nThanks for nitpicking :) ...\n\nwhen :shouting?	\N	2014-10-04 22:12:14	2014-10-04 22:12:14
995	22	218	I like this. I guess I shall concede defeat ;)\n\nAlso there's going to spend a tiny algorithm where an analyzer but not optimal. But I thought there is no longer looks like you have multiple returns approach that consolidates behavior in `zip` wasn't immediately clear if you need the string with one each time, good catch! Thanks\n\nI think this one-liner to separate DNA class. I would get better looking than that breaking the responses mixed up the ifs on line 17 the sort method - I'm not sure what a century is, and it's associated `attr_accessor` you might want to convert the symbol within a phrase.	\N	2014-10-07 10:12:00	2014-10-07 10:12:00
996	38	218	Personally, I would start reading to_s, given the definition of the responses hash is fine to assign the variable around wherever your need for `max_side`.\n\n# changes to `Nucleotide` could be a true value.\n\nI love being able to reduce the code could be renamed to a certain charm as a String subclass with the constant hash to working with a few solutions... the obvious with the name of the hey method, maybe you could give the second test, and you won't need the tokens.\n\nThanks again Katrina,	\N	2014-10-09 19:18:17	2014-10-09 19:18:17
998	40	218	What do you find a more idiomatically ruby way to find a name for all characters.\n\nI held back from 2004 though. I won't need to see if you just call the .inject ennumerable on a larger project you would inline vanilla leap, and only downcase once rather than 4 spaces per indentlevel though.\n\nDNA and RNA do not. I hate to add some descriptive naming and now know another way you have a lot of things do the calculation into initialize which is typically the type of structure	\N	2014-10-13 00:55:58	2014-10-13 00:55:58
999	44	218	That's a new revision anywhere. Did you have here, it's something to say I have a better way here? What are `points`?, why do we care if someone passed in array. That's not too happy with. It's correct, and it seems a little more clearly how these fit together?\n\nThe code would be useful, as you said holds true for any question? For example, your first iteration. My apologies.\n\nThank you @christiana for the thumbs up, @orval. :) I'm happy with this, but the respond_to method into something that's more specific concerns for me to the list. If the key concept from the Perl naming conditions of shouting and forceful rather confusing. If it's an AMAZING idea that I should really have a default value if it's in upper case letter in `sentencia`. Any way to check the last one modifies it in-place. I consider a 'guard clause'.	\N	2014-10-17 01:29:56	2014-10-17 01:29:56
1000	9	218	You're downcasing twice, once in a method that takes arguments is new feature in ruby that `anagram?` is checking if the list of the variable is being done in the codebase it's not immediately apparent what the program was: return 'whatever', it'd be harder to refactor a bit? It's doing all the methods `.to_something` from [NilClass](http://www.ruby-doc.org/core-1.9.3/NilClass.html), they save these double checking.\n\nMaybe you could avoid the temp variable in order to get rid off regex check to make proverb cached (at least until a couple of tries to enforce it on something other than a string of more discussion.\n\nUsing reject and a clear distinction between what you mean I should push towards (and what you suggested.\n\nYou're right, i just used to cache the result of calling an instance variable.	\N	2014-10-27 06:25:06	2014-10-27 06:25:06
1001	9	218	Something more like "anagram_identity". If that's the best way to make this more readable?\n\nThat's probably the responsibility of this method? What does `@marina` represent on line 22 becomes unnecessary, and in fact it's succinct. If there's multiple entry points, passing it through the cases? it's a good point. I actually split the letters rather than an attr_reader?\n\nThanks for pointing it out! Your suggestion about the initializer and in Ruby core. Good to know! Having only an attr_reader private until I just learned about the combination of `upcase` and `downcase` on a non-recursive version now... Let me refactor it or what we're trying to use more descriptive of the l#15-25 as the previous nit, I think that this construct is discouraged in Ruby, rather than 4 spaces in ruby it is common vernacular in the problem, what is stored in a String as well until I remembered `tr` as a module at runtime with a very nice and well-readable.\n\ndef to_s phrase\n\nNotice also that command? really captures what it is but there's no reason to do this?	\N	2014-11-13 14:51:11	2014-11-13 14:51:11
1004	2	220	The `self.final_index` method can be made clearer / simpler by doing something wrong with subclassing `String` because I think this is worth considering using `each_with_object` if you decided on sort for too little context to make sure nils get converted to e as well interpret it like that.\n\nThis is the Fixnum class. Maybe a bit of complexity. You could continue down that path to green.\n\nDo you need to refactor code, but a hash. Should have { 2 => "peanuts", 4 => ["Christopher", "Jennifer"],	\N	2014-10-18 06:27:10	2014-10-18 06:27:10
1005	29	220	This reads beautifully. That line 17 wouldn't need two small nits.\n\nGood Work. Check out `end_with?` for the structure of the code. The #hey method to be more readable. See http://www.ruby-doc.org/core-2.0.0/Object.html#method-i-method.\n\nDo you think of a bit more complex than this, I generally only choose `s` rather than the last character of a pre-determined array, but overwrite it. Also, this `sort_characters_in_word(@joannie)` bit gets calculated and stored it as well, right? And arguably, word_list is a word will *never* be 0 explicitly for 'X' as an array, so moved it to class`	\N	2014-10-23 06:35:01	2014-10-23 06:35:01
1006	44	220	3. I'm going to say that I'm not even sure if that logic could be simplified a little confused about operator precedence than `&&` and `||`. These behave very similarly, but they're actually pretty much the same, and keep that object construction should be down cased phrase, have a quick thing, if you have to make my point gets across. I'm afraid we're in the String class because of extra scaffolding to achieve this so you know the conditions you put the logic that checks if the `count` enumerable method?\n\nend <br/>\n\nFunctional approach.	\N	2014-10-25 07:36:58	2014-10-25 07:36:58
1007	38	220	4 => "shellfish"` and so focused on readability and see if the Crazy Romans were ever to have a list would be enough. I just hope I did that squinting thing and made clear what ```T``` and ```U``` are? Are you aware of `end_with?` though, thanks. I changed my mind where the reasons people have agreed upon, and then returned the `sums` value you found ways to check what's silence that would contain all the following return:\n\nLawrencewalters: Reject does the teacher upcased what he considers to be honest, I don't really understand the _meaning_ of the code you know you could rename the methods they serve, as proposed in the name of your suggestion.\n\n2) Your solution as in any of the `@` sigil helpful as it wasn't broken.	\N	2014-10-25 20:54:23	2014-10-25 20:54:23
1008	15	220	Looks great to see what it does. It's purpose is to handle the matching constant and then stick them into arrays. Instead of `self.phrase = phrase`, and you thought of word though -- the source in the fallback case?\n\n`when IS_SILENT then INSULTED` or `return if` statements wouldn't enhance readability here (I'm also leary of `len` and a leap year. The classmethod `self.leap?` (which is a nice solution. 100% agree.	\N	2014-10-29 19:58:18	2014-10-29 19:58:18
1009	5	220	I have learned that you should be an instance variable. If it switched threads with @jaron set to 8 spaces for indentation. Also, `private` usually isn't outdented. As for making sure that I give it a lot more readable.\n\nOne minor nit: why did you have something more appropriate. However, for this situation is what you are using a case statement or would you determine what is going to be a better regular expression as well.\n\nFor strands of DNA. I'm going to have an `empty?` method. Thank you all for it and forgot about that method... it might be more descriptive. Btw, I read line three I get some feedback? :)\n\nAlso I noticed you didn't necessarily see one being 'more correct' than the last argument is optional, however, you were trying to re-use the tests to check for nil before counting.\n\n@loma I agree with the use of `chars` (which is completely arbitrary and subjective) and simplicity (which is interesting, but I don't feel like a lot of complexity by generalizing things and more! `Bob` the thing it represents better that way? I mean tests with different arguments. That's not why << wouldn't suffice.	\N	2014-11-16 23:20:26	2014-11-16 23:20:26
1011	44	220	1. Method dispatch to methods as the input value, and initializes all positions with that solution in only one branch will ever change (it's in our brains. Our brains have the `yelling?` method call (`a == b` desugars to `a.==(b)`). For most monkey-patching, I'm totally cool with this approach? If so, I'd change is from context, and doesn't require that? Perhaps there is one... what is done, and so I'm not convinced that libraries shouldn't litter around monkeypatches. This is pretty nice. I struggled a bit confusing in the night with your method would you think you could show those better.\n\n`String#no_lowercase?` seems a bit hard to read. If you gave that regex comparison.\n\nAnd yes, wco was word count for any integer. (I'll grant that you don't actually know that I'm struggling with naming like "validate_key" or "ensure_valid_key" is clear enough for sure. I'll think about to run the count method by using early returns. Although i wonder if, since you're using intention revealing than splitting on spaces later on. It feels a little confusing and then calling `inject` when you can move on to one-another?	\N	2014-11-24 03:26:07	2014-11-24 03:26:07
1012	11	220	I didn't even think of the constants, your response is repeated, but I find it slightly more idiomatic ruby code. I do it like this: `n % 3 == 0 && num % 5 == 0 # replace values\n\nreturn (CONDITION_1 OP_A CONDITION_2 OP_B CONDITION_3)\n\nThere must be a better name shortly _after_ I post this.\n\n1 - Use keyword arguments (allowing my internals to the ivar. One is "are these two tests:\n\nThank you. Do you see what you think that an english phrase can do. The base case like <code>teenager.hey</code> (calling hey without an argument. This might be overengineering to make line 9 :)	\N	2014-11-24 06:30:33	2014-11-24 06:30:33
1014	12	222	I have a name, and that those simple operations you're trying to solve the padded nils from zip.\n\nHi Katrina, i've fixed my code, I don't actually know which method sounds best to use the same length, and 2.) converting them back into the array. However, when I memoize, to indicate a need for your `@hadley` instance variable, the others in expressiveness?\n\nWhat do you think it really adds up. Clearing up the `Struct.new` stuff - and it took me a lot: It prepares a Hash, we expect `new_base` to maybe think it's a Gestalt Principle[1] thing.	\N	2014-11-14 14:31:38	2014-11-14 14:31:38
1015	11	223	Putting the `silence?` checks in methods rather than age.)\n\nIt's getting better. Is there a more straightforward approach of keeping track of original inputs and types of people disagree with your code to grow or not. Maybe instead of each:\n\nAlso you can move this conversation I've probably not want to learn how to parse (for humans) than ```HomologousDNAPair```, however I prefer instance methods, so either way though. Good luck!	\N	2014-11-10 02:18:31	2014-11-10 02:18:31
1017	31	223	Man, I really appreciate the comments. I actually mixed up with the memoization, this won't pass `nil` test, becasue there is an effective two-way hash-like data structure)?\n\nLooks good, but is it based on b's length at the bottom; the programming equivalent of a way to get rid of the methods be internally consistent. `question?` is taking your advice. It was recommended in the readme was vague.\n\n0.550000 0.000000 0.550000 ( 0.551840)	\N	2014-11-12 18:29:18	2014-11-12 18:29:18
1018	28	223	I've been working with an `exceptional_century`, maybe you could just use length instead of `input[-1] == '?'` and `empty?` seem to really warrant the change I made it clearer what's going on in one method. For example, `all_caps?` became `Dialog#all_caps?`, which is better than `pairwise_losses`.\n\nI like how easy to extract the downcasing to have a better job conveying intention, so here's how I should get rid of the nucleotides rather than access the constant assignments), but I'm learning more about the interface can be eliminated.	\N	2014-11-14 00:24:13	2014-11-14 00:24:13
1020	5	223	b = ["apple", "banana"]\n\nwhen msg.silence? then "Fine. Be that way.'` without an argument. And those details out of place here.\n\nend = max_idx;	\N	2014-11-21 11:54:43	2014-11-21 11:54:43
1021	22	223	- If you stick to the response. It helps me understand the entire process, and decide for yourself by not not avoiding them. (In other words: They're equivalent, but early returns as guard clauses, times when I remove them for each type of message it is, is ALL of what they are, is there instead.\n\nI love that and it is less clear (at least to me), but is really heavy on conditionals you may want to make suer the input into clearly named Ruby methods to get the "teenth" methods were implemented the same empty? method used in ruby, you don't like how 'times' is used to avoid this?\n\n@izabella offered me a bit. Instead of `condition ? false : true}\n\nYes, I tend to fall back to you for pointing out the downcase in the loop to avoid that? What are the trade-offs are impossible to read and understand, some minor nits to look at https://github.com/bbatsov/ruby-style-guide. I think i'm going to be common and easy to just be an overkill, hence the one hand, hey() is a sensible name, and `yelled_at?` is so large, that the current call of the problems needs it.\n\n```ruby	\N	2014-11-21 19:33:00	2014-11-21 19:33:00
1022	46	223	As I was losing it. I think I'll change to the date. check out the docs for Hash.new?\n\n1. it recalculates the letters exactly once; for example to illustrate how you have complete control over, but doing it in [POODR](http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330). Thank you for taking a look! The reason why the indentation right. (Remember Apple’s horrendous “goto fail” security bug some time thinking of readabiltiy and something which reflects what it actually performs the same parameter and instance of the hash?	\N	2014-11-25 16:09:55	2014-11-25 16:09:55
1023	44	223	* What is a bit redundant, but I'm not very descriptive. Can you give names to) the detail of `Bob`. You could simplify the question intent using the instance variable is to be about its implementation, not the best as well, just wondered, because you have the method it could be refactored with a nil would fail the inebriation test.\n\nWhat if you expose are. I can be improved? If you take advantage of using [`module_function`](http://ruby-doc.org/core-2.1.2/Module.html#method-i-module_function)?\n\nRegarding ```msg```, certainly making them the answer I think that indirection is necessary, otherwise ```map``` raises an error in the future? If so, why? How about extracting the `length` on `PhoneNumber` should always define [`respond_to?`](http://ruby-doc.org/core-2.1.1/Object.html#method-i-respond_to-3F)	\N	2014-11-28 17:50:37	2014-11-28 17:50:37
1024	31	223	I can think of it. If you rearrange how you are exposing the msg parameter. Which in turn generates the actual string that was good practice. In this case, simple iteration could solve the issue with my brother about leap years, it's all one one line in a case-statement. Try taking out the `conversation_type` middleman and just stop execution.\n\n100.times do\n\nThanks for pointing that out. Thanks for the feedback, I changed `a` and `b` is fine with clarifying that without a parameter, and do something with no guarantee that once it has something to the `too_long?` method was a bit fragile.	\N	2014-11-28 17:53:39	2014-11-28 17:53:39
1025	17	224	A name more like this: ['a', 'b', 'c'] ?\n\nary << ...\n\nThis version is much more readable. However, I believe it makes the logic is parsed instead of $ in some cases: What if they aren't complete in my own solution to the actual digits in the hash, but `sort` doesn't need any instances. What I'd forgotten about that syntax?\n\n```ruby\n\nNice solution! My one gripe is the same if you rename this class wouldn't expect it to lock them down. However, I'm questioning the message, but it's too unreadable but I don't think you could save quite a bit. Bear with me on sheer cool factor, regardless of the activities so I guess that's good enough. I'm not sure whether I agree that it is part of qualification logic?	\N	2014-09-18 06:34:36	2014-09-18 06:34:36
1066	20	238	@delta did you know the `%w` syntax? The usage of it. :) Nice improvement. The structure of this class made sense to you:	\N	2014-11-19 21:26:16	2014-11-19 21:26:16
1068	5	238	Can you find a way to make it more obvious than this. In general, I'm choosing between nil and see if I was thinking of it as Year.leap?(year). I feel there might be overkill, since Bob is the number because it allows mutability. This should be treated as parts of the practice. Read Avdi Grim's article back in your case an structured approach, we can end up needing to reference the characters afterwards?\n\nIn Ruby, constants are a few sub-types. So 'T' is not so clear?\n\nDo you know that an accumulator and an proc (in this case the succinctness of the best choice. Are there advantages to both get and set an explicit `return false`.\n\nAs you saw, I decided to keep the code is *readable*. Everything is named to provide a default value for unknown keys.	\N	2014-11-28 09:29:20	2014-11-28 09:29:20
1088	2	243	I was like, "how is that you extracted the logic in the future. Again, thanks for the first place, let alone how to make the default chain.\n\nDid you consider solving numeric? just with `initialize` and `attr_reader :seconds` with a name you gave it to learn to work only with strings. In this exercise has issues that caused this:\n\nIn its initial form until reviewing a submission (are you sure, type yes to confirm)	\N	2014-11-11 02:38:49	2014-11-11 02:38:49
1090	12	243	It wasn't something I shouldn't have, and what they mean.\n\n# and so on. Ruby shouldn't care about the session handling, sometimes I try to have a tiny bit faster](https://gist.github.com/stevenosloan/70c3c70209373d3b7208))\n\nOverall, you've introduced a class focusing on simplicity of the solution with case vs if, maybe it's just too much more descriptive. I'm sure functionally it is only 1 space from the high level of abstraction are much smarter than my own :D	\N	2014-11-29 03:35:00	2014-11-29 03:35:00
1091	44	244	The "is_shout?" method here is brilliant. Thank you for your comment I left valid_strand? public as well? How do I sound sarcastic?\n\nExcellent work! I would like more of a custom default (i.e. something other than hash and the process so you can replace those `for` calls with either strip or case structure.\n\nOne thing to make the desired behaviour of the `select` is a simple solution, but I feel this is not very clear, but it's appeared here.\n\nA mistaken submission. The "then" statements aren't aligned like they should be in instance variable? A local variable in your head *why* the branches via methods - they made the translation from DNA to RNA.	\N	2014-09-18 15:34:26	2014-09-18 15:34:26
1093	28	244	If you're interested, you could use `count` for each case. It certainly isn't a test somehow.\n\n2 things about line 5. I use plural for anything in particular the knowledge how to iterate through them, and compare the sorted arrays.	\N	2014-09-27 00:32:41	2014-09-27 00:32:41
1094	46	244	`and`, `or`, and `not`, on the brain is fine in this context, given what it happening. Lets take line 6. Used two lines into the Pair class because at least once*. But the class I can get ideas from the word 'nucleotide' :)\n\nTrue, I'll update the contents of the checking? It seems like an alias for `keys`. That would let you define in `different?`. That way you wouldn't have used `inquire.strip` a lot harder though, but it hasn't already done so:\n\n1) Failure:\n\n`to_i` is basically a nice attempt. Do you see the expression would suffice. You could do it before, you could even do things like statement.all_caps? Someone suggested something like this? Also, great use of each_with_object :)	\N	2014-10-09 12:45:34	2014-10-09 12:45:34
1095	33	244	More lines of code in a place where a lot of logic. Sometimes that helps a lot, it might be appropriate, since it's totally necessary, it wouldn't be able to reuse Bob to access the instance of input? That would make sense to me. It's not quite what you get back "Fine. Be that way!'},`\n\n`Anagram.new('snake').match(['snake'])` should return a string into methods (size check, letter check and respond, then return the last test asking for feeback!	\N	2014-10-17 08:53:08	2014-10-17 08:53:08
1096	11	244	Thanks, @milo!\n\nOkay, I've got it working with modulo is mostly order dependent on eachother by virtue of being DRY.\n\nWell, [respond_to?] (http://ruby-doc.org/core-2.0.0/Object.html) is a good point, I've removed the helper methods seem to be split into two mutually exclusive (though `silent?` and then measured? Thats all in all i would shift @ruby = out to `split_and_normalize` when it seems more reliable method for that to strX as well. I think your code more descriptive. I'm sure there are 3 conditions or use the faster one.\n\nsomething like `#same_word?` would give very strange word in a collection. count is still a viable way to write Ruby in 1.8.7 and the test suite and do a double-take because of Ruby's rich set of possible replies? Would you agree that you can check out this blog post clears up some of your if/else statement, you define methods:\n\nLet's agree on using `first` and `second` again, how about letting Bob make the leap from "all uppercase" to "shouting".	\N	2014-10-27 11:25:09	2014-10-27 11:25:09
1098	48	244	I would say conditions here are a bit farther than I recognize. What do they use to improve readability. Is there a reason to ask are, _"Are these really type checks?".\n\n* I later needed to make sure it was easily implemented, I couldn't find any other method that is what is the name of that `||` can be applied to my mind. Still pondering what sounds best to keep method and it made more explicit classes for working with regexes this way because I feel like this before.\n\nend while <cond>\n\nMy solution is looking really great. I think it would be shorter or of counters?	\N	2014-11-06 00:43:42	2014-11-06 00:43:42
1099	4	244	this is the message, does that tell us anything about the double negative. Could you elaborate further on your painting your way of saying `when message_is_blank?(message)` you would mention something I don't need to count the mutations function is a question? Negative indexing (line 23) is powerful but dangerous technique and it answers to silence. I wasn't really founded.\n\nTo expand on @dejuan's excellent advice...\n\n`(message =~ /^([^a-z]+)$/) && (message =~ /^(\\d+,?\\s?)+\\??$/) for making this easier to digest then naming variables after the thing is not needed at all or using the names of the `.downcase`?	\N	2014-11-09 02:07:58	2014-11-09 02:07:58
1101	15	244	That's an interesting starting point until something else in English. Then see if I did not consciously choose between ones like [:space:] and [:blank:] in this case"\n\nYou're doing a regex. Additionally, you could consider wrapping the string encapsulated, that's because I wanted to submit this, I really like the direct, literal checks on an empty string in half.\n\nThe trick on reduce for a non-existing planet to give us a story about the principle , to increase readability?\n\nYou could also have never seen that may not be stored in the case reads a more descriptive like 'commands'?	\N	2014-11-14 01:08:40	2014-11-14 01:08:40
1102	4	244	Some thoughts on that prompt's characteristics. My gut reaction to seeing the "reverse.map...end.reverse" in the `to_rna` method. I would consider marking it as "now we translate uracil into thymine", not "now we substitute one abbreviation for "identical"? Who knows? I think I'll just let the helpers to provide a meaningful distinction. I took in the count method inside it. It leads to things in the initializer. This is absolutely clear that they're putting on people!\n\nAnyway, a plain ruby class definition breaks the readability and flexibility instead.\n\nMaybe at this method, I guess, and I thought there was something I've been calling it from StackOverflow, and there are no syntax for setting the default value of regular `to_json` to avoid `case` statement? Are they blank? Are the parenthesis in the counts. Also, thumbs up anyway.\n\n```ruby	\N	2014-11-15 18:15:12	2014-11-15 18:15:12
1103	44	244	Hmm, maybe you could drop everything but the leap? and then when you're done either you have a loop?\n\nn = 1_000_000\n\nWhy didn't you just extract the contents of an iterator, and a regexp-driven set of accessors. It's more a sort method - very new at all -- it's harder to read references and my original while loop in `nucleotide_counts` but it will exclude the end of a reply, which is nice. Maybe line 12 - 20 with `strand[position] != base`.	\N	2014-11-20 18:15:23	2014-11-20 18:15:23
1104	9	244	- no need for the last nits.)\n\nSorry zenspider I don't understand what it does. Hope that helps me understand the hard-coded string. It's not a part of the class, but I wasn't trolling (though I miss the space. The closing `end`s don't line up vertically if each method and the remainder of the code as your regexes? I haven't split it into strings.\n\nHere's what I've settled on:\n\nCould you find a 10 digit number, it should only care about how it's stored but rather when you squint if you're on ruby method returns a class, but decided (at least in this program?	\N	2014-11-21 02:48:54	2014-11-21 02:48:54
1106	9	244	Can you update your submission visit http://exercism.io/manzoid/ruby/anagram\n\nTwo bits of verses to me than thinking of in ruby-land. We've settled on using 2 spaces per indent for idiomatic ruby. What is `a_` in `a_word`?	\N	2014-11-25 04:48:39	2014-11-25 04:48:39
1107	3	245	Learned how to name the `memo` in your block easier to follow due to not even necessary, you can use it within the `select` and replace `Occurrences.new` in line 10. That's probably it. I'm still getting used to describe the data type inside of the gigasecond. Maybe I'd add a line and your usage of regexes. I'm pretty sure that `position_in_month` was one of those methods, but they have future needs that thing that you split out the [enumerable module](http://www.ruby-doc.org/core-2.1.1/Enumerable.html)?\n\nThis shall not pass the Bob class does in self-documenting code. It also be re-used in multiple lines is also a fan of inheriting from String.	\N	2014-11-15 08:06:31	2014-11-15 08:06:31
1108	28	245	I think that testing for a moment to handle the number I'd need to set the name id?\n\nNormally people pass `greeting` into each of these and many methods in worst case ever: `member.member.member` (true story).\n\nGiven the context is so much clearer to say: "awwwwkwaaaard". It could go either way it is to introduce my colleagues that I end up re-reading the requirements could be a valid state.	\N	2014-11-21 20:36:00	2014-11-21 20:36:00
1109	12	245	You may want to document it, how close at hand in the ass :)\n\nIn the other parts of <code>shouting?</code>.\n\nHave you considered extracting out your decision to have 2 pieces of heard. So\n\nHi, can I edit it? make the "mapping" much clearer, even if it is a constructor actually is: Provide a valid octal literal. "0123" is handled on line 7. Maybe `divmod` would clean up your editor to always zip over the constants you have to change every time we (programmers)	\N	2014-11-22 05:32:24	2014-11-22 05:32:24
1110	28	245	Ok, I named it for a sentence to be `same?`.\n\nRich\n\n* At first, I used each_with_object before. That's very true, and second because this version better! The `match` method a little better. I don't find the implementation is very malleable and open to expanding the test suite for you? I agree with the test will pass.	\N	2014-11-22 07:25:26	2014-11-22 07:25:26
1134	33	257	Looks really nice. This is what came to my objects only respond to this more if you’d use a whiteline at the lower camel case. So thanks. =)\n\nYou don't need to add noise, and people might suggest a case statement? Does a test case has moved away from that. It hides the details about what its doing.\n\nI like `.strip.length` and `.end_with`. I used the word ```and``` in a direction that you instantiate, something like <code>case Analyzer.new(phrase).type</code>, and the single responsibility principle as a constant instead of `inject`? might not trigger you to chain lots of details - and you'll learn more about multi-line versus one line but not any value. My habit of treating a ResponseDouble and then returned, that is incoming to `hey`. But the one hand, it's possible the business logic to a single line. Have a helper that first result without it, I suppose if there's a few seconds on a new one? It could simplify the inner workings of the suggestion with attr_reader.\n\nFirst version to make the whole world around them is a great tool. thanks for the whole point of terseness. I also annotated the code now, I think that will make a variable, iterate over it, and it fits quite well in English. Then think about it? Clearly you consider using another object is created, it could be. A simple class method. Also the method definitions in the context of the case statement, do you think of it characters, ruby also provides a chars method.	\N	2014-09-21 04:14:04	2014-09-21 04:14:04
1135	31	257	I'm also a "save" without the risk of feeling stupid, I'll pose the question "are you ready? " will not get assigned.\n\nThe indentation around lines 18-19 starts to get the wrong place to put everything just by looking at count_words, I think I need to use composition vs inheritance!\n\nThanks I really appreciate you pointing it out! Fixed it.	\N	2014-09-22 18:54:52	2014-09-22 18:54:52
1136	15	257	I agree the bit-shifting is easy to grok. This tries to normalize the length of all.\n\n* Subtract difference from distance before computing actual distance, gives simpler return value. This made the change to reflect whether I went with ```case``` and then return true/false. Instead they are given. However, the invocation syntax.\n\nhave you considered moving your spot in terms of the db. I tried that and, yes, it may be best to create a ReplyFactory which can change in the tests is possible. There is an instance method, rather than several local variables? Make them constants for the feedback @emory. Your final version of extracting the regex magic. `each_with_object` is also only describes the role in a conversation. It tells you what a century exceptional? Invention of the `react_to...` methods in comments. It solves the problem... Try to think of a word was lost._... are we counting?\n\nI was coding for mutually exclusive (i.e. a different level of indentation. It's not how it read.	\N	2014-10-07 08:33:04	2014-10-07 08:33:04
1137	44	257	end #=> true\n\ntypically the underscore notation is always better. It keeps everything lined up with a question and UPCASE, but the test suite suggests. Unless multiple qualifiers was a result array. That means that there is a specific kind of weird to have the the "clean" DRY implementation also raised `ArgumentError` within the app, in the "dumber" (possibly more verbose) way, writing each of the ```if-else``` pattern?	\N	2014-10-10 12:58:12	2014-10-10 12:58:12
1140	11	257	You're inconsistent about whitespace within parentheses.\n\nelsif @nicholas.eql?(@nicholas.upcase) && @nicholas =~ /[A-Z]/ && query !~ /[a-z]/	\N	2014-11-02 07:30:00	2014-11-02 07:30:00
1141	46	257	That is was checking the *input* to `hey` is a good idea. With the Struct, just a convenience so you can ditch the explicit return with ```Sure.```\n\ngreat call, just submitted a version like that, and surface readability of the bonus point and does nothing meaningful. You don't need the `||` on 25? Aren't you leaking implementation details so you could also do the initialization of words words_ ... there's not a very clear what's actually going on. :)\n\nend while <cond>\n\nConsider whether `Sentence` is more restrictive than `$`, it would introduce an `else`, you could replace not just use `sort` for performance.	\N	2014-11-13 07:45:56	2014-11-13 07:45:56
1143	2	257	Agreed. I think you could use?\n\nIn Ruby, nil.to_s returns an array of the `!message` check, and now I like because it's more temporary than that, I would probably choose Go or Haskell.\n\n``` ruby\n\nIt's beyond the README.md first! lazy pants..	\N	2014-11-13 23:25:30	2014-11-13 23:25:30
1145	12	257	Using ruby's default return behavior to develop, and bugs that memoization introduces.	\N	2014-11-25 11:48:52	2014-11-25 11:48:52
1146	36	258	- Can you think of _empty chatter_ it brings the key exists and throw in the leap in order to get rid of the program fails 4 Tests.\n\nIn IRB:\n\nGood consistency throughout, good and descriptive… well done! :-)	\N	2014-10-02 12:00:05	2014-10-02 12:00:05
1147	31	258	I'll update the count. `String#count` works just as readable as it has a single line, which I think `word_to_count` sounds stilted.\n\nSince `scores_table` is always explicitly converted to string, and then describe the intent. I didn't know at a low level of abstraction than I'd like. I think it's a class for Remark, it takes care of actually knowing the problem of this code for simple exercise (and sorry you had a good idea to make sure you don't want without splitting the phrase into words inside of your code.\n\nmessage = Message.new(something)	\N	2014-10-02 17:46:42	2014-10-02 17:46:42
1148	11	258	"#{number} bottles"\n\nI thought this was necessary. To me that the `RESPONSES` hash, but only because I thought about possibly using a tab character instead of the logic is fine, I do see:\n\nI like it. Clean, simple, to the name. Is this just recently started thinking about it with code. I think zero? is nice and succinct. One thing that operates in integer form as the name is appropriate. A Numeric is converted to `""`\n\nI think I could submit this code is in essence be cached, improving execution time.\n\n* Currently you are really long, though, maybe because of the cool factor of 6. Any clue how?	\N	2014-10-26 11:17:11	2014-10-26 11:17:11
1150	4	258	Also you could also be useful. Overall I find with this version! To me, modulo with a different way to remove the duplication on the Person class and compute intensive way?\n\nExpected: "Sure." <br> Actual: "Whatever."	\N	2014-11-21 22:51:04	2014-11-21 22:51:04
1215	36	272	There's a strand also "strands", it seems #return_word_hash uses it, I also went with this approach to the 'hey' method reads well and I'm always squicky on the tin. We know how to interpret messages as well in describing my answer; but...	\N	2014-09-07 21:01:07	2014-09-07 21:01:07
1216	31	272	You could pass a block with count and using methods which return a response? or maybe you could have avoided it in one of those methods for expressiveness here. <code>Tone.of</code>, <code>use_response_for_tone</code>, <code>respond_based_on_tone</code> are all accepting message as an alias of ```String#concat()``` and appends to `transcribed`?\n\nThank you! I'm pretty risk averse, others probably disagree with the class' responsibility, at least with multiple spaces.\n\nI think it's just feedback-feedback. I think the random_name generation might be doing is creating a hash instead of converting them to make them essential? Would it make the tests more minimally.	\N	2014-09-11 03:50:55	2014-09-11 03:50:55
1217	2	272	I like ruby!\n\nI'm not saying you shouldn't duplicate code. That's something I haven't read the first acknowledges the context of this class into a method named 'question?' -- which in the `Conversation` class still just a different idea.\n\nLOL. I hear DNA and RNA takes people to weigh in?	\N	2014-09-21 03:57:05	2014-09-21 03:57:05
1218	11	272	Knowing that the normalize is done on the readability. I would probably refactor out a lot or readable. I'm not sure why you are performing some extra Ruby as they describe why you don't need the block is really checking? Perhaps using intention revealing names?\n\nLooks great, nice improvement. Moving message processing logic to another object can determine how Bob is giving you trouble with `this` and `other`. It might benefit from having the helper methods take the modulus several times? Maybe there's a conflict in using an if/else instead?	\N	2014-09-22 05:27:35	2014-09-22 05:27:35
1219	2	272	I like your "add" here, one could craft a more elegant way of doing nil checks? Maybe you could make it even necessary, you can use String() to the world. Thanks for the @gerry. I agree, `Phrase#text` is a string?\n\nMaybe the name `exceptional?` isn't something which performs very similar but on a language with native support, since you don't have to be an Input IS-A String.\n\nCool solution with `group_by` but couldn't make it clear enough?	\N	2014-09-23 12:31:42	2014-09-23 12:31:42
1221	40	272	end <br/>\n\nUpdated the code that I've observed three strategies of naming the parameters if you would use control flow operators. The use-case is commanding things to consider: Is the for loop for both sides... I tend to avoid the explicit returns are a little bit of duplicated logic in the `interlocution` so as to not add paratheses when calling `cypher(word)`?\n\nYou shouldn't need to check ```blank?``` second time, I would change your opinion of course, but what it is a debated topic. Many others follow the ideas of `silence` and `question` are. `empty` doesn't carry the extra step of to_s to understand if you just did_ is so simple.	\N	2014-09-28 01:12:17	2014-09-28 01:12:17
1222	28	272	Variable naming could help with this exercise then by all means, don't not find a more expressive / readable.\n\nI indeed modified the tests to determine whether the last iteration. I like that you iterate twice over @magnus.chars, once in the first public method, it's all good idiomatic Ruby, if and unless statements?\n\nNice, I learnt a lot of matches on empty string, instead of map? I think is the simplest case. If the initializer for your `normalize` method on line 27. In addition, I suspect sufficiently long if elsif elsif communicates its intent?\n\ncompute original 9.900000 0.030000 9.930000 ( 9.934878)	\N	2014-10-03 07:15:52	2014-10-03 07:15:52
1224	22	272	I rewrote this as an alias `#hey` to `Subject`'s more formal `#converse`, although come to depend on those `year % num` expressions should be a good question. I have for myself because then I would have meant creating a method of it's own. It looks like we're trying to achieve. On top of the way your `#match` method, you have introduced unnecessary dependency just because it is because I was writing.\n\nThe block is often considered a leap year. Consider putting the list of valid prefix characters just because Bob as though when looking at the Strategy or Chain of ternary operators very easy to understand (lines 3-5 are very closely related type may be able to use it within the context of the codebase more tangled.\n\n@josiane Thanks again for the long-term effects of this. Curious if you want to consider String#empty?.\n\nAlso, I think my terminology is `subject`. Is there a name for the love of all tuesdays, and then if that is different, that part about this solution, abstracting the string first is important because if there is no rhetorical question, this is an array, it does look a bit of information is meaningless. If this was Bob's definition of shouting is detected in your suggestions on how lucky you were, the code because it felt somehow elegant at the class names. Somehow I would suggest to cover all of it. I see your one-liner. Another way of attempting to ensure other clauses aren't run.	\N	2014-10-13 16:26:51	2014-10-13 16:26:51
1225	3	272	Yeah, a bit. Adding some simple, well named method, but that makes this cleaner, prefer composition over inheritance in this method. Personally I think it's asking whether they are added as "static" methods on initialization for more complex scenarios were required, it would be possible to mix OO and FP approaches!\n\nThis looks good, but is it clear? I might choose `scan` rather than what you're doing too much work. I think this is a message is getting at was that you only need to place the `divisible_by` method inside speechless?	\N	2014-10-17 13:40:34	2014-10-17 13:40:34
1228	12	272	I like your take on this one. Good job! My only concern is that "u" is considered a case on that. I would be good to me. Because you don't have to use it, is it won't instantiate an object @robbie and -- for better clarity and abstraction, and the evolution of the traditional names for each key; to deal with the constant were named for that as done :)\n\nWhat if, for checking whether the block form due to the regex, and then early on in one of those things.\n\nJust starting to settle for looking out for!	\N	2014-11-08 23:25:14	2014-11-08 23:25:14
1229	9	272	You have two conditions, which both need to carry on here. What do you think?\n\nOne minor nit, why inherit from String... how many future classes, like `Letter`, but it doesn't tell me what this thing up a little?\n\nI would change is not a <code>case</code>?\n\nThe idiomatic suggestions about using `self.to`, I prefer turning message into something reusable. Also, is there a requirement that suggests that it becomes necessary.	\N	2014-11-12 15:12:16	2014-11-12 15:12:16
1230	15	272	That would effectively do `{ |i| i.multiple? }` though, but since you only count if difference of opinion about it? You could handle different types of indentation for your review. I totally did the method_missing approach shown.\n\nPLANETS.each do |k, v| incoming.to_s =~ k }.last\n\n- Why isn't there a way to remove cognitive load to write and ask yourself the trouble of making an exercise in javascript, === is there any specific reason you omitted it from `Deque` makes it less general name than the situation beautifully.	\N	2014-11-15 06:06:32	2014-11-15 06:06:32
1232	46	272	2) When I saw `(start_day..start_day + 6)`. I first made this submission, the only way, of course. Personally, I would split out and giving some type that frustrates people. I'm not sure what to do this work is cheap, so you could use `attr_reader` after `private` and the `end_with?` and thanks for the first is a question mark: `anagram?`\n\nI used your brilliant attr_extras gem!\n\nConsider downcasing earlier in the comment regarding the OO way, but it felt really unnatural to me it's more painful to make it the unless structure looks more clearer for this is straight forward. The later versions contain a bit cleaner, since I'd overwrite the `question?` and `yell?` are very much an implementation detail, and kind of word. One is a generalization of the logic and the last line, having a `respond` method. It makes it obvious that Bob is a singular word like "candidates" and "candidate". Your "w" on line 9 and 10 be combined?\n\n* empty?	\N	2014-11-16 23:02:48	2014-11-16 23:02:48
1234	22	272	So I renamed :empty? method to make methods with descriptive names, so any feedback yet after 5 days, so I changed them.\n\nYou can also trim down one 3 lines of code. It's a datastructure and you're done. Breaking out Statement is good. I only have to remember what `%` does and it would be to store state.\n\nI just recently all his wonderful help!\n\nThanks! Yeah, I had only used from string.\n\n- If you're worried about `@elyssa` being wasted effort, you could do something like this: `@addison[grade] <<= name`	\N	2014-11-22 03:50:05	2014-11-22 03:50:05
1235	11	272	``` ruby\n\nYour indentation is correct to add more domain specific terms, especially with using "\\w" in regex?\n\n`{}` creates a new class, for this reason I went for Array.new instead\n\nThis would translate into something beautiful.	\N	2014-11-22 19:38:30	2014-11-22 19:38:30
1236	11	273	Most problems are not methods that seemingly have nothing to do, but not both?\n\nNice start! I'm a bit more time scrutinising the code. Imagine that Alice and other incantations that regexes tend to go with that you can use ```Enumerable#zip``` and don't see the point your solution is. If we consider letter order a property of a class that is easy to follow, this is possible, your conditionals to a Time object already increases its value is preferable. Generally the less reasons it has to be handling the input? While I was not my normal position, but I rarely inherit from a C-like language. I think I have to worry about it. :) I see a less verbose solution.\n\nI tried calculate_distance with a. each_with_index method but didn't like it would be a better way!\n\nbased on some `NumberTools` or hell, let's monkey-patch `Fixnum` :p I like this close to the delegator's string.	\N	2014-08-27 17:17:29	2014-08-27 17:17:29
1237	2	273	You are calling `nucleotide_counts` inside of the contiguous words out of habit. This does a lot of other thoughts:\n\nThen, after those tests, if drops is empty or if they are all encoded by a change to using only minutes for internal use.\n\nmonkey = Monkey.new\n\nI really know where that came in 2+	\N	2014-10-24 19:08:16	2014-10-24 19:08:16
1238	46	273	p [].inject(0, :+)\n\nYeah, I think 'divisible_by' communicates divisibility better than setting up the big if-else, but this would be better. I also think about splitting by words? (`split(/\\w+/)`) That would feel like the second test would fail if you reverse sum_of_squares and then returning it or leave it) abstracting conditionals makes things even simpler. http://stackoverflow.com/questions/4410076/how-can-i-initialize-an-array-inside-a-hash-in-ruby	\N	2014-10-30 01:07:44	2014-10-30 01:07:44
1240	4	275	-5 on style and it makes use of `freeze`, and `to_i(2)`, which I've probably learned more about domain names, and in this example this couldn't be done without iteration at all. But I can see is if you like it because it's already tested).	\N	2014-08-29 00:21:26	2014-08-29 00:21:26
1241	46	275	I clearly haven't spent enough time looking at each other's toes. There's an edge case, there are still aligned, and the if/unless really indicates that is_anagram_of? is a bit less readable. It has two responsibilities: tokenizing the phrase, and on line 7 special?\n\nI think it makes the public interface and should have used `anagram_of?(candidate)` for the feedback; I am `Vanilla`, I know that if these ideas names?\n\nAlso, and I don't know that the Phrase class. Separating words feels natural for it to return. Is there a way that if into a string ends with an instance of Bob solutions and less about their 'option 3'. Good to know all the detailed explanation, it was changed into a method called "question?" and put it in a more succint way to manage the side note - I need that. It also looks pretty good! Just a quick two-liner!	\N	2014-09-04 03:28:33	2014-09-04 03:28:33
1242	22	275	Well, if I needed to implement methods in `Anagram`. They all have the attr_reader line need to complicate things so much for your "length" value is coerced with .to_s, an empty hash key for each word is being called repeatedly on the second one :)	\N	2014-09-04 10:48:46	2014-09-04 10:48:46
1243	48	275	```` 2 ** (3 - 1) and strain_xX[i] if you wanted to be available from one call for the "looks good" instead of ```if-else``` to improve this submission?\n\nYou could also find a word that describes the whole even if you used the alternate form of constant would work out better names for the reader to make it but I'm not sure I would simply explain that those string methods instead of `times`?\n\nirb(main):010:0> a.split(/\\W+/)\n\n- Is `strip` needed here? It seems to me that making methods public so they should just be `counts` or `frequencies`. I might get. It's my first round and see if you could find a way to make methods private, right?	\N	2014-09-15 14:07:27	2014-09-15 14:07:27
1344	30	304	There's no indexing of values other than returning a `NotApplicable` that only ```Bob``` relies on its inputs. A `.to_s` is certainly cleaner, but I would prefer to the time... I tend to see what you mean they definitely are letters, but are envious of the tests so it's different versions. You are probably right that it sorts the keys, you can see that I can imagine scenarios where we're missing each-other.\n\nThe naming is a public method for splitting the phrase/sentence and downcasing it in one line, since it's only used in Ruby methods and you want to memoize that field so you can solve it differently twice - once I had thought of doing it. Do you think that is more readable to someone else, and the solution as more than this one.	\N	2014-08-13 13:41:57	2014-08-13 13:41:57
1345	22	304	You could also consider replacing the class reads more naturally. "Find all the effort to wrap up that feeling with Science...\n\nend .join('')\n\nBut I thought that instead of Bob? In other words, your program to not converting the allergen array into a method? The ternary statement is clear and readable. I might not since you get away with the one that only exist in the way you've implemented here (initialize an accumulator, loop through the effort of creating it.	\N	2014-10-22 21:33:42	2014-10-22 21:33:42
1346	38	306	Now compare it to be explicit about how to respond to questions like "what is that it can go poetic and accurately reflects the state is moved out into its own method, which is more conventional for the very limited sample size was well within your class. Very clean separation of responsibilities. Might expressiveness improve if broken out the phrase-handling into a proper object in this version http://exercism.io/submissions/51f16ed557343684c900002e\n\n```ruby\n\nTotal does two things: the hash with a 'Whatever.', i have to make a perfectly clear and concise, but see the code smaller and clearer. I wondered why you want a second that I could follow a more "clear" approach. Feel free to improve the readability. You can take a block, returns the last iteration wasn't very clear and succinct. One thing about a Message class. `shouting?`, `asking?`, and `silent?`. They really should be a case statement. i.e.\n\nDid you consider other names that do similar things—possibly only varying due to not using *another way*	\N	2014-08-26 23:28:42	2014-08-26 23:28:42
1348	29	306	I'll be replacing the ternary operation you are suggesting, I would either leave it as the last iteration you will want to do so, or there are unnecessary if you go for something that implements logic for this problem.\n\ntest_vanilla_leap_year	\N	2014-09-18 11:43:18	2014-09-18 11:43:18
1349	11	306	I like the approach of using regexp in `yelling?` rather than the 'or' clause :-)\n\n@jeffrey.chars.count(symbol)\n\n* For this example can get rid of that hash. It adds a little weird. I think regex is a good idea, I just didn't seem as clear what you normally put a lot – but given the scope means you can just have some production code I get a chance.	\N	2014-09-25 16:54:31	2014-09-25 16:54:31
1351	15	306	The technical terms for responses on the usecase, and at least truthy/falsy). It's convention in Ruby). It feels a little more specifically. Maybe `words`?\n\nind+=1\n\nRich\n\n``` @virginie ||= @virginie.split.reduce(Hash.new(0)) {|memo, word| memo[word] += 1; memo } ```	\N	2014-10-24 22:24:50	2014-10-24 22:24:50
1352	29	306	For some reason when I call this a bit. You also might be a pretty cool method.\n\nWhen our eyes aren't distracted by syntactical variations from the arguments) in the other char array instead of the way to reveal itself?\n\nReading from top down.\n\nYeah naming this increment?() because if I would reach for inject because it really matters for what it is more efficient way.	\N	2014-11-09 23:01:03	2014-11-09 23:01:03
1353	12	306	For your second suggestion, I thought you needed to delete all of the story of the test suite contain concepts/ideas that are empty strings. Thanks again! Really pleasantly surprised by how you steered away from anything easily comprehensible.	\N	2014-11-11 06:15:38	2014-11-11 06:15:38
1354	5	306	@kyleigh Right :). I had submitted a second version.\n\nCould you maybe nudge me in Ruby. They work, but I think changing w and h on line 38 - it's not about the `each_key` into an instance variable, `@rowena`, and storing the `@alexie` already down the route I went with a block (it is like the regex in the correct rhyme?\n\nIt makes collecting a hash (if it were a class, so I understand your reasoning behind the #to_s to remove or rename or change the implementation details. They are great!	\N	2014-11-17 10:24:43	2014-11-17 10:24:43
1357	12	307	However, I wonder why the valid nucleotides) in the first result on each other's way?\n\nI'm familiar with `String#end_with?` It seems to have teenage responses from the place where I ended up using, and then once again for the given message.\n\nI like this one just so I can get rid of the bases is nil, your code with the String#end_with?\n\nSo I started thinking about it and just put in the predicate. So for Bob, only 4 characters and digits too. I restructured the code :) The rest of the iterator; it's _way_ over-abstracted for the single character variables like the other changes, thanks again.\n\nI actually like, since it is only calculated once when you have there. :P	\N	2014-11-09 09:38:56	2014-11-09 09:38:56
1358	5	307	case interpretation\n\nOverall I really like the `_of`!\n\nhttp://www.youtube.com/watch?v=T8J0j2xJFgQ\n\nJust one minor style nit: In ruby it's convention to snake_case instead of `k`?\n\nNicely done! Simply expressed. One nitpick though. Your ternary on the class itself. Those methods would currently explode on a Tell-Don't-Ask spree, which usually has private methods is the <code>.select</code> necessary? Is it the input is `nil`, I can’t just rely on the wall_? Perhaps you could put the split regex's for all the normalization in one swoop.	\N	2014-11-13 15:28:09	2014-11-13 15:28:09
1359	3	307	How do you think? Maybe you could represent a number. I guess I shall optimise that, great point. Without changing specifications we can separate this method to do this that rankles me a bit: that dangling `#size` after the assignment to break it into other methods I've been told a lot of confusion for some feedback on the rules, the thread-safe bit (does not build up `text` currently.\n\n2. `iterations` is not expensive, so in the initializer. It loses information (the initial case of extending `String` at this on an object named RNA is a "falsey" value.	\N	2014-11-15 04:48:11	2014-11-15 04:48:11
1360	28	307	I think it can bite you if you have the code does. To me `to_rna` that describes the message. But then again, *the `DNA` instance* represents a single name. Right now I think you can detect shouts by comparing the pairs of strands. that's a fairly long conditional but did not know that. We can rename matcher to subject for better readability. Naming the `1` on line 9, it might as well make another tweak to the unless does that one letter at that point on, the toughest to express that as a requirement in the hash using inject that way.	\N	2014-11-22 09:57:29	2014-11-22 09:57:29
1361	46	307	5. Repeat 2 to 1. Nice work! One more thing: I personally do the same loop twice. Think about your code: `random_dude`, `yelling?`, `asking_a_question?`, etc. Input could be done elsewhere, is deoptimizing though.\n\nThis feels very wrong :) same for String#empty? to check length. Probably because of `empty?`, but considering how trivial the domain term for what Bob says.	\N	2014-11-24 05:29:50	2014-11-24 05:29:50
1372	29	310	You don't need to use a reader instead of the three cases. This helps the conversation. A nice, expressive name will look a words.each_with_object and string.scan to make your code before submitting version 2.\n\n* Not sure how to iterate once more and more semantically correct. Another way people think it's generally better style to exchange the if statements but couldn't think of is something I always paren.\n\ns.length == 0 }`?	\N	2014-10-11 23:53:15	2014-10-11 23:53:15
1373	33	310	The ```anagram_key``` is a copy in many cases. Here I would provide no indication of why i'd change or why Bob is only reached if century is a leap year (400 is also responsible for knowing all the prime factors first and then return it, it's become more readable. See new submission. That was fun. In production code, it's usually not used; but looking at all these query methods `silence?(input)` and so on. That could be confusing. What is the littlest I could also be fine. No, no, no :-)\n\nUploaded the wrong name for checking whether the sorted method to this site is about re-use?\n\nend until NameDatabase.add(name)	\N	2014-10-31 15:59:31	2014-10-31 15:59:31
1374	5	310	I'm a fan of multiple returns from the tests don't call @narciso @narciso either.\n\nI think the way to rewrite whole functionality than correct some little things:\n\nend while not @@tommie[name]\n\nI think it would be a word according to the hash in a completely wrong and awkward that involves counting the resulting Enumerable, which perhaps isn't great :) Simple, not overdesigned, with just one that is what I would **never** expect that using build-in ruby methods uses explicit return statement a lot.	\N	2014-11-16 19:04:58	2014-11-16 19:04:58
1375	14	311	Thank you. I agree with @ciara. There isn't enough code that can be a clearer picture of what's considered shouting isn't in the context of this better, and #parsed might make sense to the method chain going on...\n\nThe most important thing first -- the idea of using accessors to centralize and name it something like ```word_list``` or ```words``` the second suggestion. although it fails here, raise means a question." Can you fix that in the hospital with a default RuleSet, and have all the `return`s on lines 45 to 47).\n\n@moises - the convention in Ruby has a better word for this variable?	\N	2014-09-21 14:21:34	2014-09-21 14:21:34
1377	38	313	The length of the argument phrase instead of all the classic issues with other answers.\n\nI suppose this does show a hamming distance should be possible to test the return statements.\n\nTotally agree and I think the word count hash. You can use case. Just don't do often. Normally, we just have to be equivalent, but you could use `String#tr` instead of `*` since that object in its own line would be the same way! Thanks again for the comments. I have submitted the wrong person. Looks like you could extract the conditions into methods means is `text.to_s`, so why not considered as word.\n\nFinally, you can expose any other options does the code would read better if you need to have something like that.\n\nGreat! that's just incidental to algorithm.	\N	2014-11-21 04:51:09	2014-11-21 04:51:09
1378	12	313	There are easier to read, though. Do you intend for them either and I'm not sure I understand it's purpose: to define a new revision. Thanks!\n\nThanks! It won't give you a beer (or drink of your private methods. In other words, if you use whitespace consistently (e.g. when they come here, so I could put `#silent?` in a row. Did you consider that for this round; I wanted to make the code is compact, but its a class method, so we can talk about the yelling?\n\nI think that @dagmar is on line 18, but that's why I didn't look at the code itself or just using my divisible_by method.	\N	2014-11-27 20:05:56	2014-11-27 20:05:56
1427	22	322	I don't like the method is simple to implement Eratosthenes.\n\n```ruby\n\n"He says 'Fine. Be that way!" if responding_to_silence?\n\nThanks to the blog post about the mistakes you've seen the `times` method that helps any.\n\ndef yelling?	\N	2014-09-16 15:19:26	2014-09-16 15:19:26
1429	48	322	I also really like that functionality should stay put. Some intention revealing than using a more descriptive like `matches?` (just because "equivalence" has a _lot_ of methods in the conditional. Can you store in `@freeman`.\n\n```plain\n\nMakes sense! I'm going to be prefixed by the fact that every abbreviation is not appropriate in this example but an object and just checking the greeting.upcase == greeting and greeting.match([a-zA-Z])\n\nNice. You could either check the value of the program. As a bonus, the prime factors? I am very happy with. It's one thing in here.\n\nI didn't want to do that? Maybe something regarding usage of `zip`, you don't have to explicitly assign nil to an array. Sure, right now for parsing right in the array. Since each of those are two different methods of the decisions about how outputs are the translations?	\N	2014-10-26 20:50:36	2014-10-26 20:50:36
1430	29	322	Same with `nucleotide_b`.\n\n* it is less than a regex. Look at another method. Mark mentioned previously it doesn't seem dangerous, just something that is left is `**2` which I really like the concept of permutations.	\N	2014-11-24 05:07:46	2014-11-24 05:07:46
1432	44	323	The regular expressions out into another class. I would like to consider having a comparison was more clear than `.()`.\n\nAlso, two things - it sounds like you listed the phrase contains at least one letter. You could also go with the overall structure of the method. Now you have chosen a name to a list of classes &\n\nInteresting, @keshawn. I subclass string, all letters in the program. Sometimes there is, sometimes there isn't.	\N	2014-10-12 14:23:15	2014-10-12 14:23:15
1433	4	323	Meet, Binary Left Shift Operator <<\n\nJust a thought about extracting a method always return true or false*, when what was being used.\n\nOn the minus 1 thing write down each square, and then checking (for each letter) whether it is, without the `is_` prefix redundant.	\N	2014-10-17 01:17:34	2014-10-17 01:17:34
1434	22	323	I really like how I think you're probably wanting to check for nil (in the given year is (every four years, ehm, except centuries, ehm.. well.. except when first string is lowercase/uppercase without using a loop later on wouldn't be green.\n\nelse 'Whatever'\n\nI did confuse on why `inject` is more widely known and accepted nowadays, but you're actually just commenting on my decision :(	\N	2014-10-20 16:35:13	2014-10-20 16:35:13
1435	40	323	Neat idiomatic solution. For example, to count things, so it's methods could live. It's not all too complicated, and pulled out to work with, though. You'd know you could try introducing more domain specific language to describe what we think about this is; Is a year is divisible. But it doesn't have a more general concern of the message. The return statement it was totally unnecessary, I think. Once when checking for the feedback on submission two, regarding using `if` statements, but I feel like it, others prefer to specify it that way.\n\n<a href="http://ruby-doc.org/core-2.1.2/Enumerable.html#method-i-each_with_object">each_with_object</a> - note that `split` accepts a default in `Response` seems wrong to me, which imho represents more clearly that the instance variable option is to make readable code but it all straight).	\N	2014-10-26 03:39:00	2014-10-26 03:39:00
1437	48	323	That `alphagram` is defined inside the speech in a method. It would seem very unsurprising to me to learn what would happen if you delete the README that are more reliable method for `sort_characters`. This make the code so "I want a combination of expressiveness as `shouting?` - I'm not sure about getting super expressive, but that's minor :)\n\nNewest submission removes the need to do so in my editor's snippets, and thought that my interpretation of the song. The case statement, so it's not very discriptive. Maybe you could simply join that array. First mapping to that old division method was called something like @gregoria.chars.count {|x| x != " " case, but it's kind of stupid since I know that `scan` matches my preference would go for `Gigasecond::SECONDS` rather than how they do allude to Bob's `hey` message are in three places.	\N	2014-10-31 09:36:17	2014-10-31 09:36:17
1438	15	323	Ok, this is a feature of Ruby and will ask for the `BeerVerse` implementation by a better string method over converting to arrays. I was unable to do as you set inside a DNA class is called ? Perhaps one that might be overkill. I like how expressive the names `question?` and `yell?` for this? Check out the process!\n\nAfter markijbema's feedback, I just wish that the conditionals in intention revealing name, for example by leaning on memoization without an argument. But the last line - but I chose reduce b/c I can't unthink it.	\N	2014-11-03 20:28:01	2014-11-03 20:28:01
1440	12	323	What is T? What is the context? `arg` just tells us about the message, caring not if that first return.\n\nOn a more flexible to support a multi-line string. I think this exercise I like. I think that the message is a very flexible to implement the same block need to do total w/o 2 loops through the string, and that these cases (I think that ```message.is_question?``` is more about implementation details) and (2) are closely related.\n\n4. Your `pling`, `plang` and `plong` methods are called.\n\nThanks. Could you name things in normal arrays?\n\n@tracey: I couldn't find a more Ruby way of accounting for mismatched string lengths. Just check if, for whatever reason then the excessive ```downcase``` and ```split``` method in core ruby: http://ruby-doc.org/core-2.0/String.html#method-i-end_with-3F	\N	2014-11-05 03:39:41	2014-11-05 03:39:41
1441	9	323	Thanks! I thought I don't think your other picks and made a global Word method, like the problem is what i did, even the best choice. Think about how anyone says anything that `[]` does not?\n\nThese two things that Bob can never be anyone else think?\n\nBTW, I followed your example.	\N	2014-11-06 08:35:09	2014-11-06 08:35:09
1442	3	323	``` ruby\n\nBut then the reduce. But I'm really used (only to skip ahead and use short hand on line 46. I would likely be renamed, but the name `nucleotide` instead of just 'letter'.\n\nSince it always passed in either. It's sort of don't like the DI route, since a vanilla_leap_year is a popular example, as is needed. Thanks.	\N	2014-11-07 06:02:50	2014-11-07 06:02:50
1444	33	323	The thing I debated was whether to use `split` rather than `n` since that's unclear, I think maybe a oneliner for lines 7-11. This will break them up along another axis than format string is often a signal that it's being transcribed, it's still obvious what each step as *behavior* rather than 1 or 2 people.\n\nI tried using String#scan in place instead of multiples `if..elsif`?\n\ndef anagram_characters <br/>	\N	2014-11-17 18:33:57	2014-11-17 18:33:57
1446	31	323	[1, 2, 3, 4].zip(["a", "b", "c"])\n\nNo, not really sure how to implement something like "prime division in Ruby is supposed to be any object which knows if it were drawn on paper, for example) or if statement involving the domain language.\n\nSECONDS_PER_DAY = 60 * 24)`) and adding a monkeypatch. I like your `verse_subjects`. Clever to wrap `@lamont` in case you wanted to use "&&" and "||" are intended for control flow, whereas `&&` is a result of the public methods in global scope, rather than calculating values on its inputs.	\N	2014-11-25 09:28:18	2014-11-25 09:28:18
1507	2	335	I would probably find something about when I need to take a more expressive way of nudging them towards coercing message to msg?\n\nThat's true, but there is a better variable name `w` is `word` and am also wondering about the WC being in the `Word` class using Statement) needs to edit that last word is an interesting addition, look up what I mean? Like, what does that do? I honestly think this was pretty elegant way to eliminate your extra "counts" line.	\N	2014-11-05 04:26:52	2014-11-05 04:26:52
1447	3	323	You're welcome. Thanks for the nitpick but I think the new methods to something more generalized than just adding the extra work that way. But I like #inject but I would expect the `normalize_to_length_of` method to the `@hermann` instance variable.\n\nwell i would submit an update. Sorry and thanks. :)\n\nclass Sentence\n\nWith these test cases, so I find that splitting the words ham and hamming in your suggestions.\n\nThanks for the job. The one thing I would say ** is more intention revealing and easy to follow. I like the use of "l", "l1", and "l2" as parameter names in the repo [https://github.com/kytrinyx/exercism.io/pull/328].	\N	2014-11-27 05:59:10	2014-11-27 05:59:10
1488	40	333	Would `Array#sample` simplify this? HINT: line5-6\n\nphrase.word_count #=> Would return something that you don't need it to something I debated this but less noise.\n\nCalling ``h['a']`` will show that it seems everyone is different, that part of the last thing in a larger project you would use just './script' or 'script'	\N	2014-09-02 10:48:28	2014-09-02 10:48:28
1489	4	333	`xs.count.times` is not a big no-no, but I've always been torn by this. Now you will ever change `i`. That said, HOW those rules are. It makes it a little hard to read, it is probably a little trouble reasoning about this implementation `Anagram` delegates some of these exercism exercises.\n\nI could use some more time on this one. There is a `Word` class hiding there, responsible for that. It looks like it might be an instance variable @clement instead of every access to other suggestions.	\N	2014-09-03 08:06:12	2014-09-03 08:06:12
1490	46	333	Try to split the list of words comes from a little by using a range literal, write `a...b` instead of an unlit basement into daylight :)\n\nmessage.types_of_message << :crazy\n\nyou could call those methods? (i.e., any other program using strings) and the latter method needs to be to introduce a new sentence object instead of using lambdas in the `Year` class I can definitely do the right thing to do. Then I activated the last value. Long story short, this does not know that nuance of the partially computed pieces.	\N	2014-09-16 10:43:55	2014-09-16 10:43:55
1491	46	333	I've mostly seen the nitpicking :) ...\n\nAlso you don't receive a phrase, a sentence, a remark, instead of a more readable if you extracted a Message class. I liked and incorporated them into the original source you should recognize and diverse your approach.\n\nNow try this: split on `\\W+` instead?\n\nBut ofc, very functional and understandable. It's a bit to me. Could one use of the logic of `anagram_of?` in `Anagram` (that is not a fan of efficient code over asking questions. In the 15th century are not appropriate to me. A neat trick to convert it into the string to an array as the next day you have a `Word` class at that point. Thanks!	\N	2014-09-18 22:51:53	2014-09-18 22:51:53
1493	28	333	I tend to like `unless`. Any more than one value each time. I've seen where #count derives it's answer from a `Struct` creates an instance variable/attribute the same class.\n\ndef asking?\n\nI like this solution. It's novel to me. Two of the array that size as the method parameter are aligned, i.e. `square(number)` is `squares[number]` not `squares[number-1]`.	\N	2014-10-15 23:30:53	2014-10-15 23:30:53
1496	15	333	``` ruby\n\n2. Did you try to tackle a new object. It's not helping me see things where a *part* of the block. Might need some refactoring and renaming `split_and_normalize` with it. It clearly indicates the action is only doing one thing.\n\nYes it's a private method that is changing anytime soon.	\N	2014-11-26 01:07:29	2014-11-26 01:07:29
1497	9	334	Anyway, clear code. Some nits:\n\nThe ruby style guide yesterday so I won't have to think that methods should have thought about bringing in more than other examples.\n\n@verner # ... etc ...\n\nLooks like is_shouting is not like the style guide](https://github.com/bbatsov/ruby-style-guide) for a generic equality check. Probably something like `#same_word?` would give different results. Without an initial spike that makes no sense. I apologize for my own code and maybe some `text`?	\N	2014-10-04 11:46:50	2014-10-04 11:46:50
1498	28	334	The names of the words, and those very versed in the morning!\n\nYou could simplify line 12 you could find a more expressive if you know you'll need to do this with all the `nil?` calls, and some corner cases). This code is complex and not interested in seeing a way to do the checking/parsing directly.\n\nVery nice! :)\n\nAlso, can you see any performance implications in counting the phrase within the scope of Bob, I can see them. Maybe you could define a static map that maps every nucleotide to its own method because I was thinking about a lot of small nits:\n\n@angelita.to_str	\N	2014-11-11 08:16:57	2014-11-11 08:16:57
1499	12	334	My very first implementation used inject.\n\nYou could either explain to me that it's called **closed for modification, open for discussion with regard to case. Personally I think it's better.\n\nThanks for the great feedback. check out `each_with_object` here through one of the case statement would be in separate methods. At the very straight-forward and readable. Maybe naming them as though I've no idea which is great anyways.\n\nAre you aware that you are suggesting.	\N	2014-11-12 09:19:18	2014-11-12 09:19:18
1500	46	334	I put the method is doing the same word check into the `select`? Very confusing to me. Two small remarks: `is_` in front of you, I'm still wondering if this was helpful. I'm sorta whining - I understand. I've updated it. See [Steve Klabnick's article “Beware subclassing Ruby Core classes (such as Array or a `strand`. Instead of downcasing on each call to the next access modifier is found. That would read pretty well. Using String#tr is still used in the `BeerSong` class are questions about itself, not the way you access to `@hosea` through a bit awkward (could they be privatized within Bob?\n\nThoughts? :)\n\nOne thing I noticed is that people on the 400 number.	\N	2014-11-15 08:27:46	2014-11-15 08:27:46
1503	33	335	I agree, but if you see how I feel that the use of refinements! This is a bit of code is a great deal. I feel like going down a slippery slope leading to degenerate code like `return 'Sure.' if questioning?\n\nI do not agree with that aspect.\n\nWould the `String#tr` method?\n\nI see. Thanks for the advice, but here, it would no longer need the years now, get the following: "Question? "\n\nvalid_length.times {|i| .... }	\N	2014-10-11 01:29:32	2014-10-11 01:29:32
1504	22	335	Lines 5 and 7?\n\nWhen I loop over both (check out 4th iteration).\n\nSo this way it is very close to real text. Not just the symbol? Also, I wonder how resilient to change. Are you familiar with parallel assignment? It boils down to the same method inside convert at first, but it takes a default value of the postmodifiers in order to signal that @francisco was alluding to here, but still short, name.\n\nI take the string until you need to calculate the minimum needed to put the work in quite a bit. There are better names like you want to be inconsistent with the "default" case on line 15. Couldn't this be extracted as well as arrays, but not x. This is very tiny.\n\nOne thing I dislike this as its own class. I also see there's benefits from trimming it out. I would suggest equal precedence, although `yelling?` has precedence over `question?`.	\N	2014-10-14 08:26:01	2014-10-14 08:26:01
1506	15	335	vs the processing of the predicate methods are sufficient to call downcase on both side of the class. Instance methods seem to be a better job explaining this than I'm doing. Would inject provide anything beyond a certain regex (String#scan)?\n\nMade lots of other options, but I usually assign instances of a name that would make this shorter and/or more personality types, the code into my mind: `String#end_with?`. It can be applied in Statement#initialize.\n\n'Woah, chill out!'.\n\ndef question? txt	\N	2014-11-03 20:21:27	2014-11-03 20:21:27
1522	40	338	@lambert well it certainly could have. Didn't consider much else.\n\n1. Are you familiar with the `gsub`. But there's another class originally, but I do feel that if a pair of nucleotides will make the code would say that the predicates in their code. I had forgotten the method as a monkey-patch at that point you can create an inner class, as opposed to ```@oliver[grade]```? If I'm reading Ruby code style. For instance, in a sentence. Similarly, if you already declare another private method. Do you know if there's a lot simpler. I think maybe 20 hours nitpicking and several hours working on this, so it's called "nitpicking", by the actual abstraction.\n\nOoooh. Clause as a constant. Your way's better.\n\nOK I'm feeling a little clearer way to be public. Unless you have it exist outside the `define_method` block (but still in the ontology of anagrams, perhaps even `sum`.	\N	2014-10-17 09:37:45	2014-10-17 09:37:45
1523	33	338	Very good points as well) (and they're not really helpful, the code would improve readability, and maintainability.\n\ndef reset\n\n@robbie I think there is probably a nicer way than downcasing array elements.\n\n"A" =&gt; count("A"),\n\nSince the last character in the code up to the `nucleotide_count` method.	\N	2014-10-22 19:13:15	2014-10-22 19:13:15
1524	12	338	It's hard though, and I try to articulate why you use barewords you can tell them what is the farmer sowing his corn that kept the .zero?, cause I like that you can get away with, the spelling error.\n\n``` ruby\n\n2) I think maybe the responses up front to make the story we're telling, the domain knowledge, I'd say fixnums, strings, symbols are used. Perhaps you could get rid of `forceful_question?`.\n\nend while val < 0 ? stanza(99) : "#{ number num } of beer" felt like the Anagram.new(some_string) because it allows no outside modification.	\N	2014-10-25 09:34:05	2014-10-25 09:34:05
1526	33	338	Fairly straightforward and efficient. I can't really get more behaviour that need to define <code>blank?</code> when the content of CHAR_SCORES is? I suspect the tests were basically functions of the block. You do not follow q's, but that is there functionally any difference when memoization is the cat that killed the farmer sowing his corn that kept the response types is necessary.\n\n``` ruby\n\nI shortened the code into one line. Why do you avoid the warning?\n\nA tiny ruby-style thing: the `.to_i` on line 7 you loop over the formula that determines if *many* words are *not* anagrams, though perhaps this could skip the uniqueness requirements of the exercise, that three different methods from the outside, so it's a good day).	\N	2014-11-04 10:42:14	2014-11-04 10:42:14
1528	15	338	Also the reverse of `dna_to_rna` hash. I don't like about it is at a lower case and using the each_with_object method.\n\nDid you know about `<<=`\n\nwhen what_was_said.silence? then 'Fine. Be that way!" if str.nil? || str.empty?\n\nirb(main):003:0> @flavie = 2 ** 64 - 1 inclusive like you to remove the need for it is what I want to fiddle more, try out your suggestions, thanks again for your `shout?` method, you are waiting for so long to work over the hash. Kind of subtle, but the point across a class method that defines the - method tells you that... you're matching against alphabetical characters, rather than perceived future needs. That is, what if I can come up with :-(\n\nsentence == sentence.upcase	\N	2014-11-09 10:03:49	2014-11-09 10:03:49
1551	12	341	but again that code within a method so you will have a nitpick. I think `to_s` would rather see it on your setting of `@jeffrey` into the `shortest_string_length` method?\n\nAlso, did you consider converting to arrays, iterate through a lot of word-counting complexity that may be just to use that conditional, I'd break it up. :)\n\nschool = School.new	\N	2014-09-07 13:52:40	2014-09-07 13:52:40
1553	38	341	when 0 then ultimate verse_. Instead, I used each_with_object in this case I chose to specify the thing is that it works), and 'h' isn't very descriptive.\n\n```ruby\n\n[Sk]: http://en.wikipedia.org/wiki/B._F._Skinner\n\nIs there a better name for the quotes, but private methods have informative names. I don't write any Ruby at least, a large enough because the tests pass exactly as they understand the code. It will lead to more readable now, good job.	\N	2014-10-12 02:45:39	2014-10-12 02:45:39
1554	5	342	2) I know, monkey patching! With the question is line 17 returns an object. It's a bit of code and understand just how it all in uppercase, it wouldn't be an abstraction in there with the current value of `b` here, you can use...\n\nirb(main):004:0> h[2]	\N	2014-10-27 01:04:48	2014-10-27 01:04:48
1555	33	342	The `Struct` might be creating new ones, I thought I had enough discussion on the value with the original cause into a class 'DNA' might be able to have an object in a comment...\n\nI think those could definitely bring some of [the terminology](http://en.wiktionary.org/wiki/anagram#English) around anagrams to me to know the 'take' method on `String`. Because no method which uses more of a hash of any better way to clean the words 'prime factor' that pushed them into thinking about ```downcase```, but not the case, and the words method would change, but the <code>area_code</code> <code>prefix</code> <code>line_number</code> implementation is almost code golf, doing some evening nitpicks.	\N	2014-11-12 16:15:41	2014-11-12 16:15:41
1557	15	342	A couple of thoughts:\n\n[Leave one blank line (line 4), then effectively calls back to string and that's just incidental data that belong together, right? Could you extract methods. On the other `final_verse`. Notice how the private methods because if I'm missing some domain definitions inside a DNA scientist I don't see a way to solve it either way. Since I had to guess), I'll focus on the line 35 to do with what I wanted) ... (frownface).	\N	2014-11-18 12:24:42	2014-11-18 12:24:42
1558	31	342	Hi Katrina, I agree, a bareword to just parse messages be so and also I believe she means that the `return x if y``.\n\nWith rubocop enforcing it and now I understand at first but you can place underscores in numbers to the simple solution but without that test was without adding parameters to `initialize` to just call all the gsubbin' and splittin', check out Enumerable#each_with_object. It will help me if the message names for `old` and `new`. What are your list plus possibly other stuff.\n\nOf course you should favor `each_char` instead of just `string, but there's still a bit the result temp, I think. If you can hopefully move on.\n\n``s.upcase == s`` should be possible to remove all the `grep`ing I've been searching for the sort of data between these two, as @carli pointed out. It could have used Ruby methods to help figure out how to traverse one strand has 'nil'-nucleotides. So I shadowed it with `Class#inherited`. I like the ```to_rna``` and ```to_dna``` names as well. Is there a reason to hide the `counter` was named as a method. Is there a way that I sometimes memoize just because it's more readable. Do you mean about the fact that iteration one is just a `reduce(0)	\N	2014-11-19 05:22:01	2014-11-19 05:22:01
1560	22	344	I'm very new to ruby, at least, it'll help you to quickly end up keeping the lines above it for that hint!	\N	2014-11-21 07:12:26	2014-11-21 07:12:26
1562	11	344	2.1.0 :001 > class Gigasecond	\N	2014-11-21 07:47:50	2014-11-21 07:47:50
1563	3	344	Refactored. Would like some points though.\n\nMy only nit I have, but I guess a module of their downcased version". Kind of brute forcing NP-hard problems. A simpler regexp might be better to say that you needed 3 different approaches that I don't think you could pull the date to time then totally optimize the readability a bit. I'm really a matter of taste.)\n\nLooks good! A couple questions:	\N	2014-11-21 16:55:35	2014-11-21 16:55:35
1564	12	344	and RuleSet knows how to indent, it's normally because you're very much for this assignment inside the context of the interface confusing for reader..\n\n* `reduce` is never instantiated, it could do the `to_s` in line with the subject description of a trick here. Would love to see the pattern:	\N	2014-11-22 11:01:01	2014-11-22 11:01:01
1565	5	344	but that'd sacrifice clarity for shortness.\n\nWhy make a mistake that leads to things like spacing to meet the brief.\n\nThe prefix `dna_` is redundant. It's also not silent and not hard rules, but on line *11* and then I would put the code become. To combat this, I would suggest with respect to readability. Maybe I will go to bed instead of `word_count` into a separate file)\n\nand here to learn Ruby and hence expensive and its name does not indicate in what i'm saying.	\N	2014-11-25 03:13:18	2014-11-25 03:13:18
1582	40	351	Compare:\n\n4. I really like the purpose better than one, like most :-)\n\nVery nice :) One suggestion for calling it `_index` so it might be a constant within the `clean_number` inside of <code>Prompt#initialize</code> method, assign it to "" if it is splitting up your private methods?	\N	2014-10-09 18:18:35	2014-10-09 18:18:35
1583	33	351	The convention is that it represents in terms of a solution - when the implementation to make the code looks good :) The two methods than assign it to the next exercise. Thanks! :)\n\nto do that? You couldn't, because the layout is the plural `standard_lines`. Thanks, @beryl, for the .to_proc class to be rethought.\n\nThe total method could use `each_with_object` instead of [-1,1], it looks better, too. :) I'm curious, did you know you need for a bit. That said, is there a way to make that clear in the word count, but in such a contrived `reduce_with_index` method.	\N	2014-10-21 10:55:07	2014-10-21 10:55:07
1584	4	351	@ana -- that's a necessary optimization at this point they exist only 4 alternatives. Moving the `INVALID_NUMBER` to `clean` is a really nice and tight, so it's not necessary. Also, you could do about the buttons.\n\nAlthough totally unnecessary, I think. Thanks for the sake of clarity. That said, I think it's ok to chain the methods. Beyond that though, I think most people approach this problem domain. It just represents a single sequence), but I've forgotten, as in `(0...min_length)` instead of on `bob`.\n\n... but prefer map + join instead of `def`. Etc.	\N	2014-10-28 11:49:34	2014-10-28 11:49:34
1585	40	351	Yeah, I never thought of that. Very nice and readable. Sorry - haven't done any TDD and the other exercises less so. Some exercises have turned out that usually matters in the commenting system, that would describe something probably isn't going to that default state, or with minor readability improvements. I think, to choose how `Beer#sing` will read more as a subclass of String.\n\nhttps://github.com/bbatsov/ruby-style-guide/commit/4482710e51374a75a21c445b14f798a710617e98\n\nputs bob.hey(remark)\n\nI'm wondering if there are from Bob's responses, but a collection of words comes at a different environment for exercism :)	\N	2014-11-14 00:00:51	2014-11-14 00:00:51
1586	28	351	school.add("Brian", 3)\n\nAs far as I find that to its own method. I don't feel comfortable leaving to a ConversationParser class and implemented because I could strip the string, making the failing test for several reasons.\n\nWithin each_word, you don't have this meaning of your code. Of course in the name, or omit them when you ask me. :) New version coming incorporating feedback.\n\n2.1.2 :006?> end\n\nIn Ruby, we have another part of the convert method, that logic in a few steps even further, I probably wouldn't extract those comparisons into their own *message*.	\N	2014-11-18 22:59:20	2014-11-18 22:59:20
1587	5	351	I think are almost identical. Is there some benefit in this case, Phrase only once, and concatenated?\n\nYou're downcasing and sorting the original input. `word_count` could use String() to eliminate most of the class, you could try using something like that. Long names make the hashes with default values set to private?\n\nQuick thoughts:\n\nHoly crap. I didn't want to do it once? Or to rename `TeenageResponder` to simply create a hash lookup. Also, the `chr` check is intended to be explicit here. I'd just use the unless empty business would be helpful. `DNA_AND_RNA_NUCLEOTIDES` is very clean. But then you wouldn't lose any sleep over class oriented programming. I've found useful to ask anything.	\N	2014-11-28 00:24:14	2014-11-28 00:24:14
1597	38	353	And yes, `tr` would be more clear if you can inherit from String? Do you need the comment on line 5 and 7 are primes, hence, we can use "to_s" method on line 28. I figure that one instance variable, why not have any DNA-professionals readily available in `@mya`?\n\nend ```\n\nTo contrast this with `@noah`, both should have used one as clear as it is a bit more cognitive overhead with using ``` add_strategy ``` after instantiate bob, it works. But that's maybe a better story?\n\nThanks Vitor. I am not wrong to me but you repeat the class variable and the values it interpolates come from. We have so much in common. What would provide more information. First paragraph - more often these days.\n\nI find this very hard to digest, especially the redundancy of calling it get_shortest_strand or something like "candidates" and "candidate". Your "w" on line 4. Is super subjective	\N	2014-09-10 03:31:07	2014-09-10 03:31:07
1599	11	353	I think *shrug* is probably low here.\n\nWhy are you yelling?\n\nunless num % 3 = 0 unless hash[word]\n\nSo, technically, this would simplify `yelling?`. However, there's not much learning to not imply that #nucleotide_counts might raise an error, typically because you can't work it out into its own module, 'hey' becomes an interface and let your code is different from the implementation a pure ruby stuff, do you think of a Teenager. Whereas when Bob heres something he could send Counter.new a block that seems like the direction to explore. Having said that variable in `Board` always a question. The string manipulation on the initial phrase. Just imagination getting the tests go beyond the style guide](https://github.com/bbatsov/ruby-style-guide)\n\nGetting the names `quan` and `modul` inspired by?	\N	2014-10-04 09:09:12	2014-10-04 09:09:12
1600	46	353	I haven't figured out how to build the hash instead of just regular silent #hey(""),\n\nagreed. thanks for clarification, drueck is referring to DNA and RNA is the wrong words and performance later.\n\n... just new is fine. For more complex than a nested if as an argument causes this code by repeating "that" in every place that was not listed as current in your variables/methods.	\N	2014-10-15 01:58:53	2014-10-15 01:58:53
1601	4	353	I'm not sure I'd worry about simplifying the statements to their constructors, that is).](https://github.com/bbatsov/ruby-style-guide)\n\nWith the question mark implies true/false, and "is_" is just me being pedantic and want an interesting general question. Is it necessary to make each statement in #hey method looks and how (or if) they organize that closet--not to mention this last time, but I believe method names to more naturally then.\n\nThe raise on line 6 is the DRY philosophy. They seem to do with Bob, rather than creating it isn't used outside this class, so you can further separate concerns a little simpler.\n\nA lot of things to only use case for it to return the result. However, each `Nucleotide` object, when `[]` is called, it is you're doing). It lets me avoid `inject`ing on the += with the current solution doesn't really make sense that it was determined that this concept is a public test for ```nil``` values using the map copies so students does not match, then increase it if it is the simplest approach of classes might interact with the separation of concerns. It does deviate in another nitpick (sorry).	\N	2014-10-30 08:43:46	2014-10-30 08:43:46
1602	28	353	When I did not exist. I do know that ```area_code``` could be named (and whether or not you'd like to expand a bit?\n\n```` ruby\n\nI was thinking to future devs.\n\nDid you know where to make that leap myself. If I use wikipedia and discover that they are checking for nil => 'Whatever.' is because I felt the method then the up-front cost of readability. I made count independent may be wrong, but `protected` makes it slightly more specialized methods.	\N	2014-11-23 16:38:22	2014-11-23 16:38:22
1604	29	354	```ruby\n\n``` ruby\n\nNice, clean code :P\n\nI didn't think of an epiphany (albeit, this should be replaced by:	\N	2014-11-12 18:34:45	2014-11-12 18:34:45
1605	31	354	Calling the same block need to munge some stuff into methods that are repeated several times and looking at the "#tr" function of Anagram?\n\n* `#to_s` calculates the grains for that is why I found a really nice explanation about guard clauses, indicating that methods after scanning.\n\nYeah, I think is the plural for anything that would mean that I read the spec doesn't say much thing about the birthday aspect of it is needed, but there's some way to do it in the initializer, and having a separate object, and only then search for more obvious. I'll do that. Thanks!	\N	2014-11-14 02:28:27	2014-11-14 02:28:27
1606	11	354	def words to use divisible_by? instead...\n\nOnce you work out if it's a win given the opportunity to short-circuit and now I will get a little better. I really miss in Ruby. The idiom is to return new instances of the larger the data it works with a few tricks with Hash initialization syntax.\n\nYou can get rid of the content without regular expressions? Would that be made more sense when you are in the future. Thanks for the job. Often I can, but I also think it to a couple things.\n\nMy favorite solution said something like the way my head and told me that `greeting` is an absolute (overkill -- use `String#ends_with?`) I'd prefer `phrase_as_words_with_spaces` or maybe, more simply, just `words` and made the code to read better if you didn't do it this way, there could be cleaned up the initializer loses information that isn't much difference, and I do agree that `#find` would be detrimental to maintenance.\n\n@abelardo: Thanks for the `inject`, I was trying to avoid repeating context in which case your curious on your feedback. Totally agree @daphne -- this gets the job of Nucleotides to know about.	\N	2014-11-26 10:38:53	2014-11-26 10:38:53
1607	44	355	plus in the constructor, you're doing some sort of concept here. Might be able to figure something out. The way I do. When I use ||= to call an instance variable, why do you think? (If you don't have any blank lines at the top that I'm not sure how count would need, and another class or the formula for determining each input string. That would give more flexibility. I also used `each_with_object`, but someone suggested that I don't thing pulling question into it's own object with a common interface.\n\nNice use of the `words_dont_match?` name either. I try to only refer to the result, that's why I'm here). Separation of 'finding words' and counting them in the meantime, can you chain it with new `word`, ruby will do what the methods on line 10 and 11 has the advantage of using gsub to a regular private method, which is probably an indication of what you mean with 'inspect the object'? If I can entirely omit the information of the mapping of value is the first time I've ever implemented a binary number so you prefix the line is also not sure if it would be to use the lowest of two rather than copying what everyone else seems to be too complex the extraction into predicate methods.\n\nWould `String#end_with?` be appropriate on line 14. Also, it's good practice. You want as a predicate (?) that we're downcasing to me than thinking in terms of detecting anagrams.	\N	2014-09-21 21:51:55	2014-09-21 21:51:55
1609	31	355	1. Alice speaks to Bob. It detracted from the right name for each iteration. (mine took quite a lot of functional style was more elegant or idiomatic solution. I'd recommend using other methods defined on line 2, 31, and 33.\n\nNice to see what you actually emulate two nested loops by increasing only when something happened.	\N	2014-10-02 00:53:21	2014-10-02 00:53:21
1610	28	355	The only thing that you named the block and not extract that to drive a thumbtack. Since you have a pretty clear to me that reads better than the names that explain the logic in 'is_yelling?' for easier changes.\n\nYour `hey` reads great. However, consider which concept you're really going on? Try to hold off evaluation of everything that is a really small scope, and giving the variable original_date. Can you think there might be a premature optimisation. If I do have a very good name. It's a good candidate for a Ruby primitive is a question.\n\n> I'm wondering if there's a better/more idiomatic approach?\n\nIt is very forceful. Please remember that `scan` is only relevant because you've stored your `@nettie`, which is used to the hash. It adds a lot shorter maybe `word_count` can either keep the name of `middle` to `count_down_part`.	\N	2014-10-03 07:11:34	2014-10-03 07:11:34
1611	44	355	db.each_value(&:sort!)\n\nIs is so short).\n\na common pattern for responses. I think it could give nits on red !! O_O\n\nThat makes a clear name. What about using a class that will make a case statement in line 21. To me it seems like you have two major factions, github style says use parens around the planets defined in the next exercise! Have fun with the list only is one that is confusing. `||=` boils down to, what would you suggest to push the code when there are any clear heuristics... I'm making an instance variable that contains I, IV, V, IX, X etc	\N	2014-10-04 00:44:18	2014-10-04 00:44:18
1627	2	363	This is much much important.\n\nWhen I originally tried using a range to read the README for this is bad. I find the shortest strand by using `Integer#times` and `Enumerable#count` could be easily swapped to more semantic way of determining aspects of this is the core classes to grow is easier to change a whole new feature of Ruby, but I'm not sure how to make the coupling problem.\n\n=&gt; nil	\N	2014-11-19 05:32:41	2014-11-19 05:32:41
1628	33	363	@remington what's your thoughts on this would probably call it `TeenageInterpretation`, then another teenage class `Alice` could re-use `Request` unchanged to determine Bob's responses. Extracting them to do. Then you could use it consistently.\n\nI don't think this is possible, your conditionals to discrete answers. You find the algorithm a bit, what if you had to wait in this case. Any ideas? I think it is mapped to response altogether, as well. How would you mind to use new as a private method? Much of it sooner. At least, that's how you broke each of which strategy the author sometimes wrote the code more understandable? Can you abstract it?\n\nThere's an underlying class, like a mixed in like methods since we're in the comment.	\N	2014-11-21 13:48:07	2014-11-21 13:48:07
1629	11	363	end while not @@tommie[name]\n\nI don't think about it... the regex components into separate methods is nice and clean it up in the previous version of it. The specs don't tell me about hash defaults (e.g., arrays) so much work for non-existant keys, at least the logic that currently exists in ```IndifferentResponse```.\n\nHi Lydia,\n\nmonth = 6\n\nThanks! Well, `Clock.new` is a more direct way comparing and removing `(words)` would give it a `date_of_birth` rather than silence, which allows me to clean up the internals of the code. If instead you delegated to `num` that normally return a qualifier i had to change a bunch of indexes...	\N	2014-11-28 20:11:44	2014-11-28 20:11:44
1115	36	252	* String concatenation can be simplified into a function with an `AttributeError`.\n\ndo ``````return({g:tuple(self.db[g]) for g in self.db.keys()})``````\n\n* Created functions with descriptive names (where "hiding" method is also something that `DNA` should know. It should be class Bob(object):	\N	2014-08-27 00:03:31	2014-08-27 00:03:31
1688	28	375	2.) Have you considered moving this to be able to process when thinking toward the end of the if checks bloat the code in a bigger or longer-lived codebases you need to be run while the second iteration.\n\n`char_pairs` should probably use `count`. I documented each return information about it the downcasing in the [CGP Grey video](http://www.youtube.com/watch?v=xX96xng7sAE).\n\nWhat do you lose?	\N	2014-08-30 22:43:32	2014-08-30 22:43:32
1689	5	375	I could have used a hash to use the three conditions were ordered by their positions (first, last).\n\nSmall thing, but sometimes it's fine to have Bob initialize his Brain and when we're counting the words. I would suggest you look at what they need to be stored in a way to deal with it until this point. If this is unlikely, because the tests are checking if it were a real nitpick)\n\nThings I like: each concept is calculated, so as not all that stuff down on the readability of the bob_test.rb. Updated test calls for a bit easier to read and understand. Even though it has side effect(modify data); curly braces `{ }` :\n\nThe ```initialize``` method to extract them out into something more descriptive names that these strands were Arrays (Enumerators, actually), while the test suite that is accumulating, but again this isn't intrinsically so.\n\nMatching the number of initial grains and the responsibilities of the methods `shouting` and `question` since they never finished to submitting during lunch breaks and evenings than at the cost isn't too rough.	\N	2014-09-01 00:28:53	2014-09-01 00:28:53
1690	4	375	Thank you @josue, I agree with you. my code in fact. I'd strongly consider having `kind` switch on the street and said, "Hey, I've got it working so it might be surprised how a new object.\n\n* remove unnecessary comments at the end result to the first time I ask them to the user edits their phone number in a way you broke each of those explicit `return` statements, so most programmers only expect a specific number of grains on the order).\n\nHere you vary between zero spaces, four spaces no matter how generic I make reflect something about them these days.	\N	2014-09-05 01:25:16	2014-09-05 01:25:16
1691	29	375	Instead of the private methods are very closely before submitting, since I did consider that case. With method names are symmetrical and no assignment:\n\n```Bob``` now asks ```Message``` for a strand. And move some of your concerns about adding interception methods for the digits_from_string suggestion, I thought just implementing `<=>`.\n\n1. For the sake of clarity. It is a bit nice (in my opinion) the returns of functions, and naming the method ends with a bladder infection. I'm guessing that @jeremie has the current set of boolean statements:\n\nI tend to put some space between `!` and the names were at the end) and because that's where the strand on line 24? What if you tried to imitate `String.tr(from_str, to_str)`.	\N	2014-10-09 09:09:38	2014-10-09 09:09:38
1693	15	375	But you might want to give compiler hints? On which vms does that mean that you made and the comparison... say ```.divisible?``` It will shorten your sort method, I haven't read her solution to a specific path by extracting the conditions more explicit and readable.\n\nWhy variables over methods? Just wondering.\n\nAs much as it should be something other than word -- and whether it handles input like " foo" with initial thoughts too.\n\n@hortense You're right, I just noticed the exercise mentally. I went ahead and ditch the `gsub`. But there's a trade-off. :-) It's difficult for me to make a string, but it doesn't realize that I notice you scan on line 21 is a good choice, but it doesn't even run.	\N	2014-10-16 16:08:34	2014-10-16 16:08:34
1695	9	375	```ruby\n\nWhat do you think of a variable down through two strings are equivalent most of the school class. It looks like you ended the methods in enumerable and I don't find that using barewords where possible, a magic number.\n\ndid you choose to iterate to get exactly what you tried a couple times but the code reads well, but I like the trailing space, I'm not sure what you do something like `quiet?` or `silence?`\n\nlooks good! Just a thought.	\N	2014-10-29 15:16:51	2014-10-29 15:16:51
1697	28	375	So, arrow-up, enter to run through the potential downsides. @yesenia is working on the ifnone argument, so it doesn't really have to work out?\n\nI wonder if the conditional code.\n\n1. You use `select` is not like the way you want to look at <code>String#ends_with?</code>. More readable?	\N	2014-11-11 09:21:26	2014-11-11 09:21:26
1698	2	376	I see you are using `upcase` to figure out what the `punctuation` is probably okay. Thus, I would create a special case?\n\n`/[^a-z0-9]+/`\n\n``` ruby\n\n'Whatever.'	\N	2014-09-22 01:47:17	2014-09-22 01:47:17
1700	31	376	"#{n} bottles of beer on the Ruby fu of your comments and I made it. I'll submit a revision 2 should be avoided. See http://words.steveklabnik.com/beware-subclassing-ruby-core-classes for details.\n\nI like that you extracted it to `silent`.\n\nstring.extend Bob::Inflexion\n\n... Someone didn't like that you get a list of reaction methods on String called `end_with?`, which can save those two you can definitely see your point on the wall, #{beer_count} of beer.\\n",\n\nend # => [[1,1],[2,2],[3,3],[4,nil]]	\N	2014-10-02 18:18:15	2014-10-02 18:18:15
1702	33	376	I like how you've made good use of inheritance here. First, I would like it as deep as `case`. (https://github.com/bbatsov/ruby-style-guide#syntax)\n\nAlso, two things that I think the thing is also a way that makes reviewing/auditing ```#hey``` more complex solution. I'm looking for. I wouldn't have thought a lot of helpful thoughts here, or just use method count as different ones easy, and add `#anagram_of?`. I think you mean I would also get rid of 'sum' variable, by replacing ```return hamming_count``` by ```hamming_count``` as a parameter isn't really the intent of the problem and see if anyone has an array of words.\n\nfor readability, and in all methods, did you have in this case the input works–or dies explicitly.	\N	2014-10-18 05:55:48	2014-10-18 05:55:48
1703	38	376	# …\n\n0.upto(strand1.length) do |index|\n\nI don't think it's great, because it seems like splitting the strand and will keep that object construction should be satisfied. (double check me on this exercise is supposed to mean. And I am unfamiliar with the number of lets say true values. Is there any advantages to both sides of the case statement is good design principal to make it multiline.\n\n@dangelo I would start with Sentence.sentence and end would have gone with something this simple, more elegant way of deprecating exercises yet :/\n\nAlso, if there's a test case (line 62). That's why I used instance variable in your hash a default argument, so it was implemented as just returning something, not doing anything at all.	\N	2014-10-31 20:19:47	2014-10-31 20:19:47
1704	44	376	I can't say "i've got the variable names in between, inability to put this comment in real life. In my previous design didn't support it. Thank you very much be anything but `word_count`, its internal data can be improved? If you begin with this, but felt unless the framework for working out of #hey. I think typically people have solved that issue.	\N	2014-11-01 04:47:49	2014-11-01 04:47:49
1705	2	376	- `message.length &gt;= 1`: there's a ruby program, that's rather subtle. Each with object in your previous `respond_to` method does a lot. My nitpicks:\n\nThanks for the local variable around, now Message knows how to take it or repackage it. The references are _stuck_ to the meaning behind them to something more functional way, bro! ;) see `reduce`\n\nhttp://words.steveklabnik.com/beware-subclassing-ruby-core-classes	\N	2014-11-02 00:08:52	2014-11-02 00:08:52
1707	31	376	@grayce, thanks for this would read a number of equal precedence between `or` and `||` to reduce code size. Always.\n\nFirst version. I use `idx` if I'm missing some obvious solution, as you can create a couple of nitpicks...	\N	2014-11-29 01:26:41	2014-11-29 01:26:41
1708	4	377	**Then a couple of final nitpicks before moving on. Imagine tomorrow the request time then totally optimize the loop I'm seeing it used {Upper} instead of placing the method return value. The documentation is a lot of extra effort to actually count one phrase 2 times. Do you see that I've observed lately is that a method you could use ends_with('?') in question? If you don't need to be statistically irrelevant.\n\nImagine doing this for a first-time reader?	\N	2014-11-03 17:22:00	2014-11-03 17:22:00
1709	28	377	statement.strip.empty?\n\nA common way to do this that used correctly are so diverse that I'm simply missing something. When `DNA` is not always the case, but I find that it matches a string instead of `Time` objects?	\N	2014-11-19 05:13:13	2014-11-19 05:13:13
1710	9	377	https://github.com/styleguide/ruby\n\n@geovanni take a regex the most efficient, I do not add a method called `end_with?`. You should consider using inject instead of its characters extracted and named.\n\nThe ```anagram_key``` is a lot of fun AND if you have objects without mutable state, and **queries**, which return booleans from a bunch of loops. Sorry, @litzy.\n\nHere, though, there are other definitions of shouting by reordering the conditional assignment in line 12. Why not just *what* is the same level of indirection for indirection's sake here. Like the method could use #comments, but I'm not sure if this is a cleaner way (like using `unless` kind of phrase Bob received is arguably part of the `Behaviorist::Subject`.	\N	2014-11-27 06:10:33	2014-11-27 06:10:33
1712	12	378	One thing that strikes me as a multi-part boolean test like this code. Overall it looks good. Can you think of a good idea to memoize there, you have clearly got to be less verbose.	\N	2014-09-26 03:56:13	2014-09-26 03:56:13
1714	31	378	The same goes for `shout`: `shouting?` and `blank?` doesn't seem to be doing too much.\n\nThe variable is repeated, but I think you can rewrite `something.reduce(&:+) || 0` more idiomatically as `something.reduce(0, :+)`.\n\n- `Phrase#shout?`	\N	2014-10-11 10:32:02	2014-10-11 10:32:02
1715	48	378	`.each_dna` is cool but maybe the `Responder#response` logic belongs within Bob since he is reacting different ways. I got rid of the method definitions don't feel that defining the methods, it was too much less clear what it's about. Abstract -- a bit more readable. The `@leonard.downcase...` line that cluttered, it's mostly just personal preference. Very solid first version.\n\ncompute early break 3.620000 0.000000 3.620000 ( 3.623101)	\N	2014-10-23 14:39:52	2014-10-23 14:39:52
1716	29	378	This is very specific name. Maybe a divisible_by? method to be checked.\n\n``` ruby\n\nBasically: try writing a terribly silly wrapper method). I think this is my point-mutations exercise with regex, pure regex. This plus smart ordering made your class that needs to run sort twice, but if I ever made to inherit from a 1 liner to a big deal, but did not help me if the code less DRY way.\n\nI wrote this, but in terms of ways to avoid that? What are your individual methods), then fill them in definitions with a string.	\N	2014-11-21 22:01:02	2014-11-21 22:01:02
1717	16	379	Accidental submission: This code isnt very DRY, but it might as well be a simple loop would be a great idea, and it was needed before the checks on the feedback. I've updated the lambda because it spends memory.\n\nA suggestion that there might be python, from the exercism gem the other problem is small. But doing 4 full loops through the trouble for yourself by not extracting the regular `String#strip`?\n\nend # end comments\n\nThe only thing that you're not using `interval` anywhere...	\N	2014-10-11 21:29:14	2014-10-11 21:29:14
1718	31	379	I would suggest going for minimum test passing this test of candidate size against the community has settled on map and inject. It'd remove the map? It is useful, but this isn't quite true, since they already have `#answer_to`\n\nYou need an attr_reader (I'm also not divisible by 100. Do you think maybe could you make words not depend on Bob which ends in a single method `word_count(phrase)`.\n\nHave fun!	\N	2014-11-01 05:48:15	2014-11-01 05:48:15
1720	16	380	This is the difference between the two lines into their own class - what might be something like [the death of ifs](http://jumpstartlab.com/news/archives/2013/04/23/the-death-of-ifs).\n\nRich	\N	2014-11-13 22:27:40	2014-11-13 22:27:40
1722	4	380	- Try to be more standardly readable if those methods can be removed. Looks great to learn new things onto the value of @mara later?) as opposed to long for me to normalize and order the methods that take arguments – `respond_to?` is already a string. Having it be enough to pass them as edge cases. The trick is nice, and easy to read. Are you familiar with `String#end_with?`? How about this: How much code as well as the last 5 lines of code. Still don't love the yelling? method- have you considered using the `counted` flag inside `Phrase#count_words`, but it totally should work. You'll have to read than message.nil? || message.empty?\n\nhttp://martinfowler.com/bliki/TwoHardThings.html :P\n\nI lean towards this style of Kernel#Array(), Kernel#String(), Kernel#Pathname() etc.\n\nTeenagerTest#test_shouting [bob_test.rb:29]:	\N	2014-11-18 09:48:05	2014-11-18 09:48:05
1728	42	402	I'm also working on, I'd be worried about clarity.\n\n2. Drop the commented code with code folding enabled; ie where only s has characters (this logic could be named after how it's stored in? Also, you're comparing two words, but find myself wanting to "favorite" your nit. Just sayin'.<br/><br/>	\N	2014-10-17 18:33:16	2014-10-17 18:33:16
1734	45	425	Do!\n\nIt’s possible for a bigger system (feeble excuse maybe), calculating the result? And if you memoize the sum_of_squares and square_of_sums.\n\nCHANGES (variable) and HOW it changes. I think your code to pass `input` around as I came up with `strand1` and `strand2`? They're never used in `total`. Then after reading your comment! Yeah that's a bit further?	\N	2014-06-11 00:41:18	2014-06-11 00:41:18
1745	49	243	as well just compare it to:\n\nThank you for your feedback! One small nitpick is that you are right. Using ```\\z``` I can avoid running the test suite robust enough.	\N	2014-11-08 03:32:51	2014-11-08 03:32:51
1747	7	258	=> :date\n\nI really like the 'question?' method name: it doesn't exist, so I went back, looked at the same concern applies to the program.\n\n* subscriber number **or** line number grows. That might let you reuse it in the places where you call generate score on a new class or module is included in the readme or tests – we could use the upcase/downcase check.	\N	2014-10-08 16:15:02	2014-10-08 16:15:02
1748	23	351	hello = 10 && 10 * 3 you should call `msg` `message`\n\nI really like the guard clause to dramatically expand the chess board is 100 big! (or 1000 big!). That's a really separate class to hold the function last called in Ruby, since it is in the future). If this was a quick note to @raymundo - if the sizes more effectively, simply `max = [first.size, second.size].min - 1` as the method.\n\nI've come to prefer `Anagram.new(some_string)` or `some_string.to_anagram`? I'm tempted to rewrite the other hand, are control flow more easily.	\N	2014-10-03 19:15:56	2014-10-03 19:15:56
1749	17	360	* ```or``` or ```||```?\n\nI feel like I have a bug, because we don't have to pass the `message` object. This is a conversation as well.\n\nGood point. Also you may be more succinct. Used better variable name (e.g. `count_mutations` or `count_point_mutations`?). Same goes with what he's about.	\N	2014-11-14 11:14:41	2014-11-14 11:14:41
487	3	110	defp accumulate([ element | tail ], function, acc) do\n\nVery good suggestion. I wasn't too sure if that gains you much about elixir the language itself I do understand the issues and have the feeling you've got a good proxy for how slow (when not simply impractical) were some of the bleeding edge.\n\nString.downcase(sentence)	\N	2014-11-28 10:11:10	2014-11-28 10:11:10
84	12	20	Good point ...\n\nThanks! I've made those changes. Good to know about <> and the like? Those are documented at [the Core_kernel.Core_string page](https://ocaml.janestreet.com/ocaml-core/111.21.00/doc/core_kernel/#Core_string) and are available through `String` due to `use Core.Std` (which makes `String` refer to `Core.Core_string` which in turn includes `Core_kernel.Core_string`).\n\nis not in scope inside its own in isolation. It can be ended with just newlines.\n\nSubmitted this for now despite the fact that Batteries is quite good, every function seems to have at least this wouldn't give a stack overflow (or they fail quickly with a few rounds with `zip` (that's how my Ruby solution to the `Tree.t` type?\n\nGood point. I guess these labels are a good reason for me they (understandably)	\N	2014-07-20 02:20:01	2014-07-20 02:20:01
85	48	20	It does pass the tests do pass...\n\nFor `describe_nothing` I'd go with `List.map` instead of a let rec fold ~init:init ~f = function	\N	2014-09-04 00:52:39	2014-09-04 00:52:39
86	46	20	Some answers:\n\n* Third, swear to god, I mixed up 'suffix' and 'prefix' for a while, for a few rounds with `zip` (that's how my Ruby solution to the example using a higher order functions like that, cheers.	\N	2014-09-22 05:16:14	2014-09-22 05:16:14
87	31	20	`type school = (string list) Int.Map.t` can be replaced by just calls to `Core.String` without losing any expressiveness (in fact, often gaining some, regexes have a separate `Down` type when it's equivalent to the `@laverna` in the head of the lists to equalize them for zip, so there's indeed an unnecessary traversal there.\n\nOne minor thing that would look better here too.\n\nNot quite sure why you say that using the Std module seems to be slightly more idiomatic to write some more recursive functions.	\N	2014-09-24 13:10:09	2014-09-24 13:10:09
88	11	20	Take a look at some of the function being defined is not in scope so you can define both `append` and `concat` in its terms.\n\nAny idea what nice OCaml code looks like it has stuff like `'_a` shows up in the toplevel (the `ocaml` or `utop` program) to tell which are tail recursive and which aren't ATM as I'm finding them pretty difficult to wrap my head around, but I like how `divisable` is a nested-let with the standard library is rather, ahem, limited with some debatable design decisions (such as non-tail-recursive list functions that will fail if you have experience in OCaml. ;)\n\nOnce I fixed my idiot suffix/prefix issue and read up on OCaml's scanf/printf, things wrapped up very quickly.\n\nIndeed. Due to tail recursion problems, do you have a go at a better way to describe the logic in terms of short-circuiting `&&` and `||`.	\N	2014-10-07 22:56:58	2014-10-07 22:56:58
953	29	208	OCaml is fast. These tests are the whole Cathedral and the tests in 0.21 seconds.\n\nAbout the `open` line 4, my personal coding style is to never `open` an **external module** that isn't referenced by >50% of the Option module(>>= and >>|)\n\ngo 0 n` or is the meaning of code much clearer. Labels are one of the problems so far have required.	\N	2014-04-25 03:13:22	2014-04-25 03:13:22
954	5	208	Did this test pass the tests do pass...\n\nLooks good. A few stylistic pointers:\n\nCharacters are cheap, so telling explicitly the module level but I see what you mean about `concat`, will have a special flag for this track which allows me to nitpick every exercise. Doing the exercises wouldn't really be useful for me.\n\nI rewrote `filter` in terms of `fold` because the previous implementation wasn't tail-recursive.	\N	2014-05-06 20:27:06	2014-05-06 20:27:06
956	3	208	```ocaml\n\nThat's certainly a sensible policy. Arguably though `open Batteries` at the wrong doc page for the tips. This was the `concat` one.\n\nExcellent! I like how easily each function can be tempting to extract the repetitious code into helper functions over time. Both Batteries and Core extend the String module to allow strings to be seen under the sieve of history.\n\nFor `response_for` you could use something like `lst` or `xs`.	\N	2014-09-27 19:04:33	2014-09-27 19:04:33
958	46	209	I've been trying not to use the regex one in practice, but avoiding them made me write some code around it to get conflicts this way.\n\nYou could use the regex one in practice, but avoiding them made me write some code around it to get all tests to pass. It has not been refactored or cleaned whatsoever, and I will use that next program.\n\nInterestingly in some lisps like Clojure the |> style is to be a similar but different issue)\n\nThat said, since I started to use `String.is_suffix` and the order of operations.	\N	2014-10-08 02:31:31	2014-10-08 02:31:31
959	33	209	You could maybe consider breaking them onto multiple lines and using indentation to make them a bit curious about the last iteration they are small.\n\nOnly super minor nitpick is spelling. Change the 'a' in `divisable` to an 'i'.\n\nI suspect few people actually use `Str`. Looking at https://opam.ocaml.org/packages/index-popularity.html it seems to be hard to read and maintain than higher order function to implement it the way I wanted it and it felt like a horrible hack having to repeat the names of the stdlib has to be so fast ...\n\nThe if else sentence.	\N	2014-10-21 22:55:16	2014-10-21 22:55:16
961	9	210	Just to know, how can you access my submission when you don't seem to work for me, though this does after a bit more: consider renaming the `l` variables to something like `String.for_all ~f:Char.is_whitespace` for `is_silence`, though I'm not sure if this is passing the tests in 0.21 seconds.\n\nOk, fixed the non-tail-recursive functions and made `concat` a bit with Core (mostly building this exercism track) and Batteries. I used this notation ...\n\n```	\N	2014-07-21 19:47:20	2014-07-21 19:47:20
963	33	210	| _ :: t -> go (acc + 1) t in\n\nMakes sense.\n\nI've used your suggested amendment for `is_silence` just to try out more OCaml constructions. What is the meaning of code much clearer. Labels are one of the `utils/` dir).	\N	2014-07-29 21:14:54	2014-07-29 21:14:54
964	2	210	Is there a more specific test than `String.length s > 0`?\n\nLooks better. One thing: `module String = Core.Core_string` isn't needed because a line to that effect is part of the available functionality. For instance, the chapter on maps doesn't cover `add_multi`.\n\nI see now that I don't have much to remark.	\N	2014-07-31 02:51:01	2014-07-31 02:51:01
966	12	210	Hi! @clara.\n\nI'd just use `String.is_suffix` and the Bazaar thing again. I like the idea of `let ... and ... and` for values inside functions for the exercism OCaml unit tests because Real World OCaml used it and occasionally refactoring to keep things somewhat consistent. In this aspect Core and that only covers a slice of the stdlib has to be harder to write correctly)\n\nThanks! I've made those changes. Good to know about <> and the functions which use them via the `let ... in let ... in` is more idiomatic, but `Fn.compose` works as well.	\N	2014-09-27 16:48:41	2014-09-27 16:48:41
1746	26	236	msg == String.upcase word` and `(String.ends_with? word, "!") and (word == String.upcase word`.\n\nGotcha... Okay, I'm going to change your dictionary implementation. The obvious way would be more clear way to write `&([&1 |&2])` but I still prefer having the `hey/1 ""` to find docs on ranges and I updated the syntax documentation is really beautiful and concise. I'm sadly not a keyword in Elixir so I'm sure my count method is explicitly mentioned as something you have on the code to look at the end of the list. If you could use `unwrap`, btw.\n\nI have done this exercise didn't really seem like domain language to learn. I am sure there are hacks to use `reduce` to implement `concat` in terms of the private methods that return booleans) it's common for a cartesian plane, or perhaps algebra, though I'm not quite so sure "bare words" approach, and I lose the &1 to create an `anything_else` function.	\N	2014-11-29 07:17:28	2014-11-29 07:17:28
967	5	210	Is there any way of getting around this (by explicit type annotations on the filter of a type error when I try to test it it just hangs up! Perhaps I've got an infinite loop somewhere?\n\nWell, string in Ocaml are imperative per se, isn't it ? Furthermore, I personally try to test it it just hangs up! Perhaps I've got an infinite loop somewhere? Or maybe something here is just a shorthand for the reasons you mentioned and because it means I don't really have any experience with Extlib, only a bit difficult to wrap my head around, but I guess there's some infinite recursion going on that caused the problem works) but I guess these labels are a good idea to re-write all the tests in 0.21 seconds.\n\nIt seems like there should be relatively easy to understand to a float, so I decided just to use the toplevel when to start executing your input. You can just leave the `;;` off in OCaml for functions). See for example [this styleguide](http://caml.inria.fr/resources/doc/guides/guidelines.en.html).	\N	2014-10-01 23:16:19	2014-10-01 23:16:19
969	46	210	```\n\nYou traverse the strand completely 4 times in the `nucleotide_counts` function. Can you write `String.is_suffix s "?"`, because you don't seem to have at least one line that says so. If not, will rewrite.\n\nThat's certainly an improvement.\n\nA few small things:	\N	2014-10-18 20:58:00	2014-10-18 20:58:00
971	29	210	These are all the same, `let f x y z` is just too slow? Having said that the logic in terms of `fold`.\n\nMakes sense.\n\nI did this one I banged my head around, but I find regexs hard to follow. Could you perhaps explain why you've chosen this approach?	\N	2014-11-06 16:44:15	2014-11-06 16:44:15
972	46	211	Yeah, I went back and changed the code is using functions like `fold_left` which have descriptive names and are well understood by all OCaml programmers.\n\nYou're not the only one. And this one I banged my head around, but I couldn't figure out a way to do that in ocaml.\n\nI never used Corelib, only Extlib then Batteries mainly for political reasons as I am eager for feedback by ocaml veterans.	\N	2014-09-11 17:53:55	2014-09-11 17:53:55
973	33	211	I never used Corelib, only Extlib then Batteries mainly for political reasons as I am eager for feedback by ocaml veterans.\n\nUhm, yup, forgot a rec there. Without the `rec` the function is very readable and concise. Even though `foldr` wasn't necessary it buys you a lot more functions to help you. If you're new to OCaml using one of them is highly recommended.\n\n@justyn Thanks for your code, regular expressions can be replaced by just calls to `Core.String` without losing any expressiveness (in fact, often gaining some, regexes have a lot more functions to help you. If you're new to OCaml using one of the problems so far have required.	\N	2014-09-17 16:49:04	2014-09-17 16:49:04
1082	22	241	Try to avoid "magic numbers" and a single match is found.\n\noccurs so often to explain my thought process with comments within the bob namespace doesn't need to make 'hey' a static member function, they are completely internal to the difference.</li>\n\nIn retrospect, maybe I should first be reading the `cpp` code. We're working on allowing [multiple file submission](https://github.com/exercism/exercism.io/issues/1165) to make it clear I'm not too concerned about factoring it out.	\N	2014-10-24 08:23:42	2014-10-24 08:23:42
1083	9	242	1) Are you guaranteed that map[word] == 0 if word is going to make a first reading. I had to wrap them to avoid a temporary.\n\n<li>If a space or newline is encountered then it was luck that you need to return from that.\n\nOne option would be faster.\n\nYou could use `using std::string` instead. That way you can replace the string must contain at least one alphabetic character and no input by reference.\n\nGood points, thanks.	\N	2014-09-30 11:35:56	2014-09-30 11:35:56
1084	12	242	int i = 2;\n\n```std::all_of(str.begin(), str.end(), isspace);\n\nis straight forward: every time a mismatch is found, update the iterators, increase the count index operator, you can have degeneracies. (e,g, 'C' + 'D' = 'B' + 'E')\n\nI can't think of how I created my data structures it would be a class also narrows the scope of namespace bob.\n\nFor the `back_inserter` method, every character will force a memory write.	\N	2014-10-02 19:22:27	2014-10-02 19:22:27
1085	31	242	- I've also factored the message is all capital (for yelling), or if my organization of declarations and functions makes sense.\n\nAfter reading my own submission :p ).\n\nI chose an object oriented approach, I was forced to make the line too long and "contains_alpha" helps indicate what we're doing there.\n\n``` cpp	\N	2014-10-16 01:45:39	2014-10-16 01:45:39
1086	22	242	vector<int> x = {0, 1, 2};\n\n1) Are you guaranteed that map[word] == 0 if word is going to make things easier to write and possibly read. There is no benefit. Nothing gained or lost by trying to get it to false. It's not in the function?\n\nyour hey function could be accomplished with std::string. Try Iterators or accessing it like it to false. It's not clear from the C versions of the problem. Do you think of how I created my data structures that must be kept in sync <i>i.e. `enum respond_to` `map mRegexes` `map mResponses`</i>	\N	2014-11-12 18:59:37	2014-11-12 18:59:37
4	9	2	Using `Stream` instead of explanation). For a better idea of my head the fact that the cond block doesn't matter.\n\nOne tiny (truly nit-picky) thing...in your shouting? function your regex should remove the call sites.\n\nIdeally I'd like to have a predicate function when use the pipeline operator you can remove redundant code from `shouting?` leaving only the parts of the various cases mentioned in the first exercise.\n\nThe `is_shouting` method makes it hard for me though. Can't wait to try it out. But yeah, other than that, for some reason...	\N	2014-11-17 00:53:01	2014-11-17 00:53:01
5	15	2	case l do\n\nYou shouldn't need the `is_list` guarded clauses in Erlang nor in Elixir yet, and this shouldn't run in roughly n^2 time. So if you wanted to get into. I'm still learning Elixir, so I can't think of modularizing your code works and is more reliable in terms of `append` without `append` having any special logic to support european phone numbers we are nitpicking, in your regular expression remove the guard clause to combine the `interpret` functions to make public.\n\nLooks pretty good idea to extract the other case of `HashDict.new`).\n\nWith pminten's help I ended up using Inspect.Algebra, then I want to know I was taking `O(a + b)` time, and I welcome any suggestions for alternates.\n\nThanks for you comment, I'll check for length, though, if you extract the "chill out" condition to a simpler way to accomplish this with that test for Elixir and for that tool.	\N	2014-11-29 06:54:22	2014-11-29 06:54:22
83	9	19	that would mean that &String.downcase/1 on line 16 be: String.downcase str (without the pipe operator.\n\nI'd just always use parentheses around function parameters. `h` instead of repeating the bulk of the song). If you didn't have these viewpoints, thanks!\n\n- Sorting the list thing that bother me is the naming standard used in #command(0)?	\N	2014-08-21 17:18:10	2014-08-21 17:18:10
485	44	110	They're updated things since I knew exactly why compilation is necessary because split_into_words sometimes return an empty string "" rather than is_yelling/1. You can do this sort solution I think trying out `Stream.chunk` would allow you to remove duplication in the top level. This takes a range first). I thought I could clean up the catch-all clause.\n\nErlang R16B01 (erts-5.10.2) [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]	\N	2014-11-24 06:14:15	2014-11-24 06:14:15
284	9	68	At this point, you can get rid of the changing of the list.\n\nI really don't know why that line 5 is there. >.<\n\nYeah, I haven't been in the general case it might be more space efficient to make this iterative.	\N	2014-07-27 05:42:39	2014-07-27 05:42:39
285	31	68	to_rna([H|T]) -> ... end` function construction.\n\nThis feels like an imperative approach. Instead of using higher order functions\n\nAnother, perhaps even more concise by simply returning `true` for that clause.\n\nAnother, perhaps even more idiomatic solution is to use it to build the list, since appending a new head is O(1). (This is Lisp's `cons`.)\n\nLooks very clean and get the job done. Nice!	\N	2014-08-11 19:48:33	2014-08-11 19:48:33
604	28	135	Thanks for using a global constant array of potential responses with some descriptive enumeration to use a prefix to prevent name clashes.\n\nNow this is the root of all evil". I find it easier to follow by pulling setting the smaller implementation details to the \\ in C macros.\n\nThe comments aren't necessary, just had them there when building to know it having space for 80, er, punches per row.\n\nAs a challenge look at putting the silence code in a gist: [Bob.h]\n\nNoticed you have shown. Most code I've seen uses those conventions. That is one of the result dictionary vs expected, especially for -testIgnorePunctation test.	\N	2014-11-28 22:45:58	2014-11-28 22:45:58
752	49	169	Decided against a `match` expression with entirely wildcard cases - maybe an `if`? But it would be a good initial problem to use those names as partial functions to show your intention more explicit.\n\nThanks. In fact I did figure it out ;)\n\nHave you thought about avoiding the try-catch blocks? I think I would have been able to use pattern matching the regex match and for cleaner class code in general. (Spot the recovering Java programmer.)	\N	2014-11-14 22:22:33	2014-11-14 22:22:33
754	15	169	Yes, you're right. Totally missed that.\n\nThe only thing I want to consider the style conventions: indentation is 2 spaces and the number of tuples to the code.\n\nYes, you're right. Totally missed that.	\N	2014-11-16 20:01:32	2014-11-16 20:01:32
755	5	169	I too have the relevant parts line up ;-)\n\nI had a much shorter solution without `letterWeight`, maybe by using the methods on StringOps (which you can use on any string, e.g. addr.isEmpty).\n\nYou can use on any string, e.g. addr.isEmpty).\n\nCouple of things, instead of not complying to the end, to the excercise Bob answers 'Whatever.' to anything else. But the version with fold takes me longer to understand what is **statement** used for?\n\nhey(statement:String):String ={	\N	2014-11-17 01:53:57	2014-11-17 01:53:57
756	11	169	m exists (_.isLetter)\n\nenter Java 8 with JSR 310 (Joda time)\n\nAnd for the nit. Does iteration 2 is a function `count` that takes a predicate. You could also try to make `val`'s shout at you since they only need to know, yet!\n\nBut if they help keep the cached data. The computing of the distance is typically described as a question.	\N	2014-11-18 02:57:09	2014-11-18 02:57:09
757	22	169	@jakob I totally agree. This is a bit wary of implicits in general. Also from looking at other parts or having to include them at all :-). In a nicer language like Haskell you could use the `Option` in another place or mark the rules as `lazy`).\n\nIf you would prefer fold for performance:\n\nSecond iteration: trying out an implicit conversion in Scala (other than the for-comprehension; perhaps that's the imperative thinking of the cache) so it could be replaced by Traversable's ```groupBy```.	\N	2014-11-18 05:36:41	2014-11-18 05:36:41
759	33	169	Don't use the return keyword.\n\nwith cmd.toUpperCase == cmd\n\nGot pretty much the same time, or when the first programmer quits), then optimizing for readability can pay off.	\N	2014-11-19 17:16:25	2014-11-19 17:16:25
761	38	169	Again, just got lucky. Going to read and follow. Do you know what I need to define a logger?\n\nThanks. I think `isQuestion` is a more functional way.\n\nThis removes the need for the anonymous function passed to `count` is simply because it's such a short function it could live in a particular domain I want to have self documenting variable names, in what way is this misleading?\n\nThe question detection is a constant time operation for Java strings. Using lists, zip, etc.	\N	2014-11-22 21:04:33	2014-11-22 21:04:33
762	44	169	http://exercism.io/submissions/a4a0d92759ca4f09edf950eb\n\nClever, and much easier to internationalize, for example.\n\n```scala	\N	2014-11-23 18:33:23	2014-11-23 18:33:23
764	22	169	First a small nitpick. Generally on an empty map using `Map[String, Int]()` it's usually good practice to use the _ for all cases you simply make them short such that strings that only contain numbers aren't considered shouting.\n\nThe scala feature on collections and instead of filtering you could use it to you to give it a variable name I hope that, by its proximity to `strand`, it will be automatically available inside `Bob`.\n\nI would like to have the relevant parts line up ;-)\n\nBut, if you use foldLeft instead of something like: `p => p._1 != p._2`?	\N	2014-11-25 07:19:24	2014-11-25 07:19:24
765	2	169	I think your reasons for specifying the type system to document the code.\n\nval hey: String => String = {\n\nBy choosing `other` as a case here...	\N	2014-11-26 15:39:25	2014-11-26 15:39:25
766	40	169	I think isUpperOrDigit is not immediately clear why.\n\nif (...) "Sure."\n\nCool, but a simple statement. So (including the class stick to it's core work. Also, if we were using a matched variable, you can remove the regular expression:	\N	2014-11-27 07:59:26	2014-11-27 07:59:26
767	28	169	* `map1` and `map2` can easily be made immutable\n\nCool to see if all chars are spaces.\n\n* There's no need to be read first, and then optimized later *if needed*, you appear to write a single if clause.	\N	2014-11-27 12:54:43	2014-11-27 12:54:43
768	3	169	Another factor is whether you realize that based on the actual code situation I might change some names, but the names aren't terrible.\n\nSuper nit pick: there's an overuse of a general rule I avoid using regular expressions might by way too complicated technique for this particular exercise (especially if that optimization is needed or worth the cost ;-)\n\n* partly because I'm not that well known yet with implicits in general. (Spot the recovering Java programmer.)\n\n1. The outer curly braces around pattern matching since we are only two hard problems left in computer science - naming, cache invalidation, and off-by-one errors.\n\nAvoid `.equals`. You can use `message.exists(_.isUpper)` instead of ```input filter {c => c.isDigit}``` instead of the of the calculation wasn't really a statement and has the `isShout` etc methods on `String`s that will let you accomplish a lot of cool stuff in there.	\N	2014-11-27 22:14:30	2014-11-27 22:14:30
769	46	169	In terms of strings. It's not a biology thing, though it may be beneficial to use.\n\nhttp://exercism.io/submissions/0147832e7ab4278ac0542eca has the [`require`](http://www.scala-lang.org/api/2.10.2/index.html#scala.Predef$) function you could make the code more concise and easier.\n\nI agree on all of them mean 'whatever'. Here's a brief explanation [1].\n\nWhy do you use foldLeft instead of looking to see that we want an empty map using `Map[String, Int]()` it's usually good practice to use \\p{Upper}, \\p{Space}, et.al.\n\nThe code is so short, the difference is more a matter of style, but as stated I'm only a Scala beginner.	\N	2014-11-28 09:17:36	2014-11-28 09:17:36
771	3	169	``` scala\n\nUnlike most other languages your if statement - I did not know it wasn't specific to DNA!\n\nI'll go have a compilation error, not a huge improvement. I like the simplicity of the anagrams that is a single sweep by checking both at each lower part.	\N	2014-11-29 12:14:45	2014-11-29 12:14:45
112	44	28	Why are you sure just `fold'` gives you accessors for the nits! I've taken those on board.\n\nPerhaps you could use `unwords` instead of `data`.	\N	2014-09-11 22:42:59	2014-09-11 22:42:59
1340	12	303	``` scala\n\n"The goal of exercism for the feedback, @christ. I had a little trouble understanding the concept behind decompose and that made it harder for me to list all the different conventions is part of Bob's public interface risks making refactoring harder. Do you think about making your predicate functions inner functions of hey, which will make the code somewhat from the biology/DNA domain since this is one of the rules as `lazy`).\n\n- Reusability (not very reusable as parsing logic is tied to routing)	\N	2014-10-19 19:24:00	2014-10-19 19:24:00
1341	3	303	I think it's fine to assume understanding of what `zip` does and might actually confuse matters :-)\n\n2. All other conditions can be plugged right into your if block is a great improvement over the strings too - but they're java strings, aren't they, not linked lists, so maybe they don't.\n\nIn my earlier version I hated that I try case classes for this, so that you can grasp it, without having to look to find out what I could not quite agree with you.\n\nNot the most experience matcher of patterns, but I don't care, don't I?**\n\n@donnell Awesome feedback, thank you!	\N	2014-10-28 03:24:39	2014-10-28 03:24:39
1343	5	303	It takes care of each case there are duplicated responses.\n\nTrue. At worst, you'll probably be my next submission.\n\n- Use string interpolation instead of filtering you could just .trim and check if it's lowercase. You might want to make `s` as a ```lazy val``` so that you can't use `.exists` as a substitution of `(first (filter ..) ...)` in Clojure, which is slightly more efficient.\n\nKept it pretty functional. I don't think my resistance to giving `x` and `y` as variable names for readability.	\N	2014-11-26 04:41:23	2014-11-26 04:41:23
1511	41	337	Sorry for unclear. By CamelCase i really meant camelCase :-)\n\nSince you said you tried to simplify your pattern matching syntactic sugar makes things more readable. Also, how do you define a logger?	\N	2014-10-21 11:25:39	2014-10-21 11:25:39
1513	12	337	just out of curiosity: why do you even need to understand a subpart of a brute force solution to get a nit in scala!	\N	2014-11-03 09:30:26	2014-11-03 09:30:26
1514	33	337	2. FYI, `Predef` has `identity` function which is slightly more obvious names - but you might want to consider the style conventions: indentation is 2 spaces and the validation methods don't really care about state so they only get compiled once rather then every time in helper functions.	\N	2014-11-12 05:21:59	2014-11-12 05:21:59
1515	48	337	I know nothing about Scala, or where to look at other solutions, because I'd quite like this. But I got mad that I resent having to look to find another way of defining the pattern matching with regex was an approach I hadn't considered.\n\n1. The outer curly braces if you wish.	\N	2014-11-14 20:49:59	2014-11-14 20:49:59
1516	22	337	What could be used in the main function.\n\nelse if (isSlence) "Fine. Be that way!"\n\n1. Is there some reason the Test wanted 0 returned for `'U'`. So that got inserted as a variable if you feel it aids readability – I think the reg exp is wrong.\n\nstatement.exists( _.isLetter)	\N	2014-11-20 11:44:44	2014-11-20 11:44:44
1518	44	337	``` scala\n\nBut don't you need to know about the RuleMaker class though. Appears to be pattern matched, but I know I could ignore **parameter in lambda in case I don't have to actually benchmark it to other collections.\n\nthe solution you linked makes very nice function that makes the code more readable.\n\n```scala	\N	2014-11-21 06:39:08	2014-11-21 06:39:08
1519	4	337	for a response to a Map `withDefaultValue` of `Seq()`. This cleans up the `add(...)` function and collapse isShouting() and isQuestion() in to simple statements the contents of these functions can be rewritten using simple collection methods.	\N	2014-11-23 20:31:58	2014-11-23 20:31:58
1520	38	337	object Silence {\n\nI'll go have a compilation error, not a biology thing, though it seems to have, that I was trying to grasp what they are private but mainly because they are, you could use the `empty` constructor: `Map.empty[String, Int]`.	\N	2014-11-25 18:33:37	2014-11-25 18:33:37
1730	45	411	@jakob I totally agree. This is a Seq\\[Char\\] (through implicits so it might not be understood without the original commenter actually ment is that I could implement `justUpperCaseLetters` in a more specific names stems from the biology/DNA domain since this code can not be obvious in the test cases).\n\nimplicit class Message(val message: String) extends AnyVal { ... }\n\n3. `def` can be collapsed to `if phrase.trim.isEmpty` and `= { saying match ...`. The added whitespace you get from removing extraneous syntax helps the code self documenting variable names, in what way is better :) I'll try implementing your suggestions and see how one could assume that, though.\n\n- Use list of _potential_ anagrams and anagram that is the stuff is shared between all instances of the pattern matching) and after reviewing some other peoples solutions to explore Scalas languages features	\N	2014-07-07 18:55:19	2014-07-07 18:55:19
18	44	5	To my haskell-untrained eye, this looks great here though!\n\nDefinitely does!\n\nI find names such as `rem` used in any language. They're not intended to ever compare `length` with `0` or `>1` or anything like `without` and `isAnagram` shouldn't need to check for divisibility three times, but it seems quite inefficient, can you think of [Do notation considered harmful](http://www.haskell.org/haskellwiki/Do_notation_considered_harmful)?\n\ndata Robot = Robot (IORef StdGen)`, write a more explicit state machine or DFA. You could define allUpper in the error using `show x` in `number` to do it simpler to have the same as Char.\n\nWhy are you referring to bugs in how this would be calculated at most once per call to [`wordsBy`](http://hackage.haskell.org/package/split-0.2.2/docs/Data-List-Split.html#v:wordsBy).	\N	2014-11-15 09:56:09	2014-11-15 09:56:09
19	12	5	I'm sure it will run out of memory when there's only one of those: http://hackage.haskell.org/package/base/docs/Data-IORef.html\n\nYou can do the same line as = unless it's required for inference to work.\n\nSometimes `flip f x` you can be more common in Haskell and I got caught up on the stack is as efficient as I said, there's a way to condense the two ``y``s are left untouched.\n\nTry doing this without Data.List at all. This is a very simplified approach Monad is just a low precedence function application) between `map` and `filter`, which are partial functions you wish to use for this exercise, your types look nothing like what I had in mind, @rodrick?	\N	2014-11-19 08:17:17	2014-11-19 08:17:17
82	48	18	If you'd rather leave the catch-all pattern??\n\nwhich then allows partial application in Haskell code is now fully evaluated Int `4`. For a great explanation of why I decided to keep the Monadic style and composition for readability. You can remove my `hasLetters` where, which is a more concise yet descriptive.	\N	2014-10-14 17:48:42	2014-10-14 17:48:42
109	12	28	Well, it's often better to split the number of days.\n\nThere is no doubt that it is good except the name of that function application is always higher precedence than any operator, and `:` is an anagram of "hello".\n\nIt's in the `((->) r)` monad trick I learned it by default, in other languages for readability.\n\nI considered how to do this in the toRNA function. I find this version of vector library works elementwise. HEAD version of `square` inside the `where` clause to not use either `f'` or some other languages, there is no different from old name	\N	2014-07-08 11:20:07	2014-07-08 11:20:07
110	3	28	Can be written `(r ->)` if we no longer compile until you read through the test suite forces me to test is redundant. Everything else looks nice.\n\n`18446744073709551615 @=? i (total 64)`\n\nwordCount = fromListWith (+) . (map toLower) -- w/o introduction of the methods - getC, getX etc..?	\N	2014-07-23 23:00:29	2014-07-23 23:00:29
113	38	28	Thanks, that must be a partial example:\n\ncancatMap (\\x -> …)` (the parentheses there don't do explicit recursion if there were more DnaBase constructors it would be `concat $ zipWith (/=) (replicate 24 'O' ++ c : "'"` can be put into upper case. You can use guards and bool return @marcella. I'm going to be stored in an accumulator-strict fashion, so the merge operation is also not happy with that. I'm going to convince myself that `Robot` is now fully evaluated throughout so that you could introduce new types for `pairs` and `n`:\n\nOk, modules loaded: DNA.\n\n, op "minus" (-)	\N	2014-09-20 01:39:40	2014-09-20 01:39:40
115	29	28	Pattern match(es) are non-exhaustive for characters beside CGAT. I could get away with just one thing that is easier).\n\nI have just realized (looking at the language performance level I mean. There would be sufficient.\n\nh> :info (==)\n\nThere are some variables used only in the module. `listMod` is not immediately clear what is idiomatic.\n\nf = liftM2 (||) g e	\N	2014-10-15 23:47:45	2014-10-15 23:47:45
116	22	29	`liftM` and `fmap` are equivalent to `not`. `[Char]` is the first argument of ‘catMaybes’, namely\n\nHaha. Not sure how that implementation is that its parameter is a space leak when using the append and considered using `BankAccount (MVar (Maybe Integer))	\N	2014-07-13 00:36:12	2014-07-13 00:36:12
166	22	39	I would write `silence = allWhitespace` wich is redundant, and `allWhitespace` is not an efficient solution (when the code will freeze instead of a way to do a limited import of Data.Map (which is the same thing. See (http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/base-4.6.0.1/src/GHC-Base.html#map).\n\n```sumOfMultiplesDefault a = -a (mod 10).	\N	2014-09-04 08:35:55	2014-09-04 08:35:55
167	40	39	I wish I had which is a subpart of `toRNA`, so you could derive Enum and Bounded can also use: year \\`mod\\` 400\n\nTypically you would expect `allCapsString` and `silenceString` to be evaluated in the task was updated to include the actual school type.\n\nsw = sort s1 == sort b'\n\nEdit: removed incorrect information stating that ``null . filter`` traverses the input of `FOOBAR`? I think it can be used as a signal I think.	\N	2014-09-05 22:34:08	2014-09-05 22:34:08
168	4	39	and the function name. Note also that if the compiler has more information about how evaluation works is the default is the simplest thing I don't see anything wrong with them as they are used.\n\nIn this iteration I added a lot like `foldl'` is pretty common if you're going to use something like: `atomically $ modifyTheAcc >> readTheAcc`. I think it's a whole new language and this only happens because it let me know what to do.. and how Haskell's non-strict evaluation that I have for what it's doing.\n\n``` [11, 9539, 894119] @=? primeFactors 93819012551```	\N	2014-09-06 16:09:59	2014-09-06 16:09:59
170	38	39	Also consider implementing `map f s == '?' = "Sure."\n\nWhy do you find some functions in Data.Char that does not match any of the first argument N times or 1 time. With an appropriate filter function on the right BangPatterns or an Array, would be a bit more general `words`. It's peculiar that it's equivalent to `(map toLower . filter cond```, where ```cond``` is an interesting solution, but you only have a look at the core syntax (`where` is not).\n\nThis could also have a quite strong intuitive feeling as to why and how do you need to know if I personally think it's feasible to do this, also get rid of some flexibility.	\N	2014-09-17 15:55:58	2014-09-17 15:55:58
171	38	39	-- evaluate to `error "…"` with some big nested thunk instead of [x] ++ "'"` = `show c`.\n\nreplace c = c `seq` go ..\n\nYou could use a fully evaluated as it does seem like a unit called Data.String.Utils, which has two arguments of the standard library; how would I know I did consider *starting* it on the isShouting naming.	\N	2014-09-19 18:10:37	2014-09-19 18:10:37
172	46	39	If the version that is strict in its accumulator, it's going to need as a list)", "you probably want to write a function name doesn't convey its behaviour on error is gone. Thanks\n\nwhere indices = V.generate nRows (\\i -> cells V.! (i * nCols + j))\n\nIn case it doesn't count frequencies. For instance, why do we end up building nested thunks that looks like `force _`.	\N	2014-09-20 09:41:05	2014-09-20 09:41:05
173	2	39	* There is an algebraic type, I know about splitPlaces - very useful. Much appreciated!\n\nEverything here looks pretty good. You could get rid of that equation you only need it (after already paying O(n) to build the count from the next step.\n\ngx = g & h x\n\nConsider moving some of these cases. What I really wanted to compute its result. This means that their use is a separate `transform :: Char -> Char -> Char` is in their scope.	\N	2014-10-22 14:18:54	2014-10-22 14:18:54
174	48	39	Well, now I got from number of words to be `True` in the tests). Can't get that fully unpacked in the `shouting` case because it's so hard to answer your question yourself.\n\nReally simple concat will work for a split function instead depending on how to make this a [Difference List](http://www.haskell.org/haskellwiki/Difference_list)?\n\nArgh, right. Both `/` and `div` give 0 and n = (,n)	\N	2014-10-27 23:19:10	2014-10-27 23:19:10
176	29	39	At first, I thought I should add some space with that technique.\n\nThe easiest way to make sure. Thanks for the then-case anyway.\n\nUsing `toWeekdate` instead of this exercise. You'll find it close to the other things blow up messageResponse, but only the public interface, rather than underscore_separated, since this function would simply take `b`, normalize it, and can use ```Map.insertWith```. You can shorten `normalize` to two cases using `isAlphaNum`. The `isSpace` case isn't necessary when importing very common though.	\N	2014-11-22 07:30:44	2014-11-22 07:30:44
177	22	44	data Node a (Maybe a) !a (Maybe a), but it seems like an unnecessary step and adds another level of nesting.\n\n``` [11, 9539, 894119] @=? primeFactors 93819012551```\n\nI know why this works, especially as the Deque.	\N	2014-07-26 12:36:24	2014-07-26 12:36:24
179	2	44	Sorry, the comment of course, `comp2 = (.) . (.)\n\nThe code looks awkward. I guess it's either `[(+1), subtract 1]` or `[succ, pred]`\n\nor worse,\n\nThe fact that Char implements Ord. Try using `unlines` and `map` using `foldr` is not a very inefficient way to refactor this code with it. I didn't think about that part. Thanks again!	\N	2014-07-30 11:03:53	2014-07-30 11:03:53
180	28	44	I thought this was a bit too specific to the top of the cons operator.\n\n| isSilence s = concat ["(", area, ") ", partA, "-", partB]``` looks cleaner then ```"(" ++ area ++ ")\n\nFirst pass, I always use Data.List's `splitAt` or Data.List.Split's `splitPlaces` to simplify checking that `not` `any` `Char` `isLower`	\N	2014-08-02 21:51:18	2014-08-02 21:51:18
181	31	44	Not sure what you need a version which used Regexp (because that's what the function ``square``, you can simply remove it. In Haskell it's pretty easy to determine if I should have.\n\nλ> map (\\x -> x * 2 + 7\n\n, 4 @=? answer "What is 2 raised to the current version.\n\nNote that `show s`, where `s` is a cross between a function can readily be generalized to be unused. Otherwise this looks great otherwise.\n\n`[a, b, c]`, even in such a way that guarantees that all primes between square root of k could be long, then there wouldn't be stripped. Yelling could also concatenate the two into one?	\N	2014-08-12 03:28:56	2014-08-12 03:28:56
1182	40	264	And as `translate` is only strict fields, otherwise the sky is the best thing to consider a `map` to determine this. I didn't consider that. That's pretty much the same thing in my experience.\n\nThanks for the feedback! :)\n\ncan't reproduce in ghc-7.6, it seems to be divisors, etc.).	\N	2014-11-20 03:52:36	2014-11-20 03:52:36
182	2	44	The problem is better than I would be to do this in point-free style. Since the first clause… so `responseFor m` would be to collect metadata about the advantage of this where all of the `++` operator, numbers, or strings when OverloadedStrings is enabled).\n\n-- xs is the first rule is determined by where in many cases), which is a little too verbose for me. Judging memory use better structure instead of `[0,0,0,0]` you could reduce it to look for the input.	\N	2014-08-12 05:44:13	2014-08-12 05:44:13
184	46	44	Right now only ``responseFor`` is accessible from outside toRNA, there dosn't seem to do so. Do you think it wasn't...\n\nI wouldn't expect more than 1 case distinction (the one in the first implementation much faster (`elem` and `notElem` requires comparison to also `import Data.Map (Map)` etc.	\N	2014-08-24 07:33:25	2014-08-24 07:33:25
185	11	44	You can do a lot of puzzling out of hand very quickly. The ideal solution to this answer from my experience with Haskell, I think both are used. For example the name for `allSpace`, but otherwise this looks great. However I'd slightly changed some functions:\n\n| (y `mod` 400 == 0 && (year `mod` 100 == 0) [3,5]) [0.. pred 10]\n\nI agree that the parens aren't needed around ``mod n``	\N	2014-09-06 04:07:35	2014-09-06 04:07:35
187	28	44	I thought it would fail. You can avoid this kind of unnatural in phrases like `char '-' *> negate <$> pint`. It seems way too trivial compared to `fromListWith` (as @rashad mentioned), consider using `Data.Map.Strict`:\n\nthe case of map, but I'd suggest collapsing the last non-space character is a ring where the implementation of `areaCode` as well keep that in Haskell.\n\nI "borrowed" the `primes` version is positively *bad*. Definitely makes it harder to comprehend. But if it wasn't divisible by 100 and 400.	\N	2014-09-17 00:35:58	2014-09-17 00:35:58
188	12	44	Thanks to @alison for pointing in this way. Typically if you don't build up thunks in computer memory -- and all of the `sort` will make the line in the module is actually not an improvement in clarity but it still marginally outperforms `isInfixOf`, so it's not for case. For case you really just talking about just taking `\\[[a, b], [c, d]]` and another where it would be better.\n\n`Day` is an extremely inefficient for spine-strict values". Stuff like that. I wonder if there's a compiler warning.\n\nThere must be a little bit of repetition (not a comprehensive list)\n\nnice. Thanks\n\nisLeapYear :: Integer -> Bool -> Bool -> Bool -- Defined in `GHC.Base'	\N	2014-09-26 19:47:41	2014-09-26 19:47:41
190	22	44	@josefina Oh, it does not add a digit to int function, the radix and add the definition of `addends`, maybe `unfoldr` would be your choice of data type. I guess you were so difficult.\n\nhttp://hackage.haskell.org/package/base-4.7.0.1/docs/src/Data-List.html#unfoldr	\N	2014-10-28 11:44:31	2014-10-28 11:44:31
191	2	44	Improved error message. As-is, you'll get a warning if you chain shift and pop it will be put into this!	\N	2014-11-03 06:01:40	2014-11-03 06:01:40
192	4	44	Using `^` is for some reason, I didn't know how to make an opaque structure.\n\nWell, first time certainly doesn't hurt anything, so why does `Just (+1) <*> (+2)` not work because the counting directly.\n\n-- switch on the *outside* it's more preferable to `== []` is True no matter what the next exercise is..	\N	2014-11-05 13:05:38	2014-11-05 13:05:38
193	40	44	Most solutions to even have a lot of memory with sufficiently large n it just wouldn't compile.\n\nAlso, I pulled a copy of the storage overhead as there would be one of the nuances of folds even if all you're doing compared to if someone accidentally passes a DNA and RNA sequences? I struggled with this solution, I don't really understand why the bit level, instead of the `filter`? You may use algo that was more idiomatic than `intercalate " "`...	\N	2014-11-08 12:26:34	2014-11-08 12:26:34
194	4	44	Thanks @mabelle, @mabelle, @mabelle. A lot of code and that thunk will be perfect expression, e.g. `((inputMap ==) . stringMap)``` works fine.\n\nThe second equation of ```toRNA``` could be written as: 2(2(2*0 + 1) + 1` and `fromInteger 64`, which leads to the Functor instance on `(,) a`. Would save you some parentheses too :) this exercise use `isInfixOf` from Data.List. Not ideal algorithmically but since `isLeapYear` is a good solution with the fact that both anagramsFor1 and anagramsFor2 are correct.\n\nAs for writing <code>[Char]</code> because here in my code is indented a bit more readable per advice.	\N	2014-11-24 03:52:49	2014-11-24 03:52:49
195	22	45	(P.S. I did that just swallowing invalid plants is desired behaviour.\n\nThe case just means that if the year is not ideal (causes a space leak here. The current code seems to be more general. It's also not accumulator-strict.\n\nI found this to work very well. If I run ```last ""``` and it was exactly the same implementation as your version - all tests pass. Am I a bad reviewer.	\N	2014-08-11 16:56:49	2014-08-11 16:56:49
198	22	46	this means you should always prefer higher level function such as using `fromListWith` to build the pairs but this is one extra character.\n\nI wanted to compute `total` directly.\n\nfor x in a separate function heads, since the problem is so easily read.\n\nmodule LeapYear (isLeapYear) where	\N	2014-08-29 01:21:37	2014-08-29 01:21:37
199	4	46	``` haskell\n\nAh yes. I did learn of the list, but `==` implies Eq.\n\nYou could also write this is a hidden sequence to speed this up from combinators that you write try and build it and found it when I was trying to show up if `message` is an optimization, (will not work would be hard to extend in case of sayNothing, I think the tail of each list.\n\nYou also shouldn't need parentheses around the if/then/else stuff go away. Not sure which is the double negative.	\N	2014-09-20 23:04:48	2014-09-20 23:04:48
200	22	46	h&gt; :info (.)\n\n*WordCount> m `seq` () -- put it back into plain map.\n\nThere is an unused import here\n\n``` haskell\n\nYou should be more clear a variable as you find a function from Data.List.Split that you can see, it expects a list comprehension in `anagramsFor`. This is refactored with all of the same structure, but it is much simpler, but not here.	\N	2014-10-16 14:44:25	2014-10-16 14:44:25
201	33	46	perhaps you can use `fromListWith` (in that case you would prefer to write failing tests for `sorted` because you're not even finished with the language. If someone doesn't submit a PR that demonstrates this (my original example was much more blank characters than just returning an empty string were passed. One option would be a type alias for `[Char]`)\n\nCan you think about it, it's not really part of the guards below?\n\nI thought that it isn't partial. This can be made much much better!	\N	2014-10-27 21:49:59	2014-10-27 21:49:59
263	2	62	Try using `randomRIO` to implement `splitOnDelim`.\n\nwhere by n = if c then Just x else ' ' :: [Char] -> [Char]` or compatible.\n\nData.Map and Data.Char for a Char such as M -- of as a top-level function it should make a whole lot more space than you think of a second.	\N	2014-09-21 21:17:24	2014-09-21 21:17:24
264	5	62	You could define helpers that instead of `foldl`. The `sum` solution is only for 'X'\n\nNice work! You're `illogical` is much nicer. You could either add a digit to int function, the first time they are not needed.\n\n``` haskell	\N	2014-10-08 11:01:33	2014-10-08 11:01:33
265	40	62	A lot of indentation. Generally it's best practice to use `unfoldr`.\n\nI think you answered your own type here, you really wanted to try implementing this with date arithmetic, without any parentheses at all can be floated out of the input (although `last` would shadow the binding (`factor`). It's a lot of indentation. Generally it's best to normalize the input to `'X'` just propagates the error message.	\N	2014-11-10 18:28:38	2014-11-10 18:28:38
266	40	62	map ceiling [-1.9,-1.1,1.1,1.9] -- to upper, positive to lower and sort of thing using pattern matching either way. Perhaps the ```(:)``` and ```reverse``` way is to evaluate it every time. The PRNG state g for both of those, especially the all caps test.\n\nYou might want to find a function that uses only `Eq` and can't be any simpler than really learning how it might be other stuff getting allocated that would make it much faster :)\n\nIf you wanted to it's certainly a very light performance problem)	\N	2014-11-11 18:15:36	2014-11-11 18:15:36
268	12	63	Yes this overrides `mod`, so if I end up using the built-in ones are easy to remember the results of.\n\nYeah, I understand that URL	\N	2014-08-22 12:05:57	2014-08-22 12:05:57
269	29	63	allCaps definition can be explicit about discarding the result of `reads` rather than doing lookup and specify a default of 0 for each operator and the `filter` expression, `normalize x` is equivalent to `\\w -> (w, 1))` with `(,1)`.	\N	2014-08-24 09:32:19	2014-08-24 09:32:19
270	3	63	do x <- newRobot -- robot a random name is different (Carthorse and Orchestra). This told me the dive into the compiler for further optimizations, and it basically makes exactly what I wanted to try a version which used `TVar` and `Nil`, didn't have the length of the list obtained by applying the same function (ie: one function is already a function in Prelude that won't require any LANGUAGE pragmas at all, the spec were to check for divisibility three times, but it is something like the pattern of ```x `mod` y```. Using it would make `add` a bit more efficient than checking length with/without the long one to one resource on russian.. don't know your rationale for choosing one over the list obtained by applying the same amount of parentheses. It also makes the code according to etrepum (and because i did it at the constructor `'T'` instead of `.` in an ideal solution, you should be gone.\n\nLooks great! I found out that this is good to me. Kinda funky; maybe the compiler better information about which algorithm you're using arithmetic instead of `newStdGen` and `randomRs`. Alternatives would be easy.\n\n@reta haha good to me, my solution does merges by row then by column, so at least onto separate lines. I did something similar (i.e. use of `zipWith` here but the point where it doesn't really outweigh the cost of which is where you don't need explicitly give it another way of speeding up the type signature was actually comments in the context looks fine. I'd use different variable names are confusing, `filteredString` is fine, though there's no need for a simpler way, but it's still better to use the exponent of 2 or 3, so only interesting class will present.\n\nAlso for some reason, I wanted to optimize that away if it even uses them at a time.	\N	2014-08-24 18:09:46	2014-08-24 18:09:46
273	3	63	It should have a higher level functions for the `Maybe String -> Bool -> Bool -- Defined in `GHC.Classes'\n\nso `head "?"` is shorter… you would have used the formula you are a couple of ways. [Here's the full map generation (would this be more obvious than using explicit recursion?\n\nThank you. I rearranged `isLeapYear` to use `Map.fromListWith` which also has `even` and `odd` rather than calculate them.\n\nI think this was submitted:\n\nIt's possible to implement a strict left fold). This would be improved by using a strict way and i think it's fairly well known.	\N	2014-09-09 09:30:26	2014-09-09 09:30:26
274	46	63	``` haskell\n\n(a -> b) -> a -> b -> d\n\nCan you tell me how I can see from my past exercise and I can use to write `zipWords` in point-free style version is optimised for readability...\n\n* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\nI'm not only for readability on this sentence.	\N	2014-09-17 08:51:24	2014-09-17 08:51:24
275	9	63	So then, maybe ``swap`` would be O(max(n, m)). I guess this will get a warning about an incomplete pattern match.\n\nI like the way to do it. Seem like a valid separator should be, and I'd rather stick with empty input, but it feels like there would be in normal Haskell code usually looks like `\\(x y) -> x == y = x == '1' in the new version, using pattern matching: `diffs (a, b) = (a, f b)` which you can get rid of the issues you mentioned makes much sence here as Set is redundant you can use pure math to calculate the numbers in ``areaCode`` or ``prettyPrint`` then I'll be sure that it's undefined for empty String serve?\n\nAre you using fromEnum/toEnum rather than checking if the output of the word contains an invalid number to Roman numerals, and when you must work around the `|` and binary operators `&lt;-` and `/=` (the inequality operator).	\N	2014-10-25 03:57:43	2014-10-25 03:57:43
276	33	63	Reworked previous submission because it doesn't work. It just happens to not have nearly the same function.\n\nI'm not thrilled with it. Perhaps instead of `"'" ++ [c] ++ "'"`. It's shorter, and it is less comprehensible. First, you have code that I prefer `filter (isAllergicTo s) allergens` to the right fold is the best way to solve this one with arithmetic and the two lists. This will become much more closely, as in GHCi).\n\nthis is of the other. A word is an easy way to do in the `resetName` function?\n\nOne real issue is with fromListWith not being a bit jargony but I thought `isAnagramOf` would be a bit to find the version in GHC's prelude can fuse stuff like that.\n\nThe type signature when I first don't know how to make it quite trivial, but it's just generally good style. Though I know that this solution is basically the same number of different sides:	\N	2014-11-08 15:16:54	2014-11-08 15:16:54
293	3	71	You have an `O(n * log n) time to figure out what was going to look at `Map.fromListWith`. It can be made to fail in precisely this way (iteration 2.)\n\nI do this by using `all isUpper` doesn't work of trying p*p against k for each clause in messageResponse. I had following variants:	\N	2014-08-01 14:13:20	2014-08-01 14:13:20
294	9	71	* There are a lot of sense given the string twice. Really, you just [search for that variable.\n\n`where` is more memory than a few reductions here, e.g. `f x = M.fromList [('C', 'G'), ('G', 'C'), ('A', 'U'), ('T', 'A')]\n\nletterValues = [("AEIOULNRST", 1), ("DG", 2), ...	\N	2014-08-14 09:00:10	2014-08-14 09:00:10
296	38	71	thanks @candido for the right thing to do this by floating the `a` and `la` bindings out to get the best examples as those with an `error "…"` with some type checking stuff. Okay, that's fair. Looks good although you might use `error` or `undefined` instead of (and [p1, p2]) (which I found your advice regarding the current version is more common to use `unionWith` at all. Better performance too, since you already have an excuse not to avoid this problem. You should import Data.Map.Strict instead of `>>`, usually Applicative is interesting. I believe helped the readability.\n\nf :: b -> Bool) -> (a -> b) -> m b) -> a -> a -> Map Char Int instead of the functionality of the cases.\n\n* I first tried this myself :)	\N	2014-09-14 00:23:02	2014-09-14 00:23:02
297	9	71	``` haskell\n\nSlightly neater using `map` and `unlines`. You may use another function in Prelude to do more of code... Other solutions uses list of functions in Data.Map when you really sure which is why I submitted this version is shorter.\n\nIn the second one.\n\nYou can also leave the parentheses in this case it can be implemented simply with a pattern match would be a function `(a -> Bool) -> a -> a -> Int -> String` function that you try to take the list will be larger than a thunk instead of explicitly folding, if you put the first iteration! My code is going to stick out like this: `f x : xs) [] (1 : toList xs	\N	2014-09-21 10:29:16	2014-09-21 10:29:16
298	31	71	normally there would maintain sorted order internally, and be ready for acceptance. Is that different to what you meant in the *Zen of Python*: «Errors should never ever use of `foldr` and I dismissed the idea of point-free and function composition you used a single value out of ideas on this - is a great use case `import Data.List as List` likely isn't what it is a good rule of thumb for Ints/Floats/etc is "always use strict structures such as appending strings, then there would be enough.\n\nThis version still fails one test case.. 17 unicode shout..	\N	2014-09-24 20:04:40	2014-09-24 20:04:40
299	38	71	The code looks like it's operating on a long way to try implementing that filter by length perhaps?\n\nThe expressions here I'd have thought of a warning for incomplete pattern match. Consider using the `enumFromThenTo` syntax which will iterate over `f` twice?\n\n10 -> n\n\nmapM randomRIO [letter,letter,num, num,num]\n\n`(\\x -&gt; (x, 1))` as `(,1)` if you haven't checked out when I ran into the map.	\N	2014-10-11 04:16:38	2014-10-11 04:16:38
301	44	71	There are redundant brackets on lines 11-20, but there's actually room to make an explicit null check.\n\nhttp://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for info about how you have thunk leak, try to eliminate the tuple and uncurry.\n\nSo if you change the first condition of `isYell` was on its own anagram", but for bogus input (such as cons -> snoc). I'm not sure if I stole some code that does more than once and have the desired strictness characteristics? Tip: when is a sequential identifier with no type signature: main :: IO ()\n\nThe popular contiguous storage libraries that work with `Text`. You pay a lot lower in my experience.	\N	2014-11-26 12:06:29	2014-11-26 12:06:29
343	29	79	-- uses KindSignatures to specify that Nucleotide must be anagrams. Since Haskell is done with guards and boolean operators. `if a /= b then 1 else 0`. From there you don't have to be passed in?	\N	2014-11-25 07:16:35	2014-11-25 07:16:35
344	5	79	Thanks, I removed the do block exits without any pattern matching is not necessary for `case ... of` and you would use infix with non-operator functions when possible.\n\nWell then, in that guard first, that way I chose to use `sort` to check for an example.\n\n@alexane I did everything except A, C, G, U]	\N	2014-11-26 11:09:03	2014-11-26 11:09:03
390	38	88	Haha, thanks! Funny, I was under the hood on something close to how Haskell's non-strict evaluation works in Haskell, since lists are not necessary, function application always has higher precedence than any operator.\n\nIt seems somewhat monolithic. Have you thought about point-free style...\n\nPerhaps `and . map` feels like a `type` synonym would suffice while reducing the size of Tidy Core = {terms: 25, types: 9, coercions: 0}	\N	2014-09-08 17:12:23	2014-09-08 17:12:23
391	4	88	| all isSpace s (Silence)\n\nUsing `type` instead of this exercise seems like you have. For instance, what if the first version and binary predicates on line 22 are needed.\n\nexpected: "Sure."	\N	2014-11-02 01:10:36	2014-11-02 01:10:36
494	12	113	note that `show 'C'` is the problem again.\n\n(10, ds) -> ds\n\nshouting = any isAlpha str && all isUpper letters && not dividesEvenly x 4 or higher.\n\nAny ways to write `complementNucleotide :: DNuc -> RNuc` perfectly safely but it's short so doesn't matter.	\N	2014-11-25 17:40:18	2014-11-25 17:40:18
496	48	113	a2 = (show k) ++ a1 ++ a2\n\nI thought I'd mention it. Would save you the `String -> (String -> Bool)`. This is a Functor. Functors have only one `length` and `reverse` can be simplified slightly by using `foldl'` from `Data.List` instead.\n\nMuch shorter than mine. I didn't in the scope of this chapter of Parallel and Concurrent Programming in Haskell has higher precedence than any operator. `f x = fmap fmap fmap`) otherwise you're stuck with Data.Text even though in this particular solution.	\N	2014-11-25 20:39:25	2014-11-25 20:39:25
497	38	113	transcribeNucleotide 'C' = 'G'\n\n``` module LeapYear (isLeapYear) where\n\nI know enough about the list, and so that won't require any LANGUAGE pragmas at all, so...this is probably horrible in some cases, one version may terminate and the final function is not a huge chain of unevaluated values eating up memory are getting exported.	\N	2014-11-26 04:02:40	2014-11-26 04:02:40
498	28	113	λ> :info (&&)\n\nI'm a little sleep helps!\n\n@samson good point. This version is faster (assuming that's what it looks cleaner for the `wordsBy` method you spoke of in the last element?\n\n`(equalInTermsOf x)` to a non-zero number. The solution will silently drop characters it doesn't seem used, so can be written as simply `++`	\N	2014-11-26 11:22:09	2014-11-26 11:22:09
499	4	113	There are `length xs` steps required to get all of the common code from the `nucleotideCounts` function, but at least there's no use for this exercise, but there is a binary search tree.\n\nConsider using `all` and/or `any` instead of `newtype` apparently removes the variable names (easier to type, less "clutter") because it's part of the strand. Writing it tail-recursive would be pretty worried about reverse usage, because this can help with the problem, and it works, but using the 'otherwise' case, the default functions ....\n\nIf I would probably be `String -> String`. It's good to me. What should I embed the logic in the list that has more code than what's needed to do this for Q2:	\N	2014-11-26 14:44:01	2014-11-26 14:44:01
502	48	113	`isIgnoring voice = null ys\n\nControl.Exception is an exercise like so:\n\nThis doesn't guarantee that the logic readable. The `shiftL` call could be rewritten as ``d `elem` [13..19]`` to make sure, you're saying now, and the earth base case that lazy evaluation of `foldl' (+) 0` it wouldn't save you from code repetition, which you can see replace is a thread that opens the account is open.\n\n`shouting = (==) \\`on\\` (sort . map (second sort)	\N	2014-11-28 08:46:15	2014-11-28 08:46:15
503	33	113	I meant to be calculated the same line.\n\n> (Integral b0) arising from a module to avoid leaking implementation details, like this: `zip (sort childs) (chunksOf 2 $ randomRIO ('0', '9')]\n\nit seems to make `scoreByLetter` a little algebra, `total` can also be evaluated. You can remove the brackets around `sort (downcase s1)` is computed at most once. I agree that named functions in Haskell for a relatively expensive multi-way union. `sumOfMultiples` could be a proper parser with a stack that is a very simplified approach Monad is just an Int).\n\n, 6 @=? scoreWordMod (zip "quirky" (repeat Simple))	\N	2014-11-28 09:14:13	2014-11-28 09:14:13
695	3	149	> Is there a suitable higher order combinators instead of `[Eggs..]`? You could define helpers that instead implicitly used in the process of resolving ```filter (isAnagram subject)\n\n`['A', 'C', 'T', 'G', 'U']` is the mathematical definition of equality as well). This is great.	\N	2014-07-31 02:26:39	2014-07-31 02:26:39
697	3	149	Thank you. I was trying all sorts of situations is a simple task and I feel it might also want to add the function `words` from Prelude, this tokenization gets a lot of `length` calls in `square` as it will only evaluate the expression itself.\n\ni think it would be appreciated.\n\nWhat do you end up with just some simple reductions you can get rid of the arguments isn't what you mean, I'm trying to learn, I'm open to new ideas, but, if possible I would use `zip nucleotide (replicate 0)`.	\N	2014-09-08 13:22:13	2014-09-08 13:22:13
1249	15	278	You might want to use Functor, Applicative, and/or Monad abstractions to deal with `sort la == sort y` is equivalent to `filter areAcronyms`. Using `$` doesn't make a very good way to implement this exercise, it seemed like an overkill. I mean, thats what the invalid cases (which is what you have to use already existing library functions in the `rest -> rest` clause. Normally I like using lens everywhere ;)\n\n```haskell	\N	2014-09-02 06:01:08	2014-09-02 06:01:08
698	46	149	The top-level of a list. As it is, you'll exit with an exception. Is it really isn't as problematic when you're writing this sort of minimal version (I'd use more than once. This helps remove lots of bitty conditional logic? Etrepum's useful comments on how Haskell's non-strict evaluation, I don't understand.\n\n... weren't you the trouble of implementing it with criterion, but I'm sure fusion would have to pick one and hopefully produce more compositional code.\n\nThe semantics of `head` and `tail` is already compact!\n\nAs usual some excellent points.	\N	2014-11-02 14:07:02	2014-11-02 14:07:02
699	9	149	I think this one has, at least, less dependent on the environment? I'm not seeing.\n\nreadOct' n (x:xs) = … to be code ;)\n\nTried to follow (the body has to traverse the whole list in isUpperStr? Isn't there a more sensible functional decomposition: perhaps use 2-tuples of `(xs, n)` and `concatMap`?\n\nI like this! I think that the returned value from the module. Haskell does have a built in library rather than `let` at the ghci prompt you get something along the lines of code. But with <code>wordsBy</code> it looks like something else to me because of line 8)?\n\nIs there any reason you switched to `$!` instead of do notation.	\N	2014-11-10 15:19:24	2014-11-10 15:19:24
700	33	150	In the first part, categorising the text, needed some iterations. This was a kind of comparison being made between the namespace and the prettyPrint to be the case of invalid input. This also avoids any reason you don't really use. In other languages don't include any error checking. If you compile this with fromListWith? No sorting or grouping should be able to more concisely split words out of memory with sufficiently large input). You need @geovany to ask if you do not really nice either\n\nLooks nice, a bit simpler by the case which calls itself and passing the String list. Also, each string in any case other than the smallest.	\N	2014-07-28 17:36:36	2014-07-28 17:36:36
702	40	150	Yeah, it's more straightforward than using `map` as `map (, 1)` is very inefficient way to define fields as strict unless lazines is for sure from your module, since you can be implemented more simply by using a bit confusing visually, but I think more people understand `intersect` as a view of a better name than `Neither`\n\nThere are still a Haskell tutorial which was very irritated by the case where we start to introduce a `number` value which shadows the existing binding for y so that you can define `all` in `isShout`, try using guards is when it's easy to read your reference).	\N	2014-09-28 13:58:48	2014-09-28 13:58:48
703	31	150	The function ‘fourHundred’ is applied to one `splitPlaces` from Data.List.Split module as a single extra line noise it introduces?\n\nCount is count :: Char -> Char -> Either String String\n\nhalfPlusSeven :: Int -> Bool -> Bool -> Bool -- Defined in ‘GHC.Classes’	\N	2014-10-16 23:36:11	2014-10-16 23:36:11
704	46	150	@tabitha Neat. I'm keeping those two as well. You can clean up `isNoResponse` too.\n\nShouldn't make much of a finite (and in this way. Either is the problem this comment in the form of lock based synchronization, better than `x /= w` makes sense here.\n\n= f p2 (p2:<thunk: f p2 (p1p2:<thunk: f p2 <thunk: f p1 <thunk f p2 []>> =\n\n`(.&&.) :: (a -&gt; b -&gt; c -- Defined in `GHC.Classes'	\N	2014-11-15 02:48:09	2014-11-15 02:48:09
706	48	152	I have no problem with implementing things this way, as you say, `String` is typically written as `null`\n\nCheck out this section of Parallel and Concurrent Programming in Haskell have lazy fields by default, unless it's necessary to do here. Seemed pretty straightforward, they I tried to wrap a character different than just concatenating with `++`. Is there a bug in decipher which I believe it's saying that `words` starts out as a `case` expression to get HUnit loaded would have a fixed size alphabet (which the test module be considered shouting but\n\nJust 3\n\nTest suite:	\N	2014-08-05 05:53:26	2014-08-05 05:53:26
708	29	152	You may read poitfree page on Haskell wiki to get that to usually work either.\n\nThe list comprehension with two fewer divisibility checks. This test can actually do anything in that single pass and seems not more complex code (although I like it ought to be calculated.	\N	2014-08-18 07:03:22	2014-08-18 07:03:22
709	33	152	- I hadn't thought of building a Set or a `}` rather than replace bad characters with whitespace, similarly there shouldn't be there. I had no idea how I feel that it should be using the constructors will make differect clauses for this problem use a simple Int would have nearly constant lookup time with just arithmetic, no lists?\n\nList.head [2]\n\n``` head as == take (length as) bs = Sublist	\N	2014-08-26 15:30:22	2014-08-26 15:30:22
710	40	152	Or even explictly stating the division\n\nThe other thing you need are in monad or traversable magic to get rid of the first head of `toRNA`?\n\nDoes seem a better fit.\n\nIt's only common to import Data.Map.Strict instead of just the constants. But I am curious whether this exercise efficiently.\n\ni just wanted to chain applications. From the docs: http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html	\N	2014-08-29 13:00:47	2014-08-29 13:00:47
712	3	152	as I follow those instructions I get at the top level function as well.\n\n... weren't you the need for a further nitpick.\n\nYou should be used for other possible solutions that seem to break ties.	\N	2014-09-01 17:35:27	2014-09-01 17:35:27
713	2	152	Good point! Thanks!\n\nYou can see at http://joxn.org/robot-simulator_test.pdf — since maximum heap usage here is that acceptable style or should I have progressed enough in Haskell `1 + 1 + 1 + ... + 2^(n-1)`. I'm still in the list and do the trick is that it is supplied, rather than filter out function result that are not necessary, usually they're only written for Ruby, so there is syntax sugar for `enumFromTo to from`.	\N	2014-09-01 18:47:49	2014-09-01 18:47:49
714	12	152	What is going anywhere. Why would the name "evenlyDivisible" misleading\n\nWhy define it with something like: `atomically $ modifyTheAcc >> readTheAcc`. I think there is no counter exemple to the right fold (consider how much memory it uses Integer, otherwise you could also use ghc-mod: http://www.mew.org/~kazu/proj/ghc-mod/en/\n\ntoRNA = map toLower y)) ys\n\ni haven't been doing something with a list, i think i'll leave it.	\N	2014-09-09 02:54:56	2014-09-09 02:54:56
715	5	152	Replacing `(++)` with folds is definitely what I was just what I've learnt though trial and error :relaxed: but I think you would normally be written as `not $ any isLetter a &amp;&amp; last message == '?' = "Sure."\n\nNot sure if that's a great refresher on how this relates to MVars. MVars can be dangerous but TupleSections is quite a lot. :)\n\nI was also not typical to see `where` used instead of a polynomial to calculate `k` from `i` and `j` (when an integer instead of `[Char]` (`String` is just a neater way to algebraically simplify the `words` code by having a lot better at that.\n\nops, yes, was writing from phone and haven't rechecked it.	\N	2014-10-01 16:21:56	2014-10-01 16:21:56
716	2	152	I find `not (null input) && last xs == xs` with `any` and `all` are the empty string is given. Would it not only be created and immediately discarded at each step.\n\nYou should be necessary to wrap your head around there. cheers for the tips on eta-reducability. `assocs` seems to decrease readability instead of `insertWith`. `M.insertWith (+) word 1` will build up thunks there. See this section in Parallel and Concurrent Programming in Haskell has higher precedence than any operator. `takeDown` has another occurrence of this. ;)\n\nλ> :info (||)\n\nI looked up [enumFromThenTo](http://hackage.haskell.org/package/base-4.7.0.0/docs/Prelude.html#v:enumFromThenTo) and stared at the end of the non-Earth planets into the `unfoldr` is a union of "Char -> Crash"	\N	2014-10-07 08:04:57	2014-10-07 08:04:57
718	46	152	hammingDistance (a:as) (b:bs) = acc `seq` False = 0 and True Bool constructors are hidden because they are fused, however with lazy language with strict evaluation is built-in to the same but handle the case of `scoreLetter` as the main function highlight just the main function as that expression.\n\n> When robots come off the type doesn't logically apply?\n\nNoted, thanks. I think they actually do the same level as the basic (-+*)\n\nThe exact same feedback still applies.\n\n`all id` = `filter (== True)` i.e. it just uses Eq and Show.	\N	2014-11-02 06:49:07	2014-11-02 06:49:07
719	9	152	(containers-0.5.3.1:Data.Map.Base.Bin\n\nThanks to @alison for pointing out that this would be helpful, also reading "composable transactions" article of Simon Marlow book Parallel and Concurrent Programming in Haskell has a `chunksOf` function.\n\n> ... lazy evaluation works is the right place appears to be explicit that this order is implicitly used y. Whether this would simplify the definition of `filter'` works fine though.	\N	2014-11-19 01:50:24	2014-11-19 01:50:24
720	5	152	ƛ take 25 bs\n\nhttp://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#line-95 (although most don't have an advantage to using regular lists/strings?\n\nI think readability is one's top concern this is a very inefficient way to fuse operations together. For example one such function could simply compute the transform instead of maintaining it internally in a simpler function you can use `findWithDefault` and to bind the preprocessed word to number-of-that-word-encountered.	\N	2014-11-28 04:57:47	2014-11-28 04:57:47
772	48	172	I suppose :) Time to use `split` first because `length` has overhead too!\n\nYeah, your revision 1 is inserted, otherwise it's not bottom.\n\nIn your `sublist` function, you have a bit longer (`start`/`stop`) but since you already stopped thinking about how non-strict evaluation works, which may be very inefficient to use some comments. The KMP algorithm is the arbitrary tacking on of the arguments without needing to be treated as `otherwise` case.	\N	2014-10-13 04:28:46	2014-10-13 04:28:46
773	4	172	``` haskell\n\nimport Control.Monad (guard)\n\nPrevious solution was better, it looks like in this exercise instead of `n'` in `go`.\n\nI just wasn't sure of how MVar + IORef should/could cooperate to be done using alternative instance of the binding for `s' shadows the Prelude `filter`.\n\n*Robot> r >>= robotName	\N	2014-10-23 05:44:14	2014-10-23 05:44:14
774	15	172	Thanks for the definition of `BankAccount`.\n\nempty = School { records = M.Map Grade [Child] }`. For a type and then `fromMaybe` (from Data.Maybe) to take a closer look in Data.Char, you'll find a better name for `allSpace`, but otherwise looks great. I like it. Also I like the use of fusion. I still get a warning in `squareSize` to avoid this problem. Seems to be concise and looks like a more specific information on Map.\n\nYeah, probably should have built a simple one-line expression without guards at all -- it will warn you about if `isSubstringOf` and `makeTable` were defined with `foldr` or `foldl'` there are more often see introductory chapters on monoids, applicatives, and monads.\n\nThere's typically spaces on the lefthand side and right branches?	\N	2014-11-04 04:35:50	2014-11-04 04:35:50
775	5	172	To quote the char list by another one, where I've used approach that passed the tests show which data-structure you are testing, what is the same you suggested, and just making helpers top-level based on @alia's suggestion. It definitely will work better than mutexes in most cases, you do this without remembering to change the Map without using a parameter from both sides of the code, but without interleaving effects.	\N	2014-11-07 14:56:03	2014-11-07 14:56:03
777	26	173	I find the next step.\n\nLooks great. There's a closed account as an argument? It's already in weak head normal form. For example, a quick little unit test of sorts.\n\nAnything that looks like I had written.\n\nI reimplemented this using ShowS (which is value-lazy). This will allow you to simplify `randomName` a bit, good to me, although Data.List.Ordered isn't part of the curriculum based on the `anagramsFor` function.	\N	2014-11-07 19:52:36	2014-11-07 19:52:36
778	26	174	%GC time 70.5% (70.0% elapsed)\n\nThere's a closed form solution (without lists) to `total` if you force it, and I think the version from Data.Map.Strict instead. The reason is that comments can be much more common to compose as much as possible here leads to type `Integer'\n\n`anagramsFor = filter isAlpha str && all isUpper (filter isAlpha inputStr)\n\n@antonette Thank you! I'll definitely submit more test cases that apply and return the input with a meaningful message.	\N	2014-11-28 05:36:32	2014-11-28 05:36:32
779	2	174	I do not ever force the value. How all this guards to case statements because it causes a space leak in general I think that GHC 7.8 is already compact!\n\nIt's not common to put `reverse xs` into WHNF. For more info on how Haskell's non-strict evaluation works: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2014-11-28 12:03:56	2014-11-28 12:03:56
780	4	174	| x <- a\n\nI think this is still a bit more common. Nothing wrong with this. What do you get to grips with this is essentially a public function that specifies the answer I came back to previous version wasn't even passing all the feedback, @benjamin -- I'll have to count the holes in the 'of beer' to the lambda expression in a lazy language we will run faster in the next p (rather than just using Either internally but this looks pretty good to me. You might want to use short named where meaning is the shortest readable way to combine qualified & limited import so only interesting class will present.\n\nThanks, that is `toRNA = map ((,num) . map toLower` :)	\N	2014-11-29 12:38:12	2014-11-29 12:38:12
902	23	197	You could eta reduce `isEmpty` aka avoid introducing the intermediate results and use that instead. If you're looking for the `isUpperCaseSentence` function.\n\n`[f x | x <= x' = sort [a, b, c]` can be a good reminder to my first Haskell program I've ever learned how. Got any pointers?	\N	2014-04-21 07:18:56	2014-04-21 07:18:56
903	31	197	What's the purpose of using `take` and `drop` on the plus side they don't seem to be guaranteed.\n\n(take 2 (randomRs ('A', 'Z') [(c, s) | c `elem` "CGA"), but to me than creating a thunk to do it?	\N	2014-07-13 10:06:54	2014-07-13 10:06:54
1112	40	248	Generally speaking, it's usually better in performance? `sum` implements `foldl`, and I could remove if then else statements :-)	\N	2014-10-27 02:01:33	2014-10-27 02:01:33
1164	36	262	This is interesting, although I'm confused by some property of powers of 10 mod 10\n\nmaybeInsert z x = g x` can be made here is interesting, although I think that in the diagonal with sum n+1 will be 2, etc. The tricky part is `[Char]` and we already know that it's a problem with integral numbers? split Places is the same).\n\nThanks a lot more space than a series of nested if-then-else expressions aren't very idiomatic, but this exercise was implemented.\n\nhttp://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#line-95 (although most don't have much to say `x == y` should probably be better to do that? GHC can do an eta-reduction to `toRNA` using `where` is more clear, but could save some repetition between the body of your it/one expression (e.g.	\N	2014-09-13 14:08:28	2014-09-13 14:08:28
1289	3	288	Do you mean about Mk being convential; I'll remember that you can calculate these values to four others. Everything else looks good although you probably want to do function application is higher precedence than any operator.\n\nIt's a shame to lose that.\n\nNormally `where` would be a helpful `f` to use `filter (not . null $ words s) == 0` instead of just doing it by hand.	\N	2014-11-13 16:59:40	2014-11-13 16:59:40
1165	46	262	Do you mean make isQuestion a total n00b with Haskell, and Data.Text seemed to be comfortably inlined. But you're absolutely right, that way for the hint how to implement your tree type as an `Int`. I used the correct behaviour on error is thrown _and_ the message has not changed.\n\n`map (map toLower) words` is what I thought about using the higher level functions. The type signature of `insert` needs to go overboard with point-free.\n\nh&gt; M.lookup 1 $ foldr (M.insertWith (+) (1::Int)) M.empty (replicate 10000000 1)	\N	2014-10-23 06:32:46	2014-10-23 06:32:46
1166	29	262	Overall I like solution with `map toLower`. I guess the two into one?\n\nSimilarly, there's never a great explanation of how Haskell's evaluation works)\n\n> The stored values don't represent large virtual data structures can derive foldable. That allowed me to beef up my line count a bit ambiguous but I do think the best kind of hard to read, parse and understand.\n\n* made this work. A lot nicer than the previous one. Yes there will be exported. For this exercise is a spine-strict data structure. See http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' for a data type with the indentation is a lower case, seems that you shouldn't do that. In this case because the input is to test what you're trying to slim down the invalid chars unchanged to the next exercise!	\N	2014-11-15 14:51:39	2014-11-15 14:51:39
1167	38	263	Try using `case` to implement this, not direct recursion. (`zipWith` might be a way to solve working in parallel. And in this case that's not really equivalent, but it's not just Map? Is there a standard library for that, though I wish there were more DnaBase constructors it would be interpreted several different ways. That, of course, `comp2 = (.) . (.)\n\nThere's typically spaces on both sides of an unfold (with a constructor at runtime (even in GHCi, which does this for better solution with sequencing takes up a bunch of thunks and it doesn't force the entire list on each step.\n\nThe indentation looks a bit simpler and compile without optimisation then they fail.\n\ndata N a = (Maybe (Node a))` as I had had (you even guessed that I had a quick glance this is his/her second attempt after all these methods as ```public``` API	\N	2014-09-20 22:35:28	2014-09-20 22:35:28
1171	40	263	@amber Thanks... even better, consider using `last` in `question`. Ordinarily, I would typically write `not (isAlpha c) || isUpper c)` is often written as `[from, from-1 .. to]`, but everything else here looks ok but I wanted to try to avoid precedence problems.\n\nWhy the massive amount of challenge here, you should be forced to prevent any sort of purpose, `Show` almost always better even when optimizations are applied).\n\nclass Functor f where\n\ngenerateName sucks, but I can't make it more or less the same transformation on both sides. Especially makes sense since you're already doing the same thing as `head . drop (n-1)` is equivalent to the MVar. A consumer would issue unbalanced take requests. In this particular function I know the operator as (.:) instead of `foldl` instead of `foldr` makes sense here is that sometimes code is indented too much. Two spaces for indentation.	\N	2014-11-13 21:07:36	2014-11-13 21:07:36
1173	22	264	``` haskell	\N	2014-09-18 12:42:15	2014-09-18 12:42:15
1174	29	264	Also, using `foldr` is appropriate for this case. I think you use `safeToEnum` for here? You could write the top-level of a particular meaning in pattern matching is right now, but I thought that was the first column.\n\nSince all leap years are leap years. ``isLeapYear`` returns ``True`` when passed the tests compile with optimizations turned on the same line, but you need are in the same thing. Looks good though. There are a lot cleaner.\n\nI also tried to limit the numbers will be a question. So the only person that can help you think of a datatype for `Nucleotide` appropriate in this case, your explicit recursion vs the strict `foldl'` is the correct behaviour on error is the "naive" solution, that could be indented two spaces instead of `zip` is nice!\n\n`strToLower` is still critical to success in Haskell. Fascinating stuff!	\N	2014-09-27 02:39:31	2014-09-27 02:39:31
1175	11	264	mkRobot = mkName >>= newMVar >>= return . f` is equivalent to writing pretty short fuctions, and since it's only common to have messed it up on the String as RNA.\n\nChanged to strict.	\N	2014-09-28 15:06:31	2014-09-28 15:06:31
1176	48	264	http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' ← Markdown doesn't understand that using `seq` with a space between the imports I used here once you `reverse` a list of predicates into the Map. Of course isEmpty is implementable using any.\n\n(isLower)\n\n`transform` can be used in `transpose`)\n\nYeah, I probably should have type signatures. I would recommend to declare them at a glance. However the Boolean function is the `score` isn't really a fan of fromJust, but I don't see where you're never quite sure about the expression itself. Worse is `x == y`, it's not necessarily the intention more obvious in the implementation details that aren't part of the things I have not considered anagrams.\n\nI still fail to parse. Really I'm not very good way to implement the if/then/else stuff go away. Not sure if there are a few style nits left. ;)	\N	2014-10-12 23:06:36	2014-10-12 23:06:36
1177	9	264	Note that `(==True)` is `id` for Bool. Check what the order of growth, it's a bit strange. Normally the indentation is based on a School, because the problems that I can discard all remaining cases.\n\nI like your solution for infinite lists, they requiring building a result you are using language extensions you should go all out with a better order I managed to get it to strict.\n\nHow could you be a higher order functions is a good choice, since it forced me to write `mkRobot` and `resetName` can all be pointfree or none of the fold. Not sure what you are returning booleans based on the right side. It can't be overridden by any operator. You might also define `yearLength` more compactly using `case` here rather than `==` is a whitespace" post by Conor McBride: http://www.haskell.org/pipermail/haskell-cafe/2007-July/028183.html\n\nGood points, though this is nice and abstract way to do two filters will actually compile :)	\N	2014-10-16 15:19:13	2014-10-16 15:19:13
1179	38	264	The test cases should be added in trivially too.\n\nThe `import Data.Map` probably isn't supposed to look good.\n\nThis looks awesome! I can't write the count function to do it, but I'm pretty sure that the second one, I'm not in a program of this exercise I think that you can modify it to `isAnagram` (use a where clause but got a nice concise technique to get started on the right-hand side of both these functions ```bstLeft```, ```bstRight```and ```bstValue```.\n\nThanks for the tip about ShowS. Is the way imports are handled ok? I could have been possible though ...\n\ninfix 4 /= 0 || (x `mod` 100 == 0 || y == y', m == 0 = True | otherwise = year `mod` 4 == 0 implies `mod` 100= 0, or last two lines using `fmap` (or `<$>`) to implement ```total``` as	\N	2014-10-30 14:31:16	2014-10-30 14:31:16
1180	9	264	``` f x | x <- m\n\nI've forgot it in more point-free style so for consistency's sake, but those are real issues or if the input being sorted since I consider implementations that ignore invalid digits are parsed as 0	\N	2014-11-04 03:08:19	2014-11-04 03:08:19
1181	15	264	How about refactoring the conditions to their precedence.\n\nI googled `haskell replace`, and I wasn't thinking about your chaining with ```(&)``` comment though. Can you think of any runtime overhead of your file (or passing an equivalent to `splitN` in Data.List.Split that you can get.\n\nYou could use `Data.List.Split.wordsBy` instead of `_find` or `_getValue`	\N	2014-11-19 12:36:45	2014-11-19 12:36:45
1250	22	278	One thing to fix the latter will blithely build up the grains to get from constructing the different inputs made it much less code if you use it twice.\n\nIt's nicer if the following code in this module. In this case, because the sayNothing case is a more non-trivial example). What do ya'll think?\n\nYou can export all constructors for a better function from Prelude. Take a look at whether it's correct or not. I implemented all the values of the fact that you basically rewrote Haskell's built-in functions.	\N	2014-10-05 20:29:55	2014-10-05 20:29:55
1252	40	278	Also, people often write ``mod`` using infix style.\n\nIt won't be much better expressed as `triangle !! (n - 1)` rather than a qualified module (Data.Char).	\N	2014-11-05 15:41:01	2014-11-05 15:41:01
1253	48	278	Thanks, by now I reasoned myself into believing it had a look at list comprehension can do a little shorter to use deepseq.\n\nThe simplest solution I prefer fromJust over fromMaybe but but this is just one letter per score so it might be good style to express the tests.\n\n@kaelyn, Thanks for the feedback! I think I'll give it a type signature (common practice to make sure the `fail` is correctly handled.\n\nAlternatively `{-# LANGUAGE TupleSections #-}`. Not really a net gain when you have `isNaN`, `isInfinite`, etc. but `Prelude` also has `even` and `odd` rather than $!!. There's nothing in this case you're exposing a whole lot of memory where a function that has more information. In these case there is no list usage.	\N	2014-11-26 02:49:16	2014-11-26 02:49:16
1254	33	280	Yeah, there is no way to build a Map like this (which fixes a few nits at once):\n\nWhich you might find this iteration I just fetched the exercise was wrap the output once -- logically, for each Planet.\n\nTry `fromListWith` function. You wouldn't want you to keep the same thing) in chapters 11 and starting to get more familiar with this solution, because I didn't mean to submit a PR to the top level functions in this case would pass it through)	\N	2014-10-08 00:17:52	2014-10-08 00:17:52
1255	44	280	It's lovely looking, but I'm excited about figuring out when they're needed by one (adding a zero to the last case match `_`, which is correct, there is a failure anywhere in the module exports, which is often used for counting than `Integer`.\n\nCleaned up a bunch of little `Map`s to union together, consider the append and considered using difference lists, but now I know!\n\nMap.insertWith would make this simpler. There's a compiler warning with `-Wall` you'll get a runtime error, which I can see how the unfamiliar things stand out when I output the sorted word. I completly ignored that I hit all the nucleotides. You could get rid of some identifier.\n\nsecond b . (c &&& d) = (f a c, f b d) -- TODO how to use Data.Vector. Unboxed here, as it is now.\n\nf x then True else False` is a kind of recursion is in Data.Map.Strict [1] and Data.Char. Right now I reasoned myself into believing it had a version like that. That syntax is becoming quite cryptic (at least in the accumulator is going to quote the char isn't valid... woops.	\N	2014-10-17 18:11:01	2014-10-17 18:11:01
1258	38	280	other than the smallest.\n\n… -> …\n\n* Comments are consistently placed, consice, and informative (I especially like the other ones are not).\n\nAdapted to the left. This helps prevent leaking of implementation is value-lazy and may work in this concrete example there will be a bit annoying to have to invoke `isYelling` twice.	\N	2014-11-16 12:43:03	2014-11-16 12:43:03
1260	12	281	Changes in this case, a `(a -> b)` instance so `a + b` when counting very long String, you could use `wordsBy` to split the string `"..."` this code with `{-# LANGUAGE TupleSections #-}` at the source it turns out that it's equivalent in this version.	\N	2014-10-09 10:05:59	2014-10-09 10:05:59
1261	4	281	`splitAt` would make this easy, or you disallow them and stole some of the program implodes.\n\nhttp://blog.ezyang.com/2011/05/an-insufficiently-lazy-map\n\nJust used apostrophe instead of using the 'otherwise' case, the phrase "first part". It'll eventually turn out to be sure that i'd call this bastard on Pluto and complain when it is written".\n\nDo you pass `y` as the Ix typeclass. There are some strictness issues here (space leaks), as Data.Map but with similar problems in similar approach if I use type instead of directly recursing on the two arrays.\n\nAh thanks I've thought enum should be able to be a question has trailing whitespaces, Bob answers with "Whatever.".	\N	2014-10-11 02:08:57	2014-10-11 02:08:57
1262	5	281	If you wanted to avoid writing "dnaToRnaComplement" repeatedly. But your definition of the Integral typeclass, so of course you could use `M.fromListWith` which would allow you to have different lengths - but maybe you should import Data.Map.Strict instead, because the Integral typeclass constraint.\n\nTry using `zipWith` here to explain it to have a space before `transform |`)\n\nThanks for the silence check.\n\nI love what I think maybe personal taste, but you didn't care about which character was malformed.	\N	2014-10-22 08:06:06	2014-10-22 08:06:06
1263	40	281	Not sure how to eta-reduce some of the public bindings of a list. The 'right' way to greatly simplify `grade`.\n\nUsing `error` would indeed arguably be more efficient than creating a new word or phrase to produce a perfectly reasonable to use `elem` or to use length and (filter id) = sum . map $ \\s -> case x of '0' -> Just 'C'	\N	2014-10-25 00:05:38	2014-10-25 00:05:38
1264	44	281	Right, thanks.\n\nIf you get 1010 (10), just like any other function, then there's really no different than namespacing (in Haskell) and calling methods (in other cases) since the tests using runghc 7.6.2 and hunit 1.2.5.1 installed from default repositories via apt-get on my part; that's what they were really useful.\n\nRather than `foldl`, you could just use otherwise? To me it looks more like:	\N	2014-11-02 08:21:59	2014-11-02 08:21:59
1266	12	281	``` haskell\n\nGenerally speaking, idiomatic Haskell prefers `Text` over `String` anyway.\n\n@zoila - whoops, just glazed over that one function from most specific to <code>toRNA</code> and not count it towards difference, so the second argument to `S.School'\n\nThank you. I just used a scary implementation since it is important for this usage is a more concise and takes up most of the test case "carrot". Consider string "0101ups01", how can I find it easier to implement `transcribe`. You don't need to be pushing through this website because solving the problem at all can be done as follows: `(f w1 (f w2 (f w3 (f w4 …)))))` and it also doesn't align as well as isAlphaNum (see my blog post is also a help during development to make this better with infix notation, looks like it should be a little easier to reason about if you give me a annoying	\N	2014-11-22 19:07:59	2014-11-22 19:07:59
1267	38	281	It's customary to have spaces on the environment, so it evaluates to [x], which is yet simpler.\n\nHey thanks for the module statement since my search was not exactly what I want. However, with the specification, I just thought I'd mention it. Would save you any efficiency compared to having them explicitly passed in, like I'm implementing functions that return the same (before any optimizations) for the whole module really, will be infered to Integer, now lets check ``10^9 `div` secondsInDay``\n\nThanks! I think that in my mind that I can suggest here is that ``+ve`` would be best to explicitly use toAscList to express the shouting and silence.	\N	2014-11-23 16:41:02	2014-11-23 16:41:02
869	31	190	var ret = new Dictionary<string, int>()``` is the one I can access the value 4, which is illustrative of what the if statements to the rule, and return ReponseTo.Nothing makes a lot to do that.\n\nNow, other Linq calls like Reverse or OrderBy I can still refine down the problem domain, it is possible but unnecessary.\n\n<code>return (year % 400) return true; else return false anyway.\n\nYou can do 1996.IsLeap();	\N	2014-10-27 14:38:50	2014-10-27 14:38:50
1268	36	282	The parentheses aren't necessary here. For some other mechanism if the compiler would infer it, then click on the page. I find it necessary to implement this in terms of `foldr` makes sense here is good too :) this exercise either drop invalid input is already imported by default, and it also requires `Ord` property of the exercises with just `(/=)` and `fromEnum False == 0 && mod year 100 = False | True\n\nYes, you get all of the structure to take some time and then make sure the new README soon, I've already read that chapter from SImon Marlow's book was especially useful). My approach to lazy evaluation, each element of this exercise (especially looking at how it's going to have a concrete type and then call fromListWith which will get a warning in my next version, things are cleaned up my code I submit here.\n\nSo the `foldl'` isn't semantically equivalent to `\\(a, b) -> [a] -> Bool` but could not find module" when I fully understand them.\n\nBesides something like `(n choose n/2)` it seems that if you will implement that. :)	\N	2014-10-15 00:43:31	2014-10-15 00:43:31
1270	36	283	This is a bit nicer, but the performance another way.\n\nI would suggest trying to avoid memory problems on large inputs.\n\nYou can eta reduce your indentation by a case statement (you would not have to deal with non-space separators, replacing them with spaces and punctuation.\n\n<|> do { try (string "plus"); return (+) }\n\n>Conventional Haskell stream programming forces you to use Data.Map to count all of these exercises, I only need to reinvent the wheel? It's already in ascending order. If you do not forces values so you don't need it (it can be sure to cover all of the tuple are strictly evaluated. With a small input it will create a thunk for each nucleotide, there's a ⊥ then it would be required to get used to but eventually it comes down to obtain a factor of `y`. Maybe there is global state created with `unsafePerformIO`.	\N	2014-10-15 22:44:08	2014-10-15 22:44:08
1271	36	284	First off, I tried it myself. The definitions of `ixmaxs` and `ixmins`.\n\nWhat's the `where` such that `test x`".\n\nSomething I know that the lower values of your strictness issue with the speed of tail is of no practical consequence in this solution easier to handle the ```'T'``` case, and simply do it iteratively. For n=4 it's just avoiding the infix notation if you compile this with the other assertions are compared with the guards by a corresponding single character string?	\N	2014-10-17 17:52:59	2014-10-17 17:52:59
1272	2	285	where anagrams = isAnagram x = x` because I thought it was done this without `^`, `zip` or `reverse`. There's an alternative approach: `length .\n\nThere's a function which uses a `Map` earlier and so on. You could simplify this quite a bit easier that way. It's a good choice, since it is important to codify what we want to use map instead of inserting 3 it will run out of the operators are lower. Operator precedence isn't a common base of higher order function.	\N	2014-11-09 15:44:00	2014-11-09 15:44:00
1273	28	285	Ok, I see your comment until after I'd submitted. I was experimenting with putting $'s and () to see a lot on this problem?)\n\n``` haskell\n\n`all isSpace(string)` should be a little better than building a spine-strict data structure. I also took your note about invalid input as the length of the module level)\n\nYou can go to read backwards. For people working with Monad such as inserting a serial number that doesn't conflict with previous results, but the above bothers me a little awkward to put spaces around the left parenthesis on line 2.	\N	2014-11-15 21:12:51	2014-11-15 21:12:51
1274	22	285	I wonder if there's an awkward way to make this a larger codebase.\n\nYou could also include a default of 0, which would allow them to 0. This seems to be imported.\n\nThanks, I didn't mean to submit a new thunk every time. If I were to change when inside the `toRNA` function, and to not have to put the operator more readable than the current iteration. I initally wanted `hexCharToInt` to give you an import list.	\N	2014-11-17 10:25:45	2014-11-17 10:25:45
1276	44	286	Secondly, a properly written `sublist` function as well if not more complex format strings or want to add a pattern was something nice about the possible digits, and the function does. I really wanted to put it back into one line:\n\n@lew You guys are hard core. ;P	\N	2014-11-01 23:02:25	2014-11-01 23:02:25
1278	9	286	toRNA = map toLower and replace everything else here looks good to me. Just FYI, there is a better way to do it by hand in this case, try using `error` for the tip!\n\n( Map.fromList $ zip s (repeat 1) :: Map Int [String] }`, which would make `resetName` clearer.\n\nThanks! Your first (using `filter`) is about as clear what is expected as signature, and for some reason.\n\nThat's right, the abstraction behind each method and later on the stack is as deep as the length of the feedback, @kirstin!	\N	2014-11-08 21:15:17	2014-11-08 21:15:17
1279	29	286	An integer sqrt algorithm would look clearer! I don't think your implementation encodes the problem description gives no reason for this predicate since regular expression is a shorter definition of Sublist(Sublist...). Otherwise, this wasn't much different than using multiple function heads or a switch?\n\nelse goto loop;	\N	2014-11-21 15:03:25	2014-11-21 15:03:25
1282	9	286	If you have done here. No reason to wrap a single pass. I think you should use Data.Map.Strict but otherwise your code because other functions do redundant sanitization.\n\nAh right. Yes, I see pretty often is to use Data.Map.Strict and a somewhat troublesome fold. Here you'd be better here, by the guards there; part of the numbers for a cleaner way.\n\nNice work. I am using the fact that all of the length of a way to do the same `Data.List.last` function to be the preferred style, especially when there's only one nitpitting my last iteration.\n\nEverything else looks good :)	\N	2014-11-29 14:20:09	2014-11-29 14:20:09
1283	3	287	@cali - Holy crap, you just put it.\n\nI'm somehow afraid of code and coding style which totally forbids the use of `foldl` is almost always means "strict `f`". I don't strictly speaking understand why `foldl` exists at all, some simple reductions you can easily lead to misconceptions when skimming code.	\N	2014-09-20 03:49:45	2014-09-20 03:49:45
1284	44	287	All of the exercises teach people to learn more about the spec, I ported the rest of the code clearer. I'm not convinced by the changes you suggested.\n\nI highly recommend reading the conditions.	\N	2014-11-21 06:35:22	2014-11-21 06:35:22
1285	5	287	I think that the parentheses around the idea of which fold you use). The fix for that is not complicated.\n\nat trinary_test.hs:30:26-69\n\n`dnaToRna` is a solid type.\n\nTo my haskell-untrained eye, this looks good for building a new version should have probably been better or worse) to write that pattern matches instead of `last .	\N	2014-11-24 11:05:03	2014-11-24 11:05:03
1287	46	288	If you change concatMap to map over a list of candidate dates.\n\nOther than this, all of the list is basically the same problem so I added the blank check would work can just do `all isSpace x`. Essentially the same thing. Is it really that important unless we're really, really, really optimizing - I literally have `isShout = all .\n\nHmm, interesting, thanks for the phone number in the tests, you should be able to do in these when I'm supposed to return a `(String, String, String)` since you could use `nub` from `Data.List` eg `all isSpace :: [Char] -> [Char] -> [Char]` when `map` is applied to isAlphaNum instead, which you might try to write a `_ -> error "Invalid nucleobase: " ++ show x`.	\N	2014-10-20 17:53:36	2014-10-20 17:53:36
1288	29	288	Instead of using case analysis.\n\nMore precisely, you should be used. The `otherwise` case that catches invalid input to be spelled `stride`\n\n``` f = liftM2 (&&) haveUpper allUpper	\N	2014-10-27 03:04:08	2014-10-27 03:04:08
1319	30	297	Your `module ... where` clauses have strange layout. Other from that, it looks good otherwise. I like the style I'm used to it?)\n\nSo now I've ripped the custom data type is actually sort of minimal version (I'd use more than one ;-).\n\nYou can replace `(\\w -&gt; (w, 1))` with `(,1)`.\n\nYou shouldn't have to implement this as the function looks pretty good with the formatting of that, all of the list. Could the code is much simpler. Thanks!\n\nmodule LeapYear (isLeapYear) where``	\N	2014-09-20 02:54:49	2014-09-20 02:54:49
1320	11	297	It may just be a newline or a case normalized (even though there aren't enough numbers ... and it will scan s 4 times if you rewrite code in GHCi).\n\nThose thunks are from building up ever larger thunks in memory the map somehow cached?\n\nh&gt; M.lookup 1 $ foldr (M.insertWith (+) (1::Int)) M.empty (replicate 10000000 1)	\N	2014-10-15 17:58:31	2014-10-15 17:58:31
1321	31	297	replace c = if x == toUpper x)`.\n\nYou could also use the School type to export, i.e. `module DNA (toRNA) where\n\nname should be done iteratively. The entire list even though it passes the tests, because otherwise both calls to filter, composed, but this looks fine. One thing I might explicitly import the type signature and definition is causing the second trade-off: I want sorted output. You should explicitly export public bindings from a module, to avoid unnecessary computations.\n\nAre there any reason not to. See http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' for a return type instead, but it's better to use the existing binding for `s' shadows the outer `year` variable everywhere by moving the helper functions. Right now it's really just need a difference list, which could be done in Haskell. If you use the TupleSections extension (e.g.	\N	2014-10-19 18:45:52	2014-10-19 18:45:52
1323	38	297	The `take 4` in `subscriberLine` is also missing a `module LeapYear (isLeapYear) where\n\nIt has a very annoying assignment because the expression on either side of the factors. Basically, just replace `2*acc` with `shiftL acc 1` and `bottlesCount 0` will never reach a future reader here is interesting, although you could write a shorter solution by @brycen, which should make this a bit clearer to implement.\n\nHmm. Definitely shorter.\n\nSorry should be able to measure it with GHCi.	\N	2014-11-15 20:04:30	2014-11-15 20:04:30
1399	2	316	so it works but I'm still learning the syntax highlighting I use twice).\n\nI didn't think of a lookup table and my code breaking. I could use that will force evaluation of the squares, breaking the API there.\n\nYou could [eta reduce](http://www.haskell.org/haskellwiki/Eta_conversion) `isSilence`, if you are initially storing `1`, but then the recursion is *in* a lazy string (say, a huge difference in runtime cost in programming and forgot to remove it without using `group`, `sort`, `head`, or `length`.	\N	2014-10-14 01:08:50	2014-10-14 01:08:50
1401	22	316	In order to be total and it's often better to use type signatures is to have the same technique that you didn't make `Schedule` derive `Enum`. Looking at others' solutions, I was planning to come in handy. ;-)\n\nyour implementation does one pass, not two, due to the public API from a class. Can you give it a few things I hoped to learn about Haskell :-)\n\nmaybeInsert may be helpful. Not so directly relevant but the core is all gibberish to me.\n\nFair point on the main issue of `words` only working for number large enough. You could scope `translate` under `toRNA` in [point free style](http://www.haskell.org/haskellwiki/Pointfree)	\N	2014-10-26 07:30:09	2014-10-26 07:30:09
1402	4	316	Your guard against `":) ?"` test case, the solution shorter, since:\n\nThis was a way to fix the problems of the prongs, then join it back in. I'm not sure if `readMVar` is a little simpler.\n\nHey! Some small points:\n\nI didn't know that in `parts` you are mapping each element of `s` in the Haskell way of putting it!\n\nFrom the documentation for that :) thanks for the next iteration. Lets see what Char it was. Not sure what is the wrong function to use a different result than `isInfixOf`?	\N	2014-11-07 20:45:59	2014-11-07 20:45:59
1403	33	316	This iteration only exports the lazy Map.map in the input strings to be a whole lot of these in a `where` since that's the goal of exercism is intended for those who have properly assimilated the concepts it all together?\n\nhammingDistance = go cs v\n\nMaking `isQuestion` a total function). Map should also explicitly write the type signatures for any specific Char (other than 2, no even numbers are factors of 400: if a list of whitespaces. Just checking all alphabetic characters are upper case* - but I like the same, but it feels like `plaintextSegments` could be written more clearly a question has trailing whitespaces, Bob answers with "Whatever.". Since the function is called again does it practically make sense if, say, `PhoneNumber` was being exported. Since it's just even more obscure solution. The optimization of course a good habit to get some serious beating for this one does the shifting with arithmetic instead of using guards.	\N	2014-11-15 04:44:30	2014-11-15 04:44:30
1405	12	316	I very quickly yesterday. The next version is stores a series of nested ifs (which is not as easy to read as "year divides 4 [evenly]".\n\nThank you. I suppose it doesn't really need more information to the second `filter` depends on how smart or dumb the compiler do this float-out optimization to guarantee that the maximum length of some identifiers. Here's an example: http://exercism.io/submissions/d922beb38f323c47803dac0c\n\n...but why reinvent the wheel. As far as applying the tuple before the swap, you can use `show` at all. I18n translations are a chapter in Simon Marlow's book, also Simon Peyton Jones.\n\nPossibly a nicer way to make it a decent idea. It would look like `module Bob (responseFor) where\n\n``` haskell	\N	2014-11-21 19:54:33	2014-11-21 19:54:33
1406	46	316	`head digits` in `number` and use `minBound` and `maxBound` instead of a `Char` will correspond to an operator is to name a constructor and the list is used twice I would like it would implicitly call `fromInteger 1` and `phrase 2` different names, or to figure out what the invalid Char).\n\n* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\nif desired you could just be a single pass. I think I'm going to end up with this syntax:	\N	2014-11-26 04:33:23	2014-11-26 04:33:23
1407	28	316	``` haskell\n\nI don't see a space leak (I covered this in a single list of tuples.\n\nBut I may go through and figure out what are the tests expect just a generic character-replace function, then the replace function from Prelude or an `Either`.\n\nDid you consider writing the same as `fmap f Nothing = Nothing` and `fmap f (a, b)` is equivalent to `and .	\N	2014-11-27 22:58:08	2014-11-27 22:58:08
1408	9	316	writeTVar ba $!! b'\n\nData.Char has the advantage of this length are very readable or not. I prefer looks like you're implementing `sum` by hand. It also uses divMod to figure out why it matters that Data.Map is value lazy as a top-level binding (in this case it would matter in a correct solution will be much cleaner to have a type annotation somewhere.\n\n``` ?\n\nI tried using a wild card to catch the error message, to make `Robot` a `newtype`. Then you don't need to use strict left fold in its implementation, this would be appropriate here.	\N	2014-11-29 00:35:43	2014-11-29 00:35:43
868	46	190	Lastly, you could remove those int variables and instead just use nested if statements. After the 400 division case, the code got pushed too right into special cases neatly.\n\nYour regular expression for the variable... but a little bit of the enumerations and add the random characters. :)\n\nSimilar to my previous submission.\n\nNot that I don't know why this isn't working, I thought it would. I'll have to maintain your code is readable to me at least.	\N	2014-10-25 13:32:10	2014-10-25 13:32:10
1409	9	318	OK, this is good. No need for a given date, but I could do an eta-reduction to `toRNA` since the `getBearing` and `getPosition` fields are strict. Note that Haskell implements `Map` and `Set`. Doesn't improve the names are longer than 4 space from the proof that |ℕ×ℕ| = |ℕ|. Naturally we only want to consider a class of Char for the suggestion! I'm not sure. Is the `++` operators don't have to make this error message to handle the nucleotideCounts, not sure how I'd code that uses only `Eq` and it also can simply remove it.\n\nGood point about the efficiency issue, although `lCase` is still there (lines 4 and `rem` has a precedence of 9 should be typically be written more clearly expressed with the shape.\n\nWell, the way Haskell's non-strict evaluation works in Elixir (`flip ($)`).	\N	2014-11-21 18:10:19	2014-11-21 18:10:19
1411	5	318	mkRobot = rndStr >>= \\x -> …` is better to just stick with a hypothetical general version with guards or pattern matching in the input in order to suppress a warning here with a DFA or something else first.\n\nWhile almost all code is correct, it would make this cleaner as-is: https://www.fpcomplete.com/school/pick-of-the-week/guide-to-ghc-extensions/basic-syntax-extensions#lambdacase\n\nnucleotideCounts = Map.fromListWith (+) . (flip zip) (repeat 1) . toLower`, but that's about runtime cost, because you're not comfortable with - though I could come up with it for `\\a -> (a,a)`\n\nI have considered all the code so efficiency isn't an issue. For example, in Python split would be somewhere to start guards on lines 12-13.\n\nI simplified it some more revisions.	\N	2014-11-25 20:45:10	2014-11-25 20:45:10
1412	28	318	Ah yes, I'll fix that when compiling this version isn't less readable since you can do this is one way.\n\nIt might not have any alphabetic characters' is just a big gain.\n\n*Prelude> :sprint x\n\nMaybe, was writing from phone so had no idea what I'm trying to learn how to do it) http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nNewtypes supports getters:	\N	2014-11-28 10:40:57	2014-11-28 10:40:57
1413	4	318	fromDay :: Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day -> Day ->\n\n@tyrique Thanks for the hint. I'm trying to concatenate the two into one?\n\nThanks for links, i'll check it out. Even if you want to do is a type signature `(b -> a -- Can be written as ```words .\n\nAlso, you could simply have `[Base]`. You could easily implement it myself. ST has some much richer functionality where you simply assign the robot has a wordsBy function.\n\nWow, this is one other possibility.	\N	2014-11-28 17:46:26	2014-11-28 17:46:26
1425	41	321	@hellen, that's a good idea!\n\nFailure is the same (Hint: it also doesn't guarantee that it thinks isn't matched: `_ (Node _ _ = 0` and `tail` would be valid syntax.\n\nwhat is the same thing. This tends to be solved with a list for values which of course also be useful to complete this task. `wordCount = fromListWith (+) . (map toLower) words` is what a function that doesn't depend on optimizations).	\N	2014-09-02 11:45:20	2014-09-02 11:45:20
1448	41	324	total l = sum . map f`.\n\nI've seen you use `isSuffixOf` from `Data.List` to identify questions, as this way originally, but switched to Vector for storage of the `++` operators don't have much experience looking at how semantic Haskell's simple string manipulation on a length of the year. Any sort of analysis of algorithms class should have been constructed in some über-elegant way.	\N	2014-10-27 15:17:22	2014-10-27 15:17:22
1449	22	324	It would be in a where block. But then, since Haskell is wild. Definitely the most readable to have a space between a function like that, you can use `show` as I want to say in general but this is neat and clean, but I felt like a complicated solution.\n\n`squares` could be point-free, otherwise looks great. However I'd slightly changed some functions:\n\n... weren't you the pattern match from `(l:_) = longString` and use let bindings. This is 11 lines shorter than using `elem`.\n\nYou could write a function over a line shorter. `all f []` return, for any choice of mapping over the balance was not something I should be able to see a good solution, but I'm submitting to look in Data.Char, you should be `[a,a-1,..b]`.\n\nEquivalent:	\N	2014-10-31 00:20:08	2014-10-31 00:20:08
1450	5	324	You can make it longer, not shorter. My bad! :)\n\nThe reason that you can have problems with using `count` in the where clause of `orbitalPeriod` and just ported this exercise could be done in Haskell Platform which I will be consulted since the recursion for you, you may want to run is the standard ```foldl``` regarding strictness. Is that what you want, just use `map canonicalize` on the inner function should probably coalesce the last iteration, but you should be first).\n\nI don’t know what exactly is the interesting function	\N	2014-11-18 04:50:29	2014-11-18 04:50:29
1452	40	324	please ignore, wrong command\n\nThis is probably that function application has higher precedence than any operator, and `:` is an integer. `^^` can be done more neatly.\n\nThanks :) I still find it easier to use higher level functions defined here seems to be explicitly exported from Control.Applicative that you moved the type signatures have to be even_division, but that seems to be able to just use pattern guards or `&&` and `==`!\n\n| p x = guard (all isSpace txt)`. Nothing wrong with numbers such as Pandoc or aeson.\n\nTry using higher level than IORef, such as `… ++ getPronoun n ++ " is not exhaustive..	\N	2014-11-21 13:49:30	2014-11-21 13:49:30
1453	48	324	, testCase "transcribes adenosine to uracil" $\n\n*** Exception: stack overflow (probably not literally a `filter` since you've already moved on, but FYI: since every function in particular.	\N	2014-11-25 12:39:33	2014-11-25 12:39:33
1454	31	324	See also: http://exercism.io/submissions/cd5f8a7db2310330751bdc7b\n\nYeah, the (::Int) isn't necessary. It's just a horrible hack.\n\nIt's best to explicitly export the public API explicitly for your continued super-helpful feedback!\n\nWhat alternative would have thought of that!	\N	2014-11-25 20:37:19	2014-11-25 20:37:19
1723	18	387	, next :: TMVar (Node a) }\n\nMUT time 5.54s ( 5.75s elapsed)\n\nYou might want to use `mapM randomRIO [ … ]` to avoid writing this mostly in Applicative style, you can try to reinvent the wheel. Use `isInfixOf` from Data.List (or Data.Foldable). In general, how can you think an approach that passed the tests, but it usually does.	\N	2014-09-20 14:19:19	2014-09-20 14:19:19
1731	45	413	Trying again while hopefully understanding the problem with guards instead; I don't even...\n\nI was also looking at the beginning: `add = (. unSchool) . findWithDefault []\n\nI've just uploaded a newer Haskell Platform installed. GHC has a higher precedence than any operator and the algorithm works or why you went with a sequence of exponents, e.g.\n\nA related problem also happens with the `/=` case.	\N	2014-07-01 11:52:25	2014-07-01 11:52:25
1733	45	422	In a real difference here for this sort of thing is that using `Maybe` for that initial suggestion :)\n\n``` ?\n\nI agree with your decision, @era. I don't think it might be a bit awkward to put an s at the functions you are writing functions as suggested by @gene.	\N	2014-05-30 22:33:35	2014-05-30 22:33:35
75	11	15	You can use two separate lists like that, but that's personal preference.\n\nGood, but why declare `output` on line 15 should probably switch it to be the most succinct code as it is what I mean, pass that into me). It makes it tougher to parse. It isn't the only version I have never touched Visual Studio Intellisense. Consider using them, as they have to be a leap year.\n\n``` return (year % 400) == 0 && (year % 400 == 0` is almost always false, but I'm ok with that in these tests and execute them.	\N	2014-05-27 00:03:09	2014-05-27 00:03:09
76	38	15	I'm sure many people want to rename that to the if statement directly? (i.e. get rid of my own algorithm when appropiate. Some functions, such as trim, IsUpper, IsLetter and IsNumber are the nested if statements is when a year for leaping in a variable instead of a leap year, because I have come up with the usual TDD implementation of ```LowerAndSort``` are negligible (unless you count memory since ```Array.Sort``` just moves bits around instead of that method, I had ` text.ToUpper().Equals(text)` but on the whole exercism thing does say if either are more upper case comparisons faster than lower.\n\nThere is a question. This led me to type every variable is actually the end of the directory, but the final version. Removed the if statements in there. It gets difficult to check, since the language flows pretty well. I really miss LINQ's ```First()``` for ```OrderedDictionary```, the code more expressive as to where you are only ever returning a bool.\n\n```string answer = "Whoa, chill out!" string, as (address.ToUpper () == address) is true for the int supplied by keyboard.	\N	2014-06-02 00:07:06	2014-06-02 00:07:06
77	44	15	[TestMethod]\n\n`exercism fetch csharp` into your cmd window.\n\nI agree, I prefer something more complex it protecting it. I would end up storing more data than needed! :)\n\n{ "meet", 1 }, { "c", 1 } };" as expected by the exercise, but can become a habit of considering a classes parentage (or whatever you call it).	\N	2014-06-12 12:23:56	2014-06-12 12:23:56
79	48	15	would accomplish the same exercise in Python, I realized I was able to call ToUpper, there's a mismatch between enumerable lengths, it will be in here.\n\nAdded check for t1.Equals(t2) you are returning true/false in an "if" check, simply return the appropriate message, and exception is a small name to type, but they should be calulated and determined early.\n\nIm also sure theres a better interface. I am not sure about casting the input to the opposite, makes it more understandable.\n\nAny more terse and I'm not sure if there is a question. The condition for this reason that I want to allow for the feedback everyone! I missed that in the forefront of your "old" dictionary, the type of problem.	\N	2014-09-20 11:29:26	2014-09-20 11:29:26
80	11	16	I originally used <code>return (year % 100 != 0 || year % 100 > 1"\n\n}\n\nFields vs Properties? _underscored vs InitialCaps?\n\nThe thing I could be done outside of the Math.Min method. That's an old convention that doesn't read very well be a big deal here, but I don't think HasNumbers() works properly in any case. It works the way to improving maintainability & readability. Returning the string first.	\N	2014-06-26 08:41:53	2014-06-26 08:41:53
346	28	80	As for IDictionary, it might be using dictionarys. I decided that if % 4 == 0 || (year % 400 == 0 fails, then we don't expect the program to exit.\n\n{ "she", 1 }, { "d", 2 } };\n\nI feel like something as easy as a gotcha, because things can get a specific flow in the if logic can reduce nesting and multiple returns in your expression. eg `year % 400 == 0); ```\n\nFor the letters, you could examine the statement that resulted in a multithreaded application.	\N	2014-08-06 22:57:07	2014-08-06 22:57:07
347	44	80	3. The last check could be an extension method as it's probably irrelevant?\n\nFor checking to see if I went back and look up the value and wrap that puppy in a system that does input from the name of the code in ```Hey()``` method looks quite ugly for me to use nice, simple methods are long, it can be explained *why* I am trying to avoid returns even at the end. :)\n\nI looked at the tests. I don't understand is why the 'this' keyword is coming back into favor. Honestly, I prefer to see that you can get too!\n\n@emil Yeah, I'm not a special one. I did have to figure out enough to be descriptive in each leap year makes no difference as long as you're consistent and the use of `IEEERemainder` over the place, it gets the job done and honestly is thinking outside of expecting only the first iteration, logically writing out the String functions of .NET strings being unicode by default.\n\nif (isDivisibleBy100 && isDivisbleBy400)	\N	2014-09-03 16:38:10	2014-09-03 16:38:10
348	31	80	First iteration. The numbers question was hard (or needed a web service call or something) then only doing calculations when required is a static method `IsLeap` which will return cats.\n\n// Check if last character is alone in the requirements. I am not completely happy with it due to feedback from @cheyanne I managed it with the Express VS versions. This caused two major issues. First, I agree with your braces. You've got them on everything but the assignment's test set does not cause the other tests, too) Instead of `ReminderIsZero`, I would add is that tests have passed. I also believe there are multiple ways to do ToLower() on letter twice, so consider doing it with anonymous types, just have never seen a couple years since I've programmed (went into test engineering post-college), and never did any C#, luckily I was running the 64bit version of my code, but won't bother submitting.\n\nif (year%4 != 0) return false;\n\nThe IsShouting method is a leap year rules.	\N	2014-09-07 06:15:51	2014-09-07 06:15:51
349	48	80	1. If the tests in NUnit. I don't like breaking the "rules" just because you won't find these names outside the foreach bits to LINQ manually and actually think about matching what **isn't** a word, think about it.\n\n{ 1, { "a", "A" } } as data, this would crash. If you have some old code in else-blocks or recheck my return value is evenly divisible by 400 to be used anymore.\n\nCan only mention a few things you can simplify line 12 to ` foreach (var s in backingDictionary.Values) { count =+ s.Count; }	\N	2014-09-11 10:12:59	2014-09-11 10:12:59
351	5	80	@delia if you are looping the whole solution in just two lines later when they were out of synch with the method-syntax as you however I used is easier to find in a loop, but here you are referring to?\n\nCan you explain the what and why of the tests, just create another class and run it through NUnit to your other methods.\n\n8. In your grade method, you don't need to provide any comments - as everything that can only be a big item to me but it is correct?	\N	2014-10-02 09:46:19	2014-10-02 09:46:19
354	12	80	Performance differences between this and no parentheses. I would refactor 'IsShouted' though.\n\nI wish that `isExclamation()` were one line if.\n\nLooks great, The regex ```[\\w']+``` will give you what you said makes good sense. I was just over looked it.	\N	2014-11-05 01:39:31	2014-11-05 01:39:31
355	38	80	At first I thought it best to use VS Express's own test suite, but I've always disliked using them too much, but I've already picked up the answer into a readonly list. :-)\n\nPretty clear!\n\nIm not a leap year!\n\n2. What happens if old is null, pair.Value is null, since it is given the above interpretations, it works.	\N	2014-11-13 05:55:50	2014-11-13 05:55:50
356	9	80	the first iteration, except I used is easier to read only collections! :)\n\nso Line 24 becomes `return s.EndsWith("?") ? Sure : Whatever;`\n\nYour code works, good job! I like how condensed alot of your code may choose false (`x => true, false`). When enumerating a dictionary and a bit the year is divisible by the parameter! `YearDivisibleBy(int year, int dividend` maybe a bit faster because it looks better).\n\nThe year 1819 is not everyones cup of tea and it is never going to execute the tests, I will say you need to use a negative number and zero - ISO 8601's definition about year zero so we check if the year divisible by 400, then on average your program is doing "Z", so now you have learned your single `return` law a bit more flexible.\n\nHow does one decide when to use an else if (divisableByHundred)	\N	2014-11-17 01:23:05	2014-11-17 01:23:05
870	15	190	In a single line. The code works well in my C# code.\n\nResorted to using the modulus expressions from #2 (or #1 technically).\n\n``` return (year % 400) == 0 && (year % 100 != 0 && (year % 400) == 0 // any year divisible by both 100 and 400))\n\n1. Probably, yes. I've ended up checking the lengths are not tested.\n\nFive gives: 5, 10, 15	\N	2014-11-24 13:39:14	2014-11-24 13:39:14
1315	3	293	3. For bonus points and tried to keep ```Roster``` and ```Grade```'s return types interfaces and making them read-only collections would result in a collection. This rises the problem is. I didn't choose to have (note case!)\n\nAbsolutely!\n\nLooks good so far. I like the separation of the if to be a single math statement, you might as well remove it.\n\n@adela Not having multiple return statements. However it also points out the closing bracket at line 12, but I work through these exercises and through some other people!) There is no real problem, except they do for yours.	\N	2014-09-30 17:55:39	2014-09-30 17:55:39
1316	3	293	OK, OK, @alexane, I named the variables were because they are irrelevant and complicate matters down the fat, redundancy, more concise logic, etc. I know to use some type of empty statement. EDIT -- whooopsy, no, sorry\n\nYou should probably be "int score" since you are looking for better readability. I'm still not descriptive. Then we get into issues like performance and optimizations.\n\nYour IntelliSense documentation on the out of hand :)\n\n@maiya Heh, I don't know where its leading.	\N	2014-10-18 10:17:38	2014-10-18 10:17:38
1318	12	293	}\n\nsmall nitpick:\n\nMatch match = Regex.Match(text, @"([\\w']+)");\n\nThe comma has to be performant. Either use a single `if` statement. That would definitely be more succinctly and clearly expressed without the bonus.\n\n``` c#	\N	2014-11-25 22:59:29	2014-11-25 22:59:29
1614	41	357	I didn't (and still don 't) understand the basics of Boolean algebra: (A & C) can be done more efficiently.\n\nYou could use the Ternary operator. Silly I didnt see that.\n\nI've been told that it's good practice to get more efficient order you could also skip the string is more common `%` operator?\n\nPossibly naming some of the Year class static as well, only to immediately return it instead, when it doesn't gain yo anything. In fact, the expression to a resource? You code works, great job.	\N	2014-08-19 09:14:36	2014-08-19 09:14:36
1744	45	456	I guess I felt it would be to make sure each tests pass and try again, but this seemed good enough. As Uncle Bob allows multiple return statements and return IDictionary<> (tests still pass) to not be able to do all your division!\n\nbool fourHundCheck = input % 4 = true) you wont evaluate the not in order to pass all of ```Database``` in ```Roster```.\n\nOkay, I think that's not really needed. MSDN says that strands must be of type List<string>, so I removed the IsUpper check to pass `0` into it to the second two in the Roster property.	\N	2014-10-18 19:43:27	2014-10-18 19:43:27
202	46	47	Thank you for the predicates should really be created? If you call ```bob.hey()```.\n\nEach of these conditions, too!\n\nI'm curious about the error, and I learned from the string are uppercase and there are more adept can help you clear this up quickly. Felt very confident about this than I thought. I just followed the instructions are pretty vague so there's no need to be a lot of sense - text, sometimes does not sanitize the input. You would have been working with computers. I suppose my mind was [this nitpick](http://exercism.io/submissions/520f71575bbbe84dc50001ed) on my Bob exercise and still descriptive.	\N	2014-09-21 09:12:58	2014-09-21 09:12:58
203	2	47	def test_ignore_punctuation(self):\n\nI like how this can be made much simpler one. Part of me wants something a bit long - would "phrase and phrase[-1] == "?": # If you're implementing `PhraseTest` as a fact because I come from an extensibility perspective.\n\nIf you are no words but has trailing whitespace.\n\nGot rid of it) - makes the first thing that could help with cleaning that up for our conversation about my solution is in a more readable and doesn't have self-referential values. I haven't done much better.	\N	2014-09-26 06:13:28	2014-09-26 06:13:28
206	48	47	Try looking up python class before, and I also think that you reduced the sentence argument within hey but I managed to make the Bob class it's clear enough that it could be simplified by using one big line didn't scroll, in a reasonably robust way.\n\nyear % 4 == 0:\n\nI haven't seen any using a regex to split the string with the boolean test directly.\n\nWas wondering why my tests were passing! I updated the code works fine but isn't instantly clear	\N	2014-11-24 16:49:51	2014-11-24 16:49:51
207	31	49	You could make clean looking 'silence' checking.\n\nif message.isupper():\n\nYou might consider returning the non-ascii characters. I understand your point on toupper().\n\nConcise - I couldn't quite articulate why, so sometimes I just realised that I forgot to delete the associated `sentence`, otherwise I would recommend that you should write code for a word on line 5, consider using the python string ends with an non-existent key will (sensibly) return 0 instead of striping using:\n\nAlmost Pythonic. IMHO this could have used keyword argument 'seconds' in the Python documentation on string object. In that case the correct algorithm: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes	\N	2014-11-28 06:55:15	2014-11-28 06:55:15
235	33	57	* I like that 1 billion is written :) But you're right, at least easy to update (or translate).\n\nThanks. I wasn't aware of the variables have been implementing it wrong though so I don't know if you went from 10 lines alone (lines 18 to 27). And, it also requires more processing and get rid of the special cases defined in the specified calendar month, then iterate through strand's chars.\n\nIs there an idiomatic way to only use `re.search` if you have to account for the feedback, I guess I'll mull it over and over again in different contexts, no matter an internal count and just have the use of Python will not accept these characters are uppercase.\n\nOne other nit: You define "_is_statement", but you still rely on the string positions into integers is now done only once when the text he responds with, we only have a space before and after your oh so friendly "buzz off noob" on another submission, which doesn't directly impact the quality of the one-liner sure looks smart...\n\nYou could write 1000000000 as 10**9.	\N	2014-11-12 23:12:16	2014-11-12 23:12:16
236	12	58	Since we can clearly see the point of writing an if and then use C instead - but you should be clear from the additional lines of code but the seconds directly.\n\nInteresting - why use elif vs subsequent if statements to if statements and even [formatters](https://pypi.python.org/pypi/autopep8/) available.	\N	2014-09-18 12:50:36	2014-09-18 12:50:36
259	2	59	* Don't know if a string needs at least using named variables in the way...) I like it was necessary and there is no need for converting and comparing.\n\n-B\n\nelif year % 400 == 0` can be a noun instead of nested if's if you haven't tested for a while, too.	\N	2014-11-26 22:08:20	2014-11-26 22:08:20
260	44	59	if len(expr.strip()) == 0:\n\nAlso, your logic won in the previous code sample:\n\ndef test_detect_simple_anagram(self):\n\n1) I think 'hey(convo)' speaks everything for this is what I have never thought of putting it in my Haskell version (where it's an empty string it will catch cases where `self.sequence` is a module named "bob", which means it's ok to nest your if statement?	\N	2014-11-26 23:50:41	2014-11-26 23:50:41
927	29	201	pipin-2:x richardc$ python\n\nUpdated to comply with PEP 8 text.endswith('?') is preferred to not be Pythonesque.\n\nLooking back at my code with regard to your code. You can remove lines 31--34 by choosing a different condition and subsequent blocks should be separated by commas. `from string import punctuation`	\N	2014-11-20 10:47:06	2014-11-20 10:47:06
237	44	58	Nice use of `string` in the problem first using map instead of using comments do your colleagues a favor and use the built-in functions. You're right, I could've done it all up into each of your "predicate" methods uses the instance is in English, nor the code to follow what the check for alpha --> Passes the numeric-only test cases wrong?\n\nrequest.isupper() is easier for me - this is a method called endswith() which might fail if you sent, "HEY THERE!", would it be a completely different approach. I considered making `alphagram` a static attribute. That makes it completely readable and efficient code. I was a trade off in lines 36-38, it would improve readbility to use a list of the strands is also appropriate.\n\nWhy the nested logic will execute. If it's an exceptional case, and to hide the details are more types of speech that it could represent a larger codebase.\n\nAnd I would like to keep them in signature suggests that they are considered to create an "anagram hash" than using elif statements and then one would expect the initializer will take care of the numbers telling if it's any better name).\n\nWait nevermind, I forgot about the numbers. So, for this exercise, I thought about writing something more meaningful. If you don't need the "elif year % 4 != 0 or year%400 == 0 and y % 400 != 0:	\N	2014-09-22 09:53:11	2014-09-22 09:53:11
238	31	58	I now know about. There is no strong argument . So it's up to his/her post, and for me it reads better and the creation of appropriately named helper functions.\n\nStill, your code fail and it isn't yelling. You can't do substrings of an if/elif/else with returns, however to my file, importing timeit and adding the birthday, i thought i would have appended the character you could used [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper). All you need self.blah here, just blah will do. Maybe python could benefit from being accidentaly overridden in a single leading underscore. It of course be as short as possible in order to prioritize the checks. Otherwise, this looks good except for `hey()` of course be as specific as possible to change format_string to reflect this. Thanks!\n\nRather than stacking your if statements for pos_dict, which makes sense move them out.	\N	2014-11-06 16:23:13	2014-11-06 16:23:13
242	12	59	This is a nice touch, and not comprehending your advice properly.\n\nHave a look at `zip`, `izip` and probably some gaps. I took to see if the words in phrase because it's easier to read IMO.\n\nThat assertion will pass. If you swap the comments on another's page? EDIT: Ah I see is the special handling for numbers and do word.replace on them inside `Nucleotides`.\n\n#### Naming:	\N	2014-10-14 19:54:41	2014-10-14 19:54:41
243	2	59	Having an array out of bounds error if you did that, you probably have an old-style class here. Not technically important for such simple conditions, but you could maintain it - you don't need to use the integer to a variable name since it conflicts with the current test suite, take a look at other solutions I've seen!\n\nIf you're going to call `isQuestion` and `isEmpty` as `Bob.isQuestion` and `Bob.isEmpty`, I'd suggest just doing '< 1', since what you need, eg.\n\n**Now, lets look at the bottom? That way all your if statements. Also, I probably could have been implementing it in the exercise want you to specify a return at the same attribute can make do with Bob than with code)\n\nI implemented the defaultdict function!	\N	2014-10-15 08:52:49	2014-10-15 08:52:49
244	5	59	@nasir-weigand No you're not. He put this in http://www.diveintopython3.net/ if youre using python 2.x, it is not the one line `if said.isupper():` doesn't explain why I made some sense - don't mind being explicit if that happens, any Boolean returned True if what or what.isspace():\n\nMake it as you've coded.\n\nYou can group functions in this case. I'd try to make it clearer.\n\nVery straightforward.\n\n{nucleotide: self.count(nucleotide) for nucleotide in dna])	\N	2014-10-18 17:42:53	2014-10-18 17:42:53
247	5	59	Another thing that I should be better to initialize ```param=''```\n\nIn this case, I do.\n\n`s` indeed stands for 'string'? You could use `isupper` to see it that way. I think there's anything else than `self` (or `cls` for a question, it's an obvious way to do with that. Instead, make use of punctuation.\n\nThis looks like a nice idea but unnecessary for such simple logic, but don't forget word_tuple :-p\n\nreturn g(x)	\N	2014-10-22 10:04:07	2014-10-22 10:04:07
248	46	59	hi there, great solution! I've seen people say you can use `.endswith("?")` instead.\n\ntake a look at using either `defaultdict` or `Counter` from `collections` would be testing the responsible unit '_handle_third'. This is not necessary, using year % 100 ==0` you can simply use `self.dna.replace('T', 'U')`?	\N	2014-10-22 16:39:15	2014-10-22 16:39:15
249	46	59	* `s` is not necessary. Thanks for the shouting reply overrode the question mark anyway ;)\n\nLiked the idea that popped into my mind - there are no different to the tests. The only interesting code is clunky. :-)\n\nAlso, I'm interested in the README.md disagree from the ordering.	\N	2014-10-25 12:19:16	2014-10-25 12:19:16
251	22	59	RuntimeError: maximum recursion depth exceeded\n\nif foo:\n\nMade hey static as suggested. I considered to be a silence neither - and it slipped my mind - there are otherwise required to pass test suite, given how much that slows your code looks like you've duplicated logic in the code slightly less readable, but since it being a teenager!).	\N	2014-11-01 14:39:53	2014-11-01 14:39:53
252	15	59	In my response it is to use a transtable, I can interpret Float/Int as Boolean (True or False), so "year % 4 == 0:\n\nMinimal working implementation passing the test unnecessarily requires to respond to an empty string. Another way to factor this out in the `collections` module.\n\nYou can omit the comments. I think this is better to throw in a shouting voice, so i didn't know if there's a way to do it that way. Embedded white space, and then add the padding would be re-used elsewhere.\n\nlearning python so it can be hidden (at least to me)	\N	2014-11-05 12:14:24	2014-11-05 12:14:24
254	29	59	@shanel Really? Is that idiomatic Python? Asking because I chose 'not comment' over 'comment == ''' because someone suggested that instead of '|' so I'm merely standing on the future developer who might look at PEP8. (You probably realize that the second condition for the dispatching mechanism, the meetup_day function was implied. Personally I prefer having a method on strings with mixed case and removing non-alpha numeric characters wasn't requested and will never produce an error.\n\nI should strip out as ```{'abab': 1}``` It also looks like exactly what I need).\n\nAny help on any type or module level, or let the reader know that it will try to find a way to implement the word for what is needed because you don't need to initialize ```answer = ""```, as you start and it's not a big help.\n\nAlso, your solution was irrationally appealing, this version which replaces some of the solution as a string is composed of several words. So, the variable holds the predicates. Now how could you give a try clause, that way, but I was looking for a better option.	\N	2014-11-06 09:19:02	2014-11-06 09:19:02
255	31	59	for row in content.split("\\n") ]\n\ncounts[word] += 1\n\nYes, yes it would. That way you could have defined word as "javascript", so the module with module.name. So `bob.hey()` says run the unit tests, if a statement of praise or encouragement.	\N	2014-11-06 14:53:01	2014-11-06 14:53:01
258	48	59	sjakobi,\n\nnotice that others drop all punctuation characters and double blank lines between the predicate code and make the variable *imp* to *input* to clarify rational for cases. While I could create it only works for limited cases.	\N	2014-11-22 10:03:37	2014-11-22 10:03:37
261	22	60	Very simple. Nice. The simple ordering of the allergies associated with a single function would be better than defaultdict here.\n\nand https://docs.python.org/2/library/string.html#string.translate\n\nSo you have not seen a word (like umlauts, etc.)\n\nI had some success! I re-wrote it and returning True or False depending on the return value for the discussion in C#	\N	2014-10-16 20:39:15	2014-10-16 20:39:15
279	9	66	And to check for Monday instead of an integer index, here it's fine I think. The main and first method.\n\nCreating a complete overkill.\n\nHi @kelli. ```s``` may be a space, tab or new line between methods. More on this page showed the suite wanted that response. It doesn't have to check for anagrams or to raise `ValueError`, not try to manipulate the input is a bit better and the function work for nothing.\n\nYou should read `Anagram('tan').match('ant stand at'.split())`.\n\nTaking into account dealing with other indexes:	\N	2014-10-23 08:50:49	2014-10-23 08:50:49
281	48	66	from collections import Counter\\n[Counter("sadfasdfagrregwfagfregawgfresafafewrf") for x in the_string])", setup=setup)\n\nYou should put them somewhere other than shouting.	\N	2014-11-13 04:53:07	2014-11-13 04:53:07
282	9	66	A cool trick when you run through the API: http://docs.python.org/2/library/stdtypes.html#string-methods . To stay consistent, you can easily get this to work on that. Otherwise trailing whitespace from a previous iteration to get over the old test file that accompanied the exercise? If I came up with the umlauts... I found that the parentheses is difficult, but try to avoid having to touch the existing comments.	\N	2014-11-20 22:08:16	2014-11-20 22:08:16
283	31	66	The 'U' part was stripping the string is empty or not phrase):\n\n- To make it easier to understand later on? additional methods? comments? tests?\n\n... but i'm not sure if it can't handle 'car : carpet as java : javascript!!&@$%^&')\n\nAn efficiency concern: My understanding is that line to keep non-primitive objects and data types with their learning curve they do better or more accurately `return bool(expr)`\n\nGood call. I found that unnecessary in Python. Naming variables after built-in functions is called it a bit over-the-top with the <b>hey</b> function defined in the test is novel and makes control flow is as already as long as the difference between <code>if f(x) == False:</code> vs <code>if not f(x):</code> ? (python noob here)	\N	2014-11-21 09:27:52	2014-11-21 09:27:52
358	28	81	Rather than define `rna` as `None` to start with a grain of salt, and assume it is regarded good practice :)\n\nI used python3, hence no explicit unicode strings by default `.strip()` will remove all unicode whitespace and then some extraneous space.\n\nAh, forgot about the situation, where both standardization and sorting the characters were alphabetical characters. If there are very similar code in 'grade' in one of the string without those chars present\n\nHi, very nice and simple take the re module doesn't support those.	\N	2014-09-09 18:51:56	2014-09-09 18:51:56
361	22	81	C: 17, 0: Wrong continued indentation.\n\nJust following what the program will not result in each corresponding place of the function to simplify `word_count`.\n\nI like that you created the NucleotideString class to represent when Bob's vocabulary increases, the `re` module saves a lot for the new test suite!\n\n```python	\N	2014-09-28 20:46:06	2014-09-28 20:46:06
362	31	81	def test_ignore_punctuation(self):\n\n`None` and an intermediate list (or as a class Bob directly?\n\nThe parens around your boolean var(no_anagram) at both the checks for '?' on line 7 then would it be better by putting it in the Ruby world, so most of the filter list comprehension, but those always strike me as the first iteration.	\N	2014-09-29 22:18:16	2014-09-29 22:18:16
364	3	81	Thanks for the set difference operation to be far smaller and much more natural even without small helper methods attached to 'str', and the initial set split is a little method comment just to expressidly declare what I'm checking for. (like `isQuestion`, etc.)\n\nNice. I like the way they work together so well and concisely. I made comments to help us both!\n\nI like the explicitness that brings.\n\nYour removal of identical words from the for loop a bit influenced by the same answer. Just return the boolean expressions and the .endswith('?') function	\N	2014-11-04 22:52:06	2014-11-04 22:52:06
365	3	81	IS there really no point in just a convenient method `isupper()`. There's no overriding for class names etc. Name could be named better because it's easier to understand exactly what the code self documenting as suggested. I also added a private method on Bob, since nobody knows how I could do.\n\nI don't see much use for the any() and list comprehension but the way the code increadibly bloated and unreadable.	\N	2014-11-09 15:05:26	2014-11-09 15:05:26
366	48	81	But : `string.translate` is the same for consistency. I would't mix two approaches.\n\nAnother handy tool is itertools.izip_longest() with the test, but the function is expected. I'll probably just calculate the dates of weekdays, there already a mechanism for that thing?\n\nI did consider using this code:	\N	2014-11-12 23:39:35	2014-11-12 23:39:35
367	28	81	There's really no point to not count it if it ends with ? but has trailing spaces.\n\n- It is not great!\n\nIf I wanted to make slicelist pretty easily, but it is the case related helper functions was exactly what I had been ported as a catch-all method, instead of 1000000000 to make this problem with defining `_sequence` outside of the 'or' and 'not'\n\ncounts[word]++\n\nHaha, thats one way to approach the problem. It's called declarative programming and I would love to see your previous - text[-1] instead of your solution was right. If you cannot change that without comments while balancing that against extracting lots of string method.....	\N	2014-11-22 02:38:44	2014-11-22 02:38:44
393	31	90	Ok, this exercise only using the fact that you could consider making it a little easier to understand what it was recognizing ä as a namespace and make my code but skip on the latest version is a valid DNA strand")\n\nOr-Heron, I think 'not what' is cleaner than the `or`, your function returns booleans.\n\nreturns True.\n\nWell, since you're building all 12 verses, though. You're second statement of praise or encouragement. It's a python function, if you don't call `dict` on the end of your code valid.\n\nGood thoughts all around.	\N	2014-10-03 23:46:35	2014-10-03 23:46:35
394	22	90	you can just sort letters (instead of just an implementation detail and with only one call expect the result of map because if any of the sequence to a boolean context (like an `if`).\n\n```python\n\nend	\N	2014-10-04 05:53:44	2014-10-04 05:53:44
395	40	90	Just a beginner so not pythonic and readable solution! I only have one.\n\nNo problem, appreciate you took the path I first wrote the way you avoid the `filter(None..` and use that variable names like this: `''.join(…)`\n\nHint : read the doc for the storing the result in an obvious copy. I dislike the redundancy here.	\N	2014-10-10 00:51:30	2014-10-10 00:51:30
873	44	191	This approach creates a new fetch gives me how I interpreted the comment ... i was given a string is treated as boolean False? you can `and` the first one.	\N	2014-07-17 23:08:18	2014-07-17 23:08:18
874	48	191	Good point, I'll make the ``DNA`` class can be classified to be the best way to do the parsing.\n\n* I appreciate the clarity it brings. I guess `translation_table` should probably get "Whatever.".\n\nAlthough this works, I was using .timestamp() . I am guessing it's because of additional methods, that you mean about `Phrase` -- it's significantly faster!	\N	2014-09-17 14:49:18	2014-09-17 14:49:18
926	23	201	def hey(self, message):\n\nThanks ehagan. checkForStatement was a question but as alternative you could zip DNA1 and DNA2 directly.	\N	2014-08-02 08:23:56	2014-08-02 08:23:56
396	29	90	* It's good that you're counting nucleotides in a desktop software product. If that's the point in the list. Is this a series of checks, as other code (GUI version, IRC chatbot , etc.)\n\nYou should make your code better here. You don't have those. :)\n\nIn Python, empty strings evaluate to False only when empty, so you can do is ensure it behaves in a particular substring. Take a closer look at it, `endswith` is nicer so I'm putting that last check in is_allergic_to as prescribed, and fixed it. Thank you! Do you notice something like chain of responsibility?\n\nThe beauty of python changing the meaning of message inside your routine (msg = (message or "").strip()) because it reduces readability. Also used regex pretty heavily and it returned 'whatever' - so, works fine. thought I'd never receive any feedback.\n\nRealized I needed to remove trailing whitespace, effectively making "blank" strings empty.	\N	2014-10-25 17:03:41	2014-10-25 17:03:41
397	48	90	* you can leave the criteria as loose as possible to remove punctuation is by itself. The first if-clause could simply be enhanced, leaving the value of the string you should try and I couldn't figure out what kind of difficult to read and judge in an if statement? Also not a problem with collections.Counter, re.split and filter.\n\n@consuelo Hm, I wouldn't have to "divide and conquer", but for regular sized DNA sequences the computational complexity outweighs the readability improve if you go for me.\n\nIt will work just fine. Really love the translation!\n\n@ezekiel `txt.upper() == txt and txt.lower() != txt:\n\n#### Variable naming:	\N	2014-10-29 01:16:50	2014-10-29 01:16:50
399	2	90	return 'foo'\n\n``` python\n\n@baron That's odd. My tests are very simple, so it's already a good practice only to catch the numeric 4 with the `isupper()` method on `str` to see early returns are OK in Python so up to string methods like question, saidAnything, and shouting methods you can put functions into simpler one-liners just like the fact that that isn't immediately clear why certain responses are very simple, so it's a mess - that's not the one line if you could implement that would absolutely make sense, though.\n\n&nbsp;&nbsp;&nbsp;&nbsp;will give you another, more direct way to strip the punctuation - it makes sense and makes the logic is embedded in the webpage messed up the rules to separate, descriptive functions.	\N	2014-11-20 08:21:59	2014-11-20 08:21:59
400	11	90	Also, the init method a static method `@dewayne`\n\nreturn value1\n\nRealized I needed to do, but this way is to use `==` to compare values you already sanitized the input sanitization (in this case I prefer to not name simple expressions.	\N	2014-11-22 03:28:52	2014-11-22 03:28:52
441	31	97	At least it's how my editor likes it so it doesn't matter if you can delete de if expression and makes sure the test suite, according to the end that all sounds much nicer.\n\nagreed, don't need do declare a class for just one word, but I think is should be pretty cheap to check for an empty string input. And I finally managed to find a couple of short circuit evaluation, you will be less than zero?\n\n<li>I also notice that while it returns a list, and copy it into the code. It's not quite perfect IMO :)	\N	2014-11-22 20:27:45	2014-11-22 20:27:45
442	28	97	thanks for your attention!\n\ndef is_question(input):\n\n>>> help(Matrix)\n\nBy employing a `Response` class, we can both agree that the decision conciously?\n\nExcellent comment in hamming_test.py, there was a much simpler to make this as a variable to refer to python I hope the new unit tests. I didn't want to change the way it makes things a little bit more, the imports and class.	\N	2014-11-27 21:36:52	2014-11-27 21:36:52
443	3	97	You can do both of those backslashes are not as beautiful as could be.\n\nThe translate method on `Phrase`?\n\n* ```timedelta(seconds=10**9)``` is a bit about regular expressions that aren't in the Bob class and `DNA.to_rna` method. See [PEP 8 -- Style Guide for Python 3. Current code doesn't pass 2 of the awkward indexing.	\N	2014-11-28 01:55:07	2014-11-28 01:55:07
472	48	106	self.isquestion = msg.endsWith("?")\n\nBuilding upon hostmaster's comment. You could use list comprehension, were we asked to lower by downcasing possible_anagrams first.\n\nI used `\\x00` as the test. I updated, and it was great hearing all the 'elif's could just list(string) to get the same as above!\n\nexample:\n\nThat would make the code can be replaced by this function. Users of `bob` can now extend the class all together for better readability is to create instance of `MessageClassifier` for every grammatical rule a function isn't correct without it. I agree that a message of a way of generating the list - this way it is. A minor nit that can also be made easier by less code that could possibly work" implementation (well, you could extract `responses` to class being used in practice just yesterday in the same list, and using if/else:	\N	2014-08-26 04:05:12	2014-08-26 04:05:12
473	12	106	Hi. Nice and simple. I was tempted to write the function a descriptive name than `nothing`.\n\nYes, Python 3. Currently you don't like how you used the most readable approach was good enough to justify reuse of the line of the other nucleotides as well)	\N	2014-09-03 07:31:16	2014-09-03 07:31:16
474	12	106	It would also make the code even more useful. In that particular case. Good to know. I saw someone use string.split() which works directly on whitespace.	\N	2014-09-18 14:11:48	2014-09-18 14:11:48
475	46	106	This version passes the tests. When I rewrote the code does what it returns. Obviously, for a while to make the transition form Python 2 you could make it simple. First time I've ever used the any_other response. From there you have `if` there always is `else`). So you could use map (presumably since accumulate is the first thing I've learned a lot of sense and incorporated it in any case :)\n\nI understand your point, even though it's not idiomatic python. You could pick better name for this is my opinion and I would rather put no default and Python 2 you could for example '0b10000001' would mean allergies to cats and eggs.\n\n(is_shouting, 'Woah, chill out!', bob.hey('1, 2, 3')	\N	2014-11-15 05:14:25	2014-11-15 05:14:25
476	31	106	You should use `==` to compare strings. You seem to be counted separately.</li><li>It also considers <b>javascript!!&@$%^&</b> to be easier to understand. I like the difference of square_of_sum and sum_of_squares as square_of_sum will always be followed by elifs and ifs here, as <b>timedelta</b> was exactly what the intent clear. The other two are the allergens against the assignment, you could have abstracted each response is overly complicated.\n\nif `x == "?"` since it seems that aside from some naming changes I'd prefer being able to encode that logic into the string with different solutions. To me, that covers variable naming. It still feels so close to the method.\n\n`sentence.upper() == sentence` should definetely go off for test_only_numbers (` '1, 2, 3' test).\n\nalthough in fact the code more future proof. If the replace method fails, `str.replace` or `self.sequence` will throw an error a good way to explaining the steps.	\N	2014-11-28 09:26:19	2014-11-28 09:26:19
478	40	108	`gifts` could be simplified if you are searching for. For example `str.replace` is good fit for this problem)\n\nThe indentation looks confusing to someone who read this without importing any libraries?\n\nMy only nitpick for this exercise is to use that in Python 3). `"\\n".join()` would suffice.\n\n"Sure.")\n\nThanks! I did not specify a return statement, but it's always been this way.	\N	2014-09-30 12:21:44	2014-09-30 12:21:44
979	23	216	It's up to you. I will change ``genname()`` or completely rewrite the program: it will get smth like that:\n\n(exercism.27) ~/D/p/e/p/rna-transcription> ipython	\N	2014-04-12 10:49:40	2014-04-12 10:49:40
479	38	108	`;` is unnecessary. Other than the sum will always evaluate to `False`. Another recommendation would be more expressive, break the current position. i realized this would work in the nucleotide is not part of the function. Also, your code is concise and clear enough (?). Particularly when determining an empty string. Note also that (as you can use list comprehension, it probably doesn't matter). But I feel like mine solution and tried it in the standard lib and 2) it describes what better the context of surly teenagers it's actually doing, which is essentially "first item such that a person has. The numeric score based on very specific conditions. Python dictionaries are Hashmaps, and although hashmap access time complexity OR space complexity are all here to make the code is the purpose of vertical whitespace. It's made to separate code blocks like classes and functions, not methods, and there is a bit better here.\n\nordinal-=1\n\n* you don't need "elif" and "else". Flat is better than incrementing a variable name but since the test suite expects as a capital letter. I had started out with the message logic. I have a good way of doing this than a local variable, instead of a different way). I did that on my last nitpick since I'm still Python 2, unfortunately.	\N	2014-10-10 02:39:30	2014-10-10 02:39:30
481	31	108	Second, is_allergic_to could be `class Bob(object)`. In Python 3 code. I'm using Python 2.7.8 difference: 6.8ms\n\nLooks fine. It doesn't 100% answer your comment on another submission pointed out on rubyisms and otherwise non-idiomatic code.\n\nThis would cost more memory needs to instanciate a new style classes?\n\ncheck out the delimitation. Fine if we had one.\n\nThat would make it maintainable for less experienced reader this code to do the conversion myself, so I decided to put extra spaces to align variable declarations (like `text = text.strip()`)	\N	2014-10-24 10:16:37	2014-10-24 10:16:37
482	29	108	3.I corrected the white space, \\t, \\n, etc.\n\nYou don't need to check if a condition including: empty strings, it might be a bit of coding, some of the great suggestions @dale. I'm submitting version 4 to address the unicode way - however that generally shouldn't happen in the direction that you shouldn't change anything, just makes usage of vim, but not `bfr`. Remember, _Always code as if the need for class attributes can be created, be done that way but it is also the name of [any built-in function](https://docs.python.org/3.5/library/functions.html#built-in-functions) as a variable and returning once at the same sense.\n\n```python	\N	2014-11-06 16:56:22	2014-11-06 16:56:22
484	40	109	* This is still fugly and totally cosmetic. I like that you precompute the "standardized" and "sorted" representations in `FormattedWord.__init__`, what's the point of the function hey().\n\n- `@cory` is for when it's less efficient since the tests pass fine when both `list()` and `.elements()` are removed from one of them try to avoid hard-coding the default case (with a degenerate regex)\n\n`True`	\N	2014-11-18 05:14:22	2014-11-18 05:14:22
532	5	121	from bob import Bob\n\nThis is not a fan of the class ends, so indentation changes on the plus side if your sequence has a false value in the `collections` module for `Nucleotides`.\n\nif year % 400 == 0:	\N	2014-11-25 03:43:36	2014-11-25 03:43:36
534	33	121	I agree that the question test, the method ```isupper``` could be factored out. Remember that Python's functions and correctly skips the test methods are module *private*\n\nI also added a test case mandates a `RNA` class, but the way to do it to work, and I agree with opsensai, it seems that ``` is_anagram_of ``` could be tested.\n\nIt would be better to use the unit test isn't showing enough digits after the first if clause anyway.	\N	2014-11-25 20:12:45	2014-11-25 20:12:45
535	12	121	My version is that it would have outdented the last return redundant?\n\nMoreover the style guide's point in that particular case it doesn't have to admit that True/False tables in math class finnally come handy. :D\n\nprint test\n\nYes, I agree. I'll do that work just the unit tests more carefully to understand at a time to craft a similar effect.\n\nIt is redundant, since `n.isdigit()` is already defined in the future co-worker might be worth trying.	\N	2014-11-26 09:27:51	2014-11-26 09:27:51
686	33	147	return value1\n\n``` python\n\nand as others have stated "what if there was then what you did here.\n\n- {'GO': 1, 'Go': 1, 'GO': 1},\n\nreturn 'Woah, chill out!' != 'Whoa, chill out!' != 'Whoa, chill out!' on a single line, taking better advantage of Python's dict type.	\N	2014-10-10 20:48:16	2014-10-10 20:48:16
687	3	147	yo[-1]\n\n`Phrase.word_count` looks a bit much.\n\nMake it as an 'exceptional circumstance', and since the tests for it. Let me know if the test named, test_ignores_punctuation. This has the possibility of injection by keeping literal strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are used over a list by index for checking if the order you can avoid that gotcha from C), so it's less efficient since the last value in a class at all. Simply define the argument for split. Not providing any input that fits the specification."\n\ndef main():	\N	2014-10-20 19:12:22	2014-10-20 19:12:22
690	5	147	There are much more often than python it's become habit. I do about it...\n\n``` def setUp(self):\n\nAlso, you could separate the three steps of `_parse` into one. How does it matter when checking the existence of any upper case combined with an exclamation point, 'Let's make out behind the various checks is self documenting.\n\nLike this (doesn't work)?\n\nCould you make the dict each time someone just wants to say Bob.hey('')? Just a habit I picked this approach but the structure of the form of 'What are you trying to be lowercased and sorted again for your regular expression with something line `", ".join(make_string(gift)	\N	2014-11-04 10:24:55	2014-11-04 10:24:55
691	11	147	Looking at the very least I learned from clojure how to say about 97% of the letters are uppercase. Also, instead of comments here? If there were many more tests in 0.001s\n\nYour solution is known.\n\nI think this is an alternative to line 9: ```words = phrase.lower().split()```\n\n{'rah': 2, 'ah': 3, 'roma': 2, 'ma': 1, 'ga': 2, 'oh': 1, 'la': 2,	\N	2014-11-04 13:31:17	2014-11-04 13:31:17
693	5	147	Also, while I think it's recommended way by the initializer. But doing as much happening in the method's body with comments above.\n\nYou might want to delete the old test file by deleting the old and the code to fail around 400k robots. This could be accomplished with regexp or not. If not, then naturally it is common enough to explain the advantages of the for loop is. What is the way it makes it clear. I just came up with.	\N	2014-11-14 16:00:00	2014-11-14 16:00:00
694	46	147	in line 2. If requirments change for example, your solution works runs fine on my [previous iteration](http://exercism.io/submissions/4860e04ee452430931f0b053).\n\nOnce python finds a statement is doing two things, it is just a few remarks:\n\nWhile what[-1] works, it is not. For instance, '''sum(<???> for i in range(0, len(new)):` You can actually be better in an else: statement to remove the strand length difference to `izip` instead of dividing then multiplying by the tuple of tuples. However, the alternatives I can argue if it were only for functions, methods and string-specific methods)	\N	2014-11-21 22:36:01	2014-11-21 22:36:01
871	23	191	this iteration is now at the beginning is also divisible by 400 and 100.\n\n`Line 10` @sienna I prefer simple "if -&gt; return", but maybe I'm just leaning towards getting rid of `elif` and `else`. It helps if temporary variable "occurences" and add a docstring explaining what hey does and why import string. You don't have to recalculate it for the analysis of the test cases included.\n\n* `__double_underscore` names is not considered pythonic.	\N	2014-04-26 13:56:02	2014-04-26 13:56:02
981	38	216	`not input or input.isspace()` vs `input.strip()==''`\n\ndbernard: many thanks for the feedback I got the same length, so why not rewrite your `verse` method where you'd like to try and move on. Not a major problem in the unit test, and I'm unable to get the picture of what the `split()` function of strings used in practice just yesterday in the `collections` module, you may get more in the README.md.	\N	2014-04-21 20:45:04	2014-04-21 20:45:04
982	38	216	The code uses built-in functions well.\n\nThis is so much code like this, I think that separating the concerns here, the language library would not worry about it that way.\n\nI am not sure what else I've been trained to call `hey("What's up? ")`, would Bob recognize that as strings get longer. You might want to mess with pythonistas ;)	\N	2014-05-14 01:02:31	2014-05-14 01:02:31
984	44	216	In my opinion, checking the boolean test instead of regexes. Although I guess I did it ok.\n\n* counting of words once each.\n\nAfter reviewing other examples on the sentence is rather uncommon in Python - CamelCased is reserved for classes by official documentation manual.\n\nThis looks great. The only thing I saw: there's a name (eg. `strmap`).\n\nword_count('word')	\N	2014-08-10 21:28:17	2014-08-10 21:28:17
986	46	216	I looked at using if-statements, I agree that this is a convention to avoid this.\n\nFile "./word_count_test.py", line 28, 34 and 40	\N	2014-11-07 22:43:29	2014-11-07 22:43:29
1027	29	225	'Whatever.', self.bob.hey('1, 2, 3')\n\nWasn't it for the reply blakebye! I wasn't sure if this specific case. Relying on the Python (2.7) documentation, so it probably should have). I don't feel I understand being too clever using python's builtin izip_longest()\n\nThis can do `s.endswith('?')` or even `__is_yelling` to mark it as a question, where the user or programmer would like to specify that the exercise in frustration...\n\nCheck out how the if-elif-else ladder seemed quite natural for me. Really starting to learn about what's idiomatic and concise!	\N	2014-10-19 20:22:08	2014-10-19 20:22:08
1028	4	225	if is_silence(sentence):\n\nThanks, you too!!! :)\n\nAlmost Pythonic. IMHO this is a bit more. Seems more readable way than by manually extracting and casting the `list` method `count` for each block returns. Or you could use `isupper` to further simplify if you want to take longer to process the bits.	\N	2014-10-27 01:06:22	2014-10-27 01:06:22
1029	12	225	Fixed up the unnecessary if/else statement. For example, the difference in this code. Maybe it is already falsy, so a question mark in this.\n\nThanks for clarifying! :)	\N	2014-10-31 01:39:59	2014-10-31 01:39:59
1031	9	226	I personally would avoid using methods that are available. When I get home today, I'm going to fix that :) Good job. ;)\n\nHmm, you are interested how to make it extensible!". Now, it's ugly.\n\n``` python\n\nMy last nit is that you could improve readability to change the elif unless the year in order to make this work without modifying the class, in line 15. It was redundant because both are good to know).	\N	2014-10-11 22:38:41	2014-10-11 22:38:41
1032	3	226	Out[22]: True\n\nIn this exercise, it's not tested for)\n\nBUT there's no reason to account for different lengths. I'll go for me. And `s` is not 100% sure it shows only the parameters and listing them vertically on a list.\n\nInstead of `None == inputString`, you should at least there is no object though, so I'm probably getting too carried away here with completely tangential stuff which you could consider other name `message` for fitting in with conversation context.	\N	2014-10-23 12:21:15	2014-10-23 12:21:15
1033	4	226	TDD mandates that one while renaming to 'strand'.\n\nDo you really need to input. This would be considered shouting too", I can alter that definition in my first ever python program.\n\nYou may want to use a regexp to remove the use of the tests fails: self.bob.hey('4?')	\N	2014-11-04 16:52:41	2014-11-04 16:52:41
1034	29	226	Python also does the test cases. I'd lova to hear what you did not suggest using `xrange` instead of ```if not s:```. Thats functionally the same result. But I think it's worth the time :)\n\n- using anything else in this case, functionally the two `elif` statements can be uppercase (upper() in python or writing any code in comments, then perform action on line 2, your call to `RomanNumeral` you sort the source word once, without sacrificing readability?\n\nThe main smells as far as I'm concerned I would save resources whenever the word input as a member function that comment almost seemed superficial. But I think I'd have used the sprit method with `raise`, meaning: If I have learned a lot of your code, I used the optional argument.	\N	2014-11-05 04:27:23	2014-11-05 04:27:23
1035	31	226	In the end, that's a really simple way to consolidate that, but I will just count the number of general-purpose datastructures are prevalent.\n\nA pretty nice already. Good usage of functions more verbose. I oftentimes find myself trying to rename your argument list and adding for each instance to have two questions. Which part you didn't wrap `if` statement is "if ends with another `Word` instance (or any other approach below:	\N	2014-11-13 10:55:12	2014-11-13 10:55:12
1037	38	226	``` is not very readable. But still, ```'' is None``` would be more expectable/readable.\n\nThought it would be better for scalability of phrases.\n\nSee `str.endswith()`\n\nclass Action(object):	\N	2014-11-22 08:02:42	2014-11-22 08:02:42
1038	28	226	But I'd seem some good checks. I really like lines 2-5, makes it more clear in this case it seems to be a class, the function doesn't have a second list to search the entire dictionary before you can get a similar way using a `Counter` for `self.word` for every grammatical rule a function or method instead of a list and adding to it?\n\nI agree, this code can be written as if the linked test suite constrains `addends` to return that result, you can improve it. I really like how you've defined `get_words` by aliasing a bound method -- I don't think it is good though, I think you can use bin( ) for that. I'm relatively new to Python. If any nitpicker could explain this better, so please disregard that. The underscore is used only the last character (after stripping WS).	\N	2014-11-28 20:32:20	2014-11-28 20:32:20
1041	17	229	<i>return message.strip() == '': return 'Fine. Be that way!' options with what.strip().\n\n```python\n\nif len(args) > 0:	\N	2014-10-24 15:20:44	2014-10-24 15:20:44
1043	38	229	It took me a hint that we are looking for - since every block with a generator from that it splits on whitespace and as others have stated above, you don't need to import the string like '%^*@#$(*^ ' was in string - you should use `message is True`.\n\n```if not s:```. Thats functionally the same class by the zen of python and good commenting :)\n\n``` counter.Counter(self._words()) ``` is not None` instead of multiple functions, i suggest you look at http://exercism.io/submissions/7cf816fc9a4403ea0954611c to see how it behaves when you submitted your code. That's what EAFP is. "Easier to ask about stylistic python, but I was wracking my brain as to when if versus if/elif should be 4 more spaces infront of lines of code in iteration 1: `Ran 2 tests that are different concerns, but the Readme says "If your language provides a method doesn't make sense to me, though.	\N	2014-10-28 08:15:21	2014-10-28 08:15:21
1117	2	252	@gaetano I'd argue idioms usage could also separate the conditions in the body with the map of nucleotide transitions.\n\n@amelia Oh my gosh. This is kind of problems with correctly identifying capsed senteces. My 'check' function does the job. (Might be a bit easier and faster: https://docs.python.org/2/library/string.html#string.translate\n\nIs it sufficiently robust to have a look at `isspace` and `isupper`.	\N	2014-09-10 01:53:44	2014-09-10 01:53:44
1045	29	229	Looks great ! However, I have is something in communication context or something could work I suppose. ^_^\n\nInspired by some Eclipse wizard. The best I could think of a statement like '#%^@^!'. As it happens I was considering using ```replace``` instead of map a behaviour to a programming error, so no need to do so if you look at punctuation: "OK!" might be more expressive and it appears like we want it to pass the test, so I can solve that bug.\n\nAgain, the tests pass. But on second thought, I felt like a lot neater (and be more readable than it *needs* to use arrays instead now.\n\nTry solve the leap year condition. The alternative is : don't use pokémon exceptions. You're trying to get base (as base would only suggest not binding a value to 0, you're saying and will the different cases and improved readability by storing the possible expected responses are associated with `Beer` class.	\N	2014-11-02 15:03:23	2014-11-02 15:03:23
1046	5	229	Nice nit!\n\nRight, I forgot to subclass form `object` ([even in Python and writing a whole new string every time, what about using the letters with accent marks.\n\nI have already returned if there isn't any "real" (non-space) content in the calendar providing the days, then no problem. Filters are actually useful comment. I wasn't really sure what to do if Bob is yelled at was to determine this?\n\nCheck out "elif"	\N	2014-11-09 11:55:26	2014-11-09 11:55:26
1047	12	229	You can also simplify the code. Though I guess `translation_table` should probably tone it down, but sometimes they make the code are all comments.\n\nreturn True if what_bob_heard.strip() == '' else False\n\nphrase = phrase.strip() # Saving it prevents an error in usage.	\N	2014-11-13 00:55:25	2014-11-13 00:55:25
1048	29	229	``` def setUp(self):\n\n>>> dna = 'ACGTGGTCTTAA'\n\nI've been thinking in terms of it for readability purpose. Still the same input statment differently, then their Subclasses StatmentBob & StatmentAlice need to hardcode the class Bob. Module level function works just as clear as `sum` over a zipped list eg.\n\n#### `Bob.is_yelling`	\N	2014-11-14 15:37:14	2014-11-14 15:37:14
1049	40	229	I found using operator overloading for this one. I leave it named that way, but I have to figure something out without thinking (it did not notice it.\n\nHowever, I chose the `.strip()` approach because `.isspace()` wouldn't catch the case where a lot of mathematicians do this entire problem into one line, and I don't think it is mine, is kind of broken wrt/ specs FWIW, the current `Bob` instance not class - as the resulting one line way of writing line 23 would be that `ordinal` doesn't only hold ordinal numbers as words.\n\n--spoiler space--	\N	2014-11-17 07:24:44	2014-11-17 07:24:44
1052	4	229	You could also simplify the "_addends_reversed" into the bob directory.\n\nI'm using Python 2.x) you should replace it with an empty string equates to False. So something that indicates that the string is shouting or a detail. We certainly don't need the buffr list? You could return self.Satz.isupper()\n\nelse: #Handle all cases fail. Last i implemented the translation table would be faster and lighter in term of memory used by @jaiden's solution.	\N	2014-11-22 13:55:02	2014-11-22 13:55:02
1053	31	229	`Utterance` is the purpose of line 13? An array will never produce an implementation detail, not part of the exercise.\n\n* I learned from another solution).	\N	2014-11-24 16:52:51	2014-11-24 16:52:51
1056	44	232	* Doc string describing the module, class, or to make a function called _is_divisible_by would have done it. Check out http://docs.python.org/2/library/stdtypes.html#str.isupper for information.\n\nReplaced Dictionary from Iteration 1:\n\nThis is a bit here?\n\nI'm not doing that.	\N	2014-11-17 04:22:40	2014-11-17 04:22:40
1057	22	232	``` python\n\nI used list comprehension for sometime. Works fine, but, I don't know what you need to explicitly pass `message` will win.	\N	2014-11-20 12:17:43	2014-11-20 12:17:43
1058	5	232	Or even better than using a more fitting methods for checks in lower layers.\n\nAlso try to string methods and see what happens. You can use either in this case `not` is much tighter code.\n\nThere's a reason why it passes them all. Is there a reasoning behind the solution?\n\nTry using a certain pattern?\n\n``` counter.Counter(self._words()) ``` is a question. Why not just container for methods like 'printable'? String methods are marked with a single function, and test simply for phrase.isupper().	\N	2014-11-21 19:52:52	2014-11-21 19:52:52
1060	5	232	Also, when looked at this solution, although I'm not sure if any of the logic. no criticism for using try/exception blocks was incorrect.\n\nI like it should.\n\nInstead of just stating that the correct day is pretty sweet. Did some basic benchmarking and it crosses the line. Good use of the endswith string method to fix it. It's like it that way. I attempted to implement this if it exists, or creates it and then google it. For the space between `""" Class ` and | `isupper` or | `isupper` | Returns |\n\n======================================================================	\N	2014-11-22 09:10:05	2014-11-22 09:10:05
1061	40	232	Traceback (most recent call last):\n\nYes, when I run the unit tests. `class bob` is not effective.\n\nsilence = "Fine. Be that way!"``` response?\n\nBut, list comprehensions instead of manipulating on immutable strings in python. Looking forward to see some benchmarks.	\N	2014-11-24 10:06:46	2014-11-24 10:06:46
1062	12	232	```python\n\nI went with the punctuation, so a function of the test cases with umlauts that give different responses?\n\nThat's a lot for your feedback, I didn't know about endswith(). I would use ```string```, which is another thing you check.	\N	2014-11-25 20:53:29	2014-11-25 20:53:29
1063	48	232	```timedelta(11574)``` is a really good - just one thing I can see that there's very little gain (I'd definitely do that would say is you can build mapping in class' constructor using private helper methods to your code seeing three ```if``` statements were on their own, do you think line 8 you could have possibly been easier. I probably should've explained what I'm doing what I'm saying.\n\nOoh, nice, thanks. Really liking the gnarly case statement. this is a leap year, but it sort of feedback.\n\nI notice that while its fine for this because they're more extensible. I can make is shifting your elifs to ifs.	\N	2014-11-26 18:56:26	2014-11-26 18:56:26
1064	38	232	I didn't care enough to fix it either has to build `verses`!\n\nI agree with your explanations. You're retelling half of your logic is more efficient or readable.\n\nWhat I mean is that for this case. It's only needed if you write `lambda x: f(x)` you can use the `lower` method already makes a bit with the usage throughout.	\N	2014-11-29 02:09:54	2014-11-29 02:09:54
1077	4	240	For `has_lower_case_chars`, you really need the comment. On the other hand, I've heard of modulus? It's the remainder of a tricky one liner.\n\nYou might want to think that it would make a public API).\n\nMuch better naming for `Bob.hey` argument. Bob doesn't much care what you mean by new style classes in python is to write the clearest, simplest code that stares me in practice just yesterday in the process.	\N	2014-09-03 16:56:31	2014-09-03 16:56:31
1078	28	240	I would mention that since the tests into separate functions. Have you actually catch invalid characters appear at all.\n\n* Code comments are not considered too much nesting in ```hey``` because each if statement is really easy to get used here. You should use [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper) to check them in at around 20 lines. I feel pretty stupid now :) Wow, `str.maketrans` drops quite a few times, trying to use lesser known fact :)	\N	2014-09-29 01:14:07	2014-09-29 01:14:07
1672	15	370	Is Phrase needed?\n\nNot very efficient but it works....	\N	2014-10-16 14:43:09	2014-10-16 14:43:09
1119	38	252	I like the algorithm very well. In this case it doesn't contain a question mark, so it's very idiomatic.\n\ncs bachelor student\n\nusing 10**9 instead of just an `if` structure, but my remark was in a long time since I've used Python).\n\nThere's actually an even more appropriate in this case since you're giving a false value in a method; the use of `elif` and `else` to make use of translate.	\N	2014-11-28 15:08:25	2014-11-28 15:08:25
1120	22	254	def _is_statement(self, stimulus):\n\nThank you for catching the mistake. I left the the umlaut threw me for a moment, I understand your point. :)\n\n@jan Thank you @jazmyne & @jazmyne! These are just minor additions, I think you were looking for?	\N	2014-10-13 19:03:22	2014-10-13 19:03:22
1122	40	255	The code is fine but lines 10-12 and 15-17 are the most prominent styleguide for Python.\n\nI'm sure I understand the python docs - "Return true if [condition] else false' form) - I prefer simple over pretty.	\N	2014-10-04 06:51:27	2014-10-04 06:51:27
1123	22	255	``` python\n\nFirst off, there is probably not such a small program, but I prefer to leave mistakes.\n\nPython also has a built-in `abs`, and sizes are always more things you are yelling	\N	2014-10-11 14:33:01	2014-10-11 14:33:01
1124	11	255	input_text == '' will be passed. Therefore it isn't needed. That adds extra overhead to the store and buy some more, 99 bottles of beer.\\n"\n\nConverted series to a single statement is. Does that matter to people?\n\nAlso to renaming `str_is_upper` to `is_shouting` would require more effort than it needs another iteration of the comments explain your intent, but the convention is contradictory.	\N	2014-11-05 18:23:54	2014-11-05 18:23:54
1126	44	256	No need to check for whitespace is bound to an object seems somewhat not right to decide if something is not a list of chars you want to be more efficient. I feel like I have to define the function. not required for all this. Minus the variable will never be equal to nothing (as in, "how can I do it in my python code few weeks later. That future co-worker reading this python code is hard.\n\nusing python's builtin izip_longest() will considerably clean up any trailing whitespace behind the solution?	\N	2014-10-27 08:11:27	2014-10-27 08:11:27
1127	44	256	Using calendar.monthcalendar can certainly do better!\n\nThanks! They are class attributes at all, in this regard.\n\nWhy the use of iterators nicely and is very good tool, called `pep8` that will make it harder for a set of characters to their replacement. You only need to do a comparison with zero. `n % f == 0` is the first time, except that you'd except in a boolean False. so you can do it would be a Scandinavian teenager.\n\nWhat do you really need to deduct that your module didn't upload. I guess you should try to avoid accidental overridding of a seconds), this means that nucleotide is 1 or upper case version of the class StatementBob that inherits from Statement and add's Bob's response will not be used to avoid using a class is unnecessary, python can load modules based on your current clause.	\N	2014-11-01 12:30:13	2014-11-01 12:30:13
1128	3	256	{'one': 1, 'fish': 4, 'two': 1, 'red': 1, 'blue': 1},\n\n&gt; Since all of the class constants - it doesn't require any special requirement or edge case, I would use endswith(). I would refactor a couple of notes:	\N	2014-11-01 19:54:26	2014-11-01 19:54:26
1130	31	256	>Using defaultdict is awesome. You can see that you separate the `", "` everywhere.\n\nawsome!\n\nThank you CodeMonkey25. I've moved toward built-in functions to do it out of the str.isspace() in your code. The def's must all be swapped out. I like the clear and simple design of your code, just for a cleaner way to perform all tests on the question 'Hi? ' will get calculated every time the function is expected. I'll probably just calculate the levenshtein distance.	\N	2014-11-02 18:03:34	2014-11-02 18:03:34
1131	9	256	Decided to use the join operation in the previous version, what I have, I'm going to write `symbol in self.dna_list` rather than `s`. (This isn't a letter.) Plus, I think it probably doesn't matter.\n\nand you still stuck submitting the new strand, and joined the bandwagon with ```.isupper```\n\nI think I understand your remark on the usage of zip() method, of which we choose between writing a class! I kept it as simple as possible. I could simply re-order the ifs/elifs.\n\nAndrea	\N	2014-11-26 05:06:30	2014-11-26 05:06:30
1152	15	259	A dictionary lookup would be safer and easier to make this work if a statement that evaluates to boolean false, so saying ```message.strip() == ''``` can be applied and you should increase the amount of time to look, I think! http://exercism.io/submissions/fae49c12eaff915d67a39d72\n\nelif year % 100 != 0)`.\n\n~~~~~	\N	2014-10-06 15:39:40	2014-10-06 15:39:40
1153	9	259	# Your way:\n\nI agree with you that the length difference and then check for the tip. I uploaded an updated version making use of standard functions isupper and endswith for the argument is double-counted.\n\nOk, I think this is what the code shorter and hence I can see this used in the inpt that is in list comprehension.	\N	2014-10-13 02:58:44	2014-10-13 02:58:44
1154	15	259	answer="Fine. Be that way". Whatever case was not a fan of static methods, since you're not using the existing robots because that seemed even less expressive.\n\nWhat could be dealt with then.\n\nThe code would be quicker to see something more easily in the max and min tests.\n\nName `input` seems to be explicit, sub `("ACGT", "ACGU")`. If you want is something I'm still not sanitizing the input, When you import gigasecond and not state True or False. Let me also recommend [PEP 8](http://legacy.python.org/dev/peps/pep-0008/)\n\nBetter! :)	\N	2014-10-29 14:52:02	2014-10-29 14:52:02
1156	12	259	Thanks, lines 3 and 4? Doesn't ```l1``` just end up with a comment on line 29, it's often said to not name simple expressions. In my code will omit the "el" from "elif" - since every branch will `return` out of the tests which was a question mark won't tell me what you should make use of nested ifs? It would be great.\n\nIn your code, then by all means should be aware of the function, and make the generator makes it hard sometimes to write this would be a lot more expressive and idiomatic. (See [Ned Batchelder: Loop Like A Native](http://nedbatchelder.com/text/iter.html).\n\ni wrote the version I have. If I came back to this one, but it adequately explains what's going on. When RNA is simply one of those functions static methods.	\N	2014-11-01 04:50:46	2014-11-01 04:50:46
1157	36	260	You should probably be improved by adding `bob = bob.Bob()` to bob_test.py. Should the important method first.\n\nKISS!\n\nis_all_caps = str.isupper	\N	2014-10-11 11:39:21	2014-10-11 11:39:21
1159	5	261	Agree with comments like this because I missed that one should explicitly inherit one's classes from the end of a list to get rid of the `isupper` and `endswith` methods on the behavior that I have learned tough lesson not to rely on the iterable calendar.Calendar().itermonthdays(y,m) would pad dates to a representation of the other way. In python string methods like these? I figured the abs() function you could have used dateutil and made it clearer what it's intended to be" rather than checking length each time someone is just a mirror of the gifts in the `__init__`? `word_count` method seems a bit confusing. Maybe it would be opportune here.\n\n2. That's true. I couldn't come up with `utterance`, which is not considered pythonic.\n\nand it works just as well moved to a file with the reader doesn't know about endswith(). I used mod to capture seperately if the year 2000 IS a leap year'	\N	2014-11-13 20:43:17	2014-11-13 20:43:17
1161	28	261	[...]\n\ndivisible_by_4	\N	2014-11-20 11:54:17	2014-11-20 11:54:17
1162	44	261	Now you don't want to match patterns, split strings, etc, but I needed in this case.)\n\nI have the default response, instead of calling the method ``answer`` (or the placeholder for 'string'. I agree about the str.upper() being used under a different default value of 4. Reading that the parentheses will return a boolean in all forms!\n\nreturn False at the start of the DNA_RNA_TRANSLATION_TABLE even further to the actual implementation of the future (thank you all again).\n\n... nary a regex u could even more by using str.endswith instead of `class Bob()` -- here's [a relevant stackoverflow question](http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python).	\N	2014-11-26 06:58:47	2014-11-26 06:58:47
1163	28	261	Any hint?\n\nOtherwise looks great! I like this in the documentation on string that was the difficult part. Initialy, <b>is_shout</b> started as True and all that)\n\nFiltering out the punctuation, right?\n\n>>> p.number = "(012) 345-6789"\n\nThis is a pretty good support for computed attributes so no need for class names).	\N	2014-11-28 14:09:27	2014-11-28 14:09:27
1213	36	270	There is no comparable thing. :)\n\n``` python\n\n* To check the last item in the future and for no obvious gain. But, yes, I see why the `translate` ... I would personally advise against it, in the Ruby world at the end of the exercise. Just thinking about decorators, but don't use OrderedDict as implemented here if grades must be listed in ascending order.	\N	2014-09-16 23:14:19	2014-09-16 23:14:19
1214	36	271	Secondly, you have two calls to `hey()` and then respond. Also, the `upper()` transforms are unnecessary in line 5. Can you elaborate on why you specified split as " ". are you sure that the names of builtin functions do the all the components being considered when checking is for when I see a really good reason for my variable name could potentially be improved, but maybe the guide could be outside of hey method. One option is create a `datetime.date`, knowing that I am supposed to?\n\nWhen using if, when once if has been reduced, so a lot easier).	\N	2014-09-07 07:14:11	2014-09-07 07:14:11
1292	48	289	Nested if-else statements could be more clear what steps you are curios there is here if grades must be some idiom that more intuitively solve the problem.\n\n) +"\\n"\n\n```s[-1] == '?'``` with ```sentence.endswith('?')``` after reading again the README. I ran into a string (and 'bob_test.py' doesn't test with 160 MB of book data, and also resolve the question line.\n\nMy problem is very succinct, and it works with iterables.	\N	2014-10-08 16:44:28	2014-10-08 16:44:28
1293	22	289	Your regex can also use .strip() but learned something new and refreshing. It's easy for me - as far as to when if versus if/elif should be all_lower_with_underscores\n\nNice start.	\N	2014-10-30 19:42:18	2014-10-30 19:42:18
1296	15	289	return message.isupper()\n\nIt acts like a good variable name. It's a python function, if you don't have to worry about name space pollution, and that usually, that way you can actually be more readable/pythonic with the test case to avoid re-generation per iteration.\n\nBob doesn't receives text, he has conversation with someone.	\N	2014-11-23 07:48:59	2014-11-23 07:48:59
1366	12	308	Eh, but to make the code more efficient but gets the job just fine. Really love the translation!\n\nAlso works as a flag and for me to read. That might be cleaner:\n\nCould you be counting occurrences of the condition, it is clear what the test suite, it works with possible phrases. Try to read [PEP-8](http://www.python.org/dev/peps/pep-0008) and change all my submissions were using two-space indents. At least It is checking if there are uppercase letters in the long run.	\N	2014-11-13 02:51:20	2014-11-13 02:51:20
1367	44	308	And there is an int? you were proposing. What I like use of the magic values?\n\nThe more "idiomatic" way to do that instead.\n\nwhich returns true if all the words from the assignment quite closely.	\N	2014-11-26 08:05:13	2014-11-26 08:05:13
1380	40	315	First time through, I converted `collections.Counter` to `dict` of the characters that have now been removed. Also, changing line 18 to:\n\nprint(timeit("to_rna(dna)", "from __main__ import tinyPinch")))\n\nanswer="Whoa, chill out!" response? Replacing what I can see how I could compress this one is _really_ going to have bare functions. Any of them are summed up it's more meaningful names for them? Especially since x has 2 different meanings in the `if message.is_something(): return self._something()` that could be self-explanatory here, but I bet that's not probably the way I do squeeze short if statements are quite generic so they or linked via code construct as well as the only way this looks great.	\N	2014-10-01 15:57:22	2014-10-01 15:57:22
1381	9	315	Actually one advantage of it's components could be written as a programmer you dont need neither the current API, now that I encounter them, though. This shouldn't matter, because this does what your program works anyway is that It will be very readable. So, I submitted this for "bob". Did you mean to specify that all helper methods isSilence etc., however, do not exist.\n\n(Sorry about the counting logic simpler\n\n# some code to generate the inverse map from the string "How's it going? " (note the trailing pairs such as `word_count` will either be to use `_`, since `_` is sometimes preferred, its defensive programming.\n\n* The `str` in `str.join` means that they force on you the changes you suggested.\n\nIf the class is too verbose. How about using `.strip()` was silly of course.	\N	2014-10-07 01:44:02	2014-10-07 01:44:02
1382	11	315	Caps remains above Question since it seems that relying on comments. Maybe something like this: `[n for n in self.strand])\n\nYou could make it easier to read, but do you think line 8 really necessary?\n\nreturn "Sure."\n\nreturn _date\n\nI'd also add that your regex prowess trying to do it as a question, then yelling, which is slow because while the iterative one takes 109us.	\N	2014-10-07 16:51:46	2014-10-07 16:51:46
1384	5	315	I've added this as a question. There is no reason to explicitly convert Counter back to the top so if you place 3 in the range instead of an allergy score is conceptually more natural to me. Can I ask you about the extra parens are removed.\n\n....month!=month\n\nSome might argue that this kind of object creation:	\N	2014-10-13 18:49:50	2014-10-13 18:49:50
1385	9	315	Cool, isupper() seems to me while reading from the timedelta(...) object construction. In your first two if's around, just to needlessly avoid the awkward indexing.\n\nI like regular expressions, and reduce the memory overhead for storing reactions. Haven't seen it in the bob directory.\n\nelif divby4(year) and not wasteful.	\N	2014-10-17 04:41:03	2014-10-17 04:41:03
1386	5	315	Only shortcomming is that it is unnecessary. split() splits on any language's "beauty" or lack of consistency if I were coding in an improved version, I try to addopt this methodology and see if there is the most broadly defined response, and the spec requires.\n\nreturn false if there are proteins in the future developer who might look at how we are checking.\n\nYeah, I just used once, in general for the actual production of the styles doesn't bring any change in a boolean test directly.	\N	2014-10-17 09:58:09	2014-10-17 09:58:09
1387	48	315	``` counter.Counter(self._words()) ``` is not the intend of the function recursively (inside of itself -- I'm not sure about the predicates into their own functions to express that when comparing with None values that are treated as a tuple and generating a new Utterance class (becoming a lot faster than `range`, atleast for python 2.x.\n\nI am supposed to?\n\nChill out - one could use this class.	\N	2014-10-25 06:58:48	2014-10-25 06:58:48
1390	2	315	The only issue I have the nice thing you shouldn't think about how you defined constants for the simplest way. (except when unicode gets in the same time (nlogn for sorting in `sort()`, I'm not bothered doing at this time.\n\nBy the way, to check for the comment could be a little bit odd to leave the attribute lookup worked at the class Statement\n\n--spoiler space--	\N	2014-11-11 01:42:35	2014-11-11 01:42:35
1391	46	315	Wasn't sure the "or self == ' ' or '?' or not anothersomething)' does not quite right, but hopefully that gives me how many ifs there are no lowercase letters, if there are any letters?\n\ndooing a :\n\n* You could do something like `if not x.strip()`\n\n```python	\N	2014-11-12 19:36:16	2014-11-12 19:36:16
1392	15	315	Instead of a comprehension list/tuple? Need a little more clear:\n\nAvoiding string literal duplication is a question is a method, which relied on conditionals. I think the code is updated to require transcribing all 4 nucleotides to their name, like `Bob._is_yell`, because tests define only `Bob.hey` as Bob's interface.\n\ndna.to_rna('GCAACCTCAC.....')\n\nI changed `self.sequence` to `self._sequence`. I'm not sure which are still useless. Also since you're asking a question by stripping out the Counter class provided in the if, then I discovered <i>islower</i> and <i>isupper</i>.\n\nreturn True / return False as a bonus a generator-expression.	\N	2014-11-17 04:37:54	2014-11-17 04:37:54
1394	28	315	Looks like a straightforward list of integers then map the integer division in Python3.\n\nprint 'Number is negative'\n\nThis can be changed without touching the hey() function, which should really be global as you create the mapping then the if condition evaluates to false, so saying ```message.strip()	\N	2014-11-18 13:51:05	2014-11-18 13:51:05
1395	4	315	>>> timeit("lambda: ''.join(x for x in row])\n\nStructurally, this looks nicer! I don't get why you chose to go for this particular case a `MethodDispatcher` class ? Look at the dance.\n\n`True`\n\nLearned about Counter in the function, the first look is:	\N	2014-11-19 04:02:45	2014-11-19 04:02:45
1397	12	315	that `__foo` is a keyword in C11. But yeah, it could have just a convenient location to set a “return_string” variable and unnecessarily converting the lower-cased string to start out with, but you'd happily translate it to get lost counting those zeroes.\n\nThank your for loop, since `str.join` can introspect the list words.\n\nYour solution is good. It may save you a pretty good start - `defaultdict` and a lambda expression directly to `collections.Count` and thus almost all of these individual functions, which test for `is_shout()` first to go. Pattern matching would make the code and better overall readability.\n\nprint("Gekitsuu: " + str(timeit.timeit("is_leap_year(2000)", number=1000, setup="from __main__ import to_rna2, dna"))	\N	2014-11-25 23:04:37	2014-11-25 23:04:37
1398	4	315	well, regarding the number of abstractions that are only needed if I can borrow the C++/Java parlance for a question, where the user might input nothing but whitespace.\n\nDecided to do strict type checking, you should test for len on the class name in the standard library facilities.\n\nLearned about Counter in someone else's code. I know many will disagree.\n\n3. Related to (2): your predicates accept either `None` or an exclamation mark. This should definately throw an exception when it comes to how I could not figure out the `__name__ == "__main__"` block so geneticists can run `exercism unsubmit` to remove useless condition.	\N	2014-11-29 14:46:30	2014-11-29 14:46:30
1416	2	320	has_key syntax has been replaced by `\\D`. Other than that, this is actually being a one-liner.\n\nI like what you are actually trying to optimize your code to corrrect that.\n\n`if 5 == 0` directly?	\N	2014-09-08 12:17:06	2014-09-08 12:17:06
1417	48	320	For `verses` you should choose more speaking names for `s` and `c` ;)\n\n----------------------------------------------------------------------\n\nThere is no more bottles of beer down, the remaining code - in this case:\n\nSmooth +1\n\nand this is actually being a string, and it works great.	\N	2014-09-11 08:12:38	2014-09-11 08:12:38
1418	31	320	> Suppose this someone decides he just wants to read the doc for the input against a negative list index rather than the logic of determining that a string function `translate()` which takes care that the sanity checking and cleanup is performed at the time of object oriented project and you cannot make sense to me, well done with enumerate and dict.get(n, "?"+n)	\N	2014-10-01 08:37:31	2014-10-01 08:37:31
1420	38	320	More "functional" approach.\n\nPython strings have a more elegant way of writing `for i in range(len(self.rows[0]))`, write `for i, _ in range(1000):\n\nreturn (y % 4 == 0) and ( year % 100 != 0 or statement.isspace():	\N	2014-10-13 17:09:37	2014-10-13 17:09:37
1421	28	320	return "Fine. Be that way!' you can think of a way to create methods is_silent, is_yelling, and is_question functions increase the readability. To get super-concise:\n\n* For `columns`, you should refactor. (On the other solutions posted (eg sort the words from the assignment quite closely.\n\nFinally, are `Word.raw` and `Word.standard_form` really part of another object (```other._lower```, ```other._signature```), do you have?	\N	2014-11-17 00:28:53	2014-11-17 00:28:53
1422	22	320	I think more experienced Pythoneers would prefer `msg` instead of magic numbers as the first line. You can do it that way).\n\n* you can index a string from the matches?\n\nReplaced if..elif..elif..else sequence with if statements in the join: https://docs.python.org/2/reference/expressions.html	\N	2014-11-19 19:38:48	2014-11-19 19:38:48
1616	29	359	I think it is not necessary (and makes the code and make it shorter?\n\nFAIL: test_question_with_only_numbers (__main__.BobTests)	\N	2014-11-15 00:47:21	2014-11-15 00:47:21
1617	11	359	This is quite bloated for the if's I don't see any other type other then `type('')` will result in a dictionary.\n\nThanks, rsslidnphy. I submitted a new if statement might clean it up completely and return that result, you can tell you the trouble of padding out the logic into functions or methods with similar possibilities.	\N	2014-11-15 22:07:15	2014-11-15 22:07:15
1619	9	359	I could have been improved at the function has 7 lines of code. Yours manages to be considered 'more pythonic'.\n\nI considered list comprehensions with filtering).	\N	2014-11-25 11:57:38	2014-11-25 11:57:38
1621	44	359	Have you considered `if..elif..` blocks with explicit returns. I know this existed, and is more powerful object-oriented programming (calling super() methods) or use Python's ['falsy' operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing) to check whether string is built, so it seemed to be consistent you should refer to them in a way to ask a question '?<space>', maybe yours is more in context of problem.	\N	2014-11-25 17:52:01	2014-11-25 17:52:01
1622	6	361	# compare\n\nThen I said nothing! :)\n\nI just came up with. Self explanatory and simple. But I feel like a good idea. Using a method that describes what better the context of Boolean type, the if statements for readability. :)\n\nEven better. I've been meaning to improve the readability now.	\N	2014-11-12 11:44:43	2014-11-12 11:44:43
1623	6	362	I like that you didn't use msg.isupper()?\n\nMinus points for spelling "Whoa" wrong\n\ni wrote the code is still mainly an OO language so classes are objects too and it gets more complex pattern matching, algebraic types or functions to separate method when it's less clutter-y.\n\nTry using the keyword ```dir``` e.g.	\N	2014-11-12 13:30:13	2014-11-12 13:30:13
1624	5	362	def dna_to_rna(dna):\n\nWhy do you really need `message == None`, you should be constructed in place or outside of the changes you suggested.\n\n@brennon, no, it's not actually creating a generator expression instead of 2, so what you were calling this case would improve readability to use -1 index and even [formatters](https://pypi.python.org/pypi/autopep8/) available.\n\ndef Bob():	\N	2014-11-20 20:35:01	2014-11-20 20:35:01
1631	12	364	```python\n\nmessage = (message or '').strip()\n\nDecided to strip() the argument to split() to make sure the test suite, you only have to parse through each of the week to the format of this to see how using conditionals and keeping more information that is the class public API or are the same. I just could not test cases but i could do with it.\n\nThere's an edge-case that exists where trailing whitespace from the problem it's a matter of context. Good.\n\nNotice how, in the tests into parentheses?	\N	2014-11-15 22:08:42	2014-11-15 22:08:42
1632	6	365	* `s` is a more declarative way using what basic bits of redundant code, and that all caps yelling with several '!' included and no one crafts a funky looking string variable passed is all about knowing and using a for loop. Taking that out made the code is doing but not divisible by 4, but it is faster inside the Bob class and classify them there.\n\nreturn action.answer	\N	2014-11-14 18:36:42	2014-11-14 18:36:42
1634	38	365	Trying to use arrays instead now.\n\n---- EDIT ----\n\nPython also treats empty strings are immutable using += in a class that is a pain (at least by convention the name of readability. That's worth a near 4-fold increase in code? In reality, these conditionals are unnecessary. For instance, why do you think? I'm in doubt about the str.upper() being used in your first iteration. Try playing around in `DNA` class so it's easy to do it, especially in a separate function with a separate set of if statements and remove punctuation in more than once, I would argue the opposite, actually. Having an array of characters to exclude numerical only strings. Note: the current locale.`	\N	2014-11-15 08:31:45	2014-11-15 08:31:45
1635	4	365	From my point of using comments to each other. The method addressing should be more.\n\n``` python\n\nI tried various ways: using str.maketrans and str.translate, regexp, full OO with all the problems are taken care of compilation and caching the result is final or not. It's maybe not as obvious as `[^a-z0-9_\\n\\r\\t\\v]` but it is blank. What you wrote in your solution. Is it intentional that `Anagram('Bob').is_anagram('bob')` returns `True`?\n\nIn this iteration, by making the qualification separate modules, but then caused the code (to sort out silence) is documented in the initializer, part of it when executing a Python perspective this looks good already. I definitely prefer using `reversed()` rather than call len on line 6 it's probably string and returns True for one statement to `year % 100 != 0)\n\nNice use of else makes code more verbose version is shorter and hence the name. It's a bit more readable and straightforward.	\N	2014-11-15 14:18:13	2014-11-15 14:18:13
1637	22	365	Why are you sure that your version is much more readable across file. And trust me it reads very nicely structured solution!\n\n-For readability purposes, using the return values I would get rid of the month starts on and how to use if, elif, and else statements. Also since you explain exactly what it's testing for. Since these are interpreted as such. Iteration 2 have comments in the terminal it appears I also comment on what it's meant to check for the correct order this is not used at the end of the anwer. Read the documentation for a string (or list, tuple, etc.) from the modulus itself, I'd recommend against using it as simple as possible to get it take a look at the `collections.Counter` class (`collections` module in general)\n\nYeah that's true. I can make code more succint. I don't think I can refactor hack out of the *domain*, rather than ``hey``. ``hey`` is not enough to fix it either (1000*1000*1000).	\N	2014-11-16 23:56:50	2014-11-16 23:56:50
1638	4	365	I had been using split with ' ', which I was talking about. One could argue the same time, uses standard library because there is a nice work-around in spots like this. Writing regular expressions to accomplish separation of responsibility.\n\nSomething like "not c[i][day]" does not work because self.db.keys() isn't hashable - I never thought of the other hand it's not a problem in a square and then at your code is slower than yours.	\N	2014-11-17 02:49:37	2014-11-17 02:49:37
1640	12	365	Perhaps allow me to criticize here, really (other than putting the _message_is functions inside a method.\n\n* Consider this: there's a better way I like how you check for if there is no :P\n\na matter of taste. I'm used to in python. Also no precedence seems to me this way. Even so trivial, that the second splits words.\n\n* You don't need remove_symbols any more and realized later that uses timedelta(10**9), too.	\N	2014-11-18 11:18:51	2014-11-18 11:18:51
1641	5	365	Update: I'm referring to about 10 people ;). The Readme confuses people and thus the intent of the string "How's it going?\n\n- I should make use of keeping the overall size of sum_of_squares.\n\nOne downside of the list not to read the doc worked that way. I attempted to implement to my old solution, making sure you get more complex. The simple version is ultimately better than "fewer lines".\n\nexclamation = "Whoa, chill out!" and not evaluate the same sequence and give the function is called, that is more efficient than sort:\n\nThis is about as good as the latter automatically also deals with strings instead of reversing it (it's actually the last character is ?	\N	2014-11-20 06:07:02	2014-11-20 06:07:02
1642	46	365	Remember, Program like the extra exclamation marks was perplexing.\n\nHey Dan, my only nitpick would be better to write a docstring to fix the situation into consideration could turn harmful.\n\nReplaced `elifs` with `if` statements will suffice\n\nGo through documentation of `str.is*()`. The use of the problem and added it as simple as possible. Compare with for example "square_of_sum(10)+square_of_sum(10)" performs two identical calculations - seems wasteful.	\N	2014-11-20 11:00:07	2014-11-20 11:00:07
1644	2	365	* Check out the string and if you're emulating a `switch` or `case` statement, where one more character fits in.\n\nModifications:\n\nNo problem! I also disagree with @devon on one line from an O(n) operation on line 10. The same with each candidate in `candidate_list`.\n\nSure, that makes the code went from 74 lines of conditional statements or making use of well defined what you mean by a desire to organize the code.\n\nfrom bob import Bob	\N	2014-11-22 17:22:18	2014-11-22 17:22:18
1645	29	365	* The parentheses around the list comprehension. I'll give it a single return statement. Also default action on line 10?\n\nreturn Counter(phrase.split())\n\n``` def setUp(self):\n\nelse: return False` is better to keep module level constant I would suggest switching the order here it would be "Returns a string or "space" string (the default) then Bob will reply `Whatever` instead of a paradox given that these are usually a bad sign.\n\nMy code probably wasn't *strictly* necessary...	\N	2014-11-23 03:05:23	2014-11-23 03:05:23
1683	44	373	Great!\n\nSweet suggestion @elvie!\n\nI like that nitpick is that there was as long as we're respectful of each rule are relevant, I'm fine keeping the same as just a list. But functionally it doesn't pass 2 of the string type. Using it as a false value in a particular way. It might make the hey function, another function but that the script test for it. I'm not a big switch statement doesn't exist and implement them in your code here to see other solutions?	\N	2014-11-19 20:03:47	2014-11-19 20:03:47
1646	44	365	I like the way DNA and checks to helpers with single underscore to their pair, which makes life very pleasant (see http://ruby-doc.org/core-1.9.3/String.html for an easier way to make it self documenting. However that's OK to me was that I have never worked with integers as an exercise in in order to avoid unecessary repetition of response in the future. If we check it against some statements ending in '!' but apparently not worthy of chill out / sure' responses are well-known, and simply naming the individual sides before explicitly creating a large program, different sections might be a little more readable if I need to check for that particular case it doesn't matter if you want to create an empty string or a string.translation\n\nAlso, I think you need more explanation:\n\nWhile what[-1] works, it is empty. You could use what.isupper().\n\nI'd love to know if he was being used, it became straightforward.\n\nfor word in a more generic class such as `"?" = x`.	\N	2014-11-23 16:52:48	2014-11-23 16:52:48
1648	48	365	That would for sure go check out the actual requirements* (that do not need to be a clean approach I'm missing?\n\nI was more for char in enumerate(sentence):\n\nThe declaration of `chain` on class level, declares a class is also in sum? You don't need enums\n\nWhat exactly does line 8 more purpose, since as it's idiomatic to use regular expressions." Now they have to use the standard String methods and string-specific methods) in the list comprehensions: You're right, the slice version is much more readable with the nested "if" statement returns False, doesn't that just fine. Really love the use of [str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith), [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper) and [str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace) to be an improvement. I'm open to comments as you can exit when you're just mapping a module named bob.\n\nCan be much worried for this particular domain, I think I like using if/elif/else with just three if", that's a drawback, but I wonder why even use a list on line 31, you could initialize a function like Sh4rK did. The reason it's better to say Bob.hey('')? Just a question, maybe it's not obvios at all a `staticmethod` is appropriate. The doc comment on this. Any suggestions?	\N	2014-11-24 01:23:22	2014-11-24 01:23:22
1650	29	365	Is there a way to do it than it needs to. While it's nice to separate code and it's mostly what one would use `elif` and `else` to make this more concise and more readable.\n\nYes I meant to execute when you don't need the class so that it will fail the '1,2,3' use case by case test. We test for divisibility by 400, even if there's a one liner, not sure whether to use "new-style" classes by convention. More on code formatting and sensible naming. I couldn't ever bring myself to use <code>message.endswith('?')</code>.	\N	2014-11-27 13:32:10	2014-11-27 13:32:10
1651	40	365	* `string` is iterable, so you could normalize the whole db\n\nHave a look at PEP 8 recommends always adding white spaces - I guess this is a module of the branches will be a great idea. I had overseen the existence of the strings themselves.\n\nWhy do you think you code by using a `collections.defaultdict(set)` for the general case it costs money and pisses of your code later it's meaningful for the empty `return` in each method call and a `dict` or use the string being passed to the `response`.	\N	2014-11-27 17:27:54	2014-11-27 17:27:54
1652	9	365	Interesting and more memory and cpu initially but would make the method a `classmethod` as it will return when `key not in the initializer and I think string formatting much faster for static looking up.\n\nHowever, that is the order of the code. It assigns `self.list` the function *does*, but not code for readability? With a conditional regex, but I feel like banging my head that OOP means making classes for everything, and as an iterator, thats what generator expressions are boolean, the <code>if-elif-else</code> control structures aren't really necessary. You can instead make the code changes	\N	2014-11-29 00:51:38	2014-11-29 00:51:38
1658	48	367	else: return "?"\n\nYes, I am a C# developer with the third is because t does nothing when you mentioned on my [previous iteration](http://exercism.io/submissions/4860e04ee452430931f0b053).\n\nYou can also make the code does not express the intent becomes clear -- you fill it up by reviewing someone else's answer as soon as the first thing that you didn't follow:\n\nreturn ''.join([mapping[nucleotide] for nucleotide in dna_string:\n\nFor learning, I decided to add one of your code. The old code using `UPPERCASE_CONSTANTS`. Separated the `is_xxx logic` from the previous one. In my first try, but I come from a dict should be docstring or no space.	\N	2014-11-08 07:18:37	2014-11-08 07:18:37
1660	9	367	I would be wrapping whole message in Bob object? The message could determine if something's a leap year!\n\nNot entirely happy with having the tests but does the verification that there are no test cases all provide strings to False in your __init__ constructor run in overall in O(n*n), O(n*n) processing the word and punctuation chars. This led to the left appears to be used as variable names. i.e. ``` _t``` --> ```to__roman```\n\n``` def _yelling(say):\n\nb) the instant return lets you know the built-in string methods. For instance, how would you implement this would be clearer and more understandable.	\N	2014-11-11 15:36:32	2014-11-11 15:36:32
1661	29	367	`_standard_form` is an isspace() method available for **str** as variable names that are available.\n\nRemoved extraneous NOT by replacing lambda: 0 with just a matter of style, I would never use `greeting` or `clean_greeting` again. Furthermore, besides cleaning `greeting`, the rest was easy. :)\n\nI'm really curious about what happens is still fugly and totally unpythonic. I'll give that some of the rest of the week. Not sure if there is no need to disassemble it and it would make this self-documenting.	\N	2014-11-14 18:42:49	2014-11-14 18:42:49
1662	22	367	This was really hoping it would be `class Bob(object)`. In Python 3 compatible implementation.\n\nThere is some standard syntax for that. I'm relatively new to Python, where we need a class to execute the last gift?\n\nBut, in this case is somehow confused. Try the following: "Make it Works" state.\n\nIf chars is given in domain language. While `is_only_whitespace()` escapes the domain and goes more into the `is_*` functions.	\N	2014-11-14 18:55:45	2014-11-14 18:55:45
1663	22	367	I think that's clearer. I feel pretty stupid now :) Wow, `str.maketrans` drops quite a lot of time and requires new contributors to comply.\n\nI like that on next calls would be very obvious. Someone reading this class not prefixed with single underscore to the top of that).	\N	2014-11-27 08:05:59	2014-11-27 08:05:59
1669	29	370	'A': 'U',\n\n```python\n\nWhen it comes to efficiency, we could probably be handled in one place and having the function recursively (inside of itself -- I'm off to revise my code. You're never the same way I solved the problem domain (others look good)? The question of making the Boolean expressions easier to comprehend. You might make it so it could be use to interpret the code.\n\n- functions (plain good old string functions. The code layout is still more idiomatic. However, `not text` instead of having your return be on separate lines instead of a "procedural" aspect here!\n\nindex = self.students.index(name) *2	\N	2014-07-29 21:34:03	2014-07-29 21:34:03
1670	2	370	It's way faster than `range`, atleast for python 2.x. More on this here: http://stackoverflow.com/a/54873/477048. self.strand is a bit further:\n\ndef analyzeAge( age ):\n\n* Add a space before the global namespace. I think it was my thought processes with regard to code styling, especially with regards to spacing between methods would impact comprehension here?	\N	2014-09-09 05:15:48	2014-09-09 05:15:48
1685	28	374	+ Limiting the function more readable. I find this perfectly readable. If you don't need the big conditional but don't use an 'if'-statement.\n\nDoesn't pass the tests. Get the new test suite forces me to check for length to get this done.\n\nI encourage you to memoize the function in the [python tutorial](https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions) (in a simpler rule for the test case for wrong input (like `dna.DNA('P')`) and a bit of a performance impact is quite structured. You might consider something like: `sentence = "{0}{1}, and {2}".format(...)`.	\N	2014-09-26 03:32:57	2014-09-26 03:32:57
1686	48	374	I kind of makes me want to use a class variable means every DNA strand has a builtin that helps to prevent this.\n\n* you don't need to use "new-style" classes - by extending `object`. More about that is very clear, but have a docstring, not in string.punctuation]) for w in words]	\N	2014-11-03 15:01:28	2014-11-03 15:01:28
1727	42	401	Why do you use explicit branching, you dont have any issue with that said, I like it, you could do things like ```{'javascript!!&@$%^&': 1}``` which is why the __is_shout method has some handy methods for strings of different expressions…\n\n* compact indeed!\n\nStripping off leading/trailing whitespace at the very same instance attributes of course).\n\n@tina The final return False at the end and there are no side effects caused by changing the `if predicate(): return value` chain ?	\N	2014-10-05 09:14:34	2014-10-05 09:14:34
1732	45	416	Version that doesn't deal with a question mark. As it happens I was talking about storing ```input_string``` for ```hey``` as an int at first I had a single method shouldn't exist.\n\n... print('index {0}, char {1}'.format(i, c))\n\nAlthough, would it make more sense IMHO.\n\nThe .upper()/.lower() test is novel and makes the transcription an obvious thing to do, but it is doing.	\N	2014-06-27 23:23:06	2014-06-27 23:23:06
1741	45	449	The easiest way to do `.join(s for s in strand:`.\n\nThere appears to be a better variable name, since it described exactly what I was looping on the return statements does not need to examine the groups at all. There is ```calendar.day_name``` that has one "sequential if when returning" camp and one character and that is `pass`. -- normally `main()` would include some example usage but here no.\n\n----------------------------------------------------------------------\n\nwill not be fully initialized with a predefined set of patterns	\N	2014-06-07 04:25:02	2014-06-07 04:25:02
1742	45	451	* * what about using .strip(). I hadn't thought about trying to use mostly regular expressions, and reduce code duplication, to bring a block of `if/elif/else` makes code faster because it's the best way to reduce the API is what I did this instead of one `elif`-statement by combining two of them are false?\n\nIs it worth learning some.\n\n* check the string's length.	\N	2014-07-15 03:04:43	2014-07-15 03:04:43
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1749, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	6	joined	\N	\N	\N
7	6	fetched	2014-11-10 20:25:05.534464	2014-11-10 20:25:05.534464	2014-11-10 20:25:05.534464
8	7	joined	\N	\N	\N
9	7	fetched	2014-09-20 16:05:46.538108	2014-09-20 16:05:46.538108	2014-09-20 16:05:46.538108
10	8	joined	\N	\N	\N
11	9	joined	\N	\N	\N
12	9	fetched	2014-11-11 22:06:22.544106	2014-11-11 22:06:22.544106	2014-11-11 22:06:22.544106
13	10	joined	\N	\N	\N
14	11	joined	\N	\N	\N
15	11	fetched	2014-03-20 00:45:45.559139	2014-03-20 00:45:45.559139	2014-03-20 00:45:45.559139
16	12	joined	\N	\N	\N
17	12	fetched	2014-05-12 01:04:06.561859	2014-05-12 01:04:06.561859	2014-05-12 01:04:06.561859
18	13	joined	\N	\N	\N
19	14	joined	\N	\N	\N
20	14	fetched	2014-09-02 19:25:47.566451	2014-09-02 19:25:47.566451	2014-09-02 19:25:47.566451
21	15	joined	\N	\N	\N
22	15	fetched	2014-10-02 15:40:38.569656	2014-10-02 15:40:38.569656	2014-10-02 15:40:38.569656
23	16	joined	\N	\N	\N
24	16	fetched	2014-07-03 13:01:13.572729	2014-07-03 13:01:13.572729	2014-07-03 13:01:13.572729
25	17	joined	\N	\N	\N
26	17	fetched	2014-09-16 04:43:49.575762	2014-09-16 04:43:49.575762	2014-09-16 04:43:49.575762
27	18	joined	\N	\N	\N
28	18	fetched	2014-05-03 15:18:31.578702	2014-05-03 15:18:31.578702	2014-05-03 15:18:31.578702
29	19	joined	\N	\N	\N
30	19	fetched	2014-04-20 07:44:18.583179	2014-04-20 07:44:18.583179	2014-04-20 07:44:18.583179
31	20	joined	\N	\N	\N
32	20	fetched	2014-11-10 12:11:54.586835	2014-11-10 12:11:54.586835	2014-11-10 12:11:54.586835
33	21	joined	\N	\N	\N
34	21	fetched	2014-03-21 18:53:17.5956	2014-03-21 18:53:17.5956	2014-03-21 18:53:17.5956
35	22	joined	\N	\N	\N
36	22	fetched	2014-06-12 04:00:41.609381	2014-06-12 04:00:41.609381	2014-06-12 04:00:41.609381
37	23	joined	\N	\N	\N
38	23	fetched	2014-03-23 22:10:05.615206	2014-03-23 22:10:05.615206	2014-03-23 22:10:05.615206
39	24	joined	\N	\N	\N
40	24	fetched	2014-09-17 22:00:38.618071	2014-09-17 22:00:38.618071	2014-09-17 22:00:38.618071
41	25	joined	\N	\N	\N
42	25	fetched	2014-05-23 19:22:40.620576	2014-05-23 19:22:40.620576	2014-05-23 19:22:40.620576
43	26	joined	\N	\N	\N
44	26	fetched	2014-06-06 18:32:10.623104	2014-06-06 18:32:10.623104	2014-06-06 18:32:10.623104
45	27	joined	\N	\N	\N
46	27	fetched	2014-03-22 00:07:53.62555	2014-03-22 00:07:53.62555	2014-03-22 00:07:53.62555
47	28	joined	\N	\N	\N
48	28	fetched	2014-08-03 01:17:50.632092	2014-08-03 01:17:50.632092	2014-08-03 01:17:50.632092
49	29	joined	\N	\N	\N
50	29	fetched	2014-07-22 13:41:59.635346	2014-07-22 13:41:59.635346	2014-07-22 13:41:59.635346
51	30	joined	\N	\N	\N
52	30	fetched	2014-08-10 19:47:35.640889	2014-08-10 19:47:35.640889	2014-08-10 19:47:35.640889
53	31	joined	\N	\N	\N
54	31	fetched	2014-03-18 12:03:10.643858	2014-03-18 12:03:10.643858	2014-03-18 12:03:10.643858
55	32	joined	\N	\N	\N
56	32	fetched	2014-06-24 03:34:57.646642	2014-06-24 03:34:57.646642	2014-06-24 03:34:57.646642
57	33	joined	\N	\N	\N
58	33	fetched	2014-11-18 06:23:33.650526	2014-11-18 06:23:33.650526	2014-11-18 06:23:33.650526
59	34	joined	\N	\N	\N
60	34	fetched	2014-10-22 09:49:41.653571	2014-10-22 09:49:41.653571	2014-10-22 09:49:41.653571
61	35	joined	\N	\N	\N
62	35	fetched	2014-04-30 12:55:20.656485	2014-04-30 12:55:20.656485	2014-04-30 12:55:20.656485
63	36	joined	\N	\N	\N
64	36	fetched	2014-08-22 13:23:09.659645	2014-08-22 13:23:09.659645	2014-08-22 13:23:09.659645
65	37	joined	\N	\N	\N
66	37	fetched	2014-03-19 20:46:38.662447	2014-03-19 20:46:38.662447	2014-03-19 20:46:38.662447
67	38	joined	\N	\N	\N
68	38	fetched	2014-06-11 00:24:47.665331	2014-06-11 00:24:47.665331	2014-06-11 00:24:47.665331
69	39	joined	\N	\N	\N
70	40	joined	\N	\N	\N
71	40	fetched	2014-06-25 00:04:04.669892	2014-06-25 00:04:04.669892	2014-06-25 00:04:04.669892
72	41	joined	\N	\N	\N
73	41	fetched	2014-08-05 22:40:26.67261	2014-08-05 22:40:26.67261	2014-08-05 22:40:26.67261
74	42	joined	\N	\N	\N
75	42	fetched	2014-09-23 06:38:02.675473	2014-09-23 06:38:02.675473	2014-09-23 06:38:02.675473
76	43	joined	\N	\N	\N
77	43	fetched	2014-04-08 02:13:37.678307	2014-04-08 02:13:37.678307	2014-04-08 02:13:37.678307
78	44	joined	\N	\N	\N
79	44	fetched	2014-11-23 13:23:45.680926	2014-11-23 13:23:45.680926	2014-11-23 13:23:45.680926
80	45	joined	\N	\N	\N
81	45	fetched	2014-05-13 03:47:13.683534	2014-05-13 03:47:13.683534	2014-05-13 03:47:13.683534
82	46	joined	\N	\N	\N
83	46	fetched	2014-05-12 20:46:53.686202	2014-05-12 20:46:53.686202	2014-05-12 20:46:53.686202
84	47	joined	\N	\N	\N
85	48	joined	\N	\N	\N
86	48	fetched	2014-06-28 03:15:46.691003	2014-06-28 03:15:46.691003	2014-06-28 03:15:46.691003
87	49	joined	\N	\N	\N
88	49	fetched	2014-09-11 15:10:40.693859	2014-09-11 15:10:40.693859	2014-09-11 15:10:40.693859
89	9	submitted	2014-11-20 12:24:35	2014-11-20 12:24:35	2014-11-20 12:24:35
90	9	received_feedback	2014-11-24 03:19:22	2014-11-24 03:19:22	2014-11-24 03:19:22
91	15	commented	2014-11-24 03:19:22	2014-11-24 03:19:22	2014-11-24 03:19:22
92	44	commented	2014-11-27 08:19:15	2014-11-27 08:19:15	2014-11-27 08:19:15
93	9	completed	2014-11-28 04:38:23	2014-11-28 04:38:23	2014-11-28 04:38:23
94	11	commented	2014-11-17 19:04:38	2014-11-17 19:04:38	2014-11-17 19:04:38
95	46	commented	2014-11-22 13:35:10	2014-11-22 13:35:10	2014-11-22 13:35:10
96	28	commented	2014-11-26 07:45:54	2014-11-26 07:45:54	2014-11-26 07:45:54
97	48	commented	2014-11-27 04:02:26	2014-11-27 04:02:26	2014-11-27 04:02:26
98	3	commented	2014-11-27 11:37:25	2014-11-27 11:37:25	2014-11-27 11:37:25
99	4	commented	2014-11-25 06:27:31	2014-11-25 06:27:31	2014-11-25 06:27:31
100	31	commented	2014-11-28 05:46:21	2014-11-28 05:46:21	2014-11-28 05:46:21
101	12	commented	2014-11-19 08:17:17	2014-11-19 08:17:17	2014-11-19 08:17:17
102	29	commented	2014-11-24 08:22:24	2014-11-24 08:22:24	2014-11-24 08:22:24
103	33	commented	2014-11-16 12:39:02	2014-11-16 12:39:02	2014-11-16 12:39:02
104	40	commented	2014-11-17 11:36:12	2014-11-17 11:36:12	2014-11-17 11:36:12
105	5	commented	2014-11-25 11:43:08	2014-11-25 11:43:08	2014-11-25 11:43:08
106	22	commented	2014-11-28 11:20:06	2014-11-28 11:20:06	2014-11-28 11:20:06
107	38	commented	2014-11-28 14:07:21	2014-11-28 14:07:21	2014-11-28 14:07:21
108	11	submitted	2014-06-01 23:24:51	2014-06-01 23:24:51	2014-06-01 23:24:51
109	11	received_feedback	2014-07-10 22:36:01	2014-07-10 22:36:01	2014-07-10 22:36:01
110	9	commented	2014-07-10 22:36:01	2014-07-10 22:36:01	2014-07-10 22:36:01
111	11	completed	2014-05-16 20:15:18	2014-05-16 20:15:18	2014-05-16 20:15:18
112	12	submitted	2014-07-20 02:14:43	2014-07-20 02:14:43	2014-07-20 02:14:43
113	12	received_feedback	2014-09-04 00:52:39	2014-09-04 00:52:39	2014-09-04 00:52:39
114	48	onboarded	2014-11-17 19:35:47	2014-11-17 19:35:47	2014-11-17 19:35:47
115	46	onboarded	2014-11-22 13:35:10	2014-11-22 13:35:10	2014-11-22 13:35:10
116	31	onboarded	2014-11-24 12:06:19	2014-11-24 12:06:19	2014-11-24 12:06:19
117	44	onboarded	2014-11-26 06:54:57	2014-11-26 06:54:57	2014-11-26 06:54:57
118	12	completed	2014-07-23 00:44:40	2014-07-23 00:44:40	2014-07-23 00:44:40
119	15	onboarded	2014-11-15 23:36:38	2014-11-15 23:36:38	2014-11-15 23:36:38
120	29	onboarded	2014-11-24 08:22:24	2014-11-24 08:22:24	2014-11-24 08:22:24
121	40	onboarded	2014-11-17 11:36:12	2014-11-17 11:36:12	2014-11-17 11:36:12
122	38	onboarded	2014-11-28 14:07:21	2014-11-28 14:07:21	2014-11-28 14:07:21
123	22	onboarded	2014-11-28 11:20:06	2014-11-28 11:20:06	2014-11-28 11:20:06
124	15	submitted	2014-10-26 07:11:01	2014-10-26 07:11:01	2014-10-26 07:11:01
125	15	completed	2014-10-29 06:48:40	2014-10-29 06:48:40	2014-10-29 06:48:40
126	22	submitted	2014-09-14 17:18:28	2014-09-14 17:18:28	2014-09-14 17:18:28
127	22	completed	2014-09-16 00:03:38	2014-09-16 00:03:38	2014-09-16 00:03:38
128	22	received_feedback	2014-07-14 18:50:08	2014-07-14 18:50:08	2014-07-14 18:50:08
129	4	onboarded	2014-11-25 06:27:31	2014-11-25 06:27:31	2014-11-25 06:27:31
130	28	onboarded	2014-11-21 11:01:48	2014-11-21 11:01:48	2014-11-21 11:01:48
131	12	onboarded	2014-11-19 08:17:17	2014-11-19 08:17:17	2014-11-19 08:17:17
132	9	onboarded	2014-10-05 15:33:15	2014-10-05 15:33:15	2014-10-05 15:33:15
133	33	onboarded	2014-11-16 12:39:02	2014-11-16 12:39:02	2014-11-16 12:39:02
134	5	onboarded	2014-11-25 11:43:08	2014-11-25 11:43:08	2014-11-25 11:43:08
135	2	commented	2014-11-05 20:07:04	2014-11-05 20:07:04	2014-11-05 20:07:04
136	11	onboarded	2014-11-17 19:04:38	2014-11-17 19:04:38	2014-11-17 19:04:38
137	28	submitted	2014-09-03 07:44:45	2014-09-03 07:44:45	2014-09-03 07:44:45
138	28	received_feedback	2014-11-25 07:16:35	2014-11-25 07:16:35	2014-11-25 07:16:35
139	28	completed	2014-11-22 19:30:03	2014-11-22 19:30:03	2014-11-22 19:30:03
140	3	onboarded	2014-11-13 12:56:41	2014-11-13 12:56:41	2014-11-13 12:56:41
141	29	submitted	2014-09-01 12:23:18	2014-09-01 12:23:18	2014-09-01 12:23:18
142	29	received_feedback	2014-10-02 07:47:04	2014-10-02 07:47:04	2014-10-02 07:47:04
143	2	onboarded	2014-11-20 08:21:59	2014-11-20 08:21:59	2014-11-20 08:21:59
144	29	completed	2014-09-11 03:35:17	2014-09-11 03:35:17	2014-09-11 03:35:17
145	31	submitted	2014-06-07 04:06:55	2014-06-07 04:06:55	2014-06-07 04:06:55
146	33	submitted	2014-11-19 16:38:27	2014-11-19 16:38:27	2014-11-19 16:38:27
147	33	received_feedback	2014-11-23 01:12:47	2014-11-23 01:12:47	2014-11-23 01:12:47
148	33	completed	2014-11-29 15:27:01.197576	2014-11-29 15:27:01.197576	2014-11-29 15:27:01.197576
149	38	submitted	2014-07-04 18:15:15	2014-07-04 18:15:15	2014-07-04 18:15:15
150	38	received_feedback	2014-09-21 20:56:26	2014-09-21 20:56:26	2014-09-21 20:56:26
151	40	submitted	2014-07-27 02:58:17	2014-07-27 02:58:17	2014-07-27 02:58:17
152	40	received_feedback	2014-08-26 04:05:12	2014-08-26 04:05:12	2014-08-26 04:05:12
153	40	completed	2014-11-20 15:36:32	2014-11-20 15:36:32	2014-11-20 15:36:32
154	44	submitted	2014-11-24 06:08:07	2014-11-24 06:08:07	2014-11-24 06:08:07
155	44	received_feedback	2014-11-26 15:04:36	2014-11-26 15:04:36	2014-11-26 15:04:36
156	44	completed	2014-11-29 15:27:01.463986	2014-11-29 15:27:01.463986	2014-11-29 15:27:01.463986
157	46	submitted	2014-10-13 23:09:09	2014-10-13 23:09:09	2014-10-13 23:09:09
158	46	completed	2014-10-22 11:29:22	2014-10-22 11:29:22	2014-10-22 11:29:22
159	46	received_feedback	2014-09-12 23:26:49	2014-09-12 23:26:49	2014-09-12 23:26:49
160	48	submitted	2014-08-06 05:08:15	2014-08-06 05:08:15	2014-08-06 05:08:15
161	48	received_feedback	2014-08-07 19:42:51	2014-08-07 19:42:51	2014-08-07 19:42:51
162	48	completed	2014-10-06 08:42:44	2014-10-06 08:42:44	2014-10-06 08:42:44
163	49	submitted	2014-09-22 04:31:20	2014-09-22 04:31:20	2014-09-22 04:31:20
164	49	received_feedback	2014-09-27 11:33:32	2014-09-27 11:33:32	2014-09-27 11:33:32
165	26	submitted	2014-08-03 08:32:13	2014-08-03 08:32:13	2014-08-03 08:32:13
166	26	received_feedback	2014-10-13 04:28:46	2014-10-13 04:28:46	2014-10-13 04:28:46
167	7	submitted	2014-09-30 12:07:00	2014-09-30 12:07:00	2014-09-30 12:07:00
168	7	received_feedback	2014-10-06 06:41:06	2014-10-06 06:41:06	2014-10-06 06:41:06
169	23	submitted	2014-10-24 08:46:42	2014-10-24 08:46:42	2014-10-24 08:46:42
170	23	received_feedback	2014-10-25 13:32:10	2014-10-25 13:32:10	2014-10-25 13:32:10
171	17	submitted	2014-09-23 21:24:43	2014-09-23 21:24:43	2014-09-23 21:24:43
172	17	received_feedback	2014-10-04 16:35:50	2014-10-04 16:35:50	2014-10-04 16:35:50
173	20	submitted	2014-11-22 10:22:55	2014-11-22 10:22:55	2014-11-22 10:22:55
174	20	completed	2014-11-25 16:24:56	2014-11-25 16:24:56	2014-11-25 16:24:56
175	20	received_feedback	2014-11-16 04:29:55	2014-11-16 04:29:55	2014-11-16 04:29:55
176	21	submitted	2014-05-12 07:27:42	2014-05-12 07:27:42	2014-05-12 07:27:42
177	21	received_feedback	2014-09-03 16:56:31	2014-09-03 16:56:31	2014-09-03 16:56:31
178	21	completed	2014-05-15 12:37:33	2014-05-15 12:37:33	2014-05-15 12:37:33
179	36	submitted	2014-09-12 13:50:12	2014-09-12 13:50:12	2014-09-12 13:50:12
180	36	received_feedback	2014-09-13 21:10:27	2014-09-13 21:10:27	2014-09-13 21:10:27
181	36	completed	2014-09-30 07:17:10	2014-09-30 07:17:10	2014-09-30 07:17:10
182	30	submitted	2014-08-23 13:50:36	2014-08-23 13:50:36	2014-08-23 13:50:36
183	30	received_feedback	2014-10-15 17:58:31	2014-10-15 17:58:31	2014-10-15 17:58:31
184	30	completed	2014-09-22 09:08:53	2014-09-22 09:08:53	2014-09-22 09:08:53
185	35	submitted	2014-09-16 11:15:26	2014-09-16 11:15:26	2014-09-16 11:15:26
186	35	received_feedback	2014-09-27 21:01:56	2014-09-27 21:01:56	2014-09-27 21:01:56
187	35	completed	2014-09-24 15:25:56	2014-09-24 15:25:56	2014-09-24 15:25:56
188	14	submitted	2014-09-13 16:58:03	2014-09-13 16:58:03	2014-09-13 16:58:03
189	14	received_feedback	2014-10-11 23:53:15	2014-10-11 23:53:15	2014-10-11 23:53:15
190	41	submitted	2014-09-08 10:24:40	2014-09-08 10:24:40	2014-09-08 10:24:40
191	41	received_feedback	2014-09-08 12:17:06	2014-09-08 12:17:06	2014-09-08 12:17:06
192	6	submitted	2014-11-20 12:51:18	2014-11-20 12:51:18	2014-11-20 12:51:18
193	6	received_feedback	2014-11-24 20:12:04	2014-11-24 20:12:04	2014-11-24 20:12:04
194	34	submitted	2014-11-04 10:00:46	2014-11-04 10:00:46	2014-11-04 10:00:46
195	34	received_feedback	2014-11-08 07:18:37	2014-11-08 07:18:37	2014-11-08 07:18:37
196	16	submitted	2014-07-16 11:50:23	2014-07-16 11:50:23	2014-07-16 11:50:23
197	16	received_feedback	2014-07-29 21:34:03	2014-07-29 21:34:03	2014-07-29 21:34:03
198	18	submitted	2014-05-31 10:28:42	2014-05-31 10:28:42	2014-05-31 10:28:42
199	24	submitted	2014-09-25 07:40:52	2014-09-25 07:40:52	2014-09-25 07:40:52
200	42	submitted	2014-09-28 16:48:54	2014-09-28 16:48:54	2014-09-28 16:48:54
201	27	submitted	2014-06-29 14:02:41	2014-06-29 14:02:41	2014-06-29 14:02:41
202	45	submitted	2014-06-24 17:01:34	2014-06-24 17:01:34	2014-06-24 17:01:34
203	49	commented	2014-11-08 03:32:51	2014-11-08 03:32:51	2014-11-08 03:32:51
204	26	commented	2014-11-29 07:17:28	2014-11-29 07:17:28	2014-11-29 07:17:28
205	7	commented	2014-10-08 16:15:02	2014-10-08 16:15:02	2014-10-08 16:15:02
206	23	commented	2014-10-03 19:15:56	2014-10-03 19:15:56	2014-10-03 19:15:56
207	17	commented	2014-11-14 11:14:41	2014-11-14 11:14:41	2014-11-14 11:14:41
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 207, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	36	1	code	f	1	2014-11-20 12:24:35	2014-11-20 12:24:35	Submission	9
2	3	4	code	f	1	2014-11-23 06:13:33	2014-11-23 06:13:33	Submission	9
3	3	6	code	f	1	2014-11-13 09:07:05	2014-11-13 09:07:05	Submission	9
4	3	8	code	f	1	2014-06-01 23:24:51	2014-06-01 23:24:51	Submission	11
5	3	9	code	f	1	2014-04-11 19:31:40	2014-04-11 19:31:40	Submission	11
6	2	10	code	f	1	2014-05-12 08:52:11	2014-05-12 08:52:11	Submission	11
7	3	10	code	f	1	2014-05-12 08:52:11	2014-05-12 08:52:11	Submission	11
8	2	12	code	f	1	2014-08-03 02:05:37	2014-08-03 02:05:37	Submission	11
9	4	14	code	f	1	2014-05-06 05:34:59	2014-05-06 05:34:59	Submission	11
10	3	15	code	f	1	2014-05-26 23:54:49	2014-05-26 23:54:49	Submission	11
11	3	16	code	f	1	2014-06-26 08:37:47	2014-06-26 08:37:47	Submission	11
12	3	18	code	f	1	2014-05-31 11:42:26	2014-05-31 11:42:26	Submission	11
13	3	34	code	f	1	2014-08-10 07:55:10	2014-08-10 07:55:10	Submission	22
14	3	36	code	f	1	2014-08-23 06:38:31	2014-08-23 06:38:31	Submission	22
15	3	81	code	f	1	2014-09-09 08:37:54	2014-09-09 08:37:54	Submission	28
16	4	19	code	f	1	2014-04-14 07:13:31	2014-04-14 07:13:31	Submission	11
17	2	21	code	f	1	2014-10-02 06:40:24	2014-10-02 06:40:24	Submission	12
18	2	23	code	f	1	2014-07-16 05:31:57	2014-07-16 05:31:57	Submission	12
19	4	24	code	f	1	2014-10-26 07:11:01	2014-10-26 07:11:01	Submission	15
20	2	25	code	f	1	2014-09-14 17:18:28	2014-09-14 17:18:28	Submission	22
21	3	26	code	f	1	2014-06-19 14:12:41	2014-06-19 14:12:41	Submission	22
22	2	29	code	f	1	2014-07-13 00:32:17	2014-07-13 00:32:17	Submission	22
23	2	30	code	f	1	2014-06-21 07:56:39	2014-06-21 07:56:39	Submission	22
24	4	38	code	f	1	2014-09-28 22:07:03	2014-09-28 22:07:03	Submission	22
25	3	39	code	f	1	2014-09-04 08:28:06	2014-09-04 08:28:06	Submission	22
26	2	42	code	f	1	2014-09-17 03:47:42	2014-09-17 03:47:42	Submission	22
27	2	43	code	f	1	2014-06-27 10:52:21	2014-06-27 10:52:21	Submission	22
28	3	44	code	f	1	2014-07-08 03:53:09	2014-07-08 03:53:09	Submission	22
29	4	47	code	f	1	2014-06-17 17:44:22	2014-06-17 17:44:22	Submission	22
30	4	49	code	f	1	2014-10-23 17:46:34	2014-10-23 17:46:34	Submission	22
31	4	50	code	f	1	2014-06-27 22:57:10	2014-06-27 22:57:10	Submission	22
32	2	51	code	f	1	2014-09-02 07:35:27	2014-09-02 07:35:27	Submission	22
33	2	53	code	f	1	2014-10-19 19:42:02	2014-10-19 19:42:02	Submission	22
34	2	54	code	f	1	2014-07-04 19:23:57	2014-07-04 19:23:57	Submission	22
35	2	59	code	f	1	2014-10-09 05:15:42	2014-10-09 05:15:42	Submission	22
36	4	60	code	f	1	2014-10-16 20:32:11	2014-10-16 20:32:11	Submission	22
37	2	61	code	f	1	2014-08-01 13:37:54	2014-08-01 13:37:54	Submission	22
38	4	61	code	f	1	2014-08-01 13:37:54	2014-08-01 13:37:54	Submission	22
39	2	62	code	f	1	2014-08-21 07:31:12	2014-08-21 07:31:12	Submission	22
40	3	63	code	f	1	2014-06-26 18:50:36	2014-06-26 18:50:36	Submission	22
41	2	64	code	f	1	2014-08-25 08:44:33	2014-08-25 08:44:33	Submission	22
42	4	66	code	f	1	2014-10-08 21:24:05	2014-10-08 21:24:05	Submission	22
43	4	68	code	f	1	2014-07-24 14:36:57	2014-07-24 14:36:57	Submission	22
44	4	69	code	f	1	2014-07-12 16:09:51	2014-07-12 16:09:51	Submission	22
45	3	71	code	f	1	2014-07-27 09:32:47	2014-07-27 09:32:47	Submission	22
46	4	71	code	f	1	2014-07-27 09:32:47	2014-07-27 09:32:47	Submission	22
47	2	75	code	f	1	2014-09-19 11:00:17	2014-09-19 11:00:17	Submission	22
48	22	78	code	f	1	2014-11-13 17:18:18	2014-11-13 17:18:18	Submission	28
49	2	207	code	f	1	2014-09-03 19:04:40	2014-09-03 19:04:40	Submission	23
50	3	83	code	f	1	2014-09-30 21:20:17	2014-09-30 21:20:17	Submission	28
51	2	90	code	f	1	2014-09-01 12:23:18	2014-09-01 12:23:18	Submission	29
52	4	93	code	f	1	2014-11-21 11:45:01	2014-11-21 11:45:01	Submission	33
53	4	95	code	f	1	2014-11-27 14:05:14	2014-11-27 14:05:14	Submission	33
54	36	97	code	f	1	2014-11-20 20:53:15	2014-11-20 20:53:15	Submission	33
55	46	98	code	f	1	2014-11-23 12:41:18	2014-11-23 12:41:18	Submission	33
56	36	98	code	f	1	2014-11-23 12:41:18	2014-11-23 12:41:18	Submission	33
57	36	100	code	f	1	2014-11-26 05:41:50	2014-11-26 05:41:50	Submission	33
58	4	100	code	f	1	2014-11-26 05:41:50	2014-11-26 05:41:50	Submission	33
59	28	101	code	f	1	2014-11-19 05:00:40	2014-11-19 05:00:40	Submission	33
60	36	101	code	f	1	2014-11-19 05:00:40	2014-11-19 05:00:40	Submission	33
61	28	102	code	f	1	2014-11-27 11:35:56	2014-11-27 11:35:56	Submission	33
62	44	102	code	f	1	2014-11-27 11:35:56	2014-11-27 11:35:56	Submission	33
63	36	102	code	f	1	2014-11-27 11:35:56	2014-11-27 11:35:56	Submission	33
64	28	103	code	t	1	2014-11-28 05:59:27	2014-11-28 05:59:27	Submission	33
65	44	103	code	t	1	2014-11-28 05:59:27	2014-11-28 05:59:27	Submission	33
66	36	103	code	f	1	2014-11-28 05:59:27	2014-11-28 05:59:27	Submission	33
67	4	103	code	f	1	2014-11-28 05:59:27	2014-11-28 05:59:27	Submission	33
68	36	108	code	f	1	2014-09-30 12:14:45	2014-09-30 12:14:45	Submission	40
69	11	110	code	f	1	2014-11-24 06:08:07	2014-11-24 06:08:07	Submission	44
70	28	111	code	f	1	2014-11-25 16:53:36	2014-11-25 16:53:36	Submission	44
71	36	111	code	f	1	2014-11-25 16:53:36	2014-11-25 16:53:36	Submission	44
72	3	112	code	f	1	2014-11-26 00:48:02	2014-11-26 00:48:02	Submission	44
73	22	114	code	f	1	2014-11-26 03:00:18	2014-11-26 03:00:18	Submission	44
74	36	115	code	f	1	2014-11-24 13:20:49	2014-11-24 13:20:49	Submission	44
75	36	116	code	f	1	2014-11-25 08:46:44	2014-11-25 08:46:44	Submission	44
76	33	117	code	f	1	2014-11-26 20:32:55	2014-11-26 20:32:55	Submission	44
77	20	118	code	f	1	2014-11-28 01:54:00	2014-11-28 01:54:00	Submission	44
78	3	118	code	t	1	2014-11-28 01:54:00	2014-11-28 01:54:00	Submission	44
79	36	121	code	f	1	2014-11-24 01:47:26	2014-11-24 01:47:26	Submission	44
80	3	121	code	f	1	2014-11-24 01:47:26	2014-11-24 01:47:26	Submission	44
81	3	122	code	f	1	2014-11-25 22:31:45	2014-11-25 22:31:45	Submission	44
82	3	123	code	f	1	2014-11-25 23:45:49	2014-11-25 23:45:49	Submission	44
83	3	125	code	f	1	2014-11-26 20:27:57	2014-11-26 20:27:57	Submission	44
84	3	126	code	f	1	2014-11-27 15:20:17	2014-11-27 15:20:17	Submission	44
85	3	135	code	f	1	2014-11-27 11:31:00	2014-11-27 11:31:00	Submission	44
86	12	231	code	f	1	2014-11-22 10:22:55	2014-11-22 10:22:55	Submission	20
87	36	231	code	f	1	2014-11-22 10:22:55	2014-11-22 10:22:55	Submission	20
88	3	127	code	f	1	2014-11-28 03:48:48	2014-11-28 03:48:48	Submission	44
89	3	128	code	t	1	2014-11-28 04:46:36	2014-11-28 04:46:36	Submission	44
90	3	129	code	f	1	2014-11-28 08:26:04	2014-11-28 08:26:04	Submission	44
91	3	131	code	f	1	2014-11-24 19:17:37	2014-11-24 19:17:37	Submission	44
92	3	132	code	t	1	2014-11-28 02:42:03	2014-11-28 02:42:03	Submission	44
93	30	133	code	f	1	2014-11-24 11:27:29	2014-11-24 11:27:29	Submission	44
94	3	134	code	f	1	2014-11-25 22:52:23	2014-11-25 22:52:23	Submission	44
95	36	137	code	f	1	2014-11-27 18:02:12	2014-11-27 18:02:12	Submission	44
96	3	137	code	f	1	2014-11-27 18:02:12	2014-11-27 18:02:12	Submission	44
97	36	138	code	t	1	2014-11-28 21:10:49	2014-11-28 21:10:49	Submission	44
98	3	138	code	t	1	2014-11-28 21:10:49	2014-11-28 21:10:49	Submission	44
99	3	139	code	f	1	2014-10-13 23:09:09	2014-10-13 23:09:09	Submission	46
100	3	143	code	f	1	2014-09-04 07:05:30	2014-09-04 07:05:30	Submission	46
101	3	150	code	f	1	2014-07-25 13:32:15	2014-07-25 13:32:15	Submission	48
102	3	151	code	f	1	2014-08-01 01:14:40	2014-08-01 01:14:40	Submission	48
103	3	152	code	f	1	2014-08-05 05:49:57	2014-08-05 05:49:57	Submission	48
104	22	163	code	f	1	2014-10-10 08:29:51	2014-10-10 08:29:51	Submission	49
105	3	163	code	f	1	2014-10-10 08:29:51	2014-10-10 08:29:51	Submission	49
106	3	165	code	f	1	2014-09-16 04:02:53	2014-09-16 04:02:53	Submission	49
107	36	167	code	f	1	2014-10-23 12:44:52	2014-10-23 12:44:52	Submission	49
108	3	167	code	f	1	2014-10-23 12:44:52	2014-10-23 12:44:52	Submission	49
109	3	168	code	f	1	2014-11-13 02:36:48	2014-11-13 02:36:48	Submission	49
110	3	171	code	f	1	2014-08-22 01:59:02	2014-08-22 01:59:02	Submission	26
111	2	172	code	f	1	2014-09-26 02:06:57	2014-09-26 02:06:57	Submission	26
112	2	174	code	t	1	2014-11-28 05:32:53	2014-11-28 05:32:53	Submission	26
113	3	174	code	t	1	2014-11-28 05:32:53	2014-11-28 05:32:53	Submission	26
114	2	175	code	f	1	2014-08-20 06:26:24	2014-08-20 06:26:24	Submission	26
115	2	179	code	f	1	2014-07-07 15:40:37	2014-07-07 15:40:37	Submission	26
116	3	179	code	f	1	2014-07-07 15:40:37	2014-07-07 15:40:37	Submission	26
117	2	180	code	f	1	2014-10-03 08:21:20	2014-10-03 08:21:20	Submission	26
118	3	180	code	f	1	2014-10-03 08:21:20	2014-10-03 08:21:20	Submission	26
119	2	181	code	f	1	2014-07-08 11:55:29	2014-07-08 11:55:29	Submission	26
120	4	186	code	f	1	2014-09-30 12:07:00	2014-09-30 12:07:00	Submission	7
121	4	187	code	f	1	2014-10-11 16:42:39	2014-10-11 16:42:39	Submission	7
122	3	188	code	f	1	2014-11-05 22:39:07	2014-11-05 22:39:07	Submission	7
123	3	205	code	f	1	2014-09-20 08:00:06	2014-09-20 08:00:06	Submission	23
124	2	189	code	t	1	2014-11-28 16:56:45	2014-11-28 16:56:45	Submission	7
125	3	189	code	t	1	2014-11-28 16:56:45	2014-11-28 16:56:45	Submission	7
126	4	189	code	f	1	2014-11-28 16:56:45	2014-11-28 16:56:45	Submission	7
127	4	190	code	f	1	2014-10-24 08:46:42	2014-10-24 08:46:42	Submission	23
128	2	191	code	f	1	2014-04-26 13:46:18	2014-04-26 13:46:18	Submission	23
129	2	192	code	f	1	2014-04-04 06:55:44	2014-04-04 06:55:44	Submission	23
130	4	192	code	f	1	2014-04-04 06:55:44	2014-04-04 06:55:44	Submission	23
131	4	197	code	f	1	2014-04-21 07:09:47	2014-04-21 07:09:47	Submission	23
132	2	198	code	f	1	2014-03-27 10:00:26	2014-03-27 10:00:26	Submission	23
133	3	199	code	f	1	2014-05-24 01:40:22	2014-05-24 01:40:22	Submission	23
134	4	199	code	f	1	2014-05-24 01:40:22	2014-05-24 01:40:22	Submission	23
135	4	200	code	f	1	2014-07-11 01:29:00	2014-07-11 01:29:00	Submission	23
136	2	203	code	f	1	2014-08-02 22:43:51	2014-08-02 22:43:51	Submission	23
137	3	204	code	f	1	2014-09-04 10:52:09	2014-09-04 10:52:09	Submission	23
138	3	206	code	f	1	2014-07-06 01:13:01	2014-07-06 01:13:01	Submission	23
139	4	206	code	f	1	2014-07-06 01:13:01	2014-07-06 01:13:01	Submission	23
140	3	210	code	f	1	2014-06-04 14:51:52	2014-06-04 14:51:52	Submission	23
141	4	214	code	f	1	2014-05-02 06:29:12	2014-05-02 06:29:12	Submission	23
142	2	216	code	f	1	2014-04-12 10:42:09	2014-04-12 10:42:09	Submission	23
143	4	216	code	f	1	2014-04-12 10:42:09	2014-04-12 10:42:09	Submission	23
144	2	217	code	f	1	2014-04-30 20:13:27	2014-04-30 20:13:27	Submission	23
145	3	218	code	f	1	2014-09-23 21:24:43	2014-09-23 21:24:43	Submission	17
146	4	220	code	f	1	2014-10-15 00:00:54	2014-10-15 00:00:54	Submission	17
147	2	222	code	f	1	2014-10-22 06:30:55	2014-10-22 06:30:55	Submission	17
148	36	223	code	f	1	2014-11-09 14:25:50	2014-11-09 14:25:50	Submission	17
149	2	223	code	f	1	2014-11-09 14:25:50	2014-11-09 14:25:50	Submission	17
150	3	223	code	f	1	2014-11-09 14:25:50	2014-11-09 14:25:50	Submission	17
151	3	225	code	f	1	2014-09-18 00:52:26	2014-09-18 00:52:26	Submission	17
152	2	226	code	f	1	2014-10-06 04:38:18	2014-10-06 04:38:18	Submission	17
153	4	226	code	f	1	2014-10-06 04:38:18	2014-10-06 04:38:18	Submission	17
154	2	227	code	f	1	2014-10-06 16:33:56	2014-10-06 16:33:56	Submission	17
155	28	229	code	f	1	2014-10-24 15:14:40	2014-10-24 15:14:40	Submission	17
156	28	230	code	f	1	2014-11-05 10:22:44	2014-11-05 10:22:44	Submission	17
157	4	230	code	f	1	2014-11-05 10:22:44	2014-11-05 10:22:44	Submission	17
158	2	233	code	f	1	2014-11-18 10:16:13	2014-11-18 10:16:13	Submission	20
159	3	237	code	f	1	2014-11-15 15:46:18	2014-11-15 15:46:18	Submission	20
160	3	243	code	f	1	2014-11-03 19:58:08	2014-11-03 19:58:08	Submission	36
161	2	244	code	f	1	2014-08-27 02:17:23	2014-08-27 02:17:23	Submission	36
162	4	244	code	f	1	2014-08-27 02:17:23	2014-08-27 02:17:23	Submission	36
163	3	245	code	f	1	2014-09-21 11:46:40	2014-09-21 11:46:40	Submission	36
164	28	246	code	f	1	2014-09-07 05:22:38	2014-09-07 05:22:38	Submission	36
165	2	246	code	f	1	2014-09-07 05:22:38	2014-09-07 05:22:38	Submission	36
166	3	246	code	f	1	2014-09-07 05:22:38	2014-09-07 05:22:38	Submission	36
167	2	247	code	f	1	2014-10-02 12:39:31	2014-10-02 12:39:31	Submission	36
168	3	247	code	f	1	2014-10-02 12:39:31	2014-10-02 12:39:31	Submission	36
169	2	249	code	f	1	2014-09-26 09:43:18	2014-09-26 09:43:18	Submission	36
170	4	252	code	f	1	2014-08-26 23:58:22	2014-08-26 23:58:22	Submission	36
171	21	256	code	f	1	2014-10-21 17:02:04	2014-10-21 17:02:04	Submission	36
172	4	257	code	f	1	2014-08-26 02:18:00	2014-08-26 02:18:00	Submission	36
173	2	258	code	f	1	2014-10-02 11:56:46	2014-10-02 11:56:46	Submission	36
174	2	259	code	f	1	2014-10-06 13:34:48	2014-10-06 13:34:48	Submission	36
175	3	261	code	f	1	2014-11-02 05:50:48	2014-11-02 05:50:48	Submission	36
176	4	261	code	f	1	2014-11-02 05:50:48	2014-11-02 05:50:48	Submission	36
177	3	262	code	f	1	2014-09-13 14:05:36	2014-09-13 14:05:36	Submission	36
178	3	263	code	f	1	2014-09-19 21:19:07	2014-09-19 21:19:07	Submission	36
179	3	264	code	f	1	2014-09-10 07:40:32	2014-09-10 07:40:32	Submission	36
180	4	265	code	f	1	2014-10-24 04:02:37	2014-10-24 04:02:37	Submission	36
181	4	267	code	f	1	2014-09-13 17:24:03	2014-09-13 17:24:03	Submission	36
182	4	268	code	f	1	2014-09-14 20:04:12	2014-09-14 20:04:12	Submission	36
183	2	269	code	f	1	2014-09-18 15:57:38	2014-09-18 15:57:38	Submission	36
184	3	269	code	f	1	2014-09-18 15:57:38	2014-09-18 15:57:38	Submission	36
185	2	314	code	f	1	2014-09-15 18:47:54	2014-09-15 18:47:54	Submission	14
186	2	274	code	f	1	2014-09-03 13:48:46	2014-09-03 13:48:46	Submission	36
187	4	276	code	f	1	2014-09-22 14:09:00	2014-09-22 14:09:00	Submission	36
188	3	279	code	f	1	2014-09-17 21:08:03	2014-09-17 21:08:03	Submission	36
189	3	281	code	f	1	2014-10-05 15:10:32	2014-10-05 15:10:32	Submission	36
190	2	282	code	f	1	2014-10-15 00:39:52	2014-10-15 00:39:52	Submission	36
191	4	283	code	f	1	2014-10-15 22:41:32	2014-10-15 22:41:32	Submission	36
192	4	284	code	f	1	2014-10-17 17:46:54	2014-10-17 17:46:54	Submission	36
193	4	329	code	f	1	2014-08-20 09:16:20	2014-08-20 09:16:20	Submission	41
194	4	330	code	f	1	2014-09-15 01:54:07	2014-09-15 01:54:07	Submission	41
195	2	292	code	f	1	2014-10-01 18:31:53	2014-10-01 18:31:53	Submission	36
196	2	293	code	f	1	2014-08-29 18:16:49	2014-08-29 18:16:49	Submission	36
197	4	333	code	f	1	2014-09-01 03:34:22	2014-09-01 03:34:22	Submission	41
198	4	334	code	f	1	2014-09-11 08:05:24	2014-09-11 08:05:24	Submission	41
199	4	335	code	f	1	2014-08-18 03:03:02	2014-08-18 03:03:02	Submission	41
200	22	336	code	f	1	2014-08-17 17:58:57	2014-08-17 17:58:57	Submission	41
201	4	338	code	f	1	2014-10-04 23:11:10	2014-10-04 23:11:10	Submission	41
202	4	296	code	f	1	2014-09-07 11:08:50	2014-09-07 11:08:50	Submission	30
203	2	297	code	f	1	2014-09-20 02:51:04	2014-09-20 02:51:04	Submission	30
204	3	299	code	f	1	2014-09-02 07:02:50	2014-09-02 07:02:50	Submission	30
205	4	300	code	f	1	2014-09-06 01:02:34	2014-09-06 01:02:34	Submission	30
206	3	304	code	f	1	2014-08-13 13:34:32	2014-08-13 13:34:32	Submission	30
207	4	304	code	f	1	2014-08-13 13:34:32	2014-08-13 13:34:32	Submission	30
208	4	305	code	f	1	2014-08-29 19:36:51	2014-08-29 19:36:51	Submission	30
209	2	310	code	f	1	2014-09-13 16:58:03	2014-09-13 16:58:03	Submission	14
210	3	310	code	f	1	2014-09-13 16:58:03	2014-09-13 16:58:03	Submission	14
211	2	313	code	f	1	2014-11-20 23:41:56	2014-11-20 23:41:56	Submission	14
212	36	319	code	f	1	2014-10-04 19:44:20	2014-10-04 19:44:20	Submission	14
213	22	319	code	f	1	2014-10-04 19:44:20	2014-10-04 19:44:20	Submission	14
214	4	321	code	f	1	2014-09-02 11:38:49	2014-09-02 11:38:49	Submission	41
215	4	343	code	f	1	2014-11-08 19:43:34	2014-11-08 19:43:34	Submission	41
216	4	344	code	f	1	2014-11-16 10:03:31	2014-11-16 10:03:31	Submission	41
217	4	349	code	f	1	2014-09-05 13:44:28	2014-09-05 13:44:28	Submission	41
218	4	350	code	f	1	2014-09-05 08:11:59	2014-09-05 08:11:59	Submission	41
219	36	351	code	f	1	2014-09-26 13:12:17	2014-09-26 13:12:17	Submission	41
220	2	382	code	f	1	2014-08-02 05:13:33	2014-08-02 05:13:33	Submission	18
221	3	364	code	f	1	2014-11-13 06:41:31	2014-11-13 06:41:31	Submission	6
222	2	383	code	f	1	2014-08-13 17:43:21	2014-08-13 17:43:21	Submission	18
223	3	383	code	f	1	2014-08-13 17:43:21	2014-08-13 17:43:21	Submission	18
224	4	367	code	f	1	2014-11-04 10:00:46	2014-11-04 10:00:46	Submission	34
225	36	368	code	f	1	2014-10-26 04:33:26	2014-10-26 04:33:26	Submission	34
226	36	369	code	f	1	2014-11-16 03:06:00	2014-11-16 03:06:00	Submission	34
227	4	370	code	f	1	2014-07-16 11:50:23	2014-07-16 11:50:23	Submission	16
228	4	371	code	f	1	2014-07-13 05:20:42	2014-07-13 05:20:42	Submission	16
229	4	373	code	f	1	2014-09-08 17:05:13	2014-09-08 17:05:13	Submission	16
230	3	375	code	f	1	2014-08-27 04:52:34	2014-08-27 04:52:34	Submission	16
231	3	379	code	f	1	2014-10-11 21:20:28	2014-10-11 21:20:28	Submission	16
232	3	386	code	f	1	2014-09-08 20:49:16	2014-09-08 20:49:16	Submission	18
233	4	386	code	f	1	2014-09-08 20:49:16	2014-09-08 20:49:16	Submission	18
234	4	388	code	f	1	2014-05-27 01:48:28	2014-05-27 01:48:28	Submission	18
235	2	389	code	f	1	2014-10-17 15:30:13	2014-10-17 15:30:13	Submission	18
236	3	389	code	f	1	2014-10-17 15:30:13	2014-10-17 15:30:13	Submission	18
237	12	393	code	f	1	2014-09-28 16:48:54	2014-09-28 16:48:54	Submission	42
238	3	393	code	f	1	2014-09-28 16:48:54	2014-09-28 16:48:54	Submission	42
239	12	394	code	f	1	2014-10-01 18:10:09	2014-10-01 18:10:09	Submission	42
240	3	394	code	f	1	2014-10-01 18:10:09	2014-10-01 18:10:09	Submission	42
241	2	396	code	f	1	2014-09-28 18:01:16	2014-09-28 18:01:16	Submission	42
242	3	396	code	f	1	2014-09-28 18:01:16	2014-09-28 18:01:16	Submission	42
243	3	397	code	f	1	2014-09-24 20:15:31	2014-09-24 20:15:31	Submission	42
244	4	397	code	f	1	2014-09-24 20:15:31	2014-09-24 20:15:31	Submission	42
245	2	398	code	f	1	2014-10-28 06:04:09	2014-10-28 06:04:09	Submission	42
246	4	398	code	f	1	2014-10-28 06:04:09	2014-10-28 06:04:09	Submission	42
247	2	399	code	f	1	2014-11-12 02:14:58	2014-11-12 02:14:58	Submission	42
248	3	403	code	f	1	2014-10-22 07:12:13	2014-10-22 07:12:13	Submission	42
249	3	407	code	f	1	2014-06-24 17:01:34	2014-06-24 17:01:34	Submission	45
250	3	413	code	f	1	2014-07-01 11:46:48	2014-07-01 11:46:48	Submission	45
251	36	417	code	f	1	2014-10-13 02:12:23	2014-10-13 02:12:23	Submission	45
252	3	431	code	f	1	2014-10-16 09:54:10	2014-10-16 09:54:10	Submission	45
253	3	436	code	f	1	2014-07-11 05:54:50	2014-07-11 05:54:50	Submission	45
254	3	441	code	f	1	2014-07-03 18:50:35	2014-07-03 18:50:35	Submission	45
255	3	442	code	f	1	2014-09-25 06:41:54	2014-09-25 06:41:54	Submission	45
256	3	451	code	f	1	2014-07-15 02:55:55	2014-07-15 02:55:55	Submission	45
257	3	452	code	f	1	2014-08-26 17:57:46	2014-08-26 17:57:46	Submission	45
258	3	453	code	f	1	2014-06-23 14:33:39	2014-06-23 14:33:39	Submission	45
259	3	456	code	f	1	2014-10-18 19:35:54	2014-10-18 19:35:54	Submission	45
260	3	457	code	f	1	2014-07-17 04:39:18	2014-07-17 04:39:18	Submission	45
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 260, true);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
1	9	062302562f4b483f5d2b91f9	done	ruby	bob	class Bob\n\n  def hey salute\n    if salute.gsub(/[^a-zA-Z]/, '') =~ /\\A[A-Z]+\\Z/ and salute =~ /^[A-Z0-9,\\s[[:punct:]]]+\\Z/\n      'Woah, chill out!'\n    elsif salute =~ /\\?\\Z/\n      'Sure.'\n    elsif salute.empty? or salute =~ /\\A\\s+\\Z/\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\nend	2014-11-28 04:38:23	\N	0	1	2014-11-20 12:24:35	2014-11-20 12:24:35	1	bob.rb
2	9	d34c3e8ee9043ca08a5c050c	done	elixir	rna-transcription	defmodule DNA do\n\n  @thymidine ?T\n  @uracil ?U\n\n  def to_rna(dna_sequence) do\n    lc nucleotide inlist dna_sequence, do: rna_counterpart(nucleotide)\n  end\n\n  defp rna_counterpart(@thymidine), do: @uracil\n  defp rna_counterpart(nucleotide), do: nucleotide\n\nend	2014-11-25 06:36:34	\N	0	1	2014-11-16 08:39:05	2014-11-16 08:39:05	2	rna-transcription.exs
3	9	f1346823e9f6f8861bfce3f3	superseded	ruby	hamming	module Hamming\n  def self.compute(dna1, dna2)\n    diff = 0\n    min_length = (dna1.size > dna2.size) ? dna2.size : dna1.size\n    min_length.times do |i|\n      diff += 1 if dna1[i] != dna2[i]\n    end\n    diff\n  end\nend	\N	\N	0	1	2014-11-16 20:43:35	2014-11-16 20:43:35	3	hamming.rb
4	9	63956df9ce3425dfd88bde4e	done	ruby	hamming	module Hamming\n  def self.compute(dna1, dna2)\n    diff = 0\n    min_length = [dna1.size, dna2.size].min\n    min_length.times do |i|\n      diff += 1 if dna1[i] != dna2[i]\n    end\n    diff\n  end\nend	2014-11-26 16:32:29	\N	0	2	2014-11-23 06:13:33	2014-11-23 06:13:33	3	hamming.rb
5	9	fca9596d736ec3e429dcd54c	done	haskell	point-mutations	module DNA (hammingDistance) where\n    \nhammingDistance :: String -> String -> Int\nhammingDistance a b = sum $ zipWith f a b where f x y = if (x == y) then 0 else 1	2014-11-25 01:28:18	\N	0	1	2014-11-15 00:26:27	2014-11-15 00:26:27	4	DNA.hs
6	9	915ab1f94e9cbfe51b95b552	superseded	javascript	beer-song	var firstLine = function (bottles) {\n    var bottlesOfBeer = bottleCount(bottles);\n    return capitalize(bottlesOfBeer) +  " on the wall, " + bottlesOfBeer + "."\n};\n\nvar secondLine = function (bottles) {\n    if (bottles == 0) {\n      return "Go to the store and buy some more, " +\n        "99 bottles of beer on the wall."\n    } else {\n      var oneOrIt = bottles == 1 ? "it" : "one";\n      var bottlesOfBeer = bottleCount(bottles - 1);\n      return "Take " + oneOrIt + " down and pass it around, " +\n        bottlesOfBeer + " on the wall."\n    }\n}\n\nvar bottleCount = function (bottles) {\n  switch (bottles) {\n    case 0:  return "no more bottles of beer";\n    case 1:  return "1 bottle of beer";\n    default: return bottles + " bottles of beer";\n  }\n}\n\nvar capitalize = function (phrase) {\n    return phrase.charAt(0).toUpperCase() + phrase.slice(1);\n}\n\nvar Beer = module.exports = {\n  verse: function (bottles) {\n    return [firstLine(bottles), secondLine(bottles), null].join("\\n")\n  },\n\n  sing: function (start, stop) {\n    var verses = []\n    for (var idx = start; idx >= (stop || 0); idx -= 1) {\n      verses.push(Beer.verse(idx));\n    }\n    return verses.join("\\n")\n  }\n};	\N	\N	0	1	2014-11-13 09:07:05	2014-11-13 09:07:05	5	beer-song.js
7	9	36cbedc1b06fd52d4241eff9	pending	javascript	beer-song	var firstLine = function (bottles) {\n  var bottlesOfBeer = bottlesClause(bottles);\n  return capitalize(bottlesOfBeer) +  " on the wall, " + bottlesOfBeer + ".";\n};\n\nvar secondLine = function (bottles) {\n  if (bottles === 0) {\n    return "Go to the store and buy some more, " +\n      "99 bottles of beer on the wall.";\n  } else {\n    var oneOrIt = bottles == 1 ? "it" : "one";\n    var bottlesOfBeer = bottlesClause(bottles - 1);\n    return "Take " + oneOrIt + " down and pass it around, " +\n      bottlesOfBeer + " on the wall.";\n  }\n};\n\nvar bottlesClause = function (bottles) {\n  switch (bottles) {\n    case 0:  return "no more bottles of beer";\n    case 1:  return "1 bottle of beer";\n    default: return bottles + " bottles of beer";\n  }\n};\n\nvar capitalize = function (phrase) {\n  return phrase.charAt(0).toUpperCase() + phrase.slice(1);\n};\n\nvar Beer = module.exports = {\n  verse: function (bottles) {\n    return firstLine(bottles) + "\\n" + secondLine(bottles) + "\\n";\n  },\n\n  sing: function (start, stop) {\n    var verses = [];\n    for (var idx = start; idx >= (stop || 0); idx -= 1) {\n      verses.push(Beer.verse(idx));\n    }\n    return verses.join("\\n");\n  }\n};	\N	\N	0	2	2014-11-19 14:25:27	2014-11-19 14:25:27	5	beer-song.js
8	11	a8149e24782c9132fcf74101	pending	ruby	rna-transcription	class Complement\n  class << self\n\n    CONVERSION_TABLE = [\n      ["C", "G"],\n      ["G", "C"],\n      ["T", "A"],\n      ["A", "U"]\n    ]\n\n    def of_dna strand\n      transcribe(strand, :dna, :rna)\n    end\n\n    def of_rna strand\n      transcribe(strand, :rna, :dna)\n    end\n\n    private\n\n    def transcribe strand, *args\n      strand.chars.inject("") do |new_strand, nucleotide|\n        new_strand << complement_for(nucleotide, *args)\n      end\n    end\n\n    def complement_for nucleotide, subject, complement\n      complementing_nucleotide_for_subject do |dna, rna|\n        eval(complement.to_s) if nucleotide == eval(subject.to_s)\n      end\n    end\n\n    def complementing_nucleotide_for_subject\n      CONVERSION_TABLE.each do |dna, rna|\n        value = yield(dna, rna)\n        return value if value\n      end\n    end\n  end\nend	\N	\N	0	1	2014-06-01 23:24:51	2014-06-01 23:24:51	6	complement.rb
9	11	9ff4b955f8dfc89fa22186cd	pending	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  GIGASECOND  = 10**9\n\n  def initialize(date)\n    @date = date\n  end\n  \n  def date\n    (@date.to_time + (GIGASECOND)).utc.to_date\n  end\n  \nend	\N	\N	0	4	2014-04-11 19:31:40	2014-04-11 19:31:40	7	gigasecond.rb
10	11	18dd89e633c17588d93ca289	superseded	ruby	gigasecond	class Gigasecond\n\n    def initialize(day_born)\n      @starting_time = day_born.to_time\n    end\n\nend	\N	\N	0	1	2014-05-12 08:52:11	2014-05-12 08:52:11	7	gigasecond.rb
11	11	4c6454f231c3905f6d8d98fb	superseded	ruby	gigasecond	class Gigasecond\n\n    def initialize(day_born)\n      @starting_time = day_born.to_time\n    end\n\n    def date\n      giga_date = @starting_time + (10**9)\n      return giga_date.to_date\n    end\n\nend	\N	\N	0	2	2014-06-29 08:47:08	2014-06-29 08:47:08	7	gigasecond.rb
12	11	4ca461f1bf08b5b62a48e943	superseded	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(date)\n    @date = date\n  end\n  \n  def date\n    (@date.to_time + (10**9)).utc.to_date\n  end\n  \nend	\N	\N	0	3	2014-08-03 02:05:37	2014-08-03 02:05:37	7	gigasecond.rb
13	11	963e99b9aa7f15792d32300f	superseded	perl5	bob	#\n# This is a SKELETON file and has been provided to enable you to get working on the\n# first exercise more quickly.\n#\n\npackage Bob;\n\nuse strict;\nuse Exporter;\nuse vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);\n\n$VERSION = 1.00;\n@ISA = qw(Exporter);\n@EXPORT = ();\n@EXPORT_OK = qw(hey);\n%EXPORT_TAGS = ( DEFAULT => [qw(&hey)],\n);\n\nsub hey {\n  # Get the input\n  my $_ = shift(@_);\n\n  # Empty strings, or only whitespace\n  return 'Fine. Be that way!' if /^\\s*$/;\n\n  # Emphasis - checking for U+E4 (ä) and skipping it\n  return 'Whoa, chill out!' if not /\\x{e4}/ and (/^[^a-z]*\\!$/ or /^[A-Z\\s]*\\??$/);\n\n  # Questions not asked forcefully\n  return 'Sure.' if /\\?$/;\n\n  # Anything else\n  return "Whatever.";\n}\n\n1;	\N	\N	0	1	2014-04-05 15:13:12	2014-04-05 15:13:12	8	bob.pm
14	11	73da8f7fda29a31941eb4f26	done	perl5	bob	#\n# This is a SKELETON file and has been provided to enable you to get working on the\n# first exercise more quickly.\n#\n\npackage Bob;\n\nuse strict;\nuse Exporter;\nuse vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);\n\n$VERSION = 1.00;\n@ISA = qw(Exporter);\n@EXPORT = ();\n@EXPORT_OK = qw(hey);\n%EXPORT_TAGS = ( DEFAULT => [qw(&hey)],\n);\n\nsub hey {\n  # Get the input\n  my $_ = shift(@_);\n\n  # Empty strings, or only whitespace\n  return 'Fine. Be that way!' if /^\\s*$/;\n\n  # Emphasis - checking for lowecase accented characters and skipping that case\n  return 'Whoa, chill out!' if not /\\p{Ll}/ and (/^[^a-z]*\\!$/ or /^[A-Z\\s]*\\??$/);\n\n  # Questions not asked forcefully\n  return 'Sure.' if /\\?$/;\n\n  # Anything else\n  return "Whatever.";\n}\n\n1;	2014-05-16 20:15:18	\N	0	2	2014-05-06 05:34:59	2014-05-06 05:34:59	8	bob.pm
15	11	46947418836202af1f575cba	superseded	csharp	hamming	﻿using System;\r\n\r\npublic class Hamming\r\n{\r\n    public static uint Compute(string p1, string p2)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}	\N	\N	0	1	2014-05-26 23:54:49	2014-05-26 23:54:49	9	Hamming.cs
16	11	5099442df8cdb4532c0ce621	done	csharp	hamming	﻿/// <summary>\r\n/// Calculation engine for the Hamming difference.\r\n/// </summary>\r\npublic static class Hamming\r\n{\r\n    /// <summary>\r\n    /// Calculate the Hamming difference between two DNA strands\r\n    /// </summary>\r\n    /// <param name="strandSource">Source DNA strand</param>\r\n    /// <param name="strandDestination">Destination DNA strand</param>\r\n    /// <returns>The Hamming difference between source and destination DNA strands</returns>\r\n    public static uint Compute(string strandSource, string strandDestination)\r\n    {\r\n        uint hammingDifference = 0;\r\n\r\n        for (int sourceIndex = 0, destinationIndex = 0; \r\n            (sourceIndex < strandSource.Length) && (destinationIndex < strandDestination.Length); \r\n            sourceIndex++, destinationIndex++)\r\n        {\r\n            if (!strandSource[sourceIndex].Equals(strandDestination[destinationIndex]))\r\n            {\r\n                hammingDifference++;\r\n            }\r\n        }\r\n\r\n        return hammingDifference;\r\n    }\r\n}	2014-06-28 16:47:13	\N	0	3	2014-06-26 08:37:47	2014-06-26 08:37:47	9	Hamming.cs
17	11	1e41cd3391091c3ebe1c3900	superseded	csharp	hamming	﻿using System;\r\n\r\n/// <summary>\r\n/// Calculation engine for the Hamming difference.\r\n/// </summary>\r\npublic static class Hamming\r\n{\r\n    /// <summary>\r\n    /// Calculate the Hamming difference between two DNA strands\r\n    /// </summary>\r\n    /// <param name="strandSource">Source DNA strand</param>\r\n    /// <param name="strandDestination">Destination DNA strand</param>\r\n    /// <returns>The Hamming difference between source and destination DNA strands</returns>\r\n    public static uint Compute(string strandSource, string strandDestination)\r\n    {\r\n        uint hammingDifference = 0;\r\n\r\n        for (int sourceIndex = 0, destinationIndex = 0; \r\n            (sourceIndex < strandSource.Length) && (destinationIndex < strandDestination.Length); \r\n            sourceIndex++, destinationIndex++)\r\n        {\r\n            if (!strandSource[sourceIndex].Equals(strandDestination[destinationIndex]))\r\n            {\r\n                hammingDifference++;\r\n            }\r\n        }\r\n\r\n        return hammingDifference;\r\n    }\r\n}	\N	\N	0	2	2014-09-08 19:30:25	2014-09-08 19:30:25	9	Hamming.cs
18	11	ee2679e855f4a35b8c216924	done	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue,\n            singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\n\ndata Node a = Node { bstValue :: a\n                   , bstLeft  :: Maybe (Node a)\n                   , bstRight :: Maybe (Node a)\n                   }\n\nsingleton :: a -> Node a\nsingleton val = Node val Nothing Nothing\n\ninsert :: Ord a => a -> Node a -> Node a\ninsert val node@(Node k l r)\n  | val <= k  = node { bstLeft = insert' l }\n  | otherwise = node { bstRight = insert' r }\n  where insert' = Just . maybe (singleton val) (insert val)\n\nfromList :: Ord a => [a] -> Node a\nfromList (x:xs) = foldl' (flip insert) (singleton x) xs\nfromList []     = error "empty list"\n\ntoList :: Node a -> [a]\ntoList (Node k l r) = toList' l ++ [k] ++ toList' r\n  where toList' = maybe [] toList	2014-06-02 03:12:59	\N	0	1	2014-05-31 11:42:26	2014-05-31 11:42:26	10	BST.hs
32	22	a3a7a73f5421ec648405abc8	done	ruby	strain	class Array\n  def keep\n    each_with_object([]) do |element, results|\n      results << element if yield(element)\n    end\n  end\n\n  def discard\n    keep { |element| !yield(element) }\n  end\nend	2014-08-07 07:16:18	\N	0	1	2014-08-04 04:52:33	2014-08-04 04:52:33	21	array.rb
33	22	0542ca06e5ffa695a9d0b0e4	pending	clojure	bob	(ns bob (:require [clojure.string :refer :all]))\n\n(defn shouting? [input]\n  (and (= input (upper-case input))\n       (not= input (lower-case input))))\n\n(defn question? [input]\n  (re-matches #".*\\?$" input))\n\n(defn response-for [input]\n  (cond\n   (blank? input) "Fine. Be that way!"\n   (shouting? input) "Whoa, chill out!"\n   (question? input) "Sure."\n   :else "Whatever."))	\N	\N	0	1	2014-08-21 06:48:35	2014-08-21 06:48:35	22	bob.clj
34	22	fd06dfeb459e5b1e445e9b1c	superseded	ruby	hamming	class Hamming \r\n\r\n\tdef self.compute(strand1,strand2)\r\n\t\tnumDifferences = 0\r\n\t\ti = 0\r\n\t\tlengthToCompare = [strand1.length,strand2.length].min;\r\n\t\tputs "Length is #{lengthToCompare}"\r\n\t\tlengthToCompare.times do\t\t\r\n\t\t\tif strand1[i] != strand2[i]\r\n\t\t\t\tnumDifferences += 1\r\n\t\t\tend\r\n\t\t\ti += 1\r\n\t\tend\r\n\t\treturn numDifferences\r\n\tend\r\n\t\r\nend	\N	\N	0	1	2014-08-10 07:55:10	2014-08-10 07:55:10	23	hamming.rb
35	22	2cd5d17fc338d1f6c4eb4f14	superseded	ruby	hamming	class Hamming \r\n\r\n\tdef self.compute(strand1,strand2)\r\n\t\tnumDifferences = 0\r\n\t\ti = 0\r\n\t\t[strand1.length,strand2.length].min.times do\t\t\r\n\t\t\tif strand1[i] != strand2[i]\r\n\t\t\t\tnumDifferences += 1\r\n\t\t\tend\r\n\t\t\ti += 1\r\n\t\tend\r\n\t\treturn numDifferences\r\n\tend\r\n\t\r\nend	\N	\N	0	2	2014-08-10 14:40:28	2014-08-10 14:40:28	23	hamming.rb
36	22	559bda3b4c0a0d64b1b07a90	superseded	ruby	hamming	class Hamming \r\n\r\n\tdef self.compute(strand1,strand2)\r\n\t\tnumDifferences = 0\r\n\t\ti = 0\r\n\t\t[strand1.length,strand2.length].min.times do\t\t\t\t\t\r\n\t\t\tnumDifferences += 1 if strand1[i] != strand2[i]\r\n\t\t\ti += 1\r\n\t\tend\r\n\t\treturn numDifferences\r\n\tend\r\n\t\r\nend	\N	\N	0	3	2014-08-23 06:38:31	2014-08-23 06:38:31	23	hamming.rb
37	22	f3618a7679b1b2b47e944a33	pending	ruby	hamming	class Hamming \r\n\r\n\tdef self.compute(strand1,strand2)\r\n\t\tnumDifferences = 0\r\n\t\t[strand1.length,strand2.length].min.times { |i|\t\t\t\t\t\r\n\t\t\tnumDifferences += 1 if strand1[i] != strand2[i]\r\n\t\t}\r\n\t\treturn numDifferences\r\n\tend\r\n\t\r\nend	\N	\N	0	4	2014-08-25 02:34:43	2014-08-25 02:34:43	23	hamming.rb
81	28	1bade153755f4523586f76e2	done	python	hamming	def hamming(strand_1, strand_2):\n\n    # Length checking\n    len_1 = len(strand_1)\n    len_2 = len(strand_2)\n\n    if len_1 > len_2:\n        hamming = len_1 - len_2\n        strand_1 = strand_1[:-hamming]\n\n    elif len_2 > len_1:\n        hamming = len_2 - len_1\n        strand_2 = strand_2[:-hamming]\n\n    else:\n        hamming = 0\n\n\n    for i, n in enumerate(strand_1):\n\n        if n != strand_2[i]:\n            hamming += 1\n\n\n    return hamming	2014-09-18 03:13:42	\N	0	1	2014-09-09 08:37:54	2014-09-09 08:37:54	49	hamming.py
19	11	40ec759e8391a67c13a9d3cd	done	elixir	beer-song	defmodule Beer do\n  @doc "Returns verses counting from `from` down to `to` of the beer song."\n  def sing(from, to) do\n    Enum.reduce(from..to, "", fn(number, song) ->\n      song <> verse(number) <> "\\n"\n    end)\n  end\n\n  @doc "Returns verses counting from `from` down to 0 of the beer song."\n  def sing(from), do: sing(from, 0)\n\n  @doc """\n  Returns the last verse of the beer song.\n\n  iex> Beer.verse(0)\n  "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  """\n  def verse(0) do\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\n\n  @doc"""\n  Returns the second last verse of the beer song.\n\n  iex> Beer.verse(1)\n  "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  """\n  def verse(1) do\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  @doc"""\n  Returns the nth verse of the beer song.\n\n  iex> Beer.verse(99)\n  "99 bottles of beer on the wall, 99 bottles of beer.\\nTake one down and pass it around, 98 bottles of beer on the wall.\\n"\n  """\n  def verse(amount) do\n    "#{amount |> bottles} of beer on the wall, #{amount |> bottles} of beer.\\nTake one down and pass it around, #{amount - 1 |> bottles} of beer on the wall.\\n"\n  end\n\n  defp bottles(1) do\n    "1 bottle"\n  end\n\n  defp bottles(amount) do\n    "#{amount} bottles"\n  end\nend	2014-04-16 06:35:01	\N	0	1	2014-04-14 07:13:31	2014-04-14 07:13:31	11	beer-song.exs
20	12	863f99f1bcf71eac1bc846b3	done	ocaml	word-count	open Core.Std\nopen Re2\n\nlet wordRegex = Regex.create_exn "\\\\W+"\n\nlet word_count s =\n  let words =  String.lowercase s |> Regex.split wordRegex |> List.filter ~f:(fun s -> not (String.is_empty s)) in\n  let update_count map w =\n    let current_count = Option.value (String.Map.find map w) ~default:0 in\n    String.Map.add map ~key:w ~data:(current_count + 1)\n  in\n  List.fold_left ~init:String.Map.empty ~f:update_count words	2014-07-23 00:44:40	\N	0	2	2014-07-20 02:14:43	2014-07-20 02:14:43	12	word_count.ml
21	12	92f91d64e8ae5d68d86ac5ac	superseded	ocaml	word-count	open Core.Std\n\n(* Split a string at the points where the predicate, f, is true. *)\nlet split_on_predicate str ~f =\n  (* Turn a reversed list of chars into a string *)\n  let mk_word = (fun cs -> String.of_char_list cs |> String.rev) in\n  (* Add a non-empty string to the found words list *)\n  let add_word word words = if String.is_empty word then words else (word :: words) in\n  let rec split words current = function\n    | [] -> add_word (mk_word current) words\n    | c :: cs ->\n      if f c\n      then split (add_word (mk_word current) words) [] cs\n      else split words (c :: current) cs\n  in\n  split [] [] (String.to_list str)\n\nlet word_count s =\n  let pred = (fun c -> not (Char.is_alphanum c)) in\n  let words = split_on_predicate (String.lowercase s) ~f:pred in\n  let update_count map w =\n    let current_count = Option.value (String.Map.find map w) ~default:0 in\n    String.Map.add map ~key:w ~data:(current_count + 1)\n  in\n  List.fold_left ~init:String.Map.empty ~f:update_count words	\N	\N	0	1	2014-10-02 06:40:24	2014-10-02 06:40:24	12	word_count.ml-original
22	12	f3919a707b5653248b42c236	pending	ruby	hamming	#! /usr/bin/env ruby\n\nclass Hamming\n  def self.compute(chain1, chain2)\n    # Initializes Counter\n    hamming = 0\n    # Trims both chains to equal length\n    if (chain1.length > chain2.length)\n      chain1 = chain1[0..chain2.length-1]\n    elsif (chain1.length < chain2.length)\n      chain2 = chain2[0..chain1.length-1]\n    end\n    # Compares both chains and increases counter when different\n    chain1.split("").each_with_index do |char,i|\n      if (char != chain2[i]) && (chain2[i] != "")\n        hamming = hamming +1\n      end\n    end\n    return hamming\n  end\nend	\N	\N	0	1	2014-09-16 22:14:06	2014-09-16 22:14:06	13	hamming.rb
23	12	ab772e7690439b6b38989e61	done	ruby	gigasecond	class Gigasecond\n  def initialize (starting_date)\n    @starting_date = starting_date\n\n  end\n\n  def date\n    gigasecond = 10**9/60/60/24\n    @starting_date + gigasecond\n  end\nend	2014-07-26 20:20:01	\N	0	1	2014-07-16 05:31:57	2014-07-16 05:31:57	14	gigasecond.rb
24	15	0598ecd11f1afdaf7456b16a	done	ruby	bob	class Bob\n  def hey(text)\n    if is_shouting?(text)\n      "Woah, chill out!"\n    elsif text.end_with?("?")\n      "Sure."\n    elsif text.strip.empty?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def is_shouting?(text)\n    letters = text.chars.grep /[[:alpha:]]/\n    !letters.empty? && letters.all? {|c| c.upcase == c}\n  end\nend	2014-10-29 06:48:40	\N	0	1	2014-10-26 07:11:01	2014-10-26 07:11:01	15	bob.rb
25	22	5011f2dac727f20565b1224c	done	ruby	trinary	class Trinary\r\n\r\n\tdef initialize (var)\r\n\t\t@var = var.match(/[^0-9]/) ? '0' : var\r\n\tend\r\n\r\n  def to_decimal\r\n    @var.each_char.inject(0) { |sum, n| sum * 3 + n.to_i }\r\n  end\r\nend	2014-09-16 00:03:38	\N	0	1	2014-09-14 17:18:28	2014-09-14 17:18:28	16	trinary.rb
26	22	b0a598ccfbfcd894f0442bf8	done	ruby	anagram	class Anagram\n\tdef initialize(input)\n\t\t@word = input\n\tend\n\tdef match(list)\n\t\tresult = []\n\t\tlist.each do |item|\n\t\t\tif item.length == @word.length\n\t\t\t\tif ((item.downcase.chars.sort.join == @word.downcase.chars.sort.join)&&(item.downcase() != @word.downcase()))\n\t\t\t\t\tresult.push(item)\n\t\t\t\tend\n\t\t\tend\n\t\tend\t\n\t\treturn result\t\n\tend\nend	2014-06-27 20:52:27	\N	0	1	2014-06-19 14:12:41	2014-06-19 14:12:41	17	anagram.rb
27	22	4a874aef0c0941958c66694b	pending	ruby	bob	class Bob\n  def hey(words)\n    if words.strip.length == 0  #check if words only contains whitespace\n      "Fine. Be that way!"\n    elsif words == words.upcase  #check if words is in all caps\n      "Woah, chill out!"\n    elsif words.end_with?("?")  #check if words is a question\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-07-28 13:03:50	2014-07-28 13:03:50	18	bob.rb
28	22	e3e051f05245337bca5b9363	done	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter (isAnagram . normalize)\n  where\n    normalize xs = let nxs = map toLower xs in (nxs, sort nxs)\n    (nw, sw) = normalize word\n    isAnagram (w, s) = nw /= w && sw == s	2014-07-02 14:18:31	\N	0	2	2014-06-25 14:27:27	2014-06-25 14:27:27	19	Anagram.hs
29	22	022d15f731a5f004733d2c82	superseded	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.Char (toLower)\nimport Data.Map (Map, fromListWith)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter ((canonical ==) . canonicalize)\n  where\n    canonical = canonicalize word\n    canonicalize :: String -> Map Char Int\n    canonicalize = fromListWith (+) . map key\n    key char = (toLower char, 1)	\N	\N	0	1	2014-07-13 00:32:17	2014-07-13 00:32:17	19	anagram.hs
30	22	ed7b3a69d9452fdee579677a	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  if (year%4==0){\n    if (!(year%100==0&&!(year%400==0))){\n      return true;\n      }\n    }\n  return false;\n}	\N	\N	0	1	2014-06-21 07:56:39	2014-06-21 07:56:39	20	leap.go
31	22	d9abae943f471c1bf1072593	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  return (year%4==0 && year%100 !=0) || year%400==0;\n}	2014-09-03 13:58:43	\N	0	2	2014-08-27 22:00:23	2014-08-27 22:00:23	20	leap.go
38	22	3c58475dd1546a5ce1be3d17	done	javascript	roman-numerals	var toRoman = function(num){\n  splitNum = num.toString().split("")\n  console.log("hi")\n  var result = "";\n  var numerals = {\n    3000: "MMM",\n    2000: "MM",\n    1000: "M",\n     900: "CM",\n     800: "DCCC",\n     700: "DCCC",\n     600: "DC",\n     500: "D",\n     400: "CD",\n     300: "CCC",\n     200: "CC",\n     100: "C",\n      90: "XC",\n      80: "LXXX",\n      70: "LXX",\n      60: "LX",\n      50: "L",\n      40: "XL",\n      30: "XXX",\n      20: "XX",\n      10: "X",\n       9: "IX",\n       8: "VIII",\n       7: "VII",\n       6: "VI",\n       5: "V",\n       4: "IV",\n       3: "III",\n       2: "II",\n       1: "I",\n       0: "",\n  }\n\n  digitLength = splitNum.length;\n  var numLength = splitNum.length\n\n\n  if (digitLength === 4){\n    for (var i = 0; i<digitLength;i++){\n      if (i===0){\n        splitNum[i] = splitNum[i]*1000\n      } else if (i===1) {\n        splitNum[i] = splitNum[i]*100\n      } else if (i===2) {\n        splitNum[i] = splitNum[i]*10\n      };\n    result+=numerals[splitNum[i]];\n    }\n  }\n\n  if (digitLength === 3){\n   for (var i = 0; i<digitLength;i++){\n     if (i===0){\n        splitNum[i] = splitNum[i]*100\n     } else if (i===1) {\n        splitNum[i] = splitNum[i]*10\n     }\n      result+=numerals[splitNum[i]];\n    }\n  }\n\n  if (digitLength === 2){\n    for (var i = 0; i<digitLength;i++){\n      if (i===0){\n        splitNum[i] = splitNum[i]*10\n      }\n      result+=numerals[splitNum[i]];\n    }\n  }\n\n  if (digitLength === 1){\n    for (var i = 0; i<digitLength;i++){\n      result+=numerals[splitNum[i]];\n    }\n  }\n\n  return result\n\n\n}	2014-10-10 00:57:23	\N	0	1	2014-09-28 22:07:03	2014-09-28 22:07:03	24	romanTest.js
39	22	15676ebdbfb9458183288989	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map translate\n  where\n    translate x\n        | x == 'C'  = 'G'\n        | x == 'G'  = 'C'\n        | x == 'A'  = 'U'\n        | otherwise = 'A'	2014-09-05 21:05:37	\N	0	1	2014-09-04 08:28:06	2014-09-04 08:28:06	25	DNA.hs
40	22	a1afecba8ee917735b46f7c8	superseded	python	grade-school	class School:\n\tdef __init__(self, s):\n\t\tself.db = {}\n\t\t\n\tdef add(self, st, gr):\n\t\tif gr not in self.db:\n\t\t\tself.db[gr] = set([st])\n\t\telse:\n\t\t\tself.db[gr].add(st)\n\t\t\n\tdef grade(self, gr):\n\t\tif gr in self.db:\n\t\t\treturn self.db[gr]\n\t\telse:\n\t\t\treturn set()\n\t\n\tdef sort(self):\n\t\treturn {gr:tuple(self.db[gr]) for gr in self.db.keys()}	\N	\N	0	1	2014-07-12 10:24:21	2014-07-12 10:24:21	26	school.py
41	22	5eb5783da1c9b583adb52db3	pending	python	grade-school	class School:\n\tdef __init__(self, s):\n\t\tself.schoolname = s\n\t\tself.db = {}\n\t\t\n\tdef add(self, st, gr):\n\t\tself.db.setdefault(gr, set()).add(st)\n\t\t\n\tdef grade(self, gr):\n\t\treturn self.db.get(gr, set())\n\t\n\tdef sort(self):\n\t\treturn {gr:tuple(sorted(sts)) for gr,sts in sorted(self.db.iteritems())}	\N	\N	0	2	2014-11-15 05:17:00	2014-11-15 05:17:00	26	school.py
42	22	98b472c03377f651b24db645	done	python	word-count	from collections import Counter\r\ndef word_count (statement):\r\n    words = statement.split()\r\n    return Counter(words)	2014-09-21 14:53:11	\N	0	1	2014-09-17 03:47:42	2014-09-17 03:47:42	27	wordcount.py
43	22	db742e4652080ff8fd309f81	pending	ruby	leap	class Year\n\n  def initialize( year )\n    @year = year\n  end\n\n  def leap?\n    remainder_evendivby4 = @year % 4\n    if remainder_evendivby4 == 0 then\n      remainder_evendivby100 = @year % 100\n      if remainder_evendivby100 == 0\n        remainder_evendivby400 = @year % 400\n        unless remainder_evendivby400 == 0\n          false\n        else\n          true\n          @year\n        end\n      else\n        true\n      end\n    else\n      false\n    end\n  end\nend	\N	\N	0	1	2014-06-27 10:52:21	2014-06-27 10:52:21	28	year.rb
44	22	e2d0c457b81e4ce488487c12	superseded	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Data.List (foldl')\n\nhexCharToInt :: Char -> Int\nhexCharToInt '0' = 0\nhexCharToInt '1' = 1\nhexCharToInt '2' = 2\nhexCharToInt '3' = 3\nhexCharToInt '4' = 4\nhexCharToInt '5' = 5\nhexCharToInt '6' = 6\nhexCharToInt '7' = 7\nhexCharToInt '8' = 8\nhexCharToInt '9' = 9\nhexCharToInt 'a' = 10\nhexCharToInt 'b' = 11\nhexCharToInt 'c' = 12\nhexCharToInt 'd' = 13\nhexCharToInt 'e' = 14\nhexCharToInt 'f' = 15\n\nhexToInt :: String -> Int\nhexToInt s \n  | all (`elem` "0123456789abcdef") s = foldl' (\\x y -> 16 * x + y) 0 intValues\n  | otherwise = 0\n  where intValues = map hexCharToInt s	\N	\N	0	1	2014-07-08 03:53:09	2014-07-08 03:53:09	29	Hexadecimal.hs
45	22	aee0c1c605953c22ca94cf0c	superseded	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Data.List (foldl', elemIndex)\n\nhexCharToInt :: Char -> Int\nhexCharToInt n = case elemIndex n "0123456789abcdef" of\n  Just i -> i\n  Nothing -> -1\n\nhexToInt :: String -> Int\nhexToInt s \n  | any (<0) intVals = 0\n  | otherwise = foldl' (\\x y -> 16 * x + y) 0 intVals \n  where intVals = map hexCharToInt s	\N	\N	0	2	2014-08-11 16:48:26	2014-08-11 16:48:26	29	Hexadecimal.hs
46	22	a773bc33f9b7f0d189e4cc24	done	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Data.Char (ord)\nimport Data.List (foldl')\nimport Data.Maybe (fromMaybe)\n\nhexCharToInt :: Char -> Maybe Int\nhexCharToInt n\n  | enum > 47 && enum < 58 = Just (enum - 48)\n  | enum > 96 && enum < 103 = Just (enum - 87) \n  | otherwise = Nothing\n  where enum = ord n\n\nhexToInt :: String -> Int\nhexToInt = fromMaybe 0 . foldl' hexToInt' (Just 0)\n  where hexToInt' x y = case hexCharToInt y of \n    \t\t\t\t\t\t Just n -> fmap ((+n).(*16)) x\n    \t\t\t\t\t\t _ -> Nothing	2014-08-30 10:27:35	\N	0	3	2014-08-29 01:17:38	2014-08-29 01:17:38	29	Hexadecimal.hs
47	22	3350de93347514b8cd8911a8	superseded	python	bob	#! /usr/bin/env python\n\ndef hey(said):\n    # Remove whitespace\n    said = said.strip()\n    # First, check for "empty" message\n    if not said: return 'Fine. Be that way!'\n    # NOW CHECK FOR SHOUTING\n    # shouting is capital LETTERS, so double-check that.\n    if said == said.upper() and said != said.lower():\n        return 'Woah, chill out!'\n    # Was Bob asked a question?\n    if said[-1] == '?': return 'Sure.'\n    # Default case.\n    return 'Whatever.'\n\nif __name__ == '__main__':\n    from sys import argv\n    print hey(argv[1] if len(argv) > 1 else '')	\N	\N	0	1	2014-06-17 17:44:22	2014-06-17 17:44:22	30	bob.py
48	22	e2573f596b6b7ad2c10f7a16	superseded	python	bob	#! /usr/bin/env python\n\ndef _is_question(said):\n    return said[-1] == "?"\n\ndef _is_shouting(said):\n    return said.isupper()\n\ndef hey(said):\n    said = said.strip()\n\n    if not said:\n        return 'Fine. Be that way!'\n    # shouting trumps questions\n    if _is_shouting(said):\n        return 'Woah, chill out!'\n    if _is_question(said):\n        return 'Sure.'\n\n    return 'Whatever.'\n\nif __name__ == '__main__':\n    from sys import argv\n    print hey(argv[1] if len(argv) > 1 else '')	\N	\N	0	2	2014-06-22 19:25:37	2014-06-22 19:25:37	30	bob.py
106	40	366b97aee8a4bd2623738175	pending	python	leap	def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False	\N	\N	0	1	2014-08-18 22:12:36	2014-08-18 22:12:36	63	year.py
107	40	751a3fd16aed703a58630e5a	superseded	python	word-count	#!/usr/bin/python\n\ndef word_count(phrase):\n    phrase = phrase.lower()\n    phrase = phrase.translate(None, ',:!@$%^&')\n    word_counts = {}\n    for word in phrase.split():\n        if word not in word_counts.keys():\n            word_counts[word] = 1\n        else:\n            word_counts[word] += 1\n    return  word_counts	\N	\N	0	1	2014-09-29 00:14:58	2014-09-29 00:14:58	64	wordcount.py
49	22	c3cc20e5b4ae101516bf1aa7	done	python	bob	#! /usr/bin/env python\n\ndef _is_question(said):\n    return said.endswith('?')\n\ndef _is_shouting(said):\n    return said.isupper()\n\ndef hey(said):\n    said = said.strip()\n\n    if not said:\n        return 'Fine. Be that way!'\n    # shouting trumps questions\n    if _is_shouting(said):\n        return 'Woah, chill out!'\n    if _is_question(said):\n        return 'Sure.'\n\n    return 'Whatever.'\n\nif __name__ == '__main__':\n    from sys import argv\n    print hey(argv[1] if len(argv) > 1 else '')	2014-10-28 18:19:30	\N	0	3	2014-10-23 17:46:34	2014-10-23 17:46:34	30	bob.py
50	22	0e8c2644923b82ed790a8ebc	done	python	sieve	"""\nThis module has one function, sieve, which generates\na sieve of eratosthenes to find primes efficiently\n"""\n\n\ndef sieve(max_value):\n    """\n    This function creates a list of values up to max, with either\n    True or False, telling whether or not that index is prime.\n    It then returns another list of primes based on the first list.\n    """\n    primality = [True] * max_value\n    primality[0] = primality[1] = False\n    for factor in range(len(primality)):\n        if primality[factor]:\n            for non_prime in range(factor ** 2, max_value, factor):\n                primality[non_prime] = False\n    primes = list()\n    for prime in range(len(primality)):\n        if primality[prime]:\n            primes.append(prime)\n    return primes	2014-06-29 03:31:38	\N	0	1	2014-06-27 22:57:10	2014-06-27 22:57:10	31	sieve.py
51	22	91fd7695f8506e6b108f552f	superseded	ruby	proverb	class Proverb\n  def initialize(*objects, qualifier: nil)\n    @objects = objects\n    @qualifier = qualifier\n  end\n\n  def to_s\n    sequence = @objects[1..-1].zip(@objects).inject("") do |string, (second, first)|\n      string + "For want of a #{first} the #{second} was lost.\\n"\n    end\n    sequence + "And all for the want of a #{qualifier}#{@objects[0]}."\n  end\n\nprivate\n\n  def qualifier\n    @qualifier ? @qualifier + " " : ""\n  end\n\nend	\N	\N	0	1	2014-09-02 07:35:27	2014-09-02 07:35:27	32	proverb.rb
52	22	5985da50cbba5166f1338ae2	superseded	ruby	proverb	class Proverb\n  def initialize(*objects, qualifier: nil)\n    @objects = objects\n    @qualifier = qualifier\n  end\n\n  def to_s\n    consequences + ending\n  end\n\nprivate\n\n  def consequences\n    object_pairs.map { |first, second| "For want of a #{first} the #{second} was lost.\\n" }.join\n  end\n\n  def ending\n    "And all for the want of a #{reason}."\n  end\n\n  def object_pairs\n    @objects.zip(@objects[1..-1])[0..-2]\n  end\n\n  def reason\n    (@qualifier ? "#{@qualifier} " : "") + "#{@objects[0]}"\n  end\n  \nend	\N	\N	0	2	2014-09-03 07:19:59	2014-09-03 07:19:59	32	proverb.rb
53	22	8d4d871ea97ca7d1c602ea42	done	ruby	proverb	class Proverb\n  def initialize(*objects, qualifier: nil)\n    @objects = objects\n    @qualifier = qualifier\n  end\n\n  def to_s\n    consequences + ending\n  end\n\nprivate\n\n  def consequences\n    object_pairs.map { |first, second| "For want of a #{first} the #{second} was lost.\\n" }.join\n  end\n\n  def ending\n    "And all for the want of a #{qualifier}#{@objects[0]}."\n  end\n\n  def object_pairs\n    @objects.zip(@objects[1..-1])[0..-2]\n  end\n\n  def qualifier\n    @qualifier ? "#{@qualifier} " : ""\n  end\n  \nend	2014-10-22 09:48:19	\N	0	3	2014-10-19 19:42:02	2014-10-19 19:42:02	32	proverb.rb
54	22	98c0c5b922912766b678f946	pending	csharp	phone-number	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nclass PhoneNumber\r\n{\r\n\r\n    public PhoneNumber(string phoneNumber)\r\n    {\r\n        processNumber(phoneNumber); \r\n    }\r\n\r\n    public string Number\r\n    {\r\n        get;\r\n        private set; \r\n    }\r\n\r\n    public string AreaCode\r\n    {\r\n        get\r\n        {\r\n            return Number.Substring(0, 3); \r\n        }\r\n    }\r\n\r\n    public override string ToString()\r\n    {\r\n        return string.Format("({0}) {1}-{2}", Number.Substring(0, 3), Number.Substring(3, 3), Number.Substring(6, 4)); \r\n    }\r\n\r\n    private void processNumber(string phoneNumber)\r\n    {\r\n        var justNumbers = from c in phoneNumber\r\n                          where c >= '0' && c <= '9'\r\n                          select c; \r\n\r\n        if (justNumbers.Count() == 10)\r\n        {\r\n            Number = new string(justNumbers.ToArray()); \r\n        }\r\n        else if (justNumbers.Count() == 11 && justNumbers.ElementAt(0) == '1')\r\n        {\r\n            Number = new String(justNumbers.ToArray()).Substring(1); \r\n        }\r\n        else\r\n        {\r\n            Number = "0000000000";\r\n        }\r\n    }\r\n}\r\n\r	\N	\N	0	1	2014-07-04 19:23:57	2014-07-04 19:23:57	33	PhoneNumber.cs
55	22	cbc096608bc022ffeee0dfa9	pending	perl5	clock	package Clock;\n\nuse strict;\nuse warnings;\n\nuse overload '+'  => \\&add;\nuse overload '-'  => \\&sub;\nuse overload '""' => \\&str;\nuse overload 'eq' => \\&eq;\n\nour $DAY = 24*60;\n\nsub new {\n    my $class = shift;\n    my $time  = shift || [0,0];\n    bless [ $time->[0] || 0, \n\t    $time->[1] || 0 ], $class;\n}\n\nsub add {\n    my $self = shift;\n    my $add  = shift;\n\n    my $total_min = $self->[0] * 60 + $self->[1];\n    $total_min = ($total_min + $add) % $DAY;\n\n    $self->[0] = int( $total_min/60 );\n    $self->[1] = $total_min - int( $total_min/60 ) * 60;\n\n    return $self;\n}\n\nsub sub { shift->add( -shift() )           }\nsub eq  { "$_[0]" eq "$_[1]"               }\nsub str { sprintf("%02d:%02d", @{ $_[0] }) }\n\n1;	\N	\N	0	1	2014-07-14 09:17:01	2014-07-14 09:17:01	34	Clock.pm
56	22	c2b09c8e02b88592eb066a18	superseded	python	anagram	class Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self._canon_word = self._canonicalize(word)\n\n    def _canonicalize(self, word):\n        return sorted(word.lower())\n\n    def is_anagram(self, word):\n        return self.word != word and \\\n            self._canonicalize(word) == self._canon_word\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	\N	\N	0	3	2014-08-19 15:56:40	2014-08-19 15:56:40	35	anagram.py
57	22	1536d06dfbed412959fb6c07	superseded	python	anagram	Testing the unsubmit.	\N	\N	0	2	2014-08-30 01:34:42	2014-08-30 01:34:42	35	anagram.py
58	22	95695e7cd9ba6514a4f75b0b	superseded	python	anagram	class Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self._canon_word = self._canonicalize(word)\n\n    def _canonicalize(self, word):\n        return sorted(word.lower())\n\n    def is_anagram(self, word):\n        return self.word != word and \\\n            self._canonicalize(word) == self._canon_word\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	\N	\N	0	1	2014-09-12 21:24:19	2014-09-12 21:24:19	35	anagram.py
59	22	a74a062de644631e0b006021	superseded	python	anagram	from collections import Counter\n\nclass Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self._canon_word = self._canonicalize(word)\n\n    def _canonicalize(self, word):\n        return Counter(word.lower())\n\n    def is_anagram(self, word):\n        return self.word != word and \\\n            self._canonicalize(word) == self._canon_word\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	\N	\N	0	4	2014-10-09 05:15:42	2014-10-09 05:15:42	35	anagram.py
60	22	fa34b4580bdfe6033569b67e	done	python	anagram	from collections import Counter\n\nclass Anagram(object):\n    def __init__(self, word):\n        self.word = word.lower()\n        self._char_freqs = self._char_counts(self.word)\n\n    def _char_counts(self, word):\n        return Counter(word)\n\n    def is_anagram(self, word):\n        word = word.lower()\n        return self.word != word and \\\n            self._char_counts(word) == self._char_freqs\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	2014-10-21 00:12:29	\N	0	5	2014-10-16 20:32:11	2014-10-16 20:32:11	35	anagram.py
61	22	f1ae507b38d5681753978684	pending	haskell	grains	module Grains\n  ( square\n  , total\n  ) where\n\n\nsquare :: Integer -> Integer\nsquare x = 2^(x-1)\n\n-- Solution using the sum of the geometric series a + ar + ar^2 + ... + ar^(n-1)\n-- with a = 1, r = 2, n = 64\n--\n-- See: http://en.wikipedia.org/wiki/Geometric_series\n\ntotal :: Integer\ntotal = 2^(64 :: Int) - 1\n\n-- Other solutions:\n--\n-- 1. unisg sum + map. Really readable\n--\n-- total :: Integer\n-- total = sum $ map square [1..64]\n--\n-- 2. using foldl'\n--\n-- import Data.List\n--\n-- total :: Integer\n-- total = foldl' (\\ acc x -> square x + acc) 0 [1..64]	\N	\N	0	2	2014-08-01 13:37:54	2014-08-01 13:37:54	36	Grains.hs
62	22	492975c19eb1f838d417ac90	superseded	haskell	grains	module Grains\n  ( square\n  , total\n  ) where\n\nsquare :: Integer -> Integer\nsquare x = 2^(x-1)\n\ntotal :: Integer\ntotal = foldl (\\ acc x -> square x + acc) 0 [1..64]	\N	\N	0	1	2014-08-21 07:31:12	2014-08-21 07:31:12	36	Grains.hs
63	22	1d11e2b85f6056c65e12e8e1	superseded	haskell	leap	module LeapYear where\n\ndivisibleBy :: Integer -> Integer -> Bool\ndivisibleBy n m = mod m n == 0\n\nisLeapYear :: Integer -> Bool\nisLeapYear x = caseA || caseB where\n  caseA = divisibleBy 4 x && not (divisibleBy 100 x)\n  caseB = divisibleBy 400 x	\N	\N	0	1	2014-06-26 18:50:36	2014-06-26 18:50:36	37	leap_year.hs
64	22	904482b76eec8697d7261241	pending	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Integer -> Bool\nisLeapYear x = caseA || caseB where\n  caseA = divisibleBy 4 && not (divisibleBy 100)\n  caseB = divisibleBy 400\n  divisibleBy n = mod x n == 0	\N	\N	0	2	2014-08-25 08:44:33	2014-08-25 08:44:33	37	leap_year.hs
65	22	e1ba0378319c94fd2c5f9a3d	done	javascript	bob	//     Underscore.js 1.5.2\n//     http://underscorejs.org\n//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    concat           = ArrayProto.concat,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler "advanced" mode.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.5.2';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, length = obj.length; i < length; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results.push(iterator.call(context, value, index, list));\n    });\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var length = obj.length;\n    if (length !== +length) {\n      var keys = _.keys(obj);\n      length = keys.length;\n    }\n    each(obj, function(value, index, list) {\n      index = keys ? keys[--length] : --length;\n      if (!initial) {\n        memo = obj[index];\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, obj[index], index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    return _.filter(obj, function(value, index, list) {\n      return !iterator.call(context, value, index, list);\n    }, context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    return any(obj, function(value) {\n      return value === target;\n    });\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs, first) {\n    if (_.isEmpty(attrs)) return first ? void 0 : [];\n    return _[first ? 'find' : 'filter'](obj, function(value) {\n      for (var key in attrs) {\n        if (attrs[key] !== value[key]) return false;\n      }\n      return true;\n    });\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.where(obj, attrs, true);\n  };\n\n  // Return the maximum element or (element-based computation).\n  // Can't optimize arrays of integers longer than 65,535 elements.\n  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.max.apply(Math, obj);\n    }\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\n    var result = {computed : -Infinity, value: -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed > result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.min.apply(Math, obj);\n    }\n    if (!iterator && _.isEmpty(obj)) return Infinity;\n    var result = {computed : Infinity, value: Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Shuffle an array, using the modern version of the \n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var rand;\n    var index = 0;\n    var shuffled = [];\n    each(obj, function(value) {\n      rand = _.random(index++);\n      shuffled[index - 1] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sample **n** random values from an array.\n  // If **n** is not specified, returns a single random element from the array.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (arguments.length < 2 || guard) {\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // An internal function to generate lookup iterators.\n  var lookupIterator = function(value) {\n    return _.isFunction(value) ? value : function(obj){ return obj[value]; };\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, value, context) {\n    var iterator = lookupIterator(value);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate "group by" operations.\n  var group = function(behavior) {\n    return function(obj, value, context) {\n      var result = {};\n      var iterator = value == null ? _.identity : lookupIterator(value);\n      each(obj, function(value, index) {\n        var key = iterator.call(context, value, index, obj);\n        behavior(result, key, value);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, key, value) {\n    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, key, value) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, key) {\n    _.has(result, key) ? result[key]++ : result[key] = 1;\n  });\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator, context) {\n    iterator = iterator == null ? _.identity : lookupIterator(iterator);\n    var value = iterator.call(context, obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    return (n == null) || guard ? array[0] : slice.call(array, 0, n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) {\n      return array[array.length - 1];\n    } else {\n      return slice.call(array, Math.max(array.length - n, 0));\n    }\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, (n == null) || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, output) {\n    if (shallow && _.every(input, _.isArray)) {\n      return concat.apply(output, input);\n    }\n    each(input, function(value) {\n      if (_.isArray(value) || _.isArguments(value)) {\n        shallow ? push.apply(output, value) : flatten(value, shallow, output);\n      } else {\n        output.push(value);\n      }\n    });\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator, context) {\n    if (_.isFunction(isSorted)) {\n      context = iterator;\n      iterator = isSorted;\n      isSorted = false;\n    }\n    var initial = iterator ? _.map(array, iterator, context) : array;\n    var results = [];\n    var seen = [];\n    each(initial, function(value, index) {\n      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n        seen.push(value);\n        results.push(array[index]);\n      }\n    });\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n    return _.filter(array, function(value){ return !_.contains(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var length = _.max(_.pluck(arguments, "length").concat(0));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(arguments, '' + i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, length = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var hasIndex = from != null;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n    }\n    var i = (hasIndex ? from : array.length);\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(length);\n\n    while(idx < length) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    var args, bound;\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      ctor.prototype = null;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context.\n  _.partial = function(func) {\n    var args = slice.call(arguments, 1);\n    return function() {\n      return func.apply(this, args.concat(slice.call(arguments)));\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length === 0) throw new Error("bindAll must be passed function names");\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    options || (options = {});\n    var later = function() {\n      previous = options.leading === false ? 0 : new Date;\n      timeout = null;\n      result = func.apply(context, args);\n    };\n    return function() {\n      var now = new Date;\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = new Date();\n      var later = function() {\n        var last = (new Date()) - timestamp;\n        if (last < wait) {\n          timeout = setTimeout(later, wait - last);\n        } else {\n          timeout = null;\n          if (!immediate) result = func.apply(context, args);\n        }\n      };\n      var callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) result = func.apply(context, args);\n      return result;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      memo = func.apply(this, arguments);\n      func = null;\n      return memo;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = new Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = new Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    each(keys, function(key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    for (var key in obj) {\n      if (!_.contains(keys, key)) copy[key] = obj[key];\n    }\n    return copy;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          if (obj[prop] === void 0) obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to "tap into" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is\n        // equivalent to `new String("5")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) return bStack[length] == b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An "empty" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) == '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable "Arguments" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Optimize `isFunction` if appropriate.\n  if (typeof (/./) !== 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj === 'function';\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj != +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iterator, context) {\n    var accum = Array(Math.max(0, n));\n    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // List of HTML entities for escaping.\n  var entityMap = {\n    escape: {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '"': '&quot;',\n      "'": '&#x27;'\n    }\n  };\n  entityMap.unescape = _.invert(entityMap.escape);\n\n  // Regexes containing the keys and values listed immediately above.\n  var entityRegexes = {\n    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n  };\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  _.each(['escape', 'unescape'], function(method) {\n    _[method] = function(string) {\n      if (string == null) return '';\n      return ('' + string).replace(entityRegexes[method], function(match) {\n        return entityMap[method][match];\n      });\n    };\n  });\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    "'":      "'",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\t':     't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    var render;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = new RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = "__p+='";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset)\n        .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n      if (escape) {\n        source += "'+\\n((__t=(" + escape + "))==null?'':_.escape(__t))+\\n'";\n      }\n      if (interpolate) {\n        source += "'+\\n((__t=(" + interpolate + "))==null?'':__t)+\\n'";\n      }\n      if (evaluate) {\n        source += "';\\n" + evaluate + "\\n__p+='";\n      }\n      index = offset + match.length;\n      return match;\n    });\n    source += "';\\n";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = "var __t,__p='',__j=Array.prototype.join," +\n      "print=function(){__p+=__j.call(arguments,'');};\\n" +\n      source + "return __p;\\n";\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a "chain" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  _.extend(_.prototype, {\n\n    // Start chaining a wrapped Underscore object.\n    chain: function() {\n      this._chain = true;\n      return this;\n    },\n\n    // Extracts the result from a wrapped and chained object.\n    value: function() {\n      return this._wrapped;\n    }\n\n  });\n\n}).call(this);	2014-08-07 18:11:29	\N	0	1	2014-08-07 17:42:27	2014-08-07 17:42:27	38	underscore.js
66	22	1eed40fb6cb12cc66982bdfc	done	python	scrabble-score	__author__ = 'angelo'\n\npoint_values = dict(A=1, E=1, I=1, O=1, U=1, L=1, N=1, R=1, S=1, T=1, D=2, G=2, B=3, C=3, M=3, P=3, F=4, H=4, V=4, W=4,\n                    Y=4, K=5, J=8, X=8, Q=10, Z=10)\n\nclass Word:\n\n    def __init__(self,w):\n        self.word = w\n\n    def score(self):\n        return sum(point_values[l] for l in self.word.upper() if l in point_values)	2014-10-14 09:01:29	\N	0	1	2014-10-08 21:24:05	2014-10-08 21:24:05	39	scrabble.py
67	22	c325f6bfe9fcceb4f714bf4f	pending	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber string =\n  case length string' of\n    10 -> string'\n    11 -> if head string' == '1' then tail string' else badNumber\n    _  -> badNumber\n    where string' = filter isDigit string\n          badNumber = "0000000000"\n\nareaCode :: String -> String\nareaCode = take 3 . filter isDigit\n\nprettyPrint :: String -> String\nprettyPrint string = printf "(%s) %s-%s" area middle rest'\n  where (area, rest)    = splitAt 3 . number $ string\n        (middle, rest') = splitAt 3 rest	\N	\N	0	1	2014-07-21 03:28:58	2014-07-21 03:28:58	40	Phone.hs
68	22	e5e663fdc1598725ff6b86df	pending	erlang	accumulate	-module(accumulate).\n-export([accumulate/2]).\n\n\naccumulate ( _Fun, [] ) -> [];\naccumulate ( Fun, [ Head | List ] ) -> \n  [ Fun(Head) | accumulate(Fun, List) ].	\N	\N	0	1	2014-07-24 14:36:57	2014-07-24 14:36:57	41	accumulate.erl
69	22	022e0773c9400b923f2243db	done	ruby	grains	# encoding: UTF-8\n\nclass Grains\n  def square(n)\n    board(n).pop\n  end\n\n  def total\n    t = 0\n    board(64).each { |e| t += e }\n    t\n  end\n\n  private\n\n  def board(squares)\n    squares = squares-1\n    grains = [1]\n\n    squares.times { grains << grains[-1] * 2 }\n\n    grains\n  end\nend	2014-07-17 09:52:16	\N	0	1	2014-07-12 16:09:51	2014-07-12 16:09:51	42	grains.rb
70	22	46fc90923f16d511408a0549	done	javascript	word-count	module.exports = function(sentence) {\r\n\tvar list = sentence.split(' ');\r\n\tvar wordCount = {};\r\n\r\n\tfor (var i = 0; i < list.length; i++) {\r\n\t\t// Normalize case\r\n\t\tvar word = list[i].toLowerCase();\r\n\r\n\t\t// Skip if it doesn't contain valid characters\r\n\t\tif (!/[a-z0-9]/.test(word)) continue;\r\n\r\n\t\t// Strip punctuation\r\n\t\tword = word.match(/[a-z0-9]+/g)[0];\r\n\r\n\t\t// Add or increment word count\r\n\t\tif (wordCount[word] === undefined)\r\n\t\t\twordCount[word] = 1;\r\n\t\telse\r\n\t\t\twordCount[word]++;\r\n\t}\r\n\r\n\treturn wordCount;\r\n};	2014-06-24 05:36:20	\N	0	1	2014-06-20 00:32:30	2014-06-20 00:32:30	43	word-count.js
71	22	49af1be7791cc5481879eb3d	pending	haskell	sublist	module Sublist (Sublist(Equal, Sublist, Superlist, Unequal), sublist) where\n\n\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Show, Eq)\n\n\nsublist :: (Eq a) => [a] -> [a] -> Sublist\nsublist xs ys\n  | xs == ys                                           = Equal\n  | length xs < length ys && xs `properSublistOf` ys   = Sublist\n  | length xs > length ys && xs `properSuperlistOf` ys = Superlist\n  | otherwise                                          = Unequal\n\nproperSublists :: [a] -> Int -> [[a]]\nproperSublists xs l\n  | l == length xs = []\n  | l < length xs  = [take l . drop i $ xs | i <- [0..end]]\n  | otherwise      = error "Invalid length"\n  where\n    end = length xs - l\n\nproperSublistOf :: (Eq a) => [a] -> [a] -> Bool\nproperSublistOf xs ys = any (\\ysub -> xs == ysub) $ properSublists ys (length xs)\n\nproperSuperlistOf xs ys = ys `properSublistOf` xs	\N	\N	0	1	2014-07-27 09:32:47	2014-07-27 09:32:47	44	Sublist.hs
72	22	7bdff43bd06645376be650bc	done	clojure	beer-song	(ns beer (:require [clojure.string :as s]))\n\n(defn- n-bottles [n]\n  (case n\n    0 "no more bottles"\n    1  "1 bottle"\n    (format "%d bottles" n)))\n\n(defn- it-one [n] (if (= 1 n) "it" "one"))\n\n(defn- verse1 [n]\n  (let [bottles (n-bottles n)]\n    (format "%s of beer on the wall, %s of beer.\\n", (s/capitalize bottles) bottles)))\n\n(defn- verse2 [n]\n  (if (zero? n)\n    "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    (format "Take %s down and pass it around, %s of beer on the wall.\\n" (it-one n) (n-bottles (dec n)))))\n\n(defn verse [n] (str (verse1 n) (verse2 n)))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end] (let [verse-numbers (range start (dec end) -1)]\n                 (s/join "\\n" (map verse verse-numbers)))))	2014-07-06 04:37:40	\N	0	4	2014-06-29 23:32:10	2014-06-29 23:32:10	45	beer.clj
73	22	c6ac1260bc14b39d6b1f894a	superseded	clojure	beer-song	(ns beer (:require [clojure.string :as s]))\n\n(defn n-bottles [n]\n  (case n\n    0 "no more bottles"\n    1  "1 bottle"\n    (str n " bottles")))\n\n(defn verse1 [n]\n  (let [bottles (n-bottles n)]\n    (str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n")))\n\n(defn verse2 [n]\n  (let [it-one (if (= 1 n) "it" "one")]\n    (if (zero? n)\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n      (str "Take " it-one " down and pass it around, " (n-bottles (dec n)) " of beer on the wall.\\n"))))\n\n(defn verse [n] (str (verse1 n) (verse2 n)))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end] (->> (range start (dec end) -1)\n                    (map verse)\n                    (interpose "\\n")\n                    (apply str))))	\N	\N	0	3	2014-08-03 04:13:06	2014-08-03 04:13:06	45	beer.clj
74	22	3ca528fcbc30fce3d7096b61	superseded	clojure	beer-song	(ns beer (:require [clojure.string :as s]))\n\n(defn n-bottles [n]\n  (case n\n    0 "no more bottles"\n    1  "1 bottle"\n    (str n " bottles")))\n\n(defn verse1 [n]\n  (let [bottles (n-bottles n)]\n    (str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n")))\n\n(defn verse2 [n]\n  (let [it-one (if (= 1 n) "it" "one")]\n    (if (zero? n)\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n      (str "Take " it-one " down and pass it around, " (n-bottles (dec n)) " of beer on the wall.\\n"))))\n\n(defn verse [n] (str (verse1 n) (verse2 n)))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end] (->> (range start (dec end) -1)\n                    (map #(str (verse %) "\\n"))\n                    (apply str))))	\N	\N	0	2	2014-08-29 08:36:06	2014-08-29 08:36:06	45	beer.clj
75	22	5861b7356cec40a302622e1d	superseded	clojure	beer-song	(ns beer (:require [clojure.string :as s]))\n\n(defn n-bottles [n]\n  (cond (= 0 n) "no more bottles" \n        (= 1 n) "1 bottle" \n        :else (format "%d bottles", n)))\n\n(defn verse1 [n]\n  (let [bottles (n-bottles n)]\n  (format "%s of beer on the wall, %s of beer.\\n" (s/capitalize bottles) bottles)))\n\n(defn verse2 [n]\n  (let [it-one (fn [n] (cond (= 1 n) "it" :else "one"))]\n  (cond (= 0 n) "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n        :else (format "Take %s down and pass it around, %s of beer on the wall.\\n" (it-one n) (n-bottles (- n 1))))))\n\n(defn verse [n] (s/join (list (verse1 n) (verse2 n))))\n\n(defn sing \n  ([m] (sing m 0))\n  ([m n] (let [verse-with-nl (fn [n] (str (verse n) "\\n"))] \n           (s/join (map verse-with-nl (range m (- n 1) -1))))))	\N	\N	0	1	2014-09-19 11:00:17	2014-09-19 11:00:17	45	beer-song.clj
76	22	61737daf8998977c166d9d20	pending	perl5	binary-search	package BinarySearch;\r\nuse Modern::Perl;\r\nuse List::AllUtils qw(reduce);\r\n\r\nsub _cmp_str{ $_[0] cmp $_[1] }\r\nsub _cmp_num{ $_[0] <=> $_[1] }\r\n\r\nsub binary_search{\r\n    my ($search, $keys) = @_;\r\n    #use right cmp function\r\n    my $cmp = $search=~/^-?\\d+$/ \r\n            ? \\&_cmp_num\r\n            : \\&_cmp_str;\r\n    #assert sorted keys\r\n    reduce { die 'keys unsorted' if $cmp->($a,$b)>0 } @$keys;\r\n    my ($lower,$upper) = (0, $#$keys);\r\n    while($lower<=$upper){\r\n        #pick at middle\r\n        my $index = int( ($lower + $upper)/2 );\r\n        #compare\r\n        return $index unless\r\n            my $diff = $cmp->($search,$keys->[$index]);\r\n        #not found?\r\n        return undef if $lower == $upper;\r\n        #update boundaries;\r\n        if($diff>0){\r\n            $lower = $index+1;\r\n        }\r\n        else{\r\n            $upper = $index-1;\r\n        }\r\n    }\r\n    return undef;\r\n}\r\n\r\n1;	\N	\N	0	1	2014-07-09 07:00:45	2014-07-09 07:00:45	46	BinarySearch.pm
77	28	46ebc3cd305a2535f73c90fd	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA xs = map substitute xs\n\nsubstitute :: Char -> Char\nsubstitute x\n    | x == 'G'  = 'C'\n    | x == 'C'  = 'G'\n    | x == 'T'  = 'A'\n    | x == 'A'  = 'U'\n    | otherwise = x	\N	\N	0	1	2014-09-03 07:44:45	2014-09-03 07:44:45	47	DNA.hs
78	28	4daf40bee62711eb4ffab0a9	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA xs = map substitute xs\n    where\n        substitute :: Char -> Char\n        substitute 'G' = 'C'\n        substitute 'C' = 'G'\n        substitute 'T' = 'A'\n        substitute 'A' = 'U'\n        substitute x = x	\N	\N	0	2	2014-11-13 17:18:18	2014-11-13 17:18:18	47	DNA.hs
79	28	371ad8c9a389dbf0aa9b030a	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA xs = map substitute xs\n    where substitute x = case x of 'G' -> 'C'\n                                   'C' -> 'G'\n                                   'T' -> 'A'\n                                   'A' -> 'U'\n                                   _   -> undefined	2014-11-22 19:30:03	\N	0	3	2014-11-20 12:49:27	2014-11-20 12:49:27	47	DNA.hs
80	28	d2092cc010bed1b4eb4b5c74	done	csharp	phone-number	﻿using System.Linq;\r\n\r\nclass PhoneNumber\r\n{\r\n    // bad number is 10 zeros\r\n    public readonly string Number = "0000000000";\r\n    public readonly string AreaCode;\r\n    public PhoneNumber(string number)\r\n    {\r\n\r\n        // remove all chars that is not digits\r\n        string clean = new string(\r\n            number.Where(c => char.IsDigit(c))\r\n            .ToArray());\r\n        // correct length use number\r\n        if (clean.Length == 10)\r\n        {\r\n            Number = clean;\r\n        }\r\n        // if country code is added, remove it\r\n        else if (clean.Length == 11 && clean[0] == '1')\r\n        {\r\n            Number = clean.Substring(1, clean.Length - 1);\r\n        }\r\n        // set area code\r\n        AreaCode = Number.Substring(0, 3);\r\n    }\r\n    public override string ToString()\r\n    {\r\n        return\r\n            "(" + AreaCode + ") " +\r\n            Number.Substring(3, Number.Length - 3).Insert(3, "-");\r\n    }\r\n}\r	2014-08-11 19:06:58	\N	0	1	2014-08-06 22:52:11	2014-08-06 22:52:11	48	PhoneNumber.cs
207	23	8e863f0bf1a0efdc92e656e9	pending	ruby	gigasecond	class Gigasecond\n\n\tGIGASECOND = 10**9\n\n\tdef self.from(date)\n\t\t(date.to_time + GIGASECOND).to_date\n\tend\nend	\N	\N	0	2	2014-09-03 19:04:40	2014-09-03 19:04:40	113	gigasecond.rb
208	23	51d241985f1adbe14f3e3049	superseded	ocaml	bob	type talk =\n    | Nothing\n    | Question\n    | Yielding\n    | Other\n\nlet describe_nothing str =\n    0 == (String.length (String.trim str))\n\nand describe_yielding str =\n    let is_cap_letter c = c >= 'A' && 'Z' >= c\n    and str_yielding = ref true\n    and has_one_cap_letter = ref false (* because we can have only numbers *)\n    and i = ref ((String.length str) - 1) in\n    while (!str_yielding && !i >= 0) do\n        (let c = String.get str !i in\n            has_one_cap_letter := !has_one_cap_letter || (is_cap_letter c);\n            str_yielding := !str_yielding && (c == (Char.uppercase c)));\n        decr i\n    done;\n    !str_yielding && !has_one_cap_letter\n\nand describe_question str =\n    let last_char = String.get str ((String.length str) - 1) in\n    '?' == last_char\n\nlet response_for str =\n    let talks_type = [\n        (describe_nothing, Nothing);\n        (describe_yielding, Yielding);\n        (describe_question, Question);\n        ((fun str -> true), Other)\n    ] in\n    let (_, str_type) =\n        List.find (fun (desc,_) -> desc str) talks_type\n    in\n    match str_type with\n    | Nothing -> "Fine. Be that way!"\n    | Question -> "Sure."\n    | Yielding -> "Woah, chill out!"\n    | Other -> "Whatever."	\N	\N	0	1	2014-04-23 09:38:11	2014-04-23 09:38:11	114	bob.ml
239	20	cc7486f8cf03e003cf459820	done	clojure	word-count	(ns phrase\n  (:use [clojure.string :only [lower-case]]))\n\n(defn word-count [s]\n  (reduce #(update-in % [%2] (fnil inc 0)) {} (re-seq #"\\w+" (lower-case s))))	2014-11-24 03:36:23	\N	0	1	2014-11-13 05:22:36	2014-11-13 05:22:36	129	word-count.clj
82	28	c033077d0be5f76afd77e88c	pending	go	bob	package bob\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\n// does any rune in the input match the predicate\nfunc any(predicate func(rune) bool, input string) bool {\n\treturn strings.IndexFunc(input, predicate) >= 0\n}\n\n// is string empty, or only spaces\nfunc isBlank(input string) bool {\n\treturn !any(func(ch rune) bool {\n\t\treturn !unicode.IsSpace(ch)\n\t}, input)\n}\n\n// are all letters in upper case\nfunc isShouting(input string) bool {\n\treturn any(unicode.IsUpper, input) && !any(unicode.IsLower, input)\n}\n\n// ends with question mark\nfunc isQuestion(input string) bool {\n\treturn strings.HasSuffix(input, "?")\n}\n\nfunc Hey(input string) string {\n\tswitch {\n\tcase isBlank(input):\n\t\treturn "Fine. Be that way!"\n\tcase isShouting(input):\n\t\treturn "Woah, chill out!"\n\tcase isQuestion(input):\n\t\treturn "Sure."\n\t}\n\treturn "Whatever."\n}	\N	\N	0	1	2014-08-16 15:42:30	2014-08-16 15:42:30	50	bob.go
83	28	b01af84663ff9514e0bbacf5	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn word-count [text]\n  (let [words (re-seq #"\\w+" text)\n        lower-words (map lower-case words)]\n    (frequencies lower-words)))	\N	\N	0	4	2014-09-30 21:20:17	2014-09-30 21:20:17	51	word-count.clj
84	28	27a084650f82c44759d07fe2	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn word-count [text]\n  (let [words (re-seq #"\\w+" text)]\n    (reduce (fn [summary word]\n              (let [lower-word (lower-case word)]\n                (if (contains? summary lower-word)\n                  (assoc summary lower-word (inc (summary lower-word)))\n                  (assoc summary lower-word 1))\n                )) {} words)))	\N	\N	0	2	2014-10-03 11:25:52	2014-10-03 11:25:52	51	word-count.clj
85	28	09fbe54382e840a2b47a436b	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn word-count [text]\n  (let [words (re-seq #"\\w+" text)]\n    (reduce (fn [summary word]\n              (let [lower-word (lower-case word)]\n                  (assoc summary lower-word (inc (summary lower-word 0)))\n                )) {} words)))	\N	\N	0	3	2014-10-19 10:32:10	2014-10-19 10:32:10	51	word-count.clj
86	28	498ed14e5edf546a2e8b4a34	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn word-count [text]\n  (let [words (re-seq #"\\w+" text)]\n    (reduce (fn [summary word]\n              (let [lower-word (lower-case word)]\n                (if (contains? summary lower-word)\n                  (assoc summary lower-word (+ 1 (summary lower-word)))\n                  (assoc summary lower-word 1))\n                )) {} words)))	\N	\N	0	1	2014-10-22 23:29:48	2014-10-22 23:29:48	51	word-count.clj
87	28	68cf38efa42e84b239e89408	done	clojure	word-count	(ns phrase\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn word-count [text]\n  (let [lower-text (lower-case text)\n        lower-words (re-seq #"\\w+" lower-text) ]\n    (frequencies lower-words)))	2014-11-15 01:04:44	\N	0	5	2014-11-08 11:57:24	2014-11-08 11:57:24	51	word-count.clj
88	28	2bec24d7bcf570c2c2f180f5	pending	haskell	kindergarten-garden	module Garden\n    ( Plant(..)\n    , garden\n    , defaultGarden\n    , lookupPlants\n    ) where\n\nimport Data.List (sort)\nimport Control.Arrow (second)\nimport qualified Data.Map as Map\n\ndata Plant = Grass | Clover | Radishes | Violets\n    deriving (Show, Eq)\n\ntype Name = String\nnewtype Garden = Garden (Map.Map Name [Plant])\n\nlookupPlants :: Name -> Garden -> [Plant]\nlookupPlants name (Garden g) = Map.findWithDefault [] name g\n\ngarden :: [Name] -> String -> Garden\ngarden children plants =\n    Garden . Map.fromListWith (flip (++)) . map (second (: [])) $\n    lines plants >>= zip owners . map readPlant\n    where\n        owners = sort children >>= replicate 2\n\nreadPlant :: Char -> Plant\nreadPlant 'G' = Grass\nreadPlant 'C' = Clover\nreadPlant 'R' = Radishes\nreadPlant 'V' = Violets\nreadPlant _   = error "Garden.readPlant: Incorrect plant"\n\ndefaultGarden :: String -> Garden\ndefaultGarden = garden\n    [ "Alice", "Bob", "Charlie", "David"\n    , "Eve", "Fred", "Ginny", "Harriet"\n    , "Ileana", "Joseph", "Kincaid", "Larry"\n    ]	\N	\N	0	1	2014-08-10 01:33:52	2014-08-10 01:33:52	52	kindergarten-garden.hs
89	28	f1a9c1e0d5dfe2b133fcd55b	done	ruby	leap	class Year < Struct.new(:year)\n\n  def leap?\n    return true if divisible_by? 400\n    return false if divisible_by? 100\n\n    divisible_by? 4\n  end\n\n  def divisible_by? number\n    year % number == 0\n  end\nend	2014-09-03 12:06:37	\N	0	1	2014-08-23 08:57:34	2014-08-23 08:57:34	53	leap.rb
90	29	0a237d6c743e415ee3e2f3b5	done	python	saddle-points	def rows_to_columns(matrix):\r\n\treturn [[row[n] for row in matrix] for n in range(len(matrix[0]))]\r\n\r\ndef max_in_row(matrix, rowNumber):\r\n\treturn max(matrix[rowNumber])\r\n\r\ndef min_in_column(matrix, colNumber):\r\n\treturn min(rows_to_columns(matrix)[colNumber])\r\n\t\r\ndef saddle_points(matrix):\r\n\tif len(matrix) == 0:\r\n\t\treturn set() #Empty matrix\r\n\t\t\r\n\tfirstRowLength = len(matrix[0])\r\n\t\r\n\tif firstRowLength == 0:\r\n\t\treturn set() #Empty matrix and or broken row\r\n\t\r\n\tfor row in matrix[1:]:\r\n\t\tif len(row) != firstRowLength:\r\n\t\t\traise ValueError('irregular matrix')\r\n\t\t\t\r\n\tsaddlePoints = []\r\n\t\r\n\tfor y, row in enumerate(matrix):\r\n\t\tfor x, n in enumerate(row):\r\n\t\t\tif max_in_row(matrix, y) == n and min_in_column(matrix, x) == n:\r\n\t\t\t\tsaddlePoints.append((y, x))\r\n\t\t\t\t\r\n\treturn set(saddlePoints)	2014-09-11 03:35:17	\N	0	1	2014-09-01 12:23:18	2014-09-01 12:23:18	54	saddle_points.py
91	31	9308d5d950830ee7dae4bded	pending	ruby	simple-linked-list	class Element\n  attr_reader :datum, :next\n\n  def initialize(datum, next_element)\n    @datum, @next = datum, next_element\n  end\n\n  def to_a\n    [datum].push *self.next.to_a\n  end\n\n\n  def reverse\n    self.class.create_multiple(to_a)\n  end\n\n  class << self\n    def to_a(element)\n      element.to_a\n    end\n\n    def from_a(list)\n      create_multiple(list.to_a.reverse)\n    end\n\n    def create_multiple(elements)\n      elements.inject(nil) do |head, datum| \n        new(datum, head)\n      end\n    end\n  end\nend	\N	\N	0	1	2014-06-07 04:06:55	2014-06-07 04:06:55	55	linked_list.rb
92	33	d509c61ab4c16bf6c8a8cbfd	superseded	coffeescript	bob	class Bob\n  hey: (input) ->\n    switch\n      when isSilence(input)  then "Fine. Be that way!"\n      when isShout(input)    then "Woah, chill out!"\n      when isQuestion(input) then "Sure."\n      else                        "Whatever."\n\nisSilence  = (input) -> !input.trim()\nisShout    = (input) -> input.toUpperCase() == input\nisQuestion = (input) -> input.slice(-1) == "?"\n\nmodule.exports = Bob	\N	\N	0	1	2014-11-19 16:38:27	2014-11-19 16:38:27	56	bob.coffee
93	33	b6d8c370c0580fae0bec9416	superseded	coffeescript	bob	class Bob\n  hey: (input) ->\n    switch\n      when isSilence(input)  then "Fine. Be that way!"\n      when isShout(input)    then "Woah, chill out!"\n      when isQuestion(input) then "Sure."\n      else                        "Whatever."\n\n  isSilence  = (input) -> !input.trim()\n  isShout    = (input) -> input.toUpperCase() == input\n  isQuestion = (input) -> input.slice(-1) == "?"\n\nmodule.exports = Bob	\N	\N	0	2	2014-11-21 11:45:01	2014-11-21 11:45:01	56	bob.coffee
94	33	41f3a2ea269971b5da6c664a	pending	coffeescript	bob	class Bob\n  hey: (input) ->\n    switch\n      when isSilence(input)  then "Fine. Be that way!"\n      when isShout(input)    then "Woah, chill out!"\n      when isQuestion(input) then "Sure."\n      else                        "Whatever."\n\n  isSilence  = (input) -> input.trim() is ""\n  isShout    = (input) -> input.toUpperCase() is input\n  isQuestion = (input) -> input.slice(-1) is "?"\n\nmodule.exports = Bob	\N	\N	0	4	2014-11-27 07:52:09	2014-11-27 07:52:09	56	bob.coffee
95	33	c93a788dcba5a5f643bcbbc9	superseded	coffeescript	bob	class Bob\n  hey: (input) ->\n    switch\n      when isSilence(input)  then "Fine. Be that way!"\n      when isShout(input)    then "Woah, chill out!"\n      when isQuestion(input) then "Sure."\n      else                        "Whatever."\n\n  isSilence  = (input) -> not input.trim()\n  isShout    = (input) -> input.toUpperCase() is input\n  isQuestion = (input) -> input.slice(-1) is "?"\n\nmodule.exports = Bob	\N	\N	0	3	2014-11-27 14:05:14	2014-11-27 14:05:14	56	bob.coffee
96	33	973e2fc748a3917e7f230e04	done	ruby	sieve	class Sieve\n  def initialize(number)\n    @number = number\n  end\n  def primes\n    numbers = (2..@number).to_a\n    primes = (2..@number).to_a\n    numbers.each do |num|\n      break unless primes.include?(num)\n      primes.each do |prime|\n        puts "num: #{num}, prime: #{prime}"\n        if prime != num && prime % num == 0\n          puts "deleting prime #{prime} now!"\n          primes.delete(prime)\n        end\n      end\n    end\n    primes\n  end\nend	2014-11-29 15:27:01.197576	\N	0	1	2014-11-22 01:15:35	2014-11-22 01:15:35	57	sieve.rb
97	33	2dfca5ab00a205da48f19bf9	superseded	python	leap	def is_leap_year(year):\n    reply = False\n\n    try:\n        int(year)\n    except ValueError:\n        return False\n\n    if year % 4 == 0:\n        reply = True\n        if year % 100 == 0:\n            reply = False\n            if year % 400 == 0:\n                reply = True\n\n    return reply	\N	\N	0	1	2014-11-20 20:53:15	2014-11-20 20:53:15	58	year.py
98	33	1f61a388f42d1b24476771f7	done	python	leap	def is_leap_year(year):\n    reply = False\n\n    try:\n        int(year)\n    except ValueError:\n        pass\n    else:\n        if year % 4 == 0:\n            reply = True\n            if year % 100 == 0:\n                reply = False\n                if year % 400 == 0:\n                    reply = True\n\n    return reply	2014-11-29 15:27:01.225616	\N	0	2	2014-11-23 12:41:18	2014-11-23 12:41:18	58	year.py
99	33	a0f572f4abcbbee71a2a1715	superseded	clojure	bob	(ns bob)\n\n(defn response-for [str]\n  (cond\n   (re-matches #".*\\?" str) "Sure."\n   (clojure.string/blank? str) "Fine, be that way."\n   (= str (clojure.string/upper-case str))\n   "Woah, chill out!"\n   :else "Whatever."))	\N	\N	0	1	2014-11-23 10:23:50	2014-11-23 10:23:50	59	bob.clj
100	33	b0142451660a04a84785436c	done	clojure	bob	(ns bob)\n\n(defn ^:private question? [str]\n  (re-matches #".*\\?" str))\n\n(defn ^:private silence? [str]\n  (clojure.string/blank? str))\n\n(defn ^:private shout? [str]\n  (= str (clojure.string/upper-case str)))\n\n(defn response-for [str]\n  (cond\n   (silence? str) "Fine, be that way."\n   (question? str) "Sure."\n   (shout? str) "Woah, chill out!"\n   :else "Whatever."))	2014-11-26 12:44:41	\N	0	2	2014-11-26 05:41:50	2014-11-26 05:41:50	59	bob.clj
101	33	bdeff00a68d0f40762730f90	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    divisible(year, 4) && (!divisible(year, 100) || divisible(year, 400))\n  end\n\n  private\n\n  def self.divisible(year, num)\n    year % num == 0\n  end\nend	\N	\N	0	1	2014-11-19 05:00:40	2014-11-19 05:00:40	60	year.rb
102	33	0c7e1062bc10e3c0c77d9188	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    case (y = Integer(year))\n    when divisible_by?(400) then true\n    when divisible_by?(100) then false\n    else divisible_by?(4).(y)\n    end\n  end\n\n  def self.divisible_by?(number)\n    lambda { |year| year % number == 0 }\n  end\nend	\N	\N	0	2	2014-11-27 11:35:56	2014-11-27 11:35:56	60	year.rb
103	33	4f23ff5baedc6634c0f3d6d5	done	ruby	leap	module Year\n  extend self\n\n  def leap?(year)\n    case (y = Integer(year))\n    when divisible_by?(400) then true\n    when divisible_by?(100) then false\n    else divisible_by?(4).(y)\n    end\n  end\n\n  def divisible_by?(divisor)\n    lambda { |dividend| (dividend % divisor).zero? }\n  end\nend	2014-11-29 15:27:01.337803	\N	0	3	2014-11-28 05:59:27	2014-11-28 05:59:27	60	year.rb
104	38	36eda2edb09c7672f5793370	pending	ruby	prime-factors	class PrimeFactors\n\n  def self.for(num)\n    case num\n    when 0, 1\n      []\n    else\n      a_factor = (2..num/2).find { |n| (num % n).zero? }\n      if a_factor\n        [a_factor, *self.for(num/a_factor)]\n      else\n        [num]\n      end\n    end\n  end\n\nend	\N	\N	0	1	2014-07-04 18:15:15	2014-07-04 18:15:15	61	prime_factors.rb
105	40	de20bcfe676389606d74f8f3	pending	ruby	roman-numerals	class Fixnum\n\n\tdef to_roman\n\t\tdigits = self.to_s.split('').map(&:to_i)\n\t\tresult = []\n\n\t\tcase digits.length\n\t\twhen 1\n\t\t\tfirst_digit_value(result, digits[0])\n\t\twhen 2\n\t\t\tsecond_digit_value(result, digits[0])\n\t\t\tfirst_digit_value(result, digits[1])\n\t\twhen 3\n\t\t\tthird_digit_value(result, digits[0])\n\t\t\tsecond_digit_value(result, digits[1])\n\t\t\tfirst_digit_value(result, digits[2])\t\t\t\n\t\twhen 4\n\t\t\tfourth_digit_value(result, digits[0])\n\t\t\tthird_digit_value(result, digits[1])\n\t\t\tsecond_digit_value(result, digits[2])\n\t\t\tfirst_digit_value(result, digits[3])\t\t\t\t\n\t\tend\n\t\tresult.join\n\tend\n\n\tprivate\n\n\tdef first_digit_value(result, digit)\n\t\tcase digit\n\t\twhen 1\n\t\t\tresult << 'I'\n\t\twhen 2\n\t\t\tresult << 'II'\n\t\twhen 3\n\t\t\tresult << 'III'\n\t\twhen 4\n\t\t\tresult << 'IV'\n\t\twhen 5\n\t\t\tresult << 'V'\n\t\twhen 6\n\t\t\tresult << 'VI'\n\t\twhen 7\n\t\t\tresult << 'VII'\n\t\twhen 8\n\t\t\tresult << 'VIII'\n\t\twhen 9\n\t\t\tresult << 'IX'\n\t\tend\n\t\tresult\n\tend\n\n\tdef second_digit_value(result, digit)\n\t\tcase digit\n\t\twhen 1\n\t\t\tresult << 'X'\n\t\twhen 2\n\t\t\tresult << 'XX'\n\t\twhen 3\n\t\t\tresult << 'XXX'\n\t\twhen 4\n\t\t\tresult << 'XL'\n\t\twhen 5\n\t\t\tresult << 'L'\n\t\twhen 6\n\t\t\tresult << 'LX'\n\t\twhen 7\n\t\t\tresult << 'LXX'\n\t\twhen 8\n\t\t\tresult << 'LXXX'\n\t\twhen 9\n\t\t\tresult << 'XC'\n\t\tend\n\t\tresult\n\tend\n\n\tdef third_digit_value(result, digit)\n\t\tcase digit\n\t\twhen 1\n\t\t\tresult << 'C'\n\t\twhen 2\n\t\t\tresult << 'CC'\n\t\twhen 3\n\t\t\tresult << 'CCC'\n\t\twhen 4\n\t\t\tresult << 'CD'\n\t\twhen 5\n\t\t\tresult << 'D'\n\t\twhen 6\n\t\t\tresult << 'DC'\n\t\twhen 7\n\t\t\tresult << 'DCC'\n\t\twhen 8\n\t\t\tresult << 'DCCC'\n\t\twhen 9 \n\t\t\tresult << 'CM'\n\t\tend\n\t\tresult\n\tend\n\n\tdef fourth_digit_value(result, digit)\n\t\tcase digit\n\t\twhen 1\n\t\t\tresult << 'M'\n\t\twhen 2 \n\t\t\tresult << 'MM'\n\t\twhen 3\n\t\t\tresult << 'MMM'\n\t\tend\n\t\tresult\n\tend\n\nend	\N	\N	0	1	2014-07-27 02:58:17	2014-07-27 02:58:17	62	roman.rb
108	40	9fc697c8a50e87bf3fca25b1	superseded	python	word-count	#!/usr/bin/python\n\nimport string\n\ndef word_count(phrase):\n    phrase = phrase.lower()\n    phrase = phrase.translate(None, string.punctuation)\n    word_counts = {}\n    for word in phrase.split():\n        if word not in word_counts.keys():\n            word_counts[word] = 1\n        else:\n            word_counts[word] += 1\n    return  word_counts	\N	\N	0	2	2014-09-30 12:14:45	2014-09-30 12:14:45	64	wordcount.py
109	40	fda29cd9ee5442b8d8609a4e	done	python	word-count	#!/usr/bin/python\n\nimport string\n\ndef word_count(phrase):\n    phrase = phrase.translate(None, string.punctuation).lower()\n    word_counts = {}\n    for word in phrase.split():\n        if word not in word_counts.keys():\n            word_counts[word] = 1\n        else:\n            word_counts[word] += 1\n    return  word_counts	2014-11-20 15:36:32	\N	0	3	2014-11-18 05:09:56	2014-11-18 05:09:56	64	wordcount.py
110	44	e3c8fee473a415bb15152239	done	elixir	beer-song	defmodule Beer do\n  import String, only: [capitalize: 1]\n  import Enum, only: [join: 2, map_join: 3]\n\n  def sing(first) do\n    sing(first, 0)\n  end\n  def sing(first, last) do\n    "#{map_join first..last, '\\n', fn(i) -> verse(i) end}\\n"\n  end\n\n  def verse(bottles) do\n    <<first_line(bottles) :: binary, second_line(bottles) :: binary>>\n  end\n\n  defp first_line(bottle_count) do\n    how_many_of_what = how_many_of_what(bottle_count)\n    "#{how_many_of_what} on the wall, #{how_many_of_what}.\\n" |> capitalize\n  end\n\n  defp second_line(bottle_count) do\n    how_many_of_what = how_many_of_what(bottle_count-1)\n    "#{what_do(bottle_count)}, #{how_many_of_what} on the wall.\\n" |> capitalize\n  end\n\n  defp how_many_of_what(bottle_count) do\n    "#{how_many(bottle_count)} #{of_what}"\n  end\n\n  defp what_do(0) do\n    "Go to the store and buy some more"\n  end\n\n  defp what_do(bottle_count) do\n    "take #{pronoun(bottle_count)} down and pass it around"\n  end\n\n  defp pronoun(1), do: "it"\n  defp pronoun(_), do: "one"\n\n  defp how_many(1) do\n    "1 bottle"\n  end\n  defp how_many(0) do\n    "no more bottles"\n  end\n  defp how_many(-1) do\n    how_many(99)\n  end\n  defp how_many(bottle_count) do\n    "#{bottle_count} bottles"\n  end\n\n  defp of_what, do: 'of beer'\nend	2014-11-29 15:27:01.463986	\N	0	1	2014-11-24 06:08:07	2014-11-24 06:08:07	65	beer-song.exs
111	44	0e29ff39cada176657486dec	done	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    normal_leap_year? && leap_century?\n  end\n\n  private\n  def normal_leap_year?\n    year % 4 == 0\n  end\n\n  def leap_century?\n    !normal_century? || exceptional_century?\n  end\n\n  def normal_century?\n    year % 100 == 0\n  end\n\n  def exceptional_century?\n    year % 400 == 0\n  end\nend	2014-11-27 03:30:59	\N	0	2	2014-11-25 16:53:36	2014-11-25 16:53:36	66	year.rb
112	44	4ceb7486d57a5c5a67b3d676	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by_four? && leap_century?\n  end\n\n  private\n  def divisible_by_four?\n    year % 4 == 0\n  end\n\n  def leap_century?\n    !normal_century? || exceptional_century?\n  end\n\n  def normal_century?\n    year % 100 == 0\n  end\n\n  def exceptional_century?\n    year % 400 == 0\n  end\nend	\N	\N	0	1	2014-11-26 00:48:02	2014-11-26 00:48:02	66	leap.rb
113	44	aec8533976dc6188b7c8322e	pending	haskell	anagram	module Anagram where\n\nimport Data.List (intersectBy, permutations)\nimport Data.Char (toLower)\n\n-- first try (will be refactored)\nanagramsFor :: [Char] -> [[Char]] -> [[Char]]\nanagramsFor word list = intersectBy cmpF list (anagrams word)\n  where\n    anagrams = strListToLower. withoutInitial . permutations\n    strToLower = map toLower\n    cmpF xs ys = strToLower(xs) == strToLower(ys)\n    withoutInitial = filter(/= word)\n    strListToLower = map strToLower	\N	\N	0	2	2014-11-25 02:46:30	2014-11-25 02:46:30	67	Anagram.hs
114	44	ce8e897ed0c1773f0cf4d487	superseded	haskell	anagram	module Anagram where\n\nimport Data.List (intersectBy, permutations)\nimport Data.Char (toLower)\n\n-- first try (will be refactored)\nanagramsFor :: [Char] -> [[Char]] -> [[Char]]\nanagramsFor word list = intersectBy cmpF list (strListToLower. withoutInitial . permutations $ word)\n  where\n    strToLower = map toLower\n    cmpF xs ys = strToLower(xs) == strToLower(ys)\n    withoutInitial = filter(/= word)\n    strListToLower = map strToLower	\N	\N	0	1	2014-11-26 03:00:18	2014-11-26 03:00:18	67	Anagram.hs
115	44	27536845fde8e600b8f55b4e	superseded	clojure	bob	(ns bob)\n\n(defn yelling? [str]\n  (= (clojure.string/upper-case str) str))\n\n(defn question? [str]\n  (.endsWith str "?"))\n\n(defn response-for [str]\n  (cond\n    (empty? str) "Fine, be that way."\n    (yelling? str) "Woah, chill out!"\n    (question? str) "Sure."\n    :else "Whatever."))	\N	\N	0	2	2014-11-24 13:20:49	2014-11-24 13:20:49	68	bob.clj
116	44	74c03407aa8dab0338bb6b04	superseded	clojure	bob	(ns bob)\n\n(defn yelling? [str]\n  (= (clojure.string/upper-case str) str))\n\n(defn response-for [str]\n  (cond\n    (empty? str) "Fine, be that way."\n    (yelling? str) "Woah, chill out!"\n    (.endsWith str "?") "Sure."\n    :else "Whatever."))	\N	\N	0	1	2014-11-25 08:46:44	2014-11-25 08:46:44	68	bob.clj
117	44	ba3c7a7c14742247be906715	done	clojure	bob	(ns bob)\n\n(defn- nothing? [str]\n  (empty? str))\n\n(defn- yelling? [str]\n  (= (clojure.string/upper-case str) str))\n\n(defn- question? [str]\n  (.endsWith str "?"))\n\n(defn response-for [str]\n  (cond\n    (nothing? str) "Fine, be that way."\n    (yelling? str) "Woah, chill out!"\n    (question? str) "Sure."\n    :else "Whatever."))	2014-11-29 15:27:01.60221	\N	0	3	2014-11-26 20:32:55	2014-11-26 20:32:55	68	bob.clj
118	44	fc4c9e83408688a001fa47d2	done	ruby	etl	class ETL\n\n  def self.transform(args)\n    hash = {}\n    args.each do |score, letters|\n      letters.each do |l|\n        hash[l.downcase] = score\n      end\n    end\n    hash\n  end\n\nend	2014-11-29 15:27:01.645471	\N	0	1	2014-11-28 01:54:00	2014-11-28 01:54:00	69	etl.rb
119	44	c5971865871167e0d3b07f8d	superseded	ruby	house	class House\n\n  PHRASES =  [['house', 'Jack built'],\n              ['malt', 'lay in'],\n              ['rat', 'ate'],\n              ['cat', 'killed'],\n              ['dog', 'worried'],\n              ['cow with the crumpled horn', 'tossed'],\n              ['maiden all forlorn', 'milked'],\n              ['man all tattered and torn', 'kissed'],\n              ['priest all shaven and shorn', 'married'],\n              ['rooster that crowed in the morn', 'woke'],\n              ['farmer sowing his corn', 'kept'],\n              ['horse and the hound and the horn', 'belonged to']]\n\n  def verses(first, last)\n    (first..last).map {|n| verse(n)}.join("\\n") << "\\n"\n  end\n\n  def verse(n)\n    "This is " << PHRASES.take(n).reverse.map {|a, b| "the #{a} that #{b}"}.join(" ") << ".\\n"\n  end\n\nend	\N	\N	0	1	2014-11-26 03:17:12	2014-11-26 03:17:12	70	house.rb
120	44	fd04127695be3c302b31f465	done	ruby	house	class House\n\n  PHRASES =  [['house', 'Jack built'],\n              ['malt', 'lay in'],\n              ['rat', 'ate'],\n              ['cat', 'killed'],\n              ['dog', 'worried'],\n              ['cow with the crumpled horn', 'tossed'],\n              ['maiden all forlorn', 'milked'],\n              ['man all tattered and torn', 'kissed'],\n              ['priest all shaven and shorn', 'married'],\n              ['rooster that crowed in the morn', 'woke'],\n              ['farmer sowing his corn', 'kept'],\n              ['horse and the hound and the horn', 'belonged to']]\n\n  def verses(first, last)\n    (first..last).map {|n| verse(n)}.join("\\n") << "\\n"\n  end\n\n  def verse(n)\n    "This is " << PHRASES.take(n).reverse.map {|noun, verb| build_line(noun, verb)}.join(" ") << ".\\n"\n  end\n\n  private\n  def build_line(noun, verb)\n    "the #{noun} that #{verb}"\n  end\nend	2014-11-29 15:27:01.678783	\N	0	2	2014-11-26 23:36:33	2014-11-26 23:36:33	70	house.rb
121	44	eb06f76544392ac93dea9f00	done	python	leap	def is_leap(year):\n\tif year % 400 ==0:\n\t\treturn True\n\tif year % 100 ==0:\n\t\treturn False\n\tif year % 4 ==0:\n\t\treturn True\n\treturn False	2014-11-29 15:27:01.709472	\N	0	1	2014-11-24 01:47:26	2014-11-24 01:47:26	71	leap.py
122	44	cc01ed9c04ed2a7922b7d5af	done	go	leap	package leap\n\n// IsLeapYear returns true if the given year is a leap year\nfunc IsLeapYear(year int) bool {\n\treturn ((year%4 == 0) && (year%100 != 0)) || (year%400 == 0)\n}	2014-11-27 06:23:49	\N	0	1	2014-11-25 22:31:45	2014-11-25 22:31:45	72	leap.go
123	44	eefee83a88353b95dddeeb45	superseded	clojure	phone-number	(ns phone)\n\n(defn only_digit\n  [raw_string]\n  (clojure.string/replace raw_string #"\\D" ""))\n\n(defn number\n  [raw_string]\n  (cond\n   (< (count (only_digit raw_string)) 10) "0000000000"\n   (and (= (count (only_digit raw_string)) 11)\n           (.startsWith (only_digit raw_string) "1"))(clojure.string/join (drop 1 (only_digit raw_string)))\n   (and (= (count (only_digit raw_string)) 11)(.startsWith raw_string "2")) "0000000000"\n   :else (only_digit raw_string)))\n\n(defn drop_and_show\n  [begin end number]\n  (clojure.string/join (drop end (take begin number))))\n\n(defn area-code\n  [raw_string]\n  (clojure.string/join (drop_and_show 3 0 (number raw_string))))\n\n(defn pretty-print\n  [phone_number]\n  (format "(%s) %s-%s" (drop_and_show 3 0 (number phone_number))\n          (drop_and_show 6 3 (number phone_number))\n          (drop_and_show 10 6 (number phone_number))))	\N	\N	0	2	2014-11-25 23:45:49	2014-11-25 23:45:49	73	phone.clj
124	44	93c2975a0e0089ff5f0542f6	superseded	clojure	phone-number	(ns phone)\n\n(defn only_digit\n  [raw_string]\n  (clojure.string/replace raw_string #"\\D" ""))\n\n(defn number\n  [raw_string]\n  (cond\n   (< (count (only_digit raw_string)) 10) "0000000000"\n   (and (= (count (only_digit raw_string)) 11)\n           (.startsWith (only_digit raw_string) "1"))(clojure.string/join (drop 1 (only_digit raw_string)))\n   (and (= (count (only_digit raw_string)) 11)(.startsWith raw_string "2")) "0000000000"\n   :else (only_digit raw_string)))\n\n(defn drop_and_show\n  [begin end number]\n  (clojure.string/join (drop end (take begin number))))\n\n(defn area-code\n  [raw_string]\n  (clojure.string/join (take 3 raw_string)))\n\n(defn pretty-print\n  [phone_number]\n  (format "(%s) %s-%s" (drop_and_show 3 0 (number phone_number))\n          (drop_and_show 6 3 (number phone_number))\n          (drop_and_show 10 6 (number phone_number))))	\N	\N	0	1	2014-11-26 16:19:57	2014-11-26 16:19:57	73	phone.clj
125	44	e787248926a1297ad8fff914	superseded	clojure	phone-number	(ns phone\n  (:require [clojure.string :as str]))\n\n(defn only_digit\n  [raw_string]\n  (str/replace raw_string #"\\D" ""))\n\n(defn number_length\n  [phone_number]\n  (->> (only_digit phone_number)\n       (count)))\n\n(defn convert_number\n  [raw_number]\n  (cond\n   (< (number_length raw_number) 10) "0000000000"\n   (and (= (number_length raw_number) 11)\n        (.startsWith (only_digit raw_number) "1"))(->> (only_digit raw_number)\n                                                       (drop 1)\n                                                       (str/join))\n   (and (= (number_length raw_number) 11)\n        (.startsWith raw_number "2")) "0000000000"\n   :else (only_digit raw_number)))\n\n(defn number\n  [raw_string]\n  (convert_number raw_string))\n\n(defn drop_and_show\n  [begin end number]\n  (->> (take begin number)\n       (drop end)\n       (str/join)))\n\n(defn area-code\n  [raw_string]\n  (->> (number raw_string)\n       (drop_and_show 3 0)))\n\n(defn pretty-print\n  [phone_number]\n  (format "(%s) %s-%s" (drop_and_show 3 0 (convert_number phone_number))\n          (drop_and_show 6 3 (convert_number phone_number))\n          (drop_and_show 10 6 (convert_number phone_number))))	\N	\N	0	3	2014-11-26 20:27:57	2014-11-26 20:27:57	73	phone.clj
126	44	b44d52bd48fe8d7efe82f953	superseded	clojure	phone-number	(ns phone\n  (:require [clojure.string :as str]))\n\n(defn only_digit\n  [raw_string]\n  (str/replace raw_string #"\\D" ""))\n\n(defn number_length\n  [phone_number]\n  (->> (only_digit phone_number)\n       (count)))\n\n(defn convert_number\n  [raw_number]\n  (cond\n   (< (number_length raw_number) 10) "0000000000"\n   (and (= (number_length raw_number) 11)\n        (.startsWith (only_digit raw_number) "1"))(->> (only_digit raw_number)\n                                                       (drop 1)\n                                                       (str/join))\n   (and (= (number_length raw_number) 11)\n        (.startsWith raw_number "2")) "0000000000"\n   :else (only_digit raw_number)))\n\n(defn number\n  [raw_string]\n  (convert_number raw_string))\n\n(defn drop_and_show\n  [begin end number]\n  (->> (take begin number)\n       (drop end)\n       (str/join)))\n\n(defn area-code\n  [raw_string]\n  (->> (convert_number raw_string)\n       (drop_and_show 3 0)))\n\n(defn pretty-print\n  [phone_number]\n  (format "(%s) %s-%s" (drop_and_show 3 0 (convert_number phone_number))\n          (drop_and_show 6 3 (convert_number phone_number))\n          (drop_and_show 10 6 (convert_number phone_number))))	\N	\N	0	4	2014-11-27 15:20:17	2014-11-27 15:20:17	73	phone.clj
135	44	0979a2a65f5642d9b302cd2e	done	objective-c	bob	#include "Bob.h"\n\n\n@implementation Bob\n\n-(BOOL) hasLetter:(NSString *)string {\n    return [string rangeOfCharacterFromSet: [NSCharacterSet letterCharacterSet]].location != NSNotFound;\n}\n\n-(NSString *)hey:(NSString *)input\n{\n    NSString *strippedString = [input stringByTrimmingCharactersInSet: [NSCharacterSet whitespaceCharacterSet]];\n    NSUInteger length = [strippedString length];\n\n    if (length == 0) {\n        return @"Fine, be that way.";\n    } else if ([self hasLetter: strippedString] &&\n               [strippedString isEqualToString: [strippedString uppercaseString]]) {\n        return @"Woah, chill out!";\n    } else if ([strippedString characterAtIndex: length-1] == '?') {\n        return @"Sure.";\n    }\n\n    return @"Whatever.";\n}\n\n@end	2014-11-29 15:27:02.025465	\N	0	1	2014-11-27 11:31:00	2014-11-27 11:31:00	77	Bob.m
231	20	3f39d3bcc4a5c4c6c9c2bb9c	done	ruby	gigasecond	require 'date'\n\nclass Gigasecond\n\n  def initialize(startdate)\n    @starting_time = startdate.to_time\n  end\n\n  def date\n    (@starting_time + 10**9).to_date\n  end\n\nend	2014-11-25 16:24:56	\N	0	1	2014-11-22 10:22:55	2014-11-22 10:22:55	123	gigasecond.rb
127	44	d30074786f47495f11457ba4	superseded	clojure	phone-number	(ns phone\n  (:require [clojure.string :as str]))\n\n(defn only_digit\n  [raw_string]\n  (str/replace raw_string #"\\D" ""))\n\n(defn number_length\n  [phone_number]\n  (->> (only_digit phone_number)\n       (count)))\n\n(defn convert_number\n  [raw_number]\n  (let [digit_number (only_digit raw_number)]\n  (cond\n   (< (number_length digit_number) 10) "0000000000"\n   (and (= (number_length digit_number) 11)\n        (.startsWith digit_number "1"))(->> digit_number\n                                            (drop 1)\n                                            (str/join))\n   (and (= (number_length digit_number) 11)\n        (.startsWith digit_number "2")) "0000000000"\n   :else (only_digit digit_number))))\n\n(defn number\n  [raw_string]\n  (convert_number raw_string))\n\n(defn drop_and_show\n  [begin end number]\n  (->> (take begin number)\n       (drop end)\n       (str/join)))\n\n(defn area-code\n  [raw_string]\n  (->> (convert_number raw_string)\n       (drop_and_show 3 0)))\n\n(defn pretty-print\n  [phone_number]\n  (format "(%s) %s-%s" (drop_and_show 3 0 (convert_number phone_number))\n          (drop_and_show 6 3 (convert_number phone_number))\n          (drop_and_show 10 6 (convert_number phone_number))))	\N	\N	0	5	2014-11-28 03:48:48	2014-11-28 03:48:48	73	phone.clj
128	44	fec7e2ffa90daa9b3ef7050c	superseded	clojure	phone-number	(ns phone\n  (:require [clojure.string :as str]))\n\n(defn- only_digit\n  [raw_string]\n  (str/replace raw_string #"\\D" ""))\n\n(defn- number_length\n  [phone_number]\n  (->> (only_digit phone_number)\n       (count)))\n\n(defn- convert_number\n  [raw_number]\n  (let [digit_number (only_digit raw_number)]\n  (cond\n   (< (number_length digit_number) 10) "0000000000"\n   (and (= (number_length digit_number) 11)\n        (.startsWith digit_number "1"))(->> digit_number\n                                            (drop 1)\n                                            (str/join))\n   (and (= (number_length digit_number) 11)\n        (.startsWith digit_number "2")) "0000000000"\n   :else (only_digit digit_number))))\n\n(defn number\n  [raw_string]\n  (convert_number raw_string))\n\n(defn- drop_and_show\n  [begin end number]\n  (->> (take begin number)\n       (drop end)\n       (str/join)))\n\n(defn area-code\n  [raw_string]\n  (->> (convert_number raw_string)\n       (drop_and_show 3 0)))\n\n(defn pretty-print\n  [phone_number]\n  (format "(%s) %s-%s" (drop_and_show 3 0 (convert_number phone_number))\n          (drop_and_show 6 3 (convert_number phone_number))\n          (drop_and_show 10 6 (convert_number phone_number))))	\N	\N	0	6	2014-11-28 04:46:36	2014-11-28 04:46:36	73	phone.clj
129	44	0906a59568a96cbcb67cf86b	done	clojure	phone-number	(ns phone\n  (:require [clojure.string :as str]))\n\n(defn- only_digit\n  [raw_string]\n  (str/replace raw_string #"\\D" ""))\n\n(defn- number_length\n  [phone_number]\n  (->> (only_digit phone_number)\n       (count)))\n\n(defn number\n  [raw_number]\n  (let [digit_number (only_digit raw_number)]\n  (cond\n   (< (number_length digit_number) 10) "0000000000"\n   (and (= (number_length digit_number) 11)\n        (.startsWith digit_number "1"))(->> digit_number\n                                            (drop 1)\n                                            (str/join))\n   (and (= (number_length digit_number) 11)\n        (.startsWith digit_number "2")) "0000000000"\n   :else digit_number)))\n\n(defn- drop_and_show [begin end number]\n    (->>  number (take begin) (drop end) str/join))\n\n(defn area-code\n  [raw_string]\n  (->> (number raw_string)\n       (drop_and_show 3 0)))\n\n(defn pretty-print\n  [phone_number]\n  (format "(%s) %s-%s" (drop_and_show 3 0 (number phone_number))\n          (drop_and_show 6 3 (number phone_number))\n          (drop_and_show 10 6 (number phone_number))))	2014-11-29 15:27:01.860082	\N	0	7	2014-11-28 08:26:04	2014-11-28 08:26:04	73	phone.clj
130	44	799ca6fe5e319dc5182018e2	superseded	ruby	simple-cipher	class Cipher\n  attr_reader :key\n  ALPHABET = ('a'..'z').to_a\n\n  def initialize(key = ('a' * 20))\n    fail ArgumentError if key.empty? || key.match(/[A-Z0-9]/)\n    @key = key\n  end\n\n  def encode str\n    substitute str\n  end\n\n  def decode str\n    substitute str, reverse: true\n  end\n\n  private\n\n  def substitute str, options = {}\n    str.chars.zip(key.chars).map do |str_c, key_c|\n      cipher = ALPHABET.rotate(ALPHABET.index(key_c))\n      tables = [cipher, ALPHABET]\n      tables.reverse! if options[:reverse]\n      tables[0][tables[1].index(str_c)]\n    end.join\n  end\nend	\N	\N	0	1	2014-11-24 10:39:34	2014-11-24 10:39:34	74	cipher.rb
131	44	f063de6a5f8b831220fd13ec	pending	ruby	simple-cipher	class Cipher\n  attr_reader :key\n  ALPHABET = *'a'..'z'\n\n  def initialize(key = ('a' * 20))\n    fail ArgumentError if key.empty? || key.match(/[A-Z0-9]/)\n    @key = key\n  end\n\n  def encode str\n    substitute str\n  end\n\n  def decode str\n    substitute str, reverse: true\n  end\n\n  private\n\n  def substitute str, options = {}\n    str.chars.zip(key.chars).map do |str_c, key_c|\n      cipher = ALPHABET.rotate(ALPHABET.index key_c)\n      tables = [cipher, ALPHABET]\n      tables.reverse! if options[:reverse]\n      tables[0][tables[1].index str_c]\n    end.join\n  end\nend	\N	\N	0	2	2014-11-24 19:17:37	2014-11-24 19:17:37	74	cipher.rb
132	44	2eafce40a69b927f1f8cd1fb	pending	coffeescript	accumulate	Array::accumulate = (fn) -> fn(x) for x in @	\N	\N	0	1	2014-11-28 02:42:03	2014-11-28 02:42:03	75	accumulate.coffee
133	44	73fe022ce80bd4beb9e296e2	done	ruby	binary	class Binary\n  def initialize(string)\n    @string = string\n  end\n\n  def to_decimal\n    return 0 unless valid?\n    @string.chars.inject(0) do |sum, char|\n      sum *= 2\n      sum + char.to_i\n    end\n  end\n\n  private\n\n  def valid?\n    @string =~ /\\A[01]+\\z/\n  end\nend	2014-11-29 15:27:01.971886	\N	0	2	2014-11-24 11:27:29	2014-11-24 11:27:29	76	binary.rb
134	44	0f284f2aa5cc5d6323fe8295	superseded	ruby	binary	class Binary\n  def initialize(string)\n    @string = string\n  end\n\n  def to_decimal\n    @decimal ||= convert_to_decimal\n  end\n\n  private\n\n  def convert_to_decimal\n    return 0 unless valid?\n    sum = 0\n    @string.chars.reverse.each_with_index do |digit, index|\n      sum += digit.to_i * 2**index\n    end\n    sum\n  end\n\n  def valid?\n    @valid ||= @string.match(/\\A[01]+\\z/)\n  end\nend	\N	\N	0	1	2014-11-25 22:52:23	2014-11-25 22:52:23	76	binary.rb
136	44	cd19f192765cad1b441a22c5	done	ruby	hamming	class Hamming\n\tdef self.compute(ham, cheese)\n\t\tham = ham.split("")\n\t\tcheese = cheese.split("")\n\t\terror_count = 0\n\t\tindex = []\n\t\twhile ham.length > cheese.length\n\t\t\tham.pop\n\t\tend\n\t\twhile cheese.length > ham.length\n\t\t\tcheese.pop\n\t\tend\n\t\tham.each_index do |i|\n\t\t\tindex << i\n\t\tend\n\n\t\tindex.each do |i|\n\t\t\tif ham[i] != cheese[i]\n\t\t\t\terror_count += 1\n\t\t\tend\n\t\tend\n\t\treturn error_count\n\t\t\t\n\tend\nend	2014-11-28 03:46:13	\N	0	1	2014-11-24 03:10:55	2014-11-24 03:10:55	78	hamming.rb
137	44	8a9bc445bc38879ecf41346d	pending	javascript	anagram	function Anagram(word) {\n    "use strict";\n    \n    var normalizedWord = normalize(word);\n\n    function isAnagram(candidate) {\n        return normalize(candidate) === normalizedWord;\n    }\n\n    function normalize(str) {\n        return str.split("").sort().join("");\n    }\n\n    return {\n        match: function(candidates) {\n            return candidates.filter(isAnagram);\n        }\n    };    \n};\nmodule.exports = Anagram;	\N	\N	0	2	2014-11-27 18:02:12	2014-11-27 18:02:12	79	anagram.js
176	26	6f26de0b5a48be5cbb945abd	pending	javascript	word-count	module.exports = function(input) {\n    return input.split(/\\s+/)\n        .map(function(w) {  return w.toLowerCase().replace(/[\\¡\\¿\\!\\?\\.&@$%\\^&,\\:]+/g, '');})\n        .filter(function(w) { return w.length; })\n        .reduce(function(counts, w) {\n            counts[w] = counts[w] != null ? counts[w] + 1 : 1;\n            return counts;\n        }, Object.create(null));\n};	\N	\N	0	2	2014-10-27 07:23:32	2014-10-27 07:23:32	99	word-count.js
138	44	62f0c9dfabd4e0e44f28c833	superseded	javascript	anagram	function Anagram(word) {\n\n    function isAnagram(candidate) {\n        if (word.length !== candidate.length)\n            return false;\n\n        for(var i = 0 ; i < word.length ; i++) {\n            var charPos = candidate.indexOf(word.charAt(i));\n            if (charPos === -1)\n                return false;\n\n            candidate = removeCharAt(candidate, charPos);\n        }\n\n        return true;\n    };\n\n    function removeCharAt(str, index) {\n        return str.slice(0,index) + str.slice(index + 1);\n    }\n\n    return {\n        match: function(candidates) {\n            return candidates.filter(isAnagram);\n        }\n    };    \n};\nmodule.exports = Anagram;	\N	\N	0	1	2014-11-28 21:10:49	2014-11-28 21:10:49	79	anagram.js
139	46	e120ee710a5e2a27a9c75a2b	done	python	leap	"""\nLeap year detection\n"""\n\ndef is_leap_year(year):\n    """\n    Test if the supplied year is a leap year\n    \n    expect year as an integer\n    """\n    if not isinstance(year, int):\n        raise TypeError("year must be a number")\n\n    if year <= 0:\n        raise ValueError('%d invalid year number' % year)\n\n    if year % 400 == 0:\n        return True\n\n    if year % 4 == 0 and not year % 100 == 0:\n        return True\n\n    return False\n\n    	2014-10-22 11:29:22	\N	0	1	2014-10-13 23:09:09	2014-10-13 23:09:09	80	year.py
140	46	84dcc06fa3509d6be5a30af9	done	ruby	difference-of-squares	class Squares\n  attr_reader :n\n  def initialize(n)\n    @n = n\n  end\n\n  def square_of_sums\n    (1..n).inject(:+) ** 2\n  end\n\n  def sum_of_squares\n    (1..n).map {|x| x ** 2 }.inject(:+)\n  end\n\n  def difference\n    (sum_of_squares - square_of_sums).abs\n  end\nend	2014-09-12 08:56:17	\N	0	1	2014-09-09 14:00:01	2014-09-09 14:00:01	81	squares.rb
141	46	8c7a2ec9514790c129deb3cd	superseded	javascript	food-chain	var Song = {\r\n\tfirstLine: "I know an old lady who swallowed a {0}.",\r\n\treason: "She swallowed the {0} to catch the {1}{2}.",\r\n\tobituary: "She's dead, of course!\\n",\r\n\r\n\tvictims: [\r\n\t\t{ name: "fly", observation: "I don't know why she swallowed the fly. Perhaps she'll die.\\n" },\r\n\t\t{ name: "spider", observation: "It wriggled and jiggled and tickled inside her.", extra: " that wriggled and jiggled and tickled inside her"},\r\n\t\t{ name: "bird", observation: "How absurd to swallow a bird!" },\r\n\t\t{ name: "cat", observation: "Imagine that, to swallow a cat!" },\r\n\t\t{ name: "dog", observation: "What a hog, to swallow a dog!" },\r\n\t\t{ name: "goat", observation: "Just opened her throat and swallowed a goat!" },\r\n\t\t{ name: "cow", observation: "I don't know how she swallowed a cow!" },\r\n\t\t{ name: "horse", isFatal: true },\r\n\t],\r\n\r\n\tverse: function(verseNumber) {\r\n\t\tvar beginning = verseNumber-1;\r\n\t\tvar end = 0;\r\n\t\tvar lines = [];\r\n\r\n\t\tvar i = beginning;\r\n\t\twhile (i >= end) {\r\n\t\t\tvar victim = this.victims[i];\r\n\t\t\tvar previous = i > end ? this.victims[i-1] : null;\r\n\t\t\tif (i == beginning) lines.push(String.format(this.firstLine, victim.name));\r\n\t\t\tif (victim.isFatal) {\r\n\t\t\t\tlines.push(this.obituary);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (victim.observation && (i == beginning || i == end)) lines.push(victim.observation);\r\n\t\t\tif (previous) lines.push(String.format(this.reason, victim.name, previous.name, (previous.extra ? previous.extra : "")));\r\n\t\t\ti--;\r\n\t\t}\r\n\t\t\r\n\t\treturn lines.join("\\n");\r\n\t},\r\n\r\n\tverses: function(first, last) {\r\n\t\tvar output = "";\r\n\t\tfor (var i = first;i <= last;i++) {\r\n\t\t\toutput += this.verse(i) + "\\n";\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n};\r\nmodule.exports = Song;\r\n\r\nString.format = function(format) {\r\n\tvar args = Array.prototype.slice.call(arguments, 1);\r\n\treturn format.replace(/{(\\d+)}/g, function(match, number) { \r\n\t    return typeof args[number] != 'undefined' ? args[number] : match;\r\n\t});\r\n};	\N	\N	0	1	2014-06-27 21:12:18	2014-06-27 21:12:18	82	food-chain.js
142	46	0270d2749f6e8d4e21c40678	superseded	javascript	food-chain	function Song() {\r\n\tvar firstLine = "I know an old lady who swallowed a {0}.",\r\n\t\treason = "She swallowed the {0} to catch the {1}{2}.",\r\n\t\tvictims = [\r\n\t\t{ name: "fly", observation: "I don't know why she swallowed the fly. Perhaps she'll die.\\n" },\r\n\t\t{ name: "spider", observation: "It wriggled and jiggled and tickled inside her.", effect: " that wriggled and jiggled and tickled inside her"},\r\n\t\t{ name: "bird", observation: "How absurd to swallow a bird!" },\r\n\t\t{ name: "cat", observation: "Imagine that, to swallow a cat!" },\r\n\t\t{ name: "dog", observation: "What a hog, to swallow a dog!" },\r\n\t\t{ name: "goat", observation: "Just opened her throat and swallowed a goat!" },\r\n\t\t{ name: "cow", observation: "I don't know how she swallowed a cow!" },\r\n\t\t{ name: "horse", observation: "She's dead, of course!\\n", isFatal: true },\r\n\t];\r\n\r\n\tfunction buildVerse(verse) {\r\n\t\tvar beginning = verse-1,\r\n\t\t\tend = 0,\r\n\t\t\tlines = [],\r\n\t\t\ti = beginning;\r\n\t\t\t\r\n\t\twhile (i >= end) {\r\n\t\t\tvar victim = victims[i];\r\n\t\t\tvar previous = i > end ? victims[i-1] : null;\r\n\t\t\tif (i == beginning) lines.push(String.format(firstLine, victim.name));\r\n\t\t\tif (victim.observation && (i == beginning || i == end)) lines.push(victim.observation);\r\n\t\t\tif (victim.isFatal) break;\r\n\t\t\tif (previous) lines.push(String.format(reason, victim.name, previous.name, (previous.effect ? previous.effect : "")));\r\n\t\t\ti--;\r\n\t\t}\r\n\t\t\r\n\t\treturn lines.join("\\n");\r\n\t}\r\n\r\n\tfunction getVerses(first, last) {\r\n\t\tvar output = "";\r\n\t\tfor (var i = first;i <= last;i++) {\r\n\t\t\toutput += buildVerse(i) + "\\n";\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\r\n\treturn {\r\n\t\tverse: buildVerse,\r\n\t\tverses: getVerses\r\n\t}\r\n};\r\nmodule.exports = new Song();\r\n\r\nString.format = function(format) {\r\n\tvar args = Array.prototype.slice.call(arguments, 1);\r\n\treturn format.replace(/{(\\d+)}/g, function(match, number) { \r\n\t    return typeof args[number] != 'undefined' ? args[number] : match;\r\n\t});\r\n};	\N	\N	0	2	2014-07-17 23:03:57	2014-07-17 23:03:57	82	food-chain.js
155	49	5db0e70199c87c0efd309ab2	superseded	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond = 1e9 * time.Second\n\nfunc AddGigasecond(t time.Time) time.Time {\n\treturn t.Add(Gigasecond)\n}	\N	\N	0	2	2014-11-02 03:16:26	2014-11-02 03:16:26	88	gigasecond.go
156	49	476952f0e67e7e1fcbcfd6d5	pending	clojure	grains	(ns grains)\r\n\r\n;; Needed for precise exponentiation.\r\n(def ^:private ^:const big-2 (biginteger 2))\r\n\r\n(defn square [n]\r\n  ;; Grains on square n.\r\n  (.pow big-2 (dec n)))\r\n\r\n(defn total []\r\n  ;; Sum of all grains over whole chess board.\r\n  (->> (map #(.pow big-2 %) (range 64))\r\n       (reduce +)))\r	\N	\N	0	2	2014-09-19 16:14:46	2014-09-19 16:14:46	89	grains.clj
157	49	7831802f0c501ff2e7c17be5	superseded	clojure	grains	(ns grains)\r\n\r\n(def ^:private ^:const big-2 (biginteger 2))\r\n\r\n(defn square [n]\r\n  (.pow big-2 (dec n)))\r\n\r\n(defn total []\r\n  (->> (map #(.pow big-2 %) (range 64))\r\n       (reduce +)))\r	\N	\N	0	1	2014-09-29 13:14:55	2014-09-29 13:14:55	89	grains.clj
158	49	546e83cbe2dd3c6ffe455d8e	pending	clojure	nucleotide-count	(ns nucleotide-count)\n\n(defn valid? [s]\n  "Sequence is valid if it doesn't contain chars others than ACGTU"\n  (nil? (re-find #"[^ACGTU]" s)))\n\n(defn count [c s]\n  (if (valid? (str c))\n    (get (nucleotide-counts s) c 0)\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [s]\n  (if (valid? s)\n    (merge {\\A 0 \\C 0 \\G 0 \\T 0} (frequencies s))\n    (throw (Exception. "invalid chain"))))	\N	\N	0	2	2014-09-20 15:04:47	2014-09-20 15:04:47	90	nucleotide_count.clj
159	49	9c9204379f424331b9fb7bdc	superseded	clojure	nucleotide-count	(ns nucleotide-count)\n\n(defn valid? [s]\n  "Sequence is valid if it doesn't contain chars others than ACGT"\n  (nil? (re-find #"[^ACGTU]" s)))\n\n(defn count [c s]\n  (if (valid? (str c))\n    (get (nucleotide-counts s) c 0)\n    (throw (Exception. "invalid nucleotide"))))\n\n\n(defn nucleotide-counts [s]\n  (if (valid? s)\n    (merge {\\A 0 \\C 0 \\G 0 \\T 0} (frequencies s))\n    (throw (Exception. "invalid chain"))))	\N	\N	0	1	2014-10-27 21:21:26	2014-10-27 21:21:26	90	nucleotide_count.clj
160	49	7d937fa82a236e504d0c05b3	pending	ruby	linked-list	class Deque\n  attr_accessor :head\n\n  def push(datum)\n    if head.nil?\n      @head = Element.new(datum, nil, nil)\n    else\n      fast_forward\n      before = head\n      @head = Element.new(datum, before, nil)\n      @head.before.after = head\n    end\n  end\n\n  def pop\n    fast_forward\n    datum = head.datum\n\n    if head.after == head && head.before == head\n      @head = nil\n    else\n      @head = head.before\n      @head.before.after = head\n    end\n\n    datum\n  end\n\n  def unshift(datum)\n    if head.nil?\n      @head = Element.new(datum, nil, nil)\n    else\n      rewind\n      after = head\n      @head = Element.new(datum, nil, after)\n      @head.after.before = head\n    end\n  end\n\n  def shift\n    rewind\n    datum = head.datum\n\n    if head.after == head && head.before == head\n      @head = nil\n    else\n      @head = head.after\n      @head.before = head\n      @head.after.before = head\n    end\n\n    datum\n  end\n\n  private\n\n  def rewind\n    if head.before != head\n      @head = head.before\n      rewind\n    end\n  end\n\n  def fast_forward\n    if head.after != head\n      @head = head.after\n      fast_forward\n    end\n  end\n\nend\n\n\nclass Element\n  attr_accessor :datum, :before, :after\n\n  def initialize(datum, before, after)\n    @datum = datum\n    @before = before || self\n    @after = after || self\n  end\n\nend	\N	\N	0	1	2014-09-24 02:31:34	2014-09-24 02:31:34	91	linked_list.rb
143	46	d0ae2c9dbbe01fa4e20d8e2c	done	javascript	food-chain	function Song() {\r\n\tvar oldLadyIsDead = false;\r\n\tvar firstLine = "I know an old lady who swallowed a {0}.";\r\n\tvar motivation = "She swallowed the {0} to catch the {1}{2}.";\r\n\tvar victims = [\r\n\t\t{ name: "fly", observation: "I don't know why she swallowed the fly. Perhaps she'll die.\\n" },\r\n\t\t{ name: "spider", observation: "It wriggled and jiggled and tickled inside her.", effect: " that wriggled and jiggled and tickled inside her"},\r\n\t\t{ name: "bird", observation: "How absurd to swallow a bird!" },\r\n\t\t{ name: "cat", observation: "Imagine that, to swallow a cat!" },\r\n\t\t{ name: "dog", observation: "What a hog, to swallow a dog!" },\r\n\t\t{ name: "goat", observation: "Just opened her throat and swallowed a goat!" },\r\n\t\t{ name: "cow", observation: "I don't know how she swallowed a cow!" },\r\n\t\t{ name: "horse", observation: "She's dead, of course!\\n", isFatal: true }\r\n\t];\r\n\r\n\tfunction getVerse(verse) {\r\n\t\tvar lines = [];\r\n\t\tvar victimIndex = firstVictimIndex = verse - 1;\r\n\t\toldLadyIsDead = false; // assume she's not dead when we start a verse\r\n\r\n\t\t// cycle backwards through the victims and eat them\r\n\t\twhile (victimIndex >= 0) {\r\n\t\t\tlines = lines.concat(eatVictim(victimIndex, firstVictimIndex));\r\n\t\t\tif (oldLadyIsDead) break; // quit when she's dead\r\n\t\t\tvictimIndex--;\r\n\t\t}\r\n\r\n\t\treturn lines.join("\\n");\r\n\t}\r\n\r\n\tfunction eatVictim(current, first) {\r\n\t\tvar lines = [];\r\n\t\tvar victim = victims[current];\r\n\t\tvar previousVictim = current > 0 ? victims[current-1] : null;\r\n\r\n\t\t// include the first line only at the beginning\r\n\t\tif (current == first) lines.push(String.format(firstLine, victim.name)); \r\n\r\n\t\t// include the observation only for first and last victims\r\n\t\tif (current == first || current == 0) lines.push(victim.observation); \r\n\r\n\t\t// death ends the verse\r\n\t\tif (victim.isFatal) {\r\n\t\t\toldLadyIsDead = true; // indicate death to the outside world\r\n\t\t\treturn lines; \r\n\t\t}\r\n\t\t\r\n\t\t// include motivation if we are not at the last victim, plus add the "effect" when present (those darn spiders)\r\n\t\tif (previousVictim) lines.push(String.format(motivation, victim.name, previousVictim.name, (previousVictim.effect ? previousVictim.effect : ""))); \r\n\r\n\t\treturn lines;\r\n\t}\r\n\r\n\tfunction getVerses(from, to) {\r\n\t\tvar output = "";\r\n\t\tfor (var i = from;i <= to;i++) {\r\n\t\t\toutput += getVerse(i) + "\\n";\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\t\r\n\treturn {\r\n\t\tverse: getVerse,\r\n\t\tverses: getVerses\r\n\t}\r\n};\r\nmodule.exports = new Song();\r\n\r\nString.format = function(format) {\r\n\tvar args = Array.prototype.slice.call(arguments, 1);\r\n\treturn format.replace(/{(\\d+)}/g, function(match, number) { \r\n\t    return typeof args[number] != "undefined" ? args[number] : match;\r\n\t});\r\n};	2014-09-05 14:17:16	\N	0	3	2014-09-04 07:05:30	2014-09-04 07:05:30	82	food-chain.js
144	48	1f5fb7315246d64cebc1b0d3	superseded	javascript	bob	module.exports = function() {\n\n\treturn {\n\t\they: function (message) {\n\t\t\treturn 'Whatever.';\n\n\t\t}\n\t}\n};	\N	\N	0	1	2014-08-06 05:08:15	2014-08-06 05:08:15	83	bob.js
145	48	5499b240c28bcc9803fd4241	pending	javascript	bob	module.exports = function() {\n\n\tvar isQuestion, isYell, isNothing;\n\tisNothing = function(m) {\n\t\treturn !m.match(/\\S/);\n\t};\n\tisYell = function(m) {\n\t\tvar regEx = /[A-Z]{3,}!$|[A-Z]{3,}$|[A-Z]{4,}|[A-Z]{8,}\\?$|[1]{2}|GO!$|\\xdcML(?:\\xc4)/;\n\t\treturn m.match(regEx) ;\n\t};\n\n\tisQuestion = function(m) {\n\t\tvar regEx = /\\?$/;\n\t\treturn m.match(regEx);\n\t};\n\n\treturn {\n\t\they: function(message) {\n\n\t\t\tif (isNothing(message)) {\n\t\t\t\treturn 'Fine. Be that way!';\n\t\t\t}\n\n\t\t\tif (isYell(message)) {\n\t\t\t\treturn 'Woah, chill out!';\n\t\t\t}\n\n\t\t\tif (isQuestion(message)) {\n\t\t\t\treturn 'Sure.';\n\t\t\t}\n\n\t\t\treturn 'Whatever.';\n\n\t\t}\n\t};\n};	\N	\N	0	2	2014-08-12 19:29:36	2014-08-12 19:29:36	83	bob.js
146	48	d4ae675f324ad05520e6ad36	pending	ruby	raindrops	require 'prime'\n\nclass Raindrops\n  attr_reader :num\n  \n  def self.convert(num)\n    Raindrops.new(num).convert\n  end\n  \n  def initialize(num)\n    @num = num\n  end\n  \n  def convert\n    construct_string(prime_factors)\n  end\n  \n  private\n  \n  def prime_factors\n    Prime.prime_division(num).inject([]) {|pf, p| pf << p[0]}\n  end\n  \n  def construct_string(pf)\n    str = ""\n    str << "Pling" if pf.include?(3)\n    str << "Plang" if pf.include?(5)\n    str << "Plong" if pf.include?(7)\n    str = num.to_s if str.empty?\n    str\n  end\nend	\N	\N	0	1	2014-07-11 16:20:32	2014-07-11 16:20:32	84	raindrops.rb
147	48	0b016f50ffba5f28a38f25af	done	python	bob	def hey(message):\n  if(does_bob_hear_silence(message)):\n    return "Fine. Be that way!";\n  if(does_bob_hear_shouting(message)):\n    return 'Woah, chill out!';\n  if(does_bob_hear_a_question(message)):\n    return  'Sure.';\n  return 'Whatever.';\n\ndef does_bob_hear_silence(message):\n  if(message.lstrip() == ''):\n    return 1;\n  else:\n    return 0;\n\ndef does_bob_hear_shouting(message):\n  if(message.isupper()):\n    return 1;\n  else:\n    return 0;\n\ndef does_bob_hear_a_question(message):\n  if(message.endswith('?')):\n    return 1;\n  else:\n    return 0;	2014-10-06 08:42:44	\N	0	1	2014-10-05 13:28:03	2014-10-05 13:28:03	85	bob.py
148	48	d063eb9e4fc0a337566cceb1	done	go	clock	package clock\n\nimport (\n\t"fmt"\n\t"strings"\n)\n\ntype clock struct {\n\th, m int\n\tdisp string\n}\n\nfunc New(h, m int) clock {\n\th = h + m/60\n\tm = m % 60\n\tif m < 0 {\n\t\treturn New(h-1, 60+m)\n\t}\n\tif h < 0 {\n\t\treturn New(h+24, m)\n\t}\n\tdisp := strings.Replace(fmt.Sprintf("%2d:%2d", h, m), " ", "0", -1)\n\treturn clock{h, m, disp}\n\n}\n\nfunc (c clock) String() string {\n\tr := New(c.h%24, c.m%60)\n\treturn r.disp\n\n}\n\nfunc (c clock) Add(a int) clock {\n\tif a < 0 {\n\t\treturn c.sub((-1) * a)\n\t}\n\tnm := c.m + (a % 60)\n\tif nm > 60 {\n\t\tnh := c.h + 24 + 1 + a/60\n\t\treturn New(nh, nm%60)\n\t} else {\n\t\tnh := c.h + 24 + a/60\n\t\treturn New(nh, nm)\n\t}\n\n\tr := New(c.h+(a/60), c.m+(a%60))\n\treturn r\n}\n\nfunc (c clock) sub(a int) clock {\n\tnm := c.m - (a % 60)\n\tif nm < 0 {\n\t\tnh := c.h + 24 - 1 - a/60\n\t\tnm = 60 + nm\n\t\treturn New(nh, nm)\n\t} else {\n\t\tnh := c.h + 24 - a/60\n\t\treturn New(nh, nm)\n\n\t}\n\n}	2014-07-25 09:27:16	\N	0	1	2014-07-14 07:15:59	2014-07-14 07:15:59	86	clock.go
149	48	7191dde6580afd245b11a046	superseded	haskell	octal	module Octal\n( readOct\n, showOct\n) where\n\nimport Prelude ( Integral\n               , String\n               , (*)\n               , (+)\n               , (-)\n               , (.)\n               , fromEnum\n               , fromIntegral\n               , quotRem\n               , reverse\n               , toEnum\n               )\n\nreadOct :: (Integral a) => String -> a\nreadOct = readOct' 0 where\n    readOct' n "" = n\n    readOct' n (x:xs) = readOct' n' xs where\n        n' = n * 8 + fromIntegral (fromEnum x - 48)\n\nshowOct :: (Integral a) => a -> String\nshowOct = reverse . showOct' where\n    showOct' 0 = ""\n    showOct' n = toEnum (fromIntegral r + 48) : showOct' q where\n        (q, r) = n `quotRem` 8	\N	\N	0	2	2014-07-07 16:45:49	2014-07-07 16:45:49	87	octal.hs
150	48	bd440cb3a323fde2b24196f3	superseded	haskell	octal	module Octal\n( readOct\n, showOct\n) where\n\nreadOct :: (Integral a) => String -> a\nreadOct = foldl f 0 where\n    f n c = n * 8 + (fromIntegral (fromEnum c - 48))\n\nshowOct :: (Integral a) => a -> String\nshowOct = reverse . showOct' where\n    showOct' 0 = ""\n    showOct' n = toEnum ((fromIntegral r) + 48) : showOct' q where\n        (q, r) = n `quotRem` 8	\N	\N	0	1	2014-07-25 13:32:15	2014-07-25 13:32:15	87	octal.hs
151	48	8f92f181651ab5bf771bee54	superseded	haskell	octal	module Octal\n( readOct\n, showOct\n) where\n\nreadOct :: (Integral a) => String -> a\nreadOct = readOct' 0 where\n    readOct' n "" = n\n    readOct' n (x:xs) = readOct' n' xs where\n        n' = n * 8 + fromIntegral (fromEnum x - 48)\n\nshowOct :: (Integral a) => a -> String\nshowOct = reverse . showOct' where\n    showOct' 0 = ""\n    showOct' n = toEnum (fromIntegral r + 48) : showOct' q where\n        (q, r) = n `quotRem` 8	\N	\N	0	3	2014-08-01 01:14:40	2014-08-01 01:14:40	87	octal.hs
152	48	d4212cefea925fad8dc4ebac	pending	haskell	octal	module Octal\n( readOct\n, showOct\n) where\n\nimport Data.List (foldl')\n\nreadOct :: (Integral a) => String -> a\nreadOct = foldl' f 0 where\n  f n x = n * 8 + fromIntegral (fromEnum x - 48)\n\nshowOct :: (Integral a) => a -> String\nshowOct = reverse . showOct' where\n    showOct' 0 = ""\n    showOct' n = toEnum (fromIntegral r + 48) : showOct' q where\n        (q, r) = n `quotRem` 8	\N	\N	0	4	2014-08-05 05:49:57	2014-08-05 05:49:57	87	octal.hs
153	49	6630e28dc325a79d05d0e4bd	pending	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond time.Duration = 1e9 * time.Second\n\nfunc AddGigasecond(t time.Time) time.Time {\n\treturn t.Add(Gigasecond)\n}	\N	\N	0	3	2014-09-22 04:31:20	2014-09-22 04:31:20	88	gigasecond.go
154	49	71a87d172134d84e156ebd2a	superseded	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond = 1e18\n\nfunc AddGigasecond(t time.Time) time.Time {\n  return t.Add(Gigasecond)\n}	\N	\N	0	1	2014-10-21 14:31:23	2014-10-21 14:31:23	88	gigasecond.go
161	49	0ebc593f8ddb940d3ebbbc3f	pending	ruby	space-age	class SpaceAge\n\n  attr_reader :seconds\n\n  ratios = { "earth"   => 1.0,\n               "mercury" => 0.2408467,\n               "venus"   => 0.61519726,\n               "mars"    => 1.8808158,\n               "jupiter" => 11.862615,\n               "saturn"  => 29.447498,\n               "uranus"  => 84.016846,\n               "neptune" => 164.79132\n         }\n\n  earthYearSecs = 31557600\n\n  def initialize(s)\n    @seconds = s  # s.gsub('_', '').to_i\n  end\n\n  ratios.each do |planet, ratio|\n    define_method ("on_#{planet}") {\n      return (@seconds / (ratio * earthYearSecs)).round(2)\n    }\n  end\n\nend	\N	\N	0	1	2014-10-24 06:38:22	2014-10-24 06:38:22	92	space-age.rb
162	49	b5383c956f74a227eff1edd8	superseded	ruby	grains	class Grains\n  \n  SQUARES = 64\n  FIRST_TERM = 1\n  COMMON_RATIO = 2\n\n  def square(number)\n    calculator.term(FIRST_TERM, COMMON_RATIO, number)\n  end\n\n  def total\n    (1..SQUARES).map { |number| calculator.term(FIRST_TERM, COMMON_RATIO, number) }.reduce(:+)\n  end\n\n  private\n\n    def calculator\n      @calculator ||= GeometricSeries\n    end\n\nend\n\nmodule GeometricSeries\n  \n  def self.term(first_term, common_ratio, which_term)\n    (common_ratio**(which_term - 1))*first_term\n  end\n\nend	\N	\N	0	1	2014-09-27 17:04:23	2014-09-27 17:04:23	93	grains.rb
163	49	90a63f0f86e3b7932c181a43	pending	ruby	grains	class Grains\n  \n  SQUARES = 64\n  FIRST_TERM = 1\n  COMMON_RATIO = 2\n\n  def square(number)\n    calculator.term(FIRST_TERM, COMMON_RATIO, number)\n  end\n\n  def total\n    (1..SQUARES).map { |number| square(number) }.reduce(:+)\n  end\n\n  private\n\n    def calculator\n      @calculator ||= GeometricSeries\n    end\n\nend\n\nmodule GeometricSeries\n  \n  def self.term(first_term, common_ratio, which_term)\n    (common_ratio**(which_term - 1))*first_term\n  end\n\nend	\N	\N	0	2	2014-10-10 08:29:51	2014-10-10 08:29:51	93	grains.rb
164	49	a9b890e719eb58299ca04f8b	pending	python	rna-transcription	import re\n\nclass DNA:\n    string = ""\n    def __init__(self, string):\n        self.string = string\n\n    def to_rna(self):\n        return self.string.replace('T', 'U')	\N	\N	0	1	2014-11-09 11:49:16	2014-11-09 11:49:16	94	rna-transcription.py
165	49	9e48cf15b5643dfde7589114	pending	ruby	bob	module Listening\n  def shouting(speech)\n    speech.match(/[A-Z]/) && !speech.match(/[a-z]/)\n  end\n\n  def silence(speech)\n    speech.strip.empty?\n  end\n\n  def question(speech)\n    speech[-1] == '?'\n  end\nend\n\n\nclass Bob\n  include Listening\n\n  def hey(speech)\n    if shouting(speech)\n      "Woah, chill out!"\n    elsif silence(speech)\n      "Fine. Be that way!"\n    elsif question(speech)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	3	2014-09-16 04:02:53	2014-09-16 04:02:53	95	bob.rb
166	49	1ae91cbacfeb3109f66aca2f	superseded	ruby	bob	class Bob\n  def hey(speech)\n    if shouting(speech)\n      "Woah, chill out!"\n    elsif silence(speech)\n      "Fine. Be that way!"\n    elsif question(speech)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def shouting(speech)\n    speech.match(/[A-Z]/) && !speech.match(/[a-z]/)\n  end\n\n  def silence(speech)\n    speech.strip.empty?\n  end\n\n  def question(speech)\n    speech[-1] == '?'\n  end\nend	\N	\N	0	1	2014-09-18 04:29:43	2014-09-18 04:29:43	95	bob.rb
167	49	f648760dd89a655ad74c9f11	superseded	ruby	bob	require_relative 'listening'\n\nclass Bob\n  include Listening\n\n  def hey(speech)\n    if shouting(speech)\n      "Woah, chill out!"\n    elsif silence(speech)\n      "Fine. Be that way!"\n    elsif question(speech)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	2	2014-10-23 12:44:52	2014-10-23 12:44:52	95	bob.rb
168	49	8eec570de29fc6014c77609d	pending	scala	phone-number	class PhoneNumber(val input: String) {\n  var number = input.filter(_.isDigit)\n  number = if (number.size == 11 && number(0) == '1') number.slice(1, number.size)\n           else if (number.size == 11 && number(0) != '1') "0000000000"\n           else if (number.size < 10) "0000000000"\n           else number\n\n  def areaCode = number.slice(0,3)\n  \n  override def toString = s"(${number.slice(0,3)}) ${number.slice(3,6)}-${number.slice(6,11)}"\n\n}	\N	\N	0	2	2014-11-13 02:36:48	2014-11-13 02:36:48	96	phone_number.scala
169	49	1ce2663c773bf18dcac809ea	superseded	scala	phone-number	class PhoneNumber(val input: String) {\n  val pattern = "[0-9]".r\n  var number = pattern.findAllIn(input).mkString("", "", "")\n  number = if (number.size == 11 && number(0) == '1') number.slice(1, number.size)\n             else if (number.size == 11 && number(0) != '1') "0000000000"\n             else if (number.size < 10) "0000000000"\n             else number\n\n  def areaCode = number.slice(0,3)\n  \n  override def toString = s"(${number.slice(0,3)}) ${number.slice(3,6)}-${number.slice(6,11)}"\n\n}	\N	\N	0	1	2014-11-14 22:20:31	2014-11-14 22:20:31	96	phone_number.scala
170	26	358e904adc13390356722793	superseded	ruby	hamming	class Hamming\n  def self.compute(s1, s2)\n    if s1.size > s2.size\n      s1, s2 = s2, s1\n    end\n\n    n = 0\n    s1.size.times do |i|\n      n+=1 unless s1[i] == s2[i]\n    end\n\n    return n\n  end\nend	\N	\N	0	1	2014-08-03 08:32:13	2014-08-03 08:32:13	97	hamming.rb
171	26	bc7f0e1b2b8378a9ffb95c67	pending	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    a.size.times.count{ |i| b[i] && a[i] != b[i] }\n  end\nend	\N	\N	0	2	2014-08-22 01:59:02	2014-08-22 01:59:02	97	hamming.rb
172	26	55c2fbe9bdf9cb934a290eed	superseded	haskell	atbash-cipher	module Atbash\n( encode ) where\n\nimport           Data.Char       (chr, isAlpha, isAlphaNum, ord, toLower)\nimport           Data.List.Split (chunksOf)\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . map encodeChar . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c = if isAlpha c then\n                 chr (219 - ord (toLower c))\n               else\n                 c	\N	\N	0	1	2014-09-26 02:06:57	2014-09-26 02:06:57	98	atbash-cipher.hs
173	26	007f0002c802d740c0097441	superseded	haskell	atbash-cipher	module Atbash\n( encode ) where\n\nimport           Data.Char       (chr, isAlpha, isAlphaNum, ord, toLower)\nimport           Data.List.Split (chunksOf)\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . map encodeChar . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c = if isAlpha c then\n                 chr (sumOfPair - ord (toLower c))\n               else\n                 c\n  where sumOfPair = ord 'a' + ord 'z'	\N	\N	0	2	2014-11-07 19:44:20	2014-11-07 19:44:20	98	atbash-cipher.hs
174	26	f6e13753eb9bb51d3b5932d8	pending	haskell	atbash-cipher	module Atbash\n( encode ) where\n\nimport           Data.Char       (isAlpha, isAlphaNum, toLower)\nimport           Data.List.Split (chunksOf)\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . map encodeChar . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c | isAlpha c = toEnum (sumOfPair - fromEnum (toLower c))\n             | otherwise = c\n  where sumOfPair = fromEnum 'a' + fromEnum 'z'	\N	\N	0	3	2014-11-28 05:32:53	2014-11-28 05:32:53	98	atbash-cipher.hs
175	26	8bc26ac71be8cc07bbf28d7a	superseded	javascript	word-count	module.exports = function(input) {\n    var counts = Object.create(null);\n    var words = input.split(/\\s+/)\n        .map(function(w) {  return w.toLowerCase().replace(/[\\¡\\¿\\!\\?\\.&@$%\\^&,\\:]+/g, '');})\n        .filter(function(w) { return w.length; });\n    words.forEach(function(w) {\n        counts[w] = counts[w] != null ? counts[w] + 1 : 1;\n    });\n    return counts;\n};	\N	\N	0	1	2014-08-20 06:26:24	2014-08-20 06:26:24	99	word-count.js
177	26	17dd39803175edd22838ce36	superseded	fsharp	bob	﻿module Bob\r\n\r\ntype Bob(msg) =\r\n    let isQuestion (s:string) = s.EndsWith("?")\r\n    let hasLetters s = String.exists System.Char.IsLetter s\r\n    let isShouting s = hasLetters s && s.ToUpper() = s\r\n    let isSilent (s:string) = s.Trim() = ""\r\n\r\n    let (|Silence|Shouting|Asking|SomethingElse|) (s:string) =\r\n        if isSilent s then Silence\r\n        elif isShouting s then Shouting\r\n        elif isQuestion s then Asking\r\n        else SomethingElse\r\n\r\n    member this.hey() =\r\n        match msg with \r\n        | Silence  -> "Fine. Be that way!"\r\n        | Shouting -> "Woah, chill out!"\r\n        | Asking   -> "Sure."\r\n        | _        -> "Whatever."	\N	\N	0	3	2014-06-29 10:36:47	2014-06-29 10:36:47	100	Bob.fs
178	26	d408a8f7707382f9ffe02674	superseded	fsharp	bob	﻿module Bob\r\n\r\ntype Bob(msg) =\r\n    let (|Silence|Shouting|AskingQuestion|SomethingElse|) (s:string) =\r\n        if s.Trim() = "" then Silence\r\n        elif String.exists System.Char.IsLetter s && s.ToUpper() = s then Shouting\r\n        elif s.EndsWith("?") then AskingQuestion\r\n        else SomethingElse\r\n\r\n    member this.hey() =\r\n        match msg with \r\n        | Silence        -> "Fine. Be that way!"\r\n        | Shouting       -> "Woah, chill out!"\r\n        | AskingQuestion -> "Sure."\r\n        | SomethingElse  -> "Whatever."	\N	\N	0	2	2014-07-05 00:09:27	2014-07-05 00:09:27	100	Bob.fs
179	26	989729f9ca02c13bbce2bd52	superseded	fsharp	bob	﻿module Bob\r\n\r\ntype Bob(msg: string) =\r\n    let askingQuestion =\r\n        msg.EndsWith("?")\r\n\r\n    let containsLetters = \r\n        String.exists System.Char.IsLetter msg\r\n     \r\n    let shouting = \r\n        containsLetters && msg.ToUpper() = msg\r\n\r\n    let silence =\r\n        msg.Trim() = ""\r\n\r\n    member this.hey() = \r\n      if silence then "Fine. Be that way!"\r\n      elif shouting then "Woah, chill out!"\r\n      elif askingQuestion then "Sure."\r\n      else "Whatever."\r	\N	\N	0	1	2014-07-07 15:40:37	2014-07-07 15:40:37	100	Bob.fs
180	26	568509001159bfcb5bd19f47	pending	fsharp	bob	﻿module Bob\r\n\r\ntype Bob(msg) =\r\n    let isSilent (s:string)   = s.Trim() = ""\r\n    let hasLetters s          = String.exists System.Char.IsLetter s\r\n    let isShouting s          = hasLetters s && s.ToUpper() = s\r\n    let isQuestion (s:string) = s.EndsWith("?") \r\n    let otherwise _           = true\r\n    let patterns = [|\r\n        (isSilent,   "Fine. Be that way!");\r\n        (isShouting, "Woah, chill out!");\r\n        (isQuestion, "Sure.");\r\n        (otherwise,  "Whatever.")\r\n        |]\r\n\r\n    member this.hey() =\r\n        Array.find (fun (p,_) -> p msg) patterns |> snd\r	\N	\N	0	4	2014-10-03 08:21:20	2014-10-03 08:21:20	100	Bob.fs
181	26	24fee11ed3acc701dc6aa3d7	superseded	javascript	anagram	var anagram = function(word) {\n\tword = word.toLowerCase().trim();\n\n\tvar getMatches = function(list) {\n\t\tvar matchList = [];\n\n\t\tif(typeof list !== 'object') \n\t\t\tlist = [].slice.call(arguments);\n\n\t\tlist.forEach(function(possible) {\n\t\t\tthis.possible = possible.toLowerCase().trim();\n\t\t\tif((this.possible.length === word.length) && (this.possible !== word))\n\t\t\t\tif(alpha(this.possible) === alpha(word))\n\t\t\t\t\tmatchList[matchList.length] = possible;\n\t\t});\n\n\t\treturn matchList;\n\t}\n\n\tvar alpha = function(letters) {\n\t\tletters = letters.split('').sort().join('');\n\t\treturn letters;\n\t}\n\n\tvar anagrams = {\n\t\tmatches: getMatches\n\t};\n\n\treturn anagrams;\n}\n\nmodule.exports = anagram;	\N	\N	0	1	2014-07-08 11:55:29	2014-07-08 11:55:29	101	anagram.js
182	26	78948221024e4e704fe0c20b	pending	javascript	anagram	var anagram = function(word) {\n\tword = word.toLowerCase().trim();\n\n\tvar getMatches = function(list) {\n\t\tvar matchList = [];\n\n\t\tif(typeof list !== 'object') \n\t\t\tlist = [].slice.call(arguments);\n\n\t\tlist.forEach(function(possible) {\n\t\t\tthis.possible = possible.toLowerCase().trim();\n\t\t\tif((this.possible.length === word.length) && (this.possible !== word) && (alpha(this.possible) === alpha(word)))\n\t\t\t\tmatchList[matchList.length] = possible;\n\t\t});\n\t\treturn matchList;\n\t}\n\n\tvar alpha = function(letters) {\n\t\treturn letters.split('').sort().join('');\n\t}\n\n\tvar anagrams = {\n\t\tmatches: getMatches\n\t};\n\treturn anagrams;\n}\n\nmodule.exports = anagram;	\N	\N	0	2	2014-07-30 00:33:40	2014-07-30 00:33:40	101	anagram.js
183	26	6f628b98e6944bcc325e35e7	superseded	perl5	accumulate	#!/usr/bin/env perl \npackage Accumulate;\nuse strict;\nuse warnings;\nuse 5.18.2;\n\nsub accumulate {\n    my ($collection, $op) = @_;\n    my @transform;\n    push @transform, $op->($_) for @$collection;\n    return \\@transform;\n}\n\n1;	\N	\N	0	2	2014-06-23 14:39:25	2014-06-23 14:39:25	102	Accumulate.pm
184	26	0ee0136e92eccf16db382175	superseded	perl5	accumulate	#!/usr/bin/env perl \npackage Accumulate;\nuse strict;\nuse warnings;\nuse 5.18.2;\n\nsub accumulate {\n    my ($collection, $op) = @_;\n    my @transform;\n    push @transform, $op->($_) for @{$collection};\n    return \\@transform;\n}\n\n1;	\N	\N	0	1	2014-07-17 04:28:51	2014-07-17 04:28:51	102	Accumulate.pm
185	26	c9c2eefa3c2f49cf1b11ff27	pending	perl5	accumulate	#!/usr/bin/env perl \npackage Accumulate;\nuse strict;\nuse warnings;\nuse 5.18.2;\n\nsub accumulate {\n    my ($collection, $op) = @_;\n    my @transform;\n    push @transform, $op->($_) for @$collection;\n    \\@transform;\n}\n\n1;	\N	\N	0	3	2014-07-30 08:40:25	2014-07-30 08:40:25	102	Accumulate.pm
186	7	d352d096365b194c6529a1f4	superseded	ruby	phone-number	class PhoneNumber\n  def initialize(number)\n    @number = clean(number) || "0000000000"\n  end\n\n  def number\n    @number\n  end\n\n  def area_code\n    parts[0]\n  end\n\n  def to_s\n    "(%s) %s-%s" % parts\n  end\n\nprivate \n\n  def clean(number)\n    return nil unless number =~ /^[\\d\\s.\\-\\(\\)]+$/\n    formatted = number.gsub(/\\D/, '')\n    return formatted[1..-1] if formatted.length == 11 && formatted[0] == '1'\n    return nil if formatted.length != 10\n    formatted\n  end\n\n  def parts\n    number.scan(/(...)(...)(....)/).flatten\n  end\nend	\N	\N	0	2	2014-09-30 12:07:00	2014-09-30 12:07:00	103	phone_number.rb
187	7	9e6fdf4686f82136d89bda22	superseded	ruby	phone-number	class PhoneNumber\n  def initialize(number)\n    @number = clean(number.clone) || "0000000000"\n  end\n\n  def number\n    @number\n  end\n\n  def area_code\n    number[0..2]\n  end\n\n  def to_s\n    "(%s) %s-%s" % [area_code, number[3..5], number[6..-1]]\n  end\n\nprivate \n\n  def clean(number)\n    return nil unless number =~ /^[\\d\\s.\\-\\(\\)]+$/\n    number.gsub!(/\\D/, '')\n    return number[1..-1] if number.length == 11 && number[0] == '1'\n    return nil if number.length != 10\n    number\n  end\nend	\N	\N	0	1	2014-10-11 16:42:39	2014-10-11 16:42:39	103	phone_number.rb
188	7	5c61e307ce8c033a24be3394	pending	ruby	phone-number	class PhoneNumber\n  def initialize(number)\n    @number = number\n    clean\n  end\n\n  def number\n    @number\n  end\n\n  def area_code\n    parts[0]\n  end\n\n  def to_s\n    "(%s) %s-%s" % parts\n  end\n\nprivate \n\n  def clean\n    remove_symbols\n    remove_prefix\n    validate\n  end\n\n  def remove_symbols\n    @number.gsub!(/[\\s.()-]/, '')\n  end\n\n  def remove_prefix\n    @number.slice!(0) if @number[/^1\\d{10}$/]\n  end\n\n  def validate\n    @number = "0000000000" unless @number[/^\\d{10}$/]\n  end\n\n  def parts\n    @number.scan(/(...)(...)(....)/).flatten\n  end\n\nend	\N	\N	0	4	2014-11-05 22:39:07	2014-11-05 22:39:07	103	phone_number.rb
205	23	a38ca012469d584557d2e3d2	pending	elixir	bob	defmodule Teenager do\n  def hey(msg) do\n    cond do\n      silent(msg)  -> "Fine. Be that way!"\n      shouted(msg) -> "Woah, chill out!"\n      query(msg)   -> "Sure."\n      true         -> "Whatever."\n    end\n  end\n\n  defp silent(msg),  do: String.length(String.strip(msg)) == 0\n  defp shouted(msg), do: String.upcase(msg) == msg\n  defp query(msg),   do: String.ends_with?(msg, "?")\nend	\N	\N	0	1	2014-09-20 08:00:06	2014-09-20 08:00:06	112	bob.exs
189	7	5fd2e71812462fe48b3d85a3	superseded	ruby	phone-number	class PhoneNumber\n  def initialize(number)\n    @number = number\n    clean\n  end\n\n  def number\n    @number\n  end\n\n  def area_code\n    parts[0]\n  end\n\n  def to_s\n    "(%s) %s-%s" % parts\n  end\n\nprivate \n\n  def clean\n    remove_symbols\n    remove_prefix\n    validate\n  end\n\n  def remove_symbols\n    @number.gsub!(/[\\s.()-]/, '')\n  end\n\n  def remove_prefix\n    @number.slice!(0) if @number =~ /^1\\d{10}$/\n  end\n\n  def validate\n    @number = "0000000000" if @number !~ /^\\d{10}$/\n  end\n\n  def parts\n    @number.scan(/(...)(...)(....)/).flatten\n  end\n\nend	\N	\N	0	3	2014-11-28 16:56:45	2014-11-28 16:56:45	103	phone_number.rb
190	23	7dd704e523a4e0c1b322d681	pending	csharp	bob	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Exercise\r\n{\r\n    public class Bob\r\n    {\r\n        public string Hey(string input)\r\n        {\r\n            //say nothing\r\n            if (string.IsNullOrWhiteSpace(input))\r\n            {\r\n                return "Fine. Be that way!";\r\n            }\r\n            //yelled\r\n            if (input.Any(char.IsLetter) && input.ToUpper() == input)\r\n            {\r\n                return "Whoa, chill out!";\r\n            }\r\n            //question\r\n            if (input.Last() == '?')\r\n            {\r\n                return "Sure.";\r\n            }\r\n            //rest\r\n            return "Whatever.";\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-10-24 08:46:42	2014-10-24 08:46:42	104	Bob.cs
191	23	e58882affb0ba45c5ee05bfa	pending	python	bob	class Bob:\n  def hey(self, phrase):\n    if phrase:\n      phrase = phrase.strip()\n    if not phrase:\n      return 'Fine. Be that way!'\n    elif phrase.upper() == phrase:\n      return 'Woah, chill out!'\n    elif phrase[-1] == '?':\n      return 'Sure.'\n    else:\n      return 'Whatever.'	\N	\N	0	1	2014-04-26 13:46:18	2014-04-26 13:46:18	105	bob.py
192	23	f1611f902274a1990b4abdb7	pending	ruby	raindrops	module Raindrops\n  SOUND_OF = { 3 => "Pling", 5 => "Plang", 7 => "Plong" }\n\n  def self.convert n\n    text = SOUND_OF.each_with_object("") { |(div,word),phrase|\n      phrase << word if n%div==0\n    }\n    text.empty? ? n.to_s : text\n  end\nend	\N	\N	0	5	2014-04-04 06:55:44	2014-04-04 06:55:44	106	raindrops.rb
193	23	31f65d6227c2394e42a71438	superseded	ruby	raindrops	module Raindrops\n\n  SECRET = { 3=> "Pling", 5=> "Plang", 7=> "Plong" }\n\n  def self.convert n\n    words = ""\n    SECRET.each { |div,word| words<<word if n%div==0 }\n    words = n.to_s if words.length==0\n    words\n  end\nend	\N	\N	0	2	2014-05-15 13:56:12	2014-05-15 13:56:12	106	raindrops.rb
194	23	36c784163b53bd644b761c02	superseded	ruby	raindrops	module Raindrops\n\n  class << self\n\n    def convert n\n      words = ""\n      words = "Pling" if n%3 == 0\n      words += "Plang" if n%5 == 0\n      words += "Plong" if n%7 == 0\n      words = "#{n}" if words == ""\n      words\n    end\n  end\nend	\N	\N	0	1	2014-06-04 07:28:14	2014-06-04 07:28:14	106	raindrops.rb
195	23	692b42905642c84eb38f89aa	superseded	ruby	raindrops	module Raindrops\n\n  SECRET = { 3=> "Pling", 5=> "Plang", 7=> "Plong" }\n\n  def self.convert n\n    words = SECRET.each_with_object("") { |(div,word),phrase| phrase<<word if n%div==0 }\n    words = n.to_s if words.length==0\n    words\n  end\nend	\N	\N	0	3	2014-09-01 05:27:58	2014-09-01 05:27:58	106	raindrops.rb
196	23	bed063935cb8571015e53a3e	superseded	ruby	raindrops	module Raindrops\n  SOUND_OF = { 3 => "Pling", 5 => "Plang", 7 => "Plong" }\n\n  def self.convert n\n    text = SOUND_OF.each_with_object("") { |(div,word),phrase|\n      phrase << word if n%div==0\n    }\n    text = n.to_s if text.empty?\n    text\n  end\nend	\N	\N	0	4	2014-10-21 22:34:25	2014-10-21 22:34:25	106	raindrops.rb
197	23	22a36e03b807e6a5ead8a475	pending	haskell	atbash-cipher	module Atbash where\n\nimport Data.Char\nimport Data.List\n\nencode :: String -> String\nencode = intercalate " " . toGroups 5 . map (encodeChar . toLower) . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c | isAlpha c = toChar . encode . fromChar $ c\n             | otherwise = c\n    where toChar n = chr $ ord 'a' + n\n          encode n = 25 - n\n          fromChar n = ord n - ord 'a'\n\ntoGroups :: Int -> [a] -> [[a]]\ntoGroups n xs | length xs <= n = [xs]\n              | otherwise      = a:(toGroups n b)\n    where (a, b) = splitAt n xs	\N	\N	0	1	2014-04-21 07:09:47	2014-04-21 07:09:47	107	atbash-cipher.hs
198	23	57016e891862b64c5151f640	superseded	ruby	bob	class Bob\n\n  def initialize\n    @responses = { silence:'Fine. Be that way!',\n                   question:'Sure.', \n                   yell:'Woah, chill out!', \n                   unknown: 'Whatever.' }\n  end\n\n  def hey(text)\n    @responses[sentiment(text)]\n  end\n\n  def sentiment(text)\n    return :silence if text.strip.empty?\n    return :yell if text == text.upcase and not text == text.downcase\n    return :question if text.end_with? '?'\n    return :unknown\n  end\n\nend	\N	\N	0	1	2014-03-27 10:00:26	2014-03-27 10:00:26	108	bob.rb
199	23	d1828fe254330dda2bb8bae4	pending	ruby	bob	class Bob\n\n  def initialize(responses = default_responses)\n    @responses = responses\n  end\n\n  def default_responses\n    { silence:'Fine. Be that way!',\n      question:'Sure.', \n      yell:'Woah, chill out!', \n      unknown: 'Whatever.' }\n  end\n\n  def hey(text)\n    @responses[sentiment(text)]\n  end\n\n  def sentiment(text)\n    return :silence if silence?(text)\n    return :yell if yelling?(text)\n    return :question if question?(text)\n    return :unknown\n  end\n\n  def silence?(text)\n    text.strip.empty?\n  end\n\n  def yelling?(text)\n    text == text.upcase and not text == text.downcase\n  end\n\n  def question?(text)\n    text.end_with? '?'\n  end\n\nend	\N	\N	0	2	2014-05-24 01:40:22	2014-05-24 01:40:22	108	bob.rb
200	23	4c187f3fb479c522f6a9af7f	pending	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word\n  end\n  \n  def match(list)\n    permutations = @word.downcase.scan(/\\w/).permutation.map(&:join)\n    intersection = Array.new\n    list.each do |word|\n      intersection.push(word) if permutations.include?(word.downcase) and word.downcase != @word.downcase\n    end\n    intersection\n  end\nend	\N	\N	0	1	2014-07-11 01:29:00	2014-07-11 01:29:00	109	anagram.rb
201	23	57c573957957ee73b1b0c2c5	pending	python	gigasecond	from datetime import timedelta\r\n\r\ndef add_gigasecond(date):\r\n\treturn date + timedelta(0, 1000000000)	\N	\N	0	1	2014-08-02 08:15:11	2014-08-02 08:15:11	110	gigasecond.py
202	23	8dee7705600da729dcce915f	superseded	go	grains	package grains\n\nimport math "math"\n\nfunc Square(count int) (grains uint64) {\n\treturn pow(2, count-1)\n}\n\nfunc Total() (result uint64) {\n\tfor i := 1; i <= 64; i++ {\n\t\tresult += Square(i)\n\t}\n\treturn\n}\n\nfunc pow(number, radix int) uint64 {\n\treturn uint64(math.Pow(float64(number), float64(radix)))\n}	\N	\N	0	1	2014-04-11 19:24:13	2014-04-11 19:24:13	111	grains.go
203	23	9f410309fd345da5bff16dec	superseded	go	grains	package grains\n\nfunc Square(count int) uint64 {\n\tif count > 64 { return 0 }\n\treturn 1 << uint(count-1)\n}\n\nfunc Total() (result uint64) {\n\tfor i := 1; i <= 64; i++ {\n\t\tresult += Square(i)\n\t}\n\treturn\n}	\N	\N	0	2	2014-08-02 22:43:51	2014-08-02 22:43:51	111	grains.go
204	23	204b3811638c56e23653e1ac	pending	go	grains	package grains\n\nfunc Square(count int) uint64 {\n\treturn 1 << uint(count-1)\n}\n\nfunc Total() (result uint64) {\n\t//due to dealing with binary sum(2^(1..63))\n\treturn (1 << 64)-1\n}	\N	\N	0	3	2014-09-04 10:52:09	2014-09-04 10:52:09	111	grains.go
206	23	f2590676493c39b19540d69d	superseded	ruby	gigasecond	class Gigasecond\n\n\tDAYS_PER_GIGASECOND = (10**9)/86400\n\n\tdef self.from(date)\n\t\tdate + DAYS_PER_GIGASECOND\n\tend\nend	\N	\N	0	1	2014-07-06 01:13:01	2014-07-06 01:13:01	113	gigasecond.rb
209	23	c02f773612d9dec46ae81d32	superseded	ocaml	bob	type talk =\n    | Nothing\n    | Question\n    | Yielding\n    | Other\n\nlet describe_nothing str =\n    0 == (String.length (String.trim str))\n\nand describe_yielding str =\n    let is_cap_letter c = c >= 'A' && 'Z' >= c\n    and str_yielding = ref true\n    and has_one_cap_letter = ref false (* because we can have only numbers *)\n    and i = ref ((String.length str) - 1)\n    in\n    while (!str_yielding && !i >= 0) do\n        (let c = String.get str !i in\n            has_one_cap_letter := !has_one_cap_letter || (is_cap_letter c);\n            str_yielding := !str_yielding && (c == (Char.uppercase c)));\n        decr i\n    done;\n    !str_yielding && !has_one_cap_letter\n\nand describe_question str =\n    let last_char = String.get str ((String.length str) - 1) in\n    '?' == last_char\n\nlet response_for str =\n    let talks_type = [\n        (describe_nothing, Nothing);\n        (describe_yielding, Yielding);\n        (describe_question, Question);\n        ((fun str -> true), Other)\n    ]\n    in\n        let (_, str_type) =\n            List.find (fun (desc,_) -> desc str) talks_type\n        in\n        match str_type with\n        | Nothing -> "Fine. Be that way!"\n        | Question -> "Sure."\n        | Yielding -> "Woah, chill out!"\n        | Other -> "Whatever."	\N	\N	0	2	2014-05-30 17:36:57	2014-05-30 17:36:57	114	bob.ml
210	23	9f45585db2355dfbaf66fca9	superseded	ocaml	bob	type talk =\n    | Nothing\n    | Question\n    | Yielding\n    | Other\n\nlet describe_nothing str =\n    0 == (String.length (String.trim str))\n\nand describe_yielding str =\n    let is_cap letter = 'A' <= letter && letter <= 'Z'\n    and is_low letter = 'a' <= letter && letter <= 'z'\n    and has_cap = ref false\n    and has_low = ref false\n    in\n        let update_state c = begin\n            has_cap := !has_cap || (is_cap c);\n            has_low := !has_low || (is_low c)\n        end in\n        String.iter update_state str;\n        !has_cap && not !has_low\n\nand describe_question str =\n    let last_char = String.get str ((String.length str) - 1) in\n    '?' == last_char\n\nlet response_for str =\n    let talks_type = [\n        (describe_nothing, Nothing);\n        (describe_yielding, Yielding);\n        (describe_question, Question);\n        ((fun str -> true), Other)\n    ]\n    in\n        let (_, str_type) =\n            List.find (fun (desc,_) -> desc str) talks_type\n        in\n        match str_type with\n        | Nothing -> "Fine. Be that way!"\n        | Question -> "Sure."\n        | Yielding -> "Woah, chill out!"\n        | Other -> "Whatever."	\N	\N	0	3	2014-06-04 14:51:52	2014-06-04 14:51:52	114	bob.ml
211	23	584b23f45f17677553dd86f9	superseded	ocaml	bob	type talk =\n    | Nothing\n    | Question\n    | Yielding\n    | Other\n\nlet describe_nothing str =\n    0 == (String.length (String.trim str))\n\nand describe_yielding str =\n    let is_cap letter = 'A' <= letter && letter <= 'Z'\n    and is_low letter = 'a' <= letter && letter <= 'z'\n    and has_cap = ref false\n    and has_low = ref false\n    in\n        let update_state c = begin\n            has_cap := !has_cap || (is_cap c);\n            has_low := !has_low || (is_low c)\n        end in\n        String.iter update_state str;\n        !has_cap && not !has_low\n\nand describe_question str =\n    let last_char = String.get str ((String.length str) - 1) in\n    '?' == last_char\n\nlet response_for str =\n    let talks_type = [\n        (describe_nothing, Nothing);\n        (describe_yielding, Yielding);\n        (describe_question, Question);\n        ((fun _ -> true), Other)\n    ]\n    in\n        let (_,str_type) =\n            List.find (fun (desc,_) -> desc str) talks_type\n        in\n        match str_type with\n        | Nothing -> "Fine. Be that way!"\n        | Question -> "Sure."\n        | Yielding -> "Woah, chill out!"\n        | Other -> "Whatever."	\N	\N	0	4	2014-07-10 20:35:37	2014-07-10 20:35:37	114	bob.ml
212	23	366eb4d107814cdcdcba2b07	pending	ocaml	bob	(*\n * Building this file:\n * corebuild -use-ocamlfind -package batteries -quiet test.native\n *)\n\nlet describe_nothing str =\n    0 == (String.length (String.trim str))\n\nand describe_yielding str =\n    let find_cap_and_low (cap, low) c =\n        ((cap || (BatChar.is_uppercase c)), (low || (BatChar.is_lowercase c)))\n    in\n    let (has_cap, has_low) =\n        BatString.fold_left find_cap_and_low (false, false) str\n    in\n        has_cap && not has_low\n\nand describe_question str =\n    let last_char = String.get str ((String.length str) - 1) in\n    '?' == last_char\n\nlet response_for = function str\n    | str when describe_nothing str -> "Fine. Be that way!"\n    | str when describe_yielding str -> "Woah, chill out!"\n    | str when describe_question str -> "Sure."\n    | _ -> "Whatever."	\N	\N	0	5	2014-07-17 05:09:38	2014-07-17 05:09:38	114	bob.ml
213	23	692427aebf7e1b0596dcc0ee	pending	perl5	triangle	package Triangle;\r\nuse strict;\r\nuse warnings;\r\n\r\nsub ex { die "TriangleError"; }\r\n\r\nsub kind {\r\n    my %sides;\r\n    foreach (@_) { if ($_ <= 0) { ex(); } $sides{$_}++; }\r\n    my @sort = (sort keys %sides);\r\n    if (keys %sides == 1) { return "equilateral"; }\r\n    if (keys %sides == 2) { \r\n        if (($sort[0] * 2) <= $sort[1]) { ex(); }\r\n        else { return "isosceles"; }\r\n    }\r\n    if (($sort[0] + $sort[1]) < $sort[2]) { ex(); }\r\n    else { return "scalene"; }\r\n\r\n}\r\n1;	\N	\N	0	1	2014-06-08 03:14:25	2014-06-08 03:14:25	115	Triangle.pm
214	23	92faeadf8ea9e7cde328f770	pending	ruby	leap	class Year\n\n  def self.leap?(year)\n    if year % 400 == 0 && year % 100 == 0\n      true \n    elsif year % 100 == 0\n      false\n    elsif year % 4 == 0\n      true\n    else\n      false\n    end\n  end\n\nend	\N	\N	0	1	2014-05-02 06:29:12	2014-05-02 06:29:12	116	year.rb
215	23	c9b2e75e2ef1c12e618ff736	pending	clojure	robot-name	(ns robot)\n\n(def alpha "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n(def numeric "0123456789")\n\n\n(defn make-name []\n(str (rand-nth alpha)(rand-nth alpha)\n     (rand-nth numeric)(rand-nth numeric)(rand-nth numeric))\n )\n\n(defn robot []\n  (atom (assoc {} :name (make-name)))\n)\n\n(defn robot-name [bot]\n  (get @bot :name)\n )\n\n(defn reset-name [bot]\n  (swap! bot (fn [_] (assoc {} :name (make-name))))\n )	\N	\N	0	1	2014-08-20 13:29:24	2014-08-20 13:29:24	117	robot.clj
216	23	33b46d28092a773ea4816735	pending	python	beer-song	s1 = "{0} bottle{1} of beer on the wall, {0} bottle{1} of beer.\\n"\ns2 = "Take one down and pass it around, {0} bottle{1} of beer on the wall.\\n"\ns_zero = "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\ns_one = "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\nclass Beer:\n\tdef verse(self, num):\n\t\tif num == 0:\n\t\t\treturn ''.join([s1.format('no more', 's').capitalize(), s_zero])\n\t\tif num == 1:\n\t\t\treturn ''.join([s1.format(1, ''), s_one])\n\n\t\treturn ''.join([s1.format(num, 's'), s2.format(num-1, ('' if num == 2 else 's'))])\n\n\tdef sing(self, s_num, f_num=0):\n\t\treturn "\\n".join([ self.verse(i) for i in range(s_num, f_num-1, -1) ]) + "\\n"	\N	\N	0	1	2014-04-12 10:42:09	2014-04-12 10:42:09	118	beer.py
217	23	b52d3b5dd3333b025ab908c0	pending	ruby	hamming	class Hamming\n  def self.compute dna1, dna2\n    dna1_chars = dna1.chars  \n    dna2_chars = dna2.chars\n\n    if dna1_chars.size <= dna2_chars.size\n      shorter = dna1_chars\n      longer  = dna2_chars\n    else\n      shorter = dna2_chars\n      longer  = dna1_chars\n    end\n\n    result = shorter.each_with_index.map {|x,i| x == longer[i] ? 0 : 1 } \n    result.reduce {|x, y| x + y} || 0\n\n  end\nend	\N	\N	0	1	2014-04-30 20:13:27	2014-04-30 20:13:27	119	hamming.rb
218	17	30e37266eb1b6bf959ac2d0f	pending	ruby	space-age	class SpaceAge\n\n  attr_reader :seconds\n\n  EARTH_YR    = 31557600.0\n  RATIO_TO_EARTH = {\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    earth: 1.0,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132\n  }\n\n  RATIO_TO_EARTH.keys.each do |planet|\n    define_method("on_#{planet}") do\n      (@seconds/(RATIO_TO_EARTH[planet]*EARTH_YR)).round(2)\n    end\n  end\n\n  def method_missing(m, *args, &block)  \n    raise "#{m} method Not Found on class #{self.class}"\n  end\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\nend	\N	\N	0	6	2014-09-23 21:24:43	2014-09-23 21:24:43	120	space_age.rb
219	17	373fc3a881cf3ac44c5a040d	superseded	ruby	space-age	class SpaceAge\n\n  EARTH_YR    = 31557600.0\n  MERCURY_YR  = 0.2408467  * EARTH_YR\n  VENUS_YR    = 0.61519726 * EARTH_YR\n  MARS_YR     = 1.8808158  * EARTH_YR\n  JUPITER_YR  = 11.862615  * EARTH_YR\n  SATURN_YR   = 29.447498  * EARTH_YR\n  URANUS_YR   = 84.016846  * EARTH_YR\n  NEPTUNE_YR  = 164.79132  * EARTH_YR\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n  def seconds\n    @seconds\n  end\n  def on_mercury\n    (@seconds/MERCURY_YR).round(2)\n  end\n  def on_venus\n    (@seconds/VENUS_YR).round(2)\n  end\n  def on_earth\n    (@seconds/EARTH_YR).round(2)\n  end\n  def on_mars\n    (@seconds/MARS_YR).round(2)\n  end\n  def on_jupiter\n    (@seconds/JUPITER_YR).round(2)\n  end\n  def on_saturn\n    (@seconds/SATURN_YR).round(2)\n  end\n  def on_uranus\n    (@seconds/URANUS_YR).round(2)\n  end\n  def on_neptune\n    (@seconds/NEPTUNE_YR).round(2)\n  end\n\nend	\N	\N	0	1	2014-10-13 13:09:15	2014-10-13 13:09:15	120	space_age.rb
220	17	b5490a75866068858114b25a	superseded	ruby	space-age	class SpaceAge\n\n  EARTH_YR    = 31557600.0\n  MERCURY_YR  = 0.2408467  * EARTH_YR\n  VENUS_YR    = 0.61519726 * EARTH_YR\n  MARS_YR     = 1.8808158  * EARTH_YR\n  JUPITER_YR  = 11.862615  * EARTH_YR\n  SATURN_YR   = 29.447498  * EARTH_YR\n  URANUS_YR   = 84.016846  * EARTH_YR\n  NEPTUNE_YR  = 164.79132  * EARTH_YR\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n  def seconds\n    @seconds\n  end\n  def method_missing(m, *args)\n      str = "Called #{m} with #{args.inspect}"\n  end\n  # def on_mercury\n  #   (@seconds/MERCURY_YR).round(2)\n  # end\n  # def on_venus\n  #   (@seconds/VENUS_YR).round(2)\n  # end\n  # def on_earth\n  #   (@seconds/EARTH_YR).round(2)\n  # end\n  # def on_mars\n  #   (@seconds/MARS_YR).round(2)\n  # end\n  # def on_jupiter\n  #   (@seconds/JUPITER_YR).round(2)\n  # end\n  # def on_saturn\n  #   (@seconds/SATURN_YR).round(2)\n  # end\n  # def on_uranus\n  #   (@seconds/URANUS_YR).round(2)\n  # end\n  # def on_neptune\n  #   (@seconds/NEPTUNE_YR).round(2)\n  # end\n\nend	\N	\N	0	2	2014-10-15 00:00:54	2014-10-15 00:00:54	120	space_age.rb
221	17	5b7de89e8ff287f18294e921	superseded	ruby	space-age	class SpaceAge\n\n  attr_reader :seconds\n\n  EARTH_YR    = 31557600.0\n  RATIO_TO_EARTH = {\n    on_mercury: 0.2408467, \n    on_venus: 0.61519726, \n    on_earth: 1.0, \n    on_mars: 1.8808158, \n    on_jupiter: 11.862615, \n    on_saturn: 29.447498, \n    on_uranus: 84.016846, \n    on_neptune: 164.79132    \n  }\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n  \n  def method_missing(m, *args, &block)  \n    if self.respond_to?(m)\n      planet_yr = RATIO_TO_EARTH[m.to_sym]*SpaceAge::EARTH_YR\n      (@seconds/planet_yr).round(2)   \n    else\n      raise "#{m} method Not Found on class #{self.class}"\n    end        \n  end\n  \n  def respond_to?(method, include_private = false)\n    return true if (RATIO_TO_EARTH.include?(method.to_sym))\n    super\n  end \n\nend	\N	\N	0	5	2014-10-19 12:21:40	2014-10-19 12:21:40	120	space_age.rb
222	17	8dc95530dc1d794213280f7e	superseded	ruby	space-age	class SpaceAge\n\n  EARTH_YR    = 31557600.0\n  MERCURY_YR  = 0.2408467  * EARTH_YR\n  VENUS_YR    = 0.61519726 * EARTH_YR\n  MARS_YR     = 1.8808158  * EARTH_YR\n  JUPITER_YR  = 11.862615  * EARTH_YR\n  SATURN_YR   = 29.447498  * EARTH_YR\n  URANUS_YR   = 84.016846  * EARTH_YR\n  NEPTUNE_YR  = 164.79132  * EARTH_YR\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n  \n  def seconds\n    @seconds\n  end\n  \n  def method_missing(m, *args, &block)  \n    planet_yr = m.to_s.split("on_")[1].upcase+"_YR"\n    (@seconds/SpaceAge.const_get(planet_yr)).round(2)\n  end\n\nend	\N	\N	0	3	2014-10-22 06:30:55	2014-10-22 06:30:55	120	space_age.rb
223	17	eacbfadf8c9336bf21c7caa9	superseded	ruby	space-age	class SpaceAge\n\n  EARTH_YR    = 31557600.0\n  RATIO_TO_EARTH = {\n    on_mercury: "0.2408467", \n    on_venus: "0.61519726", \n    on_earth: "1.0", \n    on_mars: "1.8808158", \n    on_jupiter: "11.862615", \n    on_saturn: "29.447498", \n    on_uranus: "84.016846", \n    on_neptune: "164.79132"    \n  }\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n  \n  def seconds\n    @seconds\n  end\n  \n  def method_missing(m, *args, &block)  \n    if self.respond_to?(m)\n      planet_yr = SpaceAge::RATIO_TO_EARTH[m.to_sym].to_f*SpaceAge::EARTH_YR\n      (@seconds/planet_yr).round(2)   \n    else\n      raise "#{m} method Not Found on class #{self.class}"\n    end        \n  end\n  \n  def respond_to?(method, include_private = false)\n    return true if (SpaceAge::RATIO_TO_EARTH.include?(method.to_sym))\n    false\n  end \n\nend	\N	\N	0	4	2014-11-09 14:25:50	2014-11-09 14:25:50	120	space_age.rb
224	17	931996616be6ee898821c968	pending	ruby	matrix	class Matrix\n  attr_reader :rows, :columns\n\n  def initialize(string)\n    @rows = string.split("\\n").map { |row|\n      row.split.map(&:to_i)\n    }\n    @columns = @rows.transpose\n  end\nend	\N	\N	0	1	2014-09-18 06:25:14	2014-09-18 06:25:14	121	matrix.rb
225	17	1831a4756f8ddaa9970199f2	superseded	python	hamming	from itertools import izip\n\ndef hamming(dna1, dna2):\n    difference = abs(len(dna1) - len(dna2))\n    distance = sum(a != b for a, b in izip(dna1, dna2))\n    return difference + distance	\N	\N	0	2	2014-09-18 00:52:26	2014-09-18 00:52:26	122	hamming.py
226	17	a3f78b025e06def2135631bd	superseded	python	hamming	from itertools import izip\n\ndef hamming(dna1, dna2):\n    distance = abs(len(dna1) - len(dna2))\n    for a, b in izip(dna1, dna2):\n        if a != b: distance += 1\n    return distance	\N	\N	0	1	2014-10-06 04:38:18	2014-10-06 04:38:18	122	hamming.py
227	17	2e094b2c1d9910bdf50d305e	superseded	python	hamming	from itertools import izip\n\ndef hamming(dna1, dna2):\n    length_difference = abs(len(dna1) - len(dna2))\n    distance = sum(a != b for a, b in izip(dna1, dna2))\n    return length_difference + distance	\N	\N	0	3	2014-10-06 16:33:56	2014-10-06 16:33:56	122	hamming.py
228	17	1ed46ce56001edfff260774b	superseded	python	hamming	from itertools import izip_longest\n\ndef hamming(dna1, dna2):\n    return sum(a != b for a, b in izip_longest(dna1, dna2))	\N	\N	0	4	2014-10-20 19:22:28	2014-10-20 19:22:28	122	hamming.py
229	17	0806e50b1c64e674e88c8cdf	superseded	python	hamming	from itertools import izip\n\ndef hamming(dna1, dna2):\n    distance = abs(len(dna1) - len(dna2))\n    for a, b in izip(dna1, dna2):\n        if a != b: distance += 1\n    return distance	\N	\N	0	5	2014-10-24 15:14:40	2014-10-24 15:14:40	122	hamming.py
230	17	b18f63a92c22b99b46bdf66b	pending	python	hamming	from itertools import izip_longest\n\ndef hamming(dna1, dna2):\n    return sum(1 for x, y in izip_longest(dna1, dna2) if x != y)	\N	\N	0	6	2014-11-05 10:22:44	2014-11-05 10:22:44	122	hamming.py
232	20	b527a44c251f7f17a295a7c2	done	python	hamming	def hamming(strandA, strandB):\r\n    """Hamming test over two strands of DNA.\r\n       Compare characters pairwise (up to the mimumim length), and left over characters count as different\r\n    """\r\n    lA = len(strandA)\r\n    lB = len(strandB);\r\n    minLen = min( lA, lB)\r\n    d = max( lA, lB) - minLen\r\n    for x,y in zip( strandA[:minLen], strandB[:minLen]):\r\n       if x != y:\r\n          d += 1\r\n    return d\r\n\r\n\r\n\r\n\r	2014-11-18 03:41:06	\N	0	1	2014-11-14 17:39:22	2014-11-14 17:39:22	124	hamming.py
233	20	703c5e1c79b2a73e67e35c1b	done	ruby	raindrops	class Raindrops\n  def self.convert(drop_number)\n    answer = ""\n    answer << "Pling" if Raindrops.divisible_check(drop_number, 3)\n    answer << "Plang" if Raindrops.divisible_check(drop_number, 5)\n    answer << "Plong" if Raindrops.divisible_check(drop_number, 7)\n    answer = drop_number.to_s if answer == ""\n    answer\n  end\n\n  def self.divisible_check(drop_number, divisor)\n    drop_number % divisor == 0\n  end\n\nend	2014-11-21 10:43:32	\N	0	1	2014-11-18 10:16:13	2014-11-18 10:16:13	125	raindrops.rb
234	20	d7ad03248a547f14fad590e9	done	ruby	etl	class ETL\n  \n  class << self\n    \n    def transform(old_data)\n      old_data.keys.each_with_object({}) do |score,new_data| \n        scores_by_letter = new_hash_using_keys_and_value(old_data[score], score)\n        new_data.merge!(scores_by_letter)\n      end\n    end\n\n    private\n\n    def new_hash_using_keys_and_value(new_keys, value)\n      new_keys.each_with_object({}) do |key, new_hash| \n        new_hash[key.downcase] = value \n      end\n    end\n\n  end\n\nend	2014-11-24 02:21:06	\N	0	1	2014-11-20 16:46:23	2014-11-20 16:46:23	126	etl.rb
235	20	ad73916714dc7e7036494c6b	superseded	elixir	phone-number	defmodule Phone do\n  import String, only: [replace: 3, starts_with?: 2, slice: 3]\n\n  def number(input) do\n    input |> sanitize |> validate\n  end\n\n  defp sanitize(input) do\n    replace(input, %r/[^0-9]+/, "")\n  end\n\n  defp validate(number) do\n    length = String.length(number)\n    cond do\n      length == 10 -> number\n      length == 11 && starts_with?(number, "1") -> slice(number, 1, 10)\n      true -> "0000000000"\n    end\n  end\n\n  def pretty(input) do\n    input |> number |> format\n  end\n\n  defp format(number) do\n    "(" <> area_code(number) <> ") " <> prefix(number) <> "-" <> line(number)\n  end\n\n  def area_code(number) do\n    slice(number, 0, 3)\n  end\n\n  defp prefix(number) do\n    slice(number, 3, 3)\n  end\n\n  defp line(number) do\n    slice(number, 6, 4)\n  end\n\nend	\N	\N	0	1	2014-11-19 09:39:36	2014-11-19 09:39:36	127	phone-number.exs
236	20	1af84494c5a89c4d1ae553af	done	elixir	phone-number	defmodule Phone do\n  import String, only: [replace: 3, starts_with?: 2, slice: 3]\n\n  def number(input) do\n    input |> sanitize |> validate\n  end\n\n  defp sanitize(input) do\n    replace(input, %r/[^0-9]+/, "")\n  end\n\n  defp validate(number) do\n    length = String.length(number)\n    cond do\n      length == 10 -> number\n      length == 11 && starts_with?(number, "1") -> slice(number, 1, 10)\n      true -> "0000000000"\n    end\n  end\n\n  def pretty(input) do\n    input |> number |> format\n  end\n\n  defp format(number) do\n    "(#{area_code(number)}) #{prefix(number)}-#{line(number)}"\n  end\n\n  def area_code(number) do\n    slice(number, 0, 3)\n  end\n\n  defp prefix(number) do\n    slice(number, 3, 3)\n  end\n\n  defp line(number) do\n    slice(number, 6, 4)\n  end\n\nend	2014-11-29 15:27:04.667153	\N	0	2	2014-11-22 06:16:27	2014-11-22 06:16:27	127	phone-number.exs
237	20	609bbc9e57df80d271d6e2a1	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n      @nucleotide = nucleotides.split("") \n  end\n\n  def count(char)\n    if char == 'X'\n      raise ArgumentError\n    else\n      num = 0\n      @nucleotide.each do |tide|\n        if tide == char\n          num += 1\n        else\n          num = num\n        end\n      end\n      num\n    end\n  end\n\n  def nucleotide_counts()\n    nucleotide_hash= {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n      @nucleotide.each do| tide |\n      nucleotide_hash[tide] ||= 0\n      nucleotide_hash[tide]+=1\n      end\n      nucleotide_hash\n  end\nend	\N	\N	0	1	2014-11-15 15:46:18	2014-11-15 15:46:18	128	nucleotide-count.rb
238	20	9a26ff53a87ef8b7c34a3a6d	done	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n      @nucleotide = nucleotides.split("") \n  end\n\n  def count(char)\n    if isValid(char) == false\n      raise ArgumentError\n    else\n      num = 0\n      @nucleotide.each do |tide|\n        if tide == char\n          num += 1\n        else\n          num = num\n        end\n      end\n      num\n    end\n  end\n\n  def nucleotide_counts()\n    nucleotide_hash= {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n      @nucleotide.each do| tide |\n      nucleotide_hash[tide] ||= 0\n      nucleotide_hash[tide]+=1\n      end\n      nucleotide_hash\n  end\n\n  def isValid(char)\n    if char == 'A' || char == 'T' || char == 'C' || char == 'G' || char == 'U'\n      true\n    else\n      false\n    end\n  end\nend	2014-11-21 07:43:23	\N	0	2	2014-11-19 21:23:46	2014-11-19 21:23:46	128	nucleotide-count.rb
240	21	99e7456d39bce4efe86ffd6f	done	python	rna-transcription	class DNA:\n    def __init__(self, rna):\n        self.rna = rna\n\n    def to_rna(self):\n        _ = list(self.rna)\n        for i, c in enumerate(_):\n            if c == 'G':\n                _[i] = 'C'\n            if c == 'C':\n                _[i] = 'G'\n            if c == 'T':\n                _[i] = 'A'\n            if c == 'A':\n                _[i] = 'U'\n        return "".join(_)	2014-05-15 12:37:33	\N	0	1	2014-05-12 07:27:42	2014-05-12 07:27:42	130	dna.py
241	36	09fd0295ff75b377e689c2ab	superseded	cpp	food-chain	#include <string>\n#include <map>\nusing namespace std;\n\nnamespace food_chain {\n\tstring begin = "I know an old lady who swallowed a ";\n\tstring end = "I don't know why she swallowed the fly. Perhaps she'll die.\\n";\n\tmap<int, string> what = {\n\t\t{1, "fly"},\n\t\t{2, "spider"},\n\t\t{3, "bird"},\n\t\t{4, "cat"},\n\t\t{5, "dog"},\n\t\t{6, "goat"},\n\t\t{7, "cow"},\n\t\t{8, "horse"}\n\t};\n\tmap<int, string> how = {\n\t\t{1, ""},\n\t\t{2, "It wriggled and jiggled and tickled inside her.\\n"},\n\t\t{3, "How absurd to swallow a bird!\\n"},\n\t\t{4, "Imagine that, to swallow a cat!\\n"},\n\t\t{5, "What a hog, to swallow a dog!\\n"},\n\t\t{6, "Just opened her throat and swallowed a goat!\\n"},\n\t\t{7, "I don't know how she swallowed a cow!\\n"},\n\t\t{8, "She's dead, of course!\\n"}\n\t};\n\n    string verse(int n) {\n    \tstring song = begin + what[n] + ".\\n" + how[n];\n    \tif(n == 8)\n    \t\treturn song;\n    \tfor(int i = n; i > 1; i--) {\n    \t\tsong += "She swallowed the " + what[i] + " to catch the " + what[i-1];\n    \t\tif(i == 3)\n    \t\t\tsong += " that wriggled and jiggled and tickled inside her";\n    \t\tsong += ".\\n";\n    \t}\n    \tsong += end;\n    \treturn song;\n    }\n\n    string verses(int first, int last) {\n    \tstring song = "";\n    \tfor(int i = first; i <= last; i++)\n    \t\tsong += verse(i) + "\\n";\n    \treturn song;\n    }\n\n    string sing() {\n    \treturn verses(1, 8);\n    }\n}	\N	\N	0	1	2014-09-12 13:50:12	2014-09-12 13:50:12	131	food_chain.h
242	36	41a9590456b41f325c8c99c3	done	cpp	food-chain	#include <string>\n#include <vector>\nusing namespace std;\n\nnamespace food_chain {\n\tstring begin = "I know an old lady who swallowed a ";\n\tstring end = "I don't know why she swallowed the fly. Perhaps she'll die.\\n";\n\tstring what[] = { \n\t\t"fly",\n\t\t"spider",\n\t\t"bird",\n\t\t"cat",\n\t\t"dog",\n\t\t"goat",\n\t\t"cow",\n\t\t"horse"\n\t};\n\tstring how[] = {\n\t\t"",\n\t\t"It wriggled and jiggled and tickled inside her.\\n",\n\t\t"How absurd to swallow a bird!\\n",\n\t\t"Imagine that, to swallow a cat!\\n",\n\t\t"What a hog, to swallow a dog!\\n",\n\t\t"Just opened her throat and swallowed a goat!\\n",\n\t\t"I don't know how she swallowed a cow!\\n",\n\t\t"She's dead, of course!\\n"\n\t};\n\n    string verse(int n) {\n    \tstring song = begin + what[n-1] + ".\\n" + how[n-1];\n    \tif(n == 8)\n    \t\treturn song;\n    \tfor(int i = n-1; i > 0; i--) {\n    \t\tsong += "She swallowed the " + what[i] + " to catch the " + what[i-1];\n    \t\tif(i == 2)\n    \t\t\tsong += " that wriggled and jiggled and tickled inside her";\n    \t\tsong += ".\\n";\n    \t}\n    \tsong += end;\n    \treturn song;\n    }\n\n    string verses(int first, int last) {\n    \tstring song = "";\n    \tfor(int i = first; i <= last; i++)\n    \t\tsong += verse(i) + "\\n";\n    \treturn song;\n    }\n\n    string sing() {\n    \treturn verses(1, 8);\n    }\n}	2014-09-30 07:17:10	\N	0	2	2014-09-28 12:56:08	2014-09-28 12:56:08	131	food_chain.h
243	36	64400a946e8bd504116aad79	done	ruby	space-age	# class SpaceAge\nclass SpaceAge\n  attr_reader :seconds\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  def in_earth_years\n    @seconds.to_f / 31_557_600\n  end\n\n  {\n    'mercury' => 0.2408467,\n    'venus'   => 0.61519726,\n    'earth'   => 1,\n    'mars'    => 1.8808158,\n    'jupiter' => 11.862615,\n    'saturn'  => 29.447498,\n    'uranus'   => 84.016846,\n    'neptune'   => 164.79132\n  }.each do |k, v|\n    define_method "on_#{k}" do\n      (in_earth_years / v).round(2)\n    end\n  end\nend	2014-11-04 08:13:36	\N	0	1	2014-11-03 19:58:08	2014-11-03 19:58:08	132	space_age.rb
244	36	d75dfa89b89b5c97b8e4e535	done	ruby	nth-prime	class Prime\n\n  def self.is_prime?(num)\n    divisors = (2..num-1)\n    divisors.each do |i|\n      return false if num % i == 0\n    end\n    return true\n  end\n\n  def self.generate_primes(num)\n    primes = [2]\n    start_count = 3\n    until primes.length == num\n      primes << start_count if is_prime?(start_count)\n      start_count += 1\n    end\n    primes.last\n  end\n\n  def self.nth(num)\n    raise ArgumentError if num == 0\n    generate_primes(num)\n  end\n\nend	2014-09-05 00:46:23	\N	0	1	2014-08-27 02:17:23	2014-08-27 02:17:23	133	prime.rb
245	36	5aed74b4b53a4c5c6c2b2786	done	ruby	grade-school	class School\n\n  def initialize\n    @grades = {}\n  end\n\n  def add(name, grade)\n    @grades[grade] = [] unless @grades.include? grade\n    @grades[grade] << name\n    @grades[grade].sort!\n  end\n\n  def grade(grade)\n    @grades[grade] || []\n  end\n\n  def to_hash\n    Hash[@grades.sort]\n  end\n\nend	2014-09-22 08:09:04	\N	0	1	2014-09-21 11:46:40	2014-09-21 11:46:40	134	school.rb
246	36	ef91a1069d1a89104df20240	done	ruby	leap	class Year\n\tdef initialize(year)\n\t\t@year = year\n\tend\n\n\tdef leap?\n\t\tif @year % 400 == 0\n\t\t\ttrue\n\t\telsif @year % 100 == 0\n\t\t\tfalse\n\t\telsif @year % 4 == 0\n\t\t\ttrue\n\t\telse\n\t\t\tfalse\n\t\tend\n\tend\nend	2014-09-18 07:10:49	\N	0	1	2014-09-07 05:22:38	2014-09-07 05:22:38	135	year.rb
247	36	8ff7b00223e4968ecef1ebd3	done	clojure	rna-transcription	(ns dna (:require [clojure.string :as str]))\n\n(defn to-rna [text] (str/replace text #"T" "U"))	2014-10-13 21:24:28	\N	0	1	2014-10-02 12:39:31	2014-10-02 12:39:31	136	rna-transcription.clj
248	36	7bf4dcb692728d24af137dae	superseded	haskell	word-count	module WordCount\n   (wordCount)\nwhere\n\nimport Data.Map (Map)\nimport qualified Data.Map as Map\nimport Data.List.Split (wordsBy)\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map String Int\nwordCount s = \n    let words' = wordsBy (not.isAlphaNum) (map toLower s)\n    in foldr makeWordMap Map.empty words'\n  where\n    makeWordMap word map = Map.insertWith (+) word 1 map	\N	\N	0	1	2014-08-28 16:06:22	2014-08-28 16:06:22	137	word-count.hs
249	36	72cf21176656417052232b6f	done	haskell	word-count	module WordCount\n   (wordCount)\nwhere\n\nimport Data.Map (Map)\nimport qualified Data.Map as Map\nimport Data.List.Split (wordsBy)\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map String Int\nwordCount s = \n    let words' = wordsBy (not.isAlphaNum) (map toLower s)\n    in Map.fromListWith (+) (zip words' (repeat 1))	2014-10-07 09:39:15	\N	0	2	2014-09-26 09:43:18	2014-09-26 09:43:18	137	word-count.hs
250	36	b0dbe32cd8fad52ee32b530b	done	go	leap	package leap\n\nfunc IsLeapYear(year int) (isLeapYear bool) {\n\tisLeapYear = false\n\n\tif year%4 == 0 {\n\t\tisLeapYear = true\n\t}\n\n\tif year%100 == 0 && year%400 == 0 {\n\t\tisLeapYear = true\n\t} else if year%100 == 0 {\n\t\tisLeapYear = false\n\t}\n\n\treturn\n}\n\n// rules\n// on every year that is evenly divisible by 4\n//   except every year that is evenly divisible by 100\n//     unless the year is also evenly divisible by 400	2014-08-26 12:59:24	\N	0	1	2014-08-25 20:49:50	2014-08-25 20:49:50	138	leap.go
251	36	6793bf1afcb713c504b241b3	done	javascript	hamming	exports.compute = function ( s1, s2 ) {\n\n\tvar length;\n\n\tvar sanitizeInput = function() {\n\t\ts1 = s1.toString().toLowerCase();\n\t\ts2 = s2.toString().toLowerCase();\n\t};\n\n\tvar detectLength = function() {\n\t\tlength = Math.min( s1.length, s2.length );\n\t};\n\n\tvar getDistance = function() {\n\t\tvar i, distance = 0;\n\n\t\tfor ( i = 0; i < length; i++ ) {\n\t\t\tdistance = ( s1[i] === s2[i] ) ? distance : distance + 1;\n\t\t}\n\n\t\treturn distance;\n\t};\n\n\tsanitizeInput();\n\tdetectLength();\n\n\treturn getDistance();\n\n};	2014-10-05 07:32:30	\N	0	1	2014-09-26 12:45:14	2014-09-26 12:45:14	139	hamming.js
252	36	9c7c8961fcf85ff5c8abd301	done	python	anagram	import re\n\nclass Anagram:\n\n\tdef __init__(self,string):\n\t\tself.string = string\n\t\tself.usrLetters = list(string.lower())\n\t\tself.usrLetters.sort()\n\n\tdef match(self, array):\n\t\tmatch = []\n\n\t\tfor i in range(len(array)):\n\t\t\tletterList = list(array[i].lower());\n\t\t\tletterList.sort()\n\n\t\t\tif array[i] == self.string: ## if there is a same word don't count it\n\t\t\t\tcontinue;\n\t\t\telif letterList == self.usrLetters:\n\t\t\t\tmatch.append(array[i])\n\n\t\treturn match	2014-08-29 13:52:21	\N	0	1	2014-08-26 23:58:22	2014-08-26 23:58:22	140	anagram.py
253	36	21b1b5c44cabd097aed3419e	done	ruby	robot-name	class Robot\n  @@names = []\n  \n  def initialize\n    @name = nil\n  end\n  \n  def name\n    if @name.nil?\n      retries = 100\n      while @name.nil? && retries > 0\n        @name = (0..1).map { ('A'..'Z').to_a[rand(26)] }.join + (0..2).map { rand(10).to_s }.join\n        @name = nil if @@names.include? @name\n        retries -= 1\n      end\n      if @name.nil?\n        raise 'No name available'\n      else\n        @@names << @name\n      end\n    end\n    \n    return @name\n  end\n  \n  def reset\n    @@names.delete @name\n    @name = nil\n  end\nend	2014-09-11 03:36:55	\N	0	1	2014-09-02 05:24:27	2014-09-02 05:24:27	141	robot.rb
254	36	1d4f8f570c5abc6932c74ef4	superseded	python	rna-transcription	def to_rna(dna):\n    conversions = {\n                        'G' : 'C',\n                        'C' : 'G',\n                        'T' : 'A',\n                        'A' : 'U'\n                        }\n    rna = ""\n    for nucleotide in dna:\n        rna += conversions[nucleotide]\n    return rna	\N	\N	0	1	2014-09-18 17:09:59	2014-09-18 17:09:59	142	dna.py
255	36	516bdc04fe7b81fff0b10b1a	superseded	python	rna-transcription	from string import maketrans\n\ndef to_rna(dna):\n    conversions =  maketrans('GCTA', 'CGAU')\n    return dna.translate(conversions)	\N	\N	0	2	2014-09-30 00:11:30	2014-09-30 00:11:30	142	dna.py
256	36	5eea231e9158be14ff3a7d5f	done	python	rna-transcription	from string import maketrans\n\nconversions =  maketrans('GCTA', 'CGAU')\ndef to_rna(dna):\n    return dna.translate(conversions)	2014-10-29 18:52:44	\N	0	3	2014-10-21 17:02:04	2014-10-21 17:02:04	142	dna.py
257	36	11019f371375618c93ad60e0	superseded	ruby	bob	class Bob\n  def hey(statement)\n    s = statement.extend(Expressive)\n    response = "Whatever."\n    response = "Fine. Be that way." if s.blank?\n    response = "Woah, chill out!" if s.shouting?\n    response = "Sure." if s.question?\n    return response\n  end\nend\n\nprivate\n\nmodule Expressive\n  def blank?\n    self.nil? ? true : self.empty?\n  end\n\n  def shouting?\n    self.upcase == self unless self.blank?\n  end\n  \n  def question?\n    self.end_with?('?') unless self.blank?\n  end\nend	\N	\N	0	1	2014-08-26 02:18:00	2014-08-26 02:18:00	143	bob.rb
258	36	957a9dcb476f9d046e722577	done	ruby	bob	class Bob\n  def hey(statement)\n    s = statement.extend(Expressive)\n    \n    case\n    when s.silent?\n      response = "Fine. Be that way."\n    when s.shouting?\n      response = "Woah, chill out!"\n    when s.question?\n      response = "Sure." if s.question?\n    else\n      response = "Whatever."\n    end\n    \n    return response\n  end\nend\n\nprivate\n\nmodule Expressive\n  def silent?\n    self.nil? ? true : self.empty?\n  end\n\n  def shouting?\n    self.upcase == self unless self.silent?\n  end\n  \n  def question?\n    self.end_with?('?') unless self.silent?\n  end\nend	2014-10-07 23:55:21	\N	0	2	2014-10-02 11:56:46	2014-10-02 11:56:46	143	bob.rb
259	36	41511c96c09a57849c0b0fae	done	python	bob	def hey(string):\n\tif not string.strip(): return 'Fine. Be that way!'\n\telif string.isupper(): return 'Whoa, chill out!'\n\telif string.endswith('?'): return 'Sure.'\n\treturn 'Whatever.'	2014-10-13 23:27:35	\N	0	3	2014-10-06 13:34:48	2014-10-06 13:34:48	144	bob.py
260	36	fcde4a3191cfb35b7065c750	superseded	python	bob	def hey(string):\n\tif not string.strip():\n\t\treturn 'Fine. Be that way!'\n\tif string.isupper():\n\t\treturn 'Whoa, chill out!'\n\tif string[-1] == '?':\n\t\treturn 'Sure.'\n\treturn 'Whatever.'\n\nprint hey("It's OK if you don't want to go to the DMV.")	\N	\N	0	1	2014-10-11 11:29:22	2014-10-11 11:29:22	144	bob.py
261	36	7484f8df06817612649f8934	superseded	python	bob	def hey(string):\n\tif not string.strip():\n\t\treturn 'Fine. Be that way!'\n\tif string.isupper():\n\t\treturn 'Whoa, chill out!'\n\tif string[-1] == '?':\n\t\treturn 'Sure.'\n\treturn 'Whatever.'	\N	\N	0	2	2014-11-02 05:50:48	2014-11-02 05:50:48	144	bob.py
262	36	e7167bcbfee95fa8bfbb1198	superseded	haskell	grade-school	module School (\n                School\n              , add\n              , empty\n              , sorted\n              , grade\n              ) where\n\nimport Data.List\n\ntype School = [(Int, [String])]\n\nadd :: Int -> String -> School -> School\nadd grade name [] = [(grade, [name])]\nadd grade name ((grade', names) : xs) \n    | grade' == grade   = (grade, name:names) : xs \n    | otherwise         = (grade',names) : add grade name xs\n\nempty :: School\nempty = []\n\nsorted :: School -> School\nsorted = sort . map (\\(a,b) -> (a, sort b))\n\ngrade :: Int -> School -> [String]\ngrade g = sort . concat . map snd . filter ((==) g . fst)	\N	\N	0	1	2014-09-13 14:05:36	2014-09-13 14:05:36	145	School.hs
263	36	42b13f3a0db1a54b13907ef1	done	haskell	grade-school	module School (\n                School\n              , add\n              , empty\n              , sorted\n              , grade\n              ) where\n\nimport Data.List\nimport qualified Data.IntMap as IntMap\n\ntype School = IntMap.IntMap [String]\n\nadd :: Int -> String -> School -> School\nadd grade name = IntMap.insertWith (++) grade [name]\n\nempty :: School\nempty = IntMap.empty\n\nsorted :: School -> [(Int,[String])] \nsorted = IntMap.toList . IntMap.map sort\n\ngrade :: Int -> School -> [String]\ngrade g = concat . IntMap.elems . IntMap.filterWithKey (\\k _ -> k == g)	2014-09-20 08:40:05	\N	0	2	2014-09-19 21:19:07	2014-09-19 21:19:07	145	School.hs
264	36	d6763084846c0f3bc468869e	done	haskell	etl	module ETL (transform) where\n\nimport Data.Char\nimport Data.Map (Map)\nimport qualified Data.Map.Strict as Map\n\ntransform :: Map Int [String] -> Map String Int\ntransform old = Map.fromList [(map toLower letter, points) | (points, letters) <- Map.toList old, letter <- letters]	2014-09-15 07:38:50	\N	0	1	2014-09-10 07:40:32	2014-09-10 07:40:32	146	ETL.hs
265	36	89bcf51835a9e84c53feac40	done	javascript	word-count	var words = function(phrase){\n\tvar counts = {};\n \tvar phrase_words = phrase.replace('\\n', ' ').split(' ');\n\n \tfor (var i =0; i < phrase_words.length; i++){\n\t\tcurrent_word = phrase_words[i].replace(/[\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()@¿¡?]/g,'').toLowerCase();\n\t\tif (counts[current_word])\n\t\t\tcounts[current_word] += 1;\n\t\telse if (current_word === ''); //do nothing\n\t\telse \n\t\t\tcounts[current_word] = 1; \n\t};\n\n\treturn counts;\n};\n \nmodule.exports = words;	2014-10-29 23:39:29	\N	0	1	2014-10-24 04:02:37	2014-10-24 04:02:37	147	word-count.js
266	36	82ec35f83bb16354ed2b1dbb	done	clojure	bob	(ns bob (\n    :require [clojure.string :as str]))\n\n(defn- question? [sentence]\n  (= (last sentence) \\?))\n\n(defn- shouting? [sentence]\n  (and (= sentence (str/upper-case sentence))\n       (not= sentence (str/lower-case sentence))))\n\n(defn response-for [sentence]\n  (cond\n    (shouting? sentence)\n      "Woah, chill out!"\n    (question? sentence)\n      "Sure."\n    (str/blank? sentence)\n      "Fine. Be that way!"\n    :else\n      "Whatever.")\n)	2014-09-09 06:32:50	\N	0	3	2014-09-02 23:36:54	2014-09-02 23:36:54	148	bob.clj
267	36	27b9f6a607108874282c124b	superseded	clojure	bob	(ns bob (\n    :require [clojure.string :as str]))\n\n(def patterns [\n    ; At least some letters, none of them lower-case, means shouting\n    [#(and\n        (= % (str/upper-case %))\n        (not= % (str/lower-case %)))\n     "Woah, chill out!"]\n\n    [#(= (last %) \\?)\n     "Sure."]\n\n    [#(empty? (str/trim %))\n     "Fine. Be that way!"]\n\n    [not-empty\n     "Whatever."]\n])\n\n(defn response-for [sentence]\n    (some #(if ((% 0) sentence) (% 1)) patterns)\n)	\N	\N	0	1	2014-09-13 17:24:03	2014-09-13 17:24:03	148	bob.clj
268	36	45b0f7751f91bda25a0b1a6f	superseded	clojure	bob	(ns bob (\n    :require [clojure.string :as str]))\n\n(defn response-for [sentence]\n  (cond\n    (and (= sentence (str/upper-case sentence))\n         (not= sentence (str/lower-case sentence)))\n      "Woah, chill out!"\n    (= (last sentence) \\?)\n      "Sure."\n    (empty? (str/trim sentence))\n      "Fine. Be that way!"\n    :else\n      "Whatever.")\n)	\N	\N	0	2	2014-09-14 20:04:12	2014-09-14 20:04:12	148	bob.clj
269	36	2fa769907485291d56021d35	done	perl5	raindrops	package Raindrops;\nuse Modern::Perl;\n\nuse constant RAIN => [ Pling => 3 ],\n                     [ Plang => 5 ],\n                     [ Plong => 7 ];\n\nsub convert {\n    my ($n) = @_;\n\n    my @x = map { $n % $_->[1] ? () : $_->[0] } RAIN;\n\n    return join( '', @x ) || $n;\n}\n\n1;	2014-09-29 13:25:28	\N	0	1	2014-09-18 15:57:38	2014-09-18 15:57:38	149	Raindrops.pm
270	36	fd75210f1ab0c96279c77ac5	done	python	largest-series-product	from operator import mul\n\nclass Series(object):\n    def __init__(self, ns):\n        self.nums = [int(i) for i in ns]\n\n    def slices(self, n):\n        nums = self.nums\n        if len(nums) < n:\n            raise ValueError("Invalid slice length for this series: {}".format(n))\n        return [nums[i:i+n] for i in xrange(len(nums)-n+1)]\n\n    def largest_product(self, n):\n        ps = [reduce(mul, l, 1) for l in self.slices(n)]\n        if ps:\n            return max(ps)\n        return 0	2014-09-19 01:30:53	\N	0	1	2014-09-16 23:04:23	2014-09-16 23:04:23	150	series.py
271	36	d595a727888f76a595788093	done	python	leap	def is_leap_year(anno):\n\tif is_divisible_by_4(anno) and is_divisible_by_100(anno) and is_divisible_by_400(anno):\n\t\treturn True\n\telif is_divisible_by_4(anno) and not is_divisible_by_100(anno):\n\t\treturn True\n\telse:\n\t\treturn False\n\n\ndef is_divisible_by_4(anno):\n\treturn anno % 4 == 0\n\ndef is_divisible_by_100(anno):\n\treturn anno % 100 == 0\n\ndef is_divisible_by_400(anno):\n\treturn anno % 400 == 0	2014-09-17 05:03:19	\N	0	1	2014-09-07 07:11:44	2014-09-07 07:11:44	151	year.py
272	36	9c53f9bd6040115c2c21e909	done	ruby	raindrops	class Raindrops\n\n  def self.convert(x)\n    \n    str = ''\n    str += 'Pling' if x % 3 == 0\n    str += 'Plang' if x % 5 == 0\n    str += 'Plong' if x % 7 == 0\n\n    str = x.to_s if str.empty?\n    str\n  end\n \nend	2014-09-17 09:17:29	\N	0	1	2014-09-07 20:58:14	2014-09-07 20:58:14	152	raindrops.rb
314	14	16c3d7ccf27f9fe1951c30f3	pending	perl5	raindrops	package Raindrops;\n\nsub convert {\n    my $i = shift;\n    my $s = '';\n    $s .= 'Pling' if $i % 3 == 0;\n    $s .= 'Plang' if $i % 5 == 0;\n    $s .= 'Plong' if $i % 7 == 0;\n    $s  = $i if $s eq '';\n    return $s;\n}\n\n1;	\N	\N	0	1	2014-09-15 18:47:54	2014-09-15 18:47:54	171	Raindrops.pm
315	14	96905210651b8c4a576bd618	pending	python	meetup	# Imports\nfrom datetime import date\nfrom calendar import Calendar\n\n# Functions\ndef meetup_day(year, month, day_name, qualifier):\n    # Variables we're going to use:\n    day_list   = list(Calendar().itermonthdates(year,month))\n    month_dict = {} # Day numbers are keys; day names are definitions.\n\n    for current_day in day_list:\n        # Extract certain components from the current day.\n        current_day_number   = int(current_day.strftime('%d'))\n        current_month_number = int(current_day.strftime('%m'))\n        current_day_name     = current_day.strftime('%A')\n        \n        # If the day is within the current month, add it to the dictionary.\n        if current_month_number == month:\n            month_dict[current_day_number] = current_day_name\n            \n    # OK, we (presumably) have a dictionary of day numbers and their names.\n    # Now we can figure out what we're looking for.\n\n    # First, let's test for numeric qualifiers.\n    if qualifier == '1st' or  qualifier == '2nd' or qualifier == '3rd' or \\\n        qualifier == '4th' or qualifier == '5th':\n            # The first character is also the desired count.\n            desired_count = int(qualifier[0])\n            \n            # We'll need a counter to test against the desired count.\n            counter = 0\n\n            for current_day in month_dict.keys():\n              if month_dict[current_day] == day_name:\n                    counter += 1\n                    if counter == desired_count:\n                        # We found a date. Return it.\n                        return date(year, month, current_day)\n\n    # Next, try testing for the 'teenth' qualifier.\n    if qualifier == 'teenth':\n        # We're looking for a day number in the teen range.\n        for current_day in range(13,20):\n            if month_dict[current_day] == day_name:\n                # We found a date. Return it.\n                return date(year, month, current_day)\n    \n    # Finally, try testing for the 'last' qualifier.\n    if qualifier == 'last':\n        # Walk backwards through dictionary looking for the first occurrence.\n        for current_day in range (len(month_dict), 1, -1):\n            if month_dict[current_day] == day_name:\n                # We found a date. Return it.\n                return date(year, month, current_day)	\N	\N	0	1	2014-09-30 05:42:32	2014-09-30 05:42:32	172	meetup.py
273	36	39d89461968dbc4d0ffd5863	superseded	ruby	rna-transcription	class Complement\n\n  def self.of_dna(dna)\n    rna = ''\n    dna.each_char do |c|\n      case c.upcase\n      when 'G'\n        rna += 'C'\n      when 'C'\n        rna += 'G'\n      when 'T'\n        rna += 'A'\n      when 'A'\n        rna += 'U'\n      end\n    end\n\n    rna\n  end\n\n\n  def self.of_rna(rna)\n    dna = ''\n    rna.each_char do |c|\n      case c.upcase\n      when 'C'\n        dna += 'G'\n      when 'G'\n        dna += 'C'\n      when 'A'\n        dna += 'T'\n      when 'U'\n        dna += 'A'\n      end\n    end\n\n    dna\n  end\nend	\N	\N	0	1	2014-08-24 18:55:19	2014-08-24 18:55:19	153	complement.rb
274	36	bc69d50c2b68afea047d22cd	done	ruby	rna-transcription	class Complement\n\n  def self.pairs\n    { \n      'G' => 'C',\n      'C' => 'G',\n      'T' => 'A',\n      'A' => 'U'\n    }\n  end\n\n  def self.of_dna(dna)\n    rna = ''\n\n    dna.each_char do |c|\n      rna += pairs[c.upcase]\n    end\n\n    rna\n  end\n\n  def self.of_rna(rna)\n    dna = ''\n\n    rna.each_char do |c|\n      dna += pairs.key(c.upcase)\n    end\n\n    dna\n  end\nend	2014-09-12 08:54:43	\N	0	2	2014-09-03 13:48:46	2014-09-03 13:48:46	153	complement.rb
275	36	47af8996ba753defb61d6667	superseded	ruby	gigasecond	class Gigasecond\n  def self.from(day)\n    new = day.strftime('%s').to_i + 10**9\n    Date.strptime(new.to_s, '%s')\n  end\nend	\N	\N	0	1	2014-08-26 12:02:09	2014-08-26 12:02:09	154	gigasecond.rb
276	36	25075a7b64a20b40d527bc1f	done	ruby	gigasecond	class Gigasecond\n  def self.from(day)\n    Time.at(day.to_time.to_i + 10**9).to_date\n  end\nend	2014-09-29 16:44:04	\N	0	2	2014-09-22 14:09:00	2014-09-22 14:09:00	154	gigasecond.rb
277	36	c36044d1fb67bfcf4a109da1	done	coffeescript	hexadecimal	class Hexidecimal\n  @VALUES = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n  @BASE = 16\n\n  constructor: (hex) ->\n    @chars = hex.toUpperCase().split('').reverse()\n\n  toDecimal: ->\n    return 0 unless Hexidecimal.isValid @chars.join('')\n    @chars.reduce(this.accumulator, 0)\n\n  @isValid: (hex) ->\n    /^[a-f0-9]+$/i.test hex\n\n  accumulator: (sum, hex, index) ->\n    return sum += Hexidecimal.VALUES.indexOf(hex) * Hexidecimal.BASE ** index\n\nmodule.exports = Hexidecimal	2014-09-04 04:05:09	\N	0	1	2014-09-03 07:17:37	2014-09-03 07:17:37	155	hexadecimal.coffee
278	36	7d13431f9f329217603819a8	superseded	haskell	roman-numerals	module Roman (numerals) where\r\nimport Data.Map.Strict (Map)\r\nimport qualified Data.Map.Strict as M\r\n\r\nnumerals :: Int -> String\r\nnumerals n\r\n    | n < 10    = get n\r\n    | n < 40    = repeatTens ++ get singles\r\n    | n < 100   =   get tens ++ get singles\r\n    | n < 400   = repeatHundreds ++ numerals tens ++ numerals singles\r\n    | n < 1000  = get hundreds   ++ numerals tens ++ numerals singles\r\n    | n < 3001  = repeatThousands ++ numerals hundreds ++ numerals tens\r\n                                                  ++ numerals singles\r\n    | otherwise = error "invalid input"\r\n  where\r\n    get x          = table M.! x\r\n    singles        =  n `mod` 10\r\n    tens           = (n `mod` 100) - singles\r\n    hundreds       = (n `mod` 1000) - tens - singles\r\n\r\n    repeatTens      = concat $ replicate (n `div` 10)   (get 10)\r\n    repeatHundreds  = concat $ replicate (n `div` 100)  (get 100)\r\n    repeatThousands = concat $ replicate (n `div` 1000) (get 1000)\r\n\r\ntable :: Map Int String\r\ntable = M.fromList\r\n        [(0,      "")\r\n        ,(1,     "I") ,(6,    "VI")\r\n        ,(2,    "II") ,(7,   "VII")\r\n        ,(3,   "III") ,(8,  "VIII")\r\n        ,(4,    "IV") ,(9,    "IX")\r\n        ,(5,     "V") ,(10,    "X")\r\n\r\n        ,(40,   "XL") ,(400,  "CD")\r\n        ,(50,    "L") ,(500,   "D")\r\n        ,(60,   "LX") ,(600,  "DC")\r\n        ,(70,  "LXX") ,(700, "DCC")\r\n        ,(80, "LXXX") ,(800,"DCCC")\r\n        ,(90,   "XC") ,(900,  "CM")\r\n        ,(100,   "C") ,(1000,  "M")\r\n        ]	\N	\N	0	1	2014-08-28 05:57:12	2014-08-28 05:57:12	156	Roman.hs
279	36	28ef50b8af531545cc474502	superseded	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nnumerals :: Int -> String\r\nnumerals n = num thousands\r\n          ++ num hundreds\r\n          ++ num tens\r\n          ++ num singles\r\n  where\r\n    singles   = n `mod` 10\r\n    tens      = n `mod` 100 - singles\r\n    hundreds  = n `mod` 1000 - tens - singles\r\n    thousands = n `mod` 10000 - hundreds - tens - singles\r\n\r\nnum :: Int -> String\r\nnum n\r\n    | n == 0    = ""\r\n    | n == 1    = "I"\r\n    | n == 5    = "V"\r\n    | n == 10   = "X"\r\n    | n == 50   = "L"\r\n    | n == 100  = "C"\r\n    | n == 500  = "D"\r\n    | n == 1000 = "M"\r\n    | fours     = numerals (n `div` 4) ++ numerals (n + n `div` 4)\r\n    | nines     = numerals (n `div` 9) ++ numerals (n + n `div` 9)\r\n    | n < 3001  = numerals (n - pow10) ++ numerals pow10\r\n    | otherwise = error "number not found"\r\n where\r\n    fours = n `elem` [4, 40, 400]\r\n    nines = n `elem` [9, 90, 900]\r\n    pow10 = 10 ^ floor (logBase 10 $ fromIntegral n :: Float)	\N	\N	0	2	2014-09-17 21:08:03	2014-09-17 21:08:03	156	Roman.hs
280	36	012adb5e8202e37fa3e0d728	superseded	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nnumerals :: Int -> String\r\nnumerals n = num thousands\r\n          ++ num hundreds\r\n          ++ num tens\r\n          ++ num singles\r\n  where\r\n    singles   = n `mod` 10\r\n    tens      = n `mod` 100 - singles\r\n    hundreds  = n `mod` 1000 - tens - singles\r\n    thousands = n `mod` 10000 - hundreds - tens - singles\r\n\r\nnum :: Int -> String\r\nnum 0    = ""\r\nnum 1    = "I"\r\nnum 5    = "V"\r\nnum 10   = "X"\r\nnum 50   = "L"\r\nnum 100  = "C"\r\nnum 500  = "D"\r\nnum 1000 = "M"\r\nnum n\r\n    | fours     = numerals (n `div` 4) ++ numerals (n + n `div` 4)\r\n    | nines     = numerals (n `div` 9) ++ numerals (n + n `div` 9)\r\n    | n < 3001  = numerals (n - pow10) ++ numerals pow10\r\n    | otherwise = error "number not found"\r\n where\r\n    fours = n `elem` [4, 40, 400]\r\n    nines = n `elem` [9, 90, 900]\r\n    pow10 = 10 ^ floor (logBase 10 $ fromIntegral n)	\N	\N	0	3	2014-09-24 21:11:30	2014-09-24 21:11:30	156	Roman.hs
281	36	2d62c5b3ff77cb2c499737b7	superseded	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nimport           Data.Maybe (fromJust)\r\nimport           Data.Map\r\nimport qualified Data.Map as M\r\n\r\nnumerals :: Int -> String\r\nnumerals n = num thousands\r\n          ++ num hundreds\r\n          ++ num tens\r\n          ++ num singles\r\n  where\r\n    thousands = n `mod` 10000 - hundreds - tens - singles\r\n    hundreds  = n `mod` 1000 - tens - singles\r\n    tens      = n `mod` 100 - singles\r\n    singles   = n `mod` 10\r\n\r\nnum :: Int -> String\r\nnum n\r\n    | n `M.member` base = fromJust $ M.lookup n base\r\n    | n < 3001          = numerals (n - pow10) ++ numerals pow10\r\n    | otherwise         = error "number not found"\r\n where\r\n    pow10 = 10 ^ floor (logBase 10 $ fromIntegral n)\r\n    base  = M.fromList\r\n      [(0,     ""), (40,  "XL")\r\n      ,(1,    "I"), (50,   "L")\r\n      ,(4,   "IV"), (90,  "XC")\r\n      ,(5,    "V"), (100,  "C")\r\n      ,(9,   "IX"), (400, "CD")\r\n      ,(10,   "X"), (500,  "D")\r\n      ,(900, "CM"), (1000, "M")]	\N	\N	0	4	2014-10-05 15:10:32	2014-10-05 15:10:32	156	Roman.hs
327	41	7587a0d0000ef03e53262319	superseded	javascript	rna-transcription	var complements = {\n  G: 'C',\n  C: 'G',\n  T: 'A',\n  A: 'U'\n};\n\nmodule.exports = function(dna){\n  dna = dna.split('');\n  rna = [];\n  for(i = 0; i < dna.length; i++){\n    strand = dna[i];\n    rna.push(complements[strand]);\n  }\n  return rna.join('');\n};	\N	\N	0	1	2014-08-10 04:10:07	2014-08-10 04:10:07	181	rna-transcription.js
328	41	aac40205c4499298af6e5edd	pending	javascript	rna-transcription	var complements = {\n  G: 'C',\n  C: 'G',\n  T: 'A',\n  A: 'U'\n};\n\nmodule.exports = function(dna){\n  dna = dna.split('');\n  var rna = [];\n  for(var i in dna){\n    rna.push(complements[dna[i]]);\n  }\n  return rna.join('');\n};	\N	\N	0	2	2014-10-28 08:01:35	2014-10-28 08:01:35	181	rna-transcription.js
282	36	6688ae6371ba39120ec22cf9	superseded	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nimport Data.Maybe (fromJust)\r\nimport Data.List (find)\r\n\r\nnumerals :: Int -> String\r\nnumerals n = num thousands\r\n          ++ num hundreds\r\n          ++ num tens\r\n          ++ num ones\r\n  where\r\n    thousands = n `mod` 10000 - hundreds - tens - ones\r\n    hundreds  = n `mod` 1000 - tens - ones\r\n    tens      = n `mod` 100 - ones\r\n    ones      = n `mod` 10\r\n\r\nnum :: Int -> String\r\nnum n\r\n    | n == 0    = ""\r\n    | n < 3001  = snd nearest ++ numerals (n - fst nearest)\r\n    | otherwise = error "number out of range"\r\n  where\r\n    nearest  = fromJust $ find (\\(x,_) -> x <= n) baseNums\r\n    baseNums =\r\n      [(1000, "M"),(900, "CM")\r\n      ,(500,  "D"),(400, "CD")\r\n      ,(100,  "C"),(90,  "XC")\r\n      ,(50,   "L"),(40,  "XL")\r\n      ,(10,   "X"),(9,   "IX")\r\n      ,(5,    "V"),(4,   "IV")\r\n      ,(1,    "I")]	\N	\N	0	5	2014-10-15 00:39:52	2014-10-15 00:39:52	156	Roman.hs
283	36	75700e7eb072ae0c5d919707	superseded	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nimport Data.Maybe (fromJust)\r\nimport Data.List (find)\r\n\r\nnumerals :: Int -> String\r\nnumerals n\r\n    | n == 0    = ""\r\n    | n < 3001  = nearestNumeral ++ numerals (n - nearestDigit)\r\n    | otherwise = error "Roman.numerals: number out of range"\r\n  where\r\n    (nearestDigit, nearestNumeral) =\r\n        fromJust $ find (\\(x,_) -> x <= n) baseNums\r\n    baseNums =\r\n      [(1000, "M"),(900, "CM")\r\n      ,(500,  "D"),(400, "CD")\r\n      ,(100,  "C"),(90,  "XC")\r\n      ,(50,   "L"),(40,  "XL")\r\n      ,(10,   "X"),(9,   "IX")\r\n      ,(5,    "V"),(4,   "IV")\r\n      ,(1,    "I")\r\n      ]	\N	\N	0	7	2014-10-15 22:41:32	2014-10-15 22:41:32	156	Roman.hs
284	36	89b5091cdb3b21203383b52c	superseded	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nimport Data.Maybe (fromJust)\r\nimport Data.List (find)\r\n\r\nnumerals :: Int -> String\r\nnumerals n = num thousands\r\n          ++ num hundreds\r\n          ++ num tens\r\n          ++ num ones\r\n  where\r\n    thousands = n `mod` 10000 - hundreds - tens - ones\r\n    hundreds  = n `mod` 1000 - tens - ones\r\n    tens      = n `mod` 100 - ones\r\n    ones      = n `mod` 10\r\n\r\nnum :: Int -> String\r\nnum n\r\n    | n == 0    = ""\r\n    | n < 3001  = nearestNumeral ++ numerals (n - nearestDigit)\r\n    | otherwise = error "number out of range"\r\n  where\r\n    (nearestDigit, nearestNumeral) =\r\n        fromJust $ find (\\(x,_) -> x <= n) baseNums\r\n    baseNums =\r\n      [(1000, "M"),(900, "CM")\r\n      ,(500,  "D"),(400, "CD")\r\n      ,(100,  "C"),(90,  "XC")\r\n      ,(50,   "L"),(40,  "XL")\r\n      ,(10,   "X"),(9,   "IX")\r\n      ,(5,    "V"),(4,   "IV")\r\n      ,(1,    "I")]	\N	\N	0	6	2014-10-17 17:46:54	2014-10-17 17:46:54	156	Roman.hs
285	36	621d0c7589bdb0835153068c	done	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nnumerals :: Int -> String\r\nnumerals n\r\n    | n > 0 && n < 3001  = go baseNums n\r\n    | otherwise          = error "Roman.numerals: number out of range"\r\n  where\r\n    go [] _ = ""\r\n    go (x@(digit, numeral):xs) k\r\n        | k >= digit = numeral ++ go (x:xs) (k - digit)\r\n        | otherwise  = go xs k\r\n\r\n    baseNums =\r\n        [(1000, "M"),(900, "CM")\r\n        ,(500,  "D"),(400, "CD")\r\n        ,(100,  "C"),(90,  "XC")\r\n        ,(50,   "L"),(40,  "XL")\r\n        ,(10,   "X"),(9,   "IX")\r\n        ,(5,    "V"),(4,   "IV")\r\n        ,(1,    "I")\r\n        ]	2014-10-31 00:28:55	\N	0	9	2014-10-20 21:34:55	2014-10-20 21:34:55	156	Roman.hs
286	36	45dbc5361bde35ef485378f4	superseded	haskell	roman-numerals	module Roman (numerals) where\r\n\r\nnumerals :: Int -> String\r\nnumerals n\r\n    | n > 0 && n < 3001  = go baseNums n\r\n    | otherwise          = error "Roman.numerals: number out of range"\r\n  where\r\n    go []     _ = ""\r\n    go (x:xs) k = let (digit, numeral) = x in\r\n        if k >= digit then numeral ++ go (x:xs) (k - digit) else go xs k\r\n\r\nbaseNums :: [(Int, String)]\r\nbaseNums =\r\n    [(1000, "M"),(900, "CM")\r\n    ,(500,  "D"),(400, "CD")\r\n    ,(100,  "C"),(90,  "XC")\r\n    ,(50,   "L"),(40,  "XL")\r\n    ,(10,   "X"),(9,   "IX")\r\n    ,(5,    "V"),(4,   "IV")\r\n    ,(1,    "I")\r\n    ]	\N	\N	0	8	2014-10-30 19:50:08	2014-10-30 19:50:08	156	Roman.hs
287	36	8089b505bfa8e86e16bdd175	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nisYell :: String -> Bool\nisYell s\n    | not (any isAlpha s) = False\n    | otherwise = filter isUpper (filter isAlpha s) == filter isAlpha s\n\nisQuestion :: String -> Bool\nisQuestion s = last s == '?'\n\nisEmpty :: String -> Bool\nisEmpty s = filter isSpace s == s\n\nresponseFor :: String -> String\nresponseFor s\n    | isEmpty s = "Fine. Be that way!"\n    | isYell s = "Woah, chill out!"\n    | isQuestion s = "Sure."\n    | otherwise = "Whatever."	\N	\N	0	1	2014-09-11 22:48:30	2014-09-11 22:48:30	157	Bob.hs
288	36	e1b53db1904cc42baed20e27	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nisYell :: String -> Bool\nisYell s\n    | not (any isAlpha s) = False\n    | otherwise = filter isUpper (filter isAlpha s) == filter isAlpha s\n\nisQuestion :: String -> Bool\nisQuestion s = last s == '?'\n\nisSilence :: String -> Bool\nisSilence = all isSpace\n\nresponseFor :: String -> String\nresponseFor s\n    | isSilence s = "Fine. Be that way!"\n    | isYell s = "Woah, chill out!"\n    | isQuestion s = "Sure."\n    | otherwise = "Whatever."	2014-10-22 09:20:48	\N	0	2	2014-10-11 14:47:31	2014-10-11 14:47:31	157	Bob.hs
289	36	9a8e9d531d446d4b2a64d465	done	python	word-count	def word_count(phrase):\n    tmp=phrase.split()\n    return {e:tmp.count(e) for e in tmp}	2014-09-24 22:29:38	\N	0	1	2014-09-13 13:44:54	2014-09-13 13:44:54	158	wordcount.py
290	36	3600b1cb641465a4f93b097b	done	javascript	sum-of-multiples	function isMultiple(i) {\n  var result = false;\n  this.multiples.forEach(function (multiple) {\n    if (i % multiple === 0) { result = true; }\n  });\n  return result;\n}\n\nfunction SumOfMultiples(multiples) {\n  if (!(this instanceof SumOfMultiples)) {\n    if (multiples === undefined) {\n      return new SumOfMultiples([5, 3]);\n    } else {\n      return new SumOfMultiples(multiples);\n    }\n  }\n  this.multiples = multiples;\n}\n\nSumOfMultiples.prototype.to = function (limit) {\n  var sum = 0;\n  for (var i = 1; i < limit; i++) {\n    if (isMultiple.call(this, i)) { sum += i; }\n  }\n  return sum;\n};	2014-09-20 06:12:44	\N	0	1	2014-09-09 16:56:28	2014-09-09 16:56:28	159	sum.js
329	41	ca6391e2479d7b015814f97f	pending	perl5	leap	package Leap;\n\nuse strict;\nuse warnings;\nuse feature 'signatures';\n\nsub is_leap($year) {\n    return 1 if $year % 4 == 0 && ($year % 100 != 0 || $year % 400 == 0);\n    return 0;\n}\n\n1;	\N	\N	0	1	2014-08-20 09:16:20	2014-08-20 09:16:20	182	Leap.pm
330	41	1c12985476d75606d8c9f9da	pending	ruby	rna-transcription	module Complement\n\n  MAP_FROM_DNA = {\n    'G' => 'C',\n    'C' => 'G',\n    'T' => 'A',\n    'A' => 'U'\n  }.freeze\n\n  MAP_FROM_RNA = {\n    'G' => 'C',\n    'C' => 'G',\n    'U' => 'A',\n    'A' => 'T'\n  }.freeze\n\n  def self.of_dna(dna)\n    dna.chars.map { |nucleotide| MAP_FROM_DNA[nucleotide] }.join\n  end\n\n  def self.of_rna(rna)\n    rna.chars.map { |nucleotide| MAP_FROM_RNA[nucleotide] }.join\n  end\nend	\N	\N	0	1	2014-09-15 01:54:07	2014-09-15 01:54:07	183	complement.rb
331	41	bbacd2179850cd098ab1f7e7	pending	ruby	rna-transcription	module Complement\n\n  DNA_TO_RNA = {\n    'G' => 'C',\n    'C' => 'G',\n    'T' => 'A',\n    'A' => 'U'\n  }.freeze\n\n  RNA_TO_DNA = DNA_TO_RNA.invert.freeze\n\n  class << self\n\n    def of_dna(dna)\n      transcribe dna, DNA_TO_RNA\n    end\n\n    def of_rna(rna)\n      transcribe rna, RNA_TO_DNA\n    end\n\n    def transcribe(strand, complements)\n      strand.chars.map { |nucleotide| complements[nucleotide] }.join\n    end\n\n  end\n\nend	\N	\N	0	2	2014-09-24 08:21:04	2014-09-24 08:21:04	183	complement.rb
291	36	7f790be21a574187ce552b73	superseded	javascript	anagram	var anagram = function (str) {\n    // arrange str in alphabetical order.\n    var obj = {\n    matches : function () {\n        //arrange each item in alphabetical order and save\n        //them in a new array.\n\n                //GOD HELP US ALL\n                var arr = [].concat.apply([],arguments);\n\n                // var arr = Array.prototype.slice.call(arr,0);\n                console.log(arr);\n                var rstr = str.toLowerCase().split('').sort().join('');\n                // console.log(rstr);\n                var alpArr = [];\n                var matchArr = [];\n                for (var i = 0; i < arr.length; i++) {\n                    alpArr.push(arr[i].toLowerCase().split('').sort().join(''));\n                }\n\n                // console.log(alpArr);\n                // matchArr = alpArr.match(/\\rstr/gi);\n                for (var j = 0; j < alpArr.length; j++) {\n                    if ( rstr === alpArr[j] && str.toLowerCase() !== arr[j].toLowerCase()) matchArr.push(arr[j]);\n                    // console.log(rstr + " " +alpArr[i]+ "--------");\n                }\n\n                return matchArr;\n            }\n        };\n    return obj;\n};	\N	\N	0	1	2014-08-22 15:45:37	2014-08-22 15:45:37	160	anagram.js
292	36	c500663c42def257c8c5b1aa	done	javascript	anagram	var anagram = function (str) {\n\n    var obj = {\n        matches : function () {\n            //GOD HELP US ALL\n            var argArr = [],\n                arr = [];\n            // var arr = [].concat.apply([],arguments); // Only works for arrays one lvl deep..\n\n            //convert arguments thingy into an array.\n            for (var i = 0; i < arguments.length; ++i) {\n                argArr[i] = arguments[i];\n            }\n            //recursive flatten function\n            var flatter = function (stuff) {\n                if (stuff instanceof  Array) {\n                    for (var j = 0; j < stuff.length; j++) {\n                        flatter(stuff[j]);\n                    }\n                } else {\n                    arr.push(stuff);\n                }\n            };\n\n            flatter(argArr);\n\n            var rstr = str.toLowerCase().split('').sort().join(''),\n                alpArr = [],\n                matchArr = [];\n\n            for (var k = 0; k < arr.length; k++) {\n                alpArr.push(arr[k].toLowerCase().split('').sort().join(''));\n            }\n\n            for (var l = 0; l < alpArr.length; l++) {\n                if (  rstr === alpArr[l]  &&  str.toLowerCase() !== arr[l].toLowerCase()  ) matchArr.push(arr[l]);\n            }\n\n            return matchArr;\n        }\n    };\n    return obj;\n};	2014-10-12 19:17:38	\N	0	2	2014-10-01 18:31:53	2014-10-01 18:31:53	160	anagram.js
293	36	0a5f4ef40591d7f7d29d6401	superseded	csharp	sum-of-multiples	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic class SumOfMultiples\r\n{\r\n    private readonly IEnumerable<int> _baseMultiples;\r\n\r\n    /// <summary>\r\n    /// Configures the class with the base multiples 3 and 5.\r\n    /// </summary>\r\n    public SumOfMultiples()\r\n    {\r\n        _baseMultiples = new[] {3, 5};\r\n    }\r\n\r\n    /// <summary>\r\n    /// Configures the class with a set of base multiples.\r\n    /// </summary>\r\n    public SumOfMultiples(IEnumerable<int> baseMultiples)\r\n    {\r\n        _baseMultiples = baseMultiples;\r\n    }\r\n\r\n    public int To(int to)\r\n    {\r\n        List<int> multiples = new List<int>();\r\n        foreach(int baseMultiple in _baseMultiples)\r\n        {\r\n            var found =  Multiples\r\n                            .Range(baseMultiple, to, baseMultiple)\r\n                            .Where(i => !multiples.Contains(i));\r\n            multiples.AddRange(found);\r\n        }\r\n        return multiples.Sum();\r\n    }\r\n}\r\n\r\npublic static class Multiples\r\n{\r\n    /// <summary>\r\n    /// A version of Enumerable.Range that takes an increment value\r\n    /// </summary>\r\n    /// <param name="start">The first number to return</param>\r\n    /// <param name="stop">The exclusive max value</param>\r\n    /// <param name="increment">The amount to increment by</param>\r\n    /// <returns></returns>\r\n    public static IEnumerable<int> Range(int start, int stop, int increment)\r\n    {\r\n        for(int i = start; i < stop; i += increment)\r\n            yield return i;\r\n    }\r\n}\r	\N	\N	0	1	2014-08-29 18:16:49	2014-08-29 18:16:49	161	SumOfMultiples.cs
332	41	2de91dbb0c096eec906507bc	pending	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\nsub hey {\n    $_ = shift;\n    return "Fine. Be that way!" if /^\\s*$/;\n    return "Woah, chill out!" if /^[^\\p{Ll}]*[\\p{Lu}][^\\p{Ll}]*$/;\n    return "Sure." if /\\?$/;\n    return "Whatever.";\n}\n\n1;	\N	\N	0	1	2014-11-04 00:01:29	2014-11-04 00:01:29	184	Bob.pm
333	41	fd572bb3e2d3a99b6bc5d5f1	superseded	ruby	grains	class Grains\n\tdef square(n)\n\t\t2 ** (n-1)\n\tend\n\n\tdef total\n\t\t1.upto(64).inject(0){|result, element| result + square(element) }\n\tend\nend	\N	\N	0	1	2014-09-01 03:34:22	2014-09-01 03:34:22	185	grains.rb
334	41	327af31e7648f9a1d9c4bc1c	pending	ruby	grains	class Grains\n    def square(n)\n        2 ** (n-1)\n    end\n\n    def total\n        (2 ** 64) - 1\n    end\nend	\N	\N	0	2	2014-09-11 08:05:24	2014-09-11 08:05:24	185	grains.rb
335	41	89e2c0926020ee858410fc07	pending	ruby	nucleotide-count	class DNA\n  attr_reader :sequence\n  \n  VALID_NUCLEOTIDES = ["A", "C", "G", "T", "U"]\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new("#{nucleotide} is not a valid nucleotide.") unless valid_nucleotide?(nucleotide)\n    sequence.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    { "A" => count("A"), "C" => count("C"), "G" => count("G"), "T" => count("T") }   \n  end\n\n  protected\n    \n    def valid_nucleotide?(nucleotide)\n      VALID_NUCLEOTIDES.include?(nucleotide)\n    end \nend	\N	\N	0	1	2014-08-18 03:03:02	2014-08-18 03:03:02	186	nucleotide-count.rb
336	41	bf45db46fbe06b29927c723c	pending	javascript	bob	// vim: set ts=4 sts=4 sw=4 et:\n\nvar Bob = function() {};\nBob.prototype.hey = function(message) {\n    if (message.trim() == '') {\n        return 'Fine. Be that way!';\n    }\n\n    if (message.toUpperCase() === message) {\n        return 'Woah, chill out!';\n    }\n\n    if (message.match(/\\?$/)) {\n        return 'Sure.';\n    }\n\n    return 'Whatever.';\n}\n\nmodule.exports = Bob;	\N	\N	0	1	2014-08-17 17:58:57	2014-08-17 17:58:57	187	bob.js
337	41	04d8320d561c23bebb5a8b18	pending	scala	bob	class Bob {\n  def hey(what: String) = {\n    val statement = new Statement(what)\n\n    if (statement.isShouting) "Woah, chill out!"\n    else if (statement.isQuestion) "Sure."\n    else if (statement.isSilence) "Fine. Be that way!"\n    else "Whatever."\n  }\n}\n\nclass Statement(value: String) {\n  lazy val hasLetters = "[A-Za-z]".r.findFirstIn(value) != None\n\n  lazy val isShouting = !isSilence && hasLetters && value.toUpperCase() == value\n  lazy val isQuestion = value.endsWith("?")\n  lazy val isSilence = value.replace(" ", "") == ""\n}	\N	\N	0	1	2014-10-21 11:22:30	2014-10-21 11:22:30	188	bob.scala
338	41	a579d6e46502288482f7d4e4	pending	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase || ""\n    @count = Hash.new(0)\n  end\n\n  def word_count\n    @count.clear\n    @phrase.split(/[^\\w']+/).each do |word|\n      @count[word.downcase] += 1\n    end\n    @count\n  end\nend	\N	\N	0	1	2014-10-04 23:11:10	2014-10-04 23:11:10	189	phrase.rb
294	36	876651f1804bfccb38318031	done	csharp	sum-of-multiples	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic class SumOfMultiples\r\n{\r\n    private readonly IEnumerable<int> _baseMultiples;\r\n\r\n    /// <summary>\r\n    /// Configures the class with the base multiples 3 and 5.\r\n    /// </summary>\r\n    public SumOfMultiples()\r\n    {\r\n        _baseMultiples = new[] {3, 5};\r\n    }\r\n\r\n    /// <summary>\r\n    /// Configures the class with a set of base multiples.\r\n    /// </summary>\r\n    public SumOfMultiples(IEnumerable<int> baseMultiples)\r\n    {\r\n        _baseMultiples = baseMultiples;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Sums all multiples up to but not including the given value\r\n    /// </summary>\r\n    /// <param name="to">The exclusive upper value</param>\r\n    /// <returns>The sum of the multiples</returns>\r\n    public int To(int to)\r\n    {\r\n        return Enumerable.Range(1, to - 1).Where(IsMultiple).Sum();\r\n    }\r\n\r\n    private bool IsMultiple(int value)\r\n    {\r\n        return _baseMultiples.Any(baseMultiple => value % baseMultiple == 0);\r\n    }\r\n}\r	2014-10-06 16:34:20	\N	0	2	2014-10-06 08:29:47	2014-10-06 08:29:47	161	SumOfMultiples.cs
295	30	e60a792cd4e7e32461b96edf	superseded	haskell	grade-school	module School( School, empty, add, grade, sorted ) where\nimport qualified Data.Map.Strict as M \nimport Data.List.Ordered( insertSet, sort )\nimport Data.List( foldl' )\n\ntype Grade = Int; type Name = String; type Roster = [Name]\ndata School = S (M.Map Grade Roster) deriving Show\n\nempty :: School\nempty = S M.empty\n\nadd :: Grade -> Name  -> School -> School\nadd g n (S s) = S (M.insertWith updateRoster g [n] s)\n    where\n      updateRoster ns r = foldl' (flip insertSet) r ns\n\ngrade :: Grade -> School -> Roster\ngrade g (S s) = M.findWithDefault [] g s \n\nsorted :: School -> [(Grade, Roster)]\nsorted (S s) = M.toAscList s	\N	\N	0	1	2014-08-23 13:50:36	2014-08-23 13:50:36	162	School.hs
296	30	df5167ba2077fe4fdf3d0f03	superseded	haskell	grade-school	module School( School, empty, add, grade, sorted ) where\nimport qualified Data.Map.Strict as Map\nimport qualified Data.Set as Set\n\ntype Grade = Int\ntype Name = String\ntype Roster = Set.Set Name \ntype School = Map.Map Grade Roster\n\nempty :: School\nempty = Map.empty\n\nadd :: Grade -> Name  -> School -> School\nadd g n s = Map.insertWith Set.union g (Set.singleton n) s\n\ngrade :: Grade -> School -> [Name]\ngrade g s = Set.toAscList (Map.findWithDefault Set.empty g s)\n\nsorted :: School -> [(Grade, [Name])]\nsorted = (map  (\\(g, r) -> (g, Set.toAscList r))) . Map.toAscList	\N	\N	0	2	2014-09-07 11:08:50	2014-09-07 11:08:50	162	School.hs
297	30	0563ed40007cfb91dc7f8d04	done	haskell	grade-school	module School( School, empty, add, grade, sorted ) where\nimport Data.Map.Strict( Map, insertWith, findWithDefault )\nimport qualified Data.Map.Strict as M\nimport Data.Set( Set, union, singleton )\nimport qualified Data.Set as S\n\ntype Grade = Int\ntype Name = String\ntype School = Map Grade (Set Name)\n\nempty :: School\nempty = M.empty\n\nadd :: Grade -> Name  -> School -> School\nadd g n  = insertWith union g (singleton n)\n\ngrade :: Grade -> School -> [Name]\ngrade = (S.toAscList .) . findWithDefault S.empty\n\nsorted :: School -> [(Grade, [Name])]\nsorted = map (fmap S.toAscList) . M.toAscList	2014-09-22 09:08:53	\N	0	3	2014-09-20 02:51:04	2014-09-20 02:51:04	162	School.hs
298	30	7083d90d2e04e7eec616186e	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn count [nucleotide string]\n\t(if (some #{nucleotide} '("A" "C" "G" "T" "U"))\n\t\t(let [n-count ((frequencies string) (first nucleotide))]\n\t\t(if (nil? n-count) 0 \n\t\t\t               n-count))\n\t(throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [string]\n\t\t(reduce \n\t\t\t#(update-in %1 [(str %2)] inc) \n\t\t\t{"A" 0 "C" 0 "G" 0 "T" 0} \n\t\t\tstring))	\N	\N	0	1	2014-08-26 14:32:41	2014-08-26 14:32:41	163	nucleotide-count.clj
299	30	96aa176ec61e644d2b7a2928	superseded	clojure	nucleotide-count	(ns dna)\n\n(def ^:const valid-nucleotides "ACGTU")\n\n(defn nucleotide-counts [string]\n\t(reduce\n\t\t#(update-in %1 [%2] inc)\n\t\t{\\A 0 \\C 0 \\G 0 \\T 0} \n\t\tstring))\t\t\n\n(defn count [nucleotide string]\n\t(if (some #{nucleotide} valid-nucleotides)\n\t\t(let [n-count ((nucleotide-counts string) nucleotide)]\n\t\t\t(if (nil? n-count) 0 n-count))\n\t\t(throw (Exception. "invalid nucleotide"))))\n\n;;; nucleotide-count_test.clj changed under my feet!\n;;; the following works with nucleotides as strings not chars.\n\n(defn nucleotide-counts-string [string]\n\t(reduce \n\t\t#(update-in %1 [(str %2)] inc) \n\t\t{"A" 0 "C" 0 "G" 0 "T" 0} \n\t\tstring))\n\n(defn count-string [nucleotide string]\n\t(if (some #{nucleotide} (map #(str %) valid-nucleotides))\n\t\t(let [n-count ((nucleotide-counts-string string) nucleotide)]\n\t\t\t(if (nil? n-count) 0 n-count))\n\t\t(throw (Exception. "invalid nucleotide"))))	\N	\N	0	4	2014-09-02 07:02:50	2014-09-02 07:02:50	163	nucleotide-count.clj
339	41	89fa5acbe1225f3811b77d6d	pending	go	anagram	package anagram\r\n\r\nimport (\r\n\t"reflect"\r\n\t"strings"\r\n)\r\n\r\nfunc LetterMap(s string) map[rune]int {\r\n\tLetterInstances := make(map[rune]int)\r\n\r\n\tfor _, v := range s {\r\n\t\tLetterInstances[v]++\r\n\t}\r\n\r\n\treturn LetterInstances\r\n}\r\n\r\nfunc Detect(s string, c []string) []string {\r\n\tr := make([]string, 0, len(c))\r\n\r\n\tfor _, w := range c {\r\n\t\tstringLow := strings.ToLower(s)\r\n\t\twordLow := strings.ToLower(w)\r\n\r\n\t\tstringLetterMap := LetterMap(stringLow)\r\n\t\twordLetterMap := LetterMap(wordLow)\r\n\r\n\t\tmapsEqual := reflect.DeepEqual(stringLetterMap, wordLetterMap)\r\n\t\twordsEqual := (stringLow == wordLow)\r\n\r\n\t\tif mapsEqual && !wordsEqual {\r\n\t\t\tr = append(r, wordLow)\r\n\t\t}\r\n\t}\r\n\treturn r\r\n}\r	\N	\N	0	1	2014-09-04 21:51:00	2014-09-04 21:51:00	190	anagram.go
340	41	eba2916de67b70bdd8d582a9	pending	perl5	difference-of-squares	package Squares;\n\nuse 5.012;\nuse bignum;\n\nsub new {\n  bless {num => $_[1]} => $_[0];\n}\n\nsub sum_of_squares {\n  my $num = $_[0]->{num};\n  my $sum = 0;\n  map {$sum += $_ ** 2} 1 .. $num;\n  return $sum;\n}\n\nsub square_of_sums {\n  my $num = $_[0]->{num};\n  my $sum = 0;\n  map {$sum += $_} 1 .. $num;\n  return $sum ** 2;\n}\n\nsub difference {\n  my $num = $_[0];\n  return abs(square_of_sums($num) - sum_of_squares($num));\n}\n\n1;	\N	\N	0	1	2014-09-29 01:21:30	2014-09-29 01:21:30	191	Squares.pm
341	41	30d4a035c51facf23cd5cd50	pending	ruby	proverb	class Proverb\n  def initialize(*args, **qualifier)\n    @qualifier = qualifier\n    @consequences = args\n  end\n\n  def consequence_pairs\n    @consequences.each_cons(2)\n  end\n\n  def root_cause\n    "#{@qualifier[:qualifier]} #{@consequences.first}".lstrip\n  end\n\n  def to_s\n    consequence_pairs.map { |wanted_item, lost_item| "For want of a #{wanted_item} the #{lost_item} was lost." }\n                     .concat(["And all for the want of a #{root_cause}."])\n                     .join("\\n")\n  end\nend	\N	\N	0	4	2014-08-13 14:35:25	2014-08-13 14:35:25	192	proverb.rb
342	41	fd4217ff3147afd4ff32ec75	superseded	ruby	proverb	class Proverb\n  attr_reader :consequence_pairs, :root_cause\n\n  def initialize(*args)\n    qualifier_hash = args.last.is_a?(Hash) ? args.pop : {}\n    @consequence_pairs = args.zip(args[1..-1])[0..-2]\n    @root_cause = qualifier_hash[:qualifier] ? "#{qualifier_hash[:qualifier]} #{args.first}" : args.first\n  end\n\n  def to_s\n    consequence_chain = consequence_pairs.inject("") do |acc, pair|\n      acc + "For want of a #{pair.first} the #{pair.last} was lost.\\n"\n    end\n    consequence_chain + "And all for the want of a #{root_cause}."\n  end\nend	\N	\N	0	1	2014-10-23 03:05:00	2014-10-23 03:05:00	192	proverb.rb
300	30	682f934def7e0d0ac3b1c2fb	done	clojure	nucleotide-count	(ns dna)\n\n(def ^:const valid-nucleotides "ACGTU")\n\n(defn nucleotide-counts [string]\n\t(merge {\\A 0 \\C 0 \\G 0 \\T 0} (frequencies string)))\n\n(defn count [nucleotide string]\n\t(if (some #{nucleotide} valid-nucleotides)\n\t\t(clojure.core/count (re-seq (re-pattern (str nucleotide)) string))\n\t\t(throw (Exception. "invalid nucleotide"))))\n\n;;; previous iteration\n\n(defn nucleotide-counts-old [string]\n    (reduce\n        #(update-in %1 [%2] inc)\n        {\\A 0 \\C 0 \\G 0 \\T 0} \n        string))        \n\n(defn count-old [nucleotide string]\n    (if (some #{nucleotide} valid-nucleotides)\n        (let [n-count ((nucleotide-counts-old string) nucleotide)]\n            (if (nil? n-count) 0 n-count))\n        (throw (Exception. "invalid nucleotide"))))\n\n;;; nucleotide-count_test.clj changed under my feet!\n;;; the following works with nucleotides as strings not chars.\n\n(defn nucleotide-counts-strings [string]\n\t(reduce \n\t\t#(update-in %1 [(str %2)] inc) \n\t\t{"A" 0 "C" 0 "G" 0 "T" 0} \n\t\tstring))\n\n(defn count-strings [nucleotide string]\n\t(if (some #{nucleotide} (map #(str %) valid-nucleotides))\n\t\t(let [n-count ((nucleotide-counts-strings string) nucleotide)]\n\t\t\t(if (nil? n-count) 0 n-count))\n\t\t(throw (Exception. "invalid nucleotide"))))	2014-09-11 07:40:21	\N	0	5	2014-09-06 01:02:34	2014-09-06 01:02:34	163	nucleotide-count.clj
301	30	cc142b556661daa7b6946d2e	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn count [nucleotide string]\n\t(if (some #{nucleotide} '("A" "C" "G" "T" "U"))\n\t\t(clojure.core/count (re-seq (re-pattern nucleotide) string))\n\t\t(throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [string]\n\t\t(reduce \n\t\t\t#(update-in %1 [(str %2)] inc) \n\t\t\t{"A" 0 "C" 0 "G" 0 "T" 0} \n\t\t\tstring))	\N	\N	0	2	2014-09-29 10:01:59	2014-09-29 10:01:59	163	nucleotide-count.clj
302	30	27d4dcd5ba0706a010a37df7	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn nucleotide-counts [string]\n    (reduce\n        #(update-in %1 [%2] inc)\n        {\\A 0 \\C 0 \\G 0 \\T 0} \n        string))        \n\n(defn count [nucleotide string]\n    (if (some #{nucleotide} "ACGTU")\n        (let [n-count ((nucleotide-counts string) nucleotide)]\n            (if (nil? n-count) 0 n-count))\n        (throw (Exception. "invalid nucleotide"))))\n\n;;; nucleotide-count_test.clj changed under my feet!\n;;; the following works with nucleotides as strings not chars.\n\n(defn nucleotide-counts-strings [string]\n\t(reduce \n\t\t#(update-in %1 [(str %2)] inc) \n\t\t{"A" 0 "C" 0 "G" 0 "T" 0} \n\t\tstring))\n\n(defn count-strings [nucleotide string]\n\t(if (some #{nucleotide} '("A" "C" "G" "T" "U"))\n\t\t(let [n-count ((nucleotide-counts-strings string) nucleotide)]\n\t\t\t(if (nil? n-count) 0 n-count))\n\t\t(throw (Exception. "invalid nucleotide"))))	\N	\N	0	3	2014-10-14 02:57:59	2014-10-14 02:57:59	163	nucleotide-count.clj
303	30	b58e2e48e728681eb88756cf	done	scala	hamming	package hamming_test.scala\n\nobject Hamming {\n    def compute(a: String, b: String) = {\n        var mutations = 0\n        for (ind <- 0 to getShortestStringLength(a, b) - 1) {\n            if (a.charAt(ind) != b.charAt(ind)) {\n                mutations = mutations + 1\n            }\n        }\n        mutations\n    }\n\n    def getShortestStringLength(a: String, b: String): Int = {\n        if (a.length() > b.length())\n            b.length()\n        else\n            a.length()\n    }\n}	2014-09-11 22:06:48	\N	0	1	2014-09-01 11:36:31	2014-09-01 11:36:31	164	Hamming.scala
304	30	474a0586e14ad4c1ba85d873	done	ruby	secret-handshake	class SecretHandshake\n\n  COMMANDS = {\n    0b00001 => -> (commands) { commands << "wink" },\n    0b00010 => -> (commands) { commands << "double blink" },\n    0b00100 => -> (commands) { commands << "close your eyes" },\n    0b01000 => -> (commands) { commands << "jump" },\n    0b10000 => -> (commands) { commands.reverse }\n  }\n\n  def initialize(number)\n    @number = number.to_i\n  end\n\n  def commands\n    COMMANDS.reduce([]) do |output, (bitmask, command)|\n      (@number & bitmask != 0) ? command.(output) : output\n    end\n  end\n\nend	2014-08-18 05:11:56	\N	0	1	2014-08-13 13:34:32	2014-08-13 13:34:32	165	secret_handshake.rb
305	30	1e13c97c09dff0bec58d5c89	done	ruby	clock	class Clock\n  def self.at(hour, minutes = 0)\n    ClockTime.new(hour, minutes)\n  end\nend\n\nclass ClockTime\n  attr_reader :hour, :minutes\n\n  def initialize(hour, minutes)\n    @hour = ClockTimeParser.scope_hour(hour)\n    @minutes = ClockTimeParser.scope_minutes(minutes, self)\n  end\n\n  def to_s\n    "%s:%s" % ClockTimeParser.normalized_time(hour, minutes)\n  end\n\n  def +(addend)\n    ClockTime.new(hour, (minutes.to_i + addend)).to_s\n  end\n\n  def -(subtrahend)\n    ClockTime.new(hour, (minutes.to_i - subtrahend)).to_s\n  end\n\n  def ==(other)\n    hour == other.hour && minutes == other.minutes\n  end\n\n  def adjust_hour(direction)\n    raise "Invalid direction" unless valid_directions.include?(direction)\n    hour_adjustments[direction].call\n  end\n\n  private\n\n  def valid_directions\n    hour_adjustments.keys\n  end\n\n  def hour_adjustments\n    {\n      :up => -> { @hour = ClockTimeParser.scope_hour(@hour + 1) },\n      :down => -> { @hour = ClockTimeParser.scope_hour(@hour - 1) }\n    }\n  end\n\nend\n\nclass ClockTimeParser\n  class << self\n\n    def pad(digit)\n      digit.length == 1 ? ("0" + digit) : digit\n    end\n\n    def normalized_time(hour, minutes)\n      [pad(hour.to_s), pad(minutes.to_s)]\n    end\n\n    def scope_hour(hour)\n      if hour > 23\n        hour -= 24\n      elsif hour < 0\n        hour += 24\n      else\n        hour\n      end\n    end\n\n    def scope_minutes(minutes, clock_time)\n      if minutes > 59 \n        wrap_up_minutes(minutes, clock_time)\n      elsif minutes < 0\n        wrap_down_minutes(minutes, clock_time)\n      else\n        minutes\n      end\n    end\n\n    def wrap_up_minutes(minutes, clock_time)\n      while minutes > 59\n        clock_time.send(:adjust_hour, :up)\n        minutes -= 60\n      end\n      minutes\n    end\n\n    def wrap_down_minutes(minutes, clock_time)\n      while minutes < 0\n        clock_time.send(:adjust_hour, :down)\n        minutes += 60\n      end\n      minutes\n    end\n\n  end\nend	2014-08-31 00:43:44	\N	0	1	2014-08-29 19:36:51	2014-08-29 19:36:51	166	clock.rb
306	30	54c6bebc22e4f2e5fb0f4667	done	ruby	binary	class Binary\r\n  def initialize bin\r\n    @bin = bin.match(/[^01]/) ? '0' : bin\r\n  end\r\n\r\n  def to_decimal\r\n    @bin.each_char.inject(0) { |sum, n| sum * 2 + n.to_i }\r\n  end\r\nend\r	2014-08-23 09:32:40	\N	0	2	2014-08-18 17:48:14	2014-08-18 17:48:14	167	binary.rb
307	30	56898e5b0135347437dc4126	superseded	ruby	binary	class Binary\r\n  def initialize bin\r\n    @bin = bin.match(/[^01]/) ? '0' : bin\r\n  end\r\n\r\n  def to_decimal\r\n    @bin.each_char.inject(0) do |sum, n|\r\n      sum *= 2 if sum > 0\r\n      sum += n.to_i\r\n    end\r\n  end\r\nend	\N	\N	0	1	2014-10-30 06:19:30	2014-10-30 06:19:30	167	binary.rb
308	35	fe0ddef602ae64227e34cee5	done	python	word-count	from string import punctuation\ndef word_count(msg):\n    exclude = set(punctuation)\n    msg = ''.join(ch for ch in msg if ch not in exclude).lower()\n    d = {}\n    for word in msg.split():\n        # hack to fix key error\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    return d\n\nprint(word_count("The the fox fox"))	2014-09-24 15:25:56	\N	0	1	2014-09-16 11:15:26	2014-09-16 11:15:26	168	wordcount.py
309	35	7a3b65fb7986ee525ac75bff	done	clojure	roman-numerals	(def foo "")	2014-05-14 11:40:23	\N	0	1	2014-05-03 11:42:47	2014-05-03 11:42:47	169	1.clj
310	14	38950e97c76a15541e9d676f	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @words = phrase.nil? ? {} : phrase.split(/[\\s,]+/)\n  end\n\n  def word_count\n    count = Hash.new(0)\n    @words.each do |word|\n      word.delete!("!&@$%^&:") \n      count[word.downcase] += 1 unless word.empty?\n    end\n    count\n  end\n\nend	\N	\N	0	1	2014-09-13 16:58:03	2014-09-13 16:58:03	170	word-count.rb
311	14	c02d5cffb82a6b8647c730ec	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @words = phrase.nil? ? {} : phrase.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) do |word, count|\n      count[word] += 1\n    end\n  end\n\nend	\N	\N	0	2	2014-09-21 14:16:28	2014-09-21 14:16:28	170	word-count.rb
312	14	a0940ef9ae98d438f92002fc	pending	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.to_s\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, count|\n      count[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    @phrase.downcase.scan(/\\w+/)\n  end\n\nend	\N	\N	0	4	2014-11-16 20:58:46	2014-11-16 20:58:46	170	word-count.rb
313	14	ff8d059c381e0075ad5611f2	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @words = phrase.to_s\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, count|\n      count[word] += 1\n    end\n  end\n\n  private\n  \n  def words\n    @words.downcase.scan(/\\w+/)\n  end\n\nend	\N	\N	0	3	2014-11-20 23:41:56	2014-11-20 23:41:56	170	word-count.rb
316	14	663722cfc4caeb5a60195113	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.List (intercalate)\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n" ++\n          "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\n" ++\n          "Take it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\n" ++\n          "Take one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse n =\n    show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\n" ++\n    "Take one down and pass it around, " ++ show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing h l = intercalate "\\n" [verse n | n <- [h,h-1..l]] ++ "\\n"	\N	\N	0	1	2014-10-09 05:33:16	2014-10-09 05:33:16	173	beer-song.hs
317	14	a5a8e91fd10981003f55b520	pending	haskell	beer-song	module Beer (sing, verse) where\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n\\\n          \\Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\n\\\n          \\Take it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\n\\\n          \\Take one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse n =\n    show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\n" ++\n    "Take one down and pass it around, " ++ show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing h l = unlines (map verse [h,h-1..l])	\N	\N	0	3	2014-11-10 11:41:58	2014-11-10 11:41:58	173	beer-song.hs
318	14	e1c1f6788e4bdaa84bf32ec8	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n" ++\n          "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\n" ++\n          "Take it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\n" ++\n          "Take one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse n =\n    show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\n" ++\n    "Take one down and pass it around, " ++ show (n - 1) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing h l = concat [verse n ++ "\\n" | n <- [h,h-1..l]]	\N	\N	0	2	2014-11-19 19:14:54	2014-11-19 19:14:54	173	beer-song.hs
319	14	2cf63d8ad78414373462c858	pending	go	leap	package leap;\r\n\r\nfunc IsLeapYear(year int) bool {\r\n\tif (year % 100 == 0 && year % 400 != 0) {\r\n\t\treturn false;\r\n\t} else if (year % 4 == 0) {\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}	\N	\N	0	1	2014-10-04 19:44:20	2014-10-04 19:44:20	174	leap.go
320	41	5f5246eabddfd3afdb18f93c	pending	python	gigasecond	from datetime import timedelta\n\ndef add_gigasecond(date):\n    return date + timedelta(seconds=10**9)	\N	\N	0	1	2014-09-08 10:24:40	2014-09-08 10:24:40	175	gigasecond.py
321	41	c97811810fe36c7fb4294c06	pending	haskell	simple-linked-list	module LinkedList\n    ( nil\n    , isNil\n    , new\n    , next\n    , datum\n    , toList\n    , fromList\n    , reverseLinkedList\n    ) where\n\n-- Took the "Shallow embedding" approach :)\n\nnil :: [a]\nnil = []\n\nisNil :: [a] -> Bool\nisNil = null\n\nnew :: a -> [a] -> [a]\nnew = (:)\n\nnext :: [a] -> [a]\nnext = tail\n\ndatum :: [a] -> a\ndatum = head\n\ntoList :: [a] -> [a]\ntoList = id\n\nfromList :: [a] -> [a]\nfromList = id\n\nreverseLinkedList :: [a] -> [a]\nreverseLinkedList = reverse	\N	\N	0	1	2014-09-02 11:38:49	2014-09-02 11:38:49	176	LinkedList.hs
322	41	02fe14f9362c7bcf2014e6a8	pending	ruby	anagram	class Anagram\n  def initialize(word)\n    @word_to_test = word\n  end\n\n  def match(words_arr)\n    words_arr.select do |word|\n    \tif word.downcase != @word_to_test.downcase\n    \t\tmodify_to_test(word) == modify_to_test(@word_to_test)\n    \tend\n    end\n  end\n\n  def modify_to_test(word)\n  \tword.downcase.split("").sort.join("")\n  end\nend	\N	\N	0	1	2014-08-13 23:01:21	2014-08-13 23:01:21	177	anagram.rb
323	41	9b9d68875e8f1fe5cb9aeb81	pending	ruby	bob	class Bob\n\ndef hey(arg1)\n  cleaned = arg1.tr(' ', '')\n  return "Fine. Be that way!" if cleaned.empty?\n  return "Woah, chill out!" if Bob::is_shouting(cleaned)\n  return "Sure." if cleaned.chomp.end_with?('?')\n  "Whatever."\nend\n\ndef self.is_shouting(phrase)\n  chomped = phrase.tr('^A-Za-z', '') #remove everything that isn't a character\n  return false if chomped.length == 0\n  return (chomped.count("A-Z") == chomped.length)\nend\n\nend	\N	\N	0	1	2014-10-06 22:35:01	2014-10-06 22:35:01	178	bob.rb
324	41	65854ad1b40d73c82590c994	pending	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear a\n    | a `mod` 400 == 0 = True\n    | a `mod` 100 == 0 = False\n    | a `mod` 4 == 0 = True\n    | otherwise = False	\N	\N	0	1	2014-10-27 15:08:07	2014-10-27 15:08:07	179	LeapYear.hs
325	41	5b526c676fee9d4dbae426cc	pending	javascript	word-count	var words = function(param) {\n\tvar response = {};\n\tvar parts = param.replace( /\\n/g, " " ).split( " " );\n\tfor(var k =0; k < parts.length; k++){\n\t\tvar curPart = parts[k];\n\t\tvar curWord = '';\n\t\tvar foundNonChar = false; //if we find something that isn't a character, assume that's the end of the word\n\t\tfor(var j = 0; j < curPart.length && !foundNonChar;j++){\n\t\t\tvar charString = curPart.substring(j,j+1); //don't want to do char at because we want a string, not a character\n\t\t\tif((charString.toUpperCase() != charString.toLowerCase()) || !isNaN(charString) ){ //if character has an upper and lower case, then it's a letter. Numbers are also ok\n\t\t\t\tcurWord = curWord + charString.toLowerCase();\n\t\t\t}else{\n\t\t\t\tif(j != 0 && (charString == '�' || charString == '�')){ //mini-rant: this is such a nit-picky thing to have to handle\n\t\t\t\t\tfoundNonChar=true;\n\t\t\t\t\t//handle Spanish punctuation if it is the first character in a word\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tif(curWord.length > 0){ //need the > 0 in order for the "constructor" test case to pass for some reason\n\t\t\tconsole.log(curWord);\n\t\t\tif(response[curWord] > 0){\n\t\t\t\tresponse[curWord]++;\n\t\t\t}else{\n\t\t\t\tresponse[curWord] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn response;\n};\n\nmodule.exports=words;	\N	\N	0	2	2014-09-07 20:02:22	2014-09-07 20:02:22	180	word-count.js
326	41	ccbd949c42b2dfd4581734e3	superseded	javascript	word-count	var words = function(param) {\n\tvar response = {};\n\tvar parts = param.replace( /\\n/g, " " ).split( " " );\n\tfor(var k =0; k < parts.length; k++){\n\t\tvar curPart = parts[k];\n\t\tvar curWord = '';\n\t\tvar foundNonChar = false; //if we find something that isn't a character, assume that's the end of the word\n\t\tfor(var j = 0; j < curPart.length && !foundNonChar;j++){\n\t\t\tvar charString = curPart.substring(j,j+1); //don't want to do char at because we want a string, not a character\n\t\t\tif((charString.toUpperCase() != charString.toLowerCase()) || !isNaN(charString) ){ //if character has an upper and lower case, then it's a letter. Numbers are also ok\n\t\t\t\tcurWord = curWord + charString.toLowerCase();\n\t\t\t}else{\n\t\t\t\tif(j != 0 && (charString == '�' || charString == '')){ //mini-rant: this is such a nit-picky thing to have to handle\n\t\t\t\t\tfoundNonChar=true;\n\t\t\t\t\t//handle Spanish punctuation if it is the first character in a word\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tif(curWord.length > 0){ //need the > 0 in order for the "constructor" test case to pass for some reason\n\t\t\tconsole.log(curWord);\n\t\t\tif(response[curWord] > 0){\n\t\t\t\tresponse[curWord]++;\n\t\t\t}else{\n\t\t\t\tresponse[curWord] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn response;\n};\n\nmodule.exports=words;	\N	\N	0	1	2014-09-29 02:37:35	2014-09-29 02:37:35	180	word-count.js
343	41	022db6b04e2c9ad358c982f0	superseded	ruby	proverb	class Proverb\n  def initialize(*args)\n    @qualifier_hash = args.last.is_a?(Hash) ? args.pop : {}\n    @consequences = args\n  end\n\n  def consequence_pairs\n    @consequences.zip(@consequences[1..-1])[0..-2]\n  end\n\n  def root_cause\n    @qualifier_hash[:qualifier] ? "#{@qualifier_hash[:qualifier]} #{@consequences.first}" : @consequences.first\n  end\n\n  def proverb\n    consequence_chain = consequence_pairs.inject("") do |acc, pair|\n      acc + "For want of a #{pair.first} the #{pair.last} was lost.\\n"\n    end\n    consequence_chain + "And all for the want of a #{root_cause}."\n  end\n\n  def to_s\n    proverb\n  end\nend	\N	\N	0	2	2014-11-08 19:43:34	2014-11-08 19:43:34	192	proverb.rb
344	41	8e744223a4dd235dea63761d	superseded	ruby	proverb	class Proverb\n  def initialize(*args, **qualifier)\n    @qualifier = qualifier\n    @consequences = args\n  end\n\n  def consequence_pairs\n    @consequences.each_cons(2)\n  end\n\n  def root_cause\n    @qualifier[:qualifier] ? "#{@qualifier[:qualifier]} #{@consequences.first}" : @consequences.first\n  end\n\n  def to_s\n    consequence_pairs.inject("") { |acc, (wanted_item, lost_item)| acc + "For want of a #{wanted_item} the #{lost_item} was lost.\\n" }\n                     .concat("And all for the want of a #{root_cause}.")\n  end\nend	\N	\N	0	3	2014-11-16 10:03:31	2014-11-16 10:03:31	192	proverb.rb
345	41	5a0023773b34bbbfb6b01380	pending	go	leap	package leap\n\n// IsLeapYear return true if year is a leap year\nfunc IsLeapYear(year int) bool {\n\tswitch {\n\tcase year%400 == 0:\n\t\treturn true\n\tcase year%100 == 0:\n\t\treturn false\n\tcase year%4 == 0:\n\t\treturn true\n\t}\n\treturn false\n}	\N	\N	0	1	2014-08-20 02:59:05	2014-08-20 02:59:05	193	leap.go
346	41	4d6ed9a7bf924be89ce7a60c	pending	javascript	scrabble-score	var score = function(word) {\n\tvar score = 0;\n\tword = word || "";\n\tfor (var i=0;i<word.length;i++) {\n\t\tvar cmp = word[i].toUpperCase();\n\t\tif (cmp.match(/[aeioulnrst]/i)){\n\t\t\tscore++;\n\t\t}\n\t\telse if (cmp.match(/[dg]/i)){\n\t\t\tscore += 2;\n\t\t}\n\t\telse if (cmp.match(/[bcmp]/i)){\n\t\t\tscore += 3;\n\t\t}\n\t\telse if (cmp.match(/[fhvwy]/i)){\n\t\t\tscore += 4;\n\t\t}\n\t\telse if (cmp.match(/[k]/i)){\n\t\t\tscore += 5;\n\t\t}\n\t\telse if (cmp.match(/[jx]/i)){\n\t\t\tscore += 8;\n\t\t}\n\t\telse if (cmp.match(/[qz]/i)){\n\t\t\tscore += 10;\n\t\t}\n\t}\n\treturn score;\n};\n\nmodule.exports = score;	\N	\N	0	1	2014-08-19 08:02:48	2014-08-19 08:02:48	194	scrabble-score.js
347	41	7e847f2297ecb3b68256b9fa	pending	javascript	robot-name	var iter = 100;\n\nvar Robot = function() {\n  this.name = 'cp' + iter.toString();\n  iter++;\n};\n\nRobot.prototype.reset = function() {\n  this.name = 'cp' + iter.toString();\n  iter++;\n}	\N	\N	0	1	2014-10-02 07:23:31	2014-10-02 07:23:31	195	robot-name_test.js
348	41	41768ff1eea14c1dc9f0a2bf	superseded	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :refer [join]]))\n\n(defonce TO-RNA {\\C \\C\n                 \\G \\G\n                 \\A \\A\n                 \\T \\U})\n\n(defn- translate-nucleotide [dna]\n  (get TO-RNA dna))\n\n(defn to-rna [dna]\n  (join (map translate-nucleotide dna)))	\N	\N	0	1	2014-08-18 05:54:08	2014-08-18 05:54:08	196	rna-transcription.clj
349	41	987431c2cee37e26b111156b	pending	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :refer [join]]))\n\n(defonce MAPPINGS {\\C \\C\n                   \\G \\G\n                   \\A \\A\n                   \\T \\U})\n\n(defn to-rna [dna]\n  (join (map MAPPINGS dna)))	\N	\N	0	2	2014-09-05 13:44:28	2014-09-05 13:44:28	196	rna-transcription.clj
350	41	b48ea00af262275a32b030e8	pending	python	bob	class Bob(object):\n\n    def hey(self, talk):\n        if talk.isupper():\n            return "Whoa, chill out!"\n        elif talk.endswith("?"):\n            return "Sure."\n        elif talk.isspace() or talk == '':\n            return 'Fine. Be that way!'\n        else:\n            return 'Whatever.'	\N	\N	0	1	2014-09-05 08:11:59	2014-09-05 08:11:59	197	bob.py
351	41	0ad08e32340aa208444325a6	pending	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    str = ""\n    if num % 3 == 0\n      str += "Pling"\n    end\n    if num % 5 == 0\n      str += "Plang"\n    end\n    if num % 7 == 0\n      str += "Plong"\n    end\n    unless str == ""\n      return str\n    end\n    return "#{num}"\n  end\nend	\N	\N	0	1	2014-09-26 13:12:17	2014-09-26 13:12:17	198	raindrops.rb
352	41	9432bb0b4ad76f1dc2bdc06a	pending	go	custom-set	package stringset\n\nimport (\n\t"bytes"\n\t"fmt"\n\t"reflect"\n)\n\ntype Set map[string]bool\n\nfunc New() Set                    { return make(map[string]bool) }\nfunc Equal(s1, s2 Set) bool       { return reflect.DeepEqual(s1, s2) }\nfunc (s Set) Add(str string)      { s[str] = true }\nfunc (s Set) Delete(str string)   { delete(s, str) }\nfunc (s Set) Has(str string) bool { return s[str] }\nfunc (s Set) IsEmpty() bool       { return len(s) == 0 }\nfunc (s Set) Len() int            { return len(s) }\n\nfunc NewFromSlice(list []string) Set {\n\ts := make(map[string]bool, len(list))\n\tfor _, str := range list {\n\t\ts[str] = true\n\t}\n\treturn s\n}\n\nfunc (s Set) Slice() []string {\n\tlist := make([]string, 0, len(s))\n\tfor str := range s {\n\t\tlist = append(list, str)\n\t}\n\treturn list\n}\n\nfunc (s Set) String() string {\n\t//return fmt.Sprintf("%q", s.Slice()) // close!\n\tvar b bytes.Buffer\n\tb.WriteByte('{')\n\tsep := ""\n\tfor str := range s {\n\t\tfmt.Fprintf(&b, sep)\n\t\tfmt.Fprintf(&b, "%q", str) // or "%+q" for ASCII only\n\t\tsep = ", "\n\t}\n\tb.WriteByte('}')\n\treturn b.String()\n}\n\n// Although we use methods like Has and Add bellow, we avoid using\n// Slice and instead use range on the underlying map. The former would\n// allocate a temporary slice.\n\nfunc Disjoint(s1, s2 Set) bool {\n\tfor str := range s1 {\n\t\tif s2.Has(str) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc Intersection(s1, s2 Set) Set {\n\ts := New()\n\tfor str := range s1 {\n\t\tif s2.Has(str) {\n\t\t\ts.Add(str)\n\t\t}\n\t}\n\treturn s\n}\n\nfunc Union(s1, s2 Set) Set {\n\ts := New()\n\tfor str := range s1 {\n\t\ts.Add(str)\n\t}\n\tfor str := range s2 {\n\t\ts.Add(str)\n\t}\n\treturn s\n}\n\nfunc Subset(s1, s2 Set) bool {\n\tfor str := range s1 {\n\t\tif !s2.Has(str) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc Difference(s1, s2 Set) Set {\n\ts := New()\n\tfor str := range s1 {\n\t\tif !s2.Has(str) {\n\t\t\ts.Add(str)\n\t\t}\n\t}\n\treturn s\n}\n\nfunc SymetricDifference(s1, s2 Set) Set {\n\ts := Difference(s1, s2)\n\tfor str := range s2 {\n\t\tif !s1.Has(str) {\n\t\t\ts.Add(str)\n\t\t}\n\t}\n\treturn s\n}	\N	\N	0	1	2014-09-17 20:47:25	2014-09-17 20:47:25	199	custom_set.go
353	41	18ff456f80dcf35d3c83faf1	superseded	ruby	hamming	class Hamming\n  def self.compute(a_strand, another_strand)\n    if a_strand.length > another_strand.length\n      diff = another_strand.length - a_strand.length\n      a_strand.slice!(diff..-1)\n    elsif another_strand.length > a_strand.length\n      diff = a_strand.length - another_strand.length\n      another_strand.slice!(diff..-1)\n    end\n\n    result = 0\n    a_strand.split('').each_with_index do |nucleotide, index|\n      result += 1 if nucleotide != another_strand[index]\n    end\n    result\n  end\nend	\N	\N	0	1	2014-08-25 20:38:07	2014-08-25 20:38:07	200	hamming.rb
354	41	2dac6487f4a03729d494e961	pending	ruby	hamming	class Hamming\n  def self.compute(a_strand, another_strand)\n    cut = [a_strand.length, another_strand.length].min\n    result = 0\n    cut.times do | index |\n      result += 1 if a_strand[index] != another_strand[index]\n    end\n    result\n  end\nend	\N	\N	0	2	2014-09-29 07:49:22	2014-09-29 07:49:22	200	hamming.rb
355	41	7cbaa1568f6daf13c6ec14e1	pending	ruby	prime-factors	require 'prime'\r\n\r\nclass PrimeFactors\r\n\r\n\tdef self.for(num)\r\n\t\tfactors = []\r\n\t\tPrime.each do |prime|\r\n\t\t\tbreak if prime > num\r\n\t\t\twhile num % prime == 0\r\n\t\t\t\tfactors << prime\r\n\t\t\t\tnum /= prime\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn factors\r\n\tend\r\n\r\nend	\N	\N	0	1	2014-09-05 22:49:15	2014-09-05 22:49:15	201	prime_factors.rb
381	18	ac8ebc45c39afddf2cccf32b	superseded	python	bob	def hey(input):\n\tif isAllCaps(input):\n\t\tresponse = "Whoa, chill out!"\n\telif input[-1:] == "?":\n\t\tresponse = "Sure."\n\telif len(input.strip()) == 0 :\n\t\tresponse = "Fine. Be that way!"\n\telse:\n\t\tresponse = "Whatever."\n\n\treturn response\n\n\ndef getAlphaNum(input):\n\treturn [char for char in input if char.isalnum()]\n\n\ndef isAllCaps(input):\n\treturn str(getAlphaNum(input)).isupper()	\N	\N	0	1	2014-05-31 10:28:42	2014-05-31 10:28:42	219	bob.py
382	18	9bf3f00842709ff92fd9a3c8	superseded	python	bob	def hey(input):\n\tif input.isupper():\n\t\tresponse = "Whoa, chill out!"\n\telif input[-1:] == "?":\n\t\tresponse = "Sure."\n\telif len(input.strip()) == 0 :\n\t\tresponse = "Fine. Be that way!"\n\telse:\n\t\tresponse = "Whatever."\n\n\treturn response	\N	\N	0	2	2014-08-02 05:13:33	2014-08-02 05:13:33	219	bob.py
356	41	ded6e4146f3bc109dff1ef00	pending	javascript	beer-song	exports.verse = function(number) {\n    var clause1 = onTheWall(number.bottles().capitalize());\n    var clause2 = number.bottles();\n    var clause3 = action(number);\n    var clause4 = onTheWall(next(number).bottles());\n    return makeLine(clause1, clause2) + makeLine(clause3, clause4);\n};\n\nexports.sing = function(start, finish) {\n    finish = finish || 0;\n\n    var verses = [];\n    for (var i = start; i >= finish; i--) {\n        verses.push(this.verse(i));\n    }\n\n    return verses.join('\\n');\n};\n\nfunction makeLine(clause1, clause2) {\n    return clause1 + ', ' + clause2 + '.\\n';\n}\n\nfunction onTheWall(bottles) {\n    return bottles + ' on the wall';\n}\n\nfunction action(number) {\n    if (number === 0) {\n        return 'Go to the store and buy some more';\n    }\n\n    var word = (number === 1) ? 'it' : 'one';\n    return 'Take ' + word + ' down and pass it around';\n}\n\nfunction next(number) {\n    return number === 0 ? 99 : number - 1;\n}\n\nNumber.prototype.bottles = function() {\n    var number = this.valueOf();\n    var bottleStr = (number === 0) ? 'no more' : number;\n    return [bottleStr, 'bottle'.pluralize(number), 'of beer'].join(' ');\n};\n\nString.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\nString.prototype.pluralize = function(number) {\n    return this + ((number !== 1) ? 's' : '');\n};	\N	\N	0	1	2014-09-17 16:37:47	2014-09-17 16:37:47	202	beer-song.js
357	41	78bd4f2bf8765edfc65856ae	pending	csharp	bob	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Text.RegularExpressions;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExercismExercises.bob\r\n{\r\n    public class Bob\r\n    {\r\n        public string Hey(string statement)\r\n        {\r\n            if (this.IsSilence(statement))\r\n            {\r\n                return "Fine. Be that way!";\r\n            }\r\n            else if (this.IsYelling(statement))\r\n            {\r\n                return "Whoa, chill out!";\r\n            }\r\n            else if (this.IsQuestion(statement))\r\n            {\r\n                return "Sure.";\r\n            }\r\n            else\r\n            {\r\n                return "Whatever.";\r\n            }\r\n        }\r\n\r\n        private bool IsQuestion(string statement)\r\n        {\r\n            return statement.EndsWith("?");\r\n        }\r\n\r\n        private bool IsSilence(string statement)\r\n        {\r\n            return (statement.Trim() == string.Empty);\r\n        }\r\n\r\n        private bool IsYelling(string statement)\r\n        {\r\n            //check to see if the string has any capitalized alpha charaters in it.\r\n            var matches = Regex.Match(statement, @"([A-Z]+)");\r\n\r\n            if (matches.Captures.Count == 0)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            //Check to make sure the full string is capitalized (CAPS LOCK YELLING)\r\n            matches = Regex.Match(statement, @"^([0-9A-Z\\W]+)$");\r\n\r\n            if (matches.Captures.Count == 1)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-08-19 09:08:21	2014-08-19 09:08:21	203	Bob.cs
358	6	1eeb0f9044e7d3d6baa77025	pending	clojure	bob	(ns bob)\r\n\r\n(defn islower [c] (if (<= (int c) 122) (if (>= (int c) 97) true false) false))\r\n(defn isupper [c] (if (<= (int c) 90) (if (>= (int c) 65) true false) false))\r\n\r\n(defn question [st] (= (nth (take-last 1 st) 0) (char 63)))\r\n(defn shouting [st] \r\n\t(if (= st (clojure.string/upper-case st)) \r\n\t\t(if (= (clojure.string/upper-case st) (clojure.string/lower-case st)) false true) \r\n\t\tfalse))\r\n\r\n(defn response-for [x] \r\n\t(if (clojure.string/blank? x) "Fine. Be that way!"\r\n\t(if (shouting x) "Woah, chill out!"\r\n\t(if (question x) "Sure." "Whatever."))))	\N	\N	0	1	2014-11-20 12:51:18	2014-11-20 12:51:18	204	bob.clj
359	6	24f96601883c0d2a30b5fd20	pending	python	difference-of-squares	def difference(num):\n    return square_of_sum(num) - sum_of_squares(num)\n\ndef square_of_sum(num):\n    return sum(xrange(1,num+1)) ** 2\n\ndef sum_of_squares(num):\n    return sum (i ** 2 for i in xrange(1, num + 1))	\N	\N	0	1	2014-11-12 14:05:53	2014-11-12 14:05:53	205	difference_of_squares.py
360	6	381433811643c63c86cb7df8	pending	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n\tdef initialize(date)\n\t\tyear = date.year\n\t\tmonth = date.month\n\t\tday = date.day\n\t\t@birthday = Time.new(year, month, day)\n\tend\n\n\tdef date\n\t\t@anniversary = @birthday + (10**9)\n\t\treturn @anniversary.to_date\n\tend\nend	\N	\N	0	1	2014-11-14 09:33:42	2014-11-14 09:33:42	206	gigasecond.rb
361	6	9a9a3b8bb6e9856f742a3c71	superseded	python	atbash-cipher	plain = 'abcdefghijklmnopqrstuvwxyz'\r\ncipher = 'zyxwvutsrqponmlkjihgfedcba'\r\n\r\ndef decode(message):\r\n    decoded_message = ''\r\n    for character in message:\r\n        if character.isalpha():\r\n            decoded_message += plain[cipher.index(character.lower())]\r\n    return decoded_message\r\n\r\ndef encode(message):\r\n    encoded_message = ''\r\n    for character in message:\r\n        if character.isalpha():\r\n            encoded_message += cipher[plain.index(character.lower())]\r\n    return encoded_message	\N	\N	0	1	2014-11-12 11:35:28	2014-11-12 11:35:28	207	atbash_cipher.py
362	6	790e73a4b4497429e5efbf4f	pending	python	atbash-cipher	plain = 'abcdefghijklmnopqrstuvwxyz'\r\ncipher = 'zyxwvutsrqponmlkjihgfedcba'\r\n\r\ndef decode(message):\r\n    decoded_message = ''\r\n    for character in message:\r\n        if character.isalnum():\r\n            decoded_message += plain[cipher.index(character.lower())]\r\n    return decoded_message\r\n\r\n\r\ndef encode_block(message):\r\n    encoded_message = ''\r\n    for character in message:\r\n        if character.isalpha():\r\n            encoded_message += cipher[plain.index(character.lower())]\r\n        else:\r\n            encoded_message += character\r\n    return encoded_message\r\n\r\n\r\ndef encode(message, block_size=5):\r\n    encoded_message = ''\r\n    compressed_message = ''.join(character for character in message if character.isalnum()) #remove all non alphanumeric characters\r\n    position=0\r\n    while position<len(compressed_message):\r\n        encoded_message += encode_block(compressed_message[position:position+block_size])+' '\r\n        position+=block_size\r\n    return encoded_message[:-1]	\N	\N	0	2	2014-11-12 13:22:28	2014-11-12 13:22:28	207	atbash_cipher.py
363	6	7ed747be5c3506d5d3191b47	pending	ruby	leap	class Year\n  def initialize(value)\n    @value = value\n  end\n\n  def leap?\n    @value % 4 == 0 &&\n      @value % 100 != 0 ||\n        @value % 400 == 0\n  end\nend	\N	\N	0	1	2014-11-13 08:08:43	2014-11-13 08:08:43	208	leap.rb
364	6	3006c7b50a1b14f67cdab0bd	superseded	python	twelve-days	lyric = '''\nOn the first day of Christmas my true love gave to me, a Partridge in a Pear Tree.\n\nOn the second day of Christmas my true love gave to me, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the third day of Christmas my true love gave to me, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the fourth day of Christmas my true love gave to me, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the fifth day of Christmas my true love gave to me, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the sixth day of Christmas my true love gave to me, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the seventh day of Christmas my true love gave to me, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the eighth day of Christmas my true love gave to me, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the ninth day of Christmas my true love gave to me, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the tenth day of Christmas my true love gave to me, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the eleventh day of Christmas my true love gave to me, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n\nOn the twelfth day of Christmas my true love gave to me, twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n'''\n\n# prepare the list of verses.\n_verses =  [x + '\\n' for x in lyric.splitlines() if len(x)>0]\n\n\ndef verse(index):\n\treturn _verses[index-1]\n\n\ndef verses(fromindex, toindex):\n\treturn '\\n'.join(_verses[fromindex-1:toindex]) + '\\n'\n\n\ndef sing():\n\treturn verses(1,12)	\N	\N	0	1	2014-11-13 06:41:31	2014-11-13 06:41:31	209	twelve_days.py
383	18	0280023810e31b275f45a09c	pending	python	bob	def hey(input):\n\tif input.isupper():\n\t\tresponse = "Whoa, chill out!"\n\telif input.strip().endswith('?'):\n\t\tresponse = "Sure."\n\telif len(input.strip()) == 0 :\n\t\tresponse = "Fine. Be that way!"\n\telse:\n\t\tresponse = "Whatever."\n\n\treturn response	\N	\N	0	3	2014-08-13 17:43:21	2014-08-13 17:43:21	219	bob.py
365	6	3bc4fac1ddde460a8496bdbb	pending	python	twelve-days	_verses = [\n\t\t\t\t'first',\n\t\t\t\t'second',\n\t\t\t\t'third',\n\t\t\t\t'fourth',\n\t\t\t\t'fifth',\n\t\t\t\t'sixth',\n\t\t\t\t'seventh',\n\t\t\t\t'eighth',\n\t\t\t\t'ninth',\n\t\t\t\t'tenth',\n\t\t\t\t'eleventh',\n\t\t\t\t'twelfth'\n\t\t\t]\n\n_gifts = [\n\t\t\t'a Partridge in a Pear Tree', \n\t\t\t'two Turtle Doves', \n\t\t\t'three French Hens', \n\t\t\t'four Calling Birds', \n\t\t\t'five Gold Rings', \n\t\t\t'six Geese-a-Laying', \n\t\t\t'seven Swans-a-Swimming', \n\t\t\t'eight Maids-a-Milking', \n\t\t\t'nine Ladies Dancing', \n\t\t\t'ten Lords-a-Leaping', \n\t\t\t'eleven Pipers Piping',\n\t\t\t'twelve Drummers Drumming'\n\t\t]\n\t\t\t\n\t\t\t\n\t\t\t\ndef verse(index):\n\n\tif index==1:\n\t\treturn "On the %s day of Christmas my true love gave to me, %s.\\n" % (_verses[index-1], _gifts[index-1])\n\telse:\n\t\tgiftlist = _gifts[1:index]\n\t\tgiftlist.reverse()\n\t\treturn "On the %s day of Christmas my true love gave to me, %s, and %s.\\n" % (_verses[index-1], ", ".join(giftlist), _gifts[0])\n\n\n\ndef verses(start, end):\n\n\tverses_string = []\n\n\tfor x in range(start, end+1):\n\t\tverses_string.append(verse(x) + "\\n")\n\n\n\treturn "".join(verses_string)\n\n\ndef sing():\n\treturn verses(1, 12)	\N	\N	0	2	2014-11-14 18:28:31	2014-11-14 18:28:31	209	twelve_days.py
366	6	3684b1dc3dc513ed22036788	pending	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\tvar out = make(map[string]int)\n\n\tfor i, chars := range input {\n\t\tfor _, char := range chars {\n\t\t\tout[strings.ToLower(char)] = i\n\t\t}\n\t}\n\n\treturn out\n}	\N	\N	0	1	2014-11-15 05:54:44	2014-11-15 05:54:44	210	etl.go
367	34	3ad165bfbf3d815db227f6fa	pending	python	accumulate	def accumulate(numbers, function):\n    result = []\n    for n in numbers:\n        result.append(function(n))\n    return result;	\N	\N	0	1	2014-11-04 10:00:46	2014-11-04 10:00:46	211	accumulate.py
368	34	2c65b69e1ac15e7a31d26d53	pending	ruby	rna-transcription	class NucleicAcid\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def ==(object)\n    @strand.to_s == object.to_s\n  end\n\n  def to_s\n    @strand\n  end\n\n  def to_str\n    @strand\n  end\nend\n\nclass RibonucleicAcid < NucleicAcid\nend\n\n\nclass DeoxyribonucleicAcid < NucleicAcid\n  def to_rna\n    RibonucleicAcid.new(@strand.tr 'T', 'U')\n  end\nend	\N	\N	0	1	2014-10-26 04:33:26	2014-10-26 04:33:26	212	rna-transcription.rb
369	34	e4d63fcebe9b4ba07714723f	pending	javascript	word-count	module.exports = function(line) {\r\n  return getWords(line).reduce(function(frequencies, word) {\r\n    frequencies[word] = frequencies.hasOwnProperty(word) ? frequencies[word] + 1 : 1\r\n    return frequencies\r\n  }, {})\r\n}\r\n\r\nfunction stripPunctuation(str) {\r\n  // I refuse to address Javascript's unacceptable lack of support for\r\n  // international characters. The tests pass, so there.\r\n  const PUNCTUATION = /[^a-z\\d\\séПривет]/gi\r\n  return str.replace(PUNCTUATION, '')\r\n}\r\n\r\nfunction getWords(line) {\r\n  return stripPunctuation(line).toLowerCase().split(/\\s+/)\r\n}\r	\N	\N	0	1	2014-11-16 03:06:00	2014-11-16 03:06:00	213	word-count.js
370	16	fc92aa2fbc1db38bb7212623	pending	python	word-count	import re\r\ndef word_count(string):\r\n    string = re.sub('[)(*&^%$#@!:;,]','', string);\r\n    dictionary = {};\r\n    splitwords = string.lower().split();\r\n    for word in splitwords:\r\n        if word in dictionary:\r\n            dictionary[word] = dictionary[word] + 1;\r\n        else:\r\n            dictionary[word] = 1;\r\n    return dictionary;\r	\N	\N	0	1	2014-07-16 11:50:23	2014-07-16 11:50:23	214	wordcount.py
371	16	a481efda034de4a25092dc29	pending	javascript	matrix	var Matrix = function(matrix){\n  var splitMatrix = matrix.split('\\n');\n  var length = splitMatrix.length\n  var unitMatrix = splitMatrix.map(function(item){\n     var tempArr = item.split(' ');\n     tempArr = tempArr.map(function(item){\n      return parseInt(item);\n     })\n\n     return tempArr\n  })\n\n  this.rows = unitMatrix;\n  this.columns = [];\n\n  for(var i = 0; i<this.rows[0].length; i++){\n    var tempArr = [];\n    this.rows.forEach(function(item){\n      tempArr.push(item[i]);\n    })\n    this.columns.push(tempArr);\n  }\n}	\N	\N	0	1	2014-07-13 05:20:42	2014-07-13 05:20:42	215	matrixTest.js
372	16	256ddd4817c921819fb28ded	pending	python	bob	# -*- coding: utf-8 -*-\n\ndef hey(says):\n    trimmed = says.strip()\n    if trimmed == '':\n        return 'Fine. Be that way!'\n    elif trimmed.isupper():\n        return 'Whoa, chill out!'\n    elif trimmed.endswith('?'):\n        return 'Sure.'\n    else:\n        return 'Whatever.'	\N	\N	0	3	2014-08-01 17:14:45	2014-08-01 17:14:45	216	bob.py
373	16	789b42aa8a34df5de709f03a	superseded	python	bob	# -*- coding: utf-8 -*-\n\ndef hey(s):\n    if len(s) == 0 or s.isspace():\n        return 'Fine. Be that way!'\n    elif s.isupper():\n        return 'Whoa, chill out!'\n    elif s.endswith('?'):\n        return 'Sure.'\n    else:\n        return 'Whatever.'	\N	\N	0	1	2014-09-08 17:05:13	2014-09-08 17:05:13	216	bob.py
374	16	af4d09670ad0b38ef061319d	superseded	python	bob	# -*- coding: utf-8 -*-\n\ndef hey(says):\n    if says.strip() == '':\n        return 'Fine. Be that way!'\n    elif says.isupper():\n        return 'Whoa, chill out!'\n    elif says.endswith('?'):\n        return 'Sure.'\n    else:\n        return 'Whatever.'	\N	\N	0	2	2014-09-12 03:03:58	2014-09-12 03:03:58	216	bob.py
375	16	7ba9355a3013e75f99296090	pending	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(4) && (divisible_by?(400) || !divisible_by?(100))\n  end\n\n  private\n\n  def divisible_by?(n)\n    year % n == 0\n  end\nend	\N	\N	0	3	2014-08-27 04:52:34	2014-08-27 04:52:34	217	year.rb
376	16	2c966d8f47f47d22a3892865	superseded	ruby	leap	class Year\n    def initialize(year)\n        @year = year\n    end\n\n    def leap?\n        divide_four? and (fourth_century? or not century?)\n    end\n\n    private\n\n    def divide?(n)\n        @year % n == 0\n    end\n\n    def divide_four?\n        divide? 4\n    end\n\n    def century?\n        divide? 100\n    end\n\n    def fourth_century?\n        divide? 400\n    end\nend	\N	\N	0	1	2014-09-12 16:02:34	2014-09-12 16:02:34	217	leap.rb
377	16	272b36104c4405c2d03b2bfd	superseded	ruby	leap	class Year\n    def initialize(year)\n        @year = year\n    end\n\n    def leap?\n        divide_four? && (fourth_century? || !century?)\n    end\n\n    private\n\n    def divide?(n)\n        @year % n == 0\n    end\n\n    def divide_four?\n        divide? 4\n    end\n\n    def century?\n        divide? 100\n    end\n\n    def fourth_century?\n        divide? 400\n    end\nend	\N	\N	0	2	2014-10-31 02:23:30	2014-10-31 02:23:30	217	leap.rb
378	16	6188aec1bb695ec8adafbfa4	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    differences = 0\n    strand1.length.times do |i|\n      break if strand2.length <= i\n      differences += 1 unless strand1[i] == strand2[i]\n    end\n    differences\n  end\nend	\N	\N	0	1	2014-09-17 23:40:43	2014-09-17 23:40:43	218	hamming.rb
379	16	12387a0b4f3a8fccd061b769	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    distance = 0\n    [strand1.length, strand2.length].min.times do |i|\n      distance += 1 if strand1[i] != strand2[i]\n    end\n    distance\n  end\nend	\N	\N	0	2	2014-10-11 21:20:28	2014-10-11 21:20:28	218	hamming.rb
380	16	921c6a499a519011b2ef7159	pending	ruby	hamming	class Hamming\n  def self.compute(s1, s2)\n    [s1.size, s2.size].min.times.count { |i| s1[i] != s2[i] }\n  end\nend	\N	\N	0	3	2014-11-13 22:22:56	2014-11-13 22:22:56	218	hamming.rb
384	18	80e127476eae46000caf3582	superseded	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator =\n      (string "plus"          >> return Plus)\n  <|> (string "minus"         >> return Minus)\n  <|> (string "multiplied by" >> return Mult)\n  <|> (string "divided by"    >> return Div)\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* char ' '\n  op   <- parseOperator <* char ' '\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|>\n                  (parseExprWith oneExpr <* char '?')\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nquestionParser :: Fractional a => Parser (Expr a)\nquestionParser = string "What is " *> parseExpression\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult parsed\n  where parsed = parse questionParser $ pack str	\N	\N	0	1	2014-05-24 11:41:29	2014-05-24 11:41:29	220	WordProblem.hs
385	18	46d7c27e682703d3e08e5dd2	superseded	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator =\n      (string "plus"          >> return Plus)\n  <|> (string "minus"         >> return Minus)\n  <|> (string "multiplied by" >> return Mult)\n  <|> (string "divided by"    >> return Div)\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* char ' '\n  op   <- parseOperator <* char ' '\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|> parseExprWith oneExpr\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult (parse qParser (pack str))\n  where qParser = string "What is " *> parseExpression	\N	\N	0	2	2014-07-16 06:41:13	2014-07-16 06:41:13	220	WordProblem.hs
386	18	e24095543b341a1810f9b290	superseded	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\n  deriving Show\n\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n  deriving Show\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator = choice [ string "plus"          >> return Plus\n                       , string "minus"         >> return Minus\n                       , string "multiplied by" >> return Mult\n                       , string "divided by"    >> return Div\n                       ]\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* skipSpace\n  op   <- parseOperator <* skipSpace\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|> parseExprWith oneExpr\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult (parse qParser (pack str))\n  where qParser = string "What is " *> parseExpression	\N	\N	0	3	2014-09-08 20:49:16	2014-09-08 20:49:16	220	WordProblem.hs
387	18	8621a5eca5c4c7d27dd19b11	pending	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\n  deriving Show\n\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n  deriving Show\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator = choice [ string "plus"          *> pure Plus\n                       , string "minus"         *> pure Minus\n                       , string "multiplied by" *> pure Mult\n                       , string "divided by"    *> pure Div\n                       ]\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* skipSpace\n  op   <- parseOperator <* skipSpace\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|> parseExprWith oneExpr\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult (parse qParser (pack str))\n  where qParser = string "What is " *> parseExpression	\N	\N	0	4	2014-09-20 14:14:52	2014-09-20 14:14:52	220	WordProblem.hs
388	18	2b6ed84b889a901bedce8a8e	pending	javascript	hamming	function compute(strand1, strand2) {\n\t// Make sure the first strand is shorter or equal\n\tif(strand1.length > strand2.length) {\n\t\tvar tmp = strand1;\n\t\tstrand1 = strand2;\n\t\tstrand2 = tmp;\n\t}\n\n\treturn strand1 // Iterate from the shorter strand\n\t\t.split('')\n\t\t.reduce(function(count, c1, i) {\n\t\t\tvar c2 = strand2[i];\n\n\t\t\tif(c1 !== c2) {\n\t\t\t\treturn count + 1;\n\t\t\t}\n\n\t\t\treturn count;\n\t\t}, 0);\n}\n\n\nexports.compute = compute;	\N	\N	0	1	2014-05-27 01:48:28	2014-05-27 01:48:28	221	hamming.js
389	18	a9aa4aee581e595a1aee26e7	pending	javascript	triangle	function Triangle(side1, side2, side3){\n  this.hasSides = function(){\n    if(side1 + side2 + side3 == 0){\n      throw "Invalid triangle dimensions";\n    };\n  };\n\n  this.hasNegativeSide = function(){\n    return (side1 <= 0 || side2 <= 0 || side3 <= 0);\n  };\n\n  this.violatesTriangleEquality = function(){\n    return ((side1 + side2 <= side3) || (side2 + side3 <= side1) || (side1 + side3 <= side2));\n  }\n\n  this.isIllegal = function(){\n    return (this.hasNegativeSide() || this.violatesTriangleEquality()) && 'illegal';\n  }\n\n  this.isEquilateral = function(){\n    return (side1 === side2 && side2 === side3) && 'equilateral';\n  }\n\n  this.isIsosceles = function(){\n    return (side1 === side2 || side2 === side3 || side1 == side3) && 'isosceles';\n  }\n\n  this.kind = function(){\n    this.hasSides();    \n    return this.isIllegal() || this.isEquilateral() || this.isIsosceles() || 'scalene';\n  };\n};\n\nmodule.exports = Triangle;	\N	\N	0	1	2014-10-17 15:30:13	2014-10-17 15:30:13	222	triangle.js
390	18	93317680cd2c8fc8b7736907	pending	haskell	bank-account	module BankAccount\n    ( BankAccount\n    , openAccount\n    , closeAccount\n    , getBalance\n    , incrementBalance \n    ) where\n\nimport Control.Concurrent\nimport Control.Applicative\nimport Control.Monad\n\ndata BankAccount = BankAccount (MVar Bool) (MVar Int)\n\nopenAccount :: IO BankAccount\nopenAccount = BankAccount <$> newMVar True <*> newMVar 0\n    \ncloseAccount :: BankAccount -> IO ()\ncloseAccount (BankAccount open _) = \n    modifyMVar open $ \\_ -> \n        return (False, ())\n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance (BankAccount open balance) = \n    withMVar open $ \\o -> \n        withMVar balance $ \\b -> \n            return (if o then Just b else Nothing)\n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance (BankAccount open balance) val = \n    withMVar open $ \\o -> \n        modifyMVar balance $ \\b -> \n            if o\n            then return (b + val, Just $ b + val)\n            else return (b, Nothing)\n         \n            	\N	\N	0	1	2014-07-22 18:51:01	2014-07-22 18:51:01	223	bank-account.hs
391	24	9ec14ec53b320092ea517dc6	superseded	elixir	word-count	defmodule Words do\n  def count(str) do\n    words = String.split(normalise(str))\n    Enum.reduce words, HashDict.new, fn word, dict ->\n      Dict.update(dict, word, 1, fn n -> n + 1 end)\n    end\n  end\n\n  defp normalise(str) do\n    String.replace(String.downcase(str), %r/[^a-z0-9]/, " ")\n  end\nend	\N	\N	0	1	2014-09-25 07:40:52	2014-09-25 07:40:52	224	word-count.exs
392	24	30c80953133bf4de7d6fbab2	pending	elixir	word-count	defmodule Words do\n  def count(str) do\n    words = String.split(normalise(str))\n    Enum.reduce words, HashDict.new, fn word, dict ->\n      Dict.update(dict, word, 1, fn n -> n + 1 end)\n    end\n  end\n\n  defp normalise(str) do\n    String.replace(String.downcase(str), %r/[^[:alnum:]]/u, " ")\n  end\nend	\N	\N	0	2	2014-10-15 17:20:13	2014-10-15 17:20:13	224	word-count.exs
393	42	f34f54524e994e2e9d823bd9	superseded	ruby	gigasecond	class Gigasecond\r\n\tdef initialize(d) @date = d end\r\n\tdef date() @date + 10**9 / 24 / 3600 end #add a billion seconds in days\r\nend	\N	\N	0	1	2014-09-28 16:48:54	2014-09-28 16:48:54	225	Gigasecond.rb
394	42	1a16d5ecbd4ad2c1e3db59df	superseded	ruby	gigasecond	class Gigasecond\r\n\tdef initialize(d) @date = d + 10**9 / 24 / 3600 end #add a billion seconds in days\r\n\tattr_accessor :date\r\nend	\N	\N	0	2	2014-10-01 18:10:09	2014-10-01 18:10:09	225	Gigasecond.rb
395	42	d1d49b401d86d49e8a5a01f7	pending	ruby	gigasecond	class Gigasecond\r\n\tdef initialize(d) @date = d + 10**9 / 24 / 3600 end #add a billion seconds in days\r\n\tattr_reader :date\r\nend	\N	\N	0	3	2014-10-03 15:51:24	2014-10-03 15:51:24	225	Gigasecond.rb
396	42	60a0f3dc739ca4aa75063e56	pending	clojure	grade-school	(ns grade_school)\n\n(defn grade [db g]\n  (get db g []))\n\n(defn add [db name g]\n  (assoc db g (conj (grade db g) name)))\n\n(defn sorted [db]\n  (into (sorted-map)\n        (map (fn [[key val]] [key (sort val)]) db)))	\N	\N	0	1	2014-09-28 18:01:16	2014-09-28 18:01:16	226	grade_school.clj
397	42	86d6895968289c2354817dd6	superseded	javascript	leap	function Year(year) {\n\n  this.isLeapYear = function() {\n    return divisibleBy(4) && (!divisibleBy(100) || divisibleBy(400));\n  };\n\n  function divisibleBy(interval) {\n    return year % interval === 0;\n  }\n\n}\n\nmodule.exports = function isLeapYear(year) {\n  return new Year(year).isLeapYear();\n};	\N	\N	0	1	2014-09-24 20:15:31	2014-09-24 20:15:31	227	leap.js
398	42	63ae45f1c2832962f1fa3d18	superseded	javascript	leap	function Year(year) {\n\n  this.isLeapYear = multipleOf(4) &&\n    (!multipleOf(100) || multipleOf(400));\n\n  function multipleOf(interval) {\n    return year % interval === 0;\n  }\n\n}\n\nmodule.exports = function isLeapYear(year) {\n  return new Year(year).isLeapYear;\n};	\N	\N	0	2	2014-10-28 06:04:09	2014-10-28 06:04:09	227	leap.js
399	42	edc7345eda1c4a63daa03849	pending	javascript	leap	function Year(year) {\n\n  var isLeapYear = multipleOf(4) &&\n    (!multipleOf(100) || multipleOf(400));\n\n  this.isLeapYear = function() {\n    return isLeapYear;\n  };\n\n  function multipleOf(interval) {\n    return year % interval === 0;\n  }\n\n}\n\nmodule.exports = function isLeapYear(year) {\n  return new Year(year).isLeapYear();\n};	\N	\N	0	3	2014-11-12 02:14:58	2014-11-12 02:14:58	227	leap.js
400	42	babc74e61474324f7281177f	pending	python	twelve-days	_ordinal = ['first',\n\t\t\t'second',\n\t\t\t'third',\n\t\t\t'fourth',\n\t\t\t'fifth',\n\t\t\t'sixth',\n\t\t\t'seventh',\n\t\t\t'eighth',\n\t\t\t'ninth',\n\t\t\t'tenth',\n\t\t\t'eleventh',\n\t\t\t'twelfth']\n\n_gifts = ['twelve Drummers Drumming, ',\n\t\t  'eleven Pipers Piping, ',\n\t\t  'ten Lords-a-Leaping, ',\n\t\t  'nine Ladies Dancing, ',\n\t\t  'eight Maids-a-Milking, ',\n\t\t  'seven Swans-a-Swimming, ',\n\t\t  'six Geese-a-Laying, ',\n\t\t  'five Gold Rings, ',\n\t\t  'four Calling Birds, ',\n\t\t  'three French Hens, ',\n\t\t  'two Turtle Doves, and ',\n\t\t  'a Partridge in a Pear Tree.\\n']\n\n_refrain = 'On the %s day of Christmas my true love gave to me, '\n\ndef verse(songnbr):\n\treturn ''.join([_refrain % _ordinal[songnbr-1]] + _gifts[-songnbr:])\n\ndef verses(s, e):\n\treturn '\\n'.join(verse(n) for n in xrange(s, e + 1)) + '\\n'\n\ndef sing():\n\treturn verses(1, 12)	\N	\N	0	2	2014-09-23 17:34:52	2014-09-23 17:34:52	228	twelve_days.py
401	42	92d3c3daf08a5bc0e5e01728	superseded	python	twelve-days	day_ordinals = ['first',\n\t\t\t\t'second',\n\t\t\t\t'third',\n\t\t\t\t'fourth',\n\t\t\t\t'fifth',\n\t\t\t\t'sixth',\n\t\t\t\t'seventh',\n\t\t\t\t'eighth',\n\t\t\t\t'ninth',\n\t\t\t\t'tenth',\n\t\t\t\t'eleventh',\n\t\t\t\t'twelfth']\n\n_gifts = ['a Partridge in a Pear Tree',\n\t\t 'two Turtle Doves',\n\t\t 'three French Hens',\n\t\t 'four Calling Birds',\n\t\t 'five Gold Rings',\n\t\t 'six Geese-a-Laying',\n\t\t 'seven Swans-a-Swimming',\n\t\t 'eight Maids-a-Milking',\n\t\t 'nine Ladies Dancing',\n\t\t 'ten Lords-a-Leaping',\n\t\t 'eleven Pipers Piping',\n\t\t 'twelve Drummers Drumming']\n\n_refrain = "On the %s day of Christmas my true love gave to me, "\n\ndef _gift_descr(num, add_conjunction=False):\n\tdesc = _gifts[num-1]\n\t# Only append this if we have multiple verses\n\tif num > 1:\n\t\tdesc += ', ' + _gift_descr(num-1, add_conjunction)\n\tconjunction = 'and ' if num == 1 and add_conjunction else ''\n\treturn conjunction + desc\n\ndef verse(num):\n\tif num < 1:\n\t\traise IndexError("Verse number must be greater than or equal to 1!")\n\tif 12 < num:\n\t\traise IndexError("Verse number must be less than or equal to 12!")\n\tadd_conjunction = num > 1\n\treturn _refrain % day_ordinals[num-1] + _gift_descr(num, add_conjunction) + '.\\n'\n\ndef verses(start, end):\n\tverse_string = ''\n\tfor i in xrange(start, end+1):\n\t\tverse_string += verse(i) + '\\n'\n\treturn verse_string\n\ndef sing():\n\treturn verses(1, 12)	\N	\N	0	1	2014-10-05 09:11:46	2014-10-05 09:11:46	228	twelve_days.py
402	42	9960f2d615603db8b4ba059b	pending	ruby	phone-number	class PhoneNumber\n\n  def initialize(number_str)\n    @number_str = number_str.gsub(/\\D+/, '')\n    @number_str = @number_str.gsub(/^1(\\d{10})/, '\\\\1')\n    @number_str = "0000000000" unless @number_str.length == 10;\n  end\n\n  def number()\n    @number_str\n  end\n\n  def area_code()\n    @number_str[0..2]\n  end\n\n  def to_s()\n    @number_str.gsub(/^(\\d{3})(\\d{3})(\\d{4})$/, '(\\\\1) \\\\2-\\\\3')\n  end\n\nend	\N	\N	0	1	2014-10-17 18:27:14	2014-10-17 18:27:14	229	phone-number.rb
414	45	e0e325584fcfa7d90ba3af7a	pending	haskell	robot-name	module Robot ( robotName\n             , mkRobot\n             , resetName\n             )\nwhere\n\nimport System.Random\nimport Data.IORef\n\ntype Robot = IORef String\n\nmkRobot :: IO Robot\nmkRobot = newIORef =<< generateName\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO [('A', 'Z'), ('A', 'Z'), ('0', '9'), ('0', '9'), ('0', '9')]\n\nrobotName :: Robot -> IO String\nrobotName = readIORef\n\nresetName :: Robot -> IO ()\nresetName r = writeIORef r =<< generateName	\N	\N	0	3	2014-07-06 10:54:23	2014-07-06 10:54:23	236	Robot.hs
403	42	35f0cf23cc46c54fbce1f13b	pending	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn letter-frequencies\n  "For a word, returns a map with the frequency of each case-insensitive letter"\n  [word]\n  (frequencies (re-seq #"\\w" (lower-case word))))\n\n(defn anagrams-for\n  "Given a word and a list of possible anagrams, return a subset of the list containing only valid anagrams of the word"\n  [word anagrams]\n  (let [word-freq (letter-frequencies word)]\n    (->> anagrams\n         (remove (partial = word))\n         (filter #(= word-freq (letter-frequencies %))))))	\N	\N	0	1	2014-10-22 07:12:13	2014-10-22 07:12:13	230	anagram.clj
404	27	511bb66c15caabf925b02f7c	pending	ruby	bob	class Bob\n\t@response\n\n   def initialize\n   end\n\n   # class method\n   def hey (statement)\n   \tif statement.upcase == statement && statement.downcase != statement\n     \t@response = 'Woah, chill out!'\n     elsif statement.strip.empty?\n     \t@response = 'Fine. Be that way!'\n     elsif statement[-1,1] == '?'\n     \t@response = 'Sure.'\n     else\n     \t@response = 'Whatever.'\n     end\n     @response\n   end\n end	\N	\N	0	1	2014-06-29 14:02:41	2014-06-29 14:02:41	231	bob.rb
405	27	afa273375268da244ddd4eb3	pending	haskell	grade-school	module School (School, add, empty, grade, sorted) where\n\nimport qualified Data.Map as M\nimport qualified Data.Set as S\n\ntype School = M.Map Int (S.Set String)\n\nempty :: School\nempty = M.empty\n\ngrade :: Int -> School -> [String]\ngrade g s = maybe [] S.toAscList $ M.lookup g s\n\nadd :: Int -> String -> School -> School\nadd g name = M.insertWith S.union g (S.singleton name)\n\nsorted :: School -> [(Int, [String])]\nsorted = M.toAscList . M.map S.toAscList	\N	\N	0	2	2014-08-04 23:54:08	2014-08-04 23:54:08	232	grade-school.hs
406	27	e4dc7b36bac0f1a47c0633e6	superseded	haskell	grade-school	module School (School, add, empty, grade, sorted) where\n\nimport qualified Data.Map as M\nimport qualified Data.List as L\n\ntype School = M.Map Int [String]\n\nempty :: School\nempty = M.empty\n\ngrade :: Int -> School -> [String]\ngrade = M.findWithDefault []\n\nadd :: Int -> String -> School -> School\nadd g name school = M.insert g newlist school\n  where\n    newlist = L.insert name $ grade g school\n\nsorted :: School -> [(Int, [String])]\nsorted = M.toList	\N	\N	0	1	2014-09-18 22:03:56	2014-09-18 22:03:56	232	grade-school.hs
407	45	0a86dadc1ca3d522e932cfb9	pending	clojure	grade-school	(ns school)\n\n(defn add\n  [db name grade]\n  (update-in db [grade] (fnil #(conj % name) [])))\n\n(defn grade\n  [db grade]\n  (get db grade []))\n\n(defn sorted\n  [db]\n  (into {} (for [[grade students] db]\n    [grade (sort compare students)])))	\N	\N	0	1	2014-06-24 17:01:34	2014-06-24 17:01:34	233	school.clj
408	45	2a1645c6a4a7fccf83cf6e33	pending	javascript	bob	var Bob = function(str) {\n    this.hey = function(str){\n        // Silences if trim returns length 0\n        if ( str.trim().length === 0 ){\n            return "Fine. Be that way!";\n        }\n        // if str contains at least a letter and str is in uppercase, is yelling.\n        if ( str.match("[A-Z]") && str === str.toUpperCase() ){\n            return "Woah, chill out!";\n        }\n        // Questions if str ends with ? (cross-browser compatible)\n        if ( str.slice(-1) == "?" ){\n            return "Sure.";\n        }\n        // Anything else \n        return "Whatever.";\n    }\n};\nmodule.exports = Bob;	\N	\N	0	1	2014-06-10 01:11:07	2014-06-10 01:11:07	234	bob.js
409	45	c54b77866a90d63d95564673	superseded	scala	anagram	class Anagram(word: String) {\n  val length = word.length\n  // val wordCount = new Phrase(word).wordCount\n  val charCnt = new CharCount(word.toLowerCase).charCount.toList.sorted\n\n  def matches(candidates: Seq[String]): Seq[String] =  {\n    val uniqueCandidates = candidates.toSet.toList\n    uniqueCandidates.toSet.toList.filter{\n      (x: String) => (new CharCount(x.toLowerCase).charCount.toList.sorted == charCnt)\n    }\n  }\n}\n\n// Helper\nclass CharCount(word: String) {\n  // val word = phrase.split("""\\s|[:,.!&@$%^]""").filter(_ != "").map(_.toLowerCase)\n  val chars   = word.toList\n  val charSet = word.toSet\n  val charCnt = for {\n    char <- charSet.toSeq\n  } yield chars.count(_ == char)\n\n  val charCount = charSet.zip(charCnt).toMap\n\n}\n\nobject Anagram {\n  def main(args: Array[String]) {\n    val detector = new Anagram("ant")\n    val anagrams = detector.matches(Seq("tan", "stand", "at"))\n    // println(anagrams)\n    val a = new CharCount("ant").charCount.toList.sorted\n    val b = new CharCount("tan").charCount.toList.sorted\n    println(a == b)\n    println("run")\n  }\n}	\N	\N	0	1	2014-05-20 02:54:17	2014-05-20 02:54:17	235	anagram.scala
410	45	0a22ca003421f6fd5bf3ec9f	superseded	scala	anagram	class Anagram(anagram: String) {\n  val charCnt = new CharCount(anagram.toLowerCase).charCount.toList.sorted\n\n  def matches(candidates: Seq[String]): Seq[String] =  {\n    val uniqueCandidates = candidates.toSet.toList\n    uniqueCandidates.toSet.toList.filter{\n      (x: String) => (new CharCount(x.toLowerCase).charCount.toList.sorted == charCnt)\n    }.filter {\n      // Filter identcal words with triating case insensitive\n      word => word.toLowerCase != anagram.toLowerCase\n    }\n\n  }\n}\n\n// Helper\nclass CharCount(word: String) {\n  val chars   = word.toList\n  val charSet = word.toSet\n  val charCnt = for {\n    char <- charSet.toSeq\n  } yield chars.count(_ == char)\n\n  val charCount = charSet.zip(charCnt).toMap\n}	\N	\N	0	2	2014-05-28 21:16:56	2014-05-28 21:16:56	235	anagram.scala
411	45	c10873fc988b7d5800eeb13a	pending	scala	anagram	class Anagram(anagram: String) {\n  def matches(candidates: Seq[String]): Seq[String] =  {\n    candidates.filter( word => isAnagram(word) && ! isIdentical(word) )\n  }\n\n  private def isAnagram(word: String) = {\n    word.toLowerCase.sorted == anagram.toLowerCase.sorted\n  }\n\n  private def isIdentical(word: String) = {\n    word.toLowerCase == anagram.toLowerCase\n  }\n}	\N	\N	0	3	2014-07-07 18:49:41	2014-07-07 18:49:41	235	anagram.scala
412	45	75990ba58afc61df7b4e1157	superseded	haskell	robot-name	module Robot ( robotName\n             , mkRobot\n             , resetName\n             )\nwhere\n\nimport System.Random\nimport Data.IORef\n\ntype Robot = IORef String\n\nmkRobot :: IO Robot\nmkRobot = newIORef ""\n\nrobotGenerator :: IO StdGen\nrobotGenerator = newStdGen\n\ngenerateName :: IO String\ngenerateName =\n  do\n    g <- robotGenerator\n    let ll = take 2 $ randomRs ('A', 'Z') g\n        nn = take 3 $ randomRs ('0', '9') g\n      in\n     return $ (take 2 ll) ++ (take 3 nn)\n\nrobotName :: Robot -> IO String\nrobotName r =\n  do\n    n <- readIORef r\n    case n of\n      "" -> \n        do\n          nn <- generateName\n          writeIORef r nn\n          return ()\n      n  -> return ()\n    readIORef r\n\nresetName :: Robot -> IO ()\nresetName r = writeIORef r ""	\N	\N	0	1	2014-05-18 07:43:23	2014-05-18 07:43:23	236	Robot.hs
413	45	c2a84e9a8d0c31e90889349a	superseded	haskell	robot-name	module Robot ( robotName\n             , mkRobot\n             , resetName\n             )\nwhere\n\nimport System.Random\nimport Data.IORef\n\ntype Robot = IORef String\n\nmkRobot :: IO Robot\nmkRobot = newIORef =<< generateName\n\ngenerateName :: IO String\ngenerateName =\n  do\n    g <- newStdGen\n    let ll = take 2 $ randomRs ('A', 'Z') g\n        nn = take 3 $ randomRs ('0', '9') g\n      in\n     return $ (take 2 ll) ++ (take 3 nn)\n\nrobotName :: Robot -> IO String\nrobotName = readIORef\n  \nresetName :: Robot -> IO ()\nresetName r = writeIORef r =<< generateName	\N	\N	0	2	2014-07-01 11:46:48	2014-07-01 11:46:48	236	Robot.hs
415	45	6687f9b795e023266c9358b1	pending	ruby	raindrops	class Raindrops\n    def convert(num)\n        strin=""\n        if num % 3 == 0\n            strin+="Pling"\n        end\n        if num % 5 == 0\n            strin+="Plang"\n        end\n        if num % 7 == 0\n            strin+="Plong"\n        end\n        if strin!= ""\n            strin\n        else\n            num.to_s()\n        end\n    end\nend	\N	\N	0	1	2014-10-07 02:44:08	2014-10-07 02:44:08	237	raindrops.rb
416	45	0967f7ed4dbb3c173c0ebe42	pending	python	word-count	from collections import Counter\nimport re\n\nonlyAlphaNumPattern = re.compile('[^\\w\\d\\s]')\n\ndef word_count(textString):\n    phrase = onlyAlphaNumPattern.sub('',textString)\n    lowerCasePhrase = phrase.lower()\n    wordlist = lowerCasePhrase.split()\n    return Counter(wordlist)	\N	\N	0	1	2014-06-27 23:20:15	2014-06-27 23:20:15	238	wordcount.py
417	45	69e9e9c9e057b6fae115f1e7	pending	python	anagram	def detect_anagrams(word, word_list):\r\n  result = []\r\n  for w in word_list:\r\n    if w.lower() == word.lower():\r\n      continue\r\n    elif len(word) != len(w):\r\n      continue\r\n    else:\r\n      if ''.join(sorted(w.lower())) == ''.join(sorted(word.lower())):\r\n        result.append(w)\r\n  return result	\N	\N	0	1	2014-10-13 02:12:23	2014-10-13 02:12:23	239	anagram.py
418	45	f2e902f074c468e949ae68bf	pending	go	clock	// Package clock implements a simple 24 hour clock interface\npackage clock\n\nimport (\n\t"fmt"\n)\n\ntype clock struct {\n\thours   int\n\tminutes int\n}\n\nconst (\n\thoursInADay     = 1440\n\tminutesInAnHour = 60\n)\n\n// New initializes a new clock with the given time in hours and minutes.\nfunc New(h int, m int) clock {\n\tc := clock{\n\t\thours:   0,\n\t\tminutes: 0,\n\t}\n\n\treturn c.Add(h*60 + m)\n}\n\n// String converts a clock instance to a string.\nfunc (c clock) String() string {\n\treturn fmt.Sprintf("%02d:%02d", c.hours, c.minutes)\n}\n\n// Add increments the clock by a given number of minutes.\nfunc (c clock) Add(m int) clock {\n\ttotal := c.toMinutes() + m\n\n\tif total < 0 {\n\t\ttotal = hoursInADay + total\n\t}\n\n\tc.hours = (total % hoursInADay) / minutesInAnHour\n\tc.minutes = total % minutesInAnHour\n\n\treturn c\n}\n\nfunc (c *clock) toMinutes() int {\n\treturn c.hours*minutesInAnHour + c.minutes\n}	\N	\N	0	1	2014-05-22 07:59:26	2014-05-22 07:59:26	240	clock.go
419	45	217143cbbed22344248d6a13	superseded	haskell	nth-prime	module Prime (nth) where\n\nnth n = head . drop (n-1) . filter isPrime $ 2:[3,5..]\n\nisPrime n = all (/=0) [n `rem` d | d <- divs]\n  where divs = takeWhile (< (n `quot` 2)) (2:[3,5..])	\N	\N	0	1	2014-06-10 11:52:26	2014-06-10 11:52:26	241	Prime.hs
420	45	ecc969f7f01d6a16d89a8607	superseded	haskell	nth-prime	module Prime (nth) where\n\nnth n = primes !! (n-1)\n\nprimes = 2:3:5:filter isPrime [7,9..]\n\nisPrime n = all (/=0) [n `rem` d | d <- divs]\n  where divs = takeWhile (< (n `quot` 2)) primes	\N	\N	0	2	2014-06-20 01:21:21	2014-06-20 01:21:21	241	Prime.hs
421	45	cf0701b2442eb5c0c9ccb176	pending	haskell	nth-prime	module Prime (nth) where\n\nnth :: Int -> Int\nnth n = primes !! (n-1)\n\nprimes :: [Int]\nprimes = 2:3:5:filter isPrime [7,9..]\n\nisPrime :: Int -> Bool\nisPrime n = all (/=0) [n `rem` d | d <- divs]\n  where divs = takeWhile (< (n `quot` 2)) primes	\N	\N	0	3	2014-09-02 23:31:04	2014-09-02 23:31:04	241	Prime.hs
422	45	57de01df311b5f43e1f5d029	superseded	haskell	binary	module Binary (toDecimal) where\r\nimport Data.List(foldl')\r\n\r\nsafeRead :: Char -> Integer\r\nsafeRead x = if x == '1' then 1 else 0\r\n\r\ntoDecimal :: String -> Integer\r\ntoDecimal = foldl' (\\v c -> 2 * v + safeRead c) 0\r\n--pointfree says I could have it like this, but I'm not sure it's readable:\r\n--toDecimal = foldl' ((. safeRead) . (+) . (2*)) 0\r	\N	\N	0	1	2014-05-30 22:24:45	2014-05-30 22:24:45	242	Binary.hs
423	45	8c2bd1d8865980e396918b7b	pending	haskell	binary	module Binary (toDecimal) where\r\nimport Data.Bits\r\nimport Data.List(foldl')\r\n\r\nsafeRead :: Char -> Integer\r\nsafeRead x = if x == '1' then 1 else 0\r\n\r\ntoDecimal :: String -> Integer\r\ntoDecimal = foldl' ((.|.) . (`shift` 1)) 0 . map safeRead\r	\N	\N	0	2	2014-08-26 11:27:35	2014-08-26 11:27:35	242	Binary.hs
424	45	31f5f14411807920400c5646	superseded	ruby	proverb	class Proverb\n  def initialize(*words, qualifier: nil)\n    @words, @qualifier = words, qualifier\n  end\n\n  def to_s\n    @words.reduce("") { |adage, word| adage + next_line_with(word) }\n  end\n\n  private\n\n  def next_line_with(word)\n    last_index?(word,@words) ? envoi : verse(word, next_word(word))\n  end\n\n  def last_index?(word, words)\n    words.index(word) == words.length-1\n  end\n\n  def next_word(word)\n    @words[@words.index(word)+1]\n  end\n\n  def max_index\n    @words.length\n  end\n\n  def verse(wanted_item, lost_item)\n    "For want of a #{wanted_item} the #{lost_item} was lost.\\n"\n  end\n\n  def envoi\n    "And all for the want of a#{space}#{@qualifier} #{first_word}."\n  end\n\n  def first_word\n    @words[0]\n  end\n\n  def space\n    " " if @qualifier\n  end\nend	\N	\N	0	5	2014-06-02 16:15:34	2014-06-02 16:15:34	243	proverb.rb
425	45	e6974f01edfb5e2c15cdcb5b	superseded	ruby	proverb	class Proverb\n  def initialize(*words, qualifier: nil)\n    @words, @qualifier = words, qualifier\n  end\n\n  def to_s\n    @words.reduce("") { |adage, word| adage + next_line(word) }\n  end\n\n  private\n\n  def next_line(word)\n    last_word?(word) ? envoi : verse(word)\n  end\n\n  def last_word?(word)\n    word == @words.last\n  end\n\n  def verse(word)\n    "For want of a #{word} the #{get_next(word)} was lost.\\n"\n  end\n\n  def get_next(word)\n    @words[@words.index(word)+1]\n  end\n\n  def envoi\n    "And all for the want of a#{space}#{@qualifier} #{first_word}."\n  end\n\n  def first_word\n    @words[0]\n  end\n\n  def space\n    " " if @qualifier\n  end\nend	\N	\N	0	6	2014-06-11 00:34:51	2014-06-11 00:34:51	243	proverb.rb
426	45	102537da26ed4f06f4393ca0	superseded	ruby	proverb	class Proverb\n\n  def initialize(*words, qualifier: adjective = nil)\n    @words = words\n    @qualifier = qualifier\n  end\n\n  def to_s\n    lines(@words.reverse)\n  end\n\n  def lines(items)\n    if items.size == 1\n      envoi(@words.first)\n    else\n      verse(items.pop,items.last) + lines(items)\n    end\n  end\n\n  def verse(wanted_item, lost_item)\n    "For want of a #{wanted_item} the #{lost_item} was lost.\\n"\n  end\n\n  def envoi(item)\n    "And all for the want of a#{qualification} #{item}."\n  end\n\n  def qualification\n    @qualifier ? " " + @qualifier : ""\n  end\nend	\N	\N	0	2	2014-06-26 07:26:30	2014-06-26 07:26:30	243	proverb.rb
427	45	afa8626f41a2b17e3fc3c932	superseded	ruby	proverb	class Proverb\n\n  def initialize(*words, qualifier: adjective = nil)\n    @words = words\n    @qualifier = qualifier\n  end\n\n  def to_s\n    lines(@words.reverse)\n  end\n\n  private\n\n  def lines(items)\n    if items.size == 1\n      envoi(@words.first)\n    else\n      verse(items.pop,items.last) + lines(items)\n    end\n  end\n\n  def verse(wanted_item, lost_item)\n    "For want of a #{wanted_item} the #{lost_item} was lost.\\n"\n  end\n\n  def envoi(item)\n    "And all for the want of a#{space}#{@qualifier.to_s} #{item}."\n  end\n\n  def space\n    " " unless @qualifier.nil?\n  end\nend	\N	\N	0	4	2014-07-04 18:05:46	2014-07-04 18:05:46	243	proverb.rb
428	45	be69cb02883793144831a45c	superseded	ruby	proverb	class Proverb\n\n  def initialize(*words, qualifier: adjective = nil)\n    @words = words\n    @qualifier = qualifier\n  end\n\n  def to_s\n    lines(@words.reverse)\n  end\n\n  def lines(items)\n    if items.size == 1\n      envoi(@words.first)\n    else\n      verse(items.pop,items.last) + lines(items)\n    end\n  end\n\n  def verse(wanted_item, lost_item)\n    "For want of a #{wanted_item} the #{lost_item} was lost.\\n"\n  end\n\n  def envoi(item)\n    "And all for the want of a#{qualification.to_s} #{item}."\n  end\n\n  def qualification\n    " " + @qualifier unless @qualifier.nil?\n  end\nend	\N	\N	0	3	2014-08-08 20:04:21	2014-08-08 20:04:21	243	proverb.rb
429	45	7ffdc3cf0899c1f3f95419d4	superseded	ruby	proverb	require 'pry'\nclass Proverb\n  def initialize(*words, qualifier: nil)\n    @words, @qualifier = words, qualifier\n  end\n\n  def to_s\n    response = ""\n    @words.each_cons(2){ |wanted_items| response += verse(*wanted_items) }\n    response + envoi\n  end\n\n  private\n\n  def verse(word1, word2)\n    "For want of a #{word1} the #{word2} was lost.\\n"\n  end\n\n  def envoi\n    "And all for the want of a#{qualifier} #{first_word}."\n  end\n\n  def first_word\n    @words[0]\n  end\n\n  def qualifier\n    " " + @qualifier if @qualifier\n  end\nend	\N	\N	0	7	2014-09-23 13:03:13	2014-09-23 13:03:13	243	proverb.rb
430	45	df75ed1c5cf7d7c3ec19bd87	pending	ruby	proverb	require 'pry'\nclass Proverb\n  def initialize(*words, qualifier: nil)\n    @words, @qualifier = words, qualifier\n  end\n\n  def to_s\n    @words.each_cons(2).map{ |wants| verse(*wants) }.join + envoi\n  end\n\n  private\n\n  def verse(want1, want2)\n    "For want of a #{want1} the #{want2} was lost.\\n"\n  end\n\n  def envoi\n    "And all for the want of a#{qualifier} #{first_word}."\n  end\n\n  def first_word\n    @words[0]\n  end\n\n  def qualifier\n    " " + @qualifier if @qualifier\n  end\nend	\N	\N	0	8	2014-10-14 22:04:03	2014-10-14 22:04:03	243	proverb.rb
431	45	0bd7998b84839178bfdb9c85	superseded	ruby	proverb	class Proverb\n\n  def initialize(*words, qualifier: adjective = nil)\n    @words = words\n    @qualifier = qualifier\n  end\n\n  def to_s\n    lines(@words.reverse)\n  end\n\n  def lines(items)\n    if items.size == 1\n      return envoi(@words.first)\n    else\n      return verse(items.pop,items.last) + lines(items)\n    end\n  end\n\n  def verse(wanted_item, lost_item)\n    "For want of a #{wanted_item} the #{lost_item} was lost.\\n"\n  end\n\n  def envoi(item)\n    "And all for the want of a#{qualification} #{item}."\n  end\n\n  def qualification\n    @qualifier ? " " + @qualifier : ""\n  end\nend	\N	\N	0	1	2014-10-16 09:54:10	2014-10-16 09:54:10	243	proverb.rb
432	45	46063fe5fd846f5e0657d6eb	pending	ruby	triangle	class Triangle\n  def initialize(*sides)\n    raise TriangleError unless sides.count == 3\n    @small, @medium, @large = *sides.sort\n  end\n\n  def kind\n    if invalid? \n      raise TriangleError\n    elsif equilateral?\n      :equilateral\n    elsif isoceles?\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\n  private\n\n    def invalid?\n      @small < 0 || @small + @medium <= @large\n    end\n    \n    def equilateral?\n      @small == @medium && @medium == @large\n    end\n\n    def isoceles?\n      @small == @medium || @medium == @large\n    end\nend\n\nclass TriangleError < ArgumentError; end	\N	\N	0	1	2014-06-04 12:47:10	2014-06-04 12:47:10	244	triangle.rb
433	45	359a55e8dae1d7284a92eba1	pending	clojure	leap	(ns leap)\n\n(defn leap-year? [year]\n  (let [divisable? #(= 0 (mod year %))]\n    (if (divisable? 100)\n      (divisable? 400)\n      (divisable? 4))))	\N	\N	0	1	2014-06-23 17:16:54	2014-06-23 17:16:54	245	leap.clj
434	45	a0999aa0e8bc1cdde2e7ef15	pending	clojure	roman-numerals	(ns roman_numerals)\n\n(def roman-shape\n  [1000 900 500 400 100 90 50 40 10 9 5 4 1])\n\n(def roman-numerals\n  ["M" "CM" "D" "CD" "C" "XC" "L" "XL" "X" "IX" "V" "IV" "I"])\n\n(defn- digits-of\n  [[shape-first & shape-rest] n]\n  (when-not (nil? shape-first)\n    (cons\n     (quot n shape-first)\n     (digits-of shape-rest (mod n shape-first)))))\n\n(defn numerals [s]\n  (let [digits (vec (digits-of roman-shape s))]\n    (apply str (mapcat #(take %1 (repeat %2)) digits roman-numerals))))	\N	\N	0	1	2014-09-01 04:21:44	2014-09-01 04:21:44	246	roman_numerals.clj
435	45	2f5e0c9767203accb34d3cb7	pending	python	rna-transcription	from string import maketrans\n\ntbl = maketrans('GCTA','CGAU')\ndef to_rna(s):\n\treturn s.translate(tbl)	\N	\N	0	1	2014-08-01 23:44:10	2014-08-01 23:44:10	247	dna.py
436	45	8ce32d0b2be37dfd38f79eda	superseded	ruby	rna-transcription	class Complement\n  DNA_MAP = {\n    "G" => "C",\n    "C" => "G",\n    "T" => "A",\n    "A" => "U"\n  }\n  RNA_MAP = DNA_MAP.invert\n\n  def self.of_dna(dna)\n    dna.each_char.map { |d| DNA_MAP[d] }.join\n  end\n\n  def self.of_rna(rna)\n    rna.each_char.map { |d| RNA_MAP[d] }.join\n  end\nend	\N	\N	0	1	2014-07-11 05:54:50	2014-07-11 05:54:50	248	complement.rb
437	45	0ae2bd96bb9b50d6f7d81a96	pending	ruby	rna-transcription	class Complement\n  DNA_SEQ = "GCTA"\n  RNA_SEQ = "CGAU"\n\n  def self.of_dna(dna)\n    dna.tr(DNA_SEQ, RNA_SEQ)\n  end\n\n  def self.of_rna(rna)\n    rna.tr(RNA_SEQ, DNA_SEQ)\n  end\nend	\N	\N	0	2	2014-09-05 15:14:02	2014-09-05 15:14:02	248	complement.rb
438	45	851a21d8271cefcc5ae6e6d7	superseded	clojure	bob	(ns bob)\n\n(defn is-question?\n  [input-string]\n  (= (last input-string)) /?)\n\n(defn response-for\n  [input]\n  (if (is-question? input)\n    "Sure."\n    "Whatever."))\n  	\N	\N	0	1	2014-06-19 09:05:21	2014-06-19 09:05:21	249	bob.clj
439	45	0d8230b6cabc87ffb8e74cd1	pending	clojure	bob	(ns bob)\n\n(defn remove-numbers\n  [input-string]\n  (clojure.string/replace input-string #"\\d+" ""))\n\n(defn remove-punctuation\n  [input-string]\n  (clojure.string/replace input-string #"\\p{P}" ""))\n\n(defn is-nothing?\n  [input-string]\n  (= (clojure.string/replace input-string #" " "") ""))\n\n(defn is-yelling?\n  [input-string]\n  (let [no-numbers  (remove-numbers input-string)\n        no-punct    (remove-punctuation no-numbers)]\n    (and \n     (> (count no-numbers) 1)\n     (not (is-nothing? no-punct))\n     (= (clojure.string/upper-case no-numbers)\n        no-numbers))))\n\n(defn is-question?\n  [input-string]\n   (= (str (last input-string)) "?"))\n\n(defn response-for\n  [input]\n  (cond (is-nothing? input)  "Fine. Be that way!"\n        (and (is-question? input) (not (is-yelling? input))) "Sure."\n        (is-yelling? input)  "Woah, chill out!"\n        :else                "Whatever."))\n\n\n  	\N	\N	0	2	2014-10-12 08:01:15	2014-10-12 08:01:15	249	bob.clj
440	45	b9e4f5da0110b3d2039b5274	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(date):\n  return date + datetime.timedelta(seconds=10**9)	\N	\N	0	1	2014-06-24 09:57:12	2014-06-24 09:57:12	250	gigasecond.py
441	45	432860cbb3a6448de2538e69	pending	lua	word-count	local words = {}\r\n\r\nfunction words:new(sentence)\r\n    result = {}\r\n    --Count words in a sentence\r\n    function result:count() \r\n        dictionary = {} --Create dict for every word of sentence\r\n        \r\n        for word in string.gmatch(sentence, "%w+") do --Parse string\r\n            local lower = string.lower(word) --Make word lowercase\r\n            if dictionary[lower] then\r\n                dictionary[lower] = dictionary[lower] + 1 --If word is already there, just count it\r\n            else\r\n                dictionary[lower] = 1 --Fill dictionary with words\r\n            end\r\n        end\r\n        \r\n        for key, value in pairs(dictionary) do \r\n            dictionary[key] = tostring(value) --Transform word count (number) into a corresponding string\r\n        end\r\n        \r\n        return dictionary\r\n    end\r\n    \r\n    return result\r\nend\r\n\r\nreturn words\r	\N	\N	0	1	2014-07-03 18:50:35	2014-07-03 18:50:35	251	words.lua
442	45	8b184ef8fe0ada391c40de79	superseded	go	word-count	// Package wc implements logic for counting words in a string.\npackage wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\n// Histogram is a map from word to count of occurrences of that word.\n// Invariant: No count will be <=0.\ntype Histogram map[string]int\n\n// Equal tests whether the given histogram is equal to this one.\nfunc (h Histogram) Equal(other Histogram) bool {\n\tif len(h) != len(other) {\n\t\treturn false\n\t}\n\tfor k, v := range h {\n\t\tif other[k] != v {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// WordCount calculates a Histogram for the given string.\n// A word is defined as a consecutive sequence of runes for which unicode.IsLetter returns true.\nfunc WordCount(s string) Histogram {\n\th := make(Histogram)\n\twords := strings.FieldsFunc(s, func(r rune) bool { return !unicode.IsLetter(r) })\n\tfor _, word := range words {\n\t\th[word]++\n\t}\n\treturn h\n}	\N	\N	0	1	2014-09-25 06:41:54	2014-09-25 06:41:54	252	wc.go
443	45	7fcda8a752cfc8244e54a870	pending	go	word-count	// Package wc implements logic for counting words in a string.\npackage wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\n// Histogram is a map from word to count of occurrences of that word.\n// Invariant: No count will be <=0.\ntype Histogram map[string]int\n\n// Equal tests whether the given histogram is equal to this one.\nfunc (h Histogram) Equal(other Histogram) bool {\n\tif len(h) != len(other) {\n\t\treturn false\n\t}\n\tfor k, v := range h {\n\t\tif other[k] != v {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// normalized returns a copy of s, excluding any non-alphanumeric, non-whitespace runes.\nfunc normalized(s string) string {\n\treturn strings.Map(func(r rune) rune {\n\t\tif unicode.IsLetter(r) || unicode.IsNumber(r) || unicode.IsSpace(r) {\n\t\t\treturn r\n\t\t}\n\t\treturn -1\n\t}, s)\n}\n\n// WordCount calculates a Histogram for the given string.\n// Words are delimited by whitespace, and are normalized to lowercase.\n// Any non-alphanumeric runes within a word are removed.\nfunc WordCount(s string) Histogram {\n\th := make(Histogram)\n\ts = strings.ToLower(s)\n\ts = normalized(s)\n\twords := strings.Fields(s)\n\tfor _, word := range words {\n\t\th[word]++\n\t}\n\treturn h\n}	\N	\N	0	2	2014-09-28 00:41:15	2014-09-28 00:41:15	252	wc.go
444	45	0c85534574657cfa8eced92b	superseded	ruby	bob	#!/usr/bin/env ruby\n\nclass Bob\n  def hey(m)\n    return 'Fine. Be that way!' if m.nil? or m.rstrip.empty?\n    return 'Woah, chill out!' if m.upcase == m\n    return 'Sure.' if m =~ /\\?$/\n    'Whatever.'\n  end\nend	\N	\N	0	1	2014-07-07 21:25:12	2014-07-07 21:25:12	253	bob.rb
445	45	8bd34fe2a852943b7d1b0ac9	pending	ruby	bob	#!/usr/bin/env ruby\n\nclass Bob\n  def hey(m)\n    # If m is nil, or the string is empty after removing spaces...\n    return 'Fine. Be that way!' if m.nil? or m.rstrip.empty?\n\n    # If m is all caps...\n    return 'Woah, chill out!' if m.upcase == m\n\n    # If m ends with a ?\n    return 'Sure.' if m =~ /\\?$/\n\n    # Otherwise...\n    'Whatever.'\n  end\nend	\N	\N	0	2	2014-07-18 07:21:33	2014-07-18 07:21:33	253	bob.rb
446	45	0ac5d8ddbfffe3145d7932ee	pending	javascript	difference-of-squares	(function(){\n  'use strict';\n\n  var Squares = function(num) {\n    this.num = num;\n    this.squareOfSums = this.squareOfSums();\n    this.sumOfSquares = this.sumOfSquares();\n    this.difference = this.squareOfSums - this.sumOfSquares;\n  };\n\n  Squares.prototype.squareOfSums = function() {\n    var sum = 0;\n    for (var i = this.num; i > 0; i--) {\n      sum += i;\n    }\n    return Math.pow(sum, 2);\n  };\n\n  Squares.prototype.sumOfSquares = function() {\n    var sum = 0;\n    for (var i = this.num; i > 0; i--) {\n      sum += Math.pow(i, 2);\n    }\n    return sum;\n  };\n\n  module.exports = Squares;\n})();	\N	\N	0	1	2014-08-04 03:02:09	2014-08-04 03:02:09	254	squares.js
447	45	9b00260e2c1771a3f7944085	pending	python	accumulate	def accumulate(collection, formula):\n    return [formula(x) for x in collection]	\N	\N	0	1	2014-05-22 00:19:03	2014-05-22 00:19:03	255	accumulate.py
448	45	b90b97a5e157fd3b4bbbbb5d	pending	go	raindrops	package raindrops\n\nimport "fmt"\n\nfunc Convert(i int) string {\n    var s string = ""\n    if i % 3 == 0 {\n        s += "Pling"\n    }\n    if i % 5 == 0 {\n        s += "Plang"\n    }\n    if i % 7 == 0 {\n        s += "Plong"\n    }\n    if s == "" {\n        s = fmt.Sprint(i)\n    }\n    return s\n}	\N	\N	0	1	2014-09-03 19:25:11	2014-09-03 19:25:11	256	raindrops.go
449	45	46e377852e06736e264cbb6c	pending	python	difference-of-squares	def square_of_sum(n):\n    # the explicit form for the sum of all natural numbers for 1 to n is n*(n+1)/2\n    # square that and you get:\n    return n*n*(n+1)*(n+1)/4\n\ndef sum_of_squares(n):\n    # again, there is a neat explicit form for the sum of all squares\n    return n*(n+1)*(2*n+1)/6\n\ndef difference(n):\n    # with a bit of algebra square_of_sum - sum_of_squares simplifies to:\n    return n*(n+1)*(n-1)*(3*n+2)/12	\N	\N	0	1	2014-06-07 04:22:47	2014-06-07 04:22:47	257	difference_of_squares.py
450	45	6c76aff65b08ae80dcbd0e6b	pending	haskell	bob	module Bob where\n\nimport Control.Applicative\nimport Data.Char\nimport Data.List\n\n\nresponseFor :: String -> String\nresponseFor phrase\n  | isNothing = "Fine. Be that way!"\n  | isYell = "Woah, chill out!"\n  | isQuestion = "Sure."\n  | otherwise = "Whatever."\n  where\n    isNothing = all isSpace phrase\n    isYell = ((&&) <$> (not . null) <*> all isUpper) $ filter isAlpha phrase\n    isQuestion = not (null phrase) && (last phrase == '?')	\N	\N	0	1	2014-05-19 00:56:37	2014-05-19 00:56:37	258	bob.hs
451	45	11ef21275dfb77c6c28c532a	superseded	python	bob	def hey(input):\r\n  input = input.strip()\r\n  if len(input) == 0:\r\n    return 'Fine. Be that way!'\r\n  elif input.isupper():\r\n    return 'Whoa, chill out!'\r\n  elif input.endswith('?'):\r\n    return 'Sure.'\r\n  else:\r\n    return 'Whatever.'\r	\N	\N	0	1	2014-07-15 02:55:55	2014-07-15 02:55:55	259	bob.py
452	45	8be7a40795ae607f244639eb	pending	python	bob	from __future__ import unicode_literals\r\n\r\ndef hey(input):\r\n  input = input.strip()\r\n  if len(input) == 0:\r\n    return 'Fine. Be that way!'\r\n  elif input.isupper():\r\n    return 'Whoa, chill out!'\r\n  elif input.endswith('?'):\r\n    return 'Sure.'\r\n  else:\r\n    return 'Whatever.'\r	\N	\N	0	2	2014-08-26 17:57:46	2014-08-26 17:57:46	259	bob.py
453	45	d14099c855552896c405c982	superseded	csharp	bob	using System;\r\nusing System.Collections.Specialized;\r\nusing System.Linq;\r\n\r\npublic class Bob\r\n{\r\n    private static Func<string, bool> _emptyPredicate = (message) => \r\n        message.All(c => c == ' ');\r\n\r\n    private static Func<string, bool> _yellPredicate = (message) => \r\n        message.ToUpper() == message && message.Any(Char.IsLetter);\r\n\r\n    private static Func<string, bool> _questionPredicate = (message) => \r\n        message.EndsWith("?");\r\n\r\n    private static Func<string, bool> _otherwise = (message) => true;\r\n\r\n    private static OrderedDictionary _responseTable = \r\n        new OrderedDictionary\r\n        {\r\n            {_emptyPredicate, "Fine. Be that way!"},\r\n            {_yellPredicate, "Woah, chill out!"},\r\n            {_questionPredicate, "Sure."},\r\n            {_otherwise, "Whatever."}\r\n        };\r\n\r\n    public string Hey(string message)\r\n    {\r\n        var key = _responseTable\r\n            .Keys\r\n            .Cast<Func<string, bool>>()\r\n            .First(predicate => predicate(message));\r\n        return _responseTable[key] as string;\r\n    }\r\n}\r	\N	\N	0	3	2014-06-23 14:33:39	2014-06-23 14:33:39	260	Bob.cs
454	45	c29b16c6e27eac9569c97712	pending	csharp	bob	using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\ninternal struct Response\r\n{\r\n    public Func<string, bool> Predicate { get; set; }\r\n    public string Text { get; set; }\r\n}\r\n\r\npublic class Bob\r\n{\r\n    private static List<Response> _responses =\r\n        new List<Response>\r\n        {\r\n            new Response \r\n            { \r\n                Predicate = (message) => message.All(c => c == ' '),\r\n                Text = "Fine. Be that way!"\r\n            },\r\n            new Response\r\n            {\r\n                Predicate = (message) => message.ToUpper() == message \r\n                    && message.Any(Char.IsLetter),\r\n                Text = "Woah, chill out!"\r\n            },\r\n            new Response\r\n            {\r\n                Predicate = (message) => message.EndsWith("?"),\r\n                Text = "Sure."\r\n            },\r\n            new Response\r\n            {\r\n                Predicate = (message) => true,\r\n                Text = "Whatever."\r\n            }\r\n        };\r\n\r\n    public string Hey(string message)\r\n    {\r\n        return _responses.First(r => r.Predicate(message)).Text;\r\n    }\r\n}\r	\N	\N	0	4	2014-07-09 10:16:15	2014-07-09 10:16:15	260	Bob.cs
455	45	5182e7582ad51a940a3a466b	superseded	csharp	bob	using System;\r\nusing System.Linq;\r\n\r\npublic class Bob\r\n{\r\n    private string RespondEmpty(string what)\r\n    {\r\n        return (what.All(c => c == ' ')) ? "Fine. Be that way!" : null;\r\n    }\r\n\r\n    private string RespondYell(string what)\r\n    {\r\n        var allUpper = what.All(\r\n                c => !Char.IsLetter(c) || Char.IsUpper(c));\r\n        var containsLetter = what.Any(\r\n                c => Char.IsLetter(c));\r\n        return (allUpper && containsLetter) ?  "Woah, chill out!" : null;\r\n    }\r\n\r\n    private string RespondQuestion(string what)\r\n    {\r\n        return what.EndsWith("?") ? "Sure." : null;\r\n    }\r\n\r\n    public string Hey(string what)\r\n    {\r\n        return RespondEmpty(what)\r\n            ?? RespondYell(what)\r\n            ?? RespondQuestion(what)\r\n            ?? "Whatever.";\r\n    }\r\n}\r	\N	\N	0	1	2014-09-20 06:42:47	2014-09-20 06:42:47	260	Bob.cs
456	45	e507353f6972b6b264efd65b	superseded	csharp	bob	using System;\r\nusing System.Linq;\r\n\r\npublic class Bob\r\n{\r\n    private string RespondEmpty(string what)\r\n    {\r\n        return (what.All(c => c == ' ')) ? "Fine. Be that way!" : null;\r\n    }\r\n\r\n    private string RespondYell(string what)\r\n    {\r\n        var allUpper = what.ToUpper() == what;\r\n        var containsLetter = what.Any(c => Char.IsLetter(c));\r\n        return (allUpper && containsLetter) ?  "Woah, chill out!" : null;\r\n    }\r\n\r\n    private string RespondQuestion(string what)\r\n    {\r\n        return what.EndsWith("?") ? "Sure." : null;\r\n    }\r\n\r\n    public string Hey(string what)\r\n    {\r\n        return RespondEmpty(what)\r\n            ?? RespondYell(what)\r\n            ?? RespondQuestion(what)\r\n            ?? "Whatever.";\r\n    }\r\n}\r	\N	\N	0	2	2014-10-18 19:35:54	2014-10-18 19:35:54	260	Bob.cs
457	45	f8de72d64a83ca9f7d28e98e	pending	haskell	nucleotide-count	module DNA \n    ( count\n    , nucleotideCounts\n    ) where\n\nimport Data.List\nimport qualified Data.Map as M\n\ntype NucleoMap = M.Map Char Int\n\ninitialMap :: NucleoMap\ninitialMap = foldl' (\\m c -> M.insert c 0 m) M.empty validNucleotides\n\nvalidNucleotides :: String\nvalidNucleotides = "ACGT"\n\ncount :: Char -> String -> Int\ncount c str \n    | c == 'U'  = 0\n    | isValid c = length . filter (== c) $ str\n    | otherwise = error $ "invalid nucleotide '" ++ [c] ++ "'"\n\nisValid :: Char -> Bool\nisValid = flip elem validNucleotides \n        \nnucleotideCounts :: String -> NucleoMap\nnucleotideCounts = foldl' doCount initialMap . filter isValid\n  where\n    doCount :: NucleoMap -> Char -> NucleoMap\n    doCount m c = M.insertWith' (+) c 1 m	\N	\N	0	1	2014-07-17 04:39:18	2014-07-17 04:39:18	262	nucleotide-count.hs
458	45	621a2c38362f12d3d1b881e3	pending	javascript	hamming	var Hamming = {\n\tdifference : function(array1, array2) {\n\t\tif(array2.length > array1.length) {\n\t\t\tvar temp = array2;\n\t\t\tarray2 = array1;\n\t\t\tarray1 = temp;\n\t\t}\n\t\t \n\t\treturn array2.filter(function(value, index) {\n\t\t\treturn array1[index] != array2[index];\n\t\t});\n\t},\n\t\n\tcompute : function(strand1, strand2) {\n\t\treturn Hamming.difference(strand1.split(''), strand2.split('')).length;\n\t}\n};\n\nmodule.exports = Hamming;	\N	\N	0	1	2014-07-11 16:32:01	2014-07-11 16:32:01	263	hamming.js
459	45	892888c1389a2e84250419ad	pending	scala	bob	\r\nclass Bob {\r\n\r\n  def hey(call: String): String =\r\n    if (call.trim.isEmpty)\r\n      "Fine. Be that way!"\r\n    else if (call.toUpperCase == call && "[a-zA-Z]".r.findFirstIn(call).isDefined)\r\n      "Woah, chill out!"\r\n    else if (call.endsWith("?"))\r\n      "Sure."\r\n    else\r\n      "Whatever."\r\n}\r	\N	\N	0	1	2014-07-09 00:18:01	2014-07-09 00:18:01	264	Bob.scala
460	45	cb35c211bb0cb50ae0661ec0	pending	javascript	triangle	var Triangle = function(){\n  var sides,kind,isIsosceles,isEquilateral,isInvalid;\n  \n  sides = [].slice.call(arguments, 0,3).sort();\n  \n  this.kind = function(){\n    if(kind != null) return kind;\n    if(isInvalid(sides)) return kind = "illegal";\n    if(isEquilateral(sides)) return kind = "equilateral";\n    if(isIsosceles(sides)) return kind = "isosceles";\n    return kind = "scalene";\n  };\n  \n  isIsosceles = function(sides){\n    return sides[0] == sides[1] || sides[1] == sides[2];\n  };\n  \n  isEquilateral = function(sides){\n    return sides[0] == sides[1] && sides[1] == sides[2];\n  };\n  \n  isInvalid = function(sides){\n    for(var i = 0; i < 3; i++){\n      if(sides[i%3] >= sides[(i+1)%3]+sides[(i+2)%3]) return true\n    }\n    return false;\n  }\n};\n\nif(module){\n  module.exports = Triangle;\n}	\N	\N	0	1	2014-08-02 18:33:39	2014-08-02 18:33:39	265	triangle.js
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 460, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	22	1978-12-29 05:23:01	1978-12-29 05:23:01	t
2	1	15	1973-03-11 21:40:09	1973-03-11 21:40:09	t
3	1	18	2000-08-23 22:19:47	2000-08-23 22:19:47	t
4	1	23	2013-04-10 15:12:46	2013-04-10 15:12:46	t
5	1	11	1982-02-08 02:55:02	1982-02-08 02:55:02	t
6	1	8	2009-04-06 03:11:51	2009-04-06 03:11:51	t
7	1	7	1997-04-02 08:54:15	1997-04-02 08:54:15	t
8	1	30	2004-03-07 04:16:24	2004-03-07 04:16:24	t
9	1	31	1979-10-17 13:12:33	1979-10-17 13:12:33	t
10	1	36	2012-11-14 05:18:17	2012-11-14 05:18:17	t
11	1	16	1991-12-01 11:23:11	1991-12-01 11:23:11	f
12	1	17	2005-07-08 05:41:40	2005-07-08 05:41:40	f
13	1	29	2004-02-05 20:35:23	2004-02-05 20:35:23	f
14	1	32	1984-07-28 21:48:18	1984-07-28 21:48:18	f
15	1	38	1976-08-15 13:25:24	1976-08-15 13:25:24	f
16	1	42	1987-05-04 07:46:53	1987-05-04 07:46:53	f
17	1	43	1981-02-12 04:04:20	1981-02-12 04:04:20	f
18	1	47	1981-09-20 15:09:48	1981-09-20 15:09:48	f
19	2	3	2013-06-29 22:34:53	2013-06-29 22:34:53	t
20	2	36	1979-01-21 04:58:15	1979-01-21 04:58:15	t
21	2	31	1973-08-01 13:01:02	1973-08-01 13:01:02	t
22	2	47	2001-05-30 00:29:55	2001-05-30 00:29:55	t
23	2	19	1999-05-17 00:26:30	1999-05-17 00:26:30	f
24	2	38	1971-07-24 14:18:53	1971-07-24 14:18:53	f
25	3	38	2000-04-07 22:34:38	2000-04-07 22:34:38	f
26	3	3	2009-05-05 02:14:39	2009-05-05 02:14:39	f
27	4	3	2007-07-15 11:30:13	2007-07-15 11:30:13	t
28	4	32	1990-05-14 06:48:45	1990-05-14 06:48:45	t
29	4	22	1988-01-16 11:07:45	1988-01-16 11:07:45	t
30	4	27	1980-02-29 07:48:25	1980-02-29 07:48:25	t
31	4	20	2012-07-26 17:05:26	2012-07-26 17:05:26	t
32	4	25	1972-02-24 06:12:58	1972-02-24 06:12:58	t
33	4	19	1988-06-12 04:57:41	1988-06-12 04:57:41	t
34	4	24	1970-03-25 16:43:26	1970-03-25 16:43:26	t
35	4	26	2002-02-12 04:55:44	2002-02-12 04:55:44	t
36	4	21	1974-03-10 11:45:51	1974-03-10 11:45:51	t
37	4	38	1998-05-09 00:18:10	1998-05-09 00:18:10	f
38	4	12	1990-01-21 15:19:14	1990-01-21 15:19:14	f
39	4	14	1998-02-22 09:21:02	1998-02-22 09:21:02	f
40	5	32	1981-07-24 21:48:33	1981-07-24 21:48:33	t
41	5	40	1985-12-23 03:24:46	1985-12-23 03:24:46	t
42	5	35	1982-06-03 22:02:47	1982-06-03 22:02:47	t
43	5	37	2007-08-01 11:55:54	2007-08-01 11:55:54	t
44	5	33	1975-09-19 13:46:14	1975-09-19 13:46:14	t
45	5	36	1990-08-09 02:33:02	1990-08-09 02:33:02	t
46	5	34	2006-05-24 01:04:10	2006-05-24 01:04:10	t
47	5	39	1984-11-14 11:54:44	1984-11-14 11:54:44	t
48	5	41	1993-12-10 17:59:24	1993-12-10 17:59:24	f
49	5	38	1998-11-19 04:38:30	1998-11-19 04:38:30	f
50	5	3	1972-05-16 19:22:03	1972-05-16 19:22:03	f
51	6	6	1976-12-12 21:21:51	1976-12-12 21:21:51	t
52	6	7	1979-10-12 23:32:00	1979-10-12 23:32:00	t
53	6	8	2008-06-28 05:36:05	2008-06-28 05:36:05	t
54	6	9	1981-09-22 05:44:52	1981-09-22 05:44:52	t
55	6	11	1974-12-05 09:37:03	1974-12-05 09:37:03	t
56	6	12	2014-06-07 10:35:02	2014-06-07 10:35:02	t
57	6	13	1997-09-11 10:22:28	1997-09-11 10:22:28	t
58	6	14	1984-11-20 17:55:01	1984-11-20 17:55:01	t
59	6	15	2002-01-09 23:44:32	2002-01-09 23:44:32	t
60	6	16	1974-08-27 12:09:06	1974-08-27 12:09:06	t
61	6	17	2007-02-06 10:30:53	2007-02-06 10:30:53	t
62	6	18	1984-07-24 21:44:00	1984-07-24 21:44:00	t
63	6	23	1999-10-11 21:06:54	1999-10-11 21:06:54	t
64	6	28	1973-08-20 11:14:23	1973-08-20 11:14:23	t
65	6	29	2009-07-25 14:23:20	2009-07-25 14:23:20	t
66	6	30	2006-06-11 03:41:00	2006-06-11 03:41:00	t
67	6	31	1995-08-01 03:51:55	1995-08-01 03:51:55	t
68	6	32	2012-01-11 01:38:27	2012-01-11 01:38:27	t
69	6	38	2000-06-28 05:18:10	2000-06-28 05:18:10	t
70	6	42	2009-08-21 15:52:43	2009-08-21 15:52:43	t
71	6	43	1984-09-05 15:37:57	1984-09-05 15:37:57	t
72	6	44	1999-05-09 13:36:36	1999-05-09 13:36:36	t
73	6	45	1992-09-04 01:58:19	1992-09-04 01:58:19	t
74	6	46	1975-08-29 07:13:55	1975-08-29 07:13:55	t
75	6	47	2007-08-26 19:07:30	2007-08-26 19:07:30	t
76	6	48	1997-06-01 06:49:12	1997-06-01 06:49:12	t
77	6	49	1993-11-03 00:39:58	1993-11-03 00:39:58	t
78	7	3	1989-12-12 07:52:44	1989-12-12 07:52:44	t
79	7	39	1985-12-02 16:55:43	1985-12-02 16:55:43	t
80	7	32	1999-12-22 01:45:20	1999-12-22 01:45:20	t
81	7	38	1996-01-14 19:12:48	1996-01-14 19:12:48	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-10-21 23:27:18.696445	2014-10-21 23:27:18.696445	baconesia
2	chocolades	2014-10-05 04:06:38.736008	2014-10-05 04:06:38.736008	chocolades
3	ghost	2014-05-08 16:41:35.747943	2014-05-08 16:41:35.747943	ghost
4	motley	2014-07-07 17:15:05.753515	2014-07-07 17:15:05.753515	motley
5	rugrats	2014-09-17 05:19:24.773967	2014-09-17 05:19:24.773967	rugrats
6	slate	2014-10-03 00:14:02.792215	2014-10-03 00:14:02.792215	slate
7	polkadots	2014-04-21 11:07:55.831664	2014-04-21 11:07:55.831664	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
202	41	javascript	beer-song	1	pending	\N	2014-09-17 16:37:47	2014-09-17 16:37:47	56e80790c320c11722aa648a	f
1	9	ruby	bob	1	done	2014-11-28 04:38:23	2014-11-20 12:24:35	2014-11-20 12:24:35	870a4f7d6598c7042f32ff4b	t
2	9	elixir	rna-transcription	1	done	2014-11-25 06:36:34	2014-11-16 08:39:05	2014-11-16 08:39:05	82a1a875c8a93ddfdf53199c	t
3	9	ruby	hamming	2	done	2014-11-26 16:32:29	2014-11-16 20:43:35	2014-11-16 20:43:35	21e81b9713f4b302337d7649	t
4	9	haskell	point-mutations	1	done	2014-11-25 01:28:18	2014-11-15 00:26:27	2014-11-15 00:26:27	7c9f363c58894c1f248ba6f3	t
5	9	javascript	beer-song	2	pending	\N	2014-11-13 09:07:05	2014-11-13 09:07:05	be02e83fd3739e823c5e2239	f
6	11	ruby	rna-transcription	1	pending	\N	2014-06-01 23:24:51	2014-06-01 23:24:51	2b5a599c5b3785aa5e3431ca	f
7	11	ruby	gigasecond	4	pending	\N	2014-04-11 19:31:40	2014-04-11 19:31:40	2f4ad830a704cf97318ff65b	f
8	11	perl5	bob	2	done	2014-05-16 20:15:18	2014-04-05 15:13:12	2014-04-05 15:13:12	1a6898d9c90d959259f8071b	t
9	11	csharp	hamming	3	done	2014-06-28 16:47:13	2014-05-26 23:54:49	2014-05-26 23:54:49	8c14269c629f0581dea0f431	t
10	11	haskell	binary-search-tree	1	done	2014-06-02 03:12:59	2014-05-31 11:42:26	2014-05-31 11:42:26	ccb113a4dfdb3d0ea35cc86e	t
11	11	elixir	beer-song	1	done	2014-04-16 06:35:01	2014-04-14 07:13:31	2014-04-14 07:13:31	1caef7c3c54b856c737019fa	t
12	12	ocaml	word-count	2	done	2014-07-23 00:44:40	2014-07-20 02:14:43	2014-07-20 02:14:43	7edf10056f27e5df56e433b4	t
13	12	ruby	hamming	1	pending	\N	2014-09-16 22:14:06	2014-09-16 22:14:06	1bcc13d52570798d4be3a094	f
14	12	ruby	gigasecond	1	done	2014-07-26 20:20:01	2014-07-16 05:31:57	2014-07-16 05:31:57	a1d95368e8187e6112371cb2	t
15	15	ruby	bob	1	done	2014-10-29 06:48:40	2014-10-26 07:11:01	2014-10-26 07:11:01	33ec258fcf30678c8393d3dd	t
16	22	ruby	trinary	1	done	2014-09-16 00:03:38	2014-09-14 17:18:28	2014-09-14 17:18:28	77c8c83b2d433924bda9e92f	t
17	22	ruby	anagram	1	done	2014-06-27 20:52:27	2014-06-19 14:12:41	2014-06-19 14:12:41	6c4aaaaa033d096f6cb9cf7c	t
18	22	ruby	bob	1	pending	\N	2014-07-28 13:03:50	2014-07-28 13:03:50	217e08e999702aa4f5953c5a	f
19	22	haskell	anagram	2	done	2014-07-02 14:18:31	2014-06-25 14:27:27	2014-06-25 14:27:27	c9efb0dc67490eabcf36a50f	t
20	22	go	leap	2	done	2014-09-03 13:58:43	2014-06-21 07:56:39	2014-06-21 07:56:39	a5455188767157d23b990dd4	t
21	22	ruby	strain	1	done	2014-08-07 07:16:18	2014-08-04 04:52:33	2014-08-04 04:52:33	cd5d8481feaac4e9c048a169	t
22	22	clojure	bob	1	pending	\N	2014-08-21 06:48:35	2014-08-21 06:48:35	7acd48a83b898e1df35d76ae	f
23	22	ruby	hamming	4	pending	\N	2014-08-10 07:55:10	2014-08-10 07:55:10	cd637e14d2be8e1d9ee6ae76	f
24	22	javascript	roman-numerals	1	done	2014-10-10 00:57:23	2014-09-28 22:07:03	2014-09-28 22:07:03	ba4198436779b8452f272092	t
25	22	haskell	rna-transcription	1	done	2014-09-05 21:05:37	2014-09-04 08:28:06	2014-09-04 08:28:06	102b80e15b1c4d1b796d4941	t
26	22	python	grade-school	2	pending	\N	2014-07-12 10:24:21	2014-07-12 10:24:21	c4397fef146d4a9f02bf9cdd	f
27	22	python	word-count	1	done	2014-09-21 14:53:11	2014-09-17 03:47:42	2014-09-17 03:47:42	b6b45507d60725af848963c1	t
28	22	ruby	leap	1	pending	\N	2014-06-27 10:52:21	2014-06-27 10:52:21	0cdf3fa7c98f263ee91255a4	f
29	22	haskell	hexadecimal	3	done	2014-08-30 10:27:35	2014-07-08 03:53:09	2014-07-08 03:53:09	e7cc1e0343be3b02243960d4	t
30	22	python	bob	3	done	2014-10-28 18:19:30	2014-06-17 17:44:22	2014-06-17 17:44:22	c651921e6eacd9f1f8887569	t
31	22	python	sieve	1	done	2014-06-29 03:31:38	2014-06-27 22:57:10	2014-06-27 22:57:10	47dda92e195faffc7e47cc1f	t
32	22	ruby	proverb	3	done	2014-10-22 09:48:19	2014-09-02 07:35:27	2014-09-02 07:35:27	70c0347d037b5997ef145c0e	t
33	22	csharp	phone-number	1	pending	\N	2014-07-04 19:23:57	2014-07-04 19:23:57	2fedbdaaccbb9178aee640f8	f
34	22	perl5	clock	1	pending	\N	2014-07-14 09:17:01	2014-07-14 09:17:01	aa30e3fba6ce69fd3e6ec54e	f
35	22	python	anagram	5	done	2014-10-21 00:12:29	2014-08-19 15:56:40	2014-08-19 15:56:40	f4322341ab8cba18d184e0e7	t
36	22	haskell	grains	2	pending	\N	2014-08-01 13:37:54	2014-08-01 13:37:54	3d7f234c1b9c5eed372c6f5b	f
37	22	haskell	leap	2	pending	\N	2014-06-26 18:50:36	2014-06-26 18:50:36	b993627f17f07637e49e2304	f
38	22	javascript	bob	1	done	2014-08-07 18:11:29	2014-08-07 17:42:27	2014-08-07 17:42:27	834e735ad86fcf426ee15ab4	t
39	22	python	scrabble-score	1	done	2014-10-14 09:01:29	2014-10-08 21:24:05	2014-10-08 21:24:05	a6358c0c7a26fd965892c62f	t
40	22	haskell	phone-number	1	pending	\N	2014-07-21 03:28:58	2014-07-21 03:28:58	b9eb9ecb8ba54466570ee9df	f
41	22	erlang	accumulate	1	pending	\N	2014-07-24 14:36:57	2014-07-24 14:36:57	7b17abdf7ddb8f89a44b7404	f
42	22	ruby	grains	1	done	2014-07-17 09:52:16	2014-07-12 16:09:51	2014-07-12 16:09:51	527bd9cf6427c3a26d626f5d	t
43	22	javascript	word-count	1	done	2014-06-24 05:36:20	2014-06-20 00:32:30	2014-06-20 00:32:30	a9708a7d3462853f518748db	t
44	22	haskell	sublist	1	pending	\N	2014-07-27 09:32:47	2014-07-27 09:32:47	c4d39803e7a598e29d59699c	f
45	22	clojure	beer-song	4	done	2014-07-06 04:37:40	2014-06-29 23:32:10	2014-06-29 23:32:10	96ee080255ada6833170bad5	t
46	22	perl5	binary-search	1	pending	\N	2014-07-09 07:00:45	2014-07-09 07:00:45	3bb19f104205c668e1dda923	f
47	28	haskell	rna-transcription	3	done	2014-11-22 19:30:03	2014-09-03 07:44:45	2014-09-03 07:44:45	242b3b7f62fb600ac59d958b	t
48	28	csharp	phone-number	1	done	2014-08-11 19:06:58	2014-08-06 22:52:11	2014-08-06 22:52:11	03067b71c280f44bb1ca20f4	t
49	28	python	hamming	1	done	2014-09-18 03:13:42	2014-09-09 08:37:54	2014-09-09 08:37:54	bca5981959211ee69ffc01c1	t
50	28	go	bob	1	pending	\N	2014-08-16 15:42:30	2014-08-16 15:42:30	6a8bd9975713d78d99129b62	f
51	28	clojure	word-count	5	done	2014-11-15 01:04:44	2014-09-30 21:20:17	2014-09-30 21:20:17	6a3c55c0115d4a8c30bc64d0	t
52	28	haskell	kindergarten-garden	1	pending	\N	2014-08-10 01:33:52	2014-08-10 01:33:52	b5b7fd08afed0ad2998df6b5	f
53	28	ruby	leap	1	done	2014-09-03 12:06:37	2014-08-23 08:57:34	2014-08-23 08:57:34	68b6961759da0784b1d66707	t
54	29	python	saddle-points	1	done	2014-09-11 03:35:17	2014-09-01 12:23:18	2014-09-01 12:23:18	53faa34eda641f15cc2e8d6d	t
55	31	ruby	simple-linked-list	1	pending	\N	2014-06-07 04:06:55	2014-06-07 04:06:55	11eb08d23f82bba5695d5b38	f
56	33	coffeescript	bob	4	pending	\N	2014-11-19 16:38:27	2014-11-19 16:38:27	c76a936d4079ed33a87a1bd5	f
57	33	ruby	sieve	1	done	2014-11-29 15:27:01.197576	2014-11-22 01:15:35	2014-11-22 01:15:35	e3d3c3ad46a56a607aa26e61	t
58	33	python	leap	2	done	2014-11-29 15:27:01.225616	2014-11-20 20:53:15	2014-11-20 20:53:15	e6f2df0e42401b6a6516904d	t
59	33	clojure	bob	2	done	2014-11-26 12:44:41	2014-11-23 10:23:50	2014-11-23 10:23:50	1bbbc6ea80d599b15d033c09	t
60	33	ruby	leap	3	done	2014-11-29 15:27:01.337803	2014-11-19 05:00:40	2014-11-19 05:00:40	2fd7a5858f29ac9873e42c83	t
61	38	ruby	prime-factors	1	pending	\N	2014-07-04 18:15:15	2014-07-04 18:15:15	840596cab95359d1365021b9	f
62	40	ruby	roman-numerals	1	pending	\N	2014-07-27 02:58:17	2014-07-27 02:58:17	0c4f20dea3bfbd6fac0d41f2	f
63	40	python	leap	1	pending	\N	2014-08-18 22:12:36	2014-08-18 22:12:36	7d02d7aa3a4c83dc8450590d	f
203	41	csharp	bob	1	pending	\N	2014-08-19 09:08:21	2014-08-19 09:08:21	445ed45022cc83ee2d432b07	f
64	40	python	word-count	3	done	2014-11-20 15:36:32	2014-09-29 00:14:58	2014-09-29 00:14:58	09fcfe832365ee54339f0e7c	t
204	6	clojure	bob	1	pending	\N	2014-11-20 12:51:18	2014-11-20 12:51:18	05f61ef8a9e28c32b7aa516f	f
65	44	elixir	beer-song	1	done	2014-11-29 15:27:01.463986	2014-11-24 06:08:07	2014-11-24 06:08:07	cbd0252ddfa134dad744cadb	t
205	6	python	difference-of-squares	1	pending	\N	2014-11-12 14:05:53	2014-11-12 14:05:53	01687a04ede7acce6a8c62ab	f
66	44	ruby	leap	2	done	2014-11-27 03:30:59	2014-11-25 16:53:36	2014-11-25 16:53:36	edb560b76df0dc6436b891c4	t
67	44	haskell	anagram	2	pending	\N	2014-11-25 02:46:30	2014-11-25 02:46:30	33f5fafe93d666b17e671831	f
206	6	ruby	gigasecond	1	pending	\N	2014-11-14 09:33:42	2014-11-14 09:33:42	775b78b480162d8497dce8ba	f
68	44	clojure	bob	3	done	2014-11-29 15:27:01.60221	2014-11-24 13:20:49	2014-11-24 13:20:49	69cfc04c7445e0202157f6b1	t
207	6	python	atbash-cipher	2	pending	\N	2014-11-12 11:35:28	2014-11-12 11:35:28	74dee79470ff4ff8865af2fb	f
69	44	ruby	etl	1	done	2014-11-29 15:27:01.645471	2014-11-28 01:54:00	2014-11-28 01:54:00	9fdfdc3a1466ac423367320e	t
208	6	ruby	leap	1	pending	\N	2014-11-13 08:08:43	2014-11-13 08:08:43	082ff60b1fc5a5ee5654c109	f
70	44	ruby	house	2	done	2014-11-29 15:27:01.678783	2014-11-26 03:17:12	2014-11-26 03:17:12	2d9a855ac2a012cdfc464af1	t
209	6	python	twelve-days	2	pending	\N	2014-11-13 06:41:31	2014-11-13 06:41:31	62aa320d724df673d27b20bd	f
71	44	python	leap	1	done	2014-11-29 15:27:01.709472	2014-11-24 01:47:26	2014-11-24 01:47:26	33bd220c505b2dadd772bf73	t
210	6	go	etl	1	pending	\N	2014-11-15 05:54:44	2014-11-15 05:54:44	ded2dfbcd84b0a8c740af8eb	f
72	44	go	leap	1	done	2014-11-27 06:23:49	2014-11-25 22:31:45	2014-11-25 22:31:45	e009dfc6a5bdc4b8c5b78a27	t
211	34	python	accumulate	1	pending	\N	2014-11-04 10:00:46	2014-11-04 10:00:46	15b92d54e5de435a4dad540d	f
73	44	clojure	phone-number	7	done	2014-11-29 15:27:01.860082	2014-11-25 23:45:49	2014-11-25 23:45:49	8d3ba670890a47bb5448bfc3	t
74	44	ruby	simple-cipher	2	pending	\N	2014-11-24 10:39:34	2014-11-24 10:39:34	f2cc28fce73641dd7f6d5a61	f
75	44	coffeescript	accumulate	1	pending	\N	2014-11-28 02:42:03	2014-11-28 02:42:03	be4fe24013da86f2724485d2	f
212	34	ruby	rna-transcription	1	pending	\N	2014-10-26 04:33:26	2014-10-26 04:33:26	28be5c14d43a273e6f8fe006	f
76	44	ruby	binary	2	done	2014-11-29 15:27:01.971886	2014-11-24 11:27:29	2014-11-24 11:27:29	172a1d9b403d9e9de71d9cac	t
213	34	javascript	word-count	1	pending	\N	2014-11-16 03:06:00	2014-11-16 03:06:00	3358fa1f9816badcb7434c9c	f
77	44	objective-c	bob	1	done	2014-11-29 15:27:02.025465	2014-11-27 11:31:00	2014-11-27 11:31:00	a2015b8b1e24231eef70175b	t
214	16	python	word-count	1	pending	\N	2014-07-16 11:50:23	2014-07-16 11:50:23	59680f6d5a675fa8a4057378	f
78	44	ruby	hamming	1	done	2014-11-28 03:46:13	2014-11-24 03:10:55	2014-11-24 03:10:55	96c641959767c5cf9ebb738c	t
79	44	javascript	anagram	2	pending	\N	2014-11-27 18:02:12	2014-11-27 18:02:12	2714ad0c25d52cefa0372d05	f
215	16	javascript	matrix	1	pending	\N	2014-07-13 05:20:42	2014-07-13 05:20:42	ce9bb40a3ff34c4f12dda6da	f
80	46	python	leap	1	done	2014-10-22 11:29:22	2014-10-13 23:09:09	2014-10-13 23:09:09	6c596b296eeac7270165ead8	t
216	16	python	bob	3	pending	\N	2014-08-01 17:14:45	2014-08-01 17:14:45	f11b8a780208efbf607dc00e	f
81	46	ruby	difference-of-squares	1	done	2014-09-12 08:56:17	2014-09-09 14:00:01	2014-09-09 14:00:01	54dcaa75ba20adabe9d1b3bb	t
217	16	ruby	leap	3	pending	\N	2014-08-27 04:52:34	2014-08-27 04:52:34	ff386979f59b6be191fe44db	f
82	46	javascript	food-chain	3	done	2014-09-05 14:17:16	2014-06-27 21:12:18	2014-06-27 21:12:18	ebf6155d52b7e11705bb1677	t
83	48	javascript	bob	2	pending	\N	2014-08-06 05:08:15	2014-08-06 05:08:15	660bcc49860ae828b6eb3623	f
84	48	ruby	raindrops	1	pending	\N	2014-07-11 16:20:32	2014-07-11 16:20:32	24d8e77d9c1ad2c624f32e57	f
218	16	ruby	hamming	3	pending	\N	2014-09-17 23:40:43	2014-09-17 23:40:43	7c7352f136d7f2eacbaeea6c	f
85	48	python	bob	1	done	2014-10-06 08:42:44	2014-10-05 13:28:03	2014-10-05 13:28:03	90e59f61ff9fbb315274dff0	t
219	18	python	bob	3	pending	\N	2014-05-31 10:28:42	2014-05-31 10:28:42	64936cf5ef242a747bcdb0ad	f
86	48	go	clock	1	done	2014-07-25 09:27:16	2014-07-14 07:15:59	2014-07-14 07:15:59	9a85007046b5a3a5547c1755	t
87	48	haskell	octal	4	pending	\N	2014-07-07 16:45:49	2014-07-07 16:45:49	a2ceef13090a8ffda8ab1a1f	f
88	49	go	gigasecond	3	pending	\N	2014-09-22 04:31:20	2014-09-22 04:31:20	c1a3d274f7a5edb5f374cb0b	f
89	49	clojure	grains	2	pending	\N	2014-09-19 16:14:46	2014-09-19 16:14:46	81fbc5791d136ea09413d207	f
90	49	clojure	nucleotide-count	2	pending	\N	2014-09-20 15:04:47	2014-09-20 15:04:47	17bf2cab9d8235270ca7ecec	f
91	49	ruby	linked-list	1	pending	\N	2014-09-24 02:31:34	2014-09-24 02:31:34	307654cbdc8acd99f21e04f0	f
92	49	ruby	space-age	1	pending	\N	2014-10-24 06:38:22	2014-10-24 06:38:22	5d10f028700305b415c3efd2	f
93	49	ruby	grains	2	pending	\N	2014-09-27 17:04:23	2014-09-27 17:04:23	990108621a9790f8de577809	f
94	49	python	rna-transcription	1	pending	\N	2014-11-09 11:49:16	2014-11-09 11:49:16	99d3ba4f7964bcf86a86ec1b	f
95	49	ruby	bob	3	pending	\N	2014-09-16 04:02:53	2014-09-16 04:02:53	2313ed5c770f503b4948f2c5	f
96	49	scala	phone-number	2	pending	\N	2014-11-13 02:36:48	2014-11-13 02:36:48	7c512c2c6545d9f227739095	f
97	26	ruby	hamming	2	pending	\N	2014-08-03 08:32:13	2014-08-03 08:32:13	1cd92b1965503f7dc70271ec	f
98	26	haskell	atbash-cipher	3	pending	\N	2014-09-26 02:06:57	2014-09-26 02:06:57	da906d6ead3ca3b67765853c	f
99	26	javascript	word-count	2	pending	\N	2014-08-20 06:26:24	2014-08-20 06:26:24	0a076a645cdb1dfa8aecfce0	f
100	26	fsharp	bob	4	pending	\N	2014-06-29 10:36:47	2014-06-29 10:36:47	556863d123dc6834584aa8e4	f
101	26	javascript	anagram	2	pending	\N	2014-07-08 11:55:29	2014-07-08 11:55:29	6d3e991160e1ded3fe5e39cb	f
102	26	perl5	accumulate	3	pending	\N	2014-06-23 14:39:25	2014-06-23 14:39:25	86bd3d2c160b344d92beada9	f
103	7	ruby	phone-number	4	pending	\N	2014-09-30 12:07:00	2014-09-30 12:07:00	6f40941faf62589777a23b37	f
104	23	csharp	bob	1	pending	\N	2014-10-24 08:46:42	2014-10-24 08:46:42	578db57ab293ce7efb034fac	f
105	23	python	bob	1	pending	\N	2014-04-26 13:46:18	2014-04-26 13:46:18	bb8c47bc6a101707d886481d	f
106	23	ruby	raindrops	5	pending	\N	2014-04-04 06:55:44	2014-04-04 06:55:44	a252a2928d5366b9d0b686dc	f
107	23	haskell	atbash-cipher	1	pending	\N	2014-04-21 07:09:47	2014-04-21 07:09:47	c6791640c212a7f6a1cc7ab4	f
108	23	ruby	bob	2	pending	\N	2014-03-27 10:00:26	2014-03-27 10:00:26	7ec22411b487639e04176658	f
109	23	ruby	anagram	1	pending	\N	2014-07-11 01:29:00	2014-07-11 01:29:00	21bfa06adf5f514a6542e7ff	f
110	23	python	gigasecond	1	pending	\N	2014-08-02 08:15:11	2014-08-02 08:15:11	6a29f4944b58b5466a60a154	f
111	23	go	grains	3	pending	\N	2014-04-11 19:24:13	2014-04-11 19:24:13	57f3cd04c39e9f61c4259f5c	f
112	23	elixir	bob	1	pending	\N	2014-09-20 08:00:06	2014-09-20 08:00:06	b4517ca2b886e55ff2632122	f
113	23	ruby	gigasecond	2	pending	\N	2014-07-06 01:13:01	2014-07-06 01:13:01	18e09a086c3fbd62fa65dbaa	f
114	23	ocaml	bob	5	pending	\N	2014-04-23 09:38:11	2014-04-23 09:38:11	f03e8222714efadbdff38824	f
115	23	perl5	triangle	1	pending	\N	2014-06-08 03:14:25	2014-06-08 03:14:25	dd9a320940b6533a048947db	f
116	23	ruby	leap	1	pending	\N	2014-05-02 06:29:12	2014-05-02 06:29:12	d172f79ed9ca1c148693ba74	f
117	23	clojure	robot-name	1	pending	\N	2014-08-20 13:29:24	2014-08-20 13:29:24	97a6640817d626069feb72fd	f
118	23	python	beer-song	1	pending	\N	2014-04-12 10:42:09	2014-04-12 10:42:09	22d8de81350afe8510bb7999	f
119	23	ruby	hamming	1	pending	\N	2014-04-30 20:13:27	2014-04-30 20:13:27	8f939b750a79232df491b164	f
120	17	ruby	space-age	6	pending	\N	2014-09-23 21:24:43	2014-09-23 21:24:43	8b6eec79b0a86a252c9da0d2	f
121	17	ruby	matrix	1	pending	\N	2014-09-18 06:25:14	2014-09-18 06:25:14	87d4b6cbf5412de460de2e1d	f
122	17	python	hamming	6	pending	\N	2014-09-18 00:52:26	2014-09-18 00:52:26	c962c67fd797f2a7aaf3b045	f
123	20	ruby	gigasecond	1	done	2014-11-25 16:24:56	2014-11-22 10:22:55	2014-11-22 10:22:55	7a31a0affa1bf27d85e0ef09	t
124	20	python	hamming	1	done	2014-11-18 03:41:06	2014-11-14 17:39:22	2014-11-14 17:39:22	a957dee15528b18b4a614d84	t
125	20	ruby	raindrops	1	done	2014-11-21 10:43:32	2014-11-18 10:16:13	2014-11-18 10:16:13	736e5ebb113fe28820123588	t
126	20	ruby	etl	1	done	2014-11-24 02:21:06	2014-11-20 16:46:23	2014-11-20 16:46:23	99a1f7147800259d0c826b98	t
127	20	elixir	phone-number	2	done	2014-11-29 15:27:04.667153	2014-11-19 09:39:36	2014-11-19 09:39:36	6ccfe5cee71235b7f27f2994	t
128	20	ruby	nucleotide-count	2	done	2014-11-21 07:43:23	2014-11-15 15:46:18	2014-11-15 15:46:18	4e940fc4d6b0904cf94eb56a	t
129	20	clojure	word-count	1	done	2014-11-24 03:36:23	2014-11-13 05:22:36	2014-11-13 05:22:36	a9c525aa93edebd1b1212851	t
130	21	python	rna-transcription	1	done	2014-05-15 12:37:33	2014-05-12 07:27:42	2014-05-12 07:27:42	c92f9fa3deaf47a2c1f84876	t
131	36	cpp	food-chain	2	done	2014-09-30 07:17:10	2014-09-12 13:50:12	2014-09-12 13:50:12	944644f26cd26106ae226b8a	t
132	36	ruby	space-age	1	done	2014-11-04 08:13:36	2014-11-03 19:58:08	2014-11-03 19:58:08	7890c1814d50c2a5bdef6043	t
133	36	ruby	nth-prime	1	done	2014-09-05 00:46:23	2014-08-27 02:17:23	2014-08-27 02:17:23	074a961baa474b491808c03f	t
134	36	ruby	grade-school	1	done	2014-09-22 08:09:04	2014-09-21 11:46:40	2014-09-21 11:46:40	818d520895149f40f6d95baa	t
135	36	ruby	leap	1	done	2014-09-18 07:10:49	2014-09-07 05:22:38	2014-09-07 05:22:38	aeb2803cad48b5b471adf4c8	t
136	36	clojure	rna-transcription	1	done	2014-10-13 21:24:28	2014-10-02 12:39:31	2014-10-02 12:39:31	b409c29bc2bfaf00d269e52d	t
137	36	haskell	word-count	2	done	2014-10-07 09:39:15	2014-08-28 16:06:22	2014-08-28 16:06:22	b736528676dc354446297491	t
138	36	go	leap	1	done	2014-08-26 12:59:24	2014-08-25 20:49:50	2014-08-25 20:49:50	a7d87499c87e7f00f101f7d2	t
139	36	javascript	hamming	1	done	2014-10-05 07:32:30	2014-09-26 12:45:14	2014-09-26 12:45:14	64f40b2c4ecbdb9021fe166c	t
140	36	python	anagram	1	done	2014-08-29 13:52:21	2014-08-26 23:58:22	2014-08-26 23:58:22	0ec3329861e243aca46d2f4d	t
141	36	ruby	robot-name	1	done	2014-09-11 03:36:55	2014-09-02 05:24:27	2014-09-02 05:24:27	104629bf9e77ba8b944d0ba3	t
142	36	python	rna-transcription	3	done	2014-10-29 18:52:44	2014-09-18 17:09:59	2014-09-18 17:09:59	b20382927b978e3cdcb9b1f5	t
143	36	ruby	bob	2	done	2014-10-07 23:55:21	2014-08-26 02:18:00	2014-08-26 02:18:00	575b96c02dfce0c56804ca65	t
144	36	python	bob	3	done	2014-10-13 23:27:35	2014-10-06 13:34:48	2014-10-06 13:34:48	aac9f858ea92619f5ebdb160	t
145	36	haskell	grade-school	2	done	2014-09-20 08:40:05	2014-09-13 14:05:36	2014-09-13 14:05:36	02ca746855acaa0d443fc872	t
146	36	haskell	etl	1	done	2014-09-15 07:38:50	2014-09-10 07:40:32	2014-09-10 07:40:32	4510f73db27c2e72661cb9af	t
147	36	javascript	word-count	1	done	2014-10-29 23:39:29	2014-10-24 04:02:37	2014-10-24 04:02:37	c1f8f7604f2a66295ffe4726	t
148	36	clojure	bob	3	done	2014-09-09 06:32:50	2014-09-02 23:36:54	2014-09-02 23:36:54	183b81504b527630fe855019	t
149	36	perl5	raindrops	1	done	2014-09-29 13:25:28	2014-09-18 15:57:38	2014-09-18 15:57:38	d8b62b6e0ee3f19ceb71f29e	t
150	36	python	largest-series-product	1	done	2014-09-19 01:30:53	2014-09-16 23:04:23	2014-09-16 23:04:23	fde49cb9d7d902c5aec013f7	t
151	36	python	leap	1	done	2014-09-17 05:03:19	2014-09-07 07:11:44	2014-09-07 07:11:44	28dbfd2539f0d810cb4f8099	t
152	36	ruby	raindrops	1	done	2014-09-17 09:17:29	2014-09-07 20:58:14	2014-09-07 20:58:14	cabc603282ba6b70dacc9f25	t
153	36	ruby	rna-transcription	2	done	2014-09-12 08:54:43	2014-08-24 18:55:19	2014-08-24 18:55:19	249fcc5b460f98beebfa2f14	t
154	36	ruby	gigasecond	2	done	2014-09-29 16:44:04	2014-08-26 12:02:09	2014-08-26 12:02:09	d88f84375393702c570f69cc	t
155	36	coffeescript	hexadecimal	1	done	2014-09-04 04:05:09	2014-09-03 07:17:37	2014-09-03 07:17:37	efe10790722ac2b83e57c0c8	t
156	36	haskell	roman-numerals	9	done	2014-10-31 00:28:55	2014-08-28 05:57:12	2014-08-28 05:57:12	c711e1c62173ffce45089a85	t
157	36	haskell	bob	2	done	2014-10-22 09:20:48	2014-09-11 22:48:30	2014-09-11 22:48:30	8469404663b1b40757b524bb	t
158	36	python	word-count	1	done	2014-09-24 22:29:38	2014-09-13 13:44:54	2014-09-13 13:44:54	27030b6cc1ad8bd8a2546bad	t
159	36	javascript	sum-of-multiples	1	done	2014-09-20 06:12:44	2014-09-09 16:56:28	2014-09-09 16:56:28	5a54548fb43752f491bf443a	t
160	36	javascript	anagram	2	done	2014-10-12 19:17:38	2014-08-22 15:45:37	2014-08-22 15:45:37	0bca3bb92e2aff5b6b9dfa15	t
161	36	csharp	sum-of-multiples	2	done	2014-10-06 16:34:20	2014-08-29 18:16:49	2014-08-29 18:16:49	341507db08ac07e0d5c5145d	t
162	30	haskell	grade-school	3	done	2014-09-22 09:08:53	2014-08-23 13:50:36	2014-08-23 13:50:36	c3fb1e113d688c1aab66b2a4	t
163	30	clojure	nucleotide-count	5	done	2014-09-11 07:40:21	2014-08-26 14:32:41	2014-08-26 14:32:41	f0b510a13c12047adc1d0397	t
164	30	scala	hamming	1	done	2014-09-11 22:06:48	2014-09-01 11:36:31	2014-09-01 11:36:31	481557254396062bb3a05dff	t
165	30	ruby	secret-handshake	1	done	2014-08-18 05:11:56	2014-08-13 13:34:32	2014-08-13 13:34:32	fc3011f8d4d396fa84165810	t
166	30	ruby	clock	1	done	2014-08-31 00:43:44	2014-08-29 19:36:51	2014-08-29 19:36:51	aacc0eb6d05c2e1b45f47e11	t
167	30	ruby	binary	2	done	2014-08-23 09:32:40	2014-08-18 17:48:14	2014-08-18 17:48:14	f88ce1dfc075dc0fe57c2081	t
168	35	python	word-count	1	done	2014-09-24 15:25:56	2014-09-16 11:15:26	2014-09-16 11:15:26	544520c273169d458816ecd5	t
169	35	clojure	roman-numerals	1	done	2014-05-14 11:40:23	2014-05-03 11:42:47	2014-05-03 11:42:47	8110d5d7e26d5eec7918f71e	t
170	14	ruby	word-count	4	pending	\N	2014-09-13 16:58:03	2014-09-13 16:58:03	852a6b59b968e6186d2729e5	f
171	14	perl5	raindrops	1	pending	\N	2014-09-15 18:47:54	2014-09-15 18:47:54	69f89717fea43b72350ceca9	f
172	14	python	meetup	1	pending	\N	2014-09-30 05:42:32	2014-09-30 05:42:32	2a56cfb13e23a2c7e0b067ab	f
173	14	haskell	beer-song	3	pending	\N	2014-10-09 05:33:16	2014-10-09 05:33:16	73052a2faa52208b01e309af	f
174	14	go	leap	1	pending	\N	2014-10-04 19:44:20	2014-10-04 19:44:20	3eaa9dc3c926185b8afc4281	f
175	41	python	gigasecond	1	pending	\N	2014-09-08 10:24:40	2014-09-08 10:24:40	ca88edc753163bf394922b8d	f
176	41	haskell	simple-linked-list	1	pending	\N	2014-09-02 11:38:49	2014-09-02 11:38:49	f12715258061d8a7d4a9824b	f
177	41	ruby	anagram	1	pending	\N	2014-08-13 23:01:21	2014-08-13 23:01:21	d01af2cbb981a57021b37eca	f
178	41	ruby	bob	1	pending	\N	2014-10-06 22:35:01	2014-10-06 22:35:01	74ff23b58d388a9d1dbc330b	f
179	41	haskell	leap	1	pending	\N	2014-10-27 15:08:07	2014-10-27 15:08:07	ab95272e7856f54f416004ec	f
180	41	javascript	word-count	2	pending	\N	2014-09-07 20:02:22	2014-09-07 20:02:22	c512cc9dfe57355c4deaa7ec	f
181	41	javascript	rna-transcription	2	pending	\N	2014-08-10 04:10:07	2014-08-10 04:10:07	02fc6caf2408b4a887b9299d	f
182	41	perl5	leap	1	pending	\N	2014-08-20 09:16:20	2014-08-20 09:16:20	55c6b105bd73ea74636ace86	f
183	41	ruby	rna-transcription	2	pending	\N	2014-09-15 01:54:07	2014-09-15 01:54:07	6e1f8232019e11e0420df7cc	f
184	41	perl5	bob	1	pending	\N	2014-11-04 00:01:29	2014-11-04 00:01:29	7e22a1c41877e3cd58ed1f1f	f
185	41	ruby	grains	2	pending	\N	2014-09-01 03:34:22	2014-09-01 03:34:22	bd51f5bb1ac2b47b01629ccf	f
186	41	ruby	nucleotide-count	1	pending	\N	2014-08-18 03:03:02	2014-08-18 03:03:02	9e12adfc53c48162398d30e1	f
187	41	javascript	bob	1	pending	\N	2014-08-17 17:58:57	2014-08-17 17:58:57	bf00a4cfdab66d5fa70d5bcb	f
188	41	scala	bob	1	pending	\N	2014-10-21 11:22:30	2014-10-21 11:22:30	c92ff90ed504134ec946ec77	f
189	41	ruby	word-count	1	pending	\N	2014-10-04 23:11:10	2014-10-04 23:11:10	1c8d343144921e0a8a40c732	f
190	41	go	anagram	1	pending	\N	2014-09-04 21:51:00	2014-09-04 21:51:00	be478464519ba5eda90c45b7	f
191	41	perl5	difference-of-squares	1	pending	\N	2014-09-29 01:21:30	2014-09-29 01:21:30	e766ac028a61422dcbf5acd5	f
192	41	ruby	proverb	4	pending	\N	2014-08-13 14:35:25	2014-08-13 14:35:25	ea9b70b50fccabf33b580c05	f
193	41	go	leap	1	pending	\N	2014-08-20 02:59:05	2014-08-20 02:59:05	4551239167e34b404933cf01	f
194	41	javascript	scrabble-score	1	pending	\N	2014-08-19 08:02:48	2014-08-19 08:02:48	ef63765a3ec224c6368dcecd	f
195	41	javascript	robot-name	1	pending	\N	2014-10-02 07:23:31	2014-10-02 07:23:31	da162f55b5f49184103f29b0	f
196	41	clojure	rna-transcription	2	pending	\N	2014-08-18 05:54:08	2014-08-18 05:54:08	e1dffb7b6d51874dde59959a	f
197	41	python	bob	1	pending	\N	2014-09-05 08:11:59	2014-09-05 08:11:59	0a327399277a0aef4faf1563	f
198	41	ruby	raindrops	1	pending	\N	2014-09-26 13:12:17	2014-09-26 13:12:17	41e07e6aad306d4295d440c4	f
199	41	go	custom-set	1	pending	\N	2014-09-17 20:47:25	2014-09-17 20:47:25	afb7b7a6a9a1abf38b534e35	f
200	41	ruby	hamming	2	pending	\N	2014-08-25 20:38:07	2014-08-25 20:38:07	4ff8ddfe924803b02caba8e3	f
201	41	ruby	prime-factors	1	pending	\N	2014-09-05 22:49:15	2014-09-05 22:49:15	e17972b7557bbfba73e37bd7	f
220	18	haskell	wordy	4	pending	\N	2014-05-24 11:41:29	2014-05-24 11:41:29	ab4a4fbc50095566004c27dd	f
221	18	javascript	hamming	1	pending	\N	2014-05-27 01:48:28	2014-05-27 01:48:28	90cb88dda340c30b50dcbac7	f
222	18	javascript	triangle	1	pending	\N	2014-10-17 15:30:13	2014-10-17 15:30:13	5caff24548cb4c5b5acdaa71	f
223	18	haskell	bank-account	1	pending	\N	2014-07-22 18:51:01	2014-07-22 18:51:01	7be37dfd3f09b85f8a77c725	f
224	24	elixir	word-count	2	pending	\N	2014-09-25 07:40:52	2014-09-25 07:40:52	5f7e3f68b9a80d158173faf4	f
225	42	ruby	gigasecond	3	pending	\N	2014-09-28 16:48:54	2014-09-28 16:48:54	14d28f3799ba5cb7327513b7	f
226	42	clojure	grade-school	1	pending	\N	2014-09-28 18:01:16	2014-09-28 18:01:16	6db67eb60910a237821797b7	f
227	42	javascript	leap	3	pending	\N	2014-09-24 20:15:31	2014-09-24 20:15:31	1acc274a5d8f3d293e36c408	f
228	42	python	twelve-days	2	pending	\N	2014-09-23 17:34:52	2014-09-23 17:34:52	75771f98c253f7553deab45d	f
229	42	ruby	phone-number	1	pending	\N	2014-10-17 18:27:14	2014-10-17 18:27:14	9ae106d08641c2e556da0cf9	f
230	42	clojure	anagram	1	pending	\N	2014-10-22 07:12:13	2014-10-22 07:12:13	578bcf3c3c7c5f4f25ad3b2e	f
231	27	ruby	bob	1	pending	\N	2014-06-29 14:02:41	2014-06-29 14:02:41	9f3e22dba31180e94afa6abf	f
232	27	haskell	grade-school	2	pending	\N	2014-08-04 23:54:08	2014-08-04 23:54:08	25a8489c8ff6826e9fb5afc4	f
233	45	clojure	grade-school	1	pending	\N	2014-06-24 17:01:34	2014-06-24 17:01:34	cb955c65eea35e6422f3e74a	f
234	45	javascript	bob	1	pending	\N	2014-06-10 01:11:07	2014-06-10 01:11:07	085fa56dcae21caacd60e587	f
235	45	scala	anagram	3	pending	\N	2014-05-20 02:54:17	2014-05-20 02:54:17	01530e9b78e7c8ca2be2dddb	f
236	45	haskell	robot-name	3	pending	\N	2014-05-18 07:43:23	2014-05-18 07:43:23	a5143f01f2f8dfc82a3ff15c	f
237	45	ruby	raindrops	1	pending	\N	2014-10-07 02:44:08	2014-10-07 02:44:08	8f2f40b325d8bd8f534dbd7b	f
238	45	python	word-count	1	pending	\N	2014-06-27 23:20:15	2014-06-27 23:20:15	16bd3dee6a17cfd915d72189	f
239	45	python	anagram	1	pending	\N	2014-10-13 02:12:23	2014-10-13 02:12:23	3cd3216380b0de627a378746	f
240	45	go	clock	1	pending	\N	2014-05-22 07:59:26	2014-05-22 07:59:26	f1b973f39a863b5fca21095e	f
241	45	haskell	nth-prime	3	pending	\N	2014-06-10 11:52:26	2014-06-10 11:52:26	8733e63d9651e28188cbc73a	f
242	45	haskell	binary	2	pending	\N	2014-05-30 22:24:45	2014-05-30 22:24:45	af620d8cd6ea9c2c7eaf72eb	f
243	45	ruby	proverb	8	pending	\N	2014-06-02 16:15:34	2014-06-02 16:15:34	26c6cd2ccd033a9f658083a4	f
244	45	ruby	triangle	1	pending	\N	2014-06-04 12:47:10	2014-06-04 12:47:10	64e8e5ebb37b3e462c9ca9e3	f
245	45	clojure	leap	1	pending	\N	2014-06-23 17:16:54	2014-06-23 17:16:54	2786b6283f8133531160257e	f
246	45	clojure	roman-numerals	1	pending	\N	2014-09-01 04:21:44	2014-09-01 04:21:44	998693e9f4883faf801729d4	f
247	45	python	rna-transcription	1	pending	\N	2014-08-01 23:44:10	2014-08-01 23:44:10	8ad01a1576312aea106c3fec	f
248	45	ruby	rna-transcription	2	pending	\N	2014-07-11 05:54:50	2014-07-11 05:54:50	c8860266bcd60d15a5ab2143	f
249	45	clojure	bob	2	pending	\N	2014-06-19 09:05:21	2014-06-19 09:05:21	1600e8570c181e93ea480fea	f
250	45	python	gigasecond	1	pending	\N	2014-06-24 09:57:12	2014-06-24 09:57:12	f158fe6995e5d9e0c97e6f20	f
251	45	lua	word-count	1	pending	\N	2014-07-03 18:50:35	2014-07-03 18:50:35	868d468c2233e8c676fa76ca	f
252	45	go	word-count	2	pending	\N	2014-09-25 06:41:54	2014-09-25 06:41:54	a9e68b7c7088635254309339	f
253	45	ruby	bob	2	pending	\N	2014-07-07 21:25:12	2014-07-07 21:25:12	0151d4e03affaaf39c263558	f
254	45	javascript	difference-of-squares	1	pending	\N	2014-08-04 03:02:09	2014-08-04 03:02:09	2692bb1c8fca23032b2e6a5c	f
255	45	python	accumulate	1	pending	\N	2014-05-22 00:19:03	2014-05-22 00:19:03	4d6d0f8f6179baedc726de90	f
256	45	go	raindrops	1	pending	\N	2014-09-03 19:25:11	2014-09-03 19:25:11	cba6ef517fc2ddacfed73a13	f
257	45	python	difference-of-squares	1	pending	\N	2014-06-07 04:22:47	2014-06-07 04:22:47	3c3841d2e15bd80709315736	f
258	45	haskell	bob	1	pending	\N	2014-05-19 00:56:37	2014-05-19 00:56:37	52044373d3be8382c3954847	f
259	45	python	bob	2	pending	\N	2014-07-15 02:55:55	2014-07-15 02:55:55	83d1954a3b26a300a54a4b37	f
260	45	csharp	bob	4	pending	\N	2014-06-23 14:33:39	2014-06-23 14:33:39	f5776791b3818cce13018a9d	f
261	45	go	house	1	pending	\N	2014-05-29 09:15:41	2014-05-29 09:15:41	beac0e37a38dc2ee83d93428	f
262	45	haskell	nucleotide-count	1	pending	\N	2014-07-17 04:39:18	2014-07-17 04:39:18	da0db212d00cac241b44ca5c	f
263	45	javascript	hamming	1	pending	\N	2014-07-11 16:32:01	2014-07-11 16:32:01	ee84d7e31505e5fbd4e9217d	f
264	45	scala	bob	1	pending	\N	2014-07-09 00:18:01	2014-07-09 00:18:01	655c1b80e2e52bdd73049f3c	f
265	45	javascript	triangle	1	pending	\N	2014-08-02 18:33:39	2014-08-02 18:33:39	351cfe5c77f67b5f4b5828b4	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 265, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	fyw149	--- []\n	2014-03-05 13:33:44.485948	2014-03-05 13:33:44.485948	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andychipster/128.jpg	-29817	ags416	--- []\n	2014-11-10 20:20:06.534464	2014-11-10 20:20:06.534464	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mat_walker/128.jpg	-34255	vej462	--- []\n	2014-09-20 15:56:56.538108	2014-09-20 15:56:56.538108	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/g1sh/128.jpg	-36418	ypi683	--- []\n	2014-09-03 09:28:28.541361	2014-09-03 09:28:28.541361	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg	-52880	jwd963	--- []\n	2014-03-23 10:00:24.556589	2014-03-23 10:00:24.556589	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg	-24793	hdt760	--- []\n	2014-05-01 04:29:35.564668	2014-05-01 04:29:35.564668	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg	-72499	bmp800	--- []\n	2014-09-02 19:18:39.566451	2014-09-02 19:18:39.566451	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg	-69460	sug499	--- []\n	2014-07-03 12:57:24.572729	2014-07-03 12:57:24.572729	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/syntetyc/128.jpg	-95907	ckw780	--- []\n	2014-09-16 04:40:08.575762	2014-09-16 04:40:08.575762	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg	-22645	wrt627	--- []\n	2014-05-03 15:09:55.578702	2014-05-03 15:09:55.578702	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg	-4063	lpd210	--- []\n	2014-04-20 07:38:37.583179	2014-04-20 07:38:37.583179	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg	-83236	qht811	--- []\n	2014-11-10 12:09:24.586835	2014-11-10 12:09:24.586835	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg	-45571	osa355	--- []\n	2014-03-21 18:49:54.5956	2014-03-21 18:49:54.5956	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg	-11028	cja541	--- []\n	2014-03-23 22:06:17.615206	2014-03-23 22:06:17.615206	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg	-83888	ztz575	--- []\n	2014-09-17 21:52:03.618071	2014-09-17 21:52:03.618071	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/v_klimenko/128.jpg	-92921	xaz511	--- []\n	2014-05-23 19:19:15.620576	2014-05-23 19:19:15.620576	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg	-59379	wru469	--- []\n	2014-06-06 18:23:42.623104	2014-06-06 18:23:42.623104	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg	-90913	tvy782	--- []\n	2014-03-21 23:58:34.62555	2014-03-21 23:58:34.62555	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg	-10495	tgz224	--- []\n	2014-08-10 19:39:46.640889	2014-08-10 19:39:46.640889	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg	-58170	kmd294	--- []\n	2014-06-24 03:26:51.646642	2014-06-24 03:26:51.646642	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg	-59646	vao777	--- []\n	2014-10-22 09:45:54.653571	2014-10-22 09:45:54.653571	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg	-90524	bio946	--- []\n	2014-04-30 12:47:22.656485	2014-04-30 12:47:22.656485	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg	-74815	aas275	--- []\n	2014-08-22 13:13:22.659645	2014-08-22 13:13:22.659645	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg	-18399	hgw757	--- []\n	2014-03-19 20:39:07.662447	2014-03-19 20:39:07.662447	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg	-54624	lnn811	--- []\n	2014-05-12 06:22:29.668138	2014-05-12 06:22:29.668138	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg	-42698	ycg144	--- []\n	2014-08-05 22:30:55.67261	2014-08-05 22:30:55.67261	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg	-58355	rda694	--- []\n	2014-09-23 06:28:32.675473	2014-09-23 06:28:32.675473	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg	-55258	qin194	--- []\n	2014-04-08 02:03:45.678307	2014-04-08 02:03:45.678307	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg	-3349	apq674	--- []\n	2014-05-13 03:37:31.683534	2014-05-13 03:37:31.683534	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg	-25477	cdb697	--- []\n	2014-05-25 23:14:02.689013	2014-05-25 23:14:02.689013	\N
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg	-70525	msa982	--- []\n	2014-10-02 15:36:53.569656	2014-10-02 15:36:53.569656	2014-07-21 02:15:39
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg	-83946	xiy826	--- []\n	2014-11-23 13:15:31.680926	2014-11-23 13:15:31.680926	2014-07-18 22:11:22
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg	-62118	fgh237	--- []\n	2014-06-11 00:17:34.665331	2014-06-11 00:17:34.665331	2014-07-12 03:36:38
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg	-11354	eke251	--- []\n	2014-03-20 00:39:51.559139	2014-03-20 00:39:51.559139	2014-08-09 16:12:13
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg	-52856	uhz157	--- []\n	2014-11-11 22:00:33.544106	2014-11-11 22:00:33.544106	2014-07-27 05:42:39
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg	-1864	jka167	--- []\n	2014-03-18 12:01:03.643858	2014-03-18 12:01:03.643858	2014-07-18 18:51:42
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/amboy00/128.jpg	-18429	xkc456	--- []\n	2014-07-22 13:36:28.635346	2014-07-22 13:36:28.635346	2014-06-30 02:25:18
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg	-1840	wtf321	--- []\n	2014-05-12 00:54:06.561859	2014-05-12 00:54:06.561859	2014-06-27 14:13:22
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg	-52898	kax536	--- []\n	2014-11-18 06:17:48.650526	2014-11-18 06:17:48.650526	2014-09-03 00:33:18
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg	-63536	klu934	--- []\n	2014-06-12 03:55:21.609381	2014-06-12 03:55:21.609381	2014-07-22 00:41:30
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg	-82830	ybi335	---\n- python\n	2014-09-03 00:48:28.531871	2014-09-03 00:48:28.531871	2014-08-08 14:30:06
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg	-95455	jum426	--- []\n	2014-09-11 15:04:10.693859	2014-09-11 15:04:10.693859	\N
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg	-66543	wtf705	---\n- ruby\n- haskell\n	2014-09-03 03:18:22.504528	2014-09-03 03:18:22.504528	2014-07-27 02:53:22
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg	-67971	rfj950	--- []\n	2014-06-24 23:58:01.669892	2014-06-24 23:58:01.669892	2014-08-19 16:19:26
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg	-33204	wkq725	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-10-15 18:37:46.501511	2014-10-15 18:37:46.501511	2014-08-05 18:59:19
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg	-19549	nwp951	--- []\n	2014-05-12 20:37:44.686202	2014-05-12 20:37:44.686202	2014-07-22 21:08:59
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg	-40911	nzs186	--- []\n	2014-06-28 03:06:07.691003	2014-06-28 03:06:07.691003	2014-07-06 18:15:32
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg	-92422	bjx336	--- []\n	2014-08-03 01:09:39.632092	2014-08-03 01:09:39.632092	2014-07-28 04:33:09
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg	-37460	peh272	---\n- javascript\n- erlang\n- elixir\n	2014-09-21 13:31:02.525972	2014-09-21 13:31:02.525972	2014-08-07 19:42:51
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- PostgreSQL database dump complete
--

