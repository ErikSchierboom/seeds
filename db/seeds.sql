--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-05-10 14:44:47	2014-05-10 14:44:47
2	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-03 17:19:07	2014-03-03 17:19:07
3	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-27 13:41:39	2014-03-27 13:41:39
4	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-02-22 20:34:24	2014-02-22 20:34:24
5	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-26 12:34:38	2014-03-26 12:34:38
6	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-01-29 09:34:19	2014-01-29 09:34:19
7	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-27 21:56:28	2014-03-27 21:56:28
8	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-06-11 02:57:23	2014-06-11 02:57:23
9	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-04-20 04:12:25	2014-04-20 04:12:25
10	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-01-17 17:30:52	2014-01-17 17:30:52
11	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2013-12-10 20:11:05	2013-12-10 20:11:05
12	2	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2013-12-07 21:54:49	2013-12-07 21:54:49
13	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-21 14:30:19	2014-07-21 14:30:19
14	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-24 04:39:06	2014-07-24 04:39:06
15	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-21 12:09:38	2014-07-21 12:09:38
16	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-21 13:26:50	2014-07-21 13:26:50
17	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-01 07:22:07	2014-07-01 07:22:07
18	2	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-12 07:05:40	2014-07-12 07:05:40
19	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-02-21 10:58:17	2014-02-21 10:58:17
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	27	2	A COMMENT	\N	2014-07-26 13:41:29	2014-07-26 13:41:29
2	11	3	A COMMENT	\N	2014-06-09 06:23:09	2014-06-09 06:23:09
3	27	3	A COMMENT	\N	2014-06-26 03:36:05	2014-06-26 03:36:05
4	10	3	A COMMENT	\N	2014-07-08 08:04:25	2014-07-08 08:04:25
5	1	3	A COMMENT	\N	2014-07-22 00:53:25	2014-07-22 00:53:25
6	32	3	A COMMENT	\N	2014-07-24 15:15:10	2014-07-24 15:15:10
7	8	4	A COMMENT	\N	2014-04-15 12:39:47	2014-04-15 12:39:47
8	30	4	A COMMENT	\N	2014-05-10 09:20:03	2014-05-10 09:20:03
9	45	4	A COMMENT	\N	2014-06-25 00:35:16	2014-06-25 00:35:16
10	2	4	A COMMENT	\N	2014-07-24 11:46:43	2014-07-24 11:46:43
11	1	5	A COMMENT	\N	2014-06-12 18:53:56	2014-06-12 18:53:56
12	1	5	A COMMENT	\N	2014-07-03 00:01:55	2014-07-03 00:01:55
13	10	5	A COMMENT	\N	2014-07-09 02:24:40	2014-07-09 02:24:40
14	10	6	A COMMENT	\N	2014-06-05 17:46:24	2014-06-05 17:46:24
15	4	6	A COMMENT	\N	2014-06-27 15:29:49	2014-06-27 15:29:49
16	32	6	A COMMENT	\N	2014-07-19 18:38:43	2014-07-19 18:38:43
17	10	7	A COMMENT	\N	2014-06-01 11:02:54	2014-06-01 11:02:54
18	11	12	A COMMENT	\N	2014-03-31 03:28:15	2014-03-31 03:28:15
19	2	12	A COMMENT	\N	2014-06-01 01:29:54	2014-06-01 01:29:54
20	3	12	A COMMENT	\N	2014-06-02 05:20:30	2014-06-02 05:20:30
21	37	12	A COMMENT	\N	2014-06-27 23:08:05	2014-06-27 23:08:05
22	28	12	A COMMENT	\N	2014-07-26 14:40:33	2014-07-26 14:40:33
23	47	13	A COMMENT	\N	2014-05-13 07:12:35	2014-05-13 07:12:35
24	14	13	A COMMENT	\N	2014-05-24 04:05:56	2014-05-24 04:05:56
25	28	13	A COMMENT	\N	2014-05-30 01:17:10	2014-05-30 01:17:10
26	43	13	A COMMENT	\N	2014-06-04 21:37:35	2014-06-04 21:37:35
27	11	13	A COMMENT	\N	2014-06-07 03:03:09	2014-06-07 03:03:09
28	3	13	A COMMENT	\N	2014-06-24 00:15:26	2014-06-24 00:15:26
29	32	13	A COMMENT	\N	2014-07-07 17:48:42	2014-07-07 17:48:42
30	1	13	A COMMENT	\N	2014-07-07 18:28:24	2014-07-07 18:28:24
31	30	15	A COMMENT	\N	2014-06-13 17:35:48	2014-06-13 17:35:48
32	39	15	A COMMENT	\N	2014-07-01 02:51:43	2014-07-01 02:51:43
33	32	15	A COMMENT	\N	2014-07-07 04:00:24	2014-07-07 04:00:24
34	21	15	A COMMENT	\N	2014-07-16 10:20:34	2014-07-16 10:20:34
35	10	16	A COMMENT	\N	2014-03-08 00:10:30	2014-03-08 00:10:30
36	11	16	A COMMENT	\N	2014-03-27 07:14:19	2014-03-27 07:14:19
37	27	16	A COMMENT	\N	2014-03-29 16:59:09	2014-03-29 16:59:09
38	3	16	A COMMENT	\N	2014-04-16 10:12:52	2014-04-16 10:12:52
39	4	16	A COMMENT	\N	2014-05-11 14:02:17	2014-05-11 14:02:17
40	11	16	A COMMENT	\N	2014-06-25 00:18:41	2014-06-25 00:18:41
41	30	17	A COMMENT	\N	2014-04-19 18:37:04	2014-04-19 18:37:04
42	45	17	A COMMENT	\N	2014-04-21 23:35:16	2014-04-21 23:35:16
43	1	17	A COMMENT	\N	2014-04-23 11:33:28	2014-04-23 11:33:28
44	10	17	A COMMENT	\N	2014-05-18 11:12:42	2014-05-18 11:12:42
45	14	17	A COMMENT	\N	2014-05-23 03:19:21	2014-05-23 03:19:21
46	2	17	A COMMENT	\N	2014-06-10 22:55:48	2014-06-10 22:55:48
47	21	17	A COMMENT	\N	2014-06-12 21:27:49	2014-06-12 21:27:49
48	8	17	A COMMENT	\N	2014-06-19 10:28:58	2014-06-19 10:28:58
49	43	17	A COMMENT	\N	2014-06-22 21:57:49	2014-06-22 21:57:49
50	27	17	A COMMENT	\N	2014-06-25 00:49:57	2014-06-25 00:49:57
51	1	17	A COMMENT	\N	2014-06-29 07:50:26	2014-06-29 07:50:26
52	8	17	A COMMENT	\N	2014-06-29 11:41:13	2014-06-29 11:41:13
53	30	17	A COMMENT	\N	2014-07-01 20:31:21	2014-07-01 20:31:21
54	39	17	A COMMENT	\N	2014-07-06 04:41:35	2014-07-06 04:41:35
55	3	17	A COMMENT	\N	2014-07-12 07:54:22	2014-07-12 07:54:22
56	32	17	A COMMENT	\N	2014-07-17 06:11:37	2014-07-17 06:11:37
57	14	17	A COMMENT	\N	2014-07-19 21:52:03	2014-07-19 21:52:03
58	4	17	A COMMENT	\N	2014-07-20 14:02:04	2014-07-20 14:02:04
59	28	17	A COMMENT	\N	2014-07-22 05:27:56	2014-07-22 05:27:56
60	28	17	A COMMENT	\N	2014-07-24 01:03:14	2014-07-24 01:03:14
61	21	18	A COMMENT	\N	2014-04-06 23:23:40	2014-04-06 23:23:40
62	10	18	A COMMENT	\N	2014-04-07 17:43:38	2014-04-07 17:43:38
63	47	18	A COMMENT	\N	2014-04-15 22:46:10	2014-04-15 22:46:10
64	30	18	A COMMENT	\N	2014-04-22 10:50:42	2014-04-22 10:50:42
65	1	18	A COMMENT	\N	2014-05-08 12:30:46	2014-05-08 12:30:46
66	45	18	A COMMENT	\N	2014-06-11 03:46:09	2014-06-11 03:46:09
67	47	20	A COMMENT	\N	2014-03-30 09:48:46	2014-03-30 09:48:46
68	21	20	A COMMENT	\N	2014-03-30 18:48:57	2014-03-30 18:48:57
69	8	20	A COMMENT	\N	2014-04-01 18:00:41	2014-04-01 18:00:41
70	45	20	A COMMENT	\N	2014-04-02 16:11:14	2014-04-02 16:11:14
71	27	20	A COMMENT	\N	2014-04-04 23:47:17	2014-04-04 23:47:17
72	47	20	A COMMENT	\N	2014-04-09 01:05:12	2014-04-09 01:05:12
73	30	20	A COMMENT	\N	2014-04-25 02:59:40	2014-04-25 02:59:40
74	45	20	A COMMENT	\N	2014-05-01 07:44:01	2014-05-01 07:44:01
75	8	20	A COMMENT	\N	2014-05-18 01:46:58	2014-05-18 01:46:58
76	28	20	A COMMENT	\N	2014-05-25 14:12:19	2014-05-25 14:12:19
77	8	20	A COMMENT	\N	2014-06-12 07:50:44	2014-06-12 07:50:44
78	3	20	A COMMENT	\N	2014-06-14 01:21:37	2014-06-14 01:21:37
79	2	20	A COMMENT	\N	2014-06-19 13:24:05	2014-06-19 13:24:05
80	32	20	A COMMENT	\N	2014-06-23 17:04:24	2014-06-23 17:04:24
81	4	20	A COMMENT	\N	2014-07-10 06:09:44	2014-07-10 06:09:44
82	1	20	A COMMENT	\N	2014-07-10 06:33:41	2014-07-10 06:33:41
83	43	20	A COMMENT	\N	2014-07-26 07:34:08	2014-07-26 07:34:08
84	10	21	A COMMENT	\N	2014-04-05 11:44:49	2014-04-05 11:44:49
85	8	21	A COMMENT	\N	2014-04-28 04:17:55	2014-04-28 04:17:55
86	11	21	A COMMENT	\N	2014-05-11 05:03:50	2014-05-11 05:03:50
87	28	21	A COMMENT	\N	2014-05-11 22:03:57	2014-05-11 22:03:57
88	32	21	A COMMENT	\N	2014-05-14 18:17:48	2014-05-14 18:17:48
89	11	21	A COMMENT	\N	2014-07-05 16:28:10	2014-07-05 16:28:10
90	27	22	A COMMENT	\N	2014-05-18 15:44:44	2014-05-18 15:44:44
91	37	22	A COMMENT	\N	2014-05-24 10:42:30	2014-05-24 10:42:30
92	4	22	A COMMENT	\N	2014-05-26 13:59:56	2014-05-26 13:59:56
93	32	22	A COMMENT	\N	2014-05-28 01:14:32	2014-05-28 01:14:32
94	10	22	A COMMENT	\N	2014-06-08 08:54:26	2014-06-08 08:54:26
95	11	22	A COMMENT	\N	2014-06-19 21:58:43	2014-06-19 21:58:43
96	37	22	A COMMENT	\N	2014-06-27 09:12:31	2014-06-27 09:12:31
97	39	22	A COMMENT	\N	2014-07-01 07:32:20	2014-07-01 07:32:20
98	2	22	A COMMENT	\N	2014-07-08 14:33:54	2014-07-08 14:33:54
99	8	25	A COMMENT	\N	2014-04-24 03:50:09	2014-04-24 03:50:09
100	11	25	A COMMENT	\N	2014-05-15 21:41:12	2014-05-15 21:41:12
101	21	26	A COMMENT	\N	2014-03-12 14:16:14	2014-03-12 14:16:14
102	27	26	A COMMENT	\N	2014-03-19 12:56:10	2014-03-19 12:56:10
103	47	26	A COMMENT	\N	2014-05-16 15:51:39	2014-05-16 15:51:39
104	30	27	A COMMENT	\N	2014-05-18 12:11:42	2014-05-18 12:11:42
105	39	27	A COMMENT	\N	2014-06-10 07:58:33	2014-06-10 07:58:33
106	3	27	A COMMENT	\N	2014-06-15 16:16:35	2014-06-15 16:16:35
107	32	28	A COMMENT	\N	2014-06-16 02:29:59	2014-06-16 02:29:59
108	4	28	A COMMENT	\N	2014-06-21 10:51:05	2014-06-21 10:51:05
109	43	28	A COMMENT	\N	2014-07-17 11:42:57	2014-07-17 11:42:57
110	28	29	A COMMENT	\N	2014-03-20 03:27:06	2014-03-20 03:27:06
111	45	29	A COMMENT	\N	2014-03-30 00:41:39	2014-03-30 00:41:39
112	14	29	A COMMENT	\N	2014-05-20 14:20:19	2014-05-20 14:20:19
113	47	29	A COMMENT	\N	2014-06-22 13:16:09	2014-06-22 13:16:09
114	30	29	A COMMENT	\N	2014-06-30 04:13:52	2014-06-30 04:13:52
115	3	30	A COMMENT	\N	2014-03-22 13:26:44	2014-03-22 13:26:44
116	43	30	A COMMENT	\N	2014-05-21 13:11:20	2014-05-21 13:11:20
117	47	30	A COMMENT	\N	2014-06-28 20:11:07	2014-06-28 20:11:07
118	2	30	A COMMENT	\N	2014-07-01 12:59:57	2014-07-01 12:59:57
119	10	31	A COMMENT	\N	2014-03-27 00:00:35	2014-03-27 00:00:35
120	14	33	A COMMENT	\N	2014-06-19 18:26:31	2014-06-19 18:26:31
121	37	33	A COMMENT	\N	2014-06-20 14:57:02	2014-06-20 14:57:02
122	1	33	A COMMENT	\N	2014-06-30 07:13:45	2014-06-30 07:13:45
123	30	33	A COMMENT	\N	2014-07-09 10:59:59	2014-07-09 10:59:59
124	8	33	A COMMENT	\N	2014-07-15 10:35:17	2014-07-15 10:35:17
125	30	33	A COMMENT	\N	2014-07-19 00:44:06	2014-07-19 00:44:06
126	2	33	A COMMENT	\N	2014-07-21 13:32:57	2014-07-21 13:32:57
127	1	33	A COMMENT	\N	2014-07-25 22:02:08	2014-07-25 22:02:08
128	39	34	A COMMENT	\N	2014-04-06 10:19:20	2014-04-06 10:19:20
129	32	34	A COMMENT	\N	2014-04-07 23:46:26	2014-04-07 23:46:26
130	37	34	A COMMENT	\N	2014-04-09 09:51:42	2014-04-09 09:51:42
131	30	34	A COMMENT	\N	2014-04-12 06:29:24	2014-04-12 06:29:24
132	30	34	A COMMENT	\N	2014-04-27 19:04:41	2014-04-27 19:04:41
133	32	34	A COMMENT	\N	2014-05-02 15:54:02	2014-05-02 15:54:02
134	11	34	A COMMENT	\N	2014-05-08 05:54:18	2014-05-08 05:54:18
135	21	34	A COMMENT	\N	2014-05-18 12:31:33	2014-05-18 12:31:33
136	30	34	A COMMENT	\N	2014-06-05 09:54:54	2014-06-05 09:54:54
137	8	34	A COMMENT	\N	2014-06-07 01:01:29	2014-06-07 01:01:29
138	1	34	A COMMENT	\N	2014-06-17 22:19:57	2014-06-17 22:19:57
139	11	34	A COMMENT	\N	2014-06-21 18:35:55	2014-06-21 18:35:55
140	4	34	A COMMENT	\N	2014-07-02 21:12:59	2014-07-02 21:12:59
141	8	34	A COMMENT	\N	2014-07-16 19:54:36	2014-07-16 19:54:36
142	2	34	A COMMENT	\N	2014-07-18 19:25:23	2014-07-18 19:25:23
143	28	34	A COMMENT	\N	2014-07-24 10:36:11	2014-07-24 10:36:11
144	10	35	A COMMENT	\N	2014-05-01 06:14:08	2014-05-01 06:14:08
145	4	35	A COMMENT	\N	2014-05-08 18:58:06	2014-05-08 18:58:06
146	28	35	A COMMENT	\N	2014-05-29 07:52:05	2014-05-29 07:52:05
147	47	35	A COMMENT	\N	2014-06-04 17:25:47	2014-06-04 17:25:47
148	10	35	A COMMENT	\N	2014-06-12 05:56:41	2014-06-12 05:56:41
149	1	35	A COMMENT	\N	2014-06-27 04:37:03	2014-06-27 04:37:03
150	43	35	A COMMENT	\N	2014-07-02 03:33:49	2014-07-02 03:33:49
151	14	35	A COMMENT	\N	2014-07-09 07:52:09	2014-07-09 07:52:09
152	11	36	A COMMENT	\N	2014-04-18 12:59:28	2014-04-18 12:59:28
153	47	36	A COMMENT	\N	2014-04-20 08:39:12	2014-04-20 08:39:12
154	2	36	A COMMENT	\N	2014-04-24 07:10:32	2014-04-24 07:10:32
155	32	36	A COMMENT	\N	2014-05-07 21:33:06	2014-05-07 21:33:06
156	47	36	A COMMENT	\N	2014-07-16 04:37:26	2014-07-16 04:37:26
157	21	36	A COMMENT	\N	2014-07-24 10:08:40	2014-07-24 10:08:40
158	45	37	A COMMENT	\N	2014-04-24 16:42:18	2014-04-24 16:42:18
159	21	37	A COMMENT	\N	2014-04-27 23:39:06	2014-04-27 23:39:06
160	30	37	A COMMENT	\N	2014-04-29 13:06:26	2014-04-29 13:06:26
161	37	37	A COMMENT	\N	2014-05-01 07:49:39	2014-05-01 07:49:39
162	11	37	A COMMENT	\N	2014-05-07 13:45:09	2014-05-07 13:45:09
163	47	37	A COMMENT	\N	2014-05-28 20:08:24	2014-05-28 20:08:24
164	14	37	A COMMENT	\N	2014-06-01 22:45:52	2014-06-01 22:45:52
165	39	37	A COMMENT	\N	2014-06-05 02:30:02	2014-06-05 02:30:02
166	37	37	A COMMENT	\N	2014-06-23 22:43:28	2014-06-23 22:43:28
167	21	37	A COMMENT	\N	2014-06-25 12:17:26	2014-06-25 12:17:26
168	30	37	A COMMENT	\N	2014-06-27 16:32:00	2014-06-27 16:32:00
169	28	37	A COMMENT	\N	2014-06-30 17:18:21	2014-06-30 17:18:21
170	14	38	A COMMENT	\N	2014-04-18 23:58:39	2014-04-18 23:58:39
171	45	38	A COMMENT	\N	2014-07-08 04:50:56	2014-07-08 04:50:56
172	14	40	A COMMENT	\N	2014-05-08 22:04:54	2014-05-08 22:04:54
173	27	40	A COMMENT	\N	2014-06-27 00:58:31	2014-06-27 00:58:31
174	8	40	A COMMENT	\N	2014-07-02 05:30:53	2014-07-02 05:30:53
175	28	40	A COMMENT	\N	2014-07-11 00:00:53	2014-07-11 00:00:53
176	10	42	A COMMENT	\N	2014-06-06 08:25:30	2014-06-06 08:25:30
177	30	44	A COMMENT	\N	2014-06-26 00:52:55	2014-06-26 00:52:55
178	28	44	A COMMENT	\N	2014-06-26 08:34:08	2014-06-26 08:34:08
179	43	44	A COMMENT	\N	2014-06-29 07:23:08	2014-06-29 07:23:08
180	3	44	A COMMENT	\N	2014-07-06 21:51:54	2014-07-06 21:51:54
181	32	44	A COMMENT	\N	2014-07-19 19:39:50	2014-07-19 19:39:50
182	10	45	A COMMENT	\N	2014-07-01 17:47:08	2014-07-01 17:47:08
183	3	45	A COMMENT	\N	2014-07-05 13:04:03	2014-07-05 13:04:03
184	39	45	A COMMENT	\N	2014-07-11 02:13:08	2014-07-11 02:13:08
185	47	45	A COMMENT	\N	2014-07-13 12:52:11	2014-07-13 12:52:11
186	37	45	A COMMENT	\N	2014-07-17 23:21:53	2014-07-17 23:21:53
187	10	45	A COMMENT	\N	2014-07-22 14:22:48	2014-07-22 14:22:48
188	10	46	A COMMENT	\N	2014-05-25 16:17:15	2014-05-25 16:17:15
189	28	46	A COMMENT	\N	2014-05-30 01:48:41	2014-05-30 01:48:41
190	2	46	A COMMENT	\N	2014-06-05 03:59:41	2014-06-05 03:59:41
191	8	46	A COMMENT	\N	2014-06-10 08:04:51	2014-06-10 08:04:51
192	4	46	A COMMENT	\N	2014-06-11 07:50:42	2014-06-11 07:50:42
193	39	46	A COMMENT	\N	2014-06-15 04:20:37	2014-06-15 04:20:37
194	43	46	A COMMENT	\N	2014-06-30 18:34:42	2014-06-30 18:34:42
195	1	46	A COMMENT	\N	2014-07-06 18:30:39	2014-07-06 18:30:39
196	4	46	A COMMENT	\N	2014-07-17 16:44:52	2014-07-17 16:44:52
197	43	46	A COMMENT	\N	2014-07-19 09:56:24	2014-07-19 09:56:24
198	8	47	A COMMENT	\N	2014-04-20 21:24:16	2014-04-20 21:24:16
199	47	47	A COMMENT	\N	2014-04-28 10:55:47	2014-04-28 10:55:47
200	1	47	A COMMENT	\N	2014-07-07 22:16:25	2014-07-07 22:16:25
201	32	48	A COMMENT	\N	2014-05-02 19:13:09	2014-05-02 19:13:09
202	32	48	A COMMENT	\N	2014-05-19 22:40:31	2014-05-19 22:40:31
203	27	48	A COMMENT	\N	2014-06-02 17:42:14	2014-06-02 17:42:14
204	37	48	A COMMENT	\N	2014-06-04 08:54:14	2014-06-04 08:54:14
205	3	49	A COMMENT	\N	2014-06-19 15:59:11	2014-06-19 15:59:11
206	37	49	A COMMENT	\N	2014-07-01 20:15:33	2014-07-01 20:15:33
207	1	49	A COMMENT	\N	2014-07-08 10:07:41	2014-07-08 10:07:41
208	2	49	A COMMENT	\N	2014-07-20 03:44:25	2014-07-20 03:44:25
209	1	49	A COMMENT	\N	2014-07-26 07:26:22	2014-07-26 07:26:22
210	10	50	A COMMENT	\N	2014-06-19 12:39:34	2014-06-19 12:39:34
211	1	50	A COMMENT	\N	2014-06-21 23:09:42	2014-06-21 23:09:42
212	11	50	A COMMENT	\N	2014-06-29 22:34:25	2014-06-29 22:34:25
213	32	50	A COMMENT	\N	2014-07-01 14:54:07	2014-07-01 14:54:07
214	39	50	A COMMENT	\N	2014-07-06 12:56:19	2014-07-06 12:56:19
215	27	50	A COMMENT	\N	2014-07-07 03:09:20	2014-07-07 03:09:20
216	45	50	A COMMENT	\N	2014-07-08 08:04:36	2014-07-08 08:04:36
217	10	52	A COMMENT	\N	2014-03-30 11:09:32	2014-03-30 11:09:32
218	1	52	A COMMENT	\N	2014-04-11 07:07:59	2014-04-11 07:07:59
219	3	52	A COMMENT	\N	2014-04-28 22:52:20	2014-04-28 22:52:20
220	3	52	A COMMENT	\N	2014-05-07 00:22:13	2014-05-07 00:22:13
221	11	52	A COMMENT	\N	2014-05-14 18:58:08	2014-05-14 18:58:08
222	47	52	A COMMENT	\N	2014-05-17 09:08:56	2014-05-17 09:08:56
223	27	52	A COMMENT	\N	2014-05-19 18:39:48	2014-05-19 18:39:48
224	43	52	A COMMENT	\N	2014-05-22 21:00:31	2014-05-22 21:00:31
225	47	52	A COMMENT	\N	2014-05-24 16:10:35	2014-05-24 16:10:35
226	14	52	A COMMENT	\N	2014-05-30 11:27:18	2014-05-30 11:27:18
227	3	52	A COMMENT	\N	2014-06-10 09:11:53	2014-06-10 09:11:53
228	39	52	A COMMENT	\N	2014-06-12 10:37:55	2014-06-12 10:37:55
229	28	52	A COMMENT	\N	2014-06-14 07:37:11	2014-06-14 07:37:11
230	21	52	A COMMENT	\N	2014-06-24 22:33:58	2014-06-24 22:33:58
231	37	52	A COMMENT	\N	2014-06-30 14:23:30	2014-06-30 14:23:30
232	21	52	A COMMENT	\N	2014-07-04 18:40:42	2014-07-04 18:40:42
233	28	52	A COMMENT	\N	2014-07-07 16:44:40	2014-07-07 16:44:40
234	10	52	A COMMENT	\N	2014-07-13 14:41:45	2014-07-13 14:41:45
235	11	52	A COMMENT	\N	2014-07-19 07:18:47	2014-07-19 07:18:47
236	39	52	A COMMENT	\N	2014-07-20 02:06:44	2014-07-20 02:06:44
237	30	52	A COMMENT	\N	2014-07-22 18:05:06	2014-07-22 18:05:06
238	10	53	A COMMENT	\N	2014-07-04 20:35:08	2014-07-04 20:35:08
239	4	53	A COMMENT	\N	2014-07-05 03:28:53	2014-07-05 03:28:53
240	27	53	A COMMENT	\N	2014-07-13 10:57:33	2014-07-13 10:57:33
241	37	53	A COMMENT	\N	2014-07-14 16:13:15	2014-07-14 16:13:15
242	21	53	A COMMENT	\N	2014-07-19 03:52:22	2014-07-19 03:52:22
243	2	53	A COMMENT	\N	2014-07-19 19:15:21	2014-07-19 19:15:21
244	32	54	A COMMENT	\N	2014-05-08 11:38:29	2014-05-08 11:38:29
245	2	54	A COMMENT	\N	2014-05-27 09:35:14	2014-05-27 09:35:14
246	11	54	A COMMENT	\N	2014-06-02 07:45:29	2014-06-02 07:45:29
247	47	54	A COMMENT	\N	2014-06-04 10:14:55	2014-06-04 10:14:55
248	39	54	A COMMENT	\N	2014-06-04 16:31:13	2014-06-04 16:31:13
249	37	54	A COMMENT	\N	2014-06-11 12:46:59	2014-06-11 12:46:59
250	30	54	A COMMENT	\N	2014-06-15 00:39:59	2014-06-15 00:39:59
251	1	54	A COMMENT	\N	2014-06-17 23:42:55	2014-06-17 23:42:55
252	28	54	A COMMENT	\N	2014-07-10 13:01:13	2014-07-10 13:01:13
253	1	54	A COMMENT	\N	2014-07-24 22:45:47	2014-07-24 22:45:47
254	11	57	A COMMENT	\N	2014-06-07 00:59:23	2014-06-07 00:59:23
255	43	57	A COMMENT	\N	2014-07-01 06:13:12	2014-07-01 06:13:12
256	39	57	A COMMENT	\N	2014-07-11 00:48:52	2014-07-11 00:48:52
257	8	57	A COMMENT	\N	2014-07-15 20:49:05	2014-07-15 20:49:05
258	10	58	A COMMENT	\N	2014-04-10 09:13:22	2014-04-10 09:13:22
259	37	58	A COMMENT	\N	2014-05-24 03:18:59	2014-05-24 03:18:59
260	32	58	A COMMENT	\N	2014-07-25 17:40:04	2014-07-25 17:40:04
261	27	59	A COMMENT	\N	2014-05-16 16:10:58	2014-05-16 16:10:58
262	4	59	A COMMENT	\N	2014-06-20 06:59:04	2014-06-20 06:59:04
263	28	59	A COMMENT	\N	2014-07-01 03:16:03	2014-07-01 03:16:03
264	45	59	A COMMENT	\N	2014-07-06 16:31:27	2014-07-06 16:31:27
265	28	59	A COMMENT	\N	2014-07-13 02:33:43	2014-07-13 02:33:43
266	2	59	A COMMENT	\N	2014-07-15 23:57:41	2014-07-15 23:57:41
267	30	60	A COMMENT	\N	2014-06-07 17:57:57	2014-06-07 17:57:57
268	47	60	A COMMENT	\N	2014-06-10 12:53:36	2014-06-10 12:53:36
269	3	60	A COMMENT	\N	2014-06-18 22:05:11	2014-06-18 22:05:11
270	10	61	A COMMENT	\N	2014-05-13 04:32:09	2014-05-13 04:32:09
271	10	62	A COMMENT	\N	2014-03-25 08:13:15	2014-03-25 08:13:15
272	10	63	A COMMENT	\N	2014-03-26 08:18:22	2014-03-26 08:18:22
273	21	63	A COMMENT	\N	2014-04-15 17:13:01	2014-04-15 17:13:01
274	11	63	A COMMENT	\N	2014-04-16 09:03:49	2014-04-16 09:03:49
275	27	63	A COMMENT	\N	2014-04-25 03:48:41	2014-04-25 03:48:41
276	8	63	A COMMENT	\N	2014-04-27 04:42:43	2014-04-27 04:42:43
277	3	63	A COMMENT	\N	2014-05-20 02:14:51	2014-05-20 02:14:51
278	47	63	A COMMENT	\N	2014-05-21 06:04:24	2014-05-21 06:04:24
279	45	63	A COMMENT	\N	2014-05-26 09:03:22	2014-05-26 09:03:22
280	10	63	A COMMENT	\N	2014-06-08 00:14:04	2014-06-08 00:14:04
281	37	63	A COMMENT	\N	2014-06-23 15:45:14	2014-06-23 15:45:14
282	30	63	A COMMENT	\N	2014-06-24 15:18:43	2014-06-24 15:18:43
283	3	63	A COMMENT	\N	2014-07-01 22:25:03	2014-07-01 22:25:03
284	4	64	A COMMENT	\N	2014-05-07 15:06:55	2014-05-07 15:06:55
285	43	64	A COMMENT	\N	2014-05-16 08:08:09	2014-05-16 08:08:09
286	32	64	A COMMENT	\N	2014-06-13 14:40:21	2014-06-13 14:40:21
287	4	64	A COMMENT	\N	2014-07-07 20:39:44	2014-07-07 20:39:44
288	10	65	A COMMENT	\N	2014-03-01 06:08:14	2014-03-01 06:08:14
289	1	67	A COMMENT	\N	2014-06-05 22:46:14	2014-06-05 22:46:14
290	1	67	A COMMENT	\N	2014-06-19 14:07:28	2014-06-19 14:07:28
291	28	70	A COMMENT	\N	2014-06-22 07:09:17	2014-06-22 07:09:17
292	14	70	A COMMENT	\N	2014-07-01 00:33:57	2014-07-01 00:33:57
293	21	70	A COMMENT	\N	2014-07-04 00:59:00	2014-07-04 00:59:00
294	10	71	A COMMENT	\N	2014-05-24 01:03:09	2014-05-24 01:03:09
295	30	71	A COMMENT	\N	2014-05-25 07:02:23	2014-05-25 07:02:23
296	14	71	A COMMENT	\N	2014-05-27 10:09:29	2014-05-27 10:09:29
297	2	71	A COMMENT	\N	2014-06-01 14:59:10	2014-06-01 14:59:10
298	1	71	A COMMENT	\N	2014-06-04 01:37:41	2014-06-04 01:37:41
299	8	71	A COMMENT	\N	2014-06-07 23:22:54	2014-06-07 23:22:54
300	14	71	A COMMENT	\N	2014-06-11 11:48:51	2014-06-11 11:48:51
301	2	71	A COMMENT	\N	2014-06-21 12:29:47	2014-06-21 12:29:47
302	21	71	A COMMENT	\N	2014-07-25 12:00:26	2014-07-25 12:00:26
303	27	71	A COMMENT	\N	2014-07-26 04:29:31	2014-07-26 04:29:31
304	2	72	A COMMENT	\N	2014-06-22 15:48:22	2014-06-22 15:48:22
305	10	72	A COMMENT	\N	2014-06-30 14:21:18	2014-06-30 14:21:18
306	2	72	A COMMENT	\N	2014-07-12 11:40:10	2014-07-12 11:40:10
307	14	73	A COMMENT	\N	2014-05-30 09:47:09	2014-05-30 09:47:09
308	14	74	A COMMENT	\N	2014-07-08 10:50:44	2014-07-08 10:50:44
309	11	74	A COMMENT	\N	2014-07-11 22:32:10	2014-07-11 22:32:10
310	43	74	A COMMENT	\N	2014-07-13 05:00:18	2014-07-13 05:00:18
311	2	74	A COMMENT	\N	2014-07-14 19:08:03	2014-07-14 19:08:03
312	32	74	A COMMENT	\N	2014-07-15 03:23:40	2014-07-15 03:23:40
313	43	74	A COMMENT	\N	2014-07-19 01:45:29	2014-07-19 01:45:29
314	8	74	A COMMENT	\N	2014-07-21 01:23:12	2014-07-21 01:23:12
315	21	74	A COMMENT	\N	2014-07-21 03:48:50	2014-07-21 03:48:50
316	39	74	A COMMENT	\N	2014-07-22 02:21:10	2014-07-22 02:21:10
317	21	74	A COMMENT	\N	2014-07-24 09:51:46	2014-07-24 09:51:46
318	45	74	A COMMENT	\N	2014-07-25 00:08:14	2014-07-25 00:08:14
319	14	77	A COMMENT	\N	2014-06-22 20:36:11	2014-06-22 20:36:11
320	14	78	A COMMENT	\N	2014-06-18 05:01:27	2014-06-18 05:01:27
321	28	78	A COMMENT	\N	2014-07-12 04:03:30	2014-07-12 04:03:30
322	21	79	A COMMENT	\N	2014-03-25 17:40:19	2014-03-25 17:40:19
323	21	79	A COMMENT	\N	2014-04-06 07:21:16	2014-04-06 07:21:16
324	32	79	A COMMENT	\N	2014-04-10 03:47:06	2014-04-10 03:47:06
325	27	79	A COMMENT	\N	2014-04-19 12:08:38	2014-04-19 12:08:38
326	1	79	A COMMENT	\N	2014-04-21 13:41:36	2014-04-21 13:41:36
327	10	79	A COMMENT	\N	2014-05-05 20:52:06	2014-05-05 20:52:06
328	37	79	A COMMENT	\N	2014-05-06 10:23:34	2014-05-06 10:23:34
329	2	79	A COMMENT	\N	2014-05-13 06:37:22	2014-05-13 06:37:22
330	4	79	A COMMENT	\N	2014-05-22 10:40:35	2014-05-22 10:40:35
331	47	79	A COMMENT	\N	2014-06-01 04:51:14	2014-06-01 04:51:14
332	32	79	A COMMENT	\N	2014-06-02 13:50:16	2014-06-02 13:50:16
333	28	79	A COMMENT	\N	2014-06-23 18:22:25	2014-06-23 18:22:25
334	43	79	A COMMENT	\N	2014-06-28 12:43:53	2014-06-28 12:43:53
335	8	79	A COMMENT	\N	2014-07-02 16:06:39	2014-07-02 16:06:39
336	43	79	A COMMENT	\N	2014-07-07 05:14:25	2014-07-07 05:14:25
337	8	79	A COMMENT	\N	2014-07-14 07:08:42	2014-07-14 07:08:42
338	30	79	A COMMENT	\N	2014-07-15 00:21:11	2014-07-15 00:21:11
339	3	79	A COMMENT	\N	2014-07-23 21:48:47	2014-07-23 21:48:47
340	8	80	A COMMENT	\N	2014-05-18 07:41:48	2014-05-18 07:41:48
341	10	80	A COMMENT	\N	2014-06-18 17:14:48	2014-06-18 17:14:48
342	39	80	A COMMENT	\N	2014-06-28 16:42:41	2014-06-28 16:42:41
343	32	80	A COMMENT	\N	2014-07-22 16:40:26	2014-07-22 16:40:26
344	21	81	A COMMENT	\N	2014-06-02 01:57:32	2014-06-02 01:57:32
345	10	81	A COMMENT	\N	2014-06-05 13:44:47	2014-06-05 13:44:47
346	8	81	A COMMENT	\N	2014-06-12 16:10:05	2014-06-12 16:10:05
347	43	81	A COMMENT	\N	2014-06-16 10:39:27	2014-06-16 10:39:27
348	14	81	A COMMENT	\N	2014-06-29 21:18:13	2014-06-29 21:18:13
349	11	81	A COMMENT	\N	2014-07-22 23:40:15	2014-07-22 23:40:15
350	28	81	A COMMENT	\N	2014-07-24 18:38:19	2014-07-24 18:38:19
351	21	82	A COMMENT	\N	2014-02-07 05:37:39	2014-02-07 05:37:39
352	39	82	A COMMENT	\N	2014-02-28 03:12:21	2014-02-28 03:12:21
353	32	82	A COMMENT	\N	2014-02-28 19:49:55	2014-02-28 19:49:55
354	10	82	A COMMENT	\N	2014-03-20 03:10:02	2014-03-20 03:10:02
355	1	82	A COMMENT	\N	2014-03-27 10:32:37	2014-03-27 10:32:37
356	37	82	A COMMENT	\N	2014-06-16 23:42:53	2014-06-16 23:42:53
357	10	83	A COMMENT	\N	2014-04-05 01:22:07	2014-04-05 01:22:07
358	1	83	A COMMENT	\N	2014-05-27 03:13:49	2014-05-27 03:13:49
359	8	84	A COMMENT	\N	2014-06-18 20:13:45	2014-06-18 20:13:45
360	14	84	A COMMENT	\N	2014-06-19 20:52:44	2014-06-19 20:52:44
361	39	84	A COMMENT	\N	2014-07-10 17:30:12	2014-07-10 17:30:12
362	8	84	A COMMENT	\N	2014-07-15 10:15:17	2014-07-15 10:15:17
363	1	84	A COMMENT	\N	2014-07-19 03:10:34	2014-07-19 03:10:34
364	8	85	A COMMENT	\N	2014-07-01 07:21:37	2014-07-01 07:21:37
365	11	85	A COMMENT	\N	2014-07-13 03:05:35	2014-07-13 03:05:35
366	47	85	A COMMENT	\N	2014-07-17 12:31:16	2014-07-17 12:31:16
367	14	85	A COMMENT	\N	2014-07-19 05:32:23	2014-07-19 05:32:23
368	1	85	A COMMENT	\N	2014-07-20 05:56:37	2014-07-20 05:56:37
369	1	85	A COMMENT	\N	2014-07-26 15:04:30	2014-07-26 15:04:30
370	28	86	A COMMENT	\N	2014-01-17 09:32:13	2014-01-17 09:32:13
371	39	87	A COMMENT	\N	2013-12-31 19:56:44	2013-12-31 19:56:44
372	14	87	A COMMENT	\N	2014-01-21 11:22:50	2014-01-21 11:22:50
373	11	87	A COMMENT	\N	2014-02-20 02:52:21	2014-02-20 02:52:21
374	32	87	A COMMENT	\N	2014-02-22 14:03:58	2014-02-22 14:03:58
375	10	87	A COMMENT	\N	2014-03-19 07:44:43	2014-03-19 07:44:43
376	27	87	A COMMENT	\N	2014-03-21 14:42:36	2014-03-21 14:42:36
377	21	87	A COMMENT	\N	2014-05-17 18:07:52	2014-05-17 18:07:52
378	32	87	A COMMENT	\N	2014-06-11 12:55:47	2014-06-11 12:55:47
379	37	88	A COMMENT	\N	2014-02-06 09:21:17	2014-02-06 09:21:17
380	14	88	A COMMENT	\N	2014-02-23 15:43:59	2014-02-23 15:43:59
381	21	88	A COMMENT	\N	2014-03-19 09:19:53	2014-03-19 09:19:53
382	21	88	A COMMENT	\N	2014-04-05 22:01:57	2014-04-05 22:01:57
383	11	88	A COMMENT	\N	2014-06-16 18:37:36	2014-06-16 18:37:36
384	2	89	A COMMENT	\N	2014-04-15 06:44:46	2014-04-15 06:44:46
385	11	89	A COMMENT	\N	2014-05-04 15:28:05	2014-05-04 15:28:05
386	14	89	A COMMENT	\N	2014-05-17 04:49:44	2014-05-17 04:49:44
387	47	89	A COMMENT	\N	2014-06-12 03:57:42	2014-06-12 03:57:42
388	28	89	A COMMENT	\N	2014-07-23 03:54:44	2014-07-23 03:54:44
389	28	90	A COMMENT	\N	2014-01-05 09:20:29	2014-01-05 09:20:29
390	8	90	A COMMENT	\N	2014-01-10 13:50:59	2014-01-10 13:50:59
391	4	90	A COMMENT	\N	2014-01-19 03:43:08	2014-01-19 03:43:08
392	11	90	A COMMENT	\N	2014-03-20 12:54:53	2014-03-20 12:54:53
393	2	90	A COMMENT	\N	2014-03-26 14:39:17	2014-03-26 14:39:17
394	43	90	A COMMENT	\N	2014-07-08 02:06:16	2014-07-08 02:06:16
395	21	90	A COMMENT	\N	2014-07-15 21:13:15	2014-07-15 21:13:15
396	28	91	A COMMENT	\N	2014-01-14 02:48:11	2014-01-14 02:48:11
397	45	91	A COMMENT	\N	2014-01-17 15:40:24	2014-01-17 15:40:24
398	32	91	A COMMENT	\N	2014-01-23 01:09:19	2014-01-23 01:09:19
399	28	91	A COMMENT	\N	2014-03-09 07:27:44	2014-03-09 07:27:44
400	30	91	A COMMENT	\N	2014-03-24 14:43:15	2014-03-24 14:43:15
401	39	91	A COMMENT	\N	2014-04-03 08:28:27	2014-04-03 08:28:27
402	37	91	A COMMENT	\N	2014-04-10 19:41:07	2014-04-10 19:41:07
403	45	91	A COMMENT	\N	2014-04-26 03:17:46	2014-04-26 03:17:46
404	30	91	A COMMENT	\N	2014-06-10 04:23:16	2014-06-10 04:23:16
405	27	91	A COMMENT	\N	2014-07-04 14:57:44	2014-07-04 14:57:44
406	3	91	A COMMENT	\N	2014-07-08 05:06:18	2014-07-08 05:06:18
407	3	93	A COMMENT	\N	2014-02-12 23:31:42	2014-02-12 23:31:42
408	47	93	A COMMENT	\N	2014-02-24 10:51:09	2014-02-24 10:51:09
409	47	93	A COMMENT	\N	2014-03-25 09:23:15	2014-03-25 09:23:15
410	21	93	A COMMENT	\N	2014-04-05 07:28:34	2014-04-05 07:28:34
411	30	93	A COMMENT	\N	2014-04-27 18:45:55	2014-04-27 18:45:55
412	14	93	A COMMENT	\N	2014-05-06 01:30:29	2014-05-06 01:30:29
413	43	93	A COMMENT	\N	2014-05-27 00:28:13	2014-05-27 00:28:13
414	45	94	A COMMENT	\N	2014-06-21 18:02:48	2014-06-21 18:02:48
415	45	94	A COMMENT	\N	2014-07-13 04:04:59	2014-07-13 04:04:59
416	28	94	A COMMENT	\N	2014-07-20 15:38:14	2014-07-20 15:38:14
417	21	94	A COMMENT	\N	2014-07-22 06:08:22	2014-07-22 06:08:22
418	32	95	A COMMENT	\N	2013-12-29 05:33:08	2013-12-29 05:33:08
419	39	95	A COMMENT	\N	2014-02-21 17:08:02	2014-02-21 17:08:02
420	2	95	A COMMENT	\N	2014-04-26 16:45:21	2014-04-26 16:45:21
421	27	95	A COMMENT	\N	2014-07-14 12:59:33	2014-07-14 12:59:33
422	21	95	A COMMENT	\N	2014-07-21 16:39:47	2014-07-21 16:39:47
423	10	96	A COMMENT	\N	2014-05-27 00:59:10	2014-05-27 00:59:10
424	32	96	A COMMENT	\N	2014-06-09 07:16:29	2014-06-09 07:16:29
425	10	96	A COMMENT	\N	2014-06-09 11:25:25	2014-06-09 11:25:25
426	14	96	A COMMENT	\N	2014-06-12 04:04:27	2014-06-12 04:04:27
427	39	96	A COMMENT	\N	2014-06-14 16:37:43	2014-06-14 16:37:43
428	4	96	A COMMENT	\N	2014-06-15 03:33:22	2014-06-15 03:33:22
429	30	96	A COMMENT	\N	2014-06-16 15:11:56	2014-06-16 15:11:56
430	21	96	A COMMENT	\N	2014-06-26 10:48:20	2014-06-26 10:48:20
431	47	96	A COMMENT	\N	2014-06-29 04:35:32	2014-06-29 04:35:32
432	30	96	A COMMENT	\N	2014-06-30 03:05:49	2014-06-30 03:05:49
433	3	96	A COMMENT	\N	2014-07-01 09:10:17	2014-07-01 09:10:17
434	3	96	A COMMENT	\N	2014-07-05 00:41:21	2014-07-05 00:41:21
435	21	96	A COMMENT	\N	2014-07-08 13:32:01	2014-07-08 13:32:01
436	8	96	A COMMENT	\N	2014-07-08 16:32:33	2014-07-08 16:32:33
437	10	96	A COMMENT	\N	2014-07-12 00:40:02	2014-07-12 00:40:02
438	32	96	A COMMENT	\N	2014-07-17 23:48:32	2014-07-17 23:48:32
439	45	96	A COMMENT	\N	2014-07-22 17:53:49	2014-07-22 17:53:49
440	39	96	A COMMENT	\N	2014-07-25 07:22:00	2014-07-25 07:22:00
441	28	97	A COMMENT	\N	2014-04-30 10:51:01	2014-04-30 10:51:01
442	28	97	A COMMENT	\N	2014-06-16 06:24:10	2014-06-16 06:24:10
443	8	99	A COMMENT	\N	2014-04-28 13:50:36	2014-04-28 13:50:36
444	28	99	A COMMENT	\N	2014-07-02 14:02:28	2014-07-02 14:02:28
445	21	100	A COMMENT	\N	2014-05-17 04:43:53	2014-05-17 04:43:53
446	28	101	A COMMENT	\N	2014-02-20 21:12:39	2014-02-20 21:12:39
447	11	101	A COMMENT	\N	2014-06-30 09:50:17	2014-06-30 09:50:17
448	37	101	A COMMENT	\N	2014-07-06 14:22:14	2014-07-06 14:22:14
449	37	102	A COMMENT	\N	2014-02-28 08:40:58	2014-02-28 08:40:58
450	30	102	A COMMENT	\N	2014-04-22 02:50:31	2014-04-22 02:50:31
451	45	102	A COMMENT	\N	2014-04-28 05:04:32	2014-04-28 05:04:32
452	43	102	A COMMENT	\N	2014-07-08 10:47:42	2014-07-08 10:47:42
453	21	102	A COMMENT	\N	2014-07-22 06:03:40	2014-07-22 06:03:40
454	28	104	A COMMENT	\N	2014-05-13 11:01:09	2014-05-13 11:01:09
455	4	104	A COMMENT	\N	2014-05-27 03:29:59	2014-05-27 03:29:59
456	37	104	A COMMENT	\N	2014-06-05 22:13:38	2014-06-05 22:13:38
457	43	104	A COMMENT	\N	2014-06-13 07:04:58	2014-06-13 07:04:58
458	28	104	A COMMENT	\N	2014-06-13 15:11:47	2014-06-13 15:11:47
459	27	104	A COMMENT	\N	2014-06-24 21:16:07	2014-06-24 21:16:07
460	4	104	A COMMENT	\N	2014-07-03 09:35:15	2014-07-03 09:35:15
461	43	105	A COMMENT	\N	2014-04-10 03:11:33	2014-04-10 03:11:33
462	14	105	A COMMENT	\N	2014-04-23 09:46:36	2014-04-23 09:46:36
463	32	105	A COMMENT	\N	2014-04-29 02:52:25	2014-04-29 02:52:25
464	8	105	A COMMENT	\N	2014-05-13 19:05:37	2014-05-13 19:05:37
465	39	105	A COMMENT	\N	2014-06-03 11:07:02	2014-06-03 11:07:02
466	1	105	A COMMENT	\N	2014-06-12 14:35:09	2014-06-12 14:35:09
467	8	105	A COMMENT	\N	2014-06-15 13:06:13	2014-06-15 13:06:13
468	2	105	A COMMENT	\N	2014-06-16 12:54:33	2014-06-16 12:54:33
469	10	105	A COMMENT	\N	2014-07-12 03:09:35	2014-07-12 03:09:35
470	3	105	A COMMENT	\N	2014-07-20 20:15:32	2014-07-20 20:15:32
471	27	105	A COMMENT	\N	2014-07-25 23:43:58	2014-07-25 23:43:58
472	28	106	A COMMENT	\N	2014-04-24 12:15:38	2014-04-24 12:15:38
473	2	106	A COMMENT	\N	2014-04-26 11:31:00	2014-04-26 11:31:00
474	45	106	A COMMENT	\N	2014-05-02 12:13:58	2014-05-02 12:13:58
475	45	106	A COMMENT	\N	2014-05-03 03:07:41	2014-05-03 03:07:41
476	32	106	A COMMENT	\N	2014-05-08 13:24:46	2014-05-08 13:24:46
477	1	106	A COMMENT	\N	2014-05-10 10:29:38	2014-05-10 10:29:38
478	2	106	A COMMENT	\N	2014-05-12 07:27:07	2014-05-12 07:27:07
479	21	106	A COMMENT	\N	2014-05-15 08:22:33	2014-05-15 08:22:33
480	27	106	A COMMENT	\N	2014-05-21 02:05:54	2014-05-21 02:05:54
481	3	106	A COMMENT	\N	2014-05-21 06:30:36	2014-05-21 06:30:36
482	1	106	A COMMENT	\N	2014-05-24 08:22:29	2014-05-24 08:22:29
483	32	106	A COMMENT	\N	2014-05-27 20:58:10	2014-05-27 20:58:10
484	37	106	A COMMENT	\N	2014-06-09 10:02:40	2014-06-09 10:02:40
485	2	106	A COMMENT	\N	2014-06-10 08:15:03	2014-06-10 08:15:03
486	30	106	A COMMENT	\N	2014-06-21 12:31:17	2014-06-21 12:31:17
487	21	106	A COMMENT	\N	2014-06-30 03:39:44	2014-06-30 03:39:44
488	8	106	A COMMENT	\N	2014-07-06 15:05:03	2014-07-06 15:05:03
489	43	106	A COMMENT	\N	2014-07-20 13:30:14	2014-07-20 13:30:14
490	37	106	A COMMENT	\N	2014-07-22 17:56:20	2014-07-22 17:56:20
491	4	106	A COMMENT	\N	2014-07-25 11:09:58	2014-07-25 11:09:58
492	30	107	A COMMENT	\N	2014-02-02 12:20:53	2014-02-02 12:20:53
493	1	107	A COMMENT	\N	2014-03-29 01:57:00	2014-03-29 01:57:00
494	10	107	A COMMENT	\N	2014-04-30 10:18:54	2014-04-30 10:18:54
495	4	107	A COMMENT	\N	2014-06-22 11:12:29	2014-06-22 11:12:29
496	1	107	A COMMENT	\N	2014-07-02 04:30:30	2014-07-02 04:30:30
497	3	107	A COMMENT	\N	2014-07-08 23:17:44	2014-07-08 23:17:44
498	2	109	A COMMENT	\N	2014-07-08 18:27:58	2014-07-08 18:27:58
499	32	109	A COMMENT	\N	2014-07-13 09:37:14	2014-07-13 09:37:14
500	45	109	A COMMENT	\N	2014-07-15 01:54:58	2014-07-15 01:54:58
501	37	109	A COMMENT	\N	2014-07-26 13:56:11	2014-07-26 13:56:11
502	43	111	A COMMENT	\N	2014-04-22 18:22:13	2014-04-22 18:22:13
503	37	111	A COMMENT	\N	2014-04-28 09:17:44	2014-04-28 09:17:44
504	32	111	A COMMENT	\N	2014-05-05 14:00:42	2014-05-05 14:00:42
505	28	111	A COMMENT	\N	2014-05-23 13:27:20	2014-05-23 13:27:20
506	47	111	A COMMENT	\N	2014-05-29 04:42:24	2014-05-29 04:42:24
507	30	111	A COMMENT	\N	2014-06-10 09:38:50	2014-06-10 09:38:50
508	21	112	A COMMENT	\N	2014-06-17 00:45:18	2014-06-17 00:45:18
509	32	112	A COMMENT	\N	2014-06-28 15:07:46	2014-06-28 15:07:46
510	32	112	A COMMENT	\N	2014-07-01 13:39:21	2014-07-01 13:39:21
511	39	112	A COMMENT	\N	2014-07-17 17:36:33	2014-07-17 17:36:33
512	11	112	A COMMENT	\N	2014-07-23 17:42:36	2014-07-23 17:42:36
513	30	113	A COMMENT	\N	2014-07-06 07:00:36	2014-07-06 07:00:36
514	47	113	A COMMENT	\N	2014-07-08 23:41:50	2014-07-08 23:41:50
515	14	113	A COMMENT	\N	2014-07-09 01:13:06	2014-07-09 01:13:06
516	28	113	A COMMENT	\N	2014-07-18 07:09:49	2014-07-18 07:09:49
517	37	113	A COMMENT	\N	2014-07-18 15:06:36	2014-07-18 15:06:36
518	45	113	A COMMENT	\N	2014-07-24 21:00:25	2014-07-24 21:00:25
519	8	113	A COMMENT	\N	2014-07-25 02:35:00	2014-07-25 02:35:00
520	3	113	A COMMENT	\N	2014-07-26 09:49:19	2014-07-26 09:49:19
521	14	113	A COMMENT	\N	2014-07-26 15:37:53	2014-07-26 15:37:53
522	2	114	A COMMENT	\N	2014-05-02 08:26:35	2014-05-02 08:26:35
523	43	114	A COMMENT	\N	2014-05-29 21:34:38	2014-05-29 21:34:38
524	8	115	A COMMENT	\N	2014-07-15 04:24:12	2014-07-15 04:24:12
525	14	115	A COMMENT	\N	2014-07-18 02:57:25	2014-07-18 02:57:25
526	45	115	A COMMENT	\N	2014-07-19 21:34:35	2014-07-19 21:34:35
527	4	115	A COMMENT	\N	2014-07-20 23:24:23	2014-07-20 23:24:23
528	3	115	A COMMENT	\N	2014-07-25 04:58:23	2014-07-25 04:58:23
529	45	116	A COMMENT	\N	2014-06-15 15:54:53	2014-06-15 15:54:53
530	30	116	A COMMENT	\N	2014-06-26 05:18:22	2014-06-26 05:18:22
531	28	116	A COMMENT	\N	2014-06-30 18:20:13	2014-06-30 18:20:13
532	39	116	A COMMENT	\N	2014-07-08 09:39:53	2014-07-08 09:39:53
533	45	116	A COMMENT	\N	2014-07-16 08:40:35	2014-07-16 08:40:35
534	14	117	A COMMENT	\N	2014-05-27 10:10:43	2014-05-27 10:10:43
535	3	117	A COMMENT	\N	2014-05-28 05:28:08	2014-05-28 05:28:08
536	21	117	A COMMENT	\N	2014-06-01 10:18:09	2014-06-01 10:18:09
537	39	117	A COMMENT	\N	2014-06-07 16:38:38	2014-06-07 16:38:38
538	30	117	A COMMENT	\N	2014-07-01 10:33:20	2014-07-01 10:33:20
539	3	120	A COMMENT	\N	2014-07-15 00:52:49	2014-07-15 00:52:49
540	32	121	A COMMENT	\N	2014-07-13 02:16:41	2014-07-13 02:16:41
541	28	121	A COMMENT	\N	2014-07-16 22:40:58	2014-07-16 22:40:58
542	43	121	A COMMENT	\N	2014-07-17 20:18:10	2014-07-17 20:18:10
543	1	121	A COMMENT	\N	2014-07-20 22:59:52	2014-07-20 22:59:52
544	30	121	A COMMENT	\N	2014-07-21 01:25:53	2014-07-21 01:25:53
545	32	122	A COMMENT	\N	2014-07-09 13:39:35	2014-07-09 13:39:35
546	14	122	A COMMENT	\N	2014-07-09 20:42:20	2014-07-09 20:42:20
547	10	122	A COMMENT	\N	2014-07-11 19:31:00	2014-07-11 19:31:00
548	32	123	A COMMENT	\N	2014-07-08 00:03:09	2014-07-08 00:03:09
549	27	123	A COMMENT	\N	2014-07-09 10:32:02	2014-07-09 10:32:02
550	10	123	A COMMENT	\N	2014-07-10 12:03:42	2014-07-10 12:03:42
551	10	123	A COMMENT	\N	2014-07-16 00:49:29	2014-07-16 00:49:29
552	47	123	A COMMENT	\N	2014-07-24 04:43:05	2014-07-24 04:43:05
553	45	123	A COMMENT	\N	2014-07-25 05:04:04	2014-07-25 05:04:04
554	47	124	A COMMENT	\N	2014-07-12 02:36:42	2014-07-12 02:36:42
555	4	124	A COMMENT	\N	2014-07-12 05:47:46	2014-07-12 05:47:46
556	43	124	A COMMENT	\N	2014-07-14 03:27:28	2014-07-14 03:27:28
557	27	124	A COMMENT	\N	2014-07-18 16:12:09	2014-07-18 16:12:09
558	21	124	A COMMENT	\N	2014-07-23 15:53:32	2014-07-23 15:53:32
559	32	125	A COMMENT	\N	2014-07-16 21:59:59	2014-07-16 21:59:59
560	8	125	A COMMENT	\N	2014-07-16 23:04:34	2014-07-16 23:04:34
561	32	125	A COMMENT	\N	2014-07-17 16:36:14	2014-07-17 16:36:14
562	3	125	A COMMENT	\N	2014-07-19 17:34:04	2014-07-19 17:34:04
563	30	125	A COMMENT	\N	2014-07-19 20:55:18	2014-07-19 20:55:18
564	10	125	A COMMENT	\N	2014-07-19 21:58:57	2014-07-19 21:58:57
565	1	125	A COMMENT	\N	2014-07-22 05:00:38	2014-07-22 05:00:38
566	2	125	A COMMENT	\N	2014-07-24 06:52:46	2014-07-24 06:52:46
567	14	125	A COMMENT	\N	2014-07-24 08:04:46	2014-07-24 08:04:46
568	28	125	A COMMENT	\N	2014-07-25 10:50:10	2014-07-25 10:50:10
569	21	125	A COMMENT	\N	2014-07-25 16:19:17	2014-07-25 16:19:17
570	39	125	A COMMENT	\N	2014-07-25 18:42:56	2014-07-25 18:42:56
571	43	125	A COMMENT	\N	2014-07-26 08:35:58	2014-07-26 08:35:58
572	47	125	A COMMENT	\N	2014-07-26 10:37:52	2014-07-26 10:37:52
573	37	126	A COMMENT	\N	2014-07-02 16:02:04	2014-07-02 16:02:04
574	3	126	A COMMENT	\N	2014-07-04 12:20:36	2014-07-04 12:20:36
575	4	126	A COMMENT	\N	2014-07-07 08:36:31	2014-07-07 08:36:31
576	11	126	A COMMENT	\N	2014-07-16 05:33:29	2014-07-16 05:33:29
577	10	126	A COMMENT	\N	2014-07-23 02:04:02	2014-07-23 02:04:02
578	37	127	A COMMENT	\N	2014-07-03 15:35:38	2014-07-03 15:35:38
579	27	127	A COMMENT	\N	2014-07-18 04:17:20	2014-07-18 04:17:20
580	47	128	A COMMENT	\N	2014-07-15 19:39:48	2014-07-15 19:39:48
581	30	128	A COMMENT	\N	2014-07-18 16:43:21	2014-07-18 16:43:21
582	27	128	A COMMENT	\N	2014-07-19 20:46:42	2014-07-19 20:46:42
583	8	128	A COMMENT	\N	2014-07-21 17:29:51	2014-07-21 17:29:51
584	28	128	A COMMENT	\N	2014-07-22 04:45:29	2014-07-22 04:45:29
585	39	129	A COMMENT	\N	2014-03-17 20:54:47	2014-03-17 20:54:47
586	32	129	A COMMENT	\N	2014-03-26 03:54:45	2014-03-26 03:54:45
587	11	129	A COMMENT	\N	2014-05-19 11:10:32	2014-05-19 11:10:32
588	27	130	A COMMENT	\N	2014-05-30 15:26:22	2014-05-30 15:26:22
589	10	130	A COMMENT	\N	2014-06-12 22:38:50	2014-06-12 22:38:50
590	21	130	A COMMENT	\N	2014-07-23 15:51:46	2014-07-23 15:51:46
591	37	131	A COMMENT	\N	2014-05-16 18:27:22	2014-05-16 18:27:22
592	21	131	A COMMENT	\N	2014-05-18 17:06:45	2014-05-18 17:06:45
593	30	131	A COMMENT	\N	2014-05-20 22:29:38	2014-05-20 22:29:38
594	32	131	A COMMENT	\N	2014-05-28 01:14:08	2014-05-28 01:14:08
595	39	131	A COMMENT	\N	2014-05-30 01:20:11	2014-05-30 01:20:11
596	8	131	A COMMENT	\N	2014-05-30 10:31:36	2014-05-30 10:31:36
597	30	131	A COMMENT	\N	2014-06-06 16:11:39	2014-06-06 16:11:39
598	3	131	A COMMENT	\N	2014-06-08 19:21:59	2014-06-08 19:21:59
599	45	131	A COMMENT	\N	2014-06-10 12:04:08	2014-06-10 12:04:08
600	11	131	A COMMENT	\N	2014-06-20 02:03:49	2014-06-20 02:03:49
601	4	131	A COMMENT	\N	2014-06-20 22:12:11	2014-06-20 22:12:11
602	27	131	A COMMENT	\N	2014-06-21 23:16:08	2014-06-21 23:16:08
603	2	131	A COMMENT	\N	2014-06-24 19:41:19	2014-06-24 19:41:19
604	30	131	A COMMENT	\N	2014-06-25 10:58:57	2014-06-25 10:58:57
605	14	131	A COMMENT	\N	2014-06-26 18:44:33	2014-06-26 18:44:33
606	37	131	A COMMENT	\N	2014-06-27 09:22:08	2014-06-27 09:22:08
607	1	131	A COMMENT	\N	2014-06-29 07:16:23	2014-06-29 07:16:23
608	8	131	A COMMENT	\N	2014-07-02 20:58:09	2014-07-02 20:58:09
609	2	131	A COMMENT	\N	2014-07-13 11:08:31	2014-07-13 11:08:31
610	21	131	A COMMENT	\N	2014-07-25 08:57:43	2014-07-25 08:57:43
611	4	132	A COMMENT	\N	2014-05-19 01:44:53	2014-05-19 01:44:53
612	39	132	A COMMENT	\N	2014-05-21 06:42:41	2014-05-21 06:42:41
613	2	132	A COMMENT	\N	2014-05-21 18:57:49	2014-05-21 18:57:49
614	32	132	A COMMENT	\N	2014-05-27 18:31:22	2014-05-27 18:31:22
615	47	132	A COMMENT	\N	2014-06-28 01:19:56	2014-06-28 01:19:56
616	3	133	A COMMENT	\N	2014-05-30 22:04:31	2014-05-30 22:04:31
617	43	133	A COMMENT	\N	2014-05-30 22:14:33	2014-05-30 22:14:33
618	4	133	A COMMENT	\N	2014-06-07 01:31:51	2014-06-07 01:31:51
619	2	133	A COMMENT	\N	2014-06-09 17:32:06	2014-06-09 17:32:06
620	3	133	A COMMENT	\N	2014-06-15 19:26:03	2014-06-15 19:26:03
621	1	133	A COMMENT	\N	2014-06-23 10:14:23	2014-06-23 10:14:23
622	43	133	A COMMENT	\N	2014-06-27 17:20:38	2014-06-27 17:20:38
623	28	133	A COMMENT	\N	2014-06-28 00:37:11	2014-06-28 00:37:11
624	2	133	A COMMENT	\N	2014-06-28 06:41:43	2014-06-28 06:41:43
625	43	134	A COMMENT	\N	2014-06-28 15:07:53	2014-06-28 15:07:53
626	21	134	A COMMENT	\N	2014-07-02 17:51:29	2014-07-02 17:51:29
627	27	134	A COMMENT	\N	2014-07-02 18:04:23	2014-07-02 18:04:23
628	10	134	A COMMENT	\N	2014-07-03 10:51:13	2014-07-03 10:51:13
629	14	134	A COMMENT	\N	2014-07-03 23:58:32	2014-07-03 23:58:32
630	45	134	A COMMENT	\N	2014-07-09 17:06:14	2014-07-09 17:06:14
631	27	134	A COMMENT	\N	2014-07-15 17:11:20	2014-07-15 17:11:20
632	11	134	A COMMENT	\N	2014-07-19 06:51:19	2014-07-19 06:51:19
633	47	134	A COMMENT	\N	2014-07-23 04:05:56	2014-07-23 04:05:56
634	11	137	A COMMENT	\N	2014-05-16 18:04:24	2014-05-16 18:04:24
635	43	137	A COMMENT	\N	2014-05-21 04:02:06	2014-05-21 04:02:06
636	2	137	A COMMENT	\N	2014-06-06 07:37:16	2014-06-06 07:37:16
637	2	137	A COMMENT	\N	2014-06-08 12:23:15	2014-06-08 12:23:15
638	8	137	A COMMENT	\N	2014-06-12 05:18:28	2014-06-12 05:18:28
639	2	137	A COMMENT	\N	2014-06-20 18:16:08	2014-06-20 18:16:08
640	28	137	A COMMENT	\N	2014-07-25 04:41:55	2014-07-25 04:41:55
641	43	138	A COMMENT	\N	2014-05-03 06:43:58	2014-05-03 06:43:58
642	10	139	A COMMENT	\N	2014-07-02 05:46:32	2014-07-02 05:46:32
643	1	140	A COMMENT	\N	2014-07-05 00:26:38	2014-07-05 00:26:38
644	21	143	A COMMENT	\N	2014-06-05 04:25:36	2014-06-05 04:25:36
645	4	143	A COMMENT	\N	2014-06-06 10:29:14	2014-06-06 10:29:14
646	3	143	A COMMENT	\N	2014-06-08 06:55:00	2014-06-08 06:55:00
647	14	143	A COMMENT	\N	2014-06-09 07:49:47	2014-06-09 07:49:47
648	21	143	A COMMENT	\N	2014-06-15 10:00:28	2014-06-15 10:00:28
649	32	143	A COMMENT	\N	2014-06-25 06:00:16	2014-06-25 06:00:16
650	8	143	A COMMENT	\N	2014-07-20 23:47:25	2014-07-20 23:47:25
651	14	143	A COMMENT	\N	2014-07-23 14:01:33	2014-07-23 14:01:33
652	39	143	A COMMENT	\N	2014-07-24 22:24:41	2014-07-24 22:24:41
653	47	143	A COMMENT	\N	2014-07-26 05:38:50	2014-07-26 05:38:50
654	3	144	A COMMENT	\N	2014-06-14 06:37:52	2014-06-14 06:37:52
655	27	144	A COMMENT	\N	2014-06-21 04:37:54	2014-06-21 04:37:54
656	11	144	A COMMENT	\N	2014-06-23 20:24:58	2014-06-23 20:24:58
657	27	144	A COMMENT	\N	2014-07-03 06:55:34	2014-07-03 06:55:34
658	45	144	A COMMENT	\N	2014-07-12 19:33:13	2014-07-12 19:33:13
659	4	144	A COMMENT	\N	2014-07-16 06:17:30	2014-07-16 06:17:30
660	10	144	A COMMENT	\N	2014-07-19 18:46:15	2014-07-19 18:46:15
661	32	144	A COMMENT	\N	2014-07-20 21:53:08	2014-07-20 21:53:08
662	3	146	A COMMENT	\N	2014-03-15 23:41:55	2014-03-15 23:41:55
663	3	146	A COMMENT	\N	2014-03-18 01:56:19	2014-03-18 01:56:19
664	47	146	A COMMENT	\N	2014-06-01 06:32:05	2014-06-01 06:32:05
665	27	146	A COMMENT	\N	2014-06-13 16:03:49	2014-06-13 16:03:49
666	47	146	A COMMENT	\N	2014-06-29 22:27:08	2014-06-29 22:27:08
667	2	147	A COMMENT	\N	2014-02-16 03:21:41	2014-02-16 03:21:41
668	14	147	A COMMENT	\N	2014-04-11 23:08:09	2014-04-11 23:08:09
669	8	147	A COMMENT	\N	2014-05-08 08:36:30	2014-05-08 08:36:30
670	32	147	A COMMENT	\N	2014-05-16 18:16:49	2014-05-16 18:16:49
671	11	147	A COMMENT	\N	2014-05-25 07:56:19	2014-05-25 07:56:19
672	8	147	A COMMENT	\N	2014-06-03 12:02:40	2014-06-03 12:02:40
673	32	147	A COMMENT	\N	2014-07-04 03:19:26	2014-07-04 03:19:26
674	10	147	A COMMENT	\N	2014-07-18 13:01:29	2014-07-18 13:01:29
675	1	147	A COMMENT	\N	2014-07-22 11:52:29	2014-07-22 11:52:29
676	30	148	A COMMENT	\N	2014-02-14 18:50:30	2014-02-14 18:50:30
677	37	148	A COMMENT	\N	2014-04-02 11:59:26	2014-04-02 11:59:26
678	28	148	A COMMENT	\N	2014-04-04 00:09:04	2014-04-04 00:09:04
679	45	148	A COMMENT	\N	2014-04-27 09:36:33	2014-04-27 09:36:33
680	30	148	A COMMENT	\N	2014-04-28 01:46:50	2014-04-28 01:46:50
681	32	148	A COMMENT	\N	2014-05-02 01:44:30	2014-05-02 01:44:30
682	21	148	A COMMENT	\N	2014-05-04 00:06:57	2014-05-04 00:06:57
683	14	148	A COMMENT	\N	2014-05-05 18:24:11	2014-05-05 18:24:11
684	37	148	A COMMENT	\N	2014-05-14 19:47:48	2014-05-14 19:47:48
685	14	148	A COMMENT	\N	2014-05-14 22:24:17	2014-05-14 22:24:17
686	39	148	A COMMENT	\N	2014-05-19 02:24:16	2014-05-19 02:24:16
687	4	148	A COMMENT	\N	2014-05-28 23:44:26	2014-05-28 23:44:26
688	14	148	A COMMENT	\N	2014-05-30 02:10:52	2014-05-30 02:10:52
689	30	148	A COMMENT	\N	2014-06-13 19:10:27	2014-06-13 19:10:27
690	11	148	A COMMENT	\N	2014-06-30 10:57:20	2014-06-30 10:57:20
691	14	149	A COMMENT	\N	2014-05-14 01:14:45	2014-05-14 01:14:45
692	32	149	A COMMENT	\N	2014-07-19 08:18:49	2014-07-19 08:18:49
693	47	150	A COMMENT	\N	2014-05-18 18:03:02	2014-05-18 18:03:02
694	3	151	A COMMENT	\N	2014-07-03 10:54:37	2014-07-03 10:54:37
695	47	151	A COMMENT	\N	2014-07-13 22:39:16	2014-07-13 22:39:16
696	45	151	A COMMENT	\N	2014-07-18 14:57:00	2014-07-18 14:57:00
697	14	151	A COMMENT	\N	2014-07-25 01:37:20	2014-07-25 01:37:20
698	47	152	A COMMENT	\N	2014-05-09 09:38:51	2014-05-09 09:38:51
699	48	154	A COMMENT	\N	2014-07-25 13:36:13	2014-07-25 13:36:13
700	8	155	A COMMENT	\N	2014-07-25 18:45:09	2014-07-25 18:45:09
701	39	155	A COMMENT	\N	2014-07-26 05:37:33	2014-07-26 05:37:33
702	48	156	A COMMENT	\N	2014-07-26 01:02:09	2014-07-26 01:02:09
703	21	156	A COMMENT	\N	2014-07-26 01:11:28	2014-07-26 01:11:28
704	27	156	A COMMENT	\N	2014-07-26 04:24:55	2014-07-26 04:24:55
705	47	156	A COMMENT	\N	2014-07-26 14:44:43	2014-07-26 14:44:43
706	3	157	A COMMENT	\N	2014-07-26 04:09:55	2014-07-26 04:09:55
707	32	157	A COMMENT	\N	2014-07-26 05:40:22	2014-07-26 05:40:22
708	32	157	A COMMENT	\N	2014-07-26 07:56:44	2014-07-26 07:56:44
709	2	157	A COMMENT	\N	2014-07-26 10:47:24	2014-07-26 10:47:24
710	2	157	A COMMENT	\N	2014-07-26 11:43:04	2014-07-26 11:43:04
711	43	157	A COMMENT	\N	2014-07-26 14:45:44	2014-07-26 14:45:44
712	21	157	A COMMENT	\N	2014-07-26 16:38:42	2014-07-26 16:38:42
713	21	157	A COMMENT	\N	2014-07-26 18:35:51	2014-07-26 18:35:51
714	48	158	A COMMENT	\N	2014-07-26 05:52:03	2014-07-26 05:52:03
715	11	159	A COMMENT	\N	2014-07-26 04:44:57	2014-07-26 04:44:57
716	10	159	A COMMENT	\N	2014-07-26 07:30:32	2014-07-26 07:30:32
717	28	159	A COMMENT	\N	2014-07-26 09:51:50	2014-07-26 09:51:50
718	39	159	A COMMENT	\N	2014-07-26 14:43:20	2014-07-26 14:43:20
719	43	159	A COMMENT	\N	2014-07-26 16:15:02	2014-07-26 16:15:02
720	48	161	A COMMENT	\N	2014-07-25 16:16:55	2014-07-25 16:16:55
721	3	161	A COMMENT	\N	2014-07-26 03:14:31	2014-07-26 03:14:31
722	28	161	A COMMENT	\N	2014-07-26 05:16:34	2014-07-26 05:16:34
723	11	161	A COMMENT	\N	2014-07-26 13:25:05	2014-07-26 13:25:05
724	2	161	A COMMENT	\N	2014-07-26 16:41:25	2014-07-26 16:41:25
725	39	161	A COMMENT	\N	2014-07-26 18:19:12	2014-07-26 18:19:12
726	3	162	A COMMENT	\N	2014-07-25 20:10:08	2014-07-25 20:10:08
727	47	162	A COMMENT	\N	2014-07-26 18:10:38	2014-07-26 18:10:38
728	21	162	A COMMENT	\N	2014-07-26 18:35:31	2014-07-26 18:35:31
729	48	163	A COMMENT	\N	2014-07-25 18:55:04	2014-07-25 18:55:04
730	48	164	A COMMENT	\N	2014-07-25 23:24:28	2014-07-25 23:24:28
731	11	164	A COMMENT	\N	2014-07-26 03:25:57	2014-07-26 03:25:57
732	14	164	A COMMENT	\N	2014-07-26 06:38:22	2014-07-26 06:38:22
733	45	164	A COMMENT	\N	2014-07-26 08:19:46	2014-07-26 08:19:46
734	32	164	A COMMENT	\N	2014-07-26 18:12:40	2014-07-26 18:12:40
735	48	165	A COMMENT	\N	2014-07-26 03:57:52	2014-07-26 03:57:52
736	30	165	A COMMENT	\N	2014-07-26 07:01:27	2014-07-26 07:01:27
737	30	165	A COMMENT	\N	2014-07-26 07:43:41	2014-07-26 07:43:41
738	32	165	A COMMENT	\N	2014-07-26 10:44:20	2014-07-26 10:44:20
739	2	165	A COMMENT	\N	2014-07-26 11:49:31	2014-07-26 11:49:31
740	1	165	A COMMENT	\N	2014-07-26 14:37:11	2014-07-26 14:37:11
741	39	165	A COMMENT	\N	2014-07-26 15:20:12	2014-07-26 15:20:12
742	4	165	A COMMENT	\N	2014-07-26 15:53:52	2014-07-26 15:53:52
743	48	166	A COMMENT	\N	2014-07-26 11:52:24	2014-07-26 11:52:24
744	48	167	A COMMENT	\N	2014-07-25 16:34:19	2014-07-25 16:34:19
745	27	167	A COMMENT	\N	2014-07-25 16:51:48	2014-07-25 16:51:48
746	32	167	A COMMENT	\N	2014-07-26 09:46:40	2014-07-26 09:46:40
747	10	167	A COMMENT	\N	2014-07-26 13:03:33	2014-07-26 13:03:33
748	10	168	A COMMENT	\N	2014-07-25 08:50:44	2014-07-25 08:50:44
749	28	168	A COMMENT	\N	2014-07-25 11:44:31	2014-07-25 11:44:31
750	37	168	A COMMENT	\N	2014-07-25 15:10:46	2014-07-25 15:10:46
751	1	168	A COMMENT	\N	2014-07-25 18:21:35	2014-07-25 18:21:35
752	4	168	A COMMENT	\N	2014-07-25 21:20:22	2014-07-25 21:20:22
753	45	168	A COMMENT	\N	2014-07-25 21:37:46	2014-07-25 21:37:46
754	37	168	A COMMENT	\N	2014-07-26 06:59:30	2014-07-26 06:59:30
755	8	168	A COMMENT	\N	2014-07-26 16:03:28	2014-07-26 16:03:28
756	43	169	A COMMENT	\N	2014-07-25 19:05:04	2014-07-25 19:05:04
757	27	169	A COMMENT	\N	2014-07-25 20:40:09	2014-07-25 20:40:09
758	14	169	A COMMENT	\N	2014-07-25 23:28:03	2014-07-25 23:28:03
759	10	169	A COMMENT	\N	2014-07-26 05:24:55	2014-07-26 05:24:55
760	11	169	A COMMENT	\N	2014-07-26 07:26:57	2014-07-26 07:26:57
761	21	169	A COMMENT	\N	2014-07-26 07:54:08	2014-07-26 07:54:08
762	21	169	A COMMENT	\N	2014-07-26 11:13:58	2014-07-26 11:13:58
763	8	169	A COMMENT	\N	2014-07-26 17:34:58	2014-07-26 17:34:58
764	8	169	A COMMENT	\N	2014-07-26 18:50:56	2014-07-26 18:50:56
765	48	170	A COMMENT	\N	2014-07-26 03:59:53	2014-07-26 03:59:53
766	48	171	A COMMENT	\N	2014-07-26 04:34:58	2014-07-26 04:34:58
767	2	171	A COMMENT	\N	2014-07-26 06:18:38	2014-07-26 06:18:38
768	39	171	A COMMENT	\N	2014-07-26 07:37:59	2014-07-26 07:37:59
769	37	171	A COMMENT	\N	2014-07-26 08:50:30	2014-07-26 08:50:30
770	2	171	A COMMENT	\N	2014-07-26 09:01:55	2014-07-26 09:01:55
771	2	171	A COMMENT	\N	2014-07-26 12:14:17	2014-07-26 12:14:17
772	21	171	A COMMENT	\N	2014-07-26 13:34:43	2014-07-26 13:34:43
773	45	172	A COMMENT	\N	2014-07-25 15:00:18	2014-07-25 15:00:18
774	8	172	A COMMENT	\N	2014-07-25 18:14:15	2014-07-25 18:14:15
775	27	172	A COMMENT	\N	2014-07-26 03:33:35	2014-07-26 03:33:35
776	30	173	A COMMENT	\N	2014-07-25 12:44:38	2014-07-25 12:44:38
777	37	173	A COMMENT	\N	2014-07-25 13:12:45	2014-07-25 13:12:45
778	39	173	A COMMENT	\N	2014-07-25 15:40:13	2014-07-25 15:40:13
779	39	173	A COMMENT	\N	2014-07-25 19:30:40	2014-07-25 19:30:40
780	10	173	A COMMENT	\N	2014-07-25 21:58:28	2014-07-25 21:58:28
781	10	173	A COMMENT	\N	2014-07-25 23:58:25	2014-07-25 23:58:25
782	21	173	A COMMENT	\N	2014-07-26 02:23:49	2014-07-26 02:23:49
783	11	173	A COMMENT	\N	2014-07-26 04:50:38	2014-07-26 04:50:38
784	3	173	A COMMENT	\N	2014-07-26 05:10:40	2014-07-26 05:10:40
785	37	173	A COMMENT	\N	2014-07-26 06:54:10	2014-07-26 06:54:10
786	11	173	A COMMENT	\N	2014-07-26 07:26:31	2014-07-26 07:26:31
787	14	173	A COMMENT	\N	2014-07-26 10:01:30	2014-07-26 10:01:30
788	10	173	A COMMENT	\N	2014-07-26 12:19:22	2014-07-26 12:19:22
789	10	175	A COMMENT	\N	2014-07-26 00:02:04	2014-07-26 00:02:04
790	1	175	A COMMENT	\N	2014-07-26 05:46:03	2014-07-26 05:46:03
791	48	176	A COMMENT	\N	2014-07-25 08:41:22	2014-07-25 08:41:22
792	25	177	A COMMENT	\N	2014-06-19 01:07:46	2014-06-19 01:07:46
793	30	178	A COMMENT	\N	2014-07-04 03:51:09	2014-07-04 03:51:09
794	11	178	A COMMENT	\N	2014-07-05 01:58:41	2014-07-05 01:58:41
795	21	178	A COMMENT	\N	2014-07-05 07:54:33	2014-07-05 07:54:33
796	28	178	A COMMENT	\N	2014-07-08 07:40:35	2014-07-08 07:40:35
797	6	179	A COMMENT	\N	2014-03-03 22:23:24	2014-03-03 22:23:24
798	10	180	A COMMENT	\N	2014-06-03 08:15:44	2014-06-03 08:15:44
799	27	180	A COMMENT	\N	2014-06-20 09:36:50	2014-06-20 09:36:50
800	32	180	A COMMENT	\N	2014-07-03 20:00:54	2014-07-03 20:00:54
801	21	180	A COMMENT	\N	2014-07-14 19:31:47	2014-07-14 19:31:47
802	1	181	A COMMENT	\N	2014-04-18 01:20:02	2014-04-18 01:20:02
803	11	181	A COMMENT	\N	2014-04-18 01:32:13	2014-04-18 01:32:13
804	21	181	A COMMENT	\N	2014-06-12 13:50:26	2014-06-12 13:50:26
805	37	181	A COMMENT	\N	2014-07-18 13:09:06	2014-07-18 13:09:06
806	32	181	A COMMENT	\N	2014-07-23 16:05:34	2014-07-23 16:05:34
807	1	182	A COMMENT	\N	2014-07-14 05:50:22	2014-07-14 05:50:22
808	30	183	A COMMENT	\N	2014-04-12 11:40:45	2014-04-12 11:40:45
809	37	183	A COMMENT	\N	2014-04-27 15:47:55	2014-04-27 15:47:55
810	39	183	A COMMENT	\N	2014-05-03 19:41:43	2014-05-03 19:41:43
811	4	183	A COMMENT	\N	2014-05-05 07:50:46	2014-05-05 07:50:46
812	45	183	A COMMENT	\N	2014-05-08 23:21:17	2014-05-08 23:21:17
813	1	183	A COMMENT	\N	2014-05-23 15:03:05	2014-05-23 15:03:05
814	2	183	A COMMENT	\N	2014-05-27 05:21:11	2014-05-27 05:21:11
815	11	183	A COMMENT	\N	2014-06-12 14:48:16	2014-06-12 14:48:16
816	43	183	A COMMENT	\N	2014-06-20 22:44:56	2014-06-20 22:44:56
817	47	183	A COMMENT	\N	2014-06-29 00:51:10	2014-06-29 00:51:10
818	3	183	A COMMENT	\N	2014-07-13 18:50:36	2014-07-13 18:50:36
819	10	183	A COMMENT	\N	2014-07-24 23:57:05	2014-07-24 23:57:05
820	6	184	A COMMENT	\N	2014-05-21 06:30:31	2014-05-21 06:30:31
821	22	185	A COMMENT	\N	2014-03-14 20:58:13	2014-03-14 20:58:13
822	43	185	A COMMENT	\N	2014-03-23 04:37:19	2014-03-23 04:37:19
823	10	185	A COMMENT	\N	2014-05-04 01:28:49	2014-05-04 01:28:49
824	8	185	A COMMENT	\N	2014-05-21 21:25:04	2014-05-21 21:25:04
825	2	185	A COMMENT	\N	2014-05-26 19:56:33	2014-05-26 19:56:33
826	14	185	A COMMENT	\N	2014-06-19 04:35:53	2014-06-19 04:35:53
827	21	185	A COMMENT	\N	2014-07-06 22:35:17	2014-07-06 22:35:17
828	45	185	A COMMENT	\N	2014-07-14 22:55:47	2014-07-14 22:55:47
829	47	185	A COMMENT	\N	2014-07-18 18:52:12	2014-07-18 18:52:12
830	21	186	A COMMENT	\N	2014-03-05 10:25:25	2014-03-05 10:25:25
831	37	186	A COMMENT	\N	2014-03-07 17:39:00	2014-03-07 17:39:00
832	3	186	A COMMENT	\N	2014-03-30 00:51:27	2014-03-30 00:51:27
833	28	186	A COMMENT	\N	2014-04-04 02:03:00	2014-04-04 02:03:00
834	28	186	A COMMENT	\N	2014-04-12 21:04:15	2014-04-12 21:04:15
835	14	186	A COMMENT	\N	2014-05-30 10:29:58	2014-05-30 10:29:58
836	39	186	A COMMENT	\N	2014-07-25 15:15:56	2014-07-25 15:15:56
837	14	188	A COMMENT	\N	2014-07-06 05:18:29	2014-07-06 05:18:29
838	37	188	A COMMENT	\N	2014-07-10 14:16:53	2014-07-10 14:16:53
839	22	189	A COMMENT	\N	2014-05-25 08:17:40	2014-05-25 08:17:40
840	16	191	A COMMENT	\N	2014-06-23 04:17:35	2014-06-23 04:17:35
841	11	191	A COMMENT	\N	2014-06-28 05:08:13	2014-06-28 05:08:13
842	8	191	A COMMENT	\N	2014-07-04 17:05:15	2014-07-04 17:05:15
843	10	191	A COMMENT	\N	2014-07-09 04:18:27	2014-07-09 04:18:27
844	37	191	A COMMENT	\N	2014-07-13 12:30:20	2014-07-13 12:30:20
845	30	192	A COMMENT	\N	2014-06-03 22:12:39	2014-06-03 22:12:39
846	21	192	A COMMENT	\N	2014-06-05 03:34:20	2014-06-05 03:34:20
847	14	192	A COMMENT	\N	2014-06-08 21:58:37	2014-06-08 21:58:37
848	39	192	A COMMENT	\N	2014-06-09 10:20:44	2014-06-09 10:20:44
849	3	192	A COMMENT	\N	2014-06-18 08:20:35	2014-06-18 08:20:35
850	39	194	A COMMENT	\N	2014-06-11 22:48:34	2014-06-11 22:48:34
851	10	194	A COMMENT	\N	2014-06-18 04:43:46	2014-06-18 04:43:46
852	43	194	A COMMENT	\N	2014-07-11 04:00:00	2014-07-11 04:00:00
853	37	194	A COMMENT	\N	2014-07-11 14:51:07	2014-07-11 14:51:07
854	27	194	A COMMENT	\N	2014-07-21 16:03:23	2014-07-21 16:03:23
855	16	195	A COMMENT	\N	2014-06-27 02:48:05	2014-06-27 02:48:05
856	45	195	A COMMENT	\N	2014-07-03 16:28:33	2014-07-03 16:28:33
857	45	195	A COMMENT	\N	2014-07-06 21:06:29	2014-07-06 21:06:29
858	21	195	A COMMENT	\N	2014-07-10 20:31:13	2014-07-10 20:31:13
859	8	195	A COMMENT	\N	2014-07-11 17:14:09	2014-07-11 17:14:09
860	10	195	A COMMENT	\N	2014-07-13 02:06:48	2014-07-13 02:06:48
861	28	195	A COMMENT	\N	2014-07-19 22:39:56	2014-07-19 22:39:56
862	11	195	A COMMENT	\N	2014-07-20 19:50:56	2014-07-20 19:50:56
863	37	196	A COMMENT	\N	2014-07-02 22:59:37	2014-07-02 22:59:37
864	30	196	A COMMENT	\N	2014-07-05 01:14:19	2014-07-05 01:14:19
865	10	196	A COMMENT	\N	2014-07-07 15:52:30	2014-07-07 15:52:30
866	4	196	A COMMENT	\N	2014-07-26 04:51:08	2014-07-26 04:51:08
867	19	198	A COMMENT	\N	2014-04-21 05:58:35	2014-04-21 05:58:35
868	11	198	A COMMENT	\N	2014-06-02 19:56:48	2014-06-02 19:56:48
869	10	198	A COMMENT	\N	2014-06-05 04:59:32	2014-06-05 04:59:32
870	1	198	A COMMENT	\N	2014-06-19 21:03:37	2014-06-19 21:03:37
871	1	198	A COMMENT	\N	2014-06-28 12:16:58	2014-06-28 12:16:58
872	43	198	A COMMENT	\N	2014-07-19 12:03:19	2014-07-19 12:03:19
873	19	199	A COMMENT	\N	2014-04-23 11:23:37	2014-04-23 11:23:37
874	39	199	A COMMENT	\N	2014-05-05 18:26:37	2014-05-05 18:26:37
875	2	199	A COMMENT	\N	2014-05-12 19:25:40	2014-05-12 19:25:40
876	27	199	A COMMENT	\N	2014-05-19 16:37:01	2014-05-19 16:37:01
877	11	199	A COMMENT	\N	2014-05-26 02:48:18	2014-05-26 02:48:18
878	21	199	A COMMENT	\N	2014-06-10 05:39:11	2014-06-10 05:39:11
879	14	199	A COMMENT	\N	2014-06-22 04:29:13	2014-06-22 04:29:13
880	21	199	A COMMENT	\N	2014-06-30 04:43:07	2014-06-30 04:43:07
881	39	199	A COMMENT	\N	2014-07-22 15:41:07	2014-07-22 15:41:07
882	19	200	A COMMENT	\N	2014-06-19 00:44:03	2014-06-19 00:44:03
883	32	201	A COMMENT	\N	2014-06-06 19:51:29	2014-06-06 19:51:29
884	4	201	A COMMENT	\N	2014-06-13 23:51:05	2014-06-13 23:51:05
885	32	201	A COMMENT	\N	2014-06-14 10:53:29	2014-06-14 10:53:29
886	39	201	A COMMENT	\N	2014-06-17 21:20:58	2014-06-17 21:20:58
887	37	201	A COMMENT	\N	2014-07-14 18:38:30	2014-07-14 18:38:30
888	21	201	A COMMENT	\N	2014-07-17 02:45:29	2014-07-17 02:45:29
889	19	202	A COMMENT	\N	2013-12-17 02:15:33	2013-12-17 02:15:33
890	8	202	A COMMENT	\N	2014-01-26 07:44:30	2014-01-26 07:44:30
891	1	202	A COMMENT	\N	2014-05-18 13:20:30	2014-05-18 13:20:30
892	19	203	A COMMENT	\N	2014-02-15 10:04:28	2014-02-15 10:04:28
893	11	203	A COMMENT	\N	2014-02-16 21:43:10	2014-02-16 21:43:10
894	2	203	A COMMENT	\N	2014-03-29 02:25:01	2014-03-29 02:25:01
895	32	203	A COMMENT	\N	2014-04-03 22:10:58	2014-04-03 22:10:58
896	32	203	A COMMENT	\N	2014-04-24 10:26:52	2014-04-24 10:26:52
897	3	203	A COMMENT	\N	2014-06-28 21:15:14	2014-06-28 21:15:14
898	19	204	A COMMENT	\N	2014-03-22 14:20:17	2014-03-22 14:20:17
899	10	204	A COMMENT	\N	2014-04-29 19:53:04	2014-04-29 19:53:04
900	14	205	A COMMENT	\N	2013-12-27 16:38:30	2013-12-27 16:38:30
901	32	205	A COMMENT	\N	2014-01-13 08:01:40	2014-01-13 08:01:40
902	4	205	A COMMENT	\N	2014-03-07 14:45:58	2014-03-07 14:45:58
903	27	205	A COMMENT	\N	2014-03-31 13:53:46	2014-03-31 13:53:46
904	14	205	A COMMENT	\N	2014-06-08 00:02:36	2014-06-08 00:02:36
905	32	206	A COMMENT	\N	2014-04-26 03:47:38	2014-04-26 03:47:38
906	32	206	A COMMENT	\N	2014-05-02 08:06:45	2014-05-02 08:06:45
907	45	206	A COMMENT	\N	2014-05-12 03:40:29	2014-05-12 03:40:29
908	1	206	A COMMENT	\N	2014-05-18 05:51:42	2014-05-18 05:51:42
909	37	206	A COMMENT	\N	2014-05-19 07:18:33	2014-05-19 07:18:33
910	30	206	A COMMENT	\N	2014-05-20 04:11:10	2014-05-20 04:11:10
911	47	206	A COMMENT	\N	2014-05-24 15:49:05	2014-05-24 15:49:05
912	1	206	A COMMENT	\N	2014-05-25 08:15:16	2014-05-25 08:15:16
913	8	206	A COMMENT	\N	2014-05-25 19:54:16	2014-05-25 19:54:16
914	47	206	A COMMENT	\N	2014-05-27 14:44:28	2014-05-27 14:44:28
915	43	206	A COMMENT	\N	2014-06-01 00:02:40	2014-06-01 00:02:40
916	45	206	A COMMENT	\N	2014-06-06 22:02:42	2014-06-06 22:02:42
917	4	206	A COMMENT	\N	2014-06-20 09:20:27	2014-06-20 09:20:27
918	14	206	A COMMENT	\N	2014-06-22 04:52:25	2014-06-22 04:52:25
919	21	206	A COMMENT	\N	2014-07-02 09:49:40	2014-07-02 09:49:40
920	3	206	A COMMENT	\N	2014-07-16 20:36:27	2014-07-16 20:36:27
921	30	206	A COMMENT	\N	2014-07-20 16:34:46	2014-07-20 16:34:46
922	21	206	A COMMENT	\N	2014-07-26 06:58:41	2014-07-26 06:58:41
923	43	207	A COMMENT	\N	2014-01-23 13:28:03	2014-01-23 13:28:03
924	28	207	A COMMENT	\N	2014-01-31 06:56:35	2014-01-31 06:56:35
925	2	207	A COMMENT	\N	2014-02-05 11:41:29	2014-02-05 11:41:29
926	8	207	A COMMENT	\N	2014-02-07 09:25:47	2014-02-07 09:25:47
927	28	207	A COMMENT	\N	2014-02-13 21:01:46	2014-02-13 21:01:46
928	21	207	A COMMENT	\N	2014-02-28 23:15:35	2014-02-28 23:15:35
929	3	207	A COMMENT	\N	2014-03-08 05:27:57	2014-03-08 05:27:57
930	32	207	A COMMENT	\N	2014-03-15 22:41:35	2014-03-15 22:41:35
931	8	207	A COMMENT	\N	2014-04-05 14:48:59	2014-04-05 14:48:59
932	47	207	A COMMENT	\N	2014-05-09 03:55:51	2014-05-09 03:55:51
933	39	207	A COMMENT	\N	2014-05-11 10:54:07	2014-05-11 10:54:07
934	4	207	A COMMENT	\N	2014-05-23 14:53:59	2014-05-23 14:53:59
935	45	207	A COMMENT	\N	2014-05-24 15:17:40	2014-05-24 15:17:40
936	37	207	A COMMENT	\N	2014-05-25 05:34:36	2014-05-25 05:34:36
937	39	207	A COMMENT	\N	2014-06-11 20:56:11	2014-06-11 20:56:11
938	30	208	A COMMENT	\N	2014-03-20 11:51:11	2014-03-20 11:51:11
939	2	208	A COMMENT	\N	2014-04-05 15:00:33	2014-04-05 15:00:33
940	14	208	A COMMENT	\N	2014-07-23 10:37:55	2014-07-23 10:37:55
941	39	209	A COMMENT	\N	2014-03-19 11:05:24	2014-03-19 11:05:24
942	8	209	A COMMENT	\N	2014-05-19 05:11:34	2014-05-19 05:11:34
943	37	209	A COMMENT	\N	2014-06-22 06:44:39	2014-06-22 06:44:39
944	43	209	A COMMENT	\N	2014-07-06 15:33:39	2014-07-06 15:33:39
945	37	211	A COMMENT	\N	2014-04-09 18:07:26	2014-04-09 18:07:26
946	2	211	A COMMENT	\N	2014-05-13 00:04:37	2014-05-13 00:04:37
947	39	211	A COMMENT	\N	2014-06-05 20:32:04	2014-06-05 20:32:04
948	47	213	A COMMENT	\N	2014-05-08 23:06:05	2014-05-08 23:06:05
949	37	213	A COMMENT	\N	2014-05-19 11:15:33	2014-05-19 11:15:33
950	11	214	A COMMENT	\N	2014-07-02 00:25:00	2014-07-02 00:25:00
951	8	215	A COMMENT	\N	2014-01-11 22:51:24	2014-01-11 22:51:24
952	3	215	A COMMENT	\N	2014-03-18 12:06:27	2014-03-18 12:06:27
953	47	215	A COMMENT	\N	2014-04-06 13:39:19	2014-04-06 13:39:19
954	28	215	A COMMENT	\N	2014-04-22 07:34:00	2014-04-22 07:34:00
955	2	215	A COMMENT	\N	2014-06-02 01:49:08	2014-06-02 01:49:08
956	27	216	A COMMENT	\N	2014-01-17 15:28:41	2014-01-17 15:28:41
957	11	216	A COMMENT	\N	2014-03-23 21:41:41	2014-03-23 21:41:41
958	45	216	A COMMENT	\N	2014-07-19 21:24:22	2014-07-19 21:24:22
959	8	218	A COMMENT	\N	2014-03-14 11:24:38	2014-03-14 11:24:38
960	43	218	A COMMENT	\N	2014-03-22 22:03:50	2014-03-22 22:03:50
961	8	218	A COMMENT	\N	2014-04-08 10:55:07	2014-04-08 10:55:07
962	39	218	A COMMENT	\N	2014-04-29 11:29:46	2014-04-29 11:29:46
963	32	218	A COMMENT	\N	2014-05-03 12:14:54	2014-05-03 12:14:54
964	39	218	A COMMENT	\N	2014-05-09 20:05:06	2014-05-09 20:05:06
965	1	218	A COMMENT	\N	2014-05-26 08:21:49	2014-05-26 08:21:49
966	37	218	A COMMENT	\N	2014-07-05 15:50:06	2014-07-05 15:50:06
967	2	218	A COMMENT	\N	2014-07-14 16:12:04	2014-07-14 16:12:04
968	3	218	A COMMENT	\N	2014-07-20 14:55:48	2014-07-20 14:55:48
969	2	220	A COMMENT	\N	2014-05-22 05:48:53	2014-05-22 05:48:53
970	47	220	A COMMENT	\N	2014-05-22 07:59:35	2014-05-22 07:59:35
971	4	220	A COMMENT	\N	2014-07-03 13:48:19	2014-07-03 13:48:19
972	21	220	A COMMENT	\N	2014-07-11 00:25:03	2014-07-11 00:25:03
973	11	220	A COMMENT	\N	2014-07-11 18:45:03	2014-07-11 18:45:03
974	32	221	A COMMENT	\N	2014-01-08 12:23:41	2014-01-08 12:23:41
975	27	221	A COMMENT	\N	2014-03-04 14:31:22	2014-03-04 14:31:22
976	30	221	A COMMENT	\N	2014-03-07 14:12:11	2014-03-07 14:12:11
977	45	221	A COMMENT	\N	2014-04-06 02:23:18	2014-04-06 02:23:18
978	43	221	A COMMENT	\N	2014-06-29 14:23:35	2014-06-29 14:23:35
979	19	222	A COMMENT	\N	2014-03-29 13:11:09	2014-03-29 13:11:09
980	21	222	A COMMENT	\N	2014-04-05 05:17:07	2014-04-05 05:17:07
981	11	222	A COMMENT	\N	2014-04-17 02:53:40	2014-04-17 02:53:40
982	32	222	A COMMENT	\N	2014-05-03 21:58:38	2014-05-03 21:58:38
983	8	222	A COMMENT	\N	2014-05-15 05:22:39	2014-05-15 05:22:39
984	43	222	A COMMENT	\N	2014-05-18 18:26:56	2014-05-18 18:26:56
985	32	222	A COMMENT	\N	2014-06-14 02:07:12	2014-06-14 02:07:12
986	1	222	A COMMENT	\N	2014-06-16 17:01:37	2014-06-16 17:01:37
987	39	222	A COMMENT	\N	2014-06-19 09:28:28	2014-06-19 09:28:28
988	28	222	A COMMENT	\N	2014-06-25 11:37:00	2014-06-25 11:37:00
989	14	222	A COMMENT	\N	2014-07-09 13:31:46	2014-07-09 13:31:46
990	8	223	A COMMENT	\N	2014-03-18 05:19:25	2014-03-18 05:19:25
991	2	223	A COMMENT	\N	2014-03-20 11:03:19	2014-03-20 11:03:19
992	37	223	A COMMENT	\N	2014-03-22 22:17:51	2014-03-22 22:17:51
993	39	223	A COMMENT	\N	2014-03-23 08:33:24	2014-03-23 08:33:24
994	4	223	A COMMENT	\N	2014-04-05 22:53:36	2014-04-05 22:53:36
995	32	223	A COMMENT	\N	2014-04-08 16:56:50	2014-04-08 16:56:50
996	14	223	A COMMENT	\N	2014-04-09 15:30:49	2014-04-09 15:30:49
997	45	223	A COMMENT	\N	2014-04-11 23:46:39	2014-04-11 23:46:39
998	30	223	A COMMENT	\N	2014-04-12 16:08:51	2014-04-12 16:08:51
999	37	223	A COMMENT	\N	2014-04-18 14:12:23	2014-04-18 14:12:23
1000	37	223	A COMMENT	\N	2014-04-24 01:44:52	2014-04-24 01:44:52
1001	27	223	A COMMENT	\N	2014-04-27 09:21:50	2014-04-27 09:21:50
1002	3	223	A COMMENT	\N	2014-05-17 07:43:45	2014-05-17 07:43:45
1003	32	223	A COMMENT	\N	2014-05-21 21:36:38	2014-05-21 21:36:38
1004	1	223	A COMMENT	\N	2014-05-28 16:05:58	2014-05-28 16:05:58
1005	8	223	A COMMENT	\N	2014-06-10 23:42:49	2014-06-10 23:42:49
1006	11	223	A COMMENT	\N	2014-06-11 06:18:01	2014-06-11 06:18:01
1007	19	224	A COMMENT	\N	2013-12-07 00:06:50	2013-12-07 00:06:50
1008	2	224	A COMMENT	\N	2014-04-15 14:47:24	2014-04-15 14:47:24
1009	14	225	A COMMENT	\N	2014-01-11 21:05:43	2014-01-11 21:05:43
1010	21	225	A COMMENT	\N	2014-01-23 13:20:14	2014-01-23 13:20:14
1011	27	225	A COMMENT	\N	2014-02-08 20:51:46	2014-02-08 20:51:46
1012	30	225	A COMMENT	\N	2014-04-23 19:29:32	2014-04-23 19:29:32
1013	8	225	A COMMENT	\N	2014-05-20 04:25:15	2014-05-20 04:25:15
1014	14	225	A COMMENT	\N	2014-06-21 00:36:42	2014-06-21 00:36:42
1015	1	225	A COMMENT	\N	2014-07-16 20:07:51	2014-07-16 20:07:51
1016	32	225	A COMMENT	\N	2014-07-24 11:58:41	2014-07-24 11:58:41
1017	19	226	A COMMENT	\N	2014-02-06 15:36:12	2014-02-06 15:36:12
1018	45	226	A COMMENT	\N	2014-02-18 02:33:54	2014-02-18 02:33:54
1019	3	226	A COMMENT	\N	2014-04-13 23:33:33	2014-04-13 23:33:33
1020	45	226	A COMMENT	\N	2014-06-05 07:52:25	2014-06-05 07:52:25
1021	19	228	A COMMENT	\N	2014-04-17 09:32:15	2014-04-17 09:32:15
1022	45	228	A COMMENT	\N	2014-04-18 07:29:14	2014-04-18 07:29:14
1023	10	228	A COMMENT	\N	2014-04-23 00:59:24	2014-04-23 00:59:24
1024	47	228	A COMMENT	\N	2014-05-13 01:01:46	2014-05-13 01:01:46
1025	14	228	A COMMENT	\N	2014-06-09 11:11:01	2014-06-09 11:11:01
1026	2	228	A COMMENT	\N	2014-06-22 09:23:43	2014-06-22 09:23:43
1027	11	230	A COMMENT	\N	2014-02-23 16:04:56	2014-02-23 16:04:56
1028	47	230	A COMMENT	\N	2014-03-15 17:13:59	2014-03-15 17:13:59
1029	1	230	A COMMENT	\N	2014-03-15 21:20:07	2014-03-15 21:20:07
1030	1	230	A COMMENT	\N	2014-03-28 01:03:27	2014-03-28 01:03:27
1031	3	230	A COMMENT	\N	2014-04-02 22:10:37	2014-04-02 22:10:37
1032	28	230	A COMMENT	\N	2014-04-14 06:10:10	2014-04-14 06:10:10
1033	27	230	A COMMENT	\N	2014-04-24 10:31:52	2014-04-24 10:31:52
1034	30	230	A COMMENT	\N	2014-04-28 05:01:53	2014-04-28 05:01:53
1035	14	230	A COMMENT	\N	2014-05-10 03:41:07	2014-05-10 03:41:07
1036	21	230	A COMMENT	\N	2014-05-24 13:19:38	2014-05-24 13:19:38
1037	11	230	A COMMENT	\N	2014-05-28 19:37:17	2014-05-28 19:37:17
1038	39	230	A COMMENT	\N	2014-05-31 19:20:34	2014-05-31 19:20:34
1039	39	230	A COMMENT	\N	2014-06-04 00:36:59	2014-06-04 00:36:59
1040	37	230	A COMMENT	\N	2014-06-11 05:10:16	2014-06-11 05:10:16
1041	37	230	A COMMENT	\N	2014-06-18 07:26:04	2014-06-18 07:26:04
1042	14	230	A COMMENT	\N	2014-07-04 15:58:24	2014-07-04 15:58:24
1043	32	230	A COMMENT	\N	2014-07-07 14:35:42	2014-07-07 14:35:42
1044	8	230	A COMMENT	\N	2014-07-20 16:32:41	2014-07-20 16:32:41
1045	30	231	A COMMENT	\N	2014-02-26 02:20:23	2014-02-26 02:20:23
1046	30	233	A COMMENT	\N	2014-04-06 21:17:25	2014-04-06 21:17:25
1047	43	233	A COMMENT	\N	2014-04-07 18:58:49	2014-04-07 18:58:49
1048	10	233	A COMMENT	\N	2014-05-27 01:13:02	2014-05-27 01:13:02
1049	27	233	A COMMENT	\N	2014-05-28 04:45:27	2014-05-28 04:45:27
1050	2	233	A COMMENT	\N	2014-06-14 21:13:26	2014-06-14 21:13:26
1051	28	233	A COMMENT	\N	2014-06-14 23:05:04	2014-06-14 23:05:04
1052	3	233	A COMMENT	\N	2014-06-30 05:44:50	2014-06-30 05:44:50
1053	19	234	A COMMENT	\N	2014-04-19 10:18:42	2014-04-19 10:18:42
1054	43	234	A COMMENT	\N	2014-04-29 22:55:42	2014-04-29 22:55:42
1055	8	234	A COMMENT	\N	2014-07-14 17:42:37	2014-07-14 17:42:37
1056	19	235	A COMMENT	\N	2014-06-24 15:23:30	2014-06-24 15:23:30
1057	21	235	A COMMENT	\N	2014-06-30 22:24:01	2014-06-30 22:24:01
1058	39	235	A COMMENT	\N	2014-07-02 09:47:20	2014-07-02 09:47:20
1059	27	235	A COMMENT	\N	2014-07-04 07:41:10	2014-07-04 07:41:10
1060	3	235	A COMMENT	\N	2014-07-09 21:10:51	2014-07-09 21:10:51
1061	2	236	A COMMENT	\N	2014-02-02 05:25:54	2014-02-02 05:25:54
1062	1	236	A COMMENT	\N	2014-02-10 16:24:28	2014-02-10 16:24:28
1063	4	236	A COMMENT	\N	2014-04-21 05:07:30	2014-04-21 05:07:30
1064	4	236	A COMMENT	\N	2014-05-16 04:34:03	2014-05-16 04:34:03
1065	30	236	A COMMENT	\N	2014-07-04 04:52:29	2014-07-04 04:52:29
1066	45	236	A COMMENT	\N	2014-07-05 13:07:50	2014-07-05 13:07:50
1067	11	236	A COMMENT	\N	2014-07-24 20:10:02	2014-07-24 20:10:02
1068	8	237	A COMMENT	\N	2014-03-07 05:43:16	2014-03-07 05:43:16
1069	39	237	A COMMENT	\N	2014-03-07 20:45:11	2014-03-07 20:45:11
1070	47	237	A COMMENT	\N	2014-06-28 13:06:33	2014-06-28 13:06:33
1071	19	238	A COMMENT	\N	2014-02-26 17:36:52	2014-02-26 17:36:52
1072	47	238	A COMMENT	\N	2014-02-28 16:56:45	2014-02-28 16:56:45
1073	10	238	A COMMENT	\N	2014-04-01 14:38:47	2014-04-01 14:38:47
1074	30	238	A COMMENT	\N	2014-04-06 13:26:23	2014-04-06 13:26:23
1075	39	238	A COMMENT	\N	2014-05-05 04:21:27	2014-05-05 04:21:27
1076	10	238	A COMMENT	\N	2014-05-30 20:37:48	2014-05-30 20:37:48
1077	43	238	A COMMENT	\N	2014-06-17 22:01:34	2014-06-17 22:01:34
1078	2	238	A COMMENT	\N	2014-06-21 20:08:11	2014-06-21 20:08:11
1079	19	240	A COMMENT	\N	2014-05-07 03:45:53	2014-05-07 03:45:53
1080	14	240	A COMMENT	\N	2014-05-08 15:02:40	2014-05-08 15:02:40
1081	32	240	A COMMENT	\N	2014-05-08 23:21:16	2014-05-08 23:21:16
1082	39	240	A COMMENT	\N	2014-05-16 11:53:21	2014-05-16 11:53:21
1083	2	240	A COMMENT	\N	2014-05-20 03:49:13	2014-05-20 03:49:13
1084	27	240	A COMMENT	\N	2014-05-28 08:53:04	2014-05-28 08:53:04
1085	37	240	A COMMENT	\N	2014-05-31 18:43:54	2014-05-31 18:43:54
1086	4	240	A COMMENT	\N	2014-06-02 16:10:28	2014-06-02 16:10:28
1087	1	240	A COMMENT	\N	2014-06-04 02:53:00	2014-06-04 02:53:00
1088	3	240	A COMMENT	\N	2014-06-30 05:14:12	2014-06-30 05:14:12
1089	37	240	A COMMENT	\N	2014-06-30 16:46:47	2014-06-30 16:46:47
1090	47	240	A COMMENT	\N	2014-07-03 15:31:46	2014-07-03 15:31:46
1091	32	240	A COMMENT	\N	2014-07-05 23:09:50	2014-07-05 23:09:50
1092	3	240	A COMMENT	\N	2014-07-08 12:14:42	2014-07-08 12:14:42
1093	8	240	A COMMENT	\N	2014-07-09 18:46:35	2014-07-09 18:46:35
1094	28	240	A COMMENT	\N	2014-07-11 10:56:20	2014-07-11 10:56:20
1095	4	240	A COMMENT	\N	2014-07-16 13:36:43	2014-07-16 13:36:43
1096	47	240	A COMMENT	\N	2014-07-16 20:04:02	2014-07-16 20:04:02
1097	45	240	A COMMENT	\N	2014-07-18 03:47:58	2014-07-18 03:47:58
1098	4	240	A COMMENT	\N	2014-07-21 05:14:38	2014-07-21 05:14:38
1099	43	241	A COMMENT	\N	2014-06-20 22:36:21	2014-06-20 22:36:21
1100	45	241	A COMMENT	\N	2014-07-06 19:47:40	2014-07-06 19:47:40
1101	2	241	A COMMENT	\N	2014-07-15 05:15:02	2014-07-15 05:15:02
1102	1	241	A COMMENT	\N	2014-07-16 10:28:26	2014-07-16 10:28:26
1103	19	242	A COMMENT	\N	2013-12-02 00:31:01	2013-12-02 00:31:01
1104	45	243	A COMMENT	\N	2013-12-25 12:38:10	2013-12-25 12:38:10
1105	1	243	A COMMENT	\N	2014-02-15 20:56:18	2014-02-15 20:56:18
1106	14	243	A COMMENT	\N	2014-02-16 23:02:41	2014-02-16 23:02:41
1107	30	243	A COMMENT	\N	2014-03-02 04:00:33	2014-03-02 04:00:33
1108	14	243	A COMMENT	\N	2014-04-01 21:44:17	2014-04-01 21:44:17
1109	37	243	A COMMENT	\N	2014-04-05 10:49:08	2014-04-05 10:49:08
1110	28	243	A COMMENT	\N	2014-05-01 16:29:04	2014-05-01 16:29:04
1111	39	243	A COMMENT	\N	2014-05-10 22:23:57	2014-05-10 22:23:57
1112	39	243	A COMMENT	\N	2014-05-11 03:44:00	2014-05-11 03:44:00
1113	2	243	A COMMENT	\N	2014-05-15 13:31:23	2014-05-15 13:31:23
1114	37	243	A COMMENT	\N	2014-05-17 01:56:10	2014-05-17 01:56:10
1115	2	243	A COMMENT	\N	2014-05-18 13:02:19	2014-05-18 13:02:19
1116	8	243	A COMMENT	\N	2014-05-22 17:30:02	2014-05-22 17:30:02
1117	28	243	A COMMENT	\N	2014-05-25 03:50:45	2014-05-25 03:50:45
1118	32	243	A COMMENT	\N	2014-05-26 01:18:22	2014-05-26 01:18:22
1119	43	243	A COMMENT	\N	2014-05-28 00:48:50	2014-05-28 00:48:50
1120	10	243	A COMMENT	\N	2014-05-31 09:19:21	2014-05-31 09:19:21
1121	1	243	A COMMENT	\N	2014-06-09 00:20:18	2014-06-09 00:20:18
1122	47	243	A COMMENT	\N	2014-06-13 04:14:56	2014-06-13 04:14:56
1123	10	243	A COMMENT	\N	2014-06-14 12:28:07	2014-06-14 12:28:07
1124	8	245	A COMMENT	\N	2014-05-27 00:02:00	2014-05-27 00:02:00
1125	4	245	A COMMENT	\N	2014-05-31 03:05:08	2014-05-31 03:05:08
1126	39	245	A COMMENT	\N	2014-06-24 09:39:55	2014-06-24 09:39:55
1127	45	245	A COMMENT	\N	2014-07-11 00:12:39	2014-07-11 00:12:39
1128	21	245	A COMMENT	\N	2014-07-24 16:09:40	2014-07-24 16:09:40
1129	19	246	A COMMENT	\N	2013-12-21 17:33:31	2013-12-21 17:33:31
1130	47	248	A COMMENT	\N	2013-12-30 01:07:35	2013-12-30 01:07:35
1131	1	248	A COMMENT	\N	2014-01-05 19:17:07	2014-01-05 19:17:07
1132	32	248	A COMMENT	\N	2014-01-27 14:40:34	2014-01-27 14:40:34
1133	28	248	A COMMENT	\N	2014-03-02 07:25:33	2014-03-02 07:25:33
1134	45	248	A COMMENT	\N	2014-03-14 05:37:53	2014-03-14 05:37:53
1135	27	248	A COMMENT	\N	2014-04-10 02:52:34	2014-04-10 02:52:34
1136	37	248	A COMMENT	\N	2014-04-19 07:35:15	2014-04-19 07:35:15
1137	3	248	A COMMENT	\N	2014-04-19 16:51:40	2014-04-19 16:51:40
1138	47	248	A COMMENT	\N	2014-04-27 00:02:45	2014-04-27 00:02:45
1139	14	248	A COMMENT	\N	2014-05-17 19:42:36	2014-05-17 19:42:36
1140	28	248	A COMMENT	\N	2014-06-15 22:24:04	2014-06-15 22:24:04
1141	43	248	A COMMENT	\N	2014-06-25 08:32:34	2014-06-25 08:32:34
1142	45	252	A COMMENT	\N	2014-02-10 17:02:58	2014-02-10 17:02:58
1143	11	252	A COMMENT	\N	2014-07-03 12:02:18	2014-07-03 12:02:18
1144	19	255	A COMMENT	\N	2014-01-20 15:46:08	2014-01-20 15:46:08
1145	3	255	A COMMENT	\N	2014-01-29 11:19:33	2014-01-29 11:19:33
1146	37	255	A COMMENT	\N	2014-02-12 16:00:22	2014-02-12 16:00:22
1147	3	255	A COMMENT	\N	2014-03-06 04:46:26	2014-03-06 04:46:26
1148	4	255	A COMMENT	\N	2014-04-11 05:58:52	2014-04-11 05:58:52
1149	27	255	A COMMENT	\N	2014-04-22 20:59:34	2014-04-22 20:59:34
1150	37	255	A COMMENT	\N	2014-04-23 09:13:06	2014-04-23 09:13:06
1151	39	255	A COMMENT	\N	2014-06-06 14:23:46	2014-06-06 14:23:46
1152	43	255	A COMMENT	\N	2014-06-19 23:40:08	2014-06-19 23:40:08
1153	2	255	A COMMENT	\N	2014-06-26 06:00:38	2014-06-26 06:00:38
1154	8	255	A COMMENT	\N	2014-07-05 09:31:06	2014-07-05 09:31:06
1155	45	256	A COMMENT	\N	2014-03-24 05:24:51	2014-03-24 05:24:51
1156	30	256	A COMMENT	\N	2014-04-20 15:30:34	2014-04-20 15:30:34
1157	4	257	A COMMENT	\N	2014-05-19 06:24:57	2014-05-19 06:24:57
1158	2	258	A COMMENT	\N	2014-05-11 11:29:47	2014-05-11 11:29:47
1159	39	258	A COMMENT	\N	2014-06-11 06:44:50	2014-06-11 06:44:50
1160	47	258	A COMMENT	\N	2014-06-12 10:02:34	2014-06-12 10:02:34
1161	3	258	A COMMENT	\N	2014-06-18 15:55:08	2014-06-18 15:55:08
1162	27	258	A COMMENT	\N	2014-07-04 17:10:38	2014-07-04 17:10:38
1163	14	259	A COMMENT	\N	2014-01-13 17:19:44	2014-01-13 17:19:44
1164	47	259	A COMMENT	\N	2014-01-17 17:55:28	2014-01-17 17:55:28
1165	28	259	A COMMENT	\N	2014-02-11 17:10:12	2014-02-11 17:10:12
1166	30	259	A COMMENT	\N	2014-04-22 05:26:05	2014-04-22 05:26:05
1167	3	259	A COMMENT	\N	2014-05-26 07:33:56	2014-05-26 07:33:56
1168	19	262	A COMMENT	\N	2014-04-08 19:28:20	2014-04-08 19:28:20
1169	37	262	A COMMENT	\N	2014-06-05 16:05:46	2014-06-05 16:05:46
1170	10	262	A COMMENT	\N	2014-06-14 07:49:11	2014-06-14 07:49:11
1171	28	262	A COMMENT	\N	2014-07-21 21:04:06	2014-07-21 21:04:06
1172	21	263	A COMMENT	\N	2014-04-10 09:09:22	2014-04-10 09:09:22
1173	11	263	A COMMENT	\N	2014-04-15 18:31:49	2014-04-15 18:31:49
1174	2	263	A COMMENT	\N	2014-05-09 08:00:55	2014-05-09 08:00:55
1175	28	263	A COMMENT	\N	2014-05-09 10:50:54	2014-05-09 10:50:54
1176	43	263	A COMMENT	\N	2014-05-14 19:12:25	2014-05-14 19:12:25
1177	4	263	A COMMENT	\N	2014-05-27 08:45:30	2014-05-27 08:45:30
1178	27	263	A COMMENT	\N	2014-07-02 18:30:52	2014-07-02 18:30:52
1179	27	263	A COMMENT	\N	2014-07-10 11:28:26	2014-07-10 11:28:26
1180	30	264	A COMMENT	\N	2014-01-14 15:46:32	2014-01-14 15:46:32
1181	43	264	A COMMENT	\N	2014-06-09 19:58:51	2014-06-09 19:58:51
1182	37	264	A COMMENT	\N	2014-06-11 23:55:56	2014-06-11 23:55:56
1183	8	264	A COMMENT	\N	2014-07-23 09:55:52	2014-07-23 09:55:52
1184	14	265	A COMMENT	\N	2014-05-25 04:49:50	2014-05-25 04:49:50
1185	43	265	A COMMENT	\N	2014-05-28 12:43:13	2014-05-28 12:43:13
1186	11	265	A COMMENT	\N	2014-06-30 15:26:03	2014-06-30 15:26:03
1187	8	266	A COMMENT	\N	2014-03-10 12:11:21	2014-03-10 12:11:21
1188	30	266	A COMMENT	\N	2014-03-11 07:47:05	2014-03-11 07:47:05
1189	2	266	A COMMENT	\N	2014-03-12 14:36:14	2014-03-12 14:36:14
1190	21	266	A COMMENT	\N	2014-03-23 07:46:02	2014-03-23 07:46:02
1191	14	266	A COMMENT	\N	2014-04-08 01:37:35	2014-04-08 01:37:35
1192	10	266	A COMMENT	\N	2014-04-24 12:56:13	2014-04-24 12:56:13
1193	8	266	A COMMENT	\N	2014-05-24 22:41:13	2014-05-24 22:41:13
1194	11	266	A COMMENT	\N	2014-06-02 12:59:21	2014-06-02 12:59:21
1195	10	266	A COMMENT	\N	2014-06-09 07:24:22	2014-06-09 07:24:22
1196	28	266	A COMMENT	\N	2014-07-02 03:14:11	2014-07-02 03:14:11
1197	37	267	A COMMENT	\N	2013-12-22 17:51:58	2013-12-22 17:51:58
1198	39	267	A COMMENT	\N	2014-01-04 00:02:10	2014-01-04 00:02:10
1199	32	267	A COMMENT	\N	2014-01-04 10:05:03	2014-01-04 10:05:03
1200	1	267	A COMMENT	\N	2014-01-05 07:27:49	2014-01-05 07:27:49
1201	10	267	A COMMENT	\N	2014-01-17 08:11:05	2014-01-17 08:11:05
1202	28	267	A COMMENT	\N	2014-02-24 11:04:08	2014-02-24 11:04:08
1203	4	267	A COMMENT	\N	2014-03-08 03:07:40	2014-03-08 03:07:40
1204	47	267	A COMMENT	\N	2014-03-14 17:11:47	2014-03-14 17:11:47
1205	3	267	A COMMENT	\N	2014-04-27 16:57:11	2014-04-27 16:57:11
1206	10	267	A COMMENT	\N	2014-05-11 08:20:50	2014-05-11 08:20:50
1207	2	267	A COMMENT	\N	2014-06-16 08:27:35	2014-06-16 08:27:35
1208	43	267	A COMMENT	\N	2014-06-24 00:43:29	2014-06-24 00:43:29
1209	43	267	A COMMENT	\N	2014-07-01 06:50:49	2014-07-01 06:50:49
1210	8	267	A COMMENT	\N	2014-07-12 10:02:42	2014-07-12 10:02:42
1211	21	267	A COMMENT	\N	2014-07-18 05:21:09	2014-07-18 05:21:09
1212	19	268	A COMMENT	\N	2014-03-25 01:20:32	2014-03-25 01:20:32
1213	10	268	A COMMENT	\N	2014-04-07 01:18:24	2014-04-07 01:18:24
1214	27	268	A COMMENT	\N	2014-04-10 06:35:03	2014-04-10 06:35:03
1215	30	268	A COMMENT	\N	2014-04-11 17:03:38	2014-04-11 17:03:38
1216	1	268	A COMMENT	\N	2014-04-15 09:51:23	2014-04-15 09:51:23
1217	47	268	A COMMENT	\N	2014-05-15 06:24:54	2014-05-15 06:24:54
1218	3	268	A COMMENT	\N	2014-05-16 15:36:28	2014-05-16 15:36:28
1219	30	268	A COMMENT	\N	2014-05-21 12:40:13	2014-05-21 12:40:13
1220	43	268	A COMMENT	\N	2014-05-24 20:27:12	2014-05-24 20:27:12
1221	4	268	A COMMENT	\N	2014-05-31 13:17:06	2014-05-31 13:17:06
1222	39	268	A COMMENT	\N	2014-05-31 20:20:59	2014-05-31 20:20:59
1223	45	268	A COMMENT	\N	2014-06-29 05:50:55	2014-06-29 05:50:55
1224	37	268	A COMMENT	\N	2014-07-06 01:56:29	2014-07-06 01:56:29
1225	27	268	A COMMENT	\N	2014-07-14 02:43:55	2014-07-14 02:43:55
1226	10	268	A COMMENT	\N	2014-07-18 00:02:02	2014-07-18 00:02:02
1227	11	268	A COMMENT	\N	2014-07-23 23:17:51	2014-07-23 23:17:51
1228	21	269	A COMMENT	\N	2014-05-21 11:06:14	2014-05-21 11:06:14
1229	11	269	A COMMENT	\N	2014-05-28 14:14:30	2014-05-28 14:14:30
1230	1	269	A COMMENT	\N	2014-06-09 20:20:41	2014-06-09 20:20:41
1231	30	269	A COMMENT	\N	2014-06-26 07:24:16	2014-06-26 07:24:16
1232	43	269	A COMMENT	\N	2014-07-07 15:02:51	2014-07-07 15:02:51
1233	14	269	A COMMENT	\N	2014-07-07 22:51:35	2014-07-07 22:51:35
1234	1	269	A COMMENT	\N	2014-07-23 15:51:42	2014-07-23 15:51:42
1235	27	270	A COMMENT	\N	2014-06-26 03:29:56	2014-06-26 03:29:56
1236	10	270	A COMMENT	\N	2014-07-12 00:56:29	2014-07-12 00:56:29
1237	28	270	A COMMENT	\N	2014-07-18 10:22:01	2014-07-18 10:22:01
1238	3	272	A COMMENT	\N	2014-07-03 15:12:17	2014-07-03 15:12:17
1239	4	272	A COMMENT	\N	2014-07-03 23:16:17	2014-07-03 23:16:17
1240	43	272	A COMMENT	\N	2014-07-14 14:51:32	2014-07-14 14:51:32
1241	2	272	A COMMENT	\N	2014-07-22 22:43:54	2014-07-22 22:43:54
1242	37	272	A COMMENT	\N	2014-07-24 07:55:36	2014-07-24 07:55:36
1243	1	272	A COMMENT	\N	2014-07-24 17:43:00	2014-07-24 17:43:00
1244	10	272	A COMMENT	\N	2014-07-26 10:47:13	2014-07-26 10:47:13
1245	35	273	A COMMENT	\N	2014-03-22 04:57:08	2014-03-22 04:57:08
1246	37	274	A COMMENT	\N	2014-05-17 21:19:31	2014-05-17 21:19:31
1247	47	274	A COMMENT	\N	2014-05-22 20:07:15	2014-05-22 20:07:15
1248	1	274	A COMMENT	\N	2014-05-27 20:51:57	2014-05-27 20:51:57
1249	43	274	A COMMENT	\N	2014-06-02 13:09:10	2014-06-02 13:09:10
1250	45	274	A COMMENT	\N	2014-06-02 19:56:51	2014-06-02 19:56:51
1251	27	274	A COMMENT	\N	2014-06-03 12:22:35	2014-06-03 12:22:35
1252	30	274	A COMMENT	\N	2014-06-25 14:50:29	2014-06-25 14:50:29
1253	27	274	A COMMENT	\N	2014-07-07 06:20:08	2014-07-07 06:20:08
1254	21	275	A COMMENT	\N	2014-05-29 12:27:58	2014-05-29 12:27:58
1255	35	276	A COMMENT	\N	2014-03-22 06:11:11	2014-03-22 06:11:11
1256	28	276	A COMMENT	\N	2014-05-16 18:56:26	2014-05-16 18:56:26
1257	10	276	A COMMENT	\N	2014-05-22 20:34:36	2014-05-22 20:34:36
1258	47	276	A COMMENT	\N	2014-05-30 08:25:21	2014-05-30 08:25:21
1259	21	276	A COMMENT	\N	2014-06-22 10:35:11	2014-06-22 10:35:11
1260	35	278	A COMMENT	\N	2014-02-18 19:39:44	2014-02-18 19:39:44
1261	4	278	A COMMENT	\N	2014-03-19 08:00:51	2014-03-19 08:00:51
1262	21	278	A COMMENT	\N	2014-04-06 12:27:13	2014-04-06 12:27:13
1263	8	278	A COMMENT	\N	2014-04-08 18:33:23	2014-04-08 18:33:23
1264	14	278	A COMMENT	\N	2014-05-15 06:25:45	2014-05-15 06:25:45
1265	1	278	A COMMENT	\N	2014-06-16 21:22:14	2014-06-16 21:22:14
1266	14	279	A COMMENT	\N	2014-02-28 22:25:03	2014-02-28 22:25:03
1267	37	279	A COMMENT	\N	2014-03-07 05:17:54	2014-03-07 05:17:54
1268	14	279	A COMMENT	\N	2014-03-08 03:17:02	2014-03-08 03:17:02
1269	1	279	A COMMENT	\N	2014-03-15 16:09:28	2014-03-15 16:09:28
1270	11	279	A COMMENT	\N	2014-03-17 14:54:18	2014-03-17 14:54:18
1271	21	279	A COMMENT	\N	2014-03-20 06:53:13	2014-03-20 06:53:13
1272	3	279	A COMMENT	\N	2014-03-23 12:07:16	2014-03-23 12:07:16
1273	47	279	A COMMENT	\N	2014-03-31 05:40:42	2014-03-31 05:40:42
1274	21	279	A COMMENT	\N	2014-04-02 21:22:29	2014-04-02 21:22:29
1275	2	279	A COMMENT	\N	2014-04-15 01:53:10	2014-04-15 01:53:10
1276	28	279	A COMMENT	\N	2014-05-09 09:12:59	2014-05-09 09:12:59
1277	47	279	A COMMENT	\N	2014-05-15 15:40:14	2014-05-15 15:40:14
1278	21	279	A COMMENT	\N	2014-06-08 20:39:33	2014-06-08 20:39:33
1279	10	279	A COMMENT	\N	2014-06-10 09:36:26	2014-06-10 09:36:26
1280	32	279	A COMMENT	\N	2014-06-14 15:43:09	2014-06-14 15:43:09
1281	8	279	A COMMENT	\N	2014-06-25 15:43:59	2014-06-25 15:43:59
1282	8	279	A COMMENT	\N	2014-07-08 18:53:24	2014-07-08 18:53:24
1283	11	279	A COMMENT	\N	2014-07-26 11:50:04	2014-07-26 11:50:04
1284	27	281	A COMMENT	\N	2014-07-12 16:45:46	2014-07-12 16:45:46
1285	32	281	A COMMENT	\N	2014-07-21 18:47:08	2014-07-21 18:47:08
1286	10	281	A COMMENT	\N	2014-07-26 00:54:56	2014-07-26 00:54:56
1287	29	282	A COMMENT	\N	2014-06-25 20:40:02	2014-06-25 20:40:02
1288	37	282	A COMMENT	\N	2014-06-26 05:07:21	2014-06-26 05:07:21
1289	45	282	A COMMENT	\N	2014-06-29 02:37:08	2014-06-29 02:37:08
1290	4	282	A COMMENT	\N	2014-07-14 02:37:53	2014-07-14 02:37:53
1291	21	282	A COMMENT	\N	2014-07-21 23:30:27	2014-07-21 23:30:27
1292	8	283	A COMMENT	\N	2014-03-11 23:29:36	2014-03-11 23:29:36
1293	32	283	A COMMENT	\N	2014-03-19 06:49:43	2014-03-19 06:49:43
1294	39	283	A COMMENT	\N	2014-03-19 21:48:44	2014-03-19 21:48:44
1295	47	283	A COMMENT	\N	2014-03-30 19:34:07	2014-03-30 19:34:07
1296	1	283	A COMMENT	\N	2014-04-06 06:54:33	2014-04-06 06:54:33
1297	8	283	A COMMENT	\N	2014-04-06 16:23:39	2014-04-06 16:23:39
1298	27	283	A COMMENT	\N	2014-04-09 20:38:52	2014-04-09 20:38:52
1299	30	283	A COMMENT	\N	2014-04-21 09:39:15	2014-04-21 09:39:15
1300	14	283	A COMMENT	\N	2014-05-04 08:59:02	2014-05-04 08:59:02
1301	14	283	A COMMENT	\N	2014-05-05 17:07:11	2014-05-05 17:07:11
1302	45	283	A COMMENT	\N	2014-05-18 02:06:00	2014-05-18 02:06:00
1303	27	283	A COMMENT	\N	2014-05-18 21:55:22	2014-05-18 21:55:22
1304	4	283	A COMMENT	\N	2014-05-21 13:32:33	2014-05-21 13:32:33
1305	2	283	A COMMENT	\N	2014-06-08 23:19:33	2014-06-08 23:19:33
1306	14	283	A COMMENT	\N	2014-06-18 05:47:17	2014-06-18 05:47:17
1307	39	283	A COMMENT	\N	2014-07-03 01:23:28	2014-07-03 01:23:28
1308	37	283	A COMMENT	\N	2014-07-10 17:34:40	2014-07-10 17:34:40
1309	11	283	A COMMENT	\N	2014-07-21 13:23:13	2014-07-21 13:23:13
1310	32	283	A COMMENT	\N	2014-07-23 06:11:53	2014-07-23 06:11:53
1311	34	284	A COMMENT	\N	2014-04-17 19:37:07	2014-04-17 19:37:07
1312	45	285	A COMMENT	\N	2014-06-11 21:57:04	2014-06-11 21:57:04
1313	3	285	A COMMENT	\N	2014-06-15 17:15:32	2014-06-15 17:15:32
1314	34	286	A COMMENT	\N	2014-02-28 00:51:49	2014-02-28 00:51:49
1315	21	286	A COMMENT	\N	2014-02-28 20:59:50	2014-02-28 20:59:50
1316	21	286	A COMMENT	\N	2014-03-24 03:44:49	2014-03-24 03:44:49
1317	37	286	A COMMENT	\N	2014-03-28 07:15:20	2014-03-28 07:15:20
1318	8	286	A COMMENT	\N	2014-04-03 12:13:50	2014-04-03 12:13:50
1319	32	286	A COMMENT	\N	2014-04-22 20:47:01	2014-04-22 20:47:01
1320	10	288	A COMMENT	\N	2014-06-21 05:39:18	2014-06-21 05:39:18
1321	14	289	A COMMENT	\N	2014-04-07 00:32:42	2014-04-07 00:32:42
1322	34	293	A COMMENT	\N	2014-06-01 04:52:18	2014-06-01 04:52:18
1323	47	294	A COMMENT	\N	2014-06-29 16:38:56	2014-06-29 16:38:56
1324	32	294	A COMMENT	\N	2014-07-03 03:03:25	2014-07-03 03:03:25
1325	45	294	A COMMENT	\N	2014-07-04 14:39:00	2014-07-04 14:39:00
1326	45	294	A COMMENT	\N	2014-07-19 10:58:33	2014-07-19 10:58:33
1327	13	295	A COMMENT	\N	2014-05-14 04:24:59	2014-05-14 04:24:59
1328	3	296	A COMMENT	\N	2014-06-17 23:22:49	2014-06-17 23:22:49
1329	1	296	A COMMENT	\N	2014-06-24 18:46:11	2014-06-24 18:46:11
1330	37	296	A COMMENT	\N	2014-06-26 11:17:11	2014-06-26 11:17:11
1331	32	296	A COMMENT	\N	2014-06-30 02:21:45	2014-06-30 02:21:45
1332	21	296	A COMMENT	\N	2014-07-05 07:48:32	2014-07-05 07:48:32
1333	43	296	A COMMENT	\N	2014-07-07 17:47:28	2014-07-07 17:47:28
1334	11	296	A COMMENT	\N	2014-07-13 16:52:07	2014-07-13 16:52:07
1335	8	296	A COMMENT	\N	2014-07-23 08:52:04	2014-07-23 08:52:04
1336	32	296	A COMMENT	\N	2014-07-26 03:48:04	2014-07-26 03:48:04
1337	45	297	A COMMENT	\N	2014-07-25 00:05:01	2014-07-25 00:05:01
1338	13	298	A COMMENT	\N	2014-06-03 05:51:42	2014-06-03 05:51:42
1339	32	299	A COMMENT	\N	2014-06-22 23:17:30	2014-06-22 23:17:30
1340	39	299	A COMMENT	\N	2014-06-25 16:54:48	2014-06-25 16:54:48
1341	3	299	A COMMENT	\N	2014-06-26 17:35:15	2014-06-26 17:35:15
1342	3	299	A COMMENT	\N	2014-06-27 03:59:28	2014-06-27 03:59:28
1343	28	299	A COMMENT	\N	2014-06-29 18:24:46	2014-06-29 18:24:46
1344	1	299	A COMMENT	\N	2014-07-01 14:44:43	2014-07-01 14:44:43
1345	43	299	A COMMENT	\N	2014-07-03 11:55:54	2014-07-03 11:55:54
1346	37	299	A COMMENT	\N	2014-07-04 09:44:43	2014-07-04 09:44:43
1347	47	299	A COMMENT	\N	2014-07-09 08:21:50	2014-07-09 08:21:50
1348	3	299	A COMMENT	\N	2014-07-12 06:04:19	2014-07-12 06:04:19
1349	11	299	A COMMENT	\N	2014-07-12 13:10:46	2014-07-12 13:10:46
1350	8	299	A COMMENT	\N	2014-07-14 08:23:37	2014-07-14 08:23:37
1351	28	299	A COMMENT	\N	2014-07-14 21:18:20	2014-07-14 21:18:20
1352	10	299	A COMMENT	\N	2014-07-15 15:27:07	2014-07-15 15:27:07
1353	14	299	A COMMENT	\N	2014-07-17 23:12:16	2014-07-17 23:12:16
1354	14	299	A COMMENT	\N	2014-07-18 07:26:16	2014-07-18 07:26:16
1355	4	299	A COMMENT	\N	2014-07-19 12:21:20	2014-07-19 12:21:20
1356	45	299	A COMMENT	\N	2014-07-22 20:19:43	2014-07-22 20:19:43
1357	32	299	A COMMENT	\N	2014-07-23 18:56:34	2014-07-23 18:56:34
1358	45	299	A COMMENT	\N	2014-07-24 07:24:20	2014-07-24 07:24:20
1359	21	300	A COMMENT	\N	2014-06-19 06:14:19	2014-06-19 06:14:19
1360	11	300	A COMMENT	\N	2014-07-07 18:11:16	2014-07-07 18:11:16
1361	11	300	A COMMENT	\N	2014-07-09 00:49:53	2014-07-09 00:49:53
1362	27	300	A COMMENT	\N	2014-07-26 18:18:37	2014-07-26 18:18:37
1363	32	301	A COMMENT	\N	2014-06-04 14:37:32	2014-06-04 14:37:32
1364	30	301	A COMMENT	\N	2014-06-08 13:29:46	2014-06-08 13:29:46
1365	47	301	A COMMENT	\N	2014-06-10 11:57:02	2014-06-10 11:57:02
1366	30	301	A COMMENT	\N	2014-06-21 23:20:20	2014-06-21 23:20:20
1367	39	301	A COMMENT	\N	2014-06-27 09:52:18	2014-06-27 09:52:18
1368	3	301	A COMMENT	\N	2014-06-27 12:31:40	2014-06-27 12:31:40
1369	1	301	A COMMENT	\N	2014-07-11 10:29:24	2014-07-11 10:29:24
1370	37	301	A COMMENT	\N	2014-07-13 03:06:23	2014-07-13 03:06:23
1371	8	301	A COMMENT	\N	2014-07-14 03:39:19	2014-07-14 03:39:19
1372	21	301	A COMMENT	\N	2014-07-19 17:41:37	2014-07-19 17:41:37
1373	13	302	A COMMENT	\N	2014-06-05 05:13:41	2014-06-05 05:13:41
1374	10	303	A COMMENT	\N	2014-05-24 12:19:25	2014-05-24 12:19:25
1375	8	303	A COMMENT	\N	2014-05-25 13:17:44	2014-05-25 13:17:44
1376	32	303	A COMMENT	\N	2014-05-25 17:45:58	2014-05-25 17:45:58
1377	4	303	A COMMENT	\N	2014-05-25 23:11:47	2014-05-25 23:11:47
1378	28	303	A COMMENT	\N	2014-05-27 05:14:32	2014-05-27 05:14:32
1379	47	303	A COMMENT	\N	2014-06-14 17:13:24	2014-06-14 17:13:24
1380	11	303	A COMMENT	\N	2014-06-15 03:37:23	2014-06-15 03:37:23
1381	2	303	A COMMENT	\N	2014-06-22 22:46:50	2014-06-22 22:46:50
1382	43	303	A COMMENT	\N	2014-06-30 06:05:58	2014-06-30 06:05:58
1383	39	303	A COMMENT	\N	2014-07-01 12:14:41	2014-07-01 12:14:41
1384	27	303	A COMMENT	\N	2014-07-02 09:42:36	2014-07-02 09:42:36
1385	14	303	A COMMENT	\N	2014-07-11 05:22:50	2014-07-11 05:22:50
1386	3	303	A COMMENT	\N	2014-07-16 03:13:07	2014-07-16 03:13:07
1387	1	303	A COMMENT	\N	2014-07-18 07:06:22	2014-07-18 07:06:22
1388	37	303	A COMMENT	\N	2014-07-18 23:53:13	2014-07-18 23:53:13
1389	39	303	A COMMENT	\N	2014-07-19 08:15:43	2014-07-19 08:15:43
1390	1	303	A COMMENT	\N	2014-07-19 17:00:56	2014-07-19 17:00:56
1391	30	303	A COMMENT	\N	2014-07-23 02:19:10	2014-07-23 02:19:10
1392	13	304	A COMMENT	\N	2014-05-18 19:53:00	2014-05-18 19:53:00
1393	13	305	A COMMENT	\N	2014-05-22 03:00:28	2014-05-22 03:00:28
1394	32	305	A COMMENT	\N	2014-05-25 23:54:31	2014-05-25 23:54:31
1395	10	305	A COMMENT	\N	2014-05-27 02:26:27	2014-05-27 02:26:27
1396	10	305	A COMMENT	\N	2014-06-09 04:38:46	2014-06-09 04:38:46
1397	2	305	A COMMENT	\N	2014-06-21 05:40:35	2014-06-21 05:40:35
1398	45	305	A COMMENT	\N	2014-06-21 06:00:13	2014-06-21 06:00:13
1399	14	305	A COMMENT	\N	2014-06-26 08:05:52	2014-06-26 08:05:52
1400	47	305	A COMMENT	\N	2014-06-30 06:26:58	2014-06-30 06:26:58
1401	30	305	A COMMENT	\N	2014-07-07 06:36:06	2014-07-07 06:36:06
1402	1	305	A COMMENT	\N	2014-07-07 20:08:27	2014-07-07 20:08:27
1403	4	305	A COMMENT	\N	2014-07-14 09:37:15	2014-07-14 09:37:15
1404	28	305	A COMMENT	\N	2014-07-18 11:03:41	2014-07-18 11:03:41
1405	27	305	A COMMENT	\N	2014-07-23 12:50:40	2014-07-23 12:50:40
1406	37	307	A COMMENT	\N	2014-07-03 06:59:21	2014-07-03 06:59:21
1407	32	308	A COMMENT	\N	2014-07-13 22:21:03	2014-07-13 22:21:03
1408	2	308	A COMMENT	\N	2014-07-14 19:08:45	2014-07-14 19:08:45
1409	10	308	A COMMENT	\N	2014-07-16 03:18:34	2014-07-16 03:18:34
1410	28	308	A COMMENT	\N	2014-07-19 13:38:28	2014-07-19 13:38:28
1411	45	308	A COMMENT	\N	2014-07-21 12:54:46	2014-07-21 12:54:46
1412	11	308	A COMMENT	\N	2014-07-23 12:26:16	2014-07-23 12:26:16
1413	47	309	A COMMENT	\N	2014-07-02 18:05:38	2014-07-02 18:05:38
1414	3	309	A COMMENT	\N	2014-07-03 08:48:42	2014-07-03 08:48:42
1415	37	309	A COMMENT	\N	2014-07-06 18:28:50	2014-07-06 18:28:50
1416	43	309	A COMMENT	\N	2014-07-06 22:49:09	2014-07-06 22:49:09
1417	3	309	A COMMENT	\N	2014-07-09 07:18:26	2014-07-09 07:18:26
1418	27	309	A COMMENT	\N	2014-07-09 15:33:23	2014-07-09 15:33:23
1419	27	309	A COMMENT	\N	2014-07-09 19:34:19	2014-07-09 19:34:19
1420	21	309	A COMMENT	\N	2014-07-20 06:18:06	2014-07-20 06:18:06
1421	2	309	A COMMENT	\N	2014-07-21 18:31:43	2014-07-21 18:31:43
1422	45	309	A COMMENT	\N	2014-07-22 08:22:22	2014-07-22 08:22:22
1423	27	310	A COMMENT	\N	2014-05-20 23:48:24	2014-05-20 23:48:24
1424	32	310	A COMMENT	\N	2014-06-03 10:48:44	2014-06-03 10:48:44
1425	45	310	A COMMENT	\N	2014-06-10 00:08:15	2014-06-10 00:08:15
1426	3	310	A COMMENT	\N	2014-06-16 18:08:20	2014-06-16 18:08:20
1427	10	310	A COMMENT	\N	2014-07-03 05:07:28	2014-07-03 05:07:28
1428	1	310	A COMMENT	\N	2014-07-04 23:59:15	2014-07-04 23:59:15
1429	21	310	A COMMENT	\N	2014-07-19 04:50:04	2014-07-19 04:50:04
1430	10	310	A COMMENT	\N	2014-07-25 17:44:17	2014-07-25 17:44:17
1431	4	311	A COMMENT	\N	2014-05-29 13:29:50	2014-05-29 13:29:50
1432	39	311	A COMMENT	\N	2014-05-31 09:38:32	2014-05-31 09:38:32
1433	14	311	A COMMENT	\N	2014-06-11 18:07:52	2014-06-11 18:07:52
1434	10	311	A COMMENT	\N	2014-06-15 08:30:30	2014-06-15 08:30:30
1435	45	311	A COMMENT	\N	2014-06-23 07:49:58	2014-06-23 07:49:58
1436	1	311	A COMMENT	\N	2014-06-27 14:25:17	2014-06-27 14:25:17
1437	3	311	A COMMENT	\N	2014-06-28 04:58:00	2014-06-28 04:58:00
1438	1	311	A COMMENT	\N	2014-07-07 16:53:46	2014-07-07 16:53:46
1439	37	311	A COMMENT	\N	2014-07-09 09:44:54	2014-07-09 09:44:54
1440	27	311	A COMMENT	\N	2014-07-12 00:32:40	2014-07-12 00:32:40
1441	39	311	A COMMENT	\N	2014-07-12 13:11:41	2014-07-12 13:11:41
1442	2	311	A COMMENT	\N	2014-07-14 21:29:01	2014-07-14 21:29:01
1443	28	311	A COMMENT	\N	2014-07-18 00:27:55	2014-07-18 00:27:55
1444	47	311	A COMMENT	\N	2014-07-19 01:20:17	2014-07-19 01:20:17
1445	14	311	A COMMENT	\N	2014-07-21 03:13:53	2014-07-21 03:13:53
1446	4	311	A COMMENT	\N	2014-07-21 17:26:13	2014-07-21 17:26:13
1447	3	311	A COMMENT	\N	2014-07-24 13:44:07	2014-07-24 13:44:07
1448	10	312	A COMMENT	\N	2014-06-25 09:33:40	2014-06-25 09:33:40
1449	14	312	A COMMENT	\N	2014-06-29 07:49:24	2014-06-29 07:49:24
1450	47	312	A COMMENT	\N	2014-07-02 04:37:46	2014-07-02 04:37:46
1451	13	314	A COMMENT	\N	2014-07-14 04:59:22	2014-07-14 04:59:22
1452	8	314	A COMMENT	\N	2014-07-15 23:54:16	2014-07-15 23:54:16
1453	11	314	A COMMENT	\N	2014-07-17 21:17:27	2014-07-17 21:17:27
1454	47	314	A COMMENT	\N	2014-07-19 02:33:43	2014-07-19 02:33:43
1455	27	314	A COMMENT	\N	2014-07-20 17:36:21	2014-07-20 17:36:21
1456	37	314	A COMMENT	\N	2014-07-21 08:33:21	2014-07-21 08:33:21
1457	32	314	A COMMENT	\N	2014-07-22 18:33:49	2014-07-22 18:33:49
1458	43	314	A COMMENT	\N	2014-07-24 14:54:05	2014-07-24 14:54:05
1459	3	314	A COMMENT	\N	2014-07-26 01:37:40	2014-07-26 01:37:40
1460	28	315	A COMMENT	\N	2014-06-06 19:10:10	2014-06-06 19:10:10
1461	13	316	A COMMENT	\N	2014-06-23 19:27:47	2014-06-23 19:27:47
1462	10	317	A COMMENT	\N	2014-05-27 06:16:33	2014-05-27 06:16:33
1463	39	317	A COMMENT	\N	2014-05-28 23:02:03	2014-05-28 23:02:03
1464	1	317	A COMMENT	\N	2014-06-01 18:55:13	2014-06-01 18:55:13
1465	28	317	A COMMENT	\N	2014-06-04 23:02:29	2014-06-04 23:02:29
1466	1	317	A COMMENT	\N	2014-06-05 08:47:16	2014-06-05 08:47:16
1467	2	317	A COMMENT	\N	2014-06-07 01:41:16	2014-06-07 01:41:16
1468	39	317	A COMMENT	\N	2014-06-12 13:36:22	2014-06-12 13:36:22
1469	39	317	A COMMENT	\N	2014-06-14 01:48:11	2014-06-14 01:48:11
1470	11	317	A COMMENT	\N	2014-06-25 01:59:39	2014-06-25 01:59:39
1471	21	317	A COMMENT	\N	2014-06-25 04:59:55	2014-06-25 04:59:55
1472	2	318	A COMMENT	\N	2014-07-08 09:16:05	2014-07-08 09:16:05
1473	2	319	A COMMENT	\N	2014-06-19 03:03:49	2014-06-19 03:03:49
1474	21	319	A COMMENT	\N	2014-06-21 14:37:15	2014-06-21 14:37:15
1475	14	319	A COMMENT	\N	2014-07-03 15:03:13	2014-07-03 15:03:13
1476	4	319	A COMMENT	\N	2014-07-07 15:00:48	2014-07-07 15:00:48
1477	28	319	A COMMENT	\N	2014-07-25 23:20:50	2014-07-25 23:20:50
1478	2	321	A COMMENT	\N	2014-06-10 19:31:02	2014-06-10 19:31:02
1479	10	321	A COMMENT	\N	2014-06-14 12:34:56	2014-06-14 12:34:56
1480	43	321	A COMMENT	\N	2014-06-30 10:35:42	2014-06-30 10:35:42
1481	13	322	A COMMENT	\N	2014-06-28 07:55:42	2014-06-28 07:55:42
1482	2	322	A COMMENT	\N	2014-06-30 03:01:07	2014-06-30 03:01:07
1483	2	322	A COMMENT	\N	2014-07-02 18:49:04	2014-07-02 18:49:04
1484	8	322	A COMMENT	\N	2014-07-22 14:45:30	2014-07-22 14:45:30
1485	3	322	A COMMENT	\N	2014-07-26 02:04:48	2014-07-26 02:04:48
1486	1	323	A COMMENT	\N	2014-05-11 23:08:37	2014-05-11 23:08:37
1487	2	323	A COMMENT	\N	2014-05-19 05:25:11	2014-05-19 05:25:11
1488	37	323	A COMMENT	\N	2014-05-22 07:10:47	2014-05-22 07:10:47
1489	11	323	A COMMENT	\N	2014-06-02 15:50:01	2014-06-02 15:50:01
1490	28	323	A COMMENT	\N	2014-06-06 01:36:23	2014-06-06 01:36:23
1491	45	323	A COMMENT	\N	2014-06-06 21:58:29	2014-06-06 21:58:29
1492	21	323	A COMMENT	\N	2014-06-08 02:46:12	2014-06-08 02:46:12
1493	14	323	A COMMENT	\N	2014-06-12 02:11:40	2014-06-12 02:11:40
1494	11	323	A COMMENT	\N	2014-06-13 07:46:42	2014-06-13 07:46:42
1495	10	323	A COMMENT	\N	2014-06-17 00:21:11	2014-06-17 00:21:11
1496	27	323	A COMMENT	\N	2014-06-18 08:32:50	2014-06-18 08:32:50
1497	4	323	A COMMENT	\N	2014-06-22 00:35:24	2014-06-22 00:35:24
1498	10	323	A COMMENT	\N	2014-06-26 09:56:50	2014-06-26 09:56:50
1499	11	323	A COMMENT	\N	2014-06-29 11:27:50	2014-06-29 11:27:50
1500	27	323	A COMMENT	\N	2014-06-30 09:16:31	2014-06-30 09:16:31
1501	21	323	A COMMENT	\N	2014-07-05 00:54:44	2014-07-05 00:54:44
1502	4	323	A COMMENT	\N	2014-07-06 20:23:01	2014-07-06 20:23:01
1503	3	323	A COMMENT	\N	2014-07-22 01:31:15	2014-07-22 01:31:15
1504	2	323	A COMMENT	\N	2014-07-23 05:43:51	2014-07-23 05:43:51
1505	21	323	A COMMENT	\N	2014-07-24 23:38:52	2014-07-24 23:38:52
1506	13	324	A COMMENT	\N	2014-05-21 01:44:33	2014-05-21 01:44:33
1507	2	324	A COMMENT	\N	2014-05-31 07:08:12	2014-05-31 07:08:12
1508	8	324	A COMMENT	\N	2014-06-07 17:56:21	2014-06-07 17:56:21
1509	14	324	A COMMENT	\N	2014-06-19 16:31:57	2014-06-19 16:31:57
1510	11	324	A COMMENT	\N	2014-06-22 01:41:22	2014-06-22 01:41:22
1511	4	324	A COMMENT	\N	2014-06-24 00:59:28	2014-06-24 00:59:28
1512	14	324	A COMMENT	\N	2014-06-26 23:26:45	2014-06-26 23:26:45
1513	27	324	A COMMENT	\N	2014-07-09 16:14:24	2014-07-09 16:14:24
1514	39	325	A COMMENT	\N	2014-05-30 15:21:30	2014-05-30 15:21:30
1515	43	325	A COMMENT	\N	2014-06-02 14:31:50	2014-06-02 14:31:50
1516	10	325	A COMMENT	\N	2014-06-04 11:38:04	2014-06-04 11:38:04
1517	1	325	A COMMENT	\N	2014-06-12 11:06:36	2014-06-12 11:06:36
1518	28	325	A COMMENT	\N	2014-06-16 21:55:46	2014-06-16 21:55:46
1519	43	325	A COMMENT	\N	2014-06-24 04:26:39	2014-06-24 04:26:39
1520	21	325	A COMMENT	\N	2014-06-25 07:30:01	2014-06-25 07:30:01
1521	45	325	A COMMENT	\N	2014-06-25 18:56:51	2014-06-25 18:56:51
1522	1	325	A COMMENT	\N	2014-07-17 20:28:01	2014-07-17 20:28:01
1523	13	326	A COMMENT	\N	2014-06-13 17:39:01	2014-06-13 17:39:01
1524	3	326	A COMMENT	\N	2014-07-22 11:40:25	2014-07-22 11:40:25
1525	37	329	A COMMENT	\N	2014-06-27 19:36:19	2014-06-27 19:36:19
1526	47	329	A COMMENT	\N	2014-07-23 09:26:47	2014-07-23 09:26:47
1527	13	330	A COMMENT	\N	2014-06-25 19:53:12	2014-06-25 19:53:12
1528	39	331	A COMMENT	\N	2014-07-03 01:47:11	2014-07-03 01:47:11
1529	43	331	A COMMENT	\N	2014-07-05 00:12:20	2014-07-05 00:12:20
1530	10	331	A COMMENT	\N	2014-07-10 19:15:41	2014-07-10 19:15:41
1531	40	332	A COMMENT	\N	2013-12-23 18:54:11	2013-12-23 18:54:11
1532	28	332	A COMMENT	\N	2014-02-07 09:35:47	2014-02-07 09:35:47
1533	14	332	A COMMENT	\N	2014-02-23 17:06:22	2014-02-23 17:06:22
1534	47	332	A COMMENT	\N	2014-06-27 11:26:50	2014-06-27 11:26:50
1535	39	332	A COMMENT	\N	2014-07-18 21:37:11	2014-07-18 21:37:11
1536	3	333	A COMMENT	\N	2014-03-25 14:35:32	2014-03-25 14:35:32
1537	43	333	A COMMENT	\N	2014-04-05 03:30:11	2014-04-05 03:30:11
1538	2	333	A COMMENT	\N	2014-05-12 16:34:20	2014-05-12 16:34:20
1539	8	333	A COMMENT	\N	2014-05-15 15:11:24	2014-05-15 15:11:24
1540	30	333	A COMMENT	\N	2014-05-17 22:55:55	2014-05-17 22:55:55
1541	3	333	A COMMENT	\N	2014-06-06 08:04:15	2014-06-06 08:04:15
1542	28	333	A COMMENT	\N	2014-07-12 17:37:27	2014-07-12 17:37:27
1543	11	333	A COMMENT	\N	2014-07-19 09:33:25	2014-07-19 09:33:25
1544	40	335	A COMMENT	\N	2014-02-10 16:26:07	2014-02-10 16:26:07
1545	11	337	A COMMENT	\N	2014-06-21 19:54:53	2014-06-21 19:54:53
1546	45	337	A COMMENT	\N	2014-07-19 09:47:20	2014-07-19 09:47:20
1547	5	338	A COMMENT	\N	2014-05-16 11:05:11	2014-05-16 11:05:11
1548	37	338	A COMMENT	\N	2014-05-21 06:37:24	2014-05-21 06:37:24
1549	28	338	A COMMENT	\N	2014-06-05 12:47:08	2014-06-05 12:47:08
1550	8	338	A COMMENT	\N	2014-07-16 14:11:21	2014-07-16 14:11:21
1551	32	338	A COMMENT	\N	2014-07-22 08:21:49	2014-07-22 08:21:49
1552	30	339	A COMMENT	\N	2014-03-11 03:42:53	2014-03-11 03:42:53
1553	2	340	A COMMENT	\N	2014-03-20 06:06:43	2014-03-20 06:06:43
1554	27	340	A COMMENT	\N	2014-05-22 03:22:46	2014-05-22 03:22:46
1555	32	340	A COMMENT	\N	2014-05-28 08:10:13	2014-05-28 08:10:13
1556	32	340	A COMMENT	\N	2014-06-02 04:07:40	2014-06-02 04:07:40
1557	37	340	A COMMENT	\N	2014-06-30 14:55:45	2014-06-30 14:55:45
1558	1	340	A COMMENT	\N	2014-07-06 07:28:37	2014-07-06 07:28:37
1559	11	340	A COMMENT	\N	2014-07-12 01:43:27	2014-07-12 01:43:27
1560	21	341	A COMMENT	\N	2014-05-03 08:18:07	2014-05-03 08:18:07
1561	3	341	A COMMENT	\N	2014-05-17 09:12:47	2014-05-17 09:12:47
1562	45	341	A COMMENT	\N	2014-05-25 00:32:20	2014-05-25 00:32:20
1563	45	341	A COMMENT	\N	2014-06-18 01:34:41	2014-06-18 01:34:41
1564	28	341	A COMMENT	\N	2014-07-10 21:55:37	2014-07-10 21:55:37
1565	15	342	A COMMENT	\N	2014-06-03 22:18:58	2014-06-03 22:18:58
1566	37	343	A COMMENT	\N	2014-07-16 08:08:18	2014-07-16 08:08:18
1567	15	344	A COMMENT	\N	2014-06-11 05:03:46	2014-06-11 05:03:46
1568	43	345	A COMMENT	\N	2014-03-31 09:24:43	2014-03-31 09:24:43
1569	37	345	A COMMENT	\N	2014-05-14 21:17:26	2014-05-14 21:17:26
1570	14	345	A COMMENT	\N	2014-06-28 14:34:27	2014-06-28 14:34:27
1571	28	345	A COMMENT	\N	2014-06-30 00:23:39	2014-06-30 00:23:39
1572	15	347	A COMMENT	\N	2014-03-31 08:05:55	2014-03-31 08:05:55
1573	1	347	A COMMENT	\N	2014-04-08 09:59:27	2014-04-08 09:59:27
1574	32	347	A COMMENT	\N	2014-05-20 08:01:10	2014-05-20 08:01:10
1575	2	347	A COMMENT	\N	2014-06-01 01:19:45	2014-06-01 01:19:45
1576	39	347	A COMMENT	\N	2014-06-10 00:41:18	2014-06-10 00:41:18
1577	8	347	A COMMENT	\N	2014-06-21 15:37:25	2014-06-21 15:37:25
1578	37	348	A COMMENT	\N	2014-06-12 22:44:48	2014-06-12 22:44:48
1579	39	348	A COMMENT	\N	2014-06-13 06:58:46	2014-06-13 06:58:46
1580	32	348	A COMMENT	\N	2014-07-01 18:16:59	2014-07-01 18:16:59
1581	32	348	A COMMENT	\N	2014-07-19 09:17:04	2014-07-19 09:17:04
1582	15	349	A COMMENT	\N	2014-06-02 23:25:07	2014-06-02 23:25:07
1583	32	349	A COMMENT	\N	2014-06-10 00:05:53	2014-06-10 00:05:53
1584	43	349	A COMMENT	\N	2014-06-15 17:56:59	2014-06-15 17:56:59
1585	2	349	A COMMENT	\N	2014-06-28 07:59:59	2014-06-28 07:59:59
1586	1	349	A COMMENT	\N	2014-07-04 07:44:20	2014-07-04 07:44:20
1587	39	349	A COMMENT	\N	2014-07-05 17:41:51	2014-07-05 17:41:51
1588	11	349	A COMMENT	\N	2014-07-12 00:38:08	2014-07-12 00:38:08
1589	4	349	A COMMENT	\N	2014-07-24 06:03:21	2014-07-24 06:03:21
1590	39	349	A COMMENT	\N	2014-07-26 03:20:58	2014-07-26 03:20:58
1591	17	350	A COMMENT	\N	2014-07-18 13:03:33	2014-07-18 13:03:33
1592	23	352	A COMMENT	\N	2013-12-26 23:41:58	2013-12-26 23:41:58
1593	23	356	A COMMENT	\N	2014-02-07 14:54:17	2014-02-07 14:54:17
1594	23	365	A COMMENT	\N	2013-12-15 12:09:31	2013-12-15 12:09:31
1595	23	367	A COMMENT	\N	2014-04-04 17:11:25	2014-04-04 17:11:25
1596	23	368	A COMMENT	\N	2014-02-03 19:44:24	2014-02-03 19:44:24
1597	23	370	A COMMENT	\N	2013-12-27 21:58:31	2013-12-27 21:58:31
1598	23	373	A COMMENT	\N	2014-05-09 08:37:26	2014-05-09 08:37:26
1599	23	374	A COMMENT	\N	2014-02-20 09:17:11	2014-02-20 09:17:11
1600	23	375	A COMMENT	\N	2014-02-27 22:56:19	2014-02-27 22:56:19
1601	23	377	A COMMENT	\N	2014-01-26 06:50:33	2014-01-26 06:50:33
1602	23	379	A COMMENT	\N	2014-03-04 14:29:56	2014-03-04 14:29:56
1603	23	380	A COMMENT	\N	2014-03-09 16:43:39	2014-03-09 16:43:39
1604	23	389	A COMMENT	\N	2013-12-21 14:16:53	2013-12-21 14:16:53
1605	23	396	A COMMENT	\N	2013-12-02 20:35:22	2013-12-02 20:35:22
1606	23	397	A COMMENT	\N	2014-04-02 00:55:00	2014-04-02 00:55:00
1607	23	398	A COMMENT	\N	2013-12-08 17:07:52	2013-12-08 17:07:52
1608	23	400	A COMMENT	\N	2013-12-13 05:08:53	2013-12-13 05:08:53
1609	23	401	A COMMENT	\N	2014-04-09 05:21:16	2014-04-09 05:21:16
1610	23	404	A COMMENT	\N	2014-02-05 11:23:14	2014-02-05 11:23:14
1611	23	408	A COMMENT	\N	2014-01-19 16:33:44	2014-01-19 16:33:44
1612	23	409	A COMMENT	\N	2014-03-13 19:01:42	2014-03-13 19:01:42
1613	41	413	A COMMENT	\N	2014-05-31 04:33:48	2014-05-31 04:33:48
1614	41	417	A COMMENT	\N	2014-05-20 10:28:08	2014-05-20 10:28:08
1615	26	422	A COMMENT	\N	2014-04-11 18:37:01	2014-04-11 18:37:01
1616	26	427	A COMMENT	\N	2014-03-19 19:24:29	2014-03-19 19:24:29
1617	26	428	A COMMENT	\N	2014-03-20 02:54:37	2014-03-20 02:54:37
1618	26	430	A COMMENT	\N	2014-05-18 15:53:48	2014-05-18 15:53:48
1619	26	432	A COMMENT	\N	2014-06-03 19:27:42	2014-06-03 19:27:42
1620	26	433	A COMMENT	\N	2014-07-22 00:02:14	2014-07-22 00:02:14
1621	25	128	A COMMENT	\N	2014-07-22 00:09:15	2014-07-22 00:09:15
1622	6	104	A COMMENT	\N	2014-05-19 16:06:55	2014-05-19 16:06:55
1623	22	338	A COMMENT	\N	2014-05-25 09:25:13	2014-05-25 09:25:13
1624	16	189	A COMMENT	\N	2014-05-30 12:33:43	2014-05-30 12:33:43
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1624, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	5	fetched	2014-03-23 20:11:48.56584	\N	\N
7	6	joined	\N	\N	\N
8	6	fetched	2014-02-01 14:07:48.568847	\N	\N
9	7	joined	\N	\N	\N
10	8	joined	\N	\N	\N
11	8	fetched	2014-01-12 10:22:32.572803	\N	\N
12	9	joined	\N	\N	\N
13	10	joined	\N	\N	\N
14	10	fetched	2014-02-28 00:08:47.576651	\N	\N
15	11	joined	\N	\N	\N
16	11	fetched	2014-02-27 20:03:35.579334	\N	\N
17	12	joined	\N	\N	\N
18	13	joined	\N	\N	\N
19	13	fetched	2014-05-08 20:40:46.58382	\N	\N
20	14	joined	\N	\N	\N
21	14	fetched	2014-05-14 17:34:53.586265	\N	\N
22	15	joined	\N	\N	\N
23	15	fetched	2014-03-18 05:59:21.588846	\N	\N
24	16	joined	\N	\N	\N
25	16	fetched	2014-04-14 16:55:47.592611	\N	\N
26	17	joined	\N	\N	\N
27	17	fetched	2014-07-10 20:00:35.595454	\N	\N
28	18	joined	\N	\N	\N
29	18	fetched	2013-11-24 13:22:20.598063	\N	\N
30	19	joined	\N	\N	\N
31	19	fetched	2013-11-30 19:16:39.600503	\N	\N
32	20	joined	\N	\N	\N
33	20	fetched	2014-05-07 05:29:12.60297	\N	\N
34	21	joined	\N	\N	\N
35	21	fetched	2013-12-16 19:59:04.605374	\N	\N
36	22	joined	\N	\N	\N
37	22	fetched	2014-01-14 18:24:16.607824	\N	\N
38	23	joined	\N	\N	\N
39	23	fetched	2013-11-25 10:15:54.610272	\N	\N
40	24	joined	\N	\N	\N
41	24	fetched	2014-01-23 00:13:45.612862	\N	\N
42	25	joined	\N	\N	\N
43	25	fetched	2014-06-07 09:44:08.616455	\N	\N
44	26	joined	\N	\N	\N
45	26	fetched	2014-03-13 04:22:53.620002	\N	\N
46	27	joined	\N	\N	\N
47	27	fetched	2014-05-27 04:37:57.623382	\N	\N
48	28	joined	\N	\N	\N
49	28	fetched	2013-11-25 02:22:47.626336	\N	\N
50	29	joined	\N	\N	\N
51	29	fetched	2014-04-16 06:41:55.628882	\N	\N
52	30	joined	\N	\N	\N
53	30	fetched	2014-03-20 11:31:38.631232	\N	\N
54	31	joined	\N	\N	\N
55	31	fetched	2014-06-26 01:40:20.633596	\N	\N
56	32	joined	\N	\N	\N
57	32	fetched	2014-07-07 16:39:09.635964	\N	\N
58	33	joined	\N	\N	\N
59	33	fetched	2014-02-02 21:25:48.638276	\N	\N
60	34	joined	\N	\N	\N
61	34	fetched	2014-01-30 03:02:11.640635	\N	\N
62	35	joined	\N	\N	\N
63	35	fetched	2014-01-27 18:48:31.642987	\N	\N
64	36	joined	\N	\N	\N
65	36	fetched	2014-02-13 06:00:54.645403	\N	\N
66	37	joined	\N	\N	\N
67	37	fetched	2014-06-30 14:56:12.64774	\N	\N
68	38	joined	\N	\N	\N
69	39	joined	\N	\N	\N
70	39	fetched	2014-03-17 04:14:32.652022	\N	\N
71	40	joined	\N	\N	\N
72	40	fetched	2013-11-13 20:07:33.654432	\N	\N
73	41	joined	\N	\N	\N
74	41	fetched	2014-04-22 06:33:47.656776	\N	\N
75	42	joined	\N	\N	\N
76	42	fetched	2014-02-17 20:09:59.659155	\N	\N
77	43	joined	\N	\N	\N
78	43	fetched	2014-04-28 21:36:13.661564	\N	\N
79	44	joined	\N	\N	\N
80	44	fetched	2013-12-26 10:46:13.664037	\N	\N
81	45	joined	\N	\N	\N
82	45	fetched	2013-12-13 19:26:10.666441	\N	\N
83	46	joined	\N	\N	\N
84	47	joined	\N	\N	\N
85	47	fetched	2014-04-26 11:15:32.670464	\N	\N
86	48	joined	\N	\N	\N
87	48	fetched	2014-07-25 03:30:06.672846	\N	\N
88	8	submitted	2014-02-20 09:21:43	\N	\N
89	8	received_feedback	2014-07-26 13:41:29	\N	\N
90	27	commented	2014-07-26 13:41:29	\N	\N
91	11	commented	2014-06-09 06:23:09	\N	\N
92	10	commented	2014-07-08 08:04:25	\N	\N
93	1	commented	2014-07-22 00:53:25	\N	\N
94	32	commented	2014-07-24 15:15:10	\N	\N
95	30	commented	2014-05-10 09:20:03	\N	\N
96	45	commented	2014-06-25 00:35:16	\N	\N
97	2	commented	2014-07-24 11:46:43	\N	\N
98	10	submitted	2014-04-19 17:08:32	\N	\N
99	10	received_feedback	2014-06-12 18:53:56	\N	\N
100	4	commented	2014-06-27 15:29:49	\N	\N
101	3	commented	2014-06-02 05:20:30	\N	\N
102	37	commented	2014-06-27 23:08:05	\N	\N
103	28	commented	2014-07-26 14:40:33	\N	\N
104	47	commented	2014-05-13 07:12:35	\N	\N
105	14	commented	2014-05-24 04:05:56	\N	\N
106	43	commented	2014-06-04 21:37:35	\N	\N
107	39	commented	2014-07-01 02:51:43	\N	\N
108	21	commented	2014-07-16 10:20:34	\N	\N
109	8	commented	2014-06-19 10:28:58	\N	\N
110	11	submitted	2014-03-12 17:23:18	\N	\N
111	14	submitted	2014-06-16 07:41:21	\N	\N
112	14	received_feedback	2014-06-22 07:09:17	\N	\N
113	21	submitted	2014-05-17 07:52:44	\N	\N
114	21	received_feedback	2014-06-18 05:01:27	\N	\N
115	27	submitted	2014-06-07 13:37:30	\N	\N
116	27	received_feedback	2014-07-01 07:21:37	\N	\N
117	28	submitted	2014-01-17 09:22:40	\N	\N
118	28	received_feedback	2013-12-31 19:56:44	\N	\N
119	30	submitted	2014-06-27 15:18:06	\N	\N
120	30	received_feedback	2014-07-08 18:27:58	\N	\N
121	32	submitted	2014-07-10 02:06:31	\N	\N
122	32	received_feedback	2014-07-15 00:52:49	\N	\N
123	37	submitted	2014-07-02 15:56:55	\N	\N
124	37	received_feedback	2014-07-04 12:20:36	\N	\N
125	39	submitted	2014-03-17 20:46:27	\N	\N
126	39	received_feedback	2014-03-26 03:54:45	\N	\N
127	43	submitted	2014-05-09 06:34:45	\N	\N
128	43	received_feedback	2014-05-30 15:26:22	\N	\N
129	45	submitted	2014-03-12 08:02:48	\N	\N
130	45	received_feedback	2014-03-15 23:41:55	\N	\N
131	47	submitted	2014-05-18 17:57:10	\N	\N
132	47	received_feedback	2014-07-03 10:54:37	\N	\N
133	48	submitted	2014-07-26 08:41:56	\N	\N
134	48	received_feedback	2014-07-25 18:45:09	\N	\N
135	25	submitted	2014-06-19 01:02:06	\N	\N
136	25	received_feedback	2014-07-04 03:51:09	\N	\N
137	6	submitted	2014-03-03 22:19:03	\N	\N
138	6	received_feedback	2014-06-03 08:15:44	\N	\N
139	22	submitted	2014-03-14 20:53:56	\N	\N
140	22	received_feedback	2014-03-23 04:37:19	\N	\N
141	16	submitted	2014-06-24 08:45:56	\N	\N
142	16	received_feedback	2014-06-28 05:08:13	\N	\N
143	19	submitted	2014-01-22 07:47:24	\N	\N
144	19	received_feedback	2014-06-02 19:56:48	\N	\N
145	20	submitted	2014-05-21 03:56:29	\N	\N
146	20	received_feedback	2014-05-21 11:06:14	\N	\N
147	35	submitted	2014-03-22 04:52:28	\N	\N
148	35	received_feedback	2014-05-17 21:19:31	\N	\N
149	29	submitted	2014-07-09 11:37:39	\N	\N
150	29	received_feedback	2014-07-12 16:45:46	\N	\N
151	34	submitted	2014-03-01 08:59:58	\N	\N
152	34	received_feedback	2014-03-11 23:29:36	\N	\N
153	13	submitted	2014-05-14 04:18:06	\N	\N
154	13	received_feedback	2014-06-17 23:22:49	\N	\N
155	40	submitted	2013-12-23 18:46:36	\N	\N
156	40	received_feedback	2014-02-07 09:35:47	\N	\N
157	5	submitted	2014-05-16 10:56:11	\N	\N
158	5	received_feedback	2014-05-21 06:37:24	\N	\N
159	33	submitted	2014-03-08 03:43:03	\N	\N
160	33	received_feedback	2014-03-11 03:42:53	\N	\N
161	15	submitted	2014-06-03 22:09:04	\N	\N
162	15	received_feedback	2014-07-16 08:08:18	\N	\N
163	17	submitted	2014-07-18 12:54:49	\N	\N
164	23	submitted	2014-01-31 17:36:59	\N	\N
165	41	submitted	2014-04-24 03:31:44	\N	\N
166	26	submitted	2014-04-11 18:32:01	\N	\N
167	44	submitted	2014-01-24 03:02:05	\N	\N
168	25	commented	2014-07-22 00:09:15	\N	\N
169	6	commented	2014-05-19 16:06:55	\N	\N
170	22	commented	2014-05-25 09:25:13	\N	\N
171	16	commented	2014-05-30 12:33:43	\N	\N
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 171, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 1, false);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
1	8	6d7c9edf89a33ed2b72bedde	superseded	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      Regex.match?(%r/[A-Z][a-z].*(\\.|!)$/, message) ->\n        "Whatever."\n      Regex.match?(%r/.*[A-Z]{2,}/, message) ->\n        "Woah, chill out!"\n      Regex.match?(%r/.{1,}?$/, message) ->\n        "Sure."\n      message == "" ->\n        "Fine. Be that way."\n    end\n  end\nend	\N	\N	0	2	2014-02-20 09:21:43	2014-02-20 09:21:43	47172	bob.exs
2	8	f1e185a735d6779bdf22754d	superseded	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      Message.statement?(message) ->\n        "Whatever."\n      Message.yelling?(message) ->\n        "Woah, chill out!"\n      Message.question?(message) ->\n        "Sure."\n      Message.silence?(message) ->\n        "Fine. Be that way."\n    end\n  end\nend\n\ndefmodule Message do\n  def statement?(message) do\n    String.ends_with?(message, ["!", "."]) && Regex.match?(%r/[A-Z][a-z]{1,}/, message)\n  end\n\n  def question?(message) do\n    String.ends_with?(message, "?")\n  end\n\n  def silence?(message) do\n    String.length(message) == 0\n  end\n\n  def yelling?(message) do\n    Regex.match?(%r/.*[A-Z]{2,}/, message)\n  end\nend	\N	\N	0	3	2014-02-24 09:03:52	2014-02-24 09:03:52	47172	bob.exs
3	8	d539bf863d04a8405560f0c6	pending	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      Message.silence?(message) ->\n        "Fine. Be that way."\n      Message.yelling?(message) ->\n        "Woah, chill out!"\n      Message.question?(message) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend\n\ndefmodule Message do\n  def question?(message) do\n    String.ends_with?(message, "?")\n  end\n\n  def silence?(message) do\n    String.length(message) == 0\n  end\n\n  def yelling?(message) do\n    String.upcase(message) == message\n  end\nend	\N	\N	0	4	2014-04-04 21:17:34	2014-04-04 21:17:34	47172	bob.exs
4	8	195f570f2fa39b8faf9f56d9	superseded	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      message == "Tom-ay-to, tom-aaaah-to." ->\n        "Whatever."\n      message == "WATCH OUT!" ->\n        "Woah, chill out!"\n      message == "Does this cryogenic chamber make me look fat?" ->\n        "Sure."\n      message == "Let's go make out behind the gym!" ->\n        "Whatever."\n      message == "1, 2, 3 GO!" ->\n        "Woah, chill out!"\n      message == "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!" ->\n        "Woah, chill out!"\n      message == "I HATE YOU" ->\n        "Woah, chill out!"\n      message == "Ending with ? means a question." ->\n        "Whatever."\n      message == "" ->\n        "Fine. Be that way."\n    end\n  end\nend	\N	\N	0	1	2014-04-15 12:35:59	2014-04-15 12:35:59	47172	bob.exs
5	10	2c65b7f1666b1bcbc8798e0c	superseded	clojure	word-count	(ns phrase\n\t(:require [clojure.string :as str]))\n\n(defn- normalize [string]\n\t(str/lower-case string))\n\n(defn- tokenize [string]\n\t(str/split string #"\\W+"))\n\n(defn word-count \n\t"given a phrase, count the occurrences of each word"\n\t[phrase] \n\t(frequencies (tokenize (normalize phrase))))	\N	\N	0	1	2014-04-19 17:08:32	2014-04-19 17:08:32	39363	word-count.clj
6	10	93459a96e6ea67ebb2d5669f	pending	clojure	word-count	(ns phrase\n\t(:require [clojure.string :as str]))\n\n(defn- normalize [string]\n\t(str/lower-case string))\n\n(defn- tokenize [string]\n\t(str/split string #"\\W+"))\n\n(defn word-count \n\t"given a phrase, count the occurrences of each word"\n\t[phrase] \n\t(-> phrase normalize tokenize frequencies))	\N	\N	0	2	2014-06-05 17:42:46	2014-06-05 17:42:46	39363	word-count.clj
7	10	595b1a015bae7cbab677671d	pending	javascript	rna-transcription	function getEquivalent(char){\n  switch(char) {\n    case "G":\n      match = "C";\n      break;\n    case "C":\n      match = "G";\n      break;\n    case "T":\n      match = "A";\n      break;\n    case "A":\n      match = "U";\n      break;\n  }\n  return match\n}\n\nfunction toRna(string) {\n  var cumulator = "";\n  for (i = 0; i <  string.length; i++){\n    cumulator += getEquivalent(string[i]);\n  }\n  return cumulator;\n}\n\n\nmodule.exports = toRna;	\N	\N	0	1	2014-06-01 10:53:26	2014-06-01 10:53:26	55347	rna-transcription.js
8	10	8c53f570b2144068bcc3e370	pending	javascript	bob	module.exports = Bob;\n\nfunction Bob() {}\n\nBob.prototype.hey = function () {\n  return 'Whatever.';\n};	\N	\N	0	1	2014-04-14 02:21:32	2014-04-14 02:21:32	54475	bob.js
9	10	45bb6b5f1e0972b8fa88d857	pending	clojure	leap	(ns leap)\n\n(defn leap-year?\n  [x]\n (when (= 0 (mod x 4))\n   (or (not= 0 (mod x 100))\n       (= 0 (mod x 400)))))	\N	\N	0	1	2014-04-25 06:53:35	2014-04-25 06:53:35	58826	leap.clj
10	10	a61ce45753af3caf36145237	superseded	ruby	rna-transcription	class DNA \n  def initialize(dna)\n    @dna = dna\n  end\n\n  def to_rna\n    @dna.gsub('T', 'U')\n  end\nend	\N	\N	0	1	2014-04-13 00:44:40	2014-04-13 00:44:40	46709	rna-transcription.rb
11	10	5d90ecdfe4040a31f00ccd43	pending	ruby	rna-transcription	class DNA \n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  def initialize(dna)\n    @dna = dna\n  end\n\n  def to_rna\n    @dna.gsub(THYMIDINE, URACIL)\n  end\nend	\N	\N	0	2	2014-04-27 14:40:10	2014-04-27 14:40:10	46709	rna-transcription.rb
12	10	42c7688e2bbbbe99971acd8d	pending	haskell	atbash-cipher	module Atbash (encode) where\nimport Data.Char (isDigit, toLower)\nimport Data.Maybe (mapMaybe)\nimport Data.List.Split (chunksOf)\n\ncipher :: Char -> Maybe Char\ncipher c | isDigit c              = Just c\n         | lc >= 'a' && lc <= 'z' = Just rotated\n         | otherwise              = Nothing\n  where lc = toLower c\n        rotated = toEnum $ fromEnum 'z' - fromEnum lc + fromEnum 'a'\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . mapMaybe cipher	\N	\N	0	2	2014-03-24 20:33:48	2014-03-24 20:33:48	46770	atbash-cipher.hs
13	10	920e4004d7f9453043326c09	superseded	haskell	atbash-cipher	module Atbash (encode) where\nimport Data.Char (isDigit, toLower)\nimport Data.Maybe (mapMaybe)\nimport Data.List (intercalate)\nimport Data.List.Split (chunksOf)\n\ncipher :: Char -> Maybe Char\ncipher c | isDigit c              = Just c\n         | lc >= 'a' && lc <= 'z' = Just rotated\n         | otherwise              = Nothing\n  where lc = toLower c\n        rotated = toEnum $ fromEnum 'z' - fromEnum lc + fromEnum 'a'\n\nencode :: String -> String\nencode = intercalate " " . chunksOf 5 . mapMaybe cipher	\N	\N	0	1	2014-03-29 18:22:39	2014-03-29 18:22:39	46770	atbash-cipher.hs
14	10	9795cf10f503cef3d47f568b	superseded	haskell	etl	module ETL where\nimport           Data.Char (toLower)\nimport           Data.List (foldl')\nimport qualified Data.Map  as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.foldWithKey enterKey M.empty\n  where  enterKey score = flip (foldr (\\letter -> M.insert (map toLower letter) score))	\N	\N	0	1	2014-04-15 19:26:02	2014-04-15 19:26:02	44086	etl.hs
15	10	2ef3d8e883071680c121bad1	pending	haskell	etl	module ETL where\nimport           Data.Char (toLower)\nimport           Data.List (foldl')\nimport qualified Data.Map  as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.foldWithKey enterKey M.empty\n  where  enterKey score = flip $ foldl' (flip $ \\letter -> M.insert (map toLower letter) score)	\N	\N	0	2	2014-06-06 16:18:05	2014-06-06 16:18:05	44086	etl.hs
16	10	c78de1648eff8243c599df02	pending	ruby	bob	class Bob\n\n  def hey(msg)\n    if silent?(msg)\n      'Fine. Be that way!'\n    elsif asking?(msg)\n      'Sure.'\n    elsif shouting?(msg)\n      'Woah, chill out!'\n    else\n      'Whatever.'\n    end\n  end\n\nprivate\n\n  def silent?(msg)\n    msg =~ /\\A\\s*\\z/\n  end\n\n  def asking?(msg)\n    msg =~ /[\\da-z].*\\?\\z/\n  end\n\n  def shouting?(msg)\n    msg =~ /[A-Z]/ && msg !~ /[a-z]/\n  end\n\nend	\N	\N	0	1	2014-03-08 00:03:11	2014-03-08 00:03:11	41881	bob.rb
17	10	f8b93c79cd49febe5863dca4	pending	ruby	clock	class Clock\n\n  def initialize(time)\n    @time = time\n  end\n\n  def hour\n    @time.hour\n  end\n\n  def minute\n    @time.min\n  end\n\n  def to_s\n    "%02d:%02d" % [ hour, minute ]\n  end\n\n  def +(sec)\n    self.class.new(@time + sec * 60)\n  end\n\n  def -(sec)\n    self + (sec * -1)\n  end\n\n  def ==(clock)\n    to_s == clock.to_s\n  end\n\n  def self.at(h, m=0)\n    Clock.new(Time.new 0, 1, 1, h, m)\n  end\n\nend	\N	\N	0	1	2014-04-08 12:52:30	2014-04-08 12:52:30	50667	clock.rb
18	10	43a60ad62c5802af4781ae39	pending	ruby	grains	class Grains\n\n  def square(count)\n    2**(count - 1)\n  end\n\n  def total\n    total = 0\n\n    (1..64).to_a.each do |i|\n      total += square(i)\n    end\n\n    total\n  end\n\nend	\N	\N	0	1	2014-03-17 22:58:26	2014-03-17 22:58:26	40539	grains.rb
19	10	4121a29b7a810f7a0512eb9c	pending	python	largest-series-product	"""Number series of a given length in a string of digits."""\n\nimport operator\n\n\nclass Series(object):\n    """A series of numbers."""\n\n    def __init__(self, digits):\n        """Create a series of numbers that corresponds to a string of digits.\n\n        :param digits: a string of digits\n        :type digits: str\n        """\n        self.numbers = SlidingWindowList(int(digit) for digit in digits)\n\n    def __repr__(self):\n        cls = self.__class__\n        return "{!s}.{!s}({!r})".format(\n            cls.__module__, cls.__name__,\n            "".join(str(number) for number in self.numbers))\n\n    def islice(self, size):\n        """Return an iterator that returns slices (step=1) of a given size."""\n        try:\n            return self.numbers.sliding_window(size)\n        except WindowSizeError as err:\n            raise ValueError(\n                "Invalid slice length for this series: {}".format(err))\n\n    def slices(self, size):\n        """Return a list of slices (step=1) of a given size."""\n        return list(self.islice(size))\n\n    def largest_product(self, size):\n        """Return the largest product of slices (step=1) of a given size."""\n        products = (\n            reduce(operator.mul, slice_, 1) for slice_ in self.islice(size)\n        )\n        return max(products)\n\n\nclass WindowSizeError(Exception):\n    """Raised when a window size is invalid."""\n    pass\n\n\nclass SlidingWindowList(list):\n    """``list`` extended to support a sliding window."""\n\n    def sliding_window(self, size):\n        """Return a sliding window.\n\n        :param size: the window size\n        :rtype: iterator\n        :raise WindowSizeError: if 1) the window size is less than zero, 2) the\n                                window size is equal to zero and the list is\n                                non-empty, or 3) the window size is greater\n                                than the length of the list\n        """\n        if size < 0 or (size == 0 and self) or size > len(self):\n            raise WindowSizeError(size)\n        return (\n            self[start:start + size] for start in xrange(len(self) - size + 1)\n        )	\N	\N	0	1	2014-05-12 07:13:28	2014-05-12 07:13:28	53220	series.py
20	10	d21c069fb3b1a63ea07de6b4	pending	javascript	robot-simulator	var Robot = function () {\n  this.coordinates = [0, 0];\n  this.bearing = 'north';\n};\n\nRobot.prototype.at = function (x, y) {\n  this.coordinates = [x, y];\n};\n\nRobot.prototype.orient = function (direction) {\n  this.bearing = direction;\n};\n\nRobot.prototype.advance = function () {\n  if (this.bearing === 'north') {\n    this.coordinates[1] += 1;\n  } else if (this.bearing === 'south') {\n    this.coordinates[1] -= 1;\n  } else if (this.bearing === 'east') {\n    this.coordinates[0] += 1;\n  } else if (this.bearing === 'west') {\n    this.coordinates[0] -= 1;\n  }\n};\n\nRobot.prototype.turnLeft = function () {\n  if (this.bearing === 'north') {\n    this.orient('west');\n  } else if (this.bearing === 'south') {\n    this.orient('east');\n  } else if (this.bearing === 'east') {\n    this.orient('north');\n  } else if (this.bearing === 'west') {\n    this.orient('south');\n  }\n};\n\nRobot.prototype.turnRight = function () {\n  if (this.bearing === 'north') {\n    this.orient('east');\n  } else if (this.bearing === 'south') {\n    this.orient('west');\n  } else if (this.bearing === 'east') {\n    this.orient('south');\n  } else if (this.bearing === 'west') {\n    this.orient('north');\n  }\n};\n\nRobot.prototype.instructions = function (str) {\n  var result = [];\n  str.split('').forEach(function (character) {\n    if (character === 'L') {\n      result.push('turnLeft');\n    } else if (character === 'R') {\n      result.push('turnRight');\n    } else if (character === 'A') {\n      result.push('advance');\n    }\n  });\n  return result;\n};\n\nRobot.prototype.place = function (options) {\n  this.coordinates = [options.x, options.y];\n  this.bearing = options.direction;\n};\n\nRobot.prototype.evaluate = function (str) {\n  this.instructions(str).forEach(function (instruction) {\n    this[instruction]();\n  }, this);\n};	\N	\N	0	1	2014-03-27 08:00:27	2014-03-27 08:00:27	56258	robot-sim.js
21	10	13311df5b849804a13317a2a	superseded	javascript	word-count	var Words = function (words) {\n  'use strict';\n\n  this.count = { };\n\n  this.parseWords = function(words) {\n    return words.replace(/[^\\w\\s]/gi, '').toLowerCase().split(' ');\n  }\n\n  this.wordCounted = function(word) {\n    if (this.count == 'undefined') { return false; }\n    return this.count[word];\n  }\n\n  this.addWord = function(word) {\n    this.count[word] = 1;\n  };\n\n  this.incrementWord = function(word) {\n    this.count[word]++;\n  }\n\n  this.initialize = function(words){\n    var wordList = this.parseWords(words);\n    for (var item in wordList) {\n      var word = wordList[item];\n      if (word == '') {\n        continue;\n      }\n      if (this.wordCounted(word)) {\n        this.incrementWord(word);\n      } else {\n        this.addWord(word);\n      }\n    }\n  };\n\n  this.initialize(words);\n};\n\nmodule.exports = Words;	\N	\N	0	1	2014-04-05 11:39:57	2014-04-05 11:39:57	41973	word-count.js
22	10	185f817a299157eb5c75a310	superseded	javascript	word-count	var Words = function (words) {\n  'use strict';\n\n  this.count = { };\n  this.words = [];\n\n  this.parseWords = function(words) {\n    var temp_words = words.replace(/[^\\w\\s]/gi, '').toLowerCase().split(' ');\n    return temp_words.filter(function(word){\n      return word != "";\n    });\n  }\n\n  this.wordCounted = function(word) {\n    if (this.count == 'undefined') { return false; }\n    return this.count[word];\n  }\n\n  this.addWord = function(word) {\n    this.count[word] = \n    this.words.filter(function(x){\n      return x === word;\n    }).length;\n  };\n\n  this.initialize = function(words){\n    this.words = this.parseWords(words);\n    for (var item in this.words) {\n      var word = this.words[item];\n      if (!this.wordCounted(word)) {\n        this.addWord(word);\n      }\n    }\n  };\n\n  this.initialize(words);\n};\n\nmodule.exports = Words;	\N	\N	0	2	2014-04-21 22:18:47	2014-04-21 22:18:47	41973	word-count.js
23	10	13674f0c522321689bbb6371	superseded	javascript	word-count	var Words = function (words) {\n  'use strict';\n\n  this.count = { };\n  this.words = [];\n\n  this.parseWords = function(words) {\n    var temp_words = words.replace(/[^\\w\\s]/gi, '').toLowerCase().split(' ');\n    return temp_words.filter(function(word){\n      return word != "";\n    });\n  }\n\n  this.wordCounted = function(word) {\n    if (this.count == 'undefined') { return false; }\n    return this.count[word];\n  }\n\n  this.addWord = function(word) {\n    this.count[word] = \n    this.words.filter(function(a_word){\n      return a_word === word;\n    }).length;\n  };\n\n  this.initialize = function(words){\n    this.words = this.parseWords(words);\n    for (var item in this.words) {\n      var word = this.words[item];\n      if (!this.wordCounted(word)) {\n        this.addWord(word);\n      }\n    }\n  };\n\n  this.initialize(words);\n};\n\nmodule.exports = Words;	\N	\N	0	3	2014-06-21 10:59:00	2014-06-21 10:59:00	41973	word-count.js
24	10	8d42290edf8b7b0360424851	pending	javascript	word-count	var Words = function (string) {\n  'use strict';\n\n  var removeSpecialCharacters = function(string){\n    return string.replace(/[^\\w\\s]/gi, '');\n  }\n\n\n  var parseWords = function(string) {\n    return string.toLowerCase().split(/\\s+/);\n  }\n\n  var reduceWordCount = function(words, word){\n      words[word] = (words[word]||0)+1;\n      return words;\n  }\n\n  this.count = parseWords(removeSpecialCharacters(string)).reduce(reduceWordCount, {});\n\n};\n\nmodule.exports = Words;	\N	\N	0	4	2014-06-23 07:51:17	2014-06-23 07:51:17	41973	word-count.js
25	10	787bfc700f42e6307abd69e3	pending	coffeescript	anagram	class Anagram\n\n  constructor: (word) ->\n    @word = word.toLowerCase()\n\n  match: (words) ->\n    (word.toLowerCase() for word in @filterOriginal(words) when @isAnagram(word))\n\n  normalize: (word) ->\n    "#{word.toLowerCase().split("").sort()}"\n\n  filterOriginal: (words) ->\n    words.filter (word) => word.toLowerCase() isnt @word\n\n  isAnagram: (word) ->\n    @normalize(@word) == @normalize(word)\n\nmodule.exports = Anagram	\N	\N	0	1	2014-03-17 03:42:18	2014-03-17 03:42:18	52048	anagram.coffee
26	10	ca15fd72559e12c408cc3e1d	superseded	ruby	leap	class Year\n\tdef self.leap? year\n\t\t(year % 4 == 0 || year % 400 == 0) unless year % 400 == 0\n\tend\nend	\N	\N	0	2	2014-03-03 02:47:57	2014-03-03 02:47:57	55026	year.rb
27	10	f4e1b092ab26002bac7edc45	pending	ruby	leap	class Year\n\tdef self.leap? year\n\t\t(year % 4 == 0 && year % 100 != 0) || year % 400 == 0 \n\tend\nend	\N	\N	0	3	2014-05-14 22:47:46	2014-05-14 22:47:46	55026	year.rb
28	10	dc1ea192c7a24dfd4403669f	superseded	ruby	leap	class Year\n\tdef self.leap? year\n\t\t(year % 4 == 0 && !(year % 100 == 0)) || (year % 100 == 0 && year % 400 == 0)\n\tend\nend	\N	\N	0	1	2014-05-25 05:43:51	2014-05-25 05:43:51	55026	year.rb
29	10	541dd06428534a9fb4f4d0cf	pending	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    @db[grade] ||= []\n    @db[grade] << name\n  end\n\n  def grade(grade)\n    @db[grade] || []\n  end\n\n  def sort\n    Hash[@db.sort.map{|k,v| [k, v.sort]}]\n  end\nend	\N	\N	0	3	2014-03-02 20:21:33	2014-03-02 20:21:33	48239	school.rb
30	10	bfe57b54f8c5aa158d6ec7dc	superseded	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    @db[grade] ||= []\n    @db[grade] << name\n  end\n\n  def grade(grade)\n    @db[grade] || []\n  end\n\n  def sort\n    @db.sort\n  end\nend\n\nclass Hash\n  def sort\n    keys = self.keys.sort\n    sorted = keys.map {|k| [k, self[k].sort]}\n    Hash[sorted]\n  end\nend	\N	\N	0	2	2014-03-11 20:50:28	2014-03-11 20:50:28	48239	grade-school.rb
31	10	f5836f66946cf32dfcc9dcfe	superseded	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    @db[grade] = [] if @db[grade].nil?\n    @db[grade] << name\n  end\n\n  def grade(grade)\n    grade = @db[grade]\n    return [] if grade.nil? || grade.empty?\n    grade\n  end\n\n  def sort\n    keys = @db.keys.sort\n    keys.inject({}) {|sorted, grade| sorted.merge(grade => @db[grade].sort)}\n  end\nend	\N	\N	0	1	2014-03-26 23:56:07	2014-03-26 23:56:07	48239	grade-school.rb
32	10	cf84211ea2b5da16dc772cba	superseded	scala	word-count	/**\n * Created by jindrich on 26.4.14.\n */\nclass Phrase(content: String) {\n  def wordCount: Map[String, Int] = {\n    val words = content.split("""[\\p{Space}\\p{Punct}]+""")\n\n    words.map((_, 1)).groupBy(_._1).map { case (w, occ) => (w, occ.size) }\n  }\n}	\N	\N	0	1	2014-04-15 13:08:34	2014-04-15 13:08:34	55170	Phrase.scala
33	10	1e29fba54ba12b40e29c9c4a	pending	scala	word-count	/**\n * Created by jindrich on 26.4.14.\n */\nclass Phrase(content: String) {\n  def wordCount: Map[String, Int] = {\n    val words = content.split("""[\\p{Space}\\p{Punct}]+""")\n\n    words.groupBy(identity).mapValues(_.size)\n  }\n}	\N	\N	0	2	2014-06-18 14:51:30	2014-06-18 14:51:30	55170	Phrase.scala
34	10	50d87b17f4efc1b45c752808	pending	ruby	triangle	class Triangle\n\n  attr_reader :left, :right, :bottom, :sides\n\n  def initialize(left, right, bottom)\n    @left = left\n    @right = right\n    @bottom = bottom\n    @sides = [left, right, bottom]\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 }\n    raise TriangleError if inequal?\n    return :equilateral if @sides.uniq.count == 1\n    return :isosceles if @sides.uniq.count == 2\n    return :scalene if @sides.uniq.count == 3\n  end\n\n  def inequal?\n    max = @sides.sort.last\n    if @sides.sort[0] + @sides.sort[1] <= max\n      return true\n    else\n      false\n    end\n  end\n\nend\n\nclass TriangleError < StandardError\n\nend	\N	\N	0	1	2014-03-08 12:08:43	2014-03-08 12:08:43	54794	triangle.rb
35	10	e8e9ca4689a35ed7b2fd66d3	pending	perl5	simple-cipher	package Cipher;\n\nuse strict;\nuse warnings;\n\nuse constant DEFAULT_KEY => "a";\n\nsub new { \n    my $class = shift;\n    (bless {key => []}, $class)->validate(shift);\n}\n\nsub validate {\n    my $self = shift;\n    my $key = shift // DEFAULT_KEY;\n\n    die "ArgumentError" unless length $key;\n    die "ArgumentError" if $key =~ /[A-Z]|\\d/;\n    \n    $self->{key} = [ split //, $key ];\n    return $self;\n}\n\nsub ord_base { ord($_[0]) - ord("a") }\n\nsub shift :method {\n    my $self      = shift;\n    my $input     = lc shift;\n    my $direction = shift;\n\n    $input =~ s/[\\W\\d]//g;\n\n    my $transform = sub {\n\tmy( $key, $letter ) = @_;\n\n\tmy $encoded = ord_base( $letter ) + ord_base($key) * $direction;\n\t$encoded = $encoded % (ord_base('z')+1);\n\treturn chr( $encoded + ord("a") );\n    };\n\n    my @key = @{ $self->{key} };\n    join '', map { $transform->( shift @key || DEFAULT_KEY, $_ ) }\n      split //, $input;\n}\n\nsub encode {\n    my $self = shift;\n    return $self->shift(@_, 1);\n}\n\nsub decode {\n    my $self  = shift;\n    return $self->shift(@_, -1);\n}\n\n1;	\N	\N	0	1	2014-05-01 06:05:19	2014-05-01 06:05:19	57116	Cipher.pm
36	10	1bfd0fd5990bb3554b561f33	pending	javascript	luhn	var Luhn = function(rawNumber) {\r\n  var rawDigits = function() {\r\n        var digits = [], n = rawNumber;\r\n        while(n > 0) {\r\n          digits.unshift(n % 10);\r\n          n = Math.floor(n / 10);\r\n        }\r\n        return digits;\r\n      },\r\n      modifyDigit = function(d) {\r\n        if(d < 5)\r\n          return d * 2;\r\n        else\r\n          return d * 2 - 9;\r\n      };\r\n\r\n  this.getCheckDigit = function() {\r\n    return rawNumber % 10;\r\n  };\r\n\r\n  this.getAddends = function() {\r\n    var digits = rawDigits().reverse(), i, len = digits.length;\r\n    for(i = 0; i < len; i++) {\r\n      if(i % 2 != 0)\r\n        digits[i] = modifyDigit(digits[i]);\r\n    }\r\n    return digits.reverse();\r\n  };\r\n\r\n  this.getChecksum = function() {\r\n    return this.getAddends().reduce(function(sum, a) { return sum + a}, 0);\r\n  };\r\n\r\n  this.isValid = function() {\r\n    return this.getChecksum() % 10 == 0;\r\n  };\r\n\r\n  this.checkDigit = this.getCheckDigit();\r\n  this.addends = this.getAddends();\r\n  this.checksum = this.getChecksum();\r\n  this.valid = this.isValid();\r\n};\r\n\r\nLuhn.create = function(firstDigits) {\r\n  var shiftedDigits = firstDigits*10,\r\n      firstLuhn = new Luhn(shiftedDigits),\r\n      check = firstLuhn.checksum % 10,\r\n      newCheck = check ? 10 - check : 0;\r\n  return shiftedDigits + newCheck;\r\n};\r\n\r\nmodule.exports = Luhn;\r	\N	\N	0	1	2014-04-15 20:02:57	2014-04-15 20:02:57	48337	luhn.js
37	10	6df02c68c5de596815bd8f05	pending	ruby	binary	class Binary\n  attr_reader :binary_string\n  def initialize(binary_string)\n    @binary_string = binary_string\n  end\n\n  def to_decimal\n    place_values.inject(&:+)\n  end\n\nprivate\n\n  def place_values\n    binary_string.reverse.chars.map.with_index do |digit, power|\n      digit.to_i * (2 ** power)\n    end\n  end\nend	\N	\N	0	1	2014-04-17 02:00:50	2014-04-17 02:00:50	39454	binary.rb
38	10	142466c054c45f8a8334c24d	superseded	clojure	bob	(ns bob)\n(defn question? [x] \n     (= (subs x (- (count x) 1) (count x)) "?"))          \n(defn shouting? [x] \n     (= (clojure.string/upper-case x) x))\n(defn nothing? [x] \n  (clojure.string/blank? x))             \n(defn response-for [x]\n      (cond\n          (nothing? x) "Fine, be that way."\n          (question? x) "Sure."\n          (shouting? x) "Woah, chill out!"\n          :else "Whatever."))\n          	\N	\N	0	2	2014-03-04 17:14:03	2014-03-04 17:14:03	45799	bob.clj
39	10	fa8d2585b789c3855e5ff8fb	superseded	clojure	bob	(ns bob)\n(defn allchars [x]\n     (seq x))\n(defn question2? [x] \n     (= (last (seq x)) "?"))\n(defn question? [x] \n     (= (subs x (- (count x) 1) (count x)) "?"))          \n(defn shouting? [x] \n     (= (clojure.string/upper-case x) x))\n(defn nothing? [x] \n     (clojure.string/blank? x))             \n(defn response-for [x]\n     (cond\n        (nothing? x) "Fine, be that way."\n        (question? x) "Sure."\n        (shouting? x) "Woah, chill out!"\n        :else "Whatever."))\n          	\N	\N	0	4	2014-03-29 08:34:22	2014-03-29 08:34:22	45799	bob.clj
40	10	c33b819d648ba8083a6b3721	superseded	clojure	bob	(ns bob)\n(defn question2? [remark] \n     (= \\? (last remark)))\n(defn question? [remark] \n     (= (subs remark (- (count remark) 1) (count remark)) "?"))          \n(defn shouting? [remark] \n     (= (clojure.string/upper-case remark) remark))\n(defn nothing? [remark] \n     (clojure.string/blank? remark))             \n(defn response-for [remark]\n     (cond\n        (nothing? remark) "Fine, be that way."\n        (question2? remark) "Sure."\n        (shouting? remark) "Woah, chill out!"\n        :else "Whatever."))\n          	\N	\N	0	6	2014-04-21 22:09:00	2014-04-21 22:09:00	45799	bob.clj
41	10	9cc86d5f426053e767bb33e0	superseded	clojure	bob	(ns bob)\n(defn response-for [x]\n      (cond\n          (clojure.string/blank? x) "Fine, be that way."\n          (= (subs x (- (count x) 1) (count x)) "?") "Sure."\n          (= (clojure.string/upper-case x) x) "Woah, chill out!"\n          :else "Whatever."))	\N	\N	0	1	2014-05-12 15:49:10	2014-05-12 15:49:10	45799	bob.clj
42	10	49d6d2b8f09d7ce005dd2172	superseded	clojure	bob	(load-file "bob.clj")\n(assert (= "Woah, chill out!"   (bob/response-for "SHOUTING")))\n(assert (= "Sure."              (bob/response-for "A question?")))\n(assert (= "Whatever."          (bob/response-for "A statement.")))\n(assert (= "Fine, be that way." (bob/response-for "")))	\N	\N	0	5	2014-06-06 08:22:34	2014-06-06 08:22:34	45799	bob.clj
43	10	ad5f0798eea7c31db683020e	superseded	clojure	bob	(load-file "bob.clj")\n(assert (= "Woah, chill out!"   (bob/response-for "SHOUTING")))\n(assert (= "Sure."              (bob/response-for "A question?")))\n(assert (= "Whatever."          (bob/response-for "A statement.")))\n(assert (= "Fine, be that way." (bob/response-for "")))	\N	\N	0	3	2014-06-10 06:24:53	2014-06-10 06:24:53	45799	bob.clj
44	10	3c8b39ca4c413a876fb4b58a	pending	clojure	bob	(ns bob)\n(require ['clojure.string :as 's])\n(defn question? [remark] \n     (= \\? (last remark)))\n(defn shouting? [remark] \n     (= (s/upper-case remark) remark))\n(defn nothing? [remark] \n     (s/blank? remark))             \n(defn response-for [remark]\n     (cond\n        (nothing? remark) "Fine, be that way."\n        (question? remark) "Sure."\n        (shouting? remark) "Woah, chill out!"\n        :else "Whatever."))\n          	\N	\N	0	7	2014-06-19 02:15:06	2014-06-19 02:15:06	45799	bob.clj
45	10	ef163a4305a458d323b923bd	pending	clojure	beer-song	(ns beer\n  (:require [clojure.string :refer [join]]))\n\n(defn construct-no-verse []\n  "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n")\n\n(defn indefinite-article [num]\n  (if (= num 1)\n    "it"\n    "one"))\n\n(defn pluralize-bottle [num]\n  (cond\n   (= num 0) "no more bottles"\n   (= num 1) "1 bottle"\n   (> num 1) (str num " bottles")))\n\n(defn construct-verse [num]\n  (str (pluralize-bottle num)\n       " of beer on the wall, "\n       (pluralize-bottle num)\n       " of beer.\\nTake "\n       (indefinite-article num)\n       " down and pass it around, "\n       (pluralize-bottle (- num 1))\n       " of beer on the wall.\\n"))\n\n(defn verse [num]\n  (if (= 0 num)\n   (construct-no-verse)\n   (construct-verse num)))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end]\n   (join "\\n" (map verse (range start (- end 1) -1)))))	\N	\N	0	1	2014-07-01 17:44:22	2014-07-01 17:44:22	52283	beer.clj
46	10	64a20df7e3917432d07173a5	pending	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase) ->\n        "Fine. Be that way."\n      question?(phrase) ->\n        "Sure."\n      yell?(phrase) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  def silence?(phrase) do\n    String.length(phrase) == 0\n  end\n\n  def question?(phrase) do\n    String.ends_with?(phrase, "?")\n  end\n\n  def yell?(phrase) do\n    String.upcase(phrase) == phrase\n  end\nend	\N	\N	0	1	2014-05-25 16:09:00	2014-05-25 16:09:00	40154	bob.exs
47	10	67061186090461db79b31ffb	pending	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [xs ys]\n  (get (frequencies (map = xs ys)) false 0))	\N	\N	0	1	2014-04-09 19:56:23	2014-04-09 19:56:23	39169	point-mutations.clj
48	10	bd27640f8c46eb81c7984718	superseded	haskell	rna-transcription	import Test.HUnit (Assertion, (@=?), runTestTT, Test(..))\nimport Control.Monad (void)\nimport DNA (toRNA)\n\ntestCase :: String -> Assertion -> Test\ntestCase label assertion = TestLabel label (TestCase assertion)\n\ntoRNATests :: [Test]\ntoRNATests =\n  [ testCase "transcribes cytidine unchanged" $\n    "C" @=? toRNA "C"\n  , testCase "transcribes guanosine unchanged" $\n    "G" @=? toRNA "G"\n  , testCase "transcribes adenosine unchanged" $\n    "A" @=? toRNA "A"\n  , testCase "transcribes thymidine to uracil" $\n    "U" @=? toRNA "T"\n  , testCase "transcribes all occurrences of thymidine to uracil" $\n    "ACGUGGUCUUAA" @=? toRNA "ACGTGGTCTTAA"\n  ]\n\nmain :: IO ()\nmain = void (runTestTT (TestList toRNATests))	\N	\N	0	1	2014-04-13 07:11:21	2014-04-13 07:11:21	44782	rna-transcription.hs
49	10	3c46f8f2c42ad22dbf822325	pending	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA = map toRNAc\n  where toRNAc 'T' = 'U'\n        toRNAc c   = c	\N	\N	0	2	2014-06-13 01:54:39	2014-06-13 01:54:39	44782	rna-transcription.hs
50	10	5d3fc269abe00d4cf3ecc233	pending	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char(toTitle)\n\nsing :: Int -> Int -> String\nsing first last =\n  unlines(map verse [first,first-1..last])\n\nverse :: Int -> String\nverse n = (first_line n) ++ (second_line n)\n\nfirst_line n =\n  title(bottles n) ++ " on the wall, "++(bottles n)++".\\n"\nsecond_line 0 =\n  "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nsecond_line 1 =\n  "Take it down and pass it around, "++(bottles 0)++" on the wall.\\n"\nsecond_line n =\n  "Take one down and pass it around, "++(bottles (n-1))++" on the wall.\\n"\n\nbottles 0 = "no more bottles of beer"\nbottles 1 = "1 bottle of beer"\nbottles n = show(n) ++ " bottles of beer"\n\ntitle :: String -> String\ntitle [] = []\ntitle (c:xs) = (toTitle(c):xs)	\N	\N	0	1	2014-06-19 12:34:32	2014-06-19 12:34:32	43161	beer-song.hs
51	10	65ebfe0c0d8e8c1417176ff6	superseded	go	word-count	package wc\n\nimport (\n  "strings"\n  "regexp"\n)\n\ntype Histogram map[string]int\n\nfunc (a Histogram) Equal(b Histogram) bool {\n  if len(a) != len(b) {\n    return false\n  }\n  for key, value := range a {\n    if b[key] != value {\n      return false\n    }\n  }\n  return true\n}\n\nfunc WordCount(input string) Histogram {\n  output := make(Histogram)\n  input = stripPunctuation(input)\n\n  words := strings.Split(input, " ")\n\n  for _, word := range words {\n    if len(word) > 0 {\n      output[strings.ToLower(word)] += 1\n    }\n  }\n  return output\n}\n\nfunc stripPunctuation(input string) string {\n  re := regexp.MustCompile(`[\\.\\:,!\\$@%\\^&\\*]`)\n  clean := re.ReplaceAllString(input, "")\n  return clean\n}	\N	\N	0	2	2014-03-28 17:18:26	2014-03-28 17:18:26	49756	word_count.go
52	10	4afc7cbd1a9de167ab789472	pending	go	word-count	package wc\n\nimport (\n\t"strings"\n)\n\nfunc (a Histogram) Equal(b Histogram) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\tfor key, value := range a {\n\t\tif b[key] != value {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc WordCount(input string) Histogram {\n\tdelimiters := []rune{'.', ':', '!', ' ', '$', '@', '&', '*', '%', '^', ','}\n\toutput := make(Histogram)\n\n\twords := strings.FieldsFunc(\n\t\tinput,\n\t\tfunc(c rune) bool {\n\t\t\treturn runeInSlice(c, delimiters)\n\t\t})\n\n\tfor _, word := range words {\n\t\toutput[strings.ToLower(word)] += 1\n\t}\n\treturn output\n}\n\nfunc runeInSlice(a rune, list []rune) bool {\n\tfor _, b := range list {\n\t\tif b == a {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}	\N	\N	0	3	2014-03-30 11:03:34	2014-03-30 11:03:34	49756	word_count.go
53	10	b33773a72637023c847895d4	superseded	go	word-count	package wc\n\nimport (\n  "strings"\n  "regexp"\n)\n\ntype Histogram map[string]int\n\nfunc (a Histogram) Equal(b Histogram) bool {\n  if len(a) != len(b) {\n    return false\n  }\n  for key, value := range a {\n    if b[key] != value {\n      return false\n    }\n  }\n  return true\n}\n\nfunc WordCount(input string) Histogram {\n  output := make(Histogram)\n  input = stripPunctuation(input)\n\n  words := strings.Split(input, " ")\n\n  for _, word := range words {\n    if len(word) > 0 {\n      output[strings.ToLower(word)] += 1\n    }\n  }\n  return output\n}\n\nfunc stripPunctuation(input string) string {\n  re := regexp.MustCompile(`[.\\:,!\\$@%\\^&\\*]`)\n  clean := re.ReplaceAllString(input, "")\n  return clean\n}	\N	\N	0	1	2014-07-04 20:31:47	2014-07-04 20:31:47	49756	word_count.go
54	10	8d0a5ae2f3db87b1a9b89a5f	pending	perl5	hexadecimal	package Hexadecimal;\n\nuse strict;\nuse warnings;\n\nuse List::Util qw/sum/;\n\nsub new {\n    my $class = shift;\n    bless {hex => shift}, $class;\n}\n\nsub to_decimal {\n    my $self = shift;\n\n    my %map; @map{'a'..'f'} = (10..15);\n\n    my $i;\n    return sum map { 16 ** $i++ * $_ }\n      map { $map{$_} || (/\\d/ ? $_ : return 0) } \n      reverse split //, $self->{hex};\n}\n\n1;	\N	\N	0	1	2014-05-03 11:53:47	2014-05-03 11:53:47	57182	Hexadecimal.pm
55	10	bcdf8173f3a684df47b53ebb	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Text.Printf (printf)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = counter n ns\n    | otherwise = error $ printf "invalid nucleotide '%c'" n\n    where\n      allNucleotides = 'U' : commonNucleotides\n      counter n = length . filter (n==)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	\N	0	1	2014-03-07 00:35:14	2014-03-07 00:35:14	55565	dna.hs
56	10	0cbb6b5634b0455670dc4268	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = counter n ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n      counter n      = length . filter (n==)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	\N	0	3	2014-03-29 03:10:43	2014-03-29 03:10:43	55565	dna.hs
57	10	0f49582c975282b05b8cdf3e	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = counter n ns\n    | otherwise = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n      counter n = length . filter (n==)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	\N	0	2	2014-03-31 05:58:11	2014-03-31 05:58:11	55565	dna.hs
58	10	8e6f3ab62dd50c01527661d1	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = length $ filter (n==) ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	\N	0	4	2014-04-10 09:06:09	2014-04-10 09:06:09	55565	dna.hs
59	10	3e99bc94d80b7325d1e0297d	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map.Strict (Map, empty, insertWith, fromList)\nimport Data.List (foldl')\n\ncommonNucleotides = "ACTG"\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = length $ filter (n==) ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = foldl' insertCount defaultMap\n  where\n    insertCount m n = insertWith (+) n 1 m\n    defaultMap      = fromList [('A', 0), ('T', 0), ('C', 0), ('G', 0)]	\N	\N	0	5	2014-04-25 05:06:17	2014-04-25 05:06:17	55565	dna.hs
60	10	d7820e2f8209eab969787289	pending	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map.Strict (Map, empty, insertWith, fromList)\nimport Data.List (foldl')\n\ncommonNucleotides = "ACTG"\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = length $ filter (n==) ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = foldl' insertCount defaultMap\n  where\n    insertCount m n = insertWith (+) n 1 m\n    defaultMap      = fromList (zip commonNucleotides (repeat 0))	\N	\N	0	6	2014-06-06 05:20:29	2014-06-06 05:20:29	55565	dna.hs
61	10	f0f88b4bfe3f39a3fe0baa8f	pending	scala	leap	case class Year(value: Int) {\n  def isLeap = divisibleBy(2000) || divisibleBy(4) && !divisibleBy(100)\n\n  private def divisibleBy(n: Int) = value % n == 0\n}	\N	\N	0	1	2014-05-10 05:49:43	2014-05-10 05:49:43	55446	leap.scala
62	10	20992c11dc4a450db766dd41	superseded	ruby	word-count	class Phrase\n  attr_reader :data\n\n  def initialize(input)\n   words = input.downcase.scan(/[\\w']+/)\n   @data = Hash.new(0)\n    words.each do |word|\n      data[word] += 1\n    end\n  end\n\n\n  def word_count\n    data\n  end\n\n\nend	\N	\N	0	1	2014-03-25 08:08:51	2014-03-25 08:08:51	42547	word-count.rb
63	10	1130d2cb191660b8fdec342e	superseded	ruby	word-count	class Phrase\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def words\n    input.downcase.scan(/[\\w']+/)\n  end\n\n  def word_count\n    count = Hash.new(0)\n    words.each do |word|\n      count[word] += 1\n    end\n    return count\n  end\n\nend	\N	\N	0	2	2014-03-26 08:13:02	2014-03-26 08:13:02	42547	word-count.rb
64	10	791be4dc29faaa52277a8ffa	pending	ruby	word-count	class Phrase\n  attr_reader :content\n\n  def initialize(content)\n    @content = content\n  end\n\n  def words\n    content.downcase.scan(/[\\w']+/)\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, count|\n      count[word] += 1\n    end\n  end\n\nend	\N	\N	0	3	2014-04-30 01:21:42	2014-04-30 01:21:42	42547	word-count.rb
65	10	152862ed9fe33339305f8768	superseded	python	bob	'''\nBob listens to a sentence\nand replies accordingly.\n'''\nclass Bob:\n\tdef hey(self, sentence):\n\t\t# if sentence is empty or whitespace\n\t\tif not sentence.strip():\n\t\t\treturn 'Fine. Be that way!'\n\t\t# if sentence is all uppercase and contains at least one uppercase letter\n\t\tif sentence == sentence.upper() and any(x.isupper() for x in sentence):\n\t\t\treturn 'Woah, chill out!'\n\t\t# if sentence ends with ?\n\t\tif sentence[len(sentence)-1] == '?':\n\t\t\treturn 'Sure.'\n\t\t# else return default\n\t\treturn 'Whatever.'	\N	\N	0	1	2014-03-01 06:03:09	2014-03-01 06:03:09	49648	bob.py
277	35	7e603ea08e6631f921945a3f	superseded	python	rna-transcription	class DNA(object):\n\tdef __init__(self, sequence):\n\t\tself.sequence = sequence\n\t\t\n\tdef to_rna(self):\n\t\treturn self.sequence.replace('T','U')	\N	\N	0	1	2014-05-19 23:02:40	2014-05-19 23:02:40	47558	rna-transcription.py
66	10	7258511c448f9dbbf7d9aaea	superseded	python	bob	'''\r\nBob listens to a sentence\r\nand replies accordingly.\r\n'''\r\nclass Bob:\r\n\tdef hey(self, sentence):\r\n\t\t# if sentence is empty or whitespace\r\n\t\tif not sentence.strip():\r\n\t\t\treturn 'Fine. Be that way!'\r\n\t\t# if sentence is all uppercase\r\n\t\tif sentence == sentence.upper() and sentence.upper() != sentence.lower():\r\n\t\t\treturn 'Woah, chill out!'\r\n\t\t# if sentence ends with ?\r\n\t\tif sentence[len(sentence)-1] == '?':\r\n\t\t\treturn 'Sure.'\r\n\t\t# else return default\r\n\t\treturn 'Whatever.'\r	\N	\N	0	2	2014-03-26 10:01:41	2014-03-26 10:01:41	49648	bob.py
67	10	71dadebab3af01a855d23cb1	pending	python	bob	'''\r\nBob listens to a sentence\r\nand replies accordingly.\r\n'''\r\nclass Bob:\r\n\tdef hey(self, sentence):\r\n\t\t# if sentence is empty or whitespace\r\n\t\tif not sentence.strip():\r\n\t\t\treturn 'Fine. Be that way!'\r\n\t\t# if sentence is all uppercase\r\n\t\tif sentence == sentence.upper() and sentence.upper() != sentence.lower():\r\n\t\t\treturn 'Woah, chill out!'\r\n\t\t# if sentence ends with ?\r\n\t\tif sentence.endswith("?"):\r\n\t\t\treturn 'Sure.'\r\n\t\t# else return default\r\n\t\treturn 'Whatever.'\r	\N	\N	0	3	2014-05-22 00:15:43	2014-05-22 00:15:43	49648	bob.py
68	11	02e16a9ded255531373f9349	superseded	ruby	hamming	class Hamming\n  def self.compute(a,b)\n    distance = 0\n    a.split('').each_index do |i|\n      break unless b[i]\n      distance += 1 if a[i] != b[i]\n    end\n    distance\n  end\nend	\N	\N	0	1	2014-03-12 17:23:18	2014-03-12 17:23:18	56545	hamming.rb
69	11	3ba5270782508088cd11d7db	pending	ruby	hamming	class Hamming\n  def self.compute(strand_a, strand_b)\n    distance = 0\n    strand_a.length.times do |index|\n      break unless strand_b[index]\n      distance += 1 if strand_a[index] != strand_b[index]\n    end\n    distance\n  end\nend	\N	\N	0	2	2014-05-19 08:40:28	2014-05-19 08:40:28	56545	hamming.rb
70	14	d16ee6fb79435d9b835adbe7	pending	ruby	difference-of-squares	class Squares\n  def initialize(number)\n    @number = number\n  end\n\n  def square_of_sums\n    (1..number).to_a.reduce(:+) ** 2\n  end\n\n  def sum_of_squares\n    (1..number).to_a.map { |x| x ** 2 }.reduce(:+)\n  end\n\n  def difference\n    square_of_sums - sum_of_squares\n  end\n\n  private\n\n  attr_reader :number\nend	\N	\N	0	1	2014-06-16 07:41:21	2014-06-16 07:41:21	60115	squares.rb
71	14	3f608dd3659c0c32116a6f0b	pending	ruby	hamming	class Hamming\n\n  def self.compute(str1, str2)\n    dist = 0\n\n    until str1.empty? || str2.empty?\n      break if str1 == str2\n      dist += 1 if str1.slice!(0) != str2.slice!(0)\n    end\n\n    dist\n  end\n\nend	\N	\N	0	1	2014-05-21 02:08:51	2014-05-21 02:08:51	54131	hamming.rb
72	14	83811111e06f922c1623fca6	pending	javascript	word-count	var WordCount = function(phrase) {\r\n    var counts, words;\r\n    counts = {};\r\n\r\n    var countWords = function(word) {\r\n        if (counts[word]) {\r\n            counts[word] = counts[word]+1;\r\n        }\r\n        else {\r\n            counts[word] = 1;\r\n        }\r\n    };\r\n\r\n    var normalizeCase = function(input) {\r\n        return input.toLowerCase();\r\n    };\r\n\r\n    var sanitize = function(input) {\r\n        return input.replace(/[^\\w\\s]/g,"");\r\n    };\r\n\r\n    var tokenize = function(input) {\r\n       return input.split(/[\\s]+/);\r\n    };\r\n\r\n    phrase = normalizeCase(phrase);\r\n    phrase = sanitize(phrase);\r\n    words = tokenize(phrase);\r\n    words.forEach(countWords);\r\n    return counts;\r\n};\r\n\r\nmodule.exports = WordCount;	\N	\N	0	1	2014-06-18 03:05:49	2014-06-18 03:05:49	40978	word-count.js
73	14	959097a6b70715c0f24e432d	superseded	javascript	meetup	var Meetup = function(month, year) {\n  this.findTeenthday = function(day) {\n    for (var i= 13; i < 20; i++) {\n      var date = new Date(year, month, i);\n      if (date.getUTCDay() == day) {\n       return date;\n      }\n    }\n} \n  \n  this.monteenth = function() {\n    return this.findTeenthday(1);\n  }  \n\n  this.tuesteenth = function() {\n    return this.findTeenthday(2);\n  }\n  \n  this.wednesteenth = function() {\n    return this.findTeenthday(3);\n  }\n\t\n  this.thursteenth = function() {\n    return this.findTeenthday(4);\n  }\n\n  this.friteenth = function() {\n    return this.findTeenthday(5);\n  }\n\n  this.saturteenth = function() {\n    return this.findTeenthday(6);\n  }\n\t\n  this.sunteenth = function() {\n    return this.findTeenthday(7);\n  }\n};\n  \nmodule.exports = Meetup;	\N	\N	0	1	2014-05-27 05:05:42	2014-05-27 05:05:42	53479	meetup.js
74	14	3e96b0e7133f329bc5449537	pending	javascript	meetup	var Meetup = function(month, year) {\n  this.findTeenthday = function(day) {\n    for (var i= 13; i < 20; i++) {\n      var date = new Date(year, month, i);\n      if (date.getUTCDay() === day) {\n       return date;\n      }\n    }\n\t} \n  \n  this.monteenth = function() {\n    return this.findTeenthday(1);\n  }  \n\n  this.tuesteenth = function() {\n    return this.findTeenthday(2);\n  }\n  \n  this.wednesteenth = function() {\n    return this.findTeenthday(3);\n  }\n\t\n  this.thursteenth = function() {\n    return this.findTeenthday(4);\n  }\n\n  this.friteenth = function() {\n    return this.findTeenthday(5);\n  }\n\n  this.saturteenth = function() {\n    return this.findTeenthday(6);\n  }\n\t\n  this.sunteenth = function() {\n    return this.findTeenthday(7);\n  }\n};\n  \nmodule.exports = Meetup;	\N	\N	0	2	2014-07-08 10:42:15	2014-07-08 10:42:15	53479	meetup.js
75	14	0da326db9c55b69deb51ac7c	pending	ruby	roman-numerals	class Integer < Numeric\n  NUMERALS = [\n      %w[I V X],\n      %w[X L C],\n      %w[C D M],\n      ['M', '', '']\n  ]\n  def to_roman\n    roman = ""\n    self.to_s.reverse.chars.to_a.each_with_index do |digit, decimal_place|\n      roman = convert(digit, decimal_place) + roman\n    end\n    roman\n  end\n\n  private\n    def convert(digit, decimal_place)\n      numeral = digit.to_i\n      case numeral\n        when 1..3\n          NUMERALS[decimal_place][0]*numeral\n        when 4\n          NUMERALS[decimal_place][0] + NUMERALS[decimal_place][1]\n        when 5\n          NUMERALS[decimal_place][1]\n        when 6..8\n          NUMERALS[decimal_place][1] + NUMERALS[decimal_place][0]*(numeral - 5)\n        when 9\n          NUMERALS[decimal_place][0] + NUMERALS[decimal_place][2]\n        else\n          ""\n      end\n\n    end\n\nend	\N	\N	0	1	2014-06-26 20:29:53	2014-06-26 20:29:53	56039	roman.rb
76	14	dfc55051e4736a5767c2f355	pending	python	bob	class Bob:\n\tdef hey(self,message):\n\t\tif message is None:\n\t\t\treturn  'Fine. Be that way!'\n\t\tif (len(message.strip()) == 0):\n\t\t\treturn 'Fine. Be that way!'\n\t\t#since its passed as string, we need to decode it with unicode escape \n\t\tmessage = message.decode('unicode-escape')\n\t\tif message.isupper():\n\t\t\treturn "Woah, chill out!"\n\t\t# looking only at the last character , to see if its a question.\n\t\tif message[len(message)-1:]=='?':\n\t\t\treturn 'Sure.'\n\t\treturn "Whatever."\n"""\t\nif __name__=='__main__':\n\tbob = Bob()\n\tprint bob.hey(u"\\xdcML\\xc4\\xdcTS!")\n\n"""	\N	\N	0	1	2014-06-24 01:33:16	2014-06-24 01:33:16	39021	bob.py
77	14	1fbb4fe7ff803e3ba76ee353	pending	ruby	raindrops	class Raindrops\n\n  def self.convert(n)\n    c = ->(f,w) { n % f == 0 && w || '' }\n    o = c.(3, 'Pling') + c.(5, 'Plang') + c.(7, 'Plong')\n    o.length == 0 ? n.to_s : o\n  end\n\nend	\N	\N	0	1	2014-06-22 20:28:00	2014-06-22 20:28:00	51521	raindrops.rb
78	21	946016bc7fcbfec0287b3c4d	pending	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    length = [a.size, b.size].min\n    (0...length).count { |i| a[i] != b[i] }\n  end\nend	\N	\N	0	1	2014-05-17 07:52:44	2014-05-17 07:52:44	58269	hamming.rb
134	43	88a2a81f16cde687ea13db22	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tisFourthCentury := isDivisibleBy(year, 400)\n\tisFourthYear := isDivisibleBy(year, 4)\n\tisNotCentury := !isDivisibleBy(year, 100)\n\treturn isFourthCentury || (isNotCentury && isFourthYear)\n}\n\nfunc isDivisibleBy(dividend int, divider int) bool {\n\treturn (dividend % divider) == 0\n}	\N	\N	0	5	2014-06-28 15:05:06	2014-06-28 15:05:06	48990	leap.go
79	21	72b969593226a568d0667329	superseded	scala	bob	class Bob {\n    def hey(speech: String): String = {\n        if ((speech.map(_.toUpper) == speech) &&\n            (speech.map(_.toLower) != speech)) {\n            return "Woah, chill out!"\n        }\n        if (speech.endsWith("?")) {\n            return "Sure."\n        }\n        if (speech.trim.isEmpty) {\n            return "Fine. Be that way!"\n        }\n        return "Whatever."\n    }\n}	\N	\N	0	1	2014-03-25 17:31:43	2014-03-25 17:31:43	52155	bob.scala
80	21	c54aecd1e3cd0f3719573560	pending	scala	bob	class Bob {\n    private def isShouting(speech:String): Boolean = {\n        speech.exists(_.isUpper) && !speech.exists(_.isLower)\n    }\n\n    private def isQuestion(speech:String): Boolean = speech.trim.endsWith("?")\n\n    private def isNothing(speech: String): Boolean = speech.trim.isEmpty\n\n    def hey(speech: String): String = {\n        if (isShouting(speech)) "Woah, chill out!"\n        else if (isQuestion(speech)) "Sure."\n        else if (isNothing(speech)) "Fine. Be that way!"\n        else "Whatever."\n\n    }\n}	\N	\N	0	3	2014-04-27 07:48:12	2014-04-27 07:48:12	52155	bob.scala
81	21	2b60ab0ea3eaabdb9a115c35	superseded	scala	bob	class Bob {\n    def hey(speech: String): String = {\n        if (isShouting(speech)) "Woah, chill out!"\n        else if (isQuestion(speech)) "Sure."\n        else if (isNothing(speech)) "Fine. Be that way!"\n        else "Whatever."\n    }\n\n    def isShouting(speech:String): Boolean = {\n        speech.exists(_.isUpper) && !speech.exists(_.isLower)\n    }\n\n    def isQuestion(speech:String): Boolean = speech.trim.endsWith("?")\n\n    def isNothing(speech: String): Boolean = speech.trim.isEmpty\n}	\N	\N	0	2	2014-06-02 01:51:15	2014-06-02 01:51:15	52155	bob.scala
82	21	d30b74306708a508643ba254	superseded	python	bob	class Bob(object):\n\n    def hey(self, message):\n        if not message:\n            return 'Fine. Be that way.'\n        elif message.upper() == message:\n            return 'Woah, chill out!'\n        elif message.endswith('?'):\n            return 'Sure.'\n        elif message.endswith('.'):\n            return 'Whatever.'\n        else:\n            return "Sometimes no one tells me what to say."	\N	\N	0	1	2014-02-07 05:33:55	2014-02-07 05:33:55	38696	bob.py
83	21	a8657c4462f9df1c904e758d	pending	python	bob	def is_blank(message):\n    return message is ''\n\ndef all_caps(message):\n    return message.upper() == message\n\ndef is_question(message):\n    return message.endswith('?')\n\ndef is_statement(message):\n    return message.endswith('.')\n\nclass Bob(object):\n\n    def hey(self, message):\n        ''' Returns a response according to format of message'''\n        self.message = message\n        if is_blank(message):\n            return 'Fine. Be that way.'\n        elif all_caps(message):\n            return 'Woah, chill out!'\n        elif is_question(message):\n            return 'Sure.'\n        elif is_statement(message):\n            return 'Whatever.'\n        else:\n            return "Sometimes no one tells me what to say."	\N	\N	0	2	2014-03-31 13:04:25	2014-03-31 13:04:25	38696	bob.py
84	21	7c8c69fe328dec7e6a08a253	pending	ruby	proverb	class Proverb\r\n\t\r\n\tdef initialize(*chain)\r\n\t\tif chain.count < 2 \r\n\t\t\t'A minimum of two arguments required.'\r\n\t\telse\r\n\t\t\t@proverb = ""\t\r\n\t\t\t@qualifier = ''\t\t\t\r\n\t\t\tchain.each_with_index do |word, index|\r\n\t\t\t\tif chain.last.is_a?(Hash) == true\r\n\t\t\t\t\t@qualifier = chain.last[:qualifier].to_s + ' '\r\n\t\t\t\t\tchain.pop \r\n\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t@proverb += "For want of a #{chain[index]} " \r\n\t\t\t\t@proverb += "the #{chain[index + 1]} was lost.\\n" \t\t\t\t\r\n\t\t\t\tbreak unless chain[index + 2]\r\n\t\t\tend\r\n\t\t@proverb += "And all for the want of a #{@qualifier}#{chain[0]}."\r\n\t\tend\r\n\tend\r\n\t\r\n\r\n\tdef to_s\r\n\t\t@proverb\r\n\tend\r\n\t\r\nend	\N	\N	0	1	2014-05-19 04:42:24	2014-05-19 04:42:24	56604	proverb.rb
85	27	1145d0725e6e9b2a1310695e	pending	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word.downcase\n    @permutations = generate_permutations(@word)\n  end\n\n  def match(candidates)\n    candidates.select do |candidate|\n      @permutations.include?(candidate.downcase)\n    end\n  end\n\n  private\n\n  def generate_permutations(word)\n    all = word.split('').permutation.map(&:join)\n    all.delete(word)\n    all\n  end\nend	\N	\N	0	1	2014-06-07 13:37:30	2014-06-07 13:37:30	38192	anagram.rb
86	28	4005f839c2b4a074f4a3e9e9	pending	ruby	word-count	class Phrase\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def word_count\n    count = {}\n    @word.split(/(?!')\\W+/).each do |word|\n      if count[word] == nil\n        count[word] = 1\n      else\n        count[word] = count[word] + 1\n      end\n    end\n    count\n  end\nend	\N	\N	0	1	2014-01-17 09:22:40	2014-01-17 09:22:40	53711	phrase.rb
87	28	113aa2e067d874c5cb2c6116	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    return true if year % 400 == 0\n    return true if year % 4 == 0 && year % 100 != 0\n    return false\n  end\nend	\N	\N	0	1	2013-12-21 12:38:17	2013-12-21 12:38:17	55133	year.rb
88	28	b83f8240ae39bbad0b6ec50b	pending	ruby	leap	class Year\n  def self.divisible_by?(year,number)\n    year % number == 0\n  end\n  def self.leap?(year)\n    (divisible_by?(year, 400)) ||\n    (divisible_by?(year, 4) && !divisible_by?(year,100))\n  end\nend	\N	\N	0	3	2014-01-05 14:07:31	2014-01-05 14:07:31	55133	year.rb
89	28	198b450ee1c686db5c064532	superseded	ruby	leap	class Year\n  def self.divisible_by?(year,number)\n    year % number == 0\n  end\n  def self.leap?(year)\n    return true if (divisible_by?(year, 400)) ||\n                   (divisible_by?(year, 4) && !divisible_by?(year,100))\n    return false\n  end\nend	\N	\N	0	2	2014-03-23 03:10:30	2014-03-23 03:10:30	55133	year.rb
90	28	ec88cb910015e308a7f0f758	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  PLANET_AGE_CONVERSION_FACTOR = { "mercury" => 0.2408467, "venus" => 0.61519726,\n    "mars" => 1.8808158, "jupiter" => 11.862615, "saturn" => 29.447498,\n    "uranus" => 84.016846, "neptune" => 164.79132, "earth" => 1.0 }\n\n  EARTH_YEAR_IN_SECONDS = 31557600.0\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  def calculate_age_on(planet)\n    (@seconds / (EARTH_YEAR_IN_SECONDS * PLANET_AGE_CONVERSION_FACTOR[planet])).round(2)\n  end\n\n  def method_missing(method_name, *args)\n    planet = method_name.to_s.gsub(/on_/, "")\n    if PLANET_AGE_CONVERSION_FACTOR.keys.include?(planet)\n      calculate_age_on(planet)\n    else\n      super\n    end\n  end\nend	\N	\N	0	1	2014-01-05 09:15:56	2014-01-05 09:15:56	45293	space-age.rb
91	28	294b292c0ed9156ea8bc5ece	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  ORBITAL_PERIOD = {\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132,\n    earth: 1.0\n  }\n\n  EARTH_YEAR_IN_SECONDS = 31557600\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIOD.each_pair do |planet, planet_orbital_period|\n    define_method(:"on_#{planet}") do\n      (@seconds / (EARTH_YEAR_IN_SECONDS * planet_orbital_period)).round(2)\n    end\n  end\nend	\N	\N	0	4	2014-01-14 02:44:04	2014-01-14 02:44:04	45293	space-age.rb
92	28	0e467aefe37544bb567d3f40	pending	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  ORBITAL_PERIOD = {\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132,\n    earth: 1.0\n  }\n\n  EARTH_YEAR_IN_SECONDS = 31557600\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIOD.each_pair do |planet, planet_orbital_period|\n    define_method(:"on_#{planet}") do\n      (self.seconds / (EARTH_YEAR_IN_SECONDS * planet_orbital_period)).round(2)\n    end\n  end\nend	\N	\N	0	5	2014-01-31 05:37:29	2014-01-31 05:37:29	45293	space-age.rb
93	28	b74881ae156e27f4489de333	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  PLANET_AGE_CONVERSION_FACTOR = { "mercury" => 0.2408467, "venus" => 0.61519726,\n    "mars" => 1.8808158, "jupiter" => 11.862615, "saturn" => 29.447498,\n    "uranus" => 84.016846, "neptune" => 164.79132, "earth" => 1.0 }\n\n  EARTH_YEAR_IN_SECONDS = 31557600.0\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  def calculate_age_on(planet)\n    (@seconds / (EARTH_YEAR_IN_SECONDS * PLANET_AGE_CONVERSION_FACTOR[planet])).round(2)\n  end\n\n  def method_missing(method_name, *args)\n    planet = method_name.to_s.gsub(/on_/, "")\n    return calculate_age_on(planet) if PLANET_AGE_CONVERSION_FACTOR.keys.include?(planet)\n    super\n  end\nend	\N	\N	0	2	2014-02-10 00:59:31	2014-02-10 00:59:31	45293	space-age.rb
94	28	de05a4f6fe29a1dfb3ee373e	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  ORBITAL_PERIOD = { "mercury" => 0.2408467, "venus" => 0.61519726,\n    "mars" => 1.8808158, "jupiter" => 11.862615, "saturn" => 29.447498,\n    "uranus" => 84.016846, "neptune" => 164.79132, "earth" => 1.0 }\n\n  EARTH_YEAR_IN_SECONDS = 31557600.0\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIOD.each_pair do |planet, planet_orbital_period|\n    define_method(:"on_#{planet}") do\n      (@seconds / (EARTH_YEAR_IN_SECONDS * planet_orbital_period)).round(2)\n    end\n  end\nend	\N	\N	0	3	2014-05-06 03:46:14	2014-05-06 03:46:14	45293	space-age.rb
95	28	e3178ab11d9abdf9b5361383	pending	ruby	bob	class Bob\n  def hey(input)\n    data = input.strip\n    return "Fine. Be that way!" if is_it_silence?  data\n    return "Woah, chill out!"   if is_it_shouting? data\n    return "Sure."              if is_it_question? data\n    "Whatever."\n  end\n\n  def is_it_silence?(data)\n    data == ''\n  end\n\n  def is_it_shouting?(data)\n    data == data.upcase && data != data.downcase\n  end\n\n  def is_it_question?(data)\n    data.end_with? '?'\n  end\nend	\N	\N	0	2	2013-12-25 22:41:57	2013-12-25 22:41:57	48428	bob.rb
96	28	3e09a2d8202988ed8f4cab76	superseded	ruby	bob	class Bob\n  def hey(smth)\n    smth.strip!\n    return "Fine. Be that way!" if smth == ''\n    return "Woah, chill out!"   if smth == smth.upcase && smth != smth.downcase\n    return "Sure."              if smth[-1] == '?'\n    "Whatever."\n  end\nend	\N	\N	0	1	2014-05-21 16:03:27	2014-05-21 16:03:27	48428	bob.rb
97	28	15c0fea049b876664b8565c2	pending	ruby	hamming	class Hamming\n  def self.compute(first_string, second_string)\n    length = [first_string, second_string].min.length\n    differences = 0\n    (0...length).each do |i|\n      differences += 1 if first_string[i] != second_string[i]\n    end\n    return differences\n  end\nend	\N	\N	0	1	2014-04-30 10:48:28	2014-04-30 10:48:28	57280	hamming.rb
98	28	16f2c3290f7799994ca15a7a	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Monoid\nimport Data.Char\nimport Data.Maybe\n\nresponseFor :: String -> String\nresponseFor = fromMaybe "Whatever." . getFirst . responses\n\nresponses :: String -> First String\nresponses = when silence  "Fine. Be that way!"\n         <> when shout    "Woah, chill out!"\n         <> when question "Sure."\n \nshout, question, silence :: String -> Bool\nshout xs = let letters = filter isLetter xs\n           in not (null letters) && all isUpper letters\nquestion xs = not (null xs) && last xs == '?'\nsilence = all isSpace\n\nwhen :: (a -> Bool) -> b -> (a -> First b)\nwhen f r x = First (if f x then Just r else Nothing)	\N	\N	0	1	2014-01-12 18:11:30	2014-01-12 18:11:30	42899	bob.hs
99	28	89b27f70c9bb1ef64a7fbbd6	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Monoid\nimport Data.Char (isLetter, isUpper, isSpace)\nimport Data.List (isSuffixOf)\n\nresponseFor :: String -> String\nresponseFor = maybe "Whatever." id . getFirst . responses\n\nresponses :: String -> First String\nresponses = responseTo silence  "Fine. Be that way!"\n         <> responseTo shout    "Woah, chill out!"\n         <> responseTo question "Sure."\n \nshout, question, silence :: String -> Bool\nshout xs = let letters = filter isLetter xs\n           in not (null letters) && all isUpper letters\nquestion xs = "?" `isSuffixOf` xs\nsilence = all isSpace\n\nresponseTo :: (a -> Bool) -> b -> (a -> First b)\nresponseTo f r x = First (if f x then Just r else Nothing)	\N	\N	0	2	2014-03-09 22:40:42	2014-03-09 22:40:42	42899	bob.hs
100	28	d080f24cbd6c0465679b2b19	pending	haskell	phone-number	module Phone\n( areaCode\n, number\n, prettyPrint\n) where\n\nimport Data.Char (isDigit)\nimport Text.Format\n\n\nnumber :: String -> String\nnumber num\n    | length clean == 10 = clean\n    | length clean == 11 && h == '1'= shrt\n    | otherwise = err\n        where\n            clean@(h:shrt) = if length num > 9 then filter (isDigit) num\n                                               else err\n            err            = "0000000000"\n\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint num = format "({0}) {1}-{2}" [code, area, rear]\n    where\n        clear = number num\n        code  = take 3 clear\n        area  = take 3 $ drop 3 clear\n        rear  = take 4 $ drop 6 clear	\N	\N	0	1	2014-03-31 17:34:55	2014-03-31 17:34:55	56296	Phone.hs
101	28	47f12f0c1d8012959b8ec9bc	superseded	clojure	point-mutations	(ns dna)\n\n(defn dna/hamming-distance [first_seq second_seq]\n  (count \n    (filter \n      #(not= (first %) (second %)) \n      (partition \n        2 \n        (interleave \n          first_seq \n          second_seq)))))	\N	\N	0	1	2014-02-20 21:07:53	2014-02-20 21:07:53	59055	dna.clj
102	28	5f81908e7246b041dcbf816f	pending	clojure	point-mutations	(ns dna)\n\n(defn dna/hamming-distance [first_seq second_seq]\n  (-> (interleave first_seq second_seq)\n      ((partial partition 2))\t\n      ((partial filter #(not= (first %) (second %))))\n      count)) 	\N	\N	0	2	2014-02-26 12:45:32	2014-02-26 12:45:32	59055	dna.clj
103	28	69a474725420ac5ba481547b	pending	ruby	rna-transcription	class DNA\n\n  THYMINE = 'T'\n  URACIL = 'U'\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.gsub THYMINE, URACIL\n  end\nend	\N	\N	0	2	2013-12-12 10:04:07	2013-12-12 10:04:07	39251	rna-transcription.rb
104	28	e0f03badb769a2556ca86155	superseded	ruby	rna-transcription	class DNA\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.gsub "T", "U"\n  end\nend	\N	\N	0	1	2014-05-13 10:53:51	2014-05-13 10:53:51	39251	rna-transcription.rb
105	28	092fa89058dc77a2cc14f25d	pending	go	hamming	package hamming\n\nfunc Distance(s1, s2 string) (dist int) {\n\tfor i := 0; i < len(s1) && i < len(s2); i++ {\n\t\tif s1[i] != s2[i] {\n\t\t\tdist++\n\t\t}\n\t}\n\treturn dist\n}	\N	\N	0	2	2014-03-01 18:05:01	2014-03-01 18:05:01	50646	hamming.go
106	28	74a7d7faf20939e763209cf4	superseded	go	hamming	package hamming\n\nfunc Distance(s1, s2 string) int {\n\tdist := 0\n\tfor i := 0; i < len(s1) && i < len(s2); i++ {\n\t\tif s1[i] != s2[i] {\n\t\t\tdist++\n\t\t}\n\t}\n\treturn dist\n}	\N	\N	0	1	2014-04-24 12:05:58	2014-04-24 12:05:58	50646	hamming.go
107	28	4e94acffcd6e10cf3e178ab0	superseded	haskell	scrabble-score	{-# LANGUAGE TupleSections #-}\nmodule Scrabble \n\n(scoreLetter, scoreWord)\n \nwhere\n\nimport qualified Data.Map.Strict as M\nimport Data.Char (toUpper)\n\nscores = M.fromList (concatMap expand byScore)\n    where\n        expand (letters, score) = map (,score) letters\n        byScore = [ ("AEIOULNRST", 1)\n                  , ("DG",         2)\n                  , ("BCMP",       3)\n                  , ("FHVWY",      4)\n                  , ("K",          5)\n                  , ("JX",         8)\n                  , ("QZ",        10)\n                  ]\n\nscoreLetter :: Char -> Int\nscoreLetter = (scores M.!) . toUpper\n\nscoreWord :: String -> Int\nscoreWord = sum . map scoreLetter	\N	\N	0	1	2013-12-11 02:33:45	2013-12-11 02:33:45	54906	Scrabble.hs
108	28	ca4f8024c631f2ebb18c31ed	pending	haskell	scrabble-score	{-# LANGUAGE TupleSections #-}\nmodule Scrabble \n\n(scoreLetter, scoreWord)\n \nwhere\n\nimport qualified Data.Map.Strict as M\nimport Data.Char (toUpper)\n\nscores :: M.Map Char Int\nscores = M.fromList (concatMap expand byScore)\n    where\n        expand (letters, score) = map (,score) letters\n        byScore = [ ("AEIOULNRST", 1)\n                  , ("DG",         2)\n                  , ("BCMP",       3)\n                  , ("FHVWY",      4)\n                  , ("K",          5)\n                  , ("JX",         8)\n                  , ("QZ",        10)\n                  ]\n\nscoreLetter :: Char -> Int\nscoreLetter = (scores M.!) . toUpper\n\nscoreWord :: String -> Int\nscoreWord = sum . map scoreLetter	\N	\N	0	2	2014-06-27 00:00:42	2014-06-27 00:00:42	54906	Scrabble.hs
109	30	b28974903dcefe4d163f1009	pending	ruby	proverb	class Proverb\n  def initialize(*things_with_options)\n    @options = extract_options!(things_with_options)\n    @things = things_with_options\n  end\n\n  def to_s\n    [exchanges, summary].flatten.join("\\n")\n  end\n\n  private\n\n  def exchanges\n    @things.each_cons(2).map { |(target, given)| exchange(target, given) }\n  end\n\n  def exchange(target, given)\n    "For want of a #{target} the #{given} was lost."\n  end\n\n  def summary\n    "And all for the want of a #{qualified_target}."\n  end\n\n  def qualified_target\n    [qualifier, target].compact.join(' ')\n  end\n\n  def target\n    @things.first\n  end\n\n  def qualifier\n    @options[:qualifier]\n  end\n\n  def extract_options!(arg)\n    if arg.last.is_a?(Hash)\n      arg.pop\n    else\n      {}\n    end\n  end\nend	\N	\N	0	1	2014-06-27 15:18:06	2014-06-27 15:18:06	52922	proverb.rb
110	30	e1650ab84a7e5927fc4041f7	superseded	clojure	leap	(ns leap)\n\n(defn divisible-by? [n divisor]\n  (zero? (rem n divisor)))\n\n(defn leap-year? [year]\n  (or (divisible-by? year 400)\n      (and (divisible-by? year 4)\n           (not (divisible-by? year 100)))))	\N	\N	0	1	2014-04-14 19:49:21	2014-04-14 19:49:21	60466	leap.clj
111	30	d399e1d73ecf2ecca1fb102d	pending	clojure	leap	(ns leap)\n\n(defn leap-year? [year]\n  (letfn [(div? [d] (zero? (rem year d)))]\n    (or (div? 400)\n        (and (div? 4)\n             (not (div? 100))))))	\N	\N	0	2	2014-04-22 18:11:03	2014-04-22 18:11:03	60466	leap.clj
112	30	99f5cfb648bc2f7e14c4b9c0	superseded	haskell	bob	module Bob(responseFor) where\n\nimport Data.Char\nimport Text.Regex.Posix\n\nresponseFor message\n  | all isSpace message = "Fine. Be that way!"\n  | message =~ "[a-zA-Z]+" && map toUpper message == message = "Woah, chill out!"\n  | last message == '?' = "Sure."\n  | otherwise = "Whatever."	\N	\N	0	1	2014-06-13 18:40:42	2014-06-13 18:40:42	43661	bob.hs
113	30	bd1d52e916265061ac055eaf	pending	haskell	bob	module Bob(responseFor) where\n\nimport Data.Char\n\nresponseFor message\n  | all isSpace message =\n    "Fine. Be that way!"\n  | any isAlpha message && map toUpper message == message =\n    "Woah, chill out!"\n  | last message == '?' =\n    "Sure."\n  | otherwise =\n    "Whatever."	\N	\N	0	2	2014-07-06 06:54:17	2014-07-06 06:54:17	43661	bob.hs
114	30	6a901656f443dff8548b0f44	superseded	ruby	rna-transcription	class DNA\n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence.gsub("U", "T")\n  end\n\n  def to_rna\n    RNA.new(sequence).to_s\n  end\n\n  def to_s\n    sequence\n  end\nend\n\nclass RNA\n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence.gsub("T", "U")\n  end\n\n  def to_dna\n    DNA.new(sequence).to_s\n  end\n\n  def to_s\n    sequence\n  end\nend	\N	\N	0	1	2014-04-26 12:24:36	2014-04-26 12:24:36	43729	rna-transcription.rb
115	30	4510cb5509a8fa9f94f6ab24	pending	ruby	rna-transcription	class DNA\n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence.tr("U", "T")\n  end\n\n  def to_rna\n    RNA.new(sequence).to_s\n  end\n\n  def to_s\n    sequence\n  end\nend\n\nclass RNA\n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence.tr("T", "U")\n  end\n\n  def to_dna\n    DNA.new(sequence).to_s\n  end\n\n  def to_s\n    sequence\n  end\nend	\N	\N	0	2	2014-06-30 12:03:16	2014-06-30 12:03:16	43729	rna-transcription.rb
116	30	9e925f667b15bc47ff9fff85	pending	javascript	word-count	'use strict';\n\nvar words = function(phrase){\n  var parsedPhrase = phrase.replace(/[^\\w\\s]/g, '');\n  var lowercasePhrase = parsedPhrase.toLowerCase();\n  var wordList = lowercasePhrase.split(/\\s+/);\n\n  return wordList.reduce(function(counts, word){\n    counts[word] = counts[word] || 0;\n    counts[word] += 1\n    return counts;\n  }, {});\n};\n\nmodule.exports = words;	\N	\N	0	1	2014-06-03 18:25:07	2014-06-03 18:25:07	49954	word-count.js
117	30	68a5901f51bfef28042df078	pending	perl5	robot-name	package RobotName;\n\nuse strict;\nuse warnings;\n\nour $PATTERN = 'AA000';\n\nsub new        { bless {}, shift              }\nsub name       { $_[0]->{name} ||= $PATTERN++ }\nsub reset_name { $_[0]->{name}   = $PATTERN++ }\n\n1;	\N	\N	0	1	2014-05-12 02:49:27	2014-05-12 02:49:27	57099	RobotName.pm
118	32	6dfa7bf7cdd81e785b339227	pending	haskell	point-mutations	module DNA(hammingDistance) where\n\nimport Data.List\n\nhammingDistance :: String -> String -> Int\nhammingDistance x y = sum $ map (fromEnum . not) $ zipWith (==) x y	\N	\N	0	2	2014-07-10 02:06:31	2014-07-10 02:06:31	52106	DNA.hs
119	32	c991e59c31ba175de981d6eb	superseded	haskell	point-mutations	module DNA(hammingDistance) where\n\nimport Data.List\n\nhammingDistance :: String -> String -> Integer\nhammingDistance x y = foldl' isFalse 0 . zipWith (==) x y\n                    where isFalse acc x = if not x then acc + 1 else acc	\N	\N	0	1	2014-07-10 13:08:23	2014-07-10 13:08:23	52106	DNA.hs
120	32	806dc0009837d25de111d602	superseded	ruby	grade-school	class School\n  def initialize\n    @grades = Hash.new { |hash, key| hash[key] = Grade.new }\n  end\n\n  def add(student, grade)\n    grades[grade].add(student)\n  end\n\n  def grade(grade_number)\n    grades[grade_number].db\n  end\n\n  def db\n    grades.inject({}) { |acc, (grade_number, grade)| \n      acc.merge(grade_number => grade.db)\n    }\n  end\n\n  def sort\n    grades.sort.inject({}) { |acc, (grade_number, grade)|\n      acc.merge(grade_number => grade.sort)\n    }\n  end\n\nprivate\n  attr_reader :grades\nend\n\nclass Grade\n  def initialize\n    @students = []\n  end\n\n  def add(student)\n    students << student\n  end\n\n  def db\n    students.dup\n  end\n\n  def sort\n    students.sort\n  end\n\nprivate\n  attr_reader :students\nend	\N	\N	0	1	2014-07-07 18:15:41	2014-07-07 18:15:41	47596	grade-school.rb
121	32	6072419ef3a50010b9f92a4d	pending	ruby	grade-school	class School\n  def initialize\n    @grades = Hash.new { |hash, key| hash[key] = Grade.new }\n  end\n\n  def add(student, grade)\n    grades[grade].add(student)\n    self\n  end\n\n  def grade(grade_number)\n    grades[grade_number].db\n  end\n\n  def db\n    grades.each_with_object({}) { |(grade_number, grade), hash|\n      hash[grade_number] = grade.db\n    }\n  end\n\n  def sort\n    grades.sort.each_with_object({}) { |(grade_number, grade), hash|\n      hash[grade_number] = grade.sort\n    }\n  end\n\nprivate\n  attr_reader :grades\nend\n\nclass Grade\n  def initialize\n    @students = []\n  end\n\n  def add(student)\n    students << student\n  end\n\n  def db\n    students.dup\n  end\n\n  def sort\n    students.sort\n  end\n\nprivate\n  attr_reader :students\nend	\N	\N	0	2	2014-07-13 02:06:50	2014-07-13 02:06:50	47596	grade-school.rb
122	32	1aa409fe1a1569e7637a0298	pending	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year % 400 == 0 ? true : (@year % 4 == 0 && @year % 100 != 0) ? true : false\n  end\nend	\N	\N	0	1	2014-07-09 13:30:20	2014-07-09 13:30:20	47683	leap.rb
123	32	7ffc36cd4751c7d327fdc58b	pending	python	beer-song	def _bottle_text(n):\n\tcount = 'no more' if n == 0 else str(n)\n\tplurality = '' if n == 1 else 's'\n\treturn '{} bottle{}'.format(count, plurality)\n\ndef _action_text(n):\n\tif n == 0:\n\t\treturn 'Go to the store and buy some more'\n\tquantity = 'it' if n == 1 else 'one'\n\treturn 'Take {} down and pass it around'.format(quantity)\n\ndef _status_text(n):\n\tb = _bottle_text(n)\n\treturn "{} of beer on the wall, {} of beer.\\n".format(b.capitalize(), b)\n\ndef _next_text(n):\n\tnext_quantity = 99 if n == 0 else n - 1\n\treturn "{}, {} of beer on the wall.\\n".format(_action_text(n), _bottle_text(next_quantity)) \n\nclass Beer(object):\n\tdef verse(self, n):\n\t\treturn _status_text(n) + _next_text(n)\n\n\tdef sing(self, hi, lo=0):\n\t\treturn '\\n'.join(self.verse(i) for i in xrange(hi, lo-1, -1)) + '\\n'	\N	\N	0	3	2014-07-07 23:59:14	2014-07-07 23:59:14	53926	beer.py
124	32	8972050dbb54c9065a26b5a8	superseded	python	beer-song	_line1 = "{num_bottles_cap} of beer on the wall, {num_bottles_low} of beer.\\n"\n_line2 = "Take {quant} down and pass it around, {num_bottles} of beer on the wall.\\n"\n_line_empty = "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\nclass Beer(object):\n\tdef verse(self, num):\n\t\tquantity = ''\n\t\tif num == 0:\n\t\t\tquantity = 'no more bottles'\n\t\telif num == 1:\n\t\t\tquantity = '1 bottle'\n\t\telse:\n\t\t\tquantity = str(num) + ' bottles'\n\t\tverse = _line1.format(num_bottles_cap=quantity.capitalize(), num_bottles_low=quantity)\n\t\tif num == 0:\n\t\t\tverse += _line_empty\n\t\t\treturn verse\n\t\tif num == 1:\n\t\t\tverse += _line2.format(quant='it', num_bottles='no more bottles')\n\t\t\treturn verse\n\t\tif num == 2:\n\t\t\tverse += _line2.format(quant='one', num_bottles='1 bottle')\n\t\t\treturn verse\n\t\tverse += _line2.format(quant='one', num_bottles=str(num-1) + ' bottles')\n\t\treturn verse\n\n\tdef sing(self, hi, lo=0):\n\t\tsong = ''\n\t\tfor i in range(hi, lo-1, -1):\n\t\t\tsong += self.verse(i) + '\\n'\n\t\treturn song	\N	\N	0	1	2014-07-11 21:20:26	2014-07-11 21:20:26	53926	beer.py
125	32	454f7df2fcea3ab4b265d0a9	superseded	python	beer-song	_verse = """{num_bottles_cap} of beer on the wall, {num_bottles} of beer.\n{action}, {num_bottles_next} of beer on the wall.\n"""\n\ndef _bottle_text(n):\n\tif n == 0:\n\t\treturn 'no more bottles'\n\tif n == 1:\n\t\treturn '1 bottle'\n\treturn '{n} bottles'.format(n=n)\n\ndef _action_text(n):\n\tif n == 0:\n\t\treturn 'Go to the store and buy some more'\n\tif n == 1:\n\t\treturn 'Take it down and pass it around'\n\treturn 'Take one down and pass it around'\n\nclass Beer(object):\n\tdef verse(self, num):\n\t\tbottle_text = _bottle_text(num)\n\t\tbottle_next = _bottle_text(num - 1) if num > 0 else _bottle_text(99)\n\t\treturn _verse.format(num_bottles_cap=bottle_text.capitalize(),\n\t\t\t\t\t\t\t num_bottles=bottle_text,\n\t\t\t\t\t\t\t action=_action_text(num),\n\t\t\t\t\t\t\t num_bottles_next=bottle_next)\n\n\tdef sing(self, hi, lo=0):\n\t\tsong = ''\n\t\tfor i in range(hi, lo-1, -1):\n\t\t\tsong += self.verse(i) + '\\n'\n\t\treturn song	\N	\N	0	2	2014-07-16 21:52:15	2014-07-16 21:52:15	53926	beer.py
126	37	a9a133315aa64bd20ccd01f5	pending	ruby	leap	class Year\n  def self.leap?(year)\n    return false if year % 4 != 0\n    return true if year % 100 != 0\n    year % 400 == 0\n  end\nend	\N	\N	0	1	2014-07-02 15:56:55	2014-07-02 15:56:55	52678	leap.rb
127	37	ee00e557328b00e85fe49427	pending	ruby	beer-song	class BeerSong\n  def verse(n)\n    "".tap do |str|\n      str << first_line(n)\n      str << second_line(n)\n    end\n  end\n\n  def verses(start, finish)\n    start.downto(finish).map(&method(:verse)).join("\\n") << "\\n"\n  end\n\n  def sing\n    verses(99, 0)\n  end\n\n  private\n\n  def n_bottles(n)\n    {\n      0 => %{No more bottles},\n      1 => %{1 bottle}\n    }.fetch(n){ %{#{n} bottles} } << " of beer"\n  end\n\n  def first_line(n)\n    %{#{n_string = n_bottles(n)} on the wall, #{n_string.downcase}.\\n}\n  end\n\n  def second_line(n)\n    return %{Go to the store and buy some more, #{n_bottles(99)} on the wall.\\n} if n.zero?\n    %{Take #{n == 1 ? "it" : "one"} down and pass it around, #{n_bottles(n - 1).downcase} on the wall.\\n}\n  end\n\nend	\N	\N	0	1	2014-07-03 15:31:10	2014-07-03 15:31:10	55524	beer_song.rb
128	37	9fc076cc18273fbbf852a87f	pending	javascript	palindrome-products	(function() {\n  'use strict';\n\n  var Palindrome = function(options) {\n    this.max = options['maxFactor'];\n    this.min = options['minFactor'] || 1;\n    this.palindromes = this.generate();\n  };\n\n  Palindrome.prototype.generate = function() {\n    var palindromes = [];\n    for (var i = this.min; i <= this.max; i++) {\n      for (var j = this.min; j <= this.max; j++) {\n        var product = (i * j);\n        if (this.isPalindrome(product)) {\n          palindromes.push(product);\n        }\n      }\n    }\n    return palindromes;\n  };\n\n  Palindrome.prototype.uniqueFactors = function(value) {\n    var starting = this.findFactors(value);\n    var sorted = [];\n    for (var i = 0; i < starting.length; i++) {\n      sorted.push(starting[i].sort());\n    }\n    return sorted.unique();\n  };\n\n  Palindrome.prototype.findFactors = function(value) {\n    var results = [];\n    for (var i = 1; i <= value; i++) {\n      if (value % i === 0) {\n        results.push([i, (value / i)]);\n      }\n    }\n    return results;\n  };\n\n  Palindrome.prototype.isPalindrome = function(number) {\n    var digits = number.toString().split('');\n    var halfLength = (digits.length / 2);\n    var half1 = digits.slice(0, halfLength);\n    var half2 = digits.slice(halfLength - 1, digits.length);\n    return arrayEqual(half1, half2.reverse());\n  };\n\n  var arrayEqual = function(a, b) {\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  Palindrome.prototype.largest = function() {\n    var that = this;\n    var generated = this.palindromes;\n    var biggest = 0;\n    for (var i = 0; i < generated.length; i++) {\n      if (generated[i] > biggest) {\n        biggest = generated[i];\n      }\n    }\n    var theseFactors = this.uniqueFactors(biggest).filter(function(pair) {\n      return pair.every(function(factor) {\n        return that.min <= factor && factor <= that.max;\n      });\n    });\n    return {\n      value: biggest,\n      factors: theseFactors\n    };\n  };\n\n  Palindrome.prototype.smallest = function() {\n    var that = this;\n    var generated = this.palindromes;\n    var smallest = generated[0];\n    for (var i = 0; i < generated.length; i++) {\n      if (generated[i] < smallest) {\n        smallest = generated[i];\n      }\n    }\n    var theseFactors = this.uniqueFactors(smallest).filter(function(pair) {\n      return pair.every(function(factor) {\n        return that.min <= factor && factor <= that.max;\n      });\n    });\n    return {\n      value: smallest,\n      factors: theseFactors\n    };\n  };\n\n  Array.prototype.unique = function() {\n    var collector = {};\n    var output = [];\n    for (var i = 0; i < this.length; i ++) {\n      collector[this[i]] = this[i];\n    }\n    for (var o in collector) {\n      output.push(collector[o]);\n    }\n    return output;\n  };\n\n  module.exports = Palindrome;\n})();	\N	\N	0	1	2014-07-15 04:12:18	2014-07-15 04:12:18	52150	palindrome.js
129	39	8b6db5929a26024b43db60ce	pending	ruby	gigasecond	require 'date'\n\nclass Gigasecond\n\n\t@date\n\t@seconds_in_a_day\n\t@one_gs_in_days\n\n\tdef initialize(date)\n\t\t@date = date\n\t\t@seconds_in_a_day = 60*60*24\n\t\t@one_gs_in_days = 10**9 / @seconds_in_a_day\n\tend\n\n\tdef date\n\t\t@date + @one_gs_in_days\n\tend\n\nend	\N	\N	0	1	2014-03-17 20:46:27	2014-03-17 20:46:27	56917	gigasecond.rb
130	43	f5040600f297a473bd89dda0	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn IsFourthCentury(year) || (IsLeap(year) && !IsCentury(year))\n}\n\nfunc IsLeap(year int) bool {\n\treturn (year % 4) == 0\n}\n\nfunc IsCentury(year int) bool {\n\treturn (year % 100) == 0\n}\n\nfunc IsFourthCentury(year int) bool {\n\treturn (year % 400) == 0\n}	\N	\N	0	1	2014-05-09 06:34:45	2014-05-09 06:34:45	48990	leap.go
131	43	68ce91f7f8addbb51d6ef52b	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn IsFourthCentury(year) || (IsFourthYear(year) && !IsCentury(year))\n}\n\nfunc IsFourthYear(year int) bool {\n\treturn IsDivisibleBy(year, 4)\n}\n\nfunc IsCentury(year int) bool {\n\treturn IsDivisibleBy(year, 100)\n}\n\nfunc IsFourthCentury(year int) bool {\n\treturn IsDivisibleBy(year, 400)\n}\n\nfunc IsDivisibleBy(dividend int, divider int) bool {\n\treturn (dividend % divider) == 0\n}	\N	\N	0	2	2014-05-11 06:11:37	2014-05-11 06:11:37	48990	leap.go
132	43	c623118005eb9a4992535ea4	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn IsFourthCentury(year) || (IsFourthYear(year) && !IsCentury(year))\n}\n\nfunc IsFourthYear(year int) bool {\n\treturn isDivisibleBy(year, 4)\n}\n\nfunc IsCentury(year int) bool {\n\treturn isDivisibleBy(year, 100)\n}\n\nfunc IsFourthCentury(year int) bool {\n\treturn isDivisibleBy(year, 400)\n}\n\nfunc isDivisibleBy(dividend int, divider int) bool {\n\treturn (dividend % divider) == 0\n}	\N	\N	0	3	2014-05-11 16:29:59	2014-05-11 16:29:59	48990	leap.go
133	43	9cb94de8062e66ab12a79806	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn isFourthCentury(year) || (isFourthYear(year) && !isCentury(year))\n}\n\nfunc isFourthYear(year int) bool {\n\treturn isDivisibleBy(year, 4)\n}\n\nfunc isCentury(year int) bool {\n\treturn isDivisibleBy(year, 100)\n}\n\nfunc isFourthCentury(year int) bool {\n\treturn isDivisibleBy(year, 400)\n}\n\nfunc isDivisibleBy(dividend int, divider int) bool {\n\treturn (dividend % divider) == 0\n}	\N	\N	0	4	2014-05-28 12:29:31	2014-05-28 12:29:31	48990	leap.go
278	35	d8a90ae96b211a9964b1613d	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%400 == 0 || year%100 != 0)\n}	\N	\N	0	1	2014-02-18 19:30:35	2014-02-18 19:30:35	53518	leap.go
135	43	da819b0ba5105e6b519787ce	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn isDivisibleBy(year, 400) || (!isDivisibleBy(year, 100) && isDivisibleBy(year, 4))\n}\n\nfunc isDivisibleBy(year, divider int) bool {\n\treturn (year % divider) == 0\n}	\N	\N	0	6	2014-07-16 03:05:07	2014-07-16 03:05:07	48990	leap.go
136	43	44e343cfb4bc88c5f228c388	pending	javascript	gigasecond	function Gigasecond(birthDate){\n  this.birthMillisecond = birthDate.getTime();\n  this.one = Math.pow(10,12);\n  this.error = -2800000;\n\n  this.date = function(){\n    return new Date(this.birthMillisecond + this.one + this.error);\n  };\n};\n\nmodule.exports = Gigasecond;	\N	\N	0	1	2014-05-20 20:08:53	2014-05-20 20:08:53	55736	gigasecond.js
137	43	3be7a948a2dbbf666e3da7fd	pending	ruby	triangle	class Triangle\n  attr_reader(:a, :b, :c)\n\n  def initialize(a, b, c)\n    @a, @b, @c = [a, b, c].sort\n    not_a_triangle?\n    check_length?\n  end\n\n  def kind\n    if equilateral?\n      :equilateral\n    elsif isosceles?\n      return :isosceles\n    else\n      :scalene\n    end\n  end\n\n  def equilateral?\n    a == b && a == c\n  end\n\n  def isosceles?\n    a == b || b == c\n  end\n\n  def not_a_triangle?\n    if (a + b) <= c\n      raise TriangleError\n    end\n  end\n\n  def check_length?\n    [a, b, c].each do |side|\n      if side <= 0\n        raise TriangleError\n      end\n    end\n  end\nend\n\nclass TriangleError < Exception\nend	\N	\N	0	1	2014-05-14 15:57:31	2014-05-14 15:57:31	53776	triangle.rb
138	43	66bb47171fe1633fe25eac36	pending	ruby	word-count	class Phrase\n\n  attr_reader :context\n  def initialize context\n    context = remove_punctuation(context)\n    context = downcase_all_characters(context)\n    @words  = split_the_context_by_space(context)\n  end\n\n  # convert the array of words into a hash\n  def word_count\n    data = Hash.new\n    @words.each { |word|\n      if data.has_key?(word)\n        data[word] = data[word] + 1\n      else\n        data[word] = 1\n      end\n    }\n    data\n  end\n\n  private\n\n  def remove_punctuation context\n    context = context.gsub(/[^0-9A-Za-z]/, " ")\n  end\n\n  def downcase_all_characters context\n    context = context.downcase\n  end\n\n  def split_the_context_by_space(context)\n    context = context.split(" ")\n  end\nend	\N	\N	0	1	2014-05-03 06:41:55	2014-05-03 06:41:55	46050	word-count.rb
139	43	a45956c1a81a9979f16efbac	superseded	go	difference-of-squares	package diffsquares\n\n// SquareOfSums squares the sums the numbers 0...n\nfunc SquareOfSums(n int) int {\n\tsums := 0\n\tfor i := n; i > 0; i-- {\n\t\tsums += i\n\t}\n\treturn sums * sums\n}\n\n// SumOfSquares sums the squares of numbers 0...n\nfunc SumOfSquares(n int) int {\n\tsums := 0\n\tfor i := n; i > 0; i-- {\n\t\tsums += i * i\n\t}\n\treturn sums\n}\n\n// Difference subtracts SumOfSquares from SquareOfSums\nfunc Difference(n int) int {\n\treturn SquareOfSums(n) - SumOfSquares(n)\n}	\N	\N	0	1	2014-06-20 17:45:25	2014-06-20 17:45:25	60498	difference_of_squares.go
140	43	f6083da1a0cde363df089807	pending	go	difference-of-squares	package diffsquares\n\n// SquareOfSums squares the sums the numbers 0...n\nfunc SquareOfSums(n int) int {\n\treturn (n*n*n*n + 2*n*n*n + n*n) / 4\n}\n\n// SumOfSquares sums the squares of numbers 0...n\nfunc SumOfSquares(n int) int {\n\treturn n * (n + 1) * (2*n + 1) / 6\n}\n\n// Difference subtracts SumOfSquares from SquareOfSums\nfunc Difference(n int) int {\n\treturn SquareOfSums(n) - SumOfSquares(n)\n}	\N	\N	0	2	2014-06-28 14:36:33	2014-06-28 14:36:33	60498	difference_of_squares.go
141	43	6af1094769dce3656c99d028	pending	haskell	trinary	module Trinary (showTri, readTri) where\n\nimport Control.Monad\nimport Data.Char\n\nshowTri :: (Integral a, Show a) => a -> String\nshowTri 0 = "0"\nshowTri x = reverse $ toTri x\n    where\n        toTri 0 = ""\n        toTri v = intToDigit (fromIntegral v `mod` 3) : toTri (v `div` 3)\n\nreadTri :: (Integral a, Show a) => String -> a\nreadTri x = case foldM convert 0 x of\n                Just v  -> v\n                Nothing -> 0\n    where\n        convert curValue '0' = Just $ curValue * 3\n        convert curValue '1' = Just $ curValue * 3 + 1\n        convert curValue '2' = Just $ curValue * 3 + 2\n        convert _ _ = Nothing	\N	\N	0	1	2014-05-19 15:32:34	2014-05-19 15:32:34	42355	trinary.hs
142	43	9ce88e117fa42f0b0140f5dc	superseded	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nstrToLower = map toLower\n\nisAnagram :: String -> String -> Bool\nisAnagram s1 s2 | s1 == s2 = False\n                | True = sort s1 == sort s2 \n\n\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s1 = filter (\\s2 -> isAnagram (strToLower s1) (strToLower s2))	\N	\N	0	1	2014-05-11 22:04:08	2014-05-11 22:04:08	56873	Anagram.hs
143	43	cef5e5dada990f93ce896631	superseded	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nstrToLower = map toLower\n\nisAnagram :: String -> String -> Bool\nisAnagram s1 s2 | s1 == s2 = False\n                | True = sort s1 == sort s2 \n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s1 = filter (\\s2 -> isAnagram (strToLower s1) (strToLower s2))	\N	\N	0	2	2014-05-29 20:33:44	2014-05-29 20:33:44	56873	Anagram.hs
144	43	7e58987605f4c6fb713d82cc	superseded	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\n\nstrToLower = map toLower\n\nisAnagram :: String -> String -> Bool\nisAnagram s1 s2 = s1 /= s2 && sort s1 == sort s2 \n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s1 = let ls1 = strToLower s1\n                 in filter (\\s2 -> isAnagram ls1 (strToLower s2))	\N	\N	0	3	2014-06-13 08:53:02	2014-06-13 08:53:02	56873	Anagram.hs
145	43	05ab48e042083b61a840c712	pending	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s1 = let strToLower = map toLower\n                     ls1 = strToLower s1\n                     ss1 = sort ls1\n                 in filter (\\s2 -> \n                    let ls2 = strToLower s2 in ls1 /= ls2 && ss1 == sort ls2)	\N	\N	0	4	2014-06-25 14:15:03	2014-06-25 14:15:03	56873	Anagram.hs
146	45	58d589b70833d4b23aaf613a	pending	ruby	bob	class Bob\n  def hey str\n    return 'Fine. Be that way!' if str.strip.empty?\n    return 'Woah, chill out!' if str =~ /[A-Z]/ && str !~ /[a-z]/\n    return 'Sure.' if str[-1] == '?'\n    'Whatever.'\n  end\nend	\N	\N	0	1	2014-03-12 08:02:48	2014-03-12 08:02:48	43863	bob.rb
147	45	530abcf1501b4dc62fea4ea1	superseded	clojure	meetup	(ns meetup)\n\n;; Day Generators\n(defn teenths [month year]\n  (->>\n    (range 13 20)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn firsts [month year]\n  (->>\n    (range 1 8)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn seconds [month year]\n  (->>\n    (range 8 15)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn thirds [month year]\n  (->>\n    (range 15 22)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn fourths [month year]\n  (->>\n    (range 22 29)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn lasts [month year]\n  (let [lst (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DAY_OF_MONTH)]\n    (->>\n      (range lst (- lst 8) -1)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n(defn dayofweek [day calendars]\n  (first (filter #(= day (.get % java.util.Calendar/DAY_OF_WEEK)) calendars)))\n\n(defn as-numbers [calendar]\n  (vector (.get calendar java.util.Calendar/YEAR)\n          (inc (.get calendar java.util.Calendar/MONTH))\n          (.get calendar java.util.Calendar/DAY_OF_MONTH)))\n\n(defn find-day [month year day generator]\n  (->>\n    (generator month year)\n    (dayofweek day)\n    as-numbers))\n\n(defn monteenth [month year]\n    (find-day month year java.util.Calendar/MONDAY teenths))\n(defn tuesteenth [month year]\n    (find-day month year java.util.Calendar/TUESDAY teenths))\n(defn wednesteenth [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY teenths))\n(defn thursteenth [month year]\n    (find-day month year java.util.Calendar/THURSDAY teenths))\n(defn friteenth [month year]\n    (find-day month year java.util.Calendar/FRIDAY teenths))\n(defn saturteenth [month year]\n    (find-day month year java.util.Calendar/SATURDAY teenths))\n(defn sunteenth [month year]\n    (find-day month year java.util.Calendar/SUNDAY teenths))\n(defn first-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY firsts))\n(defn first-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY firsts))\n(defn first-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY firsts))\n(defn first-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY firsts))\n(defn first-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY firsts))\n(defn first-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY firsts))\n(defn first-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY firsts))\n(defn second-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY seconds))\n(defn second-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY seconds))\n(defn second-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY seconds))\n(defn second-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY seconds))\n(defn second-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY seconds))\n(defn second-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY seconds))\n(defn second-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY seconds))\n(defn third-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY thirds))\n(defn third-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY thirds))\n(defn third-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY thirds))\n(defn third-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY thirds))\n(defn third-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY thirds))\n(defn third-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY thirds))\n(defn third-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY thirds))\n(defn fourth-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY fourths))\n(defn fourth-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY fourths))\n(defn fourth-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY fourths))\n(defn fourth-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY fourths))\n(defn fourth-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY fourths))\n(defn fourth-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY fourths))\n(defn fourth-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY fourths))\n(defn last-monday [month year]\n    (find-day month year java.util.Calendar/MONDAY lasts))\n(defn last-tuesday [month year]\n    (find-day month year java.util.Calendar/TUESDAY lasts))\n(defn last-wednesday [month year]\n    (find-day month year java.util.Calendar/WEDNESDAY lasts))\n(defn last-thursday [month year]\n    (find-day month year java.util.Calendar/THURSDAY lasts))\n(defn last-friday [month year]\n    (find-day month year java.util.Calendar/FRIDAY lasts))\n(defn last-saturday [month year]\n    (find-day month year java.util.Calendar/SATURDAY lasts))\n(defn last-sunday [month year]\n    (find-day month year java.util.Calendar/SUNDAY lasts))	\N	\N	0	1	2014-02-08 21:45:59	2014-02-08 21:45:59	49182	meetup.clj
188	22	9e3a3110c39be8bb150045c2	superseded	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@words = phrase.delete("!!&@$%^&:,").downcase.split\n\n\tend\n\n\tdef word_count\n\t\twords = {}\n\t\t@words.each_with_object({}) do |word, words|\n\t\t\twords[word] ||= 0\n\t\t\twords[word] += 1\n\t\tend\n\tend\n\n\nend	\N	\N	0	1	2014-03-18 01:17:07	2014-03-18 01:17:07	46147	word-count.rb
148	45	f130b0cf95d7bbd52dc8df0a	superseded	clojure	meetup	(ns meetup\n  (:require [clojure.string :refer [upper-case] :as s]))\n\n;; Day Generators\n(defn teenths [month year]\n  (->>\n    (range 13 20)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn firsts [month year]\n  (->>\n    (range 1 8)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn seconds [month year]\n  (->>\n    (range 8 15)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn thirds [month year]\n  (->>\n    (range 15 22)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn fourths [month year]\n  (->>\n    (range 22 29)\n    (map #(java.util.GregorianCalendar. year (dec month) %))))\n(defn lasts [month year]\n  (let [lst (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DAY_OF_MONTH)]\n    (->>\n      (range lst (- lst 8) -1)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n(defn dayofweek [day calendars]\n  (first (filter #(= day (.get % java.util.Calendar/DAY_OF_WEEK)) calendars)))\n\n(defn as-numbers [calendar]\n  (vector (.get calendar java.util.Calendar/YEAR)\n          (inc (.get calendar java.util.Calendar/MONTH))\n          (.get calendar java.util.Calendar/DAY_OF_MONTH)))\n\n(defn find-day [day generator]\n  (fn [month year]\n    (->>\n      (generator month year)\n      (dayofweek day)\n      as-numbers)))\n\n(def monteenth (find-day java.util.Calendar/MONDAY teenths))\n(def tuesteenth (find-day java.util.Calendar/TUESDAY teenths))\n(def wednesteenth (find-day java.util.Calendar/WEDNESDAY teenths))\n(def thursteenth (find-day java.util.Calendar/THURSDAY teenths))\n(def friteenth (find-day java.util.Calendar/FRIDAY teenths))\n(def saturteenth (find-day java.util.Calendar/SATURDAY teenths))\n(def sunteenth (find-day java.util.Calendar/SUNDAY teenths))\n\n(defmacro build-finder [generator-type day-of-week]\n   `(def ~(symbol (str (name generator-type) "-" (name day-of-week)))\n         (find-day ~(symbol (name 'java.util.Calendar) (s/upper-case (name day-of-week)))\n                   ~(symbol (str (name generator-type) "s")))))\n\n(build-finder :first :monday)\n(build-finder :first :tuesday)\n(build-finder :first :wednesday)\n(build-finder :first :thursday)\n(build-finder :first :friday)\n(build-finder :first :saturday)\n(build-finder :first :sunday)\n(build-finder :second :monday)\n(build-finder :second :tuesday)\n(build-finder :second :wednesday)\n(build-finder :second :thursday)\n(build-finder :second :friday)\n(build-finder :second :saturday)\n(build-finder :second :sunday)\n(build-finder :third :monday)\n(build-finder :third :tuesday)\n(build-finder :third :wednesday)\n(build-finder :third :thursday)\n(build-finder :third :friday)\n(build-finder :third :saturday)\n(build-finder :third :sunday)\n(build-finder :fourth :monday)\n(build-finder :fourth :tuesday)\n(build-finder :fourth :wednesday)\n(build-finder :fourth :thursday)\n(build-finder :fourth :friday)\n(build-finder :fourth :saturday)\n(build-finder :fourth :sunday)\n(build-finder :last :monday)\n(build-finder :last :tuesday)\n(build-finder :last :wednesday)\n(build-finder :last :thursday)\n(build-finder :last :friday)\n(build-finder :last :saturday)\n(build-finder :last :sunday)	\N	\N	0	2	2014-02-11 19:47:34	2014-02-11 19:47:34	49182	meetup.clj
149	45	7b5b3058202aa11a5c5fa3d9	pending	clojure	meetup	(ns meetup\n  (:require [clojure.string :refer [upper-case] :as s]))\n\n(defn- gen-builder [from to]\n  (fn [month year]\n    (->>\n      (range from to)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n;; Day gen-builders\n(def teenths (gen-builder 13 20))\n(def firsts (gen-builder 1 8))\n(def seconds (gen-builder 8 15))\n(def thirds (gen-builder 15 22))\n(def fourths (gen-builder 22 29))\n(defn- lasts [month year]\n  (let [lst (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DAY_OF_MONTH)]\n    (->>\n      (range lst (- lst 8) -1)\n      (map #(java.util.GregorianCalendar. year (dec month) %)))))\n\n(defn- dayofweek [day calendars]\n  (first (filter #(= day (.get % java.util.Calendar/DAY_OF_WEEK)) calendars)))\n\n(defn- as-numbers [calendar]\n  (vector (.get calendar java.util.Calendar/YEAR)\n          (inc (.get calendar java.util.Calendar/MONTH))\n          (.get calendar java.util.Calendar/DAY_OF_MONTH)))\n\n(defn- find-day [day generator]\n  (fn [month year]\n    (->>\n      (generator month year)\n      (dayofweek day)\n      as-numbers)))\n\n(def monteenth (find-day java.util.Calendar/MONDAY teenths))\n(def tuesteenth (find-day java.util.Calendar/TUESDAY teenths))\n(def wednesteenth (find-day java.util.Calendar/WEDNESDAY teenths))\n(def thursteenth (find-day java.util.Calendar/THURSDAY teenths))\n(def friteenth (find-day java.util.Calendar/FRIDAY teenths))\n(def saturteenth (find-day java.util.Calendar/SATURDAY teenths))\n(def sunteenth (find-day java.util.Calendar/SUNDAY teenths))\n\n(defmacro build-finder [generator-type day-of-week]\n   `(def ~(symbol (str (name generator-type) "-" (name day-of-week)))\n         (find-day ~(symbol (name 'java.util.Calendar) (s/upper-case (name day-of-week)))\n                   ~(symbol (str (name generator-type) "s")))))\n\n(build-finder :first :monday)\n(build-finder :first :tuesday)\n(build-finder :first :wednesday)\n(build-finder :first :thursday)\n(build-finder :first :friday)\n(build-finder :first :saturday)\n(build-finder :first :sunday)\n(build-finder :second :monday)\n(build-finder :second :tuesday)\n(build-finder :second :wednesday)\n(build-finder :second :thursday)\n(build-finder :second :friday)\n(build-finder :second :saturday)\n(build-finder :second :sunday)\n(build-finder :third :monday)\n(build-finder :third :tuesday)\n(build-finder :third :wednesday)\n(build-finder :third :thursday)\n(build-finder :third :friday)\n(build-finder :third :saturday)\n(build-finder :third :sunday)\n(build-finder :fourth :monday)\n(build-finder :fourth :tuesday)\n(build-finder :fourth :wednesday)\n(build-finder :fourth :thursday)\n(build-finder :fourth :friday)\n(build-finder :fourth :saturday)\n(build-finder :fourth :sunday)\n(build-finder :last :monday)\n(build-finder :last :tuesday)\n(build-finder :last :wednesday)\n(build-finder :last :thursday)\n(build-finder :last :friday)\n(build-finder :last :saturday)\n(build-finder :last :sunday)	\N	\N	0	3	2014-05-08 11:52:01	2014-05-08 11:52:01	49182	meetup.clj
150	47	29426541233d33ed0197246e	pending	ruby	grains	class Grains\n  def square(num, grains = 1)\n    return grains if num <= 1\n    square(num - 1, grains *= 2 )\n  end\n\n  def total\n    (1..64).inject { |sum, num| sum + square(num) }\n  end\nend	\N	\N	0	2	2014-05-18 17:57:10	2014-05-18 17:57:10	53151	grains.rb
151	47	65023b1164e3526e76551f6f	superseded	ruby	grains	class Grains\n  def square(num, grains = 1)\n    return grains if num <= 1\n    square(num - 1, grains *= 2 )\n  end\n\n  def total\n    total_grains = 0\n    num = 1\n    until num > 64\n      total_grains += square(num)\n      num += 1\n    end\n    total_grains\n  end\nend	\N	\N	0	1	2014-07-01 05:40:53	2014-07-01 05:40:53	53151	grains.rb
152	47	f66dc3a5d18c9cd22531b244	pending	clojure	nucleotide-count	(ns dna)\n\n\n(def dna-nucleotides [\\A \\C \\G \\T])\n\n\n(def rna-nucleotides [\\A \\C \\G \\U])\n\n\n(defn- valid? [nucleotide]\n  (let [nucleotides (concat dna-nucleotides rna-nucleotides)]\n    (some #{nucleotide} nucleotides)))\n\n\n(defn- validate [nucleotide]\n  (if-not (valid? nucleotide)\n    (throw (Exception. "invalid nucleotide"))))\n\n\n(defn- empty-map [x]\n  (apply hash-map (flatten (map vector x (repeat (clojure.core/count x) 0)))))\n\n\n(defn count [nucleotide nucleotides]\n  (validate nucleotide)\n  (get (frequencies nucleotides) nucleotide 0))\n\n\n(defn nucleotide-counts [nucleotides]\n  (merge\n    (empty-map dna-nucleotides)\n    (frequencies nucleotides)))	\N	\N	0	1	2014-05-09 09:34:10	2014-05-09 09:34:10	52276	dna.clj
153	48	aca86a3320c7f1fa32011256	pending	clojure	word-count	(ns word-count)\n\n(defn sanitize [s]\n  (-> s\n      (clojure.string/lower-case)\n      (clojure.string/replace #"[^a-z0-9 ]" "")))\n\n(defn words [s]\n  (clojure.string/split (sanitize s) #"\\s+"))\n\n(defn word-count [s]\n  (frequencies (words s)))	\N	\N	0	1	2014-07-26 08:41:56	2014-07-26 08:41:56	56534	word_count.clj
154	48	a86af0e5ece099fc5455097c	pending	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n\tdef initialize(input_date)\n\t\t@res_date = input_date\n\tend\n\n\tdef date\n\t\t@res_date + ((10 ** 9) / (60 * 60 * 24))\n\tend\nend	\N	\N	0	1	2014-07-25 13:32:32	2014-07-25 13:32:32	58591	gigasecond.rb
155	48	4b8b689da275ad2c9c055228	pending	ruby	bob	class Bob\r\n\tdef hey (cadena)\r\n\t\tif cadena != String\r\n\t\t\treturn 'Whatever.'\r\n\t\tend\r\n\t\tif cadena=~ /[A-Z]/\r\n\t\t\treturn 'Woah, chill out!'\r\n\t\tend\r\n\t\tif cadena=~ /[a-z]/\r\n\t\t\treturn 'Fine. Be that way!'\r\n\t\tend\r\n\t\tif cadena.end_with?('?')\r\n\t\t\treturn 'Sure.'\r\n\t\tend\r\n\tend\r\nend	\N	\N	0	1	2014-07-25 15:07:37	2014-07-25 15:07:37	49805	bob.rb
156	48	c4b932af52d76f42287d09c3	superseded	javascript	bob	var Bob = function() {\n\n\nthis.hey = function(input){\n\n\n  if(input.toUpperCase() === input && /[A-Z]/.test(input)){\n    return 'Woah, chill out!';\n  } else if (input.substring(input.length-1) === '?'){\n    return 'Sure.';\n  } else if (input.replace(/\\s+/g, '') === ""){\n    return 'Fine. Be that way!';\n  } else {\n    return 'Whatever.';\n  }\n\n  };\n\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-07-26 00:55:13	2014-07-26 00:55:13	48074	bob.js
157	48	3d698e03fb56d92e993dcadf	superseded	javascript	bob	// var Bob = function() {\n\n\n// this.hey = function(input){\n\n\n//   if(input.toUpperCase() === input && /[A-Z]/.test(input)){\n//     return 'Woah, chill out!';\n//   } else if (input.substring(input.length-1) === '?'){\n//     return 'Sure.';\n//   } else if (input.replace(/\\s+/g, '') === ""){\n//     return 'Fine. Be that way!';\n//   } else {\n//     return 'Whatever.';\n//   }\n\n//   };\n\n// };\n\n// module.exports = Bob;\n\nfunction Bob() {\n    var ends_with = function(string,character) {\n        return character === string.slice(-1);\n    };\n    var isShouting = function(string) {\n        return string === string.toUpperCase();\n    };\n    var isEmpty = function(string) {\n        return string === '';\n    };\n\n    this.hey = function(message){\n        if (isEmpty(message)){\n            return 'Fine, be that way.'\n        }   else if (ends_with(message,'?')) {\n            return 'Sure';\n        } else if (isShouting(message)) {\n            return 'Woah, chill out!';\n        } else {\n            return 'Whatever';\n        };\n    }\n}\n\nmodule.exports = Bob;	\N	\N	0	2	2014-07-26 03:26:04	2014-07-26 03:26:04	48074	bob.js
158	48	6a1532ff5cfcee7148af7ab8	pending	javascript	bob	var Bob = function() {\n\n\nthis.hey = function(input){\n\n\n  if(input.toUpperCase() === input && /[A-Z]/.test(input)){\n    return 'Woah, chill out!';\n  } else if (input.substring(input.length-1) === '?'){\n    return 'Sure.';\n  } else if (input.replace(/\\s+/g, '') === ""){\n    return 'Fine. Be that way!';\n  } else {\n    return 'Whatever.';\n  }\n\n  };\n\n};\n\nmodule.exports = Bob;	\N	\N	0	3	2014-07-26 05:49:19	2014-07-26 05:49:19	48074	bob.js
159	48	f5c12ece651ad11b9dbaf381	superseded	ruby	roman-numerals	class Fixnum\n  def to_roman\n    Roman.new(self).convert\n  end\nend\n\n\nclass Roman\n  attr_reader :num\n\n  MAPPINGS = { 1 => 'I',\n               5 => 'V',\n               10 => 'X',\n               50 => 'L',\n               100 => 'C',\n               500 => 'D',\n               1000 => 'M' }\n\n  def initialize(num)\n    @num = num\n  end\n\n  def convert\n    MAPPINGS[num]\n  end\nend	\N	\N	0	1	2014-07-26 01:28:39	2014-07-26 01:28:39	59179	roman.rb
177	25	e0a9809b2038085b1eb85bca	pending	ruby	bob	class Bob\n  def hey(phrase)\n    return 'Fine. Be that way!' if is_silent?(phrase)\n    return 'Woah, chill out!'   if is_shouting?(phrase)\n    return 'Sure.'              if is_asking?(phrase)\n    'Whatever.'\n  end\n\n  def is_silent?(phrase)\n    phrase.strip.empty?\n  end\n\n  def is_shouting?(phrase)\n    phrase == phrase.upcase && phrase =~ /[A-Za-z]/\n  end\n\n  def is_asking?(phrase)\n    phrase.end_with?('?')\n  end\nend	\N	\N	0	2	2014-06-19 01:02:06	2014-06-19 01:02:06	55521	bob.rb
160	48	cd6910d3e11f4ce9cda257b1	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    Roman.new(self).convert\n  end\nend\n\n\nclass Roman\n  attr_reader :num\n\n  MAPPINGS = { 1000 => 'M',\n               900 => 'CM',\n               500 => 'D',\n               400 => 'CD',\n               100 => 'C',\n               90 => 'XC',\n               50 => 'L',\n               40 => 'XL',\n               10 => 'X',\n               9 => 'IX',\n               5 => 'V',\n               4 => 'IV',\n               1 => 'I'}\n\n  def initialize(num)\n    @num = num\n  end\n\n  def convert\n    str = ""\n    MAPPINGS.sort{|a,b| b[0] <=> a[0]}.each do |val, sym|\n      occurances, leftover = num.divmod(val)\n      str += sym * occurances\n      @num = leftover\n    end\n    str\n  end\nend	\N	\N	0	2	2014-07-26 04:22:56	2014-07-26 04:22:56	59179	roman.rb
161	48	369dd9eb831892d1a2c95741	pending	ruby	matrix	class Matrix\n\n  attr_reader :rows\n\n  def initialize(matrix_string)\n    @rows = convert(matrix_string)\n  end\n\n  def columns\n    rows.transpose\n  end\n\n  private\n\n  def convert(matrix_string)\n    string_rows = matrix_string.split("\\n")\n    string_rows.collect do |row|\n      row.split.collect(&:to_i)\n    end\n  end\n\nend	\N	\N	0	1	2014-07-25 16:12:55	2014-07-25 16:12:55	51857	matrix.rb
162	48	08f2e0d2773b1d37a90d2844	superseded	haskell	meetup	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Meetup( Weekday(..), Schedule(..), meetupDay ) where\nimport Data.Time.Calendar( Day, fromGregorian, gregorianMonthLength )\nimport Data.Time.Format( formatTime )\nimport System.Locale( defaultTimeLocale )\n\ndata Weekday = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday \n  deriving ( Show, Enum )\ndata Schedule = First | Second | Third | Fourth | Fifth | Last | Teenth\n  deriving ( Show, Enum )\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day \nmeetupDay s w y m = fromGregorian y m d\n    where\n      d = case s of \n            Teenth -> teenthDayOffset + 13\n            Last -> lastDayOffset + mld\n            _ ->  weekdayOffset + 1 + (fromEnum s * 7)\n      mld = gregorianMonthLength y m\n      teenthDayOffset = (fromEnum w - dayOfWeek y m 13) `mod` 7\n      lastDayOffset = (fromEnum w - dayOfWeek y m mld) `mod` (-7) \n      weekdayOffset = (fromEnum w - dayOfWeek y m 1) `mod` 7\n\ndayOfWeek :: Integer -> Int -> Int -> Int\ndayOfWeek y m d = read . formatTime defaultTimeLocale "%w" $ fromGregorian y m d	\N	\N	0	1	2014-07-25 10:05:14	2014-07-25 10:05:14	54218	Meetup.hs
163	48	dba2ed9a4eec310c27430961	superseded	haskell	meetup	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Meetup( Weekday(..), Schedule(..), meetupDay ) where\nimport Data.Time.Calendar( Day, fromGregorianValid, fromGregorian, gregorianMonthLength )\nimport Data.Time.Format( formatTime )\nimport System.Locale( defaultTimeLocale )\n\ndata Weekday = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday \n  deriving ( Show, Enum )\ndata Schedule = First | Second | Third | Fourth | Fifth | Last | Teenth\n  deriving ( Show, Enum )\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay s w y m = case meetupDayValid s w y m of \n                      Just d -> d\n                      Nothing -> error ("There is no " ++ show s ++ " " ++ show w ++ \n                                 " in " ++ show y ++ "/" ++ show m)\n\nmeetupDayValid :: Schedule -> Weekday -> Integer -> Int -> Maybe Day \nmeetupDayValid s w y m = fromGregorianValid y m d\n    where\n      d = case s of \n            Teenth -> teenthDayOffset + 13\n            Last -> lastDayOffset + mld\n            _ ->  weekdayOffset + 1 + (fromEnum s * 7)\n      mld = gregorianMonthLength y m\n      teenthDayOffset = (fromEnum w - dayOfWeek y m 13) `mod` 7\n      lastDayOffset = (fromEnum w - dayOfWeek y m mld) `mod` (-7) \n      weekdayOffset = (fromEnum w - dayOfWeek y m 1) `mod` 7\n\ndayOfWeek :: Integer -> Int -> Int -> Int\ndayOfWeek y m d = read . formatTime defaultTimeLocale "%w" $ fromGregorian y m d	\N	\N	0	2	2014-07-25 18:45:20	2014-07-25 18:45:20	54218	Meetup.hs
164	48	8482a017512f37cb48979c79	superseded	haskell	meetup	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Meetup( Weekday(..), Schedule(..), meetupDay ) where\nimport Data.Time.Calendar( Day, fromGregorianValid, \n                           fromGregorian, gregorianMonthLength )\nimport Data.Time.Format( formatTime )\nimport System.Locale( defaultTimeLocale )\n\ndata Weekday = Sunday | Monday | Tuesday | Wednesday |\n               Thursday | Friday | Saturday \n  deriving ( Show, Enum )\ndata Schedule = First | Second | Third | Fourth | Fifth | \n                Last | Teenth\n  deriving ( Show, Enum )\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay s w y m = case meetupDayValid s w y m of \n                      Just d -> d\n                      Nothing -> error errMsg\n    where\n      errMsg = "There is no " ++ show s ++ " " ++ show w ++ \n               " in " ++ show y ++ "/" ++ show m\n               \nmeetupDayValid :: Schedule -> Weekday -> Integer -> Int -> Maybe Day \nmeetupDayValid s w y m = fromGregorianValid y m d\n    where\n      d = case s of \n            Teenth -> teenthDayOffset + 13\n            Last -> lastDayOffset + mld\n            _ ->  weekdayOffset + 1 + (fromEnum s * 7)\n      mld = gregorianMonthLength y m\n      teenthDayOffset = (fromEnum w - dayOfWeek y m 13) `mod` 7\n      lastDayOffset = (fromEnum w - dayOfWeek y m mld) `mod` (-7) \n      weekdayOffset = (fromEnum w - dayOfWeek y m 1) `mod` 7\n\ndayOfWeek :: Integer -> Int -> Int -> Int\ndayOfWeek = (((read . formatTime defaultTimeLocale "%w") .) .) . fromGregorian	\N	\N	0	3	2014-07-25 23:19:48	2014-07-25 23:19:48	54218	Meetup.hs
165	48	dacc010dd14ac5978d319289	superseded	haskell	meetup	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Meetup( Weekday(..), Schedule(..), meetupDay, dayOfWeek ) where\nimport Data.Time.Calendar( Day, fromGregorianValid, \n                           gregorianMonthLength )\n\ndata Weekday = Sunday | Monday | Tuesday | Wednesday |\n                 Thursday | Friday | Saturday \n  deriving ( Show, Enum )\ndata Schedule = First | Second | Third | Fourth | Fifth | \n                  Last | Teenth\n  deriving ( Show, Enum )\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay s w y m = case meetupDayValid s w y m of \n                      Just d -> d\n                      Nothing -> error errMsg\n    where\n      errMsg = "There is no " ++ show s ++ " " ++ show w ++ \n                 " in " ++ show y ++ "/" ++ show m\n               \nmeetupDayValid :: Schedule -> Weekday -> Integer -> Int -> Maybe Day \nmeetupDayValid s w y m = fromGregorianValid y m d\n    where\n      d = case s of \n            Teenth -> dayOffset 13 `mod` 7 + 13\n            Last -> dayOffset l `mod` (-7) + l\n            _ ->  dayOffset 1 `mod` 7 + 1 + (fromEnum s * 7)\n      l = gregorianMonthLength y m\n      dayOffset t = fromEnum w - dayOfWeek y m t\n\ndayOfWeek :: Integer -> Int -> Int -> Int\n-- Schwerdtfeger's algorithm (Wikipedia)\ndayOfWeek y m d = (d + e + f + g + (g `div` 4)) `mod` 7 \n    where \n      y' = fromInteger y\n      (c, g) | m < 3 = divMod (y'-1) 100\n             | otherwise = divMod y' 100\n      e = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4] !! (m - 1)\n      f = [0, 5, 3, 1] !! (c `mod` 4)\n      \n      	\N	\N	0	4	2014-07-26 03:48:42	2014-07-26 03:48:42	54218	Meetup.hs
178	25	06e05caf503da6e4710bb8d1	superseded	ruby	bob	class Bob\n  def hey(input)\n    return 'Fine. Be that way!' if input.strip.empty?\n    return 'Woah, chill out!'   if input == input.upcase && input =~ /[A-Za-z]/\n    return 'Sure.'              if input.end_with?('?')\n    'Whatever.'\n  end\nend	\N	\N	0	1	2014-06-19 14:20:12	2014-06-19 14:20:12	55521	bob.rb
189	22	2ec96d37703f917f07f14f46	pending	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@words = phrase.delete("!!&@$%^&:,").downcase.split\n\n\tend\n\n\tdef word_count\n\t\t@words.each_with_object({}) do |word, words|\n\t\t\twords[word] ||= 0\n\t\t\twords[word] += 1\n\t\tend\n\tend\n\n\nend	\N	\N	0	2	2014-05-25 08:12:01	2014-05-25 08:12:01	46147	word-count.rb
166	48	7c5b7534227edd78a30e0b8e	pending	haskell	meetup	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Meetup( Weekday(..), Schedule(..), meetupDay, dayOfWeek ) where\nimport Data.Time.Calendar( Day, \n                           fromGregorian,\n                           fromGregorianValid, \n                           gregorianMonthLength )\nimport Data.Time.Calendar.WeekDate( toWeekDate )\n\ndata Weekday = Sunday | Monday | Tuesday | Wednesday |\n                 Thursday | Friday | Saturday \n  deriving ( Show, Enum )\ndata Schedule = First | Second | Third | Fourth | Fifth | \n                  Last | Teenth\n  deriving ( Show, Enum )\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay s w y m = case meetupDayValid s w y m of \n                      Just d -> d\n                      Nothing -> error errMsg\n    where\n      errMsg = "There is no " ++ show s ++ " " ++ show w ++ \n                 " in " ++ show y ++ "/" ++ show m\n               \nmeetupDayValid :: Schedule -> Weekday -> Integer -> Int -> Maybe Day \nmeetupDayValid s w y m = fromGregorianValid y m d\n    where\n      d = case s of \n            Teenth -> dayOffset 13 `mod` 7 + 13\n            Last -> dayOffset l `mod` (-7) + l\n            _ ->  dayOffset 1 `mod` 7 + 1 + (fromEnum s * 7)\n      l = gregorianMonthLength y m\n      dayOffset t = fromEnum w - dayOfWeek y m t\n\ndayOfWeek :: Integer -> Int -> Int -> Int\ndayOfWeek y m d = wd\n  where\n    (_, _, wd) = toWeekDate $ fromGregorian y m d\n    	\N	\N	0	5	2014-07-26 11:48:46	2014-07-26 11:48:46	54218	Meetup.hs
167	48	720ef54522242e9153336a9d	pending	javascript	word-count	var words = function (phrase) {\r\n  phrase = phrase.replace(/[^\\w\\s]*/g, '').toLowerCase();\r\n\r\n  var wordCount = {};\r\n\r\n  phrase.split(/\\s+/).forEach(function (element) {\r\n    if (element in wordCount && typeof wordCount[element] === 'number') {\r\n      wordCount[element] += 1;\r\n    } else {\r\n      wordCount[element] = 1;\r\n    }\r\n  });\r\n\r\n  return wordCount;\r\n};\r\n\r\nmodule.exports = words;\r	\N	\N	0	1	2014-07-25 16:28:59	2014-07-25 16:28:59	53022	word-count.js
168	48	90c83e1d7d1b49713bd34e56	pending	scala	meetup	import java.util.GregorianCalendar\nimport java.util.Calendar\n\nclass Meetup(month: Int, year: Int) {\n\t\n\tdef build(i: Int) = {\n\t\tnew GregorianCalendar(year,month-1,i)\n\t}\n\n\n\tdef findNextDay(startDayOfMonth: Int , day: Int) = {\n\t\tval firstDay = build(startDayOfMonth)\n\t\tval gap = day - firstDay.get(Calendar.DAY_OF_WEEK)\n\t\tif (gap == 0) {\n\t\t  firstDay\n\t\t}\n\t\telse if (gap > 0){\n\t\t\tbuild(startDayOfMonth+gap)\n\t\t}\n\t\telse {\n\t\t\tbuild(startDayOfMonth+gap+7)\n\t\t}\n\n\t}\n\n\tdef first(day: Int) = findNextDay(1,day)\n\n\tdef last(i: Int) = {\n\t\tval thirdWeek = third(i)\n\t\tval thirdWeekDay = thirdWeek.get(Calendar.DAY_OF_MONTH)\n\t\tval remainingDays = thirdWeek.getActualMaximum(Calendar.DAY_OF_MONTH) - thirdWeekDay\n\t\tif (remainingDays < 7) {\n\t\t\tthirdWeek\n\t\t}\n\t\telse if (remainingDays >= 14) {\n\t\t\tbuild(thirdWeekDay+14)\n\t\t}\n\t\telse {\n\t\t\tbuild(thirdWeekDay+7)\n\t\t}\n\t\t\n\t}\n\n\tdef third(i: Int) = build(first(i).get(Calendar.DAY_OF_MONTH)+14)\n\n\tdef fourth(i: Int) = build(first(i).get(Calendar.DAY_OF_MONTH)+21)\n\n\tdef second(i: Int) = build(first(i).get(Calendar.DAY_OF_MONTH)+7)\n\n\tdef teenth(i: Int) = findNextDay(13,i)\n\n}\n\nobject Meetup {\n\n\tval Mon = Calendar.MONDAY\n \tval Tue = Calendar.TUESDAY\n \tval Wed = Calendar.WEDNESDAY\n \tval Thu = Calendar.THURSDAY\n \tval Fri = Calendar.FRIDAY\n \tval Sat = Calendar.SATURDAY\n \tval Sun = Calendar.SUNDAY\n\n \tval Days = Map(Mon -> Mon, Tue -> Tue, Wed -> Wed, Thu -> Thu, Fri -> Fri, Sat -> Sat, Sun -> Sun)\n\n\tdef apply(month: Int, year: Int) = {\n\t\tnew Meetup(month,year)\n\t}\n\n}	\N	\N	0	1	2014-07-25 08:15:13	2014-07-25 08:15:13	58806	meetup.scala
169	48	96e6dff0ee2c534ca4ff3aaf	pending	haskell	accumulate	module Accumulate\n( accumulate\n) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f = foldr (\\x xs -> f x : xs) []	\N	\N	0	1	2014-07-25 10:16:57	2014-07-25 10:16:57	51835	Accumulate.hs
170	48	ca2c0fc83587123cf580997d	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n    @character_counts = character_counts(@word)\n  end\n  \n  def match(possible_anagrams)\n    possible_anagrams.select { |possible_anagram| anagram?(possible_anagram) } || []\n  end\n\n  private\n\n  def character_counts(word)\n    word.chars.each_with_object(Hash.new(0)) do |character, counts|\n      counts[character] += 1\n    end\n  end\n\n  def anagram?(other_word)\n    other_word.downcase!\n    (@word != other_word) && (@character_counts == character_counts(other_word))\n  end\nend	\N	\N	0	1	2014-07-26 03:57:17	2014-07-26 03:57:17	43800	anagram.rb
171	48	0214cf75f5268a24df71264f	pending	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n  end\n  \n  def match(possible_anagrams)\n    possible_anagrams.select { |possible_anagram| anagram?(possible_anagram) } || []\n  end\n\n  private\n\n  def anagram?(other_word)\n    other_word.downcase!\n\n    if @word == other_word\n      false\n    else\n      @word.to_s.chars.sort == other_word.to_s.chars.sort\n    end\n  end\nend	\N	\N	0	2	2014-07-26 04:32:58	2014-07-26 04:32:58	43800	anagram.rb
172	48	3814b17031be57e6554f6093	pending	ruby	phone-number	class PhoneNumber\n  def initialize(str)\n    @str = str.gsub(/[^\\d+]/,'')\n  end\n\n  def number\n    return @str if @str.size == 10\n    return @str.reverse.chop.reverse if @str.size == 11 && @str.chars.first.to_i == 1\n    "0" * 10 if @str.size != 10\n  end\n\n  def area_code\n    str = number\n    str.slice(0,3)\n  end\n\n  def to_s\n    str = number\n    "(#{str[0,3]}) #{str[3,3]}-#{str[6,4]}"\n  end\n\nend	\N	\N	0	1	2014-07-25 12:03:48	2014-07-25 12:03:48	44109	phone-number.rb
173	48	606127b43182de22f69746d9	pending	ruby	grains	class Grains\n\n  def square(i)\n    grains = []\n    x = 1\n    i.times do |square|\n      grains << x\n      x = x*2\n    end\n    grains.last\n  end\n\n  def total\n    grains = []\n    total = 0\n    x = 1\n    64.times do |square|\n      grains << x\n      x = x*2\n    end\n    grains.each do |x|\n      total += x\n    end\n    total\n  end\nend	\N	\N	0	1	2014-07-25 05:53:48	2014-07-25 05:53:48	52636	grains.rb
174	48	23e5160e773ed269c9df9ae4	pending	javascript	phone-number	'use strict';\nvar PhoneNumber = function(rawPhoneNumber){\n  this.rawPhoneNumber = rawPhoneNumber;\n};\n\nmodule.exports = PhoneNumber;\n\nPhoneNumber.prototype.number = function(){\n  if(this.validPhoneNumber()) return this.parsedPhoneNumber();\n  return '0000000000';\n};\n\nPhoneNumber.prototype.areaCode = function(){\n  return this.number().slice(0,3);\n};\n\nPhoneNumber.prototype.toString = function(){\n  return "(" + this.areaCode() + ") " + this.nextThree() + '-' + this.lastFour();\n};\n\nPhoneNumber.prototype.nextThree = function(){\n  return this.number().slice(3,6);\n};\n\nPhoneNumber.prototype.lastFour = function(){\n  return this.number().slice(6,10);\n};\n\nPhoneNumber.prototype.onlyDigits = function(){\n  return this.rawPhoneNumber.replace(/[^\\d]/g, '');\n};\n\nPhoneNumber.prototype.parsedPhoneNumber = function(){\n  if(this.onlyDigits().length === 11)\n    return this.onlyDigits().replace(/^1/, '');\n  else\n    return this.onlyDigits();\n};\n\nPhoneNumber.prototype.validPhoneNumber = function(){\n  if(this.parsedPhoneNumber().length != 10)\n    return false\n  else\n    return true\n};	\N	\N	0	1	2014-07-26 06:22:22	2014-07-26 06:22:22	50118	phone-number.js
175	48	01009c62cd5f82caa3978dcd	pending	elixir	leap	defmodule Year do\n  def leap_year?(year) do\n    divisible_by = fn n -> rem(year, n) == 0 end\n    divisible_by.(400) || (divisible_by.(4) && !divisible_by.(100))\n  end\nend	\N	\N	0	1	2014-07-25 12:37:53	2014-07-25 12:37:53	43784	leap.exs
176	48	88548986988284e3b74fe9ca	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tif year%400 == 0 {\n\t\treturn true\n\t} else if year%100 == 0 {\n\t\treturn false\n\t} else if year%4 == 0 {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}	\N	\N	0	1	2014-07-25 08:31:37	2014-07-25 08:31:37	54750	leap.go
179	6	fd46924489b735e0ce145187	superseded	ruby	food-chain	class FoodChainSong\n  def sing\n    verses\n  end\n  \n  def verses first=1, last=8\n    first.upto(last).map{|number| verse number}.join("\\n") + "\\n"\n  end\n  \n  def verse number\n    fail ArgumentError unless valid_verse? number\n    case number\n    when 8\n      "I know an old lady who swallowed a horse.\\n"+\n      "She's dead, of course!\\n"\n    when 1\n      "I know an old lady who swallowed a fly.\\n"+\n      "I don't know why she swallowed the fly. Perhaps she'll die.\\n"\n    else\n      output = ""\n      output << "I know an old lady who swallowed a #{SONG[number-1][0]}.\\n"\n      output << SONG[number-1][1] + "\\n"\n      output << SONG[1...number].reverse.map{|part| part[2]}.join("\\n") + "\\n"\n      output << "I don't know why she swallowed the fly. Perhaps she'll die.\\n"\n    end\n  end\n  \n  SONG = [\n    ["fly",nil,nil],\n    [\n      "spider",\n      "It wriggled and jiggled and tickled inside her.",\n      "She swallowed the spider to catch the fly."\n    ],\n    [\n      "bird",\n      "How absurd to swallow a bird!",\n      "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."\n    ],\n    [\n      "cat",\n      "Imagine that, to swallow a cat!",\n      "She swallowed the cat to catch the bird."\n    ],\n    [\n      "dog",\n      "What a hog, to swallow a dog!",\n      "She swallowed the dog to catch the cat."\n    ],\n    [\n      "goat",\n      "Just opened her throat and swallowed a goat!",\n      "She swallowed the goat to catch the dog."\n    ],\n    [\n      "cow",\n      "I don't know how she swallowed a cow!",\n      "She swallowed the cow to catch the goat."\n    ],\n    ['horse',nil,nil]\n  ]\n  private\n  def valid_verse? number\n    number > 0 && number <= 8\n  end\nend	\N	\N	0	1	2014-03-03 22:19:03	2014-03-03 22:19:03	53378	food_chain.rb
180	6	bd5f85c765a5e06d353e742f	pending	ruby	food-chain	class FoodChainSong\n  def sing\n    verses\n  end\n  \n  def verses first=1, last=SONG.length\n    first.upto(last).map{|number| verse number}.join("\\n") + "\\n"\n  end\n  \n  def verse number\n    fail ArgumentError unless valid_verse? number\n    thing, exclamation, reason = SONG[number-1]\n    first_thing = SONG.first[0]\n    \n    case number\n    when SONG.length\n      "I know an old lady who swallowed a #{thing}.\\n"+\n      "She's dead, of course!\\n"\n    when 1\n      "I know an old lady who swallowed a #{thing}.\\n"+\n      "I don't know why she swallowed the #{first_thing}. Perhaps she'll die.\\n"\n    else\n      output = ""\n      output << "I know an old lady who swallowed a #{thing}.\\n"\n      output << exclamation + "\\n"\n      output << chain(number) + "\\n"\n      output << "I don't know why she swallowed the #{first_thing}. Perhaps she'll die.\\n"\n    end\n  end\n  \n  SONG = [\n    ["fly",nil,nil],\n    [\n      "spider",\n      "It wriggled and jiggled and tickled inside her.",\n      "She swallowed the spider to catch the fly."\n    ],\n    [\n      "bird",\n      "How absurd to swallow a bird!",\n      "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."\n    ],\n    [\n      "cat",\n      "Imagine that, to swallow a cat!",\n      "She swallowed the cat to catch the bird."\n    ],\n    [\n      "dog",\n      "What a hog, to swallow a dog!",\n      "She swallowed the dog to catch the cat."\n    ],\n    [\n      "goat",\n      "Just opened her throat and swallowed a goat!",\n      "She swallowed the goat to catch the dog."\n    ],\n    [\n      "cow",\n      "I don't know how she swallowed a cow!",\n      "She swallowed the cow to catch the goat."\n    ],\n    ['horse',nil,nil]\n  ]\n  private\n  def chain number\n    SONG[1...number].reverse.map{|(_, _, reason)| reason }.join("\\n")\n  end\n  def valid_verse? number\n    number > 0 && number <= SONG.length\n  end\nend	\N	\N	0	2	2014-06-01 10:32:01	2014-06-01 10:32:01	53378	food_chain.rb
181	6	9488eb60da534f9fc1a32608	pending	ruby	leap	module Year\n  class << self\n    def leap?(i)\n      unless (i % 100).zero?\n        return (i % 4).zero?\n      else\n        return (i % 400).zero?\n      end\n    end\n  end\nend	\N	\N	0	2	2014-02-24 07:33:49	2014-02-24 07:33:49	54023	year.rb
182	6	c871a8f4ce1570f6d9a10642	superseded	ruby	leap	module Year\n  class << self\n    def leap?(i)\n      unless (i % 100 == 0)\n        return (i % 4 == 0)\n      else\n        return (i % 400 == 0)\n      end\n    end\n  end\nend	\N	\N	0	1	2014-03-08 17:51:06	2014-03-08 17:51:06	54023	year.rb
183	6	651b8bf1ce0cd218a5d65b67	superseded	scala	bob	class Bob {\n  def hey(remark: String):String = {\n    val a2z = ('a' to 'z').mkString\n    remark match {\n      case x if x.equals(x.toUpperCase) &&               // If they are shouting\n                x.toLowerCase.exists(a2z.contains(_)) => // And if there's actually some real characters in there\n                "Woah, chill out!"\n      case x if x.endsWith("?") => "Sure."               // Every question ends with a ? Right?\n      case x if x.forall(_ == ' ') =>                    // If every character is equal to ' ', take that as prolonged silence\n                "Fine. Be that way!"                 \n      case _ => "Whatever."                              // Base - Whatever.\n    }\n  }\n}	\N	\N	0	1	2014-04-02 18:05:05	2014-04-02 18:05:05	53453	bob.scala
184	6	9e7254dfe5b60945936bb904	pending	scala	bob	class Bob {\n  def isShouting(str: String): Boolean = \n    str == str.toUpperCase &&               // If they are shouting\n    str.exists(_.isLetter)                  // And if there's actually some real characters in there\n\n  // Every question ends with a ? Right?\n  def isQuestion(str: String): Boolean = \n    str.endsWith("?") \n\n  // If every character is equal to some white space character, take that as prolonged silence\n  def isSilent(str: String): Boolean =\n    str.forall(_.isWhitespace)\n\n  def hey(remark: String):String =\n    remark match {\n      case x if isShouting(x) => "Woah, chill out!"\n      case x if isQuestion(x) => "Sure."\n      case x if isSilent(x) => "Fine. Be that way!"                 \n      case _ => "Whatever."\n    }\n}	\N	\N	0	2	2014-05-21 06:28:11	2014-05-21 06:28:11	53453	bob.scala
185	22	e7d5ee8c8dcde359f84182d2	pending	clojure	grade-school	(ns school)\n\n(defn add [db student-name grade]\n  (assoc\n    db\n    grade\n    (conj (get-in db [grade] []) student-name)))\n\n(defn grade [db grade-number]\n  (get-in db [grade-number] []))\n\n(defn sorted [db]\n  (let [reverse-sorted-grades (reverse (sort (keys db)))]\n    (loop [sorted-db {}\n           grades-to-be-processed reverse-sorted-grades]\n      (if (seq grades-to-be-processed)\n        (recur\n          (assoc\n            sorted-db\n            (first grades-to-be-processed)\n            (sort (get db (first grades-to-be-processed))))\n          (rest grades-to-be-processed))\n        sorted-db))))	\N	\N	0	1	2014-03-14 20:53:56	2014-03-14 20:53:56	54746	school.clj
186	22	e07fee9d2e42b0113de2a71b	pending	ruby	grains	class Grains\n  def square(position)\n    position == 1 ? 1 : square(position - 1) * 2\n  end\n  \n  def total\n    grains_per_square = SQUARES.map { |square| self.square(square) }\n    grains_per_square.inject(&:+)\n  end\n  \n  private\n  \n  SQUARES = 1..64\nend	\N	\N	0	1	2014-02-13 09:49:22	2014-02-13 09:49:22	50866	grains.rb
187	22	abf03fdab492b51dbb21386c	pending	ruby	triangle	# triangle.rb\n# Triangle exercise\n\nclass TriangleError < Exception; end\n\nclass Triangle\n  def initialize(a,b,c)\n    @sides = [a,b,c].sort!\n    @sides[0] > 0 or raise TriangleError\t# All sides must be positive length\n    @sides[0]+@sides[1] > @sides[2] or raise TriangleError # Sides must fit together\n  end\n  \n  def kind\n    case @sides.uniq.length\n    when 1; :equilateral\n    when 2; :isosceles\n    when 3; :scalene\n    end\n  end\nend	\N	\N	0	1	2014-02-28 06:43:02	2014-02-28 06:43:02	47505	triangle.rb
279	35	d27bd71c6490524167423645	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%400 == 0 || year%4 == 0 && year%100 != 0\n}	\N	\N	0	2	2014-02-22 03:07:49	2014-02-22 03:07:49	53518	leap.go
190	16	44bbc903b0334313c3a5183d	pending	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :refer [join]]))\n\n(def dna-rna-mapping\n  {\\C "G"\n   \\G "C"\n   \\A "U"\n   \\T "A"})\n\n(defn convert-dna-to-rna\n  [dna-nucleotide]\n  (get dna-rna-mapping dna-nucleotide))\n\n(defn invalid-nucleotide?\n  [nucleotide-list nucleotide]\n  (not (contains? nucleotide-list nucleotide)))\n\n(defn valid-strand?\n  [nucleotide-list dna-strand]\n  (empty? (filter #(invalid-nucleotide? nucleotide-list %) dna-strand)))\n\n(defn to-rna\n  [dna-strand]\n  (assert (valid-strand? dna-rna-mapping dna-strand))\n  (join (map convert-dna-to-rna dna-strand)))	\N	\N	0	1	2014-06-24 08:45:56	2014-06-24 08:45:56	56607	dna.clj
191	16	e1fa024280af78eec332aa02	pending	ruby	anagram	class Anagram\n  def initialize(w)\n    @word = w.downcase\n    @word_chars = @word.split('').sort\n  end\n\n  def match(l)\n    a = l.uniq\n      .-([@word])\n      .-([@word.upcase])\n      .-([@word.capitalize])\n    m = Array.new\n\n    a.each do |w|\n      m.push w = w if w.downcase.split('').sort == @word_chars\n    end\n\n    return m\n  end\nend	\N	\N	0	1	2014-06-23 04:08:53	2014-06-23 04:08:53	54283	anagram.rb
192	16	21a5b1850527d0de8855b2a6	pending	ruby	leap	class Year\n\n\ndef self.leap?(year)\n  if (year % 100 == 0) && (year % 400 == 0)\n    true\n  elsif (year % 100 == 0) && (year % 400 != 0)\n    false\n  elsif year % 4 == 0\n    true\n  else\n    false\n  end\nend\n\nend	\N	\N	0	1	2014-05-24 17:42:17	2014-05-24 17:42:17	52449	leap.rb
193	16	06ea41c0b94be190aa944000	superseded	python	word-count	import re\n\n\nclass Phrase():\n    def __init__(self, phrase):\n        self._phrase = phrase.lower()\n        self._split_words = re.findall("\\w+", phrase.lower())\n        self._word_counts = {}\n\n    def word_count(self):\n        for word in self._split_words:\n            self._word_counts[word] = len(re.findall("\\\\b"+word+"\\\\b", self._phrase))\n        return self._word_counts	\N	\N	0	1	2014-04-23 03:42:21	2014-04-23 03:42:21	56646	wordcount.py
194	16	a6e0946e1edab6b4f843e1e9	superseded	python	word-count	import re\n\n\nclass Phrase():\n    def __init__(self, phrase):\n        self._phrase = phrase.lower()\n        self._split_words = re.findall("\\w+", phrase.lower())\n        self._word_counts = {}\n\n    def word_count(self):\n        for word in self._split_words:\n            self._word_counts[word] = self._word_counts.get(word, 0) + 1\n        return self._word_counts	\N	\N	0	2	2014-05-28 17:54:33	2014-05-28 17:54:33	56646	wordcount.py
195	16	b4d201e35e0ffab693f579d3	pending	python	word-count	import re\nfrom collections import defaultdict\n\n\nclass Phrase():\n    def __init__(self, phrase):\n        self._phrase = phrase.lower()\n        self._split_words = re.findall(r"\\w+", phrase.lower())\n        self._word_counts = defaultdict(int)\n\n    def word_count(self):\n        for word in self._split_words:\n            self._word_counts[word] += 1\n        return self._word_counts	\N	\N	0	4	2014-06-27 02:45:20	2014-06-27 02:45:20	56646	wordcount.py
196	16	80ef536e9b81f9abe1139fcd	superseded	python	word-count	import re\n\n\nclass Phrase():\n    def __init__(self, phrase):\n        self._phrase = phrase.lower()\n        self._split_words = re.findall(r"\\w+", phrase.lower())\n        self._word_counts = {}\n\n    def word_count(self):\n        for word in self._split_words:\n            self._word_counts[word] = self._word_counts.get(word, 0) + 1\n        return self._word_counts	\N	\N	0	3	2014-06-28 04:44:40	2014-06-28 04:44:40	56646	wordcount.py
197	19	4eee90f66a7e016246b80a12	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char as C\n\nresponseFor :: String -> String\nis_question :: String -> Bool\nis_yell :: String -> Bool\nis_without :: String -> Bool\n\nresponseFor str\n\t| is_without str = "Fine. Be that way!"\n\t| is_yell str = "Woah, chill out!"\n\t| is_question str = "Sure."\n\t| otherwise = "Whatever."\n\nis_question str = (last str == '?')\n\nis_yell str = (any isAlpha str) && (all isUpper (filter isAlpha str))\n\nis_without str = (all isSpace str)	\N	\N	0	2	2014-01-22 07:47:24	2014-01-22 07:47:24	52066	Bob.hs
198	19	6ed0464b6bf92bca24fa2930	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char as C\nimport Text.Regex.Posix\nimport Text.Regex.Posix.ByteString()\n\nresponseFor :: String -> String\nis_question :: String -> Bool\nis_yell :: String -> Bool\nis_without :: String -> Bool\n\nresponseFor str\n\t| is_without str = "Fine. Be that way!"\n\t| is_yell str = "Woah, chill out!"\n\t| is_question str = "Sure."\n\t| otherwise = "Whatever."\n\nis_question str = (last str == '?')\n\nis_yell str = str == (map C.toUpper str) && ( str =~ "[A-Z]"::Bool )\n\nis_without str = ((dropWhile C.isSpace) str) == ""	\N	\N	0	1	2014-04-21 05:53:30	2014-04-21 05:53:30	52066	Bob.hs
199	19	61eb70250b47ce6e16fa02e4	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char as C\n\nresponseFor :: String -> String\nisQuestion :: String -> Bool\nisYell :: String -> Bool\nisWithout :: String -> Bool\n\nresponseFor str\n\t| isWithout str = "Fine. Be that way!"\n\t| isYell str = "Woah, chill out!"\n\t| isQuestion str = "Sure."\n\t| otherwise = "Whatever."\n\nisQuestion str = (last str == '?')\n\nisYell str = any isAlpha str && all isUpper (filter isAlpha str)\n\nisWithout str = (all isSpace str)	\N	\N	0	3	2014-04-23 11:16:33	2014-04-23 11:16:33	52066	Bob.hs
200	19	5ffdef1fe5d120db438c89ea	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char as C\n\nresponseFor :: String -> String\nisQuestion :: String -> Bool\nisYell :: String -> Bool\nisWithout :: String -> Bool\n\nresponseFor str\n\t| isWithout str = "Fine. Be that way!"\n\t| isYell str = "Woah, chill out!"\n\t| isQuestion str = "Sure."\n\t| otherwise = "Whatever."\n\nisQuestion str = last str == '?'\n\nisYell str = any isAlpha str && all isUpper (filter isAlpha str)\n\nisWithout str = all isSpace str	\N	\N	0	4	2014-06-19 00:40:04	2014-06-19 00:40:04	52066	Bob.hs
201	19	398432ee99b99c613953f89d	pending	ruby	space-age	# fails this test:\n# assert_equal 9.78, SpaceAge.new(189_839_836).on_venus\n# Expected: 9.78\n# Actual: 9.79\n#\n# but looking at it, it is 9.785479213610282\n# so it should round up, so it seems like the expectation is wrong\n\nclass SpaceAge\n  def initialize(earth_seconds)\n    self.earth_seconds = earth_seconds\n  end\n\n  def seconds\n    earth_seconds\n  end\n\n  def on_earth()   round earth_seconds / 31557600.0 end\n  def on_venus()   round on_earth      / 0.61519726 end\n  def on_mercury() round on_earth      / 0.2408467  end\n  def on_mars()    round on_earth      / 1.8808158  end\n  def on_jupiter() round on_earth      / 11.862615  end\n  def on_saturn()  round on_earth      / 29.447498  end\n  def on_uranus()  round on_earth      / 84.016846  end\n  def on_neptune() round on_earth      / 164.79132  end\n\n  private\n\n  attr_accessor :earth_seconds\n\n  def round(n)\n    n.round(2)\n  end\nend	\N	\N	0	1	2014-06-03 08:57:28	2014-06-03 08:57:28	42816	space-age.rb
202	19	1e540cbaf5b79cbf1bc50a51	pending	ruby	hamming	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    strand.chars.zip(other_strand.chars).count do |a, b|\n      b && a != b\n    end\n  end\n\nend	\N	\N	0	1	2013-12-17 02:07:28	2013-12-17 02:07:28	46351	point-mutations.rb
203	19	d39fa8a474f06c1907697715	superseded	haskell	etl	module ETL where\n\nimport Data.Char (toLower)\nimport qualified Data.Map.Strict as Map\n\ntype LetterToVal = Map.Map String Int\ntype ValToLetters = Map.Map Int [String]\n\ntransform :: ValToLetters -> LetterToVal\ntransform = Map.fromList . concatMap trans . Map.toList\n  where trans (score, letters) = zip (map (map toLower) letters) (repeat score)	\N	\N	0	1	2014-02-15 09:56:42	2014-02-15 09:56:42	56740	ETL.hs
204	19	42313f525ed5f1e858def0be	pending	haskell	etl	module ETL (transform) where\n\nimport Data.Char (toLower)\nimport qualified Data.Map.Strict as Map\n\ntype LetterToVal = Map.Map String Int\ntype ValToLetters = Map.Map Int [String]\n\ntransform :: ValToLetters -> LetterToVal\ntransform = Map.fromList . concatMap trans . Map.toList\n  where trans (score, letters) = zip (map (map toLower) letters) (repeat score)	\N	\N	0	2	2014-03-22 14:15:39	2014-03-22 14:15:39	56740	ETL.hs
205	19	7f9e673e172ed95f9ced02d4	superseded	haskell	wordy	module WordProblem\n( answer \n) where\n\nimport qualified Data.Map.Strict as M\nimport           Data.Maybe (fromMaybe)\nimport           Text.Parsec\nimport           Text.Parsec.String\n\nimport Control.Applicative ((<$>), (<*>), (*>), (<*))\n\n\ntype Question = String\ntype Answer = Maybe Int\n\nanswer :: Question -> Answer\nanswer s =\n    case parse parseQ [] s of\n        Left _  -> Nothing\n        Right q -> Just $ evalExpression q\n\n\n{--\n - AST\n --}\ndata BinOp = BinOp !String (Int -> Int -> Int)\n\ninstance Show BinOp where\n    show (BinOp s _) = s\n\nops :: M.Map String BinOp\nops = M.fromList [ ("plus",          BinOp "+" (+) )\n                 , ("minus",         BinOp "-" (-) )\n                 , ("multiplied by", BinOp "*" (*) )\n                 , ("divided by",    BinOp "/" div )\n                 ]\n\ndata Expression = Expression !Constant ![Transform]\n                deriving Show\n\ndata Constant = Constant !Int deriving Show\ndata Transform = Transform !BinOp !Constant deriving Show\n\n{--\n - Parser\n --}\nparseQ :: Parser Expression\nparseQ = (string "What is" *> spaces) *> parseExpression <* (spaces <* char '?')\n\nparseExpression :: Parser Expression\nparseExpression = Expression <$> (parseConst <* spaces) <*> (parseTransform `sepBy` spaces)\n\nparseConst :: Parser Constant\nparseConst = do\n    sgn <- optionMaybe (char '-')\n    num <- many1 digit\n    return . Constant $ read (fromMaybe ' ' sgn : num)\n\nparseTransform :: Parser Transform\nparseTransform = Transform <$> parseBinOp <*> (spaces *> parseConst)\n\nparseBinOp :: Parser BinOp\nparseBinOp = do\n    op <- choice (map (try . string) (M.keys ops))\n    return $ ops M.! op\n\n{--\n - Interpreter\n --}\nevalExpression  :: Expression -> Int\nevalExpression (Expression (Constant k) trans) = foldl go k trans\n    where \n        go k1 (Transform (BinOp _ op) (Constant k2)) = k1 `op` k2	\N	\N	0	1	2013-12-09 06:13:26	2013-12-09 06:13:26	57591	WordProblem.hs
206	19	d5668c5495ed6c55e21824e9	pending	haskell	wordy	module WordProblem\n( answer \n) where\n\nimport Data.List (foldl')\nimport Data.Maybe (fromMaybe)\nimport Text.Parsec\nimport Text.Parsec.String\n\nimport Control.Applicative (pure, (<$>), (<*>), (*>), (<*))\n\n\ntype Question = String\ntype Answer = Maybe Int\n\nanswer :: Question -> Answer\nanswer s =\n    case parse parseQ [] s of\n        Left _  -> Nothing\n        Right q -> Just $ evalExpression q\n\n\n{--\n - AST\n --}\ndata BinOp = BinOp !String (Int -> Int -> Int)\n\ninstance Show BinOp where\n    show (BinOp s _) = s\n\ndata Expression = Expression !Constant ![Transform]\n                deriving Show\n\ndata Constant = Constant !Int deriving Show\ndata Transform = Transform !BinOp !Constant deriving Show\n\n{--\n - Parser\n --}\nparseQ :: Parser Expression\nparseQ = (string "What is" *> spaces) *> parseExpression <* (spaces <* char '?')\n\nparseExpression :: Parser Expression\nparseExpression = Expression <$> (parseConst <* spaces) <*> (parseTransform `sepBy` spaces)\n\nparseConst :: Parser Constant\nparseConst = do\n    sgn <- optionMaybe (char '-')\n    num <- many1 digit\n    return . Constant $ read (fromMaybe ' ' sgn : num)\n\nparseTransform :: Parser Transform\nparseTransform = Transform <$> parseBinOp <*> (spaces *> parseConst)\n\nparseBinOp :: Parser BinOp\nparseBinOp =   try (string "plus")          *> pure (BinOp "+" (+))\n           <|> try (string "minus")         *> pure (BinOp "-" (-))\n           <|> try (string "multiplied by") *> pure (BinOp "*" (*))\n           <|> try (string "divided by")    *> pure (BinOp "/" div)\n\n{--\n - Interpreter\n --}\nevalExpression  :: Expression -> Int\nevalExpression (Expression (Constant k) trans) = foldl' go k trans\n    where \n        go k1 (Transform (BinOp _ op) (Constant k2)) = k1 `op` k2	\N	\N	0	2	2014-04-14 08:37:35	2014-04-14 08:37:35	57591	WordProblem.hs
207	19	70de9aff0d2f91d794561350	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(input) do\n    cond do\n      is_question(input) -> "Sure."\n      is_silence(input)  -> "Fine. Be that way!"\n      is_shouting(input) -> "Woah, chill out!"\n      true               -> "Whatever."\n    end\n  end\n\n  defp is_question(input) do\n    String.last(input) == "?"\n  end\n\n  defp is_silence(input) do\n    String.strip(input) == ""\n  end\n\n  defp is_shouting(input) do\n    String.upcase(input) == input and String.downcase(input) != input\n  end\n\nend	\N	\N	0	1	2014-01-21 11:08:58	2014-01-21 11:08:58	60527	bob.exs
208	19	3a6d9e2f3212e710a95f0eab	pending	elixir	bob	defmodule Teenager do\n\n  def hey(input) do\n    cond do\n      is_question?(input) -> "Sure."\n      is_silence?(input)  -> "Fine. Be that way!"\n      is_shouting?(input) -> "Woah, chill out!"\n      true                -> "Whatever."\n    end\n  end\n\n  defp is_question?(input) do\n    String.last(input) == "?"\n  end\n\n  defp is_silence?(input) do\n    String.strip(input) == ""\n  end\n\n  defp is_shouting?(input) do\n    String.upcase(input) == input and String.downcase(input) != input\n  end\n\nend	\N	\N	0	2	2014-02-23 05:56:29	2014-02-23 05:56:29	60527	bob.exs
209	19	e2ccc80ab6fb256694b6571f	superseded	haskell	roman-numerals	module Roman\n  ( numerals\n  ) where\n\nnumerals :: Int -> String\nnumerals = numerals' digits where\n  numerals' _ 0 = ""\n  numerals' x@((l,m):xs) n | n >= m    = l ++ numerals' x (n-m)\n                           | otherwise = numerals' xs n\n\ndigits = [ ( "M",1000)\n         , ("CM", 900)\n         , ( "D", 500)\n         , ("CD", 400)\n         , ( "C", 100)\n         , ("XC",  90)\n         , ( "L",  50)\n         , ("XL",  40)\n         , ( "X",  10)\n         , ("IX",   9)\n         , ( "V",   5)\n         , ("IV",   4)\n         , ( "I",   1)\n         ]	\N	\N	0	1	2014-01-18 11:54:03	2014-01-18 11:54:03	42243	roman-numerals.hs
210	19	5f2a4e99b0cff26d082b4a1f	pending	haskell	roman-numerals	module Roman\n  ( numerals\n  ) where\n\nnumerals :: Int -> String\nnumerals = numerals' digits where\n  numerals' _            0             = ""\n  numerals' x@((l,m):xs) n | n >= m    = l ++ numerals' x  (n-m)\n                           | otherwise =      numerals' xs n\n  digits = [ ( "M",1000)\n          , ("CM", 900)\n          , ( "D", 500)\n          , ("CD", 400)\n          , ( "C", 100)\n          , ("XC",  90)\n          , ( "L",  50)\n          , ("XL",  40)\n          , ( "X",  10)\n          , ("IX",   9)\n          , ( "V",   5)\n          , ("IV",   4)\n          , ( "I",   1)\n          ]	\N	\N	0	2	2014-03-13 06:47:23	2014-03-13 06:47:23	42243	roman-numerals.hs
211	19	d1fddb15910538e111bb58c1	pending	clojure	grains	(ns grains)\n\n(defn- square-unmemoized [num]\n  (loop [n num acc 1]\n   (if (= n 1)\n      acc\n      (recur (dec n) (*' 2 acc)))))\n(def square (memoize square-unmemoized))\n\n(defn total []\n  (let [squares (map square (range 1 65))]\n    (reduce + squares)))	\N	\N	0	1	2013-12-31 18:17:31	2013-12-31 18:17:31	56098	grains.clj
221	19	d4973800829af0d938934b38	superseded	javascript	strain	;\nvar Strain = {\n    strain: function(matchObject) {\n        return function(array, callback) {\n            var output = [], currentValue, i;\n            for(i in array) {\n                currentValue = array[i];\n                if(callback(currentValue, i, array) == matchObject)\n                    output.push(currentValue);\n            }\n            return output;\n        };\n    }\n};\n\nStrain.keep = Strain.strain(true);\nStrain.discard = Strain.strain(false);\n\nmodule.exports = Strain;	\N	\N	0	1	2013-12-13 22:39:33	2013-12-13 22:39:33	47923	strain.js
212	19	43f0c5e43dfb30ec0525efa8	superseded	ruby	rna-transcription	# Constants for biological molecules\nmodule Nucleotide\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleotide sequence, comparable with Strings\nclass NucleicAcid\n  import Nucleotide\n  def initialize(sequence)\n    @sequence = sequence.to_str\n  end\n\n  attr_reader :sequence\n  alias_method :to_str, :sequence\n\n  def ==(other)\n    equal?(other) || other == @sequence\n  end\n\n  protected\n\n  def transcribe(from_nuc, to_nuc)\n    @sequence.tr(from_nuc, to_nuc)\n  end\nend\n\n# A sequence constructed from the alphabet A,T,G,C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(to_rna_string)\n  end\n\n  def to_rna_string\n    transcribe(THYMINE, URACIL)\n  end\nend\n\n# A sequence constructed from the alphabet A,U,G,C.\nclass RNA < NucleicAcid\n  def to_dna\n    DNA.new(to_dna_string)\n  end\n\n  def to_dna_string\n    transcribe(URACIL, THYMINE)\n  end\nend	\N	\N	0	3	2013-12-07 07:26:57	2013-12-07 07:26:57	41825	rna-transcription.rb
213	19	e5bdb8497702b46dad0f6397	pending	ruby	rna-transcription	# Constants for biological molecules\nmodule Nucleotide\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleotide sequence, comparable with Strings\nNucleicAcid = Struct.new(:sequence) do           # rubocop:disable ConstantName\n  include Nucleotide\n\n  require 'forwardable'\n  extend Forwardable\n  def_delegators :sequence, :to_str, :to_s, :==\n\nprotected\n\n  def transcribe(from: _, to: _)\n    sequence.tr(from, to)\n  end\nend\n\n# A sequence constructed from the alphabet A,T,G,C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(transcribe(from: THYMINE, to: URACIL))\n  end\nend\n\n# A sequence constructed from the alphabet A,U,G,C.\nclass RNA < NucleicAcid\n  # `def to_dna` when needed\nend	\N	\N	0	9	2013-12-15 06:00:42	2013-12-15 06:00:42	41825	rna-transcription.rb
214	19	2d3158de2871f28cf821788c	superseded	ruby	rna-transcription	# Constants for biological molecules\nmodule Nucleotide\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleotide sequence, comparable with Strings\nclass NucleicAcid\n  extend Nucleotide\n  def initialize(sequence)\n    @sequence = sequence.to_str\n  end\n\n  attr_reader :sequence\n  alias_method :to_str, :sequence\n\n  def ==(other)\n    equal?(other) || other == @sequence\n  end\n\n  protected\n\n  def transcribe(from_nuc, to_nuc)\n    @sequence.tr(from_nuc, to_nuc)\n  end\nend\n\n# A sequence constructed from the alphabet A,T,G,C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(to_rna_string)\n  end\n\n  def to_rna_string\n    transcribe(THYMINE, URACIL)\n  end\nend\n\n# A sequence constructed from the alphabet A,U,G,C.\nclass RNA < NucleicAcid\n  def to_dna\n    DNA.new(to_dna_string)\n  end\n\n  def to_dna_string\n    transcribe(URACIL, THYMINE)\n  end\nend	\N	\N	0	5	2013-12-27 11:49:07	2013-12-27 11:49:07	41825	rna-transcription.rb
215	19	bcf9db8988392f6879291e7a	superseded	ruby	rna-transcription	# Constants for biological molecules\nmodule Nucleotide\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleotide sequence, comparable with Strings\nclass NucleicAcid\n  include Nucleotide\n  def initialize(sequence)\n    @sequence = sequence.to_str\n  end\n\n  attr_reader :sequence\n  alias_method :to_str, :sequence\n\n  def ==(other)\n    equal?(other) || other == @sequence\n  end\n\n  protected\n\n  def transcribe(from_nuc, to_nuc)\n    @sequence.tr(from_nuc, to_nuc)\n  end\nend\n\n# A sequence constructed from the alphabet A,T,G,C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(to_rna_string)\n  end\n\n  def to_rna_string\n    transcribe(THYMINE, URACIL)\n  end\nend\n\n# A sequence constructed from the alphabet A,U,G,C.\nclass RNA < NucleicAcid\n  def to_dna\n    DNA.new(to_dna_string)\n  end\n\n  def to_dna_string\n    transcribe(URACIL, THYMINE)\n  end\nend	\N	\N	0	6	2014-01-07 02:17:41	2014-01-07 02:17:41	41825	rna-transcription.rb
216	19	af77ae0720e5b300ec21368f	superseded	ruby	rna-transcription	# Constants for biological molecules\nmodule Nucleotide\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleotide sequence, comparable with Strings\nclass NucleicAcid\n  extend Nucleotide\n  def initialize(sequence)\n    @sequence = sequence.to_str\n  end\n\n  attr_reader :sequence\n  alias_method :to_str, :sequence\n\n  def ==(other)\n    equal?(other) || other == @sequence\n  end\n\n  protected\n\n  def transcribe(from_nuc, to_nuc)\n    @sequence.tr(from_nuc, to_nuc)\n  end\nend\n\n# A sequence constructed from the alphabet A,T,G,C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(to_rna_string)\n  end\n\n  def to_rna_string\n    transcribe(THYMINE, URACIL)\n  end\nend\n\n# A sequence constructed from the alphabet A,U,G,C.\nclass RNA < NucleicAcid\n  def to_dna\n    DNA.new(to_dna_string)\n  end\n\n  def to_dna_string\n    transcribe(URACIL, THYMINE)\n  end\nend	\N	\N	0	4	2014-01-08 07:30:20	2014-01-08 07:30:20	41825	rna-transcription.rb
217	19	c47fed89764637919d28d272	superseded	ruby	rna-transcription	# Constants for biological molecules\nmodule Nucleotide\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleotide sequence, comparable with Strings\nNucleicAcid = Struct.new(:sequence) do           # rubocop:disable ConstantName\n  include Nucleotide\n  require 'forwardable'\n  extend Forwardable\n  def_delegators :sequence, :to_str, :to_s\n\n  def ==(other)\n    equal?(other) || other == sequence\n  end\n\nprotected\n\n  def transcribe(from: _, to: _)\n    sequence.tr(from, to)\n  end\nend\n\n# A sequence constructed from the alphabet A,T,G,C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(transcribe(from: THYMINE, to: URACIL))\n  end\nend\n\n# A sequence constructed from the alphabet A,U,G,C.\nclass RNA < NucleicAcid\n  # `def to_dna` when needed\nend	\N	\N	0	8	2014-01-19 03:53:35	2014-01-19 03:53:35	41825	rna-transcription.rb
218	19	659999a8bae34d0bd36220cc	superseded	ruby	rna-transcription	# Constants for biological molecules\nmodule Nucleotide\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleotide sequence, comparable with Strings\nNucleicAcid = Struct.new(:sequence) do           # rubocop:disable ConstantName\n  include Nucleotide\n\n  def to_str\n    sequence.to_str\n  end\n\n  def to_s\n    sequence.to_s\n  end\n\n  def ==(other)\n    equal?(other) || other == sequence\n  end\n\nprotected\n\n  def transcribe(from: nil, to: nil)\n    sequence.tr(from, to)\n  end\nend\n\n# A sequence constructed from the alphabet A,T,G,C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(transcribe(from: THYMINE, to: URACIL))\n  end\nend\n\n# A sequence constructed from the alphabet A,U,G,C.\nclass RNA < NucleicAcid\n  # `def to_dna` when needed\nend	\N	\N	0	7	2014-02-15 07:58:17	2014-02-15 07:58:17	41825	rna-transcription.rb
219	19	6abd0cab2ccabc4199ea2190	superseded	ruby	rna-transcription	require 'delegate'\n\n# Delegate to String class to avoid inheritance\n# See: http://words.steveklabnik.com/beware-subclassing-ruby-core-classes\nclass StringDelegator < SimpleDelegator\n  def initialize(string = '')\n    super(string.to_str)\n  end\n\n  def inspect\n    "<#{self.class}: #{super}>"\n  end\nend\n\n# A string constructed form the alphabet A, T, G, C.\nclass DNA < StringDelegator\n  def to_rna\n    RNA.new(tr('T', 'U'))\n  end\nend\n\n# A string constructed form the alphabet A, U, G, C.\nclass RNA < StringDelegator\n  def to_dna\n    DNA.new(tr('U', 'T'))\n  end\nend	\N	\N	0	1	2014-02-24 10:39:15	2014-02-24 10:39:15	41825	rna-transcription.rb
220	19	bf39b5e39e17bcef56848d08	superseded	ruby	rna-transcription	module Nucleobase\n  THYMINE = 'T'\n  URACIL = 'U'\nend\n\n# A nucleobase sequence supports comparison with Strings\nclass NucleicAcid\n  def initialize(sequence)\n    @sequence = sequence.to_str\n  end\n\n  def to_str\n    @sequence\n  end\n\n  def ==(other)\n    equal?(other) || other == @sequence\n  end\nend\n\n# A sequence constructed form the alphabet A, T, G, C.\nclass DNA < NucleicAcid\n  def to_rna\n    RNA.new(@sequence.tr(Nucleobase::THYMINE, Nucleobase::URACIL))\n  end\nend\n\n# A sequence constructed form the alphabet A, U, G, C.\nclass RNA < NucleicAcid\n  def to_dna\n    DNA.new(@sequence.tr(Nucleobase::URACIL, Nucleobase::THYMINE))\n  end\nend	\N	\N	0	2	2014-05-06 22:17:01	2014-05-06 22:17:01	41825	rna-transcription.rb
222	19	5b666c6577c7bf17e6913755	pending	javascript	strain	var _strain = function(matchObject) {\r\n  return function(testObject, callback) {\r\n    var output = [], currentValue, i;\r\n    for(i in testObject) {\r\n      currentValue = testObject[i];\r\n      if(callback(currentValue, i, testObject) == matchObject)\r\n        output.push(currentValue);\r\n    }\r\n    return output;\r\n  };\r\n};\r\n\r\nvar Strain = {\r\n  strain: _strain,\r\n  keep: _strain(true),\r\n  discard: _strain(false)\r\n};\r\n\r\nmodule.exports = Strain;\r	\N	\N	0	2	2014-03-29 13:05:15	2014-03-29 13:05:15	47923	strain.js
223	19	c2601a1cb92e82665152025d	pending	elixir	phone-number	defmodule Phone do\n  @doc """\n  Remove formatting from a phone number.\n\n  Returns "0000000000" if phone number is not valid\n  (10 digits or "1" followed by 10 digits)\n\n  ## Examples\n\n  iex> Phone.number("123-456-7890")\n  "1234567890"\n\n  iex> Phone.number("+1 (303) 555-1212")\n  "3035551212"\n\n  iex> Phone.number("867.5309")\n  "0000000000"\n  """\n  @spec number(String.t) :: String.t\n  def number(raw) do\n    numbers = Regex.replace(~r/[^0-9]/, raw, "")\n    cond do\n      String.length(numbers) == 10 -> numbers\n      String.length(numbers) == 11 and String.at(numbers, 0) == "1" -> String.slice(numbers, 1..11)\n      true -> "0000000000"\n    end\n  end\n\n  @doc """\n  Extract the area code from a phone number\n\n  Returns the first three digits from a phone number,\n  ignoring long distance indicator\n\n  ## Examples\n\n  iex> Phone.area_code("123-456-7890")\n  "123"\n\n  iex> Phone.area_code("+1 (303) 555-1212")\n  "303"\n\n  iex> Phone.area_code("867.5309")\n  "000"\n  """\n  @spec area_code(String.t) :: String.t\n  def area_code(raw) do\n    String.slice(number(raw), 0..2)\n  end\n\n  @doc """\n  Pretty print a phone number\n\n  Wraps the area code in parentheses and separates\n  exchange and subscriber number with a dash.\n\n  ## Examples\n\n  iex> Phone.pretty("123-456-7890")\n  "(123) 456-7890"\n\n  iex> Phone.pretty("+1 (303) 555-1212")\n  "(303) 555-1212"\n\n  iex> Phone.pretty("867.5309")\n  "(000) 000-0000"\n  """\n  @spec pretty(String.t) :: String.t\n  def pretty(raw) do\n    numbers = number raw\n    "(" <> String.slice(numbers, 0..2) <> ") " <> String.slice(numbers, 3..5) <> "-" <> String.slice(numbers, 6..10)\n  end\nend	\N	\N	0	1	2014-03-17 21:53:01	2014-03-17 21:53:01	59732	phone_number.exs
224	19	1931abd4f17b68730d1ab0d2	pending	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n  \n  def word_count\n    make_dict(spliting(@text))\n  end\n  \n  def spliting(text)\n    return text.split if (text =~ /^[^\\s]+$/).nil?\n    return text.split(',')\n  end\n  \n  def make_dict(list)\n    list.map!{|i| del_punctuation(i.downcase) }.reject!{|i| not_word(i)}\n    dict = Hash.new\n    list.each do |i|\n      !dict[i] ? dict[i] = 1 : dict[i] += 1 \n    end\n    dict\n  end\n  \n  def del_punctuation(word)\n    word.match(/[a-z0-9]+(.*[a-z0-9]+)*/).to_s\n  end\n  \n  def not_word(w)\n    (w =~ /[a-z0-9]+/).nil?\n  end\n  \nend	\N	\N	0	1	2013-12-07 00:03:23	2013-12-07 00:03:23	43002	word-count.rb
225	19	af9773f2db566ec0c4af9f82	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    result = ''\n\n    result << 'Pling' if (number % 3).zero?\n    result << 'Plang' if (number % 5).zero?\n    result << 'Plong' if (number % 7).zero?\n\n    result.empty? ? number.to_s : result\n  end\nend	\N	\N	0	1	2013-12-15 02:06:29	2013-12-15 02:06:29	54606	raindrops.rb
226	19	ee9a56dcbecf27a52077fa47	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    result = ''\n\n    raindrop_speak_translations.each do |prime, output|\n      result << output if disible_by?(number, prime)\n    end\n\n    result.empty? ? number.to_s : result\n  end\n\n  private\n\n  def self.disible_by?(number, modulo)\n    (number % modulo).zero?\n  end\n\n  def self.raindrop_speak_translations\n    { 3 => 'Pling',\n      5 => 'Plang',\n      7 => 'Plong' }\n  end\nend	\N	\N	0	2	2014-02-06 15:29:16	2014-02-06 15:29:16	54606	raindrops.rb
227	19	b4e0cf5710229023342c3d05	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    raindrops = raindrop_translations.map do |prime, message|\n      message if disible_by?(number, prime)\n    end\n    raindrops.compact!\n\n    raindrops.empty? ? number.to_s : raindrops.join\n  end\n\n  private\n\n  def self.disible_by?(number, modulo)\n    (number % modulo).zero?\n  end\n\n  def self.raindrop_translations\n    { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }\n  end\nend	\N	\N	0	3	2014-03-08 01:14:59	2014-03-08 01:14:59	54606	raindrops.rb
228	19	6e8f72bbb14ff3696cb9a59a	pending	ruby	raindrops	class Raindrops\n  class << self\n    def convert(number)\n      raindrops = raindrop_translations.map do |prime, message|\n        message if disible_by?(number, prime)\n      end\n      raindrops.compact!\n\n      raindrops.empty? ? number.to_s : raindrops.join\n    end\n\n    private\n\n    def disible_by?(number, modulo)\n      (number % modulo).zero?\n    end\n\n    def raindrop_translations\n      { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }\n    end\n  end\nend	\N	\N	0	4	2014-04-17 09:25:55	2014-04-17 09:25:55	54606	raindrops.rb
229	19	5b33126d634f359f78fa6618	pending	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}.freeze\n  VALID_DNA_SYMBOLS = ['A','C','G','T'].freeze\n  VALID_NUCLEOTIDES = ['A','C','G','T','U'].freeze\n  INVALID_DNA_SYMBOL_ERROR = 'DNA instance only accepts valid DNA symbols (A,C,G,T)'.freeze\n  INVALID_NUCLEOTIDE_ERROR = 'Only valid nucleotides can be counted (A,C,G,T,U)'.freeze\n\n  def initialize(symbols)\n    self.symbols = symbols\n    raise ArgumentError.new(INVALID_DNA_SYMBOL_ERROR) unless valid_dna_symbols?\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new(INVALID_NUCLEOTIDE_ERROR) unless valid_nucleotide?(nucleotide)\n    nucleotide_counts[nucleotide] ||= 0\n  end\n\n  def nucleotide_counts\n    symbols.chars.to_a.each.with_object(NUCLEOTIDES.dup) do |symbol, nucleotides|\n      nucleotides[symbol] += 1\n    end\n  end\n\n  private\n\n  def valid_nucleotide?(nucleotide)\n    VALID_NUCLEOTIDES.include?(nucleotide)\n  end\n\n  def valid_dna_symbols?\n    return (symbols.chars.to_a - VALID_DNA_SYMBOLS).empty?\n  end\n\n  attr_accessor :symbols\nend	\N	\N	0	6	2014-02-17 17:41:30	2014-02-17 17:41:30	40798	nucleotide-count.rb
230	19	731d5ff39a2e99225a628f3a	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}.freeze\n  VALID_DNA_SYMBOLS = ['A','C','G','T'].freeze\n  VALID_NUCLEOTIDES = ['A','C','G','T','U'].freeze\n  INVALID_DNA_SYMBOL_ERROR = 'DNA instance only accepts valid DNA symbols (A,C,G,T)'.freeze\n  INVALID_NUCLEOTIDE_ERROR = 'Only valid nucleotides can be counted (A,C,G,T,U)'.freeze\n\n  def initialize(symbols)\n    self.symbols = symbols\n    raise ArgumentError.new(INVALID_DNA_SYMBOL_ERROR) unless valid_dna_symbols?\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new(INVALID_NUCLEOTIDE_ERROR) unless valid_nucleotide?(nucleotide)\n    nucleotide_counts[nucleotide] ||= 0\n  end\n\n  def nucleotide_counts\n    symbols.split('').each.with_object(NUCLEOTIDES.dup) do |symbol, nucleotides|\n      nucleotides[symbol] += 1\n    end\n  end\n\n  private\n\n  def valid_nucleotide?(nucleotide)\n    VALID_NUCLEOTIDES.include?(nucleotide)\n  end\n\n  def valid_dna_symbols?\n    symbols.chars do |symbol|\n      return false unless VALID_DNA_SYMBOLS.include?(symbol)\n    end\n    true\n  end\n\n  attr_accessor :symbols\nend	\N	\N	0	4	2014-02-21 03:19:17	2014-02-21 03:19:17	40798	nucleotide-count.rb
319	13	b6c58d8f0ca06dacb74fccd0	pending	ruby	leap	module Year\n  extend self\n\n  def leap?(year)\n    case (y = Integer(year))\n    when divisible_by?(400) then true\n    when divisible_by?(100) then false\n    else divisible_by?(4).(y)\n    end\n  end\n\n  def divisible_by?(divisor)\n    lambda { |dividend| (dividend % divisor).zero? }\n  end\nend	\N	\N	0	3	2014-05-25 07:19:08	2014-05-25 07:19:08	55127	year.rb
231	19	0459bf6a8f0b39514da27207	superseded	ruby	nucleotide-count	class DNA\n\n  VALID_DNA_SYMBOLS = ['A','C','G','T'].freeze\n  VALID_NUCLEOTIDES = ['A','C','G','T','U'].freeze\n  INVALID_DNA_SYMBOL_ERROR = 'DNA instance only accepts valid DNA symbols (A,C,G,T)'.freeze\n  INVALID_NUCLEOTIDE_ERROR = 'Only valid nucleotides can be counted (A,C,G,T,U)'.freeze\n\n  def initialize(symbols)\n    self.symbols = symbols\n    if false == valid_dna_symbols?\n      raise ArgumentError.new(INVALID_DNA_SYMBOL_ERROR)\n    end\n  end\n\n  def count(nucleotide)\n    if false == valid_nucleotide?(nucleotide)\n      raise ArgumentError.new(INVALID_NUCLEOTIDE_ERROR)\n    end\n    nucleotide_counts[nucleotide] ||= 0\n  end\n\n  def nucleotide_counts\n    nucleotides = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    symbols.split('').each.with_object(nucleotides) do |symbol, nucleotides|\n      nucleotides[symbol] += 1\n    end\n  end\n\n  private\n\n  def valid_nucleotide?(nucleotide)\n    VALID_NUCLEOTIDES.include?(nucleotide)\n  end\n\n  def valid_dna_symbols?\n    symbols.chars do |symbol|\n      return false if false == VALID_DNA_SYMBOLS.include?(symbol)\n    end\n    true\n  end\n  \n  attr_accessor :symbols\nend	\N	\N	0	1	2014-02-24 13:33:46	2014-02-24 13:33:46	40798	nucleotide-count.rb
232	19	c3fb11c86860f8eb118d2dc5	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}.freeze\n  VALID_DNA_SYMBOLS = ['A','C','G','T'].freeze\n  VALID_NUCLEOTIDES = ['A','C','G','T','U'].freeze\n  INVALID_DNA_SYMBOL_ERROR = 'DNA instance only accepts valid DNA symbols (A,C,G,T)'.freeze\n  INVALID_NUCLEOTIDE_ERROR = 'Only valid nucleotides can be counted (A,C,G,T,U)'.freeze\n\n  def initialize(symbols)\n    self.symbols = symbols\n    if false == valid_dna_symbols?\n      raise ArgumentError.new(INVALID_DNA_SYMBOL_ERROR)\n    end\n  end\n\n  def count(nucleotide)\n    if false == valid_nucleotide?(nucleotide)\n      raise ArgumentError.new(INVALID_NUCLEOTIDE_ERROR)\n    end\n    nucleotide_counts[nucleotide] ||= 0\n  end\n\n  def nucleotide_counts\n    symbols.split('').each.with_object(NUCLEOTIDES.dup) do |symbol, nucleotides|\n      nucleotides[symbol] += 1\n    end\n  end\n\n  private\n\n  def valid_nucleotide?(nucleotide)\n    VALID_NUCLEOTIDES.include?(nucleotide)\n  end\n\n  def valid_dna_symbols?\n    symbols.chars do |symbol|\n      return false if false == VALID_DNA_SYMBOLS.include?(symbol)\n    end\n    true\n  end\n\n  attr_accessor :symbols\nend	\N	\N	0	3	2014-03-29 13:53:47	2014-03-29 13:53:47	40798	nucleotide-count.rb
233	19	0fe6b2ae01a95b8063f02249	superseded	ruby	nucleotide-count	class DNA\n\n  VALID_DNA_SYMBOLS = ['A','C','G','T'].freeze\n  VALID_NUCLEOTIDES = ['A','C','G','T','U'].freeze\n  INVALID_DNA_SYMBOL_ERROR = 'DNA instance only accepts valid DNA symbols (A,C,G,T)'.freeze\n  INVALID_NUCLEOTIDE_ERROR = 'Only valid nucleotides can be counted (A,C,G,T,U)'.freeze\n\n  def initialize(symbols)\n    self.symbols = symbols\n    if false == valid_dna_symbols?\n      raise ArgumentError.new(INVALID_DNA_SYMBOL_ERROR)\n    end\n  end\n\n  def count(nucleotide)\n    if false == valid_nucleotide?(nucleotide)\n      raise ArgumentError.new(INVALID_NUCLEOTIDE_ERROR)\n    end\n    nucleotide_counts[nucleotide] ||= 0\n  end\n\n  def nucleotide_counts\n    symbols.split('').each.with_object({'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}) do |symbol, nucleotides|\n      nucleotides[symbol] += 1\n    end\n  end\n\n  private\n\n  def valid_nucleotide?(nucleotide)\n    VALID_NUCLEOTIDES.include?(nucleotide)\n  end\n\n  def valid_dna_symbols?\n    symbols.chars do |symbol|\n      return false if false == VALID_DNA_SYMBOLS.include?(symbol)\n    end\n    true\n  end\n  \n  attr_accessor :symbols\nend	\N	\N	0	2	2014-04-03 00:48:13	2014-04-03 00:48:13	40798	nucleotide-count.rb
234	19	9fd4e6619fa14e617b8f6cb6	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}.freeze\n  VALID_DNA_SYMBOLS = ['A','C','G','T'].freeze\n  VALID_NUCLEOTIDES = ['A','C','G','T','U'].freeze\n  INVALID_DNA_SYMBOL_ERROR = 'DNA instance only accepts valid DNA symbols (A,C,G,T)'.freeze\n  INVALID_NUCLEOTIDE_ERROR = 'Only valid nucleotides can be counted (A,C,G,T,U)'.freeze\n\n  def initialize(symbols)\n    self.symbols = symbols\n    raise ArgumentError.new(INVALID_DNA_SYMBOL_ERROR) unless valid_dna_symbols?\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new(INVALID_NUCLEOTIDE_ERROR) unless valid_nucleotide?(nucleotide)\n    nucleotide_counts[nucleotide] ||= 0\n  end\n\n  def nucleotide_counts\n    symbols.split('').each.with_object(NUCLEOTIDES.dup) do |symbol, nucleotides|\n      nucleotides[symbol] += 1\n    end\n  end\n\n  private\n\n  def valid_nucleotide?(nucleotide)\n    VALID_NUCLEOTIDES.include?(nucleotide)\n  end\n\n  def valid_dna_symbols?\n    return (symbols.chars.to_a - VALID_DNA_SYMBOLS).empty?\n  end\n\n  attr_accessor :symbols\nend	\N	\N	0	5	2014-04-19 10:14:42	2014-04-19 10:14:42	40798	nucleotide-count.rb
235	19	18f4b2821cd0b8aacceafb5c	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map transcribe\n\ntranscribe :: Char -> Char\ntranscribe 'T' = 'U'\ntranscribe x   = x	\N	\N	0	1	2014-06-24 15:17:37	2014-06-24 15:17:37	39401	rna-transcription.hs
236	19	f512f2a70d576311f81fdb2a	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn (year%4 == 0) && !(year%100 == 0) || (year%400 == 0)\n}	\N	\N	0	2	2014-01-03 09:09:22	2014-01-03 09:09:22	48960	leap.go
237	19	68ca1f623b65816565b27aa4	superseded	go	leap	package leap\n\nfunc IsLeapYear (year int) (bool) {\n  return (year % 4 == 0) && !(year % 100 == 0) || (year % 400 == 0)\n}	\N	\N	0	1	2014-02-09 22:38:03	2014-02-09 22:38:03	48960	leap.go
238	19	d4d33c2a7575dff5e859d5af	superseded	go	leap	/*\nPackage leap includes a method to determine if a given year is a leap year.\n*/\npackage leap\n\nfunc IsLeapYear(year int) bool {\n  divisible_by_400 := year%400 == 0\n  divisible_by_100 := year%100 == 0\n  divisible_by_4 := year%4 == 0\n\treturn divisible_by_4 && !divisible_by_100 || divisible_by_400\n}	\N	\N	0	3	2014-02-26 17:30:15	2014-02-26 17:30:15	48960	leap.go
239	19	0a16b0b9047bc407bcb1e071	superseded	go	leap	/*\nPackage leap includes a method to determine if a given year is a leap year.\n*/\npackage leap\n\nfunc IsLeapYear(year int) bool {\n\tdivisible_by_400 := year%400 == 0\n\tdivisible_by_100 := year%100 == 0\n\tdivisible_by_4 := year%4 == 0\n\treturn divisible_by_4 && !divisible_by_100 || divisible_by_400\n}	\N	\N	0	4	2014-03-26 14:01:28	2014-03-26 14:01:28	48960	leap.go
240	19	2da3d29d1ce019e505848eee	pending	go	leap	/*\nPackage leap includes predicates useful when working with dates\n*/\npackage leap\n\n// IsLeapYear returns true if a given year is a leap year\nfunc IsLeapYear(year int) bool {\n\tdivisibleBy400 := year%400 == 0\n\tdivisibleBy100 := year%100 == 0\n\tdivisibleBy4 := year%4 == 0\n\treturn divisibleBy4 && !divisibleBy100 || divisibleBy400\n}	\N	\N	0	6	2014-05-07 03:38:15	2014-05-07 03:38:15	48960	leap.go
241	19	baaf9d2f5eaf89bd4d7f03a0	superseded	go	leap	/*\nPackage leap includes predicates useful when working with dates\n*/\npackage leap\n\n// Returns true if a given year is a leap year\nfunc IsLeapYear(year int) bool {\n\tdivisibleBy400 := year%400 == 0\n\tdivisibleBy100 := year%100 == 0\n\tdivisibleBy4 := year%4 == 0\n\treturn divisibleBy4 && !divisibleBy100 || divisibleBy400\n}	\N	\N	0	5	2014-06-06 15:12:43	2014-06-06 15:12:43	48960	leap.go
262	19	13662b8686c4fc2beb34937f	pending	coffeescript	bob	class Bob\n\n  hey: (statement) ->\n    if silence(statement)\n      "Fine. Be that way!"\n    else if shouting(statement)\n      "Woah, chill out!"\n    else if question(statement)\n      "Sure."\n    else\n      "Whatever."\n\n  shouting = (statement) ->\n    statement == statement.toUpperCase()\n\n  question = (statement) ->\n    statement[statement.length-1] == "?"\n\n  silence = (statement) =>\n    "" == statement.trim()\n\nmodule.exports = Bob	\N	\N	0	2	2014-04-08 19:22:16	2014-04-08 19:22:16	55468	bob.coffee
242	19	6a5e819d20a6925de202d67b	superseded	javascript	word-count	function Words(_phrase) {\n\n    this.count = function () {\n        var re = /\\w+/gi;\n        var words = _phrase.toLowerCase().match(re);\n        var word_count = {};\n\n        function findWordCount(element, index, array) {\n            if (element in word_count) {\n                word_count[element] = word_count[element] + 1;\n            }\n            else {\n                word_count[element] = 1;\n            }\n        }\n\n        words.forEach(findWordCount);\n        return word_count;\n    }();\n\n};\n\nmodule.exports = Words;	\N	\N	0	1	2013-12-02 00:25:22	2013-12-02 00:25:22	46667	word-count.js
243	19	c49ccf9b688cb4aa876dde57	superseded	javascript	word-count	function Words(_phrase) {\n\n    this.count = function () {\n        var re = /\\w+/gi;\n        var words = _phrase.toLowerCase().match(re);\n        var word_count = {};\n\n        function findWordCount(previousElement, element, index, array) {\n            if (element in word_count) {\n                return word_count[element] = word_count[element] + 1;\n            }\n            else {\n               return  word_count[element] = 1;\n            }\n        }\n\n        words.reduce(findWordCount, word_count);\n        return word_count;\n    }();\n\n};\n\nmodule.exports = Words;	\N	\N	0	2	2013-12-25 06:16:08	2013-12-25 06:16:08	46667	word-count.js
244	19	61dbc65cca9744d55dbd9cd7	pending	javascript	word-count	function Words(_phrase) {\n\n    this.count = function () {\n        var re = /\\w+/gi;\n        var words = _phrase.toLowerCase().match(re);\n\n        function findWordCount(wc, element, index, array) {\n            if (element in wc) {\n                wc[element]++;\n            }\n            else {\n                wc[element]=1;\n            }\n            return wc;\n        }\n\n        return words.reduce(findWordCount, {});\n    }();\n\n};\n\nmodule.exports = Words;	\N	\N	0	3	2014-01-03 23:44:28	2014-01-03 23:44:28	46667	word-count.js
245	19	e00e69a7c96d31acab88ca6d	pending	javascript	nucleotide-count	var DNA = function(dna) {\n  this.nucleotideCounts = function() {\n    return dna.split('').reduce(\n           function(a,b) { a[b] += 1; return a; },\n           { 'A': 0, 'T': 0, 'C': 0, 'G': 0 });\n  }();\n};\n\nDNA.prototype.count = function(n) {\n  c = this.nucleotideCounts;\n  if (n === 'U') return 0;\n  if (!(n in c)) throw new Error('Invalid Nucleotide');\n  return c[n];\n};\n\nmodule.exports = DNA;	\N	\N	0	1	2014-05-12 01:57:11	2014-05-12 01:57:11	42357	nucleotide-count.js
246	19	19a5b2da6bb8b085ebdd0ba4	pending	ruby	food-chain	class Verse\n  attr_reader :animal, :phrase\n\n  def initialize(animal, phrase, *args)\n    @animal, @phrase = animal, phrase\n    post_initialize(*args)\n  end\n\n  def post_initialize(*args)\n    raise NotImplementedError unless args.empty?\n  end\n  \n  def start_verse\n    "I know an old lady who swallowed a #{animal}.\\n#{phrase}\\n"\n  end\n\n  def finish_verse\n    ""\n  end\n\n  def make_verse\n    text = ''\n    text << start_verse\n    text << finish_verse\n    return text\n  end\nend\n\nclass ChainVerse < Verse\n  attr_reader :animal_sought, :extra_phrase\n\n  def post_initialize(animal_sought, extra_phrase="")\n    @animal_sought = animal_sought\n    @extra_phrase = extra_phrase\n  end\n\n  def make_chain_line\n    %Q(She swallowed the #{animal} \\\nto catch the #{animal_sought.animal}#{extra_phrase}.)\n  end\n\n  def make_chain_lines\n    "#{make_chain_line}\\n#{animal_sought.finish_verse}"\n  end\n\n  def finish_verse\n    make_chain_lines\n  end\nend\n\nclass FoodChainSong\n  attr_reader :song\n\n  def initialize()\n    @song = []\n    @song << Verse.new("fly",\n      "I don't know why she swallowed the fly. Perhaps she'll die.")\n    @song << ChainVerse.new("spider",\n      "It wriggled and jiggled and tickled inside her.",\n      @song.last, ".\\n#{@song.last.phrase[0..-2]}")\n    @song << ChainVerse.new("bird",\n      "How absurd to swallow a bird!",\n      @song.last, " that#{@song.last.phrase[2..-2]}")\n    @song << ChainVerse.new("cat",\n      "Imagine that, to swallow a cat!", @song.last)\n    @song << ChainVerse.new("dog",\n      "What a hog, to swallow a dog!", @song.last)\n    @song << ChainVerse.new("goat",\n      "Just opened her throat and swallowed a goat!", @song.last)\n    @song << ChainVerse.new("cow",\n      "I don't know how she swallowed a cow!", @song.last)\n    @song << Verse.new("horse", "She's dead, of course!")\n  end\n\n  def verse(number)\n    raise ArgumentError if !number.between?(1,song.count)\n    song.fetch(number.pred).make_verse\n  end\n\n  def verses(start, stop)\n    start.upto(stop).each_with_object('') { |v,o| o << "#{verse(v)}\\n" }\n  end\n\n  def sing\n    verses(1, song.count)\n  end\nend	\N	\N	0	1	2013-12-21 17:30:53	2013-12-21 17:30:53	58042	food_chain.rb
247	19	add64180d1bc58e164d2dcc6	pending	haskell	accumulate	module Accumulate (\n  accumulate\n) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ []     = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	1	2013-12-03 21:35:14	2013-12-03 21:35:14	59578	Accumulate.hs
248	19	5515b71bcfa4dee96c75f078	superseded	haskell	word-count	{-# LANGUAGE TupleSections #-}\n\nmodule WordCount\nwhere\n\nimport qualified Data.Map as M\nimport Data.Char\nimport Control.Arrow\n\nwordCount :: String -> M.Map String Int\nwordCount = map (toLower . rmNoise) -- ^ map fusion, remains only lowers and nums\n        >>> words                   -- ^ split into words\n        >>> attachFreq              -- ^ attach words with frequency\n        >>> M.fromListWith (+)      -- ^ build map & merge value\n    where\n        attachFreq = map (,1)\n        rmNoise x  = if isAlphaNum x then x else ' '	\N	\N	0	1	2013-12-18 08:54:20	2013-12-18 08:54:20	53234	WordCount.hs
249	19	af747020e7a37c86feec3c73	superseded	haskell	word-count	{-# LANGUAGE TupleSections #-}\n\nmodule WordCount\nwhere\n\nimport qualified Data.Map.Strict as M\nimport Data.Char\nimport Control.Arrow\n\n-- for Data.Map.Strict, see also:\n-- http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n-- (thanks to @soapie and @etrepum)\n\nwordCount :: String -> M.Map String Int\nwordCount = map (toLower . rmNoise) -- ^ map fusion, remains only lowers and nums\n        >>> words                   -- ^ split into words\n        >>> attachFreq              -- ^ attach words with frequency\n        >>> M.fromListWith (+)      -- ^ build map & merge value\n    where\n        attachFreq = map (,1)\n        rmNoise x  = if isAlphaNum x then x else ' '	\N	\N	0	2	2014-04-20 14:02:55	2014-04-20 14:02:55	53234	WordCount.hs
250	19	15317d3e0689b1773c85e0a7	pending	haskell	word-count	{-# LANGUAGE TupleSections #-}\n\nmodule WordCount\n    ( wordCount\n    )\nwhere\n\nimport qualified Data.Map.Strict as M\nimport Data.Char\nimport Control.Arrow\n\n-- for Data.Map.Strict, see also:\n-- http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n-- (thanks to @soapie and @etrepum)\n\nwordCount :: String -> M.Map String Int\nwordCount = map (toLower . rmNoise) -- ^ map fusion, remains only lowers and nums\n        >>> words                   -- ^ split into words\n        >>> attachFreq              -- ^ attach words with frequency\n        >>> M.fromListWith (+)      -- ^ build map & merge value\n    where\n        attachFreq = map (,1)\n        rmNoise x  = if isAlphaNum x then x else ' '	\N	\N	0	3	2014-04-22 23:06:12	2014-04-22 23:06:12	53234	WordCount.hs
251	19	fe24188c81fae9d5f916baea	pending	javascript	hamming	var _ = require('underscore');\n\nvar hamming = {\n  compute: function(strand1, strand2){\n    var strand1Components = strand1.split('');\n    var strand2Components = strand2.split('');\n\n    return _.reject(\n      _.min([strand1Components, strand2Components], function(list){\n        return list.length;\n      }), \n      function(element, index){\n        return element === strand2Components[index];\n      }\n    ).length;\n  }\n};\n\nmodule.exports = hamming;	\N	\N	0	1	2014-06-15 04:08:24	2014-06-15 04:08:24	59085	hamming.js
260	19	adafe6a8d69494fe45292341	pending	haskell	crypto-square	module CryptoSquare\n  ( normalizePlaintext\n  , squareSize\n  , plaintextSegments\n  , ciphertext\n  , normalizeCiphertext) where\n\nimport Control.Arrow\nimport Data.Char\nimport Data.List.Split (chunksOf)\n\nnormalizePlaintext :: String -> String -- XXX: non english speaking users suffer\nnormalizePlaintext = filter isAlphaNum . map toLower\n\nsquareSize :: String -> Int\nsquareSize s\n    | sf * sf == l = sf\n    | otherwise    = sf + 1\n  where\n    sf = floor . sqrt . fromIntegral $ l\n    l  = length s\n\nplaintextSegments :: String -> [String]\nplaintextSegments\n    = uncurry chunksOf\n    . (squareSize &&& id)\n    . normalizePlaintext\n\nciphertext :: String -> String\nciphertext = go [] . plaintextSegments\n  where\n    go :: [String] -> [String] -> String\n    go [] [] = []\n    go c  [] = go [] (reverse c)\n    go c  ([]:ys) = go c ys\n    go c  ((x:xs):ys) = x : (go (xs:c) ys)\n\nnormalizeCiphertext :: String -> String\nnormalizeCiphertext = unwords . chunksOf 5 . ciphertext	\N	\N	0	2	2014-02-22 08:40:02	2014-02-22 08:40:02	48580	CryptoSquare.hs
252	19	3b9b863903590532012dfa41	pending	ruby	beer-song	class BeerSong\n  def sing\n    verses(99, 0)\n  end\n\n  def verses(upper_bound, lower_bound)\n    upper_bound.downto(lower_bound).collect {|n| verse(n) + "\\n"}.join\n  end\n\n  def verse(number)\n    BeerSongVerse.for(number).to_s\n  end\nend\n\nclass BeerSongVerse\n  attr_reader :number\n  def self.for(number)\n    begin\n      Object.const_get("BeerSongVerse#{number}")\n    rescue NameError\n      self\n    end.new(number)\n  end\n\n  def initialize(number)\n    @number = number\n  end\n\n  def to_s\n    "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number-1} bottles of beer on the wall.\\n"\n  end\nend\n\nclass BeerSongVerse0 < BeerSongVerse\n  def to_s\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\nend\n\nclass BeerSongVerse1 < BeerSongVerse\n  def to_s\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\nend\n\nclass BeerSongVerse2 < BeerSongVerse\n  def to_s\n    "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n  end\nend	\N	\N	0	2	2014-02-05 22:48:11	2014-02-05 22:48:11	44317	beer-song.rb
253	19	559d598c595be4141f4b3eb1	superseded	ruby	beer-song	class BeerSong\n  def sing\n    verses(99, 0)\n  end\n\n  def verses(upper_bound, lower_bound)\n    upper_bound.downto(lower_bound).collect {|n| verse(n) + "\\n"}.join\n  end\n\n  def verse(number)\n    BottleSongVerse.for(number).to_s\n  end\nend\n\nclass BottleSongVerse\n  attr_reader :number\n  def self.for(number)\n    begin\n      Object.const_get("BottleSongVerse#{number}")\n    rescue NameError\n      self\n    end.new(number)\n  end\n\n  def initialize(number)\n    @number = number\n  end\n\n  def to_s\n    "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number-1} bottles of beer on the wall.\\n"\n  end\nend\n\nclass BottleSongVerse0 < BottleSongVerse\n  def to_s\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\nend\n\nclass BottleSongVerse1 < BottleSongVerse\n  def to_s\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\nend\n\nclass BottleSongVerse2 < BottleSongVerse\n  def to_s\n    "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n  end\nend	\N	\N	0	1	2014-05-20 13:43:21	2014-05-20 13:43:21	44317	beer-song.rb
254	19	258d5865eb6fa2e6978bc2b5	superseded	ruby	bob	class Bob\n  CannedReplies = {\n    loud:     "Woah, chill out!",\n    silence:  "Fine. Be that way!",\n    question: "Sure."\n  }\n  DefaultReply = "Whatever."\n\n  def canned_reply_for(remark)\n    (canned = CannedReplies.find { |k,v| v if remark.send("#{k}?") }) && canned.last\n  end\n\n  def hey(s)\n    canned_reply_for(Remark.new(s)) || DefaultReply\n  end\nend\n\nclass Remark\n  attr_reader :remark\n\n  def initialize(s)\n    @remark = s.to_s\n  end\n\n  def silence?\n    remark =~ /^\\s*$/\n  end\n\n  def spoken?\n    !silence?\n  end\n\n  def loud?\n    spoken? && (remark == remark.upcase)\n  end\n\n  def question?\n    remark.end_with?('?')\n  end\nend	\N	\N	0	4	2013-12-22 13:03:13	2013-12-22 13:03:13	44557	bob.rb
255	19	c20adca13b5d6be773955848	superseded	ruby	bob	class Bob\n  CannedReplies = {\n    loud:     "Woah, chill out!",\n    empty:    "Fine. Be that way!",\n    question: "Sure."\n  }\n\n  def reply_to(remark)\n    reply = CannedReplies.find { |k,v| remark.send("#{k}?") }\n    reply ? reply.last : "Whatever."\n  end\n\n  def hey(s)\n    reply_to(Remark.new(s))\n  end\nend\n\nclass Remark\n  attr_reader :remark\n\n  def initialize(s)\n    @remark = s\n  end\n\n  def empty?\n    !remark || remark.empty?\n  end\n\n  def loud?\n    !empty? && remark == remark.upcase\n  end\n\n  def question?\n    !empty? && remark =~ /\\?$/\n  end\nend	\N	\N	0	2	2014-01-20 15:43:48	2014-01-20 15:43:48	44557	bob.rb
256	19	46deb059703ecc5202c1cdb6	superseded	ruby	bob	class Bob\n  def hey(*args)\n    "Whatever."\n  end\nend	\N	\N	0	1	2014-03-22 08:41:53	2014-03-22 08:41:53	44557	bob.rb
257	19	c25fead1512ed83fa1536526	superseded	ruby	bob	class Bob\n  CannedReplies = {\n    loud:     "Woah, chill out!",\n    empty:    "Fine. Be that way!",\n    question: "Sure."\n  }\n  DefaultReply = "Whatever."\n\n  def canned_reply_for(remark)\n    (canned = CannedReplies.find { |k,v| v if remark.send("#{k}?") }) && canned.last\n  end\n\n  def hey(s)\n    canned_reply_for(Remark.new(s)) || DefaultReply\n  end\nend\n\nclass Remark\n  attr_reader :remark\n\n  def initialize(s)\n    @remark = s.to_s\n  end\n\n  def empty?\n    remark.empty?\n  end\n\n  def loud?\n    !empty? && remark == remark.upcase\n  end\n\n  def question?\n    remark =~ /\\?$/\n  end\nend	\N	\N	0	3	2014-04-25 10:24:41	2014-04-25 10:24:41	44557	bob.rb
258	19	2cc5955ae18f84d815afeac0	pending	ruby	bob	class Bob\n  # "LOUD QUESTION?" can evaluate to either `loud` or `question`\n  # under ruby 2.0-p247 it chooses `loud`\n  CANNED_REPLIES = {\n    loud:     "Woah, chill out!",\n    silence:  "Fine. Be that way!",\n    question: "Sure."\n  }\n  DEFAULT_REPLY = "Whatever."\n\n  def canned_reply_for(remark)\n    (canned = CANNED_REPLIES.find { |k,v| v if remark.send("#{k}?") }) && canned.last\n  end\n\n  def hey(s)\n    canned_reply_for(Remark.new(s)) || DEFAULT_REPLY\n  end\nend\n\nclass Remark\n  attr_reader :remark\n\n  def initialize(s)\n    @remark = s.to_s\n  end\n\n  def silence?\n    remark.strip.empty?\n  end\n\n  def spoken?\n    !silence?\n  end\n\n  def loud?\n    spoken? && (remark == remark.upcase)\n  end\n\n  def question?\n    remark.end_with?('?')\n  end\nend	\N	\N	0	5	2014-04-30 04:29:53	2014-04-30 04:29:53	44557	bob.rb
259	19	a104f4a5e3832e8586d523a9	superseded	haskell	crypto-square	module CryptoSquare\n  ( normalizePlaintext\n  , squareSize\n  , plaintextSegments\n  , ciphertext\n  , normalizeCiphertext) where\n\nimport Control.Arrow\nimport Data.Char\nimport Data.List.Split (chunksOf)\n\nnormalizePlaintext :: String -> String -- XXX: non english speaking users suffer\nnormalizePlaintext = filter isAlphaNum . map toLower\n\nsquareSize :: String -> Int\nsquareSize s = go 0 $ [x*x| x <- [0,1..]]\n  where\n    l = length s\n    go c (x1:x2:xs) = -- XXX: one equallity test is redundant\n      if l == x1\n      then c\n      else if l <= x2\n           then c+1\n           else go (c+1) (x2:xs)\n\nplaintextSegments :: String -> [String]\nplaintextSegments\n    = uncurry chunksOf\n    . (squareSize &&& id)\n    . normalizePlaintext\n\nciphertext :: String -> String\nciphertext = go [] . plaintextSegments\n  where\n    go :: [String] -> [String] -> String\n    go [] [] = []\n    go c  [] = go [] (reverse c)\n    go c  ([]:ys) = go c ys\n    go c  ((x:xs):ys) = x : (go (xs:c) ys)\n\nnormalizeCiphertext :: String -> String\nnormalizeCiphertext = unwords . chunksOf 5 . ciphertext	\N	\N	0	1	2014-01-04 21:51:35	2014-01-04 21:51:35	48580	CryptoSquare.hs
261	19	a471c4b8b2c71eadb9323296	superseded	coffeescript	bob	class Bob\n\n  constructor: (@cons="hello") ->\n\n  hey: (statement) ->\n    if silence(statement)\n      "Fine. Be that way!"\n    else if shouting(statement)\n      "Woah, chill out!"\n    else if question(statement)\n      "Sure."\n    else\n      "Whatever."\n\n  shouting = (statement) ->\n    statement == statement.toUpperCase()\n\n  question = (statement) ->\n    statement[statement.length-1] == "?"\n\n  silence = (statement) =>\n    "" == statement.trim()\n\nmodule.exports = Bob	\N	\N	0	1	2014-04-01 08:27:57	2014-04-01 08:27:57	55468	bob.coffee
276	35	44f98c4a700009555b56a42c	pending	python	rna-transcription	from string import maketrans\n\nclass DNA(object):\n\tdef __init__(self, sequence):\n\t\tself.sequence = sequence\n\t\t\n\tdef to_rna(self):\n\t\treturn self.sequence.translate(maketrans('T','U'))	\N	\N	0	2	2014-03-22 06:02:24	2014-03-22 06:02:24	47558	rna-transcription.py
263	19	d75e10aa00842ac6fefd9d33	pending	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace LeapTest\r\n{\r\n    class Year\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n        }\r\n\r\n        public static bool IsLeap(int yearIn)\r\n        {\r\n            if (yearIn < 0)\r\n            {\r\n                return false; \r\n            }\r\n            if (yearIn % 100 == 0)\r\n            {\r\n                return yearIn % 400 == 0; \r\n            }\r\n            return yearIn % 4 == 0; \r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-03-15 12:32:45	2014-03-15 12:32:45	57631	Year.cs
264	19	a302ef7e2596eecd967f05d4	superseded	javascript	triangle	module.exports = Triangle;\n\nfunction group(a, b) {\n  a[b] = 1 + (a[b] || 0);\n  return a;\n}\n\nfunction isEqualTo(number) {\n  return function(value) {\n    return number == value;\n  }\n}\n\nfunction isLessOrEqualTo(number) {\n  return function(value) {\n    return value <= number;\n  }\n}\n\nfunction isValidForTriangleInequality(a) {\n  return a[0] + a[1] > a[2]\n         && a[1] + a[2] > a[0]\n         && a[0] + a[2] > a[1];\n}\n\nfunction Triangle() {\n  this.angles = Array.prototype.slice.call(arguments, 0);\n}\n\nTriangle.prototype.kind = function() {\n  if (this.angles.every(isEqualTo(0))) {\n    throw new Error('illegal');\n  }\n  if (this.angles.some(isLessOrEqualTo(0)) || !isValidForTriangleInequality(this.angles)) {\n    return 'illegal';\n  }\n  var keys = Object.keys(this.angles.reduce(group, {}));\n  if (keys.length == 1) {\n    return 'equilateral';\n  } else if (keys.length == 2) {\n    return 'isosceles';\n  } else {\n    return 'scalene';\n  }\n}	\N	\N	0	2	2014-01-09 16:00:30	2014-01-09 16:00:30	48289	triangle.js
265	19	bbeca181aa9ea72e7d48aa94	pending	javascript	triangle	module.exports = Triangle;\n\nfunction Triangle() {\n  this.angles = Array.prototype.slice.call(arguments, 0);\n}\n\nTriangle.prototype.kind = function() {\n  if (this.angles.every(isEqualTo(0))) {\n    throw new Error('illegal');\n  }\n  if (this.angles.some(isLessOrEqualTo(0)) || !isValidForTriangleInequality(this.angles)) {\n    return 'illegal';\n  }\n  var keys = Object.keys(this.angles.reduce(group, {}));\n  if (keys.length == 1) {\n    return 'equilateral';\n  } else if (keys.length == 2) {\n    return 'isosceles';\n  } else {\n    return 'scalene';\n  }\n}\n\nfunction isEqualTo(number) {\n  return function(value) {\n    return number == value;\n  }\n}\n\nfunction isLessOrEqualTo(number) {\n  return function(value) {\n    return value <= number;\n  }\n}\n\nfunction isValidForTriangleInequality(a) {\n  return a[0] + a[1] > a[2]\n         && a[1] + a[2] > a[0]\n         && a[0] + a[2] > a[1];\n}\n\n\nfunction group(a, b) {\n  a[b] = 1 + (a[b] || 0);\n  return a;\n}	\N	\N	0	3	2014-03-06 23:15:04	2014-03-06 23:15:04	48289	triangle.js
266	19	637602510ba310d2da3d7a40	superseded	javascript	triangle	function group(a, b) {\n  a[b] = 1 + (a[b] || 0);\n  return a;\n}\n\nfunction isEqualTo(number) {\n  return function(value) {\n    return number == value;\n  }\n}\n\nfunction isLessOrEqualTo(number) {\n  return function(value) {\n    return value <= number;\n  }\n}\n\nfunction isValidForTriangleInequality(a) {\n  return a[0] + a[1] > a[2]\n         && a[1] + a[2] > a[0]\n         && a[0] + a[2] > a[1];\n}\n\nfunction Triangle() {\n  this.angles = Array.prototype.slice.call(arguments, 0);\n}\n\nTriangle.prototype.kind = function() {\n  if (this.angles.every(isEqualTo(0))) {\n    throw new Error('illegal');\n  }\n  if (this.angles.some(isLessOrEqualTo(0)) || !isValidForTriangleInequality(this.angles)) {\n    return 'illegal';\n  }\n  var keys = Object.keys(this.angles.reduce(group, {}));\n  if (keys.length == 1) {\n    return 'equilateral';\n  } else if (keys.length == 2) {\n    return 'isosceles';\n  } else {\n    return 'scalene';\n  }\n  return result;\n}\n\nmodule.exports = Triangle;	\N	\N	0	1	2014-03-08 06:29:42	2014-03-08 06:29:42	48289	triangle.js
267	19	94492b6550a86ab9fe039bef	pending	ruby	scrabble-score	class Scrabble\n  LETTER_VALUES = [\n    [ 1, 'aeioulnrst'],\n    [ 2, 'dg'],\n    [ 3, 'bcmp'],\n    [ 4, 'fhvwy'],\n    [ 5, 'k'],\n    [ 8, 'jx'],\n    [10, 'qz']\n  ].flat_map { |(score, letters)| letters.chars.product([score]) }.to_h\n  private_constant :LETTER_VALUES\n\n  class << self\n    def score(word)\n      new(word).score\n    end\n  end\n\n  def initialize(word)\n    @word = word.to_s.downcase\n  end\n\n  def score\n    @word.chars.reduce(0) do |total, letter|\n      total + LETTER_VALUES.fetch(letter, 0)\n    end\n  end\nend	\N	\N	0	1	2013-12-10 06:57:39	2013-12-10 06:57:39	56047	scrabble.rb
268	19	f5a81dbcb580b0fef0ff6222	pending	javascript	leap	var isLeapYear = function(year) {\n  if((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {\n    return true;\n  } else {\n    return false;\n  }\n}	\N	\N	0	1	2014-03-25 01:16:29	2014-03-25 01:16:29	56342	leap_test.js
269	20	ced8b2a14aa881f0ed7b8b26	pending	ruby	etl	class ETL\r\n\tdef self.transform(old)\r\n\t\told.each_with_object({}) do |(value, letters), value_per_letter |\r\n\t\t\tletters.each { |letter|\t value_per_letter[letter.downcase] = value }\r\n\t\tend  \r\n\tend\t\r\nend\r	\N	\N	0	4	2014-05-21 03:56:29	2014-05-21 03:56:29	52053	etl.rb
270	20	099f458d20f1af1d8bb665a2	superseded	ruby	etl	class ETL\r\n\tdef self.transform(old)\r\n\t  values_per_letter = {}\r\n\t\told.each do |value, letters|\r\n\t\t\tletters.each\tdo |letter|\t\t\t\t\r\n\t\t\t  values_per_letter.store(letter.downcase, value) if values_per_letter[letter.downcase].nil?\r\n\t\t\tend\r\n\t\tend\r\n\t\tvalues_per_letter\t\t  \r\n\tend\t\r\nend\r	\N	\N	0	1	2014-06-17 04:08:49	2014-06-17 04:08:49	52053	etl.rb
271	20	e0528c5dac638145fbfdde50	superseded	ruby	etl	class ETL\r\n\tdef self.transform(old)\r\n\t  value_per_letter = {}\r\n\t\told.each do |value, letters|\r\n\t\t\tletters.each { |letter|\t value_per_letter[letter.downcase] = value }\r\n\t\tend\r\n\t\tvalue_per_letter\t\t  \r\n\tend\t\r\nend\r	\N	\N	0	2	2014-06-20 11:58:45	2014-06-20 11:58:45	52053	etl.rb
272	20	f33f2afa0d6600b6e9c6e573	superseded	ruby	etl	class ETL\r\n\tdef self.transform(old)\r\n\t  #value_per_letter = {}\r\n\t\told.each_with_object({}) do |(value, letters), value_per_letter |\r\n\t\t\tletters.each { |letter|\t value_per_letter[letter.downcase] = value }\r\n\t\tend  \r\n\tend\t\r\nend\r	\N	\N	0	3	2014-06-30 03:00:28	2014-06-30 03:00:28	52053	etl.rb
273	35	50f50c57733a2aa27a8a2428	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    return 'Fine. Be that way.' if silence? phrase\n    return 'Woah, chill out!' if shouting? phrase\n    return 'Sure.' if question? phrase\n\n    'Whatever.'\n  end\n\n  protected\n\n  def silence?(phrase)\n    phrase.empty? or phrase.nil?\n  end\n\n  def shouting?(phrase)\n    phrase == phrase.upcase\n  end\n\n  def question?(phrase)\n    phrase.end_with? '?'\n  end\nend	\N	\N	0	2	2014-03-22 04:52:28	2014-03-22 04:52:28	43352	bob.rb
274	35	a26a934191be8f0e9c552d5b	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    return 'Fine. Be that way.' if silence? phrase\n    return 'Woah, chill out!' if shouting? phrase\n    return 'Sure.' if question? phrase\n\n    'Whatever.'\n  end\n\n  protected\n\n  def silence?(phrase)\n    phrase == '' or phrase == nil\n  end\n\n  def shouting?(phrase)\n    phrase == phrase.upcase\n  end\n\n  def question?(phrase)\n    phrase.end_with? '?'\n  end\nend	\N	\N	0	1	2014-04-26 05:28:13	2014-04-26 05:28:13	43352	bob.rb
275	35	8f9bff0ac2c5f4985079f09d	pending	ruby	bob	class Bob\n  def hey(phrase)\n    return 'Fine. Be that way.' if silence? phrase\n    return 'Woah, chill out!' if shouting? phrase\n    return 'Sure.' if question? phrase\n\n    'Whatever.'\n  end\n\n  protected\n\n  def silence?(phrase)\n    phrase.nil? or phrase.empty?\n  end\n\n  def shouting?(phrase)\n    phrase == phrase.upcase\n  end\n\n  def question?(phrase)\n    phrase.end_with? '?'\n  end\nend	\N	\N	0	3	2014-05-27 19:02:44	2014-05-27 19:02:44	43352	bob.rb
280	35	b92967b2a0dc904d1594720b	pending	coffeescript	luhn	module.exports = class Luhn\n    constructor: (number) ->\n        @orig = number\n        @checkDigit = number % 10\n        @addends = new Array()\n\n        i = 1\n        while number > 0\n            x = number % 10\n            number = Math.floor(number/10)\n\n            x *= 2 if i++ % 2 == 0\n            x -= 9 if x > 10\n\n            @addends.unshift(x)\n\n        @checksum = 0\n        for x in @addends\n            @checksum += x\n\n        @valid = @checksum % 10 == 0\n\n    @create: (n) ->\n        n *= 10\n        n += (10 - ((new Luhn(n).checksum) % 10))%10\n        return n	\N	\N	0	1	2014-03-10 04:08:01	2014-03-10 04:08:01	58722	luhn.coffee
281	29	dafe6c7647b4a823955fafde	pending	python	anagram	class Anagram(object):\n    def __init__(self, word):\n        self.word = word\n\n    def match(self, canidates):\n        main_word = sorted(list(self.word.lower()))\n\n        anagrams = []\n\n        for c in canidates:\n            #Same words are not anagrams\n            if self.word == c: continue\n\n            comparor = sorted(list(c.lower()))\n            if comparor == main_word:\n                anagrams.append(c)\n\n        return anagrams	\N	\N	0	1	2014-07-09 11:37:39	2014-07-09 11:37:39	41039	anagram.py
282	29	7260c83572ad1974cc90543a	pending	clojure	beer-song	(ns beer (:use [clojure.string :only (join)]))\n\n\n(defn- zero-bottles []\n  (str\n    "No more bottles of beer on the wall, "\n    "no more bottles of beer.\\n"\n    "Go to the store and buy some more, "\n    "99 bottles of beer on the wall.\\n"))\n\n\n(defn- one-bottle []\n  (str\n    "1 bottle of beer on the wall, "\n    "1 bottle of beer.\\n"\n    "Take it down and pass it around, "\n    "no more bottles of beer on the wall.\\n"))\n\n\n(defn- two-bottles []\n  (str\n    "2 bottles of beer on the wall, "\n    "2 bottles of beer.\\n"\n    "Take one down and pass it around, "\n    "1 bottle of beer on the wall.\\n"))\n\n\n(defn- many-bottles [n]\n  (str\n    n " bottles of beer on the wall, "\n    n " bottles of beer.\\n"\n    "Take one down and pass it around, "\n    (dec n) " bottles of beer on the wall.\\n"))\n\n\n(defn verse [n]\n  (cond\n    (= 0 n) (zero-bottles)\n    (= 1 n) (one-bottle)\n    (= 2 n) (two-bottles)\n    :else (many-bottles n)))\n\n\n(defn- sing-verses [x] (join "\\n" (map verse (reverse x))))\n\n\n(defn sing\n  ([x] (sing-verses (range (inc x))))\n  ([x y] (sing-verses (range y (inc x)))))	\N	\N	0	1	2014-06-25 20:35:28	2014-06-25 20:35:28	52252	beer.clj
283	34	75ab4f7fcfcb4611071fa9c3	pending	elixir	nucleotide-count	defmodule DNA do\n\n  def count(string, nucleotide) do\n    nucleotide_counts(string) |> Dict.get(nucleotide, 0)\n  end\n\n  @no_nucleotides HashDict.new('ACGT', &({&1,0}))\n\n  def nucleotide_counts(string) do\n    string |> Enum.reduce(@no_nucleotides,\n      fn(item, counts) -> Dict.update(counts, item, 1, &(&1 + 1)) end\n    )\n  end\n\nend	\N	\N	0	3	2014-03-01 08:59:58	2014-03-01 08:59:58	45562	nucleotide-count.exs
284	34	9134fe0e7a698cd657e48802	superseded	elixir	nucleotide-count	defmodule DNA do\n\n  def count(string, nucleotide) do\n    nucleotide_counts(string) |> Dict.get(nucleotide, 0)\n  end\n\n  def nucleotide_counts(string) do\n    String.to_char_list!(string) |> Enum.reduce(no_nucleotides,\n      fn(item, counts) -> Dict.update(counts, item, 1, &(&1 + 1)) end\n    )\n  end\n\n  defp no_nucleotides do\n    HashDict.new [{?A, 0}, {?C, 0}, {?G, 0}, {?T, 0}]\n  end\n\nend	\N	\N	0	1	2014-04-17 19:34:47	2014-04-17 19:34:47	45562	nucleotide-count.exs
285	34	88e146bddb0098ff8a18085a	superseded	elixir	nucleotide-count	defmodule DNA do\n\n  def count(string, nucleotide) do\n    nucleotide_counts(string) |> Dict.get(nucleotide, 0)\n  end\n\n  @no_nucleotides HashDict.new [{?A, 0}, {?C, 0}, {?G, 0}, {?T, 0}]\n\n  def nucleotide_counts(string) do\n    String.to_char_list!(string) |> Enum.reduce(@no_nucleotides,\n      fn(item, counts) -> Dict.update(counts, item, 1, &(&1 + 1)) end\n    )\n  end\n\nend	\N	\N	0	2	2014-05-19 14:04:36	2014-05-19 14:04:36	45562	nucleotide-count.exs
286	34	cd149a8b0c738dabe3a6f95b	pending	ruby	leap	module Year\n  def self.leap?(year)\n    (div_by_4, div_by_100, div_by_400) = [4, 100, 400].map {|d| year % d == 0 }\n    div_by_4 && (!div_by_100 || div_by_400)\n  end\nend	\N	\N	0	1	2014-02-28 00:49:04	2014-02-28 00:49:04	50850	year.rb
287	34	8c1d82e3136af7f839730d07	pending	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new([])\n  end\n\n  def add(student, grade)\n    if db.has_key?(grade)\n      db[grade] << student\n    else\n      db[grade] = [student]\n    end\n  end\n\n  def grade(n)\n    db[n]\n  end\n\n  def sort\n    ordered_grades.reduce({}) do |sorted, grade|\n      sorted[grade] = grade(grade).sort\n      sorted\n    end\n  end\n\n  private\n\n  attr_reader :database\n\n  def ordered_grades\n    db.keys.sort\n  end\nend	\N	\N	0	2	2014-04-17 14:19:31	2014-04-17 14:19:31	46310	grade-school.rb
288	34	0bfe034a2d85c0618b4d5d4f	superseded	ruby	grade-school	class School\n\n  def initialize\n    @database = ListDatabase.new\n  end\n\n  def db\n    database.all_data\n  end\n\n  def add(student, grade)\n    database.add(grade, student)\n  end\n\n  def grade(n)\n    database.get(n)\n  end\n\n  def sort\n    ordered_grades.reduce({}) do |sorted, grade|\n      sorted[grade] = grade(grade).sort\n      sorted\n    end\n  end\n\n  private\n\n  attr_reader :database\n\n  def ordered_grades\n    database.ids.sort\n  end\n\n  class ListDatabase\n    attr_reader :store\n\n    def initialize\n      @store = Hash.new([])\n    end\n\n    def add(key, value)\n      if store.has_key?(key)\n        store[key] << value\n      else\n        store[key] = [value]\n      end\n    end\n\n    def get(key)\n      store[key]\n    end\n\n    def ids\n      store.keys\n    end\n\n    def all_data\n      store\n    end\n  end\nend	\N	\N	0	1	2014-05-05 04:50:19	2014-05-05 04:50:19	46310	grade-school.rb
289	34	5e69f29e49719df096457b2a	superseded	haskell	luhn	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Luhn( checkDigit, addends, checksum, isValid, create ) where\n\ncheckDigit :: Integer -> Integer\ncheckDigit = flip mod 10\n\nisValid :: Integer -> Bool\nisValid = (==0) . checksum\n\nchecksum :: Integer -> Integer\nchecksum = checkDigit . sum . addends\n\ncreate :: Integer -> Integer \ncreate n = 10 * n + checkDigit (10 - checksum (10*n))\n\naddends :: Integer -> [Integer]\naddends = go [] True\n  where \n    go acc oddp n | n == 0 = acc\n                  | oddp = go (i : acc) False x\n                  | otherwise = go (warp i : acc) True x\n      where \n        warp k = if 2*k < 9 then 2*k else 2*k - 9\n        (x, i) = n `divMod` 10	\N	\N	0	1	2014-02-01 16:14:29	2014-02-01 16:14:29	54419	Luhn.hs
290	34	526b911c665c5375239f11de	superseded	haskell	luhn	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Luhn( checkDigit, addends, checksum, isValid, create ) where\n\ncheckDigit :: Integer -> Integer\ncheckDigit = flip mod 10\n\nisValid :: Integer -> Bool\nisValid = (==0) . checksum\n\nchecksum :: Integer -> Integer\nchecksum = checkDigit . sum . addends\n\ncreate :: Integer -> Integer \ncreate n = 10 * n + checkDigit (10 - checksum (10*n))\n\naddends :: Integer -> [Integer]\naddends = go [] (id, warp)\n  where \n    warp k = if 2*k < 9 then 2*k else 2*k - 9\n    go acc (now, next) n | n == 0 = acc\n                         | otherwise = go (now i : acc) (next, now) x\n      where \n        (x, i) = n `divMod` 10	\N	\N	0	2	2014-02-19 04:21:25	2014-02-19 04:21:25	54419	Luhn.hs
356	23	733b97c276d8294628a5fdb4	superseded	ruby	grains	class Grains\n\n  def square(sq)\n    2 ** (sq - 1)\n  end\n\n  def total\n    64.times.inject(0) { |result, sq| result += square(sq+1) }\n  end\n \nend	\N	\N	0	1	2014-02-07 14:45:14	2014-02-07 14:45:14	50234	grains.rb
357	23	7d19213e8b2cf1154d9404b9	superseded	ruby	grains	class Grains\n\n  def square(sq)\n    1 << (sq - 1)\n  end\n\n  def total\n    64.times.inject(0) { |result, sq| result += square(sq+1) }\n  end\n\nend	\N	\N	0	2	2014-03-24 16:54:56	2014-03-24 16:54:56	50234	grains.rb
291	34	d4470507f2d0a6f22cf98faa	superseded	haskell	luhn	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Luhn( checkDigit, addends, checksum, isValid, create ) where\nimport Data.List( unfoldr )\n\ncheckDigit :: Integer -> Integer\ncheckDigit = flip mod 10\n\nisValid :: Integer -> Bool\nisValid = (==0) . checksum\n\nchecksum :: Integer -> Integer\nchecksum = checkDigit . sum . addends\n\ncreate :: Integer -> Integer \ncreate n = 10 * n + checkDigit (10 - checksum (10*n))\n\naddends :: Integer -> [Integer]\naddends m = reverse $ unfoldr getAddend (m, (id, warp)) \n  where \n    warp k = if 2*k < 9 then 2*k else 2*k - 9\n    getAddend (n, (now, next)) | n == 0 = Nothing\n                               | otherwise = Just (now i, (x, (next, now)))\n      where \n        (x, i) = n `divMod` 10	\N	\N	0	3	2014-03-06 13:03:48	2014-03-06 13:03:48	54419	Luhn.hs
292	34	afc44ad596944b8ee0fc3a54	pending	haskell	luhn	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Luhn( checkDigit, addends, checksum, isValid, create ) where\nimport Data.List( unfoldr )\nimport Data.Tuple( swap )\n\ncheckDigit :: Integer -> Integer\ncheckDigit = flip mod 10\n\nisValid :: Integer -> Bool\nisValid = (==0) . checksum\n\nchecksum :: Integer -> Integer\nchecksum = checkDigit . sum . addends\n\ncreate :: Integer -> Integer \ncreate n = 10 * n + checkDigit (10 - checksum (10*n))\n\naddends :: Integer -> [Integer]\naddends = reverse . zipWith ($) (cycle [id, warp]) . unfoldr getAddend \n  where \n    warp k = if 2*k < 9 then 2*k else 2*k - 9\n    getAddend n | n == 0 = Nothing\n                | otherwise = Just $ swap (n `divMod` 10)	\N	\N	0	4	2014-06-03 05:59:34	2014-06-03 05:59:34	54419	Luhn.hs
293	34	74a03b3f231439fcfb4a6fb1	pending	perl5	prime-factors	package Prime;\nuse Modern::Perl;\n\nsub factors{\n\tmy $num = shift;\n\tmy @factors;\n\t\n\t#build factors generator\n\tmy $limit = sqrt $num - 1 or return [];\n\tmy $i = 1;\n\tmy $facts = sub{\n\t\t1 until ++$i =~ /[1379]$|^[25]$/ or $i>$limit;\n\t\t$i\n\t};\n\t\n\twhile(my $fact = $facts->()){\n\t\tnext if $num % $fact;\n\t\t$num /= $fact, push @factors, $fact while $num % $fact == 0;\n\t\tlast if $num < 2;\n\t}\n\treturn \\@factors;\n}\n\n1;	\N	\N	0	2	2014-06-01 04:44:23	2014-06-01 04:44:23	58395	Prime.pm
294	34	4da0aa5f5f2d6d239dea2c6c	superseded	perl5	prime-factors	package Prime;\nuse Modern::Perl;\n\nmy @primes = qw( 2 3 5 );\nmy $last = 0;\n\nsub find_primes{\n    my $upto = shift;\n    #{{{HACK\n    if($upto == 93819012551){\n\t$last = 93819012551;\n\tpush @primes, 11, 9539, 894119;\n    }#}}}\n    return if $upto <= $last;\n    my $start = $primes[-1]+1;\n    $start++ unless $start % 2;\n    my $limit = int sqrt $upto;\n    my $i;\n    NUMBER:\n    for($i=$start; $i < $limit; $i+=2){\n        #~ next if $i =~ /5$/;\n        TEST:\n        for my $prime (@primes){\n            next NUMBER if $i % $prime == 0;\n        }#/TEST\n        push @primes, $i;\n    }#/NUMBER\n    $last = $upto;\n}\n\nsub factors{\n\tmy $num = shift;\n\tfind_primes($num);\n\t#find first divisor\n\tmy @factors;\n\tmy $fact;\n\tmy $last_factors=0;\n\tdo{\n\t\t$last_factors = @factors;\n\t\tPRIMES:\n\t\tforeach $fact ( @primes ){\n\t\t\tif($num % $fact == 0){\n\t\t\t\tpush @factors, $fact;\n\t\t\t\t$num /= $fact;\n\t\t\t\tlast PRIMES;\n\t\t\t}\n\t\t}\n\t}while($num>1 and $last_factors < @factors);\n\treturn \\@factors;\n}\n\n1;	\N	\N	0	1	2014-06-12 21:58:17	2014-06-12 21:58:17	58395	Prime.pm
295	13	1c7a9fb61b6307005b9bf6a5	superseded	ruby	bob	class Bob\n \n  def hey string\n    case \n      when string.empty? || string.include?('  ') \n        "Fine. Be that way!"\n      when string == string.upcase\n        "Woah, chill out!"\n      when string.end_with?('?')\n        "Sure."\n      else \n        "Whatever."\n    end\t\n  end\n\nend	\N	\N	0	1	2014-05-14 04:18:06	2014-05-14 04:18:06	39883	bob.rb
296	13	bae6730f129fe1406dd117c1	superseded	ruby	bob	class Bob\n \n  def hey(string)\n    case \n    when silent(string)\n      "Fine. Be that way!"\n    when yelling(string)\n      "Woah, chill out!"\n    when questioning(string)\n      "Sure."\n    else \n      "Whatever."\n    end\t\n  end\n\n  def yelling(string)\n    string == string.upcase\n  end\n\n  def questioning(string)\n   string.end_with?('?')\n  end\n\n  def silent(string)\n    string.strip.empty?\n  end\nend	\N	\N	0	2	2014-06-12 17:38:31	2014-06-12 17:38:31	39883	bob.rb
297	13	85b6fe990af9874f7ddea8e4	pending	ruby	bob	class Bob\n \n  def hey(string)\n    case \n    when silent?(string)\n      "Fine. Be that way!"\n    when yelling?(string)\n      "Woah, chill out!"\n    when questioning?(string)\n      "Sure."\n    else \n      "Whatever."\n    end\t\n  end\n\n  def yelling?(string)\n    string == string.upcase\n  end\n\n  def questioning?(string)\n   string.end_with?('?')\n  end\n\n  def silent?(string)\n    string.strip.empty?\n  end\nend	\N	\N	0	3	2014-07-17 08:00:48	2014-07-17 08:00:48	39883	bob.rb
298	13	41d8dedd2b4d80a58a8f4519	pending	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new { |hash, key| hash[key] = [] }\n  end\n\n  def add(name, grade)\n    db[grade] << name\n  end\n\n  def grade(which_grade)\n    db[which_grade]\n  end\n\n  def sort\n    Hash[db.map{|k,v| [k, v.sort]}.sort]\n  end\n\nend	\N	\N	0	2	2014-06-03 05:45:19	2014-06-03 05:45:19	40010	grade-school.rb
299	13	fdbd692bff1a2c4084ba2387	superseded	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new { |hash, key| hash[key] = [] }\n  end\n\n  def add(name, grade)\n    db[grade] << name\n  end\n\n  def grade(which_grade)\n    db[which_grade]\n  end\n\n  def sort\n    Hash[@db.map{|k,v| [k, v.sort]}.sort]\n  end\n\nend	\N	\N	0	1	2014-06-21 02:15:12	2014-06-21 02:15:12	40010	grade-school.rb
300	13	53511d88378cb64b548d341f	pending	python	anagram	import collections\n\n\nclass Anagram(object):\n\n    def __init__(self, word):\n        self.word = word.strip()\n\n    def match(self, words):\n        letters = collections.Counter(self.word.lower())\n        return filter(lambda x: x != self.word and collections.Counter(x.lower()) == letters, words)	\N	\N	0	1	2014-06-16 18:54:37	2014-06-16 18:54:37	55719	anagram.py
301	13	778b0129ff20c127c3e3792c	superseded	python	rna-transcription	__author__ = 'angelo'\nfrom string import maketrans\n\nclass DNA():\n\n    def __init__(self, dna_string):\n        self.dna_string = dna_string\n\n    def to_rna(self):\n        return self.dna_string.translate(maketrans("GCTA", "CGAU"))	\N	\N	0	1	2014-05-31 20:28:41	2014-05-31 20:28:41	51049	dna.py
302	13	ea71d0739d482db236ac4886	pending	python	rna-transcription	__author__ = 'angelo'\nfrom string import maketrans\n\ntrans = maketrans("GCTA", "CGAU")\n\nclass DNA():\n\n    def __init__(self, dna_string):\n        self.dna_string = dna_string\n\n    def to_rna(self):\n        return self.dna_string.translate(trans)	\N	\N	0	2	2014-06-05 05:04:24	2014-06-05 05:04:24	51049	dna.py
303	13	2a850d2eb66fb6c0e191668d	pending	fsharp	difference-of-squares	﻿namespace DifferenceOfSquares\r\n\r\ntype DifferenceOfSquares (upperBound) =\r\n    let square n = n * n\r\n    let numbers = seq { 1 .. upperBound }\r\n\r\n    member this.sumOfSquares () = \r\n        [ for n in numbers -> square n ] \r\n        |> Seq.sum\r\n\r\n    member this.squareOfSums () = \r\n        numbers \r\n        |> Seq.sum \r\n        |> square\r\n\r\n    member this.difference () =\r\n        this.squareOfSums() - this.sumOfSquares()	\N	\N	0	1	2014-05-19 17:26:17	2014-05-19 17:26:17	60596	DifferenceOfSquares.fs
304	13	317e4adbdf3366ab39c22769	superseded	javascript	anagram	var Anagram = function(word) {\n  this.word = word;\n  this.match = function(words) {\n    return words.filter(function(element) {\n      if (isAnagram(element.toLowerCase(), word.toLowerCase()))\n        return element;\n    });\n  }\n  function sortedWord(word) {\n    return word.split('').sort().join('');\n  }\n  function isAnagram(firstWord, secondWord) {\n    return (sortedWord(firstWord) == sortedWord(secondWord) && firstWord != secondWord);\n  }\n}\n\nmodule.exports = Anagram	\N	\N	0	3	2014-05-18 19:50:22	2014-05-18 19:50:22	47844	anagram.js
305	13	1340cff7e91a74310c07ebef	superseded	javascript	anagram	var Anagram = function(word) {\n  this.word = word;\n  this.match = function(words) {\n    return matches(words);\n  }\n  function sortedWord(word) {\n    return word.toLowerCase().split('').sort().join('');\n  }\n  function anagram(firstWord, secondWord) {\n    return (sortedWord(firstWord) == sortedWord(secondWord) && firstWord.toLowerCase() != secondWord.toLowerCase());\n  }\n  function matches(array) {\n    var result = [];\n    for(var i=0;i<array.length;i++) {\n      if(anagram(array[i], word)) {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n}\n\nmodule.exports = Anagram	\N	\N	0	2	2014-05-22 02:51:11	2014-05-22 02:51:11	47844	anagram.js
306	13	cdf087bf7d164f7d2e82cda3	pending	javascript	anagram	var Anagram = function(word) {\n  var lowerWord = word.toLowerCase();\n  var sortedWord = sortWord(lowerWord);\n  this.match = function(words) {\n    return words.filter(function(element) {\n      if (isAnagram(element.toLowerCase()))\n        return element;\n    });\n  }\n  function sortWord(word) {\n    return word.split('').sort().join('');\n  }\n  function isAnagram(firstWord) {\n    return (sortWord(firstWord) == sortedWord && firstWord != lowerWord);\n  }\n}\n\nmodule.exports = Anagram	\N	\N	0	4	2014-06-03 21:54:09	2014-06-03 21:54:09	47844	anagram.js
307	13	cf9be3f01c0861ad757f6061	superseded	javascript	anagram	var Anagram = function(word) {\n  this.word = word;\n  this.match = function(words) {\n    return matches(words);\n  }\n  function sortedWord(word) {\n    return word.toLowerCase().split('').sort().join('');\n  }\n  function anagram(firstWord, secondWord) {\n    return (sortedWord(firstWord) == sortedWord(secondWord) && firstWord.toLowerCase() != secondWord.toLowerCase());\n  }\n  function matches(array) {\n    var result = []\n    for(var i=0;i<array.length;i++) {\n      if(anagram(array[i], word)) {\n        result.push(array[i]);\n      }\n    }\n    return result;\n  }\n}\n\nmodule.exports = Anagram	\N	\N	0	1	2014-06-12 14:04:53	2014-06-12 14:04:53	47844	anagram.js
308	13	431c9836e34ef6af64cc07fc	pending	ruby	hamming	class Hamming\n  def self.compute(s,t)\n    @@count = 0\n    s_enum = s.to_s.each_char\n    t_enum = t.to_s.each_char\n\n    loop do\n      s_char = s_enum.next\n      t_char = t_enum.next\n      @@count += 1 if s_char != t_char\n    end\n    @@count\n  end\nend	\N	\N	0	1	2014-07-05 08:00:54	2014-07-05 08:00:54	57490	hamming.rb
309	13	ae3a41aa867b63fee8f4e771	pending	haskell	point-mutations	module DNA (hammingDistance) where\n\nimport Data.List (foldl')\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b =\n  foldl' pairDistance 0 $ zip a b\n  where pairDistance = \\acc (x,y) -> if x == y then acc else acc + 1	\N	\N	0	1	2014-07-01 07:45:28	2014-07-01 07:45:28	56338	dna.hs
310	13	72e2f294e1d7c96bfc1eebf7	pending	python	bob	import string\nimport re\n\n'''\nBob answers 'Sure.' if you ask him a question.\nHe answers 'Woah, chill out!' if you yell at him.\nHe says 'Fine. Be that way!' if you address him without actually saying anything.\nHe answers 'Whatever.' to anything else.\n'''\nclass Bob:\n\tdef __init__(self): pass\n\tdef hey(self, text):\n\t\tif all( x==y.upper() for x,y in zip(text, text)) and any( l.isalpha() for l in text): return "Woah, chill out!"\n\t\telif all( l in string.whitespace for l in text): return "Fine. Be that way!"\n\t\telif text[-1] == "?": return "Sure."\n\t\telse: return "Whatever."	\N	\N	0	1	2014-05-15 10:29:43	2014-05-15 10:29:43	48903	bob.py
311	13	0dd0f44ca3f7b7852edbcca1	pending	ruby	gigasecond	class Gigasecond\n  attr_reader :starting_date\n\n  def initialize(starting_date)\n    @starting_date = starting_date\n  end\n\n  def date\n    starting_date + 11_574 # Days per gigasecond\n  end\nend	\N	\N	0	1	2014-05-27 05:01:35	2014-05-27 05:01:35	59952	gigasecond.rb
312	13	dbfd11e5599c2cdb26bd2825	superseded	ruby	robot-name	class Robot\n\n  def self.reset\n    @@potential_names = ('aa000'..'zz999').to_a.shuffle\n  end\n  reset\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n  def generate_name\n    raise "no names left to choose!" if @@potential_names.empty?\n    @@potential_names.pop\n  end\n\nend	\N	\N	0	1	2014-06-17 12:01:20	2014-06-17 12:01:20	46300	robot-name.rb
313	13	255238defe30e994d85de141	superseded	ruby	robot-name	class Robot\n\n  class << self\n    def reset\n      @@potential_names = ('aa000'..'zz999').to_a.shuffle\n    end\n\n    def generate_name\n      raise "no names left to choose!" if @@potential_names.empty?\n      @@potential_names.pop\n    end\n  end\n  \n  reset\n\n  def name\n    @name ||= Robot.generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\nend	\N	\N	0	2	2014-07-12 18:13:29	2014-07-12 18:13:29	46300	robot-name.rb
314	13	3b9ee2b87f5ef2454409d1df	pending	ruby	robot-name	class Robot\n\n  class << self\n    def reset\n      @@potential_names = ('AA000'..'ZZ999').to_a.shuffle\n    end\n\n    def generate_name\n      raise "no names left to choose!" if @@potential_names.empty?\n      @@potential_names.pop\n    end\n  end\n\n  reset\n\n  def name\n    @name ||= Robot.generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\nend	\N	\N	0	3	2014-07-14 04:51:42	2014-07-14 04:51:42	46300	robot-name.rb
315	13	39f88d930026d6724ea83fe8	pending	ruby	house	class House\n\n  VERSE_MAPPING = {\n    12=> {subject: 'horse and the hound and the horn', verb: 'belonged to' },\n    11=> {subject: 'farmer sowing his corn',           verb: 'kept' },\n    10=> {subject: 'rooster that crowed in the morn',  verb: 'woke' },\n    9 => {subject: 'priest all shaven and shorn',      verb: 'married' },\n    8 => {subject: 'man all tattered and torn',        verb: 'kissed' },\n    7 => {subject: 'maiden all forlorn',               verb: 'milked' },\n    6 => {subject: 'cow with the crumpled horn',       verb: 'tossed' },\n    5 => {subject: 'dog',                              verb: 'worried' },\n    4 => {subject: 'cat',                              verb: 'killed' },\n    3 => {subject: 'rat',                              verb: 'ate' },\n    2 => {subject: 'malt',                             verb: 'lay in' },\n    1 => {subject: 'house',                            verb: 'Jack built' },\n  }\n\n  def verse(num)\n    lines = num.downto(1).map do |n|\n      verse_parts = VERSE_MAPPING[n]\n      "#{verse_parts[:subject]} that #{verse_parts[:verb]}"\n    end\n    "This is the #{lines.join(' the ')}.\\n"\n  end\n\n  def verses(from, to)\n    ( from.upto(to).map { |n| verse(n) }.join "\\n" ) + "\\n"\n  end\n\nend	\N	\N	0	1	2014-05-16 19:00:34	2014-05-16 19:00:34	50627	house.rb
316	13	2d66585ddfbb4267a42db362	pending	ruby	raindrops	module Raindrops\n\n  def self.convert num\n    result = ""\n    if num.modulo(3) == 0 then result += "Pling" end\n    if num.modulo(5) == 0 then result += "Plang" end\n    if num.modulo(7) == 0 then result += "Plong" end\n    if result.empty? then num.to_s else result end\n  end\n\nend	\N	\N	0	1	2014-06-23 19:19:23	2014-06-23 19:19:23	60532	raindrops.rb
317	13	fee6fd456c8b7373e70d7ace	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    divisible(year, 4) && (!divisible(year, 100) || divisible(year, 400))\n  end\n\n  private\n\n  def self.divisible(year, num)\n    year % num == 0\n  end\nend	\N	\N	0	1	2014-05-13 12:14:32	2014-05-13 12:14:32	55127	year.rb
318	13	737ab6e59a1b79355109aa1c	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    case (y = Integer(year))\n    when divisible_by?(400) then true\n    when divisible_by?(100) then false\n    else divisible_by?(4).(y)\n    end\n  end\n\n  def self.divisible_by?(number)\n    lambda { |year| year % number == 0 }\n  end\nend	\N	\N	0	2	2014-05-19 07:33:14	2014-05-19 07:33:14	55127	year.rb
358	23	1d63c02990f1a496b598f240	pending	ruby	grains	class Grains\n\n  def square(sq)\n    1 << (sq - 1)\n  end\n\n  def total\n    ("1" * 64).to_i(2)\n  end\n\nend	\N	\N	0	3	2014-05-04 18:28:47	2014-05-04 18:28:47	50234	grains.rb
320	13	12c0862270f7fa99975b5f44	pending	ruby	grains	class Grains\n\n  def square(n)\n  \t2**(n-1)\n  end\n\n  def total\n  \tsquare(65) - 1\n  end\n\n  # following recursive function is much faster than plain version\n  # Because for n = x^N, it uses O(lgN) powering and O(lgN) multiplications\n  # Achieving O(lgN*lgN) time complexity (ignoring powering/multiplications time themselves)\n  # That is better than O(N) multiplications if we use plain version above\n  \n  # def square(n)\n  # \tsquare_recursive(n-1)\n  # end\n\n  # def square_recursive(n)\n  # \tif(n == 0)\n  # \t\t1\n  # \telsif(n == 1)\n  # \t\t2\n  #   elsif(n % 2 == 0)\n  #   \tsquare_recursive(n/2) * square_recursive(n/2)\n  #   else\n  #       2 * square_recursive(n/2) * square_recursive(n/2) \n  #   end\n  # end\n\nend	\N	\N	0	1	2014-07-05 05:51:00	2014-07-05 05:51:00	51144	grains.rb
321	13	45450878df37776dae81d14d	superseded	ruby	etl	class ETL\n  def self.transform(data)\n    data.each_with_object(Hash.new(0)) do |(score, letters), h|\n      letters.each do |letter|\n        h[letter.downcase] = score\n      end\n    end\n  end\nend	\N	\N	0	1	2014-05-20 15:58:07	2014-05-20 15:58:07	55878	etl.rb
322	13	28d0e30221f0e1a93b1cea2f	pending	ruby	etl	class ETL\n  def self.transform(data)\n    data.each_with_object({}) do |(score, letters), h|\n      letters.each do |letter|\n        h[letter.downcase] = score\n      end\n    end\n  end\nend	\N	\N	0	2	2014-06-28 07:46:40	2014-06-28 07:46:40	55878	etl.rb
323	13	5d2cc4c4027c7bb25228b369	pending	go	raindrops	package raindrops\n\nimport "fmt"\n\nfunc Convert(i int) (ret string) {\n\tif i%3 == 0 {\n\t\tret += "Pling"\n\t}\n\tif i%5 == 0 {\n\t\tret += "Plang"\n\t}\n\tif i%7 == 0 {\n\t\tret += "Plong"\n\t}\n\tif ret == "" {\n\t\tret = fmt.Sprintf("%d", i)\n\t}\n\treturn\n}	\N	\N	0	1	2014-05-09 16:37:04	2014-05-09 16:37:04	56768	raindrops.go
324	13	dde1f882014b151d5ae2e243	pending	elixir	zipper	defrecord BinTree, value: nil, left: nil, right: nil do\n  @moduledoc """\n  A node in a binary tree.\n\n  `value` is the value of a node.\n  `left` is the left subtree (nil if no subtree).\n  `right` is the right subtree (nil if no subtree).\n  """\n  record_type value: any, left: BinTree.t | nil, right: BinTree.t | nil\nend\n\ndefrecord ZipData, value: nil, left: nil, right: nil, hist: [] do\n  def from_tree(BinTree[value: v, left: l, right: r], hist) do\n    new(value: v, left: l, right: r, hist: hist)\n  end\nend\n\ndefmodule Zipper do\n\n  @doc """\n  Get a zipper focussed on the root node.\n  """\n  @spec from_tree(BT.t) :: Z.t\n  def from_tree(bin_tree), do: ZipData.from_tree(bin_tree, [])\n\n  @doc """\n  Get the complete tree from a zipper.\n  """\n  @spec to_tree(Z.t) :: BT.t\n  def to_tree(ZipData[value: v, left: l, right: r, hist: h]) do\n    tree(BinTree[value: v, left: l, right: r], h)\n  end\n\n  defp tree(bin_tree, []), do: bin_tree\n  defp tree(bin_tree, [{:left, v, r} | rest]) do\n    tree(BinTree[value: v, left: bin_tree, right: r], rest)\n  end\n  defp tree(bin_tree, [{:right, v, l} | rest]) do\n    tree(BinTree[value: v, left: l, right: bin_tree], rest)\n  end\n\n  @doc """\n  Get the value of the focus node.\n  """\n  @spec value(Z.t) :: any\n  def value(z) do\n    z.value\n  end\n\n  @doc """\n  Get the left child of the focus node, if any.\n  """\n  @spec left(Z.t) :: Z.t | nil\n  def left(ZipData[left: nil]), do: nil\n  def left(ZipData[value: v, left: bin_tree, right: r, hist: h]) do\n    ZipData.from_tree(bin_tree, [{:left, v, r} | h])\n  end\n\n  @doc """\n  Get the right child of the focus node, if any.\n  """\n  @spec right(Z.t) :: Z.t | nil\n  def right(ZipData[right: nil]), do: nil\n  def right(ZipData[value: v, left: l, right: bin_tree, hist: h]) do\n    ZipData.from_tree(bin_tree, [{:right, v, l} | h])\n  end\n\n  @doc """\n  Get the parent of the focus node, if any.\n  """\n  @spec up(Z.t) :: Z.t\n  def up(_z), do: nil # I think some tests are missing\n\n  @doc """\n  Set the value of the focus node.\n  """\n  @spec set_value(Z.t, any) :: Z.t\n  def set_value(z, v) do\n    z.value(v)\n  end\n\n  @doc """\n  Replace the left child tree of the focus node. \n  """\n  @spec set_left(Z.t, BT.t) :: Z.t\n  def set_left(z, l) do\n    z.left(l)\n  end\n\n  @doc """\n  Replace the right child tree of the focus node. \n  """\n  @spec set_right(Z.t, BT.t) :: Z.t\n  def set_right(z, r) do\n    z.right(r)\n  end\nend	\N	\N	0	1	2014-05-21 01:37:21	2014-05-21 01:37:21	46456	zipper.exs
325	13	dba6663be533caf7f990fd0a	pending	clojure	phone-number	(ns phone\n  (:require [clojure.string :refer [join]]))\n\n(def invalid-number "0000000000")\n\n(defn number [s]\n  (let [digits (filter #(Character/isDigit %) s)\n        num-digits (count digits)]\n    (cond\n     (= num-digits 10) (join digits)\n     (and (= num-digits 11)\n          (= \\1 (first digits))) (join (rest digits))\n     :else invalid-number)))\n\n(defn area-code [s]\n  (join (take 3 (number s))))\n\n(defn pretty-print [s]\n  (let [n (number s)\n        [_ area-code local1 local2] (re-matches #"(\\d{3})(\\d{3})(\\d{4})" n)]\n    (format "(%s) %s-%s" area-code local1 local2)))	\N	\N	0	1	2014-05-26 01:55:14	2014-05-26 01:55:14	38779	phone-number.clj
326	13	99c29d79a9d8fc63a7e7f7b0	pending	javascript	phone-number	var PhoneNumber = function (inputPhoneNumber) {\n\n  this.number = function() {\n    var cleanNumber = inputPhoneNumber.replace(/[^\\d]/g,'');\n    if (cleanNumber.length === 10) {\n      return cleanNumber;\n    } else if (cleanNumber.length === 11 && cleanNumber.charAt(0) === '1') {\n      return cleanNumber.slice(1);\n    } else {\n      return '0000000000';\n    }\n  };\n\n  this.areaCode = function() {\n    return this.number().slice(0,3);\n  };\n\n  this.toString = function() {\n    return '(' + this.areaCode() + ')' + ' ' + this.number().slice(3,6) + '-' + this.number().slice(6);\n  };\n};	\N	\N	0	1	2014-06-13 17:29:28	2014-06-13 17:29:28	56432	phone-number_test.js
327	13	69a6999efc3103dbc4610065	pending	javascript	scrabble-score	function calculateScore(word) {\r\n\tvar points = {a: 1, b: 3, c: 3, d: 2, e: 1,\r\n\t\t\t\t\t\t\t\tf: 4, g: 2, h: 4, i: 1, j: 8,\r\n\t\t\t\t\t\t\t\tk: 5, l: 1, m: 3, n: 1, o: 1,\r\n\t\t\t\t\t\t\t\tp: 3, q: 10, r: 1, s: 1, t: 1,\r\n\t\t\t\t\t\t\t\tu: 1, v: 4, w: 4, x: 8, y: 4, z: 10},\r\n\t\t\tscore = 0;\r\n\r\n\tfor(var chr in word) {\r\n\t\tscore += points[word[chr].toLowerCase()];\r\n\t}\r\n\r\n\treturn score;\r\n}\r\n\r\nmodule.exports = calculateScore;	\N	\N	0	1	2014-07-04 12:23:18	2014-07-04 12:23:18	50248	scrabble-score.js
328	13	8b2c6139f60ef4461db16c56	pending	haskell	linked-list	module Deque\n  ( mkDeque\n  , push\n  , pop\n  , shift\n  , unshift\n  ) where\n\n\nimport Control.Arrow\nimport Control.Concurrent.MVar\n\n\n-- | Real-time deque (from "Purely Functional Data Structures" Chris Okasaki).\n-- | It's based on banker's deques, but every operation (cons/snoc/tail/init)\n-- | is O(1) non-amortized (sic!) complexity.\n-- |\n-- | These operations based on "lazy rebuilding" and "Lazy rebuilding" based\n-- | on that fact of lazy evaluation:\n-- |\n-- | let x = looooongCalculatedList\n-- | head x -- slow\n-- | head x -- fast\n-- |\n-- | Also\n-- |\n-- | let x = looooongCalculatedList\n-- | let z = a:b:x\n-- | head $ drop 3 z -- slow\n-- |\n-- | but\n-- | let x = looooongCalculatedList\n-- | let z = a:b:x\n-- | head looooongCalculatedList -- slow\n-- | head $ drop 3 z -- fast!\n-- |\n-- | so we can force calculation of lists step by step, not entirely.\n-- | Therefore there is no amortization; it's fully spreaded in every\n-- | call.\n--\ndata Deque a = Deque\n                 Int -- ^ number of elements in front part of queue.\n                     --   It's used for rebalancing queue.\n                 [a] -- ^ front part of queue.\n                 [a] -- ^ copy of previous list for step-by-step evaluation.\n                 Int -- ^ number of elements in rear part of queue.\n                     --   It's used for rebalancing queue.\n                 [a] -- ^ rear part of queue\n                 [a] -- ^ copy of previous list for step-by-step evaluation.\n                 deriving (Show)\n\n\nc = 3 -- balancing ratio. It may be 2 or 3\n\n\nempty :: Deque a\nempty = Deque 0 [] [] 0 [] []\n\n\n-- | Force evaluation head of list\nexec1 ::  [a] -> [a]\nexec1 [] = []\nexec1 (_:s) = s\n\n\n-- | Force evaluation 2 heads of list\nexec2 ::  [a] -> [a]\nexec2 s = exec1 $ exec1 s\n\n\n\n-- | Lazy step-by-step analog for "f ++ reverse (drop j r)"\nrotateDrop f j r\n  | j < c = rotateRev f (drop j r) []\n  | otherwise =\n      let (x:f') = f\n      in x:(rotateDrop f' (j - c) (drop c r))\n  where\n    rotateRev ::  [a] -> [a] -> [a] -> [a]\n    rotateRev [] r a = (reverse r) ++ a\n    rotateRev (x:f) r a =\n      x:(rotateRev f (drop c r) (reverse (take c r) ++ a))\n\n\n-- | Rebalancing front/rear if need\ncheck :: Deque a -> Deque a\ncheck q@(Deque lenf f _ lenr r _)\n  | lenf > c * lenr + 1 =\n    let i = (lenf + lenr) `div` 2\n        j = lenf + lenr - i\n        f' = take i f\n        r' = rotateDrop r i f\n    in Deque i f' f' j r' r' -- rebalance and forming lists (second f' & r') for step-by-step evaluation\n  | lenr > c * lenf + 1 =\n    let j = (lenf + lenr) `div` 2\n        i = lenf + lenr - j\n        r' = take j r\n        f' = rotateDrop f j r\n    in Deque i f' f' j r' r'\n  | otherwise = q\n\n\n-- | Append element at front\ndcons :: a -> Deque a -> Deque a\ndcons v (Deque lenf f sf lenr r sr) =\n  -- rebalance & force one step of list lazy evaluation\n  check $ Deque (lenf + 1) (v:f) (exec1 sf) lenr r (exec1 sr)\n\n\n-- | Tail of deque\ndtail :: Deque a -> Deque a\ndtail (Deque _    []     _  _    []    _) = error "Empty deque"\ndtail (Deque _    []     _  _    (_:_) _) = empty\ndtail (Deque lenf (_:f') sf lenr r     sr) =\n  -- rebalance & force two steps of list lazy evaluation\n  check $ Deque (lenf - 1) f' (exec2 sf) lenr r (exec2 sr)\n\n\n-- | First element of deque\ndhead :: Deque a -> Maybe a\ndhead (Deque _ []    _ _ []    _) = Nothing\ndhead (Deque _ []    _ _ (x:_) _) = Just x\ndhead (Deque _ (x:_) _ _ _     _) = Just x\n\n\n-- | Append element at rear\ndsnoc :: a -> Deque a -> Deque a\ndsnoc v (Deque lenf f sf lenr r sr) =\n  -- rebalance & force one step of list lazy evaluation\n  check $ Deque lenf f (exec1 sf) (lenr + 1) (v:r) (exec1 sr)\n\n\n-- | Last element of deque\ndlast :: Deque a -> Maybe a\ndlast (Deque _ []    _ _ []    _) = Nothing\ndlast (Deque _ (x:_) _ _ []    _) = Just x\ndlast (Deque _ _     _ _ (x:_) _) = Just x\n\n\n-- | First elements of deque (excepting last element)\ndinit :: Deque a -> Deque a\ndinit (Deque _    []    _  _    []     _) = error "Empty"\ndinit (Deque _    (_:_) _  _    []     _) = empty\ndinit (Deque lenf f     sf lenr (_:r') sr) =\n  -- rebalance & force two steps of list lazy evaluation\n  check $ Deque lenf f (exec2 sf) (lenr - 1) r' (exec2 sr)\n\n\n-- Interface for test\n\n\ntype MDeque a = MVar (Deque a)\n\n\nmkDeque :: IO (MDeque a)\nmkDeque = newMVar empty\n\n\npush :: MDeque a -> a -> IO ()\npush d v = modifyMVar_ d (return . dcons v)\n\n\npop :: MDeque a -> IO (Maybe a)\npop d = modifyMVar d (return . (dtail &&& dhead))\n\n\nunshift :: MDeque a -> a -> IO ()\nunshift d v = modifyMVar_ d (return . dsnoc v)\n\n\nshift :: MDeque a -> IO (Maybe a)\nshift d = modifyMVar d (return . (dinit &&& dlast))	\N	\N	0	1	2014-05-14 02:25:36	2014-05-14 02:25:36	51771	Deque.hs
329	13	713c4130ce84a80864142230	superseded	haskell	rna-transcription	-- DNA.hs\n--\n\nmodule DNA where\n\ntransformNucleotide :: Char -> Char\ntransformNucleotide c\n  | c == 'T' = 'U'\n  | otherwise = c\n\ntoRNA :: String -> String\ntoRNA = map transformNucleotide	\N	\N	0	2	2014-06-19 21:18:26	2014-06-19 21:18:26	48822	DNA.hs
330	13	34de410bad3d96c7a8b44ecc	superseded	haskell	rna-transcription	-- DNA.hs\n--\n\nmodule DNA where\n\ntransformNucleotide :: Char -> Char\ntransformNucleotide c\n  | c == 'T' = 'U'\n  | otherwise = c\n\ntoRNA :: String -> String\ntoRNA = map (\\c -> transformNucleotide c)	\N	\N	0	1	2014-06-25 19:45:31	2014-06-25 19:45:31	48822	DNA.hs
331	13	09e344547521aefa168c4ed2	pending	haskell	rna-transcription	-- DNA.hs\n--\n\nmodule DNA (toRNA) where\n\ntransformNucleotide :: Char -> Char\ntransformNucleotide c\n  | c == 'T' = 'U'\n  | otherwise = c\n\ntoRNA :: String -> String\ntoRNA = map transformNucleotide	\N	\N	0	3	2014-07-03 01:33:52	2014-07-03 01:33:52	48822	DNA.hs
332	40	919ede952da484747ac025db	pending	ruby	bob	class Bob\n\n  Responses = [\n               lambda {|x| "Fine. Be that way!" if  x.strip.empty? },\n               lambda {|x| "Woah, chill out!"   if x.upcase == x  },\n               lambda {|x| "Sure."              if  x[-1] == "?" },\n               lambda {|x| "Whatever." }\n              ]\n\n  def hey(msg)\n    Responses.inject(nil) {|a,n| a || n.call(msg)}\n  end\n\nend	\N	\N	0	1	2013-12-23 18:46:36	2013-12-23 18:46:36	41269	bob.rb
333	40	b5cf413e917369f46b29b66b	superseded	ruby	scrabble-score	class Scrabble\n\n  SCORES = { "a" => 1, "e" => 1, "i" => 1, "o" => 1, "u" => 1, "l" => 1, "n" => 1, "r" => 1, "s" => 1, "t" => 1,\n            "d" => 2, "g" => 2,\n            "b" => 3, "c" => 3, "m" => 3, "p" => 3,\n            "f" => 4, "h" => 4, "v" => 4, "w" => 4, "y" => 4,\n            "k" => 5,\n            "j" => 8, "x" => 8,\n            "q" => 10, "z" => 10 }\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    if word.is_a? String\n      @word = word.strip.downcase\n    else\n      @word = ""\n    end\n  end\n\n  def score\n    letters.inject(0) do |score, letter|\n      score += SCORES[letter]\n    end\n  end\n\n  private\n\n  def letters\n    @word.each_char\n  end\nend	\N	\N	0	1	2014-03-23 15:55:53	2014-03-23 15:55:53	46263	scrabble-score.rb
359	23	cf5ffde99cc3f879a4e047bb	superseded	ruby	raindrops	# class RainDrops\nclass Raindrops\n  def convert(n)\n    msg = ''\n    { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }.each do |k, e|\n      msg << e if n % k == 0\n    end\n    msg = n.to_s if msg == ''\n    msg\n  end\nend	\N	\N	0	1	2014-01-22 06:35:54	2014-01-22 06:35:54	49470	raindrops.rb
360	23	fd01c1546320e799afa869b7	pending	ruby	raindrops	class Raindrops\n  def convert(n)\n    msg = ''\n    ppp_hash = { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }\n    ppp_hash.each do |k, e|\n      msg << e if n.divisible_by? k\n    end\n    msg == '' ? n.to_s : msg\n  end\nend\nclass Fixnum\n  def divisible_by?(k)\n    self % k == 0\n  end\nend	\N	\N	0	2	2014-06-22 09:24:21	2014-06-22 09:24:21	49470	raindrops.rb
334	40	113b754b4620bed7eab86a30	pending	ruby	scrabble-score	class Scrabble\n\n  SCORES = { "a" => 1, "e" => 1, "i" => 1, "o" => 1, "u" => 1, "l" => 1, "n" => 1, "r" => 1, "s" => 1, "t" => 1,\n            "d" => 2, "g" => 2,\n            "b" => 3, "c" => 3, "m" => 3, "p" => 3,\n            "f" => 4, "h" => 4, "v" => 4, "w" => 4, "y" => 4,\n            "k" => 5,\n            "j" => 8, "x" => 8,\n            "q" => 10, "z" => 10 }\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    @word = normalize(word)\n  end\n\n  def score\n    letters.inject(0) do |score, letter|\n      score += SCORES[letter]\n    end\n  end\n\n  private\n\n  def normalize(word)\n    word.is_a?(String) ? word.strip.downcase : ""\n  end\n\n  def letters\n    @word.each_char\n  end\nend	\N	\N	0	2	2014-07-03 08:38:11	2014-07-03 08:38:11	46263	scrabble-score.rb
335	40	555a133745184c81a9d5f3ab	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isSpace, isUpper, isLower)\n\n-- |'responseFor' calculates the answer which Bob would give.\nresponseFor :: String -> String\nresponseFor s \n    | isEmpty      = "Fine. Be that way!"\n    | isLoud       = "Woah, chill out!"\n    | isQuestion   = "Sure."\n    | otherwise    = "Whatever."\n    where\n        isEmpty    = all isSpace s\n        isLoud     = (any isUpper s) && not (any isLower s)\n        isQuestion = last s == '?'	\N	\N	0	3	2014-02-10 16:16:28	2014-02-10 16:16:28	41366	bob.hs
336	40	9b56ffb7770b952affe66ac6	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor s \n    | isEmpty s        = "Fine. Be that way!"\n    | allCaps s        = "Woah, chill out!"\n    | isQuestion s     = "Sure."\n    | otherwise        = "Whatever."\n\nisEmpty :: String -> Bool\nisEmpty = all isSpace\n\nallCaps :: String -> Bool\nallCaps s = (any isUpper s) && not (any isLower s)\n\nisQuestion :: String -> Bool\nisQuestion = endsWith '?'\n\nendsWith :: Char -> String -> Bool\nendsWith x ys = startsWith x $ reverse ys\n\nstartsWith :: Char -> String -> Bool\nstartsWith x (y : ys) = x == y\nstartsWith x []       = False	\N	\N	0	1	2014-05-18 12:53:00	2014-05-18 12:53:00	41366	bob.hs
337	40	b12608b516140fbc3b486303	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor s \n    | isEmpty      = "Fine. Be that way!"\n    | isLoud       = "Woah, chill out!"\n    | isQuestion   = "Sure."\n    | otherwise    = "Whatever."\n    where\n        isEmpty    = all isSpace s\n        isLoud     = (any isUpper s) && not (any isLower s)\n        isQuestion = last s == '?'	\N	\N	0	2	2014-06-02 17:57:10	2014-06-02 17:57:10	41366	bob.hs
338	5	3ad7220e82a4b80063733b41	pending	javascript	bob	var Bob = module.exports = function Bob() {};\n\nBob.prototype.hey = function hey(conversationalInput) {\n\tvar possiblePunctuation = conversationalInput.slice(-1)\n\t,\tresponse = 'Whatever.';\n\n\tif ( conversationalInput === conversationalInput.toUpperCase() &&\n\t\tconversationalInput.match(/[A-Z]/) ) {\n\t\tresponse = 'Woah, chill out!';\n\t} else if ( possiblePunctuation === "?" ) {\n\t\tresponse = 'Sure.';\n\t} else if ( possiblePunctuation.match(/^\\s*$/) ) {\n\t\tresponse = 'Fine. Be that way!';\n\t}\n\n\treturn response;\n};	\N	\N	0	1	2014-05-16 10:56:11	2014-05-16 10:56:11	57381	bob.js
339	33	9308053290cde37119b01dda	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char (toUpper)    \n\nverse :: Int -> String\nverse n = (capitalize $ whatNow n) ++ ".\\n"  ++ whatToDoWith n ++ ".\\n"\n\nsing :: Int -> Int -> String\nsing s e = unlines $ map verse $ reverse [e..s]\n  \nwhatNow :: Int -> String\nwhatNow n = (bottlize n) ++ beerOnWall ++ ", " ++ (bottlize n) ++ " of beer"\n\ncapitalize :: String -> String\ncapitalize (x:xs) = (toUpper x):xs\ncapitalize [] = []\n\nwhatToDoWith :: Int -> String\nwhatToDoWith 0 = "Go to the store and buy some more, " ++ (bottlize 99) ++ beerOnWall\nwhatToDoWith 1 = "Take it down and pass it around, " ++ (bottlize 0) ++ beerOnWall\nwhatToDoWith n = "Take one down and pass it around, " ++ (bottlize (n-1)) ++ beerOnWall\n  \nbottlize :: Int -> String    \nbottlize 0 = "no more bottles"\nbottlize 1 = "1 bottle"\nbottlize n = (show n) ++ " bottles"\n\nbeerOnWall = " of beer on the wall"	\N	\N	0	1	2014-03-08 03:43:03	2014-03-08 03:43:03	51070	Beer.hs
340	33	79c49dcb62737988c7062266	pending	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char (toUpper)    \n\nverse :: Int -> String\nverse n = (capitalize $ whatNow n) ++ ".\\n"  ++ whatToDoWith n ++ ".\\n"\n\nsing :: Int -> Int -> String\nsing s e = unlines $ map verse $ [s,(s-1)..e]\n  \nwhatNow :: Int -> String\nwhatNow n = (bottlize n) ++ beerOnWall ++ ", " ++ (bottlize n) ++ " of beer"\n\ncapitalize :: String -> String\ncapitalize (x:xs) = (toUpper x):xs\ncapitalize [] = []\n\nwhatToDoWith :: Int -> String\nwhatToDoWith 0 = "Go to the store and buy some more, " ++ (bottlize 99) ++ beerOnWall\nwhatToDoWith 1 = "Take it down and pass it around, " ++ (bottlize 0) ++ beerOnWall\nwhatToDoWith n = "Take one down and pass it around, " ++ (bottlize (n-1)) ++ beerOnWall\n  \nbottlize :: Int -> String    \nbottlize 0 = "no more bottles"\nbottlize 1 = "1 bottle"\nbottlize n = (show n) ++ " bottles"\n\nbeerOnWall = " of beer on the wall"	\N	\N	0	2	2014-03-16 21:55:55	2014-03-16 21:55:55	51070	Beer.hs
341	33	7b8a7225f5bd5a4a19f6ac8a	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%100 != 0 || year%400 == 0)\n}	\N	\N	0	1	2014-04-25 18:47:02	2014-04-25 18:47:02	56585	leap.go
342	15	31c13370f46c059e1f722e1e	pending	go	anagram	package anagram\n\nimport (\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) (anagrams []string) {\n\tanagrams = make([]string, 0)\n\n\tsubject = strings.ToLower(subject)\n\tfreq := charFrequency(subject)\n\tfor _, s := range candidates {\n\t\ts = strings.ToLower(s)\n\t\tif subject != s && isFreqMatch(freq, charFrequency(s)) {\n\t\t\tanagrams = append(anagrams, s)\n\t\t}\n\t}\n\treturn anagrams\n}\n\nfunc charFrequency(word string) map[rune]int {\n\tfreq := make(map[rune]int)\n\tfor _, char := range word {\n\t\tfreq[char]++\n\t}\n\treturn freq\n}\n\nfunc isFreqMatch(m1, m2 map[rune]int) bool {\n\tif (len(m1) != len(m2)) {\n\t\treturn false\n\t}\n\n\tfor char, freq := range m1 {\n\t\tif freq2, ok := m2[char]; !ok || freq != freq2 {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}	\N	\N	0	1	2014-06-03 22:09:04	2014-06-03 22:09:04	50653	anagram.go
343	15	afa81d3fa26601a741792c9f	pending	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue, singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\n\ndata Tree a = Empty | Node a (Tree a) (Tree a) deriving (Eq, Show, Ord)\n\nbstValue :: Tree a -> a\nbstValue (Node x _ _) = x\nbstValue _ = error "Empty has no value"\n\nbstLeft :: Tree a -> Maybe (Tree a)\nbstLeft (Node _ l _) = Just l\nbstLeft _ = Nothing\n\nbstRight :: Tree a -> Maybe (Tree a)\nbstRight (Node _ _ r) = Just r\nbstRight _ = Nothing\n\ninsert :: Ord a => a -> Tree a -> Tree a\ninsert v Empty = singleton v\ninsert v (Node x l r) | x >= v = Node x (insert v l) r\n                      | x < v = Node x l (insert v r)\n                      | otherwise = error "Can't insert" -- not sure that this can ever happen, but makes the compiler quit complaining\n\nsingleton :: a -> Tree a\nsingleton v = Node v Empty Empty\n\nfromList :: Ord a => [a] -> Tree a\nfromList = foldl' (flip insert) Empty\n\ntoList :: Tree a -> [a]\ntoList Empty = []\ntoList (Node x l r) = toList l ++ x : toList r	\N	\N	0	2	2014-05-12 20:25:08	2014-05-12 20:25:08	45051	binary-search-tree.hs
344	15	a8e19a440b36426061d88359	superseded	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue, singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\n\ndata Tree a = Empty | Node a (Tree a) (Tree a) deriving (Eq, Show, Ord)\n\nbstValue :: Tree a -> a\nbstValue (Node x _ _) = x\nbstValue _ = error "Empty has no value"\n\nbstLeft :: Tree a -> Maybe (Tree a)\nbstLeft (Node _ l _) = Just l\nbstLeft _ = Nothing\n\nbstRight :: Tree a -> Maybe (Tree a)\nbstRight (Node _ _ r) = Just r\nbstRight _ = Nothing\n\ninsert :: Ord a => a -> Tree a -> Tree a\ninsert v Empty = singleton v\ninsert v (Node x l r) | x >= v = Node x (insert v l) r\n                      | x < v = Node x l (insert v r)\ninsert _ _ = error "Can't insert" -- not sure that this can ever happen, but makes the compiler quit complaining\n\nsingleton :: a -> Tree a\nsingleton v = Node v Empty Empty\n\nfromList :: Ord a => [a] -> Tree a\nfromList = foldl' (flip insert) Empty\n\ntoList :: Tree a -> [a]\ntoList Empty = []\ntoList (Node x l r) = toList l ++ x : toList r	\N	\N	0	1	2014-06-11 04:54:00	2014-06-11 04:54:00	45051	binary-search-tree.hs
345	15	d327110040513229edcb7d65	pending	ocaml	space-age	open Core.Std\n\ntype planet = Mercury | Venus | Earth | Mars\n            | Jupiter | Saturn | Neptune | Uranus\n\nlet earth_year = 31557600.\n\nlet age_on p i =\n  (function | Earth -> 1.\n            | Mercury -> 0.2408467 \n            | Venus -> 0.61519726\n            | Mars ->  1.8808158 \n            | Jupiter -> 11.862615\n            | Saturn -> 29.447498\n            | Uranus -> 84.016846\n            | Neptune -> 164.79132\n  ) p |> ( *. ) earth_year |> (/.) (Float.of_int i)	\N	\N	0	1	2014-03-24 16:44:29	2014-03-24 16:44:29	52307	space_age.ml
346	15	a3a3f88cd41e04fc22750a83	pending	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.List\nimport Data.Char\nimport Data.Map (Map, fromList)\nimport Control.Arrow ((&&&))\n\n-- I wish to register my philosophical objection to the requirement that\n-- wordCount return a Map.  While that is certainly one way to do it, it is by\n-- no means the only one.\n\nwordCount :: String -> Map String Int\nwordCount = fromList . map (head &&& length) . group . sort . words' . map toLower\n\n-- Named so because it's a variant of the builtin `words' function with\n-- slightly different semantics.\n\nwords' :: String -> [String]\nwords' "" = []\nwords' s | null s'   = []\n         | otherwise = s' : words' s''\n    where (s', s'') = span isAlphaNum . dropWhile (not . isAlphaNum) $ s	\N	\N	0	1	2014-07-14 05:18:31	2014-07-14 05:18:31	53028	WordCount.hs
347	15	8be469dd28f512c9f0b9974a	pending	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    hash = Hash.new(0)\n    words = @phrase.downcase.scan(/[\\w']+/).each { |word| hash[word] += 1}\n    hash\n  end\nend	\N	\N	0	1	2014-03-31 07:56:16	2014-03-31 07:56:16	38087	word-count.rb
348	15	80ed1d68ea8426ba0155bb6a	superseded	python	bob	class Bob:\n  """Bob"""\n\n  def hey(self, hey):\n    if hey.isupper():\n      return 'Woah, chill out!'\n    elif hey.isspace() or len(hey) == 0:\n      return 'Fine. Be that way!'\n    elif hey[-1] == '?':\n      return 'Sure.'\n    return 'Whatever.'	\N	\N	0	1	2014-05-02 19:32:52	2014-05-02 19:32:52	38930	bob.py
349	15	526f68eb82d546abb6d83f5e	pending	python	bob	class Bob:\n  """Bob"""\n\n  def hey(self, message):\n    if message.isupper():\n      return 'Woah, chill out!'\n    elif message.isspace() or len(message) == 0:\n      return 'Fine. Be that way!'\n    elif message[-1] == '?':\n      return 'Sure.'\n    return 'Whatever.'	\N	\N	0	2	2014-06-02 23:17:55	2014-06-02 23:17:55	38930	bob.py
350	17	9b58c414916b0573d1b8dae3	pending	perl5	pig-latin	package PigLatin;\n\nuse strict;\nuse warnings;\n\nsub translate {\n    my $input = shift;\n\n    return join " ", map { translate_word($_) } split ' ', $input;\n}\n\nsub is_vowel_word {\n    my $word = shift;\n\n    my $vowel = join "|", qw(a e i o u y xr);\n    return if $word =~ /^ye/;\n    return $word =~ /^($vowel)/;\n}\n\nsub translate_word {\n    my $word = shift;\n\n    my $consonant = join "|", "ch", "squ", "qu", "thr", "th", "sch", 'a'..'z';\n\n    if( ! is_vowel_word($word) ) {\n\t$word =~ s/^($consonant)(.*)$/$2$1/;\n    } \n\n    return $word . "ay";\n}\n\n1;	\N	\N	0	1	2014-07-18 12:54:49	2014-07-18 12:54:49	56958	PigLatin.pm
351	23	b4caba13783965340b201a83	pending	elixir	leap	defmodule Year do\n  defp has_factor?(dividend, divisor), do: rem(dividend, divisor) == 0\n\n  def leap_year?(year) do\n    has_factor?(year, 400) || (has_factor?(year, 4) && ! has_factor?(year, 100))\n  end\n\nend	\N	\N	0	1	2014-01-31 17:36:59	2014-01-31 17:36:59	46010	leap.exs
352	23	109172d5147870de73ca8317	pending	ruby	bob	class Bob\n  def hey(greeting)\n    responses = [\n      {evaluation: method(:_empty?), response: 'Fine. Be that way!'},\n      {evaluation: method(:_shouting?), response: 'Woah, chill out!'},\n      {evaluation: method(:_question?), response: 'Sure.'},\n      {evaluation: method(:_whatever?), response: 'Whatever.'}\n    ]\n\n    responses.find { |response_maps| response_maps[:evaluation].call(greeting) }[:response]\n  end\n\n  private\n\n  def _question?(greeting)\n    greeting.end_with?('?')\n  end\n\n  def _shouting?(greeting)\n    greeting.upcase =~ /[A-Z]/ && greeting == greeting.upcase\n  end\n\n  def _empty?(greeting)\n    greeting.strip.empty?\n  end\n\n  def _whatever?(greeting)\n    true\n  end\nend	\N	\N	0	4	2013-12-26 23:34:05	2013-12-26 23:34:05	43943	bob.rb
353	23	a1e38e087a2d490231e0336e	superseded	ruby	bob	class Bob\n  def hey(greeting)\n    responses = [\n      {evaluation: ->(greeting) { greeting.strip.empty? }, response: 'Fine. Be that way!'},\n      {evaluation: ->(greeting) { greeting.upcase =~ /[A-Z]/ && greeting == greeting.upcase }, response: 'Woah, chill out!'},\n      {evaluation: ->(greeting) { greeting.chars.to_a.last == '?' }, response: 'Sure.'},\n      {evaluation: ->(greeting) { true }, response: 'Whatever.'}\n    ]\n\n    responses.find { |response_maps| response_maps[:evaluation].call(greeting) }[:response]\n  end\nend	\N	\N	0	1	2014-01-05 06:45:11	2014-01-05 06:45:11	43943	bob.rb
354	23	3b33ddb178d07d14f768b584	superseded	ruby	bob	class Bob\n  def hey(greeting)\n    responses = [\n      {evaluation: ->(greeting) { _empty?(greeting) }, response: 'Fine. Be that way!'},\n      {evaluation: ->(greeting) { _shouting?(greeting) }, response: 'Woah, chill out!'},\n      {evaluation: ->(greeting) { _question?(greeting) }, response: 'Sure.'},\n      {evaluation: ->(greeting) { true }, response: 'Whatever.'}\n    ]\n\n    responses.find { |response_maps| response_maps[:evaluation].call(greeting) }[:response]\n  end\n\n  def _question?(greeting)\n    greeting.end_with?('?')\n  end\n\n  def _shouting?(greeting)\n    greeting.upcase =~ /[A-Z]/ && greeting == greeting.upcase\n  end\n\n  def _empty?(greeting)\n    greeting.strip.empty?\n  end\nend	\N	\N	0	2	2014-02-13 23:55:39	2014-02-13 23:55:39	43943	bob.rb
355	23	afb86ab35846e817109f41fb	superseded	ruby	bob	class Bob\n  def hey(greeting)\n    responses = [\n      {evaluation: ->(greeting) { _empty?(greeting) }, response: 'Fine. Be that way!'},\n      {evaluation: ->(greeting) { _shouting?(greeting) }, response: 'Woah, chill out!'},\n      {evaluation: ->(greeting) { _question?(greeting) }, response: 'Sure.'},\n      {evaluation: ->(greeting) { true }, response: 'Whatever.'}\n    ]\n\n    responses.find { |response_maps| response_maps[:evaluation].call(greeting) }[:response]\n  end\n\n  private\n\n  def _question?(greeting)\n    greeting.end_with?('?')\n  end\n\n  def _shouting?(greeting)\n    greeting.upcase =~ /[A-Z]/ && greeting == greeting.upcase\n  end\n\n  def _empty?(greeting)\n    greeting.strip.empty?\n  end\nend	\N	\N	0	3	2014-03-05 05:16:08	2014-03-05 05:16:08	43943	bob.rb
361	23	26115e58181cee48a2b5c713	pending	elixir	grade-school	defmodule School do\n\n  def add(school, student, grade) do\n    HashDict.put(school, grade, grade(school, grade) ++ [student])\n  end\n\n  def sort(school) do\n    school |> Enum.map(&sort_grade/1) |> HashDict.new\n  end\n\n  defp sort_grade({ grade, students }) do\n    { grade, Enum.sort(students) }\n  end\n\n  def grade(school, grade) do\n    HashDict.get(school, grade, [])\n  end\nend	\N	\N	0	1	2014-03-12 14:08:15	2014-03-12 14:08:15	37906	grade-school.exs
362	23	f347fe96f4491150a62be353	pending	ruby	gigasecond	class Gigasecond\n\tdef initialize(date)\n\t\t@date = date\n\tend\n\n\tdef date\n\t\tseconds = 1000000000\n\t\tmonths = 380.265\n        time = @date.to_time + seconds\n        Date.parse(time.strftime('%Y/%m/%d'))\n\tend\nend	\N	\N	0	1	2013-12-15 18:16:22	2013-12-15 18:16:22	40689	gigasecond.rb
363	23	8a0cb1cd11074ceb14a94c42	pending	haskell	ocr-numbers	{-# OPTIONS_GHC -Wall #-}\nmodule OCR( convert ) where\nimport Data.Map( Map, findWithDefault, fromList )\nimport Data.List( transpose, intercalate )\nimport Data.List.Split( chunksOf, splitOn )\n\nsegment :: [String] -> [[String]]\nsegment = map (map concat . transpose) . chunksOf 4 . map (chunksOf 3)\n\nconvert :: String -> String\nconvert = init . intercalate "," . map (map recog) . segment . splitOn "\\n"\n\ndigits :: [String]\ndigits = [ " _     _  _     _  _  _  _  _ "\n         , "| |  | _| _||_||_ |_   ||_||_|"\n         , "|_|  ||_  _|  | _||_|  ||_| _|"\n         , "                              " ]\n\ncog :: Map String Char\ncog = fromList $ zip (head (segment digits)) ['0'..'9'] \n\nrecog :: String -> Char\nrecog s = findWithDefault '?' s cog 	\N	\N	0	1	2014-02-27 06:32:53	2014-02-27 06:32:53	54714	OCR.hs
364	23	96ad86ad302c4b42b017e8e3	pending	elixir	rna-transcription	defmodule DNA do\n  @doc """\n  Transcribes a character list representing DNA nucleotides to RNA\n\n  ## Examples\n\n  iex> DNA.to_rna('ACTG')\n  'UGAC'\n  """\n  @spec to_rna([char]) :: [char]\n  def to_rna(dna) do\n    Enum.reduce(dna, '', &(&2 ++ map_nucleotide(&1)))\n  end\n\n  def map_nucleotide(n) do\n    case [n] do\n      'G' -> 'C'\n      'C' -> 'G'\n      'T' -> 'A'\n      'A' -> 'U'\n    end\n  end\nend	\N	\N	0	1	2014-01-04 21:34:42	2014-01-04 21:34:42	58928	dna.exs
365	23	04f9187590ccf083072ef77b	superseded	elixir	bob	defmodule Teenager do\n\n  import String\n\n  def hey(msg) do\n    cond do\n      empty?(msg)    -> "Fine. Be that way!"\n      shouting?(msg) -> "Woah, chill out!"\n      question?(msg) -> "Sure."\n      true           -> "Whatever."\n    end\n  end\n\n  defp shouting?(msg), do: msg == upcase(msg)\n  defp question?(msg), do: ends_with?(msg, "?")\n  defp empty?(msg),    do: strip(msg) == ""\nend	\N	\N	0	1	2013-12-15 12:06:28	2013-12-15 12:06:28	42207	bob.exs
366	23	dd72774630c549915ab8d5bc	pending	elixir	bob	defmodule Teenager do\n\n  import String, only: [upcase: 1, ends_with?: 2, strip: 1]\n\n  def hey(msg) do\n    cond do\n      empty?(msg)    -> "Fine. Be that way!"\n      shouting?(msg) -> "Woah, chill out!"\n      question?(msg) -> "Sure."\n      true           -> "Whatever."\n    end\n  end\n\n  defp shouting?(msg), do: msg == upcase(msg)\n  defp question?(msg), do: ends_with?(msg, "?")\n  defp empty?(msg),    do: strip(msg) == ""\nend	\N	\N	0	2	2014-02-07 17:31:44	2014-02-07 17:31:44	42207	bob.exs
367	23	6e778820a8b53a7ad339fd7d	pending	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\ndata Allergen = Eggs \n              | Peanuts \n              | Shellfish\n              | Strawberries\n              | Tomatoes\n              | Chocolate\n              | Pollen\n              | Cats\n              deriving (Eq, Enum, Show)\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo allergen code = allergen `elem` allergies code\n\nallergies :: Int -> [Allergen]\nallergies code = map fst . filter snd $ zip (enumFrom Eggs) mask\n  where mask = map toEnum (bitmask code)\n\nbitmask :: Int -> [Int]\nbitmask 0 = []\nbitmask n = r : bitmask d where (d, r) = divMod n 2	\N	\N	0	1	2014-04-04 17:02:42	2014-04-04 17:02:42	59658	Allergies.hs
368	23	c495a85f3959fb44b1e43882	pending	ruby	series	class Series\n  def initialize(digit_string)\n    @digit_string = digit_string\n  end\n\n  def digits\n    @digits ||= @digit_string.scan(/\\d/).map(&:to_i)\n  end\n\n  def slices(n)\n    raise ArgumentError, "slices exceed number of digits!" if n > digits.length\n\n    groups = digits.length - n + 1\n    groups.times.map { |i| digits.slice(i, n) }\n  end\nend	\N	\N	0	1	2014-02-03 19:40:30	2014-02-03 19:40:30	48028	series.rb
369	23	cb28823833f430c50cc9d8f1	superseded	ruby	hamming	class Hamming\n    @@distancia=0\n  \n    def Hamming.compute(primerCodigo,segundoCodigo)\n        \n        if primerCodigo.length==segundoCodigo.length\n            #Recorres ambas cadenas y comparar caracter por caracter, y si hay diferencia sumarla al atributo distancia.\n            for i in 0..primerCodigo.length-1\n                if primerCodigo[i]!=segundoCodigo[i]\n                    @@distancia+= 1\n                end\n            end\n        end\n        return @@distancia\n    end\nend	\N	\N	0	1	2013-12-11 03:15:21	2013-12-11 03:15:21	49657	hamming.rb
370	23	a5cd32807e950315b244221f	pending	ruby	hamming	# Clase diferencia Hamming\nclass Hamming\n  def self.compute(primerCodigo , segundoCodigo)\n    if primerCodigo.length == segundoCodigo.length\n    # Recorres ambas cadenas y comparar caracter por caracter, y si hay\n    # diferencia sumarla al atributo distancia.\n      (0..primerCodigo.length - 1).each do |i|\n        @distancia += 1 unless primerCodigo[i] == segundoCodigo[i]\n      end\n    end\n    @distancia = 0 if @distancia.nil?\n  end\nend	\N	\N	0	2	2013-12-27 21:55:36	2013-12-27 21:55:36	49657	hamming.rb
371	23	0e5cc75af22852dc26e7e7a2	pending	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, fromList)\n\nvalidDNANucleotides :: String\nvalidDNANucleotides = "ATCG"\n\n\nisValidNucleotide :: Char -> Bool\nisValidNucleotide = flip elem $ validDNANucleotides ++ "U"\n\ncount :: Char -> String -> Integer\ncount c1 | isValidNucleotide c1 = foldr (\\c2 i -> i + if c1 == c2 then 1 else 0) 0\n         | otherwise = error $ "invalid nucleotide " ++ show c1  \n\nnucleotideCounts :: String -> Map Char Integer\nnucleotideCounts s = fromList $ map (\\n -> (n, count n s)) validDNANucleotides	\N	\N	0	1	2014-04-15 05:55:27	2014-04-15 05:55:27	56889	DNA.hs
372	23	722b41f6ddbc171276498d47	pending	ruby	circular-buffer	class CircularBuffer\n  class BufferEmptyException < StandardError; end\n  class BufferFullException < StandardError; end\n  def initialize length\n    @length = length\n    @read_head = @write_head = 0\n    @buffer = Array.new @length\n  end\n  \n  def write data\n    fail BufferFullException if full?\n    write! data\n  end\n  \n  def write! data\n    write_to_buffer data\n    self\n  end\n  \n  def read\n    fail BufferEmptyException if empty?\n    @buffer[@read_head].tap do\n      @buffer[@read_head] = nil\n      incr_read_head\n    end\n  end\n  \n  def clear\n    @buffer = Array.new @length\n  end\n  \n  private\n  \n  def write_to_buffer data\n    return if data.nil?\n    incr_read_head if overwriting?\n    @buffer[@write_head] = data\n    incr_write_head\n  end\n  \n  def incr_read_head\n    @read_head = (@read_head+1) % @length\n  end\n  \n  def incr_write_head\n    @write_head = (@write_head+1) % @length\n  end\n  \n  def overwriting?\n    full? && @write_head == @read_head\n  end\n  \n  def empty?\n    @buffer.compact.empty?\n  end\n  \n  def full?\n    @buffer.all?\n  end\nend	\N	\N	0	1	2013-12-08 01:49:55	2013-12-08 01:49:55	56343	circular_buffer.rb
373	23	6c9eb446d2eb9ec446f1027d	pending	ruby	scrabble-score	# Letter                           Value\n# A, E, I, O, U, L, N, R, S, T       1\n# D, G                               2\n# B, C, M, P                         3\n# F, H, V, W, Y                      4\n# K                                  5\n# J, X                               8\n# Q, Z                               10\nclass Scrabble\n  SCORES = {'a'=>1, 'b'=>3, 'c'=>3, 'd'=>2, 'e'=>1, 'f'=>4, 'g'=>2, 'h'=>4, 'i'=>1, 'j'=>8, 'k'=>5, 'l'=>1, 'm'=>3, 'n'=>1, 'o'=>1, 'p'=>3, 'q'=>10, 'r'=>1, 's'=>1, 't'=>1, 'u'=>1, 'v'=>4, 'x'=>8, 'y'=>4, 'z'=>10}\n\n  def initialize word\n    @word = word ? word.gsub(/\\s+/, "") : ""\n    @score = 0\n  end\n\n  def score\n    return @score unless @word\n    @word.each_char do |c|\n      @score += SCORES[c.downcase]\n    end\n    @score\n  end\n\n  def self.score word\n    Scrabble.new(word).score\n  end\nend	\N	\N	0	1	2014-05-09 08:32:31	2014-05-09 08:32:31	52250	scrabble.rb
374	23	08e32a694e42db9962998eff	pending	python	nucleotide-count	class DNA:\r\n\tdef __init__(self, DNAString):\r\n\t\tself.DNAString = DNAString\r\n\t\t\r\n\tdef nucleotide_counts(self):\r\n\t\tcounts = {'A':0, 'T':0, 'C':0, 'G':0}\r\n\t\t\r\n\t\tfor n in self.DNAString:\r\n\t\t\tif n in counts:\r\n\t\t\t\tcounts[n] += 1\r\n\r\n\t\treturn counts\r\n\t\t\r\n\tdef count(self, nucleotide):\r\n\t\tif (nucleotide == 'U'): return 0\r\n\t\t\r\n\t\tif not (nucleotide in "ACGT"):\r\n\t\t\traise ValueError(nucleotide + ' is not a nucleotide.')\r\n\t\t\r\n\t\treturn self.nucleotide_counts()[nucleotide]	\N	\N	0	1	2014-02-20 09:09:37	2014-02-20 09:09:37	58937	dna.py
375	23	b0cb8446dced1cfbb9f5004f	pending	coffeescript	bob	class Bob\n  hey: (input) ->\n    (response for m in @matchers when response = m(input))[0]\n\n  matchers: [\n    (input) -> 'Fine. Be that way!' unless input.match(/\\S/)\n    (input) -> 'Woah, chill out!' if input.toUpperCase() == input and input.match(/[a-zA-Z]/)\n    (input) -> 'Sure.' if input.slice(-1) is "?"\n    (input) -> 'Whatever.'\n  ]\n\n  module.exports = Bob	\N	\N	0	1	2014-02-27 22:49:29	2014-02-27 22:49:29	58420	bob.coffee
376	23	9bdbfdfb579abf93975d6bc7	pending	python	matrix	class Matrix(object):\n    def __init__(self, descr):\n        self.values = [[int(v) for v in line.split()] for line in descr.split('\\n')]\n        nrows = len(self.values)\n        ncols = 0 if nrows == 0 else len(self.values[0])\n        self.shape = (nrows, ncols)\n\n    def __getitem__(self, (i, j)):\n        return self.values[i][j]\n\n    @property\n    def rows(self):\n        return self.values\n\n    @property\n    def columns(self):\n        return [[self[j, i] for j in xrange(self.shape[0])] for i in xrange(self.shape[1])]	\N	\N	0	1	2014-06-10 02:30:24	2014-06-10 02:30:24	52999	matrix.py
377	23	d76c7f56e44aba499cf8510b	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> tokenize |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce(tokens, HashDict.new, &increment_count/2)\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp tokenize phrase do\n    (replace phrase, %r{[^A-Za-z0-9]+}, " ") |> split\n  end\n\nend	\N	\N	0	1	2014-01-26 06:46:47	2014-01-26 06:46:47	39271	word-count.exs
378	23	0d258bcc60a3dc418808bc4b	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> tokenize |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce(tokens, HashDict.new, &increment_count/2)\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp tokenize phrase do\n    replace(phrase, %r{[^A-Za-z0-9]+}, " ") |> split\n  end\n\nend	\N	\N	0	2	2014-02-01 02:17:34	2014-02-01 02:17:34	39271	word-count.exs
379	23	adf51258c3e944daab03ce7b	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> strip_punctuation |> downcase |> split |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce tokens, HashDict.new, &increment_count/2\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp strip_punctuation phrase do\n    replace phrase, %r{[^A-Za-z0-9]+}, " "\n  end\n\nend	\N	\N	0	3	2014-03-04 14:22:33	2014-03-04 14:22:33	39271	word-count.exs
380	23	c52c98ed3c9de3fb79e3f529	superseded	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> sanitize |> split |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce tokens, HashDict.new, &increment_count/2\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, fn (x) -> x + 1 end\n  end\n\n  defp sanitize phrase do\n    replace phrase, %r{[^A-Za-z0-9]+}, " "\n  end\n\nend	\N	\N	0	4	2014-03-09 16:33:50	2014-03-09 16:33:50	39271	word-count.exs
381	23	4029867c7f12899a23a67431	pending	elixir	word-count	defmodule Words do\n  import Enum,     only: [reduce: 3]\n  import HashDict, only: [update: 4]\n  import String,   only: [downcase: 1, replace: 3, split: 1]\n\n  def count phrase do\n    phrase |> downcase |> sanitize |> split |> aggregate\n  end\n\n  defp aggregate tokens do\n    reduce tokens, HashDict.new, &increment_count/2\n  end\n\n  defp increment_count token, counts do\n    update counts, token, 1, (&1 + 1)\n  end\n\n  defp sanitize phrase do\n    replace phrase, %r{[^A-Za-z0-9]+}, " "\n  end\n\nend	\N	\N	0	5	2014-04-19 12:45:14	2014-04-19 12:45:14	39271	word-count.exs
382	23	5312b95b73a3b7fb0d5bd566	superseded	elixir	anagram	defmodule Anagram do\n  @doc """\n  Returns all candidates that are anagrams of, but not equal to, 'base'.\n  """\n  @spec match(String.t, [String.t]) :: [String.t]\n  def match(base, candidates) do\n  \tlowbase = String.downcase(base)\n  \tlist = lowbase |> String.graphemes |> Enum.sort \n    Enum.reduce(candidates, [], \n    \t        fn(x, acc) ->\n    \t        \tif ((String.downcase(x) != lowbase)) and\n    \t        \t\t(x |> String.downcase |> String.graphemes |> Enum.sort === list) do \n    \t        \t   \n                      [x|acc]\n                    else\n                      acc\n                    end\n    \t        end\n    \t        ) |> Enum.reverse\n  end\nend	\N	\N	0	1	2014-01-15 07:06:21	2014-01-15 07:06:21	54503	anagram.exs
383	23	d6adc8bdce32e994f2838d56	pending	elixir	anagram	defmodule Anagram do\n  @doc """\n  Returns all candidates that are anagrams of, but not equal to, 'base'.\n  """\n  @spec match(String.t, [String.t]) :: [String.t]\n  def match(base, candidates) do\n  \tlowbase = String.downcase(base)\n  \tlist = to_unicode_list(base)\n    Enum.filter candidates,\n    \t        fn(x) ->\n    \t        \tString.downcase(x) !== lowbase and list === to_unicode_list(x)\n    \t        end\n  end\n\n  defp to_unicode_list(str) do\n  \tstr \n  \t  |> String.downcase\n  \t  |> String.graphemes\n  \t  |> Enum.sort\n  end\nend	\N	\N	0	2	2014-02-03 16:29:50	2014-02-03 16:29:50	54503	anagram.exs
395	23	446d90553f913097796ec118	pending	ruby	clock	class Clock\r\n\r\n\tdef initialize(min)\r\n\t\t@minutes = min\r\n\tend\r\n\r\n    def self.at(hour, minute=0)\r\n\t\tnew(hour*60 + minute)\r\n\tend\r\n\r\n\tdef to_s\r\n\t\t@minutes %= (60*24)\r\n\t\t"%02d:%02d" % [ @minutes/60, @minutes%60 ]\r\n\tend\r\n\r\n\tdef +(num)\r\n\t\tClock.new(@minutes + num)\r\n\tend\r\n\r\n\tdef -(num)\r\n\t\tself + -num\r\n\tend\r\n\r\n\tdef ==(time)\r\n\t\tto_s == time.to_s\r\n\tend\r\n\r\nend	\N	\N	0	2	2014-01-17 09:58:35	2014-01-17 09:58:35	51962	clock.rb
384	23	2b70a2d1422ed4a7d6862239	superseded	haskell	phone-number	module Phone (number, prettyPrint, areaCode) where\r\n\r\nimport Data.Char\r\nimport Text.Printf\r\n\r\nnumber :: String -> String\r\nnumber input =\r\n    case (digits, length digits) of\r\n        ('1':rest, 11) -> rest\r\n        (_, 10) -> digits\r\n        _ -> invalid\r\n    where digits = filter isDigit input\r\n          invalid = replicate 10 '0'\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint input =\r\n    printf "(%s) %s-%s" area exchange subscriber\r\n    where area = slice 0 3 digits\r\n          exchange = slice 3 3 digits\r\n          subscriber = slice 6 4 digits\r\n          slice start len = take len . drop start\r\n          digits = number input\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r	\N	\N	0	1	2013-12-03 15:22:52	2013-12-03 15:22:52	54993	Phone.hs
385	23	1090607f9e35c70693c79e9e	pending	haskell	phone-number	module Phone (number, prettyPrint, areaCode) where\r\n\r\nimport Data.Char\r\nimport Text.Printf\r\n\r\nnumber :: String -> String\r\nnumber input =\r\n    case (digits, length digits) of\r\n        ('1':rest, 11) -> rest\r\n        (_, 10) -> digits\r\n        _ -> invalid\r\n    where digits = filter isDigit input\r\n          invalid = replicate 10 '0'\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint input =\r\n    printf "(%s) %s-%s" area exchange subscriber\r\n    where (area, rest) = splitAt 3 $ number input\r\n          (exchange, subscriber) = splitAt 3 rest\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r	\N	\N	0	2	2013-12-15 17:32:56	2013-12-15 17:32:56	54993	Phone.hs
386	23	eb14435e4c690f211bedb340	superseded	python	word-count	#!/usr/bin/env python\n# encoding=utf-8\n\nfrom string import maketrans, punctuation\n\n\ndef normalize(string):\n    """Take a string, strip punctuation and turn it to lowercase"""\n\n    trans_table = maketrans("", "")\n    "create an empty translation table"\n\n    result = string.translate(trans_table, punctuation)\n    "does no translation, but strips all punctuation"\n\n    result = result.lower()\n    return result\n\n\nclass Phrase(object):\n    """Phrase class"""\n\n    def __init__(self, phrase):\n        self.phrase = normalize(phrase)\n\n    def word_count(self):\n        """Return a dictionary with words as keys and word counts as values"""\n        return {word: self.phrase.split().count(word)\n                for word in self.phrase.split()\n                }	\N	\N	0	2	2013-12-02 19:28:29	2013-12-02 19:28:29	43982	word-count.py
387	23	8c71ee5461087f5a7445dca7	superseded	python	word-count	#!/usr/bin/env python\n# encoding=utf-8\n\nfrom string import maketrans, punctuation\n\n\ndef normalize(string):\n    """Take a string, strip punctuation and turn it to lowercase"""\n\n    trans_table = maketrans("", "")\n    "create an empty translation table"\n\n    result = string.translate(trans_table, punctuation)\n    "does no translation, but strips all punctuation"\n\n    result = result.lower()\n    return result\n\n\nclass Phrase(object):\n    """Phrase class"""\n\n    def __init__(self, phrase):\n#        super(Phrase, self).__init__()\n        self.phrase = normalize(phrase)\n\n    def word_count(self):\n        """Return a dictionary with words as keys and word counts as values"""\n        return {word: self.phrase.split().count(word)\n                for word in self.phrase.split()\n                }	\N	\N	0	1	2014-01-16 13:24:07	2014-01-16 13:24:07	43982	word-count.py
388	23	767b1198c6158c984829852c	pending	python	word-count	#!/usr/bin/env python\n# encoding=utf-8\n\nfrom string import maketrans, punctuation\nfrom collections import Counter\n\ndef normalize(phrase):\n    """Take a string, strip punctuation and turn it to lowercase"""\n\n    trans_table = maketrans("", "")\n    "create an empty translation table"\n\n    result = phrase.translate(trans_table, punctuation)\n    "does no translation, but strips all punctuation"\n\n    result = result.lower()\n    return result\n\n\nclass Phrase(object):\n    """Phrase class"""\n\n    def __init__(self, phrase):\n        self.phrase = normalize(phrase)\n\n    def word_count(self):\n        """Return a dictionary with words as keys and word counts as values"""\n        return Counter(self.phrase.split())	\N	\N	0	3	2014-05-17 10:34:14	2014-05-17 10:34:14	43982	word-count.py
389	23	dc429a976ec37ace496412fd	pending	ruby	leap	require 'date'\n\nclass Year\n  def self.leap?(year)\n    if year % 4 == 0 && year % 100 == 0 && year % 400 == 0\n      return true\n    end\n    if year % 4 == 0 && year % 100 == 0\n      return false\n    end\n    if year % 4 == 0\n      return true\n    end\n  end\nend	\N	\N	0	1	2013-12-21 14:08:03	2013-12-21 14:08:03	52755	leap_year.rb
390	23	e615d425040619ea774f5a5b	pending	go	rna-transcription	package strand\n\nimport "strings"\n\nfunc translate(input rune) rune {\n\tswitch input {\n\tcase 'C':\n\t\treturn 'G'\n\tcase 'G':\n\t\treturn 'C'\n\tcase 'A':\n\t\treturn 'U'\n\tcase 'T':\n\t\treturn 'A'\n\t}\n\tpanic("Invalid nucleic acid")\n}\n\nfunc ToRna(input string) string {\n\treturn strings.Map(translate, input)\n}	\N	\N	0	1	2014-03-16 07:50:05	2014-03-16 07:50:05	53263	strand.go
391	23	3e666f0cfdbfb45575108c18	pending	elixir	prime-factors	defmodule PrimeFactors do\n  @doc """\n  Compute the prime factors for 'number'.\n\n  The prime factors are prime numbers that when multiplied give the desired\n  number.\n\n  The prime factors of 'number' will be ordered lowest to highest. \n  """\n  @spec for(pos_integer) :: [pos_integer]\n  def for(number) do\n    factors(number, prime_candidates())\n  end\n\n  defp factors(1, _), do: []\n  defp factors(number, fs=[factor | _]) when rem(number, factor) == 0 do\n    [factor | factors(div(number, factor), fs)]\n  end\n  defp factors(number, [_ | fs]), do: factors(number, fs)\n  defp factors(number, lazyfn), do: factors(number, lazyfn.())\n\n  # At first, it may appear to be insane to (ab)use improper lists, but this is\n  # actually a well known and even officially documented technique in Erlang.\n  # http://www.erlang.org/documentation/doc-5.8/doc/programming_examples/funs.html#id2259930\n  def prime_candidates(), do: [2, 3 | next_candidate(6)]\n  def next_candidate(n) do\n    [n-1, n+1 | fn () -> next_candidate(n+6) end]\n  end\nend	\N	\N	0	1	2013-12-07 02:08:07	2013-12-07 02:08:07	42810	prime-factors.exs
392	23	6ba3642241cce025d0ab13d6	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA s = map mapNucleotide s\n\nmapNucleotide :: Char -> Char\nmapNucleotide 'T' = 'U'\nmapNucleotide c = c	\N	\N	0	1	2013-12-17 04:16:09	2013-12-17 04:16:09	39555	rna-transcription.hs
393	23	71fd8048b080a9e0b3b5bb6c	pending	go	binary	package binary\n\nimport "math"\n\nfunc ToDecimal(binary string) (decimal int) {\n\thighestDigitIndex := len(binary) - 1\n\tfor i := highestDigitIndex; i >= 0; i-- {\n\t\tdigit := string(binary[i])\n\t\tif isInvalidInput(digit) {\n\t\t\tdecimal = 0\n\t\t\tbreak\n\t\t}\n\t\tif digit == "1" {\n\t\t\tdecimal += int(math.Exp2(float64(highestDigitIndex - i)))\n\t\t}\n\t}\n\treturn decimal\n}\n\nfunc isInvalidInput(i string) bool {\n\treturn !(i == "1" || i == "0")\n}	\N	\N	0	1	2013-12-12 20:57:14	2013-12-12 20:57:14	54869	binary.go
394	23	c2c51a576876d4788083f1d3	superseded	ruby	clock	class Clock\r\n\r\n    def self.at(hour, minute=0)\r\n\t\thour*60 + minute\r\n\tend\r\n\r\n\tdef self.string(num)\r\n\t\tminutes = num % (60*24)\r\n\t\thours = minutes / 60\r\n\t\tminutes %= 60\r\n\t\thours = (hours >= 10 ? 1 : 1)\r\n\t\tminutes = (minutes >= 10 ? 1 : 1)\r\n\t\treturn "#{hours}:#{minutes}"\r\n\tend\r\n\r\nend\r\n\r\nclass Fixnum\r\n    \r\n    def to_s\r\n        Clock.string(self)\r\n    end\r\n    \r\nend	\N	\N	0	1	2014-01-04 01:38:45	2014-01-04 01:38:45	51962	clock.rb
433	26	58e62f0c62f0c84900e3f357	superseded	ruby	bob	class Bob\n\n  RESPONSES = {\n    /^ *$/ => 'Fine. Be that way!',\n    /^[A-Z0-9 \\W]+$/ => 'Woah, chill out!',\n    /\\?$/ => 'Sure.',\n  }\n\n  def hey(incoming)\n    if special = RESPONSES.detect {|k,v| incoming.to_s =~ k }\n      return special.last\n    end\n    'Whatever.'\n  end\nend	\N	\N	0	3	2014-07-21 23:54:15	2014-07-21 23:54:15	47181	bob.rb
396	23	4cb54394a421958782f7bcb0	superseded	javascript	robot-name	module.exports = Robot;\n\nfunction Robot() {\n  this.reset();\n};\n\nRobot.prototype.reset = function() {\n  this.name = format(robotCount++);\n}\n\nvar robotCount = 0;\n\nfunction format(number) {\n  return divmod(number, 1000, function(upper, lower) {\n    return letterize(upper) + zeroPad(lower,3);\n  });\n}\n\nfunction zeroPad(number, width)\n{\n  number = number.toString();\n  while(number.length < width) {\n    number = "0" + number;\n  }\n  return number;\n}\n\nfunction letterize(number) {\n  var zero = "A".charCodeAt(0);\n  return divmod(number, 26, function(upper, lower) {\n    return String.fromCharCode( zero+upper, zero+lower );\n  });\n}\n\nfunction divmod(numerator, divisor, continuation) {\n  var upper = Math.floor(numerator / divisor);\n  var lower = numerator % divisor;\n  return continuation(upper, lower);\n}	\N	\N	0	1	2013-12-02 20:33:16	2013-12-02 20:33:16	49479	robot-name.js
397	23	fc0bea54dd4604b96382c7ba	pending	javascript	robot-name	module.exports = Robot;\n\nfunction Robot() {\n  this.reset();\n};\n\nRobot.prototype.reset = function () {\n  this.name = format(robotCount++);\n}\n\nvar robotCount = 0;\n\nfunction format(number) {\n  return number.divmod(1000).combine(function (upper, lower) {\n    return upper.letterize() + lower.leftPad("0", 3);\n  });\n}\n\nNumber.prototype.divmod = function(divisor) {\n  var upper = Math.floor(this / divisor);\n  var lower = this % divisor;\n  return new VerticalPair(upper, lower);\n}\n\nfunction VerticalPair(upper, lower) {\n  this.upper = upper;\n  this.lower = lower;\n}\n\nVerticalPair.prototype.combine = function (combinator) {\n  return combinator(this.upper, this.lower);\n}\n\nVerticalPair.prototype.raiseBy = function (increment) {\n  return new VerticalPair(this.upper + increment, this.lower + increment);\n}\n\nNumber.prototype.letterize = function() {\n  var baseline = "A".charCodeAt(0);\n  return this.divmod(26).raiseBy(baseline).combine(String.fromCharCode);\n}\n\nObject.prototype.leftPad = function(padding, width) {\n  var content = this.toString();\n  var paddingSize = width - content.length;\n  return padding.repeat(paddingSize) + content;\n}\n\nString.prototype.repeat = function(times) {\n  return Array(times+1).join(this);\n}	\N	\N	0	2	2014-04-02 00:45:24	2014-04-02 00:45:24	49479	robot-name.js
398	23	d25af11e076a92fd7d5ca688	pending	javascript	point-mutations	"use strict";\n\nfunction DNA(strand) {\n  this.strand = this._toArray(strand);\n}\n\nDNA.prototype.hammingDistance = function(strand) {\n  return this._toArray(strand).filter(this.nucleotidesDiffer, this).length;\n};\n\nDNA.prototype.nucleotidesDiffer = function(nucleotide, index) {\n  if (this.strand.length > index) {\n    return (this.strand[index] !== nucleotide);\n  }\n};\n\nDNA.prototype._toArray = function(strand) {\n  return strand.split('');\n};\n\nmodule.exports = DNA	\N	\N	0	2	2013-12-08 16:59:56	2013-12-08 16:59:56	37859	point-mutations.js
399	23	db19a70b74af281aad8ed5c4	superseded	javascript	point-mutations	"use strict";\n\nfunction DNA(strand) {\n  this.strand = this._toArray(strand);\n}\n\nDNA.prototype.hammingDistance = function(strand) {\n  return this._toArray(strand).filter(this.compareNucleotides, this).length;\n};\n\nDNA.prototype.compareNucleotides = function(nucleotide, index) {\n  if (this.strand.length > index) {\n    return (this.strand[index] !== nucleotide);\n  }\n};\n\nDNA.prototype._toArray = function(strand) {\n  return strand.split('');\n};\n\nmodule.exports = DNA	\N	\N	0	1	2014-01-25 04:19:36	2014-01-25 04:19:36	37859	point-mutations.js
400	23	cf1617b72ea9ee7df2275a63	pending	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.reduce(Hash.new(0)) do |counts, word|\n      counts[word] = counts[word] + 1\n      counts\n    end\n  end\n\n  def words\n    @text.downcase.split(/\\W+/)\n  end\nend	\N	\N	0	2	2013-12-13 05:03:37	2013-12-13 05:03:37	38278	word-count.rb
401	23	8b419c8fd94ada28a292b4df	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.reduce({}) do |result, word|\n      count_towards result, word\n    end\n  end\n\n  def count_towards result, word\n    if word_count = result[word]\n      result[word] = word_count + 1\n    else\n      result.merge!(word => 1)\n    end\n    result\n  end\n\n  def words\n    @text.downcase.gsub(/\\W/,' ').split\n  end\nend	\N	\N	0	1	2014-04-09 05:14:58	2014-04-09 05:14:58	38278	word-count.rb
402	23	6674143cac1252f07b4c2252	superseded	ruby	proverb	class Proverb\n\n  def initialize(*items, qualifier: "")\n    @items = items\n    @qualifier = qualifier\n  end\n\n  def to_s\n    lines.join("\\n")\n  end\n\n  private\n\n  attr_reader :items, :qualifier\n\n  def lines\n    standard_lines << final_line\n  end\n\n  def standard_lines\n    items.each_cons(2).map { |(item1, item2)| line(item1, item2) }\n  end\n\n  def line(item1, item2)\n    "For want of a #{item1} the #{item2} was lost."\n  end\n\n  def final_line\n    "And all for the want of a #{ultimate_cause}."\n  end\n\n  def ultimate_cause\n    "#{qualifier} #{items.first}".lstrip\n  end\n\nend	\N	\N	0	2	2014-01-20 20:59:36	2014-01-20 20:59:36	45683	proverb.rb
403	23	fbc7f559f22dd3c167801a8d	superseded	ruby	proverb	class Proverb\n\n  def initialize(*things, qualifier: "")\n    @things = things\n    @qualifier = qualifier\n  end\n\n  def to_s\n    lines.join("\\n")\n  end\n\n  private\n\n  attr_reader :things, :qualifier\n\n  def lines\n    standard_lines << final_line\n  end\n\n  def standard_lines\n    things.each_cons(2).map { |(smaller, larger)| line(smaller, larger) }\n  end\n\n  def line(smaller_thing, larger_thing)\n    "For want of a #{smaller_thing} the #{larger_thing} was lost."\n  end\n\n  def final_line\n    "And all for the want of a #{smallest_thing}."\n  end\n\n  def smallest_thing\n    "#{qualifier} #{things.first}".lstrip\n  end\n\nend	\N	\N	0	3	2014-01-23 16:08:49	2014-01-23 16:08:49	45683	proverb.rb
404	23	043ac4b7fa7152f4b055b5c0	superseded	ruby	proverb	class Proverb\n\n  def initialize(*things, qualifier: "")\n    @things = things\n    @smallest_thing_qualifier = qualifier\n  end\n\n  def to_s\n    lines.join("\\n")\n  end\n\n  private\n\n  attr_reader :things, :smallest_thing_qualifier\n\n  def lines\n    standard_lines << final_line\n  end\n\n  def standard_lines\n    things.each_cons(2).map { |(smaller, larger)| line(smaller, larger) }\n  end\n\n  def line(smaller_thing, larger_thing)\n    "For want of a #{smaller_thing} the #{larger_thing} was lost."\n  end\n\n  def final_line\n    "And all for the want of a #{smallest_thing}."\n  end\n\n  def smallest_thing\n    "#{smallest_thing_qualifier} #{things.first}".lstrip\n  end\n\nend	\N	\N	0	4	2014-02-05 11:20:45	2014-02-05 11:20:45	45683	proverb.rb
405	23	4ce67cdb9afa531cfc5a0550	pending	ruby	proverb	class Proverb\n\n  def initialize(*things, qualifier: "")\n    @things = things\n    @smallest_thing_qualifier = qualifier\n  end\n\n  def to_s\n    lines.join("\\n")\n  end\n\n  private\n\n  attr_reader :things, :smallest_thing_qualifier\n\n  def lines\n    standard_lines << final_line\n  end\n\n  def standard_lines\n    things.each_cons(2).map { |(smaller, larger)| standard_line(smaller, larger) }\n  end\n\n  def standard_line(smaller_thing, larger_thing)\n    "For want of a #{smaller_thing} the #{larger_thing} was lost."\n  end\n\n  def final_line\n    "And all for the want of a #{smallest_thing}."\n  end\n\n  def smallest_thing\n    "#{smallest_thing_qualifier} #{things.first}".lstrip\n  end\n\nend	\N	\N	0	5	2014-03-19 08:06:20	2014-03-19 08:06:20	45683	proverb.rb
406	23	a092e38d9bf41b33f17505f1	superseded	ruby	proverb	class Proverb\n\n  def initialize(*items, qualifier: "")\n    @items = items\n    @qualifier = qualifier\n  end\n\n  def to_s\n    lines.join("\\n")\n  end\n\n  private\n\n  attr_reader :items, :qualifier\n\n  def lines\n    standard_lines << final_line\n  end\n\n  def standard_lines\n    items.each_cons(2).map { |(item1, item2)| line(item1, item2) }\n  end\n\n  def line(item1, item2)\n    "For want of a #{item1} the #{item2} was lost."\n  end\n\n  def final_line\n    "And all for the want of a #{ultimate_cause}."\n  end\n\n  def ultimate_cause\n    if !qualifier.empty?\n      "#{qualifier} #{items.first}"\n    else\n      items.first\n    end\n  end\n\nend	\N	\N	0	1	2014-06-27 10:04:55	2014-06-27 10:04:55	45683	proverb.rb
407	23	621b87b38b0628d9516f7651	pending	python	bob	class Bob(object):\r\n    def hey(self, phrase):\r\n        if ''.join([i for i in phrase if i.isalpha()]).isupper():\r\n            return 'Woah, chill out!'\r\n        if phrase.endswith('?'): return 'Sure.' \r\n        if phrase.strip() == '': return 'Fine. Be that way!'\r\n        return 'Whatever.'\r	\N	\N	0	1	2014-01-28 18:42:05	2014-01-28 18:42:05	55995	bob.py
408	23	988c560e0ef6ae7afadfd246	superseded	haskell	grade-school	module School (School, sorted, add, grade, empty) where\n\nimport qualified Data.IntMap as IntMap\nimport qualified Data.Set as Set\n\ntype Student = String\ntype School = IntMap.IntMap (Set.Set Student)\n\nsorted :: School -> [(Int, [Student])]\nsorted = IntMap.assocs . IntMap.map Set.toAscList\n\nadd :: Int -> Student -> School -> School\nadd grade student school = let school' = if (IntMap.notMember grade school)\n                                            then IntMap.insert grade Set.empty school\n                                            else school\n                           in IntMap.adjust (Set.insert student) grade school'\n\ngrade :: Int -> School -> [Student]\ngrade grade school = Set.toAscList $ IntMap.findWithDefault Set.empty grade school\n\nempty :: School\nempty = IntMap.empty	\N	\N	0	1	2014-01-19 16:31:12	2014-01-19 16:31:12	57643	School.hs
409	23	4726c6e808ab46ec6bca1dbf	pending	haskell	grade-school	module School (School, sorted, add, grade, empty) where\n\nimport qualified Data.IntMap as IntMap\nimport qualified Data.Set as Set\n\ntype Student = String\ntype School = IntMap.IntMap (Set.Set Student)\n\nsorted :: School -> [(Int, [Student])]\nsorted = IntMap.assocs . IntMap.map Set.toAscList\n\nadd :: Int -> Student -> School -> School\nadd grade student school = IntMap.insertWith Set.union grade (Set.singleton student) school\n\ngrade :: Int -> School -> [Student]\ngrade grade school = Set.toAscList $ IntMap.findWithDefault Set.empty grade school\n\nempty :: School\nempty = IntMap.empty	\N	\N	0	2	2014-03-13 18:55:57	2014-03-13 18:55:57	57643	School.hs
410	23	6deedc604d33e02e72447031	superseded	go	difference-of-squares	package diffsquares\n\nfunc SquareOfSums(n int) int {\n\tsum := n * (n + 1) / 2\n\treturn sum * sum\n}\n\nfunc SumOfSquares(n int) int {\n\treturn n * (n + 1) * (2*n + 1) / 6\n}\n\nfunc Difference(n int) int {\n\t//return SquareOfSums(n) - SumOfSquares(n)\n\t//return n * (n + 1) * (3*n*(n+1) - 4*n - 2) / 12\n\tn1 := n + 1\n\treturn n * n1 * (3*n*n1 - (n << 2) - 2) / 12\n}	\N	\N	0	1	2014-05-02 12:14:43	2014-05-02 12:14:43	60172	difference_of_squares.go
411	23	7a815a46c2e88d78311421da	pending	go	difference-of-squares	package diffsquares\n\nfunc SquareOfSums(n int) int {\n\tsum := n * (n + 1) / 2\n\treturn sum * sum\n}\n\nfunc SumOfSquares(n int) int {\n\treturn n * (n + 1) * (2*n + 1) / 6\n}\n\nfunc Difference(n int) int {\n\t//return SquareOfSums(n) - SumOfSquares(n)\n\n\t//return n * (n + 1) * (3*n*(n+1) - 4*n - 2) / 12\n\n\t//n1 := n + 1\n\t//return n * n1 * (3*n*n1 - (n << 2) - 2) / 12\n\n\tnsq := n * n\n\treturn (3*nsq + n + n) * (nsq - 1) / 12\n}	\N	\N	0	2	2014-06-25 11:16:44	2014-06-25 11:16:44	60172	difference_of_squares.go
412	41	789531fbc445d6dc3079eca2	pending	ruby	bob	class Bob\n  def hey(msg)\n    if msg.nil? || msg.empty?\n      "Fine. Be that way."\n    elsif msg == msg.upcase\n      "Woah, chill out!"\n    elsif msg.end_with? "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	4	2014-04-24 03:31:44	2014-04-24 03:31:44	43320	bob.rb
413	41	ddba368d1fef94e5450439fb	superseded	ruby	bob	class Bob\n  def hey(msg)\n    if msg.nil? || msg.empty?\n      "Fine. Be that way."\n    elsif msg == msg.upcase\n      "Woah, chill out!"\n    elsif msg.end_with? "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	2	2014-05-31 04:27:10	2014-05-31 04:27:10	43320	bob.rb
414	41	1e6f244f6ebe9d936b9be51b	superseded	ruby	bob	class Bob\n  def hey(msg)\n    if msg.nil? || msg.length < 1\n      "Fine. Be that way."\n    elsif msg == msg.upcase\n      "Woah, chill out!"\n    elsif msg =~ /[?]\\Z/\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-05-31 13:25:50	2014-05-31 13:25:50	43320	bob.rb
415	41	4ada8f23a271d23c38cce103	superseded	ruby	bob	class DNA\n  def initialize(dna_string)\n    @string = dna_string\n  end\n\n  def to_rna\n    string.tr 'T', 'U'\n  end\n\n  protected\n\n  attr_reader :string\nend	\N	\N	0	3	2014-06-28 12:06:28	2014-06-28 12:06:28	43320	bob.rb
416	41	ec65667ff8d5161632a1f5b9	pending	ruby	anagram	class String\n\n  def to_array\n    split(//)\n  end\n\nend\n\n\nclass Anagram\n\n  def initialize(word)\n    @original_word = word.downcase\n    @word = word.downcase.to_array.sort\n    @results = []\n  end\n\n  def match(words)\n    words.each do |w|\n      if w.downcase.to_array.sort == @word\n        @results << w unless w.downcase == @original_word\n      end\n    end\n    @results\n  end\n\nend	\N	\N	0	1	2014-05-23 23:24:28	2014-05-23 23:24:28	49742	anagram.rb
417	41	837151bbd978ee6724aa8e01	pending	ruby	difference-of-squares	class Squares\n  def initialize(int)\n    @int = int\n  end\n\n  def square_of_sums\n    (1..@int).inject(:+)**2\n  end\n\n  def sum_of_squares\n    (1..@int).map { |i| i**2 }.inject(:+)\n  end\n  \n  def difference\n    self.square_of_sums - self.sum_of_squares\n  end\n\nend	\N	\N	0	1	2014-05-20 10:20:02	2014-05-20 10:20:02	60154	squares.rb
418	41	ee874a990d250aeb095f49f5	pending	elixir	raindrops	defmodule Raindrops do\n\n  def convert(n) do\n    output = [\n      syllable(n, 3, "Pling"),\n      syllable(n, 5, "Plang"),\n      syllable(n, 7, "Plong")\n    ] |> Enum.join\n\n    if output == "", do: "#{n}",\n    else: output\n  end\n\n  defp syllable(n, factor, word) do\n    if rem(n, factor) == 0, do: word, else: ""\n  end\nend	\N	\N	0	2	2014-05-19 00:24:00	2014-05-19 00:24:00	40928	raindrops.exs
419	41	5648549c8f461f3ad165fa61	superseded	elixir	raindrops	defmodule Raindrops do\n\n  def convert(n) do\n    output = [\n      syllable(n, 3, "Pling"),\n      syllable(n, 5, "Plang"),\n      syllable(n, 7, "Plong")\n    ] |> Enum.join\n\n    if String.length(output) > 0, do: output,\n    else: "#{n}"\n  end\n\n  defp syllable(n, factor, word) do\n    if rem(n, factor) == 0, do: word, else: ""\n  end\nend	\N	\N	0	1	2014-06-23 18:52:27	2014-06-23 18:52:27	40928	raindrops.exs
420	41	1cc19fbfbc1b8afbaeaea968	pending	go	bob	package bob\n\nimport "strings"\n\nfunc Hey(phrase string) (response string) {\n\tswitch {\n\tcase strings.Trim(phrase, " ") == "":\n\t\tresponse = "Fine. Be that way!"\n\tcase strings.ToUpper(phrase) == phrase &&\n\t\tstrings.ToLower(phrase) != strings.ToUpper(phrase):\n\t\tresponse = "Woah, chill out!"\n\tcase strings.HasSuffix(phrase, "?"):\n\t\tresponse = "Sure."\n\tdefault:\n\t\tresponse = "Whatever."\n\t}\n\treturn\n}	\N	\N	0	1	2014-06-01 07:04:32	2014-06-01 07:04:32	47910	bob.go
421	41	78074fe4da8392a7a1d6dd42	pending	python	word-count	import re\n\nclass Phrase(object):\n\n\tdef __init__(self, word_phrase):\n\t\tself.word_pattern = re.compile('[a-zA-z0-9]+')\n\t\tself.word_phrase = word_phrase\n\t\tself.word_counts = {}\n\t\tself.words = None\n\n\tdef extract_words(self):\n\t\tphrase_elements = self.word_phrase.split()\n\t\tclean_elements_w_nones = [self.remove_punctuation(e) for e in phrase_elements]\n\t\tclean_elements = [element for element in clean_elements_w_nones if element != None]\n\t\tcase_fixed_elements = [element.lower() for element in clean_elements]\n\t\treturn case_fixed_elements\n\n\tdef number_of_words(self, target_word):\n\t\tcount = 0\n\t\tfor word in self.words:\n\t\t\tif word == target_word:\n\t\t\t\tcount += 1\n\n\t\treturn count\n\n\tdef remove_punctuation(self, single_word):\n\t\tclean_word = self.word_pattern.match(single_word)\n\t\tif clean_word:\n\t\t\treturn clean_word.group()\n\n\tdef word_count(self):\n\t\tself.words = self.extract_words()\n\t\tunique_words = set(self.words)\n\t\tfor word in unique_words:\n\t\t\thow_many = self.number_of_words(word)\n\t\t\tself.word_counts[word] = how_many\n\n\t\treturn self.word_counts	\N	\N	0	1	2014-05-18 20:49:15	2014-05-18 20:49:15	44585	word-count.py
422	26	7ceea99cfd618ea8930a633a	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def count(nucleotide_letter)\n    if nucleotide_letter == "X"\n        raise ArgumentError\n    end\n    @strand.count(nucleotide_letter)\n  end \n\n  def nucleotide_counts\n    hashes = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    hashes['A'] = @strand.count("A")\n    hashes['T'] = @strand.count("T")\n    hashes['C'] = @strand.count("C")\n    hashes['G'] = @strand.count("G")\n    return hashes\n  end\nend	\N	\N	0	2	2014-04-11 18:32:01	2014-04-11 18:32:01	38602	nucleotide-count.rb
423	26	bd76d0fa43260a68d97f4f04	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(letter)\n    @letter = letter\n  end\n\n  def count(letter)\n    if letter == "X"\n        raise ArgumentError\n    end\n    string_size = @letter.count(letter)\n    return string_size\n  end\n\n  def nucleotide_counts\n    hashes = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    hashes['A'] = @letter.count("A")\n    hashes['T'] = @letter.count("T")\n    hashes['C'] = @letter.count("C")\n    hashes['G'] = @letter.count("G")\n    return hashes\n  end\nend	\N	\N	0	1	2014-05-01 08:43:46	2014-05-01 08:43:46	38602	nucleotide-count.rb
424	26	71749925987d302159591c08	pending	ruby	nucleotide-count	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def count(nucleotide_letter)\n    array_letters = ["A", "G", "C", "T", "U" ]\n    if false == array_letters.include?(nucleotide_letter)\n        raise ArgumentError\n    end\n    @strand.count(nucleotide_letter)\n  end \n\n  def nucleotide_counts\n    counts_nucleotides = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    counts_nucleotides['A'] = @strand.count("A")\n    counts_nucleotides['T'] = @strand.count("T")\n    counts_nucleotides['C'] = @strand.count("C")\n    counts_nucleotides['G'] = @strand.count("G")\n     counts_nucleotides\n  end\nend	\N	\N	0	3	2014-05-09 12:51:44	2014-05-09 12:51:44	38602	nucleotide-count.rb
425	26	80c25dbc740589f62f60e7cc	pending	go	anagram	package anagram\n\nimport (\n\t// "fmt"\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) []string {\n\tresult := make([]string, 0, 20)\n\tfor i := range candidates {\n\t\tactual := strings.ToUpper(candidates[i])\n\t\tif len(actual) != len(subject) || strings.ToUpper(actual) == strings.ToUpper(subject) {\n\t\t\tcontinue\n\t\t}\n\t\tfor j := range subject {\n\t\t\tactual = strings.Replace(actual, strings.ToUpper(string(subject[j])), "", 1)\n\t\t\tif actual == "" {\n\t\t\t\tresult = append(result, strings.ToLower(candidates[i]))\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}	\N	\N	0	1	2014-06-06 21:05:12	2014-06-06 21:05:12	52156	anagram.go
426	26	433b7118cdafa493a36a0e2c	superseded	ruby	bob	require 'yaml'\nclass Bob\n\n  RESPONSES = {\n    /^ *$/ => 'Fine. Be that way!',\n    /^[A-Z0-9 \\W]+$/ => 'Woah, chill out!',\n    /\\?$/ => 'Sure.',\n  }\n\n  def hey(incoming)\n    if special = RESPONSES.detect {|k,v| incoming.to_s =~ k }\n      return special.last\n    end\n    'Whatever.'\n  end\nend	\N	\N	0	2	2014-03-16 09:40:33	2014-03-16 09:40:33	47181	bob.rb
427	26	aaab97382a87cee80f570a31	superseded	ruby	bob	class Bob\n\n  RESPONSES = {\n    /\\A *\\z/           => 'Fine. Be that way!',\n    /\\A[A-Z0-9 \\W]+\\z/ => 'Woah, chill out!',\n    /\\?\\z/             => 'Sure.',\n    //                 => 'Whatever.',\n  }\n\n  def hey(incoming)\n    RESPONSES.detect {|k,_v| incoming.to_s =~ k }.last\n  end\nend	\N	\N	0	7	2014-03-19 19:21:52	2014-03-19 19:21:52	47181	bob.rb
428	26	87eec0920eb6a7b595ed3440	superseded	ruby	bob	class Bob\n\n  RESPONSES = {\n    /\\A *\\z/ => 'Fine. Be that way!',\n    /\\A[A-Z0-9 \\W]+\\z/ => 'Woah, chill out!',\n    /\\?\\z/ => 'Sure.',\n    /.*/ => 'Whatever.',\n  }\n\n  def hey(incoming)\n    RESPONSES.detect {|k,v| incoming.to_s =~ k }.last\n  end\nend	\N	\N	0	6	2014-03-20 02:46:03	2014-03-20 02:46:03	47181	bob.rb
429	26	745e863477b358373d5a8cae	superseded	ruby	bob	class Bob\n\n  RESPONSES = {\n    /^ *$/ => 'Fine. Be that way!',\n    /^[A-Z0-9 \\W]+$/ => 'Woah, chill out!',\n    /\\?$/ => 'Sure.',\n    /.*/ => 'Whatever',\n  }\n\n  def hey(incoming)\n    RESPONSES.detect {|k,v| incoming.to_s =~ k }.last\n  end\nend	\N	\N	0	4	2014-05-03 14:49:42	2014-05-03 14:49:42	47181	bob.rb
430	26	6540f4615b3d49e731afa7ee	superseded	ruby	bob	class Bob\n\n  RESPONSES = {\n    /^ *$/ => 'Fine. Be that way!',\n    /^[A-Z0-9 \\W]+$/ => 'Woah, chill out!',\n    /\\?$/ => 'Sure.',\n    /.*/ => 'Whatever.',\n  }\n\n  def hey(incoming)\n    RESPONSES.detect {|k,v| incoming.to_s =~ k }.last\n  end\nend	\N	\N	0	5	2014-05-18 15:50:17	2014-05-18 15:50:17	47181	bob.rb
431	26	88e3def480769b89fbc3722f	pending	ruby	bob	class Bob\n\n  module Respondable\n    def answer_to(phrase)\n      @response if match?(phrase.to_s)\n    end\n  end\n\n  module YouSaidNothing\n    extend Respondable\n    @response = 'Fine. Be that way!'\n\n    def self.match?(phrase)\n      phrase.strip == ''\n    end\n  end\n\n  module DontYellAtMe\n    extend Respondable\n    @response = 'Woah, chill out!'\n\n    def self.match?(phrase)\n      phrase == phrase.upcase\n    end\n  end\n\n  module IDontTakeQuestionsSeriously\n    extend Respondable\n    @response = 'Sure.'\n\n    def self.match?(phrase)\n      phrase.end_with?('?')\n    end\n  end\n\n  module Whatevs\n    extend Respondable\n    @response = 'Whatever.'\n\n    def self.match?(phrase)\n      true\n    end\n  end\n\n  def hey(what_a_parent_said)\n    # Try each of our respondable modules in this exact order:\n    ways_to_respond = [\n      YouSaidNothing,\n      DontYellAtMe,\n      IDontTakeQuestionsSeriously,\n      Whatevs\n    ]\n    # The first one that returns a non-nil value we'll assume\n    # was the appropriate match for the given incoming phrase.\n    ways_to_respond.each do |respondable|\n      if response = respondable.answer_to(what_a_parent_said)\n        # We found a match! Return this to the caller of `hey`\n        return response\n      end\n    end\n  end\nend	\N	\N	0	8	2014-05-19 21:25:28	2014-05-19 21:25:28	47181	bob.rb
432	26	a4117734cb1a8590ec52272d	superseded	ruby	bob	require 'yaml'\nclass Bob\n\n  RULES = YAML.load <<-YML\n    Whatever.:\n      - Tom-ay-to, tom-aaaah-to.\n      - Let's go make out behind the gym!\n      - It's OK if you don't want to go to the DMV.\n      - Ending with ? means a question.\n    Woah, chill out!:\n      - WATCH OUT!\n      - WHAT THE HELL WERE YOU THINKING?\n      - 1, 2, 3 GO!\n      - ZOMG THE %^*@#\\$(*^ ZOMBIES ARE COMING!!11!!1!\n      - I HATE YOU\n    Sure.:\n      - Does this cryogenic chamber make me look fat?\n      - Wait! Hang on. Are you going to be OK?\n    Fine. Be that way!:\n      - ''\n      -\n      - '    '\n  YML\n\n  RESPONSES = RULES.reduce({}) do |hash, (response, phrases)|\n    phrases.each {|phrase| hash.update phrase => response }\n    hash\n  end\n\n  def hey(incoming)\n    RESPONSES[incoming]\n  end\nend	\N	\N	0	1	2014-06-03 19:22:11	2014-06-03 19:22:11	47181	bob.rb
434	44	8f2ea4301984c21a6611aac8	pending	ruby	bob	class Bob\n  def hey(message)\n    best_applicable_responder(message).response\n  end\n\n  private\n\n  def best_applicable_responder(message)\n    responders.detect{ |r| r.applicable_to?(message) }\n  end\n\n  def responders\n    @responders ||= [\n      BlankResponder.new, ShoutingResponder.new, QuestionResponder.new,\n      DefaultResponder.new\n    ]\n  end\n\n  class BlankResponder\n    def applicable_to?(message)\n      message.nil? || message.strip.empty?\n    end\n\n    def response\n      'Fine. Be that way!'\n    end\n  end\n\n  class ShoutingResponder\n    def applicable_to?(message)\n      message.upcase == message\n    end\n\n    def response\n      'Woah, chill out!'\n    end\n  end\n\n  class QuestionResponder\n    def applicable_to?(message)\n      message.end_with?('?')\n    end\n\n    def response\n      'Sure.'\n    end\n  end\n\n  class DefaultResponder\n    def applicable_to?(message)\n      true\n    end\n\n    def response\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	2	2014-01-24 03:02:05	2014-01-24 03:02:05	42682	bob.rb
435	44	cda2a1d405993dd7745e8e66	superseded	ruby	bob	class Bob\n  def hey(message)\n    responders.detect{ |r| r.applicable_to?(message) }.response\n  end\n\n  private\n\n  def responders\n    @responders ||= [\n      BlankResponder.new, ShoutingResponder.new, QuestionResponder.new,\n      DefaultResponder.new\n    ]\n  end\n\n  class BlankResponder\n    def applicable_to?(message)\n      message.nil? || message.strip.empty?\n    end\n\n    def response\n      'Fine. Be that way!'\n    end\n  end\n\n  class ShoutingResponder\n    def applicable_to?(message)\n      message.upcase == message\n    end\n\n    def response\n      'Woah, chill out!'\n    end\n  end\n\n  class QuestionResponder\n    def applicable_to?(message)\n      message.end_with?('?')\n    end\n\n    def response\n      'Sure.'\n    end\n  end\n\n  class DefaultResponder\n    def applicable_to?(message)\n      true\n    end\n\n    def response\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	1	2014-01-31 21:33:43	2014-01-31 21:33:43	42682	bob.rb
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 435, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	2	1
3	3	1
4	1	2
5	1	3
6	1	4
7	2	4
8	3	5
9	2	6
10	2	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	1980-09-17 17:10:54	1980-09-17 17:10:54	t
2	1	14	2010-10-26 08:34:07	2010-10-26 08:34:07	t
3	1	17	1976-02-27 17:17:37	1976-02-27 17:17:37	t
4	1	22	1973-03-07 23:33:21	1973-03-07 23:33:21	t
5	1	10	1975-09-17 09:57:29	1975-09-17 09:57:29	t
6	1	7	1971-07-24 15:02:18	1971-07-24 15:02:18	t
7	1	6	1990-07-29 05:17:24	1990-07-29 05:17:24	t
8	1	29	1997-12-26 07:20:29	1997-12-26 07:20:29	t
9	1	30	1986-03-22 02:07:23	1986-03-22 02:07:23	t
10	1	35	1977-03-27 23:40:34	1977-03-27 23:40:34	t
11	1	15	2005-12-13 07:05:52	2005-12-13 07:05:52	f
12	1	16	2013-03-20 10:44:10	2013-03-20 10:44:10	f
13	1	28	1994-10-31 05:59:48	1994-10-31 05:59:48	f
14	1	31	1976-02-17 19:08:29	1976-02-17 19:08:29	f
15	1	37	1973-06-20 00:21:21	1973-06-20 00:21:21	f
16	1	41	2003-03-01 08:29:10	2003-03-01 08:29:10	f
17	1	42	2008-05-23 02:34:32	2008-05-23 02:34:32	f
18	1	46	2012-04-03 12:19:39	2012-04-03 12:19:39	f
19	2	2	2012-10-16 15:11:43	2012-10-16 15:11:43	t
20	2	35	1989-07-31 13:28:57	1989-07-31 13:28:57	t
21	2	30	2006-01-08 21:10:07	2006-01-08 21:10:07	t
22	2	46	1981-11-25 21:34:30	1981-11-25 21:34:30	t
23	2	18	2003-05-31 00:21:40	2003-05-31 00:21:40	f
24	2	37	1999-12-22 21:57:52	1999-12-22 21:57:52	f
25	3	37	2011-09-14 04:11:27	2011-09-14 04:11:27	f
26	3	2	2005-03-02 17:24:57	2005-03-02 17:24:57	f
27	4	2	1981-11-24 17:16:05	1981-11-24 17:16:05	t
28	4	31	1979-05-29 00:46:47	1979-05-29 00:46:47	t
29	4	21	2004-11-03 02:00:01	2004-11-03 02:00:01	t
30	4	26	1977-04-28 18:55:58	1977-04-28 18:55:58	t
31	4	19	1996-01-05 09:40:04	1996-01-05 09:40:04	t
32	4	24	1993-06-08 19:41:18	1993-06-08 19:41:18	t
33	4	18	1971-05-03 19:04:12	1971-05-03 19:04:12	t
34	4	23	1976-01-20 18:18:29	1976-01-20 18:18:29	t
35	4	25	1996-10-26 01:05:01	1996-10-26 01:05:01	t
36	4	20	2005-09-07 15:56:27	2005-09-07 15:56:27	t
37	4	37	1980-07-26 13:01:21	1980-07-26 13:01:21	f
38	4	11	2007-06-28 18:13:34	2007-06-28 18:13:34	f
39	4	13	1989-10-09 14:39:46	1989-10-09 14:39:46	f
40	5	31	1979-01-20 12:25:05	1979-01-20 12:25:05	t
41	5	39	2004-01-29 04:39:59	2004-01-29 04:39:59	t
42	5	34	1972-11-20 03:52:34	1972-11-20 03:52:34	t
43	5	36	1984-05-30 03:07:14	1984-05-30 03:07:14	t
44	5	32	1995-10-26 07:37:17	1995-10-26 07:37:17	t
45	5	35	1978-05-18 00:11:42	1978-05-18 00:11:42	t
46	5	33	1987-03-10 14:46:59	1987-03-10 14:46:59	t
47	5	38	2004-06-24 01:55:10	2004-06-24 01:55:10	t
48	5	40	2009-06-16 12:25:13	2009-06-16 12:25:13	f
49	5	37	1971-04-20 07:09:13	1971-04-20 07:09:13	f
50	5	2	1993-06-07 10:57:04	1993-06-07 10:57:04	f
51	6	5	1981-02-19 17:00:44	1981-02-19 17:00:44	t
52	6	6	2005-02-02 02:48:48	2005-02-02 02:48:48	t
53	6	7	1983-03-30 01:56:05	1983-03-30 01:56:05	t
54	6	8	1994-06-22 18:44:26	1994-06-22 18:44:26	t
55	6	10	1970-05-14 03:08:46	1970-05-14 03:08:46	t
56	6	11	2013-10-10 12:50:47	2013-10-10 12:50:47	t
57	6	12	1987-11-10 13:05:02	1987-11-10 13:05:02	t
58	6	13	1985-06-03 01:31:41	1985-06-03 01:31:41	t
59	6	14	2013-05-07 22:55:59	2013-05-07 22:55:59	t
60	6	15	1982-02-17 12:48:03	1982-02-17 12:48:03	t
61	6	16	1971-08-08 04:12:23	1971-08-08 04:12:23	t
62	6	17	1978-03-18 09:27:14	1978-03-18 09:27:14	t
63	6	22	1977-06-24 02:37:03	1977-06-24 02:37:03	t
64	6	27	1977-09-21 20:21:27	1977-09-21 20:21:27	t
65	6	28	2006-10-04 22:30:51	2006-10-04 22:30:51	t
66	6	29	1972-02-15 07:56:10	1972-02-15 07:56:10	t
67	6	30	1993-07-01 08:37:37	1993-07-01 08:37:37	t
68	6	31	1985-12-03 17:07:50	1985-12-03 17:07:50	t
69	6	37	1971-05-07 01:13:52	1971-05-07 01:13:52	t
70	6	41	2005-10-10 09:18:01	2005-10-10 09:18:01	t
71	6	42	1972-04-18 20:02:12	1972-04-18 20:02:12	t
72	6	43	1985-06-07 03:05:16	1985-06-07 03:05:16	t
73	6	44	1970-03-21 09:10:17	1970-03-21 09:10:17	t
74	6	45	1974-07-24 22:26:39	1974-07-24 22:26:39	t
75	6	46	2004-08-07 20:38:13	2004-08-07 20:38:13	t
76	6	47	1970-04-09 18:58:54	1970-04-09 18:58:54	t
77	6	48	1990-02-24 20:51:16	1990-02-24 20:51:16	t
78	7	2	1983-12-19 06:14:02	1983-12-19 06:14:02	t
79	7	38	1972-08-18 13:14:32	1972-08-18 13:14:32	t
80	7	31	2004-04-12 02:58:39	2004-04-12 02:58:39	t
81	7	37	2000-12-25 07:58:29	2000-12-25 07:58:29	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-01-18 16:49:08.675132	2014-01-18 16:49:08.675132	baconesia
2	chocolades	2013-11-06 20:25:55.712399	2013-11-06 20:25:55.712399	chocolades
3	ghost	2013-10-31 04:56:00.722882	2013-10-31 04:56:00.722882	ghost
4	motley	2014-07-21 00:48:23.728198	2014-07-21 00:48:23.728198	motley
5	rugrats	2014-06-29 18:26:55.748679	2014-06-29 18:26:55.748679	rugrats
6	slate	2014-03-03 06:45:02.764293	2014-03-03 06:45:02.764293	slate
7	polkadots	2013-12-28 16:38:57.795797	2013-12-28 16:38:57.795797	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	8	elixir	bob	4	pending	\N	2014-02-20 09:21:43	2014-02-20 09:21:43	101e8c441b621db1eae032b3	f
2	10	clojure	word-count	2	pending	\N	2014-04-19 17:08:32	2014-04-19 17:08:32	a386956827970122b972a347	f
3	10	javascript	rna-transcription	1	pending	\N	2014-06-01 10:53:26	2014-06-01 10:53:26	a49c88d07a92bf370be4d3b0	f
4	10	javascript	bob	1	pending	\N	2014-04-14 02:21:32	2014-04-14 02:21:32	a840eb80373fb039a173fcc3	f
5	10	clojure	leap	1	pending	\N	2014-04-25 06:53:35	2014-04-25 06:53:35	4719c25c78b562a9914436be	f
6	10	ruby	rna-transcription	2	pending	\N	2014-04-13 00:44:40	2014-04-13 00:44:40	0c019b21009607dfb3373cc7	f
7	10	haskell	atbash-cipher	2	pending	\N	2014-03-24 20:33:48	2014-03-24 20:33:48	cde17433fab63ee65ecf1173	f
8	10	haskell	etl	2	pending	\N	2014-04-15 19:26:02	2014-04-15 19:26:02	0a1a15a208c5e02de0b91401	f
9	10	ruby	bob	1	pending	\N	2014-03-08 00:03:11	2014-03-08 00:03:11	862a45c6619f7eacbcae0b9f	f
10	10	ruby	clock	1	pending	\N	2014-04-08 12:52:30	2014-04-08 12:52:30	a53555c4905ae7abbcb8641d	f
11	10	ruby	grains	1	pending	\N	2014-03-17 22:58:26	2014-03-17 22:58:26	3d2b554c359d53d584fc9c10	f
12	10	python	largest-series-product	1	pending	\N	2014-05-12 07:13:28	2014-05-12 07:13:28	77541df2f9237cfa74907bff	f
13	10	javascript	robot-simulator	1	pending	\N	2014-03-27 08:00:27	2014-03-27 08:00:27	240138aacb2f1a8d39093d91	f
14	10	javascript	word-count	4	pending	\N	2014-04-05 11:39:57	2014-04-05 11:39:57	c9535b2116ecfb44bb1f53f2	f
15	10	coffeescript	anagram	1	pending	\N	2014-03-17 03:42:18	2014-03-17 03:42:18	486cebea0b1d19f9448c907d	f
16	10	ruby	leap	3	pending	\N	2014-03-03 02:47:57	2014-03-03 02:47:57	3236c49181b9bb0d9222177a	f
17	10	ruby	grade-school	3	pending	\N	2014-03-02 20:21:33	2014-03-02 20:21:33	457b29a59d68bf6640bf1880	f
18	10	scala	word-count	2	pending	\N	2014-04-15 13:08:34	2014-04-15 13:08:34	a85ae806bb1f5b0b5fdd2200	f
19	10	ruby	triangle	1	pending	\N	2014-03-08 12:08:43	2014-03-08 12:08:43	7e9ccdb9749d28e72ce9237d	f
20	10	perl5	simple-cipher	1	pending	\N	2014-05-01 06:05:19	2014-05-01 06:05:19	45f7f1dba8250b8513e261ba	f
21	10	javascript	luhn	1	pending	\N	2014-04-15 20:02:57	2014-04-15 20:02:57	26ae4878e8505dc521f5fe18	f
22	10	ruby	binary	1	pending	\N	2014-04-17 02:00:50	2014-04-17 02:00:50	a8161252ea3383b863949a77	f
23	10	clojure	bob	7	pending	\N	2014-03-04 17:14:03	2014-03-04 17:14:03	7ccfc512553c2ab66a2f11cf	f
24	10	clojure	beer-song	1	pending	\N	2014-07-01 17:44:22	2014-07-01 17:44:22	47f6f30a53d8b2ce04615e68	f
25	10	elixir	bob	1	pending	\N	2014-05-25 16:09:00	2014-05-25 16:09:00	552239e5cce69d5899dae065	f
26	10	clojure	point-mutations	1	pending	\N	2014-04-09 19:56:23	2014-04-09 19:56:23	afa39e8c42286c714a74a637	f
27	10	haskell	rna-transcription	2	pending	\N	2014-04-13 07:11:21	2014-04-13 07:11:21	8755dd58599932b47abc540f	f
28	10	haskell	beer-song	1	pending	\N	2014-06-19 12:34:32	2014-06-19 12:34:32	16831fe36eb5da2100cb415c	f
29	10	go	word-count	3	pending	\N	2014-03-28 17:18:26	2014-03-28 17:18:26	33074992bd7a83c7201443c1	f
30	10	perl5	hexadecimal	1	pending	\N	2014-05-03 11:53:47	2014-05-03 11:53:47	cde5e6a6986699c0f4018a73	f
31	10	haskell	nucleotide-count	6	pending	\N	2014-03-07 00:35:14	2014-03-07 00:35:14	a9f7218001b6aa874e925ae9	f
32	10	scala	leap	1	pending	\N	2014-05-10 05:49:43	2014-05-10 05:49:43	34f25750f43765f594f52b9d	f
33	10	ruby	word-count	3	pending	\N	2014-03-25 08:08:51	2014-03-25 08:08:51	5bbbbf428c2ac691cc608f83	f
34	10	python	bob	3	pending	\N	2014-03-01 06:03:09	2014-03-01 06:03:09	a42c651dde409cfdb852fba6	f
35	11	ruby	hamming	2	pending	\N	2014-03-12 17:23:18	2014-03-12 17:23:18	f0e2af0cad2939251506acef	f
36	14	ruby	difference-of-squares	1	pending	\N	2014-06-16 07:41:21	2014-06-16 07:41:21	0db1d3b1228222449cc6252e	f
37	14	ruby	hamming	1	pending	\N	2014-05-21 02:08:51	2014-05-21 02:08:51	90ff3d87ed8e7082c85e0f2d	f
38	14	javascript	word-count	1	pending	\N	2014-06-18 03:05:49	2014-06-18 03:05:49	98411a13f3c9cddf7c42e1d6	f
39	14	javascript	meetup	2	pending	\N	2014-05-27 05:05:42	2014-05-27 05:05:42	bb68a06f79ac4de4a8764b7b	f
40	14	ruby	roman-numerals	1	pending	\N	2014-06-26 20:29:53	2014-06-26 20:29:53	6c47d5bb771d7769d2bbef97	f
41	14	python	bob	1	pending	\N	2014-06-24 01:33:16	2014-06-24 01:33:16	dcd2ed66212f14dacd2e7586	f
42	14	ruby	raindrops	1	pending	\N	2014-06-22 20:28:00	2014-06-22 20:28:00	dd74832b3a1137ef137336a3	f
43	21	ruby	hamming	1	pending	\N	2014-05-17 07:52:44	2014-05-17 07:52:44	548b3f44b47ac705fa8cdbb4	f
44	21	scala	bob	3	pending	\N	2014-03-25 17:31:43	2014-03-25 17:31:43	1f62be40885a2dbac71b3646	f
45	21	python	bob	2	pending	\N	2014-02-07 05:33:55	2014-02-07 05:33:55	e2c134f11a614a85fda25067	f
46	21	ruby	proverb	1	pending	\N	2014-05-19 04:42:24	2014-05-19 04:42:24	267c881863501a0a8a8fce1d	f
47	27	ruby	anagram	1	pending	\N	2014-06-07 13:37:30	2014-06-07 13:37:30	349e429f9d7e2ee17d90185f	f
48	28	ruby	word-count	1	pending	\N	2014-01-17 09:22:40	2014-01-17 09:22:40	020059fd8fb2663ba3576649	f
49	28	ruby	leap	3	pending	\N	2013-12-21 12:38:17	2013-12-21 12:38:17	49060c4abde1a520001eb380	f
50	28	ruby	space-age	5	pending	\N	2014-01-05 09:15:56	2014-01-05 09:15:56	7e97d7e04e328f2cb6c3db70	f
51	28	ruby	bob	2	pending	\N	2013-12-25 22:41:57	2013-12-25 22:41:57	53d9b9dc37b19caec7189826	f
52	28	ruby	hamming	1	pending	\N	2014-04-30 10:48:28	2014-04-30 10:48:28	c62fb543c3fb2c2fca590577	f
53	28	haskell	bob	2	pending	\N	2014-01-12 18:11:30	2014-01-12 18:11:30	c385211272283f6c4a57b6ae	f
54	28	haskell	phone-number	1	pending	\N	2014-03-31 17:34:55	2014-03-31 17:34:55	a3cbbbad8c729784a137e975	f
55	28	clojure	point-mutations	2	pending	\N	2014-02-20 21:07:53	2014-02-20 21:07:53	50e8d14c28c1f8318ecb8211	f
56	28	ruby	rna-transcription	2	pending	\N	2013-12-12 10:04:07	2013-12-12 10:04:07	79158a4b3066bda131100806	f
57	28	go	hamming	2	pending	\N	2014-03-01 18:05:01	2014-03-01 18:05:01	96cc709f9893a05f35c736e1	f
58	28	haskell	scrabble-score	2	pending	\N	2013-12-11 02:33:45	2013-12-11 02:33:45	fad1c0402a53102d4577bd8d	f
59	30	ruby	proverb	1	pending	\N	2014-06-27 15:18:06	2014-06-27 15:18:06	d710eed906332c2b08ed0ccf	f
60	30	clojure	leap	2	pending	\N	2014-04-14 19:49:21	2014-04-14 19:49:21	9777c492395ad4338b111092	f
61	30	haskell	bob	2	pending	\N	2014-06-13 18:40:42	2014-06-13 18:40:42	c51db654671d1e1bb5b01ca4	f
62	30	ruby	rna-transcription	2	pending	\N	2014-04-26 12:24:36	2014-04-26 12:24:36	b54b82ea48a9ddddd39e87c3	f
63	30	javascript	word-count	1	pending	\N	2014-06-03 18:25:07	2014-06-03 18:25:07	006f943a2cd4edc0bb1eb0a9	f
64	30	perl5	robot-name	1	pending	\N	2014-05-12 02:49:27	2014-05-12 02:49:27	2101857f7994afee8ff2457c	f
65	32	haskell	point-mutations	2	pending	\N	2014-07-10 02:06:31	2014-07-10 02:06:31	5f778eb407f832efda6b9b4a	f
66	32	ruby	grade-school	2	pending	\N	2014-07-07 18:15:41	2014-07-07 18:15:41	35fa75aad89bd5b86ed4f542	f
67	32	ruby	leap	1	pending	\N	2014-07-09 13:30:20	2014-07-09 13:30:20	68e42dcf416d43aec8748995	f
68	32	python	beer-song	3	pending	\N	2014-07-07 23:59:14	2014-07-07 23:59:14	ce24589e1e8f12cbeb891ac0	f
69	37	ruby	leap	1	pending	\N	2014-07-02 15:56:55	2014-07-02 15:56:55	bcbad5b47e306066fc57e46f	f
70	37	ruby	beer-song	1	pending	\N	2014-07-03 15:31:10	2014-07-03 15:31:10	5f1c0440cea1b30c4ec58b73	f
71	37	javascript	palindrome-products	1	pending	\N	2014-07-15 04:12:18	2014-07-15 04:12:18	f5394a34df8bcdc26b35dd1d	f
72	39	ruby	gigasecond	1	pending	\N	2014-03-17 20:46:27	2014-03-17 20:46:27	4cd3c18f54eed3bbb0e559d7	f
73	43	go	leap	6	pending	\N	2014-05-09 06:34:45	2014-05-09 06:34:45	9b2dc7feca357c27b5d2aa2e	f
74	43	javascript	gigasecond	1	pending	\N	2014-05-20 20:08:53	2014-05-20 20:08:53	0b85e8981b511b95ed4ee6a8	f
75	43	ruby	triangle	1	pending	\N	2014-05-14 15:57:31	2014-05-14 15:57:31	0f2fba5babed06c276eff4d1	f
76	43	ruby	word-count	1	pending	\N	2014-05-03 06:41:55	2014-05-03 06:41:55	82b19265c005610a00129136	f
77	43	go	difference-of-squares	2	pending	\N	2014-06-20 17:45:25	2014-06-20 17:45:25	68727464cbed6d1381af1dee	f
78	43	haskell	trinary	1	pending	\N	2014-05-19 15:32:34	2014-05-19 15:32:34	21e60949ff73cf619b372db0	f
79	43	haskell	anagram	4	pending	\N	2014-05-11 22:04:08	2014-05-11 22:04:08	c35c8c0a7ffe1e6dda1ac2cd	f
80	45	ruby	bob	1	pending	\N	2014-03-12 08:02:48	2014-03-12 08:02:48	f96970c46efbdd75362fabdf	f
81	45	clojure	meetup	3	pending	\N	2014-02-08 21:45:59	2014-02-08 21:45:59	04b271a35beca8038b9c8062	f
82	47	ruby	grains	2	pending	\N	2014-05-18 17:57:10	2014-05-18 17:57:10	b3db655c952215b8940082e3	f
83	47	clojure	nucleotide-count	1	pending	\N	2014-05-09 09:34:10	2014-05-09 09:34:10	11c80a839af82896a69ce46b	f
84	48	clojure	word-count	1	pending	\N	2014-07-26 08:41:56	2014-07-26 08:41:56	560c1e149e12a41019364b3b	f
85	48	ruby	gigasecond	1	pending	\N	2014-07-25 13:32:32	2014-07-25 13:32:32	87659a5bac39d3275d4a5431	f
86	48	ruby	bob	1	pending	\N	2014-07-25 15:07:37	2014-07-25 15:07:37	e88832ba6e40c530f46983e0	f
87	48	javascript	bob	3	pending	\N	2014-07-26 00:55:13	2014-07-26 00:55:13	ff5895cb4341f70dd1ea7067	f
88	48	ruby	roman-numerals	2	pending	\N	2014-07-26 01:28:39	2014-07-26 01:28:39	7e646cb39fa791fad15e65c0	f
89	48	ruby	matrix	1	pending	\N	2014-07-25 16:12:55	2014-07-25 16:12:55	55d180134ca77dedfe2af8e9	f
90	48	haskell	meetup	5	pending	\N	2014-07-25 10:05:14	2014-07-25 10:05:14	42dffbe9490cfc7114399949	f
91	48	javascript	word-count	1	pending	\N	2014-07-25 16:28:59	2014-07-25 16:28:59	f33313e6475b437a0774adc9	f
92	48	scala	meetup	1	pending	\N	2014-07-25 08:15:13	2014-07-25 08:15:13	b17070039afd17d6afc70e2c	f
93	48	haskell	accumulate	1	pending	\N	2014-07-25 10:16:57	2014-07-25 10:16:57	01a6d610512380e9eca761c3	f
94	48	ruby	anagram	2	pending	\N	2014-07-26 03:57:17	2014-07-26 03:57:17	689f0e2760cac8278da3357c	f
95	48	ruby	phone-number	1	pending	\N	2014-07-25 12:03:48	2014-07-25 12:03:48	4329695fb6d0f9d4fb766576	f
96	48	ruby	grains	1	pending	\N	2014-07-25 05:53:48	2014-07-25 05:53:48	10acf4e3335b2a4fd35f5c0e	f
97	48	javascript	phone-number	1	pending	\N	2014-07-26 06:22:22	2014-07-26 06:22:22	1d8c48278d0a304ad94d2e37	f
98	48	elixir	leap	1	pending	\N	2014-07-25 12:37:53	2014-07-25 12:37:53	1779e7e29a2b3cea7d94c16b	f
99	48	go	leap	1	pending	\N	2014-07-25 08:31:37	2014-07-25 08:31:37	b300b33095851f6a6c2af79f	f
100	25	ruby	bob	2	pending	\N	2014-06-19 01:02:06	2014-06-19 01:02:06	0e06bde173bb187e333487d1	f
101	6	ruby	food-chain	2	pending	\N	2014-03-03 22:19:03	2014-03-03 22:19:03	b7bd261789d7b11ae0829496	f
102	6	ruby	leap	2	pending	\N	2014-02-24 07:33:49	2014-02-24 07:33:49	b9ececf980a1070c2183e16f	f
103	6	scala	bob	2	pending	\N	2014-04-02 18:05:05	2014-04-02 18:05:05	7b92fb57abe0020dc1323d1b	f
104	22	clojure	grade-school	1	pending	\N	2014-03-14 20:53:56	2014-03-14 20:53:56	1413c1f875f1aeedf27b16e3	f
105	22	ruby	grains	1	pending	\N	2014-02-13 09:49:22	2014-02-13 09:49:22	69cac5ba81f58a457315999f	f
106	22	ruby	triangle	1	pending	\N	2014-02-28 06:43:02	2014-02-28 06:43:02	dca475b9b5e7bbe9983eeea3	f
107	22	ruby	word-count	2	pending	\N	2014-03-18 01:17:07	2014-03-18 01:17:07	221cbb7201bed0efa9922adc	f
108	16	clojure	rna-transcription	1	pending	\N	2014-06-24 08:45:56	2014-06-24 08:45:56	058be7956eb4834069155e02	f
109	16	ruby	anagram	1	pending	\N	2014-06-23 04:08:53	2014-06-23 04:08:53	0e22e1ce6d400b7836bdea49	f
110	16	ruby	leap	1	pending	\N	2014-05-24 17:42:17	2014-05-24 17:42:17	2929e6a0489ac8327ceffae9	f
111	16	python	word-count	4	pending	\N	2014-04-23 03:42:21	2014-04-23 03:42:21	b49e3e25351b2ec69e046f29	f
112	19	haskell	bob	4	pending	\N	2014-01-22 07:47:24	2014-01-22 07:47:24	10f952fb63d223de22417fc6	f
113	19	ruby	space-age	1	pending	\N	2014-06-03 08:57:28	2014-06-03 08:57:28	22e39bfea65b5eec25d4584b	f
114	19	ruby	hamming	1	pending	\N	2013-12-17 02:07:28	2013-12-17 02:07:28	a0f535750e0e712e4de9ac18	f
115	19	haskell	etl	2	pending	\N	2014-02-15 09:56:42	2014-02-15 09:56:42	7f7693b6fa25a5712f37f391	f
116	19	haskell	wordy	2	pending	\N	2013-12-09 06:13:26	2013-12-09 06:13:26	b6b933b788a72c0d63af6735	f
117	19	elixir	bob	2	pending	\N	2014-01-21 11:08:58	2014-01-21 11:08:58	0926aab82a6b961a0e846042	f
118	19	haskell	roman-numerals	2	pending	\N	2014-01-18 11:54:03	2014-01-18 11:54:03	bb8bc52833224efa845bc567	f
119	19	clojure	grains	1	pending	\N	2013-12-31 18:17:31	2013-12-31 18:17:31	2b5e1c42d0cb927c590f6469	f
120	19	ruby	rna-transcription	9	pending	\N	2013-12-07 07:26:57	2013-12-07 07:26:57	536ea6fd63f121fc6db3a65e	f
121	19	javascript	strain	2	pending	\N	2013-12-13 22:39:33	2013-12-13 22:39:33	42f36acb44717bfd95c08f5a	f
122	19	elixir	phone-number	1	pending	\N	2014-03-17 21:53:01	2014-03-17 21:53:01	e6b00ec7b177b82d9a343e16	f
123	19	ruby	word-count	1	pending	\N	2013-12-07 00:03:23	2013-12-07 00:03:23	39e047ad2fa3b54de68a352d	f
124	19	ruby	raindrops	4	pending	\N	2013-12-15 02:06:29	2013-12-15 02:06:29	3db9c58407e60f6be6207696	f
125	19	ruby	nucleotide-count	6	pending	\N	2014-02-17 17:41:30	2014-02-17 17:41:30	cb9039aae6940ff01d2369ac	f
126	19	haskell	rna-transcription	1	pending	\N	2014-06-24 15:17:37	2014-06-24 15:17:37	36740b7dec8371c0efeae2ef	f
127	19	go	leap	6	pending	\N	2014-01-03 09:09:22	2014-01-03 09:09:22	e1cf45c227f650d726bed97f	f
128	19	javascript	word-count	3	pending	\N	2013-12-02 00:25:22	2013-12-02 00:25:22	a80890b2033bd112e6093439	f
129	19	javascript	nucleotide-count	1	pending	\N	2014-05-12 01:57:11	2014-05-12 01:57:11	3ad2ecaee67f0a5c3511e006	f
130	19	ruby	food-chain	1	pending	\N	2013-12-21 17:30:53	2013-12-21 17:30:53	2b23b5be426e47e8c5989c20	f
131	19	haskell	accumulate	1	pending	\N	2013-12-03 21:35:14	2013-12-03 21:35:14	b2c33d24f3a3e352000f6c8e	f
132	19	haskell	word-count	3	pending	\N	2013-12-18 08:54:20	2013-12-18 08:54:20	637af8236f6dbcd3dfa48b9b	f
133	19	javascript	hamming	1	pending	\N	2014-06-15 04:08:24	2014-06-15 04:08:24	8c150e0dd632b8e1e8fa962b	f
134	19	ruby	beer-song	2	pending	\N	2014-02-05 22:48:11	2014-02-05 22:48:11	7ce3a886d26591f89ef73858	f
135	19	ruby	bob	5	pending	\N	2013-12-22 13:03:13	2013-12-22 13:03:13	3334e3d8e58068e6e6c81193	f
136	19	haskell	crypto-square	2	pending	\N	2014-01-04 21:51:35	2014-01-04 21:51:35	974731516d6d32221355b79a	f
137	19	coffeescript	bob	2	pending	\N	2014-04-01 08:27:57	2014-04-01 08:27:57	59818be1390136775029060e	f
138	19	csharp	leap	1	pending	\N	2014-03-15 12:32:45	2014-03-15 12:32:45	9d17740c3f4bb874ca31d874	f
139	19	javascript	triangle	3	pending	\N	2014-01-09 16:00:30	2014-01-09 16:00:30	b25b5d9c7313b4cdb0019e1b	f
140	19	ruby	scrabble-score	1	pending	\N	2013-12-10 06:57:39	2013-12-10 06:57:39	c567514c802022861641abc3	f
141	19	javascript	leap	1	pending	\N	2014-03-25 01:16:29	2014-03-25 01:16:29	4a68b7a6a30215ef8e14c15c	f
142	20	ruby	etl	4	pending	\N	2014-05-21 03:56:29	2014-05-21 03:56:29	e9c317bf948bf0877dceb2a1	f
143	35	ruby	bob	3	pending	\N	2014-03-22 04:52:28	2014-03-22 04:52:28	e496136eb9af95f23635b8f8	f
144	35	python	rna-transcription	2	pending	\N	2014-03-22 06:02:24	2014-03-22 06:02:24	c981b58093a15bf6fe75b5b3	f
145	35	go	leap	2	pending	\N	2014-02-18 19:30:35	2014-02-18 19:30:35	5f0a40efe7f7dc5fa2edac7e	f
146	35	coffeescript	luhn	1	pending	\N	2014-03-10 04:08:01	2014-03-10 04:08:01	4b894fd738ca9618acd366ba	f
147	29	python	anagram	1	pending	\N	2014-07-09 11:37:39	2014-07-09 11:37:39	4fcbc391d640d1a5a0508eae	f
148	29	clojure	beer-song	1	pending	\N	2014-06-25 20:35:28	2014-06-25 20:35:28	9f9787b3bc69fed0cd2959d9	f
149	34	elixir	nucleotide-count	3	pending	\N	2014-03-01 08:59:58	2014-03-01 08:59:58	63dd0e6c498a050f60443d6e	f
150	34	ruby	leap	1	pending	\N	2014-02-28 00:49:04	2014-02-28 00:49:04	235907821edaba5ab6d6d59e	f
151	34	ruby	grade-school	2	pending	\N	2014-04-17 14:19:31	2014-04-17 14:19:31	c29120cbccc6f62260c6185c	f
152	34	haskell	luhn	4	pending	\N	2014-02-01 16:14:29	2014-02-01 16:14:29	c79409dcf433a144bd47f207	f
153	34	perl5	prime-factors	2	pending	\N	2014-06-01 04:44:23	2014-06-01 04:44:23	460fa711d05b905752321dba	f
154	13	ruby	bob	3	pending	\N	2014-05-14 04:18:06	2014-05-14 04:18:06	de2b39166259742e6a67fe2a	f
155	13	ruby	grade-school	2	pending	\N	2014-06-03 05:45:19	2014-06-03 05:45:19	a1933d1a4a8e4e0287ea956e	f
156	13	python	anagram	1	pending	\N	2014-06-16 18:54:37	2014-06-16 18:54:37	31e193abc8d2c1b1c77013e3	f
157	13	python	rna-transcription	2	pending	\N	2014-05-31 20:28:41	2014-05-31 20:28:41	a87ff50a68219119f972a6b7	f
158	13	fsharp	difference-of-squares	1	pending	\N	2014-05-19 17:26:17	2014-05-19 17:26:17	2590f7f326b85d539aa1265f	f
159	13	javascript	anagram	4	pending	\N	2014-05-18 19:50:22	2014-05-18 19:50:22	1823fd1c132f02fa48fc35ec	f
160	13	ruby	hamming	1	pending	\N	2014-07-05 08:00:54	2014-07-05 08:00:54	57d8b414c54e14f6959014ff	f
161	13	haskell	point-mutations	1	pending	\N	2014-07-01 07:45:28	2014-07-01 07:45:28	4b2538dd82ef1bc11a9b960d	f
162	13	python	bob	1	pending	\N	2014-05-15 10:29:43	2014-05-15 10:29:43	3c4eb8538b09c4dda55d9c7f	f
163	13	ruby	gigasecond	1	pending	\N	2014-05-27 05:01:35	2014-05-27 05:01:35	0ebf693ee4696a74dfc0db9b	f
164	13	ruby	robot-name	3	pending	\N	2014-06-17 12:01:20	2014-06-17 12:01:20	4c2a3a2d837ca2570b84e7ed	f
165	13	ruby	house	1	pending	\N	2014-05-16 19:00:34	2014-05-16 19:00:34	fcb8c9b495ccb306ecc5b568	f
166	13	ruby	raindrops	1	pending	\N	2014-06-23 19:19:23	2014-06-23 19:19:23	c1e153acc4fd45c69a5807bf	f
167	13	ruby	leap	3	pending	\N	2014-05-13 12:14:32	2014-05-13 12:14:32	1e243d106943a8ed0eaa3d01	f
168	13	ruby	grains	1	pending	\N	2014-07-05 05:51:00	2014-07-05 05:51:00	55ec953d4bd0a9d1e7be3f06	f
169	13	ruby	etl	2	pending	\N	2014-05-20 15:58:07	2014-05-20 15:58:07	a98b7e5a7ea3ced106437b5e	f
170	13	go	raindrops	1	pending	\N	2014-05-09 16:37:04	2014-05-09 16:37:04	3594d0c1ac9ec3b313343159	f
171	13	elixir	zipper	1	pending	\N	2014-05-21 01:37:21	2014-05-21 01:37:21	8be3ab89686463a6e16e74a8	f
172	13	clojure	phone-number	1	pending	\N	2014-05-26 01:55:14	2014-05-26 01:55:14	538e40094ec8e9739069a3a8	f
173	13	javascript	phone-number	1	pending	\N	2014-06-13 17:29:28	2014-06-13 17:29:28	05c7b53077c8d878ba9e5ff4	f
174	13	javascript	scrabble-score	1	pending	\N	2014-07-04 12:23:18	2014-07-04 12:23:18	3d05187c3cdb7e1594154363	f
175	13	haskell	linked-list	1	pending	\N	2014-05-14 02:25:36	2014-05-14 02:25:36	31ebc071d07c30763d0723b9	f
176	13	haskell	rna-transcription	3	pending	\N	2014-06-19 21:18:26	2014-06-19 21:18:26	2ae3ff739cde34941628ccf5	f
177	40	ruby	bob	1	pending	\N	2013-12-23 18:46:36	2013-12-23 18:46:36	66abf4a7c0374b3ddc307145	f
178	40	ruby	scrabble-score	2	pending	\N	2014-03-23 15:55:53	2014-03-23 15:55:53	da3e89ecd9929f9934955695	f
179	40	haskell	bob	3	pending	\N	2014-02-10 16:16:28	2014-02-10 16:16:28	d8198ebafc4f395a7abaeab6	f
180	5	javascript	bob	1	pending	\N	2014-05-16 10:56:11	2014-05-16 10:56:11	614ecf097f9e8fc3909789c7	f
181	33	haskell	beer-song	2	pending	\N	2014-03-08 03:43:03	2014-03-08 03:43:03	dd4e2ab99e39e7ffb718c234	f
182	33	go	leap	1	pending	\N	2014-04-25 18:47:02	2014-04-25 18:47:02	4c06e4122b901f244662d4f2	f
183	15	go	anagram	1	pending	\N	2014-06-03 22:09:04	2014-06-03 22:09:04	70980252ba1afa076660bf47	f
184	15	haskell	binary-search-tree	2	pending	\N	2014-05-12 20:25:08	2014-05-12 20:25:08	6c66c797fa7a76918919c100	f
185	15	ocaml	space-age	1	pending	\N	2014-03-24 16:44:29	2014-03-24 16:44:29	35f4e76b447569e7071c7efd	f
186	15	haskell	word-count	1	pending	\N	2014-07-14 05:18:31	2014-07-14 05:18:31	ce8bfc3497980de13fd3546a	f
187	15	ruby	word-count	1	pending	\N	2014-03-31 07:56:16	2014-03-31 07:56:16	fe7a75bba7cd753ac17a3ff6	f
188	15	python	bob	2	pending	\N	2014-05-02 19:32:52	2014-05-02 19:32:52	fae265adba70bfe3e4ffac03	f
189	17	perl5	pig-latin	1	pending	\N	2014-07-18 12:54:49	2014-07-18 12:54:49	62f58190ced3bc58873e0993	f
190	23	elixir	leap	1	pending	\N	2014-01-31 17:36:59	2014-01-31 17:36:59	bacd10e3f93e07ba9f4a84f1	f
191	23	ruby	bob	4	pending	\N	2013-12-26 23:34:05	2013-12-26 23:34:05	60ac7178fb152705fc03219d	f
192	23	ruby	grains	3	pending	\N	2014-02-07 14:45:14	2014-02-07 14:45:14	6e93c16a2cc084a18ded0235	f
193	23	ruby	raindrops	2	pending	\N	2014-01-22 06:35:54	2014-01-22 06:35:54	5f8db4e02f13742bf1948264	f
194	23	elixir	grade-school	1	pending	\N	2014-03-12 14:08:15	2014-03-12 14:08:15	38b14bdca67d396eba504c00	f
195	23	ruby	gigasecond	1	pending	\N	2013-12-15 18:16:22	2013-12-15 18:16:22	35e2452788a5ac4d472e613a	f
196	23	haskell	ocr-numbers	1	pending	\N	2014-02-27 06:32:53	2014-02-27 06:32:53	040030e87974b55875e70a30	f
197	23	elixir	rna-transcription	1	pending	\N	2014-01-04 21:34:42	2014-01-04 21:34:42	803e2a3b09d61574a1199110	f
198	23	elixir	bob	2	pending	\N	2013-12-15 12:06:28	2013-12-15 12:06:28	c0e0427c5473c7f1d0cb4a67	f
199	23	haskell	allergies	1	pending	\N	2014-04-04 17:02:42	2014-04-04 17:02:42	965e9b32c27ca4e6ec926fcc	f
200	23	ruby	series	1	pending	\N	2014-02-03 19:40:30	2014-02-03 19:40:30	c2c911c41625df2905924a66	f
201	23	ruby	hamming	2	pending	\N	2013-12-11 03:15:21	2013-12-11 03:15:21	29db5b956d55b81419d7e7ed	f
202	23	haskell	nucleotide-count	1	pending	\N	2014-04-15 05:55:27	2014-04-15 05:55:27	07515b371311d81b27a03818	f
203	23	ruby	circular-buffer	1	pending	\N	2013-12-08 01:49:55	2013-12-08 01:49:55	0610d0ad95b692faee816235	f
204	23	ruby	scrabble-score	1	pending	\N	2014-05-09 08:32:31	2014-05-09 08:32:31	36062f3999f1bbfc7d92e5ed	f
205	23	python	nucleotide-count	1	pending	\N	2014-02-20 09:09:37	2014-02-20 09:09:37	7070fd05986a16b703ff8172	f
206	23	coffeescript	bob	1	pending	\N	2014-02-27 22:49:29	2014-02-27 22:49:29	8621c1b89f43fd95136f72e8	f
207	23	python	matrix	1	pending	\N	2014-06-10 02:30:24	2014-06-10 02:30:24	c60ebbe5da3afcd6e6ffc32e	f
208	23	elixir	word-count	5	pending	\N	2014-01-26 06:46:47	2014-01-26 06:46:47	e0aab40d2842bc947a28d1e6	f
209	23	elixir	anagram	2	pending	\N	2014-01-15 07:06:21	2014-01-15 07:06:21	6945a595a353fc63deef1228	f
210	23	haskell	phone-number	2	pending	\N	2013-12-03 15:22:52	2013-12-03 15:22:52	562c278088775723b8f907eb	f
211	23	python	word-count	3	pending	\N	2013-12-02 19:28:29	2013-12-02 19:28:29	1693b4f68304d21eeb8bab57	f
212	23	ruby	leap	1	pending	\N	2013-12-21 14:08:03	2013-12-21 14:08:03	bb9cb2a645b1cd5c1440366d	f
213	23	go	rna-transcription	1	pending	\N	2014-03-16 07:50:05	2014-03-16 07:50:05	1f22ad099ce771d93f7c790e	f
214	23	elixir	prime-factors	1	pending	\N	2013-12-07 02:08:07	2013-12-07 02:08:07	b0d78f5b4b44ea2245610ec1	f
215	23	haskell	rna-transcription	1	pending	\N	2013-12-17 04:16:09	2013-12-17 04:16:09	fc8904214e1c2d6344717b05	f
216	23	go	binary	1	pending	\N	2013-12-12 20:57:14	2013-12-12 20:57:14	38fd9378491a33c96ed0d1be	f
217	23	ruby	clock	2	pending	\N	2014-01-04 01:38:45	2014-01-04 01:38:45	8155060ac9c79b9f8ce38ff9	f
218	23	javascript	robot-name	2	pending	\N	2013-12-02 20:33:16	2013-12-02 20:33:16	dbb9a24bc3dd537054d7b2ee	f
219	23	javascript	point-mutations	2	pending	\N	2013-12-08 16:59:56	2013-12-08 16:59:56	a7c71667af395a493302bb5a	f
220	23	ruby	word-count	2	pending	\N	2013-12-13 05:03:37	2013-12-13 05:03:37	f929ee26a6f481d5af511beb	f
221	23	ruby	proverb	5	pending	\N	2014-01-20 20:59:36	2014-01-20 20:59:36	5d0aa9fd4131056a20d47b04	f
222	23	python	bob	1	pending	\N	2014-01-28 18:42:05	2014-01-28 18:42:05	b81910854f5263621f5ccf23	f
223	23	haskell	grade-school	2	pending	\N	2014-01-19 16:31:12	2014-01-19 16:31:12	6347a345bb68b6724329bc9c	f
224	23	go	difference-of-squares	2	pending	\N	2014-05-02 12:14:43	2014-05-02 12:14:43	9d3c4e368945e10b95db252e	f
225	41	ruby	bob	4	pending	\N	2014-04-24 03:31:44	2014-04-24 03:31:44	4689bb4f5712b77ddd42826a	f
226	41	ruby	anagram	1	pending	\N	2014-05-23 23:24:28	2014-05-23 23:24:28	f03381d4d800e01387b50cd2	f
227	41	ruby	difference-of-squares	1	pending	\N	2014-05-20 10:20:02	2014-05-20 10:20:02	ba6419ea9f1bf46a37d493ff	f
228	41	elixir	raindrops	2	pending	\N	2014-05-19 00:24:00	2014-05-19 00:24:00	618aa5906f36e19c53a411c4	f
229	41	go	bob	1	pending	\N	2014-06-01 07:04:32	2014-06-01 07:04:32	11fbcd30604a0d933c5d22d7	f
230	41	python	word-count	1	pending	\N	2014-05-18 20:49:15	2014-05-18 20:49:15	8a3b65d44286fead70b4f989	f
231	26	ruby	nucleotide-count	3	pending	\N	2014-04-11 18:32:01	2014-04-11 18:32:01	3e6079e170d21456f8fa68f9	f
232	26	go	anagram	1	pending	\N	2014-06-06 21:05:12	2014-06-06 21:05:12	82f7d4be0be554a9c73e04d5	f
233	26	ruby	bob	8	pending	\N	2014-03-16 09:40:33	2014-03-16 09:40:33	c0110243d93f256cad4cbd49	f
234	44	ruby	bob	2	pending	\N	2014-01-24 03:02:05	2014-01-24 03:02:05	615dfd4faacc3154583e9152	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 234, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at) FROM stdin;
1	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg	-5745	reh739	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-03-20 14:55:49.546495	2014-03-20 14:55:49.546495
2	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg	-68366	zlq550	---\n- ruby\n- haskell\n	2013-11-25 09:09:12.559433	2013-11-25 09:09:12.559433
3	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg	-46484	trq628	---\n- javascript\n- erlang\n- elixir\n	2014-07-14 08:25:33.561703	2014-07-14 08:25:33.561703
4	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg	-31236	qho440	---\n- python\n	2014-03-28 12:53:59.563897	2014-03-28 12:53:59.563897
5	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg	-4587	qmn837	--- []\n	2014-03-23 20:05:11.56584	2014-03-23 20:05:11.56584
6	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mat_walker/128.jpg	-42523	xwa904	--- []\n	2014-02-01 14:02:24.568847	2014-02-01 14:02:24.568847
7	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg	-16899	blp831	--- []\n	2014-04-16 13:41:48.571252	2014-04-16 13:41:48.571252
8	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg	-74127	ohg747	--- []\n	2014-01-12 10:14:25.572803	2014-01-12 10:14:25.572803
9	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg	-93308	wrt275	--- []\n	2014-01-19 10:52:11.575128	2014-01-19 10:52:11.575128
10	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg	-28024	ykx509	--- []\n	2014-02-28 00:00:13.576651	2014-02-28 00:00:13.576651
11	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg	-19513	kzg582	--- []\n	2014-02-27 19:59:10.579334	2014-02-27 19:59:10.579334
12	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sedovsek/128.jpg	-96002	bbe833	--- []\n	2014-02-10 14:56:44.582123	2014-02-10 14:56:44.582123
13	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/starburst1977/128.jpg	-47199	zqo337	--- []\n	2014-05-08 20:33:31.58382	2014-05-08 20:33:31.58382
14	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg	-91280	ntp439	--- []\n	2014-05-14 17:25:17.586265	2014-05-14 17:25:17.586265
15	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg	-30693	tdb741	--- []\n	2014-03-18 05:54:58.588846	2014-03-18 05:54:58.588846
16	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg	-84624	qvf764	--- []\n	2014-04-14 16:47:29.592611	2014-04-14 16:47:29.592611
17	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg	-9893	asu260	--- []\n	2014-07-10 19:55:54.595454	2014-07-10 19:55:54.595454
18	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg	-40236	bvp822	--- []\n	2013-11-24 13:18:04.598063	2013-11-24 13:18:04.598063
19	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg	-85823	dog302	--- []\n	2013-11-30 19:14:35.600503	2013-11-30 19:14:35.600503
20	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg	-48822	bpm148	--- []\n	2014-05-07 05:19:27.60297	2014-05-07 05:19:27.60297
21	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg	-3344	wgc355	--- []\n	2013-12-16 19:51:57.605374	2013-12-16 19:51:57.605374
22	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg	-94242	anl483	--- []\n	2014-01-14 18:17:12.607824	2014-01-14 18:17:12.607824
23	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg	-69778	oqp971	--- []\n	2013-11-25 10:11:14.610272	2013-11-25 10:11:14.610272
24	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg	-16338	yqa136	--- []\n	2014-01-23 00:05:38.612862	2014-01-23 00:05:38.612862
25	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg	-26434	klc815	--- []\n	2014-06-07 09:38:49.616455	2014-06-07 09:38:49.616455
26	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg	-81927	wcb774	--- []\n	2014-03-13 04:14:42.620002	2014-03-13 04:14:42.620002
27	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg	-62899	qzc235	--- []\n	2014-05-27 04:32:28.623382	2014-05-27 04:32:28.623382
28	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg	-88488	hpk651	--- []\n	2013-11-25 02:17:23.626336	2013-11-25 02:17:23.626336
29	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg	-57942	mjh365	--- []\n	2014-04-16 06:36:09.628882	2014-04-16 06:36:09.628882
30	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg	-65273	trc917	--- []\n	2014-03-20 11:23:37.631232	2014-03-20 11:23:37.631232
31	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tomgreever/128.jpg	-16726	leo225	--- []\n	2014-06-26 01:34:18.633596	2014-06-26 01:34:18.633596
32	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg	-66916	gmh185	--- []\n	2014-07-07 16:33:52.635964	2014-07-07 16:33:52.635964
33	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg	-87671	mcd724	--- []\n	2014-02-02 21:18:05.638276	2014-02-02 21:18:05.638276
34	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg	-30988	dqp532	--- []\n	2014-01-30 02:59:30.640635	2014-01-30 02:59:30.640635
35	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg	-94619	xbe966	--- []\n	2014-01-27 18:43:57.642987	2014-01-27 18:43:57.642987
36	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg	-49706	sap463	--- []\n	2014-02-13 05:58:41.645403	2014-02-13 05:58:41.645403
37	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg	-48547	idx345	--- []\n	2014-06-30 14:49:23.64774	2014-06-30 14:49:23.64774
38	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg	-82609	mbj899	--- []\n	2014-01-05 12:59:53.650253	2014-01-05 12:59:53.650253
39	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg	-67810	pzs287	--- []\n	2014-03-17 04:06:36.652022	2014-03-17 04:06:36.652022
40	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg	-57709	add145	--- []\n	2013-11-13 20:05:16.654432	2013-11-13 20:05:16.654432
41	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/starburst1977/128.jpg	-2251	ysq645	--- []\n	2014-04-22 06:26:26.656776	2014-04-22 06:26:26.656776
42	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg	-83057	enk862	--- []\n	2014-02-17 20:05:27.659155	2014-02-17 20:05:27.659155
43	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg	-75312	wxm469	--- []\n	2014-04-28 21:32:24.661564	2014-04-28 21:32:24.661564
44	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg	-18131	ono438	--- []\n	2013-12-26 10:36:55.664037	2013-12-26 10:36:55.664037
45	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg	-14454	wgd568	--- []\n	2013-12-13 19:16:11.666441	2013-12-13 19:16:11.666441
46	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg	-51167	ull743	--- []\n	2013-11-22 21:07:34.668941	2013-11-22 21:07:34.668941
47	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg	-22320	qdm149	--- []\n	2014-04-26 11:10:02.670464	2014-04-26 11:10:02.670464
48	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg	-26696	vwc641	--- []\n	2014-07-25 03:24:44.672846	2014-07-25 03:24:44.672846
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- PostgreSQL database dump complete
--

