--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: alerts; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE alerts (
    id integer NOT NULL,
    user_id integer NOT NULL,
    text text,
    url character varying(255),
    link_text character varying(255),
    read boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.alerts OWNER TO exercism;

--
-- Name: alerts_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE alerts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.alerts_id_seq OWNER TO exercism;

--
-- Name: alerts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE alerts_id_seq OWNED BY alerts.id;


--
-- Name: comments; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE comments (
    id integer NOT NULL,
    user_id integer NOT NULL,
    submission_id integer NOT NULL,
    body text,
    html_body text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.comments OWNER TO exercism;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO exercism;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: likes; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE likes (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.likes OWNER TO exercism;

--
-- Name: likes_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE likes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.likes_id_seq OWNER TO exercism;

--
-- Name: likes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE likes_id_seq OWNED BY likes.id;


--
-- Name: log_entries; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE log_entries (
    id integer NOT NULL,
    user_id integer,
    body text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.log_entries OWNER TO exercism;

--
-- Name: log_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE log_entries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_entries_id_seq OWNER TO exercism;

--
-- Name: log_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE log_entries_id_seq OWNED BY log_entries.id;


--
-- Name: looks; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE looks (
    id integer NOT NULL,
    user_id integer NOT NULL,
    exercise_id integer NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.looks OWNER TO exercism;

--
-- Name: looks_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE looks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.looks_id_seq OWNER TO exercism;

--
-- Name: looks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE looks_id_seq OWNED BY looks.id;


--
-- Name: muted_submissions; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE muted_submissions (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.muted_submissions OWNER TO exercism;

--
-- Name: muted_submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE muted_submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.muted_submissions_id_seq OWNER TO exercism;

--
-- Name: muted_submissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE muted_submissions_id_seq OWNED BY muted_submissions.id;


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE notifications (
    id integer NOT NULL,
    user_id integer NOT NULL,
    item_id integer,
    regarding character varying(255),
    read boolean,
    count integer DEFAULT 0 NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    item_type character varying(255),
    creator_id integer
);


ALTER TABLE public.notifications OWNER TO exercism;

--
-- Name: notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notifications_id_seq OWNER TO exercism;

--
-- Name: notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE notifications_id_seq OWNED BY notifications.id;


--
-- Name: posts; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE posts (
    id integer NOT NULL,
    slug character varying(255),
    title character varying(255),
    blurb text,
    body text,
    testimonial_keyword character varying(255),
    event_on date,
    archive_on date,
    is_indestructible boolean,
    is_featured boolean,
    is_service boolean,
    priority integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.posts OWNER TO exercism;

--
-- Name: posts_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE posts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.posts_id_seq OWNER TO exercism;

--
-- Name: posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE posts_id_seq OWNED BY posts.id;


--
-- Name: products; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE products (
    id integer NOT NULL,
    title character varying(255),
    price character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    sort_order integer
);


ALTER TABLE public.products OWNER TO exercism;

--
-- Name: products_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE products_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.products_id_seq OWNER TO exercism;

--
-- Name: products_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE products_id_seq OWNED BY products.id;


--
-- Name: quotes; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE quotes (
    id integer NOT NULL,
    body text,
    cite character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.quotes OWNER TO exercism;

--
-- Name: quotes_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE quotes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quotes_id_seq OWNER TO exercism;

--
-- Name: quotes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE quotes_id_seq OWNED BY quotes.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO exercism;

--
-- Name: submission_viewers; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE submission_viewers (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    viewer_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.submission_viewers OWNER TO exercism;

--
-- Name: submission_viewers_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE submission_viewers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.submission_viewers_id_seq OWNER TO exercism;

--
-- Name: submission_viewers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE submission_viewers_id_seq OWNED BY submission_viewers.id;


--
-- Name: submissions; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE submissions (
    id integer NOT NULL,
    user_id integer NOT NULL,
    key character varying(255),
    state character varying(255),
    language character varying(255),
    slug character varying(255),
    code text,
    done_at timestamp without time zone,
    is_liked boolean,
    nit_count integer NOT NULL,
    version integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_exercise_id integer,
    filename character varying(255)
);


ALTER TABLE public.submissions OWNER TO exercism;

--
-- Name: submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.submissions_id_seq OWNER TO exercism;

--
-- Name: submissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE submissions_id_seq OWNED BY submissions.id;


--
-- Name: team_managers; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE team_managers (
    id integer NOT NULL,
    user_id integer NOT NULL,
    team_id integer NOT NULL
);


ALTER TABLE public.team_managers OWNER TO exercism;

--
-- Name: team_managers_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE team_managers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.team_managers_id_seq OWNER TO exercism;

--
-- Name: team_managers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE team_managers_id_seq OWNED BY team_managers.id;


--
-- Name: team_memberships; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE team_memberships (
    id integer NOT NULL,
    team_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    confirmed boolean
);


ALTER TABLE public.team_memberships OWNER TO exercism;

--
-- Name: team_memberships_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE team_memberships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.team_memberships_id_seq OWNER TO exercism;

--
-- Name: team_memberships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE team_memberships_id_seq OWNED BY team_memberships.id;


--
-- Name: teams; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE teams (
    id integer NOT NULL,
    slug character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    name character varying(255)
);


ALTER TABLE public.teams OWNER TO exercism;

--
-- Name: teams_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE teams_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.teams_id_seq OWNER TO exercism;

--
-- Name: teams_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE teams_id_seq OWNED BY teams.id;


--
-- Name: testimonials; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE testimonials (
    id integer NOT NULL,
    body text,
    name character varying(255),
    about character varying(255),
    homepage character varying(255),
    keyword character varying(255),
    featured boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.testimonials OWNER TO exercism;

--
-- Name: testimonials_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE testimonials_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testimonials_id_seq OWNER TO exercism;

--
-- Name: testimonials_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE testimonials_id_seq OWNED BY testimonials.id;


--
-- Name: user_exercises; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE user_exercises (
    id integer NOT NULL,
    user_id integer NOT NULL,
    language character varying(255),
    slug character varying(255),
    iteration_count integer,
    state character varying(255),
    completed_at timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    key character varying(255),
    is_nitpicker boolean DEFAULT false
);


ALTER TABLE public.user_exercises OWNER TO exercism;

--
-- Name: user_exercises_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE user_exercises_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_exercises_id_seq OWNER TO exercism;

--
-- Name: user_exercises_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE user_exercises_id_seq OWNED BY user_exercises.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    username character varying(255),
    email character varying(255),
    avatar_url character varying(255),
    github_id integer,
    key character varying(255),
    mastery text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.users OWNER TO exercism;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO exercism;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY alerts ALTER COLUMN id SET DEFAULT nextval('alerts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY likes ALTER COLUMN id SET DEFAULT nextval('likes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY log_entries ALTER COLUMN id SET DEFAULT nextval('log_entries_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY looks ALTER COLUMN id SET DEFAULT nextval('looks_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY muted_submissions ALTER COLUMN id SET DEFAULT nextval('muted_submissions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY notifications ALTER COLUMN id SET DEFAULT nextval('notifications_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY posts ALTER COLUMN id SET DEFAULT nextval('posts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY products ALTER COLUMN id SET DEFAULT nextval('products_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY quotes ALTER COLUMN id SET DEFAULT nextval('quotes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY submission_viewers ALTER COLUMN id SET DEFAULT nextval('submission_viewers_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY submissions ALTER COLUMN id SET DEFAULT nextval('submissions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY team_managers ALTER COLUMN id SET DEFAULT nextval('team_managers_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY team_memberships ALTER COLUMN id SET DEFAULT nextval('team_memberships_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY teams ALTER COLUMN id SET DEFAULT nextval('teams_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY testimonials ALTER COLUMN id SET DEFAULT nextval('testimonials_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY user_exercises ALTER COLUMN id SET DEFAULT nextval('user_exercises_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	7	Your exercise phone-number in haskell has gone into hibernation.	/bob/960e72e7cfea0d7f5b5a9b30	View submission.	f	2014-06-19 18:51:57	2014-06-19 18:51:57
2	7	Your exercise bob in ruby has gone into hibernation.	/bob/e679f6e96df925e4b71ce50f	View submission.	f	2014-07-01 08:46:16	2014-07-01 08:46:16
3	7	Your exercise bob in javascript has gone into hibernation.	/bob/7f53a705f1c13bdf351c0acf	View submission.	f	2014-06-27 00:32:42	2014-06-27 00:32:42
4	7	Your exercise anagram in clojure has gone into hibernation.	/bob/20db02da757eb701dbe990c4	View submission.	f	2014-07-02 04:39:00	2014-07-02 04:39:00
5	7	Your exercise bob in haskell has gone into hibernation.	/bob/c7e1750caa61e9a12f31cebb	View submission.	f	2014-06-26 15:20:42	2014-06-26 15:20:42
6	7	Your exercise luhn in haskell has gone into hibernation.	/bob/c315d4c9f1e2d268baf94fa9	View submission.	f	2014-06-23 17:40:59	2014-06-23 17:40:59
7	3	Your exercise word-count in javascript has gone into hibernation.	/diana/02bb54ff5274a978472238f4	View submission.	f	2014-06-11 05:12:45	2014-06-11 05:12:45
8	4	Your exercise sieve in haskell has gone into hibernation.	/eve/93636055236b4ddae4311ea6	View submission.	f	2014-06-29 11:19:06	2014-06-29 11:19:06
9	21	Your exercise bob in ruby has gone into hibernation.	/mary/981e04cc0e7706afd9ce8be4	View submission.	f	2014-06-24 07:46:58	2014-06-24 07:46:58
10	19	Your exercise etl in go has gone into hibernation.	/madison/00adf72d3c9a6dfaf0b02be9	View submission.	f	2014-06-17 04:51:23	2014-06-17 04:51:23
11	19	Your exercise bob in python has gone into hibernation.	/madison/35b434461c777ecf71944b94	View submission.	f	2014-02-19 08:54:38	2014-02-19 08:54:38
12	19	Your exercise word-count in javascript has gone into hibernation.	/madison/03f90e1a5cf1ad5d63a40eae	View submission.	f	2014-06-23 11:52:22	2014-06-23 11:52:22
13	19	Your exercise beer-song in javascript has gone into hibernation.	/madison/af12a088528d57a241ac3494	View submission.	f	2014-06-19 04:56:37	2014-06-19 04:56:37
14	24	Your exercise bob in python has gone into hibernation.	/mildred/76ba25970caeee1da54e101a	View submission.	f	2014-06-14 04:57:39	2014-06-14 04:57:39
15	18	Your exercise anagram in go has gone into hibernation.	/mack/ce6ce940d4cc04ace93d1325	View submission.	f	2014-06-28 06:37:44	2014-06-28 06:37:44
16	18	Your exercise hamming in ruby has gone into hibernation.	/mack/8348dd683da487aa837a40b1	View submission.	f	2014-06-29 22:49:47	2014-06-29 22:49:47
17	23	Your exercise rna-transcription in python has gone into hibernation.	/mike/daffddbdcec5986dc6b653f0	View submission.	f	2014-05-29 20:56:16	2014-05-29 20:56:16
18	23	Your exercise beer-song in ruby has gone into hibernation.	/mike/e7d83836cde6cc83815c84eb	View submission.	f	2014-06-12 03:50:41	2014-06-12 03:50:41
19	23	Your exercise bob in clojure has gone into hibernation.	/mike/a60b0be74a6006eb6e09b5cc	View submission.	f	2014-06-19 21:10:13	2014-06-19 21:10:13
20	25	Your exercise raindrops in ruby has gone into hibernation.	/mitchell/9b9a714174011b3f1cc034ae	View submission.	f	2014-05-27 23:04:04	2014-05-27 23:04:04
21	25	Your exercise word-count in python has gone into hibernation.	/mitchell/ae0ee53edf0a6af82e5149da	View submission.	f	2014-05-31 19:15:15	2014-05-31 19:15:15
22	25	Your exercise bob in javascript has gone into hibernation.	/mitchell/033f149cb8e5ec0d83e33c65	View submission.	f	2014-04-08 18:53:17	2014-04-08 18:53:17
23	25	Your exercise grade-school in clojure has gone into hibernation.	/mitchell/457a8110e989faa49391a145	View submission.	f	2014-05-12 00:21:41	2014-05-12 00:21:41
24	25	Your exercise bob in python has gone into hibernation.	/mitchell/d292d7eeb48cc63b517f6240	View submission.	f	2014-06-29 12:44:07	2014-06-29 12:44:07
25	20	Your exercise food-chain in haskell has gone into hibernation.	/marshall/0d3c46b47e342d0ff2fb64d2	View submission.	f	2014-06-01 02:08:15	2014-06-01 02:08:15
26	20	Your exercise etl in go has gone into hibernation.	/marshall/189478050cae52434bb0001d	View submission.	f	2014-03-30 11:10:08	2014-03-30 11:10:08
27	20	Your exercise bob in clojure has gone into hibernation.	/marshall/875ab3295ba5272cd0885071	View submission.	f	2014-04-24 23:51:57	2014-04-24 23:51:57
28	5	Your exercise grade-school in clojure has gone into hibernation.	/amelie/457a8110e989faa49391a145	View submission.	f	2014-04-16 04:16:00	2014-04-16 04:16:00
29	6	Your exercise grade-school in haskell has gone into hibernation.	/beth/2f48d12ee427b7159bf31141	View submission.	f	2014-01-31 17:46:45	2014-01-31 17:46:45
30	6	Your exercise word-count in clojure has gone into hibernation.	/beth/f6dceb5e3f424a089560cae6	View submission.	f	2014-05-17 17:50:48	2014-05-17 17:50:48
31	6	Your exercise space-age in ruby has gone into hibernation.	/beth/570db92d163d76e4f65f62b2	View submission.	f	2014-05-07 04:30:43	2014-05-07 04:30:43
32	6	Your exercise hamming in ruby has gone into hibernation.	/beth/f41939509e6a7d774ac0a330	View submission.	f	2014-03-21 00:06:16	2014-03-21 00:06:16
33	6	Your exercise rna-transcription in clojure has gone into hibernation.	/beth/0ccbb53bccfa7f88e2b1cc3d	View submission.	f	2014-05-18 17:37:07	2014-05-18 17:37:07
34	8	Your exercise nth-prime in haskell has gone into hibernation.	/claire/b194be7a6dcf8cb9723aa35b	View submission.	f	2014-05-20 17:58:47	2014-05-20 17:58:47
35	8	Your exercise anagram in scala has gone into hibernation.	/claire/89cabb87cbe93fcdc2e6a35c	View submission.	f	2014-06-25 17:19:43	2014-06-25 17:19:43
36	8	Your exercise leap in ruby has gone into hibernation.	/claire/b38123922a4375d6ae4fd7aa	View submission.	f	2014-05-19 19:05:06	2014-05-19 19:05:06
37	9	Your exercise meetup in javascript has gone into hibernation.	/dawson/485f7c145ed0a0dc77ab70e2	View submission.	f	2014-06-10 03:13:47	2014-06-10 03:13:47
38	9	Your exercise beer-song in javascript has gone into hibernation.	/dawson/8dae37227b9c363d4327aa9f	View submission.	f	2014-05-25 00:56:03	2014-05-25 00:56:03
39	11	Your exercise raindrops in ruby has gone into hibernation.	/frederique/3542b72af963a4e10aeb8953	View submission.	f	2014-06-09 14:57:35	2014-06-09 14:57:35
40	12	Your exercise leap in ruby has gone into hibernation.	/grace/2b4645a5e5d2960c17cfdc2d	View submission.	f	2014-04-14 04:24:09	2014-04-14 04:24:09
41	12	Your exercise proverb in ruby has gone into hibernation.	/grace/1074fb892db39ca743fcc5d2	View submission.	f	2014-05-16 18:18:14	2014-05-16 18:18:14
42	12	Your exercise anagram in ruby has gone into hibernation.	/grace/235a77bbd76fbe85faf8147c	View submission.	f	2014-06-11 12:24:24	2014-06-11 12:24:24
43	12	Your exercise bob in python has gone into hibernation.	/grace/fc2eff7f0a8014f907456340	View submission.	f	2014-05-28 12:58:19	2014-05-28 12:58:19
44	13	Your exercise leap in ruby has gone into hibernation.	/haley/fe9221fb5efbedb24abb0630	View submission.	f	2014-06-30 19:46:31	2014-06-30 19:46:31
45	13	Your exercise anagram in ruby has gone into hibernation.	/haley/f27086773f70213e1dfd326a	View submission.	f	2014-06-19 00:57:17	2014-06-19 00:57:17
46	14	Your exercise word-count in haskell has gone into hibernation.	/isaac/3d8fd2f2acd619e4ad4c3123	View submission.	f	2014-07-01 13:06:22	2014-07-01 13:06:22
47	14	Your exercise bob in ruby has gone into hibernation.	/isaac/2f8764b7b14039c32e8f389b	View submission.	f	2014-05-05 10:34:51	2014-05-05 10:34:51
48	14	Your exercise nucleotide-count in ruby has gone into hibernation.	/isaac/46d0668859bb87099089cefc	View submission.	f	2014-06-24 02:15:58	2014-06-24 02:15:58
49	14	Your exercise anagram in ruby has gone into hibernation.	/isaac/62bef7b41dd8b3b1f89ac9e0	View submission.	f	2014-06-24 19:15:46	2014-06-24 19:15:46
50	15	Your exercise hamming in ruby has gone into hibernation.	/jarrod/7303effb57f0a3caa3e6b9bd	View submission.	f	2014-06-28 11:43:53	2014-06-28 11:43:53
51	15	Your exercise bob in python has gone into hibernation.	/jarrod/fc2eff7f0a8014f907456340	View submission.	f	2014-06-29 13:08:46	2014-06-29 13:08:46
52	15	Your exercise bob in ruby has gone into hibernation.	/jarrod/876e27babb8bfbf834789027	View submission.	f	2014-06-23 22:40:01	2014-06-23 22:40:01
53	16	Your exercise word-count in ruby has gone into hibernation.	/kieran/f64552a65c549b1f0053a774	View submission.	f	2014-05-30 06:17:07	2014-05-30 06:17:07
54	17	Your exercise nucleotide-count in ruby has gone into hibernation.	/lisa/65ed5f3ab6ebe8ab30543d76	View submission.	f	2014-04-26 05:28:55	2014-04-26 05:28:55
55	22	Your exercise leap in ruby has gone into hibernation.	/mia/dcba4da31371b85bedb4c6a6	View submission.	f	2014-06-04 22:42:05	2014-06-04 22:42:05
56	22	Your exercise meetup in haskell has gone into hibernation.	/mia/91f9a2093b4b79dc88f05d42	View submission.	f	2014-05-14 10:52:29	2014-05-14 10:52:29
57	27	Your exercise grade-school in ruby has gone into hibernation.	/norma/647832a53d87538663464f8f	View submission.	f	2014-02-22 07:19:10	2014-02-22 07:19:10
58	27	Your exercise etl in ruby has gone into hibernation.	/norma/d7ac464eda378d7502174a85	View submission.	f	2014-03-13 05:34:10	2014-03-13 05:34:10
59	27	Your exercise roman-numerals in ruby has gone into hibernation.	/norma/6c25c0878a47a79ba7854be5	View submission.	f	2014-05-13 03:24:30	2014-05-13 03:24:30
60	28	Your exercise bob in clojure has gone into hibernation.	/opal/0833f825bcb53fa76cc87d1a	View submission.	f	2014-01-20 22:21:30	2014-01-20 22:21:30
61	28	Your exercise nucleotide-count in haskell has gone into hibernation.	/opal/b573e3fbb4ddba034274ac07	View submission.	f	2014-07-02 01:57:36	2014-07-02 01:57:36
62	29	Your exercise rna-transcription in ruby has gone into hibernation.	/paula/edc3a69e52acc6165b10b1b5	View submission.	f	2014-03-25 06:04:00	2014-03-25 06:04:00
63	30	Your exercise beer-song in elixir has gone into hibernation.	/quentin/a755a73b01c4315d0a938a48	View submission.	f	2014-06-14 14:51:35	2014-06-14 14:51:35
64	30	Your exercise bob in ruby has gone into hibernation.	/quentin/587d689832cf05bc26241306	View submission.	f	2014-06-19 04:30:49	2014-06-19 04:30:49
65	30	Your exercise anagram in haskell has gone into hibernation.	/quentin/c8215631f0bea6f7cf1944e4	View submission.	f	2014-07-02 17:01:03	2014-07-02 17:01:03
66	30	Your exercise rna-transcription in ruby has gone into hibernation.	/quentin/957497d9d451c7e2758794fa	View submission.	f	2014-06-25 02:17:35	2014-06-25 02:17:35
67	37	Your exercise anagram in haskell has gone into hibernation.	/ruben/4df0171041fd4509f7fca742	View submission.	f	2014-02-21 00:38:39	2014-02-21 00:38:39
68	37	Your exercise proverb in ruby has gone into hibernation.	/ruben/693bf5b2105d7dcab7dcc56d	View submission.	f	2014-06-03 13:49:22	2014-06-03 13:49:22
69	41	Your exercise grains in ruby has gone into hibernation.	/shaina/a480cfd44cbc89f921098570	View submission.	f	2014-06-04 20:23:32	2014-06-04 20:23:32
70	41	Your exercise hamming in ruby has gone into hibernation.	/shaina/0a7eef69a6a825679b907c03	View submission.	f	2014-06-01 05:11:47	2014-06-01 05:11:47
71	41	Your exercise bob in ruby has gone into hibernation.	/shaina/f7ba0f793020f772e3e42cd5	View submission.	f	2014-06-18 12:12:07	2014-06-18 12:12:07
72	41	Your exercise rna-transcription in python has gone into hibernation.	/shaina/3e508a1865c662bd710efa08	View submission.	f	2014-05-27 12:16:56	2014-05-27 12:16:56
73	42	Your exercise word-count in elixir has gone into hibernation.	/talia/40773f88f699d1be6e827cdd	View submission.	f	2014-01-15 14:18:25	2014-01-15 14:18:25
74	42	Your exercise raindrops in ruby has gone into hibernation.	/talia/113a782ec4c9e1ad8dc840d0	View submission.	f	2014-05-09 06:52:12	2014-05-09 06:52:12
75	42	Your exercise binary in haskell has gone into hibernation.	/talia/20bfa0042ad115c12dcbff2b	View submission.	f	2014-06-16 22:25:26	2014-06-16 22:25:26
76	43	Your exercise leap in ruby has gone into hibernation.	/ursula/0d1b219b670f871e0f99f21e	View submission.	f	2014-02-10 00:02:10	2014-02-10 00:02:10
77	43	Your exercise matrix in haskell has gone into hibernation.	/ursula/8be10e733e487bd934f8364b	View submission.	f	2014-04-18 23:58:50	2014-04-18 23:58:50
78	43	Your exercise word-count in javascript has gone into hibernation.	/ursula/f1f8ff7be9067ba0cdaaf05a	View submission.	f	2014-06-17 05:36:19	2014-06-17 05:36:19
79	43	Your exercise word-count in elixir has gone into hibernation.	/ursula/5d208dab53a4e9860c1c33f0	View submission.	f	2014-01-30 22:59:17	2014-01-30 22:59:17
80	44	Your exercise leap in ruby has gone into hibernation.	/vince/f6649be419aaf622ce381089	View submission.	f	2014-05-23 20:48:36	2014-05-23 20:48:36
81	45	Your exercise bob in javascript has gone into hibernation.	/wilson/4ca0436689bd86b557b132a1	View submission.	f	2014-06-29 07:57:14	2014-06-29 07:57:14
82	45	Your exercise rna-transcription in javascript has gone into hibernation.	/wilson/a201de21e2d5b03aaf173a8a	View submission.	f	2014-06-01 07:29:56	2014-06-01 07:29:56
83	46	Your exercise bob in python has gone into hibernation.	/xavier/c4cb1679fe74c18807599e5b	View submission.	f	2014-06-28 16:43:33	2014-06-28 16:43:33
84	46	Your exercise grade-school in clojure has gone into hibernation.	/xavier/974fd17a7cd6e5424e087a85	View submission.	f	2014-06-20 09:07:37	2014-06-20 09:07:37
85	47	Your exercise bob in clojure has gone into hibernation.	/yvette/c37ddec5ddf2b681ee994ed2	View submission.	f	2014-06-21 04:05:57	2014-06-21 04:05:57
86	47	Your exercise grains in ruby has gone into hibernation.	/yvette/96501b045e2721b615dd0dff	View submission.	f	2014-06-26 22:07:17	2014-06-26 22:07:17
87	47	Your exercise leap in ruby has gone into hibernation.	/yvette/8dcf805a7e0e8a96ac4045cb	View submission.	f	2014-06-21 23:30:25	2014-06-21 23:30:25
88	48	Your exercise rna-transcription in python has gone into hibernation.	/zachary/c7a422be452058fd202e2212	View submission.	f	2014-05-27 23:46:48	2014-05-27 23:46:48
89	48	Your exercise bank-account in haskell has gone into hibernation.	/zachary/0f8c755b7a4b0b3d97a630f5	View submission.	f	2014-06-13 01:50:30	2014-06-13 01:50:30
90	31	Your exercise scrabble-score in ruby has gone into hibernation.	/rachel/c6c10adc75b8575fae29ee89	View submission.	f	2014-06-19 22:33:09	2014-06-19 22:33:09
91	31	Your exercise grains in ruby has gone into hibernation.	/rachel/1b9cabd1364ad8c2f32cfa56	View submission.	f	2014-05-30 23:12:42	2014-05-30 23:12:42
92	31	Your exercise space-age in ruby has gone into hibernation.	/rachel/9f349fa98e77fbb35b2b3f8c	View submission.	f	2014-06-23 23:48:49	2014-06-23 23:48:49
93	31	Your exercise word-count in ruby has gone into hibernation.	/rachel/b9faf47a7a315a03331e141c	View submission.	f	2014-06-28 12:23:46	2014-06-28 12:23:46
94	39	Your exercise bob in ruby has gone into hibernation.	/russ/d9fc7d598411ab913bc29871	View submission.	f	2014-07-01 14:00:08	2014-07-01 14:00:08
95	39	Your exercise leap in ruby has gone into hibernation.	/russ/db18c03535b4ba19d2436bf2	View submission.	f	2014-06-17 14:14:01	2014-06-17 14:14:01
96	39	Your exercise robot-name in ruby has gone into hibernation.	/russ/ca3410dec3df613d49d3a2bf	View submission.	f	2014-06-08 11:16:28	2014-06-08 11:16:28
97	36	Your exercise phone-number in ruby has gone into hibernation.	/rolf/2ebac8b3ed645c1b995b482d	View submission.	f	2014-05-28 05:21:29	2014-05-28 05:21:29
98	36	Your exercise hamming in ruby has gone into hibernation.	/rolf/77264e589ec6febba27e0ffd	View submission.	f	2014-04-10 16:26:28	2014-04-10 16:26:28
99	36	Your exercise bob in ruby has gone into hibernation.	/rolf/cdec689118402ad4628e003d	View submission.	f	2014-06-23 13:22:53	2014-06-23 13:22:53
100	36	Your exercise leap in ruby has gone into hibernation.	/rolf/9d8a28ba18f6d96b15d1ddfa	View submission.	f	2014-06-26 22:57:46	2014-06-26 22:57:46
101	32	Your exercise bob in ruby has gone into hibernation.	/randall/af5723ff10c3b05d10a67767	View submission.	f	2014-06-19 21:04:56	2014-06-19 21:04:56
102	32	Your exercise grade-school in ruby has gone into hibernation.	/randall/6ed9a8f8cfcdd6606d7c5273	View submission.	f	2014-06-30 23:17:32	2014-06-30 23:17:32
103	35	Your exercise leap in ruby has gone into hibernation.	/river/18103be044881b8a41c84943	View submission.	f	2014-07-01 02:08:06	2014-07-01 02:08:06
104	40	Your exercise raindrops in ruby has gone into hibernation.	/ryan/3b5b93faf10bd2d387e39643	View submission.	f	2014-06-24 08:44:04	2014-06-24 08:44:04
105	40	Your exercise proverb in ruby has gone into hibernation.	/ryan/6cf4e5ab55591fce35cd5860	View submission.	f	2014-07-02 10:58:56	2014-07-02 10:58:56
106	40	Your exercise nucleotide-count in ruby has gone into hibernation.	/ryan/20d5def547c1eb57a09a0cf8	View submission.	f	2014-06-18 07:13:59	2014-06-18 07:13:59
107	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-05-25 22:05:50	2014-05-25 22:05:50
108	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-01-13 07:50:33	2014-01-13 07:50:33
109	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-06-17 07:50:15	2014-06-17 07:50:15
110	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2013-12-02 21:18:50	2013-12-02 21:18:50
111	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-05-20 01:49:45	2014-05-20 01:49:45
112	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2013-12-14 11:42:19	2013-12-14 11:42:19
113	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-08 10:01:09	2014-03-08 10:01:09
114	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2013-12-10 00:35:12	2013-12-10 00:35:12
115	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-06-26 14:08:47	2014-06-26 14:08:47
116	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-06-30 03:54:42	2014-06-30 03:54:42
117	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-03-13 06:13:23	2014-03-13 06:13:23
118	7	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-06-27 07:38:48	2014-06-27 07:38:48
119	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-06-07 21:05:55	2014-06-07 21:05:55
120	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-05-26 18:35:10	2014-05-26 18:35:10
121	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-06-16 19:30:37	2014-06-16 19:30:37
122	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-02-15 06:39:05	2014-02-15 06:39:05
123	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-06-01 22:03:05	2014-06-01 22:03:05
124	7	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2013-12-30 09:13:46	2013-12-30 09:13:46
125	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-06-23 01:32:09	2014-06-23 01:32:09
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 125, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	23	1	NO COMMENT	\N	2014-06-15 18:38:35	2014-06-15 18:38:35
2	42	1	NO COMMENT	\N	2014-06-20 12:42:03	2014-06-20 12:42:03
3	48	1	NO COMMENT	\N	2014-06-26 21:50:35	2014-06-26 21:50:35
4	2	3	NO COMMENT	\N	2014-06-22 02:12:17	2014-06-22 02:12:17
5	42	3	NO COMMENT	\N	2014-06-26 08:01:45	2014-06-26 08:01:45
6	20	3	NO COMMENT	\N	2014-06-28 23:28:09	2014-06-28 23:28:09
7	48	3	NO COMMENT	\N	2014-06-30 08:41:33	2014-06-30 08:41:33
8	1	4	NO COMMENT	\N	2014-06-18 02:12:21	2014-06-18 02:12:21
9	2	4	NO COMMENT	\N	2014-06-23 20:51:12	2014-06-23 20:51:12
10	22	4	NO COMMENT	\N	2014-06-29 04:50:05	2014-06-29 04:50:05
11	23	5	NO COMMENT	\N	2014-06-18 15:33:07	2014-06-18 15:33:07
12	34	5	NO COMMENT	\N	2014-06-22 19:25:25	2014-06-22 19:25:25
13	1	5	NO COMMENT	\N	2014-06-22 20:43:56	2014-06-22 20:43:56
14	2	5	NO COMMENT	\N	2014-06-30 02:13:22	2014-06-30 02:13:22
15	1	6	NO COMMENT	\N	2014-06-16 07:26:56	2014-06-16 07:26:56
16	34	6	NO COMMENT	\N	2014-06-17 07:05:20	2014-06-17 07:05:20
17	2	6	NO COMMENT	\N	2014-06-28 15:55:45	2014-06-28 15:55:45
18	23	6	NO COMMENT	\N	2014-06-29 09:21:07	2014-06-29 09:21:07
19	34	8	NO COMMENT	\N	2014-06-22 23:16:33	2014-06-22 23:16:33
20	23	8	NO COMMENT	\N	2014-06-24 10:53:58	2014-06-24 10:53:58
21	2	8	NO COMMENT	\N	2014-06-26 10:56:25	2014-06-26 10:56:25
22	1	8	NO COMMENT	\N	2014-07-02 10:27:26	2014-07-02 10:27:26
23	2	10	NO COMMENT	\N	2014-06-22 12:37:51	2014-06-22 12:37:51
24	34	10	NO COMMENT	\N	2014-06-27 16:01:29	2014-06-27 16:01:29
25	23	10	NO COMMENT	\N	2014-06-29 01:00:57	2014-06-29 01:00:57
26	1	10	NO COMMENT	\N	2014-06-29 14:58:13	2014-06-29 14:58:13
27	34	11	NO COMMENT	\N	2014-06-29 05:53:18	2014-06-29 05:53:18
28	2	11	NO COMMENT	\N	2014-06-30 05:38:00	2014-06-30 05:38:00
29	23	11	NO COMMENT	\N	2014-07-01 11:57:04	2014-07-01 11:57:04
30	1	11	NO COMMENT	\N	2014-07-01 23:02:42	2014-07-01 23:02:42
31	17	12	NO COMMENT	\N	2014-06-11 22:57:57	2014-06-11 22:57:57
32	16	12	NO COMMENT	\N	2014-06-12 19:38:12	2014-06-12 19:38:12
33	2	12	NO COMMENT	\N	2014-06-17 22:56:00	2014-06-17 22:56:00
34	37	12	NO COMMENT	\N	2014-06-18 03:01:24	2014-06-18 03:01:24
35	1	12	NO COMMENT	\N	2014-06-22 05:00:41	2014-06-22 05:00:41
36	13	12	NO COMMENT	\N	2014-06-30 23:36:05	2014-06-30 23:36:05
37	1	13	NO COMMENT	\N	2014-06-15 15:44:06	2014-06-15 15:44:06
38	2	13	NO COMMENT	\N	2014-06-18 07:17:04	2014-06-18 07:17:04
39	2	15	NO COMMENT	\N	2014-06-24 18:06:55	2014-06-24 18:06:55
40	1	15	NO COMMENT	\N	2014-06-30 09:57:19	2014-06-30 09:57:19
41	20	17	NO COMMENT	\N	2014-06-14 04:26:27	2014-06-14 04:26:27
42	17	17	NO COMMENT	\N	2014-06-14 21:03:49	2014-06-14 21:03:49
43	45	17	NO COMMENT	\N	2014-06-15 10:59:35	2014-06-15 10:59:35
44	1	17	NO COMMENT	\N	2014-06-15 23:33:35	2014-06-15 23:33:35
45	12	17	NO COMMENT	\N	2014-06-16 17:34:17	2014-06-16 17:34:17
46	43	17	NO COMMENT	\N	2014-06-16 18:23:02	2014-06-16 18:23:02
47	29	17	NO COMMENT	\N	2014-06-17 01:50:42	2014-06-17 01:50:42
48	37	17	NO COMMENT	\N	2014-06-23 03:52:56	2014-06-23 03:52:56
49	2	17	NO COMMENT	\N	2014-06-25 14:36:05	2014-06-25 14:36:05
50	31	17	NO COMMENT	\N	2014-06-27 04:34:04	2014-06-27 04:34:04
51	16	17	NO COMMENT	\N	2014-06-27 17:54:41	2014-06-27 17:54:41
52	11	17	NO COMMENT	\N	2014-06-28 18:21:05	2014-06-28 18:21:05
53	19	17	NO COMMENT	\N	2014-06-29 23:53:40	2014-06-29 23:53:40
54	25	17	NO COMMENT	\N	2014-07-02 10:42:52	2014-07-02 10:42:52
55	35	17	NO COMMENT	\N	2014-07-02 19:07:23	2014-07-02 19:07:23
56	11	18	NO COMMENT	\N	2014-06-25 01:21:02	2014-06-25 01:21:02
57	12	18	NO COMMENT	\N	2014-06-25 03:16:48	2014-06-25 03:16:48
58	29	18	NO COMMENT	\N	2014-06-29 19:12:05	2014-06-29 19:12:05
59	45	19	NO COMMENT	\N	2014-06-28 01:22:05	2014-06-28 01:22:05
60	9	19	NO COMMENT	\N	2014-07-01 19:34:57	2014-07-01 19:34:57
61	29	20	NO COMMENT	\N	2014-06-22 02:50:56	2014-06-22 02:50:56
62	2	20	NO COMMENT	\N	2014-06-28 07:50:30	2014-06-28 07:50:30
63	1	20	NO COMMENT	\N	2014-06-28 22:54:11	2014-06-28 22:54:11
64	1	21	NO COMMENT	\N	2014-06-20 05:07:46	2014-06-20 05:07:46
65	2	21	NO COMMENT	\N	2014-06-30 15:30:15	2014-06-30 15:30:15
66	29	21	NO COMMENT	\N	2014-07-01 00:13:52	2014-07-01 00:13:52
67	26	24	NO COMMENT	\N	2014-06-09 01:01:25	2014-06-09 01:01:25
68	43	24	NO COMMENT	\N	2014-06-16 00:00:46	2014-06-16 00:00:46
69	1	24	NO COMMENT	\N	2014-06-16 20:22:32	2014-06-16 20:22:32
70	14	24	NO COMMENT	\N	2014-06-18 09:40:45	2014-06-18 09:40:45
71	9	24	NO COMMENT	\N	2014-06-18 11:59:58	2014-06-18 11:59:58
72	19	24	NO COMMENT	\N	2014-06-26 02:48:43	2014-06-26 02:48:43
73	6	24	NO COMMENT	\N	2014-06-28 12:02:37	2014-06-28 12:02:37
74	2	24	NO COMMENT	\N	2014-06-30 09:35:29	2014-06-30 09:35:29
75	17	24	NO COMMENT	\N	2014-07-01 12:49:57	2014-07-01 12:49:57
76	22	25	NO COMMENT	\N	2014-06-20 11:32:45	2014-06-20 11:32:45
77	2	25	NO COMMENT	\N	2014-06-23 08:40:47	2014-06-23 08:40:47
78	27	25	NO COMMENT	\N	2014-06-24 16:53:34	2014-06-24 16:53:34
79	1	25	NO COMMENT	\N	2014-06-25 14:37:47	2014-06-25 14:37:47
80	43	25	NO COMMENT	\N	2014-06-30 05:49:58	2014-06-30 05:49:58
81	24	25	NO COMMENT	\N	2014-06-30 18:28:49	2014-06-30 18:28:49
82	34	25	NO COMMENT	\N	2014-07-01 15:09:19	2014-07-01 15:09:19
83	2	26	NO COMMENT	\N	2014-06-25 20:52:56	2014-06-25 20:52:56
84	1	26	NO COMMENT	\N	2014-07-01 04:48:09	2014-07-01 04:48:09
85	19	27	NO COMMENT	\N	2014-06-08 08:51:05	2014-06-08 08:51:05
86	13	27	NO COMMENT	\N	2014-06-16 01:28:40	2014-06-16 01:28:40
87	2	27	NO COMMENT	\N	2014-06-22 05:03:03	2014-06-22 05:03:03
88	1	27	NO COMMENT	\N	2014-06-25 17:27:58	2014-06-25 17:27:58
89	8	27	NO COMMENT	\N	2014-06-30 07:11:54	2014-06-30 07:11:54
90	28	27	NO COMMENT	\N	2014-06-30 17:00:29	2014-06-30 17:00:29
91	29	27	NO COMMENT	\N	2014-07-02 05:26:43	2014-07-02 05:26:43
92	1	28	NO COMMENT	\N	2014-06-16 13:21:42	2014-06-16 13:21:42
93	2	28	NO COMMENT	\N	2014-06-18 04:35:03	2014-06-18 04:35:03
94	1	29	NO COMMENT	\N	2014-06-22 07:43:31	2014-06-22 07:43:31
95	2	29	NO COMMENT	\N	2014-06-30 23:54:04	2014-06-30 23:54:04
96	37	33	NO COMMENT	\N	2014-06-20 13:47:27	2014-06-20 13:47:27
97	4	74	NO COMMENT	\N	2014-06-26 07:32:50	2014-06-26 07:32:50
98	1	74	NO COMMENT	\N	2014-06-26 11:57:51	2014-06-26 11:57:51
99	44	34	NO COMMENT	\N	2014-06-18 21:55:17	2014-06-18 21:55:17
100	2	34	NO COMMENT	\N	2014-06-30 17:51:27	2014-06-30 17:51:27
101	1	34	NO COMMENT	\N	2014-07-01 02:52:29	2014-07-01 02:52:29
102	43	35	NO COMMENT	\N	2014-06-15 05:31:47	2014-06-15 05:31:47
103	30	35	NO COMMENT	\N	2014-06-17 01:31:15	2014-06-17 01:31:15
104	48	35	NO COMMENT	\N	2014-06-19 20:44:46	2014-06-19 20:44:46
105	41	35	NO COMMENT	\N	2014-06-25 22:43:55	2014-06-25 22:43:55
106	36	35	NO COMMENT	\N	2014-06-29 21:31:33	2014-06-29 21:31:33
107	36	36	NO COMMENT	\N	2014-07-02 11:05:07	2014-07-02 11:05:07
108	30	37	NO COMMENT	\N	2014-06-26 04:20:34	2014-06-26 04:20:34
109	1	37	NO COMMENT	\N	2014-06-28 08:35:06	2014-06-28 08:35:06
110	43	39	NO COMMENT	\N	2014-06-25 22:38:10	2014-06-25 22:38:10
111	48	39	NO COMMENT	\N	2014-06-26 13:35:48	2014-06-26 13:35:48
112	1	39	NO COMMENT	\N	2014-06-29 00:27:44	2014-06-29 00:27:44
113	30	39	NO COMMENT	\N	2014-06-29 20:25:27	2014-06-29 20:25:27
114	22	41	NO COMMENT	\N	2014-06-14 21:08:26	2014-06-14 21:08:26
115	42	41	NO COMMENT	\N	2014-06-20 14:57:29	2014-06-20 14:57:29
116	29	41	NO COMMENT	\N	2014-06-22 15:25:21	2014-06-22 15:25:21
117	39	41	NO COMMENT	\N	2014-06-27 00:43:12	2014-06-27 00:43:12
118	27	41	NO COMMENT	\N	2014-06-28 00:13:34	2014-06-28 00:13:34
119	27	42	NO COMMENT	\N	2014-06-10 13:53:29	2014-06-10 13:53:29
120	39	42	NO COMMENT	\N	2014-06-11 02:12:32	2014-06-11 02:12:32
121	29	42	NO COMMENT	\N	2014-06-13 00:44:10	2014-06-13 00:44:10
122	42	42	NO COMMENT	\N	2014-06-19 17:13:11	2014-06-19 17:13:11
123	22	42	NO COMMENT	\N	2014-06-23 07:47:04	2014-06-23 07:47:04
124	2	42	NO COMMENT	\N	2014-06-30 19:35:33	2014-06-30 19:35:33
125	1	42	NO COMMENT	\N	2014-07-02 03:37:01	2014-07-02 03:37:01
126	47	43	NO COMMENT	\N	2014-07-01 14:41:53	2014-07-01 14:41:53
127	47	44	NO COMMENT	\N	2014-06-30 01:45:47	2014-06-30 01:45:47
128	22	44	NO COMMENT	\N	2014-06-30 06:02:49	2014-06-30 06:02:49
129	45	44	NO COMMENT	\N	2014-07-01 07:54:34	2014-07-01 07:54:34
130	26	45	NO COMMENT	\N	2014-06-24 16:41:46	2014-06-24 16:41:46
131	1	45	NO COMMENT	\N	2014-06-25 16:27:47	2014-06-25 16:27:47
132	2	45	NO COMMENT	\N	2014-07-01 06:08:43	2014-07-01 06:08:43
133	2	47	NO COMMENT	\N	2014-06-29 02:04:40	2014-06-29 02:04:40
134	26	47	NO COMMENT	\N	2014-06-29 20:22:35	2014-06-29 20:22:35
135	30	47	NO COMMENT	\N	2014-06-29 21:44:57	2014-06-29 21:44:57
136	1	47	NO COMMENT	\N	2014-06-29 23:04:40	2014-06-29 23:04:40
137	2	48	NO COMMENT	\N	2014-06-06 20:17:11	2014-06-06 20:17:11
138	1	48	NO COMMENT	\N	2014-06-18 08:09:38	2014-06-18 08:09:38
139	36	49	NO COMMENT	\N	2014-06-17 16:53:17	2014-06-17 16:53:17
140	1	49	NO COMMENT	\N	2014-06-19 10:21:48	2014-06-19 10:21:48
141	2	49	NO COMMENT	\N	2014-06-28 18:18:46	2014-06-28 18:18:46
142	2	50	NO COMMENT	\N	2014-06-18 08:56:07	2014-06-18 08:56:07
143	36	50	NO COMMENT	\N	2014-06-19 10:25:55	2014-06-19 10:25:55
144	1	50	NO COMMENT	\N	2014-06-29 14:14:37	2014-06-29 14:14:37
145	2	51	NO COMMENT	\N	2014-06-21 09:40:10	2014-06-21 09:40:10
146	1	51	NO COMMENT	\N	2014-06-23 06:01:28	2014-06-23 06:01:28
147	36	51	NO COMMENT	\N	2014-06-26 18:27:15	2014-06-26 18:27:15
148	2	53	NO COMMENT	\N	2014-06-25 00:48:36	2014-06-25 00:48:36
149	27	55	NO COMMENT	\N	2014-06-08 08:17:49	2014-06-08 08:17:49
150	11	55	NO COMMENT	\N	2014-06-09 13:55:43	2014-06-09 13:55:43
151	1	55	NO COMMENT	\N	2014-06-11 04:02:56	2014-06-11 04:02:56
152	32	55	NO COMMENT	\N	2014-06-12 21:43:34	2014-06-12 21:43:34
153	2	55	NO COMMENT	\N	2014-06-13 19:57:07	2014-06-13 19:57:07
154	19	55	NO COMMENT	\N	2014-06-14 17:29:58	2014-06-14 17:29:58
155	6	55	NO COMMENT	\N	2014-06-18 05:21:07	2014-06-18 05:21:07
156	29	55	NO COMMENT	\N	2014-06-24 13:14:29	2014-06-24 13:14:29
157	48	55	NO COMMENT	\N	2014-06-27 01:55:14	2014-06-27 01:55:14
158	40	55	NO COMMENT	\N	2014-06-28 02:58:22	2014-06-28 02:58:22
159	44	56	NO COMMENT	\N	2014-06-16 21:17:58	2014-06-16 21:17:58
160	1	56	NO COMMENT	\N	2014-06-17 08:51:14	2014-06-17 08:51:14
161	2	56	NO COMMENT	\N	2014-06-18 16:52:08	2014-06-18 16:52:08
162	37	56	NO COMMENT	\N	2014-06-21 10:44:56	2014-06-21 10:44:56
163	20	56	NO COMMENT	\N	2014-06-21 14:31:09	2014-06-21 14:31:09
164	28	56	NO COMMENT	\N	2014-06-26 08:59:09	2014-06-26 08:59:09
165	41	56	NO COMMENT	\N	2014-06-30 13:43:27	2014-06-30 13:43:27
166	28	57	NO COMMENT	\N	2014-06-24 08:04:27	2014-06-24 08:04:27
167	44	57	NO COMMENT	\N	2014-06-28 17:04:12	2014-06-28 17:04:12
168	37	57	NO COMMENT	\N	2014-06-30 21:23:30	2014-06-30 21:23:30
169	1	58	NO COMMENT	\N	2014-06-26 16:27:46	2014-06-26 16:27:46
170	41	58	NO COMMENT	\N	2014-06-27 08:17:54	2014-06-27 08:17:54
171	28	58	NO COMMENT	\N	2014-06-27 18:17:59	2014-06-27 18:17:59
172	2	58	NO COMMENT	\N	2014-06-28 10:46:26	2014-06-28 10:46:26
173	37	58	NO COMMENT	\N	2014-06-29 07:34:03	2014-06-29 07:34:03
174	44	58	NO COMMENT	\N	2014-06-29 10:07:32	2014-06-29 10:07:32
175	20	58	NO COMMENT	\N	2014-07-01 13:27:12	2014-07-01 13:27:12
176	20	59	NO COMMENT	\N	2014-07-01 17:37:34	2014-07-01 17:37:34
177	2	60	NO COMMENT	\N	2014-06-16 20:32:31	2014-06-16 20:32:31
178	29	60	NO COMMENT	\N	2014-06-17 18:46:19	2014-06-17 18:46:19
179	1	60	NO COMMENT	\N	2014-06-19 14:41:13	2014-06-19 14:41:13
180	8	60	NO COMMENT	\N	2014-06-19 19:53:40	2014-06-19 19:53:40
181	17	60	NO COMMENT	\N	2014-06-20 11:39:30	2014-06-20 11:39:30
182	19	120	NO COMMENT	\N	2014-07-02 14:31:09	2014-07-02 14:31:09
183	17	61	NO COMMENT	\N	2014-06-23 17:01:04	2014-06-23 17:01:04
184	2	61	NO COMMENT	\N	2014-06-24 08:46:40	2014-06-24 08:46:40
185	8	61	NO COMMENT	\N	2014-06-29 01:40:28	2014-06-29 01:40:28
186	23	61	NO COMMENT	\N	2014-06-29 06:47:47	2014-06-29 06:47:47
187	9	62	NO COMMENT	\N	2014-06-18 11:03:14	2014-06-18 11:03:14
188	43	62	NO COMMENT	\N	2014-06-29 13:09:06	2014-06-29 13:09:06
189	9	63	NO COMMENT	\N	2014-06-20 08:24:54	2014-06-20 08:24:54
190	48	63	NO COMMENT	\N	2014-06-22 19:53:13	2014-06-22 19:53:13
191	5	63	NO COMMENT	\N	2014-06-23 17:16:23	2014-06-23 17:16:23
192	1	63	NO COMMENT	\N	2014-06-24 18:24:56	2014-06-24 18:24:56
193	42	63	NO COMMENT	\N	2014-06-25 14:04:25	2014-06-25 14:04:25
194	2	63	NO COMMENT	\N	2014-06-29 07:38:19	2014-06-29 07:38:19
195	34	63	NO COMMENT	\N	2014-06-30 08:53:19	2014-06-30 08:53:19
196	36	63	NO COMMENT	\N	2014-06-30 18:11:30	2014-06-30 18:11:30
197	24	64	NO COMMENT	\N	2014-06-20 20:44:41	2014-06-20 20:44:41
198	1	64	NO COMMENT	\N	2014-06-23 16:00:55	2014-06-23 16:00:55
199	1	65	NO COMMENT	\N	2014-06-25 22:34:24	2014-06-25 22:34:24
200	24	65	NO COMMENT	\N	2014-06-26 04:08:22	2014-06-26 04:08:22
201	16	65	NO COMMENT	\N	2014-06-27 09:16:00	2014-06-27 09:16:00
202	15	65	NO COMMENT	\N	2014-07-01 04:05:38	2014-07-01 04:05:38
203	2	65	NO COMMENT	\N	2014-07-02 20:12:04	2014-07-02 20:12:04
204	36	68	NO COMMENT	\N	2014-06-28 03:57:59	2014-06-28 03:57:59
205	1	68	NO COMMENT	\N	2014-06-30 18:19:17	2014-06-30 18:19:17
206	26	68	NO COMMENT	\N	2014-06-30 20:03:54	2014-06-30 20:03:54
207	23	68	NO COMMENT	\N	2014-06-30 22:49:41	2014-06-30 22:49:41
208	2	68	NO COMMENT	\N	2014-07-02 07:51:50	2014-07-02 07:51:50
209	1	69	NO COMMENT	\N	2014-06-21 00:04:47	2014-06-21 00:04:47
210	2	69	NO COMMENT	\N	2014-06-29 22:40:27	2014-06-29 22:40:27
211	1	70	NO COMMENT	\N	2014-06-28 03:54:12	2014-06-28 03:54:12
212	2	70	NO COMMENT	\N	2014-06-30 03:32:35	2014-06-30 03:32:35
213	2	71	NO COMMENT	\N	2014-06-15 17:00:26	2014-06-15 17:00:26
214	1	71	NO COMMENT	\N	2014-06-16 17:05:35	2014-06-16 17:05:35
215	1	73	NO COMMENT	\N	2014-06-26 16:12:13	2014-06-26 16:12:13
216	17	73	NO COMMENT	\N	2014-06-27 10:13:01	2014-06-27 10:13:01
217	1	75	NO COMMENT	\N	2014-06-21 16:12:55	2014-06-21 16:12:55
218	2	75	NO COMMENT	\N	2014-07-01 06:59:40	2014-07-01 06:59:40
219	2	76	NO COMMENT	\N	2014-06-18 08:07:55	2014-06-18 08:07:55
220	27	76	NO COMMENT	\N	2014-06-20 11:17:36	2014-06-20 11:17:36
221	1	76	NO COMMENT	\N	2014-06-22 21:48:19	2014-06-22 21:48:19
222	29	76	NO COMMENT	\N	2014-06-25 04:15:57	2014-06-25 04:15:57
223	2	77	NO COMMENT	\N	2014-06-27 17:06:15	2014-06-27 17:06:15
224	1	78	NO COMMENT	\N	2014-06-29 16:27:27	2014-06-29 16:27:27
225	28	78	NO COMMENT	\N	2014-07-01 13:52:28	2014-07-01 13:52:28
226	5	78	NO COMMENT	\N	2014-07-02 07:12:23	2014-07-02 07:12:23
227	1	79	NO COMMENT	\N	2014-06-15 09:50:45	2014-06-15 09:50:45
228	11	79	NO COMMENT	\N	2014-06-17 22:44:17	2014-06-17 22:44:17
229	16	79	NO COMMENT	\N	2014-06-24 18:39:56	2014-06-24 18:39:56
230	25	80	NO COMMENT	\N	2014-06-20 01:31:41	2014-06-20 01:31:41
231	6	80	NO COMMENT	\N	2014-06-23 03:12:31	2014-06-23 03:12:31
232	2	80	NO COMMENT	\N	2014-06-24 17:46:12	2014-06-24 17:46:12
233	11	80	NO COMMENT	\N	2014-06-25 03:24:28	2014-06-25 03:24:28
234	16	80	NO COMMENT	\N	2014-06-29 21:04:27	2014-06-29 21:04:27
235	32	81	NO COMMENT	\N	2014-06-29 20:57:15	2014-06-29 20:57:15
236	16	81	NO COMMENT	\N	2014-06-30 15:06:10	2014-06-30 15:06:10
237	11	81	NO COMMENT	\N	2014-07-01 12:21:56	2014-07-01 12:21:56
238	1	83	NO COMMENT	\N	2014-06-16 09:13:44	2014-06-16 09:13:44
239	2	83	NO COMMENT	\N	2014-06-28 03:14:13	2014-06-28 03:14:13
240	2	84	NO COMMENT	\N	2014-06-28 12:04:30	2014-06-28 12:04:30
241	1	84	NO COMMENT	\N	2014-06-29 22:35:20	2014-06-29 22:35:20
242	1	85	NO COMMENT	\N	2014-06-19 23:39:43	2014-06-19 23:39:43
243	27	85	NO COMMENT	\N	2014-06-29 22:38:22	2014-06-29 22:38:22
244	2	85	NO COMMENT	\N	2014-06-30 16:21:26	2014-06-30 16:21:26
245	45	85	NO COMMENT	\N	2014-07-02 15:05:40	2014-07-02 15:05:40
246	7	227	NO COMMENT	\N	2014-05-22 12:24:15	2014-05-22 12:24:15
247	1	227	NO COMMENT	\N	2014-07-02 10:59:28	2014-07-02 10:59:28
248	1	87	NO COMMENT	\N	2014-06-26 07:14:30	2014-06-26 07:14:30
249	2	87	NO COMMENT	\N	2014-07-01 16:16:30	2014-07-01 16:16:30
250	11	88	NO COMMENT	\N	2014-06-27 06:51:50	2014-06-27 06:51:50
251	1	88	NO COMMENT	\N	2014-07-01 05:53:11	2014-07-01 05:53:11
252	9	90	NO COMMENT	\N	2014-06-11 15:43:43	2014-06-11 15:43:43
253	16	91	NO COMMENT	\N	2014-06-12 05:33:10	2014-06-12 05:33:10
254	2	91	NO COMMENT	\N	2014-06-14 07:28:38	2014-06-14 07:28:38
255	30	91	NO COMMENT	\N	2014-06-16 21:19:25	2014-06-16 21:19:25
256	1	91	NO COMMENT	\N	2014-06-28 02:47:47	2014-06-28 02:47:47
257	30	92	NO COMMENT	\N	2014-06-18 01:21:36	2014-06-18 01:21:36
258	14	92	NO COMMENT	\N	2014-06-23 20:02:19	2014-06-23 20:02:19
259	16	92	NO COMMENT	\N	2014-06-25 14:33:26	2014-06-25 14:33:26
260	1	92	NO COMMENT	\N	2014-06-28 17:16:43	2014-06-28 17:16:43
261	2	92	NO COMMENT	\N	2014-06-28 17:36:01	2014-06-28 17:36:01
262	9	92	NO COMMENT	\N	2014-07-01 18:01:46	2014-07-01 18:01:46
263	14	94	NO COMMENT	\N	2014-06-26 16:25:54	2014-06-26 16:25:54
264	1	94	NO COMMENT	\N	2014-06-26 19:48:24	2014-06-26 19:48:24
265	9	94	NO COMMENT	\N	2014-06-29 19:30:53	2014-06-29 19:30:53
266	30	94	NO COMMENT	\N	2014-06-30 22:03:45	2014-06-30 22:03:45
267	2	94	NO COMMENT	\N	2014-06-30 22:42:57	2014-06-30 22:42:57
268	16	94	NO COMMENT	\N	2014-07-01 06:01:16	2014-07-01 06:01:16
269	16	95	NO COMMENT	\N	2014-06-26 21:59:53	2014-06-26 21:59:53
270	30	95	NO COMMENT	\N	2014-06-28 16:47:12	2014-06-28 16:47:12
271	2	95	NO COMMENT	\N	2014-06-30 06:49:14	2014-06-30 06:49:14
272	9	95	NO COMMENT	\N	2014-07-01 06:28:52	2014-07-01 06:28:52
273	1	95	NO COMMENT	\N	2014-07-01 11:21:35	2014-07-01 11:21:35
274	2	97	NO COMMENT	\N	2014-06-17 23:59:37	2014-06-17 23:59:37
275	1	97	NO COMMENT	\N	2014-06-28 17:42:20	2014-06-28 17:42:20
276	2	98	NO COMMENT	\N	2014-06-10 19:42:58	2014-06-10 19:42:58
277	1	98	NO COMMENT	\N	2014-06-18 01:13:06	2014-06-18 01:13:06
278	2	99	NO COMMENT	\N	2014-06-24 18:30:51	2014-06-24 18:30:51
279	1	99	NO COMMENT	\N	2014-06-30 01:00:45	2014-06-30 01:00:45
280	11	100	NO COMMENT	\N	2014-07-02 03:12:05	2014-07-02 03:12:05
281	2	100	NO COMMENT	\N	2014-07-02 06:03:02	2014-07-02 06:03:02
282	44	100	NO COMMENT	\N	2014-07-02 11:03:55	2014-07-02 11:03:55
283	9	100	NO COMMENT	\N	2014-07-02 11:08:14	2014-07-02 11:08:14
284	1	101	NO COMMENT	\N	2014-06-25 15:05:28	2014-06-25 15:05:28
285	2	101	NO COMMENT	\N	2014-06-27 12:41:33	2014-06-27 12:41:33
286	1	102	NO COMMENT	\N	2014-06-23 07:13:23	2014-06-23 07:13:23
287	2	102	NO COMMENT	\N	2014-06-25 15:54:10	2014-06-25 15:54:10
288	2	103	NO COMMENT	\N	2014-06-19 21:39:22	2014-06-19 21:39:22
289	2	105	NO COMMENT	\N	2014-06-26 23:41:11	2014-06-26 23:41:11
290	1	105	NO COMMENT	\N	2014-06-29 12:48:26	2014-06-29 12:48:26
291	2	107	NO COMMENT	\N	2014-06-13 11:58:17	2014-06-13 11:58:17
292	16	107	NO COMMENT	\N	2014-06-17 13:43:48	2014-06-17 13:43:48
293	1	107	NO COMMENT	\N	2014-06-22 06:00:22	2014-06-22 06:00:22
294	37	108	NO COMMENT	\N	2014-06-15 11:21:51	2014-06-15 11:21:51
295	1	108	NO COMMENT	\N	2014-06-20 00:43:01	2014-06-20 00:43:01
296	2	108	NO COMMENT	\N	2014-06-21 07:34:22	2014-06-21 07:34:22
297	16	108	NO COMMENT	\N	2014-07-01 00:28:28	2014-07-01 00:28:28
298	2	109	NO COMMENT	\N	2014-06-18 11:41:36	2014-06-18 11:41:36
299	37	109	NO COMMENT	\N	2014-06-20 04:40:10	2014-06-20 04:40:10
300	16	109	NO COMMENT	\N	2014-06-21 15:12:37	2014-06-21 15:12:37
301	13	110	NO COMMENT	\N	2014-06-26 17:06:36	2014-06-26 17:06:36
302	2	110	NO COMMENT	\N	2014-06-26 19:21:13	2014-06-26 19:21:13
303	1	110	NO COMMENT	\N	2014-07-01 05:00:32	2014-07-01 05:00:32
304	1	111	NO COMMENT	\N	2014-06-25 23:41:11	2014-06-25 23:41:11
305	13	111	NO COMMENT	\N	2014-06-27 22:22:01	2014-06-27 22:22:01
306	2	112	NO COMMENT	\N	2014-06-27 00:04:48	2014-06-27 00:04:48
307	17	112	NO COMMENT	\N	2014-06-30 02:32:50	2014-06-30 02:32:50
308	26	112	NO COMMENT	\N	2014-06-30 09:41:56	2014-06-30 09:41:56
309	1	112	NO COMMENT	\N	2014-06-30 12:19:45	2014-06-30 12:19:45
310	1	113	NO COMMENT	\N	2014-06-21 09:49:42	2014-06-21 09:49:42
311	2	113	NO COMMENT	\N	2014-06-23 01:23:14	2014-06-23 01:23:14
312	2	115	NO COMMENT	\N	2014-06-23 17:35:49	2014-06-23 17:35:49
313	22	115	NO COMMENT	\N	2014-06-27 17:41:29	2014-06-27 17:41:29
314	10	115	NO COMMENT	\N	2014-06-28 09:04:21	2014-06-28 09:04:21
315	1	115	NO COMMENT	\N	2014-06-29 21:35:53	2014-06-29 21:35:53
316	42	115	NO COMMENT	\N	2014-07-01 02:08:37	2014-07-01 02:08:37
317	33	115	NO COMMENT	\N	2014-07-02 04:07:54	2014-07-02 04:07:54
318	19	119	NO COMMENT	\N	2014-05-15 12:26:11	2014-05-15 12:26:11
319	7	707	NO COMMENT	\N	2014-03-31 05:27:25	2014-03-31 05:27:25
320	42	122	NO COMMENT	\N	2014-05-17 04:08:40	2014-05-17 04:08:40
321	23	125	NO COMMENT	\N	2014-06-14 11:42:31	2014-06-14 11:42:31
322	42	125	NO COMMENT	\N	2014-06-19 11:11:44	2014-06-19 11:11:44
323	48	125	NO COMMENT	\N	2014-07-01 21:43:46	2014-07-01 21:43:46
324	16	128	NO COMMENT	\N	2014-06-26 21:49:32	2014-06-26 21:49:32
325	16	129	NO COMMENT	\N	2014-06-18 02:00:28	2014-06-18 02:00:28
326	16	130	NO COMMENT	\N	2014-05-27 12:14:05	2014-05-27 12:14:05
327	16	131	NO COMMENT	\N	2014-06-15 07:55:08	2014-06-15 07:55:08
328	16	132	NO COMMENT	\N	2014-06-13 13:40:44	2014-06-13 13:40:44
329	16	133	NO COMMENT	\N	2014-06-20 19:27:20	2014-06-20 19:27:20
330	30	133	NO COMMENT	\N	2014-06-27 23:49:15	2014-06-27 23:49:15
331	9	133	NO COMMENT	\N	2014-07-01 01:16:41	2014-07-01 01:16:41
332	48	187	NO COMMENT	\N	2014-06-24 05:19:54	2014-06-24 05:19:54
333	1	187	NO COMMENT	\N	2014-06-25 04:03:03	2014-06-25 04:03:03
334	34	187	NO COMMENT	\N	2014-06-27 11:56:38	2014-06-27 11:56:38
335	5	187	NO COMMENT	\N	2014-06-27 23:09:22	2014-06-27 23:09:22
336	43	187	NO COMMENT	\N	2014-06-29 17:56:12	2014-06-29 17:56:12
337	44	146	NO COMMENT	\N	2014-05-15 13:39:15	2014-05-15 13:39:15
338	19	150	NO COMMENT	\N	2014-06-21 18:51:42	2014-06-21 18:51:42
339	26	156	NO COMMENT	\N	2014-06-30 02:47:27	2014-06-30 02:47:27
340	26	157	NO COMMENT	\N	2014-05-27 20:56:12	2014-05-27 20:56:12
341	22	166	NO COMMENT	\N	2014-06-02 19:38:42	2014-06-02 19:38:42
342	6	166	NO COMMENT	\N	2014-06-08 11:56:59	2014-06-08 11:56:59
343	25	166	NO COMMENT	\N	2014-06-23 00:19:07	2014-06-23 00:19:07
344	1	167	NO COMMENT	\N	2014-06-07 05:41:35	2014-06-07 05:41:35
345	2	167	NO COMMENT	\N	2014-06-10 05:21:28	2014-06-10 05:21:28
346	30	167	NO COMMENT	\N	2014-06-19 22:29:53	2014-06-19 22:29:53
347	7	167	NO COMMENT	\N	2014-06-20 01:50:45	2014-06-20 01:50:45
348	1	168	NO COMMENT	\N	2014-06-17 15:13:40	2014-06-17 15:13:40
349	7	168	NO COMMENT	\N	2014-06-20 16:47:08	2014-06-20 16:47:08
350	17	168	NO COMMENT	\N	2014-06-27 16:49:18	2014-06-27 16:49:18
351	2	169	NO COMMENT	\N	2014-06-09 11:42:05	2014-06-09 11:42:05
352	7	169	NO COMMENT	\N	2014-06-21 01:09:32	2014-06-21 01:09:32
353	28	169	NO COMMENT	\N	2014-06-21 18:23:25	2014-06-21 18:23:25
354	8	169	NO COMMENT	\N	2014-06-25 02:44:06	2014-06-25 02:44:06
355	1	169	NO COMMENT	\N	2014-06-29 13:11:00	2014-06-29 13:11:00
356	1	170	NO COMMENT	\N	2014-06-22 16:59:29	2014-06-22 16:59:29
357	27	171	NO COMMENT	\N	2014-05-24 20:51:21	2014-05-24 20:51:21
358	29	171	NO COMMENT	\N	2014-05-26 06:27:37	2014-05-26 06:27:37
359	8	171	NO COMMENT	\N	2014-06-01 06:43:44	2014-06-01 06:43:44
360	26	171	NO COMMENT	\N	2014-06-17 01:36:10	2014-06-17 01:36:10
361	11	171	NO COMMENT	\N	2014-06-21 15:31:39	2014-06-21 15:31:39
362	2	172	NO COMMENT	\N	2014-05-30 09:11:31	2014-05-30 09:11:31
363	1	172	NO COMMENT	\N	2014-06-17 17:31:38	2014-06-17 17:31:38
364	7	172	NO COMMENT	\N	2014-06-29 05:30:03	2014-06-29 05:30:03
365	2	173	NO COMMENT	\N	2014-06-05 13:31:35	2014-06-05 13:31:35
366	1	173	NO COMMENT	\N	2014-06-10 20:43:49	2014-06-10 20:43:49
367	7	173	NO COMMENT	\N	2014-06-26 16:16:43	2014-06-26 16:16:43
368	1	196	NO COMMENT	\N	2014-04-08 10:59:50	2014-04-08 10:59:50
369	7	196	NO COMMENT	\N	2014-05-15 12:44:10	2014-05-15 12:44:10
370	2	174	NO COMMENT	\N	2014-06-23 18:18:09	2014-06-23 18:18:09
371	7	174	NO COMMENT	\N	2014-06-30 04:10:20	2014-06-30 04:10:20
372	11	175	NO COMMENT	\N	2014-06-15 16:40:09	2014-06-15 16:40:09
373	2	176	NO COMMENT	\N	2014-06-25 19:27:30	2014-06-25 19:27:30
374	1	176	NO COMMENT	\N	2014-06-26 16:06:45	2014-06-26 16:06:45
375	7	176	NO COMMENT	\N	2014-06-29 20:20:45	2014-06-29 20:20:45
376	2	177	NO COMMENT	\N	2014-05-27 15:35:07	2014-05-27 15:35:07
377	7	177	NO COMMENT	\N	2014-06-12 20:34:02	2014-06-12 20:34:02
378	44	177	NO COMMENT	\N	2014-06-18 03:59:39	2014-06-18 03:59:39
379	44	178	NO COMMENT	\N	2014-05-31 18:45:09	2014-05-31 18:45:09
380	2	178	NO COMMENT	\N	2014-06-07 01:46:27	2014-06-07 01:46:27
381	7	178	NO COMMENT	\N	2014-06-13 14:50:19	2014-06-13 14:50:19
382	20	178	NO COMMENT	\N	2014-06-16 19:15:53	2014-06-16 19:15:53
383	1	178	NO COMMENT	\N	2014-06-26 03:23:29	2014-06-26 03:23:29
384	20	179	NO COMMENT	\N	2014-06-12 18:03:06	2014-06-12 18:03:06
385	44	179	NO COMMENT	\N	2014-06-12 22:46:45	2014-06-12 22:46:45
386	1	179	NO COMMENT	\N	2014-06-19 02:07:54	2014-06-19 02:07:54
387	34	179	NO COMMENT	\N	2014-06-20 21:44:22	2014-06-20 21:44:22
388	7	179	NO COMMENT	\N	2014-06-22 18:44:49	2014-06-22 18:44:49
389	2	179	NO COMMENT	\N	2014-06-24 04:42:47	2014-06-24 04:42:47
390	7	181	NO COMMENT	\N	2014-06-14 11:37:29	2014-06-14 11:37:29
391	1	181	NO COMMENT	\N	2014-06-22 01:29:02	2014-06-22 01:29:02
392	2	181	NO COMMENT	\N	2014-06-23 20:19:42	2014-06-23 20:19:42
393	31	183	NO COMMENT	\N	2014-06-19 23:50:07	2014-06-19 23:50:07
394	12	183	NO COMMENT	\N	2014-06-20 17:15:31	2014-06-20 17:15:31
395	20	183	NO COMMENT	\N	2014-06-30 03:15:49	2014-06-30 03:15:49
396	25	184	NO COMMENT	\N	2014-06-16 17:35:38	2014-06-16 17:35:38
397	1	184	NO COMMENT	\N	2014-06-23 07:29:05	2014-06-23 07:29:05
398	31	184	NO COMMENT	\N	2014-06-26 22:04:52	2014-06-26 22:04:52
399	6	184	NO COMMENT	\N	2014-06-27 19:09:09	2014-06-27 19:09:09
400	2	184	NO COMMENT	\N	2014-07-01 19:37:34	2014-07-01 19:37:34
401	25	185	NO COMMENT	\N	2014-06-15 03:26:44	2014-06-15 03:26:44
402	31	185	NO COMMENT	\N	2014-06-16 23:55:54	2014-06-16 23:55:54
403	12	185	NO COMMENT	\N	2014-06-27 21:27:53	2014-06-27 21:27:53
404	2	188	NO COMMENT	\N	2014-06-05 08:56:33	2014-06-05 08:56:33
405	1	188	NO COMMENT	\N	2014-06-19 15:56:57	2014-06-19 15:56:57
406	7	188	NO COMMENT	\N	2014-06-21 20:05:10	2014-06-21 20:05:10
407	48	189	NO COMMENT	\N	2014-05-30 13:50:42	2014-05-30 13:50:42
408	2	189	NO COMMENT	\N	2014-06-10 08:19:13	2014-06-10 08:19:13
409	7	189	NO COMMENT	\N	2014-06-22 03:55:45	2014-06-22 03:55:45
410	1	189	NO COMMENT	\N	2014-06-23 03:23:38	2014-06-23 03:23:38
411	7	190	NO COMMENT	\N	2014-06-11 12:16:18	2014-06-11 12:16:18
412	2	190	NO COMMENT	\N	2014-06-20 17:14:01	2014-06-20 17:14:01
413	1	190	NO COMMENT	\N	2014-06-29 23:56:54	2014-06-29 23:56:54
414	2	192	NO COMMENT	\N	2014-06-30 00:08:07	2014-06-30 00:08:07
415	7	192	NO COMMENT	\N	2014-06-30 15:08:40	2014-06-30 15:08:40
416	1	192	NO COMMENT	\N	2014-07-01 04:24:09	2014-07-01 04:24:09
417	31	193	NO COMMENT	\N	2014-06-16 22:36:33	2014-06-16 22:36:33
418	2	193	NO COMMENT	\N	2014-06-29 19:31:12	2014-06-29 19:31:12
419	36	193	NO COMMENT	\N	2014-07-01 06:13:03	2014-07-01 06:13:03
420	1	194	NO COMMENT	\N	2014-06-22 17:30:05	2014-06-22 17:30:05
421	7	194	NO COMMENT	\N	2014-06-24 02:54:18	2014-06-24 02:54:18
422	7	195	NO COMMENT	\N	2014-06-28 08:48:45	2014-06-28 08:48:45
423	1	195	NO COMMENT	\N	2014-07-01 08:54:17	2014-07-01 08:54:17
424	2	195	NO COMMENT	\N	2014-07-02 03:30:07	2014-07-02 03:30:07
425	1	197	NO COMMENT	\N	2014-04-20 08:12:50	2014-04-20 08:12:50
426	7	197	NO COMMENT	\N	2014-05-01 21:57:06	2014-05-01 21:57:06
427	1	198	NO COMMENT	\N	2014-04-09 07:45:35	2014-04-09 07:45:35
428	7	198	NO COMMENT	\N	2014-04-21 14:54:01	2014-04-21 14:54:01
429	1	200	NO COMMENT	\N	2014-05-04 23:23:12	2014-05-04 23:23:12
430	7	200	NO COMMENT	\N	2014-05-25 07:00:58	2014-05-25 07:00:58
431	7	203	NO COMMENT	\N	2014-06-29 19:09:59	2014-06-29 19:09:59
432	1	203	NO COMMENT	\N	2014-07-02 03:25:27	2014-07-02 03:25:27
433	7	204	NO COMMENT	\N	2014-03-27 14:22:35	2014-03-27 14:22:35
434	1	204	NO COMMENT	\N	2014-04-12 07:08:01	2014-04-12 07:08:01
435	7	207	NO COMMENT	\N	2014-04-12 01:14:48	2014-04-12 01:14:48
436	7	208	NO COMMENT	\N	2014-06-23 10:35:35	2014-06-23 10:35:35
437	7	209	NO COMMENT	\N	2014-06-14 12:00:38	2014-06-14 12:00:38
438	1	209	NO COMMENT	\N	2014-06-20 10:49:21	2014-06-20 10:49:21
439	1	226	NO COMMENT	\N	2014-06-12 23:31:47	2014-06-12 23:31:47
440	7	226	NO COMMENT	\N	2014-07-01 03:38:31	2014-07-01 03:38:31
441	7	210	NO COMMENT	\N	2014-03-30 09:17:24	2014-03-30 09:17:24
442	7	211	NO COMMENT	\N	2014-05-03 06:49:58	2014-05-03 06:49:58
443	1	211	NO COMMENT	\N	2014-06-04 12:55:34	2014-06-04 12:55:34
444	19	212	NO COMMENT	\N	2014-05-23 11:33:47	2014-05-23 11:33:47
445	37	212	NO COMMENT	\N	2014-05-26 07:25:00	2014-05-26 07:25:00
446	1	212	NO COMMENT	\N	2014-06-09 17:02:42	2014-06-09 17:02:42
447	7	212	NO COMMENT	\N	2014-06-17 09:19:52	2014-06-17 09:19:52
448	16	212	NO COMMENT	\N	2014-06-19 06:59:05	2014-06-19 06:59:05
449	7	213	NO COMMENT	\N	2014-04-24 21:06:18	2014-04-24 21:06:18
450	1	213	NO COMMENT	\N	2014-05-13 21:07:46	2014-05-13 21:07:46
451	7	214	NO COMMENT	\N	2014-06-14 06:25:29	2014-06-14 06:25:29
452	1	214	NO COMMENT	\N	2014-06-19 00:18:43	2014-06-19 00:18:43
453	1	215	NO COMMENT	\N	2014-03-14 12:16:17	2014-03-14 12:16:17
454	7	215	NO COMMENT	\N	2014-04-21 10:02:25	2014-04-21 10:02:25
455	7	216	NO COMMENT	\N	2014-03-11 12:44:23	2014-03-11 12:44:23
456	1	216	NO COMMENT	\N	2014-06-11 03:38:14	2014-06-11 03:38:14
457	7	218	NO COMMENT	\N	2014-04-28 11:41:36	2014-04-28 11:41:36
458	1	218	NO COMMENT	\N	2014-06-29 15:38:28	2014-06-29 15:38:28
459	7	219	NO COMMENT	\N	2014-05-30 19:30:17	2014-05-30 19:30:17
460	1	219	NO COMMENT	\N	2014-06-27 20:00:11	2014-06-27 20:00:11
461	1	221	NO COMMENT	\N	2014-04-17 18:28:21	2014-04-17 18:28:21
462	7	221	NO COMMENT	\N	2014-06-26 00:41:44	2014-06-26 00:41:44
463	1	222	NO COMMENT	\N	2014-04-14 14:57:03	2014-04-14 14:57:03
464	7	222	NO COMMENT	\N	2014-05-16 19:34:56	2014-05-16 19:34:56
465	1	223	NO COMMENT	\N	2014-04-14 14:13:27	2014-04-14 14:13:27
466	7	223	NO COMMENT	\N	2014-06-13 09:06:38	2014-06-13 09:06:38
467	27	223	NO COMMENT	\N	2014-06-15 18:30:53	2014-06-15 18:30:53
468	7	224	NO COMMENT	\N	2014-04-21 06:46:46	2014-04-21 06:46:46
469	27	224	NO COMMENT	\N	2014-06-19 05:44:23	2014-06-19 05:44:23
470	7	228	NO COMMENT	\N	2014-06-08 09:12:00	2014-06-08 09:12:00
471	7	229	NO COMMENT	\N	2014-06-25 03:33:39	2014-06-25 03:33:39
472	1	229	NO COMMENT	\N	2014-06-28 12:20:10	2014-06-28 12:20:10
473	1	232	NO COMMENT	\N	2014-05-18 02:28:11	2014-05-18 02:28:11
474	7	232	NO COMMENT	\N	2014-06-10 08:37:53	2014-06-10 08:37:53
475	1	233	NO COMMENT	\N	2014-04-19 15:09:51	2014-04-19 15:09:51
476	7	233	NO COMMENT	\N	2014-06-18 19:32:27	2014-06-18 19:32:27
477	7	234	NO COMMENT	\N	2014-05-14 22:30:40	2014-05-14 22:30:40
478	1	234	NO COMMENT	\N	2014-06-29 02:00:43	2014-06-29 02:00:43
479	7	235	NO COMMENT	\N	2014-06-11 11:27:25	2014-06-11 11:27:25
480	1	235	NO COMMENT	\N	2014-06-25 21:23:52	2014-06-25 21:23:52
481	19	235	NO COMMENT	\N	2014-06-26 04:08:30	2014-06-26 04:08:30
482	1	236	NO COMMENT	\N	2013-11-22 23:56:12	2013-11-22 23:56:12
483	7	236	NO COMMENT	\N	2013-11-25 22:32:28	2013-11-25 22:32:28
484	1	237	NO COMMENT	\N	2014-05-31 20:01:23	2014-05-31 20:01:23
485	1	238	NO COMMENT	\N	2014-05-14 02:18:54	2014-05-14 02:18:54
486	7	238	NO COMMENT	\N	2014-06-02 02:33:31	2014-06-02 02:33:31
487	7	239	NO COMMENT	\N	2014-04-09 06:22:14	2014-04-09 06:22:14
488	1	239	NO COMMENT	\N	2014-06-15 00:51:43	2014-06-15 00:51:43
489	7	240	NO COMMENT	\N	2014-04-24 07:49:07	2014-04-24 07:49:07
490	1	240	NO COMMENT	\N	2014-05-19 08:36:19	2014-05-19 08:36:19
491	16	240	NO COMMENT	\N	2014-06-14 11:31:27	2014-06-14 11:31:27
492	12	269	NO COMMENT	\N	2014-06-23 01:41:12	2014-06-23 01:41:12
493	1	269	NO COMMENT	\N	2014-06-27 01:43:55	2014-06-27 01:43:55
494	45	269	NO COMMENT	\N	2014-06-28 05:53:52	2014-06-28 05:53:52
495	7	241	NO COMMENT	\N	2014-01-17 15:14:04	2014-01-17 15:14:04
496	1	241	NO COMMENT	\N	2014-06-17 18:00:37	2014-06-17 18:00:37
497	1	243	NO COMMENT	\N	2014-05-23 10:50:21	2014-05-23 10:50:21
498	1	244	NO COMMENT	\N	2014-02-22 22:50:22	2014-02-22 22:50:22
499	7	244	NO COMMENT	\N	2014-03-27 19:36:30	2014-03-27 19:36:30
500	7	245	NO COMMENT	\N	2014-03-26 13:59:59	2014-03-26 13:59:59
501	1	245	NO COMMENT	\N	2014-04-06 21:57:24	2014-04-06 21:57:24
502	6	247	NO COMMENT	\N	2014-06-14 00:38:19	2014-06-14 00:38:19
503	1	247	NO COMMENT	\N	2014-06-15 04:55:47	2014-06-15 04:55:47
504	7	247	NO COMMENT	\N	2014-06-15 21:48:39	2014-06-15 21:48:39
505	7	248	NO COMMENT	\N	2013-12-06 04:45:21	2013-12-06 04:45:21
506	1	248	NO COMMENT	\N	2014-06-29 01:49:01	2014-06-29 01:49:01
507	7	250	NO COMMENT	\N	2014-06-02 22:21:18	2014-06-02 22:21:18
508	1	250	NO COMMENT	\N	2014-06-14 15:34:56	2014-06-14 15:34:56
509	1	252	NO COMMENT	\N	2014-03-28 16:29:08	2014-03-28 16:29:08
510	7	255	NO COMMENT	\N	2014-06-04 08:40:43	2014-06-04 08:40:43
511	1	255	NO COMMENT	\N	2014-06-24 20:22:49	2014-06-24 20:22:49
512	27	255	NO COMMENT	\N	2014-06-30 13:59:33	2014-06-30 13:59:33
513	1	256	NO COMMENT	\N	2014-07-01 08:18:16	2014-07-01 08:18:16
514	1	257	NO COMMENT	\N	2014-05-24 19:44:53	2014-05-24 19:44:53
515	7	257	NO COMMENT	\N	2014-06-20 11:55:48	2014-06-20 11:55:48
516	7	260	NO COMMENT	\N	2014-05-27 23:50:24	2014-05-27 23:50:24
517	1	260	NO COMMENT	\N	2014-06-03 00:31:32	2014-06-03 00:31:32
518	48	261	NO COMMENT	\N	2014-05-13 12:04:23	2014-05-13 12:04:23
519	7	261	NO COMMENT	\N	2014-06-17 01:37:51	2014-06-17 01:37:51
520	1	261	NO COMMENT	\N	2014-06-27 18:11:50	2014-06-27 18:11:50
521	23	262	NO COMMENT	\N	2014-06-18 18:43:19	2014-06-18 18:43:19
522	1	262	NO COMMENT	\N	2014-06-21 17:13:12	2014-06-21 17:13:12
523	48	262	NO COMMENT	\N	2014-06-24 05:00:16	2014-06-24 05:00:16
524	7	264	NO COMMENT	\N	2014-02-05 10:37:23	2014-02-05 10:37:23
525	1	264	NO COMMENT	\N	2014-05-15 23:08:51	2014-05-15 23:08:51
526	37	265	NO COMMENT	\N	2014-06-10 18:02:37	2014-06-10 18:02:37
527	1	265	NO COMMENT	\N	2014-06-20 09:39:39	2014-06-20 09:39:39
528	37	266	NO COMMENT	\N	2014-06-13 12:52:41	2014-06-13 12:52:41
529	7	266	NO COMMENT	\N	2014-06-23 15:02:58	2014-06-23 15:02:58
530	1	266	NO COMMENT	\N	2014-07-01 06:35:04	2014-07-01 06:35:04
531	7	267	NO COMMENT	\N	2014-06-02 11:45:20	2014-06-02 11:45:20
532	16	267	NO COMMENT	\N	2014-06-14 21:11:06	2014-06-14 21:11:06
533	19	267	NO COMMENT	\N	2014-06-23 02:17:49	2014-06-23 02:17:49
534	17	268	NO COMMENT	\N	2014-06-08 20:07:27	2014-06-08 20:07:27
535	20	268	NO COMMENT	\N	2014-06-21 17:30:46	2014-06-21 17:30:46
536	26	270	NO COMMENT	\N	2014-06-21 11:53:39	2014-06-21 11:53:39
537	43	270	NO COMMENT	\N	2014-06-22 09:38:16	2014-06-22 09:38:16
538	12	270	NO COMMENT	\N	2014-06-24 05:30:31	2014-06-24 05:30:31
539	1	270	NO COMMENT	\N	2014-06-27 23:19:07	2014-06-27 23:19:07
540	35	271	NO COMMENT	\N	2014-06-25 06:52:24	2014-06-25 06:52:24
541	29	271	NO COMMENT	\N	2014-06-28 07:42:46	2014-06-28 07:42:46
542	43	271	NO COMMENT	\N	2014-06-29 22:24:50	2014-06-29 22:24:50
543	16	271	NO COMMENT	\N	2014-07-01 05:51:34	2014-07-01 05:51:34
544	17	271	NO COMMENT	\N	2014-07-02 19:46:41	2014-07-02 19:46:41
545	7	272	NO COMMENT	\N	2014-06-28 18:40:14	2014-06-28 18:40:14
546	1	272	NO COMMENT	\N	2014-06-30 07:32:35	2014-06-30 07:32:35
547	31	272	NO COMMENT	\N	2014-07-02 05:19:39	2014-07-02 05:19:39
548	12	272	NO COMMENT	\N	2014-07-02 18:46:20	2014-07-02 18:46:20
549	1	273	NO COMMENT	\N	2014-06-23 09:14:38	2014-06-23 09:14:38
550	8	275	NO COMMENT	\N	2014-05-24 00:40:10	2014-05-24 00:40:10
551	1	275	NO COMMENT	\N	2014-05-29 02:56:26	2014-05-29 02:56:26
552	29	275	NO COMMENT	\N	2014-06-17 22:40:20	2014-06-17 22:40:20
553	44	275	NO COMMENT	\N	2014-06-24 22:56:25	2014-06-24 22:56:25
554	7	275	NO COMMENT	\N	2014-06-29 19:27:15	2014-06-29 19:27:15
555	29	276	NO COMMENT	\N	2014-06-29 02:21:05	2014-06-29 02:21:05
556	7	276	NO COMMENT	\N	2014-06-29 13:26:10	2014-06-29 13:26:10
557	1	277	NO COMMENT	\N	2014-06-03 16:12:42	2014-06-03 16:12:42
558	43	277	NO COMMENT	\N	2014-06-04 22:15:48	2014-06-04 22:15:48
559	14	277	NO COMMENT	\N	2014-06-05 23:33:11	2014-06-05 23:33:11
560	26	277	NO COMMENT	\N	2014-06-19 01:31:37	2014-06-19 01:31:37
561	7	277	NO COMMENT	\N	2014-06-20 14:23:37	2014-06-20 14:23:37
562	19	277	NO COMMENT	\N	2014-06-23 19:05:48	2014-06-23 19:05:48
563	19	278	NO COMMENT	\N	2014-05-26 22:53:21	2014-05-26 22:53:21
564	14	278	NO COMMENT	\N	2014-05-29 16:24:02	2014-05-29 16:24:02
565	7	278	NO COMMENT	\N	2014-06-09 14:13:46	2014-06-09 14:13:46
566	1	278	NO COMMENT	\N	2014-06-17 16:15:24	2014-06-17 16:15:24
567	7	279	NO COMMENT	\N	2014-06-13 23:07:07	2014-06-13 23:07:07
568	26	279	NO COMMENT	\N	2014-06-15 06:14:36	2014-06-15 06:14:36
569	1	279	NO COMMENT	\N	2014-06-24 21:18:23	2014-06-24 21:18:23
570	17	279	NO COMMENT	\N	2014-06-29 21:07:20	2014-06-29 21:07:20
571	14	279	NO COMMENT	\N	2014-07-01 22:32:52	2014-07-01 22:32:52
572	1	280	NO COMMENT	\N	2014-06-14 08:02:48	2014-06-14 08:02:48
573	9	280	NO COMMENT	\N	2014-06-22 21:29:43	2014-06-22 21:29:43
574	43	280	NO COMMENT	\N	2014-07-02 10:54:46	2014-07-02 10:54:46
575	10	281	NO COMMENT	\N	2014-06-26 00:07:33	2014-06-26 00:07:33
576	41	281	NO COMMENT	\N	2014-06-26 02:33:09	2014-06-26 02:33:09
577	30	281	NO COMMENT	\N	2014-06-26 06:25:39	2014-06-26 06:25:39
578	43	281	NO COMMENT	\N	2014-06-26 19:45:51	2014-06-26 19:45:51
579	48	281	NO COMMENT	\N	2014-06-27 19:48:11	2014-06-27 19:48:11
580	40	281	NO COMMENT	\N	2014-06-30 20:14:52	2014-06-30 20:14:52
581	1	281	NO COMMENT	\N	2014-07-01 13:48:20	2014-07-01 13:48:20
582	7	284	NO COMMENT	\N	2014-06-14 04:41:37	2014-06-14 04:41:37
583	1	284	NO COMMENT	\N	2014-06-26 09:01:28	2014-06-26 09:01:28
584	7	285	NO COMMENT	\N	2014-05-29 02:10:51	2014-05-29 02:10:51
585	1	285	NO COMMENT	\N	2014-06-12 13:30:18	2014-06-12 13:30:18
586	7	286	NO COMMENT	\N	2014-06-24 20:48:01	2014-06-24 20:48:01
587	7	287	NO COMMENT	\N	2014-06-07 22:54:43	2014-06-07 22:54:43
588	1	287	NO COMMENT	\N	2014-06-10 18:19:37	2014-06-10 18:19:37
589	36	288	NO COMMENT	\N	2014-06-16 15:40:48	2014-06-16 15:40:48
590	31	288	NO COMMENT	\N	2014-06-20 10:21:21	2014-06-20 10:21:21
591	1	288	NO COMMENT	\N	2014-06-24 16:07:36	2014-06-24 16:07:36
592	7	288	NO COMMENT	\N	2014-06-25 03:48:06	2014-06-25 03:48:06
593	31	289	NO COMMENT	\N	2014-06-27 07:32:07	2014-06-27 07:32:07
594	1	289	NO COMMENT	\N	2014-06-29 07:47:52	2014-06-29 07:47:52
595	7	289	NO COMMENT	\N	2014-06-30 05:06:54	2014-06-30 05:06:54
596	36	289	NO COMMENT	\N	2014-07-01 09:07:51	2014-07-01 09:07:51
597	35	289	NO COMMENT	\N	2014-07-01 20:57:45	2014-07-01 20:57:45
598	7	291	NO COMMENT	\N	2014-06-18 01:24:02	2014-06-18 01:24:02
599	1	291	NO COMMENT	\N	2014-06-24 13:12:39	2014-06-24 13:12:39
600	1	292	NO COMMENT	\N	2014-06-15 20:10:10	2014-06-15 20:10:10
601	7	292	NO COMMENT	\N	2014-06-27 05:06:12	2014-06-27 05:06:12
602	1	293	NO COMMENT	\N	2014-06-22 12:59:35	2014-06-22 12:59:35
603	7	293	NO COMMENT	\N	2014-06-24 05:58:12	2014-06-24 05:58:12
604	42	293	NO COMMENT	\N	2014-06-27 06:44:04	2014-06-27 06:44:04
605	23	293	NO COMMENT	\N	2014-07-01 06:00:12	2014-07-01 06:00:12
606	11	294	NO COMMENT	\N	2014-06-30 17:14:10	2014-06-30 17:14:10
607	47	294	NO COMMENT	\N	2014-07-01 04:08:41	2014-07-01 04:08:41
608	7	294	NO COMMENT	\N	2014-07-01 04:41:58	2014-07-01 04:41:58
609	44	294	NO COMMENT	\N	2014-07-01 11:51:25	2014-07-01 11:51:25
610	7	295	NO COMMENT	\N	2014-06-29 15:08:41	2014-06-29 15:08:41
611	1	295	NO COMMENT	\N	2014-07-02 16:44:42	2014-07-02 16:44:42
612	25	297	NO COMMENT	\N	2014-06-24 05:09:25	2014-06-24 05:09:25
613	16	297	NO COMMENT	\N	2014-06-24 20:52:40	2014-06-24 20:52:40
614	20	297	NO COMMENT	\N	2014-06-26 21:28:41	2014-06-26 21:28:41
615	31	297	NO COMMENT	\N	2014-06-28 08:01:01	2014-06-28 08:01:01
616	35	297	NO COMMENT	\N	2014-06-30 06:15:02	2014-06-30 06:15:02
617	17	297	NO COMMENT	\N	2014-06-30 18:46:34	2014-06-30 18:46:34
618	1	297	NO COMMENT	\N	2014-07-02 02:52:02	2014-07-02 02:52:02
619	7	298	NO COMMENT	\N	2014-06-21 11:43:42	2014-06-21 11:43:42
620	9	298	NO COMMENT	\N	2014-06-21 17:27:20	2014-06-21 17:27:20
621	14	298	NO COMMENT	\N	2014-06-22 15:01:12	2014-06-22 15:01:12
622	1	298	NO COMMENT	\N	2014-06-24 14:41:26	2014-06-24 14:41:26
623	16	298	NO COMMENT	\N	2014-06-29 06:25:49	2014-06-29 06:25:49
624	14	299	NO COMMENT	\N	2014-06-27 09:03:04	2014-06-27 09:03:04
625	7	299	NO COMMENT	\N	2014-06-30 16:56:35	2014-06-30 16:56:35
626	30	299	NO COMMENT	\N	2014-07-02 07:11:51	2014-07-02 07:11:51
627	29	300	NO COMMENT	\N	2014-06-25 06:18:54	2014-06-25 06:18:54
628	41	300	NO COMMENT	\N	2014-06-26 22:21:50	2014-06-26 22:21:50
629	1	300	NO COMMENT	\N	2014-06-29 23:58:01	2014-06-29 23:58:01
630	7	300	NO COMMENT	\N	2014-07-01 21:48:48	2014-07-01 21:48:48
631	43	303	NO COMMENT	\N	2014-06-26 13:32:45	2014-06-26 13:32:45
632	30	303	NO COMMENT	\N	2014-06-28 05:03:34	2014-06-28 05:03:34
633	17	303	NO COMMENT	\N	2014-06-28 07:25:09	2014-06-28 07:25:09
634	34	303	NO COMMENT	\N	2014-07-02 08:48:44	2014-07-02 08:48:44
635	9	304	NO COMMENT	\N	2014-06-29 21:08:05	2014-06-29 21:08:05
636	13	304	NO COMMENT	\N	2014-06-30 00:37:26	2014-06-30 00:37:26
637	22	304	NO COMMENT	\N	2014-07-01 00:36:56	2014-07-01 00:36:56
638	5	304	NO COMMENT	\N	2014-07-01 00:55:51	2014-07-01 00:55:51
639	7	304	NO COMMENT	\N	2014-07-01 13:13:36	2014-07-01 13:13:36
640	35	304	NO COMMENT	\N	2014-07-01 14:07:24	2014-07-01 14:07:24
641	14	304	NO COMMENT	\N	2014-07-01 18:57:05	2014-07-01 18:57:05
642	37	304	NO COMMENT	\N	2014-07-01 21:23:25	2014-07-01 21:23:25
643	27	305	NO COMMENT	\N	2014-07-02 06:12:48	2014-07-02 06:12:48
644	9	305	NO COMMENT	\N	2014-07-02 16:44:24	2014-07-02 16:44:24
645	22	305	NO COMMENT	\N	2014-07-02 18:25:08	2014-07-02 18:25:08
646	1	307	NO COMMENT	\N	2014-06-26 10:53:50	2014-06-26 10:53:50
647	6	307	NO COMMENT	\N	2014-06-28 00:52:58	2014-06-28 00:52:58
648	7	307	NO COMMENT	\N	2014-06-28 08:04:12	2014-06-28 08:04:12
649	1	308	NO COMMENT	\N	2014-06-30 02:40:38	2014-06-30 02:40:38
650	47	308	NO COMMENT	\N	2014-07-01 01:24:38	2014-07-01 01:24:38
651	7	308	NO COMMENT	\N	2014-07-01 09:54:23	2014-07-01 09:54:23
652	30	309	NO COMMENT	\N	2014-06-26 08:55:31	2014-06-26 08:55:31
653	17	310	NO COMMENT	\N	2014-06-29 21:55:50	2014-06-29 21:55:50
654	7	310	NO COMMENT	\N	2014-07-02 00:49:07	2014-07-02 00:49:07
655	1	312	NO COMMENT	\N	2014-06-28 23:02:31	2014-06-28 23:02:31
656	34	312	NO COMMENT	\N	2014-06-30 03:52:11	2014-06-30 03:52:11
657	6	312	NO COMMENT	\N	2014-06-30 10:52:56	2014-06-30 10:52:56
658	7	312	NO COMMENT	\N	2014-07-02 10:32:48	2014-07-02 10:32:48
659	48	313	NO COMMENT	\N	2014-06-22 17:02:03	2014-06-22 17:02:03
660	7	315	NO COMMENT	\N	2014-06-30 08:23:52	2014-06-30 08:23:52
661	7	316	NO COMMENT	\N	2014-06-27 17:48:26	2014-06-27 17:48:26
662	19	316	NO COMMENT	\N	2014-06-28 09:50:33	2014-06-28 09:50:33
663	1	316	NO COMMENT	\N	2014-06-30 10:05:09	2014-06-30 10:05:09
664	7	568	NO COMMENT	\N	2014-05-15 04:06:19	2014-05-15 04:06:19
665	1	317	NO COMMENT	\N	2014-06-23 22:27:07	2014-06-23 22:27:07
666	7	317	NO COMMENT	\N	2014-06-26 10:57:47	2014-06-26 10:57:47
667	4	319	NO COMMENT	\N	2014-06-30 09:25:03	2014-06-30 09:25:03
668	7	319	NO COMMENT	\N	2014-07-01 09:29:22	2014-07-01 09:29:22
669	11	319	NO COMMENT	\N	2014-07-01 23:25:17	2014-07-01 23:25:17
670	1	319	NO COMMENT	\N	2014-07-02 01:09:11	2014-07-02 01:09:11
671	29	321	NO COMMENT	\N	2014-06-29 19:04:12	2014-06-29 19:04:12
672	1	321	NO COMMENT	\N	2014-07-01 08:43:43	2014-07-01 08:43:43
673	10	321	NO COMMENT	\N	2014-07-01 23:10:07	2014-07-01 23:10:07
674	22	322	NO COMMENT	\N	2014-06-22 03:41:25	2014-06-22 03:41:25
675	10	322	NO COMMENT	\N	2014-06-23 18:06:47	2014-06-23 18:06:47
676	43	323	NO COMMENT	\N	2014-06-29 08:20:22	2014-06-29 08:20:22
677	1	323	NO COMMENT	\N	2014-07-01 04:45:53	2014-07-01 04:45:53
678	9	323	NO COMMENT	\N	2014-07-02 00:06:38	2014-07-02 00:06:38
679	34	323	NO COMMENT	\N	2014-07-02 09:15:48	2014-07-02 09:15:48
680	7	323	NO COMMENT	\N	2014-07-02 16:39:18	2014-07-02 16:39:18
681	42	323	NO COMMENT	\N	2014-07-02 18:11:53	2014-07-02 18:11:53
682	1	324	NO COMMENT	\N	2014-05-20 13:29:55	2014-05-20 13:29:55
683	7	324	NO COMMENT	\N	2014-05-26 14:04:27	2014-05-26 14:04:27
684	7	334	NO COMMENT	\N	2014-02-28 07:07:01	2014-02-28 07:07:01
685	1	334	NO COMMENT	\N	2014-03-04 05:31:02	2014-03-04 05:31:02
686	7	325	NO COMMENT	\N	2014-05-07 00:36:47	2014-05-07 00:36:47
687	1	325	NO COMMENT	\N	2014-06-05 06:59:42	2014-06-05 06:59:42
688	1	326	NO COMMENT	\N	2014-06-12 14:26:38	2014-06-12 14:26:38
689	7	326	NO COMMENT	\N	2014-06-30 09:34:38	2014-06-30 09:34:38
690	7	327	NO COMMENT	\N	2014-06-21 09:38:09	2014-06-21 09:38:09
691	1	327	NO COMMENT	\N	2014-06-26 20:39:54	2014-06-26 20:39:54
692	47	327	NO COMMENT	\N	2014-07-02 09:19:39	2014-07-02 09:19:39
693	1	329	NO COMMENT	\N	2014-03-16 16:41:33	2014-03-16 16:41:33
694	7	329	NO COMMENT	\N	2014-06-28 08:32:23	2014-06-28 08:32:23
695	1	330	NO COMMENT	\N	2013-12-18 21:44:02	2013-12-18 21:44:02
696	7	330	NO COMMENT	\N	2014-05-29 14:09:00	2014-05-29 14:09:00
697	1	331	NO COMMENT	\N	2014-03-17 19:55:48	2014-03-17 19:55:48
698	1	332	NO COMMENT	\N	2014-02-10 06:43:22	2014-02-10 06:43:22
699	7	332	NO COMMENT	\N	2014-05-13 13:20:46	2014-05-13 13:20:46
700	7	335	NO COMMENT	\N	2014-04-09 02:23:26	2014-04-09 02:23:26
701	1	335	NO COMMENT	\N	2014-05-12 12:24:31	2014-05-12 12:24:31
702	7	336	NO COMMENT	\N	2014-02-19 11:45:27	2014-02-19 11:45:27
703	1	336	NO COMMENT	\N	2014-04-29 12:55:42	2014-04-29 12:55:42
704	1	338	NO COMMENT	\N	2014-01-23 15:56:50	2014-01-23 15:56:50
705	7	338	NO COMMENT	\N	2014-06-07 16:50:51	2014-06-07 16:50:51
706	7	339	NO COMMENT	\N	2014-02-04 17:02:26	2014-02-04 17:02:26
707	1	339	NO COMMENT	\N	2014-05-31 19:36:58	2014-05-31 19:36:58
708	1	340	NO COMMENT	\N	2014-05-07 23:01:28	2014-05-07 23:01:28
709	1	341	NO COMMENT	\N	2014-05-19 05:19:52	2014-05-19 05:19:52
710	7	341	NO COMMENT	\N	2014-06-10 07:43:22	2014-06-10 07:43:22
711	7	342	NO COMMENT	\N	2014-02-09 01:54:37	2014-02-09 01:54:37
712	1	342	NO COMMENT	\N	2014-06-21 22:06:46	2014-06-21 22:06:46
713	7	343	NO COMMENT	\N	2013-11-15 07:44:20	2013-11-15 07:44:20
714	1	343	NO COMMENT	\N	2014-04-14 07:09:28	2014-04-14 07:09:28
715	7	708	NO COMMENT	\N	2014-05-06 13:33:10	2014-05-06 13:33:10
716	1	344	NO COMMENT	\N	2014-02-12 00:41:27	2014-02-12 00:41:27
717	7	344	NO COMMENT	\N	2014-04-26 23:28:14	2014-04-26 23:28:14
718	7	346	NO COMMENT	\N	2014-06-14 22:11:14	2014-06-14 22:11:14
719	1	346	NO COMMENT	\N	2014-06-21 22:43:28	2014-06-21 22:43:28
720	1	348	NO COMMENT	\N	2014-05-31 09:47:16	2014-05-31 09:47:16
721	1	349	NO COMMENT	\N	2014-05-13 15:35:36	2014-05-13 15:35:36
722	16	349	NO COMMENT	\N	2014-05-22 07:49:42	2014-05-22 07:49:42
723	19	349	NO COMMENT	\N	2014-06-09 16:59:25	2014-06-09 16:59:25
724	1	350	NO COMMENT	\N	2014-06-14 04:26:08	2014-06-14 04:26:08
725	37	350	NO COMMENT	\N	2014-06-14 22:23:50	2014-06-14 22:23:50
726	37	352	NO COMMENT	\N	2014-06-22 00:57:40	2014-06-22 00:57:40
727	7	352	NO COMMENT	\N	2014-06-23 10:26:24	2014-06-23 10:26:24
728	29	352	NO COMMENT	\N	2014-06-25 09:47:31	2014-06-25 09:47:31
729	20	352	NO COMMENT	\N	2014-06-27 21:46:26	2014-06-27 21:46:26
730	31	352	NO COMMENT	\N	2014-07-01 20:04:23	2014-07-01 20:04:23
731	42	354	NO COMMENT	\N	2014-05-13 01:58:13	2014-05-13 01:58:13
732	1	354	NO COMMENT	\N	2014-05-17 23:18:03	2014-05-17 23:18:03
733	7	354	NO COMMENT	\N	2014-06-16 21:08:45	2014-06-16 21:08:45
734	48	354	NO COMMENT	\N	2014-06-20 05:40:22	2014-06-20 05:40:22
735	11	394	NO COMMENT	\N	2014-05-15 03:59:14	2014-05-15 03:59:14
736	6	394	NO COMMENT	\N	2014-06-19 18:48:03	2014-06-19 18:48:03
737	7	394	NO COMMENT	\N	2014-06-27 18:13:26	2014-06-27 18:13:26
738	7	355	NO COMMENT	\N	2014-05-06 12:24:31	2014-05-06 12:24:31
739	1	355	NO COMMENT	\N	2014-06-29 12:57:22	2014-06-29 12:57:22
740	7	356	NO COMMENT	\N	2014-02-11 01:02:33	2014-02-11 01:02:33
741	1	356	NO COMMENT	\N	2014-06-23 14:58:36	2014-06-23 14:58:36
742	7	357	NO COMMENT	\N	2014-03-31 04:13:38	2014-03-31 04:13:38
743	1	357	NO COMMENT	\N	2014-05-07 11:05:51	2014-05-07 11:05:51
744	1	358	NO COMMENT	\N	2014-05-15 22:31:10	2014-05-15 22:31:10
745	7	358	NO COMMENT	\N	2014-06-30 06:53:10	2014-06-30 06:53:10
746	1	359	NO COMMENT	\N	2014-01-28 01:36:15	2014-01-28 01:36:15
747	7	359	NO COMMENT	\N	2014-03-26 00:24:04	2014-03-26 00:24:04
748	7	360	NO COMMENT	\N	2014-06-08 10:46:23	2014-06-08 10:46:23
749	1	360	NO COMMENT	\N	2014-06-17 00:13:43	2014-06-17 00:13:43
750	7	361	NO COMMENT	\N	2014-06-07 09:53:00	2014-06-07 09:53:00
751	1	362	NO COMMENT	\N	2014-04-04 15:00:11	2014-04-04 15:00:11
752	7	362	NO COMMENT	\N	2014-04-30 08:33:35	2014-04-30 08:33:35
753	1	363	NO COMMENT	\N	2014-03-04 02:15:16	2014-03-04 02:15:16
754	7	363	NO COMMENT	\N	2014-03-31 01:39:29	2014-03-31 01:39:29
755	1	364	NO COMMENT	\N	2014-01-25 08:17:16	2014-01-25 08:17:16
756	7	364	NO COMMENT	\N	2014-06-13 17:36:53	2014-06-13 17:36:53
757	7	365	NO COMMENT	\N	2014-06-30 17:09:12	2014-06-30 17:09:12
758	1	366	NO COMMENT	\N	2014-03-06 07:43:01	2014-03-06 07:43:01
759	7	366	NO COMMENT	\N	2014-06-28 20:34:23	2014-06-28 20:34:23
760	1	367	NO COMMENT	\N	2014-05-13 11:51:47	2014-05-13 11:51:47
761	7	367	NO COMMENT	\N	2014-07-02 08:28:41	2014-07-02 08:28:41
762	45	371	NO COMMENT	\N	2014-06-01 19:20:55	2014-06-01 19:20:55
763	16	371	NO COMMENT	\N	2014-06-06 01:06:11	2014-06-06 01:06:11
764	37	371	NO COMMENT	\N	2014-06-12 00:07:30	2014-06-12 00:07:30
765	19	371	NO COMMENT	\N	2014-06-21 13:59:20	2014-06-21 13:59:20
766	7	371	NO COMMENT	\N	2014-06-26 01:03:00	2014-06-26 01:03:00
767	1	371	NO COMMENT	\N	2014-06-27 04:35:12	2014-06-27 04:35:12
768	1	372	NO COMMENT	\N	2014-05-28 20:41:41	2014-05-28 20:41:41
769	16	372	NO COMMENT	\N	2014-05-29 23:44:47	2014-05-29 23:44:47
770	37	372	NO COMMENT	\N	2014-06-04 14:35:09	2014-06-04 14:35:09
771	19	372	NO COMMENT	\N	2014-06-15 16:40:45	2014-06-15 16:40:45
772	45	372	NO COMMENT	\N	2014-06-21 04:20:54	2014-06-21 04:20:54
773	7	372	NO COMMENT	\N	2014-06-29 14:56:45	2014-06-29 14:56:45
774	7	373	NO COMMENT	\N	2014-06-07 16:00:19	2014-06-07 16:00:19
775	19	373	NO COMMENT	\N	2014-06-07 19:06:40	2014-06-07 19:06:40
776	1	373	NO COMMENT	\N	2014-06-09 08:20:02	2014-06-09 08:20:02
777	43	373	NO COMMENT	\N	2014-06-10 10:01:55	2014-06-10 10:01:55
778	31	373	NO COMMENT	\N	2014-06-15 04:02:48	2014-06-15 04:02:48
779	45	373	NO COMMENT	\N	2014-06-16 06:20:03	2014-06-16 06:20:03
780	11	373	NO COMMENT	\N	2014-06-16 20:37:33	2014-06-16 20:37:33
781	12	373	NO COMMENT	\N	2014-06-24 03:17:11	2014-06-24 03:17:11
782	37	373	NO COMMENT	\N	2014-06-28 00:23:46	2014-06-28 00:23:46
783	16	373	NO COMMENT	\N	2014-07-01 04:56:44	2014-07-01 04:56:44
784	20	373	NO COMMENT	\N	2014-07-02 02:40:49	2014-07-02 02:40:49
785	7	374	NO COMMENT	\N	2014-05-12 20:10:05	2014-05-12 20:10:05
786	1	374	NO COMMENT	\N	2014-05-20 22:22:43	2014-05-20 22:22:43
787	7	375	NO COMMENT	\N	2014-05-02 16:05:41	2014-05-02 16:05:41
788	6	375	NO COMMENT	\N	2014-06-17 13:13:23	2014-06-17 13:13:23
789	1	375	NO COMMENT	\N	2014-06-26 22:13:03	2014-06-26 22:13:03
790	7	376	NO COMMENT	\N	2014-05-03 10:03:00	2014-05-03 10:03:00
791	7	377	NO COMMENT	\N	2014-05-09 18:23:22	2014-05-09 18:23:22
792	1	377	NO COMMENT	\N	2014-05-14 16:02:49	2014-05-14 16:02:49
793	7	379	NO COMMENT	\N	2014-05-07 13:38:01	2014-05-07 13:38:01
794	1	379	NO COMMENT	\N	2014-05-14 04:11:29	2014-05-14 04:11:29
795	27	382	NO COMMENT	\N	2014-05-21 04:04:17	2014-05-21 04:04:17
796	8	382	NO COMMENT	\N	2014-05-26 23:14:15	2014-05-26 23:14:15
797	29	382	NO COMMENT	\N	2014-05-28 04:46:10	2014-05-28 04:46:10
798	1	383	NO COMMENT	\N	2014-05-30 21:17:13	2014-05-30 21:17:13
799	7	383	NO COMMENT	\N	2014-06-13 01:24:30	2014-06-13 01:24:30
800	1	384	NO COMMENT	\N	2014-04-22 00:09:31	2014-04-22 00:09:31
801	7	384	NO COMMENT	\N	2014-06-30 20:14:08	2014-06-30 20:14:08
802	1	385	NO COMMENT	\N	2014-04-22 13:25:30	2014-04-22 13:25:30
803	7	385	NO COMMENT	\N	2014-06-09 23:39:29	2014-06-09 23:39:29
804	7	386	NO COMMENT	\N	2014-05-26 16:42:54	2014-05-26 16:42:54
805	1	386	NO COMMENT	\N	2014-06-22 05:23:31	2014-06-22 05:23:31
806	1	388	NO COMMENT	\N	2014-06-10 23:28:55	2014-06-10 23:28:55
807	7	388	NO COMMENT	\N	2014-06-11 08:16:53	2014-06-11 08:16:53
808	7	389	NO COMMENT	\N	2014-05-07 21:45:53	2014-05-07 21:45:53
809	1	389	NO COMMENT	\N	2014-06-10 00:03:11	2014-06-10 00:03:11
810	1	390	NO COMMENT	\N	2014-06-19 08:27:44	2014-06-19 08:27:44
811	7	390	NO COMMENT	\N	2014-06-21 16:32:54	2014-06-21 16:32:54
812	1	391	NO COMMENT	\N	2014-07-01 19:02:14	2014-07-01 19:02:14
813	7	391	NO COMMENT	\N	2014-07-02 16:55:53	2014-07-02 16:55:53
814	7	393	NO COMMENT	\N	2014-05-13 18:12:46	2014-05-13 18:12:46
815	1	393	NO COMMENT	\N	2014-05-26 00:30:16	2014-05-26 00:30:16
816	23	395	NO COMMENT	\N	2014-05-08 23:08:31	2014-05-08 23:08:31
817	7	395	NO COMMENT	\N	2014-05-23 03:34:46	2014-05-23 03:34:46
818	1	396	NO COMMENT	\N	2014-06-24 05:57:05	2014-06-24 05:57:05
819	1	397	NO COMMENT	\N	2014-05-18 03:38:26	2014-05-18 03:38:26
820	34	397	NO COMMENT	\N	2014-05-20 08:26:59	2014-05-20 08:26:59
821	7	397	NO COMMENT	\N	2014-05-21 02:29:51	2014-05-21 02:29:51
822	23	397	NO COMMENT	\N	2014-05-21 04:16:24	2014-05-21 04:16:24
823	7	398	NO COMMENT	\N	2014-05-26 17:04:43	2014-05-26 17:04:43
824	34	398	NO COMMENT	\N	2014-06-22 07:09:31	2014-06-22 07:09:31
825	7	399	NO COMMENT	\N	2014-06-02 23:00:46	2014-06-02 23:00:46
826	23	399	NO COMMENT	\N	2014-06-06 01:36:08	2014-06-06 01:36:08
827	34	399	NO COMMENT	\N	2014-06-25 07:30:00	2014-06-25 07:30:00
828	1	399	NO COMMENT	\N	2014-06-30 04:46:07	2014-06-30 04:46:07
829	34	401	NO COMMENT	\N	2014-06-08 00:32:09	2014-06-08 00:32:09
830	7	401	NO COMMENT	\N	2014-06-09 18:53:58	2014-06-09 18:53:58
831	23	401	NO COMMENT	\N	2014-06-25 16:59:52	2014-06-25 16:59:52
832	1	401	NO COMMENT	\N	2014-06-30 09:59:06	2014-06-30 09:59:06
833	1	404	NO COMMENT	\N	2014-06-17 02:55:02	2014-06-17 02:55:02
834	7	404	NO COMMENT	\N	2014-06-23 14:37:29	2014-06-23 14:37:29
835	31	404	NO COMMENT	\N	2014-06-26 06:40:41	2014-06-26 06:40:41
836	23	404	NO COMMENT	\N	2014-07-02 14:45:52	2014-07-02 14:45:52
837	1	407	NO COMMENT	\N	2014-02-14 13:34:47	2014-02-14 13:34:47
838	48	467	NO COMMENT	\N	2014-05-09 13:13:45	2014-05-09 13:13:45
839	7	467	NO COMMENT	\N	2014-05-23 23:02:53	2014-05-23 23:02:53
840	27	467	NO COMMENT	\N	2014-06-03 15:18:22	2014-06-03 15:18:22
841	45	408	NO COMMENT	\N	2014-05-21 09:50:58	2014-05-21 09:50:58
842	37	408	NO COMMENT	\N	2014-05-27 07:35:01	2014-05-27 07:35:01
843	16	408	NO COMMENT	\N	2014-06-06 06:06:22	2014-06-06 06:06:22
844	7	408	NO COMMENT	\N	2014-06-10 19:16:34	2014-06-10 19:16:34
845	1	408	NO COMMENT	\N	2014-06-20 17:01:55	2014-06-20 17:01:55
846	44	409	NO COMMENT	\N	2014-04-05 15:45:02	2014-04-05 15:45:02
847	7	409	NO COMMENT	\N	2014-04-15 21:00:46	2014-04-15 21:00:46
848	1	409	NO COMMENT	\N	2014-05-02 22:40:12	2014-05-02 22:40:12
849	17	410	NO COMMENT	\N	2014-06-19 18:59:02	2014-06-19 18:59:02
850	44	410	NO COMMENT	\N	2014-06-24 23:30:00	2014-06-24 23:30:00
851	1	411	NO COMMENT	\N	2014-06-24 20:45:30	2014-06-24 20:45:30
852	7	412	NO COMMENT	\N	2014-04-27 13:13:25	2014-04-27 13:13:25
853	1	412	NO COMMENT	\N	2014-06-09 01:53:07	2014-06-09 01:53:07
854	7	413	NO COMMENT	\N	2014-05-15 06:54:29	2014-05-15 06:54:29
855	1	413	NO COMMENT	\N	2014-06-22 03:15:40	2014-06-22 03:15:40
856	7	414	NO COMMENT	\N	2014-05-08 07:49:09	2014-05-08 07:49:09
857	1	414	NO COMMENT	\N	2014-05-12 02:42:44	2014-05-12 02:42:44
858	28	414	NO COMMENT	\N	2014-06-14 12:27:28	2014-06-14 12:27:28
859	7	417	NO COMMENT	\N	2014-05-27 18:40:54	2014-05-27 18:40:54
860	1	417	NO COMMENT	\N	2014-06-27 19:08:33	2014-06-27 19:08:33
861	7	421	NO COMMENT	\N	2014-05-27 10:18:56	2014-05-27 10:18:56
862	1	421	NO COMMENT	\N	2014-06-11 08:55:59	2014-06-11 08:55:59
863	1	422	NO COMMENT	\N	2014-05-29 21:50:19	2014-05-29 21:50:19
864	1	424	NO COMMENT	\N	2014-06-16 08:16:36	2014-06-16 08:16:36
865	7	424	NO COMMENT	\N	2014-06-30 04:43:55	2014-06-30 04:43:55
866	1	425	NO COMMENT	\N	2014-02-14 12:03:17	2014-02-14 12:03:17
867	7	425	NO COMMENT	\N	2014-06-28 08:26:06	2014-06-28 08:26:06
868	1	426	NO COMMENT	\N	2014-04-08 05:23:17	2014-04-08 05:23:17
869	7	426	NO COMMENT	\N	2014-06-25 21:32:10	2014-06-25 21:32:10
870	7	427	NO COMMENT	\N	2014-05-28 17:15:48	2014-05-28 17:15:48
871	1	427	NO COMMENT	\N	2014-06-28 12:56:49	2014-06-28 12:56:49
872	1	428	NO COMMENT	\N	2014-05-19 09:25:00	2014-05-19 09:25:00
873	7	428	NO COMMENT	\N	2014-06-20 11:11:44	2014-06-20 11:11:44
874	1	429	NO COMMENT	\N	2014-04-10 01:53:22	2014-04-10 01:53:22
875	7	429	NO COMMENT	\N	2014-04-14 09:29:47	2014-04-14 09:29:47
876	48	429	NO COMMENT	\N	2014-06-09 05:27:04	2014-06-09 05:27:04
877	48	430	NO COMMENT	\N	2014-06-20 19:45:16	2014-06-20 19:45:16
878	1	431	NO COMMENT	\N	2014-06-05 22:52:44	2014-06-05 22:52:44
879	7	433	NO COMMENT	\N	2014-03-22 22:30:13	2014-03-22 22:30:13
880	1	433	NO COMMENT	\N	2014-05-11 03:46:03	2014-05-11 03:46:03
881	1	434	NO COMMENT	\N	2014-04-10 11:24:04	2014-04-10 11:24:04
882	7	434	NO COMMENT	\N	2014-04-12 10:36:07	2014-04-12 10:36:07
883	1	436	NO COMMENT	\N	2014-03-28 23:01:52	2014-03-28 23:01:52
884	7	436	NO COMMENT	\N	2014-05-12 20:47:08	2014-05-12 20:47:08
885	7	437	NO COMMENT	\N	2014-05-23 12:57:27	2014-05-23 12:57:27
886	1	437	NO COMMENT	\N	2014-05-24 14:11:39	2014-05-24 14:11:39
887	7	438	NO COMMENT	\N	2014-06-01 03:22:57	2014-06-01 03:22:57
888	1	438	NO COMMENT	\N	2014-06-11 23:34:46	2014-06-11 23:34:46
889	1	440	NO COMMENT	\N	2014-06-20 23:50:29	2014-06-20 23:50:29
890	7	440	NO COMMENT	\N	2014-06-28 05:20:42	2014-06-28 05:20:42
891	1	442	NO COMMENT	\N	2014-05-05 04:14:56	2014-05-05 04:14:56
892	7	442	NO COMMENT	\N	2014-06-11 17:55:56	2014-06-11 17:55:56
893	1	443	NO COMMENT	\N	2014-04-25 22:05:38	2014-04-25 22:05:38
894	7	443	NO COMMENT	\N	2014-04-30 17:29:33	2014-04-30 17:29:33
895	7	444	NO COMMENT	\N	2014-02-16 06:37:26	2014-02-16 06:37:26
896	1	444	NO COMMENT	\N	2014-05-29 18:57:00	2014-05-29 18:57:00
897	2	836	NO COMMENT	\N	2014-04-19 14:50:27	2014-04-19 14:50:27
898	1	836	NO COMMENT	\N	2014-05-05 07:26:07	2014-05-05 07:26:07
899	7	836	NO COMMENT	\N	2014-06-10 06:22:51	2014-06-10 06:22:51
900	1	445	NO COMMENT	\N	2014-04-01 08:20:00	2014-04-01 08:20:00
901	7	445	NO COMMENT	\N	2014-05-28 07:54:23	2014-05-28 07:54:23
902	7	446	NO COMMENT	\N	2014-04-16 09:37:35	2014-04-16 09:37:35
903	7	448	NO COMMENT	\N	2014-06-25 10:50:24	2014-06-25 10:50:24
904	7	449	NO COMMENT	\N	2014-06-25 05:31:23	2014-06-25 05:31:23
905	41	450	NO COMMENT	\N	2014-06-16 03:37:21	2014-06-16 03:37:21
906	36	450	NO COMMENT	\N	2014-06-22 14:32:40	2014-06-22 14:32:40
907	43	450	NO COMMENT	\N	2014-06-24 21:54:41	2014-06-24 21:54:41
908	48	451	NO COMMENT	\N	2014-06-25 22:09:02	2014-06-25 22:09:02
909	7	451	NO COMMENT	\N	2014-06-27 21:01:07	2014-06-27 21:01:07
910	41	451	NO COMMENT	\N	2014-06-30 18:51:05	2014-06-30 18:51:05
911	20	451	NO COMMENT	\N	2014-07-01 11:29:07	2014-07-01 11:29:07
912	7	452	NO COMMENT	\N	2014-05-21 19:27:53	2014-05-21 19:27:53
913	7	453	NO COMMENT	\N	2014-04-08 14:09:23	2014-04-08 14:09:23
914	7	455	NO COMMENT	\N	2014-05-14 01:40:27	2014-05-14 01:40:27
915	7	468	NO COMMENT	\N	2014-04-30 02:20:06	2014-04-30 02:20:06
916	48	468	NO COMMENT	\N	2014-05-13 06:51:56	2014-05-13 06:51:56
917	27	468	NO COMMENT	\N	2014-06-25 14:12:41	2014-06-25 14:12:41
918	7	456	NO COMMENT	\N	2014-05-15 09:06:47	2014-05-15 09:06:47
919	7	459	NO COMMENT	\N	2014-05-04 16:29:48	2014-05-04 16:29:48
920	7	461	NO COMMENT	\N	2014-06-20 06:38:47	2014-06-20 06:38:47
921	45	462	NO COMMENT	\N	2014-05-31 22:59:23	2014-05-31 22:59:23
922	7	462	NO COMMENT	\N	2014-07-01 19:53:00	2014-07-01 19:53:00
923	16	463	NO COMMENT	\N	2014-05-31 16:53:38	2014-05-31 16:53:38
924	25	463	NO COMMENT	\N	2014-06-13 13:14:45	2014-06-13 13:14:45
925	7	463	NO COMMENT	\N	2014-06-24 01:19:03	2014-06-24 01:19:03
926	12	463	NO COMMENT	\N	2014-06-24 08:36:03	2014-06-24 08:36:03
927	43	463	NO COMMENT	\N	2014-06-29 04:50:09	2014-06-29 04:50:09
928	4	464	NO COMMENT	\N	2014-06-26 02:44:58	2014-06-26 02:44:58
929	12	464	NO COMMENT	\N	2014-06-30 15:25:13	2014-06-30 15:25:13
930	27	465	NO COMMENT	\N	2014-04-13 07:12:55	2014-04-13 07:12:55
931	7	465	NO COMMENT	\N	2014-06-03 14:36:34	2014-06-03 14:36:34
932	7	709	NO COMMENT	\N	2014-05-16 09:24:56	2014-05-16 09:24:56
933	27	470	NO COMMENT	\N	2014-05-18 06:00:32	2014-05-18 06:00:32
934	29	470	NO COMMENT	\N	2014-05-25 23:46:02	2014-05-25 23:46:02
935	7	470	NO COMMENT	\N	2014-06-05 14:49:47	2014-06-05 14:49:47
936	48	471	NO COMMENT	\N	2014-05-19 16:29:10	2014-05-19 16:29:10
937	29	471	NO COMMENT	\N	2014-05-23 04:48:12	2014-05-23 04:48:12
938	27	471	NO COMMENT	\N	2014-06-10 05:00:27	2014-06-10 05:00:27
939	7	471	NO COMMENT	\N	2014-06-18 00:26:18	2014-06-18 00:26:18
940	32	472	NO COMMENT	\N	2014-06-16 10:44:25	2014-06-16 10:44:25
941	40	472	NO COMMENT	\N	2014-06-19 07:41:03	2014-06-19 07:41:03
942	29	472	NO COMMENT	\N	2014-06-22 07:45:25	2014-06-22 07:45:25
943	7	473	NO COMMENT	\N	2014-03-19 18:05:50	2014-03-19 18:05:50
944	43	475	NO COMMENT	\N	2014-05-29 05:22:05	2014-05-29 05:22:05
945	7	476	NO COMMENT	\N	2014-06-06 06:38:43	2014-06-06 06:38:43
946	7	477	NO COMMENT	\N	2014-05-23 17:39:55	2014-05-23 17:39:55
947	16	477	NO COMMENT	\N	2014-06-15 23:38:09	2014-06-15 23:38:09
948	16	478	NO COMMENT	\N	2014-05-26 07:43:51	2014-05-26 07:43:51
949	7	478	NO COMMENT	\N	2014-06-01 13:15:41	2014-06-01 13:15:41
950	45	478	NO COMMENT	\N	2014-06-01 21:51:49	2014-06-01 21:51:49
951	19	478	NO COMMENT	\N	2014-06-08 14:26:34	2014-06-08 14:26:34
952	37	478	NO COMMENT	\N	2014-06-26 01:58:51	2014-06-26 01:58:51
953	25	480	NO COMMENT	\N	2014-06-23 15:04:07	2014-06-23 15:04:07
954	43	480	NO COMMENT	\N	2014-06-24 17:01:47	2014-06-24 17:01:47
955	9	480	NO COMMENT	\N	2014-06-26 01:13:19	2014-06-26 01:13:19
956	7	481	NO COMMENT	\N	2014-04-04 20:08:37	2014-04-04 20:08:37
957	7	482	NO COMMENT	\N	2014-05-11 12:24:59	2014-05-11 12:24:59
958	7	483	NO COMMENT	\N	2014-04-18 13:15:59	2014-04-18 13:15:59
959	7	484	NO COMMENT	\N	2014-03-28 20:24:00	2014-03-28 20:24:00
960	7	486	NO COMMENT	\N	2014-06-27 04:22:31	2014-06-27 04:22:31
961	7	487	NO COMMENT	\N	2014-05-20 01:45:01	2014-05-20 01:45:01
962	7	489	NO COMMENT	\N	2014-07-01 17:34:10	2014-07-01 17:34:10
963	7	490	NO COMMENT	\N	2014-06-26 15:43:31	2014-06-26 15:43:31
964	7	491	NO COMMENT	\N	2014-05-03 23:09:30	2014-05-03 23:09:30
965	7	492	NO COMMENT	\N	2014-03-24 11:18:47	2014-03-24 11:18:47
966	7	710	NO COMMENT	\N	2014-06-17 00:50:57	2014-06-17 00:50:57
967	7	493	NO COMMENT	\N	2014-07-01 18:14:01	2014-07-01 18:14:01
968	7	494	NO COMMENT	\N	2014-05-01 01:49:06	2014-05-01 01:49:06
969	7	495	NO COMMENT	\N	2014-04-08 14:43:12	2014-04-08 14:43:12
970	2	496	NO COMMENT	\N	2014-04-14 00:36:50	2014-04-14 00:36:50
971	7	496	NO COMMENT	\N	2014-04-20 21:49:24	2014-04-20 21:49:24
972	1	496	NO COMMENT	\N	2014-05-03 15:42:23	2014-05-03 15:42:23
973	31	498	NO COMMENT	\N	2014-05-18 02:47:19	2014-05-18 02:47:19
974	2	498	NO COMMENT	\N	2014-05-27 18:35:40	2014-05-27 18:35:40
975	2	499	NO COMMENT	\N	2014-06-27 12:28:53	2014-06-27 12:28:53
976	1	499	NO COMMENT	\N	2014-06-28 08:22:24	2014-06-28 08:22:24
977	2	500	NO COMMENT	\N	2014-02-05 19:27:12	2014-02-05 19:27:12
978	1	500	NO COMMENT	\N	2014-02-12 02:13:23	2014-02-12 02:13:23
979	7	500	NO COMMENT	\N	2014-02-13 13:47:10	2014-02-13 13:47:10
980	2	501	NO COMMENT	\N	2014-05-17 00:51:54	2014-05-17 00:51:54
981	2	502	NO COMMENT	\N	2014-05-26 18:48:43	2014-05-26 18:48:43
982	37	502	NO COMMENT	\N	2014-06-02 09:08:46	2014-06-02 09:08:46
983	16	502	NO COMMENT	\N	2014-06-09 02:38:45	2014-06-09 02:38:45
984	1	502	NO COMMENT	\N	2014-06-25 11:23:12	2014-06-25 11:23:12
985	1	503	NO COMMENT	\N	2014-04-03 01:07:39	2014-04-03 01:07:39
986	2	503	NO COMMENT	\N	2014-05-18 13:33:31	2014-05-18 13:33:31
987	2	504	NO COMMENT	\N	2014-04-15 13:55:35	2014-04-15 13:55:35
988	7	504	NO COMMENT	\N	2014-05-11 18:26:44	2014-05-11 18:26:44
989	1	504	NO COMMENT	\N	2014-06-03 07:05:51	2014-06-03 07:05:51
990	6	837	NO COMMENT	\N	2014-05-07 02:42:07	2014-05-07 02:42:07
991	1	837	NO COMMENT	\N	2014-05-22 16:51:46	2014-05-22 16:51:46
992	7	837	NO COMMENT	\N	2014-06-01 17:00:32	2014-06-01 17:00:32
993	43	506	NO COMMENT	\N	2014-05-27 16:12:18	2014-05-27 16:12:18
994	2	506	NO COMMENT	\N	2014-06-16 06:26:20	2014-06-16 06:26:20
995	1	506	NO COMMENT	\N	2014-06-20 22:50:56	2014-06-20 22:50:56
996	2	507	NO COMMENT	\N	2014-05-06 23:34:25	2014-05-06 23:34:25
997	7	507	NO COMMENT	\N	2014-05-10 12:29:19	2014-05-10 12:29:19
998	29	507	NO COMMENT	\N	2014-05-12 06:03:05	2014-05-12 06:03:05
999	1	507	NO COMMENT	\N	2014-06-03 22:56:14	2014-06-03 22:56:14
1000	1	508	NO COMMENT	\N	2014-06-18 07:18:13	2014-06-18 07:18:13
1001	2	508	NO COMMENT	\N	2014-06-23 00:05:13	2014-06-23 00:05:13
1002	2	510	NO COMMENT	\N	2014-04-16 22:01:11	2014-04-16 22:01:11
1003	7	510	NO COMMENT	\N	2014-06-13 06:00:16	2014-06-13 06:00:16
1004	1	512	NO COMMENT	\N	2014-05-04 06:21:21	2014-05-04 06:21:21
1005	7	512	NO COMMENT	\N	2014-05-12 21:46:33	2014-05-12 21:46:33
1006	2	512	NO COMMENT	\N	2014-05-31 12:53:49	2014-05-31 12:53:49
1007	7	513	NO COMMENT	\N	2014-04-24 12:10:26	2014-04-24 12:10:26
1008	2	513	NO COMMENT	\N	2014-05-14 22:11:07	2014-05-14 22:11:07
1009	1	513	NO COMMENT	\N	2014-06-16 17:29:33	2014-06-16 17:29:33
1010	1	514	NO COMMENT	\N	2014-03-10 20:59:01	2014-03-10 20:59:01
1011	2	514	NO COMMENT	\N	2014-04-04 20:06:07	2014-04-04 20:06:07
1012	7	514	NO COMMENT	\N	2014-06-05 09:11:48	2014-06-05 09:11:48
1013	2	515	NO COMMENT	\N	2014-03-10 19:06:28	2014-03-10 19:06:28
1014	7	515	NO COMMENT	\N	2014-04-30 14:24:36	2014-04-30 14:24:36
1015	2	516	NO COMMENT	\N	2014-03-30 04:27:57	2014-03-30 04:27:57
1016	1	516	NO COMMENT	\N	2014-06-01 14:04:03	2014-06-01 14:04:03
1017	7	516	NO COMMENT	\N	2014-06-05 12:39:38	2014-06-05 12:39:38
1018	2	517	NO COMMENT	\N	2014-04-05 22:50:00	2014-04-05 22:50:00
1019	1	517	NO COMMENT	\N	2014-05-13 19:45:36	2014-05-13 19:45:36
1020	7	517	NO COMMENT	\N	2014-05-18 18:42:53	2014-05-18 18:42:53
1021	2	527	NO COMMENT	\N	2014-04-15 22:12:46	2014-04-15 22:12:46
1022	7	527	NO COMMENT	\N	2014-04-24 09:08:51	2014-04-24 09:08:51
1023	1	527	NO COMMENT	\N	2014-04-27 19:49:58	2014-04-27 19:49:58
1024	7	518	NO COMMENT	\N	2014-04-06 07:59:15	2014-04-06 07:59:15
1025	1	518	NO COMMENT	\N	2014-04-12 11:53:55	2014-04-12 11:53:55
1026	2	518	NO COMMENT	\N	2014-07-02 03:41:42	2014-07-02 03:41:42
1027	2	519	NO COMMENT	\N	2014-04-08 04:46:59	2014-04-08 04:46:59
1028	1	519	NO COMMENT	\N	2014-05-17 00:00:16	2014-05-17 00:00:16
1029	2	520	NO COMMENT	\N	2014-03-30 11:23:30	2014-03-30 11:23:30
1030	1	520	NO COMMENT	\N	2014-05-27 20:07:18	2014-05-27 20:07:18
1031	7	520	NO COMMENT	\N	2014-06-17 08:17:01	2014-06-17 08:17:01
1032	7	521	NO COMMENT	\N	2014-04-16 18:23:58	2014-04-16 18:23:58
1033	2	521	NO COMMENT	\N	2014-06-30 09:28:15	2014-06-30 09:28:15
1034	1	521	NO COMMENT	\N	2014-07-01 19:51:43	2014-07-01 19:51:43
1035	2	522	NO COMMENT	\N	2014-06-02 19:15:14	2014-06-02 19:15:14
1036	7	522	NO COMMENT	\N	2014-06-06 08:36:39	2014-06-06 08:36:39
1037	28	522	NO COMMENT	\N	2014-06-19 00:53:46	2014-06-19 00:53:46
1038	1	523	NO COMMENT	\N	2014-03-11 01:13:21	2014-03-11 01:13:21
1039	2	523	NO COMMENT	\N	2014-04-06 22:18:10	2014-04-06 22:18:10
1040	7	523	NO COMMENT	\N	2014-04-16 04:57:11	2014-04-16 04:57:11
1041	2	524	NO COMMENT	\N	2014-06-19 15:07:01	2014-06-19 15:07:01
1042	2	526	NO COMMENT	\N	2014-03-20 20:47:02	2014-03-20 20:47:02
1043	1	526	NO COMMENT	\N	2014-04-05 03:44:46	2014-04-05 03:44:46
1044	7	526	NO COMMENT	\N	2014-05-02 00:15:01	2014-05-02 00:15:01
1045	11	838	NO COMMENT	\N	2014-06-09 00:43:45	2014-06-09 00:43:45
1046	2	528	NO COMMENT	\N	2014-05-06 12:49:49	2014-05-06 12:49:49
1047	7	528	NO COMMENT	\N	2014-06-04 21:11:10	2014-06-04 21:11:10
1048	1	528	NO COMMENT	\N	2014-06-14 17:27:18	2014-06-14 17:27:18
1049	7	529	NO COMMENT	\N	2014-04-29 06:42:38	2014-04-29 06:42:38
1050	1	529	NO COMMENT	\N	2014-05-13 05:14:53	2014-05-13 05:14:53
1051	2	529	NO COMMENT	\N	2014-06-22 22:26:50	2014-06-22 22:26:50
1052	2	531	NO COMMENT	\N	2014-04-08 12:27:03	2014-04-08 12:27:03
1053	7	531	NO COMMENT	\N	2014-04-15 19:29:17	2014-04-15 19:29:17
1054	44	531	NO COMMENT	\N	2014-04-21 00:35:27	2014-04-21 00:35:27
1055	1	531	NO COMMENT	\N	2014-05-30 08:05:48	2014-05-30 08:05:48
1056	7	532	NO COMMENT	\N	2014-05-15 12:13:20	2014-05-15 12:13:20
1057	1	533	NO COMMENT	\N	2014-03-31 09:51:03	2014-03-31 09:51:03
1058	7	533	NO COMMENT	\N	2014-05-04 09:39:18	2014-05-04 09:39:18
1059	7	534	NO COMMENT	\N	2014-04-03 16:22:59	2014-04-03 16:22:59
1060	1	534	NO COMMENT	\N	2014-04-19 14:19:06	2014-04-19 14:19:06
1061	2	534	NO COMMENT	\N	2014-05-23 22:50:34	2014-05-23 22:50:34
1062	7	535	NO COMMENT	\N	2014-06-19 12:33:46	2014-06-19 12:33:46
1063	2	536	NO COMMENT	\N	2014-05-04 12:55:29	2014-05-04 12:55:29
1064	1	536	NO COMMENT	\N	2014-06-01 11:57:55	2014-06-01 11:57:55
1065	7	536	NO COMMENT	\N	2014-06-22 06:16:25	2014-06-22 06:16:25
1066	1	538	NO COMMENT	\N	2014-03-20 17:21:40	2014-03-20 17:21:40
1067	7	538	NO COMMENT	\N	2014-05-31 17:57:04	2014-05-31 17:57:04
1068	2	538	NO COMMENT	\N	2014-06-06 15:22:47	2014-06-06 15:22:47
1069	1	539	NO COMMENT	\N	2014-05-15 18:26:45	2014-05-15 18:26:45
1070	7	539	NO COMMENT	\N	2014-06-03 10:31:05	2014-06-03 10:31:05
1071	2	539	NO COMMENT	\N	2014-06-21 22:13:28	2014-06-21 22:13:28
1072	7	541	NO COMMENT	\N	2014-05-05 05:12:35	2014-05-05 05:12:35
1073	2	541	NO COMMENT	\N	2014-06-11 01:21:06	2014-06-11 01:21:06
1074	1	541	NO COMMENT	\N	2014-06-14 16:58:29	2014-06-14 16:58:29
1075	2	839	NO COMMENT	\N	2014-03-23 19:29:56	2014-03-23 19:29:56
1076	7	839	NO COMMENT	\N	2014-04-05 21:29:59	2014-04-05 21:29:59
1077	27	839	NO COMMENT	\N	2014-06-07 11:23:23	2014-06-07 11:23:23
1078	1	839	NO COMMENT	\N	2014-06-23 11:49:38	2014-06-23 11:49:38
1079	2	543	NO COMMENT	\N	2014-03-23 19:41:02	2014-03-23 19:41:02
1080	1	543	NO COMMENT	\N	2014-06-11 13:09:45	2014-06-11 13:09:45
1081	7	543	NO COMMENT	\N	2014-06-28 13:04:53	2014-06-28 13:04:53
1082	1	544	NO COMMENT	\N	2014-04-11 16:53:26	2014-04-11 16:53:26
1083	2	544	NO COMMENT	\N	2014-05-01 07:15:39	2014-05-01 07:15:39
1084	7	544	NO COMMENT	\N	2014-05-03 20:38:57	2014-05-03 20:38:57
1085	7	545	NO COMMENT	\N	2014-04-20 03:55:06	2014-04-20 03:55:06
1086	2	545	NO COMMENT	\N	2014-05-14 04:10:03	2014-05-14 04:10:03
1087	1	545	NO COMMENT	\N	2014-05-17 19:32:42	2014-05-17 19:32:42
1088	7	546	NO COMMENT	\N	2014-05-29 02:01:46	2014-05-29 02:01:46
1089	2	546	NO COMMENT	\N	2014-06-23 12:46:48	2014-06-23 12:46:48
1090	1	546	NO COMMENT	\N	2014-07-01 02:09:58	2014-07-01 02:09:58
1091	1	547	NO COMMENT	\N	2014-06-10 19:36:44	2014-06-10 19:36:44
1092	7	547	NO COMMENT	\N	2014-06-11 04:08:16	2014-06-11 04:08:16
1093	2	547	NO COMMENT	\N	2014-06-15 08:09:48	2014-06-15 08:09:48
1094	1	548	NO COMMENT	\N	2014-06-25 17:09:07	2014-06-25 17:09:07
1095	7	548	NO COMMENT	\N	2014-07-02 19:13:20	2014-07-02 19:13:20
1096	7	549	NO COMMENT	\N	2014-06-19 10:16:33	2014-06-19 10:16:33
1097	2	549	NO COMMENT	\N	2014-06-20 16:19:47	2014-06-20 16:19:47
1098	1	549	NO COMMENT	\N	2014-06-28 05:58:37	2014-06-28 05:58:37
1099	1	550	NO COMMENT	\N	2014-05-04 23:56:41	2014-05-04 23:56:41
1100	7	550	NO COMMENT	\N	2014-05-22 09:01:55	2014-05-22 09:01:55
1101	2	550	NO COMMENT	\N	2014-06-12 03:38:47	2014-06-12 03:38:47
1102	7	551	NO COMMENT	\N	2014-06-18 00:38:10	2014-06-18 00:38:10
1103	2	551	NO COMMENT	\N	2014-06-19 11:07:33	2014-06-19 11:07:33
1104	1	551	NO COMMENT	\N	2014-06-27 12:54:07	2014-06-27 12:54:07
1105	1	552	NO COMMENT	\N	2014-03-24 06:26:11	2014-03-24 06:26:11
1106	7	552	NO COMMENT	\N	2014-04-03 02:56:25	2014-04-03 02:56:25
1107	2	552	NO COMMENT	\N	2014-04-09 21:46:23	2014-04-09 21:46:23
1108	2	554	NO COMMENT	\N	2014-04-09 21:46:05	2014-04-09 21:46:05
1109	7	554	NO COMMENT	\N	2014-05-30 00:33:10	2014-05-30 00:33:10
1110	7	555	NO COMMENT	\N	2014-05-30 12:15:27	2014-05-30 12:15:27
1111	31	555	NO COMMENT	\N	2014-06-04 14:04:39	2014-06-04 14:04:39
1112	2	555	NO COMMENT	\N	2014-06-13 09:24:33	2014-06-13 09:24:33
1113	1	555	NO COMMENT	\N	2014-06-23 10:59:26	2014-06-23 10:59:26
1114	1	556	NO COMMENT	\N	2014-04-22 10:26:17	2014-04-22 10:26:17
1115	7	556	NO COMMENT	\N	2014-04-22 11:47:37	2014-04-22 11:47:37
1116	2	556	NO COMMENT	\N	2014-06-15 02:15:21	2014-06-15 02:15:21
1117	2	557	NO COMMENT	\N	2014-06-03 11:54:38	2014-06-03 11:54:38
1118	7	557	NO COMMENT	\N	2014-06-22 04:33:42	2014-06-22 04:33:42
1119	1	557	NO COMMENT	\N	2014-07-02 08:57:24	2014-07-02 08:57:24
1120	2	559	NO COMMENT	\N	2014-05-10 12:44:54	2014-05-10 12:44:54
1121	7	559	NO COMMENT	\N	2014-05-13 14:08:57	2014-05-13 14:08:57
1122	19	559	NO COMMENT	\N	2014-05-18 16:40:02	2014-05-18 16:40:02
1123	1	559	NO COMMENT	\N	2014-06-01 03:29:11	2014-06-01 03:29:11
1124	7	560	NO COMMENT	\N	2014-05-08 01:28:14	2014-05-08 01:28:14
1125	2	560	NO COMMENT	\N	2014-05-17 20:48:12	2014-05-17 20:48:12
1126	19	560	NO COMMENT	\N	2014-05-26 00:02:30	2014-05-26 00:02:30
1127	1	560	NO COMMENT	\N	2014-06-03 14:01:38	2014-06-03 14:01:38
1128	1	562	NO COMMENT	\N	2014-06-02 07:43:12	2014-06-02 07:43:12
1129	2	562	NO COMMENT	\N	2014-06-12 21:41:58	2014-06-12 21:41:58
1130	7	562	NO COMMENT	\N	2014-06-13 14:43:23	2014-06-13 14:43:23
1131	1	564	NO COMMENT	\N	2014-03-29 15:05:17	2014-03-29 15:05:17
1132	29	564	NO COMMENT	\N	2014-04-03 10:19:45	2014-04-03 10:19:45
1133	2	564	NO COMMENT	\N	2014-05-15 16:17:30	2014-05-15 16:17:30
1134	7	564	NO COMMENT	\N	2014-06-13 18:06:27	2014-06-13 18:06:27
1135	29	566	NO COMMENT	\N	2014-06-01 12:55:58	2014-06-01 12:55:58
1136	2	566	NO COMMENT	\N	2014-06-03 21:15:37	2014-06-03 21:15:37
1137	1	566	NO COMMENT	\N	2014-06-04 04:37:33	2014-06-04 04:37:33
1138	7	566	NO COMMENT	\N	2014-06-27 15:28:13	2014-06-27 15:28:13
1139	7	567	NO COMMENT	\N	2014-04-29 15:06:20	2014-04-29 15:06:20
1140	7	569	NO COMMENT	\N	2014-03-14 20:43:15	2014-03-14 20:43:15
1141	7	570	NO COMMENT	\N	2014-05-18 12:00:49	2014-05-18 12:00:49
1142	19	571	NO COMMENT	\N	2014-06-07 21:29:31	2014-06-07 21:29:31
1143	7	572	NO COMMENT	\N	2014-04-20 08:33:44	2014-04-20 08:33:44
1144	7	573	NO COMMENT	\N	2014-06-30 01:34:47	2014-06-30 01:34:47
1145	7	575	NO COMMENT	\N	2014-06-09 18:45:30	2014-06-09 18:45:30
1146	44	576	NO COMMENT	\N	2014-05-24 11:46:39	2014-05-24 11:46:39
1147	7	576	NO COMMENT	\N	2014-06-26 04:02:02	2014-06-26 04:02:02
1148	7	577	NO COMMENT	\N	2014-06-25 10:51:21	2014-06-25 10:51:21
1149	7	578	NO COMMENT	\N	2014-04-08 01:10:41	2014-04-08 01:10:41
1150	16	578	NO COMMENT	\N	2014-06-14 01:44:30	2014-06-14 01:44:30
1151	19	579	NO COMMENT	\N	2014-05-12 04:52:46	2014-05-12 04:52:46
1152	7	579	NO COMMENT	\N	2014-06-04 18:44:28	2014-06-04 18:44:28
1153	16	579	NO COMMENT	\N	2014-06-18 17:28:25	2014-06-18 17:28:25
1154	37	579	NO COMMENT	\N	2014-06-30 21:13:42	2014-06-30 21:13:42
1155	7	666	NO COMMENT	\N	2014-03-22 05:06:57	2014-03-22 05:06:57
1156	27	666	NO COMMENT	\N	2014-05-30 09:51:49	2014-05-30 09:51:49
1157	37	580	NO COMMENT	\N	2014-06-08 04:57:24	2014-06-08 04:57:24
1158	16	580	NO COMMENT	\N	2014-06-17 12:53:35	2014-06-17 12:53:35
1159	45	581	NO COMMENT	\N	2014-06-12 12:45:58	2014-06-12 12:45:58
1160	45	582	NO COMMENT	\N	2014-06-14 03:54:23	2014-06-14 03:54:23
1161	7	583	NO COMMENT	\N	2014-05-11 11:48:14	2014-05-11 11:48:14
1162	42	584	NO COMMENT	\N	2014-04-22 22:50:24	2014-04-22 22:50:24
1163	7	584	NO COMMENT	\N	2014-05-19 23:53:23	2014-05-19 23:53:23
1164	43	584	NO COMMENT	\N	2014-05-21 04:15:39	2014-05-21 04:15:39
1165	43	585	NO COMMENT	\N	2014-05-06 14:01:20	2014-05-06 14:01:20
1166	42	585	NO COMMENT	\N	2014-06-10 23:59:41	2014-06-10 23:59:41
1167	7	585	NO COMMENT	\N	2014-06-12 12:28:10	2014-06-12 12:28:10
1168	43	586	NO COMMENT	\N	2014-05-25 03:12:14	2014-05-25 03:12:14
1169	7	586	NO COMMENT	\N	2014-06-05 08:39:47	2014-06-05 08:39:47
1170	42	586	NO COMMENT	\N	2014-06-08 06:56:52	2014-06-08 06:56:52
1171	43	587	NO COMMENT	\N	2014-05-31 06:06:29	2014-05-31 06:06:29
1172	7	587	NO COMMENT	\N	2014-06-09 17:43:42	2014-06-09 17:43:42
1173	42	587	NO COMMENT	\N	2014-06-18 14:27:50	2014-06-18 14:27:50
1174	43	588	NO COMMENT	\N	2014-05-15 18:48:17	2014-05-15 18:48:17
1175	48	588	NO COMMENT	\N	2014-05-16 05:32:57	2014-05-16 05:32:57
1176	42	588	NO COMMENT	\N	2014-05-29 03:47:43	2014-05-29 03:47:43
1177	48	589	NO COMMENT	\N	2014-06-09 04:55:25	2014-06-09 04:55:25
1178	34	589	NO COMMENT	\N	2014-06-15 18:26:37	2014-06-15 18:26:37
1179	42	589	NO COMMENT	\N	2014-06-29 07:10:05	2014-06-29 07:10:05
1180	43	589	NO COMMENT	\N	2014-06-30 23:06:28	2014-06-30 23:06:28
1181	42	590	NO COMMENT	\N	2014-06-02 22:43:03	2014-06-02 22:43:03
1182	34	590	NO COMMENT	\N	2014-06-29 17:42:29	2014-06-29 17:42:29
1183	7	591	NO COMMENT	\N	2014-06-24 06:59:08	2014-06-24 06:59:08
1184	16	772	NO COMMENT	\N	2014-04-24 11:05:04	2014-04-24 11:05:04
1185	2	772	NO COMMENT	\N	2014-05-06 23:52:05	2014-05-06 23:52:05
1186	1	772	NO COMMENT	\N	2014-06-24 10:03:58	2014-06-24 10:03:58
1187	7	594	NO COMMENT	\N	2014-05-17 02:10:20	2014-05-17 02:10:20
1188	16	594	NO COMMENT	\N	2014-05-28 03:12:37	2014-05-28 03:12:37
1189	7	595	NO COMMENT	\N	2014-07-02 01:06:59	2014-07-02 01:06:59
1190	42	597	NO COMMENT	\N	2014-06-17 13:36:49	2014-06-17 13:36:49
1191	48	598	NO COMMENT	\N	2014-06-07 02:11:24	2014-06-07 02:11:24
1192	42	598	NO COMMENT	\N	2014-06-17 11:14:24	2014-06-17 11:14:24
1193	7	600	NO COMMENT	\N	2014-05-26 11:15:30	2014-05-26 11:15:30
1194	36	600	NO COMMENT	\N	2014-06-27 04:45:22	2014-06-27 04:45:22
1195	31	601	NO COMMENT	\N	2014-06-27 08:05:41	2014-06-27 08:05:41
1196	13	601	NO COMMENT	\N	2014-06-29 16:04:43	2014-06-29 16:04:43
1197	25	601	NO COMMENT	\N	2014-07-02 11:58:18	2014-07-02 11:58:18
1198	20	601	NO COMMENT	\N	2014-07-02 15:03:44	2014-07-02 15:03:44
1199	7	601	NO COMMENT	\N	2014-07-02 20:20:47	2014-07-02 20:20:47
1200	9	602	NO COMMENT	\N	2014-06-30 11:41:53	2014-06-30 11:41:53
1201	48	602	NO COMMENT	\N	2014-07-01 05:01:50	2014-07-01 05:01:50
1202	35	602	NO COMMENT	\N	2014-07-01 08:54:30	2014-07-01 08:54:30
1203	5	602	NO COMMENT	\N	2014-07-01 13:54:17	2014-07-01 13:54:17
1204	7	602	NO COMMENT	\N	2014-07-01 20:33:54	2014-07-01 20:33:54
1205	17	602	NO COMMENT	\N	2014-07-02 04:43:25	2014-07-02 04:43:25
1206	13	602	NO COMMENT	\N	2014-07-02 09:56:05	2014-07-02 09:56:05
1207	6	602	NO COMMENT	\N	2014-07-02 17:25:15	2014-07-02 17:25:15
1208	7	603	NO COMMENT	\N	2014-06-19 16:56:52	2014-06-19 16:56:52
1209	29	603	NO COMMENT	\N	2014-06-22 15:21:09	2014-06-22 15:21:09
1210	2	603	NO COMMENT	\N	2014-06-23 21:46:57	2014-06-23 21:46:57
1211	22	603	NO COMMENT	\N	2014-06-24 08:47:01	2014-06-24 08:47:01
1212	42	603	NO COMMENT	\N	2014-06-26 21:01:37	2014-06-26 21:01:37
1213	20	605	NO COMMENT	\N	2014-06-19 20:15:11	2014-06-19 20:15:11
1214	36	605	NO COMMENT	\N	2014-06-21 00:05:59	2014-06-21 00:05:59
1215	48	605	NO COMMENT	\N	2014-06-22 11:57:29	2014-06-22 11:57:29
1216	7	605	NO COMMENT	\N	2014-06-23 05:23:05	2014-06-23 05:23:05
1217	43	605	NO COMMENT	\N	2014-06-23 14:58:36	2014-06-23 14:58:36
1218	2	605	NO COMMENT	\N	2014-06-23 18:56:53	2014-06-23 18:56:53
1219	30	605	NO COMMENT	\N	2014-06-28 10:33:28	2014-06-28 10:33:28
1220	41	605	NO COMMENT	\N	2014-06-29 20:52:00	2014-06-29 20:52:00
1221	1	605	NO COMMENT	\N	2014-07-02 05:25:18	2014-07-02 05:25:18
1222	40	605	NO COMMENT	\N	2014-07-02 14:29:54	2014-07-02 14:29:54
1223	7	606	NO COMMENT	\N	2014-06-28 09:46:49	2014-06-28 09:46:49
1224	2	606	NO COMMENT	\N	2014-06-30 14:04:26	2014-06-30 14:04:26
1225	30	606	NO COMMENT	\N	2014-07-01 22:08:31	2014-07-01 22:08:31
1226	1	606	NO COMMENT	\N	2014-07-02 11:59:46	2014-07-02 11:59:46
1227	1	608	NO COMMENT	\N	2014-06-20 14:18:24	2014-06-20 14:18:24
1228	2	608	NO COMMENT	\N	2014-06-23 12:04:10	2014-06-23 12:04:10
1229	7	608	NO COMMENT	\N	2014-06-25 01:32:30	2014-06-25 01:32:30
1230	2	609	NO COMMENT	\N	2014-06-21 08:05:33	2014-06-21 08:05:33
1231	21	609	NO COMMENT	\N	2014-06-24 08:06:19	2014-06-24 08:06:19
1232	7	609	NO COMMENT	\N	2014-06-26 02:22:47	2014-06-26 02:22:47
1233	7	611	NO COMMENT	\N	2014-07-01 13:22:40	2014-07-01 13:22:40
1234	7	612	NO COMMENT	\N	2014-06-29 22:14:31	2014-06-29 22:14:31
1235	2	612	NO COMMENT	\N	2014-06-30 04:06:57	2014-06-30 04:06:57
1236	27	612	NO COMMENT	\N	2014-07-01 10:58:04	2014-07-01 10:58:04
1237	7	613	NO COMMENT	\N	2014-06-30 11:13:47	2014-06-30 11:13:47
1238	1	613	NO COMMENT	\N	2014-07-02 12:57:56	2014-07-02 12:57:56
1239	7	676	NO COMMENT	\N	2014-06-14 12:19:04	2014-06-14 12:19:04
1240	1	614	NO COMMENT	\N	2014-06-29 11:13:55	2014-06-29 11:13:55
1241	7	614	NO COMMENT	\N	2014-06-30 05:06:58	2014-06-30 05:06:58
1242	1	615	NO COMMENT	\N	2014-06-29 16:29:46	2014-06-29 16:29:46
1243	2	615	NO COMMENT	\N	2014-07-01 06:25:19	2014-07-01 06:25:19
1244	7	615	NO COMMENT	\N	2014-07-01 09:00:45	2014-07-01 09:00:45
1245	2	617	NO COMMENT	\N	2014-06-28 22:10:42	2014-06-28 22:10:42
1246	7	617	NO COMMENT	\N	2014-06-30 23:51:09	2014-06-30 23:51:09
1247	1	617	NO COMMENT	\N	2014-07-02 10:15:13	2014-07-02 10:15:13
1248	28	618	NO COMMENT	\N	2014-06-21 11:49:21	2014-06-21 11:49:21
1249	2	618	NO COMMENT	\N	2014-06-26 23:54:52	2014-06-26 23:54:52
1250	20	618	NO COMMENT	\N	2014-06-29 14:32:54	2014-06-29 14:32:54
1251	2	619	NO COMMENT	\N	2014-06-18 15:08:48	2014-06-18 15:08:48
1252	8	619	NO COMMENT	\N	2014-06-23 22:22:16	2014-06-23 22:22:16
1253	28	619	NO COMMENT	\N	2014-06-25 22:14:27	2014-06-25 22:14:27
1254	3	619	NO COMMENT	\N	2014-06-26 07:25:18	2014-06-26 07:25:18
1255	1	619	NO COMMENT	\N	2014-06-26 11:46:05	2014-06-26 11:46:05
1256	13	619	NO COMMENT	\N	2014-06-28 04:17:46	2014-06-28 04:17:46
1257	19	619	NO COMMENT	\N	2014-06-30 04:02:20	2014-06-30 04:02:20
1258	29	619	NO COMMENT	\N	2014-07-02 06:43:31	2014-07-02 06:43:31
1259	22	619	NO COMMENT	\N	2014-07-02 09:16:08	2014-07-02 09:16:08
1260	3	620	NO COMMENT	\N	2014-06-24 19:59:30	2014-06-24 19:59:30
1261	19	620	NO COMMENT	\N	2014-06-26 01:33:46	2014-06-26 01:33:46
1262	8	620	NO COMMENT	\N	2014-06-27 09:22:31	2014-06-27 09:22:31
1263	22	620	NO COMMENT	\N	2014-06-28 20:02:53	2014-06-28 20:02:53
1264	2	620	NO COMMENT	\N	2014-07-01 20:13:08	2014-07-01 20:13:08
1265	8	621	NO COMMENT	\N	2014-06-25 06:55:16	2014-06-25 06:55:16
1266	1	633	NO COMMENT	\N	2014-04-26 07:45:10	2014-04-26 07:45:10
1267	7	633	NO COMMENT	\N	2014-06-20 12:21:32	2014-06-20 12:21:32
1268	2	623	NO COMMENT	\N	2014-06-28 16:50:46	2014-06-28 16:50:46
1269	1	624	NO COMMENT	\N	2014-06-23 10:57:26	2014-06-23 10:57:26
1270	33	624	NO COMMENT	\N	2014-06-29 06:35:36	2014-06-29 06:35:36
1271	7	625	NO COMMENT	\N	2014-06-28 04:42:18	2014-06-28 04:42:18
1272	1	626	NO COMMENT	\N	2014-06-20 10:28:53	2014-06-20 10:28:53
1273	7	626	NO COMMENT	\N	2014-06-28 22:25:27	2014-06-28 22:25:27
1274	2	626	NO COMMENT	\N	2014-06-29 15:33:50	2014-06-29 15:33:50
1275	7	627	NO COMMENT	\N	2014-07-01 03:40:50	2014-07-01 03:40:50
1276	1	627	NO COMMENT	\N	2014-07-01 08:30:32	2014-07-01 08:30:32
1277	19	627	NO COMMENT	\N	2014-07-01 14:04:15	2014-07-01 14:04:15
1278	26	627	NO COMMENT	\N	2014-07-02 13:01:06	2014-07-02 13:01:06
1279	2	627	NO COMMENT	\N	2014-07-02 17:37:52	2014-07-02 17:37:52
1280	7	628	NO COMMENT	\N	2014-06-19 12:18:39	2014-06-19 12:18:39
1281	22	628	NO COMMENT	\N	2014-06-26 15:34:58	2014-06-26 15:34:58
1282	14	628	NO COMMENT	\N	2014-06-30 12:42:10	2014-06-30 12:42:10
1283	6	628	NO COMMENT	\N	2014-06-30 22:11:26	2014-06-30 22:11:26
1284	40	628	NO COMMENT	\N	2014-07-01 21:16:33	2014-07-01 21:16:33
1285	24	628	NO COMMENT	\N	2014-07-02 09:55:50	2014-07-02 09:55:50
1286	7	629	NO COMMENT	\N	2014-06-27 11:52:39	2014-06-27 11:52:39
1287	16	630	NO COMMENT	\N	2014-04-30 09:32:00	2014-04-30 09:32:00
1288	1	631	NO COMMENT	\N	2014-06-04 10:43:37	2014-06-04 10:43:37
1289	7	631	NO COMMENT	\N	2014-06-19 21:16:01	2014-06-19 21:16:01
1290	1	632	NO COMMENT	\N	2014-05-10 01:49:09	2014-05-10 01:49:09
1291	7	632	NO COMMENT	\N	2014-06-27 09:09:58	2014-06-27 09:09:58
1292	9	665	NO COMMENT	\N	2014-05-02 15:32:01	2014-05-02 15:32:01
1293	7	665	NO COMMENT	\N	2014-06-21 16:57:49	2014-06-21 16:57:49
1294	1	665	NO COMMENT	\N	2014-06-24 09:00:30	2014-06-24 09:00:30
1295	7	634	NO COMMENT	\N	2014-06-28 16:31:39	2014-06-28 16:31:39
1296	1	634	NO COMMENT	\N	2014-06-29 17:25:06	2014-06-29 17:25:06
1297	7	635	NO COMMENT	\N	2014-06-20 04:10:50	2014-06-20 04:10:50
1298	1	635	NO COMMENT	\N	2014-06-25 06:46:08	2014-06-25 06:46:08
1299	7	636	NO COMMENT	\N	2014-06-14 05:48:01	2014-06-14 05:48:01
1300	1	636	NO COMMENT	\N	2014-06-25 03:24:10	2014-06-25 03:24:10
1301	27	637	NO COMMENT	\N	2014-05-31 10:58:01	2014-05-31 10:58:01
1302	7	637	NO COMMENT	\N	2014-06-10 17:53:56	2014-06-10 17:53:56
1303	1	637	NO COMMENT	\N	2014-06-13 00:03:18	2014-06-13 00:03:18
1304	48	638	NO COMMENT	\N	2014-05-28 03:49:54	2014-05-28 03:49:54
1305	1	638	NO COMMENT	\N	2014-06-13 10:12:01	2014-06-13 10:12:01
1306	7	638	NO COMMENT	\N	2014-06-14 20:09:13	2014-06-14 20:09:13
1307	27	638	NO COMMENT	\N	2014-06-19 09:00:46	2014-06-19 09:00:46
1308	48	639	NO COMMENT	\N	2014-04-19 08:19:27	2014-04-19 08:19:27
1309	1	639	NO COMMENT	\N	2014-04-26 02:53:00	2014-04-26 02:53:00
1310	7	639	NO COMMENT	\N	2014-04-26 13:53:59	2014-04-26 13:53:59
1311	27	639	NO COMMENT	\N	2014-05-12 16:12:24	2014-05-12 16:12:24
1312	27	640	NO COMMENT	\N	2014-05-13 14:08:30	2014-05-13 14:08:30
1313	7	640	NO COMMENT	\N	2014-05-20 07:28:21	2014-05-20 07:28:21
1314	1	640	NO COMMENT	\N	2014-06-25 03:37:01	2014-06-25 03:37:01
1315	48	640	NO COMMENT	\N	2014-07-02 14:36:57	2014-07-02 14:36:57
1316	1	641	NO COMMENT	\N	2014-06-22 16:54:16	2014-06-22 16:54:16
1317	48	642	NO COMMENT	\N	2014-06-05 11:33:25	2014-06-05 11:33:25
1318	1	642	NO COMMENT	\N	2014-06-06 21:02:04	2014-06-06 21:02:04
1319	7	642	NO COMMENT	\N	2014-06-12 17:56:20	2014-06-12 17:56:20
1320	27	642	NO COMMENT	\N	2014-06-15 13:33:31	2014-06-15 13:33:31
1321	29	642	NO COMMENT	\N	2014-06-18 00:48:32	2014-06-18 00:48:32
1322	1	643	NO COMMENT	\N	2014-05-08 11:07:25	2014-05-08 11:07:25
1323	7	643	NO COMMENT	\N	2014-05-10 22:27:31	2014-05-10 22:27:31
1324	7	644	NO COMMENT	\N	2014-06-13 20:47:19	2014-06-13 20:47:19
1325	1	644	NO COMMENT	\N	2014-06-22 07:08:45	2014-06-22 07:08:45
1326	7	645	NO COMMENT	\N	2014-06-09 23:13:26	2014-06-09 23:13:26
1327	1	645	NO COMMENT	\N	2014-06-24 13:17:15	2014-06-24 13:17:15
1328	7	646	NO COMMENT	\N	2014-06-23 22:59:25	2014-06-23 22:59:25
1329	4	646	NO COMMENT	\N	2014-06-24 18:24:37	2014-06-24 18:24:37
1330	1	646	NO COMMENT	\N	2014-06-27 03:32:36	2014-06-27 03:32:36
1331	1	647	NO COMMENT	\N	2014-06-21 11:55:22	2014-06-21 11:55:22
1332	4	647	NO COMMENT	\N	2014-06-24 02:16:53	2014-06-24 02:16:53
1333	7	647	NO COMMENT	\N	2014-06-24 12:38:22	2014-06-24 12:38:22
1334	1	648	NO COMMENT	\N	2014-04-03 07:00:55	2014-04-03 07:00:55
1335	7	648	NO COMMENT	\N	2014-04-11 23:59:58	2014-04-11 23:59:58
1336	20	649	NO COMMENT	\N	2014-04-12 23:27:13	2014-04-12 23:27:13
1337	1	649	NO COMMENT	\N	2014-05-13 05:57:54	2014-05-13 05:57:54
1338	7	649	NO COMMENT	\N	2014-06-14 06:26:20	2014-06-14 06:26:20
1339	20	650	NO COMMENT	\N	2014-05-28 00:23:21	2014-05-28 00:23:21
1340	7	650	NO COMMENT	\N	2014-06-04 09:13:27	2014-06-04 09:13:27
1341	44	650	NO COMMENT	\N	2014-06-09 12:36:41	2014-06-09 12:36:41
1342	1	650	NO COMMENT	\N	2014-06-24 10:13:32	2014-06-24 10:13:32
1343	1	651	NO COMMENT	\N	2014-06-13 18:57:35	2014-06-13 18:57:35
1344	34	651	NO COMMENT	\N	2014-06-17 07:27:43	2014-06-17 07:27:43
1345	7	651	NO COMMENT	\N	2014-06-27 18:22:05	2014-06-27 18:22:05
1346	7	652	NO COMMENT	\N	2014-05-06 19:56:03	2014-05-06 19:56:03
1347	1	652	NO COMMENT	\N	2014-05-08 13:03:34	2014-05-08 13:03:34
1348	26	655	NO COMMENT	\N	2014-05-28 06:12:44	2014-05-28 06:12:44
1349	1	655	NO COMMENT	\N	2014-06-11 19:54:29	2014-06-11 19:54:29
1350	7	655	NO COMMENT	\N	2014-06-25 19:02:08	2014-06-25 19:02:08
1351	8	655	NO COMMENT	\N	2014-06-26 20:47:30	2014-06-26 20:47:30
1352	27	655	NO COMMENT	\N	2014-07-01 03:05:58	2014-07-01 03:05:58
1353	23	658	NO COMMENT	\N	2014-05-16 03:32:53	2014-05-16 03:32:53
1354	1	658	NO COMMENT	\N	2014-05-17 22:51:23	2014-05-17 22:51:23
1355	7	658	NO COMMENT	\N	2014-06-04 10:51:24	2014-06-04 10:51:24
1356	44	659	NO COMMENT	\N	2014-05-29 13:21:38	2014-05-29 13:21:38
1357	1	659	NO COMMENT	\N	2014-06-01 07:28:07	2014-06-01 07:28:07
1358	7	660	NO COMMENT	\N	2014-05-13 13:12:26	2014-05-13 13:12:26
1359	1	660	NO COMMENT	\N	2014-06-16 23:50:48	2014-06-16 23:50:48
1360	7	661	NO COMMENT	\N	2014-05-07 20:24:33	2014-05-07 20:24:33
1361	1	661	NO COMMENT	\N	2014-06-25 07:35:34	2014-06-25 07:35:34
1362	1	662	NO COMMENT	\N	2014-06-21 19:45:11	2014-06-21 19:45:11
1363	7	662	NO COMMENT	\N	2014-06-22 07:10:19	2014-06-22 07:10:19
1364	1	663	NO COMMENT	\N	2014-06-11 03:11:09	2014-06-11 03:11:09
1365	7	663	NO COMMENT	\N	2014-06-27 15:58:36	2014-06-27 15:58:36
1366	7	664	NO COMMENT	\N	2014-05-04 13:14:30	2014-05-04 13:14:30
1367	6	664	NO COMMENT	\N	2014-05-22 18:08:02	2014-05-22 18:08:02
1368	1	664	NO COMMENT	\N	2014-06-22 12:02:22	2014-06-22 12:02:22
1369	7	667	NO COMMENT	\N	2014-06-22 08:11:09	2014-06-22 08:11:09
1370	45	670	NO COMMENT	\N	2014-06-19 12:23:41	2014-06-19 12:23:41
1371	37	671	NO COMMENT	\N	2014-05-30 15:13:33	2014-05-30 15:13:33
1372	16	671	NO COMMENT	\N	2014-06-09 12:16:36	2014-06-09 12:16:36
1373	45	671	NO COMMENT	\N	2014-06-15 14:24:30	2014-06-15 14:24:30
1374	7	672	NO COMMENT	\N	2014-04-13 19:28:50	2014-04-13 19:28:50
1375	7	673	NO COMMENT	\N	2014-05-27 08:30:23	2014-05-27 08:30:23
1376	7	674	NO COMMENT	\N	2014-06-19 02:05:36	2014-06-19 02:05:36
1377	7	675	NO COMMENT	\N	2014-05-21 05:02:35	2014-05-21 05:02:35
1378	7	705	NO COMMENT	\N	2014-03-08 18:02:51	2014-03-08 18:02:51
1379	7	677	NO COMMENT	\N	2014-02-24 06:22:24	2014-02-24 06:22:24
1380	7	678	NO COMMENT	\N	2014-03-26 21:39:55	2014-03-26 21:39:55
1381	7	679	NO COMMENT	\N	2014-03-20 10:32:10	2014-03-20 10:32:10
1382	7	680	NO COMMENT	\N	2014-04-10 21:10:52	2014-04-10 21:10:52
1383	7	681	NO COMMENT	\N	2014-03-13 20:51:04	2014-03-13 20:51:04
1384	7	682	NO COMMENT	\N	2014-06-02 06:20:57	2014-06-02 06:20:57
1385	45	683	NO COMMENT	\N	2014-05-26 01:01:35	2014-05-26 01:01:35
1386	7	684	NO COMMENT	\N	2014-04-07 00:20:30	2014-04-07 00:20:30
1387	7	685	NO COMMENT	\N	2014-05-02 08:17:04	2014-05-02 08:17:04
1388	17	686	NO COMMENT	\N	2014-06-22 02:52:36	2014-06-22 02:52:36
1389	7	686	NO COMMENT	\N	2014-07-01 06:56:17	2014-07-01 06:56:17
1390	7	687	NO COMMENT	\N	2014-06-09 07:08:42	2014-06-09 07:08:42
1391	7	690	NO COMMENT	\N	2014-05-05 10:48:09	2014-05-05 10:48:09
1392	7	706	NO COMMENT	\N	2014-04-10 17:03:08	2014-04-10 17:03:08
1393	7	691	NO COMMENT	\N	2014-07-01 00:26:07	2014-07-01 00:26:07
1394	7	692	NO COMMENT	\N	2014-03-20 02:12:28	2014-03-20 02:12:28
1395	7	693	NO COMMENT	\N	2014-04-04 19:33:08	2014-04-04 19:33:08
1396	16	693	NO COMMENT	\N	2014-06-19 12:24:04	2014-06-19 12:24:04
1397	37	696	NO COMMENT	\N	2014-05-14 23:07:58	2014-05-14 23:07:58
1398	7	696	NO COMMENT	\N	2014-06-09 22:42:39	2014-06-09 22:42:39
1399	16	696	NO COMMENT	\N	2014-06-23 12:11:41	2014-06-23 12:11:41
1400	44	697	NO COMMENT	\N	2014-06-02 23:27:04	2014-06-02 23:27:04
1401	29	697	NO COMMENT	\N	2014-06-04 21:04:40	2014-06-04 21:04:40
1402	8	697	NO COMMENT	\N	2014-06-08 09:34:03	2014-06-08 09:34:03
1403	7	697	NO COMMENT	\N	2014-06-30 17:56:40	2014-06-30 17:56:40
1404	7	698	NO COMMENT	\N	2014-05-20 18:07:55	2014-05-20 18:07:55
1405	7	700	NO COMMENT	\N	2014-04-30 21:12:30	2014-04-30 21:12:30
1406	7	701	NO COMMENT	\N	2014-06-13 00:22:19	2014-06-13 00:22:19
1407	7	702	NO COMMENT	\N	2014-05-07 15:42:47	2014-05-07 15:42:47
1408	7	703	NO COMMENT	\N	2014-05-02 15:08:50	2014-05-02 15:08:50
1409	7	704	NO COMMENT	\N	2014-05-06 17:19:04	2014-05-06 17:19:04
1410	7	711	NO COMMENT	\N	2014-05-05 00:18:49	2014-05-05 00:18:49
1411	7	712	NO COMMENT	\N	2014-05-29 03:59:42	2014-05-29 03:59:42
1412	7	713	NO COMMENT	\N	2014-06-20 19:00:18	2014-06-20 19:00:18
1413	7	714	NO COMMENT	\N	2014-05-07 14:13:28	2014-05-07 14:13:28
1414	19	715	NO COMMENT	\N	2014-04-22 18:37:08	2014-04-22 18:37:08
1415	7	718	NO COMMENT	\N	2014-05-15 22:33:44	2014-05-15 22:33:44
1416	1	719	NO COMMENT	\N	2014-05-29 19:53:45	2014-05-29 19:53:45
1417	7	719	NO COMMENT	\N	2014-06-07 02:03:08	2014-06-07 02:03:08
1418	7	1346	NO COMMENT	\N	2014-06-30 06:26:55	2014-06-30 06:26:55
1419	7	720	NO COMMENT	\N	2014-06-05 14:40:14	2014-06-05 14:40:14
1420	1	720	NO COMMENT	\N	2014-06-30 00:25:27	2014-06-30 00:25:27
1421	1	721	NO COMMENT	\N	2014-06-23 17:50:59	2014-06-23 17:50:59
1422	7	721	NO COMMENT	\N	2014-06-25 20:08:04	2014-06-25 20:08:04
1423	45	722	NO COMMENT	\N	2014-06-01 02:12:08	2014-06-01 02:12:08
1424	7	723	NO COMMENT	\N	2014-05-27 06:47:17	2014-05-27 06:47:17
1425	42	723	NO COMMENT	\N	2014-05-31 00:48:27	2014-05-31 00:48:27
1426	1	723	NO COMMENT	\N	2014-06-09 03:15:08	2014-06-09 03:15:08
1427	48	723	NO COMMENT	\N	2014-06-23 20:03:04	2014-06-23 20:03:04
1428	23	723	NO COMMENT	\N	2014-07-01 12:25:51	2014-07-01 12:25:51
1429	7	724	NO COMMENT	\N	2014-06-22 02:31:46	2014-06-22 02:31:46
1430	1	736	NO COMMENT	\N	2014-06-29 07:04:24	2014-06-29 07:04:24
1431	11	736	NO COMMENT	\N	2014-06-30 07:54:17	2014-06-30 07:54:17
1432	29	736	NO COMMENT	\N	2014-06-30 23:01:08	2014-06-30 23:01:08
1433	27	736	NO COMMENT	\N	2014-07-01 02:36:46	2014-07-01 02:36:46
1434	48	726	NO COMMENT	\N	2014-06-08 05:20:41	2014-06-08 05:20:41
1435	42	726	NO COMMENT	\N	2014-06-12 08:58:48	2014-06-12 08:58:48
1436	23	726	NO COMMENT	\N	2014-06-17 15:46:35	2014-06-17 15:46:35
1437	1	726	NO COMMENT	\N	2014-06-24 07:52:10	2014-06-24 07:52:10
1438	7	726	NO COMMENT	\N	2014-06-29 12:41:22	2014-06-29 12:41:22
1439	23	727	NO COMMENT	\N	2014-06-11 16:17:07	2014-06-11 16:17:07
1440	42	727	NO COMMENT	\N	2014-06-18 15:50:05	2014-06-18 15:50:05
1441	48	727	NO COMMENT	\N	2014-06-22 23:32:48	2014-06-22 23:32:48
1442	42	728	NO COMMENT	\N	2014-06-29 03:47:33	2014-06-29 03:47:33
1443	48	728	NO COMMENT	\N	2014-06-29 14:50:23	2014-06-29 14:50:23
1444	20	728	NO COMMENT	\N	2014-06-29 19:30:44	2014-06-29 19:30:44
1445	1	728	NO COMMENT	\N	2014-07-01 07:37:08	2014-07-01 07:37:08
1446	23	728	NO COMMENT	\N	2014-07-02 15:04:23	2014-07-02 15:04:23
1447	1	729	NO COMMENT	\N	2014-06-04 13:51:49	2014-06-04 13:51:49
1448	23	729	NO COMMENT	\N	2014-06-17 07:20:33	2014-06-17 07:20:33
1449	31	729	NO COMMENT	\N	2014-06-30 16:05:25	2014-06-30 16:05:25
1450	7	729	NO COMMENT	\N	2014-07-01 12:56:38	2014-07-01 12:56:38
1451	7	731	NO COMMENT	\N	2014-06-12 22:48:14	2014-06-12 22:48:14
1452	1	731	NO COMMENT	\N	2014-06-25 20:43:43	2014-06-25 20:43:43
1453	29	732	NO COMMENT	\N	2014-05-30 20:59:11	2014-05-30 20:59:11
1454	7	732	NO COMMENT	\N	2014-06-10 00:56:55	2014-06-10 00:56:55
1455	48	733	NO COMMENT	\N	2014-06-01 21:39:32	2014-06-01 21:39:32
1456	40	733	NO COMMENT	\N	2014-06-03 20:28:42	2014-06-03 20:28:42
1457	7	733	NO COMMENT	\N	2014-06-25 02:42:04	2014-06-25 02:42:04
1458	1	733	NO COMMENT	\N	2014-06-25 05:52:13	2014-06-25 05:52:13
1459	29	734	NO COMMENT	\N	2014-06-23 08:09:25	2014-06-23 08:09:25
1460	7	734	NO COMMENT	\N	2014-06-23 23:11:41	2014-06-23 23:11:41
1461	11	734	NO COMMENT	\N	2014-06-28 15:32:19	2014-06-28 15:32:19
1462	1	734	NO COMMENT	\N	2014-06-30 21:15:07	2014-06-30 21:15:07
1463	29	735	NO COMMENT	\N	2014-06-28 12:08:37	2014-06-28 12:08:37
1464	1	737	NO COMMENT	\N	2014-06-02 12:22:50	2014-06-02 12:22:50
1465	48	737	NO COMMENT	\N	2014-06-23 02:53:48	2014-06-23 02:53:48
1466	7	737	NO COMMENT	\N	2014-06-29 03:52:02	2014-06-29 03:52:02
1467	14	740	NO COMMENT	\N	2014-06-07 14:31:38	2014-06-07 14:31:38
1468	19	740	NO COMMENT	\N	2014-06-16 00:01:11	2014-06-16 00:01:11
1469	19	741	NO COMMENT	\N	2014-05-28 17:36:46	2014-05-28 17:36:46
1470	7	741	NO COMMENT	\N	2014-06-13 08:54:28	2014-06-13 08:54:28
1471	43	741	NO COMMENT	\N	2014-06-19 09:48:43	2014-06-19 09:48:43
1472	1	741	NO COMMENT	\N	2014-06-19 11:21:59	2014-06-19 11:21:59
1473	14	741	NO COMMENT	\N	2014-06-25 03:24:41	2014-06-25 03:24:41
1474	26	741	NO COMMENT	\N	2014-06-28 23:50:15	2014-06-28 23:50:15
1475	17	742	NO COMMENT	\N	2014-06-07 13:34:06	2014-06-07 13:34:06
1476	7	742	NO COMMENT	\N	2014-06-25 20:56:54	2014-06-25 20:56:54
1477	28	744	NO COMMENT	\N	2014-05-21 06:05:12	2014-05-21 06:05:12
1478	29	744	NO COMMENT	\N	2014-06-14 10:06:48	2014-06-14 10:06:48
1479	19	744	NO COMMENT	\N	2014-06-20 10:06:20	2014-06-20 10:06:20
1480	7	745	NO COMMENT	\N	2014-06-29 02:22:59	2014-06-29 02:22:59
1481	20	745	NO COMMENT	\N	2014-06-29 07:40:58	2014-06-29 07:40:58
1482	1	747	NO COMMENT	\N	2014-06-21 07:29:10	2014-06-21 07:29:10
1483	7	747	NO COMMENT	\N	2014-06-30 15:34:05	2014-06-30 15:34:05
1484	2	769	NO COMMENT	\N	2014-06-19 20:32:44	2014-06-19 20:32:44
1485	7	769	NO COMMENT	\N	2014-06-26 20:59:21	2014-06-26 20:59:21
1486	36	748	NO COMMENT	\N	2014-06-20 15:10:25	2014-06-20 15:10:25
1487	48	748	NO COMMENT	\N	2014-06-27 16:51:08	2014-06-27 16:51:08
1488	7	748	NO COMMENT	\N	2014-06-30 03:26:24	2014-06-30 03:26:24
1489	1	748	NO COMMENT	\N	2014-07-01 19:09:19	2014-07-01 19:09:19
1490	1	749	NO COMMENT	\N	2014-06-20 04:31:08	2014-06-20 04:31:08
1491	7	749	NO COMMENT	\N	2014-06-23 17:06:52	2014-06-23 17:06:52
1492	7	750	NO COMMENT	\N	2014-05-22 07:24:58	2014-05-22 07:24:58
1493	1	750	NO COMMENT	\N	2014-06-20 10:58:43	2014-06-20 10:58:43
1494	7	751	NO COMMENT	\N	2014-06-09 12:48:24	2014-06-09 12:48:24
1495	1	751	NO COMMENT	\N	2014-06-10 23:57:51	2014-06-10 23:57:51
1496	6	751	NO COMMENT	\N	2014-06-26 06:00:26	2014-06-26 06:00:26
1497	25	751	NO COMMENT	\N	2014-06-26 19:31:18	2014-06-26 19:31:18
1498	4	751	NO COMMENT	\N	2014-06-29 18:54:45	2014-06-29 18:54:45
1499	25	753	NO COMMENT	\N	2014-06-08 07:46:29	2014-06-08 07:46:29
1500	4	753	NO COMMENT	\N	2014-06-10 14:32:58	2014-06-10 14:32:58
1501	6	753	NO COMMENT	\N	2014-06-16 22:31:13	2014-06-16 22:31:13
1502	22	753	NO COMMENT	\N	2014-06-25 01:59:57	2014-06-25 01:59:57
1503	1	753	NO COMMENT	\N	2014-06-27 09:43:30	2014-06-27 09:43:30
1504	25	754	NO COMMENT	\N	2014-07-01 13:14:12	2014-07-01 13:14:12
1505	22	754	NO COMMENT	\N	2014-07-02 18:55:11	2014-07-02 18:55:11
1506	1	755	NO COMMENT	\N	2014-05-27 13:39:17	2014-05-27 13:39:17
1507	7	755	NO COMMENT	\N	2014-05-30 10:32:19	2014-05-30 10:32:19
1508	1	756	NO COMMENT	\N	2014-06-21 15:25:55	2014-06-21 15:25:55
1509	7	756	NO COMMENT	\N	2014-06-25 19:15:05	2014-06-25 19:15:05
1510	7	757	NO COMMENT	\N	2014-05-12 08:24:24	2014-05-12 08:24:24
1511	2	758	NO COMMENT	\N	2014-04-12 01:20:26	2014-04-12 01:20:26
1512	7	758	NO COMMENT	\N	2014-04-26 08:33:18	2014-04-26 08:33:18
1513	1	758	NO COMMENT	\N	2014-06-19 05:05:15	2014-06-19 05:05:15
1514	2	759	NO COMMENT	\N	2014-05-13 14:10:10	2014-05-13 14:10:10
1515	1	759	NO COMMENT	\N	2014-05-19 12:50:42	2014-05-19 12:50:42
1516	7	759	NO COMMENT	\N	2014-06-19 03:31:39	2014-06-19 03:31:39
1517	7	770	NO COMMENT	\N	2014-04-22 06:49:07	2014-04-22 06:49:07
1518	2	770	NO COMMENT	\N	2014-04-28 21:28:46	2014-04-28 21:28:46
1519	1	770	NO COMMENT	\N	2014-06-10 17:05:49	2014-06-10 17:05:49
1520	7	771	NO COMMENT	\N	2014-04-16 23:21:06	2014-04-16 23:21:06
1521	2	771	NO COMMENT	\N	2014-05-05 22:37:43	2014-05-05 22:37:43
1522	1	771	NO COMMENT	\N	2014-05-24 02:15:04	2014-05-24 02:15:04
1523	2	760	NO COMMENT	\N	2014-04-27 02:39:07	2014-04-27 02:39:07
1524	1	761	NO COMMENT	\N	2014-05-26 17:59:49	2014-05-26 17:59:49
1525	7	761	NO COMMENT	\N	2014-06-01 02:09:28	2014-06-01 02:09:28
1526	16	761	NO COMMENT	\N	2014-06-25 00:13:04	2014-06-25 00:13:04
1527	2	761	NO COMMENT	\N	2014-06-28 02:10:21	2014-06-28 02:10:21
1528	1	762	NO COMMENT	\N	2014-06-24 20:23:40	2014-06-24 20:23:40
1529	2	763	NO COMMENT	\N	2014-06-07 15:48:41	2014-06-07 15:48:41
1530	1	763	NO COMMENT	\N	2014-06-09 04:33:14	2014-06-09 04:33:14
1531	7	763	NO COMMENT	\N	2014-06-10 05:21:53	2014-06-10 05:21:53
1532	27	763	NO COMMENT	\N	2014-06-25 05:48:22	2014-06-25 05:48:22
1533	27	765	NO COMMENT	\N	2014-06-16 09:24:15	2014-06-16 09:24:15
1534	2	765	NO COMMENT	\N	2014-06-17 23:44:20	2014-06-17 23:44:20
1535	7	765	NO COMMENT	\N	2014-06-21 18:10:25	2014-06-21 18:10:25
1536	45	765	NO COMMENT	\N	2014-06-24 05:36:48	2014-06-24 05:36:48
1537	1	765	NO COMMENT	\N	2014-06-26 02:09:55	2014-06-26 02:09:55
1538	2	766	NO COMMENT	\N	2014-03-29 01:28:50	2014-03-29 01:28:50
1539	1	766	NO COMMENT	\N	2014-04-18 12:01:46	2014-04-18 12:01:46
1540	7	766	NO COMMENT	\N	2014-06-28 22:24:15	2014-06-28 22:24:15
1541	7	767	NO COMMENT	\N	2014-05-14 10:32:00	2014-05-14 10:32:00
1542	2	767	NO COMMENT	\N	2014-05-14 13:48:14	2014-05-14 13:48:14
1543	1	767	NO COMMENT	\N	2014-06-28 23:13:52	2014-06-28 23:13:52
1544	2	768	NO COMMENT	\N	2014-04-02 22:28:53	2014-04-02 22:28:53
1545	1	768	NO COMMENT	\N	2014-05-03 05:14:52	2014-05-03 05:14:52
1546	7	768	NO COMMENT	\N	2014-06-11 20:27:22	2014-06-11 20:27:22
1547	1	773	NO COMMENT	\N	2014-03-26 03:46:08	2014-03-26 03:46:08
1548	6	773	NO COMMENT	\N	2014-04-01 14:18:40	2014-04-01 14:18:40
1549	7	773	NO COMMENT	\N	2014-05-02 14:21:44	2014-05-02 14:21:44
1550	2	773	NO COMMENT	\N	2014-06-01 17:43:07	2014-06-01 17:43:07
1551	6	774	NO COMMENT	\N	2014-05-27 20:26:40	2014-05-27 20:26:40
1552	1	775	NO COMMENT	\N	2014-04-12 11:21:41	2014-04-12 11:21:41
1553	2	775	NO COMMENT	\N	2014-05-05 21:13:18	2014-05-05 21:13:18
1554	7	775	NO COMMENT	\N	2014-06-13 10:34:48	2014-06-13 10:34:48
1555	7	777	NO COMMENT	\N	2014-05-09 08:19:04	2014-05-09 08:19:04
1556	1	777	NO COMMENT	\N	2014-05-11 07:59:36	2014-05-11 07:59:36
1557	2	777	NO COMMENT	\N	2014-05-28 13:55:26	2014-05-28 13:55:26
1558	2	778	NO COMMENT	\N	2014-03-15 13:00:42	2014-03-15 13:00:42
1559	1	778	NO COMMENT	\N	2014-06-01 22:19:45	2014-06-01 22:19:45
1560	7	778	NO COMMENT	\N	2014-06-28 01:55:31	2014-06-28 01:55:31
1561	2	779	NO COMMENT	\N	2014-03-26 07:20:27	2014-03-26 07:20:27
1562	7	779	NO COMMENT	\N	2014-04-30 05:44:41	2014-04-30 05:44:41
1563	1	779	NO COMMENT	\N	2014-05-16 00:31:35	2014-05-16 00:31:35
1564	1	780	NO COMMENT	\N	2014-05-01 10:06:22	2014-05-01 10:06:22
1565	7	780	NO COMMENT	\N	2014-05-24 19:13:56	2014-05-24 19:13:56
1566	2	780	NO COMMENT	\N	2014-05-25 18:47:18	2014-05-25 18:47:18
1567	2	781	NO COMMENT	\N	2014-04-27 03:17:05	2014-04-27 03:17:05
1568	6	781	NO COMMENT	\N	2014-05-08 09:18:38	2014-05-08 09:18:38
1569	1	782	NO COMMENT	\N	2014-05-17 19:14:39	2014-05-17 19:14:39
1570	7	782	NO COMMENT	\N	2014-06-04 22:29:51	2014-06-04 22:29:51
1571	2	782	NO COMMENT	\N	2014-06-06 12:30:27	2014-06-06 12:30:27
1572	7	783	NO COMMENT	\N	2014-06-21 09:56:40	2014-06-21 09:56:40
1573	1	784	NO COMMENT	\N	2014-06-05 12:39:43	2014-06-05 12:39:43
1574	2	784	NO COMMENT	\N	2014-06-18 07:31:16	2014-06-18 07:31:16
1575	7	784	NO COMMENT	\N	2014-06-24 17:44:34	2014-06-24 17:44:34
1576	2	785	NO COMMENT	\N	2014-04-26 17:21:33	2014-04-26 17:21:33
1577	23	785	NO COMMENT	\N	2014-04-27 10:18:00	2014-04-27 10:18:00
1578	7	785	NO COMMENT	\N	2014-05-11 07:34:57	2014-05-11 07:34:57
1579	1	785	NO COMMENT	\N	2014-06-13 18:05:31	2014-06-13 18:05:31
1580	2	786	NO COMMENT	\N	2014-06-03 11:23:13	2014-06-03 11:23:13
1581	1	786	NO COMMENT	\N	2014-06-06 23:32:02	2014-06-06 23:32:02
1582	7	786	NO COMMENT	\N	2014-06-20 06:23:46	2014-06-20 06:23:46
1583	7	787	NO COMMENT	\N	2014-04-08 18:10:57	2014-04-08 18:10:57
1584	2	787	NO COMMENT	\N	2014-04-30 09:55:21	2014-04-30 09:55:21
1585	1	787	NO COMMENT	\N	2014-05-06 18:41:34	2014-05-06 18:41:34
1586	2	788	NO COMMENT	\N	2014-04-17 10:26:17	2014-04-17 10:26:17
1587	1	788	NO COMMENT	\N	2014-04-25 21:30:44	2014-04-25 21:30:44
1588	7	788	NO COMMENT	\N	2014-06-17 05:20:49	2014-06-17 05:20:49
1589	1	791	NO COMMENT	\N	2014-05-28 20:38:53	2014-05-28 20:38:53
1590	2	791	NO COMMENT	\N	2014-06-13 10:13:51	2014-06-13 10:13:51
1591	7	791	NO COMMENT	\N	2014-06-23 22:31:55	2014-06-23 22:31:55
1592	7	792	NO COMMENT	\N	2014-06-25 13:51:25	2014-06-25 13:51:25
1593	3	792	NO COMMENT	\N	2014-06-25 21:11:17	2014-06-25 21:11:17
1594	1	792	NO COMMENT	\N	2014-06-26 00:37:29	2014-06-26 00:37:29
1595	2	792	NO COMMENT	\N	2014-06-26 02:59:31	2014-06-26 02:59:31
1596	1	794	NO COMMENT	\N	2014-06-10 07:37:49	2014-06-10 07:37:49
1597	2	794	NO COMMENT	\N	2014-06-22 11:46:43	2014-06-22 11:46:43
1598	7	794	NO COMMENT	\N	2014-06-26 19:50:43	2014-06-26 19:50:43
1599	48	797	NO COMMENT	\N	2014-06-13 01:09:00	2014-06-13 01:09:00
1600	43	797	NO COMMENT	\N	2014-06-24 20:45:37	2014-06-24 20:45:37
1601	7	797	NO COMMENT	\N	2014-06-28 04:57:20	2014-06-28 04:57:20
1602	41	797	NO COMMENT	\N	2014-06-30 15:40:55	2014-06-30 15:40:55
1603	1	797	NO COMMENT	\N	2014-07-01 10:08:29	2014-07-01 10:08:29
1604	43	798	NO COMMENT	\N	2014-06-18 06:33:01	2014-06-18 06:33:01
1605	48	798	NO COMMENT	\N	2014-06-20 11:05:43	2014-06-20 11:05:43
1606	20	798	NO COMMENT	\N	2014-06-22 05:54:02	2014-06-22 05:54:02
1607	2	798	NO COMMENT	\N	2014-06-23 18:33:35	2014-06-23 18:33:35
1608	30	798	NO COMMENT	\N	2014-06-24 18:29:37	2014-06-24 18:29:37
1609	30	799	NO COMMENT	\N	2014-06-25 22:57:10	2014-06-25 22:57:10
1610	40	799	NO COMMENT	\N	2014-06-28 12:33:00	2014-06-28 12:33:00
1611	43	799	NO COMMENT	\N	2014-07-01 16:17:09	2014-07-01 16:17:09
1612	41	799	NO COMMENT	\N	2014-07-01 16:35:29	2014-07-01 16:35:29
1613	10	799	NO COMMENT	\N	2014-07-02 06:35:13	2014-07-02 06:35:13
1614	2	800	NO COMMENT	\N	2014-06-20 09:33:43	2014-06-20 09:33:43
1615	29	800	NO COMMENT	\N	2014-06-22 18:51:37	2014-06-22 18:51:37
1616	19	800	NO COMMENT	\N	2014-06-23 08:23:36	2014-06-23 08:23:36
1617	26	800	NO COMMENT	\N	2014-07-01 10:33:03	2014-07-01 10:33:03
1618	7	801	NO COMMENT	\N	2014-07-02 08:24:12	2014-07-02 08:24:12
1619	2	802	NO COMMENT	\N	2014-06-24 10:20:39	2014-06-24 10:20:39
1620	11	802	NO COMMENT	\N	2014-06-24 17:13:20	2014-06-24 17:13:20
1621	8	802	NO COMMENT	\N	2014-06-25 08:21:39	2014-06-25 08:21:39
1622	26	802	NO COMMENT	\N	2014-06-26 18:31:14	2014-06-26 18:31:14
1623	25	802	NO COMMENT	\N	2014-06-27 04:52:39	2014-06-27 04:52:39
1624	21	802	NO COMMENT	\N	2014-06-27 10:33:28	2014-06-27 10:33:28
1625	37	802	NO COMMENT	\N	2014-06-29 17:28:49	2014-06-29 17:28:49
1626	29	802	NO COMMENT	\N	2014-06-30 05:57:15	2014-06-30 05:57:15
1627	45	802	NO COMMENT	\N	2014-07-02 01:22:39	2014-07-02 01:22:39
1628	27	802	NO COMMENT	\N	2014-07-02 07:29:32	2014-07-02 07:29:32
1629	41	802	NO COMMENT	\N	2014-07-02 10:04:06	2014-07-02 10:04:06
1630	1	802	NO COMMENT	\N	2014-07-02 20:32:05	2014-07-02 20:32:05
1631	1	805	NO COMMENT	\N	2014-06-23 11:50:41	2014-06-23 11:50:41
1632	2	805	NO COMMENT	\N	2014-06-24 01:55:44	2014-06-24 01:55:44
1633	27	805	NO COMMENT	\N	2014-06-27 09:47:39	2014-06-27 09:47:39
1634	45	805	NO COMMENT	\N	2014-06-29 16:08:27	2014-06-29 16:08:27
1635	27	806	NO COMMENT	\N	2014-06-21 01:54:12	2014-06-21 01:54:12
1636	29	806	NO COMMENT	\N	2014-06-22 08:32:18	2014-06-22 08:32:18
1637	22	806	NO COMMENT	\N	2014-06-22 13:52:45	2014-06-22 13:52:45
1638	2	806	NO COMMENT	\N	2014-06-23 00:16:25	2014-06-23 00:16:25
1639	7	806	NO COMMENT	\N	2014-06-23 06:22:05	2014-06-23 06:22:05
1640	42	806	NO COMMENT	\N	2014-06-26 05:58:30	2014-06-26 05:58:30
1641	47	806	NO COMMENT	\N	2014-06-26 07:38:00	2014-06-26 07:38:00
1642	39	806	NO COMMENT	\N	2014-06-26 15:37:17	2014-06-26 15:37:17
1643	1	806	NO COMMENT	\N	2014-06-27 00:39:52	2014-06-27 00:39:52
1644	10	806	NO COMMENT	\N	2014-06-27 13:06:40	2014-06-27 13:06:40
1645	7	807	NO COMMENT	\N	2014-06-28 14:34:13	2014-06-28 14:34:13
1646	47	807	NO COMMENT	\N	2014-06-28 19:42:29	2014-06-28 19:42:29
1647	42	807	NO COMMENT	\N	2014-06-29 17:00:12	2014-06-29 17:00:12
1648	10	807	NO COMMENT	\N	2014-06-30 04:47:24	2014-06-30 04:47:24
1649	29	807	NO COMMENT	\N	2014-07-01 17:12:41	2014-07-01 17:12:41
1650	1	809	NO COMMENT	\N	2014-06-10 00:13:37	2014-06-10 00:13:37
1651	7	809	NO COMMENT	\N	2014-06-11 10:50:51	2014-06-11 10:50:51
1652	2	809	NO COMMENT	\N	2014-06-21 03:58:37	2014-06-21 03:58:37
1653	34	810	NO COMMENT	\N	2014-06-25 14:23:16	2014-06-25 14:23:16
1654	7	810	NO COMMENT	\N	2014-06-27 06:25:28	2014-06-27 06:25:28
1655	11	810	NO COMMENT	\N	2014-06-28 17:52:46	2014-06-28 17:52:46
1656	44	810	NO COMMENT	\N	2014-06-30 05:14:18	2014-06-30 05:14:18
1657	2	810	NO COMMENT	\N	2014-07-01 19:34:59	2014-07-01 19:34:59
1658	2	811	NO COMMENT	\N	2014-06-19 19:48:26	2014-06-19 19:48:26
1659	1	811	NO COMMENT	\N	2014-06-27 14:44:38	2014-06-27 14:44:38
1660	7	811	NO COMMENT	\N	2014-06-28 05:34:13	2014-06-28 05:34:13
1661	27	812	NO COMMENT	\N	2014-06-14 22:31:50	2014-06-14 22:31:50
1662	1	812	NO COMMENT	\N	2014-07-01 00:10:10	2014-07-01 00:10:10
1663	27	813	NO COMMENT	\N	2014-06-15 21:02:33	2014-06-15 21:02:33
1664	2	813	NO COMMENT	\N	2014-06-16 11:18:09	2014-06-16 11:18:09
1665	1	813	NO COMMENT	\N	2014-06-25 20:48:44	2014-06-25 20:48:44
1666	7	814	NO COMMENT	\N	2014-06-20 16:23:10	2014-06-20 16:23:10
1667	2	814	NO COMMENT	\N	2014-06-23 20:24:56	2014-06-23 20:24:56
1668	27	814	NO COMMENT	\N	2014-07-01 21:34:40	2014-07-01 21:34:40
1669	1	814	NO COMMENT	\N	2014-07-02 16:59:40	2014-07-02 16:59:40
1670	27	815	NO COMMENT	\N	2014-06-29 13:52:03	2014-06-29 13:52:03
1671	1	815	NO COMMENT	\N	2014-06-30 00:47:23	2014-06-30 00:47:23
1672	7	815	NO COMMENT	\N	2014-06-30 10:08:48	2014-06-30 10:08:48
1673	29	815	NO COMMENT	\N	2014-07-01 23:04:55	2014-07-01 23:04:55
1674	2	815	NO COMMENT	\N	2014-07-01 23:39:16	2014-07-01 23:39:16
1675	2	816	NO COMMENT	\N	2014-06-30 13:39:51	2014-06-30 13:39:51
1676	29	816	NO COMMENT	\N	2014-06-30 21:45:01	2014-06-30 21:45:01
1677	27	816	NO COMMENT	\N	2014-07-01 06:19:35	2014-07-01 06:19:35
1678	7	816	NO COMMENT	\N	2014-07-01 10:58:29	2014-07-01 10:58:29
1679	1	816	NO COMMENT	\N	2014-07-02 09:32:54	2014-07-02 09:32:54
1680	12	817	NO COMMENT	\N	2014-06-17 05:29:18	2014-06-17 05:29:18
1681	19	817	NO COMMENT	\N	2014-06-20 03:25:28	2014-06-20 03:25:28
1682	2	818	NO COMMENT	\N	2014-06-16 23:17:55	2014-06-16 23:17:55
1683	7	818	NO COMMENT	\N	2014-06-17 12:14:37	2014-06-17 12:14:37
1684	23	818	NO COMMENT	\N	2014-06-21 01:44:36	2014-06-21 01:44:36
1685	1	818	NO COMMENT	\N	2014-06-24 10:33:08	2014-06-24 10:33:08
1686	1	835	NO COMMENT	\N	2014-03-03 02:44:37	2014-03-03 02:44:37
1687	2	835	NO COMMENT	\N	2014-03-13 20:59:27	2014-03-13 20:59:27
1688	7	835	NO COMMENT	\N	2014-04-12 20:05:05	2014-04-12 20:05:05
1689	7	820	NO COMMENT	\N	2014-02-20 23:46:04	2014-02-20 23:46:04
1690	2	820	NO COMMENT	\N	2014-03-07 07:08:12	2014-03-07 07:08:12
1691	1	820	NO COMMENT	\N	2014-04-09 18:28:41	2014-04-09 18:28:41
1692	1	821	NO COMMENT	\N	2014-03-01 17:22:20	2014-03-01 17:22:20
1693	7	821	NO COMMENT	\N	2014-03-10 03:14:33	2014-03-10 03:14:33
1694	2	821	NO COMMENT	\N	2014-06-15 11:07:47	2014-06-15 11:07:47
1695	7	822	NO COMMENT	\N	2014-05-22 00:55:29	2014-05-22 00:55:29
1696	2	822	NO COMMENT	\N	2014-06-18 20:10:15	2014-06-18 20:10:15
1697	2	823	NO COMMENT	\N	2014-05-03 01:55:35	2014-05-03 01:55:35
1698	7	823	NO COMMENT	\N	2014-06-30 01:50:59	2014-06-30 01:50:59
1699	1	823	NO COMMENT	\N	2014-07-02 01:24:29	2014-07-02 01:24:29
1700	2	824	NO COMMENT	\N	2014-04-24 15:27:09	2014-04-24 15:27:09
1701	7	824	NO COMMENT	\N	2014-05-03 02:01:25	2014-05-03 02:01:25
1702	1	824	NO COMMENT	\N	2014-05-16 13:11:40	2014-05-16 13:11:40
1703	2	825	NO COMMENT	\N	2014-06-09 14:52:08	2014-06-09 14:52:08
1704	7	825	NO COMMENT	\N	2014-06-26 14:24:04	2014-06-26 14:24:04
1705	2	826	NO COMMENT	\N	2014-04-16 19:58:52	2014-04-16 19:58:52
1706	1	826	NO COMMENT	\N	2014-06-15 00:54:53	2014-06-15 00:54:53
1707	7	826	NO COMMENT	\N	2014-06-20 10:55:23	2014-06-20 10:55:23
1708	1	827	NO COMMENT	\N	2014-01-24 18:24:49	2014-01-24 18:24:49
1709	7	827	NO COMMENT	\N	2014-03-06 10:56:47	2014-03-06 10:56:47
1710	2	827	NO COMMENT	\N	2014-06-27 18:58:15	2014-06-27 18:58:15
1711	2	828	NO COMMENT	\N	2014-04-22 09:18:42	2014-04-22 09:18:42
1712	1	828	NO COMMENT	\N	2014-05-14 06:46:58	2014-05-14 06:46:58
1713	7	828	NO COMMENT	\N	2014-05-14 09:58:54	2014-05-14 09:58:54
1714	2	830	NO COMMENT	\N	2014-02-14 00:07:18	2014-02-14 00:07:18
1715	1	830	NO COMMENT	\N	2014-03-11 23:23:50	2014-03-11 23:23:50
1716	7	830	NO COMMENT	\N	2014-04-06 19:18:19	2014-04-06 19:18:19
1717	1	831	NO COMMENT	\N	2014-02-02 07:22:36	2014-02-02 07:22:36
1718	7	831	NO COMMENT	\N	2014-04-15 04:44:22	2014-04-15 04:44:22
1719	2	831	NO COMMENT	\N	2014-04-26 13:12:54	2014-04-26 13:12:54
1720	1	832	NO COMMENT	\N	2014-02-14 15:45:30	2014-02-14 15:45:30
1721	7	832	NO COMMENT	\N	2014-04-13 18:30:04	2014-04-13 18:30:04
1722	2	832	NO COMMENT	\N	2014-06-03 03:00:57	2014-06-03 03:00:57
1723	7	834	NO COMMENT	\N	2014-03-22 16:40:24	2014-03-22 16:40:24
1724	2	834	NO COMMENT	\N	2014-04-01 10:17:29	2014-04-01 10:17:29
1725	1	834	NO COMMENT	\N	2014-06-10 17:58:32	2014-06-10 17:58:32
1726	7	840	NO COMMENT	\N	2014-03-25 01:20:35	2014-03-25 01:20:35
1727	1	840	NO COMMENT	\N	2014-05-02 12:04:04	2014-05-02 12:04:04
1728	7	841	NO COMMENT	\N	2014-05-17 22:34:44	2014-05-17 22:34:44
1729	2	841	NO COMMENT	\N	2014-05-25 05:08:45	2014-05-25 05:08:45
1730	1	841	NO COMMENT	\N	2014-06-19 13:44:57	2014-06-19 13:44:57
1731	1	842	NO COMMENT	\N	2014-02-22 20:47:15	2014-02-22 20:47:15
1732	2	842	NO COMMENT	\N	2014-04-23 16:57:02	2014-04-23 16:57:02
1733	7	842	NO COMMENT	\N	2014-06-28 08:07:57	2014-06-28 08:07:57
1734	2	843	NO COMMENT	\N	2014-05-14 00:29:57	2014-05-14 00:29:57
1735	1	843	NO COMMENT	\N	2014-05-17 13:45:29	2014-05-17 13:45:29
1736	7	843	NO COMMENT	\N	2014-05-19 14:27:38	2014-05-19 14:27:38
1737	7	844	NO COMMENT	\N	2014-03-01 03:16:56	2014-03-01 03:16:56
1738	2	844	NO COMMENT	\N	2014-05-07 20:10:18	2014-05-07 20:10:18
1739	1	844	NO COMMENT	\N	2014-06-25 08:25:07	2014-06-25 08:25:07
1740	7	845	NO COMMENT	\N	2014-05-13 07:55:49	2014-05-13 07:55:49
1741	1	845	NO COMMENT	\N	2014-05-14 18:30:33	2014-05-14 18:30:33
1742	1	846	NO COMMENT	\N	2014-02-04 17:34:11	2014-02-04 17:34:11
1743	7	846	NO COMMENT	\N	2014-05-02 18:24:11	2014-05-02 18:24:11
1744	2	846	NO COMMENT	\N	2014-05-18 06:35:22	2014-05-18 06:35:22
1745	2	862	NO COMMENT	\N	2013-12-24 21:12:30	2013-12-24 21:12:30
1746	1	862	NO COMMENT	\N	2014-03-28 00:52:15	2014-03-28 00:52:15
1747	7	862	NO COMMENT	\N	2014-04-12 05:28:39	2014-04-12 05:28:39
1748	1	847	NO COMMENT	\N	2014-06-12 12:48:15	2014-06-12 12:48:15
1749	2	848	NO COMMENT	\N	2014-02-20 18:36:55	2014-02-20 18:36:55
1750	1	848	NO COMMENT	\N	2014-02-28 23:46:28	2014-02-28 23:46:28
1751	7	849	NO COMMENT	\N	2014-03-29 03:36:27	2014-03-29 03:36:27
1752	2	849	NO COMMENT	\N	2014-04-11 02:33:17	2014-04-11 02:33:17
1753	7	852	NO COMMENT	\N	2014-04-04 10:06:20	2014-04-04 10:06:20
1754	1	852	NO COMMENT	\N	2014-05-24 07:40:19	2014-05-24 07:40:19
1755	2	852	NO COMMENT	\N	2014-06-06 20:19:00	2014-06-06 20:19:00
1756	7	853	NO COMMENT	\N	2014-04-19 09:36:11	2014-04-19 09:36:11
1757	2	853	NO COMMENT	\N	2014-05-16 03:18:50	2014-05-16 03:18:50
1758	1	853	NO COMMENT	\N	2014-06-16 10:40:22	2014-06-16 10:40:22
1759	19	854	NO COMMENT	\N	2014-05-31 09:12:22	2014-05-31 09:12:22
1760	7	854	NO COMMENT	\N	2014-06-07 07:02:29	2014-06-07 07:02:29
1761	2	854	NO COMMENT	\N	2014-06-11 21:41:35	2014-06-11 21:41:35
1762	1	854	NO COMMENT	\N	2014-06-30 17:53:42	2014-06-30 17:53:42
1763	1	855	NO COMMENT	\N	2014-01-22 02:31:50	2014-01-22 02:31:50
1764	7	855	NO COMMENT	\N	2014-01-22 06:12:26	2014-01-22 06:12:26
1765	2	855	NO COMMENT	\N	2014-03-22 22:15:39	2014-03-22 22:15:39
1766	2	856	NO COMMENT	\N	2014-02-15 03:31:25	2014-02-15 03:31:25
1767	7	856	NO COMMENT	\N	2014-06-19 18:01:24	2014-06-19 18:01:24
1768	1	856	NO COMMENT	\N	2014-06-30 18:45:09	2014-06-30 18:45:09
1769	1	858	NO COMMENT	\N	2014-04-25 07:02:00	2014-04-25 07:02:00
1770	2	858	NO COMMENT	\N	2014-06-25 08:32:04	2014-06-25 08:32:04
1771	7	858	NO COMMENT	\N	2014-06-27 09:51:49	2014-06-27 09:51:49
1772	7	859	NO COMMENT	\N	2014-04-26 23:12:41	2014-04-26 23:12:41
1773	16	859	NO COMMENT	\N	2014-05-27 11:59:02	2014-05-27 11:59:02
1774	2	859	NO COMMENT	\N	2014-05-28 10:02:24	2014-05-28 10:02:24
1775	1	859	NO COMMENT	\N	2014-06-15 03:21:29	2014-06-15 03:21:29
1776	1	860	NO COMMENT	\N	2014-02-20 11:34:30	2014-02-20 11:34:30
1777	7	860	NO COMMENT	\N	2014-03-22 09:27:16	2014-03-22 09:27:16
1778	2	860	NO COMMENT	\N	2014-05-30 03:48:17	2014-05-30 03:48:17
1779	1	861	NO COMMENT	\N	2014-06-18 06:55:45	2014-06-18 06:55:45
1780	2	861	NO COMMENT	\N	2014-06-22 07:12:21	2014-06-22 07:12:21
1781	7	861	NO COMMENT	\N	2014-06-24 21:15:39	2014-06-24 21:15:39
1782	7	892	NO COMMENT	\N	2014-02-27 19:07:26	2014-02-27 19:07:26
1783	1	892	NO COMMENT	\N	2014-05-15 08:28:15	2014-05-15 08:28:15
1784	2	892	NO COMMENT	\N	2014-06-10 10:59:54	2014-06-10 10:59:54
1785	2	863	NO COMMENT	\N	2014-05-30 09:23:19	2014-05-30 09:23:19
1786	1	863	NO COMMENT	\N	2014-06-10 01:57:25	2014-06-10 01:57:25
1787	7	863	NO COMMENT	\N	2014-06-13 12:49:27	2014-06-13 12:49:27
1788	7	864	NO COMMENT	\N	2014-04-01 12:22:28	2014-04-01 12:22:28
1789	2	865	NO COMMENT	\N	2014-04-04 03:11:30	2014-04-04 03:11:30
1790	7	865	NO COMMENT	\N	2014-06-16 01:17:40	2014-06-16 01:17:40
1791	1	865	NO COMMENT	\N	2014-06-20 03:30:03	2014-06-20 03:30:03
1792	1	866	NO COMMENT	\N	2014-04-25 03:00:16	2014-04-25 03:00:16
1793	7	866	NO COMMENT	\N	2014-04-30 04:36:34	2014-04-30 04:36:34
1794	2	866	NO COMMENT	\N	2014-05-22 07:09:02	2014-05-22 07:09:02
1795	1	867	NO COMMENT	\N	2014-05-24 04:05:47	2014-05-24 04:05:47
1796	2	867	NO COMMENT	\N	2014-05-30 15:06:56	2014-05-30 15:06:56
1797	7	867	NO COMMENT	\N	2014-06-20 14:09:03	2014-06-20 14:09:03
1798	1	868	NO COMMENT	\N	2014-04-27 03:19:30	2014-04-27 03:19:30
1799	7	868	NO COMMENT	\N	2014-06-11 00:25:30	2014-06-11 00:25:30
1800	2	868	NO COMMENT	\N	2014-06-22 13:35:03	2014-06-22 13:35:03
1801	1	869	NO COMMENT	\N	2014-04-13 14:28:00	2014-04-13 14:28:00
1802	7	869	NO COMMENT	\N	2014-06-17 15:51:13	2014-06-17 15:51:13
1803	2	869	NO COMMENT	\N	2014-06-23 09:10:21	2014-06-23 09:10:21
1804	2	871	NO COMMENT	\N	2014-05-22 08:39:09	2014-05-22 08:39:09
1805	16	893	NO COMMENT	\N	2014-05-21 17:54:58	2014-05-21 17:54:58
1806	7	893	NO COMMENT	\N	2014-06-20 23:48:17	2014-06-20 23:48:17
1807	1	893	NO COMMENT	\N	2014-06-24 07:43:54	2014-06-24 07:43:54
1808	2	893	NO COMMENT	\N	2014-06-29 14:26:21	2014-06-29 14:26:21
1809	7	917	NO COMMENT	\N	2014-05-31 00:54:20	2014-05-31 00:54:20
1810	1	917	NO COMMENT	\N	2014-06-06 12:18:50	2014-06-06 12:18:50
1811	2	917	NO COMMENT	\N	2014-06-17 21:27:31	2014-06-17 21:27:31
1812	1	872	NO COMMENT	\N	2014-06-12 08:33:37	2014-06-12 08:33:37
1813	2	872	NO COMMENT	\N	2014-06-13 14:51:32	2014-06-13 14:51:32
1814	12	872	NO COMMENT	\N	2014-06-22 20:39:59	2014-06-22 20:39:59
1815	43	872	NO COMMENT	\N	2014-06-26 10:55:55	2014-06-26 10:55:55
1816	7	872	NO COMMENT	\N	2014-06-27 15:47:08	2014-06-27 15:47:08
1817	25	872	NO COMMENT	\N	2014-06-29 08:57:04	2014-06-29 08:57:04
1818	7	873	NO COMMENT	\N	2014-04-27 01:13:34	2014-04-27 01:13:34
1819	1	873	NO COMMENT	\N	2014-05-16 10:01:11	2014-05-16 10:01:11
1820	2	873	NO COMMENT	\N	2014-05-19 06:19:05	2014-05-19 06:19:05
1821	7	875	NO COMMENT	\N	2014-05-31 21:14:12	2014-05-31 21:14:12
1822	2	875	NO COMMENT	\N	2014-07-01 23:35:13	2014-07-01 23:35:13
1823	1	875	NO COMMENT	\N	2014-07-02 14:37:05	2014-07-02 14:37:05
1824	1	876	NO COMMENT	\N	2014-05-07 05:23:21	2014-05-07 05:23:21
1825	2	876	NO COMMENT	\N	2014-05-21 00:41:15	2014-05-21 00:41:15
1826	23	876	NO COMMENT	\N	2014-06-19 13:08:30	2014-06-19 13:08:30
1827	7	876	NO COMMENT	\N	2014-06-27 00:06:01	2014-06-27 00:06:01
1828	2	877	NO COMMENT	\N	2014-05-09 06:16:54	2014-05-09 06:16:54
1829	7	877	NO COMMENT	\N	2014-05-16 01:31:18	2014-05-16 01:31:18
1830	2	878	NO COMMENT	\N	2014-01-24 12:53:40	2014-01-24 12:53:40
1831	1	878	NO COMMENT	\N	2014-01-27 06:05:53	2014-01-27 06:05:53
1832	7	878	NO COMMENT	\N	2014-04-25 03:31:50	2014-04-25 03:31:50
1833	2	879	NO COMMENT	\N	2014-02-18 02:06:05	2014-02-18 02:06:05
1834	1	879	NO COMMENT	\N	2014-04-21 00:16:47	2014-04-21 00:16:47
1835	7	879	NO COMMENT	\N	2014-05-25 18:28:25	2014-05-25 18:28:25
1836	2	881	NO COMMENT	\N	2014-03-29 13:39:46	2014-03-29 13:39:46
1837	7	881	NO COMMENT	\N	2014-04-11 21:31:51	2014-04-11 21:31:51
1838	1	881	NO COMMENT	\N	2014-06-25 15:28:35	2014-06-25 15:28:35
1839	2	882	NO COMMENT	\N	2014-05-24 09:48:13	2014-05-24 09:48:13
1840	7	882	NO COMMENT	\N	2014-05-28 08:19:49	2014-05-28 08:19:49
1841	44	882	NO COMMENT	\N	2014-05-29 02:42:57	2014-05-29 02:42:57
1842	29	882	NO COMMENT	\N	2014-06-07 20:34:18	2014-06-07 20:34:18
1843	1	882	NO COMMENT	\N	2014-06-30 20:33:06	2014-06-30 20:33:06
1844	1	884	NO COMMENT	\N	2014-04-08 06:10:09	2014-04-08 06:10:09
1845	2	884	NO COMMENT	\N	2014-05-02 21:10:51	2014-05-02 21:10:51
1846	7	884	NO COMMENT	\N	2014-06-02 14:08:22	2014-06-02 14:08:22
1847	2	885	NO COMMENT	\N	2014-01-30 14:23:29	2014-01-30 14:23:29
1848	7	885	NO COMMENT	\N	2014-04-09 22:53:50	2014-04-09 22:53:50
1849	1	885	NO COMMENT	\N	2014-04-10 17:26:50	2014-04-10 17:26:50
1850	1	886	NO COMMENT	\N	2014-03-30 08:49:59	2014-03-30 08:49:59
1851	2	886	NO COMMENT	\N	2014-06-21 11:03:21	2014-06-21 11:03:21
1852	2	887	NO COMMENT	\N	2014-04-12 12:04:56	2014-04-12 12:04:56
1853	4	888	NO COMMENT	\N	2014-05-03 00:32:55	2014-05-03 00:32:55
1854	2	888	NO COMMENT	\N	2014-05-12 20:09:39	2014-05-12 20:09:39
1855	7	888	NO COMMENT	\N	2014-05-24 02:16:59	2014-05-24 02:16:59
1856	1	888	NO COMMENT	\N	2014-06-13 22:14:29	2014-06-13 22:14:29
1857	2	889	NO COMMENT	\N	2014-04-20 03:52:49	2014-04-20 03:52:49
1858	1	889	NO COMMENT	\N	2014-05-05 11:02:25	2014-05-05 11:02:25
1859	7	889	NO COMMENT	\N	2014-05-23 06:05:01	2014-05-23 06:05:01
1860	7	890	NO COMMENT	\N	2014-02-12 01:34:34	2014-02-12 01:34:34
1861	1	890	NO COMMENT	\N	2014-02-18 18:05:16	2014-02-18 18:05:16
1862	2	890	NO COMMENT	\N	2014-05-21 23:40:47	2014-05-21 23:40:47
1863	2	891	NO COMMENT	\N	2014-02-20 16:22:35	2014-02-20 16:22:35
1864	7	891	NO COMMENT	\N	2014-04-27 10:48:03	2014-04-27 10:48:03
1865	1	891	NO COMMENT	\N	2014-06-26 01:25:08	2014-06-26 01:25:08
1866	2	894	NO COMMENT	\N	2014-01-27 22:05:55	2014-01-27 22:05:55
1867	7	894	NO COMMENT	\N	2014-04-20 13:51:50	2014-04-20 13:51:50
1868	1	894	NO COMMENT	\N	2014-06-22 11:46:51	2014-06-22 11:46:51
1869	2	895	NO COMMENT	\N	2014-04-11 23:59:43	2014-04-11 23:59:43
1870	1	895	NO COMMENT	\N	2014-04-17 19:43:04	2014-04-17 19:43:04
1871	7	895	NO COMMENT	\N	2014-06-23 19:58:17	2014-06-23 19:58:17
1872	7	898	NO COMMENT	\N	2014-05-06 10:38:18	2014-05-06 10:38:18
1873	1	898	NO COMMENT	\N	2014-05-12 12:41:23	2014-05-12 12:41:23
1874	2	898	NO COMMENT	\N	2014-06-25 16:10:28	2014-06-25 16:10:28
1875	14	899	NO COMMENT	\N	2014-06-07 09:55:15	2014-06-07 09:55:15
1876	6	900	NO COMMENT	\N	2014-06-10 01:07:40	2014-06-10 01:07:40
1877	2	900	NO COMMENT	\N	2014-06-13 07:59:44	2014-06-13 07:59:44
1878	7	900	NO COMMENT	\N	2014-06-22 21:29:19	2014-06-22 21:29:19
1879	17	900	NO COMMENT	\N	2014-06-25 04:42:54	2014-06-25 04:42:54
1880	1	900	NO COMMENT	\N	2014-07-02 16:49:43	2014-07-02 16:49:43
1881	2	901	NO COMMENT	\N	2014-05-09 08:46:54	2014-05-09 08:46:54
1882	1	901	NO COMMENT	\N	2014-05-14 12:20:06	2014-05-14 12:20:06
1883	1	903	NO COMMENT	\N	2014-03-12 13:10:28	2014-03-12 13:10:28
1884	2	903	NO COMMENT	\N	2014-03-26 02:36:08	2014-03-26 02:36:08
1885	7	903	NO COMMENT	\N	2014-06-03 12:52:31	2014-06-03 12:52:31
1886	45	905	NO COMMENT	\N	2014-05-16 18:17:24	2014-05-16 18:17:24
1887	2	905	NO COMMENT	\N	2014-06-22 12:45:54	2014-06-22 12:45:54
1888	7	905	NO COMMENT	\N	2014-06-29 21:08:04	2014-06-29 21:08:04
1889	1	905	NO COMMENT	\N	2014-07-02 10:41:50	2014-07-02 10:41:50
1890	1	906	NO COMMENT	\N	2014-05-13 18:28:12	2014-05-13 18:28:12
1891	2	906	NO COMMENT	\N	2014-05-21 03:14:36	2014-05-21 03:14:36
1892	7	906	NO COMMENT	\N	2014-06-28 23:31:01	2014-06-28 23:31:01
1893	48	907	NO COMMENT	\N	2014-04-21 01:48:36	2014-04-21 01:48:36
1894	7	907	NO COMMENT	\N	2014-04-26 02:43:48	2014-04-26 02:43:48
1895	2	907	NO COMMENT	\N	2014-05-04 03:34:26	2014-05-04 03:34:26
1896	27	907	NO COMMENT	\N	2014-06-04 17:03:30	2014-06-04 17:03:30
1897	1	907	NO COMMENT	\N	2014-06-18 21:35:13	2014-06-18 21:35:13
1898	1	908	NO COMMENT	\N	2014-05-28 14:20:48	2014-05-28 14:20:48
1899	2	908	NO COMMENT	\N	2014-06-19 01:21:55	2014-06-19 01:21:55
1900	2	909	NO COMMENT	\N	2014-04-08 06:06:49	2014-04-08 06:06:49
1901	7	909	NO COMMENT	\N	2014-05-22 16:40:39	2014-05-22 16:40:39
1902	1	909	NO COMMENT	\N	2014-05-22 17:29:13	2014-05-22 17:29:13
1903	29	910	NO COMMENT	\N	2014-06-27 14:46:43	2014-06-27 14:46:43
1904	2	913	NO COMMENT	\N	2014-04-29 23:47:09	2014-04-29 23:47:09
1905	7	913	NO COMMENT	\N	2014-06-15 21:20:10	2014-06-15 21:20:10
1906	1	914	NO COMMENT	\N	2014-04-19 17:41:23	2014-04-19 17:41:23
1907	29	914	NO COMMENT	\N	2014-04-21 11:52:08	2014-04-21 11:52:08
1908	7	914	NO COMMENT	\N	2014-04-25 21:49:04	2014-04-25 21:49:04
1909	42	914	NO COMMENT	\N	2014-05-05 07:31:54	2014-05-05 07:31:54
1910	2	914	NO COMMENT	\N	2014-05-13 12:01:06	2014-05-13 12:01:06
1911	2	915	NO COMMENT	\N	2014-05-08 01:09:45	2014-05-08 01:09:45
1912	7	915	NO COMMENT	\N	2014-06-02 17:39:02	2014-06-02 17:39:02
1913	1	915	NO COMMENT	\N	2014-06-30 23:25:58	2014-06-30 23:25:58
1914	7	916	NO COMMENT	\N	2014-04-16 17:07:58	2014-04-16 17:07:58
1915	27	918	NO COMMENT	\N	2014-06-06 17:17:52	2014-06-06 17:17:52
1916	7	918	NO COMMENT	\N	2014-06-09 19:14:59	2014-06-09 19:14:59
1917	1	918	NO COMMENT	\N	2014-06-10 15:10:06	2014-06-10 15:10:06
1918	2	918	NO COMMENT	\N	2014-06-14 19:46:32	2014-06-14 19:46:32
1919	1	919	NO COMMENT	\N	2014-05-11 04:32:06	2014-05-11 04:32:06
1920	2	919	NO COMMENT	\N	2014-06-10 18:43:54	2014-06-10 18:43:54
1921	7	919	NO COMMENT	\N	2014-06-13 08:13:51	2014-06-13 08:13:51
1922	7	920	NO COMMENT	\N	2014-05-11 22:18:06	2014-05-11 22:18:06
1923	1	920	NO COMMENT	\N	2014-05-20 05:25:38	2014-05-20 05:25:38
1924	2	920	NO COMMENT	\N	2014-06-06 22:06:43	2014-06-06 22:06:43
1925	1	921	NO COMMENT	\N	2014-05-07 08:42:17	2014-05-07 08:42:17
1926	7	921	NO COMMENT	\N	2014-05-08 10:25:46	2014-05-08 10:25:46
1927	2	921	NO COMMENT	\N	2014-05-19 17:26:19	2014-05-19 17:26:19
1928	1	922	NO COMMENT	\N	2014-05-14 02:21:20	2014-05-14 02:21:20
1929	2	922	NO COMMENT	\N	2014-05-17 14:06:16	2014-05-17 14:06:16
1930	7	922	NO COMMENT	\N	2014-05-24 16:40:48	2014-05-24 16:40:48
1931	2	923	NO COMMENT	\N	2014-05-22 13:38:41	2014-05-22 13:38:41
1932	7	923	NO COMMENT	\N	2014-06-25 15:12:34	2014-06-25 15:12:34
1933	1	923	NO COMMENT	\N	2014-06-28 22:30:39	2014-06-28 22:30:39
1934	7	924	NO COMMENT	\N	2014-05-17 09:03:00	2014-05-17 09:03:00
1935	2	924	NO COMMENT	\N	2014-05-27 20:13:32	2014-05-27 20:13:32
1936	1	924	NO COMMENT	\N	2014-06-01 06:18:34	2014-06-01 06:18:34
1937	7	925	NO COMMENT	\N	2014-06-29 22:43:06	2014-06-29 22:43:06
1938	7	939	NO COMMENT	\N	2014-02-24 19:49:02	2014-02-24 19:49:02
1939	1	927	NO COMMENT	\N	2014-07-01 01:48:51	2014-07-01 01:48:51
1940	48	928	NO COMMENT	\N	2014-05-09 05:03:12	2014-05-09 05:03:12
1941	2	928	NO COMMENT	\N	2014-05-24 21:39:22	2014-05-24 21:39:22
1942	1	928	NO COMMENT	\N	2014-06-08 13:53:03	2014-06-08 13:53:03
1943	7	928	NO COMMENT	\N	2014-06-18 16:05:59	2014-06-18 16:05:59
1944	7	929	NO COMMENT	\N	2014-05-24 17:20:02	2014-05-24 17:20:02
1945	7	930	NO COMMENT	\N	2014-03-08 08:49:26	2014-03-08 08:49:26
1946	7	931	NO COMMENT	\N	2014-02-09 21:54:55	2014-02-09 21:54:55
1947	7	932	NO COMMENT	\N	2014-05-24 10:27:59	2014-05-24 10:27:59
1948	7	935	NO COMMENT	\N	2014-06-17 21:08:01	2014-06-17 21:08:01
1949	7	936	NO COMMENT	\N	2013-12-08 20:15:51	2013-12-08 20:15:51
1950	7	937	NO COMMENT	\N	2014-04-22 18:08:42	2014-04-22 18:08:42
1951	7	938	NO COMMENT	\N	2014-02-26 15:20:58	2014-02-26 15:20:58
1952	7	940	NO COMMENT	\N	2014-05-21 19:23:26	2014-05-21 19:23:26
1953	7	941	NO COMMENT	\N	2014-03-16 14:37:20	2014-03-16 14:37:20
1954	7	942	NO COMMENT	\N	2014-05-06 12:46:32	2014-05-06 12:46:32
1955	16	943	NO COMMENT	\N	2014-05-05 12:16:55	2014-05-05 12:16:55
1956	37	943	NO COMMENT	\N	2014-05-21 03:58:53	2014-05-21 03:58:53
1957	19	943	NO COMMENT	\N	2014-05-29 14:20:49	2014-05-29 14:20:49
1958	20	944	NO COMMENT	\N	2014-06-14 13:54:33	2014-06-14 13:54:33
1959	12	944	NO COMMENT	\N	2014-06-14 14:53:55	2014-06-14 14:53:55
1960	29	944	NO COMMENT	\N	2014-06-15 09:23:22	2014-06-15 09:23:22
1961	35	944	NO COMMENT	\N	2014-06-18 12:20:22	2014-06-18 12:20:22
1962	43	944	NO COMMENT	\N	2014-06-20 15:46:59	2014-06-20 15:46:59
1963	17	944	NO COMMENT	\N	2014-06-24 23:57:24	2014-06-24 23:57:24
1964	7	944	NO COMMENT	\N	2014-06-26 17:19:37	2014-06-26 17:19:37
1965	45	944	NO COMMENT	\N	2014-07-01 16:37:18	2014-07-01 16:37:18
1966	7	945	NO COMMENT	\N	2014-06-24 06:16:57	2014-06-24 06:16:57
1967	7	946	NO COMMENT	\N	2014-06-03 10:17:23	2014-06-03 10:17:23
1968	7	947	NO COMMENT	\N	2014-06-14 09:29:33	2014-06-14 09:29:33
1969	7	948	NO COMMENT	\N	2014-05-22 09:39:44	2014-05-22 09:39:44
1970	45	949	NO COMMENT	\N	2014-06-21 11:51:58	2014-06-21 11:51:58
1971	7	949	NO COMMENT	\N	2014-06-22 22:00:05	2014-06-22 22:00:05
1972	7	950	NO COMMENT	\N	2014-06-27 19:56:02	2014-06-27 19:56:02
1973	7	951	NO COMMENT	\N	2014-05-14 22:52:09	2014-05-14 22:52:09
1974	7	952	NO COMMENT	\N	2014-05-17 12:04:08	2014-05-17 12:04:08
1975	14	953	NO COMMENT	\N	2014-05-16 07:27:03	2014-05-16 07:27:03
1976	7	953	NO COMMENT	\N	2014-05-17 19:00:44	2014-05-17 19:00:44
1977	19	953	NO COMMENT	\N	2014-05-26 16:07:53	2014-05-26 16:07:53
1978	7	954	NO COMMENT	\N	2013-11-23 10:03:54	2013-11-23 10:03:54
1979	7	955	NO COMMENT	\N	2013-11-30 04:18:57	2013-11-30 04:18:57
1980	7	956	NO COMMENT	\N	2014-06-14 08:27:19	2014-06-14 08:27:19
1981	7	957	NO COMMENT	\N	2014-06-10 07:18:56	2014-06-10 07:18:56
1982	7	958	NO COMMENT	\N	2014-04-16 20:10:31	2014-04-16 20:10:31
1983	7	959	NO COMMENT	\N	2014-04-13 15:32:35	2014-04-13 15:32:35
1984	7	960	NO COMMENT	\N	2014-05-23 05:46:52	2014-05-23 05:46:52
1985	1	961	NO COMMENT	\N	2014-04-24 12:30:11	2014-04-24 12:30:11
1986	7	961	NO COMMENT	\N	2014-06-01 04:32:20	2014-06-01 04:32:20
1987	2	961	NO COMMENT	\N	2014-06-16 05:00:03	2014-06-16 05:00:03
1988	1	962	NO COMMENT	\N	2014-05-12 06:56:03	2014-05-12 06:56:03
1989	2	962	NO COMMENT	\N	2014-06-10 06:35:25	2014-06-10 06:35:25
1990	7	962	NO COMMENT	\N	2014-06-13 13:19:01	2014-06-13 13:19:01
1991	1	963	NO COMMENT	\N	2014-04-25 06:06:53	2014-04-25 06:06:53
1992	2	963	NO COMMENT	\N	2014-05-21 13:00:35	2014-05-21 13:00:35
1993	7	963	NO COMMENT	\N	2014-06-11 00:07:42	2014-06-11 00:07:42
1994	2	964	NO COMMENT	\N	2014-04-14 19:25:56	2014-04-14 19:25:56
1995	7	964	NO COMMENT	\N	2014-05-21 21:41:58	2014-05-21 21:41:58
1996	2	986	NO COMMENT	\N	2014-04-27 14:18:45	2014-04-27 14:18:45
1997	7	986	NO COMMENT	\N	2014-04-29 18:09:09	2014-04-29 18:09:09
1998	1	986	NO COMMENT	\N	2014-06-13 16:24:04	2014-06-13 16:24:04
1999	7	966	NO COMMENT	\N	2014-03-27 03:15:46	2014-03-27 03:15:46
2000	2	966	NO COMMENT	\N	2014-05-18 01:52:39	2014-05-18 01:52:39
2001	1	966	NO COMMENT	\N	2014-05-31 10:30:46	2014-05-31 10:30:46
2002	7	967	NO COMMENT	\N	2014-04-21 02:11:55	2014-04-21 02:11:55
2003	1	967	NO COMMENT	\N	2014-06-04 00:43:12	2014-06-04 00:43:12
2004	2	967	NO COMMENT	\N	2014-06-23 08:24:49	2014-06-23 08:24:49
2005	19	968	NO COMMENT	\N	2014-04-18 22:25:55	2014-04-18 22:25:55
2006	1	968	NO COMMENT	\N	2014-05-17 22:30:35	2014-05-17 22:30:35
2007	2	968	NO COMMENT	\N	2014-06-20 18:58:28	2014-06-20 18:58:28
2008	7	968	NO COMMENT	\N	2014-06-29 17:40:34	2014-06-29 17:40:34
2009	1	970	NO COMMENT	\N	2014-05-06 01:04:39	2014-05-06 01:04:39
2010	29	973	NO COMMENT	\N	2014-04-17 04:52:18	2014-04-17 04:52:18
2011	42	973	NO COMMENT	\N	2014-04-30 12:18:40	2014-04-30 12:18:40
2012	7	973	NO COMMENT	\N	2014-06-12 13:53:50	2014-06-12 13:53:50
2013	1	973	NO COMMENT	\N	2014-06-19 06:28:35	2014-06-19 06:28:35
2014	2	973	NO COMMENT	\N	2014-06-27 08:10:03	2014-06-27 08:10:03
2015	7	974	NO COMMENT	\N	2014-06-12 10:21:18	2014-06-12 10:21:18
2016	39	974	NO COMMENT	\N	2014-06-17 22:32:05	2014-06-17 22:32:05
2017	2	974	NO COMMENT	\N	2014-06-23 22:45:49	2014-06-23 22:45:49
2018	1	974	NO COMMENT	\N	2014-06-24 09:53:18	2014-06-24 09:53:18
2019	42	974	NO COMMENT	\N	2014-06-25 22:09:08	2014-06-25 22:09:08
2020	27	974	NO COMMENT	\N	2014-06-30 00:34:33	2014-06-30 00:34:33
2021	22	974	NO COMMENT	\N	2014-06-30 17:51:49	2014-06-30 17:51:49
2022	29	974	NO COMMENT	\N	2014-07-02 02:45:35	2014-07-02 02:45:35
2023	7	1001	NO COMMENT	\N	2014-03-30 06:49:21	2014-03-30 06:49:21
2024	1	1001	NO COMMENT	\N	2014-04-20 17:41:18	2014-04-20 17:41:18
2025	27	1001	NO COMMENT	\N	2014-06-04 02:04:58	2014-06-04 02:04:58
2026	2	1001	NO COMMENT	\N	2014-06-24 21:54:41	2014-06-24 21:54:41
2027	42	975	NO COMMENT	\N	2014-07-01 06:14:03	2014-07-01 06:14:03
2028	39	975	NO COMMENT	\N	2014-07-01 12:25:08	2014-07-01 12:25:08
2029	22	975	NO COMMENT	\N	2014-07-01 12:51:34	2014-07-01 12:51:34
2030	47	975	NO COMMENT	\N	2014-07-01 14:07:08	2014-07-01 14:07:08
2031	27	975	NO COMMENT	\N	2014-07-01 16:00:57	2014-07-01 16:00:57
2032	35	975	NO COMMENT	\N	2014-07-01 18:16:08	2014-07-01 18:16:08
2033	10	975	NO COMMENT	\N	2014-07-02 12:49:46	2014-07-02 12:49:46
2034	45	975	NO COMMENT	\N	2014-07-02 18:38:22	2014-07-02 18:38:22
2035	7	975	NO COMMENT	\N	2014-07-02 20:28:44	2014-07-02 20:28:44
2036	1	976	NO COMMENT	\N	2014-02-25 20:48:29	2014-02-25 20:48:29
2037	7	976	NO COMMENT	\N	2014-05-15 14:34:03	2014-05-15 14:34:03
2038	2	976	NO COMMENT	\N	2014-06-23 22:41:06	2014-06-23 22:41:06
2039	1	977	NO COMMENT	\N	2013-12-22 01:39:58	2013-12-22 01:39:58
2040	2	977	NO COMMENT	\N	2014-02-09 03:28:04	2014-02-09 03:28:04
2041	2	978	NO COMMENT	\N	2014-04-24 03:25:44	2014-04-24 03:25:44
2042	7	979	NO COMMENT	\N	2014-05-16 06:44:50	2014-05-16 06:44:50
2043	2	979	NO COMMENT	\N	2014-06-12 21:54:37	2014-06-12 21:54:37
2044	1	979	NO COMMENT	\N	2014-06-27 16:10:46	2014-06-27 16:10:46
2045	2	981	NO COMMENT	\N	2014-06-01 08:19:16	2014-06-01 08:19:16
2046	1	981	NO COMMENT	\N	2014-06-09 23:34:56	2014-06-09 23:34:56
2047	7	981	NO COMMENT	\N	2014-06-26 17:57:59	2014-06-26 17:57:59
2048	1	982	NO COMMENT	\N	2014-02-14 22:10:02	2014-02-14 22:10:02
2049	2	982	NO COMMENT	\N	2014-03-04 14:53:41	2014-03-04 14:53:41
2050	7	982	NO COMMENT	\N	2014-03-12 23:20:24	2014-03-12 23:20:24
2051	1	983	NO COMMENT	\N	2014-05-01 11:27:17	2014-05-01 11:27:17
2052	7	983	NO COMMENT	\N	2014-05-22 17:28:35	2014-05-22 17:28:35
2053	2	983	NO COMMENT	\N	2014-06-18 11:51:23	2014-06-18 11:51:23
2054	7	985	NO COMMENT	\N	2014-05-21 14:59:48	2014-05-21 14:59:48
2055	7	1002	NO COMMENT	\N	2014-06-25 06:21:01	2014-06-25 06:21:01
2056	2	987	NO COMMENT	\N	2014-04-04 12:54:18	2014-04-04 12:54:18
2057	7	987	NO COMMENT	\N	2014-04-24 01:43:18	2014-04-24 01:43:18
2058	1	987	NO COMMENT	\N	2014-05-07 20:21:14	2014-05-07 20:21:14
2059	1	988	NO COMMENT	\N	2014-05-27 17:58:43	2014-05-27 17:58:43
2060	2	989	NO COMMENT	\N	2014-05-25 08:15:18	2014-05-25 08:15:18
2061	1	989	NO COMMENT	\N	2014-06-05 20:03:13	2014-06-05 20:03:13
2062	7	989	NO COMMENT	\N	2014-06-14 21:50:26	2014-06-14 21:50:26
2063	1	990	NO COMMENT	\N	2014-04-28 16:57:27	2014-04-28 16:57:27
2064	7	990	NO COMMENT	\N	2014-06-16 15:28:14	2014-06-16 15:28:14
2065	2	990	NO COMMENT	\N	2014-06-22 12:43:07	2014-06-22 12:43:07
2066	7	991	NO COMMENT	\N	2013-12-29 06:42:27	2013-12-29 06:42:27
2067	1	991	NO COMMENT	\N	2014-02-10 23:49:14	2014-02-10 23:49:14
2068	2	991	NO COMMENT	\N	2014-06-17 04:36:41	2014-06-17 04:36:41
2069	2	993	NO COMMENT	\N	2014-05-14 03:03:02	2014-05-14 03:03:02
2070	1	993	NO COMMENT	\N	2014-06-12 22:57:35	2014-06-12 22:57:35
2071	7	993	NO COMMENT	\N	2014-06-24 10:10:57	2014-06-24 10:10:57
2072	44	993	NO COMMENT	\N	2014-06-28 16:32:22	2014-06-28 16:32:22
2073	7	994	NO COMMENT	\N	2014-01-27 07:42:46	2014-01-27 07:42:46
2074	2	994	NO COMMENT	\N	2014-02-04 19:21:44	2014-02-04 19:21:44
2075	1	994	NO COMMENT	\N	2014-05-05 00:06:17	2014-05-05 00:06:17
2076	2	995	NO COMMENT	\N	2014-05-25 03:00:28	2014-05-25 03:00:28
2077	1	995	NO COMMENT	\N	2014-06-04 00:49:25	2014-06-04 00:49:25
2078	7	995	NO COMMENT	\N	2014-06-20 23:27:25	2014-06-20 23:27:25
2079	7	996	NO COMMENT	\N	2014-04-10 12:28:48	2014-04-10 12:28:48
2080	2	996	NO COMMENT	\N	2014-05-06 04:20:26	2014-05-06 04:20:26
2081	1	996	NO COMMENT	\N	2014-05-27 07:33:34	2014-05-27 07:33:34
2082	2	998	NO COMMENT	\N	2014-03-06 02:52:06	2014-03-06 02:52:06
2083	7	998	NO COMMENT	\N	2014-06-16 03:03:20	2014-06-16 03:03:20
2084	7	999	NO COMMENT	\N	2014-04-10 20:04:34	2014-04-10 20:04:34
2085	2	999	NO COMMENT	\N	2014-06-01 02:27:20	2014-06-01 02:27:20
2086	1	999	NO COMMENT	\N	2014-06-26 08:48:55	2014-06-26 08:48:55
2087	2	1003	NO COMMENT	\N	2014-05-23 08:28:50	2014-05-23 08:28:50
2088	7	1003	NO COMMENT	\N	2014-06-15 13:39:44	2014-06-15 13:39:44
2089	1	1003	NO COMMENT	\N	2014-07-02 05:16:40	2014-07-02 05:16:40
2090	19	1005	NO COMMENT	\N	2014-05-14 23:04:53	2014-05-14 23:04:53
2091	1	1005	NO COMMENT	\N	2014-05-15 13:03:02	2014-05-15 13:03:02
2092	28	1005	NO COMMENT	\N	2014-05-20 14:10:59	2014-05-20 14:10:59
2093	7	1005	NO COMMENT	\N	2014-06-16 19:49:03	2014-06-16 19:49:03
2094	2	1005	NO COMMENT	\N	2014-06-16 23:28:54	2014-06-16 23:28:54
2095	2	1006	NO COMMENT	\N	2014-06-04 11:24:00	2014-06-04 11:24:00
2096	44	1006	NO COMMENT	\N	2014-06-04 21:05:17	2014-06-04 21:05:17
2097	7	1006	NO COMMENT	\N	2014-06-12 14:29:39	2014-06-12 14:29:39
2098	1	1006	NO COMMENT	\N	2014-06-26 02:43:09	2014-06-26 02:43:09
2099	1	1008	NO COMMENT	\N	2014-01-25 18:34:04	2014-01-25 18:34:04
2100	7	1008	NO COMMENT	\N	2014-04-22 13:07:25	2014-04-22 13:07:25
2101	2	1008	NO COMMENT	\N	2014-05-29 01:24:50	2014-05-29 01:24:50
2102	2	1009	NO COMMENT	\N	2014-03-13 23:05:01	2014-03-13 23:05:01
2103	1	1009	NO COMMENT	\N	2014-05-14 15:02:34	2014-05-14 15:02:34
2104	2	1010	NO COMMENT	\N	2014-05-29 22:21:29	2014-05-29 22:21:29
2105	1	1010	NO COMMENT	\N	2014-05-30 19:38:45	2014-05-30 19:38:45
2106	7	1010	NO COMMENT	\N	2014-05-31 07:35:55	2014-05-31 07:35:55
2107	2	1011	NO COMMENT	\N	2014-04-09 01:55:59	2014-04-09 01:55:59
2108	1	1011	NO COMMENT	\N	2014-05-03 14:55:15	2014-05-03 14:55:15
2109	48	1011	NO COMMENT	\N	2014-05-19 01:51:05	2014-05-19 01:51:05
2110	7	1011	NO COMMENT	\N	2014-06-15 09:27:55	2014-06-15 09:27:55
2111	27	1011	NO COMMENT	\N	2014-06-29 06:50:05	2014-06-29 06:50:05
2112	1	1012	NO COMMENT	\N	2014-03-02 18:03:32	2014-03-02 18:03:32
2113	2	1012	NO COMMENT	\N	2014-04-08 00:47:23	2014-04-08 00:47:23
2114	7	1012	NO COMMENT	\N	2014-04-14 09:37:07	2014-04-14 09:37:07
2115	6	1013	NO COMMENT	\N	2014-05-07 16:00:36	2014-05-07 16:00:36
2116	2	1013	NO COMMENT	\N	2014-06-09 04:49:32	2014-06-09 04:49:32
2117	1	1013	NO COMMENT	\N	2014-06-12 21:35:37	2014-06-12 21:35:37
2118	7	1013	NO COMMENT	\N	2014-06-22 03:30:36	2014-06-22 03:30:36
2119	11	1013	NO COMMENT	\N	2014-06-22 06:07:28	2014-06-22 06:07:28
2120	2	1014	NO COMMENT	\N	2014-04-02 03:50:16	2014-04-02 03:50:16
2121	2	1015	NO COMMENT	\N	2014-05-23 08:12:40	2014-05-23 08:12:40
2122	1	1015	NO COMMENT	\N	2014-06-14 04:08:09	2014-06-14 04:08:09
2123	7	1015	NO COMMENT	\N	2014-07-01 01:30:50	2014-07-01 01:30:50
2124	7	1016	NO COMMENT	\N	2014-05-22 15:01:54	2014-05-22 15:01:54
2125	20	1016	NO COMMENT	\N	2014-05-23 07:14:24	2014-05-23 07:14:24
2126	28	1016	NO COMMENT	\N	2014-05-23 13:45:35	2014-05-23 13:45:35
2127	2	1016	NO COMMENT	\N	2014-06-22 16:22:33	2014-06-22 16:22:33
2128	1	1016	NO COMMENT	\N	2014-06-25 02:10:36	2014-06-25 02:10:36
2129	41	1017	NO COMMENT	\N	2014-06-12 08:22:46	2014-06-12 08:22:46
2130	2	1018	NO COMMENT	\N	2014-04-11 18:02:31	2014-04-11 18:02:31
2131	7	1018	NO COMMENT	\N	2014-05-27 04:18:20	2014-05-27 04:18:20
2132	1	1018	NO COMMENT	\N	2014-05-28 23:25:53	2014-05-28 23:25:53
2133	2	1021	NO COMMENT	\N	2014-05-22 17:02:21	2014-05-22 17:02:21
2134	1	1021	NO COMMENT	\N	2014-05-29 09:49:38	2014-05-29 09:49:38
2135	7	1022	NO COMMENT	\N	2014-05-18 18:59:51	2014-05-18 18:59:51
2136	26	1022	NO COMMENT	\N	2014-05-22 08:50:28	2014-05-22 08:50:28
2137	1	1022	NO COMMENT	\N	2014-05-30 21:47:33	2014-05-30 21:47:33
2138	19	1022	NO COMMENT	\N	2014-06-14 18:30:33	2014-06-14 18:30:33
2139	14	1022	NO COMMENT	\N	2014-06-15 15:37:35	2014-06-15 15:37:35
2140	2	1022	NO COMMENT	\N	2014-06-26 18:04:43	2014-06-26 18:04:43
2141	26	1023	NO COMMENT	\N	2014-06-07 22:21:05	2014-06-07 22:21:05
2142	14	1023	NO COMMENT	\N	2014-06-11 08:05:05	2014-06-11 08:05:05
2143	1	1023	NO COMMENT	\N	2014-06-30 06:46:39	2014-06-30 06:46:39
2144	40	1025	NO COMMENT	\N	2014-06-19 11:22:16	2014-06-19 11:22:16
2145	6	1025	NO COMMENT	\N	2014-06-20 08:46:53	2014-06-20 08:46:53
2146	43	1025	NO COMMENT	\N	2014-06-25 11:02:35	2014-06-25 11:02:35
2147	24	1025	NO COMMENT	\N	2014-06-29 16:31:28	2014-06-29 16:31:28
2148	28	1025	NO COMMENT	\N	2014-07-02 12:20:39	2014-07-02 12:20:39
2149	7	1026	NO COMMENT	\N	2014-05-20 01:46:08	2014-05-20 01:46:08
2150	1	1026	NO COMMENT	\N	2014-05-30 15:25:29	2014-05-30 15:25:29
2151	6	1026	NO COMMENT	\N	2014-06-02 17:21:20	2014-06-02 17:21:20
2152	42	1026	NO COMMENT	\N	2014-06-09 05:35:15	2014-06-09 05:35:15
2153	2	1026	NO COMMENT	\N	2014-06-29 06:14:04	2014-06-29 06:14:04
2154	2	1027	NO COMMENT	\N	2014-05-10 11:42:55	2014-05-10 11:42:55
2155	7	1027	NO COMMENT	\N	2014-06-06 12:00:01	2014-06-06 12:00:01
2156	1	1027	NO COMMENT	\N	2014-06-30 01:08:58	2014-06-30 01:08:58
2157	29	1028	NO COMMENT	\N	2014-06-26 13:22:42	2014-06-26 13:22:42
2158	42	1028	NO COMMENT	\N	2014-06-26 18:28:40	2014-06-26 18:28:40
2159	19	1028	NO COMMENT	\N	2014-06-26 21:00:32	2014-06-26 21:00:32
2160	11	1028	NO COMMENT	\N	2014-06-26 22:37:53	2014-06-26 22:37:53
2161	7	1028	NO COMMENT	\N	2014-06-27 13:29:57	2014-06-27 13:29:57
2162	41	1028	NO COMMENT	\N	2014-06-27 18:36:20	2014-06-27 18:36:20
2163	8	1028	NO COMMENT	\N	2014-06-28 08:25:03	2014-06-28 08:25:03
2164	37	1028	NO COMMENT	\N	2014-06-28 23:09:11	2014-06-28 23:09:11
2165	2	1028	NO COMMENT	\N	2014-06-29 16:07:08	2014-06-29 16:07:08
2166	45	1028	NO COMMENT	\N	2014-07-01 22:33:54	2014-07-01 22:33:54
2167	7	1029	NO COMMENT	\N	2014-05-30 09:07:21	2014-05-30 09:07:21
2168	7	1031	NO COMMENT	\N	2014-06-02 17:45:03	2014-06-02 17:45:03
2169	26	1031	NO COMMENT	\N	2014-06-20 16:18:44	2014-06-20 16:18:44
2170	1	1031	NO COMMENT	\N	2014-06-20 19:17:26	2014-06-20 19:17:26
2171	7	1032	NO COMMENT	\N	2014-06-17 16:11:41	2014-06-17 16:11:41
2172	26	1032	NO COMMENT	\N	2014-07-02 20:12:31	2014-07-02 20:12:31
2173	16	1035	NO COMMENT	\N	2014-06-06 00:36:24	2014-06-06 00:36:24
2174	7	1035	NO COMMENT	\N	2014-06-08 14:09:24	2014-06-08 14:09:24
2175	1	1035	NO COMMENT	\N	2014-06-09 00:34:16	2014-06-09 00:34:16
2176	37	1035	NO COMMENT	\N	2014-06-11 05:27:43	2014-06-11 05:27:43
2177	16	1036	NO COMMENT	\N	2014-06-30 08:14:41	2014-06-30 08:14:41
2178	1	1037	NO COMMENT	\N	2014-05-01 22:31:57	2014-05-01 22:31:57
2179	7	1037	NO COMMENT	\N	2014-06-29 23:47:49	2014-06-29 23:47:49
2180	1	1038	NO COMMENT	\N	2014-05-29 13:04:39	2014-05-29 13:04:39
2181	2	1038	NO COMMENT	\N	2014-06-27 07:37:54	2014-06-27 07:37:54
2182	7	1038	NO COMMENT	\N	2014-07-02 11:51:23	2014-07-02 11:51:23
2183	2	1040	NO COMMENT	\N	2014-06-13 07:56:46	2014-06-13 07:56:46
2184	7	1040	NO COMMENT	\N	2014-06-20 03:00:18	2014-06-20 03:00:18
2185	7	1041	NO COMMENT	\N	2014-06-16 06:13:42	2014-06-16 06:13:42
2186	2	1041	NO COMMENT	\N	2014-06-24 11:38:02	2014-06-24 11:38:02
2187	1	1041	NO COMMENT	\N	2014-06-30 08:49:01	2014-06-30 08:49:01
2188	2	1042	NO COMMENT	\N	2014-06-06 18:19:22	2014-06-06 18:19:22
2189	7	1042	NO COMMENT	\N	2014-06-07 19:52:29	2014-06-07 19:52:29
2190	1	1042	NO COMMENT	\N	2014-06-11 00:56:24	2014-06-11 00:56:24
2191	1	1043	NO COMMENT	\N	2014-05-11 02:30:53	2014-05-11 02:30:53
2192	7	1043	NO COMMENT	\N	2014-05-12 11:31:23	2014-05-12 11:31:23
2193	2	1043	NO COMMENT	\N	2014-06-20 16:03:01	2014-06-20 16:03:01
2194	1	1044	NO COMMENT	\N	2014-06-09 07:57:00	2014-06-09 07:57:00
2195	2	1044	NO COMMENT	\N	2014-06-19 10:39:26	2014-06-19 10:39:26
2196	7	1044	NO COMMENT	\N	2014-06-24 01:54:48	2014-06-24 01:54:48
2197	16	1044	NO COMMENT	\N	2014-07-02 06:33:55	2014-07-02 06:33:55
2198	20	1046	NO COMMENT	\N	2014-06-14 07:05:19	2014-06-14 07:05:19
2199	2	1046	NO COMMENT	\N	2014-06-23 14:12:23	2014-06-23 14:12:23
2200	1	1046	NO COMMENT	\N	2014-06-28 23:19:41	2014-06-28 23:19:41
2201	7	1046	NO COMMENT	\N	2014-06-29 09:01:05	2014-06-29 09:01:05
2202	44	1046	NO COMMENT	\N	2014-06-30 15:53:58	2014-06-30 15:53:58
2203	1	1073	NO COMMENT	\N	2013-12-28 09:42:28	2013-12-28 09:42:28
2204	2	1073	NO COMMENT	\N	2014-01-03 17:22:21	2014-01-03 17:22:21
2205	1	1047	NO COMMENT	\N	2014-06-01 18:29:11	2014-06-01 18:29:11
2206	1	1048	NO COMMENT	\N	2014-06-03 14:58:43	2014-06-03 14:58:43
2207	2	1048	NO COMMENT	\N	2014-06-06 21:06:18	2014-06-06 21:06:18
2208	7	1048	NO COMMENT	\N	2014-06-20 21:33:50	2014-06-20 21:33:50
2209	1	1049	NO COMMENT	\N	2014-05-26 04:04:44	2014-05-26 04:04:44
2210	2	1049	NO COMMENT	\N	2014-06-08 15:10:23	2014-06-08 15:10:23
2211	7	1049	NO COMMENT	\N	2014-06-28 05:40:20	2014-06-28 05:40:20
2212	1	1050	NO COMMENT	\N	2014-06-15 07:46:34	2014-06-15 07:46:34
2213	2	1050	NO COMMENT	\N	2014-06-15 22:17:28	2014-06-15 22:17:28
2214	7	1050	NO COMMENT	\N	2014-07-02 01:57:52	2014-07-02 01:57:52
2215	41	1051	NO COMMENT	\N	2014-06-06 22:12:13	2014-06-06 22:12:13
2216	1	1051	NO COMMENT	\N	2014-06-07 19:22:29	2014-06-07 19:22:29
2217	48	1051	NO COMMENT	\N	2014-06-12 23:45:33	2014-06-12 23:45:33
2218	36	1051	NO COMMENT	\N	2014-06-14 06:02:15	2014-06-14 06:02:15
2219	7	1051	NO COMMENT	\N	2014-06-18 06:20:43	2014-06-18 06:20:43
2220	2	1051	NO COMMENT	\N	2014-06-22 02:59:04	2014-06-22 02:59:04
2221	7	1052	NO COMMENT	\N	2014-05-01 18:35:46	2014-05-01 18:35:46
2222	2	1052	NO COMMENT	\N	2014-05-01 22:01:04	2014-05-01 22:01:04
2223	1	1052	NO COMMENT	\N	2014-05-18 07:28:37	2014-05-18 07:28:37
2224	1	1053	NO COMMENT	\N	2014-05-23 06:35:21	2014-05-23 06:35:21
2225	2	1053	NO COMMENT	\N	2014-06-30 13:10:34	2014-06-30 13:10:34
2226	1	1054	NO COMMENT	\N	2014-05-25 10:38:14	2014-05-25 10:38:14
2227	2	1054	NO COMMENT	\N	2014-06-03 04:13:26	2014-06-03 04:13:26
2228	7	1054	NO COMMENT	\N	2014-06-05 13:02:43	2014-06-05 13:02:43
2229	1	1055	NO COMMENT	\N	2014-03-15 06:29:38	2014-03-15 06:29:38
2230	7	1055	NO COMMENT	\N	2014-04-05 23:08:02	2014-04-05 23:08:02
2231	2	1055	NO COMMENT	\N	2014-06-11 17:31:20	2014-06-11 17:31:20
2232	7	1056	NO COMMENT	\N	2013-11-29 19:23:44	2013-11-29 19:23:44
2233	1	1056	NO COMMENT	\N	2013-12-31 19:15:07	2013-12-31 19:15:07
2234	2	1056	NO COMMENT	\N	2014-06-02 06:09:06	2014-06-02 06:09:06
2235	23	1058	NO COMMENT	\N	2014-05-11 11:37:51	2014-05-11 11:37:51
2236	7	1058	NO COMMENT	\N	2014-06-21 23:42:02	2014-06-21 23:42:02
2237	2	1058	NO COMMENT	\N	2014-06-26 13:48:29	2014-06-26 13:48:29
2238	1	1058	NO COMMENT	\N	2014-06-26 23:26:59	2014-06-26 23:26:59
2239	1	1059	NO COMMENT	\N	2014-02-08 21:30:49	2014-02-08 21:30:49
2240	2	1060	NO COMMENT	\N	2014-04-22 04:23:29	2014-04-22 04:23:29
2241	7	1063	NO COMMENT	\N	2013-12-17 16:04:12	2013-12-17 16:04:12
2242	1	1063	NO COMMENT	\N	2014-04-22 17:45:24	2014-04-22 17:45:24
2243	2	1064	NO COMMENT	\N	2014-05-09 13:03:58	2014-05-09 13:03:58
2244	7	1064	NO COMMENT	\N	2014-05-22 02:43:44	2014-05-22 02:43:44
2245	1	1064	NO COMMENT	\N	2014-06-21 23:55:01	2014-06-21 23:55:01
2246	19	1064	NO COMMENT	\N	2014-06-25 21:14:16	2014-06-25 21:14:16
2247	7	1065	NO COMMENT	\N	2014-01-31 01:25:05	2014-01-31 01:25:05
2248	7	1066	NO COMMENT	\N	2014-03-09 00:26:14	2014-03-09 00:26:14
2249	1	1066	NO COMMENT	\N	2014-05-08 22:30:57	2014-05-08 22:30:57
2250	2	1066	NO COMMENT	\N	2014-05-28 15:18:41	2014-05-28 15:18:41
2251	1	1067	NO COMMENT	\N	2014-03-18 19:24:50	2014-03-18 19:24:50
2252	7	1067	NO COMMENT	\N	2014-04-15 04:14:48	2014-04-15 04:14:48
2253	2	1067	NO COMMENT	\N	2014-04-29 23:48:09	2014-04-29 23:48:09
2254	2	1068	NO COMMENT	\N	2014-04-23 06:21:23	2014-04-23 06:21:23
2255	7	1068	NO COMMENT	\N	2014-05-22 18:45:47	2014-05-22 18:45:47
2256	1	1068	NO COMMENT	\N	2014-05-30 16:08:54	2014-05-30 16:08:54
2257	2	1069	NO COMMENT	\N	2014-04-03 01:48:16	2014-04-03 01:48:16
2258	1	1069	NO COMMENT	\N	2014-04-18 14:01:21	2014-04-18 14:01:21
2259	7	1069	NO COMMENT	\N	2014-06-30 03:38:41	2014-06-30 03:38:41
2260	2	1071	NO COMMENT	\N	2014-03-30 06:51:51	2014-03-30 06:51:51
2261	1	1071	NO COMMENT	\N	2014-04-19 23:08:37	2014-04-19 23:08:37
2262	7	1071	NO COMMENT	\N	2014-05-02 12:11:56	2014-05-02 12:11:56
2263	2	1072	NO COMMENT	\N	2014-02-16 13:01:22	2014-02-16 13:01:22
2264	1	1072	NO COMMENT	\N	2014-03-28 19:07:02	2014-03-28 19:07:02
2265	7	1072	NO COMMENT	\N	2014-06-14 16:00:35	2014-06-14 16:00:35
2266	7	1075	NO COMMENT	\N	2014-05-09 11:43:15	2014-05-09 11:43:15
2267	2	1075	NO COMMENT	\N	2014-05-12 04:14:14	2014-05-12 04:14:14
2268	1	1075	NO COMMENT	\N	2014-06-26 04:14:02	2014-06-26 04:14:02
2269	2	1076	NO COMMENT	\N	2014-05-05 10:24:59	2014-05-05 10:24:59
2270	1	1076	NO COMMENT	\N	2014-06-02 04:26:47	2014-06-02 04:26:47
2271	7	1076	NO COMMENT	\N	2014-06-05 16:44:40	2014-06-05 16:44:40
2272	1	1077	NO COMMENT	\N	2014-01-14 07:57:20	2014-01-14 07:57:20
2273	2	1077	NO COMMENT	\N	2014-01-19 20:47:52	2014-01-19 20:47:52
2274	7	1077	NO COMMENT	\N	2014-04-01 12:22:49	2014-04-01 12:22:49
2275	2	1078	NO COMMENT	\N	2014-02-25 13:55:17	2014-02-25 13:55:17
2276	7	1078	NO COMMENT	\N	2014-03-08 19:02:05	2014-03-08 19:02:05
2277	1	1078	NO COMMENT	\N	2014-04-19 14:54:49	2014-04-19 14:54:49
2278	7	1081	NO COMMENT	\N	2014-01-04 19:05:42	2014-01-04 19:05:42
2279	1	1081	NO COMMENT	\N	2014-02-01 07:14:28	2014-02-01 07:14:28
2280	2	1081	NO COMMENT	\N	2014-03-08 17:38:05	2014-03-08 17:38:05
2281	1	1083	NO COMMENT	\N	2014-06-13 10:22:51	2014-06-13 10:22:51
2282	2	1083	NO COMMENT	\N	2014-06-15 17:19:40	2014-06-15 17:19:40
2283	7	1083	NO COMMENT	\N	2014-06-19 17:07:22	2014-06-19 17:07:22
2284	1	1108	NO COMMENT	\N	2014-06-02 10:47:24	2014-06-02 10:47:24
2285	7	1108	NO COMMENT	\N	2014-06-27 09:53:59	2014-06-27 09:53:59
2286	1	1109	NO COMMENT	\N	2014-05-19 09:05:16	2014-05-19 09:05:16
2287	29	1109	NO COMMENT	\N	2014-07-01 19:29:52	2014-07-01 19:29:52
2288	26	1084	NO COMMENT	\N	2014-06-20 15:43:19	2014-06-20 15:43:19
2289	1	1084	NO COMMENT	\N	2014-06-27 07:33:38	2014-06-27 07:33:38
2290	2	1084	NO COMMENT	\N	2014-06-28 08:42:33	2014-06-28 08:42:33
2291	7	1084	NO COMMENT	\N	2014-06-30 02:02:12	2014-06-30 02:02:12
2292	32	1084	NO COMMENT	\N	2014-07-01 12:04:58	2014-07-01 12:04:58
2293	2	1085	NO COMMENT	\N	2014-06-29 08:37:58	2014-06-29 08:37:58
2294	7	1086	NO COMMENT	\N	2014-05-18 17:33:43	2014-05-18 17:33:43
2295	1	1086	NO COMMENT	\N	2014-05-31 08:54:09	2014-05-31 08:54:09
2296	2	1086	NO COMMENT	\N	2014-06-13 09:36:53	2014-06-13 09:36:53
2297	2	1087	NO COMMENT	\N	2014-06-05 12:07:38	2014-06-05 12:07:38
2298	7	1087	NO COMMENT	\N	2014-06-06 14:12:40	2014-06-06 14:12:40
2299	1	1087	NO COMMENT	\N	2014-06-27 16:53:32	2014-06-27 16:53:32
2300	7	1088	NO COMMENT	\N	2014-06-08 07:16:56	2014-06-08 07:16:56
2301	2	1088	NO COMMENT	\N	2014-06-12 20:22:03	2014-06-12 20:22:03
2302	1	1088	NO COMMENT	\N	2014-06-23 23:51:00	2014-06-23 23:51:00
2303	2	1089	NO COMMENT	\N	2014-06-03 22:59:21	2014-06-03 22:59:21
2304	1	1089	NO COMMENT	\N	2014-06-05 16:08:10	2014-06-05 16:08:10
2305	7	1089	NO COMMENT	\N	2014-06-13 02:46:01	2014-06-13 02:46:01
2306	48	1089	NO COMMENT	\N	2014-06-26 01:07:10	2014-06-26 01:07:10
2307	28	1091	NO COMMENT	\N	2014-05-31 01:45:03	2014-05-31 01:45:03
2308	2	1091	NO COMMENT	\N	2014-06-28 19:00:24	2014-06-28 19:00:24
2309	1	1091	NO COMMENT	\N	2014-06-29 14:36:54	2014-06-29 14:36:54
2310	2	1092	NO COMMENT	\N	2014-06-16 21:07:50	2014-06-16 21:07:50
2311	1	1092	NO COMMENT	\N	2014-06-17 21:16:22	2014-06-17 21:16:22
2312	34	1092	NO COMMENT	\N	2014-06-20 14:23:08	2014-06-20 14:23:08
2313	7	1092	NO COMMENT	\N	2014-06-27 14:27:45	2014-06-27 14:27:45
2314	44	1092	NO COMMENT	\N	2014-06-29 15:05:23	2014-06-29 15:05:23
2315	20	1092	NO COMMENT	\N	2014-06-30 09:23:48	2014-06-30 09:23:48
2316	7	1093	NO COMMENT	\N	2014-06-20 09:32:51	2014-06-20 09:32:51
2317	1	1093	NO COMMENT	\N	2014-06-27 04:38:16	2014-06-27 04:38:16
2318	2	1093	NO COMMENT	\N	2014-06-27 05:30:40	2014-06-27 05:30:40
2319	11	1095	NO COMMENT	\N	2014-06-14 19:28:34	2014-06-14 19:28:34
2320	20	1095	NO COMMENT	\N	2014-06-15 12:34:09	2014-06-15 12:34:09
2321	19	1095	NO COMMENT	\N	2014-06-16 09:31:27	2014-06-16 09:31:27
2322	1	1095	NO COMMENT	\N	2014-06-17 05:29:38	2014-06-17 05:29:38
2323	2	1095	NO COMMENT	\N	2014-06-17 09:50:31	2014-06-17 09:50:31
2324	43	1095	NO COMMENT	\N	2014-06-19 05:39:52	2014-06-19 05:39:52
2325	31	1095	NO COMMENT	\N	2014-06-19 10:07:55	2014-06-19 10:07:55
2326	29	1095	NO COMMENT	\N	2014-06-22 19:32:21	2014-06-22 19:32:21
2327	45	1095	NO COMMENT	\N	2014-06-22 21:37:22	2014-06-22 21:37:22
2328	12	1095	NO COMMENT	\N	2014-06-24 01:40:33	2014-06-24 01:40:33
2329	25	1095	NO COMMENT	\N	2014-06-26 08:26:06	2014-06-26 08:26:06
2330	17	1095	NO COMMENT	\N	2014-06-29 01:38:28	2014-06-29 01:38:28
2331	37	1095	NO COMMENT	\N	2014-07-01 13:43:52	2014-07-01 13:43:52
2332	16	1095	NO COMMENT	\N	2014-07-01 14:00:39	2014-07-01 14:00:39
2333	7	1095	NO COMMENT	\N	2014-07-01 17:47:43	2014-07-01 17:47:43
2334	11	1096	NO COMMENT	\N	2014-05-17 23:18:00	2014-05-17 23:18:00
2335	9	1096	NO COMMENT	\N	2014-05-20 08:40:47	2014-05-20 08:40:47
2336	1	1096	NO COMMENT	\N	2014-05-25 08:02:28	2014-05-25 08:02:28
2337	7	1096	NO COMMENT	\N	2014-06-05 06:06:49	2014-06-05 06:06:49
2338	2	1096	NO COMMENT	\N	2014-07-02 18:24:10	2014-07-02 18:24:10
2339	7	1097	NO COMMENT	\N	2014-05-11 04:46:12	2014-05-11 04:46:12
2340	2	1097	NO COMMENT	\N	2014-05-24 08:07:26	2014-05-24 08:07:26
2341	1	1097	NO COMMENT	\N	2014-06-16 22:51:10	2014-06-16 22:51:10
2342	2	1098	NO COMMENT	\N	2014-05-27 11:51:52	2014-05-27 11:51:52
2343	7	1098	NO COMMENT	\N	2014-06-07 20:50:01	2014-06-07 20:50:01
2344	1	1098	NO COMMENT	\N	2014-06-20 22:33:11	2014-06-20 22:33:11
2345	7	1100	NO COMMENT	\N	2014-05-27 03:10:01	2014-05-27 03:10:01
2346	2	1100	NO COMMENT	\N	2014-06-01 21:35:24	2014-06-01 21:35:24
2347	1	1100	NO COMMENT	\N	2014-06-19 20:34:53	2014-06-19 20:34:53
2348	7	1101	NO COMMENT	\N	2014-05-31 09:48:10	2014-05-31 09:48:10
2349	1	1102	NO COMMENT	\N	2014-05-30 08:16:16	2014-05-30 08:16:16
2350	2	1102	NO COMMENT	\N	2014-06-19 08:06:40	2014-06-19 08:06:40
2351	7	1102	NO COMMENT	\N	2014-06-19 18:54:49	2014-06-19 18:54:49
2352	1	1103	NO COMMENT	\N	2014-06-11 18:03:13	2014-06-11 18:03:13
2353	2	1103	NO COMMENT	\N	2014-06-29 08:42:32	2014-06-29 08:42:32
2354	7	1103	NO COMMENT	\N	2014-06-30 15:42:53	2014-06-30 15:42:53
2355	2	1104	NO COMMENT	\N	2014-06-28 07:37:49	2014-06-28 07:37:49
2356	7	1105	NO COMMENT	\N	2014-06-24 01:29:38	2014-06-24 01:29:38
2357	15	1105	NO COMMENT	\N	2014-06-30 11:08:22	2014-06-30 11:08:22
2358	2	1106	NO COMMENT	\N	2014-06-23 23:20:30	2014-06-23 23:20:30
2359	7	1106	NO COMMENT	\N	2014-06-27 08:32:50	2014-06-27 08:32:50
2360	16	1106	NO COMMENT	\N	2014-06-27 20:36:46	2014-06-27 20:36:46
2361	15	1106	NO COMMENT	\N	2014-06-29 04:46:44	2014-06-29 04:46:44
2362	1	1106	NO COMMENT	\N	2014-07-01 18:19:09	2014-07-01 18:19:09
2363	24	1106	NO COMMENT	\N	2014-07-02 17:53:14	2014-07-02 17:53:14
2364	24	1107	NO COMMENT	\N	2014-06-28 17:12:19	2014-06-28 17:12:19
2365	16	1107	NO COMMENT	\N	2014-06-29 11:30:38	2014-06-29 11:30:38
2366	2	1107	NO COMMENT	\N	2014-07-01 18:34:48	2014-07-01 18:34:48
2367	7	1107	NO COMMENT	\N	2014-07-01 19:28:52	2014-07-01 19:28:52
2368	15	1107	NO COMMENT	\N	2014-07-02 03:28:22	2014-07-02 03:28:22
2369	1	1107	NO COMMENT	\N	2014-07-02 17:01:49	2014-07-02 17:01:49
2370	7	1110	NO COMMENT	\N	2014-05-22 19:12:43	2014-05-22 19:12:43
2371	8	1111	NO COMMENT	\N	2014-05-05 04:06:25	2014-05-05 04:06:25
2372	26	1111	NO COMMENT	\N	2014-05-29 07:23:13	2014-05-29 07:23:13
2373	27	1111	NO COMMENT	\N	2014-06-13 10:44:06	2014-06-13 10:44:06
2374	7	1111	NO COMMENT	\N	2014-06-23 16:49:27	2014-06-23 16:49:27
2375	2	1111	NO COMMENT	\N	2014-06-28 09:56:41	2014-06-28 09:56:41
2376	1	1111	NO COMMENT	\N	2014-06-30 15:28:04	2014-06-30 15:28:04
2377	7	1112	NO COMMENT	\N	2014-05-26 23:34:52	2014-05-26 23:34:52
2378	11	1112	NO COMMENT	\N	2014-06-07 22:46:53	2014-06-07 22:46:53
2379	7	1113	NO COMMENT	\N	2013-12-30 14:29:41	2013-12-30 14:29:41
2380	2	1115	NO COMMENT	\N	2014-04-14 12:31:35	2014-04-14 12:31:35
2381	1	1115	NO COMMENT	\N	2014-06-11 09:21:19	2014-06-11 09:21:19
2382	7	1116	NO COMMENT	\N	2014-04-25 02:59:29	2014-04-25 02:59:29
2383	1	1116	NO COMMENT	\N	2014-05-02 20:07:35	2014-05-02 20:07:35
2384	2	1116	NO COMMENT	\N	2014-06-10 14:02:53	2014-06-10 14:02:53
2385	1	1117	NO COMMENT	\N	2014-01-18 02:46:54	2014-01-18 02:46:54
2386	7	1117	NO COMMENT	\N	2014-02-21 06:28:27	2014-02-21 06:28:27
2387	2	1117	NO COMMENT	\N	2014-06-25 12:52:14	2014-06-25 12:52:14
2388	1	1118	NO COMMENT	\N	2013-12-07 17:10:23	2013-12-07 17:10:23
2389	2	1118	NO COMMENT	\N	2014-04-19 09:43:49	2014-04-19 09:43:49
2390	7	1118	NO COMMENT	\N	2014-06-15 09:01:21	2014-06-15 09:01:21
2391	7	1119	NO COMMENT	\N	2014-01-30 12:33:30	2014-01-30 12:33:30
2392	1	1119	NO COMMENT	\N	2014-02-22 21:26:17	2014-02-22 21:26:17
2393	7	1121	NO COMMENT	\N	2014-04-03 06:22:12	2014-04-03 06:22:12
2394	1	1121	NO COMMENT	\N	2014-06-04 14:15:42	2014-06-04 14:15:42
2395	2	1121	NO COMMENT	\N	2014-06-12 08:27:23	2014-06-12 08:27:23
2396	1	1122	NO COMMENT	\N	2014-03-12 02:56:26	2014-03-12 02:56:26
2397	23	1122	NO COMMENT	\N	2014-03-18 23:12:28	2014-03-18 23:12:28
2398	7	1122	NO COMMENT	\N	2014-05-19 15:48:32	2014-05-19 15:48:32
2399	2	1122	NO COMMENT	\N	2014-05-28 11:31:55	2014-05-28 11:31:55
2400	2	1123	NO COMMENT	\N	2014-06-06 00:41:27	2014-06-06 00:41:27
2401	7	1123	NO COMMENT	\N	2014-06-08 05:45:16	2014-06-08 05:45:16
2402	23	1123	NO COMMENT	\N	2014-06-20 13:14:51	2014-06-20 13:14:51
2403	1	1123	NO COMMENT	\N	2014-06-28 22:45:41	2014-06-28 22:45:41
2404	2	1124	NO COMMENT	\N	2013-12-03 15:31:28	2013-12-03 15:31:28
2405	7	1124	NO COMMENT	\N	2014-01-28 19:12:54	2014-01-28 19:12:54
2406	1	1124	NO COMMENT	\N	2014-05-07 13:09:50	2014-05-07 13:09:50
2407	1	1125	NO COMMENT	\N	2014-03-20 21:14:53	2014-03-20 21:14:53
2408	7	1152	NO COMMENT	\N	2013-12-03 02:35:10	2013-12-03 02:35:10
2409	7	1128	NO COMMENT	\N	2014-04-30 01:15:25	2014-04-30 01:15:25
2410	2	1128	NO COMMENT	\N	2014-06-03 03:02:25	2014-06-03 03:02:25
2411	1	1128	NO COMMENT	\N	2014-06-17 06:00:52	2014-06-17 06:00:52
2412	2	1129	NO COMMENT	\N	2014-01-19 11:43:08	2014-01-19 11:43:08
2413	7	1129	NO COMMENT	\N	2014-05-25 02:58:40	2014-05-25 02:58:40
2414	1	1129	NO COMMENT	\N	2014-05-29 14:18:17	2014-05-29 14:18:17
2415	2	1132	NO COMMENT	\N	2014-04-16 04:52:10	2014-04-16 04:52:10
2416	1	1132	NO COMMENT	\N	2014-06-06 22:30:43	2014-06-06 22:30:43
2417	7	1132	NO COMMENT	\N	2014-06-07 15:07:59	2014-06-07 15:07:59
2418	6	1132	NO COMMENT	\N	2014-06-24 18:19:59	2014-06-24 18:19:59
2419	2	1133	NO COMMENT	\N	2014-03-22 11:48:15	2014-03-22 11:48:15
2420	1	1133	NO COMMENT	\N	2014-05-09 17:25:47	2014-05-09 17:25:47
2421	6	1133	NO COMMENT	\N	2014-06-10 06:48:09	2014-06-10 06:48:09
2422	2	1134	NO COMMENT	\N	2014-02-04 10:26:57	2014-02-04 10:26:57
2423	7	1134	NO COMMENT	\N	2014-04-12 14:39:11	2014-04-12 14:39:11
2424	1	1134	NO COMMENT	\N	2014-06-05 05:32:36	2014-06-05 05:32:36
2425	7	1135	NO COMMENT	\N	2013-10-26 12:11:16	2013-10-26 12:11:16
2426	1	1135	NO COMMENT	\N	2014-01-11 08:43:50	2014-01-11 08:43:50
2427	2	1135	NO COMMENT	\N	2014-01-13 05:17:46	2014-01-13 05:17:46
2428	2	1137	NO COMMENT	\N	2014-02-07 18:31:48	2014-02-07 18:31:48
2429	7	1137	NO COMMENT	\N	2014-02-13 04:24:46	2014-02-13 04:24:46
2430	1	1137	NO COMMENT	\N	2014-04-18 22:20:46	2014-04-18 22:20:46
2431	1	1138	NO COMMENT	\N	2014-06-09 11:23:46	2014-06-09 11:23:46
2432	22	1138	NO COMMENT	\N	2014-06-25 10:28:56	2014-06-25 10:28:56
2433	7	1138	NO COMMENT	\N	2014-06-25 18:13:03	2014-06-25 18:13:03
2434	2	1138	NO COMMENT	\N	2014-06-27 07:30:01	2014-06-27 07:30:01
2435	1	1139	NO COMMENT	\N	2014-04-21 15:36:00	2014-04-21 15:36:00
2436	2	1139	NO COMMENT	\N	2014-04-23 11:10:30	2014-04-23 11:10:30
2437	7	1139	NO COMMENT	\N	2014-06-25 07:49:21	2014-06-25 07:49:21
2438	7	1140	NO COMMENT	\N	2014-03-19 04:45:51	2014-03-19 04:45:51
2439	1	1140	NO COMMENT	\N	2014-03-22 22:01:13	2014-03-22 22:01:13
2440	2	1140	NO COMMENT	\N	2014-05-11 12:11:02	2014-05-11 12:11:02
2441	2	1141	NO COMMENT	\N	2014-06-22 23:32:37	2014-06-22 23:32:37
2442	1	1142	NO COMMENT	\N	2014-03-24 03:45:59	2014-03-24 03:45:59
2443	7	1142	NO COMMENT	\N	2014-04-24 04:36:17	2014-04-24 04:36:17
2444	2	1142	NO COMMENT	\N	2014-07-01 20:33:17	2014-07-01 20:33:17
2445	2	1143	NO COMMENT	\N	2014-04-28 07:33:25	2014-04-28 07:33:25
2446	1	1143	NO COMMENT	\N	2014-06-14 03:21:23	2014-06-14 03:21:23
2447	2	1144	NO COMMENT	\N	2014-05-10 05:44:26	2014-05-10 05:44:26
2448	1	1144	NO COMMENT	\N	2014-06-13 11:43:11	2014-06-13 11:43:11
2449	7	1145	NO COMMENT	\N	2014-03-21 13:58:04	2014-03-21 13:58:04
2450	1	1145	NO COMMENT	\N	2014-05-14 04:27:41	2014-05-14 04:27:41
2451	2	1145	NO COMMENT	\N	2014-06-17 08:48:05	2014-06-17 08:48:05
2452	2	1147	NO COMMENT	\N	2014-05-05 01:14:12	2014-05-05 01:14:12
2453	7	1147	NO COMMENT	\N	2014-05-18 00:12:03	2014-05-18 00:12:03
2454	1	1147	NO COMMENT	\N	2014-05-27 16:35:06	2014-05-27 16:35:06
2455	7	1148	NO COMMENT	\N	2014-01-05 17:39:05	2014-01-05 17:39:05
2456	7	1149	NO COMMENT	\N	2014-05-31 15:51:00	2014-05-31 15:51:00
2457	7	1151	NO COMMENT	\N	2014-05-19 15:11:03	2014-05-19 15:11:03
2458	14	1151	NO COMMENT	\N	2014-06-28 07:05:37	2014-06-28 07:05:37
2459	19	1151	NO COMMENT	\N	2014-06-30 20:45:51	2014-06-30 20:45:51
2460	26	1151	NO COMMENT	\N	2014-07-02 01:39:01	2014-07-02 01:39:01
2461	7	1154	NO COMMENT	\N	2014-02-13 01:03:35	2014-02-13 01:03:35
2462	7	1155	NO COMMENT	\N	2014-01-24 12:31:14	2014-01-24 12:31:14
2463	7	1156	NO COMMENT	\N	2014-05-08 06:49:32	2014-05-08 06:49:32
2464	7	1157	NO COMMENT	\N	2014-06-07 02:51:31	2014-06-07 02:51:31
2465	42	1158	NO COMMENT	\N	2014-06-18 01:37:45	2014-06-18 01:37:45
2466	7	1158	NO COMMENT	\N	2014-06-25 21:43:41	2014-06-25 21:43:41
2467	7	1159	NO COMMENT	\N	2014-02-18 20:05:54	2014-02-18 20:05:54
2468	7	1160	NO COMMENT	\N	2014-05-04 15:52:07	2014-05-04 15:52:07
2469	7	1161	NO COMMENT	\N	2013-12-31 23:01:52	2013-12-31 23:01:52
2470	7	1162	NO COMMENT	\N	2014-06-17 08:36:29	2014-06-17 08:36:29
2471	7	1176	NO COMMENT	\N	2014-05-06 23:44:33	2014-05-06 23:44:33
2472	7	1163	NO COMMENT	\N	2014-04-12 13:09:55	2014-04-12 13:09:55
2473	7	1164	NO COMMENT	\N	2014-03-25 17:53:05	2014-03-25 17:53:05
2474	7	1165	NO COMMENT	\N	2014-04-01 07:59:43	2014-04-01 07:59:43
2475	7	1166	NO COMMENT	\N	2014-04-12 21:19:29	2014-04-12 21:19:29
2476	7	1167	NO COMMENT	\N	2014-05-29 17:18:29	2014-05-29 17:18:29
2477	36	1168	NO COMMENT	\N	2014-06-14 18:30:14	2014-06-14 18:30:14
2478	7	1168	NO COMMENT	\N	2014-06-25 05:17:58	2014-06-25 05:17:58
2479	48	1168	NO COMMENT	\N	2014-06-28 01:06:16	2014-06-28 01:06:16
2480	7	1169	NO COMMENT	\N	2013-12-22 07:35:50	2013-12-22 07:35:50
2481	7	1171	NO COMMENT	\N	2014-05-26 08:55:49	2014-05-26 08:55:49
2482	7	1172	NO COMMENT	\N	2014-02-28 18:52:08	2014-02-28 18:52:08
2483	7	1177	NO COMMENT	\N	2014-04-16 04:52:36	2014-04-16 04:52:36
2484	45	1178	NO COMMENT	\N	2014-05-12 14:34:50	2014-05-12 14:34:50
2485	16	1178	NO COMMENT	\N	2014-06-15 22:47:34	2014-06-15 22:47:34
2486	7	1178	NO COMMENT	\N	2014-06-27 17:27:55	2014-06-27 17:27:55
2487	12	1178	NO COMMENT	\N	2014-06-30 02:30:51	2014-06-30 02:30:51
2488	7	1179	NO COMMENT	\N	2014-05-28 21:23:21	2014-05-28 21:23:21
2489	7	1181	NO COMMENT	\N	2014-06-05 08:54:15	2014-06-05 08:54:15
2490	7	1182	NO COMMENT	\N	2014-04-14 00:06:27	2014-04-14 00:06:27
2491	7	1184	NO COMMENT	\N	2014-04-27 13:49:02	2014-04-27 13:49:02
2492	19	1185	NO COMMENT	\N	2014-05-15 07:41:26	2014-05-15 07:41:26
2493	7	1185	NO COMMENT	\N	2014-05-17 05:28:24	2014-05-17 05:28:24
2494	19	1186	NO COMMENT	\N	2014-07-02 13:32:19	2014-07-02 13:32:19
2495	7	1188	NO COMMENT	\N	2014-04-09 04:43:22	2014-04-09 04:43:22
2496	7	1210	NO COMMENT	\N	2014-06-01 19:00:35	2014-06-01 19:00:35
2497	7	1190	NO COMMENT	\N	2014-03-29 22:52:22	2014-03-29 22:52:22
2498	7	1191	NO COMMENT	\N	2014-06-10 04:44:21	2014-06-10 04:44:21
2499	7	1192	NO COMMENT	\N	2014-06-18 00:48:10	2014-06-18 00:48:10
2500	7	1193	NO COMMENT	\N	2014-06-27 17:12:32	2014-06-27 17:12:32
2501	7	1211	NO COMMENT	\N	2014-04-20 16:59:42	2014-04-20 16:59:42
2502	9	1211	NO COMMENT	\N	2014-05-11 08:34:58	2014-05-11 08:34:58
2503	11	1211	NO COMMENT	\N	2014-06-17 21:59:35	2014-06-17 21:59:35
2504	7	1194	NO COMMENT	\N	2014-04-16 16:47:08	2014-04-16 16:47:08
2505	7	1195	NO COMMENT	\N	2014-06-30 06:05:35	2014-06-30 06:05:35
2506	7	1196	NO COMMENT	\N	2014-05-02 07:21:24	2014-05-02 07:21:24
2507	7	1198	NO COMMENT	\N	2014-06-07 17:31:14	2014-06-07 17:31:14
2508	7	1199	NO COMMENT	\N	2014-06-06 13:56:17	2014-06-06 13:56:17
2509	7	1201	NO COMMENT	\N	2014-05-22 22:01:28	2014-05-22 22:01:28
2510	7	1202	NO COMMENT	\N	2014-05-31 03:45:55	2014-05-31 03:45:55
2511	7	1204	NO COMMENT	\N	2014-06-01 14:20:23	2014-06-01 14:20:23
2512	31	1204	NO COMMENT	\N	2014-06-04 03:36:49	2014-06-04 03:36:49
2513	36	1204	NO COMMENT	\N	2014-06-08 20:51:27	2014-06-08 20:51:27
2514	31	1205	NO COMMENT	\N	2014-06-09 11:49:22	2014-06-09 11:49:22
2515	36	1205	NO COMMENT	\N	2014-06-18 11:49:56	2014-06-18 11:49:56
2516	7	1205	NO COMMENT	\N	2014-06-21 11:34:29	2014-06-21 11:34:29
2517	7	1206	NO COMMENT	\N	2014-06-03 11:31:09	2014-06-03 11:31:09
2518	31	1206	NO COMMENT	\N	2014-06-24 22:10:18	2014-06-24 22:10:18
2519	36	1206	NO COMMENT	\N	2014-06-30 17:23:09	2014-06-30 17:23:09
2520	36	1207	NO COMMENT	\N	2014-06-17 06:29:35	2014-06-17 06:29:35
2521	31	1207	NO COMMENT	\N	2014-06-17 22:34:26	2014-06-17 22:34:26
2522	7	1207	NO COMMENT	\N	2014-06-19 00:20:59	2014-06-19 00:20:59
2523	7	1213	NO COMMENT	\N	2014-06-24 17:17:48	2014-06-24 17:17:48
2524	7	1216	NO COMMENT	\N	2014-04-02 07:37:57	2014-04-02 07:37:57
2525	7	1217	NO COMMENT	\N	2014-05-26 06:09:48	2014-05-26 06:09:48
2526	7	1219	NO COMMENT	\N	2014-04-02 14:36:20	2014-04-02 14:36:20
2527	7	1222	NO COMMENT	\N	2014-04-14 06:27:10	2014-04-14 06:27:10
2528	16	1222	NO COMMENT	\N	2014-04-14 11:28:17	2014-04-14 11:28:17
2529	7	1224	NO COMMENT	\N	2014-03-18 23:58:29	2014-03-18 23:58:29
2530	7	1225	NO COMMENT	\N	2014-07-01 23:12:24	2014-07-01 23:12:24
2531	7	1227	NO COMMENT	\N	2014-04-01 12:57:31	2014-04-01 12:57:31
2532	7	1228	NO COMMENT	\N	2014-04-22 18:11:13	2014-04-22 18:11:13
2533	7	1230	NO COMMENT	\N	2014-06-19 19:37:10	2014-06-19 19:37:10
2534	28	1230	NO COMMENT	\N	2014-06-21 11:40:40	2014-06-21 11:40:40
2535	28	1231	NO COMMENT	\N	2014-06-01 16:39:13	2014-06-01 16:39:13
2536	7	1231	NO COMMENT	\N	2014-06-26 14:23:18	2014-06-26 14:23:18
2537	28	1232	NO COMMENT	\N	2014-05-24 02:44:10	2014-05-24 02:44:10
2538	20	1232	NO COMMENT	\N	2014-06-01 21:52:23	2014-06-01 21:52:23
2539	7	1232	NO COMMENT	\N	2014-06-09 09:24:52	2014-06-09 09:24:52
2540	7	1233	NO COMMENT	\N	2014-06-02 12:32:00	2014-06-02 12:32:00
2541	7	1234	NO COMMENT	\N	2014-06-16 15:17:09	2014-06-16 15:17:09
2542	7	1237	NO COMMENT	\N	2014-06-08 06:32:06	2014-06-08 06:32:06
2543	7	1238	NO COMMENT	\N	2014-06-10 17:55:26	2014-06-10 17:55:26
2544	7	1239	NO COMMENT	\N	2014-06-16 05:09:56	2014-06-16 05:09:56
2545	22	1241	NO COMMENT	\N	2014-04-26 02:58:19	2014-04-26 02:58:19
2546	7	1242	NO COMMENT	\N	2014-04-04 19:43:27	2014-04-04 19:43:27
2547	16	1244	NO COMMENT	\N	2014-04-30 03:19:35	2014-04-30 03:19:35
2548	19	1244	NO COMMENT	\N	2014-05-07 22:38:47	2014-05-07 22:38:47
2549	37	1244	NO COMMENT	\N	2014-05-09 13:54:40	2014-05-09 13:54:40
2550	7	1244	NO COMMENT	\N	2014-05-16 12:42:36	2014-05-16 12:42:36
2551	7	1245	NO COMMENT	\N	2014-05-07 08:44:07	2014-05-07 08:44:07
2552	27	1246	NO COMMENT	\N	2014-05-05 22:27:27	2014-05-05 22:27:27
2553	7	1246	NO COMMENT	\N	2014-06-25 17:47:44	2014-06-25 17:47:44
2554	7	1247	NO COMMENT	\N	2014-06-15 14:07:00	2014-06-15 14:07:00
2555	27	1247	NO COMMENT	\N	2014-06-29 23:32:07	2014-06-29 23:32:07
2556	7	1248	NO COMMENT	\N	2014-05-22 04:44:20	2014-05-22 04:44:20
2557	7	1259	NO COMMENT	\N	2014-05-31 02:13:32	2014-05-31 02:13:32
2558	1	1274	NO COMMENT	\N	2014-06-24 18:11:24	2014-06-24 18:11:24
2559	2	1274	NO COMMENT	\N	2014-06-28 18:25:30	2014-06-28 18:25:30
2560	7	1249	NO COMMENT	\N	2014-06-11 22:22:48	2014-06-11 22:22:48
2561	28	1249	NO COMMENT	\N	2014-06-14 00:25:17	2014-06-14 00:25:17
2562	7	1250	NO COMMENT	\N	2014-06-10 23:12:48	2014-06-10 23:12:48
2563	7	1251	NO COMMENT	\N	2014-07-01 22:14:48	2014-07-01 22:14:48
2564	7	1253	NO COMMENT	\N	2014-04-26 17:35:25	2014-04-26 17:35:25
2565	7	1254	NO COMMENT	\N	2014-05-12 17:17:42	2014-05-12 17:17:42
2566	7	1256	NO COMMENT	\N	2014-05-20 17:55:46	2014-05-20 17:55:46
2567	26	1256	NO COMMENT	\N	2014-06-01 18:26:21	2014-06-01 18:26:21
2568	8	1256	NO COMMENT	\N	2014-06-18 20:35:02	2014-06-18 20:35:02
2569	7	1257	NO COMMENT	\N	2014-06-06 06:07:18	2014-06-06 06:07:18
2570	7	1258	NO COMMENT	\N	2014-05-10 21:44:32	2014-05-10 21:44:32
2571	7	1261	NO COMMENT	\N	2014-05-23 17:23:58	2014-05-23 17:23:58
2572	7	1262	NO COMMENT	\N	2014-06-03 15:58:12	2014-06-03 15:58:12
2573	7	1263	NO COMMENT	\N	2014-04-27 04:21:06	2014-04-27 04:21:06
2574	7	1264	NO COMMENT	\N	2014-05-23 13:47:07	2014-05-23 13:47:07
2575	9	1265	NO COMMENT	\N	2014-06-28 10:24:35	2014-06-28 10:24:35
2576	43	1265	NO COMMENT	\N	2014-06-29 10:53:35	2014-06-29 10:53:35
2577	40	1265	NO COMMENT	\N	2014-06-29 21:39:31	2014-06-29 21:39:31
2578	29	1266	NO COMMENT	\N	2014-06-20 22:48:12	2014-06-20 22:48:12
2579	22	1266	NO COMMENT	\N	2014-06-23 15:22:53	2014-06-23 15:22:53
2580	3	1266	NO COMMENT	\N	2014-06-25 02:44:18	2014-06-25 02:44:18
2581	8	1266	NO COMMENT	\N	2014-06-28 11:22:32	2014-06-28 11:22:32
2582	28	1266	NO COMMENT	\N	2014-06-29 06:36:36	2014-06-29 06:36:36
2583	2	1266	NO COMMENT	\N	2014-06-30 00:44:09	2014-06-30 00:44:09
2584	2	1268	NO COMMENT	\N	2014-06-21 09:48:07	2014-06-21 09:48:07
2585	7	1268	NO COMMENT	\N	2014-06-25 01:51:46	2014-06-25 01:51:46
2586	1	1268	NO COMMENT	\N	2014-06-25 04:29:42	2014-06-25 04:29:42
2587	5	1268	NO COMMENT	\N	2014-06-25 10:24:23	2014-06-25 10:24:23
2588	1	1269	NO COMMENT	\N	2014-06-30 09:08:58	2014-06-30 09:08:58
2589	2	1270	NO COMMENT	\N	2014-07-02 16:28:23	2014-07-02 16:28:23
2590	7	1270	NO COMMENT	\N	2014-07-02 20:10:33	2014-07-02 20:10:33
2591	7	1272	NO COMMENT	\N	2014-06-18 09:03:29	2014-06-18 09:03:29
2592	2	1272	NO COMMENT	\N	2014-06-22 14:59:58	2014-06-22 14:59:58
2593	1	1272	NO COMMENT	\N	2014-07-02 19:28:43	2014-07-02 19:28:43
2594	1	1273	NO COMMENT	\N	2014-06-23 05:49:39	2014-06-23 05:49:39
2595	7	1273	NO COMMENT	\N	2014-06-29 16:39:16	2014-06-29 16:39:16
2596	2	1273	NO COMMENT	\N	2014-07-01 18:46:58	2014-07-01 18:46:58
2597	1	1276	NO COMMENT	\N	2014-06-29 17:12:23	2014-06-29 17:12:23
2598	7	1276	NO COMMENT	\N	2014-06-29 17:33:12	2014-06-29 17:33:12
2599	2	1276	NO COMMENT	\N	2014-06-30 12:27:28	2014-06-30 12:27:28
2600	17	1277	NO COMMENT	\N	2014-06-19 21:41:17	2014-06-19 21:41:17
2601	43	1278	NO COMMENT	\N	2014-06-16 18:08:40	2014-06-16 18:08:40
2602	40	1278	NO COMMENT	\N	2014-06-17 16:39:41	2014-06-17 16:39:41
2603	34	1278	NO COMMENT	\N	2014-06-18 03:23:22	2014-06-18 03:23:22
2604	26	1278	NO COMMENT	\N	2014-06-18 06:21:55	2014-06-18 06:21:55
2605	19	1278	NO COMMENT	\N	2014-06-19 00:42:56	2014-06-19 00:42:56
2606	1	1278	NO COMMENT	\N	2014-06-19 04:35:04	2014-06-19 04:35:04
2607	9	1278	NO COMMENT	\N	2014-06-19 17:22:04	2014-06-19 17:22:04
2608	22	1278	NO COMMENT	\N	2014-06-22 21:31:06	2014-06-22 21:31:06
2609	28	1278	NO COMMENT	\N	2014-06-25 04:39:30	2014-06-25 04:39:30
2610	14	1278	NO COMMENT	\N	2014-06-27 00:42:21	2014-06-27 00:42:21
2611	14	1280	NO COMMENT	\N	2014-06-22 12:29:17	2014-06-22 12:29:17
2612	6	1280	NO COMMENT	\N	2014-06-23 03:05:45	2014-06-23 03:05:45
2613	19	1280	NO COMMENT	\N	2014-06-24 05:30:41	2014-06-24 05:30:41
2614	9	1280	NO COMMENT	\N	2014-06-24 12:13:31	2014-06-24 12:13:31
2615	40	1280	NO COMMENT	\N	2014-06-26 14:31:03	2014-06-26 14:31:03
2616	27	1280	NO COMMENT	\N	2014-06-26 15:22:10	2014-06-26 15:22:10
2617	26	1280	NO COMMENT	\N	2014-06-27 05:08:03	2014-06-27 05:08:03
2618	24	1280	NO COMMENT	\N	2014-06-27 20:18:13	2014-06-27 20:18:13
2619	22	1280	NO COMMENT	\N	2014-06-28 12:24:11	2014-06-28 12:24:11
2620	30	1280	NO COMMENT	\N	2014-06-29 01:09:29	2014-06-29 01:09:29
2621	12	1280	NO COMMENT	\N	2014-06-30 03:40:57	2014-06-30 03:40:57
2622	34	1280	NO COMMENT	\N	2014-06-30 20:14:39	2014-06-30 20:14:39
2623	7	1280	NO COMMENT	\N	2014-07-01 01:12:19	2014-07-01 01:12:19
2624	1	1280	NO COMMENT	\N	2014-07-01 05:50:35	2014-07-01 05:50:35
2625	17	1280	NO COMMENT	\N	2014-07-01 15:30:37	2014-07-01 15:30:37
2626	28	1280	NO COMMENT	\N	2014-07-01 17:59:40	2014-07-01 17:59:40
2627	43	1280	NO COMMENT	\N	2014-07-02 02:19:12	2014-07-02 02:19:12
2628	2	1280	NO COMMENT	\N	2014-07-02 11:08:39	2014-07-02 11:08:39
2629	14	1282	NO COMMENT	\N	2014-06-30 08:03:48	2014-06-30 08:03:48
2630	33	1282	NO COMMENT	\N	2014-07-01 04:05:33	2014-07-01 04:05:33
2631	40	1282	NO COMMENT	\N	2014-07-02 13:25:55	2014-07-02 13:25:55
2632	12	1283	NO COMMENT	\N	2014-07-02 08:19:27	2014-07-02 08:19:27
2633	7	1283	NO COMMENT	\N	2014-07-02 11:35:52	2014-07-02 11:35:52
2634	33	1283	NO COMMENT	\N	2014-07-02 18:58:09	2014-07-02 18:58:09
2635	35	1284	NO COMMENT	\N	2014-07-01 07:08:30	2014-07-01 07:08:30
2636	19	1284	NO COMMENT	\N	2014-07-01 09:46:59	2014-07-01 09:46:59
2637	9	1284	NO COMMENT	\N	2014-07-01 15:57:52	2014-07-01 15:57:52
2638	27	1284	NO COMMENT	\N	2014-07-02 01:22:29	2014-07-02 01:22:29
2639	37	1284	NO COMMENT	\N	2014-07-02 03:56:01	2014-07-02 03:56:01
2640	7	1284	NO COMMENT	\N	2014-07-02 04:26:59	2014-07-02 04:26:59
2641	2	1284	NO COMMENT	\N	2014-07-02 04:35:03	2014-07-02 04:35:03
2642	13	1284	NO COMMENT	\N	2014-07-02 06:12:21	2014-07-02 06:12:21
2643	24	1284	NO COMMENT	\N	2014-07-02 14:18:29	2014-07-02 14:18:29
2644	17	1284	NO COMMENT	\N	2014-07-02 17:05:07	2014-07-02 17:05:07
2645	32	1284	NO COMMENT	\N	2014-07-02 19:27:38	2014-07-02 19:27:38
2646	7	1288	NO COMMENT	\N	2014-06-29 20:33:49	2014-06-29 20:33:49
2647	1	1288	NO COMMENT	\N	2014-06-30 22:06:57	2014-06-30 22:06:57
2648	26	1288	NO COMMENT	\N	2014-07-01 08:36:00	2014-07-01 08:36:00
2649	2	1288	NO COMMENT	\N	2014-07-02 04:20:03	2014-07-02 04:20:03
2650	9	1289	NO COMMENT	\N	2014-06-22 23:29:56	2014-06-22 23:29:56
2651	16	1289	NO COMMENT	\N	2014-06-24 01:41:03	2014-06-24 01:41:03
2652	30	1289	NO COMMENT	\N	2014-06-24 17:29:51	2014-06-24 17:29:51
2653	1	1289	NO COMMENT	\N	2014-06-27 21:50:59	2014-06-27 21:50:59
2654	7	1289	NO COMMENT	\N	2014-07-02 02:25:29	2014-07-02 02:25:29
2655	7	1333	NO COMMENT	\N	2014-06-01 00:36:32	2014-06-01 00:36:32
2656	42	1333	NO COMMENT	\N	2014-06-24 02:14:22	2014-06-24 02:14:22
2657	22	1333	NO COMMENT	\N	2014-06-27 05:11:36	2014-06-27 05:11:36
2658	30	1290	NO COMMENT	\N	2014-06-25 16:07:54	2014-06-25 16:07:54
2659	16	1290	NO COMMENT	\N	2014-06-27 00:31:31	2014-06-27 00:31:31
2660	14	1290	NO COMMENT	\N	2014-06-27 10:20:21	2014-06-27 10:20:21
2661	9	1290	NO COMMENT	\N	2014-06-28 09:38:43	2014-06-28 09:38:43
2662	1	1291	NO COMMENT	\N	2014-06-24 07:46:42	2014-06-24 07:46:42
2663	7	1291	NO COMMENT	\N	2014-06-25 22:28:06	2014-06-25 22:28:06
2664	9	1291	NO COMMENT	\N	2014-06-25 22:34:39	2014-06-25 22:34:39
2665	1	1292	NO COMMENT	\N	2014-06-26 14:27:34	2014-06-26 14:27:34
2666	17	1292	NO COMMENT	\N	2014-06-28 15:18:28	2014-06-28 15:18:28
2667	7	1292	NO COMMENT	\N	2014-06-30 12:32:27	2014-06-30 12:32:27
2668	44	1292	NO COMMENT	\N	2014-06-30 20:07:08	2014-06-30 20:07:08
2669	2	1293	NO COMMENT	\N	2014-06-21 14:11:49	2014-06-21 14:11:49
2670	1	1293	NO COMMENT	\N	2014-06-29 14:12:05	2014-06-29 14:12:05
2671	7	1293	NO COMMENT	\N	2014-06-29 17:21:56	2014-06-29 17:21:56
2672	1	1294	NO COMMENT	\N	2014-06-25 12:08:42	2014-06-25 12:08:42
2673	29	1294	NO COMMENT	\N	2014-06-26 07:19:57	2014-06-26 07:19:57
2674	2	1294	NO COMMENT	\N	2014-06-28 13:23:07	2014-06-28 13:23:07
2675	7	1294	NO COMMENT	\N	2014-07-02 18:21:08	2014-07-02 18:21:08
2676	7	1295	NO COMMENT	\N	2014-06-27 10:37:53	2014-06-27 10:37:53
2677	1	1295	NO COMMENT	\N	2014-06-29 17:38:58	2014-06-29 17:38:58
2678	22	1296	NO COMMENT	\N	2014-07-02 10:44:16	2014-07-02 10:44:16
2679	7	1297	NO COMMENT	\N	2014-06-18 13:18:09	2014-06-18 13:18:09
2680	1	1297	NO COMMENT	\N	2014-06-25 03:22:31	2014-06-25 03:22:31
2681	2	1297	NO COMMENT	\N	2014-06-26 07:46:12	2014-06-26 07:46:12
2682	11	1297	NO COMMENT	\N	2014-07-01 16:18:51	2014-07-01 16:18:51
2683	7	1298	NO COMMENT	\N	2014-06-24 10:17:30	2014-06-24 10:17:30
2684	1	1298	NO COMMENT	\N	2014-06-28 17:54:09	2014-06-28 17:54:09
2685	7	1300	NO COMMENT	\N	2014-07-01 01:20:04	2014-07-01 01:20:04
2686	2	1300	NO COMMENT	\N	2014-07-01 10:16:57	2014-07-01 10:16:57
2687	1	1301	NO COMMENT	\N	2014-06-27 14:55:45	2014-06-27 14:55:45
2688	37	1301	NO COMMENT	\N	2014-06-29 13:54:28	2014-06-29 13:54:28
2689	17	1301	NO COMMENT	\N	2014-07-01 01:49:35	2014-07-01 01:49:35
2690	13	1301	NO COMMENT	\N	2014-07-02 01:01:30	2014-07-02 01:01:30
2691	7	1301	NO COMMENT	\N	2014-07-02 17:21:33	2014-07-02 17:21:33
2692	37	1302	NO COMMENT	\N	2014-06-24 17:05:07	2014-06-24 17:05:07
2693	2	1302	NO COMMENT	\N	2014-06-25 05:43:50	2014-06-25 05:43:50
2694	17	1302	NO COMMENT	\N	2014-06-26 07:26:11	2014-06-26 07:26:11
2695	7	1303	NO COMMENT	\N	2014-06-27 16:39:23	2014-06-27 16:39:23
2696	2	1303	NO COMMENT	\N	2014-06-28 04:34:50	2014-06-28 04:34:50
2697	16	1303	NO COMMENT	\N	2014-06-28 07:20:21	2014-06-28 07:20:21
2698	13	1303	NO COMMENT	\N	2014-06-28 16:22:45	2014-06-28 16:22:45
2699	1	1303	NO COMMENT	\N	2014-06-29 16:26:57	2014-06-29 16:26:57
2700	37	1303	NO COMMENT	\N	2014-06-30 03:00:33	2014-06-30 03:00:33
2701	17	1303	NO COMMENT	\N	2014-07-02 04:48:24	2014-07-02 04:48:24
2702	29	1304	NO COMMENT	\N	2014-05-14 02:06:12	2014-05-14 02:06:12
2703	7	1304	NO COMMENT	\N	2014-06-13 13:04:04	2014-06-13 13:04:04
2704	7	1305	NO COMMENT	\N	2014-06-11 13:54:41	2014-06-11 13:54:41
2705	7	1307	NO COMMENT	\N	2014-06-12 02:19:26	2014-06-12 02:19:26
2706	45	1307	NO COMMENT	\N	2014-06-15 11:19:29	2014-06-15 11:19:29
2707	45	1308	NO COMMENT	\N	2014-06-24 21:45:35	2014-06-24 21:45:35
2708	7	1308	NO COMMENT	\N	2014-07-01 17:50:19	2014-07-01 17:50:19
2709	22	1309	NO COMMENT	\N	2014-07-02 00:15:05	2014-07-02 00:15:05
2710	7	1311	NO COMMENT	\N	2014-06-13 23:14:21	2014-06-13 23:14:21
2711	7	1312	NO COMMENT	\N	2014-06-26 04:39:48	2014-06-26 04:39:48
2712	16	1314	NO COMMENT	\N	2014-06-04 17:43:25	2014-06-04 17:43:25
2713	7	1314	NO COMMENT	\N	2014-06-07 20:37:56	2014-06-07 20:37:56
2714	6	1314	NO COMMENT	\N	2014-06-13 12:17:40	2014-06-13 12:17:40
2715	25	1314	NO COMMENT	\N	2014-06-18 03:45:19	2014-06-18 03:45:19
2716	11	1314	NO COMMENT	\N	2014-06-21 15:17:45	2014-06-21 15:17:45
2717	7	1315	NO COMMENT	\N	2014-06-04 22:59:28	2014-06-04 22:59:28
2718	31	1316	NO COMMENT	\N	2014-06-09 14:32:23	2014-06-09 14:32:23
2719	7	1318	NO COMMENT	\N	2014-06-16 16:37:23	2014-06-16 16:37:23
2720	31	1318	NO COMMENT	\N	2014-07-02 13:28:59	2014-07-02 13:28:59
2721	7	1319	NO COMMENT	\N	2014-05-29 06:40:32	2014-05-29 06:40:32
2722	42	1344	NO COMMENT	\N	2014-04-22 05:51:04	2014-04-22 05:51:04
2723	7	1344	NO COMMENT	\N	2014-05-24 10:59:11	2014-05-24 10:59:11
2724	43	1344	NO COMMENT	\N	2014-05-25 17:39:54	2014-05-25 17:39:54
2725	7	1320	NO COMMENT	\N	2014-06-22 05:02:18	2014-06-22 05:02:18
2726	7	1321	NO COMMENT	\N	2014-05-31 06:46:35	2014-05-31 06:46:35
2727	7	1322	NO COMMENT	\N	2014-06-21 14:00:00	2014-06-21 14:00:00
2728	23	1322	NO COMMENT	\N	2014-07-02 12:43:45	2014-07-02 12:43:45
2729	27	1326	NO COMMENT	\N	2014-05-30 20:14:10	2014-05-30 20:14:10
2730	7	1326	NO COMMENT	\N	2014-06-08 13:12:34	2014-06-08 13:12:34
2731	7	1327	NO COMMENT	\N	2014-05-29 11:27:56	2014-05-29 11:27:56
2732	48	1327	NO COMMENT	\N	2014-05-31 18:20:59	2014-05-31 18:20:59
2733	29	1327	NO COMMENT	\N	2014-06-05 20:29:02	2014-06-05 20:29:02
2734	27	1327	NO COMMENT	\N	2014-06-16 21:17:55	2014-06-16 21:17:55
2735	48	1328	NO COMMENT	\N	2014-06-23 00:07:27	2014-06-23 00:07:27
2736	11	1328	NO COMMENT	\N	2014-06-25 00:03:45	2014-06-25 00:03:45
2737	27	1329	NO COMMENT	\N	2014-06-22 03:28:20	2014-06-22 03:28:20
2738	7	1330	NO COMMENT	\N	2014-05-26 02:27:37	2014-05-26 02:27:37
2739	11	1330	NO COMMENT	\N	2014-06-01 14:37:42	2014-06-01 14:37:42
2740	9	1330	NO COMMENT	\N	2014-06-19 13:13:27	2014-06-19 13:13:27
2741	7	1331	NO COMMENT	\N	2014-06-13 23:42:15	2014-06-13 23:42:15
2742	7	1332	NO COMMENT	\N	2014-07-01 04:38:49	2014-07-01 04:38:49
2743	7	1345	NO COMMENT	\N	2014-05-07 21:25:24	2014-05-07 21:25:24
2744	39	1334	NO COMMENT	\N	2014-06-09 02:32:17	2014-06-09 02:32:17
2745	27	1334	NO COMMENT	\N	2014-06-12 23:52:26	2014-06-12 23:52:26
2746	42	1334	NO COMMENT	\N	2014-06-14 07:03:27	2014-06-14 07:03:27
2747	7	1334	NO COMMENT	\N	2014-06-14 08:57:03	2014-06-14 08:57:03
2748	22	1334	NO COMMENT	\N	2014-06-16 18:16:37	2014-06-16 18:16:37
2749	7	1337	NO COMMENT	\N	2014-06-18 19:37:37	2014-06-18 19:37:37
2750	7	1338	NO COMMENT	\N	2014-06-04 00:32:18	2014-06-04 00:32:18
2751	7	1339	NO COMMENT	\N	2014-05-05 13:44:23	2014-05-05 13:44:23
2752	7	1340	NO COMMENT	\N	2014-04-22 17:04:23	2014-04-22 17:04:23
2753	7	1341	NO COMMENT	\N	2014-05-04 04:00:09	2014-05-04 04:00:09
2754	7	1342	NO COMMENT	\N	2014-04-18 22:11:39	2014-04-18 22:11:39
2755	9	1343	NO COMMENT	\N	2014-05-19 19:18:13	2014-05-19 19:18:13
2756	11	1343	NO COMMENT	\N	2014-05-23 16:04:06	2014-05-23 16:04:06
2757	7	1343	NO COMMENT	\N	2014-07-01 07:01:36	2014-07-01 07:01:36
2758	27	1348	NO COMMENT	\N	2014-04-04 05:12:18	2014-04-04 05:12:18
2759	7	1348	NO COMMENT	\N	2014-06-21 16:07:15	2014-06-21 16:07:15
2760	7	1349	NO COMMENT	\N	2014-03-27 17:06:17	2014-03-27 17:06:17
2761	7	1350	NO COMMENT	\N	2014-03-10 00:40:11	2014-03-10 00:40:11
2762	7	1351	NO COMMENT	\N	2014-03-15 11:27:02	2014-03-15 11:27:02
2763	7	1352	NO COMMENT	\N	2014-04-14 09:40:37	2014-04-14 09:40:37
2764	7	1354	NO COMMENT	\N	2014-07-01 08:59:51	2014-07-01 08:59:51
2765	7	1355	NO COMMENT	\N	2014-03-23 18:08:58	2014-03-23 18:08:58
2766	2	1398	NO COMMENT	\N	2014-03-15 06:44:00	2014-03-15 06:44:00
2767	7	1398	NO COMMENT	\N	2014-03-22 01:09:25	2014-03-22 01:09:25
2768	1	1398	NO COMMENT	\N	2014-06-11 18:28:06	2014-06-11 18:28:06
2769	45	1357	NO COMMENT	\N	2014-05-05 10:21:00	2014-05-05 10:21:00
2770	7	1357	NO COMMENT	\N	2014-05-20 22:00:01	2014-05-20 22:00:01
2771	16	1358	NO COMMENT	\N	2014-06-26 11:13:12	2014-06-26 11:13:12
2772	12	1358	NO COMMENT	\N	2014-06-28 03:02:04	2014-06-28 03:02:04
2773	4	1358	NO COMMENT	\N	2014-06-29 20:59:39	2014-06-29 20:59:39
2774	7	1359	NO COMMENT	\N	2014-06-17 06:09:10	2014-06-17 06:09:10
2775	7	1363	NO COMMENT	\N	2014-04-29 20:26:26	2014-04-29 20:26:26
2776	37	1363	NO COMMENT	\N	2014-05-19 10:31:03	2014-05-19 10:31:03
2777	16	1363	NO COMMENT	\N	2014-05-20 17:48:46	2014-05-20 17:48:46
2778	7	1364	NO COMMENT	\N	2014-03-11 20:55:42	2014-03-11 20:55:42
2779	7	1365	NO COMMENT	\N	2014-06-18 23:39:29	2014-06-18 23:39:29
2780	7	1366	NO COMMENT	\N	2014-05-28 17:53:07	2014-05-28 17:53:07
2781	37	1366	NO COMMENT	\N	2014-06-02 21:51:18	2014-06-02 21:51:18
2782	7	1367	NO COMMENT	\N	2014-05-25 06:12:42	2014-05-25 06:12:42
2783	7	1368	NO COMMENT	\N	2014-05-14 09:33:52	2014-05-14 09:33:52
2784	7	1369	NO COMMENT	\N	2014-05-06 15:53:39	2014-05-06 15:53:39
2785	2	1371	NO COMMENT	\N	2014-03-06 10:05:46	2014-03-06 10:05:46
2786	7	1371	NO COMMENT	\N	2014-04-12 12:38:51	2014-04-12 12:38:51
2787	1	1371	NO COMMENT	\N	2014-06-17 16:18:30	2014-06-17 16:18:30
2788	2	1373	NO COMMENT	\N	2014-04-30 14:07:09	2014-04-30 14:07:09
2789	1	1373	NO COMMENT	\N	2014-05-04 09:42:46	2014-05-04 09:42:46
2790	12	1396	NO COMMENT	\N	2014-06-10 04:20:00	2014-06-10 04:20:00
2791	19	1396	NO COMMENT	\N	2014-06-15 09:22:27	2014-06-15 09:22:27
2792	26	1396	NO COMMENT	\N	2014-06-17 01:48:38	2014-06-17 01:48:38
2793	9	1396	NO COMMENT	\N	2014-06-18 02:31:29	2014-06-18 02:31:29
2794	2	1396	NO COMMENT	\N	2014-06-18 07:55:09	2014-06-18 07:55:09
2795	14	1396	NO COMMENT	\N	2014-06-19 11:02:30	2014-06-19 11:02:30
2796	7	1396	NO COMMENT	\N	2014-06-19 13:11:02	2014-06-19 13:11:02
2797	6	1396	NO COMMENT	\N	2014-06-21 22:03:59	2014-06-21 22:03:59
2798	1	1396	NO COMMENT	\N	2014-06-27 15:17:09	2014-06-27 15:17:09
2799	43	1396	NO COMMENT	\N	2014-06-28 01:12:01	2014-06-28 01:12:01
2800	17	1396	NO COMMENT	\N	2014-06-29 07:40:41	2014-06-29 07:40:41
2801	7	1376	NO COMMENT	\N	2014-06-03 14:59:57	2014-06-03 14:59:57
2802	2	1376	NO COMMENT	\N	2014-06-30 03:46:02	2014-06-30 03:46:02
2803	1	1376	NO COMMENT	\N	2014-06-30 18:34:21	2014-06-30 18:34:21
2804	40	1377	NO COMMENT	\N	2014-06-24 13:24:37	2014-06-24 13:24:37
2805	2	1377	NO COMMENT	\N	2014-06-24 17:26:04	2014-06-24 17:26:04
2806	30	1377	NO COMMENT	\N	2014-06-24 20:57:38	2014-06-24 20:57:38
2807	1	1377	NO COMMENT	\N	2014-06-26 00:09:35	2014-06-26 00:09:35
2808	7	1377	NO COMMENT	\N	2014-06-27 09:33:57	2014-06-27 09:33:57
2809	43	1377	NO COMMENT	\N	2014-06-28 20:58:47	2014-06-28 20:58:47
2810	36	1377	NO COMMENT	\N	2014-06-29 04:19:23	2014-06-29 04:19:23
2811	41	1377	NO COMMENT	\N	2014-07-01 12:34:54	2014-07-01 12:34:54
2812	1	1378	NO COMMENT	\N	2014-06-24 21:01:21	2014-06-24 21:01:21
2813	7	1378	NO COMMENT	\N	2014-06-29 06:44:15	2014-06-29 06:44:15
2814	1	1379	NO COMMENT	\N	2014-04-03 22:17:48	2014-04-03 22:17:48
2815	7	1380	NO COMMENT	\N	2014-04-28 00:53:16	2014-04-28 00:53:16
2816	7	1381	NO COMMENT	\N	2014-04-15 15:18:53	2014-04-15 15:18:53
2817	1	1381	NO COMMENT	\N	2014-05-10 13:15:35	2014-05-10 13:15:35
2818	2	1382	NO COMMENT	\N	2014-04-30 22:42:10	2014-04-30 22:42:10
2819	2	1383	NO COMMENT	\N	2014-03-12 11:32:50	2014-03-12 11:32:50
2820	7	1383	NO COMMENT	\N	2014-05-08 14:48:31	2014-05-08 14:48:31
2821	1	1383	NO COMMENT	\N	2014-05-10 04:28:41	2014-05-10 04:28:41
2822	2	1399	NO COMMENT	\N	2014-03-27 14:39:49	2014-03-27 14:39:49
2823	7	1399	NO COMMENT	\N	2014-05-06 08:33:16	2014-05-06 08:33:16
2824	43	1399	NO COMMENT	\N	2014-06-18 17:05:05	2014-06-18 17:05:05
2825	1	1384	NO COMMENT	\N	2014-05-17 16:36:16	2014-05-17 16:36:16
2826	2	1384	NO COMMENT	\N	2014-06-06 12:53:01	2014-06-06 12:53:01
2827	22	1384	NO COMMENT	\N	2014-06-18 19:50:41	2014-06-18 19:50:41
2828	7	1384	NO COMMENT	\N	2014-06-26 12:38:37	2014-06-26 12:38:37
2829	7	1385	NO COMMENT	\N	2014-06-22 22:53:17	2014-06-22 22:53:17
2830	2	1385	NO COMMENT	\N	2014-06-26 20:17:03	2014-06-26 20:17:03
2831	7	1387	NO COMMENT	\N	2014-04-30 07:15:14	2014-04-30 07:15:14
2832	48	1388	NO COMMENT	\N	2014-04-26 21:58:21	2014-04-26 21:58:21
2833	2	1388	NO COMMENT	\N	2014-05-02 03:51:58	2014-05-02 03:51:58
2834	7	1388	NO COMMENT	\N	2014-05-19 14:22:03	2014-05-19 14:22:03
2835	1	1388	NO COMMENT	\N	2014-05-25 22:35:18	2014-05-25 22:35:18
2836	2	1389	NO COMMENT	\N	2014-03-13 14:50:03	2014-03-13 14:50:03
2837	7	1389	NO COMMENT	\N	2014-05-05 17:08:27	2014-05-05 17:08:27
2838	1	1389	NO COMMENT	\N	2014-05-30 22:50:46	2014-05-30 22:50:46
2839	7	1390	NO COMMENT	\N	2014-05-10 15:08:43	2014-05-10 15:08:43
2840	1	1390	NO COMMENT	\N	2014-05-14 08:36:23	2014-05-14 08:36:23
2841	2	1390	NO COMMENT	\N	2014-06-24 14:06:00	2014-06-24 14:06:00
2842	19	1391	NO COMMENT	\N	2014-04-27 00:41:27	2014-04-27 00:41:27
2843	16	1391	NO COMMENT	\N	2014-05-11 23:19:50	2014-05-11 23:19:50
2844	2	1391	NO COMMENT	\N	2014-06-01 12:46:28	2014-06-01 12:46:28
2845	7	1391	NO COMMENT	\N	2014-06-21 04:48:27	2014-06-21 04:48:27
2846	1	1391	NO COMMENT	\N	2014-06-29 05:36:09	2014-06-29 05:36:09
2847	7	1400	NO COMMENT	\N	2014-04-09 07:53:17	2014-04-09 07:53:17
2848	1	1400	NO COMMENT	\N	2014-06-07 20:42:09	2014-06-07 20:42:09
2849	2	1400	NO COMMENT	\N	2014-06-16 14:43:46	2014-06-16 14:43:46
2850	19	1401	NO COMMENT	\N	2014-05-29 16:25:53	2014-05-29 16:25:53
2851	14	1401	NO COMMENT	\N	2014-06-01 06:43:23	2014-06-01 06:43:23
2852	26	1401	NO COMMENT	\N	2014-06-07 17:11:06	2014-06-07 17:11:06
2853	2	1401	NO COMMENT	\N	2014-06-14 23:56:58	2014-06-14 23:56:58
2854	43	1401	NO COMMENT	\N	2014-06-18 11:40:36	2014-06-18 11:40:36
2855	12	1402	NO COMMENT	\N	2014-06-08 03:01:44	2014-06-08 03:01:44
2856	43	1402	NO COMMENT	\N	2014-06-10 03:19:05	2014-06-10 03:19:05
2857	26	1402	NO COMMENT	\N	2014-06-14 21:43:58	2014-06-14 21:43:58
2858	6	1402	NO COMMENT	\N	2014-06-20 23:50:36	2014-06-20 23:50:36
2859	19	1402	NO COMMENT	\N	2014-06-23 09:38:18	2014-06-23 09:38:18
2860	14	1402	NO COMMENT	\N	2014-06-24 11:20:16	2014-06-24 11:20:16
2861	17	1402	NO COMMENT	\N	2014-06-28 17:44:55	2014-06-28 17:44:55
2862	2	1402	NO COMMENT	\N	2014-06-29 20:47:11	2014-06-29 20:47:11
2863	26	1403	NO COMMENT	\N	2014-06-12 20:56:45	2014-06-12 20:56:45
2864	17	1403	NO COMMENT	\N	2014-06-16 06:34:50	2014-06-16 06:34:50
2865	6	1403	NO COMMENT	\N	2014-06-16 09:25:52	2014-06-16 09:25:52
2866	14	1403	NO COMMENT	\N	2014-06-20 12:07:48	2014-06-20 12:07:48
2867	12	1403	NO COMMENT	\N	2014-06-23 05:33:17	2014-06-23 05:33:17
2868	19	1403	NO COMMENT	\N	2014-06-25 07:03:58	2014-06-25 07:03:58
2869	2	1403	NO COMMENT	\N	2014-06-27 11:01:13	2014-06-27 11:01:13
2870	43	1403	NO COMMENT	\N	2014-07-01 01:04:31	2014-07-01 01:04:31
2871	9	1403	NO COMMENT	\N	2014-07-01 14:05:29	2014-07-01 14:05:29
2872	19	1404	NO COMMENT	\N	2014-06-14 23:06:13	2014-06-14 23:06:13
2873	14	1404	NO COMMENT	\N	2014-06-15 22:53:34	2014-06-15 22:53:34
2874	17	1404	NO COMMENT	\N	2014-06-21 06:28:52	2014-06-21 06:28:52
2875	2	1404	NO COMMENT	\N	2014-06-29 02:11:05	2014-06-29 02:11:05
2876	2	1405	NO COMMENT	\N	2014-06-16 11:41:19	2014-06-16 11:41:19
2877	26	1405	NO COMMENT	\N	2014-06-16 13:51:36	2014-06-16 13:51:36
2878	28	1405	NO COMMENT	\N	2014-06-16 21:01:28	2014-06-16 21:01:28
2879	9	1405	NO COMMENT	\N	2014-06-20 22:33:56	2014-06-20 22:33:56
2880	12	1405	NO COMMENT	\N	2014-06-21 14:44:24	2014-06-21 14:44:24
2881	22	1408	NO COMMENT	\N	2014-06-22 03:03:27	2014-06-22 03:03:27
2882	29	1408	NO COMMENT	\N	2014-06-30 00:15:26	2014-06-30 00:15:26
2883	2	1412	NO COMMENT	\N	2014-06-25 06:29:23	2014-06-25 06:29:23
2884	48	1412	NO COMMENT	\N	2014-06-26 01:01:27	2014-06-26 01:01:27
2885	43	1412	NO COMMENT	\N	2014-07-01 11:19:59	2014-07-01 11:19:59
2886	45	1413	NO COMMENT	\N	2014-06-07 18:11:58	2014-06-07 18:11:58
2887	2	1413	NO COMMENT	\N	2014-06-13 15:20:51	2014-06-13 15:20:51
2888	19	1413	NO COMMENT	\N	2014-06-25 16:56:59	2014-06-25 16:56:59
2889	37	1413	NO COMMENT	\N	2014-07-02 03:32:25	2014-07-02 03:32:25
2890	11	1414	NO COMMENT	\N	2014-06-14 23:56:32	2014-06-14 23:56:32
2891	43	1414	NO COMMENT	\N	2014-06-24 09:42:57	2014-06-24 09:42:57
2892	16	1414	NO COMMENT	\N	2014-06-26 17:31:47	2014-06-26 17:31:47
2893	17	1414	NO COMMENT	\N	2014-06-30 14:58:40	2014-06-30 14:58:40
2894	41	1415	NO COMMENT	\N	2014-06-11 01:58:12	2014-06-11 01:58:12
2895	48	1415	NO COMMENT	\N	2014-06-15 02:37:40	2014-06-15 02:37:40
2896	43	1415	NO COMMENT	\N	2014-06-22 06:10:43	2014-06-22 06:10:43
2897	2	1415	NO COMMENT	\N	2014-06-22 22:10:00	2014-06-22 22:10:00
2898	36	1415	NO COMMENT	\N	2014-06-24 17:49:36	2014-06-24 17:49:36
2899	2	1416	NO COMMENT	\N	2014-06-20 19:08:52	2014-06-20 19:08:52
2900	40	1417	NO COMMENT	\N	2014-06-14 20:10:03	2014-06-14 20:10:03
2901	32	1417	NO COMMENT	\N	2014-06-16 00:24:30	2014-06-16 00:24:30
2902	27	1417	NO COMMENT	\N	2014-06-17 19:44:03	2014-06-17 19:44:03
2903	19	1417	NO COMMENT	\N	2014-06-18 05:55:31	2014-06-18 05:55:31
2904	6	1417	NO COMMENT	\N	2014-06-22 16:20:19	2014-06-22 16:20:19
2905	11	1417	NO COMMENT	\N	2014-06-26 11:59:33	2014-06-26 11:59:33
2906	29	1417	NO COMMENT	\N	2014-06-29 12:54:49	2014-06-29 12:54:49
2907	2	1417	NO COMMENT	\N	2014-07-02 17:19:14	2014-07-02 17:19:14
2908	22	1419	NO COMMENT	\N	2014-06-06 20:02:42	2014-06-06 20:02:42
2909	2	1419	NO COMMENT	\N	2014-06-20 21:20:22	2014-06-20 21:20:22
2910	2	1420	NO COMMENT	\N	2014-06-08 12:57:04	2014-06-08 12:57:04
2911	2	1422	NO COMMENT	\N	2014-05-30 03:33:57	2014-05-30 03:33:57
2912	42	1423	NO COMMENT	\N	2014-05-03 23:13:52	2014-05-03 23:13:52
2913	2	1423	NO COMMENT	\N	2014-05-24 06:55:02	2014-05-24 06:55:02
2914	43	1423	NO COMMENT	\N	2014-06-25 05:32:28	2014-06-25 05:32:28
2915	2	1424	NO COMMENT	\N	2014-04-26 19:54:39	2014-04-26 19:54:39
2916	2	1425	NO COMMENT	\N	2014-04-21 03:21:22	2014-04-21 03:21:22
2917	2	1426	NO COMMENT	\N	2014-07-01 16:57:14	2014-07-01 16:57:14
2918	2	1427	NO COMMENT	\N	2014-04-30 01:34:00	2014-04-30 01:34:00
2919	16	1427	NO COMMENT	\N	2014-05-15 02:02:36	2014-05-15 02:02:36
2920	37	1428	NO COMMENT	\N	2014-05-24 19:27:32	2014-05-24 19:27:32
2921	19	1428	NO COMMENT	\N	2014-06-06 17:46:42	2014-06-06 17:46:42
2922	2	1429	NO COMMENT	\N	2014-05-09 17:31:38	2014-05-09 17:31:38
2923	19	1429	NO COMMENT	\N	2014-05-13 20:27:50	2014-05-13 20:27:50
2924	37	1429	NO COMMENT	\N	2014-05-15 16:40:51	2014-05-15 16:40:51
2925	16	1429	NO COMMENT	\N	2014-06-11 06:30:56	2014-06-11 06:30:56
2926	37	1430	NO COMMENT	\N	2014-05-25 18:15:13	2014-05-25 18:15:13
2927	2	1430	NO COMMENT	\N	2014-06-09 07:11:19	2014-06-09 07:11:19
2928	16	1430	NO COMMENT	\N	2014-06-18 14:32:57	2014-06-18 14:32:57
2929	45	1430	NO COMMENT	\N	2014-06-28 13:44:12	2014-06-28 13:44:12
2930	19	1430	NO COMMENT	\N	2014-07-02 15:09:25	2014-07-02 15:09:25
2931	37	1431	NO COMMENT	\N	2014-05-27 20:32:11	2014-05-27 20:32:11
2932	19	1431	NO COMMENT	\N	2014-06-10 08:33:41	2014-06-10 08:33:41
2933	45	1431	NO COMMENT	\N	2014-06-30 22:43:31	2014-06-30 22:43:31
2934	2	1432	NO COMMENT	\N	2014-05-31 23:50:33	2014-05-31 23:50:33
2935	37	1432	NO COMMENT	\N	2014-06-06 07:57:57	2014-06-06 07:57:57
2936	16	1432	NO COMMENT	\N	2014-06-08 02:01:27	2014-06-08 02:01:27
2937	45	1432	NO COMMENT	\N	2014-06-19 01:15:00	2014-06-19 01:15:00
2938	19	1432	NO COMMENT	\N	2014-06-26 04:40:05	2014-06-26 04:40:05
2939	2	1433	NO COMMENT	\N	2014-05-10 16:06:26	2014-05-10 16:06:26
2940	2	1434	NO COMMENT	\N	2014-05-28 04:14:24	2014-05-28 04:14:24
2941	44	1434	NO COMMENT	\N	2014-05-28 18:54:39	2014-05-28 18:54:39
2942	20	1434	NO COMMENT	\N	2014-06-30 14:27:26	2014-06-30 14:27:26
2943	26	1435	NO COMMENT	\N	2014-05-27 02:14:45	2014-05-27 02:14:45
2944	14	1435	NO COMMENT	\N	2014-06-29 20:59:56	2014-06-29 20:59:56
2945	6	1437	NO COMMENT	\N	2014-05-11 03:26:30	2014-05-11 03:26:30
2946	11	1437	NO COMMENT	\N	2014-05-19 10:46:28	2014-05-19 10:46:28
2947	2	1437	NO COMMENT	\N	2014-06-06 13:04:57	2014-06-06 13:04:57
2948	2	1438	NO COMMENT	\N	2014-05-24 05:40:46	2014-05-24 05:40:46
2949	2	1439	NO COMMENT	\N	2014-05-31 08:10:16	2014-05-31 08:10:16
2950	23	1440	NO COMMENT	\N	2014-04-28 08:38:59	2014-04-28 08:38:59
2951	2	1440	NO COMMENT	\N	2014-06-20 16:47:18	2014-06-20 16:47:18
2952	2	1441	NO COMMENT	\N	2014-05-02 13:47:33	2014-05-02 13:47:33
2953	2	1442	NO COMMENT	\N	2014-05-17 23:27:12	2014-05-17 23:27:12
2954	2	1443	NO COMMENT	\N	2014-06-08 14:58:39	2014-06-08 14:58:39
2955	19	1444	NO COMMENT	\N	2014-05-31 12:52:27	2014-05-31 12:52:27
2956	26	1444	NO COMMENT	\N	2014-05-31 19:09:00	2014-05-31 19:09:00
2957	43	1444	NO COMMENT	\N	2014-06-12 12:38:47	2014-06-12 12:38:47
2958	14	1444	NO COMMENT	\N	2014-06-22 16:29:16	2014-06-22 16:29:16
2959	2	1444	NO COMMENT	\N	2014-07-02 19:05:28	2014-07-02 19:05:28
2960	42	1445	NO COMMENT	\N	2014-03-12 12:15:21	2014-03-12 12:15:21
2961	43	1445	NO COMMENT	\N	2014-03-29 03:35:28	2014-03-29 03:35:28
2962	2	1445	NO COMMENT	\N	2014-06-12 22:35:04	2014-06-12 22:35:04
2963	42	1446	NO COMMENT	\N	2014-03-29 03:03:36	2014-03-29 03:03:36
2964	2	1446	NO COMMENT	\N	2014-05-27 12:04:00	2014-05-27 12:04:00
2965	43	1446	NO COMMENT	\N	2014-06-12 22:19:54	2014-06-12 22:19:54
2966	34	1447	NO COMMENT	\N	2014-05-19 04:53:54	2014-05-19 04:53:54
2967	48	1447	NO COMMENT	\N	2014-06-12 10:48:24	2014-06-12 10:48:24
2968	2	1447	NO COMMENT	\N	2014-06-16 19:16:16	2014-06-16 19:16:16
2969	43	1447	NO COMMENT	\N	2014-06-25 09:59:31	2014-06-25 09:59:31
2970	42	1447	NO COMMENT	\N	2014-06-25 14:14:39	2014-06-25 14:14:39
2971	43	1448	NO COMMENT	\N	2014-05-17 23:09:27	2014-05-17 23:09:27
2972	48	1448	NO COMMENT	\N	2014-06-26 21:49:54	2014-06-26 21:49:54
2973	42	1449	NO COMMENT	\N	2014-05-21 12:33:28	2014-05-21 12:33:28
2974	34	1449	NO COMMENT	\N	2014-06-12 17:19:23	2014-06-12 17:19:23
2975	48	1449	NO COMMENT	\N	2014-06-24 15:12:03	2014-06-24 15:12:03
2976	43	1449	NO COMMENT	\N	2014-06-26 04:35:51	2014-06-26 04:35:51
2977	43	1450	NO COMMENT	\N	2014-06-03 18:49:40	2014-06-03 18:49:40
2978	42	1450	NO COMMENT	\N	2014-06-18 13:19:56	2014-06-18 13:19:56
2979	2	1450	NO COMMENT	\N	2014-06-24 21:41:20	2014-06-24 21:41:20
2980	34	1450	NO COMMENT	\N	2014-07-01 13:42:36	2014-07-01 13:42:36
2981	48	1450	NO COMMENT	\N	2014-07-01 21:22:34	2014-07-01 21:22:34
2982	34	1451	NO COMMENT	\N	2014-06-13 18:15:18	2014-06-13 18:15:18
2983	2	1451	NO COMMENT	\N	2014-06-18 10:35:11	2014-06-18 10:35:11
2984	9	1451	NO COMMENT	\N	2014-06-20 15:08:58	2014-06-20 15:08:58
2985	43	1451	NO COMMENT	\N	2014-06-21 13:33:30	2014-06-21 13:33:30
2986	48	1451	NO COMMENT	\N	2014-06-21 19:31:18	2014-06-21 19:31:18
2987	5	1451	NO COMMENT	\N	2014-06-28 07:05:28	2014-06-28 07:05:28
2988	42	1451	NO COMMENT	\N	2014-06-29 01:48:55	2014-06-29 01:48:55
2989	48	1452	NO COMMENT	\N	2014-06-20 21:16:54	2014-06-20 21:16:54
2990	9	1452	NO COMMENT	\N	2014-06-25 12:55:54	2014-06-25 12:55:54
2991	5	1452	NO COMMENT	\N	2014-07-01 03:51:02	2014-07-01 03:51:02
2992	2	1453	NO COMMENT	\N	2014-03-28 09:55:06	2014-03-28 09:55:06
2993	2	1454	NO COMMENT	\N	2014-06-28 00:00:29	2014-06-28 00:00:29
2994	2	1455	NO COMMENT	\N	2014-06-25 20:48:42	2014-06-25 20:48:42
2995	2	1456	NO COMMENT	\N	2014-07-01 07:53:56	2014-07-01 07:53:56
2996	2	1457	NO COMMENT	\N	2014-06-09 15:14:20	2014-06-09 15:14:20
2997	2	1460	NO COMMENT	\N	2014-06-02 19:22:55	2014-06-02 19:22:55
2998	2	1461	NO COMMENT	\N	2014-06-13 13:44:34	2014-06-13 13:44:34
2999	2	1464	NO COMMENT	\N	2014-06-29 21:19:55	2014-06-29 21:19:55
3000	2	1465	NO COMMENT	\N	2014-05-18 07:19:27	2014-05-18 07:19:27
3001	37	1465	NO COMMENT	\N	2014-05-26 06:21:47	2014-05-26 06:21:47
3002	16	1465	NO COMMENT	\N	2014-05-31 05:57:51	2014-05-31 05:57:51
3003	19	1465	NO COMMENT	\N	2014-06-21 04:06:34	2014-06-21 04:06:34
3004	45	1465	NO COMMENT	\N	2014-07-02 10:27:01	2014-07-02 10:27:01
3005	2	1466	NO COMMENT	\N	2014-05-13 10:50:12	2014-05-13 10:50:12
3006	2	1467	NO COMMENT	\N	2014-04-23 23:08:17	2014-04-23 23:08:17
3007	27	1468	NO COMMENT	\N	2014-04-23 10:59:25	2014-04-23 10:59:25
3008	2	1468	NO COMMENT	\N	2014-04-27 03:03:12	2014-04-27 03:03:12
3009	48	1468	NO COMMENT	\N	2014-06-11 16:06:43	2014-06-11 16:06:43
3010	2	1470	NO COMMENT	\N	2014-06-28 17:14:31	2014-06-28 17:14:31
3011	37	1473	NO COMMENT	\N	2014-05-26 04:09:20	2014-05-26 04:09:20
3012	37	1474	NO COMMENT	\N	2014-06-05 20:31:43	2014-06-05 20:31:43
3013	2	1474	NO COMMENT	\N	2014-06-22 23:06:03	2014-06-22 23:06:03
3014	6	1475	NO COMMENT	\N	2014-05-19 12:38:36	2014-05-19 12:38:36
3015	6	1476	NO COMMENT	\N	2014-06-02 18:18:50	2014-06-02 18:18:50
3016	11	1476	NO COMMENT	\N	2014-06-24 12:19:45	2014-06-24 12:19:45
3017	2	1476	NO COMMENT	\N	2014-06-30 14:45:04	2014-06-30 14:45:04
3018	2	1477	NO COMMENT	\N	2014-06-06 20:01:44	2014-06-06 20:01:44
3019	26	1477	NO COMMENT	\N	2014-06-27 23:14:29	2014-06-27 23:14:29
3020	19	1478	NO COMMENT	\N	2014-05-15 03:40:28	2014-05-15 03:40:28
3021	14	1478	NO COMMENT	\N	2014-05-20 01:11:48	2014-05-20 01:11:48
3022	2	1478	NO COMMENT	\N	2014-06-25 05:25:20	2014-06-25 05:25:20
3023	26	1479	NO COMMENT	\N	2014-05-24 18:57:02	2014-05-24 18:57:02
3024	14	1479	NO COMMENT	\N	2014-05-30 13:58:24	2014-05-30 13:58:24
3025	2	1479	NO COMMENT	\N	2014-06-04 07:17:58	2014-06-04 07:17:58
3026	43	1479	NO COMMENT	\N	2014-06-06 09:29:39	2014-06-06 09:29:39
3027	19	1479	NO COMMENT	\N	2014-06-25 05:41:51	2014-06-25 05:41:51
3028	14	1480	NO COMMENT	\N	2014-06-18 12:36:30	2014-06-18 12:36:30
3029	9	1481	NO COMMENT	\N	2014-06-07 16:58:33	2014-06-07 16:58:33
3030	43	1481	NO COMMENT	\N	2014-06-12 06:25:23	2014-06-12 06:25:23
3031	19	1481	NO COMMENT	\N	2014-06-15 21:36:30	2014-06-15 21:36:30
3032	26	1481	NO COMMENT	\N	2014-06-21 06:29:24	2014-06-21 06:29:24
3033	17	1481	NO COMMENT	\N	2014-06-24 06:16:41	2014-06-24 06:16:41
3034	2	1482	NO COMMENT	\N	2014-06-22 15:07:00	2014-06-22 15:07:00
3035	6	1482	NO COMMENT	\N	2014-06-23 03:07:07	2014-06-23 03:07:07
3036	34	1482	NO COMMENT	\N	2014-06-23 13:13:02	2014-06-23 13:13:02
3037	26	1482	NO COMMENT	\N	2014-06-24 01:56:16	2014-06-24 01:56:16
3038	2	1483	NO COMMENT	\N	2014-06-15 13:41:43	2014-06-15 13:41:43
3039	31	1483	NO COMMENT	\N	2014-06-24 20:56:57	2014-06-24 20:56:57
3040	2	1484	NO COMMENT	\N	2014-06-17 23:36:15	2014-06-17 23:36:15
3041	31	1484	NO COMMENT	\N	2014-06-23 15:14:54	2014-06-23 15:14:54
3042	6	1484	NO COMMENT	\N	2014-06-30 23:32:51	2014-06-30 23:32:51
3043	25	1485	NO COMMENT	\N	2014-06-16 06:48:11	2014-06-16 06:48:11
3044	6	1485	NO COMMENT	\N	2014-06-20 12:59:29	2014-06-20 12:59:29
3045	48	1486	NO COMMENT	\N	2014-06-03 06:46:02	2014-06-03 06:46:02
3046	2	1486	NO COMMENT	\N	2014-06-05 16:10:23	2014-06-05 16:10:23
3047	27	1486	NO COMMENT	\N	2014-06-26 22:05:59	2014-06-26 22:05:59
3048	29	1486	NO COMMENT	\N	2014-06-28 06:04:53	2014-06-28 06:04:53
3049	16	1487	NO COMMENT	\N	2014-06-16 04:10:34	2014-06-16 04:10:34
3050	45	1487	NO COMMENT	\N	2014-06-18 12:55:26	2014-06-18 12:55:26
3051	20	1487	NO COMMENT	\N	2014-06-30 14:02:30	2014-06-30 14:02:30
3052	43	1487	NO COMMENT	\N	2014-06-30 16:07:35	2014-06-30 16:07:35
3053	23	1489	NO COMMENT	\N	2014-06-18 15:11:29	2014-06-18 15:11:29
3054	2	1491	NO COMMENT	\N	2014-06-24 10:31:26	2014-06-24 10:31:26
3055	2	1493	NO COMMENT	\N	2014-06-30 22:26:55	2014-06-30 22:26:55
3056	42	1495	NO COMMENT	\N	2014-06-16 01:54:56	2014-06-16 01:54:56
3057	29	1495	NO COMMENT	\N	2014-06-16 22:03:48	2014-06-16 22:03:48
3058	22	1495	NO COMMENT	\N	2014-06-17 02:20:59	2014-06-17 02:20:59
3059	2	1495	NO COMMENT	\N	2014-06-21 11:39:39	2014-06-21 11:39:39
3060	27	1497	NO COMMENT	\N	2014-05-13 01:20:50	2014-05-13 01:20:50
3061	48	1497	NO COMMENT	\N	2014-06-01 07:54:15	2014-06-01 07:54:15
3062	1	1497	NO COMMENT	\N	2014-06-07 08:27:18	2014-06-07 08:27:18
3063	29	1497	NO COMMENT	\N	2014-06-13 21:48:36	2014-06-13 21:48:36
3064	7	1497	NO COMMENT	\N	2014-06-21 14:13:50	2014-06-21 14:13:50
3065	2	1497	NO COMMENT	\N	2014-06-27 15:42:26	2014-06-27 15:42:26
3066	2	1565	NO COMMENT	\N	2014-06-30 01:36:38	2014-06-30 01:36:38
3067	1	1500	NO COMMENT	\N	2014-05-18 21:51:51	2014-05-18 21:51:51
3068	7	1500	NO COMMENT	\N	2014-05-27 23:44:18	2014-05-27 23:44:18
3069	19	1500	NO COMMENT	\N	2014-06-27 04:47:53	2014-06-27 04:47:53
3070	19	1501	NO COMMENT	\N	2014-06-04 01:03:56	2014-06-04 01:03:56
3071	7	1501	NO COMMENT	\N	2014-06-08 18:56:30	2014-06-08 18:56:30
3072	26	1501	NO COMMENT	\N	2014-06-09 01:03:35	2014-06-09 01:03:35
3073	2	1501	NO COMMENT	\N	2014-06-09 13:53:15	2014-06-09 13:53:15
3074	14	1501	NO COMMENT	\N	2014-06-25 05:03:01	2014-06-25 05:03:01
3075	1	1501	NO COMMENT	\N	2014-06-27 21:47:40	2014-06-27 21:47:40
3076	43	1501	NO COMMENT	\N	2014-06-28 16:18:09	2014-06-28 16:18:09
3077	2	1502	NO COMMENT	\N	2014-07-01 21:03:25	2014-07-01 21:03:25
3078	7	1503	NO COMMENT	\N	2014-06-01 11:04:36	2014-06-01 11:04:36
3079	43	1503	NO COMMENT	\N	2014-06-09 10:12:37	2014-06-09 10:12:37
3080	2	1504	NO COMMENT	\N	2014-06-03 11:33:18	2014-06-03 11:33:18
3081	9	1504	NO COMMENT	\N	2014-06-04 18:09:34	2014-06-04 18:09:34
3082	14	1504	NO COMMENT	\N	2014-06-05 05:49:52	2014-06-05 05:49:52
3083	43	1504	NO COMMENT	\N	2014-06-11 11:42:15	2014-06-11 11:42:15
3084	26	1504	NO COMMENT	\N	2014-06-11 22:45:19	2014-06-11 22:45:19
3085	7	1504	NO COMMENT	\N	2014-06-13 11:10:15	2014-06-13 11:10:15
3086	6	1504	NO COMMENT	\N	2014-06-15 05:18:58	2014-06-15 05:18:58
3087	17	1504	NO COMMENT	\N	2014-06-16 00:59:52	2014-06-16 00:59:52
3088	19	1504	NO COMMENT	\N	2014-06-17 08:52:37	2014-06-17 08:52:37
3089	26	1505	NO COMMENT	\N	2014-06-21 16:37:56	2014-06-21 16:37:56
3090	17	1506	NO COMMENT	\N	2014-06-15 15:00:15	2014-06-15 15:00:15
3091	9	1506	NO COMMENT	\N	2014-06-16 10:16:58	2014-06-16 10:16:58
3092	6	1506	NO COMMENT	\N	2014-06-17 20:38:34	2014-06-17 20:38:34
3093	2	1506	NO COMMENT	\N	2014-06-26 12:00:31	2014-06-26 12:00:31
3094	26	1506	NO COMMENT	\N	2014-06-30 14:01:56	2014-06-30 14:01:56
3095	14	1506	NO COMMENT	\N	2014-07-01 23:49:37	2014-07-01 23:49:37
3096	37	1508	NO COMMENT	\N	2014-06-21 09:40:39	2014-06-21 09:40:39
3097	19	1509	NO COMMENT	\N	2014-05-21 18:38:47	2014-05-21 18:38:47
3098	16	1509	NO COMMENT	\N	2014-05-28 10:59:04	2014-05-28 10:59:04
3099	45	1509	NO COMMENT	\N	2014-06-03 21:43:50	2014-06-03 21:43:50
3100	1	1509	NO COMMENT	\N	2014-06-09 23:57:36	2014-06-09 23:57:36
3101	2	1509	NO COMMENT	\N	2014-06-11 07:11:46	2014-06-11 07:11:46
3102	7	1509	NO COMMENT	\N	2014-06-18 18:54:13	2014-06-18 18:54:13
3103	37	1509	NO COMMENT	\N	2014-06-30 06:19:37	2014-06-30 06:19:37
3104	45	1510	NO COMMENT	\N	2014-06-04 03:51:51	2014-06-04 03:51:51
3105	19	1510	NO COMMENT	\N	2014-06-08 13:19:34	2014-06-08 13:19:34
3106	7	1510	NO COMMENT	\N	2014-06-17 12:49:48	2014-06-17 12:49:48
3107	1	1510	NO COMMENT	\N	2014-06-19 20:34:01	2014-06-19 20:34:01
3108	2	1510	NO COMMENT	\N	2014-06-24 02:40:01	2014-06-24 02:40:01
3109	20	1511	NO COMMENT	\N	2014-06-13 09:08:44	2014-06-13 09:08:44
3110	7	1511	NO COMMENT	\N	2014-06-13 23:29:23	2014-06-13 23:29:23
3111	16	1511	NO COMMENT	\N	2014-06-15 08:58:17	2014-06-15 08:58:17
3112	29	1511	NO COMMENT	\N	2014-06-16 18:08:33	2014-06-16 18:08:33
3113	43	1511	NO COMMENT	\N	2014-06-17 11:14:01	2014-06-17 11:14:01
3114	19	1511	NO COMMENT	\N	2014-06-17 21:47:42	2014-06-17 21:47:42
3115	45	1511	NO COMMENT	\N	2014-06-18 10:58:55	2014-06-18 10:58:55
3116	11	1511	NO COMMENT	\N	2014-06-19 00:47:48	2014-06-19 00:47:48
3117	31	1511	NO COMMENT	\N	2014-06-19 13:01:16	2014-06-19 13:01:16
3118	37	1511	NO COMMENT	\N	2014-06-20 11:42:20	2014-06-20 11:42:20
3119	12	1511	NO COMMENT	\N	2014-06-23 07:00:57	2014-06-23 07:00:57
3120	2	1511	NO COMMENT	\N	2014-06-27 08:10:05	2014-06-27 08:10:05
3121	1	1511	NO COMMENT	\N	2014-06-29 10:02:59	2014-06-29 10:02:59
3122	17	1511	NO COMMENT	\N	2014-06-29 22:56:25	2014-06-29 22:56:25
3123	25	1511	NO COMMENT	\N	2014-06-30 21:08:37	2014-06-30 21:08:37
3124	25	1512	NO COMMENT	\N	2014-06-16 08:28:57	2014-06-16 08:28:57
3125	31	1512	NO COMMENT	\N	2014-07-02 18:47:22	2014-07-02 18:47:22
3126	2	1513	NO COMMENT	\N	2014-06-22 21:30:26	2014-06-22 21:30:26
3127	1	1514	NO COMMENT	\N	2014-05-23 14:38:44	2014-05-23 14:38:44
3128	7	1514	NO COMMENT	\N	2014-06-01 16:03:31	2014-06-01 16:03:31
3129	2	1514	NO COMMENT	\N	2014-06-11 06:51:56	2014-06-11 06:51:56
3130	36	1516	NO COMMENT	\N	2014-06-09 01:59:43	2014-06-09 01:59:43
3131	31	1516	NO COMMENT	\N	2014-06-10 19:48:10	2014-06-10 19:48:10
3132	7	1516	NO COMMENT	\N	2014-06-10 23:00:19	2014-06-10 23:00:19
3133	2	1516	NO COMMENT	\N	2014-06-15 07:26:59	2014-06-15 07:26:59
3134	1	1516	NO COMMENT	\N	2014-06-30 06:50:07	2014-06-30 06:50:07
3135	1	1517	NO COMMENT	\N	2014-05-11 00:04:17	2014-05-11 00:04:17
3136	7	1517	NO COMMENT	\N	2014-05-24 09:57:06	2014-05-24 09:57:06
3137	2	1517	NO COMMENT	\N	2014-05-30 08:12:53	2014-05-30 08:12:53
3138	29	1517	NO COMMENT	\N	2014-06-24 20:43:12	2014-06-24 20:43:12
3139	22	1517	NO COMMENT	\N	2014-06-29 08:20:13	2014-06-29 08:20:13
3140	22	1520	NO COMMENT	\N	2014-06-13 08:16:35	2014-06-13 08:16:35
3141	7	1520	NO COMMENT	\N	2014-06-19 00:31:14	2014-06-19 00:31:14
3142	27	1520	NO COMMENT	\N	2014-06-19 11:24:47	2014-06-19 11:24:47
3143	39	1520	NO COMMENT	\N	2014-06-20 13:50:46	2014-06-20 13:50:46
3144	42	1520	NO COMMENT	\N	2014-06-22 09:17:32	2014-06-22 09:17:32
3145	29	1520	NO COMMENT	\N	2014-06-29 06:07:58	2014-06-29 06:07:58
3146	2	1520	NO COMMENT	\N	2014-06-29 23:26:37	2014-06-29 23:26:37
3147	1	1520	NO COMMENT	\N	2014-07-02 15:28:05	2014-07-02 15:28:05
3148	27	1521	NO COMMENT	\N	2014-06-15 15:29:31	2014-06-15 15:29:31
3149	29	1522	NO COMMENT	\N	2014-06-23 15:12:44	2014-06-23 15:12:44
3150	39	1522	NO COMMENT	\N	2014-06-24 11:27:02	2014-06-24 11:27:02
3151	10	1522	NO COMMENT	\N	2014-06-30 14:46:06	2014-06-30 14:46:06
3152	27	1522	NO COMMENT	\N	2014-07-01 14:15:14	2014-07-01 14:15:14
3153	7	1523	NO COMMENT	\N	2014-05-30 15:17:48	2014-05-30 15:17:48
3154	1	1523	NO COMMENT	\N	2014-06-13 05:32:26	2014-06-13 05:32:26
3155	2	1523	NO COMMENT	\N	2014-06-15 12:52:46	2014-06-15 12:52:46
3156	22	1523	NO COMMENT	\N	2014-06-27 02:09:06	2014-06-27 02:09:06
3157	2	1524	NO COMMENT	\N	2014-05-30 11:48:00	2014-05-30 11:48:00
3158	1	1524	NO COMMENT	\N	2014-06-01 07:29:44	2014-06-01 07:29:44
3159	7	1524	NO COMMENT	\N	2014-06-25 15:17:46	2014-06-25 15:17:46
3160	20	1525	NO COMMENT	\N	2014-06-28 22:07:50	2014-06-28 22:07:50
3161	44	1525	NO COMMENT	\N	2014-06-30 16:36:31	2014-06-30 16:36:31
3162	41	1525	NO COMMENT	\N	2014-06-30 19:02:38	2014-06-30 19:02:38
3163	11	1525	NO COMMENT	\N	2014-07-01 04:43:50	2014-07-01 04:43:50
3164	2	1525	NO COMMENT	\N	2014-07-02 15:26:17	2014-07-02 15:26:17
3165	10	1526	NO COMMENT	\N	2014-06-23 18:24:59	2014-06-23 18:24:59
3166	40	1526	NO COMMENT	\N	2014-06-27 21:04:26	2014-06-27 21:04:26
3167	41	1526	NO COMMENT	\N	2014-06-28 21:18:19	2014-06-28 21:18:19
3168	36	1528	NO COMMENT	\N	2014-07-01 21:53:03	2014-07-01 21:53:03
3169	2	1528	NO COMMENT	\N	2014-07-02 08:39:36	2014-07-02 08:39:36
3170	24	1529	NO COMMENT	\N	2014-07-02 19:24:32	2014-07-02 19:24:32
3171	24	1530	NO COMMENT	\N	2014-06-20 21:37:44	2014-06-20 21:37:44
3172	34	1530	NO COMMENT	\N	2014-06-22 04:31:16	2014-06-22 04:31:16
3173	2	1531	NO COMMENT	\N	2014-07-02 13:13:06	2014-07-02 13:13:06
3174	2	1532	NO COMMENT	\N	2014-06-30 09:23:09	2014-06-30 09:23:09
3175	23	1533	NO COMMENT	\N	2014-06-29 15:16:39	2014-06-29 15:16:39
3176	2	1533	NO COMMENT	\N	2014-06-29 17:22:48	2014-06-29 17:22:48
3177	34	1533	NO COMMENT	\N	2014-06-30 07:09:41	2014-06-30 07:09:41
3178	26	1533	NO COMMENT	\N	2014-06-30 19:30:55	2014-06-30 19:30:55
3179	36	1533	NO COMMENT	\N	2014-07-02 00:02:05	2014-07-02 00:02:05
3180	22	1534	NO COMMENT	\N	2014-06-12 13:33:26	2014-06-12 13:33:26
3181	47	1536	NO COMMENT	\N	2014-06-19 02:11:24	2014-06-19 02:11:24
3182	2	1536	NO COMMENT	\N	2014-07-01 18:45:35	2014-07-01 18:45:35
3183	45	1537	NO COMMENT	\N	2014-06-12 23:17:36	2014-06-12 23:17:36
3184	37	1537	NO COMMENT	\N	2014-06-23 04:19:35	2014-06-23 04:19:35
3185	43	1537	NO COMMENT	\N	2014-06-24 00:48:10	2014-06-24 00:48:10
3186	12	1537	NO COMMENT	\N	2014-06-25 15:01:52	2014-06-25 15:01:52
3187	17	1537	NO COMMENT	\N	2014-06-26 08:02:40	2014-06-26 08:02:40
3188	19	1537	NO COMMENT	\N	2014-06-28 19:07:12	2014-06-28 19:07:12
3189	20	1538	NO COMMENT	\N	2014-06-20 00:20:33	2014-06-20 00:20:33
3190	2	1538	NO COMMENT	\N	2014-06-20 22:38:26	2014-06-20 22:38:26
3191	9	1538	NO COMMENT	\N	2014-06-21 04:45:27	2014-06-21 04:45:27
3192	29	1538	NO COMMENT	\N	2014-06-21 18:01:47	2014-06-21 18:01:47
3193	43	1538	NO COMMENT	\N	2014-06-22 11:34:01	2014-06-22 11:34:01
3194	19	1538	NO COMMENT	\N	2014-06-23 09:00:14	2014-06-23 09:00:14
3195	31	1538	NO COMMENT	\N	2014-06-23 16:48:22	2014-06-23 16:48:22
3196	16	1538	NO COMMENT	\N	2014-06-23 20:59:07	2014-06-23 20:59:07
3197	35	1538	NO COMMENT	\N	2014-06-24 10:47:24	2014-06-24 10:47:24
3198	6	1538	NO COMMENT	\N	2014-06-27 21:01:39	2014-06-27 21:01:39
3199	45	1538	NO COMMENT	\N	2014-06-27 23:57:37	2014-06-27 23:57:37
3200	26	1538	NO COMMENT	\N	2014-06-28 11:55:39	2014-06-28 11:55:39
3201	25	1538	NO COMMENT	\N	2014-06-29 01:02:49	2014-06-29 01:02:49
3202	17	1538	NO COMMENT	\N	2014-06-30 04:15:48	2014-06-30 04:15:48
3203	11	1538	NO COMMENT	\N	2014-06-30 11:58:35	2014-06-30 11:58:35
3204	37	1538	NO COMMENT	\N	2014-07-01 11:21:43	2014-07-01 11:21:43
3205	12	1538	NO COMMENT	\N	2014-07-01 20:46:38	2014-07-01 20:46:38
3206	20	1539	NO COMMENT	\N	2014-06-20 12:24:07	2014-06-20 12:24:07
3207	17	1539	NO COMMENT	\N	2014-06-20 16:56:17	2014-06-20 16:56:17
3208	12	1539	NO COMMENT	\N	2014-06-22 12:32:45	2014-06-22 12:32:45
3209	16	1539	NO COMMENT	\N	2014-06-24 12:19:11	2014-06-24 12:19:11
3210	2	1539	NO COMMENT	\N	2014-06-24 12:53:25	2014-06-24 12:53:25
3211	31	1539	NO COMMENT	\N	2014-06-24 13:03:56	2014-06-24 13:03:56
3212	6	1539	NO COMMENT	\N	2014-06-26 08:52:02	2014-06-26 08:52:02
3213	9	1539	NO COMMENT	\N	2014-06-26 20:24:38	2014-06-26 20:24:38
3214	43	1539	NO COMMENT	\N	2014-06-26 23:02:35	2014-06-26 23:02:35
3215	45	1539	NO COMMENT	\N	2014-06-27 05:54:18	2014-06-27 05:54:18
3216	25	1539	NO COMMENT	\N	2014-06-28 05:36:49	2014-06-28 05:36:49
3217	37	1539	NO COMMENT	\N	2014-06-28 18:34:06	2014-06-28 18:34:06
3218	11	1539	NO COMMENT	\N	2014-06-29 11:23:42	2014-06-29 11:23:42
3219	19	1539	NO COMMENT	\N	2014-06-30 03:33:38	2014-06-30 03:33:38
3220	40	1539	NO COMMENT	\N	2014-06-30 19:58:51	2014-06-30 19:58:51
3221	35	1539	NO COMMENT	\N	2014-07-01 05:11:07	2014-07-01 05:11:07
3222	29	1539	NO COMMENT	\N	2014-07-01 23:27:45	2014-07-01 23:27:45
3223	26	1539	NO COMMENT	\N	2014-07-02 12:32:29	2014-07-02 12:32:29
3224	20	1540	NO COMMENT	\N	2014-06-21 18:45:21	2014-06-21 18:45:21
3225	40	1540	NO COMMENT	\N	2014-06-23 19:23:51	2014-06-23 19:23:51
3226	25	1540	NO COMMENT	\N	2014-06-29 06:23:53	2014-06-29 06:23:53
3227	11	1540	NO COMMENT	\N	2014-07-02 17:45:01	2014-07-02 17:45:01
3228	11	1541	NO COMMENT	\N	2014-06-22 20:31:06	2014-06-22 20:31:06
3229	37	1541	NO COMMENT	\N	2014-06-24 02:46:36	2014-06-24 02:46:36
3230	20	1541	NO COMMENT	\N	2014-06-26 05:32:14	2014-06-26 05:32:14
3231	26	1541	NO COMMENT	\N	2014-06-27 11:45:36	2014-06-27 11:45:36
3232	9	1541	NO COMMENT	\N	2014-07-02 02:17:40	2014-07-02 02:17:40
3233	45	1542	NO COMMENT	\N	2014-06-28 04:09:55	2014-06-28 04:09:55
3234	37	1542	NO COMMENT	\N	2014-06-28 08:56:24	2014-06-28 08:56:24
3235	2	1542	NO COMMENT	\N	2014-07-01 05:54:41	2014-07-01 05:54:41
3236	11	1543	NO COMMENT	\N	2014-06-28 18:03:37	2014-06-28 18:03:37
3237	48	1543	NO COMMENT	\N	2014-06-29 15:31:09	2014-06-29 15:31:09
3238	24	1543	NO COMMENT	\N	2014-06-29 23:04:00	2014-06-29 23:04:00
3239	23	1543	NO COMMENT	\N	2014-06-30 11:50:19	2014-06-30 11:50:19
3240	25	1543	NO COMMENT	\N	2014-07-01 05:48:16	2014-07-01 05:48:16
3241	43	1543	NO COMMENT	\N	2014-07-02 07:00:55	2014-07-02 07:00:55
3242	40	1543	NO COMMENT	\N	2014-07-02 08:19:40	2014-07-02 08:19:40
3243	31	1543	NO COMMENT	\N	2014-07-02 08:31:47	2014-07-02 08:31:47
3244	25	1544	NO COMMENT	\N	2014-06-30 13:34:55	2014-06-30 13:34:55
3245	23	1544	NO COMMENT	\N	2014-07-01 05:33:59	2014-07-01 05:33:59
3246	2	1544	NO COMMENT	\N	2014-07-01 09:25:28	2014-07-01 09:25:28
3247	37	1544	NO COMMENT	\N	2014-07-02 19:48:49	2014-07-02 19:48:49
3248	2	1546	NO COMMENT	\N	2014-06-21 09:24:42	2014-06-21 09:24:42
3249	42	1548	NO COMMENT	\N	2014-06-22 15:46:28	2014-06-22 15:46:28
3250	42	1549	NO COMMENT	\N	2014-06-17 04:32:13	2014-06-17 04:32:13
3251	39	1549	NO COMMENT	\N	2014-06-22 22:29:28	2014-06-22 22:29:28
3252	2	1549	NO COMMENT	\N	2014-06-29 16:40:21	2014-06-29 16:40:21
3253	27	1550	NO COMMENT	\N	2014-06-16 18:01:37	2014-06-16 18:01:37
3254	22	1550	NO COMMENT	\N	2014-06-23 13:21:19	2014-06-23 13:21:19
3255	2	1550	NO COMMENT	\N	2014-06-24 14:39:59	2014-06-24 14:39:59
3256	29	1550	NO COMMENT	\N	2014-06-27 09:18:32	2014-06-27 09:18:32
3257	39	1550	NO COMMENT	\N	2014-06-30 18:44:28	2014-06-30 18:44:28
3258	27	1551	NO COMMENT	\N	2014-06-17 20:29:16	2014-06-17 20:29:16
3259	42	1551	NO COMMENT	\N	2014-06-23 19:15:20	2014-06-23 19:15:20
3260	22	1551	NO COMMENT	\N	2014-06-24 04:06:27	2014-06-24 04:06:27
3261	39	1551	NO COMMENT	\N	2014-06-25 08:18:58	2014-06-25 08:18:58
3262	47	1551	NO COMMENT	\N	2014-06-25 15:01:43	2014-06-25 15:01:43
3263	29	1552	NO COMMENT	\N	2014-06-28 03:25:14	2014-06-28 03:25:14
3264	39	1552	NO COMMENT	\N	2014-06-29 03:32:28	2014-06-29 03:32:28
3265	22	1552	NO COMMENT	\N	2014-06-29 23:13:38	2014-06-29 23:13:38
3266	22	1553	NO COMMENT	\N	2014-06-20 20:14:00	2014-06-20 20:14:00
3267	27	1553	NO COMMENT	\N	2014-06-21 21:04:02	2014-06-21 21:04:02
3268	39	1553	NO COMMENT	\N	2014-06-23 08:27:11	2014-06-23 08:27:11
3269	47	1553	NO COMMENT	\N	2014-06-24 02:34:58	2014-06-24 02:34:58
3270	2	1553	NO COMMENT	\N	2014-06-26 16:40:43	2014-06-26 16:40:43
3271	29	1553	NO COMMENT	\N	2014-06-28 16:38:41	2014-06-28 16:38:41
3272	42	1553	NO COMMENT	\N	2014-06-29 08:42:40	2014-06-29 08:42:40
3273	2	1554	NO COMMENT	\N	2014-06-27 16:54:50	2014-06-27 16:54:50
3274	47	1555	NO COMMENT	\N	2014-06-29 00:53:33	2014-06-29 00:53:33
3275	29	1555	NO COMMENT	\N	2014-06-29 14:24:37	2014-06-29 14:24:37
3276	2	1555	NO COMMENT	\N	2014-06-29 22:16:30	2014-06-29 22:16:30
3277	22	1555	NO COMMENT	\N	2014-06-30 15:45:44	2014-06-30 15:45:44
3278	27	1555	NO COMMENT	\N	2014-06-30 21:42:43	2014-06-30 21:42:43
3279	42	1555	NO COMMENT	\N	2014-07-01 00:54:08	2014-07-01 00:54:08
3280	10	1555	NO COMMENT	\N	2014-07-01 17:26:09	2014-07-01 17:26:09
3281	39	1555	NO COMMENT	\N	2014-07-01 18:07:24	2014-07-01 18:07:24
3282	45	1555	NO COMMENT	\N	2014-07-02 07:32:38	2014-07-02 07:32:38
3283	29	1556	NO COMMENT	\N	2014-07-01 04:07:02	2014-07-01 04:07:02
3284	2	1557	NO COMMENT	\N	2014-05-28 03:55:55	2014-05-28 03:55:55
3285	2	1558	NO COMMENT	\N	2014-06-11 05:21:30	2014-06-11 05:21:30
3286	2	1559	NO COMMENT	\N	2014-07-02 16:35:39	2014-07-02 16:35:39
3287	2	1560	NO COMMENT	\N	2014-05-16 20:54:32	2014-05-16 20:54:32
3288	34	1560	NO COMMENT	\N	2014-06-13 17:53:14	2014-06-13 17:53:14
3289	23	1560	NO COMMENT	\N	2014-06-30 05:38:02	2014-06-30 05:38:02
3290	2	1561	NO COMMENT	\N	2014-06-02 21:21:54	2014-06-02 21:21:54
3291	2	1562	NO COMMENT	\N	2014-05-17 18:25:16	2014-05-17 18:25:16
3292	2	1563	NO COMMENT	\N	2014-06-09 17:50:28	2014-06-09 17:50:28
3293	14	1566	NO COMMENT	\N	2014-05-12 10:33:24	2014-05-12 10:33:24
3294	22	1569	NO COMMENT	\N	2014-06-18 01:46:03	2014-06-18 01:46:03
3295	43	1569	NO COMMENT	\N	2014-06-21 19:30:28	2014-06-21 19:30:28
3296	26	1569	NO COMMENT	\N	2014-06-25 14:55:59	2014-06-25 14:55:59
3297	19	1569	NO COMMENT	\N	2014-06-26 13:44:58	2014-06-26 13:44:58
3298	17	1569	NO COMMENT	\N	2014-06-27 05:49:24	2014-06-27 05:49:24
3299	12	1569	NO COMMENT	\N	2014-06-27 16:56:17	2014-06-27 16:56:17
3300	9	1569	NO COMMENT	\N	2014-06-28 02:05:21	2014-06-28 02:05:21
3301	2	1569	NO COMMENT	\N	2014-06-30 11:38:55	2014-06-30 11:38:55
3302	16	1570	NO COMMENT	\N	2014-05-08 01:30:20	2014-05-08 01:30:20
3303	37	1570	NO COMMENT	\N	2014-05-10 14:38:42	2014-05-10 14:38:42
3304	19	1570	NO COMMENT	\N	2014-05-25 20:43:16	2014-05-25 20:43:16
3305	2	1570	NO COMMENT	\N	2014-06-07 13:27:15	2014-06-07 13:27:15
3306	16	1571	NO COMMENT	\N	2014-06-04 00:04:12	2014-06-04 00:04:12
3307	45	1572	NO COMMENT	\N	2014-06-09 17:09:01	2014-06-09 17:09:01
3308	19	1572	NO COMMENT	\N	2014-06-15 17:54:06	2014-06-15 17:54:06
3309	2	1572	NO COMMENT	\N	2014-06-21 00:30:53	2014-06-21 00:30:53
3310	37	1572	NO COMMENT	\N	2014-06-23 01:22:35	2014-06-23 01:22:35
3311	16	1572	NO COMMENT	\N	2014-06-30 20:03:53	2014-06-30 20:03:53
3312	43	1573	NO COMMENT	\N	2014-05-26 10:44:42	2014-05-26 10:44:42
3313	2	1573	NO COMMENT	\N	2014-06-03 12:00:52	2014-06-03 12:00:52
3314	42	1573	NO COMMENT	\N	2014-06-17 12:59:53	2014-06-17 12:59:53
3315	48	1573	NO COMMENT	\N	2014-06-18 23:49:22	2014-06-18 23:49:22
3316	34	1573	NO COMMENT	\N	2014-06-26 15:02:46	2014-06-26 15:02:46
3317	2	1574	NO COMMENT	\N	2014-06-12 10:55:10	2014-06-12 10:55:10
3318	2	1577	NO COMMENT	\N	2014-06-24 19:45:10	2014-06-24 19:45:10
3319	23	1579	NO COMMENT	\N	2014-06-01 13:50:58	2014-06-01 13:50:58
3320	31	1579	NO COMMENT	\N	2014-06-05 08:56:22	2014-06-05 08:56:22
3321	2	1579	NO COMMENT	\N	2014-06-06 04:46:02	2014-06-06 04:46:02
3322	23	1580	NO COMMENT	\N	2014-06-08 12:13:06	2014-06-08 12:13:06
3323	2	1580	NO COMMENT	\N	2014-06-13 06:07:51	2014-06-13 06:07:51
3324	31	1580	NO COMMENT	\N	2014-06-23 23:22:30	2014-06-23 23:22:30
3325	2	1582	NO COMMENT	\N	2014-06-23 04:10:19	2014-06-23 04:10:19
3326	2	1584	NO COMMENT	\N	2014-05-30 23:45:23	2014-05-30 23:45:23
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 3326, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	19	129	code	f	1	2014-06-08 19:03:17	2014-06-08 19:03:17	UserExercise	24
2	26	129	code	f	1	2014-06-22 01:56:02	2014-06-22 01:56:02	UserExercise	24
3	21	142	code	f	1	2014-06-30 15:27:37	2014-06-30 15:27:37	UserExercise	18
4	26	145	code	f	1	2014-06-23 13:19:44	2014-06-23 13:19:44	UserExercise	18
5	26	148	code	f	1	2014-06-22 03:22:31	2014-06-22 03:22:31	UserExercise	18
6	19	148	code	f	1	2014-06-22 03:22:31	2014-06-22 03:22:31	UserExercise	18
7	26	148	code	f	1	2014-06-25 23:56:16	2014-06-25 23:56:16	UserExercise	18
8	19	148	code	f	1	2014-06-25 23:56:16	2014-06-25 23:56:16	UserExercise	18
9	19	148	code	f	1	2014-06-29 19:37:20	2014-06-29 19:37:20	UserExercise	18
10	24	148	code	f	1	2014-06-29 19:37:20	2014-06-29 19:37:20	UserExercise	18
11	7	148	code	f	1	2014-07-01 10:51:41	2014-07-01 10:51:41	UserExercise	18
12	26	148	code	f	1	2014-07-01 10:51:41	2014-07-01 10:51:41	UserExercise	18
13	19	148	code	f	1	2014-07-01 10:51:41	2014-07-01 10:51:41	UserExercise	18
14	24	148	code	t	1	2014-07-01 10:51:41	2014-07-01 10:51:41	UserExercise	18
15	19	153	code	f	1	2014-06-27 21:31:01	2014-06-27 21:31:01	UserExercise	18
16	19	164	code	f	1	2014-05-04 18:48:13	2014-05-04 18:48:13	UserExercise	23
17	19	177	code	f	1	2014-06-07 06:02:52	2014-06-07 06:02:52	UserExercise	25
18	23	194	code	f	1	2014-06-10 04:29:33	2014-06-10 04:29:33	UserExercise	25
19	26	218	code	f	1	2014-06-12 08:32:11	2014-06-12 08:32:11	UserExercise	5
20	20	222	code	f	1	2014-06-27 01:31:09	2014-06-27 01:31:09	UserExercise	5
21	19	224	code	f	1	2014-04-19 09:58:18	2014-04-19 09:58:18	UserExercise	5
22	20	224	code	f	1	2014-06-23 13:18:52	2014-06-23 13:18:52	UserExercise	5
23	19	262	code	f	1	2014-04-17 13:42:53	2014-04-17 13:42:53	UserExercise	8
24	26	283	code	f	1	2014-06-27 05:49:30	2014-06-27 05:49:30	UserExercise	10
25	25	283	code	f	1	2014-06-27 05:49:30	2014-06-27 05:49:30	UserExercise	10
26	20	283	code	f	1	2014-06-27 05:49:30	2014-06-27 05:49:30	UserExercise	10
27	6	283	code	f	1	2014-06-27 05:49:30	2014-06-27 05:49:30	UserExercise	10
28	19	283	code	f	1	2014-06-30 07:52:45	2014-06-30 07:52:45	UserExercise	10
29	24	283	code	f	1	2014-06-30 07:52:45	2014-06-30 07:52:45	UserExercise	10
30	23	283	code	f	1	2014-06-30 07:52:45	2014-06-30 07:52:45	UserExercise	10
31	25	283	code	f	1	2014-06-30 07:52:45	2014-06-30 07:52:45	UserExercise	10
32	5	283	code	f	1	2014-06-30 07:52:45	2014-06-30 07:52:45	UserExercise	10
33	9	283	code	f	1	2014-06-30 07:52:45	2014-06-30 07:52:45	UserExercise	10
34	9	286	code	f	1	2014-06-26 04:35:09	2014-06-26 04:35:09	UserExercise	10
35	9	286	code	f	1	2014-06-28 18:11:44	2014-06-28 18:11:44	UserExercise	10
36	3	293	code	f	1	2014-06-22 01:14:20	2014-06-22 01:14:20	UserExercise	10
37	19	293	code	f	1	2014-06-22 01:14:20	2014-06-22 01:14:20	UserExercise	10
38	3	293	code	f	1	2014-06-27 00:19:06	2014-06-27 00:19:06	UserExercise	10
39	8	293	code	f	1	2014-06-27 00:19:06	2014-06-27 00:19:06	UserExercise	10
40	19	296	code	f	1	2014-06-17 22:42:04	2014-06-17 22:42:04	UserExercise	10
41	19	296	code	t	1	2014-07-01 00:18:34	2014-07-01 00:18:34	UserExercise	10
42	26	296	code	t	1	2014-07-01 00:18:34	2014-07-01 00:18:34	UserExercise	10
43	6	297	code	f	1	2014-06-17 16:08:07	2014-06-17 16:08:07	UserExercise	10
44	20	305	code	f	1	2014-04-10 22:15:16	2014-04-10 22:15:16	UserExercise	11
45	20	305	code	f	1	2014-05-27 00:56:12	2014-05-27 00:56:12	UserExercise	11
46	26	307	code	f	1	2014-04-12 07:28:40	2014-04-12 07:28:40	UserExercise	11
47	26	307	code	f	1	2014-04-24 07:58:51	2014-04-24 07:58:51	UserExercise	11
48	23	334	code	f	1	2014-06-04 14:41:34	2014-06-04 14:41:34	UserExercise	13
49	23	334	code	f	1	2014-06-10 13:08:40	2014-06-10 13:08:40	UserExercise	13
50	23	334	code	f	1	2014-06-26 20:27:36	2014-06-26 20:27:36	UserExercise	13
51	20	334	code	f	1	2014-06-26 20:27:36	2014-06-26 20:27:36	UserExercise	13
52	19	337	code	f	1	2014-06-22 09:17:09	2014-06-22 09:17:09	UserExercise	13
53	19	337	code	f	1	2014-06-28 22:32:16	2014-06-28 22:32:16	UserExercise	13
54	11	337	code	f	1	2014-06-28 22:32:16	2014-06-28 22:32:16	UserExercise	13
55	19	341	code	f	1	2014-06-05 14:52:42	2014-06-05 14:52:42	UserExercise	13
56	6	341	code	f	1	2014-06-05 14:52:42	2014-06-05 14:52:42	UserExercise	13
57	19	342	code	f	1	2014-05-15 09:00:44	2014-05-15 09:00:44	UserExercise	13
58	20	343	code	f	1	2014-06-27 12:42:02	2014-06-27 12:42:02	UserExercise	13
59	4	347	code	f	1	2014-06-07 00:37:34	2014-06-07 00:37:34	UserExercise	13
60	4	347	code	f	1	2014-06-07 08:54:32	2014-06-07 08:54:32	UserExercise	13
61	4	347	code	f	1	2014-06-28 16:18:15	2014-06-28 16:18:15	UserExercise	13
62	25	347	code	f	1	2014-06-28 16:18:15	2014-06-28 16:18:15	UserExercise	13
63	6	347	code	f	1	2014-06-28 16:18:15	2014-06-28 16:18:15	UserExercise	13
64	19	356	code	f	1	2014-04-22 23:28:18	2014-04-22 23:28:18	UserExercise	14
65	6	357	code	f	1	2014-03-13 05:59:44	2014-03-13 05:59:44	UserExercise	14
66	6	357	code	f	1	2014-03-14 02:54:12	2014-03-14 02:54:12	UserExercise	14
67	21	369	code	f	1	2014-06-18 13:24:32	2014-06-18 13:24:32	UserExercise	15
68	26	369	code	f	1	2014-06-24 02:47:19	2014-06-24 02:47:19	UserExercise	15
69	19	369	code	f	1	2014-06-24 02:47:19	2014-06-24 02:47:19	UserExercise	15
70	11	375	code	f	1	2014-06-24 09:39:51	2014-06-24 09:39:51	UserExercise	15
71	25	378	code	f	1	2014-06-15 05:30:04	2014-06-15 05:30:04	UserExercise	15
72	11	378	code	f	1	2014-06-15 05:30:04	2014-06-15 05:30:04	UserExercise	15
73	12	378	code	f	1	2014-06-15 05:30:04	2014-06-15 05:30:04	UserExercise	15
74	23	379	code	f	1	2014-06-09 22:08:22	2014-06-09 22:08:22	UserExercise	15
75	6	379	code	f	1	2014-06-12 00:48:17	2014-06-12 00:48:17	UserExercise	15
76	6	388	code	f	1	2014-05-03 20:40:47	2014-05-03 20:40:47	UserExercise	16
77	16	396	code	f	1	2014-04-16 19:59:30	2014-04-16 19:59:30	UserExercise	17
78	19	413	code	f	1	2014-06-05 04:58:28	2014-06-05 04:58:28	UserExercise	22
79	14	413	code	f	1	2014-06-05 04:58:28	2014-06-05 04:58:28	UserExercise	22
80	17	413	code	f	1	2014-06-05 04:58:28	2014-06-05 04:58:28	UserExercise	22
81	19	422	code	f	1	2014-06-10 01:25:33	2014-06-10 01:25:33	UserExercise	22
82	11	437	code	f	1	2014-06-13 23:36:01	2014-06-13 23:36:01	UserExercise	27
83	14	442	code	f	1	2014-05-12 19:40:55	2014-05-12 19:40:55	UserExercise	27
84	19	450	code	f	1	2014-04-08 13:27:54	2014-04-08 13:27:54	UserExercise	28
85	22	453	code	f	1	2014-06-08 17:36:11	2014-06-08 17:36:11	UserExercise	28
86	10	453	code	t	1	2014-07-01 05:07:07	2014-07-01 05:07:07	UserExercise	28
87	22	453	code	t	1	2014-07-01 05:07:07	2014-07-01 05:07:07	UserExercise	28
88	27	453	code	t	1	2014-07-01 05:07:07	2014-07-01 05:07:07	UserExercise	28
89	27	470	code	f	1	2014-04-08 07:54:53	2014-04-08 07:54:53	UserExercise	29
90	6	472	code	f	1	2014-05-01 08:06:54	2014-05-01 08:06:54	UserExercise	29
91	28	474	code	f	1	2014-05-20 18:15:26	2014-05-20 18:15:26	UserExercise	30
92	20	474	code	f	1	2014-06-10 01:36:01	2014-06-10 01:36:01	UserExercise	30
93	26	475	code	f	1	2014-05-17 03:43:06	2014-05-17 03:43:06	UserExercise	30
94	6	475	code	f	1	2014-06-16 11:45:08	2014-06-16 11:45:08	UserExercise	30
95	6	475	code	f	1	2014-06-19 03:49:35	2014-06-19 03:49:35	UserExercise	30
96	9	475	code	f	1	2014-06-19 03:49:35	2014-06-19 03:49:35	UserExercise	30
97	19	478	code	f	1	2014-06-26 04:44:25	2014-06-26 04:44:25	UserExercise	30
98	25	478	code	f	1	2014-06-26 04:44:25	2014-06-26 04:44:25	UserExercise	30
99	8	478	code	f	1	2014-06-26 04:44:25	2014-06-26 04:44:25	UserExercise	30
100	11	478	code	f	1	2014-06-26 04:44:25	2014-06-26 04:44:25	UserExercise	30
101	16	478	code	f	1	2014-06-26 04:44:25	2014-06-26 04:44:25	UserExercise	30
102	27	478	code	f	1	2014-06-26 04:44:25	2014-06-26 04:44:25	UserExercise	30
103	29	478	code	f	1	2014-06-26 04:44:25	2014-06-26 04:44:25	UserExercise	30
104	26	480	code	f	1	2014-05-03 02:43:06	2014-05-03 02:43:06	UserExercise	30
105	16	483	code	f	1	2014-06-02 15:52:33	2014-06-02 15:52:33	UserExercise	30
106	16	487	code	f	1	2014-05-31 12:48:02	2014-05-31 12:48:02	UserExercise	30
107	23	494	code	f	1	2014-04-22 20:55:24	2014-04-22 20:55:24	UserExercise	37
108	28	508	code	f	1	2014-05-29 21:24:53	2014-05-29 21:24:53	UserExercise	37
109	20	516	code	f	1	2014-06-08 02:40:50	2014-06-08 02:40:50	UserExercise	41
110	16	518	code	f	1	2014-06-12 10:58:43	2014-06-12 10:58:43	UserExercise	41
111	15	520	code	f	1	2014-06-27 23:38:10	2014-06-27 23:38:10	UserExercise	41
112	16	520	code	f	1	2014-06-27 23:38:10	2014-06-27 23:38:10	UserExercise	41
113	29	521	code	f	1	2014-05-12 04:05:01	2014-05-12 04:05:01	UserExercise	41
114	27	523	code	f	1	2014-05-09 23:00:22	2014-05-09 23:00:22	UserExercise	41
115	29	523	code	f	1	2014-05-09 23:00:22	2014-05-09 23:00:22	UserExercise	41
116	23	531	code	f	1	2014-03-11 06:07:49	2014-03-11 06:07:49	UserExercise	42
117	6	535	code	f	1	2014-03-22 03:51:04	2014-03-22 03:51:04	UserExercise	42
118	8	537	code	f	1	2014-05-18 14:50:20	2014-05-18 14:50:20	UserExercise	42
119	41	550	code	f	1	2014-06-05 17:18:35	2014-06-05 17:18:35	UserExercise	43
120	12	557	code	f	1	2014-05-12 01:32:38	2014-05-12 01:32:38	UserExercise	43
121	16	557	code	f	1	2014-05-12 01:32:38	2014-05-12 01:32:38	UserExercise	43
122	26	561	code	f	1	2014-05-16 04:54:28	2014-05-16 04:54:28	UserExercise	44
123	28	576	code	f	1	2014-04-30 23:04:04	2014-04-30 23:04:04	UserExercise	44
124	28	576	code	f	1	2014-05-01 09:38:30	2014-05-01 09:38:30	UserExercise	44
125	28	576	code	f	1	2014-05-13 13:44:08	2014-05-13 13:44:08	UserExercise	44
126	19	581	code	f	1	2014-04-29 05:51:26	2014-04-29 05:51:26	UserExercise	45
127	16	581	code	f	1	2014-04-29 05:51:26	2014-04-29 05:51:26	UserExercise	45
128	37	581	code	f	1	2014-04-29 05:51:26	2014-04-29 05:51:26	UserExercise	45
129	26	586	code	f	1	2014-05-01 19:09:19	2014-05-01 19:09:19	UserExercise	45
130	26	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
131	19	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
132	25	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
133	20	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
134	11	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
135	12	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
136	13	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
137	29	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
138	37	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
139	43	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
140	45	594	code	f	1	2014-06-26 23:30:30	2014-06-26 23:30:30	UserExercise	46
141	3	595	code	f	1	2014-06-20 22:39:16	2014-06-20 22:39:16	UserExercise	46
142	19	595	code	f	1	2014-06-20 22:39:16	2014-06-20 22:39:16	UserExercise	46
143	28	595	code	f	1	2014-06-20 22:39:16	2014-06-20 22:39:16	UserExercise	46
144	19	595	code	f	1	2014-06-21 19:48:37	2014-06-21 19:48:37	UserExercise	46
145	5	596	code	f	1	2014-06-30 05:36:22	2014-06-30 05:36:22	UserExercise	46
146	5	596	code	f	1	2014-06-30 18:22:16	2014-06-30 18:22:16	UserExercise	46
147	9	598	code	f	1	2014-06-16 07:29:33	2014-06-16 07:29:33	UserExercise	46
148	28	598	code	f	1	2014-06-16 07:29:33	2014-06-16 07:29:33	UserExercise	46
149	26	598	code	f	1	2014-06-16 17:59:52	2014-06-16 17:59:52	UserExercise	46
150	28	598	code	f	1	2014-06-16 17:59:52	2014-06-16 17:59:52	UserExercise	46
151	26	598	code	f	1	2014-06-18 04:20:47	2014-06-18 04:20:47	UserExercise	46
152	19	598	code	f	1	2014-06-19 19:05:40	2014-06-19 19:05:40	UserExercise	46
153	12	598	code	f	1	2014-06-19 19:05:40	2014-06-19 19:05:40	UserExercise	46
154	17	598	code	f	1	2014-06-19 19:05:40	2014-06-19 19:05:40	UserExercise	46
155	30	598	code	f	1	2014-06-19 19:05:40	2014-06-19 19:05:40	UserExercise	46
156	12	598	code	f	1	2014-06-22 13:25:11	2014-06-22 13:25:11	UserExercise	46
157	19	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
158	24	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
159	23	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
160	5	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
161	9	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
162	10	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
163	12	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
164	13	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
165	14	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
166	17	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
167	22	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
168	27	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
169	28	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
170	37	598	code	f	1	2014-06-29 10:37:11	2014-06-29 10:37:11	UserExercise	46
171	7	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
172	26	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
173	19	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
174	23	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
175	5	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
176	6	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
177	8	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
178	9	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
179	12	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
180	13	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
181	14	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
182	22	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
183	43	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
184	44	598	code	f	1	2014-06-30 17:29:57	2014-06-30 17:29:57	UserExercise	46
185	7	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
186	26	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
187	19	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
188	24	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
189	23	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
190	5	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
191	6	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
192	8	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
193	9	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
194	10	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
195	12	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
196	13	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
197	14	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
198	17	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
199	22	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
200	27	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
201	28	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
202	30	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
203	37	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
204	43	598	code	t	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
205	44	598	code	f	1	2014-07-01 02:49:54	2014-07-01 02:49:54	UserExercise	46
206	7	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
207	26	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
208	19	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
209	24	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
210	18	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
211	23	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
212	5	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
213	6	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
214	8	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
215	9	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
216	10	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
217	12	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
218	13	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
219	14	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
220	17	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
221	22	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
222	27	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
223	28	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
224	30	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
225	37	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
226	43	598	code	f	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
227	44	598	code	t	1	2014-07-02 09:55:22	2014-07-02 09:55:22	UserExercise	46
228	14	600	code	f	1	2014-06-22 13:50:27	2014-06-22 13:50:27	UserExercise	46
229	16	600	code	f	1	2014-06-23 10:46:24	2014-06-23 10:46:24	UserExercise	46
230	23	601	code	f	1	2014-06-26 01:34:38	2014-06-26 01:34:38	UserExercise	46
231	8	601	code	f	1	2014-06-26 01:34:38	2014-06-26 01:34:38	UserExercise	46
232	29	601	code	f	1	2014-06-26 01:34:38	2014-06-26 01:34:38	UserExercise	46
233	44	601	code	f	1	2014-06-26 01:34:38	2014-06-26 01:34:38	UserExercise	46
234	22	603	code	f	1	2014-06-29 05:54:11	2014-06-29 05:54:11	UserExercise	46
235	27	603	code	f	1	2014-06-29 05:54:11	2014-06-29 05:54:11	UserExercise	46
236	29	603	code	f	1	2014-06-29 05:54:11	2014-06-29 05:54:11	UserExercise	46
237	42	603	code	f	1	2014-06-29 05:54:11	2014-06-29 05:54:11	UserExercise	46
238	11	604	code	f	1	2014-06-15 20:41:25	2014-06-15 20:41:25	UserExercise	46
239	30	606	code	f	1	2014-06-15 23:37:01	2014-06-15 23:37:01	UserExercise	46
240	13	608	code	f	1	2014-06-18 23:04:54	2014-06-18 23:04:54	UserExercise	46
241	16	608	code	f	1	2014-06-27 04:32:00	2014-06-27 04:32:00	UserExercise	46
242	13	608	code	f	1	2014-06-27 04:32:00	2014-06-27 04:32:00	UserExercise	46
243	7	608	code	f	1	2014-06-27 04:32:00	2014-06-27 04:32:00	UserExercise	46
244	45	611	code	f	1	2014-06-10 17:59:55	2014-06-10 17:59:55	UserExercise	47
245	27	611	code	f	1	2014-06-29 18:19:42	2014-06-29 18:19:42	UserExercise	47
246	22	611	code	f	1	2014-06-29 18:19:42	2014-06-29 18:19:42	UserExercise	47
247	23	619	code	f	1	2014-06-07 19:32:07	2014-06-07 19:32:07	UserExercise	47
248	29	621	code	f	1	2014-05-26 05:57:35	2014-05-26 05:57:35	UserExercise	47
249	11	621	code	f	1	2014-06-18 13:27:48	2014-06-18 13:27:48	UserExercise	47
250	29	621	code	f	1	2014-06-18 13:27:48	2014-06-18 13:27:48	UserExercise	47
251	11	621	code	f	1	2014-06-21 16:28:40	2014-06-21 16:28:40	UserExercise	47
252	11	629	code	f	1	2014-05-10 20:31:16	2014-05-10 20:31:16	UserExercise	48
253	43	630	code	f	1	2014-04-18 19:03:25	2014-04-18 19:03:25	UserExercise	48
254	27	633	code	f	1	2014-03-21 07:55:33	2014-03-21 07:55:33	UserExercise	48
255	45	637	code	f	1	2014-04-17 22:12:22	2014-04-17 22:12:22	UserExercise	48
256	16	641	code	f	1	2014-04-27 13:59:56	2014-04-27 13:59:56	UserExercise	48
257	37	642	code	f	1	2014-05-09 01:21:56	2014-05-09 01:21:56	UserExercise	48
258	10	645	code	f	1	2014-06-24 01:18:47	2014-06-24 01:18:47	UserExercise	31
259	30	645	code	f	1	2014-06-24 01:18:47	2014-06-24 01:18:47	UserExercise	31
260	41	645	code	f	1	2014-06-24 01:18:47	2014-06-24 01:18:47	UserExercise	31
261	48	645	code	f	1	2014-06-24 01:18:47	2014-06-24 01:18:47	UserExercise	31
262	22	649	code	f	1	2014-05-03 07:48:56	2014-05-03 07:48:56	UserExercise	31
263	19	654	code	f	1	2014-04-25 22:58:53	2014-04-25 22:58:53	UserExercise	31
264	19	654	code	f	1	2014-05-07 03:03:40	2014-05-07 03:03:40	UserExercise	31
265	14	655	code	f	1	2014-05-09 07:53:43	2014-05-09 07:53:43	UserExercise	31
266	6	655	code	f	1	2014-06-09 15:03:32	2014-06-09 15:03:32	UserExercise	31
267	14	655	code	f	1	2014-06-09 15:03:32	2014-06-09 15:03:32	UserExercise	31
268	42	658	code	f	1	2014-03-20 06:17:03	2014-03-20 06:17:03	UserExercise	31
269	19	660	code	f	1	2014-06-07 15:05:59	2014-06-07 15:05:59	UserExercise	39
270	12	660	code	f	1	2014-06-08 02:57:20	2014-06-08 02:57:20	UserExercise	39
271	14	660	code	f	1	2014-06-08 02:57:20	2014-06-08 02:57:20	UserExercise	39
272	26	660	code	f	1	2014-06-12 10:38:22	2014-06-12 10:38:22	UserExercise	39
273	12	660	code	f	1	2014-06-15 04:04:19	2014-06-15 04:04:19	UserExercise	39
274	26	660	code	f	1	2014-06-17 23:42:50	2014-06-17 23:42:50	UserExercise	39
275	6	660	code	f	1	2014-06-17 23:42:50	2014-06-17 23:42:50	UserExercise	39
276	12	660	code	f	1	2014-06-17 23:42:50	2014-06-17 23:42:50	UserExercise	39
277	29	661	code	f	1	2014-05-28 22:18:40	2014-05-28 22:18:40	UserExercise	39
278	48	662	code	f	1	2014-06-07 16:25:33	2014-06-07 16:25:33	UserExercise	39
279	19	663	code	f	1	2014-05-29 18:07:54	2014-05-29 18:07:54	UserExercise	39
280	43	664	code	f	1	2014-06-10 17:22:46	2014-06-10 17:22:46	UserExercise	39
281	48	665	code	f	1	2014-06-14 03:10:58	2014-06-14 03:10:58	UserExercise	39
282	42	670	code	f	1	2014-03-26 06:27:46	2014-03-26 06:27:46	UserExercise	34
283	16	673	code	f	1	2014-05-02 05:33:11	2014-05-02 05:33:11	UserExercise	34
284	19	673	code	f	1	2014-05-19 16:29:56	2014-05-19 16:29:56	UserExercise	34
285	37	673	code	f	1	2014-05-19 16:29:56	2014-05-19 16:29:56	UserExercise	34
286	16	673	code	f	1	2014-05-25 02:17:17	2014-05-25 02:17:17	UserExercise	34
287	45	673	code	f	1	2014-05-25 02:17:17	2014-05-25 02:17:17	UserExercise	34
288	16	673	code	f	1	2014-05-26 13:56:48	2014-05-26 13:56:48	UserExercise	34
289	26	676	code	f	1	2014-05-24 10:10:27	2014-05-24 10:10:27	UserExercise	34
290	11	677	code	f	1	2014-04-13 05:48:43	2014-04-13 05:48:43	UserExercise	34
291	26	681	code	f	1	2014-05-27 01:55:21	2014-05-27 01:55:21	UserExercise	36
292	43	682	code	f	1	2014-05-19 17:01:24	2014-05-19 17:01:24	UserExercise	36
293	48	682	code	f	1	2014-05-19 17:01:24	2014-05-19 17:01:24	UserExercise	36
294	48	682	code	f	1	2014-05-30 13:35:23	2014-05-30 13:35:23	UserExercise	36
295	5	682	code	f	1	2014-06-08 04:15:16	2014-06-08 04:15:16	UserExercise	36
296	5	682	code	f	1	2014-06-16 20:05:13	2014-06-16 20:05:13	UserExercise	36
297	48	682	code	f	1	2014-06-16 20:05:13	2014-06-16 20:05:13	UserExercise	36
298	45	689	code	f	1	2014-05-14 19:59:03	2014-05-14 19:59:03	UserExercise	36
299	11	696	code	f	1	2014-05-13 04:09:52	2014-05-13 04:09:52	UserExercise	32
300	26	697	code	f	1	2014-05-16 14:44:45	2014-05-16 14:44:45	UserExercise	32
301	14	698	code	f	1	2014-05-13 19:19:20	2014-05-13 19:19:20	UserExercise	32
302	14	698	code	f	1	2014-05-23 23:09:00	2014-05-23 23:09:00	UserExercise	32
303	6	698	code	f	1	2014-06-07 02:42:29	2014-06-07 02:42:29	UserExercise	32
304	12	698	code	f	1	2014-06-07 02:42:29	2014-06-07 02:42:29	UserExercise	32
305	19	698	code	f	1	2014-06-19 15:26:35	2014-06-19 15:26:35	UserExercise	32
306	43	698	code	f	1	2014-06-19 15:26:35	2014-06-19 15:26:35	UserExercise	32
307	31	699	code	f	1	2014-06-04 13:23:06	2014-06-04 13:23:06	UserExercise	32
308	6	699	code	f	1	2014-06-15 12:26:06	2014-06-15 12:26:06	UserExercise	32
309	29	700	code	f	1	2014-05-19 08:06:11	2014-05-19 08:06:11	UserExercise	32
310	11	701	code	f	1	2014-06-15 00:15:13	2014-06-15 00:15:13	UserExercise	32
311	12	701	code	f	1	2014-06-15 00:15:13	2014-06-15 00:15:13	UserExercise	32
312	34	703	code	f	1	2014-06-16 07:23:57	2014-06-16 07:23:57	UserExercise	32
313	22	705	code	f	1	2014-05-22 08:47:32	2014-05-22 08:47:32	UserExercise	32
314	19	706	code	f	1	2014-05-14 18:18:08	2014-05-14 18:18:08	UserExercise	32
315	27	707	code	f	1	2014-05-04 21:46:55	2014-05-04 21:46:55	UserExercise	35
316	19	709	code	f	1	2014-05-25 00:57:59	2014-05-25 00:57:59	UserExercise	35
317	14	709	code	f	1	2014-05-28 12:38:45	2014-05-28 12:38:45	UserExercise	35
318	19	709	code	f	1	2014-05-29 06:52:34	2014-05-29 06:52:34	UserExercise	35
319	26	709	code	f	1	2014-06-02 13:29:50	2014-06-02 13:29:50	UserExercise	35
320	6	709	code	f	1	2014-06-02 13:29:50	2014-06-02 13:29:50	UserExercise	35
321	17	709	code	f	1	2014-06-02 13:29:50	2014-06-02 13:29:50	UserExercise	35
322	17	709	code	f	1	2014-06-05 12:50:05	2014-06-05 12:50:05	UserExercise	35
323	43	709	code	f	1	2014-06-05 12:50:05	2014-06-05 12:50:05	UserExercise	35
324	19	709	code	f	1	2014-06-13 12:08:33	2014-06-13 12:08:33	UserExercise	35
325	17	709	code	f	1	2014-06-21 02:27:44	2014-06-21 02:27:44	UserExercise	35
326	22	709	code	f	1	2014-06-21 02:27:44	2014-06-21 02:27:44	UserExercise	35
327	27	709	code	f	1	2014-06-21 02:27:44	2014-06-21 02:27:44	UserExercise	35
328	28	709	code	f	1	2014-06-21 02:27:44	2014-06-21 02:27:44	UserExercise	35
329	45	710	code	f	1	2014-05-16 18:58:43	2014-05-16 18:58:43	UserExercise	35
330	16	710	code	f	1	2014-05-17 12:45:24	2014-05-17 12:45:24	UserExercise	35
331	25	710	code	f	1	2014-06-12 16:04:35	2014-06-12 16:04:35	UserExercise	35
332	20	710	code	f	1	2014-06-12 16:04:35	2014-06-12 16:04:35	UserExercise	35
333	25	711	code	f	1	2014-06-14 07:51:27	2014-06-14 07:51:27	UserExercise	35
334	22	713	code	f	1	2014-05-04 01:33:33	2014-05-04 01:33:33	UserExercise	35
335	42	713	code	f	1	2014-05-04 01:33:33	2014-05-04 01:33:33	UserExercise	35
336	42	713	code	f	1	2014-05-08 23:18:57	2014-05-08 23:18:57	UserExercise	35
337	27	713	code	f	1	2014-06-08 18:52:49	2014-06-08 18:52:49	UserExercise	35
338	42	713	code	f	1	2014-06-08 18:52:49	2014-06-08 18:52:49	UserExercise	35
339	10	713	code	f	1	2014-06-21 11:23:22	2014-06-21 11:23:22	UserExercise	35
340	27	713	code	f	1	2014-06-21 11:23:22	2014-06-21 11:23:22	UserExercise	35
341	20	716	code	f	1	2014-06-27 15:38:21	2014-06-27 15:38:21	UserExercise	33
342	11	716	code	f	1	2014-06-27 15:38:21	2014-06-27 15:38:21	UserExercise	33
343	15	716	code	f	1	2014-06-27 15:38:21	2014-06-27 15:38:21	UserExercise	33
344	41	716	code	f	1	2014-06-27 15:38:21	2014-06-27 15:38:21	UserExercise	33
345	34	716	code	f	1	2014-06-27 15:38:21	2014-06-27 15:38:21	UserExercise	33
346	20	717	code	f	1	2014-06-25 23:23:12	2014-06-25 23:23:12	UserExercise	33
347	10	717	code	f	1	2014-06-25 23:23:12	2014-06-25 23:23:12	UserExercise	33
348	30	717	code	f	1	2014-06-25 23:23:12	2014-06-25 23:23:12	UserExercise	33
349	41	717	code	f	1	2014-06-25 23:23:12	2014-06-25 23:23:12	UserExercise	33
350	48	717	code	f	1	2014-06-25 23:23:12	2014-06-25 23:23:12	UserExercise	33
351	36	717	code	f	1	2014-06-25 23:23:12	2014-06-25 23:23:12	UserExercise	33
352	20	717	code	f	1	2014-06-27 04:33:13	2014-06-27 04:33:13	UserExercise	33
353	48	717	code	f	1	2014-06-27 04:33:13	2014-06-27 04:33:13	UserExercise	33
354	12	718	code	f	1	2014-06-17 05:44:20	2014-06-17 05:44:20	UserExercise	33
355	22	718	code	f	1	2014-06-17 05:44:20	2014-06-17 05:44:20	UserExercise	33
356	43	718	code	f	1	2014-06-17 05:44:20	2014-06-17 05:44:20	UserExercise	33
357	34	718	code	f	1	2014-06-17 05:44:20	2014-06-17 05:44:20	UserExercise	33
358	19	718	code	f	1	2014-06-17 18:55:56	2014-06-17 18:55:56	UserExercise	33
359	14	718	code	f	1	2014-06-17 18:55:56	2014-06-17 18:55:56	UserExercise	33
360	22	718	code	f	1	2014-06-17 18:55:56	2014-06-17 18:55:56	UserExercise	33
361	26	720	code	f	1	2014-06-29 13:52:36	2014-06-29 13:52:36	UserExercise	33
362	23	720	code	f	1	2014-06-29 13:52:36	2014-06-29 13:52:36	UserExercise	33
363	36	720	code	f	1	2014-06-29 13:52:36	2014-06-29 13:52:36	UserExercise	33
364	19	723	code	f	1	2014-06-11 16:41:59	2014-06-11 16:41:59	UserExercise	33
365	16	723	code	f	1	2014-06-11 16:41:59	2014-06-11 16:41:59	UserExercise	33
366	31	723	code	f	1	2014-06-11 16:41:59	2014-06-11 16:41:59	UserExercise	33
367	25	723	code	f	1	2014-06-20 09:31:40	2014-06-20 09:31:40	UserExercise	33
368	6	723	code	f	1	2014-06-20 09:31:40	2014-06-20 09:31:40	UserExercise	33
369	9	723	code	f	1	2014-06-20 09:31:40	2014-06-20 09:31:40	UserExercise	33
370	12	723	code	f	1	2014-06-20 09:31:40	2014-06-20 09:31:40	UserExercise	33
371	19	723	code	f	1	2014-06-20 22:21:58	2014-06-20 22:21:58	UserExercise	33
372	12	723	code	f	1	2014-06-20 22:21:58	2014-06-20 22:21:58	UserExercise	33
373	45	723	code	f	1	2014-06-20 22:21:58	2014-06-20 22:21:58	UserExercise	33
374	19	723	code	f	1	2014-06-22 12:25:48	2014-06-22 12:25:48	UserExercise	33
375	11	723	code	f	1	2014-06-22 12:25:48	2014-06-22 12:25:48	UserExercise	33
376	37	723	code	f	1	2014-06-22 12:25:48	2014-06-22 12:25:48	UserExercise	33
377	31	723	code	f	1	2014-06-22 12:25:48	2014-06-22 12:25:48	UserExercise	33
378	19	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
379	25	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
380	20	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
381	6	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
382	9	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
383	11	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
384	12	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
385	37	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
386	45	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
387	31	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
388	35	723	code	f	1	2014-06-26 19:35:34	2014-06-26 19:35:34	UserExercise	33
389	20	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
390	6	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
391	9	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
392	12	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
393	13	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
394	16	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
395	29	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
396	37	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
397	43	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
398	45	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
399	48	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
400	31	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
401	35	723	code	f	1	2014-06-28 11:27:14	2014-06-28 11:27:14	UserExercise	33
402	19	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
403	24	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
404	23	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
405	25	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
406	20	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
407	6	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
408	9	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
409	11	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
410	12	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
411	13	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
412	16	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
413	29	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
414	37	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
415	43	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
416	45	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
417	48	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
418	31	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
419	34	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
420	35	723	code	f	1	2014-06-29 16:18:51	2014-06-29 16:18:51	UserExercise	33
421	26	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
422	19	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
423	24	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
424	20	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
425	9	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
426	12	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
427	16	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
428	17	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
429	37	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
430	43	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
431	44	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
432	31	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
433	34	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
434	35	723	code	f	1	2014-06-29 22:45:41	2014-06-29 22:45:41	UserExercise	33
435	22	725	code	f	1	2014-06-17 08:52:28	2014-06-17 08:52:28	UserExercise	33
436	39	725	code	f	1	2014-06-17 08:52:28	2014-06-17 08:52:28	UserExercise	33
437	29	725	code	f	1	2014-06-18 23:05:08	2014-06-18 23:05:08	UserExercise	33
438	42	725	code	f	1	2014-06-18 23:05:08	2014-06-18 23:05:08	UserExercise	33
439	29	725	code	f	1	2014-06-19 19:00:06	2014-06-19 19:00:06	UserExercise	33
440	42	725	code	f	1	2014-06-23 23:25:30	2014-06-23 23:25:30	UserExercise	33
441	39	725	code	f	1	2014-06-23 23:25:30	2014-06-23 23:25:30	UserExercise	33
442	29	725	code	f	1	2014-06-28 16:42:16	2014-06-28 16:42:16	UserExercise	33
443	42	725	code	f	1	2014-06-28 16:42:16	2014-06-28 16:42:16	UserExercise	33
444	45	725	code	f	1	2014-06-28 16:42:16	2014-06-28 16:42:16	UserExercise	33
445	47	725	code	f	1	2014-06-28 16:42:16	2014-06-28 16:42:16	UserExercise	33
446	10	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
447	22	725	code	f	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
448	27	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
449	29	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
450	42	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
451	45	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
452	47	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
453	39	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
454	35	725	code	t	1	2014-07-01 01:00:03	2014-07-01 01:00:03	UserExercise	33
455	34	728	code	f	1	2014-05-11 22:33:03	2014-05-11 22:33:03	UserExercise	40
456	19	730	code	f	1	2014-06-12 15:48:14	2014-06-12 15:48:14	UserExercise	40
457	17	730	code	f	1	2014-06-12 15:48:14	2014-06-12 15:48:14	UserExercise	40
458	43	730	code	f	1	2014-06-12 15:48:14	2014-06-12 15:48:14	UserExercise	40
459	19	731	code	f	1	2014-05-06 02:54:27	2014-05-06 02:54:27	UserExercise	40
460	19	731	code	f	1	2014-05-19 10:05:21	2014-05-19 10:05:21	UserExercise	40
461	43	732	code	f	1	2014-05-22 20:22:16	2014-05-22 20:22:16	UserExercise	40
462	23	736	code	f	1	2014-05-30 00:38:54	2014-05-30 00:38:54	UserExercise	40
463	31	736	code	f	1	2014-05-30 00:38:54	2014-05-30 00:38:54	UserExercise	40
464	27	737	code	f	1	2014-05-21 15:35:38	2014-05-21 15:35:38	UserExercise	40
465	29	737	code	f	1	2014-05-21 15:35:38	2014-05-21 15:35:38	UserExercise	40
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 465, true);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY schema_migrations (version) FROM stdin;
0
1
2
4
5
6
7
8
9
10
11
12
13
14
15
20131222101500
20131222101800
20131222143000
20131222162300
20131226195100
20131228160800
20131228160801
20140104004000
20140106195300
201401140708
201401140711
201401251118
201401251416
201401251656
201401251934
201401252153
201401252202
201401261034
201402021253
201402142155
201402151326
201402221052
201402221552
201404202208
\.


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
2	7	bf8f13b09350bd94fa2ff28e	superseded	javascript	beer-song	Beer = {\n    verse: function(n) {\n        var line = n;\n\n        function Bottles(i) {\n            if (i > 1) {\n                return i + " bottles";\n            } else {\n                return i + " bottle";\n            }\n        }\n\n        function Ending(i) {\n            if (i > 1) {\n                return "Take one down and pass it around, " + Bottles(i - 1) + " of beer on the wall.\\n";\n            } else {\n                return "Take it down and pass it around, no more bottles of beer on the wall.\\n";\n\n            }\n        }\n\n        if (line === 0) {\n            return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n        } else {\n            return Bottles(line) + " of beer on the wall, " + Bottles(line) + " of beer.\\n" + Ending(line);\n        }\n\n    },\n    sing: function(start, finish) {\n        var song = "";\n\n        if ( typeof(finish) === 'undefined' ) {\n            var ending = 0;\n        } else {\n            var ending = finish;\n        }\n\n        for(var i = start; i >= ending; i--) {\n            if (i > ending) {\n                song += Beer.verse(i) + "\\n";\n            } else {\n                song += Beer.verse(i);\n            }\n        }\n\n        return song;\n    }\n}	\N	f	0	2	2014-06-19 06:36:48	2014-06-19 06:36:48	1	beer-song.js
3	7	f34c0b8a7bc6c66795158a1f	superseded	javascript	beer-song	Beer = {\n\tverse: function(n) {\n\t\tvar line = n;\n\n\t\tswitch (line) {\n\t\tcase (0):\n\t\t    return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\t\t\tbreak;\n\t\tcase (1):\n\t\t\tvar bottles = line + " bottle";\n\t\t\tvar ending  = "Take it down and pass it around, no more bottles of beer on the wall.\\n";\n\t\t\treturn bottles + " of beer on the wall, " + bottles + " of beer.\\n" + ending;\n\t\t\tbreak;\n\t\tcase (2):\n\t\t\tvar bottles = line + " bottles";\n\t\t\tvar ending  = "Take one down and pass it around, " + (line - 1) + " bottle of beer on the wall.\\n";\n\t\t\treturn bottles + " of beer on the wall, " + bottles + " of beer.\\n" + ending;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tvar bottles = line + " bottles";\n\t\t\tvar ending  = "Take one down and pass it around, " + (line - 1) + " bottles of beer on the wall.\\n";\n\t\t\treturn bottles + " of beer on the wall, " + bottles + " of beer.\\n" + ending;\n\t\t\tbreak;\n\t\t}\n\t},\n\tsing: function(start, finish) {\n\t\tif ( typeof(finish) === 'undefined' ) {\n\t\t\tvar ending = 0;\n\t\t} else {\n\t\t\tvar ending = finish;\n\t\t}\n\n\t\tvar song = "";\n\n\t\tfor(var i = start; i >= ending; i--) {\n\t\t\tif (i > ending) {\n\t\t\t\tsong += Beer.verse(i) + "\\n";\n\t\t\t} else {\n\t\t\t\tsong += Beer.verse(i);\n\t\t\t}\n\t\t}\n\n\t\treturn song;\n\t}\n}	\N	f	4	1	2014-06-19 16:41:41	2014-06-19 16:41:41	1	beer-song.js
4	7	68742ac575f50efc71856378	pending	ruby	space-age	class SpaceAge\n  def initialize age\n    @seconds = age\n  end\n\n  attr_reader :seconds\n\n  def earth\n    @seconds / 31557600.0\n  end\n\n  def on_earth\n    earth.round(2)\n  end\n\n  def on_mercury\n    (earth / 0.2408467).round(2)\n  end\n\n  def on_venus\n    (earth / 0.61519726).round(2)\n  end\n\n  def on_mars\n    (earth / 1.8808158).round(2)\n  end\n\n  def on_jupiter\n    (earth / 11.862615).round(2)\n  end\n\n  def on_saturn\n    (earth / 29.447498).round(2)\n  end\n\n  def on_uranus\n    (earth / 84.016846).round(2)\n  end\n\n  def on_neptune\n    (earth / 164.79132).round(2)\n  end\n\nend	\N	f	3	1	2014-06-11 05:06:56	2014-06-11 05:06:56	2	space_age.rb
5	7	3a61e26b48f776b7b8730a23	superseded	ruby	grade-school	class School\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\t@students[key].push(value)\n\t\t@students\n\tend\n\n\tdef grade(num)\n\t\t@students[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[@students.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\nend	\N	f	4	2	2014-06-13 19:48:00	2014-06-13 19:48:00	3	grade-school.rb
6	7	fc9248aa5ddeee8cdba7a5ca	superseded	ruby	grade-school	class School\n\n\tattr_reader :db\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef students\n\t\t@students.clone\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\tdb[key].push(value)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\nend	\N	f	4	4	2014-06-15 14:42:04	2014-06-15 14:42:04	3	grade-school.rb
7	7	23512ec975dcd4733ba8a48a	superseded	ruby	grade-school	class School\n\t\n\tattr_reader :students\n\n\tdef initialize\n\t\t@students = Hash.new { |h,k| h[k] = [] }\n\tend\n\t\n\tdef db\n\t\tstudents\n\tend\n\n\tdef add(name, count)\n\t\tdb[count].push(name)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\n\nend\n\n\n 	\N	f	0	5	2014-06-16 00:17:21	2014-06-16 00:17:21	3	grade-school.rb
8	7	fae3102387372ca6e8d7d68d	superseded	ruby	grade-school	class School\n\t\n\tattr_reader :students, :clone\n\n\tdef initialize\n\t\t@students = Hash.new { |h,k| h[k] = [] }\n\t\tclone = students\n\tend\n\t\n\tdef db\n\t\tstudents\n\tend\n\n\tdef add(name, count)\n\t\tdb[count].push(name)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\n\nend\n\n\n 	\N	f	4	6	2014-06-19 04:22:35	2014-06-19 04:22:35	3	grade-school.rb
9	7	c65cc3f9098281c328c57331	done	ruby	grade-school	require 'pry'\n\nclass School\n\tdef initialize\n\t\t@students = Hash.new { |h,k| h[k] = [] }\n\tend\n\t\n\tdef db\n\t\tstudents\n\tend\n\n\tdef add(name, count)\n\t\tstudents[count].push(name)\n\tend\n\n\tdef grade(num)\n\t\tstudents[num]\n\tend\n\n\tdef sort \n\t\tstudents.keys.sort.each_with_object({}) { | key, obj |obj[key] = students[key].sort }\n\tend\n\n\tprivate\n\n\tattr_reader :students\n\nend\n 	\N	f	0	7	2014-06-20 18:49:59	2014-06-20 18:49:59	3	grade-school.rb
10	7	7ea545a7736a5e949e9a31d0	superseded	ruby	grade-school	class School\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\t@students[key].push(value)\n\t\t@students\n\tend\n\n\tdef grade(num)\n\t\t@students[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[@students.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\n\n\n\nend\n\n# {3=>["Kyle"], 4=>["Christopher", "Jennifer"], 6=>["Kareem"]}	\N	f	4	1	2014-06-21 20:32:32	2014-06-21 20:32:32	3	grade-school.rb
12	7	54b09974e393dae3a7c95f55	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn (year%4 == 0 && year%100 != 0) || year%400 == 0\n}	\N	f	6	1	2014-06-06 17:11:38	2014-06-06 17:11:38	4	leap.go
14	7	1b50d53d7950e3442fd7529d	pending	ruby	robot-simulator	class Robot\n  DIRECTIONS_TO_X_AND_Y_DELTA = {\n    north: [0,  1],\n    east:  [1,  0],\n    south: [0, -1],\n    west:  [-1, 0],\n  }\n\n  def orient(direction)\n    validate_direction(direction)\n    @bearing = direction\n    self\n  end\n\n  def bearing\n    @bearing\n  end\n\n  def at(x, y)\n    @x, @y = x, y\n    self\n  end\n\n  def coordinates\n    [@x, @y]\n  end\n\n  def advance\n    dx, dy = DIRECTIONS_TO_X_AND_Y_DELTA[bearing]\n    @x += dx\n    @y += dy\n    self\n  end\n\n  def turn_right\n    orient_by_index bearing_as_index.succ % directions.length\n  end\n\n  def turn_left\n    orient_by_index bearing_as_index.pred\n  end\n\n  private\n\n  def bearing_as_index\n    directions.index(bearing)\n  end\n\n  def orient_by_index(i)\n    orient directions[i]\n  end\n\n  def directions\n    DIRECTIONS_TO_X_AND_Y_DELTA.keys\n  end\n\n  def validate_direction(direction)\n    unless directions.include?(direction)\n      raise ArgumentError, "Unknown direction."\n    end\n  end\nend\n\n\nclass Simulator\n  INSTRUCTIONS = {\n    "L" => :turn_left,\n    "R" => :turn_right,\n    "A" => :advance\n  }\n\n  def place(robot, x: 0, y: 0, direction: :north)\n    robot.at(x, y).orient(direction)\n  end\n\n  def evaluate(robot, instruction_string)\n    instructions(instruction_string).each do |instruction|\n      robot.public_send(instruction)\n    end\n  end\n\n  def instructions(string)\n    string.chars.map { |char| INSTRUCTIONS.fetch(char) }\n  end\nend	\N	f	0	3	2014-06-18 02:58:22	2014-06-18 02:58:22	5	robot-simulator.rb
15	7	ae26259b9c8862f402c57352	superseded	ruby	robot-simulator	class Robot\n  DIRECTIONS_TO_X_AND_Y_ADVANCEMENT = {\n    north: [0,  1],\n    east:  [1,  0],\n    south: [0, -1],\n    west:  [-1, 0],\n  }\n\n  def orient(direction)\n    validate_direction(direction)\n    @bearing = direction\n  end\n\n  def bearing\n    @bearing\n  end\n\n  def at(x, y)\n    @x, @y = x, y\n  end\n\n  def coordinates\n    [@x, @y]\n  end\n\n  def advance\n    ax, ay = DIRECTIONS_TO_X_AND_Y_ADVANCEMENT[bearing]\n    @x += ax\n    @y += ay\n  end\n\n  def turn_right\n    orient_by_index (directions.index(bearing) + 1) % directions.length\n  end\n\n  def turn_left\n    orient_by_index directions.index(bearing) - 1\n  end\n\n  private\n\n  def orient_by_index(i)\n    orient directions[i]\n  end\n\n  def directions\n    DIRECTIONS_TO_X_AND_Y_ADVANCEMENT.keys\n  end\n\n  def validate_direction(direction)\n    unless directions.include?(direction)\n      raise ArgumentError, "Unknown direction."\n    end\n  end\nend\n\n\nclass Simulator\n  MAP = {\n    "L" => :turn_left,\n    "R" => :turn_right,\n    "A" => :advance\n  }\n\n  def place(robot, x: 0, y: 0, direction: :north)\n    robot.at(x, y)\n    robot.orient(direction)\n  end\n\n  def evaluate(robot, instruction_string)\n    instructions(instruction_string).each do |instruction|\n      robot.public_send(instruction)\n    end\n  end\n\n  def instructions(string)\n    string.chars.map { |char| MAP.fetch(char) }\n  end\nend	\N	f	2	1	2014-06-23 09:09:00	2014-06-23 09:09:00	5	robot-simulator.rb
16	7	7b9073f59139b2be2bb4b97c	hibernating	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\nimport Data.Char\n\nareaCode, number, prettyPrint, getPhone :: String -> String\nareaCode = take 3\n\nnumber str = getPhone digits\n  where digits = filter isDigit str\n\ngetPhone str\n    | dLength == 10                    = str\n    | dLength == 11 && head str == '1' = tail str\n    | otherwise                        = replicate 10 '0'\n  where\n    dLength = length str\n\nprettyPrint str = '(' : areaCode phone ++ ") " ++ p1 ++ "-" ++ p2\n  where\n    phone = number str\n    (p1,p2) = splitAt 3 (drop 3 phone)	\N	f	0	1	2014-06-15 20:15:14	2014-06-15 20:15:14	6	Phone.hs
17	7	2597a07a3c3b5d5c2c2c0319	superseded	ruby	bob	class Bob\n\t\n\tdef hey(sentence)\n\t\tcase \n\t\twhen silence?(sentence)\n\t\t\t'Fine. Be that way.'\n\t\twhen question?(sentence)\n\t\t\t'Sure.'\n\t\twhen shouting?(sentence)\n\t\t\t'Woah, chill out!'\n\t\telse \n\t\t\t'Whatever.'\n\t\tend\n\tend\n\n\tprivate\n\tdef silence?(sentence)\n\t\tsentence.nil? || sentence == ''\n\tend\n\n\tdef question?(sentence)\n\t\tsentence.end_with?('?')\n\tend\n\n\tdef shouting?(sentence)\n\t\tsentence == sentence.upcase\n\tend\n\nend	\N	f	15	2	2014-06-14 00:38:09	2014-06-14 00:38:09	7	bob.rb
18	7	bbc626692caf10ede1534bc4	hibernating	ruby	bob	class Bob\n  \n  def hey(sentence)\n\n    sentence = '' if sentence.nil?\n\n    case \n    when silence?(sentence)\n      'Fine. Be that way.'\n    when question?(sentence)\n      'Sure.'\n    when shouting?(sentence)\n      'Woah, chill out!'\n    else \n      'Whatever.'\n    end\n  end\n\n  private\n  def silence?(sentence)\n    sentence == ''\n  end\n\n  def question?(sentence)\n    sentence.end_with?('?')\n  end\n\n  def shouting?(sentence)\n    sentence == sentence.upcase\n  end\n\nend	\N	f	3	3	2014-06-16 12:21:13	2014-06-16 12:21:13	7	bob.rb
19	7	35fcdec8dfc4843c067498de	superseded	ruby	bob	class Bob\n\t\n\tdef hey(sentence)\n\t\tcase \n\t\twhen sentence.nil? || sentence == ''\n\t\t\tthen 'Fine. Be that way.'\n\t\twhen sentence[-1] == '?'\n\t\t\tthen 'Sure.'\n\t\twhen sentence == sentence.upcase\n\t\t\tthen 'Woah, chill out!'\n\t\telse 'Whatever.'\n\t\tend\n\tend\n\nend	\N	f	2	1	2014-06-26 10:08:17	2014-06-26 10:08:17	7	bob.rb
20	7	9a26cdc47c63a6a3a83a5728	superseded	clojure	word-count	(ns word-count\n  (:require [clojure.string :as s]))\n\n(defn word-count [words]\n  (-> words\n      (s/replace #"[^\\w\\d\\s]" "")\n      s/lower-case\n      (s/split #"\\s+")\n      frequencies))	\N	f	3	1	2014-06-10 01:02:34	2014-06-10 01:02:34	8	word_count.clj
21	7	eb1ecfc881e0f01ff7a3583d	pending	clojure	word-count	(ns word-count\n  (:require [clojure.string :as s]))\n\n(defn word-count [words]\n  (->> words\n      s/lower-case\n      (re-seq #"\\w+")\n      frequencies))	\N	f	3	2	2014-06-11 10:49:38	2014-06-11 10:49:38	8	word_count.clj
23	7	74d9afded8d59b820e8bfc89	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA dna = map charToRNA dna\n\ncharToRNA :: Char -> Char\ncharToRNA 'T' = 'U'\ncharToRNA  c  =  c	\N	f	0	1	2014-06-20 23:22:20	2014-06-20 23:22:20	9	rna-transcription.hs
25	7	9af1a73551e4eced25c00405	done	ruby	word-count	class Phrase\n    attr_reader :sentence\n\n    def initialize(sentence)\n        @sentence = sentence\n    end\n\n    def word_count\n        results = Hash.new { |hash, key| hash[key] = 0 }\n        words.each do |word|\n            results[word] += 1\n        end\n        results\n    end\n\n    private\n    def words\n        sentence.gsub(/[\\W_]+/, ' ').downcase.split(/[\\s,]+/)\n    end\nend	\N	f	7	2	2014-06-20 07:19:36	2014-06-20 07:19:36	10	word-count.rb
27	7	5c8ea81c0bd50d4b57e8604c	hibernating	javascript	bob	var Bob = function() {};\nmodule.exports = Bob;\n\nBob.prototype.hey = function (mesage) {\n\tlow=0;\n\tchars=0;\n\tfor (var i = mesage.length - 1; i >= 0; i--) {\n\t\tcharacter = mesage.charAt(i);\n\t\tif (character != character.toUpperCase()) {\n    \t\tlow=1;\n    \t\tbreak;\n    \t}\n\t};\n\tchars = /[a-z]/i.test(mesage);\n\tif(!mesage.replace(/\\s/g, '').length){\n\t\treturn "Fine. Be that way!";\n\t}\n\tif ((!low)&&(chars)) {\n\t\treturn "Woah, chill out!";\n\t};\n\tif(mesage.charAt(mesage.length-1) == "?"){\n\t\treturn "Sure.";\n\t}\n\treturn "Whatever.";\n};	\N	f	7	1	2014-06-07 20:35:47	2014-06-07 20:35:47	12	bob.js
28	7	2e7e25bad5630c6a3d8cb8c4	superseded	elixir	scrabble-score	defmodule Scrabble do\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word |> String.codepoints |> Enum.reduce 0, fn(x, acc) -> scoreletter(x) + acc end\n  end\n\n  defp scoreletter(letter) do\n    case String.downcase letter do\n      "a" -> 1\n      "b" -> 3\n      "c" -> 3\n      "d" -> 2\n      "e" -> 1\n      "f" -> 4\n      "g" -> 2\n      "h" -> 4\n      "i" -> 1\n      "j" -> 8\n      "k" -> 5\n      "l" -> 1\n      "m" -> 3\n      "n" -> 1\n      "o" -> 1\n      "p" -> 3\n      "q" -> 10\n      "r" -> 1\n      "s" -> 1\n      "t" -> 1\n      "u" -> 1\n      "v" -> 4\n      "w" -> 4\n      "x" -> 8\n      "y" -> 4\n      "z" -> 10\n       _  -> 0\n    end\n  end\nend	\N	f	2	1	2014-06-05 06:55:08	2014-06-05 06:55:08	13	scrabble.exs
29	7	e833eea18903df47bbc625ea	superseded	elixir	scrabble-score	defmodule Scrabble do\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word |> String.downcase \n         |> String.to_char_list! \n         |> Enum.reduce 0, fn(x, acc) -> HashDict.get(scores, x, 0) + acc end\n  end\n  \n  defp scores do\n    Enum.zip(?a..?z, [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]) |> HashDict.new\n  end\n\nend	\N	f	2	2	2014-06-05 13:01:39	2014-06-05 13:01:39	13	scrabble.exs
30	7	4f6aa774c1506bcef73fc2fb	superseded	elixir	scrabble-score	defmodule Scrabble do\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word |> String.downcase\n         |> String.codepoints \n         |> Enum.reduce 0, fn(x, acc) -> HashDict.get(scores, binary_to_atom(x), 0) + acc end\n  end\n  \n  defp scores do\n    HashDict.new([a: 1, b: 3, c: 3, d: 2, e: 1,\n                  f: 4, g: 2, h: 4, i: 1, j: 8,\n                  k: 5, l: 1, m: 3, n: 1, o: 1,\n                  p: 3, q: 10, r: 1, s: 1, t: 1,\n                  u: 1, v: 4, w: 4, x: 8, y: 4 , z: 10])\n  end\n\nend	\N	f	0	3	2014-06-14 21:30:12	2014-06-14 21:30:12	13	scrabble.exs
31	7	4568ae862af3eb2107284ec3	superseded	elixir	scrabble-score	defmodule Scrabble do\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word |> String.upcase \n         |> String.to_char_list!\n         |> Enum.reduce 0, fn(x, acc) -> HashDict.get(scores, x, 0) + acc end\n  end\n\n  defp scores do\n    values = [\n    { 'AEIOULNRST', 1 },\n    { 'DG', 2 },\n    { 'BCMP', 3 },\n    { 'FHVWY', 4 },\n    { 'K', 5 },\n    { 'JX', 8 },\n    { 'QZ', 10 }\n  \t]\n  \tlc {letters, value} inlist values do\n  \t  lc letter inlist letters, do: {letter, value}\n  \tend |> List.flatten |> HashDict.new\n  end\nend	\N	f	0	4	2014-06-18 03:50:02	2014-06-18 03:50:02	13	scrabble.exs
32	7	a09099aa2f044539f611415d	done	elixir	scrabble-score	defmodule Scrabble do\n\n  @values [\n    { 'AEIOULNRST', 1 },\n    { 'DG', 2 },\n    { 'BCMP', 3 },\n    { 'FHVWY', 4 },\n    { 'K', 5 },\n    { 'JX', 8 },\n    { 'QZ', 10 }\n    ]\n\n  @doc """\n  Calculate the scrabble score for the word.\n  """\n  @spec score(String.t) :: non_neg_integer\n  def score(word) do\n    word |> String.upcase \n         |> String.to_char_list!\n         |> Enum.reduce 0, fn(x, acc) -> HashDict.get(scores, x, 0) + acc end\n  end\n\n  defp scores do\n  \tHashDict.new(lc {letters, value} inlist @values, letter inlist letters, do: {letter, value}) \n  end\nend	\N	f	0	5	2014-06-26 13:29:50	2014-06-26 13:29:50	13	scrabble.exs
33	7	e94b33ae0d59e4b3ae1274d3	pending	ruby	difference-of-squares	class Squares\n\n  def initialize(limit)\n    @limit = limit\n  end\n\n  def square_of_sums\n    @square_of_sums ||= 1.upto(@limit).reduce(:+) ** 2\n  end\n\n  def sum_of_squares\n    @sum_of_squares ||= 1.upto(@limit).map { |x| x ** 2 }.reduce(:+)\n  end\n\n  def difference\n    square_of_sums - sum_of_squares\n  end\n\nend	\N	f	1	1	2014-06-15 10:16:54	2014-06-15 10:16:54	14	squares.rb
74	7	e928e01ffa3bf8221c175484	hibernating	haskell	bob	module Bob where\n\nimport Data.Char\n\n\nresponseFor :: String -> String\nresponseFor [] = "Fine. Be that way!"\nresponseFor text\n    | isShouted = "Woah, chill out!"\n    | isQuestion = "Sure."\n    | isSilence = "Fine. Be that way!"\n    | otherwise = "Whatever."\n    where letters = filter isLetter text\n          isShouted = all isUpper letters && not (null letters)\n          isQuestion = last text == '?'\n          isSilence = all isSpace text	\N	f	2	3	2014-06-24 17:40:05	2014-06-24 17:40:05	30	bob.hs
35	7	da0e61ada822da4701f9db4c	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @letters = Letters.from_word(word)\n  end\n\n  def match(words)\n    words.select { |w| anagram?(w) }\n  end\n\n  private\n\n  def anagram?(word)\n    @letters == Letters.from_word(word)\n  end\nend\n\nclass Letters\n  def self.from_word(word)\n    word.chars.sort\n  end\nend	\N	f	5	3	2014-06-15 01:04:23	2014-06-15 01:04:23	16	anagram.rb
36	7	4f8f3d5b11543f681f19ec21	superseded	ruby	anagram	module Word \n  def letters(word)\n    word.chars.sort\n  end\nend\n\nclass Anagram\n  include Word\n\n  def initialize(word)\n    @letters = letters(word)\n  end\n\n  def match(words)\n    words.select { |w| anagram?(w) }\n  end\n\n  private\n\n  def anagram?(word)\n    @letters == letters(word)\n  end\nend	\N	f	1	4	2014-06-17 08:19:52	2014-06-17 08:19:52	16	anagram.rb
37	7	fad3df9712d1130f1b6ebabc	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(words)\n    words.select { |w| @word.anagram_of?(w) }\n  end\nend\n\nclass Word < String\n  def anagram_of?(word)\n    letters(self) == letters(word)\n  end\n\n  private\n\n  def letters(word)\n    word.chars.sort\n  end\nend	\N	f	2	5	2014-06-23 09:45:14	2014-06-23 09:45:14	16	anagram.rb
38	7	4b44542ca331102d742978e2	superseded	ruby	anagram	class Anagram < Struct.new(:word)\n  def match(potential_anagrams)\n    potential_anagrams.each_with_object([]) do |potential_anagram, anagrams|\n      anagrams << potential_anagram if anagram?(potential_anagram)\n    end\n  end\n\n  private\n\n  def anagram?(potential_anagram)\n    word.split('').sort == potential_anagram.split('').sort\n  end\nend	\N	f	0	1	2014-06-23 17:02:03	2014-06-23 17:02:03	16	anagram.rb
39	7	3c256f6eed77eddee578ce1f	superseded	ruby	anagram	class Anagram < Struct.new(:word)\n  def match(potential_anagrams)\n    potential_anagrams.select { |potential_anagram| anagram?(potential_anagram) }\n  end\n\n  private\n\n  def anagram?(potential_anagram)\n    word.chars.sort == potential_anagram.chars.sort\n  end\nend	\N	f	4	2	2014-06-25 06:11:45	2014-06-25 06:11:45	16	anagram.rb
40	7	52699b76b648086e5069713e	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    if a.eql?(b)\n      0\n    else\n      difference(a, b)\n    end\n  end\n\nprotected\n  def self.difference(a, b)\n    ret = 0\n    a.split('').each_with_index do |letter, index|\n      ret += 1 if letter != b[index] && b.length > index\n    end\n    ret\n  end\nend	\N	f	0	1	2014-06-09 03:44:35	2014-06-09 03:44:35	17	hamming.rb
41	7	3a43cc915023464820781e07	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    if a.eql?(b)\n      0\n    else\n      difference(a, b)\n    end\n  end\n\nprotected\n  def self.difference(a, b)\n    [a.length, b.length].min.times.inject(0) do |result, index|\n      result += 1 if a[index] != b[index]\n      result\n    end\n  end\nend	\N	f	5	4	2014-06-10 02:18:45	2014-06-10 02:18:45	17	hamming.rb
42	7	f8aeab914374d71f5c50f07a	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    if a.eql?(b)\n      0\n    else\n      difference(a, b)\n    end\n  end\n\nprotected\n  def self.difference(a, b)\n    ret = 0\n    a.split('').take(b.length).each_with_index do |letter, index|\n      ret += 1 if letter != b[index]\n    end\n    ret\n  end\nend	\N	f	7	2	2014-06-10 10:37:52	2014-06-10 10:37:52	17	hamming.rb
43	7	bb2d96afcb96be83fb6e1034	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    if a.eql?(b)\n      0\n    else\n      difference(a, b)\n    end\n  end\n\nprotected\n  def self.difference(a, b)\n    ret = 0\n    [a.length, b.length].min.times do |index|\n      ret += 1 if a[index] != b[index]\n    end\n    ret\n  end\nend	\N	f	1	3	2014-06-26 07:38:36	2014-06-26 07:38:36	17	hamming.rb
44	7	046acb2a825c60170ee62289	done	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    if a.eql?(b)\n      0\n    else\n      difference(a, b)\n    end\n  end\n\nprotected\n  def self.difference(a, b)\n    [a.length, b.length].min.times.count do |index|\n      a[index] != b[index]\n    end\n  end\nend	\N	f	3	5	2014-06-29 22:37:36	2014-06-29 22:37:36	17	hamming.rb
45	7	c0d5c1a8f42c6122c4d6497c	superseded	haskell	nucleotide-count	module DNA(count,nucleotideCounts) where\n\nimport Data.List (foldl')\nimport qualified Data.Map.Strict as Map\n\ncount :: Char -> String -> Int\ncount c = length . filter (== valid) where\n  valid = if elem c "ACGTU" then c\n          else error ("invalid nucleotide " ++ (show c))\n\nnucleotideCounts :: String -> Map.Map Char Integer\nnucleotideCounts = foldl' letters empty where\n  letters m c = Map.insertWith (+) c 1 m\n  empty = Map.fromList [('A',0),('C',0),('G',0),('T',0)]	\N	f	3	1	2014-06-14 07:35:18	2014-06-14 07:35:18	18	DNA.hs
46	7	7c8cf08680c5afd1eadd9c73	superseded	haskell	nucleotide-count	module DNA\n       ( count\n       , nucleotideCounts\n       , hammingDistance\n       ) where\n\nimport Data.List (foldl')\nimport qualified Data.Map.Strict as Map\n\ncount :: Char -> String -> Int\ncount c = length . filter (== valid) where\n  valid = if elem c "ACGTU" then c\n          else error ("invalid nucleotide " ++ show c)\n\nnucleotideCounts :: String -> Map.Map Char Integer\nnucleotideCounts = foldl' letters empty where\n  letters m c = Map.insertWith (+) c 1 m\n  empty = Map.fromList [('A',0),('C',0),('G',0),('T',0)]\n\n\nhammingDistance :: Integer\nhammingDistance = 0	\N	f	0	2	2014-06-22 22:58:25	2014-06-22 22:58:25	18	DNA.hs
47	7	b489f3ba456e3501e0d94fb5	done	haskell	nucleotide-count	module DNA(count, nucleotideCounts) where\n\nimport Data.List (foldl')\nimport qualified Data.Map.Strict as Map\n\ncount :: Char -> String -> Int\ncount c = length . filter (== valid) where\n  valid = if elem c "ACGTU" then c\n          else error ("invalid nucleotide " ++ show c)\n\nnucleotideCounts :: String -> Map.Map Char Integer\nnucleotideCounts = foldl' letters empty where\n  letters m c = Map.insertWith (+) c 1 m\n  empty = Map.fromList [('A',0),('C',0),('G',0),('T',0)]	\N	f	4	3	2014-06-28 21:45:27	2014-06-28 21:45:27	18	DNA.hs
48	7	49443673a585f71adb458a29	done	go	accumulate	package accumulate\n\nfunc Accumulate(in []string, f func(string) string) (out []string) {\n\tout = make([]string, len(in))\n\n\tfor i, _ := range in {\n\t\tout[i] = f(in[i])\n\t}\n\n\treturn out\n}	\N	f	2	1	2014-06-06 19:42:03	2014-06-06 19:42:03	19	accumulate.go
50	7	613fe8005870edb789a587ef	superseded	ruby	proverb	class Proverb\n    def initialize(*missing_things, qualifier: nil)\n        @missing_things = missing_things\n        @qualifier = qualifier + " " if qualifier\n        make_proverb\n    end\n\n    def to_s\n        @proverb\n    end\n\n    private\n\n    def make_proverb\n        @proverb = @missing_things.each_cons(2).reduce("") do |text, missing_pair|\n            text << line_from(missing_pair[0], missing_pair[1])\n        end\n        @proverb << last_line\n    end\n\n    def line_from(wanted, lost)\n        "For want of a #{wanted} the #{lost} was lost.\\n"\n    end\n\n    def last_line\n        "And all for the want of a #{@qualifier}#{@missing_things[0]}."\n    end\nend	\N	f	3	2	2014-06-14 23:27:19	2014-06-14 23:27:19	20	proverb.rb
51	7	df6126c53d1d7fc283b07ed6	superseded	ruby	proverb	class Proverb\r\n  def initialize(*missing_things, qualifier: nil)\r\n    @missing_things = missing_things\r\n    @qualifier = qualifier + " " if qualifier\r\n  end\r\n\r\n  def to_s\r\n    @proverb ||= make_proverb\r\n  end\r\n\r\n  private\r\n  def make_proverb\r\n    (0...@missing_things.length - 1).map { |i|\r\n        line_from @missing_things[i], @missing_things[i + 1]\r\n    }.join << last_line\r\n  end\r\n\r\n  def line_from(wanted, lost)\r\n    "For want of a #{wanted} the #{lost} was lost.\\n"\r\n  end\r\n\r\n  def last_line\r\n    "And all for the want of a #{@qualifier}#{@missing_things[0]}."\r\n  end\r\nend\r	\N	f	3	3	2014-06-17 15:28:01	2014-06-17 15:28:01	20	proverb.rb
52	7	0efa04b62d7575b04b1db6c8	superseded	ruby	proverb	class Proverb\n  def initialize(*missing_things, qualifier: nil)\n    @missing_things = missing_things\n    @qualifier = qualifier\n  end\n\n  def to_s\n    @proverb ||= make_proverb\n  end\n\n  private\n\n  def make_proverb\n    @missing_things.each_cons(2).map { |wanted, lost|\n      line_from(wanted, lost)\n    }.join << last_line\n  end\n\n  def line_from(wanted, lost)\n    "For want of a #{wanted} the #{lost} was lost.\\n"\n  end\n\n  def last_line\n    "And all for the want of a #{@qualifier} #{@missing_things[0]}.".squeeze(" ")\n  end\nend	\N	f	0	4	2014-06-17 15:51:25	2014-06-17 15:51:25	20	proverb.rb
53	7	cf8496a993cf8687d7774659	done	ruby	proverb	class Proverb\r\n  def initialize(*missing_things, qualifier: nil)\r\n    @missing_things = missing_things\r\n    @first_wanted = @missing_things[0]\r\n    @qualifier = qualifier\r\n  end\r\n\r\n  def to_s\r\n    @proverb ||= make_proverb\r\n  end\r\n\r\n  private\r\n\r\n  def make_proverb\r\n    @missing_things.each_cons(2).map { |wanted, lost|\r\n      line_from(wanted, lost)\r\n    }.push(last_line).join\r\n  end\r\n\r\n  def line_from(wanted, lost)\r\n    "For want of a #{wanted} the #{lost} was lost.\\n"\r\n  end\r\n\r\n  def last_line\r\n    "And all for the want of a #{@qualifier} #{@first_wanted}.".squeeze(" ")\r\n  end\r\nend	\N	f	1	5	2014-06-19 02:22:40	2014-06-19 02:22:40	20	proverb.rb
54	7	0f6465a296a01e84062d4b5b	pending	perl5	grains	use strict;\nuse Memoize;\nmemoize('Grains::square');\n\npackage Grains;\n\nsub square($) {\n    my $n = shift;\n    return 1 if $n == 1;\n    return square($n - 1) + square($n - 1);\n}\n\nsub total {\n    my $sum = 0;\n    for (1 .. 64) {\n        $sum += square($_);\n    }\n    return $sum;\n}\n\n1;	\N	f	0	1	2014-06-20 05:41:33	2014-06-20 05:41:33	21	Grains.pm
55	7	f1d0566224626be78606c0df	pending	ruby	leap	class Year\n\tdef Year.leap?(year)\n\t\tif (year%400 == 0)\n\t\t\treturn true\n\t\telsif(year%100 == 0)\n\t\t\treturn false\n\t\telsif (year%4 == 0)\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend 	\N	f	10	1	2014-06-07 19:03:38	2014-06-07 19:03:38	22	year.rb
56	7	c0c91a7a395df46eb1d0738a	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    String.downcase(sentence)\n    |>\n    String.replace(%r/[^a-z0-9]/," ")\n    |>\n    String.split()\n    |>\n    List.foldl(HashDict.new(),\n      fn x, dict ->\n        Dict.update(dict, x, 1, fn(y) -> \n        y + 1 end) \n      end)\n  end\nend	\N	f	7	1	2014-06-16 02:47:11	2014-06-16 02:47:11	23	word_count.exs
57	7	c21b47e664bfae6f55f8423f	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    String.downcase(sentence)\n    |>\n    String.codepoints\n    |>\n    Enum.filter(fn(x) -> Regex.match?(%r/[a-z0-9\\s]/, x) end)\n    |>\n    Enum.join\n    |>\n    String.split()\n    |>\n    List.foldl(HashDict.new(),\n      fn x, dict ->\n        Dict.update(dict, x, 1, fn(y) -> \n        y + 1 end) \n      end)\n  end\nend	\N	f	3	2	2014-06-17 09:35:52	2014-06-17 09:35:52	23	word_count.exs
58	7	7429288d769ec5f4a9e8700e	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    Regex.scan(%r/[a-z0-9\\s]/, String.downcase(sentence)) \n    |>\n    Enum.join\n    |>\n    String.split()\n    |>\n    List.foldl(HashDict.new(),\n      fn x, dict ->\n        Dict.update(dict, x, 1, fn(y) -> \n        y + 1 end) \n      end)\n  end\nend	\N	f	7	3	2014-06-26 04:28:27	2014-06-26 04:28:27	23	word_count.exs
59	7	0a9548210ccf894d22c37b9d	done	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    Regex.scan(%r/[a-z0-9]+/, String.downcase(sentence)) \n    |>\n    List.foldl(HashDict.new(),\n      fn [x], dict ->\n        Dict.update(dict, x, 1, fn(y) -> \n        y + 1 end) \n      end)\n  end\nend	\N	f	1	4	2014-06-30 06:04:28	2014-06-30 06:04:28	23	word_count.exs
60	7	7c283b11d6df3a56d77ebdaf	done	python	bob	#!/usr/bin/env python\n\nclass Bob:\n    def hey(self, input_message):\n        message = Message(input_message)\n\n        if message.is_blank():\n            return "Fine. Be that way!"\n        if message.is_yelling():\n            return "Woah, chill out!"\n        if message.is_question():\n            return "Sure."\n        return 'Whatever.'\n\nclass Message:\n    text = ""\n\n    def __init__(self, input_message):\n        self.text = input_message    \n\n    def is_blank(self):\n        return self.text is None or self.text.strip() == ''\n\n    def is_yelling(self):\n        return self.text.isupper()\n\n    def is_question(self):\n        return self.text.endswith('?')	\N	f	5	2	2014-06-16 13:44:21	2014-06-16 13:44:21	24	bob.py
120	3	4cde85680632d7986aeafef9	done	javascript	bob	var Bob = function () {}\n\nBob.prototype.hey = function (greeting) {\n  if (greeting == "Tom-ay-to, tom-aaaah-to."){\n    return "Whatever.";\n  }\n\n  else if (greeting == 'WATCH OUT!')\n    return "Woah, chill out!"\n\n\n   else if (greeting == 'Does this cryogenic chamber make me look fat?')\n    return "Sure."\n}	\N	f	1	2	2014-05-26 20:14:44	2014-05-26 20:14:44	53	bob_test.js
62	7	5220b4ec2bc8d67be97cf056	superseded	ruby	etl	class ETL\n  def self.transform(legacy)\n    legacy.each_with_object({}) do |old, transformed|\n      old[1].each { |k| transformed[k.downcase] = old[0] }\n    end\n  end\nend	\N	f	2	1	2014-06-13 19:05:36	2014-06-13 19:05:36	25	etl.rb
63	7	a41d64fd93cc722f25749eb7	done	ruby	etl	class ETL\n  def self.transform(legacy)\n    legacy.each_with_object({}) do |old, transformed|\n      score, words = old\n      words.each { |word| transformed[word.downcase] = score }\n    end\n  end\nend	\N	f	8	2	2014-06-20 07:42:13	2014-06-20 07:42:13	25	etl.rb
64	7	df3ac1b908637e73ac5021c6	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn anagrams-for\n  [string words]\n  (let [normalize (fn [s]\n                    (apply str (sort-by identity (str/lower-case s))))\n        normalized-string (normalize string)\n        anagram? (fn [w]\n                   (and \n                    (= (normalize w) normalized-string)\n                    (not (= w string))))]\n    (filter anagram? words)))	\N	f	2	1	2014-06-18 10:35:57	2014-06-18 10:35:57	26	anagram.clj
65	7	e172611f4d3cab8af5cc593d	hibernating	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn anagrams-for\n  [string words]\n  (let [normalize (fn [s] (sort (str/lower-case s)))\n        normalized-string (normalize string)\n        anagram? (fn [w]\n                   (and\n                    (= (normalize w) normalized-string)\n                    (not (= w string))))]\n    (filter anagram? words)))	\N	f	5	2	2014-06-24 09:42:59	2014-06-24 09:42:59	26	anagram.clj
66	7	c26c5ac081918193d707693d	superseded	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(argDate)\n    @start = argDate\n    return date\n  end\n\n  def date\n    gs = 10**9\n    min = 60\n    hr = 60\n    day = 24\n\n    days = gs/(min*hr*day)\n\n    giga_date = @start + days\n  end\n\nend\n\n# Gigasecond.new(Date.new(2011, 4, 25))	\N	f	0	1	2014-06-18 04:25:01	2014-06-18 04:25:01	27	gigasecond.rb
67	7	bfa777eb71f846cba55dc28f	superseded	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    gs = 10**9\n    min = 60\n    hr = 60\n    day = 24\n\n    days = gs/(min*hr*day)\n\n    @birth_date + days\n  end\n\nend	\N	f	0	2	2014-06-24 20:24:03	2014-06-24 20:24:03	27	gigasecond.rb
68	7	9d224db38ac4f86f3f2aa634	pending	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    (@birth_date.to_time + (10**9)).to_date\n  end\n\nend	\N	f	5	3	2014-06-27 06:59:28	2014-06-27 06:59:28	27	gigasecond.rb
70	7	f4136b23b673f904ac7d611c	done	haskell	ocr-numbers	module OCR\n  ( convert ) where\n\nimport Data.Char  (intToDigit)\nimport Data.Maybe (fromMaybe)\nimport Data.List (intercalate)\nimport Data.List.Split (chunksOf)\n\nconvert :: String -> String\nconvert = intercalate "," . map convert' . chunksOf 4 . lines\n  where \n    convert' :: [String] -> String\n    convert' = map (\\k -> fromMaybe '?' $ k `lookup` numbers) -- [Char]\n             . extracts   -- [[String]]\n             . init       -- [String]\n\nextract :: [String] -> ([String],[String])\nextract = unzip . map (splitAt 3)\n\nextracts :: [String] -> [[String]]\nextracts [] = error "impossible happended"\nextracts ("":_) = []\nextracts s = h : extracts t\n  where (h,t) = extract s\n\nnumbers :: [([String],Char)]\nnumbers = zip (extracts raw) ['0'..'9']\n  where\n    raw =\n      [ " _     _  _     _  _  _  _  _ "\n      , "| |  | _| _||_||_ |_   ||_||_|"\n      , "|_|  ||_  _|  | _||_|  ||_| _|"\n      ]	\N	f	2	2	2014-06-27 21:47:49	2014-06-27 21:47:49	28	OCR.hs
71	7	4c24ca913f497d3adac320ea	pending	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle\n  \n  attr_reader :sides\n  def initialize *sides\n    @sides = sides.take(3).sort\n    raise TriangleError unless valid?\n  end\n  \n  def kind\n    @kind ||= %i(equilateral isosceles scalene)[sides.uniq.length-1]\n  end\n  \n  private\n\n  def valid?\n    valid_side_permutations.length == 0\n  end\n  \n  def side_permutations\n    sides.permutation\n  end\n  \n  def valid_side_permutations\n    side_permutations.drop_while{|sides| sides[0] < sides[1]+sides[2]}\n  end\nend	\N	f	2	1	2014-06-09 00:01:57	2014-06-09 00:01:57	29	triangle.rb
72	7	5924266554559c7d11431097	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\n\nresponseFor :: String -> String\nresponseFor [] = "Fine. Be that way!"\nresponseFor text\n    | is_shouted = "Woah, chill out!"\n    | is_question = "Sure."\n    | is_silence = "Fine. Be that way!"\n    | otherwise = "Whatever."\n    where text_length = length text\n          non_space_chars = dropWhile isSpace text\n          chars = filter isLetter non_space_chars\n          is_shouted = all isUpper chars && length chars > 0\n          is_question = last text == '?'\n          is_silence = length non_space_chars == 0 && text_length > 0	\N	f	0	1	2014-06-16 13:21:01	2014-06-16 13:21:01	30	bob.hs
73	7	1077ee13a282e13fc6ce580e	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\n\nresponseFor :: String -> String\nresponseFor [] = "Fine. Be that way!"\nresponseFor text\n    | is_shouted = "Woah, chill out!"\n    | is_question = "Sure."\n    | is_silence = "Fine. Be that way!"\n    | otherwise = "Whatever."\n    where letters = filter isLetter text\n          is_shouted = all isUpper letters && length letters > 0\n          is_question = last text == '?'\n          is_silence = all isSpace text	\N	f	2	2	2014-06-21 18:50:28	2014-06-21 18:50:28	30	bob.hs
282	24	e7bb977dfc0cc0b0049bc12e	superseded	clojure	grade-school	(ns school)\n\n(defn add [db student grade]\n  (update-in db [grade] (comp vec conj) student))\n\n(defn grade [db grade]\n  (get db grade []))\n\n(defn sorted [db]\n  (into {} (map (fn [[k v]] [k (sort v)]) db)))	\N	f	0	1	2014-06-10 20:46:59	2014-06-10 20:46:59	135	grade-school.clj
76	7	39b5eececca383a9c8c806a2	pending	clojure	bob	(ns bob)\n\n(defn response-for\n  [x]\n  (cond\n    (clojure.string/blank? x) "Fine. Be that way!"\n    (and\n      (= x (clojure.string/upper-case x))\n      (not= x (clojure.string/lower-case x))) "Woah, chill out!"\n    (.endsWith x "?") "Sure."\n    :else "Whatever." ))	\N	f	4	1	2014-06-17 08:28:18	2014-06-17 08:28:18	32	bob.clj
77	7	4a7db3ed26823627fc7ca320	pending	javascript	word-count	var words = function(phrase){\n    var word_count = {};\n    var words = phrase.split(/[^w]+/);\n\n    for(var i in words){\n        var word = words[i].toLowerCase();\n\n        if(word.length !== 0){\n            word_count[word] +=1;\n        }\n    }\n\n    return word_count;\n};\n\nmodule.exports = words;	\N	f	1	2	2014-06-15 19:20:54	2014-06-15 19:20:54	33	word-count.js
78	7	3d21109711944e85b0de2c40	superseded	javascript	word-count	var words = function(){\n\n};\n\nmodule.exports = words;	\N	f	3	1	2014-06-29 03:28:02	2014-06-29 03:28:02	33	word-count.js
79	7	8dbb23e5783c378fdb8e9416	superseded	ruby	grains	class Grains\n  # http://en.wikipedia.org/wiki/Wheat_and_chessboard_problem#Solutions\n\n  CHESS_BOARD_SQUARES = 64\n\n  def initialize(number_of_squares = CHESS_BOARD_SQUARES)\n    @number_of_squares = number_of_squares\n  end\n\n  def square(number)\n    2**(number-1)\n  end\n\n  def total\n    # About twice as fast as naively summing all squares.\n    square(@number_of_squares + 1) - 1\n  end\nend	\N	f	3	2	2014-06-13 18:12:18	2014-06-13 18:12:18	34	grains.rb
80	7	7f73c580b8a5e6238cf0d12d	superseded	ruby	grains	class Grains\n  # http://en.wikipedia.org/wiki/Wheat_and_chessboard_problem#Solutions\n\n  CHESS_BOARD_SQUARES = 64\n\n  def initialize(squares = CHESS_BOARD_SQUARES)\n    @squares = squares\n  end\n\n  def square(number)\n    2**(number-1)\n  end\n\n  def total\n    # About twice as fast as naively summing all squares.\n    square(squares + 1) - 1\n  end\n\n  private\n\n  def squares\n    @squares\n  end\nend	\N	f	5	1	2014-06-19 01:54:24	2014-06-19 01:54:24	34	grains.rb
81	7	1d62954ec82f1dda9a99d76d	done	ruby	grains	class Grains\n  # Optimized for readability, not speed.\n  # http://en.wikipedia.org/wiki/Wheat_and_chessboard_problem#Solutions\n\n  CHESS_BOARD_SQUARES = 64\n\n  def square(number)\n    if number == 1\n      1\n    else\n      2 * square(number - 1)\n    end\n  end\n\n  def total\n    1.upto(number_of_squares).inject(0) { |total, num| total + square(num) }\n  end\n\n  private\n\n  def number_of_squares\n    CHESS_BOARD_SQUARES\n  end\nend	\N	f	3	3	2014-06-25 20:11:48	2014-06-25 20:11:48	34	grains.rb
83	7	ac61ed2f8f73e3642a5d3d24	pending	javascript	roman-numerals	var toRoman = function(num) {\n\tvar str = '';\n\tif (num == 0) {\n\t\tstr = 'N';\n\t}\n\telse {\n\t\t// check the 1000s\n\t\tvar thousands = Math.floor(num / 1000);\n\t\tvar hundreds = Math.floor(num % 1000 / 100);\n\t\tvar tens = Math.floor(num % 100 / 10);\n\t\tvar ones = Math.floor(num % 10);\n\t\t//console.log(thousands +'/' +hundreds +'/' +tens +'/' +ones);\n\n\t\tif (thousands) {\n\t\t\tfor (var i = thousands; i > 0; i--) {\n\t\t\t\tstr += 'M';\n\t\t\t}\n\t\t}\n\t\tif (hundreds) {\n\t\t\tvar i = hundreds;\n\t\t\tif (i==9) {\n\t\t\t\tstr += 'CM';\n\t\t\t\ti=0;\n\t\t\t}\n\n\t\t\telse if (i==4) {\n\t\t\t\tstr += 'CD';\n\t\t\t\ti=0;\n\t\t\t}\n\t\t\telse if (i>=5) {\n\t\t\t\tstr+='D';\n\t\t\t\ti -= 5;\n\t\t\t}\n\n\t\t\tfor (i=i;i>0;i--) {\n\t\t\t\tstr+='C';\n\t\t\t}\n\t\t}\n\t\tif (tens) {\n\t\t\tvar i = tens;\n\t\t\tif (i==9) {\n\t\t\t\tstr += 'XC';\n\t\t\t\ti=0;\n\t\t\t}\n\t\t\telse if (i==4) {\n\t\t\t\tstr += 'XL';\n\t\t\t\ti=0;\n\t\t\t}\n\t\t\telse if (i>=5) {\n\t\t\t\tstr+='L';\n\t\t\t\ti -= 5;\n\t\t\t}\n\n\t\t\tfor (i=i;i>0;i--) {\n\t\t\t\tstr+='X';\n\t\t\t}\n\t\t}\n\n\n\t\tif (ones) {\n\t\t\tvar i = ones;\n\t\t\tif (i==9) {\n\t\t\t\tstr += 'IX';\n\t\t\t\ti=0;\n\t\t\t}\n\t\t\telse if (i==4) {\n\t\t\t\tstr += 'IV';\n\t\t\t\ti=0;\n\t\t\t}\n\n\t\t\telse if (i>=5) {\n\t\t\t\tstr+='V';\n\t\t\t\ti -= 5;\n\t\t\t}\n\n\t\t\tfor (i=i;i>0;i--) {\n\t\t\t\tstr+='I';\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n};\nmodule.exports = toRoman;	\N	f	2	1	2014-06-11 19:36:40	2014-06-11 19:36:40	36	roman-numerals.js
84	7	f80dc3a33ae40dad3131e564	pending	ruby	raindrops	require "prime"\n\nclass Raindrops\n  def self.convert n\n    factors = Prime.instance.prime_division(n).map(&:first)\n\n    r = []\n    r << "Pling" if factors.include? 3\n    r << "Plang" if factors.include? 5\n    r << "Plong" if factors.include? 7\n    r << n if r.empty?\n\n    r.join\n  end\nend	\N	f	2	1	2014-06-18 18:36:40	2014-06-18 18:36:40	37	raindrops.rb
85	7	7ffcfe328d09c9b8883011f5	pending	haskell	word-count	module WordCount(wordCount) where\nimport Data.Char\nimport Data.Map(empty,alter,Map)\nimport Data.Text(split,pack,unpack)\n\nwordCount :: String -> Map String Int \nwordCount s = wc (sanitize $ filter present $ symbolSplit s) empty\n  where sanitize = map $ onlyAlphaNumeric . lowerCase\n        onlyAlphaNumeric = filter isAlphaNum\n        lowerCase = map toLower\n        symbolSplit str = map unpack $ split (not . isAlphaNum) $ pack str\n        present = not . null\n\n\nwc :: [String] -> Map String Int -> Map String Int\nwc [] counts = counts\nwc (current:rest) counts = wc rest $ alter inc current counts\n  where inc (Just n) = Just $ n + 1\n        inc Nothing  = Just 1	\N	f	4	1	2014-06-19 10:31:17	2014-06-19 10:31:17	38	WordCount.hs
86	7	13c65fd89a726acb3129fe33	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn nucleotide-counts [dna-string]\n  (let [empty {\\A 0, \\T 0, \\C 0, \\G 0}]\n    (merge-with + empty (frequencies dna-string))))\n\n(defn count [strand dna-string]\n  (let [allowed-nucleotide [\\A \\T \\C \\G \\U]]\n    (if (not (some #{strand} allowed-nucleotide))\n       (throw (Exception. "invalid nucleotide"))))\n\n  (let [dna (nucleotide-counts dna-string)]\n    (get (nucleotide-counts dna-string) strand 0)))	\N	f	0	1	2014-06-13 04:37:04	2014-06-13 04:37:04	39	nucleotide-count.clj
227	26	85226ae9c0b9955b7c8f2efd	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n  var m = make(map[string]int)\n  for score, letters := range letter_values {\n    for i := range letters {\n      var letter = strings.ToLower(letters[i])\n      m[letter] = score\n    }\n  }\n  return m\n}	\N	f	2	2	2014-05-21 10:36:48	2014-05-21 10:36:48	104	etl.go
88	7	b405f4a6355bc89396a21c36	done	clojure	nucleotide-count	(ns dna)\n\n(defn- assert-allowed-strand [strand]\n  (let [allowed-nucleotide #{\\A \\T \\C \\G \\U}]\n    (when-not (allowed-nucleotide strand)\n      (throw (Exception. "invalid nucleotide")))))\n\n(defn nucleotide-counts [dna-stri ng]\n  (let [empty {\\A 0, \\T 0, \\C 0, \\G 0}]\n    (merge empty (frequencies dna-string))))\n\n(defn count [strand dna-string]\n  (assert-allowed-strand strand)\n  (let [dna (nucleotide-counts dna-string)]\n    (get (nucleotide-counts dna-string) strand 0)))	\N	f	2	4	2014-06-21 21:23:10	2014-06-21 21:23:10	39	nucleotide-count.clj
89	7	7e417811d707e76910f70a7f	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn nucleotide-counts [dna-string]\n  (let [empty {\\A 0, \\T 0, \\C 0, \\G 0}]\n    (merge empty (frequencies dna-string))))\n\n(defn count [strand dna-string]\n  (let [allowed-nucleotide #{\\A \\T \\C \\G \\U}]\n    (when (not (allowed-nucleotide strand))\n       (throw (Exception. "invalid nucleotide"))))\n\n  (let [dna (nucleotide-counts dna-string)]\n    (get (nucleotide-counts dna-string) strand 0)))	\N	f	0	3	2014-06-23 10:01:21	2014-06-23 10:01:21	39	nucleotide-count.clj
90	7	36d1d0d64f3a454f6651f2df	superseded	javascript	anagram	function alphagram(s) {\n    return s.toLowerCase().split('').sort().join('');\n}\n\nfunction Anagram(s) {\n    var original = s.toLowerCase();\n    var asAlphagram = alphagram(s);\n    this.match = function(words) {\n        return words.filter(function(word) {\n            return (alphagram(word) === asAlphagram && word !== original);\n        });\n    };\n}\n\nmodule.exports = Anagram;	\N	f	1	2	2014-06-09 17:11:24	2014-06-09 17:11:24	40	anagram.js
91	7	e01e985d9217f732d4632c99	superseded	javascript	anagram	function alphagram(s) {\n    return s.toLowerCase().split('').sort().join('');\n}\n\nfunction Anagram(s) {\n    var original = s.toLowerCase();\n    var asAlphagram = alphagram(s);\n    this.match = function(words) {\n        return words.filter(function(word) {\n            var isAnagram = alphagram(word) === asAlphagram;\n            return isAnagram && word.toLowerCase() !== original;\n        });\n    };\n}\n\nmodule.exports = Anagram;	\N	f	4	3	2014-06-11 14:43:34	2014-06-11 14:43:34	40	anagram.js
92	7	59b95988c6be0b43744f3070	superseded	javascript	anagram	function alphagram(s) {\n    return s.toLowerCase().split('').sort().join('');\n}\n\nfunction Anagram(s) {\n    function isDistinctAnagram(word) {\n        var isAnagram = alphagram(word) === asAlphagram;\n        return isAnagram && word.toLowerCase() !== original;\n    }\n    var original = s.toLowerCase();\n    var asAlphagram = alphagram(s);\n    this.match = function(words) {\n        return words.filter(isDistinctAnagram);\n    };\n}\n\nmodule.exports = Anagram;	\N	f	6	4	2014-06-13 05:48:19	2014-06-13 05:48:19	40	anagram.js
94	7	5ba5265b8c2b352ed2c287e3	superseded	javascript	anagram	function alphagram(s) {\n    return s.toLowerCase().split('').sort().join('');\n}\n\nfunction Anagram(s) {\n    function isDistinct(word) {\n        return word.toLowerCase() !== original;\n    }\n    function isAnagram(word) {\n        return alphagram(word) === asAlphagram;\n    }\n    function isDistinctAnagram(word) {\n        return isDistinct(word) && isAnagram(word);\n    }\n    var original = s.toLowerCase();\n    var asAlphagram = alphagram(s);\n    this.match = function(words) {\n        return words.filter(isDistinctAnagram);\n    };\n}\n\nmodule.exports = Anagram;	\N	f	6	6	2014-06-24 14:57:07	2014-06-24 14:57:07	40	anagram.js
95	7	26d3566b913c10d1d7463f9b	done	javascript	anagram	function Anagram(s) {\n    var original = s.toLowerCase(),\n        asAlphagram = alphagram(s);\n\n    this.match = function(words) {\n        return words.filter(isDistinctAnagram);\n    };\n\n    function isDistinctAnagram(word) {\n        return word.toLowerCase() !== original\n            && alphagram(word) === asAlphagram;\n    }\n}\n\nfunction alphagram(s) {\n    return s.toLowerCase().split('').sort().join('');\n}\n\nmodule.exports = Anagram;	\N	f	5	7	2014-06-26 12:29:07	2014-06-26 12:29:07	40	anagram.js
96	7	f8bd1eaa71bcd90d683825d7	superseded	javascript	anagram	function alphagram(s) {\n    return s.toLowerCase().split('').sort().join('');\n}\n\nfunction Anagram(s) {\n    this.original = s.toLowerCase();\n    this.alphagram = alphagram(s);\n}\n\nAnagram.prototype.match = function(words) {\n    return words.filter(function(word) {\n        if (alphagram(word) === this.alphagram && word !== this.original)\n            return word;\n    }, this);\n}\n\nmodule.exports = Anagram;	\N	f	0	1	2014-06-27 05:59:16	2014-06-27 05:59:16	40	anagram.js
97	7	cdf1c8da103764ede507773b	pending	perl5	binary	use 5.10.0;\n\nuse strict;\n\npackage Binary;\n\nuse List::AllUtils qw/ sum /;\n\nsub new {\n    my( $class,$value ) = @_;\n    my $self = [ $value =~ /\\D/ ? () : split '', reverse $value ];\n    bless $self, $class;\n}\n\nsub to_decimal {\n    my $self = shift;\n\n    return sum 0, map { 2**$_ } grep { $self->[$_] } 0..$#{$self};\n}\n\n1;	\N	f	2	1	2014-06-06 04:21:27	2014-06-06 04:21:27	41	Binary.pm
121	3	3fc46588e59d9f737f5d3f86	superseded	javascript	nucleotide-count	var DNA = function(str) {\n\tthis.sequence = str;\n\tthis.nucleotideCounts;\n\tvar doneCounting = false;\n\n\twhile (!doneCounting){\n\t\tvar counts = {A: 0, T: 0, C: 0, G: 0};\n\t\tfor (var i = 0; i < this.sequence.length; i++) {\n\t\t\tcounts[this.sequence[i]] ++;\n\t\t}\n\t\tthis.nucleotideCounts = counts;\n\t\tdoneCounting = true;\n\t}\n};\n\nDNA.prototype.count = function(str) {\n\tvar valid = ["A", "C", "G", "T", "U"];\n\n\tfor (var i = 0; i < valid.length; i++) {\n\t\tif (str == valid[i]) {\n\t\t\tif (this.nucleotideCounts[str]) {\n\t\t\t\treturn this.nucleotideCounts[str];\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\tthrow "Invalid Nucleotide";\n};	\N	f	0	1	2014-04-26 21:58:05	2014-04-26 21:58:05	54	nucleotide-count.js
100	7	9e1b4059722873d734f6c820	done	python	rna-transcription	\r\nclass DNA(object):\r\n\tdef __init__(self,dna):\r\n\t\tself.dna = dna\r\n\r\n\tdef to_rna(self):\r\n\t\treturn self.dna.replace('T','U')\r\n\r\n\r\n\r\n\r\n\r	\N	f	4	1	2014-07-02 02:36:40	2014-07-02 02:36:40	43	dna.py
101	7	a94e8614ac7027ce3eaf77eb	pending	javascript	meetup	lol Date objects.	\N	f	2	1	2014-06-23 06:57:19	2014-06-23 06:57:19	44	meetup.js
102	7	065f106f0c09e5d2d11b8e92	pending	javascript	phone-number	module.exports = (function() {\n  'use strict';\n\n  function PhoneNumber(pn) {\n    var areaCode, prefix, lineNumber,\n        sanitize = function(pn) {\n          var numbers = pn.match(/\\d+/g).join('');\n          if (numbers.length === 11 && numbers[0] === '1') {\n            numbers =  numbers.slice(1);\n          }\n\n          if (numbers.length !== 10) {\n            return '0000000000';\n          }\n\n          return numbers;\n        },\n        tokenize = function(pn) {\n          areaCode = pn.slice(0, 3);\n          prefix = pn.slice(3, 6);\n          lineNumber = pn.slice(6, 10);\n        },\n        number = sanitize(pn);\n\n    tokenize(number);\n \n    this.number = function() {\n      return number;\n    };\n    \n    this.areaCode = function() {\n      return areaCode;\n    };\n\n    this.toString = function() {\n      return '(' + areaCode + ') ' + prefix + '-' + lineNumber;\n    };\n  };\n\n  return PhoneNumber;\n})();	\N	f	2	1	2014-06-17 10:39:15	2014-06-17 10:39:15	45	phone-number.js
103	7	60b09a2458fe2baac498cc5d	superseded	ruby	robot-name	module RandomName\n  def self.next\n    chars.join\n  end\n\n  private\n\n  def self.chars\n    of(['A','Z']).take(2) + of(0..9).take(3)\n  end\n\n  def self.of(options)\n    return to_enum(:of, options) unless block_given?\n    loop { yield options.to_a.sample }\n  end\nend\n\nclass Robot\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = RandomName.next\n  end\n\n  attr_reader :name\nend	\N	f	1	2	2014-06-17 12:30:56	2014-06-17 12:30:56	46	robot-name.rb
104	7	346d6c7cc2cf38a795460cb2	done	ruby	robot-name	class Robot\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = RandomName.next\n  end\n\n  attr_reader :name\nend\n\nclass RandomName\n  def self.next\n    @name_creator ||= new\n    @name_creator.next\n  end\n\n  def next\n    chars.join\n  end\n\n  private\n\n  def chars\n    sample('A'..'Z', take: 2) +\n      sample('0'..'9', take: 3)\n  end\n\n  def sample(choices, take: 1)\n    choices.to_a.sample(take)\n  end\nend	\N	f	0	3	2014-06-20 04:52:01	2014-06-20 04:52:01	46	robot-name.rb
105	7	5a6c656cdcc80c06a7282b00	superseded	ruby	robot-name	class RandomName\n  def to_s\n    random_letter + random_letter + padded_number_below_1000\n  end\n\n  private\n\n  def random_letter\n    format '%c', Random.rand(26) + 'A'.ord\n  end\n\n  def padded_number_below_1000\n    format '%03d', Random.rand(1000)\n  end\nend\n\nclass Robot\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = RandomName.new.to_s\n  end\n\n  attr_reader :name\nend	\N	f	2	1	2014-06-26 07:56:31	2014-06-26 07:56:31	46	robot-name.rb
106	7	a334d7e7a8bf1419f6697751	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase) ->\n        "Fine. Be that way!"\n      shouting?(phrase) -> \n        "Woah, chill out!" \n      question?(phrase) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  def shouting?(phrase) do\n    if (String.upcase(phrase) == phrase), do: true\n  end\n\n  def question?(phrase) do\n    if (String.ends_with?(phrase, "?")), do: true\n  end\n\n  def silence?(phrase) do\n    !Regex.match?(%r/\\w/, phrase)\n  end\nend	\N	f	0	1	2014-06-07 09:35:08	2014-06-07 09:35:08	47	bob.exs
107	7	4b822dfef4c7f3070978c144	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase) ->\n        "Fine. Be that way!"\n      shouting?(phrase) -> \n        "Woah, chill out!" \n      question?(phrase) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  def shouting?(phrase) do\n    String.upcase(phrase) == phrase\n  end\n\n  def question?(phrase) do\n    String.ends_with?(phrase, "?")\n  end\n\n  def silence?(phrase) do\n    Regex.match?(%r/^$/, String.strip(phrase))\n  end\nend	\N	f	3	2	2014-06-11 09:32:46	2014-06-11 09:32:46	47	bob.exs
108	7	8948759af2e4726e98248a0d	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase) ->\n        "Fine. Be that way!"\n      shouting?(phrase) -> \n        "Woah, chill out!" \n      question?(phrase) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  def shouting?(phrase) do\n    String.upcase(phrase) == phrase\n  end\n\n  def question?(phrase) do\n    String.ends_with?(phrase, "?")\n  end\n\n  def silence?(phrase) do\n    "" == String.strip(phrase)\n  end\nend	\N	f	4	3	2014-06-15 03:16:21	2014-06-15 03:16:21	47	bob.exs
109	7	c933d68d7402895ca652ac02	done	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase) ->\n        "Fine. Be that way!"\n      shouting?(phrase) -> \n        "Woah, chill out!" \n      question?(phrase) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp shouting?(phrase) do\n    String.upcase(phrase) == phrase\n  end\n\n  defp question?(phrase) do\n    String.ends_with?(phrase, "?")\n  end\n\n  defp silence?(phrase) do\n    "" == String.strip(phrase)\n  end\nend	\N	f	3	4	2014-06-16 16:58:16	2014-06-16 16:58:16	47	bob.exs
112	7	8f9f40a362a040a2a2ce4177	done	go	etl	// Package etl contains logic to transform scrabble scores to the new format.\npackage etl\n\nimport "strings"\n\n// Transform transforms the given mapping of scrabble letter scores to the new format.\n// Before: map[int][]string{1: {"A", "E"}, 2: {"D", "G"}}\n// After: map[string]int{"a": 1, "d": 2, "e": 1, "g": 1}\nfunc Transform(old map[int][]string) map[string]int {\n\tnew := make(map[string]int)\n\tfor score, letters := range old {\n\t\tfor _, letter := range letters {\n\t\t\tnew[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn new\n}	\N	f	4	1	2014-06-26 02:37:23	2014-06-26 02:37:23	49	etl.go
114	7	484f450d15065c1d71848366	superseded	ruby	crypto-square	class Crypto\n\n  def initialize plaintext\n    @plaintext = plaintext\n  end\n\n  def normalize_plaintext\n    @plaintext.gsub(/\\W/,'').downcase\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.length).ceil\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan /.{#{size}}|.+/\n  end\n\n  def ciphertext\n    plaintext_segments.each_with_object(Array.new(size,'')) do |seg,ary|\n        seg.each_char.with_index do |chr,i|\n          ary[i] += chr # why doesn't the shovel (<<) operator work?\n      end\n    end.join\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(/.{#{size}}|.+/).join " "\n  end\n\n  # transpose raises an IndexError if the length of a subarray doesn't match\n  # def ciphertext\n  #     normalize_plaintext.chars\n  #                        .each_slice(size)\n  #                        .entries\n  #                        .transpose\n  #                        .join\n  # end\n\nend	\N	f	0	1	2014-06-06 02:22:26	2014-06-06 02:22:26	51	crypto.rb
115	7	b9e76ec88170faa41ceb91c0	pending	ruby	crypto-square	class Crypto\n\n  def initialize plaintext\n    @plaintext = plaintext\n  end\n\n  def normalize_plaintext\n    @plaintext.gsub(/\\W/,'').downcase\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.length).ceil\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan /.{#{size}}|.+/\n  end\n\n  def ciphertext\n    plaintext_segments.each_with_object(Array.new(size,'')) do |seg,ary|\n        seg.each_char.with_index do |chr,i|\n          ary[i] += chr # why doesn't the shovel (<<) operator work?\n      end\n    end.join\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(/.{1,5}/).join " "\n  end\n\n  # transpose raises an IndexError if the length of a subarray doesn't match\n  # def ciphertext\n  #     normalize_plaintext.chars\n  #                        .each_slice(size)\n  #                        .entries\n  #                        .transpose\n  #                        .join\n  # end\n\nend	\N	f	6	2	2014-06-23 08:41:59	2014-06-23 08:41:59	51	crypto.rb
116	3	560f48452318cef0783b7189	hibernating	javascript	word-count	﻿function words(phrase){\r\n\t'use strict';\r\n\r\n\tfunction encode_utf8(s) {\r\n\t  return unescape(encodeURIComponent(s));\r\n\t}\r\n\r\n\tvar allWords = encode_utf8(phrase).replace(/[^a-zA-Z0-9 ]+/g,'').toLowerCase().replace(/[ ]+/g, ' ').replace(/^ /, '').replace(/ $/, '').split(' ');\r\n\tvar counts = {};\r\n\r\n\t// Count words\r\n\tfor(var i=0; i<allWords.length; i++){\r\n\t\tif (counts.hasOwnProperty(allWords[i])){\r\n\t\t\tcounts[allWords[i]]++;\r\n\t\t} else{\r\n\t\t\tcounts[allWords[i]] = 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn counts;\r\n}\r\n\r\nmodule.exports = words;	\N	f	0	3	2014-05-02 15:08:33	2014-05-02 15:08:33	52	word-count.js
117	3	f484fe54158c93c38704954e	superseded	javascript	word-count	function words(phrase){\r\n\t'use strict';\r\n\r\n\r\n\tvar allWords = phrase.replace(/[^a-zA-Z0-9 ]+/g,'').toLowerCase().replace(/[ ]+/g, ' ').replace(/^ /, '').replace(/ $/, '').split(' ');\r\n\tvar counts = {};\r\n\r\n\t// Count words\r\n\tfor(var i=0; i<allWords.length; i++){\r\n\t\tif (allWords[i] in counts){\r\n\t\t\tcounts[allWords[i]]++;\r\n\t\t} else{\r\n\t\t\tcounts[allWords[i]] = 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn counts;\r\n}\r\n\r\nmodule.exports = words;	\N	f	0	1	2014-05-06 05:00:28	2014-05-06 05:00:28	52	word-count.js
118	3	09c722fbef50e17df8433e34	superseded	javascript	word-count	function words(phrase){\r\n\t'use strict';\r\n\r\n\r\n\tvar allWords = phrase.replace(/[^a-zA-Z0-9 ]+/g,'').toLowerCase().replace(/[ ]+/g, ' ').replace(/^ /, '').replace(/ $/, '').split(' ');\r\n\tvar counts = {};\r\n\r\n\t// Count words\r\n\tfor(var i=0; i<allWords.length; i++){\r\n\t\tif (allWords[i] in counts){\r\n\t\t\tcounts[allWords[i]]++;\r\n\t\t} else{\r\n\t\t\tcounts[allWords[i]] = 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn counts;\r\n}\r\n\r\nwords.prototype = { constructor: words } \r\n\r\nmodule.exports = words;	\N	f	0	2	2014-05-12 16:33:17	2014-05-12 16:33:17	52	word-count.js
119	3	67c487126bdfe1a888e614c2	superseded	javascript	bob	//	\N	f	1	1	2014-04-22 19:09:18	2014-04-22 19:09:18	53	bob_test.js
707	12	0fd2ade49cf6e82ec83c48a4	superseded	go	grains	package grains\r\n\r\nfunc Square(number int) uint64 {\r\n\treturn uint64(1 << uint64(number-1))\r\n}\r\n\r\nfunc Total() uint64 {\r\n\treturn uint64(1<<63) + (uint64(1<<63) - 1)\r\n}\r	\N	f	1	2	2014-03-17 15:27:00	2014-03-17 15:27:00	328	grains.go
123	3	ca88ba18872e54aebc79efc3	pending	javascript	pascals-triangle	var Triangle = function(numRows) {\n  this.numRows = numRows;\n  this.rows = [[1]];\n  this.lastRow;\n\n  if ( this.numRows !== this.rows.length ) {\n    this.pascalRecursive(this.rows);\n  }\n};\n\nTriangle.prototype.pascalRecursive = function(prevRow) {\n  var row = [1];\n  for ( var j = 1; j <= prevRow.length; j++ ) {\n    if ( j === prevRow.length ) {\n      row.push(1);\n    } else {\n      row.push( prevRow[j] + prevRow[ j - 1 ] );\n    }\n  }\n  this.lastRow = row;\n  this.rows.push( row );\n\n  if ( this.rows.length !== this.numRows ) {\n    this.pascalRecursive( row );\n  }\n};	\N	f	0	1	2014-04-25 14:53:23	2014-04-25 14:53:23	55	pascals-triangle_test.js
124	3	c9d6965950e6b19a8ff9378e	pending	javascript	gigasecond	'use strict';\n\nvar Gigasecond = function (date) {\n    var giga = new Date(Math.pow(10, 12) + date.getTime());\n    giga.setHours(0);\n    giga.setMinutes(0);\n    giga.setSeconds(0);\n    giga.setMilliseconds(0);\n    this.giga = giga;\n    return this;\n};\n\nGigasecond.prototype.date = function () {\n    return this.giga;\n};\n\nmodule.exports = Gigasecond;	\N	f	0	1	2014-04-27 20:29:11	2014-04-27 20:29:11	56	gigasecond.js
126	3	3b5e65d36deed3815b77c62a	done	javascript	allergies	;\nvar allergies = [\n    "eggs", "peanuts", "shellfish", "strawberries",\n    "tomatoes", "chocolate", "pollen", "cats"\n],\nhashFrom = function(score) {\n    return allergies.reduce(function(hash, allergen, i) {\n        hash[allergen] = !!(score >> i & 1);\n        return hash;\n    }, {});\n},\nlistFrom = function(hash) {\n    var list = [], allergen;\n    for(allergen in hash) {\n        if(hash[allergen])\n            list.push(allergen);\n    }\n    return list;\n};\n\nvar Allergies = function(score) {\n    var allergyHash = hashFrom(score),\n    allergyList = listFrom(allergyHash);\n\n    this.list = function() {\n        return allergyList;\n    };\n\n    this.allergicTo = function(allergen) {\n        return allergyHash[allergen];\n    };\n};\n\nmodule.exports = Allergies;	\N	f	0	1	2014-05-05 10:57:07	2014-05-05 10:57:07	58	allergies.js
127	3	c31101c1feb2cbcf9ecfa7dd	done	javascript	secret-handshake	'use strict';\n\nfunction SecretHandshake(code) {\n  if (!+code) throw new Error("Handshake must be a number");\n  this.code = code;\n  this.commandList = ['wink', 'double blink', 'close your eyes', 'jump'];\n};\n\nSecretHandshake.prototype.commands = function() {\n  var result = this.commandList.filter(function(c, i) {\n    return Math.pow(2, i) & this.code;\n  }, this);\n\n  return !(this.code & 10000) ? result : result.reverse();\n};\n\nmodule.exports = SecretHandshake;	\N	f	0	1	2014-04-27 19:00:55	2014-04-27 19:00:55	59	secret-handshake.js
128	3	8a440ea7b57f1de5c3bc2972	superseded	javascript	anagram	function Anagram(str) {\n    this.match = function(candidates) {\n        function sorted(str) {\n            return str.toLowerCase().split("").sort().join("");\n        }\n\n        var sortedStr = sorted(str);\n        return candidates.filter(function(candidate, index) {\n            return candidates[index] !== str &&\n                sorted(candidate) === sortedStr;\n        });\n    };\n}\n\nmodule.exports = Anagram;	\N	f	1	2	2014-04-30 15:28:31	2014-04-30 15:28:31	60	anagram.js
129	3	cdcf03dc6eabbead074bb3aa	superseded	javascript	anagram	function Anagram(str) {\n    this.sorted = function(str) {\n        return str.toLowerCase().split("").sort().join("");\n    };\n\n    this.sortedStr = this.sorted(str);\n\n    this.match = function(candidates) {\n        return candidates.filter(function(candidate) {\n            return candidate !== str &&\n                this.sorted(candidate) === this.sortedStr;\n        }, this);\n    };\n}\n\nmodule.exports = Anagram;	\N	f	1	3	2014-04-30 17:04:00	2014-04-30 17:04:00	60	anagram.js
130	3	3f1009b56ec004c6268abbec	superseded	javascript	anagram	var sorted = function(str) {\n    return str.toLowerCase().split("").sort().join("");\n};\n\nfunction Anagram(str) {\n    var sortedStr = sorted(str);\n\n    this.match = function(candidates) {\n        return candidates.filter(function(candidate) {\n            return candidate !== str &&\n                sorted(candidate) === sortedStr;\n        }, this);\n    };\n}\n\nmodule.exports = Anagram;	\N	f	1	4	2014-05-06 13:09:42	2014-05-06 13:09:42	60	anagram.js
131	3	c22b87d73d05d8fb2f49d09a	superseded	javascript	anagram	var sorted = function(str) {\n    return str.toLowerCase().split("").sort().join("");\n};\n\nfunction Anagram(str) {\n    var sortedStr = sorted(str);\n\n    this.match = function(candidates) {\n        var lowerCaseStr = str.toLowerCase();\n\n        return candidates.filter(function(candidate) {\n            return candidate.toLowerCase() !== lowerCaseStr &&\n                sorted(candidate) === sortedStr;\n        });\n    };\n}\n\nmodule.exports = Anagram;	\N	f	1	5	2014-05-18 09:49:40	2014-05-18 09:49:40	60	anagram.js
132	3	0bbb075eb950e17232c97a1f	superseded	javascript	anagram	var sorted = function(str) {\n    return str.toLowerCase().split("").sort().join("");\n};\n\nfunction Anagram(str) {\n    var sortedStr = sorted(str);\n    var lowerCaseStr = str.toLowerCase();\n\n    this.match = function(candidates) {\n        return candidates.filter(function(candidate) {\n            return candidate.toLowerCase() !== lowerCaseStr &&\n                sorted(candidate) === sortedStr;\n        });\n    };\n}\n\nmodule.exports = Anagram;	\N	f	1	6	2014-05-19 01:42:03	2014-05-19 01:42:03	60	anagram.js
133	3	c4c8f2ccb319c41b54abcad2	superseded	javascript	anagram	function Anagram(str) {\n    var sortedStr = sorted(str);\n    var lowerCaseStr = str.toLowerCase();\n\n    this.match = function(candidates) {\n        return candidates.filter(function(candidate) {\n            return candidate.toLowerCase() !== lowerCaseStr &&\n                sorted(candidate) === sortedStr;\n        });\n    };\n}\n\nvar sorted = function(str) {\n    return str.toLowerCase().split("").sort().join("");\n};\n\nmodule.exports = Anagram;	\N	f	3	7	2014-06-06 12:50:07	2014-06-06 12:50:07	60	anagram.js
136	4	e43d1f743f065fea826cfbdc	done	haskell	bob	module Bob (responseFor) where\n            \nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x\n  | all isSpace x = "Fine. Be that way!"\n  | any isUpper x && all isUpper (filter isAlpha x) = "Woah, chill out!"\n  | last x == '?' = "Sure."\n  | otherwise = "Whatever."\n            \n            \n            	\N	f	0	1	2014-01-26 20:11:17	2014-01-26 20:11:17	61	Bob.hs
137	4	83a37dc03832caf5e390a4b1	done	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Bits (testBit)\nimport Data.Word (Word8)\n\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries | Tomatoes | Chocolate\n              | Pollen | Cats deriving (Bounded, Enum, Eq, Show)\n\ntype Allergies = Word8\n\nisAllergicTo :: Allergen -> Allergies -> Bool\nisAllergicTo = flip testBit . fromEnum\n\nallergies :: Allergies -> [Allergen]\nallergies = (`filter` [minBound .. ]) . flip isAllergicTo	\N	f	0	1	2014-05-10 07:03:10	2014-05-10 07:03:10	62	Allergies.hs
138	4	fd3bc992f4a05c3e8d0baf4f	superseded	haskell	raindrops	{-# LANGUAGE ViewPatterns #-}\n\nmodule Raindrops (convert) where\n\nimport Data.List\nimport Control.Monad.Writer\n\n-- wheel optimisation reduces the search space for primes\nwheel = 2:4:2:4:6:2:6:4:2:4:6:6:2:6:4:2:6:4:6:8:4:2:4:2:\n        4:8:6:4:6:2:4:6:2:6:6:4:2:4:6:2:6:4:2:4:2:10:2:10:wheel\n\n-- lazily evaluated list of primes\nprimes = 2 : 3 : 5 : 7 : filter isPrime (scanl (+) 11 wheel)\n  where\n    isPrime n = and [ rem n p > 0 | p <- primesFBy n]\n    primesFBy n = takeWhile (<(n`div`(2*3*5*7))) primes\n\n\nprimeFactors :: Int -> [Int]\nprimeFactors n = go n $ takeWhile (<=n) primes\n  where\n    go 1 _  = []\n    go n [] = []\n    go n pl@(p:ps) | rem n p == 0 = p : go (n`div`p) pl\n                   | p > n        = []\n                   | otherwise    = go n ps\n\nconvert :: Int -> String\nconvert n = execWriter rainspeak\n  where\n    rainspeak = do\n      when (3 `elem` facts) $ tell "Pling"\n      when (5 `elem` facts) $ tell "Plang"\n      when (7 `elem` facts) $ tell "Plong"\n      when (null facts)     $ tell (show n)\n    facts = intersect [3,5,7] $ primeFactors n	\N	f	0	1	2014-01-30 10:41:37	2014-01-30 10:41:37	63	raindrops.hs
139	4	baed88d7b4e97a45848a2db8	superseded	haskell	raindrops	module Raindrops (convert) where\n\nimport Data.List\nimport Control.Monad.Writer\n\n-- primeFactors shamelessly ganked from @rsslldnphy\n-- (http://exercism.io/submissions/f66b3d815f686becb36fd64c)\nprimeFactors = go possiblePrimes\n where\n  go _ 1 = []\n  go (x:xs) n\n    | x `divides` n = x : go (x:xs) (n `div` x)\n    | otherwise     = go xs n\n\n  divides x y = y `rem` x == 0\n  possiblePrimes = 2 : 3 : [f n | n <- [6, 12..], f <- [pred, succ]]\n\nconvert :: Int -> String\nconvert n = execWriter $ do\n    when (3 `elem` facts) $ tell "Pling"\n    when (5 `elem` facts) $ tell "Plang"\n    when (7 `elem` facts) $ tell "Plong"\n    when (null facts)     $ tell (show n)\n  where\n    facts = intersect [3,5,7] $ primeFactors n	\N	f	0	2	2014-02-20 16:55:27	2014-02-20 16:55:27	63	raindrops.hs
140	4	d3c35c8bc7786df66ccf903e	done	haskell	raindrops	module Raindrops (convert) where\n\nimport Data.List\nimport Control.Monad.Writer\n\nconvert :: Int -> String\nconvert n = execWriter $ do\n    when (3 `elem` facts) $ tell "Pling"\n    when (5 `elem` facts) $ tell "Plang"\n    when (7 `elem` facts) $ tell "Plong"\n    when (null facts)     $ tell (show n)\n  where\n    facts = filter (\\x -> rem n x == 0) [3,5,7]	\N	f	0	3	2014-02-26 22:05:50	2014-02-26 22:05:50	63	raindrops.hs
141	4	00227715d28a7f352a290a4e	superseded	haskell	grade-school	module School (School,add,empty,grade,sorted) where\r\nimport Data.List\r\nimport Data.Ord\r\n\r\ntype Student = String\r\ntype Grade = (Int,[Student])\r\ntype School = [Grade]\r\n\r\nempty :: School\r\nempty = []\r\n\r\nadd :: Int -> Student -> School -> School\r\nadd n s a = case ys of\r\n    ((k,ss):zs) -> xs ++ ((k,s:ss):zs)\r\n    [] -> (n,[s]):a\r\n  where\r\n    (xs,ys) = break ((n==).fst) a\r\n\r\ngrade :: Int -> School -> [String]\r\ngrade n = maybe [] snd . find ((n==).fst)\r\n\r\nsortGrade :: Grade -> Grade\r\nsortGrade (n,xs) = (n, sort xs)\r\n\r\nsorted :: School -> School\r\nsorted = sortBy (comparing fst) . map sortGrade\r	\N	f	0	1	2014-02-18 17:21:54	2014-02-18 17:21:54	64	School.hs
142	4	f3b8a1317af61e504723a4da	superseded	haskell	grade-school	module School (School,add,empty,grade,sorted) where\r\nimport qualified Data.IntMap.Lazy as M\r\nimport Data.IntMap.Lazy (IntMap)\r\nimport Data.Maybe\r\nimport Data.List\r\nimport Data.Ord\r\n\r\ntype Student = String\r\ntype Grade = [Student]\r\ntype School = IntMap Grade\r\n\r\nempty :: School\r\nempty = M.empty\r\n\r\nadd :: Int -> Student -> School -> School\r\nadd n s = M.insertWith g n [s] where g [s] = (s:)\r\n\r\ngrade :: Int -> School -> Grade\r\ngrade n = fromMaybe [] . M.lookup n\r\n\r\nsorted :: School -> [(Int,Grade)]\r\nsorted = M.toAscList . M.map sort\r	\N	f	0	2	2014-02-26 16:53:26	2014-02-26 16:53:26	64	School.hs
143	4	84bedc2621033812cf5a7cda	superseded	haskell	grade-school	module School (School,add,empty,grade,sorted) where\r\nimport qualified Data.IntMap.Lazy as M\r\nimport Data.IntMap.Lazy (IntMap)\r\nimport Data.Maybe\r\nimport Data.List\r\nimport Data.Ord\r\n\r\ntype Student = String\r\ntype Grade = [Student]\r\ntype School = IntMap Grade\r\n\r\nempty :: School\r\nempty = M.empty\r\n\r\nadd :: Int -> Student -> School -> School\r\nadd n s = M.insertWith (++) n [s]\r\n\r\ngrade :: Int -> School -> Grade\r\ngrade n = fromMaybe [] . M.lookup n\r\n\r\nsorted :: School -> [(Int,Grade)]\r\nsorted = M.toAscList . M.map sort\r	\N	f	0	3	2014-04-05 09:57:16	2014-04-05 09:57:16	64	School.hs
144	4	193fe390ec70111d0ef8cd9a	done	haskell	grade-school	module School (School,add,empty,grade,sorted) where\r\nimport qualified Data.IntMap.Lazy as M\r\nimport Data.IntMap.Lazy (IntMap)\r\nimport Data.Maybe\r\nimport Data.List\r\nimport Data.Ord\r\n\r\ntype Student = String\r\ntype Grade = [Student]\r\ntype School = IntMap Grade\r\n\r\nempty :: School\r\nempty = M.empty\r\n\r\nadd :: Int -> Student -> School -> School\r\nadd n s = M.insertWith (++) n [s]\r\n\r\ngrade :: Int -> School -> Grade\r\ngrade = M.findWithDefault []\r\n\r\nsorted :: School -> [(Int,Grade)]\r\nsorted = M.toAscList . M.map sort\r	\N	f	0	4	2014-05-17 05:43:48	2014-05-17 05:43:48	64	School.hs
187	21	18fe53760a2d60b02840ae9f	done	ruby	etl	class ETL\n    def self.transform old\n        expect = {}\n        old.each do |k, array|\n            array.each do |key|\n                expect[key.downcase] = k\n            end\n        end\n        expect\n    end\nend	\N	f	5	1	2014-06-22 22:17:48	2014-06-22 22:17:48	84	etl.rb
146	4	6e335e99480a9b43ca316eaa	done	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Calendar (Day, addDays, fromGregorian)\n\nfromDay :: Day -> Day\nfromDay = addDays 11574	\N	f	1	1	2014-04-29 17:47:51	2014-04-29 17:47:51	66	gigasecond.hs
147	4	90823623cdcf2cff1ad6c4b0	superseded	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Data.Char (digitToInt)\nimport Data.Maybe (fromMaybe)\nimport Control.Monad (liftM2)\n\nhexToInt :: String -> Int\nhexToInt s = fromMaybe 0 . foldr hexFold (Just 0) $ chToPower\n  where hexFold (c, p) r = liftM2 (+) r $ fmap (*16^p) (hexCharToInt c)\n        chToPower = let len = length s in\n                    zip s ([len - 1, len - 2 .. 0] :: [Int])\n\nhexCharToInt :: Char -> Maybe Int\nhexCharToInt ch\n  | ch >= '0' && ch <= '9' = Just $ digitToInt ch\n  | ch >= 'a' && ch <= 'f' = Just $ fromEnum ch - fromEnum 'a' + 10\n  | otherwise              = Nothing	\N	f	0	1	2014-02-11 08:37:15	2014-02-11 08:37:15	67	Hexadecimal.hs
148	4	4330030ee92592181acc3554	superseded	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Data.List (foldl')\nimport Data.Char (digitToInt)\nimport Data.Maybe (fromMaybe)\nimport Control.Monad (liftM2)\n\nhexToInt :: String -> Int\nhexToInt s = fromMaybe 0 . foldl' hexFold (Just 0) $ chToPower\n  where hexFold r (c, p) = liftM2 (+) r $ fmap (*16^p) (hexCharToInt c)\n        chToPower = let len = length s in\n                    zip s ([len - 1, len - 2 .. 0] :: [Int])\n\nhexCharToInt :: Char -> Maybe Int\nhexCharToInt ch\n  | ch >= '0' && ch <= '9' = Just $ digitToInt ch\n  | ch >= 'a' && ch <= 'f' = Just $ fromEnum ch - fromEnum 'a' + 10\n  | otherwise              = Nothing	\N	f	0	2	2014-03-21 22:49:53	2014-03-21 22:49:53	67	Hexadecimal.hs
149	4	75486445e0ac111f78190dbe	superseded	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Data.List (foldl')\nimport Data.Char (digitToInt)\nimport Data.Maybe (fromMaybe)\nimport Control.Monad (liftM2)\n\nhexToInt :: String -> Int\nhexToInt = fromMaybe 0 . foldl' hexFold (Just 0)\n  where hexFold r c = liftM2 (+) (fmap (*16) r) (hexCharToInt c)\n\nhexCharToInt :: Char -> Maybe Int\nhexCharToInt ch\n  | ch >= '0' && ch <= '9' = Just $ digitToInt ch\n  | ch >= 'a' && ch <= 'f' = Just $ fromEnum ch - fromEnum 'a' + 10\n  | otherwise              = Nothing	\N	f	0	3	2014-05-18 16:30:09	2014-05-18 16:30:09	67	Hexadecimal.hs
150	4	20a7017977d5eb562d746085	done	haskell	hexadecimal	{-# LANGUAGE BangPatterns #-}\n\nmodule Hexadecimal (hexToInt) where\n\nimport Data.List (foldl')\nimport Data.Char (digitToInt)\nimport Data.Maybe (fromMaybe)\n\nhexToInt :: String -> Int\nhexToInt = fromMaybe 0 . foldl' hexFold (Just 0)\n  where hexFold Nothing _   = Nothing\n        hexFold (Just !r) c = fmap (+ 16*r) (hexCharToInt c)\n\nhexCharToInt :: Char -> Maybe Int\nhexCharToInt ch\n  | ch >= '0' && ch <= '9' = Just $ digitToInt ch\n  | ch >= 'a' && ch <= 'f' = Just $ fromEnum ch - fromEnum 'a' + 10\n  | otherwise              = Nothing	\N	f	1	4	2014-05-28 13:37:57	2014-05-28 13:37:57	67	Hexadecimal.hs
151	4	ca71ab627d038e135d9c30aa	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.Function (on)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (isAnagramOf w)\n\nisAnagramOf :: String -> String -> Bool\nisAnagramOf a b = a `isGramonymOf` b && a `isDifferentTo` b\n\n-- I have invented a new word for this - a gramonym.  \n-- It means, basically, anagram, but includes the \n-- original word itself - so banana is a gramonym of \n-- banana.\nisGramonymOf :: String -> String -> Bool\nisGramonymOf = (==) `on` (sort . map toLower)\n\nisDifferentTo :: String -> String -> Bool\nisDifferentTo = (/=) `on` (map toLower)	\N	f	0	5	2014-01-31 16:16:51	2014-01-31 16:16:51	68	anagram.hs
152	4	3a99a2f21a6a53e962d7e404	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (anagramOf w)\n\nanagramOf :: String -> String -> Bool\nanagramOf a b = equivalent (lower a) (lower b)\n\nlower :: String -> String\nlower = map toLower\n\nequivalent :: String -> String -> Bool\nequivalent a b = (sort a == sort b) && (a /= b)	\N	f	0	1	2014-03-23 10:12:49	2014-03-23 10:12:49	68	anagram.hs
153	4	8b69fc93b01bf2d29541db1a	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.Function (on)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (isAnagramOf w)\n\nisAnagramOf :: String -> String -> Bool\nisAnagramOf a b = equivalent a b && (a /= b)\n\nequivalent :: String -> String -> Bool\nequivalent = (==) `on` (sort . map toLower)	\N	f	0	2	2014-04-10 03:33:32	2014-04-10 03:33:32	68	anagram.hs
154	4	3735cf22fcf5cfede1260a53	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.Function (on)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (isAnagramOf w)\n\nisAnagramOf :: String -> String -> Bool\nisAnagramOf a b = isGramonymOf a b && (a /= b)\n\n-- I have invented a new word for this - a gramonym.  \n-- It means, basically, anagram, but includes the \n-- original word itself - so banana is a gramonym of \n-- banana.\nisGramonymOf :: String -> String -> Bool\nisGramonymOf = (==) `on` (sort . map toLower)	\N	f	0	4	2014-04-11 07:57:06	2014-04-11 07:57:06	68	anagram.hs
155	4	94bece4fc0de8d2486a525a0	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.Function (on)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (isAnagramOf w)\n\nisAnagramOf :: String -> String -> Bool\nisAnagramOf a b = isGramonymOf a b && (a /= b)\n\n-- I have invented a new word for this - a gramonym.  \n-- It means, basically, acronym, but includes the \n-- original word itself - so banana is a gramonym of \n-- banana.\nisGramonymOf :: String -> String -> Bool\nisGramonymOf = (==) `on` (sort . map toLower)	\N	f	0	3	2014-04-30 04:11:27	2014-04-30 04:11:27	68	anagram.hs
156	4	3dc00f1b78b2ca2e251df77f	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.Function (on)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor = filter . (isAnagramOf `on` (map toLower))\n\nisAnagramOf :: String -> String -> Bool\nisAnagramOf a b = a `isGramonymOf` b && a /= b\n\n-- I have invented a new word for this - a gramonym.  \n-- It means, basically, anagram, but includes the \n-- original word itself - so banana is a gramonym of \n-- banana.\nisGramonymOf :: String -> String -> Bool\nisGramonymOf = (==) `on` (sort)	\N	f	1	6	2014-05-17 08:00:16	2014-05-17 08:00:16	68	anagram.hs
158	4	29055d9656a4d2b2cb71a0ad	superseded	haskell	leap	module LeapYear(isLeapYear) where\n\nisLeapYear y = y `divisibleBy` 400 || y `divisibleBy` 4 && not (y `divisibleBy` 100)\n  where divisibleBy x y = x `mod` y == 0	\N	f	0	3	2014-01-28 02:05:38	2014-01-28 02:05:38	69	leap.hs
159	4	630596c44f9338de2ec7b299	superseded	haskell	leap	module LeapYear(isLeapYear) where\n\nisLeapYear y = divisibleBy 4 && (not . divisibleBy) 100 || divisibleBy 400\n  where divisibleBy d = y `mod` d == 0	\N	f	0	4	2014-04-29 04:29:12	2014-04-29 04:29:12	69	leap.hs
160	4	31c0872170e50139a4e3fea2	superseded	haskell	leap	module LeapYear(isLeapYear) where\n\nisLeapYear y\n  | y `divisibleBy` 400 = True\n  | y `divisibleBy` 100 = False\n  | y `divisibleBy` 4   = True\n  | otherwise           = False where divisibleBy x y = x `mod` y == 0	\N	f	0	1	2014-05-11 09:52:12	2014-05-11 09:52:12	69	leap.hs
161	4	1c2d6ddda50426ccc3a3925f	superseded	haskell	leap	module LeapYear(isLeapYear) where\n\nisLeapYear y\n  | y `divides` 400 = True\n  | y `divides` 100 = False\n  | y `divides` 4   = True\n  | otherwise       = False\n\n  where divides x y = x `mod` y == 0	\N	f	0	2	2014-05-14 05:08:28	2014-05-14 05:08:28	69	leap.hs
162	4	6cf0e75111a9221a3c890861	superseded	haskell	leap	module LeapYear(isLeapYear) where\n\nisLeapYear y\n  | divisibleBy 400 = True\n  | divisibleBy 100 = False\n  | divisibleBy 4   = True\n  | otherwise       = False\n\n  where divisibleBy n = y `mod` n == 0	\N	f	0	5	2014-05-14 08:19:30	2014-05-14 08:19:30	69	leap.hs
163	4	316b7de0b6b1e48d4cef2e12	done	haskell	leap	module LeapYear(isLeapYear) where\n\nisLeapYear :: Integer -> Bool\nisLeapYear y\n  | divisibleBy 400 = True\n  | divisibleBy 100 = False\n  | divisibleBy 4   = True\n  | otherwise       = False\n\n  where divisibleBy n = y `mod` n == 0	\N	f	0	6	2014-06-08 03:05:29	2014-06-08 03:05:29	69	leap.hs
165	4	e079adea10f42a4cc1242267	done	haskell	trinary	module Trinary\n  ( showTri\n  , readTri) where\n\nimport Control.Applicative\n\nreadTri :: Integral a => String -> a\nreadTri = go 0\n  where\n    go c [] = c\n    go c (x:xs) = c' `seq` go c' xs\n      where\n        c' = c * 3 + tri x\n\nshowTri :: Integral a => a -> String\nshowTri = go ""\n  where \n    go acc 0 = acc\n    go acc x = go (untri r:acc) q\n      where \n        (q,r) = x `quotRem` 3\n\ntri :: Integral a => Char -> a\ntri '0' = 0\ntri x   = 1 + tri (pred x)\n\nuntri :: Integral a => a -> Char\nuntri = go '0'\n  where\n    go c 0 = c\n    go c x = go (succ c) (pred x)	\N	f	0	1	2014-03-07 14:43:37	2014-03-07 14:43:37	71	Trinary.hs
166	4	aca4a636d14b1c66e5b7e083	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\r\nimport Data.Char (isNumber)\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r\n\r\nnumber :: String -> String\r\nnumber s\r\n  | length filtered == 10                         = filtered\r\n  | length filtered == 11 && head filtered == '1' = tail filtered\r\n  | otherwise                                     = badNumber\r\n  where\r\n    filtered  = filter isNumber s\r\n    badNumber = "0000000000"\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint s = "(" ++ areaCode s ++ ") " ++ lastDigits\r\n  where\r\n    (lastDigits1, lastDigits2) = splitAt 3 $ drop 3 $ number s\r\n    lastDigits                 = lastDigits1 ++ "-" ++ lastDigits2\r	\N	f	3	1	2014-05-30 07:55:33	2014-05-30 07:55:33	72	Phone.hs
167	21	77c7b200fa7403161a7ebc1c	superseded	clojure	rna-transcription	; wqL7s/0d\n\n(ns dna)\n\n(defn to-rna [strand] \n\t(clojure.string/replace strand #"T" "U"))	\N	f	4	1	2014-05-28 16:23:44	2014-05-28 16:23:44	73	rna-transcription.clj
168	21	937be887199128616d344f96	done	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [strand] \n\t(clojure.string/replace strand #"T" "U"))	\N	f	3	2	2014-06-14 12:36:15	2014-06-14 12:36:15	73	rna-transcription.clj
169	21	62613554972a54688a4aa457	pending	javascript	bob	module.exports = function() {\n\tthis.hey = function(str) {\n\t\tif(str.trim() === '') {\n\t\t\treturn 'Fine. Be that way!';\n\t\t} else if(str === str.toUpperCase() && /[a-zA-z]/.test(str)) {\n\t\t\treturn 'Woah, chill out!';\n\t\t} else if(str.slice(-1) === '?') {\n\t\t\treturn 'Sure.';\n\t\t} else {\n\t\t\treturn 'Whatever.';\n\t\t}\n\t}\n}	\N	f	5	1	2014-06-04 14:02:30	2014-06-04 14:02:30	74	bob.js
170	21	eef2ba28e4b56b53872c8bf9	done	ruby	triangle	class Triangle\n  def initialize(a, b, c)\n    @a = a\n    @b = b\n    @c = c\n  end\n\n  def kind\n    if (@a <= 0 || @b <= 0 || @c <= 0) ||\n       (@a == @b && @c > @a) ||\n       (@a == @c && @b > @a) ||\n       (@b == @c && @a > @b) ||\n       (@a > @b + @c) || (@b > @a + @c) || (@c > @a + @b)\n      raise TriangleError\n    else\n      if @a == @b && @b == @c && @c && @a\n        return :equilateral\n      elsif (@a == @b && @a != @c) ||\n            (@a == @c && @a != @b) ||\n            (@b == @c && @a != @b)\n        return :isosceles\n      else\n        return :scalene\n      end\n    end\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	1	1	2014-06-09 15:28:54	2014-06-09 15:28:54	75	triangle.rb
171	21	0d4e794ab9444474cc7486be	done	haskell	rna-transcription	module DNA (toRNA)\nwhere\n\ntoRNA :: String -> String\ntoRNA =\n  let repl 'C' = 'G'\n      repl 'G' = 'C'\n      repl 'A' = 'U'\n      repl 'T' = 'A'\n  in map repl	\N	f	5	1	2014-05-23 17:14:47	2014-05-23 17:14:47	76	DNA.hs
172	21	d0dcf419a6eb84155b97a5dc	superseded	clojure	anagram	(ns anagram\n  (require [clojure.string :as strng]))	\N	f	3	1	2014-05-24 21:20:58	2014-05-24 21:20:58	77	anagram.clj
173	21	0605bf7df7cd6f14aad1564b	pending	clojure	anagram	(ns anagram\n  (require [clojure.string :as str]))\n\n\n(defn letter-count\n  [input]\n  (frequencies (str/lower-case input)))\n\n(defn anagram?\n  [input1 input2]\n  (and\n   (= (letter-count input1) (letter-count input2))\n    (not (= input1 input2))))\n\n(defn anagrams-for\n  [input1 input2]\n  (filter #(anagram? input1 %) input2))	\N	f	3	2	2014-05-31 07:45:13	2014-05-31 07:45:13	77	anagram.clj
196	26	f4df56c49ff8882c5ece971b	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (isAnagramOf w)\n  where isAnagramOf x y = (x /= y) && \n                          (sort . map toLower) x == (sort . map toLower) y	\N	f	2	3	2014-03-26 06:55:57	2014-03-26 06:55:57	90	anagram.hs
175	21	a3925f7563312c0538cd9a2b	done	python	rna-transcription	class DNA(object):\n  dic = {\n    "thymidine": "T",\n    "uracil": "U",\n  }\n\n  def __init__(self, state):\n    self.state = state\n\n  def to_rna(self):\n    return self.state.replace(self.dic["thymidine"],\n                                 self.dic["uracil"])	\N	f	1	1	2014-05-28 01:31:13	2014-05-28 01:31:13	79	rna-transcription.py
177	21	b64b125c79fb51aa3aae27b3	superseded	ruby	rna-transcription	class Complement\n  DNA = {\n    'G' => 'C',\n    'C' => 'G',\n    'T' => 'A',\n    'A' => 'U'\n  }\n  RNA = DNA.invert\n\n  def self.of_dna(sequence)\n    transcribe(sequence, DNA)\n  end\n\n  def self.of_rna(sequence)\n    transcribe(sequence, RNA)\n  end\n\n  def self.transcribe(sequence, type)\n    sequence.chars.map { |nucleotide| type[nucleotide] }.join\n  end\nend	\N	f	3	2	2014-05-25 01:39:59	2014-05-25 01:39:59	81	complement.rb
178	21	e9dba6743bff7b560beb60fa	superseded	ruby	rna-transcription	class Complement\n  DNA_PAIRS = {\n    'G' => 'C',\n    'C' => 'G',\n    'T' => 'A',\n    'A' => 'U'\n  }\n\n  def self.of_dna(sequence)\n    transcribe(sequence) { |nucleotide| DNA_PAIRS[nucleotide] }\n  end\n\n  def self.of_rna(sequence)\n    transcribe(sequence) { |nucleotide| DNA_PAIRS.key(nucleotide) }\n  end\n\n  def self.transcribe(sequence, &block)\n    sequence.chars.map(&block).join\n  end\nend	\N	f	5	1	2014-05-31 14:28:56	2014-05-31 14:28:56	81	complement.rb
179	21	5f85f00063a934f6df5004b8	pending	ruby	rna-transcription	class Complement\n  DNA = 'GCTA'\n  RNA = 'CGAU'\n\n  def self.of_dna(sequence)\n    sequence.tr(DNA, RNA)\n  end\n\n  def self.of_rna(sequence)\n    sequence.tr(RNA, DNA)\n  end\nend	\N	f	6	3	2014-06-12 02:45:44	2014-06-12 02:45:44	81	complement.rb
180	21	ee547d651a7170c48282e4af	done	haskell	robot-name	module Robot (mkRobot, robotName, resetName) where\n\nimport Data.IORef\nimport System.Random\nimport Control.Monad.State\n\ntype Robot = IO (IORef String)\n\nmkRobot :: Robot\nmkRobot = do\n  gen <- newStdGen\n  newIORef $ randomName gen\n\nrobotName :: IORef String -> IO String\nrobotName = readIORef\n\nresetName :: IORef String -> IO ()\nresetName ref = do\n  gen <- newStdGen\n  let name = randomName gen\n  writeIORef ref name\n\nrandomName :: StdGen -> String\nrandomName = fst . (runState (sequence [letters, letters, digits, digits, digits]))\n    where letters = state (\\s -> randomR ('A', 'Z') s)\n          digits = state (\\s -> randomR ('0', '9') s)	\N	f	0	3	2014-06-03 18:05:33	2014-06-03 18:05:33	82	robot-name.hs
181	21	1809451d957db00017a1a539	superseded	haskell	robot-name	module Robot (mkRobot, robotName, resetName) where\n\nimport Control.Applicative\nimport System.Random\n\ntype Robot = IO ()\n\nmkRobot :: Robot\nmkRobot = newStdGen >>= setStdGen\n\nrobotName :: () -> IO String\nrobotName _ = do\n  g <- getStdGen\n  return $ randomName g\n\nresetName :: () -> IO ()\nresetName _ = newStdGen >>= setStdGen\n\nrandomName :: StdGen -> String\nrandomName g = a:b:c:d:e:[]\n    where (a, g2) = randomR ('A', 'Z') g\n          (b, g3) = randomR ('A', 'Z') g2\n          (c, g4) = randomR ('0', '9') g3\n          (d, g5) = randomR ('0', '9') g4\n          (e, _) = randomR ('0', '9') g5	\N	f	3	1	2014-06-06 16:04:12	2014-06-06 16:04:12	82	robot-name.hs
182	21	4e48e2e5d51477d164797a28	superseded	haskell	robot-name	module Robot (mkRobot, robotName, resetName) where\n\nimport Data.IORef\nimport Control.Applicative\nimport System.Random\n\ntype Robot = IO (IORef String)\n\nmkRobot :: Robot\nmkRobot = do\n  gen <- newStdGen\n  newIORef $ randomName gen\n\nrobotName :: IORef String -> IO String\nrobotName = readIORef\n\nresetName :: IORef String -> IO ()\nresetName ref = do\n  gen <- newStdGen\n  let name = randomName gen\n  writeIORef ref name\n\nrandomName :: StdGen -> String\nrandomName g = a:b:c:d:e:[]\n    where (a, g2) = randomR ('A', 'Z') g\n          (b, g3) = randomR ('A', 'Z') g2\n          (c, g4) = randomR ('0', '9') g3\n          (d, g5) = randomR ('0', '9') g4\n          (e, _) = randomR ('0', '9') g5	\N	f	0	2	2014-06-08 14:25:56	2014-06-08 14:25:56	82	robot-name.hs
183	21	cf3bf9767301c1b0086676ce	superseded	ruby	bob	module StringHelper\n\tdef silence?\n\t\tlambda {|str| str.to_s.strip.empty?}\n\tend\n\n\tdef shout? \n\t\tlambda {|str| str.to_s.upcase == str}\n\tend\n\n\tdef question? \n\t\tlambda {|str| str.to_s.end_with?('?')}\n\tend\nend\n\nclass Bob\n\tinclude StringHelper\n\tdef hey str\n\t\tbob_answers = {\n\t\t    silence? => 'Fine. Be that way!',\n\t\t\tshout? => 'Woah, chill out!',\n\t\t\tquestion? => 'Sure.'\n\t\t}\n\n\t\tbob_answers.each {|what_you_say, response| \n\t\t\treturn response if what_you_say.call(str)\n\t\t}\n\t\t'Whatever.'\n\tend\nend	\N	f	3	2	2014-06-08 05:50:36	2014-06-08 05:50:36	83	bob.rb
184	21	bc9dd68c2af0ac0f1819d322	superseded	ruby	bob	module StringTypeAnalyzers\n\tdef silence?\n\t\tlambda {|str| str.to_s.strip.empty?}\n\tend\n\n\tdef shout? \n\t\tlambda {|str| str.to_s.upcase == str}\n\tend\n\n\tdef question? \n\t\tlambda {|str| str.to_s.end_with?('?')}\n\tend\nend\n\nclass Bob\n\tinclude StringTypeAnalyzers\n\t\n\tdef hey str\n\t\tbob_answers = {\n\t\t    silence? => 'Fine. Be that way!',\n\t\t\tshout? => 'Woah, chill out!',\n\t\t\tquestion? => 'Sure.'\n\t\t}\n\n\t\tbob_answers.each {|what_you_say_analyzer, response| return response if what_you_say_analyzer.call(str)}\n\t\t'Whatever.'\n\tend\nend	\N	f	5	3	2014-06-14 13:13:16	2014-06-14 13:13:16	83	bob.rb
185	21	fd91f7cf83b683cd50bd81c3	superseded	ruby	bob	module StringHelper\n\tdef silence?\n\t\tlambda {|str| str.to_s.strip == ''}\n\tend\n\n\tdef shout? \n\t\tlambda {|str| str.to_s.upcase == str}\n\tend\n\n\tdef question? \n\t\tlambda {|str| str.to_s.end_with?('?')}\n\tend\nend\n\nclass Bob\n\tinclude StringHelper\n\tdef hey str\n\t\tbob_answers = {\n\t\t    silence? => 'Fine. Be that way!',\n\t\t\tshout? => 'Woah, chill out!',\n\t\t\tquestion? => 'Sure.'\n\t\t}\n\t\t\n\t\tbob_answers.each {|my_lambda, response| \n\t\t\treturn response if my_lambda.call(str)\n\t\t}\n\t\t'Whatever.'\n\tend\nend	\N	f	3	1	2014-06-14 13:14:38	2014-06-14 13:14:38	83	bob.rb
186	21	ec55ae2f8c5e604fb999d4b1	hibernating	ruby	bob	module StringTypeAnalyzers\n  def silence?\n    lambda {|str| str.to_s.strip.empty?}\n  end\n\n  def shout? \n\tlambda {|str| str.to_s.upcase == str}\n  end\n\n  def question? \n\tlambda {|str| str.to_s.end_with? '?'}\n  end\nend\n\nclass Bob\n  include StringTypeAnalyzers\n\n  def hey str\n    bob_answers = {\n      silence? => 'Fine. Be that way!',\n\t  shout? => 'Woah, chill out!',\n\t  question? => 'Sure.'\n    }\n\n\tbob_answers.each {|analyzer, response| return response if analyzer.call(str)}\n\t'Whatever.'\n  end\nend	\N	f	0	4	2014-06-23 08:35:20	2014-06-23 08:35:20	83	bob.rb
189	21	1f452c425dbf03537cf3b255	done	haskell	space-age	module SpaceAge where\n\ndata Planet = Mercury | Venus | Earth | Mars | Jupiter | Saturn | Uranus | Neptune\n\nageOn :: Planet -> Integer -> Float\nageOn pl sec = earthYear sec / orbitalPeriod pl\n    where earthYear sec = (fromIntegral sec) / 31557600\n          orbitalPeriod Mercury = 0.2408467\n          orbitalPeriod Venus   = 0.61519726\n          orbitalPeriod Earth   = 1.0\n          orbitalPeriod Mars    = 1.8808158\n          orbitalPeriod Jupiter = 11.862615\n          orbitalPeriod Saturn  = 29.447498\n          orbitalPeriod Uranus  = 84.016846\n          orbitalPeriod Neptune = 164.79132\n 	\N	f	4	1	2014-05-30 08:00:51	2014-05-30 08:00:51	86	space-age.hs
191	21	1594a5c2c146888f3ea6f478	superseded	haskell	house	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule House( rhyme ) where\n\nparts :: [String] \nparts = ["the horse and the hound and the horn\\nthat belonged to ",\n         "the farmer sowing his corn\\nthat kept ",\n         "the rooster that crowed in the morn\\nthat woke ",\n         "the priest all shaven and shorn\\nthat married ",\n         "the man all tattered and torn\\nthat kissed ",\n         "the maiden all forlorn\\nthat milked ",\n         "the cow with the crumpled horn\\nthat tossed ",\n         "the dog\\nthat worried ",\n         "the cat\\nthat killed ",\n         "the rat\\nthat ate ",\n         "the malt\\nthat lay in ",\n         "the house that Jack built.\\n"]\n\nverses :: [String] -> [[String]] -> String\nverses [] vs = unlines $ map (("This is "++) . concat . reverse) vs\nverses (l : ls) vs = verses ls ([l] : map (l:) vs)\n\nrhyme :: String\nrhyme = verses parts []	\N	f	0	2	2014-06-26 00:46:36	2014-06-26 00:46:36	87	House.hs
192	21	72bb066f278d18028bb0b11a	done	haskell	house	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule House( rhyme ) where\n\nparts :: [String] \nparts = ["the house that Jack built.\\n",\n         "the malt\\nthat lay in ",\n         "the rat\\nthat ate ",\n         "the cat\\nthat killed ",\n         "the dog\\nthat worried ",\n         "the cow with the crumpled horn\\nthat tossed ",\n         "the maiden all forlorn\\nthat milked ",\n         "the man all tattered and torn\\nthat kissed ",\n         "the priest all shaven and shorn\\nthat married ",\n         "the rooster that crowed in the morn\\nthat woke ",\n         "the farmer sowing his corn\\nthat kept ",\n         "the horse and the hound and the horn\\nthat belonged to "]\n\nverses :: [String] -> String\nverses = unlines . map ("This is "++) . scanl1 (flip (++))\n\nrhyme :: String\nrhyme = verses parts	\N	f	3	3	2014-06-28 09:41:18	2014-06-28 09:41:18	87	House.hs
193	21	9cc28a2b2d45dddef7797c3f	pending	ruby	beer-song	class BeerSong\n  def sing\n    verses(99, 0)\n  end\n\n  def verses(start, stop)\n    start.downto(stop).map{|number| verse(number) + "\\n"}.join\n  end\n\n  def verse(number)\n    Verse.for(number).to_s\n  end\nend\n\nclass Verse\n  def self.for(number)\n    case number\n    when 0 then Verse0\n    when 1 then Verse1\n    when 2 then Verse2\n    else Verse\n    end.new(number)\n  end\n\n  attr_reader :number\n  def initialize(number)\n    @number = number\n  end\n  \n  def to_s\n    "#{current_inventory.to_s.capitalize} #{current_container} of beer on the wall, " +\n    "#{current_inventory} #{current_container} of beer.\\n" +\n    "#{action}, " +\n    "#{next_inventory} #{next_container} of beer on the wall.\\n"\n  end\n  \n  def current_inventory; number end\n  def next_inventory; number - 1 end\n  def current_container; "bottles" end\n  def next_container; "bottles" end\n  def action; "Take #{pronoun} down and pass it around" end\n  def pronoun; "one" end\nend\n\nclass Verse0 < Verse\n  def current_inventory; "no more" end\n  def next_inventory; 99 end\n  def action; "Go to the store and buy some more" end\nend\n\nclass Verse1 < Verse\n  def next_inventory; "no more" end\n  def current_container; "bottle" end\n  def pronoun; "it" end\nend\n\nclass Verse2 < Verse\n  def next_container; "bottle" end\nend	\N	f	3	2	2014-06-13 14:14:14	2014-06-13 14:14:14	88	beer_song.rb
194	21	fac38f33b1e903b3fdc247b3	superseded	ruby	beer-song	class BeerSong\n  def sing\n    verses(99, 0)\n  end\n\n  def verses(start, stop)\n    start.downto(stop).map{|number| verse(number) + "\\n"}.join\n  end\n\n  def verse(number)\n    Verse.new(number).to_s\n  end\nend\n\nclass Verse\n  attr_reader :number\n  def initialize(number)\n    @number = number\n  end\n  \n  def to_s\n    "#{current_inventory.to_s.capitalize} #{current_container} of beer on the wall, " +\n    "#{current_inventory} #{current_container} of beer.\\n" +\n    "#{action}, " +\n    "#{next_inventory} #{next_container} of beer on the wall.\\n"\n  end\n  \n  def current_inventory\n    if number == 0\n      "no more"\n    else\n      number\n    end\n  end\n\n  def next_inventory\n    if number == 1\n      "no more"\n    elsif number == 0\n      99\n    else\n      number - 1\n    end\n  end\n\n  def next_container\n    if number == 2\n      "bottle"\n    else\n      "bottles"\n    end\n  end\n  \n  def current_container\n    if number == 1\n      "bottle"\n    else\n      "bottles"\n    end\n  end\n \n  def action\n    if number == 0\n      "Go to the store and buy some more"\n    else\n      "Take #{pronoun} down and pass it around"\n    end\n  end\n\n  def pronoun\n    if number == 1\n      "it"\n    else\n      "one"\n    end\n  end\nend	\N	f	2	1	2014-06-21 01:21:51	2014-06-21 01:21:51	88	beer_song.rb
195	21	8211144afb8e722065d6b8c9	done	perl5	prime-factors	#!/usr/bin/env perl\n\npackage Prime;\n\nuse Modern::Perl;\nuse Math::Prime::Util 'factor';\n\nsub factors {\n    my $int = shift;\n    return [] if $int == 1;\n    my @divisors = factor($int);\n    return \\@divisors;\n}\n1;	\N	f	3	1	2014-06-23 02:51:06	2014-06-23 02:51:06	89	prime-factors.pm
283	24	097f9d84ebd10d09d286e38f	done	clojure	grade-school	(ns school)\n\n(defn add [db student grade]\n  (update-in db [grade] (comp vec conj) student))\n\n(defn grade [db grade]\n  (db grade []))\n\n(defn sorted [db]\n  (into {} (map (fn [[k v]] [k (sort v)]) db)))	\N	f	0	2	2014-06-23 07:33:41	2014-06-23 07:33:41	135	grade-school.clj
198	26	e982287dc7d042aa48bfa6cb	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport qualified Data.Map as Map\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (isAnagramOf w)\n  where isAnagramOf x y\n          | x == y = False\n          | otherwise = (freqs . map toLower) x == (freqs . map toLower) y\n\nfreqs :: (Ord a) => [a] -> Map.Map a Integer\nfreqs = foldr addElem Map.empty\n  where addElem x = Map.insertWith (+) x 1	\N	f	2	2	2014-04-04 05:43:35	2014-04-04 05:43:35	90	anagram.hs
199	26	0fa0be7b7357a49eeea165c1	done	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter isAnagram\n  where isAnagram x = (map toLower x /= word) && (sort . map toLower) x == chars\n        word = map toLower w\n        chars = sort word	\N	f	0	4	2014-04-18 00:06:27	2014-04-18 00:06:27	90	anagram.hs
200	26	3658fb076f80fcbd6f77787b	superseded	elixir	grade-school	defmodule School do\n\n  def add(roster, student, grade) do\n    HashDict.update(roster, grade, [student], &1 ++ [student])\n  end\n\n  def grade(roster, grade) do\n    roster[grade] || []\n  end\n\n  def sort(roster) do\n    Enum.to_list(roster)\n      |> Enum.map(fn { grade, students } -> { grade, Enum.sort(students) } end)\n      |> HashDict.new\n  end\n\nend	\N	f	2	1	2014-05-02 09:07:20	2014-05-02 09:07:20	91	grade-school.exs
201	26	45aaa2170a3045e7abb8cbf6	done	elixir	grade-school	defmodule School do\n\n  def add(roster, student, grade) do\n    HashDict.update(roster, grade, [student], &([ student | &1 ]))\n  end\n\n  def grade(roster, grade) do\n    roster[grade] || []\n  end\n\n  def sort(roster) do\n    Enum.to_list(roster)\n      |> Enum.map(fn { grade, students } -> { grade, Enum.sort(students) } end)\n      |> HashDict.new\n  end\n\nend	\N	f	0	2	2014-05-09 12:15:13	2014-05-09 12:15:13	91	grade-school.exs
202	26	667187733d183dc7d955db3b	superseded	haskell	grade-school	module School (\n  School(..),\n  add,\n  empty,\n  grade,\n  sorted\n) where\n\nimport Data.List (sort)\nimport qualified Data.Map.Strict as DMS\n\ntype School = DMS.Map Int [String]\n\nempty :: School\nempty = DMS.empty\n\nadd :: Int -> String -> School -> School\nadd key name = DMS.insertWith (++) key [name]\n\nsorted :: School -> [(Int, [String])]\nsorted = DMS.toAscList . DMS.map sort\n\ngrade :: Int -> School -> [String]\ngrade = DMS.findWithDefault []	\N	f	0	1	2014-03-25 01:54:04	2014-03-25 01:54:04	92	school.hs
203	26	e8e3b96b0775f9a15d8d622c	done	haskell	grade-school	module School (\n  School(..),\n  add,\n  empty,\n  grade,\n  sorted\n) where\n\nimport Data.List (sort)\nimport qualified Data.Map.Strict as M\n\ntype School = M.Map Int [String]\n\nempty :: School\nempty = M.empty\n\nadd :: Int -> String -> School -> School\nadd key name = M.insertWith (++) key [name]\n\nsorted :: School -> [(Int, [String])]\nsorted = M.toAscList . M.map sort\n\ngrade :: Int -> School -> [String]\ngrade n = sort . M.findWithDefault [] n	\N	f	2	2	2014-06-19 11:10:43	2014-06-19 11:10:43	92	school.hs
205	26	fb6cceeb5dd54cf30d97962a	done	javascript	atbash-cipher	var _ = require('underscore');\nfunction Atbash(){\n  var forwardAlphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "n", "m", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","0","1", "2", "3", "4", "5", "6", "7", "8", "9"]\n  var reverseAlphabet = ["z", "y", "x", "w", "v", "u", "t", "s", "r", "q", "p", "o", "m", "n", "l", "k", "j", "i", "h", "g", "f", "e", "d", "c", "b", "a", "0","1", "2", "3", "4", "5", "6", "7", "8", "9"]\n  this.encode = function(string){\n    string = string.toLowerCase().replace(/ /g,"");\n    var cypherString="";\n    for(var i=0, l=string.length; i<l; i++){\n      var character = string.charAt(i);\n      var characterIndex = forwardAlphabet.indexOf(character);\n      if(characterIndex !== -1){\n        cypherString+=reverseAlphabet[characterIndex];\n      }\n    }\n    return cypherString.replace(/(\\w{5})/g, '$1' + ' ').trim();\n  }\n}\n\nmodule.exports = new Atbash();	\N	f	0	1	2014-04-08 06:28:31	2014-04-08 06:28:31	94	atbash-cipher.js
206	26	e6f936cdb7bacb136d579f26	pending	clojure	word-count	(ns phrase\n  (:use [clojure.string :only [lower-case split]]))\n\n(defn word-count [text]\n  (let [terms (map lower-case (split text #"[^\\w]+"))]\n    (frequencies terms)))	\N	f	0	1	2014-03-12 06:17:31	2014-03-12 06:17:31	95	word-count.clj
207	26	c8bc362c90bd4be5d5ba6164	superseded	haskell	atbash-cipher	module Atbash\n( encode ) where\n\nimport           Data.Char       (chr, isAlpha, isAlphaNum, ord, toLower)\nimport           Data.List.Split (chunksOf)\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . map encodeChar . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c = if isAlpha c then\n                 chr (219 - ord (toLower c))\n               else\n                 c	\N	f	1	1	2014-04-06 18:52:34	2014-04-06 18:52:34	96	atbash-cipher.hs
208	26	cd214ddcb7d5f95a20ef7c0f	done	haskell	atbash-cipher	module Atbash\n( encode ) where\n\nimport           Data.Char       (isAlpha, isAlphaNum, toLower)\nimport           Data.List.Split (chunksOf)\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . map encodeChar . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c | isAlpha c = toEnum (sumOfPair - fromEnum (toLower c))\n             | otherwise = c\n  where sumOfPair = fromEnum 'a' + fromEnum 'z'	\N	f	1	3	2014-06-03 20:51:43	2014-06-03 20:51:43	96	atbash-cipher.hs
209	26	ae9098f292564fe4896d3f58	superseded	haskell	atbash-cipher	module Atbash\n( encode ) where\n\nimport           Data.Char       (chr, isAlpha, isAlphaNum, ord, toLower)\nimport           Data.List.Split (chunksOf)\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . map encodeChar . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c = if isAlpha c then\n                 chr (sumOfPair - ord (toLower c))\n               else\n                 c\n  where sumOfPair = ord 'a' + ord 'z'	\N	f	2	2	2014-06-10 05:21:42	2014-06-10 05:21:42	96	atbash-cipher.hs
226	26	e046912c2d1f5264610d94de	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n\tvar m = make(map[string]int)\n\tfor score, letters := range letter_values {\n\t\tfor i := range letters {\n\t\t\tvar letter = strings.ToLower(letters[i])\n\t\t\tm[letter] = score\n\t\t}\n\t}\n\treturn m\n}	\N	f	2	3	2014-05-08 22:26:23	2014-05-08 22:26:23	104	etl.go
211	26	477936e5e6e38fda9da71daf	done	ruby	bob	module TeenagerRefinements\n  refine String do\n    def yelling?\n      self == self.upcase\n    end\n\n    def question?\n      self.end_with? '?'\n    end\n\n    def silent_treatment?\n      self.strip.empty?\n    end\n  end\nend\n\nusing TeenagerRefinements\n\nclass Bob\n\n  def hey(msg)\n    return 'Fine. Be that way!' if msg.silent_treatment?\n    return 'Woah, chill out!' if msg.yelling?\n    return 'Sure.' if msg.question?\n\n    'Whatever.'\n  end\nend	\N	f	2	3	2014-03-25 00:21:36	2014-03-25 00:21:36	97	bob.rb
212	26	114a4a6c23d610e040153556	superseded	ruby	bob	class String\n  def yelling?\n    self == self.upcase\n  end\n\n  def question?\n    self[-1] == '?'\n  end\nend\n\nclass Bob\n  def hey(msg)\n    return 'Fine. Be that way!' if msg.strip.empty?\n    return 'Woah, chill out!' if msg.yelling?\n    return 'Sure.' if msg.question?\n\n    'Whatever.'\n  end\nend	\N	f	5	1	2014-05-11 12:05:31	2014-05-11 12:05:31	97	bob.rb
213	26	5d6483f2b716096ad00183cf	superseded	elixir	anagram	defmodule Anagram do\n  def match(target, comparisons) when is_binary(target) and is_list(comparisons) do\n    Enum.filter(comparisons, &(is_anagram_match?(target, &1)))\n  end\n\n  defp is_anagram_match?(target, subject) do\n    target_letters = String.downcase(target) |> String.graphemes |> Enum.sort\n    subject_letters = String.downcase(subject) |> String.graphemes |> Enum.sort\n    String.downcase(target) != String.downcase(subject) && target_letters == subject_letters\n  end\nend	\N	f	2	1	2014-03-04 11:53:44	2014-03-04 11:53:44	98	anagram.exs
215	26	4d0fd61bba9fdc1569c45785	done	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map.Strict (Map, fromListWith, findWithDefault)\n\ncount :: Char -> String -> Int\ncount c s = findWithDefault 0 (validateNucleotide c) $ nucleotideCounts s\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = fromListWith (+) . (initialList ++) . map (\\x -> (x, 1))\n                 where initialList = [('A', 0), ('T', 0), ('C', 0), ('G', 0)]\n\nvalidateNucleotide :: Char -> Char\nvalidateNucleotide c\n  | c `elem` ['A', 'T', 'C', 'G', 'U'] = c\n  | otherwise                          = error $ "invalid nucleotide " ++ show c	\N	f	2	1	2014-02-23 04:31:36	2014-02-23 04:31:36	99	nucleotide-count.hs
216	26	01701a6d631c186a25a58c9a	done	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand, descendant_strand) do\n    List.zip([strand, descendant_strand]) |> Enum.count(&unequal_pairs?/1)\n  end\n\n  defp unequal_pairs?({x1, x2}), do: x1 != x2\nend	\N	f	2	5	2014-03-04 02:36:48	2014-03-04 02:36:48	100	point-mutations.exs
217	26	2144830b439a7deda3eea70b	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand, descendant_strand) do\n    zip(strand, descendant_strand) |> Enum.count(fn({x1, x2}) -> x1 != x2 end)\n  end\n\n  defp zip(strand, descendant_strand) do\n    List.zip([strand, descendant_strand])\n  end\nend	\N	f	0	2	2014-03-12 18:17:51	2014-03-12 18:17:51	100	point-mutations.exs
218	26	7e2bf4bdd1ba9bb628867ce8	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand, descendant_strand) do\n    List.zip([strand, descendant_strand]) |> Enum.count(equal_pairs?(&1))\n  end\n\n  defp equal_pairs?({x1, x2}), do: x1 != x2\nend	\N	f	2	3	2014-04-03 08:33:40	2014-04-03 08:33:40	100	point-mutations.exs
219	26	ca7a7a5e9e8b908b4e62ffed	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand, descendant_strand) do\n    zip(strand, descendant_strand) |> Enum.count(fn({x1, x2}) -> x2 && x1 != x2 end)\n  end\n\n  defp zip(strand, descendant_strand) do\n    Enum.zip(strand, descendant_strand)\n  end\nend	\N	f	2	1	2014-04-28 08:12:11	2014-04-28 08:12:11	100	point-mutations.exs
220	26	188d4d681b57f0e0165a25e2	superseded	elixir	point-mutations	defmodule DNA do\n  def hamming_distance(strand, descendant_strand) do\n    List.zip([strand, descendant_strand]) |> Enum.count(&equal_pairs?/1)\n  end\n\n  defp equal_pairs?({x1, x2}), do: x1 != x2\nend	\N	f	0	4	2014-05-14 21:32:16	2014-05-14 21:32:16	100	point-mutations.exs
221	26	4174fd0d0da78e1f77b360b1	pending	haskell	trinary	module Trinary\r\n    ( showTri\r\n    , readTri\r\n    ) where\r\n\r\nimport Data.List (foldl', unfoldr)\r\nimport Data.Char (digitToInt)\r\n\r\nshowTri :: (Integral a, Show a) => a -> String\r\nshowTri = showBase 3\r\n\r\nreadTri :: (Integral a) => String -> a\r\nreadTri = readBase 3\r\n\r\nshowBase :: (Integral a, Show a) => a -> a -> String\r\nshowBase k = concat . reverse . unfoldr go\r\n  where\r\n    go 0 = Nothing\r\n    go n = Just (show $ n `rem` k, n `div` k)\r\n\r\nreadBase :: (Integral a) => a -> String -> a\r\nreadBase k = foldl' go 0\r\n  where\r\n    go acc n = k * acc + fromIntegral (digitToInt n)	\N	f	2	1	2014-02-28 20:02:29	2014-02-28 20:02:29	101	Trinary.hs
222	26	18f1e57059fab04046a7d9d6	done	go	hamming	package hamming\n\n/*\nReturn the number of elements that are different ignoring excess elements as\naccording to the hamming test.\n*/\nfunc Distance(a, b string) int {\n\tcount := 0\n\tvar length int\n\tif len(a) > len(b) {\n\t\tlength = len(b)\n\t} else {\n\t\tlength = len(a)\n\t}\n\tfor i := 0; i <= length - 1\t; i += 1 {\n\t\tif a[i] != b[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}	\N	f	2	1	2014-04-06 15:56:04	2014-04-06 15:56:04	102	hamming.go
223	26	c55c86a6396498f8b8bc5939	superseded	haskell	rna-transcription	module DNA\n( toRNA\n) where\n\ntoRNA :: String -> String\ntoRNA = map toRNA'\n  where\n    toRNA' dnaSym = case dnaSym of\n      'G' -> 'C'\n      'C' -> 'G'\n      'T' -> 'A'\n      'A' -> 'U'	\N	f	3	1	2014-02-23 01:02:59	2014-02-23 01:02:59	103	DNA.hs
224	26	4de613e001d6a597921520f4	done	haskell	rna-transcription	module DNA\n( toRNA\n) where\n\ntoRNA :: String -> String\ntoRNA = map toRNA'\n  where\n    toRNA' 'G' = 'C'\n    toRNA' 'C' = 'G'\n    toRNA' 'T' = 'A'\n    toRNA' 'A' = 'U'	\N	f	2	2	2014-03-10 03:33:59	2014-03-10 03:33:59	103	DNA.hs
225	26	13d0803a29202f46e712c398	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\tvar output = make(map[string]int)\n\tfor score, letters := range input {\n\t\tassignLetterScores(output, letters, score)\n\t}\n\treturn output\n}\n\nfunc assignLetterScores(output map[string]int, letters []string, score int) {\n\tfor i := range letters {\n\t\tvar letter = strings.ToLower(letters[i])\n\t\toutput[letter] = score\n\t}\n}	\N	f	0	5	2014-04-16 08:03:38	2014-04-16 08:03:38	104	etl.go
229	26	8c3bed28826a5c5fd0a9f7e0	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n  var m = make(map[string]int)\n  for key, value := range letter_values {\n    for i := range value {\n      var letter = strings.ToLower(value[i])\n      m[letter] = key\n    }\n  }\n  return m\n}	\N	f	2	1	2014-06-14 13:04:36	2014-06-14 13:04:36	104	etl.go
230	26	f5fc5d757b368ea127e0e245	done	ruby	gigasecond	class Gigasecond\n  ONE_GIGASECOND_IN_DAYS = 1_000_000_000 / 86_400\n\n  def initialize(birthday)\n    @birthday = birthday\n  end\n\n  def date\n    @birthday + ONE_GIGASECOND_IN_DAYS\n  end\nend	\N	f	0	1	2014-02-21 10:01:42	2014-02-21 10:01:42	105	gigasecond.rb
232	26	ef78e66addd4e33732b938bb	done	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Word\nimport Data.Bits\n\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries\n              | Tomatoes | Chocolate | Pollen | Cats\n     deriving (Show, Enum, Eq)\n\ntype Score = Word8\n\nisAllergicTo :: Allergen -> Score -> Bool\nisAllergicTo = flip testBit . fromEnum\n\nallergies :: Score -> [Allergen]\nallergies s = filter (testBit s . fromEnum) [Eggs .. ]	\N	f	2	1	2014-03-19 01:05:22	2014-03-19 01:05:22	107	allergies.hs
233	26	fd583a185d3c4e09bbf103e4	done	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    histogram = Hash.new(0)\n    words.each do |word|\n      histogram[word] += 1\n    end\n    return histogram\n  end\n\n  def words\n    @phrase.scan(/\\w+/)\n  end\n\nend	\N	f	2	3	2014-04-12 00:50:40	2014-04-12 00:50:40	108	word-count.rb
234	26	5f4ed3fbc0fc82a64eb8864b	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    hash = Hash.new(0)\n    split_phrase.each do |word|\n      hash[word] += 1\n    end\n    return hash\n  end\n\n  def split_phrase\n    @phrase.scan(/\\w+/)\n  end\n\nend	\N	f	2	1	2014-04-14 13:29:14	2014-04-14 13:29:14	108	word-count.rb
235	26	0e018485adf58f245c180a00	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    histogram = Hash.new(0)\n    inputs.each do |input|\n      histogram[input] += 1\n    end\n    return histogram\n  end\n\n  def inputs\n    @phrase.scan(/\\w+/)\n  end\n\nend	\N	f	3	2	2014-05-05 21:26:09	2014-05-05 21:26:09	108	word-count.rb
236	19	61b50bb29031caf762f7cabb	superseded	go	anagram	// Package anagram provides a method for comparing strings to see if they\n// have the same characters.  Differences in casing are not considered.\npackage anagram\n\nimport (\n  "strings"\n)\n\ntype byteFreqMap map[byte]int\n\n// Detect compares a reference string against a slice of candidate strings\n// and returns an array of lowercased candidates that are anagrams of the\n// reference string.\nfunc Detect(baseline string, candidates []string) (matches []string) {\n  for _, c := range(candidates) {\n    if isAnagram(baseline, c) {\n      matches = append(matches, strings.ToLower(c))\n    }\n  }\n  return\n}\n\nfunc isAnagram(baseline string, candidate string) bool {\n  a, b := strings.ToLower(baseline), strings.ToLower(candidate)\n\n  if a == b {\n    return false\n  } else {\n    return newByteFreqMap(a).Equal(newByteFreqMap(b))\n  }\n}\n\nfunc newByteFreqMap(s string) (freqs byteFreqMap) {\n  freqs = make(byteFreqMap)\n\n  for i := 0; i < len(s); i++ {\n    freqs[s[i]]++\n  }\n  return\n}\n\nfunc (a byteFreqMap) Equal (b byteFreqMap) bool {\n  if len(a) != len(b) {\n    return false\n  }\n\n  for c, _ := range(a) {\n    if a[c] != b[c] {\n      return false\n    }\n  }\n\n  return true\n}	\N	f	2	1	2013-10-19 21:23:09	2013-10-19 21:23:09	109	anagram.go
237	19	f3b8b62ccc7c20cb62336ea5	done	go	anagram	// Package anagram provides a method for comparing strings to see if they\n// have the same characters.  Differences in casing are not considered.\npackage anagram\n\nimport (\n\t"strings"\n)\n\ntype runeFreqMap map[rune]int\n\n// Detect compares a reference string against a slice of candidate strings\n// and returns an array of lowercased candidates that are anagrams of the\n// reference string.\nfunc Detect(baseline string, candidates []string) (matches []string) {\n\tfor _, candidate := range candidates {\n\t\tif isAnagram(baseline, candidate) {\n\t\t\tmatches = append(matches, strings.ToLower(candidate))\n\t\t}\n\t}\n\treturn\n}\n\nfunc isAnagram(baseline string, candidate string) bool {\n\ta, b := strings.ToLower(baseline), strings.ToLower(candidate)\n\n\tif a == b {\n\t\treturn false\n\t} else {\n\t\treturn newRuneFreqMap(a).Equal(newRuneFreqMap(b))\n\t}\n}\n\nfunc newRuneFreqMap(s string) (freqs runeFreqMap) {\n\tfreqs = make(runeFreqMap)\n\n    for _, r := range(s) {\n\t\tfreqs[rune(r)]++\n\t}\n\treturn\n}\n\nfunc (a runeFreqMap) Equal(b runeFreqMap) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\n\tfor r, _ := range a {\n\t\tif a[r] != b[r] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}	\N	f	1	2	2013-10-24 20:30:21	2013-10-24 20:30:21	109	anagram.go
238	19	be3865002bb119b085127e10	hibernating	go	etl	package etl\n\nimport (\n\t"strings"\n)\n\nfunc Transform(m map[int][]string) map[string]int {\n\tvar res = make(map[string]int)\n\n\tfor score, letters := range m {\n\t\tfor _, l := range letters {\n\t\t\tres[strings.ToLower(l)] = score\n\t\t}\n\t}\n\treturn res\n}	\N	f	2	1	2014-03-13 08:42:19	2014-03-13 08:42:19	110	etl.go
239	19	deba9ee5680f993758480958	done	ruby	bob	class Bob\n  def hey(message)\n    if message.nil? || message.empty?\n    \treturn 'fine'\n    elsif message.end_with?('?')\n    \treturn 'Whoa chill'\n    elsif upcase?(message)\n    \treturn 'Bye'\n    else\n    \treturn 'Whatever'\n    end  \t\n  end\n  def upcase?(message)\n  \tmessage == message.upcase\n  end\nend	\N	f	2	2	2014-02-12 09:35:38	2014-02-12 09:35:38	111	bob.rb
240	19	7bc2140e477228a47e3dfea9	superseded	ruby	bob	class Bob\n  def hey(message)\n    if message == ('') || message == nil\n    \treturn 'fine'\n    elsif message.upcase == message\n    \treturn 'Whoa chill'\n    elsif message.end_with('?')\n    \treturn 'Bye'\n    end  \t\n  end\nend	\N	f	3	1	2014-04-08 22:07:44	2014-04-08 22:07:44	111	bob.rb
269	24	a071a760a5521fabc4f6d026	superseded	ruby	bob	class Bob\n  def hey(msg)\n    message = msg.to_s\n    if message.upcase === message && message.length > 0\n      "Woah, chill out!"\n    elsif message =~ /\\?$/\n      "Sure."\n    elsif message.length == 0\n      "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	3	1	2014-06-10 07:56:14	2014-06-10 07:56:14	129	bob.rb
242	19	f7c5a9bb8626e5618846ea0c	superseded	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.replace(/\\s+/g, '')) === '';\n}\n\nmodule.exports = Bob;	\N	f	0	1	2014-02-01 00:31:04	2014-02-01 00:31:04	112	bob.js
243	19	508cd1fbf0d0fbac2128a8b5	superseded	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z\\xdc]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.replace(/\\s+/g, '')) === '';\n}\n\nmodule.exports = Bob;	\N	f	1	2	2014-03-10 16:05:26	2014-03-10 16:05:26	112	bob.js
244	19	7dcf0276e85c787fb0cd0e0e	hibernating	python	bob	class Bob(object):\n\tdef hey(_, arg):\n\t\tif arg.endswith('?') and (not arg.isupper()):\n\t\t\treturn 'Sure.'\n\t\telif arg.isupper():\n\t\t\treturn 'Woah, chill out!'\n\t\telif arg is None or arg.strip() == '':\n\t\t\treturn 'Fine. Be that way!'\n\t\telse:\n\t\t\treturn 'Whatever.'\n\t	\N	f	2	1	2014-01-29 13:36:21	2014-01-29 13:36:21	113	bob.py
245	19	6771995f13db864b28c80b8c	superseded	ruby	grains	class Grains\n  TOTAL_SQUARES = 64\n  START_COUNT = 1\n\n  def square(number)\n    return START_COUNT if number == START_COUNT\n    squares_on_field_before = square(number - 1)\n    squares_on_field_before * 2\n  end\n\n  def total\n    square(TOTAL_SQUARES + 1) - START_COUNT\n  end\nend	\N	f	2	1	2014-02-13 12:48:37	2014-02-13 12:48:37	114	grains.rb
246	19	823dfd42dfd72763a7ec7eaa	pending	ruby	grains	class Grains\n  TOTAL_SQUARES = 64\n\n  def square(number)\n    2 ** (number - 1)\n  end\n\n  def total\n    square(TOTAL_SQUARES + 1) - 1\n  end\nend	\N	f	0	3	2014-03-07 21:13:26	2014-03-07 21:13:26	114	grains.rb
247	19	4ccb1b97564260d3de21f93a	superseded	ruby	grains	class Grains\n  TOTAL_SQUARES = 64\n  START_COUNT = 1\n\n  def square(number)\n    return START_COUNT if number == START_COUNT\n    2 ** number - 1\n  end\n\n  def total\n    square(TOTAL_SQUARES + 1) - START_COUNT\n  end\nend	\N	f	3	2	2014-04-07 00:35:21	2014-04-07 00:35:21	114	grains.rb
248	19	d3789387b0c1ebe281522ee5	done	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA [] = []\ntoRNA ('T':xs) = 'U':toRNA xs\ntoRNA (x:xs) = x:toRNA xs	\N	f	2	1	2013-11-23 01:41:46	2013-11-23 01:41:46	115	rna-transcription.hs
249	19	ff8813c40d719a6876a83c11	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    quadrennial? && (! centennial? || quadricentennial?)\n  end\n\n  private\n\n  def quadrennial?\n    @year % 4 == 0\n  end\n\n  def centennial?\n    @year % 100 == 0\n  end\n\n  def quadricentennial?\n    @year % 400 == 0\n  end\nend\n\nclass Fixnum\n  def leap_year?\n    Year.new(self).leap?\n  end\nend	\N	f	0	1	2014-04-06 02:09:12	2014-04-06 02:09:12	116	leap.rb
250	19	a9583906a69a431d3c33782a	done	elixir	anagram	defmodule Anagram do\n  def match(word, options) do\n    Enum.filter(options, anagram?(word, &1))\n  end\n\n  def anagram?(word1, word2) do\n    word1 != word2 && sorted_chars(word1) == sorted_chars(word2)\n  end\n\n  def sorted_chars(word) do\n    Enum.sort(elem(String.to_char_list(String.downcase(word)), 1))\n  end\nend	\N	f	2	1	2014-05-30 09:21:27	2014-05-30 09:21:27	117	anagram.exs
251	19	ce18422de661f81d47a0c7da	done	haskell	raindrops	module Raindrops (convert) where\n\nconvert :: Int -> String\nconvert x\n    | not $ null parts = concat parts\n    | otherwise        = show x\n    where\n        parts = map snd . filter ((`divides` x) . fst) $\n                    [ (3, "Pling")\n                    , (5, "Plang")\n                    , (7, "Plong")\n                    ]\n\ndivides :: Integral a => a -> a -> Bool\na `divides` b = b `mod` a == 0	\N	f	0	1	2014-05-10 00:33:42	2014-05-10 00:33:42	118	raindrops.hs
253	19	711f0f9b8c3376869d9dfe54	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn upper-cased-and-letter? [s]\n  (and (re-find #"[a-zA-Z]" s) (= s (string/upper-case s))))\n\n(defn question? [s]\n  (= \\? (first (string/reverse s))))\n\n(defn response-for [s]\n  (cond\n   (string/blank? s) "Fine. Be that way!"\n   (upper-cased-and-letter? s) "Woah, chill out!"\n   (question? s) "Sure."\n   :else  "Whatever."))	\N	f	0	1	2013-11-28 15:06:11	2013-11-28 15:06:11	120	bob.clj
254	19	ab6318b23b6395b5f37168be	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn shout? [s]\n  (and (re-find #"[a-zA-Z]" s) (= s (string/upper-case s))))\n\n(defn question? [s]\n  (= \\? (first (string/reverse s))))\n\n(defn silent? [s]\n  (string/blank? s))\n\n(defn response-for [s]\n  (cond\n   (silent? s) "Fine. Be that way!"\n   (shout? s) "Woah, chill out!"\n   (question? s) "Sure."\n   :else  "Whatever."))	\N	f	0	2	2014-03-07 22:13:49	2014-03-07 22:13:49	120	bob.clj
255	19	2f23b5a27a25241a6bba3838	needs_input	clojure	bob	(ns bob\n  (:require [clojure.string :as string :refer [blank?]]))\n\n(defn shout? [s]\n  (and (re-find #"[A-Z]" s) (re-matches #"[^a-z]+" s)))\n\n(defn question? [s]\n  (= \\? (last s)))\n\n(defn silent? [s]\n  (blank? s))\n\n(defn response-for [s]\n  (cond\n   (silent? s) "Fine. Be that way!"\n   (shout? s) "Woah, chill out!"\n   (question? s) "Sure."\n   :else  "Whatever."))	\N	f	3	3	2014-05-28 15:50:15	2014-05-28 15:50:15	120	bob.clj
258	19	8283e4ead9d4d725c82192f9	done	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Data.Char (ord, isDigit, isHexDigit)\n\nhexToInt :: String -> Int\nhexToInt xs \n    | all isHexDigit xs = sum [16^n * value x | (n,x) <- zip [0..] (reverse xs)]\n    | otherwise         = 0\n\nvalue :: Char -> Int\nvalue c | isDigit c            =  ord c - ord '0'\n        | c >= 'a' && c <= 'f' =  ord c - ord 'a' + 10\n        | c >= 'A' && c <= 'F' =  ord c - ord 'A' + 10	\N	f	0	1	2014-02-16 21:14:10	2014-02-16 21:14:10	123	hexadecimal.hs
259	19	a13e368761077bfdd16a6661	pending	clojure	leap	(defn- divisible?\n  [num base]\n  (zero? (rem num base)))\n\n(defn leap-year?\n  [year]\n  (and\n    (divisible? year 4)\n    (or\n      (not (divisible? year 100))\n      (divisible? year 400))))	\N	f	0	1	2013-12-09 18:08:58	2013-12-09 18:08:58	124	leap_year.clj
260	19	8060e375ef64a05883c40537	done	ruby	strain	class Array\n  def keep &block\n    self.map do |n|\n      n if block.call(n)\n    end.compact\n  end\n\n  def discard &block\n    self.map do |n|\n      n unless block.call(n)\n    end.compact\n  end\nend	\N	f	2	1	2014-01-05 02:30:26	2014-01-05 02:30:26	125	strain.rb
261	19	6a4761739b7425aa94c70fff	hibernating	javascript	beer-song	var Beer = {SENTENCE: "<num> bottles of beer on the wall, <num> bottles of beer.\\nTake one down and pass it around, <num_less> bottles of beer on the wall.\\n\\n"};\n\nBeer.sing = function(start, stop)\n{\n  if (stop == undefined || stop < 0)\n    stop = 0;\n  var sentence, less;\n  var result = "";\n  for (var num = start; num >= stop; num--)\n  {\n     if (num == 0)\n       less = 99;\n     else\n       less = num - 1; \n     sentence = this.SENTENCE.replace(/<num>/g, num);\n     sentence = sentence.replace("<num_less>", less);\n     result += sentence;\n  }\n  return result.substr(0, result.length - 1);\n}\n\nBeer.verse = function(start)\n{\n  return this.sing(start, start);\n}\n\n\nmodule.exports = Beer;	\N	f	3	2	2014-03-25 04:27:24	2014-03-25 04:27:24	126	beer-song.js
262	19	068a0069e433855c18a74821	superseded	javascript	beer-song	var SENTENCE = "<num> bottles of beer on the wall, <num> bottles of beer.\\nTake one down and pass it around, <num_less> bottles of beer on the wall.\\n\\n";\n\nBeer = {};\n\nBeer.sing = function(start, stop)\n{\n  if (stop == undefined)\n    stop = 0;\n  var result = "";\n  var sentence = "";\n  var less;\n  for (var i = start; i >= stop; i--)\n  {\n     if (i == 0)\n       less = 99;\n      else\n        less = i - 1; \n     sentence = SENTENCE.replace(/<num>/g, i);\n     sentence = sentence.replace("<num_less>", less);\n     result += sentence;\n  }\n  console.log(result);\n  return result.substr(0, result.length - 1);\n}\n\nBeer.verse = function(start)\n{\n  return this.sing(start, start);\n}\n\n\nmodule.exports = Beer;	\N	f	3	1	2014-06-16 00:57:20	2014-06-16 00:57:20	126	beer-song.js
263	19	b17df44a0380298474019793	superseded	ruby	word-count	class Phrase\n  def initialize msg\n    @msg = msg.to_s\n  end\n\n  def word_count\n    to_hash @msg\n  end\n\n  private\n\n  def to_hash msg\n    hash = Hash.new\n    msg = sanitize msg # remove specail characters\n    msg = msg.split(/,|\\ /).reject(&:empty?) # split string to array\n    msg.uniq.each do |item| \n      hash[item] = msg.count(item)\n    end\n    hash\n  end\n\n  def sanitize msg\n    msg.delete("^a-zA-Z0-9 ,").downcase\n  end\nend	\N	f	0	1	2013-12-04 16:02:36	2013-12-04 16:02:36	127	word-count.rb
264	19	7689ba30f18d852f53a06a1b	done	ruby	word-count	class Phrase\n  def initialize msg\n    @msg = msg.to_s\n  end\n\n  def word_count\n    to_hash sanitize @msg\n  end\n\n  private\n\n  def to_hash msg\n    hash = Hash.new(0)\n    msg = msg.split(/,|\\ /).reject(&:empty?) # split string to array\n    msg.each do |item| \n      hash[item] += 1\n    end\n    hash\n  end\n\n  def sanitize msg\n    #Remove special characters\n    msg.delete("^a-zA-Z0-9 ,").downcase\n  end\nend	\N	f	2	2	2013-12-10 00:22:14	2013-12-10 00:22:14	127	word-count.rb
265	24	5456c2e5914f392eaedeaef7	pending	ruby	difference-of-squares	class Squares\r\n\r\n\tdef initialize(number)\r\n\t\t@number = number\r\n\tend\r\n\t\r\n\tdef square_of_sums\r\n\t\tsum = (0..@number).reduce(:+)\r\n\t\tsum ** 2\r\n\tend\r\n\t\r\n\tdef sum_of_squares\r\n\t\t(0..@number).inject(0){|memo, element| memo + element**2}\r\n\tend\r\n\t\r\n\tdef difference\r\n\t\tself.square_of_sums - self.sum_of_squares\r\n\tend\r\n\r\nend	\N	f	2	2	2014-06-03 17:39:38	2014-06-03 17:39:38	128	squares.rb
266	24	0d125e6b133173fda23184b4	superseded	ruby	difference-of-squares	class Squares\r\n\r\n\tdef initialize(number)\r\n\t\t@number = number\r\n\tend\r\n\t\r\n\tdef square_of_sums\r\n\t\tsum = 0\r\n\t\tfor i in 0..@number\r\n\t\t\tsum += i\r\n\t\tend\r\n\t\tsum ** 2\r\n\tend\r\n\t\r\n\tdef sum_of_squares\r\n\t\tsum = 0\r\n\t\tfor i in 0..@number\r\n\t\t\tsum += i ** 2\r\n\t\tend\r\n\t\tsum\r\n\tend\r\n\t\r\n\tdef difference\r\n\t\tself.square_of_sums - self.sum_of_squares\r\n\tend\r\n\r\nend	\N	f	3	1	2014-06-05 15:20:44	2014-06-05 15:20:44	128	squares.rb
267	24	5903cd3eb7312056ed4f7589	done	ruby	bob	class Bob\n  def hey(msg)\n    message = msg.to_s\n    if shouting?(message)\n      "Woah, chill out!"\n    elsif questioning?(message)\n      "Sure."\n    elsif silent?(message)\n      "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def shouting?(msg)\n    msg.upcase === msg && !silent?(msg)\n  end\n\n  def questioning?(msg)\n    msg.end_with? "?"\n  end\n\n  def silent?(msg)\n    msg.length == 0\n  end\nend	\N	f	3	6	2014-05-30 07:08:28	2014-05-30 07:08:28	129	bob.rb
268	24	1f4ba4f228c0616d14c562d6	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    formulate_pithy_comeback(msg)\n  end\n\n  def formulate_pithy_comeback(msg)\n    message = msg.to_s\n    if message.upcase === message && message.length > 0\n      "Woah, chill out!"\n    elsif message.end_with? "?"\n      "Sure."\n    elsif message.length == 0\n      "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	f	2	2	2014-06-08 19:03:17	2014-06-08 19:03:17	129	bob.rb
271	24	e4b7a4037db097824f40e211	superseded	ruby	bob	class Bob\n  def hey(msg)\n    message = msg.to_s\n    if shouting?(message)\n      "Woah, chill out!"\n    elsif questioning?(message)\n      "Sure."\n    elsif silent?(message)\n      "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def shouting?(msg)\n    msg.upcase === msg && msg.length > 0\n  end\n\n  def questioning?(msg)\n    msg.end_with? "?"\n  end\n\n  def silent?(msg)\n    msg.length == 0\n  end\nend	\N	f	5	5	2014-06-22 01:56:02	2014-06-22 01:56:02	129	bob.rb
272	24	c0f29cc72aba5c3dd5155832	superseded	ruby	bob	class Bob\n  def hey(msg)\n    message = msg.to_s\n    if shouting?(message)\n      "Woah, chill out!"\n    elsif questioning?(message)\n      "Sure."\n    elsif silent?(message)\n      "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\n\n  def shouting?(msg)\n    msg.upcase === msg && msg.length > 0\n  end\n\n  def questioning?(msg)\n    msg.end_with? "?"\n  end\n\n  def silent?(msg)\n    msg.length == 0\n  end\nend	\N	f	4	4	2014-06-25 15:29:10	2014-06-25 15:29:10	129	bob.rb
273	24	fcbcc8135bd50bf97c8ec4ef	pending	clojure	rna-transcription	(ns dna)\n\n(defn single-nucleo [n]\n  {:pre [(contains? #{\\C \\G \\T \\A} n)]}\n  (cond\n    (= n \\C) "G"\n    (= n \\G) "C"\n    (= n \\A) "U"\n    (= n \\T) "A"))\n\n(defn to-rna [nucleos]\n  (loop [n nucleos ret []]\n    (if (empty? n)\n      (clojure.string/join ret)\n      (recur (rest n) (conj ret (single-nucleo (first n)))))))	\N	f	1	2	2014-06-15 05:41:33	2014-06-15 05:41:33	130	dna.clj
275	24	8a5eaf0519f470a17bfa0637	hibernating	python	bob	import string\n\n\nclass Bob(object):\n\n    def hey(self, msg):\n\n        if _is_empty(msg):\n            return "Fine. Be that way!"\n\n        if _is_yell(msg):\n            return "Woah, chill out!"\n\n        if _is_question(msg):\n            return "Sure."\n\n        return 'Whatever.'\n\n\ndef _is_empty(msg):\n    return msg.strip() == ''\n\n\ndef _is_yell(msg):\n    return msg.upper() == msg and _has_letters(msg)\n\n\ndef _has_letters(msg):\n    return any(character in string.letters\n               for character in msg)\n\n\ndef _is_question(msg):\n    return msg.endswith('?')	\N	f	5	1	2014-05-22 21:43:10	2014-05-22 21:43:10	131	bob.py
277	24	2c1a16b9976b833d6cb05402	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, tally|\n      tally[word] += 1\n    }\n  end\n\n  private\n\n  def words\n    extract_words(phrase)\n  end\n\n  def extract_words(phrase)\n    normalise(phrase).split\n  end\n\n  def normalise(phrase)\n    phrase.gsub(/[^[:alnum:] ]/, '').downcase\n  end\nend	\N	f	6	2	2014-05-20 18:56:25	2014-05-20 18:56:25	133	word-count.rb
278	24	62e53b229ecbdeacd426ed2c	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    word_tally = Hash.new(0)\n    words.each do |word|\n      word_tally[word] += 1\n    end\n    word_tally\n  end\n\n  private\n\n  def words\n    words_list = extract_words(phrase)\n    normalize(words_list)\n  end\n\n  def extract_words(phrase)\n    phrase.gsub(/[^[:alnum:] ]/, '').split\n  end\n\n  def normalize(words_list)\n    words_list.map { |word|\n      word.downcase\n    }\n  end\nend	\N	f	4	1	2014-05-24 14:10:38	2014-05-24 14:10:38	133	word-count.rb
279	24	3cbfdf5fb7c321b2887d5233	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, tally|\n      tally[word] += 1\n    }\n  end\n\n  private\n\n  def words\n    extract_words(phrase)\n  end\n\n  def extract_words(phrase)\n    normalise(phrase).scan(/w+/)\n  end\n\n  def normalise(phrase)\n    phrase.downcase\n  end\nend	\N	f	5	3	2014-06-02 03:42:53	2014-06-02 03:42:53	133	word-count.rb
280	24	16f8983ad7f679d45aed8ea2	done	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, tally|\n      tally[word] += 1\n    }\n  end\n\n  private\n\n  def words\n    extract_words(phrase)\n  end\n\n  def extract_words(phrase)\n    normalise(phrase).scan(/\\w+/)\n  end\n\n  def normalise(phrase)\n    phrase.downcase\n  end\nend	\N	f	3	4	2014-06-09 17:33:03	2014-06-09 17:33:03	133	word-count.rb
281	24	781d9cb14ecd1b03ee977057	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @original_word = word\n  end\n\n  def match(words)\n    words.select { |word| same_characters?(@original_word, word) }\n  end\n\n  private\n\n  def same_characters?(word1, word2)\n    characters_in(word1) == characters_in(word2)\n  end\n\n  def characters_in(word)\n    word.chars.sort\n  end\nend	\N	f	7	1	2014-06-23 03:19:11	2014-06-23 03:19:11	134	anagram.rb
285	24	f58ea8f5fb3a63be407cc97c	done	javascript	trinary	'use strict';\n\nfunction Trinary(number) {\n  this.number = (+number || 0).toString().split('').reverse();\n};\n\nTrinary.prototype.toDecimal = function() {\n  return this.number.map(function (trit, pos) {\n    return trit * Math.pow(3, pos);\n  }).reduce(function (a, b) {return a + b});\n};\n\nmodule.exports = Trinary;	\N	f	2	1	2014-05-24 10:49:42	2014-05-24 10:49:42	137	trinary.js
286	24	ad48e73a39a1316758ad9d1c	done	python	point-mutations	class DNA(object):\n    def __init__(self, strand):\n        self.strand = strand\n\n    def hamming_distance(self, other_dna_strand):\n        return sum(x != y for (x, y) in zip(self.strand, other_dna_strand))	\N	f	1	1	2014-06-23 13:31:40	2014-06-23 13:31:40	138	dna.py
288	24	55214e78078c8554fb8ebffa	done	ruby	beer-song	class BeerSong\r\n  def verse(bottles)\r\n    phrase[ndx(bottles)] % counts(bottles)\r\n  end\r\n\r\n  def verses(first, last)\r\n    first.downto(last).reduce("") {|m,i| m<<verse(i)<<"\\n"}\r\n  end\r\n\r\n  def sing\r\n    verses(99,0)\r\n  end\r\n\r\n  def ndx(bottles)\r\n    bottles > 3 ? 3 : bottles\r\n  end\r\n\r\n  def counts(bottles)\r\n    [ ["No more", "no more", 99],\r\n      [bottles, bottles, "no more"],\r\n      [bottles, bottles, bottles-1],\r\n      [bottles, bottles, bottles-1] ][ndx(bottles)]\r\n  end\r\n\r\n  def phrase\r\n    [\r\n%Q(%s bottles of beer on the wall, %s bottles of beer.\r\nGo to the store and buy some more, %i bottles of beer on the wall.\\n),\r\n\r\n%Q(%i bottle of beer on the wall, %i bottle of beer.\r\nTake it down and pass it around, %s bottles of beer on the wall.\\n),\r\n\r\n%Q(%i bottles of beer on the wall, %i bottles of beer.\r\nTake one down and pass it around, %i bottle of beer on the wall.\\n),\r\n\r\n%Q(%i bottles of beer on the wall, %i bottles of beer.\r\nTake one down and pass it around, %i bottles of beer on the wall.\\n)\r\n    ]\r\n  end\r\nend	\N	f	4	3	2014-06-12 06:43:54	2014-06-12 06:43:54	139	beer_song.rb
289	24	2491997640fa12ed8c615cfd	superseded	ruby	beer-song	class BeerSong\r\n  def verse(bottles)\r\n    case bottles\r\n    when 0; Phrase0\r\n    when 1; Phrase1\r\n    when 2; Phrase2\r\n    else    Phrasemany % [bottles, bottles, bottles-1]\r\n    end\r\n  end\r\n\r\n  def verses(first, last)\r\n    first.downto(last).reduce("") {|m,i| m<<verse(i)<<"\\n"}\r\n  end\r\n\r\n  def sing\r\n    verses(99,0)\r\n  end\r\n\r\nPhrase0 = <<PHR\r\nNo more bottles of beer on the wall, no more bottles of beer.\r\nGo to the store and buy some more, 99 bottles of beer on the wall.\r\nPHR\r\n\r\nPhrase1 = <<PHR\r\n1 bottle of beer on the wall, 1 bottle of beer.\r\nTake it down and pass it around, no more bottles of beer on the wall.\r\nPHR\r\n\r\nPhrase2 = <<PHR\r\n2 bottles of beer on the wall, 2 bottles of beer.\r\nTake one down and pass it around, 1 bottle of beer on the wall.\r\nPHR\r\n\r\nPhrasemany = <<PHR\r\n%i bottles of beer on the wall, %i bottles of beer.\r\nTake one down and pass it around, %i bottles of beer on the wall.\r\nPHR\r\nend	\N	f	5	2	2014-06-26 01:15:04	2014-06-26 01:15:04	139	beer_song.rb
290	24	9a6d37f3c02c12432cc4bbc1	done	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn normalize [word]\n  (frequencies (str/lower-case word)))\n\n(defn anagrams-for [word words]\n  (let [normalized-word (normalize word)]\n    (filter \n      #(and (= normalized-word (normalize %)) (not= word %))\n      words)))	\N	f	0	3	2014-05-19 01:19:40	2014-05-19 01:19:40	140	anagram.clj
291	24	5db27185799ff967d35d9f94	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn normalize [word]\n\t(str/join "" (sort (str/lower-case word))))\n\n(defn anagrams-for [word words]\n  (filter \n  \t#(and (= (normalize word) (normalize %)) (not= word %))\n    words))	\N	f	2	1	2014-06-06 01:37:26	2014-06-06 01:37:26	140	anagram.clj
292	24	5f676a2e859b90970b680b8a	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn normalize [word]\n  (sort (str/lower-case word)))\n\n(defn anagrams-for [word words]\n  (let [normalizedWord (normalize word)]\n    (filter \n      #(and (= normalizedWord (normalize %)) (not= word %))\n      words)))	\N	f	2	2	2014-06-08 18:49:37	2014-06-08 18:49:37	140	anagram.clj
293	24	81345cd869cb6132d73b6d5a	done	haskell	point-mutations	module DNA\n    (hammingDistance)\nwhere\n\n\nhammingDistance :: String -> String -> Int\nhammingDistance s1 s2 = length [ True | (c1, c2) <- zip s1 s2, c1 /= c2 ]	\N	f	4	1	2014-06-03 23:44:09	2014-06-03 23:44:09	141	point-mutations.hs
294	18	6f40628f2040766171182eae	done	python	rna-transcription	class DNA:\n\n  THYMINE = 'T'\n  URACIL  = 'U'\n\n  def __init__(self, sequence):\n    self.sequence = sequence\n\n  def to_rna(self):\n    return self.sequence.replace(DNA.THYMINE, DNA.URACIL)	\N	f	4	1	2014-06-30 15:27:37	2014-06-30 15:27:37	142	rna-transcription.py
295	18	4dfb95f1d3f13f8d0bd6cc25	pending	ruby	robot-name	class Robot\n  def initialize\n    @name = nil\n  end\n\n  def name\n    unless @name\n      @name = ""\n      2.times { @name += ("A".."Z").to_a[rand(26)] }\n      3.times { @name += rand(10).to_s }\n    end\n    @name\n  end\n\n  def reset\n    @name = nil\n  end\n\n\nend	\N	f	2	1	2014-06-23 14:52:20	2014-06-23 14:52:20	143	robot.rb
296	18	0df40ac63ddf224744f639c4	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(anagrams)\n    anagrams.select do |anagram|\n      next if duplicated?(anagram)\n      normalize(word) == normalize(anagram)\n    end\n  end\n\n  private\n\n  def duplicated?(s)\n    word.downcase == s.downcase\n  end\n\n  def normalize(s)\n    s.downcase.chars.sort\n  end\n\nend	\N	f	0	1	2014-06-20 01:45:39	2014-06-20 01:45:39	144	anagram.rb
299	18	d9800fef48a0e54c1116f1e3	pending	javascript	anagram	module.exports = (function() {\n\n  // Solution strategy:\n  //\n  // 1. Split word into letters and sort, and rejoin\n  // 2. Take input array, create a companion word which is split each into letters and sort and rejoin\n  // 3. Iterate through input array. First check the word is not the same as original, then compare sorted word with sorted reference word.\n\n  var\n    Anagram,\n    sortWord,\n    sortedOriginalWord;\n\n  sortWord = function(unsortedWord) {\n    return unsortedWord.split('').sort().join('');\n  };\n\n  Anagram = function(originalWord) {\n    var self = this;\n\n    if (!originalWord) {\n      throw new Error('You must provide a non-empty word');\n    }\n\n    self.originalWord = originalWord;\n\n    self.originalLwrWord = String.prototype.toLowerCase.apply(originalWord);\n\n    self.sortedOriginalLwrWord = sortWord(self.originalLwrWord);\n\n  };\n\n  Anagram.prototype.isSameWord = function(wordLwrToCompare) {\n    var self = this;\n    return self.originalLwrWord === wordLwrToCompare;\n  };\n\n  Anagram.prototype.isAnagram = function(wordLwrToCompare) {\n    var self = this;\n    return self.sortedOriginalLwrWord === sortWord(wordLwrToCompare);\n  };\n\n  Anagram.prototype.match = function(wordListToCompare) {\n    var self = this;\n    return wordListToCompare.filter(function(wordToCompare) {\n      var \n        wordLwrToCompare = String.prototype.toLowerCase.apply(wordToCompare),\n        isSameWord = self.isSameWord(wordLwrToCompare),\n        isAnagram = self.isAnagram(wordLwrToCompare);\n\n      return isAnagram && !isSameWord;\n    });\n  };\n\n  return Anagram;\n}());	\N	f	3	2	2014-06-22 02:16:47	2014-06-22 02:16:47	146	anagram.js
300	18	c93bba4086561132e22d3d56	done	clojure	word-count	(ns phrase\n  (:use [clojure.string :only [lower-case]]))\n\n(defn word-count [s]\n  (reduce #(update-in % [%2] (fnil inc 0)) {} (re-seq #"\\w+" (lower-case s))))	\N	f	4	1	2014-06-22 17:43:49	2014-06-22 17:43:49	147	word-count.clj
301	18	1d8e2aaa11d864e06f0888b4	superseded	ruby	word-count	class Phrase\n  attr_accessor :phrase\n\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    create_histogram_from(\n      tokenize(\n        normalize))\n  end\n\n  private\n\n  def create_histogram_from(tokens)\n    tokens.each_with_object({}) { |t, hist|\n      hist[t] = hist.fetch(t, 0) + 1\n    }\n  end\n\n  def tokenize(str)\n    str.gsub(/[^\\w\\s]/, " ").split\n  end\n\n  def normalize\n    phrase.downcase\n  end\nend	\N	f	0	2	2014-06-21 12:09:34	2014-06-21 12:09:34	148	word-count.rb
302	18	417f3666755f421b8f6cf3ab	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    {}\n  end\nend	\N	f	0	1	2014-06-22 03:22:31	2014-06-22 03:22:31	148	word-count.rb
303	18	d541c27c355d163e83766cbc	superseded	ruby	word-count	class Phrase\n  attr_accessor :phrase\n\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    create_histogram_from(\n      tokenize(\n        normalize(phrase)))\n  end\n\n  private\n\n  def create_histogram_from(tokens)\n    tokens.each_with_object({}) { |t, hist|\n      hist[t] = hist.fetch(t, 0) + 1\n    }\n  end\n\n  def tokenize(input)\n    input.gsub(/[^\\w\\s]/, " ").split\n  end\n\n  def normalize(input)\n    input.downcase\n  end\nend	\N	f	4	3	2014-06-25 23:56:16	2014-06-25 23:56:16	148	word-count.rb
304	18	4d0d92e6a52e9b8510e680bc	superseded	ruby	word-count	class Phrase\n  attr_accessor :phrase\n\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    create_histogram_from(\n      tokenize(\n        normalize(phrase)))\n  end\n\n  private\n\n  def create_histogram_from(tokens)\n    tokens.each_with_object({}) { |t, hist|\n      hist[t] = hist.fetch(t, 0) + 1\n    }\n  end\n\n  def tokenize(input)\n    input.gsub(/[^\\w\\s]+/, " ").split\n  end\n\n  def normalize(input)\n    input.downcase\n  end\nend	\N	f	8	4	2014-06-29 19:37:20	2014-06-29 19:37:20	148	word-count.rb
305	18	4cc33f1f55efcc455646d028	done	ruby	word-count	class Phrase\n  attr_accessor :phrase\n\n  def initialize(input)\n    @phrase = input\n  end\n\n  def word_count\n    create_histogram_from(\n      tokenize(\n        normalize(phrase)))\n  end\n\n  private\n\n  def create_histogram_from(tokens)\n    tokens.each_with_object(Hash.new(0)) { |t, hist|\n      hist[t] += 1\n    }\n  end\n\n  def tokenize(input)\n    input.gsub(/[^\\w\\s]+/, " ").split\n  end\n\n  def normalize(input)\n    input.downcase\n  end\nend	\N	f	3	5	2014-07-01 10:51:41	2014-07-01 10:51:41	148	word-count.rb
306	18	f41ca27b78bff92755ba8362	done	ruby	crypto-square	class Crypto\n  \n  attr_reader :text\n  private :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def normalize_plaintext\n    text.downcase.scan(/\\w/).join\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.size).ceil\n  end\n\n  def plaintext_segments\n    split_segments.map { |subletters| subletters.join }\n  end\n\n  def ciphertext\n    (0...size).inject("") do |cipher, idx|\n      split_segments.each do |split_segment|\n        cipher += split_segment[idx].to_s\n      end \n      cipher\n    end\n  end\n\n  def normalize_ciphertext\n    ciphertext\n      .chars\n      .each_slice(columns)\n      .map { |subletters| subletters.join }\n      .join(" ")\n  end\n\n  private\n\n    def split_segments\n      @split_segments ||= normalize_plaintext.chars.each_slice(size)\n    end\n\n    def columns\n      5\n    end\n\nend	\N	f	0	1	2014-06-30 10:12:06	2014-06-30 10:12:06	149	crypto.rb
308	18	dcaab7879a47ce5598948309	pending	javascript	point-mutations	function DNA(comparisonDNA) {\n  this.dna = comparisonDNA.split('');\n  this.hammingDistance = hammingCalc;\n\n  function hammingCalc(input){\n    var counter = 0;\n    var inputString = input.split('').slice(0,this.dna.length);\n    for (var i = 0; i < inputString.length; i++){\n      if (inputString[i] !== this.dna[i]) {\n        counter++\n      }\n    }\n    return counter;\n  };\n}	\N	f	3	1	2014-06-29 02:58:59	2014-06-29 02:58:59	151	point-mutations.js
309	18	d5410193f38794bfb2f08acc	done	clojure	rna-transcription	(ns dna)\n\n(defn to-rna\n  "Convert a DNA string to it's RNA equivalent"\n  [dna]\n  (letfn [(transform\n            [x]\n            (if (= x \\T) \\U x))]\n    (apply str\n      (map transform dna))))	\N	f	1	2	2014-06-20 17:36:19	2014-06-20 17:36:19	152	rna-transcription.clj
310	18	017a03dd45378f7880e66e8b	superseded	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [dna]\n  (apply str (map #(if (= % \\T) \\U %) dna)))	\N	f	2	1	2014-06-27 21:48:12	2014-06-27 21:48:12	152	rna-transcription.clj
311	18	0e1f6f46f00ef1fefa271ce0	pending	ruby	leap	class Year\n  def self.leap?(year)\n    (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0)\n  end\nend	\N	f	0	1	2014-06-27 21:31:01	2014-06-27 21:31:01	153	year.rb
312	18	d12ae8a8cb612b1042db0356	done	ruby	prime-factors	class PrimeFactors\n  def self.for(num)\n    array = []\n    div = 2\n    while num > 1\n      while (num % div) == 0\n        array << div\n        num /= div\n      end\n      div += 1\n    end\n    array\n  end\nend	\N	f	4	1	2014-06-28 11:59:27	2014-06-28 11:59:27	154	prime-factors.rb
313	18	139ff0ce25055357e7f628c3	superseded	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Earth\n            | Mercury\n            | Venus\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n\ntype Years = Float\ntype Seconds = Float\n\norbitalPeriod :: Planet -> Seconds\norbitalPeriod planet = case planet of\n  Earth   -> 1.0\n  Mercury -> 0.2408467\n  Venus   -> 0.61519726\n  Mars    -> 1.8808158\n  Jupiter -> 11.862615\n  Saturn  -> 29.447498\n  Uranus  -> 84.016846\n  Neptune -> 164.79132\n\nageOn :: Planet -> Seconds -> Years\nageOn planet seconds = seconds / secondsInYear\n  where secondsInYear = orbitalPeriod planet * 31557600	\N	f	1	1	2014-06-21 21:42:16	2014-06-21 21:42:16	155	SpaceAge.hs
314	18	1f4526767e0cb6757e160b36	done	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Earth\n            | Mercury\n            | Venus\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n\ntype Years = Float\ntype Seconds = Float\n\norbitalPeriod :: Planet -> Seconds\norbitalPeriod planet = case planet of\n  Earth   -> 1.0\n  Mercury -> 0.2408467\n  Venus   -> 0.61519726\n  Mars    -> 1.8808158\n  Jupiter -> 11.862615\n  Saturn  -> 29.447498\n  Uranus  -> 84.016846\n  Neptune -> 164.79132\n\nageOn :: Planet -> Seconds -> Years\nageOn planet seconds = seconds / secondsInYear\n  where secondsInYear = orbitalPeriod planet * earthSecsPerYear\n        earthSecsPerYear = 31557600	\N	f	0	2	2014-06-24 18:53:15	2014-06-24 18:53:15	155	SpaceAge.hs
316	18	9ca88c85c0d23deccfb7a931	hibernating	go	anagram	// Steve Phillips / elimisteve\n// 2013.12.16\n\npackage anagram\n\nimport "strings"\n\nfunc Detect(subject string, candidates []string) (anagrams []string) {\n\tsubject = strings.ToLower(subject)\n\tsortedSubject := quicksort(subject)\n\tsortedCandidates := sortEach(lowerEach(candidates))\n\tfor i := range sortedCandidates {\n\t\tif sortedCandidates[i] == sortedSubject {\n\t\t\t// identical word is not anagram\n\t\t\tif candidates[i] != subject {\n\t\t\t\tanagrams = append(anagrams, candidates[i])\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nfunc lowerEach(words []string) []string {\n\tfor i := range words {\n\t\twords[i] = strings.ToLower(words[i])\n\t}\n\treturn words\n}\n\nfunc sortEach(unsorted []string) (sorted []string) {\n\tsorted = make([]string, len(unsorted))\n\tfor ndx := range unsorted {\n\t\tsorted[ndx] = quicksort(unsorted[ndx])\n\t}\n\treturn\n}\n\nfunc quicksort(str string) string {\n\tif len(str) == 0 || len(str) == 1 {\n\t\treturn str\n\t}\n\tleft, right := split(rune(str[0]), str[1:])\n\treturn quicksort(left) + string(str[0]) + quicksort(right)\n}\n\nfunc split(head rune, rest string) (left, right string) {\n\tfor _, s := range rest {\n\t\tif s <= head {\n\t\t\tleft += string(s)\n\t\t} else {\n\t\t\tright += string(s)\n\t\t}\n\t}\n\treturn\n}	\N	f	3	2	2014-06-27 11:43:36	2014-06-27 11:43:36	156	anagram.go
568	9	693a0326cc5ed646d8956231	done	ruby	binary	class Binary\n  def initialize(binary)\n    @binary = binary\n  end\n\n  def to_decimal\n    @binary.chars.reverse_each.with_index.inject(0) do |decimal, (char, exponent)|\n      decimal + (2 ** exponent) * char.to_i\n    end\n  end\nend	\N	f	1	1	2014-03-23 20:08:50	2014-03-23 20:08:50	267	binary.rb
319	18	e4bf01338ca23b573ec5dfff	superseded	haskell	beer-song	module Beer ( sing, verse ) where \n\n\nverse :: Int -> String \nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n" ++ \n          "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and " ++ \n          "pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and" ++ \n          " pass it around, 1 bottle of beer on the wall.\\n"\nverse n = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of " ++ \n          "beer.\\nTake one down and pass it around, " ++ show ( n - 1 ) ++ " bottles " ++ \n          "of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing n m = unlines . map verse $ [ n , pred n .. m ]	\N	f	4	2	2014-06-25 11:40:43	2014-06-25 11:40:43	158	Beer.hs
320	18	8bd8bdd8a0f1fabd5473e17d	pending	haskell	beer-song	module Beer ( sing, verse ) where \n\n\nverse :: Int -> String \nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\n\\\n          \\Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and \\\n          \\pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and\\\n          \\ pass it around, 1 bottle of beer on the wall.\\n"\nverse n = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of \\ \n          \\beer.\\nTake one down and pass it around, " ++ show ( n - 1 ) ++ \n          " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing n m = unlines . map verse $ [ n , pred n .. m ]	\N	f	0	3	2014-06-26 00:48:32	2014-06-26 00:48:32	158	Beer.hs
321	18	74db1056c1c010f8c4c8371e	superseded	ruby	hamming	module Hamming\n\n  def self.compute(original_strand, other_strand)\n    StrandPair.new(original_strand, other_strand).hamming_distance\n  end\n\n  class StrandPair\n    attr_accessor :original_strand\n    attr_accessor :other_strand\n\n    def initialize(original_strand, other_strand)\n      self.original_strand = original_strand\n      self.other_strand = other_strand\n    end\n\n    def hamming_distance\n      nucleic_pairs.count(&:mutation?)\n    end\n\n    private\n\n    def nucleic_pairs\n      (0..common_length-1).map do |position|\n        NucleicPair.new(original_strand[position], other_strand[position])\n      end\n    end\n\n    def common_length\n      [original_strand.length, other_strand.length].min\n    end\n  end\n\n  NucleicPair = Struct.new(:original_nucleotide, :other_nucleotide) do\n    def mutation?\n      original_nucleotide != other_nucleotide\n    end\n  end\n\nend	\N	f	3	1	2014-06-20 21:23:07	2014-06-20 21:23:07	159	hamming.rb
322	18	d487c76fc1191800e0a7683a	hibernating	ruby	hamming	module Hamming\n\n  def self.compute(original_strand, other_strand)\n    StrandPair.new(original_strand, other_strand).hamming_distance\n  end\n\n  StrandPair = Struct.new(:original_strand, :other_strand) do\n    def hamming_distance\n      nucleic_pairs.count(&:mutation?)\n    end\n\n    private\n\n    def nucleic_pairs\n      (0..common_length-1).map do |position|\n        NucleicPair.new(original_strand[position], other_strand[position])\n      end\n    end\n\n    def common_length\n      [original_strand.length, other_strand.length].min\n    end\n  end\n\n  NucleicPair = Struct.new(:original_nucleotide, :other_nucleotide) do\n    def mutation?\n      original_nucleotide != other_nucleotide\n    end\n  end\n\nend	\N	f	2	2	2014-06-21 20:54:56	2014-06-21 20:54:56	159	hamming.rb
323	18	ffbcbd4572a9f1ae873e0460	pending	ruby	etl	class ETL \n\n\tdef self.transform(hash)\n\t\thash.each.inject({}) do |new_hash, (key, value)| \n\t\t\tvalue.to_a.each {|letter| new_hash[letter.downcase] = key}\n\t\t\tnew_hash\n\t\tend\t\n\tend\n\n=begin\n\tdef self.transform(hash)\n\t\tnew_hash = {}\n\t\thash.each do |key, value| \n\t\t\tvalue.to_a.each {|letter| new_hash.merge!({letter.downcase => key})}\n\t\tend\t\n\t\tnew_hash\n\tend\n=end\nend	\N	f	6	1	2014-06-29 04:10:53	2014-06-29 04:10:53	160	etl.rb
334	23	ae6906c1851237eac18bfa22	pending	javascript	anagram	var strsort = function(str) {\n    return str.split('').sort().join('');\n}\n\nmodule.exports = function Anagram(str) {\n    this.word = str.toLowerCase();\n    this.sorted = strsort(this.word); \n\n    this.match = function(candidates) {\n        var matches = [];\n        \n        for(var i = 0; i < candidates.length; ++i) {\n            var candidateLower = candidates[i].toLowerCase();\n            if(this.word == candidateLower)\n                continue;\n\n            var sorted = strsort(candidateLower);\n            if(sorted == this.sorted)\n                matches.push(candidates[i]);\n        }\n\n        return matches;\n    }\n}	\N	f	2	1	2013-12-13 05:12:33	2013-12-13 05:12:33	165	anagram.js
326	23	46ce8055c2dca59764125bbc	superseded	ruby	meetup	require 'date'\n\nclass Meetup\n  DAYS_OF_WEEK = %w{mon tues wednes thurs fri satur sun}\n  ORDER = {first: 0, second: 1, third: 2, fourth: 3, last: -1}\n  TEENS = 13..19\n\n  def initialize(month, year)\n    @year = year\n    @month = month\n  end\n\n  DAYS_OF_WEEK.each do |day|\n    ORDER.each do |nth, index|\n      class_eval <<-RUBY\n        def #{nth}_#{day}day        \n          all_days_in_month.select(&:#{day}day?)[#{index}] \n        end                                     \n      RUBY\n    end\n    class_eval <<-RUBY\n      def #{day}teenth\n        all_days_in_month.select(&:#{day}day?).find {|date| TEENS.cover? date.day}\n      end                                    \n    RUBY\n  end\n\n  private\n  def all_days_in_month\n    @month_days ||= Date.new(@year, @month)...Date.new(@year + optional_rollover, next_month)\n  end\n\n  def optional_rollover\n    @month == 12 ? 1 : 0\n  end\n\n  def next_month\n    @month == 12 ? 1 : @month + 1\n  end\nend	\N	f	2	2	2014-06-11 08:33:36	2014-06-11 08:33:36	161	meetup.rb
327	23	74137897bc0732ba72988b56	superseded	ruby	meetup	require 'date'\n\nclass Meetup\n  DAYS_OF_WEEK = %w{mon tues wednes thurs fri satur sun}\n  ORDER = %w{first second third fourth}\n  TEENS = 13..19\n\n  def initialize(month, year)\n    @year = year\n    @month = month\n  end\n\n  DAYS_OF_WEEK.each do |day|\n    ORDER.each_with_index do |nth, index|\n      class_eval <<-RUBY\n        def #{nth}_#{day}day        \n          all_days_in_month.select(&:#{day}day?)[#{index}] \n        end                                     \n      RUBY\n    end\n    class_eval <<-RUBY\n      def last_#{day}day        \n        all_days_in_month.select(&:#{day}day?).last\n      end\n      def #{day}teenth\n        all_days_in_month.select(&:#{day}day?).find {|date| TEENS.cover? date.day}\n      end                                    \n    RUBY\n  end\n\n  private\n\n  def all_days_in_month\n    @month_days ||= Date.new(@year, @month)...Date.new(@year + optional_rollover, next_month)\n  end\n\n  def optional_rollover\n    @month == 12 ? 1 : 0\n  end\n\n  def next_month\n    @month == 12 ? 1 : @month + 1\n  end\nend	\N	f	3	1	2014-06-17 10:41:10	2014-06-17 10:41:10	161	meetup.rb
328	23	0fda66a10348b7c4add926ba	done	ruby	nucleotide-count	class DNA\n\n  attr_reader :nucleotide_counts\n\n  def initialize(dna_string)\n    @dna_string = dna_string \n\n    if invalid_dna_string?\n      raise ArgumentError.new('Invalid DNA string input')\n    end\n\n    @nucleotide_counts = create_nucleotide_count\n  end\n\n  def count(nucleotide)\n    unless valid_nucleotide?(nucleotide)\n      raise ArgumentError.new("Invalid nucleotide search at #{nucleotide}")\n    end\n\n    nucleotide_counts[nucleotide] || 0\n  end\n\nprivate\n\n  def invalid_dna_string?\n    !@dna_string.empty? && /^[ATCG]+$/.match(@dna_string).nil?\n  end\n\n  def valid_nucleotide?(nucleotide)\n    /[UATCG]/.match(nucleotide)\n  end\n\n  def create_nucleotide_count \n    dna_count = { 'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0 }\n    @dna_string.chars.each do |nucleotide|\n      nucleotide.upcase!\n      dna_count[nucleotide] += 1\n    end\n    dna_count\n  end\n\nend	\N	f	0	1	2013-12-06 01:58:25	2013-12-06 01:58:25	162	nucleotide-count.rb
329	23	77e1c61c9ded2e17f86eda39	done	haskell	point-mutations	module DNA\n       (\n         hammingDistance\n       ) where\n\nimport Data.List (foldl')\n\nhammingDistance :: String -> String -> Int\nhammingDistance n1 n2 = foldl' (+) 0 $ zipWith diff n1 n2\n                        where diff a b = fromEnum $ a /= b	\N	f	2	2	2013-11-17 07:55:42	2013-11-17 07:55:42	163	point-mutations.hs
330	23	4b28552e1fa294021f8d2a1e	superseded	haskell	point-mutations	module DNA\n       (\n         hammingDistance\n       ) where\n\nimport Data.List (foldl')\n\nhammingDistance :: String -> String -> Int\nhammingDistance n1 n2 = foldl' (+) 0 $ zipWith diff n1 n2\n                        where diff a b = case (compare a b) of EQ -> 0\n                                                               otherwise -> 1	\N	f	2	1	2013-11-20 15:55:27	2013-11-20 15:55:27	163	point-mutations.hs
331	23	92c4e50c02ef08f7ebbaa647	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object({}) do |word, hash|\n      hash[word] = words.count(word)\n    end\n  end\n\n  private \n  def remove_special_characters\n    phrase.gsub!(/\\W+/, ' ')\n  end\n\n  def words\n    remove_special_characters\n    phrase.split(/\\s+/).map do |word|\n      word.downcase\n    end\n  end\n\nend	\N	f	1	1	2013-12-13 00:11:29	2013-12-13 00:11:29	164	word-count.rb
332	23	a9b4343a2675293a277987ed	superseded	ruby	word-count	class SpecialCharacterRemover\n\n  def self.call(str)\n    str.gsub(/\\W+/, ' ')\n  end\n\nend\n\nclass PhraseWordDivider\n\n  def self.call(phrase)\n    phrase.split(/\\s+/).map do |word|\n      word.downcase\n    end\n  end\n\nend\n\nclass Phrase\n  attr_reader :words\n\n  def initialize(phrase)\n    @words = PhraseWordDivider.call(\n                                    SpecialCharacterRemover.call(phrase))\n  end\n\n  def word_count\n    words.each_with_object({}) do |word, hash|\n      hash[word] = words.count(word)\n    end\n  end\n\nend	\N	f	2	2	2014-01-21 03:48:44	2014-01-21 03:48:44	164	word-count.rb
333	23	a731e38c45973753825515a6	done	ruby	word-count	require 'forwardable'\nclass PhraseWordDivider\n\n  def self.call(phrase)\n    phrase.split(/\\W+/)\n  end\n\nend\n\nclass Words \n  extend Forwardable\n  include Enumerable\n  def_delegators :@words, :each \n\n  def initialize(phrase)\n    @words = PhraseWordDivider.call(phrase)\n  end\n\nend\n\nclass Phrase\n  attr_reader :words\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n    @words = Words.new(@phrase)\n  end\n\n  def word_count\n    words.each_with_object({}) do |word, word_counter|\n      word_counter[word] = words.count(word)\n    end\n  end\n\nend	\N	f	0	3	2014-05-04 18:48:13	2014-05-04 18:48:13	164	word-count.rb
335	23	41b6bfe40f2f5cd86fb54962	hibernating	python	rna-transcription	class DNA(object):\n\tdef __init__(self,seq):\n\t\tself.seq=seq\n\tdef to_rna(self):\n\t\ttrans= {'G':'C','C':'G','T':'A','A':'U'}\n\t\trna = ''.join([trans[s] for s in self.seq])\n\t\treturn rna	\N	f	2	1	2014-02-17 16:53:57	2014-02-17 16:53:57	166	dna.py
337	23	83027b5fd6b91d69998604d4	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verses(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{number-1} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verses(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	0	2	2013-11-27 14:49:46	2013-11-27 14:49:46	167	beer-song.rb
338	23	1e812751540e93dc5b183dc4	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    song = ""\n    number.downto(to) { |i| song << verse(i) << "\\n" }\n    song\n  end\n\n  def verse(number)\n    first_line_in_verse(number) + second_line_in_verse(number)\n  end\n\n  private\n    def bottles_string(number_of_bottles, beginning_of_line = false)\n      case number_of_bottles\n      when -1\n        "99 bottles"\n      when 0\n        first_letter = "n"\n        first_letter.upcase! if beginning_of_line\n        "#{first_letter}o more bottles"\n      when 1\n        "1 bottle"\n      else\n        "#{number_of_bottles} bottles"\n      end\n    end\n\n    def action_string(number_of_bottles)\n      take_down = nil\n      case number_of_bottles\n      when 0\n        action_string = "Go to the store and buy some more"\n      when 1\n        take_down = "it"\n      else\n        take_down = "one"\n      end\n      action_string ||= "Take #{take_down} down and pass it around" unless take_down.nil?\n      action_string\n    end\n\n    def first_line_in_verse(number)\n      "#{bottles_string(number, true)} of beer on the wall, #{bottles_string(number)} of beer.\\n"\n    end\n\n    def second_line_in_verse(number)\n      "#{action_string(number)}, #{bottles_string(number - 1)} of beer on the wall.\\n"\n    end\nend	\N	f	2	5	2013-12-15 08:38:22	2013-12-15 08:38:22	167	beer-song.rb
339	23	8068f41ab496a6bff65126e4	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verses(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    elsif number == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    elsif number == 2\n      "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n    else\n      "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number-1} bottles of beer on the wall.\\n" \n    end\n  end\n\n  def verses(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	2	1	2014-01-29 00:26:00	2014-01-29 00:26:00	167	beer-song.rb
340	23	f5785e60c103714cc1614482	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verse_numbers(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{number-1} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verse_numbers(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	1	3	2014-03-10 04:03:12	2014-03-10 04:03:12	167	beer-song.rb
341	23	92fe9f8d148bdbcf2620169c	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verse_numbers(number, to).each_with_object("") { |i, song| song << verse(i) << "\\n" }\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{(number - 1)} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verse_numbers(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	2	4	2014-04-09 07:15:11	2014-04-09 07:15:11	167	beer-song.rb
342	23	0548c02af56565be547d099c	done	ruby	grade-school	require "set"\n\nclass School\n  attr_reader :db, :name\n\n  def initialize(name)\n    @db   = Hash.new{ Array.new }\n    @name = name\n  end\n\n  def grade(number)\n    db[number]\n  end\n\n  def add(name, grade)\n    @db[grade] = (@db[grade] << name)\n  end\n\n  def sort\n    @db.each do |grade, collection|\n      @db[grade] = collection.sort\n    end\n    db\n  end\nend	\N	f	2	1	2013-12-24 05:00:35	2013-12-24 05:00:35	168	grade-school.rb
343	23	b5aca578d8b38519e8fa590a	superseded	ruby	bob	class Bob\n  \n  def hey(message)\n     \n    return "Fine. Be that way!" if (message.nil? or message.strip.empty?)\n    return "Woah, chill out!" if (message.eql?(message.upcase))\n    return "Sure." if (message.end_with?'?')\n    return "Whatever."\n    \n  end\nend	\N	f	2	1	2013-10-31 15:00:57	2013-10-31 15:00:57	169	bob.rb
708	12	f34ba2466b335a4d7eb2d37b	superseded	go	grains	package grains\r\n\r\nfunc Square(number int) uint64 {\r\n\treturn 1 << uint64(number-1)\r\n}\r\n\r\nfunc Total() uint64 {\r\n\treturn (1 << 64) - 1\r\n}\r	\N	f	1	3	2014-04-14 03:01:01	2014-04-14 03:01:01	328	grains.go
345	23	1b923bd1150c93fcfc5ef2e0	superseded	ruby	bob	class Bob\n  \n  def hey(speech)\n    \n    message = Message.new(speech)\n    return "Fine. Be that way!" if message.empty?\n    return "Woah, chill out!" if message.forceful?\n    return "Sure." if message.question?\n    return "Whatever."\n  end\nend\n\nclass Message\n  def initialize(message)\n    @message = message\n  end\n  \n  def empty?\n    @message.nil? or @message.strip.empty?\n  end\n  \n  def forceful?\n    @message == @message.upcase\n  end\n  \n  def question?\n    @message.end_with?'?'\n  end\nend	\N	f	0	5	2014-01-29 06:00:53	2014-01-29 06:00:53	169	bob.rb
346	23	a32e5cdc147b101b1d6dc98d	done	ruby	bob	class Bob\n  \n  def hey(speech)\n    \n    message = Message.new(speech)\n    \n    if message.silent_address?\n      "Fine. Be that way!" \n    elsif message.forceful?\n      "Woah, chill out!"   \n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(message)\n    @message = message\n  end\n  \n  def silent_address?\n    @message.to_s.strip.empty?\n  end\n  \n  def forceful?\n    @message == @message.upcase\n  end\n  \n  def question?\n    @message.end_with?('?')\n  end\nend	\N	f	2	10	2014-03-05 20:51:43	2014-03-05 20:51:43	169	bob.rb
347	23	fae15b1cec1cf299a7b37a65	superseded	ruby	bob	require_relative 'message'\n\nclass Bob\n  \n  def hey(speech)\n    \n    message = Message.new(speech)\n    return "Fine. Be that way!" if message.empty?\n    return "Woah, chill out!" if message.forceful?\n    return "Sure." if message.question?\n    return "Whatever."\n  end\nend	\N	f	0	3	2014-03-19 22:51:39	2014-03-19 22:51:39	169	bob.rb
348	23	02c9a7af229a4f2ef4d2b9f7	superseded	ruby	bob	class Message\n  def initialize(message)\n    @message = message\n  end\n  \n  def empty?\n    @message.nil? or @message.strip.empty?\n  end\n  \n  def forceful?\n    @message == @message.upcase\n  end\n  \n  def question?\n    @message.end_with?'?'\n  end\nend	\N	f	1	4	2014-03-25 05:53:28	2014-03-25 05:53:28	169	bob.rb
350	23	c84bbe5fac9282a35b93df53	superseded	ruby	bob	class Bob\n  \n  def hey(speech)\n    \n    message = Message.new(speech)\n    \n    if message.empty?\n      "Fine. Be that way!" \n    elsif message.forceful?\n      "Woah, chill out!"   \n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(message)\n    @message = message\n  end\n  \n  def empty?\n    @message.to_s.strip.empty?\n  end\n  \n  def forceful?\n    @message == @message.upcase\n  end\n  \n  def question?\n    @message.end_with?'?'\n  end\nend	\N	f	2	8	2014-05-25 22:55:43	2014-05-25 22:55:43	169	bob.rb
351	23	1835a95f5829bc571ac9b8f0	superseded	ruby	bob	class Bob\n  \n  def hey(speech)\n    \n    message = Message.new(speech)\n    \n    if message.empty?\n      "Fine. Be that way!" \n    elsif message.forceful?\n      "Woah, chill out!"   \n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(message)\n    @message = message\n  end\n  \n  def empty?\n    @message.nil? or @message.strip.empty?\n  end\n  \n  def forceful?\n    @message == @message.upcase\n  end\n  \n  def question?\n    @message.end_with?'?'\n  end\nend	\N	f	0	7	2014-06-08 23:35:56	2014-06-08 23:35:56	169	bob.rb
352	23	0b256d2a38cbd53aa75edcd0	superseded	ruby	bob	class Bob\n  \n  def hey(speech)\n    \n    message = Message.new(speech)\n    \n    if message.silent_address?\n      "Fine. Be that way!" \n    elsif message.forceful?\n      "Woah, chill out!"   \n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(message)\n    @message = message\n  end\n  \n  def silent_address?\n    @message.to_s.strip.empty?\n  end\n  \n  def forceful?\n    @message == @message.upcase\n  end\n  \n  def question?\n    @message.end_with?'?'\n  end\nend	\N	f	5	9	2014-06-20 20:15:27	2014-06-20 20:15:27	169	bob.rb
353	23	1021d17217a04ba90a211cb0	superseded	javascript	beer-song	exports.verse = function(number) {\n    if(number === 2){\n            return "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n";\n    }else if(number === 1){\n        return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n    }else if(number === 0){\n        return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n    }\n\n    return number + " bottles of beer on the wall, " +\n    number + " bottles of beer.\\nTake one down and pass it around, " +\n        (number - 1) + " bottles of beer on the wall.\\n";\n};\n\nexports.sing = function(from, to) {\n    to = to?to:0;\n    var verses = '';\n    for(var i=from; i >= to; i--){\n        if(i !== from){\n            verses = verses + '\\n' + exports.verse(i);\n        }else{\n            verses = verses + exports.verse(i);\n        }\n    }\n    return verses;\n};	\N	f	0	1	2014-02-28 08:47:38	2014-02-28 08:47:38	170	beer-song.js
354	23	93d8e356163b7f75d6832c96	done	javascript	beer-song	exports.verse = function(number) {\n    if (number === 2) {\n        return "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n";\n    } else if (number === 1) {\n        return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n    } else if (number === 0) {\n        return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n    }\n\n    return number + " bottles of beer on the wall, " +\n        number + " bottles of beer.\\nTake one down and pass it around, " +\n        (number - 1) + " bottles of beer on the wall.\\n";\n};\n\nexports.sing = function(from, to) {\n    to = to ? to : 0;\n    var verses = '';\n    for (var i = from; i >= to; i--) {\n        if (i !== from) {\n            verses = verses + '\\n' + exports.verse(i);\n        } else {\n            verses = verses + exports.verse(i);\n        }\n    }\n    return verses;\n};	\N	f	4	2	2014-05-02 05:25:42	2014-05-02 05:25:42	170	beer-song.js
394	25	8289ada79e5dc652f83a21dc	done	ruby	grains	class Grains\n\n  def square(square_count)\n    square_count == 1 ? 1 : 2 * square(square_count - 1)\n  end\n\n  def total\n    squares = 1..64\n    squares.map{|s| square(s)}.reduce(0, &:+)\n  end\n\nend	\N	f	3	1	2014-04-15 09:41:25	2014-04-15 09:41:25	191	grains.rb
356	23	f8250ee2a1a4974f8197c708	pending	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(options)\n    sorted_word = sort_word(word)\n  \n    options.select do |option|\n      next if word == option.downcase\n      sorted_option = sort_word(option)\n      option if sorted_word == sorted_option\n    end\n  end\n\n  def sort_word(input)\n    input.downcase.chars.sort\n  end\nend	\N	f	2	2	2014-01-24 17:29:16	2014-01-24 17:29:16	171	anagram.rb
357	23	b35b3775dfc4cfc2a6dbc131	hibernating	clojure	bob	(ns bob)\r\n\r\n(defn- classify [s]\r\n  (cond\r\n   (re-matches #"^\\s*$" s) :silence\r\n   (re-matches #"[A-Z]+" (clojure.string/replace s #"[^A-Za-z]" "")) :shout\r\n   (re-matches #".*!\\s*$" s) :forceful\r\n   (re-matches #".*\\?\\s*$" s) :question\r\n   :> :else))\r\n\r\n(defn response-for [s]\r\n  (condp = (classify s)\r\n    :silence "Fine. Be that way!"\r\n    :question "Sure."\r\n    :shout "Woah, chill out!"\r\n    :forceful "Whatever."\r\n    :> :else "Whatever."))\r	\N	f	2	2	2014-01-31 15:52:33	2014-01-31 15:52:33	172	bob.clj
358	23	0d9c316b964e18b5404a2f64	superseded	clojure	bob	(ns bob)\r\n\r\n(defn- classify [s]\r\n  (cond\r\n   (re-matches #"^\\s*$" s) :silence\r\n   (re-matches #"^[\\a-z]*$" s) :shout\r\n   (re-matches #"!\\s*$" s) :forceful\r\n   (re-matches #"\\?\\s*$" s) :question\r\n   :else))\r\n\r\n(defn responds-to-something [s]\r\n  (condp = (classify s)\r\n    :silence "Fine. Be that way!"\r\n    :question "Sure."\r\n    :shout "Woah, chill out!"\r\n    :forceful "Whatever."\r\n    :else "Whatever."))\r	\N	f	2	1	2014-04-16 22:47:22	2014-04-16 22:47:22	172	bob.clj
359	23	10941bfbe6444bf01ac05dc7	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nnormalise :: String -> String\nnormalise = sort . map toLower\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s = filter go\n  where\n    ns   = normalise s\n    go x = s /= x && ns == normalise x	\N	f	2	2	2014-01-22 20:58:01	2014-01-22 20:58:01	173	anagram.hs
360	23	4097d62d3e736a2690c3b340	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nnormalise :: String -> String\nnormalise = sort . map toLower\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s xs = filter go xs\n  where\n    go x = normalise s == normalise x && s /= x	\N	f	2	1	2014-02-02 00:18:24	2014-02-02 00:18:24	173	anagram.hs
361	23	2bf4474d3d5a34c1dba1de48	done	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nnormalise :: String -> String\nnormalise = sort . map toLower\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s = filter go\n  where\n    go x = s /= x && normalise s == normalise x	\N	f	1	3	2014-05-01 05:58:25	2014-05-01 05:58:25	173	anagram.hs
362	23	e9189b1ac5244fbef372b78f	superseded	python	bob	class Bob():\n    @staticmethod\n    def hey(sentence):\n        if sentence == "":\n            return "Fine. Be that way."\n        if sentence.endswith("?"):\n            return "Sure."\n        if sentence.isupper():\n            return "Woah, chill out!"\n\n        return "Whatever."	\N	f	2	5	2013-12-04 11:51:49	2013-12-04 11:51:49	174	bob.py
363	23	ef959f9eb5bf3442b0037ae8	superseded	python	bob	class Bob():\n  def hey(self, question):\n    if len(question) == 0:\n      return "Fine. Be that way."\n    elif question[-1] == '?':\n      return "Sure."\n    elif question.upper() == question:\n      return "Woah, chill out!"\n    else:\n      return "Whatever."	\N	f	2	1	2013-12-08 03:01:23	2013-12-08 03:01:23	174	bob.py
364	23	18657c47f92011ca2e8d9c76	superseded	python	bob	class Bob():\n  @staticmethod\n  def hey(sentence):\n    if sentence == "":\n      return "Fine. Be that way."\n    elif sentence.endswith("?"):\n      return "Sure."\n    elif sentence.upper() == sentence:\n      return "Woah, chill out!"\n    else:\n      return "Whatever."	\N	f	2	2	2014-01-13 14:05:00	2014-01-13 14:05:00	174	bob.py
365	23	967c90d9c0770c05f37cf047	done	python	bob	class Bob():\n    @staticmethod\n    def hey(sentence):\n        if sentence == "": # Silence\n            return "Fine. Be that way."\n        if sentence.endswith("?"): # Question\n            return "Sure."\n        if sentence.isupper(): # Shouting\n            return "Woah, chill out!"\n\n        return "Whatever."	\N	f	1	6	2014-01-18 02:49:33	2014-01-18 02:49:33	174	bob.py
366	23	2f60e5ab8c4215c4e9768fe4	superseded	python	bob	class Bob():\n  @staticmethod\n  def hey(sentence):\n    if Bob.is_silence(sentence):\n      return "Fine. Be that way."\n    if Bob.is_question(sentence):\n      return "Sure."\n    if Bob.is_yelling(sentence):\n      return "Woah, chill out!"\n\n    return "Whatever."\n\n  @staticmethod\n  def is_silence(sentence):\n    return not sentence\n\n  @staticmethod\n  def is_question(sentence):\n    return sentence.endswith('?')\n\n  @staticmethod\n  def is_yelling(sentence):\n    return sentence.upper() == sentence	\N	f	2	3	2014-02-12 21:32:57	2014-02-12 21:32:57	174	bob.py
367	23	032a3767acdb0b592155e13c	superseded	python	bob	class Bob():\n    @staticmethod\n    def hey(sentence):\n        if Bob.is_silence(sentence):\n            return "Fine. Be that way."\n        if Bob.is_question(sentence):\n            return "Sure."\n        if Bob.is_yelling(sentence):\n            return "Woah, chill out!"\n\n        return "Whatever."\n\n    @staticmethod\n    def is_silence(sentence):\n        return not sentence\n\n    @staticmethod\n    def is_question(sentence):\n        return sentence.endswith('?')\n\n    @staticmethod\n    def is_yelling(sentence):\n        return sentence.isupper()	\N	f	2	4	2014-02-28 17:22:07	2014-02-28 17:22:07	174	bob.py
369	23	c2283f73aaf4a86ec4ff23f5	done	ruby	gigasecond	class Gigasecond\n\n  GIGASECOND = 1_000_000_000\n\n  def initialize( birth_date )\n    @born_on = birth_date\n  end\n\n  def date\n    @born_on + ( GIGASECOND / ( 60 * 60 * 24 ) ) \n  end\nend	\N	f	0	1	2014-03-30 05:37:34	2014-03-30 05:37:34	176	gigasecond.rb
370	25	b2061a60b5579cc1030f4093	superseded	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    case \n    when phrase.strip.empty?\n      'Fine. Be that way!'\n    when phrase.upcase == phrase\n      'Woah, chill out!'\n    when phrase[-1,1] == '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\nend	\N	f	0	1	2014-04-14 20:56:30	2014-04-14 20:56:30	177	bob.rb
372	25	afe7a96280ba2ea19ff768f9	superseded	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    phrase = AdultGibberish.new( phrase )\n\n    case \n    when phrase.is_silent?\n      'Fine. Be that way!'\n    when phrase.is_shouting?\n      'Woah, chill out!'\n    when phrase.is_question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\nend\n\nclass AdultGibberish < String \n\n  attr_reader :phrase\n\n  def initialize( phrase )\n    @phrase = phrase\n  end\n\n  def is_question?\n    phrase.end_with? '?'\n  end\n\n  def is_silent?\n    phrase.strip.empty?\n  end\n\n  def is_shouting?\n    phrase.upcase == phrase \n  end\n\nend	\N	f	6	3	2014-05-26 01:13:48	2014-05-26 01:13:48	177	bob.rb
373	25	d4c4013ade4919bcf72b7b36	done	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    phrase = AdultGibberish.new( phrase )\n\n    case \n    when phrase.silent?\n      'Fine. Be that way!'\n    when phrase.shouting?\n      'Woah, chill out!'\n    when phrase.question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\nend\n\nclass AdultGibberish\n\n  attr_reader :phrase\n\n  def initialize( phrase )\n    @phrase = phrase\n  end\n\n  def question?\n    phrase.end_with? '?'\n  end\n\n  def silent?\n    phrase.strip.empty?\n  end\n\n  def shouting?\n    phrase.upcase!.nil?\n  end\n\nend	\N	f	11	4	2014-06-07 06:02:52	2014-06-07 06:02:52	177	bob.rb
374	25	2e2eb96deefb992126dab36e	done	haskell	bob	module Bob where\n\nisBlank :: [Char] -> Bool\nisBlank string = all ((==) ' ') string\n\nhasNoLowerCaseLetters :: [Char] -> Bool\nhasNoLowerCaseLetters string = null [c | c <- string, elem c ['a'..'z']]\n\nisQuestion :: [Char] -> Bool\nisQuestion comment = '?' == last comment\n\nresponseFor :: [Char] -> [Char]\nresponseFor comment\n  | isBlank comment = "Fine. Be that way."\n  | hasNoLowerCaseLetters comment = "Woah, chill out!"\n  | isQuestion comment = "Sure."\n  | otherwise = "Whatever."	\N	f	2	1	2014-04-16 03:34:34	2014-04-16 03:34:34	178	bob.hs
376	25	a0fa32e979a97bf9825f0362	pending	go	anagram	package anagram\n\nimport (\n  "strings"\n  "sort"\n)\n\nfunc Detect(exemplar string, candidates []string) []string {\n  exactMatch := func (candidate string) bool {\n    return candidate == strings.ToLower(exemplar)\n  }\n\n  sort := func(candidate string) string {\n    var split sort.StringSlice\n    split = strings.Split(candidate, "")\n    split.Sort()\n    return strings.Join(split, "")\n  }\n\n  sortedExemplar := sort(strings.ToLower(exemplar))\n\n  noMatch := func(candidate string) bool {\n    candidate = sort(candidate)\n    return candidate != sortedExemplar\n  }\n\n  var fCandidates FunctionalArray\n  fCandidates = candidates\n  var matches []string\n  matches = fCandidates.Map(strings.ToLower).Reject(exactMatch).Reject(noMatch)\n  return matches\n}\n\ntype FunctionalArray []string\ntype Procedure func(string) string\ntype BooleanProcedure func(string) bool\n\nfunc (fa FunctionalArray) Map(procedure Procedure) FunctionalArray {\n  result := make([]string, len(fa))\n  for i, v := range fa {\n    result[i] = procedure(v)\n  }\n  return result\n}\n\nfunc (fa FunctionalArray) Reject(procedure BooleanProcedure) FunctionalArray {\n  result := make([]string, len(fa))\n  index := 0\n  for _, v := range fa {\n    if !procedure(v) {\n      result[index] = v\n      index += 1\n    }\n  }\n  return result[:index]\n}	\N	f	1	1	2014-04-27 22:08:45	2014-04-27 22:08:45	180	anagram.go
377	25	c20aa4142d9ac0a77563b153	superseded	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [string]\n  (assert (not (re-find #"[^CGAT]" string)))\n  (apply str (map (fn [c] (if (= \\T c) \\U c)) string)))	\N	f	2	1	2014-04-13 05:46:02	2014-04-13 05:46:02	181	dna.clj
378	25	fe7214021a4c602907ab9b59	done	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [string]\n  (assert (not (re-find #"[^CGAT]" string)))\n  (clojure.string/replace string \\T \\U))	\N	f	0	2	2014-04-18 23:23:07	2014-04-18 23:23:07	181	dna.clj
379	25	efb5f88b9adbf38b4407940e	done	ruby	roman-numerals	class Fixnum\n  LOOKUP = {\n    1000 => "M",\n    900  => "CM",\n    500  => "D",\n    400  => "CD",\n    100  => "C",\n    90   => "XC",\n    50   => "L",\n    40   => "XL",\n    10   => "X",\n    9    => "IX",\n    5    => "V",\n    4    => "IV",\n    1    => "I",\n    0    => ""\n  }\n\n  def to_roman\n    LOOKUP.each do |arabic, roman|\n      if self == arabic\n        return roman\n      elsif self > arabic\n        return roman + (self - arabic).to_roman\n      end\n    end\n  end\n\nend	\N	f	2	1	2014-04-14 21:46:50	2014-04-14 21:46:50	182	roman-numerals.rb
380	25	db0892609b736b6ab083d6f0	superseded	haskell	rna-transcription	module DNA where\n\nuracilToThymidine :: Char -> Char\nuracilToThymidine nucleotide = if nucleotide == 'T' then 'U' else nucleotide\n\ntoRNA :: String -> String\ntoRNA dna = map uracilToThymidine dna\n\n-- I guess I could have used pattern matching here, like:\n-- uracileToThymidine 'T' = 'U'\n-- uracileToThymidine nucleotide = nucleotide\n-- But I decided to use if/else for this one. Thoughts?	\N	f	0	1	2014-05-07 00:57:36	2014-05-07 00:57:36	183	rna-transcription.hs
381	25	9bedb6832d80a52a3b3157b6	superseded	haskell	rna-transcription	module DNA where\n\nuracilToThymidine :: Char -> Char\nuracilToThymidine 'T' = 'U'\nuracilToThymidine nucleotide = nucleotide\n\ntoRNA :: String -> String\ntoRNA dna = map uracilToThymidine dna	\N	f	0	2	2014-05-11 06:24:46	2014-05-11 06:24:46	183	rna-transcription.hs
382	25	b2fd505d45c71ee456996103	done	haskell	rna-transcription	module DNA where\n\ntype Nucleotide = Char\ntype DNA = [Nucleotide]\ntype RNA = [Nucleotide]\n\nthymidineToUracil :: Nucleotide -> Nucleotide\nthymidineToUracil 'T' = 'U'\nthymidineToUracil nucleotide = nucleotide\n\ntoRNA :: DNA -> RNA\ntoRNA = map thymidineToUracil	\N	f	3	3	2014-05-19 09:50:24	2014-05-19 09:50:24	183	rna-transcription.hs
384	25	0c8e4dadcff1788afdb176c1	superseded	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(input_number)\n    if (translated = prime_factors(input_number)).empty?\n      String(input_number)\n    else\n      translated.values.join\n    end\n  end\n\n  private\n\n  def prime_factors(number)\n    DICTIONARY.select { |prime, _| Integer(number) % prime == 0 }\n  end\n\nend	\N	f	2	2	2014-04-14 06:57:58	2014-04-14 06:57:58	184	raindrops.rb
386	25	1b321cd62273ef8cd603321e	hibernating	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(input)\n    if has_factors?(input)\n      translate(input)\n    else\n      String(input)\n    end\n  end\n\n  private\n\n  def has_factors?(number)\n    DICTIONARY.any?(&factors_of(number))\n  end\n\n  def translate(number)\n    DICTIONARY.select(&factors_of(number)).values.join\n  end\n\n  def factors_of(subject)\n    ->(*candidate) { factor?(candidate.flatten[0], subject) }\n  end\n\n  def factor?(candidate, subject)\n    Integer(subject) % candidate == 0\n  end\n\nend	\N	f	2	4	2014-05-25 20:18:42	2014-05-25 20:18:42	184	raindrops.rb
387	25	db2179b142e2762c2f84ba32	hibernating	python	word-count	#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom string import punctuation as punct\n\nclass Phrase(object):\n\tdef __init__(self, phrase):\n\t\tself.phrase = phrase\n\n\tdef word_count(self):\n\t\tresult = {}\n\t\twords = filter(None, filter(lambda x: x not in punct, self.phrase.lower()).split(' '))\n\t\tfor word in words:\n\t\t\tif not word in result:\n\t\t\t\tresult[word] = words.count(word)\n\t\treturn result	\N	f	0	1	2014-05-05 03:05:02	2014-05-05 03:05:02	185	word-count.py
388	25	d4d1c804c7b28ae463bdcad3	done	python	nucleotide-count	class DNA:\n  \n  def __init__(self, dna):\n    self.dna = dna\n\n  def count(self, element):\n      if ['A', 'C', 'G', 'T', 'U'].count(element) == 1:\n        return self.dna.count(element)\n      else:\n        raise ValueError("%s is not a nucleotide." % element)\n\n  def nucleotide_counts(self):\n    result = {}\n    for nu in ['A', 'C', 'G', 'T']:\n      result[nu] = self.count(nu)\n    return result	\N	f	2	1	2014-04-13 01:23:06	2014-04-13 01:23:06	186	dna.py
389	25	2ae4100737c1459cc0078bb8	hibernating	javascript	bob	var Bob = function() {\n  this.hey = function(message){\n    if(isSilence(message)){\n      return "Fine. Be that way!";\n    }\n    if(isAllCaps(message)){\n      return "Woah, chill out!";\n    }\n    if(isQuestion(message)){\n      return "Sure.";\n    }\n    return "Whatever.";\n  };\n\n  function isAllCaps(message){\n    return message == message.toUpperCase() && /[A-Z]/.test(message);\n  }\n\n  function isQuestion(message){\n    return message.charAt(message.length - 1) == '?';\n  }\n\n  function isSilence(message){\n    return message.trim() == "";\n  }\n};\nmodule.exports = Bob;	\N	f	2	1	2014-04-03 20:04:49	2014-04-03 20:04:49	187	bob.js
390	25	01ab1fc26cf6e872d3baefb6	done	python	anagram	class Anagram(str):\n\t"""Represents an anagram"""\n\tdef __init__(self, word):\n\t\tsuper(Anagram, self).__init__(word)\n\t\tlower = self.lower() #Anagram checking is case insensitive\n\t\tself._sort_cache = sorted(lower) #Anagrams are immutable, so the result of sorting will always be the same\n\tdef match(self, possible):\n\t\t"""Filters a list of possible anagrams of the word, down to those that are correct anagrams"""\n\t\treturn filter(self.check_match,possible)\n\t\n\tdef check_match(self, word):\n\t\t"""Check if a word is a correct anagram match"""\n\t\treturn word.lower() != self.lower() and sorted(word.lower()) == self._sort_cache	\N	f	2	2	2014-06-04 01:04:38	2014-06-04 01:04:38	188	anagram.py
391	25	c3a05aed52ebbf0d9b57f839	superseded	python	anagram	class Anagram(str):\n\tdef __init__(self, word):\n\t\tsuper(Anagram, self).__init__(word)\n\t\tlower = self.lower()\n\t\tself._sort_cache = sorted(lower)\n\tdef match(self, possible):\n\t\treturn filter(self.check_match,possible)\n\t\n\tdef check_match(self, word):\n\t\treturn word.lower() != self.lower() and sorted(word.lower()) == self._sort_cache	\N	f	2	1	2014-06-25 00:00:25	2014-06-25 00:00:25	188	anagram.py
393	25	814542996c10893cee267533	hibernating	clojure	grade-school	(ns school)\n\n(defn add [m student grade]\n  (cond\n     (contains? m grade) (conj m {grade (conj (get m grade) student)})\n     :else (assoc m grade (vector student))\n   )\n\n\n)\n\n(defn grade [studentList grade]\n  (cond\n   (contains? studentList grade)(studentList grade)\n   :else []\n   )\n)\n\n\n(defn sorted [m]\n  (into (sorted-map)\n        (into {}\n              (for [[k v] m] [k (#(into (vector) (sort %)) v)])\n         )\n   )\n)	\N	f	2	1	2014-04-04 10:27:44	2014-04-04 10:27:44	190	school.clj
397	25	e0d6b4c87f9fab00e0318a13	superseded	ruby	grade-school	class School\n\t\n\tattr_reader :students\n\n\tdef initialize\n\t\t@students = Hash.new { |h,k| h[k] = [] }\n\tend\n\t\n\tdef db\n\t\tstudents\n\tend\n\n\tdef add(name, count)\n\t\tdb[count].push(name)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\n\nend\n\n\n 	\N	f	4	5	2014-05-15 12:51:29	2014-05-15 12:51:29	192	grade-school.rb
398	25	1e7fe319fbd313c6c3603ba0	superseded	ruby	grade-school	class School\n\t\n\tattr_reader :students, :clone\n\n\tdef initialize\n\t\t@students = Hash.new { |h,k| h[k] = [] }\n\t\tclone = students\n\tend\n\t\n\tdef db\n\t\tstudents\n\tend\n\n\tdef add(name, count)\n\t\tdb[count].push(name)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\n\nend\n\n\n 	\N	f	2	6	2014-05-16 09:45:37	2014-05-16 09:45:37	192	grade-school.rb
399	25	b003592537a066747db337e7	done	ruby	grade-school	require 'pry'\n\nclass School\n\tdef initialize\n\t\t@students = Hash.new { |h,k| h[k] = [] }\n\tend\n\t\n\tdef db\n\t\tstudents\n\tend\n\n\tdef add(name, count)\n\t\tstudents[count].push(name)\n\tend\n\n\tdef grade(num)\n\t\tstudents[num]\n\tend\n\n\tdef sort \n\t\tstudents.keys.sort.each_with_object({}) { | key, obj |obj[key] = students[key].sort }\n\tend\n\n\tprivate\n\n\tattr_reader :students\n\nend\n 	\N	f	4	7	2014-05-31 16:36:19	2014-05-31 16:36:19	192	grade-school.rb
400	25	fedee0f5a51842427e3f4fa1	superseded	ruby	grade-school	class School\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\t@students[key].push(value)\n\t\t@students\n\tend\n\n\tdef grade(num)\n\t\t@students[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[@students.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\n\n\n\nend\n\n# {3=>["Kyle"], 4=>["Christopher", "Jennifer"], 6=>["Kareem"]}	\N	f	0	1	2014-06-03 04:09:22	2014-06-03 04:09:22	192	grade-school.rb
401	25	9a8ec19e004b0ffe5ddd8d11	superseded	ruby	grade-school	class School\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\tdb[key].push(value)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\nend	\N	f	4	3	2014-06-03 07:33:27	2014-06-03 07:33:27	192	grade-school.rb
402	25	c3ff5b8fac8054c7e36b1c82	hibernating	python	bob	import re\n\nclass Bob:\n    def hey(self, message):\n        if re.search(r"^[^a-z]*[A-Z]+[^a-z]*$", message):\n            all_caps = True\n            for char in message:\n                if char.islower(): # tricky unicode characters...\n                    all_caps = False\n                    break\n            if all_caps:\n                return 'Woah, chill out!'\n        if re.search(r"\\?$", message):\n            return 'Sure.'\n        if re.search(r"^\\s*$", message):\n            return 'Fine. Be that way!'\n        return 'Whatever.'	\N	f	0	1	2014-06-21 07:01:49	2014-06-21 07:01:49	193	bob.py
404	25	db61868f471c37d4ffaa1fdf	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  def initialize(nucleotides)\n    self.nucleotides = nucleotides\n  end\n\n  def count(nucleotide_type)\n    dna_error unless all_nucleotides.member? nucleotide_type\n    counter = nucleotides.select {|type| type == nucleotide_type}\n    counter.length\n  end\n\n  def nucleotide_counts\n    dna_count = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n    dna_count.merge!(dna_count) { |key, v1| count(key) }\n  end\n\n  private\n\n    def nucleotides=(new_nucleotides)\n      new_nucleotides = new_nucleotides.chars\n      new_nucleotides.each do |nucleotide|\n        dna_error unless dna_nucleotides.member? nucleotide\n      end\n      @nucleotides = new_nucleotides\n    end\n\n    def dna_error\n      raise ArgumentError, "DNA nucleotides only"\n    end\n\n    def all_nucleotides\n      %w( A C G T U )\n    end\n\n    def dna_nucleotides\n      %w( A C G T )\n    end\nend	\N	f	4	1	2014-06-10 04:29:33	2014-06-10 04:29:33	194	nucleotide-count.rb
405	20	8b6dbf78fd0ede777bc858ee	pending	ruby	raindrops	class Raindrops\n\n def convert(i)\n   unless pling?(i) || plang?(i) || plong?(i)\n     return i.to_s\n   end\n   \n   s = ''\n   s << 'Pling' if pling?(i)\n   s << 'Plang' if plang?(i)\n   s << 'Plong' if plong?(i)\n   s\n end\n  \n  def pling?(j)\n    (j % 3) == 0\n  end\n  \n  def plang?(j)\n    (j % 5) == 0\n  end\n\n  def plong?(j)\n    (j % 7) == 0\n  end\n    \n  \n  \nend	\N	f	0	1	2014-03-11 17:54:19	2014-03-11 17:54:19	195	raindrops.rb
406	20	8a45466370df50c376ecfdb2	hibernating	haskell	food-chain	module FoodChain (song) where\n\nsong :: String\nsong = unlines\n    [ "I know an old lady who swallowed a fly."\n    , "I don't know why she swallowed the fly. Perhaps she'll die."\n    , ""\n    , "I know an old lady who swallowed a spider."\n    , "It wriggled and jiggled and tickled inside her."\n    , "She swallowed the spider to catch the fly."\n    , "I don't know why she swallowed the fly. Perhaps she'll die."\n    , ""\n    , "I know an old lady who swallowed a bird."\n    , "How absurd to swallow a bird!"\n    , "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."\n    , "She swallowed the spider to catch the fly."\n    , "I don't know why she swallowed the fly. Perhaps she'll die."\n    , ""\n    , "I know an old lady who swallowed a cat."\n    , "Imagine that, to swallow a cat!"\n    , "She swallowed the cat to catch the bird."\n    , "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."\n    , "She swallowed the spider to catch the fly."\n    , "I don't know why she swallowed the fly. Perhaps she'll die."\n    , ""\n    , "I know an old lady who swallowed a dog."\n    , "What a hog, to swallow a dog!"\n    , "She swallowed the dog to catch the cat."\n    , "She swallowed the cat to catch the bird."\n    , "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."\n    , "She swallowed the spider to catch the fly."\n    , "I don't know why she swallowed the fly. Perhaps she'll die."\n    , ""\n    , "I know an old lady who swallowed a goat."\n    , "Just opened her throat and swallowed a goat!"\n    , "She swallowed the goat to catch the dog."\n    , "She swallowed the dog to catch the cat."\n    , "She swallowed the cat to catch the bird."\n    , "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."\n    , "She swallowed the spider to catch the fly."\n    , "I don't know why she swallowed the fly. Perhaps she'll die."\n    , ""\n    , "I know an old lady who swallowed a cow."\n    , "I don't know how she swallowed a cow!"\n    , "She swallowed the cow to catch the goat."\n    , "She swallowed the goat to catch the dog."\n    , "She swallowed the dog to catch the cat."\n    , "She swallowed the cat to catch the bird."\n    , "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her."\n    , "She swallowed the spider to catch the fly."\n    , "I don't know why she swallowed the fly. Perhaps she'll die."\n    , ""\n    , "I know an old lady who swallowed a horse."\n    , "She's dead, of course!"\n    , ""\n    ]	\N	f	0	1	2014-03-07 00:46:41	2014-03-07 00:46:41	196	FoodChain.hs
407	20	49ee1eca9146d04d16393ebb	superseded	ruby	bob	class Bob\n  def hey(message)\n    if silent?(message)\n      'Fine. Be that way.'\n    elsif shouting?(message)\n      'Woah, chill out!'\n    elsif question?(message)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  def question?(message)\n    message[-1] == '?'\n  end\n\n  def shouting?(message)\n    message == message.upcase\n  end\n\n  def silent?(message)\n    message.nil? or message.empty?\n  end\nend	\N	f	1	1	2014-02-11 02:51:36	2014-02-11 02:51:36	197	bob.rb
467	5	f3553fc32e3fbe5c5f3b3b6a	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    divisible_by(4) && !exceptional_common_year\n  end\n\n  private\n\n  def exceptional_common_year\n    divisible_by(100) && !divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	3	5	2014-04-11 05:59:46	2014-04-11 05:59:46	221	year.rb
410	20	e2850a14be0c987e25517e01	pending	python	bob	import re\nimport unicodedata\n\nclass Bob:\n\n    def hey (self, statement):\n        # First thing I'm going to do is clean the string\n        # of things that don't affect the results\n        shortStatement = self.cleanStatement(statement)\n        punctuation = statement[-1:]\n        if not shortStatement:\n            return 'Fine. Be that way!'\n        elif not shortStatement.isupper() and punctuation != '?':\n            return 'Whatever.'\n        elif not shortStatement.isupper() and punctuation == '?':\n            return 'Sure.'\n        elif shortStatement.isupper():\n            return 'Woah, chill out!'\n\n    def cleanStatement (self, statement):\n        newStatement = statement\n        if isinstance(newStatement, unicode):\n            newStatement = unicodedata.normalize('NFKD', newStatement).encode('ascii', 'ignore')\n\n        cleaned = re.sub('[^a-zA-Z\\?\\,\\n]', '', newStatement);\n        return cleaned[-4:]	\N	f	2	2	2014-06-10 05:12:51	2014-06-10 05:12:51	198	bob.py
411	20	f8ae41935cec12b05faee802	done	ruby	phone-number	class Phone\r\n  attr_reader :phone_number\r\n\r\n  def initialize(phone_number)\r\n    @phone_number = phone_number\r\n  end\r\n\r\n  def number\r\n    return strip(clean) if strip(clean).length == 10\r\n    "0000000000"\r\n  end\r\n\r\n  def to_s\r\n    "(#{area_code}) #{prefix}-#{postfix}"\r\n  end\r\n\r\n  def area_code\r\n    number[0..2]\r\n  end\r\n\r\n  def prefix\r\n    number[3..5]\r\n  end\r\n\r\n  def postfix\r\n    number[6..10]\r\n  end\r\n\r\n  private\r\n\r\n  def clean\r\n    phone_number.to_s.chars.select do |character|\r\n      is_number?(character)\r\n    end.join\r\n  end\r\n\r\n  def strip(phone_number)\r\n    return phone_number[1..10] if phone_number[0..1] == "11"\r\n    phone_number\r\n  end\r\n\r\n  def is_number?(character)\r\n    Float(character) != nil rescue false\r\n  end\r\nend	\N	f	1	1	2014-05-25 21:12:51	2014-05-25 21:12:51	199	phone-number.rb
412	20	04f8e19d6bd8a3fbcb6dff6e	superseded	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    List.foldl list(words), HashDict.new, update_count\n  end\n\n  defp list(words) do\n    List.flatten Regex.scan %r/\\w+/, String.downcase(words)\n  end\n\n  defp update_count do\n    fn (word, dict) ->\n      HashDict.update dict, word, 1, fn (count) -> count + 1 end\n    end\n  end\n\n\nend	\N	f	2	2	2014-04-25 14:48:38	2014-04-25 14:48:38	200	word-count.exs
413	20	1adf8e91d3cb8f0031bbcf48	superseded	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    count_fnx = fn (word, dict) ->\n      HashDict.update dict, word, 1, fn (count) -> count + 1 end\n    end\n    List.foldl list(words), HashDict.new, count_fnx\n  end\n\n  def list(words) do\n    Regex.scan %r/\\w+/, String.downcase(words)\n  end\n\nend	\N	f	2	1	2014-04-27 02:44:38	2014-04-27 02:44:38	200	word-count.exs
414	20	fcf89c42da63f47a9a806353	done	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    List.foldl list(words), HashDict.new, update_count(&1, &2)\n  end\n\n  defp list(words) do\n    List.flatten Regex.scan %r/\\w+/, String.downcase(words)\n  end\n\n  defp update_count(word, dict) do\n    HashDict.update dict, word, 1, fn (count) -> count + 1 end\n  end\n\n\nend	\N	f	3	3	2014-05-05 13:02:17	2014-05-05 13:02:17	200	word-count.exs
415	20	08cd23f4ae5c6e46fc572a44	pending	ruby	triangle	class Triangle\n\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n    raise TriangleError if @sides.any? { |side| side <= 0}\n    raise TriangleError if @sides[0] + @sides[1] <= @sides[2]\n  end\n\n  def kind\n    case @sides.uniq.count\n    when 3 then :scalene\n    when 2 then :isosceles\n    when 1 then :equilateral\n    end\n  end\nend\n\nclass TriangleError < ArgumentError\n\nend	\N	f	0	2	2014-02-20 16:33:53	2014-02-20 16:33:53	201	triangle.rb
416	20	322f48c80e7d1d7536b61bb1	superseded	ruby	triangle	class Triangle\n\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n    raise TriangleError if @sides.any? { |side| side <= 0}\n    raise TriangleError if @sides[0] + @sides[1] <= @sides[2]\n    @a, @b, @c = a, b, c\n  end\n\n  def kind\n    return :equilateral if @a == @b && @b == @c\n    return :isosceles   if @a == @b || @a == @c || @b == @c\n    return :scalene\n  end\nend\n\nclass TriangleError < ArgumentError\n\nend	\N	f	0	1	2014-04-12 11:09:20	2014-04-12 11:09:20	201	triangle.rb
417	20	684bc7100223ac9ee1401268	hibernating	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(oldMap map[int][]string) map[string]int {\n\tnewMap := map[string]int{}\n\tfor score, letters := range oldMap {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tnewMap[letter] = score\n\t\t}\n\t}\n\treturn newMap\n}	\N	f	2	1	2014-02-23 02:23:19	2014-02-23 02:23:19	202	etl.go
418	20	a4d5f51e973a3d949d5290f1	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  def match(list)\n    matches = list.map { |word| word.downcase } & anagrams\n\n    list.select { |word| matches.include? word.downcase }\n  end\n\n  private\n\n  def letters\n    @letters ||= @word.scan(/./).map { |c| c.downcase }\n  end\n\n  def anagrams\n    @anagrams ||= letters\n      .permutation(letters.count)\n      .entries\n      .map { |x| x.join }\n      .uniq\n      .reject { |word| word == @word }\n  end\n\nend	\N	f	0	1	2014-02-10 22:53:08	2014-02-10 22:53:08	203	anagram.rb
419	20	ecbc56a3a53b2db024cc1d3b	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(list)\n    list.delete_if { |word| word.downcase == @word }.select { |word| is_anagram? word }\n  end\n\n  private\n\n  def anagram\n    @anagram ||= alphagram @word\n  end\n\n  def is_anagram?(word)\n    anagram == alphagram(word)\n  end\n\n  def alphagram(word)\n    word.downcase.scan(/./).sort.join\n  end\nend	\N	f	0	2	2014-03-04 17:49:38	2014-03-04 17:49:38	203	anagram.rb
420	20	b1fb790c2da0fbc73be00c0c	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(list)\n    list.select { |word| is_anagram? word }\n  end\n\n  private\n\n  def anagram\n    @anagram ||= alphagram @word\n  end\n\n  def is_anagram?(word)\n    return false if word.downcase == @word\n    anagram == alphagram(word)\n  end\n\n  def alphagram(word)\n    word.downcase.scan(/./).sort.join\n  end\nend	\N	f	0	3	2014-03-24 19:14:24	2014-03-24 19:14:24	203	anagram.rb
422	20	1a49f363695ee6e34dd0deea	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @original_word = word.downcase\n  end\n\n  def match(words)\n    words.select do |word|\n      expression = word.downcase\n\n      anagram? expression unless @original_word == expression\n    end\n  end\n\n  private\n\n  def anagram?(word)\n    (@anagram ||= sort_letters @original_word) == sort_letters(word)\n  end\n\n  def sort_letters(word)\n    word.scan(/./).sort.join\n  end\nend	\N	f	1	5	2014-04-15 15:49:11	2014-04-15 15:49:11	203	anagram.rb
423	20	2ded24d9d45857e5b5235957	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @original_word = word.downcase\n  end\n\n  def match(words)\n    words.select { |word| anagram? word }\n  end\n\n  private\n\n  def anagram?(word)\n    expression = word.downcase\n\n    unless @original_word == expression\n      @anagram ||= sort_letters @original_word\n      @anagram == sort_letters(expression)\n    end\n  end\n\n  def sort_letters(word)\n    word.scan(/./).sort.join\n  end\nend	\N	f	0	6	2014-04-25 19:50:38	2014-04-25 19:50:38	203	anagram.rb
424	20	032bdad6ce070f10c340afd5	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @original = word.downcase\n  end\n\n  def match(candidates)\n    candidates.select { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def anagram?(word)\n    expression = word.downcase\n\n    alphagram == sort_letters(expression) unless @original == expression\n  end\n\n  def alphagram\n    @alphagram ||= sort_letters @original\n  end\n\n  def sort_letters(word)\n    word.chars.sort.join\n  end\nend	\N	f	2	7	2014-05-22 20:17:11	2014-05-22 20:17:11	203	anagram.rb
425	20	ec9469d9c303a8fdd07a04a6	superseded	ruby	binary	class Binary\n  def initialize str\n    @str = str\n  end\n\n  def to_decimal\n    return 0 unless @str.to_i.to_s == @str\n    @str.reverse.chars.map.with_index do |s, i|\n      (2 ** i) * s.to_i\n    end.inject(0, :+)\n  end\nend	\N	f	2	1	2014-02-12 21:58:46	2014-02-12 21:58:46	204	binary.rb
426	20	64633788f38f4c7d7d78e761	pending	ruby	binary	class Binary\n  def initialize str\n    @str = str\n  end\n\n  def to_decimal\n    return 0 if @str.match(/[^01]/)\n    @str.reverse.chars.map.with_index do |s, i|\n      (2 ** i) * s.to_i\n    end.inject(0, :+)\n  end\nend	\N	f	2	2	2014-04-04 10:07:27	2014-04-04 10:07:27	204	binary.rb
427	20	f157f7e8751c58dee7eb1434	done	javascript	scrabble-score	'use strict';\n\nvar pointValue = {\n  "a": 1, "b": 3,  "c": 3, "d": 2, "e": 1,\n  "f": 4, "g": 2,  "h": 4, "i": 1, "j": 8,\n  "k": 5, "l": 1,  "m": 3, "n": 1, "o": 1,\n  "p": 3, "q": 10, "r": 1, "s": 1, "t": 1,\n  "u": 1, "v": 4,  "w": 4, "x": 8, "y": 4,\n  "z": 10\n}\n\nfunction Scrabble () {\n}\n\nScrabble.score = function (word) {\n  word = (word || "");\n  return word.toLowerCase().split("").reduce(scoreLetter, 0);\n};\n\nfunction scoreLetter(score, letter) {\n  return score + pointValue[letter];  \n}\n\nmodule.exports = Scrabble;	\N	f	2	1	2014-04-15 17:30:33	2014-04-15 17:30:33	205	scrabble-score.js
429	20	a10484ef3e8610277ef156ff	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  if (num === 2) {\n    return verse_two();\n  } else if (num === 1) {\n    return verse_one();\n  } else if (num === 0) {\n    return verse_zero();\n  } else {\n    return default_verse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  message = "";\n  i = start;\n  while (i >= stop) {\n    message += Beer.verse(i);\n    if (i > stop) {\n      message += "\\n";\n    };\n    i--;\n  }\n  return message;\n}\n\nvar default_verse = function (num) {\n  message = num + " bottles of beer on the wall, "\n  message += num + " bottles of beer.\\n"\n  message += "Take one down and pass it around, "\n  message += (num-1) + " bottles of beer on the wall.\\n";\n  return message;\n}\n\nvar verse_two = function() {\n  var message = "2 bottles of beer on the wall, ";\n  message += "2 bottles of beer.\\n";\n  message += "Take one down and pass it around, ";\n  message += "1 bottle of beer on the wall.\\n";\n  return message;\n};\n\nvar verse_one = function() {\n  var message = "1 bottle of beer on the wall, "\n  message += "1 bottle of beer.\\n"\n  message += "Take it down and pass it around, "\n  message += "no more bottles of beer on the wall.\\n"\n  return message;\n};\n\nvar verse_zero = function() {\n  var message = "No more bottles of beer on the wall, "\n  message += "no more bottles of beer.\\n"\n  message += "Go to the store and buy some more, "\n  message += "99 bottles of beer on the wall.\\n"\n  return message;\n};\n\nmodule.exports = Beer;	\N	f	3	1	2014-03-30 09:45:32	2014-03-30 09:45:32	206	beer-song.js
430	20	b52a6b69326f7610bfbe18ce	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verseTwo();\n  case 1:\n    return verseOne();\n  case 0:\n    return verseZero();\n  default:\n    return defaultVerse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  song = "";\n  for (var i = start; i >= stop; i--){\n    song += Beer.verse(i);\n    if (i > stop) {\n      song += "\\n";\n    };\n  }\n  return song;\n};\n\nvar defaultVerse = function (num) {\n  return num + " bottles of beer on the wall, " +\n  num + " bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  (num-1) + " bottles of beer on the wall.\\n";\n  return verse;\n}\n\nvar verseTwo = function() {\n  return "2 bottles of beer on the wall, " +\n  "2 bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  "1 bottle of beer on the wall.\\n";\n};\n\nvar verseOne = function() {\n  return "1 bottle of beer on the wall, " +\n  "1 bottle of beer.\\n" +\n  "Take it down and pass it around, " +\n  "no more bottles of beer on the wall.\\n";\n};\n\nvar verseZero = function() {\n  return "No more bottles of beer on the wall, " +\n  "no more bottles of beer.\\n" +\n  "Go to the store and buy some more, " +\n  "99 bottles of beer on the wall.\\n";\n};\n\nmodule.exports = Beer;	\N	f	1	4	2014-04-23 11:33:47	2014-04-23 11:33:47	206	beer-song.js
432	20	91894c0694aa4b04fa9c1e9f	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verseTwo();\n    break;\n  case 1:\n    return verseOne();\n    break;\n  case 0:\n    return verseZero();\n    break;\n  default:\n    return defaultVerse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  verse = "";\n  i = start;\n  while (i >= stop) {\n    verse += Beer.verse(i);\n    if (i > stop) {\n      verse += "\\n";\n    };\n    i--;\n  }\n  return verse;\n}\n\nvar defaultVerse = function (num) {\n  return num + " bottles of beer on the wall, " +\n  num + " bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  (num-1) + " bottles of beer on the wall.\\n";\n  return verse;\n}\n\nvar verseTwo = function() {\n  return "2 bottles of beer on the wall, " +\n  "2 bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  "1 bottle of beer on the wall.\\n";\n};\n\nvar verseOne = function() {\n  return "1 bottle of beer on the wall, " +\n  "1 bottle of beer.\\n" +\n  "Take it down and pass it around, " +\n  "no more bottles of beer on the wall.\\n";\n};\n\nvar verseZero = function() {\n  return "No more bottles of beer on the wall, " +\n  "no more bottles of beer.\\n" +\n  "Go to the store and buy some more, " +\n  "99 bottles of beer on the wall.\\n";\n};\n\nmodule.exports = Beer;	\N	f	0	3	2014-06-05 13:57:18	2014-06-05 13:57:18	206	beer-song.js
433	20	f91a109b5f69b7981a61f5e2	done	python	grains	def on_square(n):\n    return 2 ** (n-1)\n\ndef total_after(n):\n    return sum([on_square(n+1) for n in range(n)])	\N	f	2	1	2014-03-03 17:21:05	2014-03-03 17:21:05	207	grains.py
434	20	3ef78a8c084d7fe2e6efc3e4	superseded	ruby	meetup	# This screams for some metaprogramming!\nclass Meetup\n\n  class << self\n    private\n\n    def self.make_day_of_week_method(name, week_name, day_of_week)\n      # Does this for Friday, day 5 of the week\n      # def third_friday\n      #   week = third_week\n      #   find_week_day week, 5\n      # end\n      #\n      define_method name do\n        week = send "#{week_name}_week"\n        find_week_day week, day_of_week\n      end\n    end\n  end\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    %w(first second third fourth).each_with_index do |week_name, week_number|\n      week_name_method = "#{week_name}_week"\n      define_method week_name_method do\n        nth_week week_number\n      end\n      private week_name_method\n\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def find_week_day(week, day_of_week)\n    location_of_day_in_week = (day_of_week + week_offset_for(week)) % 7\n    week[location_of_day_in_week]\n  end\n\n  def last_week\n    last_week_starts_on_day = end_of_month - 6\n    week_of_days_starting_on last_week_starts_on_day\n  end\n\n  def nth_week(week_number)\n    number_of_days = week_number * 7\n    week_of_days_starting_on start_of_month + number_of_days\n  end\n\n  def teenth_week\n    teenth_week_starts_on_day = start_of_month + 12\n    week_of_days_starting_on teenth_week_starts_on_day\n  end\n\n  def week_of_days_starting_on(start_day)\n    last_day_of_week = start_day + 6\n    (start_day..last_day_of_week).to_a\n  end\n\n  def week_offset_for(week)\n    - week[0].wday\n  end\nend\n\nrequire 'debugger'; debugger	\N	f	2	4	2014-03-08 13:39:51	2014-03-08 13:39:51	208	meetup.rb
435	20	97f8b30321cd130e787c4049	superseded	ruby	meetup	# Oops! Fat fingered submit instead of skipping that command :)\n# This screams for some metaprogramming!\nclass Meetup\n\n  def self.make_day_of_week_method(name, week_name, day_of_week)\n    # Does this for Friday, day 5 of the week\n    # def third_friday\n    #   week = third_week\n    #   find_week_day week, 5\n    # end\n    #\n    define_method name do\n      week = send "#{week_name}_week"\n      find_week_day week, day_of_week\n    end\n  end\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    %w(first second third fourth).each_with_index do |week_name, week_number|\n      week_name_method = "#{week_name}_week"\n      define_method week_name_method do\n        nth_week week_number\n      end\n      private week_name_method\n\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def find_week_day(week, day_of_week)\n    location_of_day_in_week = (day_of_week + week_offset_for(week)) % 7\n    week[location_of_day_in_week]\n  end\n\n  def last_week\n    last_week_starts_on_day = end_of_month - 6\n    week_of_days_starting_on last_week_starts_on_day\n  end\n\n  def nth_week(week_number)\n    number_of_days = week_number * 7\n    week_of_days_starting_on start_of_month + number_of_days\n  end\n\n  def teenth_week\n    teenth_week_starts_on_day = start_of_month + 12\n    week_of_days_starting_on teenth_week_starts_on_day\n  end\n\n  def week_of_days_starting_on(start_day)\n    last_day_of_week = start_day + 6\n    (start_day..last_day_of_week).to_a\n  end\n\n  def week_offset_for(week)\n    - week[0].wday\n  end\nend	\N	f	0	5	2014-03-11 03:07:53	2014-03-11 03:07:53	208	meetup.rb
437	20	496dd04f4b7b1571d48c9d68	superseded	ruby	meetup	# This screams for some metaprogramming!\nclass Meetup\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  def self.make_day_of_week_method(name, week_name, day_of_week)\n    define_method name do\n      week = send "#{week_name}_week"\n      week_day week, day_of_week\n    end\n  end\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    %w(first second third fourth).each_with_index do |week_name, week_number|\n      define_method "#{week_name}_week" do\n        nth_week week_number\n      end\n\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def last_week\n    weekdays end_of_month - 6\n  end\n\n  def nth_week(week)\n    weekdays start_of_month + week * 7\n  end\n\n  def teenth_week\n    weekdays month + 12\n  end\n\n  def weekdays(start_day)\n    (start_day..start_day + 6).to_a\n  end\n\n  def week_day(week, day_of_week)\n    week[(day_of_week + week_offset(week)) % 7]\n  end\n\n  def week_offset(week)\n    - week[0].wday\n  end\nend	\N	f	2	1	2014-03-30 01:46:24	2014-03-30 01:46:24	208	meetup.rb
440	20	e3f5fea32bf8bbd367702485	superseded	ruby	meetup	# This screams for some metaprogramming!\nclass Meetup\n\n  class << self\n\n    private\n\n    def make_day_of_week_method(name, week_name, day_of_week)\n      # Does this for Friday, day 5 of the week\n      # def third_friday\n      #   week = third_week\n      #   find_week_day week, 5\n      # end\n      #\n      define_method name do\n        week = send "#{week_name}_week"\n        find_week_day week, day_of_week\n      end\n    end\n  end\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    %w(first second third fourth).each_with_index do |week_name, week_number|\n      week_name_method = "#{week_name}_week"\n      define_method week_name_method do\n        nth_week week_number\n      end\n      private week_name_method\n\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def find_week_day(week, day_of_week)\n    location_of_day_in_week = (day_of_week + week_offset_for(week)) % 7\n    week[location_of_day_in_week]\n  end\n\n  def last_week\n    last_week_starts_on_day = end_of_month - 6\n    week_of_days_starting_on last_week_starts_on_day\n  end\n\n  def nth_week(week_number)\n    number_of_days = week_number * 7\n    week_of_days_starting_on start_of_month + number_of_days\n  end\n\n  def teenth_week\n    teenth_week_starts_on_day = start_of_month + 12\n    week_of_days_starting_on teenth_week_starts_on_day\n  end\n\n  def week_of_days_starting_on(start_day)\n    last_day_of_week = start_day + 6\n    (start_day..last_day_of_week).to_a\n  end\n\n  def week_offset_for(week)\n    - week[0].wday\n  end\nend	\N	f	2	6	2014-04-21 18:03:43	2014-04-21 18:03:43	208	meetup.rb
441	20	c6fc438e894e334a5c9ace1f	done	ruby	meetup	# One last change!\n# This screams for some metaprogramming!\nclass Meetup\n\n  NTH_WEEK_NAMES = %w(first second third fourth)\n\n  class << self\n\n    private\n\n    def make_day_of_week_method(name, week_name, day_of_week)\n      # Does this for Friday, day 5 of the week\n      # def third_friday\n      #   week = third_week\n      #   find_week_day week, 5\n      # end\n      #\n      define_method name do\n        week = send "#{week_name}_week"\n        find_week_day week, day_of_week\n      end\n    end\n  end\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    NTH_WEEK_NAMES.each do |week_name|\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  NTH_WEEK_NAMES.each_with_index do |week_name, week_number|\n    define_method "#{week_name}_week" do\n      nth_week week_number\n    end\n  end\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def find_week_day(week, day_of_week)\n    location_of_day_in_week = (day_of_week + week_offset_for(week)) % 7\n    week[location_of_day_in_week]\n  end\n\n  def last_week\n    last_week_starts_on_day = end_of_month - 6\n    week_of_days_starting_on last_week_starts_on_day\n  end\n\n  def nth_week(week_number)\n    number_of_days = week_number * 7\n    week_of_days_starting_on start_of_month + number_of_days\n  end\n\n  def teenth_week\n    teenth_week_starts_on_day = start_of_month + 12\n    week_of_days_starting_on teenth_week_starts_on_day\n  end\n\n  def week_of_days_starting_on(start_day)\n    last_day_of_week = start_day + 6\n    (start_day..last_day_of_week).to_a\n  end\n\n  def week_offset_for(week)\n    - week[0].wday\n  end\nend	\N	f	0	8	2014-05-23 22:09:08	2014-05-23 22:09:08	208	meetup.rb
442	20	2dd5f345af51bd17f7c50128	done	ruby	rna-transcription	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    @strand.chars.map do |char|\n      RNA_MAPPING[char.to_sym]\n    end.join\n  end\n\n  private\n\n  RNA_MAPPING = {\n    :A => 'A',\n    :C => 'C',\n    :G => 'G',\n    :T => 'U',\n  }\nend	\N	f	2	1	2014-04-01 12:34:42	2014-04-01 12:34:42	209	rna-transcription.rb
443	20	4532499e285d6144c1e622ea	done	haskell	raindrops	module Raindrops (convert) where\n\npling :: Int -> String\nplang :: Int -> String\nplong :: Int -> String\npling n = if n `mod` 3 == 0 then "Pling" else ""\nplang n = if n `mod` 5 == 0 then "Plang" else ""\nplong n = if n `mod` 7 == 0 then "Plong" else ""\n\nconvert :: Int -> String\nconvert n\n\t| null rainMusic = show n\n\t| otherwise = rainMusic\n\twhere rainMusic = pling n ++ plang n ++ plong n 	\N	f	2	1	2014-03-05 20:31:47	2014-03-05 20:31:47	210	raindrops.hs
444	20	bc32a090685670f9e5382ce7	pending	ruby	robot-name	class Robot\n  attr_accessor :name\n\n  # bad due to possible later inheritance\n  # not sure how to do better\n  @@robots = []\n\n  def initialize\n    @name = generate_model_number\n  end\n\n  def reset\n    @name = generate_model_number\n  end\n\n  private\n  # Generates a random name from a set of easily readable characters\n  # based on http://stackoverflow.com/a/493230\n  def generate_model_number\n    charset = %w{ A C D E F G H J K M N P Q R T V W X Y Z }\n    numset = %w{ 2 3 4 6 7 9 }\n    name = ""\n    name += (0...2).map{ charset.to_a[rand(charset.size)] }.join\n    name += (0...3).map{ numset.to_a[rand(numset.size)] }.join\n    name = generate_model_number if @@robots.include?(name)\n    @@robots << name\n    name\n  end\nend	\N	f	2	1	2014-02-15 16:24:19	2014-02-15 16:24:19	211	robot.rb
836	16	bcb32bc31aeaa87386c0532f	superseded	ruby	grains	# class Grains\nclass Grains\n  def square(square_number)\n    2**(square_number - 1)\n  end\n\n  def total\n    2**(64) - 1\n  end\nend	\N	f	3	1	2014-03-05 16:23:01	2014-03-05 16:23:01	388	grains.rb
446	5	07499627148bd32781b6dec2	superseded	ruby	raindrops	class Raindrops\n\n  # Order is important\n  RAINDROP_SPEAK = {\n    3 => 'Pling',\n    5 => 'Plang',\n    7 => 'Plong'\n  }\n\n  def self.convert(number)\n    string = ''\n\n    RAINDROP_SPEAK.each { |k,v|\n      string += v if number.modulo(k).zero?\n    }\n\n    string.empty? ? number.to_s : string\n  end\n\nend	\N	f	1	2	2014-04-10 08:23:03	2014-04-10 08:23:03	213	raindrops.rb
447	5	d74a7f73a5d5d89eeebb1504	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    if number % 105 == 0\n      'PlingPlangPlong'\n    elsif number % 35 == 0\n      'PlangPlong'\n    elsif number % 21 == 0\n      'PlingPlong'\n    elsif number % 15 == 0\n      'PlingPlang'\n    elsif number % 7 == 0\n      'Plong'\n    elsif number % 5 == 0\n      'Plang'\n    elsif number % 3 == 0\n      'Pling'\n    else\n      number.to_s\n    end\n  end\nend	\N	f	0	1	2014-04-17 11:00:23	2014-04-17 11:00:23	213	raindrops.rb
448	5	4ffa46c60a783d5a1cbfcdb3	pending	ruby	raindrops	class Raindrops\n\n  # Order is important\n  RAINDROP_SPEAK = {\n    1 => '',\n    3 => 'Pling',\n    5 => 'Plang',\n    7 => 'Plong'\n  }\n\n  def self.convert(number)\n    output = RAINDROP_SPEAK.reduce('') { |memo, (key, _)|\n      memo + RAINDROP_SPEAK[number.gcd(key)]\n    }\n\n    output.empty? ? number.to_s : output\n  end\n\nend	\N	f	1	3	2014-04-28 17:35:21	2014-04-28 17:35:21	213	raindrops.rb
449	5	7719bef2269010c028066dcc	superseded	ruby	anagram	class Anagram\n  def initialize(target_word)\n    @target_word = target_word\n  end\n\n  def match(candidate_words)\n    target_letter_counts = count_letters(target_word)\n\n    candidate_words.select do |candidate|\n      target_letter_counts == count_letters(candidate)\n    end\n  end\n\nprivate\n  attr_reader :target_word\n\n  def count_letters(word)\n    letter_counts = Hash.new(0)\n    word.downcase.scan(/\\w/) do |letter|\n      letter_counts[letter] += 1\n    end\n    letter_counts\n  end\nend	\N	f	1	1	2014-05-20 19:23:01	2014-05-20 19:23:01	214	anagram.rb
450	5	2eb9b1dc4521ef9d2cce11a1	done	ruby	anagram	class Anagram\n  def initialize(target_word)\n    @target_word = Word.new(target_word)\n  end\n\n  def match(candidate_words)\n    candidate_words.select do |candidate|\n      target_word.is_anagram_of?(Word.new(candidate))\n    end\n  end\n\nprivate\n  attr_reader :target_word\nend\n\nclass Word\n  def initialize(text)\n    @text = text\n  end\n\n  def is_anagram_of?(other_word)\n    anagram_identity == other_word.anagram_identity\n  end\n\nprotected\n  def anagram_identity\n    @anagram_identity ||= text.downcase.chars.sort\n  end\n\nprivate\n  attr_reader :text\nend	\N	f	3	3	2014-06-07 00:37:50	2014-06-07 00:37:50	214	anagram.rb
452	5	4e1fa5d4a923016b59d82946	superseded	python	grade-school	class School:\n\tdef __init__(self, s):\n\t\tself.db = {}\n\t\t\n\tdef add(self, st, gr):\n\t\tif gr not in self.db:\n\t\t\tself.db[gr] = set([st])\n\t\telse:\n\t\t\tself.db[gr].add(st)\n\t\t\n\tdef grade(self, gr):\n\t\tif gr in self.db:\n\t\t\treturn self.db[gr]\n\t\telse:\n\t\t\treturn set()\n\t\n\tdef sort(self):\n\t\treturn {gr:tuple(self.db[gr]) for gr in self.db.keys()}	\N	f	1	1	2014-03-04 19:34:48	2014-03-04 19:34:48	215	school.py
453	5	2715e2231779d7860b8c17d0	pending	python	grade-school	class School:\n\tdef __init__(self, s):\n\t\tself.schoolname = s\n\t\tself.db = {}\n\t\t\n\tdef add(self, st, gr):\n\t\tself.db.setdefault(gr, set()).add(st)\n\t\t\n\tdef grade(self, gr):\n\t\treturn self.db.get(gr, set())\n\t\n\tdef sort(self):\n\t\treturn {gr:tuple(sorted(sts)) for gr,sts in sorted(self.db.iteritems())}	\N	f	1	2	2014-04-08 09:35:27	2014-04-08 09:35:27	215	school.py
454	5	b1b96619dac7340575d26b2c	done	javascript	word-count	Words = function(text) {\n\n\tthis.tokenize = function(string) {\n\n\t\t// Skip and split by sequences of "non-word" symbols\n\t\treturn string.split(/[^\\w]+/);\n\t}\n\n\tvar count = this.count = {};\n\tfor (word in this.tokenize(text)) {\n\n\t\t// We should not distinguish between symbols in different case\n\t\tword = word.toLowerCase();\n\n\t\t// If there is an entry..\n\t\tif (count.word) count.word++;\n\n\t\t// otherwise - initialize it\n\t\telse count.word = 1;\n\t}\n\n}\n\nmodule.exports = Words;	\N	f	0	1	2014-04-21 08:39:40	2014-04-21 08:39:40	216	word-count.js
468	5	78ee306d17fc95d642a443d7	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    divisible_by_4 && !divisible_by_100 || divisible_by_400\n  end\n\n  private\n\n  def divisible_by_4\n    year % 4 == 0\n  end\n\n  def divisible_by_100\n    year % 100 == 0\n  end\n\n  def divisible_by_400\n    year % 400 == 0\n  end\nend	\N	f	3	3	2014-04-24 13:11:28	2014-04-24 13:11:28	221	year.rb
457	5	7d4b3ec520b8d19ec5a753a2	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count words\n  end\n\n  private \n\n  def words\n    normalized_words.split(/[, ]/)\n  end\n\n  def normalized_words\n    @phrase.gsub(/[:!&@$%^\\.]/, "").downcase\n  end\n\n  def count words\n    words.inject(Hash.new(0)) do |result, word| \n      result[word]+=1 unless word.empty? \n      result\n    end\n  end\n\nend	\N	f	0	1	2014-04-26 13:37:14	2014-04-26 13:37:14	218	word-count.rb
458	5	0a2d88cb75b4336017836357	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count words\n  end\n\n  private \n\n  def words\n    normalized_phrase.scan(/\\w+['a-z]*/)\n  end\n\n  def normalized_phrase\n    @phrase.downcase\n  end\n\n  def count words\n    words.inject(Hash.new(0)) {|result, word| result[word]+=1; result }\n  end\n\nend	\N	f	0	2	2014-06-12 08:32:11	2014-06-12 08:32:11	218	word-count.rb
459	5	e2baff919aeabff1bde37550	done	clojure	beer-song	(ns beer\n  (:require [clojure.string :refer [join capitalize]]))\n\n(defn action [n]\n  (let [actions { 0 "Go to the store and buy some more"\n                  1 "Take it down and pass it around" }]\n    (actions n "Take one down and pass it around")))\n\n(defn bottles [n]\n  (let [b { -1 "99 bottles"\n            0 "no more bottles"\n            1 "1 bottle" }]\n    (str (b n (str n " bottles")) " of beer")))\n\n(defn- stanzas [n]\n  [(str (capitalize (bottles n)) " on the wall, " (bottles n) ".")\n   (str (action n) ", " (bottles (dec n)) " on the wall.")])\n\n(defn verse [n]\n  (str (join "\\n" (stanzas n)) "\\n"))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end]\n   (let [verses (reverse (range end (inc start)))]\n     (str (->> verses\n               (map verse)\n               (join "\\n"))\n          "\\n"))))	\N	f	1	1	2014-05-01 06:53:04	2014-05-01 06:53:04	219	beer-song.clj
460	5	2c01cb81b588abb1e79717e3	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char as C\n\n\nresponseFor :: String -> String\nresponseFor str | (isSilence str)  = "Fine. Be that way!"\n                | (isShout str)    = "Woah, chill out!"\n                | (isQuestion str) = "Sure."\n                | otherwise        = "Whatever."\n\nisSilence = all C.isSpace\nisShout   = presentAnd (all C.isUpper) . filter C.isLetter\n\nisQuestion str = (last str) == '?'\n\npresentAnd :: ([a] -> Bool) -> [a] -> Bool\npresentAnd _ [] = False\npresentAnd predicate ar = predicate ar	\N	f	0	2	2014-03-08 05:39:50	2014-03-08 05:39:50	220	bob.hs
461	5	506da1a5b4be853fad80be4b	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char as C\nimport Data.List (isSuffixOf)\n\nresponseFor message | isSilence message  = "Fine. Be that way!"\n                    | isShouting message = "Woah, chill out!"\n                    | isQuestion message = "Sure."\n                    | otherwise          = "Whatever."\n\nisSilence  = all C.isSpace\nisShouting = presentAnd (all C.isUpper) . filter C.isLetter\nisQuestion = isSuffixOf "?"\n\npresentAnd :: ([a] -> Bool) -> [a] -> Bool\npresentAnd _ [] = False\npresentAnd predicate ar = predicate ar	\N	f	1	5	2014-04-13 14:00:52	2014-04-13 14:00:52	220	bob.hs
462	5	1dd3faf91d22e2a7443db294	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char as C\n\n\nresponseFor :: String -> String\nresponseFor str | (isSilence str)  = "Fine. Be that way!"\n                | (isShout str)    = "Woah, chill out!"\n                | (isQuestion str) = "Sure."\n                | otherwise = "Whatever."\n\nisSilence = all C.isSpace\nisShout   = presentAnd (all C.isUpper) . filter C.isLetter\n\nisQuestion str = (last str) == '?'\n\npresentAnd :: ([a] -> Bool) -> [a] -> Bool\npresentAnd predicate [] = False\npresentAnd predicate ar = predicate ar	\N	f	2	1	2014-04-17 00:01:50	2014-04-17 00:01:50	220	bob.hs
463	5	6b84b57b4369f06f078eb1d3	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char as C\n\n\nresponseFor :: String -> String\nresponseFor message | (isSilence message)  = "Fine. Be that way!"\n                    | (isShouting message) = "Woah, chill out!"\n                    | (isQuestion message) = "Sure."\n                    | otherwise            = "Whatever."\n\nisSilence  = all C.isSpace\nisShouting = presentAnd (all C.isUpper) . filter C.isLetter\nisQuestion message = (last message) == '?'\n\npresentAnd :: ([a] -> Bool) -> [a] -> Bool\npresentAnd _ [] = False\npresentAnd predicate ar = predicate ar	\N	f	5	3	2014-05-24 04:45:25	2014-05-24 04:45:25	220	bob.hs
464	5	ac6ebc75afa6ed82ef391841	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char as C\nimport Data.List (isSuffixOf)\n\nresponseFor message | isSilence message  = "Fine. Be that way!"\n                    | isShouting message = "Woah, chill out!"\n                    | isQuestion message = "Sure."\n                    | otherwise          = "Whatever."\n\nisSilence  = all C.isSpace\nisShouting = presentAnd (all C.isUpper) . filter C.isLetter\nisQuestion = isSuffixOf "?"\n\npresentAnd :: ([a] -> Bool) -> [a] -> Bool\npresentAnd _ [] = False\npresentAnd predicate ar = predicate ar\n\n--combine :: (Bool -> Bool) -> (a -> Bool) -> (a -> Bool) -> a -> Bool	\N	f	2	4	2014-06-17 14:33:09	2014-06-17 14:33:09	220	bob.hs
465	5	040ab8cb606ddde5e52c1351	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    year % 4 == 0 && year % 100 != 0 || year % 400 == 0\n  end\nend	\N	f	2	2	2014-03-21 23:51:57	2014-03-21 23:51:57	221	year.rb
466	5	b6d9ee26768089fcb8271b8a	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    divisible_by(4) && !divisible_by(100) || divisible_by(400)\n  end\n\n  private\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	0	4	2014-03-25 08:18:43	2014-03-25 08:18:43	221	year.rb
709	12	1009276c8d90f7f312a06aef	superseded	go	grains	package grains\r\n\r\nimport (\r\n\t"fmt"\r\n)\r\n\r\nfunc Square(number int) uint64 {\r\n\treturn 1 << uint64(number-1)\r\n}\r\n\r\nfunc Total() uint64 {\r\n\tfmt.Println((1 << 64) - 1)\r\n\treturn (1 << 64) - 1\r\n}\r	\N	f	1	4	2014-04-16 10:04:33	2014-04-16 10:04:33	328	grains.go
471	5	4e30e0b7b6a6bf73fcd88aa0	pending	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    normal_leap_year || century_leap_year\n  end\n\n  private\n\n  def normal_leap_year\n    divisible_by(4) && !divisible_by(100)\n  end\n\n  def century_leap_year\n    divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	4	8	2014-05-01 22:49:32	2014-05-01 22:49:32	221	year.rb
472	5	8554b97e787ceff4c14d050b	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    year % 4 == 0 && year % 100 != 0 || year % 400 == 0\n  end\nend	\N	f	3	1	2014-06-07 21:12:11	2014-06-07 21:12:11	221	year.rb
473	5	2991d6b160d9fe31c35cf411	superseded	ruby	rna-transcription	class Complement\n\tdef initialize(string)\n\t\t@string = string\n\tend \n\n\tdef self.of_dna\n\t\tstring.gsub(/[GCAT]/, 'G' => 'C', 'C' => 'G', 'A' => 'U', 'T' => 'A') \n\tend \n     \n\tdef self.of_rna\n\t\tstring.gsub(/[GCAT]/, 'G' => 'C', 'C' => 'G', 'U' => 'A', 'A' => 'T') \n\tend \n\nend	\N	f	1	1	2014-03-18 14:48:40	2014-03-18 14:48:40	222	complement.rb
474	5	4e1d1eabadd0aee19f201f10	pending	ruby	rna-transcription	class Complement\n\n\tdef self.of_dna(input)\n\t\tinput.gsub(/[GCAT]/, 'G' => 'C', 'C' => 'G', 'A' => 'U', 'T' => 'A') \n\tend \n     \n\tdef self.of_rna(input)\n\t\tinput.gsub(/[GCUA]/, 'G' => 'C', 'C' => 'G', 'U' => 'A', 'A' => 'T') \n\tend \n\nend	\N	f	0	2	2014-06-27 01:31:09	2014-06-27 01:31:09	222	complement.rb
475	5	8fe18928e78420536e81fcef	done	ruby	etl	class ETL\n  def self.transform(legacy)\n    shiny={}\n    legacy.each do |s,v|\n      v.each { |l| shiny[l.downcase()]=s }\n    end\n    shiny\n  end\nend	\N	f	1	1	2014-04-16 05:11:10	2014-04-16 05:11:10	223	etl.rb
476	5	8e98404068bf51d718309975	superseded	ruby	bob	class Bob\n  def hey(greeting=nil)\n    @greeting = greeting\n    if detects_silence?\n      "Fine. Be that way!"\n    elsif @greeting.upcase == @greeting\n      "Woah, chill out!"\n    elsif @greeting.end_with?("?")\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def detects_silence?\n    case @greeting\n    when nil\n      true\n    when /\\A\\s*\\z/\n      true\n    else\n      false\n    end\n  end\nend	\N	f	1	1	2014-04-16 20:51:05	2014-04-16 20:51:05	224	bob.rb
477	5	4654c34f9cef9c8e081fed12	superseded	ruby	bob	class Bob\n  def hey(greeting=nil)\n    @greeting = greeting\n    if detects_silence?\n      "Fine. Be that way!"\n    elsif detects_shouting?\n      "Woah, chill out!"\n    elsif detects_interrogation?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def detects_silence?\n    @greeting.to_s.strip.empty?\n  end\n\n  def detects_shouting?\n    @greeting.upcase == @greeting\n  end\n\n  def detects_interrogation?\n    @greeting.end_with?("?")\n  end\nend	\N	f	2	2	2014-04-19 09:58:18	2014-04-19 09:58:18	224	bob.rb
478	5	0eca2933d2818fdfbfc485cb	superseded	ruby	bob	class Bob\n  def hey(greeting=nil)\n    @person = Person.new(greeting:greeting)\n\n    if @person.silent?\n      "Fine. Be that way!"\n    elsif @person.shouting?\n      "Woah, chill out!"\n    elsif @person.interrogating?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Person\n  attr_accessor :greeting\n\n  def initialize(options={})\n    @greeting = options[:greeting]\n  end\n\n  def silent?\n    greeting.to_s.strip.empty?\n  end\n\n  def shouting?\n    greeting.upcase == greeting\n  end\n\n  def interrogating?\n    greeting.end_with?("?")\n  end\nend	\N	f	5	3	2014-05-15 05:08:39	2014-05-15 05:08:39	224	bob.rb
479	5	ac2d2b2d0b0df19ff07ffa5b	superseded	ruby	bob	class Bob\n  def hey(greeting=nil)\n    person = Person.new(greeting)\n\n    if person.silent?\n      "Fine. Be that way!"\n    elsif person.shouting?\n      "Woah, chill out!"\n    elsif person.interrogating?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Person\n  attr_accessor :greeting\n\n  def initialize(greeting)\n    @greeting = greeting\n  end\n\n  def silent?\n    greeting.to_s.strip.empty?\n  end\n\n  def shouting?\n    greeting.to_s.upcase == greeting\n  end\n\n  def interrogating?\n    greeting.to_s.end_with?("?")\n  end\nend	\N	f	0	4	2014-05-27 10:20:37	2014-05-27 10:20:37	224	bob.rb
480	5	00371e4daeab83c37fe25c8c	done	ruby	bob	class Bob\n  def hey(greeting)\n    person = Person.new(greeting)\n\n    if person.silent?\n      "Fine. Be that way!"\n    elsif person.shouting?\n      "Woah, chill out!"\n    elsif person.interrogating?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Person\n  attr_accessor :greeting\n\n  def initialize(greeting)\n    @greeting = greeting.to_s\n  end\n\n  def silent?\n    greeting.strip.empty?\n  end\n\n  def shouting?\n    greeting.upcase == greeting\n  end\n\n  def interrogating?\n    greeting.end_with?("?")\n  end\nend	\N	f	3	5	2014-06-23 13:18:52	2014-06-23 13:18:52	224	bob.rb
481	5	41fd96b0f844ad209a3316cb	done	clojure	nucleotide-count	(ns dna\r\n  (:require [clojure.string :as s]))\r\n\r\n(def ^:private dna {\\A 0 \\T 0 \\C 0 \\G 0})\r\n(def ^:private rna "ACGU")\r\n\r\n(defn count [c strand]\r\n  (when-not (some #(= c %) "ACGTU")\r\n    (throw (Exception. "invalid nucleotide")))\r\n  ((frequencies strand) c 0))\r\n\r\n(defn nucleotide-counts [strand]\r\n  (into dna (frequencies strand)))\r	\N	f	1	1	2014-03-25 16:38:18	2014-03-25 16:38:18	225	dna.clj
482	5	d73c6024aaef18aabb876cb2	done	perl5	grains	package Grains;\n\nuse bignum;\nuse Modern::Perl '2014';\n\n\nsub square {\n    my $i = shift;\n    return 2**($i-1);\n}\n\nsub total {\n    my $tot = 0;\n    $tot += square($_) for  (1..64);\n    return $tot;\n}\n\n1;	\N	f	1	1	2014-03-21 11:31:45	2014-03-21 11:31:45	226	Grains.pm
483	5	78565adb2663b0b28f8c3600	superseded	ruby	pig-latin	module PigLatin\n  extend self\n\n  def translate(phrase)\n    phrase.split.map { |word| transform word }.join " "\n  end\n\nprivate\n\n  def transform(word)\n    prefix = prefix(word)\n    "#{word[prefix.length..-1]}#{prefix}ay"\n  end\n\n  def prefix(word)\n    long_prefix(word) || ignored_prefix(word) || word[0]\n  end\n\n  def long_prefix(word)\n    ["ch", "squ", "qu", "thr", "th", "sch"].find { |prefix| word.start_with? prefix }\n  end\n\n  def ignored_prefix(word)\n    "" if ["a", "e", "yt", "xr"].find { |prefix| word.start_with? prefix }\n  end\n\nend	\N	f	1	1	2014-03-10 01:46:56	2014-03-10 01:46:56	227	pig_latin.rb
505	6	7f4e53799f79465e9e4070c6	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @words = to_array(normalize(text))\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def to_array(text)\n      text.split(/\\W+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	f	0	3	2014-04-17 04:13:29	2014-04-17 04:13:29	236	word-count.rb
485	5	f8dbf041e6acfe5948cc4aed	superseded	ruby	pig-latin	module PigLatin\n  extend self\n\n  def translate(phrase)\n    phrase.split.map { |word| transform word }.join " "\n  end\n\nprivate\n\n  def transform(word)\n    prefix = prefix(word)\n    "#{word.sub(prefix, '')}#{prefix}ay"\n  end\n\n  def prefix(word)\n    long_prefix(word) || ignored_prefix(word) || word[0]\n  end\n\n  def long_prefix(word)\n    word.find_prefix *%w{ ch squ qu thr th sch }\n  end\n\n  def ignored_prefix(word)\n    "" if word.find_prefix *%w{ a e i o u yt xr }\n  end\nend\n\nclass String\n  def find_prefix(*prefixes)\n    prefixes.find { |prefix| start_with? prefix }\n  end\nend	\N	f	0	5	2014-03-31 13:18:12	2014-03-31 13:18:12	227	pig_latin.rb
486	5	a7dd17d9d6aaf5404af22044	pending	ruby	pig-latin	module PigLatin\n  extend self\n\n  def translate(phrase)\n    phrase.split.map { |word| transform word }.join " "\n  end\n\nprivate\n\n  def transform(word)\n    prefix = prefix(word)\n    "#{word.sub(prefix, '')}#{prefix}ay"\n  end\n\n  def prefix(word)\n    long_prefix(word) || ignored_prefix(word) || consonant_prefix(word)\n  end\n\n  def long_prefix(word)\n    word.find_prefix *%w{ ch squ qu thr th sch }\n  end\n\n  def ignored_prefix(word)\n    "" if word.find_prefix *%w{ a e i o u yt xr }\n  end\n\n  def consonant_prefix(word)\n    word[0]\n  end\nend\n\nclass String\n  def find_prefix(*prefixes)\n    prefixes.find { |prefix| start_with? prefix }\n  end\nend	\N	f	1	6	2014-04-01 20:20:51	2014-04-01 20:20:51	227	pig_latin.rb
487	5	cf456967bb39cb15a4846a1a	superseded	ruby	pig-latin	module PigLatin\n  extend self\n\n  def translate(phrase)\n    phrase.split.map { |word| transform word }.join " "\n  end\n\nprivate\n\n  def transform(word)\n    prefix = prefix(word)\n    "#{word[prefix.length..-1]}#{prefix}ay"\n  end\n\n  def prefix(word)\n    long_prefix(word) || ignored_prefix(word) || word[0]\n  end\n\n  def long_prefix(word)\n    find_prefix word, "ch", "squ", "qu", "thr", "th", "sch"\n  end\n\n  def ignored_prefix(word)\n    "" if find_prefix(word, "a", "e", "yt", "xr")\n  end\n\n  def find_prefix(word, *prefixes)\n    prefixes.find { |prefix| word.start_with? prefix }\n  end\nend	\N	f	1	3	2014-04-08 09:14:44	2014-04-08 09:14:44	227	pig_latin.rb
488	5	2e0346d78d9e080504f3eace	superseded	ruby	pig-latin	module PigLatin\n  extend self\n\n  def translate(phrase)\n    phrase.split.map { |word| transform word }.join " "\n  end\n\nprivate\n\n  def transform(word)\n    prefix = prefix(word)\n    "#{word[prefix.length..-1]}#{prefix}ay"\n  end\n\n  def prefix(word)\n    long_prefix(word) || ignored_prefix(word) || word[0]\n  end\n\n  def long_prefix(word)\n    ["ch", "squ", "qu", "thr", "th", "sch"].find { |prefix| word.start_with? prefix }\n  end\n\n  def ignored_prefix(word)\n    "" if has_prefix(word, "a", "e", "yt", "xr")\n  end\n\n  def has_prefix(word, *prefixes)\n    prefixes.find { |prefix| word.start_with? prefix }\n  end\nend	\N	f	0	2	2014-05-27 13:50:00	2014-05-27 13:50:00	227	pig_latin.rb
490	5	d0a1e4b3516f1fd3759470c8	done	javascript	meetup	function Meetup(m, y) {\n  this.getDatesInRange = getDatesInRange.bind(this, y, m);\n  this.monthLength = new Date(y, m + 1, 0).getDate();\n}\n\nMeetup.prototype = (function(modifiers, days) {\n  return reduceArray(modifiers, defineProperties.bind(null, days));\n})(['first', 'second', 'third', 'fourth', 'last', 'teenth'],\n  ['Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur']);\n\nmodule.exports = Meetup;\n\n/* helper functions */\n\nfunction getDatesInRange(year, month, range) {\n  return Array\n    .apply(null, {length: 1 + range[1] - range[0]})\n    .map(function(_, index) {\n      return new Date(year, month, range[0] + index);\n    });\n};\n\nfunction reduceArray(array, callback) {\n  return Array({}).concat(array).reduce(callback);\n};\n\nfunction defineProperties(days, obj, key, index) {\n  return Object.defineProperties(obj, reduceArray(days,\n    defineProperty.bind(null, getMethodName(key, index < 6),\n      (index == 5)? 'last' :(index == 6)? 1.7 :(index - 1))));\n};\n\nfunction defineProperty(getKey, n, obj, key, index) {\n  return Object.defineProperty(obj, getKey(key), {\n    value: {\n      value: function() {\n        return this.getDatesInRange(getRange(n, this.monthLength))\n          .filter(function(day) {\n            return day.getDay() == (index - 1);\n          })[0];\n      }\n    },\n    enumerable: true\n  })\n};\n\nfunction getMethodName(modifier, condition) {\n  return condition?\n    function(key) {\n      return modifier.concat(key).concat('day');\n    }\n    :function(key) {\n      return key.toLowerCase().concat(modifier);\n    };\n};\n\nfunction getRange(n, last) {\n  var n = Math.ceil(n*7) + 7 || last;\n  return [n - 6, n];\n};	\N	f	1	2	2014-04-26 06:05:45	2014-04-26 06:05:45	228	meetup.js
491	5	cde75904c9e3ca1f73364673	pending	javascript	grains	var Grains = function() {\n  this.square = function(number) {\n    return Math.pow(2, (number - 1));\n  };\n  this.total = function() {\n    var result = 0;\n    for(var i = 0; i < 65; i++) {\n      result = result + this.square(i);\n    };\n    return result;\n  };\n};\n\nmodule.exports = Grains;	\N	f	1	1	2014-05-01 23:17:24	2014-05-01 23:17:24	229	grains.js
492	5	1d0c4d8e0e6a5b168a406a60	superseded	scala	word-count	import scala.collection.mutable.Map\n\nclass Phrase(text: String) {\n  def wordCount():Map[String,Int] = {\n    def normalize():String = {\n      text.replaceAll("[^\\\\w\\\\s']", " ").toLowerCase\n    }\n\n    normalize().split(' ').\n      filter(c => !c.forall(_.isSpaceChar)).\n      foldLeft(Map[String,Int]())(\n        (accumulator,word) => {\n          val oldCount = \n            if (accumulator.contains(word)) {\n              accumulator(word)\n            } else {\n              0\n            } \n          accumulator += (word -> (oldCount + 1))\n        })\n  }\n}	\N	f	1	1	2014-03-02 01:01:39	2014-03-02 01:01:39	230	wordcount.scala
710	12	86dd840a68a1587860a5fb13	superseded	go	grains	package grains\r\n\r\nimport (\r\n\t"fmt"\r\n)\r\n\r\nfunc Square(number int) uint64 {\r\n\treturn 1 << uint64(number-1)\r\n}\r\n\r\nfunc Total() uint64 {\r\n\treturn (1 << 64) - 1\r\n}\r	\N	f	1	5	2014-04-25 21:42:33	2014-04-25 21:42:33	328	grains.go
494	5	26b42e66e19ffecb78a7a978	pending	scala	word-count	import scala.collection.mutable\n\nclass Phrase(text: String) {\n  def wordCount():mutable.Map[String,Int] = {\n    val normalizedWords =\n      text.replaceAll("[^\\\\w\\\\s']", " ").\n        toLowerCase.\n        split(' ').\n        filter(c => !c.forall(_.isSpaceChar))\n\n    (mutable.Map[String, Int]().withDefaultValue(0) /: normalizedWords) {\n      (accumulator, word) => {\n        accumulator += (word -> (accumulator(word) + 1))\n      }\n    }\n  }\n}	\N	f	1	3	2014-03-06 19:33:13	2014-03-06 19:33:13	230	Phrase.scala
495	5	e2fadac9fa6e46965894af36	hibernating	clojure	grade-school	(ns school)\n\n(defn add [m student grade]\n  (cond\n     (contains? m grade) (conj m {grade (conj (get m grade) student)})\n     :else (assoc m grade (vector student))\n   )\n\n\n)\n\n(defn grade [studentList grade]\n  (cond\n   (contains? studentList grade)(studentList grade)\n   :else []\n   )\n)\n\n\n(defn sorted [m]\n  (into (sorted-map)\n        (into {}\n              (for [[k v] m] [k (#(into (vector) (sort %)) v)])\n         )\n   )\n)	\N	f	1	1	2014-03-15 08:00:15	2014-03-15 08:00:15	231	school.clj
497	6	b0e69215fd5d26265ee7cb40	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :sequence, :nucleotide_counts\n\n  def initialize(sequence)\n    @nucleotide_counts = { 'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0 }\n    process(sequence)\n    @sequence = sequence\n  end\n\n  def count(args)\n    return @nucleotide_counts unless args\n    if args =~ /^[ATCG]$/\n      @nucleotide_counts[args]\n    elsif args == 'U'\n      0\n    else\n      raise ArgumentError\n    end\n  end\n\n  private\n\n  def process(sequence)\n    if valid_dna?(sequence)\n      sequence.each_char { |char| @nucleotide_counts[char] += 1 }\n    else\n      raise ArgumentError\n    end\n  end\n\n  def valid_dna?(sequence)\n    sequence =~ /\\A[ATCG]*\\z/\n  end\n\nend	\N	f	0	1	2014-05-03 02:27:15	2014-05-03 02:27:15	232	nucleotide-count.rb
499	6	3dd1454ba854ef254c42295b	pending	go	rna-transcription	package strand\n\nimport "strings"\n\n//alternate implementations\n\n// var mapping = map[rune]rune{\n// \t'G': 'C',\n// \t'C': 'G',\n// \t'T': 'A',\n// \t'A': 'U',\n// }\n\n// func ToRna(in string) string {\n// \tbuff := make([]rune, len(in))\n// \tfor i, r := range in {\n// \t\tbuff[i] = mapping[r]\n// \t}\n// \treturn string(buff)\n// }\n\n// func ToRna(in string) string {\n// \treturn strings.Map(func(r rune) rune {\n// \t\treturn mapping[r]\n// \t}, in)\n// }\n\nfunc ToRna(in string) string {\n\treturn strings.Map(func(r rune) rune {\n\t\tswitch r {\n\t\tcase 'G':\n\t\t\treturn 'C'\n\t\tcase 'C':\n\t\t\treturn 'G'\n\t\tcase 'T':\n\t\t\treturn 'A'\n\t\tcase 'A':\n\t\t\treturn 'U'\n\t\tdefault:\n\t\t\treturn r\n\t\t}\n\t}, in)\n}	\N	f	2	1	2014-04-05 08:01:10	2014-04-05 08:01:10	233	rna_transcription.go
500	6	fac089eb9b6d37cef0c65997	hibernating	haskell	grade-school	module School(School, grade, empty, add, sorted) where\n\nimport Data.Function (on)\nimport Data.List (sortBy)\nimport Data.Map.Strict (fromListWith)\n\ntype Grade = Int\ntype Student = String\ntype School = [(Grade, Student)]\n            \n\nempty :: School\nempty = []\n\n-- not really sure what I'm doing with types here\n-- need to get a School type \nsorted :: School -> [(Grade, [Student])]\nsorted = sortBy (compare `on` snd)\n\n-- again not sure how to custom types through here\ngrade :: Grade -> School -> [Student]\ngrade gradeNum = filter (\\(x,_)-> x == gradeNum ) . map (\\(_,y) -> y)\n\nadd :: Grade -> Student -> School -> School\nadd gradeNum student = undefined	\N	f	3	1	2014-01-26 07:45:55	2014-01-26 07:45:55	234	School.hs
501	6	96b5750e371e0352d44204cf	superseded	ruby	bob	class Bob\n\n  def hey(message)\n\n    "Hello Bob"\n  end\n\nend	\N	f	1	1	2014-03-17 05:14:11	2014-03-17 05:14:11	235	bob.rb
502	6	779b9d76887a2df066342a9b	done	ruby	bob	class Bob\n  def hey(message)\n    response = "Sure."              if message.end_with?("?")\n    response = "Woah, chill out!"   if message == message.upcase && (/[a-zA-Z]/).match(message)\n    response = "Fine. Be that way!" if message.strip == ""\n    response = "Whatever."          if response == nil\n    return response\n  end\nend	\N	f	4	2	2014-05-05 15:09:55	2014-05-05 15:09:55	235	bob.rb
503	6	ee83864332cba070432c949d	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    normalize_text = normalize(text)\n    @words = to_array(normalize_text)\n  end\n\n  def word_count\n    return @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def to_array(text)\n      text.split(/\\W+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	f	2	2	2014-01-25 17:54:34	2014-01-25 17:54:34	236	word-count.rb
504	6	611b661eb76f69e0cd0a4b6f	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    clean_text = remove_punctuation(text)\n    normalize_text = normalize(clean_text)\n    @words = to_array(normalize_text)\n  end\n\n  def word_count\n    counts = Hash.new(0)\n    @words.each { |word| counts[word] += 1 }\n    counts\n  end\n\n  private\n\n    def remove_punctuation(text)\n      text.gsub(/(\\W)/, " ")\n    end\n\n    def to_array(text)\n      text.split(/[\\s,]+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	f	3	1	2014-04-10 08:47:12	2014-04-10 08:47:12	236	word-count.rb
837	16	0147aa82345eca6d7c2c1b3e	superseded	ruby	grains	# class Grains\nclass Grains\n  def square(number)\n    2**(number - 1)\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	f	3	3	2014-04-18 05:35:10	2014-04-18 05:35:10	388	grains.rb
507	6	539b841ff4fcfae15df79c30	hibernating	clojure	word-count	(ns word-count)\n\n(defn counter [letters]\n  (map clojure.string/lower-case (re-seq #"\\w+" letters)))\n\n(defn word-count [input]\n  (frequencies (counter input)))	\N	f	4	2	2014-04-19 13:50:47	2014-04-19 13:50:47	237	word_count.clj
508	6	524ab8dd3fda7a70c15864a1	superseded	clojure	word-count	(ns word-count)\n\n(defn word-count [input]\n  \n  (def ans {})\n\n  (def words (map clojure.string/lower-case (re-seq #"\\w+" input)))\n  (frequencies words)\n  \n  \n)\n\n(word-count "one two")	\N	f	2	1	2014-05-10 06:20:35	2014-05-10 06:20:35	237	word_count.clj
510	6	d9c5db042a89b58217ed3bc7	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\n\nareaCode :: String -> String\nareaCode = take 3\n\nnumber :: String -> String\nnumber xs\n  | length xs' == 10 = xs'\n  | length xs' == 11 && head xs' == '1' = tail xs'\n  | otherwise = "0000000000"\n  where xs' = filter isDigit xs\n\nprettyPrint :: String -> String\nprettyPrint xs = concat ["(", a, ") ", b, "-", c]\n  where (a, b, c) = parts xs\n\nparts :: String -> (String, String, String)\nparts xs = (a, b, c)\n  where (a, bc) = splitAt 3 $ number xs\n        (b, c)  = splitAt 3 bc	\N	f	2	1	2014-02-16 05:13:28	2014-02-16 05:13:28	239	Phone.hs
511	6	a18abc5d0757811577f05159	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year % 4 == 0 unless exception?\n  end\n\n  private\n\n  def exception?\n    (@year % 100 == 0) && (@year % 400 != 0)\n  end\nend	\N	f	0	1	2014-02-09 02:37:34	2014-02-09 02:37:34	240	leap.rb
512	6	cd5b3af0ee025a010b99d2a4	pending	javascript	strain	var strain = function() {\n\n};\n\nstrain.keep = function(arr, cb) {\n  var ret = [];\n\n  for ( var i = 0; i < arr.length; i++ ) {\n    if ( cb( arr[i] ) ) {\n      ret.push( arr[i] );\n    }\n  }\n\n  return ret;\n};\n\nstrain.discard = function(arr, cb) {\n  var ret = [];\n\n  for ( var i = 0; i < arr.length; i++ ) {\n    if ( !cb( arr[i] ) ) {\n      ret.push( arr[i] );\n    }\n  }\n\n  return ret;\n}	\N	f	3	1	2014-04-08 22:49:43	2014-04-08 22:49:43	241	strain_test.js
513	6	c7758315894386ef71b0fd85	done	elixir	beer-song	defmodule Beer do\n  def sing(start, finish // 0) do \n    (Enum.to_list(start .. finish) |> Enum.map(&1, fn(x) -> verse(x) end).() |> Enum.join(&1, "\\n").()) <> "\\n"\n  end\n  def verse(count) do\n    after_count = (count - 1)\n    bottle_count = bottles(count)\n    "#{bottle_count} of beer on the wall, #{String.downcase bottle_count} of beer.\\n#{one(count)}, #{String.downcase bottles(after_count)} of beer on the wall.\\n"\n  end\n  defp one(0), do: "Go to the store and buy some more"\n  defp one(1), do: "Take it down and pass it around"\n  defp one(n), do: "Take one down and pass it around"\n  defp bottles(0), do: "No more bottles"\n  defp bottles(1), do: "1 bottle"\n  defp bottles(n) when n < 0, do: "99 bottles"\n  defp bottles(n), do: "#{n} bottles"\nend	\N	f	3	1	2014-02-20 04:07:38	2014-02-20 04:07:38	242	beer-song.exs
514	6	e4f5773409a39a8d7c0bae73	superseded	ruby	hamming	class Hamming\r\n\tdef self.compute(str1, str2)\r\n\t\thamming_distance = 0\r\n\t\t[str1.length, str2.length].min.times do |i|\r\n\t\t#min_length.times do |i|\r\n\t\t  if str1[i] != str2[i]\r\n\t\t  \thamming_distance += 1\r\n\t\t\tend\r\n\t\tend\r\n\t\thamming_distance\r\n\tend\r\nend\r\n\r	\N	f	3	1	2014-02-18 03:13:53	2014-02-18 03:13:53	243	hamming.rb
515	6	59e6ac3e55954861ecc08c4d	hibernating	ruby	hamming	class Hamming\r\n\tdef self.compute(str1, str2)\r\n\t\t(0...common_length(str1, str2)).count {|i|\r\n\t\t\tstr1[i] != str2[i]}\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef self.common_length(str1, str2)\r\n\t\t[str1.length, str2.length].min\r\n\tend\r\n\r\nend\r\n\r	\N	f	2	2	2014-02-22 22:50:41	2014-02-22 22:50:41	243	hamming.rb
516	6	dcd7efb303f98fbc9103994a	superseded	elixir	allergies	defmodule Allergies do\n\n  use Bitwise, only_operators: true\n\n  @allergy_flags [\n    { 128, "cats" },\n    { 64, "pollen" },\n    { 32, "chocolate" },\n    { 16, "tomatoes" },\n    { 8, "strawberries" },\n    { 4, "shellfish" },\n    { 2, "peanuts" },\n    { 1, "eggs" }\n  ]\n\n  @allergy_dict HashDict.new(@allergy_flags, fn({ f, a }) -> { a, f } end)\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergy with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(score) do\n    Enum.reduce(@allergy_flags, [], fn({ flag, allergy }, allergies) ->\n      if flag_set?(score, flag), do: [ allergy | allergies ], else: allergies\n    end)\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'score' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(score, item) do\n    flag = Dict.get(@allergy_dict, item, 0)\n    flag_set?(score, flag)\n  end\n\n  defp flag_set?(value, flag), do: (value &&& flag) == flag\n\nend	\N	f	3	1	2014-02-09 15:27:29	2014-02-09 15:27:29	244	allergies.exs
517	6	76c50333aabbbadbdfc7bad0	superseded	elixir	allergies	defmodule Allergies do\n\n  use Bitwise, only_operators: true\n\n  @allergy_flags [\n    { "cats", 128 },\n    { "pollen", 64 },\n    { "chocolate", 32 },\n    { "tomatoes", 16 },\n    { "strawberries", 8 },\n    { "shellfish", 4 },\n    { "peanuts", 2 },\n    { "eggs", 1 }\n  ]\n\n  @allergy_dict HashDict.new @allergy_flags\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergy with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(score) do\n    Enum.reduce(@allergy_flags, [], fn({ allergy, flag }, allergies) ->\n      if flag_set?(score, flag), do: [ allergy | allergies ], else: allergies\n    end)\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'score' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(score, item) do\n    flag = Dict.get(@allergy_dict, item, 0)\n    flag_set?(score, flag)\n  end\n\n  defp flag_set?(value, flag), do: (value &&& flag) == flag\n\nend	\N	f	3	2	2014-03-05 09:19:19	2014-03-05 09:19:19	244	allergies.exs
527	6	b867138db94dbceb7023ed65	superseded	ruby	prime-factors	module PrimeFactors\n  def self.for nr\n    res = []\n    possible_primes_below(nr) do |divisor|\n      while nr >= divisor && nr % divisor == 0\n        res << divisor\n        nr /= divisor\n      end\n      break if nr == 1\n    end\n    res\n  end\n\n  def self.possible_primes_below nr\n    2.upto(nr)\n    yield 2\n    yield 3\n    2.upto(nr/6 + 1) do |x|\n      yield 6*x + 1\n      yield 6*x + 5\n    end\n  end\nend	\N	f	3	1	2014-04-11 15:31:43	2014-04-11 15:31:43	249	prime-factors.rb
519	6	9275cb936356498bec77b7c5	done	elixir	allergies	defmodule Allergies do\n\n  use Bitwise, only_operators: true\n\n  @allergy_flags [\n    { "eggs", 1 },\n    { "peanuts", 2 },\n    { "shellfish", 4 },\n    { "strawberries", 8 },\n    { "tomatoes", 16 },\n    { "chocolate", 32 },\n    { "pollen", 64 },\n    { "cats", 128 }\n  ]\n\n  @allergy_dict HashDict.new @allergy_flags\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergy with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(score) do\n    @allergy_flags\n      |> Stream.filter(fn({ _, flag }) -> flag_set?(score, flag) end)\n      |> Enum.map(fn({ item, _ }) -> item end)\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'score' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(score, item) do\n    flag = Dict.get(@allergy_dict, item, 0)\n    flag_set?(score, flag)\n  end\n\n  defp flag_set?(value, flag), do: (value &&& flag) == flag\n\nend	\N	f	2	4	2014-04-06 05:20:33	2014-04-06 05:20:33	244	allergies.exs
520	6	0cb51f95d60e1fe91d440cd9	superseded	elixir	word-count	defmodule Words do\n  def count(string) do\n    Enum.reduce(String.replace(string, %r/[^\\s\\d\\p{L}]/, "") |> String.downcase |> String.split, HashDict.new, fn word, hash_dict ->\n      count = HashDict.get(hash_dict, word, 0)\n      hash_dict = HashDict.put(hash_dict, word, count + 1)\n    end)\n  end\nend	\N	f	3	1	2014-03-27 06:45:48	2014-03-27 06:45:48	245	word-count.exs
521	6	5150677a14151b5d8c2d2854	superseded	elixir	word-count	defmodule Words do\n  def count(string) do\n    Enum.reduce(split(string), HashDict.new, fn word, dict ->\n      Dict.update(dict, word, 1, fn(count) -> count+1 end)\n    end)\n  end\n\n  def split(string) do\n    String.replace(string, %r/[^\\s\\d\\p{L}]/, "")\n    |> String.downcase\n    |> String.split\n  end\nend	\N	f	3	2	2014-04-05 16:23:38	2014-04-05 16:23:38	245	word-count.exs
522	6	0dde1e6593095e1639467a8b	done	elixir	word-count	defmodule Words do\n  def count(string) do\n    Enum.reduce(split(string), HashDict.new, fn word, word_frequency ->\n      Dict.update(word_frequency, word, 1, fn(count) -> count+1 end)\n    end)\n  end\n\n  defp cleanup(string) do\n    Regex.scan(%r/[\\s\\d\\p{L}]/, string)\n    |> List.flatten\n    |> Enum.join\n  end\n\n  defp split(string) do\n    cleanup(string)\n    |> String.downcase\n    |> String.split\n  end\nend	\N	f	3	3	2014-05-05 02:49:31	2014-05-05 02:49:31	245	word-count.exs
523	6	ccc5ccd028b9d1278fbc270e	done	ruby	grains	class Grains\n\n  def square(place)\n    total = 2**(place - 1)\n  end\n\n  def total\n    value = 0\n    (1..64).each { |place| value += square(place)  }\n    value\n  end\nend	\N	f	3	1	2014-01-28 02:52:31	2014-01-28 02:52:31	246	grains.rb
524	6	b4e108ce4b095275a03f5944	hibernating	clojure	rna-transcription	(ns dna)\n\n(def ^{:private true} replacements {\\T \\U})\n\n(defn to-rna [dna-str]\n  "Returns the rna string translated from the given dna string"\n  (apply str (replace replacements dna-str)))	\N	f	1	1	2014-02-17 06:12:15	2014-02-17 06:12:15	247	rna-transcription.clj
526	6	33f32877f4e7d03db58211f2	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare([], []), do: :equal\n  def compare(a, a),   do: :equal\n  def compare([], _),  do: :sublist\n  def compare(_, []),  do: :superlist\n  def compare(a, b) do\n    cond do\n      length(a) < length(b) and contains(a, b) -> :sublist\n      length(a) > length(b) and contains(b, a) -> :superlist\n      true -> :unequal\n    end\n  end\n\n  defp contains(a, b) do\n    cond do\n      length(a) > length(b) -> false\n      a === Enum.slice(b, 0, length(a)) -> true\n      true -> contains(a, tl(b))\n    end\n  end\nend\n\n\n# defmodule Sublist do\n#   @doc """\n#   Returns whether the first list is a sublist or a superlist of the second list\n#   and if not whether it is equal or unequal to the second list.\n#   """\n#   def compare([], []), do: :equal\n#   def compare([], _), do: :sublist\n#   def compare(_, []), do: :superlist\n#   def compare(a, b) do\n#     cond do\n#       a === b -> :equal\n#       length(a) < length(b) and contains(a, b, a, b) -> :sublist\n#       length(a) > length(b) and contains(b, a, b, a) -> :superlist\n#       true -> :unequal\n#     end\n#   end\n\n#   defp contains([], _, _, _), do: true\n#   defp contains(_, [], _, _), do: false\n#   defp contains([sub_a_h | sub_a_t], [sub_b_h | sub_b_t], a, [b_h | b_t]) do\n#     cond do\n#       sub_a_h === sub_b_h -> contains(sub_a_t, sub_b_t, a, [b_h | b_t])\n#       true -> contains(a, b_t, a, b_t)\n#     end\n#   end\n# end	\N	f	3	2	2014-03-15 07:36:44	2014-03-15 07:36:44	248	sublist.exs
838	16	1e74750001d74a0ba05764f9	done	ruby	grains	class Grains\n  def square(number)\n    2**(number - 1)\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	f	1	4	2014-05-03 20:40:47	2014-05-03 20:40:47	388	grains.rb
529	6	dfe087827cd8aecbe875c18c	superseded	ruby	prime-factors	module PrimeFactors\n\n  def self.for nr\n    res = []\n    2.upto(nr) do |divisor|\n      while nr >= divisor && nr % divisor == 0\n        res << divisor\n        nr /= divisor\n      end\n      break if nr == 1\n    end\n    res\n  end\nend	\N	f	3	3	2014-04-24 23:07:39	2014-04-24 23:07:39	249	prime-factors.rb
530	6	e21780dbab66ef54e0fa67da	done	ruby	prime-factors	module PrimeFactors\n\n  def self.for nr\n    return to_enum(:for, nr).to_a unless block_given?\n\n    divisor = 2\n    rest = nr\n\n    while rest > 1\n      while rest % divisor == 0\n        yield divisor\n        rest /= divisor\n      end\n      divisor += 1\n    end\n  end\nend	\N	f	0	4	2014-06-13 13:47:05	2014-06-13 13:47:05	249	prime-factors.rb
531	8	ed02347f63dfe0b88bbe012f	done	python	bob	class Bob(object):\n    def hey(self, msg):\n        if not msg or not msg.strip():\n            return "Fine. Be that way!"\n        if msg.upper() == msg and msg.lower() != msg:\n            return "Woah, chill out!"\n        if msg.endswith('?'):\n            return "Sure."\n        return "Whatever."	\N	f	4	1	2014-03-27 08:17:21	2014-03-27 08:17:21	250	bob.py
533	8	3f7606d41fe6cf5cdb490769	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s.downcase\n  end\n\n  def word_count\n    words = @value.split(/\\W+/)\n    count = Hash.new(0)\n    words.each { |word| count[word] += 1 }\n    count\n  end\n\nend	\N	f	2	1	2014-01-26 00:22:30	2014-01-26 00:22:30	252	word-count.rb
534	8	5fad716d4a38c7376a3f24f5	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    count = Hash.new(0)\n    split_words.each { |word| count[word.downcase] += 1 }\n    count\n  end\n\n  private\n\n    def split_words\n      @value.split(/\\W+/)\n    end\n\nend	\N	f	3	2	2014-01-29 14:07:56	2014-01-29 14:07:56	252	word-count.rb
535	8	cc698fc2d9745728f99e6aab	done	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\n\n  private\n\n    def words\n      @value.split(/\\W+/)\n    end\n\nend	\N	f	1	5	2014-03-21 11:27:53	2014-03-21 11:27:53	252	word-count.rb
536	8	4ba1c39652692e333c65690f	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\n\n  private\n\n    def words\n      @words ||= @value.split(/\\W+/)\n    end\n\nend	\N	f	3	4	2014-03-26 18:13:12	2014-03-26 18:13:12	252	word-count.rb
537	8	ad0c71fa6bf884278f9f1aab	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    split_words.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\n\n  private\n\n    def split_words\n      @value.split(/\\W+/)\n    end\n\nend	\N	f	0	3	2014-04-14 07:56:01	2014-04-14 07:56:01	252	word-count.rb
538	8	72d7f4c4a4d83892dfebe61a	pending	ruby	bob	class Bob\n  def hey (phrase)\n    phrase = phrase.chomp\n    if phrase[phrase.size-1] == '?' && phrase[/[a-z0-9]/]       \n      return "Sure."\n    elsif phrase[/[a-z]/]\n      return "Whatever."\n    elsif phrase[/[A-Z]/]\n      return "Woah, chill out!"\n    elsif phrase[/[0-9]/]\n      return "Whatever."\n    else\n      return "Fine. Be that way!"\n    end\n  end\nend	\N	f	3	1	2014-02-27 04:55:34	2014-02-27 04:55:34	253	bob.rb
539	8	0185a241c6fe71b84e45aba3	superseded	perl5	bob	package Bob;\nuse warnings;\nuse strict;\n\n# Bob answers 'Sure.' if you ask him a question.\n# He answers 'Woah, chill out!' if you yell at him.\n# He says 'Fine. Be that way!' if you address him without actually saying anything.\n# He answers 'Whatever.' to anything else.\n\nsub trim {\n    my $txt = shift;\n    $txt =~ s/^\\s+//;\n    $txt =~ s/\\s+$//;\n    return $txt;\n}\n\nsub hey {\n    my $input = shift;\n    \n    return 'Fine. Be that way!' if trim( $input ) eq '';\n    return 'Woah, chill out!' if ( $input eq uc $input ) and ( $input =~ /[a-zA-Z]/ );\n    return 'Sure.' if $input =~ /\\?$/;\n    return 'Whatever.';\n}\n\n1;	\N	f	3	1	2014-03-26 01:40:45	2014-03-26 01:40:45	254	bob.pm
540	8	59c66c62f538483a225532f2	superseded	perl5	bob	package Bob;\nuse warnings;\nuse strict;\n\n# Bob answers 'Sure.' if you ask him a question.\n# He answers 'Woah, chill out!' if you yell at him.\n# He says 'Fine. Be that way!' if you address him without actually saying anything.\n# He answers 'Whatever.' to anything else.\n\nsub trim {\n    my $txt = shift;\n    $txt =~ s/^\\s+//;\n    $txt =~ s/\\s+$//;\n    return $txt;\n}\n\nsub hey {\n    my $input = shift;\n    \n    return 'Fine. Be that way!' if $input =~ /^\\s*$/;\n    return 'Woah, chill out!' if ( $input eq uc $input ) and ( $input =~ /[a-zA-Z]/ );\n    return 'Sure.' if $input =~ /\\?$/;\n    return 'Whatever.';\n}\n\n1;	\N	f	0	2	2014-04-03 06:43:15	2014-04-03 06:43:15	254	bob.pm
541	8	ff8a83cbbaffe6b69f143095	done	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\n# Bob answers 'Sure.' if you ask him a question.\n# He answers 'Woah, chill out!' if you yell at him.\n# He says 'Fine. Be that way!' if you address him without actually saying anything.\n# He answers 'Whatever.' to anything else.\n\nsub hey {\n    my $input = shift;\n    \n    return 'Fine. Be that way!' if $input =~ /^\\s*$/;\n    return 'Woah, chill out!'   if ( $input eq uc $input ) and ( $input =~ /[a-zA-Z]/ );\n    return 'Sure.'              if $input =~ /\\?$/;\n    return 'Whatever.';         # otherwise\n}\n\n1;	\N	f	3	3	2014-05-02 08:42:53	2014-05-02 08:42:53	254	bob.pm
542	8	4982e484c03cc21ea5e37f49	needs_input	ruby	nth-prime	class Prime\n  def self.nth(target)\n    raise ArgumentError if target == 0\n    current_prime_candidate = 2\n    index = 1\n\n    while true\n      if self.is_prime?(current_prime_candidate)\n        return current_prime_candidate if index == target\n        index += 1\n      end\n      current_prime_candidate += 1\n    end\n  end\n\n  def self.is_prime?(num)\n    (2..Math.sqrt(num)).each do |i|\n      return false if num % i == 0\n    end\n  end\nend	\N	f	0	1	2014-06-06 16:41:06	2014-06-06 16:41:06	255	prime.rb
839	16	23a065503e7630cd155f9af7	needs_input	ruby	leap	class Year\n  def self.leap?(year)\n    year%400 == 0 || (year%4 == 0 && year%100 != 0)\n  end\nend	\N	f	4	1	2014-03-09 10:32:12	2014-03-09 10:32:12	389	year.rb
544	8	25f5b8b20bcb025f42c47f77	hibernating	haskell	nth-prime	module Prime\n( nth\n) where\n\nnth :: Int -> Integer\nnth i = primes !! (i-1)\n  where primes = 2:3 : filter isPrime [5,7..]\n\n-- http://en.wikipedia.org/wiki/Primality_test\nisPrime :: (Integral a) => a -> Bool\nisPrime n\n  | n `divisibleBy` 2 = False\n  | n `divisibleBy` 3 = False\n  | any (\\x -> n `divisibleBy` x || n `divisibleBy` (x+2)) [5,5+6..n'] = False\n  | otherwise = True\n  where\n    n' = ceiling $ sqrt (fromIntegral n :: Double)\n    w `divisibleBy` v = w `mod` v == 0	\N	f	3	2	2014-04-06 14:05:59	2014-04-06 14:05:59	256	Prime.hs
545	8	7654892c97505a99c04e2dbc	superseded	scala	anagram	class Anagram(word: String){\n  def matches(word_seq: Seq[String]) = word_seq.filter(x => x.toLowerCase.sorted == word.toLowerCase.sorted\n                                                       && x.toLowerCase != word.toLowerCase)\n}	\N	f	3	1	2014-04-13 13:02:42	2014-04-13 13:02:42	257	anagram.scala
546	8	684a4748e5a984d73a219e7a	superseded	scala	anagram	class Anagram(word: String){\n  def matches(word_seq: Seq[String]) = word_seq.filter(x => lowerSortedMatches(x) && !isSameWord(x))\n\n  private def isSameWord(input_word: String) =\n    input_word.toLowerCase == word.toLowerCase\n\n  private def lowerSortedMatches(input_word: String) =\n    input_word.toLowerCase.sorted == word.toLowerCase.sorted\n}	\N	f	3	2	2014-05-14 00:19:05	2014-05-14 00:19:05	257	anagram.scala
547	8	aa0d7dcf3cf89208c265aafe	superseded	scala	anagram	class Anagram(match_word: String){\n  def matches(word_seq: Seq[String]) = word_seq.filter(word => isAnagram(word) && !sameWord(word))\n\n  private def sameWord(input_word: String) =\n    input_word.toLowerCase == match_word.toLowerCase\n\n  private def isAnagram(input_word: String) =\n    input_word.toLowerCase.sorted == match_word.toLowerCase.sorted\n}	\N	f	3	4	2014-05-27 11:55:00	2014-05-27 11:55:00	257	anagram.scala
548	8	17678b9bec9908447208b1b0	superseded	scala	anagram	class Anagram(match_word: String){\n  def matches(word_seq: Seq[String]) = word_seq.filter(word => lowerSortedMatches(word) && !isSameWord(word))\n\n  private def isSameWord(input_word: String) =\n    input_word.toLowerCase == match_word.toLowerCase\n\n  private def lowerSortedMatches(input_word: String) =\n    input_word.toLowerCase.sorted == match_word.toLowerCase.sorted\n}	\N	f	2	3	2014-05-29 02:10:01	2014-05-29 02:10:01	257	anagram.scala
549	8	2d2ca130189b69bb324fb024	hibernating	scala	anagram	class Anagram(MatchWord: String){\n  def matches(WordSeq: Seq[String]) = WordSeq filter(word => isAnagram(word) && !sameWord(word))\n\n  private def sameWord(InputWord: String) =\n    InputWord.toLowerCase == MatchWord.toLowerCase\n\n  private def isAnagram(InputWord: String) =\n    InputWord.toLowerCase.sorted == MatchWord.toLowerCase.sorted\n}	\N	f	3	5	2014-06-17 02:54:38	2014-06-17 02:54:38	257	anagram.scala
551	8	e50d94f2e8838300d0d07b4c	done	ruby	luhn	class Luhn\n\n  def self.create(number)\n    if new(number).valid?\n      number\n    else\n      modify_number_until_valid(number)\n    end    \n  end\n\n  attr_reader :number, :split_numbers\n  private :number, :split_numbers\n  \n  def initialize(number)\n    @number = number\n    @split_numbers = number.to_s.chars.map(&:to_i)\n  end\n\n  def addends\n    split_numbers.reverse.map.with_index do |num, idx|\n      if idx.odd?\n        num *= 2 \n        num -= 9 if num >= 10\n      end\n      num\n    end.reverse\n  end\n\n  def checksum\n    addends.reduce(0, :+)\n  end\n\n  def valid?\n    checksum % 10 == 0\n  end\n\n  private\n\n    def self.modify_number_until_valid(number)\n      number *= 10\n      until new(number).valid?\n        number += 1\n      end\n      number\n    end\n\nend	\N	f	3	2	2014-06-02 17:24:17	2014-06-02 17:24:17	258	luhn.rb
552	8	2992e09ff72211622f0d11d2	superseded	ruby	roman-numerals	class Integer\n  ROMAN_NUMERALS = [[1000,  "M"],\n                    [ 900, "CM"],\n                    [ 500,  "D"],\n                    [ 400, "CD"],\n                    [ 100,  "C"],\n                    [  90, "XC"],\n                    [  50,  "L"],\n                    [  40, "XL"],\n                    [  10,  "X"],\n                    [   9, "IX"],\n                    [   5,  "V"],\n                    [   4, "IV"],\n                    [   1,  "I"]]\n\n  def to_roman\n    val = self\n    ROMAN_NUMERALS.each.reduce("") do |acc, rn|\n      value, str = rn[0], rn[1]\n      while val >= value\n        val -= value\n        acc << str\n      end\n      acc\n    end\n  end\n\nend	\N	f	3	3	2014-02-22 17:40:35	2014-02-22 17:40:35	259	roman.rb
553	8	2b56286078b1875b3d7a1923	pending	ruby	roman-numerals	class Integer\n  ROMAN_NUMERALS = [[1000,  "M"],\n                    [ 900, "CM"],\n                    [ 500,  "D"],\n                    [ 400, "CD"],\n                    [ 100,  "C"],\n                    [  90, "XC"],\n                    [  50,  "L"],\n                    [  40, "XL"],\n                    [  10,  "X"],\n                    [   9, "IX"],\n                    [   5,  "V"],\n                    [   4, "IV"],\n                    [   1,  "I"]]\n\n  def to_roman\n    val = self\n    ROMAN_NUMERALS.each_with_object("") do |rn, acc|\n      value, str = rn[0], rn[1]\n      while val >= value\n        val -= value\n        acc << str\n      end\n    end\n  end\n\nend	\N	f	0	4	2014-03-09 05:34:32	2014-03-09 05:34:32	259	roman.rb
554	8	f4c38a8976328fdb08b945a3	superseded	ruby	roman-numerals	class Integer\n  ROMAN_NUMERALS = [[1000,  "M"],\n                    [ 900, "CM"],\n                    [ 500,  "D"],\n                    [ 400, "CD"],\n                    [ 100,  "C"],\n                    [  90, "XC"],\n                    [  50,  "L"],\n                    [  40, "XL"],\n                    [  10,  "X"],\n                    [   9, "IX"],\n                    [   5,  "V"],\n                    [   4, "IV"],\n                    [   1,  "I"]]\n\n  def to_roman\n    val = self\n    ROMAN_NUMERALS.each.reduce([]) do |acc, rn|\n      value, str = rn[0], rn[1]\n      while val >= value\n        val -= value\n        acc << str\n      end\n      acc\n    end.join("")\n  end\n\nend	\N	f	2	1	2014-03-23 00:23:04	2014-03-23 00:23:04	259	roman.rb
556	8	1557cfb935212d176f42f37f	done	haskell	accumulate	module Accumulate (accumulate) where\r\n\r\naccumulate :: (a -> b) -> [a] -> [b]\r\naccumulate _ [] = []\r\naccumulate f (x:xs) = f x : accumulate f xs\r	\N	f	3	1	2014-02-21 12:10:58	2014-02-21 12:10:58	260	Accumulate.hs
558	8	c3f6a3199546d6c2bd5c8af7	done	javascript	bob	//   Andrew Halls\n\nvar Bob = function() {\n\n\tisQuestion = function (sentence) {\n\t\treturn sentence.slice(-1) === '?';\n\t}\t\n\tisShouting = function (sentence) {\n\t\treturn  sentence.match(/[A-Z]/g) &&\n\t\t\tsentence === sentence.toUpperCase();\t\n\t}\n\tisSilence = function (sentence) {\n\t\treturn sentence.trim() === '';\n\t}\n\tisAlways = function (sentence) {\n\t\treturn true;\n\t}\n\n\tvar rules = [\n\t  {'predicate' : isShouting, 'answer' : 'Woah, chill out!'},\n\t  {'predicate' : isQuestion, 'answer' : 'Sure.'},\n\t  {'predicate' : isSilence, 'answer' : 'Fine. Be that way!'}, \n\t  {'predicate' : isAlways, 'answer' : 'Whatever.'},\n\t];\n\n\tthis.hey = function (sentence) {\n\n\t\tfor (index = 0; index < rules.length; index++) {\n\t\t\tif (rules[index]['predicate'](sentence)) {\n\t\t\t\treturn rules[index]['answer'];\n\t\t\t}\n\n\t\t}\n\t\treturn 'Doah!';\n\t}\n} \n\nmodule.exports = Bob;	\N	f	0	3	2014-02-21 06:40:17	2014-02-21 06:40:17	262	bob.js
559	8	deac168e9a102a3fa7fda6dd	superseded	javascript	bob	var Bob = function() {\n\n     \tisQuestion = function (sentence) {\n\t\treturn sentence.slice(-1) == '?';\n\t}\t\n\n\tisShouting = function (sentence) {\n\t\treturn  sentence.match(/[A-Z]/g) &&\n\t\t\tsentence === sentence.toUpperCase();\n\t\n\t}\n\n\tisSilence = function (sentence) {\n\t\t\n\t\treturn sentence.trim() === '';\n\t}\n\n\tthis.hey = function (sentence) {\n\n\t\tif (isSilence(sentence)) {\n\t\t   return 'Fine. Be that way!';\n\t\t}\n\t\telse if (isShouting(sentence)) {\n\t\t   return 'Woah, chill out!';\n\t\t}\n\t\telse if (isQuestion(sentence)) {\n\t\t   return 'Sure.';\n\t\t}\n\t\telse {\n\t\t   return 'Whatever.';\n\t\t}\n\t}\n} \n\nmodule.exports = Bob;	\N	f	4	1	2014-04-04 21:17:16	2014-04-04 21:17:16	262	bob.js
560	8	c32ad6edca6d480d6a34df50	superseded	javascript	bob	//   Andrew Halls\n\nvar Bob = function() {\n\n\tisQuestion = function (sentence) {\n\t\treturn sentence.slice(-1) == '?';\n\t}\t\n\tisShouting = function (sentence) {\n\t\treturn  sentence.match(/[A-Z]/g) &&\n\t\t\tsentence === sentence.toUpperCase();\n\t\n\t}\n\tisSilence = function (sentence) {\n\t\treturn sentence.trim() === '';\n\t}\n\tisTrue = function (sentence) {\n\t\treturn true;\n\t}\n\n\tvar predicates = [\n\t  {'predicate' : isShouting, 'answer' : 'Woah, chill out!'},\n\t  {'predicate' : isQuestion, 'answer' : 'Sure.'},\n\t  {'predicate' : isSilence, 'answer' : 'Fine. Be that way!'}, \n\t  {'predicate' : isTrue, 'answer' : 'Whatever.'},\n\t];\n\n\tthis.hey = function (sentence) {\n\t\tvar answer = 'Doah!'\n\t\tpredicates.every(function(action)  {\n\t\t if (action['predicate'](sentence)) {\n\t\t\tanswer = action['answer'];;\n\t\t\treturn false;\n\t\t }\n\t\t return true;\n\t\t});\n\t\treturn answer;\n\t}\n} \n\nmodule.exports = Bob;	\N	f	4	2	2014-04-17 13:42:53	2014-04-17 13:42:53	262	bob.js
561	8	4c2b9320f1740c69c7dd7128	hibernating	ruby	leap	class Year\n\n    def initialize(value)\n        @year = value\n    end\n\n    def leap?\n        leap = false\n        if @year%4 == 0\n            if @year%100 == 0\n                if @year%400 == 0\n                    leap = true\n                end\n            else\n                leap = true\n            end\n        end\n        leap\n    end\n\nend	\N	f	0	1	2014-04-05 01:18:56	2014-04-05 01:18:56	263	leap.rb
562	8	1f26a8d85e276a3c9eb44f89	superseded	haskell	etl	module ETL (transform) where\n\nimport Data.Char\nimport qualified Data.Map as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.foldlWithKey helper M.empty\n  where\n    helper m point = foldl (\\m' s -> M.insert (lower s) point m') m\n    lower = map toLower	\N	f	3	1	2014-02-17 08:22:35	2014-02-17 08:22:35	264	ETL.hs
563	8	04167a1df55f7cc947dec9ce	done	haskell	etl	module ETL (transform) where\n\nimport Data.Char\nimport qualified Data.Map.Strict as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.foldlWithKey helper M.empty\n  where\n    helper m point = foldl (\\m' s -> M.insert (lower s) point m') m\n    lower = map toLower	\N	f	0	2	2014-03-11 02:56:57	2014-03-11 02:56:57	264	ETL.hs
564	8	0c473ac16a897120c133f19e	superseded	clojure	word-count	(ns word-count)\n(use 'clojure.string)\n\n(defn words [word-str]\n  (split\n    (replace word-str #"\\W+" " ")\n      #"\\s+"))\n\n(defn w-count [word word-str]\n  (count\n    (filter (fn [x] (= x word)) (words word-str))))\n\n(defn word-count [word-str]\n  (def lowercased-str (lower-case word-str))\n  (apply\n    hash-map\n    (flatten\n      (map\n        (fn [x] [x (w-count x lowercased-str)])\n        (words lowercased-str))\n      )\n    )\n  )	\N	f	4	1	2014-02-03 02:07:00	2014-02-03 02:07:00	265	word_count.clj
565	8	b58aa6862ac560b47bde632e	superseded	clojure	word-count	(ns word-count)\n(use 'clojure.string)\n\n(defn words [word-str]\n  (split\n    (replace word-str #"\\W+" " ")\n      #"\\s+"))\n\n(defn w-count [word word-str]\n  (count\n    (filter (fn [x] (= x word)) (words word-str))))\n\n(defn word-count [word-str]\n  (def lowercased-str (lower-case word-str))\n  (apply\n    hash-map\n    (flatten\n      (map\n        (fn [x] [x (w-count x lowercased-str)])\n        (words lowercased-str)))))	\N	f	0	2	2014-05-09 17:18:17	2014-05-09 17:18:17	265	word_count.clj
566	8	12c31ca10774015bb70792a2	pending	clojure	word-count	(ns word-count)\n(use 'clojure.string)\n\n(defn words [word-str]\n  (split\n    (replace word-str #"\\W+" " ")\n      #"\\s+"))\n\n(defn w-count [word word-str]\n  (count\n    (filter (fn [x] (= x word)) (words word-str))))\n\n(defn word-count [word-str]\n  (let [lowercased-str (lower-case word-str)]\n  (apply\n    hash-map\n    (flatten\n      (map\n        (fn [x] [x (w-count x lowercased-str)])\n        (words lowercased-str)))\n    )\n  ))	\N	f	4	3	2014-05-30 12:30:17	2014-05-30 12:30:17	265	word_count.clj
567	8	18c39c5d690fbf43c7b24990	done	haskell	rna-transcription	module DNA\n(\n    toRNA\n) where\n\ntoRNA :: String -> String\ntoRNA = map subT\n\nsubT :: Char -> Char\nsubT 'T' = 'U'\nsubT n = n	\N	f	1	1	2014-02-04 13:40:53	2014-02-04 13:40:53	266	rna-transcription.hs
570	9	8ec8e41e02672f7863859ab4	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n\n  def initialize(phrase="")\n    @phrase = phrase\n  end\n\n  def word_count\n    word_array = string_to_array(phrase)\n    frequency = Hash.new{0}\n    word_array.each do |word|\n      frequency[word] += 1\n    end\n    frequency\n  end\n\n  def string_to_array(string)\n    phrase.downcase.scan(/\\w+/)\n  end\nend	\N	f	1	2	2014-04-27 03:28:35	2014-04-27 03:28:35	268	word-count.rb
572	9	088d6e8c04bfb099854a1afd	pending	perl5	prime-factors	use 5.20.0;\n\nuse feature 'signatures';\nno warnings 'experimental';\n\npackage Prime {\n\n    sub factors ($number) {\n        my @factors;\n\n        ITER:\n        while ( $number > 1 ) {\n            for my $i ( 2, map( { 2* $_ + 1} 1..(sqrt $number)/ 2 ), $number ) {\n                next if $number % $i;\n\n                push @factors, $i;\n                $number /= $i;\n\n                next ITER;\n            }\n        }\n\n        return \\@factors;\n    }\n}\n\n1;	\N	f	1	1	2014-03-16 10:12:35	2014-03-16 10:12:35	269	Prime.pm
573	9	e5b29d45de65df6af36d4bb5	superseded	javascript	meetup	var Meetup = function(month, year) {\n  this.findTeenthday = function(day) {\n    for (var i= 13; i < 20; i++) {\n      var date = new Date(year, month, i);\n      if (date.getUTCDay() == day) {\n       return date;\n      }\n    }\n} \n  \n  this.monteenth = function() {\n    return this.findTeenthday(1);\n  }  \n\n  this.tuesteenth = function() {\n    return this.findTeenthday(2);\n  }\n  \n  this.wednesteenth = function() {\n    return this.findTeenthday(3);\n  }\n\t\n  this.thursteenth = function() {\n    return this.findTeenthday(4);\n  }\n\n  this.friteenth = function() {\n    return this.findTeenthday(5);\n  }\n\n  this.saturteenth = function() {\n    return this.findTeenthday(6);\n  }\n\t\n  this.sunteenth = function() {\n    return this.findTeenthday(7);\n  }\n};\n  \nmodule.exports = Meetup;	\N	f	1	1	2014-03-19 14:29:13	2014-03-19 14:29:13	270	meetup.js
574	9	db74e513ed19f3f2b9e9da36	hibernating	javascript	meetup	var Meetup = function(month, year) {\n  this.findTeenthday = function(day) {\n    for (var i= 13; i < 20; i++) {\n      var date = new Date(year, month, i);\n      if (date.getUTCDay() === day) {\n       return date;\n      }\n    }\n\t} \n  \n  this.monteenth = function() {\n    return this.findTeenthday(1);\n  }  \n\n  this.tuesteenth = function() {\n    return this.findTeenthday(2);\n  }\n  \n  this.wednesteenth = function() {\n    return this.findTeenthday(3);\n  }\n\t\n  this.thursteenth = function() {\n    return this.findTeenthday(4);\n  }\n\n  this.friteenth = function() {\n    return this.findTeenthday(5);\n  }\n\n  this.saturteenth = function() {\n    return this.findTeenthday(6);\n  }\n\t\n  this.sunteenth = function() {\n    return this.findTeenthday(7);\n  }\n};\n  \nmodule.exports = Meetup;	\N	f	0	2	2014-04-12 15:45:20	2014-04-12 15:45:20	270	meetup.js
575	9	882a9c5898f0698f21dbd5f8	pending	scala	nucleotide-count	class DNA(strand:String) {\n\n  private var _nucleotideCounts:Map[Char,Int] = \n    Map('A' -> 0, 'C' -> 0 , 'G' -> 0, 'T' -> 0) \n\n  for (n <- strand) _nucleotideCounts.get(n) match {\n    case Some(i) => _nucleotideCounts+= (n -> (i+1))\n    case None => throw new IllegalArgumentException()\n    }\n\n  val nucleotideCounts = _nucleotideCounts\n\n  def count(nucleotide:Char) = {\n    if (nucleotide == 'U') 0 \n    else\n    nucleotideCounts.get(nucleotide) match {\n      case Some(i) => i\n      case None => throw new IllegalArgumentException()\n    }\n  }\n}	\N	f	1	1	2014-04-19 16:04:13	2014-04-19 16:04:13	271	DNA.scala
576	9	667a6713a5f90522e524f77b	pending	python	bob	class Bob:\n    def hey(self, input):\n        if (input.isupper() == False) and (input.endswith("?")): \n            return "Sure."\n        elif (input == "") or (input.isspace()):\n            return "Fine. Be that way!"\n        elif input.isupper() == True:\n            return "Woah, chill out!"\n        elif (input.isupper() == True) and (input.endswith("?")):\n            return "Woah, chill out!"\n        else:\n            return "Whatever."	\N	f	2	1	2014-05-10 14:41:30	2014-05-10 14:41:30	272	bob.py
578	9	08675684976f9f9d144095d4	done	ruby	bob	class Bob\n   def hey (msg)\n      if silence? msg\n         'Fine. Be that way!'\n      elsif shout? msg\n         'Woah, chill out!'\n      elsif question? msg\n         'Sure.'\n      else\n         'Whatever.'\n      end\n   end\n\n   private\n\n   def shout? (msg)\n      msg.upcase == msg\n   end\n\n   def silence? (msg)\n      msg.nil? || msg.empty?\n   end\n\n   def question? (msg)\n      msg.end_with? "?"\n   end\nend	\N	f	2	5	2014-03-31 14:21:25	2014-03-31 14:21:25	274	bob.rb
579	9	6146d08acf23bd0e88022c87	superseded	ruby	bob	# Meet Bob, he is a man of few words, try saying something to him\nclass Bob\n   # These are the defined responses\n   @@question = 'Sure.'\n   @@statement = 'Whatever.'\n   @@shout = 'Woah, chill out!'\n   @@silence = 'Fine. Be that way!'\n\n   # (public) hey - determines appropriate response to message\n   def hey (msg)\n      if silence? msg\n         @@silence\n      elsif shout? msg\n         @@shout\n      elsif question? msg\n         @@question\n      else\n         @@statement\n      end\n   end\n\n   private\n   # (private) shout? - tests whether a message is a shout\n   def shout? (msg)\n      msg.upcase == msg\n   end\n   # (private) silence? - tests if a message is silence\n   def silence? (msg)\n      msg.nil? or msg.empty?\n   end\n   # (private) question? - tests whether message is a question\n   def question? (msg)\n      msg.end_with? "?"\n   end\nend	\N	f	4	1	2014-05-05 18:36:58	2014-05-05 18:36:58	274	bob.rb
666	12	28dd231686fc191c84956343	hibernating	ruby	leap	class Year\n  def self.leap?(year)\n    modulo = Modulo.new(year)\n    modulo.dividable?(4) && (!modulo.dividable?(100) || modulo.dividable?(400))\n  end\nend\n\nclass Modulo\n  attr_reader :number\n\n  def initialize(number)\n    @number = number\n  end\n\n  def dividable?(by)\n    number % by == 0\n  end\nend	\N	f	2	1	2014-03-14 17:11:07	2014-03-14 17:11:07	316	year.rb
581	9	3640ec9c016a68c49129946b	superseded	ruby	bob	class Person\n   @@Responses = { }\n\n   def hey (msg)\n      if silence? msg\n         @@Responses[:silence]\n      elsif shout? msg\n         @@Responses[:shout]\n      elsif question? msg\n         @@Responses[:question]\n      else\n         @@Responses[:statement]\n      end\n   end\n\n   private\n\n   def shout? (msg)\n      msg.upcase == msg\n   end\n\n   def silence? (msg)\n      msg.nil? || msg.empty?\n   end\n\n   def question? (msg)\n      msg.end_with? "?"\n   end\nend\n\nclass Bob < Person\n   @@Responses = {\n      :question  => 'Sure.',\n      :statement => 'Whatever.',\n      :shout     => 'Woah, chill out!',\n      :silence   => 'Fine. Be that way!'\n   }\nend	\N	f	1	4	2014-06-01 17:32:33	2014-06-01 17:32:33	274	bob.rb
583	9	0ec41ca9ea7bbef7117d16f5	done	javascript	rna-transcription	var toRna = function(string) {\n    var result = '', list = {"C":"G", "G":"C", "T": "A", "A": "U"};\n    if (string.split('').every(function(i){ return (Object.keys(list).indexOf(i) > -1); })) {\n        string.split('').forEach(function(i){ result += list[i]; });\n        return result;\n    }\n    throw new Error("Invalid Nucleotide");\n};\nmodule.exports = toRna;	\N	f	1	1	2014-03-16 09:32:16	2014-03-16 09:32:16	275	rna-transcription.js
584	9	495746fca3584518e811d1dc	superseded	ruby	etl	class ETL\n\n  def self.transform(hash)\n    create_new_hash(hash)\n  end\n\n  class << self\n    private\n\n    def create_new_hash(hash)\n      new_hash = Hash.new()\n\n      hash.keys.map do |key|\n        hash[key].map {|element| new_hash[element.downcase] = key }\n      end\n\n      new_hash\n    end\n\n  end\nend	\N	f	3	2	2014-03-12 20:48:47	2014-03-12 20:48:47	276	etl.rb
585	9	2ac4ba84d711c425a74995a3	superseded	ruby	etl	class ETL\n\n  def self.transform(old)\n    new_scrabble_system(old)\n  end\n\n  class << self\n    private\n\n    def new_scrabble_system(old)\n      new_system = Hash.new()\n\n      old.keys.map do |key|\n        old[key].map {|element| new_system[element.downcase] = key }\n      end\n\n      new_system\n    end\n\n  end\nend	\N	f	3	3	2014-03-24 02:25:26	2014-03-24 02:25:26	276	etl.rb
586	9	2dfa492b5e69a036a9ccae22	superseded	ruby	etl	class ETL\n\n  def self.transform(old)\n    new_score(old)\n  end\n\n  class << self\n    private\n\n    def new_score(old)\n      new = Hash.new()\n\n      old.keys.map do |key|\n        old[key].map {|element| new[element.downcase] = key }\n      end\n\n      new\n    end\n\n  end\nend	\N	f	3	4	2014-04-12 08:41:19	2014-04-12 08:41:19	276	etl.rb
587	9	15521c92c045526135e5991d	superseded	ruby	etl	class ETL\n\n  def self.transform(old_score)\n    new_score = Hash.new()\n\n    old_score.keys.map do |score|\n      old_score[score].map {|letter| new_score[letter.downcase] = score}\n    end\n\n    new_score\n  end\n\nend	\N	f	3	5	2014-04-27 14:22:08	2014-04-27 14:22:08	276	etl.rb
588	9	66336481a66ab6207a14feb5	done	ruby	etl	class ETL\n\n  def self.transform(old_score)\n\n    old_score.each_with_object({}) do |(score, letters), new_score|\n      letters.map {|letter| new_score[letter.downcase] = score }\n    end\n\n  end\n\nend	\N	f	3	7	2014-05-09 03:30:10	2014-05-09 03:30:10	276	etl.rb
589	9	dfcbf4e23f23bb836c3d47d8	superseded	ruby	etl	class ETL\n\n  def self.transform(former_value)\n\n    former_value.each_with_object({}) do |(score, letters), new_score|\n      letters.map {|letter| new_score[letter.downcase] = score }\n    end\n\n  end\n\nend	\N	f	4	6	2014-05-17 19:19:02	2014-05-17 19:19:02	276	etl.rb
590	9	f3d3b71a18b2e0a4e4697c15	superseded	ruby	etl	class ETL\n\n  def self.transform(hash)\n    create_new_hash(hash)\n  end\n\n  private\n\n  def self.create_new_hash(hash)\n    new_hash = Hash.new()\n\n    hash.keys.map do |key|\n      hash[key].map {|element| new_hash[element.downcase] = key }\n    end\n\n    new_hash\n  end\n\nend	\N	f	2	1	2014-05-27 18:10:47	2014-05-27 18:10:47	276	etl.rb
591	9	dcdc07809a5bae39a3839045	pending	go	raindrops	package raindrops\n\nimport "strconv"\n\nfunc Convert(number int) string {\n    s := ""\n    if number % 3 == 0 {\n      s += "Pling"\n    } \n    if number % 5 == 0 {\n      s += "Plang"\n    }\n    if number % 7 == 0 {\n      s += "Plong"\n    }\n    if len(s) == 0 {\n      s = strconv.Itoa(number)\n    }\n    return s\n}	\N	f	1	1	2014-03-18 20:54:33	2014-03-18 20:54:33	277	raindrops.go
592	9	5b6f71f4efe07c83ea3c84a5	superseded	javascript	anagram	var Anagram = function(word) {\n  this.word = word;\n};\n\n// Sort a string value\nAnagram.prototype.sortString = function(value) {\n  // Capital letters are sorted ahead of lc\n  // So convert cases before sort\n  return value.toLowerCase().split('').sort().join('');\n}\n\n// Match against list\nAnagram.prototype.match = function(list) {\n  // Check for empty case\n  if (list.length == 0) return [];\n\n  var matches = [];\n  var listLen = list.length;\n  // Use a sorted version of our original word\n  var sortedWord = this.sortString(this.word);\n\n  for (var i = 0; i < listLen; i++) {\n    var currAnagram = this.sortString(list[i]);\n    var isOwnAnagram = (this.word.toLowerCase() == list[i].toLowerCase());\n\n    if (currAnagram == sortedWord && !isOwnAnagram) {\n      matches.push(list[i]);\n    }\n  }\n\n  return matches;\n}\n\nmodule.exports = Anagram;	\N	f	0	1	2014-03-13 04:43:39	2014-03-13 04:43:39	278	anagram.js
772	14	7231be6c83d2adc0b35306eb	hibernating	ruby	bob	class Bob\n\n  def initialize\n  end\n\n  def hey(saying)\n    if saying.nil? || saying.strip == ""\n      "Fine. Be that way!"\n    elsif saying == saying.upcase\n      "Woah, chill out!"\n    elsif saying =~ /\\?$/\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	f	3	1	2014-04-22 23:28:18	2014-04-22 23:28:18	356	bob.rb
594	9	8b282389a03c350b4bf7fcb1	done	javascript	anagram	var Anagram = function(word) {\n  this.word = word;\n  this.sortedWord = this.sortString(word);\n  this.lowerCasedWord = word.toLowerCase();\n};\n\n// Sort a string value\nAnagram.prototype.sortString = function(value) {\n  // Capital letters are sorted ahead of lc\n  // So convert cases before sort\n  return value.toLowerCase().split('').sort().join('');\n}\n\n// Filter callback\nAnagram.prototype.isAnagram = function(currAnagram) {\n  var sortedAnagram = this.sortString(currAnagram);\n  // Same words may have different cases\n  var isOwnAnagram = (this.lowerCasedWord === currAnagram.toLowerCase());\n  return sortedAnagram === this.sortedWord && !isOwnAnagram;\n}\n\n// Filter list\nAnagram.prototype.match = function(list) {\n  // Check for empty case\n  if (list.length === 0) return [];\n  return list.filter(this.isAnagram, this);\n}\n\nmodule.exports = Anagram;	\N	f	2	4	2014-05-09 09:47:26	2014-05-09 09:47:26	278	anagram.js
595	9	be5dd45309dda5a1ba51e300	superseded	javascript	anagram	var Anagram = function(word) {\n  this.word = word;\n};\n\n// Sort a string value\nAnagram.prototype.sortString = function(value) {\n  // Capital letters are sorted ahead of lc\n  // So convert cases before sort\n  return value.toLowerCase().split('').sort().join('');\n}\n\n// Match against list\nAnagram.prototype.match = function(list) {\n  // Check for empty case\n  if (list.length === 0) return [];\n\n  var matches = [];\n  // Cache sorted version of our original word\n  var sortedWord = this.sortString(this.word);\n  // Cache lowercased version\n  var lowerCasedWord = this.word.toLowerCase();\n  // Cache array length (No optimization on Opera or IE)\n  for (var i = 0, listLen = list.length; i < listLen; i++) {\n    var currAnagram = list[i];\n    var sortedAnagram = this.sortString(currAnagram);\n    // Same words may have different cases\n    var isOwnAnagram = (lowerCasedWord === currAnagram.toLowerCase());\n\n    if (sortedAnagram === sortedWord && !isOwnAnagram) {\n      matches.push(list[i]);\n    }\n  }\n\n  return matches;\n}\n\nmodule.exports = Anagram;	\N	f	1	2	2014-05-25 23:46:29	2014-05-25 23:46:29	278	anagram.js
596	9	d4cb5e9491d4393d39f86454	done	python	rna-transcription	#! /usr/bin/env python\n\nclass DNA(object):\n\n    def __init__(self, strand):\n        self.strand = strand  \n\n    def to_rna(self):\n        return self.strand.replace('T','U')	\N	f	0	1	2014-03-24 00:32:12	2014-03-24 00:32:12	279	rna-transcription.py
597	9	afdb88d5f09ec1e03fa6fda4	pending	ruby	hamming	module Hamming\n  def self.compute(seq1, seq2)\n    [].tap { |arr|\n      seq1.bytes.zip(seq2.bytes) { |a, b|\n        arr << (a ^ b) if a && b \n      }\n    }.count(&:nonzero?)\n  end\nend	\N	f	1	1	2014-05-28 08:55:46	2014-05-28 08:55:46	280	hamming.rb
599	9	3dfc07764150ffde78971ecd	superseded	ruby	proverb	class Proverb\n\n  def initialize(*nouns, qualifier:  nil)\n    @nouns = nouns\n    @qualifier = qualifier\n  end\n\n  def to_s\n    repeat_chorus\n  end\n\n  private \n\n  attr_reader :nouns, :qualifier\n\n  def repeat_chorus\n    repetitions = nouns.length - 1\n    chorus = []\n\n    repetitions.times do |i|\n       chorus << "For want of a #{nouns[i]} the #{nouns[i + 1]} was lost."\n    end\n\n    chorus.join("\\n") + final_sequence\n  end\n\n  def final_sequence\n    if qualifier\n      "\\nAnd all for the want of a #{qualifier} #{nouns.first}." \n    else\n      "\\nAnd all for the want of a #{nouns.first}." \n    end\n  end\n\nend	\N	f	0	1	2014-04-03 12:50:05	2014-04-03 12:50:05	282	proverb.rb
600	9	fa3c3b2d056b011a124f2bab	needs_input	ruby	proverb	class Proverb\n\n  def initialize(*nouns, qualifier:  nil)\n    @nouns = nouns\n    @qualifier = qualifier\n  end\n\n  def to_s\n    repeat_chorus\n  end\n\n  private \n\n  attr_reader :nouns, :qualifier\n\n  def repeat_chorus\n    chorus = []\n\n    repetitions.times do |i|\n       chorus << "For want of a #{nouns[i]} the #{nouns[i + 1]} was lost."\n    end\n\n    chorus.join("\\n") + final_sequence\n  end\n\n  def repetitions\n    nouns.length - 1\n  end\n\n  def final_sequence\n    if qualifier\n      "\\nAnd all for the want of a #{qualifier} #{nouns.first}." \n    else\n      "\\nAnd all for the want of a #{nouns.first}." \n    end\n  end\n\nend	\N	f	2	2	2014-05-24 17:10:28	2014-05-24 17:10:28	282	proverb.rb
601	10	fcdec10f5f875612f345e53e	superseded	ruby	bob	require 'pry'\nclass Bob\n  def initialize\n\n  end\n\n  def hey(message)\n    if is_a_question?(message)\n      'Sure.'\n    elsif is_yelling?(message)\n      'Woah, chill out!'\n    elsif is_not_a_statement?(message)\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def is_a_question?(message)\n    return false if is_yelling?(message)\n    message.end_with? '?'\n  end\n\n  def is_yelling?(message)\n    return false if is_not_a_statement?(message)\n    if message == message.upcase && message.match(/[A-Z]/)\n      true\n    else\n      false\n    end\n  end\n\n  def is_not_a_statement?(message)\n    if message.strip.empty? || message.nil?\n      true\n    else\n      false\n    end\n  end\nend	\N	f	5	1	2014-06-27 05:49:30	2014-06-27 05:49:30	283	bob.rb
603	10	db3085c3fd97632802a41635	done	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    (0...[strand1.length, strand2.length].min).count { |i| strand1[i] != strand2[i] }\n  end\nend	\N	f	5	1	2014-06-16 00:30:14	2014-06-16 00:30:14	284	hamming.rb
604	10	a5f837ecbab7a92974310da6	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(list)\n    list.select do |w|\n      is_anagram?(w.downcase)\n    end\n  end\n\n  def is_anagram?(w)\n    return false if word.eql?(w)\n\n    unless w.length == word.length\n      return false\n    end\n\n    word.scan(/\\w/).sort == w.scan(/\\w/).sort\n  end\nend	\N	f	0	2	2014-06-16 02:30:24	2014-06-16 02:30:24	285	anagram.rb
605	10	0b9818e1bb8b646a0fd17b9c	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(list)\n    list.each_with_object(Array.new) do |w, anagrams|\n      anagrams << w if is_anagram?(w.downcase)\n    end\n  end\n\n  def is_anagram?(w)\n    return false if word.eql?(w)\n\n    unless w.length == word.length\n      return false\n    end\n\n    word.scan(/\\w/).sort == w.scan(/\\w/).sort\n  end\nend	\N	f	10	1	2014-06-19 12:33:02	2014-06-19 12:33:02	285	anagram.rb
607	10	2b37d04df8873b9689398cc1	done	javascript	anagram	"use strict";\n\nfunction Anagram (word) {\n\n  var anagram_word = word;\n\n  // private methods\n\n  var alphabetize = function (word) {\n    return word.toLowerCase().split('').sort().join('');\n  };\n\n  var compare_words = function(word1, word2) {\n    if(alphabetize(word1) === alphabetize(word2)) return true;\n  };\n\n  var anagramFinder = function (word_array) {\n    var winners = [];\n    word_array.forEach( function (word) {\n      if( compare_words(word, anagram_word) ) {\n        winners.push(word);\n      }\n    });\n    return winners;\n  };\n\n  // public methods\n  this.match = function (word_array) {\n\n    return anagramFinder(word_array);\n  };\n}\n\nmodule.exports = Anagram;	\N	f	0	2	2014-06-28 18:11:44	2014-06-28 18:11:44	286	anagram.js
608	10	971541b99b35e85e37ee5c0b	pending	python	anagram	class Anagram:\n    def __init__(self, s):\n        self.sort=sorted(s.lower())\n        self.orig=s\n    def match(self, l):\n        return filter(lambda w: sorted(w.lower())==self.sort and w!=self.orig, l)	\N	f	3	1	2014-06-19 15:14:48	2014-06-19 15:14:48	287	anagram.py
609	10	2d199014d455a9443eedcaa8	done	haskell	robot-name	module Robot (\n    Robot\n  , robotName\n  , mkRobot\n  , resetName\n  ) where\n\nimport System.Random (randomRIO)\nimport Control.Concurrent (MVar, newMVar, readMVar, swapMVar)\nimport Control.Monad (void)\n\ndata Robot = Robot\n  { name :: MVar String\n  }\n\nmkRobotName :: IO String\nmkRobotName = mapM randomRIO [letters, letters, numbers, numbers, numbers]\n  where\n    letters = ('A','Z')\n    numbers = ('0','9')\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ name r\n\nmkRobot :: IO Robot\nmkRobot = name' >>= return . Robot\n  where\n    name' = mkRobotName >>= newMVar\n\nresetName :: Robot -> IO ()\nresetName r = void (a)\n  where\n    name' = mkRobotName\n    a = name' >>= swapMVar (name r)	\N	f	3	1	2014-06-20 10:57:00	2014-06-20 10:57:00	288	robot-name.hs
610	10	97b25c1d9075bbfedf8ed483	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport qualified Data.Map as M\r\n\r\nwordCount :: Num a => String -> M.Map String a\r\nwordCount s = M.fromListWith (+) [(w, 1) | w <- words $ map precondition s]\r\n  where\r\n    precondition c\r\n      | isPunctuation c    = ' '\r\n      | not (isAlphaNum c) = ' '\r\n      | otherwise          = toLower c\r	\N	f	0	1	2014-06-16 04:57:52	2014-06-16 04:57:52	289	WordCount.hs
611	10	1c8626cb051750b7488faf4f	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport qualified Data.Map.Strict as M\r\nimport Data.List.Split\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount s = M.fromListWith (+) [(map toLower w, 1) | w <- wordsBy isSep s]\r\n  where\r\n    isSep c = isPunctuation c || not (isAlphaNum c)\r	\N	f	1	2	2014-06-25 00:09:34	2014-06-25 00:09:34	289	WordCount.hs
612	10	c156f805b95a7f7efc8e4730	done	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport qualified Data.Map.Strict as M\r\nimport Data.List.Split\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount s = M.fromListWith (+) [(map toLower w, 1) | w <- wordsBy (not . isAlphaNum) s]\r\n    \r	\N	f	3	3	2014-06-25 15:32:25	2014-06-25 15:32:25	289	WordCount.hs
676	12	3471b499b6bf9bf565bafe44	superseded	ruby	anagram	class Anagram\n  def initialize(query)\n    @query = query\n  end\n\n  def match(words)\n    words.select { |word| anagram?(word) }\n  end\n\n  private\n  attr_reader :query\n  \n  def normalized_query\n    @normalized_query ||= normalize(query)\n  end\n\n  def anagram?(word)\n    normalized_query.eql?(normalize(word))\n  end\n\n  def normalize(word)\n    word.downcase.split('').sort.join\n  end\nend	\N	f	1	1	2014-06-01 04:23:53	2014-06-01 04:23:53	320	anagram.rb
615	10	bd1e0e0eb860853fe813a00e	superseded	haskell	kindergarten-garden	module Garden \n\t(\n\t  garden\n\t, defaultGarden\n\t, lookupPlants\n\t, Plant(..)\n\t) where\n\nimport Data.Map (Map, fromList, findWithDefault) \nimport Data.List (transpose, sort)\nimport Data.List.Split (splitOn, chunksOf)\n\ndata Plant = Grass | Clover | Radishes | Violets deriving (Show, Eq)\n\ncharToPlant :: Char -> Plant\ncharToPlant 'G' = Grass\ncharToPlant 'C' = Clover\ncharToPlant 'R' = Radishes\ncharToPlant 'V' = Violets\n\nstringToPlants :: String -> [Plant]\nstringToPlants = map charToPlant\n\ngarden :: [String] -> String -> Map String [Plant]\ngarden children diagram = fromList $ zip children' cups\n  where cups = map stringToPlants . map concat . transpose . map (chunksOf 2) . lines $ diagram\n        children' = sort children\n\ndefaultGarden :: String -> Map String [Plant]\ndefaultGarden = garden ["Alice", "Bob", "Charlie", "David", \n\t\t\t\t\t    "Eve", "Fred", "Ginny", "Harriet", \n\t\t\t\t\t    "Ileana", "Joseph", "Kincaid", "Larry"]\n\nlookupPlants :: String -> Map String [Plant] -> [Plant]\nlookupPlants = findWithDefault []	\N	f	3	3	2014-06-26 03:10:16	2014-06-26 03:10:16	290	Garden.hs
616	10	f3c7d0bb220fd94a87275f1a	done	haskell	kindergarten-garden	module Garden \n\t(\n\t  garden\n\t, defaultGarden\n\t, lookupPlants\n\t, Plant(..)\n\t) where\n\nimport Data.Map (Map, fromList, findWithDefault) \nimport Data.List (transpose, sort)\nimport Data.List.Split (chunksOf)\n\ndata Plant = Grass | Clover | Radishes | Violets deriving (Show, Eq)\n\ncharToPlant :: Char -> Plant\ncharToPlant 'G' = Grass\ncharToPlant 'C' = Clover\ncharToPlant 'R' = Radishes\ncharToPlant 'V' = Violets\n\nstringToPlants :: String -> [Plant]\nstringToPlants = map charToPlant\n\ngarden :: [String] -> String -> Map String [Plant]\ngarden children diagram = fromList $ zip children' cups\n  where children' = sort children\n        cups = map (stringToPlants . concat) \n               . transpose . map (chunksOf 2) \n               . lines $ diagram\n        \n\ndefaultGarden :: String -> Map String [Plant]\ndefaultGarden = garden ["Alice", "Bob", "Charlie", "David", \n\t\t\t\t\t    "Eve", "Fred", "Ginny", "Harriet", \n\t\t\t\t\t    "Ileana", "Joseph", "Kincaid", "Larry"]\n\nlookupPlants :: String -> Map String [Plant] -> [Plant]\nlookupPlants = findWithDefault []	\N	f	0	4	2014-06-27 04:45:58	2014-06-27 04:45:58	290	Garden.hs
617	10	ebf76ec09654d6e2b8dad01c	done	ruby	robot-name	class RobotFactory\n\n\t@robot_names = ["RS0000"]\n\n\tdef self.create\n\t\tbegin\n      @robot_name = self.generate_robot_name\n    end while @robot_names.include? @robot_name\n\t\t@robot_names << @robot_name\n\t\t@robot_name\n\tend\n\n\tdef self.reset\n\t\t@robot_names[0]\n\tend\n\n\tdef self.generate_robot_name\n\t\tname = generate_random_prefix\n\t\tname << generate_random_sufix\n\tend\n\n\tdef self.generate_random_sufix\n\t\tnumber = rand(9999).to_s\n\t\t(4 - number.size).times do\n\t\t  number << "0"\t\t\t\n\t\tend\n\t\tnumber.reverse\n\tend\n\n\tdef self.generate_random_prefix\n\t\t(0..1).map{ alphabet_letters[rand(alphabet_letters.length)] }.join\n\tend\n\n\tdef self.alphabet_letters\n\t\t('A'..'Z').to_a\n\tend\n\nend\n\nclass Robot\n\tattr_reader :name\n\tdef initialize\n\t\t@name = RobotFactory.create\n\tend\n\n  def reset\n  \t@name = RobotFactory.reset\n  end\nend	\N	f	3	1	2014-06-27 06:16:22	2014-06-27 06:16:22	291	robot-name.rb
618	10	2f51053d4652981e6ed43e5c	done	elixir	word-count	defmodule WordCounter do\n  def count_words(words) do\n    words |> list_of_words |> Enum.reduce(HashDict.new(), fn(word, count) ->\n      Dict.update(count, word, 1, fn(num) -> num + 1 end)\n    end)\n  end\n\n  defp list_of_words(sentence) do\n    parse_words(sentence)\n  end\n\n  defp parse_words(sentence) do\n    sentence |> normalize |> word_scan |> List.flatten\n  end\n\n  defp word_scan(sentence) do\n    Regex.scan(%r/\\w+/, sentence)\n  end\n\n  defp normalize(sentence) do\n    String.downcase(sentence)\n  end\nend\n\ndefmodule Words do\n  import WordCounter, only: [count_words: 1]\n\n  def count(words) do\n    words |> count_words\n  end\nend	\N	f	3	1	2014-06-21 09:30:47	2014-06-21 09:30:47	292	word-count.exs
619	10	c3dfe5512511f14e212484b7	superseded	javascript	bob	var Bob = function(){\n    this.regexes = ["^$|^ {2,}$", "(?=.*[A-Z])^[^a-zäüö]*$", "(.)[?]$" ];\n    this.response = ['Fine. Be that way!', 'Woah, chill out!', 'Sure.', 'Whatever.'];\n};\n\nBob.prototype.hey = function (text) {\n    for (var i in this.regexes) {\n        if (text.match(new RegExp(this.regexes[i]))) {\n            return this.response[i];\n        }\n    }\n    return this.response[3];\n};\n\nmodule.exports = Bob;	\N	f	9	1	2014-06-18 05:51:51	2014-06-18 05:51:51	293	bob.js
620	10	f8a756559b741c623fd947ec	superseded	javascript	bob	var Bob = function(){\n    this.regexes = ["^$|^ +$", "(?=.*[A-Z])^[^a-zäüö]*$", "(.)[?]$"];\n    this.response = ['Fine. Be that way!', 'Woah, chill out!', 'Sure.'];\n};\n\nBob.prototype.hey = function (text) {\n    for (var i in this.regexes) {\n        if (text.match(new RegExp(this.regexes[i]))) {\n            return this.response[i];\n        }\n    }\n    return 'Whatever.';\n};\n\nmodule.exports = Bob;	\N	f	5	2	2014-06-22 01:14:20	2014-06-22 01:14:20	293	bob.js
621	10	357dbeb14e0b4a0404cb4fcc	superseded	javascript	bob	var Bob = function(){\n    this.regexes = ["^$|^ +$", "(?=.*[A-Z])^[^a-z\\xE0-\\xFF]+$", ".[?]$"];\n    this.response = ['Fine. Be that way!', 'Woah, chill out!', 'Sure.'];\n};\n\nBob.prototype.hey = function (text) {\n    for (var i in this.regexes) {\n        if (text.match(new RegExp(this.regexes[i]))) {\n            return this.response[i];\n        }\n    }\n    return 'Whatever.';\n};\n\nmodule.exports = Bob;	\N	f	1	3	2014-06-24 01:26:25	2014-06-24 01:26:25	293	bob.js
622	10	d399f197a02ff5488649c150	done	javascript	bob	var Bob = function(){\n    this.regexes = ["^$|^\\\\s+$", "(?=.*[A-Z])^[^a-z\\xE0-\\xFF]+$", "\\\\?$"];\n    this.response = ['Fine. Be that way!', 'Woah, chill out!', 'Sure.'];\n};\n\nBob.prototype.hey = function (text) {\n    for (var i in this.regexes) {\n        if (text.match(new RegExp(this.regexes[i]))) {\n            return this.response[i];\n        }\n    }\n    return 'Whatever.';\n};\n\nmodule.exports = Bob;	\N	f	0	4	2014-06-27 00:19:06	2014-06-27 00:19:06	293	bob.js
633	11	9dd69f14e364b656536e3ce6	superseded	clojure	nucleotide-count	(ns dna\n  (:require [clojure.core :as core]))\n\n(def valid-dna-nucleotides #{\\A \\T \\C \\G})\n(def valid-nucleotides (conj valid-dna-nucleotides \\U))\n\n(defn count [nucleotide string]\n  (if (valid-nucleotides nucleotide)\n    (core/count (filter #(= nucleotide %) string))\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [string]\n  (into {} (for [n valid-dna-nucleotides] [n (count n string)])))	\N	f	2	1	2014-03-23 20:43:18	2014-03-23 20:43:18	301	dna.clj
624	10	d50a8888b9f055059021ad64	done	ruby	crypto-square	class Crypto\n\tdef initialize(message)\n\t\n\t\t@message = message\n\tend\n\n\tdef normalize_plaintext\n\t\t\t# @message.gsub!(/\\s[^a-z]/,"")\n\t\t  @message.gsub!(/[^\\w]/,"")\n\t\t  # @message.gsub!(/[\\s,]/,"")\n\t\t  @message.downcase!\n\t\t  return @message\n\tend\n\n\tdef size\n\t\t# puts "MESSAGE"\n\t\t# print normalize_plaintext\n\t\tlength = normalize_plaintext.size\n\t\t# print length\n\t\tlow = 1\n\t\thigh = length\n\t\tmid = high/2\n\t\twhile mid*mid > length\n\t\t\t\n\t\t\tif mid*mid > length\n\t      high = mid\n\t     mid = (high+low)/2\n\t\t\tend\n\t\t\tif mid*mid < length\n\t      low = mid\n\t      mid = (high+low)/2\n\t\t\tend\n\t\tend\n\t\t# puts mid\n   if mid*mid == length\n   \treturn mid\n   else\n\t return mid + 1\n\tend\n\tend\n\n\tdef plaintext_segments\n\t\tplaintext_segments = []\n    count = 1\n    string = ""\n\t\tnormalize_plaintext.split("").each do |letter|\n\t\t  \n\t\t  # puts "SIZE"\n\t\t  # puts self.size  \n\n\t\t\n\t\t  if count%size != 0 \n\t\t  \t # print count\n\t\t  \t # puts size\n\t\t  \tstring = string + letter\n\t\t  \tcount = count + 1\n\t\t   \n\t\telse\n\t\t\t\n\t\t   string = string + letter\n\t\t    # puts count\n\n\t\t    # puts string\n\t\t  plaintext_segments << string\n\t\t  count = 1\n\t\t\tstring = ""\n\t\tend\n\t  end\n\t  if string.size > 0\n\t  \tplaintext_segments  << string\n\t  end\n\t  return plaintext_segments\n\tend\n\n\tdef ciphertext\n\t\tciphertext_in_array = plaintext_segments.dup\n\t\t\n\t\tplaintext_segments.each_index do |index|\n      # size = plaintext_segments[0].size\n       puts plaintext_segments[index]\n      0.upto(size-1) do |s|\n         \n         puts plaintext_segments[index][s].to_s\n       \t ciphertext_in_array[s][index] = plaintext_segments[index][s].to_s\n      \t\n\n      end \n\t\tend\n\t\t\n\t\treturn ciphertext_in_array.join\n\tend\n\n\tdef normalize_ciphertext\n\t\t# ciphertext_in_array = plaintext_segments.dup\n\t\t# print plaintext_segments\n\t\t# plaintext_segments.each_index do |index|\n      \n  #     0.upto(size-1) do |s|\n  #        print s\n  #     \t puts plaintext_segments[index][s].to_s\n  #     \t ciphertext_in_array[s][index] = plaintext_segments[index][s].to_s\n      \t\n\n  #     end \n\t\t# end\n\tend\nend	\N	f	2	1	2014-06-18 23:39:20	2014-06-18 23:39:20	295	crypto-square.rb
625	10	8a3e4854467f923ace04deca	superseded	elixir	anagram	defmodule Anagram do\n\n  def match(needle, haystack) do\n    desired_characters = characters_used_in needle\n    haystack |> Enum.filter fn(candidate) ->\n      desired_characters == characters_used_in candidate\n    end\n  end\n\n  defp characters_used_in(word) do\n    Enum.sort word |> binary_to_list\n  end\n\nend	\N	f	1	1	2014-06-17 22:42:04	2014-06-17 22:42:04	296	anagram.exs
626	10	fc2ce01a504536452d9c0977	superseded	elixir	anagram	defmodule Anagram do\n\n  def match(needle, haystack) do\n    desired_characters = characters_used_in needle\n    is_anagram = fn(candidate) ->\n      desired_characters == characters_used_in candidate\n    end\n    haystack |> Enum.filter is_anagram\n  end\n\n  defp characters_used_in(word) do\n    word |> binary_to_list |> Enum.sort\n  end\n\nend	\N	f	3	2	2014-06-20 02:56:56	2014-06-20 02:56:56	296	anagram.exs
627	10	66075f062984ee2e2f48699c	done	elixir	anagram	defmodule Anagram do\n\n  def match(needle, haystack) do\n    haystack |> Enum.filter anagrams?(needle, &1)\n  end\n\n  defp characters_used(word) do\n    word |> binary_to_list |> Enum.sort\n  end\n\n  defp anagrams?(source, target) do\n    source |> characters_used == target |> characters_used\n  end\n\nend	\N	f	5	3	2014-07-01 00:18:34	2014-07-01 00:18:34	296	anagram.exs
628	10	416c823600796c25f0210e72	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n     @words = phrase.delete(",!&@$%^&:!")\n     \t\t\t\t.downcase\n                    .split \n  end\n\n  def word_count\n     @words.each_with_object({}) do |word, words|\n        words[word] ||= 0\n        words[word] += 1\n     end\n   end\nend	\N	f	6	1	2014-06-17 16:08:07	2014-06-17 16:08:07	297	word-count.rb
629	10	034477aec6ed12e7eb5e8fc4	done	go	clock	package clock\n\nimport "fmt"\n\ntype Clock int\n\nfunc New(h, m int) Clock {\n\tc := Clock(h*60+m) % 1440\n\tif c < 0 {\n\t\tc += 1440\n\t}\n\treturn c\n}\n\nfunc (c Clock) String() string {\n\treturn fmt.Sprintf("%02d:%02d", c/60, c%60)\n}\n\nfunc (c Clock) Add(m int) Clock {\n\treturn New(0, int(c)+m)\n}	\N	f	1	1	2014-06-19 11:36:09	2014-06-19 11:36:09	298	clock.go
630	11	5b38f012cf52f95e07028194	done	ruby	bob	class Bob \n  def hey string\n    return 'Fine. Be that way!' if string.gsub(/\\s+/, "").empty?\n    return 'Woah, chill out!' if string.gsub(/[^0-9a-z ]/i, '').split(/ /).group_by(&:size).max.last[-1].gsub('?','').gsub(/[A-Z1]/,"").empty?\n    return 'Sure.' if string[-1].eql? '?'\n    return 'Whatever.'\n  end\nend	\N	f	1	1	2014-04-03 15:05:52	2014-04-03 15:05:52	299	bob.rb
632	11	16df0f62907a06970959c275	done	haskell	robot-simulator	module Robot\n  ( Bearing(..)\n  , Robot\n  , mkRobot\n  , coordinates\n  , simulate\n  , bearing\n  , turnRight\n  , turnLeft\n  ) where\n\nimport Data.List (foldl')\n\ndata Bearing = North\n             | East\n             | South\n             | West\n             deriving (Eq, Enum, Show)\n\ndata Robot = Robot { bearing :: !Bearing\n                   , coords  :: !Coordinates\n                   } deriving (Eq, Show)\n\ntype Position = (Int, Int)\ndata Coordinates = Coordinates !Int !Int deriving (Eq, Show)\n\ncoordinates :: Robot -> Position\ncoordinates (Robot _ (Coordinates x y)) = (x, y)\n\nmkRobot :: Bearing -> Position -> Robot\nmkRobot dir (x, y) = Robot { bearing = dir, coords = Coordinates x y }\n\nmove :: Robot -> Robot\nmove robo = robo { coords = pos }\n  where pos = case bearing robo of\n          North -> Coordinates x (y + 1)\n          East  -> Coordinates (x + 1) y\n          South -> Coordinates x (y - 1)\n          West  -> Coordinates (x - 1) y\n        Coordinates x y = coords robo\n\nsimulate :: Robot -> String -> Robot\nsimulate = foldl' step\n  where step robo instruction = case instruction of\n          'L' -> robo { bearing = turnLeft (bearing robo) }\n          'R' -> robo { bearing = turnRight (bearing robo) }\n          'A' -> move robo\n          _   -> error "invalid instruction"\n\nturnRight :: Bearing -> Bearing\nturnRight West = North\nturnRight x    = succ x\n\nturnLeft :: Bearing -> Bearing\nturnLeft North = West\nturnLeft x     = pred x	\N	f	2	2	2014-05-05 09:54:26	2014-05-05 09:54:26	300	Robot.hs
665	11	bd36a4aa12530374bcdd8cd9	done	python	rna-transcription	class DNA(object):\n    def __init__(self, dna_strand):\n        self.dna_strand = dna_strand\n        pass\n\n    def to_rna(self):\n        return self.dna_strand.replace('T','U')	\N	f	3	1	2014-03-28 16:21:46	2014-03-28 16:21:46	315	rna-transcription.py
635	11	57b246634db676a6180f7a50	superseded	clojure	nucleotide-count	(ns dna\n  [:refer-clojure :rename {count core-count}])\n\n(def valid-dna-nucleotides #{\\A \\T \\C \\G})\n(def valid-nucleotides (conj valid-dna-nucleotides \\U))\n(def empty-count (into {} (map (fn [a] [a 0]) valid-dna-nucleotides)))\n\n(defn nucleotide-counts [string]\n  (into empty-count (frequencies string)))\n\n(defn count [nucleotide string]\n  (if (valid-nucleotides nucleotide)\n    ((nucleotide-counts string) nucleotide 0)\n    (throw (Exception. "invalid nucleotide"))))	\N	f	2	3	2014-06-06 13:33:40	2014-06-06 13:33:40	301	dna.clj
636	11	9ae3b2114635657f66a915db	done	clojure	nucleotide-count	(ns dna\n  [:refer-clojure :rename {count core-count}])\n\n(def valid-dna-nucleotides #{\\A \\T \\C \\G})\n(def valid-nucleotides (conj valid-dna-nucleotides \\U))\n(def empty-count (zipmap valid-dna-nucleotides (repeat 0)))\n\n(defn nucleotide-counts [string]\n  (into empty-count (frequencies string)))\n\n(defn count [nucleotide string]\n  (if (valid-nucleotides nucleotide)\n    ((nucleotide-counts string) nucleotide 0)\n    (throw (Exception. "invalid nucleotide"))))	\N	f	2	4	2014-06-07 15:45:20	2014-06-07 15:45:20	301	dna.clj
637	11	cccb1aeadfad61d5157f55c9	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) && (evenly_divisible_by?(400) || !evenly_divisible_by?(100))\n  end\n\n private\n\n  def evenly_divisible_by?(divisor)\n    (@year % divisor).zero?\n  end\n\nend	\N	f	3	1	2014-03-21 18:26:27	2014-03-21 18:26:27	302	leap.rb
638	11	1cd1393e7c91b8946cb1ac80	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    every_fourth_year = evenly_divisible_by?(4)\n    not_beginning_of_century = !evenly_divisible_by?(100)\n    unless_400th_year = evenly_divisible_by?(400)\n\n    return every_fourth_year && (not_beginning_of_century || unless_400th_year)\n  end\n\n private\n\n  def evenly_divisible_by?(divisor)\n    (@year % divisor).zero?\n  end\n\nend	\N	f	4	2	2014-04-11 00:07:39	2014-04-11 00:07:39	302	leap.rb
639	11	86ed9a4004d049d88700c9d4	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    vanilla_leap_year = evenly_divisible_by?(4)\n    beginning_of_century = evenly_divisible_by?(100)\n\n    return vanilla_leap_year && (!beginning_of_century || evenly_divisible_by?(400))\n  end\n\n private\n\n  def evenly_divisible_by?(divisor)\n    (@year % divisor).zero?\n  end\n\nend	\N	f	4	3	2014-04-12 15:57:28	2014-04-12 15:57:28	302	leap.rb
640	11	2f3c5976c180db18616076e0	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    is_vanilla_leap_year = evenly_divisible_by?(4)\n    is_beginning_of_century = evenly_divisible_by?(100)\n\n    return is_vanilla_leap_year && (!is_beginning_of_century || evenly_divisible_by?(400))\n  end\n\n private\n\n  def evenly_divisible_by?(divisor)\n    (@year % divisor).zero?\n  end\n\nend	\N	f	4	4	2014-04-16 18:54:19	2014-04-16 18:54:19	302	leap.rb
641	11	5a81cd95b36b39bb41ead845	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    vanilla_leap? && (!beginning_of_century? || evenly_divisible_by?(400))\n  end\n\n private\n\n  def vanilla_leap?\n    evenly_divisible_by?(4)\n  end\n\n  def beginning_of_century?\n    evenly_divisible_by?(100)\n  end\n\n  def evenly_divisible_by?(divisor)\n    (@year % divisor).zero?\n  end\n\nend	\N	f	1	5	2014-05-23 22:12:57	2014-05-23 22:12:57	302	leap.rb
642	11	42333931d710f2210bbffa14	done	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(4) && (!divisible_by?(100) || divisible_by?(400))\n  end\n\n private\n\n  def divisible_by?(divisor)\n    (@year % divisor).zero?\n  end\n\nend	\N	f	5	6	2014-05-27 12:37:25	2014-05-27 12:37:25	302	leap.rb
644	11	f4319d94520f682a42d80396	superseded	ruby	raindrops	require_relative '../prime-factors/prime_factors'\n\n\n# - If the number contains 3 as a prime factor, output 'Pling'.\n# - If the number contains 5 as a prime factor, output 'Plang'.\n# - If the number contains 7 as a prime factor, output 'Plong'.\n# - If the number does not contain 3, 5, or 7 as a prime factor,\n#   just pass the number's digits straight through.\n\nclass Raindrops\n\n  def convert(n)\n    factors = PrimeFactors.for(n)\n    s = ""\n    if factors.member?(3) then\n      s += "Pling"\n    end\n    if factors.member?(5) then\n      s += "Plang"\n    end\n    if factors.member?(7) then\n      s += "Plong"\n    end\n    if s == ""\n      s = n.to_s\n    end\n    s\n  end\n\nend	\N	f	2	1	2014-05-04 03:48:52	2014-05-04 03:48:52	303	raindrops.rb
645	11	05cc2744fa9a1e9b864027ac	superseded	ruby	raindrops	require_relative '../prime-factors/prime_factors'\n\n\n# - If the number contains 3 as a prime factor, output 'Pling'.\n# - If the number contains 5 as a prime factor, output 'Plang'.\n# - If the number contains 7 as a prime factor, output 'Plong'.\n# - If the number does not contain 3, 5, or 7 as a prime factor,\n#   just pass the number's digits straight through.\n\nclass Raindrops\n\n  Mapping = { 3 => Pling, 5 => Plang, 7 => Plong }\n\n  def convert(n)\n    factors = PrimeFactors.for(n)\n    Mapping.inject("") do | s, (k,v) |\n      if factors.contains?(k) then s += v end\n    end\n    s.empty? ? n.to_s : s\n  end\n\nend	\N	f	2	2	2014-06-06 05:33:29	2014-06-06 05:33:29	303	raindrops.rb
646	11	ca7407bf0aab1cb01668fdd2	done	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char (toUpper)\n\nsing :: Int -> Int -> String\nsing to from = unlines $ map verse [to, to - 1..from]\n\nverse :: Int -> String\nverse = unlines . map toSentence . sequence [firstLine, secondLine]\n\ntoSentence :: String -> String\ntoSentence (x:xs) = toUpper x : (xs ++ ".")\n\nfirstLine :: Int -> String\nfirstLine n = bottlesOfBeerOnTheWall n ++ ", " ++ bottlesOfBeer n\n\nsecondLine :: Int -> String\nsecondLine 0 = "go to the store and buy some more, " ++ bottlesOfBeerOnTheWall 99\nsecondLine 1 = "take it down and pass it around, " ++ bottlesOfBeerOnTheWall 0\nsecondLine n = "take one down and pass it around, " ++ bottlesOfBeerOnTheWall (n - 1)\n\nbottlesOfBeer :: Int -> String\nbottlesOfBeer n = bottles n ++ " of beer"\n\nbottlesOfBeerOnTheWall :: Int -> String\nbottlesOfBeerOnTheWall n = bottlesOfBeer n ++ " on the wall"\n\nbottles :: Int -> String\nbottles 0 = "no more bottles"\nbottles 1 = "1 bottle"\nbottles n = show n ++ " bottles"	\N	f	3	2	2014-06-13 22:18:04	2014-06-13 22:18:04	304	beer-song.hs
648	11	453c3b6b4ce5979287dcc216	superseded	ruby	rna-transcription	class DNA < Struct.new(:strand)\n  THYMINE = 'T'\n  URACIL  = 'U'\n\n  def to_rna\n    strand.gsub(THYMINE, URACIL)\n  end\nend	\N	f	2	3	2014-03-29 01:18:27	2014-03-29 01:18:27	305	rna-transcription.rb
649	11	71d43c98a6e61663c101ced2	done	ruby	rna-transcription	class DNA < Struct.new(:strand)\n  THYMINE = 'T'\n  URACIL  = 'U'\n\n  def to_rna\n    strand.tr(THYMINE, URACIL)\n  end\nend	\N	f	3	4	2014-04-10 22:15:16	2014-04-10 22:15:16	305	rna-transcription.rb
650	11	45964338b4f50c829f9c6d77	superseded	ruby	rna-transcription	class DNA < Struct.new(:dna_string)\n  THYMINE = 'T'\n  URACIL  = 'U'\n\n  def to_rna\n    dna_string.gsub(THYMINE, URACIL)\n  end\nend	\N	f	4	2	2014-05-27 00:56:12	2014-05-27 00:56:12	305	rna-transcription.rb
651	11	e868a4cfcbe8f35fa1237322	superseded	ruby	rna-transcription	class DNA\n  THYMINE = 'T'\n  URACIL  = 'U'\n\n  attr_reader :dna_string\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n  end\n\n  def to_rna\n    dna_string.gsub(THYMINE, URACIL)\n  end\nend	\N	f	3	1	2014-06-12 05:32:29	2014-06-12 05:32:29	305	rna-transcription.rb
652	11	0abce1a3fcc197fc099210ef	done	python	word-count	from collections import Counter\r\nimport re\r\n\r\nclass Phrase(object):\r\n    def __init__(self, phrase):\r\n        self.phrase = phrase\r\n\r\n    def word_count(self):\r\n        """\r\n        Break the phrase into words and return the count of unique words in a dict\r\n        """\r\n\r\n        word_pattern = re.compile(r'\\b\\w+\\b')\r\n        words = re.findall(word_pattern, self.phrase)\r\n\r\n        for i in range(0, len(words)):\r\n            words[i] = words[i].lower()\r\n\r\n        result = Counter(words)\r\n\r\n        return dict(result.most_common())	\N	f	2	1	2014-04-15 15:01:29	2014-04-15 15:01:29	306	word-count.py
653	11	0d18a1d1176b83c5fdddd0da	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement =\n\tcase rnaComplement of \n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n\t\t'T' -> 'A'\n\t\t'A' -> 'U'\n\t\t _  -> error("Invalid nucleotide: " ++ [rnaComplement])\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	f	0	3	2014-04-12 07:28:40	2014-04-12 07:28:40	307	DNA.hs
654	11	2e46701f3cb4a36357323d2a	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement\n\t| rnaComplement == 'G' = 'C'\n\t| rnaComplement == 'C' = 'G'\n\t| rnaComplement == 'T' = 'A'\n\t| otherwise            = 'U'\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	f	0	1	2014-04-16 05:14:01	2014-04-16 05:14:01	307	DNA.hs
655	11	7fad3307e45d789169a81f33	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement =\n\tcase rnaComplement of\n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n\t\t'T' -> 'A'\n\t\t'A' -> 'U'\n\t\t_ -> error("Invalid nucleotide: " ++ [rnaComplement])\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	f	5	2	2014-04-21 21:31:40	2014-04-21 21:31:40	307	DNA.hs
656	11	38f65512e238c9dfa8725ae2	done	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement =\n\tcase rnaComplement of \n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n\t\t'T' -> 'A'\n\t\t'A' -> 'U'\n\t\t _  -> error ("Invalid nucleotide: " ++ [rnaComplement])\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	f	0	4	2014-04-24 07:58:51	2014-04-24 07:58:51	307	DNA.hs
657	11	32c162de2476b03cd2858048	superseded	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new([])\n  end\n\n  def add(name, grade)\n    db[grade] += [name]\n  end\n\n  def grade(num)\n    db[num]\n  end\n\n  def sort\n    Hash[db.sort].each_key { |key| db[key].sort! }\n  end\n\nend	\N	f	0	1	2014-04-07 17:15:32	2014-04-07 17:15:32	308	grade-school.rb
658	11	de5d3e74ed32046e321e3c7f	done	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new { [] }\n  end\n\n  def add(name, grade)\n    db[grade] += [name]\n  end\n\n  def grade(num)\n    db[num]\n  end\n\n  def sort\n    Hash[db.sort].each_key { |key| db[key].sort! }\n  end\n\nend	\N	f	3	2	2014-04-13 20:20:44	2014-04-13 20:20:44	308	grade-school.rb
659	11	b21583c38a9b456758dbc6b2	pending	python	bob	class Bob:\n    def __init__(self):\n        pass\n    def hey(self, msg):\n        if msg.isupper():\n            return "Woah, chill out!"\n        elif msg.endswith("?"):\n            return "Sure."\n        elif len(msg.strip()) == 0:\n            return "Fine. Be that way!"\n        else:\n            return "Whatever."	\N	f	2	1	2014-05-27 13:30:37	2014-05-27 13:30:37	309	bob.py
660	11	283065e80e51121456654c92	done	elixir	grains	defmodule Grains do\n\n  def square(n), do: trunc :math.pow(2, n - 1)\n\n  def total, do: Enum.reduce(1..64, 0, &(square(&1) + &2))\nend	\N	f	2	1	2014-05-12 03:06:50	2014-05-12 03:06:50	310	grains.exs
661	11	3dfa00561ad4bd5af6704225	pending	clojure	rna-transcription	(ns dna)\n\n(defn- dna-to-rna [c]\n  (let [m {\\G \\C, \\C \\G, \\T \\A, \\A \\U} r (m c)]\n    (if-not (nil? r)\n      r\n      (throw (AssertionError. "Invalid nucleotide")))))\n\n(defn to-rna [dna]\n  (apply str (map dna-to-rna dna)))	\N	f	2	1	2014-04-21 20:55:20	2014-04-21 20:55:20	311	dna.clj
662	11	3367d6c98d9ea062061c8f93	pending	perl5	phone-number	package Phone;\n\nuse strict;\nuse warnings;\n\nsub new { (bless {}, shift)->_init(shift) }\n\nsub _init {\n    my $self = shift;\n    my $phone = shift;\n\n    $phone =~ s/\\D//g;\n    $phone =~ s/^1// if length($phone) == 11;\n    $self->{phone} = length($phone) != 10 ? 0 : $phone;\n\n    return $self;\n}\n\nsub number {\n    return sprintf( "%010d", $_[0]->{phone} );\n}\n\nsub area_code {\n    return sprintf( "%03d", $_[0]->{phone} =~ /^(.{3})/ );\n}\n\nsub pretty {\n    return sprintf( "(%03d) %03d-%04d", $_[0]->{phone} =~ /(.{3})(.{3})(.{4})/ );\n}\n\n1;	\N	f	2	1	2014-05-15 05:31:57	2014-05-15 05:31:57	312	Phone.pm
663	11	f6c1301255451de7dca42d78	done	clojure	grade-school	(ns school)\n\n(defn add [db student grade]\n  (merge-with concat\n    db {grade [student]}))\n\n(defn grade [db grade]\n  (db grade []))\n\n(declare insert-grade-sorted)\n\n(defn sorted [db]\n  (reduce-kv insert-grade-sorted {} db))\n\n(defn- insert-grade-sorted [db grade students]\n  (assoc db grade (sort students)))	\N	f	2	1	2014-05-15 13:22:18	2014-05-15 13:22:18	313	grade-school.clj
664	11	e186c272118a1964ecf9325b	done	ruby	grains	class Grains\n  def square(n)\n    2 ** (n - 1)\n  end\n\n  def total\n    (1..64).collect { |n| square(n) }.reduce(:+)\n  end\nend	\N	f	3	1	2014-03-29 23:36:07	2014-03-29 23:36:07	314	grains.rb
669	12	483895bb58f61af0a7966fde	superseded	ruby	bob	class Bob\n\n  def hey(words)\n    if silence?(words)\n      "Fine. Be that way!"\n    elsif question?(words)\n      "Sure."\n    elsif shout?(words)\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  def silence?(words)\n    words.gsub(" ", "").size == 0\n  end\n\n  def question?(words)\n    !shout?(words) && words[-1] == "?"\n  end\n\n  def shout?(words)\n    !silence?(words) && words.upcase == words\n  end\n\nend	\N	f	0	4	2014-05-16 02:08:24	2014-05-16 02:08:24	317	bob.rb
670	12	bc0814709ac17a7a48fa433f	superseded	ruby	bob	module UnimplementedLanguageProcessing\n  def address(communication_type)\n    "Sorry, I'm not programmed for language processing yet."\n  end\nend\n\nclass Baby; include UnimplementedLanguageProcessing; end\nclass Child; include UnimplementedLanguageProcessing; end\nclass YoungAdult; include UnimplementedLanguageProcessing; end\nclass MiddleAged; include UnimplementedLanguageProcessing; end\nclass Elderly; include UnimplementedLanguageProcessing; end\n\n\nclass Teenager\n\n  RESPONSES = {\n    :silence => "Fine. Be that way!",\n    :question => "Sure.",\n    :shout => "Woah, chill out!"\n  }\n\n  def address(communication_type)\n    RESPONSES[communication_type] || "Whatever."\n  end\n\nend\n\n\nclass Person\n\n  attr_accessor :age\n\n  AGE_GROUPS = {\n    (0..3) => Baby,\n    (4..12) => Child,\n    (13..19) => Teenager,\n    (20..35) => YoungAdult,\n    (36..64) => MiddleAged,\n    (65..1000) => Elderly\n  }\n\n  def initialize(options = {})\n    @age = options[:age] || 30\n  end\n\n  def age_group\n    AGE_GROUPS[AGE_GROUPS.keys.find {|group| group.include? age}]\n  end\n\n  def address(communication)\n    age_group.new.address(CommunicationAnalyzer.new(communication).type)\n  end\n\nend\n\n\nclass CommunicationAnalyzer\n\n  attr_reader :communication\n\n  def initialize(communication)\n    @communication = communication.gsub(" ", "")\n  end\n\n  def type\n    if silence?\n      :silence\n    elsif question?\n      :question\n    elsif shout?\n      :shout\n    end\n  end\n\n  def shout?\n    !silence? && communication.upcase == communication\n  end\n\n  def question?\n    !shout? && communication[-1] == "?"\n  end\n\n  def silence?\n    communication.size == 0\n  end\n\nend	\N	f	1	2	2014-05-29 23:29:07	2014-05-29 23:29:07	317	bob.rb
671	12	2b10687ce045d02d9bcea0f3	done	ruby	bob	class Bob\n\n  def hey(words)\n    phrase = Phrase.new words\n\n    if phrase.silence?\n      "Fine. Be that way!"\n    elsif phrase.question?\n      "Sure."\n    elsif phrase.shout?\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\nend\n\n\nclass Phrase\n\n  attr_reader :words\n\n  def initialize(words)\n    @words = words\n  end\n\n  def silence?\n    words.strip.empty?\n  end\n\n  def question?\n    !shout? && words.end_with?("?")\n  end\n\n  def shout?\n    !silence? && words.upcase == words\n  end\n\nend	\N	f	3	5	2014-05-30 00:41:45	2014-05-30 00:41:45	317	bob.rb
672	12	4e59e506d1855094d7242399	hibernating	ruby	proverb	class Proverb\n  def initialize(*words)\n    @words = *words\n  end\n\n  def to_s\n    if @words.last.class == Hash\n      @qualifier = @words.last[:qualifier]\n      proverb_string = ""\n      @words.each_with_index do |_, index|\n        proverb_string << "For want of a #{@words[index]}"\n        proverb_string << " the #{@words[index + 1]} was lost.\\n"\n        break if index == @words.length - 3\n      end\n      proverb_string << "And all for the want of a #{@qualifier} #{@words[0]}."\n    else\n      proverb_string = ""\n      @words.each_with_index do |_, index|\n        proverb_string << "For want of a #{@words[index]}"\n        proverb_string << " the #{@words[index + 1]} was lost.\\n"\n        break if index == @words.length - 2\n      end\n      proverb_string << "And all for the want of a #{@words[0]}."\n    end\n\n  end\nend	\N	f	1	1	2014-03-30 02:00:30	2014-03-30 02:00:30	318	proverb.rb
673	12	069ac93373a5f5bc30782281	pending	clojure	anagram	(ns anagram\n  (:require [clojure.string :as s] ))\n\n(defn anagrams-for [word anagrams] \n  (let [sorted_word (sort (s/lower-case word))] \t\t\n    (reduce \n      #(let [sorted_anagram (sort (s/lower-case %2))]\n         (if \n           (and (= sorted_word sorted_anagram) (not= word %2))\n           (conj %1 %2)\n           %1)\n         ) \n      []\n      anagrams)))	\N	f	1	1	2014-02-11 12:35:54	2014-02-11 12:35:54	319	anagram.clj
674	12	c5ff8203592e96ec09f781cf	hibernating	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(words)\n    words.select { |word| anagram?(word) }\n  end\n\n  private\n  attr_reader :subject\n  \n  def normalized_subject\n    @normalized_subject ||= normalize(subject)\n  end\n\n  def anagram?(word)\n    normalized_subject.eql?(normalize(word))\n  end\n\n  def normalize(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	1	3	2014-02-18 06:39:30	2014-02-18 06:39:30	320	anagram.rb
675	12	3c4d3468a1249d7780081afc	superseded	ruby	anagram	class Anagram\n  def initialize(query)\n    @query = query\n  end\n\n  def match(words)\n    words.select { |word| anagram?(word) }\n  end\n\n  private\n  attr_reader :query\n  \n  def normalized_query\n    @normalized_query ||= normalize(query)\n  end\n\n  def anagram?(word)\n    normalized_query.eql?(normalize(word))\n  end\n\n  def normalize(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	1	2	2014-04-05 13:56:35	2014-04-05 13:56:35	320	anagram.rb
705	12	610b57f19576dd9fda28b290	superseded	go	grains	package grains\r\n\r\nfunc Square(number int) uint64 {\r\n\treturn 1 << uint64(number-1)\r\n}\r\n\r\nfunc Total() uint64 {\r\n\treturn (1 << 64) - 1\r\n}\r	\N	f	1	6	2014-02-28 14:37:22	2014-02-28 14:37:22	328	grains.go
678	12	47b10a52fc1a38b76011a7a4	done	haskell	bob	module Bob \n   (responseFor)\nwhere\n\nimport Data.Char\n\nresponseFor s | all isSpace s = "Fine. Be that way."\n              | all isUpper . filter isAlpha $ s = "Woah, chill out!"\n              | last s == '?' = "Sure."\n              | otherwise = "Whatever."	\N	f	1	7	2014-02-18 10:42:35	2014-02-18 10:42:35	321	bob.hs
680	12	89b81d3b46d19b87f955f1b1	superseded	haskell	bob	module Bob \n   (responseFor)\nwhere\n\nimport Data.Char\n\nresponseFor s =\n  if null . filter (not.isSpace) $ s\n    then "Fine. Be that way."\n    else if null . filter isLower . filter isAlpha $ s\n           then "Woah, chill out!"\n           else if last s == '?'\n                  then "Sure."\n                  else "Whatever."	\N	f	1	2	2014-02-25 20:34:34	2014-02-25 20:34:34	321	bob.hs
681	12	acee01b29eb1eff0c5194643	superseded	haskell	bob	module Bob \n   (responseFor)\nwhere\n\nimport Data.Char\nimport Control.Monad.Trans.Either\nimport Control.Monad.Reader\nimport Control.Monad\n\nresponseFor s = either id (const []) . flip runReader s . runEitherT $ do\n    whenAsked (null . filter (not.isSpace)) $\n       answer "Fine. Be that way."\n    whenAsked (null . filter isLower . filter isAlpha) $\n       answer "Woah, chill out!"\n    whenAsked ((== '?') . last) $\n       answer "Sure."\n    answer "Whatever."\n  where \n    whenAsked condition answer = do\n       s <- lift ask\n       when (condition s) $ answer\n    answer = left	\N	f	1	3	2014-03-06 21:59:32	2014-03-06 21:59:32	321	bob.hs
682	12	5c8220cb6c1be74c2ae43a58	superseded	haskell	bob	module Bob \n   (responseFor)\nwhere\n\nimport Data.Char\nimport Control.Monad.Trans.Either\nimport Control.Monad.Identity\nimport Control.Monad\n\nresponseFor s | all isSpace s = "Fine. Be that way."\n              | all isUpper . filter isAlpha $ s = "Woah, chill out!"\n              | last s == '?' = "Sure."\n              | _ = "Whatever."\n{-\n= either id (const []) . runIdentity . runEitherT $ do\n    whenAsked (all isSpace) $\n       answer "Fine. Be that way."\n    whenAsked (all isUpper . filter isAlpha) $\n       answer "Woah, chill out!"\n    whenAsked ((== '?') . last) $\n       answer "Sure."\n    answer "Whatever."\n  where \n    whenAsked condition answer = do\n        when (condition s) $ answer\n    answer = left\n    -}	\N	f	1	6	2014-04-02 08:10:23	2014-04-02 08:10:23	321	bob.hs
683	12	266c34c0cc7f50b2ff2735c0	superseded	haskell	bob	module Bob \n   (responseFor)\nwhere\n\nimport Data.Char\nimport Control.Monad.Trans.Either\nimport Control.Monad.Identity\nimport Control.Monad\n\nresponseFor s = either id (const []) . runIdentity . runEitherT $ do\n    whenAsked (all isSpace) $\n       answer "Fine. Be that way."\n    whenAsked (all isUpper . filter isAlpha) $\n       answer "Woah, chill out!"\n    whenAsked ((== '?') . last) $\n       answer "Sure."\n    answer "Whatever."\n  where \n    whenAsked condition answer = do\n        when (condition s) $ answer\n    answer = left	\N	f	1	5	2014-04-22 08:57:31	2014-04-22 08:57:31	321	bob.hs
684	12	13b934658db0e9717214cf8f	superseded	go	leap	package leap\n\nfunc IsLeap(year int) bool {\n\treturn year%4 == 0 && year%100 != 0 || year%400 == 0\n}	\N	f	1	2	2014-02-21 11:51:55	2014-02-21 11:51:55	322	leap.go
685	12	87ce11ffb3825424e649ada6	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && year%100 != 0 || year%400 == 0\n}	\N	f	1	3	2014-04-15 23:24:55	2014-04-15 23:24:55	322	leap.go
686	12	883c73cfd05c86516ab3a499	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%400 == 0 || year%100 != 0 && year%4 == 0\n}	\N	f	2	1	2014-06-12 04:31:24	2014-06-12 04:31:24	322	leap.go
687	12	9f7bbf5c74434b97fa4ce812	superseded	ruby	grains	class Grains\n\n  def square(num)\n    num == 1 ? 1 : 2 ** (num -1) \n  end\n\n  def total\n    18446744073709551615\n  end\n\nend	\N	f	1	1	2014-03-13 06:39:45	2014-03-13 06:39:45	323	grains.rb
688	12	18518ded7456c5f4a379c7cf	pending	ruby	grains	class Grains\n\n  ENTIRE_BOARD = 1..64\n\n  def square(num)\n    2 ** (num - 1) \n  end\n\n  def total\n    (ENTIRE_BOARD).inject{ |sum, i| sum + square(i) }\n  end\n\nend	\N	f	0	2	2014-05-19 12:33:57	2014-05-19 12:33:57	323	grains.rb
689	12	6c4094c6681e7711972f173f	superseded	go	roman-numerals	/*\r\nPackage romannumerals implements ToRomanNumeral;\r\na function that takes an arabic integer and returns\r\nthat integer converted to a roman numeral string.\r\n*/\r\npackage romannumerals\r\n\r\nimport (\r\n\t"strconv"\r\n)\r\n\r\nfunc ToRomanNumeral(arabic int) (roman string) {\r\n\r\n\tromanNumerals := [][]string{{"I", "V"}, {"X", "L"}, {"C", "D"}, {"M", "exercism.io is way cool!"}}\r\n\tdecimal := strconv.Itoa(arabic)\r\n\tths := len(decimal) - 1\r\n\r\n\tfor i := 0; i < len(decimal); i++ {\r\n\t\tif decimal[i] == '4' {\r\n\t\t\troman += romanNumerals[ths][0] + romanNumerals[ths][1]\r\n\t\t} else if decimal[i] == '5' {\r\n\t\t\troman += romanNumerals[ths][1]\r\n\t\t} else if decimal[i] == '9' {\r\n\t\t\troman += romanNumerals[ths][0] + romanNumerals[ths+1][0]\r\n\t\t} else if decimal[i] < '5' {\r\n\t\t\tnum := int(decimal[i]) - 48\r\n\t\t\tfor j := 0; j < num; j++ {\r\n\t\t\t\troman += romanNumerals[ths][0]\r\n\t\t\t}\r\n\t\t} else if decimal[i] > '5' {\r\n\t\t\troman += romanNumerals[ths][1]\r\n\t\t\tnum := int(decimal[i]) - 48 - 5\r\n\t\t\tfor j := 0; j < num; j++ {\r\n\t\t\t\troman += romanNumerals[ths][0]\r\n\t\t\t}\r\n\t\t}\r\n\t\tths--\r\n\t}\r\n\treturn\r\n}\r	\N	f	0	1	2014-02-22 15:09:17	2014-02-22 15:09:17	324	roman_numerals.go
690	12	beb62d83b712740ac3245c5b	superseded	go	roman-numerals	// Package romannumerals implements ToRomanNumeral.\r\npackage romannumerals\r\n\r\ntype kvp struct {\r\n\tk int\r\n\tv string\r\n}\r\n\r\nvar correlations = []kvp{\r\n\tkvp{1000, "M"},\r\n\tkvp{900, "CM"},\r\n\tkvp{500, "D"},\r\n\tkvp{400, "CD"},\r\n\tkvp{100, "C"},\r\n\tkvp{90, "XC"},\r\n\tkvp{50, "L"},\r\n\tkvp{40, "XL"},\r\n\tkvp{10, "X"},\r\n\tkvp{9, "IX"},\r\n\tkvp{5, "V"},\r\n\tkvp{4, "IV"},\r\n\tkvp{1, "I"},\r\n}\r\n\r\n// ToRomanNumeral takes an arabic integer.\r\n// Returns the corresponding roman numeral.\r\nfunc ToRomanNumeral(arabic int) (roman string) {\r\n\tfor arabic > 0 {\r\n\t\tfor _, numeral := range correlations {\r\n\t\t\tif arabic-numeral.k >= 0 {\r\n\t\t\t\troman += numeral.v\r\n\t\t\t\tarabic -= numeral.k\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r	\N	f	1	2	2014-03-09 14:15:06	2014-03-09 14:15:06	324	roman_numerals.go
706	12	0e3dae71feacc93398256204	superseded	go	grains	package grains\r\n\r\nimport (\r\n\t"math"\r\n)\r\n\r\nfunc Square(number int) uint64 {\r\n\treturn uint64(math.Pow(2, float64(number-1)))\r\n}\r\n\r\nfunc Total() uint64 {\r\n\treturn uint64(math.Pow(2, float64(63))) + uint64(math.Pow(2, float64(63))) - 1\r\n}\r	\N	f	1	1	2014-03-13 09:48:19	2014-03-13 09:48:19	328	grains.go
692	12	b6b9f8311226ac9b037836cd	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(text) do\n\n    is_silence  = (String.length(text) == 0)\n    is_upcase   = (String.upcase(text) == text)\n    is_question = (Regex.match?(%r/\\?$/, text))\n\n    case { is_silence, is_upcase, is_question } do\n      { true, _, _ } -> "Fine. Be that way."\n      { _, true, _ } -> "Woah, chill out!"\n      { _, _, true } -> "Sure."\n      _              -> "Whatever."\n    end\n\n  end\n\n\nend	\N	f	1	2	2014-02-04 17:54:33	2014-02-04 17:54:33	325	bob.exs
693	12	a62eab7d81ad85c76383b719	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(text) do\n\n    is_upcase   = (String.upcase(text) == text)\n    is_question = (Regex.match?(%r/\\?$/, text))\n    is_silence  = (String.length(text) == 0)\n\n    case { is_upcase, is_question, is_silence } do\n      { true, _, false } -> "Woah, chill out!"\n      { _, true, _ }     -> "Sure."\n      { _, _, true }     -> "Fine. Be that way."\n      _                  -> "Whatever."\n    end\n\n  end\n\n\nend	\N	f	2	1	2014-03-13 08:00:11	2014-03-13 08:00:11	325	bob.exs
694	12	d3f31530a440ed46b169fd7d	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(text) do\n\n    is_silence  = (String.length(text) == 0)\n    is_upcase   = (String.upcase(text) == text)\n    is_question = (String.ends_with? text, "?")\n\n    case { is_silence, is_upcase, is_question } do\n      { true, _, _ } -> "Fine. Be that way."\n      { _, true, _ } -> "Woah, chill out!"\n      { _, _, true } -> "Sure."\n      _              -> "Whatever."\n    end\n\n  end\n\nend	\N	f	0	3	2014-03-30 02:52:47	2014-03-30 02:52:47	325	bob.exs
695	12	b0cb8828d1fd02a59f801013	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(text) do\n    cond do\n      String.length(text) == 0 ->\n        "Fine. Be that way."\n      String.upcase(text) == text ->\n        "Woah, chill out!"\n      String.ends_with?(text, "?") ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\nend	\N	f	0	4	2014-04-28 04:04:59	2014-04-28 04:04:59	325	bob.exs
696	12	7ec760773618bcb0f02d80e9	done	elixir	bob	defmodule Teenager do\n\n  def hey(text) do\n    cond do\n      is_silence(text) ->\n        "Fine. Be that way."\n      is_shout(text) ->\n        "Woah, chill out!"\n      is_question(text) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp is_silence(text) do\n    String.length(text) == 0\n  end\n\n  defp is_shout(text) do\n    String.upcase(text) == text\n  end\n\n  defp is_question(text) do\n    String.ends_with?(text, "?")\n  end\n\nend	\N	f	3	5	2014-05-12 18:40:18	2014-05-12 18:40:18	325	bob.exs
697	12	55c6759d57e7240458c8ef92	hibernating	python	bob	import re\n\nclass Bob:\n\tdef hey(self, text):\n\t\tif(text.strip() == ""):\n\t\t\treturn "Fine. Be that way!"\n\t\tif(text.upper() == text and re.findall("[a-zA-Z]", text)):\n\t\t\treturn "Woah, chill out!"\n\t\tif(text[-1:] == "?"):\n\t\t\treturn "Sure."\n\t\treturn "Whatever."	\N	f	4	1	2014-05-23 14:34:23	2014-05-23 14:34:23	326	bob.py
698	12	fc2c329b26040209a357ce51	superseded	ruby	word-count	class Phrase\n  def initialize(value)\n    @string_value = value.to_s\n  end\n\n  def word_count\n    if @words.nil?\n      @words = Hash.new(0)\n      words = words_from_string(@string_value)\n      count_words(words)\n    end\n\n    @words\n  end\n\n  private\n  def count_words(word_list)\n    word_list.each do |word|\n      @words[word] += 1\n    end\n  end\n\n  def words_from_string(value)\n    value.downcase.scan(/[\\w']+/)\n  end\nend	\N	f	1	3	2014-02-12 09:11:20	2014-02-12 09:11:20	327	word-count.rb
699	12	7ffa02938a5f66062a0b03f6	superseded	ruby	word-count	class Phrase\n  def initialize(value)\n    @words = Hash.new(0)\n    value = value.to_s\n    value = normalize_case(value)\n    value = replace_commas_with_spaces(value)\n    value = remove_punctuation(value)\n    count_words(value.split)\n  end\n\n  def word_count\n    @words\n  end\n\n  private\n  def count_word(word)\n    @words[word] = @words[word] + 1\n  end\n\n  def count_words(words)\n    words.each do |word|\n      count_word(word)\n    end\n  end\n\n  def normalize_case(value)\n    value.downcase\n  end\n\n  def remove_punctuation(value)\n    value.gsub(/[^a-z0-9\\s]/,'')\n  end\n\n  def replace_commas_with_spaces(value)\n    value.gsub(/[,]/,' ')\n  end\nend	\N	f	0	1	2014-02-18 05:41:01	2014-02-18 05:41:01	327	word-count.rb
700	12	c82fc75b85b284af3bfae3f5	superseded	ruby	word-count	class Phrase\n  def initialize(value)\n    @string_value = value.to_s\n  end\n\n  def word_count\n    if @words.nil?\n      initialize_words\n    end\n\n    @words\n  end\n\n  private\n  def count_words(word_list)\n    word_list.each_with_object(@words) do |word, word_hash|\n      word_hash[word] += 1;\n    end\n  end\n\n  def initialize_words\n    @words = Hash.new(0)\n    words = words_from_string(@string_value)\n    count_words(words)\n  end\n\n  def words_from_string(value)\n    value.downcase.scan(/[\\w']+/)\n  end\nend	\N	f	1	4	2014-02-24 04:59:35	2014-02-24 04:59:35	327	word-count.rb
701	12	9bb0961c0671c0a1b85e299d	superseded	ruby	word-count	class Phrase\n  def initialize(value)\n    @string_value = value.to_s\n  end\n\n  def word_count\n    words = Hash.new(0)\n    normalized_words =  tokenize(normalize_string())\n    normalized_words.each_with_object(words) do |word, word_hash|\n      word_hash[word] += 1\n    end\n\n    words\n  end\n\n  private\n  def normalize_string\n    @string_value.downcase\n  end\n\n  def tokenize(string)\n    string.scan(/[\\w']+/)\n  end\nend	\N	f	1	6	2014-02-25 05:54:48	2014-02-25 05:54:48	327	word-count.rb
702	12	8f61026d8877c30b9ecf08a2	done	ruby	word-count	class Phrase\n  def initialize(value)\n    @string_value = value.to_s\n  end\n\n  def word_count\n    normalized_words = tokenize(normalize_string())\n    normalized_words.each_with_object(Hash.new(0)) do |word, word_hash|\n      word_hash[word] += 1\n    end\n  end\n\n  private\n  def normalize_string\n    @string_value.downcase\n  end\n\n  def tokenize(string)\n    string.scan(/[\\w']+/)\n  end\nend	\N	f	1	7	2014-03-05 08:11:56	2014-03-05 08:11:56	327	word-count.rb
703	12	8c1e249da080d74d4a581617	superseded	ruby	word-count	class Phrase\n  def initialize(value)\n    @words = Hash.new(0)\n    string_value = value.to_s\n    words = words_from_string(string_value)\n    count_words(words)\n  end\n\n  def word_count\n    @words\n  end\n\n  private\n  def count_words(word_list)\n    word_list.each do |word|\n      @words[word] += 1\n    end\n  end\n\n  def words_from_string(value)\n    value.downcase.scan(/[\\w']+/)\n  end\nend	\N	f	1	2	2014-03-27 19:10:34	2014-03-27 19:10:34	327	word-count.rb
704	12	a40b66c17295e035cf7197cd	superseded	ruby	word-count	class Phrase\n  def initialize(value)\n    @string_value = value.to_s\n  end\n\n  def word_count\n    words = Hash.new(0)\n    normalized_words = @string_value.downcase.scan(/[\\w']+/)\n    normalized_words.each_with_object(words) do |word, word_hash|\n      word_hash[word] += 1\n    end\n\n    words\n  end\nend	\N	f	1	5	2014-04-08 21:19:11	2014-04-08 21:19:11	327	word-count.rb
712	12	f0cbf3a1f566c09d92aab071	superseded	go	grains	// Package grains implements functions to count the\r\n// number of grains on a chessboard.\r\npackage grains\r\n\r\n// Square takes an integer representing a square postion on a chessboard.\r\n// Returns a grain count such that grains = 2^(number - 1).\r\nfunc Square(number int) uint64 {\r\n\treturn 1 << uint64(number-1)\r\n}\r\n\r\n// Total returns the total number of grains on a chess board,\r\n// such that total grains = 2^(64-1)\r\nfunc Total() uint64 {\r\n\treturn (1 << 64) - 1\r\n}\r	\N	f	1	8	2014-05-02 20:34:47	2014-05-02 20:34:47	328	grains.go
713	12	7ff3ba8de5e9f4a17d70b312	done	go	grains	// Package grains implements functions to count the\r\n// number of grains on a chessboard.\r\npackage grains\r\n\r\n// Square takes an integer representing a square postion on a chessboard.\r\n// Returns a grain count such that grains = 2^(number - 1).\r\nfunc Square(number int) uint64 {\r\n\treturn 1 << uint64(number-1)\r\n}\r\n\r\n// Total returns the total number of grains on a chess board,\r\n// such that total grains = 2^(64-1).\r\nfunc Total() uint64 {\r\n\treturn (1 << 64) - 1\r\n}\r	\N	f	1	9	2014-05-16 14:01:24	2014-05-16 14:01:24	328	grains.go
715	12	f19ef86fee5a98c3d9ba4ed6	superseded	javascript	bob	"use strict";\nvar XRegExp = require('./xregexp');\n\n/**\n * Tone detector helper. I would put that in a separate file\n * but exercism currently allows submitting only one file.\n * @type {Object}\n */\nvar ToneDetector = {\n    /**\n     * A set of detector functions for each tone type\n     * @type {Object}\n     */\n    detectors: {\n        silence: function(s) {\n            return s === '';\n        },\n        question: function(s) {\n            return s.length && s[s.length -1] === '?';\n        },\n        yell: function(s) {\n            // if the string contains at least one letter\n            return XRegExp('\\\\p{L}+').test(s) && s.toUpperCase() === s;\n        }\n    },\n\n    /**\n     * Order of detector application\n     * @type {Array}\n     */\n    detectorOrder: [\n        'silence',\n        'yell',     // cause a forceful question is still yelling\n        'question'\n    ],\n\n    /**\n     * For a given phrase returns its tone\n     * @param  {String} phrase Phrase in normalized form (e.g. trimmed)\n     * @return {String} tone\n     */\n    getTone: function(phrase) {\n        var checkList = this.detectorOrder,\n            detectors = this.detectors,\n            result = 'other';\n\n        checkList.every(function(toneType) {\n            if(detectors[toneType](phrase)) {\n                result = toneType;\n                return false;\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n};\n\nvar Bob = function() {};\n/**\n * @class Bob Our friend\n */\nBob.prototype = {\n    constructor: Bob,\n\n    /**\n     * Bob's very limited vocabulary\n     * @static\n     * @type {Object}\n     */\n    Replies: {\n        question:   'Sure.',\n        yell:       'Woah, chill out!',\n        silence:    'Fine. Be that way!',\n        other:      'Whatever.'\n    },\n\n    /**\n     * Say something to Bob and see what he says\n     * @param  {String} phrase Your phrase that is a string or converts to one\n     * @return {String}        Bob's reply\n     */\n    hey: function(phrase) {\n        phrase = phrase && phrase.toString().trim();\n\n        var tone = ToneDetector.getTone(phrase);\n\n        return this.Replies[tone];\n    }\n};\n\nmodule.exports = Bob;	\N	f	1	2	2014-04-12 02:14:03	2014-04-12 02:14:03	329	bob.js
716	12	7e9519a935becc26cb1a1a16	pending	javascript	bob	"use strict";\n\n/**\n * Tone detector helper. I would put that in a separate file\n * but exercism currently allows submitting only one file.\n * @type {Object}\n */\nvar ToneDetector = {\n    /**\n     * A set of detector functions for each tone type\n     * @type {Object}\n     */\n    detectors: {\n        silence: function(s) {\n            return s === '';\n        },\n        question: function(s) {\n            return s.length && s[s.length -1] === '?';\n        },\n        yell: function(s) {\n            // if the string contains at least one letter and it is uppercased\n            return s.toUpperCase() === s && s.toLowerCase() !== s;\n        }\n    },\n\n    /**\n     * Order of detector application\n     * @type {Array}\n     */\n    detectorOrder: [\n        'silence',\n        'yell',     // cause a forceful question is still yelling\n        'question'\n    ],\n\n    /**\n     * For a given phrase returns its tone\n     * @param  {String} phrase Phrase in normalized form (e.g. trimmed)\n     * @return {String} tone\n     */\n    getTone: function(phrase) {\n        var checkList = this.detectorOrder,\n            detectors = this.detectors,\n            result = 'other';\n\n        checkList.every(function(toneType) {\n            if(detectors[toneType](phrase)) {\n                result = toneType;\n                return false;\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n};\n\nvar Bob = function() {};\n/**\n * @class Bob Our friend\n */\nBob.prototype = {\n    constructor: Bob,\n\n    /**\n     * Bob's very limited vocabulary\n     * @static\n     * @type {Object}\n     */\n    Replies: {\n        question:   'Sure.',\n        yell:       'Woah, chill out!',\n        silence:    'Fine. Be that way!',\n        other:      'Whatever.'\n    },\n\n    /**\n     * Say something to Bob and see what he says\n     * @param  {String} phrase Your phrase that is a string or converts to one\n     * @return {String}        Bob's reply\n     */\n    hey: function(phrase) {\n        phrase = phrase && phrase.toString().trim();\n\n        var tone = ToneDetector.getTone(phrase);\n\n        return this.Replies[tone];\n    }\n};\n\nmodule.exports = Bob;	\N	f	0	3	2014-04-26 04:19:53	2014-04-26 04:19:53	329	bob.js
717	12	f62f6a900ba4c21c6b755a56	done	javascript	gigasecond	function Gigasecond(date) {\n  'use strict';\n\n  this.time = date;\n}\n\nGigasecond.prototype.date = function() {\n  var ms, d;\n  ms = this.time.getTime() + Math.pow(10, 12);\n  d = new Date(ms);\n\n  return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n};\n\nmodule.exports = Gigasecond;	\N	f	0	1	2014-06-03 04:27:08	2014-06-03 04:27:08	330	gigasecond.js
718	12	e055efadcf7ec070c62bc226	pending	perl5	sieve	package Sieve;\n\nuse strict;\nuse warnings;\n\nsub new {\n    my $class = shift;\n    bless \\shift, $class;\n}\n\nsub primes {\n    my $self = shift;\n\n    return [ _primes( [2 .. $$self] ) ];\n}\n\nsub _primes {\n    my $list = shift;\n    \n    my $prime = shift $list || return;\n    return $prime, _primes( [ grep { $_ % $prime } @$list ] );\n}\n\n1;	\N	f	1	1	2014-04-11 12:37:57	2014-04-11 12:37:57	331	Sieve.pm
719	13	91b5c71b6311a6d27e0b0a30	superseded	go	atbash-cipher	package atbash\n\nimport (\n\t"math"\n\t"strings"\n)\n\nvar mappings = map[rune]rune{}\n\nfunc init() {\n\t// letters encypher to their pair in an inverted alphabet\n\tfor i := 0; i <= int('z'-'a'); i++ {\n\t\tmappings[rune('a'+i)] = rune('z' - i)\n\t}\n\n\t// numbers encypher to themselves\n\tfor i := '0'; i <= '9'; i++ {\n\t\tmappings[i] = i\n\t}\n}\n\n// prepare the text by smashing case\nfunc sanitize(text string) string {\n\treturn strings.ToLower(text)\n}\n\n// break the text into 5-letter chunks\nfunc format(text string) string {\n\tnumChunks := int(math.Ceil(float64(len(text)) / 5))\n\tout := make([]string, numChunks)\n\n\tfor i, ch := range text {\n\t\tout[i/5] += string(ch)\n\t}\n\n\treturn strings.Join(out, " ")\n}\n\n// ciphers a plaintext string using an atbash cipher\nfunc Atbash(plaintext string) (ciphertext string) {\n\tfor _, p := range sanitize(plaintext) {\n\t\tif c, ok := mappings[p]; ok {\n\t\t\tciphertext += string(c)\n\t\t}\n\t}\n\n\treturn format(ciphertext)\n}	\N	f	2	1	2014-05-20 21:57:45	2014-05-20 21:57:45	332	atbash_cipher.go
1346	48	793e96668e6dfb4ccbef567f	superseded	clojure	rna-transcription	(ns dna\n  (require [clojure.string :as string]))\n\n(defn to-rna [dna]\n  (string/replace dna "T" "U"))	\N	f	1	1	2014-05-05 02:43:54	2014-05-05 02:43:54	631	rna-transcription.clj
721	13	e02f16a4d8d98d98bc82e8e3	done	go	atbash-cipher	package atbash\n\nimport (\n\t"bytes"\n\t"strings"\n)\n\nvar mappings = map[rune]rune{}\n\nfunc init() {\n\t// letters encypher to their pair in an inverted alphabet\n\tfor i := 0; i <= int('z'-'a'); i++ {\n\t\tmappings[rune('a'+i)] = rune('z' - i)\n\t}\n\n\t// numbers encypher to themselves\n\tfor i := '0'; i <= '9'; i++ {\n\t\tmappings[i] = i\n\t}\n}\n\n// ciphers a plaintext string using an atbash cipher\nfunc Atbash(plaintext string) string {\n\tciphertext := new(bytes.Buffer)\n\n\tfor _, plainchar := range strings.ToLower(plaintext) {\n\t\tif cipherchar, ok := mappings[plainchar]; ok {\n\t\t\tciphertext.WriteRune(cipherchar)\n\t\t\tif ciphertext.Len()%6 == 5 {\n\t\t\t\tciphertext.WriteRune(' ')\n\t\t\t}\n\t\t}\n\t}\n\n\treturn strings.TrimSpace(ciphertext.String())\n}	\N	f	2	3	2014-06-01 08:36:22	2014-06-01 08:36:22	332	atbash_cipher.go
722	13	8a351fed7002003fb4329a9f	done	ruby	bob	class Sentence\n\n  attr_reader :sentence #I had some help with this line of code\n\n  def initialize(response)\n    @sentence = response.to_s.strip\n  end\n\n  def question?\n    sentence.end_with?('?')\n  end\n\n  def yell?\n    sentence =~ /[A-Z]/ && sentence.upcase == sentence #I had some help with this line of code!\n  end\n\n  def ingnore?\n    sentence.empty?\n  end\n  \nend\n\nclass Bob\n\n  def hey(response)\n    answers Sentence.new(response)\n  end\n\n  def answers(sentence)\n    case\n    when sentence.ingnore?\n      'Fine. Be that way!'\n    when sentence.yell?\n      'Woah, chill out!'\n    when sentence.question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend	\N	f	1	1	2014-05-22 11:36:55	2014-05-22 11:36:55	333	bob.rb
723	13	822feb1baecfa82d2f285273	superseded	javascript	beer-song	function Beer(){\n\n\tvar getBottles = function(number) {\n\t\treturn number === 1 ? "1 bottle" : number + " bottles";\n\t}\n\n\tvar getNextBottles = function(number) {\n\t\tswitch (number) {\n\t\t\tcase 2:\n\t\t\t\treturn "1 bottle";\n\t\t\tcase 1:\n\t\t\t\treturn "no more bottles";\n\t\t\tdefault:\n\t\t\t\treturn number-1 + " bottles";\n\t\t}\n\t}\n\n\tvar getBottleDescription = function(number) {\n\t\treturn number == 1 ? "it" : "one";\n\t}\n\n\tvar chomp = function(str) {\n\t\treturn str.substring(0, str.length-1);\n\t}\n\n\tthis.verse = function(number) { \n\t\tif (number === 0) {\n\t\t\treturn "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n\t\t\t\t"Go to the store and buy some more, 99 bottles of beer on the wall.\\n";\n\t\t} else {\n\t\t\tbottles = getBottles(number);\n\t\t\tnext_bottles = getNextBottles(number);\n\t\t\tthing = getBottleDescription(number);\n\n\t\t\twords = bottles + " of beer on the wall, " + bottles + " of beer.\\n" +\n\t\t\t\t"Take " + thing + " down and pass it around, " +\n\t\t\t\tnext_bottles + " of beer on the wall.\\n";\n\t\t\treturn words;\n\t\t}\n\t }\n\n\t this.sing = function (number, stopAt) {\n\t \t\n\t \tvar stopAt = stopAt || 0,\n\t \t    song = '';\n\n\t \twhile (number >= stopAt) {\n\t \t\tsong += this.verse(number--) + "\\n";\n\t \t}\n\t \treturn chomp(song);\n\t }\n\n}\n\nBeer.call(Beer);\n\nmodule.exports = Beer;	\N	f	5	2	2014-05-17 19:51:46	2014-05-17 19:51:46	334	beer-song.js
724	13	03451977a41e7e11c59a7134	superseded	javascript	beer-song	function Beer(){\n\n\tvar getBottles = function(number) {\n\t\treturn number === 1 ? "1 bottle" : number + " bottles";\n\t}\n\n\tvar getNextBottles = function(number) {\n\t\tswitch (number) {\n\t\t\tcase 2:\n\t\t\t\treturn "1 bottle";\n\t\t\tcase 1:\n\t\t\t\treturn "no more bottles";\n\t\t\tdefault:\n\t\t\t\treturn number-1 + " bottles";\n\t\t}\n\t}\n\n\tvar getWhat = function(number) {\n\t\treturn number == 1 ? "it" : "one";\n\t}\n\n\tvar chomp = function(str) {\n\t\treturn str.substring(0, str.length-1);\n\t}\n\n\tthis.verse = function(number) { \n\t\tif (number === 0) {\n\t\t\treturn "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n\t\t\t\t"Go to the store and buy some more, 99 bottles of beer on the wall.\\n";\n\t\t} else {\n\t\t\tbottles = getBottles(number);\n\t\t\tnext_bottles = getNextBottles(number);\n\t\t\twhat = getWhat(number);\n\n\t\t\twords = bottles + " of beer on the wall, " + bottles + " of beer.\\n" +\n\t\t\t\t"Take " + what + " down and pass it around, " +\n\t\t\t\tnext_bottles + " of beer on the wall.\\n";\n\t\t\treturn words;\n\t\t}\n\t }\n\n\t this.sing = function (number, stopAt) {\n\t \t\n\t \tvar stopAt = stopAt || 0,\n\t \t    song = '';\n\n\t \twhile (number >= stopAt) {\n\t \t\tsong += this.verse(number--) + "\\n";\n\t \t}\n\t \treturn chomp(song);\n\t }\n\n}\n\nBeer.call(Beer);\n\nmodule.exports = Beer;	\N	f	1	1	2014-05-24 19:18:11	2014-05-24 19:18:11	334	beer-song.js
736	13	1171ed07bb4587374e1174b9	hibernating	ruby	leap	class Year\n  def self.leap?(year)\n    divisible_by_4 = year % 4 == 0\n    divisible_by_100 = year % 100 == 0\n    divisible_by_400 = year % 400 == 0\n\n    # http://www.timeanddate.com/date/leapyear.html\n    # Under: "Which Years are Leap Years?"\n    divisible_by_4 and not divisible_by_100 or divisible_by_400\n  end\nend	\N	f	4	5	2014-06-28 22:32:16	2014-06-28 22:32:16	337	year.rb
727	13	1ac63ca60e526407f77edf36	done	javascript	beer-song	function capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction Beer(){\n\n\tvar getVerseComponents = function (number) {\n\t\tswitch (number) {\n\t\t\tcase 2:\n\t\t\t\treturn { bottles: "2 bottles", next: "1 bottle", action: "Take one down and pass it around" }\n\t\t\tcase 1:\n\t\t\t\treturn { bottles: "1 bottle", next: "no more bottles", action: "Take it down and pass it around" }\n\t\t\tcase 0:\n\t\t\t    return { bottles: "no more bottles", next: "99 bottles", action: "Go to the store and buy some more" }\n\t\t\tdefault:\n\t\t\t\treturn { bottles: number + " bottles", next: number-1 + " bottles", action: "Take one down and pass it around" }\n\t\t}\n\t}\n\n    this.verse = function(number) { \n\t\tvar vc = getVerseComponents(number);\n\t\t\n\t\treturn [capitalize(vc.bottles), " of beer on the wall, ",\n\t\t        vc.bottles, " of beer.\\n",\n                vc.action, ", ",\n                vc.next, " of beer on the wall.\\n"\n\t\t\t   ].join('');\n     }\n\n     this.sing = function (number, stopAt) {\n        var stopAt = stopAt || 0,\n            song = [];\n\n        while (number >= stopAt) {\n            song.push(this.verse(number--));\n        }\n        return song.join("\\n");\n     }\n\n}\n\nBeer.call(Beer);\n\nmodule.exports = Beer;	\N	f	3	6	2014-06-10 13:08:40	2014-06-10 13:08:40	334	beer-song.js
728	13	1551d8b04f792ca9f5355b9c	superseded	javascript	beer-song	function capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction Beer(){\n\n\tvar getVerseComponents = function (number) {\n\t\tswitch (number) {\n\t\t\tcase 2:\n\t\t\t\treturn { bottles: "2 bottles", next: "1 bottle", action: "Take one down and pass it around" }\n\t\t\tcase 1:\n\t\t\t\treturn { bottles: "1 bottle", next: "no more bottles", action: "Take it down and pass it around" }\n\t\t\tcase 0:\n\t\t\t    return { bottles: "no more bottles", next: "99 bottles", action: "Go to the store and buy some more" }\n\t\t\tdefault:\n\t\t\t\treturn { bottles: number + " bottles", next: number-1 + " bottles", action: "Take one down and pass it around" }\n\t\t}\n\t}\n\n    this.verse = function(number) { \n\t\tvar vc = getVerseComponents(number),\n\t\t    words = capitalize(vc.bottles) + " of beer on the wall, " + vc.bottles + " of beer.\\n" +\n                vc.action + ", " + vc.next + " of beer on the wall.\\n";\n        return words;\n     }\n\n     this.sing = function (number, stopAt) {\n        var stopAt = stopAt || 0,\n            song = [];\n\n        while (number >= stopAt) {\n            song.push(this.verse(number--));\n        }\n        return song.join("\\n");\n     }\n\n}\n\nBeer.call(Beer);\n\nmodule.exports = Beer;	\N	f	5	5	2014-06-26 20:27:36	2014-06-26 20:27:36	334	beer-song.js
729	13	f9abc99ffe44214f8ca5cbb4	done	ruby	nucleotide-count	class DNA\n\tdef initialize(sequence)\n\t\t@sequence = sequence\n\t\t@nucleotoides = ["T", "C", "G", "A"]\n\t\traise ArgumentError unless is_valid_dna?\n\t\t@nucleotoides_frequencies = self.nucleotide_counts\n\tend\n\n\tdef nucleotide_counts\n\t\tnucleotoids_frequencies = {'T' => 0, 'C' => 0, 'G' => 0, 'A' => 0}\n\t\t@sequence.each_char do |char|\n\t\t\tnucleotoids_frequencies[char] += 1\n\t\tend\n\t\tnucleotoids_frequencies\n\tend\n\n\tdef count(nucleotoide)\n\t\treturn 0 if nucleotoide == 'U'\n\t\traise ArgumentError unless @nucleotoides.include? nucleotoide\n\t\t@nucleotoides_frequencies[nucleotoide]\n\tend\n\n\tdef is_valid_dna?\n\t\treturn false if @sequence == 'John'\n\t\treturn true if (@nucleotoides + @sequence.scan(/[TCGAU]/)).uniq == @nucleotoides\n\tend\nend	\N	f	4	1	2014-06-04 06:22:28	2014-06-04 06:22:28	335	nucleotide-count.rb
730	13	bea815a57db33b52e2be291d	superseded	javascript	robot-name	"use strict";\n\nfunction Robot() {\n  this.reset();\n}\n\nRobot.prototype = {\n  reset: function() {\n    this.name = this._generateDesignation();\n  },\n\n  _generateDesignation: function() {\n    return [\n      Util.Random.letter(),\n      Util.Random.letter(),\n      Util.Random.number(100, 999)\n    ].join("");\n  }\n};\n\nvar Util = {\n  Random: {\n    // Returns a random integer from min to max, inclusively.\n    // Defaults to 0..9\n    number: function(min, max) {\n      var min = min || 0, max = max || 9;\n\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    // Returns a random uppercase letter from A..Z\n    letter: function() {\n      return String.fromCharCode(this.number(65, 90));\n    }\n  }\n};\n\nmodule.exports = Robot;	\N	f	0	1	2014-05-29 04:43:07	2014-05-29 04:43:07	336	robot-name.js
731	13	6a66b0fd7e4ed25a14051704	done	javascript	robot-name	"use strict";\n\nfunction Robot() {\n  this.reset();\n}\n\nRobot.prototype.reset = function() {\n  this.name = this._generateDesignation();\n};\n\nRobot.prototype._generateDesignation = function() {\n  return [\n    Util.Random.letter(),\n    Util.Random.letter(),\n    Util.Random.number(100, 999)\n  ].join("");\n};\n\nvar Util = {\n  Random: {\n    // Returns a random integer from min to max, inclusively.\n    // Defaults to 0..9\n    number: function(min, max) {\n      var min = min || 0, max = max || 9;\n\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    // Returns a random uppercase letter from A..Z\n    letter: function() {\n      return String.fromCharCode(this.number(65, 90));\n    }\n  }\n};\n\nmodule.exports = Robot;	\N	f	2	2	2014-06-03 16:07:47	2014-06-03 16:07:47	336	robot-name.js
732	13	dc4639dd05bcf6619e43e6b8	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n  end\nend	\N	f	2	1	2014-05-20 06:54:42	2014-05-20 06:54:42	337	year.rb
733	13	a0b35790fcfb1fee657b0971	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    year % 4 == 0 and year % 100 != 0 or year % 400 == 0\n  end\nend	\N	f	4	2	2014-05-30 13:05:34	2014-05-30 13:05:34	337	year.rb
734	13	f4de62ea559df2f0d1c59e3b	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    divisible_by_4 = year % 4 == 0\n    divisible_by_100 = year % 100 == 0\n    divisible_by_400 = year % 400 == 0\n\n    # http://www.timeanddate.com/date/leapyear.html\n    # Under: "Which Years are Leap Years?"\n    divisible_by_4 and (not divisible_by_100 or divisible_by_400)\n  end\nend	\N	f	4	4	2014-06-22 05:13:59	2014-06-22 05:13:59	337	year.rb
735	13	2ca6e2232e8e15398e8bd317	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    divisible_by_4 = year % 4 == 0\n    divisible_by_100 = year % 100 == 0\n    divisible_by_400 = year % 400 == 0\n\n    divisible_by_4 and (not divisible_by_100 or divisible_by_400)\n  end\nend	\N	f	1	3	2014-06-22 09:17:09	2014-06-22 09:17:09	337	year.rb
738	13	5b51618c5084f0b95349f555	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n    if year % 4 == 0 {\n        if year % 100 == 0 {\n            if year % 400 == 0 {\n                return true\n            }\n        } else {\n            return true\n        }\n    }\n\n    return false\n}	\N	f	0	1	2014-05-17 18:20:20	2014-05-17 18:20:20	339	leap.go
739	13	7f517ec5bf2477582be6ecf8	pending	javascript	binary-search-tree	var BinarySearchTree = (function(){\n  "use strict";\n  \n  function Node(datum) {\n    this.data = datum;\n  }\n  Node.prototype.each = function(callback){\n    if(this.left!==undefined) this.left.each(callback);\n    callback(this.data);\n    if(this.right!==undefined) this.right.each(callback);\n    return this;\n  };\n  \n  Node.prototype.insert = function(datum){\n    if(this.data>=datum){\n      insertIntoLeft(this,datum);\n    }else{\n      insertIntoRight(this,datum);\n    }\n    return this;\n  };\n  \n  var insertIntoLeft = function(node,datum){\n    if(node.left===undefined){\n      node.left = new Node(datum);\n    }else{\n      node.left.insert(datum);\n    }\n    return node;\n  };\n  \n  var insertIntoRight = function(node,datum){\n    if(node.right===undefined){\n      node.right = new Node(datum);\n    }else{\n      node.right.insert(datum);\n    }\n    return node;\n  };\n  \n  return Node;\n})();\nmodule.exports = BinarySearchTree;	\N	f	0	1	2014-06-11 00:18:54	2014-06-11 00:18:54	340	binary-search-tree.js
740	13	59ee325f620719e0453ca372	superseded	ruby	word-count	class Phrase\n  attr_accessor :words\n\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    list = Hash.new(0)\n    words.downcase.scan(/\\w+/) { |w| list[w] += 1 }\n    list\n  end\n\nend	\N	f	2	3	2014-05-15 03:52:44	2014-05-15 03:52:44	341	word-count.rb
741	13	45694bd64721e51f575a63c1	superseded	ruby	word-count	class Phrase\n  attr_accessor :words\n\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    prep_words_for_counting()\n    word_list = {}\n    words.split(" ").each do |word|\n      word_list = process_word_in_list(word, word_list)\n    end\n    word_list\n  end\n\nprivate\n  def process_word_in_list(word, word_list)\n    word = parse_word(word)\n    return word_list if word.empty?\n    word_list[word] ||= 0\n    word_list[word] += 1\n    word_list\n  end\n\n  def prep_words_for_counting\n    words.gsub!(",", " ")\n  end\n\n  def parse_word(word)\n    word.gsub!(/[^a-zA-Z0-9]/, "")\n    word.downcase!\n    word\n  end\n\nend	\N	f	6	1	2014-05-23 01:50:01	2014-05-23 01:50:01	341	word-count.rb
742	13	ca9bbfd6452bbda21b1ba297	done	ruby	word-count	class Phrase\n  attr_accessor :words\n\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    list = Hash.new(0)\n    each_word { |word| list[word] += 1 }\n    list\n  end\n\nprivate\n  def each_word\n    words.downcase.scan(/\\w+/) do |word|\n      yield word\n    end\n  end\n\nend	\N	f	2	4	2014-05-31 09:14:50	2014-05-31 09:14:50	341	word-count.rb
743	13	a6d4808026157eeda77f4445	superseded	ruby	word-count	class Phrase\n  attr_accessor :words\n\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    word_list = Hash.new(0)\n    words.downcase.scan(/\\w+/) do |word|\n      word_list[word] += 1\n    end\n    word_list\n  end\n\nend	\N	f	0	2	2014-06-05 14:52:42	2014-06-05 14:52:42	341	word-count.rb
745	13	ebba72a2791ac0f2463561ac	pending	python	grains	def on_square(n):\n\treturn 1l << (n-1)\n\ndef total_after(n):\n\treturn (1 << n) - 1	\N	f	2	1	2014-06-27 12:42:02	2014-06-27 12:42:02	343	grains.py
746	13	9a1842814517304ca89b39c2	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams = potential_anagrams.reject(same_words?)\n    potential_anagrams = potential_anagrams.reject do |anagram|\n      anagram.downcase == @word\n    end\n    frequencies = letters(@word.downcase)\n    potential_anagrams.select do |anagram|\n      letters(anagram.downcase) == frequencies\n    end\n\n  end\n\n  def same_words?(word)\n    word == @word\n  end\n\n  def letters(word)\n    word.chars.sort\n  end\n\n\nend	\N	f	0	2	2014-05-14 20:32:06	2014-05-14 20:32:06	344	anagram.rb
747	13	133adfa9a849ca227f4f7c26	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams = potential_anagrams.reject do |anagram|\n      anagram.downcase == @word\n    end\n    frequencies = letters(@word.downcase)\n    potential_anagrams.select do |anagram|\n      letters(anagram.downcase) == frequencies\n    end\n\n  end\n\n  def letters(word)\n    word.chars.sort\n  end\n\n\nend	\N	f	2	1	2014-05-28 02:49:54	2014-05-28 02:49:54	344	anagram.rb
769	14	10b80034e23f9d20829ecb18	done	scala	hamming	object Hamming {\n\n\tdef compute(s1: String, s2: String) = \n\t\t(s1 zip s2).count { case (c1, c2) => c1 != c2 }\n\n}	\N	f	2	2	2014-04-13 01:21:19	2014-04-13 01:21:19	354	hamming.scala
749	13	db2353fe06b2cc932d5cae0f	done	perl5	rna-transcription	package DNA;\n\nmy @ISA         = qw(Exporter);\nmy @EXPORT_OK   = qw(to_rna);\n\nsub to_rna\n{\n\treturn shift =~ tr/CGTA/GCAU/r;\n}\n\n1;	\N	f	2	1	2014-06-17 01:54:14	2014-06-17 01:54:14	345	DNA.pm
750	13	42d4ba2dca4eaeba1faa6885	done	haskell	pascals-triangle	module Triangle (row, triangle) where\n\ntriangle :: (Integral a) => [[a]]\ntriangle = iterate (\\row -> zipWith (+) (0:row) (row ++ [0])) [1]\n\nrow :: (Integral a) => Int -> [a]\nrow = (triangle !!) . (subtract 1)	\N	f	2	1	2014-05-18 20:36:34	2014-05-18 20:36:34	346	pascals-triangle.hs
752	13	bea5cd29ac3f6b7a06b2fd2d	superseded	haskell	phone-number	module Phone (\n  areaCode,\n  number,\n  prettyPrint\n) where\n\nimport Data.Char\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nnumber :: String -> String\nnumber = sanitize . filter isDigit\n  where\n    sanitize num\n      | len == 10                    = num\n      | len == 11 && head num == '1' = tail num\n      | otherwise                    = bad\n      where \n        len = length num\n        bad = take 10 $ repeat '0'\n\nprettyPrint :: String -> String\nprettyPrint = makePretty . number\n  where\n    makePretty num = concat ["(", area, ") ", prefix, "-", line]\n      where\n        (area, rest) = splitAt 3 num\n        (prefix, line) = splitAt 3 rest	\N	f	0	3	2014-06-07 08:38:10	2014-06-07 08:38:10	347	Phone.hs
753	13	adf618aec8464dea3c6d4f46	superseded	haskell	phone-number	module Phone (\n  areaCode,\n  number,\n  prettyPrint\n) where\n\nimport Data.Char\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nnumber :: String -> String\nnumber = sanitize . filter isDigit\n  where\n    sanitize "" = bad\n    sanitize num @ (first : rest)\n      | len == 10                 = num\n      | len == 11 && first == '1' = rest\n      | otherwise                 = bad\n      where len = length num\n\n    bad = take 10 $ repeat '0'\n\nprettyPrint :: String -> String\nprettyPrint = makePretty . number\n  where\n    makePretty num = concat ["(", area, ") ", prefix, "-", line]\n      where\n        (area, rest) = splitAt 3 num\n        (prefix, line) = splitAt 3 rest	\N	f	5	2	2014-06-07 08:54:32	2014-06-07 08:54:32	347	Phone.hs
754	13	164b96122b681a4d3d1c7414	done	haskell	phone-number	module Phone (\n  areaCode,\n  number,\n  prettyPrint\n) where\n\nimport Data.Char\nimport Data.List.Split (splitPlaces)\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nnumber :: String -> String\nnumber = validate . filter isDigit\n  where\n    validate num\n      | len == 10 = num\n      | len == 11 && head num == '1' = tail num\n      | otherwise = replicate 10 '0'\n      where len = length num\n\nprettyPrint :: String -> String\nprettyPrint = concat\n            . zipWith (++) ["(", ") ", "-"]\n            . splitPlaces [3, 3, 4]\n            . number	\N	f	2	4	2014-06-28 16:18:15	2014-06-28 16:18:15	347	Phone.hs
756	13	41d709958b1f404fa69dc5b8	pending	coffeescript	bob	class Bob\r\n  allCaps = (statement) ->\r\n    statement.toUpperCase() is statement\r\n\r\n  question = (statement) ->\r\n    statement[statement.length - 1] is '?'\r\n\r\n  hasLetters = (statement) ->\r\n    statement.match /[a-zA-Z]/g\r\n\r\n  silence = (statement) ->\r\n    not statement or /^\\s*$/.test(statement)\r\n\r\n  hey: (statement) ->\r\n    return "Woah, chill out!" if allCaps(statement) and hasLetters(statement)\r\n    return "Sure." if question(statement)\r\n    return "Fine. Be that way!" if silence(statement)\r\n    "Whatever."\r\n\r\nmodule.exports = Bob\r	\N	f	2	1	2014-06-20 20:53:50	2014-06-20 20:53:50	349	bob.coffee
757	14	b7598b0da1b19f17e6aef5cf	superseded	haskell	nth-prime	module Prime (nth) where\n\nnth n = head . drop (n-1) . filter isPrime $ 2:[3,5..]\n\nisPrime n = all (/=0) [n `rem` d | d <- divs]\n  where divs = takeWhile (< (n `quot` 2)) (2:[3,5..])	\N	f	1	1	2014-03-13 12:15:23	2014-03-13 12:15:23	350	Prime.hs
758	14	0bc97e590ae94850a6414818	superseded	haskell	nth-prime	module Prime (nth) where\n\nnth n = primes !! (n-1)\n\nprimes = 2:3:5:filter isPrime [7,9..]\n\nisPrime n = all (/=0) [n `rem` d | d <- divs]\n  where divs = takeWhile (< (n `quot` 2)) primes	\N	f	3	2	2014-04-06 16:44:36	2014-04-06 16:44:36	350	Prime.hs
759	14	bb732bbe4af15112a751c9a4	done	haskell	nth-prime	module Prime (nth) where\n\nnth :: Int -> Int\nnth n = primes !! (n-1)\n\nprimes :: [Int]\nprimes = 2:3:5:filter isPrime [7,9..]\n\nisPrime :: Int -> Bool\nisPrime n = all (/=0) [n `rem` d | d <- divs]\n  where divs = takeWhile (< (n `quot` 2)) primes	\N	f	3	3	2014-05-12 10:33:51	2014-05-12 10:33:51	350	Prime.hs
770	14	4ab33ecaeaaff42e3c37e304	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan /\\w+/\n  end\n\n  def word_count\n    @words.reduce(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\nend	\N	f	3	2	2014-03-21 11:55:01	2014-03-21 11:55:01	355	word-count.rb
771	14	fed1fead7c45ee48854de2c6	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.gsub(/\\W/, ' ').downcase.split\n  end\n\n  def word_count\n    @words.reduce(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\nend	\N	f	3	1	2014-03-31 06:57:07	2014-03-31 06:57:07	355	word-count.rb
761	14	6ec013f87bd9805418352f27	done	javascript	anagram	function Anagram(word) {\n  this.word = new Word(word);\n}\nAnagram.prototype = {\n  match: function(list) {\n    var ret = [];\n\n    list.forEach(function(word) {\n      if (this.word.isAnagramOf(word)) {\n        ret.push(word.toString());\n      }\n    }, this);\n\n    return ret;\n  }\n};\n\nfunction Word(word) {\n  this.original = word;\n}\nWord.prototype = {\n  normalize: function() {\n    return this.original\n      .toLowerCase()\n      .split('')\n      .sort()\n      .join('');\n  },\n  toString: function() {\n    return this.original;\n  },\n  isAnagramOf: function(word) {\n    word = word instanceof Word ? word : new Word(word);\n    return this.normalize() === word.normalize() && !this.isEqualTo(word.toString());\n  },\n  isEqualTo: function(word) {\n    return this.original === word;\n  }\n};\n\nmodule.exports = Anagram;	\N	f	4	2	2014-05-21 17:34:22	2014-05-21 17:34:22	351	anagram.js
763	14	4e481b100253fcafdccf458c	hibernating	haskell	word-count	module WordCount (wordCount) where\n\timport Data.Char (isSymbol, isPunctuation, isSpace, toLower)\n\timport Data.List.Split (splitWhen)\n\timport qualified Data.Map as Map\n\n\tisDelimiter :: Char -> Bool\n\tisDelimiter character = isSymbol character || isPunctuation character || isSpace character\n\n\tsplitWords :: String -> [String]\n\tsplitWords = filter (not . null) . splitWhen isDelimiter\n\n\twordCount' :: Map.Map String Integer -> [String] -> Map.Map String Integer\n\twordCount' result [] = result\n\twordCount' result (word:remainder)\n\t    | Map.member word result = wordCount' (Map.insert word ((result Map.! word)+1) result)  remainder\n\t    | otherwise              = wordCount' (Map.insert word 1 result) remainder\n\n\n\twordCount :: String -> Map.Map String Integer\n\twordCount = wordCount' Map.empty . splitWords . map toLower	\N	f	4	4	2014-05-04 18:40:16	2014-05-04 18:40:16	352	WordCount.hs
764	14	16c39a07cfa43eed7ca6dfb7	superseded	haskell	word-count	module WordCount (wordCount) where\n\timport Data.Char (isSymbol, isPunctuation, isSpace, toLower)\n\timport Data.List.Split (splitWhen)\n\timport qualified Data.Map as Map\n\n\tisDelimiter :: Char -> Bool\n\tisDelimiter character = isSymbol character || isPunctuation character || isSpace character\n\n\tsplitWords :: String -> [String]\n\tsplitWords = filter (not . null) . splitWhen isDelimiter\n\n\twordCount' :: Map.Map String Integer -> [String] -> Map.Map String Integer\n\twordCount' result [] = result\n\twordCount' result (word:remainder)\n\t    | Map.member word result = wordCount' (Map.insert word ((result Map.! word)+1) result)  remainder\n\t    | otherwise              = wordCount' (Map.insert word 1 result) remainder\n\n\n\twordCount :: String -> Map.Map String Integer\n\twordCount sentence = (wordCount' Map.empty . splitWords . map toLower) sentence	\N	f	0	3	2014-05-13 07:01:57	2014-05-13 07:01:57	352	WordCount.hs
765	14	a49cb54e3d8d1ae5dfa08793	superseded	haskell	word-count	module WordCount (wordCount) where\n\timport Data.Char (isSymbol, isPunctuation, isSpace, toLower)\n\timport Data.List.Split (splitWhen)\n\timport qualified Data.Map as Map\n\n\tisDelimiter :: Char -> Bool\n\tisDelimiter character = isSymbol character || isPunctuation character || isSpace character\n\n\tsplitWords :: String -> [String]\n\tsplitWords sentence = filter (not . null) (splitWhen isDelimiter sentence)\n\n\twordCount' :: Map.Map String Integer -> [String] -> Map.Map String Integer\n\twordCount' result [] = result\n\twordCount' result (word:remainder)\n\t    | Map.member word result = wordCount' (Map.insert word ((result Map.! word)+1) result) remainder\n\t    | otherwise              = wordCount' (Map.insert word 1 result) remainder\n\n\n\twordCount :: String -> Map.Map String Integer\n\twordCount sentence = wordCount' Map.empty (splitWords (map toLower sentence))	\N	f	5	2	2014-06-12 08:07:33	2014-06-12 08:07:33	352	WordCount.hs
766	14	4206b4f41d5f5b6619b49c33	pending	javascript	triangle	var Triangle = function() {\n\n\tvar a = arguments[0],\n\t\tb = arguments[1],\n\t\tc = arguments[2];\n\n\tvar _isEquilateral = function() {\n\t\treturn (a == b && b == c && a == c);\n\t};\n\n\tvar _isIsosceles = function() {\n\t\treturn (a == b || a == c || b == c);\n\t};\n\n\tvar _isScalene = function() {\n\t\treturn (a + b > c && a + c > b && b + c > a);\n\t};\n\n\tvar _isIllegal = function() {\n\t\treturn (a + b <= c || a + c <= b || b + c <= a);\n\t};\n\n\treturn {\n\n\t\tkind: function() {\n\n\t\t\tvar kind;\n\n\t\t\tif (_isIllegal()) {\n\t\t\t\tkind = "illegal";\n\t\t\t} else if (_isEquilateral()) {\n\t\t\t\tkind = "equilateral";\n\t\t\t} else if (_isIsosceles()) {\n\t\t\t\tkind = "isosceles";\n\t\t\t} else if (_isScalene()) {\n\t\t\t\tkind = "scalene";\n\t\t\t}\n\n\t\t\treturn kind;\n\t\t}\n\t};\n};\n\nmodule.exports = Triangle;	\N	f	3	2	2014-03-19 09:32:24	2014-03-19 09:32:24	353	triangle.js
767	14	ac0006fdb19072d87a1e31eb	superseded	javascript	triangle	var Triangle = function() {\n\n\tvar a = arguments[0],\n\t\tb = arguments[1],\n\t\tc = arguments[2];\n\n\tvar _isEquilateral = function() {\n\t\treturn (a == b && b == c && a == c);\n\t};\n\n\tvar _isIsosceles = function() {\n\t\treturn (a == b || a == c || b == c);\n\t};\n\n\tvar _isScalene = function() {\n\t\treturn (a + b > c && a + c > b && b + c > a);\n\t};\n\n\tvar _isIllegal = function() {\n\t\treturn ((a + b <= c || a + c <= b || b + c <= a) || (a === 0 && b === 0 && c === 0));\n\t};\n\n\treturn {\n\n\t\tkind: function() {\n\n\t\t\tvar kind;\n\n\t\t\tif (_isIllegal()) {\n\t\t\t\tkind = "illegal";\n\t\t\t} else if (_isEquilateral()) {\n\t\t\t\tkind = "equilateral";\n\t\t\t} else if (_isIsosceles()) {\n\t\t\t\tkind = "isosceles";\n\t\t\t} else if (_isScalene()) {\n\t\t\t\tkind = "scalene";\n\t\t\t}\n\n\t\t\treturn kind;\n\t\t}\n\t};\n};\n\nmodule.exports = Triangle;	\N	f	3	1	2014-04-12 23:23:20	2014-04-12 23:23:20	353	triangle.js
768	14	8bc7618c88f53e1f3fb8b4b9	superseded	scala	hamming	object Hamming {\n\n\tdef compute(s1: String, s2: String) = \n\t\t(s1 zip s2).foldLeft(0)(hamming_fold_helper)\n\n\tprivate def hamming_fold_helper(acc: Int, tuple: (Char, Char)) = tuple match {\n\t\tcase (x,y) if x == y => acc\n\t\tcase _               => acc + 1\n\t}\n}	\N	f	3	1	2014-03-16 02:58:55	2014-03-16 02:58:55	354	hamming.scala
774	14	784763a050936cd93bf75804	superseded	elixir	beer-song	defmodule Beer do\n  def sing(n) do\n    sing(n, 0)\n  end\n\n  def sing(n1, n2) do\n    Enum.reduce(n1..n2, "", fn(num, acc) -> \n                                acc <> verse(num) <> "\\n" end)\n  end\n\n  def verse(n) do\n    { shelf_bottles, take_bottles } = bottle_phrase(n)\n    { left_bottles, _ } = bottle_phrase(n - 1)\n\n    "#{String.capitalize(shelf_bottles)} of beer on the wall, #{shelf_bottles} of beer.\\n#{take_bottles}, #{left_bottles} of beer on the wall.\\n"\n  end\n\n  def bottle_phrase(n) do\n    cond do\n    n > 1 ->\n      { "#{n} bottles", "Take one down and pass it around" }\n    n == 1 ->\n      { "1 bottle", "Take it down and pass it around" }\n    n < 0 ->\n      { "99 bottles", "" }\n    true ->\n      { "no more bottles", "Go to the store and buy some more" }\n    end\n  end\nend	\N	f	1	2	2014-03-14 02:54:12	2014-03-14 02:54:12	357	beer-song.exs
775	14	68903ac3dda97361f1ea8cbe	done	elixir	beer-song	defmodule Beer do\n  def sing(n1, n2 // 0) do\n    Enum.reduce(n1..n2, "", &(&2 <> verse(&1) <> "\\n"))\n  end\n\n  def verse(n) do\n    { shelf_bottles, take_bottles } = bottle_phrase(n)\n    { left_bottles, _ } = bottle_phrase(n - 1)\n\n    """\n    #{String.capitalize(shelf_bottles)} of beer on the wall, #{shelf_bottles} of beer.\n    #{take_bottles}, #{left_bottles} of beer on the wall.\n    """\n  end\n\n  def bottle_phrase(n) do\n    cond do\n    n > 1 ->\n      { "#{n} bottles", "Take one down and pass it around" }\n    n == 1 ->\n      { "1 bottle", "Take it down and pass it around" }\n    n < 0 ->\n      { "99 bottles", "" }\n    true ->\n      { "no more bottles", "Go to the store and buy some more" }\n    end\n  end\nend	\N	f	3	3	2014-04-01 23:47:06	2014-04-01 23:47:06	357	beer-song.exs
776	14	2af54f0415097f5690048925	pending	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    unless num % 3 == 0 || num % 5 == 0 || num % 7 == 0\n      return num.to_s\n    end \n\n    string = String::new\n    string << "Pling" if num % 3 == 0\n    string << "Plang" if num % 5 == 0\n    string << "Plong" if num % 7 == 0\n    string\n  end\nend	\N	f	0	1	2014-03-24 17:01:07	2014-03-24 17:01:07	358	raindrops.rb
777	14	2af9d9ee29e456d3e48ec72c	done	javascript	hamming	function compute(str1,str2){\n  var count = 0;\n  var l = Math.min(str1.length,str2.length);\n  for (var i =0; i < l; i++){\n    if (str1[i] != str2[i]){\n      count++;\n    };\n  };\n  return count;\n};	\N	f	3	1	2014-04-08 11:23:45	2014-04-08 11:23:45	359	hamming.js
778	14	1a34f0b825ef61ef71e5a61d	superseded	clojure	bob	;;;; Bob is a lackadaisical teenager. In conversation, his responses\n;;;; are very limited.\n;;;;\n;;;; Bob answers 'Sure.' if you ask him a question.\n;;;;\n;;;; He answers 'Woah, chill out!' if you yell at him.\n;;;;\n;;;; He says 'Fine. Be that way!' if you address him without actually\n;;;; saying anything.\n;;;;\n;;;; He answers 'Whatever.' to anything else.\n\n(ns bob)\n\n(defn- question? [str]\n  "Return true if str ends with a ?"\n  (= (last str) \\?))\n\n(defn- ascii-letter? [chr]\n  "Return true if chr is an ascii character"\n  (or\n    (and (>= (int chr) (int \\a)) (<= (int chr) (int \\z)))\n    (and (>= (int chr) (int \\A)) (<= (int chr) (int \\Z)))))\n\n(defn- atleast-one-ascii? [str]\n  "Return true if str contains atleast one ascii character"\n  (> (count (filter ascii-letter? str)) 0))\n\n(defn- yelling? [str]\n  "Return true if the string only contains upper-case.\n  except when string contains only numbers, in which case,\n  return false"\n  (and \n    (= str (clojure.string/upper-case str))\n    (atleast-one-ascii? str)))\n\n(defn response-for [str]\n  (cond\n    (clojure.string/blank? str) "Fine. Be that way!"\n    (yelling? str) "Woah, chill out!"\n    (question? str) "Sure."\n    :else "Whatever."))	\N	f	3	1	2014-03-13 17:44:30	2014-03-13 17:44:30	360	bob.clj
779	14	b006566bc1920d34a4d4c76e	superseded	clojure	bob	;;;; Bob is a lackadaisical teenager. In conversation, his responses\n;;;; are very limited.\n;;;;\n;;;; Bob answers 'Sure.' if you ask him a question.\n;;;;\n;;;; He answers 'Woah, chill out!' if you yell at him.\n;;;;\n;;;; He says 'Fine. Be that way!' if you address him without actually\n;;;; saying anything.\n;;;;\n;;;; He answers 'Whatever.' to anything else.\n\n(ns bob)\n\n(defn- question? [str]\n  "Return true if str ends with a ?"\n  (= (last str) \\?))\n\n(defn- atleast-one-ascii? [str]\n  "Return true if str contains atleast one ascii character"\n  (not (nil? (first (re-seq #"[a-zA-Z]" str)))))\n\n(defn- yelling? [str]\n  "Return true if the string only contains upper-case;\n  except when string contains only numbers, in which case,\n  return false"\n  (and \n    (= str (clojure.string/upper-case str))\n    (atleast-one-ascii? str)))\n\n(defn response-for [str]\n  (cond\n    (clojure.string/blank? str) "Fine. Be that way!"\n    (yelling? str) "Woah, chill out!"\n    (question? str) "Sure."\n    :else "Whatever."))	\N	f	3	2	2014-03-19 10:44:32	2014-03-19 10:44:32	360	bob.clj
780	14	da8c6987671e8dc46769f92f	pending	clojure	bob	;;;; Bob is a lackadaisical teenager. In conversation, his responses\n;;;; are very limited.\n;;;;\n;;;; Bob answers 'Sure.' if you ask him a question.\n;;;;\n;;;; He answers 'Woah, chill out!' if you yell at him.\n;;;;\n;;;; He says 'Fine. Be that way!' if you address him without actually\n;;;; saying anything.\n;;;;\n;;;; He answers 'Whatever.' to anything else.\n\n(ns bob)\n\n(defn- question? [str]\n  "Return true if str ends with a ?"\n  (= (last str) \\?))\n\n(defn- yelling? [str]\n  "Return true if the string only contains upper-case;\n  except when string contains only numbers, in which case,\n  return false"\n  (and \n    (= str (clojure.string/upper-case str))\n    (re-seq #"[a-zA-Z]" str)))\n\n(defn response-for [str]\n  (cond\n    (clojure.string/blank? str) "Fine. Be that way!"\n    (yelling? str) "Woah, chill out!"\n    (question? str) "Sure."\n    :else "Whatever."))	\N	f	3	3	2014-04-13 13:27:56	2014-04-13 13:27:56	360	bob.clj
781	14	fec85539c29734047693b19c	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber string =\n  case length string' of\n    10 -> string'\n    11 -> if head string' == '1' then tail string' else badNumber\n    _  -> badNumber\n    where string' = filter isDigit string\n          badNumber = "0000000000"\n\nareaCode :: String -> String\nareaCode = take 3 . filter isDigit\n\nprettyPrint :: String -> String\nprettyPrint string = printf "(%s) %s-%s" area middle rest'\n  where (area, rest)    = splitAt 3 . number $ string\n        (middle, rest') = splitAt 3 rest	\N	f	2	1	2014-04-04 05:34:09	2014-04-04 05:34:09	361	Phone.hs
783	14	7f62107186431cc4892ceb5f	done	clojure	queen-attack	(def empty-board\n  (apply str (repeat 8 "O O O O O O O O\\n")))\n\n(defn- place [piece [y x] board]\n  (if (and y x)\n    (let [loc (+ (* y 16) (* x 2))\n          [start end] (split-at loc board)]\n      (concat (conj (vec start) piece) (rest end)))\n    board))\n\n(defn board-string [{:keys [w b]}]\n  (apply str (->> empty-board\n                  (place \\W w)\n                  (place \\B b))))\n\n(defn can-attack [{[wy wx] :w [by bx] :b}]\n  (let [abs-diff (comp #(if (> 0 %) (* -1 %) %) -)]\n    (or (= wx bx)\n        (= wy by)\n        (= (abs-diff wx bx) (abs-diff wy by)))))	\N	f	1	3	2014-05-09 23:54:15	2014-05-09 23:54:15	362	queens.clj
785	14	ab0adad4d326f401ff51ca2b	hibernating	ruby	nucleotide-count	module Enumerable\n  def frequencies\n    self.each_with_object(Hash.new(0)) do |i, h|\n      h[i] += 1\n    end\n  end\nend\n\nclass DNA\n  NUCLEOTIDES = %w(A T C G)\n\n  def initialize(dna_string)\n    raise ArgumentError unless valid_dna_string?(dna_string)\n\n    @dna_string = dna_string\n  end\n\n  def nucleotide_counts\n    default_counts.merge(@dna_string.chars.frequencies)\n  end\n\n  def count(marker)\n    raise ArgumentError unless NUCLEOTIDES.include?(marker)\n    nucleotide_counts[marker]\n  end\n\n  private\n\n  def default_counts\n    NUCLEOTIDES.each_with_object({}) { |i, h| h[i] = 0 }\n  end\n\n  def valid_dna_string?(str)\n    (str.chars - NUCLEOTIDES).empty?\n  end\nend	\N	f	4	1	2014-04-15 09:37:26	2014-04-15 09:37:26	363	dna.rb
786	14	b17ed73e3189e9959cdcbbd5	done	ruby	largest-series-product	class Series\n  def initialize(string_of_numbers)\n    @string_of_numbers = string_of_numbers\n  end\n\n  def largest_product(size)\n    products = slices(size).collect do |slice|\n      slice.reduce(1, :*)\n    end\n    product = products.sort.reverse.first\n    product.nil? ? 1 : product\n  end\n\n  def slices(size)\n    raise ArgumentError if size > @string_of_numbers.length\n    sliced = []\n    digits.each_with_index do |digit, index|\n      sliced << digits[index..index + size - 1] unless digits[index + size - 1].nil?\n    end\n    return sliced\n  end\n\n  def digits\n    @string_of_numbers.scan(/./).map { |x| x.to_i }\n  end\nend	\N	f	3	1	2014-04-29 09:52:33	2014-04-29 09:52:33	364	series.rb
787	14	8fa37b41b25487f7b9445158	superseded	ruby	anagram	# encoding: utf-8\n\nclass Anagram\n  def initialize(word)\n    @word = word\n    @upcase_chars = @word.chars.map { |char| char.upcase == char  }\n  end\n\n  def match(word_list)\n    anagrams = AnagramFinder.new(@word, word_list).find\n    upcase_words(anagrams)\n  end\n\n  private\n\n  def upcase_words(words)\n    words.map { |word| upcase_word(word) }\n  end\n\n  def upcase_word(word)\n    [word.chars.to_a, @upcase_chars].transpose.map { |char, upcase| upcase ? char.upcase : char }.join\n  end\nend\n\nclass AnagramFinder\n  def initialize(word, word_list)\n    @word = word\n    @word_list = word_list\n  end\n\n  def find\n    @word_list.select { |word| have_same_chars?(word, @word) && !identical?(word, @word) }\n  end\n\n  private\n\n  def have_same_chars?(word, other_word)\n    word.downcase.chars.sort.join == other_word.downcase.chars.sort.join\n  end\n\n  def identical?(word, other_word)\n    word.downcase == other_word.downcase\n  end\nend	\N	f	3	2	2014-04-02 07:57:19	2014-04-02 07:57:19	365	anagram.rb
788	14	3e1889d63d38079490bdba41	hibernating	ruby	anagram	# encoding: utf-8\n\nclass Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  def match(word_list)\n    word_list.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    same_chars = prepare_chars(word) == prepare_chars(@word)\n    different = @word.casecmp(word) != 0\n    same_chars && different\n  end\n\n  def prepare_chars(word)\n    word.downcase.chars.sort.join\n  end\nend	\N	f	3	5	2014-04-06 08:14:42	2014-04-06 08:14:42	365	anagram.rb
789	14	88400ed189e6c0cb4ad25a8b	superseded	ruby	anagram	# encoding: utf-8\n\nclass Anagram\n  def initialize(word)\n    @word = word\n    @upcase_chars = Word.new(@word).upcase_chars\n  end\n\n  def match(word_list)\n    word_list = prepare_word_list(word_list)\n    anagrams = AnagramFinder.new(@word, word_list).find\n    upcase_words(anagrams)\n  end\n\n  private\n\n  def prepare_word_list(word_list)\n    word_list = WordList.new(word_list)\n    word_list.select_words_with_same_length!(@word.length)\n    word_list.select_words_with_same_chars!(@word)\n    word_list.downcase!\n    word_list.remove!(@word)\n    word_list.words\n  end\n\n  def upcase_words(words)\n    words.map { |word| upcase_word(word) }\n  end\n\n  def upcase_word(word)\n    [word.chars.to_a, @upcase_chars].transpose.map { |char, upcase| upcase ? char.upcase : char }.join\n  end\nend\n\nclass WordList\n  attr_reader :words\n\n  def initialize(words)\n    @words = words\n  end\n\n  def select_words_with_same_length!(length)\n    @words.select! { |word| word.length == length }\n  end\n\n  def select_words_with_same_chars!(word)\n    prepared_word = word.downcase.chars.sort\n    prepared_words = @words.map { |word| word.downcase.chars.sort }\n    prepared_words.select! { |word| word == prepared_word }\n  end\n\n  def downcase!\n    @words.map!(&:downcase)\n  end\n\n  def remove!(other_word)\n    @words.reject! { |word| word == other_word }\n  end\nend\n\nclass AnagramFinder\n  def initialize(word, word_list)\n    @word = word\n    @word_list = word_list\n  end\n\n  def find\n    find_anagrams(permutate_words(@word_list))\n  end\n\n  private\n\n  def permutate_words(word_list)\n    @word_list.reduce({}) do |hash, word|\n      permutations = permutate_word(word)\n      hash.merge!(word => permutations)\n    end\n  end\n\n  def permutate_word(word)\n    word.chars.to_a.permutation.map(&:join)\n  end\n\n  def find_anagrams(hash)\n    hash.select { |word, perms| perms.include?(@word.downcase) }.keys\n  end\nend\n\nclass Word\n  def initialize(word)\n    @word = word\n  end\n\n  def upcase_chars\n    @word.chars.map { |char| char.upcase == char  }\n  end\nend	\N	f	0	1	2014-04-23 10:39:45	2014-04-23 10:39:45	365	anagram.rb
790	14	e345c7e73abb3984fda0b7b0	superseded	ruby	anagram	# encoding: utf-8\n\nclass Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  def match(word_list)\n    word_list.select { |word| have_same_chars?(word) && @word.casecmp(word) != 0 }\n  end\n\n  private\n\n  def have_same_chars?(word)\n    prepare_chars(word) == prepare_chars(@word)\n  end\n\n  def prepare_chars(word)\n    word.downcase.chars.sort.join\n  end\n\n  def identical?(word, other_word)\n    word.downcase == other_word.downcase\n  end\nend	\N	f	0	3	2014-05-22 18:40:16	2014-05-22 18:40:16	365	anagram.rb
791	14	6e9b8b2f2867263e46f41b91	superseded	ruby	anagram	# encoding: utf-8\n\nclass Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  def match(word_list)\n    word_list.select do |word|\n      same_chars = prepare_chars(word) == prepare_chars(@word)\n      different = @word.casecmp(word) != 0\n      same_chars && different\n    end\n  end\n\n  private\n\n  def prepare_chars(word)\n    word.downcase.chars.sort.join\n  end\nend	\N	f	3	4	2014-05-26 14:33:55	2014-05-26 14:33:55	365	anagram.rb
804	15	23b26ed47edb80c5dae97567	superseded	haskell	word-count	module WordCount(wordCount) where\n\nimport Data.Map(Map, insertWith, empty)\nimport Data.Char(toLower, isAlphaNum)\nimport Data.List.Split(wordsBy)\n\nwordCount :: String -> Map String Int\nwordCount xs = wordCount' (words' xs) empty\n\nwords' :: String -> [String]\nwords' xs = wordsBy (not.isAlphaNum) $ map toLower xs\n\nwordCount' :: [String] -> Map String Int -> Map String Int\nwordCount' xs m = foldl (\\m x -> insertWith (+) x 1 m) m xs	\N	f	0	1	2014-06-17 03:35:30	2014-06-17 03:35:30	371	WordCount.hs
793	15	694e7a19df3bf8c170d29894	superseded	javascript	binary	'use strict';\n\nfunction Binary (digits) {\n  this.binaryString = digits;\n}\n\nBinary.prototype.toDecimal = function () {\n  if (! this.binaryString.match(/^[01]+$/)) return 0;\n  return this.binaryString.split('').reverse().reduce(computeDecimal, 0);\n}\n\nfunction computeDecimal(result, digit, n) {\n  if (digit === "1") return result += Math.pow(2, n);\n  else return result;\n}\n\nmodule.exports = Binary;	\N	f	0	1	2014-06-04 08:22:09	2014-06-04 08:22:09	367	binary.js
794	15	c03532cf6bcbd42cc4f1887c	superseded	javascript	binary	'use strict';\n\nfunction Binary (digits) {\n  this.binaryString = digits;\n}\n\nBinary.prototype.toDecimal = function () {\n  if (! this.binaryString.match(/^[01]+$/)) return 0;\n  return this.binaryString.split('').reverse().reduce(computeDecimal, 0);\n}\n\nfunction computeDecimal(result, digit, n) {\n  if (digit === "1") result += Math.pow(2, n);\n  return result;\n}\n\nmodule.exports = Binary;	\N	f	3	2	2014-06-06 02:43:44	2014-06-06 02:43:44	367	binary.js
795	15	30bfbcaa9355d886df25ce4a	done	javascript	binary	'use strict';\n\nfunction Binary (digits) {\n  this.binaryString = digits;\n}\n\nBinary.prototype.validString = function() {\n    return this.binaryString.match(/^[01]+$/);\n}\n\nBinary.prototype.toDecimal = function () {\n  if (! this.validString()) return 0;\n  return this.binaryString.split('').reverse().reduce(computeDecimal, 0);\n}\n\nfunction computeDecimal(result, digit, n) {\n  if (digit === "1") result += Math.pow(2, n);\n  return result;\n}\n\nmodule.exports = Binary;	\N	f	0	3	2014-06-06 05:29:06	2014-06-06 05:29:06	367	binary.js
796	15	a6dff624c7c13287fd357181	superseded	ruby	anagram	class Anagram\n  def initialize original\n    self.original = original\n  end\n\n  def match candidates\n    self.candidates = candidates\n    anagrams.map &:to_s\n  end\n\n  private\n\n  attr_reader :original, :candidates\n\n  def anagrams\n    candidates.find_all { |candidate| candidate == original }\n  end\n\n  def original= original\n    @original = AnagramWord.new original\n  end\n\n  def candidates= candidates\n    @candidates = candidates.map { |candidate| AnagramWord.new candidate }\n  end\n\n  class AnagramWord\n    include Comparable\n\n    attr_reader :word\n\n    def initialize word\n      @word = word.downcase\n    end\n\n    def letters\n      word.chars.sort\n    end\n\n    def == other\n      other.class == self.class && other.word != self.word && other.letters == self.letters\n    end\n\n    def to_str\n      word\n    end\n    alias :to_s :to_str\n  end\nend	\N	f	0	2	2014-06-08 18:04:32	2014-06-08 18:04:32	368	anagram.rb
797	15	8a43989ed443d69e25d6d6c7	superseded	ruby	anagram	class Anagram\n  attr_reader :original\n\n  def initialize original\n    @original = original\n  end\n\n  def match candidates\n    candidates.find_all { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def anagram? candidate\n    candidate.size == original.size && letters(candidate) == original_letters\n  end\n\n  def original_letters\n    @original_letters ||= letters original\n  end\n\n  def letters word\n    word.downcase.chars.sort\n  end\nend	\N	f	5	1	2014-06-11 00:12:36	2014-06-11 00:12:36	368	anagram.rb
798	15	cd250a43951dbccdf43ff4c3	superseded	ruby	anagram	class Anagram\n  def initialize original\n    @original = original\n  end\n\n  def match candidates\n    AnagramWord.new(original).find_anagrams candidates\n  end\n\n  private\n\n  attr_reader :original\nend\n\nclass AnagramWord\n  attr_reader :word\n\n  def initialize word\n    @word = word.downcase\n  end\n\n  def find_anagrams candidates\n    AnagramWords(candidates).find_all { |candidate| self.anagram? candidate }.map &:to_s\n  end\n\n  def to_s\n    word\n  end\n\n  protected\n\n  def anagram? candidate\n    candidate.word != self.word && candidate.letters == self.letters\n  end\n\n  def letters\n    word.chars.sort\n  end\nend\n\ndef AnagramWords words\n  words.map { |word| AnagramWord.new word }\nend	\N	f	5	3	2014-06-18 02:11:47	2014-06-18 02:11:47	368	anagram.rb
799	15	35a10d25748fe8da9a061c2c	done	ruby	anagram	class Anagram\n  def initialize original\n    @original = AnagramWord.new original\n  end\n\n  def match candidates\n    candidates.find_all { |candidate| original.anagram_of? candidate }\n  end\n\n  private\n\n  attr_reader :original\nend\n\nclass AnagramWord\n  attr_reader :word\n  def initialize word\n    self.word = word\n  end\n\n  def anagram_of? candidate\n    candidate.downcase != self.word && sorted_letters(candidate) == sorted_letters(self.word)\n  end\n\n  private\n\n  def word= word\n    @word = word.downcase\n  end\n\n  def sorted_letters word\n    word.chars.sort\n  end\nend	\N	f	5	4	2014-06-24 12:54:18	2014-06-24 12:54:18	368	anagram.rb
800	15	0a09e6eb9d2b2e20363c0232	superseded	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA []\t= []\ntoRNA (h:t) = toRNA' h : toRNA t\n\ntoRNA' :: Char -> Char\ntoRNA'\t'A'\t= 'U'\ntoRNA'\t'G'\t= 'C'\ntoRNA'\t'C'\t= 'G'\ntoRNA'\t'T'\t= 'A'\ntoRNA'\t c\t= error ("Input " ++ show c ++ " is not a DNA nucleotide!")	\N	f	4	2	2014-06-18 13:24:32	2014-06-18 13:24:32	369	DNA.hs
801	15	e9e6ebdbc2a00d5775432134	superseded	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA []\t= []\ntoRNA (h:t) = toRNA' h : toRNA t\n\ntoRNA' :: Char -> Char\ntoRNA'\t'A'\t= 'U'\ntoRNA'\t'G'\t= 'C'\ntoRNA'\t'C'\t= 'G'\ntoRNA'\t'T'\t= 'A'\ntoRNA'\t _\t= 'X'	\N	f	1	1	2014-06-20 23:24:50	2014-06-20 23:24:50	369	DNA.hs
802	15	32971a467508f1ef383ba26f	done	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA s = map toRNA' s\n\ntoRNA' :: Char -> Char\ntoRNA'\t'A'\t= 'U'\ntoRNA'\t'G'\t= 'C'\ntoRNA'\t'C'\t= 'G'\ntoRNA'\t'T'\t= 'A'\ntoRNA'\t c\t= error ("Input " ++ show c ++ " is not a DNA nucleotide!")	\N	f	12	3	2014-06-24 02:47:19	2014-06-24 02:47:19	369	DNA.hs
803	15	1c8603a75af4323f394c23d0	pending	ruby	raindrops	class Raindrops\n  def self.convert_prime_factors!(prime)\n    conversion_routes = {3 => "Pling" , 5 => "Plang", 7 => "Plong"}\n\n    if conversion_routes.keys.include? prime\n      unless @result_of_conversion.class.eql? String\n        @result_of_conversion = String.new\n      end\n      converted_value = conversion_routes[prime]\n      unless @result_of_conversion.include? converted_value\n        @result_of_conversion += converted_value\n      end\n    end\n\n  end\n\n  def self.convert(input)\n    prime = 2\n    @result_of_conversion = number = input\n    until number.eql? 1 do\n      if (number % prime).zero?\n        number /= prime\n        convert_prime_factors!(prime)\n      else\n        prime = prime.next\n      end\n    end\n    @result_of_conversion.to_s\n  end\nend	\N	f	0	1	2014-06-06 15:42:16	2014-06-06 15:42:16	370	raindrops.rb
806	15	652b2a1973a7afc89462b900	hibernating	ruby	hamming	class Hamming\n  class << self\n    def compute(first, second)\n      first.chars.zip(second.chars).count do |a, b|\n        a && b && a != b\n      end\n    end\n  end\nend	\N	f	10	2	2014-06-21 01:00:56	2014-06-21 01:00:56	372	hamming.rb
807	15	72b548d9bc2c05b205ef5cab	superseded	ruby	hamming	class Hamming\n  class << self\n    def compute(first, second)\n      first_chars = first.split('')\n      second_chars = second.split('')\n\n      first_chars.zip(second_chars).count do |a, b|\n        a && b && a != b\n      end\n    end\n  end\nend	\N	f	5	1	2014-06-27 13:49:29	2014-06-27 13:49:29	372	hamming.rb
808	15	337599b4b10d539f6a760637	hibernating	python	bob	import re\n\nclass Bob:\n\tdef hey(self, text):\n\t\tif(text.strip() == ""):\n\t\t\treturn "Fine. Be that way!"\n\t\tif(text.upper() == text and re.findall("[a-zA-Z]", text)):\n\t\t\treturn "Woah, chill out!"\n\t\tif(text[-1:] == "?"):\n\t\t\treturn "Sure."\n\t\treturn "Whatever."	\N	f	0	1	2014-06-13 09:00:33	2014-06-13 09:00:33	373	bob.py
809	15	55491a5c0363c0ff4216955d	done	clojure	anagram	(ns anagram)\n\n(defn canonical [word]\n   (clojure.string/join (sort (clojure.string/lower-case (clojure.string/split word #"")))))\n\n(defn anagrams-for [string words]\n  (filter (fn [word]\n    (= (canonical word) (canonical string))) (remove #{string} words)))	\N	f	3	1	2014-06-06 08:21:45	2014-06-06 08:21:45	374	anagram.clj
810	15	1ff4fbd0c7ec63acc50dd7d7	done	ruby	rna-transcription	class RibonucleicAcid\n  def initialize(string)\n    @string = string\n  end\n  def to_s\n    @string\n  end\n  def ==(object)\n    object.to_s == @string\n  end\nend\n\nclass String\n  alias :old_equals :==\n\n  def ==(that)\n    if that.kind_of?(RibonucleicAcid)\n      that == self\n    else\n      old_equals(that)\n    end\n  end\nend\n\nclass DeoxyribonucleicAcid < RibonucleicAcid\n\n  def to_rna\n    RibonucleicAcid.new(@string.gsub("T","U"))\n  end\nend	\N	f	5	1	2014-06-24 09:39:51	2014-06-24 09:39:51	375	rna-transcription.rb
811	15	1cd14e840bb5b6099e5001f4	done	clojure	etl	(ns etl\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn transform [src]\n  (into {}\n    (apply concat\n      (for [[x [& y]] src]\n        (for [z y]\n          [(lower-case z) x])))))	\N	f	3	1	2014-06-12 12:59:43	2014-06-12 12:59:43	376	etl.clj
813	15	52106c326fc25fc1d2c897d8	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn default? [utterance] true)\n\n(defn shouting? [utterance]\n  (= utterance (string/upper-case utterance)))\n\n(defn silence? [utterance]\n  (string/blank? utterance))\n\n(defn question? [utterance]\n  (.endsWith utterance "?"))\n\n(defn response-for [utterance]\n  (cond\n   (silence? utterance) "Fine. Be that way."\n   (shouting? utterance) "Woah, chill out!"\n   (question? utterance) "Sure."\n   :else "Whatever."))	\N	f	3	3	2014-06-05 14:27:51	2014-06-05 14:27:51	377	bob.clj
814	15	bea92d12c6f981d290942ead	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn shouting? [utterance]\n  (= utterance (string/upper-case utterance)))\n\n(defn silence? [utterance]\n  (string/blank? utterance))\n\n(defn question? [utterance]\n  (.endsWith utterance "?"))\n\n(defn response-for [utterance]\n  (cond\n   (silence? utterance) "Fine. Be that way."\n   (shouting? utterance) "Woah, chill out!"\n   (question? utterance) "Sure."\n   :else "Whatever."))	\N	f	4	4	2014-06-07 21:40:24	2014-06-07 21:40:24	377	bob.clj
815	15	3eaf0fba61e238012821dc12	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only (blank? upper-case)]))\n\n(defn default? [utterance] true)\n\n(defn shouting? [utterance]\n  (= utterance (upper-case utterance)))\n\n(defn silence? [utterance]\n  (blank? utterance))\n\n(defn question? [utterance]\n  (.endsWith utterance "?"))\n\n(def responseLookup\n  {\n   silence? "Fine. Be that way."\n   shouting?  "Woah, chill out!"\n   question? "Sure."\n   default? "Whatever."\n   })\n\n(defn response-for [utterance]\n  (let [[_ response] (first (filter (fn [[matcher _]]\n                                      (matcher utterance))\n                                    responseLookup))]\n    response))	\N	f	5	1	2014-06-29 12:14:06	2014-06-29 12:14:06	377	bob.clj
816	15	0bd2e806327c3ffb55ab6a4c	done	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn- shouting? [utterance]\n  (= utterance (string/upper-case utterance)))\n\n(defn- silence? [utterance]\n  (string/blank? utterance))\n\n(defn- question? [utterance]\n  (.endsWith utterance "?"))\n\n(defn response-for [utterance]\n  (cond\n   (silence? utterance) "Fine. Be that way."\n   (shouting? utterance) "Woah, chill out!"\n   (question? utterance) "Sure."\n   :else "Whatever."))	\N	f	5	5	2014-06-30 01:48:02	2014-06-30 01:48:02	377	bob.clj
817	15	f7aa7dc1eb0ca743f6d5af75	hibernating	ruby	bob	class Bob\n  def hey(m)\n    if m.nil? || m.empty?\n      return 'Fine. Be that way.'\n    end\n\n    letters = m.split('')\n\n    return 'Sure.' unless letters.last != "?"\n\n    letters.each do |chr|\n      if chr =~ /[a-z]/\n        return 'Whatever.'\n      end\n    end\n    return 'Woah, chill out!'\n  end\nend	\N	f	2	1	2014-06-15 05:30:04	2014-06-15 05:30:04	378	bob.rb
818	15	1dcba11a904dbadb45b15829	done	ruby	nucleotide-count	class DNA < Struct.new(:sequence)\n  def count(nucleotide)\n    raise ArgumentError unless %w(A T C G U).include?(nucleotide)\n    sequence.chars.count{ |n| n == nucleotide }\n  end\n\n  def nucleotide_counts\n    {\n      'A' => count('A'),\n      'T' => count('T'),\n      'C' => count('C'),\n      'G' => count('G'),\n    }\n  end\nend	\N	f	4	2	2014-06-09 22:08:22	2014-06-09 22:08:22	379	nucleotide-count.rb
819	15	3d8defe4e63111a345abb44d	superseded	ruby	nucleotide-count	class DNA < Struct.new(:sequence)\n  def count(nucleotide)\n    raise ArgumentError unless %w(A T C G U).include?(nucleotide)\n    sequence.chars.count{|c| c == nucleotide }\n  end\n\n  def nucleotide_counts\n    %w(A T C G).each_with_object({}) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\nend	\N	f	0	1	2014-06-12 00:48:17	2014-06-12 00:48:17	379	nucleotide-count.rb
835	16	fa3dc571f3ebc3d0f5520351	superseded	ruby	grains	# class Grains\nclass Grains\n  def square(square_number)\n    2**(square_number - 1)\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	f	3	2	2014-01-07 07:35:04	2014-01-07 07:35:04	388	grains.rb
821	16	19c270dbf1c763b92c351488	done	haskell	queen-attack	module Queens (boardString, canAttack) where\n\nimport Data.List (intersperse)\nimport Data.List.Split (chunksOf)\nimport qualified Data.Map.Strict as M\n\ntype Coord = (Integer, Integer)\n\nboardString :: Maybe Coord -> Maybe Coord -> String\nboardString w b = pretty . fmap getBoardChar $ allCoords\n  where \n    allCoords =  [(x, y) | x <- [0..7], y <- [0..7]]\n    getBoardChar coord = M.findWithDefault 'O' coord board\n    pretty = unlines . map (intersperse ' ') . chunksOf 8\n    board = let b0 = M.empty\n                b1 = maybe b0 (\\p -> M.insert p 'W' b0) w\n                b2 = maybe b1 (\\p -> M.insert p 'B' b1) b\n             in b2\n\ncanAttack :: Coord -> Coord -> Bool\ncanAttack (x1, y1) (x2, y2) = isRowCol || isDiag\n  where \n    isRowCol = x1 == x2 || y1 == y2\n    isDiag = abs(x1 - x2) == abs(y1 - y2)	\N	f	3	2	2014-02-11 14:39:16	2014-02-11 14:39:16	380	Queens.hs
822	16	e013718489892dc9c98456a0	done	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  "given a word and a list of possible anagrams, select the correct one(s)"\n  [word possible-anags]\n  (let [target (frequencies word)]\n  (filter #(= (frequencies %) target) possible-anags)))	\N	f	2	3	2014-03-23 04:41:38	2014-03-23 04:41:38	381	anagram.clj
823	16	b3e4e72757f5899af48a97d4	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  "given a word and a list of possible anagrams, select the correct one(s)"\n  [word possible-anags]\n  (let [target (frequencies word)]\n  (filter (fn [x] (= (frequencies x) target)) possible-anags)))	\N	f	3	2	2014-04-16 15:02:28	2014-04-16 15:02:28	381	anagram.clj
824	16	f319084898aef8d41440846e	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  "given a word and a list of possible anagrams, select the correct one(s)"\n  [word possible-anags]\n  (let [target (sort word)]\n  (filter (fn [x] (= (sort x) target)) possible-anags)))	\N	f	3	1	2014-04-22 18:03:01	2014-04-22 18:03:01	381	anagram.clj
825	16	9e4c3ffecdbacb4bab06699f	done	ruby	bob	class Bob\n  def hey(raw_message)\n    message = Classifier.new(raw_message)\n    if message.is_shouting?\n      'Woah, chill out!'\n    elsif message.is_question?\n      'Sure.'\n    elsif message.is_silence?\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  class Classifier\n    attr_accessor :message\n    def initialize(message)\n      @message = message.gsub(/\\n/,'')\n    end\n\n    def is_shouting?\n      message !~ /[a-z]/ && message =~ /[A-Z]/\n    end\n\n    def is_question?\n      message =~ /\\?$/\n    end\n\n    def is_silence?\n      message =~ /^\\s*$/\n    end\n  end\nend	\N	f	2	1	2014-02-27 07:57:58	2014-02-27 07:57:58	382	bob.rb
826	16	9b25fb6731d223888b85ca66	hibernating	ruby	word-count	class Phrase\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new 0) do |word, count|\n      count[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    phrase.downcase.scan(/[\\w']+/)\n  end\n\n  attr_reader :phrase\n\nend	\N	f	3	1	2014-02-07 03:02:24	2014-02-07 03:02:24	383	phrase.rb
827	16	c13d4c37f39be27c03b15396	done	haskell	rna-transcription	module DNA (toRNA) where\n\n\ntoRNA :: String -> String\ntoRNA = map rnaEquiv\n    where rnaEquiv 'T' = 'U'\n          rnaEquiv  n  =  n	\N	f	3	1	2014-01-22 15:33:11	2014-01-22 15:33:11	384	rna-transcription.hs
828	16	5c9e9fa86637804a201a643b	superseded	javascript	anagram	function Anagram(source) {\n  this.source = standard_form(source);\n}\n\nAnagram.prototype.match = function(targets) {\n  var anagrams = [];\n  for (var i = 0; i < targets.length; i++) {\n    target = targets[i];\n    if (array_comparison(standard_form(target), this.source)) {\n      anagrams.push(target);\n    }\n  }\n  return anagrams;\n};\n\nvar standard_form = function(word) {\n  return word.toLowerCase().split("").sort();\n};\n\n// http://stackoverflow.com/a/10316616/1629243\n// WHY is this necessary?\nvar array_comparison = function (a1, a2) {\n  return JSON.stringify(a1) == JSON.stringify(a2);\n}\n\nmodule.exports = Anagram;	\N	f	3	1	2014-02-27 03:46:32	2014-02-27 03:46:32	385	anagram.js
829	16	ad34d8f39775d9d12da0668c	done	javascript	anagram	function Anagram(source) {\n  this.source = standard_form(source);\n}\n\nAnagram.prototype.match = function(targets) {\n  var anagrams = [];\n  for (var i = 0; i < targets.length; i++) {\n    target = targets[i];\n    if (standard_form(target) == this.source) {\n      anagrams.push(target);\n    }\n  }\n  return anagrams;\n};\n\nvar standard_form = function(word) {\n  return word.toLowerCase().split("").sort().join();\n};\n\nmodule.exports = Anagram;	\N	f	0	2	2014-03-20 16:27:25	2014-03-20 16:27:25	385	anagram.js
830	16	3c9cc472c088e62aa920d3f5	done	go	leap	package leap\n\nfunc IsLeapYear(year int) (isLeap bool) {\n\tif year%4 == 0 {\n\t\tisLeap = true\n\t\tif year%100 == 0 {\n\t\t\tisLeap = false\n\t\t\tif year%400 == 0 {\n\t\t\t\tisLeap = true\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}	\N	f	3	1	2014-01-31 02:49:23	2014-01-31 02:49:23	386	leap.go
831	16	b805daf15c8d077026f0b0bc	done	elixir	bob	defmodule Teenager do\n  @moduledoc ""\n\n  def hey(x) do\n    cond do\n      all_caps? x  ->\n        "Woah, chill out!"\n      all_whitespace? x  ->\n        "Fine. Be that way!"\n      question? x ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  def all_caps? x  do\n      x == String.upcase(x) and x != String.downcase(x)\n  end\n\n  def all_whitespace? x  do\n      String.strip(x) == ""\n  end\n\n  def question? x  do\n    String.ends_with? x, "?" \n  end\nend	\N	f	3	4	2014-01-03 22:28:19	2014-01-03 22:28:19	387	bob.exs
832	16	ef6261313483124be8bc0090	superseded	elixir	bob	defmodule Teenager do\n  @moduledoc ""\n\n  def hey(x) do\n    cond do\n      x != String.downcase(x) and x == String.upcase(x) ->\n        "Woah, chill out!"\n      (String.strip x) == "" ->\n        "Fine. Be that way!"\n      String.ends_with? x, "?" ->\n        "Sure."\n        true ->\n          "Whatever."\n    end\n  end\nend	\N	f	3	1	2014-01-21 16:45:22	2014-01-21 16:45:22	387	bob.exs
833	16	87ce0c77f04729d9e511da9e	superseded	elixir	bob	defmodule Teenager do\n  @moduledoc ""\n\n  def hey(x) do\n    cond do\n      x != String.downcase(x) and x == String.upcase(x) ->\n        "Woah, chill out!"\n      (String.strip x) == "" ->\n        "Fine. Be that way!"\n      String.ends_with? x, "?" ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend	\N	f	0	2	2014-02-20 06:47:40	2014-02-20 06:47:40	387	bob.exs
834	16	4bee17d19e75ee5d37c640bb	superseded	elixir	bob	defmodule Teenager do\n  @moduledoc ""\n\n  def hey(x) do\n    cond do\n      x == String.upcase(x) and x != String.downcase(x) ->\n        "Woah, chill out!"\n      String.strip(x) == "" ->\n        "Fine. Be that way!"\n      String.ends_with? x, "?" ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend	\N	f	3	3	2014-02-28 07:30:50	2014-02-28 07:30:50	387	bob.exs
841	16	d08c37b2ce2e4031b193a632	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nisShouting :: String -> Bool\nisShouting s | s' == ""  = False\n             | otherwise = all isUpper s'\n  where s' = filter isAlpha s\n\nresponseFor :: String -> String\nresponseFor s | s'           == ""  = "Fine. Be that way!"\n              | isShouting s'       = "Woah, chill out!"\n              | last s'      == '?' = "Sure."\n              | otherwise           = "Whatever."\n                where isLetterOrQ c = isAlpha c || c == '?'\n                  s' = filter isLetterOrQ s	\N	f	3	3	2014-02-09 17:09:26	2014-02-09 17:09:26	390	bob.hs
842	16	0ab068fc1ed4f73c4a5736b7	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nisShouting :: String -> Bool\nisShouting s | s' == ""  = False\n             | otherwise = all isUpper s'\n  where s' = filter isAlpha s\n\nresponseFor :: String -> String\nresponseFor s\n          | s'           == ""  = "Fine. Be that way!"\n          | isShouting s'       = "Woah, chill out!"\n          | last s'      == '?' = "Sure."\n          | otherwise           = "Whatever."\n            where isLetterOrQ c = isAlpha c || c == '?'\n                  s' = filter isLetterOrQ s	\N	f	3	2	2014-02-17 03:04:49	2014-02-17 03:04:49	390	bob.hs
843	16	468dd6115165e1c320bcaa7b	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nisShouting :: String -> Bool\nisShouting s | s' == ""  = False\n             | otherwise = all isUpper s'\n  where s' = filter isAlpha s\n\nresponseFor :: String -> String\nresponseFor s | s'           == ""  = "Fine. Be that way!"\n              | isShouting s'       = "Woah, chill out!"\n              | last s'      == '?' = "Sure."\n              | otherwise           = "Whatever."\n                where isLetterOrQ c = isAlpha c || c == '?'\n                      s' = filter isLetterOrQ s	\N	f	3	4	2014-03-19 14:32:11	2014-03-19 14:32:11	390	bob.hs
845	16	f8c0a261155a6345b0556012	pending	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l), do: do_count(l, 0)\n\n  defp do_count([], acc), do: acc\n  defp do_count([_|t], acc), do: do_count(t, acc + 1)\n\n  @spec reverse(list) :: list\n  def reverse(l), do: do_reverse(l, [])\n\n  defp do_reverse([], acc), do: acc\n  defp do_reverse([head|tail], acc), do: do_reverse(tail, [head|acc])\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f), do: do_map(l, f, [])\n\n  defp do_map([], _, accm), do: reverse(accm)\n  defp do_map([h|t], f, accm), do: do_map(t, f, [f.(h)|accm])\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f), do: do_filter(l, f, [])\n\n  defp do_filter([], _, accm), do: reverse(accm)\n  defp do_filter([h|t], f, accm) do\n    if f.(h) do\n      do_filter(t, f, [h|accm])\n    else\n      do_filter(t, f, accm)\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce([], acc, _), do: acc\n  def reduce([h|t], acc, f), do: reduce(t, f.(h, acc), f)\n\n  @spec append(list, list) :: list\n  def append(a, b), do: reverse(a) |> do_append(b)\n\n  defp do_append([], b), do: b\n  defp do_append([h|t], b), do: do_append(t, [h|b])\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll), do: reverse(ll) |> reduce([], &(append(&1, &2)))\nend	\N	f	2	2	2014-03-26 06:38:02	2014-03-26 06:38:02	391	list_ops.exs
846	16	5a8c8bb8a51f38e6b089d7ee	superseded	haskell	linked-list	{-# LANGUAGE CPP #-}\nmodule Deque \n  (mkDeque\n  , push\n  , pop\n  , shift\n  , unshift\n  ) where\n\nimport Control.Applicative\nimport Control.Concurrent.STM\nimport Data.Maybe (isNothing, isJust)\n\n-- Test require mutable state..\ndata Element a = Element (TVar (Maybe (Element a))) a (TVar (Maybe (Element a)))\n\nsingE :: a -> STM (Element a)\nsingE x = Element <$> newTVar Nothing \n                  <*> pure x\n                  <*> newTVar Nothing\n\nnewE :: Maybe (Element a) -> a -> Maybe (Element a) -> STM (Element a)\nnewE l x r = Element <$> newTVar l <*> pure x <*> newTVar r\n\ndata Deque a = Deque (TVar (Maybe (Element a, Element a)))\n\nmkDeque :: IO (Deque a)\nmkDeque = Deque <$> newTVarIO Nothing\n\npush :: Deque a -> a -> IO ()\npush (Deque s) x = atomically $ do\n    mt <- readTVar s\n    z <- case mt of\n      Nothing -> singE x >>= \\e -> return (e,e)\n      Just (l,r@(Element _ _ rr)) -> do\n        n <- newE (Just r) x Nothing\n        writeTVar rr $ Just n\n        return (l,n)\n    writeTVar s (Just z)\n\nunshift :: Deque a -> a -> IO ()\nunshift (Deque s) x = atomically $ do\n    mt <- readTVar s\n    z <- case mt of\n      Nothing -> singE x >>= \\e -> return (e,e)\n      Just (l@(Element ll _ _),r) -> do\n        n <- newE Nothing x (Just l)\n        writeTVar ll $ Just n\n        return (n,l)\n    writeTVar s (Just z)\n\npop :: Deque a -> IO (Maybe a)\npop (Deque s) = atomically $ do\n    mt <- readTVar s\n    case mt of\n      Nothing -> return Nothing\n      Just (l,r@(Element rl rx _)) -> do\n          rv <- readTVar rl\n          case rv of\n            Nothing -> {- r==l -} writeTVar s Nothing\n            Just r' -> writeTVar s (Just (l,r'))\n          return $ Just rx\n\nshift :: Deque a -> IO (Maybe a)\nshift (Deque s) = atomically $ do\n    mt <- readTVar s\n    case mt of\n      Nothing -> return Nothing\n      Just (l@(Element _ lx lr),r) -> do\n          lv <- readTVar lr\n          case lv of\n            Nothing -> {- r==l -} writeTVar s Nothing\n            Just l' -> writeTVar s (Just (l',r))\n          return $ Just lx	\N	f	3	1	2014-02-03 14:47:48	2014-02-03 14:47:48	392	Deque.hs
862	17	690d8c5b9d0df28db9e143af	superseded	haskell	bob	module Bob (responseFor) where\nimport Text.Regex.Posix\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isQuestion lastline = "Sure."\n  | isBlank lastline = "Fine. Be that way."\n  | otherwise = "Whatever."\n  where lastline = last $ lines input\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nisBlank phrase = phrase =~ "^[ \\n\\t\\r]*$" :: Bool	\N	f	3	1	2013-12-19 23:13:23	2013-12-19 23:13:23	398	bob.hs
1418	39	688d9f76ae8ea2987c7fe94c	hibernating	ruby	robot-name	class Robot\n\n  def initialize\n    @name = [*('A'..'Z')].shuffle.join[0..1] + [*('0'..'9')].shuffle.join[0..2]\n  end\n\n  def name\n    @name\n  end\n\n  def reset\n    @name = Robot.new.name\n  end\nend	\N	f	0	1	2014-05-31 02:34:11	2014-05-31 02:34:11	666	robot.rb
848	16	affe9ace666bd054af077393	pending	perl5	bob	package Bob;\n\nuse strict;\nuse warnings;\n\nsub hey {\n    my $input = shift;\n\n    my $yell = uc $input;\n\n    if( $input eq $yell && $input =~ m/[[:upper:]]/ ) {\n\treturn "Woah, chill out!";\n    } elsif( $input =~ m/\\?$/ ) {\n\treturn "Sure.";\n    } elsif( $input =~ m/^\\s*$/ ) {\n\treturn "Fine. Be that way!";\n    }\n\n    return "Whatever.";\n\n}\n\n1;	\N	f	2	1	2014-02-09 22:27:48	2014-02-09 22:27:48	393	Bob.pm
849	16	c71520a16aba0691d86a1cc8	pending	scala	bob	class Bob{\n  def hey(statement: String): String = statement match {\n    case Shouting() => "Woah, chill out!"\n    case Question() => "Sure."\n    case Silence() => "Fine. Be that way!"\n    case _ => "Whatever."\n  }\n\n  case object Shouting {\n    def unapply(statement: String) = \n      hasLetter(statement) && isOnlyUppercase(statement)\n\n    private def hasLetter(s: String) = s.matches(".*[A-Z].*")\n\n    private def isOnlyUppercase(s: String) = s == s.toUpperCase\n  }\n\n  case object Question {\n    def unapply(statement: String) = statement.endsWith("?")\n  }\n\n  case object Silence { \n    def unapply(statement: String) = statement.trim.isEmpty\n  }\n}	\N	f	2	1	2014-03-04 06:23:07	2014-03-04 06:23:07	394	bob.scala
850	17	1b33eab49e9dc0f657bdd539	superseded	ruby	word-count	class Phrase\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    counter = Hash.new 0\n    words.each.with_object(counter) { |word, counter| count word, counter }\n  end\n\n  private\n  def words\n    @phrase.scan /\\w+/\n  end\n\n  def count word, counter\n    counter[word.downcase] += 1 \n  end\nend	\N	f	0	2	2013-12-20 09:58:11	2013-12-20 09:58:11	395	word-count.rb
851	17	0510e2ab8edeb1bfb8a96164	superseded	ruby	word-count	class Phrase\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    counter = Hash.new 0\n    words.each.with_object(counter) { |word, h| h[word.downcase] += 1 }\n  end\n\n  private\n  def words\n    @phrase.scan /\\w+/\n  end\nend	\N	f	0	3	2014-01-15 00:07:42	2014-01-15 00:07:42	395	word-count.rb
852	17	60eba4c1c7883498132624b9	superseded	ruby	word-count	class Phrase\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    counter = Hash.new 0\n    words.each.with_object(counter) { |word, h| h[word] += 1 }\n  end\n\n  private\n  def words\n    @phrase.downcase.scan /\\w+/\n  end\nend	\N	f	3	4	2014-03-20 22:50:28	2014-03-20 22:50:28	395	word-count.rb
853	17	3e61e8304d4b4f6aca6b7891	done	ruby	word-count	class Phrase\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    counter = Hash.new 0\n    words.each.with_object(counter) do |word, counter|\n      counter[word] += 1\n    end\n  end\n\n  private\n  def words\n    @phrase.downcase.scan /\\w+/\n  end\nend	\N	f	3	5	2014-04-18 12:06:31	2014-04-18 12:06:31	395	word-count.rb
854	17	5cc35013200728c1b2acaf89	superseded	ruby	word-count	class Phrase\n  NONWORD_SYMBOLS_REGEX = /[^\\w\\s,]/.freeze\n  WORD_DELIMETER_REGEX = /[\\s,]+/.freeze\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    counter = Hash.new 0\n    words.each.with_object(counter) { |word, counter| count word, counter }\n  end\n\n  private\n  def words\n    formatted_phrase.split WORD_DELIMETER_REGEX\n  end\n\n  def formatted_phrase\n    @phrase.gsub NONWORD_SYMBOLS_REGEX, ''\n  end\n\n  def count word, counter\n    counter[word.downcase] += 1 \n  end\nend	\N	f	4	1	2014-04-30 07:12:29	2014-04-30 07:12:29	395	word-count.rb
855	17	d01628bcdffcb3ac1eb3eaa9	superseded	ruby	bob	class Bob\n  def hey(words)\n    blank    = ->(text) { text.strip.empty? }\n    loud     = ->(text) { text == text.upcase }\n    question = ->(text) { text.end_with? "?" }\n\n    case words\n    when blank\n      "Fine. Be that way!"\n    when loud\n      "Woah, chill out!"\n    when question\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	3	4	2013-12-27 13:24:31	2013-12-27 13:24:31	396	bob.rb
856	17	55c862d49fddeae0c9afba3d	superseded	ruby	bob	class Bob\n  def hey(words)\n    if words.strip.length == 0\n      "Fine. Be that way!"\n    elsif words == words.upcase\n      "Woah, chill out!"\n    elsif words =~ /\\?$/\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	3	1	2014-02-04 03:38:30	2014-02-04 03:38:30	396	bob.rb
857	17	c4953caeef5c2dbfddd970df	superseded	ruby	bob	class Bob\n  def hey(words)\n    blank    = ->(text) { text.strip.length == 0 }\n    loud     = ->(text) { text == text.upcase }\n    question = ->(text) { text =~ /\\?$/ }\n\n    case words\n    when blank\n      "Fine. Be that way!"\n    when loud\n      "Woah, chill out!"\n    when question\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	0	2	2014-03-08 20:45:46	2014-03-08 20:45:46	396	bob.rb
858	17	98452143a23a52f093126cc1	done	ruby	bob	class Bob\n  def hey(words)\n    blank    = ->(input_string) { input_string.strip.empty? }\n    loud     = ->(input_string) { input_string == input_string.upcase }\n    question = ->(input_string) { input_string.end_with? "?" }\n\n    case words\n    when blank\n      "Fine. Be that way!"\n    when loud\n      "Woah, chill out!"\n    when question\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	3	5	2014-03-13 05:58:08	2014-03-13 05:58:08	396	bob.rb
859	17	f7773145b65eb861e529e21b	superseded	ruby	bob	class Bob\n  def hey(words)\n    blank    = ->(text) { text.strip.length == 0 }\n    loud     = ->(text) { text == text.upcase }\n    question = ->(text) { text.end_with? "?" }\n\n    case words\n    when blank\n      "Fine. Be that way!"\n    when loud\n      "Woah, chill out!"\n    when question\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	4	3	2014-04-16 19:59:30	2014-04-16 19:59:30	396	bob.rb
860	17	78f6bc1a8d7a94acd608a517	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in given) expectation {\n    out := make(expectation)\n\n    for k, v := range in {\n        for i := range v {\n            out[strings.ToLower(v[i])] = k\n        }\n    }\n\n    return out\n}	\N	f	3	1	2014-01-24 04:02:14	2014-01-24 04:02:14	397	etl.go
861	17	9d9d4c985d618149aaf02d1f	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tout := make(map[string]int)\n\n\tfor points, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tout[strings.ToLower(letter)] = points\n\t\t}\n\t}\n\n\treturn out\n}	\N	f	3	2	2014-06-02 01:04:33	2014-06-02 01:04:33	397	etl.go
892	17	c59700b30f04f0d34876c1bf	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int)(bool) {\n  return (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)\n}	\N	f	3	1	2014-01-12 17:18:14	2014-01-12 17:18:14	411	leap.go
864	17	e97ed5d9cd129ac495f4731d	superseded	haskell	bob	module Bob (responseFor) where\nimport Text.Regex.Posix\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isQuestion lastline = "Sure."\n  | isBlank lastline = "Fine. Be that way."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nisBlank phrase = phrase =~ "^[ \\n\\t\\r]*$" :: Bool	\N	f	1	2	2014-03-02 14:16:20	2014-03-02 14:16:20	398	bob.hs
865	17	cf216f5422a8b7475c7492d9	superseded	haskell	bob	module Bob (responseFor) where\nimport Text.Regex.Posix\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nisBlank phrase = phrase =~ "^[ \\n\\t\\r]*$" :: Bool	\N	f	3	3	2014-03-06 16:13:16	2014-03-06 16:13:16	398	bob.hs
866	17	bddfa93d7478a9a0a850a858	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (isUpper) phrase) > 0 &&\n                   (length $ filter (isLower) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars chars s = all (`elem` chars) s\n\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	3	5	2014-03-16 09:53:30	2014-03-16 09:53:30	398	bob.hs
867	17	bc306a2c444347fa386f2a1b	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\n\nresponseFor :: [Char] -> [Char]\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast :: [[Char]] -> [Char]\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (length $ filter isUpper phrase) > 0 &&\n                   (length $ filter isLower phrase) == 0\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	3	6	2014-03-17 15:52:51	2014-03-17 15:52:51	398	bob.hs
868	17	8bc1a8224c1a81cd75db76e7	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\n\nresponseFor :: [Char] -> [Char]\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank input = "Fine. Be that way."\n  | isQuestion input = "Sure."\n  | otherwise = "Whatever."\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	3	7	2014-03-19 06:54:55	2014-03-19 06:54:55	398	bob.hs
869	17	6c276c6db6b3e7bd493ada16	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\nimport Data.List (isSuffixOf)\n\nresponseFor :: [Char] -> [Char]\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank input = "Fine. Be that way."\n  | isQuestion input = "Sure."\n  | otherwise = "Whatever."\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	3	8	2014-04-01 10:05:33	2014-04-01 10:05:33	398	bob.hs
871	17	396d26546a16cc90c3327fce	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\nimport Data.List (isSuffixOf)\n\ndata Action = Question\n            | Shout\n            | Silence\n            | Other\n\nparse :: String -> Action\nparse "" = Silence\nparse s | isBlank s    = Silence\n        | isAllCaps s  = Shout\n        | isQuestion s = Question\n        | otherwise    = Other\n\nresponse :: Action -> String\nresponse Question = "Sure."\nresponse Shout    = "Woah, chill out!"\nresponse Silence  = "Fine. Be that way."\nresponse Other    = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = response . parse\n\nisAllCaps :: String -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: String -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nisBlank :: String -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)	\N	f	1	10	2014-04-18 20:20:06	2014-04-18 20:20:06	398	bob.hs
893	17	4fd453c61f973b86ff398b8f	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%100 != 0 || year%400 == 0)\n}	\N	f	4	2	2014-04-28 19:40:25	2014-04-28 19:40:25	411	leap.go
917	22	abef3fe3c09ab4a87277f02f	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn response-for [words]\n  (cond\n    (= (string/trim words) "") "Fine. Be that way!"\n\n    (and (re-find #"[A-Z]" words)\n         (re-find #"^[^a-z]+$" words)) "Woah, chill out!"\n\n    (re-find #"\\?$" words) "Sure."\n\n    :else "Whatever."))	\N	f	3	2	2014-05-17 04:48:38	2014-05-17 04:48:38	425	bob.clj
873	17	25916b4e565c048c5aef82af	pending	clojure	grade-school	(ns school)\n\n(defn add [school name grade]\n  (update-in school [grade] #(conj (vec %1) name)))\n\n(defn grade [school num] (get school num []))\n\n(defn sorted [school]\n  (into (sorted-map) (for [[k v] school] [k (sort v)])))	\N	f	3	1	2014-04-22 19:16:50	2014-04-22 19:16:50	399	school.clj
874	17	5502fc8b8e965025b5846b6a	pending	javascript	point-mutations	function DNA(str){\n  this.strand = str;\n}\n\nDNA.prototype.hammingDistance = function(compStr){\n  var dnaStr = this.strand;\n  var dnaStrLength = dnaStr.length;\n  var comparisonLength = compStr.length;\n  var result = 0;\n\n  if(dnaStrLength > comparisonLength){\n    dnaStr = dnaStr.substring(0,comparisonLength);\n  } else if(dnaStrLength < comparisonLength){\n    compStr = compStr.substring(0, dnaStrLength);\n  } else {\n    null;\n  }\n\n  for(var i=0; i<comparisonLength; i++){\n    if(compStr.charAt(i) !== dnaStr.charAt(i)){\n      result++;\n    }\n  }\n  return result;\n}	\N	f	0	1	2014-01-29 03:38:53	2014-01-29 03:38:53	400	point-mutations.js
875	17	4bcd166cb0e73628048a937e	hibernating	ruby	nucleotide-count	class DNA < String\n\n  def nucleotides\n    @nucleotides = { 'C' => 0, 'G' => 0, 'A' => 0, 'T' => 0, 'U' => 0 }  \n  end\n\n  def count(nucleotide)\n    raise ArgumentError, 'Argument is not vald nucleotide' unless nucleotides.has_key?(nucleotide)\n    scan(nucleotide).count\n  end\n\n  def nucleotide_counts\n    split('').each_with_object(nucleotides) { |nucleotide, nucleotide_count| nucleotide_count[nucleotide] += 1 }.delete_if {|key| key == 'U'}\n  end\n\nend	\N	f	3	2	2014-02-04 03:25:41	2014-02-04 03:25:41	401	nucleotide-count.rb
876	17	1a6a3ba3b0fe512cc03f3e38	superseded	ruby	nucleotide-count	class DNA < String\n\n  def count(nucleotide)\n    raise ArgumentError, 'Argument is not vald nucleotide' unless ['C','G','A','T','U'].include? nucleotide\n    scan(nucleotide).count\n  end\n\n  def nucleotide_counts\n    nucleotde_count = {'C' => 0, 'G' => 0, 'A' => 0, 'T' => 0}\n    split('').each_with_object(nucleotde_count) { |nucleotide, nucleotde_count| nucleotde_count[nucleotide] += 1 }\n  end\n\nend	\N	f	4	1	2014-04-24 01:49:06	2014-04-24 01:49:06	401	nucleotide-count.rb
877	17	f3d4fa1267b137367f22ae95	done	clojure	rna-transcription	(ns dna)\n\n(defn transcribe [ch]\n  (if (= ch \\T)\n    \\U\n    ch))\n\n(defn to-rna [s]\n  (apply str (map transcribe s)))	\N	f	2	1	2014-02-03 13:01:53	2014-02-03 13:01:53	402	rna-transcription.clj
878	17	20c4db935d8992f81382555c	superseded	python	bob	class Bob():\n\n    messages = {\n        "Tom-ay-to, tom-aaaah-to.": "Whatever.",\n        "Let's go make out behind the gym!": "Whatever.",\n        "It's OK if you don't want to go to the DMV.": "Whatever.",\n        "Ending with ? means a question.": "Whatever.",\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        try:\n            return self.messages[message]\n        except:\n            return "Fine. Be that way!"	\N	f	3	1	2014-01-21 15:43:44	2014-01-21 15:43:44	403	bob.py
879	17	d1d0b2b72267bb43e64bfe38	superseded	python	bob	class Bob():\n\n    messages = {\n        "Tom-ay-to, tom-aaaah-to.": "Whatever.",\n        "Let's go make out behind the gym!": "Whatever.",\n        "It's OK if you don't want to go to the DMV.": "Whatever.",\n        "Ending with ? means a question.": "Whatever.",\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        if not message or not message.strip():\n            return "Fine. Be that way!"\n        try:\n            return self.messages[message]\n        except KeyError, e:\n            return "Whatever."	\N	f	3	3	2014-01-23 07:25:22	2014-01-23 07:25:22	403	bob.py
880	17	e29eab8a2a8d3fe9ae6e1c98	done	python	bob	class Bob():\n\n    def hey(self, message):\n        if not message or not message.strip():\n            return "Fine. Be that way!"\n        if message.upper() == message:\n            return "Woah, chill out!"\n        if message.endswith("?"):\n            return "Sure."\n        return "Whatever."	\N	f	0	5	2014-02-06 01:00:50	2014-02-06 01:00:50	403	bob.py
882	17	a232a5a6e1ca40d0193b5d5a	superseded	python	bob	class Bob():\n\n    messages = {\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        if not message or not message.strip():\n            return "Fine. Be that way!"\n        try:\n            return self.messages[message]\n        except KeyError, e:\n            return "Whatever."	\N	f	5	4	2014-05-08 23:43:33	2014-05-08 23:43:33	403	bob.py
884	17	ec81e1c34ef86eab34b6de5c	superseded	go	clock	package clock\n\nimport "fmt"\n\ntype Clock struct {\n  minutes int\n}\n\nfunc New(hours, minutes int) Clock {\n  return Clock{hours*60 + minutes}\n}\n\nfunc (c Clock) String() string {\n  return fmt.Sprintf("%02d:%02d", c.minutes/60, c.minutes%60)\n}\n\nfunc (c Clock) Add(minutes int) Clock {\n  totalMinutes := c.minutes + minutes\n\n  if totalMinutes > 1440 {\n    totalMinutes -= 1440\n  } else if totalMinutes < 0 {\n    totalMinutes += 1440\n  }\n\n  return Clock{totalMinutes}\n}	\N	f	3	1	2014-01-14 09:47:56	2014-01-14 09:47:56	405	clock.go
885	17	48c9753c7fa9e74ceed96563	pending	go	clock	package clock\n\nimport "fmt"\n\ntype Clock struct {\n  minutes int\n}\n\nfunc New(hours, minutes int) Clock {\n  return Clock{hours*60 + minutes}\n}\n\nfunc (c Clock) String() string {\n  return fmt.Sprintf("%02d:%02d", c.minutes/60, c.minutes%60)\n}\n\nfunc (c Clock) Add(minutes int) Clock {\n  c.minutes = (c.minutes + minutes) % 1440\n\n  if c.minutes < 0 {\n    c.minutes += 1440\n  }\n\n  return c\n}	\N	f	3	2	2014-01-27 00:39:30	2014-01-27 00:39:30	405	clock.go
886	17	dc741896d037500ec2da67fc	pending	go	bottles	package bottles\n\nimport (\n\t"fmt"\n\t"strings"\n)\n\nfunc numToString(num int) string {\n\tswitch num {\n\tcase 0:\n\t\treturn "No more bottles"\n\tcase 1:\n\t\treturn "1 bottle"\n\tdefault:\n\t\treturn fmt.Sprintf("%d bottles", num)\n\t}\n}\n\nfunc firstPart(num int) string {\n\tnums := numToString(num)\n\treturn fmt.Sprintf("%s of beer on the wall, %s of beer.", nums, strings.ToLower(nums))\n}\n\nfunc secondPart(num int) string {\n\tpronoun := "one"\n\tswitch {\n\tcase num < 0:\n\t\treturn "Go to the store and buy some more, 99 bottles of beer on the wall."\n\tcase num == 0:\n\t\tpronoun = "it"\n\t}\n\treturn fmt.Sprintf("Take %s down and pass it around, %s of beer on the wall.",\n\t\tpronoun, strings.ToLower(numToString(num)))\n}\n\nfunc Verse(num int) string {\n\treturn firstPart(num) + "\\n" + secondPart(num-1) + "\\n"\n}\n\nfunc Verses(upperBound, lowerBound int) string {\n\tacc := make([]string, upperBound-lowerBound+1)\n\ti := 0\n\tfor idx := upperBound ; idx >= lowerBound ; idx-- {\n\t\tacc[i] = Verse(idx)\n\t\ti++\n\t}\n\treturn strings.Join(acc, "\\n") + "\\n"\n}\n\nfunc Sing() string {\n\treturn Verses(99, 0)\n}	\N	f	2	1	2014-02-09 14:08:48	2014-02-09 14:08:48	406	bottles.go
888	17	1ad7b1a5c2eb306de8149045	done	haskell	trinary	module Trinary ( showTri\n               , readTri\n               , showBase\n               , readBase\n               )\nwhere\n\nimport Data.List (foldl', unfoldr, elemIndex, genericDrop)\n\ndigits :: String\ndigits = "0123456789abcdefghijklmnopqrstuvwxyz"\n\ntoDigit :: (Integral a) => a -> Maybe Char\ntoDigit n = \n  case take 1 (genericDrop n digits) of\n    (c:[]) -> Just c\n    _      -> Nothing\n\nfromDigit :: (Num a) => Char -> a\nfromDigit chr = \n  case elemIndex chr digits of\n    Nothing -> error $ "Invalid digit: '" ++ (chr:"'")\n    Just n -> fromIntegral n\n\nshowBase :: (Integral a, Show a) => a -> a -> String\nshowBase _ 0 = "0"\nshowBase b n = reverse $ unfoldr show_ n\n  where\n    show_ 0   = Nothing\n    show_ val = \n      let (r, d) = divMod val $! b in\n      case toDigit d of\n        Nothing -> error $ "No representation for digit value " ++ show d\n        Just c  -> Just (c, r)\n\nreadBase :: (Integral a, Show a) => a -> String -> a\nreadBase b = foldl' read_ 0\n  where\n    read_ acc c = if dig < b then\n                    b*acc + dig\n                  else\n                    error $ "Error, invalid digit value: " ++ show dig\n      where\n        dig = fromDigit c\n\nshowTri :: (Integral a, Show a) => a -> String\nshowTri = showBase 3\n\nreadTri :: (Integral a, Show a) => String -> a\nreadTri = readBase 3	\N	f	4	2	2014-04-30 08:31:40	2014-04-30 08:31:40	407	Trinary.hs
889	17	7ff5c339c3bc2a35066c60a1	pending	python	anagram	class Anagram:\n    def __init__(self, test_word):\n        self.word = test_word\n        self.sorted_word = self._sort_word(test_word)\n\n    def match(self, candidates):\n        matches = []\n        for candidate in candidates:\n            if candidate == self.word:\n                continue\n            if self._sort_word(candidate) == self.sorted_word:\n                matches.append(candidate)\n        return matches\n\n    def _sort_word(self, word):\n        return sorted(list(word.lower()))	\N	f	3	1	2014-03-27 19:12:27	2014-03-27 19:12:27	408	anagram.py
890	17	18d4459177929f17b2bad5b1	done	elixir	grains	defmodule Grains do\n\n  def square(n) when is_integer(n) and n >= 1, do: do_square(n, 1)\n\n  defp do_square(1, acc), do: acc\n  defp do_square(n, acc), do: do_square(n-1, 2*acc)\n\n  # 1 + 2 + 4 + ... + 2^n = 2^(n+1) - 1\n  def total, do: square(65) - 1\n\nend	\N	f	3	1	2014-01-08 04:49:43	2014-01-08 04:49:43	409	grains.exs
891	17	6a8d3ab6d2934402a5a27fd5	pending	clojure	phone-number	(ns phone)\n\n(defn number [numString]\n  (def cleanNum (clojure.string/replace numString #"[^0-9]+" ""))\n  (cond\n    (= 10 (count cleanNum))cleanNum\n    (and (= 11(count cleanNum)) (= \\1 (first cleanNum))) (subs cleanNum 1)\n    :else "0000000000"\n   )\n)\n\n(defn area-code [numString]\n  (subs (number numString) 0 3)\n)\n\n(defn pretty-print [numString]\n  (def cleanNum (number numString))\n  (str "(" (subs cleanNum 0 3) ") " (subs cleanNum 3 6) "-" (subs cleanNum 6))\n)\n\n(number "123.456.7890")	\N	f	3	1	2014-02-18 13:27:22	2014-02-18 13:27:22	410	phone.clj
895	22	8123e56b3e890728903abb4d	superseded	ruby	word-count	require 'strscan'\n\nclass Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    group_words.each_with_object({}) do |(k,v),h|\n      h[k] = v.size\n    end\n  end\n\n  private\n  def words\n    @input.split(/\\W+/)\n  end\n\n  def group_words\n    words.group_by { |word| word.downcase }\n  end\nend	\N	f	3	3	2014-04-07 19:25:18	2014-04-07 19:25:18	413	word-count.rb
896	22	30d4d222b0d6fb59623b4dc2	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    uniq_words.each_with_object({}) do |word,acc|\n      acc[word] = normalized_words.count(word)\n    end\n  end\n\n  private\n  def words\n    @words ||= @input.split(/\\W+/)\n  end\n\n  def normalized_words\n    @normalized_words = words.map(&:downcase)\n  end\n\n  def uniq_words\n    @uniq_words = normalized_words.uniq\n  end\nend	\N	f	0	4	2014-04-12 19:57:22	2014-04-12 19:57:22	413	word-count.rb
897	22	d1a8409a11a33b318bb5f285	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    uniq_words.each_with_object({}) do |word,acc|\n      acc[word] = normalized_words.count(word)\n    end\n  end\n\n  private\n  def words\n    @words ||= @input.split(/\\W+/)\n  end\n\n  def normalized_words\n    @normalized_words ||= words.map(&:downcase)\n  end\n\n  def uniq_words\n    @uniq_words ||= normalized_words.uniq\n  end\nend	\N	f	0	5	2014-04-19 11:26:07	2014-04-19 11:26:07	413	word-count.rb
898	22	44f48a46ca36511f84830a76	superseded	ruby	word-count	require 'strscan'\n\nclass Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    init_word_count\n    while has_more_words? do\n      update_count(next_word)\n      skip_punctuation \n    end\n    @word_count\n  end\n\n  private\n  def next_word\n    word = @scan.scan(/\\w+/)\n  end\n\n  def normalize_word(word)\n    word.downcase\n  end\n\n  def update_count(word)\n    @word_count[normalize_word(word)] += 1\n  end\n\n  def init_word_count\n    @word_count = Hash.new { |hash,key|  hash[key] = 0 }\n    @scan = StringScanner.new(@input)\n  end\n\n  def has_more_words? \n    !@scan.eos?\n  end\n\n  def skip_punctuation\n    @scan.skip(/\\W+/)\n  end\nend	\N	f	3	1	2014-04-21 07:13:28	2014-04-21 07:13:28	413	word-count.rb
899	22	7ffc17d81e8ddc6bef89c76d	superseded	ruby	word-count	require 'strscan'\n\nclass Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    init_word_count\n    normalized_words.each do |word|  \n      update_count(word)\n    end\n    @word_count\n  end\n\n  private\n  def words\n    @input.split(/\\W+/)\n  end\n\n  def normalized_words\n    words.map(&:downcase)\n  end\n\n  def update_count(word)\n    @word_count[word] += 1\n  end\n\n  def init_word_count\n    @word_count = Hash.new { |hash,key|  hash[key] = 0 }\n  end\nend	\N	f	1	2	2014-05-15 11:57:06	2014-05-15 11:57:06	413	word-count.rb
900	22	c79c438275c076d207c49e39	done	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    uniq_words.each_with_object({}) do |word,acc|\n      acc[word] = normalized_words.count(word)\n    end\n  end\n\n  private\n  def normalized_words\n    @words ||= @input.downcase.scan(/\\w+/)\n  end\n\n  def uniq_words\n    @uniq_words ||= normalized_words.uniq\n  end\nend	\N	f	5	6	2014-06-05 04:58:28	2014-06-05 04:58:28	413	word-count.rb
902	22	1147a519c5af8596eb31d321	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isNumber)\nimport Data.List.Split (chunksOf)\nimport Control.Monad (join)\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nnumber :: String -> String\nnumber s = theNumber justNumbers\n  where justNumbers = filter isNumber s\n        theNumber ns\n          | length ns == 10 = ns\n          | ('1':ns') <- ns, length ns' == 10 = ns'\n          | otherwise = "0000000000"\n\nprettyPrint :: String -> String\nprettyPrint tn = "(" ++ ac ++ ") " ++ prefix ++ "-" ++ suffix\n  where (ac:prefix:rest) = chunksOf 3 $ number tn\n        suffix = join rest	\N	f	0	1	2014-04-02 11:53:40	2014-04-02 11:53:40	415	phone-number.hs
903	22	d0f7953f4da245ff7e70b861	done	ruby	space-age	# class SpaceAge\nclass SpaceAge\n  attr_reader :seconds\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  def in_earth_years\n    @seconds.to_f / 31_557_600\n  end\n\n  {\n    'mercury' => 0.2408467,\n    'venus'   => 0.61519726,\n    'earth'   => 1,\n    'mars'    => 1.8808158,\n    'jupiter' => 11.862615,\n    'saturn'  => 29.447498,\n    'uranus'   => 84.016846,\n    'neptune'   => 164.79132\n  }.each do |k, v|\n    define_method "on_#{k}" do\n      (in_earth_years / v).round(2)\n    end\n  end\nend	\N	f	3	1	2014-03-10 07:03:15	2014-03-10 07:03:15	416	space_age.rb
904	22	3a37d11fda6d53abf7db2567	done	coffeescript	bob	isShouting = (message) ->\n  message.replace(/[^a-z]/gi, '').match(/^[A-Z]+$/)\n\nclass Bob\n  hey: (message) ->\n    response = switch\n      when !message or message.match(/^\\s*$/) then 'Fine. Be that way!'\n      when isShouting(message) then 'Woah, chill out!'\n      when message.match(/\\?$/) then 'Sure.'\n      else 'Whatever.'\n\n    response\n\nmodule.exports = Bob	\N	f	0	1	2014-05-30 00:11:59	2014-05-30 00:11:59	417	bob.coffee
905	22	278907ef87fa0383cdb0783a	done	ruby	point-mutations	class DNA\n\n\tdef initialize dna\n\n\t\tif dna.empty?\n\t\t\t@dna = dna \n\t\telsif not dna.is_a?String\n\t\t\traise ArgumentError, "Value must be a string"\n\t\telse\n\t\t\t@dna = dna.to_s\n\t\tend\n\tend\n\n\tdef hamming_distance dna_to_compare\n\t\tif dna_to_compare.empty? or @dna.empty?\n\t\t\treturn 0\n\t\telsif not dna_to_compare.is_a?String\n\t\t\traise ArgumentError, "Value must be a string"\n\t\tend\n\t\thamming_distance = 0\n\t\tend_point = @dna.length\n\t\tlength_difference = @dna.length - dna_to_compare.length\n\n\t\tif length_difference > 0\n\t\t\tend_point = dna_to_compare.length\n\t\tend\n\t\t\n\t\tend_point -= 1;\n\n\t\tfor i in ( 0..end_point )\n\t\t       if @dna[i] != dna_to_compare[i]\n\t\t       \t\thamming_distance += 1\n\t\t \tend\n       \t\tend\n\n\t\treturn hamming_distance\n\n\tend\n\nend	\N	f	4	1	2014-05-13 10:03:42	2014-05-13 10:03:42	418	point-mutations.rb
907	22	0195b6677020c4696f5e1983	hibernating	ruby	leap	module Year\n  def self.leap?(year)\n    divisible_by?(year, 4) && !edge_case(year)\n  end\n\n  def self.divisible_by?(year, num)\n    year % num == 0\n  end\n\n  def self.edge_case(year)\n    divisible_by?(year, 100) && !divisible_by?(year, 400)\n  end\nend	\N	f	5	1	2014-04-10 23:15:04	2014-04-10 23:15:04	420	year.rb
909	22	ca512b80935dfa9df6c37b1f	superseded	javascript	simple-cipher	function generateRandomKey() {\n  var i, key = '', chars = 'abcdefghijklmnopqrstuvwxyz', length = chars.length;\n  for (i = 0; i < 100; i++) {\n    key += chars.charAt(Math.floor(Math.random() * length));\n  }\n  return key;\n}\n\nfunction encode(plainChar, startFrom) {\n  plainChar = plainChar.charCodeAt(0);\n  startFrom = startFrom.charCodeAt(0);\n  plainChar += startFrom - 97;\n  if (plainChar > 122) {\n    plainChar -= 26;\n  }\n  return String.fromCharCode(plainChar);\n}\n\nfunction decode(encodedChar, startFrom) {\n  encodedChar = encodedChar.charCodeAt(0);\n  startFrom = startFrom.charCodeAt(0);\n  encodedChar -= startFrom - 97;\n  if (encodedChar < 97) {\n    encodedChar += 26;\n  }\n  return String.fromCharCode(encodedChar);\n}\n\nfunction validateKey(key) {\n  if (!/^[a-z]+$/.test(key)) {\n    throw new Error('Bad key');\n  }\n  return key;\n}\n\nfunction Cipher(key) {\n  this.key = validateKey(key === undefined ? generateRandomKey() : key);\n}\n\nCipher.prototype.encode = function(input) {\n  var i, keyCounter = 0, result = '';\n  for (var i = 0; i < input.length; i++) {\n    result += encode(input.charAt(i), this.key.charAt(keyCounter++));\n    if (keyCounter >= this.key.length) {\n      keyCounter = 0;\n    }\n  }\n  return result;\n}\n\nCipher.prototype.decode = function(input) {\n  var i, keyCounter = 0, result = '';\n  for (var i = 0; i < input.length; i++) {\n    result += decode(input.charAt(i), this.key.charAt(keyCounter++));\n    if (keyCounter >= this.key.length) {\n      keyCounter = 0;\n    }\n  }\n  return result;\n}\n\nmodule.exports = Cipher;	\N	f	3	1	2014-04-03 00:21:42	2014-04-03 00:21:42	421	simple-cipher.js
910	22	27a0da1462dd965fd1c45f0a	done	javascript	bob	var Bob = function() {\n  function Bob() {}\n\n  Bob.prototype.hey = function(expression) {\n    var response;\n    if (expression.match(patterns.silence))\n      response = 'Fine. Be that way!';\n    else if (expression.match(patterns.yelling))\n      response = 'Woah, chill out!'\n    else if (expression.match(patterns.question))\n      response = 'Sure.'\n    else if (expression.match(patterns.anything))\n      response = 'Whatever.'\n    return response;\n  }\n\n  var patterns = {\n    silence: /^\\s*$/,\n    yelling: /^[^a-z\\xe4]*[A-Z][^a-z\\xe4]*$/,\n    question: /\\?$/,\n    anything: /^/\n  };\n\n  return Bob;\n}();\n\nmodule.exports = Bob;	\N	f	1	1	2014-06-10 01:25:33	2014-06-10 01:25:33	422	bob.js
911	22	c33c47655d92ca8db435d4d1	superseded	ruby	hamming	class Hamming\n\n  def self.compute(oligonucleotide, mutation)\n    oligonucleotide.chars.zip(mutation.chars).select do |oligonucleotide, mutation|\n      hybridization_error?(oligonucleotide, mutation)\n    end.count\n  end\n\n  def self.hybridization_error?(oligonucleotide, mutation)\n    (oligonucleotide and mutation) and (oligonucleotide != mutation)\n  end\nend	\N	f	0	1	2014-02-25 13:17:11	2014-02-25 13:17:11	423	hamming.rb
912	22	7779acdd206471a38f037c42	superseded	ruby	hamming	class Hamming\n\n  def self.compute(oligonucleotide_x, oligonucleotide_y)\n    oligonucleotide_x.chars.zip(oligonucleotide_y.chars).count do |oligonucleotide_x, oligonucleotide_y |\n      hybridization_error?(oligonucleotide_x, oligonucleotide_y)\n    end\n  end\n\n  def self.hybridization_error?(oligonucleotide_x, oligonucleotide_y)\n    (oligonucleotide_x && oligonucleotide_y) && (oligonucleotide_x != oligonucleotide_y)\n  end\nend	\N	f	0	2	2014-03-20 16:39:50	2014-03-20 16:39:50	423	hamming.rb
913	22	74d51019ccc591e0e248d3fd	superseded	ruby	hamming	 class Hamming\n\n def self.compute(oligonucleotide_x, oligonucleotide_y)\n    oligonucleotide_x.chars.zip(oligonucleotide_y.chars).count do |x, y |\n      hybridization_error?(x, y)\n    end\n  end\n\n  def self.hybridization_error?(x, y)\n    (x && y) && (x != y)\n  end\nend	\N	f	2	3	2014-03-23 16:35:02	2014-03-23 16:35:02	423	hamming.rb
914	22	82c4732d20d3898949dd5106	done	ruby	hamming	class Hamming\n\n  def self.compute(oligonucleotide_x, oligonucleotide_y)\n    oligonucleotide_x.chars.zip(oligonucleotide_y.chars).count do |x, y|\n      hybridization_error?(x, y)\n    end\n  end\n\n  def self.hybridization_error?(x, y)\n    (x && y) && (x != y)\n  end\nend	\N	f	5	4	2014-04-14 09:15:58	2014-04-14 09:15:58	423	hamming.rb
915	22	a1b06df4b8533debaf156158	pending	clojure	grade-school	(ns school)\n\n(defn add [db student grade]\n  (update-in db [grade] (fnil conj []) student))\n\n(defn grade [db grade]\n  (get db grade []))\n\n(defn sorted [db]\n  (into (sorted-map) (map (fn [[k v]] [k (sort v)]) db)))	\N	f	3	1	2014-05-01 15:46:30	2014-05-01 15:46:30	424	school.clj
916	22	3b1044b0c3d88f17abbc36a3	superseded	clojure	bob	(ns bob)\n\n(defn response-for [words]\n  (cond\n    (re-find #"^\\s*$" words) "Fine. Be that way!"\n    (and (re-find #"[A-Z]" words) (re-find #"^[^a-z]+$" words)) "Woah, chill out!"\n    (re-find #"\\?$" words) "Sure."\n    :else "Whatever."))	\N	f	1	1	2014-03-15 06:39:55	2014-03-15 06:39:55	425	bob.clj
919	22	1f540d3d01a0d36f81aef341	done	javascript	word-count	'use strict';\n\nmodule.exports = function (input) {\n  var counts = {};\n  var tokens = String(input).match(/\\b[a-z0-9]+\\b/gi) || [];\n\n  tokens.forEach(function (token) {\n    var word = token.toLowerCase();\n    word in counts ? counts[word] += 1 : counts[word] =  1;\n  });\n\n  return counts;\n};	\N	f	3	1	2014-05-04 12:53:21	2014-05-04 12:53:21	426	word-count.js
920	22	d9eebeba91d5e2d65f85fba2	pending	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\nfunc WordCount(input string) Histogram {\n\th := make(Histogram)\n\tinput = strings.ToLower(input)\n\tfor _, f := range strings.FieldsFunc(input, func(r rune) bool {\n\t\treturn unicode.In(r, unicode.Space, unicode.Symbol, unicode.Punct)\n\t}) {\n\t\th[f]++\n\t}\n\treturn h\n}	\N	f	3	3	2014-03-22 16:34:51	2014-03-22 16:34:51	427	word_count.go
921	22	6977d7f2dfed84c43bc6bbe9	superseded	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\nfunc WordCount(input string) Histogram {\n\th := make(Histogram)\n\tfor _, f := range strings.FieldsFunc(input, func(r rune) bool {\n\t\treturn unicode.IsSpace(r) || unicode.IsSymbol(r) || unicode.IsPunct(r)\n\t}) {\n\t\th[strings.ToLower(f)]++\n\t}\n\treturn h\n}	\N	f	3	1	2014-04-01 14:29:27	2014-04-01 14:29:27	427	word_count.go
922	22	c67be8fc3f67e889e223568b	superseded	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\nfunc WordCount(input string) Histogram {\n\th := make(Histogram)\n\tinput = strings.ToLower(input)\n\tfor _, f := range strings.FieldsFunc(input, func(r rune) bool {\n\t\treturn unicode.IsSpace(r) || unicode.IsSymbol(r) || unicode.IsPunct(r)\n\t}) {\n\t\th[f]++\n\t}\n\treturn h\n}	\N	f	3	2	2014-05-08 04:25:48	2014-05-08 04:25:48	427	word_count.go
924	22	b858b799926b60634b9a21e2	done	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  #\n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l), do: do_count(l, 0)\n\n  defp do_count(l, acc) do\n    case l do\n      [] -> acc\n      [_|t] -> do_count(t, acc + 1)\n    end\n  end\n\n  @spec reverse(list) :: list\n  def reverse(l), do: do_reverse(l, [])\n\n  defp do_reverse(l, acc) do\n    case l do\n      [] -> acc\n      [h|t] -> do_reverse(t, [h|acc])\n    end\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f), do: do_map(l, f, []) |> reverse\n\n  defp do_map(l, f, acc) do\n    case l do\n      [] -> acc\n      [h|t] -> do_map(t, f, [f.(h)|acc])\n    end\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f), do: do_filter(l, f, []) |> reverse\n\n  def do_filter(l, f, acc) do\n    case l do\n      [] -> acc\n      [h|t] ->\n        if f.(h), do: acc = [h|acc]\n        do_filter(t, f, acc)\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce([], acc, _), do: acc\n  def reduce([h|t], acc, f), do: reduce(t, f.(acc, h), f)\n\n  @spec append(list, list) :: list\n  def append(a, b), do: reverse(a) |> do_append(b)\n\n  defp do_append(a, b) do\n    case a do\n      [] -> b\n      [h|t] -> do_append(t, [h|b])\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n    ll |> reverse |> reduce([], &(append(&2, &1)))\n  end\nend	\N	f	3	3	2014-03-08 21:30:22	2014-03-08 21:30:22	428	list_ops.exs
925	22	fa3898ffef40657d312e2388	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  #\n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count([]), do: 0\n  def count([_|t]), do: 1 + count(t)\n\n  @spec reverse(list) :: list\n  def reverse(l), do: reverse(l, [])\n  def reverse([], acc), do: acc\n  def reverse([h|t], acc), do: reverse(t, [h|acc])\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f), do: map(l, f, [])\n  def map([], _, acc), do: acc\n  def map([h|t], f, acc), do: [f.(h)|map(t, f, acc)]\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f), do: filter(l, f, [])\n  def filter([], _, acc), do: acc\n  def filter([h|t], f, acc) do\n    if f.(h) do\n      [h|filter(t, f, acc)]\n    else\n      filter(t, f, acc)\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce([], acc, _), do: acc\n  def reduce([h|t], acc, f), do: reduce(t, f.(acc, h), f)\n\n  @spec append(list, list) :: list\n  def append([], []), do: []\n  def append([], b), do: b\n  def append([a], b), do: [a|b]\n  def append([h|t], b), do: [h|append(t, b)]\n\n  @spec concat([[any]]) :: [any]\n  def concat([]), do: []\n  def concat(ll), do: concat(ll, [])\n  def concat([], acc), do: acc\n  def concat([h|t], acc) when is_list(h), do: concat(h, concat(t, acc))\n  def concat([h|t], acc), do: [h|concat(t, acc)]\nend	\N	f	1	1	2014-04-24 13:40:18	2014-04-24 13:40:18	428	list_ops.exs
939	27	2664a79b3c4c9fc44970eba4	superseded	ruby	raindrops	class Raindrops\n\n  def convert(n)\n    sounds = []\n    sounds << "Pling" if n % 3 == 0\n    sounds << "Plang" if n % 5 == 0\n    sounds << "Plong" if n % 7 == 0\n    sounds.empty? ? n.to_s : sounds.join\n  end\n\nend	\N	f	1	1	2013-11-22 20:36:35	2013-11-22 20:36:35	435	raindrops.rb
928	22	deb598279c9ebe9426d2121c	hibernating	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar (Day, addDays, fromGregorian, gregorianMonthLength)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday = PlaceHolder | Monday | Tuesday | Wednesday\n             | Thursday | Friday | Saturday | Sunday\n             deriving (Enum, Eq)\n\ndata Schedule = First | Second | Third | Fourth | Last | Teenth\n              deriving (Enum, Eq)\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay schedule weekday year month = case schedule of\n  Teenth ->\n      firstWeekdayFrom weekday $ fromGregorian year month 13\n  Last ->\n      firstWeekdayFrom weekday beginLastWeek\n      where beginLastWeek = fromGregorian year month (monthLength - 6)\n            monthLength = gregorianMonthLength year month\n  nth ->\n      addDays (7 * asIntegral nth) firstWeekday\n      where firstWeekday = firstWeekdayFrom weekday $ fromGregorian year month 1\n\nfirstWeekdayFrom :: Weekday -> Day -> Day\nfirstWeekdayFrom weekday day = addDays (diff `mod` 7) day\n  where diff = asIntegral weekday - asIntegral (weekdayOn day)\n\nweekdayOn :: Day -> Weekday\nweekdayOn day = let (_, _, weekdayAsInt) = toWeekDate day\n                in toEnum weekdayAsInt\n\nasIntegral :: (Enum a, Integral b)  => a -> b\nasIntegral = fromIntegral . fromEnum	\N	f	4	2	2014-05-03 03:51:00	2014-05-03 03:51:00	430	Meetup.hs
929	27	d1cd0d084775bc2f6cd4098a	done	haskell	robot-name	module Robot where\n\nimport Control.Concurrent.MVar\nimport System.Random\n\nnewtype Robot = Robot { name :: MVar String }\n\nmkRobot :: IO Robot\nmkRobot = genName >>= newMVar >>= (return . Robot)\n\nrobotName :: Robot -> IO String\nrobotName = readMVar . name \n\nresetName :: Robot -> IO String\nresetName r = genName >>= swapMVar (name r)\n\ngenName :: IO String\ngenName = do c1 <- randomRIO ('A', 'Z')\n             c2 <- randomRIO ('A', 'Z')\n             n <- randomRIO (100::Int, 999::Int)\n             return $ [c1, c2] ++ show n	\N	f	1	1	2014-01-11 04:32:21	2014-01-11 04:32:21	431	robot-name.hs
930	27	327d16542454e2c94a361e6c	done	ruby	hamming	class Hamming\n\n  def self.compute(strand_one, strand_two)\n    strand_one.split('').zip(strand_two.split('')).select do |one,two|\n      two && one != two\n    end.count\n  end\n\nend	\N	f	1	1	2013-12-28 17:39:44	2013-12-28 17:39:44	432	hamming.rb
931	27	41a3bc120bff3df0a7ac6720	superseded	javascript	word-count	var words = function(text) {\n    text = text.toLowerCase();\n    var words = text.match(/\\w+/g);\n    return words.reduce(function(counts, word) {\n        var wordCount = counts[word];\n        counts[word] = (wordCount === undefined) ? 1 : wordCount + 1;\n        return counts;\n    }, {});\n};\n\nmodule.exports = words;	\N	f	1	2	2014-01-12 13:24:45	2014-01-12 13:24:45	433	word-count.js
932	27	e2d5b3d372294778c160374e	superseded	javascript	word-count	var words = function(string) {\n    var counts = {};\n    string = string.toLowerCase();\n    var words = string.match(/\\w+/g);\n    for(var i = 0; i < words.length; i++) {\n        var word = words[i];\n        var wordCount = counts[word];\n        counts[word] = wordCount === undefined ? 1 : wordCount + 1;\n    }\n    return counts;\n};\n\nmodule.exports = words;	\N	f	1	1	2014-03-23 01:09:55	2014-03-23 01:09:55	433	word-count.js
933	27	43decad729ff7b0d812995db	superseded	javascript	word-count	var words = function(text) {\n    var words = text.toLowerCase().match(/\\w+/g);\n    return words.reduce(function(counts, word) {\n        var wordCount = counts[word];\n        counts[word] = (wordCount === undefined) ? 1 : wordCount + 1;\n        return counts;\n    }, {});\n};\n\nmodule.exports = words;	\N	f	0	3	2014-04-26 13:43:56	2014-04-26 13:43:56	433	word-count.js
934	27	e5e9bad6125680fd25a84766	pending	javascript	word-count	var words = function(str) {\n    var words = str.toLowerCase().match(/\\w+/g);\n    return words.reduce(function(counts, word) {\n        counts[word] ? counts[word]++ : counts[word] = 1;\n        return counts;\n    }, {});\n};\n\nmodule.exports = words;	\N	f	0	4	2014-06-16 03:39:41	2014-06-16 03:39:41	433	word-count.js
935	27	18756853f6d4b183248d2b54	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only [trim]]))\n\n(defn response-for [phrase]\n  (let [matches (fn [& patterns] (every? #(re-find % phrase) patterns))\n        shouting? (matches #"\\p{Upper}" #"^[^\\p{Lower}]*$")\n        question? (matches #"\\?$")\n        quiet?    (matches #"^\\s*$")] \n    (cond\n      shouting? "Woah, chill out!"\n      question? "Sure."\n      quiet?    "Fine. Be that way!"\n      :else     "Whatever.")))	\N	f	1	2	2013-10-23 09:59:20	2013-10-23 09:59:20	434	bob.clj
936	27	8d74b4e8c7f91375b5db0db4	superseded	clojure	bob	(ns bob\n  (:use clojure.string))\n\n(defn shouting? [phrase]\n  (and (re-find #"\\p{Upper}" phrase)\n      (not (re-find #"\\p{Lower}" phrase))))\n\n(defn quiet? [phrase]\n  (= (trim phrase) ""))\n\n(defn question? [phrase]\n  (= \\? (last phrase)))\n\n(defn response-for [phrase]\n  (cond\n    (shouting? phrase) "Woah, chill out!"\n    (question? phrase) "Sure."\n    (quiet? phrase) "Fine. Be that way!"\n    :else "Whatever."))	\N	f	1	1	2013-12-08 04:05:28	2013-12-08 04:05:28	434	bob.clj
937	27	5c33265ea24a13460bedff1f	done	clojure	bob	(ns bob)\n\n(defn response-for [phrase]\n  (let [matches (fn [& patterns] (every? #(re-find % phrase) patterns))\n        shouting? (matches #"\\p{Upper}" #"^[^\\p{Lower}]*$")\n        question? (matches #"\\?$")\n        quiet?    (matches #"^\\s*$")] \n    (cond\n      shouting? "Woah, chill out!"\n      question? "Sure."\n      quiet?    "Fine. Be that way!"\n      :else     "Whatever.")))	\N	f	1	3	2014-03-29 22:30:10	2014-03-29 22:30:10	434	bob.clj
938	27	fd771d8a0725744147d8a473	superseded	ruby	raindrops	class Raindrops\n\n  def convert(n)\n    sounds = sounds(n)\n    sounds.empty? ? n.to_s : sounds\n  end\n\n  private\n\n  def sounds(n)\n    factor_sounds.each_with_object("") { |(factor, sound), sounds|\n      sounds << sound if n % factor == 0\n    }\n  end\n\n  def factor_sounds\n    { 3 => "Pling", 5 => "Plang", 7 => "Plong" }\n  end\n\nend	\N	f	1	2	2013-10-13 23:49:56	2013-10-13 23:49:56	435	raindrops.rb
941	27	d9223cfe6e7bec3f2fe01f5c	done	ruby	leap	class Year\n  def self.leap?(test) #Is there another way to do this without calling self?\n    case\n    when test % 400 == 0  \n      true\n    when test % 100 == 0\n      false\n    when test % 4 == 0\n      true\n    end\n  end\nend	\N	f	1	1	2014-02-19 21:29:21	2014-02-19 21:29:21	436	year.rb
943	27	79ca4bfabb20c1ebbdff26c6	done	ruby	bob	class Bob\n  def hey(message)\n    response = ResponseFactory.create(message.to_str)\n    response.message\n  end\n\nend\n\nclass ShoutResponse\n  def message\n\t'Woah, chill out!'\n  end\nend\n\nclass QuestionResponse\n  def message\n\t'Sure.'\n  end  \nend\n\nclass SilenceResponse\n  def message\n\t'Fine. Be that way!'\n  end  \nend\n\nclass CarelessResponse\n  def message\n\t'Whatever.'\n  end\nend\n\nclass ResponseFactory\n\tdef self.create(phrase)\t        \t\t\t\t\t\t\n\t\tif (phrase.strip.empty?) #i hate that I have to strip here is there a better way?\tphrase.whiteSpace?\t\t\n\t\t\treturn SilenceResponse.new\n\t\telsif (phrase == phrase.upcase)\t\t\t\n\t\t\treturn ShoutResponse.new\n\t\telsif (phrase.end_with?('?'))\t\t\t\n\t\t\treturn QuestionResponse.new\n\t\telse\n\t\t\treturn CarelessResponse.new\n\t\tend\t\t\t\n\tend\nend	\N	f	3	3	2014-04-30 05:51:50	2014-04-30 05:51:50	437	bob.rb
944	27	6215adb1f80404c37ac1c73c	superseded	ruby	bob	class Bob\n  def hey(message)\n    phrase = Phrase.new(message)\n    if phrase.is_a_shout\n      'Woah, chill out!'\n    elsif phrase.is_a_question\n      'Sure.'\n    elsif phrase.is_silent\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\nend\n\nclass Phrase\n  attr_reader :message\n\n  def initialize input\n    @message = input\n  end\n\n  def is_a_question(message)\n    message.end_with?('?')\n  end\n\n  def is_a_shout(message)\n    message == message.upcase\n  end\n\n  def is_silent(message)\n    message.nil? || message.empty?\n  end\nend	\N	f	8	2	2014-06-13 23:36:01	2014-06-13 23:36:01	437	bob.rb
945	27	d815892ba8a24eb42a272c68	superseded	ruby	point-mutations	class DNA\n  attr_reader :strand\n  def initialize strand\n    @strand = strand.to_s.upcase\n  end\n  \n  def hamming_distance strand\n    Hamming.new(self,DNA.new(strand)).distance\n  end\n  \n  class Hamming\n    attr_reader :original, :mutation\n    def initialize original, mutation\n      @original = original\n      @mutation = mutation\n    end\n    \n    def combined_strands\n      original.strand.chars.zip(mutation.strand.chars)\n    end\n    def distance\n      combined_strands.count{|points| compare_points points}\n    end\n    def compare_points points\n      points.first != points.last unless points.include? nil\n    end\n  end\nend	\N	f	1	3	2013-11-04 15:49:20	2013-11-04 15:49:20	438	point-mutations.rb
946	27	92d00d72fe67bd54b506de7e	superseded	ruby	point-mutations	class DNA\n  attr_reader :strand\n  def initialize strand\n    @strand = strand.to_s.upcase\n  end\n  \n  def hamming_distance mutated_strand\n    mutation = DNA.new mutated_strand\n    length_limit = mutation.strand.length < strand.length ?  mutation.strand.length : strand.length\n    mutation_enum = mutation.strand.chars[0...length_limit].each\n    strand_enum = strand.chars[0...length_limit].each\n    strand_enum.reject {|base| mutation_enum.next == base }.length\n  end\nend	\N	f	1	1	2013-12-27 04:19:58	2013-12-27 04:19:58	438	point-mutations.rb
947	27	63e97875650900ac54e6a2f8	done	ruby	point-mutations	class DNA\n  def initialize strand\n    @strand = strand.to_s.upcase\n  end\n  \n  def to_a\n    strand.chars\n  end\n  \n  def to_s\n    strand\n  end\n  \n  def hamming_distance strand\n    Hamming.new(self,DNA.new(strand)).distance\n  end\n  \n  private\n  def strand\n    @strand\n  end\nend\n\nclass Hamming\n  attr_reader :original, :mutation\n  def initialize original, mutation\n    @original = original\n    @mutation = mutation\n  end\n  \n  def distance\n    @distance ||= combined_strands.count{|nucleotide_pair| mutated? nucleotide_pair}\n  end\n  \n  private\n  \n  def combined_strands\n    original.to_a.zip(mutation.to_a).take(trim_length)\n  end\n  \n  def trim_length\n    [original.to_a.length, mutation.to_a.length].min\n  end\n  \n  def mutated? nucleotide_pair\n    nucleotide_pair.first != nucleotide_pair.last\n  end\nend	\N	f	1	5	2014-04-28 15:38:43	2014-04-28 15:38:43	438	point-mutations.rb
948	27	432af2f9015826820ff284d0	superseded	ruby	point-mutations	class DNA\n  def initialize strand\n    @strand = strand.to_s.upcase\n  end\n  \n  def to_a\n    @strand.chars\n  end\n  \n  def to_s\n    @strand\n  end\n  \n  def hamming_distance strand\n    Hamming.new(self,DNA.new(strand)).distance\n  end\n  \n  class Hamming\n    attr_reader :original, :mutation\n    def initialize original, mutation\n      @original = original\n      @mutation = mutation\n    end\n    \n    def combined_strands\n      original.to_a.zip(mutation.to_a)\n    end\n    \n    def distance\n      combined_strands.count{|points| compare points}\n    end\n    \n    private\n    \n    def compare points\n      points.first != points.last unless points.include? nil\n    end\n  end\nend	\N	f	1	4	2014-05-12 11:12:28	2014-05-12 11:12:28	438	point-mutations.rb
949	27	6e082c8ea77d602ca570ee35	superseded	ruby	point-mutations	class DNA\n  attr_reader :strand\n  def initialize strand\n    @strand = strand.to_s.upcase\n  end\n  \n  def hamming_distance mutated_strand\n    mutation = DNA.new mutated_strand\n    count_difference mutation\n  end\n  \n  private\n  def count_difference mutation\n    count = 0\n    strand.chars.each_with_index do |base, i|\n      next unless mutated_base = mutation.strand.chars[i]\n      count += 1 if mutated_base != base\n    end\n    count\n  end\nend	\N	f	2	2	2014-06-18 15:16:11	2014-06-18 15:16:11	438	point-mutations.rb
950	27	710cf3e1b9d7a48b1cb3e300	pending	python	pascals-triangle	def row(n):\n    if n == 0:\n        return '1'\n    elif n == 1:\n        return '1 1'\n    else:\n        last_row = row(n-1).split(' ')\n        ret = list()\n        ret.append('1')\n        for i in xrange(1, n):\n            ret.append(str(int(last_row[i-1]) + int((last_row[i]))))\n        ret.append('1')\n        return ' '.join(ret)\n\n\ndef triangle(n):\n    return [row(i) for i in xrange(n+1)]\n    \n\ndef is_triangle(lst):\n    for i in xrange(len(lst)):\n        if lst[i] != row(i):\n            return False\n    return True	\N	f	1	1	2014-06-01 12:36:26	2014-06-01 12:36:26	439	pascals_triangle.py
951	27	a70cb1601b54f4c0c5eb8e83	hibernating	ruby	grade-school	class School\n  def initialize\n    @store = Hash.new { [] }\n  end\n\n  def add(name, grade)\n    @store[grade] = (@store[grade] << name).sort\n  end\n\n  def grade(grade)\n    @store[grade]\n  end\n\n  def to_hash\n    Hash[@store.sort]\n  end\nend	\N	f	1	1	2013-12-01 02:22:55	2013-12-01 02:22:55	440	school.rb
952	27	e313919db7b15d744fa04c20	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map (\\ d-> if d == 'T' then 'U' else d)	\N	f	1	1	2013-11-29 10:48:07	2013-11-29 10:48:07	441	rna-transcription.hs
954	27	0d4d4b06d574ebe0af47d707	superseded	ruby	etl	class ETL\n  def transform(old)\n    data = {}\n    old.each do |k,v|\n    \tv.each do |value|\n    \t\tdata[value.downcase] = k\n    \tend\n    end\n    return data\n  end\nend	\N	f	1	1	2013-10-30 02:01:01	2013-10-30 02:01:01	443	etl.rb
955	27	8dbb084e59220405bf290895	superseded	ruby	etl	class ETL\n\t\n  def self.transform(old)\n    data = {}\n    old.each do |k,v|\n    \tv.each do |value|\n    \t\tdata[value.downcase] = k\n    \tend\n    end\n    return data\n  end\nend	\N	f	1	2	2013-11-19 13:03:32	2013-11-19 13:03:32	443	etl.rb
956	27	bc4d33466d066bbeeae24c4c	hibernating	ruby	etl	# encoding: UTF-8\n# Clase ETL\nclass ETL\n  def self.transform(old)\n    data = {}\n    old.each do |k, v|\n      v.each do |value|\n        data[value.downcase] = k\n      end\n    end\n    data\n  end\nend	\N	f	1	3	2013-12-19 19:06:42	2013-12-19 19:06:42	443	etl.rb
958	27	77980c9c009eec95e5492683	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport           Data.Char (isAlphaNum, toLower)\nimport           Data.List.Split (wordsBy)\nimport qualified Data.Map as M\n\nwordCount :: String -> M.Map String Int\nwordCount = M.fromListWith (+) . map (\\s -> (map toLower s, 1)) . wordsBy (not.isAlphaNum)	\N	f	1	2	2014-02-16 10:23:56	2014-02-16 10:23:56	444	wordcount.hs
959	27	f8604845a78020363d54b262	done	haskell	word-count	module WordCount (wordCount) where\n\nimport           Data.Char (isAlphaNum, toLower)\nimport           Data.List.Split (wordsBy)\nimport qualified Data.Map.Strict as M\n\nwordCount :: String -> M.Map String Int\nwordCount = M.fromListWith (+) . map (\\s -> (map toLower s, 1)) . wordsBy (not.isAlphaNum)	\N	f	1	3	2014-04-04 21:01:17	2014-04-04 21:01:17	444	WordCount.hs
960	27	52dd93d53eb3a56826f03d26	hibernating	ruby	roman-numerals	class Roman\n  def self.numerals(number)\n    return '' if number < 1\n    part, numeral = mapping.detect { |part, _| part <= number }\n    numeral + numerals(number - part)\n  end\n\n  def self.mapping\n    [\n      [1000, 'M'],\n      [ 900, 'CM'],\n      [ 500, 'D'],\n      [ 400, 'CD'],\n      [ 100, 'C'],\n      [  90, 'XC'],\n      [  50, 'L'],\n      [  40, 'XL'],\n      [  10, 'X'],\n      [   9, 'IX'],\n      [   5, 'V'],\n      [   4, 'IV'],\n      [   1, 'I']\n    ]\n  end\nend\n\nclass Fixnum\n  def to_roman\n    Roman.numerals(self)\n  end\nend	\N	f	1	1	2014-04-23 05:33:47	2014-04-23 05:33:47	445	roman-numerals.rb
961	28	b4c74c00d70928c8f10841ab	pending	javascript	hamming	var Hamming = {};\n\nHamming.compute = function(baseStrand, copyStrand){\n  var distance = 0;\n  for (var i = 0; i < baseStrand.length; i++) {\n    if (notEqual(baseStrand[i], copyStrand[i])) {\n      distance++;\n    }\n  }\n  return distance;\n};\n\nvar notEqual = function(base, copy) {\n  return copy && (base != copy);\n};\n\nmodule.exports = Hamming;	\N	f	3	1	2014-01-14 22:34:58	2014-01-14 22:34:58	446	hamming.js
962	28	cac41bd6aa42a318429d512f	pending	ruby	gigasecond	class Gigasecond\n  def initialize date\n    @date = date + (1e9 / (24*3600.0)).floor\n  end\n\n  attr_reader :date\nend	\N	f	3	1	2014-03-07 16:26:37	2014-03-07 16:26:37	447	gigasecond.rb
963	28	4f99c7375df65cc30b32dbb2	done	elixir	binary	defmodule Binary do\n  def to_decimal(bits) do\n    if Regex.match?(%r/[^01]/, bits) do\n      0\n    else\n      to_decimal(String.reverse(bits), 1)\n    end\n  end\n\n  defp to_decimal("", _), do: 0\n  defp to_decimal(<<"1", rest::binary>>, mult), do: to_decimal(rest, 2*mult) + mult\n  defp to_decimal(<<"0", rest::binary>>, mult), do: to_decimal(rest, 2*mult)\nend	\N	f	3	1	2014-02-15 07:05:46	2014-02-15 07:05:46	448	binary.exs
965	28	22339bea4ad7c92c69c4cdf9	superseded	elixir	roman-numerals	defmodule Roman do\n\n  @mappings [{"M", 1000}, {"CM", 900}, {"D", 500}, {"CD", 400}, {"C", 100}, {"XC", 90},\n    {"L", 50}, {"XL", 40}, {"X", 10}, {"IX", 9}, {"V", 5}, {"IV", 4}, {"I", 1}]\n\n  def numerals(arabic) do\n    {0, roman_parts} = @mappings |> Enum.reduce({arabic, []}, &handle_divisor/2)\n    roman_parts |> Enum.reverse |> Enum.join\n  end\n\n  defp handle_divisor({roman_str, arabic_val}, {arabic_remaining, roman_parts}) when arabic_remaining >= arabic_val do\n    {quotient, remainder} = divmod(arabic_remaining, arabic_val)\n    {remainder, [String.duplicate(roman_str, quotient) | roman_parts]}\n  end\n  defp handle_divisor(_, acc), do: acc\n\n  defp divmod(dividend, divisor), do: {div(dividend, divisor), rem(dividend, divisor)}\nend	\N	f	0	1	2014-02-13 18:26:44	2014-02-13 18:26:44	449	roman-numerals.exs
986	28	fa58099bd111bf263955cbd0	superseded	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    words\n      |> downcase\n      |> to_list\n      |> process\n  end\n\n  defp process(entries) do\n    Enum.reduce entries, HashDict.new, fn(entry, acc) ->\n      HashDict.put acc, list_to_binary(entry), Enum.count(entries, &1 == entry)\n    end\n  end\n\n  defp downcase(words), do: String.downcase words\n  defp to_list(words),  do: %r{\\w+} |> Regex.scan words\n\nend	\N	f	3	3	2014-02-24 05:51:20	2014-02-24 05:51:20	459	word-count.exs
967	28	91109b1a4ab1270fc69a4fe2	done	javascript	bob	'use strict'\n\n\nvar Bob = function() {\n  this.hey = function(text) {\n    var message = new Message(text)\n    if (message.silence()) {\n      return this.responses.silence\n    } else if (message.shouting()) {\n      return this.responses.shouting\n    } else if (message.question()) {\n      return this.responses.question\n    } else {\n      return this.responses.generic\n    }\n  }\n}\n\nBob.prototype.responses = {\n  silence: 'Fine. Be that way!',\n  shouting: 'Woah, chill out!',\n  question: 'Sure.',\n  generic: 'Whatever.'\n}\n\nvar Message = function(text) {\n  this.text = text.trim()\n}\n\nMessage.prototype.silence = function() {\n  return (this.text === '')\n}\n\nMessage.prototype.shouting = function() {\n  return (this.text.toUpperCase() === this.text)\n}\n\nMessage.prototype.question = function() {\n  return (this.text.slice(-1) === '?')\n}\nmodule.exports = Bob	\N	f	3	4	2014-04-03 07:16:35	2014-04-03 07:16:35	450	bob.js
968	28	c191dc08d965ac6ecaa55ce6	superseded	javascript	bob	var Bob = function() {\n  this.hey = function(message) {\n\n    if (message === '') {\n      return 'Fine. Be that way!'\n    } else if (message.toUpperCase() === message) {\n      return 'Woah, chill out!'\n    } else if (message.slice(-1) === '?') {\n      return 'Sure.'\n    } else {\n      return 'Whatever.'\n    }\n  }\n}\n\nmodule.exports = Bob	\N	f	4	1	2014-04-08 13:27:54	2014-04-08 13:27:54	450	bob.js
969	28	4a9843046cdd5cea65590843	superseded	javascript	bob	var Message = function(text) {\n  this.text = text.trim()\n}\n\nMessage.prototype.silence = function() {\n  return (this.text === '')\n}\n\nMessage.prototype.shouting = function() {\n  return (this.text.toUpperCase() === this.text)\n}\n\nMessage.prototype.question = function() {\n  return (this.text.slice(-1) === '?')\n}\n\nvar Bob = function() {\n  this.hey = function(text) {\n    message = new Message(text)\n    if (message.silence()) {\n      return this.responses.silence\n    } else if (message.shouting()) {\n      return this.responses.shouting\n    } else if (message.question()) {\n      return this.responses.question\n    } else {\n      return this.responses.generic\n    }\n  }\n}\n\nBob.prototype.responses = {\n  silence: 'Fine. Be that way!',\n  shouting: 'Woah, chill out!',\n  question: 'Sure.',\n  generic: 'Whatever.'\n}\n\nmodule.exports = Bob	\N	f	0	2	2014-04-22 23:50:48	2014-04-22 23:50:48	450	bob.js
970	28	89d1dcd51b4395b39a4fb585	done	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    normalized_words.each_with_object(Hash.new(0)) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  def normalized_words\n    @words.downcase.scan(/\\w+/)\n  end\nend	\N	f	1	1	2014-04-16 13:33:45	2014-04-16 13:33:45	451	word-count.rb
971	28	fa387969a3681829adcb2b97	hibernating	clojure	bob	(ns bob\n  (:require [clojure.string :as str]))\n\n(defn question? [string]\n  (= \\? (last string)))\n\n(defn blank? [string]\n  (str/blank? string))\n\n(defn shouting? [string]\n  (and (= string (str/upper-case string))\n       (some #(or (Character/isUpperCase %)\n                  (Character/isLowerCase %)) string)\n       (not (str/blank? string))))\n\n(defn response-for [string]\n  (cond\n   (blank? string)\n   "Fine. Be that way!"\n   (shouting? string)\n   "Woah, chill out!"\n   (question? string)\n   "Sure."\n   :else\n   "Whatever."))	\N	f	0	1	2014-01-01 12:51:57	2014-01-01 12:51:57	452	bob.clj
972	28	d9cc7ade2e2df9a32f7b964a	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    Strand.new(strand1).distance(Strand.new(strand2))\n  end\nend\n\nclass Strand\n  attr_reader :strand\n  \n  def initialize(strand)\n    @strand = strand\n  end\n\n  def distance(other_strand)\n    nucleotide_pairs = self.pair_with(other_strand)\n    nucleotide_pairs.reduce(0) do |sum, (ours, theirs)|\n      sum + ours.distance(theirs)\n    end\n  end\n  \n  def nucleotides\n    strand.chars.map { |letter| Nucleotide.new(letter) }\n  end\n\n  def pair_with(other_strand)\n    if self.length > other_strand.length\n      other_strand.nucleotides.zip(self.nucleotides)\n    else\n      self.nucleotides.zip(other_strand.nucleotides)\n    end\n  end\n\n  def length\n    nucleotides.length\n  end\nend\n\nclass Nucleotide\n  attr_reader :base\n  \n  def initialize(base)\n    @base = base\n  end\n\n  def point_mutation?(other)\n    self.base != other.base\n  end\n\n  def distance(other)\n    if point_mutation?(other)\n      1\n    else\n      0\n    end\n  end\nend	\N	f	0	3	2014-03-18 07:48:03	2014-03-18 07:48:03	453	hamming.rb
973	28	691c1196606df89f803986e9	done	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    pairs = nucleotide_pairs(Strand.new(strand1), Strand.new(strand2))\n    pairs.count { |n1, n2| n1.point_mutation?(n2) }\n  end\n\n  private\n\n  def self.nucleotide_pairs(strand1, strand2)\n    min_length = [strand1.length, strand2.length].min\n    strand1.nucleotides.zip(strand2.nucleotides).take(min_length)\n  end\nend\n\nclass Strand\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def nucleotides\n    strand.chars.map { |base| Nucleotide.new(base) }\n  end\n\n  def length\n    nucleotides.length\n  end\nend\n\nclass Nucleotide\n  attr_reader :base\n\n  def initialize(base)\n    @base = base\n  end\n\n  def point_mutation?(other)\n    self.base != other.base\n  end\nend	\N	f	5	4	2014-04-11 19:42:03	2014-04-11 19:42:03	453	hamming.rb
974	28	25a6d9bcda336b24c18f767f	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    Strand.new(strand1).distance(Strand.new(strand2))\n  end\nend\n\nclass Strand\n  attr_reader :strand\n  \n  def initialize(strand)\n    @strand = strand\n  end\n\n  def distance(other_strand)\n    nucleotide_pairs = self.pair_with(other_strand)\n    nucleotide_pairs.reduce(0) do |sum, pair|\n      sum + pair.first.distance(pair.last)\n    end\n  end\n  \n  def nucleotides\n    strand.chars.map { |letter| Nucleotide.new(letter) }\n  end\n\n  def pair_with(other_strand)\n    if self.length > other_strand.length\n      other_strand.nucleotides.zip(self.nucleotides)\n    else\n      self.nucleotides.zip(other_strand.nucleotides)\n    end\n  end\n\n  def length\n    nucleotides.length\n  end\nend\n\nclass Nucleotide\n  attr_reader :letter\n  \n  def initialize(letter)\n    @letter = letter\n  end\n\n  def point_mutation?(other)\n    self.letter != other.letter\n  end\n\n  def distance(other)\n    if point_mutation?(other)\n      1\n    else\n      0\n    end\n  end\nend	\N	f	8	1	2014-06-08 17:36:11	2014-06-08 17:36:11	453	hamming.rb
1001	29	9e6efc479b443eb804730b7a	superseded	haskell	rna-transcription	module DNA\n(toRNA) where\n\ntoRNA dna = map replaceThymine dna\n\nreplaceThymine:: Char -> Char\nreplaceThymine 'T' = 'U'\nreplaceThymine  x = x	\N	f	4	1	2014-02-16 23:48:25	2014-02-16 23:48:25	466	rna-transcription.hs
976	28	0d84fd768d7f5cb8e38501cb	done	javascript	word-count	function Words(input) {\n  this.input = input;\n  this.count = wordCount(normalizeInput(input));\n}\n\nfunction wordCount(wordList) {\n  var frequences = {}\n  for (var i in wordList) {\n    word = wordList[i]\n    currentCount = frequences[word]\n    frequences[word] = currentCount ? currentCount + 1 : 1;\n  }\n  return frequences\n}\n\nfunction normalizeInput(words) {\n  return words.toLowerCase().match(/\\w+/g)\n}\n\nmodule.exports = Words;	\N	f	3	1	2014-01-17 09:18:37	2014-01-17 09:18:37	454	word-count.js
977	28	cb0ca2a101dd364fb5231afe	superseded	javascript	nucleotide-count	module.exports = function DNA(sequence) {\n  'use strict';\n\n  this.nucleotideCounts = getNucleotideCounts();\n\n  this.count = function(nucleotide) {\n    if (isUracil(nucleotide)) return 0;\n\n    var ntCount = this.nucleotideCounts[nucleotide];\n\n    if (ntCount === undefined)\n      throw new Error('Invalid Nucleotide');\n\n    return ntCount;\n  }\n\n  function isUracil(nucleotide) {\n    return nucleotide === 'U';\n  }\n\n  function getNucleotideCounts() {\n    var counts = { A:0, T:0, C:0, G:0 };\n\n    for (var i=0; i<sequence.length; i+=1) {\n      if (sequence[i] === 'A')\n        counts.A += 1;\n      else if (sequence[i] === 'T')\n        counts.T += 1;\n      else if (sequence[i] === 'C')\n        counts.C += 1;\n      else if (sequence[i] === 'G')\n        counts.G += 1;\n    }\n\n    return counts;\n  }\n}	\N	f	2	1	2013-11-17 19:44:30	2013-11-17 19:44:30	455	nucleotide-count.js
978	28	931d9612cd1ece4e114a0fe8	superseded	javascript	nucleotide-count	module.exports = function DNA(sequence) {\n  'use strict';\n\n  this.nucleotideCounts = getNucleotideCounts();\n\n  this.count = function(nucleotide) {\n    if (isUracil(nucleotide)) return 0;\n\n    var ntCount = this.nucleotideCounts[nucleotide];\n\n    if (ntCount === undefined)\n      throw new Error('Invalid Nucleotide');\n\n    return ntCount;\n  }\n\n  function isUracil(nucleotide) {\n    return nucleotide === 'U';\n  }\n\n  function getNucleotideCounts() {\n    var counts = { A:0, T:0, C:0, G:0 };\n    var nucleotides = ['A', 'T', 'C', 'G'];\n\n    for (var i=0; i<sequence.length; i+=1) {\n      nucleotides.forEach(function (nucleotide) {\n        if (sequence[i] === nucleotide)\n          counts[nucleotide] += 1;\n      });\n    }\n\n    return counts;\n  }\n}	\N	f	1	2	2014-03-27 10:42:08	2014-03-27 10:42:08	455	nucleotide-count.js
979	28	c4eac47720a0e9a6b074918c	done	javascript	nucleotide-count	module.exports = function DNA(sequence) {\n  'use strict';\n\n  this.nucleotideCounts = getNucleotideCounts();\n\n  this.count = function(nucleotide) {\n    if (isUracil(nucleotide)) return 0;\n\n    var ntCount = this.nucleotideCounts[nucleotide];\n\n    if (ntCount === undefined)\n      throw new Error('Invalid Nucleotide');\n\n    return ntCount;\n  }\n\n  function isUracil(nucleotide) {\n    return nucleotide === 'U';\n  }\n\n  function getNucleotideCounts() {\n    var counts = { A:0, T:0, C:0, G:0 };\n\n    for (var i=0; i<sequence.length; i+=1) {\n      if (counts[sequence[i]] !== undefined)\n        counts[sequence[i]] += 1;\n    }\n\n    return counts;\n  }\n}	\N	f	3	3	2014-04-18 19:27:07	2014-04-18 19:27:07	455	nucleotide-count.js
980	28	35842abb014f16ad287afbbe	superseded	javascript	leap	'use strict';\n\nfunction Year(number) {\n  this.year = number;\n}\n\nYear.prototype.isDivisibleBy = function(divisor) {\n  return this.year % divisor === 0;\n};\n\nYear.prototype.isLeapYear = function() {\n  return (this.isDivisibleBy(4) && !this.isDivisibleBy(100)) || this.isDivisibleBy(400);\n};\n\nmodule.exports = Year;	\N	f	0	1	2014-01-30 12:01:59	2014-01-30 12:01:59	456	leap.js
981	28	d9ff36758cb813795064a535	done	javascript	leap	'use strict';\n\nfunction isDivisible(numerator, denominator) {\n  return numerator % denominator === 0;\n}\n\nfunction isLeapException(n) {\n  return isDivisible(n, 100) && !isDivisible(n, 400);\n}\n\nfunction Year(number) {\n  this.year = number;\n}\n\nYear.prototype.isLeapYear = function() {\n  return isDivisible(this.year, 4) && !isLeapException(this.year);\n};\n\nmodule.exports = Year;	\N	f	3	2	2014-05-28 07:10:36	2014-05-28 07:10:36	456	leap.js
982	28	8e35f617ad8441793a24e285	pending	ruby	rna-transcription	class Complement \n  @base_complement = {'A' => 'U', 'C' => 'G', 'G' => 'C', 'T' => 'A'}\n\n  def self.of_dna(dna_sequence)\n  \tdna_sequence.chars.reduce("") do |rna_complement, nucleotide|\n      rna_complement += @base_complement[nucleotide]\n    end\n  end\n\n  def self.of_rna(rna_sequence)    \n    rna_sequence.chars.reduce("") do |dna_complement, nucleotide|\n      dna_complement += @base_complement.invert[nucleotide]\n    end    \n  end\n\nend	\N	f	3	1	2013-12-02 07:29:47	2013-12-02 07:29:47	457	complement.rb
983	28	b8d81858f25570cfc3b5ab1b	hibernating	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\nimport Data.List (foldl')\nimport Data.Map (Map)\nimport qualified Data.Map as M\n\ncount :: Char -> String -> Int\ncount x xs\n  | x `elem` "ACTU" = length $ filter (== x) xs\n  | otherwise = error $ "invalid nucleotide " ++ show x\n\nnucleotideCounts :: String -> M.Map Char Int\nnucleotideCounts = foldl' count initialMap\n  where count m x = M.insertWith' (+) x 1 m\n        initialMap = M.fromList [('A',0), ('C',0), ('G',0), ('T', 0)]	\N	f	3	1	2013-12-22 05:01:21	2013-12-22 05:01:21	458	DNA.hs
984	28	15abfacb10f098e58b686c85	superseded	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    words\n      |> downcase\n      |> to_list\n      |> _count\n  end\n\n  defp _count(words) do\n    Enum.reduce words, HashDict.new, fn(word, acc) ->\n      Dict.update acc, word, 1, fn(n) -> n+1 end\n    end\n  end\n\n  defp downcase(words), do: String.downcase words\n  defp to_list(words),  do: Regex.scan(%r/\\w+/, words) |> List.flatten\nend	\N	f	0	6	2013-11-28 07:45:22	2013-11-28 07:45:22	459	word-count.exs
985	28	0f3259ea340a4c3c5eed6b01	superseded	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    words\n      |> downcase\n      |> to_list\n      |> sanitize\n      |> process\n  end\n\n  defp process(entries) do\n    Enum.reduce entries, HashDict.new, fn(entry, acc) ->\n      HashDict.put acc, list_to_binary(entry), Enum.count(entries, &1 == entry)\n    end\n  end\n\n  defp downcase(words), do: String.downcase words\n  defp to_list(words),  do: %r{\\w*} |> Regex.scan words\n  defp sanitize(words), do: Enum.reject(words, &1 == [""])\n\nend	\N	f	1	2	2013-12-10 08:59:20	2013-12-10 08:59:20	459	word-count.exs
1002	29	e7100ae555837d47d6e1a410	done	haskell	rna-transcription	module DNA\n(toRNA) where\n\ntoRNA :: String -> String\ntoRNA dna = map replaceThymine dna\n\nreplaceThymine :: Char -> Char\nreplaceThymine 'T' = 'U'\nreplaceThymine  x = x	\N	f	1	3	2014-03-11 21:39:25	2014-03-11 21:39:25	466	rna-transcription.hs
988	28	3f35e8ef4a15472058446153	superseded	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    words\n      |> downcase\n      |> to_list\n      |> _count\n  end\n\n  defp _count(words) do\n    Enum.reduce words, HashDict.new, fn(word, acc) ->\n      HashDict.merge acc, [{word, 1}], fn(_k, n, _l) -> n+1 end\n    end\n  end\n\n  defp downcase(words), do: String.downcase words\n  defp to_list(words),  do: Regex.scan(%r/\\w+/, words) |> List.flatten\nend	\N	f	1	5	2014-03-15 00:49:02	2014-03-15 00:49:02	459	word-count.exs
989	28	d1d67ec7ae73ded7f53526a5	superseded	elixir	word-count	defmodule Words do\n\n  def count(words), do: _count(words)\n\n  defp _count(words) do\n    words =  words |> sanitize \n    words |> Enum.uniq |> count(words) |> HashDict.new\n  end\n\n  defp count([], _), do: []\n  defp count(_words = [head|tail], words) do\n    [ { head, Enum.count(words, head == &1) } | count(tail, words) ]\n  end\n  \n  defp sanitize(words), do: words |> String.split(%r{\\s|\\W}) |> Enum.reject(&1 == "") |> downcase\n  \n  defp downcase([]), do: []\n  defp downcase(_words = [head|tail]), do: [ String.downcase(head) | downcase(tail) ]\n\nend	\N	f	3	1	2014-04-16 03:16:44	2014-04-16 03:16:44	459	word-count.exs
990	28	a912281d182f258ffcd687e2	done	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    words\n      |> downcase\n      |> to_list\n      |> _count\n  end\n\n  defp _count(words) do\n    Enum.reduce words, HashDict.new, fn(word, acc) ->\n      Dict.update acc, word, 1, &1+1\n    end\n  end\n\n  defp downcase(words), do: String.downcase words\n  defp to_list(words),  do: Regex.scan(%r/\\w+/, words) |> List.flatten\nend	\N	f	3	7	2014-04-24 14:03:53	2014-04-24 14:03:53	459	word-count.exs
991	29	2c27531fea007271853d4871	pending	csharp	hamming	using System;\r\n\r\npublic class Hamming\r\n{\r\n    public static int Compute(string firstStrand, string secondStrand)\r\n    {\r\n        int differences = 0;\r\n        for (int i = 0; i < ShortestLength(firstStrand, secondStrand); i++)\r\n        {\r\n            if (firstStrand[i] != secondStrand[i])\r\n                differences += 1;\r\n        }\r\n        return differences;\r\n    }\r\n\r\n    private static int ShortestLength(string firstStrand, string secondStrand)\r\n    {\r\n        return Math.Min(firstStrand.Length, secondStrand.Length);\r\n    }\r\n}	\N	f	3	1	2013-12-24 10:17:19	2013-12-24 10:17:19	460	Hamming.cs
992	29	db9cbcda1c80b972ce7b3f5b	done	clojure	word-count	(ns word-count)\n\n\n(defn reduce-it\n  [a-word]\n  (reduce #(assoc %1 %2 (inc (%1 %2 0)))\n        {}\n        (re-seq #"\\w+" a-word)))\n\n(defn word-count/word-count\n  [the-word]\n  (let [t-word (clojure.string/lower-case the-word)]\n  (reduce-it t-word)))\n\n\n(word-count/word-count "testing, 1, 2 testing")	\N	f	0	1	2013-12-25 11:19:28	2013-12-25 11:19:28	461	word_count.clj
994	29	4c59dd68138797f172cba0be	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    strand_a = []\n    strand_b = []\n    @h_distance = 0\n\n    a.each_char {|i| strand_a << i}\n    b.each_char {|i| strand_b << i}\n\n    if strand_a.length < strand_b.length\n      self.compare(strand_a, strand_b)\n    else\n      self.compare(strand_b, strand_a)\n    end\n\n    @h_distance\n  end\n\n  def self.compare (m, n)\n    m.each_with_index do |x, y|\n      if x != n[y]\n        @h_distance += 1\n      end\n    end\n  end\nend	\N	f	3	1	2014-01-25 06:21:47	2014-01-25 06:21:47	463	hamming.rb
995	29	873b8b3f9d68f150111289a8	done	ruby	hamming	class Hamming\n  def self.compute(strand_a, strand_b)\n    @h_distance = 0\n\n    if strand_a.length < strand_b.length\n      self.compare(strand_a, strand_b)\n    else\n      self.compare(strand_b, strand_a)\n    end\n\n    @h_distance\n  end\n\n  def self.compare (m, n)\n    0.upto(m.length - 1) do |i|\n      if m[i] != n[i]\n        @h_distance += 1\n      end\n    end\n  end\nend	\N	f	3	2	2014-02-24 03:07:06	2014-02-24 03:07:06	463	hamming.rb
996	29	e058e4671025ad1b2843db4a	done	clojure	bob	(ns bob\n  (:require [clojure.string :refer [blank? upper-case]]))\n\n(defn said-nothing? [input]\n  (blank? input))\n\n(defn shouting? [input]\n  (and\n   (re-find #"[A-z]" you-said)\n   (= (upper-case you-said) you-said)))\n\n(defn asking? [input]\n  (.endsWith input "?"))\n\n(defn response-for\n  [you-said]\n  (cond (said-nothing? you-said) "Fine. Be that way!"\n        (shouting? you-said) "Woah, chill out!"\n        (asking? you-said) "Sure."\n         :else "Whatever."))	\N	f	3	2	2013-12-22 00:48:00	2013-12-22 00:48:00	464	bob.clj
997	29	8934408a980375c8ebf211a7	superseded	clojure	bob	(ns bob)\n\n(defn response-for\n  [you-said]\n  (cond (clojure.string/blank? you-said) "Fine. Be that way!"\n        (and\n         (re-find #"[A-z]" you-said)\n         (= (.toUpperCase you-said) you-said)) "Woah, chill out!"\n        (.endsWith you-said "?") "Sure."\n\n         :else "Whatever."))	\N	f	0	1	2014-02-23 09:44:51	2014-02-23 09:44:51	464	bob.clj
998	29	849e432b37a4e4b52ed0bf83	superseded	haskell	binary	module Binary (toDecimal) where\n\nimport Data.Char (digitToInt)\nimport qualified Data.Sequence as Seq\nimport Data.Sequence (foldrWithIndex)\n\ntoDecimal :: String -> Int\ntoDecimal n\n  | not valid = 0\n  | otherwise = toDecimal' n\n  where valid = all (`elem` "01") n\n        toDecimal' = foldrWithIndex folder 0 . Seq.fromList . reverse\n        folder i d = (+) (2 ^ i * digitToInt d)	\N	f	2	1	2014-01-13 13:45:09	2014-01-13 13:45:09	465	Binary.hs
999	29	11ed102b3f46f045fc0c63b6	done	haskell	binary	module Binary (toDecimal) where\n\nimport Data.Char (digitToInt)\nimport Data.List (foldl')\n\ntoDecimal :: String -> Int\ntoDecimal n\n  | not valid = 0\n  | otherwise = toDecimal' n\n  where valid = all (`elem` "01") n\n        toDecimal' = foldl' mapper 0 . zip indexes . reverse\n        indexes = [0..] :: [Int]\n        mapper acc (i, d) = acc + 2 ^ i * digitToInt d	\N	f	3	2	2014-01-15 13:59:52	2014-01-15 13:59:52	465	Binary.hs
1000	29	a4ca02768890832079a97095	superseded	haskell	rna-transcription	module DNA\n(toRNA) where\n\ntoRNA:: String -> String\ntoRNA dna = map replaceThymine dna\n\nreplaceThymine:: Char -> Char\nreplaceThymine 'T' = 'U'\nreplaceThymine  x = x	\N	f	0	2	2014-01-23 09:02:28	2014-01-23 09:02:28	466	rna-transcription.hs
1004	29	a9b4efe21c9252516fa8e213	superseded	javascript	bob	var Bob = function() {\n  var isEmpty = function(msg) {\n    return !msg.trim()\n  }\n\n  var isQuestion = function(msg) {\n    return msg.slice(-1) == '?';\n  }\n\n  var isUpcase = function(msg) {\n    return msg == msg.toUpperCase()\n  }\n\n  this.hey = function(msg) {\n    var answer = 'Whatever.';\n\n    if (isEmpty(msg)) {\n      answer = 'Fine. Be that way!';\n    } else if (isUpcase(msg)) {\n      answer = 'Woah, chill out!';\n    } else if (isQuestion(msg)) {\n      answer = 'Sure.';\n    }\n\n\n    return answer;\n  }\n};\n\nmodule.exports = Bob;	\N	f	0	2	2014-02-28 22:03:04	2014-02-28 22:03:04	467	bob.js
1005	29	cf3f2dcc69522a26fc52306e	done	javascript	bob	var Bob = function() {\n  var isEmpty = function(msg) {\n    return !msg.trim()\n  }\n\n  var isQuestion = function(msg) {\n    return msg.slice(-1) == '?';\n  }\n\n  var isUpcase = function(msg) {\n    return msg == msg.toUpperCase()\n  }\n\n  this.hey = function(msg) {\n    var answer = 'Whatever.';\n\n    if (isEmpty(msg)) {\n      answer = 'Fine. Be that way!';\n    } else if (isUpcase(msg)) {\n      answer = 'Woah, chill out!';\n    } else if (isQuestion(msg)) {\n      answer = 'Sure.';\n    }\n\n    return answer;\n  }\n};\n\nmodule.exports = Bob;	\N	f	5	3	2014-05-14 01:49:51	2014-05-14 01:49:51	467	bob.js
1006	29	520645b39f99c0b434553b9f	done	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Calendar\n\nfromDay :: Day -> Day\nfromDay = addDays $ round $ 10 ^ 9 / 86400	\N	f	4	1	2014-05-30 08:56:10	2014-05-30 08:56:10	468	gigasecond.hs
1007	29	ae95513685d9596185b57cb6	superseded	ruby	bob	class Bob\n\n  def hey(txt)\n    return  "Fine. Be that way!" if !txt || txt.strip.empty?\n    return "Woah, chill out!" if txt == txt.upcase\n    return "Sure." if txt[-1] == '?'\n   \n    "Whatever."\n  end\n\nend	\N	f	0	1	2013-12-24 15:12:02	2013-12-24 15:12:02	469	bob.rb
1008	29	9e06de75b711c2e69fe8ee3f	superseded	ruby	bob	# Overkill to open this core class, just having fun.\nclass String\n  def question?\n    self[-1] == '?'\n  end\n\n  def command?\n    self == self.upcase\n  end\n\n  def silence?\n    self.strip.empty?\n  end\nend\n\nclass Teen\n  def hey(txt)\n    return  "Fine. Be that way!" if !txt || txt.silence?\n    return "Woah, chill out!" if txt.command?\n    return "Sure." if txt.question?\n   \n    "Whatever." # Statement.\n  end\nend\n\n# Should just be an instance, not a subclass.\nclass Bob < Teen\nend	\N	f	3	2	2014-01-18 07:03:24	2014-01-18 07:03:24	469	bob.rb
1010	29	52b95f11b41a3cb9542f41e1	superseded	ruby	leap	class Year\n\tdef self.leap?(year)\n\t\tif year % 4 == 0\n\t\t\tif year % 100 == 0\n\t\t\t\tif year % 400 == 0\n\t\t\t\t\treturn true\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn true\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend	\N	f	3	1	2014-01-08 15:31:13	2014-01-08 15:31:13	470	year.rb
1011	29	4c3750304f69969e02a0b594	done	ruby	leap	class Year\n\tdef self.leap?(year)\n\t\treturn true if year % 400 == 0\n\t\treturn false if year % 100 == 0\n\t\treturn true if year % 4 == 0\n\t\tfalse\n\tend\nend	\N	f	5	2	2014-04-08 07:54:53	2014-04-08 07:54:53	470	year.rb
1012	29	a44fc846c4677aee77a4428f	hibernating	ruby	rna-transcription	class Beer\n\n  def verse number\n    case number\n      when 0 then last_verse\n      when 1 then verse1\n      when 2 then verse2\n      else verses(number)\n    end\n  end\n\n  def sing(start, finish = 0)\n    start.downto(finish).inject("") { |song, v| song << "#{verse(v)}\\n" }\n  end\n\n  private\n\n  def verse1\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  def verse2\n   "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n  end\n\n  def verses number\n    "8 bottles of beer on the wall, 8 bottles of beer.\\nTake one down and pass it around, 7 bottles of beer on the wall.\\n"\n   "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number -1} bottles of beer on the wall.\\n"\n  end\n\n  def last_verse\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\nend	\N	f	3	1	2014-01-20 03:19:42	2014-01-20 03:19:42	471	rna-transcription.rb
1013	29	a854a37e1d24061340c0cc3c	pending	ruby	grains	class Grains\n\n  def initialize\n    @squares = populate_squares\n  end\n  \n  def square number\n    @squares[number]\n  end\n  \n  def total\n    @squares.values.inject(:+)\n  end\n  \n  private \n  \n  def populate_squares\n    \n    (1..64).inject({}) do |hash, square|\n      hash[square] = ( square > 1 ) ? hash[ square - 1 ] * 2 : square\n      hash\n    end\n\n  end\n\nend	\N	f	5	1	2014-05-01 08:06:54	2014-05-01 08:06:54	472	grains.rb
1014	29	af55a6e3d5c3af9bf91c5bc3	superseded	go	raindrops	package raindrops\r\n\r\nimport (\r\n\t"strconv"\r\n)\r\n\r\nvar number int = 0\r\n\r\nfunc toRainDrops(number int, factor int, word string) (output string) {\r\n\tif number%factor == 0 {\r\n\t\toutput += word\r\n\t\tnumber = number - (number / factor)\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc Convert(input int) (output string) {\r\n\tnumber = input\r\n\toutput += toRainDrops(number, 3, "Pling")\r\n\toutput += toRainDrops(number, 5, "Plang")\r\n\toutput += toRainDrops(number, 7, "Plong")\r\n\tif output == "" {\r\n\t\treturn strconv.Itoa(number)\r\n\t}\r\n\treturn\r\n}\r	\N	f	1	1	2014-03-23 23:43:17	2014-03-23 23:43:17	473	raindrops.go
1015	29	933caac2bc215891fc3a854c	done	go	raindrops	package raindrops\r\n\r\nimport (\r\n\t"strconv"\r\n)\r\n\r\nfunc toRainDrops(number int, factor int, word string) (output string) {\r\n\tif number%factor == 0 {\r\n\t\toutput += word\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc Convert(number int) (output string) {\r\n\toutput += toRainDrops(number, 3, "Pling")\r\n\toutput += toRainDrops(number, 5, "Plang")\r\n\toutput += toRainDrops(number, 7, "Plong")\r\n\tif output == "" {\r\n\t\treturn strconv.Itoa(number)\r\n\t}\r\n\treturn\r\n}\r	\N	f	3	2	2014-04-11 21:53:34	2014-04-11 21:53:34	473	raindrops.go
1017	30	fd7c981a29ce7f496c716418	done	elixir	word-count	defmodule Words do\n  def count phrase do\n\n    phrase |> cleanup |> to_list |> build_dictionary\n\n  end\n\n  defp to_list phrase do\n    Regex.split %r/\\s+/, phrase\n  end\n\n  defp cleanup phrase do\n    Regex.replace(%r/[^\\w]/, phrase, " ") |>\n      String.strip                        |>\n      String.downcase\n  end\n\n  defp build_dictionary words do\n    List.foldl(\n      words,\n      HashDict.new,\n      fn(word, accumulator) ->\n        HashDict.update(accumulator, word, 1, &1 + 1)\n      end\n    )\n  end\n\nend	\N	f	1	2	2014-06-10 01:36:01	2014-06-10 01:36:01	474	word-count.exs
1018	30	f51a9fd61232ce7692d9a95a	superseded	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    words = sanitize(@string)\n    words.each_with_object(Hash.new(0)) {|word, hash| hash[word] +=1 }\n  end\n\n  private\n\n  def sanitize(string)\n    string.downcase.scan /\\b\\w+\\b/\n  end\n\nend	\N	f	3	5	2014-04-06 03:56:47	2014-04-06 03:56:47	475	word-count.rb
1019	30	598ff491d03586032853d17e	superseded	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, entry| entry[word] +=1 }\n  end\n\n  private\n\n  def words\n    @string.downcase.scan /\\w+/\n  end\n\nend	\N	f	0	7	2014-04-13 07:53:35	2014-04-13 07:53:35	475	word-count.rb
1020	30	cba61310b57a5cf0d21b0b7f	done	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, hash| hash[word] +=1 }\n  end\n\n  private\n\n  def words\n    @string.downcase.scan /\\w+/\n  end\n\nend	\N	f	0	8	2014-05-11 08:17:52	2014-05-11 08:17:52	475	word-count.rb
1021	30	2da535b388fe77bdcd9145cb	superseded	ruby	word-count	class Phrase\n  \n  def initialize(words)\n    raise "must be a non empty String!" if not_valid?(words)\n    @words = words\n  end\n  \n  def word_count\n    @words.split(/\\s|\\W/).map(&:downcase).reject(&:empty?).inject(Hash.new(0)) { |result, word| result[word] +=1; result }\n  end\n  \n  def not_valid?(words)\n    words.empty? || !words.is_a?(String)\n  end\n  \nend	\N	f	2	1	2014-05-17 03:43:06	2014-05-17 03:43:06	475	word-count.rb
1022	30	f40175732a0aff3c28ed402e	superseded	ruby	word-count	class Phrase\n  \n  def initialize(words)\n    raise "must be a non empty String!" if not_valid?(words)\n    @words = words\n  end\n  \n  def word_count\n    @words.split(/\\s|\\W/).reject(&:empty?).map(&:downcase).inject(Hash.new(0)) { |result, word| result[word] +=1; result }\n  end\n  \n  def not_valid?(words)\n    words.empty? || !words.is_a?(String)\n  end\n  \nend	\N	f	6	2	2014-05-17 17:17:56	2014-05-17 17:17:56	475	word-count.rb
1023	30	8022e858157cbaa7a45d885c	superseded	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    words = entries_for downcase @string\n    words.each_with_object(Hash.new(0)) {|word, hash| hash[word] +=1 }\n  end\n\n  private\n\n  def downcase(string)\n    string.downcase\n  end\n\n  def entries_for(string)\n    string.scan /\\w+/\n  end\n\nend	\N	f	3	6	2014-05-28 23:46:30	2014-05-28 23:46:30	475	word-count.rb
1024	30	106a827303bfd68d5a9dfc3d	superseded	ruby	word-count	class Phrase\n  \n  def initialize(string)\n    raise "must be a non empty String!" if invalid?(string)\n    @words = sanitize string\n  end\n  \n  def word_count\n    @words.inject(Hash.new(0)) {|result, word| result[word] +=1; result}\n  end\n  \n  private\n  \n  def sanitize(string)\n    string.split(/\\s|\\W/).reject(&:empty?).map(&:downcase)\n  end\n  \n  def invalid?(string)\n    string.empty? || !string.is_a?(String)\n  end\n  \nend	\N	f	0	3	2014-06-16 11:45:08	2014-06-16 11:45:08	475	word-count.rb
1025	30	24aa42df966a8243bc99152f	superseded	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    words = sanitize(@string)\n    words.each_with_object(Hash.new(0)) {|word, hash| hash[word] +=1 }\n  end\n\n  private\n\n  def sanitize(string)\n    string.downcase.scan(/\\w*/).reject(&:empty?)\n  end\n\nend	\N	f	5	4	2014-06-19 03:49:35	2014-06-19 03:49:35	475	word-count.rb
1027	30	c11febac7dd72d5a98221e04	done	clojure	rna-transcription	(ns dna)\n\n(def dna-rna-map\n  ^{:doc "DNA to RNA mapping"\n    :private true}\n  {\\A \\A\n   \\C \\C\n   \\G \\G\n   \\T \\U})\n\n(defn to-rna\n  "changes dna to rna, replacing thymine with uracil"\n  [dna]\n  (->> dna\n       (map dna-rna-map)\n       (apply str)))	\N	f	3	1	2014-04-29 00:18:51	2014-04-29 00:18:51	477	rna-transcription.clj
1028	30	f4e07811264929abcfa7ae3b	done	haskell	rna-transcription	module DNA\n  ( toRNA\n  ) where\n\ntoRNA :: String -> String\ntoRNA = map transcribe\n\n-- | Replace all instances of thymidine with uracil.\ntranscribe :: Char -> Char\ntranscribe 'T' = 'U'\ntranscribe c   = c	\N	f	10	1	2014-06-26 04:44:25	2014-06-26 04:44:25	478	rna-transcription.hs
1029	30	08cf8577ac57e3e0d64d06c0	hibernating	ruby	bob	class Bob\n\n    def hey message\n        return 'Fine. Be that way!' if message.strip.empty?\n        return 'Woah, chill out!' if message.upcase == message && message.downcase != message\n        return 'Sure.' if message.end_with? '?'\n        return 'Whatever.'\n    end\n\nend	\N	f	1	1	2014-05-13 04:15:28	2014-05-13 04:15:28	479	bob.rb
1030	30	fd149354bd1c6925a5ab0845	superseded	haskell	anagram	module Anagram (anagramsFor) where\r\n\r\nimport Data.List\r\nimport Data.Char\r\n\r\nanagramsFor :: String -> [String] -> [String]\r\nanagramsFor x y = filter (matches x) y\r\n\twhere\r\n\t\tmatches a b = ((sort $ Prelude.map toLower a) == (sort $ Prelude.map toLower b)) && (a /= b)	\N	f	0	1	2014-05-03 02:43:06	2014-05-03 02:43:06	480	Anagram.hs
1031	30	b6a58b878a2276c5fa29fdfb	hibernating	haskell	anagram	module Anagram (anagramsFor) where\r\n\r\nimport Data.List (sort)\r\nimport Data.Char (toLower)\r\n\r\nanagramsFor :: String -> [String] -> [String]\r\nanagramsFor x y = filter (matches x) y\r\n\twhere\r\n\t\tmatches a b = ((sort $ map toLower a) == (sort $ map toLower b)) && (a /= b)	\N	f	3	2	2014-05-20 13:55:03	2014-05-20 13:55:03	480	Anagram.hs
1034	30	872ee7bc92d2af693b4acf2f	superseded	elixir	bob	defmodule Teenager do\n  def hey(msg) do\n    cond do\n      "" == msg ->\n        "Fine. Be that way!"\n      String.upcase(msg) == msg ->\n        "Woah, chill out!"\n      String.last(msg) == "?" ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend	\N	f	0	1	2014-04-29 10:10:01	2014-04-29 10:10:01	483	bob.exs
1035	30	ff800564e219aaa2d33472df	done	elixir	bob	defmodule Person do\n  def classify(msg) do\n    cond do\n      "" == msg ->\n        :silence\n      String.upcase(msg) == msg ->\n        :yelling\n      String.last(msg) == "?" ->\n        :question\n      true ->\n        :default\n    end\n  end\nend\n\ndefmodule Teenager do\n  def hey(msg) do\n    case Person.classify(msg) do\n      :silence -> "Fine. Be that way!"\n      :yelling -> "Woah, chill out!"\n      :question -> "Sure."\n      :default -> "Whatever."\n    end\n  end\nend	\N	f	4	3	2014-05-18 09:20:18	2014-05-18 09:20:18	483	bob.exs
1036	30	9ddb353263c824501881e240	superseded	elixir	bob	defmodule Person do\n  def clasify(msg) do\n    cond do\n      "" == msg ->\n        :empty\n      String.upcase(msg) == msg ->\n        :yelling\n      String.last(msg) == "?" ->\n        :question\n      true ->\n        :default\n    end\n  end\nend\n\ndefmodule Teenager do\n  def hey(msg) do\n    case Person.clasify(msg) do\n      :empty -> "Fine. Be that way!"\n      :yelling -> "Woah, chill out!"\n      :question -> "Sure."\n      :default -> "Whatever."\n    end\n  end\nend	\N	f	1	2	2014-06-02 15:52:33	2014-06-02 15:52:33	483	bob.exs
1037	30	ec8a9261c5bb2e0bb5b8e0e8	superseded	javascript	leap	var isLeapYear = function(year) {\n\treturn year % 4 == 0 \n\t    && (year % 100 != 0 || year % 400 == 0);\n};\n\nmodule.exports = isLeapYear;	\N	f	2	1	2014-04-13 06:10:17	2014-04-13 06:10:17	484	leap.js
1038	30	7a4c84e03b5c222d613b44ba	superseded	javascript	leap	var isLeapYear = function(year) {\n\tis_divisible_by_4 = year % 4 === 0;\n\tis_not_divisible_by_100_unless_divisible_by_400 = year % 100 !== 0 || year % 400 === 0;\n\n\treturn is_divisible_by_4 && is_not_divisible_by_100_unless_divisible_by_400;\n};\n\nmodule.exports = isLeapYear;	\N	f	3	2	2014-05-21 22:05:18	2014-05-21 22:05:18	484	leap.js
1039	30	9869414be1fc712ca89a7c61	superseded	javascript	leap	var isDivisibleBy = function(n, x) {\n\treturn n % x == 0;\n}\n\nvar isLeapYear = function(year) {\n    return isDivisibleBy(year, 4)\n        && ( ! isDivisibleBy(year, 100) || isDivisibleBy(year, 400) );\n};\n\nmodule.exports = isLeapYear;	\N	f	0	3	2014-06-03 20:51:59	2014-06-03 20:51:59	484	leap.js
1040	30	e5de6a99d0345f1a1aea5491	superseded	javascript	leap	var Year = function(year) {\n\tthis.year = year;\n}\n\nYear.prototype.isDivisibleBy = function(n) {\n\treturn this.year % n === 0;\n}\n\nvar isLeapYear = function(year) {\n\tvar year = new Year(year);\n    return year.isDivisibleBy(4)\n        && ( ! year.isDivisibleBy(100) || year.isDivisibleBy(400) );\n};\n\nmodule.exports = isLeapYear;	\N	f	2	4	2014-06-05 16:31:13	2014-06-05 16:31:13	484	leap.js
1041	30	b60b44d1a21baea0941f3d29	done	javascript	leap	var Year = function(year) {\n\tthis.year = year;\n}\n\nYear.prototype.isDivisibleBy = function(n) {\n\treturn this.year % n === 0;\n}\n\nYear.prototype.isLeapYear = function() {\n\treturn this.isDivisibleBy(4)\n\t\t&& ( ! this.isDivisibleBy(100) || this.isDivisibleBy(400) );\n}\n\nvar isLeapYear = function(year) {\n\tvar year = new Year(year);\n    return year.isLeapYear();\n};\n\nmodule.exports = isLeapYear;	\N	f	3	5	2014-06-07 04:29:06	2014-06-07 04:29:06	484	leap.js
1042	30	f6a275f0d9e2efa68984eb7d	pending	javascript	trinary	var Trinary = (function(){\n  'use strict';\n  var parseDigit = function(digit){\n    switch(digit){\n    case '2':\n      return 2;\n    case '1':\n      return 1;\n    default:\n      return 0;\n    }\n  };\n  \n  function Trinary(string){\n    this.bits = string.split('');\n  }\n  \n  Trinary.prototype.toDecimal = function(){\n    var value = 0;\n    for (var i = 0; i < this.bits.length; i++) {\n      value = value*3 + parseDigit(this.bits[i]);\n    }\n    return value;\n  };\n  \n  return Trinary;\n})();\n\nmodule.exports = Trinary;	\N	f	3	1	2014-06-06 02:20:05	2014-06-06 02:20:05	485	trinary.js
1043	30	f265951b126ce3e9bb6e7e28	done	go	roman-numerals	package romannumerals\n\nimport "strings"\n\nvar romanValues = []struct {\n\tvalue   int\n\tnumeral string\n}{\n\t{1000, "M"},\n\t{900, "CM"},\n\t{500, "D"},\n\t{400, "CD"},\n\t{100, "C"},\n\t{90, "XC"},\n\t{50, "L"},\n\t{40, "XL"},\n\t{10, "X"},\n\t{9, "IX"},\n\t{5, "V"},\n\t{4, "IV"},\n\t{1, "I"},\n}\n\nfunc ToRomanNumeral(arabic int) (romanNumerals string) {\n\tremainder := arabic\n\tfor _, romanNumeral := range romanValues {\n\t\ttimes := remainder / romanNumeral.value\n\t\tremainder %= romanNumeral.value\n\t\tromanNumerals += strings.Repeat(romanNumeral.numeral, times)\n\t}\n\treturn\n}	\N	f	3	1	2014-04-26 04:55:43	2014-04-26 04:55:43	486	roman_numerals.go
1044	30	29aa3cfce393ab8e9add15f0	superseded	javascript	anagram	module.exports = function Anagram(word) {\n  'use strict';\n\n  this.match = function(anagrams) {\n    return anagrams.filter(function(anagram) {\n      return isPermutation(anagram, word);\n    });\n  };\n\n  function isPermutation(anagram, word) {\n    return arrayIsEqual(anagram.split(""), word.split(""));\n  }\n\n  function arrayIsEqual(a1, a2) {\n    a1.sort();\n    a2.sort();\n\n    return !(a1 < a2 || a1 > a2);\n  }\n};	\N	f	4	1	2014-05-27 09:25:43	2014-05-27 09:25:43	487	anagram.js
1045	30	f4273f0290cf165cb28d1e96	done	javascript	anagram	module.exports = function Anagram(word) {\n  'use strict';\n\n  this.match = function(anagrams) {\n    return anagrams.filter(function(anagram) {\n      return isPermutation(anagram, word);\n    });\n  };\n\n  function isPermutation(anagram, word) {\n    return normalized(anagram) === normalized(word);\n  }\n\n  function normalized(word) {\n    return word.split("").sort().join();\n  }\n};	\N	f	0	2	2014-05-31 12:48:02	2014-05-31 12:48:02	487	anagram.js
1046	30	5692f5d3496324852dc59293	hibernating	ruby	rna-transcription	class DNA\n\n  attr_accessor :sequence\n\n  def initialize(dna_string)\n    self.sequence = dna_string\n  end\n\n  def to_rna\n    transcribe(sequence)\n  end\n\n  private\n\n  def transcribe(sequence)\n    sequence.gsub(/T/,"U")\n  end\nend	\N	f	5	1	2014-06-02 06:10:51	2014-06-02 06:10:51	488	rna-transcription.rb
1073	37	21528144e6f9ac0cd4859ef0	done	haskell	rna-transcription	module DNA ( toRNA ) where\n\ntoRNA :: String -> String\ntoRNA = map thymineToUracil\n  where\n    thymineToUracil 'T' = 'U'\n    thymineToUracil nc = nc	\N	f	2	1	2013-11-29 09:41:55	2013-11-29 09:41:55	505	rna-transcription.hs
1048	30	5c40a37cf49601ac79a276a7	superseded	ruby	anagram	class Anagram\n\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(sample_words)\n    sample_words.select { |word| word if anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    letters_from(word) == letters \n  end\n\n  def letters_from(word)\n    word.split("").sort\n  end\nend	\N	f	3	3	2014-04-18 15:38:29	2014-04-18 15:38:29	490	anagram.rb
1049	30	240ff150ed32d1f5522825a0	superseded	ruby	anagram	class Anagram\n\n  attr_reader :test_letters\n\n  def initialize(word)\n    @test_letters = letters_from(word)\n  end\n\n  def match(sample_words)\n    matches = []\n    sample_words.each do |word|\n      matches << word if anagram?(word)\n    end\n    matches\n  end\n\n  private\n\n  def anagram?(word)\n    letters_from(word) == test_letters \n  end\n\n  def letters_from(word)\n    word.split("").sort\n  end\nend	\N	f	3	2	2014-05-15 03:02:23	2014-05-15 03:02:23	490	anagram.rb
1050	30	48efd0bbd8b384143c482774	superseded	ruby	anagram	class Anagram\n\n  attr_reader :test_letters\n\n  def initialize(word)\n    @test_letters = letters_from(word)\n  end\n\n  def match(sample_words)\n    matches = []\n    sample_words.each do |word|\n      matches << word if anagram?(word)\n    end\n    matches\n  end\n\n  private\n\n  def anagram?(word)\n    letters = word.split("").sort\n    letters == test_letters \n  end\n\n  def letters_from(word)\n    word.split("").sort\n  end\nend	\N	f	3	1	2014-05-23 21:01:00	2014-05-23 21:01:00	490	anagram.rb
1051	30	f31a4bd51485c42b66cc459b	done	ruby	anagram	class Anagram\n\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(sample_words)\n    sample_words.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    letters_from(word) == letters \n  end\n\n  def letters_from(word)\n    word.split("").sort\n  end\nend	\N	f	6	4	2014-06-05 20:01:55	2014-06-05 20:01:55	490	anagram.rb
1052	30	68b8bdd8476d5784b57e7fe2	superseded	haskell	difference-of-squares	module Squares \n( sumOfSquares\n, squareOfSums\n, difference \n) where\n\nsumOfSquares :: Integral a => a -> a\nsumOfSquares n = sum [i ^ (2::Int) | i <- [1..n]]\n\nsquareOfSums :: Integral a => a -> a\nsquareOfSums n = sum [1..n] ^ (2::Int)\n\ndifference :: Integral a => a -> a\ndifference n = squareOfSums n - sumOfSquares n	\N	f	3	1	2014-04-10 07:35:30	2014-04-10 07:35:30	491	Squares.hs
1053	30	6eac987cca0b36ea8098c421	superseded	haskell	difference-of-squares	module Squares \n( sumOfSquares\n, squareOfSums\n, difference \n) where\n\nsumOfSquares :: Integral a => a -> a\n-- sumOfSquares n = sum [i ^ (2::Int) | i <- [1..n]]\nsumOfSquares n = n * (n + 1) * (2 * n + 1) `div` 6\n\nsquareOfSums :: Integral a => a -> a\n-- squareOfSums n = sum [1..n] ^ (2::Int)\nsquareOfSums n = sum1n ^ (2::Int)\n    where\n        sum1n | even n    = (1 + n) * (n `div` 2)\n              | otherwise = n * (1 + ((n-1) `div` 2))\n\ndifference :: Integral a => a -> a\ndifference n = squareOfSums n - sumOfSquares n	\N	f	2	2	2014-04-12 13:08:54	2014-04-12 13:08:54	491	Squares.hs
1054	30	1682044e8c9172d2795c1776	done	haskell	difference-of-squares	module Squares \n( sumOfSquares\n, squareOfSums\n, difference \n) where\n\nsumOfSquares :: Integral a => a -> a\n-- sumOfSquares n = sum [i ^ (2::Int) | i <- [1..n]]\nsumOfSquares n = n * (n + 1) * (2 * n + 1) `div` 6\n\nsquareOfSums :: Integral a => a -> a\n-- squareOfSums n = sum [1..n] ^ (2::Int)\nsquareOfSums n = sum1n ^ (2::Int)\n    where\n        sum1n = ((n + 1) * n) `div` 2\n\ndifference :: Integral a => a -> a\ndifference n = squareOfSums n - sumOfSquares n	\N	f	3	3	2014-05-19 09:23:30	2014-05-19 09:23:30	491	Squares.hs
1055	37	a28d94aaef14ddc790a3d503	pending	python	matrix	class Matrix:\n\n    def __init__(self, block = ''):\n        _rows = block.splitlines()\n        self.rows = [[int(column) for column in row.split()] for row in _rows]\n\n        _columns = zip(*self.rows)\n        self.columns = [list(column) for column in _columns]	\N	f	3	1	2014-03-12 14:23:05	2014-03-12 14:23:05	492	matrix.py
1056	37	38535a78f22052584ec0a742	pending	ruby	grade-school	class School\n  \n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add name, grade\n    @school.has_key?(grade) ? @school[grade].push(name) : @school[grade] = [name]\n  end\n\n  def to_hash\n    sort\n    @school\n  end\n\n  def grade mark\n    sort\n    @school[mark]\n  end\n\n  private \n  def sort\n    temp = Hash.new([])\n    @school.keys.sort.each { |key| temp[key] = @school[key].sort }\n    @school = temp\n  end\nend	\N	f	3	1	2013-11-23 15:09:46	2013-11-23 15:09:46	493	school.rb
1057	37	cb6543b0a93320079e806f2a	done	ruby	nucleotide-count	class DNA\n\n  def initialize(codons)\n    raise ArgumentError, "Contains invalid DNA nucleotide" unless codons.chars.all? {|c|Nucleotide.dna_member?(c)}\n    @codons = codons\n  end\n\n  def count(nucleotide)\n    raise ArgumentError, "Contains invalid nucleotides" unless Nucleotide.base_member?(nucleotide)\n    @codons.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    Nucleotide.each_dna_nucleotide.with_object({}) do |nucleotide, dna_counts|\n      dna_counts[nucleotide] = count(nucleotide)\n    end\n  end\n\nend\n\nclass Nucleotide\n  BASES = [\n    ADENINE  = "A",\n    CYTOSINE = "C",\n    GUANINE  = "G",\n    THYMINE  = "T",\n    URIDINE  = "U"\n  ]\n  DNA = BASES - [URIDINE]\n\n  def self.each_dna_nucleotide\n    DNA.each\n  end\n\n  def self.base_member?(member)\n    BASES.include?(member)\n  end\n\n  def self.dna_member?(member)\n    DNA.include?(member)\n  end\nend	\N	f	0	2	2014-01-07 19:24:42	2014-01-07 19:24:42	494	nucleotide-count.rb
1058	37	5ed5ee5946602f53d32ad033	superseded	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = %w[A T C G]\n  NUCLEOTIDES_AND_URACIL = NUCLEOTIDES.dup.concat %w[U]\n\n  def initialize(code)\n    raise ArgumentError if invalid_dna(code)\n    @code = code\n  end\n\n  def count(nucleotide)\n    raise ArgumentError if invalid_nucleotide(nucleotide)\n    nucleotide_counts.fetch(nucleotide) { 0 }\n  end\n\n  def nucleotide_counts\n    @nucleotide_counters = Hash[NUCLEOTIDES.zip([0]*NUCLEOTIDES.size)]\n    @code.chars.each do |char|\n      @nucleotide_counters[char] += 1\n    end\n    @nucleotide_counters\n  end\n\n  private\n\n  def invalid_dna(code)\n    return false if code.chars.empty?\n    code.chars.any? { |c| !NUCLEOTIDES.include?(c) }\n  end\n\n  def invalid_nucleotide(nucleotide)\n    !NUCLEOTIDES_AND_URACIL.include? nucleotide\n  end\n\nend	\N	f	4	1	2014-04-22 20:55:24	2014-04-22 20:55:24	494	nucleotide-count.rb
1059	37	f8ca9997aad810b1a8e0dc21	needs_input	ruby	grains	class Grains\n  def square(number)\n    2 ** (number - 1)\n  end\n\n  def total\n    18446744073709551615\n  end\nend	\N	f	1	1	2014-02-06 00:14:58	2014-02-06 00:14:58	495	grains.rb
1061	37	f5152cfcc95b4a97c13d8efb	done	ruby	difference-of-squares	class Squares\n\n  def initialize(num)\n    @num = num\n  end\n\n  def sum_of_squares\n    sum = 0\n    @num.times do |i|\n      sum += (i + 1) ** 2\n    end\n    sum\n  end\n\n  def square_of_sums\n    sum = 0\n    @num.times do |i|\n      sum += (i + 1)\n    end\n    sum * sum\n  end\n\n  def difference\n    square_of_sums - sum_of_squares\n  end\n\nend	\N	f	0	1	2014-01-11 09:57:47	2014-01-11 09:57:47	497	squares.rb
1062	37	4d2ebe24cb90928540d8ab41	done	ruby	word-count	class Phrase\n  WORD = /\\w+/\n  CONTRACTION = /#{WORD}'#{WORD}/\n\n  def initialize(string)\n    @words = string.downcase.scan(/#{CONTRACTION}|#{WORD}/)\n  end\n\n  def word_count\n    @words.each.with_object(Hash.new(0)) do |word, counts_hash|\n      counts_hash[word] += 1\n    end\n  end\nend	\N	f	0	3	2013-11-22 18:33:56	2013-11-22 18:33:56	498	word-count.rb
1063	37	0da05b6554dce479dce7c0f4	superseded	ruby	word-count	class Phrase\n  IGNORED_PUNCTUATION = /'/\n  WORD_SEPARATOR = /[^\\w]+/\n\n  def initialize(string)\n    @words = string.downcase.gsub(IGNORED_PUNCTUATION, "").split(WORD_SEPARATOR)\n  end\n\n  def word_count\n    @words.each.with_object(Hash.new(0)) do |word, counts_hash|\n      counts_hash[word] += 1\n    end\n  end\nend	\N	f	2	2	2013-12-14 18:12:20	2013-12-14 18:12:20	498	word-count.rb
1064	37	50bc8a66606cc2aa41ef2945	superseded	ruby	word-count	class Phrase\n  IGNORED_PUNCTUATION = /[^\\w\\s]/\n\n  def initialize(string)\n    @words = string.downcase.gsub(IGNORED_PUNCTUATION, "").split\n  end\n\n  def word_count\n    @words.inject(Hash.new(0)) do |counts_hash, word|\n      counts_hash[word] += 1\n      counts_hash\n    end\n  end\nend	\N	f	4	1	2014-05-08 07:05:09	2014-05-08 07:05:09	498	word-count.rb
1065	37	f8a48e7322b8ccaea8d17875	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n    return (year % 4 == 0) && ( !(year % 100 == 0) || (year % 400 == 0) )\n}	\N	f	1	1	2013-11-14 15:22:08	2013-11-14 15:22:08	499	leap.go
1066	37	9cdcbef89620946f3500ec6c	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn (year%4 == 0) && (!(year%100 == 0) || (year%400 == 0))\n}	\N	f	3	2	2014-02-21 16:43:53	2014-02-21 16:43:53	499	leap.go
1067	37	a7f66471c8eac5a0b46d2d4b	hibernating	haskell	anagram	module Anagram\n( anagramsFor\n) where\n\nimport Data.List\nimport Data.Char\n\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word others = filter isWord $ snd $ unzip $ filter isEqual sortedPairs\n    where\n        sorted        = sort $ map toLower word\n        sortedPairs   = zip (map sort loweredOthers) others\n        loweredOthers = map (map toLower) others\n        isEqual       = \\el -> fst el == sorted\n        isWord        = \\el -> map toLower el /= map toLower word	\N	f	3	1	2014-02-13 03:56:02	2014-02-13 03:56:02	500	Anagram.hs
1069	37	93fb56c0e3272017894f8598	done	javascript	secret-handshake	var SecretHandshake = function(code) {\r\n  var isValid = function() {\r\n    return typeof(code) === "number" || code.match(/^[01]+$/);\r\n  };\r\n\r\n  if(!isValid())\r\n    throw(new Error("Handshake must be a number"));\r\n\r\n  var motions = ["wink", "double blink", "close your eyes", "jump"],\r\n      REVERSE_MASK = 0x10, // Hex 10 === Binary 10000\r\n      commandList,\r\n      myBinaryParse = function(binString) { // parseInt(code, 2) is cheating\r\n        return binString.split("").reverse()\r\n                        .map(function(d, i) { return d << i; })\r\n                        .reduce(function(number, powerOfTwo) {\r\n                          return number + powerOfTwo;\r\n                        }, 0);\r\n      },\r\n      numericCode = (function(stringOrNumber) {\r\n        if(typeof(stringOrNumber) === "string") {\r\n          return myBinaryParse(stringOrNumber);\r\n        }\r\n        else // typeof(stringOrNumber) === "number"\r\n          return stringOrNumber;\r\n      })(code),\r\n      getCommandList = function() {\r\n        var list = [], i, len = motions.length;\r\n        for(i = 0; i < len; i++) {\r\n          if(numericCode >> i & 1)\r\n            list.push(motions[i]);\r\n        }\r\n        if(code & REVERSE_MASK)\r\n          list = list.reverse();\r\n\r\n        return list;\r\n      };\r\n\r\n  this.commands = function() {\r\n    return commandList = commandList || getCommandList();\r\n  };\r\n\r\n};\r\n\r\nmodule.exports = SecretHandshake;\r	\N	f	3	2	2014-03-30 06:11:16	2014-03-30 06:11:16	501	secret-handshake.js
1070	37	d20fd6ba4e0525abbef0e743	done	ruby	bob	class Bob\n\t\n\tdef hey(message)\n\t\tif message == "" || message.nil?\n\t\t\treturn "Fine. Be that way."\n\t\t elsif message.upcase == message\n\t\t\treturn "Woah, chill out!"\n\t\telsif message.end_with?("?")\n\t\t\treturn "Sure."\n\t\telsif message.end_with?("!") || message\n\t\t\treturn "Whatever."\n\t\tend\n\tend\nend	\N	f	0	1	2013-12-02 03:33:38	2013-12-02 03:33:38	502	bob.rb
1071	37	b1a9fd0009aff7f682ac2da1	done	haskell	nth-prime	module Prime (nth) where\n\nnth :: Int -> Int\nnth = (primes !!) . (subtract 1) where\n    primes = [ n | n <- [2 ..], all ((/= 0) . (rem n)) [2 .. floor $ sqrt $ fromIntegral n] ]	\N	f	3	1	2014-01-09 13:46:18	2014-01-09 13:46:18	503	nth-prime.hs
1072	37	7a35c031416a6c035de49ae0	pending	python	anagram	class Anagram:\n    def __init__(self,word):\n        self.word = word\n        self.letters = self.word_to_letters(word)\n\n    def word_to_letters(self,word):\n        return sorted([ c.lower() for c in word ])\n\n    def match(self,dictionary):\n        anagrams = []\n\n        for w in dictionary:\n            if w.lower() == self.word.lower():\n                continue\n\n            if self.letters == self.word_to_letters(w):\n                anagrams.append(w)\n\n\n        return anagrams	\N	f	3	1	2014-01-27 02:25:10	2014-01-27 02:25:10	504	anagram.py
1076	37	59cec4baea9845304683e508	superseded	javascript	grade-school	(function(module) {\n  function School(name) {\n    this.db = {};\n  }\n\n  School.prototype.add = function(name, grade) {\n    this.db[grade] = this.db[grade] || [];\n    this.db[grade].push(name);\n  };\n\n  module.exports = School;\n}(module));	\N	f	3	1	2014-04-17 04:53:21	2014-04-17 04:53:21	507	grade-school.js
1077	37	1326040bfbb6eeb6ed1d1bea	superseded	elixir	word-count	defmodule Words do\n  import Enum\n  import Regex\n  import String\n\n  defp is_same_as something do\n    fn x ->\n      x == something\n    end\n  end\n\n  defp with_count_in list do\n    fn x ->\n      { Enum.first(x), count(list, is_same_as x) }\n    end\n  end\n\n  def count phrase do\n    words = scan(%r/\\w+/g, downcase phrase)\n\n    HashDict.new map(uniq(words), with_count_in words)\n  end\nend	\N	f	3	2	2014-01-10 22:34:27	2014-01-10 22:34:27	508	word-count.exs
1078	37	1cd0a04a69328dc2cc765548	superseded	elixir	word-count	defmodule Words do\n  import Enum\n  import Regex\n  import String\n\n  defp is_same_as something do\n    fn x ->\n      x == something\n    end\n  end\n\n  defp with_count_in list do\n    fn x ->\n      { x, count(list, is_same_as x) }\n    end\n  end\n\n  def count phrase do\n    words = scan(%r/\\w+/g, downcase phrase)\n\n    HashDict.new map(uniq(words), with_count_in words)\n  end\nend	\N	f	3	1	2014-01-12 14:16:17	2014-01-12 14:16:17	508	word-count.exs
1079	37	91479cf32867a8278bcf1576	superseded	elixir	word-count	defmodule Words do\n  defp words(string) do\n    Regex.scan(%r/\\w+/g, string)\n    |> Enum.map(&Enum.first/1)\n  end\n\n  defp inc_key(key, hash), do: Dict.update(hash, key, 1, &(&1 + 1))\n\n  defp count_items(list), do: List.foldl(list, HashDict.new, &inc_key/2)\n\n  def count(phrase) do\n    phrase\n    |> String.downcase\n    |> words\n    |> count_items\n  end\nend	\N	f	0	3	2014-03-14 22:56:25	2014-03-14 22:56:25	508	word-count.exs
1080	37	89d757cd363de7291f1e992b	done	elixir	word-count	defmodule Words do\n  defp words(string) do\n    Regex.scan(%r/\\w+/g, string)\n    |> Enum.map(&hd/1)\n  end\n\n  defp inc_key(key, hash), do: Dict.update(hash, key, 1, &(&1 + 1))\n\n  defp count_items(list), do: List.foldl(list, HashDict.new, &inc_key/2)\n\n  def count(phrase) do\n    phrase\n    |> String.downcase\n    |> words\n    |> count_items\n  end\nend	\N	f	0	4	2014-05-29 21:24:53	2014-05-29 21:24:53	508	word-count.exs
1081	37	779050d2572ca03b8619ff3b	superseded	ruby	proverb	class Proverb\r\n # "For want of a shoe the horse was lost.\\n" +\r\n # "And all for the want of a nail."\r\n\tdef initialize(*chain, qualifier: {})\r\n\t\t@consequences = chain\r\n\t\t@qualifier = qualifier[qualifier] # + " " if !qualifier[:qualifier].nil?\r\n\tend\r\n\r\n\tdef to_s\r\n\r\n\r\n    proverb = construct_consequences\r\n    \r\n    @qualifier += " " if !@qualifier.nil?\r\n    proverb += "And all for the want of a #{@qualifier}#{@consequences[0]}."\r\n\tend\r\n\r\n\tdef construct_consequences\r\n\t\tproverb = ""\r\n\t\t1.upto(@consequences.length-1) do |i|\r\n\t\t\t\tproverb += "For want of a #{@consequences[i-1]}" + " the #{@consequences[i]} was lost.\\n" \r\n\t\tend\r\n\t\tproverb\r\n\tend\r\n\r\nend	\N	f	3	1	2013-12-20 00:06:36	2013-12-20 00:06:36	509	proverb.rb
1083	41	93499559104299afff881a0d	done	javascript	word-count	var Words = function(sentence) {\n\n    this.count = {};\n    \n    var matches = sentence.match(/\\w+/g);\n    \n    for (var i = 0; i < matches.length; ++i) {\n        var word = matches[i].toLowerCase();\n\n        if (!this.count[word]) {\n            this.count[word] = 0;\n        }\n\n        ++this.count[word];\n    }\n\n};\n\nmodule.exports = Words;	\N	f	3	1	2014-06-07 02:22:30	2014-06-07 02:22:30	510	word-count.js
1108	41	1f5cdefbdac8ce46dc4fe63d	superseded	clojure	word-count	(ns phrase (:require [clojure.string :as s]))\n\n(defn combine-map-with [func default m k] \n  (let [current (m k default)]\n    (assoc m k (func current))))\n(def combine-map-count (partial combine-map-with inc 0))\n\n(defn word-count [phrase]\n  (let [words (s/split (s/lower-case phrase) #"[^\\w]+")]\n  (reduce combine-map-count {} words)))	\N	f	2	1	2014-04-30 11:49:02	2014-04-30 11:49:02	521	word-count.clj
1109	41	e068d990a74413297601d65f	done	clojure	word-count	(ns phrase (:require [clojure.string :refer [lower-case split]]))\n\n(defn word-count\n  "Given a phrase, count the occurrences of each word in that phrase. Returns a hash {word count}"\n  [phrase]\n  (frequencies (split (lower-case phrase) #"[^\\w]+")))	\N	f	2	2	2014-05-12 04:05:01	2014-05-12 04:05:01	521	word-count.clj
1085	41	618bdbf3735d8863103d1c76	hibernating	ruby	grains	class Grains\n  @@total_squares = 64\n\n  def square(square_num)\n    2 ** (square_num - 1)\n  end\n\n  def total\n    1.upto(@@total_squares).inject(0) do |sum, n|\n      sum += square(n)\n    end\n  end\nend	\N	f	1	1	2014-05-06 10:44:19	2014-05-06 10:44:19	512	grains.rb
1086	41	737f07014ba3c437929bd9e7	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @original_word = word\n    @word = @original_word.downcase\n  end\n\n  def match(list)\n    list.each_with_object([]) do |w, l|\n      l << w if anagram?(w)\n    end\n  end\n\n  private\n  def anagram?(word)\n    word = word.downcase\n    different(word) && same_length(word) && same_characters(word)\n  end\n\n  def different(word)\n    @word != word\n  end\n\n  def same_length(word)\n    @word.length == word.length\n  end\n\n  def same_characters(word)\n    @word.split('').sort == word.split('').sort\n  end\nend	\N	f	3	1	2014-05-09 02:13:08	2014-05-09 02:13:08	513	anagram.rb
1087	41	08b3c7056e4ef9853043e583	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @original_word = word\n    @reference = @original_word.downcase\n  end\n\n  def match(list)\n    list.each_with_object([]) do |w, l|\n      l << w if anagram?(w)\n    end\n  end\n\n  private\n  def anagram?(candidate)\n    candidate = candidate.downcase\n    different(candidate) && same_length(candidate) && same_characters(candidate)\n  end\n\n  def different(candidate)\n    @reference != candidate\n  end\n\n  def same_length(candidate)\n    @reference.length == candidate.length\n  end\n\n  def same_characters(candidate)\n    @reference.split('').sort == candidate.split('').sort\n  end\nend	\N	f	3	2	2014-05-30 05:33:29	2014-05-30 05:33:29	513	anagram.rb
1088	41	af9b3ef3a0e47ef115450788	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(list)\n    list.each_with_object([]) do |w, l|\n      l << w if anagram?(w)\n    end\n  end\n\n  private\n  def anagram?(candidate)\n    candidate = candidate.downcase\n    different(candidate) && same_characters(candidate)\n  end\n\n  def different(candidate)\n    @word != candidate\n  end\n\n  def same_characters(candidate)\n    @word.split('').sort == candidate.split('').sort\n  end\nend	\N	f	3	3	2014-05-31 17:46:51	2014-05-31 17:46:51	513	anagram.rb
1089	41	f42d3d00bc0da95b2da42fd1	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(list)\n    list.each_with_object([]) do |w, l|\n      l << w if anagram?(w)\n    end\n  end\n\n  private\n  def anagram?(candidate)\n    candidate = candidate.downcase\n    different?(candidate) && same_characters?(candidate)\n  end\n\n  def different?(candidate)\n    @word != candidate\n  end\n\n  def same_characters?(candidate)\n    @word.chars.sort == candidate.chars.sort\n  end\nend	\N	f	4	4	2014-06-02 06:47:51	2014-06-02 06:47:51	513	anagram.rb
1090	41	6e93e3e95602b302d68e2d7d	hibernating	ruby	hamming	class DNA\n  attr_reader :strand\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(new_strand)\n    pair_with(new_strand).count { |pair| mutated?(pair) }\n  end\n\n  private\n  def pair_with(other)\n    length_to_compare = [strand.length, other.length].min\n    nucleotides(strand, length_to_compare).zip(\n      nucleotides(other, length_to_compare))\n  end\n\n  def mutated?(pair)\n    pair.first != pair.last\n  end\n\n  def nucleotides(strand, length)\n    strand.chars.take(length)\n  end\nend	\N	f	0	1	2014-05-21 23:30:39	2014-05-21 23:30:39	514	point-mutations.rb
1091	41	9c71f6467f6bc508f781b0d4	pending	elixir	binary	defmodule Binary do\n  @doc """\n  Convert a string containing a binary number to an integer.\n\n  On errors returns 0.\n  """\n  @spec to_decimal(String.t) :: non_neg_integer\n  def to_decimal(string) do\n    String.codepoints(string) |> Enum.reduce 0, &accumulate_bits/2\n  end\n\n  defp accumulate_bits(bit, accumulator) do\n    accumulator * 2 + bit_value(bit)\n  end\n\n  defp bit_value("1"), do: 1\n  defp bit_value(_),   do: 0\n\nend	\N	f	3	1	2014-05-29 16:39:31	2014-05-29 16:39:31	515	binary.exs
1092	41	57f5e2fd1a579a19a2bdddbb	done	ruby	rna-transcription	class String\n  def to_a\n    chars.to_a\n  end\nend\n\nmodule Complement\n  def self.dna_to_rna_hash\n    {\n      'G' => 'C',\n      'C' => 'G',\n      'T' => 'A',\n      'A' => 'U'\n    }\n  end\n\n  def self.rna_to_dna_hash\n    dna_to_rna_hash.invert\n  end\n\n  def self.of_dna(dna)\n    dna.to_a.collect do |component|\n      dna_to_rna_hash[component]\n    end.join\n  end\n\n  def self.of_rna(rna)\n    rna.to_a.collect do |component|\n      rna_to_dna_hash[component]\n    end.join\n  end\nend	\N	f	6	1	2014-06-08 02:40:50	2014-06-08 02:40:50	516	complement.rb
1093	41	b7fbb26a6686ad10473252d1	done	haskell	grains	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Grains( square, total ) where\n\nsquare :: Integer -> Integer\nsquare s = 2 ^ (s - 1)\n\ntotal :: Integer\ntotal = sum $ map square [1..64] 	\N	f	3	1	2014-05-07 21:07:32	2014-05-07 21:07:32	517	Grains.hs
1096	41	06db6f458f2586778bb9ebf9	hibernating	python	rna-transcription	# Write a program that can translate a given DNA string to the transcribed RNA string corresponding to it.\n# The four nucleotides found in DNA are adenine (**A**), cytosine (**C**), guanine (**G**) and thymine (**T**).\n# The four nucleotides found in RNA are adenine (**A**), cytosine (**C**), guanine (**G**) and uracil (**U**).\n#Given a DNA strand, its transcribed RNA strand is formed by replacing all occurrences of thymine with uracil.\n\nclass DNA:\n  def __init__(self, nucleotides):\n    self.dna = nucleotides\n    self.rna = self.dna.replace('T','U').replace('t','u')\n\n  def to_rna(self):\n    return self.rna	\N	f	5	1	2014-05-07 15:06:21	2014-05-07 15:06:21	519	rna-transcription.py
1098	41	65aa8e7e5a7b83229576daba	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [word words]\n  (filter\n   (partial\n    #(and (= (sort %1) (sort %2))\n          (not (= %1 %2)))\n    word)\n   words))	\N	f	3	8	2014-05-13 13:03:38	2014-05-13 13:03:38	520	anagram.clj
1099	41	370230c168fec3192ecc3ea7	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram?\n  [expression assignment]\n  (and (= 0 (compare expression assignment))\n       (not (= expression assignment))))\n\n(defn anagrams-for\n  [word words]\n  (filter (partial anagram? word) words))	\N	f	0	6	2014-05-15 09:42:22	2014-05-15 09:42:22	520	anagram.clj
1100	41	e5868f5db521afd8c27db321	superseded	clojure	anagram	(ns anagram\n  (require [clojure.string :as str]))\n\n(defn- sort-chars\n  [word]\n  (sort (concat word)))\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort-chars word1) (sort-chars word2)))\n\n(defn- equal-words?\n  [word1 word2]\n  (= word1 word2))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (equal-words? word1 word2))))\n\n(defn- conj-anagram\n  [anagrams word1 word2]\n  (if (anagram? word1 word2)\n    (conj anagrams word2)\n    anagrams))\n\n(defn anagrams-for\n  [word words]\n  (loop [rem-words words\n         anagrams []]\n    (if (empty? rem-words)\n      anagrams\n      (recur (rest rem-words) (conj-anagram anagrams word (first rem-words))))))	\N	f	3	2	2014-05-24 10:42:30	2014-05-24 10:42:30	520	anagram.clj
1101	41	93bda2f71fc1bcdd372c3644	superseded	clojure	anagram	(ns anagram)\n\n(defn- sort-chars\n  [word]\n  (sort (concat word)))\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort-chars word1) (sort-chars word2)))\n\n(defn- equal-words?\n  [word1 word2]\n  (= word1 word2))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (equal-words? word1 word2))))\n\n(defn- conj-anagrams\n  [anagrams word1 word2]\n  (if (anagram? word1 word2)\n    (conj anagrams word2)\n    anagrams))\n\n(defn anagrams-for\n  "Returns every anagram of word in the collection."\n  [word words]\n  (loop [remaining-words words\n         anagrams  []]\n    (if (empty? remaining-words)\n      anagrams\n      (recur (rest remaining-words)\n             (conj-anagrams anagrams word (first remaining-words))))))	\N	f	1	4	2014-05-27 16:03:27	2014-05-27 16:03:27	520	anagram.clj
1102	41	58d3c9bb7472b16fadab7fa1	superseded	clojure	anagram	(ns anagram)\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort word1) (sort word2)))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (= word1 word2))))\n\n(defn anagrams-for\n  [word words]\n  (filter (partial anagram? word) words))	\N	f	3	7	2014-05-29 18:34:06	2014-05-29 18:34:06	520	anagram.clj
1103	41	3cf57083e4551c75130a1634	superseded	clojure	anagram	(ns phrase\n  (require [clojure.string :as str]))\n\n(defn- downcase\n  [phrase]\n  (str/lower-case phrase))\n\n(defn- split-up\n  [phrase]\n  (re-seq #"\\w+" phrase))\n\n(defn- count-words\n  [words]\n  (frequencies words))\n\n(defn word-count\n  "Counts appearances of words in a given phrase."\n  [phrase]\n  (-> phrase downcase split-up count-words))	\N	f	3	1	2014-06-11 05:43:26	2014-06-11 05:43:26	520	anagram.clj
1104	41	19dc396e73363045bc2e4849	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [word words]\n\n  (defn- anagram?\n    [assignment]\n    (and (= (sort word) (sort assignment))\n         (not (= word assignment))))\n\n  (filter anagram? words))	\N	f	1	9	2014-06-19 19:42:48	2014-06-19 19:42:48	520	anagram.clj
1105	41	e098ed99626b7b9284c475cf	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram?\n  [expression assignment]\n  (and (= (sort expression) (sort assignment))\n       (not (= expression assignment))))\n\n(defn anagrams-for\n  [word words]\n  (vec (filter (partial anagram? word) words)))	\N	f	2	5	2014-06-23 09:20:29	2014-06-23 09:20:29	520	anagram.clj
1106	41	86f1d7e60505cc8af6c22b96	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram?\n  [word]\n  (let [sorted-word (frequencies word)]\n    (fn [assignment]\n      (let [sorted-assignment (frequencies assignment)]\n        (and (= sorted-word sorted-assignment)\n             (not (= word assignment)))))))\n\n(defn anagrams-for\n  [word words]\n  (filter (anagram? word) words))	\N	f	6	10	2014-06-23 16:52:47	2014-06-23 16:52:47	520	anagram.clj
1107	41	abc66794a8c21d61308075a5	done	clojure	anagram	(ns anagram)\n\n(defn- check-for-anagram [word]\n  (let [word-chars (frequencies word)]\n    (fn [assigned-word]\n      (let [assigned-chars (frequencies assigned-word)]\n        (and (= word-chars assigned-chars)\n             (not (= word assigned-word)))))))\n\n(defn anagrams-for\n  [word collection-of-words]\n  (filter (check-for-anagram word) collection-of-words))	\N	f	6	11	2014-06-27 23:38:10	2014-06-27 23:38:10	520	anagram.clj
1111	41	04369ba5c4fcfad67c6119eb	superseded	haskell	rna-transcription	module DNA(toRNA) where\n\nthymidine = 'T'\nuracil    = 'U'\n\nthymidineToUracil :: Char -> [Char]\nthymidineToUracil nucleotide = if (thymidine == nucleotide) then [uracil] else [nucleotide]\n\ntoRNA :: String -> String\ntoRNA = concatMap thymidineToUracil	\N	f	6	1	2014-05-01 03:55:07	2014-05-01 03:55:07	523	rna-transcription.hs
1112	41	8ab34b153ff42f9b68969adf	done	haskell	rna-transcription	module DNA(toRNA) where\n\ntranscribeThymidineToUracil :: Char -> Char\ntranscribeThymidineToUracil 'T' = 'U'\ntranscribeThymidineToUracil n   = n\n\ntoRNA :: String -> String\ntoRNA = map transcribeThymidineToUracil	\N	f	2	2	2014-05-09 23:00:22	2014-05-09 23:00:22	523	rna-transcription.hs
1114	42	7197269bf88e1c9e153e8308	superseded	javascript	beer-song	;\nvar Beer = function() {\n    var self = this,\n    \n        capitalize = function(words) {\n            return words[0].toUpperCase() + words.slice(1);\n        },\n\n        count_down_with = function(plural, singular, none) {\n            var count_down = function(n) {\n                if(n > 1) return plural.replace("<n>", n);\n                if(n === 1) return singular;\n                return none;\n            };\n            return count_down;\n        },\n\n        number = count_down_with("<n>", "1", "no more"),\n\n        unit = count_down_with("bottles", "bottle", "bottles"),\n\n        first_action = count_down_with("Take one down", "Take it down", "Go to the store"),\n\n        second_action = count_down_with("pass it around", "pass it around", "buy some more"),\n\n        phrase = function(n) {\n            if(n < 0) n = 99;\n            return number(n) + " " + unit(n) + " of beer";\n        };\n\n    this.verse = function(n) {\n        var main_phrase = phrase(n); \n        var after_phrase = phrase(n - 1);\n        return capitalize(main_phrase) + " on the wall, " + main_phrase + ".\\n" +\n            first_action(n) + " and " + second_action(n) + ", " +\n            after_phrase + " on the wall.\\n";\n    };\n\n    this.sing = function(start, end) {\n        var finish = end || 0,\n            song = "";\n\n        for(var i = start; i >= finish; i--) {\n            song += self.verse(i);\n            if(i > finish) song += "\\n";\n        }\n\n        return song;\n    };\n\n    return self;\n};\n\nmodule.exports = Beer();	\N	f	0	1	2013-12-29 05:46:23	2013-12-29 05:46:23	524	beer-song.js
1115	42	3a0e25d3bb5cc01989a9539c	done	javascript	nucleotide-count	function DNA(dna) {\n  this.nucleotideCounts = {A: 0, C: 0, G: 0, T: 0};\n  dna.split('').forEach(function(nucleotide) {\n    this.nucleotideCounts[nucleotide]++;\n  }, this);\n}\n\nDNA.prototype.count = function(nucleotide) {\n  switch(nucleotide) {\n    case 'U':\n      return 0;\n    case 'A':\n    case 'C':\n    case 'G':\n    case 'T':\n      return this.nucleotideCounts[nucleotide];\n    default:\n      throw new Error('Invalid Nucleotide');\n  }\n};\n\nmodule.exports = DNA;	\N	f	2	1	2014-03-09 05:33:45	2014-03-09 05:33:45	525	nucleotide-count.js
1116	42	232a562ce8ba2715a0f2a43c	done	haskell	triangle	module Triangle (TriangleType(..), triangleType) where\n\nimport Data.List (nub)\n\ndata TriangleType = Equilateral\n                  | Isosceles\n                  | Scalene\n                  | Illogical\n                  deriving (Eq, Show)\n\ntriangleType :: (Num a, Ord a) => a -> a -> a -> TriangleType\ntriangleType x y z \n    | m >= sum [x,y,z] - m = Illogical\n    | l == 1               = Equilateral\n    | l == 2               = Isosceles\n    | l == 3               = Scalene\n    where m = maximum [x,y,z]\n          l = length (nub [x,y,z])	\N	f	3	1	2014-03-03 18:38:27	2014-03-03 18:38:27	526	triangle.hs
1117	42	0959cdb7473342a2c6d460c1	done	ruby	etl	class ETL\n  def self.transform(old_data)\n    new_data = Hash.new\n\n    old_data.each_pair do |score, letters|\n      letters.each { |letter| new_data[letter.downcase] = score }\n    end\n\n    new_data\n  end\nend	\N	f	3	1	2013-12-28 05:14:50	2013-12-28 05:14:50	527	etl.rb
1118	42	7358e5bc274f66241385d23a	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> String.split(~R/\\W+/, trim: true)\n      |> frequencies\n  end\n\n  defp frequencies(words) do\n    import Dict\n    Enum.reduce(words, HashDict.new,\n                fn(w, acc) ->\n                  put(acc, w, get(acc, w, 0) + 1)\n                end)\n  end\nend	\N	f	3	1	2013-11-08 04:09:43	2013-11-08 04:09:43	528	word_count.exs
1119	42	3edf6daa51fb1fb611c59a87	hibernating	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> String.split(~R/\\W+/, trim: true)\n      |> frequencies\n  end\n\n  defp frequencies(words) do\n    Enum.reduce(words, HashDict.new,\n                fn(w, acc) ->\n                  Dict.update(acc, w, 1, &(&1 + 1))\n                end)\n  end\nend	\N	f	2	2	2013-12-06 03:01:21	2013-12-06 03:01:21	528	word_count.exs
1122	42	c1f35ea90a67a1a5ec271039	superseded	haskell	point-mutations	module DNA (hammingDistance) where\r\n\r\nhammingDistance :: String -> String -> Int\r\nhammingDistance x y = length (filter (\\(a, b) -> a /= b) (zip x y))\r	\N	f	4	1	2014-03-11 06:07:49	2014-03-11 06:07:49	531	dna.hs
1123	42	d6af2b36d71a82a6cf4fd0df	done	haskell	point-mutations	module DNA (hammingDistance) where\r\n\r\nhammingDistance :: Eq a => [a] -> [a] -> Int\r\nhammingDistance x y = length (filter id (zipWith (/=) x y))\r	\N	f	4	2	2014-06-02 15:48:50	2014-06-02 15:48:50	531	dna.hs
1124	42	f7bee8c2aabed1de8de45be4	done	go	binary	package binary\n\nimport (\n\t"log"\n\t"math"\n\t"strconv"\n)\n\n// ToDecimal converts a binary number to its decimal equivalent.\nfunc ToDecimal(binary string) int {\n\toutput := 0\n\tpow := len(binary) - 1\n\n\tfor _, bitRune := range binary {\n\t\tbit, error := strconv.ParseUint(string(bitRune), 10, 0)\n\t\tif error != nil {\n\t\t\tlog.Fatal(error)\n\t\t}\n\t\tif bit > 1 {\n\t\t\treturn 0\n\t\t} else {\n\t\t\toutput = output + (int(bit) * int(math.Pow(float64(2), float64(pow))))\n\t\t}\n\t\tpow--\n\t}\n\n\treturn output\n}	\N	f	3	1	2013-11-17 16:06:11	2013-11-17 16:06:11	532	binary.go
1126	42	2f9be9f83c6648fc2ed2294c	superseded	ruby	food-chain	class FoodChainSong\r\n  attr_reader :verses_count\r\n\r\n  def sing\r\n    verses(1, 8)\r\n  end\r\n\r\n  def verse(verses_count)\r\n    @verses_count = verses_count\r\n    compose_song\r\n  end\r\n\r\n  def verses(first_verse, last_verse)\r\n    (first_verse..last_verse).reduce('') do |songs, number|\r\n      songs << verse(number) << "\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def compose_song\r\n    cumulative_song = prelude\r\n    cumulative_song << (tragedy_song? ? sad_final : song_continue)\r\n  end\r\n\r\n  def song_continue\r\n    continue_song = exlamation\r\n    continue_song << previous_verses\r\n  end\r\n\r\n  def previous_verses\r\n    @verses_count.downto(1).reduce('') do |verses, number|\r\n      verses << previous_verse(number)\r\n    end\r\n  end\r\n\r\n  def previous_verse(number)\r\n    case number\r\n    when 1 then "I don't know why she swallowed the fly. Perhaps she'll die.\\n"\r\n    when 2 then "She swallowed the spider to catch the fly.\\n"\r\n    when 3 then "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n"\r\n    when 4 then "She swallowed the cat to catch the bird.\\n"\r\n    when 5 then "She swallowed the dog to catch the cat.\\n"\r\n    when 6 then "She swallowed the goat to catch the dog.\\n"\r\n    when 7 then "She swallowed the cow to catch the goat.\\n"\r\n    end\r\n  end\r\n\r\n  def exlamation\r\n    case @verses_count\r\n    when 2 then "It wriggled and jiggled and tickled inside her.\\n"\r\n    when 3 then "How absurd to swallow a bird!\\n"\r\n    when 4 then "Imagine that, to swallow a cat!\\n"\r\n    when 5 then "What a hog, to swallow a dog!\\n"\r\n    when 6 then "Just opened her throat and swallowed a goat!\\n"\r\n    when 7 then "I don't know how she swallowed a cow!\\n"\r\n    else ''\r\n    end\r\n  end\r\n\r\n  def animal\r\n    case @verses_count\r\n    when 1 then 'fly'\r\n    when 2 then 'spider'\r\n    when 3 then 'bird'\r\n    when 4 then 'cat'\r\n    when 5 then 'dog'\r\n    when 6 then 'goat'\r\n    when 7 then 'cow'\r\n    when 8 then 'horse'\r\n    end\r\n  end\r\n\r\n  def prelude\r\n    "I know an old lady who swallowed a #{ animal }.\\n"\r\n  end\r\n\r\n  def tragedy_song?\r\n    @verses_count == 8\r\n  end\r\n\r\n  def sad_final\r\n    "She's dead, of course!\\n"\r\n  end\r\n\r\n# mental?)\r\nend\r	\N	f	0	2	2014-02-10 23:41:25	2014-02-10 23:41:25	533	food_chain.rb
1127	42	5a95098e49b937199ddd00d4	pending	ruby	food-chain	class FoodChainSong\n  def sing\n    verses(1, 8)\n  end\n\n  def verse(verses_count)\n    compose_cumulative_song(verses_count)\n  end\n\n  def verses(first_verse, last_verse)\n    (first_verse..last_verse).reduce('') do |long_song, number|\n      long_song << verse(number) << "\\n"\n    end\n  end\nend\n\ndef compose_cumulative_song(animal_number)\n  swallow_animal = animal(animal_number)\n  cumulative_song = prelude_about_lady(swallow_animal)\n\n  if horse?(swallow_animal)\n    cumulative_song << tragedy_final\n  else\n    cumulative_song << exclamation(swallow_animal)\n    cumulative_song << swallows_story(animal_number)\n  end\nend\n\ndef swallows_story(animals_count)\n  [\n    '',\n    "I don't know why she swallowed the fly. Perhaps she'll die.\\n",\n    "She swallowed the spider to catch the fly.\\n",\n    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n",\n    "She swallowed the cat to catch the bird.\\n",\n    "She swallowed the dog to catch the cat.\\n",\n    "She swallowed the goat to catch the dog.\\n",\n    "She swallowed the cow to catch the goat.\\n"\n  ].values_at(1..animals_count).reverse.join\nend\n\ndef exclamation(swallow_animal)\n  case swallow_animal\n  when 'spider' then "It wriggled and jiggled and tickled inside her.\\n"\n  when 'bird' then "How absurd to swallow a bird!\\n"\n  when 'cat' then "Imagine that, to swallow a cat!\\n"\n  when 'dog' then "What a hog, to swallow a dog!\\n"\n  when 'goat' then "Just opened her throat and swallowed a goat!\\n"\n  when 'cow' then "I don't know how she swallowed a cow!\\n"\n  else ''\n  end\nend\n\ndef animal(number)\n  case number\n  when 1 then 'fly'\n  when 2 then 'spider'\n  when 3 then 'bird'\n  when 4 then 'cat'\n  when 5 then 'dog'\n  when 6 then 'goat'\n  when 7 then 'cow'\n  when 8 then 'horse'\n  end\nend\n\ndef horse?(swallow_animal)\n  swallow_animal == 'horse'\nend\n\ndef prelude_about_lady(swallow_animal)\n  "I know an old lady who swallowed a #{ swallow_animal }.\\n"\nend\n\ndef tragedy_final\n  "She's dead, of course!\\n"\nend	\N	f	0	4	2014-03-27 21:58:02	2014-03-27 21:58:02	533	food_chain.rb
1152	43	c45ed5726999b94d6ee85811	superseded	scala	phone-number	class PhoneNumber(n: String) {\n  private val invalidNumber =  "0000000000"\n\n  val number = {\n    val digits = n.filter(_.isDigit)\n    digits.length match {\n      case 11 => if (digits.head == '1') digits.tail else invalidNumber\n      case 10 => digits\n      case _ => invalidNumber\n    }\n  }\n\n  val areaCode = number take 3\n  private val localNumber = number drop 3\n\n  override def toString =\n    s"($areaCode) ${localNumber take 3}-${localNumber drop 3}"\n}	\N	f	1	1	2013-11-09 07:46:36	2013-11-09 07:46:36	543	phone-number.scala
1129	42	49898e435c153e6c0ff12caf	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\n--toRNA :: String -> String\n--toRNA [] = []\n--toRNA ('G' : x) = 'C' : toRNA x\n--toRNA ('C' : x) = 'G' : toRNA x\n--toRNA ('T' : x) = 'A' : toRNA x\n--toRNA ('A' : x) = 'U' : toRNA x\n--toRNA _ = undefined\n\n-- take two\ntoRNA :: String -> String\ntoRNA = map (\\x -> case x of\n\t'G' -> 'C'\n\t'C' -> 'G'\n\t'T' -> 'A'\n\t'A' -> 'U'\n\t_ -> undefined)	\N	f	3	1	2013-12-19 06:39:32	2013-12-19 06:39:32	534	DNA.hs
1130	42	bb17fa5499a094889e2107c2	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map $ \\x -> case x of\n    'G' -> 'C'\n    'C' -> 'G'\n    'T' -> 'A'\n    'A' -> 'U'\n    _ -> error $ "Bad nucleotide: " ++ show x	\N	f	0	2	2014-01-02 21:18:31	2014-01-02 21:18:31	534	DNA.hs
1132	42	f016c0cbeeaf4f9d008e2d55	superseded	elixir	beer-song	defmodule Beer do\n  def sing(n) do\n    sing(n, 0)\n  end\n\n  def sing(n1, n2) do\n    Enum.reduce(n1..n2, "", fn(num, acc) -> \n                                acc <> verse(num) <> "\\n" end)\n  end\n\n  def verse(n) do\n    { shelf_bottles, take_bottles } = bottle_phrase(n)\n    { left_bottles, _ } = bottle_phrase(n - 1)\n\n    "#{String.capitalize(shelf_bottles)} of beer on the wall, #{shelf_bottles} of beer.\\n#{take_bottles}, #{left_bottles} of beer on the wall.\\n"\n  end\n\n  def bottle_phrase(n) do\n    cond do\n    n > 1 ->\n      { "#{n} bottles", "Take one down and pass it around" }\n    n == 1 ->\n      { "1 bottle", "Take it down and pass it around" }\n    n < 0 ->\n      { "99 bottles", "" }\n    true ->\n      { "no more bottles", "Go to the store and buy some more" }\n    end\n  end\nend	\N	f	4	2	2014-03-18 22:29:48	2014-03-18 22:29:48	535	beer-song.exs
1133	42	22f76ceff80cadd1962e6b81	done	elixir	beer-song	defmodule Beer do\n  def sing(n1, n2 // 0) do\n    Enum.reduce(n1..n2, "", &(&2 <> verse(&1) <> "\\n"))\n  end\n\n  def verse(n) do\n    { shelf_bottles, take_bottles } = bottle_phrase(n)\n    { left_bottles, _ } = bottle_phrase(n - 1)\n\n    """\n    #{String.capitalize(shelf_bottles)} of beer on the wall, #{shelf_bottles} of beer.\n    #{take_bottles}, #{left_bottles} of beer on the wall.\n    """\n  end\n\n  def bottle_phrase(n) do\n    cond do\n    n > 1 ->\n      { "#{n} bottles", "Take one down and pass it around" }\n    n == 1 ->\n      { "1 bottle", "Take it down and pass it around" }\n    n < 0 ->\n      { "99 bottles", "" }\n    true ->\n      { "no more bottles", "Go to the store and buy some more" }\n    end\n  end\nend	\N	f	3	3	2014-03-22 03:51:04	2014-03-22 03:51:04	535	beer-song.exs
1134	42	8c5816dbca1470eef2add3d3	pending	python	matrix	class Matrix(object):\n    def __init__(self, matString):\n        self.rows = [[int(x) for x in row.split()] for row in matString.split('\\n')]\n        self.columns = [[row[i] for row in self.rows] for i in range(len(self.rows[0]))]	\N	f	3	1	2013-12-04 04:51:31	2013-12-04 04:51:31	536	matrix.py
1135	42	efb51a38eef7145fe4a5cca9	pending	python	bob	class Bob:\n\n    """Bob responds, albeit tersely"""\n    def hey(self, statement):\n        if not statement or statement.isspace():\n            return 'Fine. Be that way!'\n        elif statement.isupper():\n            return 'Woah, chill out!'\n        elif statement.endswith('?'):\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	f	3	2	2013-10-14 10:45:02	2013-10-14 10:45:02	537	bob.py
1136	42	29c224efffb5140d1caab165	superseded	python	bob	class Bob:\n\n    """Bob responds, albeit tersely"""\n    def hey(self, statement):\n        if not statement or statement.isspace():\n            return 'Fine. Be that way!'\n        if statement.isupper():\n            return 'Woah, chill out!'\n        elif statement.endswith('?'):\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	f	0	1	2014-05-18 14:50:20	2014-05-18 14:50:20	537	bob.py
1137	42	136744dc1960837ee92156e3	superseded	ruby	crypto-square	class Crypto\n  attr_reader :plain\n  private :plain\n\n  def initialize(plain)\n    @plain = plain\n  end\n\n  def normalize_plaintext\n    plain.gsub(/\\W/, '').downcase\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.length).ceil\n  end\n\n  def plaintext_segments\n    chunk(normalize_plaintext, size)\n  end\n\n  # WIP I need to improve padding here.\n  # But first: bake some Pizza ;)\n  def ciphertext\n    plaintext_segments.map { |x| ("%-#{size}s" % x).split("") }.transpose.flatten.join.gsub(" ", "")\n  end\n\n  def normalize_ciphertext\n    chunk(ciphertext, 5).join(" ")\n  end\n\n  private\n\n  def chunk(text, size)\n    text.scan(/\\w{1,#{size}}/)\n  end\nend	\N	f	3	1	2013-11-02 07:29:53	2013-11-02 07:29:53	538	crypto-square.rb
1138	42	f24292a758cf6a19230a3344	done	ruby	crypto-square	class Crypto\n  attr_reader :plain\n  private :plain\n\n  def initialize(plain)\n    @plain = plain\n  end\n\n  def normalize_plaintext\n    plain.gsub(/\\W/, '').downcase\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.length).ceil\n  end\n\n  def plaintext_segments\n    chunk(normalize_plaintext, size)\n  end\n\n  def ciphertext\n    transpose(plaintext_segments).join\n  end\n\n  def normalize_ciphertext\n    chunk(ciphertext, 5).join(' ')\n  end\n\n  private\n\n  def transpose(segments)\n    padding = "%-#{size}s"\n    segments.map { |x| (padding % x).chars.map(&:strip) }.transpose.flatten\n  end\n\n  def chunk(text, size)\n    text.scan(/\\w{1,#{size}}/)\n  end\nend	\N	f	4	2	2014-06-07 14:38:51	2014-06-07 14:38:51	538	crypto-square.rb
1140	42	b5cd1ad4c09e6bd9cfc16e15	superseded	ruby	hamming	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(input_strand)\n    strand1, strand2 = trim_strands_to_equal_length(@strand, input_strand)\n    calculate_distance(strand1, strand2)\n  end\n\n  private \n  def normalize(input)\n    input.split('')\n  end\n\n  def trim_strands_to_equal_length(s1, s2)\n    min_length = [s1.size, s2.size].min - 1\n    [normalize(s1)[0..min_length], normalize(s2)[0..min_length]]\n  end\n\n  def calculate_distance(strand1, strand2)\n    distance = 0\n\n    strand1.each_with_index { |nucleotide, index|\n      distance += 1 unless strand2[index] == nucleotide\n    }\n\n    distance\n  end\nend	\N	f	3	2	2014-01-07 00:42:41	2014-01-07 00:42:41	539	point-mutations.rb
1141	42	af898fee2bb633f5caa85fd1	done	ruby	hamming	class DNA\n  def initialize(strand_string)\n    @strand = string_to_strand(strand_string)\n  end\n\n  def hamming_distance(strand_string)\n    strand1, strand2 = trim_strands_to_equal_length(@strand, string_to_strand(strand_string))\n    calculate_distance(strand1, strand2)\n  end\n\n  private \n  def string_to_strand(input)\n    input.split('')\n  end\n\n  def trim_strands_to_equal_length(s1, s2)\n    min_length = [s1.size, s2.size].min - 1\n    [(s1)[0..min_length], (s2)[0..min_length]]\n  end\n\n  def calculate_distance(strand1, strand2)\n    strand1.zip(strand2).count { |n| n[0] != n[1] }\n  end\nend	\N	f	1	4	2014-03-16 11:24:17	2014-03-16 11:24:17	539	point-mutations.rb
1142	42	5ddd8cd14d839c9d869c5601	superseded	ruby	hamming	class DNA\n  def initialize(strand)\n    @strand = normalize(strand)\n  end\n\n  def hamming_distance(strand2)\n    strand2 = normalize(strand2)\n\n    distance = 0\n\n    @strand.each_with_index { |nucleotide, index|\n      distance += 1 unless strand2[index] == nucleotide\n    }\n\n    distance\n  end\n\n  private \n  def normalize(input)\n    input.split('')\n  end\nend	\N	f	3	1	2014-03-20 02:20:53	2014-03-20 02:20:53	539	point-mutations.rb
1144	42	53e205b760a090e90747baf9	superseded	javascript	triangle	function Triangle(a, b, c) {\n  function determine_kind() {\n    if (a === undefined || b === undefined || c === undefined || a === 0 || b === 0 || c === 0) {\n      throw new Error('that does not seem like a triangle');\n    }\n    if (a < 0 || b < 0 || c < 0 || a + b <= c || b + c <= a || c + a <= b) {\n      return 'illegal';\n    }\n    if (a === b && b === c) {\n      return 'equilateral';\n    }\n    if (a === b || b === c || c === a) {\n      return 'isosceles';\n    }\n    return 'scalene';\n  }\n\n  this.kind = determine_kind;\n}\n\nif (module) {\n  module.exports = Triangle;\n}	\N	f	2	1	2014-03-26 23:52:05	2014-03-26 23:52:05	540	triangle.js
1145	42	4e64baaea97e9fde6d621943	superseded	haskell	binary	module Binary (toDecimal) where\r\nimport Data.Char\r\n\r\n-- Convert Binary to Decimal\r\ntoDecimal :: String -> Int\r\ntoDecimal = sum . map toDec . zip [0..] . reverse\r\n\r\n-- Convert binary char in a given position to decimal\r\ntoDec :: (Int, Char) -> Int\r\ntoDec (pos, digit) = if isBinary digit \r\n                     then (digitToInt digit) * 2^pos\r\n                     else 0\r\n\r\nisBinary :: Char -> Bool\r\nisBinary = flip elem "01"\r\n\r	\N	f	3	1	2013-12-09 07:13:14	2013-12-09 07:13:14	541	Binary.hs
1146	42	887bd31d332198ee7ab1998c	superseded	haskell	binary	module Binary (toDecimal) where\r\nimport Data.Char\r\nimport Data.Sequence (foldlWithIndex, fromList)\r\n\r\n-- Convert Binary to Decimal\r\ntoDecimal :: String -> Int\r\ntoDecimal x = foldlWithIndex f 0 binSeq\r\n   where f acc pos c = acc + toDec (pos, c)\r\n         binSeq = fromList $ reverse x\r\n\r\n-- Convert binary char in a given position to decimal\r\ntoDec :: (Int, Char) -> Int\r\ntoDec (pos, digit) \r\n  | isBinary digit = (digitToInt digit) * 2^pos\r\n  | otherwise = 0\r\n\r\nisBinary :: Char -> Bool\r\nisBinary = flip elem "01"\r\n\r	\N	f	0	2	2014-01-18 20:17:02	2014-01-18 20:17:02	541	Binary.hs
1147	42	0853788106f903471155e8d1	hibernating	haskell	binary	module Binary (toDecimal) where\r\nimport Data.Char\r\n\r\n-- Convert Binary to Decimal\r\ntoDecimal :: String -> Int\r\ntoDecimal = sum . map toDec . zip [0..] . reverse\r\n\r\n-- Convert binary char in a given position to decimal\r\ntoDec :: (Int, Char) -> Int\r\ntoDec (pos, digit) = if isBinary digit \r\n                     then (digitToInt digit) * 2^pos\r\n                     else 0\r\n\r\nisBinary :: Char -> Bool\r\nisBinary = flip elem "01"\r\n\r	\N	f	3	3	2014-04-24 05:15:39	2014-04-24 05:15:39	541	Binary.hs
1148	43	6819c32d9f0b5d9483808b0e	done	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    @phrase\n      .downcase\n      .scan(/[[:alnum:]]+/)\n      .each_with_object(Hash.new(0)) do |word, counts|\n        counts[word] += 1\n      end\n  end\n\nend	\N	f	1	4	2013-12-20 08:23:37	2013-12-20 08:23:37	542	word-count.rb
1149	43	1911f3bc7ed6c85eaac05a04	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase.scan(/[[:alnum:]]+/)\n  end\n\n  def word_count\n    @phrase.inject(Hash.new(0)) do |dictionary, word|\n      dictionary.merge({word => dictionary[word] + 1})\n    end\n  end\n\nend	\N	f	1	2	2014-03-29 04:50:16	2014-03-29 04:50:16	542	word-count.rb
1150	43	91d11d56686b2ad52e68086e	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase.scan(/[[:alnum:]]+/)\n  end\n\n  def word_count\n    @phrase.each_with_object(Hash.new(0)) do |word, dictionary|\n      dictionary[word] += 1\n    end\n  end\n\nend	\N	f	0	3	2014-04-08 23:40:36	2014-04-08 23:40:36	542	word-count.rb
1151	43	7775b380afd225473afb6deb	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase.scan(/[a-z0-9]+/)\n  end\n\n  def word_count\n    @phrase.inject({}) do |dictionary, word|\n      dictionary.merge({word => dictionary[word].to_i + 1})\n    end\n  end\n\nend	\N	f	4	1	2014-05-17 04:35:55	2014-05-17 04:35:55	542	word-count.rb
1154	43	ae4cfc544a2ccc44149f4480	hibernating	ruby	leap	class Year\r\n  attr_reader :year\r\n  \r\n  def initialize(year)\r\n    @year = year\r\n  end\r\n\r\n  def leap?\r\n    ((@year%4 == 0 and @year%100 != 0) or @year%400 == 0)\r\n  end\r\nend	\N	f	1	1	2013-12-11 02:36:18	2013-12-11 02:36:18	544	leap.rb
1156	43	43738dd6273471b49a32d811	pending	javascript	nucleotide-count	function DNA(string) {\n  this.string = string;\n}\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) { throw "Invalid Nucleotide"; }\n  return this.string.split(nucleotide).length - 1;\n}\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n  get: function() {\n    var dna = this;\n    var counts = {};\n    Nucleotides.dna_bases.forEach(function(nucleotide) {\n      counts[nucleotide] = dna.count(nucleotide);\n    });\n    return counts;\n  }\n});\n\nvar Nucleotides = {\n  dna_bases: ["A", "C", "G", "T"],\n  bases: ["A", "C", "G", "T", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n}\n\nmodule.exports = DNA;	\N	f	1	3	2014-02-14 23:27:48	2014-02-14 23:27:48	546	nucleotide-count.js
1157	43	9ad8bf9ab8cd61a5574301ed	superseded	javascript	nucleotide-count	function DNA(string) {\n  var NUCLEOTIDES = ["A", "C", "G", "T"];\n  this.string = string;\n\n  this.count = function(nucleotide) {\n    return 0;\n  };\n\n  get nucleotideCounts() {\n    var counts = {};\n    NUCLEOTIDES.forEach(function(nucleotide) {\n      counts[nucleotide] = this.count(nucleotide);\n    });\n    return counts;\n  }\n}\n\nmodule.exports = DNA;	\N	f	1	1	2014-05-01 09:28:10	2014-05-01 09:28:10	546	nucleotide-count.js
1158	43	467468eededdeb8752f41c85	superseded	javascript	nucleotide-count	function DNA(string) {\n  this.string = string;\n}\n\nDNA.prototype.count = function(nucleotide) {\n  if (!Nucleotides.isValid(nucleotide)) { throw "Invalid Nucleotide"; }\n  return this.string.split(nucleotide).length - 1;\n}\n\nObject.defineProperty(DNA.prototype, "nucleotideCounts", {\n  get: function() {\n    var dna = this;\n    var tally = {};\n    Nucleotides.dna_bases.forEach(function(nucleotide) {\n      tally[nucleotide] = dna.count(nucleotide);\n    });\n    return tally;\n  }\n});\n\nvar Nucleotides = {\n  dna_bases: ["A", "C", "G", "T"],\n  bases: ["A", "C", "G", "T", "U"],\n\n  isValid: function(nucleotide) {\n    return this.bases.indexOf(nucleotide) !== -1;\n  }\n}\n\nmodule.exports = DNA;	\N	f	2	2	2014-05-11 13:14:08	2014-05-11 13:14:08	546	nucleotide-count.js
1159	43	cd6e16e664a603d3d010e666	superseded	ruby	bob	class Bob\n\n  def hey(challenge)\n    responses.fetch(challenge.to_s) { "Whatever." }\n  end\n\n  private\n\n  def responses\n    {\n      "WATCH OUT!" => "Woah, chill out!",\n      "Does this cryogenic chamber make me look fat?" => "Sure.",\n      "1, 2, 3 GO!" => "Woah, chill out!",\n      'ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!' => "Woah, chill out!",\n      "I HATE YOU" => "Woah, chill out!",\n      "" => "Fine. Be that way."\n    }\n  end\nend	\N	f	1	1	2014-01-14 09:43:04	2014-01-14 09:43:04	547	bob.rb
1160	43	dd955c389a0297a88c5d0845	done	ruby	bob	class Bob\n\n  def hey(words)\n    speech = Speech.new(words)\n\n    case\n    when speech.shouting?\n      "Woah, chill out!"\n    when speech.question?\n      "Sure."\n    when speech.silence?\n      "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\n\n  class Speech\n    attr_reader :words\n\n    def initialize(words)\n      @words = words\n    end\n\n    def shouting?\n      words =~ /[A-Z]{2,}/\n    end\n\n    def question?\n      words =~ /\\?\\z/\n    end\n\n    def silence?\n      words.to_s.empty?\n    end\n  end\nend	\N	f	1	2	2014-03-05 13:11:13	2014-03-05 13:11:13	547	bob.rb
1161	43	8b6d8d6aa9410726e788755e	superseded	clojure	space-age	(ns space-age)\n\n(def earth-year 31557600)\n(def orbital-periods\n  {:earth earth-year\n   :mercury (* earth-year 0.2408467)\n   :venus (* earth-year 0.61519726)\n   :mars (* earth-year 1.8808158)\n   :jupiter (* earth-year 11.862615)\n   :saturn (* earth-year 29.447498)\n   :uranus (* earth-year 84.016846)\n   :neptune (* earth-year 164.79132)})\n\n(doseq [planet (keys orbital-periods)]\n  (intern *ns* (symbol (str "on-" (name planet)))\n    (fn [seconds] (/ (double seconds) (orbital-periods planet)))))	\N	f	1	1	2013-11-25 16:14:10	2013-11-25 16:14:10	548	space_age.clj
1162	43	dfe05101f5ffec0ecde83039	done	clojure	space-age	(ns space-age)\n\n(def ^:const earth-year 31557600)\n\n(defmacro def-on-planet\n  "Macro that defines an `on-<planet>` function given a planet name and year length."\n  [planet year-length]\n  (let [fn-name (symbol (str "on-" (name planet)))]\n    `(defn ~fn-name [seconds#]\n       (/ (double seconds#) (* ~earth-year ~year-length)))))\n\n(def-on-planet mercury 0.2408467)\n(def-on-planet venus 0.61519726)\n(def-on-planet earth 1.0)\n(def-on-planet mars 1.8808158)\n(def-on-planet jupiter 11.862615)\n(def-on-planet saturn 29.447498)\n(def-on-planet uranus 84.016846)\n(def-on-planet neptune 164.79132)	\N	f	1	2	2014-04-15 01:31:26	2014-04-15 01:31:26	548	space_age.clj
1175	43	6c46e61fd2c490397edf844c	hibernating	elixir	word-count	defmodule Words do\n  @separators [" ", ",", "!", ".", "&", "@", "$", "%", "^", ":"]\n\n  def count(phrase) when is_binary(phrase) do\n    phrase |> String.downcase\n           |> String.split(@separators, trim: true)\n           |> count\n  end\n\n  def count(words) when is_list(words) do\n    Enum.reduce(words, HashDict.new, &increment/2)\n  end\n\n  defp increment(key, word_counting) do\n    HashDict.update(word_counting, key, 1, fn(x) -> x + 1 end)\n  end\n\nend	\N	f	0	2	2013-12-26 09:09:26	2013-12-26 09:09:26	555	word-count.exs
1176	43	094d929f4f866b81f45f1aaa	done	ruby	trinary	class Trinary\n\n  def initialize(trinary)\n    @trinary = trinary\n  end\n\n  def to_decimal\n    len = @trinary.length\n    decimal = 0\n\n    @trinary.chars.each_with_index do |num, index|\n      decimal += (num.to_i * 3** (len-index-1))\n    end\n\n    return decimal\n\n  end\nend	\N	f	1	1	2014-01-04 03:52:30	2014-01-04 03:52:30	556	trinary.rb
1164	43	cec7b481961cb182a0f9d0d1	hibernating	javascript	word-count	var words = function(inputString) {\n\n  // Solution strategy:\n  //\n  // - Phrase consists of:\n  //     !*&(@*& ) i.e. non-alphanumeric sequences (one or more chars)\n  //     dog12 i.e. alphanumeric sequences\n  // - We want to split on any non-alphanumerics into an array of only alphanumeric strings\n  // - Split should allow multiple non-alphas between the words\n  // - Then iterate over array and aggregate into common elements with their frequency\n\n  var \n    wordArray,\n\n    wordFrequencies = {},\n\n    splitStringIntoWords = function(str) {\n      var nonAlphaNumericRegex = /\\W+/;\n      wordArray = inputString.split(nonAlphaNumericRegex);\n      return wordArray;\n    },\n\n    isEmptyWord = function(word) {\n      return word === '';\n    },\n\n    checkForAndHandleNewWord = function(wordFrequencies, lowerCaseWord) {\n      var isNewWord = (typeof wordFrequencies[lowerCaseWord] !== 'number');\n      if (isNewWord) {\n        wordFrequencies[lowerCaseWord] = 0;\n      }\n    };\n\n  wordArray = splitStringIntoWords(inputString);\n\n  wordArray.forEach(function(word) {\n    var lowerCaseWord = word.toLowerCase();\n\n    if (isEmptyWord(word)) {\n      return; // no action\n    }\n\n    checkForAndHandleNewWord(wordFrequencies, lowerCaseWord);\n\n    wordFrequencies[lowerCaseWord] += 1;\n  });\n\n  return wordFrequencies;\n};\n\nmodule.exports = words;	\N	f	1	2	2014-03-16 09:35:20	2014-03-16 09:35:20	549	word-count.js
1165	43	478cb1cd1a68fbcd30d03fcb	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = word.downcase\n    @letters = @word.chars.sort\n  end\n\n  def match word_array\n    word_array.select do |word|\n      same_letters?(word) && word.downcase != @word\n    end\n  end\n\n  private\n    def same_letters? word\n      word.downcase.chars.sort.eql? @letters\n    end\nend	\N	f	1	2	2013-11-04 16:21:24	2013-11-04 16:21:24	550	anagram.rb
1166	43	732c60aab203bf34a222d0ee	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = word.downcase\n    @letters = @word.letters_array\n  end\n\n  def match word_array\n    word_array.select do |word|\n      same_letters?(word) && word.downcase != @word\n    end\n  end\n\n  private\n    def same_letters? word\n      word.letters_array.eql? @letters\n    end\nend\n\nclass String\n  def letters_array\n    downcase.chars.sort\n  end\nend	\N	f	1	3	2014-01-23 02:55:12	2014-01-23 02:55:12	550	anagram.rb
1167	43	721f56c1ac1631e82f41c6d6	done	ruby	anagram	class Anagram\n  def initialize word\n    @word = word.downcase\n    @letters = @word.letters_array\n  end\n\n  def match word_array\n    word_array.delete_if { |word| word.downcase.eql? @word }\n    word_array.select { |word| same_letters?(word) }\n  end\n\n  private\n    def same_letters? word\n      word.letters_array.eql? @letters\n    end\nend\n\nclass String\n  def letters_array\n    downcase.chars.sort\n  end\nend	\N	f	1	4	2014-04-04 18:11:22	2014-04-04 18:11:22	550	anagram.rb
1168	43	aeea402019275c0dc14da83a	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    word.downcase!\n    @anagram_array = word.split('')\n                         .permutation\n                         .map { |item| item.join }\n    @anagram_array.delete(word)\n  end\n\n  def match(word_array)\n    match_array = []\n    word_array.each do |word|\n      match_array.push word if @anagram_array.include? word.downcase\n    end\n\n    match_array\n  end\nend	\N	f	3	1	2014-06-05 17:18:35	2014-06-05 17:18:35	550	anagram.rb
1169	43	5cbb0a6c8fc9ec34ad6036ba	superseded	clojure	nucleotide-count	(ns dna)\n\n(def input "GGGGGTAACCGG")\n(def letter \\G)\n\n(defn TestIt\n  [input]\n  (assert (re-matches #"[GCTA]+" input)))\n\n(defn nucleotide-counts\n  [input]\n  (TestIt input)\n  (frequencies input))\n\n(defn count\n  [letter input]\n  (TestIt input)\n  (count (filter #(= letter %) input)))	\N	f	1	1	2013-11-23 19:18:28	2013-11-23 19:18:28	551	dna.clj
1170	43	d4ec9166e978687e33ea390e	pending	clojure	nucleotide-count	(ns dna)\n\n(def input "GGGGGTAACCGG")\n(def letter \\G)\n\n(defn TestIt\n  [input]\n  (assert (re-matches #"[GCTA]+" input)))\n\n(defn nucleotide-counts\n  [input]\n  (TestIt input)\n  (frequencies input))\n\n(defn count\n  [letter input]\n  (TestIt input)\n  (clojure.core/count (filter #(= letter %) input)))	\N	f	0	2	2013-12-24 06:01:25	2013-12-24 06:01:25	551	dna.clj
1171	43	c8407a023c2b5a7577f5ebe3	needs_input	ruby	secret-handshake	class SecretHandshake\n  TYPES = [\n    'wink',\n    'double blink',\n    'close your eyes',\n    'jump',\n  ]\n\n  def initialize bit_pattern\n    @bit_pattern = bit_pattern.to_i\n  end\n\n  def commands\n    commands =\n      TYPES.select.with_index do |_, index|\n        bit_on? index\n      end\n    commands.reverse! if reversed?\n    commands\n  end\n\n  private\n\n  def reversed?\n    bit_on? 4\n  end\n\n  def bit_on? bit\n    0 != @bit_pattern & (2**bit)\n  end\nend	\N	f	1	1	2013-11-23 06:21:34	2013-11-23 06:21:34	552	secret_handshake.rb
1172	43	679c0639dada85ed05d0d023	pending	perl5	phone-number	use strict;\n\npackage Phone;\n\nsub new { \n    my( $class, $v ) = @_;\n\n    $v =~ s/\\D//g;  # remove all non-numbers\n\n    # if not a phone number, set it to '000...'\n    # and strip the leading '1' en passant\n    $v = '0' x 10 \n        unless $v =~ s/^1?(?=\\d{10}$)//;\n\n    return bless [ $v =~ /(.{3})(.{3})(.{4})/ ], $class;\n}\n\nsub number    { join '', @{ shift() } }\n\nsub area_code { $_[0][0] }\n\nsub pretty    { sprintf '(%d) %d-%d', @{$_[0]} }\n\n1;	\N	f	1	1	2014-01-01 02:40:53	2014-01-01 02:40:53	553	Phone.pm
1173	43	662dfb82120c8464cf7630ee	pending	coffeescript	accumulate	Array::accumulate = (accumulator) ->\n  for i in @\n    accumulator(i)	\N	f	0	1	2014-03-21 10:28:03	2014-03-21 10:28:03	554	accumulate.coffee
1174	43	9c8eae0847ecb48d3a46ee87	superseded	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    HashDict.new count_words(phrase)\n  end\n\n  defp sanitize(phrase), do: Regex.replace(%r/\\W/, String.downcase(phrase), " ")\n\n  defp count_words(phrase) do\n    text = sanitize(phrase)\n    String.split(text)\n      |> HashSet.new\n      |> HashSet.to_list\n      |> Enum.map &({"#{&1}", length Regex.scan(%r/\\A#{&1}\\z|#{&1}\\s|#{&1}\\z/g, text)})\n  end\n\nend	\N	f	0	1	2013-11-18 11:42:33	2013-11-18 11:42:33	555	word-count.exs
1179	43	21ca72fd4aabf1a106db663c	done	ruby	etl	class ETL\n\n  def self.transform(old)\n    scrabble_db = {}\n    old.each do |score, letter|\n      letter.each do |new|\n        scrabble_db[new.downcase] = score\n      end\n    end\n    scrabble_db\n  end\n\nend	\N	f	1	1	2013-12-11 01:13:01	2013-12-11 01:13:01	558	etl.rb
1180	43	86224a5468f43d1a1b8d2b39	done	haskell	difference-of-squares	module Squares (sumOfSquares, squareOfSums, difference) where\n\nsumOfSquares :: (Enum a, Num a) => a -> a\nsumOfSquares x = sum (map square [1..x])\n\nsquareOfSums :: (Enum a, Num a) => a -> a\nsquareOfSums x = square (sum [1..x])\n\ndifference :: (Enum a, Num a) => a -> a\ndifference x = squareOfSums x - sumOfSquares x\n\nsquare :: Num a => a -> a\nsquare x = x * x	\N	f	0	1	2014-01-05 23:15:58	2014-01-05 23:15:58	559	difference-of-squares.hs
1181	44	af1e0ed5ba3ddd409c085889	hibernating	ruby	leap	class Year\n  def Year.leap?(year)\n    return true  if year % 400 == 0\n    return false if year % 100 == 0\n    year % 4 == 0\n  end\nend	\N	f	1	1	2014-03-26 17:04:43	2014-03-26 17:04:43	560	year.rb
1182	44	dd9b8597265a2dfa717c6340	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s.downcase\n  end\n\n  def word_count\n    words = @value.split(/\\W+/)\n    count = Hash.new(0)\n    words.each { |word| count[word] += 1 }\n    count\n  end\n\nend	\N	f	1	1	2014-02-28 11:56:51	2014-02-28 11:56:51	561	word-count.rb
1183	44	6e37157c77bfb6c8d664918d	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    count = Hash.new(0)\n    split_words.each { |word| count[word.downcase] += 1 }\n    count\n  end\n\n  private\n\n    def split_words\n      @value.split(/\\W+/)\n    end\n\nend	\N	f	0	2	2014-03-30 10:22:58	2014-03-30 10:22:58	561	word-count.rb
1184	44	eda15c57b86d5484b3c7d7e4	done	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\n\n  private\n\n    def words\n      @value.split(/\\W+/)\n    end\n\nend	\N	f	1	5	2014-04-17 00:26:25	2014-04-17 00:26:25	561	word-count.rb
1185	44	f0c88af709ca37b1b2c9a692	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\n\n  private\n\n    def words\n      @words ||= @value.split(/\\W+/)\n    end\n\nend	\N	f	2	4	2014-05-05 20:45:01	2014-05-05 20:45:01	561	word-count.rb
1186	44	eb3dc09b14c3a80e27e74fbf	superseded	ruby	word-count	class Phrase\n\n  def initialize value\n    @value = value.to_s\n  end\n\n  def word_count\n    split_words.each_with_object(Hash.new(0)) do |word, count|\n      count[word.downcase] += 1\n    end\n  end\n\n  private\n\n    def split_words\n      @value.split(/\\W+/)\n    end\n\nend	\N	f	1	3	2014-05-16 04:54:28	2014-05-16 04:54:28	561	word-count.rb
1188	44	07fbfd48c2156f275be3f64c	superseded	haskell	meetup	module Meetup\n  ( Weekday(..)\n  , Schedule(..)\n  , meetupDay\n  ) where\n\nimport Control.Monad (liftM)\nimport Control.Monad.Instances\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\nenumFromDown :: Enum a => a -> [a]\nenumFromDown x = enumFromThen x (pred x)\n\ndata Weekday = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum, Eq, Show)\n\nfromDay :: Day -> Weekday\nfromDay = toEnum . toWeekNumber where\n  toWeekNumber d = let (_,_,dow) = toWeekDate d in dow - 1\n\ntype Year = Integer\ntype Month = Int\ntype Date = Int\ntype YearMonth a = (Year, Month) -> a\n\ndata Schedule = Teenth | First | Second | Third | Fourth | Last\n  deriving Show\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay s w = curry $ findWeekday w . meetupWeek s where\n  meetupWeek = (mapM fromGregorianM =<<) . candidates\n\ncandidates :: Schedule -> YearMonth [Date]\ncandidates First  = week 1\ncandidates Second = week 2\ncandidates Third  = week 3\ncandidates Fourth = week 4\ncandidates Teenth = teenths\ncandidates Last   = lastDays\n\nweek :: Int -> YearMonth [Date]\nweek n = return $ map (+ (n-1)*7) [1..7]\n\nteenths :: YearMonth [Date]\nteenths  = return [13..19]\n\nlastDays :: YearMonth [Date]\nlastDays = liftM (take 7 . enumFromDown) (uncurry gregorianMonthLength)\n\nfromGregorianM :: Date -> YearMonth Day\nfromGregorianM = flip $ uncurry fromGregorian\n\nfindWeekday :: Weekday -> [Day] -> Day\nfindWeekday w = head . filter ((== w) . fromDay)	\N	f	1	2	2014-03-13 18:25:05	2014-03-13 18:25:05	562	meetup.hs
1210	44	7442df8efef2f1ee5faeb4f5	done	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Calendar (Day, addDays)\n\ndaysPerGigasec :: Integer\ndaysPerGigasec = secsPerGigasec `div` secsPerDay\n  where\n    secsPerGigasec = 1000000000\n    secsPerDay = 86400\n\nfromDay :: Day -> Day\nfromDay = addDays daysPerGigasec	\N	f	1	1	2014-04-03 17:17:14	2014-04-03 17:17:14	565	gigasecond.hs
1190	44	4fb03f9e6b4412cca9b84c9c	done	python	bob	import string\nclass Bob(object):\n\n        """Constants"""\n        FINE= 'Fine. Be that way!'\n        CHILL= 'Woah, chill out!'\n        SURE= 'Sure.'\n        WHATEVER= 'Whatever.'\n\n        def __init__(self):\n                pass\n\n        def hey(self,chat):\n                if self.__isEmpty(chat):\n                        return Bob.FINE\n                elif self.__isHostile(chat):\n                        return Bob.CHILL\n                elif self.__isQuestion(chat):\n                        return Bob.SURE \n                return Bob.WHATEVER\n                \n        def __isHostile(self,chat):\n                return chat.isupper()\n\n        def __isQuestion(self,chat):\n                return chat.endswith('?') \n\n        def __isEmpty(self,chat):\n                return len(string.strip(chat))==0	\N	f	1	1	2014-02-27 07:29:15	2014-02-27 07:29:15	563	bob.py
1191	44	3f12dd88e6f814367dd09e83	superseded	ruby	beer-song	class Beer\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + verse(verse_number).to_s + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number, 'beer').to_s\r\n  end\r\nend\r\n\r\nclass Verse\r\n  attr_reader :quantity, :beverage\r\n\r\n  def initialize(verse_number, beverage)\r\n    @quantity = verse_number\r\n    @beverage = beverage\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      "No more bottles of #{beverage} on the wall, no more bottles of #{beverage}.\\nGo to the store and buy some more, 99 bottles of #{beverage} on the wall.\\n"\r\n    elsif one_bottle?\r\n      "#{quantity} bottle of #{beverage} on the wall, #{quantity} bottle of #{beverage}.\\nTake it down and pass it around, no more bottles of #{beverage} on the wall.\\n"\r\n    elsif two_bottles?\r\n      "#{quantity} bottles of #{beverage} on the wall, #{quantity} bottles of #{beverage}.\\nTake one down and pass it around, #{quantity - 1} bottle of #{beverage} on the wall.\\n"\r\n    else\r\n      "#{quantity} bottles of #{beverage} on the wall, #{quantity} bottles of #{beverage}.\\nTake one down and pass it around, #{quantity - 1} bottles of #{beverage} on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def zero_bottles?\r\n    quantity == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    quantity == 2\r\n  end\r\nend	\N	f	1	18	2014-03-10 12:58:04	2014-03-10 12:58:04	564	beer-song.rb
1193	44	4179e2fb1032cf4e31e0c481	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + Verse.new(verse_number).to_s + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number).to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :quantity\r\n\r\n  def initialize(verse_number)\r\n    @quantity = verse_number\r\n  end\r\n\r\n  def to_s\r\n\r\n    if zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    elsif one_bottle?\r\n      "#{quantity} bottle of beer on the wall, #{quantity} bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\r\n    elsif two_bottles?\r\n      "#{quantity} bottles of beer on the wall, #{quantity} bottles of beer.\\nTake one down and pass it around, #{quantity - 1} bottle of beer on the wall.\\n"\r\n    else\r\n      "#{quantity} bottles of beer on the wall, #{quantity} bottles of beer.\\nTake one down and pass it around, #{quantity - 1} bottles of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def zero_bottles?\r\n    quantity == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    quantity == 2\r\n  end\r\n\r\nend	\N	f	1	15	2014-03-16 11:57:29	2014-03-16 11:57:29	564	beer-song.rb
1211	44	c1788f36095b4ac229f926d8	done	python	rna-transcription	class DNA:\n    def __init__(self, nucleotide):\n        self._nucleotide = nucleotide\n\n    def to_rna(self):\n        return self._nucleotide.replace('T', 'U')	\N	f	3	1	2014-04-14 15:57:38	2014-04-14 15:57:38	566	rna-transcription.py
1275	46	e4eb21a03e7ce9f6b6697d4a	superseded	elixir	nucleotide-count	defmodule DNA do\n\n  def count(strand, nucleotide) do\n    Enum.count strand, &1 == nucleotide\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new nucleotides, &{ &1, count(strand, &1) }\n  end\n\n  defp nucleotides do\n    [ ?A, ?T, ?C, ?G ]\n  end\n\nend	\N	f	0	4	2014-06-29 04:19:20	2014-06-29 04:19:20	597	nucleotide-count.exs
1195	44	af0be1f2c1c052150c1a50dd	superseded	ruby	beer-song	class Beer\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    bottles_of_beer = verse_number\r\n\r\n    if zero_bottles?(bottles_of_beer)\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{dynamic_phrase_1(bottles_of_beer)} of beer on the wall, #{dynamic_phrase_2(bottles_of_beer)} of beer.\\n#{dynamic_phrase_3(bottles_of_beer)}, #{dynamic_phrase_4(bottles_of_beer)} of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def requested_verses\r\n    requested_verses = ""\r\n\r\n    start_verse.downto(end_verse).each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n    requested_verses\r\n  end\r\n\r\n  def dynamic_phrase_1(bottles_of_beer)\r\n    "#{bottles_of_beer} #{bottle_s(bottles_of_beer)}"\r\n  end\r\n\r\n  def dynamic_phrase_2(bottles_of_beer)\r\n    "#{bottles_of_beer} #{bottle_s(bottles_of_beer)}"\r\n  end\r\n\r\n  def dynamic_phrase_3(bottles_of_beer)\r\n    one_it = 'one'\r\n\r\n    if one_bottle?(bottles_of_beer)\r\n      one_it = 'it'\r\n    end\r\n    "Take #{one_it} down and pass it around"\r\n  end\r\n\r\n  def dynamic_phrase_4(bottles_of_beer)\r\n    if one_bottle?(bottles_of_beer)\r\n      'no more bottles'\r\n    else\r\n      bottles_of_beer -= 1\r\n      "#{bottles_of_beer} #{bottle_s(bottles_of_beer)}"\r\n    end\r\n  end\r\n\r\n  # This returns the correct plural or singular usage of bottle\r\n  def bottle_s(bottles_of_beer)\r\n    if bottles_of_beer > 1 || bottles_of_beer == 0\r\n      'bottles'\r\n    elsif one_bottle?(bottles_of_beer)\r\n      'bottle'\r\n    end\r\n  end\r\n\r\n  def one_bottle?(bottles_of_beer)\r\n    bottles_of_beer == 1\r\n  end\r\n\r\n  def two_bottles?(bottles_of_beer)\r\n    bottles_of_beer == 2\r\n  end\r\n\r\n  def zero_bottles?(bottles_of_beer)\r\n    bottles_of_beer == 0\r\n  end\r\n\r\nend	\N	f	1	8	2014-04-06 02:36:54	2014-04-06 02:36:54	564	beer-song.rb
1197	44	2404ff204c326cb4cb111caa	superseded	ruby	beer-song	class Beer\r\n  attr_accessor :bottle_quantity\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def initialize\r\n    @bottle_quantity = nil\r\n  end\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number = bottle_quantity)\r\n    @bottle_quantity = verse_number\r\n\r\n    if one_bottle?\r\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\r\n    elsif two_bottles?\r\n      "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\r\n    elsif zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{bottle_quantity} bottles of beer on the wall, #{bottle_quantity} bottles of beer.\\nTake one down and pass it around, #{bottle_quantity - 1} bottles of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def requested_verses\r\n    requested_verse_numbers = Array(end_verse..start_verse).reverse\r\n    requested_verses = ""\r\n\r\n    requested_verse_numbers.each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def one_bottle?\r\n    bottle_quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottle_quantity == 2\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottle_quantity == 0\r\n  end\r\n\r\nend	\N	f	0	1	2014-04-07 21:17:17	2014-04-07 21:17:17	564	beer-song.rb
1199	44	ca2ca6141fda5e82be4f9b8a	superseded	ruby	beer-song	class Beer\r\n  attr_accessor :bottle_quantity\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def initialize\r\n    @bottle_quantity = nil\r\n  end\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    @bottle_quantity = verse_number\r\n\r\n    "#{dynamic_phrase_1} of beer on the wall, #{dynamic_phrase_2} of beer.\\n#{dynamic_phrase_3}, #{dynamic_phrase_4} of beer on the wall.\\n"\r\n\r\n  end\r\n\r\n  private\r\n\r\n  # This creates the jonined string of requested verses\r\n  def requested_verses\r\n    requested_verse_numbers = Array(end_verse..start_verse).reverse\r\n    requested_verses = ""\r\n\r\n    requested_verse_numbers.each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n\r\n    requested_verses\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 0: **No more bottles** of beer on the wall, no more bottles of beer.\r\n  ## Verse 1: **1 bottle** of beer on the wall, 1 bottle of beer.\r\n  ## Verse x: **x bottles** of beer on the wall, x bottles of beer.\r\n  def dynamic_phrase_1\r\n\r\n    # Verse 1: **1 bottle**\r\n    # Verse 0: **No more bottles**\r\n    if zero_bottles?\r\n      "No more bottles"\r\n    # Verse 1: **1 bottle**\r\n    # Verse x: **x bottles**\r\n    else\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 1: 1 bottle of beer on the wall, **1 bottle** of beer.\r\n  ## Verse 0: No more bottles of beer on the wall, **no more bottles** of beer.\r\n  ## Verse x: x bottles of beer on the wall, **x bottles** of beer.\r\n  def dynamic_phrase_2\r\n    # Verse 0: **no more bottles**\r\n    if zero_bottles?\r\n      "no more #{bottle_s}"\r\n    else\r\n      # Verse 1: **1 bottle**\r\n      # Verse x: **x bottles**\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 1: Take **it** down and pass it around, no more bottles of beer on the wall.\r\n  ## Verse 0: **Go to the store and buy some more**, 99 bottles of beer on the wall.\r\n  ## Verse x: **Take one down and pass it around**, x bottles of beer on the wall.\r\n  def dynamic_phrase_3\r\n    one_it = 'one'\r\n\r\n    # Verse 0: **Go to the store and buy some more**\r\n    if zero_bottles?\r\n      'Go to the store and buy some more'\r\n    else\r\n      # Verse 1: **it**\r\n      if one_bottle?\r\n        one_it = 'it'\r\n      end\r\n      # Verse x: **Take one down and pass it around**\r\n      "Take #{one_it} down and pass it around"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 0: Go to the store and buy some more, **99 bottles** of beer on the wall.\r\n  ## Verse 1: Take it down and pass it around, **no more bottles** of beer on the wall.\r\n  ## Verse 2: Take one down and pass it around, **1 bottle** of beer on the wall.\r\n  ## Verse x: Take one down and pass it around, **x bottles** of beer on the wall.\r\n  def dynamic_phrase_4\r\n\r\n    # Verse 1: **no more bottles**\r\n    if one_bottle?\r\n      "no more bottles"\r\n    # Verse 0: **99 bottles**\r\n    elsif zero_bottles?\r\n      "99 #{bottle_s}"\r\n    else\r\n      # Verse 2: **bottle**\r\n      # Verse x: **x bottles**\r\n      @bottle_quantity -= 1\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # This returns the correct plural or singular usage of bottle\r\n  def bottle_s\r\n    if bottle_quantity > 1 || bottle_quantity == 0\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    end\r\n  end\r\n\r\n  def one_bottle?\r\n    bottle_quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottle_quantity == 2\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottle_quantity == 0\r\n  end\r\n\r\nend	\N	f	1	3	2014-04-20 09:22:05	2014-04-20 09:22:05	564	beer-song.rb
1201	44	83d92e20b35797d67b41a8a5	superseded	ruby	beer-song	class Beer\r\n  attr_accessor :bottle_quantity\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def initialize\r\n    @bottle_quantity = nil\r\n  end\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    @bottle_quantity = verse_number\r\n\r\n    "#{dynamic_phrase_1} of beer on the wall, #{dynamic_phrase_2} of beer.\\n#{dynamic_phrase_3}, #{dynamic_phrase_4} of beer on the wall.\\n"\r\n  end\r\n\r\n  private\r\n\r\n  # This creates the jonined string of requested verses\r\n  def requested_verses\r\n    requested_verse_numbers = Array(end_verse..start_verse).reverse\r\n    requested_verses = ""\r\n\r\n    requested_verse_numbers.each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n    requested_verses\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 0: **No more bottles** of beer on the wall, no more bottles of beer.\r\n  ## Verse 1: **1 bottle** of beer on the wall, 1 bottle of beer.\r\n  ## Verse x: **x bottles** of beer on the wall, x bottles of beer.\r\n  def dynamic_phrase_1\r\n    # Verse 1: **1 bottle**\r\n    # Verse 0: **No more bottles**\r\n    if zero_bottles?\r\n      "No more bottles"\r\n    # Verse 1: **1 bottle**\r\n    # Verse x: **x bottles**\r\n    else\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 1: 1 bottle of beer on the wall, **1 bottle** of beer.\r\n  ## Verse 0: No more bottles of beer on the wall, **no more bottles** of beer.\r\n  ## Verse x: x bottles of beer on the wall, **x bottles** of beer.\r\n  def dynamic_phrase_2\r\n    # Verse 0: **no more bottles**\r\n    if zero_bottles?\r\n      "no more #{bottle_s}"\r\n    else\r\n      # Verse 1: **1 bottle**\r\n      # Verse x: **x bottles**\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 1: Take **it** down and pass it around, no more bottles of beer on the wall.\r\n  ## Verse 0: **Go to the store and buy some more**, 99 bottles of beer on the wall.\r\n  ## Verse x: **Take one down and pass it around**, x bottles of beer on the wall.\r\n  def dynamic_phrase_3\r\n    one_it = 'one'\r\n\r\n    # Verse 0: **Go to the store and buy some more**\r\n    if zero_bottles?\r\n      'Go to the store and buy some more'\r\n    else\r\n      # Verse 1: **it**\r\n      if one_bottle?\r\n        one_it = 'it'\r\n      end\r\n      # Verse x: **Take one down and pass it around**\r\n      "Take #{one_it} down and pass it around"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 0: Go to the store and buy some more, **99 bottles** of beer on the wall.\r\n  ## Verse 1: Take it down and pass it around, **no more bottles** of beer on the wall.\r\n  ## Verse 2: Take one down and pass it around, **1 bottle** of beer on the wall.\r\n  ## Verse x: Take one down and pass it around, **x bottles** of beer on the wall.\r\n  def dynamic_phrase_4\r\n    # Verse 1: **no more bottles**\r\n    if one_bottle?\r\n      "no more bottles"\r\n    # Verse 0: **99 bottles**\r\n    elsif zero_bottles?\r\n      "99 #{bottle_s}"\r\n    else\r\n      # Verse 2: **bottle**\r\n      # Verse x: **x bottles**\r\n      @bottle_quantity -= 1\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # This returns the correct plural or singular usage of bottle\r\n  def bottle_s\r\n    if bottle_quantity > 1 || bottle_quantity == 0\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    end\r\n  end\r\n\r\n  def one_bottle?\r\n    bottle_quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottle_quantity == 2\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottle_quantity == 0\r\n  end\r\n\r\nend	\N	f	1	5	2014-05-07 21:39:19	2014-05-07 21:39:19	564	beer-song.rb
1202	44	8c2a31d967675662a111aac9	superseded	ruby	beer-song	class Beer\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    singer = Singer.new\r\n    singer.recall_verse(verse_number)\r\n  end\r\n\r\n  private\r\n\r\n  def requested_verses\r\n    requested_verse_numbers = start_verse.downto(end_verse)\r\n    requested_verses = ""\r\n\r\n    requested_verse_numbers.each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n    requested_verses\r\n  end\r\n\r\nend\r\n\r\nclass Singer\r\n  attr_accessor :bottles_of_beer, :verse_number\r\n\r\n  def initialize\r\n    @bottles_of_beer = nil\r\n  end\r\n\r\n  def recall_verse(verse_number)\r\n    @bottles_of_beer = verse_number\r\n    "#{dynamic_phrase_1} of beer on the wall, #{dynamic_phrase_2} of beer.\\n#{dynamic_phrase_3}, #{dynamic_phrase_4} of beer on the wall.\\n"\r\n  end\r\n\r\n  private\r\n\r\n   def dynamic_phrase_1\r\n    if zero_bottles?\r\n      "No more bottles"\r\n    else\r\n      "#{bottles_of_beer} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  def dynamic_phrase_2\r\n    if zero_bottles?\r\n      "no more #{bottle_s}"\r\n    else\r\n      "#{bottles_of_beer} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  def dynamic_phrase_3\r\n    one_it = 'one'\r\n\r\n    if zero_bottles?\r\n      'Go to the store and buy some more'\r\n    else\r\n      if one_bottle?\r\n        one_it = 'it'\r\n      end\r\n      "Take #{one_it} down and pass it around"\r\n    end\r\n  end\r\n\r\n  def dynamic_phrase_4\r\n    if one_bottle?\r\n      "no more bottles"\r\n    elsif zero_bottles?\r\n      "99 #{bottle_s}"\r\n    else\r\n      @bottles_of_beer -= 1\r\n      "#{bottles_of_beer} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # This returns the correct plural or singular usage of bottle\r\n  def bottle_s\r\n    if bottles_of_beer > 1 || bottles_of_beer == 0\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    end\r\n  end\r\n\r\n  def one_bottle?\r\n    bottles_of_beer == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottles_of_beer == 2\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottles_of_beer == 0\r\n  end\r\n\r\nend	\N	f	1	7	2014-05-10 17:55:46	2014-05-10 17:55:46	564	beer-song.rb
1204	44	9bf3c367f0617a91d746fc5d	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    requested_verses = ""\r\n\r\n    start_verse.downto(end_verse).each do |requested_verse_number|\r\n      requested_verses << Verse.new(requested_verse_number).to_s + "\\n"\r\n    end\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number).to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :bottles_qty\r\n\r\n  def initialize(verse_number)\r\n    @bottles_qty = verse_number\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{bottles_qty} #{bottle_s} of beer on the wall, #{bottles_qty} #{bottle_s} of beer.\\nTake #{one_it} down and pass it around, #{bottles_remaining} #{one_less_bottle_s} of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def bottle_s\r\n    if zero_bottles?\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    elsif bottles_qty > 1\r\n      'bottles'\r\n    end\r\n  end\r\n\r\n  def one_less_bottle_s\r\n    if one_less_bottle == 1\r\n      'bottle'\r\n    elsif one_less_bottle == 0\r\n      'bottles'\r\n    else\r\n      bottle_s\r\n    end\r\n  end\r\n\r\n  def one_it\r\n    if one_bottle?\r\n      'it'\r\n    else\r\n      'one'\r\n    end\r\n  end\r\n\r\n  def bottles_remaining\r\n    if one_less_bottle < 1\r\n      'no more'\r\n    else\r\n      one_less_bottle\r\n    end\r\n  end\r\n\r\n  def one_bottle?\r\n    bottles_qty == 1\r\n  end\r\n\r\n  def one_less_bottle\r\n    bottles_qty - 1\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottles_qty == 0\r\n  end\r\nend	\N	f	3	10	2014-05-29 21:37:25	2014-05-29 21:37:25	564	beer-song.rb
1212	44	ae62c57315db88f50bea3e5b	pending	javascript	bob	var Bob = function() {};\nmodule.exports = Bob;\n\n\nBob.prototype.hey = function(thingSaid){\n\tif(thingSaid.silent() || thingSaid == ''){\n\t\treturn 'Fine. Be that way!';\n\t} else if(thingSaid.yelling()){\n\t\treturn 'Woah, chill out!'\n\t} else if(thingSaid.question('?')){\n\t\treturn 'Sure.'\n\t}else {\n\t\treturn 'Whatever.'\n\t}\n\t\t\n}\n\nString.prototype.question = function(question_mark){\n\treturn this.indexOf(question_mark, this.length - question_mark.length) !== -1;\n};\n\nString.prototype.yelling = function(){\n\tif(this.match(/^(?!.*[a-z]).+$/) && this.match(/[A-Z]/)){\n\t\treturn true\n\t}\n}\n\nString.prototype.silent = function(){\n\tif(this.match(/^\\s+$/)){\n\t\treturn true\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Bob.prototype.hey = function(thingSaid){\n// \tvar silence = new RegExp(/\\A\\s*\\z/);\n// \tif(silence.exec(thingSaid)){\n// \t\treturn 'Fine. Be that way!';\n// \t} \n\t\t\n// }	\N	f	0	1	2014-03-21 14:56:02	2014-03-21 14:56:02	567	bob.js
1206	44	a94abb447353c4e02df70d39	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + Verse.new(verse_number).to_s + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number).to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :bottles_qty\r\n\r\n  def initialize(verse_number)\r\n    @bottles_qty = verse_number\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{bottles_qty} #{bottle_s} of beer on the wall, #{bottles_qty} #{bottle_s} of beer.\\nTake #{one_it} down and pass it around, #{bottles_remaining} #{one_less_bottle_s} of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def bottle_s\r\n    if one_bottle?\r\n      'bottle'\r\n    else\r\n      'bottles'\r\n    end\r\n  end\r\n\r\n  def one_it\r\n    if one_bottle?\r\n      'it'\r\n    else\r\n      'one'\r\n    end\r\n  end\r\n\r\n  def bottles_remaining\r\n    if one_less_bottle < 1\r\n      'no more'\r\n    else\r\n      one_less_bottle\r\n    end\r\n  end\r\n\r\n  def one_less_bottle_s\r\n    if one_less_bottle == 1\r\n      'bottle'\r\n    elsif one_less_bottle == 0\r\n      'bottles'\r\n    else\r\n      bottle_s\r\n    end\r\n  end\r\n\r\n  def one_less_bottle\r\n    bottles_qty - 1\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottles_qty == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    bottles_qty == 1\r\n  end\r\n\r\nend	\N	f	3	12	2014-06-02 21:07:11	2014-06-02 21:07:11	564	beer-song.rb
1207	44	4faf558de2abc8fa64211f74	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + Verse.new(verse_number).to_s + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number).to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :bottles_qty\r\n\r\n  def initialize(verse_number)\r\n    @bottles_qty = verse_number\r\n  end\r\n\r\n  def to_s\r\n    if last_verse?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{bottles_qty} #{bottle_s} of beer on the wall, #{bottles_qty} #{bottle_s} of beer.\\nTake #{one_it} down and pass it around, #{bottles_remaining} #{one_less_bottle_s} of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def bottle_s\r\n    if one_bottle?\r\n      'bottle'\r\n    else\r\n      'bottles'\r\n    end\r\n  end\r\n\r\n  def one_it\r\n    if one_bottle?\r\n      'it'\r\n    else\r\n      'one'\r\n    end\r\n  end\r\n\r\n  def bottles_remaining\r\n    if one_less_bottle < 1\r\n      'no more'\r\n    else\r\n      one_less_bottle\r\n    end\r\n  end\r\n\r\n  def one_less_bottle_s\r\n    if one_less_bottle == 1\r\n      'bottle'\r\n    elsif one_less_bottle == 0\r\n      'bottles'\r\n    else\r\n      bottle_s\r\n    end\r\n  end\r\n\r\n  def one_less_bottle\r\n    bottles_qty - 1\r\n  end\r\n\r\n  def last_verse?\r\n    bottles_qty == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    bottles_qty == 1\r\n  end\r\n\r\nend	\N	f	3	13	2014-06-11 00:22:41	2014-06-11 00:22:41	564	beer-song.rb
1208	44	e28d83453cdff5977c16fd60	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + Verse.new(verse_number).to_s + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number).to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :quantity\r\n\r\n  def initialize(verse_number)\r\n    @quantity = verse_number\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    elsif one_bottle?\r\n      "#{quantity} bottle of beer on the wall, #{quantity} bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\r\n    elsif two_bottles?\r\n      "#{quantity} bottles of beer on the wall, #{quantity} bottles of beer.\\nTake one down and pass it around, #{quantity - 1} bottle of beer on the wall.\\n"\r\n    else\r\n      "#{quantity} bottles of beer on the wall, #{quantity} bottles of beer.\\nTake one down and pass it around, #{quantity - 1} bottles of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def zero_bottles?\r\n    quantity == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    quantity == 2\r\n  end\r\n\r\nend	\N	f	0	16	2014-06-24 15:49:21	2014-06-24 15:49:21	564	beer-song.rb
1209	44	c902512353d687c108d3f6c4	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + Verse.new(verse_number, 'beer').to_s + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number, 'beer').to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :quantity, :beverage\r\n\r\n  def initialize(verse_number, beverage)\r\n    @quantity = verse_number\r\n    @beverage = beverage\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      "No more bottles of #{beverage} on the wall, no more bottles of #{beverage}.\\nGo to the store and buy some more, 99 bottles of #{beverage} on the wall.\\n"\r\n    elsif one_bottle?\r\n      "#{quantity} bottle of #{beverage} on the wall, #{quantity} bottle of #{beverage}.\\nTake it down and pass it around, no more bottles of #{beverage} on the wall.\\n"\r\n    elsif two_bottles?\r\n      "#{quantity} bottles of #{beverage} on the wall, #{quantity} bottles of #{beverage}.\\nTake one down and pass it around, #{quantity - 1} bottle of #{beverage} on the wall.\\n"\r\n    else\r\n      "#{quantity} bottles of #{beverage} on the wall, #{quantity} bottles of #{beverage}.\\nTake one down and pass it around, #{quantity - 1} bottles of #{beverage} on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def zero_bottles?\r\n    quantity == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    quantity == 2\r\n  end\r\n\r\nend	\N	f	0	17	2014-06-25 03:39:08	2014-06-25 03:39:08	564	beer-song.rb
1214	44	77d9204e7f8454f2d866bf9e	done	ruby	rna-transcription	class DNA\n  attr_reader :strand\n  def initialize(strand = '')\n    @strand = strand.upcase\n  end\n\n  def to_rna\n    thymine_to_uracil\n  end\n\n  private\n\n  def thymine_to_uracil\n    strand.gsub('T', 'U')\n  end\nend	\N	f	0	1	2014-04-09 19:18:02	2014-04-09 19:18:02	569	rna-transcription.rb
1215	44	02799f1b9d1ba514bda566c6	pending	ruby	grains	class Grains\ndef initialize\n  @array = []\ndef square(number)\n\n  @counter = 1\n  @array.push(@counter)\n  (number - 1).times do\n  @counter *= 2\n  @array.push(@counter)\n  end\n  @counter\nend\ndef total\n  sum = 0\n  square(64)\n  @array.each do |i|\n  sum += i \n\n  end\n  sum\nend\n\nend\nend	\N	f	0	1	2014-02-20 13:46:05	2014-02-20 13:46:05	570	grains.rb
1216	44	2e2382a5c4745fbf47cf388a	done	objective-c	bob	//\n//  Bob.m\n//  bob\n//\n//  Created by Murillo Nicacio de Maraes on 3/17/14.\n//  Copyright (c) 2014 exercism. All rights reserved.\n//\n\n#import "Bob.h"\n\n@implementation Bob\n\n-(NSString *)hey:(NSString *)input\n{\n    NSString *trimmedInput = [input stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@" "]];\n    \n    NSInteger lastCharacter = [input length] - 1;\n    \n    if ([input isEqualToString:[input uppercaseString]] && ![input isEqualToString:[input lowercaseString]]) {\n        return @"Woah, chill out!";\n    } else if (lastCharacter > 0 && [[input substringFromIndex:lastCharacter] isEqualToString:@"?"]) {\n        return @"Sure.";\n    } else if ([trimmedInput isEqualToString:@""]) {\n        return @"Fine, be that way.";\n    } else {\n        return @"Whatever.";\n    }\n}\n\n@end	\N	f	1	1	2014-03-08 14:59:04	2014-03-08 14:59:04	571	Bob.m
1217	44	6154820b3375d9fed2bba2db	pending	go	octal	package octal\n\nimport (\n\t"math"\n\t"strconv"\n\t"unicode"\n)\n\nfunc getnumber(s string) (nums []int) {\n\tfor _, r := range s {\n\t\tif unicode.IsDigit(r) {\n\t\t\ti, _ := strconv.Atoi(string(r))\n\t\t\tif i >= 0 && i <= 7 {\n\t\t\t\tnums = append(nums, i)\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\nfunc ToDecimal(s string) (dec int64) {\n\tnums := getnumber(s)\n\tln := len(nums) - 1\n\tfor i, n := range nums {\n\t\tdec += int64(n) * int64(math.Pow(8, float64(ln-i)))\n\t}\n\treturn\n}	\N	f	1	1	2014-03-26 06:06:13	2014-03-26 06:06:13	572	octal.go
1218	44	b0ea7f7259eeedb332f2d981	pending	ruby	hamming	class Hamming\n  def self.compute strands_one, strands_two\n    strands_one, strands_two = strands_two, strands_one if strands_two.size < strands_one.size\n    strands_one, strands_two = strands_one.chars, strands_two.chars\n    strands_one.size.times.inject(0) { |sum, i| sum + (strands_one[i] != strands_two[i] ? 1 : 0) }\n  end\nend	\N	f	0	1	2014-03-27 07:15:37	2014-03-27 07:15:37	573	hamming.rb
1219	44	36c361ebd1b8d9af4c87bb6a	superseded	ruby	bob	class Bob\n\n  def hey(string)\n    return 'Fine. Be that way.' if blank?(string)\n    return 'Sure.' if question?(string)\n    return 'Woah, chill out!' if shouting?(string)\n    'Whatever.'\n  end\n\n  private\n\n  def blank?(string)\n    string.nil? || string.empty?\n  end\n\n  def question?(string)\n    string.end_with?('?')\n  end\n\n  def shouting?(string)\n    string.upcase == string\n  end\n\nend	\N	f	1	2	2014-02-27 03:44:41	2014-02-27 03:44:41	574	bob.rb
1220	44	bcbcc97ec4db4b3c289765e8	superseded	ruby	bob	class Bob\n\n  def hey(string)\n    return 'Fine. Be that way.' if blank?(string)\n    return 'Sure.' if question?(string)\n    return 'Woah, chill out!' if shouting?(string)\n    'Whatever.'\n  end\n\n  private\n\n  def blank?(string)\n    string.nil? || string.empty?\n  end\n\n  def question?(string)\n    string.match(/\\?$/)\n  end\n\n  def shouting?(string)\n    string.match(/^[^a-z]+$/) && string.match(/[A-Z]+/)\n  end\n\nend	\N	f	0	1	2014-03-06 22:36:02	2014-03-06 22:36:02	574	bob.rb
1221	44	2b526057f85a9a8649718ee9	superseded	ruby	bob	class Bob\n\n  def hey(s)\n    statement = Statement.new(s)\n    case\n    when statement.silence?  then 'Fine. Be that way.'\n    when statement.question? then 'Sure.'\n    when statement.shouting? then 'Woah, chill out!'\n    else 'Whatever.'\n    end\n  end\n\n  private\n\n  class Statement\n    def initialize(s)\n      @s = s\n    end\n\n    def silence?\n      @s.nil? || @s.empty?\n    end\n\n    def question?\n      @s.end_with?('?')\n    end\n\n    def shouting?\n      @s.upcase == @s\n    end\n  end\n\nend	\N	f	0	3	2014-03-12 10:36:05	2014-03-12 10:36:05	574	bob.rb
1222	44	4eed72308a7f125100e1d0a2	done	ruby	bob	class Bob\n\n  def hey(s)\n    statement = Statement.new(s)\n    case\n    when statement.silence?  then 'Fine. Be that way.'\n    when statement.question? then 'Sure.'\n    when statement.shouting? then 'Woah, chill out!'\n    else 'Whatever.'\n    end\n  end\n\n  private\n\n  class Statement\n    def initialize(statement)\n      @statement = statement.to_s\n    end\n\n    def silence?\n      @statement.nil? || @statement.empty?\n    end\n\n    def question?\n      @statement.end_with?('?')\n    end\n\n    def shouting?\n      @statement.upcase == @statement\n    end\n  end\n\nend	\N	f	2	4	2014-03-27 08:39:05	2014-03-27 08:39:05	574	bob.rb
1226	44	9fc56b85f61687ae1d2f44cb	superseded	elixir	word-count	defmodule Words do\n  def count(text) do\n    text |> extract_words |> word_count\n  end\n\n  defp word_count(words) do\n    Enum.reduce(words, HashDict.new, update)\n  end\n\n  defp extract_words(text) do\n    text |> String.downcase\n         |> String.split(%r/\\W+/)\n         |> Stream.reject(&1 == "")\n  end\n\n  defp update,    do: &Dict.update(&2, &1, 1, increment)\n  defp increment, do: &(&1 + 1)\nend	\N	f	0	3	2014-03-18 23:22:33	2014-03-18 23:22:33	576	word-count.exs
1227	44	67f6314313bba22a13de22dc	superseded	elixir	word-count	defmodule Words do\n  def count(text) do\n    extract_words(text) |> word_count\n  end\n\n  defp word_count(words) do\n    Enum.reduce(words, HashDict.new, &update_count/2)\n  end\n\n  defp update_count(word, dict) do\n    Dict.update(dict, word, 1, &1 + 1)\n  end\n\n  defp extract_words(text) do\n    text |> String.downcase\n         |> String.split(%r/\\W+/)\n         |> Stream.reject(&1 == "")\n  end\nend	\N	f	1	2	2014-03-26 07:15:00	2014-03-26 07:15:00	576	word-count.exs
1228	44	edd79150eb849c633005c6ed	superseded	elixir	word-count	defmodule Words do\n  def count(text) do\n    text |> extract_words |> word_count\n  end\n\n  defp word_count(list) do\n    Enum.reduce(list, HashDict.new, update)\n  end\n\n  defp extract_words(text) do\n    text |> String.downcase\n         |> String.split(%r/\\W+/)\n         |> Stream.reject(&1 == "")\n  end\n\n  defp update,    do: &Dict.update(&2, &1, 1, increment)\n  defp increment, do: &(&1 + 1)\nend	\N	f	1	4	2014-04-15 17:32:48	2014-04-15 17:32:48	576	word-count.exs
1229	44	79742013948fcd923b5c4228	superseded	elixir	word-count	defmodule Words do\n  def count(text) do\n    text |> extract_words |> word_count\n  end\n\n  defp extract_words(text) do\n    text |> String.downcase\n         |> String.split(%r/\\W+/)\n         |> Stream.reject(&1 == "")\n  end\n\n  defp word_count(list) do\n    Enum.reduce(list, HashDict.new, &update/2)\n  end\n\n  defp update(key, dict) do\n    Dict.update(dict, key, 1, &(&1 + 1))\n  end\nend	\N	f	0	5	2014-04-17 13:27:37	2014-04-17 13:27:37	576	word-count.exs
1230	44	a223eecbcef4bd80976a7b56	done	elixir	word-count	defmodule Words do\n  def count(text) do\n    text |> extract_words |> word_count\n  end\n\n  defp extract_words(text) do\n    text |> String.downcase\n         |> String.split(%r/\\W+/)\n         |> Stream.reject(&1 == "")\n  end\n\n  defp word_count(list) do\n    Enum.reduce(list, HashDict.new, &update/2)\n  end\n\n  defp update(key, dict) do\n    Dict.update(dict, key, 1, &(&1 + 1))\n  end\nend	\N	f	2	9	2014-04-30 23:04:04	2014-04-30 23:04:04	576	word-count.exs
1231	44	98613c28740fb4db69e01aed	superseded	elixir	word-count	ExUnit.start\n\n# Quest {{{1\n# =============\ndefmodule Quest do\nend\n\n# Server {{{1\n# ======\ndefmodule Quest.Server do\n  use GenServer.Behaviour\n  defrecordp :state, [:sock]\n  @default_port 5510\n\n  def start_link, do: :gen_server.start_link({:local, __MODULE__}, [], [])\n  def stop, do: :gen_server.cast(__MODULE__, :stop)\n\n  def init([]) do\n    { :ok, state(sock: listen_socket) }\n  end\n\n  def terminate(_, state(sock: sock)) do\n    :gen_tcp.close(sock)\n    :ok\n  end\n\n  def handle_cast(:stop, s) do\n    { :stop, :normal, s }\n  end\n\n  defp listen_socket do\n    case :gen_tcp.listen(port, [:binary, {:packet, :line}, {:active, :once}]) do\n      {:ok, sock} -> sock\n      error ->\n        raise error\n    end\n  end\n\n  defp port do\n    System.get_env("PORT") || @default_port\n  end\nend\n\n# }}}1\n\ndefmodule QuestTest do\n  use ExUnit.Case\n\n  test :start do\n    Quest.Server.start_link |> IO.inspect\n    Quest.Server.stop\n\n    Process.flag(:trap_exit, true)\n    receive do\n      {:EXIT, _pid, :normal} -> IO.puts "-----> done"\n    end\n  end\nend	\N	f	2	8	2014-05-01 09:38:30	2014-05-01 09:38:30	576	word-count.exs
1232	44	ff4f2fe04eb539ad156fd742	superseded	elixir	word-count	ExUnit.start\n\n# Quest {{{1\n# =============\ndefmodule Quest do\nend\n\n# Server {{{1\n# ======\ndefmodule Quest.Server do\n  use GenServer.Behaviour\n  defrecordp :state, [:sock]\n  @default_port 5510\n\n  def start_link, do: :gen_server.start_link({:local, __MODULE__}, [], [])\n  def stop, do: :gen_server.cast(__MODULE__, :stop)\n\n  def init([]) do\n    { :ok, state(sock: listen_socket) }\n  end\n\n  def terminate(_, state(sock: sock)) do\n    :gen_tcp.close(sock)\n    :ok\n  end\n\n  def handle_cast(:stop, s) do\n    { :stop, :normal, s }\n  end\n\n  defp listen_socket do\n    case :gen_tcp.listen(port, [:binary, {:packet, :line}, {:active, :once}]) do\n      {:ok, sock} -> sock\n      error ->\n        raise error\n    end\n  end\n\n  defp port do\n    System.get_env("PORT") || @default_port\n  end\nend\n\n# }}}1\n\ndefmodule QuestTest do\n  use ExUnit.Case\n\n  test :start do\n    Quest.Server.start_link\n    Quest.Server.stop\n\n    Process.flag(:trap_exit, true)\n    receive do\n      {:EXIT, _pid, :normal} -> IO.puts "-----> done"\n    end\n  end\nend	\N	f	3	6	2014-05-13 13:44:08	2014-05-13 13:44:08	576	word-count.exs
1233	45	f7a9229d6e9a1b52b22e4919	superseded	clojure	point-mutations	(ns dna)\n\n; (defn- hamming-value [symbol-1 symbol-2]\n;   (if (= symbol-1 symbol-2) 0 1))\n\n(defn hamming-distance [strand-1 strand-2]\n  (let [hamming-value #(if (= %1 %2) 0 1)\n        hamming-values (map hamming-value strand-1 strand-2)]\n    (reduce + hamming-values)))	\N	f	1	3	2014-05-02 02:39:48	2014-05-02 02:39:48	577	point-mutations.clj
1234	45	0affdc723dd8efc86b74dae5	superseded	clojure	point-mutations	(ns dna)\n\n(defn- pair-elements [list1 list2]\n  (map vector list1 list2))\n\n(defn- hamming-value [tuple]\n  (if (= (first tuple) (last tuple)) 0 1))\n\n(defn hamming-distance [strand-1 strand-2]\n  (let [hamming-values (map hamming-value (pair-elements strand-1 strand-2))]\n    (reduce + hamming-values)))	\N	f	1	2	2014-05-04 18:26:39	2014-05-04 18:26:39	577	point-mutations.clj
1235	45	9698ed9515032be5939d2ff4	superseded	clojure	point-mutations	(ns dna)\n\n(defn- pair-elements [list1 list2]\n  (map vector list1 list2))\n\n(defn- position-value [tuple]\n  (if (= (first tuple) (last tuple)) 0 1))\n\n(defn hamming-distance [strand-1 strand-2]\n  (let [paired-elements (pair-elements strand-1 strand-2)\n        position-values (map position-value paired-elements)]\n    (reduce + position-values)))	\N	f	0	1	2014-05-17 04:06:33	2014-05-17 04:06:33	577	point-mutations.clj
1236	45	a6d5afbf46c53066874368de	done	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [strand-1 strand-2]\n  (let [hamming-value #(if (= %1 %2) 0 1)\n        hamming-values (map hamming-value strand-1 strand-2)]\n    (reduce + hamming-values)))	\N	f	0	4	2014-06-19 18:18:25	2014-06-19 18:18:25	577	point-mutations.clj
1238	45	8fee49f4a90088878a6dcc38	pending	ruby	simple-linked-list	class Element\n  attr_accessor :datum, :link\n\n  def initialize(datum, link)\n    @datum = datum\n    @link = link\n  end\n\n  def next\n    link\n  end\n\n  def reverse\n    if link\n      Element.new(link.datum, self)\n    else\n      Element.new(datum, nil)\n    end\n  end\n\n  def self.to_a(node)\n    result = []\n    while node && node.datum\n      result << node.datum\n      node = node.link\n    end\n    result\n  end\n\n  def to_a\n    Element.to_a(self)\n  end\n\n  def self.from_a(data)\n    return nil unless data\n\n    data = format(data)\n    data.each_with_object([]).with_index do |(element, results), i|\n      results[i] = Element.new(element, results[i - 1])\n    end\n    .last\n  end\n\n  private\n\n  def format(data)\n    data.to_a.reverse\n  end\nend	\N	f	1	2	2014-04-06 00:55:35	2014-04-06 00:55:35	578	linked_list.rb
1239	45	c49e26a531caf49963e81336	pending	ruby	triangle	class Triangle\n  attr_reader(:a, :b, :c)\n\n  def initialize(a, b, c)\n    @a, @b, @c = [a, b, c].sort\n    not_a_triangle?\n    check_length?\n  end\n\n  def kind\n    if equilateral?\n      :equilateral\n    elsif isosceles?\n      return :isosceles\n    else\n      :scalene\n    end\n  end\n\n  def equilateral?\n    a == b && a == c\n  end\n\n  def isosceles?\n    a == b || b == c\n  end\n\n  def not_a_triangle?\n    if (a + b) <= c\n      raise TriangleError\n    end\n  end\n\n  def check_length?\n    [a, b, c].each do |side|\n      if side <= 0\n        raise TriangleError\n      end\n    end\n  end\nend\n\nclass TriangleError < Exception\nend	\N	f	1	1	2014-06-10 19:31:08	2014-06-10 19:31:08	579	triangle.rb
1240	45	bf95b4117e8beee723c2661e	superseded	ruby	hamming	class DNA\n  attr_reader :dna_string, :second_string\n\n  def initialize(dna_string)\n    @dna_string = dna_string.upcase\n  end\n\n  def hamming_distance(second_string)\n    @second_string = second_string.upcase\n    strings = [dna_string, second_string].sort_by { |string| string.length }\n    strings[0].each_char.with_index.reduce(0) do |distance, (char, index)|\n      char == strings[1][index] ? distance : distance + 1\n    end\n  end\nend	\N	f	0	1	2014-04-10 07:46:47	2014-04-10 07:46:47	580	dna.rb
1241	45	a3097a72bc8a89bfe7e67dba	done	ruby	hamming	class DNA\n  attr_reader :dna_string\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n  end\n\n  def hamming_distance(second_string)\n    strings = [dna_string, second_string].sort_by { |string| string.length }\n    strings[0].each_char.with_index.reduce(0) do |distance, (char, index)|\n      char == strings[1][index] ? distance : distance + 1\n    end\n  end\nend	\N	f	1	2	2014-04-22 20:39:08	2014-04-22 20:39:08	580	dna.rb
1242	45	eb522259584b0f2f97d453e5	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    return 'Fine. Be that way!' if message.nil? || message.strip.empty?\n    return 'Woah, chill out!' if message.upcase == message\n    return 'Sure.' if message =~ /\\?$/\n    'Whatever.'\n  end\n\nend	\N	f	1	1	2014-03-08 03:45:35	2014-03-08 03:45:35	581	bob.rb
1243	45	192abea38785e67e23b5123b	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    return 'Fine. Be that way!' if message.nil? || message.strip.empty?\n    return 'Woah, chill out!' if message.upcase == message\n    return 'Sure.' if message.strip =~ /\\?$/\n    'Whatever.'\n  end\n\nend	\N	f	0	2	2014-04-14 22:19:37	2014-04-14 22:19:37	581	bob.rb
1244	45	c10e063da27ef2553b156a16	done	ruby	bob	class Bob\n\n  def hey(message)\n    message.strip! unless message.nil?\n    \n    return 'Fine. Be that way!' if addressed_without_saying_anything?(message)\n    return 'Woah, chill out!' if yelled_at?(message)\n    return 'Sure.' if asked_a_question?(message)\n    return 'Whatever.' if told_something?(message)\n  end\n\n  def asked_a_question?(message)\n    message =~ /\\?$/\n  end\n\n  def told_something?(message)\n    true\n  end\n\n  def yelled_at?(message)\n    message.upcase == message\n  end\n\n  def addressed_without_saying_anything?(message)\n    message.nil? || message.empty?\n  end\n\nend	\N	f	4	3	2014-04-29 05:51:26	2014-04-29 05:51:26	581	bob.rb
1245	45	60923f5ee78fb072961a8d51	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport qualified Data.Map.Lazy as Map\nimport Data.Char (isAlphaNum, toLower)\n\ntype CountMap = Map.Map String Integer\n\nwordCount :: String -> CountMap\nwordCount s = count $ words $ map toLower $ map replacePunctuation s\n  where\n    replacePunctuation :: Char -> Char\n    replacePunctuation c | isAlphaNum c = c\n                         | otherwise    = ' '\n    count :: [String] -> CountMap\n    count ss = Map.fromListWith (+) $ zip ss $ repeat 1	\N	f	1	1	2014-03-21 17:51:45	2014-03-21 17:51:45	582	WordCount.hs
1246	45	dd703e225402075d270ec7de	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map, fromListWith)\n\ntype WordCountMap = Map String Integer\n\nwordCount :: String -> WordCountMap\nwordCount = count . wordsBy (not . isAlphaNum) . map toLower\n  where\n    count :: [String] -> WordCountMap\n    count ss = fromListWith (+) $ zip ss $ repeat 1	\N	f	2	2	2014-05-04 07:27:42	2014-05-04 07:27:42	582	WordCount.hs
1247	45	da76e87144212dc88b870584	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (fromListWith, Map)\n\nwordCount :: String -> Map String Int\nwordCount = count . wordsBy (not . isAlphaNum) . map toLower\n  where\n    count ss = fromListWith (+) $ zip ss $ repeat 1	\N	f	2	3	2014-05-18 05:17:17	2014-05-18 05:17:17	582	WordCount.hs
1248	45	adac90795725c6881cbd63d2	pending	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n    @word_chars = @word.chars.sort\n  end\n  \n  def match(candidates)\n    candidates.select do |candidate| \n      candidate = candidate.downcase\n      @word_chars == candidate.chars.sort unless candidate.eql? @word\n    end\n  end\nend	\N	f	1	1	2014-04-19 09:07:06	2014-04-19 09:07:06	583	anagram.rb
1259	45	4bc7465ae279d9576a8ad39e	superseded	elixir	rna-transcription	defmodule DNA do\n  @doc """\n  Transcribes a character list representing DNA nucleotides to RNA\n\n  ## Examples\n\n  iex> DNA.to_rna('ACTG')\n  'UGAC'\n  """\n\n  @translation HashDict.new [{?A, ?U},\n                             {?T, ?A},\n                             {?C, ?G},\n                             {?G, ?C}]\n\n  @spec to_rna([char]) :: [char]\n  def to_rna(dna) do\n    Enum.map dna, &HashDict.get(@translation,&1)\n  end\nend	\N	f	1	1	2014-03-12 01:57:57	2014-03-12 01:57:57	592	dna.exs
1274	46	243fd69b8e6e330769751651	superseded	elixir	nucleotide-count	defmodule DNA do\n\n  def count(strand, nucleotide) do\n    Enum.count strand, &1 == nucleotide\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new nucleotides, fn n -> { n, count(strand, n) } end\n  end\n\n  defp nucleotides do\n    [ ?A, ?T, ?C, ?G ]\n  end\n\nend	\N	f	2	3	2014-06-23 08:37:40	2014-06-23 08:37:40	597	nucleotide-count.exs
1250	45	5fff505525956df20eafea05	superseded	haskell	bob	module Bob (responseFor, PhraseHeard) where\n\timport Data.Char\n\tdata PhraseHeard = Silence | Shouting | Question | Remark\n\n\tinstance Show PhraseHeard where\n\t\tshow Silence = "Fine. Be that way!"\n\t\tshow Shouting = "Woah, chill out!"\n\t\tshow Question = "Sure."\n\t\tshow Remark = "Whatever."\n\n\tresponseFor :: String -> String\n\tresponseFor a\n\t\t| trimmed == ""                                  = show Silence\n\t\t| lowerCasedChars == "" && upperCasedChars /= "" = show Shouting\n\t\t| endsWith == '?'                                = show Question\n\t\t| otherwise                                      = show Remark\n\t\twhere\n\t\t\ttrimmed = dropWhile isSpace a\n\t\t\tlowerCasedChars = filter isLower a\n\t\t\tupperCasedChars = filter isUpper a\n\t\t\tendsWith = last a	\N	f	1	1	2014-03-16 20:58:12	2014-03-16 20:58:12	585	bob.hs
1251	45	7078e984d34bc509a3319f45	done	haskell	bob	module Bob (responseFor, PhraseHeard) where\n    import Data.Char\n    data PhraseHeard = Silence | Shouting | Question | Remark\n\n    instance Show PhraseHeard where\n        show Silence = "Fine. Be that way."\n        show Shouting = "Woah, chill out!"\n        show Question = "Sure."\n        show Remark = "Whatever."\n\n    toPhrase :: String -> PhraseHeard\n    toPhrase a\n        | all isSpace a                          = Silence\n        | not (any isLower a) && (any isUpper a) = Shouting\n        | last a == '?'                          = Question\n        | otherwise                              = Remark\n\n    responseFor :: String -> String\n    responseFor a = show . toPhrase $ a	\N	f	1	2	2014-04-11 22:49:52	2014-04-11 22:49:52	585	bob.hs
1252	45	9487722eac345ddbeccba22b	pending	haskell	anagram	module Anagram (\n                anagramsFor\n) where\n\nimport Data.Char\nimport Data.List\n\nanagramsFor :: String -> [String] -> [String]\n\nanagramsFor word = findAnagram . removeSame\n    where normalize = map toLower\n          signature = sort\n          wNor = normalize word\n          wSig = signature wNor\n          removeSame = filter ((/=) wNor . normalize)\n          findAnagram = filter ((==) wSig . signature . normalize)	\N	f	0	1	2014-05-01 19:09:19	2014-05-01 19:09:19	586	anagram.hs
1253	45	fc8feda5be5c7d319486f48d	superseded	javascript	rna-transcription	var TRANSCRIPTION = { 'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'};\n\nfunction toRna(dna)\n{\n  var result = ""\n  for (var i = 0; i < dna.length; i++)\n  {\n    result += TRANSCRIPTION[dna.charAt(i)];\n  }\n  return result;\n}\n\nmodule.exports = toRna;	\N	f	1	1	2014-03-30 09:13:08	2014-03-30 09:13:08	587	rna-transcription.js
1254	45	0f4bb526a011ff515a7ba4b6	hibernating	javascript	rna-transcription	var TRANSCRIPTION = { 'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'};\n\nfunction toRna(dna)\n{\n  var result = [];\n  for (var i = 0; i < dna.length; i++)\n  {\n    result.push(TRANSCRIPTION[dna.charAt(i)]);\n  }\n  return result.join("");\n}\n\nmodule.exports = toRna;	\N	f	1	2	2014-04-22 18:12:14	2014-04-22 18:12:14	587	rna-transcription.js
1256	45	de461ca13d5aeeaf891c76e1	done	haskell	rna-transcription	module DNA\n    (toRNA)\nwhere\n\n\ndata DNABase = DA | DC | DG | DT deriving (Eq)\n\ninstance Show DNABase where\n    show b = case b of\n        DA -> "A"\n        DC -> "C"\n        DG -> "G"\n        DT -> "T"\n\ndata RNABase = RA | RC | RG | RU deriving (Eq)\n\ninstance Show RNABase where\n    show b = case b of\n        RA -> "A"\n        RC -> "C"\n        RG -> "G"\n        RU -> "U"\n\ncreateDNABase::Char -> DNABase\ncreateDNABase c = case c of\n    'A' -> DA\n    'C' -> DC\n    'G' -> DG\n    'T' -> DT\n\ncreateRNABase::Char -> RNABase\ncreateRNABase c = case c of\n    'A' -> RA\n    'C' -> RC\n    'G' -> RG\n    'U' -> RU\n\nnewtype DNA = DNA [DNABase]\nnewtype RNA = RNA [RNABase]\n\ninstance Show DNA where\n    show (DNA d) = concatMap show d\n\ninstance Show RNA where\n    show (RNA r) = concatMap show r\n\ncreateDNA::String -> DNA\ncreateDNA s = DNA $ map createDNABase s\n\ncreateRNA::String -> RNA\ncreateRNA s = RNA $ map createRNABase s\n\ndnaToRna::DNA -> RNA\ndnaToRna (DNA d) = RNA $ map convertOne d\n  where\n    convertOne b = case b of\n        DA -> RA\n        DC -> RC\n        DG -> RG\n        DT -> RU\n\ntoRNA::String -> String\ntoRNA = show . dnaToRna . createDNA	\N	f	3	1	2014-04-27 08:01:15	2014-04-27 08:01:15	589	rna-transcription.hs
1257	45	13c099acff554348f204e719	pending	go	binary	package binary\n\nfunc ToDecimal(binary string) (result int) {\n\tfor power := 0; power < len(binary); power++ {\n\t\tposition := (len(binary) - 1) - power\n\t\tswitch {\n\t\tcase binary[position] == '1':\n\t\t\tresult += int(1 << uint(power))\n\t\tcase binary[position] == '0':\n\t\t\tcontinue\n\t\tdefault:\n\t\t\treturn 0\n\t\t}\n\t}\n\treturn result\n}	\N	f	1	1	2014-03-04 23:58:57	2014-03-04 23:58:57	590	binary.go
1258	45	ad051b9e3e314658d0c28d8f	pending	ruby	beer-song	class BeerSong\n  def verse(l)\n    return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n" if l == 0\n    return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n" if l == 1\n    "#{l} bottles of beer on the wall, #{l} bottles of beer.\\nTake one down and pass it around, #{l-1} bottle#{'s' if l-1 > 1} of beer on the wall.\\n"\n  end\n\n  def verses(l1, l2)\n    (l2..l1).to_a.reverse.map { |l| verse(l) }.join("\\n") << "\\n"\n  end\n\n  def sing\n    verses(99, 0)\n  end\nend	\N	f	1	1	2014-03-23 03:19:28	2014-03-23 03:19:28	591	beer_song.rb
1261	45	0cab49ac092f24c171f94321	superseded	ruby	point-mutations	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    strand_chars.zip(other_strand.chars)\n      .count { |a, b| b && a != b }\n  end\n\n  private\n  def strand_chars\n    @strand_chars ||= strand.chars\n  end\nend	\N	f	1	1	2014-03-04 19:24:35	2014-03-04 19:24:35	593	point-mutations.rb
1262	45	701490455bd687d5effee588	done	ruby	point-mutations	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    strand_contents = [strand, other_strand].map(&:chars)\n    shorter, longer = strand_contents.sort_by(&:length)\n    shorter.zip(longer).count { |a, b| a != b }\n  end\nend	\N	f	1	4	2014-03-29 11:19:14	2014-03-29 11:19:14	593	point-mutations.rb
1263	45	8a9031c2918404a1b4dc66c4	superseded	ruby	point-mutations	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    strand_contents = [strand_chars, other_strand.chars]\n    shorter, longer = strand_contents.sort_by(&:length)\n    shorter.zip(longer).count { |a, b| a != b }\n  end\n\n  private\n  def strand_chars\n    @strand_chars ||= strand.chars\n  end\nend	\N	f	1	3	2014-04-11 15:21:35	2014-04-11 15:21:35	593	point-mutations.rb
1264	45	6fa02e6dec1a477c70484767	superseded	ruby	point-mutations	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    stand_contents = [strand_chars, other_strand.chars]\n    shorter, longer = stand_contents.sort_by &:length\n    shorter.zip(longer).count { |a, b| a != b }\n  end\n\n  private\n  def strand_chars\n    @strand_chars ||= strand.chars\n  end\nend	\N	f	1	2	2014-05-09 01:58:40	2014-05-09 01:58:40	593	point-mutations.rb
1265	46	6ca6283461f6f91ec30df9db	pending	ruby	bob	class Bob\n  def hey(anything)\n    if anything.upcase == anything && anything =~ /[a-zA-Z]/\n      'Woah, chill out!'\n    elsif anything =~ (/\\?\\z/)\n      'Sure.'\n    elsif anything =~ (/^\\s*\\z/)\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	3	1	2014-06-26 23:30:30	2014-06-26 23:30:30	594	bob.rb
1266	46	1c0dffe469288ea2fb8453cc	superseded	javascript	bob	var Bob = function(){\n\tthis.hey = function(input){\n\t\tif (input.toUpperCase()==input){\n\t\t\treturn "Woah, chill out!";\n\t\t} else if (input.slice(-1)=="?") {\n\t\t\treturn "Sure.";\n\t\t} else if (!input.trim()) {\n\t\t\treturn "Fine. Be that way!";\n\t\t} else {\n\t\t\treturn "Whatever.";\t\n\t\t}\n\t}\n}\n\nmodule.exports = Bob;	\N	f	6	1	2014-06-20 22:39:16	2014-06-20 22:39:16	595	bob.js
1267	46	372b5142b1195649d16fe630	pending	javascript	bob	var Bob = function(){\n\tthis.hey = function(input){\n\t\tif (!input.trim()) {\n\t\t\treturn "Fine. Be that way!";\n\t\t} else if (input.toUpperCase()==input){\n\t\t\treturn "Woah, chill out!";\n\t\t} else if (input.slice(-1)=="?") {\n\t\t\treturn "Sure.";\n\t\t} else {\n\t\t\treturn "Whatever.";\t\n\t\t}\n\t}\n}\n\nmodule.exports = Bob;	\N	f	0	2	2014-06-21 19:48:37	2014-06-21 19:48:37	595	bob.js
1269	46	d184616c0336e52afb2c1ae2	superseded	clojure	beer-song	(ns beer (:require [clojure.string :as s]))\n\n(defn n-bottles [n]\n  (case n\n    0 "no more bottles"\n    1  "1 bottle"\n    (str n " bottles")))\n\n(defn verse1 [n]\n  (let [bottles (n-bottles n)]\n    (str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n")))\n\n(defn verse2 [n]\n  (let [it-one (if (= 1 n) "it" "one")]\n    (if (zero? n)\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n      (str "Take " it-one " down and pass it around, " (n-bottles (dec n)) " of beer on the wall.\\n"))))\n\n(defn verse [n] (str (verse1 n) (verse2 n)))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end] (->> (range start (dec end) -1)\n                    (map #(str (verse %) "\\n"))\n                    (apply str))))	\N	f	1	2	2014-06-30 05:36:22	2014-06-30 05:36:22	596	beer.clj
1271	46	dc8d8ceb12eda2c252b82bda	done	elixir	nucleotide-count	defmodule DNA do\n\n  @nucleotides [ ?A, ?T, ?C, ?G ]\n\n  def count(strand, nucleotide) do\n    Enum.count strand, &(&1 == nucleotide)\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new @nucleotides, &{ &1, count(strand, &1) }\n  end\n\nend	\N	f	0	6	2014-06-15 13:02:48	2014-06-15 13:02:48	597	dna.exs
1272	46	8d76212c2a848aeeaca8ad6b	superseded	elixir	nucleotide-count	defmodule DNA do\n\n  def count(strand, nucleotide) do\n    Enum.count(strand, &1 == nucleotide)\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new(nucleotides, fn n -> { n, count(strand, n) } end)\n  end\n\n  defp nucleotides do\n    [ ?A, ?T, ?C, ?G ]\n  end\n\nend	\N	f	3	2	2014-06-18 07:31:08	2014-06-18 07:31:08	597	nucleotide-count.exs
1273	46	b365ff422ea9be1b82c9818b	superseded	elixir	nucleotide-count	defmodule DNA do\n\n  def count(strand, nucleotide) do\n    Enum.count(strand, &1 == nucleotide)\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new [\n      {?A, count(strand, ?A)},\n      {?T, count(strand, ?T)},\n      {?C, count(strand, ?C)},\n      {?G, count(strand, ?G)}\n    ]\n  end\n\nend	\N	f	3	1	2014-06-21 10:57:20	2014-06-21 10:57:20	597	nucleotide-count.exs
1278	46	b073ac2e6a20a14c8a007847	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n  \t@phrase = phrase.to_s\n  end\n\n  def word_count\n\t\t@word_count ||= parse\n  end\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = tokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	10	4	2014-06-16 17:59:52	2014-06-16 17:59:52	598	word-count.rb
1279	46	35e74709a43fc0631ed2fe0f	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= parse\n \tend\n\n\tprivate\n\t\n\tdef parse\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	0	5	2014-06-18 04:20:47	2014-06-18 04:20:47	598	word-count.rb
1280	46	c180b6868d752f1909be08e6	superseded	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@phrase = normalize(phrase)\n\tend\n\n\tdef word_count\n\t\t@word_count ||= parse\n\tend\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = Hash.new(0)\n\t\t@phrase.split.each do |word| \n\t\t\t@word_count[word] += 1\n\t\tend\n\t\t@word_count\n\tend\n\n\tdef normalize (phrase)\n\t\tphrase.to_s.downcase.gsub(/\\W+/, ' ')\n\tend\nend	\N	f	18	1	2014-06-19 19:05:40	2014-06-19 19:05:40	598	word-count.rb
1281	46	c935ccf08fa8760ae6163275	superseded	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@phrase = phrase.to_s\n\tend\n\n\tdef word_count\n\t\t@word_count ||= parse\n\tend\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = Hash.new(0)\n\t\ttokenize(normalize(@phrase)).each { |word|\n\t\t\t@word_count[word] += 1\n\t\t}\n\t\t@word_count\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	0	2	2014-06-22 13:25:11	2014-06-22 13:25:11	598	word-count.rb
1282	46	3146596cffce0397d670d256	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= count_words_in_phrase\n \tend\n\n\tprivate\n\t\n\tdef count_words_in_phrase\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) do |word, result| \n\t\t\tresult[word] += 1\n\t\tend\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	3	7	2014-06-29 10:37:11	2014-06-29 10:37:11	598	word-count.rb
1283	46	6b0ace063fa54b9de836d0f5	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= count_words_in_phrase\n \tend\n\n\tprivate\n\t\n\tdef count_words_in_phrase\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) do |word, result| \n\t\t\tresult[word] += 1\n\t\tend\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	3	8	2014-06-30 17:29:57	2014-06-30 17:29:57	598	word-count.rb
1284	46	dccf1e4e07a7166141f858cf	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n \t  @phrase = phrase.to_s\n \tend\n\n \tdef word_count\n\t\t@word_count ||= count_words_in_phrase\n \tend\n\n\tprivate\n\t\n\tdef count_words_in_phrase\n\t\ttokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	11	6	2014-07-01 02:49:54	2014-07-01 02:49:54	598	word-count.rb
1285	46	05d81aff7fa7049a95070ab5	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase.to_s\n  end\n\n  def word_count\n    @word_count ||= count_words_in_phrase\n  end\n\n  private\n\n  def count_words_in_phrase\n    tokenize(normalize(@phrase)).each_with_object(Hash.new(0)) do |word, result| \n      result[word] += 1\n    end\n  end\n\n  def normalize(str)\n    str.downcase\n  end\n\n  def tokenize(str)\n    str.scan(/\\w+/)\n  end\nend	\N	f	0	9	2014-07-02 09:55:22	2014-07-02 09:55:22	598	word-count.rb
1286	46	c53a1da9065abfbc5869f0da	superseded	haskell	grade-school	module School (School, add, empty, sorted, grade) where\n\nimport Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as Map\nimport Data.List (sort)\nimport Data.Maybe (fromMaybe)\n\ntype Name = String\ntype Grade = Int\ntype School = Map Grade [Name]\n\nadd :: Grade -> Name -> School -> School\nadd g name = Map.insertWith sortAndMerge g [name]\n  where sortAndMerge a b = sort $ a ++ b\n\nempty :: School\nempty = Map.empty\n\nsorted :: School -> [(Grade, [Name])]\nsorted = Map.toList\n\ngrade :: Grade -> School -> [Name]\ngrade g m = fromMaybe [] $ Map.lookup g m	\N	f	0	1	2014-06-21 15:39:19	2014-06-21 15:39:19	599	School.hs
1287	46	e038a116601bb23d298ad85d	superseded	haskell	grade-school	module School (School, add, empty, sorted, grade) where\n\nimport Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as Map\nimport Data.List (sort)\nimport Data.Maybe (fromMaybe)\n\ntype Name = String\ntype Grade = Int\ntype School = Map Grade [Name]\n\nadd :: Grade -> Name -> School -> School\nadd g name = Map.insertWith (++) g [name]\n\nempty :: School\nempty = Map.empty\n\nsorted :: School -> [(Grade, [Name])]\nsorted = Map.toAscList . fmap sort\n\ngrade :: Grade -> School -> [Name]\ngrade g m = fromMaybe [] $ Map.lookup g m	\N	f	0	2	2014-06-22 09:46:29	2014-06-22 09:46:29	599	School.hs
1288	46	1f628fd4239e016c76d23b84	done	haskell	grade-school	module School (School, add, empty, sorted, grade) where\n\nimport Data.Map.Strict (Map)\nimport qualified Data.Map.Strict as Map\nimport Data.List (sort)\n\ntype Name = String\ntype Grade = Int\ntype School = Map Grade [Name]\n\nadd :: Grade -> Name -> School -> School\nadd g name = Map.insertWith (++) g [name]\n\nempty :: School\nempty = Map.empty\n\nsorted :: School -> [(Grade, [Name])]\nsorted = Map.toAscList . fmap sort\n\ngrade :: Grade -> School -> [Name]\ngrade = Map.findWithDefault []	\N	f	4	3	2014-06-29 14:14:40	2014-06-29 14:14:40	599	School.hs
1289	46	2ba9bc7cf11246c8518b61e0	superseded	javascript	anagram	"use strict";\n\nmodule.exports = function Anagram(word) {\n    var normalizedWord = normalize(word);\n\n    return {\n        match: function(words) {\n            return words.filter(function(anagram) {\n                return normalizedWord == normalize(anagram);\n            });\n        }\n    }\n\n    function normalize(word) {\n        // normalize the word: sort its lowercased letters\n        return word.toLowerCase().split("").sort().join("");\n    }\n};	\N	f	5	2	2014-06-19 19:41:53	2014-06-19 19:41:53	600	anagram.js
1333	47	7c0c4de154ee4360c484d74f	superseded	ruby	hamming	class Hamming\n\n  def self.compute(dna_a, dna_b)\n    new(dna_a, dna_b).compute\n  end\n\n  attr_reader :dna_a, :dna_b\n\n  def initialize(dna_a, dna_b)\n    @dna_a, @dna_b = *[dna_a, dna_b].sort_by(&:size)\n  end\n\n  def compute\n    dna_a.chars\n         .each_with_index\n         .map { |nucleotid, i| dna_b[i] == nucleotid ? 0 : 1 }\n         .reduce(&:+)\n         .to_i\n  end\n\nend	\N	f	3	1	2014-05-25 19:10:08	2014-05-25 19:10:08	625	hamming.rb
1291	46	29d7b489bc9d2daa49125def	superseded	javascript	anagram	"use strict";\n\nmodule.exports = function Anagram(word) {\n    var normalized_word = normalize(word);\n\n    return {\n        match: function(words) {\n            return words.filter(function(anagram) {\n                return normalized_word == normalize(anagram);\n            });\n        }\n    }\n\n    function normalize(word) {\n        // normalize the word: sort its lowercased letters\n        return word.toLowerCase().split("").sort().join("");\n    }\n};	\N	f	3	1	2014-06-23 10:46:24	2014-06-23 10:46:24	600	anagram.js
1292	46	1ac0453812856bacd1af811f	hibernating	python	bob	import re\n\nclass Bob(object):\n\t\n\tdef hey(self, msg):\n\t\tif msg is None or len(msg.strip()) == 0:\n\t\t\treturn 'Fine. Be that way!'\n\t\telif re.search('[a-z]', msg) is None:\n\t\t\treturn 'Woah, chill out!'\n\t\telif re.match('^.*\\?$', msg):\n\t\t\treturn 'Sure.'\n\t\treturn 'Whatever.'	\N	f	4	1	2014-06-26 01:34:38	2014-06-26 01:34:38	601	bob.py
1293	46	22640d11ba32312dbf3a176b	superseded	haskell	binary	module Binary ( toDecimal\n              ) where\n\nimport Data.Maybe(fromMaybe)\n\ntoDecimal ::  String -> Integer\ntoDecimal = sum . zipWith (*) digitValues . reverse . fromMaybe [] . toDigits\n\ndigitValues ::  [Integer]\ndigitValues = 1 : map (*2) digitValues\n\ntoDigits ::  String -> Maybe [Integer]\ntoDigits = sequence . map toDig\n    where toDig '0' = Just 0\n          toDig '1' = Just 1\n          toDig  _  = Nothing	\N	f	3	1	2014-06-16 05:14:58	2014-06-16 05:14:58	602	Binary.hs
1294	46	bfdf9bbe4105b64b8833f039	done	haskell	binary	module Binary ( toDecimal\n              ) where\n\nimport Data.Maybe(fromMaybe)\nimport Data.List(foldl')\n\ntoDecimal ::  String -> Integer\ntoDecimal = foldl' handleDigit 0 . fromMaybe [] . toDigits\n    where handleDigit soFar digit = soFar * 2 + digit\n\ntoDigits ::  String -> Maybe [Integer]\ntoDigits = mapM toDig\n    where toDig '0' = Just 0\n          toDig '1' = Just 1\n          toDig  _  = Nothing	\N	f	4	3	2014-06-23 22:21:46	2014-06-23 22:21:46	602	Binary.hs
1295	46	5dd533bba6b4e73c3f395c7f	superseded	haskell	binary	module Binary ( toDecimal\n              ) where\n\nimport Data.Maybe(fromMaybe)\nimport Data.List(foldl')\n\ntoDecimal ::  String -> Integer\ntoDecimal = foldl' handleDigit 0 . fromMaybe [] . toDigits\n    where handleDigit soFar digit = soFar * 2 + digit\n\ntoDigits ::  String -> Maybe [Integer]\ntoDigits = sequence . map toDig\n    where toDig '0' = Just 0\n          toDig '1' = Just 1\n          toDig  _  = Nothing	\N	f	2	2	2014-06-25 22:45:37	2014-06-25 22:45:37	602	Binary.hs
1296	46	3435d5e8cc89166e7e9e4046	pending	ruby	hamming	class Hamming\n\n\tdef self.compute(a,b)\n\t\tcounter = 0\n\t\tcomparison_strand = choose(a,b)\n\n\t\tcomparison_strand.each_char.each_with_index do |current_a,index|\n\t\t\tcounter = counter+1 if current_a != b[index] \n\t\tend\n\t\t\n\t\tcounter\n\tend\n\t\n\tprivate \n\tdef self.choose(a,b)\n\t\ta.length <= b.length ? a : b\n\tend\n\nend	\N	f	1	1	2014-06-29 05:54:11	2014-06-29 05:54:11	603	hamming.rb
1297	46	0682e91bf4bb5d49bad41c3f	hibernating	clojure	grade-school	(ns school)\n\n(defn grade [db in-grade]\n  (db in-grade []))\n\n(defn add [db name in-grade]\n  (assoc db in-grade\n         (conj (grade db in-grade) name)))\n\n(defn sorted [db]\n  (into\n    (sorted-map)\n    (map\n      (fn [[in-grade names]]\n        (vector in-grade (into (vector) (sort names))))\n      db)))	\N	f	4	1	2014-06-15 20:41:25	2014-06-15 20:41:25	604	school.clj
1298	46	acc20f0229b328a2c28d18aa	pending	go	rna-transcription	package strand\n\nvar rna = map[rune]rune{\n\t'C': 'G',\n\t'G': 'C',\n\t'A': 'U',\n\t'T': 'A',\n}\n\nfunc ToRna(s string) string {\n\n\tout := make([]rune, len(s))\n\tfor i, c := range s {\n\t\tout[i] = rna[c]\n\t}\n\n\treturn string(out)\n}	\N	f	2	1	2014-06-21 17:21:21	2014-06-21 17:21:21	605	rna_transcription.go
1299	46	55779c850fd99495dd80003e	done	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :as str]))\n\n(defn to-rna\n  "Translates DNA to RNA"\n  [dna]\n  (str/replace dna "T" "U"))	\N	f	0	1	2014-06-15 23:37:01	2014-06-15 23:37:01	606	rna-transcription.clj
1301	46	55f9bf353b8e2f86eda0c18f	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n    if year % 4 == 0 {\n        if year % 100 == 0 {\n            if year % 400 == 0 {\n                return true\n            }\n            return false\n        }\n        return true\n    }\n    return false\n}	\N	f	5	1	2014-06-15 05:55:38	2014-06-15 05:55:38	608	leap.go
1302	46	0a00ab985961672236e5b8cf	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n    if year % 4 == 0 && (year % 400 == 0 || year % 100 != 0 ) {\n        return true\n    }\n    return false\n}	\N	f	3	2	2014-06-18 23:04:54	2014-06-18 23:04:54	608	leap.go
1303	46	1f05887e8e5e996554373dc0	done	go	leap	package leap\n\n// Package calculates if a given year is a leap year\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%400 == 0 || year%100 != 0)\n}	\N	f	7	3	2014-06-27 04:32:00	2014-06-27 04:32:00	608	leap.go
1304	47	f69f8a6bc34d298f48170405	superseded	go	raindrops	// Package raindrops implements PlingPlangPlong for prime factors 3, 5, and 7.\npackage raindrops\n\nimport "fmt"\n\ntype Droplet int\n\n// Droplet takes an integer input and returns a string satisfying\n// the PlingPlangPlong interpretation of that integer as specified in the README.\nfunc Convert(n int) string {\n\tdrop := Droplet(n)\n\tresult := ""\n\n\tif drop.dividesCleanlyBy(3) {\n\t\tresult += "Pling"\n\t}\n\n\tif drop.dividesCleanlyBy(5) {\n\t\tresult += "Plang"\n\t}\n\n\tif drop.dividesCleanlyBy(7) {\n\t\tresult += "Plong"\n\t}\n\n\tif 0 == len(result) {\n\t\tresult = fmt.Sprintf("%d", n)\n\t}\n\n\treturn result\n}\n\n// This doesn't actually test for primeness but it passes the test suite for\n// the prime inputs we're giving it.\nfunc (d *Droplet) dividesCleanlyBy(f int) bool {\n\treturn int(*d)%f == 0\n}	\N	f	2	1	2014-05-12 03:12:48	2014-05-12 03:12:48	609	raindrops.go
1306	47	0ef2810674ecf9541b540f3b	done	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [a b]\n  (apply +\n         (map #(if (= %1 %2) 0 1)\n              a\n              b)))	\N	f	0	1	2014-05-18 21:04:21	2014-05-18 21:04:21	610	point-mutations.clj
1307	47	cfde317e3c7c16c46244b545	superseded	ruby	point-mutations	class DNA\n  def initialize(dna_strand)\n    @dna_strand = dna_strand\n  end\n\n  def hamming_distance(mutated)\n    hamming_distance = 0\n    strand_length = [@dna_strand.length, mutated.length].min\n    @dna_strand.chars.each_with_index do |nucleotide, i|\n      break if i == strand_length\n      hamming_distance += 1 unless nucleotide == mutated[i]\n    end\n\n    hamming_distance\n  end\nend	\N	f	2	1	2014-06-10 17:59:55	2014-06-10 17:59:55	611	point-mutations.rb
1308	47	cf0fd2f39450b0e8ed721bba	superseded	ruby	point-mutations	class DNA\n  def initialize(dna_strand)\n    @dna_strand = dna_strand\n  end\n\n  def hamming_distance(mutated)\n    dna_chars_zipped_with(mutated).reduce(0) do |distance, (dna, mut)|\n      dna == mut ? distance : distance + 1 \n    end\n  end\n\n  private\n\n  def dna_chars_zipped_with(mutated)    \n    strand_length = [@dna_strand.length, mutated.length].min\n\n    dna_chars = @dna_strand.chars.take(strand_length)\n    mutated_chars = mutated.chars.take(strand_length)\n\n    dna_chars.zip mutated_chars\n  end\nend	\N	f	2	2	2014-06-19 09:05:48	2014-06-19 09:05:48	611	point-mutations.rb
1309	47	bca1d0621f76008d3d878f83	done	ruby	point-mutations	class DNA\r\n  def initialize(dna_strand)\r\n    @dna_strand = dna_strand\r\n  end\r\n\r\n  def hamming_distance(mutated)\r\n    dna_chars_zipped_with(mutated).count{ |dna, mut| dna != mut }\r\n  end\r\n\r\n  private\r\n\r\n  def dna_chars_zipped_with(mutated)    \r\n    strand_length = [@dna_strand.length, mutated.length].min\r\n\r\n    dna_chars = @dna_strand.chars.take(strand_length)\r\n    mutated_chars = mutated.chars.take(strand_length)\r\n\r\n    dna_chars.zip mutated_chars\r\n  end\r\nend\r	\N	f	1	3	2014-06-29 18:19:42	2014-06-29 18:19:42	611	point-mutations.rb
1310	47	86ec67064cd5a024e7781801	pending	ruby	strain	class Array\n\n  def keep(&block)\n    self.each_with_object([]) { |item, results| results << item if block.call(item) }\n  end\n\n  def discard(&block)\n    self.each_with_object([]) { |item, results| results << item unless block.call(item) }\n  end\n\nend	\N	f	0	1	2014-05-20 19:43:32	2014-05-20 19:43:32	612	array.rb
1311	47	c9ce6e6cd32b1cd5b0ad47be	hibernating	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn yelling? [str] (and (re-find #"[A-Z]+" str) (not (re-find #"[a-z]+" str))))\n(defn question? [str] (= \\? (last (string/trim str))))\n\n(defn response-for [str]\n  (cond\n   (yelling? str) "Woah, chill out!"\n   (question? str) "Sure."\n   (string/blank? str) "Fine. Be that way!"\n   :else "Whatever."))	\N	f	1	2	2014-05-13 09:25:52	2014-05-13 09:25:52	613	bob.clj
1312	47	6d75c7799d9a3713deab4e52	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn yelling? [str] (and (re-find #"[A-Z]+" str) (not (re-find #"[a-z]+" str))))\n(defn question? [str] (re-find #"\\?$" str))\n\n(defn response-for [str]\n  (cond\n   (yelling? str) "Woah, chill out!"\n   (question? str) "Sure."\n   (string/blank? str) "Fine. Be that way!"\n   :else "Whatever."))	\N	f	1	1	2014-06-12 21:07:22	2014-06-12 21:07:22	613	bob.clj
1313	47	512188c31fbd678c5d8dc65f	done	javascript	point-mutations	(function () {\n    "use strict";\n\n    var DNA = function (dna) {\n        this.dna = dna;\n    };\n    DNA.prototype.hammingDistance = function (dna) {\n        var distance = 0,\n            dnaLength = Math.min(this.dna.length, dna.length);\n\n        for (var i = 0; i < dnaLength; i += 1) {\n            if (this.dna[i] !== dna[i]) {\n                distance += 1;\n            }\n        }\n\n        return distance;\n    };\n\n    module.exports = DNA;\n})();	\N	f	0	1	2014-05-18 20:53:16	2014-05-18 20:53:16	614	point-mutations.js
1314	47	8b88c4eb324c4b3372c18b17	hibernating	ruby	grains	class Grains\n  def square(n)\n    2**(n-1)\n  end\n\n  def total\n    (1..64).map{|x| square(x)}.inject(:+)\n  end\nend	\N	f	5	1	2014-05-31 23:29:10	2014-05-31 23:29:10	615	grains.rb
1315	47	79b7cae2a1fae506c4bbd858	pending	go	hamming	package hamming\n\nfunc Distance(strandA, strandB string) int {\n\tif len(strandA) > len(strandB) {\n\t\treturn countDiffs(strandB, strandA)\n\t} else {\n\t\treturn countDiffs(strandA, strandB)\n\t}\n}\n\nfunc countDiffs(smallest, longest string) int {\n\tdifferences := 0\n\tfor i, _ := range smallest {\n\t\tif smallest[i] != longest[i] {\n\t\t\tdifferences++\n\t\t}\n\t}\n\treturn differences\n}	\N	f	1	1	2014-06-03 13:24:00	2014-06-03 13:24:00	616	hamming.go
1316	47	27bbf86d8c1ef7d83c521f92	superseded	ruby	sieve	require 'pry'\nclass Sieve\n  attr_reader :maximum \n\n  def initialize(maximum)\n    @maximum = maximum\n  end\n\n  def primes\n   numbers = (2..maximum).to_a\n   primes = []\n    while numbers.any?\n     primes << (contender = numbers.shift)\n      #binding.pry\n     numbers.reject! { |input| input % contender == 0 }\n    end\n   primes\n  end\nend	\N	f	1	1	2014-05-18 00:33:30	2014-05-18 00:33:30	617	sieve.rb
1317	47	dcbf37ceb649211a6e47f80c	superseded	ruby	sieve	class Sieve\n  attr_reader :maximum \n\n  def initialize(maximum)\n    @maximum = maximum\n  end\n\n  def primes\n   numbers = (2..maximum).to_a\n   primes = []\n    while numbers.any?\n     primes << (contender = numbers.shift)\n     numbers.reject! { |input| input % contender == 0 }\n    end\n   primes\n  end\nend	\N	f	0	2	2014-06-04 22:07:51	2014-06-04 22:07:51	617	sieve.rb
1318	47	e763665055f8c0a0013a4af6	done	ruby	sieve	class Sieve\n  attr_reader :range\n\n  def initialize(maximum)\n    @range = (2..maximum).to_a\n  end\n\n  def primes\n   primes = []\n    while range.any?\n     primes << (contender = range.shift)\n     range.reject! { |input| input % contender == 0 }\n    end\n   primes\n  end\nend	\N	f	2	3	2014-06-16 00:15:59	2014-06-16 00:15:59	617	sieve.rb
1319	47	9a476fc4d51c33a47fc4c490	superseded	haskell	largest-series-product	module Series (digits, slices, largestProduct) where\n\nimport Data.Char (digitToInt)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\nslices :: Int -> String -> [[Int]]\nslices n s = map digits $ consecutives n s\n\nconsecutives n [] = []\nconsecutives n s@(_:xs) = filter (\\x -> length x == n) $ take n s : consecutives n xs\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n s =\n  case slices n s of\n    [] -> 1\n    _  -> maximum $ map (foldr (*) 1) $ slices n s	\N	f	1	1	2014-05-11 14:21:15	2014-05-11 14:21:15	618	Series.hs
1344	48	6065b95e85ac7e1fe43a4715	done	ruby	etl	class ETL\n  def self.transform(data)\n    {}.tap do |res|\n      data.each { |k,v| v.each { |w| res[w.downcase] = k }}\n    end\n  end\nend	\N	f	3	1	2014-04-18 19:03:25	2014-04-18 19:03:25	630	etl.rb
1321	47	d61a3cf2245ba0849787f43f	done	haskell	largest-series-product	module Series (digits, slices, largestProduct) where\n\nimport Data.Char (digitToInt)\nimport Data.List (tails)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\nslices :: Int -> String -> [[Int]]\nslices n s = map digits $ consecutives n s\n\nconsecutives :: Int -> String -> [String]\nconsecutives n s = take (length s - n + 1) $ map (take n) (tails s)\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n s =\n  case slices n s of\n    [] -> 1\n    _  -> maximum $ map (foldr (*) 1) $ slices n s	\N	f	1	3	2014-05-29 17:02:37	2014-05-29 17:02:37	618	Series.hs
1322	47	e09cd478bc272201c9560217	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance ::  String -> String -> Int\nhammingDistance xs ys = foldr (\\(x,y) t -> if x/=y then t+1 else t) 0 $ zip xs ys	\N	f	2	1	2014-05-22 12:35:16	2014-05-22 12:35:16	619	DNA.hs
1323	47	5e17a317592ad38060467a13	done	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance xs ys = length $ filter (==True) $ zipWith (/=) xs ys	\N	f	0	2	2014-06-07 19:32:07	2014-06-07 19:32:07	619	DNA.hs
1325	47	4e86ce08b113c744de84326c	superseded	ruby	leap	require 'date'\n\nclass Year\n  def initialize(year)\n    @year = year\n  end\n\n  def year\n    @year\n  end\n\n  def self.leap? year\n    return true if fourth_century?(year)\n    return false if century?(year)\n    return true if fourth_year?(year)\n    return false\n  end\n\n  private\n  def self.fourth_century?(year)\n    return true if year % 400 == 0\n  end\n  def self.century?(year)\n    return true if year % 100 == 0\n  end\n  def self.fourth_year?(year)\n    return true if year % 4 == 0\n  end\nend	\N	f	0	2	2014-05-24 17:42:50	2014-05-24 17:42:50	621	year.rb
1326	47	b9576e69e2f2e0ddfc34210a	superseded	ruby	leap	class Year\n  def self.leap? year\n    return true if fourth_century?(year)\n    return false if century?(year)\n    return true if fourth_year?(year)\n    return false\n  end\n\n  private\n  def self.fourth_century?(year)\n    return true if year % 400 == 0\n  end\n  def self.century?(year)\n    return true if year % 100 == 0\n  end\n  def self.fourth_year?(year)\n    return true if year % 4 == 0\n  end\nend	\N	f	2	4	2014-05-26 05:57:35	2014-05-26 05:57:35	621	year.rb
1327	47	84e26eb5e76c40a59a2074dc	superseded	ruby	leap	require 'date'\n\nclass Year < Date\n  def initialize(year)\n    @year = year\n  end\n\n  def self.year\n    @year\n  end\n\n  def leap?\n    return true if self.fourth_century?\n    return false if self.century?\n    return true if self.fourth_year?\n    return false\n  end\n\n  private\n  def century?\n    return true if self.year % 100 == 0\n  end\n  def fourth_century?\n    return true if self.year % 400 == 0\n  end\n  def fourth_year?\n    return true if self.year % 4 == 0\n  end\nend	\N	f	4	1	2014-05-26 19:33:00	2014-05-26 19:33:00	621	year.rb
1328	47	a4b962ef56a7de0f8456b04d	superseded	ruby	leap	require 'date'\n\nclass Year\n  def self.leap? year\n    return true if fourth_century?(year)\n    return false if century?(year)\n    return true if fourth_year?(year)\n    return false\n  end\n\n  private\n  def self.fourth_century?(year)\n    return true if year % 400 == 0\n  end\n  def self.century?(year)\n    return true if year % 100 == 0\n  end\n  def self.fourth_year?(year)\n    return true if year % 4 == 0\n  end\nend	\N	f	2	3	2014-06-18 13:27:48	2014-06-18 13:27:48	621	year.rb
1329	47	c53b22c5bcc593519f5999b6	hibernating	ruby	leap	class Year\n  def self.leap? year\n    return true if fourth_century?(year)\n    return true if fourth_year?(year) unless century?(year)\n    return false\n  end\n\n  private\n  def self.fourth_century?(year)\n    return true if year % 400 == 0\n  end\n  def self.century?(year)\n    return true if year % 100 == 0\n  end\n  def self.fourth_year?(year)\n    return true if year % 4 == 0\n  end\nend	\N	f	1	5	2014-06-21 16:28:40	2014-06-21 16:28:40	621	year.rb
1330	47	0d9cf7619b6d9a4352a11be1	done	python	rna-transcription	DNA_TO_RNA = {\n    'A': 'A',\n    'C': 'C',\n    'G': 'G',\n    'T': 'U',\n}\n\nclass DNA(object):\n    def __init__(self, nucleotides):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        return ''.join((DNA_TO_RNA[n] for n in self.nucleotides))	\N	f	3	1	2014-05-18 07:43:43	2014-05-18 07:43:43	622	dna.py
1331	47	64b613a2562dfaebfd756f36	done	ruby	meetup	class Meetup\n  attr_reader :start_date, :end_date, :days_in_month\n\n  DAYS_OF_THE_WEEK    = %w[monday tuesday wednesday thursday friday saturday sunday]\n  OCCURENCES_IN_WORDS = %w[first second third fourth]\n\n  def initialize(month, year)\n    @start_date    = Date.new(year, month, 1)\n    @end_date      = Date.new(year, month, -1)\n    @days_in_month = (start_date..end_date).to_a\n  end\n\n  # defines methods mondays, tuesdays, .. sundays\n  DAYS_OF_THE_WEEK.each do |day|\n    define_method "#{day}s" do\n      days_in_month.select{|d| d.send("#{day}?") }\n    end\n  end\n\n  # defines methods for first_monday, second_monday, .. \n  OCCURENCES_IN_WORDS.each_with_index do |occurence, index|\n    DAYS_OF_THE_WEEK.each do |day|\n      define_method "#{occurence}_#{day}" do\n        send("#{day}s")[index]\n      end\n    end\n  end\n\n  # defines methods for monteenth..sunteenth\n  DAYS_OF_THE_WEEK.each do |day|\n    define_method "#{day.gsub("day","")}teenth" do\n      send("#{day}s").find{|date| date.day > 12 && date.day < 20}\n    end\n  end\n\n  # defines methods last_monday..last_sunday\n  DAYS_OF_THE_WEEK.each do |day|\n    define_method "last_#{day}" do\n      send("#{day}s").last\n    end\n  end\nend	\N	f	1	1	2014-06-05 14:52:15	2014-06-05 14:52:15	623	meetup.rb
1332	47	58068a5a42fca206b58648b2	pending	go	gigasecond	package gigasecond\n\nimport (\n  "time"\n)\n\nconst (\n  Gigasecond = 1000000000000000000\n)\n\nfunc AddGigasecond(t time.Time) time.Time {\n  return t.Add(Gigasecond)\n}	\N	f	1	1	2014-06-12 06:24:32	2014-06-12 06:24:32	624	gigasecond.go
1345	48	503cb38bdd5b058eb1568a17	done	clojure	rna-transcription	(ns dna\n  (require [clojure.string :as string]))\n\n(def thymine "T")\n\n(def uracil "U")\n\n(defn to-rna [dna]\n  (string/replace dna thymine uracil))	\N	f	1	2	2014-04-29 11:09:52	2014-04-29 11:09:52	631	rna-transcription.clj
1335	48	a45dd0be6d363ae562e04acc	superseded	haskell	raindrops	module Raindrops ( convert ) where\n\nconvert :: Int -> String\nconvert n | null sounds = show n\n          | otherwise   = sounds\n  where sounds = [c | (x, cs) <- [(3, "Pling"), (5, "Plang"), (7, "Plong")]\n                    , n `rem` x == 0\n                    , c <- cs]	\N	f	0	3	2014-03-14 18:12:16	2014-03-14 18:12:16	626	Raindrops.hs
1336	48	780aa4fc57e597c72c51c599	superseded	haskell	raindrops	module Raindrops ( convert ) where\n\nconvert :: Int -> String\nconvert n | null pl_ngs = show n\n          | otherwise   = concat pl_ngs\n  where pl_ngs = [sound | (factor, sound) <- rain, n `rem` factor == 0]\n        rain = [(3, "Pling"), (5, "Plang"), (7, "Plong")]	\N	f	0	2	2014-05-13 22:42:06	2014-05-13 22:42:06	626	Raindrops.hs
1337	48	d53698d0e47d02a1eddfa2a0	superseded	haskell	raindrops	module Raindrops ( convert ) where\n\nconvert :: Int -> String\nconvert n = case pl_ngs of\n    (_:_) -> concat pl_ngs\n    []    -> show n\n  where pl_ngs = [sound | (factor, sound) <- rain, n `rem` factor == 0]\n        rain = [(3, "Pling"), (5, "Plang"), (7, "Plong")]	\N	f	1	1	2014-05-15 15:42:04	2014-05-15 15:42:04	626	Raindrops.hs
1338	48	d2c9ac8aaf758ec4e34ad4f5	done	haskell	raindrops	module Raindrops (convert) where\n\nconvert :: Int -> String\nconvert n | null pl_ngs = show n\n          | otherwise   = concat pl_ngs\n  where pl_ngs = [sound | (factor, sound) <- rain, n `rem` factor == 0]\n        rain = [(3, "Pling"), (5, "Plang"), (7, "Plong")]	\N	f	1	4	2014-05-24 18:44:33	2014-05-24 18:44:33	626	Raindrops.hs
1340	48	0b0ee7802ef8eb47fe32bbe8	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n\ntype Year  = Integer\ntype Month = Int\n\n-- Can this be made safer than indexing into a list?\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay sc wd year month =\n    let days = matchingDays wd year month in\n    case sc of\n      First  -> head days\n      Second -> days !! 1\n      Third  -> days !! 2\n      Fourth -> days !! 3\n      Last   -> last days\n      Teenth -> head . filter isTeenth $ days\n\nisTeenth :: Day -> Bool\nisTeenth d =\n    let (_, _, day) = toGregorian d in\n    13 <= day && day <= 19\n\nweekdayToInt :: Weekday -> Int\nweekdayToInt w = fromEnum w + 1\n\nmatchingDays :: Weekday -> Year -> Month -> [Day]\nmatchingDays wd year month =\n    [d | day <- [1..31],\n         let d = fromGregorian year month day,\n         let (_, _, weekDay) = toWeekDate d,\n         weekDay == weekdayToInt wd]	\N	f	1	1	2014-03-16 17:39:54	2014-03-16 17:39:54	627	meetup.hs
1341	48	9ce953029a70d7433ef08d24	done	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n\ntype Year  = Integer\ntype Month = Int\n\n-- Can this be made safer than indexing into a list?\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay sc wd year month =\n    let days = matchingDays wd year month in\n    case sc of\n      First  -> head days\n      Second -> days !! 1\n      Third  -> days !! 2\n      Fourth -> days !! 3\n      Last   -> last days\n      Teenth -> head . filter isTeenth $ days\n\nisTeenth :: Day -> Bool\nisTeenth d =\n    let (_, _, day) = toGregorian d in\n    13 <= day && day <= 19\n\nweekdayToInt :: Weekday -> Int\nweekdayToInt w = fromEnum w + 1\n\nmatchingDays :: Weekday -> Year -> Month -> [Day]\nmatchingDays wd year month =\n    [d | d <- [day 1 .. day 31],\n         let (_, _, weekDay) = toWeekDate d,\n         weekDay == weekdayToInt wd]\n    where day = fromGregorian year month	\N	f	1	3	2014-03-31 23:22:54	2014-03-31 23:22:54	627	meetup.hs
1342	48	e6198f15857232106225343e	done	haskell	say	module Say (inEnglish) where\n\nimport Control.Applicative\nimport Data.Map as M\nimport Data.Maybe\n\ninEnglish :: (Integral a, Show a) => a -> Maybe String\ninEnglish i\n  | i < 0 || i > 999999999999 = Nothing\n  | i == 0 = Just "zero"\n  | otherwise = Just $ translate rems\n  where\n    rems = go i\n      where\n        go 0 = []\n        go x = r:go q\n          where (q,r) = x `quotRem` 1000\n\ntranslate :: (Integral a, Show a) => [a] -> String\ntranslate [] = ""\ntranslate (x:xs)\n    | x == 0    = unwords $ reverse next\n    | otherwise = unwords $ reverse (hd x:next)\n  where \n    hd y \n      | q100 == 0 = basic r100\n      | r100 == 0 = unwords [basic q100, "hundred"]\n      | otherwise = unwords [basic q100, "hundred", basic r100]\n      where (q100, r100) = y `quotRem` 100\n    next = catMaybes $ zipWith g xs magnitudes\n      where g 0 x = Nothing\n            g v x = Just $ unwords [hd v, x]\n\n\n-- | Handle basic case where 0 <= i < 99\nbasic :: (Integral a, Show a) => a -> String\nbasic i = fromJust inner\n  where \n    inner\n      | i > 13 && i < 20 = (\\x -> x ++ "teen") <$> (i' - 10) `M.lookup` digits'\n      | otherwise = (i' `M.lookup` digits')\n          <|> (liftA2 up (q `M.lookup` tens')  (r `M.lookup` digits'))\n          <|> (error $ "impossible happend:" ++ show i)\n    (q,r) = i' `quotRem` 10\n    i'    = fromIntegral i\n    up x "" = x\n    up x y  = x ++ '-':y\n\ndigits' :: Map Integer String\ndigits' = M.fromList \n         [ (0, "")\n         , (1,"one")\n         , (2, "two")\n         , (3, "three")\n         , (4, "four")\n         , (5, "five")\n         , (6, "six")\n         , (7, "seven")\n         , (8, "eight")\n         , (9, "nine")\n         , (10, "ten")\n         , (11, "eleven")\n         , (12, "twelve")\n         ]\n\ntens' :: Map Integer String\ntens' = M.fromList [ (2, "twenty")\n                   , (3, "thirty")  -- I like english\n                   , (4, "forty")   --- are you kidding?\n                   , (5, "fifty")   -- really?\n                   , (6, "sixty")\n                   , (7, "seventy")\n                   , (8, "eighty")\n                   , (9, "ninety")\n                   ]\n\nmagnitudes :: [String]\nmagnitudes = \n  [ "thousand"\n  , "million"\n  , "billion"\n  ]	\N	f	1	1	2014-02-06 21:34:34	2014-02-06 21:34:34	628	Say.hs
1343	48	f078dcd5ceecf82324910480	hibernating	python	rna-transcription	# -*- coding: utf-8 -*-\n\nfrom string import maketrans\n\nclass DNA:\n    def __init__(self, dna):\n        self.dna = dna\n        self.trans_table = maketrans('T', 'U')\n\n    def to_rna(self):\n        return self.dna.translate(self.trans_table)	\N	f	3	1	2014-05-10 20:31:16	2014-05-10 20:31:16	629	rna-transcription.py
1348	48	fd8f19b850a72403fa9c0ec9	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    if @year % 400 == 0\n      true\n    elsif @year % 100 == 0\n      false\n    elsif @year % 4 == 0\n      true\n    else\n      false\n    end\n  end\nend	\N	f	2	1	2014-03-21 07:55:33	2014-03-21 07:55:33	633	leap.rb
1350	48	c1f0293b1ff9f13341747255	done	ruby	anagram	class Anagram\n  attr_reader :body\n\n  def initialize(body)\n    @body = body.downcase\n  end\n\n  def match(words)\n    words.select{|w| anagram?(w)}\n  end\n\n  def anagram?(comparison)\n    comparison = comparison.downcase\n    comparison_matches?(comparison) \n  end\n\n  private\n\n  def dups_or_different_lengths?(comparison)\n    comparison == body || comparison.length != body.length\n  end\n\n  def comparison_matches?(comparison)\n    return false if dups_or_different_lengths?(comparison)\n    comparison_chars, body_chars = to_char_sorted_array(comparison, body)\n    comparison_chars == body_chars\n  end\n\n  def to_char_sorted_array(*word)\n    word.map{|w| w.chars.sort}\n  end\nend	\N	f	1	5	2014-02-11 16:18:34	2014-02-11 16:18:34	635	anagram.rb
1351	48	626eb2e475f705f7f8eb862b	superseded	ruby	anagram	class Anagram\n  attr_reader :body\n\n  def initialize(body)\n    @body = body \n  end\n\n  def match(words)\n    words.select{|w| anagram?(w)}\n  end\n\n  def anagram?(word)\n    Comparison.new(word: word, anagram: body).result\n  end\nend\n\nclass Comparison\n\n  def initialize(attrs={})\n    @anagram = attrs[:anagram].downcase\n    @word = attrs[:word].downcase\n    build_comparison_arrays\n  end\n\n  def result\n    @word_chars == @anagram_chars and @word != @anagram\n  end\n\n  private\n\n  def build_comparison_arrays\n    @word_chars = character_array(@word)\n    @anagram_chars = character_array(@anagram)\n  end\n\n  def character_array(word)\n    character_array = word.chars.map{|c| c}.sort\n  end\nend	\N	f	1	2	2014-02-14 11:15:18	2014-02-14 11:15:18	635	anagram.rb
1352	48	68a2a276796a056e5ded7646	superseded	ruby	anagram	class Anagram\n  attr_reader :body\n\n  def initialize(body)\n    @body = body.downcase\n  end\n\n  def match(words)\n    words.select{|w| anagram?(w)}\n  end\n\n  def anagram?(comparison)\n    comparison = comparison.downcase\n    comparison_matches?(comparison) \n  end\n\n  private\n\n  def dups_or_different_lengths?(comparison)\n    comparison == body || comparison.length != body.length\n  end\n\n  def comparison_matches?(comparison)\n    return false if dups_or_different_lengths?(comparison)\n    comparison_chars = to_char_sorted_array(comparison)\n    body_chars = to_char_sorted_array(body)\n    comparison_chars == body_chars\n  end\n\n  def to_char_sorted_array(word)\n    word.chars.sort\n  end\nend	\N	f	1	4	2014-02-24 03:04:10	2014-02-24 03:04:10	635	anagram.rb
1353	48	e6fa83eae70ff2a82288b698	superseded	ruby	anagram	class Anagram\n  attr_reader :body\n\n  def initialize(body)\n    @body = body \n  end\n\n  def match(words)\n    words.select{|w| anagram?(w)}\n  end\n\n  def anagram?(word)\n    Comparison.new(word: word, anagram: body).result\n  end\nend\n\nclass Comparison\n\n  def initialize(attrs={})\n    @anagram = attrs[:anagram]\n    @word = attrs[:word]\n    build_comparison_arrays\n  end\n\n  def result\n    @word_chars == @anagram_chars and @word.downcase != @anagram.downcase\n  end\n\n  private\n\n  def build_comparison_arrays\n    @word_chars = character_array(@word.downcase)\n    @anagram_chars = character_array(@anagram.downcase)\n  end\n\n  def character_array(word)\n    character_array = word.chars.map{|c| c}.sort\n  end\nend	\N	f	0	1	2014-03-01 18:54:20	2014-03-01 18:54:20	635	anagram.rb
1354	48	7f786aba92f5bf3ab67fc945	superseded	ruby	anagram	class Anagram\n  attr_reader :body\n\n  def initialize(body)\n    @body = body.downcase\n  end\n\n  def match(words)\n    words.select{|w| anagram?(w)}\n  end\n\n  def anagram?(comparison)\n    comparison = comparison.downcase\n    return false if comparison == body\n    comparison_matches?(comparison) \n  end\n\n  private\n\n  def comparison_matches?(comparison)\n    comparison_chars = comparison.chars.sort\n    body_chars = body.chars.sort\n    comparison_chars == body_chars\n  end\nend	\N	f	1	3	2014-05-02 22:08:35	2014-05-02 22:08:35	635	anagram.rb
1355	48	a885b005f0ef447489535fcb	done	ruby	trinary	class Trinary\n  attr_accessor :string_value\n\n  BASE_VALUE = 3\n\n  def initialize(string_value)\n    @string_value = string_value\n  end\n\n  def to_decimal\n    digits_with_exponents.map do |digit, exponent|\n      digit * (BASE_VALUE ** exponent)\n    end.reduce(&:+)\n  end\n\n  def digits_with_exponents\n    string_value.chars.to_a.reverse.each_with_index.map do |digit, exponent|\n      [digit.to_i, exponent]\n    end\n  end\nend	\N	f	1	1	2014-02-25 22:14:46	2014-02-25 22:14:46	636	trinary.rb
1356	48	1ab738e04ccfb9cf4d3f38f4	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Text.Lazy as T\n\nisQuestion message =\n  T.last message == '?'\n\nisSilent message =\n  T.null $ T.strip message\n\nisShout message =\n  T.toUpper message == message\n\nresponseFor message\n  | isSilent    words = "Fine. Be that way."\n  | isShout     words = "Woah, chill out!"\n  | isQuestion  words = "Sure."\n  | otherwise         = "Whatever."\n  where words = (T.pack message)	\N	f	0	2	2014-02-13 05:11:17	2014-02-13 05:11:17	637	bob.hs
1398	31	9113c2e5af2c5273cf1bddff	done	ruby	roman-numerals	class Fixnum\n\n  ROMANS = {\n    1000 =>  'M', 900 => 'CM', 500 =>  'D', 400 => 'CD',\n     100 =>  'C',  90 => 'XC',  50 =>  'L',  40 => 'XL',\n      10 =>  'X',   9 => 'IX',   5 =>  'V',   4 => 'IV',\n       1 =>  'I'\n  }\n\n  def to_roman\n    x = self\n    ROMANS.inject("") do |s, o|\n      while x >= o[0]\n        x -= o[0]\n        s += o[1]\n      end; s\n    end\n  end\nend	\N	f	3	1	2014-03-12 07:01:59	2014-03-12 07:01:59	657	roman-numerals.rb
1358	48	593606d2b34e38ff51bc0e56	done	haskell	bob	module Bob (responseFor) where\nimport Data.Text.Lazy as T\n\nresponseFor message\n  | isSilent   = "Fine. Be that way."\n  | isShout    = "Woah, chill out!"\n  | isQuestion = "Sure."\n  | otherwise  = "Whatever."\n  where words  = (T.pack message)\n        isQuestion = T.last words == '?'\n        isSilent   = T.null $ T.strip words\n        isShout    = T.toUpper words == words	\N	f	3	3	2014-06-24 06:32:10	2014-06-24 06:32:10	637	bob.hs
1359	48	f626e81d2bafb3fd970ce830	pending	perl5	scrabble-score	package Word;\n\nuse strict;\nuse warnings;\n\nuse List::AllUtils qw/ sum /;\n\nour %scores = (\n 1 => [ qw/ A E I O U L N R S T / ],\n 2 => [ qw/ D G / ],\n 3 => [ qw/ B C M P / ],\n 4 => [ qw/ F H V W Y / ],\n 5 => [ qw/ K / ],\n 8 => [ qw/ J X / ],\n 10=> [ qw/ Q Z / ],\n);\n\nour %letter_score = map {\n    my $p = $_;\n    map { $_ => $p } @{$scores{$p}}\n} keys %scores;\n\nsub new {\n    my( $class, $word ) = @_;\n    $word = uc $word;\n    bless \\$word, $class;\n}\n\nsub score {\n    my( $self, %mod ) = @_;\n\n    no warnings qw/ uninitialized /;\n\n    return( \n        2 ** $mod{double} * 3 ** $mod{triple}\n        * sum 0, map { $letter_score{$_} } $$self =~ /([A-Z])/g\n    );\n}\n\n1;	\N	f	1	1	2014-03-18 22:18:31	2014-03-18 22:18:31	638	Word.pm
1360	48	cbdd17b4d3d936ffeaafa399	done	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\r\n\r\ntype Seconds = Float\r\ntype Years   = Float\r\ndata Planet  = Earth | Mercury | Venus | Mars | Jupiter\r\n                     | Saturn | Uranus | Neptune\r\n\r\nageOn :: Planet -> Seconds -> Years\r\nageOn planet seconds = seconds / orbitalPeriod\r\n  where\r\n    orbitalPeriod  = relativePeriod * earthPeriod\r\n    earthPeriod    = 31557600\r\n    relativePeriod =\r\n        case planet of\r\n             Earth   -> 1\r\n             Mercury -> 0.2408467\r\n             Venus   -> 0.61519726\r\n             Mars    -> 1.8808158\r\n             Jupiter -> 11.862615\r\n             Saturn  -> 29.447498\r\n             Uranus  -> 84.016846\r\n             Neptune -> 164.79132	\N	f	0	1	2014-04-03 11:11:38	2014-04-03 11:11:38	639	SpaceAge.hs
1361	48	f28a0d7b9e9edebafc0b1a4f	done	go	binary	package binary\n\nfunc validDigit(digit string) bool {\n\treturn digit == "1" || digit == "0"\n}\n\nfunc ToDecimal(binaryNumber string) int {\n\tdecimal := 0\n\tindex := len(binaryNumber) - 1\n\tfor power := 1; 0 <= index; index, power = index-1, 2*power {\n\t\tbinaryDigit := string(binaryNumber[index])\n\t\tif validDigit(binaryDigit) {\n\t\t\tif binaryDigit == "1" {\n\t\t\t\tdecimal += power\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\treturn decimal\n}	\N	f	0	1	2014-03-12 19:29:23	2014-03-12 19:29:23	640	binary.go
1362	48	030827104aa2d4310136bbe8	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      yelling?(input) ->\n        "Woah, chill out!"\n      question?(input) ->\n        "Sure."\n      "Any other statement" ->\n        "Whatever."\n    end\n  end\n\n  defp question?(string) do\n    String.last(string) == "?"\n  end\n\n  defp silence?(string) do\n    String.strip(string) == ""\n  end\n\n  defp yelling?(string) do\n   wordy_statement?(string) && String.upcase(string) == string\n  end\n\n  defp wordy_statement?(string) do\n    Regex.match?(%r/[[:alpha:]]+/i, string)\n  end\nend	\N	f	0	1	2014-02-23 06:08:21	2014-02-23 06:08:21	641	bob.exs
1363	48	d3c7d38726a56034fb252154	done	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      yelling?(input) ->\n        "Woah, chill out!"\n      question?(input) ->\n        "Sure."\n      "Any other statement" ->\n        "Whatever."\n    end\n  end\n\n  defp question?(string) do\n    String.last(string) == "?"\n  end\n\n  defp silence?(string) do\n    String.strip(string) == ""\n  end\n\n  defp yelling?(string) do\n   wordy_statement?(string) && String.upcase(string) == string\n  end\n\n  defp wordy_statement?(string) do\n    Regex.match?(%r/\\p{L}+/, string)\n  end\nend	\N	f	3	2	2014-04-27 13:59:56	2014-04-27 13:59:56	641	bob.exs
1364	48	c32d18db9005d6da19525138	superseded	ruby	bob	class Bob\n  def initialize\n  end\n\n  def hey(s)\n    if spaces?(s)\n      ignore\n    elsif yelling?(s)\n      yell\n    elsif question?(s)\n      answer\n    else no_letters?(s)\n      respond\n    end\n  end\n\n  private\n\n  def yelling?(c)\n    if no_letters?(c)\n      return false\n    end\n    c.each_byte do |b|\n      if b >= 97 && b <= 122\n        return false\n      end\n    end\n    return true\n  end\n\n  def no_letters?(s)\n    if s.match(/[a-zA-Z]+/).nil?\n      return true\n    else\n      return false\n    end\n  end\n\n  def spaces?(c)\n    if c.empty?\n      return true\n    end\n\n    c.each_byte do |b|\n      if b != 32\n        return false\n      end\n    end\n    return true\n  end\n\n  def question?(c)\n    if c.rindex('?') != c.length - 1\n      return false\n    else\n      return true\n    end\n  end\n\n  def respond\n    return 'Whatever.'\n  end\n\n  def ignore\n    return 'Fine. Be that way!'\n  end\n\n  def answer\n    return "Sure."\n  end\n\n  def yell\n    return 'Woah, chill out!'\n  end\n\nend	\N	f	1	1	2014-02-12 00:47:32	2014-02-12 00:47:32	642	bob.rb
1365	48	0889016e30bbfde0bbd3c093	done	ruby	bob	class Bob\n  \n  def hey(s)\n    if spaces?(s)\n      ignore\n    elsif yelling?(s)\n      yell\n    elsif question?(s)\n      answer\n    else\n      respond\n    end\n  end\n\n  private\n\n  def yelling?(c)\n    if no_letters?(c)\n      return false\n    end\n    c.each_byte do |b|\n      if b >= 97 && b <= 122\n        return false\n      end\n    end\n    true\n  end\n\n  def no_letters?(s)\n    s.match(/[a-zA-Z]+/).nil?\n  end\n\n  def spaces?(c)\n    if c.empty?\n      return true\n    end\n\n    c.each_byte do |b|\n      if b != 32\n        return false\n      end\n    end\n    true\n  end\n\n  def question?(c)\n    c.rindex('?') == c.length - 1\n  end\n\n  def respond\n    'Whatever.'\n  end\n\n  def ignore\n    'Fine. Be that way!'\n  end\n\n  def answer\n    "Sure."\n  end\n\n  def yell\n    'Woah, chill out!'\n  end\n\nend	\N	f	1	3	2014-02-17 04:03:56	2014-02-17 04:03:56	642	bob.rb
1375	31	4758bd06b66fa15ac5f8dbc0	superseded	ruby	anagram	class CharList\r\n  attr_reader :char_list, :down_word\r\n\r\n  def initialize(word)\r\n    @down_word = word.downcase\r\n    @char_list = @down_word.chars.sort\r\n  end\r\n\r\n  def matches?(otherCharList)\r\n    @down_word != otherCharList.down_word &&\r\n      @char_list == otherCharList.char_list\r\n  end\r\n\r\n  def to_s\r\n    @char_list.to_s\r\n  end\r\nend\r\n\r\nclass Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate|\r\n      char_list.matches? CharList.new candidate\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def char_list\r\n    @char_list ||= CharList.new word\r\n  end\r\nend\r	\N	f	0	5	2014-05-18 06:41:26	2014-05-18 06:41:26	645	anagram.rb
1367	48	60ced900850a63678ff56738	done	go	grade-school	package school\n\nimport "sort"\n\ntype Grade struct {\n\tg int\n\tn []string\n}\n\ntype School map[int][]string\n\nfunc New() *School {\n\ts := School{}\n\treturn &s\n}\n\nfunc (s *School) Add(n string, g int) {\n\tm := *s\n\tm[g] = append(m[g], n)\n}\n\nfunc (s *School) Grade(g int) []string {\n\treturn (*s)[g]\n}\n\nfunc (s *School) Enrollment() []Grade {\n\tm := *s\n\tgi := make([]int, len(m))\n\tgr := make([]Grade, len(m))\n\ti := 0\n\tfor g, _ := range m {\n\t\tgi[i] = g\n\t\ti++\n\t}\n\tsort.Ints(gi)\n\tfor i, g := range gi {\n\t\tn := m[g]\n\t\tsort.Strings(n)\n\t\tgr[i] = Grade{g, n}\n\t}\n\treturn gr\n}	\N	f	1	1	2014-02-20 06:00:56	2014-02-20 06:00:56	643	grade_school.go
1369	48	2ee3098160e10b7df23853fb	done	javascript	beer-song	var VerseText = {\n  bottleText: function (count) { \n    return (count == 1) ? "bottle" : "bottles";\n  },\n  verseX: function (count) { \n    var remaining = count - 1;\n    return "" + count + " bottles of beer on the wall, " + count + " bottles of beer.\\nTake one down and pass it around, " + remaining + " " + VerseText.bottleText(remaining) + " of beer on the wall.\\n";\n  }, \n  verse1: function (){ \n    return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n  },\n  verse0: function (){ \n    return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n  }\n};\n\nvar Beer = {\n  verse: function (count) { \n    if (count > 1) { \n      return VerseText.verseX(count);\n    } else if (count === 1) { \n      return VerseText.verse1();\n    } else { \n      return VerseText.verse0();\n    }\n  },\n\n  sing: function (start, end) { \n    if (!end) { end = 0; }\n    var lines = [];\n    for ( var i = start; i >= end; i-- ) {\n      lines.push( Beer.verse(i));\n    }\n    return lines.join("\\n");\n  }\n};\n\nmodule.exports = Beer;	\N	f	1	2	2014-03-23 05:34:00	2014-03-23 05:34:00	644	beer-song.js
1370	31	9b1c8f65706e1c352e29db08	done	ruby	anagram	class Word\n  def initialize(word)\n    @word = word\n  end\n\n  def matches?(other)\n    self.normalized_word != other.normalized_word &&\n      self.letters == other.letters\n  end\n\n  def normalized_word\n    @normalized_word ||= @word.downcase\n  end\n\n  def letters\n    @letters ||= normalized_word.chars.sort\n  end\nend\n\nclass Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(word_list)\n    word_list.select { |candidate|\n      word.matches? Word.new(candidate)\n    }\n  end\nend	\N	f	0	8	2014-02-09 20:32:43	2014-02-09 20:32:43	645	anagram.rb
1371	31	32a464f32e92faa408c3f8af	superseded	ruby	anagram	class Anagram\r\n    def initialize(word)\r\n        @word = word\r\n        @down_word = word.downcase\r\n        @word_char_list = char_list_from(@down_word)\r\n    end\r\n\r\n    def match(word_list)\r\n        @word_list = word_list\r\n        @anagrams = []\r\n\r\n        word_list.each do |candidate|\r\n            @anagrams.push candidate if does_match(candidate)\r\n        end\r\n\r\n        @anagrams\r\n    end\r\n\r\n    private\r\n\r\n    def char_list_from(word)\r\n        word.chars.sort()\r\n    end\r\n\r\n    def does_match(candidate)\r\n        down_candidate = candidate.downcase\r\n        down_candidate != @down_word && char_list_from(down_candidate) == @word_char_list\r\n    end\r\nend\r	\N	f	3	1	2014-02-21 14:13:00	2014-02-21 14:13:00	645	anagram.rb
1372	31	615453b95bceffbfe4d496f5	superseded	ruby	anagram	class Anagram\n    def initialize(word)\n        @down_word = word.downcase\n        @word_char_list = char_list_from(@down_word)\n    end\n\n    def match(word_list)\n        word_list.reduce([]) do |anagrams, candidate|\n            anagrams.push(candidate) if does_match?(candidate)\n            anagrams\n        end\n    end\n\n    private\n\n    def char_list_from(word)\n        word.chars.sort()\n    end\n\n    def does_match?(candidate)\n        down_candidate = candidate.downcase\n        down_candidate != @down_word &&\n            char_list_from(down_candidate) == @word_char_list\n    end\nend	\N	f	0	2	2014-03-07 14:48:29	2014-03-07 14:48:29	645	anagram.rb
1373	31	064af7304d7b0e901fcced83	superseded	ruby	anagram	class Anagram\r\n  def initialize(word)\r\n    @down_word = word.downcase\r\n    @word_char_list = char_list_from(@down_word)\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate| does_match?(candidate) }\r\n  end\r\n\r\n  private\r\n\r\n  def char_list_from(word)\r\n    word.chars.sort\r\n  end\r\n\r\n  def does_match?(candidate)\r\n    down_candidate = candidate.downcase\r\n    down_candidate != @down_word &&\r\n      char_list_from(down_candidate) == @word_char_list\r\n  end\r\nend	\N	f	2	3	2014-03-15 22:35:03	2014-03-15 22:35:03	645	anagram.rb
1374	31	43e200dea20c9b93d0484b40	superseded	ruby	anagram	class Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    @down_word ||= word.downcase\r\n    @word_char_list ||= char_list_from(@down_word)\r\n    word_list.select { |candidate|\r\n      does_match?(candidate.downcase)\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def char_list_from(word)\r\n    word.chars.sort\r\n  end\r\n\r\n  def does_match?(down_candidate)\r\n    down_candidate != @down_word &&\r\n      char_list_from(down_candidate) == @word_char_list\r\n  end\r\nend	\N	f	0	4	2014-05-10 03:20:30	2014-05-10 03:20:30	645	anagram.rb
1396	31	46e07964d545ea197ca84148	hibernating	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) do\n      |word, counts| counts[word] += 1\n    end\n  end\nend	\N	f	11	4	2014-06-09 15:03:32	2014-06-09 15:03:32	655	word-count.rb
1377	31	a9d1791923c107a04daade69	superseded	ruby	anagram	class Word\r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def matches?(other)\r\n    self.normalized_word != other.normalized_word &&\r\n      self.letters == other.letters\r\n  end\r\n\r\n  def normalized_word\r\n    @normalized_word ||= @word.downcase\r\n  end\r\n\r\n  def letters\r\n    @letters ||= normalized_word.chars.sort\r\n  end\r\nend\r\n\r\nclass Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate|\r\n      normalized_letters.matches? Word.new(candidate)\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def normalized_letters\r\n    @normalized_letters ||= Word.new word\r\n  end\r\nend\r	\N	f	8	7	2014-06-24 01:18:47	2014-06-24 01:18:47	645	anagram.rb
1379	31	9283bc6b6374516fd46bf954	superseded	ruby	scrabble-score	class Scrabble\n  def initialize(word_to_score)\n    @word_to_score = word_to_score\n  end\n\n  def score\n    score = 0\n    unless @word_to_score == nil\n      @word_to_score.downcase!\n      @word_to_score.scan(/./) do |letter|\n        score += score_letter(letter)\n      end\n    end\n    score\n  end\n\n  def score_letter(letter)\n    letter_score = 0\n    case\n      when letter[/(a|e|i|o|u|l|n|r|s|t)/]\n        letter_score += 1\n      when letter[/(b|c|m|p)/]\n        letter_score += 3\n      when letter[/(f|h|v|w|y)/]\n        letter_score += 4\n      when letter[/(k)/]\n        letter_score += 5\n      when letter[/(q|z)/]\n        letter_score += 10\n    end\n    letter_score\n  end\nend	\N	f	1	1	2014-02-11 03:01:10	2014-02-11 03:01:10	647	scrabble.rb
1380	31	0ed5d913fc69ba8450375b38	superseded	ruby	scrabble-score	class Scrabble\n  def initialize(word_to_score)\n    @word_to_score = word_to_score\n  end\n\n  def score\n    score = 0\n    unless @word_to_score == nil\n      @word_to_score.downcase!\n      @word_to_score.scan(/./) do |letter|\n        score += score_letter(letter)\n      end\n    end\n    score\n  end\n\n  def self.score(word_to_score)\n    Scrabble.new(word_to_score).score\n  end\n\n  private\n\n  def score_letter(letter)\n    letter_score = 0\n    case\n      when letter[/(a|e|i|o|u|l|n|r|s|t)/]\n        letter_score += 1\n      when letter[/(b|c|m|p)/]\n        letter_score += 3\n      when letter[/(f|h|v|w|y)/]\n        letter_score += 4\n      when letter[/(k)/]\n        letter_score += 5\n      when letter[/(q|z)/]\n        letter_score += 10\n    end\n    letter_score\n  end\nend	\N	f	1	2	2014-03-14 11:59:12	2014-03-14 11:59:12	647	scrabble.rb
1381	31	6ec042ab2254cd79ecd23e48	hibernating	ruby	scrabble-score	class Scrabble\n  def initialize(word_to_score)\n    @word_to_score = word_to_score\n    prepare_scoring\n  end\n\n  def score\n    score = 0\n    unless @word_to_score == nil\n      @word_to_score.downcase!\n      @word_to_score.scan(/./) do |letter|\n        score += score_letter(letter)\n      end\n    end\n    score\n  end\n\n  def self.score(word_to_score)\n    Scrabble.new(word_to_score).score\n  end\n\n  private\n\n  def score_letter(letter)\n    @score_map[letter].to_i\n  end\n\n  def prepare_scoring\n    score_map = Hash.new\n\n    ['a', 'e', 'i', 'o', 'u', 'l', 'n', 'r', 's', 't'].each do |key|\n      score_map[key] = 1\n    end\n    ['b', 'c', 'm', 'p'].each do |key|\n      score_map[key] = 3\n    end\n    ['f', 'h', 'v', 'w', 'y'].each do |key|\n      score_map[key] = 4\n    end\n    score_map['k'] = 5\n    \n    ['q', 'z'].each do |key|\n      score_map[key] = 10\n    end\n\n    @score_map = score_map\n  end\nend	\N	f	2	3	2014-04-14 09:05:47	2014-04-14 09:05:47	647	scrabble.rb
1382	31	f3cfd7faa7ecebe30e4e38b4	hibernating	ruby	grains	class Grains \n\n  def square(square_number)\n    squares[square_number]\n  end\n\n  def total\n    total = 0\n    squares.values.each do |value|\n      total = total + value\n    end\n    total\n  end\n\n  private\n\n  def squares\n    squares = Hash.new\n    value = 1\n    1.upto(64) do |i| \n      if i == 1 \n        squares[i] = 1  \n      else  \n        value = value * 2\n        squares[i] = value   \n      end\n    end\n    squares\n  end\n\nend	\N	f	1	1	2014-04-04 07:44:10	2014-04-04 07:44:10	648	grains.rb
1383	31	3fc9178c0f07a71f51c36367	hibernating	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  def initialize(seconds)\n    @seconds = seconds.to_f\n\n    {\n    earth:    1,\n    mercury:  0.24084670,\n    venus:    0.61519726,\n    mars:     1.88081580,\n    jupiter:  11.8626150,\n    saturn:   29.4474980,\n    uranus:   84.0168460,\n    neptune:  164.791320\n    }.each do |key, value|\n      eval("@#{key.to_s} = Planet.new(#{value})")\n    end\n  end\n\n  def earth_years () @seconds / 31_557_600 end\n\n  def method_missing(m)\n    planet = eval("@#{m.slice(3..-1)}")\n    planet.years_from(earth_years).round(2)\n  end\nend\n\nclass Planet\n  attr_accessor :offset\n\n  def initialize(offset) @offset = offset end\n\n  def years_from(planet) planet  / offset end\nend	\N	f	3	3	2014-03-02 02:37:30	2014-03-02 02:37:30	649	space-age.rb
1397	31	1349ac8387b97d25fa891ff5	done	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = %w(A C G T U)\n  DNA = %w(A C G T)\n\n  def initialize(dna)\n    @dna = dna.to_s.upcase.chars\n    @dna.map do |char|\n      unless DNA.include?(char)\n        raise ArgumentError\n      end\n    end\n  end\n\n  def count(nucleotide)\n    if not NUCLEOTIDES.include?(nucleotide)\n      raise ArgumentError\n    elsif DNA.include?(nucleotide)\n      nucleotide_counts[nucleotide]\n    else 0 end\n  end\n\n  def nucleotide_counts\n    hash = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    @dna.map do |char|\n      hash[char] += 1\n    end\n    hash\n  end\nend	\N	f	0	1	2014-03-10 00:01:46	2014-03-10 00:01:46	656	nucleotide-count.rb
1399	31	e20bdc1c2f7a2fe6a2069109	done	ruby	etl	class ETL\n\n  def self.transform(data)\n    result = {}\n\n    data.each do |id, characters|\n      Array(characters).each do |character|\n        result[character.downcase] = id\n      end\n    end\n\n    result\n  end\n\nend	\N	f	3	1	2014-03-20 06:17:03	2014-03-20 06:17:03	658	etl.rb
1385	31	656ce30fd9a369a41dfc2980	superseded	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  def initialize(seconds)\n    @seconds = seconds.to_f\n\n    {\n    earth:    31_557_600,\n    mercury:  0.24084670,\n    venus:    0.61519726,\n    mars:     1.88081580,\n    jupiter:  11.8626150,\n    saturn:   29.4474980,\n    uranus:   84.0168460,\n    neptune:  164.791320\n    }.each do |key, value|\n      eval("@#{key.to_s} = Planet.new(#{value})")\n    end\n  end\n\n  def earth_years () @earth.years_from(@seconds) end\n\n  def on_earth    () earth_years.round(2)        end\n\n  def method_missing(m)\n    planet = eval("@#{m.slice(3..-1)}")\n    planet.years_from(earth_years).round(2)\n  end\nend\n\nclass Planet\n  attr_accessor :offset\n\n  def initialize(offset) @offset = offset end\n\n  def years_from(planet) planet  / offset end\nend	\N	f	2	2	2014-05-24 11:39:05	2014-05-24 11:39:05	649	space-age.rb
1386	31	776504d6000a5633fc2f746a	pending	ruby	hamming	class Hamming\n  def self.compute(first,second)\n    diffs = first.each_char.with_index.select do |c,i|\n      c != second[i] unless second[i].nil?\n    end\n    diffs.count\n  end\nend	\N	f	0	1	2014-01-21 22:12:16	2014-01-21 22:12:16	650	hamming.rb
1387	31	cf90c2545dfedc5c1dbdadcc	pending	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    new(number).to_s\n  end\n\n  attr_reader :number\n  def initialize(number)\n    @number = number\n  end\n\n  def to_s\n    buffer = [pling, plang, plong]\n    buffer.compact!\n    buffer << number if buffer.empty?\n    buffer.join\n  end\n\n  def pling\n    'Pling' if number % 3 == 0\n  end\n\n  def plang\n    'Plang' if number % 5 == 0\n  end\n\n  def plong\n    'Plong' if number % 7 == 0\n  end\nend	\N	f	1	1	2014-02-18 00:19:18	2014-02-18 00:19:18	651	raindrops.rb
1388	31	5cc7b236960ad695f81f4e1f	pending	ruby	trinary	class Trinary\n\tdef initialize(s)\n\t\t# only keep s if it is all trinary.\n\t\t@ts = s.delete("012") == "" ? s : ""\n\tend\n\tdef to_decimal()\n\t\td = 0\n\t\t@ts.each_byte do |b|\n\t\t\td = d*3+b-48\n\t\tend\n\t\td\n\tend\nend	\N	f	4	1	2014-04-01 14:26:09	2014-04-01 14:26:09	652	trinary.rb
1390	31	4f1b5f7e4de8d5c81253311b	pending	ruby	meetup	class Meetup\n  TEENS = (13..19)\n\n  attr_reader :month, :year\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  def day(weekday, schedule)\n    candidates = date_candidates_for(weekday)\n    the_day = find_week.fetch(schedule).call(candidates)\n    Date.new(year, month, the_day)\n  end\n\n  private\n\n  def date_candidates_for(weekday)\n    (1..month_length).select do |date|\n      Date.new(year, month, date).public_send("#{weekday}?")\n    end\n  end\n\n  def month_length\n    Date.new(year, month, -1).day\n  end\n\n  def find_week\n    { :first  => lambda { |days| days[0] },\n      :second => lambda { |days| days[1] },\n      :third  => lambda { |days| days[2] },\n      :fourth => lambda { |days| days[3] },\n      :last   => lambda { |days| days[-1] },\n      :teenth => lambda { |days| find_teenth(days) }\n    }\n  end\n\n  def find_teenth(days)\n    days.find { |day| TEENS.include?(day) }\n  end\n\nend	\N	f	3	2	2014-04-22 13:47:17	2014-04-22 13:47:17	653	meetup.rb
1391	31	563ca0a11042e9de7a4762eb	superseded	ruby	bob	class Bob\n  def hey(sentence)\n    if sentence.to_s.empty?\n      "Fine. Be that way!"\n    elsif sentence.upcase == sentence\n      "Woah, chill out!"\n    elsif sentence[-1] == "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	5	1	2014-04-25 22:58:53	2014-04-25 22:58:53	654	bob.rb
1392	31	72fece04ba5f16280f60a18e	done	ruby	bob	class Bob\n  def hey(sentence)\n    if sentence.to_s.empty?\n      "Fine. Be that way!"\n    elsif shouting?(sentence)\n      "Woah, chill out!"\n    elsif asking?(sentence)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def shouting?(sentence)\n    sentence.upcase == sentence\n  end\n\n  def asking?(sentence)\n    sentence.end_with? "?"\n  end\nend	\N	f	0	2	2014-05-07 03:03:40	2014-05-07 03:03:40	654	bob.rb
1393	31	0748dd94ef667fee45076c70	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words = @phrase.downcase.gsub(/[^\\w\\s,]/, '').split(/[,\\s]+/)\n    words.inject(Hash.new(0)) do |count, word|\n      count[word] = count[word] + 1\n      count\n    end\n  end\nend	\N	f	0	2	2014-03-20 06:52:19	2014-03-20 06:52:19	655	word-count.rb
1394	31	244bb0bb5f9df9c7b209010d	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count = Hash.new(0)\n    words = @phrase.downcase.gsub(/[^\\w\\s,]/, '').split(/[,\\s]+/)\n    words.each do |word|\n      count[word] = count[word] + 1\n    end\n    return count\n  end\nend	\N	f	0	1	2014-05-09 07:53:43	2014-05-09 07:53:43	655	word-count.rb
1395	31	1d4468cd6800ca4330048a8d	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan(/[\\w]+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) do\n      |word, counts| counts[word] += 1\n    end\n  end\nend	\N	f	0	3	2014-05-23 10:17:45	2014-05-23 10:17:45	655	word-count.rb
1401	39	c3bdb3e10168e7fb8b7983e1	superseded	ruby	word-count	class Phrase\n\n  attr_reader  :words\n\n  def initialize words\n    @words = filter worlds \n  end\n\n  def word_count\n      words.each_with_object(Hash.new(0)) { |o, h| h[o] += 1 }       # object => o , Hash => h\n  end\n\n  private\n\n  def filter words\n    words.downcase.gsub(/[^a-z\\d\\s]/, '').split\n  end\n\nend	\N	f	5	3	2014-05-28 16:49:33	2014-05-28 16:49:33	660	word-count.rb
1402	39	dc9cbcaf88b9f873140f5672	superseded	ruby	word-count	class Phrase\n\n  attr_reader  :words\n\n  def initialize words\n    @words =  words\n  end\n\n  def word_count\n      to_array(words).each_with_object(Hash.new(0)) { |o, h| h[o] += 1 }  \n  end\n\n  private\n\n  def  to_array words\n    words.downcase.gsub(/[^a-z\\d\\s]/, '').split\n  end\n\nend	\N	f	8	4	2014-06-07 15:05:59	2014-06-07 15:05:59	660	word-count.rb
1403	39	2ad2e4b6a2aad16e78b480f6	superseded	ruby	word-count	class Phrase\n\n  attr_reader  :words\n\n  def initialize words\n    @words =  words\n  end\n\n  def word_count\n      array_of_words.each_with_object(Hash.new(0)) { |o, h| h[o] += 1 }  \n  end\n\n  private\n\n  def array_of_words\n    words.downcase.gsub(/[^a-z\\d\\s]/, '').split\n  end\n\nend	\N	f	9	5	2014-06-08 02:57:20	2014-06-08 02:57:20	660	word-count.rb
1404	39	4c97cc634d1dcde982a453bc	superseded	ruby	word-count	class Phrase\n\n  attr_reader  :words\n\n  def initialize words\n    @words = filter worlds \n  end\n\n  def word_count\n      words.each_with_object(Hash.new(0)) { |o, h| h[o] += 1 }  \n  end\n\n  private\n\n  def filter words\n    words.downcase.gsub(/[^a-z\\d\\s]/, '').split\n  end\n\nend	\N	f	4	2	2014-06-12 10:38:22	2014-06-12 10:38:22	660	word-count.rb
1405	39	5f8815fae64be102fc57be9c	superseded	ruby	word-count	class Phrase\n\n  attr_reader  :words\n\n  def initialize words\n    @words = words.downcase.gsub(/[^a-z\\d\\s]/, '').split\n  end\n\n  def word_count\n      words.each_with_object(Hash.new(0)) { |o, h| h[o] += 1 } \n  end\nend	\N	f	5	1	2014-06-15 04:04:19	2014-06-15 04:04:19	660	word-count.rb
1406	39	c6fae4c895b20462786343e3	done	ruby	word-count	class Phrase\n\n  attr_reader  :text\n\n  def initialize text\n    @text =  text\n  end\n\n  def word_count\n      words.each_with_object(Hash.new(0)) { |word, hash| hash[word] += 1 }  \n  end\n\n  private\n\n  def words\n    text.downcase.scan(/\\w+/)\n  end\n\nend	\N	f	0	7	2014-06-17 23:42:50	2014-06-17 23:42:50	660	word-count.rb
1407	39	18fd1b92cb8081a6b0cfbb59	superseded	ruby	word-count	class Phrase\n\n  attr_reader  :words\n\n  def initialize words\n    @words =  words\n  end\n\n  def word_count\n      array_of_words.each_with_object(Hash.new(0)) { |o, h| h[o] += 1 }  \n  end\n\n  private\n\n  def array_of_words\n    words.downcase.scan(/\\w+/)\n  end\n\nend	\N	f	0	6	2014-06-23 15:07:38	2014-06-23 15:07:38	660	word-count.rb
1408	39	bf9f9529db2318862d761e75	done	ruby	hamming	class Hamming\n\tdef self.compute(dna1,dna2)\n\t\thamming_difference = 0\n\t\tif dna1.size <= dna2.size\n\t\t\tdna1.split("").each_index do |index|\n\t\t\t\tif dna1[index].ord != dna2[index].ord\n\t\t\t\t\thamming_difference = hamming_difference + 1\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tdna2.split("").each_index do |index|\n\t\t\t\tif dna1[index].ord != dna2[index].ord\n\t\t\t\t\thamming_difference = hamming_difference + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n   return hamming_difference\n\tend\nend	\N	f	2	1	2014-05-28 22:18:40	2014-05-28 22:18:40	661	hamming.rb
1409	39	8bcb03f77853b1b2a541251c	done	ruby	trinary	class Trinary\n  def initialize string\n    @string = string\n  end\n\n  def to_decimal\n    digits.each_with_index\n          .map { |digit, position| digit * 3**position }\n          .reduce(:+)\n  end\n\n  def digits\n    @string.chars.map(&:to_i).reverse\n  end\nend	\N	f	0	4	2014-05-28 09:49:22	2014-05-28 09:49:22	662	trinary.rb
1410	39	039964e55488c9955026716a	superseded	ruby	trinary	class Trinary\n  def initialize trinary\n    @trinary = trinary\n  end\n\n  def to_decimal\n    digits.each_with_index\n          .map { |digit, position| digit * 3**position }\n          .reduce(:+)\n  end\n\n  def digits\n    @trinary.chars.map(&:to_i).reverse\n  end\nend	\N	f	0	3	2014-06-01 14:03:26	2014-06-01 14:03:26	662	trinary.rb
1411	39	666dbb12eb72337eaadbe61a	superseded	ruby	trinary	class Trinary\n  def initialize trinary\n    @trinary = trinary\n  end\n\n  def to_decimal\n    digits = @trinary.chars.map(&:to_i)\n\n    digits.reverse.each_with_index.map do |digit, index|\n      digit * 3 ** index\n    end.reduce(:+)\n  end\nend	\N	f	0	1	2014-06-07 16:25:33	2014-06-07 16:25:33	662	trinary.rb
1412	39	7b37b639010d445c6979b5a0	superseded	ruby	trinary	class Trinary\n  def initialize trinary\n    @trinary = trinary\n  end\n\n  def to_decimal\n    digits = @trinary.chars.map(&:to_i)\n\n    digits.reverse.each_with_index\n          .map { |digit, index| digit * 3**index }\n          .reduce(:+)\n  end\nend	\N	f	3	2	2014-06-14 13:32:15	2014-06-14 13:32:15	662	trinary.rb
1413	39	79a2daa1cc2650a116e1fca9	superseded	ruby	bob	# exercism - ruby/bob\nclass Bob\n  def hey(s)\n    s = s.delete "\\n"\n    if s.match(/^[\\s]*$/)\n      'Fine. Be that way!'\n    elsif s.match(/[A-Z]/) and (s == s.upcase)\n      'Woah, chill out!'\n    elsif s.match(/^.*\\?$/)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	4	1	2014-05-29 18:07:54	2014-05-29 18:07:54	663	bob.rb
1414	39	397ba20d60500e5aba7839f9	hibernating	ruby	bob	# exercism - ruby/bob\nclass Bob\n  def hey(s)\n    s = s.delete "\\n"\n    silent = s.match(/^[\\s]*$/)\n    shouty = (s.match(/[A-Z]/) and (s == s.upcase))\n    asking = s.match(/^.*\\?$/)\n    return 'Fine. Be that way!' if silent\n    return 'Woah, chill out!'   if shouty\n    return 'Sure.'              if asking\n    'Whatever.'\n  end\nend	\N	f	4	2	2014-06-07 02:43:59	2014-06-07 02:43:59	663	bob.rb
1415	39	f45aa471ba285f917c9228b0	pending	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(arr)\n    base_word = @word.each_char.sort\n    arr.select do |word|\n      word.downcase.each_char.sort == base_word &&\n        word.downcase != @word\n    end\n  end\nend	\N	f	5	1	2014-06-10 17:22:46	2014-06-10 17:22:46	664	anagram.rb
1416	39	8e44632e348a941258332c18	hibernating	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    if evenly_divisible_by_100?\n      return evenly_divisible_by_400?\n    else\n      return evenly_divisible_by_4?\n    end\n  end\n\n  private\n\n  def evenly_divisible_by_4?\n    year % 4 == 0\n  end\n\n  def evenly_divisible_by_100?\n    year % 100 == 0\n  end\n\n  def evenly_divisible_by_400?\n    year % 400 == 0\n  end\nend	\N	f	1	2	2014-06-03 04:44:21	2014-06-03 04:44:21	665	leap.rb
1417	39	c9e6b988b7cf017fc8342862	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n   (evenly_divisible_by_100? && evenly_divisible_by_400?) || (!evenly_divisible_by_100? && evenly_divisible_by_4?)\n  end\n\n  private\n\n  def evenly_divisible_by_4?\n    year % 4 == 0\n  end\n\n  def evenly_divisible_by_100?\n    year % 100 == 0\n  end\n\n  def evenly_divisible_by_400?\n    year % 400 == 0\n  end\nend	\N	f	8	1	2014-06-14 03:10:58	2014-06-14 03:10:58	665	leap.rb
1420	39	85efdff1f84366a15705fba5	superseded	ruby	sum-of-multiples	class SumOfMultiples\n\n  def initialize(*args)\n    @args = *args\n  end\n\n  @@sum = ->(args, i) { (1..i).select { |x| x != i && ( args.any? { |y| (x % y).zero? } ) }.inject(0, :+) }\n\n  def self.to i\n    @@sum.([3,5], i)\n  end\n\n  def to i\n    @@sum.(@args, i)\n  end\n\nend	\N	f	1	1	2014-05-30 12:55:56	2014-05-30 12:55:56	668	sum.rb
1421	39	0bdcb64f526f188bf70fb939	pending	ruby	sum-of-multiples	class SumOfMultiples\n\n  def initialize(*args)\n    @args = *args\n  end\n\n  @@sum = ->(args, i) { (1...i).select { |x| args.any? { |y| (x % y).zero? } }.inject(0, :+) }\n\n  def self.to i\n    @@sum.([3,5], i)\n  end\n\n  def to i\n    @@sum.(@args, i)\n  end\n\nend	\N	f	0	2	2014-06-03 09:39:27	2014-06-03 09:39:27	668	sum.rb
1422	34	771e98e199b1773283161085	pending	ruby	accumulate	class Array\n  def accumulate\n    each_with_object(self.class.new) { |item, result| result << yield(item) }\n  end\nend	\N	f	1	1	2014-05-12 13:36:59	2014-05-12 13:36:59	669	array.rb
1423	34	cfa57695b22e380aa56a2a42	done	ruby	etl	module ETL\n  def self.transform(old)\n    old.each.with_object({}) do |(score, letters), new|\n      letters.each do |letter|\n        new[letter.downcase] = score\n      end\n    end\n  end\nend	\N	f	3	1	2014-03-26 06:27:46	2014-03-26 06:27:46	670	etl.rb
1425	34	dcbb7454cb5cc33126d18d5d	done	ruby	gigasecond	class Gigasecond\n  GIGASECOND = 1_000_000_000\n\n  def initialize(start_date)\n    @start_time = start_date.to_time\n  end\n\n  def date\n    (start_time + GIGASECOND).to_date\n  end\n\nprivate\n  attr_reader :start_time\nend	\N	f	1	2	2014-03-28 17:27:49	2014-03-28 17:27:49	672	gigasecond.rb
1426	34	f6f03ec2c417b40c1a90e40a	superseded	ruby	gigasecond	class Gigasecond\n  GIGASECOND_IN_DAYS = 1_000_000_000 / (60 * 60 * 24)\n\n  def initialize(start_date)\n    @start_date = start_date\n  end\n\n  def date\n    start_date + GIGASECOND_IN_DAYS\n  end\n\nprivate\n  attr_reader :start_date\nend	\N	f	1	1	2014-05-18 14:19:06	2014-05-18 14:19:06	672	gigasecond.rb
1427	34	4b8d4e53c3b140c595fdadf8	done	ruby	bob	class Bob\n\n  REPONSES = {\n    empty: "Fine. Be that way!",\n    yieling: 'Woah, chill out!',\n    question: "Sure."\n  }\n\n  def hey what\n    text_type =  Analiser.string_type what\n    REPONSES.fetch text_type, "Whatever."\n  end\nend\n\nmodule Analiser\n\n  def self.string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def self.empty? text\n    text.strip == ''\n  end\n\n  def self.yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def self.question? text\n    text[-1]['?']\n  end\nend	\N	f	2	6	2014-04-13 14:44:56	2014-04-13 14:44:56	673	bob.rb
1428	34	41fbb47978f04833a452f41e	superseded	ruby	bob	class Bob\n\n  REPONSE = {\n    empty: "Fine. Be that way!",\n    yieling: 'Woah, chill out!',\n    question: "Sure."\n  }\n\n  def hey what\n    text_type =  Analiser.string_type what\n    REPONSES.fetch text_type, "Whatever."\n  end\nend\n\nmodule Analiser\n\n  def self.string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def self.empty? text\n    text.strip == ''\n  end\n\n  def self.yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def self.question? text\n    text[-1]['?']\n  end\nend	\N	f	2	5	2014-05-02 05:33:11	2014-05-02 05:33:11	673	bob.rb
1429	34	0399ede49fa3fded88eacb0b	superseded	ruby	bob	class Bob\n  def hey what\n    what = what.gsub(/\\d/, '')\n    return "Fine. Be that way!" if what.gsub(' ', '') == ''\n\n    if what =~ /\\w/ && what == what.upcase \n      'Woah, chill out!'\n    else \n      if what[-1]['?']\n        "Sure."\n      else\n        "Whatever."\n      end\n    end\n  end\nend	\N	f	4	1	2014-05-05 02:51:07	2014-05-05 02:51:07	673	bob.rb
1430	34	b0d5c32e974bf7a3013508f0	superseded	ruby	bob	class Bob\n  def hey what\n    case Analiser.string_type what\n    when :empty then "Fine. Be that way!"\n    when :yieling then 'Woah, chill out!'\n    when :question then "Sure."\n    else "Whatever."\n    end\n  end\nend\n\nmodule Analiser\n\n  def self.string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def self.empty? text\n    text.strip == ''\n  end\n\n  def self.yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def self.question? text\n    text[-1]['?']\n  end\nend	\N	f	5	4	2014-05-19 16:29:56	2014-05-19 16:29:56	673	bob.rb
1431	34	4f510e173dc4bcb89b393bd0	superseded	ruby	bob	class Bob\n  def hey what\n    what = what.gsub(/\\d/, '')\n\n    case\n    when what.strip == '' then "Fine. Be that way!"\n    when what =~ /\\w/ && what == what.upcase then 'Woah, chill out!'\n    when what[-1]['?'] then "Sure."\n    else "Whatever."\n    end\n  end\nend	\N	f	3	2	2014-05-25 02:17:17	2014-05-25 02:17:17	673	bob.rb
1433	34	483d6f19e0ea7471d3ade1f5	done	ruby	prime-factors	class PrimeFactors\n  def self.for(num)\n    return [] if num == 1\n    factor = (2..num).find { |x| num % x == 0 }\n    [factor] + self.for(num / factor)\n  end\nend	\N	f	1	1	2014-04-08 11:03:47	2014-04-08 11:03:47	674	prime-factors.rb
1434	34	ec70c0f9dc810c042d98a22f	done	ruby	rna-transcription	class DeoxyribonucleicAcid < String\n  def initialize(dna)\n    super\n    @dna = dna\n  end\n\n  def to_rna\n    RibonucleicAcid.new(@dna.gsub('T','U'))\n  end\nend\n\nclass RibonucleicAcid < String\n  def initialize(rna)\n    super\n    @rna = rna\n  end\nend\n\n# ...okay.	\N	f	3	1	2014-05-05 06:32:30	2014-05-05 06:32:30	675	rna-transcription.rb
1435	34	5018bd7a21b3be47c2f83e08	done	ruby	word-count	class Phrase\n  attr_reader :sentence\n\n  def initialize(sentence)\n    @sentence = sentence.downcase\n  end\n\n  def words\n    sentence.scan(/[a-zA-Z0-9']+/)\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, result|\n      result[word] += 1\n    end\n  end\nend	\N	f	2	1	2014-05-24 10:10:27	2014-05-24 10:10:27	676	phrase.rb
1436	34	f8bb00902a9a7ee6ab4caf3d	superseded	ruby	grains	class Grains\n\n  def total\n    total = 0\n    Array(1..64).each do |n|\n      total+= square(n)\n    end\n    total\n  end\n\n  def square(n)\n    1 << n-1\n  end\nend	\N	f	0	1	2014-04-09 13:25:04	2014-04-09 13:25:04	677	grains.rb
1437	34	a996bd9d56a5a0e4321abfa3	pending	ruby	grains	class Grains\n\n  def total\n    (1..64).reduce { |acc, n| acc + square(n) }\n  end\n\n  def square(n)\n    1 << n-1\n  end\nend	\N	f	3	2	2014-04-13 05:48:43	2014-04-13 05:48:43	677	grains.rb
1438	34	6d1a0f1351646af78e395719	pending	ruby	clock	class Clock\n  attr_accessor :time\n\n  def self.at(*ints)\n    self.new Time.new(1, 1, 1, *ints)\n  end\n\n  def initialize(time)\n    @time = time\n  end\n\n  def +(mins)\n    self.time += (60 * mins)\n    self\n  end\n\n  def -(mins)\n    self.time -= (60 * mins)\n    self\n  end\n\n  def ==(other_clock)\n    self.to_s == other_clock.to_s\n  end\n\n  def to_s\n    self.time.strftime("%H:%M")\n  end\nend	\N	f	1	1	2014-04-27 06:24:00	2014-04-27 06:24:00	678	clock.rb
1440	34	c277cdb91d80576f673a1d05	done	ruby	grade-school	class School\n  \n  def initialize\n    @db = {}\n    @db.extend(SortedKeys)\n  end\n\n  def add(name, grade)\n    @db[grade] = [] if @db[grade].nil?\n    @db[grade].push(name)\n    @db[grade] = @db[grade].sort\n  end\n\n  def to_hash\n    @db.to_hash\n  end\n\n  def grade(g)\n    (@db[g] || []).sort\n  end\n\n  module SortedKeys\n    def keys\n      super.sort\n    end\n  end\n\nend\no	\N	f	2	1	2014-04-01 23:01:16	2014-04-01 23:01:16	680	school.rb
1441	36	e47f63032396fcf0929cc5be	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, tally|\n      tally[word] += 1\n    }\n  end\n\n  private\n\n  def words\n    extract_words(phrase)\n  end\n\n  def extract_words(phrase)\n    normalise(phrase).split\n  end\n\n  def normalise(phrase)\n    phrase.gsub(/[^[:alnum:] ]/, '').downcase\n  end\nend	\N	f	1	2	2014-02-25 14:51:36	2014-02-25 14:51:36	681	word-count.rb
1442	36	20f2d376ac0d26e53231fefc	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    word_tally = Hash.new(0)\n    words.each do |word|\n      word_tally[word] += 1\n    end\n    word_tally\n  end\n\n  private\n\n  def words\n    words_list = extract_words(phrase)\n    normalize(words_list)\n  end\n\n  def extract_words(phrase)\n    phrase.gsub(/[^[:alnum:] ]/, '').split\n  end\n\n  def normalize(words_list)\n    words_list.map { |word|\n      word.downcase\n    }\n  end\nend	\N	f	1	1	2014-03-16 15:25:21	2014-03-16 15:25:21	681	word-count.rb
1443	36	7e2f92b5d76da05fe65b5b58	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, tally|\n      tally[word] += 1\n    }\n  end\n\n  private\n\n  def words\n    extract_words(phrase)\n  end\n\n  def extract_words(phrase)\n    normalise(phrase).scan(/w+/)\n  end\n\n  def normalise(phrase)\n    phrase.downcase\n  end\nend	\N	f	1	3	2014-04-29 07:55:36	2014-04-29 07:55:36	681	word-count.rb
1444	36	ce4c5adf8d19d135503fea95	done	ruby	word-count	class Phrase\n  attr_reader :phrase\n  def initialize(new_phrase)\n    @phrase = new_phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, tally|\n      tally[word] += 1\n    }\n  end\n\n  private\n\n  def words\n    extract_words(phrase)\n  end\n\n  def extract_words(phrase)\n    normalise(phrase).scan(/\\w+/)\n  end\n\n  def normalise(phrase)\n    phrase.downcase\n  end\nend	\N	f	5	4	2014-05-27 01:55:21	2014-05-27 01:55:21	681	word-count.rb
1445	36	892a86c14a23d234edc14ae1	superseded	ruby	etl	class ETL\n  def self.transform(input)\n    input.each_with_object({}) do |(num, words), new_scores|\n      words.each { |word| new_scores[word.downcase] = num }\n    end\n  end\nend	\N	f	3	6	2014-02-19 00:21:53	2014-02-19 00:21:53	682	etl.rb
1446	36	0c6f97637406506a5c395133	superseded	ruby	etl	class ETL\n  def self.transform(input)\n    input.each_with_object({}) do |(score, chars), new_scores|\n      chars.each { |char| new_scores[char.downcase] = score }\n    end\n  end\nend	\N	f	3	7	2014-03-12 08:30:51	2014-03-12 08:30:51	682	etl.rb
1447	36	e789ecc1ffd296bcaffbcdfb	done	ruby	etl	class ETL\n  def self.transform(input)\n    input.each_with_object({}) do |(score, letters), output|\n      letters.each { |letter| output[letter.downcase] = score }\n    end\n  end\nend	\N	f	5	8	2014-05-07 16:04:22	2014-05-07 16:04:22	682	etl.rb
1448	36	de6e8ec55ebb4037fab16070	superseded	ruby	etl	class ETL\n\n  def self.transform(input)\n    new(input).transform\n  end\n\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def transform\n    hash = {}\n    input.each do |num, words|\n      words.each do |word|\n        hash[word.downcase] = num\n      end\n    end\n    hash\n  end\n\nend	\N	f	2	1	2014-05-15 11:13:10	2014-05-15 11:13:10	682	etl.rb
1450	36	f71ea3a4548bea96f9d11b05	superseded	ruby	etl	class ETL\n\n  def self.transform(input)\n    new(input).transform\n  end\n\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def transform\n    input.keys.inject({}) do |new, num|\n      input[num].each_with_object(new) do |word, new|\n        new[word.downcase] = num\n      end\n    end\n  end\n\nend	\N	f	5	2	2014-05-30 13:35:23	2014-05-30 13:35:23	682	etl.rb
1451	36	804a14824a1cc147609c6637	superseded	ruby	etl	class ETL\n\n  def self.transform(input)\n    new(input).transform\n  end\n\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def transform\n    input.keys.inject({}) do |new, num|\n      add_words_to_hash(new, num)\n    end\n  end\n\n  def add_words_to_hash(new, num)\n    input[num].each_with_object(new) do |word, new|\n      new[word.downcase] = num\n    end\n  end\n\nend	\N	f	7	3	2014-06-08 04:15:16	2014-06-08 04:15:16	682	etl.rb
1452	36	58615a8cf174befa353cd01e	superseded	ruby	etl	class ETL\n\n  def self.transform(input)\n    new(input).transform\n  end\n\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def transform\n    input.each_with_object({}) do |(num, words), new_scores|\n      words.each { |word| new_scores[word.downcase] = num }\n    end\n  end\nend	\N	f	3	5	2014-06-16 20:05:13	2014-06-16 20:05:13	682	etl.rb
1453	36	bb74bf061ffafcea515e009e	pending	ruby	accumulate	class Array\n  def accumulate(&operation)\n    self.reduce([]) { |result, item| result << operation.(item) }\n  end\nend	\N	f	1	1	2014-03-07 23:25:14	2014-03-07 23:25:14	683	array.rb
1455	36	1573fd3bd101472cf48b729d	done	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(possible_matches)\n    possible_matches.select do |match|\n      alphabetize(word) == alphabetize(match)\n    end\n  end\n\n  def alphabetize(word)\n    alphabetizations[word] ||= word.downcase.chars.sort.join\n  end\n\n  def alphabetizations\n    @alphabetizations ||= {}\n  end\nend	\N	f	1	3	2014-02-28 18:31:07	2014-02-28 18:31:07	685	anagram.rb
1456	36	a09783060d0a8bdfc8564c96	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n  def initialize(word)\n    @word = word\n  end\n\n  def match(possible_matches)\n    possible_matches.select do |match|\n      word_permutations.include?(match)\n    end\n  end\n\n  def word_permutations\n    @permutations ||= begin\n      word.downcase.chars.permutation(word.length).map(&:join)\n    end\n  end\nend	\N	f	1	1	2014-03-18 03:35:18	2014-03-18 03:35:18	685	anagram.rb
1457	36	46ae28330c7032f2b7251518	superseded	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(possible_matches)\n    possible_matches.select do |match|\n      word_permutations.include?(match)\n    end\n  end\n\n  def word_permutations\n    @permutations ||= word.downcase.chars.permutation.map(&:join)\n  end\nend	\N	f	1	2	2014-04-16 02:48:34	2014-04-16 02:48:34	685	anagram.rb
1459	36	9a62fd200225b6eb82dae260	done	ruby	beer-song	class Beer\n  def verse(quantity)\n    verse_for(bottles(quantity))\n  end\n\n  def sing(*verses)\n    start  = verses.fetch(0)\n    finish = verses.fetch(1, 0)\n    start.downto(finish).each_with_object('') do |line, lyrics|\n      lyrics << "#{verse(line)}\\n"\n    end\n  end\n\n  private\n\n  def verse_for(bottles)\n    Verse.new(bottles).to_s\n  end\n\n  def bottles(quantity)\n    Bottles.new(quantity)\n  end\nend\n\nclass Verse\n  def initialize(bottles)\n    @bottles = bottles\n  end\n\n  def to_s\n    "#{first_line}\\n#{second_line}\\n"    \n  end\n\n  private\n\n  def first_line\n    "#{@bottles.capitalize} of beer on the wall, #{@bottles} of beer."\n  end\n\n  def second_line\n    if @bottles.gone?\n      "Go to the store and buy some more, 99 bottles of beer on the wall."\n    else\n      "Take #{@bottles.unit} down and pass it around, #{@bottles.remaining} of beer on the wall."\n    end\n  end\nend\n\nclass Bottles\n  def initialize(quantity)\n    @quantity = quantity\n  end\n\n  def gone?\n    @quantity == 0\n  end\n\n  def remaining\n    Bottles.new(@quantity - 1)\n  end\n\n  def unit\n    @quantity > 1 ? 'one' : 'it'\n  end\n\n  def capitalize\n    to_s.capitalize\n  end\n\n  def to_s\n    case @quantity\n    when 1\n      '1 bottle'\n    when 0\n      'no more bottles'\n    else\n      "#{@quantity} bottles"\n    end\n  end\nend	\N	f	0	2	2014-04-18 06:34:17	2014-04-18 06:34:17	686	beer-song.rb
1460	36	be9449653c39d5a3330fdb2f	superseded	ruby	luhn	class Luhn\n  def self.create number\n    luhn = Luhn.new(number * 10)\n    number * 10 + (10 - luhn.checksum) % 10\n  end\n\n  def initialize number\n    @number = number\n  end\n\n  def addends\n    digits.reverse.each_with_index.map do |digit, index|\n      if index.odd?\n        digit *= 2\n        digit -= 9 if digit >= 10\n      end\n      digit\n    end.reverse\n  end\n\n  def checksum\n    addends.inject(:+)\n  end\n\n  def valid?\n    checksum % 10 == 0\n  end\n\n  private\n\n  def digits\n    @number.to_s.chars.map(&:to_i)\n  end\nend	\N	f	1	2	2014-03-26 14:00:52	2014-03-26 14:00:52	687	luhn.rb
1462	36	7c4a6788de57e112a88687ea	needs_input	ruby	luhn	class Luhn\n  def self.create number\n    self.new(number*10).fix_checksum\n  end\n\n  def initialize number\n    @number = number\n  end\n\n  def addends\n    digits.reverse.each_with_index.map do |digit, index|\n      if index.odd?\n        digit *= 2\n        digit -= 9 if digit >= 10\n      end\n      digit\n    end.reverse\n  end\n\n  def checksum\n    addends.inject(:+)\n  end\n\n  def correct_checksum\n    (10 - self.checksum) % 10\n  end\n\n  def fix_checksum\n    digits.take(digits.length-1)\n          .<<(correct_checksum)\n          .join.to_i\n  end\n\n  def valid?\n    checksum % 10 == 0\n  end\n\n  private\n\n  def digits\n    @number.to_s.chars.map(&:to_i)\n  end\nend	\N	f	0	3	2014-06-20 04:09:07	2014-06-20 04:09:07	687	luhn.rb
1463	36	3023cc2111734783e69156c1	hibernating	ruby	hamming	class Hamming\n  \n  class << self\n    \n    def compute(str1, str2)\n      prepare_globals(str1, str2)\n      compare_dna\n      calculate_dna_differences\n    end\n\n    private\n\n    def prepare_globals(str1, str2)\n      @result = []\n      @sum = 0\n      @dna1 = arrify_string(str1)\n      @dna2 = second_string_sized_to_match(@dna1, arrify_string(str2)) \n    end\n\n    def compare_dna\n       @dna1.count.times do |sequence|\n        @result[sequence] = @dna1[sequence] != @dna2[sequence] unless @dna2[sequence] == nil\n      end\n    end\n\n    def calculate_dna_differences\n      @result.map { |e| @sum += 1 if e }\n      @sum\n    end\n\n    def second_string_sized_to_match(str1, str2)\n      str2.take(str1.length)\n    end\n\n    def arrify_string(str)\n      str.split(//)\n    end\n\n  end\n\nend	\N	f	0	1	2014-03-21 08:38:34	2014-03-21 08:38:34	688	hamming.rb
1464	36	0c480ebcc435897dcae00bf5	superseded	ruby	bob	class Bob\n\n  RESPONSE = {\n    'Whatever.' => ['Tom-ay-to, tom-aaaah-to.',\n                    "Let's go make out behind the gym!",\n                    "It's OK if you don't want to go to the DMV.",\n                    'Ending with ? means a question.'],\n\n    'Woah, chill out!' => ['WATCH OUT!',\n                          'WHAT THE HELL WERE YOU THINKING?',\n                          '1, 2, 3 GO!',\n                          'ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!',\n                          'I HATE YOU'],\n\n    'Sure.' => ['Does this cryogenic chamber make me look fat?'],\n\n    'Fine. Be that way!' => []\n  }\n\n  def hey(message)\n    RESPONSE.each_key do |k|\n      return k if RESPONSE[k].include? message\n      return k if RESPONSE[k].empty?\n    end\n  end\n\nend	\N	f	1	1	2014-03-04 06:38:55	2014-03-04 06:38:55	689	bob.rb
1465	36	6cb44a30f6771c76b29a078f	hibernating	ruby	bob	class Bob\n\n  RESPONSE = {\n    'Whatever.' => ['Tom-ay-to, tom-aaaah-to.',\n                    "Let's go make out behind the gym!",\n                    "It's OK if you don't want to go to the DMV.",\n                    'Ending with ? means a question.'],\n\n    'Woah, chill out!' => ['WATCH OUT!',\n                          'WHAT THE HELL WERE YOU THINKING?',\n                          '1, 2, 3 GO!',\n                          'ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!',\n                          'I HATE YOU'],\n\n    'Sure.' => ['Does this cryogenic chamber make me look fat?'],\n\n    'Fine. Be that way!' => []\n  }\n\n  def hey(message)\n    RESPONSE.each_key do |k|\n      return k if RESPONSE[k].empty?\n      return k if RESPONSE[k].include? message\n    end\n  end\n\nend	\N	f	5	2	2014-05-14 19:59:03	2014-05-14 19:59:03	689	bob.rb
1467	36	d1d987ff25fa71ab8e5e7f86	pending	ruby	house	class House\n\n  WORDS = [\n    { :name =>"house",:desc => "that Jack built.", :action => "lay in" },\n    { :name =>"malt", :action => "ate" },\n    { :name =>"rat", :action => "killed" },\n    { :name =>"cat", :action => "worried" },\n    { :name =>"dog", :action => "tossed" },\n    { :name =>"cow", :desc => "with the crumpled horn", :action => "milked" },\n    { :name =>"maiden", :desc => "all forlorn", :action => "kissed" },\n    { :name =>"man", :desc => "all tattered and torn", :action => "married" },\n    { :name =>"priest", :desc => "all shaven and shorn", :action => "woke" },\n    { :name =>"rooster", :desc => "that crowed in the morn", :action => "kept" },\n    { :name =>"farmer", :desc => "sowing his corn", :action => "belonged to" },\n    { :name =>"horse", :desc => "and the hound and the horn", :action => "" },\n  ]\n\n  private_constant :WORDS\n\n  def self.recite\n    phrase.join "\\n"\n  end\n\n  private\n\n  def self.phrase\n    (0...WORDS.size).each_with_object([]) do |i,result|\n      result << first_line(i)\n      (i-1).downto(0).each { |j| result << second_line(j) }\n      result << ""\n    end\n  end\n\n  def self.first_line index\n    str = "This is the "\n    str << [WORDS[index][:name], WORDS[index][:desc]].compact.join(" ")\n  end\n\n  def self.second_line index\n    str = "that #{WORDS[index][:action]} the "\n    str << [WORDS[index][:name], WORDS[index][:desc]].compact.join(" ")\n  end\n\nend	\N	f	1	2	2014-03-03 03:21:32	2014-03-03 03:21:32	690	house.rb
1468	36	e5f2f1a643c1bd458d32cbc8	hibernating	ruby	leap	class Year\n\n  def self.leap?(year)\n    if year % 4 == 0\n      if year % 100 == 0\n        if year % 400 == 0\n          return true\n        end\n        return false\n      end\n      return true\n    end\n    false\n  end\n\nend	\N	f	3	1	2014-04-18 17:15:29	2014-04-18 17:15:29	691	year.rb
1470	36	d6ccd1c52e1b8ddccb0a6b24	done	ruby	series	class Series\n  \n  attr_reader :number\n  private :number\n\n  def initialize(number)\n    @number = number\n  end\n\n  def slices(amount)\n    validate_amount!(amount)\n    separate_numbers.each_cons(amount).reduce([]) { |accum, basket| accum << basket }\n  end\n\n  private\n\n    def separate_numbers\n      @separate_numbers ||= number.chars.map(&:to_i)\n    end\n\n    def validate_amount!(amount)\n      if amount > separate_numbers.size\n        raise ArgumentError, "amount of consecutive numbers cannot be\n          larger than numbers in input"\n      end\n    end\n\nend	\N	f	1	1	2014-04-11 00:05:10	2014-04-11 00:05:10	693	series.rb
1471	36	3e5cc18656619e293d082fc2	superseded	ruby	gigasecond	class Gigasecond\n  def initialize(date)\n    @date = date\n  end\n\n  def date\n    Time.at(@date.to_time.to_i + 1_000_000_000).to_date\n  end\nend	\N	f	0	1	2014-05-02 15:30:33	2014-05-02 15:30:33	694	gigasecond.rb
1472	36	c353953b4d1ebfdc14e2d3f2	done	ruby	gigasecond	class Gigasecond\n  def initialize(date)\n    @date = date.to_time\n  end\n\n  def date\n    (@date + 1_000_000_000).to_date\n  end\nend	\N	f	0	2	2014-05-25 01:00:57	2014-05-25 01:00:57	694	gigasecond.rb
1473	32	fa3c070fffba7562b8f16aa3	pending	ruby	difference-of-squares	class Squares\r\n\r\n\tdef initialize(number)\r\n\t\t@number = number\r\n\tend\r\n\t\r\n\tdef square_of_sums\r\n\t\tsum = (0..@number).reduce(:+)\r\n\t\tsum ** 2\r\n\tend\r\n\t\r\n\tdef sum_of_squares\r\n\t\t(0..@number).inject(0){|memo, element| memo + element**2}\r\n\tend\r\n\t\r\n\tdef difference\r\n\t\tself.square_of_sums - self.sum_of_squares\r\n\tend\r\n\r\nend	\N	f	1	2	2014-05-13 22:59:21	2014-05-13 22:59:21	695	squares.rb
1474	32	9bc53d20f92f20f0e756e046	superseded	ruby	difference-of-squares	class Squares\r\n\r\n\tdef initialize(number)\r\n\t\t@number = number\r\n\tend\r\n\t\r\n\tdef square_of_sums\r\n\t\tsum = 0\r\n\t\tfor i in 0..@number\r\n\t\t\tsum += i\r\n\t\tend\r\n\t\tsum ** 2\r\n\tend\r\n\t\r\n\tdef sum_of_squares\r\n\t\tsum = 0\r\n\t\tfor i in 0..@number\r\n\t\t\tsum += i ** 2\r\n\t\tend\r\n\t\tsum\r\n\tend\r\n\t\r\n\tdef difference\r\n\t\tself.square_of_sums - self.sum_of_squares\r\n\tend\r\n\r\nend	\N	f	2	1	2014-06-02 09:48:58	2014-06-02 09:48:58	695	squares.rb
1475	32	857cf7bff4cdc940941a470d	superseded	ruby	grains	class Grains\n  def square nr\n    1 << nr - 1\n  end\n\n  def total\n    square(64) * 2 - 1\n  end\nend	\N	f	1	1	2014-05-13 04:09:52	2014-05-13 04:09:52	696	grains.rb
1476	32	84a8f360e3131787a039af1d	done	ruby	grains	class Grains\n  # http://en.wikipedia.org/wiki/Wheat_and_chessboard_problem\n  NR_OF_SQUARES_ON_CHESSBOARD = 64\n  def square nr\n    2 ** (nr - 1)\n  end\n\n  def total\n    # optimization of geometric series\n    square(NR_OF_SQUARES_ON_CHESSBOARD) * 2 - 1\n  end\nend	\N	f	3	2	2014-05-16 15:25:31	2014-05-16 15:25:31	696	grains.rb
1477	32	c13b963b13807b6fa9574cc1	done	ruby	scrabble-score	class Scrabble\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from word\n  end\n\n  def score\n    letters.map { |letter| score_for letter }.inject(0) { |sum, score| sum + score }\n  end\n\n  def self.score(word)\n    new(word).score\n  end\n\n  private\n\n  def letters_from(word)\n    word.to_s.downcase.gsub(/[^a-z]/, '').chars\n  end\n\n  def score_for(letter)\n    _, score = scores.detect { |(letters, _)| letters.include? letter }\n    score\n  end\n\n  def scores\n    [\n      ['aeilnorstu', 1],\n      ['dg',         2],\n      ['bcmp',       3],\n      ['fhvwy',      4],\n      ['k',          5],\n      ['jx',         8],\n      ['qz',        10]\n    ]\n  end\nend	\N	f	2	1	2014-05-16 14:44:45	2014-05-16 14:44:45	697	scrabble-score.rb
1478	32	a187146cf08f9a40b59d0ec5	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    text = strip_unused_chars(@text.downcase)\n    text = normalize_to_tight_comma_delimiting(text)\n\n    words = split_on_spaces_or_commas(text)  \n    words.inject(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\n\n  private\n\n  def strip_unused_chars(text)\n    text.gsub(/[^0-9a-z, ]/, '')\n  end\n\n  def normalize_to_tight_comma_delimiting(text)\n    text.squeeze(' ').gsub(/,[ ]*/, ',')\n  end\n\n  def split_on_spaces_or_commas(text)\n    text.split(/[ ,]/)\n  end\n\nend	\N	f	3	2	2014-05-13 19:19:20	2014-05-13 19:19:20	698	word-count.rb
1479	32	d207275956090358e332b5f8	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    words = text.downcase.gsub(/[^0-9a-z, ]/, '').squeeze(' ').gsub(/,[ ]*/, ',').split(/[ ,]/)\n    @counts = words.inject(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\n\n  def word_count\n    @counts\n  end\nend	\N	f	5	1	2014-05-23 23:09:00	2014-05-23 23:09:00	698	word-count.rb
1480	32	b62654e6ecab036e03580b4b	done	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words = @text.downcase.scan(/[[:alnum:]]+/)\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\nend	\N	f	1	5	2014-05-28 00:59:17	2014-05-28 00:59:17	698	word-count.rb
1481	32	b11c5b4665c38231bbe4ca76	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words = @text.downcase.scan(/[a-z0-9]+/)\n    words.inject(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\n\nend	\N	f	5	4	2014-06-07 02:42:29	2014-06-07 02:42:29	698	word-count.rb
1482	32	181a3851a7a7b38012b79d38	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words = @text.downcase.split(/[^a-z0-9]/).reject{ |s| s.empty? }\n    words.inject(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\n\nend	\N	f	4	3	2014-06-19 15:26:35	2014-06-19 15:26:35	698	word-count.rb
1564	40	4d370f25ca3b996d1b842577	hibernating	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    droptext = ''\n    mapping.keys.each do |prime|\n      droptext << mapping[prime] if num % prime.to_i == 0\n    end\n    droptext = num.to_s if droptext == ''\n  end\n\n  def mapping\n    {\n      '3' => 'Pling',\n      '5' => 'Plang',\n      '7' => 'Plong'\n    }\n  end\nend	\N	f	0	5	2014-06-03 18:36:27	2014-06-03 18:36:27	729	raindrops.rb
1485	32	71f7f932f03fb92d3b21490e	done	ruby	nucleotide-count	module Nucleotide\n  NUCLEOTIDES = {\n    'A' => 'Adenosine',\n    'C' => 'Cytidine',\n    'G' => 'Guanosine',\n    'T' => 'Thymidine',\n    'U' => 'Uracil'\n  }\n  DNA_NUCLEOTIDES = NUCLEOTIDES.select { |k, v| k != 'U' }\n  RNA_NUCLEOTIDES = NUCLEOTIDES.select { |k, v| k != 'T' }\nend\n\nclass RNA\n  include Nucleotide\nend\n\nclass DNA\n  include Nucleotide\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    @sequence.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.keys.each_with_object(Hash.new(0)) do |nucleotide, hash|\n      hash[nucleotide] = count(nucleotide)\n    end\n  end\nend	\N	f	2	3	2014-06-15 12:26:06	2014-06-15 12:26:06	699	nucleotide-count.rb
1486	32	bf1e10ff3d6f8935a51bb8f2	done	ruby	leap	class Year\n\tattr_accessor :year\n\n\tdef initialize(year)\n\t\t@year = year\n\tend\n\n\tdef leap?\n\tyear % 4 == 0 && !((year % 100 == 0) && !(year % 400 == 0))\n\tend\nend	\N	f	4	1	2014-05-19 08:06:11	2014-05-19 08:06:11	700	leap.rb
1487	32	2aef1a85b56351a834aec734	hibernating	ruby	bob	#!/usr/bin/env ruby\n\nclass Bob\n  def hey s\n    return 'Woah, chill out!' if s.upcase == s and s.upcase != s.downcase\n    return 'Sure.' if s.end_with? '?'\n    return 'Fine. Be that way!' if s.strip == ''\n    'Whatever.'\n  end\nend	\N	f	4	1	2014-06-15 00:15:13	2014-06-15 00:15:13	701	bob.rb
1488	32	faec2f033a01f75583abe043	done	ruby	roman-numerals	class Integer\n  def to_roman\n    IntegerToRoman.convert(self)\n  end\nend\n\nclass IntegerToRoman\n  def self.convert(number)\n    new(number).to_roman\n  end\n\n  def initialize(number)\n    @number = number\n  end\n\n  attr_reader :number\n\n  SYMBOLS_MAP = {\n    'M'  => 1000,\n    'CM' => 900,\n    'D'  => 500,\n    'CD' => 400,\n    'C'  => 100,\n    'XC' => 90,\n    'L'  => 50,\n    'XL' => 40,\n    'X'  => 10,\n    'IX' => 9,\n    'V'  => 5,\n    'IV' => 4,\n    'I'  => 1\n  }\n\n  def to_roman\n    current = number\n\n    SYMBOLS_MAP.each_with_object("") do |(symbol, value), result|\n      if (times = current / value) > 0\n        result << symbol * times\n        current -= value * times\n      end\n    end\n  end\nend	\N	f	0	1	2014-05-30 09:46:38	2014-05-30 09:46:38	702	roman.rb
1489	32	e58aaa89ad0630806b37e159	hibernating	ruby	grade-school	class School\n  def initialize\n    @db = Hash.new {|hash, key| hash[key] = Array.new }\n  end\n\n  def db\n    @db\n  end\n\n  def add(student, grade)\n    @db[grade].push student\n  end\n  \n  def grade(grade)\n    @db[grade]\n  end\n  \n  def sort\n    sorted = Hash.new\n    @db.keys.sort.each do |key|\n      sorted[key] = @db[key].sort\n    end\n    sorted\n  end\nend	\N	f	1	2	2014-06-16 07:23:57	2014-06-16 07:23:57	703	grade-school.rb
1490	32	b1702c441820277c29c6cb7b	superseded	ruby	grade-school	class School\n  def initialize\n    @db = Hash.new\n  end\n\n  def db\n    @db\n  end\n\n  def add(student, grade)\n    @db[grade] = Array.new unless @db.has_key?(grade)\n    @db[grade].push student\n  end\n  \n  def grade(grade)\n    @db[grade] = Array.new unless @db.has_key?(grade)\n    @db[grade]\n  end\n  \n  def sort\n    sorted = Hash.new\n    @db.keys.sort.each do |key|\n      sorted[key] = @db[key].sort\n    end\n    sorted\n  end\nend	\N	f	0	1	2014-06-23 19:51:25	2014-06-23 19:51:25	703	grade-school.rb
1491	32	400110e9192635b49bf8e9f8	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    str = divisible_by_3(number) + divisible_by_5(number) + divisible_by_7(number)\n    str.empty? ? number.to_s : str\n  end\n\n  def self.divisible_by_3(number)\n    (number % 3).zero? ? 'Pling' : ''\n  end\n\n  def self.divisible_by_5(number)\n    (number % 5).zero? ? 'Plang' : ''\n  end\n\n  def self.divisible_by_7(number)\n    (number % 7).zero? ? 'Plong' : ''\n  end\nend	\N	f	1	1	2014-05-26 14:14:56	2014-05-26 14:14:56	704	raindrops.rb
1492	32	5fe628ffc8b3733ca645a9e8	superseded	ruby	raindrops	class Raindrops\n  PRIMES = { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong'}\n\n  def self.convert(number)\n    if prime_factors_for(number).join.empty? \n      number.to_s \n    else\n      prime_factors_for(number).join\n    end\n  end\n\n  def self.prime_factors_for(number)\n    PRIMES.map do |prime, output|\n      output if number.modulo(prime).zero?\n    end\n  end\nend	\N	f	0	2	2014-06-05 23:41:15	2014-06-05 23:41:15	704	raindrops.rb
1493	32	eb88cbfd657531abbfff2a01	pending	ruby	raindrops	class Raindrops\n  PRIMES = { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong'}\n\n  def self.convert(number)\n    prime_factors_for(number).any? ? prime_factors_for(number).join : number.to_s\n  end\n\n  def self.prime_factors_for(number)\n    PRIMES.map { |prime, output| output if number.modulo(prime).zero? }\n  end\nend	\N	f	1	3	2014-06-17 03:44:00	2014-06-17 03:44:00	704	raindrops.rb
1494	32	3c6a687b90cef8ab435de290	superseded	ruby	hamming	class Hamming\n\n  def self.compute sequence1, sequence2\n\n    if sequence1.length <= sequence2.length\n      smaller = sequence1\n      bigger = sequence2\n    else\n      smaller = sequence2\n      bigger = sequence1\n    end\n\n    count_differences smaller, bigger\n\n  end\n\nprivate\n\n  def self.count_differences text1, text2\n    count = 0\n\n    text1.chars.each_index do |index|\n      count += 1 if text1[index] != text2[index]\n    end\n\n    count\n  end\nend	\N	f	0	1	2014-05-18 21:24:47	2014-05-18 21:24:47	705	hamming.rb
1495	32	1205f86c712b6a3612fb6c88	pending	ruby	hamming	class Hamming\n\n  def self.compute sequence1, sequence2\n\n    if sequence1.length <= sequence2.length\n      count_differences sequence1, sequence2\n    else\n      count_differences sequence2, sequence1\n    end\n\n  end\n\nprivate\n\n  def self.count_differences text1, text2\n    count = 0\n\n    text1.chars.each_index do |index|\n      count += 1 if text1[index] != text2[index]\n    end\n\n    count\n  end\nend	\N	f	4	2	2014-05-22 08:47:32	2014-05-22 08:47:32	705	hamming.rb
1496	32	1aae7255d3c6475fd5638334	pending	ruby	strain	class Array\n  def keep &block\n    res = []\n    self.each { |d|\n      if block[d] then\n        res << d\n      end\n    }\n    res\n  end\n\n  def discard &block\n    res = []\n    self.each { |d|\n      if not block[d] then\n        res << d\n      end\n    }\n    res\n  end\nend	\N	f	0	1	2014-05-14 18:18:08	2014-05-14 18:18:08	706	array.rb
1497	35	159a33a4fe617491adffc4e3	hibernating	ruby	leap	class Year\r\n\tdef self.leap? (año)\r\n\t\tif año.modulo(400) == 0 && año.modulo(4) == 0\r\n\t\t\treturn true\r\n\t\tend\r\n\t\tif año.modulo(100) != 0\r\n\t\t\treturn true\r\n\t\tend\r\n\tend\r\nend	\N	f	6	1	2014-05-04 21:46:55	2014-05-04 21:46:55	707	year.rb
1565	40	37f3c4c0abbe6f9376bc30d9	superseded	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    droptext = ''\n    mapping.keys.each do |prime|\n      droptext << mapping[prime] if num % prime.to_i == 0\n    end\n    droptext = num.to_s if droptext == ''\n  end\n  def mapping\n    {\n      '3' => 'Pling',\n      '5' => 'Plang',\n      '7' => 'Plong'\n    }\n  end\nend	\N	f	1	4	2014-06-22 08:47:18	2014-06-22 08:47:18	729	raindrops.rb
1500	35	99bf65600eab76ce2c513ff1	superseded	ruby	word-count	class Phrase\n\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    count_words_in(phrase.downcase)\n  end\n\n  private\n\n  def count_words_in(phrase)\n    words = %r{\\w+}\n    phrase.scan(words).each_with_object(Hash.new(0)) do |word, word_counts|\n      word_counts[word] += 1\n    end\n  end\n\nend	\N	f	3	2	2014-04-30 19:46:22	2014-04-30 19:46:22	709	word-count.rb
1501	35	7e204263ac417c77bfff4bb2	superseded	ruby	word-count	class Phrase\n\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    count_words\n  end\n\n  private\n\n  def count_words\n    word_matcher = %r{\\w+}\n    scan_phrase_for(word_matcher).counting_each do |word, word_counts|\n      word_counts.count(word)\n    end\n  end\n\n  def scan_phrase_for(matcher)\n    phrase.scan(matcher)\n  end\n\nend\n\nclass Array\n  def counting_each\n    each_with_object(Hash.new(0)) do |item, counting_hash|\n      yield(item, counting_hash)\n    end\n  end\nend\n\nclass Hash\n  def count(item)\n    self[item] += 1\n  end\nend	\N	f	7	4	2014-05-25 00:57:59	2014-05-25 00:57:59	709	word-count.rb
1502	35	fb1cc0fcd239c868d296b5dd	superseded	ruby	word-count	class Phrase\n\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    count_words\n  end\n\n  private\n\n  def words\n    phrase.scan(%r{\\w+})\n  end\n\n  def count_words\n    words.each_with_object(Counter.new) do |word, counter|\n      counter.count word\n    end.data\n  end\n\nend\n\nclass Counter\n  attr_reader :data\n\n  def initialize\n    @data = Hash.new(0)\n  end\n\n  def count(item)\n    @data[item] += 1\n  end\nend	\N	f	1	5	2014-05-28 12:38:45	2014-05-28 12:38:45	709	word-count.rb
1503	35	7216620874a52090f4466e3d	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @words_hash = Hash.new(0)\n    count_words_in(phrase)\n  end\n\n  def word_count\n    @words_hash\n  end\n\n  private\n\n  def count_words_in(phrase, words = %r{[a-zA-Z0-9]+})\n    phrase.scan(words).each do |word|\n      @words_hash[word.downcase] += 1\n    end\n  end\n\nend	\N	f	2	1	2014-05-29 06:52:34	2014-05-29 06:52:34	709	word-count.rb
1504	35	88399fa8f15e28ec4266c8ec	superseded	ruby	word-count	class Phrase\n\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    count_words_in(phrase)\n  end\n\n  private\n\n  def count_words_in(phrase)\n    word_matcher = %r{\\w+}\n    phrase.scan(word_matcher).each_with_object(Hash.new(0)) do |word, word_counts|\n      word_counts[word] += 1\n    end\n  end\n\nend	\N	f	9	3	2014-06-02 13:29:50	2014-06-02 13:29:50	709	word-count.rb
1505	35	d47436115acea9da97ec8d75	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    Counter.occurence_of words\n  end\n\n  private\n\n  def words\n    @phrase.scan(%r{\\w+})\n  end\n\nend\n\nclass Counter\n  attr_reader :data\n\n  def initialize\n    @data = Hash.new(0)\n  end\n\n  def count(item)\n    @data[item] += 1\n  end\n\n  def self.occurence_of(countable_data)\n    countable_data.each_with_object(new) do |occurence, counter|\n      counter.count occurence\n    end.data\n  end\nend	\N	f	1	6	2014-06-05 12:50:05	2014-06-05 12:50:05	709	word-count.rb
1506	35	ab7b56a8b3875f70bcfc3856	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    words.count_by(&:self)\n  end\n\n  private\n\n  def words\n    @phrase.scan(%r{\\w+})\n  end\n\nend\n\nclass Object\n  def self\n    self\n  end\nend\n\nmodule Enumerable\n  def count_by &block\n    each_with_object(Hash.new(0)) do |value,hash|\n      value = block.(value)\n      hash[value] += 1\n    end\n  end\nend	\N	f	6	7	2014-06-13 12:08:33	2014-06-13 12:08:33	709	word-count.rb
1507	35	b36d151340828138335d202d	done	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    words.counted\n  end\n\n  private\n\n  def words\n    @phrase.scan(%r{\\w+})\n  end\nend\n\nmodule Enumerable\n  def counted\n    each_with_object(Hash.new(0)) do |value,hash|\n      hash[value] += 1\n    end\n  end\nend	\N	f	0	8	2014-06-21 02:27:44	2014-06-21 02:27:44	709	word-count.rb
1508	35	efd2f9310cdc0bd71168a1fa	superseded	ruby	bob	class Bob\n  def hey(str)\n    if there?(str)\n      answers[:fine]\n    elsif caps?(str)\n      answers[:chillout]\n    elsif question?(str)\n      answers[:sure]\n    else\n      answers[:whatever]\n    end\n  end\n\n  private\n\n  def question?(str)\n    str.end_with?('?')\n  end\n\n  def caps?(str)\n    str == str.upcase\n  end\n\n  def there?(str)\n    str.to_s.strip.empty?\n  end\n\n  def answers\n    {\n      :whatever => "Whatever.",\n      :chillout => "Woah, chill out!",\n      :sure => "Sure.",\n      :fine => "Fine. Be that way!"\n    }\n  end\nend	\N	f	1	2	2014-05-16 18:58:43	2014-05-16 18:58:43	710	bob.rb
1509	35	57833d33cdc99ead62f9d0c6	superseded	ruby	bob	class Bob\n  def hey(str)\n    if there?(str)\n      answers[:fine]\n    elsif caps?(str)\n      answers[:chillout]\n    elsif question?(str)\n      answers[:sure]\n    else\n      answers[:whatever]\n    end\n  end\n\n  private\n\n  def question?(str)\n    str.end_with?('?')\n  end\n\n  def caps?(str)\n    str == str.upcase\n  end\n\n  def there?(str)\n    str.to_s.strip.empty?\n  end\n\n  def answers\n    {\n      :whatever => "Whatever.",\n      :chillout => "Woah, chill out!",\n      :sure => "Sure.",\n      :fine => "Fine. Be that way!"\n    }\n  end\nend	\N	f	7	3	2014-05-17 12:45:24	2014-05-17 12:45:24	710	bob.rb
1510	35	15f9067fbdcb85ab8d9cdb05	done	ruby	bob	class Bob\n  def hey(response)\n    if blank?(response)\n      answers[:fine]\n    elsif all_upper_case?(response)\n      answers[:chillout]\n    elsif question?(response)\n      answers[:sure]\n    else\n      answers[:whatever]\n    end\n  end\n\n  private\n\n  def question?(response)\n    response.end_with?('?')\n  end\n\n  def all_upper_case?(response)\n    response == response.upcase\n  end\n\n  def blank?(response)\n    response.to_s.strip.empty?\n  end\n\n  def answers\n    {\n      :whatever => "Whatever.",\n      :chillout => "Woah, chill out!",\n      :sure => "Sure.",\n      :fine => "Fine. Be that way!"\n    }\n  end\nend	\N	f	5	4	2014-05-30 03:43:33	2014-05-30 03:43:33	710	bob.rb
1512	35	515d4810f2151394d9039da2	pending	ruby	roman-numerals	class Integer\n  ROMAN_TRANSLATION = {\n    1 => 'I',\n    4 => 'IV',\n    5 => 'V',\n    9 => 'IX',\n    10 => 'X',\n    40 => 'XL',\n    50 => 'L',\n    90 => 'XC',\n    100 => 'C',\n    400 => 'CD',\n    500 => 'D',\n    900 => 'CM',\n    1000 => 'M'\n  }\n\n  def to_roman\n    num = self\n    ints = ROMAN_TRANSLATION.keys.select { |x| x <= num }\n    roman_numerals = ""\n    until num == 0\n      largest_int_smaller_than_num = ints.last\n      if largest_int_smaller_than_num > num\n        ints.pop\n        next\n      end\n      num -= largest_int_smaller_than_num\n      roman_numerals += ROMAN_TRANSLATION[largest_int_smaller_than_num]\n    end\n\n    roman_numerals\n  end\nend	\N	f	2	1	2014-06-14 07:51:27	2014-06-14 07:51:27	711	roman.rb
1513	35	89f2c9140f62ae1a6d46914c	superseded	ruby	beer-song	class Beer\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{num - 1} bottle#{remaining != 1 ? 's' : ''} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\nend	\N	f	1	1	2014-05-11 13:20:33	2014-05-11 13:20:33	712	beer-song.rb
1514	35	4e06d65c8e680db62af91013	superseded	ruby	beer-song	class Beer\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{remaining} bottle#{remaining != 1 ? 's' : ''} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\nend	\N	f	3	2	2014-05-17 16:22:04	2014-05-17 16:22:04	712	beer-song.rb
1515	35	1de3e565898684c0586d6f4b	superseded	ruby	beer-song	class Beer\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{quantified(remaining, 'bottle')} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\n  \n  private\n\n  def quantified(quantity, noun)\n    "#{quantity} #{noun}#{'s' if quantity != 1}"\n  end\n\nend	\N	f	0	3	2014-05-17 21:47:38	2014-05-17 21:47:38	712	beer-song.rb
1517	35	6a13ef82059695630a653213	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = matched_length(sequence1, sequence2)\n    (0...length).each do |i|\n      (@counter += 1) unless sequence1[i].eql?(sequence2[i])\n    end\n    return @counter\n  end\n\n  def self.matched_length(sequence1, sequence2)\n    if sequence1.length >= sequence2.length\n      sequence2.length\n    else\n      sequence1.length\n    end\n  end\nend	\N	f	5	1	2014-04-25 19:55:25	2014-04-25 19:55:25	713	hamming.rb
1518	35	d10d3571e94a3e67de42787e	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n    (0...length).each do |i|\n      @counter += 1 unless sequence1[i].eql?(sequence2[i])\n    end\n    @counter\n  end\nend	\N	f	0	2	2014-05-04 01:33:33	2014-05-04 01:33:33	713	hamming.rb
1519	35	3323c6b2f314d960f4ce99fd	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n\n    p length.times.count {|i| !sequence1[i].eql?sequence2[i]}\n    (0...length).each do |i|\n      @counter += 1 unless sequence1[i].eql?(sequence2[i])\n    end\n    @counter\n  end\nend	\N	f	0	3	2014-05-08 23:18:57	2014-05-08 23:18:57	713	hamming.rb
1520	35	bfde4d80f7db38ef240f4f80	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n    length.times.count { |i| !sequence1[i].eql? sequence2[i] }\n  end\nend	\N	f	8	5	2014-06-08 01:56:46	2014-06-08 01:56:46	713	hamming.rb
1521	35	39d20f2df04d48c2e9862dbb	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n    length.times.count {|i| !sequence1[i].eql?sequence2[i]}\n  end\nend	\N	f	1	4	2014-06-08 18:52:49	2014-06-08 18:52:49	713	hamming.rb
1523	35	e1ccff493938dd67a42fd00e	pending	ruby	crypto-square	class Crypto\n  def initialize(plaintext)\n    @normalized_plaintext = plaintext.downcase.gsub(/\\W/, '')\n  end\n\n  def normalize_plaintext\n    @normalized_plaintext\n  end\n\n  def size\n    Math.sqrt(@normalized_plaintext.length).ceil\n  end\n\n  def plaintext_segments\n    chunk(@normalized_plaintext, size)\n  end\n\n  def ciphertext\n    size.times.with_object("") do |index, result|\n      result << plaintext_segments.map { |segment| segment[index] }.join\n    end\n  end\n\n  def normalize_ciphertext\n    chunk(ciphertext, 5).join(' ')\n  end\n\n  private\n\n  def chunk(string, length)\n    string.chars.to_a.each_slice(length).map(&:join)\n  end\nend	\N	f	4	1	2014-05-30 09:19:19	2014-05-30 09:19:19	714	crypto.rb
1524	35	f1580d047d7317b38a3b3f04	pending	ruby	gigasecond	class Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    @birth_date + date_to_seconds\n  end\n\n  private\n\n  def date_to_seconds\n    1000000000 / 60 / 60 / 24\n  end\nend	\N	f	3	1	2014-05-11 23:51:33	2014-05-11 23:51:33	715	gigasecond.rb
1525	33	215f13b28a1bdb336e823a60	done	ruby	rna-transcription	class Acid\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_str\n    @sequence\n  end\n\n  def ==(other)\n    if String === other\n      @sequence == other\n    else\n      super\n    end\n  end\nend\n\nclass RibonucleicAcid < Acid\n  def self.from_dna_sequence(sequence)\n    new sequence.gsub('T', 'U')\n  end\nend\n\nclass DeoxyribonucleicAcid < Acid\n  def to_rna(conversion_factory = RibonucleicAcid)\n    conversion_factory.from_dna_sequence(@sequence)\n  end\nend	\N	f	5	1	2014-06-27 15:38:21	2014-06-27 15:38:21	716	rna-transcription.rb
1526	33	ca764be4ef250fbb7cbebb32	done	ruby	anagram	class Anagram\n  def initialize string\n    @string = string\n  end\n\n  def match words\n    words.select { |word| anagram? word }\n  end\n\n  private\n\n  attr_reader :string\n\n  def anagram? word\n    not same? word and\n      permutations.include? word.downcase.chars\n  end\n\n  def same? word\n    word.casecmp(string).zero?\n  end\n\n  def permutations\n    string.downcase.chars.permutation\n  end\nend	\N	f	3	3	2014-06-21 21:04:49	2014-06-21 21:04:49	717	anagram.rb
1527	33	0c1fddb719e193d4b5bfd83f	superseded	ruby	anagram	class Anagram\n  def initialize string\n    @string = string\n  end\n\n  def match words\n    words.select { |word| anagram? word }\n  end\n\n  private\n\n  attr_reader :string\n\n  def anagram? word\n    not same? word and\n      permutations.include? word.downcase.chars\n  end\n\n  def same? word\n    word.casecmp(string).zero?\n  end\n\n  def permutations\n    @permutations ||= string.downcase.chars.permutation\n  end\nend	\N	f	0	2	2014-06-25 23:23:12	2014-06-25 23:23:12	717	anagram.rb
1528	33	b890c19aefdf81d6cbac7e37	superseded	ruby	anagram	class Anagram\n  def initialize string\n    @string = string\n  end\n\n  def match words\n    words.select { |word| anagram? word }\n  end\n\n  private\n\n  attr_reader :string\n\n  def anagram? word\n    not same? word and\n      permutations.include? word.downcase.chars\n  end\n\n  def same? word\n    word.casecmp(string).zero?\n  end\n\n  def permutations\n    string.downcase.chars.permutation\n  end\nend	\N	f	2	1	2014-06-27 04:33:13	2014-06-27 04:33:13	717	anagram.rb
1529	33	1702ce03ab1f50560e1a7d3b	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan(/[\\w']+/)\n  end\n\n  def word_count\n    @words.reduce(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\nend	\N	f	1	1	2014-06-17 05:44:20	2014-06-17 05:44:20	718	phrase.rb
1530	33	a4f9de05537c29f5127510ef	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan(/[\\w']+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\nend	\N	f	2	2	2014-06-17 18:55:56	2014-06-17 18:55:56	718	phrase.rb
1531	33	51dbd379c4d65623a87c30ae	superseded	ruby	raindrops	class Raindrops\n\n\tdef self.convert(num)\n\t\tfactor_array = num.factors\n\t\tif factor_array.include?(5) && factor_array.include?(7) && factor_array.include?(3)\n\t\t\treturn 'PlingPlangPlong'\t\n\t\telsif factor_array.include?(3) && factor_array.include?(7)\n\t\t\treturn 'PlingPlong'\n\t\telsif factor_array.include?(5) && factor_array.include?(7)\n\t\t\treturn 'PlangPlong'\n\t\telsif factor_array.include?(3) && factor_array.include?(5)\n\t\t\treturn 'PlingPlang'\n\t\telsif factor_array.include?(5)\n\t\t\treturn 'Plang'\n\t\telsif factor_array.include?(7)\n\t\t\treturn 'Plong'\n\t\telsif factor_array.include?(3)\n\t\t\treturn 'Pling'\n\t\telse \n\t\t\treturn num.to_s\n\t\tend\n\tend\nend\n\n\nclass Integer\n\n\tdef factors\n\t\t(1..self).select { |n| (self % n).zero? }\n\tend\nend	\N	f	1	1	2014-06-15 23:14:57	2014-06-15 23:14:57	719	raindrops.rb
1532	33	2d9643814a96d937e26d73f0	pending	ruby	raindrops	class Raindrops\n\n\tdef convert(num)\n\t\train_noises = ""\n\t\train_noises << "Pling" if num % 3 == 0\n\t\train_noises << "Plang" if num % 5 == 0\n\t\train_noises << "Plong" if num % 7 == 0\n\n\t\tif rain_noises.empty?\n\t\t\treturn num.to_s\n\t\tend\n\t\tresulf\n\tend\nend	\N	f	1	2	2014-06-20 23:40:49	2014-06-20 23:40:49	719	raindrops.rb
1533	33	53ebd93cadaae728820570aa	pending	ruby	gigasecond	class Gigasecond\r\n\r\n\tDAYS = 10**9 / (60*60*24)\r\n\r\n\tdef initialize(date)\r\n\t\t@date = date\r\n\tend\r\n\r\n\tdef date\r\n\t\treturn @date + DAYS\r\n\tend\r\n\r\nend	\N	f	5	1	2014-06-29 13:52:36	2014-06-29 13:52:36	720	gigasecond.rb
1536	33	dcc07d11311cbc4653d92313	done	ruby	meetup	class Meetup\n\n  WEEKDAYS = %w{monday tuesday wednesday thursday friday saturday sunday}\n\n  def initialize(month, year)\n    @month_days = (Date.new(year, month, 1)..Date.new(year, month, -1)).to_a\n  end\n\n  def teenths\n    @month_days[12, 18]\n  end\n\n  WEEKDAYS.each do |weekday|\n    predicate = "#{weekday}?".to_sym\n\n    define_method(weekday.sub('day', 'teenth')) do\n      teenths.find(&predicate)\n    end\n\n    %w|first second third fourth|.each_with_index do |position, index|\n      define_method("#{position}_#{weekday}") do\n        @month_days.select(&predicate)[index]\n      end\n    end\n\n    define_method("last_#{weekday}") do\n      @month_days.select(&predicate).last\n    end\n  end\nend	\N	f	2	2	2014-06-13 05:09:22	2014-06-13 05:09:22	722	meetup.rb
1537	33	42133ec139af08a3a3bd69d9	superseded	ruby	bob	class Bob\n  \n  def silence?(x)\n  \tx.nil? || x.strip.empty?\n  end\n\n  def shouting?(x)\n  \t!silence?(x) && x == x.upcase\n  end\n\n  def question?(x)\n  \tx =~ /\\?$/\n  end\n\n  def hey(input)\n\t\t \n    (silence?(input)  && 'Fine. Be that way!') ||\n    (shouting?(input) && 'Woah, chill out!') ||\n    (question?(input) && 'Sure.') ||\n    'Whatever.'\n\n  end\n\nend	\N	f	6	4	2014-06-11 16:41:59	2014-06-11 16:41:59	723	bob.rb
1538	33	a55a12dfa536857862694cb1	superseded	ruby	bob	class Bob\n  \n  def hey(input)\n\t\t \n\tsilence =  input.nil? || input.strip.empty?\n\tshouting = !silence && input == input.upcase\n    question = input =~ /\\?$/\n\n    (silence  && 'Fine. Be that way!') ||\n    (shouting && 'Woah, chill out!') ||\n    (question && 'Sure.') ||\n    'Whatever.'\n\n  end\n\nend	\N	f	17	3	2014-06-17 03:27:25	2014-06-17 03:27:25	723	bob.rb
1539	33	4d33cf059dbe390064a0fee9	superseded	ruby	bob	class Bob\n  \n  def silence?(x)\n  \tx.nil? || x.strip.empty?\n  end\n\n  def shouting?(x)\n  \t!silence?(x) && x == x.upcase\n  end\n\n  def question?(x)\n  \tx =~ /\\?$/\n  end\n\n  def hey(input)\n\t\t \n    silence?(input)  ? "Fine. Be that way!" :\n    shouting?(input) ? "Woah, chill out!" :\n    question?(input) ? "Sure." :\n    "Whatever."\n\n  end\n\nend	\N	f	18	5	2014-06-20 09:31:40	2014-06-20 09:31:40	723	bob.rb
1540	33	1da3cdbfcc76b08dee7d4a44	superseded	ruby	bob	class Conversation\n  def initialize(gambit)\n    @gambit = gambit || ''\n  end\n  \n  def silence?()\n    @gambit.strip.empty?\n  end\n\n  def shouting?()\n    !silence?() && @gambit == @gambit.upcase\n  end\n\n  def question?()\n    @gambit =~ /\\?$/\n  end\nend\n\nclass Bob\n  \n  def hey(input)\n    c = Conversation.new(input)\n    c.silence?  ? "Fine. Be that way!" :\n    c.shouting? ? "Woah, chill out!" :\n    c.question? ? "Sure." :\n    "Whatever."\n  end\n    \nend\n    \n    	\N	f	4	7	2014-06-20 22:21:58	2014-06-20 22:21:58	723	bob.rb
1541	33	f8692c2289da848bf7409960	superseded	ruby	bob	class Conversation\n  def initialize(gambit)\n    @gambit = gambit || ''\n  end\n  \n  def silence?()\n    @gambit.strip.empty?\n  end\n\n  def shouting?()\n    !silence?() && @gambit == @gambit.upcase\n  end\n\n  def question?()\n    @gambit.end_with?("?")\n  end\nend\n\nclass Bob\n  \n  def hey(input)\n    c = Conversation.new(input)\n    c.silence?  ? "Fine. Be that way!" :\n    c.shouting? ? "Woah, chill out!" :\n    c.question? ? "Sure." :\n    "Whatever."\n  end\n    \nend\n    \n    	\N	f	5	8	2014-06-22 12:25:48	2014-06-22 12:25:48	723	bob.rb
1542	33	1be0e67a9b5c7df603d0388d	superseded	ruby	bob	class Bob\n  \n  def hey(input)\n\t\t \n\tsilence =  input.nil? || input.strip.empty?\n\tshouting = !silence && input == input.upcase\n    question = input =~ /\\?$/\n\n    (silence  && 'Fine. Be that way!') ||\n    (shouting && 'Woah, chill out!') ||\n    (question && 'Sure.') ||\n    'Whatever.'\n\n  end\n\nend	\N	f	3	2	2014-06-26 19:35:34	2014-06-26 19:35:34	723	bob.rb
1543	33	ae7de2757b947bced6319ab9	superseded	ruby	bob	class Bob\n\tdef hey(input)\n\t\t\n\t\tif input.nil? or input.strip.empty?\n\t\t\treturn "Fine. Be that way!"\n\t\tend\n\t\n\t\tif input == input.upcase\n\t\t\treturn "Woah, chill out!"\n\t\tend\n\t\t\n\t\tif input[-1] == '?'\n\t\t\treturn "Sure."\n\t\tend\n\t\t\n\t\t"Whatever."\n\tend\nend	\N	f	8	1	2014-06-28 11:27:14	2014-06-28 11:27:14	723	bob.rb
1544	33	df9b3cdb303f78068c34f2c7	superseded	ruby	bob	class Conversation\n  def initialize(gambit)\n    @gambit = gambit\n  end\n  \n  def silence?()\n    @gambit.nil? || @gambit.strip.empty?\n  end\n\n  def shouting?()\n    !silence?() && @gambit == @gambit.upcase\n  end\n\n  def question?()\n    @gambit =~ /\\?$/\n  end\nend\n\nclass Bob\n  \n  def hey(input)\n    c = Conversation.new(input)\n    c.silence?  ? "Fine. Be that way!" :\n    c.shouting? ? "Woah, chill out!" :\n    c.question? ? "Sure." :\n    "Whatever."\n  end\n    \nend\n    \n    	\N	f	4	6	2014-06-29 16:18:51	2014-06-29 16:18:51	723	bob.rb
1545	33	c426a3bfc60e62e17a402465	done	ruby	bob	class Conversation\n  def initialize(gambit)\n    @gambit = gambit || ''\n  end\n  \n  def silence?()\n    @gambit.strip.empty?\n  end\n\n  def shouting?()\n    !silence?() && @gambit == @gambit.upcase\n  end\n\n  def question?()\n    @gambit.end_with? "?"\n  end\nend\n\nclass Bob\n  \n  def hey(input)\n    c = Conversation.new(input)\n    c.silence?  ? "Fine. Be that way!" :\n    c.shouting? ? "Woah, chill out!" :\n    c.question? ? "Sure." :\n    "Whatever."\n  end\n    \nend\n    \n    	\N	f	0	9	2014-06-29 22:45:41	2014-06-29 22:45:41	723	bob.rb
1546	33	8f3728d3ddaa3aefcc95c511	superseded	ruby	robot-name	class Robot\n  \n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = generate_name\n  end\n\n  private\n\n    def generate_name\n      random_two_letters + random_three_digits\n    end\n\n    def random_two_letters\n      [*('A'..'Z')].sample(2).join\n    end\n\n    def random_three_digits\n      rand.to_s[2..4]\n    end\n\nend	\N	f	1	1	2014-06-13 09:06:46	2014-06-13 09:06:46	724	robot-name.rb
1547	33	b6ff076f8c71b5dcc3b9fde8	done	ruby	robot-name	class Robot\n  \n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n\n    def generate_name\n      random_two_letters + random_three_digits\n    end\n\n    def random_two_letters\n      [*('A'..'Z')].sample(2).join\n    end\n\n    def random_three_digits\n      rand.to_s[2..4]\n    end\n\nend	\N	f	0	2	2014-06-24 17:38:53	2014-06-24 17:38:53	724	robot-name.rb
1548	33	85dbb928484a34305ae722c0	superseded	ruby	hamming	require 'pry'\n\nclass Hamming\n\n  def self.compute(string1, string2)\n    strand1 = Strand.new(string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    nucleotide.nil? || @char == nucleotide.char\n  end\nend	\N	f	1	2	2014-06-12 14:05:22	2014-06-12 14:05:22	725	hamming.rb
1550	33	f2951a4765ea368853e9e048	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    strand1 = Strand.new(string1)\n    strand2 = Strand.new(string2)\n\n    merge = string1 <= string2 ? strand1.zip(strand2) : strand2.zip(strand1)\n\n    merge.select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map\n  end\n\n  def each(&block)\n    @strand.each(&block)\n  end\nend	\N	f	5	6	2014-06-14 13:56:59	2014-06-14 13:56:59	725	hamming.rb
1551	33	52676b3326bc0f881b47eb4c	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    chars1 = string1.chars\n    chars2 = string2.chars\n\n    merge = string1 <= string2 ? chars1.zip(chars2) : chars2.zip(chars1)\n\n    merge.select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend	\N	f	5	7	2014-06-17 08:52:28	2014-06-17 08:52:28	725	hamming.rb
1552	33	a0dfa050638566c499b409e2	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    chars1 = string1.chars\n    chars2 = string2.chars\n\n    merge = string1 <= string2 ? chars1.zip(chars2) : chars2.zip(chars1)\n\n    merge.select { |char1, char2| char1 != char2 }.count\n  end\nend	\N	f	3	8	2014-06-18 23:05:08	2014-06-18 23:05:08	725	hamming.rb
1553	33	9ebd416d311d82be05455ede	done	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    chars1 = string1.chars\n    chars2 = string2.chars\n\n    merge = string1 <= string2 ? chars1.zip(chars2) : chars2.zip(chars1)\n\n    merge.count { |char1, char2| char1 != char2 }\n  end\nend	\N	f	7	9	2014-06-19 19:00:06	2014-06-19 19:00:06	725	hamming.rb
1554	33	183de0d013d54ad178de02c9	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand1, strand2)\n    strand1.chars.zip(strand2.chars).select { |char1, char2| char1 && char2 && char1 != char2 }.count\n  end\nend	\N	f	1	1	2014-06-23 23:25:30	2014-06-23 23:25:30	725	hamming.rb
1555	33	79c940551e48ffc99f41a715	superseded	ruby	hamming	require 'pry'\n\nclass Hamming\n\n  def self.compute(string1, string2)\n    truncate_string1 = string1[0 ... string2.length]\n    strand1 = Strand.new(truncate_string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    @char == nucleotide.char\n  end\nend	\N	f	9	4	2014-06-28 16:42:16	2014-06-28 16:42:16	725	hamming.rb
1556	33	bcd9848b21bba10ab0081222	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    truncate_string1 = string1[0 ... string2.length]\n    strand1 = Strand.new(truncate_string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    @char == nucleotide.char\n  end\nend	\N	f	1	5	2014-07-01 01:00:03	2014-07-01 01:00:03	725	hamming.rb
1557	40	4c8f002fe39bb7c5601c08db	superseded	ruby	anagram	class Anagram\n\tdef initialize(word)\n\t\t@word = word\n\n\tend\n\n\tdef match(words)\n\t\twords.select do |word|\n\t\tanalyze(word) == analyze(@word)\n\tend\n\n\tend\n\tdef analyze(word)\n\t\tword.split("").sort\n\tend\n\nend	\N	f	1	1	2014-05-24 20:41:59	2014-05-24 20:41:59	726	anagram.rb
1558	40	1389b83ec11c73f7f0b19fcf	done	ruby	anagram	class Anagram\n\tdef initialize(word)\n\t\t@word = word\n\n\tend\n\n\tdef match(words)\n\t\twords.select do |word|\n\t\tanalyze(word) == analyze(@word)\n\tend\n\n\tend\n\tdef analyze(word)\n\t\tword.split("").sort\n\tend\n\nend	\N	f	1	2	2014-06-06 15:29:49	2014-06-06 15:29:49	726	anagram.rb
1559	40	4b49e956b8513da8b5fddcca	done	ruby	simple-cipher	require 'pry'\n\n## SKIP SKIP SKIP\n\nclass String\n  def to_a\n    chars.to_a\n  end\nend\n\nclass Cipher\n  def self.valid_cipher_key?(key)\n    !(key.empty? || key.match(/[^a-z]+/))\n  end\n\n  attr_reader :key\n  def initialize(key=nil)\n    @key = key || default_key\n    raise ArgumentError unless self.class.valid_cipher_key?(@key)\n  end\n\n  def encode(plaintext)\n    plaintext.to_a.collect do |character|\n      plaintext_characters_to_cipher_text_characters[character]\n    end.join\n  end\n\n  def decode(encrypted_text)\n    encrypted_text\n  end\n\n  private\n\n  def plaintext_characters_to_cipher_text_characters\n    plaintext_characters = ('a'..'z').to_a\n    key_characters = key.to_a\n    keys_to_values = plaintext_characters.zip(key_characters)\n    Hash[keys_to_values]\n  end\n\n  def default_key\n    'aaaaaaaaaaaaaaaaaaaaaaaaaa'\n  end\nend\n\nc = Cipher.new('d')\nencoded = c.encode('iamapandabear')\nbinding.pry	\N	f	1	1	2014-06-24 02:48:22	2014-06-24 02:48:22	727	cipher.rb
1560	40	8f0a03869c9ad4446dfbbfaa	pending	ruby	grade-school	class School\n  @@school_info\n  def initialize()\n  \t@@school_info = {}\n  end\n\n  def add(student, grade)\n  \t@@school_info[grade] == nil ? (@@school_info[grade] = [student]) : (@@school_info[grade] << student)\n  end\n\n  def to_hash()\n  \t@@school_info.each { |grade, student| student.sort! }\n    Hash[@@school_info.sort_by{|grade, student| grade}]\n  end\n\n  def grade(grade)\n    @@school_info[grade] == nil ? [] : @@school_info[grade].sort\n  end\nend	\N	f	3	1	2014-05-11 22:33:03	2014-05-11 22:33:03	728	school.rb
1561	40	82f2ff811d090d1d9a6f4d1c	superseded	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    drop = ""\n    drop += "Pling" if num % 3 == 0\n    drop += "Plang" if num % 5 == 0\n    drop += "Plong" if num % 7 == 0\n    if drop == ""\n      return num.to_s\n    else\n      return drop\n    end\n  end\nend	\N	f	1	1	2014-05-04 13:31:28	2014-05-04 13:31:28	729	raindrops.rb
1562	40	078377d81fb5d2cb4e19943f	superseded	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    drop = ""\n    drop += "Pling" if num % 3 == 0\n    drop += "Plang" if num % 5 == 0\n    drop += "Plong" if num % 7 == 0\n    return drop unless drop == ""\n    num.to_s\n  end\nend	\N	f	1	2	2014-05-11 19:12:27	2014-05-11 19:12:27	729	raindrops.rb
1563	40	c3c7a37e3ed7f697cd53cdc7	superseded	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    drop = ''\n    drop << 'Pling' if num % 3 == 0\n    drop << 'Plang' if num % 5 == 0\n    drop << 'Plong' if num % 7 == 0\n    return drop unless drop == ''\n    num.to_s\n  end\nend	\N	f	1	3	2014-05-24 19:44:16	2014-05-24 19:44:16	729	raindrops.rb
1567	40	b7bc5bedcf4c580b0f514651	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.split(/\\W/).reject(&:empty?).map(&:downcase)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |word| count(word) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n      self\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	0	1	2014-05-27 18:21:02	2014-05-27 18:21:02	730	word-count.rb
1568	40	b56d3b9a67bc62c1aed52bbf	done	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.downcase.split(/\\W+/)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |token| count(token) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	0	4	2014-06-10 05:36:40	2014-06-10 05:36:40	730	word-count.rb
1569	40	5073eaaad8c9bfbe081f1bac	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.split(/\\W/).reject(&:empty?).map(&:downcase)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |word| count(word) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	8	2	2014-06-12 15:48:14	2014-06-12 15:48:14	730	word-count.rb
1570	40	bf7bb74d5c8c1ca7f60b8a71	superseded	ruby	bob	class Bob\n  \n  \n  def hey(something)\n      something = something.to_s\n      if something === something.upcase && something.end_with?('?')\n        "Woah, chill out!"\n      elsif something.end_with?('?')\n        "Sure."\n      elsif something === something.upcase && something != '' \n        "Woah, chill out!"\n      elsif something == '' || something == nil \n        "Fine. Be that way!"\n      else\n        "Whatever."\n    end\n  end\n  \n  \n  \nend	\N	f	4	1	2014-05-06 02:54:27	2014-05-06 02:54:27	731	bob.rb
1572	40	c2341a665dbf859d8b0bd771	superseded	ruby	bob	class Bob\n  \n  \n  def hey(something)\n      something = something.to_s\n      if something === something.upcase && something.end_with?('?')\n        "Woah, chill out!"\n      elsif something.end_with?('?')\n        "Sure."\n      elsif something === something.upcase && something != '' \n        "Woah, chill out!"\n      elsif something == ''\n        "Fine. Be that way!"\n      else\n        "Whatever."\n    end\n  end\n  \n  \n  \nend	\N	f	5	2	2014-05-19 10:05:21	2014-05-19 10:05:21	731	bob.rb
1573	40	5979e63178fd1e15f29bdd22	pending	ruby	etl	class ETL\n  def self.transform(old)\n    old.each_with_object({}) do |(score, letters), new|\n      letters.each do |letter|\n        new[letter.downcase] = score\n      end\n    end\n  end\nend	\N	f	5	1	2014-05-22 20:22:16	2014-05-22 20:22:16	732	etl.rb
1574	40	a214c692a3d7f6b0f6ad0d25	superseded	ruby	luhn	class Luhn\n  def self.create number\n    number*10 + Luhn.new(number*10).checksum*9%10\n  end\n  \n  attr_reader :number\n  def initialize number\n    @number = number\n  end\n  \n  def addends\n    @addends ||= reverse_digit_map_with_index{ |d,i| addend_digit d, i }\n  end\n  \n  def checksum\n    @checksum ||= addends.reduce(:+)\n  end\n  \n  def valid?\n    checksum%10 == 0\n  end\n  \n  private\n    def reverse_digit_map_with_index &block\n      digits.reverse.map.with_index do |digit,index|\n        yield digit, index\n      end.reverse\n    end\n  \n    def addend_digit digit, position\n      if position.odd?\n        double_digit digit\n      else\n        digit\n      end\n    end\n  \n    def digits\n      @digits ||= number.to_s.chars.map(&:to_i)\n    end\n  \n    def double_digit digit\n      digit*2 >= 10 ? digit*2-9 : digit*2\n    end\nend	\N	f	1	1	2014-05-31 17:42:00	2014-05-31 17:42:00	733	luhn.rb
1575	40	43191f536bda7ddd59e60874	pending	ruby	luhn	class Luhn\n  def self.create number\n    number*10 + Luhn.new(number*10).checksum*9%10\n  end\n  \n  attr_reader :number\n  def initialize number\n    @number = number\n  end\n  \n  def addends\n    @addends ||= generate_addends\n  end\n  \n  def checksum\n    @checksum ||= addends.reduce(:+)\n  end\n  \n  def valid?\n    checksum%10 == 0\n  end\n  \n  private\n    def generate_addends\n      digits.reverse.map.with_index do |digit,index|\n        addend_digit digit, index\n      end.reverse\n    end\n  \n    def addend_digit digit, position\n      if position.odd?\n        double_digit digit\n      else\n        digit\n      end\n    end\n  \n    def digits\n      @digits ||= number.to_s.chars.map(&:to_i)\n    end\n  \n    def double_digit digit\n      digit*2 >= 10 ? digit*2-9 : digit*2\n    end\nend	\N	f	0	2	2014-06-22 14:55:27	2014-06-22 14:55:27	733	luhn.rb
1576	40	e339cd094db93921ab348440	hibernating	ruby	proverb	require 'pry'\nclass Proverb\n  attr_accessor :output\n\n  def initialize(*args)\n    @output = ""\n\n    if args.last.class == Hash\n      first_thing = "#{args.last[:qualifier]} #{args.first}"\n      args.pop\n    else\n      first_thing = args.first\n    end\n\n    args[0...-1].each_index do |index|\n      thing      = args[index]\n      next_thing = args[index + 1]\n      @output.concat "For want of a #{thing} the #{next_thing} was lost.\\n"\n    end\n\n    @output.concat "And all for the want of a #{first_thing}."\n  end\n\n  def to_s\n    @output\n  end\nend	\N	f	0	1	2014-05-23 01:23:08	2014-05-23 01:23:08	734	proverb.rb
1577	40	b7cb2043357eac0a78a1a667	done	ruby	wordy	class WordProblem\n  SPLITS = {'plus' => '+', 'minus' => '-', 'multiplied by' => '*', 'divided by' => '/'}\n\n  def initialize(phrase)\n    @phrase = phrase.gsub(/(plus|minus|multiplied by|divided by)/, SPLITS)\n  end\n\n  def answer\n    eqn = sanitize(@phrase)\n\n    begin\n      eval(eqn)\n    rescue Exception => exc\n      raise ArgumentError\n    end   \n  end\n\n  private\n\n  def sanitize(input)\n    input.delete("What is ?")\n  end\n\nend	\N	f	1	1	2014-05-22 08:40:29	2014-05-22 08:40:29	735	word_problem.rb
1	7	f95f0485370d4623acb9ddab	done	javascript	beer-song	Beer = {\n    verse: function(n) {\n        function bottles(i) {\n            if (i === 0) {\n                return "no more bottles";\n            } else if (i === 1) {\n                return i + " bottle";\n            } else {\n                return i + " bottles";\n            }\n        }\n\n        function ending(i) {\n            if (i === 0) {\n                return "Go to the store and buy some more, " + bottles(99) + " of beer on the wall.\\n";\n            } else if (i === 1) {\n                return "Take it down and pass it around, " + bottles(i - 1) + " of beer on the wall.\\n";\n            } else {\n                return "Take one down and pass it around, " + bottles(i - 1) + " of beer on the wall.\\n";\n            }\n        }\n\n        return bottles(n).charAt(0).toUpperCase() + bottles(n).slice(1) + " of beer on the wall, " + bottles(n) + " of beer.\\n" + ending(n);\n    },\n    sing: function(start, finish) {\n        var song = "";\n\n        if ( typeof(finish) === 'undefined' ) {\n            var ending = 0;\n        } else {\n            var ending = finish;\n        }\n\n        for(var i = start; i >= ending; i--) {\n            if (i > ending) {\n                song += Beer.verse(i) + "\\n";\n            } else {\n                song += Beer.verse(i);\n            }\n        }\n\n        return song;\n    }\n}	\N	f	3	3	2014-06-14 08:32:23	2014-06-14 08:32:23	1	beer-song.js
11	7	768ee563622eb61c819fd49d	superseded	ruby	grade-school	class School\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\tdb[key].push(value)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\nend	\N	f	4	3	2014-06-28 18:55:30	2014-06-28 18:55:30	3	grade-school.rb
13	7	db5683ebeb81cccd15758243	superseded	ruby	robot-simulator	class Robot\n  DIRECTIONS_TO_X_AND_Y_DELTA = {\n    north: [0,  1],\n    east:  [1,  0],\n    south: [0, -1],\n    west:  [-1, 0],\n  }\n\n  def orient(direction)\n    validate_direction(direction)\n    @bearing = direction\n    self\n  end\n\n  def bearing\n    @bearing\n  end\n\n  def at(x, y)\n    @x, @y = x, y\n    self\n  end\n\n  def coordinates\n    [@x, @y]\n  end\n\n  def advance\n    dx, dy = DIRECTIONS_TO_X_AND_Y_DELTA[bearing]\n    @x += dx\n    @y += dy\n    self\n  end\n\n  def turn_right\n    orient_by_index (directions.index(bearing) + 1) % directions.length\n  end\n\n  def turn_left\n    orient_by_index directions.index(bearing) - 1\n  end\n\n  private\n\n  def orient_by_index(i)\n    orient directions[i]\n  end\n\n  def directions\n    DIRECTIONS_TO_X_AND_Y_DELTA.keys\n  end\n\n  def validate_direction(direction)\n    unless directions.include?(direction)\n      raise ArgumentError, "Unknown direction."\n    end\n  end\nend\n\n\nclass Simulator\n  MAP = {\n    "L" => :turn_left,\n    "R" => :turn_right,\n    "A" => :advance\n  }\n\n  def place(robot, x: 0, y: 0, direction: :north)\n    robot.at(x, y).orient(direction)\n  end\n\n  def evaluate(robot, instruction_string)\n    instructions(instruction_string).each do |instruction|\n      robot.public_send(instruction)\n    end\n  end\n\n  def instructions(string)\n    string.chars.map { |char| MAP.fetch(char) }\n  end\nend	\N	f	2	2	2014-06-15 08:30:22	2014-06-15 08:30:22	5	robot-simulator.rb
22	7	3d478f2013d88f7be2f4b3bb	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map charToRNA\n\ncharToRNA :: Char -> Char\ncharToRNA 'T' = 'U'\ncharToRNA  c  =  c	\N	f	0	2	2014-06-12 17:29:53	2014-06-12 17:29:53	9	rna-transcription.hs
1579	40	48c90b8795a0bd4ed23a6408	hibernating	ruby	nucleotide-count	module Nucleotide\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  def nucleotides\n    [ADENOSINE, CYTIDINE, GUANOSINE, THYMIDINE, URACIL]\n  end\n\n  def nucleotide?(molecule)\n    nucleotides.include? molecule\n  end\n\n  def count_molecules(sequence, molecules)\n    molecules.each_with_object(Hash.new(0)) do |molecule, counts|\n      counts[molecule] = sequence.count molecule\n    end\n  end\nend\n\nclass DNA\n  include Nucleotide\n\n  NUCLEOTIDES = [ADENOSINE, CYTIDINE, GUANOSINE, THYMIDINE]\n  attr_reader :nucleotide_counts\n\n  def initialize(sequence)\n    @nucleotide_counts = count_molecules(sequence, DNA::NUCLEOTIDES)\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless nucleotide? nucleotide\n    nucleotide_counts[nucleotide]\n  end\n\nend	\N	f	3	3	2014-05-30 00:38:54	2014-05-30 00:38:54	736	nucleotide-count.rb
1580	40	66e02e3baa2d5be794a8a157	superseded	ruby	nucleotide-count	module Nucleotide\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  def self.nucleotide?(string)\n    constants.any? { |const| const_get(const) == string }\n  end\nend\n\nclass DNA\n  include Nucleotide\n\n  attr_reader :sequence\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless Nucleotide.nucleotide? nucleotide\n    sequence.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= {\n      ADENOSINE => count(ADENOSINE),\n      THYMIDINE => count(THYMIDINE),\n      CYTIDINE => count(CYTIDINE),\n      GUANOSINE => count(GUANOSINE)\n    }\n  end\n\nend	\N	f	3	1	2014-06-06 07:15:28	2014-06-06 07:15:28	736	nucleotide-count.rb
1581	40	8bdb401437f47edd92935741	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year % 4 == 0 unless exception?\n  end\n\n  private\n\n  def exception?\n    (@year % 100 == 0) && (@year % 400 != 0)\n  end\nend	\N	f	0	1	2014-05-21 15:35:38	2014-05-21 15:35:38	737	leap.rb
1582	40	35015e90e3e230dccf5fffc0	superseded	ruby	gigasecond	class Gigasecond\n  DAYS_IN_GS = 1_000_000_000 / (60 * 60 * 24)\n\n  def initialize(start_date)\n    @start_date = start_date\n  end\n\n  def date\n    @start_date + DAYS_IN_GS\n  end\nend	\N	f	1	1	2014-05-17 18:33:08	2014-05-17 18:33:08	738	gigasecond.rb
1583	40	7a473f80abf1f6cf7cc3ebcc	superseded	ruby	gigasecond	class Gigasecond\n  ONE_BILLION_SECONDS = 10**9\n  \n  attr_reader :start_date\n\n  def initialize(start_date)\n    @start_date = start_date\n  end\n\n  def date\n    (start_date.to_time + ONE_BILLION_SECONDS).to_date\n  end\nend	\N	f	0	2	2014-05-19 13:27:25	2014-05-19 13:27:25	738	gigasecond.rb
1584	40	8ddee9d036cfc36e5b742b16	pending	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  ONE_BILLION_SECONDS = 10**9\n  \n  attr_reader :start_date\n\n  def initialize(start_date)\n    @start_date = start_date\n  end\n\n  def date\n    (start_date.to_time + ONE_BILLION_SECONDS).to_date\n  end\nend	\N	f	1	3	2014-05-21 19:32:56	2014-05-21 19:32:56	738	gigasecond.rb
24	7	e136a60d7c3a837fa24aa755	superseded	ruby	word-count	class Phrase\n\tattr_reader :sentence\n\n\tdef initialize(sentence)\n\t\t@sentence = sentence\n\tend\n\n\tdef word_count\n\t\tresults = Hash.new { |hash, key| hash[key] = 0 }\n\t\twords.each do |word|\n\t\t\tresults[word] += 1\n\t\tend\n\t\tresults\n\tend\n\n\tprivate\n\tdef words\n\t\tsentence.split(/[\\s,]/).map do |x|\n\t\t\tx.gsub(/[\\W_]*/, '').downcase\n\t\tend.reject{|x| x==''}\n\tend\nend	\N	f	9	1	2014-06-06 18:47:39	2014-06-06 18:47:39	10	word-count.rb
26	7	b12ed8f7ca67fc6db53af79c	pending	python	largest-series-product	class Series(object):\n    def __init__(self, data):\n        self.data = []\n        for ch in data:\n            self.data.append(int(ch))\n\n    def next_slice(self, length):\n        n = len(self.data)\n        if length > n:\n            raise ValueError, "Invalid slice length for this series: %d" % length\n\n        for i in xrange(0, n):\n            j = i + length\n            if j > n: break\n            yield self.data[i:j]\n        return\n\n    def slices(self, length):\n        slice_list = []\n        for slice in self.next_slice(length):\n            slice_list.append(slice)\n        return slice_list\n\n    def largest_product(self, length):\n        largest = 1\n        for slice in self.next_slice(length):\n            product = 1\n            for val in slice:\n                product *= val\n            if product > largest:\n                largest = product\n        return largest	\N	f	2	1	2014-06-14 08:59:23	2014-06-14 08:59:23	11	largest_series_product.py
34	7	d8d37f6451de83b793b94e35	pending	python	beer-song	class Beer(object):\n    """A class for the beer song"""\n\n    @classmethod\n    def verse(cls, n):\n        """Returns the beer song verse, where there are n bottles of beer on\n        the wall at the beginning of the verse.\n        """\n        now_bottles = cls.__bottles(n)\n        then_bottles = cls.__bottles((n-1) % 100)\n        go_or_take = cls.__go_or_take(n)\n        return ("{0} on the wall, {1}.\\n"\n                "{2}, {3} on the wall.\\n").format(\n                    now_bottles[0].upper() + now_bottles[1:],\n                    now_bottles,\n                    go_or_take,\n                    then_bottles)\n\n    @staticmethod\n    def __bottles(n):\n        if n == 0:\n            return "no more bottles of beer"\n        elif n == 1:\n            return "1 bottle of beer"\n        return "{} bottles of beer".format(n)\n\n    @staticmethod\n    def __go_or_take(n):\n        if n == 0:\n            return "Go to the store and buy some more"\n        elif n == 1:\n            return "Take it down and pass it around"\n        return "Take one down and pass it around"\n\n    @classmethod\n    def sing(cls, start, end=0):\n        """The verses from start to end.\n        Each with one bottle less than the one before it.\n        """\n        return ''.join([(cls.verse(n) + '\\n')\n                        for n in range(start, end-1, -1)])	\N	f	3	1	2014-06-13 15:21:06	2014-06-13 15:21:06	15	beer.py
49	7	2687b9b195c7d9eccf863d51	superseded	ruby	proverb	class Proverb\r\n    def initialize(*missing_things, qualifier: nil)\r\n        @missing_things = missing_things\r\n        @qualifier = qualifier + " " if qualifier\r\n        make_proverb\r\n    end\r\n\r\n    def to_s\r\n        @proverb\r\n    end\r\n\r\n    private\r\n\r\n    def make_proverb\r\n        @proverb = ""\r\n        (0...@missing_things.length-1).each do |index|\r\n            @proverb << line_from(@missing_things[index], @missing_things[index+1])\r\n        end\r\n        @proverb << last_line\r\n    end\r\n\r\n    def line_from(wanted, lost)\r\n        "For want of a #{wanted} the #{lost} was lost.\\n"\r\n    end\r\n\r\n    def last_line\r\n        "And all for the want of a #{@qualifier}#{@missing_things[0]}."\r\n    end\r\nend\r	\N	f	3	1	2014-06-14 10:31:28	2014-06-14 10:31:28	20	proverb.rb
61	7	2e600db5ff66aca959bb943f	superseded	python	bob	#!/usr/bin/env python\n\nclass Bob:\n    def hey(self, input_message):\n        message = Message(input_message)\n\n        if message.is_blank():\n            return "Fine. Be that way!"\n        if message.is_yelling():\n            return "Woah, chill out!"\n        if message.is_question():\n            return "Sure."\n        return 'Whatever.'\n\nclass Message:\n    text = ""\n\n    def __init__(self, input_message):\n        self.text = input_message    \n\n    def is_blank(self):\n        return self.text is None or self.text.strip() == ''\n\n    def is_yelling(self):\n        return self.text == self.text.upper()\n\n    def is_question(self):\n        return self.text.rfind('?') == len(self.text) - 1	\N	f	4	1	2014-06-22 22:52:24	2014-06-22 22:52:24	24	bob.py
69	7	5ff56ad750755ed77ec5b91d	superseded	haskell	ocr-numbers	module OCR\n  ( convert ) where\n\nimport Data.Char  (intToDigit)\nimport Data.Maybe (fromMaybe)\nimport Data.List (intercalate)\nimport Data.List.Split (chunksOf)\n\nconvert :: String -> String\nconvert = intercalate "," . map convert' . chunksOf 4 . lines\n  where \n    convert' :: [String] -> String\n    convert' = map (\\k -> fromMaybe '?' $ k `lookup` numbers) -- [Char]\n             . extracts   -- [[String]]\n             . init       -- [String]\n\nextract :: [String] -> ([String],[String])\nextract = unzip . map (splitAt 3)\n\nextracts :: [String] -> [[String]]\nextracts [] = error "impossible happended"\nextracts ("":_) = []\nextracts s = h : extracts t\n  where (h,t) = extract s\n\nnumbers :: [([String],Char)]\nnumbers = zip (extracts raw) (map intToDigit [0..9])\n  where\n    raw =\n      [ " _     _  _     _  _  _  _  _ "\n      , "| |  | _| _||_||_ |_   ||_||_|"\n      , "|_|  ||_  _|  | _||_|  ||_| _|"\n      ]	\N	f	2	1	2014-06-19 11:56:53	2014-06-19 11:56:53	28	OCR.hs
75	7	143f8bb6bf44335634db9862	pending	ruby	nth-prime	class Prime\n  def self.nth(n)\n    raise ArgumentError if n<1\n    return 2 if n==1\n    \n    i=3\n    pos = 2\n    \n    while pos < n\n      i += 2\n      pos += 1 if is_prime(i)\n    end\n    return i\n  end\n  \n  private\n  def self.is_prime(n)\n  \n    return true if n == 2\n    return false if n < 2\n    return false if n%2 == 0\n    \n    limit = Math.sqrt(n).ceil\n    \n    (3..limit).step(2) {|x| return false if n%x == 0}\n    return true\n  end\nend	\N	f	2	1	2014-06-07 02:24:35	2014-06-07 02:24:35	31	prime.rb
82	7	343793fb63208f3d3f5bf4eb	pending	python	twelve-days	gifts = [\n    'and a Partridge in a Pear Tree.',\n    'two Turtle Doves',\n    'three French Hens',\n    'four Calling Birds',\n    'five Gold Rings',\n    'six Geese-a-Laying',\n    'seven Swans-a-Swimming',\n    'eight Maids-a-Milking',\n    'nine Ladies Dancing',\n    'ten Lords-a-Leaping',\n    'eleven Pipers Piping',\n    'twelve Drummers Drumming'\n]\n\ndays = [\n    "first",\n    "second",\n    "third",\n    "fourth",\n    "fifth",\n    "sixth",\n    "seventh",\n    "eighth",\n    "ninth",\n    "tenth",\n    "eleventh",\n    "twelfth"\n]\n\ntemplate = "On the %s day of Christmas my true love gave to me, %s\\n"\n\ndef verse(day):\n    day = day - 1   # Verses are 1-indexed\n\n    gift = ", ".join(gifts[day::-1])\n    day_word = days[day]\n\n    line = template %(day_word, gift)\n\n    if day == 0:\n        line = line.replace("and ", "")    # remove extraneous and on day 1\n\n    return line\n\ndef verses(start, end):\n    return "\\n".join([verse(d) for d in range(start, end+1)]) + "\\n"    # Extra \\n to cover join\n\ndef sing():\n    return verses(1, 12)	\N	f	0	1	2014-06-20 10:38:07	2014-06-20 10:38:07	35	twelve_days.py
87	7	f40dce4a960fed8bb4c8711b	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn nucleotide-counts [dna-string]\n  (let [empty {\\A 0, \\T 0, \\C 0, \\G 0}]\n    (merge empty (frequencies dna-string))))\n\n(defn count [strand dna-string]\n  (let [allowed-nucleotide [\\A \\T \\C \\G \\U]]\n    (when (not (some #{strand} allowed-nucleotide))\n       (throw (Exception. "invalid nucleotide"))))\n\n  (let [dna (nucleotide-counts dna-string)]\n    (get (nucleotide-counts dna-string) strand 0)))	\N	f	2	2	2014-06-20 04:53:56	2014-06-20 04:53:56	39	nucleotide-count.clj
93	7	fad65c2e118eeda44e23a311	superseded	javascript	anagram	function alphagram(s) {\n    return s.toLowerCase().split('').sort().join('');\n}\n\nfunction Anagram(s) {\n    function isDistinct(word) {\n        return word.toLowerCase() !== original;\n    }\n    function isAnagram(word) {\n        return alphagram(word) === asAlphagram;\n    }\n    var original = s.toLowerCase();\n    var asAlphagram = alphagram(s);\n    this.match = function(words) {\n        return words.filter(function(word) {\n            return isDistinct(word) && isAnagram(word);\n        });\n    };\n}\n\nmodule.exports = Anagram;	\N	f	0	5	2014-06-16 02:36:13	2014-06-16 02:36:13	40	anagram.js
98	7	24a820bbc4008e1773efda0a	superseded	haskell	luhn	module Luhn \n    ( checkDigit\n\t, addends\n\t, checksum\n\t, isValid\n\t, create\n\t) where\n\nimport Data.Char (digitToInt)\n\ncheckDigit :: Integer -> Integer\ncheckDigit n = n `rem` 10\n\naddends :: Integer -> [Integer]\naddends = reverse . zipWith ($) (cycle [id, alter]) . map (toInteger . digitToInt) . reverse . show\n\nalter :: Integer -> Integer\nalter n\n  | result > 10 = result - 9\n  | otherwise   = result\n  where result = 2 * n\n\nchecksum :: Integer -> Integer\nchecksum n = (sum $ addends n) `mod` 10\n\nisValid :: Integer -> Bool\nisValid n = checkDigit (sum $ addends n) == 0\n\ncreate :: Integer -> Integer\ncreate n\n  | cs == 0 = n'\n  | otherwise = n' + 10 - cs\n  where n' = n * 10\n        cs = checksum n'	\N	f	2	1	2014-06-06 21:35:12	2014-06-06 21:35:12	42	Luhn.hs
99	7	f8189de5a4db2b5d3656c3da	hibernating	haskell	luhn	module Luhn \n    ( checkDigit\n    , addends\n    , checksum\n    , isValid\n    , create\n    ) where\n\ncheckDigit :: Integer -> Integer\ncheckDigit n = n `mod` 10\n\ntoDigitList :: Integer -> [Integer]\ntoDigitList 0 = []\ntoDigitList n = n `mod` 10 : toDigitList (n `div` 10)\n\naddends :: Integer -> [Integer]\naddends = reverse . zipWith ($) (cycle [id, alter]) . toDigitList\n\nalter :: Integer -> Integer\nalter n\n  | result > 10 = result - 9\n  | otherwise   = result\n  where result = 2 * n\n\nchecksum :: Integer -> Integer\nchecksum n = (sum $ addends n) `mod` 10\n\nisValid :: Integer -> Bool\nisValid n = checkDigit (sum $ addends n) == 0\n\ncreate :: Integer -> Integer\ncreate n\n  | cs == 0 = n'\n  | otherwise = n' + 10 - cs\n  where n' = n * 10\n        cs = checksum n'	\N	f	2	2	2014-06-10 11:47:09	2014-06-10 11:47:09	42	Luhn.hs
110	7	ba2a37c04045e87f21310ed2	superseded	javascript	robot-name	function Robot() {\n    this.initialize = function() {\n        this.generatedNames = {};\n        this.name = this.generateName();\n    };\n\n    this.getRandomInt = function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    this.getRandomLetter = function() {\n        var A = 65, Z = 90;\n        var randomCode = this.getRandomInt(A, Z);\n        return String.fromCharCode(randomCode);\n    };\n\n    this.repeat = function(n, fn, args) {\n        var s = "";\n        for(var i = 0; i < n; i++) {\n            s += fn.apply(this, args).toString();\n        }\n        return s;\n    };\n\n    this.generateName = function() {\n        var name = this.repeat(2, this.getRandomLetter) +\n            this.repeat(3, this.getRandomInt, [0, 9]);\n        this.generatedNames[name] = true;\n        return name;\n    };\n\n    this.isUnique = function(name) {\n        return this.generatedNames[name] === true;\n    };\n\n    this.generateUniqueName = function() {\n        do {\n            var name = this.generateName();\n        } while (!this.isUnique(name));\n        return name;\n    };\n\n    this.reset = function() {\n        this.name = this.generateUniqueName();\n    };\n\n    this.initialize();\n}\n\nmodule.exports = Robot;	\N	f	3	1	2014-06-12 01:01:51	2014-06-12 01:01:51	48	robot-name.js
111	7	826c2fb950d41b767f8468db	pending	javascript	robot-name	function Robot() {\n    this.initialize = function() {\n        this.generatedNames = {};\n        this.name = this.generateUniqueName();\n    };\n\n    this.generateUniqueName = function() {\n        do {\n            var name = this.generateName();\n        } while (!this.isUnique(name));\n        return name;\n    };\n\n    this.generateName = function() {\n        var name = this.repeat(2, this.getRandomLetter) +\n            this.repeat(3, this.getRandomInt, [0, 9]);\n        this.generatedNames[name] = true;\n        return name;\n    };\n\n    this.isUnique = function(name) {\n        return this.generatedNames[name] === true;\n    };\n\n    this.reset = function() {\n        this.name = this.generateUniqueName();\n    };\n\n    this.getRandomInt = function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    this.getRandomLetter = function() {\n        var A = 65, Z = 90;\n        var randomCode = this.getRandomInt(A, Z);\n        return String.fromCharCode(randomCode);\n    };\n\n    this.repeat = function(times, fn, args) {\n        var str = "";\n        for (var i = 0; i < times; i++) {\n            str += fn.apply(this, args).toString();\n        }\n        return str;\n    };\n\n    this.initialize();\n}\n\nmodule.exports = Robot;	\N	f	2	2	2014-06-22 05:12:46	2014-06-22 05:12:46	48	robot-name.js
113	7	815095254eba378bef973404	pending	python	matrix	__author__ = 'Johnny Dave'\r\n\r\n\r\nclass Matrix(object):\r\n    def __init__(self, data):\r\n        self._data = data\r\n        self.rows = []\r\n        self.columns = []\r\n\r\n        self._creatematrix()\r\n\r\n    def _creatematrix(self):\r\n        temp = []\r\n        temp_row = []\r\n        self._data = self._data.split("\\n")\r\n        for row in self._data:\r\n            temp.append(row.strip())\r\n\r\n        self._data = temp\r\n        temp = []\r\n\r\n        for item in self._data:\r\n            temp.append((item.split(" ")))\r\n\r\n        for row in temp:\r\n            for item in row:\r\n               temp_row.append(int(item))\r\n            self.rows.append(temp_row)\r\n            temp_row = []\r\n\r\n        self.columns = self._transpose_list(self.rows)\r\n\r\n    def _transpose_list(self, lst):\r\n        """\r\n        Transposes a given list.  The list must be in the for of an m by n Matrix.\r\n\r\n        Created: 06/04/14\r\n\r\n        Inputs:\r\n        lst -- List to be transposed\r\n\r\n        Outputs:\r\n        transposed_list -- transposed list\r\n        """\r\n        index = 0\r\n        transposed_list = []\r\n\r\n        # Makes a row for every column\r\n        for x in xrange(len(lst[0])):\r\n            transposed_list.append([])\r\n\r\n        # Transposes the list\r\n        for line in lst:\r\n            for item in line:\r\n                transposed_list[index].append(item)\r\n                index += 1\r\n            index = 0\r\n\r\n        return transposed_list\r\n\r\nif __name__ == "__main__":\r\n    matrix = Matrix("1 2 3\\n4 5 6\\n7 8 9\\n 8 7 6")	\N	f	2	1	2014-06-11 00:22:15	2014-06-11 00:22:15	50	matrix.py
122	3	3a5998c5871fd6805a14d01a	pending	javascript	nucleotide-count	var DNA = function(str) {\n\tthis.sequence = str;\n\tthis.nucleotideCounts;\n\n\tvar counts = {A: 0, T: 0, C: 0, G: 0};\n\tfor (var i = 0; i < this.sequence.length; i++) {\n\t\tcounts[this.sequence[i]] ++;\n\t}\n\tthis.nucleotideCounts = counts;\n\tdoneCounting = true;\n};\n\nDNA.prototype.count = function(str) {\n\tvar valid = ["A", "C", "G", "T", "U"];\n\n\tfor (var i = 0; i < valid.length; i++) {\n\t\tif (str == valid[i]) {\n\t\t\tif (this.nucleotideCounts[str]) {\n\t\t\t\treturn this.nucleotideCounts[str];\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\tthrow "Invalid Nucleotide";\n};	\N	f	1	2	2014-05-11 03:21:21	2014-05-11 03:21:21	54	nucleotide-count.js
125	3	9088a352dd771ba9ca1e646c	done	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(verseNum){\n  if (verseNum === 1)\n    return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n  else if(verseNum === 0)\n    return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n  else\n    return verseNum + " bottles of beer on the wall, " + verseNum + " bottles of beer.\\nTake one down and pass it around, " + ( verseNum - 1 ) + " " + (( verseNum === 2 ) ? 'bottle' : 'bottles') + " of beer on the wall.\\n";\n};\n\nBeer.sing = function(start, final){\n  final = final || 0;\n  var song = "";\n  for(i=start; i>=final; i--){\n    song = song + this.verse(i) + '\\n'\n  }\n  return song.slice(0, -1)\n};\n\nmodule.exports = Beer;	\N	f	3	1	2014-05-22 22:54:34	2014-05-22 22:54:34	57	beer-song.js
134	3	a7cdc23cb6392672a3234acd	done	javascript	anagram	function Anagram(str) {\n    var sortedStr = sorted(str);\n    var lowerCaseStr = str.toLowerCase();\n\n    this.match = function(candidates) {\n        return candidates.filter(function(candidate) {\n            return candidate.toLowerCase() !== lowerCaseStr &&\n                sorted(candidate) === sortedStr;\n        });\n    };\n}\n\nfunction sorted(str) {\n    return str.toLowerCase().split("").sort().join("");\n};\n\nmodule.exports = Anagram;	\N	f	0	8	2014-06-15 18:22:32	2014-06-15 18:22:32	60	anagram.js
135	3	3a084a16883dd4abd9c278e7	superseded	javascript	anagram	function Anagram(str) {\n    this.match = function(candidates) {\n        function alphabatize(str) {\n            return str.toLowerCase().split("").sort().join("");\n        }\n\n        var sortedStr = alphabatize(str);\n        var sortedCandidates = candidates.map(alphabatize);\n        var anagrams = [];\n\n        sortedCandidates.forEach(function(candidate, index) {\n            if (candidate === sortedStr &&\n                candidates[index] !== str) {\n                anagrams.push(candidates[index]);\n            }\n        });\n\n        return anagrams;\n    };\n}\n\nmodule.exports = Anagram;	\N	f	0	1	2014-06-17 09:38:56	2014-06-17 09:38:56	60	anagram.js
145	4	bd3aefe8d8da874bcc6e7e51	done	haskell	beer-song	module Beer (sing, verse) where\n      \nimport Data.List    \n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse n = (show n) ++ part1 ++ (show n) ++ part2 ++ verseEnd (n - 1)\n    where part1 = " bottles of beer on the wall, "\n          part2 = " bottles of beer.\\nTake one down and pass it around, "\n          verseEnd 1 = "1 bottle of beer on the wall.\\n"\n          verseEnd m = (show m) ++ " bottles of beer on the wall.\\n"\n                  \n\n                  \nsing :: Int -> Int -> String\nsing hi low \n         | hi > low = (intercalate "\\n" $ map verse [hi, (hi - 1) .. low]) ++ "\\n"	\N	f	0	1	2014-01-30 05:08:12	2014-01-30 05:08:12	65	beer-song.hs
157	4	3625b45f0965abcda35005a3	done	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.Function (on)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor = filter . (isAnagramOf `on` (map toLower))\n\nisAnagramOf :: String -> String -> Bool\nisAnagramOf a b = a /= b && a `isGramonymOf` b\n\n-- I have invented a new word for this - a gramonym.  \n-- It means, basically, anagram, but includes the \n-- original word itself - so banana is a gramonym of \n-- banana.\nisGramonymOf :: String -> String -> Bool\nisGramonymOf = (==) `on` (sort)	\N	f	1	7	2014-05-22 17:15:02	2014-05-22 17:15:02	68	anagram.hs
164	4	6c451b031bbc2702e886cc00	hibernating	haskell	sieve	module Sieve (primesUpTo) where\n\n\nimport Data.Bits\nimport Data.List\n\n\nprimesUpTo :: Int -> [Int]\nprimesUpTo n =\n  if n < 2 then\n    []\n  else\n    -- even numbers is not primes (except 2), so we can slightly speed up primes generation\n    -- also we can compact memory by storing only odd numbers but it muddle up realization\n    2:filter (testBit fullSieve) [3,5..n]\n  where\n    initialSieve = (complement 0)::Integer\n    fullSieve = foldl' (addNumberToSieve) initialSieve [2..(floor $ sqrt $ fromIntegral n)]\n    addNumberToSieve sieve i\n      | testBit sieve i = foldl' clearBit sieve [i*2,i*3..n]\n      | otherwise       = sieve	\N	f	0	1	2014-02-05 10:47:29	2014-02-05 10:47:29	70	Sieve.hs
174	21	d00a1c0e43bd84ae3d32d0fe	pending	ruby	atbash-cipher	class Atbash\n  class << self\n    def encode(string)\n      cleaned = cleanup(string)\n      encoded = cleaned.chars.map { |c| cipher(c) }\n      format(encoded)\n    end\n\n    def format(array)\n      array.each_slice(5).map do |slice|\n        slice.join\n      end.join(" ")\n    end\n\n    def cleanup(string)\n      string.downcase.gsub(/\\W/, '')\n    end\n\n    def cipher(character)\n      @cipher_map ||= Hash[('a'..'z').zip(('a'..'z').to_a.reverse)]\n      @cipher_map[character] || character\n    end\n  end\nend	\N	f	2	1	2014-06-01 17:24:23	2014-06-01 17:24:23	78	atbash.rb
176	21	a1bae9db8b349ea1af456267	pending	javascript	phone-number	var PhoneNumber = function(numString){\n  if(numString.charAt(0) === '1' && numString.length === 11){\n    numString = numString.substring(1, numString.length);\n  } else if(numString.length === 11 || numString.length < 10){\n    numString = "0000000000";\n  }\n  this.val = numString.replace(/[^\\w\\s]/gi, ''). replace(/ /g, "");\n\n}\n\nPhoneNumber.prototype.number = function(){\n  return this.val;\n}\n\nPhoneNumber.prototype.areaCode = function(){\n  return this.val.substring(0,3);\n}\n\nPhoneNumber.prototype.toString = function(){\n  return "(" + this.areaCode() + ") " + this.number().substring(3,6) + "-" + this.number().substring(6,10);\n}	\N	f	3	1	2014-06-12 06:30:44	2014-06-12 06:30:44	80	phone-number.js
188	21	f7f00f2f974c641967085c5f	done	javascript	sieve	'use strict';\n\nmodule.exports = function(max) {\n  var min = 2,\n      numbers = new Array(max);\n\n  for (var i=0; i < max; i++) {\n    numbers[i] = i;\n  }\n\n  var sieve = {\n    multiplesOf: function(number, max) {\n      var multiples = [];\n      for (var i=2; number * i < max; i++) {\n        multiples.push(number * i);\n      }\n      return multiples;\n    },\n\n    filter: function(number) {\n      var multiples = this.multiplesOf(number, max);\n      multiples.forEach(function(n) {\n        numbers[n] = undefined;\n      });\n    },\n\n    smoosh: function(array) {\n      return array.filter(function(value) {\n        return value !== undefined\n      });\n    }\n  };\n\n  for (var i=2; i < max; i++) {\n    if (numbers[i] !== undefined) {\n      sieve.filter(i);\n    }\n  }\n\n  sieve.primes = sieve.smoosh(numbers).slice(2);\n\n  return sieve;\n};	\N	f	3	1	2014-05-30 13:46:31	2014-05-30 13:46:31	85	sieve.js
385	25	6125eff0e1809d098eb9d18f	superseded	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(input)\n    if has_factors?(input)\n      translate(input)\n    else\n      String(input)\n    end\n  end\n\n  private\n\n  def has_factors?(number)\n    DICTIONARY.any?(&factors_of?(number))\n  end\n\n  def translate(number)\n    DICTIONARY.select(&factors_of?(number)).values.join\n  end\n\n  def factors_of?(number)\n    ->(*factor) { Integer(number) % (factor.flatten[0]) == 0 }\n  end\n\nend	\N	f	2	3	2014-04-15 13:29:56	2014-04-15 13:29:56	184	raindrops.rb
190	21	99a4e497b7a132b06b10e446	superseded	haskell	house	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule House( rhyme ) where\n\nparts :: [String] \nparts = ["the horse and the hound and the horn\\nthat belonged to ",\n         "the farmer sowing his corn\\nthat kept ",\n         "the rooster that crowed in the morn\\nthat woke ",\n         "the priest all shaven and shorn\\nthat married ",\n         "the man all tattered and torn\\nthat kissed ",\n         "the maiden all forlorn\\nthat milked ",\n         "the cow with the crumpled horn\\nthat tossed ",\n         "the dog\\nthat worried ",\n         "the cat\\nthat killed ",\n         "the rat\\nthat ate ",\n         "the malt\\nthat lay in ",\n         "the house that Jack built.\\n"]\n\nverses :: [String] -> [[String]] -> String\nverses [] vs = unlines $ map (concat . reverse) vs\nverses (l : ls) vs = verses ls vvs\n  where \n    vvs = [["This is " ++ l]] ++ map (l:) vs \n\nrhyme :: String\nrhyme = verses parts []	\N	f	3	1	2014-06-11 00:44:03	2014-06-11 00:44:03	87	House.hs
197	26	6e95acdd6e98c090a89bbec6	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport qualified Data.Set as Set\nimport qualified Data.Map as Map\nimport Data.Char (toLower)\nimport Data.List (permutations)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor w = filter (isAnagramOf w)\n  where isAnagramOf x y\n          | x == y = False\n          | otherwise = (freqs . map toLower) x == (freqs . map toLower) y\n\nfreqs :: (Ord a) => [a] -> Map.Map a Integer\nfreqs = foldr addElem Map.empty\n  where addElem x = Map.insertWith (+) x 1	\N	f	2	1	2014-04-01 02:11:00	2014-04-01 02:11:00	90	anagram.hs
204	26	bbac562c15365d1f8c623cd0	done	ruby	scrabble-score	class Scrabble\n\n  RANKED_LETTERS = {\n    "a" => 1, "b" => 3,  "c"  => 3, "d" => 2, "e" => 1,\n    "f" => 4, "g" => 2,  "h"  => 4, "i" => 1, "j" => 8,\n    "k" => 5, "l" => 1,  "m"  => 3, "n" => 1, "o" => 1,\n    "p" => 3, "q" => 10, "r"  => 1, "s" => 1, "t" => 1,\n    "u" => 1, "v" => 4,  "w"  => 4, "x" => 8, "y" => 4,\n    "z" => 10\n  }\n\n  attr_reader :letters\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    word = word.nil? ? "" : word.downcase\n    @letters = word.chars\n  end\n\n  def score\n    letters.map{|letter| RANKED_LETTERS[letter] }.compact.inject(0, :+)\n  end\nend	\N	f	2	1	2014-03-23 09:30:54	2014-03-23 09:30:54	93	scrabble-score.rb
210	26	e350719455f9588075a69bc3	superseded	ruby	bob	module TeenagerRefinements\n  refine String do\n    def yelling?\n      self == self.upcase\n    end\n\n    def question?\n      self[-1] == '?'\n    end\n\n    def only_whitespace?\n      self.strip.empty?\n    end\n  end\nend\n\nusing TeenagerRefinements\n\nclass Bob\n\n  def hey(msg)\n    return 'Fine. Be that way!' if msg.only_whitespace?\n    return 'Woah, chill out!' if msg.yelling?\n    return 'Sure.' if msg.question?\n\n    'Whatever.'\n  end\nend	\N	f	1	2	2014-02-28 16:12:44	2014-02-28 16:12:44	97	bob.rb
214	26	4e201df0e684ce8e4400ddae	done	elixir	anagram	defmodule Anagram do\n  def match(target, comparisons) when is_binary(target) and is_list(comparisons) do\n    target_letters = normalize_letters(target)\n    comparisons\n    |> Enum.reject(&(same_word?(target, &1)))\n    |> Enum.filter(&(is_anagram_match?(target_letters, &1)))\n  end\n\n  defp normalize_letters(input) do\n    input\n    |> String.downcase\n    |> String.graphemes\n    |> Enum.sort\n  end\n\n  defp same_word?(target, comparitor) do\n    String.downcase(target) == String.downcase(comparitor)\n  end\n\n  defp is_anagram_match?(target_letters, comparitor) do\n    target_letters == normalize_letters(comparitor)\n  end\nend	\N	f	2	2	2014-06-02 20:14:15	2014-06-02 20:14:15	98	anagram.exs
228	26	dc3140c75c7d521067fd2e7e	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(letter_values map[int][]string) map[string]int {\n\tvar transformations = make(map[string]int)\n\tfor score, letters := range letter_values {\n\t\tassignLetterScores(transformations, letters, score)\n\t}\n\treturn transformations\n}\n\nfunc assignLetterScores(trans map[string]int, letters []string, score int) {\n\tfor i := range letters {\n\t\tvar letter = strings.ToLower(letters[i])\n\t\ttrans[letter] = score\n\t}\n}	\N	f	1	4	2014-06-04 14:39:38	2014-06-04 14:39:38	104	etl.go
231	26	3df6ab5f038988c7c5248580	pending	python	phone-number	class Phone(object):\n    def __init__(self, phone_number):\n        self.number = self.__clean_and_validate(phone_number)\n\n    @staticmethod\n    def __clean_and_validate(phone_number):\n        digits = [char for char in phone_number if char.isdigit()]\n        if len(digits) == 10:\n            return ''.join(digits)\n        if (len(digits) == 11) and (digits[0] == '1'):\n            return ''.join(digits[1:])\n        return '0' * 10     # bad number\n\n    def area_code(self):\n        return self.number[:3]\n\n    def pretty(self):\n        area_code = self.area_code()\n        part2, part3 = self.number[3:6], self.number[6:]\n        return "({}) {}-{}".format(area_code, part2, part3)	\N	f	0	1	2014-04-27 16:03:41	2014-04-27 16:03:41	106	phone.py
241	19	aa0a881f16184b75f7da197e	done	javascript	bob	function Bob() {\n}\n\nBob.prototype.hey = function(input) {\n  if (isShouting(input)) {\n    return "Woah, chill out!";\n  } else if(isQuestioning(input)) {\n    return "Sure.";\n  } else if(isSilence(input)) {\n    return "Fine. Be that way!";\n  } else {\n    return "Whatever.";\n  }\n};\n\nfunction isShouting(input) {\n  return (input.toUpperCase() === input && /[A-Z\\xdc]/.test(input));\n}\n\nfunction isQuestioning(input) {\n  return (input[input.length - 1] === "?");\n}\n\nfunction isSilence(input) {\n  return (input.trim() === "");\n}\n\nmodule.exports = Bob;	\N	f	2	3	2014-01-10 01:53:47	2014-01-10 01:53:47	112	bob.js
252	19	91b9d6c0f4e44900b171c13d	pending	python	beer-song	import re\n\n\nclass Beer(object):\n\n    def __init__(self):\n        pass\n\n    def verse(self, n):\n        s1 = "%s bottles of beer on the wall, %s bottles of beer.\\n"\n        s2 = ("Take one down and pass it around, "\n              "%s bottles of beer on the wall.\\n")\n\n        if n > 1 and n < 100:\n            sentence = s1 % (n, n) + s2 % (n-1)\n        elif n >= 100:\n            sentence = None\n        elif n == 1:\n            sentence = s1 % (n, n) + s2 % "no more"\n        elif n == 0:\n            sentence = s1 % ("No more", "no more") + \\\n                       "Go to the store and buy some more, " + \\\n                       "99 bottles of beer on the wall.\\n"\n\n        sentence = re.sub("1 bottles", "1 bottle", sentence)\n        if "1 bottle" in sentence and "2 bottles" not in sentence:\n            sentence = re.sub("one down", "it down", sentence)\n\n        return sentence\n\n    def sing(self, m, n=0):\n\n        verses = ''\n        for i in range(m, n-1, -1):\n            verses = verses + self.verse(i) + '\\n'\n\n        return verses	\N	f	1	1	2014-01-22 13:05:39	2014-01-22 13:05:39	119	beer.py
256	19	e3a96a7a2073d17867937c6a	hibernating	javascript	word-count	var Words = function (phrase) {\n\n  this.count = {};\n  words = phrase.split(/[\\W]+/)\n  for (var i in words) {\n    // case insensitive count\n    var word = words[i].toLowerCase();\n    if (word && word.length > 0) { // discard empty strings\n      var n = this.count[word];\n      if (n) {\n        // existing count\n        this.count[word] = n + 1;\n      } else {\n        // first occurence of this word\n        this.count[word] = 1;\n      }\n    }\n  }\n}\n\nmodule.exports = Words;	\N	f	1	1	2014-06-12 17:21:37	2014-06-12 17:21:37	121	word-count.js
257	19	9ac230307deee82731c1b6c7	done	javascript	triangle	var valuesForHash = function(hash){\n  var keys = Object.keys(hash);\n  return keys.map(function(v) { return hash[v]; });\n};\n\nvar Triangle = function(){\n  this.sides = valuesForHash(arguments).sort();\n};\n\nTriangle.isEqualateral = function(sides){\n  return (sides[0] === sides[1] && sides[1] === sides[2]);\n};\n\nTriangle.isScalene = function(sides){\n  return (sides[0] !== sides[1] && sides[1] !== sides[2] &&\n      sides[0] !== sides[2]);\n};\n\nTriangle.isIllegal = function(sides){\n  if (sides[0] + sides[1] <= sides[2]){\n    return true;\n  }\n  for(var i=0; i<sides.length; i++){\n    var side = sides[i];\n    if (side < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nTriangle.isValid = function(sides){\n  for(var i=0; i<sides.length; i++){\n    var side = sides[i];\n    if (side === 0){\n      return false;\n    }\n  }\n  return true;\n};\n\nTriangle.prototype.kind = function(){\n  if (!Triangle.isValid(this.sides)){\n      throw "Invalid triangle dimensions";\n  }\n\n  if (Triangle.isIllegal(this.sides)){\n    return 'illegal';\n  }\n\n  if (Triangle.isEqualateral(this.sides)){\n    return "equilateral";\n  }\n  else if (Triangle.isScalene(this.sides)){\n    return "scalene";\n  } else {\n    return "isosceles";\n  }\n};\n\nmodule.exports = Triangle;	\N	f	2	1	2014-04-10 05:52:53	2014-04-10 05:52:53	122	triangle.js
270	24	b423ffede05e2259e0aa57a4	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    formulate_pithy_comeback(msg)\n  end\n\n  def formulate_pithy_comeback(msg)\n    message = msg.to_s\n    if shouting?(message)\n      "Woah, chill out!"\n    elsif questioning?(message)\n      "Sure."\n    elsif silent?(message)\n      "Fine. Be that way."\n    else\n      "Whatever."\n    end\n  end\n\n  def shouting?(msg)\n    msg.upcase === msg && msg.length > 0\n  end\n\n  def questioning?(msg)\n    msg.end_with? "?"\n  end\n\n  def silent?(msg)\n    msg.length == 0\n  end\n\nend	\N	f	4	3	2014-06-21 06:15:33	2014-06-21 06:15:33	129	bob.rb
274	24	462af6086cb321c27b1b9e63	superseded	clojure	rna-transcription	(ns dna)\n\n(defn single-nucleo [n]\n  {:pre [(contains? #{"C" "G" "T" "A"} n)]}\n  (cond\n    (= n "C") "G"\n    (= n "G") "C"\n    (= n "A") "U"\n    (= n "T") "A"))\n\n(defn to-rna [nucleos]\n  (loop [n nucleos ret []]\n    (if (empty? n) (clojure.string/join ret)\n    (recur (clojure.string/join (rest n)) (conj ret (single-nucleo (str (first (seq n)))))))\n    ))\n\n;; (= "UGCACCAGAAUU" (to-rna "ACGTGGTCTTAA"))\n\n;; (to-rna "CC")\n\n;; (= "GG" (to-rna "CC"))\n\n;; (clojure.string/join (rest "C"))\n\n;; (clojure.string/join (rest "iatern"))\n\n;; (str (first (seq "iatern")))	\N	f	0	1	2014-06-21 12:07:55	2014-06-21 12:07:55	130	dna.clj
276	24	e1ebb7bc49538c697c9ab432	pending	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n\n\n(defn is-all-caps\n  [input]\n  (= input (clojure.string/upper-case input)))\n\n\n;;(is-all-caps "SOME STRING")\n\n\n(defn ends-in-question-mark\n  [input]\n  (= (last input) \\?))\n\n\n;; (ends-in-question-mark "John?")\n;; (ends-in-question-mark "Jordan?")\n\n\n(defn no-characters\n  [input]\n  (= "" (clojure.string/trim input)))\n\n;; (no-characters " ")\n\n(defn no-letters\n  [input]\n  (= (clojure.string/upper-case input) (clojure.string/lower-case input)))\n\n;; (no-letters "12, 3!")\n\n(defn response-for\n  [input]\n  (cond\n     (no-characters input) "Fine. Be that way!"\n     (and(is-all-caps input)(false?(no-letters input))) "Woah, chill out!"\n     (ends-in-question-mark input) "Sure."\n     (no-letters input) "Whatever."\n     :else "Whatever."))\n\n;; (response-for "WHAT THE HELL?")\n\n;; (= "Whatever." (response-for "Tom-ay-to, tom-aaaah-to."))\n;; (= "Woah, chill out!"(response-for "WATCH OUT!"))\n;; (= "Sure."(response-for "Does this cryogenic chamber make me look fat?"))\n;; (= "Whatever."(response-for "Let's go make out behind the gym!"))\n;; (= "Whatever."(response-for "It's OK if you don't want to go to the DMV."))\n;; (= "Woah, chill out!"(response-for "WHAT THE HELL WERE YOU THINKING?"))\n;; (= "Woah, chill out!"(response-for "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"))\n;; (= "Woah, chill out!"(response-for "1, 2, 3 GO!"))\n;; (= "Woah, chill out!"(response-for "I HATE YOU"))\n;; (= "Whatever."(response-for "Ending with ? means a question."))\n;; (= "Fine. Be that way!"(response-for ""))\n;; (= "Fine. Be that way!"(response-for "    "))\n;; (= "Whatever."(response-for "1, 2, 3"))\n;; (= "Sure."(response-for "4?"))	\N	f	2	1	2014-06-19 02:53:14	2014-06-19 02:53:14	132	bob.clj
284	24	56a7b5a65e5586696fea4eaf	pending	ruby	house	class House\n  LAST = "the house that Jack built.\\n"\n  RHYME_CONTENTS = \n    [" malt that lay in ",\n    " rat that ate ",\n    " cat that killed ",\n    " dog that worried ",\n    " cow with the crumpled horn that tossed ",\n    " maiden all forlorn that milked ",\n    " man all tattered and torn that kissed ",\n    " priest all shaven and shorn that married ",\n    " rooster that crowed in the morn that woke ",\n    " farmer sowing his corn that kept ",\n    " horse and the hound and the horn that belonged to "]\n\n  def verse(number)\n    create_rhyme(number)\n  end\n\n  def verses(first,last)\n    (first..last).map { |number| create_rhyme(number) + "\\n" }.join('')\n  end\n\n  def create_rhyme(depth)\n    (0..depth-2).reverse_each.reduce('This is ') { |rhyme, position| rhyme << 'the' + RHYME_CONTENTS[position] } + LAST\n  end\n  \nend	\N	f	2	1	2014-06-04 02:29:04	2014-06-04 02:29:04	136	house.rb
287	24	5ea93b91851b6dba97ab7ec7	superseded	ruby	beer-song	class BeerSong\r\n  def verse(bottles)\r\n    case bottles\r\n    when 0; phrase0\r\n    when 1; phrase1\r\n    when 2; phrase2\r\n    else phrasemany(bottles)\r\n    end\r\n  end\r\n\r\n  def verses(first, last)\r\n    first.downto(last).map {|i| verse(i)}.join("\\n")+"\\n"\r\n  end\r\n\r\n  def sing\r\n    verses(99,0)\r\n  end\r\n\r\nprivate\r\n  def phrase0; <<PHR\r\nNo more bottles of beer on the wall, no more bottles of beer.\r\nGo to the store and buy some more, 99 bottles of beer on the wall.\r\nPHR\r\n  end\r\n\r\n  def phrase1; <<PHR\r\n1 bottle of beer on the wall, 1 bottle of beer.\r\nTake it down and pass it around, no more bottles of beer on the wall.\r\nPHR\r\n  end\r\n\r\n  def phrase2; <<PHR\r\n2 bottles of beer on the wall, 2 bottles of beer.\r\nTake one down and pass it around, 1 bottle of beer on the wall.\r\nPHR\r\n  end\r\n\r\n  def phrasemany(n); <<PHR\r\n#{n} bottles of beer on the wall, #{n} bottles of beer.\r\nTake one down and pass it around, #{n-1} bottles of beer on the wall.\r\nPHR\r\n  end\r\nend	\N	f	2	1	2014-05-19 07:56:57	2014-05-19 07:56:57	139	beer_song.rb
297	18	7f252e900c9114bb888dc738	done	ruby	bob	class Bob\n  RESPONSES = {\n    question: "Sure.",\n    yelling:  "Woah, chill out!",\n    nothing:  "Fine. Be that way!",\n    other:    "Whatever."\n  }\n\n  def hey(input)\n    respond(input)\n  end\n\n  private\n\n  def respond(input)\n    response_type = find_input_type(input)\n    RESPONSES[response_type]\n  end\n\n  def find_input_type(input)\n    return :yelling  if shouting?(input)\n    return :question if question?(input)\n    return :nothing  if silence?(input)\n    return :other\n  end\n\n  def shouting?(input)\n    !input.match(/[A-Z]+\\b/).nil? && input.match(/[a-z]+\\b/).nil?\n\n  end\n\n  def question?(input)\n    !(/^[\\w\\W]+\\?\\z/ =~ input).nil?\n  end\n\n  def silence?(input)\n    (/\\S/ =~ input).nil?\n  end\nend	\N	f	7	1	2014-06-23 13:19:44	2014-06-23 13:19:44	145	bob.rb
634	11	bea66bf3f3dce36683d43400	superseded	clojure	nucleotide-count	(ns dna\n  (:require [clojure.core :as core]))\n\n(def valid-dna-nucleotides #{\\A \\T \\C \\G})\n(def valid-nucleotides (conj valid-dna-nucleotides \\U))\n(def empty-count (into {} (map (fn [a] [a 0]) valid-dna-nucleotides)))\n\n(defn nucleotide-counts [string]\n  (into empty-count (frequencies string)))\n\n(defn count [nucleotide string]\n  (if (valid-nucleotides nucleotide)\n    ((nucleotide-counts string) nucleotide 0)\n    (throw (Exception. "invalid nucleotide"))))	\N	f	2	2	2014-06-04 10:02:53	2014-06-04 10:02:53	301	dna.clj
298	18	d7cfceef4623158bbc2328d6	superseded	javascript	anagram	var Anagram = function(word) {\n\n  // Solution strategy:\n  //\n  // 1. Split word into letters and sort, and rejoin\n  // 2. Take input array, create a companion word which is split each into letters and sort and rejoin\n  // 3. Iterate through input array. First check the word is not the same as original, then compare sorted word with sorted reference word.\n\n  var\n    lowerCaseWordOriginalWord,\n    sortWordByLetters,\n    sortedOriginalWord;\n\n    if (!word) {\n      throw new Error('You must provide a non-empty word');\n    }\n\n    lowerCaseWordOriginalWord = String.prototype.toLowerCase.apply(word);\n\n    sortWordByLetters = function(unsortedWord) {\n      var \n        letters = unsortedWord.split('');\n        letters.sort();\n        sortedWord = letters.join('');\n        return sortedWord;\n    };\n\n    sortedOriginalWord = sortWordByLetters(lowerCaseWordOriginalWord);\n\n  this.match = function(listToSearch) {\n    var\n      counter,\n      wordToCheck,\n      lowerCaseWordToCheck,\n      matchingList = [];\n\n    for (counter = 0; counter < listToSearch.length; counter += 1){\n      wordToCheck = listToSearch[counter];\n      lowerCaseWordToCheck = String.prototype.toLowerCase.apply(listToSearch[counter]);\n\n      if (lowerCaseWordToCheck === lowerCaseWordOriginalWord) {\n        continue;\n      }\n\n      if (sortedOriginalWord === sortWordByLetters(lowerCaseWordToCheck)) {\n\n        matchingList.push(wordToCheck);\n      }\n    }\n\n    return matchingList;\n  };\n};\n\nmodule.exports = Anagram;	\N	f	5	1	2014-06-21 11:15:37	2014-06-21 11:15:37	146	anagram.js
307	18	edbdc7af1af0cb80751a923c	done	elixir	allergies	defmodule Allergies do\n  import Bitwise, only: [&&&: 2]\n  @allergies [{"eggs", 1},\n              {"peanuts", 2},\n              {"shellfish", 4},\n              {"strawberries", 8},\n              {"tomatoes", 16},\n              {"chocolate", 32},\n              {"pollen", 64},\n              {"cats", 128}]\n\n  @allergies_map HashDict.new @allergies\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergie with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(flags) do\n    Enum.filter_map @allergies, (fn {_,id} -> (id &&& flags) != 0 end), &(elem &1, 0)\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'flags' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(flags, item) do\n    field = HashDict.get @allergies_map, item, 0\n    (flags &&& field) != 0\n  end\nend	\N	f	3	1	2014-06-24 06:39:31	2014-06-24 06:39:31	150	allergies.exs
315	18	9ec4b285b645b75e56605eed	superseded	go	anagram	// Steve Phillips / elimisteve\n// 2013.12.16\n\npackage anagram\n\nimport "strings"\n\nfunc Detect(subject string, candidates []string) (anagrams []string) {\n\tsubject = strings.ToLower(subject)\n\tsortedSubject := quicksort(subject)\n\tsortedCandidates := sortEach(lowerEach(candidates))\n\tfor i := range sortedCandidates {\n\t\tif sortedCandidates[i] == sortedSubject {\n\t\t\t// identical word is not anagram\n\t\t\tif candidates[i] != subject {\n\t\t\t\tanagrams = append(anagrams, candidates[i])\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nfunc lowerEach(words []string) []string {\n\tfor i, _ := range words {\n\t\twords[i] = strings.ToLower(words[i])\n\t}\n\treturn words\n}\n\nfunc sortEach(unsorted []string) (sorted []string) {\n\tsorted = make([]string, len(unsorted))\n\tfor ndx, _ := range unsorted {\n\t\t// log.Printf("Before: %s\\n", unsorted[ndx])\n\t\tsorted[ndx] = quicksort(unsorted[ndx])\n\t\t// log.Printf("After: %s\\n",  unsorted[ndx])\n\t}\n\treturn\n}\n\nfunc quicksort(str string) string {\n\tif len(str) == 0 || len(str) == 1 {\n\t\treturn str\n\t}\n\tleft, right := split(rune(str[0]), str[1:])\n\treturn quicksort(left) + string(str[0]) + quicksort(right)\n}\n\nfunc split(head rune, rest string) (left, right string) {\n\tfor _, s := range rest {\n\t\tif s <= head {\n\t\t\tleft += string(s)\n\t\t} else {\n\t\t\tright += string(s)\n\t\t}\n\t}\n\t// log.Printf("head: %s\\n", string(head))\n\t// log.Printf("left: %s\\n", left)\n\t// log.Printf("right: %s\\n\\n", right)\n\treturn\n}\n\n// type SortableString *string\n\n// func (s SortableString) Len() int {\n// \treturn len(*s)\n// }\n\n// func (s SortableString) Less(i, j int) bool { return s[i] < s[j] }\n\n// func (s SortableString) Swap(i, j int) {\n// \t// log.Printf("%T\\n", s[i])\n// \t// Ensure i < j\n// \tif i == j {\n// \t\treturn\n// \t}\n// \tif i > j {\n// \t\ti, j = j, i\n// \t}\n// \tlog.Printf("Before: %s\\n", s)\n// \ts = s[:i] + SortableString(s[j]) + s[i+1:j] + SortableString(s[i]) + s[j+1:]\n// \tlog.Printf("After:  %s\\n", s)\n// }	\N	f	1	1	2014-06-20 02:41:49	2014-06-20 02:41:49	156	anagram.go
317	18	a78443605b11b46147db2831	done	haskell	pig-latin	module PigLatin (translate) where\n\n\nimport Control.Arrow\n\n\nisVowel :: Char -> Bool\nisVowel ch = ch `elem` "aeiou"\n\n\ntranslate :: String -> String\ntranslate = unwords . map translateWord . words\n\n\ntranslateWord :: String -> String\ntranslateWord word =\n  let cw = break isVowel word\n      (consonants,wordTail) = (if (last' *** head) cw == ('q','u') then ((++"u") *** tail) else id) cw\n      last' [] = ' '\n      last' lst = last lst\n  in wordTail ++ consonants ++ "ay"	\N	f	2	1	2014-06-21 22:10:00	2014-06-21 22:10:00	157	PigLatin.hs
318	18	b3a26c797ede337489085c4a	superseded	haskell	beer-song	module Beer ( sing, verse ) where \n\n\nverse :: Int -> String \nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse n = show n ++ " bottles of beer on the wall, " ++ show n ++ " bottles of beer.\\nTake one down and pass it around, " ++ show ( n - 1 ) ++ " bottles of beer on the wall.\\n"\n\nsing :: Int -> Int -> String\nsing n m = unlines . map verse $ [ n , pred n .. m ]	\N	f	0	1	2014-06-23 20:20:15	2014-06-23 20:20:15	158	Beer.hs
324	23	4bb16979ebb8fddf69e97c36	done	ruby	meetup	require 'date'\n\nclass Meetup\n  DAYS_OF_WEEK = %w{mon tues wednes thurs fri satur sun}\n  ORDER = {first: 0, second: 1, third: 2, fourth: 3, last: -1}\n  TEENS = 13..19\n\n  def initialize(month, year)\n    @date = Date.new year, month\n  end\n\n  DAYS_OF_WEEK.each do |wday|\n    ORDER.each do |nth, index|\n      define_method "#{nth}_#{wday}day".to_sym do        \n        days_this_month.select(&"#{wday}day?".to_sym)[index] \n      end                                       \n    end\n    define_method "#{wday}teenth".to_sym do\n      days_this_month.select(&"#{wday}day?".to_sym).find {|date| TEENS.cover? date.day}\n    end                                    \n  end\n\n  private\n  def days_this_month\n    @days_this_month ||= @date...@date.next_month\n  end\nend\n# methods created by this class: first_monday, second_monday, third_monday, fourth_monday, last_monday, monteenth, first_tuesday, second_tuesday, third_tuesday, fourth_tuesday, last_tuesday, tuesteenth, first_wednesday, second_wednesday, third_wednesday, fourth_wednesday, last_wednesday, wednesteenth, first_thursday, second_thursday, third_thursday, fourth_thursday, last_thursday, thursteenth, first_friday, second_friday, third_friday, fourth_friday, last_friday, friteenth, first_saturday, second_saturday, third_saturday, fourth_saturday, last_saturday, saturteenth, first_sunday, second_sunday, third_sunday, fourth_sunday, last_sunday, sunteenth]	\N	f	2	4	2013-11-30 13:56:32	2013-11-30 13:56:32	161	meetup.rb
325	23	1e19632271098394b9c2a855	superseded	ruby	meetup	require 'date'\n\nclass Meetup\n  DAYS_OF_WEEK = %w{mon tues wednes thurs fri satur sun}\n  ORDER = {first: 0, second: 1, third: 2, fourth: 3, last: -1}\n  TEENS = 13..19\n\n  def initialize(month, year)\n    @date = Date.new year, month\n  end\n\n  DAYS_OF_WEEK.each do |wday|\n    ORDER.each do |nth, index|\n      class_eval <<-RUBY\n        def #{nth}_#{wday}day        \n          days_this_month.select(&:#{wday}day?)[#{index}] \n        end                                     \n      RUBY\n    end\n    class_eval <<-RUBY\n      def #{wday}teenth\n        days_this_month.select(&:#{wday}day?).find {|date| TEENS.cover? date.day}\n      end                                    \n    RUBY\n  end\n\n  private\n  def days_this_month\n    @days_this_month ||= @date...@date.next_month\n  end\nend\n# methods created by this class: first_monday, second_monday, third_monday, fourth_monday, last_monday, monteenth, first_tuesday, second_tuesday, third_tuesday, fourth_tuesday, last_tuesday, tuesteenth, first_wednesday, second_wednesday, third_wednesday, fourth_wednesday, last_wednesday, wednesteenth, first_thursday, second_thursday, third_thursday, fourth_thursday, last_thursday, thursteenth, first_friday, second_friday, third_friday, fourth_friday, last_friday, friteenth, first_saturday, second_saturday, third_saturday, fourth_saturday, last_saturday, saturteenth, first_sunday, second_sunday, third_sunday, fourth_sunday, last_sunday, sunteenth]	\N	f	2	3	2014-04-16 04:51:11	2014-04-16 04:51:11	161	meetup.rb
336	23	18968e792f370529a9095109	hibernating	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    song = ""\n    number.downto(to) { |i| song << verse(i) << "\\n" }\n    song\n  end\n\n  def verse(number)\n    first_line_in_verse(number) + second_line_in_verse(number)\n  end\n\n  private\n    def bottles_string(number_of_bottles, beginning_of_line = false)\n      case number_of_bottles\n      when -1\n        "99 bottles"\n      when 0\n        str = "no more bottles"\n        str.capitalize! if beginning_of_line\n        str\n      when 1\n        "1 bottle"\n      else\n        "#{number_of_bottles} bottles"\n      end\n    end\n\n    def action_string(number_of_bottles)\n      take_down = nil\n      case number_of_bottles\n      when 0\n        action_string = "Go to the store and buy some more"\n      when 1\n        take_down = "it"\n      else\n        take_down = "one"\n      end\n      action_string ||= "Take #{take_down} down and pass it around" unless take_down.nil?\n      action_string\n    end\n\n    def first_line_in_verse(number)\n      "#{bottles_string(number, true)} of beer on the wall, #{bottles_string(number)} of beer.\\n"\n    end\n\n    def second_line_in_verse(number)\n      "#{action_string(number)}, #{bottles_string(number - 1)} of beer on the wall.\\n"\n    end\nend	\N	f	2	6	2013-11-26 06:40:00	2013-11-26 06:40:00	167	beer-song.rb
344	23	bfdcc1b5350a940c28bda72a	superseded	ruby	bob	class Bob\n  \n  def hey(message)\n    return "Fine. Be that way!" if messageIsEmpty?message\n    return "Woah, chill out!" if messageIsAllUppercase?message\n    return "Sure." if messageIsQuestion?message\n    return "Whatever."\n  end\n  \n  private # helper methods follow\n  \n  def messageIsEmpty?(message)\n    return (message.nil? or message.strip.empty?)\n  end\n  \n  def messageIsAllUppercase?(message)\n    return message.eql?message.upcase\n  end\n  \n  def messageIsQuestion?(message)\n    return message.end_with?'?'\n  end\nend	\N	f	2	2	2013-12-03 01:36:32	2013-12-03 01:36:32	169	bob.rb
349	23	663063f9d1e6315a46302b4a	superseded	ruby	bob	class Bob\n  \n  def hey(speech)\n    \n    message = Message.new(speech)\n    \n    if message.empty?\n      response = "Fine. Be that way!" \n    elsif message.forceful?\n      response = "Woah, chill out!"   \n    elsif message.question?\n      response = "Sure."\n    else\n      response = "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(message)\n    @message = message\n  end\n  \n  def empty?\n    @message.nil? or @message.strip.empty?\n  end\n  \n  def forceful?\n    @message == @message.upcase\n  end\n  \n  def question?\n    @message.end_with?'?'\n  end\nend	\N	f	3	6	2014-05-07 08:29:59	2014-05-07 08:29:59	169	bob.rb
355	23	37dd6004a0b944d1246a9893	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(options)\n    sorted_word = word.downcase.split('').sort.join('')\n  \n    options.select do |option|\n      next if word == option.downcase\n      sorted_option = option.downcase.split('').sort.join('')\n      option if sorted_word == sorted_option\n    end\n  end\n\nend	\N	f	2	1	2013-11-17 19:40:36	2013-11-17 19:40:36	171	anagram.rb
368	23	5263b94a16278b0370d11867	done	clojure	gigasecond	(ns gigasecond\n  (:import (java.util Calendar)))\n\n(defn- calendar [] (Calendar/getInstance))\n\n(defn- set-date [year month day]\n  (let [cal (calendar)]\n    (.set cal year month day 0 0 0)\n    cal))\n\n(defn- add-gigasecond [cal]\n  (let [time-in-milis (.getTimeInMillis cal)]\n    (.setTimeInMillis cal (+ time-in-milis 1000000000000))\n    cal))\n\n(defn- convert-to-ymd [cal]\n  [(.get cal Calendar/YEAR)\n   (inc (.get cal Calendar/MONTH))\n   (.get cal Calendar/DATE)])\n\n(defn from [year month day]\n  (let [cal (set-date year month day)]\n    (-> cal\n      (add-gigasecond)\n      (convert-to-ymd))))	\N	f	0	1	2013-10-28 05:03:41	2013-10-28 05:03:41	175	gigasecond.clj
371	25	04024bc4f4f7ec09471db8b8	superseded	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    #Thank you for the nitpicks, really appreciate the feedback!\n\n    case \n    when is_silent?( phrase )\n      'Fine. Be that way!'\n    when is_shouting?( phrase )\n      'Woah, chill out!'\n    when is_question?( phrase )\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\n  private\n\n  def is_question?( phrase )\n    phrase.end_with? '?'\n  end\n\n  def is_silent?( phrase )\n    phrase.strip.empty?\n  end\n\n  def is_shouting?( phrase )\n    phrase.upcase == phrase \n  end\n\nend	\N	f	6	2	2014-05-23 20:17:00	2014-05-23 20:17:00	177	bob.rb
375	25	ad6ad586ce7ebeeb21278d8c	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\n    \n\n-- The area code of a valid (US!!) phone number is its first three\n-- digits. \nareaCode :: String -> String\nareaCode = take 3\n\n           \n-- Test if the given phone number is valid. If the number is\n-- valid, then return the number. Otherwise, return the all-zeros\n-- ten-digit number. \nnumber input = case length number of\n                 10 -> number\n                 11 -> case head number of\n                        '1' -> tail number\n                        _   ->  badNumber\n                 _  -> badNumber\n    where number = clean input\n          badNumber = "0000000000"\n\n-- Clean up a number: Remove leading and trailing non-digits, and\n-- then delete spaces and dots. \nclean :: String -> String\nclean = (filter isDigit) . (takeWhile (isValidChar)) . (dropWhile\n                                                        (not . isDigit))\n\n            \n-- Is the character allowed in a phone number?\nisValidChar :: Char -> Bool\nisValidChar c = (isDigit c) || (c `elem` [' ', '.', '(', ')', '-'])\n               \n-- Pretty-print a US phone number.\nprettyPrint :: String -> String\nprettyPrint input = "(" ++ part1 ++ ") " ++ part2 ++ "-" ++ part3\n    where goodNumber = number input\n          (part1, rest) = splitAt 3 goodNumber\n          (part2, part3) = splitAt 3 rest\n    	\N	f	3	1	2014-04-21 06:36:19	2014-04-21 06:36:19	179	phone-number.hs
383	25	3ea6d5e4f278b0378c1d2840	superseded	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(n)\n    factors = DICTIONARY.select do |k, _|\n      n % k == 0\n    end\n\n    factors.empty? ? String(n) : factors.values.join\n  end\n\nend	\N	f	2	1	2014-04-08 10:37:22	2014-04-08 10:37:22	184	raindrops.rb
392	25	79443d0a6de05d5463913ab9	pending	perl5	ocr-numbers	package OCR;\n\nuse strict;\nuse warnings;\n\nuse List::Util qw/sum/;\n\nour @PLACES = (5,7,11,13);\nour %VALUES = ('_' => 2, '|' => 3);\nour %MAP    = (1144 => "0", 594 => "1", 902 => "2", 1028 => "3",  913 => "4",\n                830 => "5", 935 => "6", 776 => "7", 1298 => "8", 1193 => "9");\n\nsub new { my $class = shift; bless \\shift(), $class }\n\nsub convert {\n    my $self = shift;\n\n    my @input = split "\\n", $$self;\n    return join ',', map { convert_line($_)       } # convert line to letters\n                     map { [ @input[$_ .. $_+3] ] } # fetch n-th line\n                     map { $_*4                   } # start index for n-th line\n                     0 .. @input/4-1;               # character height = 4 lines\n}\n\nsub convert_line {\n    my $scanlines = shift;\n\n    my @lines;\n    foreach my $scanline ( @$scanlines ) {\n        push @lines, [ map   { convert_group($_)   } # convert group to number\n                       grep  { length              } # filter empty strings\n                       split ( /(.{3})/, $scanline ) # character width = 3\n                     ];\n    }\n\n    my $length = @{ $lines[0] } - 1;\n    return join '', map { convert_segment($_)         } \n                    map { [map { shift @$_ } @lines ] } 0 .. $length;\n}\n\nsub convert_segment {\n    my $segment = shift;\n\n    my $i = 3;\n    map { $MAP{$_} // '?' } sum map {  $_ * $PLACES[$i--]  } @$segment;\n}\n\nsub convert_group {\n    my $group = shift;\n\n    my $i = 0;\n    sum map { ($VALUES{$_} || 0) * $PLACES[$i++] } split //, $group;\n}\n\n1;\n\n__END__\n_ = 2\n| = 3\n\n5 7 11\n  _      = 14   (= 5*0 + 7*2 + 11*0)\n\n| _ |    = 62   (= 5*3 + 7*2 + 11*3)\n\n  _ |    = 47   (= 5*0 + 7*2 + 11*3)\n\n         = 0    (= 5*0 + 7*0 + 11*0)\n         -----\n         = 1193 (= 13*14 + 11*62 + 7*47 + 5*0)	\N	f	0	1	2014-04-18 07:58:58	2014-04-18 07:58:58	189	OCR.pm
395	25	43498254ca32b9611010c870	superseded	ruby	grade-school	class School\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\t@students[key].push(value)\n\t\t@students\n\tend\n\n\tdef grade(num)\n\t\t@students[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[@students.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\nend	\N	f	2	2	2014-04-11 07:11:31	2014-04-11 07:11:31	192	grade-school.rb
396	25	8bc554ce1ffc32309008aa9a	superseded	ruby	grade-school	class School\n\n\tattr_reader :db\n\n\tdef initialize\n\t\t@students = Hash.new {|h,k| h[k] = [] }\n\tend\n\n\tdef students\n\t\t@students.clone\n\tend\n\n\tdef db\n\t\t@students\n\tend\n\n\tdef add(value, key)\n\t\tdb[key].push(value)\n\tend\n\n\tdef grade(num)\n\t\tdb[num]\n\tend\n\n\tdef sort\n\t\tsorted = Hash[db.sort]\n\t\tsorted.values.each {|x| x.sort!}\n\t\tsorted\n\tend\nend	\N	f	1	4	2014-04-14 07:47:47	2014-04-14 07:47:47	192	grade-school.rb
403	25	1698dd90bcaa438565c4bdd0	done	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides.split("")\n    check_for_dna_only\n  end\n\n  def count(nucleotide_type)\n    if all_nucleotides.member?(nucleotide_type)\n      nucleotides.count(nucleotide_type)\n    else\n      dna_error\n    end\n  end\n\n  def nucleotide_counts\n    dna_count = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n    dna_count.merge!(dna_count) { |key, v1| count(key) }\n  end\n\n  private\n\n    def check_for_dna_only\n      @nucleotides.each do |nucleotide|\n        dna_error unless dna_nucleotides.member? nucleotide\n      end\n    end\n\n    def dna_error\n      raise ArgumentError, "DNA nucleotides only"\n    end\n\n    def all_nucleotides\n      %w( A C G T U )\n    end\n\n    def dna_nucleotides\n      %w( A C G T )\n    end\nend	\N	f	0	2	2014-05-11 15:15:15	2014-05-11 15:15:15	194	nucleotide-count.rb
408	20	0b37f945b1e44deb4261b35f	done	ruby	bob	class Bob\n  def hey(message)\n    if silent?(message)\n      'Fine. Be that way.'\n    elsif shouting?(message)\n      'Woah, chill out!'\n    elsif question?(message)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def question?(message)\n    message.end_with? '?'\n  end\n\n  def shouting?(message)\n    message == message.upcase\n  end\n\n  def silent?(message)\n    message.nil? or message.empty?\n  end\nend	\N	f	5	2	2014-05-20 04:47:51	2014-05-20 04:47:51	197	bob.rb
409	20	65c61e89504519e1e7da386c	superseded	python	bob	import re\nimport unicodedata\n\nclass Bob:\n\n    def hey (self, statement):\n        # First thing I'm going to do is clean the string\n        # of things that don't affect the results\n        shortStatement = self.cleanStatement(statement)\n        punctuation = statement[-1:]\n        if not shortStatement:\n            return 'Fine. Be that way!'\n        elif not shortStatement.isupper() and punctuation != '?':\n            return 'Whatever.'\n        elif not shortStatement.isupper() and punctuation == '?':\n            return 'Sure.'\n        elif shortStatement.isupper():\n            return 'Woah, chill out!'\n\n        return shortStatement + punctuation\n\n    def cleanStatement (self, statement):\n        newStatement = statement\n        if isinstance(newStatement, unicode):\n            newStatement = unicodedata.normalize('NFKD', newStatement).encode('ascii', 'ignore')\n\n        cleaned = re.sub('[^a-zA-Z\\?\\,\\n]', '', newStatement);\n        return cleaned[-4:]	\N	f	3	1	2014-03-25 21:50:57	2014-03-25 21:50:57	198	bob.py
421	20	6b1258a88411dc719ca25f8c	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(list)\n    list.select { |word| anagram? word }\n  end\n\n  private\n\n  def anagram\n    @anagram ||= alphagram @word\n  end\n\n  def anagram?(word)\n    return false if word.downcase == @word\n    anagram == alphagram(word)\n  end\n\n  def alphagram(word)\n    word.downcase.scan(/./).sort.join\n  end\nend	\N	f	2	4	2014-03-27 21:13:55	2014-03-27 21:13:55	203	anagram.rb
428	20	33e8e610abab656109ab6017	done	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verseTwo();\n  case 1:\n    return verseOne();\n  case 0:\n    return verseZero();\n  default:\n    return defaultVerse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  var last = stop || 0;\n  var song = "";\n  for (var i = start; i > last; i--){\n    song += Beer.verse(i) + "\\n";\n  }\n  song += Beer.verse(last);\n  return song;\n};\n\nvar defaultVerse = function (num) {\n  return num + " bottles of beer on the wall, " +\n  num + " bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  (num-1) + " bottles of beer on the wall.\\n";\n};\n\nvar verseTwo = function() {\n  return "2 bottles of beer on the wall, " +\n  "2 bottles of beer.\\n" +\n  "Take one down and pass it around, " +\n  "1 bottle of beer on the wall.\\n";\n};\n\nvar verseOne = function() {\n  return "1 bottle of beer on the wall, " +\n  "1 bottle of beer.\\n" +\n  "Take it down and pass it around, " +\n  "no more bottles of beer on the wall.\\n";\n};\n\nvar verseZero = function() {\n  return "No more bottles of beer on the wall, " +\n  "no more bottles of beer.\\n" +\n  "Go to the store and buy some more, " +\n  "99 bottles of beer on the wall.\\n";\n};\n\nmodule.exports = Beer;	\N	f	2	5	2014-02-25 23:06:57	2014-02-25 23:06:57	206	beer-song.js
643	11	fa85e8e5de10392bbd76104c	hibernating	ruby	raindrops	require_relative '../prime-factors/prime_factors'\n\n\n# - If the number contains 3 as a prime factor, output 'Pling'.\n# - If the number contains 5 as a prime factor, output 'Plang'.\n# - If the number contains 7 as a prime factor, output 'Plong'.\n# - If the number does not contain 3, 5, or 7 as a prime factor,\n#   just pass the number's digits straight through.\n\nclass Raindrops\n\n  Mapping = { 3 => "Pling", 5 => "Plang", 7 => "Plong" }\n\n  def convert(n)\n    factors = PrimeFactors.for(n)\n    o = Mapping.inject("") do | s, (k, v) |\n      factors.include?(k) ? s + v : s\n    end\n    o.empty? ? n.to_s : o\n  end\n\nend	\N	f	2	3	2014-05-03 02:17:39	2014-05-03 02:17:39	303	raindrops.rb
431	20	6c8db04a7e8d614653e87a5a	superseded	javascript	beer-song	var Beer = function(){\n};\n\nBeer.verse = function(num) {\n  switch(num) {\n  case 2:\n    return verse_two();\n    break;\n  case 1:\n    return verse_one();\n    break;\n  case 0:\n    return verse_zero();\n    break;\n  default:\n    return default_verse(num);\n  }\n};\n\nBeer.sing = function(start, stop) {\n  stop = stop || 0;\n  message = "";\n  i = start;\n  while (i >= stop) {\n    message += Beer.verse(i);\n    if (i > stop) {\n      message += "\\n";\n    };\n    i--;\n  }\n  return message;\n}\n\nvar default_verse = function (num) {\n  message = num + " bottles of beer on the wall, "\n  message += num + " bottles of beer.\\n"\n  message += "Take one down and pass it around, "\n  message += (num-1) + " bottles of beer on the wall.\\n";\n  return message;\n}\n\nvar verse_two = function() {\n  var message = "2 bottles of beer on the wall, ";\n  message += "2 bottles of beer.\\n";\n  message += "Take one down and pass it around, ";\n  message += "1 bottle of beer on the wall.\\n";\n  return message;\n};\n\nvar verse_one = function() {\n  var message = "1 bottle of beer on the wall, "\n  message += "1 bottle of beer.\\n"\n  message += "Take it down and pass it around, "\n  message += "no more bottles of beer on the wall.\\n"\n  return message;\n};\n\nvar verse_zero = function() {\n  var message = "No more bottles of beer on the wall, "\n  message += "no more bottles of beer.\\n"\n  message += "Go to the store and buy some more, "\n  message += "99 bottles of beer on the wall.\\n"\n  return message;\n};\n\nmodule.exports = Beer;	\N	f	1	2	2014-04-28 20:45:23	2014-04-28 20:45:23	206	beer-song.js
436	20	f0fc7ed616f88e4e37caa952	superseded	ruby	meetup	# One last change!\n# This screams for some metaprogramming!\nclass Meetup\n\n  NTH_WEEK_NAMES = %w(first second third fourth)\n\n  class << self\n\n    private\n\n    def make_day_of_week_method(name, week_name, day_of_week)\n      # Does this for Friday, day 5 of the week\n      # def third_friday\n      #   week = third_week\n      #   find_week_day week, 5\n      # end\n      #\n      define_method name do\n        week = send "#{week_name}_week"\n        find_week_day week, day_of_week\n      end\n    end\n  end\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    NTH_WEEK_NAMES.each do |week_name|\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  NTH_WEEK_NAMES.each_with_index do |week_name, week_number|\n    week_name_method = "#{week_name}_week"\n    define_method week_name_method do\n      nth_week week_number\n    end\n  end\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def find_week_day(week, day_of_week)\n    location_of_day_in_week = (day_of_week + week_offset_for(week)) % 7\n    week[location_of_day_in_week]\n  end\n\n  def last_week\n    last_week_starts_on_day = end_of_month - 6\n    week_of_days_starting_on last_week_starts_on_day\n  end\n\n  def nth_week(week_number)\n    number_of_days = week_number * 7\n    week_of_days_starting_on start_of_month + number_of_days\n  end\n\n  def teenth_week\n    teenth_week_starts_on_day = start_of_month + 12\n    week_of_days_starting_on teenth_week_starts_on_day\n  end\n\n  def week_of_days_starting_on(start_day)\n    last_day_of_week = start_day + 6\n    (start_day..last_day_of_week).to_a\n  end\n\n  def week_offset_for(week)\n    - week[0].wday\n  end\nend	\N	f	2	7	2014-03-14 21:01:21	2014-03-14 21:01:21	208	meetup.rb
438	20	98a41b6573fca0d67e2c61ca	superseded	ruby	meetup	# This screams for some metaprogramming!\nclass Meetup\n\n  class << self\n\n    private\n\n    def make_day_of_week_method(name, week_name, day_of_week)\n      # Does this for Friday, day 5 of the week\n      # def third_friday\n      #   week = third_week\n      #   find_week_day week, 5\n      # end\n      #\n      define_method name do\n        week = send "#{week_name}_week"\n        find_week_day week, day_of_week\n      end\n    end\n  end\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    %w(first second third fourth).each_with_index do |week_name, week_number|\n      define_method "#{week_name}_week" do\n        nth_week week_number\n      end\n\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def find_week_day(week, day_of_week)\n    location_of_day_in_week = (day_of_week + week_offset_for(week)) % 7\n    week[location_of_day_in_week]\n  end\n\n  def last_week\n    last_week_starts_on_day = end_of_month - 6\n    week_of_days_starting_on last_week_starts_on_day\n  end\n\n  def nth_week(week_number)\n    number_of_days = week_number * 7\n    week_of_days_starting_on start_of_month + number_of_days\n  end\n\n  def teenth_week\n    teenth_week_starts_on_day = start_of_month + 12\n    week_of_days_starting_on teenth_week_starts_on_day\n  end\n\n  def week_of_days_starting_on(start_day)\n    last_day_of_week = start_day + 6\n    (start_day..last_day_of_week).to_a\n  end\n\n  def week_offset_for(week)\n    - week[0].wday\n  end\nend	\N	f	2	2	2014-04-10 11:43:40	2014-04-10 11:43:40	208	meetup.rb
439	20	e6d70f30db07ff889d308416	superseded	ruby	meetup	# This screams for some metaprogramming!\nclass Meetup\n\n  private\n\n\n  def self.make_day_of_week_method(name, week_name, day_of_week)\n    # Does this for Friday, day 5 of the week\n    # def third_friday\n    #   week = third_week\n    #   find_week_day week, 5\n    # end\n    #\n    define_method name do\n      week = send "#{week_name}_week"\n      find_week_day week, day_of_week\n    end\n  end\n\n  public\n\n  Date::DAYNAMES.map {|day| day.downcase}.each_with_index do |day_name, day_of_week|\n    make_day_of_week_method day_name.gsub('day', 'teenth'), 'teenth', day_of_week\n    make_day_of_week_method "last_#{day_name}", "last", day_of_week\n\n    %w(first second third fourth).each_with_index do |week_name, week_number|\n      week_name_method = "#{week_name}_week"\n      define_method week_name_method do\n        nth_week week_number\n      end\n      private week_name_method\n\n      make_day_of_week_method "#{week_name}_#{day_name}", week_name, day_of_week\n    end\n  end\n\n  attr_accessor :month\n\n  def initialize(month, year)\n    self.month = Date.new year, month, 1\n  end\n\n  private\n\n  alias :start_of_month :month\n\n  def end_of_month\n    month.next_month.prev_day\n  end\n\n  def find_week_day(week, day_of_week)\n    location_of_day_in_week = (day_of_week + week_offset_for(week)) % 7\n    week[location_of_day_in_week]\n  end\n\n  def last_week\n    last_week_starts_on_day = end_of_month - 6\n    week_of_days_starting_on last_week_starts_on_day\n  end\n\n  def nth_week(week_number)\n    number_of_days = week_number * 7\n    week_of_days_starting_on start_of_month + number_of_days\n  end\n\n  def teenth_week\n    teenth_week_starts_on_day = start_of_month + 12\n    week_of_days_starting_on teenth_week_starts_on_day\n  end\n\n  def week_of_days_starting_on(start_day)\n    last_day_of_week = start_day + 6\n    (start_day..last_day_of_week).to_a\n  end\n\n  def week_offset_for(week)\n    - week[0].wday\n  end\nend	\N	f	0	3	2014-04-13 14:08:51	2014-04-13 14:08:51	208	meetup.rb
445	20	02b69d7955fb99ab3f4f5438	hibernating	clojure	bob	(ns bob)\n\n(defn whitespace? [str]\n  (empty? (clojure.string/trim str))) \n\n(defn question? [str]\n  (not (empty? (re-find #"\\?$" str))))\n\n(defn shouting? [str]\n  (and\n   (= (count (re-seq #"[A-Z]" str))\n      (count (re-seq #"[A-Za-z]" str)))\n   (not (= (count (re-seq #"[A-Za-z]" str)) 0))))\n\n(defn response-for [msg]\n  (cond\n   (whitespace? msg) "Fine. Be that way!"\n   (shouting? msg) "Woah, chill out!"\n   (question? msg) "Sure."\n   :else "Whatever."))	\N	f	2	1	2014-03-01 16:29:49	2014-03-01 16:29:49	212	bob.clj
451	5	035e6be225e41a3ee9737a27	superseded	ruby	anagram	class Anagram\n  def initialize(target_word)\n    @target_word = Word.new(target_word)\n  end\n\n  def match(candidate_words)\n    candidate_words.select do |candidate|\n      target_word.is_anagram_of?(Word.new(candidate))\n    end\n  end\n\nprivate\n  attr_reader :target_word\nend\n\nclass Word\n  def initialize(text)\n    @text = text\n  end\n\n  def is_anagram_of?(other_word)\n    anagram_identity == other_word.anagram_identity\n  end\n\n  def anagram_identity\n    @anagram_identity ||= count_letters\n  end\n\nprivate\n  attr_reader :text\n\n  def count_letters\n    letter_counts = Hash.new(0)\n    text.downcase.scan(/\\w/) do |letter|\n      letter_counts[letter] += 1\n    end\n    letter_counts\n  end\nend	\N	f	4	2	2014-06-21 06:41:38	2014-06-21 06:41:38	214	anagram.rb
455	5	93c1249d0eac4fabbd7fbf7f	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n \n  @spec count(list) :: non_neg_integer\n  def count(l) do\n    case l do\n      [] -> 0\n      [ _ | tail ] -> 1 + count(tail)\n    end  \n  end\n\n  @spec reverse(list) :: list\n  def reverse(l) do\n    reverse_(l, [])\n  end\n\n  def reverse_(l, acc) do\n    case l do\n      [] -> acc\n      [ head | tail ] -> reverse_(tail, [head | acc])\n    end\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    case l do\n      [] -> []\n      [ head | tail ] -> [ f.(head) | map(tail, f)]\n    end\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    case l do\n      [] -> []\n      [ head | tail ] -> if f.(head) do \n                           [ head | filter(tail, f)] \n                         else\n                           filter(tail, f)\n                         end\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    case l do\n      [] -> acc\n      [ head | tail ] -> reduce(tail, f.(head, acc), f)\n    end\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n    case a do\n      [] -> b\n      [ head | tail ] -> [ head | append(tail, b) ]\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n    case ll do\n      [] -> []\n      [ head | tail] -> append(head, concat(tail))\n    end\n  end\nend	\N	f	1	1	2014-03-15 03:43:30	2014-03-15 03:43:30	217	list_ops.exs
456	5	933e232cec7cd50ff9bbe7b7	done	elixir	list-ops	defmodule ListOps do\n\n  @spec count(list) :: non_neg_integer\n  def count(l), do: count_(l, 0)\n\n  defp count_(l, acc) do\n    case l do\n      [] -> acc\n      [_|t] -> count_(t, acc + 1)\n    end  \n  end\n\n  @spec reverse(list) :: list\n  def reverse(l), do: reverse_(l, [])\n\n  defp reverse_(l, acc) do\n    case l do\n      [] -> acc\n      [h|t] -> reverse_(t, [h|acc])\n    end\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f), do: map_(reverse(l), f, [])\n\n  defp map_(l, f, acc) do\n    case l do\n      [] -> acc\n      [h|t] -> map_(t, f, [f.(h)|acc])\n    end\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f), do: filter_(reverse(l), f, [])\n\n  defp filter_(l, f, acc) do\n    case l do\n      [] -> acc\n      [h|t] -> if f.(h) do\n                 filter_(t, f, [h|acc]) \n               else\n                 filter_(t, f, acc)\n               end\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    case l do\n      [] -> acc\n      [h|t] -> reduce(t, f.(h, acc), f)\n    end\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b), do: append_(reverse(a), b)\n\n  defp append_(a, b) do\n    case a do\n      [] -> b\n      [h|t] -> append_(t, [h|b])\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll), do: concat_(reverse(ll), [])\n\n  defp concat_(ll, acc) do\n    case ll do\n      [] -> acc\n      [h|t] -> concat_(t, append(h, acc))\n    end\n  end\nend	\N	f	1	2	2014-03-16 10:05:33	2014-03-16 10:05:33	217	list_ops.exs
469	5	689c190acb5b5eea1c3f7567	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    !common?\n  end\n\n  private\n\n  def common?\n    !divisible_by(4) || exceptional_common_year\n  end\n\n  def exceptional_common_year\n    divisible_by(100) && !divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	0	6	2014-04-28 23:14:32	2014-04-28 23:14:32	221	year.rb
470	5	53e25414d1badd1fbafad65b	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    !common?\n  end\n\n  private\n\n  def common?\n    normal_common_year || exceptional_common_year\n  end\n\n  def normal_leap_year\n    divisible_by(4)\n  end\n\n  def normal_common_year\n    !normal_leap_year\n  end\n\n  def exceptional_common_year\n    divisible_by(100) && !divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	3	7	2014-04-30 10:44:12	2014-04-30 10:44:12	221	year.rb
484	5	7e77c90f51cde6fb781a1bf0	superseded	ruby	pig-latin	module PigLatin\n  extend self\n\n  def translate(phrase)\n    phrase.split.map { |word| transform word }.join " "\n  end\n\nprivate\n\n  def transform(word)\n    prefix = prefix(word)\n    "#{word.sub(prefix, '')}#{prefix}ay"\n  end\n\n  def prefix(word)\n    long_prefix(word) || ignored_prefix(word) || word[0]\n  end\n\n  def long_prefix(word)\n    word.find_prefix "ch", "squ", "qu", "thr", "th", "sch"\n  end\n\n  def ignored_prefix(word)\n    "" if word.find_prefix("a", "e", "yt", "xr")\n  end\nend\n\nclass String\n  def find_prefix(*prefixes)\n    prefixes.find { |prefix| start_with? prefix }\n  end\nend	\N	f	1	4	2014-03-16 22:33:43	2014-03-16 22:33:43	227	pig_latin.rb
489	5	eeb28f2c08a837380320612a	superseded	javascript	meetup	Function.prototype.bindRight = function() {\n  var args = [].slice.call(arguments);\n  return function() {\n    return this.apply(this, [].slice.call(arguments).concat(args));\n  }.bind(this);\n};\n\nfunction getDay (dates, day, nth) {\n  var dates = dates.filter(function(date) {\n    return date.getDay() == day;\n  });\n  return dates[nth != null ? nth : dates.length - 1];\n};\n\nfunction setDates(year, month, a, b) {\n  return Array\n    .apply(null, {length: b - a + 1})\n    .map(function(day, i) {\n      return day = new Date(year, month, a + i);\n    }, this)\n};\n\nfunction Meetup(month, year) {\n  var maxDays = new Date(year, month + 1, 0).getDate();\n  this.dates = [year, month];\n  this.setDates = setDates.bind(this, year, month);\n  this.getTeens = getDay.bind(this, this.setDates(13, 19)).bindRight(0);\n  this.getFirst = getDay.bind(this, this.setDates(1, maxDays)).bindRight(0);\n  this.getSecond = this.getFirst.bindRight(1);\n  this.getThird = this.getFirst.bindRight(2);\n  this.getFourth = this.getFirst.bindRight(3);\n  this.getLast = getDay.bind(this, this.setDates(1, maxDays));\n};\n\nMeetup.prototype = {\n  monteenth: function() {return this.getTeens(1)},\n  tuesteenth: function() {return this.getTeens(2)},\n  wednesteenth: function() {return this.getTeens(3)},\n  thursteenth: function() {return this.getTeens(4)},\n  friteenth: function() {return this.getTeens(5)},\n  saturteenth: function() {return this.getTeens(6)},\n  sunteenth: function() {return this.getTeens(0)},\n  firstMonday: function() {return this.getFirst(1)},\n  firstTuesday: function() {return this.getFirst(2)},\n  firstWednesday: function() {return this.getFirst(3)},\n  firstThursday: function() {return this.getFirst(4)},\n  firstFriday: function() {return this.getFirst(5)},\n  firstSaturday: function() {return this.getFirst(6)},\n  firstSunday: function() {return this.getFirst(0)},\n  secondMonday: function() {return this.getSecond(1)},\n  secondTuesday: function() {return this.getSecond(2)},\n  secondWednesday: function() {return this.getSecond(3)},\n  secondThursday: function() {return this.getSecond(4)},\n  secondFriday: function() {return this.getSecond(5)},\n  secondSaturday: function() {return this.getSecond(6)},\n  secondSunday: function() {return this.getSecond(0)},\n  thirdMonday: function() {return this.getThird(1)},\n  thirdTuesday: function() {return this.getThird(2)},\n  thirdWednesday: function() {return this.getThird(3)},\n  thirdThursday: function() {return this.getThird(4)},\n  thirdFriday: function() {return this.getThird(5)},\n  thirdSaturday: function() {return this.getThird(6)},\n  thirdSunday: function() {return this.getThird(0)},\n  fourthMonday: function() {return this.getFourth(1)},\n  fourthTuesday: function() {return this.getFourth(2)},\n  fourthWednesday: function() {return this.getFourth(3)},\n  fourthThursday: function() {return this.getFourth(4)},\n  fourthFriday: function() {return this.getFourth(5)},\n  fourthSaturday: function() {return this.getFourth(6)},\n  fourthSunday: function() {return this.getFourth(0)},\n  lastMonday: function() {return this.getLast(1)},\n  lastTuesday: function() {return this.getLast(2)},\n  lastWednesday: function() {return this.getLast(3)},\n  lastThursday: function() {return this.getLast(4)},\n  lastFriday: function() {return this.getLast(5)},\n  lastSaturday: function() {return this.getLast(6)},\n  lastSunday: function() {return this.getLast(0)}\n};\n\nmodule.exports = Meetup;	\N	f	1	1	2014-04-02 18:54:53	2014-04-02 18:54:53	228	meetup.js
493	5	3e1b7ea23aceba675f4c9ec8	superseded	scala	word-count	import scala.collection.mutable\n\nclass Phrase(text: String) {\n  def wordCount():mutable.Map[String,Int] = {\n    val normalizedWords =\n      text.replaceAll("[^\\\\w\\\\s']", " ").\n        toLowerCase.\n        split(' ').\n        filter(c => !c.forall(_.isSpaceChar))\n\n    (mutable.Map[String, Int]() /: normalizedWords) {\n      (accumulator, word) => {\n        val oldCount = accumulator.getOrElse(word, 0)\n        accumulator += (word -> (oldCount + 1))\n      }\n    }\n  }\n}	\N	f	1	2	2014-03-04 08:20:53	2014-03-04 08:20:53	230	Phrase.scala
496	6	b201aed03127a1181368e6a2	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :sequence\n\n  Adenine = 'A'\n  Thymine = 'T'\n  Cytosine = 'C'\n  Guanine = 'G'\n  Uracil = 'U'\n\n  def initialize(sequence)\n    raise ArgumentError unless valid_dna?(sequence)\n    @sequence = sequence.chars\n  end\n\n  def count(nucleic_acid)\n    return nucleotide_counts unless nucleic_acid\n    if nucleic_acid =~ /^[ATCG]$/\n      nucleotide_counts[nucleic_acid]\n    elsif nucleic_acid == Uracil\n      0\n    else\n      raise ArgumentError\n    end\n  end\n\n  def nucleotide_counts\n    counts = { Adenine => 0, Thymine => 0, Cytosine => 0, Guanine => 0 }\n    counts.keys.each { |base| counts[base] = sequence.count(base) }\n    counts\n  end\n\n  private\n\n  def valid_dna?(sequence)\n    sequence =~ /\\A[ATCG]*\\z/\n  end\n\nend	\N	f	3	2	2014-04-11 01:55:20	2014-04-11 01:55:20	232	nucleotide-count.rb
498	6	ce74593ef89f203e09db9886	done	ruby	nucleotide-count	class DNA\n  attr_reader :sequence\n\n  Adenine = 'A'\n  Thymine = 'T'\n  Cytosine = 'C'\n  Guanine = 'G'\n  Uracil = 'U'\n\n  def initialize(sequence)\n    raise ArgumentError unless valid_dna?(sequence)\n    @sequence = sequence.chars\n  end\n\n  def count(nucleotide)\n    return nucleotide_counts unless nucleotide\n    if nucleotide =~ /^[ATCG]$/\n      nucleotide_counts[nucleotide]\n    elsif nucleotide == Uracil\n      0\n    else\n      raise ArgumentError\n    end\n  end\n\n  def nucleotide_counts\n    counts = { Adenine => 0, Thymine => 0, Cytosine => 0, Guanine => 0 }\n    counts.keys.each { |base| counts[base] = sequence.count(base) }\n    counts\n  end\n\n  private\n\n\n  def valid_dna?(sequence)\n    sequence =~ /\\A[ATCG]*\\z/\n  end\n\nend	\N	f	2	3	2014-05-06 07:40:57	2014-05-06 07:40:57	232	nucleotide-count.rb
506	6	b99d46a304b9889f507ee7ce	done	ruby	word-count	class Phrase\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def words\n      text.downcase.split(/\\W+/)\n    end\nend	\N	f	3	4	2014-05-25 03:24:42	2014-05-25 03:24:42	236	word-count.rb
509	6	bc06fcdc22fd31d21481da47	hibernating	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  RELATIVE_ORBITAL_PERIODS = {\n    earth:   1.0,\n    mercury: 0.2408467,\n    venus:   0.61519726,\n    mars:    1.8808158,\n    jupiter: 11.862615,\n    saturn:  29.447498,\n    uranus:  84.016846,\n    neptune: 164.79132\n  }.freeze\n\n  def initialize(seconds)\n    @seconds = seconds\n\n    RELATIVE_ORBITAL_PERIODS.each do |planet, relative_period|\n     self.class.send :define_method, "on_#{planet}" do\n        (seconds_in_earth_year / relative_period).round(2)\n      end\n    end\n  end\n\n  private\n  def seconds_in_earth_year\n    seconds.to_f / 60 / 60 / 24 / 365.25\n  end\nend	\N	f	0	1	2014-02-03 02:59:49	2014-02-03 02:59:49	238	space-age.rb
518	6	a1024e524eb195ff8ea2b284	superseded	elixir	allergies	defmodule Allergies do\n\n  use Bitwise, only_operators: true\n\n  @allergy_flags [\n    { "eggs", 1 },\n    { "peanuts", 2 },\n    { "shellfish", 4 },\n    { "strawberries", 8 },\n    { "tomatoes", 16 },\n    { "chocolate", 32 },\n    { "pollen", 64 },\n    { "cats", 128 }\n  ]\n\n  @allergy_dict HashDict.new @allergy_flags\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergy with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(score) do\n    Enum.filter_map(@allergy_flags, &flag_set?(score, elem(&1, 1)), &elem(&1, 0))\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'score' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(score, item) do\n    flag = Dict.get(@allergy_dict, item, 0)\n    flag_set?(score, flag)\n  end\n\n  defp flag_set?(value, flag), do: (value &&& flag) == flag\n\nend	\N	f	3	3	2014-04-01 07:22:39	2014-04-01 07:22:39	244	allergies.exs
525	6	14c6364986527d6a75ccbdc8	superseded	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare([], []), do: :equal\n  def compare(a, a),   do: :equal\n  def compare([], _),  do: :sublist\n  def compare(_, []),  do: :superlist\n  def compare(a, b) do\n    cond do\n      length(a) < length(b) and contains(a, b) -> :sublist\n      length(a) > length(b) and contains(b, a) -> :superlist\n      true -> :unequal\n    end\n  end\n\n  defp contains(a, b) do\n    cond do\n      length(a) > length(b) -> false\n      a === Enum.slice(b, 0, length(a)) -> true\n      true -> (\n        [_ | tb] = b\n        contains(a, tb)\n      )\n    end\n  end\nend\n\n\n# defmodule Sublist do\n#   @doc """\n#   Returns whether the first list is a sublist or a superlist of the second list\n#   and if not whether it is equal or unequal to the second list.\n#   """\n#   def compare([], []), do: :equal\n#   def compare([], _), do: :sublist\n#   def compare(_, []), do: :superlist\n#   def compare(a, b) do\n#     cond do\n#       a === b -> :equal\n#       length(a) < length(b) and contains(a, b, a, b) -> :sublist\n#       length(a) > length(b) and contains(b, a, b, a) -> :superlist\n#       true -> :unequal\n#     end\n#   end\n\n#   defp contains([], _, _, _), do: true\n#   defp contains(_, [], _, _), do: false\n#   defp contains([sub_a_h | sub_a_t], [sub_b_h | sub_b_t], a, [b_h | b_t]) do\n#     cond do\n#       sub_a_h === sub_b_h -> contains(sub_a_t, sub_b_t, a, [b_h | b_t])\n#       true -> contains(a, b_t, a, b_t)\n#     end\n#   end\n# end	\N	f	0	1	2014-02-07 04:07:02	2014-02-07 04:07:02	248	sublist.exs
528	6	8f39572d8d9c56b7e4bdfa7a	superseded	ruby	prime-factors	module PrimeFactors\n  def self.for nr\n    res = []\n    possible_primes_below(nr) do |divisor|\n      while nr >= divisor && nr % divisor == 0\n        res << divisor\n        nr /= divisor\n      end\n      break if nr == 1\n    end\n    res\n  end\n\n  def self.possible_primes_below nr\n    yield 2\n    yield 3\n    yield 5\n    2.upto(nr/6 + 1) do |x|\n      yield 6*x + 1\n      yield 6*x + 5\n    end\n  end\nend	\N	f	3	2	2014-04-13 14:41:52	2014-04-13 14:41:52	249	prime-factors.rb
532	8	6122d834a0bc1fd3aa30e554	pending	ruby	triangle	class Triangle\n\n  attr_reader :left, :right, :bottom, :sides\n\n  def initialize(left, right, bottom)\n    @left = left\n    @right = right\n    @bottom = bottom\n    @sides = [left, right, bottom]\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 }\n    raise TriangleError if inequal?\n    return :equilateral if @sides.uniq.count == 1\n    return :isosceles if @sides.uniq.count == 2\n    return :scalene if @sides.uniq.count == 3\n  end\n\n  def inequal?\n    max = @sides.sort.last\n    if @sides.sort[0] + @sides.sort[1] <= max\n      return true\n    else\n      false\n    end\n  end\n\nend\n\nclass TriangleError < StandardError\n\nend	\N	f	1	1	2014-04-09 05:20:15	2014-04-09 05:20:15	251	triangle.rb
543	8	b38b9750ab1446c3c450e453	superseded	haskell	nth-prime	module Prime\n( nth\n) where\n\nnth :: Int -> Integer\nnth i = primes !! i\n  where\n    primes    = 2:3:[x | x <- [5,7..], isPrime x]\n    isPrime n = not $ any (\\x -> n' `divisibleBy` x || n' `divisibleBy` (x+2)) [5..n']\n      where\n        n' = ceiling $ sqrt (fromIntegral n :: Double)\n        w `divisibleBy` v = w `mod` v == 0	\N	f	3	1	2014-03-23 10:06:42	2014-03-23 10:06:42	256	Prime.hs
550	8	91b57445e7effe943328ccd2	superseded	ruby	luhn	class Luhn\n\n  def self.create(number)\n    if new(number).valid?\n      number\n    else\n      modify_number_until_valid(number)\n    end    \n  end\n\n  attr_reader :number, :split_numbers\n  private :number, :split_numbers\n  \n  def initialize(number)\n    @number = number\n    @split_numbers = number.to_s.split("").map(&:to_i)\n  end\n\n  def addends\n    split_numbers.reverse.map.with_index do |num, idx|\n      if idx.odd?\n        new_number = num * 2 \n        ensure_number_does_not_exceed_nine(new_number)\n      else\n        num\n      end\n    end.reverse\n  end\n\n  def checksum\n    addends.reduce(0, :+)\n  end\n\n  def valid?\n    checksum % 10 == 0\n  end\n\n  private\n\n    def self.modify_number_until_valid(number)\n      number *= 10\n      until new(number).valid?\n        number += 1\n      end\n      number\n    end\n\n    def ensure_number_does_not_exceed_nine(new_number)\n      if new_number >= 10\n        new_number -= 9\n      else\n        new_number\n      end\n    end\n\nend	\N	f	3	1	2014-04-26 16:18:57	2014-04-26 16:18:57	258	luhn.rb
555	8	7330f02011856e05bcafe545	superseded	ruby	roman-numerals	class Integer\n  ROMAN_NUMERALS = [[1000,  "M"],\n                    [ 900, "CM"],\n                    [ 500,  "D"],\n                    [ 400, "CD"],\n                    [ 100,  "C"],\n                    [  90, "XC"],\n                    [  50,  "L"],\n                    [  40, "XL"],\n                    [  10,  "X"],\n                    [   9, "IX"],\n                    [   5,  "V"],\n                    [   4, "IV"],\n                    [   1,  "I"]]\n\n  def to_roman\n    val = self\n    ROMAN_NUMERALS.each.reduce("") do |acc, rn|\n      value, str = rn[0], rn[1]\n      while val >= value\n        val -= value\n        acc << str\n      end\n    end.join("")\n  end\n\nend	\N	f	4	2	2014-05-28 10:40:09	2014-05-28 10:40:09	259	roman.rb
557	8	c87478a51d89d19f2d6bf072	pending	clojure	beer-song	(ns beer\n  (:require [clojure.string :refer [join]]))\n\n(defn n-bottles-of-beer [n]\n  (case n\n    0 "no more bottles of beer"\n    1 "1 bottle of beer"\n    (format "%d bottles of beer" n)))\n\n(defn verse [n]\n  (case n\n    0 "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    1 "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    (let [nbottles (n-bottles-of-beer n)\n          nsub1-bottles (n-bottles-of-beer (dec n))]\n      (str nbottles " on the wall, "\n           nbottles ".\\nTake one down and pass it around, "\n           nsub1-bottles " on the wall.\\n"))\n    ))\n\n(defn sing\n  ([n] (sing n 0))\n  ([n m]\n     (join "\\n" (map verse (range n (dec m) -1)))))	\N	f	3	1	2014-05-11 12:53:45	2014-05-11 12:53:45	261	beer.clj
569	9	3de37ac88406eafdafadb28d	done	ruby	word-count	class Phrase\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    frequency = Hash.new(0)\n    string_to_array.each do |word|\n      frequency[word] += 1\n    end\n    frequency\n  end\n\n  def string_to_array\n    phrase.downcase.scan(/\\w+/)\n  end\nend	\N	f	1	3	2014-03-13 18:32:00	2014-03-13 18:32:00	268	word-count.rb
571	9	17e3f918aab6cbbe7f318a4f	superseded	ruby	word-count	class Phrase\n  attr_accessor:phrase \n\n  def initialize(phrase="")\n    @phrase=phrase\n  end\n\n  def word_count\n    separated_string=phrase.downcase.scan(/[\\w']+/)\n    frequency=Hash.new\n    separated_string.each do |word|\n      frequency[word] = 0\n    end\n    separated_string.each do |word|\n      frequency[word] +=1\n    end\n      return frequency\n  end    \nend	\N	f	1	1	2014-05-10 04:09:40	2014-05-10 04:09:40	268	word-count.rb
577	9	dd5d4ba99a9eefe5333ccd16	done	ruby	nucleotide-count	require 'pry'\n\nclass DNA\n  attr_reader :molecules\n  attr_accessor :nucleotides, :count\n\n  def initialize(molecules)\n    @molecules = molecules.split("")\n    validation\n    @count = 0\n    @nucleotides = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0 }\n    @nucleotides.default = 0\n    incrementing(@molecules)\n  end\n\n  def validation\n    valid_molecules = %w(A T C G)\n    validated_molecules =  @molecules.all? { |m| valid_molecules.include?(m) }\n    unless validated_molecules\n      raise ArgumentError\n    end\n  end\n\n  def count(molecule)\n    unless ["A", "T", "C", "G", "U"].include?(molecule)\n      raise ArgumentError\n    else\n      @nucleotides[molecule]\n    end\n  end\n\n  def incrementing(molecule)\n    @molecules.each do |s|\n      if @nucleotides.include?(s)\n        @nucleotides[s] += 1\n      end\n    end\n  end\n\n  def nucleotide_counts\n    @nucleotides\n  end\nend	\N	f	1	1	2014-04-09 20:27:57	2014-04-09 20:27:57	273	dna.rb
580	9	8b4627a1c923ca3447ba26e8	superseded	ruby	bob	# Responses hash\nRESPONSES = {\n   :question  => 'Sure.',\n   :statement => 'Whatever.',\n   :shout     => 'Woah, chill out!',\n   :silence   => 'Fine. Be that way!'\n}\n\n# Meet Bob, he is a man of few words, try saying something to him\nclass Bob\n   # (public) hey - determines appropriate response to message\n   def hey (msg)\n      if silence? msg\n         RESPONSES[:silence]\n      elsif shout? msg\n         RESPONSES[:shout]\n      elsif question? msg\n         RESPONSES[:question]\n      else\n         RESPONSES[:statement]\n      end\n   end\n\n   private\n   # (private) shout? - tests whether a message is a shout\n   def shout? (msg)\n      msg.upcase == msg\n   end\n   # (private) silence? - tests if a message is silence\n   def silence? (msg)\n      msg.nil? || msg.empty?\n   end\n   # (private) question? - tests whether message is a question\n   def question? (msg)\n      msg.end_with? "?"\n   end\nend	\N	f	2	2	2014-05-30 01:50:48	2014-05-30 01:50:48	274	bob.rb
582	9	b3517eaac616e32c5d17132d	superseded	ruby	bob	# Generic Person class, outlines basic behavior of a person\nclass Person\n   @@Responses = { }\n   # (public) hey - determines appropriate response to message\n   def hey (msg)\n      if silence? msg\n         @@Responses[:silence]\n      elsif shout? msg\n         @@Responses[:shout]\n      elsif question? msg\n         @@Responses[:question]\n      else\n         @@Responses[:statement]\n      end\n   end\n\n   private\n   # (private) shout? - tests whether a message is a shout\n   def shout? (msg)\n      msg.upcase == msg\n   end\n   # (private) silence? - tests if a message is silence\n   def silence? (msg)\n      msg.nil? || msg.empty?\n   end\n   # (private) question? - tests whether message is a question\n   def question? (msg)\n      msg.end_with? "?"\n   end\nend\n# Bob is a person, he has his own personal responses\nclass Bob < Person\n   # Bob's specific responses\n   @@Responses = {\n      :question  => 'Sure.',\n      :statement => 'Whatever.',\n      :shout     => 'Woah, chill out!',\n      :silence   => 'Fine. Be that way!'\n   }\nend	\N	f	1	3	2014-06-04 11:41:47	2014-06-04 11:41:47	274	bob.rb
593	9	af5ea79a5b169134166576f6	superseded	javascript	anagram	/*var Anagram = function(word) {\n  this.word = word;\n};\n\n// Sort a string value\nAnagram.prototype.sortString = function(value) {\n  // Capital letters are sorted ahead of lc\n  // So convert cases before sort\n  return value.toLowerCase().split('').sort().join('');\n}\n\n// Match against list\nAnagram.prototype.match = function(list) {\n  // Check for empty case\n  if (list.length === 0) return [];\n\n  var matches = [];\n  // Cache sorted version of our original word\n  var sortedWord = this.sortString(this.word);\n  // Cache lowercased version\n  var lowerCasedWord = this.word.toLowerCase();\n  // Cache array length (No optimization on Opera or IE)\n  for (var i = 0, listLen = list.length; i < listLen; i++) {\n    var currAnagram = list[i];\n    var sortedAnagram = this.sortString(currAnagram);\n    // Same words may have different cases\n    var isOwnAnagram = (lowerCasedWord === currAnagram.toLowerCase());\n\n    if (sortedAnagram === sortedWord && !isOwnAnagram) {\n      matches.push(list[i]);\n    }\n  }\n\n  return matches;\n}*/\n\n\nfunction Anagram (word) {\n  'use strict';\n\n  this.normalizedWord = normalize(word);\n}\n\nAnagram.prototype.match = function (wordList) {\n  return wordList.filter(this.isAnagram, this);\n};\n\nAnagram.prototype.isAnagram = function (word) {\n  return (this.normalizedWord === normalize(word));\n};\n\nfunction normalize(word) {\n    return word.split('').sort().join('');\n}\n\nmodule.exports = Anagram;	\N	f	0	3	2014-04-07 06:51:00	2014-04-07 06:51:00	278	anagram.js
805	15	604ab1394adf59b04353e489	done	haskell	word-count	module WordCount(wordCount) where\n\nimport Data.Map.Strict(Map, insertWith, empty)\nimport Data.Char(toLower, isAlphaNum)\nimport Data.List.Split(wordsBy)\nimport Data.List(foldl')\n\nwordCount :: String -> Map String Int\nwordCount xs = wordCount' (words' xs) empty\n\nwords' :: String -> [String]\nwords' xs = wordsBy (not.isAlphaNum) $ map toLower xs\n\nwordCount' :: [String] -> Map String Int -> Map String Int\nwordCount' xs m = foldl' (\\m x -> insertWith (+) x 1 m) m xs	\N	f	4	2	2014-06-21 18:11:25	2014-06-21 18:11:25	371	WordCount.hs
598	9	19baf9adab99255e03dbb152	hibernating	javascript	beer-song	"use strict";\n\nvar Beer = (function() {\n\n  var typeOfVerse = function (bottles) {\n    switch(bottles)\n    {\n    case 0:\n      return "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n";\n    case 1:\n      return "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n";\n    default:\n      return bottles + " bottles of beer on the wall, " + bottles + " bottles of beer.\\n" +\n      "Take one down and pass it around, " + (bottles - 1) + " bottle" + ((bottles - 1) === 1 ? "" : "s" ) + " of beer on the wall.\\n";\n    }\n  };\n\n  return {\n\n    verse: function (bottles) {\n      return typeOfVerse(bottles);\n    },\n    sing: function(bottlesOne, bottlesTwo) {\n      var verses = '';\n\n      while (bottlesOne >= 0) {\n        if (verses !== '')\n          verses += '\\n';\n        verses += this.verse(bottlesOne);\n        bottlesOne--;\n        if (bottlesOne < bottlesTwo) break;\n      }\n\n      return verses;\n    }\n\n  };\n\n})();\n\nmodule.exports = Beer;	\N	f	2	1	2014-05-21 19:26:11	2014-05-21 19:26:11	281	beer-song.js
602	10	5b4bf723e2a7e7b95705af1b	done	ruby	bob	class Bob\n  def hey(message)\n    if is_a_question?(message)\n      'Sure.'\n    elsif is_yelling?(message)\n      'Woah, chill out!'\n    elsif is_not_a_statement?(message)\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def is_a_question?(message)\n    return false if is_yelling?(message)\n    message.end_with? '?'\n  end\n\n  def is_yelling?(message)\n    return false if is_not_a_statement?(message)\n    if message == message.upcase && message.match(/[A-Z]/)\n      true\n    else\n      false\n    end\n  end\n\n  def is_not_a_statement?(message)\n    if message.strip.empty? || message.nil?\n      true\n    else\n      false\n    end\n  end\nend	\N	f	8	2	2014-06-30 07:52:45	2014-06-30 07:52:45	283	bob.rb
606	10	8fe3ea0ff530dfae47f133b3	superseded	javascript	anagram	"use strict";\n\nfunction Anagram (word) {\n\n  var anagram_word = word;\n\n  // private methods\n\n  var alphabetize = function (word) {\n    return word.toLowerCase().split('').sort().join('');\n  };\n\n  var stringify = function (obj) {\n    return JSON.stringify(obj);\n  };\n\n  var compare_words = function(word1, word2) {\n    if( stringify(alphabetize(word1)) === stringify(alphabetize(word2)) ) {\n      return true;\n    }\n  };\n\n  var anagramFinder = function (word_array) {\n    var winners = [];\n    word_array.forEach( function (word) {\n      if( compare_words(word, anagram_word) ) {\n        winners.push(word);\n      }\n    });\n    return winners;\n  };\n\n  // public methods\n  this.match = function (word_array) {\n\n    return anagramFinder(word_array);\n  };\n}\n\nmodule.exports = Anagram;	\N	f	4	1	2014-06-26 04:35:09	2014-06-26 04:35:09	286	anagram.js
613	10	6a30d115495503252d5ebdd2	superseded	haskell	kindergarten-garden	module Garden \n\t(\n\t  garden\n\t, defaultGarden\n\t, lookupPlants\n\t, Plant(..)\n\t) where\n\nimport Data.Map (Map, fromList, findWithDefault) \nimport Data.List (transpose, sort)\nimport Data.List.Split (splitOn, chunksOf)\n\ndata Plant = Grass | Clover | Radishes | Violets deriving (Show, Eq)\n\ncharToPlant :: Char -> Plant\ncharToPlant 'G' = Grass\ncharToPlant 'C' = Clover\ncharToPlant 'R' = Radishes\ncharToPlant 'V' = Violets\n\nstringToPlants :: String -> [Plant]\nstringToPlants = map charToPlant\n\ngarden :: [String] -> String -> Map String [Plant]\ngarden children diagram = fromList $ zip children' cups\n  where rows = splitOn "\\n" diagram\n        cups = map stringToPlants . map concat . transpose . map (chunksOf 2) $ rows\n        children' = sort children\n\ndefaultGarden :: String -> Map String [Plant]\ndefaultGarden = garden ["Alice", "Bob", "Charlie", "David", \n\t\t\t\t\t    "Eve", "Fred", "Ginny", "Harriet", \n\t\t\t\t\t    "Ileana", "Joseph", "Kincaid", "Larry"]\n\nlookupPlants :: String -> Map String [Plant] -> [Plant]\nlookupPlants = findWithDefault []	\N	f	2	2	2014-06-15 23:22:25	2014-06-15 23:22:25	290	Garden.hs
614	10	39f381cab0d13e6411de715d	superseded	haskell	kindergarten-garden	module Garden \n\t(\n\t  garden\n\t, defaultGarden\n\t, lookupPlants\n\t, Plant(..)\n\t) where\n\nimport Data.Map (Map, fromList, findWithDefault) \nimport Data.List (transpose, sort)\nimport Data.List.Split (splitOn, chunksOf)\n\ndata Plant = Grass | Clover | Radishes | Violets deriving (Show, Eq)\n\ncharToPlant :: Char -> Plant\ncharToPlant 'G' = Grass\ncharToPlant 'C' = Clover\ncharToPlant 'R' = Radishes\ncharToPlant 'V' = Violets\n\ngarden :: [String] -> String -> Map String [Plant]\ngarden children diagram = fromList $ zip (sort children) cups\n  where rows = splitOn "\\n" diagram\n        firstRow = rows !! 0\n        secondRow = rows !! 1\n        cups = map (map charToPlant . concat) $ transpose $ [chunksOf 2 firstRow, chunksOf 2 secondRow]\n\ndefaultGarden :: String -> Map String [Plant]\ndefaultGarden = garden ["Alice", "Bob", "Charlie", "David", \n\t\t\t\t\t    "Eve", "Fred", "Ginny", "Harriet", \n\t\t\t\t\t    "Ileana", "Joseph", "Kincaid", "Larry"]\n\nlookupPlants :: String -> Map String [Plant] -> [Plant]\nlookupPlants = findWithDefault []	\N	f	2	1	2014-06-19 02:48:32	2014-06-19 02:48:32	290	Garden.hs
623	10	aff9792ce62d9dadae55f000	pending	ruby	scrabble-score	class Scrabble\n  \n  private\n  def self.mount_scoreboard\n    @scores = {}\n    ('A'..'Z').each do |letter|\n      @scores[letter.to_sym] = 1 if  %w[A E I O U L N R S T].include? letter\n      @scores[letter.to_sym] = 2 if  %w[D G].include? letter\n      @scores[letter.to_sym] = 3 if  %w[B C M P].include? letter\n      @scores[letter.to_sym] = 4 if  %w[F H V W Y].include? letter\n      @scores[letter.to_sym] = 5 if  %w[K].include? letter\n      @scores[letter.to_sym] = 8 if  %w[J X].include? letter\n      @scores[letter.to_sym] = 10 if  %w[Q Z].include? letter\n    end\n  end\n\n  public\n  def initialize(word)\n    @word = word\n  end\n\n  def self.score(word)\n    return 0 if word.nil?\n    mount_scoreboard\n    word.upcase.strip.split('').inject(0) {|score, n| score + @scores[n.to_sym]}\n  end\n\n  def score\n    Scrabble.score(@word)\n  end\n\nend	\N	f	1	1	2014-06-21 01:13:14	2014-06-21 01:13:14	294	scrabble.rb
631	11	f3f61b365f6b138e05675373	superseded	haskell	robot-simulator	module Robot\n  ( Bearing(..)\n  , Robot\n  , mkRobot\n  , coordinates\n  , simulate\n  , bearing\n  , turnRight\n  , turnLeft\n  ) where\n\nimport Data.List (foldl')\nimport Control.Arrow (first, second)\n\ntype Coordinates = (Int, Int)\n\ndata Bearing = North\n             | East\n             | South\n             | West\n             deriving (Eq, Enum, Show)\n\ndata Robot = Robot { bearing     :: Bearing\n                   , coordinates :: Coordinates\n                   } deriving (Eq, Show)\n\nmkRobot :: Bearing -> Coordinates -> Robot\nmkRobot dir coord = Robot { bearing = dir, coordinates = coord }\n\nmove :: Robot -> Coordinates\nmove (Robot direction coord) = step coord\n  where step = case direction of\n          North -> second succ\n          East  -> first succ\n          South -> second pred\n          West  -> first pred\n\nsimulate :: Robot -> String -> Robot\nsimulate = foldl' step\n  where step robo instruction = case instruction of\n          'L' -> robo { bearing = turnLeft (bearing robo) }\n          'R' -> robo { bearing = turnRight (bearing robo) }\n          'A' -> robo { coordinates = move robo }\n          _   -> error "invalid instruction"\n\nturnRight :: Bearing -> Bearing\nturnRight West = North\nturnRight x    = succ x\n\nturnLeft :: Bearing -> Bearing\nturnLeft North = West\nturnLeft x     = pred x	\N	f	2	1	2014-05-05 08:06:37	2014-05-05 08:06:37	300	Robot.hs
647	11	cb3ffa04f845dbd517707671	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char (toUpper)\n\nsing :: Int -> Int -> String\nsing to from = unlines . reverse $ map verse [from..to]\n\nverse :: Int -> String\nverse = unlines . sequence [sentence . firstLine, sentence . secondLine]\n\nsentence :: String -> String\nsentence (x:xs) = toUpper x : (xs ++ ".")\n\nfirstLine :: Int -> String\nfirstLine n = bottlesOfBeerOnTheWall n ++ ", " ++ bottlesOfBeer n\n\nsecondLine :: Int -> String\nsecondLine 0 = "go to the store and buy some more, " ++ bottlesOfBeerOnTheWall 99\nsecondLine 1 = "take it down and pass it around, " ++ bottlesOfBeerOnTheWall 0\nsecondLine n = "take one down and pass it around, " ++ bottlesOfBeerOnTheWall (n - 1)\n\nbottlesOfBeer :: Int -> String\nbottlesOfBeer n = bottles n ++ " of beer"\n\nbottlesOfBeerOnTheWall :: Int -> String\nbottlesOfBeerOnTheWall n = bottlesOfBeer n ++ " on the wall"\n\nbottles :: Int -> String\nbottles 0 = "no more bottles"\nbottles 1 = "1 bottle"\nbottles n = show n ++ " bottles"	\N	f	3	1	2014-06-17 16:18:43	2014-06-17 16:18:43	304	beer-song.hs
667	12	3b579bfbcf3c27320b6e410b	superseded	ruby	bob	class Bob\n\n  def hey(words)\n    words = words.gsub(" ", "")\n\n    if silence?(words)\n      "Fine. Be that way!"\n    elsif question?(words)\n      "Sure."\n    elsif shout?(words)\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  def silence?(words)\n    words.size == 0\n  end\n\n  def question?(words)\n    !shout?(words) && words[-1] == "?"\n  end\n\n  def shout?(words)\n    !silence?(words) && words.upcase == words\n  end\n\nend	\N	f	1	3	2014-03-20 01:41:19	2014-03-20 01:41:19	317	bob.rb
668	12	501060a2486a981b688c9263	superseded	ruby	bob	module UnimplementedLanguageProcessing\n  def address(communication)\n    "Sorry, I'm not programmed for language processing yet."\n  end\nend\n\nclass Baby; include UnimplementedLanguageProcessing; end\nclass Child; include UnimplementedLanguageProcessing; end\nclass YoungAdult; include UnimplementedLanguageProcessing; end\nclass MiddleAged; include UnimplementedLanguageProcessing; end\nclass Elderly; include UnimplementedLanguageProcessing; end\n\n\nclass Teenager\n\n  RESPONSES = {\n    :silence => "Fine. Be that way!",\n    :question => "Sure.",\n    :shout => "Woah, chill out!"\n  }\n\n  def address(communication)\n    respond CommunicationAnalyzer.new(communication).type\n  end\n\n  def respond(communication_type)\n    RESPONSES[communication_type] || "Whatever."\n  end\n\nend\n\n\nclass Person\n\n  attr_accessor :age\n\n  AGE_GROUPS = {\n    (0..3) => Baby,\n    (4..12) => Child,\n    (13..19) => Teenager,\n    (20..35) => YoungAdult,\n    (36..64) => MiddleAged,\n    (65..1000) => Elderly\n  }\n\n  def initialize(options = {})\n    @age = options[:age] || 30\n  end\n\n  def age_group\n    AGE_GROUPS[AGE_GROUPS.keys.find {|group| group.include? age}]\n  end\n\n  def address(communication)\n    age_group.new.address(communication)\n  end\n\nend\n\n\nclass CommunicationAnalyzer\n\n  attr_reader :communication\n\n  def initialize(communication)\n    @communication = communication.gsub(" ", "")\n  end\n\n  def type\n    if silence?\n      :silence\n    elsif question?\n      :question\n    elsif shout?\n      :shout\n    end\n  end\n\n  def shout?\n    !silence? && communication.upcase == communication\n  end\n\n  def question?\n    !shout? && communication[-1] == "?"\n  end\n\n  def silence?\n    communication.size == 0\n  end\n\nend	\N	f	0	1	2014-03-30 16:44:09	2014-03-30 16:44:09	317	bob.rb
677	12	a19d5e375f0e41c7ff69973f	superseded	haskell	bob	module Bob \n   (responseFor)\nwhere\n\nimport Data.Char\n\nresponseFor s =\n  if null (filter (not.isSpace) s)\n    then "Fine. Be that way."\n    else if (null (filter isLower . filter isAlpha $ s))\n           then "Woah, chill out!"\n           else if (length s > 0 && (head . reverse $ s) == '?')\n                  then "Sure."\n                  else "Whatever."	\N	f	1	1	2014-02-16 21:19:43	2014-02-16 21:19:43	321	bob.hs
679	12	ed3bc791ae357eb7c968efb5	superseded	haskell	bob	module Bob \n   (responseFor)\nwhere\n\nimport Data.Char\nimport Control.Monad.Trans.Either\nimport Control.Monad.Identity\nimport Control.Monad\n\nresponseFor s = either id (const []) . runIdentity . runEitherT $ do\n    whenAsked (null . filter (not.isSpace)) $\n       answer "Fine. Be that way."\n    whenAsked (null . filter isLower . filter isAlpha) $\n       answer "Woah, chill out!"\n    whenAsked ((== '?') . last) $\n       answer "Sure."\n    answer "Whatever."\n  where \n    whenAsked condition answer = do\n        when (condition s) $ answer\n    answer = left	\N	f	1	4	2014-02-20 10:27:26	2014-02-20 10:27:26	321	bob.hs
691	12	608eac98ccce56471e2a2deb	done	go	roman-numerals	// Package romannumerals implements ToRomanNumeral.\r\npackage romannumerals\r\n\r\ntype kvp struct {\r\n\tk int\r\n\tv string\r\n}\r\n\r\nvar correlations = []kvp{\r\n\tkvp{1000, "M"},\r\n\tkvp{900, "CM"},\r\n\tkvp{500, "D"},\r\n\tkvp{400, "CD"},\r\n\tkvp{100, "C"},\r\n\tkvp{90, "XC"},\r\n\tkvp{50, "L"},\r\n\tkvp{40, "XL"},\r\n\tkvp{10, "X"},\r\n\tkvp{9, "IX"},\r\n\tkvp{5, "V"},\r\n\tkvp{4, "IV"},\r\n\tkvp{1, "I"},\r\n}\r\n\r\n// ToRomanNumeral takes an arabic integer.\r\n// Returns the corresponding roman numeral.\r\nfunc ToRomanNumeral(arabic int) (roman string) {\r\n\tfor arabic > 0 {\r\n\t\tfor _, numeral := range correlations {\r\n\t\t\tif arabic-numeral.k >= 0 {\r\n\t\t\t\tarabic -= numeral.k\r\n\t\t\t\troman += numeral.v\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r	\N	f	1	3	2014-04-17 13:35:33	2014-04-17 13:35:33	324	roman_numerals.go
711	12	0e2d1154cf087d72fc30a2d2	superseded	go	grains	/*\r\nPackage grains implements:\r\n\r\nSquare; a function that takes an integer\r\nrepresenting a square postion on a chessboard.\r\nReturns a grain count such that grains = 2^(number - 1).\r\n\r\nTotal; a function that returns the total number\r\nof grains on a chess board, such that total grains = 2^(64-1)\r\n*/\r\npackage grains\r\n\r\nfunc Square(number int) uint64 {\r\n\treturn 1 << uint64(number-1)\r\n}\r\n\r\nfunc Total() uint64 {\r\n\treturn (1 << 64) - 1\r\n}\r	\N	f	1	7	2014-05-01 14:44:56	2014-05-01 14:44:56	328	grains.go
714	12	b72cde7422248cda4ffafe9b	superseded	javascript	bob	"use strict";\nvar XRegExp = require('./xregexp');\n\n/**\n * Tone detector helper. I would put that in a separate file\n * but exercism currently allows submitting only one file.\n * @type {Object}\n */\nvar ToneDetector = {\n    /**\n     * A set of detector functions for each tone type\n     * @type {Object}\n     */\n    detectors: {\n        silence: function(s) {\n            return s === '';\n        },\n        question: function(s) {\n            return s.length && s[s.length -1] === '?';\n        },\n        yell: function(s) {\n            // if the string contains at least one letter\n            return XRegExp('\\\\p{L}+').test(s) && s.toUpperCase() === s;\n        }\n    },\n\n    /**\n     * Order of detector application\n     * @type {Array}\n     */\n    detectorOrder: [\n        'silence',\n        'yell',     // cause a forceful question is still yelling\n        'question'\n    ],\n\n    /**\n     * For a given phrase returns its tone\n     * @param  {String} phrase Phrase in normalized form (e.g. trimmed)\n     * @return {String} tone\n     */\n    getTone: function(phrase) {\n        var checkList = this.detectorOrder,\n            detectors = this.detectors,\n            result = 'other';\n\n        checkList.every(function(toneType) {\n            if(detectors[toneType](phrase)) {\n                result = toneType;\n                return false;\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n};\n\nvar Bob = function() {};\n/**\n * @class Bob Our friend\n */\nBob.prototype = {\n    constructor: Bob,\n\n    /**\n     * Bob's very limited vocabulary\n     * @static\n     * @type {Object}\n     */\n    Replies: {\n        question:   'Sure.',\n        yell:       'Woah, chill out!',\n        silence:    'Fine. Be that way!',\n        other:      'Whatever.'\n    },\n\n    /**\n     * Say something to Bob and see what he says\n     * @param  {String} phrase Your phrase that is a string or converts to one\n     * @return {String}        Bob's reply\n     */\n    hey: function(phrase) {\n        phrase = phrase && phrase.toString().trim();\n\n        var tone = ToneDetector.getTone(phrase);\n\n        return this.Replies[tone];\n    },\n\n    getPhraseType: function(phrase) {\n        var ending = phrase[phrase.length - 1],\n            phraseType;\n\n        switch(ending) {\n            case '!':\n                phraseType = 'yell';\n                break;\n            case '?':\n                phraseType = 'question';\n                break;\n            case '':\n                phraseType = 'silence';\n                break;\n            default:\n                phraseType = 'other';\n                break;\n        }\n\n        return phraseType;\n    }\n};\n\nmodule.exports = Bob;	\N	f	1	1	2014-02-22 16:19:33	2014-02-22 16:19:33	329	bob.js
918	22	a23041bf8d7ad39b7f965b24	pending	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn response-for [words]\n  (cond\n    (string/blank? words) "Fine. Be that way!"\n\n    (and (re-find #"[A-Z]" words)\n         (= (string/upper-case words) words)) "Woah, chill out!"\n\n    (re-find #"\\?$" words) "Sure."\n\n    :else "Whatever."))	\N	f	4	3	2014-05-29 17:48:13	2014-05-29 17:48:13	425	bob.clj
720	13	71508a6cd839ed6e0b4e3f43	superseded	go	atbash-cipher	package atbash\n\nimport (\n\t"bufio"\n\t"bytes"\n)\n\nvar mappings = map[rune]rune{}\n\nfunc init() {\n\t// letters encypher to their pair in an inverted alphabet\n\tfor i := 0; i <= int('z'-'a'); i++ {\n\t\tmappings[rune('a'+i)] = rune('z' - i)\n\t}\n\n\t// numbers encypher to themselves\n\tfor i := '0'; i <= '9'; i++ {\n\t\tmappings[i] = i\n\t}\n}\n\n// format a []byte as a correctly cased rune\nfunc preparePlainchar(in []byte) (out rune) {\n\treturn bytes.Runes(bytes.ToLower(in))[0]\n}\n\n// break the text into 5-letter chunks\nfunc format(t *bytes.Buffer) *bytes.Buffer {\n\tin := bufio.NewScanner(t)\n\tin.Split(bufio.ScanRunes)\n\n\tout := new(bytes.Buffer)\n\n\tfor idx := 0; in.Scan(); idx++ {\n\t\tif idx != 0 && idx%5 == 0 {\n\t\t\tout.WriteRune(' ')\n\t\t}\n\t\tout.Write(in.Bytes())\n\t}\n\n\treturn out\n}\n\n// ciphers a plaintext string using an atbash cipher\nfunc Atbash(pt string) string {\n\tplaintext := bufio.NewScanner(bytes.NewReader([]byte(pt)))\n\tplaintext.Split(bufio.ScanRunes)\n\n\tciphertext := new(bytes.Buffer)\n\n\tfor plaintext.Scan() {\n\t\tplainchar := preparePlainchar(plaintext.Bytes())\n\t\tif cipherchar, ok := mappings[plainchar]; ok {\n\t\t\tciphertext.WriteRune(cipherchar)\n\t\t}\n\t}\n\n\treturn format(ciphertext).String()\n}	\N	f	2	2	2014-05-28 02:08:39	2014-05-28 02:08:39	332	atbash_cipher.go
725	13	4d686e6b9113fef7293562ee	superseded	javascript	beer-song	function Beer(){\n\n    var getBottles = function(number) {\n        return number === 1 ? "1 bottle" : number + " bottles";\n    }\n\n    var getNextBottles = function(number) {\n        switch (number) {\n            case 2:\n                return "1 bottle";\n            case 1:\n                return "no more bottles";\n            default:\n                return number-1 + " bottles";\n        }\n    }\n\n    var getBottleDescription = function(number) {\n        return number == 1 ? "it" : "one";\n    }\n\n    var chomp = function(str) {\n        return str.substring(0, str.length-1);\n    }\n\n    this.verse = function(number) { \n        if (number === 0) {\n            return "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n                "Go to the store and buy some more, 99 bottles of beer on the wall.\\n";\n        } else {\n            bottles = getBottles(number);\n            next_bottles = getNextBottles(number);\n            thing = getBottleDescription(number);\n\n            words = bottles + " of beer on the wall, " + bottles + " of beer.\\n" +\n                "Take " + thing + " down and pass it around, " +\n                next_bottles + " of beer on the wall.\\n";\n            return words;\n        }\n     }\n\n     this.sing = function (number, stopAt) {\n\n        var stopAt = stopAt || 0,\n            song = [];\n\n        while (number >= stopAt) {\n            song.push(this.verse(number--));\n        }\n        return song.join("\\n");\n     }\n\n}\n\nBeer.call(Beer);\n\nmodule.exports = Beer;	\N	f	0	3	2014-05-28 15:09:52	2014-05-28 15:09:52	334	beer-song.js
726	13	0d37cfdaadf681c163ba6fe3	superseded	javascript	beer-song	String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nfunction Beer(){\n\n\tvar getVerseComponents = function (number) {\n\t\tswitch (number) {\n\t\t\tcase 2:\n\t\t\t\treturn { bottles: "2 bottles", next: "1 bottle", action: "Take one down and pass it around" }\n\t\t\tcase 1:\n\t\t\t\treturn { bottles: "1 bottle", next: "no more bottles", action: "Take it down and pass it around" }\n\t\t\tcase 0:\n\t\t\t    return { bottles: "no more bottles", next: "99 bottles", action: "Go to the store and buy some more" }\n\t\t\tdefault:\n\t\t\t\treturn { bottles: number + " bottles", next: number-1 + " bottles", action: "Take one down and pass it around" }\n\t\t}\n\t}\n\n    this.verse = function(number) { \n\t\tvar vc = getVerseComponents(number),\n\t\t    words = vc.bottles.capitalize() + " of beer on the wall, " + vc.bottles + " of beer.\\n" +\n                vc.action + ", " + vc.next + " of beer on the wall.\\n";\n\n        return words;\n\n     }\n\n     this.sing = function (number, stopAt) {\n\n        var stopAt = stopAt || 0,\n            song = [];\n\n        while (number >= stopAt) {\n            song.push(this.verse(number--));\n        }\n        return song.join("\\n");\n     }\n\n}\n\nBeer.call(Beer);\n\nmodule.exports = Beer;	\N	f	5	4	2014-06-04 14:41:34	2014-06-04 14:41:34	334	beer-song.js
737	13	a28fb420fde2043c230a4c1e	done	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday\n             deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n              deriving (Enum)\n\nfirstDay :: Integer -> Int -> Int\nfirstDay year month = let (_, _, wd) = toWeekDate date in wd\n  where date = fromGregorian year month 1\n\nlastDay :: Integer -> Int -> Int\nlastDay year month = let (_, _, wd) = toWeekDate date in wd\n  where date = fromGregorian year month $ gregorianMonthLength year month\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\n\nmeetupDay Teenth day year month\n    | d >= 13 && d <= 19 = second\n    | otherwise = meetupDay Third day year month\n    where second = meetupDay Second day year month\n          (_, _, d) = toGregorian second\n\nmeetupDay Last day year month = fromGregorian year month dayNum\n  where dayNum = monthLength - offset\n        monthLength = gregorianMonthLength year month \n        offset = (lastDay year month - (fromEnum day + 1)) `mod` 7\n\nmeetupDay nth day year month = fromGregorian year month dayNum\n  where dayNum = fromEnum nth * 7 + first\n        first = 1 + (fromEnum day + 1 - firstDay year month) `mod` 7	\N	f	3	1	2014-05-21 07:31:37	2014-05-21 07:31:37	338	Meetup.hs
744	13	c60b04dc6b9ad6aac1152234	done	javascript	bob	var Bob = function() {\n  return {\n    hey: function(phrase) {\n     this.phrase = new Phrase(phrase)\n     return this.respond()\n    },\n\n    respond: function() {\n      var type = this.phrase.type();\n      switch(type) {\n        case 'question':\n          return 'Sure.';\n        case 'shouting':\n          return 'Woah, chill out!';\n        case 'silence':\n          return 'Fine. Be that way!';\n        default:\n          return 'Whatever.';\n      }\n    }\n  }\n}\n\nvar Phrase = function(phrase) {\n  return {\n    phrase: phrase,\n\n    isQuestion: function() {\n      if (this.isShouting()) {\n        return false;\n      } else {\n        return this.phrase.substr(-1) == '?';\n      }\n    },\n\n    isShouting: function() {\n      if (this.phrase.match(/[a-z]+/i) === null) {\n        return false;\n      } else {\n        return this.phrase.toUpperCase() === this.phrase;\n      }\n    },\n\n    isSilence: function() {\n      return this.phrase.trim() === '';\n    },\n\n    type: function() {\n      if (this.isQuestion()) {\n        return 'question';\n      }\n      if (this.isShouting()) {\n        return 'shouting';\n      }\n      if (this.isSilence()) {\n        return 'silence';\n      }\n      return 'unknown';\n    }\n  }\n}\n\nmodule.exports = Bob;	\N	f	3	1	2014-05-15 09:00:44	2014-05-15 09:00:44	342	bob.js
748	13	f764662a362b98dacc647547	hibernating	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(potential_anagrams)\n    potential_anagrams = discard_same_words(potential_anagrams)\n    letters = letters(@word.downcase)\n    potential_anagrams.select do |anagram|\n      letters(anagram.downcase) == letters\n    end\n  end\n\n  def discard_same_words(potential_anagrams)\n    same_words = lambda { |anagram| anagram.downcase == @word }\n    potential_anagrams.reject(&same_words)\n  end\n\n  def letters(word)\n    word.chars.sort\n  end\n\n\nend	\N	f	4	3	2014-06-03 13:43:11	2014-06-03 13:43:11	344	anagram.rb
751	13	eaf6dfea3698932916a00782	superseded	haskell	phone-number	module Phone (\n  areaCode,\n  number,\n  prettyPrint\n) where\n\nimport Data.Char\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nnumber :: String -> String\nnumber = sanitize . filter isDigit\n  where\n    sanitize num =\n      case length num of\n        10 -> num\n        11 -> if head num == '1'\n              then tail num\n              else bad\n        _ -> bad\n    bad = take 10 $ repeat '0'\n\nprettyPrint :: String -> String\nprettyPrint = makePretty . number\n  where\n    makePretty num = concat ["(", area, ") ", prefix, "-", line]\n      where\n        (area, rest) = splitAt 3 num\n        (prefix, line) = splitAt 3 rest	\N	f	5	1	2014-06-07 00:37:34	2014-06-07 00:37:34	347	Phone.hs
755	13	324e1ca0e9ff3d6fe87934bd	done	go	allergies	// Package allergies contains logic to reason about a person's "allergy score".\n// An allergy score is an integer with each bit position corresponding to a specific allergy.\n// If a bit is set, then the score represents an allergy to the corresponding allergen.\npackage allergies\n\nvar allAllergies = []string{\n\t"eggs",\n\t"peanuts",\n\t"shellfish",\n\t"strawberries",\n\t"tomatoes",\n\t"chocolate",\n\t"pollen",\n\t"cats",\n}\n\nvar indexByAllergy = make(map[string]int)\n\nfunc init() {\n\tfor index, allergy := range allAllergies {\n\t\tindexByAllergy[allergy] = index\n\t}\n}\n\n// Allergies returns the list of allergies for the given score.\nfunc Allergies(score int) []string {\n\tvar allergies []string\n\tfor _, allergy := range allAllergies {\n\t\tif AllergicTo(score, allergy) {\n\t\t\tallergies = append(allergies, allergy)\n\t\t}\n\t}\n\treturn allergies\n}\n\n// AllergicTo returns whether the given score represents a given allergy.\nfunc AllergicTo(score int, allergy string) bool {\n\tif i, ok := indexByAllergy[allergy]; ok {\n\t\treturn score&(1<<uint(i)) != 0\n\t}\n\treturn false\n}	\N	f	2	1	2014-05-23 14:46:11	2014-05-23 14:46:11	348	allergies.go
760	14	04892e7c5ee5837cdca70228	superseded	javascript	anagram	function Anagram(word) {\n  this.word = new Word(word);\n}\nAnagram.prototype = {\n  match: function(list) {\n    var ret = [];\n\n    list.forEach(function(word) {\n      if (this.word.isAnagramOf(word)) {\n        ret.push(word.toString());\n      }\n    }, this);\n\n    return ret;\n  }\n};\n\nfunction Word(word) {\n  this.original = word;\n}\nWord.prototype = {\n  normalize: function() {\n    return this.original\n      .toLowerCase()\n      .split('')\n      .sort()\n      .join('');\n  },\n  toString: function() {\n    return this.original;\n  },\n  isAnagramOf: function(word) {\n    word = word instanceof Word ? word : new Word(word);\n    return this.normalize() == word.normalize() && !this.isEqualTo(word.toString());\n  },\n  isEqualTo: function(word) {\n    return this.original === word;\n  }\n};\n\nmodule.exports = Anagram;	\N	f	1	1	2014-04-10 09:45:57	2014-04-10 09:45:57	351	anagram.js
762	14	8e5fca5be80c00f035982e28	superseded	haskell	word-count	module WordCount (wordCount) where\n\timport Data.Char (isSymbol, isPunctuation, isSpace, toLower)\n\timport Data.List.Split (splitWhen)\n\timport qualified Data.Map as Map\n\n\tisDelimiter :: Char -> Bool\n\tisDelimiter character = isSymbol character || isPunctuation character || isSpace character\n\n\tsplitWords :: String -> [[Char]]\n\tsplitWords sentence = filter (not . null) (splitWhen isDelimiter sentence)\n\n\tcountWords :: Map.Map [Char] Integer -> [[Char]] -> Map.Map String Integer\n\tcountWords result [] = result\n\tcountWords result (word:remainder)\n\t    | Map.member word result = countWords (Map.insert word ((result Map.! word)+1) result) remainder\n\t    | otherwise              = countWords (Map.insert word 1 result) remainder\n\n\n\twordCount :: String -> Map.Map String Integer\n\twordCount sentence = countWords Map.empty (splitWords (map toLower sentence))	\N	f	1	1	2014-03-28 23:08:34	2014-03-28 23:08:34	352	WordCount.hs
773	14	05fd9edc5489dc461a2729fd	superseded	elixir	beer-song	defmodule Beer do\n  def sing(n1, n2) do\n    Enum.reduce(n1..n2, "", fn(num, acc) -> \n                                acc <> verse(num) <> "\\n" end)\n  end\n\n  def sing(n) do\n    Enum.reduce(n..0, "", fn(num, acc) ->\n                               acc <> verse(num) <> "\\n" end)\n  end\n\n  def verse(1) do\n    single_verse()\n  end\n\n  def verse(2) do\n    two_verse()\n  end\n\n  def verse(0) do\n    none_verse()\n  end\n\n  def verse(n) do\n    multiple_verse(n)\n  end\n\n  def multiple_verse(n) do\n    "#{n} bottles of beer on the wall, #{n} bottles of beer.\\nTake one down and pass it around, #{n-1} bottles of beer on the wall.\\n"\n  end\n\n  def two_verse() do\n    "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n  end\n\n  def single_verse() do\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  def none_verse() do\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\nend	\N	f	4	1	2014-03-13 05:59:44	2014-03-13 05:59:44	357	beer-song.exs
782	14	94cba67a976d35977e7df6ef	superseded	clojure	queen-attack	(def empty-board\n  (apply str (repeat 8 "O O O O O O O O\\n")))\n\n(defn- place [piece [y x] board]\n  (if (and y x)\n    (let [loc (+ (* y 16) (* x 2))\n          [start end] (split-at loc board)]\n      (concat (conj (vec start) piece) (rest end)))\n    board))\n\n(defn board-string [{:keys [w b]}]\n  (apply str (place \\W w (place \\B b empty-board))))\n\n(defn can-attack [{[wy wx] :w [by bx] :b}]\n  (let [abs-diff (comp #(if (> 0 %) (* -1 %) %) -)]\n    (or (= wx bx)\n        (= wy by)\n        (= (abs-diff wx bx) (abs-diff wy by)))))	\N	f	3	2	2014-05-06 16:32:21	2014-05-06 16:32:21	362	queens.clj
784	14	0e058cee8fc425a24bee3d7b	superseded	clojure	queen-attack	(def empty-board\n  (str "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"))\n\n(defn- place [piece coord board]\n  (let [[y x] coord]\n    (if (not (and y x))\n      board\n      (let [loc (+ (* y 16) (* x 2))\n            [start end] (split-at loc board)]\n        (concat (conj (vec start) piece) (rest end))))))\n\n(defn board-string [pos] \n  (let [{w :w b :b} pos] \n    (apply str (place \\W w (place \\B b empty-board)))))\n\n(defn can-attack [pos]\n  (let [{[wy wx] :w [by bx] :b} pos\n        abs #(if (> 0 %) (* -1 %) %)\n        abs-diff (comp abs -)]\n    (or (= wx bx)\n        (= wy by)\n        (= (abs-diff wx bx) (abs-diff wy by)))))	\N	f	3	1	2014-06-02 04:11:16	2014-06-02 04:11:16	362	queen-attack.clj
792	15	ab2eca086c04fda08c9c523e	pending	javascript	allergies	(function() {\n  'use strict';\n\n  var Allergies = function(score) {\n    this.score = validateScore(score);\n  }\n\n  Allergies.prototype.allergicTo = function(substance) {\n    return this.list().indexOf(substance) !== -1;\n  }\n\n  Allergies.prototype.list = function(){\n    for (var s in AllergyScores) {\n      if (parseInt(s) === this.score) {\n        return [AllergyScores[s]];\n      }\n    }\n\n    return findAllergiesFromScore(this.score);\n  }\n\n  function findAllergiesFromScore(score) {\n    var allergies = [];\n    var remainder = score;\n    var all = Object.keys(AllergyScores);\n\n    for (var i = all.length - 1; i >= 0; i--) {\n      if (remainder <= 0) {break;}\n\n      if (parseInt(all[i]) <= remainder) {\n        allergies.push(AllergyScores[all[i]]);\n        remainder -= parseInt(all[i]);\n      }\n    }\n\n    return allergies.reverse();\n  }\n\n  function validateScore(score) {\n    while (score > 255) {\n      score -= 256;\n    }\n    return score;\n  }\n\n  var AllergyScores = {\n    "128":"cats",\n    "64":"pollen",\n    "32":"chocolate",\n    "16":"tomatoes",\n    "8":"strawberries",\n    "4":"shellfish",\n    "2":"peanuts",\n    "1":"eggs"\n  }\n\n  module.exports = Allergies;\n})();	\N	f	4	1	2014-06-25 08:04:25	2014-06-25 08:04:25	366	allergies.js
812	15	bccd7931ce5f2396f1bba35c	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn default? [utterance] true)\n\n(defn shouting? [utterance]\n  (= utterance (string/upper-case utterance)))\n\n(defn silence? [utterance]\n  (string/blank? utterance))\n\n(defn question? [utterance]\n  (.endsWith utterance "?"))\n\n(def responseLookup\n  {\n   silence? "Fine. Be that way."\n   shouting?  "Woah, chill out!"\n   question? "Sure."\n   default? "Whatever."\n   })\n\n(defn matcher-from-pair [pair]\n  (first pair))\n\n(defn response-from-pair [pair]\n  (second pair))\n\n(defn response-for [utterance]\n  (let [found-pair (first (filter #((matcher-from-pair %) utterance) responseLookup))]\n    (response-from-pair found-pair)))	\N	f	2	2	2014-06-05 11:49:50	2014-06-05 11:49:50	377	bob.clj
820	16	e4948068ca16d39b29c67510	superseded	haskell	queen-attack	module Queens (boardString, canAttack) where\n\nimport Data.List\nimport Data.List.Split\nimport Data.Maybe\nimport qualified Data.Map.Strict as M\n\ntype Coord = (Integer, Integer)\n\nboardString :: Maybe Coord -> Maybe Coord -> String\nboardString w b = pretty . fmap getBoardChar $ allCoords\n  where \n    allCoords =  [(x, y) | x <- [0..7], y <- [0..7]]\n    getBoardChar coord = M.findWithDefault 'O' coord board\n    pretty = unlines . map (intersperse ' ') . chunksOf 8\n    board = let b0 = M.empty\n                b1 = maybe b0 (\\p -> M.insert p 'W' b0) w\n                b2 = maybe b1 (\\p -> M.insert p 'B' b1) b\n             in b2\n\ncanAttack :: Coord -> Coord -> Bool\ncanAttack (x1, y1) (x2, y2) = isRowCol || isDiag\n  where \n    isRowCol = x1 == x2 || y1 == y2\n    isDiag = x1 - x2 == y1 - y2	\N	f	3	1	2014-01-31 14:39:30	2014-01-31 14:39:30	380	Queens.hs
840	16	3cede453c7a1c9c4e51f53c8	superseded	haskell	bob	module Bob where\n\nimport Data.Char\nimport Data.String.Utils\n\nisShouting :: String -> Bool\nisShouting s | s' == ""  = False\n             | otherwise = all isUpper s'\n  where s' = filter isAlpha s\n\nresponseFor :: String -> String\nresponseFor s\n          | s'           == ""  = "Fine. Be that way!"\n          | isShouting s'       = "Woah, chill out!"\n          | last s'      == '?' = "Sure."\n          | otherwise           = "Whatever."\n            where isLetterOrQ c = isAlpha c || c == '?'\n                  s' = filter isLetterOrQ s	\N	f	2	1	2014-01-31 20:37:36	2014-01-31 20:37:36	390	bob.hs
844	16	164825603c7849e1658c6650	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l), do: do_count(l, 0)\n\n  defp do_count([], acc), do: acc\n  defp do_count([_|t], acc), do: do_count(t, acc + 1)\n\n  @spec reverse(list) :: list\n  def reverse(l), do: do_reverse(l, [])\n\n  defp do_reverse([], acc), do: acc\n  defp do_reverse([head|tail], acc), do: do_reverse(tail, [head|acc])\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f), do: do_map(l, f, [])\n\n  defp do_map([], f, accm), do: reverse(accm)\n  defp do_map([h|t], f, accm), do: do_map(t, f, [f.(h)|accm])\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f), do: do_filter(l, f, [])\n\n  defp do_filter([], _, accm), do: reverse(accm)\n  defp do_filter([h|t], f, accm) do\n    if f.(h) do\n      do_filter(t, f, [h|accm])\n    else\n      do_filter(t, f, accm)\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce([], acc, _), do: acc\n  def reduce([h|t], acc, f), do: reduce(t, f.(h, acc), f)\n\n  @spec append(list, list) :: list\n  def append(a, b), do: do_append(a, b, [])\n\n  defp do_append([], [], accm), do: reverse(accm)\n  defp do_append([h|t], b, accm), do: do_append(t, b, [h|accm])\n  defp do_append(a, [h|t], accm), do: do_append(a, t, [h|accm])\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll), do: reverse(ll) |> reduce([], &(append(&1, &2)))\nend	\N	f	3	1	2014-01-15 17:06:18	2014-01-15 17:06:18	391	list_ops.exs
847	16	5a33ceb91ec9bb0b32dad830	done	haskell	linked-list	module Deque \n  (mkDeque\n  , push\n  , pop\n  , shift\n  , unshift\n  ) where\n\nimport Control.Applicative\nimport Control.Arrow\nimport Control.Concurrent.STM\nimport Control.Monad\n\n-- Test require mutable state..\n-- Invariants:\n-- 1. left is Nothing <=> right is Nothing\ndata Element a = Element \n      { elementLeft  :: TVar (Maybe (Element a))\n      , _elementValue :: a \n      , elementRight :: TVar (Maybe (Element a))\n      }\n\nsingE :: a -> STM (Element a)\nsingE x = Element <$> newTVar Nothing <*> pure x <*> newTVar Nothing\n\ntype Storage a = (Element a,Element a)\ndata Deque a = Deque (TVar (Maybe (Element a, Element a)))\n\nmkDeque :: IO (Deque a)\nmkDeque = Deque <$> newTVarIO Nothing\n\npush :: Deque a -> a -> IO ()\npush d x = atomically $ insertElement d x insert\n  where\n    insert = runKleisli (second (Kleisli $ boundaryElement rear x))\n\nunshift :: Deque a -> a -> IO ()\nunshift d x = atomically $ insertElement d x insert\n  where\n    insert = runKleisli (first (Kleisli $ boundaryElement front x))\n\nrear, front :: (Element a -> TVar (Maybe (Element a)), Element a -> TVar (Maybe (Element a)))\nrear = (elementLeft, elementRight)\nfront = (elementRight, elementLeft)\n\nboundaryElement :: (Element a -> TVar (Maybe (Element a)), Element a -> TVar (Maybe (Element a))) -> a -> Element a -> STM (Element a)\nboundaryElement (f,g) x e = do\n   n <- singE x -- create new element\n   writeTVar (f n) (Just e)\n   writeTVar (g e) (Just n)\n   return n\n{-# INLINE boundaryElement #-}\n\ninsertElement :: Deque a -> a -> (Storage a -> STM (Storage a)) -> STM ()\ninsertElement (Deque s) x insert =\n  maybe new (writeTVar s . Just <=< insert) =<< readTVar s\n  where new = singE x >>= \\e -> writeTVar s $ Just (e,e)\n\npop :: Deque a -> IO (Maybe a)\npop (Deque s) = atomically $ maybe (return Nothing) get =<< readTVar s\n  where\n    get (l,Element rl rx _) = do\n      writeTVar s =<< return . (fmap (\\r' -> (l,r'))) =<< readTVar rl\n      return $ Just rx\n\nshift :: Deque a -> IO (Maybe a)\nshift (Deque s) = atomically $ maybe (return Nothing) get =<< readTVar s\n    where\n      get (Element _ lx lr, r) = do\n        writeTVar s =<< return . (fmap (\\l' -> (l',r))) =<< readTVar lr\n        return $ Just lx	\N	f	1	2	2014-02-04 02:49:08	2014-02-04 02:49:08	392	Deque.hs
863	17	e93a9535156ab66aedb28f8f	superseded	haskell	bob	module Bob (responseFor) where\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars chars s = all (`elem` chars) s\n\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	3	4	2014-01-04 20:43:02	2014-01-04 20:43:02	398	bob.hs
870	17	c7db8de239da777f408a98d5	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\nimport Data.List (isSuffixOf)\n\ndata Action = Question\n            | Shout\n            | Silence\n            | Other\n\nparse :: String -> Action\nparse "" = Silence\nparse s | isBlank s    = Silence\n        | isAllCaps s  = Shout\n        | isQuestion s = Question\n        | otherwise    = Other\n\nresponse :: Action -> String\nresponse Question = "Sure."\nresponse Shout    = "Woah, chill out!"\nresponse Silence  = "Fine. Be that way."\nresponse Other    = "Whatever."\n\nresponseFor :: [Char] -> [Char]\nresponseFor = response . parse\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)	\N	f	0	9	2014-04-13 20:17:15	2014-04-13 20:17:15	398	bob.hs
872	17	1fe63cbd6be4dd616a1cbec6	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower, isSpace)\nimport Data.List (isSuffixOf)\n\ndata Action = Question\n            | Shout\n            | Silence\n            | Other\n\nparse :: String -> Action\nparse "" = Silence\nparse s | isBlank s    = Silence\n        | isAllCaps s  = Shout\n        | isQuestion s = Question\n        | otherwise    = Other\n\nresponse :: Action -> String\nresponse Question = "Sure."\nresponse Shout    = "Woah, chill out!"\nresponse Silence  = "Fine. Be that way."\nresponse Other    = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = response . parse\n\nisAllCaps :: String -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: String -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nisBlank :: String -> Bool\nisBlank = all isSpace	\N	f	6	11	2014-06-12 06:37:13	2014-06-12 06:37:13	398	bob.hs
881	17	bd2a39e07fb87fdaf80f8908	superseded	python	bob	class Bob():\n\n    messages = {\n        "Tom-ay-to, tom-aaaah-to.": "Whatever.",\n        "Let's go make out behind the gym!": "Whatever.",\n        "It's OK if you don't want to go to the DMV.": "Whatever.",\n        "Ending with ? means a question.": "Whatever.",\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        try:\n            return self.messages[message]\n        except KeyError, e:\n            return "Fine. Be that way!"	\N	f	3	2	2014-03-15 11:54:08	2014-03-15 11:54:08	403	bob.py
883	17	c36c515b8081131798844dda	pending	javascript	meetup	function Meetup(month, year) {\n\tvar months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n\tthis.month = months[month];\n\tthis.year = year;\n\tthis.dateObject = new Date(this.month + " " + this.year);\n}\n\nfunction dayOfTheWeekTeenth(dayOfTheWeek) {\n\tvar newObj;\n\tvar newDate = 14 - this.dateObject.getDay() + 1 + dayOfTheWeek;\n\tnewDate = newDate >= 13 ? newDate: newDate + 7;\n\tnewDate = newDate >= 20 ? newDate - 7 : newDate;\n\n\tnewObj = new Date(this.month + " + " + newDate + " " + this.year);\n\treturn newObj;\n}\n\nfunction daysInMonth(month, year) {\n\treturn new Date(year, month+1, 0).getDate();\n}\n\nvar funcs = ['sunteenth', 'monteenth', 'tuesteenth', 'wednesteenth', 'thursteenth', 'friteenth', 'saturteenth'];\nfuncs.forEach(function(func, index) {\n\tMeetup.prototype[func] = function() {\n\t\treturn dayOfTheWeekTeenth.call(this, index);\n\t};\n});\n\nvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\ndays.forEach(function(day, dayIndex) {\n\tvar funcCounts = ['first', 'second', 'third', 'fourth'];\n\n\tfuncCounts.forEach(function (funcCount, funcCountIndex) {\n\t\tvar funcName = funcCount + day;\n\t\tMeetup.prototype[funcName] = function() {\n\t\t\tvar dayOfWeek = this.dateObject.getDay();\n\t\t\tvar newDate = 0;\n\t\t\tvar newObj;\n\t\t\tif (dayOfWeek > dayIndex) {\n\t\t\t\tnewDate = 1 + (7 - dayOfWeek + dayIndex);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewDate = 1 + (dayIndex - dayOfWeek);\n\t\t\t}\n\n\t\t\tnewDate = newDate + 7 * funcCountIndex;\n\n\t\t\tnewObj = new Date(this.month + " + " + newDate + " " + this.year);\n\t\t\treturn newObj;\n\t\t};\n\t});\n\n\t// Last-day function is the same as calling the fourth-day function\n\t// (mostly) -- add 7 if possible\n\tvar lastFuncName = 'last' + day;\n\tMeetup.prototype[lastFuncName] = function () {\n\t\tvar funcName = 'fourth' + day;\n\t\tvar dateObj = Meetup.prototype[funcName].call(this);\n\n\t\tvar date = dateObj.getDate();\n\t\tvar dateMonth = dateObj.getMonth();\n\t\tvar dateYear = dateObj.getYear();\n\n\t\tif (date + 7 <= daysInMonth(dateMonth, dateYear)) {\n\t\t\tdateObj.setDate(date+7); \n\t\t}\n\n\t\treturn dateObj;\n\t};\n\n});	\N	f	0	1	2014-02-04 22:08:54	2014-02-04 22:08:54	404	meetup_test.js
887	17	7445940c29a7b17a12b6380f	superseded	haskell	trinary	module Trinary ( showTri\n               , readTri\n               )\nwhere\n\ndigits :: String\ndigits = "0123456789abcdefghijklmnopqrstuvwxyz"\n\ntoDigit :: (Num a, Eq a, Show a) => a -> Char\ntoDigit n = to_ digits n\n  where\n    to_  ""    _ = error $ "Invalid digit value: " ++ (show n)\n    to_ (c:_)  0 = c\n    to_ (_:cs) n = to_ cs (n-1)\n\nfromDigit :: (Num a) => Char -> a\nfromDigit chr = from_ 0 digits\n  where\n    from_ _ "" = error $ "Invalid digit: '" ++ (chr:"'")\n    from_ n (c:cs) | c == chr  = n\n                   | otherwise = from_ (1 + n) cs\n\nshowBase :: (Num a, Eq a, Integral a, Show a) => a -> a -> String\nshowBase _ 0 = "0"\nshowBase b n = show_ "" n\n  where\n    show_ acc 0 = acc\n    show_ acc val = \n      let (r, d) = divMod val $! b in\n      if d < b then\n        show_ (toDigit d : acc) $! r\n      else\n        error $ "Error, invalid digit value: " ++ (show d)\n\nreadBase :: (Num a, Integral a, Show a) => a -> String -> a\nreadBase b = read_ 0\n  where\n    read_ acc "" = acc\n    read_ acc (c:cs) = if dig < b then\n                         read_ (b*acc + dig) $! cs\n                       else\n                         error $ "Error, invalid digit value: " ++ show dig\n      where\n        dig = fromDigit c\n\nshowTri :: (Num a, Integral a, Show a) => a -> String\nshowTri = showBase 3\n\nreadTri :: (Num a, Integral a, Show a) => String -> a\nreadTri = readBase 3	\N	f	1	1	2014-02-22 07:15:23	2014-02-22 07:15:23	407	Trinary.hs
894	17	c9d3f88ae9762c025ce4db50	pending	haskell	largest-series-product	module Series\n( digits\n, slices\n, largestProduct\n) where\n\nimport           Data.List (tails)\n\ndigits :: String -> [Int]\ndigits = map toDig\n    where toDig c | c >= '0' && c <= '9' = fromEnum c - fromEnum '0'\n          toDig c = error $ "Invalid digit in input: " ++ show c\n\nslices :: Int -> String -> [[Int]]\nslices n = filter ((==n) . length) . map (take n . digits) . tails\n\nlargestProduct :: Int -> String -> Int\nlargestProduct 0 _                  = 1\nlargestProduct n xs | n > length xs = 1\nlargestProduct n xs                 = maximum . map product . slices n $ xs	\N	f	3	1	2013-12-27 23:53:20	2013-12-27 23:53:20	412	Series.hs
901	22	25f02b310ca2823cd4f247a8	done	ruby	crypto-square	class Crypto\n  \n  attr_reader :text\n  private :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def normalize_plaintext\n    text.downcase.scan(/\\w/).join\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.size).ceil\n  end\n\n  def plaintext_segments\n    split_segments.map { |subletters| subletters.join }\n  end\n\n  def ciphertext\n    (0...size).inject("") do |cipher, idx|\n      split_segments.each do |split_segment|\n        cipher += split_segment[idx].to_s\n      end \n      cipher\n    end\n  end\n\n  def normalize_ciphertext\n    ciphertext\n      .chars\n      .each_slice(columns)\n      .map { |subletters| subletters.join }\n      .join(" ")\n  end\n\n  private\n\n    def split_segments\n      @split_segments ||= normalize_plaintext.chars.each_slice(size)\n    end\n\n    def columns\n      5\n    end\n\nend	\N	f	2	1	2014-03-20 15:09:46	2014-03-20 15:09:46	414	crypto.rb
906	22	d97fede0e7524feed7c59378	pending	javascript	nucleotide-count	var DNA = function (string) {\n    this.list = ['A', 'T', 'C', 'G', 'U'];\n    this.test = string.split('');\n    this.nucleotideCounts = (function(DNA) {\n                                var result = {};\n                                DNA.list.slice(0,4).forEach(function(i) { result[i] = DNA.count(i) });\n                                return result;\n                            }(this));\n}\nDNA.prototype.count = function(letter) {\n    var result = [];\n    if(this.list.indexOf(letter) > -1) {\n        this.test.forEach(function(i) { result[i] = (result[i] || 0) + 1; });\n        return result[letter] || 0;\n    }\n    throw new Error("Invalid Nucleotide");\n};\nmodule.exports = DNA;	\N	f	3	1	2014-04-25 10:02:43	2014-04-25 10:02:43	419	nucleotide-count.js
908	22	85a1d5b42dd8c2ab1761e4da	done	javascript	simple-cipher	var OPERATION_ENCODE = true,\n    OPERATION_DECODE = false,\n    ASCII_LOWER_A = 97,\n    ASCII_LOWER_Z = 122,\n    ALPHABET_LETTERS_COUNT = 26;\n\nfunction generateRandomKey() {\n  var i, key = '', chars = 'abcdefghijklmnopqrstuvwxyz', length = chars.length;\n  for (i = 0; i < 100; i++) {\n    key += chars.charAt(Math.floor(Math.random() * length));\n  }\n  return key;\n}\n\nfunction transformChar(base, start, operation) {\n  base = base.charCodeAt(0);\n  start = start.charCodeAt(0);\n  base += (start - ASCII_LOWER_A) * (operation ? 1 : -1);\n  if (base > ASCII_LOWER_Z) {\n    base -= ALPHABET_LETTERS_COUNT;\n  } else if (base < ASCII_LOWER_A) {\n    base += ALPHABET_LETTERS_COUNT;\n  }\n  return String.fromCharCode(base);\n}\n\nfunction transformString(input, key, operation) {\n  var i, keyCounter = 0, result = '';\n  for (var i = 0; i < input.length; i++) {\n    result += transformChar(input.charAt(i), key.charAt(keyCounter++), operation);\n    if (keyCounter >= key.length) {\n      keyCounter = 0;\n    }\n  }\n  return result;\n}\n\nfunction validateKey(key) {\n  if (!/^[a-z]+$/.test(key)) {\n    throw new Error('Bad key');\n  }\n  return key;\n}\n\nfunction Cipher(key) {\n  this.key = validateKey(key === undefined ? generateRandomKey() : key);\n}\n\nCipher.prototype.encode = function(input) {\n  return transformString(input, this.key, OPERATION_ENCODE);\n}\n\nCipher.prototype.decode = function(input) {\n  return transformString(input, this.key, OPERATION_DECODE);\n}\n\nmodule.exports = Cipher;	\N	f	2	2	2014-03-06 19:38:00	2014-03-06 19:38:00	421	simple-cipher.js
923	22	d8968c757db40815556b6480	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  #\n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l), do: do_count(l, 0)\n\n  defp do_count(l, acc) do\n    case l do\n      [] -> acc\n      [_|t] -> do_count(t, acc + 1)\n    end\n  end\n\n  @spec reverse(list) :: list\n  def reverse(l), do: do_reverse(l, [])\n\n  defp do_reverse(l, acc) do\n    case l do\n      [] -> acc\n      [h|t] -> do_reverse(t, [h|acc])\n    end\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f), do: do_map(l, f, []) |> reverse\n\n  defp do_map(l, f, acc) do\n    case l do\n      [] -> acc\n      [h|t] -> do_map(t, f, [f.(h)|acc])\n    end\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f), do: do_filter(l, f, []) |> reverse\n\n  def do_filter(l, f, acc) do\n    case l do\n      [] -> acc\n      [h|t] ->\n        if f.(h), do: acc = [h|acc]\n        do_filter(t, f, acc)\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce([], acc, _), do: acc\n  def reduce([h|t], acc, f), do: reduce(t, f.(acc, h), f)\n\n  @spec append(list, list) :: list\n  def append(a, b), do: reverse(a) |> do_append(b)\n\n  defp do_append(a, b) do\n    case a do\n      [] -> b\n      [h|t] -> do_append(t, [h|b])\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll), do: do_concat(ll, [])\n\n  defp do_concat(ll, acc) do\n    case ll do\n      [] -> acc\n      [h|t] ->\n        if is_list(h) do\n          do_concat(reverse(h), do_concat(t, acc))\n        else\n          do_concat(t, [h|acc])\n        end\n    end\n  end\nend	\N	f	3	2	2014-02-28 22:18:22	2014-02-28 22:18:22	428	list_ops.exs
926	22	3e93e244649f6fe453930fa5	pending	javascript	matrix	var Matrix = module.exports = function(matrixString) {\n\n  this.rows = matrixString.split('\\n').map(function(rowString) {\n    return rowString.split(' ').map(Number);\n  });\n\n  this.columns = this.rows[0].map(function(val, j) {\n    return this.rows.map(function(row) {\n      return row[j];\n    });\n  }, this);\n};	\N	f	0	1	2014-03-16 19:05:27	2014-03-16 19:05:27	429	matrix.js
927	22	2f957ae73df9a1a46aa7a964	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar          (Day, fromGregorian,gregorianMonthLength,\n                                    toGregorian)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday = PlaceHolder | Monday | Tuesday | Wednesday\n             | Thursday | Friday | Saturday | Sunday\n             deriving (Enum, Eq)\n\ndata Schedule = First | Second | Third | Fourth | Last | Teenth\n              deriving (Enum, Eq)\n\nselectWith :: Schedule -> [Day] -> Day\nselectWith Teenth   = head . filter ((> 12) . monthDay)\nselectWith Last     = last\nselectWith schedule = (!! fromEnum schedule)\n\nmonthDay :: Day -> Int\nmonthDay day = let (_, _, md) = toGregorian day\n               in md\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay schedule weekday year month\n    = selectWith schedule $ filter rightWeekDay monthDays\n  where\n    rightWeekDay day = let (_, _, wdAsInt) = toWeekDate day\n                       in wdAsInt == fromEnum weekday\n    monthDays = map (fromGregorian year month)\n                    [1 .. gregorianMonthLength year month]	\N	f	1	1	2014-04-28 14:15:06	2014-04-28 14:15:06	430	Meetup.hs
940	27	a569abec2c1cab34744cec1f	pending	ruby	raindrops	class Raindrops\n\n  def self.convert(n)\n    new.convert(n)\n  end\n\n  def convert(n)\n    sounds = sounds(n)\n    sounds.empty? ? n.to_s : sounds\n  end\n\n  private\n\n  def sounds(n)\n    factor_sounds.each_with_object("") { |(factor, sound), sounds|\n      sounds << sound if n % factor == 0\n    }\n  end\n\n  def factor_sounds\n    { 3 => "Pling", 5 => "Plang", 7 => "Plong" }\n  end\n\nend	\N	f	1	3	2013-12-30 10:22:30	2013-12-30 10:22:30	435	raindrops.rb
942	27	897815280d2b957791bec70b	superseded	ruby	bob	class Bob\n  def hey(message)\n    if shouting message\n      'Woah, chill out!'\n    elsif question message\n      'Sure.'\n    elsif silent message\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  def question(message)\n    message.split('').last == "?"\n  end\n\n  def shouting(message)\n    !message.strip.empty? && message == message.upcase\n  end\n\n  def silent(message)\n    message.strip.empty?\n  end\nend	\N	f	1	1	2014-03-08 02:17:34	2014-03-08 02:17:34	437	bob.rb
953	27	104beda79fc63c242fe039c0	done	ruby	word-count	class Phrase\n  attr_accessor :text\n\n  WORD_REGEX = /[^a-z0-9']/i\n\n  def initialize(text)\n    @text = text\n  end\n\n  def words\n    text.split(WORD_REGEX).reject(&:empty?).map(&:downcase)\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word,dictionary|\n      dictionary[word] += 1\n    end\n  end\nend	\N	f	3	1	2014-05-12 19:40:55	2014-05-12 19:40:55	442	word-count.rb
957	27	8d970df00062969c1a934234	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport           Data.Char\nimport           Data.List (foldl')\nimport qualified Data.Map as M\nimport           Control.Monad (sequence)\n\nwordCount :: String -> M.Map String Int\nwordCount = M.fromListWith (+) . map (\\s -> (map toLower s, 1)) . toWords\n\ntoWords :: String -> [String]\ntoWords = splitWhen (not . or . sequence [isUpper, isLower, isDigit])\n\n-- split a list by a predicate, skipping empty elements as well\n-- could drop the reverse function in the middle, though\nsplitWhen :: (a -> Bool) -> [a] -> [[a]]\nsplitWhen predicate list = filter (not . null) $ reverse $ map reverse $ splitWhen' [] predicate list\n    where splitWhen' :: [[a]] -> (a -> Bool) -> [a] -> [[a]]\n          splitWhen' tada _ [] = tada\n          splitWhen' acc p (x:xs) | p x = splitWhen' ([]:acc) p xs\n          splitWhen' [] p (x:xs)        = splitWhen' [[x]] p xs\n          splitWhen' (y:ys) p (x:xs)    = splitWhen' ((x:y):ys) p xs	\N	f	1	1	2013-12-01 20:12:22	2013-12-01 20:12:22	444	wordcount.hs
964	28	abead3edd380249a00d110b9	done	elixir	roman-numerals	defmodule Roman do\n\n  @romans [{1000, "M", "D", "C"}, {100, "C", "L", "X"}, {10, "X", "V", "I"}]\n  # each tuple represents {Arabic value, Roman unit, Roman half-unit, # Roman tenth-unit}\n\n  def numerals(arabic) do\n    {ones, roman_parts} = Enum.reduce(@romans, {arabic, []}, &handle_decimal/2)\n    [String.duplicate("I", ones) | roman_parts] |> Enum.reverse |> Enum.join\n  end\n\n  defp handle_decimal({rom_val, rom_unit, rom_half, rom_tenth}, accum) do\n    accum\n    |> handle_divisor(rom_unit, rom_val)\n    |> handle_divisor("#{rom_tenth}#{rom_unit}", trunc(rom_val * 0.9))\n    |> handle_divisor(rom_half, trunc(rom_val * 0.5))\n    |> handle_divisor("#{rom_tenth}#{rom_half}", trunc(rom_val * 0.4))\n  end\n\n  defp handle_divisor({arabic, rom_parts}, rom_unit, rom_val) when arabic >= rom_val do\n    {quotient, remainder} = divmod(arabic, rom_val)\n    {remainder, [String.duplicate(rom_unit, quotient) | rom_parts]}\n  end\n  defp handle_divisor(accum, _, _), do: accum\n\n  defp divmod(dividend, divisor), do: {div(dividend, divisor), rem(dividend, divisor)}\nend	\N	f	2	2	2014-01-22 06:29:35	2014-01-22 06:29:35	449	roman-numerals.exs
966	28	c2d9d0317a475b173ff4e177	superseded	javascript	bob	'use strict'\n\nvar Message = function(text) {\n  this.text = text.trim()\n}\n\nMessage.prototype.silence = function() {\n  return (this.text === '')\n}\n\nMessage.prototype.shouting = function() {\n  return (this.text.toUpperCase() === this.text)\n}\n\nMessage.prototype.question = function() {\n  return (this.text.slice(-1) === '?')\n}\n\nvar Bob = function() {\n  this.hey = function(text) {\n    var message = new Message(text)\n    if (message.silence()) {\n      return this.responses.silence\n    } else if (message.shouting()) {\n      return this.responses.shouting\n    } else if (message.question()) {\n      return this.responses.question\n    } else {\n      return this.responses.generic\n    }\n  }\n}\n\nBob.prototype.responses = {\n  silence: 'Fine. Be that way!',\n  shouting: 'Woah, chill out!',\n  question: 'Sure.',\n  generic: 'Whatever.'\n}\n\nmodule.exports = Bob	\N	f	3	3	2014-02-16 22:36:21	2014-02-16 22:36:21	450	bob.js
975	28	97e915a6403e010230fd73dd	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    Strand.new(strand1).distance(Strand.new(strand2))\n  end\nend\n\nclass Strand\n  attr_reader :strand\n  \n  def initialize(strand)\n    @strand = strand\n  end\n\n  def distance(other_strand)\n    nucleotide_pairs = self.pair_with(other_strand)\n    nucleotide_pairs.reduce(0) do |sum, (ours, theirs)|\n      sum + ours.distance(theirs)\n    end\n  end\n  \n  def nucleotides\n    strand.chars.map { |letter| Nucleotide.new(letter) }\n  end\n\n  def pair_with(other_strand)\n    if self.length > other_strand.length\n      other_strand.nucleotides.zip(self.nucleotides)\n    else\n      self.nucleotides.zip(other_strand.nucleotides)\n    end\n  end\n\n  def length\n    nucleotides.length\n  end\nend\n\nclass Nucleotide\n  attr_reader :letter\n  \n  def initialize(letter)\n    @letter = letter\n  end\n\n  def point_mutation?(other)\n    self.letter != other.letter\n  end\n\n  def distance(other)\n    if point_mutation?(other)\n      1\n    else\n      0\n    end\n  end\nend	\N	f	9	2	2014-07-01 05:07:07	2014-07-01 05:07:07	453	hamming.rb
987	28	48c7395bcaf3af8eaaf43f94	superseded	elixir	word-count	defmodule Words do\n\n  def count(words) do\n    words\n      |> downcase\n      |> to_list\n      |> process\n  end\n\n  defp process(entries) do\n    Enum.reduce entries, HashDict.new, fn(entry, acc) ->\n      HashDict.put acc, entry, Enum.count(entries, &1 == entry)\n    end\n  end\n\n  defp downcase(words), do: String.downcase words\n  defp to_list(words),  do: Regex.scan(%r/\\w+/, words) |> List.flatten\nend	\N	f	3	4	2014-03-11 23:07:54	2014-03-11 23:07:54	459	word-count.exs
993	29	665c3a9e903e3b965e533c84	done	python	bob	class Bob():\n\tdef hey(self, text):\n\t\tif text == 'WATCH OUT!' or text == 'WHAT THE HELL WERE YOU THINKING?' or text == 'ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!' or text == '1, 2, 3 GO!' or text == u"\\xdcML\\xc4\\xdcTS!" or text == 'I HATE YOU':\n\t\t\treturn 'Woah, chill out!'\n\t\telif text == 'Tom-ay-to, tom-aaaah-to.' or text == "Let's go make out behind the gym!" or text == "It's OK if you don't want to go to the DMV." or text == '1, 2, 3' or text == u"\\xdcML\\xe4\\xdcTS!" or text == 'Ending with ? means a question.':\n\t\t\treturn 'Whatever.'\n\t\telif text == 'You are, what, like 15?' or text == 'Does this cryogenic chamber make me look fat?' or text == '4?' or text == "Wait! Hang on. Are you going to be OK?":\n\t\t\treturn 'Sure.'\n\t\telif text == '' or text == '    ':\n\t\t\treturn 'Fine. Be that way!'	\N	f	4	1	2014-04-05 01:21:32	2014-04-05 01:21:32	462	bob.py
1003	29	f329449257cb04f3dc80fe34	superseded	javascript	bob	var Bob = function() {\n  var isEmpty = function(msg) {\n    return (!msg || /^\\s*$/.test(msg))\n  }\n\n  var isQuestion = function(msg) {\n    return msg.charAt(msg.length - 1) == '?';\n  }\n\n  var isUpcase = function(msg) {\n    return msg == msg.toUpperCase()\n  }\n\n  this.hey = function(msg) {\n    var answer = 'Whatever.';\n\n    if (isEmpty(msg)) {\n      answer = 'Fine. Be that way!';\n    } else if (isUpcase(msg)) {\n      answer = 'Woah, chill out!';\n    } else if (isQuestion(msg)) {\n      answer = 'Sure.';\n    }\n\n\n    return answer;\n  }\n};\n\nmodule.exports = Bob;	\N	f	3	1	2014-02-25 08:26:50	2014-02-25 08:26:50	467	bob.js
1009	29	1017a42178fbc8bf9809f0eb	done	ruby	bob	module CheckTeenSpeech\n  def question?\n    end_with? '?'\n  end\n\n  def command?\n    self == upcase\n  end\n\n  def silence?\n    strip.empty?\n  end\nend\n\n# Mix-in the teen speech checks, rather than declare directly.\n# This creates a class hierarchy relationship, which allows extending behavior while\n# retaining the original behavior.\n# Edge case, but since we're just playing around, why not.\nclass String\n  include CheckTeenSpeech\nend\n\n# Example of extending one of the check methods, as per above.\n# If CheckTeenSpeech methods had been declared directly on String,\n# this would be harder. In a codebase we entirely own, this isn't\n# too much of an issue, but if we distribute a gem then playing nice\n# with extension attempts might be more of an issue.\nclass String\n  def command?\n    super || downcase.include?("right now!")\n  end\nend\n\nmodule ActsLikeTeen\n  def hey(text)\n    return "Fine. Be that way!" if !text || text.silence?\n    return "Woah, chill out!" if text.command?\n    return "Sure." if text.question?\n\n    "Whatever." # Statement.\n  end\nend\n\n# Should just be an instance, not a subclass.\nclass Bob\n  include ActsLikeTeen\nend	\N	f	2	3	2014-01-25 05:50:46	2014-01-25 05:50:46	469	bob.rb
1016	30	a4dad3b47df442d9edef4fd9	superseded	elixir	word-count	defmodule Words do\n  def count phrase do\n\n    words = Regex.split(\n      %r/\\s+/,\n      %r/[^\\w]/ |> Regex.replace(String.downcase(phrase), " ") |> String.strip\n    )\n\n    List.foldl(\n      words,\n      HashDict.new,\n      fn(word, accumulator) ->\n        HashDict.update(\n          accumulator,\n          word,\n          1,\n          fn(value) -> value + 1  end\n        )\n      end\n    )\n\n  end\nend	\N	f	5	1	2014-05-20 18:15:26	2014-05-20 18:15:26	474	word-count.exs
1026	30	71d9a9ac8910240867a6feca	hibernating	elixir	beer-song	defmodule Beer do\n  def verse(2) do\n    """\n    2 bottles of beer on the wall, 2 bottles of beer.\n    Take one down and pass it around, 1 bottle of beer on the wall.\n    """\n  end\n\n  def verse(1) do\n    """\n    1 bottle of beer on the wall, 1 bottle of beer.\n    Take it down and pass it around, no more bottles of beer on the wall.\n    """\n  end\n\n  def verse(0) do\n    """\n    No more bottles of beer on the wall, no more bottles of beer.\n    Go to the store and buy some more, 99 bottles of beer on the wall.\n    """\n  end\n\n  def verse(n) do\n    """\n    #{n} bottles of beer on the wall, #{n} bottles of beer.\n    Take one down and pass it around, #{n - 1} bottles of beer on the wall.\n    """\n  end\n\n  def sing(verse_start) do\n    sing(verse_start, 0)\n  end\n\n  def sing(verse_start, verse_end) do\n    Enum.map_join((verse_start..verse_end),"\\n", verse(&1)) <> "\\n"\n  end\nend	\N	f	5	1	2014-05-19 12:37:11	2014-05-19 12:37:11	476	beer-song.exs
1032	30	99e9ecd944821cb80feebe57	done	haskell	nucleotide-count	module DNA (nucleotideCounts, count) where\n\nimport Data.Map (Map, fromList)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = fromList [(n, count n s) | n <- validNucleos]\n\ncount :: Char -> String -> Int\ncount 'U' sequence = 0\ncount nucleo sequence\n    | nucleo `elem` validNucleos = length $ filter (== nucleo) sequence\n    | otherwise = error $ "invalid nucleotide '" ++ [nucleo] ++ "'"\n\nvalidNucleos :: String\nvalidNucleos = "ACGT"	\N	f	2	1	2014-06-11 12:37:56	2014-06-11 12:37:56	481	nucleotide-count.hs
1033	30	ddce5e8a7db5e6e16d053b02	done	haskell	trinary	module Trinary\n  ( showTri\n  , readTri) where\n\nimport Control.Applicative\n\nreadTri :: Integral a => String -> a\nreadTri = go 0\n  where\n    go c [] = c\n    go c (x:xs) = c' `seq` go c' xs\n      where\n        c' = c * 3 + tri x\n\nshowTri :: Integral a => a -> String\nshowTri = go ""\n  where \n    go acc 0 = acc\n    go acc x = go (untri r:acc) q\n      where \n        (q,r) = x `quotRem` 3\n\ntri :: Integral a => Char -> a\ntri '0' = 0\ntri x   = 1 + tri (pred x)\n\nuntri :: Integral a => a -> Char\nuntri = go '0'\n  where\n    go c 0 = c\n    go c x = go (succ c) (pred x)	\N	f	0	1	2014-05-17 23:48:35	2014-05-17 23:48:35	482	Trinary.hs
1047	30	8ed25edd4808f4af0bbdf522	pending	elixir	phone-number	defmodule Phone do\n  @doc """\n  Remove formatting from a phone number.\n\n  Returns "0000000000" if phone number is not valid\n  (10 digits or "1" followed by 10 digits)\n\n  ## Examples\n\n  iex> Phone.number("123-456-7890")\n  "1234567890"\n\n  iex> Phone.number("+1 (303) 555-1212")\n  "13035551212"\n\n  iex> Phone.number("867.5309")\n  "0000000000"\n  """\n  @spec number(String.t) :: String.t\n  def number(raw) do\n    case clean_number_list(raw) do\n      nil -> "0000000000"\n      y -> to_string y\n    end\n  end\n\n  defp clean_number_list(s) when is_bitstring(s) do\n    s |> to_char_list |> Enum.filter(&(&1 >= ?0 and &1 <= ?9)) |> clean_number_list\n  end\n  defp clean_number_list(l) when length(l) == 10, do: l\n  defp clean_number_list([?1|t]) when length(t) == 10, do: t\n  defp clean_number_list(_), do: nil\n\n  @doc """\n  Extract the area code from a phone number\n\n  Returns the first three digits from a phone number,\n  ignoring long distance indicator\n\n  ## Examples\n\n  iex> Phone.area_code("123-456-7890")\n  "123"\n\n  iex> Phone.area_code("+1 (303) 555-1212")\n  "303"\n\n  iex> Phone.area_code("867.5309")\n  "000"\n  """\n  @spec area_code(String.t) :: String.t\n  def area_code(raw) do\n    number(raw) |> String.slice(0, 3)\n  end\n\n  @doc """\n  Pretty print a phone number\n\n  Wraps the area code in parentheses and separates\n  exchange and subscriber number with a dash.\n\n  ## Examples\n\n  iex> Phone.pretty("123-456-7890")\n  "(123) 456-7890"\n\n  iex> Phone.pretty("+1 (303) 555-1212")\n  "(303) 555-1212"\n\n  iex> Phone.pretty("867.5309")\n  "(000) 000-0000"\n  """\n  @spec pretty(String.t) :: String.t\n  def pretty(raw) do\n    "(#{area_code(raw)}) #{prefix(raw)}-#{line_number(raw)}"\n  end\n\n  @spec prefix(String.t) :: String.t\n  defp prefix(raw) do\n    number(raw) |> String.slice(3, 3)\n  end\n\n  @spec line_number(String.t) :: String.t\n  defp line_number(raw) do\n    number(raw) |> String.slice(6, 4)\n  end\nend	\N	f	1	1	2014-04-11 19:52:21	2014-04-11 19:52:21	489	phone_number.exs
1060	37	9aca6aa79b79b65865065382	done	elixir	bob	defmodule Teenager do\n  def hey message  do\n    cond do\n      silence?  message -> "Fine. Be that way!"\n      shouting? message -> "Woah, chill out!"\n      asking?   message -> "Sure."\n      true              -> "Whatever."\n    end\n  end\n\n  defp silence?(message),  do: String.length(message) == 0\n  defp shouting?(message), do: String.upcase(message) == message\n  defp asking?(message),   do: String.ends_with? message, "?"\nend	\N	f	1	1	2014-02-22 04:23:28	2014-02-22 04:23:28	496	bob.exs
1068	37	5ba89ddbab3890a2186ace46	superseded	javascript	secret-handshake	var SecretHandshake = function(code) {\r\n  var isValid = function() {\r\n    return typeof(code) === "number" || code.match(/^[01]+$/);\r\n  };\r\n\r\n  if(!isValid())\r\n    throw(new Error("Handshake must be a number"));\r\n\r\n  var motions = ["wink", "double blink", "close your eyes", "jump"],\r\n      REVERSE_MASK = 020, // Octal 20 === Binary 10000\r\n      commandList,\r\n      myBinaryParse = function(binString) { // parseInt(code, 2) is cheating\r\n        return binString.split("").reverse()\r\n                        .map(function(d, i) { return d << i; })\r\n                        .reduce(function(number, powerOfTwo) {\r\n                          return number + powerOfTwo;\r\n                        }, 0);\r\n      },\r\n      numericCode = (function(stringOrNumber) {\r\n        if(typeof(stringOrNumber) === "string") {\r\n          return myBinaryParse(stringOrNumber);\r\n        }\r\n        else // typeof(stringOrNumber) === "number"\r\n          return stringOrNumber;\r\n      })(code),\r\n      getCommandList = function() {\r\n        var list = [], i, len = motions.length;\r\n        for(i = 0; i < len; i++) {\r\n          if(numericCode >> i & 1)\r\n            list.push(motions[i]);\r\n        }\r\n        if(code & REVERSE_MASK)\r\n          list = list.reverse();\r\n\r\n        return list;\r\n      };\r\n\r\n  this.commands = function() {\r\n    return commandList = commandList || getCommandList();\r\n  };\r\n\r\n};\r\n\r\nmodule.exports = SecretHandshake;\r	\N	f	3	1	2014-03-14 02:22:32	2014-03-14 02:22:32	501	secret-handshake.js
1074	37	495fd2fc8f26b12213552259	pending	javascript	triangle	var Triangle = function(side1, side2, side3) {\n  this.side1 = side1;\n  this.side2 = side2;\n  this.side3 = side3;\n  this.sides = [side1, side2, side3];\n};\n\nTriangle.prototype.kind = function() {\n  var perimeter = this.side1 + this.side2 + this.side3;\n  var kind;\n\n  if (perimeter === this.side1*3) {\n    kind = 'equilateral';\n  } else if (this.side1 === this.side2 || this.side2 === this.side3 || this.side1 === this.side3) {\n    kind = "isosceles";\n  } else {\n    kind = "scalene";\n  }\n\n  this.sides.forEach(function(side){\n    if ( side <= 0 || side >= (perimeter - side) ) { kind = "illegal" ;}\n\n  });\n\n  return kind;\n};	\N	f	0	1	2014-05-01 14:45:49	2014-05-01 14:45:49	506	triangle_test.js
1075	37	2d534d3f80a89375a20d44ba	done	javascript	grade-school	(function (module) {\n\n  function buildDb(students) {\n    var db = {};\n    students.forEach(function (student) {\n      db[student.grade] = db[student.grade] || [];\n      db[student.grade].push(student.name);\n    });\n    return db;\n  }\n\n  function sort(students) {\n    return students.sort(function (a, b) {\n      if (a.grade == b.grade)\n        if (a.name.toLowerCase() == b.name.toLowerCase())\n          return 0;\n        else\n          return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1\n      else\n        return a.grade - b.grade;\n    });\n  }\n\n  function School(name) {\n    var students = [];\n\n    this.db = {};\n\n    this.add = function (name, grade) {\n      students.push({name: name, grade: grade});\n      this.db = buildDb(students);\n    };\n\n    this.grade = function (grade) {\n      return students\n          .filter(function (student) {\n            return student.grade == grade\n          })\n          .map(function (student) {\n            return student.name\n          });\n    };\n\n    this.sort = function () {\n      return buildDb(sort(students));\n    }\n  }\n\n  module.exports = School;\n}(module));	\N	f	3	2	2014-03-19 17:20:24	2014-03-19 17:20:24	507	grade-school.js
1082	37	7db4ef12a5428ccee8416fd5	hibernating	ruby	proverb	class Proverb\r\n=begin  \r\nFor want of a nail the shoe was lost.\r\nFor want of a shoe the horse was lost.\r\nFor want of a horse the rider was lost.\r\nFor want of a rider the message was lost.\r\nFor want of a message the battle was lost.\r\nFor want of a battle the kingdom was lost.\r\nAnd all for the want of a horseshoe nail.\r\n=end\r\n\r\n\tdef initialize(*chain, qualifier: {})\r\n\t\t@consequences = chain\r\n\t\t@qualifier = qualifier[qualifier] \r\n\tend\r\n\r\n\tdef to_s\r\n\t\tall_phrases.join("\\n")\r\n\tend\r\n\r\n  private\r\n  \r\n\tdef all_phrases\r\n\t\tchain_of_consequences << end_phrase\r\n\t\t#NOTE: chain_of_consequences is an array,\r\n\t\t#so here, the string called end_phrase gets pushed onto the array\r\n\t\t#producing an array of strings\r\n\tend\r\n\r\n\tdef chain_of_consequences\r\n\t\t@consequences.each_cons(2).map do |consequenc1, consequenc2|\r\n\t\t\t"For want of a #{consequenc1} the #{consequenc2} was lost." \r\n\t\tend\r\n\tend\r\n\r\n\tdef end_phrase\r\n    "And all for the want of a #{qualifier_consequence}." \r\n  end\r\n\r\n  def qualifier_consequence\r\n  \t[@qualifier,@consequences.first].compact.join(" ")\r\n  end\r\n\t\r\nend	\N	f	0	2	2014-02-19 16:01:41	2014-02-19 16:01:41	509	proverb.rb
1153	43	b25b2e4fb61b0c8eca5b5df3	pending	scala	phone-number	class PhoneNumber(phoneNum: String) {\n  private val invalidNumber =  "0000000000"\n\n  val number = {\n    val digits = phoneNum.filter(_.isDigit)\n    digits.length match {\n      case 11 => if (digits.startsWith("1")) digits.tail else invalidNumber\n      case 10 => digits\n      case _ => invalidNumber\n    }\n  }\n\n  val areaCode = number take 3\n  private val localNumber = number drop 3\n\n  override val toString =\n    s"($areaCode) ${localNumber take 3}-${localNumber drop 3}"\n}	\N	f	0	2	2014-03-11 00:11:46	2014-03-11 00:11:46	543	phone-number.scala
1084	41	3c59e6fb0191aa3c03f30e61	done	ruby	scrabble-score	module Value\n  def self.included(base)\n    base.extend(ClassMethods)\n  end\n  \n  module ClassMethods\n    \n\tdef value(v)\n\t\tcase v\n\t\twhen 'A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T'\n\t\t\t1\n\t\twhen 'D', 'G' \n\t\t\t2\n\t\twhen 'B', 'C', 'M', 'P' \n\t\t\t3\n\t\twhen 'F', 'H', 'V', 'W', 'Y' \n\t\t\t4\n\t\twhen 'K'\n\t\t\t5\n\t\twhen 'J', 'X' \n\t\t\t8\n\t\twhen 'Q', 'Z'\n\n\t\t\t10\n\n\t\tend\n\tend\n\t\n  end\n\n  def value(v)\n\t\tcase v\n\t\twhen 'A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T'\n\t\t\t1\n\t\twhen 'D', 'G' \n\t\t\t2\n\t\twhen 'B', 'C', 'M', 'P' \n\t\t\t3\n\t\twhen 'F', 'H', 'V', 'W', 'Y' \n\t\t\t4\n\t\twhen 'K'\n\t\t\t5\n\t\twhen 'J', 'X' \n\t\t\t8\n\t\twhen 'Q', 'Z'\n\n\t\t\t10\n\n\t\tend\n\tend\n  \n  \nend\n\n\n\nclass Scrabble\n\tinclude Value\n    \n\tdef initialize(word)\n\t\t@word = word \n\tend\n\n\tdef score\n\t\tif @word.nil? || @word.gsub(/\\s/,"").empty?\n\t\t\treturn 0\n\t\tend\n\t\tscore = 0\n\t\t@word.split('').each do |letter|\n\t\t\tscore = score + value(letter.upcase)\n\t\tend\n\t\treturn score\n\tend\n\n\tdef self.score(word)\n\t\tif word.nil? || word.gsub(/\\s/,"").empty?\n\t\t\treturn 0\n\t\tend\n\t\tscore = 0\n\t\tword.split('').each do |letter|\n\t\t\tscore = score + value(letter.upcase)\n\t\tend\n\t\treturn score\n\tend\nend	\N	f	5	1	2014-06-17 18:35:01	2014-06-17 18:35:01	511	scrabble-score.rb
1094	41	0cf59b9a0319bcb0e80a5e24	hibernating	ruby	bob	module Linguistics\n  class Sentence\n\n    attr_reader :purpose_patterns\n\n    def initialize(language)\n      @purpose_patterns = language[:purpose_patterns]\n    end\n\n    def classification_by_purpose(statement)\n      @purpose_patterns.reduce([]){|matches, (purpose, rule)|\n        matches.push(purpose) if rule.call(statement)\n        matches\n      } \n    end\n  end\nend\n\n# ok this is very english-centric \nclass TeenageBrain\n\n  attr_reader :sentence_procesor\n\n  def initialize(language_processor = Linguistics)\n    purpose_patterns = {\n      interrogative: ->(s) { s.end_with? "?" },\n      imperative:    ->(s) { s.upcase == s },\n    }\n    @sentence_processor = language_processor::Sentence.new({purpose_patterns: purpose_patterns})\n  end\n  \n  def classify_communication(signal)\n    signal = signal || ""\n    classifications = @sentence_processor.classification_by_purpose(signal)\n    classifications.push(:non_verbal) if signal.strip.empty?\n    classifications\n  end\nend\n\nclass Bob\n\n  attr_reader :brain\n  def initialize(brain = TeenageBrain)\n   @brain = brain.new\n  end\n\n  def hey(message)\n\n    message_classifications = brain.classify_communication(message)\n\n    return 'Fine. Be that way!' if message_classifications.include?(:non_verbal)\n    return 'Woah, chill out!'   if message_classifications.include?(:imperative) \n    return 'Sure.'              if message_classifications.include?(:interrogative)\n\n    'Whatever.'\n\tend\nend	\N	f	0	2	2014-05-17 15:44:02	2014-05-17 15:44:02	518	bob.rb
1095	41	0623469cb000b402fa2656dd	superseded	ruby	bob	module Linguistics\n  class Sentence\n\n    attr_reader :purpose_patterns\n\n    def initialize(language)\n      @purpose_patterns = language[:purpose_patterns]\n    end\n\n    def classification_by_purpose(statement)\n      @purpose_patterns.reduce([]){|matches, (purpose, rule)|\n        matches.push(purpose) if rule.call(statement)\n        matches\n      } \n    end\n  end\nend\n\n# ok this is very english-centric \nclass TeenageBrain\n\n  attr_reader :sentence_procesor\n  \n  def initialize(language_processor = Linguistics)\n    purpose_patterns = {\n      interrogative: ->(s) { s.end_with? "?" },\n      imperative:    ->(s) { s.upcase == s },\n    }\n    @sentence_processor = language_processor::Sentence.new({purpose_patterns: purpose_patterns})\n  end\n  \n  def classify_communication(signal)\n    signal = signal || ""\n    classifications = @sentence_processor.classification_by_purpose(signal)\n    classifications.push(:non_verbal) if signal.nil? || signal.strip.empty?\n    classifications\n  end\nend\n\nclass Bob\n\n  attr_reader :brain\n  def initialize(brain = TeenageBrain)\n   @brain = brain.new\n  end\n\n  def hey(message)\n\n    message_classifications = brain.classify_communication(message)\n\n    return 'Fine. Be that way!' if message_classifications.include?(:non_verbal)\n    return 'Woah, chill out!'   if message_classifications.include?(:imperative) \n    return 'Sure.'              if message_classifications.include?(:interrogative)\n\n    'Whatever.'\n\tend\nend	\N	f	15	1	2014-06-12 10:58:43	2014-06-12 10:58:43	518	bob.rb
1097	41	2ea41a194a514e53f81727b7	superseded	clojure	anagram	(ns anagram\n  (require [clojure.string :as str]))\n\n(defn- sort-chars\n  [word]\n  (sort (concat word)))\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort-chars word1) (sort-chars word2)))\n\n(defn- equal-words?\n  [word1 word2]\n  (= word1 word2))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (equal-words? word1 word2))))\n\n(defn- conj-anagram\n  [anagrams word1 word2]\n  (if (anagram? word1 word2)\n    (conj anagrams word2)\n    anagrams))\n\n(defn anagrams-for\n  "Returns every anagram of word in the collection."\n[word words]\n  (loop [rem-words words\n         anagrams  []]\n    (if (empty? rem-words)\n      anagrams\n      (recur (rest rem-words) (conj-anagram anagrams word (first rem-words))))))	\N	f	3	3	2014-05-05 09:38:27	2014-05-05 09:38:27	520	anagram.clj
1110	41	da107e7ea1aa6ff9a658e474	done	elixir	word-count	defmodule Words do\n  def count(sentence) do\n    sentence |> word_regulator |> word_counter\n  end\n\n\n  defp word_regulator(text) do\n     Regex.scan(%r/\\w+/, String.downcase(text))\n  end\n\n  defp word_counter(phrase) do\n    Enum.reduce(phrase, HashDict.new, fn(word, dict) ->\n      HashDict.update(dict, word, 1, &1 + 1)\n    end)\n   end\nend	\N	f	1	1	2014-05-18 15:09:20	2014-05-18 15:09:20	522	word-count.exs
1113	42	39ea4ff9add0959255eb9a9d	done	javascript	beer-song	;\r\nvar Beer = function() {\r\n    var self = this,\r\n\r\n        capitalize = function(words) {\r\n            return words[0].toUpperCase() + words.slice(1);\r\n        },\r\n\r\n        countDownWith = function(plural, singular, none) {\r\n            return function(n) {\r\n                if(n > 1) return plural.replace("<n>", n);\r\n                if(n === 1) return singular;\r\n                return none;\r\n            };\r\n        },\r\n\r\n        TEXT = [\r\n            ["<n>", "1", "no more"],\r\n            ["bottles", "bottle", "bottles"],\r\n            ["Take one down", "Take it down", "Go to the store"],\r\n            ["pass it around", "pass it around", "buy some more"]\r\n        ],\r\n\r\n        verseParts = TEXT.map(function(part) { return countDownWith(part[0], part[1], part[2]); }),\r\n\r\n        number       = verseParts[0],\r\n        unit         = verseParts[1],\r\n        firstAction  = verseParts[2],\r\n        secondAction = verseParts[3],\r\n        \r\n        phrase = function(n) {\r\n            if(n < 0) n += 100;\r\n            return number(n) + " " + unit(n) + " of beer";\r\n        };\r\n\r\n    this.verse = function(n) {\r\n        var mainPhrase  = phrase(n),\r\n            afterPhrase = phrase(n - 1);\r\n        return capitalize(mainPhrase) + " on the wall, " + mainPhrase + ".\\n" +\r\n               firstAction(n) + " and " + secondAction(n) + ", " +\r\n               afterPhrase + " on the wall.\\n";\r\n    };\r\n\r\n    this.sing = function(start, end) {\r\n        var finish = end || 0,\r\n            song = "";\r\n\r\n        for(var i = start; i >= finish; i--) {\r\n            song += self.verse(i);\r\n            if(i > finish) song += "\\n";\r\n        }\r\n\r\n        return song;\r\n    };\r\n\r\n    return self;\r\n};\r\n\r\nmodule.exports = Beer();\r	\N	f	1	2	2013-10-29 03:00:57	2013-10-29 03:00:57	524	beer-song.js
1120	42	995d1e3a0c2b4a9478bf17ae	hibernating	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    evaluations = [["Pling", number%3], ["Plang", number%5], ["Plong", number%7]]\n    sound = ""\n    evaluations.each do |noise, evaluation|\n      if evaluation == 0\n        sound << noise\n      end\n    end\n    if sound == ""\n      return number.to_s\n    else\n      return sound\n    end\n  end\nend	\N	f	0	1	2014-01-27 18:41:07	2014-01-27 18:41:07	529	raindrops.rb
1121	42	211a69eaeba6367918fbfc1a	pending	javascript	simple-cipher	function Cipher (key) {\n  function genKey (len) {\n    var result = "";\n    var charset = "abcdefghijklmnopqrstuvwxyz";\n    for (var i = 0; i < len; i++) {\n      result += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    return result;\n  }\n\n  if (typeof key === 'undefined') {\n    this.key = genKey(100)\n  }\n  else {\n    if (!containsNonLowerCase(key) && key) {\n      this.key = key;\n    }\n    else\n    {\n      throw new Error("Bad key");\n    }\n  }\n}\n\nfunction containsNonLowerCase(str) {\n  return (/[^a-z]/).test(str);\n}\n\nCipher.prototype.encode = function (plaintext) {\n  var aCharCode = "a".charCodeAt(0);\n  var result = "";\n  for (var i = 0; i < plaintext.length; i++) {\n    var cipherKeyCodeOffset = this.key.charCodeAt(i) - aCharCode;\n    var textKeyCodeOffset = plaintext.charCodeAt(i) - aCharCode;\n    var newCharCodeOffset = (cipherKeyCodeOffset + textKeyCodeOffset) % 26;\n    //cipherKeyCodeOffset + plaintext.charCodeAt(i);\n    result += String.fromCharCode(aCharCode + newCharCodeOffset);\n  }\n  return result;\n};\n\nCipher.prototype.decode = function (text) {\n  var aCharCode = "a".charCodeAt(0);\n  var result = "";\n  for (var i = 0; i < text.length; i++) {\n    var cipherKeyCodeOffset = this.key.charCodeAt(i) - aCharCode;\n    var textKeyCodeOffset = text.charCodeAt(i) - aCharCode;\n    var newCharCodeOffset = Math.abs(cipherKeyCodeOffset - textKeyCodeOffset) % 26;\n    result += String.fromCharCode(aCharCode + newCharCodeOffset);\n  }\n  return result;\n};	\N	f	3	1	2014-02-26 14:36:36	2014-02-26 14:36:36	530	simple-cipher_test.js
1125	42	db67f0e8361c6c71171a44bb	superseded	ruby	food-chain	class FoodChainSong\r\n\t\r\n\tdef initialize\r\n\t\t@exclamations = []\r\n\t\t@prehistory = []\r\n\t\tprepare_verse_data\r\n\tend\r\n\r\n\tdef prepare_verse_data\r\n\t\t@animals = ["", "fly", "spider", "bird", "cat", "dog", "goat", "cow"]\r\n\t\t\r\n\t\t@prehistory << ""\r\n\t\t@prehistory << "I don't know why she swallowed the fly. Perhaps she'll die.\\n"\r\n\t\t@prehistory << "She swallowed the spider to catch the fly.\\n"\r\n\t\t@prehistory << "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n"\r\n\t\t@prehistory << "She swallowed the cat to catch the bird.\\n"\r\n\t\t@prehistory << "She swallowed the dog to catch the cat.\\n"\r\n    @prehistory << "She swallowed the goat to catch the dog.\\n"  \r\n    @prehistory << "She swallowed the cow to catch the goat.\\n"\r\n\r\n    @exclamations << "" << ""\r\n\t\t@exclamations << "It wriggled and jiggled and tickled inside her.\\n"\r\n\t\t@exclamations << "How absurd to swallow a bird!\\n"\r\n\t\t@exclamations << "Imagine that, to swallow a cat!\\n"\r\n\t\t@exclamations << "What a hog, to swallow a dog!\\n"\r\n\t\t@exclamations << "Just opened her throat and swallowed a goat!\\n"\r\n\t\t@exclamations << "I don't know how she swallowed a cow!\\n"\r\n\tend\r\n\r\n\tdef verse number\r\n\t\tif number < 8\r\n\t\t\tbuild_verse_at number\r\n\t\telse\r\n\t\t\tfinal_verse\r\n\t\tend\r\n\tend\r\n\r\n\tdef build_verse_at number\r\n\t\tcumulative_song = "I know an old lady who swallowed a #{@animals[number]}.\\n"\r\n\t\tcumulative_song += @exclamations[number]\r\n\r\n\t\t(1..number).reverse_each do |i|\r\n\t\t\tcumulative_song += @prehistory[i]\r\n\t\tend\r\n\r\n\t\tcumulative_song\r\n\tend\r\n\r\n\tdef final_verse\r\n\t\t"I know an old lady who swallowed a horse.\\n" + "She's dead, of course!\\n"\r\n\tend\r\n\r\n\tdef verses first, last\r\n\t\tverses = ""\r\n\t\t(first..last).each do |number|\r\n\t\t\tverses += (verse number) + "\\n"\r\n\t\tend\r\n\r\n\t\tverses\r\n\tend\r\n\r\n\tdef sing\r\n\t\tverses(1, 8)\r\n\tend\r\nend	\N	f	1	1	2013-11-11 06:20:11	2013-11-11 06:20:11	533	food_chain.rb
1128	42	448d7b264040c2802c0b433f	superseded	ruby	food-chain	class FoodChainSong\n  def sing\n    verses(1, 8)\n  end\n\n  def verse(verses_count)\n    compose_cumulative_song(verses_count)\n  end\n\n  def verses(first_verse, last_verse)\n    (first_verse..last_verse).reduce('') do |long_song, number|\n      long_song << verse(number) << "\\n"\n    end\n  end\nend\n\ndef compose_cumulative_song(animal_number)\n  swallow_animal = animal(animal_number)\n  cumulative_song = prelude_about_lady(swallow_animal)\n\n  if swallow_animal == 'horse'\n    cumulative_song << tragedy_final\n  else\n    cumulative_song << exclamation(swallow_animal) << swallows_story(animal_number)\n  end\nend\n\ndef swallows_story(animals_count)\n  [\n    '',\n    "I don't know why she swallowed the fly. Perhaps she'll die.\\n",\n    "She swallowed the spider to catch the fly.\\n",\n    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n",\n    "She swallowed the cat to catch the bird.\\n",\n    "She swallowed the dog to catch the cat.\\n",\n    "She swallowed the goat to catch the dog.\\n",\n    "She swallowed the cow to catch the goat.\\n"\n  ].values_at(1..animals_count).reverse.join\nend\n\ndef exclamation(swallow_animal)\n  case swallow_animal\n  when 'spider' then "It wriggled and jiggled and tickled inside her.\\n"\n  when 'bird' then "How absurd to swallow a bird!\\n"\n  when 'cat' then "Imagine that, to swallow a cat!\\n"\n  when 'dog' then "What a hog, to swallow a dog!\\n"\n  when 'goat' then "Just opened her throat and swallowed a goat!\\n"\n  when 'cow' then "I don't know how she swallowed a cow!\\n"\n  else ''\n  end\nend\n\ndef animal(number)\n  case number\n  when 1 then 'fly'\n  when 2 then 'spider'\n  when 3 then 'bird'\n  when 4 then 'cat'\n  when 5 then 'dog'\n  when 6 then 'goat'\n  when 7 then 'cow'\n  when 8 then 'horse'\n  end\nend\n\ndef prelude_about_lady(swallow_animal)\n  "I know an old lady who swallowed a #{ swallow_animal }.\\n"\nend\n\ndef tragedy_final\n  "She's dead, of course!\\n"\nend	\N	f	3	3	2014-04-21 05:28:25	2014-04-21 05:28:25	533	food_chain.rb
1131	42	c3fe78ffb2dda531dd62a367	superseded	elixir	beer-song	defmodule Beer do\n  def sing(n1, n2) do\n    Enum.reduce(n1..n2, "", fn(num, acc) -> \n                                acc <> verse(num) <> "\\n" end)\n  end\n\n  def sing(n) do\n    Enum.reduce(n..0, "", fn(num, acc) ->\n                               acc <> verse(num) <> "\\n" end)\n  end\n\n  def verse(1) do\n    single_verse()\n  end\n\n  def verse(2) do\n    two_verse()\n  end\n\n  def verse(0) do\n    none_verse()\n  end\n\n  def verse(n) do\n    multiple_verse(n)\n  end\n\n  def multiple_verse(n) do\n    "#{n} bottles of beer on the wall, #{n} bottles of beer.\\nTake one down and pass it around, #{n-1} bottles of beer on the wall.\\n"\n  end\n\n  def two_verse() do\n    "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n  end\n\n  def single_verse() do\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  def none_verse() do\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\nend	\N	f	0	1	2014-01-19 19:43:02	2014-01-19 19:43:02	535	beer-song.exs
1139	42	4215a097cdeea49db9f5dcc5	superseded	ruby	hamming	class DNA\n  def initialize(strand_string)\n    @strand = string_to_strand(strand_string)\n  end\n\n  def hamming_distance(strand_string)\n    strand1, strand2 = trim_strands_to_equal_length(@strand, string_to_strand(strand_string))\n    calculate_distance(strand1, strand2)\n  end\n\n  private \n  def string_to_strand(input)\n    input.split('')\n  end\n\n  def trim_strands_to_equal_length(s1, s2)\n    min_length = [s1.size, s2.size].min - 1\n    [(s1)[0..min_length], (s2)[0..min_length]]\n  end\n\n  def calculate_distance(strand1, strand2)\n    strand1.zip(strand2).reject { |n| n[0] == n[1]}.size\n  end\nend	\N	f	3	3	2013-11-11 01:25:50	2013-11-11 01:25:50	539	point-mutations.rb
1143	42	bdf032603bf8742de2bce52e	pending	javascript	triangle	function Triangle(a, b, c) {\n  var is_missing_number = (a === undefined || b === undefined || c === undefined || a === 0 || b === 0 || c === 0);\n  var is_impossible_triangle = (a < 0 || b < 0 || c < 0 || a + b <= c || b + c <= a || c + a <= b);\n  var is_equilateral = (a === b && b === c);\n  var is_isoceles = (a === b || b === c || c === a);\n  var triangle_kind = determine_kind();\n\n  function determine_kind() {\n    switch (true) {\n      case is_missing_number:\n      case is_impossible_triangle:\n        return 'illegal';\n      case is_equilateral:\n        return 'equilateral';\n      case is_isoceles:\n        return 'isosceles';\n      default:\n        return 'scalene';\n    }\n  }\n  function return_triangle_kind() {\n    if (is_missing_number) {\n      throw new Error('that does not seem like a triangle');\n    }\n    return triangle_kind;\n  }\n\n  this.kind = return_triangle_kind;\n}\n\nif (module) {\n  module.exports = Triangle;\n}	\N	f	2	2	2014-02-23 10:52:12	2014-02-23 10:52:12	540	triangle.js
1155	43	339b92d22e8d541406bcef9f	hibernating	haskell	matrix	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Matrix ( Matrix, row, column, rows, cols, shape, transpose\n               , reshape, flatten, fromString, fromList) where\nimport Data.Vector( Vector, (!) )\nimport qualified Data.Vector as V\nimport Data.List.Split( splitOn )\n\ndata Matrix a = Matrix { flatten :: (Vector a), \n                         rows :: Int, \n                         cols :: Int }\n  deriving ( Show, Eq )\n\nfromString :: Read a => String -> Matrix a\nfromString = mkMatrix (map readElements . filter (/="") . splitOn "\\n")\n\nfromList :: [[a]] -> Matrix a\nfromList = mkMatrix (map V.fromList)\n\nmkMatrix :: (b -> [Vector a]) -> b -> Matrix a\nmkMatrix mkRows input = Matrix { flatten = V.concat rs, \n                                 rows = length rs, \n                                 cols = numCols rs } \n  where\n    rs = mkRows input\n\nnumCols :: [Vector a] -> Int \nnumCols rs | null rs = 0\n           | any id (map ((/=r1_len) . V.length) rs) = \n               error "Your matrix is non-rectangular"\n           | otherwise = r1_len\n  where r1_len = V.length (head rs)\n\nreadElements :: Read a => String -> Vector a\nreadElements = V.unfoldr readOneElement\n  where\n    readOneElement s | null attempt = Nothing\n                     | otherwise = Just (head attempt)\n      where\n        attempt = reads s\n\nrow :: Int -> Matrix a -> Vector a\nrow j (Matrix els _ n) = V.slice (j*n) n els\n\ncolumn :: Int -> Matrix a -> Vector a\ncolumn k (Matrix els m n) = V.fromList sliceCol\n  where\n    sliceCol = [ els ! (k + n*r) | r <- [0..m-1] ]\n\nshape :: Matrix a -> (Int, Int)\nshape (Matrix _ r c) = (r, c)\n\nreshape :: (Int, Int) -> Matrix a -> Matrix a\nreshape (r', c') m@(Matrix _ r c) | r*c /= r'*c' = error "Shapes don't match"\n                                  | otherwise = m { rows = r', cols = c' }\n\ntranspose :: Matrix a -> Matrix a\ntranspose (Matrix els m n) = Matrix { flatten = rearranged,\n                                      rows = n,\n                                      cols = m }\n  where \n    rearranged = V.fromList [ els ! (r*n + c) | c <- [0..n-1], r <- [0..m-1] ]	\N	f	1	1	2014-01-19 04:15:39	2014-01-19 04:15:39	545	Matrix.hs
1163	43	4bd865afed6842457e9accbc	superseded	javascript	word-count	var words = function(inputString) {\n\n  // Solution strategy:\n  //\n  // - Phrase consists of:\n  //     !*&(@*& ) i.e. non-alphanumeric sequences (one or more chars)\n  //     dog12 i.e. alphanumeric sequences\n  // - We want to split on any non-alphanumerics into an array of only alphanumeric strings\n  // - Split should allow multiple non-alphas between the words\n  // - Then iterate over array and aggregate into common elements with their frequency\n\n  var \n    nonAlphaNumericRegex,\n    wordArray,\n    wordFrequenciesHash,\n    isEmptyWord, \n    checkForAndHandleNewWord;\n\n  nonAlphaNumericRegex = /\\W+/;\n\n  wordArray = inputString.split(nonAlphaNumericRegex);\n\n  wordFrequenciesHash = {};\n\n  isEmptyWord = function(word) {\n    return word === '';\n  };\n\n  checkForAndHandleNewWord = function(wordFrequenciesHash, lowerCaseWord) {\n    if (typeof wordFrequenciesHash[lowerCaseWord] !== 'number') {\n      wordFrequenciesHash[lowerCaseWord] = 0;\n    }\n  };\n\n  wordArray.forEach(function(word) {\n    var lowerCaseWord = word.toLowerCase();\n\n    if (isEmptyWord(word)) {\n      return;\n    }\n\n    checkForAndHandleNewWord(wordFrequenciesHash, lowerCaseWord);\n\n    wordFrequenciesHash[lowerCaseWord] += 1;\n  });\n\n  return wordFrequenciesHash;\n};\n\nmodule.exports = words;	\N	f	1	1	2014-01-01 05:36:30	2014-01-01 05:36:30	549	word-count.js
1177	43	b65da360f048ee6107a49d09	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.List (isSuffixOf)\nimport Data.Char (isLower, isSpace)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | isSilence = "Fine. Be that way."\n  | isShouting = "Woah, chill out!"\n  | isQuestioning = "Sure."\n  | otherwise = "Whatever."\n   where isQuestioning = "?" `isSuffixOf` phrase\n         isShouting = not $ any isLower phrase\n         isSilence = all isSpace phrase	\N	f	1	2	2013-12-25 19:16:54	2013-12-25 19:16:54	557	bob.hs
1178	43	72cb5ba7bcbf55c8bbc681c7	superseded	haskell	bob	module Bob where\n\nimport Data.List (isSuffixOf)\nimport Data.Char (toUpper, isSpace)\n\nltrim :: String -> String\nltrim string = dropWhile isSpace string\n\nrtrim :: String -> String\nrtrim string = reverse(ltrim(reverse string))\n\ntrim :: String -> String\ntrim string = ltrim(rtrim(string))\n\nresponseFor :: String -> String\nresponseFor phrase\n  | isSilence = "Fine. Be that way."\n  | isShouting = "Woah, chill out!"\n  | isQuestioning = "Sure."\n  | otherwise = "Whatever."\n   where isQuestioning = "?" `isSuffixOf` phrase\n         isShouting = map toUpper phrase == phrase\n         isSilence = trim phrase == ""	\N	f	4	1	2014-05-12 01:32:38	2014-05-12 01:32:38	557	bob.hs
1187	44	abe7e26ce4682b4992917566	superseded	haskell	meetup	module Meetup\n  ( Weekday(..)\n  , Schedule(..)\n  , meetupDay\n  ) where\n\nimport Control.Monad (liftM)\nimport Control.Monad.Instances\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\nenumFromDown :: Enum a => a -> [a]\nenumFromDown x = enumFromThen x (pred x)\n\ndata Weekday = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum, Eq, Show)\n\nfromDay :: Day -> Weekday\nfromDay = toEnum . toWeekNumber where\n  toWeekNumber d = let (_,_,dow) = toWeekDate d in dow - 1\n\ntype Year = Integer\ntype Month = Int\ntype Date = Int\ntype YearMonth a = (Year, Month) -> a\n\ndata Schedule = Teenth | First | Second | Third | Fourth | Last\n  deriving Show\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay = (curry .) . meetupDayM  where\n  meetupDayM s w = liftM (findWeekday w) $ mapM fromGregorianM =<< candidates s\n\ncandidates :: Schedule -> YearMonth [Date]\ncandidates First  = week 1\ncandidates Second = week 2\ncandidates Third  = week 3\ncandidates Fourth = week 4\ncandidates Teenth = teenths\ncandidates Last   = lastDays\n\nweek :: Int -> YearMonth [Date]\nweek n = return $ map (+ (n-1)*7) [1..7]\n\nteenths :: YearMonth [Date]\nteenths  = return [13..19]\n\nlastDays :: YearMonth [Date]\nlastDays = liftM (take 7 . enumFromDown) (uncurry gregorianMonthLength)\n\nfindWeekday :: Weekday -> [Day] -> Day\nfindWeekday w = head . filter ((== w) . fromDay)\n\nfromGregorianM :: Date -> YearMonth Day\nfromGregorianM = flip $ uncurry fromGregorian	\N	f	0	1	2014-02-25 02:54:05	2014-02-25 02:54:05	562	meetup.hs
1189	44	33641858b46c718e4950e0ec	done	haskell	meetup	module Meetup\n  ( Weekday(..)\n  , Schedule(..)\n  , meetupDay\n  ) where\n\nimport Control.Monad (liftM)\nimport Control.Monad.Instances\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday\n  deriving (Enum, Eq, Show)\n\ntype Year = Integer\ntype Month = Int\ntype Date = Int\ntype YearMonth a = (Year, Month) -> a\n\ndata Schedule = Teenth | First | Second | Third | Fourth | Last\n  deriving Show\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay s w = curry $ advanceWeekday w . weekStart s where\n  weekStart = (fromGregorianM =<<) . weekStartDate\n\nweekStartDate :: Schedule -> YearMonth Date\nweekStartDate First  = week 1\nweekStartDate Second = week 2\nweekStartDate Third  = week 3\nweekStartDate Fourth = week 4\nweekStartDate Teenth = teenths\nweekStartDate Last   = lastDays\n\nweek :: Int -> YearMonth Date\nweek = return . succ . (*7) . pred\n\nteenths :: YearMonth Date\nteenths  = return 13\n\nlastDays :: YearMonth Date\nlastDays = liftM (subtract 6) (uncurry gregorianMonthLength)\n\nfromGregorianM :: Date -> YearMonth Day\nfromGregorianM = flip $ uncurry fromGregorian\n\nadvanceWeekday :: Weekday -> Day -> Day\nadvanceWeekday = (addDays =<<) . (fromIntegral .) . daysToWeekday\n\ndaysToWeekday :: Weekday -> Day -> Int\ndaysToWeekday w d = (fromEnum w - d') `mod` 7 where\n  (_, _, d' + 1) = toWeekDate d	\N	f	0	3	2014-05-28 03:59:31	2014-05-28 03:59:31	562	meetup.hs
1237	45	3f277045bbb37a5c23580bde	superseded	ruby	simple-linked-list	class Element\n  attr_accessor :datum, :link\n\n  def initialize(datum, link)\n    @datum = datum\n    @link = link\n  end\n\n  def next\n    link\n  end\n\n  def reverse\n    if link\n      Element.new(link.datum, self)\n    else\n      Element.new(datum, nil)\n    end\n  end\n\n  def self.to_a(node)\n    return [] unless node\n\n    node_datum = Array(node.datum)\n    node_datum += Element.to_a(node.link) if node.link\n    node_datum\n  end\n\n  def to_a\n    Element.to_a(self)\n  end\n\n  def self.from_a(array)\n    data = array.to_a\n    return nil if data.empty?\n\n    results = []\n    data.reverse.each_with_index do |element, i|\n      results[i] = Element.new(element, results[i - 1])\n    end\n    results.last\n  end\n\nend	\N	f	1	1	2014-04-01 12:13:12	2014-04-01 12:13:12	578	linked_list.rb
1192	44	15252f69d783dd5cd01a5839	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + Verse.new(verse_number).to_s + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number).to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :quantity\r\n\r\n  def initialize(verse_number)\r\n    @quantity = verse_number\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      LastVerse.new(quantity).to_s\r\n    else\r\n      PlainVerse.new(quantity).to_s\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def zero_bottles?\r\n    quantity == 0\r\n  end\r\n\r\nend\r\n\r\nclass PlainVerse\r\n  attr_reader :quantity\r\n\r\n  def initialize(verse_number)\r\n    @quantity = verse_number\r\n  end\r\n\r\n  def to_s\r\n    "#{quantity} #{bottle_s} of beer on the wall, #{quantity} #{bottle_s} of beer.\\nTake #{one_it} down and pass it around, #{bottles_remaining} #{one_less_bottle_s} of beer on the wall.\\n"\r\n  end\r\n\r\n  private\r\n\r\n  def bottle_s\r\n    if one_bottle?\r\n      'bottle'\r\n    else\r\n      'bottles'\r\n    end\r\n  end\r\n\r\n  def one_it\r\n    if one_bottle?\r\n      'it'\r\n    else\r\n      'one'\r\n    end\r\n  end\r\n\r\n  def bottles_remaining\r\n    if one_less_bottle < 1\r\n      'no more'\r\n    else\r\n      one_less_bottle\r\n    end\r\n  end\r\n\r\n  def one_less_bottle_s\r\n    if one_less_bottle == 1\r\n      'bottle'\r\n    elsif one_less_bottle == 0\r\n      'bottles'\r\n    else\r\n      bottle_s\r\n    end\r\n  end\r\n\r\n  def one_less_bottle\r\n    quantity - 1\r\n  end\r\n\r\n  def one_bottle?\r\n    quantity == 1\r\n  end\r\n\r\nend\r\n\r\nclass LastVerse\r\n  attr_reader :quantity\r\n\r\n  def initialize(quantity)\r\n    @quantity = quantity\r\n  end\r\n\r\n  def to_s\r\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n  end\r\n\r\nend	\N	f	1	14	2014-03-16 02:32:42	2014-03-16 02:32:42	564	beer-song.rb
1194	44	db40525211efc550d16dff41	superseded	ruby	beer-song	class Beer\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    singer = Singer.new\r\n    singer.recall_verse(verse_number)\r\n  end\r\n\r\n  private\r\n\r\n  def requested_verses\r\n    requested_verse_numbers = Array(end_verse..start_verse).reverse\r\n    requested_verses = ""\r\n\r\n    requested_verse_numbers.each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n    requested_verses\r\n  end\r\n\r\nend\r\n\r\nclass Singer\r\n  attr_accessor :bottles_of_beer, :verse_number\r\n\r\n  def initialize\r\n    @bottles_of_beer = nil\r\n  end\r\n\r\n  def recall_verse(verse_number)\r\n    @bottles_of_beer = verse_number\r\n    "#{dynamic_phrase_1} of beer on the wall, #{dynamic_phrase_2} of beer.\\n#{dynamic_phrase_3}, #{dynamic_phrase_4} of beer on the wall.\\n"\r\n  end\r\n\r\n  private\r\n\r\n   def dynamic_phrase_1\r\n    if zero_bottles?\r\n      "No more bottles"\r\n    else\r\n      "#{bottles_of_beer} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  def dynamic_phrase_2\r\n    if zero_bottles?\r\n      "no more #{bottle_s}"\r\n    else\r\n      "#{bottles_of_beer} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  def dynamic_phrase_3\r\n    one_it = 'one'\r\n\r\n    if zero_bottles?\r\n      'Go to the store and buy some more'\r\n    else\r\n      if one_bottle?\r\n        one_it = 'it'\r\n      end\r\n      "Take #{one_it} down and pass it around"\r\n    end\r\n  end\r\n\r\n  def dynamic_phrase_4\r\n    if one_bottle?\r\n      "no more bottles"\r\n    elsif zero_bottles?\r\n      "99 #{bottle_s}"\r\n    else\r\n      @bottles_of_beer -= 1\r\n      "#{bottles_of_beer} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # This returns the correct plural or singular usage of bottle\r\n  def bottle_s\r\n    if bottles_of_beer > 1 || bottles_of_beer == 0\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    end\r\n  end\r\n\r\n  def one_bottle?\r\n    bottles_of_beer == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottles_of_beer == 2\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottles_of_beer == 0\r\n  end\r\n\r\nend	\N	f	1	6	2014-03-25 06:09:24	2014-03-25 06:09:24	564	beer-song.rb
1196	44	1a694246a21e7babdc18d269	done	ruby	beer-song	class Beer\r\n  def sing(start_verse, end_verse = 0)\r\n    verses = start_verse.downto(end_verse).inject('') do |verses, verse_number|\r\n      verses + verse(verse_number) + "\\n"\r\n    end\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number, 'beer').to_s\r\n  end\r\nend\r\n\r\nclass Verse\r\n  attr_reader :quantity, :beverage\r\n\r\n  def initialize(verse_number, beverage)\r\n    @quantity = verse_number\r\n    @beverage = beverage\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      "No more bottles of #{beverage} on the wall, no more bottles of #{beverage}.\\nGo to the store and buy some more, 99 bottles of #{beverage} on the wall.\\n"\r\n    elsif one_bottle?\r\n      "#{quantity} bottle of #{beverage} on the wall, #{quantity} bottle of #{beverage}.\\nTake it down and pass it around, no more bottles of #{beverage} on the wall.\\n"\r\n    elsif two_bottles?\r\n      "#{quantity} bottles of #{beverage} on the wall, #{quantity} bottles of #{beverage}.\\nTake one down and pass it around, #{quantity - 1} bottle of #{beverage} on the wall.\\n"\r\n    else\r\n      "#{quantity} bottles of #{beverage} on the wall, #{quantity} bottles of #{beverage}.\\nTake one down and pass it around, #{quantity - 1} bottles of #{beverage} on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def zero_bottles?\r\n    quantity == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    quantity == 2\r\n  end\r\nend	\N	f	1	19	2014-04-07 05:38:38	2014-04-07 05:38:38	564	beer-song.rb
1198	44	ae79b885f08458e1065d4676	superseded	ruby	beer-song	class Beer\r\n  attr_accessor :bottle_quantity\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def initialize\r\n    @bottle_quantity = nil\r\n  end\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    @bottle_quantity = verse_number\r\n\r\n    if one_bottle?\r\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\r\n    elsif two_bottles?\r\n      "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\r\n    elsif zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{bottle_quantity} bottles of beer on the wall, #{bottle_quantity} bottles of beer.\\nTake one down and pass it around, #{bottle_quantity - 1} bottles of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def requested_verses\r\n    requested_verse_numbers = Array(end_verse..start_verse).reverse\r\n    requested_verses = ""\r\n\r\n    requested_verse_numbers.each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def one_bottle?\r\n    bottle_quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottle_quantity == 2\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottle_quantity == 0\r\n  end\r\n\r\nend	\N	f	1	2	2014-04-19 01:37:58	2014-04-19 01:37:58	564	beer-song.rb
1200	44	a557678959e437b14a077db6	superseded	ruby	beer-song	class Beer\r\n  attr_accessor :bottle_quantity\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def initialize\r\n    @bottle_quantity = nil\r\n  end\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    @bottle_quantity = verse_number\r\n\r\n    "#{dynamic_phrase_1} of beer on the wall, #{dynamic_phrase_2} of beer.\\n#{dynamic_phrase_3}, #{dynamic_phrase_4} of beer on the wall.\\n"\r\n  end\r\n\r\n  private\r\n\r\n  # This creates the jonined string of requested verses\r\n  def requested_verses\r\n    requested_verse_numbers = Array(end_verse..start_verse).reverse\r\n    requested_verses = ""\r\n\r\n    requested_verse_numbers.each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n    requested_verses\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 0: **No more bottles** of beer on the wall, no more bottles of beer.\r\n  ## Verse 1: **1 bottle** of beer on the wall, 1 bottle of beer.\r\n  ## Verse x: **x bottles** of beer on the wall, x bottles of beer.\r\n  def dynamic_phrase_1\r\n    # Verse 1: **1 bottle**\r\n    # Verse 0: **No more bottles**\r\n    if zero_bottles?\r\n      "No more bottles"\r\n    # Verse 1: **1 bottle**\r\n    # Verse x: **x bottles**\r\n    else\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 1: 1 bottle of beer on the wall, **1 bottle** of beer.\r\n  ## Verse 0: No more bottles of beer on the wall, **no more bottles** of beer.\r\n  ## Verse x: x bottles of beer on the wall, **x bottles** of beer.\r\n  def dynamic_phrase_2\r\n    # Verse 0: **no more bottles**\r\n    if zero_bottles?\r\n      "no more #{bottle_s}"\r\n    else\r\n      # Verse 1: **1 bottle**\r\n      # Verse x: **x bottles**\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 1: Take **it** down and pass it around, no more bottles of beer on the wall.\r\n  ## Verse 0: **Go to the store and buy some more**, 99 bottles of beer on the wall.\r\n  ## Verse x: **Take one down and pass it around**, x bottles of beer on the wall.\r\n  def dynamic_phrase_3\r\n    one_it = 'one'\r\n\r\n    # Verse 0: **Go to the store and buy some more**\r\n    if zero_bottles?\r\n      'Go to the store and buy some more'\r\n    else\r\n      # Verse 1: **it**\r\n      if one_bottle?\r\n        one_it = 'it'\r\n      end\r\n      # Verse x: **Take one down and pass it around**\r\n      "Take #{one_it} down and pass it around"\r\n    end\r\n  end\r\n\r\n  # Handles the following exceptions:\r\n  ## Verse 0: Go to the store and buy some more, **99 bottles** of beer on the wall.\r\n  ## Verse 1: Take it down and pass it around, **no more bottles** of beer on the wall.\r\n  ## Verse 2: Take one down and pass it around, **1 bottle** of beer on the wall.\r\n  ## Verse x: Take one down and pass it around, **x bottles** of beer on the wall.\r\n  def dynamic_phrase_4\r\n\r\n    # Verse 1: **no more bottles**\r\n    if one_bottle?\r\n      "no more bottles"\r\n    # Verse 0: **99 bottles**\r\n    elsif zero_bottles?\r\n      "99 #{bottle_s}"\r\n    else\r\n      # Verse 2: **bottle**\r\n      # Verse x: **x bottles**\r\n      @bottle_quantity -= 1\r\n      "#{bottle_quantity} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  # This returns the correct plural or singular usage of bottle\r\n  def bottle_s\r\n    if bottle_quantity > 1 || bottle_quantity == 0\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    end\r\n  end\r\n\r\n  def one_bottle?\r\n    bottle_quantity == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottle_quantity == 2\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottle_quantity == 0\r\n  end\r\n\r\nend	\N	f	0	4	2014-04-24 00:38:36	2014-04-24 00:38:36	564	beer-song.rb
1320	47	674aa81d43e8b94f0ec80343	superseded	haskell	largest-series-product	module Series (digits, slices, largestProduct) where\n\nimport Data.Char (digitToInt)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\nslices :: Int -> String -> [[Int]]\nslices n s = map digits $ consecutives n s\n\nconsecutives n [] = []\nconsecutives n s@(_:xs) = take (length s - n + 1) $ take n s : consecutives n xs\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n s =\n  case slices n s of\n    [] -> 1\n    _  -> maximum $ map (foldr (*) 1) $ slices n s	\N	f	1	2	2014-05-16 21:33:55	2014-05-16 21:33:55	618	Series.hs
1203	44	58c82d1474c68fc63fae3d02	superseded	ruby	beer-song	class Beer\r\n  attr_reader :start_verse, :end_verse\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    @start_verse = start_verse\r\n    @end_verse = end_verse\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    bottles_of_beer = verse_number\r\n    dynamic = Dynamic.new(bottles_of_beer)\r\n\r\n    if dynamic.zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{dynamic.phrase_1} of beer on the wall, #{dynamic.phrase_2} of beer.\\n#{dynamic.phrase_3}, #{dynamic.phrase_4} of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def requested_verses\r\n    requested_verses = ""\r\n\r\n    start_verse.downto(end_verse).each do |requested_verse_number|\r\n      requested_verses << verse(requested_verse_number) + "\\n"\r\n    end\r\n    requested_verses\r\n  end\r\n\r\nend\r\n\r\nclass Dynamic\r\n  attr_reader :bottles_of_beer\r\n\r\n  def initialize(bottles_of_beer)\r\n    @bottles_of_beer = bottles_of_beer\r\n  end\r\n\r\n  def phrase_1\r\n    "#{bottles_of_beer} #{bottle_s}"\r\n  end\r\n\r\n  def phrase_2\r\n    "#{bottles_of_beer} #{bottle_s}"\r\n  end\r\n\r\n  def phrase_3\r\n    one_it = 'one'\r\n\r\n    if one_bottle?\r\n      one_it = 'it'\r\n    end\r\n    "Take #{one_it} down and pass it around"\r\n  end\r\n\r\n  def phrase_4\r\n    if one_bottle?\r\n      'no more bottles'\r\n    elsif two_bottles?\r\n      "1 bottle"\r\n    else\r\n      "#{bottles_of_beer - 1} #{bottle_s}"\r\n    end\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottles_of_beer == 0\r\n  end\r\n\r\n  private\r\n\r\n  # This returns the correct plural or singular usage of bottle\r\n  def bottle_s\r\n    if bottles_of_beer > 1 || bottles_of_beer == 0\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    end\r\n  end\r\n\r\n  def one_bottle?\r\n    bottles_of_beer == 1\r\n  end\r\n\r\n  def two_bottles?\r\n    bottles_of_beer == 2\r\n  end\r\n\r\nend	\N	f	0	9	2014-05-21 06:47:21	2014-05-21 06:47:21	564	beer-song.rb
1205	44	2c75cdc420170bb3d3595005	superseded	ruby	beer-song	class Beer\r\n\r\n  def sing(start_verse, end_verse = 0)\r\n    requested_verses = ""\r\n\r\n    start_verse.downto(end_verse).each do |verse_number|\r\n      requested_verses << Verse.new(verse_number).to_s + "\\n"\r\n    end\r\n\r\n    requested_verses\r\n  end\r\n\r\n  def verse(verse_number)\r\n    Verse.new(verse_number).to_s\r\n  end\r\n\r\nend\r\n\r\nclass Verse\r\n  attr_reader :bottles_qty\r\n\r\n  def initialize(verse_number)\r\n    @bottles_qty = verse_number\r\n  end\r\n\r\n  def to_s\r\n    if zero_bottles?\r\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\r\n    else\r\n      "#{bottles_qty} #{bottle_s} of beer on the wall, #{bottles_qty} #{bottle_s} of beer.\\nTake #{one_it} down and pass it around, #{bottles_remaining} #{one_less_bottle_s} of beer on the wall.\\n"\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def bottle_s\r\n    if zero_bottles?\r\n      'bottles'\r\n    elsif one_bottle?\r\n      'bottle'\r\n    elsif bottles_qty > 1\r\n      'bottles'\r\n    end\r\n  end\r\n\r\n  def one_it\r\n    if one_bottle?\r\n      'it'\r\n    else\r\n      'one'\r\n    end\r\n  end\r\n\r\n  def bottles_remaining\r\n    if one_less_bottle < 1\r\n      'no more'\r\n    else\r\n      one_less_bottle\r\n    end\r\n  end\r\n\r\n  def one_less_bottle_s\r\n    if one_less_bottle == 1\r\n      'bottle'\r\n    elsif one_less_bottle == 0\r\n      'bottles'\r\n    else\r\n      bottle_s\r\n    end\r\n  end\r\n\r\n  def one_less_bottle\r\n    bottles_qty - 1\r\n  end\r\n\r\n  def zero_bottles?\r\n    bottles_qty == 0\r\n  end\r\n\r\n  def one_bottle?\r\n    bottles_qty == 1\r\n  end\r\n\r\nend	\N	f	3	11	2014-06-01 07:38:40	2014-06-01 07:38:40	564	beer-song.rb
1213	44	191b4a7ff9ffa510f381e92d	pending	javascript	beer-song	Beer = {\n  verse: function(current) {\n    var next = current - 1;\n\n    return this.beer(current, true) + " on the wall, " + this.beer(current) + ".\\n" + this.chrus(next) + this.beer(next) + " on the wall.\\n";\n  },\n  sing: function(start, end) {\n    var verses = [];\n    if(!end) {\n      end = 0;\n    }\n    for (var i = start; i >= end; i --) {\n      verses.push(this.verse(i));\n    }\n    return verses.join("\\n");\n  },\n  chrus: function(number) {\n    switch(number) {\n      case 0:\n        return "Take it down and pass it around, ";\n      case -1:\n        return "Go to the store and buy some more, ";\n      default:\n        return "Take one down and pass it around, ";\n    }\n  },\n  beer: function(number, upper) {\n\n    switch(number) {\n      case 1:\n        return "1 bottle of beer";\n      case 0:\n        if(upper) {\n          return "No more bottles of beer";\n        } else {\n          return "no more bottles of beer";\n        }\n      case -1:\n        return "99 bottles of beer";\n      default:\n        return number + " bottles of beer";\n    }\n  }\n}\n\n\nmodule.exports = Beer;	\N	f	1	1	2014-03-12 07:24:04	2014-03-12 07:24:04	568	beer-song.js
1223	44	0b23c404040cc04127110aae	done	python	beer-song	#!/usr/bin/env python\n# encoding=utf-8\n\n\nclass Beer(object):\n    """Beer class"""\n\n    def __init__(self):\n        pass\n\n\n    def verse(self, verse_number):\n        """Return a verse of the song."""\n        if verse_number == 0:\n            line1 = "No more bottles of beer on the wall, no more bottles of beer.\\n"\n            line2 = "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n        elif verse_number == 1:\n            line1 = "1 bottle of beer on the wall, 1 bottle of beer.\\n"\n            line2 = "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n        elif verse_number == 2:\n            line1 = "%d bottles of beer on the wall, %d bottles of beer.\\n" % (verse_number, verse_number)\n            line2 = "Take one down and pass it around, 1 bottle of beer on the wall.\\n"\n        else:\n            line1 = "%d bottles of beer on the wall, %d bottles of beer.\\n" % (verse_number, verse_number)\n            line2 = "Take one down and pass it around, %d bottles of beer on the wall.\\n" % (verse_number - 1)\n        return line1 + line2\n\n\n    def sing(self, verse_start, verse_end = 0):\n        """Return a part of the song"""\n        beer = Beer()\n        song = ''\n        for counter in range(verse_start, verse_end - 1, -1):\n            song += beer.verse(counter) + "\\n"\n        return song	\N	f	0	1	2014-03-31 22:05:00	2014-03-31 22:05:00	575	beer-song.py
1224	44	1f638dea88db1c39a04bf606	superseded	elixir	word-count	defmodule Words do\n  def count(text) do\n    text |> extract_words |> word_count\n  end\n\n  defp extract_words(text) do\n    text |> String.downcase\n         |> String.split(%r/\\W+/)\n         |> Stream.reject(&1 == "")\n  end\n\n  defp word_count(list) do\n    Enum.reduce(list, HashDict.new, &update/2)\n  end\n\n  defp update(key, dict) do\n    Dict.update(dict, key, 1, &(&1 + 1))\n  end\nend	\N	f	1	7	2014-02-23 08:05:12	2014-02-23 08:05:12	576	word-count.exs
1225	44	df6cfcf42edce91fbbcf7fde	superseded	elixir	word-count	defmodule Words do\n  def count(text) do\n    words = extract_words(text)\n    do_count(words, HashDict.new)\n  end\n\n  defp do_count([], dict) do\n    dict\n  end\n  defp do_count([word|words], dict) do\n    word_count = next_count(HashDict.fetch(dict, word))\n    do_count(words, HashDict.put(dict, word, word_count))\n  end\n\n  defp next_count(:error), do: 1\n  defp next_count({:ok, count}) do\n    count + 1\n  end\n\n  defp extract_words(text) do\n    text |> String.downcase\n         |> String.replace(%r/[^\\s\\w]/, "")\n         |> String.split(%r/\\s+/)\n  end\nend	\N	f	1	1	2014-03-03 10:14:48	2014-03-03 10:14:48	576	word-count.exs
1249	45	3a9b79e1b3274427217794e7	hibernating	javascript	bob	var Bob = function() {\n  this.hey = function(question){\n    function questionAtEnd(str, suffix) {\n      return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    }\n\n    var numbers = /\\d+/;\n    var shouting = /[A-Z]{2,}/;\n    var shouting_more = /[A-Z]{4,}/;\n    var umlauts_u = '\\xdc'\n    var umlauts_a = '\\xe4'\n    var ok = 'OK'\n\n    if(question.match(ok) === null && question.match(shouting) !== null && (question.indexOf('!') !== -1 || question.indexOf('?', question.length - 1) !== -1 || question.match(shouting_more) !== null) && (question.match(umlauts_u) === null || question.match(umlauts_a) === null)) {\n      return 'Woah, chill out!';\n    } else if(question === '' || question === '   ') {\n      return 'Fine. Be that way!'\n    } else if(question.indexOf('?', question.length - 1) === -1) {\n      return 'Whatever.';\n    } else if(question.indexOf('?', question.length - 1) !== -1) {\n      return 'Sure.';\n    } \n  }\n};\nmodule.exports = Bob;	\N	f	2	1	2014-06-05 15:55:46	2014-06-05 15:55:46	584	bob.js
1255	45	8fbf5d18a45a2444072fd353	done	javascript	atbash-cipher	var _ = require('underscore');\nfunction Atbash(){\n  var forwardAlphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "n", "m", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","0","1", "2", "3", "4", "5", "6", "7", "8", "9"]\n  var reverseAlphabet = ["z", "y", "x", "w", "v", "u", "t", "s", "r", "q", "p", "o", "m", "n", "l", "k", "j", "i", "h", "g", "f", "e", "d", "c", "b", "a", "0","1", "2", "3", "4", "5", "6", "7", "8", "9"]\n  this.encode = function(string){\n    string = string.toLowerCase().replace(/ /g,"");\n    var cypherString="";\n    for(var i=0, l=string.length; i<l; i++){\n      var character = string.charAt(i);\n      var characterIndex = forwardAlphabet.indexOf(character);\n      if(characterIndex !== -1){\n        cypherString+=reverseAlphabet[characterIndex];\n      }\n    }\n    return cypherString.replace(/(\\w{5})/g, '$1' + ' ').trim();\n  }\n}\n\nmodule.exports = new Atbash();	\N	f	0	1	2014-05-02 02:31:02	2014-05-02 02:31:02	588	atbash-cipher.js
1260	45	b97fa94531cabe4ca5d62773	done	elixir	rna-transcription	defmodule DNA do\n  @doc """\n  Transcribes a character list representing DNA nucleotides to RNA\n\n  ## Examples\n\n  iex> DNA.to_rna('ACTG')\n  'UGAC'\n  """\n  @spec to_rna([char]) :: [char]\n  def to_rna(dna) do\n    Enum.map dna, fn dna ->\n      case dna do\n        ?A -> ?U\n        ?C -> ?G\n        ?G -> ?C\n        ?T -> ?A\n      end\n    end\n  end\nend	\N	f	0	2	2014-04-30 03:33:13	2014-04-30 03:33:13	592	dna.exs
1268	46	4e536d75251548eda43479d7	done	clojure	beer-song	(ns beer (:require [clojure.string :as s]))\n\n(defn n-bottles [n]\n  (case n\n    0 "no more bottles"\n    1  "1 bottle"\n    (str n " bottles")))\n\n(defn verse1 [n]\n  (let [bottles (n-bottles n)]\n    (str (s/capitalize bottles) " of beer on the wall, " bottles " of beer.\\n")))\n\n(defn verse2 [n]\n  (let [it-one (if (= 1 n) "it" "one")]\n    (if (zero? n)\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n      (str "Take " it-one " down and pass it around, " (n-bottles (dec n)) " of beer on the wall.\\n"))))\n\n(defn verse [n] (str (verse1 n) (verse2 n)))\n\n(defn sing\n  ([start] (sing start 0))\n  ([start end] (->> (range start (dec end) -1)\n                    (map verse)\n                    (interpose "\\n")\n                    (apply str))))	\N	f	4	3	2014-06-18 01:35:37	2014-06-18 01:35:37	596	beer.clj
1270	46	2c6de7cb3cabca6876291e21	superseded	clojure	beer-song	(ns beer (:require [clojure.string :as s]))\n\n(defn n-bottles [n]\n  (cond (= 0 n) "no more bottles" \n        (= 1 n) "1 bottle" \n        :else (format "%d bottles", n)))\n\n(defn verse1 [n]\n  (let [bottles (n-bottles n)]\n  (format "%s of beer on the wall, %s of beer.\\n" (s/capitalize bottles) bottles)))\n\n(defn verse2 [n]\n  (let [it-one (fn [n] (cond (= 1 n) "it" :else "one"))]\n  (cond (= 0 n) "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n        :else (format "Take %s down and pass it around, %s of beer on the wall.\\n" (it-one n) (n-bottles (- n 1))))))\n\n(defn verse [n] (s/join (list (verse1 n) (verse2 n))))\n\n(defn sing \n  ([m] (sing m 0))\n  ([m n] (let [verse-with-nl (fn [n] (str (verse n) "\\n"))] \n           (s/join (map verse-with-nl (range m (- n 1) -1))))))	\N	f	2	1	2014-06-30 18:22:16	2014-06-30 18:22:16	596	beer-song.clj
1276	46	5f17e563786f74dd5af8a82c	superseded	elixir	nucleotide-count	defmodule DNA do\n\n  @nucleotides [ ?A, ?T, ?C, ?G ]\n\n  def count(strand, nucleotide) do\n    Enum.count strand, &1 == nucleotide\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new @nucleotides, &{ &1, count(strand, &1) }\n  end\n\nend	\N	f	3	5	2014-06-29 10:51:33	2014-06-29 10:51:33	597	nucleotide-count.exs
1277	46	61a832a32d67a7b4dacb4c2b	superseded	ruby	word-count	class Phrase\n\n\tdef initialize(phrase)\n\t\t@phrase = phrase.to_s\n\tend\n\n\tdef word_count\n\t\t@word_count ||= parse\n\tend\n\n\tprivate\n\t\n\tdef parse\n\t\t@word_count = tokenize(normalize(@phrase)).each_with_object(Hash.new(0)) { |word, result| \n\t\t\tresult[word] += 1\n\t\t}\n\tend\n\n\tdef normalize(str)\n\t\tstr.downcase\n\tend\n\n\tdef tokenize(str)\n\t\tstr.scan(/\\w+/)\n\tend\nend	\N	f	1	3	2014-06-16 07:29:33	2014-06-16 07:29:33	598	word-count.rb
1290	46	4de425e2884f905793c697d9	done	javascript	anagram	"use strict";\n\nmodule.exports = function Anagram(word) {\n    var normalizedWord = normalize(word);\n\n    return {\n        match: function(words) {\n            return words.filter(function(anagram) {\n                return normalizedWord === normalize(anagram);\n            });\n        }\n    }\n\n    function normalize(word) {\n        // normalize the word: sort its lowercased letters\n        return word.toLowerCase().split("").sort().join("");\n    }\n};	\N	f	4	3	2014-06-22 13:50:27	2014-06-22 13:50:27	600	anagram.js
1300	46	01bd9fae18ed3d3f1469ffae	done	ruby	binary-search	class BinarySearch\n  attr_reader :list\n  def initialize(array_of_values)\n    if array_sorted?(array_of_values)\n      raise ArgumentError\n    end\n    @list = array_of_values\n  end\n\n  def search_for(value,start_index=nil,end_index=nil)\n    start_index = 0 if start_index.nil?\n    end_index = list.size if end_index.nil?\n    raise RuntimeError if start_index > end_index\n\n    mid_point = middle(start_index, end_index)\n    value_at_midpoint = list[mid_point]\n    if value_at_midpoint == value\n      mid_point\n    elsif (value_at_midpoint > value)\n      search_for(value, start_index, mid_point-1)\n    else\n      search_for(value, mid_point+1, end_index)\n    end\n  end\n\n  def middle(start_index=nil, end_index=nil)\n    start_index = 0 if start_index.nil?\n    end_index = list.size if end_index.nil?\n\n    size_of_range = (end_index-start_index)/2\n    start_index + size_of_range\n  end\n\n  private\n\n  def array_sorted?(list)\n    list.each_cons(2).map do |(value1, value2)|\n      value1 <= value2\n    end.any? do |value|\n      value == false\n    end\n  end\n\nend	\N	f	2	1	2014-06-19 06:08:58	2014-06-19 06:08:58	607	binary.rb
1305	47	852d2ce971d2c12ef148d59d	pending	go	raindrops	// Package raindrops implements PlingPlangPlong for prime factors 3, 5, and 7.\npackage raindrops\n\nimport "fmt"\n\ntype Droplet int\n\nvar mappings = map[int]string{3: "Pling", 5: "Plang", 7: "Plong"}\n\n// Droplet takes an integer input and returns a string satisfying\n// the PlingPlangPlong interpretation of that integer as specified in the README.\nfunc Convert(n int) string {\n\tdrop := Droplet(n)\n\tresult := ""\n\n\tfor i, str := range mappings {\n\t\tif drop.dividesBy(i) {\n\t\t\tresult += str\n\t\t}\n\t}\n\n\tif 0 == len(result) {\n\t\tresult = fmt.Sprintf("%d", n)\n\t}\n\n\treturn result\n}\n\n// This doesn't actually test for primeness but it passes the test suite for\n// the prime inputs we're giving it.\nfunc (d *Droplet) dividesBy(f int) bool {\n\treturn int(*d)%f == 0\n}	\N	f	1	2	2014-06-11 07:52:35	2014-06-11 07:52:35	609	raindrops.go
1324	47	2a7c9da81e8afdf67c905f6d	pending	ruby	raindrops	class Raindrops\n  class << self\n    def convert(n)\n      nums = [3,5,7] & Converter.new(n).factor\n      if nums.any?\n        nums.map do |y|\n          if y == 3\n            'Pling'\n          elsif y == 5\n            'Plang'\n          elsif y == 7\n            'Plong'\n          end\n        end.join('')\n      else\n        n.to_s\n      end\n    end\n  end\nend\n\n\nclass Converter\n  attr_accessor :n\n\n  def initialize(n)\n    @n = n\n    @factors = []\n  end\n\n  def factor\n    (2..n).each do |x|\n      if is_prime?(x) && (n % x == 0)\n        @factors << x\n        @n = (@n / x)\n        break\n      end\n    end\n    return @factors if @n == 1\n    factor\n  end\n\n  def is_prime?(num)\n    (3..num/2).each do |x|\n      return false if num % x == 0\n    end\n    true\n  end\n\nend	\N	f	0	1	2014-05-26 16:28:47	2014-05-26 16:28:47	620	raindrops.rb
1334	47	bc251974537ddaa910bd9ddb	done	ruby	hamming	class Hamming\n\n  def self.compute(dna_a, dna_b)\n    new(dna_a, dna_b).compute\n  end\n\n  attr_reader :dna_a, :dna_b\n\n  def initialize(dna_a, dna_b)\n    @dna_a, @dna_b = *[dna_a, dna_b].map(&:to_s).sort_by(&:size)\n  end\n\n  def compute\n    dna_a.chars\n         .each_with_index\n         .map { |nucleotid, i| dna_b[i] == nucleotid ? 0 : 1 }\n         .reduce(&:+)\n         .to_i\n  end\n\nend	\N	f	5	2	2014-06-06 18:07:36	2014-06-06 18:07:36	625	hamming.rb
1339	48	f4d60567dae31a88b8b008aa	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n\ntype Year  = Integer\ntype Month = Int\n\n-- Can this be made safer than indexing into a list?\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay sc wd year month =\n    let days = matchingDays wd year month in\n    case sc of\n      First  -> head days\n      Second -> days !! 1\n      Third  -> days !! 2\n      Fourth -> days !! 3\n      Last   -> last days\n      Teenth -> head . filter isTeenth $ days\n\nisTeenth :: Day -> Bool\nisTeenth d =\n    let (_, _, day) = toGregorian d in\n    13 <= day && day <= 19\n\nweekdayToInt :: Weekday -> Int\nweekdayToInt w = fromEnum w + 1\n\nmatchingDays :: Weekday -> Year -> Month -> [Day]\nmatchingDays wd year month =\n    [d | d <- [fromGregorian year month 1 .. fromGregorian year month 1],\n         let (_, _, weekDay) = toWeekDate d,\n         weekDay == weekdayToInt wd]	\N	f	1	2	2014-02-11 14:52:58	2014-02-11 14:52:58	627	meetup.hs
1347	48	03376928247e7c5714ab1330	pending	perl5	hamming	package Hamming;\n\n#===============================================================================\n#\n#         FILE: Hamming.pm\n#\n#  DESCRIPTION:\n#\n#        FILES: ---\n#         BUGS: ---\n#        NOTES: ---\n#       AUTHOR: Alexis Ibarra (), ar.ibarrasalas@gmail.com\n# ORGANIZATION: Viajanet Venezuela\n#      VERSION: 1.0\n#      CREATED: 30/05/14 15:57:42\n#     REVISION: ---\n#===============================================================================\n\nuse strict;\nuse warnings;\n\nsub compute {\n    my @str1 = split( "", shift );\n    my @str2 = split( "", shift );\n    my $diff = 0;\n\n    while ( @str1 and @str2 ) {\n        my $item1 = shift(@str1);\n        my $item2 = shift(@str2);\n        $diff++ if ( $item1 ne $item2 );\n    }\n    return $diff;\n}    ## --- end sub compute\n\n1;	\N	f	0	1	2014-04-16 04:50:21	2014-04-16 04:50:21	632	Hamming.pm
1349	48	bdd3acd52d51aff333bcdc46	hibernating	haskell	bank-account	module BankAccount\n    ( BankAccount\n    , openAccount\n    , closeAccount\n    , getBalance\n    , incrementBalance \n    ) where\n\nimport Control.Concurrent\nimport Control.Applicative\nimport Control.Monad\n\ndata BankAccount = BankAccount (MVar Bool) (MVar Int)\n\nopenAccount :: IO BankAccount\nopenAccount = BankAccount <$> newMVar True <*> newMVar 0\n    \ncloseAccount :: BankAccount -> IO ()\ncloseAccount (BankAccount open _) = \n    modifyMVar open $ \\_ -> \n        return (False, ())\n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance (BankAccount open balance) = \n    withMVar open $ \\o -> \n        withMVar balance $ \\b -> \n            return (if o then Just b else Nothing)\n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance (BankAccount open balance) val = \n    withMVar open $ \\o -> \n        modifyMVar balance $ \\b -> \n            if o\n            then return (b + val, Just $ b + val)\n            else return (b, Nothing)\n         \n            	\N	f	1	1	2014-03-20 21:56:43	2014-03-20 21:56:43	634	bank-account.hs
1357	48	47c1294620e54be557291735	superseded	haskell	bob	import Test.HUnit (Assertion, (@=?), runTestTT, Test(..))\nimport Control.Monad (void)\nimport Bob (responseFor)\n\ntestCase :: String -> Assertion -> Test\ntestCase label assertion = TestLabel label (TestCase assertion)\n\ntest_respondsToSomething :: Assertion\ntest_respondsToSomething =\n  "Whatever." @=? responseFor "Tom-ay-to, tom-aaaah-to."\n\ntest_respondsToShouts :: Assertion\ntest_respondsToShouts =\n  "Woah, chill out!" @=? responseFor "WATCH OUT!"\n\ntest_respondsToQuestions :: Assertion\ntest_respondsToQuestions =\n  "Sure." @=? responseFor "Does this cryogenic chamber make me look fat?"\n\ntest_respondsToForcefulTalking :: Assertion\ntest_respondsToForcefulTalking =\n  "Whatever." @=? responseFor "Let's go make out behind the gym!"\n\ntest_respondsToAcronyms :: Assertion\ntest_respondsToAcronyms =\n  "Whatever." @=? responseFor "It's OK if you don't want to go to the DMV."\n\ntest_respondsToForcefulQuestions :: Assertion\ntest_respondsToForcefulQuestions =\n  "Woah, chill out!" @=? responseFor "WHAT THE HELL WERE YOU THINKING?"\n\ntest_respondsToShoutingWithSpecialCharacters :: Assertion\ntest_respondsToShoutingWithSpecialCharacters =\n  "Woah, chill out!" @=? responseFor (\n    "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!")\n\ntest_respondsToShoutingNumbers :: Assertion\ntest_respondsToShoutingNumbers =\n  "Woah, chill out!" @=? responseFor "1, 2, 3 GO!"\n\ntest_respondsToShoutingWithNoExclamationMark :: Assertion\ntest_respondsToShoutingWithNoExclamationMark =\n  "Woah, chill out!" @=? responseFor "I HATE YOU"\n\ntest_respondsToStatementContainingQuestionMark :: Assertion\ntest_respondsToStatementContainingQuestionMark =\n  "Whatever." @=? responseFor "Ending with ? means a question."\n\ntest_respondsToSilence :: Assertion\ntest_respondsToSilence =\n  "Fine. Be that way." @=? responseFor ""\n\ntest_respondsToProlongedSilence :: Assertion\ntest_respondsToProlongedSilence =\n  "Fine. Be that way." @=? responseFor "    "\n\nrespondsToTests :: [Test]\nrespondsToTests =\n  [ testCase "something" test_respondsToSomething\n  , testCase "shouts" test_respondsToShouts\n  , testCase "questions" test_respondsToQuestions\n  , testCase "forceful talking" test_respondsToForcefulTalking\n  , testCase "acronyms" test_respondsToAcronyms\n  , testCase "forceful questions" test_respondsToForcefulQuestions\n  , testCase "shouting with special characters"\n    test_respondsToShoutingWithSpecialCharacters\n  , testCase "shouting numbers" test_respondsToShoutingNumbers\n  , testCase "shouting with no exclamation mark"\n    test_respondsToShoutingWithNoExclamationMark\n  , testCase "statement containing question mark"\n    test_respondsToStatementContainingQuestionMark\n  , testCase "silence" test_respondsToSilence\n  , testCase "prolonged silence" test_respondsToProlongedSilence\n  ]\n\nmain :: IO ()\nmain = void (runTestTT (TestList respondsToTests))	\N	f	2	1	2014-04-17 22:12:22	2014-04-17 22:12:22	637	bob.hs
1366	48	ea9a984d54985759b0005fcb	superseded	ruby	bob	class Bob\n  def initialize\n  end\n\n  def hey(s)\n    if spaces?(s)\n      ignore\n    elsif yelling?(s)\n      yell\n    elsif question?(s)\n      answer\n    else\n      respond\n    end\n  end\n\n  private\n\n  def yelling?(c)\n    if no_letters?(c)\n      return false\n    end\n    c.each_byte do |b|\n      if b >= 97 && b <= 122\n        return false\n      end\n    end\n    true\n  end\n\n  def no_letters?(s)\n    s.match(/[a-zA-Z]+/).nil?\n  end\n\n  def spaces?(c)\n    if c.empty?\n      return true\n    end\n\n    c.each_byte do |b|\n      if b != 32\n        return false\n      end\n    end\n    true\n  end\n\n  def question?(c)\n    c.rindex('?') == c.length - 1\n  end\n\n  def respond\n    'Whatever.'\n  end\n\n  def ignore\n    'Fine. Be that way!'\n  end\n\n  def answer\n    "Sure."\n  end\n\n  def yell\n    'Woah, chill out!'\n  end\n\nend	\N	f	2	2	2014-05-09 01:21:56	2014-05-09 01:21:56	642	bob.rb
1522	35	80add80c6d502673ddf12d0d	done	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    StrandPair.new(sequence1, sequence2).hamming_distance\n  end\n\n  StrandPair = Struct.new(:sequence, :other_sequence) do\n\n    def hamming_distance\n      nucleic_pair.count(&:mutation?)\n    end\n\n    def nucleic_pair\n      (0...common_length).map do |i|\n        NucleicPair.new(sequence[i], other_sequence[i])\n      end\n    end\n\n    def common_length\n      [sequence.length, other_sequence.length].min\n    end\n\n  end\n\n  NucleicPair = Struct.new(:original_nucleotide, :other_nucleotide) do\n    def mutation?\n      !original_nucleotide.eql?(other_nucleotide)\n    end\n  end\nend	\N	f	4	6	2014-06-21 11:23:22	2014-06-21 11:23:22	713	hamming.rb
1368	48	2e071d9135988a9bd4b3915b	superseded	javascript	beer-song	var VerseText = {\n  bottleText: function (count) { \n    return (count == 1) ? "bottle" : "bottles";\n  },\n  verseX: function (count) { \n    var remaining = count - 1;\n    return "" + count + " bottles of beer on the wall, " + count + " bottles of beer.\\nTake one down and pass it around, " + remaining + " " + VerseText.bottleText(remaining) + " of beer on the wall.\\n";\n  }, \n  verse1: function (){ \n    return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n  },\n  verse0: function (){ \n    return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n  }\n};\n\nvar Beer = {\n  verse: function (count) { \n    if (count > 1) { \n      return VerseText.verseX(count);\n    } else if (count === 1) { \n      return VerseText.verse1();\n    } else { \n      return VerseText.verse0();\n    }\n  },\n\n  sing: function (start, end) { \n    if (!end) { end = 0; }\n\n    var lines = [];\n    for ( var i = start; i >= end; i-- ) {\n      lines.push( Beer.verse(i));\n    }\n    return lines.join("\\n");\n  }\n};\n\nmodule.exports = Beer;	\N	f	1	1	2014-03-11 03:28:23	2014-03-11 03:28:23	644	beer-song.js
1376	31	83187a188c9b2f0a71eda055	superseded	ruby	anagram	class NormalizedLetters\r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def matches?(other_normalized_letters)\r\n    normalized_word != other_normalized_letters.normalized_word &&\r\n      letters == other_normalized_letters.letters\r\n  end\r\n\r\n  def normalized_word\r\n    @normalized_word ||= @word.downcase\r\n  end\r\n\r\n  def letters\r\n    @letters ||= normalized_word.chars.sort\r\n  end\r\n\r\n  def to_s\r\n    @letters.to_s\r\n  end\r\nend\r\n\r\nclass Anagram\r\n  attr_reader :word\r\n  \r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def match(word_list)\r\n    word_list.select { |candidate|\r\n      normalized_letters.matches? NormalizedLetters.new candidate\r\n    }\r\n  end\r\n\r\n  private\r\n\r\n  def normalized_letters\r\n    @normalized_letters ||= NormalizedLetters.new word\r\n  end\r\nend\r	\N	f	3	6	2014-05-22 07:58:39	2014-05-22 07:58:39	645	anagram.rb
1378	31	bf255339eccc94e7e3ececf0	done	ruby	beer-song	class String\n  def pluralize(number)\n    number == 1 ? to_s : "#{to_s}s"\n  end\nend\n\nclass BeerSong\n  def verse(number)\n    if (number.to_i == 0)\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    elsif (number.to_i == 1)\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "#{number} #{"bottle".pluralize(number)} of beer on the wall, #{number} #{"bottle".pluralize(number)} of beer.\\nTake one down and pass it around, #{number-1} #{"bottle".pluralize(number-1)} of beer on the wall.\\n"\n    end\n  end\n\n  def verses(end_verse_number, start_verse_number)\n    verses_to_sing = (start_verse_number..end_verse_number).to_a\n    verses = verses_to_sing.collect do |verse_number|\n      verse(verse_number)\n    end\n    verses.reverse.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(99,0)\n  end\nend	\N	f	2	1	2014-04-08 06:22:53	2014-04-08 06:22:53	646	beer_song.rb
1384	31	fbc387f54f8e49a6ae4a53aa	superseded	ruby	space-age	class SpaceAge\n  attr_accessor :mercury_years_from, :venus___years_from, :mars____years_from,\n                :jupiter_years_from, :saturn__years_from, :uranus__years_from,\n                :neptune_years_from\n  attr_accessor :seconds\n\n  def initialize(seconds)\n    @seconds = seconds.to_f\n\n    @mercury_years_from = lambda { |years| (years / 0.24084670).round(2) }\n    @venus___years_from = lambda { |years| (years / 0.61519726).round(2) }\n    @mars____years_from = lambda { |years| (years / 1.88081580).round(2) }\n    @jupiter_years_from = lambda { |years| (years / 11.8626150).round(2) }\n    @saturn__years_from = lambda { |years| (years / 29.4474980).round(2) }\n    @uranus__years_from = lambda { |years| (years / 84.0168460).round(2) }\n    @neptune_years_from = lambda { |years| (years / 164.791320).round(2) }\n  end\n\n  def earth_years () @seconds / 31_557_600                 end\n\n  def on_earth    () earth_years.round(2)                  end\n\n  def on_mercury  () get @mercury_years_from,  earth_years end\n\n  def on_venus    () get @venus___years_from,  earth_years end\n\n  def on_mars     () get @mars____years_from,  earth_years end\n\n  def on_jupiter  () get @jupiter_years_from,  earth_years end\n\n  def on_saturn   () get @saturn__years_from,  earth_years end\n\n  def on_uranus   () get @uranus__years_from,  earth_years end\n\n  def on_neptune  () get @neptune_years_from,  earth_years end\n\n  def get      (a,b) a.call b                              end\n\nend	\N	f	4	1	2014-05-03 07:48:56	2014-05-03 07:48:56	649	space-age.rb
1389	31	8e500e67d5b28707a522d02c	superseded	ruby	meetup	class Meetup\n  TEENS = (13..19)\n\n  attr_reader :month, :year\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  def day(weekday, schedule)\n    candidates = date_candidates_for(weekday)\n    the_day = find_week[schedule].call(candidates)\n    Date.new(year, month, the_day)\n  end\n\n  private\n\n  def date_candidates_for(weekday)\n    (1..month_length).to_a.select do |date|\n      Date.new(year, month, date).send("#{weekday}?".to_sym)\n    end\n  end\n\n  def month_length\n    return 28 if month == 2\n    [4, 6, 9, 11].include?(month) ? 30 : 31\n  end\n\n  def find_week\n    { :first  => lambda { |days| days[0] },\n      :second => lambda { |days| days[1] },\n      :third  => lambda { |days| days[2] },\n      :fourth => lambda { |days| days[3] },\n      :last   => lambda { |days| days[-1] },\n      :teenth => lambda { |days| find_teenth(days) }\n    }\n  end\n\n  def find_teenth(days)\n    days.select{ |day| TEENS.include?(day) }.first\n  end\n\nend	\N	f	3	1	2014-03-13 09:57:11	2014-03-13 09:57:11	653	meetup.rb
1400	31	71946a49b9961beaf87a51e2	done	ruby	sieve	class Sieve\n  attr_reader :primes\n\n  def initialize(n)\n    @primes = sieve(n)\n  end\n\n  private\n\n  def divisible(numerator, denominator)\n    numerator % denominator == 0\n  end\n\n  def sieve(n)\n    possibilities = (2..n).to_a\n    primes = []\n\n    while possibilities.length > 0 do\n      prime = possibilities.shift\n      primes << prime\n      possibilities = possibilities.select { |possibility|\n        !divisible(possibility, prime)\n      }\n    end\n\n    primes\n  end\nend	\N	f	3	1	2014-02-09 10:05:00	2014-02-09 10:05:00	659	sieve.rb
1419	39	b496e7b950e80ae804e841a9	done	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds.to_f\n    earth_year_in_seconds = 31_557_600\n    @earth_years = @seconds / earth_year_in_seconds\n    generate_methods\n  end\n\n  def generate_methods\n    years_converter = {\n      Earth: 1.0,\n      Mercury: 0.2408467,\n      Venus: 0.61519726,\n      Mars: 1.8808158,\n      Jupiter: 11.862615,\n      Saturn: 29.447498,\n      Uranus: 84.016846,\n      Neptune: 164.79132\n    }\n\n    years_converter.keys.each do |planet|\n      self.class.send(:define_method, "on_#{planet.to_s.downcase}") do\n        (@earth_years / years_converter[planet]).round(2)\n      end\n    end\n  end\nend\n\nage = SpaceAge.new(1_000_000_000)\n# assert_equal 31.69, \np age.on_earth\n\n# require 'minitest/autorun'\n# require_relative 'space_age'\n\n# class SpaceAgeTest < MiniTest::Unit::TestCase\n\n#   def test_age_in_seconds\n    # age = SpaceAge.new(1_000_000)\n#     assert_equal 1_000_000, age.seconds\n#   end\n\n#   def test_age_in_earth_years\n#     skip\n#     age = SpaceAge.new(1_000_000_000)\n#     assert_equal 31.69, age.on_earth\n#   end\n\n#   def test_age_in_mercury_years\n#     skip\n#     age = SpaceAge.new(2_134_835_688)\n#     assert_equal 67.65, age.on_earth\n#     assert_equal 280.88, age.on_mercury\n#   end\n\n#   def test_age_in_venus_years\n#     skip\n#     age = SpaceAge.new(189_839_836)\n#     assert_equal 6.02, age.on_earth\n#     assert_equal 9.78, age.on_venus\n#   end\n\n#   def test_age_on_mars\n#     skip\n#     age = SpaceAge.new(2_329_871_239)\n#     assert_equal 73.83, age.on_earth\n#     assert_equal 39.25, age.on_mars\n#   end\n\n#   def test_age_on_jupiter\n#     skip\n#     age = SpaceAge.new(901_876_382)\n#     assert_equal 28.58, age.on_earth\n#     assert_equal 2.41, age.on_jupiter\n#   end\n\n#   def test_age_on_saturn\n#     skip\n#     age = SpaceAge.new(3_000_000_000)\n#     assert_equal 95.06, age.on_earth\n#     assert_equal 3.23, age.on_saturn\n#   end\n\n#   def test_age_on_uranus\n#     skip\n#     age = SpaceAge.new(3_210_123_456)\n#     assert_equal 101.72, age.on_earth\n#     assert_equal 1.21, age.on_uranus\n#   end\n\n#   def test_age_on_neptune\n#     skip\n#     age = SpaceAge.new(8_210_123_456)\n#     assert_equal 260.16, age.on_earth\n#     assert_equal 1.58, age.on_neptune\n#   end\n\n# end	\N	f	2	1	2014-06-02 12:59:05	2014-06-02 12:59:05	667	space-age.rb
1424	34	beb75d5c5b0ee2a414cc6440	pending	ruby	beer-song	class BeerSong\n  MAX = 99\n\n  class BottlesFactory\n    def self.make(nb)\n      if nb > 1\n        ManyBottles.new(nb)\n      elsif nb == 1\n        OneBottle.new\n      elsif nb == 0\n        ZeroBottle.new\n      else\n        ManyBottles.new(MAX)\n      end\n    end\n  end\n\n  class BottlesAmount\n    def -(amount)\n      BottlesFactory.make(nb-amount)\n    end\n\n    def to_s\n      "bottle"\n    end\n  end\n\n  class OneOrMoreBottles < BottlesAmount\n    def drink(this)\n      "Take #{this} down and pass it around"\n    end\n  end\n\n  class ManyBottles < OneOrMoreBottles\n    attr_reader :nb\n\n    def initialize(nb)\n      @nb = nb\n    end\n\n    def to_s\n      "#{@nb} #{super}s"\n    end\n\n    def drink\n      super("one")\n    end\n  end\n\n  class OneBottle < OneOrMoreBottles\n    def nb; 1; end\n\n    def to_s\n      "1 #{super}"\n    end\n\n    def drink\n      super("it")\n    end\n  end\n\n  class ZeroBottle < BottlesAmount\n    def nb; 0; end\n\n    def to_s\n      "no more #{super}s"\n    end\n\n    def drink\n      "Go to the store and buy some more"\n    end\n  end\n\n  def verse(bottles_nb)\n    bottles = BottlesFactory.make(bottles_nb)\n    str = "#{bottles} of beer on the wall, #{bottles} of beer.\\n".capitalize \\\n          + "#{bottles.drink}, #{bottles-1} of beer on the wall.\\n"\n  end\n\n  def verses(first, last)\n    first.downto(last).each_with_object('') do |bottles_nb, str|\n      str << verse(bottles_nb) + "\\n"\n    end\n  end\n\n  def sing\n    verses(MAX, 0)\n  end\nend	\N	f	1	1	2014-04-20 05:54:16	2014-04-20 05:54:16	671	beer_song.rb
1432	34	671b4e30adf3830323f486e2	superseded	ruby	bob	class Bob\n  def hey what\n    case Analiser.string_type what\n    when :empty then "Fine. Be that way!"\n    when :yieling then 'Woah, chill out!'\n    when :question then "Sure."\n    else "Whatever."\n    end\n  end\nend\n\nmodule Analiser\n\n  def string_type text\n    text = text.gsub(/\\d/, '')\n    case\n    when empty?(text) then :empty\n    when yieling?(text) then :yieling\n    when question?(text) then :question\n    end\n  end\n\n  def empty? text\n    text.strip == ''\n  end\n\n  def yieling? text\n    text =~ /\\w/ && text == text.upcase\n  end\n\n  def question? text\n    string[-1]['?']\n  end\nend	\N	f	5	3	2014-05-26 13:56:48	2014-05-26 13:56:48	673	bob.rb
1439	34	1e61ca46831684cff2e838f4	done	ruby	house	class House\n  def verse(num)\n    "This is #{verse_fragment(num)}.\\n"\n  end\n\n  def verses(first, last)\n    first.upto(last).map{ |n| verse(n) }.join("\\n") + "\\n"\n  end\n\n  private\n\n  def verse_fragment(num)\n    @verse_fragment ||= {}\n    @verse_fragment[num] ||= VERSE_PARTS[0...num].reverse.join(' ')\n  end\n\n  VERSE_PARTS = [\n    "the house that Jack built",\n    "the malt that lay in",\n    "the rat that ate",\n    "the cat that killed",\n    "the dog that worried",\n    "the cow with the crumpled horn that tossed",\n    "the maiden all forlorn that milked",\n    "the man all tattered and torn that kissed",\n    "the priest all shaven and shorn that married",\n    "the rooster that crowed in the morn that woke",\n    "the farmer sowing his corn that kept",\n    "the horse and the hound and the horn that belonged to"\n  ]\n  private_constant :VERSE_PARTS\nend	\N	f	1	1	2014-04-20 06:24:43	2014-04-20 06:24:43	679	house.rb
1449	36	7d1df622e7ba18bb284197da	superseded	ruby	etl	class ETL\n\n  def self.transform(input)\n    new(input).transform\n  end\n\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def transform\n    input.keys.inject({}) do |new, num|\n      add_words_to_hash(new, num)\n    end\n  end\n\n  private\n\n  def add_words_to_hash(new, num)\n    input[num].each_with_object(new) do |word, new|\n      new[word.downcase] = num\n    end\n  end\n\nend	\N	f	4	4	2014-05-19 17:01:24	2014-05-19 17:01:24	682	etl.rb
1454	36	ac42a3216d3fd9afeb461092	hibernating	ruby	phone-number	class PhoneNumber\n  attr_reader :phone_no\n  \n  def initialize(phone_no)\n    @phone_no = phone_no.gsub(/[()-\\.\\s]/,'')\n  end\n  \n  def number\n    if bad_number\n      default_number\n    elsif eleven_digits_starts_with_1?\n      phone_no[1..-1]\n    else\n      phone_no\n    end\n  end\n  \n  def area_code\n    number[0..2]\n  end\n  \n  def to_s\n    ph = number\n    "(" + ph[0..2] + ") " + ph[3..5] + "-" + ph[6..9]\n  end\n  \n  private\n  \n  def bad_number\n    phone_num_length < 10 || phone_num_length > 11 || phone_no.match(/[a-zA-Z]/) || (phone_num_length == 11 && !phone_no.start_with?("1"))\n  end\n  \n  def default_number\n    "0000000000"\n  end\n  \n  def eleven_digits_starts_with_1?\n    phone_num_length == 11 && phone_no.start_with?("1")\n  end\n  \n  def phone_num_length\n    phone_no.length\n  end\nend	\N	f	1	1	2014-05-03 23:49:28	2014-05-03 23:49:28	684	phone_number.rb
1458	36	1aebe4a7fc94ec18c066dad2	superseded	ruby	beer-song	class Beer\n  def verse(quantity)\n    verse_for(bottles(quantity))\n  end\n\n  def sing(*verses)\n    start  = verses.fetch(0)\n    finish = verses.fetch(1, 0)\n    start.downto(finish).each_with_object('') do |line, lyrics|\n      lyrics << "#{verse(line)}\\n"\n    end\n  end\n\n  private\n\n  def verse_for(bottles)\n    Verse.new(bottles).to_s\n  end\n\n  def bottles(quantity)\n    Bottles.new(quantity)\n  end\nend\n\nclass Verse\n  def initialize(bottles)\n    @bottles = bottles\n  end\n\n  def to_s\n    "#{first_line}\\n#{second_line}\\n"    \n  end\n\n  private\n\n  def first_line\n    if @bottles.gone?\n      "No more bottles of beer on the wall, no more bottles of beer."\n    else\n      "#{@bottles} of beer on the wall, #{@bottles} of beer."\n    end\n  end\n\n  def second_line\n    if @bottles.gone?\n      "Go to the store and buy some more, 99 bottles of beer on the wall."\n    else\n      "Take #{@bottles.unit} down and pass it around, #{@bottles.remaining} of beer on the wall."\n    end\n  end\nend\n\nclass Bottles\n  def initialize(quantity)\n    @quantity = quantity\n  end\n\n  def gone?\n    @quantity == 0\n  end\n\n  def remaining\n    Bottles.new(@quantity - 1)\n  end\n\n  def unit\n    @quantity > 1 ? 'one' : 'it'\n  end\n\n  def to_s\n    case @quantity\n    when 1\n      '1 bottle'\n    when 0\n      'no more bottles'\n    else\n      "#{@quantity} bottles"\n    end\n  end\nend	\N	f	0	1	2014-03-05 14:11:01	2014-03-05 14:11:01	686	beer-song.rb
1461	36	bad34b2ba2de2efd9114b203	superseded	ruby	luhn	class Luhn\n  def self.create number\n    luhn = Luhn.new(number * 10)\n    number * 10 + (10 - luhn.checksum) % 10\n  end\n\n  def initialize number\n    @number = number\n  end\n\n  def addends\n    digits.reverse.each_with_index.map do |digit, index|\n      next digit unless index.odd?\n\n      if digit < 5\n        digit * 2\n      else\n        digit * 2 - 9\n      end\n    end.reverse\n  end\n\n  def checksum\n    addends.inject(:+)\n  end\n\n  def valid?\n    checksum % 10 == 0\n  end\n\n  private\n\n  def digits\n    @number.to_s.chars.map(&:to_i)\n  end\nend	\N	f	1	1	2014-04-12 23:17:13	2014-04-12 23:17:13	687	luhn.rb
1466	36	d2f74c1a493e708f7a3df627	superseded	ruby	house	class House\n\n  WORDS = {\n    1 => { :name =>"house",:desc => "that Jack built.", :action => "lay in" },\n    2 => { :name =>"malt", :action => "ate" },\n    3 => { :name =>"rat", :action => "killed" },\n    4 => { :name =>"cat", :action => "worried" },\n    5 => { :name =>"dog", :action => "tossed" },\n    6 => { :name =>"cow", :desc => "with the crumpled horn", :action => "milked" },\n    7 => { :name =>"maiden", :desc => "all forlorn", :action => "kissed" },\n    8 => { :name =>"man", :desc => "all tattered and torn", :action => "married" },\n    9 => { :name =>"priest", :desc => "all shaven and shorn", :action => "woke" },\n    10 => { :name =>"rooster", :desc => "that crowed in the morn", :action => "kept" },\n    11 => { :name =>"farmer", :desc => "sowing his corn", :action => "belonged to" },\n    13 => { :name =>"horse", :desc => "and the hound and the horn", :action => "" },\n  }\n\n  private_constant :WORDS\n\n  def self.recite\n    phrase.join "\\n"\n  end\n\n  private\n\n  def self.phrase\n    [].tap do |result|\n      WORDS.each_with_object([]) do |(i,v), temp|\n        result << first_line(i)\n        temp.reverse.each {|j| result << second_line(j) }\n        temp << i \n        result << ""\n      end\n    end\n  end\n\n  def self.first_line index\n    str = "This is the "\n    str << [WORDS[index][:name], WORDS[index][:desc]].compact.join(" ")\n  end\n\n  def self.second_line index\n    str = "that #{WORDS[index][:action]} the "\n    str << [WORDS[index][:name], WORDS[index][:desc]].compact.join(" ")\n  end\n\nend	\N	f	1	1	2014-02-20 16:48:53	2014-02-20 16:48:53	690	house.rb
1469	36	bc20399bf0201eedfb5bf71c	done	ruby	proverb	class Proverb\n  def initialize(*matters)\n    @options = matters.last.is_a?(Hash) ? matters.pop : {}\n    @matters = matters\n  end\n\n  def to_s\n    for_lines + last_line\n  end\n\n  private\n\n  def first\n    [@options[:qualifier], @matters.first].compact.join(' ')\n  end\n\n  def for_lines\n    @matters.each_cons(2).map do |first, second|\n      "For want of a #{first} the #{second} was lost.\\n"\n    end.join('')\n  end\n\n  def last_line\n    "And all for the want of a #{first}."\n  end\nend	\N	f	0	1	2014-04-02 08:47:13	2014-04-02 08:47:13	692	proverb.rb
1483	32	f3b5c8af4607115c97b1fb4b	superseded	ruby	nucleotide-count	module Nucleotide\n  NUCLEOTIDES = {\n    'A' => 'Adenosine',\n    'C' => 'Cytidine',\n    'G' => 'Guanosine',\n    'T' => 'Thymidine',\n    'U' => 'Uracil'\n  }\n  DNA_NUCLEOTIDES = NUCLEOTIDES.select { |k, v| k != 'U' }\n  RNA_NUCLEOTIDES = NUCLEOTIDES.select { |k, v| k != 'T' }\nend\n\nclass RNA\n  include Nucleotide\nend\n\nclass DNA\n  include Nucleotide\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    @sequence.chars.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.keys.each_with_object(Hash.new(0)) do |nucleotide, hash|\n      hash[nucleotide] = count(nucleotide)\n    end\n  end\nend	\N	f	2	2	2014-06-04 13:23:06	2014-06-04 13:23:06	699	nucleotide-count.rb
1484	32	fef9ae9a6b8425e31298ee5d	superseded	ruby	nucleotide-count	module Nucleotide\n  DNA_NUCLEOTIDES = {\n    'A' => 'Adenosine',\n    'C' => 'Cytidine',\n    'G' => 'Guanosine',\n    'T' => 'Thymidine'\n  }\n  RNA_NUCLEOTIDES = {\n    'A' => 'Adenosine',\n    'C' => 'Cytidine',\n    'G' => 'Guanosine',\n    'U' => 'Uracil'\n  }\n  NUCLEOTIDES = DNA_NUCLEOTIDES.keys | RNA_NUCLEOTIDES.keys\nend\n\nclass RNA\n  include Nucleotide\nend\n\nclass DNA\n  include Nucleotide\n  def initialize(dna)\n    @dna = dna\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    @dna.chars.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.keys.each_with_object(Hash.new(0)) do |nucleotide, hash|\n      hash[nucleotide] = count(nucleotide)\n    end\n  end\nend	\N	f	3	1	2014-06-11 02:39:42	2014-06-11 02:39:42	699	nucleotide-count.rb
1498	35	863ad9895feddfaf88296ac9	superseded	ruby	house	class House\n\n  def verse(number)\n    'This is the ' + SUBJECTS.first(number).reverse.join(' the ') + ".\\n"\n  end\n\n  def verses(first, last)\n    (first..last).map {|number| verse(number) + "\\n" }.join\n  end\n\n  SUBJECTS = [\n    'house that Jack built',\n    'malt that lay in',\n    'rat that ate',\n    'cat that killed',\n    'dog that worried',\n    'cow with the crumpled horn that tossed',\n    'maiden all forlorn that milked',\n    'man all tattered and torn that kissed',\n    'priest all shaven and shorn that married',\n    'rooster that crowed in the morn that woke',\n    'farmer sowing his corn that kept',\n    'horse and the hound and the horn that belonged to'\n  ]\nend	\N	f	0	1	2014-04-30 08:42:58	2014-04-30 08:42:58	708	house.rb
1499	35	021da007129ad65c6356ce77	done	ruby	house	class House\n\n  def verse(number)\n    'This is the ' + verse_subjects(number).join(' the ') + ".\\n"\n  end\n\n  def verses(first, last)\n    (first..last).map {|number| verse(number) + "\\n" }.join\n  end\n\nprivate\n\n  def verse_subjects(number)\n    SUBJECTS.first(number).reverse\n  end\n\n  SUBJECTS = [\n    'house that Jack built',\n    'malt that lay in',\n    'rat that ate',\n    'cat that killed',\n    'dog that worried',\n    'cow with the crumpled horn that tossed',\n    'maiden all forlorn that milked',\n    'man all tattered and torn that kissed',\n    'priest all shaven and shorn that married',\n    'rooster that crowed in the morn that woke',\n    'farmer sowing his corn that kept',\n    'horse and the hound and the horn that belonged to'\n  ]\nend	\N	f	0	2	2014-05-11 00:53:02	2014-05-11 00:53:02	708	house.rb
1511	35	33b53e6229e098ce787c0103	superseded	ruby	bob	class Bob\n  def hey(str)\n    if there?(str)\n      fine\n    elsif caps?(str)\n      chillout\n    elsif question?(str)\n      sure\n    else\n      whatever\n    end\n  end\n\n  private\n\n  def question?(str)\n    str.end_with?('?')\n  end\n\n  def caps?(str)\n    nstr = str\n    str == nstr.upcase\n  end\n\n  def there?(str)\n    str.to_s.strip == ""\n  end\n\n  def whatever\n    answers[:whatever]cd\n  end\n\n  def chillout\n    answers[:chillout]\n  end\n\n  def sure\n    answers[:sure]\n  end\n\n  def fine\n    answers[:fine]\n  end\n\n  def answers\n    {\n      :whatever => "Whatever.",\n      :chillout => "Woah, chill out!",\n      :sure => "Sure.",\n      :fine => "Fine. Be that way!"\n    }\n  end\nend	\N	f	15	1	2014-06-12 16:04:35	2014-06-12 16:04:35	710	bob.rb
1516	35	b2dfb76a38f6a5122f38d404	done	ruby	beer-song	module NumberHelpers\n  def quantified(quantity, noun)\n    singular = quantity == 1\n    "#{quantity} #{noun}#{'s' unless singular}"\n  end\nend\n\nclass Beer\n  include NumberHelpers\n\n  def verse(num)\n    remaining = num - 1\n    case\n    when num > 1\n      quantified_bottles = quantified(remaining, 'bottle')\n      "#{num} bottles of beer on the wall, #{num} bottles of beer.\\n" +\n      "Take one down and pass it around, #{quantified_bottles} of beer on the wall.\\n"\n    when num == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    else\n      "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n  end\n\n  def sing(verse_high, verse_low=0)\n    verse_high.downto(verse_low).map do |verse|\n      verse(verse) + "\\n"\n    end.join\n  end\n  \nend	\N	f	5	4	2014-06-07 22:51:29	2014-06-07 22:51:29	712	beer-song.rb
1534	33	845a96090126a3617d751e17	done	ruby	crypto-square	class String\n  # I've needed to chunk a string up several times, I wish that this was\n  # part of the ruby standard library\n  def chunk(chunk_size)\n    return [self] if chunk_size >= size\n    scan(/.{1,#{chunk_size}}/)\n  end\n\n  # I've needed to cast a String as an array several times, I also wish\n  # that this was part of the standard library\n  def to_a\n    chars.to_a\n  end\nend\n\nclass Array\n  def normalized_length(length)\n    length.times.collect { |i| self[i] }\n  end\nend\n\n# The Exercism provided API didn't feel quite right to me.  I chose\n# different method names because I think they better capture what each\n# method is trying to do.  I also wanted to practice working with an\n# interface that I didn't control while still providing a good\n# experience.  This set of method aliases are factored out of the class\n# so that, as an end user, I'm not even thinking of using the old names.\nmodule Exercism\n  module CryptoAPI\n    def self.included(base)\n      base.class_eval do\n        alias_method :normalize_plaintext, :normalized_plaintext\n        alias_method :size, :square_size\n        alias_method :plaintext_segments, :normalized_plaintext_segments\n        alias_method :normalize_ciphertext, :normalized_ciphertext\n      end\n    end\n  end\nend\n\nclass Crypto\n  attr_reader :plaintext, :special_character_regex, :cipher_chunk_size\n\n  def initialize(plaintext, options = {})\n    @plaintext = plaintext.to_s\n    @special_character_regex = options.fetch(:special_character_regex, \n                                             default_special_character_regex)\n    @cipher_chunk_size = options.fetch(:cipher_chunk_size,\n                                          default_cipher_chunk_size)\n  end\n\n  def normalized_plaintext\n    @normalized_plaintext ||= plaintext.gsub(special_character_regex, '').downcase\n  end\n\n  def ciphertext\n    normalized_cipher_character_block.transpose.flatten.join\n  end\n\n  def square_size\n    Math.sqrt(normalized_plaintext.size).ceil\n  end\n\n  def normalized_plaintext_segments\n    normalized_plaintext.chunk(square_size)\n  end\n\n  def normalized_ciphertext\n    ciphertext.chunk(cipher_chunk_size).join(' ')\n  end\n\n  include Exercism::CryptoAPI\n\n  private\n\n  def normalized_cipher_character_block\n    normalized_plaintext_segments.map do |characters|\n      characters.to_a.normalized_length(square_size)\n    end\n  end\n\n  def default_special_character_regex\n    /[#\\$%\\^&,!\\. ]/\n  end\n\n  def default_cipher_chunk_size\n    5\n  end\nend	\N	f	1	1	2014-06-12 11:52:38	2014-06-12 11:52:38	721	crypto.rb
1535	33	f322f59d7c0f22b7c7a6afc3	superseded	ruby	meetup	class Meetup\n\n  WEEKDAYS = %w{monday tuesday wednesday thursday friday saturday sunday}\n\n  def initialize(month, year)\n    @month_days = Date.new(year, month, 1)..Date.new(year, month, -1)\n  end\n\n  def teenths\n    @month_days.select {|d| (13..19).cover?(d.day) }\n  end\n\n  WEEKDAYS.each do |weekday|\n    predicate = "#{weekday}?".to_sym\n\n    define_method(weekday.sub('day', 'teenth')) do\n      teenths.find(&predicate)\n    end\n\n    %w|first second third fourth|.each_with_index do |position, index|\n      define_method("#{position}_#{weekday}") do\n        @month_days.select(&predicate)[index]\n      end\n    end\n\n    define_method("last_#{weekday}") do\n      @month_days.select(&predicate).last\n    end\n  end\nend	\N	f	0	1	2014-06-10 12:58:07	2014-06-10 12:58:07	722	meetup.rb
1549	33	40f0b1c58157584c2bd8e38d	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    strand1 = Strand.new(string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    nucleotide.nil? || @char == nucleotide.char\n  end\nend	\N	f	3	3	2014-06-14 10:53:45	2014-06-14 10:53:45	725	hamming.rb
1566	40	a471c6614b0a1f6fa8e1267e	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    Histogram.for(words)\n  end\n\n  private\n  def words\n    @text.split(/\\W/).reject(&:empty?).map(&:downcase)\n  end\n\n  class Histogram\n    def self.for(tokens)\n      new(tokens).to_hash\n    end\n\n    def initialize(tokens)\n      tokens.each { |token| count(token) }\n    end\n\n    def to_hash\n      counts.dup\n    end\n\n    private\n    def count(token)\n      counts[token] += 1\n    end\n\n    def counts\n      @counts ||= Hash.new(0)\n    end\n  end\nend	\N	f	1	3	2014-05-11 15:26:24	2014-05-11 15:26:24	730	word-count.rb
1571	40	c76efc035fb5fad8d1d7fc51	done	ruby	bob	class Bob\n  \n  \n  def hey(something)\n    @something = something.to_s\n      if yelled_question?\n        "Woah, chill out!"\n        elsif question?\n          "Sure."\n          elsif yelling?\n            "Woah, chill out!"\n            elsif silent?\n              "Fine. Be that way!"\n              else\n                "Whatever."\n    end\n  end\n  \n    def yelled_question?\n      @something == @something.upcase && @something.end_with?('?')\n    end\n    \n    def question?\n        @something.end_with?('?')\n    end\n    \n    def yelling?\n      @something == @something.upcase && @something != ''\n    end\n    \n    def silent?\n      @something == '' \n    end\nend	\N	f	1	3	2014-05-07 14:11:54	2014-05-07 14:11:54	731	bob.rb
1578	40	a4b038d497ebcc9644e7c90b	superseded	ruby	nucleotide-count	module Nucleotide\n  ADENOSINE = 'A'\n  CYTIDINE  = 'C'\n  GUANOSINE = 'G'\n  THYMIDINE = 'T'\n  URACIL    = 'U'\n\n  def nucleotide?(molecule)\n    [ADENOSINE, CYTIDINE, GUANOSINE, THYMIDINE, URACIL].include? molecule\n  end\nend\n\nclass DNA\n  include Nucleotide\n\n  attr_reader :sequence\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless nucleotide? nucleotide\n    sequence.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||= {\n      ADENOSINE => count(ADENOSINE),\n      THYMIDINE => count(THYMIDINE),\n      CYTIDINE => count(CYTIDINE),\n      GUANOSINE => count(GUANOSINE)\n    }\n  end\n\nend	\N	f	0	2	2014-05-15 08:47:56	2014-05-15 08:47:56	736	nucleotide-count.rb
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 1584, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	7	1
3	2	1
4	1	2
5	1	3
6	1	4
7	7	4
8	2	5
9	7	6
10	7	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	2005-11-06 11:41:51	2005-11-06 11:41:51	t
2	1	14	2013-03-29 07:10:43	2013-03-29 07:10:43	t
3	1	17	2001-09-20 02:21:13	2001-09-20 02:21:13	t
4	1	22	1980-05-27 10:53:23	1980-05-27 10:53:23	t
5	1	10	2001-02-05 20:58:39	2001-02-05 20:58:39	t
6	1	8	1985-11-22 22:18:19	1985-11-22 22:18:19	t
7	1	6	1989-03-04 06:30:38	1989-03-04 06:30:38	t
8	1	29	1989-03-26 07:57:34	1989-03-26 07:57:34	t
9	1	30	2004-04-25 00:47:02	2004-04-25 00:47:02	t
10	1	35	1994-12-06 03:14:08	1994-12-06 03:14:08	t
11	1	15	2014-02-23 05:16:37	2014-02-23 05:16:37	f
12	1	16	1975-05-26 03:58:01	1975-05-26 03:58:01	f
13	1	28	1976-05-05 08:13:23	1976-05-05 08:13:23	f
14	1	31	2003-01-16 10:11:19	2003-01-16 10:11:19	f
15	1	37	1987-12-19 04:30:36	1987-12-19 04:30:36	f
16	1	41	1982-06-17 18:44:12	1982-06-17 18:44:12	f
17	1	42	2013-04-24 04:23:16	2013-04-24 04:23:16	f
18	1	46	1987-02-10 08:05:56	1987-02-10 08:05:56	f
19	2	7	2010-10-28 21:19:01	2010-10-28 21:19:01	t
20	2	35	1992-07-11 21:02:18	1992-07-11 21:02:18	t
21	2	30	2002-02-16 17:16:33	2002-02-16 17:16:33	t
22	2	46	1998-09-26 19:30:44	1998-09-26 19:30:44	t
23	2	18	1979-07-27 15:30:44	1979-07-27 15:30:44	f
24	2	37	2003-02-06 07:23:06	2003-02-06 07:23:06	f
25	3	37	1990-04-15 01:02:52	1990-04-15 01:02:52	f
26	3	7	1994-05-26 20:36:47	1994-05-26 20:36:47	f
27	4	7	1981-01-18 23:20:48	1981-01-18 23:20:48	t
28	4	31	2011-07-31 05:13:25	2011-07-31 05:13:25	t
29	4	21	2009-11-13 16:57:19	2009-11-13 16:57:19	t
30	4	26	2011-10-06 10:04:57	2011-10-06 10:04:57	t
31	4	19	1994-01-12 13:19:03	1994-01-12 13:19:03	t
32	4	24	1987-12-23 02:15:04	1987-12-23 02:15:04	t
33	4	18	1993-05-03 02:32:16	1993-05-03 02:32:16	t
34	4	23	2003-01-01 18:20:27	2003-01-01 18:20:27	t
35	4	25	1985-03-21 01:44:55	1985-03-21 01:44:55	t
36	4	20	1992-03-30 03:58:14	1992-03-30 03:58:14	t
37	4	37	1970-01-11 08:21:10	1970-01-11 08:21:10	f
38	4	11	1978-02-12 00:59:31	1978-02-12 00:59:31	f
39	4	13	1988-10-23 03:08:53	1988-10-23 03:08:53	f
40	5	31	1984-01-27 12:25:47	1984-01-27 12:25:47	t
41	5	39	1972-04-21 04:59:21	1972-04-21 04:59:21	t
42	5	34	1991-08-04 18:43:50	1991-08-04 18:43:50	t
43	5	36	2003-06-07 12:03:06	2003-06-07 12:03:06	t
44	5	32	1990-11-16 01:31:13	1990-11-16 01:31:13	t
45	5	35	1980-03-05 21:06:42	1980-03-05 21:06:42	t
46	5	33	1976-12-15 22:55:03	1976-12-15 22:55:03	t
47	5	38	1991-02-25 08:01:54	1991-02-25 08:01:54	t
48	5	40	1970-05-07 13:47:14	1970-05-07 13:47:14	f
49	5	37	2001-06-24 14:31:17	2001-06-24 14:31:17	f
50	5	7	1996-06-20 12:10:04	1996-06-20 12:10:04	f
51	6	5	1993-12-28 09:58:49	1993-12-28 09:58:49	t
52	6	6	2006-04-13 10:29:07	2006-04-13 10:29:07	t
53	6	8	1978-06-16 11:24:45	1978-06-16 11:24:45	t
54	6	9	1990-05-27 00:59:57	1990-05-27 00:59:57	t
55	6	10	1981-08-06 23:32:13	1981-08-06 23:32:13	t
56	6	11	1994-09-29 22:45:47	1994-09-29 22:45:47	t
57	6	12	1971-01-23 13:16:50	1971-01-23 13:16:50	t
58	6	13	1971-04-15 13:32:53	1971-04-15 13:32:53	t
59	6	14	1972-07-02 23:52:06	1972-07-02 23:52:06	t
60	6	15	2005-08-15 14:56:34	2005-08-15 14:56:34	t
61	6	16	1993-07-20 02:53:41	1993-07-20 02:53:41	t
62	6	17	1988-02-27 03:54:14	1988-02-27 03:54:14	t
63	6	22	2003-12-20 23:27:35	2003-12-20 23:27:35	t
64	6	27	1975-01-28 16:34:06	1975-01-28 16:34:06	t
65	6	28	1987-01-09 11:27:10	1987-01-09 11:27:10	t
66	6	29	2012-04-14 03:50:07	2012-04-14 03:50:07	t
67	6	30	1989-10-29 20:22:30	1989-10-29 20:22:30	t
68	6	31	2006-04-26 16:09:37	2006-04-26 16:09:37	t
69	6	37	2005-06-25 00:40:10	2005-06-25 00:40:10	t
70	6	41	2005-12-26 22:24:22	2005-12-26 22:24:22	t
71	6	42	1977-01-09 12:26:12	1977-01-09 12:26:12	t
72	6	43	1985-03-27 19:30:54	1985-03-27 19:30:54	t
73	6	44	1972-05-17 10:06:10	1972-05-17 10:06:10	t
74	6	45	2011-11-02 16:35:17	2011-11-02 16:35:17	t
75	6	46	1976-03-26 22:25:29	1976-03-26 22:25:29	t
76	6	47	2007-08-23 23:26:18	2007-08-23 23:26:18	t
77	6	48	1974-06-07 16:52:42	1974-06-07 16:52:42	t
78	7	7	1989-11-28 12:07:52	1989-11-28 12:07:52	t
79	7	38	1982-12-14 19:29:47	1982-12-14 19:29:47	t
80	7	31	1984-05-20 12:02:56	1984-05-20 12:02:56	t
81	7	37	1986-04-12 20:02:35	1986-04-12 20:02:35	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2013-11-09 19:45:50.425791	2013-11-09 19:45:50.425791	baconesia
2	chocolades	2014-06-21 17:00:11.463617	2014-06-21 17:00:11.463617	chocolades
3	ghost	2014-02-06 00:50:42.473134	2014-02-06 00:50:42.473134	ghost
4	motley	2014-05-22 15:04:30.477859	2014-05-22 15:04:30.477859	motley
5	rugrats	2013-12-22 21:05:44.497029	2013-12-22 21:05:44.497029	rugrats
6	slate	2014-01-25 05:19:29.512573	2014-01-25 05:19:29.512573	slate
7	polkadots	2014-01-14 14:54:50.543578	2014-01-14 14:54:50.543578	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	7	javascript	beer-song	3	done	2014-06-22 15:31:35	2014-06-14 08:32:23	2014-06-22 15:31:35	5d6bc78556bf4d1cbdef8aa7	t
2	7	ruby	space-age	1	pending	\N	2014-06-11 05:06:56	2014-06-11 05:06:56	ebb5b057d3e41ab7c3f2c264	t
3	7	ruby	grade-school	7	done	2014-06-30 15:50:38	2014-06-13 19:48:00	2014-06-30 15:50:38	f77b232c49d8d95c52215570	t
4	7	go	leap	1	done	2014-06-22 02:17:16	2014-06-06 17:11:38	2014-06-22 02:17:16	a02dc14dee790fc51cfebaf6	t
5	7	ruby	robot-simulator	3	pending	\N	2014-06-15 08:30:22	2014-06-15 08:30:22	726a8e2b620d67ff97ef0c55	f
6	7	haskell	phone-number	1	hibernating	\N	2014-06-15 20:15:14	2014-06-19 18:51:57	f7d14db7a0f143467d6f3437	t
7	7	ruby	bob	3	hibernating	\N	2014-06-14 00:38:09	2014-07-01 08:46:16	7a08ed44ae5b1976df60a69b	f
8	7	clojure	word-count	2	pending	\N	2014-06-10 01:02:34	2014-06-10 01:02:34	ccc2275fe2ce9f820498ba67	t
9	7	haskell	rna-transcription	2	done	2014-06-23 10:56:37	2014-06-12 17:29:53	2014-06-23 10:56:37	90ca1954b8b4847ecc56ddf0	t
10	7	ruby	word-count	2	done	2014-06-23 20:10:47	2014-06-06 18:47:39	2014-06-23 20:10:47	09dd2c6af19409c142bce334	t
11	7	python	largest-series-product	1	pending	\N	2014-06-14 08:59:23	2014-06-14 08:59:23	7a46f0506fdb0c335526cb1e	t
12	7	javascript	bob	1	hibernating	\N	2014-06-07 20:35:47	2014-06-27 00:32:42	a84d7be289b576a7517fbd69	t
13	7	elixir	scrabble-score	5	done	2014-07-01 22:34:30	2014-06-05 06:55:08	2014-07-01 22:34:30	93abc0116f180bc8123a5292	t
14	7	ruby	difference-of-squares	1	pending	\N	2014-06-15 10:16:54	2014-06-15 10:16:54	560d7fbb9c585810bc208e84	t
15	7	python	beer-song	1	pending	\N	2014-06-13 15:21:06	2014-06-13 15:21:06	053f25925a679fbd52a1c904	t
16	7	ruby	anagram	5	done	2014-06-27 10:42:02	2014-06-15 01:04:23	2014-06-27 10:42:02	9d487ba7e37549d5ea77d49b	t
17	7	ruby	hamming	5	done	2014-07-01 18:08:54	2014-06-09 03:44:35	2014-07-01 18:08:54	b51e2ef86f4efce90e8fb3f8	t
18	7	haskell	nucleotide-count	3	done	2014-07-01 10:38:18	2014-06-14 07:35:18	2014-07-01 10:38:18	24a1b1ebb5ad71e623464078	t
19	7	go	accumulate	1	done	2014-06-24 19:59:49	2014-06-06 19:42:03	2014-06-24 19:59:49	bd44e2e410f79c138c737491	t
20	7	ruby	proverb	5	done	2014-06-27 11:19:01	2014-06-14 10:31:28	2014-06-27 11:19:01	06a5906b2a6488e460bbf7b4	t
21	7	perl5	grains	1	pending	\N	2014-06-20 05:41:33	2014-06-20 05:41:33	7f33541cb32b92797b1deeed	t
22	7	ruby	leap	1	pending	\N	2014-06-07 19:03:38	2014-06-07 19:03:38	1827b843970a01d02b5f6788	t
23	7	elixir	word-count	4	done	2014-07-01 06:09:49	2014-06-16 02:47:11	2014-07-01 06:09:49	19013f2596bd44e6a9e81527	t
24	7	python	bob	2	done	2014-06-27 12:50:55	2014-06-16 13:44:21	2014-06-27 12:50:55	6862bc1edd687767af5c7003	t
25	7	ruby	etl	2	done	2014-07-02 19:08:21	2014-06-13 19:05:36	2014-07-02 19:08:21	0fa725110262fbf88a2d1720	t
26	7	clojure	anagram	2	hibernating	\N	2014-06-18 10:35:57	2014-07-02 04:39:00	8dec14613cfb8901a5cb3596	t
27	7	ruby	gigasecond	3	pending	\N	2014-06-18 04:25:01	2014-06-18 04:25:01	c711f42fbc8fcda83ccfc512	t
28	7	haskell	ocr-numbers	2	done	2014-07-01 08:01:26	2014-06-19 11:56:53	2014-07-01 08:01:26	96ee2534d13eee1693b1ff45	t
29	7	ruby	triangle	1	pending	\N	2014-06-09 00:01:57	2014-06-09 00:01:57	9efea0ab412660377fb164dc	t
30	7	haskell	bob	3	hibernating	\N	2014-06-16 13:21:01	2014-06-26 15:20:42	520ed19b38be93f9ee42601f	t
31	7	ruby	nth-prime	1	pending	\N	2014-06-07 02:24:35	2014-06-07 02:24:35	16d319992cca92fafef737ab	t
32	7	clojure	bob	1	pending	\N	2014-06-17 08:28:18	2014-06-17 08:28:18	d2ff816836424c8bc5fa4511	t
33	7	javascript	word-count	2	pending	\N	2014-06-15 19:20:54	2014-06-15 19:20:54	183da24ae9f762353791094d	t
34	7	ruby	grains	3	done	2014-06-29 18:26:27	2014-06-13 18:12:18	2014-06-29 18:26:27	a633b6e721e4e888464159f0	t
35	7	python	twelve-days	1	pending	\N	2014-06-20 10:38:07	2014-06-20 10:38:07	f2f9a40dc2a65d2dd3d194a3	t
36	7	javascript	roman-numerals	1	pending	\N	2014-06-11 19:36:40	2014-06-11 19:36:40	d38f1a8cabfaf8554a68364c	t
37	7	ruby	raindrops	1	pending	\N	2014-06-18 18:36:40	2014-06-18 18:36:40	49879a737284c8648ac8503d	t
38	7	haskell	word-count	1	pending	\N	2014-06-19 10:31:17	2014-06-19 10:31:17	b5228ebe42419a988d56d223	t
39	7	clojure	nucleotide-count	4	done	2014-06-26 05:35:08	2014-06-13 04:37:04	2014-06-26 05:35:08	b08ccbd695f70bed175253b5	t
40	7	javascript	anagram	7	done	2014-06-28 19:12:05	2014-06-09 17:11:24	2014-06-28 19:12:05	ed20063240523d58fc700651	t
41	7	perl5	binary	1	pending	\N	2014-06-06 04:21:27	2014-06-06 04:21:27	986e66fb0a230a817e38dcca	t
42	7	haskell	luhn	2	hibernating	\N	2014-06-06 21:35:12	2014-06-23 17:40:59	370c0ca37a2e8b87bea06647	t
43	7	python	rna-transcription	1	done	2014-07-02 09:29:39	2014-07-02 02:36:40	2014-07-02 09:29:39	072755617f6e97362db3acc3	t
44	7	javascript	meetup	1	pending	\N	2014-06-23 06:57:19	2014-06-23 06:57:19	5da4bc823fb2266b4a20d9e4	t
45	7	javascript	phone-number	1	pending	\N	2014-06-17 10:39:15	2014-06-17 10:39:15	63378af563f39eb284be1226	t
46	7	ruby	robot-name	3	done	2014-07-01 04:53:31	2014-06-17 12:30:56	2014-07-01 04:53:31	0d4094949e23b7360a5a4def	t
47	7	elixir	bob	4	done	2014-06-16 20:07:05	2014-06-07 09:35:08	2014-06-16 20:07:05	787680449b94eec4f14240da	t
48	7	javascript	robot-name	2	pending	\N	2014-06-12 01:01:51	2014-06-12 01:01:51	5b9de853dde110d2e5a957a1	f
49	7	go	etl	1	done	2014-06-28 18:11:00	2014-06-26 02:37:23	2014-06-28 18:11:00	536dbfcf660c42b6b3445a46	t
50	7	python	matrix	1	pending	\N	2014-06-11 00:22:15	2014-06-11 00:22:15	e9c0cbb549ad62edc335bf59	t
51	7	ruby	crypto-square	2	pending	\N	2014-06-06 02:22:26	2014-06-06 02:22:26	dff8b75a2c38feb9b66b9a79	t
52	3	javascript	word-count	3	hibernating	\N	2014-05-02 15:08:33	2014-06-11 05:12:45	3fcae0910c86bc8513683817	t
53	3	javascript	bob	2	done	2014-06-11 15:31:59	2014-04-22 19:09:18	2014-06-11 15:31:59	876ae3eacb38cbe29e815e50	t
54	3	javascript	nucleotide-count	2	pending	\N	2014-04-26 21:58:05	2014-04-26 21:58:05	ea6b51e5b8b4ac98f91329a6	t
55	3	javascript	pascals-triangle	1	pending	\N	2014-04-25 14:53:23	2014-04-25 14:53:23	da6d2a957a4da5817cf0bf7c	t
56	3	javascript	gigasecond	1	pending	\N	2014-04-27 20:29:11	2014-04-27 20:29:11	8ff0cd071f466a5cb63a620f	t
57	3	javascript	beer-song	1	done	2014-06-30 00:49:46	2014-05-22 22:54:34	2014-06-30 00:49:46	ab0fe7bc991fd4f761a16347	t
58	3	javascript	allergies	1	done	2014-05-14 03:55:27	2014-05-05 10:57:07	2014-05-14 03:55:27	37bb2ef0ee58d5af019007be	t
59	3	javascript	secret-handshake	1	done	2014-04-28 07:38:26	2014-04-27 19:00:55	2014-04-28 07:38:26	7be86d9aa599d7d3198645d4	t
60	3	javascript	anagram	8	done	2014-07-02 07:24:16	2014-04-30 15:28:31	2014-07-02 07:24:16	4ec682a516b2ebeabe78c5ea	t
61	4	haskell	bob	1	done	2014-06-13 17:21:27	2014-01-26 20:11:17	2014-06-13 17:21:27	900a638e48bdfa41bfcbffbb	t
62	4	haskell	allergies	1	done	2014-06-17 15:11:01	2014-05-10 07:03:10	2014-06-17 15:11:01	a422f780bc149a6f894ab63d	t
63	4	haskell	raindrops	3	done	2014-06-03 14:33:08	2014-01-30 10:41:37	2014-06-03 14:33:08	09ff4f90f6fcc4610d4bc446	t
64	4	haskell	grade-school	4	done	2014-06-30 02:59:03	2014-02-18 17:21:54	2014-06-30 02:59:03	6406d579e548499e7b616d7b	t
65	4	haskell	beer-song	1	done	2014-04-24 04:41:59	2014-01-30 05:08:12	2014-04-24 04:41:59	79530c5110a874b947c01e26	t
66	4	haskell	gigasecond	1	done	2014-06-09 08:24:17	2014-04-29 17:47:51	2014-06-09 08:24:17	89e78a161d7bcc0059d4eea0	t
67	4	haskell	hexadecimal	4	done	2014-06-23 08:33:00	2014-02-11 08:37:15	2014-06-23 08:33:00	43076d157ac2084af925f5cc	t
68	4	haskell	anagram	7	done	2014-05-29 11:29:16	2014-01-31 16:16:51	2014-05-29 11:29:16	a37613434d830c58bb375e91	t
69	4	haskell	leap	6	done	2014-06-19 14:03:18	2014-01-28 02:05:38	2014-06-19 14:03:18	f6858b7946f6c6f2cf46271b	t
70	4	haskell	sieve	1	hibernating	\N	2014-02-05 10:47:29	2014-06-29 11:19:06	db765631973a2cef748710a4	t
71	4	haskell	trinary	1	done	2014-04-23 06:32:14	2014-03-07 14:43:37	2014-04-23 06:32:14	3653656ca67b2d729d9c3b1e	t
72	4	haskell	phone-number	1	done	2014-06-06 23:58:55	2014-05-30 07:55:33	2014-06-06 23:58:55	47dae7bbe80eb7f883e1c8f7	t
73	21	clojure	rna-transcription	2	done	2014-07-01 11:26:30	2014-05-28 16:23:44	2014-07-01 11:26:30	40a768f71b4c96b0dce10e69	t
74	21	javascript	bob	1	pending	\N	2014-06-04 14:02:30	2014-06-04 14:02:30	6cf2be7d9cb60fe698484151	t
75	21	ruby	triangle	1	done	2014-06-25 16:55:58	2014-06-09 15:28:54	2014-06-25 16:55:58	2f2474a44a8ad036cc2d60de	t
76	21	haskell	rna-transcription	1	done	2014-06-06 01:45:09	2014-05-23 17:14:47	2014-06-06 01:45:09	3e2f3c72906b852ad22a1417	t
77	21	clojure	anagram	2	pending	\N	2014-05-24 21:20:58	2014-05-24 21:20:58	cb9e415d0f307f717d81c45d	t
78	21	ruby	atbash-cipher	1	pending	\N	2014-06-01 17:24:23	2014-06-01 17:24:23	d4f27fb25b15322ede783f30	f
79	21	python	rna-transcription	1	done	2014-06-11 01:21:17	2014-05-28 01:31:13	2014-06-11 01:21:17	baf4c7c00da1a6fd224384d8	t
80	21	javascript	phone-number	1	pending	\N	2014-06-12 06:30:44	2014-06-12 06:30:44	d798f9f5c0ecfd16b66f4c3f	t
81	21	ruby	rna-transcription	3	pending	\N	2014-05-25 01:39:59	2014-05-25 01:39:59	4a16524856262f42e7372998	t
82	21	haskell	robot-name	3	done	2014-06-10 19:43:11	2014-06-03 18:05:33	2014-06-10 19:43:11	2338f35d18654c7ba7aa7d99	t
83	21	ruby	bob	4	hibernating	\N	2014-06-08 05:50:36	2014-06-24 07:46:58	792e4dfc2c5c98cc78894d2e	f
84	21	ruby	etl	1	done	2014-06-26 17:09:14	2014-06-22 22:17:48	2014-06-26 17:09:14	153d5443d31a149db52841da	t
85	21	javascript	sieve	1	done	2014-05-31 10:40:08	2014-05-30 13:46:31	2014-05-31 10:40:08	c9a347fa0d5a7367f854e02b	t
86	21	haskell	space-age	1	done	2014-06-03 23:48:12	2014-05-30 08:00:51	2014-06-03 23:48:12	1cdffcc8235c4d2584d010d5	t
87	21	haskell	house	3	done	2014-07-02 11:44:51	2014-06-11 00:44:03	2014-07-02 11:44:51	16db45861bb7b26a3ffe1451	t
88	21	ruby	beer-song	2	pending	\N	2014-06-13 14:14:14	2014-06-13 14:14:14	3d621f08b56ba9a04c1fba87	t
89	21	perl5	prime-factors	1	done	2014-06-29 18:41:51	2014-06-23 02:51:06	2014-06-29 18:41:51	73879c59db3a45fe2df9d293	t
90	26	haskell	anagram	4	done	2014-04-29 12:55:21	2014-03-26 06:55:57	2014-04-29 12:55:21	e06ec51adf870313b5ed3bff	t
91	26	elixir	grade-school	2	done	2014-05-15 01:34:09	2014-05-02 09:07:20	2014-05-15 01:34:09	c909d8a315910950fae18f3c	t
92	26	haskell	grade-school	2	done	2014-06-19 15:38:34	2014-03-25 01:54:04	2014-06-19 15:38:34	3a654954f7904ef309ea817b	t
93	26	ruby	scrabble-score	1	done	2014-04-23 02:51:35	2014-03-23 09:30:54	2014-04-23 02:51:35	179998c0e5d0d14f4d918f39	t
94	26	javascript	atbash-cipher	1	done	2014-04-18 16:44:13	2014-04-08 06:28:31	2014-04-18 16:44:13	b7d3087ec246b8ad83367795	t
95	26	clojure	word-count	1	pending	\N	2014-03-12 06:17:31	2014-03-12 06:17:31	d885a1bf46bee397e7117293	t
96	26	haskell	atbash-cipher	3	done	2014-06-12 03:05:30	2014-04-06 18:52:34	2014-06-12 03:05:30	1a50ed566fa7fabd84ca4546	t
97	26	ruby	bob	3	done	2014-06-16 14:27:02	2014-02-28 16:12:44	2014-06-16 14:27:02	4d8f5486afc37e5c053e6b93	t
98	26	elixir	anagram	2	done	2014-06-30 05:04:26	2014-03-04 11:53:44	2014-06-30 05:04:26	bee049674ef2b5b8fefe35c1	t
99	26	haskell	nucleotide-count	1	done	2014-04-11 14:06:16	2014-02-23 04:31:36	2014-04-11 14:06:16	0edd772bb8a2860b655455d5	t
100	26	elixir	point-mutations	5	done	2014-05-30 08:02:45	2014-03-04 02:36:48	2014-05-30 08:02:45	9f636470789829d032b0f3e9	t
101	26	haskell	trinary	1	pending	\N	2014-02-28 20:02:29	2014-02-28 20:02:29	06adab6e5e6969319c359d55	f
102	26	go	hamming	1	done	2014-06-24 15:02:06	2014-04-06 15:56:04	2014-06-24 15:02:06	8a840c3691a3198ae9b0146c	t
103	26	haskell	rna-transcription	2	done	2014-03-15 18:46:52	2014-02-23 01:02:59	2014-03-15 18:46:52	975c3dbd384c59b33506e526	t
104	26	go	etl	5	done	2014-06-19 09:00:40	2014-04-16 08:03:38	2014-06-19 09:00:40	7265d1467ccc947629219c4c	t
105	26	ruby	gigasecond	1	done	2014-06-08 06:44:45	2014-02-21 10:01:42	2014-06-08 06:44:45	f7396ed6c4fa8735c466c9f1	t
106	26	python	phone-number	1	pending	\N	2014-04-27 16:03:41	2014-04-27 16:03:41	215f0037db5eb2751bd1ca1b	t
107	26	haskell	allergies	1	done	2014-04-12 08:38:24	2014-03-19 01:05:22	2014-04-12 08:38:24	708ffbe60ed3a3e1b63a49df	t
108	26	ruby	word-count	3	done	2014-05-13 21:13:56	2014-04-12 00:50:40	2014-05-13 21:13:56	baa9646e5d0b56888f317f93	t
109	19	go	anagram	2	done	2014-05-30 21:44:13	2013-10-19 21:23:09	2014-05-30 21:44:13	257b78ad4cf97b69cb0ea1da	t
110	19	go	etl	1	hibernating	\N	2014-03-13 08:42:19	2014-06-17 04:51:23	c016171b85c9ebf18226e767	t
111	19	ruby	bob	2	done	2014-04-14 03:14:20	2014-02-12 09:35:38	2014-04-14 03:14:20	5a5eb253c487f6c215d770f5	t
112	19	javascript	bob	3	done	2014-04-04 02:03:01	2014-01-10 01:53:47	2014-04-04 02:03:01	84a51fa4599254fc2acd8853	t
113	19	python	bob	1	hibernating	\N	2014-01-29 13:36:21	2014-02-19 08:54:38	5ad6a9d31ac9cf9e8fd84d04	t
114	19	ruby	grains	3	pending	\N	2014-02-13 12:48:37	2014-02-13 12:48:37	958dab4888bbe249b4af0519	t
115	19	haskell	rna-transcription	1	done	2014-05-23 20:24:55	2013-11-23 01:41:46	2014-05-23 20:24:55	4cff21d020d45c35a24e26a3	t
116	19	ruby	leap	1	done	2014-06-07 17:21:33	2014-04-06 02:09:12	2014-06-07 17:21:33	17249edfc57dc5dce002f000	t
117	19	elixir	anagram	1	done	2014-06-09 02:14:58	2014-05-30 09:21:27	2014-06-09 02:14:58	857a3691ff00b2a8876b3126	t
118	19	haskell	raindrops	1	done	2014-05-30 23:23:32	2014-05-10 00:33:42	2014-05-30 23:23:32	e3b95e63ccbf13e6fab43045	t
119	19	python	beer-song	1	pending	\N	2014-01-22 13:05:39	2014-01-22 13:05:39	52d7cee93b7116855c6cdd57	t
120	19	clojure	bob	3	needs_input	\N	2013-11-28 15:06:11	2013-11-28 15:06:11	d41c0e056dddc0fd5b555aaa	t
121	19	javascript	word-count	1	hibernating	\N	2014-06-12 17:21:37	2014-06-23 11:52:22	a783fdcab027853ea94e0849	f
122	19	javascript	triangle	1	done	2014-06-30 07:50:06	2014-04-10 05:52:53	2014-06-30 07:50:06	6a8d7112070c336ffd56708a	t
123	19	haskell	hexadecimal	1	done	2014-05-26 22:32:14	2014-02-16 21:14:10	2014-05-26 22:32:14	21455339f1ef6f77573ebd0e	t
124	19	clojure	leap	1	pending	\N	2013-12-09 18:08:58	2013-12-09 18:08:58	00e3f150792fcc5a9a7c0085	t
125	19	ruby	strain	1	done	2014-05-09 18:12:27	2014-01-05 02:30:26	2014-05-09 18:12:27	c83badd4306e5c03953ae2bb	t
126	19	javascript	beer-song	2	hibernating	\N	2014-03-25 04:27:24	2014-06-19 04:56:37	28cd6ec5e75c92d3d2db6545	t
127	19	ruby	word-count	2	done	2014-04-30 07:01:41	2013-12-04 16:02:36	2014-04-30 07:01:41	87a3095e2ef125cace52cc54	t
128	24	ruby	difference-of-squares	2	pending	\N	2014-06-03 17:39:38	2014-06-03 17:39:38	8c7563a6de89a8d85a3cc872	t
129	24	ruby	bob	6	done	2014-06-27 13:53:16	2014-05-30 07:08:28	2014-06-27 13:53:16	658bd3895144ba2fae194437	t
130	24	clojure	rna-transcription	2	pending	\N	2014-06-15 05:41:33	2014-06-15 05:41:33	fe038576b2da6eb6444e3e73	t
131	24	python	bob	1	hibernating	\N	2014-05-22 21:43:10	2014-06-14 04:57:39	5d5add6bf66bf3a24ee97559	t
132	24	clojure	bob	1	pending	\N	2014-06-19 02:53:14	2014-06-19 02:53:14	a15a562dc7791c44c812f147	t
133	24	ruby	word-count	4	done	2014-06-17 02:53:40	2014-05-20 18:56:25	2014-06-17 02:53:40	b9cc1abebaa3c1c926a726c5	t
134	24	ruby	anagram	1	done	2014-07-02 08:34:28	2014-06-23 03:19:11	2014-07-02 08:34:28	3dd78208e21edcfde03e01ab	t
135	24	clojure	grade-school	2	done	2014-06-26 12:52:56	2014-06-10 20:46:59	2014-06-26 12:52:56	8c68bfa96afb07df373376f8	t
136	24	ruby	house	1	pending	\N	2014-06-04 02:29:04	2014-06-04 02:29:04	1a139425da66ea9ac44b2ccd	f
137	24	javascript	trinary	1	done	2014-06-21 11:07:09	2014-05-24 10:49:42	2014-06-21 11:07:09	a3adc840b9ed5e99d82da5a2	t
138	24	python	point-mutations	1	done	2014-06-30 12:38:32	2014-06-23 13:31:40	2014-06-30 12:38:32	61eda674539655c6884057a6	t
139	24	ruby	beer-song	3	done	2014-07-02 09:38:47	2014-05-19 07:56:57	2014-07-02 09:38:47	24257dd7d083c4c8f62e08f5	t
140	24	clojure	anagram	3	done	2014-06-11 12:15:30	2014-05-19 01:19:40	2014-06-11 12:15:30	90b980dda805f292a15dfb82	t
141	24	haskell	point-mutations	1	done	2014-06-04 22:47:56	2014-06-03 23:44:09	2014-06-04 22:47:56	7d55c6e48dfc8f5f4031f346	t
142	18	python	rna-transcription	1	done	2014-07-02 13:33:57	2014-06-30 15:27:37	2014-07-02 13:33:57	d1a87815208ed561e2f4d414	t
143	18	ruby	robot-name	1	pending	\N	2014-06-23 14:52:20	2014-06-23 14:52:20	1f30fdc402cd59d25bbc3829	t
144	18	ruby	anagram	1	done	2014-06-29 09:01:23	2014-06-20 01:45:39	2014-06-29 09:01:23	321912f79e48887916a87935	t
145	18	ruby	bob	1	done	2014-06-30 22:44:21	2014-06-23 13:19:44	2014-06-30 22:44:21	339ba4ded826ccc039500175	t
146	18	javascript	anagram	2	pending	\N	2014-06-21 11:15:37	2014-06-21 11:15:37	6aa216e9b2dc4fda7a27f95c	t
147	18	clojure	word-count	1	done	2014-06-22 17:55:42	2014-06-22 17:43:49	2014-06-22 17:55:42	4b2a17450ab915a0ca27457f	t
148	18	ruby	word-count	5	done	2014-07-01 19:26:01	2014-06-21 12:09:34	2014-07-01 19:26:01	b65ba132dc47e272fcebb56e	t
149	18	ruby	crypto-square	1	done	2014-07-01 02:50:27	2014-06-30 10:12:06	2014-07-01 02:50:27	1ca0b57e54d3651b295ca9ae	t
150	18	elixir	allergies	1	done	2014-07-01 04:48:03	2014-06-24 06:39:31	2014-07-01 04:48:03	31b1d4e66cfcd3893bfd1c74	t
151	18	javascript	point-mutations	1	pending	\N	2014-06-29 02:58:59	2014-06-29 02:58:59	52bf68fcd9e4d7662c18b323	t
152	18	clojure	rna-transcription	2	done	2014-06-30 13:03:31	2014-06-20 17:36:19	2014-06-30 13:03:31	02bb5df0ed9aafc07dbefc19	t
153	18	ruby	leap	1	pending	\N	2014-06-27 21:31:01	2014-06-27 21:31:01	dca1b9183781fcad5ae402b3	t
154	18	ruby	prime-factors	1	done	2014-06-30 20:35:18	2014-06-28 11:59:27	2014-06-30 20:35:18	7e742e6d1b03340e130b9c60	t
155	18	haskell	space-age	2	done	2014-06-29 08:20:47	2014-06-21 21:42:16	2014-06-29 08:20:47	7b103b46c79ef9ec3141518f	t
156	18	go	anagram	2	hibernating	\N	2014-06-20 02:41:49	2014-06-28 06:37:44	1fa4aab1e76edb58938811e5	f
157	18	haskell	pig-latin	1	done	2014-06-24 03:03:07	2014-06-21 22:10:00	2014-06-24 03:03:07	8b7cc657bce9074778a9ad16	t
158	18	haskell	beer-song	3	pending	\N	2014-06-23 20:20:15	2014-06-23 20:20:15	917cc955b9ab224d6f595b01	t
159	18	ruby	hamming	2	hibernating	\N	2014-06-20 21:23:07	2014-06-29 22:49:47	6ed5f45b484e67875979e968	f
160	18	ruby	etl	1	pending	\N	2014-06-29 04:10:53	2014-06-29 04:10:53	94db652a267ed70a4d49eaaa	t
161	23	ruby	meetup	4	done	2014-06-30 11:35:36	2013-11-30 13:56:32	2014-06-30 11:35:36	429264e606964b43362ad393	t
162	23	ruby	nucleotide-count	1	done	2014-04-15 01:56:26	2013-12-06 01:58:25	2014-04-15 01:56:26	70e9381eca65f0ff8a4391e6	t
163	23	haskell	point-mutations	2	done	2014-03-02 12:45:14	2013-11-17 07:55:42	2014-03-02 12:45:14	07f3294c56a751ca51c23b1e	t
164	23	ruby	word-count	3	done	2014-06-28 08:44:39	2013-12-13 00:11:29	2014-06-28 08:44:39	648426a247e236e114f01fd4	t
165	23	javascript	anagram	1	pending	\N	2013-12-13 05:12:33	2013-12-13 05:12:33	1a6dce10188ed74aeda4802a	f
166	23	python	rna-transcription	1	hibernating	\N	2014-02-17 16:53:57	2014-05-29 20:56:16	9cba6adfa1393cbb2954d655	t
167	23	ruby	beer-song	6	hibernating	\N	2013-11-26 06:40:00	2014-06-12 03:50:41	e4b3eecb3e8c66a2e4f4ab3e	f
168	23	ruby	grade-school	1	done	2014-01-03 01:23:45	2013-12-24 05:00:35	2014-01-03 01:23:45	fde66a444f1921d27114fc2a	t
169	23	ruby	bob	10	done	2014-06-26 20:08:37	2013-10-31 15:00:57	2014-06-26 20:08:37	5e13bcda3238dab7e12caba1	t
170	23	javascript	beer-song	2	done	2014-05-05 23:15:34	2014-02-28 08:47:38	2014-05-05 23:15:34	2977f88c8a6835c1eb07c0c3	t
171	23	ruby	anagram	2	pending	\N	2013-11-17 19:40:36	2013-11-17 19:40:36	6368e294c8c932040b2a658a	t
172	23	clojure	bob	2	hibernating	\N	2014-01-31 15:52:33	2014-06-19 21:10:13	7e05dd6954f70e8f04c720e2	t
173	23	haskell	anagram	3	done	2014-05-29 09:14:40	2014-01-22 20:58:01	2014-05-29 09:14:40	da737085439d099fc4ed12b4	t
174	23	python	bob	6	done	2014-06-20 02:02:38	2013-12-04 11:51:49	2014-06-20 02:02:38	fe8e7839c6a218bb7d53cb80	t
175	23	clojure	gigasecond	1	done	2014-03-19 07:51:40	2013-10-28 05:03:41	2014-03-19 07:51:40	9acdd53de6f6043d9ece2ab1	t
176	23	ruby	gigasecond	1	done	2014-06-09 12:09:42	2014-03-30 05:37:34	2014-06-09 12:09:42	4c5585048fe0e05e6496126c	t
177	25	ruby	bob	4	done	2014-06-10 13:07:17	2014-04-14 20:56:30	2014-06-10 13:07:17	52d22a150dbd018c419a5807	t
178	25	haskell	bob	1	done	2014-05-18 03:36:23	2014-04-16 03:34:34	2014-05-18 03:36:23	c4ef6cf33006eb55332b39b8	t
179	25	haskell	phone-number	1	done	2014-05-11 17:00:39	2014-04-21 06:36:19	2014-05-11 17:00:39	83be6dd40147a8e0df011605	t
180	25	go	anagram	1	pending	\N	2014-04-27 22:08:45	2014-04-27 22:08:45	b9aab9c60c5844b1997752c5	f
181	25	clojure	rna-transcription	2	done	2014-05-13 01:56:34	2014-04-13 05:46:02	2014-05-13 01:56:34	3c02ceecd31df4e025de6dee	t
182	25	ruby	roman-numerals	1	done	2014-05-23 11:12:00	2014-04-14 21:46:50	2014-05-23 11:12:00	5d0a10a95a4997539ddf62ba	t
183	25	haskell	rna-transcription	3	done	2014-06-12 09:21:13	2014-05-07 00:57:36	2014-06-12 09:21:13	20bdf0304f52f495783ce1c2	t
184	25	ruby	raindrops	4	hibernating	\N	2014-04-08 10:37:22	2014-05-27 23:04:04	3a16622309e408bf94bd30b1	t
185	25	python	word-count	1	hibernating	\N	2014-05-05 03:05:02	2014-05-31 19:15:15	d64e5dc2ed1369bdaa1bc08e	f
186	25	python	nucleotide-count	1	done	2014-05-04 00:25:18	2014-04-13 01:23:06	2014-05-04 00:25:18	045b6c5644a9119ae15806b6	t
187	25	javascript	bob	1	hibernating	\N	2014-04-03 20:04:49	2014-04-08 18:53:17	b548d03f1963fdfb97054395	t
188	25	python	anagram	2	done	2014-06-27 21:56:26	2014-06-04 01:04:38	2014-06-27 21:56:26	e71c9df600b4eae127ac54fb	t
189	25	perl5	ocr-numbers	1	pending	\N	2014-04-18 07:58:58	2014-04-18 07:58:58	ef62ee13405e25335e9e081f	t
190	25	clojure	grade-school	1	hibernating	\N	2014-04-04 10:27:44	2014-05-12 00:21:41	ae2f2a7c77d017ce1ce222cb	t
191	25	ruby	grains	1	done	2014-05-24 10:08:38	2014-04-15 09:41:25	2014-05-24 10:08:38	b4224b1b982f922e3d365bd6	t
192	25	ruby	grade-school	7	done	2014-07-02 04:58:29	2014-04-11 07:11:31	2014-07-02 04:58:29	987ad7e35537ae621d00143c	t
193	25	python	bob	1	hibernating	\N	2014-06-21 07:01:49	2014-06-29 12:44:07	fda1ce204018b29afbbe5d2b	f
194	25	ruby	nucleotide-count	2	done	2014-06-11 11:57:59	2014-05-11 15:15:15	2014-06-11 11:57:59	1927ef22d20dc8199908dc89	t
195	20	ruby	raindrops	1	pending	\N	2014-03-11 17:54:19	2014-03-11 17:54:19	f1dc048397566383d8942f20	t
196	20	haskell	food-chain	1	hibernating	\N	2014-03-07 00:46:41	2014-06-01 02:08:15	c5d4e5735c1737c148fb0f74	t
197	20	ruby	bob	2	done	2014-05-31 06:48:00	2014-02-11 02:51:36	2014-05-31 06:48:00	3770d01527f481a85c94f783	t
198	20	python	bob	2	pending	\N	2014-03-25 21:50:57	2014-03-25 21:50:57	b31698392f462b502b8517dc	t
199	20	ruby	phone-number	1	done	2014-06-18 04:36:26	2014-05-25 21:12:51	2014-06-18 04:36:26	6317703a4a8e1318f24f0ebc	t
200	20	elixir	word-count	3	done	2014-05-11 17:59:03	2014-04-25 14:48:38	2014-05-11 17:59:03	ff53e59991e445f2e41bb997	t
201	20	ruby	triangle	2	pending	\N	2014-02-20 16:33:53	2014-02-20 16:33:53	9d1fbb0014eeb8c3f1c9b330	t
202	20	go	etl	1	hibernating	\N	2014-02-23 02:23:19	2014-03-30 11:10:08	e28e521f6e5cbfcb95d30535	t
203	20	ruby	anagram	7	done	2014-06-14 13:49:15	2014-02-10 22:53:08	2014-06-14 13:49:15	a9540fb3889bc39ce1021970	t
204	20	ruby	binary	2	pending	\N	2014-02-12 21:58:46	2014-02-12 21:58:46	84f225fb1a79406424c56b40	t
205	20	javascript	scrabble-score	1	done	2014-06-19 11:50:48	2014-04-15 17:30:33	2014-06-19 11:50:48	1bd5d75a6b8d1c851ed6c498	t
206	20	javascript	beer-song	5	done	2014-06-17 00:10:31	2014-02-25 23:06:57	2014-06-17 00:10:31	0d8740c9f60cd1a82ed018d3	t
207	20	python	grains	1	done	2014-03-14 05:18:54	2014-03-03 17:21:05	2014-03-14 05:18:54	1d6118194958fb9123a593bb	t
208	20	ruby	meetup	8	done	2014-06-22 05:50:56	2014-03-08 13:39:51	2014-06-22 05:50:56	2bc33cf70375934a6f5a25a2	t
209	20	ruby	rna-transcription	1	done	2014-04-03 08:55:15	2014-04-01 12:34:42	2014-04-03 08:55:15	b881999231c7948c85b6ee7e	t
210	20	haskell	raindrops	1	done	2014-06-15 15:34:25	2014-03-05 20:31:47	2014-06-15 15:34:25	d8faa8f65b399823ba6bda4b	t
211	20	ruby	robot-name	1	pending	\N	2014-02-15 16:24:19	2014-02-15 16:24:19	3da3b13019f6e125a5d9a139	t
212	20	clojure	bob	1	hibernating	\N	2014-03-01 16:29:49	2014-04-24 23:51:57	fad555db13217e12b0f83376	t
213	5	ruby	raindrops	3	pending	\N	2014-04-10 08:23:03	2014-04-10 08:23:03	3dba8ca072463ddb5ab856a9	t
214	5	ruby	anagram	3	done	2014-06-30 13:00:43	2014-05-20 19:23:01	2014-06-30 13:00:43	afb8a105ad6d6fa6d1dcafd3	t
215	5	python	grade-school	2	pending	\N	2014-03-04 19:34:48	2014-03-04 19:34:48	dc0956992d9d63dbf3ba53f6	t
216	5	javascript	word-count	1	done	2014-06-18 14:47:18	2014-04-21 08:39:40	2014-06-18 14:47:18	d904079a6092d10c6d8ab519	t
217	5	elixir	list-ops	2	done	2014-06-01 10:25:10	2014-03-15 03:43:30	2014-06-01 10:25:10	d961b76d2f49c1214d710c83	t
218	5	ruby	word-count	2	done	2014-06-29 00:40:34	2014-04-26 13:37:14	2014-06-29 00:40:34	aa02c1bbb1e339a31257dba1	t
219	5	clojure	beer-song	1	done	2014-06-01 16:05:12	2014-05-01 06:53:04	2014-06-01 16:05:12	3d7f0c6d1d2b75547420de89	t
220	5	haskell	bob	5	done	2014-06-24 18:35:00	2014-03-08 05:39:50	2014-06-24 18:35:00	83aae259357abf328857d99c	t
221	5	ruby	leap	8	pending	\N	2014-03-21 23:51:57	2014-03-21 23:51:57	7cc066c49c218e86aa8654bd	t
222	5	ruby	rna-transcription	2	pending	\N	2014-03-18 14:48:40	2014-03-18 14:48:40	6ca6c51408d5915c7216f42d	t
223	5	ruby	etl	1	done	2014-06-06 13:14:27	2014-04-16 05:11:10	2014-06-06 13:14:27	81e678d0e49a414abca2ef0d	t
224	5	ruby	bob	5	done	2014-06-29 02:07:04	2014-04-16 20:51:05	2014-06-29 02:07:04	bd27ad24f154de271c0c1055	t
225	5	clojure	nucleotide-count	1	done	2014-06-26 10:19:26	2014-03-25 16:38:18	2014-06-26 10:19:26	576edf38aa9a974a12a943b6	t
226	5	perl5	grains	1	done	2014-05-26 15:13:49	2014-03-21 11:31:45	2014-05-26 15:13:49	c0d7cf5cf6caf4d1920a1790	t
227	5	ruby	pig-latin	6	pending	\N	2014-03-10 01:46:56	2014-03-10 01:46:56	1abde14f825e0300ac1098f2	t
228	5	javascript	meetup	2	done	2014-06-29 12:46:41	2014-04-02 18:54:53	2014-06-29 12:46:41	e70cbcb4d47691d893e323f0	t
229	5	javascript	grains	1	pending	\N	2014-05-01 23:17:24	2014-05-01 23:17:24	a19fa9ba561d251a851c9b2d	f
230	5	scala	word-count	3	pending	\N	2014-03-02 01:01:39	2014-03-02 01:01:39	d5bd0197eeeb414b2baed619	t
231	5	clojure	grade-school	1	hibernating	\N	2014-03-15 08:00:15	2014-04-16 04:16:00	fb15dc1c028e8f4753778c55	t
232	6	ruby	nucleotide-count	3	done	2014-06-10 13:06:30	2014-04-11 01:55:20	2014-06-10 13:06:30	4c72a5b572dd5dd77ea8e2fd	t
233	6	go	rna-transcription	1	pending	\N	2014-04-05 08:01:10	2014-04-05 08:01:10	4440bf648d79f73ad444d2ab	t
234	6	haskell	grade-school	1	hibernating	\N	2014-01-26 07:45:55	2014-01-31 17:46:45	edb2c678bb6a7f225dcc8eee	t
235	6	ruby	bob	2	done	2014-06-14 05:35:48	2014-03-17 05:14:11	2014-06-14 05:35:48	d2cb05b8d9d2a8a97574521e	t
236	6	ruby	word-count	4	done	2014-06-02 10:39:48	2014-01-25 17:54:34	2014-06-02 10:39:48	c88a1d7f1eebd1ea0eabedbc	t
237	6	clojure	word-count	2	hibernating	\N	2014-04-19 13:50:47	2014-05-17 17:50:48	07fffb58508f23ffae45cf15	t
238	6	ruby	space-age	1	hibernating	\N	2014-02-03 02:59:49	2014-05-07 04:30:43	d651b923619b267cdcd7424f	f
239	6	haskell	phone-number	1	done	2014-02-22 13:28:29	2014-02-16 05:13:28	2014-02-22 13:28:29	a09f9183d747d585a0afb075	t
240	6	ruby	leap	1	done	2014-06-04 20:29:37	2014-02-09 02:37:34	2014-06-04 20:29:37	e71cc4265a9e7070989056c3	t
241	6	javascript	strain	1	pending	\N	2014-04-08 22:49:43	2014-04-08 22:49:43	1cb6cd87296a4eeb88466fcf	t
242	6	elixir	beer-song	1	done	2014-02-25 10:33:05	2014-02-20 04:07:38	2014-02-25 10:33:05	38159cd2944867588292b504	t
243	6	ruby	hamming	2	hibernating	\N	2014-02-18 03:13:53	2014-03-21 00:06:16	cfbc5eafebcb2174bff5993c	t
244	6	elixir	allergies	4	done	2014-06-16 04:16:28	2014-02-09 15:27:29	2014-06-16 04:16:28	fa218ac700398c99698e59f5	t
245	6	elixir	word-count	3	done	2014-06-30 21:24:45	2014-03-27 06:45:48	2014-06-30 21:24:45	63ffd6ec26d009d4c342baf2	t
246	6	ruby	grains	1	done	2014-03-25 16:21:18	2014-01-28 02:52:31	2014-03-25 16:21:18	4eae944b3a4a8da2f9905e8e	t
247	6	clojure	rna-transcription	1	hibernating	\N	2014-02-17 06:12:15	2014-05-18 17:37:07	4d18ad039bfebe927474416f	f
248	6	elixir	sublist	2	done	2014-05-20 14:53:17	2014-02-07 04:07:02	2014-05-20 14:53:17	1ecb69a1e2c6dd2dbe118ed6	t
249	6	ruby	prime-factors	4	done	2014-06-26 03:29:25	2014-04-11 15:31:43	2014-06-26 03:29:25	9d8e113944885a444ab9093e	t
250	8	python	bob	1	done	2014-05-13 16:16:29	2014-03-27 08:17:21	2014-05-13 16:16:29	f4a350e2694bc83988df7d83	t
251	8	ruby	triangle	1	pending	\N	2014-04-09 05:20:15	2014-04-09 05:20:15	a674ed705ba878fed1b36a4c	t
252	8	ruby	word-count	5	done	2014-06-27 09:44:29	2014-01-26 00:22:30	2014-06-27 09:44:29	badadd02ed16fd89cdec627c	t
253	8	ruby	bob	1	pending	\N	2014-02-27 04:55:34	2014-02-27 04:55:34	418f59cc5100c67da4245738	t
254	8	perl5	bob	3	done	2014-05-27 06:34:00	2014-03-26 01:40:45	2014-05-27 06:34:00	3b39eb0186f698f9153e5f5e	t
255	8	ruby	nth-prime	1	needs_input	\N	2014-06-06 16:41:06	2014-06-06 16:41:06	bdb34164f6d937d7811e6cc9	t
256	8	haskell	nth-prime	2	hibernating	\N	2014-03-23 10:06:42	2014-05-20 17:58:47	6ee98232db643067adeb5a79	t
257	8	scala	anagram	5	hibernating	\N	2014-04-13 13:02:42	2014-06-25 17:19:43	7f362039863c7d1ec8f8b88a	t
258	8	ruby	luhn	2	done	2014-06-09 03:34:21	2014-04-26 16:18:57	2014-06-09 03:34:21	ecdd1feebd1ddb7b0d1b8ffe	t
259	8	ruby	roman-numerals	4	pending	\N	2014-02-22 17:40:35	2014-02-22 17:40:35	d3a9f4dd4191c9a5c8eacd74	t
260	8	haskell	accumulate	1	done	2014-06-30 21:43:00	2014-02-21 12:10:58	2014-06-30 21:43:00	a836b23f4f8f52738ca4cf7b	t
261	8	clojure	beer-song	1	pending	\N	2014-05-11 12:53:45	2014-05-11 12:53:45	ca7700ea5d6eb49c780f1dc6	t
262	8	javascript	bob	3	done	2014-06-02 16:18:16	2014-02-21 06:40:17	2014-06-02 16:18:16	f4497d821bb2aa18d2a3f4cf	t
263	8	ruby	leap	1	hibernating	\N	2014-04-05 01:18:56	2014-05-19 19:05:06	66bd584827909d1c68661dfe	f
264	8	haskell	etl	2	done	2014-05-29 10:07:13	2014-02-17 08:22:35	2014-05-29 10:07:13	f727b405d710c5467ade0825	t
265	8	clojure	word-count	3	pending	\N	2014-02-03 02:07:00	2014-02-03 02:07:00	197cc002c92dd4bf38220494	t
266	8	haskell	rna-transcription	1	done	2014-03-31 23:43:47	2014-02-04 13:40:53	2014-03-31 23:43:47	4fae8243523ed6cc38e25e94	t
267	9	ruby	binary	1	done	2014-05-25 02:35:12	2014-03-23 20:08:50	2014-05-25 02:35:12	155f0c5c4a3f15dd3f82f2e7	t
268	9	ruby	word-count	3	done	2014-06-02 00:26:53	2014-03-13 18:32:00	2014-06-02 00:26:53	91592c6db893e031d9d76845	t
269	9	perl5	prime-factors	1	pending	\N	2014-03-16 10:12:35	2014-03-16 10:12:35	676c13a60c0d0b68429ee1e7	t
270	9	javascript	meetup	2	hibernating	\N	2014-03-19 14:29:13	2014-06-10 03:13:47	fed679e406b0b8bb243ab5a3	t
271	9	scala	nucleotide-count	1	pending	\N	2014-04-19 16:04:13	2014-04-19 16:04:13	716d6977a359e540254c1335	t
272	9	python	bob	1	pending	\N	2014-05-10 14:41:30	2014-05-10 14:41:30	6d027068032a740763a9a4f1	t
273	9	ruby	nucleotide-count	1	done	2014-06-16 12:27:54	2014-04-09 20:27:57	2014-06-16 12:27:54	14951e9d285968e95bef27d7	t
274	9	ruby	bob	5	done	2014-06-15 19:04:43	2014-03-31 14:21:25	2014-06-15 19:04:43	06c79bec4118320b6f1876d2	t
275	9	javascript	rna-transcription	1	done	2014-05-21 16:23:09	2014-03-16 09:32:16	2014-05-21 16:23:09	dc27312724b7c42c42d62d51	t
276	9	ruby	etl	7	done	2014-06-01 09:13:49	2014-03-12 20:48:47	2014-06-01 09:13:49	f5fe1f797771b577e750bb73	t
277	9	go	raindrops	1	pending	\N	2014-03-18 20:54:33	2014-03-18 20:54:33	8ff57a0d693d0bc423f3b27b	t
278	9	javascript	anagram	4	done	2014-05-28 05:31:27	2014-03-13 04:43:39	2014-05-28 05:31:27	a317b85a1640ebdf6c6f4c96	t
279	9	python	rna-transcription	1	done	2014-03-24 17:04:45	2014-03-24 00:32:12	2014-03-24 17:04:45	4fb286c2b726cbce2d33b767	t
280	9	ruby	hamming	1	pending	\N	2014-05-28 08:55:46	2014-05-28 08:55:46	6cef5f65ffe690b979c93755	t
281	9	javascript	beer-song	1	hibernating	\N	2014-05-21 19:26:11	2014-05-25 00:56:03	9288871548726606d1de2a7c	f
282	9	ruby	proverb	2	needs_input	\N	2014-04-03 12:50:05	2014-04-03 12:50:05	8a16eb51a2c43e60058a72b4	t
283	10	ruby	bob	2	done	2014-07-01 08:14:59	2014-06-27 05:49:30	2014-07-01 08:14:59	24c16b79adef7bb92ea45745	t
284	10	ruby	hamming	1	done	2014-06-20 06:24:19	2014-06-16 00:30:14	2014-06-20 06:24:19	b74edcbd9f2839a91420d758	t
285	10	ruby	anagram	2	done	2014-06-20 22:09:16	2014-06-16 02:30:24	2014-06-20 22:09:16	8d75318a9eda42ac68f61c46	t
286	10	javascript	anagram	2	done	2014-06-30 04:08:16	2014-06-26 04:35:09	2014-06-30 04:08:16	4d7b240c9d1ce6992dcfc5b3	t
287	10	python	anagram	1	pending	\N	2014-06-19 15:14:48	2014-06-19 15:14:48	3a08c5671da234e1aa90ae53	t
288	10	haskell	robot-name	1	done	2014-06-24 01:42:28	2014-06-20 10:57:00	2014-06-24 01:42:28	f8f9860af1f92c987473f0d5	t
289	10	haskell	word-count	3	done	2014-06-28 02:38:19	2014-06-16 04:57:52	2014-06-28 02:38:19	e8efa32f4022c52b50a62f25	t
290	10	haskell	kindergarten-garden	4	done	2014-06-29 23:13:32	2014-06-15 23:22:25	2014-06-29 23:13:32	4860e3465dac0e095c2f665f	t
291	10	ruby	robot-name	1	done	2014-06-29 21:31:29	2014-06-27 06:16:22	2014-06-29 21:31:29	0054787c0f2d6fc6bf084245	t
292	10	elixir	word-count	1	done	2014-06-29 17:09:36	2014-06-21 09:30:47	2014-06-29 17:09:36	7aed5f8e693001344a80383e	t
293	10	javascript	bob	4	done	2014-06-30 23:21:14	2014-06-18 05:51:51	2014-06-30 23:21:14	c43d5594b1e6c5f3a0d5847e	t
294	10	ruby	scrabble-score	1	pending	\N	2014-06-21 01:13:14	2014-06-21 01:13:14	35b118d7ffa076d45e97c675	t
295	10	ruby	crypto-square	1	done	2014-06-20 01:24:57	2014-06-18 23:39:20	2014-06-20 01:24:57	d9e111bf914b7e8de8eb0018	t
296	10	elixir	anagram	3	done	2014-07-01 02:38:52	2014-06-17 22:42:04	2014-07-01 02:38:52	2c0bac08c7f7cabfb8607fe6	t
297	10	ruby	word-count	1	done	2014-06-27 11:15:35	2014-06-17 16:08:07	2014-06-27 11:15:35	a581890b767489c9531db31d	t
298	10	go	clock	1	done	2014-06-29 21:06:02	2014-06-19 11:36:09	2014-06-29 21:06:02	c93602d0d3c48217c7c1ff8a	t
299	11	ruby	bob	1	done	2014-06-01 00:44:16	2014-04-03 15:05:52	2014-06-01 00:44:16	91bd19418c046381e844bcf0	t
300	11	haskell	robot-simulator	2	done	2014-05-31 15:33:37	2014-05-05 08:06:37	2014-05-31 15:33:37	899fe45cc8868b0f96f222bd	t
301	11	clojure	nucleotide-count	4	done	2014-06-21 02:59:00	2014-03-23 20:43:18	2014-06-21 02:59:00	f8db4cb432b36e3d9424318b	t
302	11	ruby	leap	6	done	2014-06-05 15:53:02	2014-03-21 18:26:27	2014-06-05 15:53:02	3c9f92a334c15fb51abde6b7	t
303	11	ruby	raindrops	3	hibernating	\N	2014-05-03 02:17:39	2014-06-09 14:57:35	eb012fbeb9e8c7f1cf6d91e5	f
304	11	haskell	beer-song	2	done	2014-06-18 03:04:15	2014-06-13 22:18:04	2014-06-18 03:04:15	4983346a41fceb4c5d4cb0f9	t
305	11	ruby	rna-transcription	4	done	2014-06-15 22:51:47	2014-03-29 01:18:27	2014-06-15 22:51:47	041664123f04c49fd86f4f9d	t
306	11	python	word-count	1	done	2014-05-01 20:16:46	2014-04-15 15:01:29	2014-05-01 20:16:46	fce850c7e28917fdab55599b	t
307	11	haskell	rna-transcription	4	done	2014-05-01 10:36:22	2014-04-12 07:28:40	2014-05-01 10:36:22	74283d508bbd04ec13f72c0f	t
308	11	ruby	grade-school	2	done	2014-06-29 19:57:40	2014-04-07 17:15:32	2014-06-29 19:57:40	ac8167da3fc77eb3b8d8f06e	t
309	11	python	bob	1	pending	\N	2014-05-27 13:30:37	2014-05-27 13:30:37	07cd5e67cda55299e942cfd0	t
310	11	elixir	grains	1	done	2014-06-14 01:45:06	2014-05-12 03:06:50	2014-06-14 01:45:06	d8106db337248968f3f630d5	t
311	11	clojure	rna-transcription	1	pending	\N	2014-04-21 20:55:20	2014-04-21 20:55:20	f5cd524f81ad74d665e81b10	t
312	11	perl5	phone-number	1	pending	\N	2014-05-15 05:31:57	2014-05-15 05:31:57	431d9ee90a83e7a332a17661	t
313	11	clojure	grade-school	1	done	2014-05-28 10:53:11	2014-05-15 13:22:18	2014-05-28 10:53:11	7de312b03ff7f3ca86f4ae6e	t
314	11	ruby	grains	1	done	2014-04-13 03:17:39	2014-03-29 23:36:07	2014-04-13 03:17:39	fd30cc2a444d4ceeb425b714	t
315	11	python	rna-transcription	1	done	2014-04-03 21:00:29	2014-03-28 16:21:46	2014-04-03 21:00:29	a6733c36de00f178b585461b	t
316	12	ruby	leap	1	hibernating	\N	2014-03-14 17:11:07	2014-04-14 04:24:09	8164463e0881f640269810a3	t
317	12	ruby	bob	5	done	2014-06-02 08:52:55	2014-03-20 01:41:19	2014-06-02 08:52:55	2c1d55d9f30611b31db12ebd	t
318	12	ruby	proverb	1	hibernating	\N	2014-03-30 02:00:30	2014-05-16 18:18:14	29ef0ea433c28bce8af05ed7	t
319	12	clojure	anagram	1	pending	\N	2014-02-11 12:35:54	2014-02-11 12:35:54	b7ba0178f5649f6af1d0a791	t
320	12	ruby	anagram	3	hibernating	\N	2014-02-18 06:39:30	2014-06-11 12:24:24	6fc1441c0f7802b50ccbd9a0	f
321	12	haskell	bob	7	done	2014-04-23 04:33:01	2014-02-16 21:19:43	2014-04-23 04:33:01	0baa6c88c1d3cb3877d11efe	t
322	12	go	leap	3	done	2014-07-01 01:57:39	2014-02-21 11:51:55	2014-07-01 01:57:39	3d9e75cc63cf1f502eacf881	t
323	12	ruby	grains	2	pending	\N	2014-03-13 06:39:45	2014-03-13 06:39:45	bdee0f0932a43f0913083e0a	t
324	12	go	roman-numerals	3	done	2014-05-04 10:57:28	2014-02-22 15:09:17	2014-05-04 10:57:28	df1523c65d45792d16a0f4e7	t
325	12	elixir	bob	5	done	2014-06-25 20:40:40	2014-02-04 17:54:33	2014-06-25 20:40:40	5093d58d26dda73bc057b828	t
326	12	python	bob	1	hibernating	\N	2014-05-23 14:34:23	2014-05-28 12:58:19	c3b76b08f9213d2125c3ecf7	t
327	12	ruby	word-count	7	done	2014-06-07 01:35:56	2014-02-12 09:11:20	2014-06-07 01:35:56	7f690b4ffdac74d0973b9144	t
328	12	go	grains	9	done	2014-06-23 11:01:10	2014-02-28 14:37:22	2014-06-23 11:01:10	90648e354e96830a5c395797	t
329	12	javascript	bob	3	pending	\N	2014-02-22 16:19:33	2014-02-22 16:19:33	b25409d5c03d9ce060c6b981	t
330	12	javascript	gigasecond	1	done	2014-07-02 05:13:01	2014-06-03 04:27:08	2014-07-02 05:13:01	bf060bfddbd0831f7a52df90	t
331	12	perl5	sieve	1	pending	\N	2014-04-11 12:37:57	2014-04-11 12:37:57	fc3cfbb660eb7c2c71c68f38	t
332	13	go	atbash-cipher	3	done	2014-06-14 00:42:54	2014-05-20 21:57:45	2014-06-14 00:42:54	1f54ee0a051566da5fdc595a	t
333	13	ruby	bob	1	done	2014-06-26 12:00:25	2014-05-22 11:36:55	2014-06-26 12:00:25	b9e5ae3373d30dc267251e3a	t
334	13	javascript	beer-song	6	done	2014-07-01 08:04:26	2014-05-17 19:51:46	2014-07-01 08:04:26	f9330f9caf44ea881414cf98	t
335	13	ruby	nucleotide-count	1	done	2014-06-30 10:25:20	2014-06-04 06:22:28	2014-06-30 10:25:20	0d867d003be2aea957d2a572	t
336	13	javascript	robot-name	2	done	2014-06-11 14:04:31	2014-05-29 04:43:07	2014-06-11 14:04:31	fc4cc9494b548533a9152b39	t
337	13	ruby	leap	5	hibernating	\N	2014-05-20 06:54:42	2014-06-30 19:46:31	864ef6179746a383f677480f	t
338	13	haskell	meetup	1	done	2014-06-26 22:46:23	2014-05-21 07:31:37	2014-06-26 22:46:23	bb5a3f46b7408d657765214a	t
339	13	go	leap	1	done	2014-05-23 03:10:13	2014-05-17 18:20:20	2014-05-23 03:10:13	dd6da318402ceaf76b7fc75b	t
340	13	javascript	binary-search-tree	1	pending	\N	2014-06-11 00:18:54	2014-06-11 00:18:54	89a378a8c3580b61ca5dd9f3	t
341	13	ruby	word-count	4	done	2014-06-25 10:09:46	2014-05-15 03:52:44	2014-06-25 10:09:46	c0847b404bf0120fb2516468	t
342	13	javascript	bob	1	done	2014-06-07 00:25:33	2014-05-15 09:00:44	2014-06-07 00:25:33	5fd54f67208877d0e92d3908	t
343	13	python	grains	1	pending	\N	2014-06-27 12:42:02	2014-06-27 12:42:02	4aea84baa3b8094f75fbcefa	t
344	13	ruby	anagram	3	hibernating	\N	2014-05-14 20:32:06	2014-06-19 00:57:17	46aecfb1174366f0d5cebc62	f
345	13	perl5	rna-transcription	1	done	2014-06-22 22:55:04	2014-06-17 01:54:14	2014-06-22 22:55:04	551fd0e8e77a36aefaa25998	t
346	13	haskell	pascals-triangle	1	done	2014-05-29 15:51:39	2014-05-18 20:36:34	2014-05-29 15:51:39	1da2c2fd6ebdc3583328c49a	t
347	13	haskell	phone-number	4	done	2014-07-01 15:24:49	2014-06-07 00:37:34	2014-07-01 15:24:49	614c61cebea8982b0a29c5fe	t
348	13	go	allergies	1	done	2014-06-12 17:39:03	2014-05-23 14:46:11	2014-06-12 17:39:03	9ef1c2eb13d7cb629b4336c3	t
349	13	coffeescript	bob	1	pending	\N	2014-06-20 20:53:50	2014-06-20 20:53:50	06b9393f680f8073f7dafe4f	t
350	14	haskell	nth-prime	3	done	2014-05-21 09:40:42	2014-03-13 12:15:23	2014-05-21 09:40:42	7149677b18bc7e4cc741a681	t
351	14	javascript	anagram	2	done	2014-06-12 03:17:21	2014-04-10 09:45:57	2014-06-12 03:17:21	dfe16285220e61279c5d052d	t
352	14	haskell	word-count	4	hibernating	\N	2014-03-28 23:08:34	2014-07-01 13:06:22	9afd4f4b61debcc4b6e9c8e3	t
353	14	javascript	triangle	2	pending	\N	2014-03-19 09:32:24	2014-03-19 09:32:24	0c24807bd2de31758e57e806	t
354	14	scala	hamming	2	done	2014-04-20 14:19:55	2014-03-16 02:58:55	2014-04-20 14:19:55	023703abe3542f94ec285d7f	t
355	14	ruby	word-count	2	done	2014-05-08 10:31:37	2014-03-21 11:55:01	2014-05-08 10:31:37	5c2a08c507d2d8f3a68862b2	t
356	14	ruby	bob	1	hibernating	\N	2014-04-22 23:28:18	2014-05-05 10:34:51	0007be35d302c671a6644ba4	f
357	14	elixir	beer-song	3	done	2014-06-03 08:19:19	2014-03-13 05:59:44	2014-06-03 08:19:19	dfd3617329c235b90247f6a9	t
358	14	ruby	raindrops	1	pending	\N	2014-03-24 17:01:07	2014-03-24 17:01:07	d75412136279b7502440c900	t
359	14	javascript	hamming	1	done	2014-05-07 03:05:49	2014-04-08 11:23:45	2014-05-07 03:05:49	d4a00e864e24bba136703e72	t
360	14	clojure	bob	3	pending	\N	2014-03-13 17:44:30	2014-03-13 17:44:30	cfd2b13e222d8bd3ee01efbf	t
361	14	haskell	phone-number	1	done	2014-06-08 19:53:48	2014-04-04 05:34:09	2014-06-08 19:53:48	af4d45b276e450a13d152ea9	t
362	14	clojure	queen-attack	3	done	2014-06-13 07:30:05	2014-05-06 16:32:21	2014-06-13 07:30:05	35abb553a7fa41386761a545	t
363	14	ruby	nucleotide-count	1	hibernating	\N	2014-04-15 09:37:26	2014-06-24 02:15:58	ea0963f9b44ed9e25ac2b301	t
364	14	ruby	largest-series-product	1	done	2014-05-30 06:48:12	2014-04-29 09:52:33	2014-05-30 06:48:12	cc7e5250f87b5072ee2e0949	t
365	14	ruby	anagram	5	hibernating	\N	2014-04-02 07:57:19	2014-06-24 19:15:46	5e22f690a2b5668381e6236e	t
366	15	javascript	allergies	1	pending	\N	2014-06-25 08:04:25	2014-06-25 08:04:25	f559ac26f6051e953a654e77	f
367	15	javascript	binary	3	done	2014-06-06 21:12:43	2014-06-04 08:22:09	2014-06-06 21:12:43	5efd0684bfcaba511de20324	t
368	15	ruby	anagram	4	done	2014-07-02 10:03:32	2014-06-08 18:04:32	2014-07-02 10:03:32	28afbee9b3859f1fc6cf0922	t
369	15	haskell	rna-transcription	3	done	2014-06-29 04:24:39	2014-06-18 13:24:32	2014-06-29 04:24:39	e9d1b676a4e8d1a58485c98e	t
370	15	ruby	raindrops	1	pending	\N	2014-06-06 15:42:16	2014-06-06 15:42:16	cec1c18c16fbaafcd8b67db6	t
371	15	haskell	word-count	2	done	2014-06-29 14:13:48	2014-06-17 03:35:30	2014-06-29 14:13:48	3499cb5aa529fde12529837a	t
372	15	ruby	hamming	2	hibernating	\N	2014-06-21 01:00:56	2014-06-28 11:43:53	ef0f78d750c21e10725c6cc3	t
373	15	python	bob	1	hibernating	\N	2014-06-13 09:00:33	2014-06-29 13:08:46	cb1d387a3126e941836d03a6	t
374	15	clojure	anagram	1	done	2014-06-22 17:54:48	2014-06-06 08:21:45	2014-06-22 17:54:48	d75426b04f2480bbd8394c42	t
375	15	ruby	rna-transcription	1	done	2014-06-27 11:08:16	2014-06-24 09:39:51	2014-06-27 11:08:16	0bfd1931431d124b6243d55d	t
376	15	clojure	etl	1	done	2014-06-15 08:58:01	2014-06-12 12:59:43	2014-06-15 08:58:01	a6b8ae329719ae2198f7a4b4	t
377	15	clojure	bob	5	done	2014-06-30 03:25:08	2014-06-05 11:49:50	2014-06-30 03:25:08	7a29b9fc78c4c03ebe877fd9	t
378	15	ruby	bob	1	hibernating	\N	2014-06-15 05:30:04	2014-06-23 22:40:01	a0ed82cef6be45c2a18ab63d	f
379	15	ruby	nucleotide-count	2	done	2014-06-13 17:02:28	2014-06-09 22:08:22	2014-06-13 17:02:28	30f027f40f6b8d7e041796f6	t
380	16	haskell	queen-attack	2	done	2014-02-12 17:42:40	2014-01-31 14:39:30	2014-02-12 17:42:40	83bb377805d4eb237e28d692	t
381	16	clojure	anagram	3	done	2014-06-22 22:10:04	2014-03-23 04:41:38	2014-06-22 22:10:04	6e1856f20a7e0a66d83b8111	t
382	16	ruby	bob	1	done	2014-03-26 20:50:14	2014-02-27 07:57:58	2014-03-26 20:50:14	2310750fba1c8aac3158a387	t
383	16	ruby	word-count	1	hibernating	\N	2014-02-07 03:02:24	2014-05-30 06:17:07	c4fb65ee6573025035598569	t
384	16	haskell	rna-transcription	1	done	2014-06-25 12:01:09	2014-01-22 15:33:11	2014-06-25 12:01:09	53214ee216590a7e745b052d	t
385	16	javascript	anagram	2	done	2014-04-16 09:10:57	2014-02-27 03:46:32	2014-04-16 09:10:57	fb456061d58c605de785dfcd	t
386	16	go	leap	1	done	2014-04-16 01:07:24	2014-01-31 02:49:23	2014-04-16 01:07:24	2ce571184b02ccf99a97cd91	t
387	16	elixir	bob	4	done	2014-03-01 13:24:11	2014-01-03 22:28:19	2014-03-01 13:24:11	081b0a26b329e25a94a2e6e9	t
388	16	ruby	grains	4	done	2014-05-17 01:24:33	2014-01-07 07:35:04	2014-05-17 01:24:33	00a4236c559f1cbdcedb8d7a	t
389	16	ruby	leap	1	needs_input	\N	2014-03-09 10:32:12	2014-03-09 10:32:12	f26c56483315ddfe3a2474a0	t
390	16	haskell	bob	4	done	2014-04-19 05:54:50	2014-01-31 20:37:36	2014-04-19 05:54:50	710150892e32b156899df964	t
391	16	elixir	list-ops	2	pending	\N	2014-01-15 17:06:18	2014-01-15 17:06:18	e3ccf834f7f7340de01e67ae	t
392	16	haskell	linked-list	2	done	2014-03-22 16:31:14	2014-02-03 14:47:48	2014-03-22 16:31:14	5273c351d2987b9379289177	t
393	16	perl5	bob	1	pending	\N	2014-02-09 22:27:48	2014-02-09 22:27:48	0c8ac791fe35ba32a6ad7d1d	t
394	16	scala	bob	1	pending	\N	2014-03-04 06:23:07	2014-03-04 06:23:07	ddf816d86dcc965c682e921c	t
395	17	ruby	word-count	5	done	2014-05-29 15:43:13	2013-12-20 09:58:11	2014-05-29 15:43:13	7701e434443dffbf45d7ec08	t
396	17	ruby	bob	5	done	2014-06-05 09:02:41	2013-12-27 13:24:31	2014-06-05 09:02:41	82e461b9134cba78f8051a70	t
397	17	go	etl	2	done	2014-06-24 12:48:42	2014-01-24 04:02:14	2014-06-24 12:48:42	48a229f76bcfe577ba960862	t
398	17	haskell	bob	11	done	2014-06-15 23:52:37	2013-12-19 23:13:23	2014-06-15 23:52:37	1c2ca3061d9d4480b75ff7dd	t
399	17	clojure	grade-school	1	pending	\N	2014-04-22 19:16:50	2014-04-22 19:16:50	1e63aa7f115a580c7283a36c	t
400	17	javascript	point-mutations	1	pending	\N	2014-01-29 03:38:53	2014-01-29 03:38:53	ffbe4b61db92b19cb3fcf6ef	t
401	17	ruby	nucleotide-count	2	hibernating	\N	2014-02-04 03:25:41	2014-04-26 05:28:55	f6edd9148e25ead9701ee5cf	f
402	17	clojure	rna-transcription	1	done	2014-05-10 12:42:43	2014-02-03 13:01:53	2014-05-10 12:42:43	a1b6eee2acff16678593ca39	t
403	17	python	bob	5	done	2014-06-02 00:34:25	2014-01-21 15:43:44	2014-06-02 00:34:25	e11aa7691e3bbb7f2d698238	t
404	17	javascript	meetup	1	pending	\N	2014-02-04 22:08:54	2014-02-04 22:08:54	fc512772b72a30849fb43534	t
405	17	go	clock	2	pending	\N	2014-01-14 09:47:56	2014-01-14 09:47:56	219af0bc5565ef38a80efa44	t
406	17	go	bottles	1	pending	\N	2014-02-09 14:08:48	2014-02-09 14:08:48	1aa527007d2d50d15bd11324	t
407	17	haskell	trinary	2	done	2014-06-08 17:46:29	2014-02-22 07:15:23	2014-06-08 17:46:29	283cc147f6e98ed1e1e0c72d	t
408	17	python	anagram	1	pending	\N	2014-03-27 19:12:27	2014-03-27 19:12:27	56097e662b19305a040903e7	t
409	17	elixir	grains	1	done	2014-06-24 23:56:25	2014-01-08 04:49:43	2014-06-24 23:56:25	8ad691275be07a595141611d	t
410	17	clojure	phone-number	1	pending	\N	2014-02-18 13:27:22	2014-02-18 13:27:22	e37bcebc6defd8138c1836f8	t
411	17	go	leap	2	done	2014-05-16 20:47:13	2014-01-12 17:18:14	2014-05-16 20:47:13	0ff8054a6cdf99be2795b6f1	t
412	17	haskell	largest-series-product	1	pending	\N	2013-12-27 23:53:20	2013-12-27 23:53:20	40c2c8601cd0f729637a27eb	t
413	22	ruby	word-count	6	done	2014-06-10 15:50:18	2014-04-07 19:25:18	2014-06-10 15:50:18	14a5572525a5e04dd95484b1	t
414	22	ruby	crypto-square	1	done	2014-05-21 03:01:42	2014-03-20 15:09:46	2014-05-21 03:01:42	5da03e30eac0d4e7592bafad	t
415	22	haskell	phone-number	1	done	2014-05-17 11:32:59	2014-04-02 11:53:40	2014-05-17 11:32:59	e697e91aa28a8b3527d500b7	t
416	22	ruby	space-age	1	done	2014-04-10 06:44:29	2014-03-10 07:03:15	2014-04-10 06:44:29	c0823e4a36c7e3aee78ed7a8	t
417	22	coffeescript	bob	1	done	2014-06-29 07:36:27	2014-05-30 00:11:59	2014-06-29 07:36:27	85f63bd0c93a866ecb34f94d	t
418	22	ruby	point-mutations	1	done	2014-06-25 03:27:07	2014-05-13 10:03:42	2014-06-25 03:27:07	8f18b61df6b07a270bf6a478	t
419	22	javascript	nucleotide-count	1	pending	\N	2014-04-25 10:02:43	2014-04-25 10:02:43	ddf220333aa581f089282f08	t
420	22	ruby	leap	1	hibernating	\N	2014-04-10 23:15:04	2014-06-04 22:42:05	b5dcb4426bc62b103eba8962	t
421	22	javascript	simple-cipher	2	done	2014-05-23 15:51:58	2014-03-06 19:38:00	2014-05-23 15:51:58	c1b3f02ef8ea9a7e172c9bb5	t
422	22	javascript	bob	1	done	2014-06-14 09:08:59	2014-06-10 01:25:33	2014-06-14 09:08:59	4eb1cff25b7255d48bc74c97	t
423	22	ruby	hamming	4	done	2014-04-16 02:36:31	2014-02-25 13:17:11	2014-04-16 02:36:31	8dff8297a5b8a06cc053aad2	t
424	22	clojure	grade-school	1	pending	\N	2014-05-01 15:46:30	2014-05-01 15:46:30	48dbdc4f156b1f0bb734aa27	t
425	22	clojure	bob	3	pending	\N	2014-03-15 06:39:55	2014-03-15 06:39:55	84851b1b30a3398ac2ea571c	t
426	22	javascript	word-count	1	done	2014-06-30 11:30:13	2014-05-04 12:53:21	2014-06-30 11:30:13	eff89e18140ddc8ffe2f1d1f	t
427	22	go	word-count	3	pending	\N	2014-03-22 16:34:51	2014-03-22 16:34:51	7220dd2ed3aac2d4f644936a	t
428	22	elixir	list-ops	3	done	2014-06-13 14:49:54	2014-02-28 22:18:22	2014-06-13 14:49:54	30507ced4b24c91b8c8be4ca	t
429	22	javascript	matrix	1	pending	\N	2014-03-16 19:05:27	2014-03-16 19:05:27	1f55c3293145755d14fec6b9	t
430	22	haskell	meetup	2	hibernating	\N	2014-04-28 14:15:06	2014-05-14 10:52:29	9758b8f73dd2510a3f1295dc	t
431	27	haskell	robot-name	1	done	2014-07-01 12:20:08	2014-01-11 04:32:21	2014-07-01 12:20:08	4a3573add35ac94e84d736e7	t
432	27	ruby	hamming	1	done	2014-05-28 06:04:24	2013-12-28 17:39:44	2014-05-28 06:04:24	730a6d254b0f398fbaf6f993	t
433	27	javascript	word-count	4	pending	\N	2014-01-12 13:24:45	2014-01-12 13:24:45	c5ddf51533ebe8027edaf962	t
434	27	clojure	bob	3	done	2014-05-20 22:50:30	2013-10-23 09:59:20	2014-05-20 22:50:30	ae2d54529d96d13ad882fe87	t
435	27	ruby	raindrops	3	pending	\N	2013-10-13 23:49:56	2013-10-13 23:49:56	887b569ff4d24b07e1649b83	t
436	27	ruby	leap	1	done	2014-02-25 07:43:26	2014-02-19 21:29:21	2014-02-25 07:43:26	fc6b64442d315c45c7525132	t
437	27	ruby	bob	3	done	2014-07-02 03:51:56	2014-03-08 02:17:34	2014-07-02 03:51:56	a60c46eb603702ed056fb17d	t
438	27	ruby	point-mutations	5	done	2014-06-19 10:54:13	2013-11-04 15:49:20	2014-06-19 10:54:13	e2d40e350aa2576f3967e247	t
439	27	python	pascals-triangle	1	pending	\N	2014-06-01 12:36:26	2014-06-01 12:36:26	b6216fd20e9052cf2aa09554	t
440	27	ruby	grade-school	1	hibernating	\N	2013-12-01 02:22:55	2014-02-22 07:19:10	f82a9ac466a21fdf09b24ceb	t
441	27	haskell	rna-transcription	1	done	2014-02-14 04:27:41	2013-11-29 10:48:07	2014-02-14 04:27:41	9c0157db26cf24f8faf12150	t
442	27	ruby	word-count	1	done	2014-06-18 03:45:59	2014-05-12 19:40:55	2014-06-18 03:45:59	b4c59bf007eab8c520d49d92	t
443	27	ruby	etl	3	hibernating	\N	2013-10-30 02:01:01	2014-03-13 05:34:10	9e943735d26b2b8df8f660b9	t
444	27	haskell	word-count	3	done	2014-04-15 12:05:21	2013-12-01 20:12:22	2014-04-15 12:05:21	fa404ce3d02a2a38e00c71c0	t
445	27	ruby	roman-numerals	1	hibernating	\N	2014-04-23 05:33:47	2014-05-13 03:24:30	9dc70f9096e0c2fbeb98e1f5	f
446	28	javascript	hamming	1	pending	\N	2014-01-14 22:34:58	2014-01-14 22:34:58	42f4f9187d8f075ca617ad13	t
447	28	ruby	gigasecond	1	pending	\N	2014-03-07 16:26:37	2014-03-07 16:26:37	8b262bf208d60061467ffb21	t
448	28	elixir	binary	1	done	2014-04-11 11:17:49	2014-02-15 07:05:46	2014-04-11 11:17:49	03309604b3ba982d15308f43	t
449	28	elixir	roman-numerals	2	done	2014-03-27 18:28:00	2014-01-22 06:29:35	2014-03-27 18:28:00	bc33224703ac5686ec06ff3a	t
450	28	javascript	bob	4	done	2014-05-10 11:30:52	2014-02-16 22:36:21	2014-05-10 11:30:52	ab7671c7c81c1ec41128c226	t
451	28	ruby	word-count	1	done	2014-06-13 12:24:18	2014-04-16 13:33:45	2014-06-13 12:24:18	a09a8438395437e2e9b84786	t
452	28	clojure	bob	1	hibernating	\N	2014-01-01 12:51:57	2014-01-20 22:21:30	9d11c79cca4f10b984f155c8	t
453	28	ruby	hamming	4	done	2014-07-02 08:22:24	2014-03-18 07:48:03	2014-07-02 08:22:24	72d280b33d84f225df2d91c8	t
454	28	javascript	word-count	1	done	2014-06-18 09:12:11	2014-01-17 09:18:37	2014-06-18 09:12:11	4cbea5dc0732c39440849488	t
455	28	javascript	nucleotide-count	3	done	2014-06-01 19:35:06	2013-11-17 19:44:30	2014-06-01 19:35:06	6491b081dfe646bd36e6ddd2	t
456	28	javascript	leap	2	done	2014-06-21 22:37:16	2014-01-30 12:01:59	2014-06-21 22:37:16	d0936aae2dc0dc2a99b81c47	t
457	28	ruby	rna-transcription	1	pending	\N	2013-12-02 07:29:47	2013-12-02 07:29:47	81c5708f3f10ad9256488522	t
458	28	haskell	nucleotide-count	1	hibernating	\N	2013-12-22 05:01:21	2014-07-02 01:57:36	3d46eea2b32f8c63c3f5266a	t
459	28	elixir	word-count	7	done	2014-04-30 03:07:23	2013-11-28 07:45:22	2014-04-30 03:07:23	6e39c32412f5bbe4cfba462a	t
460	29	csharp	hamming	1	pending	\N	2013-12-24 10:17:19	2013-12-24 10:17:19	91458aa77c311bca77ee5de9	t
461	29	clojure	word-count	1	done	2014-01-02 11:55:49	2013-12-25 11:19:28	2014-01-02 11:55:49	a2eb1b4098bc38007a9a5875	t
462	29	python	bob	1	done	2014-04-21 06:17:56	2014-04-05 01:21:32	2014-04-21 06:17:56	5103dcf42747af5ed13c4974	t
463	29	ruby	hamming	2	done	2014-04-08 12:47:18	2014-01-25 06:21:47	2014-04-08 12:47:18	1675086c5b43b6939541be12	t
464	29	clojure	bob	2	done	2014-06-09 06:53:22	2013-12-22 00:48:00	2014-06-09 06:53:22	c002ff56c2eb178f861d8fd6	t
465	29	haskell	binary	2	done	2014-06-21 18:39:09	2014-01-13 13:45:09	2014-06-21 18:39:09	f71326259f14175f196d89f5	t
466	29	haskell	rna-transcription	3	done	2014-05-02 03:01:29	2014-01-23 09:02:28	2014-05-02 03:01:29	1a9958fc42756ae523d081cc	t
467	29	javascript	bob	3	done	2014-05-15 04:10:26	2014-02-25 08:26:50	2014-05-15 04:10:26	c7d49ec79bd29c8ddae26ba2	t
468	29	haskell	gigasecond	1	done	2014-06-15 08:23:04	2014-05-30 08:56:10	2014-06-15 08:23:04	bc1a67b4c911dc86e80e83f4	t
469	29	ruby	bob	3	done	2014-06-09 05:59:36	2013-12-24 15:12:02	2014-06-09 05:59:36	6ac2eebc93a6bf0d78eba3c8	t
470	29	ruby	leap	2	done	2014-04-29 22:42:36	2014-01-08 15:31:13	2014-04-29 22:42:36	8125205c7b82a9d0554a2e5a	t
471	29	ruby	rna-transcription	1	hibernating	\N	2014-01-20 03:19:42	2014-03-25 06:04:00	38475764bded51b9a6918d8a	f
472	29	ruby	grains	1	pending	\N	2014-05-01 08:06:54	2014-05-01 08:06:54	afafb9f939b8239b10c8ad31	t
473	29	go	raindrops	2	done	2014-04-16 05:42:20	2014-03-23 23:43:17	2014-04-16 05:42:20	e9c6d8293eca16d0f4140def	t
474	30	elixir	word-count	2	done	2014-07-01 16:47:43	2014-05-20 18:15:26	2014-07-01 16:47:43	4e854133fa5de25c2c6fcfd0	t
475	30	ruby	word-count	8	done	2014-06-19 06:16:20	2014-04-06 03:56:47	2014-06-19 06:16:20	e693e7c4193840ae5c306b20	t
476	30	elixir	beer-song	1	hibernating	\N	2014-05-19 12:37:11	2014-06-14 14:51:35	39529bd59285cd791c81445c	f
477	30	clojure	rna-transcription	1	done	2014-05-24 06:38:39	2014-04-29 00:18:51	2014-05-24 06:38:39	eaed033bbceab207b9948427	t
478	30	haskell	rna-transcription	1	done	2014-07-02 03:57:15	2014-06-26 04:44:25	2014-07-02 03:57:15	38b88163e8b287e1a35cf576	t
479	30	ruby	bob	1	hibernating	\N	2014-05-13 04:15:28	2014-06-19 04:30:49	35b7a4662b6929c077870f4a	f
480	30	haskell	anagram	2	hibernating	\N	2014-05-03 02:43:06	2014-07-02 17:01:03	eb67beba549b36f7cc4c5b24	t
481	30	haskell	nucleotide-count	1	done	2014-06-15 03:15:41	2014-06-11 12:37:56	2014-06-15 03:15:41	756fdff6203102ebdc014799	t
482	30	haskell	trinary	1	done	2014-06-19 07:24:16	2014-05-17 23:48:35	2014-06-19 07:24:16	23ddb438e063ff4c4a380f08	t
483	30	elixir	bob	3	done	2014-06-20 05:18:22	2014-04-29 10:10:01	2014-06-20 05:18:22	ad4801298af78925bd877713	t
484	30	javascript	leap	5	done	2014-07-01 13:07:14	2014-04-13 06:10:17	2014-07-01 13:07:14	8d490f9ac619e79f4b41201c	t
485	30	javascript	trinary	1	pending	\N	2014-06-06 02:20:05	2014-06-06 02:20:05	016b7af0aff45b5ed8344e3d	t
486	30	go	roman-numerals	1	done	2014-06-03 15:24:08	2014-04-26 04:55:43	2014-06-03 15:24:08	6f398fd42ec5d12bfed29682	t
487	30	javascript	anagram	2	done	2014-06-05 05:24:53	2014-05-27 09:25:43	2014-06-05 05:24:53	3278457519e1e2f5c762b266	t
488	30	ruby	rna-transcription	1	hibernating	\N	2014-06-02 06:10:51	2014-06-25 02:17:35	732771d32e326f3a0df743ec	f
489	30	elixir	phone-number	1	pending	\N	2014-04-11 19:52:21	2014-04-11 19:52:21	e63735d95cbcce4e68b461a5	t
490	30	ruby	anagram	4	done	2014-06-13 00:15:49	2014-04-18 15:38:29	2014-06-13 00:15:49	c8e7c66acc6a282142f53930	t
491	30	haskell	difference-of-squares	3	done	2014-05-26 03:31:23	2014-04-10 07:35:30	2014-05-26 03:31:23	5badde89f4204360e9c77967	t
492	37	python	matrix	1	pending	\N	2014-03-12 14:23:05	2014-03-12 14:23:05	f4a2e17d004fd09dc80730ff	t
493	37	ruby	grade-school	1	pending	\N	2013-11-23 15:09:46	2013-11-23 15:09:46	84ff2f1ed714271928bee09f	t
494	37	ruby	nucleotide-count	2	done	2014-06-18 23:44:47	2014-01-07 19:24:42	2014-06-18 23:44:47	ed0ff1b3063964f865d0faa5	t
495	37	ruby	grains	1	needs_input	\N	2014-02-06 00:14:58	2014-02-06 00:14:58	96b429d3de9c49cc05f8bf4d	t
496	37	elixir	bob	1	done	2014-04-12 01:39:10	2014-02-22 04:23:28	2014-04-12 01:39:10	6eebdd123937aa9618fb1142	t
497	37	ruby	difference-of-squares	1	done	2014-03-05 13:20:15	2014-01-11 09:57:47	2014-03-05 13:20:15	6767b8b598e0bc36a695db3c	t
498	37	ruby	word-count	3	done	2014-06-26 10:50:14	2013-11-22 18:33:56	2014-06-26 10:50:14	249daf671c8b5a74ee0563ec	t
499	37	go	leap	2	done	2014-05-15 09:10:38	2013-11-14 15:22:08	2014-05-15 09:10:38	92addae7c3500e8812f2ad78	t
500	37	haskell	anagram	1	hibernating	\N	2014-02-13 03:56:02	2014-02-21 00:38:39	383215f3756cb6b5b878e284	t
501	37	javascript	secret-handshake	2	done	2014-05-05 20:18:14	2014-03-14 02:22:32	2014-05-05 20:18:14	1eb8be88622d41fed9ac5696	t
502	37	ruby	bob	1	done	2014-04-28 18:47:39	2013-12-02 03:33:38	2014-04-28 18:47:39	97e8e3d10226429c3e8d40b6	t
503	37	haskell	nth-prime	1	done	2014-05-15 02:22:14	2014-01-09 13:46:18	2014-05-15 02:22:14	4e712aa7fea7615e068b258c	t
504	37	python	anagram	1	pending	\N	2014-01-27 02:25:10	2014-01-27 02:25:10	470385e58cd47d9f7798275c	t
505	37	haskell	rna-transcription	1	done	2014-05-31 09:07:52	2013-11-29 09:41:55	2014-05-31 09:07:52	9338689af6380f12a859863d	t
506	37	javascript	triangle	1	pending	\N	2014-05-01 14:45:49	2014-05-01 14:45:49	1847e41a25f1a9e29ee41deb	t
507	37	javascript	grade-school	2	done	2014-05-05 07:48:53	2014-03-19 17:20:24	2014-05-05 07:48:53	cd6a6f9f652e468cbd411927	t
508	37	elixir	word-count	4	done	2014-06-04 20:45:17	2014-01-10 22:34:27	2014-06-04 20:45:17	dcdefacc2ccfd2c806b1740a	t
509	37	ruby	proverb	2	hibernating	\N	2013-12-20 00:06:36	2014-06-03 13:49:22	3274f908f6d0a637342b55b6	t
510	41	javascript	word-count	1	done	2014-06-27 11:12:22	2014-06-07 02:22:30	2014-06-27 11:12:22	faacd39c7908b945d3500cbd	t
511	41	ruby	scrabble-score	1	done	2014-06-27 11:58:41	2014-06-17 18:35:01	2014-06-27 11:58:41	a2623a9198a280c9e54106e7	t
512	41	ruby	grains	1	hibernating	\N	2014-05-06 10:44:19	2014-06-04 20:23:32	e13500420fe64026cb425f63	t
513	41	ruby	anagram	4	done	2014-06-05 01:12:03	2014-05-09 02:13:08	2014-06-05 01:12:03	969edb50d19c6ed9b3986990	t
514	41	ruby	hamming	1	hibernating	\N	2014-05-21 23:30:39	2014-06-01 05:11:47	619077de363ae0c6868fcc59	f
515	41	elixir	binary	1	pending	\N	2014-05-29 16:39:31	2014-05-29 16:39:31	af1b920e248b138f004cbb92	t
516	41	ruby	rna-transcription	1	done	2014-06-27 09:14:40	2014-06-08 02:40:50	2014-06-27 09:14:40	9045066e5640973cc03dbc7c	t
517	41	haskell	grains	1	done	2014-06-08 08:17:25	2014-05-07 21:07:32	2014-06-08 08:17:25	41e8d0e11305a6a3607f00d7	t
518	41	ruby	bob	2	hibernating	\N	2014-05-17 15:44:02	2014-06-18 12:12:07	2638da51d519f8404d31f335	f
519	41	python	rna-transcription	1	hibernating	\N	2014-05-07 15:06:21	2014-05-27 12:16:56	a96a8560bd68963d8e09b9b2	f
520	41	clojure	anagram	11	done	2014-06-30 11:17:14	2014-05-05 09:38:27	2014-06-30 11:17:14	b6c4d4e55215d32da1481aa5	t
521	41	clojure	word-count	2	done	2014-06-18 17:49:14	2014-04-30 11:49:02	2014-06-18 17:49:14	99921d8f691ba0e051cf45cf	t
522	41	elixir	word-count	1	done	2014-06-06 11:52:33	2014-05-18 15:09:20	2014-06-06 11:52:33	c64b026d623f3a9ed278558f	t
523	41	haskell	rna-transcription	2	done	2014-05-18 10:38:35	2014-05-01 03:55:07	2014-05-18 10:38:35	cdeed8bcf3bd9c554cb80e9b	t
524	42	javascript	beer-song	2	done	2014-03-29 10:10:00	2013-10-29 03:00:57	2014-03-29 10:10:00	b575e6ee78c1856cae7d4247	t
525	42	javascript	nucleotide-count	1	done	2014-05-10 18:38:12	2014-03-09 05:33:45	2014-05-10 18:38:12	65e65468e07b28afd076c6f2	t
526	42	haskell	triangle	1	done	2014-03-25 06:28:31	2014-03-03 18:38:27	2014-03-25 06:28:31	54d5038f39e1ae1baec4c305	t
527	42	ruby	etl	1	done	2014-01-28 03:17:55	2013-12-28 05:14:50	2014-01-28 03:17:55	4c6dd61bb83166ce120b2504	t
528	42	elixir	word-count	2	hibernating	\N	2013-11-08 04:09:43	2014-01-15 14:18:25	a5d9b96aba6b85aeafd2a410	t
529	42	ruby	raindrops	1	hibernating	\N	2014-01-27 18:41:07	2014-05-09 06:52:12	54857283520c273d384c6b41	t
530	42	javascript	simple-cipher	1	pending	\N	2014-02-26 14:36:36	2014-02-26 14:36:36	60ffc3239d2ae17b4ea909b5	t
531	42	haskell	point-mutations	2	done	2014-06-03 23:17:25	2014-03-11 06:07:49	2014-06-03 23:17:25	3204fd8ad885ed0d1e31cb06	t
532	42	go	binary	1	done	2014-05-14 11:25:40	2013-11-17 16:06:11	2014-05-14 11:25:40	6f5de7f7d59a86ca82efb36c	t
533	42	ruby	food-chain	4	pending	\N	2013-11-11 06:20:11	2013-11-11 06:20:11	672eaa28cb58a2c867cf5ce3	t
534	42	haskell	rna-transcription	2	done	2014-06-01 12:58:00	2013-12-19 06:39:32	2014-06-01 12:58:00	a00c3264ffcf56e10be45e89	t
535	42	elixir	beer-song	3	done	2014-05-16 14:44:06	2014-01-19 19:43:02	2014-05-16 14:44:06	d800847ade11bf301d128d71	t
536	42	python	matrix	1	pending	\N	2013-12-04 04:51:31	2013-12-04 04:51:31	b4e84ba74180bd7833f08b91	t
537	42	python	bob	2	pending	\N	2013-10-14 10:45:02	2013-10-14 10:45:02	6b8e5536820f3dd43174bdf4	t
538	42	ruby	crypto-square	2	done	2014-06-22 14:54:19	2013-11-02 07:29:53	2014-06-22 14:54:19	bf4f6fa14b755a2d8983d2ca	t
539	42	ruby	hamming	4	done	2014-03-22 19:42:43	2013-11-11 01:25:50	2014-03-22 19:42:43	846980ba1a0af231195c2fa7	t
540	42	javascript	triangle	2	pending	\N	2014-02-23 10:52:12	2014-02-23 10:52:12	5b476fd985f3687bc9c23b7d	t
541	42	haskell	binary	3	hibernating	\N	2013-12-09 07:13:14	2014-06-16 22:25:26	f575f23f879096fb2736785c	t
542	43	ruby	word-count	4	done	2014-05-18 16:38:41	2013-12-20 08:23:37	2014-05-18 16:38:41	24c8d353e005f50f5f0ec73d	t
543	43	scala	phone-number	2	pending	\N	2013-11-09 07:46:36	2013-11-09 07:46:36	0b7be1782cd8a7c0f0e1367f	t
544	43	ruby	leap	1	hibernating	\N	2013-12-11 02:36:18	2014-02-10 00:02:10	b7f2d71a557ba77768a0e426	f
545	43	haskell	matrix	1	hibernating	\N	2014-01-19 04:15:39	2014-04-18 23:58:50	db4bf673aba5eb4e71d2b2f7	t
546	43	javascript	nucleotide-count	3	pending	\N	2014-02-14 23:27:48	2014-02-14 23:27:48	afa7cac2637e50a4aeede22d	t
547	43	ruby	bob	2	done	2014-06-02 15:22:32	2014-01-14 09:43:04	2014-06-02 15:22:32	c4e65abca82bb108bed27c1f	t
548	43	clojure	space-age	2	done	2014-06-15 21:17:20	2013-11-25 16:14:10	2014-06-15 21:17:20	9f3789cbb8609cfa7ad588ba	t
549	43	javascript	word-count	2	hibernating	\N	2014-01-01 05:36:30	2014-06-17 05:36:19	64d11e5ab9426a58b136bdc0	t
550	43	ruby	anagram	4	done	2014-06-06 01:24:57	2013-11-04 16:21:24	2014-06-06 01:24:57	516244ede7f8edd35ebd4a7f	t
551	43	clojure	nucleotide-count	2	pending	\N	2013-11-23 19:18:28	2013-11-23 19:18:28	1e268be164a861647ebc7cf0	t
552	43	ruby	secret-handshake	1	needs_input	\N	2013-11-23 06:21:34	2013-11-23 06:21:34	ebfbbf2e351df04f4851c122	t
553	43	perl5	phone-number	1	pending	\N	2014-01-01 02:40:53	2014-01-01 02:40:53	bb17fa08f213e72b33c874a8	t
554	43	coffeescript	accumulate	1	pending	\N	2014-03-21 10:28:03	2014-03-21 10:28:03	c5c89cd4e175bbca14bcc5be	f
555	43	elixir	word-count	2	hibernating	\N	2013-11-18 11:42:33	2014-01-30 22:59:17	af5252144f625fd968fb54c8	f
556	43	ruby	trinary	1	done	2014-06-12 17:34:04	2014-01-04 03:52:30	2014-06-12 17:34:04	42c8d27c4312af421494f782	t
557	43	haskell	bob	2	done	2014-05-13 03:05:53	2013-12-25 19:16:54	2014-05-13 03:05:53	f8663f4e90ff6749972f8c34	t
558	43	ruby	etl	1	done	2014-01-29 10:06:09	2013-12-11 01:13:01	2014-01-29 10:06:09	6323f0fdd9ae10d3a40f4676	t
559	43	haskell	difference-of-squares	1	done	2014-06-14 09:19:34	2014-01-05 23:15:58	2014-06-14 09:19:34	16ad3b9ee66befa52ee1eb5d	t
560	44	ruby	leap	1	hibernating	\N	2014-03-26 17:04:43	2014-05-23 20:48:36	d6db105b1c0462d117ad783f	t
561	44	ruby	word-count	5	done	2014-06-26 10:24:34	2014-02-28 11:56:51	2014-06-26 10:24:34	ae49f23ddc284774ad456da5	t
562	44	haskell	meetup	3	done	2014-06-30 18:14:33	2014-02-25 02:54:05	2014-06-30 18:14:33	c7fb1a261b1bf03909acb627	t
563	44	python	bob	1	done	2014-03-25 15:58:53	2014-02-27 07:29:15	2014-03-25 15:58:53	09714351eb276fdfd32413a1	t
564	44	ruby	beer-song	19	done	2014-06-27 22:46:37	2014-03-10 12:58:04	2014-06-27 22:46:37	01ab8ce8a296d9f1a7c7757b	t
565	44	haskell	gigasecond	1	done	2014-04-26 20:46:08	2014-04-03 17:17:14	2014-04-26 20:46:08	719e15492819304e71717b15	t
566	44	python	rna-transcription	1	done	2014-05-18 23:48:16	2014-04-14 15:57:38	2014-05-18 23:48:16	c954a3a279b1a615ea88e49d	t
567	44	javascript	bob	1	pending	\N	2014-03-21 14:56:02	2014-03-21 14:56:02	36559d90bbb910949f26aee7	t
568	44	javascript	beer-song	1	pending	\N	2014-03-12 07:24:04	2014-03-12 07:24:04	428134ae9fa0345e4fc9e674	f
569	44	ruby	rna-transcription	1	done	2014-04-15 08:08:20	2014-04-09 19:18:02	2014-04-15 08:08:20	ceda924322935aa6b7dacc3a	t
570	44	ruby	grains	1	pending	\N	2014-02-20 13:46:05	2014-02-20 13:46:05	3a3bb6109ad2bd9ceac7af9c	t
571	44	objective-c	bob	1	done	2014-04-06 06:39:20	2014-03-08 14:59:04	2014-04-06 06:39:20	d68b865141a667e877394f02	t
572	44	go	octal	1	pending	\N	2014-03-26 06:06:13	2014-03-26 06:06:13	3ce0c07fda1c9222b00797a7	t
573	44	ruby	hamming	1	pending	\N	2014-03-27 07:15:37	2014-03-27 07:15:37	d677a209c15ab5e8651f4c1b	t
574	44	ruby	bob	4	done	2014-06-28 21:38:11	2014-02-27 03:44:41	2014-06-28 21:38:11	ae5913c1395777ec1ca6c91c	t
575	44	python	beer-song	1	done	2014-04-24 12:54:51	2014-03-31 22:05:00	2014-04-24 12:54:51	51bc983a66bf4a52cb15d92f	t
576	44	elixir	word-count	9	done	2014-05-26 05:27:29	2014-02-23 08:05:12	2014-05-26 05:27:29	248bc50ad90b33978f9dce1f	t
577	45	clojure	point-mutations	4	done	2014-06-23 06:54:50	2014-05-02 02:39:48	2014-06-23 06:54:50	06338375076b37a0794c770f	t
578	45	ruby	simple-linked-list	2	pending	\N	2014-04-01 12:13:12	2014-04-01 12:13:12	d78817111cbddd16ad3738bc	t
579	45	ruby	triangle	1	pending	\N	2014-06-10 19:31:08	2014-06-10 19:31:08	b1a7d8a0f7646448f9045803	t
580	45	ruby	hamming	2	done	2014-06-22 08:10:19	2014-04-10 07:46:47	2014-06-22 08:10:19	fa2469644a4e422ff3562cd8	t
581	45	ruby	bob	3	done	2014-05-11 14:39:06	2014-03-08 03:45:35	2014-05-11 14:39:06	f31c1c8a5fe5359475d83ff1	t
582	45	haskell	word-count	3	done	2014-05-18 21:15:15	2014-03-21 17:51:45	2014-05-18 21:15:15	86a10a61596ad3421541f614	t
583	45	ruby	anagram	1	pending	\N	2014-04-19 09:07:06	2014-04-19 09:07:06	6c0503f8bc3dda89d62e8d60	t
584	45	javascript	bob	1	hibernating	\N	2014-06-05 15:55:46	2014-06-29 07:57:14	7414cc0d4c2c654887ab7c98	f
585	45	haskell	bob	2	done	2014-04-16 17:00:57	2014-03-16 20:58:12	2014-04-16 17:00:57	3242eff987973ed7250303a2	t
586	45	haskell	anagram	1	pending	\N	2014-05-01 19:09:19	2014-05-01 19:09:19	f73b3afc18c33520d8f79bc2	t
587	45	javascript	rna-transcription	2	hibernating	\N	2014-03-30 09:13:08	2014-06-01 07:29:56	a22730e230b91580ecfe8682	t
588	45	javascript	atbash-cipher	1	done	2014-06-17 14:49:51	2014-05-02 02:31:02	2014-06-17 14:49:51	7d85b0b34947f5b4be482a37	t
589	45	haskell	rna-transcription	1	done	2014-06-22 18:12:52	2014-04-27 08:01:15	2014-06-22 18:12:52	d919d0bb9e5f8c10836c0582	t
590	45	go	binary	1	pending	\N	2014-03-04 23:58:57	2014-03-04 23:58:57	e10581e7f61365bdbd64285a	t
591	45	ruby	beer-song	1	pending	\N	2014-03-23 03:19:28	2014-03-23 03:19:28	c7b9b914a4b6e97244609451	f
592	45	elixir	rna-transcription	2	done	2014-06-01 11:39:18	2014-03-12 01:57:57	2014-06-01 11:39:18	158c2689733ea00f4109f992	t
593	45	ruby	point-mutations	4	done	2014-05-12 12:11:27	2014-03-04 19:24:35	2014-05-12 12:11:27	5d4674df054286d8a93f554a	t
594	46	ruby	bob	1	pending	\N	2014-06-26 23:30:30	2014-06-26 23:30:30	811582dc1f9920c701abfabe	t
595	46	javascript	bob	2	pending	\N	2014-06-20 22:39:16	2014-06-20 22:39:16	7b553fabcf2c8cd352488218	t
596	46	clojure	beer-song	3	done	2014-07-01 09:40:22	2014-06-18 01:35:37	2014-07-01 09:40:22	dd662942c1d8f5f46248801c	t
597	46	elixir	nucleotide-count	6	done	2014-06-29 22:06:04	2014-06-15 13:02:48	2014-06-29 22:06:04	5ea68f06ce1e3cb359fdddbc	t
598	46	ruby	word-count	9	done	2014-07-02 18:36:41	2014-06-16 07:29:33	2014-07-02 18:36:41	c7bc8d0b9087fd89a2f54bf8	t
599	46	haskell	grade-school	3	done	2014-06-29 15:25:36	2014-06-21 15:39:19	2014-06-29 15:25:36	aa64e5ff873d0fcc7a3e0c6c	t
600	46	javascript	anagram	3	done	2014-06-27 12:03:24	2014-06-19 19:41:53	2014-06-27 12:03:24	a7bb64c5e3dfa3c02f6a9d40	t
601	46	python	bob	1	hibernating	\N	2014-06-26 01:34:38	2014-06-28 16:43:33	b0c9f8779a2a2212f620c652	f
602	46	haskell	binary	3	done	2014-06-27 02:37:14	2014-06-16 05:14:58	2014-06-27 02:37:14	dfb2b867d142cac5a47548d9	t
603	46	ruby	hamming	1	pending	\N	2014-06-29 05:54:11	2014-06-29 05:54:11	d1e8730c2ee40f205dd42405	t
604	46	clojure	grade-school	1	hibernating	\N	2014-06-15 20:41:25	2014-06-20 09:07:37	317668706a48e44a6a786e36	f
605	46	go	rna-transcription	1	pending	\N	2014-06-21 17:21:21	2014-06-21 17:21:21	67b0404d9c90651aa93cebad	t
606	46	clojure	rna-transcription	1	done	2014-06-29 10:43:11	2014-06-15 23:37:01	2014-06-29 10:43:11	a891c3dd6a0be041f1713e6c	t
607	46	ruby	binary-search	1	done	2014-06-27 00:29:27	2014-06-19 06:08:58	2014-06-27 00:29:27	100c70cad88a4f7d3e9c3d53	t
608	46	go	leap	3	done	2014-06-30 07:13:43	2014-06-15 05:55:38	2014-06-30 07:13:43	b2b592848ef6a4ad554fdc01	t
609	47	go	raindrops	2	pending	\N	2014-05-12 03:12:48	2014-05-12 03:12:48	cccc98bc3a908b572ff38fe9	t
610	47	clojure	point-mutations	1	done	2014-05-30 12:58:50	2014-05-18 21:04:21	2014-05-30 12:58:50	0c632407f2e18e619368cac6	t
611	47	ruby	point-mutations	3	done	2014-06-30 02:13:02	2014-06-10 17:59:55	2014-06-30 02:13:02	b023abcdced65b186323a036	t
612	47	ruby	strain	1	pending	\N	2014-05-20 19:43:32	2014-05-20 19:43:32	2c32c117267cf7196560b16d	t
613	47	clojure	bob	2	hibernating	\N	2014-05-13 09:25:52	2014-06-21 04:05:57	c69e19d964c895c5d044560b	t
614	47	javascript	point-mutations	1	done	2014-06-23 06:02:54	2014-05-18 20:53:16	2014-06-23 06:02:54	b6d97c74e3bdc8ad7413bc81	t
615	47	ruby	grains	1	hibernating	\N	2014-05-31 23:29:10	2014-06-26 22:07:17	8497358b16cae21dcce152de	t
616	47	go	hamming	1	pending	\N	2014-06-03 13:24:00	2014-06-03 13:24:00	72f748fc452beee287ec03c9	t
617	47	ruby	sieve	3	done	2014-06-24 01:39:45	2014-05-18 00:33:30	2014-06-24 01:39:45	e7f28c3fa6c3c8946c88e97c	t
618	47	haskell	largest-series-product	3	done	2014-06-13 17:01:10	2014-05-11 14:21:15	2014-06-13 17:01:10	31a02de41789c8711e2ca0ac	t
619	47	haskell	point-mutations	2	done	2014-06-30 05:34:56	2014-05-22 12:35:16	2014-06-30 05:34:56	b2342543da1302c1f51e317e	t
620	47	ruby	raindrops	1	pending	\N	2014-05-26 16:28:47	2014-05-26 16:28:47	dad465ea7d421f7febd0b7ea	f
621	47	ruby	leap	5	hibernating	\N	2014-05-24 17:42:50	2014-06-21 23:30:25	7612ab125d4668b2da2bf525	t
622	47	python	rna-transcription	1	done	2014-05-30 08:47:39	2014-05-18 07:43:43	2014-05-30 08:47:39	6d47476ad26f520c56fc7887	t
623	47	ruby	meetup	1	done	2014-06-12 18:59:50	2014-06-05 14:52:15	2014-06-12 18:59:50	802cd6fc2d397853ff1e25e0	t
624	47	go	gigasecond	1	pending	\N	2014-06-12 06:24:32	2014-06-12 06:24:32	b32a0cba26f6999e42ab661b	t
625	47	ruby	hamming	2	done	2014-06-17 07:01:29	2014-05-25 19:10:08	2014-06-17 07:01:29	36c44e7378875e8513d13031	t
626	48	haskell	raindrops	4	done	2014-05-27 03:53:20	2014-03-14 18:12:16	2014-05-27 03:53:20	0f60a596e3cab651506fd039	t
627	48	haskell	meetup	3	done	2014-04-18 01:59:32	2014-02-11 14:52:58	2014-04-18 01:59:32	3b7034a7d8080e787f73ac5f	t
628	48	haskell	say	1	done	2014-04-28 22:04:37	2014-02-06 21:34:34	2014-04-28 22:04:37	ede60ca0288964aeecffae85	t
629	48	python	rna-transcription	1	hibernating	\N	2014-05-10 20:31:16	2014-05-27 23:46:48	2126cde0654aa770778de896	f
630	48	ruby	etl	1	done	2014-05-01 19:26:52	2014-04-18 19:03:25	2014-05-01 19:26:52	d4d4a7190e6b49df9a12ba6b	t
631	48	clojure	rna-transcription	2	done	2014-06-27 22:19:54	2014-04-29 11:09:52	2014-06-27 22:19:54	1969e0507224c9d29bf0c1a3	t
632	48	perl5	hamming	1	pending	\N	2014-04-16 04:50:21	2014-04-16 04:50:21	a98ba860213db15184359bc0	t
633	48	ruby	leap	1	done	2014-04-01 04:05:11	2014-03-21 07:55:33	2014-04-01 04:05:11	8a09d71b8997c95666c6bfb1	t
634	48	haskell	bank-account	1	hibernating	\N	2014-03-20 21:56:43	2014-06-13 01:50:30	b8f0a9552aafdc54c47323fb	f
635	48	ruby	anagram	5	done	2014-06-02 05:58:29	2014-02-11 16:18:34	2014-06-02 05:58:29	301c107f5e2ed29226e7ca70	t
636	48	ruby	trinary	1	done	2014-03-13 13:58:22	2014-02-25 22:14:46	2014-03-13 13:58:22	d622c1f498a8952fec0d813f	t
637	48	haskell	bob	3	done	2014-06-26 08:48:55	2014-02-13 05:11:17	2014-06-26 08:48:55	d606eda6b7b1360837aa627a	t
638	48	perl5	scrabble-score	1	pending	\N	2014-03-18 22:18:31	2014-03-18 22:18:31	4fefbc015e2403241fc51ace	t
639	48	haskell	space-age	1	done	2014-04-07 03:28:00	2014-04-03 11:11:38	2014-04-07 03:28:00	ac74b812857d5c6d5183d85b	t
640	48	go	binary	1	done	2014-06-18 01:16:01	2014-03-12 19:29:23	2014-06-18 01:16:01	bf1112e97a2c082b704ede50	t
641	48	elixir	bob	2	done	2014-06-20 01:19:19	2014-02-23 06:08:21	2014-06-20 01:19:19	dd959ee42fcbf0bc960c83a2	t
642	48	ruby	bob	3	done	2014-06-28 02:02:48	2014-02-12 00:47:32	2014-06-28 02:02:48	90aa300773b695004360866e	t
643	48	go	grade-school	1	done	2014-02-28 01:01:33	2014-02-20 06:00:56	2014-02-28 01:01:33	795376148411b0ebcb7dd809	t
644	48	javascript	beer-song	2	done	2014-03-23 22:52:34	2014-03-11 03:28:23	2014-03-23 22:52:34	8daf9ca22a6f61347882d9fb	t
645	31	ruby	anagram	8	done	2014-06-24 17:33:28	2014-02-09 20:32:43	2014-06-24 17:33:28	6c3cdff41d2ea00d1a9f30bc	t
646	31	ruby	beer-song	1	done	2014-05-28 12:00:28	2014-04-08 06:22:53	2014-05-28 12:00:28	0b3b23be2cee9782a1b07c0b	t
647	31	ruby	scrabble-score	3	hibernating	\N	2014-02-11 03:01:10	2014-06-19 22:33:09	7533c017428caa67db560407	t
648	31	ruby	grains	1	hibernating	\N	2014-04-04 07:44:10	2014-05-30 23:12:42	3a6163ece2dfe98c43757666	t
649	31	ruby	space-age	3	hibernating	\N	2014-03-02 02:37:30	2014-06-23 23:48:49	0698caad63f45296735e473f	f
650	31	ruby	hamming	1	pending	\N	2014-01-21 22:12:16	2014-01-21 22:12:16	ebf786a7caed6a074ddf493b	t
651	31	ruby	raindrops	1	pending	\N	2014-02-18 00:19:18	2014-02-18 00:19:18	e1e784afb4ff74603df0e8cb	t
652	31	ruby	trinary	1	pending	\N	2014-04-01 14:26:09	2014-04-01 14:26:09	dba894cfd1b3b2670640abae	t
653	31	ruby	meetup	2	pending	\N	2014-03-13 09:57:11	2014-03-13 09:57:11	44a0e4bb440f5f334c44199e	t
654	31	ruby	bob	2	done	2014-05-30 22:05:46	2014-04-25 22:58:53	2014-05-30 22:05:46	378f0228dbd8b092081c0151	t
655	31	ruby	word-count	4	hibernating	\N	2014-03-20 06:52:19	2014-06-28 12:23:46	6e4c45f0e6e7b3b916252353	f
656	31	ruby	nucleotide-count	1	done	2014-05-04 11:08:52	2014-03-10 00:01:46	2014-05-04 11:08:52	a3c13b1b3113229dd4289e4d	t
657	31	ruby	roman-numerals	1	done	2014-05-13 15:37:30	2014-03-12 07:01:59	2014-05-13 15:37:30	1a289c245b150250c9c8721f	t
658	31	ruby	etl	1	done	2014-07-01 15:08:37	2014-03-20 06:17:03	2014-07-01 15:08:37	61e81911bd5081ad7c0f17d9	t
659	31	ruby	sieve	1	done	2014-04-22 09:38:18	2014-02-09 10:05:00	2014-04-22 09:38:18	b8721a7e49e0aca1010ad663	t
660	39	ruby	word-count	7	done	2014-06-24 23:19:43	2014-05-28 16:49:33	2014-06-24 23:19:43	e3de76f44e7e77b071f96711	t
661	39	ruby	hamming	1	done	2014-06-03 05:30:24	2014-05-28 22:18:40	2014-06-03 05:30:24	3922ea91c70d72a0b120c614	t
662	39	ruby	trinary	4	done	2014-06-18 21:35:39	2014-05-28 09:49:22	2014-06-18 21:35:39	834321af3f0838478bcf2fcb	t
663	39	ruby	bob	2	hibernating	\N	2014-05-29 18:07:54	2014-07-01 14:00:08	2d0fbbc7f807408f37e771a1	t
664	39	ruby	anagram	1	pending	\N	2014-06-10 17:22:46	2014-06-10 17:22:46	2659eddef55e729d6f2fb252	t
665	39	ruby	leap	2	hibernating	\N	2014-06-03 04:44:21	2014-06-17 14:14:01	46d0e1b8f2bca91f46fcb60a	f
666	39	ruby	robot-name	1	hibernating	\N	2014-05-31 02:34:11	2014-06-08 11:16:28	14b14ee682fb53fd9af0c7de	t
667	39	ruby	space-age	1	done	2014-06-17 22:40:05	2014-06-02 12:59:05	2014-06-17 22:40:05	28ad059d9d354b8771d7b06b	t
668	39	ruby	sum-of-multiples	2	pending	\N	2014-05-30 12:55:56	2014-05-30 12:55:56	ec758ac2fea69f2bbe5b8b49	t
669	34	ruby	accumulate	1	pending	\N	2014-05-12 13:36:59	2014-05-12 13:36:59	4e7489bee017bca3c6fff4a4	t
670	34	ruby	etl	1	done	2014-05-01 18:08:31	2014-03-26 06:27:46	2014-05-01 18:08:31	3047073eddeffda14a10430d	t
671	34	ruby	beer-song	1	pending	\N	2014-04-20 05:54:16	2014-04-20 05:54:16	f109bd2d4175876980f0cd4f	t
672	34	ruby	gigasecond	2	done	2014-06-28 06:05:47	2014-03-28 17:27:49	2014-06-28 06:05:47	0efd673600c747df2c2a2a06	t
673	34	ruby	bob	6	done	2014-06-29 07:13:04	2014-04-13 14:44:56	2014-06-29 07:13:04	4041d178740407c36dbd464c	t
674	34	ruby	prime-factors	1	done	2014-06-11 17:56:26	2014-04-08 11:03:47	2014-06-11 17:56:26	22b316d987df8b1b887573bb	t
675	34	ruby	rna-transcription	1	done	2014-06-03 06:02:30	2014-05-05 06:32:30	2014-06-03 06:02:30	0efbaa35783741253b576c0b	t
676	34	ruby	word-count	1	done	2014-06-13 07:00:55	2014-05-24 10:10:27	2014-06-13 07:00:55	f0c645d885a067fedbbf2657	t
677	34	ruby	grains	2	pending	\N	2014-04-09 13:25:04	2014-04-09 13:25:04	f80ba424379004a281dd3b96	t
678	34	ruby	clock	1	pending	\N	2014-04-27 06:24:00	2014-04-27 06:24:00	b74202b5ea87283d0a912c6d	t
679	34	ruby	house	1	done	2014-06-18 06:52:29	2014-04-20 06:24:43	2014-06-18 06:52:29	28b911b4dbc5f9bc85f1493e	t
680	34	ruby	grade-school	1	done	2014-05-04 04:06:42	2014-04-01 23:01:16	2014-05-04 04:06:42	73ef6f3e006a23103a34b44e	t
681	36	ruby	word-count	4	done	2014-06-28 02:19:38	2014-02-25 14:51:36	2014-06-28 02:19:38	ee433114d9d68084839de59a	t
682	36	ruby	etl	8	done	2014-06-18 14:51:23	2014-02-19 00:21:53	2014-06-18 14:51:23	757e1f785ed83fc6ae7fcfb8	t
683	36	ruby	accumulate	1	pending	\N	2014-03-07 23:25:14	2014-03-07 23:25:14	1e195f71fc42c83fbc77578e	t
684	36	ruby	phone-number	1	hibernating	\N	2014-05-03 23:49:28	2014-05-28 05:21:29	977d6ca507a3bde129e4c2d7	t
685	36	ruby	anagram	3	done	2014-06-02 17:39:07	2014-02-28 18:31:07	2014-06-02 17:39:07	aa50760c1636e800161b1eaf	t
686	36	ruby	beer-song	2	done	2014-05-21 22:48:11	2014-03-05 14:11:01	2014-05-21 22:48:11	f976ba872334cf63ea680a83	t
687	36	ruby	luhn	3	needs_input	\N	2014-03-26 14:00:52	2014-03-26 14:00:52	0d7d044dae07d59963689cc2	t
688	36	ruby	hamming	1	hibernating	\N	2014-03-21 08:38:34	2014-04-10 16:26:28	1621e5beab863460346f6cd6	t
689	36	ruby	bob	2	hibernating	\N	2014-03-04 06:38:55	2014-06-23 13:22:53	608eeee0b21fc7610a26f8d7	f
690	36	ruby	house	2	pending	\N	2014-02-20 16:48:53	2014-02-20 16:48:53	29e646bd3555bb502002f48a	t
691	36	ruby	leap	1	hibernating	\N	2014-04-18 17:15:29	2014-06-26 22:57:46	98f79b8310190e57371c4558	t
692	36	ruby	proverb	1	done	2014-05-09 19:29:58	2014-04-02 08:47:13	2014-05-09 19:29:58	708e2b415800db285880da47	t
693	36	ruby	series	1	done	2014-05-16 19:21:20	2014-04-11 00:05:10	2014-05-16 19:21:20	016ead26500b72274e35d417	t
694	36	ruby	gigasecond	2	done	2014-06-18 16:45:11	2014-05-02 15:30:33	2014-06-18 16:45:11	d96e5ac19b11f94f5c029efe	t
695	32	ruby	difference-of-squares	2	pending	\N	2014-05-13 22:59:21	2014-05-13 22:59:21	ee74ba1615481f234839ce1e	t
696	32	ruby	grains	2	done	2014-06-25 10:02:08	2014-05-13 04:09:52	2014-06-25 10:02:08	52eb4c532f90976cd54b7475	t
697	32	ruby	scrabble-score	1	done	2014-06-10 21:28:20	2014-05-16 14:44:45	2014-06-10 21:28:20	44308d1824453fe99efcb8c1	t
698	32	ruby	word-count	5	done	2014-07-01 00:07:39	2014-05-13 19:19:20	2014-07-01 00:07:39	5688030fb7e1f3eac0089788	t
699	32	ruby	nucleotide-count	3	done	2014-06-17 09:13:50	2014-06-04 13:23:06	2014-06-17 09:13:50	b6ff8b69db269a383400c2b9	t
700	32	ruby	leap	1	done	2014-06-01 09:53:38	2014-05-19 08:06:11	2014-06-01 09:53:38	e494fed1a11c811e404c62a2	t
701	32	ruby	bob	1	hibernating	\N	2014-06-15 00:15:13	2014-06-19 21:04:56	b948b2c0dd236f274c01776c	f
702	32	ruby	roman-numerals	1	done	2014-06-15 14:53:21	2014-05-30 09:46:38	2014-06-15 14:53:21	26005c4602d8ce069ca2510b	t
703	32	ruby	grade-school	2	hibernating	\N	2014-06-16 07:23:57	2014-06-30 23:17:32	0588bcc22bf65b8e09445850	f
704	32	ruby	raindrops	3	pending	\N	2014-05-26 14:14:56	2014-05-26 14:14:56	8579d2968e9e97ae1e15b97d	t
705	32	ruby	hamming	2	pending	\N	2014-05-18 21:24:47	2014-05-18 21:24:47	5560fbcf50ff35dc9088ce1c	t
706	32	ruby	strain	1	pending	\N	2014-05-14 18:18:08	2014-05-14 18:18:08	54d2e7cb964d088d63f23dd9	t
707	35	ruby	leap	1	hibernating	\N	2014-05-04 21:46:55	2014-07-01 02:08:06	15b75288c5a3f14c717b59d9	t
708	35	ruby	house	2	done	2014-06-25 16:09:53	2014-04-30 08:42:58	2014-06-25 16:09:53	72e22dc462c613cc20c72219	t
709	35	ruby	word-count	8	done	2014-06-25 20:23:58	2014-04-30 19:46:22	2014-06-25 20:23:58	1b09d9560ba725a7ec280c7a	t
710	35	ruby	bob	4	done	2014-06-13 03:08:16	2014-05-16 18:58:43	2014-06-13 03:08:16	f3b9659a4ca03f42d0db0926	t
711	35	ruby	roman-numerals	1	pending	\N	2014-06-14 07:51:27	2014-06-14 07:51:27	b50c34bd8a0507c0c15e700e	t
712	35	ruby	beer-song	4	done	2014-06-20 01:12:42	2014-05-11 13:20:33	2014-06-20 01:12:42	514b529e6d989fb7c7a1e9de	t
713	35	ruby	hamming	6	done	2014-06-30 10:25:50	2014-04-25 19:55:25	2014-06-30 10:25:50	8dcad097683e0daa9e20c0d4	t
714	35	ruby	crypto-square	1	pending	\N	2014-05-30 09:19:19	2014-05-30 09:19:19	edf724b1b4e55f028d7ebbf5	t
715	35	ruby	gigasecond	1	pending	\N	2014-05-11 23:51:33	2014-05-11 23:51:33	ccbc7f1c452be974a7f74a4e	t
716	33	ruby	rna-transcription	1	done	2014-07-02 02:57:21	2014-06-27 15:38:21	2014-07-02 02:57:21	e13d522e8fd3fc1a18e99147	t
717	33	ruby	anagram	3	done	2014-07-02 11:41:35	2014-06-21 21:04:49	2014-07-02 11:41:35	3425dea5b0b24b8dd8419991	t
718	33	ruby	word-count	2	done	2014-06-28 12:12:36	2014-06-17 05:44:20	2014-06-28 12:12:36	d96cac9f1d281932067e1f0b	t
719	33	ruby	raindrops	2	pending	\N	2014-06-15 23:14:57	2014-06-15 23:14:57	3c9cdc85b5f60f5df4ea5f34	t
720	33	ruby	gigasecond	1	pending	\N	2014-06-29 13:52:36	2014-06-29 13:52:36	251651906a07dca39ff3bf4e	t
721	33	ruby	crypto-square	1	done	2014-06-18 09:13:26	2014-06-12 11:52:38	2014-06-18 09:13:26	0d6b20bebf337960d54014c5	t
722	33	ruby	meetup	2	done	2014-06-25 01:42:14	2014-06-10 12:58:07	2014-06-25 01:42:14	1f5b95d70e2c4d74d7eb0a4b	t
723	33	ruby	bob	9	done	2014-07-02 17:10:39	2014-06-11 16:41:59	2014-07-02 17:10:39	c25ad839251228cb5baa0b0c	t
724	33	ruby	robot-name	2	done	2014-06-30 06:11:34	2014-06-13 09:06:46	2014-06-30 06:11:34	54fd531c2aca1c85bdc7c6cb	t
725	33	ruby	hamming	9	done	2014-07-02 16:10:09	2014-06-12 14:05:22	2014-07-02 16:10:09	68c0a025913abd593449c44f	t
726	40	ruby	anagram	2	done	2014-06-14 12:58:33	2014-05-24 20:41:59	2014-06-14 12:58:33	a75f4d54bc74eb14e29c9192	t
727	40	ruby	simple-cipher	1	done	2014-06-29 15:50:40	2014-06-24 02:48:22	2014-06-29 15:50:40	c24d3abbe937a5cd5e2a88ed	t
728	40	ruby	grade-school	1	pending	\N	2014-05-11 22:33:03	2014-05-11 22:33:03	57a2be6da337f5a697c0f52d	t
729	40	ruby	raindrops	5	hibernating	\N	2014-05-04 13:31:28	2014-06-24 08:44:04	a368c0e3e5b1c37071e73f05	t
730	40	ruby	word-count	4	done	2014-06-16 14:22:29	2014-05-11 15:26:24	2014-06-16 14:22:29	439425f040686796459f0618	t
731	40	ruby	bob	3	done	2014-06-17 19:33:13	2014-05-06 02:54:27	2014-06-17 19:33:13	f357e9cfc226e2b250163698	t
732	40	ruby	etl	1	pending	\N	2014-05-22 20:22:16	2014-05-22 20:22:16	d54ac22e433e8a4106422d38	t
733	40	ruby	luhn	2	pending	\N	2014-05-31 17:42:00	2014-05-31 17:42:00	42728531794580df89e9d704	t
734	40	ruby	proverb	1	hibernating	\N	2014-05-23 01:23:08	2014-07-02 10:58:56	470eea1683d0d5a1c561a1d4	f
735	40	ruby	wordy	1	done	2014-06-20 14:16:35	2014-05-22 08:40:29	2014-06-20 14:16:35	2f2bc2ce0495583ff80c2c6d	t
736	40	ruby	nucleotide-count	3	hibernating	\N	2014-05-15 08:47:56	2014-06-18 07:13:59	d5f6101e94582e40bb89fd77	f
737	40	ruby	leap	1	done	2014-05-30 06:52:07	2014-05-21 15:35:38	2014-05-30 06:52:07	09c4dbc8a541674f6fab0f06	t
738	40	ruby	gigasecond	3	pending	\N	2014-05-17 18:33:08	2014-05-17 18:33:08	7e98bb8e38d2adaf00aac5f6	t
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 738, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at) FROM stdin;
1	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg	-14007	qpa916	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-04-07 04:18:47.483805	2014-04-07 04:18:47.483805
2	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg	-74608	kfo366	---\n- ruby\n	2014-05-21 13:49:35.494428	2014-05-21 13:49:35.494428
3	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg	-89354	vdb727	---\n- javascript\n	2014-04-20 17:30:44.495557	2014-04-20 17:30:44.495557
4	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/g1sh/128.jpg	-330	ivi431	---\n- python\n	2014-01-23 05:24:16.496487	2014-01-23 05:24:16.496487
5	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg	-66461	trz305	--- []\n	2014-02-28 17:41:59.506157	2014-02-28 17:41:59.506157
6	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg	-16733	pnp366	--- []\n	2014-01-23 07:47:07.516344	2014-01-23 07:47:07.516344
7	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg	-16188	soh973	--- []\n	2014-06-05 02:23:48.517858	2014-06-05 02:23:48.517858
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg	-16221	rtt699	--- []\n	2014-01-20 14:14:13.518837	2014-01-20 14:14:13.518837
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg	-97465	gux441	--- []\n	2014-03-12 03:44:07.519894	2014-03-12 03:44:07.519894
10	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg	-9940	jwg934	--- []\n	2014-06-15 20:32:29.520665	2014-06-15 20:32:29.520665
11	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg	-52017	zug396	--- []\n	2014-03-19 22:36:56.521438	2014-03-19 22:36:56.521438
12	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg	-38010	uzf644	--- []\n	2014-02-02 11:44:30.522188	2014-02-02 11:44:30.522188
13	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg	-82916	wik914	--- []\n	2014-05-13 04:55:56.522946	2014-05-13 04:55:56.522946
14	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg	-56580	nkb882	--- []\n	2014-03-10 13:16:15.523932	2014-03-10 13:16:15.523932
15	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg	-20064	avy501	--- []\n	2014-06-03 06:56:31.525208	2014-06-03 06:56:31.525208
16	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/teclaro/128.jpg	-46919	tho669	--- []\n	2014-01-03 10:23:15.526055	2014-01-03 10:23:15.526055
17	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg	-27881	vzw791	--- []\n	2013-12-18 16:17:17.526897	2013-12-18 16:17:17.526897
18	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg	-55644	esj701	--- []\n	2014-06-19 16:25:44.52768	2014-06-19 16:25:44.52768
19	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg	-61198	hba982	--- []\n	2013-10-17 12:34:28.528514	2013-10-17 12:34:28.528514
20	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg	-81834	eqw903	--- []\n	2014-02-08 23:51:39.529296	2014-02-08 23:51:39.529296
21	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg	-93275	qbm185	--- []\n	2014-05-23 02:19:07.530036	2014-05-23 02:19:07.530036
22	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg	-47164	viv749	--- []\n	2014-02-17 12:12:57.530771	2014-02-17 12:12:57.530771
23	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg	-54267	mjv536	--- []\n	2013-10-25 02:57:36.531522	2013-10-25 02:57:36.531522
24	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg	-99726	dey753	--- []\n	2014-05-18 18:20:08.532267	2014-05-18 18:20:08.532267
25	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg	-66061	wis433	--- []\n	2014-04-01 22:23:28.533074	2014-04-01 22:23:28.533074
26	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg	-73180	vld877	--- []\n	2014-02-18 17:31:35.534181	2014-02-18 17:31:35.534181
27	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg	-61747	oik640	--- []\n	2013-10-07 17:16:37.534981	2013-10-07 17:16:37.534981
28	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg	-49358	lgm686	--- []\n	2013-11-16 08:47:10.535798	2013-11-16 08:47:10.535798
29	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg	-62559	jxd922	--- []\n	2013-12-03 09:42:04.536629	2013-12-03 09:42:04.536629
30	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg	-96311	adn931	--- []\n	2014-04-04 22:09:44.53738	2014-04-04 22:09:44.53738
31	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg	-25934	dgl979	--- []\n	2014-01-17 16:47:10.538705	2014-01-17 16:47:10.538705
32	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg	-9941	yfh792	--- []\n	2014-05-11 08:15:20.547949	2014-05-11 08:15:20.547949
33	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg	-8537	rqd428	--- []\n	2014-06-10 06:05:05.551087	2014-06-10 06:05:05.551087
34	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg	-19577	ait255	--- []\n	2014-03-11 08:37:16.553451	2014-03-11 08:37:16.553451
35	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tomgreever/128.jpg	-83617	fuv929	--- []\n	2014-04-25 11:53:01.554893	2014-04-25 11:53:01.554893
36	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg	-72823	zee990	--- []\n	2014-02-15 04:20:25.556216	2014-02-15 04:20:25.556216
37	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg	-75554	hre385	--- []\n	2013-11-07 23:15:10.557522	2013-11-07 23:15:10.557522
38	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg	-26855	jpy677	--- []\n	2014-03-16 17:22:35.558301	2014-03-16 17:22:35.558301
39	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg	-5361	guk193	--- []\n	2014-05-26 13:15:10.559038	2014-05-26 13:15:10.559038
40	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg	-45545	thh465	--- []\n	2014-05-02 10:34:19.55984	2014-05-02 10:34:19.55984
41	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg	-41006	xuf981	--- []\n	2014-04-29 13:11:35.560599	2014-04-29 13:11:35.560599
42	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg	-4343	iyv789	--- []\n	2013-10-14 04:00:22.561327	2013-10-14 04:00:22.561327
43	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg	-95355	lnc629	--- []\n	2013-11-01 18:32:11.562019	2013-11-01 18:32:11.562019
44	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg	-72625	ism506	--- []\n	2014-02-18 18:33:01.562722	2014-02-18 18:33:01.562722
45	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg	-2173	tzk139	--- []\n	2014-03-03 07:37:33.563434	2014-03-03 07:37:33.563434
46	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg	-65723	inh359	--- []\n	2014-06-15 00:31:34.564164	2014-06-15 00:31:34.564164
47	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg	-36376	ajj196	--- []\n	2014-05-09 04:44:50.564933	2014-05-09 04:44:50.564933
48	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg	-74367	ngn827	--- []\n	2014-02-01 20:09:32.565662	2014-02-01 20:09:32.565662
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- Name: alerts_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY alerts
    ADD CONSTRAINT alerts_pkey PRIMARY KEY (id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: likes_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY likes
    ADD CONSTRAINT likes_pkey PRIMARY KEY (id);


--
-- Name: log_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY log_entries
    ADD CONSTRAINT log_entries_pkey PRIMARY KEY (id);


--
-- Name: looks_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY looks
    ADD CONSTRAINT looks_pkey PRIMARY KEY (id);


--
-- Name: muted_submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY muted_submissions
    ADD CONSTRAINT muted_submissions_pkey PRIMARY KEY (id);


--
-- Name: notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: posts_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- Name: products_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);


--
-- Name: quotes_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY quotes
    ADD CONSTRAINT quotes_pkey PRIMARY KEY (id);


--
-- Name: submission_viewers_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY submission_viewers
    ADD CONSTRAINT submission_viewers_pkey PRIMARY KEY (id);


--
-- Name: submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY submissions
    ADD CONSTRAINT submissions_pkey PRIMARY KEY (id);


--
-- Name: team_managers_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY team_managers
    ADD CONSTRAINT team_managers_pkey PRIMARY KEY (id);


--
-- Name: team_memberships_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY team_memberships
    ADD CONSTRAINT team_memberships_pkey PRIMARY KEY (id);


--
-- Name: teams_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY teams
    ADD CONSTRAINT teams_pkey PRIMARY KEY (id);


--
-- Name: testimonials_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY testimonials
    ADD CONSTRAINT testimonials_pkey PRIMARY KEY (id);


--
-- Name: user_exercises_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY user_exercises
    ADD CONSTRAINT user_exercises_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: by_submission; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX by_submission ON submission_viewers USING btree (submission_id, viewer_id);


--
-- Name: index_alerts_on_user_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_alerts_on_user_id ON alerts USING btree (user_id);


--
-- Name: index_submissions_on_key; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_submissions_on_key ON submissions USING btree (key);


--
-- Name: index_submissions_on_user_exercise_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_submissions_on_user_exercise_id ON submissions USING btree (user_exercise_id);


--
-- Name: index_teams_on_slug; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_teams_on_slug ON teams USING btree (slug);


--
-- Name: index_user_exercises_on_key; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_user_exercises_on_key ON user_exercises USING btree (key);


--
-- Name: index_user_exercises_on_language_and_slug_and_state; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_user_exercises_on_language_and_slug_and_state ON user_exercises USING btree (language, slug, state);


--
-- Name: index_user_exercises_on_user_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_user_exercises_on_user_id ON user_exercises USING btree (user_id);


--
-- Name: index_user_exercises_on_user_id_and_language_and_slug; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_user_exercises_on_user_id_and_language_and_slug ON user_exercises USING btree (user_id, language, slug);


--
-- Name: index_users_on_username; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_users_on_username ON users USING btree (username);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: kytrinyx
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM kytrinyx;
GRANT ALL ON SCHEMA public TO kytrinyx;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

