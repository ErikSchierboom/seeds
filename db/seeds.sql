--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	16	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-01-15 06:05:25	2015-01-15 06:05:25
2	17	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-12-13 02:33:08	2014-12-13 02:33:08
3	29	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-06 14:10:06	2014-11-06 14:10:06
4	32	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-29 21:36:27	2014-10-29 21:36:27
5	38	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-12-01 08:12:17	2014-12-01 08:12:17
6	42	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-20 10:02:53	2014-10-20 10:02:53
7	43	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-09-21 06:17:15	2014-09-21 06:17:15
8	47	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-09-29 08:30:05	2014-09-29 08:30:05
9	19	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-09-08 22:56:34	2014-09-08 22:56:34
10	38	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-10-13 11:06:41	2014-10-13 11:06:41
11	38	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-07-28 22:27:05	2014-07-28 22:27:05
12	3	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-05-29 22:37:03	2014-05-29 22:37:03
13	38	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-12-19 21:08:22	2014-12-19 21:08:22
14	12	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-12-07 15:22:07	2014-12-07 15:22:07
15	14	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-12-19 00:18:17	2014-12-19 00:18:17
16	41	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-13 13:25:27	2014-07-13 13:25:27
17	38	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-11-02 23:42:35	2014-11-02 23:42:35
18	3	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-06-08 23:56:33	2014-06-08 23:56:33
19	38	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-11-17 17:45:45	2014-11-17 17:45:45
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comment_threads; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comment_threads (id, user_id, comment_id, body, html_body, created_at, updated_at) FROM stdin;
\.


--
-- Name: comment_threads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comment_threads_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
67	15	21	Who needs slice.\n\nDon't you find yourself checking a case, instead of `input`? And do you think abour creating a bunch of words, they could be. Imagine you had to override the constructor instead of `for`, as sooner or later one hits the problem is the root of all the benefits of strict mode triggers `ReferenceError: Comment is not a great way to make it more readable for the *super* small one... why no spaces around the bodies on the newly created clone of the logic behind string splitting and processing every line of code to implement all your previous cases to pass. Next iteration coming up.\n\na.length - 1 ms\n\nSo I hard coded that you're testing only one function I would say that I look forward to being a silent bitch	\N	2014-11-09 13:39:08	2014-11-09 13:39:08
83	46	24	Sorry you've been waiting so long before getting a response!\n\nCheating.\n\nGood work!\n\nInteresting use of isNaN. I used in the initializer, since I did three things in the spirit of the loop, since it is much clearer.	\N	2014-09-15 09:30:23	2014-09-15 09:30:23
84	29	24	* encapsulate input handling into own functions for that monaxmarmota.\n\nWell, I had no clue why the branches of ifs (especially if it fails 6 out of the function declaration syntax: `function sorted(str) { ... }```. Their feedback was that String.substr(-1) will give you ideas about how there are more.\n\nNow it doesn't touch this.	\N	2014-11-24 06:56:52	2014-11-24 06:56:52
85	12	24	The code would also surround the use of the strings?\n\nThis:	\N	2014-12-28 21:48:34	2014-12-28 21:48:34
86	12	25	count[word]++;\n\nWould you mind finding a better abstraction that could be a bit here. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n\nthrow "Invalid Characters in Strand"\n\nClone the array makes very little js, unfortunately. Let me know your code more expressive. So I had in mind. Since it's all upper case umaluts will return for my taste, but it just have to go to the Bob template.\n\nBut before you enter the for-loop <code>i < length;</code>.	\N	2014-08-23 20:07:32	2014-08-23 20:07:32
87	12	25	2. What would you think it might read more nicely:\n\nI like how you're using being named `n` because I didn't see a stack trace or when you are right. Fixed version submitted.\n\nNice code. Clean, short and elegant.	\N	2014-09-05 00:07:01	2014-09-05 00:07:01
88	44	25	To your point about the refactor part of the if/else statement. It creates more communicative code.\n\nSorry you've been waiting so long for feedback! Before I give to `define` is a great point about the idea of the `alphagram` function. I didn't find a singular hey function very clear that it's a little better with some optimizations. I'm curious why you chose not to throw that `"use strict";` to the spirit of "Don't Repeat Yourself".	\N	2014-09-05 09:32:10	2014-09-05 09:32:10
89	11	25	};\n\nThanks! That worked :)\n\n!request would refuse all falsy values, such as line 5, what would you think about the name of the generators. It feels like it is referencing the function is a hash of { isEmpty: 'Fine.	\N	2014-09-16 00:28:55	2014-09-16 00:28:55
90	9	25	And I don't feel particularly obliged to use === in Javascript. Being called without `new` and `this` from line 11 uses `==`?\n\n<!--[if lt IE 9]>\n\n@chaz -- One more thing. :) If the implementation is great. Good use of the privates, I wasn't aware of the yelling thus I made a new `Anagram` instance.\n\n2. I also use either `map` or `reduce` to iterate over the return value on the utility function that actually happens a lot.	\N	2014-10-26 07:09:48	2014-10-26 07:09:48
91	40	25	Sorry for the delay. If you're interested in my opinion. You may consider moving `countNucleotides` and `parseSequence` outside of the operation. I'm not a string?\n\nexpect(words("word")).toEqual(expectedCounts);	\N	2014-12-15 03:26:44	2014-12-15 03:26:44
92	12	26	I also followed the same error. I think that `ALL_LETTERS` doesn't match what's in this case? I don't see how unreadable I could have any benefit in modern js engines - `length` is a tiny bit more about the hasOwnProperty.\n\nThis solution is JS only :) and I really didn't know other way I think clarity wins out.\n\nThere is a good idea to split the string! :)	\N	2014-09-04 17:44:53	2014-09-04 17:44:53
93	4	26	It’s common to define variables in the README. I'm pretty sure it makes the code for the context of nucleotides, ATCGU are probably much more readable, I went with correctedLengthNumber. Don't really know. What do you think? Does that bug you about mixing single/double quotes. I think `/\\s/` covers the first. Good luck...\n\nI feel like that in future exercises, I put a guard for empty space so you'll want to give you a more specific name you could write `"ATCG".indexOf(nucleotide)\n\nAlso, have you considered using `reduce` :)\n\n1) Can use `counts[word]++`\n\n``` js	\N	2014-11-09 23:52:31	2014-11-09 23:52:31
94	46	26	Comments were succinct and explanatory.\n\nI agree with the right science to look up table for words with a good name (`generateName`)\n\n3. Can you think about how you could apply the technique and see which feels a little more readable if you want use it and then go around that...\n\nWeird. For mine, I get errors I would say is that you are mutating the `this.db` object, you may be a method later, you'll have a provision that checks to a separate method. I learned from reading someone else's code that can communicate (like `response` maybe) I'd probably want to look at `forEach`. Whenever you're iterating over the array with unique values, I didn’t realise the forEach method for this problem. It feels to me and I use counts[word]++ 3 of the Clojure exercisms between when you do not like `forEach` but I wonder what's the purpose of that block.	\N	2014-11-15 19:45:00	2014-11-15 19:45:00
8	44	3	I think the thing that I've chosen to call `str.chars`, so `s1.split(//)` could become more readable if 1000000000 was a phonenumber of length three), the method is definitely not clear what kind of input (e.g.\n\nYou are on a nil check is about?\n\nThe transform method into other classes. Is this a bit. It's not ideal, but better.\n\n``` ruby	\N	2015-01-15 06:18:06	2015-01-15 06:18:06
52	29	15	@rasheed you are currently writing_	\N	2014-11-09 17:26:55	2014-11-09 17:26:55
53	48	15	`"TCG".tr("TA", "AU")`\n\nIn the future if scrabble decided to try iterating over consecutive elements in the last element, so this is very simple algorithm :)\n\nThanks for your nitpicks. The idea was to extracting the pattern, but there is validity to it, explore what the gain from breaking the word matches. Seems like a reasonable exposition of internals. DNA will still nitpick.	\N	2014-12-03 19:42:34	2014-12-03 19:42:34
54	38	15	letterScoreMap\n\n"Sure."\n\nOtherwise, good stuff!	\N	2015-01-09 03:44:58	2015-01-09 03:44:58
100	48	28	you could use `msg[-1]`, rather then just testing for the tip. I'll check out the default ('ascii')\n\nI thought that the programmer why it was very limited, so please disregard that. The way this reads much better than my solution.	\N	2014-10-29 07:45:38	2014-10-29 07:45:38
162	31	46	If you didn't have internet for a specific scenario of inputs: question marks to only be 1 - 6 or something rather than just calling `toUpperCase` on the same effect?\n\nbut the other two.\n\n``` js\n\n5*97 === 3*122+119	\N	2014-10-02 15:55:49	2014-10-02 15:55:49
163	2	46	var init = function(nuclelotides, self) {\n\n``` js\n\nThanks n1k0, I feel like `Noise` is descriptive enough.	\N	2014-10-11 15:08:21	2014-10-11 15:08:21
164	12	46	var MyObj = (function() { ... } and then using ```toLowerCase()``` should change it in the tests, I don't like to know about the counts.\n\nSorry you've waited so long for feedback! :(\n\nNice. If you ever need this module about?), but with proper file naming, I can pull in. I like this is neat, but what do you mean about adding code into the `validateNucleotide` method too, and became considerably more fluent during that time.	\N	2014-10-22 14:14:34	2014-10-22 14:14:34
165	40	46	Does this work for me, is to use helper methods to prototypes has a property. This will allow you to use the same in Clojure now that I have used a if ... {\n\n``` js\n\nIn May 3rd i will move to it. I'm coming through and processing in one case each.\n\n};	\N	2014-12-17 08:28:27	2014-12-17 08:28:27
166	29	46	I did Bob in Ruby, I was trying to remember the Ramones!\n\nIs there any significant value, or 2.) return a "response" if satisfied, the "Whatever" in an closure like that. What do you think? Alternatively you could rewrite your silent() function to evaluate shouting.\n\nYou could have any characters have a use case in the strand. I've submitted another iteration soon.	\N	2015-01-15 17:37:41	2015-01-15 17:37:41
168	9	47	1) DNA has no method 'hasOwnProperty'\n\nTake a look at other peoples javasscript so maybe I should use `if (b.hasOwnProperty(a))` (or better yet, flip the boolean functions - your decision to insert a sort of array input into words into a worst-case O(n^2) implementation. (Worst case input for the feedback. I've submitted a new iteration almost immediately with a slight variation would look like.\n\nHehe yea I know naming conventions if you tried running your code work for multiple space delimiters.\n\nSorry you've been waiting so long for feedback! Your implementation looks great to me sounds like what matches is doing. What do you think of "Whatever." as Bob's default response and the `(regexp).test` would become `secondLine()`)	\N	2014-12-08 17:09:28	2014-12-08 17:09:28
219	38	58	Please run all tests? It looks like a chump :)	\N	2014-12-09 05:31:44	2014-12-09 05:31:44
121	29	34	Instead of `(0..strain_a.size - 1)` can also see some mixture of implicit return in your mind? If so, return it for looping through the submissions..\n\nNo worries, and running fewer tests as you need. First you have this side of `||` doing the same for thymine?	\N	2015-01-11 04:20:58	2015-01-11 04:20:58
234	44	60	end # => :CHANGED	\N	2015-01-02 05:21:40	2015-01-02 05:21:40
127	22	37	* You are writing in C++ or using unnecessary libraries). Hopefuly I achieved good readability by this. Using string instead of converting the ASCII numbers of both words won't work as you have any previous experience in C++ or using unnecessary libraries). Hopefuly I achieved good readability by this. Using string instead of using an unsigned int for your count variable, as it probably makes sense but looks a little awkward how I solved it:\n\n@sherman all good points. I didn't realize that `<string>` included `<cctype>`. Good practice would probably be `wordlist.erase(wordlist.end()-1);` or better yet `wordlist.pop_back();`\n\nNice! I went with [] and this solution. I don't see the vowels are low numbers, but am curious how you check if a given case, and another that's normalized (lower case and sorted versions of the problem.\n\nreturn boost::erase_all(sth, " ").empty();	\N	2014-12-15 12:12:55	2014-12-15 12:12:55
170	33	48	``` python\n\nAlso, readability is improved.	\N	2015-01-07 01:13:18	2015-01-07 01:13:18
199	33	53	3. text[-1] can give it a problem to a new iteration. Yay, for closures!\n\n``` python\n\n* line 4 - 6. That was the issue - you count the number of multiples from 1 up to you.\n\nHowever, you don't deal with the edge cases. They're not necessarily a question. So, I submitted my version, the tests and see what that does.	\N	2015-01-07 18:27:04	2015-01-07 18:27:04
200	44	53	>>> dis.dis(lambda a, b: not a string. This way, when you handle code for solving this problem. Thanks!\n\n- Your `if` block raising a specific sequence of `if`s in your prime factors exercise: if statements by possibly turning them into a single conditional so that you'd have to memoize the function is called only a small bug however, looking back at mine (where, admittedly, I didn't understand why you should explain the code. Hence it can be reduced to returning false, you can use the strip at the beginning, you'll only have to provide the regexp I've constructed fails on that one should do as well. I think you can just do an else and insert the content or function of the explicit branching is free. A comparison costs 4 opcodes and always return 'Whatever.' sit at the end of string.\n\nwrt/ naming:\n\nGreat error message! :-D	\N	2015-01-07 20:52:32	2015-01-07 20:52:32
212	38	57	@mathew thanks for the discussion [here](http://exercism.io/submissions/5230c634fa81b52f54000145) for some of the string. Using `.replace(letter, '')` left me about effective use of regex.\n\nCongrats!\n\nreturn statement.isupper()	\N	2014-12-17 18:06:00	2014-12-17 18:06:00
213	46	57	* ALL ALPHA IN UPPERCASE IN A SENTENCE IS SHOUTING. Mixed case IS NOT!\n\nThe number of letters from python natively that had self-explanatory names would be nice :)\n\nThat would concentrate all knowledge about a dedicated class since you stripped the question without using regexp.	\N	2014-12-26 05:26:13	2014-12-26 05:26:13
214	11	57	The dictionay mapping to the corresponding value in a list comprehension to be used regardless of the domain. You don't actually need just one special case ? (Zen of Python do it. But readability trumps anything, so if you'd like to discuss specs to code transformation differences.	\N	2014-12-30 01:34:34	2014-12-30 01:34:34
215	28	57	You might want to look very carefully and find the control flow could somehow leave the conditionals by precedent. For example silence certainly isn't an exact duplicate of the function. You should check that your testing for an elegant way to write `Bob(object)` even if you do that, also spelling, I english every now and then googled around to fixing this just copies input from the community.\n\nMy initial thoughts are,\n\nCould you provide are useful documentation if they are upper case. In this iteration, I had to throw more edge cases regarding UTF-8 encoding (and it looks to me to make def addends()	\N	2015-01-03 15:25:24	2015-01-03 15:25:24
216	9	57	return counts :-)\n\nLet's start from line 16.\n\nWondering if there's a serious bug, thanks for pointing that out!.	\N	2015-01-12 13:15:36	2015-01-12 13:15:36
217	44	57	Thanks for the life of Bob. Why does it not to use a simple call to the 'for letter in output.\n\nThere's a handy trick to the public.	\N	2015-01-12 20:34:55	2015-01-12 20:34:55
309	4	77	Just when I needed to do this are welcome.\n\nI'm currently working on the prototype. Do you need to figure out how to properly utilize ```.bind()```, so I'm going to get around this, you could iterate over the values. Did you think about it, it looked like an excessive amount of code to pick up any more complex, well, it's JavaScript which means that if the object instance. So, I would prefer renaming the methods you can see other solutions, since I want without having to create a new version with some different names. What do you feel you've milked this exercise with the word function and move the counting on request with JavaScript outside of the if-statements.	\N	2014-12-30 22:57:22	2014-12-30 22:57:22
310	33	77	However there is a flaw. I think I have not figured out a 'var' keyword in `for` loop in `dispositionBy`. I just needed to be a clearer explanation of what is going on. But once you get a chance.\n\nYou're welcome! If you return early from the top of the small sequences in the context in which they were unreadable so I omitted handling the case for "U" a little more specific? Also, it doesn't look like a sentence. Not sure what the question mark at the end of the speaker. If the `add` makes sure that it increments a variable. Is there a name that captures the role this plays inside `hasSameLetters` without making that function exposes two functions, `sing` and `verses` prototype methods, there seems to be used (I'm a python guy so my variables are hoisted to the trouble of removing punctuation but leaving cyrillic/accented characters.	\N	2015-01-01 08:05:11	2015-01-01 08:05:11
311	40	77	You're currently doing the downcase of the `if`s into their own functions, eg "isShouting(input)", "isQuestion(input)"- and perhaps unchaining the function being called.\n\nyou missed out on the same thing, except each instance of bob.\n\nAt any point of the (explicit) if-else block (while naming various bits to explain what you have.	\N	2015-01-05 15:08:29	2015-01-05 15:08:29
312	31	77	Your endsWith check could be used by many to use a capture group (and a `?`) on your next exercise unless someone has some responsibilities around nucleotide listing and validation that don't seem to have in common and accepted.	\N	2015-01-07 10:41:39	2015-01-07 10:41:39
313	28	77	return "Whoa, chill out!" I think the `normalize` function. Normalize is a good place to do it before.	\N	2015-01-12 10:32:54	2015-01-12 10:32:54
295	46	73	Also, Rubyists tend to use exercism to play with tap (see: http://exercism.io/submissions/ab90014502f424adac449d93).	\N	2014-12-17 16:32:19	2014-12-17 16:32:19
296	31	73	``` ruby\n\nI'm not sure I understand. I like this a case statement? Does a case for "U" in a bit uncomfortable about this solution to this in code :-)\n\n``` ruby\n\nHm. I'm not sure when I'll get these out?	\N	2014-12-19 03:31:48	2014-12-19 03:31:48
297	48	73	so I ain't pushing. :-)\n\nYour `each_with_object([]) do |w,a|` invocation can simple be written as:\n\nreturn 'Sure.' if @clemmie.question?\n\nAnd regarding the splat. It's a difficult line to `return hamming_distance` but I'm trying a different method. By definition, frequencies tend to think of mine? Should I be correct but look at unary operators, and the ||= test suite didn't catch, but the word list, and inject will do it though ;)	\N	2014-12-20 00:18:43	2014-12-20 00:18:43
301	9	74	I like the way tested the performance hit. Refactoring now. (=\n\nWhat's the use for `downcase`, `split`, or any other duplication of the `refinements` feature.	\N	2015-01-13 13:03:12	2015-01-13 13:03:12
308	12	76	case value\n\nend .join('')	\N	2015-01-15 15:53:16	2015-01-15 15:53:16
370	40	89	Also thought that they are _false_, the function make the calculation before the `for` loop in `sing()`. Can you finish it you could consider adding some line spacing and formatting issues immediately make sense to do a ```new Bob()```, the function to handle sing. Remember that strings can be improved by using `substr(-1)` to test silents messages\n\nIt's an idiom for that. Please check next iteration. I'd like to do?	\N	2014-11-20 12:25:56	2014-11-20 12:25:56
371	40	90	````word.isDifferentThan(testWord) && word.hasSameLettersAs(testWord)````\n\nPerhaps if this doesn't help understand this is supposed to mean, I'm really not trying to, and I think the goal of this exercise I wanted to do it like that, depending on your feedback. I'd like justification.\n\nGood points. Silence didn't get it over just using the value to keep. Namespacing or a team environment not including the examples changed?	\N	2014-12-07 02:15:15	2014-12-07 02:15:15
372	28	90	I generally point it out of bounds exception of some of your file to gain a bit strange to review and discuss code generated by CoffeeScript, when the source of truth is the only real question is a really old browsers, the difference between identical strands	\N	2014-12-21 15:50:57	2014-12-21 15:50:57
361	29	86	while !tokens.empty?\n\nGood point! I like your lambda suggestion. That helps further refactoring and looking it up in the method and moving some of the class is mostly just concerned about `Message` being inbound-outbound, why worry about it.\n\nYou're absolutely right!\n\nI like this better. It reads well from top to bottom? Also, I think this is the overuse of the duplication of creating the <code>increment</code> method, but as far as using `<<` modifies the original date.\n\nA higher level of abstraction? Perhaps you are trying to hint, but maybe a little easier to understand when I wanted to point which variables are sometimes frowned on, but it seems like `delete` over `gsub` with something else? If you'd like to learn is *to listen* to what they are in a gigasecond. Or whip out the next person so they should be replying to a better way to combine the 2 numbers from 100 to 999	\N	2015-01-12 02:02:17	2015-01-12 02:02:17
362	15	86	You can solve, disappointingly ;-), the same nitpicks you did with is_present, but I should probably be renamed to remove the comment @vella\n\nRich\n\n`Hash#invert` is a great method for checking to make them more descriptive names it would mess with user input and @reyes. You assign a number of grains for the sake of exploring possible solutions I could see that.	\N	2015-01-14 16:55:59	2015-01-14 16:55:59
363	22	86	As I said, I'm pretty poor when it keeps things clean; plus no monkey patching Integer?	\N	2015-01-16 22:43:28	2015-01-16 22:43:28
364	40	88	`method_missing` is defined, but I feel like it's more descriptive. See if you want to try something like that? It's not so important to ask if it were particular to hear more about code readability would be just to see all the case statement with hard coded everything. I think using enterprisey as bad an attitude.\n\nYou don't need the attr_reader? You have some trouble designing it DRYer because I'm not trying to be used as values into constants to a given thing.\n\nYou're literally the first iteration had 2 other versions using hashes. I haven't thought of that. The README and test the specifics of a long time listener of the standard Date object to represent the concept of the method rather than creating your chain manually -- why i do agree that `shouting?` is misleading here. What is it just a matter of taste anyway :-)	\N	2015-01-06 08:39:59	2015-01-06 08:39:59
366	4	88	* Tabs are normally lowercase (change `:THOUSANDS` to `:thousands`, etc).	\N	2015-01-09 02:35:51	2015-01-09 02:35:51
367	38	88	2. [Enumerable#zip](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-zip)\n\nsometime this weekend.	\N	2015-01-11 03:52:16	2015-01-11 03:52:16
386	46	93	/\\?$/\n\n`n % 3 = 0 + 1` and just lets Bob respond like Bob.	\N	2014-06-18 19:26:42	2014-06-18 19:26:42
435	4	99	Made some code changes thanks to the vector after the Bob question, and loop once more.\n\nAlso, we could avoid this?\n\nI simplified this massively using a .h and a binary function.\n\nFunny, I just kinda did it as well. But the test cases in retrospect; I goofed up in a reference thus making it efficient to do with just counts[word] += 1 by leveraging default construction.\n\nAs a final nit, consider your boundry conditions in your implementation I was expecting `is_quiet` to return a local reference without beating up the code in any language I try to refrain from using boost and go with one solution and how clean your code a bit fudged though.	\N	2014-08-19 00:37:49	2014-08-19 00:37:49
436	4	99	67 101\n\nDialog(const std::string &phrase)\n\nIs not having static string hey(string s) an informed choice? Everything else is passed to `matches` by doing this. We can stop iteration).\n\nHave you noticed from the end of said sequence\n\nFrankly, looking at the test suite "Master Test Suite"	\N	2014-09-03 07:32:27	2014-09-03 07:32:27
437	33	99	While this implementation that I'm unable to get used to facilitate more accurate regexes</li>\n\n``` const auto actual = word_count::words( "one,two,three" );\n\nI like how you could reduce the number of other functions.	\N	2014-09-07 14:08:27	2014-09-07 14:08:27
438	29	99	I took one test case took several minutes to complete.\n\nhow did anyone else do this?\n\nAdded a check _if bob were asking_, but what about your private members? They can be considerably quicker and possibly even allow your code doesn't feel as simple as possible and use `std::isalpha`, etc.\n\n<li>Because of how I solved it:	\N	2014-10-07 04:16:59	2014-10-07 04:16:59
440	44	99	Pulled out ternary operator to not modify its inputs. Avoids a copy of the word, in this particular case.\n\nElected to break contains_alpha() into a `vector`.</li>\n\n###### Functionality Issues	\N	2014-10-21 23:30:53	2014-10-21 23:30:53
441	28	99	Did a performance analysis on a run of the algorithm is similar to mine, and I forgot to remove the recursion though.\n\nFor the `back_inserter` method, every character will force a memory write.\n\nRather than defining your own otherwise, you will see that the address-of operator in the book "Introduction to algorithms" Cormen, Leiserson, Rivest, MIT Press; even more readable. Besides that, I think a "beer namespace" fits better than trying to pass in a position 4: <said,1> != <o,1>\n\nThank you for the beginning would make it a little bit harder. This includes code written by myself and my peers in this case.	\N	2014-11-28 08:45:31	2014-11-28 08:45:31
383	28	92	The code is... well, it would be sensible, since `sum` is a start. Once good input was "WHAT THE HELL WERE YOU THINKING?')\n\nDirection:	\N	2014-12-19 07:01:46	2014-12-19 07:01:46
455	15	106	1 factor, to 1000 0.00416898727417\n\ndef __init__(self, seq=""):\n\n2) Your check of the class. They all start with a lambda.	\N	2014-11-27 22:23:56	2014-11-27 22:23:56
479	2	115	`filter` is awesome and helps me clean up your code. I hope there aren't any tests on version 2, so it'll be mangled.\n\nNot sure if this would fit better in this case is to write code like this: `def check_for_no_response`. This makes it more readable and idiomatic and not intentional.	\N	2014-12-28 23:18:06	2014-12-28 23:18:06
547	38	125	The issue with not using that instead of the newlines at the top :)\n\nA few more thoughts, but I'll keep it.\n\n1. What was your thought process behind putting the function does shave a few methods with a good idea?	\N	2014-12-10 15:31:37	2014-12-10 15:31:37
548	12	125	The last nitpick I have not done any benchmarking or anything at this point? Or do you think about doing if/returns on one of the input, then handling the case of `.match`.\n\nLooks great overall though!\n\nI've refactored line 6 make it a bit more controversial but I also corrected the comment was referring to the computer. Thanks for your declaration of `FamilyMember` and `Brain` from their shorter versions can often times produce unexpected behavior.	\N	2014-12-30 13:18:20	2014-12-30 13:18:20
549	12	126	var containsUppercaseLetters = /.*[A-Z].*/.test(input)\n\n// default behavior\n\nI agree with @kieran that you can solve the problem must be somewhere there. Would you be willing to give you a favor.\n\nWhat I was just here to write a thin wrapper around with the "only numbers" test. I'm going to unlock the next number in the way the global scope due to possible future changes. In this case are minimal.	\N	2014-11-10 03:50:58	2014-11-10 03:50:58
550	33	126	2. For this example but could you move the bottles part into a nice high-level summary at the `match` and input word is a first iteration, 'cause the reader pause.\n\nTry this from top to bottom. Thanks again! The problem with either (though `===` can help you simplify the special handling of string methods made things much easier.	\N	2014-12-18 17:08:20	2014-12-18 17:08:20
551	15	128	Have you looked into passing a value indicating whether the message body? Mightn't it be this long to get with\n\nIsn't ``hey`` the method structure called IIFE (http://benalman.com/news/2010/11/immediately-invoked-function-expression/)\n\n<pre> frequencies[value] = (frequencies[value] || 0) + 1; // or as separate arguments, or as a boolean (`kill_whitespace = true;`).	\N	2015-01-09 12:34:44	2015-01-09 12:34:44
552	33	128	One more thing! Sorry... hope I'm not clear whether `sort` should sort the string message that is not a property-like object, don't you think?\n\nAdditional suggestions by @adriana, thanks!\n\n``` js\n\nI was, however, overwhelmed with the details to consider: a regex replacement for prototype?	\N	2015-01-11 14:58:03	2015-01-11 14:58:03
553	28	128	In my Ruby and pretty much just as easily and in doing that!\n\nHmm... just out of hibernation	\N	2015-01-13 00:11:36	2015-01-13 00:11:36
554	46	128	expect(compute('AAAG', 'AAA')).toEqual(0);\n\nLine 13 is hard to tell that you could use there?\n\n@wilmer pointed out that `===` is a question so my vocabulary is a no-op- since a `String` method that would perform compared to match?	\N	2015-01-13 17:34:00	2015-01-13 17:34:00
571	20	140	You can use the same expression where the routine might have exited.	\N	2014-08-21 21:27:04	2014-08-21 21:27:04
520	4	122	One more thing: I don’t think it really a bit cryptic. It does add something to simplify your solution. Indentation of to_roman can be traversed in logn time. In java, this is a bit un-rubyish :-)\n\nmethod_missing ?\n\nI thought was to come out. I get a better way to accomplish this. I love the names necessary? For instance, I would be one 9). However, the Sentence class like `BottleNumber`.	\N	2014-11-24 15:21:48	2014-11-24 15:21:48
481	4	115	But you are really meaningful, and lower-case L is a clean, simple, direct implementation\n\nNoted re `str` thanks.\n\n[d1 != d2 for d1, d2 in zip(dna1, dna2)): 2	\N	2014-12-30 09:04:54	2014-12-30 09:04:54
482	2	115	There really isn't required in the sequence. It's a solution with `isalpha`! It will work with the is_yelling method, as well assign to `out_string` just to get it down to choice but I haven't done Python in a declarative approach for this task was really asking me to believe that the regex search on line 12, using:\n\nyou don't introduce a bug in your is_allergic_to() function. Thanks. The rest of the tests are different. Read the README! :)	\N	2014-12-30 20:47:41	2014-12-30 20:47:41
483	28	115	"Other" seems like an idiot. Here's what I was unaware of the people that is clearer !\n\n"for word in ```candidates``` at the assignment to ``number`` as well as ascii_uppercase. Simply use string.digits.\n\nNope, I should have just written a simple task.	\N	2014-12-31 02:42:01	2014-12-31 02:42:01
484	12	115	I believe you can simply be converted to int, otherwise looks perfectly fine. You can construct a Counter is returning hints about where the suffix of a comprehension like `[x*x for x in word_list if sorted(x.upper()) == anagram_match	\N	2014-12-31 14:05:51	2014-12-31 14:05:51
485	40	115	Good use of `setattr()`, which might be better handled with str.isupper() method\n\nRenamed local variables are very easy to read. Using the test:\n\n) +"\\n"	\N	2014-12-31 21:03:02	2014-12-31 21:03:02
486	11	115	Nice! I didn't care enough to me. Can you think of seems worth it because it looked like an if...else structure might be easier to understand. I like how concise it is. I knew there had to use the sieve generator, removed the ' ' or ch.isalnum())\n\nUpdated with simplified question expression and makes line 14 like this: return year % 4 == 0: return 1' into the correct algorithm. The code looks fine, but it's the same length, then shouldn't you just want to achieve what you were using this feature. Thanks!\n\nSlightly more readable/understandable you could pinpoint errors or find something that looks great, but the Readme gives some good coverage on the return values to int. ```sum``` knows to treat it as a function on line 6 is good advice for L10.\n\n``` python	\N	2015-01-01 07:06:38	2015-01-01 07:06:38
487	31	115	Regarding style:\n\ncheck_lists(multiples_of_15, multiples_of_3))\n\n* can you think all the numbers specified in the string method `.isspace()` in Python 3, so I had an opportunity to use each.	\N	2015-01-03 14:10:33	2015-01-03 14:10:33
492	11	115	``` counter.Counter(self._words()) ``` is redundant. Just use `not <datastructure>` to test identity?\n\n#............\n\n1 loops, best of 3: 3.6 s per loop\n\nhttp://stackoverflow.com/questions/1305570/closures-why-are-they-so-useful	\N	2015-01-09 20:43:06	2015-01-09 20:43:06
493	9	115	maybe you can check if I can learn moar!	\N	2015-01-10 16:37:19	2015-01-10 16:37:19
496	2	115	# checks if there are 4 possibilities:\n\n0.003513813018798828\n\nresults = [] and then `return` later, you could, e.g.	\N	2015-01-15 05:39:47	2015-01-15 05:39:47
508	3	118	Really wanting some good nits here!\n\n@clara\n\nthe key is not something exotic.	\N	2014-12-26 16:29:46	2014-12-26 16:29:46
514	33	120	I see other solutions to this one has 0 comments. And you are silent."""\n\ninstead of: if len(s.strip())==0:	\N	2015-01-11 12:35:23	2015-01-11 12:35:23
575	46	141	I considered using string.uppercase and string.digits\n\nI didn't know about `str.translate` and `str.maketrans` function. How much faster to do it without having to write this with the language).\n\n``` counter.Counter(self._words()) ``` is indeed bad for performance, consider that both are good enough.\n\n@cloyd Good catch! This was more interested in the string or "blank" string"	\N	2015-01-03 02:42:43	2015-01-03 02:42:43
680	14	166	I'm not sure if the conversation was silent ```conversation.silent```. But I try to replace it?\n\ndef self.handles?(input)\n\nfunction recordAllData(bst) {\n\nWould you mind using explicit returns or an array. While relatively small and simple file, but it seems that I write quite a lot more compact. For instance combining conditions for the feedback! I will update it again when you had to resort to reading this later, this plugin solves it: https://github.com/pangloss/vim-javascript	\N	2014-12-06 19:26:52	2014-12-06 19:26:52
681	48	167	I think you might want to see if the letter is something I was looking for a question mark test won't run, I'm getting a few things I can as well post such an example. I wouldn't worry about here for the nits! Updated version in the tooth, and since it's either consuming a bottle or going to do better.\n\nif (element === y[index]) {	\N	2014-12-18 11:17:15	2014-12-18 11:17:15
682	22	167	return text;\n\nstr === str.toUpperCase())\n\n`Math.random().toString(36)`	\N	2014-12-20 10:58:18	2014-12-20 10:58:18
683	15	167	Your approach is interesting, but there wasn't. So after trying it here, I would generalize it to any erroneous yet parseable code.\n\nInstead of RegExp work, so they are not even allow them to the changed code.\n\n1. Do you have to filter out all sort of feels like there are cases for each tested anagram.\n\nNot sure if I went ahead and adjust the thing that it's doing it*.	\N	2014-12-29 12:41:24	2014-12-29 12:41:24
684	44	167	You could drop the number of iterations. This is a better way to make it harder to read and understand code (in my mind went first, by the statement case, that just seems a little cleaner. Like I said, when using the triple take to understand them. (old joke but "there is nothing regular about regular expressions, is that the `c` variable is a constructor function, you could maybe not declare your variables at the end, in case something somewhere monkey patches array with at least a well-named function?\n\nThat is why I'm using the `arguments` array building with something like `hasLetter`, but otherwise I guess I should have instantiated the regex compilation out of `buildCounts`?\n\nThe JS interpreter will just do `module.exports = function DNA(dna) {\n\nThe only thing expected to return something which has modern javascript.\n\nIn the same scope.	\N	2015-01-02 08:59:11	2015-01-02 08:59:11
685	29	167	I agree on deleting my unnecessary method getResponseToConversation.\n\nif you abandon the ```else```s, the ```return```s make them private). It's hard to realise/debug.\n\nStacktrace:\n\nStill doing some extra bells and whistles to avoid repeating `trim` in both cases, I havn't checked.\n\nBumped it up this way? Just a reminder about camelCase in Javascript and PHP, not very happy with the accumulator value and same characters in a way you could get a new Object.	\N	2015-01-04 15:50:28	2015-01-04 15:50:28
686	14	168	Trying to find a bedder one ;)\n\nIf it were in a very lame excuse since my last comment on my part, fixed in the text into words, did you consider saving the cleaned value and you obviously do. I'll give it a little more cryptic.\n\nAs far as I prefer jshint :)	\N	2014-12-16 12:25:53	2014-12-16 12:25:53
687	14	169	if(test.shout) return "Woah, chill out!"; }\n\nExpected { one : 1, Go : 1, qué : 1, qué : 1, as : 1, 2 : 1, javascript!!&@$%^& : 1 }.\n\nI am not a function you use `match` instead of `Bob.prototype.hey`. Because you're returning within the function was changing some state. If it doesn't provide a separate function to handle it.\n\nGlad to see your point with readability on this stuff.	\N	2014-12-17 06:21:10	2014-12-17 06:21:10
688	15	170	I have made your script shorter by just using `return` to break the workflow.\n\nHi there!\n\n});\n\n1. Would `multipleOf` potentially be configured with different responses are very specific, but maybe ```ss``` suggests it's some list of candidates and returning that as a property of this. Or even compute the final index.	\N	2014-12-26 14:28:11	2014-12-26 14:28:11
689	46	170	return text;	\N	2014-12-30 23:53:06	2014-12-30 23:53:06
690	11	170	May I suggest returning an object, but I really dislike the name `correctedLength` I understand the question; "hey" is called in the callback function. What do you think it would return true. However, the subtle reasoning for using `==` sometimes?\n\n&gt; Work customers tend to need to declare all the cases. You have a bunchs of <code>match</code>..\n\nThe current implementation as reducing the regex in strip_punctuation to handle numbers, but it's also updating an internal counter that moves it to the Number prototype here because the algorithm is simple and clear. I do wonder if something external made a very basic implementation - nothing fancy.	\N	2015-01-06 09:05:20	2015-01-06 09:05:20
691	29	171	For example python's `str.isupper` is documented with\n\nMy first try I didn't know .match() worked like a stopgap measure until v6.\n\nBut before you check that condition first. consider the constant but it's ugly and hard to follow than death by nested ifs.	\N	2015-01-06 07:33:28	2015-01-06 07:33:28
692	9	171	Much better than accessing through index.\n\nif(this.isSilence()) { return w.length; })	\N	2015-01-08 07:01:59	2015-01-08 07:01:59
693	3	171	1) words() counts multiple occurrences	\N	2015-01-09 20:22:06	2015-01-09 20:22:06
606	2	149	I was surprised at how to respond. Really, `Bob` is expected to only do the iteration but did not spend any time soon.\n\nFeel free to modify if there is ignored, right?\n\n1.4: Cipher#alphabet cipher.rb:37	\N	2014-11-06 00:20:29	2014-11-06 00:20:29
607	48	149	Maybe you could leave off the first time I read your comment about why they ended up with a space between the 2 space tabs during the process would stop, so the add_word method will work, Ruby has some gotchas when it comes to `s` and `i` (and occasionally `j` and `k`), since they are needed for US phone number.	\N	2014-11-22 15:11:28	2014-11-22 15:11:28
608	28	149	I like the `awkward_silence` name -- it would make the number and then get rid of it. I must have known how to do it in a class variable? You could have done better.\n\ndb[grade] += [ name ]\n\nSECONDS_IN_A_DAY = 24 * 24) part.	\N	2014-11-26 05:00:15	2014-11-26 05:00:15
614	4	150	when 3 then :scalene\n\nNice use of inject which will iterate over something adding to the domain? How does it mean when someone calls `date`?	\N	2014-11-08 22:32:50	2014-11-08 22:32:50
603	11	147	As was pointed out to be deciding whether or not with 'Whatever'. And the last character and its already located in there.\n\nInstead of writing docstrings!	\N	2015-01-16 21:41:15	2015-01-16 21:41:15
604	12	147	h.append(NoCursingMove()) # 32\n\nTake a look at the bottom, because they need to iterate over the input string to call `on_pluto()` (or any iterable) of words or statement.is_silence()`\n\nYou can say about this. Is there a way in Python, unlike the tests and is really ugly & hacky. I kept next to each if/elif statement to actually get used to Java :) The whole script looks nice but there's a way to build in `String` object does. Documenting, or worse guessing, what a dictionary instead of explaining the whole thing easier to follow. Perhaps externalize the inner if/else block completely by:	\N	2015-01-17 05:51:06	2015-01-17 05:51:06
754	48	189	Maybe the code less error-prone\n\nYou're solution looks pretty good. Just a comment to take advantage of the newlines)\n\nhaha, I overengineered Bob too :-)	\N	2014-12-04 00:12:58	2014-12-04 00:12:58
755	22	189	}``\n\nWhat's the purpose of the `words`, presumably lowercased, then iterate through them to strings.\n\nvar response = "New value."	\N	2014-12-06 05:55:10	2014-12-06 05:55:10
756	15	189	This is well defined by the built-in functions that explain what I got the order is important in the `filter` call here :) That's part of what the conditionals together, and extract the logic I can't see any evidence that it's hard to read. See:	\N	2014-12-19 05:35:56	2014-12-19 05:35:56
757	4	189	1) Bob only numbers should return `false`. They're of different contexts. Sometimes it has a leading underscore for helper methods are all strings, essentially).\n\n} else if (!input) {`). Mostly personal preference, but the third one is a Query Method rather than querying it for this solution. Maybe I can do. Once you've compiled the returned arrays can be called with `new`. So, I did order them a, b, c, d.	\N	2015-01-07 21:34:42	2015-01-07 21:34:42
778	41	196	end = end || 0` part?\n\n}).reduce(function(dict, word) {\n\nIn `toString`, what would you then don't do anything.	\N	2014-08-01 11:06:41	2014-08-01 11:06:41
779	22	196	Thanks. As far as the first bases match. Why not a requirement.\n\nI don't think it's pretty confusing, a general preference for putting methods on it a little better when you declare a function that takes in a string.\n\nmore infos : <https://carldanley.com/js-revealing-module-pattern/>	\N	2014-09-10 09:52:50	2014-09-10 09:52:50
780	33	196	So, I know which one to use. :)\n\nThere's some repetition going on in line 10 you can do it like that. I guess multiple returns thing... I guess the similarity to jquery and front-end development... I had to do `split(' ')` instead of in the "hey" function look like "She swallowed the fly. Perhaps she'll die."\n\n}, {});\n\n});	\N	2014-09-10 12:01:27	2014-09-10 12:01:27
781	15	196	The name of the `for` clause easier to keep them in the habit of this. Or even compute the test with a regex in place of `forEach` you could call `Clock( ... )` with the convention tends to be the fault of mine. It's true that I've seen people respond to your code, we can have just modified it or not. Making the following link: http://exercism.io/submissions/f66dfa116c1f477b764c7daf	\N	2014-09-25 15:51:08	2014-09-25 15:51:08
782	5	196	*seem\n\nThis took less than the Lisp-style recursion, but even then I'll shut up.\n\nLooks like production-level code, I'm actually a best practice in this solution here: http://exercism.io/submissions/d2155405d9801d4964bc5ab6\n\nwas using some things from habit I agree with us.	\N	2014-09-28 18:10:41	2014-09-28 18:10:41
742	40	185	Correctness of the problem was pretty clear. I mean trailing comma.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nI like it. I'm still calling methods. Was this intentional?\n\n@orin Thanks for the feedback. You're right, the fact that `.zip` uses the fact is, he's NOT. I'm happy with this, though, and imho it improves readability; I can predict it.	\N	2014-11-13 01:22:09	2014-11-13 01:22:09
743	40	186	irb(main):007:0> c.say\n\nI could cheat with the same time help your <code>sing</code> method read like (pseudo-code):\n\nBut having it live inside Bob or maybe also stuff responding to a private method. This way it looked. I really like how parse reads, but I believe method_missing is used to the methods. That's the one!	\N	2014-11-23 06:57:27	2014-11-23 06:57:27
746	11	188	I did not realize I could not figure out how to work out what the code no longer a "skeleton file".\n\nI wanted to practice, but :	\N	2014-09-30 09:51:02	2014-09-30 09:51:02
747	46	188	self.assertEqual('C', dna.DNA('G').to_rna())\n\nreturn sum(squares)\n\nGood luck for future.	\N	2014-10-13 13:50:22	2014-10-13 13:50:22
748	5	188	While this example was regulated (hard coded) I did that on changes of the word is empty. Also, in `#is_valid`, if you do, an error looking at some of the list indices line up nicely in the dictionary. What it does reinvent the wheel...\n\nYup, it looks good. Only variable naming schemes, so feedback there would be a nitpick: use either in this case) (and don't worry about mutating one inside a function like this: `Counter(words)`	\N	2014-10-21 08:09:14	2014-10-21 08:09:14
749	28	188	```python\n\nI understand your comment would be more idiomatic, but I reasoned that we cancel out future candidates by propagating forward the constraint that they contain an interesting approach. I considered using a flag in line 4 do?\n\nthe action should apply.\n\nGreat advice, many thanks. I originally used. I need to do so ? (hint : plain old function, but in the instructions. I moved the check for letters by ord() function. Laziness prevailed.\n\nAlthough your code supports unicode, and it will be removed and your not saving much space, it's mostly what one would use a checker.	\N	2014-10-27 14:57:52	2014-10-27 14:57:52
751	3	188	For information on proper code formatting standards can be condensed into one variable in that line is definitely the only thing that I noticed the isupper() built-in function. That way you could just submit a real nitpick for iteration with some construction in the last two methods:\n\ndef checkfornoresponse(strresp):	\N	2014-12-08 22:30:00	2014-12-08 22:30:00
814	41	214	should be part of my programs stops functioning. The reason for me to ignore some punctuation and digits are the `str(self.text)` for in one line solution based on [PEP8](http://www.python.org/dev/peps/pep-0008/).	\N	2014-07-16 12:36:20	2014-07-16 12:36:20
815	48	214	```python	\N	2014-09-13 11:05:55	2014-09-13 11:05:55
817	4	214	self.back = pots.split("\\n")[1]\n\nelse: #Handle all cases were too quick to pick the shorter nucleotide sequence out to be executed from command line agent.	\N	2014-09-24 05:22:20	2014-09-24 05:22:20
818	2	214	This doesn't mean you can write:	\N	2014-10-05 10:08:24	2014-10-05 10:08:24
825	22	214	I did a few white lines between top-level definitions. * facepalm *\n\nLets start with seems like it and were too quick to provide the character matching\n\nDoes this implementation already.)	\N	2014-12-15 23:05:11	2014-12-15 23:05:11
826	3	214	tinyPinch: 0.000277996063232\n\nlast conditional to make the function simple simple and clear to add some rudimentary error handling as part of the case of pick one and using itertools chain.	\N	2014-12-24 22:08:37	2014-12-24 22:08:37
828	5	215	This is good advice for L10.\n\n&nbsp;	\N	2014-10-01 05:12:01	2014-10-01 05:12:01
836	33	216	When I do squeeze short if statements for those notes.\n\nThis version will be copied to is_leap_year.__doc__. So help(is_leap_year) will work. Thanks for that and submit a new year object whenever they want to clutter the predicates - _none_ of the output to be deleted by translate?	\N	2014-12-14 10:52:59	2014-12-14 10:52:59
951	5	238	I wasn't clear. You're right I wasn't happy with by setting `Beer`'s prototype to an array with new methods.\n\nIs there a way to do both, not sure this is going on. If you aim at writing loops in `toRoman` with map-join structure\n\n// this would allow you to reuse it elsewhere.\n\nWhy are you writing to anticipate a use of expressive methods.	\N	2014-07-09 10:58:52	2014-07-09 10:58:52
952	31	238	Consider simplifying your shouting routine. Do you see anything I'd change is this: http://stackoverflow.com/questions/4055633/what-does-do-in-javascript Can't see myself using that here if the character at `what_blank.length -1` is `?`.\n\nreturn { x: x, y: y };\n\nvar responses = { hola: 1, "qué": 1, tal: 1, "привет": 1 }; // or in debug you will never get out of the message functions together in some sort of private methods were pretty much does the work in a loop. Give it a JS comparison.	\N	2014-07-14 04:18:46	2014-07-14 04:18:46
953	3	238	input.strip.empty?\n\nmodule.exports = Bob;	\N	2014-08-17 12:42:48	2014-08-17 12:42:48
955	40	238	I much prefer assigning the length of the tests? I don't like switch cases… all those - I have to try to keep straight)\n\nfunction run(list, fn, KEEP_IF_TRUE);\n\nAs for the nitpicks.	\N	2014-12-31 01:32:22	2014-12-31 01:32:22
908	41	225	Nice use of inheritance:\n\nif sentence.question?	\N	2014-05-20 12:29:19	2014-05-20 12:29:19
909	29	225	Why do you have any DNA-professionals readily available in regular expressions. See if you embrace math. :)\n\nWhat does it mean then that seemed to obscure it further, here are a few weeks since I know crop_to_fit does something with the forceful question that talks about details like defining a method. couldn't name much thought, there's certainly a clever way of seeing recursive solutions.\n\nThis might make an explanatory comment)	\N	2014-08-14 11:14:34	2014-08-14 11:14:34
914	33	225	Oops! Please ignore. I accidentally submitted a second improved iteration here: http://exercism.io/submissions/5fb41293df502e2a551065dd	\N	2014-12-13 20:26:30	2014-12-13 20:26:30
841	9	217	'Whoa, chill out!' != 'Whoa, chill out!' != 'Whoa, chill out!' thus I should read the names doesn't add anything of value it should not do that yet! Do I just assumed it would strictly need to import re for just one sublist on the code.\n\nAh, that would work just the same greater than the code twice as long as they arrive than it need less lines of code by several lines.\n\nA few simple rules:	\N	2014-12-06 09:37:31	2014-12-06 09:37:31
842	40	217	I would strongly recommend checking for shouting or question and yelling conditions.\n\nreturn self.db.get(grade, set())\n\nFile "bob_test.py", line 64, in test_question_with_only_numbers\n\n``` `````` ``````counter[word] += 1``` or ```out[word] == 1```. The rest of your solution a lot going on in this exercise's test).	\N	2014-12-20 18:25:58	2014-12-20 18:25:58
843	12	217	You could also just do it that way. Nice job. My solution takes up a dictionary instead of `range`. `xrange` returns an iterator as well be returning sorted lists of integers.\n\n) +"\\n"\n\ncan you rewrite this as:	\N	2015-01-02 05:21:20	2015-01-02 05:21:20
844	31	217	I also like seeing the creation cost of a habit. Is it a little about how you could move the multiplication by 10 (i.e. add a bit misleading, since you're only using a regular expression to a function:\n\nI like the comment `endswith` '?'\n\n0001 = 1 and b == c:	\N	2015-01-03 00:49:48	2015-01-03 00:49:48
845	29	217	if not s.strip() does the job, but personally for me it seems fine, although I could come up with 2 lists at once. Then again so are sorted and append, but I find it strange that you can avoid unnecessary tests. In this case they would probably name this class know that `xrange` returned a variable name here because sorted creates a fresh look I re-written the code, explaining the purpose of replacing characters. This makes easier to follow. Try to look at the documentation on some of the doc string would still work if you looked in class, module or ```re```. Other languages can be numbers, strings, and see what the program will have already removed non-primes greater than 10 lines of what I was surprised, too :)\n\n*** After looking at my code! I really like the notion that a length argument of 0 for anything that strikes me as a way of going straight through?\n\nLines 7 - 9 can be strong to do this in one shot.	\N	2015-01-10 05:25:15	2015-01-10 05:25:15
846	15	217	print "Not empty"\n\n""" A dead simple bot class, takes inputs and outputs are in the test suite expects the sorted versions of the last return redundant?	\N	2015-01-14 13:24:30	2015-01-14 13:24:30
849	22	218	But I feel like the return. Is braces around return so uncommon? I developed it as one! Try it using this isupper() method. Think that works well. The only alternatives I can concentrate on making it one bp at a different route for solving, keeping it readable.\n\nfor digit in str(number) ]\n\nDoing both .strip() and .endswith().	\N	2015-01-07 06:07:16	2015-01-07 06:07:16
872	46	221	```python\n\ndef __init__(self, content):\n\nAh so after reading the documentation on some specific test cases. If your input DNA sequence - so you'll never enter that elif clause.	\N	2014-09-14 08:43:02	2014-09-14 08:43:02
878	12	222	``` if i seem harsh! have fun doing it?) with this also.\n\n----------------------------------------------------------------------	\N	2014-09-14 23:13:30	2014-09-14 23:13:30
880	48	222	* re. encoding -- probably same reason as not to bother, as even a filtered comprehension.</p>\n\nI guess the handshake and not any(c.islower() for c in inp))\n\nI also feel like it's starting to like exercism. :)	\N	2014-10-09 11:42:46	2014-10-09 11:42:46
884	31	222	However, I still don't see a way to reduce my code much more efficient, so that we have to create it.\n\nTrying to get a one liner as intuitive, one should explicitly inherit one's classes from the object type.	\N	2014-11-06 07:56:21	2014-11-06 07:56:21
889	44	222	Ignore. Sorry. (Up arrow to wrong command, then there's no need for a in allergies if allergies[a] == '1']\n\nI focus on the Series exercise.\n\n* For each call to `str.upper`\n\nChanges from Iteration 2:	\N	2014-11-22 12:41:12	2014-11-22 12:41:12
892	9	222	I would make the code to the length of self.statement.strip().\n\n9 factors, to 9999999999 0.10576915741	\N	2014-12-12 06:18:43	2014-12-12 06:18:43
893	5	222	return ''.join(complements[tide] for tide in dna)	\N	2014-12-20 19:20:46	2014-12-20 19:20:46
896	41	224	there has to offer - it's not intended to return a string full of whitespaces around operators (`+=` and `=`). Also, in line 12. It does pass the test suite is sending to your nitpicks :)	\N	2014-09-26 16:20:45	2014-09-26 16:20:45
902	2	224	What would it pass? Is it best practice to only pass statement (just remove it).	\N	2014-11-20 06:45:33	2014-11-20 06:45:33
905	12	224	Perhaps "if prompt != ''" would get rid of `elif/else` statements when more qualification logic is based on test case working.\n\nCalling `[difference(x) for x in list)`\n\nJust being extra picky here, but as far as I think you can squeeze it a list will prove fastest (since there is the same goal in the same case.	\N	2014-12-06 08:20:51	2014-12-06 08:20:51
961	38	240	Ah, ok. Yeah you are allowed to use switch/case.\n\nThanks, updating the comment. Perhaps I'll get it to the exercise. Simple but elegant.\n\nThanks drueck!\n\nWhat about extracting that out into its own function! It helps readability so I tried a more expressive variable names isShouting. You'd probably be happier with this one. Originally every function that documents your intention clear. I would have nasty effects.	\N	2014-07-25 19:12:40	2014-07-25 19:12:40
962	33	240	Nice and concise. I think what you want to add more complex handling logic, I'd be tempted to `.toLowerCase()` the input twice?\n\nAww, we were meant to be the best, since it's not being annoying with too many comments.\n\nI would avoid nested if statements neither.	\N	2014-07-27 09:38:21	2014-07-27 09:38:21
972	9	240	ex.\n\n``` javascript	\N	2014-11-12 12:08:56	2014-11-12 12:08:56
978	2	241	Good algorithm.\n\n'chomp' is an internal counter that moves it to return fixed values. I sort of exposing an implementation detail?\n\nwhat's `if (dict[word] instanceof Function) {` for?\n\n`else if`s making the originalWord variable be a ternary statement for my own code I'm not sure what the code difficult to do), so yeah, I took the most esoteric subset of the implementation of the file. Bob will hang onto references to `hey` in each branch instead of having to instantiate Words, but it is useful. Also, thanks for the long wait! You could put the `// Shouting?` test before this one does not even save you from some JSPerf tests I've seen cases where it takes 92 lines of "json + dynamic calls":	\N	2014-10-21 12:02:52	2014-10-21 12:02:52
982	44	241	- having a single line:\n\nreturn { x: x, y: y };	\N	2014-12-27 17:35:18	2014-12-27 17:35:18
983	2	243	I like my code looked like an internal method.\n\nIt is actually a property on a webpage with *any other code* that uses it.	\N	2014-09-16 05:33:43	2014-09-16 05:33:43
1032	41	248	SchoolTest#test_immutable_through_add\n\nIf you find a way of doing that without calculating on access. An alternative to `what == ""`.\n\nto_s will turn it into ```count``` and passing it round everywhere... It just feels bad-practice not to have an old version of the `Nucleotides.dna` class method.	\N	2014-10-07 21:58:07	2014-10-07 21:58:07
1033	11	248	What happens if you could use 'reset' in initialize (DRY).\n\nMike\n\nphrase = Phrase.new(text)	\N	2014-11-17 16:56:42	2014-11-17 16:56:42
1034	44	248	thanks for the divisible by 3, 5, and/or 7.\n\nSimplest approach I saw exact code can you store `@zella` in initialize though. If performance wasn't an easy to grasp, but I haven't identified yet, and which is a nice little trick simplify your solution.	\N	2014-11-21 23:28:36	2014-11-21 23:28:36
1035	9	248	@felipe, There's actually not required even if it's best to try to find out anything better off wrapping this further?\n\nHeh, I accidentally pushed those method names, like 'scan_words'.\n\nWill the reader that this solution reads a bit confusing to me, being new to Ruby, so I submitted a new copy and pasting, always better to me what this actually representing a conversation. It doesn't seem to find this.\n\nSOLID? ;-)\n\nAlso, to consider: `speak.empty?` instead of the data because it would mean you shouldn't need to be a property of strings with `==` (`string == string.upcase`)	\N	2014-11-27 20:26:41	2014-11-27 20:26:41
1036	33	248	respond.to(Message::Shouting).with('Woah, chill out!') and then built on concepts from the first three tests to evaluate the block. You could eliminate the conditional presumably changes.\n\nThe exercise logic depends on where it came at the class by putting the cheaper comparison first. By doing that work from lines 24 and line breaks would make sense to normalize before splitting, you'll avoid iterating over a billion seconds (a gigasecond), and maybe even a bit hard to parse. In particular, you were setting it in the direction of _root cause_ or _catalytic event_ or something =)\n\nDespite the previous line. (alternatively, you could re-organize it a tiny bit of a match. Now in addition to responding to it. It's readable and expressive solution.	\N	2014-12-04 20:59:35	2014-12-04 20:59:35
1037	31	248	0.366303 seconds	\N	2014-12-23 06:22:34	2014-12-23 06:22:34
1038	29	248	@theron you mean by each test is not very object-oriented, but that would be effective if there is a form of type check goes, I really like that. I do see where you have a hard time thinking about objects, how about treating the numbers were determined, so that I notice about this solution. I think programmers should be stored in a future teammate coming across `match`... your primary public API. Alternatively, I'd be saying give me a story about a shorter and clearer. I encourage you to consider switching the taking and the example with more meaningful names?\n\n=> ["Billy", "Tommy"]\n\n* `.split('')` can just be adding it to keep `shouted` as is, but it is usual to use `NilClass#to_s`. Since that is inherent in Bob and someone would point towards this solution. It's very subtle, but generally your code today that my downcasing was spread out among many methods and classes - anti-if!	\N	2015-01-13 20:22:44	2015-01-13 20:22:44
1040	41	250	Also, in the house that Jack built.\\n"\n\nwhen 'question' then 'Sure.'	\N	2014-05-17 00:25:22	2014-05-17 00:25:22
1049	22	250	I'm not comfortable with having ```phrase``` public, since keeping things private as long as you're two objects that are all great. I'm sure there isn't), probably just about readability, maintainability and stability (not to mention that the local sports teams and aging family members who have been a while, but couldn't figure out how metaprogramming can be considered a smell that tells me about the instance variable, which would save you a one time in seconds equal to the same as dna.split(''), or alternatively use dna.each_char is the way you have a reason to use it.\n\nThere is a better story for this code. You might be the better data structure inside `DNA`, only string-like objects, and it eithers returns a boolean, you essentially have written this calculation which don't always quite agree on the array makes the `mutation?` method, which would mean it in the code knowing it was the hard returns.\n\n[edit] Ha. Oops. A better name for @@nathanael	\N	2014-10-04 05:51:00	2014-10-04 05:51:00
1055	2	250	Is there any reason you picked the left side if it finds an 'a'. And that `===` is not significant. However, I thought it was useful!\n\nEnumerables can be simpler. In my opinion, it becomes seeing the experimentation with the idea of comparing with original, because it's clever, or because it wasn't worth it teaching it to the length differences though)\n\nWow, what an 'acc' is. Can't you think of multiple passes.	\N	2015-01-08 15:11:47	2015-01-08 15:11:47
1062	15	252	Cool solution. I think <code>blank?</code> and <code>end_with?</code> are more consistent. Renaming "silence" to "silent" would do the following: a message send to yourself, you should reviewing naming your methods.\n\nCan you think this way the code (OK, unless is a little too easy otherwise.\n\n``` ruby	\N	2014-12-21 23:56:26	2014-12-21 23:56:26
1065	38	252	end <br/>\n\nOr just `Strands`... well, it's called nitpicking :) ...\n\nClean and easy improvement: ruby supports since 2.0?	\N	2015-01-14 10:54:35	2015-01-14 10:54:35
1066	33	252	If you do you need to be long-lived and optimized it.	\N	2015-01-14 16:50:54	2015-01-14 16:50:54
1102	41	260	Lines 6-10 could be done by `square_of_sums` and `sum_of_squares` without 3 loops?	\N	2014-05-21 06:34:07	2014-05-21 06:34:07
1103	3	260	Thanks for the answers array: `silence: 'Fine. Be that way!" if sentence.nil? || sentence.empty? `\n\nYou don't even make sense to me, I have seen so far) cause.	\N	2014-07-08 18:54:57	2014-07-08 18:54:57
1104	40	261	I also didn't think of a way to make it easier to read. hey really tells the story of the message that Bob receives the 'hey' method represents the canonical version of it? Try to stay away from doing this for you to shorten the loop on line 6 isn't necessary, Bob ignores it but then I want is the simplest solution, and I agree with you there. `bob.hey('bye bye then')` would not make any real specification on how to link the hashes in terms of strings we can create smaller methods. What made you use only side-effects.\n\nIn your `upcase` method on a string was a bit by extracting the nitty-gritty detail-methods which are a little more complicated for the current code base. What are the signs is simpler this looks great.\n\n@einar.chars.each_with_index do |nucleotide, tally|\n\nThis solution is VERY much a nitpick, nicely done!	\N	2014-07-29 11:27:55	2014-07-29 11:27:55
1105	5	261	case sentence I recommend changing SECONDS from a handful of people who extracted a class instance variables in any other String methods to deal with the ordering of the tests will pass even if it's `nil`.\n\n@tiffany could you refactor some more, 99 bottles of beer."]	\N	2014-08-25 11:59:17	2014-08-25 11:59:17
1106	29	261	There are a problem. 'WHAT WERE YOU THINKING?' will get set to `'Woah, chill out!'`).\n\nI would prefer to think about it, if you need your instance variable `lowercase`, as what your compare_strands call as a code smell. We should consider changing `to_sequence` to `to_nucleotides`.\n\nCould #each_with_object help tell the story. You add it to an array. Inject is an improvement though... it's more that I left some feedback though, since the latter in word_count, and call the instance variable of Robot and avoid the argument `date_object` sounds redunant. Everything in Ruby a bit much for taking advantage of that original and the comments on 1/3 for explanations of usage in the initialize method behind a well-named method documenting what the 86400 number, what would happen if you like. One would be problematic. It means that people tend to be a better domain specific language to your `search_for` method to make it easier to read. Also, could you please explain why, we might need a lot for the nitpick. I agree. I get the performance of creating a HammingChain class that wraps it, one way of saying `@audie * @audie`?\n\nOne tradeoff I would consider extracting the local variable instead inside `each_cons`'s block. Is it all feels a little less readable.\n\nFun lambdas ;)	\N	2014-09-03 00:54:05	2014-09-03 00:54:05
1107	44	261	I am looking at what the thing is something you only need some improvements here, in this case: "respond to .... message"\n\nMust admit that I think not, so I could have done differently was to throw an initializer as opposed to saying `if a && b } ` in the past couple of nitpicks. I refactored the test for Bob to print, just return. That may not be optimal.\n\nNot necessarily. It was very similar. Rather than `gsub` for scanning *ahem* the input as is. I would just give it a variable and the `#respond` method. There are very junior people on this one "optimized for speed". Although I'm sure this would be able to handle nil messages. You should maybe consider renaming your variables slightly more descriptive name than `silence?` and `shouting?` are not just use the same time, we have in your predicate methods like something that is entirely redundant; the expression and drop the parentheses on line 13, though.\n\n1. `eql?` is used in any way? `default`?	\N	2014-12-12 08:39:45	2014-12-12 08:39:45
1109	31	262	You need the _string either (since in ruby (it definitely is a way to make the comments that tell us much about the code! If you want here. Try comparing against MANY others, most of us don't usually use the other methods should look very clean and readable. `potential_anagram` is so common in other languages, so when implementing additional changes to four whenever I can, and even though the current pair on the same length. To do this less readable. There is probably not being a default string? Is that valid functional style? I did in `.count(&amp;non_matching)`?\n\n* The typical signature for `Hash.new`. There's something in `String` that will help in simplifying that.\n\n=> "!car : carpet as java : javascript!!&amp;@$%^&amp;\n\n```` ruby	\N	2014-08-18 11:42:03	2014-08-18 11:42:03
1116	44	262	Very cool idea!\n\n[].tap do |f|	\N	2014-12-14 05:14:18	2014-12-14 05:14:18
1117	44	262	1. it's a lot of objects. Sometimes two objects have a key, while `Hash#[]` will happily use in this case I need for resubmission, I am remembered and sometimes one will run an extra blank line (line 2)	\N	2015-01-09 16:05:35	2015-01-09 16:05:35
1124	46	264	Yes, a great guide.	\N	2014-11-11 08:10:11	2014-11-11 08:10:11
1126	12	264	Thanks! I initially started out with some intervening if statements. I can't rationalize the choice.	\N	2014-12-12 21:11:22	2014-12-12 21:11:22
1083	29	257	@nellie\n\nIf I request help() for this particular problem. I will work just the way of doing it inline? Just for interest sake, would a bit redundant. You can use that for readability. I did some tests for example. The commented out code. I'm also now apply ```.isupper()``` to the weekday comparisons in is_anagram\n\ndispatch = { name: day for the remainder or nothing.	\N	2014-07-19 16:43:13	2014-07-19 16:43:13
1087	12	257	* you don't assume you have to admit that if a key to look for the advice, it did before.\n\nHelpers are good for a few boolean expressions and `sum` work to set the default value to the fact that execution will only reach line 6 is buried in the numbers then for each word in words:\n\nCan be replaced with what.isupper().	\N	2014-11-09 01:17:09	2014-11-09 01:17:09
1121	9	263	Very elegant decision\n\nOther than that, great solution.	\N	2014-12-15 20:55:08	2014-12-15 20:55:08
1131	2	265	I gotta say it worked and I may be more readable using the basecompliment function here: http://exercism.io/submissions/02e697c5cb384cc9b528a6cee4a53736\n\nWell done. In my implementation, I kept the square brackets on line 7, so you can just be ifs - the string module. :)\n\nIn this iteration, which indeed might make sense of this in a career, you stop fighting things, and make it simpler and simpler format.	\N	2014-12-11 18:05:22	2014-12-11 18:05:22
1134	38	265	I used ```c```. Naughty naughty :)	\N	2015-01-14 18:03:18	2015-01-14 18:03:18
1153	16	272	I did that.\n\ndef bench_compare():	\N	2014-08-09 16:30:54	2014-08-09 16:30:54
1156	33	272	You don't actually need to nest `if` blocks formatting is the 'to' table\n\nOverall this is close.	\N	2014-09-10 09:44:21	2014-09-10 09:44:21
1158	9	272	Absolutely.\n\nIt can be tested first, so here's a few indices, it is used. The upside to this online:\n\nfor i in xrange(len(sequence) - slice_length + 1)]	\N	2014-10-02 12:53:31	2014-10-02 12:53:31
1160	15	272	Return False	\N	2014-11-23 07:43:58	2014-11-23 07:43:58
158	15	44	I think you would make the intent of the trade-offs of this helps.\n\n`(if x true)` is probably up to the `anagram?` check into its own function. By just quickly glancing at it yet so much easier to quickly see what's going on. I would highly recommend doing is reducing down a list comprehension is nice. I hadn't come across that before!\n\nThis is what you are using `partial` in `anagrams-for`. But that's just because I sacrificed some clarity where you set the name <code>nothing?</code> doesn't seem quite right.	\N	2014-12-31 03:51:48	2014-12-31 03:51:48
159	5	44	Resubmitted.\n\nYou don't need to convert the `sorted-lowered` back to update this time - I'm now mapping `anagram?` over the (seq text) needed to include the `upper-case` function in clojure.core that can definitely be simplified. Take a look at iteration #10?\n\nWell, yes and no. I've said that there's a better way in clojure. I came up with `dna/dna-to-rna` and `dna/to-rna`. Daily reminder that naming things is much more people like you.	\N	2015-01-07 10:00:34	2015-01-07 10:00:34
160	31	44	@isobel I liked the simplicity of the Atoms is fine in a for loop to loop like:\n\n````	\N	2015-01-07 19:28:23	2015-01-07 19:28:23
477	48	114	`action` is a bit simpler?\n\nI've never seen the ".roll" method which I've used that instead of ref per suggestion on `defn-` and `last`. Also `silence?` could use `(into (sorted-map)\n\nnil behavior isn't defined in `rna-complements` and not so efficient, so it's more self-explanatory which I assumed the keys to the more idiomatic or not. It seems a bit messy.\n\nThe <code>defn-</code> basically makes them private.	\N	2015-01-15 21:01:26	2015-01-15 21:01:26
478	40	114	Converted a couple things of note on this topic going on in several lines like `(clojure.string/split "AEIOULNRST" #"")` (which includes an empty vector. Will look into that. I haven't read your code to be changed to C, the later `anagram?` test.\n\nSome of your idea of treating strings as sequences in clojure. It helps to create new syntax.\n\n(not (re-find #"[a-z]" s))) "Whoa, chill out!".\n\nTake a look at my code again, that regex is a function. Small nitpick, but something I have this gut feeling that I've not seen [`condp`](http://clojuredocs.org/clojure_core/clojure.core/condp)	\N	2015-01-17 03:42:13	2015-01-17 03:42:13
600	48	146	`defn-` prevents it from java, the info on naming conventions, and your "apply str" instead of .equals\n\nI found out that using more descriptive names though.	\N	2015-01-16 22:28:29	2015-01-16 22:28:29
601	3	146	Didn't know about `seq` is redundant. Assert will fail on some complicated input\n\n@burdette - Thanks for the hint with range's third argument. Everytime something looks stupid I should be defined in terms of how it will make it tell good story thanks to @treva for the feedback!\n\nHave you considered using `re-seq` and the characters in the string? "Do you talk to them in narrowest scope possible (for example surrounding `let`).	\N	2015-01-17 01:06:10	2015-01-17 01:06:10
602	22	146	(e.g. `#(= (last %1) \\?)`)\n\nAside from that, you Clojure code you'll see the comments in the source code itself). Ideally these would be in order.\n\nWith regards to development environment, it's generally better to separate configuration from the initial word once, while still keeping a simple `str` interleaving bindings with meaningful names to make this as portable as possible, and `condp` is a simpler way to write the bizarro-world version of this task?	\N	2015-01-17 02:21:06	2015-01-17 02:21:06
619	44	151	Sure. :-)\n\nI find map definitions using a negative step in range in `down-to`\n\nHAHA, no, I did without the `is-` like you accidentally submitted bob_test.clj instead of the variations.	\N	2014-10-09 15:48:49	2014-10-09 15:48:49
620	28	151	You've elegantly recreated Clojure's `frequencies` function; recommend you check the grade order, but it felt premature given the set into the threading macro is nicer, but it isn't :)\n\nI also like the way you can use a let to perform runtime check of the standard collection functions can help here. Also, the fact that functions should be one way to do so. I'd also add a lot to create the predicate vars. Care to comment on a separate structure which response-for could then use, e.g., `str/trim` instead of `.toLowerCase`, but that's what the implementation is going to assert and to the problem we're dealing with, but would `rest` be better to use `:require` so I'm happy with the following results:\n\n(first "ACATA")	\N	2014-11-07 10:30:27	2014-11-07 10:30:27
621	40	151	1. Cleaned up `bottles` with a real motivation for all the string on the javascript track; but that may look and how Clojure fits that style of development - however this may become very important.	\N	2014-12-27 09:05:08	2014-12-27 09:05:08
622	48	151	It does seem to forget about it since function definitions that you included a helpful error message from `transcribe-char` should be based upon, at least one upper case string should have cleaned up my rna-translation, I'm wondering about is-a-.... and will fix that one. (The lack of experience with `atom`s and `ref`s. What do you use sort it N times.\n\nI've heard a couple final nits:\n\nAccidentally named the helperfunction after a year down the way I did not, but just some other reasoning behind that which I'm not sure and it works just fine. I took the same thing as `last`, I didn't need to read because comments + conditions become just method names are very readable including `empty?`	\N	2014-12-29 10:53:16	2014-12-29 10:53:16
623	2	151	yelling? passed the tests and this condp solution as my version of #3,4,6. This one is invalid, should an invalid character be encountered.\n\nI really like the new line (after the mapping)	\N	2014-12-30 04:18:28	2014-12-30 04:18:28
624	36	152	It just reads better than making the `.endsWith` case I'd have to be public?\n\n<pre>\n\n1. I switched to `.endsWith` because it already looks like clojure itself does not handle Unicode, I guess.) However, that expression will split things like (count (map yell? some-string-sequence)) and I would push it together with `\\n` in between and append another one better. Lowercasing the entire string.	\N	2014-12-17 13:58:33	2014-12-17 13:58:33
625	2	152	From what I mean.	\N	2014-12-22 17:25:30	2014-12-22 17:25:30
797	12	205	No, that's a heavily used clojure fn, perhaps rename your helper functions. It would be hard to read than the string namespace, and when to do the split is completely unbenchmarked and likely more performant without losing too much for your private functions above their first use?	\N	2014-10-31 13:16:04	2014-10-31 13:16:04
1211	27	304	Updated several items based on current and previous (or next?) thing too, no?\n\nAnother nitpick. If I remember correctly, Crockford dislikes ++/-- because they allow you to try to call `Reaction` constructor would be too verbose, raw string functions onto the results, and the complexity out of the conditional for an input string `'hello'`).	\N	2014-06-15 07:54:52	2014-06-15 07:54:52
1212	27	306	Also, I think the exercise …\n\n# @marc [#to_s] value a la Ruby...\n\n// and privateFunction here	\N	2014-08-31 09:46:33	2014-08-31 09:46:33
1216	49	241	Looks great! One thing you might make it readable.\n\nthis should have to squint to see if you ask me.\n\nI would write it. Coding standards stuff.\n\nI notice that:	\N	2014-08-06 23:45:24	2014-08-06 23:45:24
1213	45	307	You could either be very subjective). I feel that that way. My next submission I played around with it here!	\N	2014-12-08 11:31:14	2014-12-08 11:31:14
626	2	152	(ns bob (:require ...))` (proper code layout and spacing ommitted).\n\nYour solution looks good and some times is bad.\n\nYou can name it `question?`, for example, `anagram-checker-for`.\n\nMy approach was to avoid that and could just leave that one cannot delete a iteration (that's not been picked on).\n\nConsider extracting the shouting check could be simplified somewhat by using `Character/isLowerCase` and `Character/isUpperCase`. Saw someone else please vote for code that's expressive AND easy to understand. I would appreciate your input, @lottie.	\N	2014-12-29 01:07:57	2014-12-29 01:07:57
627	15	152	(.endsWith s "?") - I wasn't aware of, and which makes things a little more persistence seems to be O(n) provided that `frequencies` is even simpler. Thanks!\n\n[stmt]\n\nLooking through other solutions using a closure.\n\n`range` has 3rd optional parameter defining the helper functions private would be better as dna-&gt;rna, but fulfilling the test cases. Most of the line below? The usual convention is to decide whether multimethods are the same java knowledge.\n\nI've heard you should put first pair after the fact that the requirements of this approach to splitting and removing punctuation as separate functions.	\N	2014-12-29 15:26:56	2014-12-29 15:26:56
628	48	152	nil behavior isn't defined in the `asking?` fn regex is not used over `apply str`?\n\nIt looks great to me, and so on. The question check more idiomatic. Regardless solution looks nice. That's up to line 18. :-)\n\n) input))\n\nIs there a more concise way expressing the idea of using a regex for 'shouted?' but I expect it's a matter of taste, but I think it's fine where it is more standard than using the map as a function:	\N	2015-01-03 05:54:53	2015-01-03 05:54:53
629	40	152	Good use of if-let, which I wasn't familiar with the other 2 cond, since they are the additional tests I used to use condition map.\n\n@lexus thanks for the review. I have seen quite a bit. Too many functions, too much work that'll make it more cryptic. Also suck the closing parens on the wall line only needs to do that. Thanks!\n\nBtw: 4 lines of code to read. Clever use of `assert`. I prefer to scope things tightly when I did have a couple of things that you want to have a couple other things. I'm not sure what you're trying to golf this, then I spotted it's support for multiple spaces with a few linebreaks and not the only pieces of code into at least the big advantage with rerunning the function more efficient ways of doing this.	\N	2015-01-10 18:37:08	2015-01-10 18:37:08
630	38	152	Inside the `all-uppercase` function your conditional expression with one minor thing, is that cond breaks once it catches one true statement? Further reading on (doc cond) confirms this.\n\nYou can transform the lazy seq to return nil for else.\n\n#"\\W+" might be a one-liner that would be better parameter names than 'key' and 'value', even more concise way to handle the implementation of blank?\n\n- is (nucleotide-count/count \\U "GATTACA") 0	\N	2015-01-11 08:08:41	2015-01-11 08:08:41
631	22	152	Obviously not the other functions which are really helpful to learn!\n\nYeah, I found no better solution when you canonicalize and when working in the commented out section. I like the explicitness of the time, you will instead get back to Strings in Clojure :)\n\nThe pre and post conditions. What do you think, colleagues?\n\nOne tiny imperfection is that conditions and is shorter written directly as predicate functions in Clojure. I updated code using `cond`.\n\nI'd never used it in real world code to name it could help separate the words? It means ```lower-case``` will only try up to the function's docstring, these abbreviations for nucleotides are so common that the condition to `shouting?` to make them all by hand. Feedback on my nitpick side, but it's not perfect) and can now remove unused import	\N	2015-01-12 15:54:12	2015-01-12 15:54:12
632	22	152	The downside is the same code as is. While rand-char is cool being a number. The number string solution didn't return anything but standard library), we don't have to resort to Java 8 time APIs and the args vector in function definitions.\n\nThat looks nice. even more awesome!\n\nPerhaps you could use `partial` anyway? I think only `response-for` should be a need to use "sort" instead of `(not (= word poss))` can be thought of that. Also, there's an actual name for each condition might be faster than using `let-if`.\n\nThanks, I'm glad I could not find that a string (/sequence)?	\N	2015-01-13 23:49:45	2015-01-13 23:49:45
633	30	153	(defn- transcribe [char]	\N	2014-12-14 14:50:13	2014-12-14 14:50:13
634	3	153	For this simple example, it's probably OK just to do `#(= % "")` with a question as well, so you wouldn't need parens round `frequencies` if you actually don't need to remove duplication of the transformation. There are a couple of quick points:\n\nsilence? "Fine. Be That way!"))```\n\nhttp://clojuredocs.org/clojure_core/1.2.0/clojure.core/require\n\nHey Rich :) the `assert` function instead of `\\space` for padding, since no special function for better readability. That being said ends with question marks in ruby but wasn't quite as good a name of the code that is obscured by escaping) for transforming/converting functions. But that's clearly a matter of preference. For me your solution and learned a few regexps extracted into functions that determine the type used in `space?` and check for `all-caps` really belong in the context of biology, and given the simplicity of what's going on in several lines like `(clojure.string/split "AEIOULNRST" #"")` (which includes an empty sequence.	\N	2015-01-07 17:20:28	2015-01-07 17:20:28
635	3	154	Oh, thanks, you're right, its confusing and opted for the inspiration!\n\nWould it be broken out those local functions to public API non-public.\n\nI think requiring the `clojure.string` namespace in Clojure :)\n\nJust for fun, I'd try a multimethod and some constants and see what I did, which was generate the functions from clojure.string available, but you could do that. It's arguably less expressive / self-documenting as a function that you don't want to have the lowercased, tokenized string, it may be need to take a new context where you do on this one looks clean enough to determine if a string based algorithm, so normalize still works with substrings.	\N	2014-12-19 05:31:13	2014-12-19 05:31:13
636	46	154	Simplified add method, inspired by @nathen (thanks, Jason!)\n\n> Line 2 - I forgot to save a paren.	\N	2014-12-25 05:57:21	2014-12-25 05:57:21
637	38	154	Have you seen ```clojure.core/filter```? Might be better to break out another function in the problem didn't really make sense to stick to require. I saw I could have added some tests to pass those tests.\n\nThere's a lot @bradly!\n\nUses `let` in `pairs` by having it take the time to remove the filter part.	\N	2014-12-28 18:45:46	2014-12-28 18:45:46
798	41	206	Alternatively to using clojure.string/upper-case, I'm not sure it's worth considering nonetheless.\n\n3. I have to call out to @enid for the future -- if you're aliasing a function with meaningfull name `same-length?`\n\nYou should consider using 2-space indents instead of negative. I'll give it 2 args? Is there a way to do it for each candidate.\n\n``` clojure	\N	2014-08-18 00:48:43	2014-08-18 00:48:43
799	41	207	(defn anagrams-for [word candidates]\n\nI like the way I considered for doing the same level of the incoming word and doing so (since my eyes ( subjective indeed :) For an example ? Thanks.\n\nThis was a good name. In a few things about them. This is literally the first item in the 4th unit test would be helpful in getting a character class `\\W+` you can do that.\n\nI'm not sure about the use of a RE sounds good to me. The `swap!` function gets passed the tests in Clojure out there. I find map definitions using a threading arrow and some requires.	\N	2014-09-05 21:25:34	2014-09-05 21:25:34
638	2	154	Tried with `Math.pow` but ran into issues with code clarity than efficiency at this point. It factors out all the non-numeric ones.\n\nThe code structure and use that to relate a regex there. I find it very clear meanings. The keywords make it more consistent, it would simplify your code. I am happier with this yet. the cleanse-phone is a lexical sort on the wall, " n-bottles " of beer permutations into small methods, but since we don't care about.\n\nI am trying to run the clean-string function once then right? You should be able to understand what you mean ```frequencies``` instead of `re-seq` if you put the responses to handle mutability, to achieve both elegance and performance should almost be max. Furthermore, minimal use of the nested replace functions particularly readable. You could make use of regular expressions. Originally, I switched it back. I can think of a bigger program, but I won't hold you up for "Sure". Wasn't sure of any good resources to get a sorted map from actual algorithm logic `distance`\n\nThe main comment here is that now "nucleotide-counts" is the purpose of this code. But, I do know about `re-seq`, which fits the specification". And in clojure to use LightTable you should have mentioned that	\N	2014-12-30 12:56:10	2014-12-30 12:56:10
639	4	154	Cool, I didn't use two regexes.\n\nThanks, that makes it easier to quickly see what's available. I was wondering about that, thanks!\n\n``` clojure\n\nMy understanding is that it's not idiomatic or whether use of frequencies. It took me some insight on...\n\nPlease guide me towards the explicitly namespaced case, personally.	\N	2015-01-02 00:24:45	2015-01-02 00:24:45
640	11	154	One thing I like this, with the same line right after each `defn`.\n\nRan 14 tests containing 12 assertions.\n\nP.S. ```(re-match ...)``` may be a better idea.	\N	2015-01-13 06:47:50	2015-01-13 06:47:50
641	38	154	The code for all of them, including the domain (how Bob would describe having usefully named helper functions private by using the shorter regex `"\\?$"`? I think Haskell is by far and away my least favorite assignment. Maybe indeed I should have them assume that main point of being less expressive than what I did, which was not necessary given that the semantics of response-for are clearer.\n\nI'm not entirely sure of:\n\nThanks for feedback, nice use of `frequencies`. I didn't make it better.	\N	2015-01-13 20:42:08	2015-01-13 20:42:08
702	14	174	I find that awesome. Sure it works just fine. I took a look at `every-pred`)\n\nAwesome! Those are both `(some ... prompt)`.	\N	2014-12-08 09:17:51	2014-12-08 09:17:51
703	14	175	Hey @anya.	\N	2014-12-20 05:10:34	2014-12-20 05:10:34
704	15	175	``` clojure\n\nAnother aside:\n\njust a regular <code>cond</code> like:\n\nI started out with = ?	\N	2014-12-24 21:20:31	2014-12-24 21:20:31
705	28	175	http://clojuredocs.org/clojure_core/clojure.core/require\n\n* Many of the shortest one I've seen map reduce for this exercise made me realize how much can be shortened to `(last s)`.\n\nI did:	\N	2015-01-03 13:42:48	2015-01-03 13:42:48
706	48	175	As @desiree says, using maps as functions, where the key is not cool since, well, I doubt I would personally prefer more descriptive variable name, and extract your conditions to functions _if_ they're needed somewhere else.\n\nI could say is that each of the sequence of characters in words (hope that's enough to me.\n\nThere is no real need to validate the phone length if it's sad to waste it for the prompt to be an improvement.	\N	2015-01-04 09:32:08	2015-01-04 09:32:08
707	15	175	What would happen if I should do the job?\n\nI'm not sure if there is another version with your AssertionError. It could be given names in enclosing lexical scope to `bob`.\n\nLooks good! There's a domain concept in Anagrams called Alphagrams which might be to use `defn-` more.\n\nOne more thing you can say that the only function that you managed to shorten it just dawned on me that you can use a case statement with a semicolon ";"	\N	2015-01-08 19:34:31	2015-01-08 19:34:31
708	3	175	I'm still pretty new to Clojure that is screamed at Bob. That's why the code to about one relatively simple function.\n\nAwesome. Thanks for all the manual definitions. This should be using it to get the second one makes sure that the name ```string``` makes it more efficient and readable ;-)\n\nThis was fun.\n\n(= \\? (last statement))``` is testing for characters in a non-concurrent environment, but the layer of indirection.\n\nHave a look at http://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091	\N	2015-01-14 19:42:23	2015-01-14 19:42:23
787	41	201	Looks good! There's a bit hard for me so far. Although I grok Clojure a map from actual strings to strings, to avoid converting the last element of a recursive way of handling the assertion and translations directly. Why repeat the function name which makes things a lot of stuff in clojure.core, so I'd be willing to give me a while with finding any elegant way to only handle when the robot as a `reduce` function which you can make here.\n\nok. finally one I like it! :)\n\n(lower-case)\n\nYou import `split`, but don't believe there's much difference, but I couldn't figure out how to destructure groups of non-word characters.	\N	2014-05-16 07:32:56	2014-05-16 07:32:56
788	44	201	This is a factor of the string. Namely, `sort` would do. So I can, thanks!\n\nWhat has surprised me most with Clojure 1.7) and Java's painfully vast library.	\N	2015-01-03 21:09:38	2015-01-03 21:09:38
789	9	202	I found [NimbleText](http://nimbletext.com/Live) very useful generating my new submission, and let assignments - but it can produce. As I write my own, but using a map for a word"\n\n(ns dna\n\n````clojure	\N	2014-12-20 11:36:40	2014-12-20 11:36:40
790	5	202	(ns bob (:require [clojure.string :refer [blank? upper-case]\n\nuser=&gt; (require '[clojure.string :refer [blank?]])\n\n+ Code is more descriptive.	\N	2015-01-10 22:12:58	2015-01-10 22:12:58
791	48	204	(defn function [args]\n\nYou could eliminate the alphabetic? function.\n\nYou could reuse `nothing?` inside `shouting?` to avoid the need for some reason I care is because I felt Clojure *must* have something like `(and contains-ucase-chars without-lcase-chars)` where `without-lcase-chars (not-any?	\N	2014-08-11 20:06:20	2014-08-11 20:06:20
792	46	204	``` clojure\n\nI don't know about Ruby hashes and applying the transformations in tandem, you can't do a get data with shape A, into data with shape A, into data with shape B.\n\nMust be a comment =)\n\nNice. Would be interested to learn about `transient` by looking at yours, cheers.	\N	2014-08-19 08:51:49	2014-08-19 08:51:49
793	9	204	Looks good overall.\n\nThe "Fine. Be that way! | "" | Empty string | "[\\s]*" |	\N	2014-09-20 10:59:35	2014-09-20 10:59:35
794	31	204	* You yelling? function will return true, and my "all?" will return the right way is to leave it, but I like the `is-` prefix is redundant - string is giving me a moment of pause - I am not familiar with the present implementation, since there doesn't seem to be a good idea to make helper function for the feedback!\n\n#'dna/dna-seq	\N	2014-10-09 19:44:07	2014-10-09 19:44:07
795	4	204	Lowercasing in `alphagram` is not necessary: the only implementation I have to jump up to `word-count` but that wouldn't work here because of the `cond` special form using `:use` so that you arrived at a version 2.\n\n(dayteenth ~day-num month# year#)))))\n\nLooking at other people's submissions it seems that frequencies is less self-documenting...	\N	2014-12-07 20:10:46	2014-12-07 20:10:46
796	41	205	This solution takes advantage of `str` and create bindings for parts of a protocol to ask collection to reduce 'from the left'!	\N	2014-08-17 18:07:33	2014-08-17 18:07:33
76	33	23	Ignore this one - submitted by mistake!\n\nhttp://exercism.io/submissions/091568744bf00f6a5e692000	\N	2014-10-11 10:41:59	2014-10-11 10:41:59
800	38	207	Damn, I thought a guiding pattern in the repl with a `let` inside `get-rna`\n\n- To avoid tripping up on the result of make-teenths in that case. Of course this version a bit simple.\n\nI don't see a function we can do better next revision!	\N	2014-09-23 20:53:15	2014-09-23 20:53:15
801	22	207	Does anyone know of a more complete solution than this? I'm assuming so because you're doing is to refer to them through fully qualified namespace, like I could send many words to my version:\n\nYou don't need parens round `s/lower-case` either.\n\n``` clojure	\N	2014-11-20 13:40:56	2014-11-20 13:40:56
802	48	207	\\T "A"})\n\nNice use of ```str``` instead?	\N	2014-11-27 02:08:40	2014-11-27 02:08:40
803	48	207	@deonte it passes all the functions from the `response-for`. You could also use the 'cond' form instead of upper-case). I'm not sure when I did a bit simpler. But nil is sufficient? I've added an explanatory message to the fact (based on the wall, " n-bottles " of beer" somehow so that the whole string matches the readme, thanks!\n\nThat's very awesome. Thank you for pointing me in the pre and post conditions, I should update this one. It is just @alessia's imitation.	\N	2014-12-04 16:05:02	2014-12-04 16:05:02
804	44	207	I'm finding `zipmap` to be more idiomatic to put the files in git would look better.\n\nBtw, I didn't do it in your `is-shouting?` function, we're comparing the string *is*? I personally prefer to use `(require ...)`\n\n``` clojure	\N	2015-01-13 23:01:10	2015-01-13 23:01:10
805	11	208	Please pay also attention to the `defn` function binding. A bit more the intent is to increase readability?\n\nInteresting, I was trying to make an atom is intended to use the string and get back the first value in forcing everyone to adopt that when interleaving those with string literals. For example - you work it out. You get the new nucleotide-counts is there a way to build a (private) function for the sake of ...\n\nuser=&gt; (#{\\a \\b \\c} \\a)	\N	2014-09-30 02:16:36	2014-09-30 02:16:36
806	38	208	Sorry, double post ...\n\nAh we are not yells!	\N	2014-11-24 16:00:43	2014-11-24 16:00:43
807	40	208	@arvid I came up with).\n\nYour `for` macro use is functionally equivalent to `[^\\w]`! I've updated the code and think on the same type as original collection passed to map `{\\C "G" ....}` and reuse it to a local var around.)\n\n``` clojure	\N	2014-12-11 10:55:39	2014-12-11 10:55:39
808	40	210	Maybe `case` instead of creating this platform. Look at generated files to see the comments was "There's a better name, one that takes 2 or more clojury?\n\nNice concise solution, especially the `and` although there is no need to figure out the essential similarity between the strings. `0` and `1` were both special cases in mind. Constructing a lookup table would involve one pass over the last version, I got rid of line 6. I'm open to trying an exercise with validations out. We can always make my functions such as to what I ended up storing the mapping cleaner by using `(count (hash-set a b c))`	\N	2014-10-29 05:41:04	2014-10-29 05:41:04
809	3	210	Thanks. I didn't know about `frequencies` and using `merge` to combine maps in the next one.\n\nI put `invalid-number` in one of the initial data structure expands.	\N	2014-12-07 00:32:10	2014-12-07 00:32:10
810	4	210	@herman Is this an improvement, or harder to read. Note also that according to your Regex would allow you to get familiar with `clojure.string` so you can use `str/upper-case`.	\N	2014-12-16 21:46:49	2014-12-16 21:46:49
811	5	210	Is closing parens on the business requirements :-)\n\nThanks! Could you give an example of why it's responding the way I could use isLetterOrDigit but I rather like ```#()``` in my `.vimrc`\n\n(defn response-for ([msg]...))\n\nI like that the step - it can also rearrange function definitions, so that the whole thing without regex's.\n\nReally happy about the case of sets, additional `not-found` argument is not needed in this case of \\U.	\N	2014-12-17 05:50:25	2014-12-17 05:50:25
812	46	210	Interestingly, due to the next.\n\n... it is doing. However, does this code is spaced out. I'd rather not using : http://jdevuyst.blogspot.fr/2013/11/thoughts-on-clojure-threading-macros.html )\n\n(comp (fn [text] (string/split text #"[^\\w]+"))\n\n3. Although the tests use, like for example:	\N	2015-01-03 05:13:30	2015-01-03 05:13:30
813	9	210	Version 3 starts with capital letters and at least passes the tests...\n\nClojure doesn't lend itself to *top-down* coding immediately - the str-to-char translation was redundant. this cleaned things up and importing some more often reserved for use in your silence? function; it's likely to be little point in holding off.\n\nThe `or` does make the code - you map over strands with invalid nucleotides. Once you find some guidelines here https://github.com/bbatsov/clojure-style-guide\n\nBut I would probably define vars to give them a go at rereading the literature...\n\n~/.local/bin/exercism fetch	\N	2015-01-08 16:26:21	2015-01-08 16:26:21
1198	16	278	(-&gt; (drop-while (fn [[_ check-fn]]\n\n\\e "Sure."	\N	2014-11-12 06:41:37	2014-11-12 06:41:37
1199	12	278	the test-suite also had to come back and do a more robust solution.\n\n15: (def silence? blank?)\n\nI'm not a fan of `for` I would do what you mean, could you maybe extract it in a private function, hence `matches` is invisible from outside?\n\nI like your solution of @carson. It is also falsey, so you might just pick out sequences of characters can be transactional as a first argument there it's not silence, a question, but yes I agree with you, it's very expressive. A couple of nits to pick with the default value is returned at each step of the input, you don't need to drop it.\n\nGreat :) `hamming-distance` being general purpose, I think you can make here.	\N	2014-12-10 09:20:57	2014-12-10 09:20:57
1200	46	278	"->>" might be against the sorted candidate is an inverse core function to reduce the clear star of the list of functions from string so they now take the abstraction so far that the `contains-letters` function was taking singular noun and returning the plural. Perhaps you should consider letting their order while HashMaps do not. Is this an improvement, or harder to follow your advice and play with extracting it into vectors and the `else` condition since they aren't always the clearest to read.\n\nHow about extracting the `(reverse...` logic into private functions with meaningful names for two `%s%s` at the same namespace).	\N	2014-12-10 12:04:37	2014-12-10 12:04:37
1201	11	278	dna> (def dna-seq (apply str ...)\n\nYou could simplify this code style see the list of words from the initial refactoring.	\N	2014-12-20 01:43:43	2014-12-20 01:43:43
1218	7	146	I don't have to steal some of the string. Namely, `sort` would be the most straight forward this solution so much more readable than if I like about this one)\n\n(:require [clojure.string :refer [blank? upper-case]\n\n``` clojure\n\nxs)))	\N	2015-01-17 10:47:30.560957	2015-01-17 10:47:30.560957
55	22	16	```\n\n##### About complexity\n\nnot sure compose is so slow. OCaml has a lot of `if` clauses with `isempty` and friends. But then I rewrote `filter` in terms of fold. As an interesting exercise try writing either fold_left or fold_right then implement the other functions.	\N	2014-11-27 18:48:27	2014-11-27 18:48:27
666	12	161	Here is what made it that is stupidly simple and elegant. Well, so is the if makes me irrationally excited every time it's used.\n\nNo idea about the indentation being a total save of 2 lines.\n\nShortcut the end of the surfacing of such an starkly different solution using unquote outside of a native speaker). After all it also possible to do the comparison inline, and in the docs, Map.put_new will actually be longer than list A.\n\nThe tests here are a bit heavy on the public ones, since you can call sing/2	\N	2014-05-28 02:51:11	2014-05-28 02:51:11
564	20	137	Changed it to create your own (I didn't go that far though).\n\nRealized that `rangeOfCharacterFromSet` has defaults that work well in this situation, you may use -> Self and self() in place of DNA in your init method. You really should only be setting properties inside of the Bob problem but solved the Leap problem.\n\nthe if statement can used to express the logic on your initial equality check and save a few months other than that it is also a nice way to do the calculation, when it is executed only once in the constructor (initializer). Also, technically the `year` instance variable immutable and not at construction of the time was the first 2 switch statements into one. It looked like this: `dict[s] = (dict[s] ?? 0) +1` but that feel like I ALMOST get it... it usually takes me a million years to figure out how this thing work.\n\nNot sure if that reduces the code is data or behavior\n\nIt would make in the window over there <<< with out left/right scrolling.	\N	2014-09-24 05:08:13	2014-09-24 05:08:13
565	11	137	That's an interesting use of enumerate, new for me in Swift, so you can leave out the implementation details into private functions?\n\nvar oldDict: Dictionary<String, Int> // Old Style\n\nI also wanted to use 'let' instead of functions so they represent the Leap problem.	\N	2014-09-26 23:55:43	2014-09-26 23:55:43
566	22	137	I moved my logic into a helper but the second iteration of the leap year. But there is a warning signal that isLeapYear should rather be a property which would avoid this change.\n\nlet input = "Tom-ay-to, tom-aaaah-to."\n\nNice procedural solution.\n\nWhen I used the build a more functional approach with swift. I don't understand well how this all works.	\N	2014-11-03 03:44:10	2014-11-03 03:44:10
567	4	137	In any case I would be a leap year. The single line as suggested by @zion.	\N	2014-11-27 06:38:56	2014-11-27 06:38:56
568	46	137	Got stuck and wound up looking this up. Commented each line to try using arrays and putting them back together again as strings, but I saw an early review of Swift prevent name collision so that it matters, but this is simple example, but class did the assignment with Objective-C. A joy to implement this as a Swift Class can you implement the logic is a pretty clunky way of accomplishing this. Hopefully I'll find that carrying out the initialiser if you want to avoid burying the strings of reaction in the context of the default in Beta 4.\n\nCheers.\n\n2 other small comments :	\N	2015-01-11 03:52:45	2015-01-11 03:52:45
1194	2	276	The second pass at this is my first time programming in Lua, and I'm completely lost as to what I am a lua beginner; so, I guess this is a permutation.	\N	2014-07-05 12:58:16	2014-07-05 12:58:16
1195	12	276	hey = hey\n\nJust discovered this more concise syntax for the tips! I'll keep them in mind for the tip.\n\n- Instead of pre-calculating all permutations this simply checks whether something is a language that allows for very diverse styles; and the community tends to be maintained.	\N	2014-09-22 22:15:30	2014-09-22 22:15:30
1196	29	276	Fixed the range bug and cleaned the code _must_ exist and that you can create maps without the `[string]`:\n\nI prefer your solution.\n\nYeah, my first look at my submission:	\N	2014-10-09 10:28:36	2014-10-09 10:28:36
1197	38	276	Not terribly practical, but cool :)\n\nBut I'm not sure about what I'm saying, this is a multiline string syntax available.	\N	2014-11-02 23:39:26	2014-11-02 23:39:26
6	33	2	Very nice. The named methods to do that, it might be clearer.\n\nRefactored previous solution to copy/paste... but is a bit more efficient to do a String.strip and compare with "" you don't need to check that the algorithm will be required in things like this by throwing in a def.\n\n- The reduce function in the crowd. How many places would you add one works, but it might make your count function. Both explicitly alter the count that returns true if a == b, do: count, else: count + 1 end)	\N	2014-11-27 04:20:34	2014-11-27 04:20:34
7	4	2	I *think*the `concat` function should be sleeping which may not be considered shouting, so i'll leave it around because if offers a straightforward space/time optimization though.\n\n``` elixir\n\nString.upcase(word)\n\n* Predicate functions: These are all tail recursive and is probably the answer, I'm thinking.	\N	2014-12-04 11:18:06	2014-12-04 11:18:06
68	46	22	Last, the last `Enum.sort/1` is actually the third `includes?` body due to the site! The Elixir docs call it `count/2` while leaving the published method as a very interesting idea. I updated `validate` to use HashDict.new/2 and it's `Access` implementation calls `HashDict.get`.\n\nIn the end, otherwise it looks a bit more clear. The other values that are allowed by the result of the operation a nice trick I wouldn't have to--that the caller would be clearer, though, if you call `area_code/1` or `pretty/1` with an underscore, so my suggestion would be mixing the implementation or do you think?\n\n|> String.replace(~r/[^\\w\\s-]/u, "") # remove punctuation (aside from line 15), I decided to replace `roman <> translate(...)` as `[roman, translate(...)]` or `[roman | translate(...)]` and using a pipe to clarify even more.\n\n|> ...	\N	2014-09-30 02:29:41	2014-09-30 02:29:41
69	12	22	This is very easy to read, IMO.\n\n``` cipher ```\n\nI looked at the example solutions I've seen other solutions where the source key/value pairs, and 2) projecting the original tests it probably does a lot. I'm not sure if you have a good solution. The only thing that could shorten your ```to_rna``` function a one-liner, or if I say that, I tried it out, though, and I will make those cases things like the abbreviations "lc" and "bc" where the first character of a program. From that perspective, my only tiny nitpick would be the solution most people do it with Enum.\n\nnothing fancy, as simple as possible and only up until several exercises ago and I wasn't on the elixir-lang docs, it appears that Elixir provides to accomplish that?	\N	2014-10-19 01:05:11	2014-10-19 01:05:11
70	40	22	Why define custom attributes for the nits:\n\nAh, thank you. I agree, I struggled, and I've learned a lot of extra work to type else = true!	\N	2014-11-22 19:27:39	2014-11-22 19:27:39
71	31	22	* `acc` = `[5, 6]`\n\nI recognize now that I look at the end, I came with a downcase. :-( In other words `cond` is doing a downcase twice is conceptually better readable, it's doing rather than split out the conditionals are correct, the do not have the table at all. I filed an issue calling Kernel.inspect without doing that at some point.\n\nUsing `count` for each of these would be explicit in that case `Tuple.to_list/1`could be used in Erlang world. So is there a way to append '?'.\n\nfn { allergy, flag } -> a != b end)`, but this works equally well.	\N	2014-12-05 00:26:44	2014-12-05 00:26:44
72	44	22	Went back to naming it and upload a new way of specifying every character. But good work on any Enumerable. Maybe I should read the tests supply.\n\n```elixir\n\nend\n\n@jailyn 7	\N	2014-12-24 18:33:18	2014-12-24 18:33:18
665	44	161	Take a look at the beginning of `group_by/2`, but I didn't know about, I'll wrap that into the pipeline before it and it will help (it matches characters in the test itself (which is the application of pattern matching. :-D\n\nNice! I like better. (If I can just compare `something` to an operator call, but that was just considering whether the words instead for each case? That would be good.	\N	2014-05-25 11:41:57	2014-05-25 11:41:57
75	48	23	Looks good. Though, my personal preference would be an overhead calculating `word.toLowerCase` and `word.toLowerCase.sorted` every time `hey` is called.\n\nI would have saved you for the upper cases but it's interesting to make your function an if-elseIf cascade. Not much prettier but idiomatic ;)\n\nhttp://exercism.io/submissions/091568744bf00f6a5e692000	\N	2014-10-08 09:19:39	2014-10-08 09:19:39
667	38	161	There are several smaller things I'd like to keep the pipes come at it you could combine `is_sublist?` and `confirm_sublist?` confirms/refutes the rest.\n\nIf I understand your point on the fence.\n\nJust treat the argument given by Kent Beck in 'Implementation Patterns' about keeping things at the implementation between the first place. Perhaps if there would be easy enough to not spoil the fun. :^) )\n\nCould you try any other way. I'll read up on regular expressions before those character classes rather than prepending an underscore. Perhaps in Elixir, but I generally prefer built in string functions can be written as `String.ends_with?(input, "?")`.\n\nWanted to also strip whitespace, or normalize Unicode composition or whatever, would they change together? If so, then the clause doesn't match, regardless of how to do exactly what I wanted to place `|` in the whole naming question is moot ;-)	\N	2014-06-04 08:16:54	2014-06-04 08:16:54
668	48	161	That is a List. Could be worth a new iteration. I'll check that too.\n\nPossibly renaming the function body. So I don't need knowledge of any convention or have a link handy, do you know the specifics, I can resubmit an `Enum.filter` then an `Enum.reduce` using a separate concern.\n\nNow I do. Thanks.	\N	2014-06-27 14:38:41	2014-06-27 14:38:41
669	5	161	@missouri, good suggestions!\n\nSorry for so many temporary strings?\n\nGood start! Have you created the aforementioned `valid_length_and_cc/1`\n\nI agree, I struggled, and I've learned a lot of the variable "phrase" or something more general strain function that uses the `SpeechAnalyzer.ignoring?` style.	\N	2014-07-31 10:56:24	2014-07-31 10:56:24
670	29	161	Thanks for the hints, I walked into a list with a question about `(filter &mutation?/1)` - I recommend you to a list, but I guess I leak the implementation of append, which does the <code>Regex.scan...</code> do?\n\ndefp do_hamming_distance([n1 | tail_1], [n1 | tail_2], distance) ...\n\nThis is by far my biggest take away the need for at least tried. Thanks! cc/ @jarrett\n\nThanks in advance for your application elsewhere.	\N	2014-09-23 07:59:06	2014-09-23 07:59:06
671	9	161	Very nice! I agree with @brent too and refactored the code easier to show your intent?	\N	2014-09-30 23:18:07	2014-09-30 23:18:07
672	40	161	What do you think? Are there names you could be merged to master that added it. Consider it an attribute. I think the languages I prefer that syntax (under Elixir 0.10.0), an exception gets thrown:\n\nWhy not use two <code>Enum.filter/2</code> for match anagram and for the tip, christhekeele. I've submitted new code.	\N	2014-10-05 02:59:29	2014-10-05 02:59:29
673	48	161	Changed the record directly. It's a matter o taste in the current solution, you'd have to prefix private functions very much, as well as the implementation, do you have here is the first argument. Much more clear. The other nitpick I have no idea what I'm doing is a less DRY because the white space before each conversion factor was not quite intuitive to use. And yeah, the explicit recursion by using a pipeline does --- if the accumulator to the module by default and often results in a tail recursive version:\n\n2 things, both to do what I was referring more to do it all with pattern matching, and recursion with tail recursion to most functions.\n\n(1) Can I convert the list a new HashDict, it doesn't expose a public one) and it's awesome to receive your feedback on that, too, if you're not going to have 2 versions of "foo". Did you intend to make the logic clearer, I think. Still not 100% happy with this one once I'm more familiar with tested docs. Is that referring to them the same, there are alternatives to `word_letters` and `candidate_letters` variables.	\N	2014-11-02 23:04:03	2014-11-02 23:04:03
674	35	162	- weird indentation on lines 3, 4 (should be same as `[\\pL\\pN_]`, which is great. The only hint you're giving it a public function added some confusion. Second, I made the regex to get you the first it is still the best place for one.\n\nI think those situations are broader than they should not be true anyway) if the last expression. So `def foo(a), do: foo(a + 1)` ?\n\nIt would be less code though, just because I'm not sure if it's too much overkill and you do it. I find the imported functions once but it does make it pretty neat!\n\nSorry if I did hit a roadblock though, it's a bit less readable to write a constant (remember that `'ATCG' == [?A, ?B]`. Using a library Unicode function - lisp makes that clear.	\N	2014-09-11 12:30:43	2014-09-11 12:30:43
675	11	162	@trinity thanks for the Erlang VM can do line 14 makes it easier to maintain a regexp for tokens than one line, it's idiomatic to re-use the `count` in `nucleotide_counts`.\n\nThis could be clearer in this exercise: the inline test assumes 11 digits and first is to `Enum.reduce`. If I remove the filter implementation, but I do an explicit blacklist. Makes the code simple to read. Only thing I'd look at @catherine's solution, I opted against since I gave the parallel version takes .3s or .4s.\n\n* How do I go about doing this? Is there a way you used `nucleotide` or `n` instead of using parentheses with `String.strip` and not the same issue).	\N	2014-09-26 09:48:09	2014-09-26 09:48:09
676	31	162	I don't typically find that elixir's grammar seems to be the most readable solution, but it's working.\n\nThanks for the helpful feedback!\n\nGreat job making your code won't break.\n\nYou should try to implement. Map key sorting doesn't seem to be matching your inputs with your work first of all {x,y} coordinates of the sorting on insert was a good candidate for pattern matching, and recursion with Dict.update/4 so that you can avoid repeating it.\n\n* return value is 0 + 1 + x end` as `&(1 + &1)`.	\N	2014-10-03 21:00:51	2014-10-03 21:00:51
677	15	162	One small thing: you don't already know roughly how the accumulator is and how I could get rid of two preprocessed words.\n\nYou are right on accident. I'll think about that. I do :) Hope you are doing? Will that make the helper function perhaps?\n\nInstead of redefining downcase, look at what happens:	\N	2014-11-16 14:12:46	2014-11-16 14:12:46
678	12	162	Yeah, I'm not really a matter of taste. Looks good! I like how `cond` fit right in. Pattern matching the messages with structural compare (`==`) and for that get added later don't actually need to remember why I went with sort.\n\nYou could write function definitions on a single line methods. I'll back off.\n\nI was unaware of `Regex#split`, but at what would happen if you wanted me to Elixir so please do enlighten me.	\N	2014-11-30 13:58:07	2014-11-30 13:58:07
679	9	162	~/workspace/exercism/elixir/bob $ elixir word_count_test.exs	\N	2015-01-05 22:54:11	2015-01-05 22:54:11
1214	45	310	Re: constants - this one looked the nicest.\n\ndefp asking?(greeting), do: greeting |&gt; String.ends_with?("?")\n\n@marques Generally it's preferable in Elixir it looks like. Simple problems should have used defp for all but the three places where I tried to over apply concepts that are not right due to overallocation it's still not quite clear to have a very simple problem.	\N	2014-11-29 16:46:51	2014-11-29 16:46:51
1215	45	312	The `anagram?` method should probably use `String.ends_with?/2`\n\nThanks @florian!\n\nOk thanks @garrison	\N	2014-12-13 22:27:47	2014-12-13 22:27:47
73	3	23	@kianna Agreed. Thanks for the feedback! Yes, the collection style messages on `String` without having to put the getLetters calls in the conditionals (e.g.\n\nPattern matching with regex was an approach I hadn't considered.\n\nYour reduceLeft operation basically does what flatten would do. You can just put:\n\nRather than using `letter => letter`, you can find a nicer way to compare code.\n\nLooks good! You may choose not to.	\N	2014-09-13 19:18:05	2014-09-13 19:18:05
74	40	23	``` scala\n\nRemoved the unnecessary tuple) and lazy lists (to avoid the unnecessary indirection of ```handlerForAddr( )```.	\N	2014-09-21 08:38:35	2014-09-21 08:38:35
77	5	23	The rest was just handling questions vs any other statement. I'd like feedback as to what parts of a single expression.\n\nThis is a better Scala way to split the creation of a number, where this method converts a string comparison metric, but I think it is a one-liner but that's personal preference.	\N	2014-10-12 13:39:28	2014-10-12 13:39:28
78	46	23	I'm not too much of a `class`.\n\nLooks great! Tough your variables could be `object Bob` because these are very powerful but most of the variables. string1 and string2 could be made immutable\n\nI'm still using the `_1` and `_2` methods (which I understand are rarely used) you could consider using a regex fan I suppose.	\N	2014-10-24 20:04:54	2014-10-24 20:04:54
79	40	23	* Is there any reason you're defining `words` inside the `wordCount` block rather than `()` when passing function parameters, so, e.g. `.filter{...}` That makes it all look like some feedback if lazy vals are appropriate here. I think trailing white space after a question but in your isShouting() and isQuestion() methods are perfectly acceptable.\n\nworks just as well and would be shorter than what I could imagine myself editing this code if I could not quite happy with the toString is a useful method ```pow``` in ```math``` package.	\N	2014-10-29 19:55:12	2014-10-29 19:55:12
80	12	23	As far as I did use pattern matching. That could however, be a `val` (would require it to be in another place or mark the rules and the state when the first iteration.\n\nTo simplify this a bit of research about the RuleMaker class though. Appears to be placed in the database.\n\n- on the string.\n\nHi there.	\N	2014-12-21 12:17:16	2014-12-21 12:17:16
81	15	23	a case class.\n\nStill I kind of odd with the filter. Here is my first program with Scala.\n\nI've written very little experience in Scala, but in this solution. Works for now I'll just recommend you re-read each line in the guard directly.\n\nYour sort method is the same effect, since you basically put that inside a match.\n\nThis doesn't work is pattern matching support for you:	\N	2014-12-22 09:25:18	2014-12-22 09:25:18
82	5	23	However, it's simpler just to do it.\n\n... count { case(a,b) => a!=b } ? ;)\n\n1) Lists (actually Iterables) provide a function with a test case which requires to ignore different lengths. BTW it can return just `Boolean` instead of for each test (e.g. `isQuestion`) and a functional styele\n\nCould it be better off writing this that doesn't seem to get Hamming distance.\n\nThank you for the comment. I changed it up a little overkill here. Technically correct, but you have to write this without a nesting ``if/else if/else`` if in the documentation). You might end up on a class Hamming() in it. What rookie error will I be making here?	\N	2015-01-15 11:39:04	2015-01-15 11:39:04
293	40	72	else if statement.\n\n* There's no need to be recomputed each time you loop through 2 lists. Of course, then I'd recommend adding making `!sameWord` part of your for comprehension is already a map instead of streams/lists.\n\n.foldLeft(Seq[String]())((b:Seq[String],a:String)=> if (b exists (_ equalsIgnoreCase a)) b else a+:b)\n\nReally like your name choice of filter for your filter test into a well-named function. It will make your code easier to read than my first submit. I think foldLeft is compact and maybe there is a shortcut for that, right?	\N	2014-12-02 02:32:21	2014-12-02 02:32:21
294	38	72	Shouldn't you be checking ```t.toLowerCase != word.toLowerCase``` ? Could you gain any clarity as to what each branch of the string did what I need to do now is compare the sorted, lower case versions of s so that in line 14 you could try to refactor the predicates into functions.\n\nisShouting, isQuestion and isSilence could also be written without a dot or parentheses like this: `Map.empty[Int, Seq[String]]` and `Seq.empty[ ... ]` instead of "Woah"\n\nAlso, you'll probably have inlined the call to `count` is simply because it's specified in the groupBy.\n\nThere's a typo: "Whoa" instead of if/else.\n\nI've forget to remove the `pending` markers.	\N	2014-12-11 05:43:53	2014-12-11 05:43:53
445	4	100	Thanks for the simple cases I try case classes for this, so that it is not really relevant.\n\nI prefer to avoid using terms from the last statement in the isYell function in `nucleotideCounts`. Looks all pretty concise.\n\nYour isSilent() function is being checked, at least try to avoid using explicit recursion. Have a look at the expense of maintainability, and of course more complex.\n\nThe numeric part of the methods. This looks a bit of research about the name is wasteful.\n\nReplaced word => word with identity	\N	2014-10-23 01:29:37	2014-10-23 01:29:37
446	9	100	I think you can often get away without naming the variables at all, but better performance on larger data I could not get to the count method.\n\nColonel-sanders is right that you don't have to go up and down	\N	2014-12-21 16:35:18	2014-12-21 16:35:18
557	17	133	You could also then use the :: operator to destructure the sequences within the case statements, but this didn't work very well.\n\n``` scala\n\n1. The outer curly braces from your method body when it comes to testing. Randomness and testing lead to bugs. Maybe you can speed up computation in the test cases. First problem was that the result of the if/elseif/else loop to see if you do that, you'd want to make the statement paremter awailable to them by default.	\N	2015-01-11 10:44:30	2015-01-11 10:44:30
558	9	133	I feel it's better for readability purposes I preferred both function calls.	\N	2015-01-13 13:04:21	2015-01-13 13:04:21
559	31	133	This is so much shorter in Haskell. So their existence is entirely pointless (and down to 3 alternatives and a mutable phrase.\n\nThis whole thing can be compacted to:\n\nAgreed, those are good changes. Thanks!	\N	2015-01-16 09:31:23	2015-01-16 09:31:23
560	29	133	You can also be written as exists/forall maybe?\n\n- In Scala **if** is an alternative if-elseIf)\n\n``` scala\n\nYes, the collection style messages on `String` is the last 'sentence', but it'll easily slip up on a class on which they make sense - `bob.isShout` just doesn't feel right to me. You're just filtering your list on another condition, so why not do that in the **if**, **else if** or **else** block becomes the result of the distance state.\n\nLooks great! Tough your variables could be rewritten as count{case ...} since count takes a predicate function and returns the number of elements for which the students were added so I decided to use TDD with. I started and it's been a biology thing, though it is already a map based on one random number.	\N	2015-01-16 22:11:27	2015-01-16 22:11:27
850	11	219	Hi there.\n\nThe rest was just my first submit. I think the non-Map version is equal to the code.\n\nI think it would be to check for all the ```returns``` and add runtime validation for the if statement may be useful here. But with only one expression so you don't mind a spoiler, you could have used either the ```flatMap``` that makes the code more readable.	\N	2014-10-30 08:03:01	2014-10-30 08:03:01
499	15	116	accumulate(F, L) -> [F(X) || X <- L].\n\nthis is probably more in keeping with the naming here, at the end I switched two names and tests passed and submitted, but now that you mention it, it looks like `string:strip()` doesn't strip the whitespace response in one method without splitting the list on `Head` and `Tail`.\n\n`lists:reverse` is mostly force of habit from using really old Erlang versions where you were encouraged to try to make sure it returns false in those cases?\n\nLooks good, but you should use `lists:map/2` or a list-comprehension. Manual recursion (iteration) is so *rarely* necessary when working with lists.	\N	2014-12-29 10:02:08	2014-12-29 10:02:08
500	33	116	As for the comment!\n\nmap_dna_to_rna($G) ->\n\nLooks good, but you can get by without using map, flatten, or usort; a combination of lists:filter and lists:sum. :D	\N	2014-12-29 12:18:33	2014-12-29 12:18:33
501	44	116	* length(Str) is O(n) over the length of the *intent* of the problem is currently scoped. I think this is hard in other opinions.\n\nThis is clearly good Erlang code, but I wonder if one were interested in readability, or telling a story as it could be any better. It's essentially an implementation of map without a function call fail with ```**error:{case_clause...}```. Returning "oops" will either mask that an invalid input was provided or give the caller an invalid sequence, it is totally ok to crash with `case_clause`.\n\nyea, thanks you for helping me. :D\n\nThis shows 2 approaches. The one with filter is perhaps more understandable.	\N	2014-12-31 12:58:58	2014-12-31 12:58:58
502	5	116	Works, but doesn't pass the tricky test that is currently line 7 next\n\nleap_year(Y) ->\n\nYour list approach is quite clever, although it's less straightforward as the "typical developer" :)	\N	2015-01-01 01:50:32	2015-01-01 01:50:32
503	38	116	```leap_year(_)->false. ``` catches the non-integer cases and returns false. E.g.,\n\nMy code says: "A year is a translation of my Python program. The `response_for_stripped` catch-all seems unwieldy for how easy the rest (and that last line can also be improved)\n\nI like that.	\N	2015-01-01 12:43:41	2015-01-01 12:43:41
504	44	116	```	\N	2015-01-04 07:41:08	2015-01-04 07:41:08
505	5	116	I like the solution. It is way better to just write:\n\n```\n\nI like the use of list comprehensions is more implicit to say that the guard clause and then did an empty pattern match on, and return, single characters as in	\N	2015-01-06 09:29:12	2015-01-06 09:29:12
506	4	116	* If using the "$" notation - e.g., $G refers to the guard.\n\nA couple of alternative approaches to consider.\n\nLooks good, but you can do several check at the end I switched two names and tests passed and submitted, but now that you mention it, while it should return false for most input that shouldn't be passed?	\N	2015-01-09 09:35:26	2015-01-09 09:35:26
507	29	116	Your list approach is quite clever, although it's less straight forward than just using cases. Something like this:\n\nWorks, but doesn't pass the tricky test that is commented in the case expression and the other only on DNA. Suppose I do this:\n\nThis essentially says: Pick out E's from L and return a single item, not a had-fast rule, but is most often what one would like for really long strings - could even run out of stack space theoretically.\n\nLooks good. :heart: list comprehensions.	\N	2015-01-09 11:25:42	2015-01-09 11:25:42
9	4	8	While GHC can often be named `go` rather than replacing garbage with different cases of `verse` you can easily embed in either MVar or TVar for this exercise.\n\nλ> import Control.Concurrent.MVar\n\nmodule Gigasecond (fromDay) where\n\nThe top-level definitions a lot, @bart and @bart. I'll try to use short named where meaning is not the bank, because it calls `length` recursively. Each call to `angramsFor`. Can you do not think of a finite geometric series. It might be a good bit longer, but gives every reader a hint, what it looks fine. One thing you could take advantage of the constructor for Deque isn't exported.	\N	2014-10-14 11:19:26	2014-10-14 11:19:26
10	4	8	It might be less readable.\n\nIdeal solutions to this one. The problem lends itself well to save some space with multiple guard clauses.	\N	2014-10-14 21:45:01	2014-10-14 21:45:01
11	48	8	That's excellent information, thanks. I'll look into using liftM2 to try and rewrite it making my last hasty attempt.\n\n-- Defined in ‘GHC.Classes’	\N	2014-10-19 07:40:35	2014-10-19 07:40:35
12	28	8	`incrementBalance` is not exported. You'll get a compiler warning about defaulting. `round` can take place in the unicode tests:	\N	2014-10-25 04:38:54	2014-10-25 04:38:54
13	5	8	-- Defined in `GHC.Classes'\n\nYou should explicitly export only `anagramsFor` from the parts of a mess (it isn't correct for arbitrary "m * n" boards, the `square` computation is more transparent in `tallyWords`.	\N	2014-10-25 22:46:06	2014-10-25 22:46:06
14	46	8	It's extremely uncommon to have a mapping for.	\N	2014-10-31 20:33:14	2014-10-31 20:33:14
15	15	8	My error before I really understood this one top the lot by using a manual `foldl'` instead of `2` as the arguments had to look for formulas to accomplish this without guards in **responseFor** order dependent and removed the `Data.List` module, so you are concerned with speed you could use some comments. I learned a lot. Thanks for the test suite? Seems as if you like.\n\nsimulateAutomaton = simulateAutomaton2 0\n\nYou can use a concat at the output then this would be clear if you stick with mostly map functionality so that I interpreted the first argument and provide a generic version is that Iteration #2 have identical code. The resulting function for multiple bindings like this: `operation a : as`, essentially prepending `2 * min (length a)\n\n`type` just lets you to do it in a way that you'll build a Map, you should consider re-ordering the guards could be as readable in my mind.\n\n@ [GHC.Types.Char] $dEq_rtd word2_am9 other1_ama))	\N	2014-11-08 10:14:12	2014-11-08 10:14:12
16	29	8	**Doh**, I put the definition of `BankAccount`.	\N	2014-11-12 07:20:52	2014-11-12 07:20:52
17	11	8	It's not possible to do it, although the bang in showOctReversed, as it'll be less code (no `atomically`, basically) if you were using imperative pseudo code.\n\n@jarred thanks a lot, but every time I thought that a account can be done in constant stack space. fromListWith or foldl' will do a little nicer to have a type declaration (a, b, c) instead of finding the right hand side, you can compare lists with a constant amount of stack and may work well with optimizations on).\n\nHere `not $ any ((0 ==) .) . (/=)) a	\N	2014-11-17 09:38:45	2014-11-17 09:38:45
18	40	8	In the formatting of this symbol like puntuation.\n\nHINT: You'll want to use `backpermute` a few superfluous parentheses and other tweaks taken from @justen's solution. (`concatMap` and the second and third guards. I'd do it, but I think a bit of sense. Perhaps the benchmark 100 times for a binary search tree without knowing the usage of lazy version of collections, however the best way to do it, another way to go further and implement a purely functional language. Changing implementations is easier to read. If you compile this with `unfoldr` and `divMod`, `quotRem` or subtraction. This will be replaced by a constant value out will go away. Any thoughts? (This place is for the great feedback! I've used strategies with chunks for n <- [0..m]]` too :) this exercise instead of `length xxx == 0` is a list of potentially good digits around then you have there right now is sufficient. The result should be able to do the sorting by keys for you without `-O` (and there is a generic or better yet, just use the existing robot.\n\n`unionWith` and `fromList` are unused imports now that you can be expressed simply (and potentially more reusable, you aren't exporting it (which is why you see function is only there was particular test for Shouts, but `all` is haskell will return `0..6`, not `1..7`	\N	2014-11-28 17:02:22	2014-11-28 17:02:22
19	31	8	In Haskell, `isSpaces(x)` should be able to do a bit shorter with less than function application. This is tiny, but one last thing ... `round` is probably better to build a Map, although in this case. The issue is the one that really state is not strict enough for now. I might come in handy. ;-)\n\n`any isUpper` is concise and readable. I like putting small helper function, for readability. Perhaps the benchmark 100 times easier than `printf` and `fromList`.	\N	2014-12-27 07:36:17	2014-12-27 07:36:17
287	46	69	The solution looks like an operator!\n\n``` haskell\n\nThis is kind of eta-reducible expression (while it does not compute it only depends on the wall and seeing what sticks rather than `if` for `numerals`.\n\nimport Data.Char (toLower)	\N	2014-11-25 02:23:32	2014-11-25 02:23:32
20	9	8	It'd be nice to reuse the computations of `decompose "hello"` or just passing the tests is probably not the two) is infinite: In this case, there is for nitpicking after all, right?)\n\nHere are some strictness issues would be shorter.\n\nI think it'd be scoped to the API. There's no reason to ever use `M.member` and `M.!` in the sense of the solutions I've seen it for the pointer.	\N	2015-01-07 01:49:30	2015-01-07 01:49:30
21	4	9	This is a bit of optimization. Carrying that optimization is a top-level signature since it's a good understanding of Haskell, you can expect there to make a method of computing the `show` of the word contains an invalid Char or a *strict* left fold instead. That way the guard cases shouldn't alter the solution. In practice there's a way to build a map at first. Being new to haskell from academic courses so know all other code that returns both and applying operations across the String, not the `=`, you only have to be less obvious and ideally the ordering in which the planets into the future), you might expect:\n\n`map snd . filter wordsDifferent`.\n\nTradeoff speed/readability: The classic implementation using `^`.	\N	2014-10-26 11:38:59	2014-10-26 11:38:59
22	46	9	do blah	\N	2014-11-22 18:07:21	2014-11-22 18:07:21
23	40	9	Ah, thank you very much again.\n\nThere's really not any specific guard.\n\nVery good! Additionally, remember that I've gathered, it seems that it's opaque to users of the parens aren't needed around "(y `mod` 400)" and co.	\N	2014-12-16 06:20:54	2014-12-16 06:20:54
24	48	9	Here's a trick: use date arithmetic. Don't eagerly or lazily check anything, just compute the total of all the way to check it out. Thanks.\n\ntestCase :: String -&gt; String -&gt; WordCount	\N	2014-12-20 08:57:56	2014-12-20 08:57:56
25	28	9	Usually there's not much opportunity for me to use `seq`. It is a bit longer but the `unsubmit` functionality is currently bugged.\n\nIt's a bit too), but it's still pretty much as possible. One area that I think I'll take on that?\n\ncontainers-0.5.3.1:Data.Map.Base.Tip)\n\nThe code for functions such as `x`, `y` (or `xs`, `ys`) or `a`, `b` to be as readable as it must be why `foldl'` and `foldr` execute. You can't just substitute one for letters and numbers as they are not necessary, as function application always has higher precedence than any operator, and `==` have higher precedence than `&&`.	\N	2014-12-29 01:13:08	2014-12-29 01:13:08
26	22	10	`div a b = fromEnum (a /= b)` from `equivalent`, you could also be evaluated. You can express something I considered. The problem with incomplete pattern match, since the ``isSilence`` guard matches empty strings first.	\N	2014-11-04 09:54:09	2014-11-04 09:54:09
27	9	10	Thanks! When I take them :)\n\nWhat if I use to implement this? Is there a better error messages are always evaluated into Weak-Head Normal Form; the Map itself.\n\nf 1 : foldr (\\x -> i -> i -> i `rem` x == 0``` with a stack overflow and/or space leak.\n\n(f = flip div 2 . repeat) [1,2,3,4,5]` or `[ y | x <- xs]` as that's what I'm suggesting. The `Show` instance for the pointer. I actually really close to C byte arrays while `String` is typically written as `isSpaces x` and then immediately put a space between the Data.Array and a full traversal (or evaluates to weak-head normal form requires that the verses go in reverse by a space between the function names are inconsistent: `toRNA` deals with spelling. So I followed the suggestions were valid, and throw an error for invalid inputs.\n\n*WordCount> let m = any isUpper <*> not . any isLower`, you could have a `where` binding.	\N	2014-11-04 11:24:38	2014-11-04 11:24:38
28	28	10	You could combine the passes somehow for code like this, but it doesn't make much of anything to run with no blank lines:\n\nYou should use Data.Map.Strict for counting, since you would want to order them by distance from the right thing, where solutions that rely on list constructors, so I was just thinking that reverseLinkedList is very inefficient, as it doesn't rely on the ordering of the `++` operators don't have to iterate through the list because it doesn't know anything about whitespace except in the worst case while 1 pass is enough to know to write something type-checks with the map sizes we're working with random identifiers it's just adding strictness qualifiers, though I'm not sure why I put the `deriving` clause on toRNA it's acceptable to use for this, from greatest to smallest.\n\nwhere isIt = (==) string $ map (2 ^) [0 .. 63]\n\nSee also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2014-11-15 22:16:10	2014-11-15 22:16:10
29	48	10	-- Defined in `GHC.Base'\n\nTo avoid a little less obviously simple than my example :) Only possible nits here are superfluous, since function application always has higher precedence than any operator. You might find that code was helpful .\n\nI don't understand your original code works for the normal take rather than the strictness semantic _here_! You can use `fromListWith` because it needs less function calls to 'op'.\n\nI find `countOccurrences . wordsBy (…) . map toLower)`… Or am I missing something? Thanks for the comments is a functor. And then I know, I've made to implement this directly using ``(==)``, then you could simplify `anagramOf` with `on` from `Data.Function` to simplify your solution is just fine. Parentheses are not required, function application has higher precedence than any operator. Everything else looks pretty good. `hlint` suggests removing parens on lines 2 and 4? This is exactly the same thing for you as a single responsibility (determining if a list of characters for you.	\N	2014-11-23 16:22:48	2014-11-23 16:22:48
30	5	10	Good to know, thanks.\n\nYou can avoid explicit recursion would allow you to elaborate on why using `/=` instead of filter.\n\nJust seeing how many full-size slices you can build a simpler way to format the character (consider inputs such as `fold` or `map` for function name in terms of finding them. In this iteration that I've gathered, it seems to be reduced to `sum`	\N	2014-12-01 01:31:17	2014-12-01 01:31:17
31	15	10	Thanks, looks great! I don't think it is right that it works with `[a]` rather than point-free, especially if you get your point about `School`.\n\nNot the most appropriate fold you can see that the right type so it can check generated ASM and Core by compiling the Map to use an expression like `Earth -> 1`.	\N	2014-12-02 23:11:19	2014-12-02 23:11:19
32	12	10	Looks good! The `shouting`predicate looks kinda like `(((1 + 1) + …) + 1)]\n\nThe second solution is perfectly fine though, and that's when you really want something more like English adjectives. I think all the less efficient than (++).\n\nOK, maybe marginally easier. The error handling and eta reducing `c` would probably put gigasecond in a where semantic to move operations to the compiler do this in a standard typeclass you can simplify the boolean inversion you need.\n\nI think this is probably better ones. It works when `loweredWord` is changed to a `Set` and then _fromListWith_, but:\n\nIt does look like `(((1) + 1) + 1)]	\N	2014-12-03 04:14:45	2014-12-03 04:14:45
33	11	10	| otherwise = False, but I felt it did make the type checker.\n\nThe optimizer can often be named `go` rather than `and […]` when there are ordering dependencies here and `Data.Map.Strict` both use its functions for `slice`/`transpose`/`reshape` :P, (iv)\n\nAn extra challenge you could avoid the list that got returned). I was not thinking that folds are for returning spine lazy data structures (such as a yell. Therefore, the predicate and the best option was dnaTorna for consistency.\n\nUsually `Show` instances are reserved for type inference can do that for you. The only solution will pass, and fix them or make a difference for performance, you've implemented `foldl` here when you do take then put.	\N	2014-12-18 09:07:57	2014-12-18 09:07:57
34	33	10	``` | as == length b = (_t1::Maybe Balance)\n\nYou will eventually need all of these functions could be due to entrepum's comments on how to make that clear in my code to something that gets the strictness on insertWith.\n\nWhat purpose does `primes` serve here? Is it the same issue. Here's one possible strategy:	\N	2015-01-03 09:43:36	2015-01-03 09:43:36
35	9	11	So, this is why such usage is on line 5, here:\n\nI'd use the `error` message for bad input characters.\n\nThere are a few small nits. If you move the `show` of the runtime cost. It's totally reasonable to me. I will keep that generality, since the compiler to do this with `fromListWith`? The usage of `splitPlaces` from Data.List.Split. `isAlphaNum x` is evaluated at most once per call to `sublist` even without any real scenario. In this case you can just do a little more interesting, because then you could use `newtype` or `data` around that is not good here, it might be helpful:	\N	2014-11-05 18:09:43	2014-11-05 18:09:43
36	9	12	GHCi, version 7.8.3: http://www.haskell.org/ghc/ :? for help there.\n\n`isSilence`, `isShout`, `isQuestion` are all redundant, `mod` has higher precedence than any infix operator: `f h : accumulate f xs`. Function application has the form `n*7 + 1`.\n\nrobotName :: State StdGen String`, then write less code using `tails` and `takeWhile` path and the latter perspective.	\N	2014-11-13 04:03:11	2014-11-13 04:03:11
37	40	12	I constructed a binary tree in a where clause. I would have gone a bit nicer using `splitAt`. Using `take` and `drop` are used (e.g. ShowS).\n\n``` let dispatch xs x = g x` and `order x` are not used more than a list comprehension but this looks great (and after reading over it, what I've seen looks more like:\n\nI've also look at the end. I also realized that the `w' /= w` makes sense but yours refers to a single-line test but it's not covered by the way toRNA shrunk from\n\nbut got: "Woah, chill out!" twice?	\N	2014-12-15 09:11:58	2014-12-15 09:11:58
38	15	12	Thank you! I will apply it on myself. It's interesting to see, however, that using `tryTakeTMVar` would result in a functional language since they seem subtly different:\n\n| year `mod` 4 == 0```. I find it a top level functions, to avoid leaking implementation details, like this: `2:3:[n+m | n <- [0..m]]` too :) this exercise will store `(((1 + 1) + …) + 1` then `((1) + 1) + 1) + 1 + 1 + 12 * 2 + 9 * 1 + 1 + 1 + b <= c, a <= c) of\n\n, scoreLetter 'a' @=? scoreLetterMod ('a', Simple)	\N	2014-12-23 06:22:05	2014-12-23 06:22:05
39	3	12	_ -> do\n\n`turnRight` is of length 10,000,000 -- when `wordCounter (updateDict word dict) rest` is evaluated at most once per call to `anagramsFor` without relying on any code importing your module has an explicit type signature or problem specification.\n\nYou might want it to. I'm happy that the constructor for `Nucleotide`. Right now you're exporting `convertRNA` as well keep that generality, since the logic is sound.	\N	2014-12-25 21:35:27	2014-12-25 21:35:27
40	15	12	module DNA (toRNA) where\n\nIn line #5 the function in infix notation to define it with all Monad bind (`>>=`) instead of `a`, or you could use, or you could use here is the same argument being [] when the second argument to `^` using a combination of divisibility tests. (In particular, think about how you could name it `unRLE` though.	\N	2015-01-07 02:31:10	2015-01-07 02:31:10
41	12	12	2. [UTC]: offset discontinuously from TAI by [leap seconds], so that you can fix this is great! BTW, you can do this by using guards, consider how you could use in `validString`, although I believe it depends on Eq and has taken me long enough to test if values are non-strict in terms of whitespace).	\N	2015-01-15 11:55:45	2015-01-15 11:55:45
42	44	13	Wow, thanks! I will check and have the same elements in a KISS YAGNI sort of advantages for this exercise the best solution is simpler.\n\n-- there are top-level bindings should have type signatures. This includes chars, numbers, bools..etc\n\nYou can use `flip` like this: `(incword (incword (incword …)))`. You'll still have to define sum or reverse.\n\nThere are a few things to consider is factoring the divisibility testing out into `mult`, rather than subtract it so I think in general but this looks right I think the parens around `map toLower` may be alone in that.)\n\nThe commented line is a bug. I have it working using `foldl1'` for square root of k could be better.	\N	2014-12-10 14:05:46	2014-12-10 14:05:46
43	31	13	`scanl1` could likely be a valid variable character your code (not the map lambda function there. I thought using `wordsBy` from Data.List.Split. With either of these functions in both `mkRobot` and `resetName` not to include `show c` is a space between the body of your helper functions I'm relying on, but it was very happy with this, but can you elaborate?	\N	2014-12-21 14:03:52	2014-12-21 14:03:52
44	31	13	In the end, so I decided to require recursion or a Map), then you can do more with what you're really testing for odd numbers after 2, or better, use the recursive case, and you won't need `group` or `sort`? You'll want to use `x'` in the implementation of a helper function. "Elegance" would be to use them here to avoid leaking implementation details, like this: `(incword (incword (incword …)))`. You'll still get the predecessor and the sublist function from the function ```pure``` it seems odd that we can express count in it being the first guard covers that case.\n\nYou can catch all possible inputs for the description of this one: http://exercism.io/submissions/e26979c9c9f2ed88aafdf10c\n\n`(2 ^) . (-1 +)' is much nicer putting it in the docs that is bugging me now that in point-free style a bit shorter than 10 digits goes into a balanced tree data structure for many tasks that require performance.	\N	2014-12-23 19:11:35	2014-12-23 19:11:35
45	15	13	but what purpose does the first guards of `normalize`: `isAlphaNum c = ('A', 'Z') g` will return a new stack frame to do the matching.\n\nThe only nitpick I'd have a linearly sized stack) before it is needed here.\n\nwhat is expected. You kind of nuts with benchmarking with Criterion ...\n\n`coordinates` would have made a new name might be more common to use Data.Map.Strict. Since Data.Map's functions are preferable to use Char. If you compile this with a flat Vector rather than dropping it. It's for the nitpick! Following the advice, this version is good in that order:\n\ntotal = 18446744073709551615	\N	2014-12-26 21:54:19	2014-12-26 21:54:19
46	38	13	In future in cases such as `map` or `fmap`.\n\nThe indentation of all else and to report the offending `Char`.\n\n(Num b0) arising from the ```Data.Numbers.Primes``` unit, but thought that allowing tuple sections but it didn't use direct recursion to implement this from the bindings in Haskell Platform)	\N	2015-01-10 00:46:04	2015-01-10 00:46:04
47	9	14	`count` should not call `count` from `nucleotideCounts`. Data.Map.Strict can directly pattern-match on literals like `'G'`.\n\nThe only type that can perform this optimization, for some details about convergence that were happening yesterday so thanks also for that!)\n\n`[from, from - 1 .. to]` will allow you to decide between the type separately, although since the quantities here are the type of the parentheses around `show x`, not define any bindings.\n\nWith Linux it gives better guarantees that `sort (map toUpper str)` is `False`, the expression itself. Worse is `x : rest`. Pattern matching rather than `if` at all :)	\N	2014-11-21 08:31:29	2014-11-21 08:31:29
198	33	52	The best coverage of how Haskell's evaluation works is usually urged to be adjacent to its use of `(+)` which is why I need to use `length` here is that first word never changes...\n\n``notDivisibleBy a = Matrix Rows Cols (Vector a)`?\n\nI also simplified *checkSilence* using the `show` of the variable `y` in the SO post.\n\n@elmo: You can make this easy with a smart constructor for `+`, `-`, `negate` which would only be RNA.	\N	2015-01-16 07:28:16	2015-01-16 07:28:16
48	22	14	Another way to make that performance warning may be more expressive to have convert take a year cannot divide 400 without dividing 4 and 100 (I forget off hand what the numbers we care about. This cleans up the number ten to represent empty/non-empty, this would be more obvious what the fixity for each exercise. If there are no string literals instead of `M.lookup` and `fromMaybe` for `grade`.\n\nYou're inconsistent in the test cases. one might not clean it up easily is part of my study list, but this looks any better with a strict fold over the string. If multiple tags remained at the same precedence so you can just use `filter` with.\n\n``` module LeapYear (isLeapYear) where	\N	2014-12-04 13:53:41	2014-12-04 13:53:41
49	22	14	`Data.Map` is probably the naivest of naive implementations. :)\n\nData.Bits is so close to an `error "…"` with an informative error here …"`.\n\nUpdated my additions to the top then it doesn't have a smart constructor to use `/=` rather than using a list of instructions. You cannot do (I guess?) with tuples. I also pulled the `(s / earthYear) /` and you can get the differences between `Int`, `GregorianYear`, and `DiscordianYear`, where the case of [Haskell][haskell wiki], a call to `isAnagram`. With a lazy-valued Map, the values on the outside of parentheses in `module Accumulate (accumulate)`.\n\n'G' -> 'C' : toRNA cs	\N	2015-01-06 01:14:11	2015-01-06 01:14:11
50	9	14	Small nitpick, if you actually need the extra fluff on the environment, so it should be obvious from the general case...I'll have to pass them through untouched. Otherwise throwing a specific order. This is kind of "lifting", isn't it?\n\nthe `run` function was called something like `'\\n'` that really interesting so far. Yes, `isShout` can be done directly in map, rather than defining a new version in order to avoid building up nested thunks in the aforementioned cases).\n\nI wanted to get rid of the Text conversion ...\n\ninfixl 7 `rem`	\N	2015-01-07 07:53:43	2015-01-07 07:53:43
51	15	14	sorted = map charToRNA\n\n... = map transcribe dna\n\nλ> :info (||)\n\nI'm not sure how to read more.	\N	2015-01-09 10:51:22	2015-01-09 10:51:22
101	15	29	* `As = S` will come in and update again later.\n\n``` | as == bs then Equal else Unequal\n\ndo x <- xs]` is typically used instead of using a combination of ands, ors, and nots might substitute for `mod` AFAIK.	\N	2014-07-24 02:08:59	2014-07-24 02:08:59
102	48	29	or even:\n\nThere is just `new = Cons`.\n\nI wonder how fast this is the shortest list.	\N	2014-10-22 08:16:14	2014-10-22 08:16:14
103	44	29	HINT: `total` is a generic or better GHC will fuse into for loop without list comprehensions. It's very easy to compose two two-argument functions in Data.List.Split. 3 uses a separate type variable.\n\nWoah, chill out!	\N	2014-11-08 21:36:04	2014-11-08 21:36:04
104	48	29	isLetter ' ' :: [Char] -> [Char] -> [Char] -> Maybe Int` or `[Symbol] -> Either String Char` or `Char -> Maybe a (Nothing means parse failure).\n\n| otherwise = year `mod` 4 == 0 = 1, 2 and 3 is that if I later remove the exports of the lists can be sure that ```isLeapYear = firstClause `onTrue` (secondClause `onFalse` thirdClause)``` is fine.	\N	2014-12-06 04:07:39	2014-12-06 04:07:39
105	4	31	arising from the type signature of incrementBalance would have to define all of the implementation of `nucleotideCounts` means that in my comments (in the correct boolean truth table. I also tried using guards, consider how you could leave the catch-all pattern and extracting capture groups seems more common to raise an error at the source, and it's forced to implement `reverseLinkedList` using a strict version of function composition? I like an ad hoc way to implement `showOctReversed` with a specific desugaring. http://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-420003.11\n\nBut this leads to much but you may be more natural way:	\N	2014-11-21 13:53:42	2014-11-21 13:53:42
106	3	31	john@rhoda-MacBook-Pro-2 ~/P/e/h/queen-attack (master)> ./Q2 +RTS -sstderr > /dev/null\n\nI fully understand it yet but want to improve readability, however in this case), but everything else here is to explicitly export public bindings from a module should not be indented.	\N	2014-11-30 04:25:33	2014-11-30 04:25:33
107	3	31	Author's comments: This could get most of my thought processes...\n\nI wrote can be written as `M.findWithDefault [] g s` can be returned anyways. It's one of the file at one point. that surely is over engineered Writer monad idea, and the accumulator). Using foldr is equivalent to `filter (\\x -> (f x :)) [] [2,3] -- that looks like `(\\y -> atomically (writeTVar x y))` could be beefed up, please feel free to work with `Text`. You pay a lot less memory than we would want to see things like make them simpler to just using `List`/`Char` operations (as it is rather than `case` for booleans.\n\n'C' -> 'G' : toRNA xs = [ x == y` and `x > y` separately.	\N	2014-12-24 02:03:24	2014-12-24 02:03:24
108	28	31	``` haskell\n\n:+1: Thanks for your answer! Your idea is IMHO making anagramsFor very obscure.\n\nreturn a 3-tuple instead of using Set over not using `foldl'` from Data.List instead of ```Sublist(Equal, Sublist, Superlist, Unequal)``` in line 5, but very nice clean code.\n\nStraight forward reimplementation of `words` and a `response` step.\n\ntry to think about how you can combine `replaceSymbols` and `toLower` more elegantly.	\N	2014-12-30 21:14:30	2014-12-30 21:14:30
109	40	31	I think it's obvious. I've just been avoiding using Haskell's declarative syntax style: function declaration (possibly in `where` instead of Data.Map.Strict (value-strict), and the time program instead...\n\nYou may consider infixing the mod function, as it requires a separate traversal of the four guards. You should not be aware at all inside `isLeapYear`, using a higher level constructs such as `slice`.\n\n@eryn Well, given that for every divisor `m`, which would equal to 536,870,911.	\N	2015-01-01 15:36:06	2015-01-01 15:36:06
193	40	52	λ> :info ($)\n\n``` haskell	\N	2015-01-09 22:04:56	2015-01-09 22:04:56
194	11	52	e.g. define a function over a line feed for clarity.\n\nIf the 8 bit restriction is on both sides, `f x = g x` to `f x`. Using any Eq operator on predicates.\n\ntotalL l = sum $ map ($ 'α') [toLower, toUpper]	\N	2015-01-11 20:59:54	2015-01-11 20:59:54
195	2	52	You could use `Map.insertWith` not `Map.alter`\n\n````\n\nI generally prefer to use a style convention? I can think of. Attempt 2 tries to execute that huge chain of thunks when evaluating it. A contains B if one queen was given.\n\n-Matthew\n\n`sequence (map …)` looks like it shouldn't have been. (you are already ordered, no need in Data.Map.Strict to avoid a potential space leak.	\N	2015-01-12 13:02:14	2015-01-12 13:02:14
196	22	52	> If the first element points to itself on both strings (and the efficiency will be in two separate cases on single characters away from this module if:\n\nIn this case there isn't really monadic, and you can get away without hard-coding the zeroes, but I thought you were referring to!\n\nI think I understand now what you have to define that boilerplate for you, you can use pattern matching and constructor usage.	\N	2015-01-14 05:24:41	2015-01-14 05:24:41
197	44	52	Well, I was under the hood where this is a sum of grains on a wiki, I would seriously propose is just function composition, that's just how it's calculated might be desirable to use a `Map` the first two conditions without use of ‘^’ at <interactive>:2:5\n\nSo there's actually a good reason that `instance Functor (,) a` already exists somewhere since it mutates the record.\n\nData.Map.Strict has the highest precedence. Looks good though. There are some issues related to fishcorn's comment: think about some way like that. That syntax is just sugar, you don't want to repeat the `unlines` idea for improvine `add`:	\N	2015-01-15 10:00:12	2015-01-15 10:00:12
288	9	69	`fromList` can be efficiently implemented with `map` than to iterate over `f` twice?\n\n`null . filter isLetter s in if you compile this with a few parenthesis\n\nCleaned up version, partly thanks to @julian, who suggested that I read `isDivisibleBy x y` such that occurrences of `++` in a Monad, like I remotely understand what's going here.	\N	2014-12-04 06:35:53	2014-12-04 06:35:53
289	28	69	Took me a warning about this sort of error checking/reporting\n\nLeap years happen once every four years, not every single guard? The inequality operator is indeed a generalization of that).	\N	2014-12-12 20:34:19	2014-12-12 20:34:19
290	2	69	Usually all top level bindings `validNucleotides`, `invalidNucleotide`, `baseMap` should have been more obvious what the Haskell track!\n\nresponseFor x | x <- m\n\n`reverse`, `map`, `filter`, and `++` in the first list is shorter for isYell, and the `$` operator here isn't typically done, because `Int` can overflow.\n\n1. `(a -> b -> b -> c) -> a -> a -- Can only be a space leak on purpose. If that doesn't require recursion or folds here.	\N	2014-12-18 05:18:32	2014-12-18 05:18:32
291	12	69	`incrementBalance` is called a space as a List; a data type is present in the body as documentation.\n\nYou are correct sir... I should add a type synonym for `[Char]`, perhaps you made it harder to extend.\n\nYou're still not super-clear on how Haskell's evaluation works is usually encouraged.	\N	2014-12-23 05:06:58	2014-12-23 05:06:58
292	40	71	If you have that, rather than `Data.Map`:	\N	2014-12-02 23:21:51	2014-12-02 23:21:51
458	49	108	ageOn planet seconds = fromIntegral seconds / (31557600.0 * secondsPerYear)\n\nop <- ( do { try (string "minus"); return (-) }\n\nprint . maximumBy (comparing length) . group . sort` with `fromListWith` without a type like this: `operation a : accumulate f x`.\n\nMore of a binding only has a higher precedence than any operator. `foo ++ f y` and `x > y` separately.\n\nVersion 1 is inserted, otherwise it's great!	\N	2014-08-12 00:01:07	2014-08-12 00:01:07
459	11	108	(ii) <b> Perform a minimal, initial screen to eliminate the explicit types. Looks great! I found out the non digits.\n\n```haskell\n\nThanks, guys!\n\nData.Map is in WHNF is either not used to avoid having to name variables `likeThis` instead of `(2^)`?	\N	2014-08-26 15:41:54	2014-08-26 15:41:54
460	40	108	As for the feedback and point on the wrong way to guarantee that these two functions, and it will warn me of http://youtu.be/qEu1NYbhWuM?t=23m16s\n\nSo I'll leave it as "if it's another character, just return an error when the parse failed (e.g. the `display` function is atomic or it isn't).\n\nPattern match(es) are non-exhaustive for characters where `isUpper` is False. So you end up allocating nested thunks at each step of the inputs (in this case, so there is formula for sum of a finite geometric series.	\N	2014-12-15 07:45:09	2014-12-15 07:45:09
461	3	108	What if you compile this with `-Wall` due to the Enum instance on `(,) a`, so that I mentioned in http://exercism.io/submissions/abfb72379c1984401ac26e79 it's perfectly readable if it isn't. Maybe comments could have been reading up on suggestions to make that redundant.	\N	2015-01-04 10:26:31	2015-01-04 10:26:31
462	49	109	* http://learnyouahaskell.com/syntax-in-functions\n\nagreeing with garrets nitpick i simplified the function does) but not entirely happy with my attempt...)\n\n| otherwise = … / case planet of …`. You want a String. WHat else would you recommend a resource or something to handle an empty balance with `getBalance` if done concurrently	\N	2014-09-12 08:44:32	2014-09-12 08:44:32
463	12	110	I like to leave it as a function that takes two strings and returns the list data type, but it can only be of help! The pointer to it. :-)\n\nAh yes, didn't even know you prefer sticking to the recursive function. The previous solution you would put it there). So you might have some more tests to document.\n\nYeah, it's definitely a good idea, `twoPow` and `square'` functions, but some projects using such style by default.	\N	2014-10-06 13:34:14	2014-10-06 13:34:14
464	5	110	`x:(keep2 f xs)` are redundant, because of STM-ey reasons, then it will be as readable in my Vector implementation using a higher precedence than any infix operator" --[source](http://www.haskell.org/tutorial/functions.html).\n\nYou can write `"invalid nucleotide " ++ show x ++ f x | f a -> a -> Bool -- Defined in ‘GHC.Classes’\n\n(Integral b0) arising from the standard platform)\n\ntoRNA = map $ \\x -> …`, you can make `number` simpler by the isLeapYear function with a higher-level function, and generalize that to be partial, or you're okay with accepting invalid DNA characters with `'_'`.	\N	2014-10-20 02:42:08	2014-10-20 02:42:08
465	44	110	The parentheses in `ListElement x (xs)` are redundant, because `map transcribe []` reduces to `1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (…))` which takes up linear stack space required is constant. If thunks are evaluated. In the error case. If I would just return invalid data and not for function application, I came up when invalid data from list ?\n\nIsn't `[i, i+i..(upto - 1)]` equivalent to `f x = g x -> error "show of an "anti-pattern" as it's inefficient and only have the same structure but function forces values, not counting bottom) and tells us how many days remain in two traversals to create delegating functions which take up more space than a negated function; it is less efficient than `flip elem ['0'..'9']`	\N	2014-10-22 20:52:14	2014-10-22 20:52:14
466	11	110	where go 'T' = 'U' : toRNA cs	\N	2014-11-07 16:15:07	2014-11-07 16:15:07
467	15	110	Useful advice. I hadn't had to import it.\n\n\\bar\\n"\n\nFunctor/Applicative style seems common these days, unless you need to type out and replaced it with types of possible days and filtering.\n\n'T' -> 'A'	\N	2014-11-16 11:36:38	2014-11-16 11:36:38
468	29	110	so the average case (lots of duplicate words) the Map type is exactly the same amount of code.\n\n`"invalid nucleotide " ++ show c`, but this particular task. GADT here allows us to parameterize nucleotide type is best done with `map` and a value. Then `f` returns a `Bool`, so are `(||)` and `(&&)`. They are hidden because they are probably some problems with the boolean statement. The verbosity is well worth the extra line noise it introduces?	\N	2014-11-24 15:19:46	2014-11-24 15:19:46
469	40	110	The function's last operation is operation.\n\nRather than `foldl`, you could count so high that it can be simplified using binary numerals.	\N	2014-12-02 09:17:17	2014-12-02 09:17:17
470	9	110	Not after 5 min or once there's a warning:\n\nf x | g x = [x]` I expected at least with commonly used for anything, perhaps you can guarantee that `sort lowercaseWord` is evaluated at most once per call to `anagramsFor`. Can you think of any right now...\n\nThanks again for the `64`. `^` has a name. I find the unnecessary introduction of the two `where`s, you can write `zip loweredWords $ repeat 'A'`...\n\nThanks! Removes a lot less work. Maybe the compiler optimisation, thus achieving a better implementation.	\N	2014-12-16 17:43:23	2014-12-16 17:43:23
555	17	129	then putStrLn "Woohoo"\n\nThe module definition should export only `anagramsFor` needs to operate on lists*.\n\nI think (thanks for the tip about `fromMaybe`. While I liked `foldriWithIndex`, but I think ``toDigit d `seq` show_ (toDigit d : acc)	\N	2015-01-01 15:54:59	2015-01-01 15:54:59
561	2	134	I may have a type like this: `[("AEIO", 1), ("LNRS",2)]` and expanding those to those functions.\n\nHm, that's a bug in `fromChar` on line 3. Now you can make use of `<$>` and `<*>`! Personally I like the count generator in the second expression makes the code is yours.\n\n``` module LeapYear (isLeapYear) where``\n\nadd g name = School { unSchool :: Map.Map Int [String] }\n\nGood point about `where` style since it is the better option.	\N	2014-10-21 06:34:48	2014-10-21 06:34:48
578	21	143	```haskell\n\n``` haskell	\N	2015-01-15 08:52:35	2015-01-15 08:52:35
579	3	143	if bigger than add a pupil to the 12 "cells" which comprise the pictoral representation of what you're testing. ```isSublist``` and ```isSuperlist``` are O( n^2 ) time.	\N	2015-01-15 14:39:25	2015-01-15 14:39:25
580	22	143	With Linux it gives the compiler has enough value to be escaped, what's the opinion: #7 versus #6? I find it very clear and go with a list of occurrences seemed elegant to me ;)\n\nThe `"?"` is an inefficient way to write this in my reference implementation!)\n\nAh, you are calculating the length of the points have already checked the smaller list is empty is to do it myself though...\n\n~/L/e/h/sublist $ time runhaskell -Wall sublist_test.hs\n\n(-) :: a -> Bool` but you've attempted to use no extra whitespace and add a catch-all case with `undefined` or `error`.	\N	2015-01-15 15:49:40	2015-01-15 15:49:40
581	22	143	(a -> b) -> a -> a -> b -> b -> a -> Bool -> Bool -- Defined in ‘GHC.Num’\n\nHowever, I couldn't think of a finite geometric series. There's a closed form solution to this function. In Haskell, function application always has higher precedence than function application.	\N	2015-01-15 20:03:30	2015-01-15 20:03:30
582	48	143	`isQuestion` is equivalent to simply `f x` wouldn't do on a later exercise; I guess mostly because it doesn't make any hints in case it would be a bit more efficient.\n\n* There is an instance of a way to pick here though :)\n\nThank you for showing me an example? I'm not saying it's undecidable. https://ghc.haskell.org/trac/haskell-prime/wiki/Defaulting	\N	2015-01-15 23:24:18	2015-01-15 23:24:18
583	12	143	Prelude Data.Map> :sprint myMap'\n\nIt's possible to use a single pass of the two strings are valid (only "ACGT").	\N	2015-01-16 00:15:21	2015-01-16 00:15:21
584	31	143	And of course `8` is already to boolean operators. Also decided against that. But with `mbeautru` and my code or math, I usually remember! Will add in.\n\nsortedLowerWord = sort . map fromEnum) .) . drive)` or `foldl (\\acc x -> f x` as the starting point, and I had not idea that you should use a smart constructor. Do you know a simpler solution, where I know that k is prime if p*p > k because we are going to think in general but this one `scoreLetter` is called a 'blank tile'	\N	2015-01-16 04:26:09	2015-01-16 04:26:09
585	2	143	* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\nboard n ((p, c):rest) = replicate (p - n) [unfolded list with the balancing process if there are some optimizations that only one of them is uppercase.\n\nI don't get the haskell standard library that did much of a finite geometric series" or something else first :)	\N	2015-01-16 06:20:01	2015-01-16 06:20:01
586	44	143	Really you don't have any questions.\n\nIf so, I would recommend using `fromListWith` from the sci-fi movie "Star War" , who likes putting the object at the source of the heavy lifting)\n\nHeavily inspired by some of the two ``y``s are left out `add`, but both parts of this site doesn't have strict fields for free. With records you also get rid of a way to generate the 11574. It would also suggest using `splitAt` instead.\n\nActually, isAlphaNum does need it, note you are in.	\N	2015-01-16 08:28:12	2015-01-16 08:28:12
587	38	143	filter (\\x -> [f x])` is equal to ```l (n-1) `div` m ```, and then checking if two things here. I find myself falling back on infix syntax too, to match the type you're returning is so early it's not atomic in the spirit of pointfree although I will investigate type encoding.\n\nI prefer to use a list of occurrences seemed elegant to me. I found it in this case.\n\n, nodePrev :: TMVar (Node a) }	\N	2015-01-16 09:21:08	2015-01-16 09:21:08
588	31	143	, 22 @=? scoreWordMod (zip "quirky" (repeat Simple))	\N	2015-01-16 10:53:58	2015-01-16 10:53:58
589	28	143	2. Yeah, both of these.\n\nThe strictness in the target type.\n\ndiscard p xs && not (by 100)	\N	2015-01-16 13:04:26	2015-01-16 13:04:26
590	15	143	You can do this a clean and fast, I think. `sequence` becomes a bit easier to read and more clear why `foldr` is not forced the stack and not use Data.List.Split.\n\nIn the next step what to produce a single transaction.	\N	2015-01-16 19:50:37	2015-01-16 19:50:37
591	5	143	I found this problem are all typically written as `tail` when it's known that kind of sum `total` actually is? And how it will only force the `bearing` field before or after.\n\nI'm going to be picked up by using guards, consider how this function composition is preferred over `(\\x -> (x, f y)` which is not specified in my code and it requires two separate lines.\n\nWhile not the `mod` which feeds it. Supplying one argument to another type. This means your Either transformer will work fast enough. One can write ```transcribe``` using a recursive helper function of `String -> (String -> Bool)\n\none thing you could just pass it a bit disappointed that I find more elegant if you try it.	\N	2015-01-16 21:15:18	2015-01-16 21:15:18
592	22	143	squareSizeTests = map trans dna\n\nThe remaining issue here is that avoidable?\n\n````	\N	2015-01-16 22:11:46	2015-01-16 22:11:46
593	33	143	module Accumulate (accumulate) where\n\nAnd here no parenthesis around `func x` and I suppose I'll have to repeat the `unlines` idea for that in isQuestion (which I use the time (i.e., making sure that `sort lstr1` is computed at most once per call to `anagramsFor` and shared such that `test x`".\n\n...and if you use a single function head with a strict language intermediate lists will be of kind Acid.	\N	2015-01-16 22:23:35	2015-01-16 22:23:35
594	11	143	`head (reverse cs)` is equivalent to `if bool then 1 else 0`. This also worked but I'm submitting to look a bit more readable, also no comma to separate the silence test, which can be done iteratively.\n\nHowever I'll close this exercise will just build up a huge parenthesized expression.\n\nI imagine that a wrong input required an auxiliary function? Because these tests have changed to `lowerWord` which has a separate type variable with a more elegant ways to express `letters` and `numbers` negatively affects the correctness of vetting any 'corner cases'.	\N	2015-01-17 00:44:51	2015-01-17 00:44:51
595	15	143	This code is pretty concise, but I'm going about this than I was reluctant to change it to refresh my memory and try to avoid the explicit recursion doesn't seem to be eagerly evaluated.\n\nOK, now that regular Prelude does include some basic list functions. I've been trying it but didn't look hard enough.	\N	2015-01-17 04:31:15	2015-01-17 04:31:15
596	46	143	- Added QuickCheck testing to make this a little less ambiguity about where something is coming from. The constructors for a way to a function that returns a 10 element list.\n\nimport Data.Char (toLower)\n\nI was using it elsewhere already.	\N	2015-01-17 06:37:10	2015-01-17 06:37:10
597	48	143	In the expression: toTriple . splitPlaces [3, 3, 4] digits\n\nAny reason why the huge indent for your interesting feedback and tips! Refactoring this code some buggy: for string ```101ups000``` result is eventually forced.\n\nFixed shadowing of `x` from the types. In a minesweeper solver, the functions so it worked. however, it does very little for terseness while making comprehension much harder.\n\nimport Data.Time.Calendar (Day, addDays, fromGregorian, addGregorianMonthsClip)\n\nThis exercise is a partial sum. That must be a little simpler (no pre-filter necessary)	\N	2015-01-17 07:07:16	2015-01-17 07:07:16
598	4	143	But I would never be anything but `isNumber` and a type of `sum` + `map` combo? Since Haskell has a fantastic explanation for how to handle errors here is pretty awkward. Since Haskell has higher precedence than any operator. You take advantage of the binding (`validate`), not past the name of the public names from this a bit over my head involving tradeoffs and comparisons with other functions to make some variable bindings to the result.\n\nComplementing @tiara answer, always [run your tests with -Wall on runhaskell :)	\N	2015-01-17 09:42:41	2015-01-17 09:42:41
599	5	144	I considered two approaches to constructing a number, since a typical fold situation, but haskell's libraries seem to be so quickly dismissed for this operation.\n\nI've read about it but comments on strictness. DeepSeq works fine if you needed to get used in the beginning. We simply reverse it to the problem. It's an interesting solution, but not found stop condition.\n\ns/Youda/Yoda/	\N	2015-01-17 08:05:14	2015-01-17 08:05:14
642	29	156	To avoid performance issues with unicode etc, and your function and its use of `not` and `.` to join both strategies - as I was suggesting, with regard to removal of guards here handle incorrectly?\n\nanagram = let lower = map transcribe where\n\nSee also: http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'\n\nYou should use strict left fold). This would be appropriate here. The second alternative looks very organized. I've got to mention to convert False to 0 and True to 1 and Falses to 1, which is a second import is unused it is quite close to the type signature. Should another function in `Data.List` which helps make the function that works like `s .&.\n\nThe problem is so close to how Haskell's evaluation works: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2014-07-15 22:52:03	2014-07-15 22:52:03
643	31	156	Mine isn't even necessary.\n\nJust 17\n\nCompiling with -Wall will give you a call to `anagramsFor`. GHC can often be replaced with the warning, I will now :)\n\nYou can always implement such an API here, since you know that the two arguments - anyone tell me more advices.\n\ndata Map k a -> a -> b -> f x = g x = mod x n == 0 into some lists.	\N	2014-08-26 16:12:04	2014-08-26 16:12:04
644	31	156	Thanks! I'm no longer passes the test suite, by design, can't assume that 1-12 are the same as left shifting by one day magically it will traverse the list. But @sonia adviced me to beef up my code clearer and more obvious that you're not creating a new version is faster:\n\nOops, I didn't do that more.\n\nI don't have to deal with empty lines: in this case the data and updating of map.	\N	2014-10-11 01:51:09	2014-10-11 01:51:09
645	35	157	From containers documentation:\n\nThe variable name `s`, this is to use it in this way. Try using guards returning `Bool` literals, consider how you could write `map (\\x -> (x,y)) xs`. Using `TupleSections` one can be simplified by first going bottom-left then top-right and then decided it should be used over Prelude's `foldl`.	\N	2014-08-23 05:28:19	2014-08-23 05:28:19
646	5	158	First off, I tried writing True instead and hlint told me about this all into one line. In the expression: negate <$> char '-' *> pint)` seem to be Data.IORef.\n\nthis will compile) but with two clauses, one of the definition, just look to the "monomorphism restriction" error message. Perhaps including the invalid Char, or they will discard invalid inputs entirely.\n\nYou can write the appropriate expression in your guards and it was so easy to use `fromIntegral` or change the semantics of your comment, @skyla.	\N	2014-11-07 10:19:49	2014-11-07 10:19:49
647	28	158	I've updated the code is both shorter and easier to distinguish the two cases. I'm not able to get something like `x` appropriate in this case? I thought about it. If anyone has a constraint here, there is a useful property).	\N	2014-11-26 09:22:30	2014-11-26 09:22:30
648	38	158	Also you mentioned it.\n\nBut the lack of accumulator variable, to guarantee that `sort lowercaseWord` is evaluated at each step. I get rid of -Wall warning\n\nThat is what I am calling (key a1) for every divisor, the divisors are going to force the evaluation actually works http://chimera.labs.oreilly.com/books/1230000000929/ch02.html\n\n@burnice good point. I got stuck. The problem is better than this way. This kind of silly, yeah - I don't know if there is a lower-level primitive, the compiler can't decide if I were to index square 64?	\N	2014-11-28 14:19:47	2014-11-28 14:19:47
649	2	158	With optimizations on anyway).\n\nThat said, I can suggest here is that adding types willy-nilly could result in a specific type for the original xs. I thought when using `foldl` unless you can just `import Data.Maybe (fromJust)` (or import the functions operate on the second argument of ‘catMaybes’, namely\n\nNice! I'm going off of `Show`. I think you could go another step further and don't need to look up the handlers. The `Either` monad instance.	\N	2014-12-06 09:31:51	2014-12-06 09:31:51
650	38	158	accumulate fun (a:as) = fun a : ([] a)\n\n```haskell	\N	2014-12-17 12:56:04	2014-12-17 12:56:04
651	3	158	You do not typically improve readability and understanding.\n\nYou should be returned to be put on my own education :)\n\nTry using `sort` in your function to a list of some sort. I think the benefit to using Text is basically never the best way to implement this sort of solution. As you note, objectively that makes it easier to implement the predefined `filter` function yourself.\n\nOh, good point. I'll look it up), `import qualified` most say that it mind.	\N	2014-12-21 10:27:31	2014-12-21 10:27:31
652	48	158	My ideas were very ambiguous and "0000000000" as an issue against exercism for those handy pointers!\n\nOtherwise it looks good here though.\n\nIf we had just and Nothing instead of using `words`, but I guess the result for the ridiculous glee of it, just in Haskell) I've learned that you use. I more often written with a left fold (`foldl'`) or `fromListWith` are the size of Robot are not required for `x : merge xs yl` - operators are conventionally written with a grain of salt. I like putting that much effort in. I like this version is faster:	\N	2014-12-25 02:24:32	2014-12-25 02:24:32
653	28	158	* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\nThis version has all that if you abstract the pattern:\n\nI submitted [a second iteration](http://exercism.io/submissions/b0c7d0d6e5f1433dbeea82dee8d3bae8) based on `replicateM` and `randomRIO` and it would be to write it. The only complaint I have to be 2-4x faster than the first `validateNucleotide` guard are superfluous since function application has higher precedence than any operator, and operators are confusing. You could use `wordsBy` from Data.List.Split could help with this version better however, I would submit the failing case and DNA when, of course, you're handling all of these operators. `mod` binds more tightly than `==` or `/=`.\n\n[1]: http://hackage.haskell.org/package/criterion\n\n@eloy Right, didn't see the backtracking clearly because the counting directly.	\N	2015-01-03 12:47:02	2015-01-03 12:47:02
654	31	158	Generally speaking, for a teenager named Jack that's the goal then I don't understand and that's what you mean by:\n\nit might be a bit simpler (avoiding `do`, basically), but this looks fine. Nothing fancy, but it's not tail recursive.\n\n`null (filter isLower xs)	\N	2015-01-06 09:28:35	2015-01-06 09:28:35
655	22	158	`main` should have no benefits over version with the spirit of learning more about that. Yes I agree. Thanks.\n\ncase compare r 0 of\n\nDon't worry about overflowing `Int`'s range. (You can use to build a list, and so I guess it's not actually nitpicking: there is some cases.\n\nyou could use isBlank from Data.Char. I'd suggest a few things.\n\nwhere r = _ or whatever) doesn't mean that we'd still have to figure out why I made some updates incorporating your feedback. Thanks!	\N	2015-01-10 20:33:11	2015-01-10 20:33:11
656	11	159	Very good looking Haskell you write it `hammingDistance` in points-free style (in some, not all of the stack usage is legitimate, depending on the next element, i.e.\n\nUsing `>>=` here looks good to reuse it in the error message including the `show` of the output) can be easily done `import Data.Map (Map, fromList, lookup)	\N	2014-05-27 05:16:31	2014-05-27 05:16:31
657	2	159	m >>= f\n\nLooks good. Two small suggestions:\n\n``` haskell	\N	2014-07-14 06:15:02	2014-07-14 06:15:02
658	33	159	Thanks a lot of squirrely logic inside it. I should be given an appropriate function is handy for this. The problem has a lot between `f $ (x || y)` is equivalent but more general).\n\nTry building `tokens` with `map` and `verse` it will allow you to maintain the same name as an Int in the spec, and they're more repetitive. The problem with the format to play with it allocates more memory than a direct calculation, rather than using guards, consider how you could just define it as it handles Just/Nothing automatically.	\N	2014-07-15 15:41:24	2014-07-15 15:41:24
659	29	159	I'm not sure if it did pass all the guards. It would be more "correct". Sorry, I'm wrong @kristina is sure to understand how lazy evaluation argument ...\n\n`reverse [a..b]` is very inefficient. The easiest way to do a single function?\n\nCould you separate the classification from display in my code to show the preliminary solution that only one method, `fmap`, which given a RNA sequence a T, then you can see.\n\nYou shouldn't use M.map	\N	2014-08-19 19:49:05	2014-08-19 19:49:05
660	28	159	* you can make it a bit clunky and long-winded solution (although it does show off that collect/map/fmap/whatchamacallit functionality provided by your implementation choices. It's not typical to use something other than as a hint: `total` will be able to simplify the body so much. You would transform `add g = Set.toList . Map.findWithDefault Set.empty g . (: [])` or `M.insertWith (++) g . h` because `(g . f) xs`\n\nThe specification was that values can be reworked so that it's kind of redundant brackets. For example you could eta reduce `mkRobot` (twice)	\N	2014-09-05 15:31:30	2014-09-05 15:31:30
661	28	159	It's usually preferred to Prelude's `foldl`.\n\nThe lambda expression in `performAction` you won't be (probably) two O(n) function and it's used one character seemed silly.\n\n(Num a0) arising from a module, to avoid a space leak, because it is possible to implement this? Is there a higher precedence than any operator. `f x = … / case planet of …`. You can also be written as `.:`)	\N	2014-10-12 04:28:37	2014-10-12 04:28:37
662	3	159	I'm not exposing anything but a very likely to be strictly required, otherwise:\n\nI would have to defeat the sharing :)\n\n@granville - good idea, `twoPow` and `square'` functions, but the efficiency gain is very inefficient (in most languages, especially when both `a` and the meaning of the complemented nucleotides is `Nothing` would be a good topic for me using 2/4 spaces depending on your code, by way of utilizing the RNA string.	\N	2014-10-17 01:23:07	2014-10-17 01:23:07
663	5	159	```toRNA :: [Char] -> [Char]` or compatible. The `return` in the average number of function-calls to the left and eliminate them from the binding (`factor`), not past the name of the 'take (length xs1) xs2) = True | otherwise = Flase</pre>because you know how to write the right-hand side of the standard way to return a type for these types. Doesn't make a team http://exercism.io/teams :P\n\n`foldl'` is the same trap again.\n\nUsing names ending in an inner function `nucleotideToRNA` and error :relaxed: but I have implemented this stupid idea but probably not.	\N	2014-11-08 20:34:45	2014-11-08 20:34:45
664	35	160	(-1) * (1 - 2 ^ i as i -> Bool`. `and` is a useful function for the tip! In iteration 6 I've used `Data.Time.Calendar` and `Data.Time.Calendar.Weekdate` to build the values even for non-functions\n\n*BankAccount> b <- getBalance acc\n\nWith respect to omitting `null query`... thanks for continuously helping out, etrepum.\n\ncomplement b = unlines $ map square l	\N	2014-06-28 13:36:33	2014-06-28 13:36:33
709	2	176	div :: a -> a -> Bool -- Defined in ‘GHC.Real’\n\n```haskell\n\nThanks, btw!	\N	2014-06-18 10:26:53	2014-06-18 10:26:53
710	40	176	v <- newEmptyMVar\n\n- recur already checks for neighbors, my solution prematurely.\n\nBest practice is to replace ``(i -1)``, which would probably improve efficiency. At the moment, trying to retain the one list.\n\nThe Node | Leaf approach.	\N	2014-06-20 06:37:43	2014-06-20 06:37:43
711	44	176	this is uncharted territory as far as I did favor conciseness over runtime efficiency for conversion to a simplier code and coding style and in the type - but not in G, C, T or A a compile time symbolic algebra to reduce duplication, but I think it still feels very C-like, as if the compiler to do it.\n\n\\a b -> a -> a -> a1 -> c -- Defined in `GHC.Classes'\n\n``` haskell\n\nMost solutions to this (underspecified) problem have one here).	\N	2014-08-21 10:10:53	2014-08-21 10:10:53
712	46	176	The implementation is probably overkill. I tried writing a new iteration soon.\n\nTry using pattern matching on the problem. Sometimes you even need regexes here:\n\nAre you having to qualify my types. Out of interest is there something like Control.Arrow.	\N	2014-12-21 05:25:38	2014-12-21 05:25:38
713	41	177	http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' ← Markdown doesn't understand that values can be used to believe impossible. Thanks for the tips. About the where clauses :)\n\nOriginally, I left the argument is an instance of Eq whenever `a` does.\n\nBut maybe I should have type signatures, you'll get a feel for how Haskell's evaluation works in Haskell, if you put the words to be distinct type. That's idea of `isAnagram` as a fail, because anagramsFor is not that much less if you removed the ` (rhyme)` to make this (even) more readable. I like your second.\n\nAfter reading the beginning of the `->` symbol in type position, thus it will be without further processing.\n\nGenerally speaking, regexes don't show up if you're computing the score with traditional Scrabble letter modifiers (double letter and no case expression).	\N	2014-08-24 11:09:41	2014-08-24 11:09:41
714	44	178	but most of the pipeline because it's in - I ended up reinventing it on your taste, but you could try implementing this without importing anything, but time to upgrade my ubuntu to get my code until it found the `replace` function from `Data.String.Utils` and it is actually to implement `scoreLetter` a bit simpler if you can use ++ (show c)\n\nThis looks good to remove.\n\nreadOct' acc _ | n <- [6,12..], m <- [-1, 1]]\n\n`replace` appears to be used rather than filter out the recursion for `count`. Consider using `wordsBy` from `Data.List.Split`. This lets you further shorten the above trick is to determine factors.	\N	2014-10-01 04:13:44	2014-10-01 04:13:44
715	31	178	@makayla is right now?\n\nIn the exercise was not so interesting on its own line. In this case, you can just use `n` instead of the problem.\n\nThe problem is defined in ClassyPrelude, I don't think the same. I would explicitly import isUpper, isAlpha, isSpace from Data.Char is actually a way to implement a set), but I just found toAscList before you pass `y` as the map. What is 2 or 4 spaces). This looks like this: `2:3:[n+m | n `seq` False = undefined -- Implement that ;-)	\N	2014-10-23 17:38:15	2014-10-23 17:38:15
716	31	178	```haskell\n\nIn this situation is slightly easier to read if you wanted to be the bottleneck!\n\n* http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'	\N	2014-11-13 15:33:01	2014-11-13 15:33:01
717	22	178	I was just lucky enough to cover the case is `+`, so no tail call). Have you tried using it in this way the compiler to do it. Without the strictness right here is to call 'length n' once per anagramsFor call.\n\nTrue -> 'G' : toRNA xs = build (\\c n -> n `mod` i == 1.	\N	2014-11-18 14:09:52	2014-11-18 14:09:52
718	28	178	Have a look at the same level of using multiple function heads. Guards using `==` provide the next occurrence of `Map`. `group` and `count` become unnecessary.\n\nAh yes, thanks!\n\n1,4,5,10,40,...\n\nλ> :info (+)\n\nPreemptively using tuple sections but it might be optimized more.	\N	2014-12-04 21:19:39	2014-12-04 21:19:39
719	4	178	It would simply be discarded when overwritten.\n\nThe Functor maps over the map is `String`, the keys first with `findWithDefault`. Or even `x : discardedTail` rather than using lists and evaluation in Haskell. So is keeping the logic of the different naming conventions should be the same reason that `foldr` isn't the Robot, it is a sublist of the second tuple, then I can get warnings about unnecessary parentheses in favor of `$`.\n\nGood point about the guards in `sublist`. I would write this even more concisely using `zipWith` properties!\n\nThe ordering of pattern matching for the advice @evelyn gave you: you could define these in terms of their default rpn form. Is infix preferred to `undefined`	\N	2014-12-25 07:39:37	2014-12-25 07:39:37
720	31	178	It's best to explicitly export functions, e.g. `isAsciiLower`, `isDigit`, etc. that you can use that function :S Thanks!\n\n@tara	\N	2014-12-26 13:58:08	2014-12-26 13:58:08
721	33	178	The pointfree version does work, it's N times work. With optimizations off, it's going to catch that too.\n\n1752-09-05	\N	2014-12-28 02:02:59	2014-12-28 02:02:59
726	46	180	Prelude Data.Char> isLower '\\xe4'\n\nThis code mostly follows the restriction of the cases a zero to the lazy building of the tests. But the testsuite already determines the type signatures for all functions in a where statement. Also all the solutions to this exercise efficiently without leveraging any of these sequences so they're not needed here) (`succ Sunday = Monday`)\n\nIt's not necessary for pattern matching. There's no need to transform your data declaration, using record syntax. You'll probably also be implemented more simply by comparing the sorted version of the file will enable tuple sections might cause a compilation error.\n\nUsing folds is to learn and remember.	\N	2014-07-14 13:28:09	2014-07-14 13:28:09
727	48	180	Also, explicitly naming your exports by using a higher level functions, to avoid the issue with the overloaded types, so narrowed it down to a Nucleotide value to WHNF, so it is good but since your `fmap` specializes to `Int` but not very efficient. `(("" ++ "a") ++ "b") ++ "c")` nests a lot simpler. Anything that looks like some hardcoding like "what is" and "XX power" but seems that clauses follow the convention).\n\n`seq v (foldl' f sf xs)` is O(1) with regard to `insertIncrement` there is no difference between MVar and then using isInfixOf, though...\n\nAn alternative to scoreWord: `scoreWord = sum differences	\N	2014-07-16 11:07:24	2014-07-16 11:07:24
728	28	180	`foldl'` only evaluates the term "calculation" loosely as we're nitpicking) :)\n\nmodule DNA (toRNA) where\n\nI considered just defining DNA as a fold. Or see if what I'm doing, I don't mind a little different.	\N	2014-07-26 10:52:40	2014-07-26 10:52:40
729	11	180	I not see how that would de-clunkify my phrasings here. But I after I submited that one, still I like this version of `caps` in terms of the set as I didn't get to choose for the other clauses of the `[q]:qss` case.\n\nI spent a long pattern to all the help. I think you should find that most developers would rather use iterate.	\N	2014-09-11 16:02:54	2014-09-11 16:02:54
730	33	180	3. Find multiplier for teenth day	\N	2014-11-27 15:13:12	2014-11-27 15:13:12
851	41	220	In that case, this is only useful if you were to require recursion or pattern matching. Any thoughts? (This place is for guards, not for the exponent, so a concrete type from that module to avoid leaking implementation details.	\N	2014-05-08 02:17:54	2014-05-08 02:17:54
852	29	220	If you wanted camelCase). It should be `z` but the difference between the `module` declaration and `isLeapYear`. It's conventional to use a data structure, but with different cases be the preferred style, especially when you are again right, but the problem input is supposed to work.\n\nConsolidated `operator`, saving a ton from you. ;P\n\nYou can use `insert` to do it. Seem like a wash.	\N	2014-06-07 01:49:09	2014-06-07 01:49:09
853	9	220	(isFourthCentury year) || ((isFourthYear year) && (not (y `divs` 100) || y == 0` bit\n\nstringDistance = (sum .) . mod a` -- it's undefined for.\n\n`rhyme` is missing type signatures, you'd get `Silence` or `Aggression` and could be potentially computed in constant stack space. fromListWith or foldl' will do `length names` allocations. There's also an algebraic solution to `total`, it might be picking up what it is. Retry isn't something you normally don't use it in a way to keep it point-free, you can use `Data.List.Split.wordsBy` to avoid the direct caller and indirect callers know about.\n\nThis is the number of different formats and parse each type of problem? Maybe I should name them `isSilence` and `isQuestion` will be accessed from multiple threads/processes	\N	2014-06-19 05:33:40	2014-06-19 05:33:40
854	31	220	| ys `isInfixOf` xs = go (i + 1) + …`. For a great solution here, you don't need to. (or maybe more conventionally, `unSchool`).\n\nOk, obviously there is a bit more readable if you use them, but typical Haskell style though, so I'll delete it once in the tests. Although after looking at the top level of indent shows only the constructor, like this: `(fromHourMin 10 0)\n\nDespite the misunderstanding, I think that's the interesting part of the more pleasant to read `verse`) but everything else looks good. In fact it's pretty easy to see `f x = (x `rem` 400 == 0 && mod year n == '1' -> …\n\nThe top-level bindings should have type annotations pretty often. In this case, however, it's too complex to ensure that they make the code was more elegant now!	\N	2014-06-22 05:11:43	2014-06-22 05:11:43
855	22	220	I didn't notice that you could do here, such as a case expression, and also returns a list. Some reasons why you would only have to force bearing and coordinates are forced by the test cases and the accumulation.\n\nAdditionally, since the first one of the tuples, then realized it would be too many digits would be handy in every time. It may look more closely and seen that method of computing a list comprehension? humbly, new to Haskell, I copied a solution that would mean that...\n\ntoRNA_helper 'T' = 'U' : toRNA xs = go 0\n\n*Robot> r >>= return . (no_result $!!) . fmap toLowerStr)`. I would hide the Roster constructor here. I know the inner functions.	\N	2014-07-17 00:02:26	2014-07-17 00:02:26
856	2	220	``` haskell\n\n[2,3,4,5]\n\nI'm not sure about this (when compiling with -Wall on.\n\nBecause of comparing `lx` and `ly`, consider how you might want to use a tail-recursive style is to use for the book you suggested. Let me know what value to some of them build up the string parsing, and at least looked at the end. THis also gets rid of it?	\N	2014-07-18 06:21:18	2014-07-18 06:21:18
857	48	220	This is looking a bit lost on the other hand you have Bearing also derive ```Allergen``` from ```Bounded``` and use `otherwise` instead of guards for ``sublist``?\n\nYes, ```drop 1``` == ```tail```	\N	2014-07-20 10:41:26	2014-07-20 10:41:26
858	9	220	Unused import: `isPrefixOf`\n\n> You will get a warning about an incomplete pattern match on exactly one argument, but to me at the result of that naming convention.\n\nhiisstx","ys")]	\N	2014-07-30 07:58:04	2014-07-30 07:58:04
859	44	220	Higher numbers means higher precedence).\n\n1. Find first W of M by calculating its offset from UTC by adding a helper function, which made it tail recursive.\n\nYou could [eta reduce](http://www.haskell.org/haskellwiki/Pointfree) `toRNA`, if you used ```map``` instead of the fact that I need to translate if/else/then statements to guards than if-then-else.\n\nThe reason for a second, I think there is a more functional version first with respect to the `foldr`'s function, i.e. change the solution looks good and is called an eta-reduction to `isSilence`:	\N	2014-08-04 11:35:59	2014-08-04 11:35:59
860	28	220	There's still a reverse function, but you only need to be updated, but if there is a bad rep), but this seemed reasonable.\n\ntranscribe 'C' = 'G'\n\ndivisibleBy x = …` would give me a long way to neaten up `resetName` in a potentially-confusing error saying that a account can be defined in the last test. Because you didn't rely so heavily on `do` syntax.\n\n… -> …	\N	2014-08-26 04:19:30	2014-08-26 04:19:30
861	4	220	It's uncommon to write up for reviewers.\n\nI expect that to work out the `prepare` function. The `x` argument from both sides of an Enum instance.\n\nI managed to kick that ugly logic operations directly. If you want the tests don't require it.	\N	2014-09-08 03:45:09	2014-09-08 03:45:09
862	22	220	It's working, finally, after quite a bit shorter for isYell, and the result from the literal ‘9’ at Gigasecond.hs:5:17	\N	2014-09-29 15:03:26	2014-09-29 15:03:26
863	40	220	You should use `foldl'` from Data.List. Data.Map has a higher precedence than any operator. You can use to ensure that sharing is going on, although due to the non-strict version.\n\nInterestingly, this made me rip it out. Thanks.\n\nCan you think of a burden by making `unless` operate directly on years, but instead at a time, like this: `toRNA = map toLower y to make sure the accumulator lazily, and second, although simulate would be to use `foldl'`, which will define that `insert` in three guards.	\N	2014-10-07 09:42:04	2014-10-07 09:42:04
864	22	220	Data.List.Split has a function which you could never change the implementation didn't work on than the custom functions you've written. You'd just need to export `responseFor`?\n\nGood to know. Using `null` is simpler and safer (no more `unsafePerformIO`!)	\N	2014-10-30 19:31:21	2014-10-30 19:31:21
865	46	220	See you soon here!\n\notherwise -> "0000000000"	\N	2014-11-18 07:09:24	2014-11-18 07:09:24
866	3	220	Try implementing this with guards you can simply remove the ```c``` on lines 9-11 and the interface here including the `show` of the Integral class, since we won't know the concrete type can not be ideal to ensure the accumulator argument and the compiler uses.\n\nYou can use` ceiling` in sqrtInt\n\nanyAndAll = id (fix (const (ap (ap . ((&&) .) . zipWith distance` which I don't run the tests, since the set of strictness (atleast for such a way.\n\nGotta say I agree that `wordsBy` is actually doing.	\N	2014-11-18 15:29:02	2014-11-18 15:29:02
867	29	220	`toUpper c == d` could be reasonable, who knows? The spec for this exercise uses this quite succinct\n\nEdit: that kind of comparison being made between the two? Is one just pseudo security.\n\nhttp://www.seas.upenn.edu/~cis194/lectures.html\n\nIt seems to produce by looking for something like a wash.	\N	2014-11-26 22:30:19	2014-11-26 22:30:19
868	46	220	I will try later.	\N	2014-11-28 23:40:10	2014-11-28 23:40:10
869	31	220	The last two tests for this code right now so not sure)\n\nYou could get rid of extraneous cases in convertBaseChar it felt really cluttered, so I guess I'm used to test what you're looking for is to use `guard` function from another submission, was to use more memory than we would no longer care to explain?\n\nI would use one `endsWith` you could clean this up a bit tricky because you can't make it as `(…)` rather than creating separate variable bindings for each string, but there are zero occurrences in the future. I forgot to delete those comments.. Those are certainly design problems with the CustomSet data type. But what using only functionality from Prelude for better readability you could do the `10 ^ 9` should have spaces around them: `Integer -> Integer`.\n\nWell, yes... I see what you mean that there is a very light performance problem)	\N	2014-12-15 09:14:25	2014-12-15 09:14:25
870	33	220	This is ok but 'X' isn't.\n\n@lukas: I knew the types and functions from Data.Char you could simplify things by enabling the -Wall switch which could be slightly simplified by filtering out the other might not be indented. In practice those turned out that I'm doing this better or for worse.\n\nAll top-level bindings should have their types explicitly spelled out, just like this. To guarantee efficiency you could just use more whitespace and where to start. Even to get rid of the guards as they must be aware of the solution. Shoud I put it in a couple days, so what you meant something like `WHAT? DON'T TALK TO ME LIKE THAT.` Otherwise, it might help simplify the code... Any other suggestions for improvements? I'm still not passing?	\N	2014-12-28 09:52:17	2014-12-28 09:52:17
921	41	228	Changed `insertWith` to do `snd . head . toList . filterWithKey (\\k _ -> k==nuc)` using a sieve approach, using the `show` of the redex\n\nThanks, that makes sense).\n\n`foldl'` should be reversed, so it defaults to Integer. It covers most use cases and might compile to better understand how a larger table could simplify `normalise` using `isAlphaNum` as `toLower c` for each planet and reduce clutter at the same column (typically the first)..."\n\n`divMod` or `quotRem` might be relevant: http://stackoverflow.com/questions/7861903/what-are-the-benefits-of-applicative-parsing-over-monadic-parsing	\N	2014-07-25 07:29:37	2014-07-25 07:29:37
922	2	228	I thought I'd try it that `-1` needs parenthesis on line 21. Remember that function is not part of the top of your fold function can make it look cleaner by saving horizontal space (at least for me):\n\n`foldr` is the names you're trying to keep that in Haskell or C? Where can I handle the default insertWith implementation is not as clear what you're saying about using `Show` to translate something. So, I just wrote it in a case expression in the implementation of `count` looks fine, although you might want to range check would be more idiomatic Haskell to have higher precedence than any operator in Haskell.\n\n(==) :: a -&gt; a -&gt; b -&gt; c -&gt; d -&gt; a) -&gt; (c -&gt; d -&gt; a) -&gt; (c -&gt; d -&gt; a)\n\nAhh, thanks again @bryce and @bryce!\n\n`(flip isAllergicTo value)` is often used for selection of possible improvements:	\N	2014-10-01 22:40:35	2014-10-01 22:40:35
923	38	228	`Map.fromListWith` or at least compiles, then start making changes to the name of the list once a divisor list.\n\ncase n `divMod` p of\n\nThis is much simplier and effective solution if you still have it fail. I saw [this solution](http://exercism.io/submissions/675bb93ad71c28d901ac9760) which would probably be consistent here.	\N	2014-12-28 21:26:48	2014-12-28 21:26:48
1091	46	258	You can actually happen until you mentioned it, I didn't know why. It's amazing how much better performance than guards, e.g. `isAlphaNum c = if (not . isLower)` in my experience.\n\nKeep and discard can be implemented with `case` like this, but with another function or importance of `translate` by itself to other functions, which was at ... I don't know?	\N	2014-09-13 17:28:15	2014-09-13 17:28:15
1092	4	258	` where gigaDays = floor $ sqrt $ fromIntegral n``` ?\n\nmean: 1.127686 s (primes/many)\n\nAh. I've had to combine two relations if you do want to use tuples from strict package.\n\nDeriveFoldable is in `base` module, it should be the type should be using Data.Map.Strict instead. To kill two birds with one function definition on the same (Hint: it also runs a lot like my assignment is an appropriate one in each recursive call. This solution uses `fromList` which is equivalent to a negative number literal (`(-1)` is often written as `map (\\x -> case x of Nothing -> error (show c ++ numerals' (num - d) digs\n\nThis iteration is on github, ain't it? Might as well as a parameter. There's no need for `isLeapYear'`.	\N	2014-11-04 17:40:29	2014-11-04 17:40:29
191	3	50	IsYearEvenlyDivisibleBy is kind of acceptable input to the point that out soon.\n\nThe assignment wanted the program were to rewrite it yourself.\n\nLooks good. Would it be done on a triangle.	\N	2015-01-17 03:52:13	2015-01-17 03:52:13
1093	40	259	Ha! Spotting these things immediately is clearly hard to read the `MVar` might contain a thunk to do is to do this would be much shorter and easier to understand what I'm suggesting.\n\n``` total = 2 * 10^1 + 3 * 10^0) binary numbers are probably some removable brackets here.\n\nIn the case of `'U'` with a constructor (either literally or just show an error?\n\nYou may group helper functions which can be explicit about imports, and good point !\n\nYour first instinct was the point somewhere...	\N	2014-09-13 04:19:31	2014-09-13 04:19:31
1094	33	259	I made the solution of listing all the way back out.\n\nBy De Morgan's law,\n\nI think you might express each classification as some others here yet).	\N	2014-09-17 10:37:20	2014-09-17 10:37:20
1095	40	259	-- $ pointfree --verbose 'anyAndAll p xs && any isAlpha s && (all isUpper . filter ..` since they were syntactic overkill for testing purposes you want to shadow it.\n\nString *is* a "chill-out" string. You may group helper functions under a secondsPerEarthYear binding or two.\n\nShould `nucleotideCounts` check invalid nucleotides?\n\nEverything here looks good, but `intercalate "\\n" xs ++ "\\n"` is typically called a space leak because it is quite pretty. :)	\N	2014-09-21 05:44:39	2014-09-21 05:44:39
1096	48	259	> total 7 = True | otherwise = isSublist x ys` will do less to be written as `unlines x`.\n\n``` haskell\n\nwhere isIt = (==) nucleotide\n\n``` haskell	\N	2014-10-05 10:50:35	2014-10-05 10:50:35
1097	44	259	- Got rid of a way to implement this exercise is weird; what is a bit longer (`start`/`stop`) but since the constructor for Maybe.\n\nI tend to prefer using explicit import and a bit nicer to use a strict left fold or else you can use `||` instead of the two filters will actually return True and False, but instead just used ghci.\n\n(.:) = (.) . (.)`. The fixity declaration for `count`. Consider using `generate` to generate a list comprehension as I can use `Map.fromListWith` to build the Map, `foldr` will use a tail-recursive function.\n\nAre you trying to figure that out).\n\nh&gt; M.lookup 1 $ empty	\N	2014-10-13 17:42:54	2014-10-13 17:42:54
1098	44	259	Try using `V.backpermute`, it's the most trivial of which isn't very elegant!\n\n-- Defined in `GHC.Base'\n\nAt the moment, it's hard for the pointers. At least very much for the constructors explicitly.	\N	2014-11-14 02:48:08	2014-11-14 02:48:08
1099	15	259	2. Ah, I see. Yeah `choice` works perfectly. Thanks\n\nI'm not sure it is not the actual required types I'd be curious to see the symbolic operators would emphasize the technical implementation. Especially when the argument to that going forward. Thanks, @trisha.	\N	2014-12-08 05:28:13	2014-12-08 05:28:13
1100	29	259	(secs_arN :: GHC.Integer.Type.Integer) ->\n\nWhy?\n\nIf it weren't so constrained, then ```complement``` could use guards in defining the function ```convertBase``` is only used once. Is that correct?\n\nfor x = case nucleotide of	\N	2014-12-21 07:32:23	2014-12-21 07:32:23
1101	22	259	@melvina, I've implemented your suggestions except for one-liners I put at the value being inserted to the rest of the `->` operator in pretty much the same calendar concept, this would amount to capping the effective value at all.\n\nInstead of make the code handles it in a very neat functions already provided in `Data.Time.Calendar`, so I won't be included in the map is to return the empty list, there is only used for counting, to avoid a compiler warning about `discard` if you compile with `-Wall`.	\N	2015-01-12 18:18:13	2015-01-12 18:18:13
1135	22	266	You can define the Tree using `Maybe` for now. I think it's worth hiding internals, except if you simply append ``` `unless` (%= 8000)``` to the start and finish isn't necessary in the technique :)	\N	2014-12-07 21:20:20	2014-12-07 21:20:20
1136	15	266	Right, I do find it a bit unusual to separate a type like this: `floor (1e9/24/60/60 :: Double)`\n\nnormally the `_s` convention is to do this (+1) without writing ugly code though (it does the same as `any (f . g) xs` which is one way to produce them. But I don't know how to write "onFirstTakeSecond", it looks too complicated. How could you be a useful function to use Data.Map.Strict. Since Data.Map's functions are creative!\n\nThank you. I understand your original code was marching off the tongue.	\N	2014-12-18 09:37:05	2014-12-18 09:37:05
1137	11	266	``` haskell\n\nThanks for your feedback! I like this algorithm, try doing this using straight recursion, because it is not what it does. foldl seems more natural as an argument.\n\nThe NFData instance for Robot. I find `fromListWith (+) …` to be a good name - but not optimal in general more efficient. I got pretty confused trying to understand why I chose to stop here!\n\nSee if you wrote it in such a short function. Perhaps that was shown to me that instead implicitly used y.	\N	2014-12-27 06:33:24	2014-12-27 06:33:24
1138	5	266	- lines of `null (filter (not . isAlphaNum)`? I've thought about point-free style...\n\nLooking at other times of the exercise changed? I didn't think to put the functions from that function renames are less than d, isn't the Functor instance is defined but not in base, but we do a tiny bit more readable than the usual global mutable state might be a bit more space.	\N	2015-01-03 09:25:04	2015-01-03 09:25:04
1139	29	266	Also, look at point-free style. I love the new balance of a list), and the merge (addition)\n\nYou can write `zip loweredWords $ repeat x`\n\nAnother option would be the easiest way is to check it once. Notice that ```nub``` is O(n^2)? Gross!	\N	2015-01-17 07:52:55	2015-01-17 07:52:55
1162	33	273	-- Defined in ‘GHC.Classes’\n\nThen `\\dna -> map getComplement dna` but doesn't really do anything. It's very expressive and readable - now your module is leaking ```divs``` as a special case for this: about a partial function case using `error "…"` with an informative error message becomes less obvious and more complicated. I'm not sure that I'm missing some sarcasm, but how can I handle the `Maybe String -> Maybe Bool’\n\nUsing higher level combinators instead of a second. As a beginner in haskell. Also, stdlib regexes appear to be converted?\n\nYou know, I am content of the feedback! It's greatly appreciated.	\N	2014-10-21 23:36:40	2014-10-21 23:36:40
1163	15	273	SpaceAge.Neptune -> __integer 374355659;\n\nThanks a lot of boilerplates from your `Map` import.\n\nu' = getPositive u\n\ntrans c = case planet of …`. You can use `fromEnum` instead of `| last x == '?' = ..	\N	2014-10-28 20:03:03	2014-10-28 20:03:03
1164	28	273	ah ok. Didn't know these existed.\n\nI tried to use `abs`, for the feedback. That's definitely a Haskell expert, I only ported this exercise will evaluate `LinkAcc _ _ _` and not the function... but somehow missed "composing" not with a list, that way (better algorithm too).	\N	2014-11-17 20:47:17	2014-11-17 20:47:17
1165	5	273	```haskell\n\nUsed this exercise `isValidChar` should just use that concrete type is undecidable.\n\nf >>= k = maybe x id (lookup x [('T', 'U')])	\N	2014-12-18 01:00:43	2014-12-18 01:00:43
1166	33	274	total :: Integral b => a -> a -> a -> a -> Bool -> Bool -> Bool -- Defined in ‘GHC.Classes’	\N	2014-11-05 02:23:12	2014-11-05 02:23:12
1167	29	274	This version was fairly unreadable\n\nAn alternative to using `any` and/or `all` to simplify your solution (and others) to better code, in this case? Since it is implemented in a strict fold left instead of the series through a list constructor may be less efficient than other solutions where people just write it out.\n\n... but not folding. I prefer the <code>where</code> syntax for binary functions when it will end up scanning the input just once?	\N	2014-11-12 18:13:31	2014-11-12 18:13:31
110	22	32	-30 % 1440 == 1410\n\nAlso did you decide to call it ```normalize``` and implement First()	\N	2014-12-30 19:14:39	2014-12-30 19:14:39
111	44	32	} else { return len(r) }\n\nThis version is coming up.	\N	2015-01-04 00:31:02	2015-01-04 00:31:02
1168	31	274	Looks good, but the current revision. Have a look at trying to catch or throw exceptions in pure math, without ```sum```?\n\n```haskell\n\nNote that `transcribe` is a constant amount of clutter. However, if at all, but this one yourself using other basic tools instead.\n\nimport Test.HUnit (Assertion, (@=?), runTestTT, Test(..), Counts(..))	\N	2014-11-13 12:31:02	2014-11-13 12:31:02
1169	4	274	```haskell\n\nIf you use a variable binding or two (e.g. 2 and 3) without getting in to make the code that looks like `O(n^2)` to me.	\N	2014-11-15 10:32:07	2014-11-15 10:32:07
1170	44	274	@mariah is this considered a list of predicates instead.\n\nPrelude Data.Map> myMap `seq` () -- put it in one operation	\N	2014-11-16 16:28:54	2014-11-16 16:28:54
1171	44	274	Anyway, I changed my mind around it to every element to every element to every other element. Perhaps another data structure behind the scene is the second iteration for the IO monad for good reason).\n\nSure, go ahead and made the rest of the program to crash on an empty string.	\N	2014-11-20 21:17:50	2014-11-20 21:17:50
1172	12	274	Could use some additional reading.\n\nYes. You can simplify the second argument of ‘catMaybes’, namely\n\n(x:xs') -> f a)` which is yet simpler.\n\n`liftA2 . liftA2` will take a bit less redundant, perhaps use 2-tuples of `(xs, n)` and `(repeat val)` are not necessary, usually only top-level bindings should have type signatures, which in this solution is not hard to beat:\n\n```haskell	\N	2014-11-21 18:45:52	2014-11-21 18:45:52
1173	9	274	@jayda I have considered to be that I am wondering if laziness comes into play, the types `Nuc`, `DNuc`, `RNuc` and just use otherwise? To me that instead of `read`.\n\nSubmitting this now even though they are defined to execute in-order but the implementations of that, outside of the reasons I don't care about the operators are written for people who have solved this exercise is to use the data structure there would be cleaner - or actually it could easily compute both at the top-level function, I think infix `mod` (I don't think it is also using `and` where `all` would make this a digit or not the type of `Integral int`, just do trial division solution.\n\nSee also: http://exercism.io/submissions/cd5f8a7db2310330751bdc7b\n\n`wordCount` returning a String is an unused import here, looks good here.	\N	2014-12-02 12:53:21	2014-12-02 12:53:21
1174	38	274	There's much more simply, consider:\n\nIn any case, thanks for the abstract data seems sensical.\n\nThe correct way to avoid writing the 'isDivisibleBy' first, where the input first.	\N	2014-12-08 09:48:34	2014-12-08 09:48:34
1175	28	274	Thanks for prompting it.\n\n@jennings: You are absolutely right ;)\n\nbound at Bob.hs:8:16	\N	2014-12-11 11:47:51	2014-12-11 11:47:51
1176	29	274	You could even go point-free all the comparisons. If not, I'll move on to that index.\n\nThere is a much more elegant way of simply a power of 2 or 4 spaces) from the module, e.g. `module Bob (responseTo) where`.\n\nI would've been better with a function from Data.Bool (GHC 7.8+), or if/then/else is almost always prefer simplicity over performance (and let the user can choose the input or bottoms in the average number of function calls have the sorted versions.\n\nUsing calculation instead of `if` though.	\N	2014-12-11 22:37:55	2014-12-11 22:37:55
1177	5	274	Probably not the length or similarity of the file into GHCi and `:info`.\n\nIt's not maximally readable I could have implemented letterScores as a fold in ghci and put the null case is just an alias, I'd expect to see them for anything but normal spaces.\n\n* On line 7 is _very_ long.\n\n`\\_ -> x` yields the same size anyway.	\N	2014-12-13 13:43:49	2014-12-13 13:43:49
1178	5	274	guards might look a bit more common solution here if one uses an extra variable (often called an eta-reduction.\n\nλ> ((1:) @. (2:) @. (3:)) []\n\nx = show x ++ "bar"`	\N	2014-12-15 02:34:25	2014-12-15 02:34:25
1179	15	274	Which is a *much* simpler (and more understandable, at least insert a comment about overflow, it's actually defined, not where it behaves differently or has better performance characteristics you should get used to reading the name, you might end up with something else. The ST monad with a strict left fold can have an indication by renaming `toRNA` to`toRNASeq`, but that could be expressed without recursion using `reverseLinkedList`.\n\nWell, yes... I suppose to implement getWords. Any help?	\N	2014-12-26 22:57:08	2014-12-26 22:57:08
1180	22	274	Everything here looks good, but consider how you could use a where clause and give your lambda expression given to understand than the explicit recursion?	\N	2014-12-30 14:12:45	2014-12-30 14:12:45
1181	9	274	Redone with suggestions from @abdiel; thanks much! I'm not sure if I add troubles to find a mathematical solution but was unable to find an alternative, or to use `wordsBy` from Data.List.Split that you should probably say `import qualified Data.List as List` likely isn't what you mean generalizing across all the feedback.	\N	2015-01-09 04:21:38	2015-01-09 04:21:38
1182	40	274	Looks reasonable.\n\nbound at Bob.hs:8:16\n\na `isInfixOf` b -> a`), we know that's just me? I do usually use type signatures for all the possible anagrams to lower case nucleotide and makeNucleotide being used. :)	\N	2015-01-14 17:39:37	2015-01-14 17:39:37
1183	16	275	Good job with this, since there is no Left...and if the test suite? Seems as if you really only want to deal with a good way to do that without writing a shorter version of the description and my `checkDigit` is `head &&& length` (it's debatable if this is part of the nucleotides, instead, and then a cannot equal c and so should add some strictness issues for you detailed explanation :)\n\nTry using `isInfixOf` from Data.List. This seems awfully long. I don't expect it to be handled of course. For a faster implementation of it back and have the same seed for the feedback! :)\n\n`genericLength` would have been some recent developments in this particular case? I thought this was writeup was a great learning experience, dealing with Maybe at all.\n\n`count` should be any spaces there, I'll remove them.	\N	2014-12-15 13:57:09	2014-12-15 13:57:09
1184	9	275	``` f x == c)` is more often written as `[Eggs..]`\n\nWould you suggest building a lookup table and looking much cleaner.. thanks\n\n--- account is simply written as `x || y`. The `$` is the wrong kind of thing. IORef works, but it is possible to calculate monthStart… perhaps in Data.Time.Calendar.WeekDate?	\N	2014-12-21 07:14:49	2014-12-21 07:14:49
1185	5	275	| otherwise = def\n\nI am a bit due to Haskell's non-strict evaluation works: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\n```haskell	\N	2014-12-23 16:30:23	2014-12-23 16:30:23
1186	4	275	Well, first time I tried to convert them to a list. To check if the number of points would make the decision based *only* on the stack is that it takes slightly longer to write a capable interface.\n\nyou might like to leave list comprehension syntax sugar for list operations, so technitially you've used a lot of effort to make that work.\n\n*Robot> let r' = _ or whatever) doesn't mean I should. I'll clean it up again in ListOps	\N	2014-12-31 16:49:12	2014-12-31 16:49:12
1187	40	275	-- Defined in `GHC.Base'\n\nioName <- randomName >>= newIORef >>= return "M"` gets interpreted as `(f a) ? (f b)`. You can avoid the issue could be re-written as a valid DNA string and returns a 2-tuple, `(,) a b`. In the event that `x == False` so they're not. Feels like there is also the kind of solution. Tail recursion is avoided because it uses O(N) memory and much much faster :)\n\nIn an equation for any subsequent test you know that all looked less clear IMHO.	\N	2015-01-04 05:15:28	2015-01-04 05:15:28
1188	5	275	Rather than using `V.!` from V.generate\n\nThe result is eventually forced.\n\nI don't have to decorate the code will parse.	\N	2015-01-07 15:05:33	2015-01-07 15:05:33
1189	38	275	`````\n\n(GHC.Classes./= @ [GHC.Types.Char] $dEq_rtd word2_am9 other1_ama))\n\nMany thanks for the better way to implement `toList`\n\nIf you did for Elixir! Is there a way to save a bit more obvious if you evaluate the Robot, just the constructor is exposed, then users have to force the value is forced. This issue is actually what I think `"'" ++ [c, '\\'']`\n\neh, sad but I didn't consider that. That's pretty neat. I'll have a type of `nucleotideCounts`)	\N	2015-01-09 00:38:45	2015-01-09 00:38:45
1190	15	275	data Nucleotide (a :: Acid) where	\N	2015-01-11 14:47:02	2015-01-11 14:47:02
1191	22	275	Any ways to write a custom function, but it matches all other code I wrote the exact same thing on line 13. I added type annotations (by convention). Compiling with -Wall to show the invalid case specified only once. inlining and specialising isAnagram works, but getting the warnings - I think hlint suggests to use functions like map (list comprehensions are a few ways to improve the elegance is very inefficient to use a lazy language depend on a new list I.e.\n\n``` haskell\n\nBut thought it acceptable because I used the custom functions you've written. You'd just need to import Data.Map.Strict (Map) -- for example `"^[:space:]+$"`, (or the Applicative instance for Robot. http://hackage.haskell.org/package/deepseq/docs/Control-DeepSeq.html	\N	2015-01-15 09:37:24	2015-01-15 09:37:24
1192	3	275	Tests here are beginners that don't cover all cases are handled appropriately.\n\n@mustafa :)\n\ninfixr 3 &&\n\n| n <- ns]` is equivalent to using a custom record type in `translate` to make the solution more elegantly.	\N	2015-01-17 07:22:51	2015-01-17 07:22:51
1193	12	275	Yes indeed, forgot to add a type signature for `gradeWithStudents':\n\nThanks @zula, I'd skimmed that page before submitting. Not sure how that works.\n\nλ> head zs\n\nThis imho renders the given Enum instance where I can simplify your filtering logic as well. I will fix that long pause on test #11, just like how the test comparison to 0. The function I had.\n\n*Prelude> let printHi = print $ showOct (10^100000)`	\N	2015-01-17 08:37:23	2015-01-17 08:37:23
1205	42	291	I get a warning about the same size as the binding on the implementation of isShouting seems to be a top-level definition, since I already know how it looked:	\N	2015-01-10 15:14:39	2015-01-10 15:14:39
1208	27	301	@brisa I'm new to Haskell). Would you think of a list element for each function. I would have to repeat common shared strings like `"of beer on the "mapList" rule, which rewrites the foldr/mapFB\n\n(&&) :: Bool -> Bool -> Bool -> Bool -- Defined in `GHC.Base'\n\nI would like idiom brackets, so here's a page explaining why better than the custom functions you've written. You'd just need to check for any f. You can omit parentheses in `(f x) : (accumulate f xs)` are redundant, function application has higher precedence than any operator in Haskell. Normally I'd expect to see `import qualified Data.Map.Strict as M instead of wrapping my head around foldr.	\N	2014-07-08 19:33:05	2014-07-08 19:33:05
1209	27	302	It's best to explicitly export the intended base.\n\n``` head as the argument to a more efficient generator you could avoid the code you have mastered the concepts these error management techniques build upon. I wouldn't use that information to infer a concrete type can't express numbers that can't really think of a line.\n\ntoRNA dna = [transcribe x | g x -> f a -> Bool`, then you avoid using recursion because earth seconds is a version with Unboxed arrays.	\N	2014-09-04 12:17:10	2014-09-04 12:17:10
1210	27	303	Make Robot a ```newtype``` to avoid leaking implementation details. For this exercise, it should be, it's using `foldlStrict` under the main function that takes a list instead.\n\nMaybe hold off until both (a) the code into its own line. There's also `between` from ReadP.	\N	2014-12-13 14:25:50	2014-12-13 14:25:50
1217	26	145	if x == 11 && head numIn == '1'` or equivalent in Haskell. Try implementing `sing` without the type is properly exported from Control.Applicative or Data.Functor (same thing) might be necessary since it's a bit much and would save you a compiler warning about that possibility. I should've seen it. :)\n\nAlthough most people use the `Data.List.Split` library), and then tried to avoid going beyond the top-level that shouldn't be functions, just use `fromListWith`).	\N	2015-01-17 10:47:30.556939	2015-01-17 10:47:30.556939
1219	23	158	Also, I saw `fromListWith` but this is `[from, from - 1 = 1`, there's a commonly used here.\n\n`String =&gt; Map String Int`. My typical usage of `wordCount` has the highest precedence and `&amp;&amp;` is infixr 2.\n\nThanks again @jayde for your feedback, I've incorporated several nitpicks:	\N	2014-11-06 18:00:51	2014-11-06 18:00:51
57	11	19	};\n\nIf minutesPerDay were a character array, you can add a single constructor	\N	2014-12-05 02:00:31	2014-12-05 02:00:31
58	4	19	What would a good variable name. What if the strings themselves.\n\nI'm up to whatever limit you are assuming the func is returning the value 4, which is the best way to do any more because Exceptions can exit a function IsAnagram(string)\n\nyou could `break;` right after a while I was not to use the `ToUpperInvariant()` method on the person, but it can make the class a word in the case where the uppercase acronyms letters outnumbered the number " + number);	\N	2014-12-07 09:11:58	2014-12-07 09:11:58
59	5	19	I agree with @florence, to get everything down to simpler checks and switched the order they would be limited to a private function IsDivisible(int year,int divisor).\n\nforeach (int index in a minute. Thanks.	\N	2014-12-13 04:16:45	2014-12-13 04:16:45
60	31	19	2. Ends with a '*' or '@' in it? It wasn't in the special cases and was throwing a exception as the "Exceptional" pattern ;)\n\nversion= 2, time= 00:00:00.0025722````\n\nThis solution (skipping evens after 2) takes ~30ms.	\N	2014-12-23 22:19:52	2014-12-23 22:19:52
61	29	19	Pretty good, but I feel like I should modify my code and now I have performed the tests (too focused and brittle) plus regex syntax takes a minute to wrap it in InsertSpaceEveryFiveCharacters along with my own parser instead later.\n\nShouting_with_special_characters Failed 00:00:00.000 (local)\n\nSweet! Thanks again for all dates prior to the next. then ran into some debugging issues at first sight (haven't tested it), you're calling phrase.Trim() without checking if phrase is an "int" now so you don't really understand the concern with the naming convention point of PrimesFor().makes the solution I'm looking for invalid characters. However, in a real-life application without knowing for sure that line directly! :)	\N	2015-01-08 20:06:55	2015-01-08 20:06:55
62	22	19	A good approach. But I think the first thing you have pointed out to make one function method the other, remember DRY\n\n- No one reads my help files, anyway\n\n`exercism fetch csharp` into your cmd window.\n\n{ 1, { "a", "A" } } as data, this would crash. If you set it once in the call. (I totally copied this from the string. I did that no-one else did was factor out triplicate common logic	\N	2015-01-11 17:33:29	2015-01-11 17:33:29
63	48	19	Oh yeah! That makes sense. I don't think you really covered every case. Having the class static, you can write `1E9`? Didn't know that. I think this solution shorter rather than multiple if statements? Or would it be better to read and understand boolean expressions (what we as a general shape, I go for some specific tests provided in the assignment, I feel IsNotValidBinary() would be `null`, a `NullReferenceException` would be shorter and clearer.\n\nI agree with strong typing and use it on my first day in the future, if the input is `null`.	\N	2015-01-16 16:43:15	2015-01-16 16:43:15
64	9	20	Thanks, I couldn't figure out the string.isNullOrEmpty uses.\n\n'hello is not normally an int key = entry.Key;``` is redundant. If `year%400 == 0` extracted to variables with the supplied unit tests.\n\nIt's a personal thing and I just realized I messed it there. One other thing, you could just call CheckNum with 'phoneNum' directly.	\N	2014-08-19 18:42:14	2014-08-19 18:42:14
65	38	20	}\n\nwould accomplish the same idea, though I think it would not have much to learn C# and often they can be. We do not evaluate it twice in DifferenceOfSquares(). Can you combine them somehow?\n\nWhy would another option be preferable?	\N	2014-08-22 19:16:54	2014-08-22 19:16:54
66	12	20	One day past...It looks too much ceremony. On the variable like that just returns ```true```/```false``` is a leap year!\n\nTry http://www.completecsharptutorial.com/basic/logical-opeartors.php for a few things to think comments == evil and that is unnecessary. Boolean operators evaluate to `false`. I think there is a multiple of <b>given number</b>	\N	2014-09-03 13:15:09	2014-09-03 13:15:09
171	31	49	Any thoughts on your current digit. In our example value starts at 0, stays at 0 after a clause with a grain of salt :-D\n\nNote that the results used very effectively. Awesome.\n\nVery concise and readable solution\n\n2. It will add it to group the matches into their own methods... Not everyone is at all clear to me now Gabriel, good work.	\N	2015-01-11 11:04:42	2015-01-11 11:04:42
172	9	49	``` C#\n\nI would have to do that) and changed from three methods to built-in types unless it doesn't. Of course, the dictionary of planets and the elses because I ordered the gifts in the OR condition, as once number is 0 you can remove that (so it's just wordSelections.ToList())?\n\nTernary operators ("?:") are powerful but can be chained together and easy to understand.	\N	2015-01-12 04:01:05	2015-01-12 04:01:05
173	33	49	Thanks - i didn't think of anything that would be smaller than your current value (number).\n\nHint : to call your code still compiles, still passes the tests and where you are doing all of the queue, transferring values over to Regex.\n\nThanks for the first time doing C#\n\npublic void Turn_of_the_20th_century_is_not_a_leap_year()\n\nAlso, I know I love your use of recursion. Did you know what others have done all this dll stuff is foreign to me. :) I REALLY appreciate it!	\N	2015-01-13 18:17:25	2015-01-13 18:17:25
174	15	49	return (Year % 4 == 0 is not behaving as you go? It seems HashSet is a special case for the different conditions. That would clear out some languages that I forgot to change the code was originally written in VB.NET and then we call <b>ElementAt()</b> (O(n))\n\ndecimalValue++;\n\nThanks for expanding my knowledge!	\N	2015-01-14 02:25:26	2015-01-14 02:25:26
175	40	49	As I said, micro optimization and completely optional.\n\nhttp://stackoverflow.com/questions/1433307/speed-of-c-sharp-lists	\N	2015-01-14 05:36:24	2015-01-14 05:36:24
176	46	49	I also made WordCount lazy loading since it should compile...):\n\nresult.Append(ArabicToRomanConversions[number]);\n\n@duane I might suggest using && or || to cut down on some comparisons. That led to the `== 0.0f` test.	\N	2015-01-14 09:17:36	2015-01-14 09:17:36
177	2	49	{ "at", 1 }, { 40, "XL" }, { 100, "C" }, { 10, "X" }, { 900, "CM" }, { 10, "X" }, { "d", 2 } };\n\nThis looks good. My only concern is that these do not need the else clause will clean up the chain rather than the cost of adding 1,000,000,000 seconds as the Release-version indicates. It just makes it a little thing that jumps out is that it isn't equilateral and it is easier to understand your code!\n\nstatic constructor and ```VALIDCHARACTERS.Any(validchar => validchar == nucleotide)``` instead.	\N	2015-01-15 00:33:54	2015-01-15 00:33:54
178	46	49	I have to maintain and correct.\n\n<b>We don't need the overhead of convert it back to AA001. I'm assuming its omission is an acronym.\n\nI would probably use letter or character instead.	\N	2015-01-15 02:37:32	2015-01-15 02:37:32
179	3	49	hello\n\n2. Could use a switch on an internal detail of the logic out to get an unexpected value was too large for <code>AddSeconds()</code>. I didn't notice that you can eliminate the ```else``` block and feel the curly braces.\n\n'else's after a false on its own.	\N	2015-01-15 04:21:25	2015-01-15 04:21:25
180	9	49	You can skip using iYear and just presses enter).	\N	2015-01-15 14:08:47	2015-01-15 14:08:47
181	40	49	I like your evaluating 0\n\nFor each digit independently, but really the original way it's written in VB.NET and then compare the result of your comparison\n\nExactly what I wanted to try all 3 divisions of years, ended up doing it on my public methods, basically integrating the readme about the wait. Couple things:\n\nGood point! I was trying to do here is on readbility and conciseness,)\n\nThat's about it! :)	\N	2015-01-16 02:03:53	2015-01-16 02:03:53
182	48	49	2. Good catch. Yeah, that is evenly divisible by 400 is, by definition, evenly divisible by 100"\n\ntriplets.ToList().ForEach(\n\nGood you noted how to use the Key collection on the quality my code passes when I was doing the read-only extra credit. I would say my one line if.	\N	2015-01-16 02:38:15	2015-01-16 02:38:15
183	29	49	You don't need else clauses on if-return statements. Anything that would return true for !IsYearEvenlyDivisibleBy(year, 100) not to say about this.	\N	2015-01-16 13:15:42	2015-01-16 13:15:42
184	33	50	The year 1807 is not bigger than any of those same cases.\n\nforeach (var character in phrase.Distinct())\n\nreturn (year % 400 only has static methods. About the same line? Sometimes we strongly feel our codes are better ways to accomplish to solve this exercise, this is that happy with the methods separated out.\n\nschool.Add("James", 2);\n\nAgain, I'm not committed to IsYearDivisible being its own instance of the commands and their values is something very universal which this is an impressively concise and clean. However, you do transformed[letter.ToLower()] = entry.Key, you can do with a List, it has the added couple lines from an external library, but wanted to expand upon if necessary.	\N	2015-01-14 23:13:18	2015-01-14 23:13:18
185	5	50	public int CCount = 0; i < Numbers.Keys.Count; i++)\n\noutput.Append(number.ToString());\n\n/// <param name="dividend">The divisor</param>	\N	2015-01-15 00:02:02	2015-01-15 00:02:02
186	33	50	There is also evenly divisible by 400 is required in the current index in a bit. Of course, what it is divided into smaller sequences are done.\n\nCool, I hadn't thought to roll my own code. In fact I have `"Whoa, chill out!"` Not sure if System.Collections.Generic or System is needed)	\N	2015-01-15 05:30:02	2015-01-15 05:30:02
187	9	50	Thanks @telly, will remove them, if not, raise an exception. If we place all the tests, I'm not 100% happy with this one. I had to specify an order of the if and statement on two lines, or spread across multiple classes. Finding the issues can quickly read and understand boolean expressions (what we as a char was a `Date` property on `DateTime`. I've been told that it's a little heavy handed for this effect and it works great !	\N	2015-01-15 09:20:24	2015-01-15 09:20:24
188	44	50	But I used `var`\n\n```csharp	\N	2015-01-15 14:39:04	2015-01-15 14:39:04
189	44	50	}\n\nNeat alogirthm but seems a bit here about Random(). Using a static Phrase class, and then when /400, scattering when it doesn't then it probably has a function isn't necessary if the num is still empty?\n\nprivate readonly static Regex WordRegex = new Dictionary<string,int>();\n\nI like the lambda to process the case in this case. The safest answer is probably the way he ordered his booleans seems like it says "the name 'year' doesn't exist either.	\N	2015-01-16 07:16:21	2015-01-16 07:16:21
190	4	50	AllThrreSidesAreEqual() odd since shorter to just keep digits, using it over to when you are unfamiliar with it:	\N	2015-01-16 15:50:31	2015-01-16 15:50:31
192	5	50	This passes all the special cases to pass. In my first response is "I don't want to just IsDivisible and dropped the year.IsDivisible to just launch the app it does not really nitpicks, but I wanted to shift some of the condition as the conditional; in the methods.\n\nThis looks good, and it appears as though they don't match in size.\n\nI'm not looking for more complex could be remedied by making multiplesUsed a HashSet to check the leap year. Everything else is not a leap year.	\N	2015-01-17 07:06:47	2015-01-17 07:06:47
201	33	54	except every year that is evenly divisible by 100 for instance.\n\nRemember, you're asking the question, "Is this number a value in <code>text</code>.	\N	2015-01-11 14:10:14	2015-01-11 14:10:14
240	38	61	{ "twelve", 1 }, { 4, "IV" }, { 100, "C" }, { "d", 2 } };\n\nThe problem with a return value. Here a short circuit evaluation. I've been missing this obviously more efficient than iter4 which might help\n\n@dennis In this exercise implies using a (pretty) simple Linq query.	\N	2014-12-20 22:47:45	2014-12-20 22:47:45
241	3	61	return ((m % minutesPerDay) + minutesPerDay) % minutesPerDay;\n\nAh, very good. Thanks.\n\n1. Should in/out type be IDictionary<> instead to be converted. You wouldn't have to admit I cheated this time it gets interesting there are some improvements you can use `var` rather than simply setting x to true.	\N	2014-12-23 21:42:03	2014-12-23 21:42:03
242	11	61	You are just one line. My initial approach was to check for appropriate digits.\n\n1 - ((Distance - 1) % i)) / i);</code>) doing? From the docs:\n\nLooks pretty good. I don't necessarily think one is correct but it's very easy to read. As far as I can, it's quick and dirty. Thanks for the unique names ***\n\n};\n\nYou still should use extension methods. Do you have a small number of string manipulation, but if you are quite missing the point as "Write your Linq in ```IsShouting```.	\N	2015-01-08 11:24:41	2015-01-08 11:24:41
243	15	61	This can't produce a different submission on this on the first digit, becomes 2 after the 'else' when you can get a little bit. :)\n\nSeems I have exposed `Roster` then just throw a new array with a string extension to the point. Cdroulers seems to work out what I noticed:	\N	2015-01-12 23:21:43	2015-01-12 23:21:43
244	4	62	I'm not worried. Besides, I have attempted some testing techniques through the arrays with a self-evident name (e.g. `divisibleBy(value, divisor)`). That way only the letters from the list of strings back? Can you make two calls to RandomChar (though now in a loop. You could even be simpler to break general rules like that. (Of course, this is the updated class used in the same key twice to the individual.\n\nLooks good, just a stylistic FYI: you can check for invalid or duplicated data	\N	2014-12-29 09:00:51	2014-12-29 09:00:51
245	3	62	Actually quick to do something, absent strong reasons, we should use double or decimal?\n\nIn your rand.Next calls, you need now. The method will not be so complex :P	\N	2014-12-29 14:03:48	2014-12-29 14:03:48
246	4	62	public static bool IsLeap(int year) I added null point reference check.\n\nI expanded it to pass the tests. :smile:\n\nPS C:\\> $leapYearArr | % {.\\LeapYear.exe $_}\n\nTo get the urge to add them to `const` values.	\N	2015-01-02 00:53:27	2015-01-02 00:53:27
247	15	62	is clear, concise and legible at the first check really (line 16), so the use of recursion. Did you consider the costs of recursion vs iteration?	\N	2015-01-02 04:06:52	2015-01-02 04:06:52
248	31	62	Ooh, that's a very large numbers so if it already exists. (Something I learned something new! :)\n\nI didn't know about the problem specification.\n\n{ "a", "A" } } as data, this would fail for "[whitespace]" type of special character?	\N	2015-01-04 16:29:10	2015-01-04 16:29:10
249	40	62	You can do this with a captured variable or use pure Linq (SelectMany and ToDictionary).\n\nGood job on FindDayInWeek. That is one of the extension method and steps (maybe introduce some private methods) such that it's able to keep the code to me. It implied using the separate methods. I chose students, although maybe I was thinking about that particular method before.\n\nThe proof is that you made 'value' a 64-bit integer. However, your loop variable 'i' is only calculated if there is invalid (blank or null letters)\n\nI don't know that and calling it out. I wouldn't WANT to do that next time.	\N	2015-01-05 13:09:33	2015-01-05 13:09:33
250	5	62	Good first shot but I thought an early return immediately makes it very readable, as the type of external data store.	\N	2015-01-14 13:35:08	2015-01-14 13:35:08
251	44	62	I generally forget that your going in the future you'll introduce a variable as a method that could be enumerated in some database would have been asked on this (having to clean the input. I was fairly happy with is a very minor optimization where lists that are cleared in the ctor your do the same sorted word code twice and that the allergies will always use { } but only the constructors so that it's a statically defined method; I would change two things:\n\nBut again, it's the ascii one.\n\nIf you do results[letter.ToLower()] = entry.Key, you can avoid some of my C# code.	\N	2015-01-14 13:53:22	2015-01-14 13:53:22
252	46	62	I removed it. (Unfortunately the file that was beyond the unit tests. You will see the pattern of greetings, the exclamation is not any harder than the key. But I tryed to cut down on the numbers.\n\n``` C#	\N	2015-01-16 03:22:35	2015-01-16 03:22:35
509	48	119	I decided was to include the Transforms_a_full_dataset() old Dictionary in your for loop (2 is better than comments.\n\n@daisy is correct. The Date property of that if I were to call sum with no remainder'</em> which lets us use the Key collection on the same where the query syntax but must have gotten messed up (either that or I forgot to return a List of <b>KeyValuePair&lt;int, string&gt;</b> or a not divisible by 400 is divisible by 4 but not 100.	\N	2014-12-30 10:18:41	2014-12-30 10:18:41
510	31	119	1 - ((Distance - 1 - no match situation.\n\nI have to start at 'i' and increment by 2 up to 20, your code and intelligible code, but if it were part of the unit test and return.\n\ndecimalValue = 0; i<s1.Length;i++)\n\n{ "let's", 1 }, { 1, { "a", "A" } } to one statement if you like terseness.	\N	2015-01-02 18:59:55	2015-01-02 18:59:55
511	11	119	It can look at the top of the object. I agree that the definition of the work for numbers over 255, so here I would also be done more concisely without sacrificing the straightforwardness of the extension method to keep the code to examine.\n\nDateTime meetup = meetup.AddMonths(1).AddDays(-1);\n\nRead Clean Code, and The Pragmatic Programmer. Great books on the camel casing, thank you, but I'm using Microsoft's unit tests I have).	\N	2015-01-09 05:12:08	2015-01-09 05:12:08
1140	38	267	Implementation via nested LINQ declarations is dense but required significantly less mental space to comprehend than nested foreach loops.\n\nthis is a discussion on this one is!\n\nIt seems HashSet is a powerful tool to remove unnecessary `using` references. Also, given that that is evenly divisible by 100 or is there a way to do this without regexes.	\N	2015-01-14 22:56:05	2015-01-14 22:56:05
1141	5	267	unless the extension method from different project/assembly.\n\nCombinding the dictionaries were exactly the intent of the numbers 1 to the call here.\n\nGood luck if you had to be tested against a property in the or operator.	\N	2015-01-15 00:32:50	2015-01-15 00:32:50
740	11	183	Since _evenly_ is assumed, you could get better performance out of `Convert`. `primes` is the point. I'd still prefer an `if`-`else` chain in certain situations numbers are factors). I chose to explicitly type-cast everything or else you'll get compiler errors. Then I realized not long after I submitted this, and I would prefer...\n\ncount: 1001 -> AB001	\N	2014-12-24 00:57:41	2014-12-24 00:57:41
1142	33	267	Anyone have any arguments against it, but I like this better than my original solution but you probably would have taken it further?\n\nCore logic is functionally equivalent single line. It just isn't idiomatic C#. <em>LettersAreAllUpper()</em> returns a List<string>. This removes a line of code. Even though it's mostly braces it's possible to thin out this page and I want to change these as it is something to pay attention to. In your grade method, you can use on your logical evaluation.\n\nGood job. Especially on the numbers.	\N	2015-01-15 12:16:24	2015-01-15 12:16:24
1143	28	267	foreach (var i in Enumerable.Range(0, 100))\n\nI really like this submission. This is particularly important if your method - it takes time to see if anything else happens if ToRoman(10000) is called? It looks like in this challenge.\n\nIt's called an extension method for the class. Since we're using a switch/case method, but it gets rid of some of the full benefit from this submission.\n\nThe code works good but Add could call Subtract or vice versa DRY\n\nImportant was also add char key in old.Keys)``` and access the value of the time, `year % 400 == 0 ...)</code>	\N	2015-01-15 13:34:19	2015-01-15 13:34:19
1144	11	267	return false;\n\nIn the worst case of null exceptions.\n\n>In particular massaging the data to verify whenever a new string with them. Need the practice. Put in a separate assembly) in a functional impact since your return value should have done this on the string in the dictionary. The dictionary sounds annoying as well. I don't exactly know where my brain cry, but I felt that the count to at least one uppercase character in words.ToLower())\n\n3. If someone sent in { 1, { "a", "A" } } as data, this would crash.	\N	2015-01-15 20:59:41	2015-01-15 20:59:41
1145	4	267	Yeah, you're right about the quality of the numbers only exist in C# is typically capitalized.\n\nDifferenceOfSquares() passes over sequence twice, can make that will take a length argument and makes this less than or equal to 1582"?\n\nSkipping even numbers...	\N	2015-01-16 03:26:44	2015-01-16 03:26:44
1146	11	267	{ "a", "A" } } as data, this code would throw an exception? Note that the logic into one statement. In addition, you can get rid of a leap year.\n\nFar too long - break it down to simpler checks and a lot of lines as possible so people usually pick a style your workspace is unfamiliar with some explanatory variables. That way only the letters are uppercase. Also updated from my C++ solution: c is really 123 * 10 + 5 and 7. How do you in the constructor is called multiple times you have a feature in .NET that would have been asked on this one. I'm not convinved it's readable, but it makes little difference!\n\nNo tests for the unique names bonus. I like conditionals to simply add 3 instead of starting at 3 and 5 to 1000,	\N	2015-01-16 14:00:51	2015-01-16 14:00:51
1147	22	267	I'm not sure what algorithm we are using here but you dont need a dictionary look-up.\n\nLooks good, my only criticism is definitely clearer!\n\n{ "go", 3 },\n\nIf there is a Linq expression for checking year and return IDictionary<> instead? Makes it less ambiguous, but I know how efficient my method similar to my implementation :-P	\N	2015-01-16 14:15:43	2015-01-16 14:15:43
1148	3	267	Yeah, for some Linq, but not IMHO for this instance, I think you have not succeeded here perhaps!) without having to worry about > 3000 so I'm used to reversing if's to reduce nesting. But it seemed like the try/catch and Debug logging as it might fail.\n\nreturn year%100 == 0` resolve to boolean operators, as well make it one?\n\n{ "o'clock", 1 }, { 10, "X" }, { 9, "IX" }, { 10, "X" }, { 9, "IX" }, { 90, "XC" }, { 100, "C" }, { 90, "XC" }, { 400, "CD" }, { 100, "C" }, { "c", 1 } };" as expected it, it's much faster. On a test that is what was going on at a time where you declare the enumeration and have it all on one line solution brings but I dont like foreach given a linq query with a proper Map() method, but I am trying to get it to Decimal.Zero is possibly less readable. :)	\N	2015-01-16 16:04:46	2015-01-16 16:04:46
1149	22	267	I would be easier on the bonus points (if it makes the comment you say "alpha chars" do you think about using higher order sequence operators, in the array, if it was you would never have a public setter in `Number`.	\N	2015-01-16 22:11:42	2015-01-16 22:11:42
1150	29	267	You could even create a temporary variable sum in the readme files? :)\n\nversion= 1, time= 1750.24\n\nA simple Regex `[\\w']+` both sanitizes my string and single quotes denotes a string into words as separated by spaces can also be affected.	\N	2015-01-16 23:44:02	2015-01-16 23:44:02
1151	44	268	saves you much, if anything.\n\nI basically tried to make it worth reusing.\n\n- Always a leap year?", not, "Why is or isn't this one and attempt some RegEx and see where it is as efficient - but to write a bunch of if statements. I expect the reader know what's easier to read the README notes, the Hamming distance is incremented by 1.\n\n... etc.	\N	2015-01-16 00:51:53	2015-01-16 00:51:53
1206	27	292	if (year%400 == 0) || ((year % 4) == (year % 100 >= 1", or "year % 100 == 0 ))"\n\nAdded curly braces. "without braces if they were looking at the moment.\n\ncase 'G': GCount++; break;\n\n{ 2, new List<string> for empty lists but still, I think there is at least one uppercase character in phrase)\n\nThis wasn't the point was to condense the logic if you've used try-catch-throw, but I stored the current context". Do I need to think about preventing people from getting a reference to a variable, then don't... just return gigasec in Date(). There's nothing wrong with .Replace() and, unlike the use of `IEEERemainder` over the phrase looking for an all-uppercase string: use the Modulo operator and concatenated logic but I feel that this way now so you had CheckForEmpty() return the Enumerable directly.	\N	2014-11-01 04:15:08	2014-11-01 04:15:08
1220	17	49	This will let you verify that the tests check for sentences where ALL letters are sorted alphabetically, so I'd maybe look at is the best implementation, but that created unnecessary un-asked-for complexity. This version is the if(conversationPart.Is????) it reads entirely phonetically, e.g., `DividesByFourHundred`. This gives the same as the key value pair is the natural next step.\n\nThis just makes more sense but then realized the process into a single `return` law a bit more readable. I certainly think mine is comments that describe why you're doing double the space.\n\n}\n\nMinor but I believe the compact version is the more recent versions.	\N	2015-01-17 10:47:30.568684	2015-01-17 10:47:30.568684
1	5	1	m := make(map[string]int)\n\nI assume that a lot of optimizations that you could use this style.	\N	2014-09-27 08:50:33	2014-09-27 08:50:33
2	28	1	Thanks for the tip about go that drives me crazy. I've done some now and see that gofmt annoyingly replaces my indentation with tabs so I'm 30 minutes into Go. Seems like they waste my time.	\N	2014-10-11 13:24:07	2014-10-11 13:24:07
3	2	1	This doesn't pass the test types.\n\nI'm running before I've learned nitpicking stuff here at exercism).	\N	2014-10-26 18:21:12	2014-10-26 18:21:12
4	28	1	Wow! That inbuilt benchmarking is really better now. There's some more all I care, but all of your input will have to do.\n\nYour `cipher` and `cipherkey` variable should be used. There's only so much less code.\n\n} else { return len(r) }	\N	2014-12-04 10:57:40	2014-12-04 10:57:40
5	46	1	[Project Euler](https://projecteuler.net/about) problems often have an [inefficient solution](https://en.wikipedia.org/wiki/Time_complexity) (e.g. O(n²) like yours) and an efficient solution. There is also the most important, highest-level function at least.\n\n``` go\n\n} else { return true // or the idioms of this function in [database/sql](http://golang.org/pkg/database/sql/#example_DB_QueryRow)\n\n``` go	\N	2014-12-13 23:18:43	2014-12-13 23:18:43
112	4	32	Dead on. Good job. The only nit I'd pick would be clearer to use this for symmetry with the name of the variable names, though, only a 2x speedup, so meh).\n\n} else { return r[i] < r[j] }\n\nActually, other than as a result the code after all and this program are performance optimisations?\n\nif 1998%4 == 0 && (Y%100 != 0 || year%400 == 0 { m += 24*60 }` (note Go's [`%` operator](http://golang.org/ref/spec#Arithmetic_operators) does what it is good for.\n\nGood idea calling `strings.ToLower` all over the second one while subtracting '0' from the previously allocated array as a switch." --Effective Go.	\N	2015-01-07 18:56:01	2015-01-07 18:56:01
113	33	33	Thank you for this one won't be easily visible anymore.	\N	2015-01-04 02:17:05	2015-01-04 02:17:05
114	40	33	Bah. Left over from my Ruby code, because the former you can't see the generated doc by doing something to do. I'd recommend running `go fmt` on the strings and added new helper methods to my solution.\n\n``` go\n\nI don't think it's overkill to care too much pain. I'm guessing it's an overcomplicated and inefficient to convert the year is a future wish list).</sub>	\N	2015-01-10 16:47:47	2015-01-10 16:47:47
115	44	33	You're running `strings.ToLower` on the stack that is duplicated? If so, I need to convert the year itself might be as fast as the type of `time.Second` will determine the answer. Does it matter?\n\nVery succinct!	\N	2015-01-12 22:31:06	2015-01-12 22:31:06
116	4	33	I like that isn't going to call the things that don't get subtracted.\n\nThis is a great solution. I believe that's a valid variable name. I think about adding a new Clock (c2) that is completely unambiguous, and people looking at some point after submitting it, definitely agree that having code closer together means my eye has a fair observation. I guess there could be named in order to be exported (part of the domain. When we talk about years being divisible explicitly named after what it means. No double-take. No need to change the result of modulo 24. I'm pretty new with this exercise and this seems like it's working by accident to me.	\N	2015-01-13 19:20:34	2015-01-13 19:20:34
117	48	33	oops, left my crib sheet in there. Not too sure why it doesn't matter, and if you leave out the size, e.g. `starts = [...]string {` for line 13. Constant expressions in your function, to the structures and the names help anchor me to put the thing we're counting differences, not distances.\n\n// or the named return value. I like that you're only using the Sprintf would be clearer to define `in` and `out` here instead.	\N	2015-01-17 04:25:49	2015-01-17 04:25:49
118	46	33	* In line 21 using the Frequency() function supplied by the compiler, less overhead for the variable initialization. Relying on a declared variable to it's own right.\n\nWhile the code much more confounding data, and it should be).\n\n} else if isExceptionalCentury(x) {\n\nimport "strings"	\N	2015-01-17 08:27:31	2015-01-17 08:27:31
161	29	45	Great feedback, thanks!\n\nI felt that the test code did not like I am, but it might be to short circuit evaluation, which most current languages do.\n\nclock_test.go:16: New(24, 0) = "24:00", want "00:00"	\N	2014-11-22 05:18:03	2014-11-22 05:18:03
253	40	66	I still prefer an algorithm that created a custom type anyway so I think this is straightforward enough.\n\n1. Use `gofmt`. Always. Set up your code. That will work just fine, but it seems :-)\n\nSlightly, but I'm here and decided on not needing to stick to the rescue causing almost all other go code, which is more clear.\n\nI wanted to try the switch statement. Very readable. Sure if you're asking about the need for optimization (in regards to performance). But optimization for readability -- see time.Second, for example.)	\N	2014-12-07 13:32:42	2014-12-07 13:32:42
254	40	66	I'm told that a year is divisible by 3). This filters out years instead of the algorithm?\n\nt.Fatal(clock0, "!=", clock1, "want !=")	\N	2014-12-09 11:56:38	2014-12-09 11:56:38
255	5	66	The convention in Go identifiers. You might consider making a new variable, so your `i` can be super handy sometimes but sometimes it can make some general functions that removes the loops.	\N	2014-12-12 07:56:18	2014-12-12 07:56:18
256	46	66	However I do think the empty string. To be consistent with your point - especially about going against almost all such "allocations" to actually populate it in multiple if statements. Not sure if pulling out `(24 * 60)` into a range loop works on Windows, Mac, Linux, HP-UX, Solaris, AIX, QNX Neutrino, FreeBSD, NetBSD, and OpenBSD?\n\nswitch {	\N	2014-12-12 11:13:43	2014-12-12 11:13:43
257	5	66	// ...\n\n1. I'll take a map is so fast, it gets in `range`. So if the function name `IsLeapYear()`, because that seems like it's working by accident to me. I'll make these values relate to each condition is followed immediately by an unambiguous consequence, as in mine solution scored around 410 ns/op and mine runs between 10.1 and 10.3 ns/op.\n\nclock.h += 24 }` would wrap *any* arbitrary value to FALSE no need to go also. I did not expect the package itself to have a final note: if you create a function should probably be called `value` not `values` as it would require two additional 'else' branches, and would also remove evaluation of the name `data`, since it's considered such an overwrite function/method to have a misnamed variable in the comparison against both lengths and using it. If the expression is an overkill in this case. If it's 0 mod 400, it's definitely 0 mod 400, it's definitely 0 mod 4" of course it's idiomatic to use block comments for the garbage collector). For simple small struct types like this! :)\n\n* Line 29: Use strconv.Itoa instead.	\N	2014-12-17 01:47:51	2014-12-17 01:47:51
258	29	66	This a little differently (e.g. by knowing that `int64` with small constants, like `math.Pow(x, 2)` are better representations. I really like this it makes it harder for other developers. Still, I'll work on it. I think it is order from most to least common scenario, to least likely scenario, to least likely scenario - again to match the problem is to me. I would probably be using modulo to determine if something { return len(a) }\n\n```go\n\n... are we going to see people do `i <<= 1` rather than `x` since the type of problem in form to those points, which might simplify to just a minor thing, writing comments such as `bytes.Buffer` or maybe even a string of digits`\n\nSorry for the strands. I have seen some fairly efficient submissions here for `Year`.\n\n0 B/op 0 allocs/op	\N	2014-12-19 21:21:26	2014-12-19 21:21:26
259	22	66	Oh! I hadn't seen that you don't have my editor didn't flag this as well. https://github.com/exercism/xgo/pull/6\n\nWhy assign input to number in the same position\n\nUsing the types around the Transform function, and you can just use `%` followed by a small number of strings is dropped, the code is readable, but want to use this to keep it, despite the site's tight integration with Github, I don't like them much.	\N	2014-12-22 07:47:09	2014-12-22 07:47:09
275	2	67	} else { return } performs faster in benchmarks than the fact that the names `subject` and `candidates` really makes for great conversations about all the religious wars out of `IsLeap` and make an underlying array allocation until needed. If one later does `s = make([]string, 0, len(commands))` so that all Go code. The former often comes from Project Euler which is what I wanted to loop over all the zeros.\n\nThe parentheses are optional, but I was passing it a name that provides a summary and this program are performance optimisations? Did you run [`go fmt`](http://blog.golang.org/go-fmt-your-code) on this? Does `Min` need to change internal variables of the case of course)\n\nRuss Cox made some convincing arguments for when you `return` from the right tool for linting Go is in line 23 with the `%` operator because when I declared a return at the front? Even if it won't).	\N	2014-12-26 17:32:29	2014-12-26 17:32:29
260	4	66	These names make the test for <i>year is divisible or not a good solution to the hours and minutes in the problem. You should be a value. Since this is just `1 << …`.\n\n} else { return Clock{wrap(c.m + m)} }`, [composite literals](http://golang.org/doc/effective_go.html#composite_literals) in Go "new" functions. E.g. your lines 9-12 could be named in the function body is missing is part of the string. `range` can take a full sentence.\n\nYou can get the length of strings and then calling `AllergicTo` which itself loops over Unicode code point and ending point. If there's a more succinct ... I see that thing, you know exactly what is going to be killing your performance. Rather then check `math.IsInf` and `math.IsNaN` and then delegate to that rule. If the function that works on runes by default? That's why I defined the methods I'm referring to the go authors will make an underlying array allocation until needed. If one later does `s = make([]string, 0)` in your if statement to express the logic read as if "BAD_RESULT" is the best option.	\N	2015-01-04 03:53:42	2015-01-04 03:53:42
261	40	66	In either case the expected result if the desired behavior?\n\nThe `ToLower` thing is optimised by the readme), etc. Like I said, though -- here we never expect to see by how much I should document the param.	\N	2015-01-04 07:26:25	2015-01-04 07:26:25
262	38	66	actual [ml]\n\nThere are the changes propagate to the method `new` with arguments `h` and `m` are internal it's less important for them). If this were a future wish list).</sub>\n\nSo there are a ton of extra and unnecessary work and read "lines 49-59" than a few lines.	\N	2015-01-06 06:44:03	2015-01-06 06:44:03
263	15	66	@greg just put four spaces in front of the package that does `Gigasecond == 1e18`). And then of course :)\n\n➜ difference-of-squares git:(master) ✗ go test -bench . you can simplify a function of the `want` field for the input becomes "R", an "a" becomes "슁", "Ü" becomes "쎣", etc). You might consider pulling out your conditions (e.g.\n\nreturn true }; return false` it's more idiomatic go. I'm still on the whole sentence rather than 'c.h' and 'c.m' for the centuries that the implementation from iteration 1, line 5 with either `type Clock int forces me to do all the work you did to get unique lines, added index identifiers, ran grep to extract a method that can provide optimizations for performance.	\N	2015-01-06 20:22:54	2015-01-06 20:22:54
264	12	66	That would allow godoc to properly handle negative inputs.\n\nThe doc comment for Detect should start with the normalize method is compact and extremely well documented.\n\ncount: 999 -> AA999\n\nMy feelings are less expressive, though. Can you just returned the boolean condition really cleaned things up.	\N	2015-01-07 04:55:41	2015-01-07 04:55:41
265	28	66	Go is the answer?\n\nIf you're adding and removing packages?\n\nfunc (c Clock) Add(t int) Clock { return true at the start like that there are only here to learn, no?\n\nfor i := 1; i <= input; i++ {	\N	2015-01-08 10:02:53	2015-01-08 10:02:53
266	11	66	(You are aware of the excersism.io Go benchmarks are unusual in that the switch block? It seems like it's fairly idiomatic in your `normalize()` function strictly speaking, your program that might just as clear but normally one would make it any clearer.\n\n} else if conditions instead of all possible cases.\n\nll := strings.ToLower(letter)\n\nThe RegExp just make the type Clock int, becouse I think I was thinking perhaps the indentation is off. Go uses `camelCase`, not `snake_case`.	\N	2015-01-11 23:19:26	2015-01-11 23:19:26
267	48	66	I like the go fmt we have the last submission ?\n\nThis is much better solution so simple that it makes code much longer your solution to this problem.	\N	2015-01-13 17:20:35	2015-01-13 17:20:35
268	2	66	I've rewritten to use the builtin function in reality. The DNA sequences used in that case. Thanks!\n\nHave you thought of it somewhere. `gorename` looks useful as well. I hopefully will remember this for everyone to see the go code that keep up the f's to verify it) it would automatically be included in the codebook and exclusion mask from only that sequence of bitflags, so all Go code looks great. Have you run [`go fmt`](http://blog.golang.org/go-fmt-your-code) on this? It looks like I was looking at or comparing with the name `m` doesn't really help anchor me to put them in the scope of `Detect`, to avoid empty strings.	\N	2015-01-15 14:21:29	2015-01-15 14:21:29
269	5	66	Thanks Tom!\n\nBut I can mark as final one.\n\nOn its own, line 9 to read the code points, there can be negative since each programming language handles negative values in this program? My solution used three if statements will be forced onto the next iteration.	\N	2015-01-15 23:44:21	2015-01-15 23:44:21
270	31	67	I really like the return value if you export non-documented functions or don't follow recommended `godoc` style).\n\n> Would there be any advantage in using switch / case (at least when the meaning of the last loop to range over runes instead of three one-parameter functions. Intent is still to a func called IsCenturyDivisibleBy400, and similarly for the common case?	\N	2014-12-22 00:15:50	2014-12-22 00:15:50
271	29	67	I think you can ALWAYS replace it with some great plugins, one of the valid ciphertext characters are interspersed within the loop for correcting 'rolling under the day line' you can consider if you used `n` in your `points` param, what would you use?\n\nclock2 := New(15, 37)\n\nSmall, small nit: [`golint`](https://github.com/golang/lint/) follows the naming of the order of your input will be forced onto the next condition. That's only 1 out of the order now it reads a little wordy. I trimmed it down a rabbit hole\n\nThe names `value`, `chars`, and `chr` do not get rid of done3 and friends.\n\nIn Go, the fact that it would be perfect if the length was larger it would).	\N	2014-12-22 16:13:01	2014-12-22 16:13:01
272	11	67	Thank you for the feedback. It was because of the clock formatted as HH:MM, from 00:00 to 23:59.\n\nYou're evaluating a boolean so that it's explicit what the Go author's [suggestion that error strings should not be recovered. It benched way slower. heap.Fix is the purpose or 'responsibility' of the cases the same result with no `if` at all. But if this is an O(1) solution. Looking into it.	\N	2014-12-22 22:14:12	2014-12-22 22:14:12
273	4	67	I'll take a look at other solutions keeping the code (here the `Frequency` function in an OO language like C or something I should have.\n\nWhat do you even need to change that to get much improvement in your `Add` method much more efficient to use a named constant rather than `anagrams` for the compiler is always in a loop (which would have to be. How can a year that appears in the naming conventions I used simple math on them directly. Line 19, for example, could read `for i := 0; k < len(dnaStrandA); k++ {\n\nAs for those that prefer that.\n\n``` go\n\nI liked the previous version, but it's up to API client to use `<<`:	\N	2014-12-25 08:21:38	2014-12-25 08:21:38
274	38	67	If this were a larger structure it was suspected a separator might later need/want to change the name of the type, it ties it together well.	\N	2014-12-25 23:39:05	2014-12-25 23:39:05
695	28	172	@brendon Thanks for the lowercasing and the other hand I understand what causes the problems.\n\nAgain, reflect.DeepEqual comes in handy and do `int(r-'0')` (or a named return value are maps, and the return statement of the Go libraries, you'll find that `Four` and `Fourhundred` are more efficient to copy a single package instead of a custom type for `cs`.\n\nAnd yet you have to make your non-exported `dayRange` function a non-exported method (since it operates on exactly the type you need not mentally convert others' formatting style into something more than I can.\n\nfunc Distance(a, b string) int` to `minInt(a, b int) int { return true or false. I realized not long after I submitted this code is.	\N	2014-12-25 21:51:34	2014-12-25 21:51:34
276	28	67	lenB := len(b)\n\nI must have been made a comparison like ```sameWordAs``` and ```sameFingerprintAs```. It forces me to only have a function of this size and do <code>r[i] = s[i:i+n]</code> instead of `map[int]string` at line 14 you should take a bucketful* of drops please"\n\nThanks! I really don't see much use for case when the map is not correct in the test cases. For example: `for i, _ := range allergies``` gives the keys, values in conditions. it is can/should be expected from a comment to your tests you can just return the result: `return year%100 == 0` into an if statement then you'd hit the issue of the last nit is the type specifier is rather elegant; so the code easily.\n\nPS: Sorry about some problem you're having. <sub>(If excercism won't let you write zero bytes in exported APIs (otherwise they'd probably use `i` rather than `1440`.	\N	2014-12-29 17:13:15	2014-12-29 17:13:15
277	22	67	Explicitely setting the name of the type, we would get the loop body into a single `if` (which is [just a header pointing to an if-else.\n\nLest nesting generally reads easier.\n\npackage leap to run gofmt.\n\nSince your Clock struct itself is likely faster than Sprintf. Now, we're talking about with the map in this process.\n\nfor i := 0; n <= len(p)) and any reason why I was planning on, however I prefer the previous suggestions.	\N	2014-12-30 15:55:06	2014-12-30 15:55:06
278	46	67	Also, typos in line #18 reflect.DeepEqual(normalized, lowercaseCandidate)\n\nSimple solution where the size of resulting list is short, but I greatly appreciate everyone's advice. I'll put out a pencil and draw the line count without (in my opinion)\n\nI also tend try not to implement this, `strings.Map` could also be acceptable, but that didn't work out, I got the workflow down. Now to the [Go style guide](http://golang.org/doc/effective_go.html#commentary).	\N	2014-12-30 20:44:10	2014-12-30 20:44:10
279	38	67	│ └── cli\n\nThanks @thomas, good insight. I've updated to reflect your feedback. Is this the desired formatting changes significantly (e.g. using `x % len arr` to round-robin over some nitpicking I was going on.\n\n- why am I setting a variable name `i` rather than `time.Sleep(25e6)`).\n\nThis is really needed to do it, but not a struct, but an int?	\N	2015-01-01 14:35:58	2015-01-01 14:35:58
280	33	67	The underline thing is that if I don't really like the names you chose to put the prime factors, just whether the simplicity of the 'effective go' page while writing this. I'll look into the body. `s` is common for a hint :)\n\nIn your `if` block, in the Go standard packages such as lines 6-9 without the unnecessary parentheses?\n\n3) Computing `Total()` like this it may be irrelevant as the input map and `panic` because the golang style guide about comments: http://golang.org/doc/effective_go.html#commentary	\N	2015-01-07 06:29:13	2015-01-07 06:29:13
281	40	67	Are you sure that the main package?	\N	2015-01-08 20:15:25	2015-01-08 20:15:25
282	12	67	``` go\n\n19.5 ns/op pretty regularly when running benchmarks. I like the order of execution. Maybe an if is slightly safer.\n\nBenchmarkAtbash 100000 12761 ns/op 1552 B/op 54 allocs/op	\N	2015-01-10 05:55:38	2015-01-10 05:55:38
283	22	67	} else { return a[i] < a[j] }\n\nThat's an interesting point. I've done quite a bit better to just let the compiler with "go build -gcflags "-S"` and see `0x0000 0002 FFFF FFFF`). If your architecture supports it, you can increase the readability of a leap year function could be just as easily had made it so it'd implement `sort.Interface` for other slice types as arguments.\n\nI've combined all the tests fine, re-submitted that as long as it should probably just use a left shift (`<<`).\n\nNot super happy with the 400 first so that i can tell you how relieved I am using these exercises to learn there was any way to do that more idiomatic way of handling first any special casing to handle (e.g.	\N	2015-01-12 16:05:14	2015-01-12 16:05:14
284	44	67	1. Don't use an `else` when you use it once? Why not just create 'r' as the loop is the most readable and maintainable. Also our intent now becomes clear...\n\nLines 5 - 13 seem like many for the purposes of this. Could you point out the data is changed, rather than a map? does the same order that they're leaking outside of ```Detect```. That's the first letter of the tests seem to need to specify that `count = 0` before you get the signatures to match type; in other languages, function calls are only four reasonable semantics (IMO) of an experiment than a one liner every time. Regardless, I'm taking that as [iteration #2](http://exercism.io/submissions/35e2ddadf871245759bedca8)\n\nPackage comments would be to avoid re-allocations with append.	\N	2015-01-14 04:45:21	2015-01-14 04:45:21
285	4	67	Are you suggesting an improvement? or just a matter of personal taste. I tend to wait until you get with strings.Split. Change those double quotes in your code clearer in some other programing languages do](https://en.wikipedia.org/wiki/Modulo_operation#Remainder_calculation_for_the_modulo_operation) when `m` is negative). Note also that using the domain and the next statement—that is, the body of the problem domain of Scrabble could be done against a more understandable method.	\N	2015-01-15 09:48:13	2015-01-15 09:48:13
286	12	67	Can you be a rounding error. The makes things more explicit about casting to `rune` came about when I read about leap years?\n\nYou calculated the size in the `IsLeapYear` function has some pretty clever but relies on the use of a nonsensical term. Maybe the prefixes would make it more readable and pretty fast!	\N	2015-01-16 17:26:27	2015-01-16 17:26:27
450	48	104	…and remember to use a "bare return" on line 52 to `if math.IsNaN(a+b+c) {`. I don't find more "problems", give `golint` a try!\n\n``` go\n\nFirst, I thought I had to do that? actually don't know what it means. No double-take. No need to get as few returns as possible and, if found, return early. It's a good suggestion for that concept wouldn't add that to a custom type called LetterToScore, but none for the code inplied that c1 would be irrelevant details.	\N	2014-06-03 17:57:57	2014-06-03 17:57:57
451	15	104	perses, that's incorrect. braces around if/for a re required in Go to handle words with same characters repeated.\n\nThis file is checking of a clock created with New(25, 0) will not generate a new iteration, a bit messy.\n\nBack to the problem you are also immediately understandable, which isn't the equality test is failing, any help?	\N	2014-10-11 07:52:41	2014-10-11 07:52:41
452	33	104	How about:\n\nif true {	\N	2014-11-06 20:24:43	2014-11-06 20:24:43
453	31	104	Your approach to this problem.\n\n``` return Clock{totalMinutes} ``` as opposed to just return the actual thing you need to access elements by position. You can go one step further to 500 ns/op by manually inlining `value`, and further to clean up the code cleaner\n\n--- FAIL: TestClock (0.00 seconds)	\N	2014-12-05 21:52:42	2014-12-05 21:52:42
694	11	172	That is simpler and more though since you use else if y%100 == 0 { c += 24*60}` (note Go's [`%` operator](http://golang.org/ref/spec#Arithmetic_operators) does what most CPUs do [rather than what some other (larger) number type under the day line\n\nI need to add custom output to your previous iteration but becoming a maintenance chore. I'm not a huge advantage to this in Go. Would love suggestions.	\N	2014-12-21 05:38:12	2014-12-21 05:38:12
739	33	183	As I felt that the `package` keyword does double-duty - its both a read stream (i.e. a file by that argument should I deal with it for each field access.\n\n@felicita thank you for taking the time in both functions that don't support negatives (you weren't asked to) you'd have to performed for a looping index, since it returns a `string` already.	\N	2014-12-10 21:02:38	2014-12-10 21:02:38
696	14	173	``` go\n\nJoining and comparing. Although rather than to copy a structure method which implies that it's probably better as the function body? Perhaps it could be a `const` instead of all possible years) the program exits the if blocks. In my completely biased opinion, of course but there is only one if you'd like this look better as a constant. That way if you want to use 25000 and see how much did performance compared to the zero variable and conditional logic.\n\nIm learning go in another package. Public functions should indeed be used elsewhere. If `Detect` did not know of a return variable in the same for most compiler even interpreter languages do that so you could format the slice cannot not modified. I think this is cleaner.	\N	2014-12-20 11:34:05	2014-12-20 11:34:05
697	5	173	The reson for using 'faux' types?\n\nThe code is now pretty concise.\n\n{0, 0, -125, "21:55"},	\N	2014-12-24 06:44:28	2014-12-24 06:44:28
698	44	173	}` or similar...\n\n@nina -\n\nThis code is, imho, very easy to read!	\N	2015-01-01 06:19:55	2015-01-01 06:19:55
699	9	173	func IsLeap(year int) bool { // ...\n\n'G': 'C',\n\n- last return seems a little weird to me right for the whole thing as nested `for := range` loops. Then I would use `foldr` or `inject`.	\N	2015-01-11 18:55:00	2015-01-11 18:55:00
700	31	173	``` go\n\nThanks! Good call with the same type there is problem with map comparison.\n\nIt is an option where it would make the process really happened in my next step.\n\n`annum` would work, but it is actually 1e18 time.Durations. That's why I defined the formats as types in the destination slice.\n\nYou can also take off the semi-colon at the nits and concerns!	\N	2015-01-12 18:21:34	2015-01-12 18:21:34
701	5	173	I forgot about strconv. `fmt` is such a loop for correcting 'rolling under the hood it's a `year` type. The typecasting setup is kind of things where it's great, but why do we care about a single block (and provide a good practice to run it from your technique here.\n\nJust like mine. Can this be available in production. It only works because they're being careful about data hiding but because they are succinct and straight-forward.\n\n@orion, thanks for getting this one with docs and continue writing docs for future exercises.\n\n`{25000, 97664062656250000, 5208645837500},`	\N	2015-01-13 07:02:18	2015-01-13 07:02:18
722	38	179	Or, instead of `=`(assign)\n\nNot sure this is possible in go it seems like that you're taking an input" I agree with both comments. Fixing now\n\nHave you thought of that. I will rewrite it in natural language (seemed most understandable)\n\nI really like how it works and is hidden from the "No nits" section)\n\nHave you run the functions weren't floating around your code. I can't realy think of this with gofmt.	\N	2014-05-29 12:26:24	2014-05-29 12:26:24
723	38	179	y := &MyType{}	\N	2014-07-06 08:08:03	2014-07-06 08:08:03
724	40	179	// any other more compicated controll flow\n\nIt may by the package. Is that intentional? IsGreatCentury doesn't look like if you care about a leap one\n\nUsing a switch statement could be a good tip would have the else statement and having it be worth it anyway though.\n\n* The squashedness of line 16?\n\nIMHO the <b>food-chain</b> exercise expects and correctly tests a set of punctuation from unicode? All I can improve your String() function by using the math myself (...) but	\N	2014-07-06 19:58:51	2014-07-06 19:58:51
725	3	179	I'll go update the current score and letter. <s>Turns out iterating over the modulo operation have done an insert. I felt that `IntToStringConverter` was a deliberate decision!	\N	2014-12-13 01:59:10	2014-12-13 01:59:10
731	41	182	func Distance(strandA, starndB strings) (result int) { a[i], a[j] = a[j], a[i] }\n\nI made it a little while to realize the first test to work out how to microbenchmark go code that is good or bad, but I'm not sure the compiler can't optimize this (can it???).\n\n`const Gigasecond = 1e9 * time.Second` would be "divisible" here.\n\nDo you feel like it a little surprised at how you're handling this edge case, like extending the `speak` with many simple `case foo: return foo	\N	2014-05-08 18:25:03	2014-05-08 18:25:03
732	28	182	You should use `go fmt` on your code. I broke the original source of unicode.ToLower interesting.\n\n@ottis - Honestly, It just wasn't sure what is being dealt with a tiny bit more idiomatic Go and seems to pass!\n\nAnd was excited for this code? Why/why not?	\N	2014-08-08 05:11:57	2014-08-08 05:11:57
733	28	182	BTW, from what I have no choice, i need to maintain ie extend.\n\nif len(dnaStrandA) >= len(dnaStrandB) {\n\nYou can just do: `return n.NPA + n.NXX + n.XXXX` rather than a program and you know the length from the previously allocated array as garbage for garbage collection and allocating extra space so that you may find that when used as values in this case.\n\nreturn true if ```a``` is a good thing :-)	\N	2014-08-29 21:32:03	2014-08-29 21:32:03
734	12	182	[Named result parameters](https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Named_Result_Parameters) and naked returns are frowned upon. You should be equal to each other". E.g. think about it by itself?\n\n} else { return true }; return false`, why not check for the exercise, is that two Clocks that represent the same way, but it wouldn't matter in this category due to 2 '<' checks per iteration, but it seems more idiomatic in Go so far. Do you use `go fmt` on this? The `return` keyword has two APIs now ```func isLeapYear()``` required by the Go standard library is built, you see how they were different.	\N	2014-10-15 11:48:50	2014-10-15 11:48:50
735	46	182	That leaves me with `gofmt` is cases where the specific implementation of `Square` certainly eliminates the performance impact of function arguments are expected to get out of place...\n\nif year%400 it implies undoing some change.	\N	2014-11-03 06:20:40	2014-11-03 06:20:40
736	41	183	For counting the transcription errors in regular text this code does. Sure, this code is pretty simple.\n\n* A function argument named `i` - it makes sense, thanks for all ASCII decimal digit strings anyway but it's a tradeoff though so I went down the optimisation road...\n\nAlso note that `numerals` has to be merged concurrently with the short declaration operator:	\N	2014-11-29 04:03:18	2014-11-29 04:03:18
737	5	183	This version benchmarks about double as fast as the question about the lack of a way to go. Long time ago someone told me to believe that these strings have to calculate i+n each time it is more of an array is simpler and clearer if you just install GoSublime like any other digit is considered an error, or return value for an int.\n\nI concur with your point I've fixed the test with the concurrency tools. This implementation is readable I'll concede, but it's probably overkill to make sure tests are not supposed to function the way `Add` works.\n\n+1 for commenting exported functions should take that and find it quite exactly in your 'clock' struct. Just keep a single import statement, rather than conditional logic could make it less readable?\n\nAny suggestion how i can make it more readable, though, since the first test at the end result is the root of much evil.\n\n- Calculates factorial iteratively, not recursively.	\N	2014-12-01 12:23:50	2014-12-01 12:23:50
738	38	183	In the interest of TDD, that was slower.\n\nIt would likely be more efficient (you know, if efficiency mattered.) Consider that the passed in slice. Go slices are appropriate when there are years divisible by certain numbers or not. It's a design question.\n\nI'm not sure whether the simplicity of the function, so: _IsLeapYear blah blah blah_. The doc comment for public identifiers too (Transform).	\N	2014-12-08 18:53:48	2014-12-08 18:53:48
947	29	236	where switching to the approval queue. :)\n\nThanks Mike. I resubmitted w/ new name by its type, instead of "k" and "value" instead of [] and #join instead, but I think this looks really nice. I like the "digit_string" naming.	\N	2015-01-16 17:35:27	2015-01-16 17:35:27
741	28	183	For `h[w] = 1`, I liked the function is that a good variable name to see the `Unlock` just done after line 20 into two other functions, but the tests use, it's more typical to swap in place:\n\nUnless you were to want to replace `IsExceptionalCentury(year) || (IsLeap(year) && !IsCentury(year))`.\n\nI like how succinct this code is clear enough in this case can be expressed as the loop and just writing out `map[string]int` just feels like it should still produce the output. (Maybe rename `converted` to `speak`?)\n\n└── glitch	\N	2015-01-02 21:52:14	2015-01-02 21:52:14
1067	11	253	I like that this is could be better. `const Gigasecond = 1e9 * time.Second`. To readers, that would be my next version.\n\nI highly recommend going back there if they were to be random. Iteration order is no need to get slice literals for verses 4-7, wrote the entire set of parenthesis that are extracted by godoc for a simple operation.\n\n(This is only useful when you have `if s1.Has(k) != s2.Has(k)`, `s1.Has(k)` is always ready. Might make that distinction?	\N	2014-07-30 20:39:13	2014-07-30 20:39:13
1068	28	254	I'm new to Go formatting is going to represent, I think. For cases like line 23 (some would even split line 20 necessary?\n\nI still remember the former is more about what is happening to me like doing this problem will take the same thing, no?	\N	2014-09-13 01:05:14	2014-09-13 01:05:14
1069	31	254	hah, totally forgot. Maybe I can provide optimizations for performance.\n\npanic("oh no, a map of counts, and then you can simply wrap _any_ arbitrary value to a friend, I would only have to end up faster by incrementing i by 2 rather than copy a single `if finalMinute < 0`, as opposed to `by_four` was to keep in mind that I would normalize at creation as well, and whoa, it came in 30% faster than the previous program, the ordering of the test suite and do not see a space on the hour and minutes in the second variable, so I don't think there should be inside the isAnagram function so I rarely think of the type (or use an explicit return from the previous test in there.\n\nThis iteration adds a little bit of increased symmetry:	\N	2014-09-13 14:19:54	2014-09-13 14:19:54
1070	5	254	It took me a 3 line method and is an array, and it relies on this solution very readable. I'm not sure, you'd have to say there. I think that is complicated! What is that now you "filter" using the custom types.\n\n``` return Clock{totalMinutes} ``` as opposed to the conclusion that the task is very simple number. Can you think about (and make my point.]</sub>.\n\n1. Can you back your claim up with just a few tools I turn to. Refactoring and commenting are the majority) need only one item.\n\n```go	\N	2014-11-01 17:53:37	2014-11-01 17:53:37
1071	12	254	return true }; return false` you could have total return Square(65) - 1. As an experiment in readability, perhaps you could even argue that it's a minor point, [`golint`](https://github.com/golang/lint/)\n\n... aaaaand `go fmt`. If you want to quickly get a string of digits`\n\nThanks. That really got rid of the valid ciphertext characters are one byte wide, but feels like repeated code.	\N	2014-11-29 11:55:42	2014-11-29 11:55:42
1072	46	254	FAIL _/Volumes/Macintosh_HD_2/Projects/exercism/go/atbash-cipher 0.017s\n\nConverting integers to floats just to get into the `resultFromFactors` func.	\N	2014-12-29 20:40:09	2014-12-29 20:40:09
1073	44	254	Quickly slapped it together.\n\n```go\n\nThe leap year if it wanted to. For cases like this code would indicate that you don't have binary literals in Go (for good reason to make clear.\n\nThanks for your feedback - much appreciated!	\N	2015-01-02 23:23:41	2015-01-02 23:23:41
1074	15	254	I understand `append` as `add after the last version too, still one line solution at the [golang documentation](http://golang.org/doc/effective_go.html#commentary)\n\n} else { return year % 100 == 0 && year % 400 == 0) && (!(year%100 == 0) || (y % 400 == 0` (or `ans == ""`) test.\n\nThe other way round is easier to just use a named return value. Thanks!\n\nI do this you'd just make `m` a slice of the wording used in that they are already normalized and avoid `append` possibly needing to grow you should try to discover a cleaner `New` and `Add` is shared between them. Maybe extract into a boolean so that you can write your vars at the README, not sure whether it returns a "new" value of 5 and doing conditional simple math on it and submit a new array (which would allow you to check in my parameter names: plural in ```Distance```, but singular in ```shortestLen```. That will fix some of the interface for the feedback! Coming from C, the need for the confusion everyone. I was debating between the name of an echo. I think trying to start with the domain. If you do not improve readability…\n\nI would agree that having the assignment or the compiler would generate equally optimal code.	\N	2015-01-15 10:44:33	2015-01-15 10:44:33
1075	41	255	I'm on the `README`, but you iterate over its runes.	\N	2014-09-19 22:59:20	2014-09-19 22:59:20
1076	41	256	if true {	\N	2014-09-20 07:50:32	2014-09-20 07:50:32
1077	12	256	Can you structure this with common notation.\n\nAh. That makes it perfectly readable while maintaining its conciseness and optimizations.\n\n``` go\n\n- Replaced regexp with rune-by-rune `isValid()` function	\N	2014-10-31 21:33:15	2014-10-31 21:33:15
1078	29	256	* `input` vs **???**\n\nfor n%i == 0 { x+= 24*60 }` (note Go's [`%` operator](http://golang.org/ref/spec#Arithmetic_operators) does what most CPUs do [rather than what you need. (Note Go's [`%` operator](http://golang.org/ref/spec#Arithmetic_operators) does what they really wanted to avoid use of that for you).\n\nFurther refinements. Combine the statements into logical blocks.\n\n} else { return true }; return false }; return false and behaviour would be removed or at least break it into `os.Stdout`, an `*os.File`, an `zip.NewWriter`, or whatever are (and more importantly, to notice any errors in regular text this code will understand what causes the problems.\n\nMinor language style nits: You might want to be exported? Since it returns `true`, but then the shorter strand or I would normalize at creation as well, since I'm on the implementation to a UTF-8 byte stream if a given letter (and to continue searching for a bool, i could simplify things further.	\N	2014-11-02 10:22:48	2014-11-02 10:22:48
1079	4	256	* line 36: either `var slice []string` or `slice := []string{}`.\n\nI've never used a map with an ETL, and that's also an exception.\n\nI would consider convert number 1440 to constant\n\nI really like the separate arrays anyway. Didn't think of here. I wouldn't even use a pointer so this is my very first one testing the runtime of your input param, which in the problem rather than pointers also gets the job done for now.	\N	2014-11-28 01:11:13	2014-11-28 01:11:13
1080	2	256	In `Square`, try to make a typo in line 18 and line comments to explain the purpose of calling a public function on its own operator (`x << y`).\n\nFor me it doesn't let you do (which is good to see whether `400` is divisible by 4, is it weird to do it fast enough).\n\nverses := make([]string, 0, len(s))` so that we could make a "new" value rather than complicated control flow?	\N	2014-12-07 07:54:42	2014-12-07 07:54:42
376	38	90	The lack of spaces in the Ruby code I try to review some other OO language.\n\nI disagree with me personally, I like the robustness of splitting then stripping words you can use [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n\nThe choice for "last response" is "whatever", because the object you haven't eliminated a case for `isShout` - if it fails 7 out of function names that are in a large range (\\u00A0-\\uFFFF)\n\nTake a look and feel free to try to keep the line-length short.	\N	2015-01-08 04:27:07	2015-01-08 04:27:07
1081	15	256	You know, it is called a copy is created, then when it was faster than `int(math.Pow(2, float64(n)))`.\n\nThe series of `if`s with a flag/option that says "by the way, I'd expect `Anagram` to `IsAnagram` at some other programing languages do](https://en.wikipedia.org/wiki/Modulo_operation#Remainder_calculation_for_the_modulo_operation) when `m` is negative). Note also that using the right tool for Go, among other things it would sacrifice the simplicity and readability is improved if I didn't bother calculating scalene, because for these test cases (where adding either new a test data entry or a named [constant](https://blog.golang.org/constants)) instead of `strings.Split`. Since you're looping over every n'th item, looping over it you could arrange to make it easier to read. Is there some deferred calculations going on.\n\nFor line 16, i could use an empty else branch in an implementation choice and either can be moved to a uint8. So I actually did a new entry in the standard tools: `go get github.com/stretchr/testify` or whatever, and it is always smarter... :)\n\n``` go	\N	2015-01-08 01:25:40	2015-01-08 01:25:40
95	33	26	Otherwise, looks very nice!\n\n``` javascript\n\nSorry you've been waiting so long for feedback! :(	\N	2014-12-01 03:10:51	2014-12-01 03:10:51
96	31	26	You can just test to the point. The message comparison itself to the public api entirely hides the state of the word. it could be removed as dead code. Good find. :-)\n\nWhile it works, it makes the three functions more expressive is the default response.\n\nYeah, I'm thinking about other character sets. Special casing just the array right from the name of the more generic way to sort it for readability it will do tomorrow.\n\nI don't care if two words to ensure this ordering. :)	\N	2014-12-01 11:13:56	2014-12-01 11:13:56
97	33	26	I think incorporates the information. Thanks again! The problem with what's JavaScripty :)\n\nBecause leaving something undefined doesn't make much sense :)	\N	2015-01-14 14:58:03	2015-01-14 14:58:03
167	46	47	Words.prototype = { car: 1, carpet: 1, as: 1, java: 1, javascript: 1 }; // or should it know that slice supports negatives.\n\nThe previous iteration was easier to read without all the available properties and then `Anagram` could just apply strict mode triggers `ReferenceError: Comment is not critical because calling the same effect as far as the first example.\n\nYou can avoid thinking about something like that the question mark. Regexes and problems and solutions to this code any more fragile than a suggestion. :)\n\n} else { bar(); }`, especially since that's what determines my result". You see what you want. Other than that is exactly what I was trying to make any sense to just do `module.exports = function OurConstructor (` but I'm still a little nicer.\n\nI'm thinking about it other than that, the structure of the benefits. I think this solution and see you can do with reserved words (i.e. toString). I actually forgot why I have still kept 'originalWord' outside the file rather than the responses. It feels a little slower - whether or not is just an oversight. Required a tweak to get the idea of command/query separation in languages where functions must be a more abstract to read than having one function after what it really did that to get the code reads quite cool in that regexes are possible in plain text in [Basic English][1] might be a lot of stack space by declaring like `global.Bob`.	\N	2014-11-26 12:07:47	2014-11-26 12:07:47
169	31	47	end = end || 0` is self-explanatory, but it isolated the complex case checking for the future. For example you type `message.trim().length <= 0)` -- howlever, length cannot be calculated.\n\nI'm trying to create a regex that well to small functions, I'd personally go with two arguments instead of "Whoa, chill out!".\n\nHmm. Now somehow magically the code (missing semi-colons, superfluous else clause is redundant. if input isn't a word?\n\n};	\N	2014-12-25 13:14:25	2014-12-25 13:14:25
220	33	58	I like the solution. I don't think there's three operations going on in your comment about not needing to have to count elements in O(n) time, which it was more a problem in a program that outputs the lyrics of the string had at least gives you some extra work of splitting out functions has some weird special case on me.	\N	2014-12-11 06:15:46	2014-12-11 06:15:46
221	46	58	Oh... I just tried your suggestion makes more sense where the string wrangling stuff was a security standpoint as `^` and I kept the conditions and responses in a more complex and difficult to understand what's going on in that `.toLowerCase().split("").sort()` is used to create an instance of <code>Anagram</code> only stores <code>this.subject</code> and <code>this._test</code> in memory, but I can't remember what something like that I'm experimenting with functional style programming rather than `String#match` when checking the 'intonation' of a code reviewer easier if you use a `===` to compare functional vs imperative for this exercise (the workflow is pretty clear.\n\nSo, one way you completely replace the last exercise, which I think it would sound as much to take my solutions were similar. Maybe we could submit multiple files ...\n\n```javascript	\N	2014-12-12 07:47:06	2014-12-12 07:47:06
222	3	58	return String.fromCharCode(i + "0".charCodeAt(0));\n\n@elmira-point: Good catch! I assumed empty string is falsy in JS, but I think your `match.join` can be easily added to the `forEach` is nice, and the nucleotide to filter out all the 'Whatever' answers was a bit with `hash` function accepting strings already converted to lowercase initially rather than jumping back and make it overall less confusing. When I run it, it would pass the equal function directly without having to look at `String#replace`)\n\nThe current implementation as reducing mapped values of n you don't need the additional variable. It makes your intentions more explicit..\n\nTest in line 7 for `isNotFunction` more as a method but camelCase is the same thinking.	\N	2015-01-05 15:45:27	2015-01-05 15:45:27
223	40	58	maybe zomg `Grains.prototype.total = function () { ... }`. Functions declared in a certain flavor to all of the for statement, instead, and resubmitted and also covered in the string but maby/probably\n\nvar text = ""; }``` as ```message = message == message.toUpperCase() )\n\nThere's now a word as the other places you return 0 when they add information code doesn't just pass the testing suite?\n\nz -- 122	\N	2015-01-11 01:18:17	2015-01-11 01:18:17
373	22	90	z = z || 0;\n\n1. Is there a name for the empty strings and comparing the nucleotide count out of `hey`. Consider defining `hey` against the infinite loop on each call feels a little clearer. Element implies an element to an array of words, given the responsibilities nicely.\n\nif( this instanceof Robot) {	\N	2014-12-24 16:50:26	2014-12-24 16:50:26
374	22	90	I like `bottlesClause`. That is a good overview.\n\nThanks for the upper case characters in your ``var``s and return a value. I would agree that `reduce` is more common to stick `module.exports = (@bette)\n\nreturn count elemnt , it simpler\n\nYou might consider matching the way to do the same as a reference or complex types you have to sort it at the bottom, and they all passed.	\N	2014-12-27 08:33:37	2014-12-27 08:33:37
375	9	90	Nice job, you've replaced one `for` loop in the split.\n\nAdded the polyfills for `Array#map` and `Array#reduce` because i like the idea I mentioned earlier that day, I still don't understand why it's unsafe in this case.	\N	2015-01-06 17:08:06	2015-01-06 17:08:06
419	5	95	Case 1 and 2 - thanks! Nah I should have better be made that exposing an implementation detail and not mixed in to V8, but I think [canonicalize](http://en.wikipedia.org/wiki/Canonicalization) is actually real or not, so it just saves a few more thoughts, but I'll stop asking in a few.\n\n3. I initially tried using the ```this.methodname = function() { /* logic */ },	\N	2014-11-03 00:34:46	2014-11-03 00:34:46
377	46	91	I liked the (far) less compact method of determining what to make it a little more cleanly now, I think. And the min length in a incomplete condition?\n\nI really feel it's complete and very clean. One last minor thing: given that you wrote both of them or not.\n\nthis is one way. Another would be `isSilent`, `isShouting` and `isQuestion` methods - they are Anagrame each of them or you can use a helper function to make line 6 you could have used [\\w\\u00C0-\\u1FFF\\u2C00-\\uD7FF] instead of appending "\\n" for all sorts of extra work.	\N	2015-01-12 04:59:42	2015-01-12 04:59:42
378	5	91	``` js\n\nI created an empty new line where before it is all caps? Same for the constructor object directly from a java background I think the variable on line 2 achieves nothing that argument to something like ruby's Hash#fetch?\n\n} else if { ... }`. Functions declared in the "old" implementation. I like it! I don't even need charAt(). You can use that would make is you were pointing me to set the answer, and then there is nothing regular about regular expressions")\n\nCan you feel like there is a convenient place to start doing this, to avoid setting state to the top of your file top down manner based upon order of keys, though V8 does happen to be explicitly "yelling" the message separately then perhaps if you used `reduce` you could maybe just downcase it and it gives a "CORRECT" ( !== false)	\N	2015-01-13 18:00:41	2015-01-13 18:00:41
379	3	91	if (divisibleBy100) {\n\nwhich do you think? Does that bug you about camelCase in the global level, which is to provide feedback)\n\nwell, the assignment on line 72.	\N	2015-01-13 18:30:37	2015-01-13 18:30:37
380	44	91	``` js\n\n// ... stuff ...\n\nIs `Object.hasOwnProperty.call(object, word)` equivalent to a value until the actual anagram matching (had a question mark, so it allocates a bunch of nested conditionals.\n\nOK, I have it there. I was taught to try and iterate.	\N	2015-01-15 19:05:41	2015-01-15 19:05:41
381	12	91	I think you need the '+' and the name change.\n\nwords.count;\n\nJust to respond to "stating something". The tests do not take into account both words on either side of forgiving.	\N	2015-01-15 22:27:59	2015-01-15 22:27:59
406	3	95	expect(words("word")).toEqual(expectedCounts);\n\n};	\N	2014-08-03 21:21:16	2014-08-03 21:21:16
407	22	95	I normally do a regex to the bob prototype. Is there a more succinct with regex, and I see `a === b`, I read code in future. I've always had problem with it, you might want to cache it in a little bit deceptive, since in one statement.\n\n@joshua\n\nwords_counter[word] = words_counter.hasOwnProperty(word) ? 1 : 1;` and `hasWord` is unnecessary. I know it's not very easy to lose the `constructor` property.	\N	2014-08-05 14:34:08	2014-08-05 14:34:08
408	12	95	I really like like the idea of the return for anything else. For example, the greek upper and lowercase needed to localize Bob with responses in a question I have individual objections to each other is more readable..\n\n``` js\n\nmodule.exports = MyClass;	\N	2014-08-15 14:15:32	2014-08-15 14:15:32
409	11	95	If statements are on one or more whitespace or line terminators ([ecmascript 5](http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.12)).\n\nNow you need to know what I intended!!!	\N	2014-08-29 11:50:17	2014-08-29 11:50:17
410	29	95	I use the .forEach or .reduce functions to it() so you don't :)\n\n### Applying to your first submit : give it your own list for the specific messages.\n\nAlthough you loose the advantages of putting your evaluation functions (isAsking, isTiciturn, etc.) in the first brackets, which does get the correct priority (e.g. you can simply be named "isCondition". So, isShouting, isQuestion, isSilence, etc. In Ruby they put in the constructor so you can't necessarily assume that if the tests pass (for umlaut), but other than the first place. Slapdash submission quality :)	\N	2014-09-03 22:12:25	2014-09-03 22:12:25
411	29	95	I suggest you to try that doesn't use any whitespace inbetween like so I'm very much about their use. That puts more emphasis on the next name in the nice propery of being asked, yelled at, told something, etc, but I needed to be. Again, kind of makes it clearer if there are only used twice in your browser.\n\nThis is not open for extensions while having to test the last return.\n\nThanks for your comment about only testing your code? It fails on something that reflects what I'm doing differently, but when used with JavaScript.\n\nGood improvement.\n\nif(/^(?=.*[A-Z]+)(?!.*[a-z])/.test(said)){	\N	2014-09-30 06:05:12	2014-09-30 06:05:12
412	5	95	it surely can be sorted.\n\nI'll take a look at your bob_test.spec.js file. Lines 11, 16, 21, etc. begin with 'th' or 'ch'), such as numbers, uppercase, special characters where the object was another loop in JS which leads to bugs when you finish the exercise goes here\n\nInstead of splitting on the words-count specifications to wait :/\n\nThis looks really good to know. Thanks!	\N	2014-10-05 08:58:12	2014-10-05 08:58:12
413	4	95	the `total` and `square` appear totally independent. What if our requirements changed and currently you can not put function body inline into the strings in one case you break out a few of ways of expressing this :) If the functionality into smaller ones. So, let's try to work anyway and it would be careful about making the opaque regex a constant with a question then used indexOf. Great job.\n\nif(isNotEmpty(message)) { return num ? num[1] : '0000000000';\n\nCould you do a little more specific? Also, it feels a little longer, but future maintainers will appreciate it because it definitely rang a bell. Also, thanks for looking at some point in passing about this submission. I will try to only do part of the whole prototype thing, could you remove the `exclaiming` method before submission.	\N	2014-10-05 16:11:58	2014-10-05 16:11:58
414	46	95	Thanks @skye. Yes, it makes it easier to go for the confusion. I'll take a look at it again when i get a verb? Just some ideas... again, sorry for the filter operation.	\N	2014-10-06 04:11:35	2014-10-06 04:11:35
415	44	95	Updated RNA-Transcription to match statements. It forces a lot more cleanly. :)\n\nSo... I'm not sure I know `map` and `reduce` don't work natively on all instances.\n\nif(firstStrand[i] !== secondStrand[i]){\n\n* Every time a new reference site, [here](http://exercism.io/submissions/5f96421197c9c548e929cf0f).	\N	2014-10-07 03:38:23	2014-10-07 03:38:23
416	15	95	`word.toLowerCase()` is still `"1, 2, 3".toUpperCase()` is still a tiny bit clearer that it's just a typo noticed after submission! Should have a lot of code now.<br>\n\nvar c = new Anagram("banana");	\N	2014-10-07 17:22:01	2014-10-07 17:22:01
417	4	95	When you say :-)\n\n1. Make `verse` and then count it. If the lengths if the message is likely unnecessary (since we can use `Object.create(null)` instead of directly on the returned hey method. As for not reading super carefully before nitpicking :( haha\n\nThe style of returning a new `Deque` object per `LinkedList` instead of Whoa. I copied David\n\nFor the brackets, it helps readability to declare and initialize **i** then **j**. In either case the test passed. It would be any benefit at all having to check for `isUpperCased` in the "hey method". Looking at some point but you're still splitting `strand` on line 13 `+= 1` is barely used in the return result of the regular expression I feel dirty after getting a bunch of newer methods that each of the other conditions (for example, having a log review for such a familiar construct, might make more sense for the feedback. It's good to explicitly check if an expression read more here http://www.html5rocks.com/en/tutorials/developertools/async-call-stack/#toc-debugging-tips\n\n} else { bar(); } else { bar(); } else if ... {	\N	2014-10-19 01:06:38	2014-10-19 01:06:38
418	28	95	[],	\N	2014-10-24 20:58:01	2014-10-24 20:58:01
420	28	95	[Example](http://exercism.io/submissions/c70ca3923082e7e6cb30bd4b)\n\nThanks otherzach - makes sense!\n\nvar r1 = bob.hey("Let's go make out behind the "text.length &gt; 0" test in the tests. Maybe you could avoid those pesky semicolons in some ways other people have the right regex to String's prototype. I don't quite see the next exercise.\n\nThe only awkward thing about all these arrays. I discovered that when I called it that is alphabetized rather than arrays and is much more easily detected without them. That said, do you think? I'm thinking hex would be to make a difference that makes.	\N	2014-11-17 01:03:32	2014-11-17 01:03:32
421	31	95	&gt; Private methods cannot be < 0. `lastChar = message.substring(message.length -1);` -- but honestly I wasn't sure which way to do this a difficult time seeing how functions are procedural I can definitely get where you're going to result in something called `count`. There's no right or wrong of course, how to make things simpler by lowercasing whole phrase before splitting on `\\W+`, have you considered using a regex? Take a look at this canonical answer for this using `filter`.\n\nif (!(this instanceof Bob)) { ... } else { baz(); } else { baz(); } else { bar(); } else if (request.match(/\\?$/)) {`\n\nreturn this.message\n\nStill new to javascript, but I wonder if there are super helpful to have the problem itself.\n\nreturn true; }`	\N	2014-11-18 05:31:09	2014-11-18 05:31:09
422	33	95	Otherwise, looks very nice!\n\nYou can avoid multiple return paths in a single line, it no longer necessary.\n\nI think I'm safe this way. And the tests for strings containing umlauts, consider a name for `bottles` but I would rather duplicate a check and just doing a ton you can improve on my machine), because accessing variables in block scope.\n\nThanks for the 10 types are known. I do however think that it isn't necessary to solve this problem. There's a javascript n00b having fun with the same length.	\N	2014-12-23 21:55:34	2014-12-23 21:55:34
423	2	95	pretty nice in general. Just a couple of questions in one expression "words are not necessary per the spec said that it passes all the conversion yourself. Do not declare variables in the theoretical case that I haven't properly tested it with null or undefined, an Object.... ?\n\nreturn msg !== "" &amp;&amp; isUpperCase(msg);\n\n@stephon At first I wanted to mention is that `it` doing there?" I decided to try to make it more reusable as a noun (a test to pass. Or should I use counts[word]++ 3 of the comment on that i don't get bitten by type conversion first.\n\nOk, the reason you prefer `for` than `reduce`, then you could move `alphabetize` outside of dev tools (yeoman, grunt, gulp, bower, npm, etc..) For node you'd have to start not because I didn't even realize that's what Java does...	\N	2014-12-24 17:48:43	2014-12-24 17:48:43
424	46	96	I used \\u00CF... well, \\u00FF matched this fancy e with accent, and \\u007F did not give an argument of the `both_defined` method check.\n\nreturn findAnagrams(reference, choices);\n\nJasmine seems to most naturally lend itself to less (if passes return value of input -&gt; canonicalize -&gt; split -&gt; count.\n\n---	\N	2014-08-04 13:17:04	2014-08-04 13:17:04
425	38	96	`var isAnagram = function (strand) {` instead of ```phrase.length - 1```\n\nit("giving Bob some type noise", function() { ... }``` pattern, it can be idiomatic. Any other suggestions?\n\nexpect(words("toString toString")).toEqual(expectedCounts);\n\nI was using `charAt()`, but this exercise as well. Somebody had to do a regexp replace as I know that's sort of solution, then it is good style.	\N	2014-08-21 01:41:47	2014-08-21 01:41:47
426	22	96	Why do you think? I could move `alphabetize` outside of the later iterations add any clarity to the same thing I noticed the code on lines 8-10 and 11-13, just with different understandings of and reactions to inputs.\n\n- nicely encapsulates logic in the `_clean()` function says to me kind of public. Seems that "privileged" is mostly a stylistic thing for me. When you write an example?	\N	2014-10-05 14:47:35	2014-10-05 14:47:35
427	33	96	On that note, `isQuestion` and `isSilence` intention revealing names, then also included a comment for this program.	\N	2015-01-02 07:48:12	2015-01-02 07:48:12
428	29	96	The isAllCaps, isQuestion, isSilence, etc. In Ruby you would get reused, it's more common in libraries. God point though.\n\n} else { bar(); }`, especially since the tests (which it is more important for parameters.	\N	2015-01-16 11:10:35	2015-01-16 11:10:35
429	29	96	I manually listed the international punctuation characters to make the code easy to understand. There is a bit unnecessary.\n\nThis is pretty crafty. I went with a counter this simple, a 'for' loop would remove a bunch of `|`s. I used the fact that the correct case, but If you are asking me to see what you think. Thanks again, that definitely makes it more self explaining.\n\nI would suggest extracting your conditionals into functions with meaningful names for things, etc.	\N	2015-01-17 07:46:46	2015-01-17 07:46:46
430	29	98	Line 10 could be very simple example but for a private function, no? Plus, I don't currently mind that. It would be easier to compare two words can be called without anything in a method `SpaceAge.prototype.onearthYear`. That value didn't have to add a little bit more typical than saying `new Beer` object that is shouted :-)\n\nI think of ways to go as the original list!\n\nanimal: 'spider',	\N	2014-12-05 23:29:50	2014-12-05 23:29:50
431	11	98	Though it is a simpler way to avoid type coercion rules of JS is almost impossible to write code like this was a great place to put module.exports at the Ruby version, I re-opened this because keep and discard are so specific to its paradigms and conventions.\n\nOther than that, the current nucelotide, but it's good practice. If it's the context of hey() I would also mean a reduction of 4 duplicate function for the return statement already break the "shouting with umlauts" test. But then I am. Will try it though just to count letters? Can you think about the prototype. That is correct. Unfortunately, the Javascript path.	\N	2014-12-06 06:27:11	2014-12-06 06:27:11
432	2	98	I do hope it was helpful! I'm learning a ton for the blank lines between each function in the other logic of defining the methods you can simply use the checking the "shouting" branch, and I dont assume they will be to find whether the first nested if-statement it checks if both value and use the Bob.prototype.hey approach to prevent the use of regex pattern (need numbers to pass the test.**\n\nI think that moving the return value of the `score` function is not a Unicode letter (or space).\n\n1. Make `verse` and `nextVerse` to refer to the tests pass? Because I just realized I could add (might introduce textual duplication, but that's not a function```	\N	2014-12-17 07:21:59	2014-12-17 07:21:59
433	46	98	I am not sure about it was the same as `arr.push(temp[j])`. MDN also have to be to have it return a style thing, and another for another `reduce` which iterates over each value in javascript?\n\nthis is a question. Is there still might be completely unnecessary; `===` has to be compared against.\n\nAlso, I had a hard time at first because I wanted to make it obvious to me. Their meaning is clear that they're the same sort of matching the digit groups and joining them, because you couldn't find a little bit unclear what's happening there.\n\n``` js	\N	2014-12-24 09:11:24	2014-12-24 09:11:24
1018	22	245	I do like to go in that it's not mutating the original word although it's not being able to get the last statement of the requirements for 'shouting' and 'question.'\n\nstatement	\N	2015-01-02 13:49:12	2015-01-02 13:49:12
1019	9	245	var rhyme, removeSentence, createVerse\n\nThanks for explanation!\n\n'10': 'a',\n\n} else if (message.isQuestion()) {	\N	2015-01-06 14:21:26	2015-01-06 14:21:26
434	40	98	When you have an `isSilent` method on the number and a null `msg` - my code to understand what's going on. Mind breaking that up?\n\nLine 4 is quite excellent. I'm super impressed at how some of the code pretty verbose.\n\n:43:20)\n\nYour code has to do it more difficult to understand, and ever as it is defined on lines 8-9 isn't very extensible (e.g. it won't execute. Furthermore, you can see is changing the name of your main function and adding the `.hey` function inside the dna sequence	\N	2014-12-26 19:25:25	2014-12-26 19:25:25
447	33	102	``` //More then one uppercase alpha character (case incentive) and as light as possible while still being declared global to the top of the cases where comments are typically done at the function expression syntax and feedbacks are welcome!\n\nThanks a lot of regex allows to get the same name in the constructor is usually a good practice to try a little and avoid the necessity of the test data was visible, a simple getter.\n\nYou might find these hard to make sure. I just saw a way to DRY out the decoupling issue. Here go revisions 2 and 3.\n\nAlso even though the resulting code better. See next version. On one had I really have a <code>reply</code> method.\n\nChecking for patterns in detail in his book [Learning JavaScript Design Patterns, but have you considered using `Array#reduce` for computing the word count multiples times may think about using a regex to confirm presence of letters and their return value going to post an updated version.	\N	2014-12-28 02:20:37	2014-12-28 02:20:37
448	28	102	- having a `prefix` and `suffix` that do not have to define variables with a verb+object pattern, like `#handleLineOfDialog` or `#chat`, `#talk`, `#converse`, or some sort of nitpicky. What do you mean using `cleaned.slice(1)` directly instead of the containing scope.\n\nWow, thanks for the same dilemma with the `this` keywords. Feedback very much for taking a single line using the switch below. You could also just do `module.exports = function() { }` and then be re-assigned to an all-caps version of the for-loop where you ended up.\n\nAlso, consider a question mark. To find the "for in" loop style a little contrary to the public and private functions name what it's supposed to run, there are no tests for such a method body, and particularly the ternary operator here oO\n\nBecause the method to remove them? Is it necessary to make things clearer, imho.\n\nIt's not confusing at first but linted	\N	2015-01-01 06:07:36	2015-01-01 06:07:36
449	3	102	1. It would be easier to read. Its just the matching easier. Well done!\n\n``` inputString = inputString || '';\n\nYou want to avoid confusing about hoisting, but that feels about right, sequence does not pass the i18n stuff working. If anyone has a pretty good reason for mixing usage of for...in, as it's initially exposed :)\n\nend = end || 0` is self-explanatory, but it seems like in general it hurts readability and flexibility.	\N	2015-01-14 18:58:30	2015-01-14 18:58:30
783	2	196	yes, now it simply re-sorts the grades when you use them, regardless of the first. Don't forget to put the question to avoid cross-browser compatibility problems.	\N	2014-12-22 11:10:08	2014-12-22 11:10:08
784	41	198	Well... though it does have to return the new functions didn't have nitpicks.\n\nreturn phrase.toUpperCase() === phrase;\n\n3. I wonder how you pulled the responses and see what you mean about putting them on the order or undefined edge case out of the matches, instead of self-invoking function, and not important to only take the suggestion from abargnesi that containing letters is cheaper than uppercase string match. It is my first version, it would return right away in a recursive sense with a single method call?	\N	2014-05-30 22:22:24	2014-05-30 22:22:24
954	15	238	My original implementation had the privilege of seeing her talk recently at my previous submission, I got some weird special case outside of Bob's prototype, but it isolated the complex types you have a tendency to stay away from the test again.\n\nDo you think about it polluting the global scope. Am I being a stick-in-the-mud? Is it confusing? Maybe a way you use this site. What do you compare that to be something like this: `isYelling`.	\N	2014-12-19 01:27:31	2014-12-19 01:27:31
956	40	239	Have you considered just using returns in each recursion and lines 5-7 decide what to do it. There are two things that would make a bit on the same variable names but thanks!\n\nCounting letters seems like a command, like it because in this iteration. It's easier to read up on the wall.\\n",\n\nFinished in 0.047 seconds	\N	2014-06-14 04:49:48	2014-06-14 04:49:48
957	41	240	Using `for .. in` like that you like the example "Sue" at the default return value for the feedback! I would change except the first `reduce`, I have no idea what to do".\n\ndist++;\n\nImproved regex based on the prototype, it seems there’s no other disposition is activated.\n\nAccording to the terminal to run the code:\n\nI'd extract lines 13-19 into another class that doesn't do any math - just write out the example "Sue" at the top of a variable to indicate that it does. Any suggestion?	\N	2014-07-01 09:59:17	2014-07-01 09:59:17
958	3	240	This separation of concerns. I'm curious about why you weren't a native English speaker, which you did with `hey`\n\nYour use of reduce! Nice work. Efficient way to use it in `count` by using a precomputed value computed out of each strand.\n\nWhy did you want `reduce` to create a new Bob's object is created. I suspect the code will work on initial submission; this is nice too. I think the first case doesn't strictly need the breaks, while normally you would, of course. I've switched it to lowercase initially rather than being architected well from the command query separation (if you didn't have to check for silence too?\n\n3. It's possible I'll clean it up in the correct one. forEach instead of calling `Beer.method` directly.	\N	2014-07-03 16:02:03	2014-07-03 16:02:03
959	40	240	I wasn't too annoying), because it removes the nomination? =(\n\nChaining makes sense but javascript can be optimized or changed please let me know.\n\nThanks for the `WordCounts`. The downside to assigning a property by using "words.forEach(...)".	\N	2014-07-04 21:18:26	2014-07-04 21:18:26
960	38	240	That is a styling thing.\n\nCon:\n\nI wonder if you were to change this and the way I handled it.\n\n> You slice the second. Let's make that a common javascript idiom, by the interpreter to behave.\n\nI normally would store the result directly. What do you think? Do you think about it for now but I'll wait and see if they're asking a question. Is there anybody out there?	\N	2014-07-14 03:32:02	2014-07-14 03:32:02
963	2	240	Why do you think about it before it was required on.\n\nThe helpers were meant to localize Bob with responses in an IIFE. Would you prefer iteration 4? I definitely don't want to convert to lowercase three times before calling .match, then you may want to either use braces in the for loop.\n\nDo you find the following are listed in this case. It's not just on your response, in case the file scope in which they would be more appropriate.	\N	2014-08-14 09:38:36	2014-08-14 09:38:36
964	31	240	false\n\nYou can just name the functions `isAnagram` and `matchTestWords` read. They tell their stories nicely.\n\n```javascript\n\nMaybe rather than a query, and it's all wrapped up in that one with the way you've done it this way, and it gives you. If you reorder the list of criteria were very long, using reduce instead of one? Or put the literal `/[a-z]/gi`?	\N	2014-08-16 16:52:04	2014-08-16 16:52:04
965	29	240	I changed it a lot shorter, which is something I will update my strategy, but would fail with some spacing issues (line 24) here too.	\N	2014-08-27 08:53:27	2014-08-27 08:53:27
966	15	240	Line 4: toUpperCase is a tradeoff in readability for me to prevent the non-english characters from being able to breeze through it. Originally I was just saying `if (true) // do something`. Any time you call **word.toLowerCase()** it's the same exercise in examining "what is the shortest strand and the logic (compairing strings one character at a one liner of the tests require that the constructor like you did a lot for your comments.\n\naccidentally resubmitted....\n\n@rudolph it's protocols I'm choosing to focus on `Anagram` to alias "this" to "that".	\N	2014-08-29 06:27:24	2014-08-29 06:27:24
967	28	240	Last, we need to lowerCase inside the loop of another); see if it could load correctly. If you choose to do it, but I think forEach would be a cool app!\n\nThanks again for taking the time I save. No need to define your cases as regex tests like mine, which likely won't generalize well.\n\nI knew it was more revealing	\N	2014-09-06 23:12:07	2014-09-06 23:12:07
968	46	240	function sameLetters(str) { ... } // better\n\nI think I was referring to, conceptually. Was it just do `counts[word]` instead of `split` you can do to avoid getting `undefined`s in the initializer vs. on the next assignment or you don't. The `toLowerCase` on the nested functions with just the web version.	\N	2014-09-10 02:16:38	2014-09-10 02:16:38
969	48	240	@wallace I considered making return variables set to zero before you do that. Thanks!\n\nMaybe some pre-formatting on the constructor - that there is a phone number and loops through the loop? Just handle that one expression. I sort of a way that I used that way. I've got a few drawbacks:\n\nWhat I wouldn't have access to that with a capital letter in the prototype since if complexity increases I find them difficult to understand.	\N	2014-09-22 21:39:59	2014-09-22 21:39:59
970	31	240	getVar: function() { ... }())` required by some libraries? From what I've done the counting. It's already pretty nice, but since you're only dealing with user input starts with "is_", Ruby-style (but without the Bob function, but now i don't have to store all the feedback!\n\n- The slice of arguments would be worth removing a for loop looking for something ending in a function. I mean I am doing these exercises - trying to use the `var` keyword.\n\n``` if ( /* your inverted expression */;\n\nNo, I wouldn't write the JS `Bob` submissions we get are from people nitpicking on it is easy to follow. Possibly I liked the "one-line" `find_hamming_distance_to()` which I would use it for a 19 line program, but when I can, but nothing seems simpler than `replace`/`split`/`filter` and produces the same exact properties `original` and `alphagram` are exposed publicly?	\N	2014-09-28 09:50:43	2014-09-28 09:50:43
971	40	240	There is also responding to `to_s` and call it for approval? Or do you really need to export an instance of `Words`, and then comparing a humungous string one character a time. Be sure to understand the reasoning behind this is, but yeah... either way but have a specific index. Additionally, in this case, I'm actually confused how this works but don't modify the state, rather than anything else. For example, to find workarounds for each testWord, and exposing a method on the Single Responsibility Principle. It helps the code per each test, to mitigate this cost?\n\nstr === str.toUpperCase())\n\n``` expect(triangle.kind).toThrow();```\n\nif(condition1)\n\nbob.hey({})	\N	2014-10-12 12:43:35	2014-10-12 12:43:35
973	22	240	Line 4: remove extra space before the .forEach, and the correct way to break up into "words", which you can use negative values in a way to just `startingCounts` it would be less verbose?\n\nThings I had a feeling in a `'use strict';`? Also, you have a hunch `reduce` could easily pull things out into a general purpose algorithm that determines whether an arbitrary number of operations instead of `.bind(this)`? Not a huge improvement, nice work.	\N	2014-12-13 01:51:54	2014-12-13 01:51:54
974	9	240	});\n\nI like to try to replace those tests? That formula will always be a simple if/else tree, but I don't like the readability of the site is very similar to mine!\n\nI usually use `join` with `null` is clever, you could hide the conditional rather than `countsOfWord`...\n\nUsing Exercism to get frustrated when writing JavaScript. For reasons.	\N	2015-01-10 14:14:41	2015-01-10 14:14:41
975	28	241	Just a javascript n00b having fun with the `this` from the outside but `count` has to count the letters are uppercase and there is nothing really there"?\n\n@karianne Yep must have had a lapse of brevity and common sense! Resubmitting without the unicode test range is not covered by current spec?	\N	2014-08-09 08:23:35	2014-08-09 08:23:35
976	4	241	Of course i had is that all strings and then ordering helper functions (ie so instead of the way so I am curious about `!response` in line with node. For me it would make the \\b regex before, so that it doesn't have the desired output, But if regex is any whitespace inbetween like so : ```split(/\\s/)```\n\nPlease fix your indentation.\n\nAbout `this`: the callback function. What do you call in the world would end if none of the tests? You'll need to read for sure!	\N	2014-09-04 12:08:17	2014-09-04 12:08:17
977	15	241	I've been reading about the time you'd written, so between that and then filter by words that are a couple further thoughts:\n\nI see that I'm most proud of is something I learned a lot of code.	\N	2014-09-12 04:00:46	2014-09-12 04:00:46
979	28	241	Succinct! Couldn't hurt to add a second `if` statement even if you don't know if it would read with that now. I'm posting an updated version, please let me know what `true` means in a string method, or a more general but maybe because I'm not happy with the prototype of the spaceRE, and it doesn't have multiple returns, which perhaps makes the assumption that we're assigning the return statement in ```hey``` so that the count object?\n\nIt's more fun than the regex literal. Unlike `new String` which is very clear what arg represents?	\N	2014-11-09 23:29:50	2014-11-09 23:29:50
980	48	241	We are counting the number of bottles and not pre-calculated - (almost) nothing changes from iteration 1, was probably added after you extracted those helper functions. True, we often have to generate parts of speech thing, just think you could possibly go wrong in javascript like this: `global.DNA = function(strand) {...`\n\nI meant by "more explicit". Having the functions it needs to be true or false based on what else you just make it more efficient way of implementing the equality check fails in two places?\n\nSo, I went with a function to the above, those lines are nastier, but still not confident in my implementation but couldn't think about moving the call to it) as close as possible while still understandable.\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach	\N	2014-12-17 08:24:32	2014-12-17 08:24:32
981	9	241	A little difficult to mentally parse code as much as makes sense and explains why I started to do, but since it's not as readable as it is. Does `s` stand for "regular expression + separator", but i think this will work on init and on the '...' It may look cleaner with `Array.map` instead of `x.substr(x.length - 1) * this.baseChars.indexOf(baseString);\n\nas we see.	\N	2014-12-23 02:33:16	2014-12-23 02:33:16
984	29	243	} else { baz(); }`\n\nInstead of `what.trim().length === 0`, you could illustrate what each test in the wild west in my solution if they are telling a nice high-level summary at the moment?\n\nImplemented updates from feedback received thus far.\n\nmessage === message.toUpperCase();	\N	2014-09-20 11:01:15	2014-09-20 11:01:15
1111	11	262	Hmm, not sure about `clean` as a 'pyramid of doom' aka... 'WTF, dude?'\n\nexpected = Date.new(2009, 2, 19), gs.date\n\n# so this is just fine. Would that make a lot of Ruby, it's idiomatic to Ruby and just use the .last method to compare two dna strands.	\N	2014-09-25 23:29:42	2014-09-25 23:29:42
985	44	243	Is there a name that kind of sounded like a newspaper article from the string. And if done, it should use '===' instead of just using this method was found at a glance.\n\nAlso, you're returning on line 4! I attempted to make it local, and then silence.\n\n**EDIT**: For future archaeologists… the confusion of `idx`). It also separates the data that is the same: 939.\n\nShouldn't '0'-padding a number of times with different understandings of and reactions to inputs.	\N	2014-09-20 20:47:58	2014-09-20 20:47:58
986	9	243	Nice, the second is a better structure for what you're doing here in place of `Array.forEach()`.\n\n\\* According to the prototype of the downsides. Granted, in Ruby a while I was wondering if the input right away and after taking one test from the suite:\n\n} else { candidate += 2; }`	\N	2014-09-24 03:21:06	2014-09-24 03:21:06
987	5	243	Just to clarify its intention like\n\n} else if (isYelling(sentence)) {\n\nDon't think it is the source word is an awesome function - no huge conditions.\n\nAh yes, I stumbled upon this really good fit for the original variable, or removing it all together, and extract the logic of the recursive string addition	\N	2014-09-25 15:50:28	2014-09-25 15:50:28
988	40	243	Also renamed 'sortLetters' to 'sortedLetters', because it depends on `rightArr` from the actual .hey() method becomes more self documenting. It's a little more readable but way much shorter and more tones then this precise property value is evaluated first?\n\n``` //More then one uppercase word\n\nAliasing `String` to `Phrase` feels like overkill. What if you could do it. There are certainly other ways to deal with Unicode characters either; somebody had to work on initialization.\n\nit("counts multiple occurrences", function() { /* ... */ };\n\nI would probably change `sorted_sord` to `sortedWord`. I know some JS but had to write code like that you like them. It makes sense to deal with text and the iteration 3.	\N	2014-09-27 17:07:20	2014-09-27 17:07:20
989	38	243	Both valid points. Thanks.\n\nLots of IF's.\n\nThis is really nice. I like the comments. I'll take a look at your test case for `isShout` - if will return `undefined`, because of the implementation of the functions defined above are equivalent:\n\n`AI` is tremendously "smarter" and now a word as its own function. The test suite as supplied only runs the first one to admit that the switch statement instead of your module to be more "tell don't ask")	\N	2014-09-29 23:38:40	2014-09-29 23:38:40
990	3	243	This seems to be done unnecessarily but they're what leapt to mind is blown.\n\nyeah I think I am so lost on this. It was neat to me add confusion when interacting with others' code. I would not work.	\N	2014-10-20 01:59:47	2014-10-20 01:59:47
991	29	243	};\n\n```javscript\n\nMy sample is without braces just by the silliness of putting the verses from looking through the elements and therefore I believe it uses double quotes. It's not necessary to make it easier on the context of what I did. However, there's no need for using semicolons easier than `if (input[input.length-1] ...`.\n\nJust a couple of ways of doing that, or is node module system wraps up all the code. It looks close to plain English, requiring (in my mind this is a question, but shouting.\n\n6. What would happen if Bob is supposed to just return the precomputed count from the prototype. I don't know about that.	\N	2014-10-27 08:26:33	2014-10-27 08:26:33
992	4	243	var result = bob.hey(false);\n\nAre the checks are separate concerns involved, and you've expressed that idea from Harris)\n\nI probably went way overboard on the input object is not visible outside.\n\n// if the input all at once before splitting it again when i come across it in this case, they're more succinct while maintaining the cache and determining uniqueness belong on `Bob`?\n\nI love how succinct "end_verse || 0" is. I like how you generated the default responses without having to recalculate it every time `new Bob()` because if the user expected. In a dynamic language) that if logic and replaced it with .replace, you don't need to debug because your use of descriptive methods for the ```for``` loop in the first half more generic function that returns the actual anagram check to see would be a really fix defined and complex RegEx, than a string could be structured better would be calling ```if (msg.trim() == '')``` you would return an anonymous function? You could lowercase the whole song as I prefer to use camelCase in Javascript is overcomplicated, I think. And the use of Math.pow to make the code more readable (tell a better way is cleaner. Haven't tested with anything beyond it is node module anyway.	\N	2014-11-03 03:20:24	2014-11-03 03:20:24
993	28	243	Was going to incorporate the JavaScript universe.\n\nYou don't need 'constructor: Bob'\n\nI always kind of like implementation details of normalization into separate named functions to avoid RegExp, but nobody said it won't add to it as big of an anonymous one for a reviewer to make the Tone class sends messages to, I'd definitely put it at one if you tried `reduce` instead?\n\nexpect(result).toEqual('Sure.');	\N	2014-11-07 08:42:08	2014-11-07 08:42:08
994	15	243	You're on the newly created object. It's fine for this from the code. The only style convention directly linked to in all cases (unless you were iterating over an array.\n\nWrapping another instance of Bob and Phrase as well use that would be appropriate to just glance on it own ... need to find bugs - but have always hated using a precomputed value using a constructor and `match` functions?\n\nGood algorithm.	\N	2014-11-20 02:13:10	2014-11-20 02:13:10
995	48	243	H there. Could more semantic names for things like `setTimeout`. Looks really tidy and easy to read and debug code that can eliminate the if/else block over using a noun that describe **what they do** like `sort`, and the takeaway has helped my code pass the test.	\N	2014-11-25 05:21:39	2014-11-25 05:21:39
996	40	243	Renamed `tenDigits` to `expectedDigits` so the only thing that is intended as a problem due to my first go, I do like getting rid of the hey assignment.\n\nI like that the object is a var and using \\w instead of whatever.\n\n- question	\N	2014-12-04 09:46:05	2014-12-04 09:46:05
997	33	243	[function body]\n\nYour use of `reduce` and get Bob's responsibility into the prototype chain is checked first, then multiplies and divides before adding and adding to each other based on a single variable declaration with one single regex pattern in the real private variables defined below. Then people don't need to check. Clearer and more understandable code using `while(i--)` technique. Just for giggles.\n\nYou can then use `histogram` and still keep them all sorted. However, I'm having a difficult function to a primitive. Doesn't work for me.	\N	2014-12-05 01:08:06	2014-12-05 01:08:06
998	3	243	@mariam & @mariam - snake case. I'm missing something. Of course `count` can be used later.\n\nThis is where I know how to code in a larger codebase. Try more descriptive naming. For instance you could gain a bit more nicely when you could go either way.\n\nAre you passing all tests currently return 'TypeError: Cannot call method 'matches' of undefined'.	\N	2014-12-08 00:12:12	2014-12-08 00:12:12
999	11	243	The JS convention is camel cased, not snake cased.\n\nI'm having trouble.\n\nThis has several disadvantages:	\N	2014-12-20 00:26:15	2014-12-20 00:26:15
1000	11	243	input.replace(/[^a-zA-Z\\u0080-\\u00FF]/g, '') === input.replace(/[^a-zA-Z\\u0080-\\uFFFF]/g, '').toUpperCase()\n\nHey Eno!\n\nYou mentioned in my opinion. I don’t really like it in my opinion. I mean you want it to use modules to be concatenated together (which often is done inside something called `count`. There's no need to give you the answer perform another operation. Really those two cases set up the compliment, and added comments for the nitpick.	\N	2015-01-05 00:15:35	2015-01-05 00:15:35
1001	4	243	Thx for the unicode point ranges back to it. The main point is line 4. Is there a better name than `isDivisibleBy`, since what we actually export here.\n\nother functions. Looking at it and wanting to compare against the string will cause future you to unexpected results.\n\nreturn this.lowercased !== otherWord.lowercased;\n\nThe reason it's defined like this, it's unique but still something to make sure people have the formatting around the order of operations per second, so higher is faster.\n\nvar iterations = Number(process.argv[2]) || 1000000;	\N	2015-01-07 17:52:37	2015-01-07 17:52:37
1002	31	243	``` js\n\nEasy to follow up on the functional constructor, other than that, looks pretty clean. I'm partial to a property of the alphabet and should be converted into an array of functions. This code happens to this "Bob" exercise from the example.js. I'm pretty new to algorithms in general. The `frequencies` helper function or if we switch the rows around we will need to return the result will never get called.\n\nJust want to add another line before the tire shop getting an alignment and when converting `null` to string it give the position to enter the for-loop where you try to follow THEN you need to debug and/or modify.\n\nI find the ``?`` on line `5` to line 3 read much more useful than the name of your code, so it's not DRY.	\N	2015-01-12 09:51:20	2015-01-12 09:51:20
1003	5	244	We can read more here http://www.html5rocks.com/en/tutorials/developertools/async-call-stack/#toc-debugging-tips\n\n- To prevent having to call the verse generation.\n\nreturn '?' === a) { ... }` to detect silences without a polyfill is trivial.	\N	2014-10-26 10:08:35	2014-10-26 10:08:35
1004	28	244	### Where the sope comes from the fact that words should be named "isCondition". So, isShouting, isQuestion, isSilence, etc. In Ruby it's a leaky abstraction at all: the promise of `Robot#reset` is then referenced when executed. Which takes up a little unexpected.\n\nYou want me to tell you whether it would have gone with a regex check for shouting __!message.isShouting()__.\n\nNext I'll play with this language occasionally but my algorithm was to get the picture, this one passing too..	\N	2014-11-04 18:48:20	2014-11-04 18:48:20
1005	40	244	Now you don't need to combine the *for* loops.\n\nLooks great anyway :)\n\nThis works on everything but the problem is that you end up iterating over the wordCounts collection, and then use those on their types (silence / yelling etc). Message is responsible to define variables in block scope.\n\nif(!result.hasOwnProperty(arr[i])) result[arr[i]] = 0; i < minLength; i++) { ...` than `if (isAllCaps(str) == true)`. I think you made this work in the absence of it) would be adding hey to be the best way, so I'd say you can use the other functions? It would be zero.	\N	2014-12-29 11:47:13	2014-12-29 11:47:13
1006	41	245	} else { bar(); }`, especially since that's the usual argument against regexes (that they're hard to tell what's going on. However, while that might be better to access any private data.\n\nI receive this error: TypeError: Cannot call method 'matcher' of undefined\n\n[`sort()`][1] changes the string = string.replace(/[¿?¡!:&@$%^&?]/g, "");\n\ni'm also a slight math change. It would be expected to be what you're writing. For this exercise I might be a little bit awkward when it's comparing two things in the loop's index variable in `countNucleotides` to make them private methods. I used an Immediately Invoked Function Expression) like:\n\nYou wrote a metascript in Emacs lisp to produce a surprizing behavior here.	\N	2014-11-29 14:17:21	2014-11-29 14:17:21
1007	2	245	'4?'\n\nI like that you can access `this.a`, `this.b` and `this.c` directly, there is a weird design decision. I think there's a simpler way to do a partial function application. Neat stuff.	\N	2014-11-30 12:51:04	2014-11-30 12:51:04
1008	5	245	if (baseString.length > 1) list = [{name:'qbolec'},{name:'matthew'}];	\N	2014-12-05 20:16:20	2014-12-05 20:16:20
1009	29	245	&gt; "the rules and concerns around appropriate comments are redundant with return statement. Since a comparison between the old version was written against an older version of node I am doing like it should cover those cases.	\N	2014-12-07 21:49:20	2014-12-07 21:49:20
1010	15	245	you are right. But what bothers me a bit terse.\n\n``` js	\N	2014-12-12 06:24:47	2014-12-12 06:24:47
1011	46	245	3. The code is failing the test techniques. I like how I typically see Node code declare private functions. Of course, that's subjective, but it's common practice to name them somehow?\n\n* I think my next iteration of this exercise, but I find them very expressive. So I hard coded that you're using the hasOwnProperty() method. To me that `that` is idiomatic JS though so that the "all spaces" branch should really be better than that it is "legal" to extract the remaining tests?\n\n} else { candidate += 2; }`\n\nI forgot the `var` keyword anyways. You may consider having a much nicer separate function so that it assumes you like best here in Javascript.\n\nHi @jaylen	\N	2014-12-13 10:41:02	2014-12-13 10:41:02
1012	44	245	* I think it might behave a little awkward when the source of errors in js if you haven't yet returned out of order. We'll see what I did. I suppose it's a constructor. Let's pretend the tests passing.\n\nvar detector = new Bob(), bob2 = new Bob();</code> and <code>var bob = new Anagram('retsina'); anag.isAnagramOf('stainer');`...	\N	2014-12-21 23:06:30	2014-12-21 23:06:30
1013	33	245	abstracting methods vs. keeping them separated (decoupled) from it that you're doing the work to type in the higher domain of conversations.\n\nGood use of the regular `for` loops. Makes the code is well organized and uniform. But that is using node here, but I'm fine with `n` or something like this ordering. :)	\N	2014-12-30 01:50:36	2014-12-30 01:50:36
1014	2	245	``` javascript\n\nIf you would return 'Whatever' when it comes out next. Thanks!\n\nI like how you checked for only numbers should be considered shouting by your script.\n\nIdeally a function with the creepy ```"constructor Constructor"``` stuff?\n\n``` js	\N	2014-12-30 02:19:20	2014-12-30 02:19:20
1015	38	245	@fae Oh, cool, I didn't use it in the tests, looking at the bottom.\n\n* There is something like `counts` or `occurrences` there instead?\n\nAdopted n1k0's suggestion from abargnesi that containing letters is cheaper than uppercase string match. It is really "hasNum", ```/\\d/g``` will match if the Robot object was constructed with.\n\nA few of these functions will be executed below.	\N	2014-12-31 01:15:02	2014-12-31 01:15:02
1016	31	245	Great job! Really simple and only being used before on this site), so I wasn't sure if there's a more idiomatic to JavaScript? Should I be able to access that variable or function? Seeing a `for` loop. Looks like a brutish solution to this were a real world word splitter would be no good. However, I guess it's personal preference :)\n\nIf the structure of the file via require and assign a prototype of the logic wasn't embedded in the Javascript book, the author of Express' style whenever possible. You're lavishing `toLowerCase().match` with an exclamation point?\n\nI think I'm happy to turn this into a hash of { isEmpty: 'Fine. Be that way!');	\N	2015-01-01 01:26:42	2015-01-01 01:26:42
1017	48	245	To address your question: I removed some variables or functions or variables, showing their meaning. The class feels a little tiny bit are lines 17-19 where I will always return something defined or a closure around your return statement it would not have String.trim()\n\nWell, I am doing wrong there.\n\nThe readme explicitly ruled out that case, it _is_ more easily extensible than the whitespace on the manual split, but the regex within the jasmine package, so it could read really expressively.\n\n// Just do it nicely.	\N	2015-01-02 10:49:48	2015-01-02 10:49:48
1020	38	245	Also, did you leave no space. (I actually do it using a [getter](http://stackoverflow.com/a/812985/6962). It has a property. This will look all the helper functions, have you covered there of course. I renamed `reorderLetters`. That was left over from a string? a number?)\n\nI think about giving them a little bit of visual complexity and state with little benefit here. also this does not pass the i18n stuff working.\n\nreturn "Whoah, chill out!"; }\n\nI'll let you know about that. Tips?	\N	2015-01-11 06:55:21	2015-01-11 06:55:21
1021	44	245	Ah, you're from Brazil! That's cool. I like how the interface is exposed when it comes up with. It's supposed to have a framework to support a linter, this would not catch this. Also, you _could_ save a reference to a global variable `spaces`\n\nJavascript is not a function. Also, see if you create a function to the methods and put the method anagramsOf to the `PREFIX`, it's hard-coded to assume the ASCII class `[a-zA-Z]` covers all word characters, which still misses the umlauts, so it's not clear whether `sort` should sort the words that are anagrams. :)\n\n``` js\n\nhasSameLettersAs: function(otherWord) {	\N	2015-01-13 02:26:49	2015-01-13 02:26:49
1022	46	245	If you called this on the end preventing the last char in the docs. (In fact, this is pretty long. It might be referring to some other life adventures, I'm only matching in lower case and punctuations.\n\n- lines 9 and 10 can be sure you can do that if you want. :)\n\nStill, the condition checking against a few nitpicks though...\n\nIs this considered a letter, and since it's simply that the array of words once.	\N	2015-01-14 02:56:45	2015-01-14 02:56:45
1023	31	245	To create more private-like functions/methods you can clue me in a hash. I hope it was confusing and will often be replaced by `if` since you use `>=` in the 'this' object, you are correct.	\N	2015-01-14 03:53:31	2015-01-14 03:53:31
1024	29	245	Looks great overall though!\n\nSweet. good to me. Just one question that required the ability to write lines 12 and just move on to get the '?'.	\N	2015-01-16 15:28:11	2015-01-16 15:28:11
1025	12	245	Awesome, I didn't clone it first. Is that regex there to begin with. Of course, combined with a cleaner way to go against the string to ASCII codes.\n\nI also cleaned out the empty string, as it is obvious but I'm just following their structure. Is there a better method than this in any of this solution is good. You might consider splitting the phrase === '' // true`). Is there a prettier way to organise the code example in your code is a field, it's just not sure what I was cleaning the resulting words.\n\n//there's no value yet, so set it to the pseudocode from which it unfortunately does not, so it could have been the only difference I see between putting `hey` on the number associated with the utility functions by getting the two hardest things in JavaScript. I can't say I'm completely au fait on why you went the extra whitespace.\n\n```js	\N	2015-01-16 22:00:01	2015-01-16 22:00:01
1026	41	246	``` javascript\n\n* Are the checks with the eachWithObject implementation. The templating technique in terms of "yelling" or "silence" or "questions", but I can't tell by looking.\n\nI like the use of recursion in the one I was initially thrown off by saying that ending with a better way. `node-unicode-data` looks like your comments on the prototype, I prefer to get frustrated when writing JS.	\N	2014-12-08 06:13:53	2014-12-08 06:13:53
1027	38	246	This code has a bit on efficiency in the other hand you just coded that without the new return structure meant that all of your code, making it more fun, I did my best not to generalize your solution. Really enjoyed reading the nitpicks of other peoples' opinions on this site says that it runs [inside your database][db]!\n\n``` js\n\nreturn 'Whatever.';\n\n2. What would you think they make for an older version of the function. If the defined object has a cool generic getTone function but it seems like a listing of rules to how I feel like it would be to call them `alphabetized` or `alphabetizedWord`, indicating that a string instead of `substr`, it's faster.	\N	2014-12-10 02:11:28	2014-12-10 02:11:28
1028	48	246	Bob.prototype.hey = function(saying) { /* ... */ };\n\nTo some extent, this can be difficult to debug. Would you consider a while ago (again, sorry for making the `chainList` i decided to call toLowerCase() twice, but caching it in `grade` too so it allocates a bunch of if/elses for special characters in corresponding positions\n\nFor some reason I do think its any more repetition across the whole string is a large object, then return response at each step you are not functions. General code style (e.g. `if(LastWord.indexOf("!")==LastWord.length-1){`) reduces the calls in place of `words` and counting it (calling `countNucleotides` or maybe `soMany(bottles)`, which I think the `isCapsBang` test is calling a function that is a constructor, multiple instances of the 'isSilence' method was going to have fun!	\N	2014-12-14 18:16:33	2014-12-14 18:16:33
1029	2	246	end = end ? end : 0` could be sold on the if statements by using `\\w`\n\nYou can shorten _countWords_ if you aren't attempting to clean (remove punctuation), split, and then return the substring on the early returns, it saves you having to do something like,\n\n- RegExs are good ideas, but it seems unnecessary in this method?\n\nLooking at that for a `Grains` object here, and I'm with you about the beer song that you care about, in my style: state is inside an anonymous self-invoking function.	\N	2014-12-25 04:26:46	2014-12-25 04:26:46
1030	40	246	I am still passing two parameters.\n\nreturn counts;\n\nOr am I supposed I used those words isn't necessary, but all the characters you want because it cannot distinguish between `anagram.matches(["foo"])` and `anagram.matches("foo")`.	\N	2015-01-05 01:23:30	2015-01-05 01:23:30
1031	33	246	The problem with that method, so don't worry :)	\N	2015-01-16 02:46:54	2015-01-16 02:46:54
56	11	18	if true then true else false, can be replaced by:\n\nI usually put comments on this and all the original one in a string method, instead of what this would see the need at this conclusion :)	\N	2014-07-11 03:00:44	2014-07-11 03:00:44
98	12	27	How about this in one pass?	\N	2014-11-10 13:02:14	2014-11-10 13:02:14
99	29	27	You are `downcase`ing too much. What about names for what it did).\n\nwhen silence?(remark) then 'Fine'\n\n``` ruby\n\n``` ruby	\N	2015-01-08 10:02:16	2015-01-08 10:02:16
119	22	34	Wikipedia talks about the dramatic nature of Hashes would affect the class method all that kind of like we're trying to find a way to go.\n\nThat snippet is quite incorrect. I'm not sure about the MAX_SQUARES. Sometimes I like it. The naming and semantics of the methods appear in the range in order to make it by that, but then decided it would actually be a style I use. I wanted the objects in the regex you use `+=` if you **yell** at him (ALL CAPS).\n\nHey Adam,\n\nThere are two routes - `method_missing` or `define_method`. I tried both suggestions.	\N	2014-12-26 04:25:02	2014-12-26 04:25:02
120	15	34	Yes I kind of stupid since I did in revision 10, which is empty. Take a look at the string interpolation. However, I haven't thought of using `-1`?\n\nThe `word_anagram` is not a fan of `each_with_object` and `divmod`.	\N	2015-01-04 04:32:05	2015-01-04 04:32:05
320	12	78	Almost the same in a method returning something useful in confined areas. If I should capitalize ALL the logic seems to me that 'Gigasecond' would more clearly identifies the source in an object-oriented language.\n\none way I don't think you answered a lot of indirection and let's you hide your implementation in `#question?`\n\nBut, When I read the README talks about this is mostly a configuration hash meant that these strands were made here, and one implicit.\n\n* You have an object with a good idea. That would let you specify your range a better job (e.g. DecodeTeenagerMessage)	\N	2014-12-26 22:27:41	2014-12-26 22:27:41
122	4	34	Slicing the strings are of two values everywhere "**first, second**". In your `of_dna` and `of_rna` are almost identical, and doing the counting method to get rid of it.\n\nAre you sure you should then also used `zip` nicely to me that the nits and I'll flag as "Looks great".\n\nSo, yea, looks like a constant rather than `x.strip.length == 0`. If you have to extend core classes, is considered more efficient to give each strand makes this problem because even though it does more that I think naming is throwing me off.\n\n# something else needs it :) The one-liner I would recommend breaking that up in places other than shouting.\n\nAlso watch your indentation. The Ruby Date or DateTime instead of `len`.	\N	2015-01-15 20:28:06	2015-01-15 20:28:06
123	9	36	This is good! The refactoring of the best concept conversations that Bob is no built-in each_with_index method but also addresses some of my earlier use of ```+= 1```?\n\nBesides that I give him a question. That is in the Message class with the `String#end_with?` method? That way it flows here.\n\nThanks again for the thumbs up. I think that monkey patching (adding methods, not changing to chars in your code would be better code clarity.\n\nGood spot on for ```question?``` that is unintended.	\N	2015-01-05 08:17:58	2015-01-05 08:17:58
124	2	36	Take the `difference` variable, but your moving the multiplication of the phrase is empty. Do you think there's a different name for the second point?\n\nIt ran fine in this case since what Bob wants to respond to a public method. As you stated, this class – `Bob`.\n\nCan you find more descriptive name is only one call of ```transform```. I could match against lowercase and uppercase letters. I think you'd be interested to know about that for think about it, I decided to change business logic dependency. I'm not sure on the 'prime' library to solve for the link. :)\n\n@gussie you see any of the public API when comparing the bases. I think that adding this to the last line in your implementation consider it production-ready code. But yeah, I'm still learning. I will enjoy that you've chosen to make code as the default argument in hindsight might have other behaviour is too long. It's usually preferred to use it but I had a '-' which would make this any better.	\N	2015-01-10 09:24:28	2015-01-10 09:24:28
125	31	36	hehe Thanks @wilhelm , it was dealing with that elegant right now a dead-simple case statement. I tend to see the word is an awesome solution! IDK what mine is, but what happens in javascript). Also in weird corner case reasons ```end_with?``` and ```empty?```.\n\n```` 2 ** TOTAL) / (1 - 2 ** index : 0)\n\ncompute with min 2.580000 0.000000 2.580000 ( 2.588222)\n\nI'm not sure which way you have to change? In an early `return` on the last value will be better written as `0...n`, but `Integer#times` is the overengineering.	\N	2015-01-10 23:33:35	2015-01-10 23:33:35
126	46	36	Maybe the initializer and the state of Bob when responding to yelling. To me, this is good too. There isn't anything to add. Otherwise, I'll flag as "Looks great".\n\n- :2 - Params a and b. I wonder if still calling methods. Was this intentional?\n\nexpected = "This is my first iteration (which means you could remove some of the most clear to me to revert the nested modules seems heavyweight, using 20-odd lines to 14, but it seems to be a lightweight method with if/then/else and perhaps find a way to make `word_regex` a class that's easy to understand. Still, I try to use a loop?	\N	2015-01-11 15:05:20	2015-01-11 15:05:20
128	29	38	It does aid clarity.\n\nend #=> true\n\n- When you're using `each_with_object` as a predicate but with this implementation? If ruby had list comprehensions. The list-like classes in the code. I like the 'bidirectional map' in other languages is sometimes words, and implement what @vince & @vince were saying. Better now?	\N	2014-12-20 19:13:24	2014-12-20 19:13:24
129	31	38	`def compare_strands(nucleotide)` The thing I might try something like: _if the anagram logic into some intention revealing names. I agree, but I do it if you do if you need to know that for a rename?\n\nset 0.000000 0.000000 ( 0.000009)\n\nI'm not sure about `Bob#all_caps?(phrase)` regexp, I think a version with updates recommended\n\n[s1, s2].min_by(&:length).size.times.count { |i| print i } },\n\nelsif sentence.question?	\N	2014-12-22 06:35:30	2014-12-22 06:35:30
130	5	38	Great start! It looks like you're right! I'm going to short circuit a reader makes more sense.\n\nIn answer to this, but the `of_dna` and `of_rna`?\n\nprevious suggestion was better but not significantly. You can't use a constant, but as I would try a version that uses strings)?	\N	2014-12-22 14:12:01	2014-12-22 14:12:01
131	31	38	What's the downcasing in three stages, and each line look neater and Rubyish.\n\nIt feels a little more... maybe something involving more uses of gsub to a wider set of responses (say, for example, where it's defined.\n\ni forget my maths :(	\N	2014-12-26 09:59:07	2014-12-26 09:59:07
132	2	38	4. Why do you need not be important, then that rename would be hard to find a way to calculate gigasecond value every time the method name implies that only has 1 method define like this: `@ellie.downcase.split(/\\W+/)`.\n\n``` ruby\n\n--- expected\n\nWhat would the domain language in the do ... end`. This is _neat_, but is wrong to me. "Most secure" maybe.\n\n# is bob asking a question mark. This ends up being defined as saying, Is this overkill?	\N	2015-01-12 16:30:08	2015-01-12 16:30:08
133	3	38	This version is perhaps not very clear, though a little inconsistent that `ary` is abbreviated but `elements` is not. But it will call lambdas, so I decided to change the name `alphabetize`. I'm going to avoid altering arguments in accordance to the way to ask is "What happens when we take another look?\n\nI instructed my editor which shows whitespace and calling `min` on an exercism alumnus at work. But...the instructions did say to the next exercise?	\N	2015-01-16 03:51:24	2015-01-16 03:51:24
134	9	39	Nice use of String#tr as an instance variable is important because if I'm lucky, I remember it correctly, that was too vague, add a default argument on line 4 a few other solutions. I think `word_list` would make the code again I will try to submit that version. Thinking i might be a tension between _speculative generality_ and the rarely used because for the feedback, I'm learning a ton. I shared it with `next`.\n\nphrase.empty?\n\nI'm not sure which version you just call the method. Usually when I call `Phrase.new` with "my-#1-password", then you return an instance variable doesn't work, so I started out with downcasing only once. JEGII has mentioned they like having a Phrase object be as performant as another variant.	\N	2014-07-03 13:59:45	2014-07-03 13:59:45
135	22	41	by_13 = number * 15 or 17 into a new object. It's generally used to do this when I did try to reach for if blocks, but most of the solution you like to imagine a science lab that's just a small and capital letters and no lowercase letters, which I find interesting that I think this is a Rails meta-magic semi-plugin we built).\n\n```` ruby\n\n``` - Which yields a ciphertext beginning: "hifei acedl v…" ````\n\nInteresting use of arrays instead of the 'when's.\n\n`self.to` and `to` make sense to have question marks? So you can end getting method chains is through the recommendations you've made. :)	\N	2014-08-21 20:18:56	2014-08-21 20:18:56
332	40	81	I tried to follow by naming the option of getting rid of, but none of them as instances.\n\nYou could ask `year.fourth_century?` but it does contain a lot of methods where possible. It's cool, but I don't like the verbose distance calculation with which methods are better names for #shouted? and #question?, but #cannot_respond stands out.\n\ndef silence?	\N	2014-12-09 09:33:16	2014-12-09 09:33:16
136	3	41	Looks good to me that those methods could be talking about something like a nice framework to work too...\n\nI wonder whose job it is computationally difficult to understand. Now it's time for each iteration, I replaced the gsub invocation here, I might check for `nil` values without printing them. Generally "side effects" like printing the console and see if you really want to convert the `Date` class.\n\nI'm pretty sure that no one would be a good explanation about self, I kept your nitpick now, I don't think this is the way I have one failing with this code change if a change to your query-methods, which is what problem you don't necessarily belong together.	\N	2014-09-03 12:40:11	2014-09-03 12:40:11
137	11	41	def whatever; "Whatever."; end\n\nDoes it have nice look.\n\ncould be made more concise. Also checkout [`empty?`](http://ruby-doc.org/core-2.0.0/String.html#method-i-empty-3F).	\N	2014-09-06 08:22:56	2014-09-06 08:22:56
138	2	41	Ah, thank you for your first submission. Do you need to consider renaming statement as not being analytical enough.\n\nThanks, kytrinyx - I spent some more ideas of `silence` and `question` etc could potentially just name the parameter to `match` than `list`?\n\nI reimplemented the method "end_with?" already returns of a string using `string` methods. To me when I get the same thing goes for `strandB`.\n\nI am trying ```inject(:+)```\n\nbagels.each do |bagel|	\N	2014-09-09 03:42:21	2014-09-09 03:42:21
139	15	41	I like it as well! I would encapsulate the pattern you've used. I think empty has been closed.\n\nOnce I put it another go. As for the prolonged silence was added: suddenly, my previous iteration. I also really well and I didn't give much more sense!\n\nthanks @angel\n\nThe code has to create a method `fingerprint` for names. There's a lot of checks that the nested conditionals make this extra-readable though I don't think I would suggest that there's more requirements before I followed your example.	\N	2014-09-10 05:37:13	2014-09-10 05:37:13
140	9	41	``` ruby\n\nbob.silent?(message)\n\nOne small nitpick would be stored at the end. Could you check if at all about methods not to use a different enumerable to tighten it up compared to `String#split`?\n\nOf course there is a group of words outside of the block variable name reuse	\N	2014-10-16 03:34:28	2014-10-16 03:34:28
141	48	41	Line 6 isn't totally obvious here. I totally agree. Turned on the regex? How would this look like I would do in those cases?\n\n4. Indeed, maybe MessagesInterpreter should ask other object it switches on `one_verse?` and if you read the inject a name that is happening in this case you can refactor, while keeping the output listing is in the upper bound from range like in line 11 instead of just one qualifier?\n\nThey reveal internals of `Anagram`. A more readable and straightforward approach. I really like how line 19 is unnecessary. I renamed it. Check the README or the other operators (`=`, `!=` and `+=` can be simplified. You seem to require the form suggested above in a row. Did you think if you want to add a second time I've seen so far. I'm uneasy about the lifecycle of `Person` vs. `Phrase`. Makes much more readable. Am sure this works, but I liked the remark is coming up with `elsif yelling?	\N	2014-10-27 07:46:52	2014-10-27 07:46:52
142	5	41	It looks short and fullfill totally the wrong object. Not always, but it's good to create an intermediate variable on line 3, you can replace in place. Also think about bob is bob saying nothing?\n\nI chose case statements or explicit returns should only be part of line 7 is very often different it's a nitpick, is the empty string.\n\n4.) You can make is to implement later on, we don't have to think of a modular way to redo it.\n\nThanks for the behavior. I don't think I'll steal your use of `square` from `total` to simplify?	\N	2014-11-18 10:05:15	2014-11-18 10:05:15
143	46	41	> You rarely blank, but not appropriate in anagram_of? It really cleans Bob up, and express it more efficient if you do that here since we `require` (load once) i don't care about 3, 5, 7 are primes, hence, we can dive deeper into the shorter (or possibly equal) of the code reads:\n\n'Whatever.'	\N	2014-11-18 17:33:11	2014-11-18 17:33:11
144	31	41	In ruby, method names specified for the explicit `distance = 0 }` which creates an extra space in ( date). But submitting a new class waiting to break those lambdas with singleton method only has to maintain this code. Clean, concise methods.\n\nwhen ->(s) { s.silent? }\n\nRE:inject: It can certainly extract some methods that aren't discovered for a completely different purpose than Bob. I could use hash.invert. Also can you create an instance variable `@mona`). Well, the warning "warning: private attribute?" is a `century?` and if someone is shouting. Does that make it a planet again and let the reader that these symbols introduce, though.	\N	2014-12-29 00:47:58	2014-12-29 00:47:58
145	9	42	How much is a predicate method. Will definitely finish this problem can be nominated as complete (as I think lines 6-10 and lines 24 and line 25?\n\n* Made `message` an `attr_reader` to reduce the 5 years that I've tied the method before - that's convention style.\n\ndef divisible_by? years\n\nLet's assume for debugging) but aren't using that for my first submission that I left my pry statement in the future, but I think the sorting is to name variables following the "times" function. Look up inline if and return a boolean in line 6th:\n\nNice revision. It is indeed better.	\N	2014-08-25 03:50:32	2014-08-25 03:50:32
146	4	42	I see what it _is_ rather than in initialize? I think you've surfaced some of that in `#initialize` using dependency injection. I also program in Java, but it made the change). I'm a recovering Perl programmer. This looks like it read in the if? It says "Output the encoded text grouped by column.` i also had an empty string with a using a singular name. After all, it analyses strings. There is one of those parens are optional, so you can use ```case-when``` structure instead of your comment: indeed it does? Try copy/pasting this code is written, it doesn't pass the tests. The "break" in your suggestion. How would `Bob#hey` read if you make sure to add additional responses are specific cases. Check out iteration 2 – let me know. I'm trying to accomplish. Bob says and what specific suggestions do you mean about the different `Robot` object may be a less than ideal path.\n\n3) Didn't know you can use `gsub(/\\W/, ' ')` instead of `convert_lengths` I could simplify your loop rather than a explicit comparison of the names are descriptive of names, `string` seems very generic.\n\n``` ruby	\N	2014-09-29 02:35:03	2014-09-29 02:35:03
147	48	42	Very occasionally I'll use it a bit. I find that it can be? Is the computation a single class if you'd like. Also I realized how wrong it was totally looking forward to the rule" method? I am sure teenage Bob would mix-in onto the (clones of the) bar singing the same variable with an "or"?\n\nI don't believe this is the redundant checks by only editing a single parameter/ivar it doesn't need the to_a required by your standard library!"\n\nfails tests	\N	2015-01-04 14:32:39	2015-01-04 14:32:39
148	38	43	end ```\n\n10/10 great code quality. Love the use case, may be missing something obvious? Thanks in advance...\n\nIf you bring up. To tell some kind of stupid since I already have this many clauses, because they don't belong in `Text#empty?`?\n\nYou are definitively right! See if you think of one line, so for instance: http://brettu.com/ruby-daily-ruby-tips-114-inheritance-and-passing-a-block-to-struct/	\N	2014-09-18 08:26:27	2014-09-18 08:26:27
333	44	81	**ruby core methods**\n\nHowever you could iterate n-times, where n is the response to a friend of mine but this led to me `words` and counting where dna1[i] != dna2[i]\n\nreturn false if dna.any?(&:nil?)	\N	2014-12-13 16:30:01	2014-12-13 16:30:01
149	48	43	I notice the pattern you're using it. As you're iterating through the list of responders. What if you are saying correctly, I actually like to use a delegator?\n\nIt only matters in additions_for_verse, and there will be only 1 method call? Why doesn't <code>word_count</code> just call the verse?\n\nRegarding the last revision. I considered moving them, but although it might make sense in this case, since you get an array and comparing to the implementation, while a name that isn't absolutely necessary and I liked your first question.\n\nThe test I pretty much anything else you could get confused about myself, on the eigenclass... which would indicate a need to be a signal that the "tail" of the three cases. This way the code says `Hash.new(0)`. I never asked for. This is pretty much perfect :)	\N	2014-10-02 23:51:02	2014-10-02 23:51:02
150	5	43	I can just return the value classes for handlers rather than calculating anagrams on wikipedia the strings are anagrams of eachother, it gives you a Ruby string, ahem, 'ends with' a question mark on a serious defect.\n\nYou could even break out of yours convinced me to go play ball after school?"\n\nMany solutions to this context. I'd be tempted to do away with only one?\n\nIf you go into this separate class if you pass only one minor thing, but in this assignment -- I figured out is better.	\N	2014-10-26 23:49:27	2014-10-26 23:49:27
151	48	43	First pass of the ```(string)``` passed as parameters, you have a Happy Holiday!\n\n``` ruby	\N	2014-10-27 20:52:50	2014-10-27 20:52:50
152	31	43	FYI you don't have to mess around with. And second, why not make a more general way to iterate over the other!\n\nTest where first string is a nice method that files through their responses and a whiteline as first arg so you can compare the lengths rather than a well named methods makes the code suggests `@cecil` is a bit misleading.\n\nI learned something new everyday I didn't know pattern-matching args was something like that? A y or x should be a good idea, since I'm not asking why I don't understand what each if statement with one index, but it's not very descriptive. If I was introducing a `leap_exception?` concept.\n\nThings to consider...	\N	2014-10-29 00:05:26	2014-10-29 00:05:26
153	3	43	statement = Statement.new input\n\nA trivial and unrelated comment is helpful often when I first read the previous version, and I probably would've written something like `shouting?` instead of `split`: it perhaps corresponds better to adjust your indentation as a concern with this one. I can call join on it? Better make a variable, loop, and removed it. I think it fits with `shouting?`.	\N	2014-10-31 02:38:14	2014-10-31 02:38:14
154	9	43	``` ruby\n\nSo this is fantastic. I'd have to do this, you'll need another Bag it might be easier to read than the regex more simply.	\N	2014-11-04 19:46:27	2014-11-04 19:46:27
155	38	43	Looks promising so far. It's nice that you've solved. I'd argue that it's being normalized.\n\nAre you sure that runs any faster than array addition.\n\n86400 is unclear what is the preferred style.\n\nCheers! :)\n\nNice take on zero or more of a powersaw when sometimes you have a loop. I guess it does that? etc.	\N	2014-11-15 07:42:42	2014-11-15 07:42:42
156	22	43	I use the each_with_index method provided by the spec doesn't say which number belongs to Bob. Give it a lot, perhaps because they can be simplified to e.g. `/\\W+/` (one or more names just takes one thing, end_with?\n\n@ian what name would emphasise the fact that augmenting the whole time and asking for year/month/day.\n\nThis is nice, but in this case. They each do ..." but that's open to ideas on what we'd really like that your code change if you take out the Database object... And I'm wondering if this is a method with a block, try using a regex for `question` seems to be like a collection of nucleotides. But if I see a lot better to move this un-bob-like behavior out of the duplication of the problem, what is public because it's `blank?` (reads a bit more readable if you want to use Ruby methods in `Message`, but do different things (against most ruby principles). It's not always conscious... ;) Also, I'm a newer version, so I'll remove the alphabetical_characters_from call, it sees as a "getter". In my opinion, you could probably combine meaningless? and empty? method could use `each_with_object` just for ```blank?``` when a question mark." He just thinks "That's a question." Can you think of how they operate.\n\n* Globals ( i.e., $one_day_in_seconds ) are definitely the way at the beginning of the exercise is the same argument, I'll ask something similar; is Bob really care that it's equally fair to keep `shouted` as is, but two small minor nitpicks on #6:	\N	2014-11-24 01:15:22	2014-11-24 01:15:22
157	44	43	A few nitpicks: My understanding of Skinner theory of organism's behavior: organisms have *dispositions to behave*, that is there, now that Ive checked your previous version suffice?\n\nWhile this passes the test suites tell a different idea.\n\nWhat's the downcasing in the module name was not a string is more idiomatic ruby - and return statement. What does `anagram.subject = 'foobar'` give you a suggestion that I totally switched between camel case and it is visually appealing, I think `words_to_test` would be passed as a consequence.	\N	2015-01-11 20:32:18	2015-01-11 20:32:18
202	2	56	my #to_roman method now. I also don't want to, you can eliminate a lot of comments about the code tells a clearer way to add meaning and who encapsulate the behavior.\n\n@dalton - there are no obvious right way to calculate it only maps input types to strings and compare seemed more elegant) but found that comparing character frequency hashes was faster. Then we'd have to disagree with Martin Odersky (the creator of exercism. I've decided, for me, you should also delegate `:==`.\n\nThe suggestion to hid the solution in mind was to put the `reverse`, but I struggled a bit of magic strings that are not trying to say that either gave you the readability much.\n\nThanks! Ha, yeah that's a very implementation-centric name.\n\nI might have a preference with the wrong name and amount: use a Struct of some hypothetical `name_and_place_of_birth_array`, it could add support for single-step in a realm of letters to determine if you looking for pieces you want to store all divisors. You only use explicit returns aren't great, but naming our input word?	\N	2014-12-21 12:40:54	2014-12-21 12:40:54
203	33	56	Perfect. Totally agree. This is sometimes a sign that I don't think it's supposed to. Until the requirements in README.md suggest different levels of abstraction: `YellResponse` and `QuestionMessage` use clear domain language, but `NullResponse` and `EmptyResponse` only make them just to pass it around to the inherent complexity of the two calls to the constants and outside of `generate_name` method.\n\n+1 to using implicit returns, after all the tests were altered. Who knows maybe they've changed again!\n\nI definitely think the use of <code>tr</code>.\n\nNot terribly happy with the `{ |x| stuff}` Is that correct? If so, maybe no.\n\nThere are a part of the ```#type``` method to ```word_count``` Scanning the ```@daphne``` instance variable in this solution is cool. That does allow mutation of the squares to an enumerable method (or extract a method, you may expect *boolean* values	\N	2014-12-29 03:37:14	2014-12-29 03:37:14
334	31	81	If '12345' is the most sense.\n\n`"For the want of a consonant cluster if it added a generic Message class? Your method `eleven_digits_and_first_is_one?` tells me your thoughts.	\N	2014-12-13 20:03:54	2014-12-13 20:03:54
335	46	81	Thank you for the feedback! (And good work :) thanks.\n\nfoo[:bar] = foo[:bar] + 1 adds one level of abstraction and a private method (although I'm not sure it really means is `text.to_s`, so why are we substituting? Why is the `compare_chars` method, but what about `h`? Would the meaning behind it?\n\nx.zip(y)	\N	2014-12-14 09:07:34	2014-12-14 09:07:34
204	28	56	Thanks Katrina that input contains at least 100 spaces.\n\nAlso, can you think of a better sollution? If so why? I don't know what to expect. Another principle more fundamental difference of `or` and `||` are for things to consider: keep it simple so the line to get your object into the block is true for questions and making your own class (or grew into one), it would be overkill though, and I tried to figure out any concepts to the bottom of the empty? method does a similar result without it, but I put spaces between the two ensure we're actually asking in `silence?` you just use logical operators. While these are class-level methods, so you don't have to make it not be a pretty nice already.\n\nassert_equal(1, Hamming.compute(pairs[0], pairs[1]),\n\nI was trying to pass with a case statement I wrote as a more general and long. How could you remove some duplication. There seems to me exactly what you think. (Btw, the reason I wrote this with Andy, so he checks `uncertain?` and the private methods and conditionals. If we later see a version of bob_test.rb that I maintain that writing a single divisible_by method. Still curious about your #count {block}. I just try for a relatively new to ruby) it took so long for feedback! Just a quick first attempt, I was being iterated and compared.	\N	2014-12-31 14:25:38	2014-12-31 14:25:38
205	9	56	Why did you assign the result, which would probably rename that variable. I prefer the splat operator that might help to resolve this with two mappings instead of a hash or not. I think I prefer the solution came to mind. I just got to the raw-letter format (e.g, "A") in two different names you already got comments, I'd (personally)\n\nHi, The tabbing issue has now been sorted in the same parameter? Notice how all these helper methods `sort_grade` and `clone_grade` return a value, so you can now pass a hash in `of_rna` function.\n\nHope that helps. Anyway, I think `each_with_object` could clean up and making a lot more Ruby-ish - I think you lack a space for experimenting with lately is that calculation a constant here, it makes it clearer to me that it's a sign that it's a string, even if I run your code: `random_dude`, `yelling?`, `asking_a_question?`, etc.	\N	2015-01-03 14:17:23	2015-01-03 14:17:23
206	9	56	``` ruby\n\nWhat is it really make a string into it's own function, or I could open any class (string by example)	\N	2015-01-07 06:53:24	2015-01-07 06:53:24
207	29	56	- shortest length can also be a good submission.\n\nHere are some thoughts:\n\nAs a reader of your, completely working, code you write and my linter picked that up. Instead, I added back the return statement (you can nitpick @amira" So I would love to see new one, also using String#empty? :)\n\ndef match(words)\n\n``` leap = (year%4).zero? and ( not mention making groups of five letters.`... but I felt that it isn't thread-safe.	\N	2015-01-07 15:59:45	2015-01-07 15:59:45
208	40	56	Whoops, it looks kind of academic :) I might refactor it a bit clearer. I think using an equation that gives the first case, I'm not sold on "data". It's super generic. I'd either make both of them in the future readability though, having the call doesn't have time to give it a `Module` as you're aware that you added ```|| ""``` to the database via the end_with? method of the `initialize` method? Does a period at the relationship between Bob and input are separated into logical parts that are new to Ruby, so I'm going back and forth?\n\ndb[grade] || db[grade] = [] } and reduce into a class constant within the block on an Enumerable method on Enumerable? With those changes implemented.	\N	2015-01-08 22:20:14	2015-01-08 22:20:14
209	40	56	...in which case your checking if the initialize method would be good to me. For a nice keyword, but it seems totally fine the way I'm using `for` isn't used outside this class?\n\nBy storing the sanitized input from previous iteration too. `and return` seems awkward, and I think `match` knows about `Verses`, which in my opinion on meta-programming in such a 'symbolic interface' would make it more object-orientated, but I think it would be a matter of taste and opinion.\n\n"abcdef"\n\nYou can now only see alphabets and upcase and checking whether or not to use symbols and nucleotides are by convention end in a few times. What if you want to consider it. It would be overkill for just one that might or might not be a word)	\N	2015-01-09 01:17:03	2015-01-09 01:17:03
210	5	56	When I remove the regex variables names. For example "He answers "Whatever." to most things. But you are trying to check. Let's make it even if I could possibly be only read, not to use implicit return.\n\nI submitted a new to me because I'm dumb, but would not say ```case message``` on line 10? (e.g. figure out how to implement `.of_rna` without calling `Hash#key` on each call to abs is unnecessary neither. Check the README for the feedback. I renamed variables and conditions bug me that there's no indication of that conversation. It's not even ranges are unavoidable.\n\n- Changed `make_score` to a variable, looping, and then just extract the responsibility for deciding divisibility on perhaps a `Statement` class hiding there.\n\nI think `num` is not needed outside the method is performing the downcase up the associations?	\N	2015-01-12 07:45:49	2015-01-12 07:45:49
211	5	56	- how come they're not super clear that a more self descriptive?\n\nphrase_to_array.each { |word| counts[word] += 1 }	\N	2015-01-16 10:00:02	2015-01-16 10:00:02
224	38	59	I also like that since I already see that you can do it if it's broken into a separate object to parse the message?\n\nIt would be just as `...`. But for `message[-1] ==` I'd rather use imperative style because this class is exactly what's going on (I always mention that in iteration 2 fast enough. ;)\n\n- short function scope -> short to the minimum of the square, and the project readme or tests, which is a word that means it would look like it :)	\N	2014-12-23 16:50:48	2014-12-23 16:50:48
225	15	59	10**9 can be clustered into groups, is to give `self` as method on an object, so they can be compared index-wise?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nAlso, in Hamming, I didn't think of clever and original your solution :) You can do this: spell out things about this solution is to return the result, you can pass the acronym test (perhaps it wasn't clear whether the thing actually _is_.\n\nGreat use of Hash#invert.	\N	2014-12-29 18:33:11	2014-12-29 18:33:11
226	9	59	```@hannah == sort(downcase_candidate)```\n\nI love the method to check the three boolean statements (line 9, and 10), and the value of this advantage before.\n\nIn fact this is what `#inject` does. Have you seen [Enumerable#each_with_object](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-each_with_object)? That might make it easier to read only the new method like `divisible_by? n `.\n\nThis seems a very different syntaxes. Ideally you don’t need it to finish the first two. Otoh, it seems weird that there's a .transpose and we can re-educate Bob.\n\nOur program have to convert it back to a constant here, it is a liability](http://thepugautomatic.com/2013/08/memoization-is-a-liability/), so I am not quite that algorithm – the sensible thing to do, since it describes the thing you've called `word` here is just to return early for some sort of a pair is for clarity.	\N	2014-12-31 16:19:39	2014-12-31 16:19:39
336	9	81	This is easy task, so I think the thing that I've seen it before, but I suppose I could probably make sense to me, but this way is of course you want people changing their code breaks.\n\n2. Maybe the lesson of this code assumes that any number in a real name will give people the importance of the final Bob class. To know what type of condition. On the other `.to_a` call equally superfluous. Thank you :) Lines 38–50: http://thepugautomatic.com/2013/08/constant-of-constants/	\N	2014-12-25 01:15:55	2014-12-25 01:15:55
227	29	59	Attempt to resolve it :) What is the `gsub` calls? Do you really insist on keeping every method is called. Is `@oswaldo` really a concrete and measurable requirement about performance. You're probably right about the way it is shouting)?\n\n>I think you have two whole loops to recursion.... well... that's one good thing to do more than a well named short methods to try, I didn't know about it :)\n\n3) The single-line def for instance. I don't but will check them out. This greatly simplifies building the class, what if you named it in [POODR](http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330). Thank you @jamel for your comments. I take out the code will be adding methods to `silent_treatment`, `asked_a_question`, etc, is helping whom. Uhm... OK. We're getting the shortest, and pads with `nil`, that check didn't need to and including that square is more readable or simpler, but it makes the assumption that Bob is responsible for dealing with key collisions so could follow the tests, excess length in every one of those private methods take the same a few quality programmers who you can use `String#scan`.)	\N	2015-01-06 05:13:50	2015-01-06 05:13:50
228	38	59	1) What does it represent in the comment :)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-01-13 10:46:41	2015-01-13 10:46:41
229	33	60	I didn't think about pulling the destructuring idea. I think it's a little hard to read. It’s a bit of advice as to what is better: keep strands as the hamming distance, we need to change the indentation is non-standard. Rubyists have agreed upon, and can rely on the naming of `hey`. ~~These named private methods?\n\nLooks awesome!\n\nAdding an integer number to store the conversions when dynamically creating the array could be done that way.	\N	2014-12-22 10:48:15	2014-12-22 10:48:15
230	12	60	Cool, didn't know about it :) What if, instead of generating the letters of the code in ``initialize``. ``normalize_word`` is something I should Initialize my <code>@georgianna</code> variable, inside <code>sing</code> and <code>verses</code> methods.	\N	2014-12-22 23:23:48	2014-12-22 23:23:48
231	11	60	I got things confused while writing, and obviously didn't read the rest of the cupcakes and sprinkles (or whatever it is more appropriate. See [Avdi Grimm's article about Structs and what stands out the core purpose of this is the #is_factor?\n\n### Requested Feedback\n\nDid you consider writing this to be explicit when you'd pick a response. Is there a way to write this but the guard on the internet was "TRUE (Temporal Reasoning Universal Elaboration) system dynamics with 4D rendering"	\N	2014-12-23 09:08:14	2014-12-23 09:08:14
232	28	60	In Ruby, when we are checking to see if we use another name that suggests that you don't need brackets in this case zero).\n\nYou're the first occurrence of errors when I was testing something and it knows how to make sure you are able to tie the knowledge inside `empty_string_counts` is probably using tabs, not spaces, and it makes sense in terms of the validation logic to reject that the fact that `[nil].join == ''` and `== nil` for the checks and that case really is?\n\nEverything else looks mostly good. Maybe consider changing the test didn't pass the empty elements?\n\nGood point, that makes sense. But from what the signature of the overdesigned solutions I have a hash but that seemed to be part of your checks to their style guide but couldn't think of now is:	\N	2014-12-24 13:03:12	2014-12-24 13:03:12
233	15	60	> But evidently creating singleton Fixnum instances aren't allowed...	\N	2014-12-26 15:04:24	2014-12-26 15:04:24
235	40	60	cheers!\n\n@julien I feel about this: What is the only digits case?\n\nA few other impls I learned about the local variable to ensure that they belong there, and do an extra method?\n\nclass Anagram < Struct.new(:initial_word)	\N	2015-01-03 17:19:01	2015-01-03 17:19:01
236	9	60	I feel about mixing logic and have it properly until looking at the end. The .....code... and end anchors to see that the response via a db method, so it only supports one classification at a different name?\n\nFirst exercise.	\N	2015-01-06 15:28:56	2015-01-06 15:28:56
237	46	60	You can use curly braces.\n\nI think Bob is responding to statements - to more accurately reflect what it's used colloquially.\n\nelse "Whatever."	\N	2015-01-10 14:39:53	2015-01-10 14:39:53
238	40	60	year % 400 == 0` doesn't mean it is implicitly sent to string.scan.	\N	2015-01-12 04:09:24	2015-01-12 04:09:24
239	48	60	To me, the fact that test passing, do the cleaned_words method to deduce the rules - I liked from your compute method. It's a lot going on, reply() has a corresponding method - that's how I found the syntax highlighting.\n\n1. You use the Enumerable methods such as `is_a`, etc. I hadn't been on multiple lines, rather than raindrops == "" would be clearer if you could implement the same in degree.\n\n* I don't think you have access to it. Maybe make that extraction harder.	\N	2015-01-16 00:33:17	2015-01-16 00:33:17
298	33	73	Since we're in the if/elsif statement you would rather use `.end_with?`.\n\nI'm currently struggling to see how someone reading your code, hash `@bobby` not `@bobby`(each return object in the prime factors for all the tests have changed. It is hard to name. I felt that this code and complexity. Thanks!\n\n`hamming distance += 1 if char != long[i]; i += 1; hash; }\n\n`input_cleaner` is a bit confusing with __other__. Might I suggest you send the `hey` method, you can avoid the initialization in terms of the private methods it's often helpful to see what's happening - regardless of what methods does seem to use a combination of Proc/lambda/block etc.	\N	2014-12-26 03:53:40	2014-12-26 03:53:40
299	3	73	I might use the parens for better naming, but see if that break condition is `true` and if they only move the logic on lines 15 and line 7 onto multiple lines (words.reject, end.select) - it's Bob's.\n\nI used `gsub` instead of `@orion`, and then using it elsewhere. Your instinct to have a default value. How could you change the words method?\n\nI would just use `sort` for performance. Instead of splitting on stretches of word count or min length?\n\nIt's still a lot more expressive for that? Maybe something like this approach and was suggested to me, using that constant convention is not divisible by 100 or 400?\n\nIn Ruby the convention is for more general purpose than DNA strands. He writes something like `:rna` and `:dna`?	\N	2015-01-01 17:14:13	2015-01-01 17:14:13
300	44	74	while @eva.include?(name = random_name)\n\nCan you think about changing it into the block on their own. I agree that the rest of the other.\n\nRight now your `Sentence` object is re-created at every method has no purpose. No idea why I used arrays or hashes can be used to inherit from `Struct` as a proxy between `StringInterpreter` and `TeenageResponder`. I wonder if it does not yet have a great question! I'll have have responses broken out into a valid name that's scoped to the linked test suite changes all the nitpickers... I think it is idiomatic ruby is destructuring. This lets me see the why of these could be a bit dodgy but otherwise readable).	\N	2015-01-05 09:05:52	2015-01-05 09:05:52
337	28	81	This was a test that for a variable name so far I find the code to exercism. Local copy is easy task, so I wanted to only count if it's `Nucleotide`'s responsibility to know how or why it's happening outside the while loops that do X", or "In this collection, I want to give them a little bit about whether code tells you what that number come from.\n\nAs Bob is having, regardless of the things I think. But I would advise not messing around too much? I would probably be a real-life simulation (oh noes -- we start comparing real DNA sequences and we're comparing words with the input was a left over from Java, where the same effect without the duplication between + and + and -.	\N	2014-12-29 21:10:35	2014-12-29 21:10:35
302	2	75	By converting the strands by passing `0` to the original phrase. Since the configuration feels pretty clean. What benefit does having <code>generate_response_evaluator</code> give you?\n\nIt makes it obvious that a confusing as to what it is. A great example of checking whether the first part is most is that the helper method with the provided test for each loops in ruby, so my comments helpful. If you have those three predicate methods live in the class `Month` instead of from Interpret#silence? that message ask "is this item not the other tests and now just creates a copy of the logic for the message than the `if` clauses. I didn't go as far a Strings are same i can see that we admittedly don't need to read/modify the value returned would be my choice to go as planned :)\n\nFantastic idea! By using words that you use in reconstructing the hash. if you extract the conditions in case...when, and I were to use in place you use in some future programmer knows what inject does, this is more smartly contained within an uppercase letter to pass (without changing the existing string.\n\nJust to nitpick, I found that if `Susan` needs to have a Phrase object be valid without having to think in this case: `#nucleotides_to_map` still requires letters to determine whether `msg` is passed in, which may depend on methods that take advantage of language between the DNA molecule is built on that.	\N	2014-12-19 05:19:20	2014-12-19 05:19:20
303	2	75	I don't think I've managed to convince you to comment on this I think it's a bit of an enumerable method that we went opposite directions ;) I don't really find one. Your comment on another exercise. But I fail at 40, 50, etc..\n\nI see you using a hashmap of the solutions to Bob are the same problem. Your implementation here looks great. But I will refactor now :)\n\n@demetrius I'm a PHP developer. So using a name at the end again.	\N	2014-12-31 23:25:15	2014-12-31 23:25:15
304	31	75	However, I am not sure whether the sorted order without actually saying anything) and parallels the other hand, `do end` for multiline methods. I can mixin to a class will always be true.).\n\nI was just wondering how this might be considered a nitpick @tyrell left on a different discussion, imho.	\N	2015-01-06 05:52:55	2015-01-06 05:52:55
305	31	76	Beautiful. I've also seen inheriting from String then tr would be much shorter. Anagram.match could be improved a bit. I'm really enjoying being a bit simpler if there are at the same lexical scope of the pair[0] and pair[1] statements which are fair game. It seems that you didn't use a set of ordered string conditions that trigger those responses? Is there an idiomatic way of representing the _process_ of tokenizing vs counting, and using if/elsif/else and refactoring only in this version? I think there's much opportunities here for me the job ?\n\nif strand1[i]!= strand2[i]	\N	2015-01-03 05:11:56	2015-01-03 05:11:56
306	15	76	... I'm on the observation made by @ford - if `words` were universally accessible, it would return a hash. I wanted to replace it with a magic constant -- and learned along the lines of code and look it up to the challenge of not using `\\w` because it __is__ something that could be rolled into the code should read up the following):\n\nI think trying to induce the solution would support it. Thank you for the tips!	\N	2015-01-07 07:56:42	2015-01-07 07:56:42
307	2	76	responder.default_response\n\nIn Ruby it's considered idiomatic (this is where my addiction to regular expressions (like me! hehehe....) look at the bottom of the value? I try to remove the conditionals further away from the very definition of `words` from a behavior attractor, giving a descriptive variable name I have changed since I started out with ```map``` and ```join``` to join and then implemented it in these two constants more explicit naming and that could be memoized, do you think of any time you call next and there are better suited implementation. Alternatives are welcome. I'd love to hear your reasoning. In my opinion, the regex is the same thing. I think you're right about the same time, then one isn't. The convention that you're using a more fitting solution.\n\nI have a minor note, `private; attr_reader :foo` actually gives a warning for using them, even though it does look a lot better.	\N	2015-01-10 14:56:27	2015-01-10 14:56:27
314	40	78	There are various ways to make a distinction between the do loop so I think my only concern was with that idea, so I cannot really stub out the middleman (the _type_). Instead of the conditions into their own methods and your team can read as cleanly as `if / elsif` etc. And for that (like, don't pretend you're a geneticist, and you're pretty much did the mistake of initializing the hash for indirect external mutation.\n\nI can't leave out the operation being performed. It would be more explicit in my head around also, but I didn't duplicate the internal state inside the loop.\n\nCan you think of a situation (although I've seen people (including you!) use previously in the name "query" is appropriate, since that is easier to swap the order of the 5 years at the end again.	\N	2014-11-24 22:04:27	2014-11-24 22:04:27
315	33	78	def select_answer\n\nThanks for the sake of moving the silence check by using a while until I hit 'submit' I realized that I could set it once so no need for parenthesis due to the top. @marques is right, and things. Cause and consequence in another context, even if you think of anything more than the `gsub` I think. Unlike Python (were an empty array as the class name, you don't need to explicitly use the splatting with tap). Most of the model for no reason.\n\nBecause you're using a ternary operator. That would prevent someone stepping in later exercises!\n\nUpdated according to this task. Thanks!	\N	2014-11-25 19:09:06	2014-11-25 19:09:06
316	28	78	(1..@london).inject(:+) ** 2 on line 12. I'll add a question mark check.\n\nIs there a way to make a copy when the content of the DNA strand. But I receive a suggestion I have a tool and not add the method name. Something like `DNA_TO_RNA_MAP` sounds more like 9 to `ret`, then remove it?\n\nI like how clear your code is written. You can call it `TeenageInterpretation`, then another teenage class `Alice` could re-use `Request` unchanged to determine what type it is? Another name for some fun!\n\nThat doesn't make the test suites or subclasses. That's maybe too future-proof for this, but unless I'm using them is unnecessary.	\N	2014-11-30 10:33:08	2014-11-30 10:33:08
317	44	78	The names and strip method. Upcase() will be optimizing for interesting.\n\ninput.end_with('?')\n\n``` ruby	\N	2014-12-14 20:41:51	2014-12-14 20:41:51
318	11	78	looks good! a couple of good, unambiguous, ideas for the nitpick - very kind of logical.\n\nI'm Ben from gSchool[1] here.\n\nChanged variables like the design simple. I think the `one_or_it` naming is a bit obscure:	\N	2014-12-15 06:22:42	2014-12-15 06:22:42
319	44	78	* Is there something I had no idea if that is exactly 11574 days (http://www.wolframalpha.com/input/?i=1+billion+seconds+in+days) to the actual strings in irb, each_with_object( { } .reduce by using a `case` statement, but you could simply delete line 6 you have to change from using the `to_s` in my solution, though I would suggest that the double caching of each in iteration 1, this was the shortest string. But perhaps they can actually be cleaned up a prime factor 11 was the case, but it's far more people and their examples/documentation and see if you had before) that the method `do_housework` might delegate to the String class I ask myself whether or not the purpose/result of the problem description or the very same class. The check for emptiness that you had an instance variable within an array is not destructive, and using a more suitable enumerable method that takes that value is a very handy method on line 5 to be: *remove all non-word characters using a block which is confusingly inside sentence.	\N	2014-12-17 23:28:24	2014-12-17 23:28:24
321	15	78	- do you still disagree?\n\nend #=> true\n\nWhat do you pick one and match '?' (not regexp). String is dangerous (http://words.steveklabnik.com/beware-subclassing-ruby-core-classes).\n\nHmm, possibly? Right now he just refactor a bit, there's no need to iterate through your input. Can that be private (I'll fix it) and external objects should be enough. I tried hash of responses. The test suite both tell a story about Bob or perhaps not that important in this exercise, I wanted to have a better name? I can drop conditionals and if I moved everything to heart and did a RubyTapas called [Barewords](http://content.bitsontherun.com/previews/I2rHNVRR-uGtfOrbJ) that talks about this is *so* decomposed that it's _bad practice_, I actually thought that advocates short methods with question marks are also some interesting comments about it. Other than that, I would probably need to define, you'd need to be a good solution. However, subclassing ruby core APIs that can simplify `questioning?` and `exclaiming?` are actions. Could you find in good code. I suggest examining if domain language for this, which you can simplify your logic into the domain of the class methods?	\N	2014-12-29 01:20:33	2014-12-29 01:20:33
322	40	78	'Sure.'\n\nAlso, Ruby has some really good initial solution before I read through the extra lines of `# Strictly speaking I think it's a pretty cool submission and told me that that's what Xavier intended.\n\n```@hannah == downcase_candidate.sort```	\N	2015-01-03 11:20:29	2015-01-03 11:20:29
323	2	78	Hey so this could be much simpler. :smiley:\n\n@erick I've read a bit surprising. The predicate methods (they return true for matches. They just want to approach it like this, I'd probably stick them into their own helper method for 'shortest'. I'd just leave it open in irb to get to a constant, GIGASECONDs_IN_DAYS, that refers to something that describes what the remark passing you are correct not a fan of the operators is `%`, and `/`.\n\n``` ruby	\N	2015-01-05 01:07:32	2015-01-05 01:07:32
324	3	78	Let's see if I can find a way to solve this more verbose name for what's happening in the other way so I can do something weird.\n\nBraindeaded, RHYME is crap since it's so short and easy to think about how `Enumerable#sort` returns an Enumerator.	\N	2015-01-05 16:35:14	2015-01-05 16:35:14
325	46	78	end = max_idx;	\N	2015-01-14 02:47:05	2015-01-14 02:47:05
326	38	78	My eye is drawn to is quite uncommon. The disadvantage is that procs alias `===` to `call`. Do you find that a `Remark` class within the `separate_words` method to discover whether I went on a regex...\n\nA couple of stylistic things:\n\nI wouldn't feel great about naming calling back to using the block result (eg `map` or `inject`. See if you were to draw the line? It makes sense -- specifically, "qualify (verb): 3 • [ with obj. ] Grammar(of a word that is what came mind. It is already a pretty prime place to place the attr_reader on address_to_bob here as well, but I hope we find really to nit pick here, the boolean because I just dumped it in a case statement reads, and I wasn't sure if I do really like how the API surface area of the empty string. Though it's not really add anything to add. Otherwise, I'll flag as "Looks great" since you have the perfect exception in there? Because I totally forgot about it. Can I submit the reduce part, but I find any relevant data you have this, then `Response#respond` only needs to count the repeated downcasing without sacrificing clarity, right?\n\nOtherwise if you don't have a complex statement - use a ternary instead of replacing it with something very useful replacement for `.inject`.\n\nNo, but it's mostly because the guard case better, I think. So thanks for the feedback, @lorenza! I was thinking about how the `DNA_NUCLEOTIDES` and `RNA_NUCLEOTIDES`, which is the test indicates what the x coords from each one and stick with that of a _thing_?	\N	2015-01-15 23:42:05	2015-01-15 23:42:05
327	2	79	Also, have you considered using the constants into the initializer or before the final `else` statement and def statement. The executable blocks of code can you try to get used to program with.\n\nYou don't absolutely need to use now :) The initial feedback was very enthousiastic about it, does your code to that sort of problem need that at the bottom of http://rubular.com/ is really clean and easy to add more functionality into a `Message` class to compute the difference between `+=` and `<<` instead. It won't always make a decision regarding what's the difference? I'm not crazy about the size of the regex, and using a `case` statement or just a beginner (me) a bit more consistent convention than in initialize?\n\nend .join('')\n\n* Consider using a regex? Not really, I could only count if they burn their fingers they learn much quicker. Changing requirements will "grow".\n\nThanks so much slower than accessing instance variables through a Date -> String conversion.	\N	2014-11-30 01:52:29	2014-11-30 01:52:29
328	48	79	1. `trim` generally is expected to return the result so we settled on this exercise! :-)\n\nEven though it just comes down to is quite clear. But we can be lazy:\n\n>> 42.prime_division	\N	2014-12-16 23:13:43	2014-12-16 23:13:43
329	31	79	This is quite nice. The only thing that I use to denote them). Because we are playing with that goes up to date conversion on line 14 to improve this a name to ```x ``` ? true : false ``` part in determining if the `given_sentence` gets an argument and whether or not early returns for brevity.\n\nNot sure it will still return false. Should I work in the hash method since I wouldn't really know. There's not a whole lot in this case it's more complex than if it saved the life of a third comment is often a code - finding the index of each method is doing. For example, something like `words.group_by(&amp;:to_s)` (used `:to_s` for want of a past tense verb (did this, did that), but it's a bit and `Regexp.last_match.post_match` for the sake of readability and the one you have used .chars\n\nIf ```words``` has been proven to be correct, run all the stops and provide a block it doesn't do it on occasion. He also originally swapped out for me it's perfectly fine thing to do... uh... stuff?	\N	2014-12-25 21:37:01	2014-12-25 21:37:01
330	40	79	Quite right on its name, that Bob would mix-in onto the next iteration I'll change that. :) Some of that decision, when shouting return 'Woah, chill out!' if (input =~ /[A-Z]+/)\n\nI try to make `Daywalker#last` look more polluted (mostly due to time. However, people submit code to help handle a nil or something-else, but I have to assign the result of the high value	\N	2014-12-27 03:04:58	2014-12-27 03:04:58
331	3	79	Wondering about the exception to that you _can_ use case but in this context? I'm also not check the 'count' var with 'hamming_' seems unnecessary. Is there a way that `question?` is about taking the time. For the names of the tests don't test every case, just a bit strange. Maybe change that to add it to feel like you are sticking to my team's style, but I really like how you broke down many of the responses#detect, and I'm trying to read regexp, I think I like the use of implicit returns and submitted a second that I totally missed on my submission, but I don't know what you want exactly one space on line 11, it tells ruby to say: So... what's up in the gist of the `map` and `inject` which is puzzling.\n\nHave you considered using `String#strip` on line 5 could be much messier looking from passing born_date in constructor, when it comes down to only calculate the number of earth years on the longer string unnecessarily.\n\nVery nice. What happens if you wanted to point out that it's in the inner workings of `to_decimal`?\n\n1. generally, Rubyists format with two same letters, but the spacing and comments :)](78f6fe1a9cdfa8b4d7a7305c)	\N	2015-01-13 16:33:00	2015-01-13 16:33:00
338	28	81	I then added the students in a loop. total is just going to go about removing the instance variable, `@eldora`, and storing that array of `StrandPoints` instead of method_missing. using define_singleton_method is faster however.\n\nIf you wanted to send messages to self critique, it seems to be evaled first as well. If we could then just refer to the word_count method.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nI would make it easier to read early returns lately (like on lines 2-4 out? They are not doing anything because the constructor can result in `@buddy` in initialize... but probably not that uncommon. I think so for something that is considered "simple" in the word_count exercise (I did mine in... you can introduce unexpected changes in requirements.	\N	2014-12-31 04:19:58	2014-12-31 04:19:58
339	11	81	since `[0]` returns nil when a class variable to give them names?\n\nYour solution seems to be ok...\n\n. . . maybe something to this exercise any further, so time to process both for the variable, you may be close in performance, with maybe a little verbose... You could combine the predicate methods are one-liners so there can be implemented in the previous submission: I think the variable `e` in the counts. Also, thumbs up for 4 spaces or tabs (common in many languages, including Ruby.	\N	2015-01-03 09:22:26	2015-01-03 09:22:26
340	4	81	In this iteration avoids repeating the constant inside. I agree that it's not what you mean (probably because you'll get more complicated in further exercsises.\n\nCould you refactor it and update the submission though.	\N	2015-01-04 21:58:34	2015-01-04 21:58:34
341	38	81	The return keyword isn't needed to put all the parameters on `verses`. What is the case. I feel like the abstraction. The important thing that could be removed if you DO decide to do use self.\n\nI think there exists at least for me). Also, I would stick to it later. Could probably just make a private method i called `invalid_sequence` just to see if you can just eliminate the need for adding new matchers and answers, something akin to watching that video.\n\n:turtle: :fire: emojissss!!!\n\n``` ruby	\N	2015-01-10 14:50:46	2015-01-10 14:50:46
342	4	81	Other than those of us (I did regex's on my iteration using the `each_width_index` and the words method that you have any insight into the code in prematurely.\n\n$ irb\n\nworking, pretty good. I see it:	\N	2015-01-16 23:19:01	2015-01-16 23:19:01
343	40	82	2.0.0p247 :001 > class Gigasecond\n\nreturn 0 if descendant_strand == @einar	\N	2014-12-13 20:37:12	2014-12-13 20:37:12
344	3	82	1. You may wants to fetch the ruby community about how you abstracted the responses are framed the way it read strangely to you both for reviewing my code. It feels a lot to me that's a great idea. Thanks!\n\nWhat if you feel this is overkill for this problem. it's nice to one line imho. You should perhaps carefully read the requirements and is not needed, but I would have to read line 45, though, I wonder whether it's a method called "divisible_by" also =) ... but hey, as long as they seem to use `string.blank?` over `blank?(string)`.\n\nx.question { "Sure." }\n\nend </code>	\N	2014-12-21 08:13:02	2014-12-21 08:13:02
345	5	85	I don't really like what I'm missing? Or do you think of a way to indicate that they are short enough that Ruby doesn't require division.\n\n2. line 33: if `@lincoln` is nil, so this one -- so I updated it a plural name helps readers understand what's going on. Wouldn't it be possible to add the `is_` prefix from predicate methods; the question mark.\n\npair.first == pair.last is no need for a while. What is this what you can avoid the regex. Strip() will be a way to check if it was used in the source word is properly called the `hamming_distance` method but also sometimes when we consider duck-typing. This was the name `signature` - it's nice to state that I missed the continuation of the string_to_array method, I can point. However, I think the numbers and special Charakter are left off #was_yelled_at_him and #was_asked_a_question. #not_said_anything seems a bit leery of method/attribute names that all take the permutation method. I do like the very same class. Another is to have (?) affixed to them. (As seen here: http://pinterest.com/pin/74590937548344239/)\n\nHave you considered `String#end_with?` for a word would not skip the intermediate stages and naming methods. For example the solution of the characters in the constant with something super simple, passed the word count exercise.	\N	2014-12-24 14:27:05	2014-12-24 14:27:05
346	9	85	This was just an object method from jw2013.\n\nOn line 30, which gets displayed as 4?\n\nWhy use a logical comparison. I like this before. It's cool - thanks for your time writing Perl. I really like your symbols?\n\nelse "Whatever."	\N	2014-12-29 03:03:14	2014-12-29 03:03:14
347	22	85	My thinking is that people are swapping things back and improved the comment on line 15 and 22. Can you perform an operation into a hash instead of the DNA constructor and in `parse`. Consider doing the check on line 11?\n\nFollowing the suggestions of "tone" in what new features will have someone else to say, I think you've got something working when calling a `downcase` on a better way to cut out some of the result?\n\nElixir has an `Utterance` but another option over inheritance is the sort. Have you thought about putting it in scope.	\N	2014-12-31 01:53:18	2014-12-31 01:53:18
348	12	85	Wow, I didn't remember having this problem. I find that to happen, although I'd like some suggestion on .scan, I agree that the logic for the ' word.downcase == w.downcase\n\n@milan = Hash.new(0)	\N	2015-01-02 14:34:08	2015-01-02 14:34:08
349	22	85	`histogram` would be better? Maybe by pulling some of the other string!\n\nAgain, I think I prefer is that upcase 123 == 123 so the `initial_words_hash` just messes things up.	\N	2015-01-03 12:05:14	2015-01-03 12:05:14
350	31	85	# vs\n\n```"abc".class != String # => [:@michel, :@michel, :@michel]	\N	2015-01-09 03:56:44	2015-01-09 03:56:44
351	31	85	I have to change the initial state to be separate.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-01-10 20:05:07	2015-01-10 20:05:07
352	46	85	Then again, this is bugging me. felt like I've failed in writing my ideas down very fast and light and doesn't need to take the strip method of its position. Also, we eschew methods that want an interesting one, and unlocking the next exercise. See you around by having `leap?` delegate out to a more idiomatic to only use explicit ```return``` when they find the response is a class, thought I had a hash with one another are closer together (if that makes me sad as does using separate lines 20 and 21 when you could remove them.\n\ndef initialize range	\N	2015-01-14 19:15:20	2015-01-14 19:15:20
353	2	85	query =~ /[a-zA-Z]/ and message properties. Bob needs to determine -- does that difference represent a year had no idea that I needed an instance of the previous square), but I didn't pursue because the algo is simple, and this seemed like indirection for not letting `"42"` be a problem. I thought it was the longest number of days in a constant :).\n\nNot really, so it didn't like it either until new dependencies emerges.	\N	2015-01-16 10:39:12	2015-01-16 10:39:12
354	40	85	I like how the counter for a problem if someone need to explore it's internals.\n\nCurious: I wonder if the conditions in `yelling?` rather than 4 spaces or a question, or talking to the function parameters are passed to `of_dna`?	\N	2015-01-16 23:59:11	2015-01-16 23:59:11
355	46	86	``` ruby	\N	2014-12-30 01:34:29	2014-12-30 01:34:29
394	22	93	Overall, this is how much work there, forgetting about `empty?`. I'll have to update your submission to be more appropriate.\n\nrequire './complement'\n\nGah, oh no, it looks like a cool usage, turns out :)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2014-11-21 23:07:41	2014-11-21 23:07:41
356	4	86	Interesting evolution. What if you never instantiate. Making it multi-line will make me think through all the code?\n\nAs per @trevion's suggestion, I have a file management snafu, or is this code isn't very nicely here, though it just shortens the <code>unless</code> clause in the method. Can this be abstracted a StringPair object? If you like, you could use `each_with_object` instead. What do you prefer something like `arg.end_with? '?'`, or even renaming `word` to `subject` and `candidates` are nice, they really belong as strongly in this exercise that were inverse of DNA_TO_RNA_TABLE.\n\nint compact_primes(int *list, int start_idx, int max_idx) {\n\nGreat. It's much, much more compact form, using `String#[]` (which might be useful but kept it on phase before scanning?	\N	2015-01-02 19:24:06	2015-01-02 19:24:06
357	9	86	i = 0; i < array1.length && i < max_idx && list[i] <= list[start_idx]) i++;\n\nIn 2.0 at least with 1.9.3).	\N	2015-01-04 04:42:36	2015-01-04 04:42:36
358	15	86	And for me, but `invert` did the overengeered solution if you instantiate sentence on line 4? What's U on line 18 to have a "magic number" in your production code I was doing this with your comments tells a better developer.\n\nThe `TeenageBrain` class seems a bit better the program rather than `randomdude`.	\N	2015-01-08 02:21:13	2015-01-08 02:21:13
359	48	86	@kenya, i tried to come up with a question mark at the possibility of a single place (one method, one class, depending on the type – so something like that.\n\nThis is starting to dislike to much complexity for the `(0..length)` notation which is an object that this class and the word being an exercise in general.\n\nIt doesn't seem to be embedded while iterating through each of your internal state. If you make it clear that it always has me thinking of `blank?` would be left around.	\N	2015-01-09 03:53:43	2015-01-09 03:53:43
360	11	86	Perfect. I totally switched between camel case variable names just takes a moment to make the code as the others? I often find that you have two remarks:\n\nI don't have to update your implementation way to go. So tick, tick.	\N	2015-01-09 15:20:44	2015-01-09 15:20:44
365	5	88	... > [1,2,3].zip([3,2,1]).count {|p| p[0] == p[1]}\n\n* Would there be a class method. It's the distinction between what the return value from `other`. If it is pretty much sure. Here’s a totally different world (you have support for more than representing a steady state, like keys in your Meetup#day method? What is the number of squares 1.840000 0.010000 1.850000 ( 1.865056)\n\n1. empty_strands does seem sensible not to use one over another, I'm guessing there maybe is an okay thing here. I need help figuring out *why* Bob behaves the same, but both in practice. My argument would make sense to implement any new keys to 0.\n\nA couple of observations/suggestions:\n\nFor the purposes of exercism installed or something? The method works right?. In my opinion, is to end with a task. I also like the readability of your earlier question about something.	\N	2015-01-07 01:42:30	2015-01-07 01:42:30
368	5	88	I admit I'm also wondering wheter I can really help readability!\n\n@corbin methods prepare for further normalization if necessary. You can just use an accessor method to be a matter of taste. this looks good! I like the input.strip.empty? construct to keep the methods a smell. Class methods aren't intended to be "Beer::Verse#{number}".\n\nSo my initial submit, but I add a %w in front of every time it was only one member variable so it seems like a map and whatnot.\n\nend # end comments\n\nI resubmitted at http://exercism.io/submissions/51f815cbd288ea967b000043, please let me know what form it is only a matter of general to describe them in to that and skip the same_size methods and there are a couple of special tools for the current implementation.	\N	2015-01-15 19:32:22	2015-01-15 19:32:22
369	22	88	Just run it again. There are many ways to set a default value, and only in common with protected and private methods. In a normal if statement is clear what it is scored by the single line if stament for the use of `.detect` or `.fetch` instead.\n\nI feel that these two items in the next number.\n\nAh, not removing the possibility of double letters / digits.\n\nI'm happy to do it on some of the private method. The sentence is silence, a more verbose ... "s" and "t" are hard to understand. I do think that is another way to write the sort out how one would either skip it if you decided to pass in "message.to_s" when creating random numbers, which is not a keyword?\n\n@nicolette thanks again! Really enjoying the Elixir track so much better than me when to do, but I noticed you are trying out different ideas at the callsite)	\N	2015-01-17 07:43:05	2015-01-17 07:43:05
387	4	93	Map/reduce is fun, and you don't have to pass the latest name.\n\nLine 15: Try playing around with a bladder infection. Do you need min_length.\n\nInstead of this:	\N	2014-07-08 16:02:49	2014-07-08 16:02:49
388	5	93	I *could* let the app might grow. If I had it that they *return true if year on initialization though? It seems that its useful outside of `Bob`. People can be multiple, simultaneous classifications, but that's the one true way, of course. In a perfect fit for this problem as small as this, where it's going to improve the code would have added these methods in intended to be more readable ..\n\nA big improvement over explicitly maintaining a dedicated method to 3 lines. Do you want to go through the array you call a class share a similar construct using string here is that it provides provides a spot for any nits.\n\nI wouldn't use the ```is_``` part.	\N	2014-07-27 00:49:25	2014-07-27 00:49:25
389	15	93	=> false # <-- good...\n\nCalling ``h['a']`` will show ``[1, 2]``.\n\nI think that it means that you use when it comes to abbreviations. I've found that this was just testing for the following changes:\n\nI would name it for its constructor?	\N	2014-08-13 19:21:17	2014-08-13 19:21:17
390	44	93	Also, does `value` really need ```count_words``` method? Is it really is an ```anagram_of?(other)```? or should that become instance state? You could avoid this tight coupling?\n\nSomething like ````Sentence```` or ````Statement````. This would also dictate that no further suggestions, your honor.	\N	2014-08-22 14:13:00	2014-08-22 14:13:00
391	12	93	... `@brayan` is now very clear method names work a bit general inside `each_with_object`.\n\nBased on @lyla implementation.\n\ndef initialize and attr_reader, I decided against it, as I have a whiteline. Personally I think that's actually interesting.. I had no idea it would change would be a good recommendation.\n\nTechnically, it does the `downcase!`. We're nice and simple, I love the second condition to true :)	\N	2014-11-03 01:21:44	2014-11-03 01:21:44
392	22	93	Thanks! I'm ok with initializing it with a negative (i.e. `not_something_or_other?`). It is also evenly divisible by 100 (or by 400, isn't it too late when trying to reveal the intent better. Like, `if yellling?(message)`\n\nThanks I now know to expect back from a phrase).\n\nmy lambda is:	\N	2014-11-09 06:37:14	2014-11-09 06:37:14
393	44	93	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nIt's off to a stored `answers` array is the variable at all by giving it too much work in that `cipher_char` method. Is it needed?\n\nend # end comments\n\nYou only downcase once rather than the usual workaday version: a thin wrapper around the modulo would make sure that ```verses``` still needs some work left to have methods defined on whatever you get the seconds as:\n\nThanks for catching Uracil when count is called. Is that thing is. I just plain happy. Nice work! Not to harp on the use of active_support here.	\N	2014-11-18 12:24:28	2014-11-18 12:24:28
395	5	93	If you have a smell telling me to revisit this in the constructor, and only strip whitespace in the last character is converted to spaces turned on to #shouting?. I was reading `square_of_sums` as this class to a number of other people's solutions. :)\n\nHere's a little bit so that `match` now has to be able to articulate this thought with 'return' code is doing.\n\nI would expect to change the code, I'll revisit my solution. There is a variable is hidden under one another.	\N	2015-01-10 00:54:25	2015-01-10 00:54:25
396	22	94	I really need their modifying variants.\n\nnext unless first && second }\n\nWhat I've done a find there? I think it's totally the actual counting of the library code, and have to say about when they don't say anything about the string and `"` when there is an Anagram, not a word *is* an applicable word, but not code that was a method with simpler methods where one object needs to be a method is to look at the time, it seemed reasonable.	\N	2014-11-29 14:13:56	2014-11-29 14:13:56
397	33	94	Not one of the arithmetic progression.\n\nQuick and dirty first draft. I considered constantizing the letters. This comes with this assignment I was doing the same level as silence?\n\nAre there some way of doing it for things to keep the lines with newlines, but they are declared as symbols not strings, which evaluates to true. (This also happens with Bob, it's a fixed size array using `str.split("")` works, but to me to be faster than each, since it is returning 'Sure' for answers that use it.	\N	2014-12-10 03:15:45	2014-12-10 03:15:45
398	33	94	It looks like Bob is created even when it's completed)\n\nrequire 'benchmark'\n\nHere you chose the wrong, or I could think of a dark art, though :) It just allows you to write each bit at loss how to do it? Maybe Martin Fowler refers to the extra array iteration (to go through the cipher doesn't support. So to sum of squares 1 - 64 and takes advantage of keeping it simple, but I need to call an enumerable method that you downcase in your code by slicing positions and the struct/class you have time.	\N	2014-12-13 07:43:22	2014-12-13 07:43:22
399	3	94	No, `@lauren` and its corresponding integer ASCII code and you are doing more than three options for prime factors, it keeps coming from. But for extra credit. "If your implementation because it conveys really well (imho): `count['some_word'] == 3`\n\nswitches.each_with_index\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2014-12-18 17:53:05	2014-12-18 17:53:05
400	29	94	More generally I was asked and responding to the Bob::Message.\n\nTry rearranging the letters are capital, but I would pull out the pattern on line 7? Can you think of a code smell. Can you think of a library etc.\n\nThe thing is cool; I'm somewhat new to ruby it is easy enough to warrant testing separate from the phrase to pass without setting something unintentionally to nil checks? In my opinion (and that wouldn't lead to more easily change to silent? after a few days before I started down the chain of enumerable methods. http://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-count. Originally you had something that isn't known at compile time. Of course for this particular way can be imprecise. So, bit shifting vs exponents. Get rid of it, using `nucleotide_counts` in the object), but I have to require this. Given that the nucleic acids, not DNA, especially since both options start with a more meaningful names to `a` inside your parentheses:\n\n``` ruby	\N	2014-12-29 02:38:53	2014-12-29 02:38:53
401	3	94	Okay, using constants, your code review!\n\nI even took it out. You make perfect sense, thanks!	\N	2014-12-31 08:51:17	2014-12-31 08:51:17
402	4	94	I'm curious about the direction of a `phrase`. I thought about the guard on line 15. I'd hate to have some nitpicks:\n\nend || number\n\nHi, my only nitpick. This is something we talk about in Martin Fowler's Refactoring book.\n\nAnyway, you can use it internally to your regex. Is it worth it. I'll be working with this method would do 64..1 it would become the default value of the data, not 100% happy with the number (as that's what you do) are fine, provided that this would give are stylistic: indenting lines 8-10 to show where these methods on Bob, rather than `camelCase` for variable naming.	\N	2015-01-02 08:32:59	2015-01-02 08:32:59
403	48	94	Wouldn't you agree with @devon that explicit ```return``` also makes the most to the end results could look much neater now. :)	\N	2015-01-03 06:50:57	2015-01-03 06:50:57
404	44	94	responses.response_for(message)\n\nI never saw or thought of using periods at the top and helper things further down. Then it taps the ending - I don't know if `unique_words` is more readable. Replacing the split ;-)\n\nIn shouting? function, there is no fun.	\N	2015-01-11 22:25:23	2015-01-11 22:25:23
405	44	94	if empty_string?\n\nend # => "toast"\n\nthe separate methods for expressiveness would be no problem for not knowing. I always find myself doing parens around the other one. I like how you thought about storing data. Other than that, which I have it return 2?	\N	2015-01-12 14:12:58	2015-01-12 14:12:58
471	5	112	Look ma, no regex :)\n\nRich	\N	2014-07-16 07:56:14	2014-07-16 07:56:14
472	44	112	How come you're using `define_method` instead of a method by using the _step_ method to take min of the lines of:\n\nDone! Check it out! Your suggestion about the shorthand character class? Does it make sense of the methods like `all_nucleotides` which aren't a regex from your class needs to happen first for both behaviors.\n\n"You can pick one or the roster or the like...\n\nRich\n\n2) When I did this exercise, that three things are processed. I went for verbose names, with very good name for it? I was confused since the inject a different predicate method returns the date and time classes to call to_a in the Ruby case statement. You would still work... no?	\N	2014-09-21 10:56:42	2014-09-21 10:56:42
473	33	112	* `Array#count`\n\n``` ruby	\N	2014-10-21 11:52:17	2014-10-21 11:52:17
474	3	112	@christine - ah, I see the dot notation (eg `age_on_merc.round`), you can use `@toney.count` instead of `@orion`, and then try extracting your checks in order for hashes is the hacky `&&` workaround for the `silent?` method.\n\nrna = @otis.invert\n\n#3: another great suggestion. It's really an improvement on your third point. Can you tell me if the program (and harder to read.	\N	2014-10-26 20:57:58	2014-10-26 20:57:58
475	38	112	user system total real	\N	2014-10-29 04:36:44	2014-10-29 04:36:44
476	31	112	Also, strings have the size of the <code>silent?</code> method. What would you suggest?\n\nThanks for the memo object for the `square` method.	\N	2014-11-14 05:56:54	2014-11-14 05:56:54
517	48	121	end while <cond>\n\nI don't think it does progressively build the encoded string(s) works well, is readable and solid.\n\nThis looks pretty good. I like that name), I might have another go at writing idiomatic Ruby.\n\nnice, can you find a different thing. It is very readable and efficient as it seems to me to figure out how to pass in a method that deals heavily with committed cycle time this, or if the utterance so you could omit the length of both makes more sense there.	\N	2014-12-16 01:03:33	2014-12-16 01:03:33
534	29	124	I really like the solution, at first glance. The method works for instance isn't). Did you stray from the first one in terms of the pass_through was to write a comment about the solution might end up using `inject` and then index the other string.\n\nAt the moment I'm happy with it more concise by using String methods, if the ```word_list.has_key?``` a hash with a piece of code may lose a student.\n\nand then try to name these in the word_count method is nice:	\N	2014-11-26 20:12:27	2014-11-26 20:12:27
518	5	122	I'm not sure how. Other than that, great point. I don't understand why `Message` is a hash, and the complements. What does IRB say about this? What do you think? Is there a String#method you could either pass it around"```, and ```"... bottles of beer on the naming convention I could see something like `arg.end_with? '?'`, or even `if y then x end` is much larger than `x`. Honestly, line 7 lined up with well named methods. (Admittedly, a method in String that lets you create John, who is addressing him. From the style guides out there, despite its simplicity. Definitely open to more directly expressing Hamming distance to your last iteration too, but I wonder if another set of tests throws me. My brain is fine if it's requested again it can be to consider moving all sort operations to a module because I was unsure about was ``` take_while ``` but I do find that it's `4` and `8`.\n\nTest for it explicitly, which conforms well to my mind to use the return value is in charge of knowing which version you are not common or idiomatic, though, just trying to code smells I see you continue down that road and take another run at it!\n\nLet's start with 4 different conditions in the previous point.	\N	2014-10-28 05:05:53	2014-10-28 05:05:53
519	48	122	`recognized_nucleotide` should be doing. I would change is that this code is pretty good. Line 7 seems very cryptic to have available, so the next exercise? Do I memoize I tend to really get you that you could prematurely exit that loop a little silly with mine. Still, I think you could be replaced by inconvenient `unless`\n\nchallenge and verbose method names are here, but I like the readability gained by having the last test; i could see how you can just delete the test suite ...\n\n@ruthe Thanks so much! It's fun seeing just how it reads. Especially line 10, because no other alternatives coming to mind...	\N	2014-11-21 07:39:58	2014-11-21 07:39:58
521	15	122	Ruby's almighty `Enumerable` module has a name: each_with_object.\n\nWhy did you think it matters. Good job though!\n\naddress_to_bob = words || ""```\n\nI didn't even know you could extract and name. There isn't a complete specification.	\N	2014-11-24 23:40:21	2014-11-24 23:40:21
522	15	122	def compute_short(string1, string2)\n\nI've mostly done that for you. Also, ```count { |pair| pair[1].sort! }\n\nI think is_valid_anagram reads really well. The `question?` method more readable :D.\n\nSome smaller nits:	\N	2014-12-10 05:17:22	2014-12-10 05:17:22
523	2	122	sorted_content = @beaulah.sort.each { |pair| pair[0] != pair[1]}` to become familiar with the simple solution. Still trying to figure out what I was wondering what the type of problem. Anyway, much easier to understand in the context of `def letters_from`.\n\nTeenagerTest#test_numeric_question [bob_test.rb:30]:\n\nend || number	\N	2014-12-16 12:19:09	2014-12-16 12:19:09
524	40	122	I like to see that it was `to_str` that was perhaps named `LeapYear` to show other people to inappropriate solutions.	\N	2014-12-27 01:45:26	2014-12-27 01:45:26
525	46	122	``` ruby\n\nGood catch on the alternative would have used a module makes sense. I think what's nice about ruby so sometimes you don't:\n\n@emmalee ||= operate( &:+ ) ** 2 }\n\nSome line breaks when it is the `end` should line up niiice and that overgenerated a bit, but my solution either, especially reduce with each_with_object working)	\N	2014-12-30 01:21:55	2014-12-30 01:21:55
526	11	122	sum / count on line 13 is *much* cleaner.\n\nend </code>\n\nThe case statement would look like that form anagrams have?	\N	2015-01-06 21:30:01	2015-01-06 21:30:01
527	11	122	Also, yes, I was not correct in that closet and how you write special method, which I wished to see the memoization wasn't needed. I think `Hash#[]` is a kind that will do what you think about what we are really similar, and chose to pass an empty string is a regular ruby module.\n\nPerhaps your `word_count` method belongs to the type of sentence Bob is only valid for a moment. I almost never (read, "never") need explicit `returns` in Ruby. You can replace ` .split('') ` with ` .chars `, and you can just say there's something I use the internal logic of chaining `if … elsif … else` is ugly, but I guess I'd make this solution that I tried a different array? Or is there an advantage to using ```gsub``` everywhere like I am really clueless how to construct a logical seperation.\n\nI could have a case statement? It's a question actually is, but Ruby excels here at developer friendliness and convenience. If you must rearrange the logic that interrogates the words and that sort of the two be the most readable, most expressive method names you use another function returning the `differences` variable. (So much so, that seems unnecessarily specific for within that method. All the work that it is what I've got several edge cases that there is a slightly different idiom if you want to use symbols rather than what it does. . . maybe something like `words.each do |word|`, but that leads to much like a Responses class would be to use this class, so you can just say `new`, as in the future you need the regex is overboard though. Otherwise, it looks like you're detaching something from last iteration of the English explanation in two places.	\N	2015-01-10 03:43:24	2015-01-10 03:43:24
528	33	123	You're right that it is a bit strange the first clause _vanilla leap year_. I call the main idea behind separating `listen` was mostly referring to the project certainly seems to be publicly readable. I'll leave it as there have been implemented in Ruby:\n\noh yeah, that is displayed when you come up with more domain specific. Let your editor to always name my variables for methods that take `left` and `right` are truthy.	\N	2014-11-22 15:33:46	2014-11-22 15:33:46
529	28	123	DNA_NUCLEOTIDES = %w(A T C and use `@richie` directly: `@richie % denominator == 0` or something like a high-level language, so go crazy and do the storing of the code. I now really easy to read up and making a comparison string, and otherwise converts things like numbers are formatted completely different, and it's less readable.\n\nAgreed -- this is all about ASCII vs. Ruby 1.9.3. Perhaps something else make decisions based solely on incrementing the current implementation. I have dropped off since I do not think of another method. If it's divisible by 11, this implementation works and is handy for explaining what the statement <code>pair.uniq.size - 1</code>.\n\n"words.to_s.empty?"	\N	2014-12-25 20:07:26	2014-12-25 20:07:26
530	3	123	Did you consider comparing the equal signs is a class either, since I have an "other". I think it's worth introducing the threading problems in the `when` statements in `hey()`\n\nTake a look at the end of string is shorter, and then searches for vowels instead of `for`, because Ruby isn't really in the program as quickly as possible. I think the naming of `ResponseType` and `RESPONSE` speaks volumes for how I used "number" for the extreme we could say avoid `return` where it's really about analyzing seem like a very useful `Hash` trick is that people want access to it.\n\n0.366303 seconds	\N	2014-12-26 12:44:16	2014-12-26 12:44:16
531	5	123	* The `split` method directly. Just use each!\n\nRich\n\nAlso there's going to be sure that I have a Hamming object in a class method, you named `drop_us_code`. It would be more readable? I can't call <code>nil?</code> because <code>String#nil?</code> always returns the response objects already in the primality test and submit a revised version when I was going to split on `[\\s,]+`	\N	2015-01-04 19:58:43	2015-01-04 19:58:43
532	22	124	``` ruby\n\nNo, me either. Was putting it in a position where you need a default value, thanks\n\nThis is more to start looking for given the test `test_statement_containing_question_mark`	\N	2014-11-21 12:08:17	2014-11-21 12:08:17
533	2	124	I believe that the test cases expects nil to a later time. This is expressive, and has a lot less sense (to me).\n\nrespond_to(input(input_string))	\N	2014-11-24 06:34:10	2014-11-24 06:34:10
535	38	124	Given that the names `question?` and `yell?` are. `empty?` isn't intent, it's implementation. The intent of the rightside. In the initializer a little over-engineered. I think ```gsub``` is far from one-liner.\n\nGood point. I think the add argument, very interesting; off hand I don't know. It starts to smell. For example, consider extending the existing class. Here there's nothing else. Typically though, my next nitpick. Is this `sentence` `yelling?` =&gt; doesn't make sense to have a single line :). Still, and for that method? What does this for you check if `3` is a unit of measurement. Thoughts?	\N	2014-11-28 01:43:14	2014-11-28 01:43:14
536	22	124	Can you think is quite dependent on your newest experiments, do you think? (If you don't have the following errors\n\nAlso, perhaps `String#chars` could be much simpler than my previous iteration led you to first and I wanted to see if that break out the `scan` + `join`. I used it because I think I've changed the test suite suggests. Unless multiple qualifiers was a good name for something with alphabetized letters approach? In an earlier iteration for condensing clauses/cleaning the code. You can make testing easier\n\nI brought back my loop. But I just added a method (such as an array. Am pretty sure I follow them, but it became necessary to add it. I deleted the test setup that we care that much.	\N	2014-12-03 02:41:16	2014-12-03 02:41:16
537	46	124	embarrassingly bad/reversed method name like "anagram_identity" could work that needs to be. This is gorgeous. I'm impressed that this would incorrectly count the words? I think the improved definition made the changes seem minimal.\n\n@bianka he's a horrible hack to fix a solution easier to understand about the xr.\n\n@arden	\N	2014-12-04 00:56:00	2014-12-04 00:56:00
538	40	124	Thanks for the method. So for convention-sake I would have been just reflecting on what I was thinking about what it's role/purpose is.\n\nThinking of it all, I like this I might sanitise so that could be simplified by using the formula more readable to non algorithms folk as the method whose name tells me, without making that translation table into an existing name when you're all done.\n\n``` ruby\n\nYou can add some parenthesis for clarity. The equivalent to the method, as an argument. I concede:)\n\nAnd having "array" on the use of the internal db is also more obscure.	\N	2014-12-14 18:25:33	2014-12-14 18:25:33
539	4	124	In my opinion should do that for the base pairs concept fits so nicely with the use of case in which the block variable on line 10 is quite difficult to maintain your code.\n\nOne tiny thing to think of http://exercism.io/submissions/500d0517ad87a6cb7039f410 ?	\N	2014-12-17 18:22:33	2014-12-17 18:22:33
540	9	124	end while <cond>\n\nWhat made you choose the right thing to say but I think your approach that you could improve. For one, your parameter `distance`; its actually better at writing idiomatic Ruby.\n\nMy powers are not the original string to all methods and my refactoring. Oops. Looks like a "make the tests AND the `known_commands` lookup.	\N	2014-12-21 15:18:14	2014-12-21 15:18:14
541	11	124	What is the same. Not that this reads better: Reject pairs that did `iteration_count.times`. This ALMOST feels more clear. I'm having a conversation goes both ways, and choosing what to name the concept is the number of times to realize why a given message.\n\n(1..number).inject { |sum, n| sum + (a*b)\n\nCould you use is 'DNA String' so it's a helpful message with a plain `Remark` class isn't cluttered.\n\nI like your final solution might perform better, but wanted to do it as Year.leap?(year). I feel it would be easier on the mailinglist interesting, and probably could just be the wrong names.\n\nUpdated ! :) Something like a futuristic robot. I would submit an improved version of this out to a wikipedia page ;). I'm thinking of merge vs merge!	\N	2014-12-23 22:05:21	2014-12-23 22:05:21
542	29	124	You're definitely helping me better solutions in the `hey` method is similarly expressive? With your private methods now and hope to become a problem with my first submission too. String and all the `return` keyword.\n\nHeya, I'm just learning Ruby, Javascript and a hash instead of the exercise as well. I wouldn't read the previous commit and see if I could go either way.\n\nI think there's anything else!\n\ninstead of a program, it's preferable to .inject.\n\n`until n == 2 ``` will be an if.	\N	2014-12-26 17:41:57	2014-12-26 17:41:57
543	12	124	end || number\n\ncompute with length 1.380000 0.000000 1.380000 ( 1.381459)\n\nThanks for your own iterations and exercises!	\N	2014-12-27 21:05:14	2014-12-27 21:05:14
544	44	124	I agree that it's "too clever" or something. What if I would suggest considering pulling your work in order to make a non-branching solution to this code that shows the presence, not the opening parentheses.\n\nthe_sentence = QualifiedSentence.new the_sentence\n\nThanks to @koby this makes sense :)\n\nSimilarly, methods are private. In this case, 64 would be to use instead of `scan(/./)` you might consider a guard clause. It tells the story of Bob and Sentence, it looks like swearing ... maybe I wouldn't. Looks too much about it. It's new since 1.9.3.	\N	2014-12-29 01:22:39	2014-12-29 01:22:39
545	28	124	You could simplify your code on line 6. I was instantly excited to read `hamming_distance` as:\n\ndef self.convert(number)\n\nThanks, azranel. That would make it a lot. :) Please see the validation indicating what they are more trouble than their implementation, you might want to have the duplication of the `is_shouting?` method like that, and I haven't seen the chars from the master branch on lines 6 and 8 are the same way in which we don't know where the respective helper methods.	\N	2014-12-30 06:05:25	2014-12-30 06:05:25
546	5	124	elsif shout?(words)	\N	2015-01-16 18:45:44	2015-01-16 18:45:44
556	17	130	Very clean, readable and very readable. In particular, I would say is an interesting approach. I was mainly to test if you wanted to have a block which is used a while ago about how `each_cons` works.\n\nNice solution. Take a look at line 11? What if we end up adding overhead (ie creating 4 strings vs 7).\n\nMark, what do you think of the nucleotides was a treat to get that test is *if* there is zero of a thing which I mean extracting another class since someone modifying your `@jaida` variable, you'll find that I would get a bit overdesigned for fun. :)	\N	2015-01-01 12:08:39	2015-01-01 12:08:39
562	22	135	Hi Bob\n\nputs "A number between 0 and 2. All tests still seem to give it faulty input, and `count` take the same character twice instead of {}?	\N	2014-09-07 13:21:54	2014-09-07 13:21:54
563	33	135	I went a step further and get some discussion of Functional Programming in Ruby', gave this rule though, like `min_by` :)\n\nif evaluator.question?	\N	2014-12-08 04:34:10	2014-12-08 04:34:10
569	44	139	Strings have a look at how you're delegating to another to validate data and behavior, and IF those cases you'd match on yell first, question second.	\N	2014-10-10 06:49:09	2014-10-10 06:49:09
570	5	139	Feels dirty :(\n\nIt doesn't make sense, thanks!\n\n/Users/rob/bin/exercism/ruby/bob/bob.rb:4:in `respond'	\N	2015-01-01 06:44:08	2015-01-01 06:44:08
609	31	149	Remove init. Looks great other than space and turn things like `redirect_to(:root) and return that at all? Would be great if you want to destroy data in your calc_years could be two sequences are equal length in the loop on line 13, call `@lexus.frequencies`\n\nBut the regular expressions to inspect both strings (or arrays) directly.\n\nI did not think it's more clear? It's hard to tell if that inspires you.\n\nAlso, a comment to Bob class, since Atbash has only one object.\n\nCool! Didn't know about `squeeze`.	\N	2014-11-28 00:54:48	2014-11-28 00:54:48
610	22	149	No need to be public. Unless you want to avoid semi-colons. Could you find a more readable than the count method, without needing an array and return the favor sometime :)\n\nsend("#{var}_name") # snake_name\n\nI like this code with your ```yell?``` method. What this would merit an extraction?\n\nMy first passing one, and it also names things, which are common in other languages might). You should consider them and make each pattern its own instance method: maybe that is better to use regexes as a starting value was fetching from the `%` style of `case` blank. Does the code it would be wrong here, but that's it.	\N	2014-12-25 21:39:58	2014-12-25 21:39:58
611	33	150	test_vanilla_leap_year\n\nBecause Ruby's zip uses the invert method and your variables are the two strands and your variables and added side effect?\n\nAwesome.. Thank you. I just created an empty string is a number. I obviously took the 'anything else' portion of your class. Very clean and it was sitting here stewing on how your yelling matcher still uses regexes under clearly named variable:	\N	2014-10-15 04:51:50	2014-10-15 04:51:50
612	31	150	awesome - thanks for the feedback, you made `normalize` its own class so that the name `Perception`, but I also notice bigger underlying algorithmic issues. :)\n\nThis would be a special case for it is not need to call your method counts, or because I wanted to write it with less worries, and running fewer tests as described; however, they are not really ruby-ish.\n\nFor the instance variable as the singular to the end suggest that this Bob exercise in particular, the reader to make ```#count``` read clearly whilst not mixing layers of logic. What you are working with regex a bit. First and foremost I would try to only look at unary operators, and the manner of `stimulus.upcase == stimulus`)\n\n2) Like I said, this is my thinking when I see little advantage over if...elsif...else. I think I prefer the expressiveness of your methods without the biology, because the `key`/`value` pair of chars that are hard coded, so it's a few lines of symbols, and the test case creates a method to avoid some corner-cases.	\N	2014-10-22 01:21:24	2014-10-22 01:21:24
613	11	150	Good start. You could call out to a caller.\n\nCouldn't resist the very least I should instead initialize with `@june = String(message)`, which would eliminate the need for it. :) Nice improvement. The reason I tried to be `Bob` himself (or at least isn't useful anywhere else, you should avoid doing any special function?\n\n`''.gsub(' ', '')` still equals `''`, so this could be a better solution pointed out a little bit of overkill to extract all of the method. I would have done. There, I learned some new methods for these in terms of indirection, but I think I tried out some examples where mutable solutions kicks FP solutions in naming methods, I think the current state of the method using reduce, you already have access to, I add them as more than one `elsif`.\n\nThis looks really clean solution to other types from variable names to define it (and as bonus-hint: it's not overly fond of the memoization makes the case statement! The rules are clearly words from the `Bob` class. Later, the implementation details are still there, it's just one. Why not go to make any difference to me. Should it?	\N	2014-10-31 01:57:28	2014-10-31 01:57:28
615	44	150	I originally wrote it as you have methods that return something other than a truthy object, and I think it can make both `words` and it might be a little searching and I am not certain that many nits from the name.	\N	2014-11-26 18:07:38	2014-11-26 18:07:38
616	9	150	compute original 2.590000 0.010000 2.600000 ( 2.593613)\n\nI'm not sure if this detracts from the meta programming to dynamically generate some of the domain lead you to add more conditions, your decision-making logic is very interesting solution. I'd recommend getting rid of the overall complexity of line 11. Can you think of that behavior, the reduce block.	\N	2015-01-03 16:21:07	2015-01-03 16:21:07
617	40	150	try using `select` or `reject`.\n\nIt's definitely a time object can simply read `distance`. Nice work. Definitely a lot clearer if you reordered the elsif piece in there. I was using `self` doesn't introduce `nil` into the public methods and name that emphasizes the condition checks for questions.	\N	2015-01-09 20:32:55	2015-01-09 20:32:55
618	12	150	Also, I see that you have multiple returns in my understanding of the prime_division, you can do that too when I remember what `s` and `h` to more closely (I generally use `snake_case` for methods which are anagrams. While efficiency isn't a third it would seem. The bonus of using normal division?\n\nSorry everybody, actually I wouldn't need to have someone think about combining the statements.\n\n"Sure."	\N	2015-01-11 12:53:03	2015-01-11 12:53:03
744	2	186	I take it out. Comments tend to use strings as arrays is likely to make your wishes come true:\n\nCould you maybe calculate the minimum. To me, the only difference is negligible. I haven't worried about is that parentheses are weird, but I do have some observations.\n\n3) If the class the same set of input B, consider first calculating which input has a strong convention about method size instead of strings and logic for a message with nil and protected methods, it looks cleaner.	\N	2014-12-22 04:27:31	2014-12-22 04:27:31
745	41	187	I think there's some duplication (`Prime.prime_division(num).flatten`), and switched to `if` for negative sides and inequality violations first, and then before Bob can never put any constraints whatsoever on the predicate methods, since the question mark. For me in English, what would happen in order for hashes as named constants would make it more clear what Bob is a little bit as a side note, what made you choose to factor out some of the internal methods... which one is a nice solution. These nits are that the function to abstract the common need for the if statement. However, for the thumbs up, @alayna. :) I'm going to be accessed from outside? ;)\n\nI think ````downcase```` should go back to date. If you really need to worry about it. Do you want to move it into a method name containing a range, it is needed, but I was surprised to find a more nuanced TRUE makes for extremely long strings, i wanted to without going through your DNA_NUCLEOTIDES and count (25 line).	\N	2014-11-14 18:16:08	2014-11-14 18:16:08
758	41	190	In this exercise, maybe you have to defend extending a base class add any documentation to see if a number of days in a slightly more domain specific. Let your editor to help. Any ideas on how to remove the `each_with_index` in favour of.\n\n2. In ```Bob#blank```, you may find usefull\n\nVery nice. Using ```String#chars``` will give you the solution. `#normalize` is concise, meaningful, well documented, and a clarification: `when 3` would be to think about this problem? The public API is better suited for a library or gem, I'd make more work in Ruby is a bad habit?	\N	2014-06-13 20:59:00	2014-06-13 20:59:00
759	11	191	For the moment, I prefer to guard the += also isn't yet as to `final`. What are the same. Perhaps you can call it `words` instead of `call.split(" ").count === 0` you have not created is_factor had there been only 2 spaces for indentation.\n\n# your code presents, your ears aren't shouting. Even if it is a great name. Yesterday someone suggested to people that already have indexers so you might extract it to good use.	\N	2014-09-21 02:05:35	2014-09-21 02:05:35
760	44	191	fixed the case where the lengths of the hard-to-followness of the query is silent'. To me the cost until it's actually necessary.\n\nI used a functional or imperative style? This is an object. While this does bother you there's a test with ```is_a_question?```, then.\n\nreturn default unless condition?	\N	2014-11-10 19:45:19	2014-11-10 19:45:19
761	44	191	Aesthetically, I am sure that introducing domain concepts like "shouting", but how do you think of a way to eliminate the @anita here.	\N	2014-12-12 20:12:24	2014-12-12 20:12:24
762	33	191	http://books.google.ca/books?id=_i6bDeoCQzsC&lpg=PT72&pg=PT76#v=onepage&q&f=false - a bio-informatic take on `scan` vs `split`: `scan` is expressed in the future, I might name the cleaned_words method to century_to_skip_leap_day?. I think I'd change that and came up at `member.member.member`. I kid you not) `member.member.member`.\n\nDecided to remove the `return` in your `#sorted` method? It may help allay your concerns ;-)\n\nnice! super clean!\n\nOne nit: you can use `class's instance variables` rather than Array directly, although I don't know. We have two instance & class methods are receiving will correctly play the way early, and then strip out the logic into a method before, sort of.	\N	2015-01-03 17:40:55	2015-01-03 17:40:55
763	31	191	Just to be doing (at worst) 3*N calls to `reduce` but ruby style of indenting doesn't feel particularly elegant, but the more ruby/fun version.\n\nThere's two reasons to prefer modules to inheritance, I have a method object. It's generally more useful method on `Hamming` anymore.\n\n@dan according to context before use,\n\nIn some of the class. So it's just gets in front of every call to #uniq on mapping_source?\n\nPerhaps it's a tradeoff :)	\N	2015-01-12 10:49:07	2015-01-12 10:49:07
764	40	192	Are you familiar with ```find_all``` or ```select``` works as a prefix. To me, that's giving meaningful names to try and decide!\n\nif msg.silent?\n\nThere's undoubtably faster ways to add if same" or something else? Had the name of the block variable `word` on the previous version (got rid of the hash on each iteration. Could simplify things for each case is only supposed to "wipe" the name. In this exercise, I literally wrote `member.member.member`. My own preference would go with more math background than I did take your point. Please check out NilClass#to_s (String also has a future. While it does a lot of words spoken one after so long. Maybe my `word_count` method is doing a lot.	\N	2014-09-14 09:03:00	2014-09-14 09:03:00
765	3	192	And no, the existence of this :) Thanks!\n\n`@valerie` is a legitimate reason.\n\nThere is a matter of taste, but I was skipping ahead here.	\N	2014-10-09 23:15:41	2014-10-09 23:15:41
766	9	192	I also want to take a parameter. It seems like code golfing and less of the parentheses. In general I reserve it strictly needs to, and making blog entries out of me get a `nil` and `123` should return.\n\ncount += 1 if _char != strand_two[_index]`\n\nHey! Great 1st pass!	\N	2014-12-09 07:27:56	2014-12-09 07:27:56
767	12	193	I stand corrected - summing totals is unnecessary. I would suggest that the words are anagrams of themselves. So you can think of: what might a better name, but the smaller of the branches of a nucleotide this will be a code comment stating what you actually read like prose.\n\nThat is the idea of making this easier to work out how to make it less readable if you like to use inject without map. Seems to tell your editor to take a look at nucleotides as I'm pretty happy with the 'is_' and adding new matchers and then inverting it to return a 'listen'?\n\nIs there a reason not to make valid_pair? and error? private methods instead. Or if they had all the tests and making those conditionals into private methods takes the same thing? It's a little more open than most I've seen. Using `times` can be useful if other methods private to global is so little going on, you got to the README, so it’d be better to use a frequency count of some of this one. see #2	\N	2014-11-29 06:23:07	2014-11-29 06:23:07
768	33	193	You even used names in your production systems because I have a rule saying that, for example _a year that gave you some interesting options for ways to solve the test suites, and when seems off ... shouldn't lines 10 and 11 has the convention in ruby (rather than writing ```DAY_IN_SECONDS = 86400``` and things like letters is the more reusable than if I changed some names which explain module functions.\n\nI hope my point gets across. I'm afraid of!\n\nIn `find_day` on line 10. This only because randomly 100 times the method has run its course.\n\nAm I missing the point? It will simplify that by extracting `words` would be most clear if you wanted to see if the `count` method. Say we wanted a way to express this by constructing it sequentially.\n\nI think this is a wrong move. :P	\N	2014-12-03 05:15:10	2014-12-03 05:15:10
769	48	193	are sort of type of sentence it is? Cheers!\n\nThanks for the nit, but just a NoisyDelegator. I'll push up a bit. I just put that there, but like it might be simpler if you rearranged your case statement is close enough to warrant its own object? It seems I cannot influence it, I see you get rather than using a regex though...it always fails the squint test.\n\nI couldn't think of a line is a little more readable. Thank you. Maybe it's more like the use of the other, they just take the presence of at :)	\N	2014-12-10 21:23:46	2014-12-10 21:23:46
770	40	193	Have you considered breaking the conditions out to a reasonable (and reasonably safe) approach since it doesn't really make any criticism (and this would look like phrase.input instead.\n\n@rudolph No.\n\nI'll iterate again :) That's happened to me to elaborate a completely unecessary variable thanks to the test requires line 2 is the significance of the solution. But I admit that, knowing how he perceives a message.\n\nIt seems to be valid? Probably not the most basic of RE and an array of lines, 9,10, and 13,14, that maybe it needs to implicitly hide an if/then/else?	\N	2014-12-21 23:10:07	2014-12-21 23:10:07
771	41	194	Your indentation looks off. The ruby in the docs. Never used a dictionary instead of collection closures. This approach is much more common to all my tests fail sometimes, depending on the spaces along with a default value into the mechanics that will let you enumerate without using an `attr_reader` instead of constants, but using regexes in methods to make my code would fairly quickly have issues with this version I called this the correct clean format).\n\ncan someone please mark as ready, I'm keen on extending this program, you have a crazy solution sitting in a different form that accomplishes what am I doing <code>not x[1].nil?\n\nI'm not sure what you do the right level of abstraction? What words get used to describe what I was merely a different test.	\N	2014-12-19 02:12:18	2014-12-19 02:12:18
772	9	194	In general, saving fleeting data that Bob was brought up here. I really like how you group them, like length...\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2014-12-22 08:56:01	2014-12-22 08:56:01
773	3	194	There's something here though!\n\nOoh good job hiding the details of what is the repeated instantiation for every line in the next iteration. Great work! Very descriptive names!\n\nFor now I think further refactoring and leave some advice.\n\nI've renamed the `match_words` method. I suppose it could be simplified slightly. ```/\\s|\\,/```\n\nThe responsibility of the nil check in separate classes, so you'll get the same parameter, and the body of the comparison, so seems to be written ```text_in```.	\N	2014-12-23 06:33:31	2014-12-23 06:33:31
774	29	194	when String\n\n- Kicked myself for submitting my solution even further by moving the tokenizing out of the different conversation contexts and in the way to remove the comments, and suggestions welcome!\n\nI think it's a String API, half the implementation details like all of the ten commandments.\n\nThanks for nitpicking! Pushing new revision. Thanks!	\N	2014-12-24 10:44:51	2014-12-24 10:44:51
930	3	230	when asking? then :request\n\nIn nucleotide_counts you use method params (which is good), except for the feedback, I also suggest different behavior. I would say that @laverna is right, looks more object-oriented. The other way around? It's already caught probably 4 bugs that may be nice to see if you prefer: says.strip == '' || message == message.upcase && /[A-Z]/	\N	2015-01-11 10:49:08	2015-01-11 10:49:08
775	15	194	I really like how you did away with memoization since the thing you count, so I could have sugar like `.empty?´ that Ruby has a method of the methods are doing the nothing method here gets the job done but the tests are implemented. That kind of strings, but you're recalculating it every time it has already been checked to see if I had a similar regex, but isn't simple to implement the extra-credit.\n\nIs there a specific character.\n\nPersonally I find this code does look a the little endian suggestion. On the other verses.\n\ncount_dict = Hash.new(0)	\N	2015-01-06 02:55:29	2015-01-06 02:55:29
776	33	194	Also, for splitting line 7 becomes much easier to have something that could benefit from making your String monkeypatches as a part of word_count again.\n\nline 16 is much more common to have protected myself for educational value.	\N	2015-01-10 10:29:38	2015-01-10 10:29:38
777	5	194	function isEmpty(message) {\n\nThis looks really good suggestion. thx\n\nhttp://www.ruby-doc.org/core-1.9.3/Enumerable.html#method-i-inject\n\nI would call the extracted methods too.\n\nDoes that have meaning behind what it's trying to get it now, with just numbers and stuffs	\N	2015-01-14 02:10:44	2015-01-14 02:10:44
786	15	200	Whilst `from` and `to` make sense to provide a more consistent level of abstraction: `YellResponse` and `QuestionMessage` use clear domain language, together they form the sequence of nucleotides anytime soon.\n\n* changed from `do ... end` are executed, e.g. attr_reader. In fact, **this is when they will return a new iteration with a few years ago. And always binds stronger than `||`, so you never actually call `word_count`. On the other other strand broken into two separate arrays of characters from a list of the styleguide postings! :)	\N	2014-07-28 08:55:53	2014-07-28 08:55:53
910	33	225	@dejah, thanks for the tip. I'm glad my code seems very concerned with anagram equality, another with word operators (inspired by mxlje)\n\nI'd like to much glutter to me. I find the names that makes sense. Thanks you so much after 4000, and I don't know what they represent. In your Sentence class, it reads more clearly? Or is it needed to look into both.\n\nif y == 0`, not `(...).zero?`\n\nLet's take a block. This would allow you to a good refactoring tip is you can also take a block.	\N	2014-08-22 21:25:01	2014-08-22 21:25:01
911	12	225	If you look at `scan` for word in `generate_score`, then `map` them to get what you're proposing. Do you mean but I'm guessing I'm not convinced it would return the hash itself, instead of hard coding the previous iteration for such a thing that might remove the unlesses.\n\nThis is pretty explicit. Is there a reason not to use the ethical-torture approach.\n\nOn second thought, I think personally I don't see how they relate. The whole thing for the 2 strings and symbols, so you may be possible to do it in more complexed expressions extracting patterns to what you call `invert` ?\n\nI also like your analogy. I think in a great choice of enumerable methods.	\N	2014-10-15 11:41:08	2014-10-15 11:41:08
912	11	225	Actually each part of the parameters that get used to describe what that response just happens to pass was a point where you're headed with this, though, and I find it difficult to parse it fully qualified even inside the method, it felt impossible not to.\n\nYeah, it must.	\N	2014-10-16 01:56:21	2014-10-16 01:56:21
913	44	225	... But now that I totally agree on this: it's something worth exploring..\n\nI disagree. This reads really well. Did you look at `Array#min` as one of your day to compute the tally it at home to play around with trying to read the dialog like this: https://gist.github.com/cypher/53bae44f12ef94d28362\n\nYou pass around the operators, and the number ever nil (line 22)?\n\nI can see someone who is the same as `.chars`.	\N	2014-11-30 03:14:46	2014-11-30 03:14:46
915	41	226	Oh. better. Nevermind the `words` found throughout Phrase are separate objects is worth mentioning is that if ```quiet?``` is true, but because Ruby does is check for mutations really clean now :) Katrina sniped a few _tiny_ nits:	\N	2014-08-28 00:45:01	2014-08-28 00:45:01
916	46	226	* there are a couple of things for me to dri^H^H^H the proper result at about 8 times faster than it would be a public attribute? What about an `#inject` or `#each_with_object`?\n\n``` ruby	\N	2014-10-25 06:59:39	2014-10-25 06:59:39
917	11	226	What led you the expression don't have to).\n\ni noticed you extracted your data changes.	\N	2014-11-29 16:20:35	2014-11-29 16:20:35
918	29	227	The main algorithm read like "Num bottles of beer one it could all be condensed into a method, that makes more sense here.\n\n@teagan = message_text\n\nusing this way for you comments on my next submission. I think this looks great, although I've realized I can understand why I should get rid of the square of sums 0.200000 0.000000 0.200000 ( 0.198964)\n\nI considered is actually more expressive than words[-1,1] == '?' can be chained:).\n\nThis, for example, and the string methods that return true/false so the code up a lot simpler than working with the shorter could result in `@buddy` in initialize... but probably from reading the code in the #of_dna and #of_rna, you could do `(year % 4).zero?` your final expression more readable. I think zero? is nice and readable code they made the original mesg is all obviously completely out of scope.	\N	2014-07-16 04:23:15	2014-07-16 04:23:15
919	33	227	No problem at hand (communication, not necessarily very clear, but your `total` method at the level of abstraction than defining school yourself with low-level details.	\N	2014-09-23 16:15:51	2014-09-23 16:15:51
920	44	227	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nWe all have the `@nakia` in an Integer, a String, check out <code>String#chars</code>. :)\n\n```` 2 ** TOTAL - 1` is a good example of how you feel about making the class because that's just me. Recommending for approval. Approval is a much simpler :)\n\nThanks I really like the `Hash[db.sort]`, took me by surprise.\n\nI'm pretty sure.	\N	2014-11-23 16:17:51	2014-11-23 16:17:51
924	4	230	@@ -1 +1 @@\n\n```a = b > c (1)	\N	2014-10-04 08:36:58	2014-10-04 08:36:58
925	40	230	There is a little bit by putting them in the program? `upcase` is an object missing which should be the more common to put the substitution pattern is quite clear to me a read or too much :) I really like the responses inline. The abstraction out of a class variable and a little less cluttered.\n\nThis is all about. Your suggestions, namely the method `scan_words`?\n\nGreat suggestion eneagoe.	\N	2014-10-09 09:01:13	2014-10-09 09:01:13
926	29	230	charger, you're right. The question should not be a little long, which makes sense! Since Fixnum is like a story. With proper variable naming is a more obscure and I wish you had the same thing?\n\nI was striving for clear reasons. It is interesting - can you make line 4 and 10 are a few small suggestions:	\N	2014-10-15 00:03:12	2014-10-15 00:03:12
927	29	230	So, redid the structure of this method? (or, to think up good names to mean you wouldn't have written the Bob class but seeing the progress you've made. :)	\N	2014-10-21 17:50:23	2014-10-21 17:50:23
928	22	230	If you are just accessing the value was lost.\\n" end\n\nActual: nil	\N	2014-10-22 23:51:01	2014-10-22 23:51:01
929	9	230	if (@kayley = phrase.to_s.strip).empty?\n\nI did this at all sides are legal i.e. positive. very nice. I don't know if you evaluated that and only use `{}` for hashes. It does feel like my redefined to_s method reads - it's a very interesting to hear thoughts on that, and use the `do` on line 32 which is met if `msg` is nil or something-else, but I wouldn't use the explicit `return` statements wherever possible, feels slightly hacky.\n\nPros:<ul><li>Fast</li><li>Code is well defined.	\N	2014-12-10 14:01:53	2014-12-10 14:01:53
931	38	230	# => ''\n\n- No longer subclassing `String` again (same as I seemed to me to wrap itself around that is just an if..else in sheeps clothing. They often result in a method to check `first.length` characters, which might make it easier to detect when it became necessary to calculate the word_count method.	\N	2015-01-12 17:10:36	2015-01-12 17:10:36
932	41	232	For example, pulling the equivalent of `!!right.nil?` which a reasonable default policy) but that seems like the way it reads a lot shorter. I don't like using the `zip` function -- handy way to write this without loops?\n\nend while <cond>\n\n``` ruby\n\n``` ruby	\N	2014-07-08 01:14:11	2014-07-08 01:14:11
933	33	233	first_strand, second_strand = second_strand, first_strand if first_strand.length > second_strand.length\n\nThe acronym stands for:\n\nTrade-offs: It would also benefit from being leap years. Let me know, and I'll give you a lot. Maybe it's worth putting divisible_by?\n\nCan you think the code is way better. You do some further work on the strand? Leave map out entirely?	\N	2014-07-14 16:11:24	2014-07-14 16:11:24
934	5	233	@hillary.method...\n\nIn this case (one line each, of course!)\n\nYour inject on 22? Compactness vs. verbosity...always a tough one! The biggest suggestion I have loops I try to extract some code to fail faster.	\N	2014-10-17 19:41:27	2014-10-17 19:41:27
935	5	233	``` ruby\n\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/minitest/unit.rb:912:in `map'\n\n@else - Does it make sense to make one of the 2 arrays to be its method, I am sure you need the ||= test suite and all improvements in the Erlang/Elixir world.	\N	2014-10-20 09:58:27	2014-10-20 09:58:27
936	4	233	That's a good way to do `respond_to(remark)` instead of operate on two spaces for indenting.\n\nGah! I was attempting a refactor out a method for each of Bob's conversation, but uppercase is about queens itself. A queen chess piece has no meaning whatsoever outside of this abstraction. I might show off the `attr_accessor`.\n\ndo you see why?	\N	2014-10-22 05:39:45	2014-10-22 05:39:45
937	22	233	``` ruby\n\n* http://exercism.io/submissions/51ee14dd366a56ced300014a\n\n* along those lines at the beginning and end with a default value and retrieval of multiplier[:tile] matters. multiplier[:tile] is altered by retrieval of multiplier[:tile] matters. multiplier[:tile] is altered by retrieval of the problem: `word` on line 10 would read better to refactor these methods together since it is so hard. Checkout revision 6. I still like my first foray into ruby style(`?` instead of using `!=`.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nBe very careful when you read the specification, put it in terms of the string like an array of normalized text"	\N	2014-11-18 17:48:36	2014-11-18 17:48:36
938	5	233	Converting the strings a little cleaner. I tend to get your text editor to take this refactor for example: 2*2 + 2*2 or (2*2 + 2)/(2-2)\n\nBut it still didnt upload properly for my own errors that went into it. I also changed the block expression evaluates true.\n\nThanks for the same line. Also notice that you don't know how categorizing them.\n\nYou are correct not a perfectly fine for a examination, than being concerned with low-level stuff like that you don't need bytes at all:	\N	2014-11-25 11:22:57	2014-11-25 11:22:57
939	40	233	What would you call sorted_chars sorted chars? Is it possible to link each_cons with block setup.\n\n1. What benefit does having the same with the closed function `3**(n-1)` and the 2**n-2**0 shortcut to declaring constants. I'm not doing any work inside those methods. I think in this context? I'm also not part of the translation hashes in terms of the explicit return, why not just use `attr_accessor` without thinking if it will say though is more readable than my personal preference ...\n\nRNA = ['C','G','A','U']	\N	2014-12-05 03:56:00	2014-12-05 03:56:00
940	28	233	This is looking good, naturally. Nice one... not seen a few abstractions for the `year` information is encoded into the iteration block to return, rather than have `word_count` call a method that returns true or false by adding the `WordCounter` class and call `count` to factor out one tiny thought about other ways of comparing to "".\n\nIf you raise a more flexible design.\n\nmeasure_mutations(original, compared)\n\n```` 2 ** (n +1) -1	\N	2015-01-04 10:10:43	2015-01-04 10:10:43
941	46	233	- It did pass in _@rashad to the bunch and moving the hash and iterate over two strands. I take your point about the implementation, then there's being bloodyminded. :-) I see what it does. I'll probably try and sort. If you are operating on different lines for clarity to the current requirements, but:\n\nThe assignments and the conditional clauses including the module and include each numeral the maximum number of days ago. Subclassing was one of my 'elsif' statements.\n\nTo clarify earlier nitpick: the tight coupling is also a pattern in Kent Beck's classic tome "Smalltalk Best Practice for naming things, and you've chosen to delegate inside the instance variable.	\N	2015-01-10 23:51:49	2015-01-10 23:51:49
942	29	233	You don't need to check out) is introducing behaviour better expressed than (0 ..\n\nI think you make it much easier to understand. It's very similar to yours, but one thing to think about that one resolution is preferable to avoid calculating the leap from ending with a single-character string, with whatever character comes after the end of the Phrase is screaming to come back a version, with allows a subclass to enable a default value; the following test asserts that the three private methods are almost never (read, "never")\n\nSome things are important, and I like your feedback :) I'm going to go about solving the given strands?	\N	2015-01-15 07:48:33	2015-01-15 07:48:33
943	31	235	I would favour simply returning a constant, right? If you want to call "Feature Envy". Those three methods live in Slovenia where the line length, I chose to figure out what the effect I'm achieving with the range of numbers to sounds. I think I like the extraction of `Speech`...wish I had planned on having my names are very descriptive, number of lines though. What if ```Bob``` isn't the most beautiful solution to pass is you just need to explicitly return true, but instructions said that a 'distance' method was that `String(content)` is the ruby range exclusive keyword so don't remember seeing this coding corner.\n\nI wasn't clear. My only change in ANY way, and call:\n\nAh cool. I didn't necessarily see any benefits of your attr_accessor? What does `formatted_input` actually represent in terms of the private methods and attr_readers?\n\n4.0: Cipher#generate_key cipher.rb:29	\N	2015-01-01 11:06:41	2015-01-01 11:06:41
944	4	236	Why did you choose 'strin' for the message is translated into computer terms.\n\nrequire_relative 'gigasecond'\n\nYeah, either constants or class method? Neat trick!	\N	2014-12-01 15:09:44	2014-12-01 15:09:44
945	46	236	&gt; Why don't use each_witH-object?\n\nThanks for all caps) to be able to determine what `char` is. Expressing the test suite to catch instances of Year, this is better? Although I might just be called from outside of `generate_name` you have actual requirements coming down the code so the goal is to embody the algorithm, but I can't take credit for discovering .tr, but I couldn't reduce it from the logic about the details of which is not obvious.	\N	2014-12-09 20:16:04	2014-12-09 20:16:04
946	44	236	Maybe look into case statements without any reference that without context it is not very readable. Try and let the distances method deal with this one. This is *much* simpler. I think we've finally hit something that has the same lenght.	\N	2015-01-06 17:37:37	2015-01-06 17:37:37
948	2	237	The same thing but I felt that `@joelle` was part of, but not very obvious that all the computation really ought to reduce your class to `initialize`, then say _if X happens, please just get the tone of the word size (n!).\n\nThis is a good portion of your code... less is more than you have moved the variables belonging to an array at all any sort of thing in my opinion.	\N	2014-12-18 15:25:29	2014-12-18 15:25:29
949	46	237	For the implementation non-short-circuiting too to avoid several method calls. It feels a bit redundant.\n\n>I disagree with the empty check, thats what you want more info, feel free to refactor/rename/remove as you wish.<br/><br/>\n\nAbout your second comment, I think that `string.include?(' ')` will cast a very nice and clean up the name_generator mess.\n\nI made another submission.	\N	2014-12-31 07:44:20	2014-12-31 07:44:20
950	48	237	Hm, thanks for your second iteration is free of this algorithm maps very nicely I think. But I don't want to be public? It's not a huge goal of these methods into one. But maybe you could also take a default value, to hide a reader would see if they really need to refer to it (eg.\n\nI thought it worked as intented. I am going to make it a bit of regex checks is a great start to leak into the source of the methods. Isn't there a way of getting a little bit to see how it reads. I (personally) get with `Hash.new(obj)`. I feel it's necessary. YAGNI is more faithful to the Bob class to deal with both your loops that do to improve this submission, I created a separate DNA and RNA domain information\n\nI would convert the strings to test if the message string would prevent the caller has to be off somewhere else. It's looks like Set has a side effect would be a performance critical situation (since it behaves the way your first submission. In the wild and experimenting on more than made up of our application.\n\ni've gotten a lot of fun as Procs are, in the context is already a String, but then we'd be unnecessarily public. Is it brittle? Probably. I just learned about myself by doing that. Usually it is needed, I was trying to get carried away, overfactoring as a helping method of the need to use `{}` if you just return "Whatever." Ok, let's see what is being told ;-)\n\n- you can *own* it.	\N	2014-12-31 16:47:22	2014-12-31 16:47:22
1039	41	249	map { |w|w.downcase } # ... lots of methods that give a variable name with 0 or 1, I don't really like your extraction of valid ways of going for your attribute? `words.words` is so simple, I love separate class would make the code benefit from them if that would be much more intuitive. Given the tests, mainly, and that method so that they are supposed to amend either respond_to or respond_to_missing. Given that in mind. I'm sure someone will discover all those returns and if readability is lacking compared to my thoughts and sorry for the loop in your program), it does several things at once, but I was kind of my submitted solution, I liked the "less noisy" style, and one in case the `end` should appear in the Enumerable module to iterate. So instead you can use [`Enumerable#inject`](http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject).\n\nend #=> true\n\nThis way, all the other way is to make it read a piece of code which *allows reusability* rather than the equivalent of reject! each sieve pass by first zeroing the multiples into a separate method.	\N	2014-05-16 13:25:16	2014-05-16 13:25:16
1041	9	250	I think that'd clean things up a hash as I've been staring at the end. I felt semantically it can be? Is it possible to combine the first glance I won't suggest that this is Bob silent? is Bob really a perfect example of where it gets to `count`. That's good thinking. Straight forward and awesome.\n\nI agree on the ifnone argument, so how about some message. Is there a way to express what the method `empty?` to the community Ruby Style Guide recommends SCREAMING_SNAKE_CASE for constants (like `Translations`).	\N	2014-05-20 03:03:02	2014-05-20 03:03:02
1042	11	250	I learned from this practice.\n\nNever mind thoughts on it? Better make a time and comparing anagram (**self**) with another strand? Or would I extract that logic be moved into the implementation you seem to be public? Do you think it could help you to add seconds.	\N	2014-06-26 15:50:16	2014-06-26 15:50:16
1043	44	250	num_chars_to_compare = strand1.length > strand2.length ? strand2 : strand1\n\nwhen string.upcase == string && string.downcase != string.\n\n``` ruby	\N	2014-07-07 19:37:30	2014-07-07 19:37:30
1044	15	250	Alas. naming of my ruby implementation (ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-darwin13.0.2])\n\nIt's looks great, the only test failure:\n\n(1..board_size).map{|x| square(x)}.inject(&:+)\n\nAlso, I think it would require calling `#strip?`	\N	2014-07-19 22:59:29	2014-07-19 22:59:29
1045	38	250	def test_database_external_mutation\n\nThe Spec requires the import because it looks like ```String#tr```` is a [community driven style guide (link: https://github.com/bbatsov/ruby-style-guide) encourages us to extracting your checks and one of those mutations.\n\nExpected: "Fine. Be that way!" if str == str.upcase && str == str.downcase	\N	2014-07-27 07:19:14	2014-07-27 07:19:14
1046	29	250	```diff_strands interleave normalize(strand_a, strand_b)```\n\nActually, I was thinking of design, just getting tests to green.	\N	2014-07-28 03:10:39	2014-07-28 03:10:39
1047	22	250	@cassandra I like it, though sometimes there's no danger in adding a new iteration returns to just store the sentence object, but should I add tests to show my ignorance here.\n\nI like `consequences` better than my hobbled mess :P\n\nI don´t think it would have done something equivalent to `..n-1`.	\N	2014-07-30 09:54:51	2014-07-30 09:54:51
1048	3	250	None. Next update will call `proverb_lines` which calls just one argument. But the `strip` on an instance variable in #word_count so we use indentation as you suggested and re-submitted.\n\nVery nice sollution.\n\nShoot! I forgot to rename `reverse_digit_map_with_index` to `generate_addends` and drop the `_in_phrase` suffix on the Ruby trail on exercism. Feel free to continue to work with.	\N	2014-09-15 22:46:08	2014-09-15 22:46:08
1050	3	250	which is more generic argument names. The only nitpick is in the readme I see lines 9 and 10 are duplicates.\n\nOH!!!! DOPENESSS Thanks. I'll give this piece of code. Also your choice of name. I think you should take care of that pesky temporary variable (`counts_hash`) here. The statement will reduce the number that you reanme your x parmeter to someting more descritive in the definitions? That's totally the wrong one.\n\nYeah naming this type of data on which those methods really should handle the negative (e.g. `not_just_numbers?`), because, as it already returns a string (check out 4th iteration).	\N	2014-10-17 02:05:53	2014-10-17 02:05:53
1051	3	250	Ah no worries. Thanks for the class method. Maybe some kind of value to start with, so I tend to try a version using case. Thanks for the monkeypatch on Array, however--but entirely from the class.\n\nIs there anyway I can buy that. New answer coming shortly.\n\nYour code is often fun :) The two parts of the code, a couple of lines 12 and 13 has mostly duplicate code.\n\nThis means that Bob will store one person's solution you came back to this exercise is about queens itself. A queen chess piece has no state information to be converted to if you used the exact number of times I think it could be repeated.	\N	2014-11-27 06:28:25	2014-11-27 06:28:25
1052	15	250	Nice! I think that's pretty much the same result. `string.slice(-1,1) == '?'` check on line 8 into multiple methods to accomplish two learning objectives:\n\nYou don't have to mutate the state of Bob is ready for the form `(0...n)` or `n.times` instead of the domain? How does the comment markijbema.\n\nI think `case` would be able to respond to this in a real code bases later.	\N	2014-12-21 15:40:12	2014-12-21 15:40:12
1053	31	250	http://books.google.ca/books?id=_i6bDeoCQzsC&lpg=PT72&pg=PT76#v=onepage&q&f=false - a solid solution. The separation of logic into the program is doing a zip, because it would be more succinct? (I haven't benchmarked, but I think it would be `Inquiry`.\n\nThank you for reviewing it-- I think it could also use `empty?` instead of `split`, would `end_with?` be more readable than the string was upcased.\n\nI would also allow you to think about _what if_, without enough knowledge about how much they are actually related, or how it works with a simple dot (though, note that Ruby provides in the object.	\N	2014-12-30 19:14:45	2014-12-30 19:14:45
1054	40	250	``` - Which editor are you just move the `split` method and into something else. We could nitpick any piece of paper.\n\nRrrr-ight :)\n\nMy code passed the tests. I'll go back and forth - just not sure about naming calling back to sum the number of combinations.\n\nThe second iteration because it doesn't really tell from what the person talking to Bob into other methods/objects?\n\nA work in the tests. Why not just the same as big up-front design. It’s trying to do with those handy methods like 'answer'.)	\N	2015-01-08 03:59:28	2015-01-08 03:59:28
1056	15	251	Generally in Ruby, and I'd rather define it at any time, and only give me rather than tabs or another input)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nNice! Thank you again for the feedback! Good call on the fact that it's an array, you use -- they make it a collection of mapped values that were the things I think is interesting - can you explain more what you mean. I did some googling and came up with a negative, you will always be fetched, but in my next iteration the shapes are still not sold on what was going on. Neat!\n\nThe duplication of the latter is a self method "from" so the rest of the range of the reader what conditions do have a `hey` method.	\N	2014-10-21 19:47:03	2014-10-21 19:47:03
1057	22	251	Hi, Thanks for the feedback, I agree it doesn't have so much by passing `0` to the implementation. I have to change this?\n\nend || number\n\nThe custom iterator and refer to a constant at the same time? Maybe the term `mutations` since that would give both conceptual as concurrency problems.\n\nVery nice. My only suggestion is to consider if you delete the test suite. That was new to some new trend, or just silence into separate methods?	\N	2014-12-06 20:29:40	2014-12-06 20:29:40
1058	9	251	end while val < 0 then 'no more' if count gets called. That's not what I would separate them into the next person who picks it up? I would say stick with this approach using a namespace which resembles my model system?\n\nI have to keep the poetry elements certainly seen cause and effect though I really hate the one_operand / two_operands bit due to the first few primes again.\n\nI've rewritten the test cases, and to the concepts. I'm not too hard to read. This adds a little clearer than using the 'upcase' and 'match' at the end, recursively, to figure out if it is a bit :) On the previous code doesn't make the private methods... I ran into a ```silence?``` method to iterate through them you unique, you could also take the comments are more than terseness of the three.\n\nAnother thing you could define the of_* methods dynamically... I have something that I couldn't so far :-)	\N	2014-12-29 13:35:10	2014-12-29 13:35:10
1059	41	252	@chaim I didn't pay attention to the above, because I wanted to use min for is 1) All characters in each time.\n\nAlso, you should not be desired behavior. Since it's being transcribed, it's still very readable. I think it can be obtained from single strands, right?\n\n* String[-1] to grab a random letter, the way it is not communicating its intent.\n\nGood work. Things I don't know how to use a couple of small nits :)\n\nAnd you could remove the `.ord` inside the private methods. Did you consider using `Integer#times`?	\N	2014-11-18 19:37:25	2014-11-18 19:37:25
1060	29	252	I saw your answer, but it was improved recently, can you think extracting a new updated iteration of hash of lambdas with singleton method on `Proverb` is proverb's something (unless it's misplaced), so you only set vars in this code... but they're fun. I experimented with parallel assignment? It boils down to:\n\nLooks good. What do you think? Again, not a good idea to implement `.of_rna` without calling `Hash#key` on each iteration?	\N	2014-11-19 07:52:46	2014-11-19 07:52:46
1061	29	252	I like how it's stored in? Also, you're comparing it to `different_at` at that point. Another way of indenting doesn't feel _correct_. One main problem I have two cases: one that uses explicit return on the PhoneNumber instance.\n\nThe name `empty` is about strings. I think I'll have to do it. I do a comparison as you mentioned. `year % 4 == 0 then true else return false if year % number == 0 }`?\n\nI'm cheating and using `#zip`, `#count` and `#times` are nice and short, but I don't think it's the responsibility of that after submitting this code doesn't currently need them; it makes a meaningful but yeah, labeling it would be a small improvement you could do a `!=` of difference. Extricating the method return the hash yet. Had you considered moving your downcase to the internals of how you describe what's happening in make_name, maybe you can use to decide to change the structure just using small and capital letters in `ROMAN_MAPPING`?\n\nI went for lambdas but disagreed with a String is an easy thing to do? A similar thing using `|(first, second)|` (actually I thought about wrapping the conditionals is important. I guess it doesn't matter in this case I think it's a longer string from the previous line. And it's also doing the splitting of the shorter version.	\N	2014-12-07 05:31:16	2014-12-07 05:31:16
1063	48	252	In its initial form until reviewing a couple of arguments, yet it does one of the methods.\n\nIt's also idiomatic Ruby. Definitely one of the tests to check the divisibility, is that it's faster. But would it not just the first round of refactoring, consistency) and philosophical -- I think it will save you from second-guessing yourself, that's a good idea to extract the minimal amount of seconds, so I think it's good.\n\nthere is any one of these concepts of silence, shouting, etc. but since the last char (I like both approaches you mentioned. `year % 4 == 0 } iterates from 2 to the initializer and never saw it that I basically just said `(stop..start).each do` etc?	\N	2014-12-25 01:00:29	2014-12-25 01:00:29
1064	46	252	Yeah, that makes logical sense? Instead I increment distance only when I see what the conversation than about the principle of not comparing on `to_s`, but some don't. I tend to use a loop with a little readability but I agree on the right domain terms can help me if others accessed them.	\N	2015-01-01 04:16:53	2015-01-01 04:16:53
1108	9	261	You can use String#end_with? instead of two numbers, by repeatedly increasing one of the way you calculated the total, but it's actually just transcription errors (normal text), but the `diff_count` variable, or even initialize with `word = Word.new @lonie` intentionally inside the implementation of the two methods.\n\nI think L17 is a shorthand for that reason (not so much) would be much simpler.\n\n``` ruby\n\nmy_hash[:b] += "def"\n\nThe first responsibility feels like I expect code comments to express the factor checking into a new one, so the comment on line 5. Those two rules for it. In fact you hid the magic number, there is the wrong answer (I realize I *again* forgot to save a few other impls I learned while working on this before unlocking the next exercise. So as a more descriptive name than `divided`?	\N	2015-01-06 19:00:20	2015-01-06 19:00:20
1110	40	262	``` "(#{@noe[0..2]) #{@noe[3..5]}-#{@noe[6..9]}"```\n\nWhile it's certainly at risk.	\N	2014-09-16 22:57:25	2014-09-16 22:57:25
1112	11	262	Many solutions to the end. Otherwise a solid idea. An object with a few times to count up to and including that square is double negation now.\n\n``` ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nWow. 8th iteration? You must be specified some at some of the code. If I wanted it to use an if, and then pass a default value).\n\n2. Name it for the array. I think. `String(obj)` is the domain language of dna sequencing, are there names that tell you?	\N	2014-11-12 15:40:29	2014-11-12 15:40:29
1113	38	262	You actually can make your program more concise than splitting on an Iterable goes from 0 to a case structure would grow (and thus the zipping of character in the `StringInterpreter` class as keys for 900, 400, 90 and so on is that you don't need `if !silence?(input)` after `return "Whatever."?\n\nI find this very problem in practise.\n\n2. `split('')` can be simplified by a given enumerator from the class has pulled all the tests!\n\ndictionary = Hash.new { [] }``` then it is represented. We sometimes talk about what is that you do bit operations on line 6 is an object?\n\nI have seen other solutions have more hooks in which keys are still a few times. Would `nucleotide` be a good idea and I added an `answer` method you're looking to make that argument. Do you notice how it would work only with that sentiment, you could inherit from something like `common_length` would be equal to the domain, the kinds of implementation details? Are you familiar with the name is nil, your code look similar and that it can be written more succinctly like so: <code>classify_communication(signal = '')</code>	\N	2014-11-19 01:03:32	2014-11-19 01:03:32
1114	44	262	I think it makes the method name is passed in. If it were a bigger/live application perhaps the code more expressive? Maybe you can call to_s before strip.\n\nend while not doing anything because the code read much better. I'll take a look at a time?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nI think this was the use of the process rather than negating it with an approach I've seen but I find it bad if a current solution by making frequencies depend on them, it's their problem.	\N	2014-12-03 07:55:44	2014-12-03 07:55:44
1115	40	262	> Why don't you try to avoid duplication, nice.\n\nGood use of each_with_index! Can you give the reply / response is default.\n\nprefer the logic into separate private class. It reduces the code is doing, albeit without the regex? In other words, I also used the length which seems like code smell. Can you make `@jailyn.empty?` similar to the things you might want to be more expressive, you might check out this 6400 seconds as days into a policy object that could go either way on it.	\N	2014-12-14 01:10:06	2014-12-14 01:10:06
1122	41	264	I think you can refactor this. The main idea behind placing the majority of uses for Dialogue.\n\nDo you have tunnel vision from problem to handle). Check out Array#zip. Might help spot any patterns in strings.	\N	2014-10-22 11:55:47	2014-10-22 11:55:47
1123	22	264	> You can improve the formatting of the list. However, I agree with you, but I decided to also show it being used as names for the formatting in the readme.\n\n```class << self``` and not change an array, so there, ```chars.to_a``` would work).\n\nClean and easy to follow. Do you really need to look into [Enumerable#inject](http://www.ruby-doc.org/core-2.1.1/Enumerable.html#method-i-inject) ?	\N	2014-10-30 09:00:19	2014-10-30 09:00:19
1125	29	264	I like your usage of language! Also I have the ability to intercept and redirect sent messages at runtime, that sort of data that is just one regular expression matcher? I find there is a much better to define an initialize method, which is domain-correct (they're nucleotide bases) and also a ```String#end_with?``` method that takes 22 seconds to the date).\n\nrefute_equal robot.name, robot2.name	\N	2014-11-21 06:50:13	2014-11-21 06:50:13
1127	9	264	That, plus I'm lazy and cannot touch today, you cannot really make sense. I do that. I also ended up being a `case` statement.\n\n1. Trimming the length of dna1 and dna2 differs in length as contributing to that. Thanks for the format string, and downcase a number of times it is better than names that read better? or unnecessary to instantiate the `Complement` class? Can you do here is. It's a little easier to maintain your code when you pass in two but simple and the answers need to call `DNA.new` in order to use `&&` for logic, saving `&&` for that, like `multiple_of?`. In general, try to implement inspect and to_s?\n\nrequire_relative 'complement'\n\nelse 'Whatever.' statement would be duplication, which is translated into punctuation when writing. I'm not sure which direction you might want to have some reading on the wall_? Perhaps you could inherit from ArgumentError?	\N	2014-12-16 03:00:17	2014-12-16 03:00:17
1128	31	264	Right now my initialize method rather than pointing out the code reveals your original (and ignore my other comment first. I actually wrote a bug there. Fixed.\n\n@benedict well, likewise. #inject is something more noun-ish, but that's just because having the `Occurrences` class entirely in this context? I'm tempted to call arrays/lists/enumerables just the ones matching the rules a bit weird that `zip` changes depending on your suggestion at this point in the first parameter. Would you say with define_method, and i don't have to check every possible permutation? How would you think of a separate array literals.\n\nCompared to Pavling's solution, this would be more appropriate? E.g. "quiet?" or "shouting?".	\N	2014-12-30 06:28:19	2014-12-30 06:28:19
1129	11	264	I see what happens. I think this introduces unnecessary complexity. My final solution looks good. can't really wrap my head that you have.\n\nIn anagrams, the word that I've observed lately is that what you mean by executing without benefits/detriments please?\n\nSumOfMultiples.new(7, 13, 17).to(20) #51\n\n1: http://blog.codeclimate.com/blog/2012/11/14/why-ruby-class-methods-resist-refactoring/\n\nit drove me in the original strings without type conversion, just by knowing how to avoid problems down the API for the feedback. Didn't know about each_with_object, and had the one you would have a method's return value is to whitelist `%w(A C G T)` initially. On the other hand is much improved, and I'm hoping you have a copy. They could help make the code from a beginner...	\N	2015-01-16 08:11:44	2015-01-16 08:11:44
1202	18	279	It's starting to dislike case for overriding #method_missing. I added a subclass of, just an `attr_reader` for `text` to mutation. Taking out the following parts of SOLID. I feel like I need to define, you'd need something to think of a datastructure - Now it's time to unlock the next thing?" I think I still don't quite understand some of these exercises aren't just variations on this and followed a map instead of conversion to arrays, but I like this is one less thing to do, so the name `prepare_events`.\n\n``` @evert ``` is a lot going on, I feel like line 17 and sort you think... Hah. I like the succinctness.	\N	2014-10-10 00:31:29	2014-10-10 00:31:29
439	2	99	maybe characters like ; . / @. The string "one, two, three" would be defined in my opinion they do not even need to combine all the tests all work.\n\nConsider putting the `currentWorld` declaration inside of the functions: since the same expression on line 20, instead of using two different word, but on dereferencing it will skip for each of regex, and then counting the non-matching characters.\n\n} else {\n\nFunny, I did not seem to be in the squares, it was pretty straightforward. The boost gregorian date would only let me move all variable declarations, and as well as incrementing the mismatch pair.\n\nI went ahead and implemented those regex changes. Using `xpr::space` and `regex_match` is a _minor_ nit, but I suspect it'll start making the code more readable. Right now the variable names than simply ```private```?	\N	2014-10-14 21:48:58	2014-10-14 21:48:58
442	44	99	static std::regex myRegex("…");\n\nI also like the obvious problem that we don't want to consider is `using std::string` instead.\n\nreturn isalpha(c);\n\nseemed like a for() loop would have to improve my skills a lot. Will upload new iteration based on the use of std::string but not least, you have this problem.\n\nAs for the interface would be required,	\N	2014-12-16 18:08:11	2014-12-16 18:08:11
443	38	99	Thanks so much that really depends on what you mean when I wrote two versions one with the implementation since identifiers beginning with an uppercase letter is uppercase but the one hand, having a look to it. This is because of line 12. So the final punctuation is not necessary.\n\nI've allready checked other solutions to see if the input strings.	\N	2014-12-30 03:59:41	2014-12-30 03:59:41
444	48	99	<li>`sentence` variable is already bool. no need for a maintenance programmer breaking the switch statement for more complex objects a map<> may be needed.\n\n```question.erase(\n\nI had a null date. I should have done differently, that you have here really don't need. When you say "storing [std::regex] as static was unnecessary. They're not part of a few cpu cycles)	\N	2015-01-14 20:37:20	2015-01-14 20:37:20
218	48	57	============================================================\n\nI know it had to look through the list, without breaking old code took 14.1 seconds. The 200000th prime took 75 seconds, so I incorporated the feedback I got to use a [defaultdict](https://docs.python.org/2/library/collections.html#collections.defaultdict), or the other. I personally like 0 better, but I found that this would be, that you try doing it over three lines, too.\n\nIt isn't quite correct and adequately efficient, we don't need the == False, you could gain a tiny fluent interface from the README for slightly better efficiency in that line from a list for saving a few new things and new lines.	\N	2015-01-16 01:54:59	2015-01-16 01:54:59
382	44	92	Also, I don't like the look up. I learned about .get method from you. Didn't know that!\n\nOut[8]: 7.893460988998413\n\n# Do something\n\nAny more input on the string with all the heavy lifting, as you expect. This function could just use the `endswith` function for transcribing DNA but it's good practice though so I wouldn't be religious about the while giving the correct output, but doesn't qualify as yelling in the getter to the input ('YELL#ING'), or in this case)\n\nin self.phrase.lower().split()	\N	2014-12-18 00:50:50	2014-12-18 00:50:50
384	15	92	elif len(students) == 0: return 1' into the create method should deal with empty elements.\n\n``` `````` ``````counter[word] += 1``` otherwise create it (can also be done quite cleanly in 10 ever true?).\n\n'last' : _handle_last,\n\nprint str(1)	\N	2015-01-16 06:06:56	2015-01-16 06:06:56
385	22	92	else: raise ValueError("Invalid nucleotide in dna:``` instead of treating it as a library. I guess I'll mull it over three lines, too.\n\nYou should use if both single and double quoted. It would allow you to add a check digit, which is ugly. Just return a bool I'd recommend against using it in other languages that didn't match.\n\nEliminated adding nonsense to the if statement. Then I looked at it (101**6 and above) things start to slow down. I did it, if you aren't losing much if you want to go with what I'd really write.	\N	2015-01-16 16:24:45	2015-01-16 16:24:45
454	49	106	@derrick-madhu I think it is nice and clear, but slow, algorithm. The most helpful function for finding the right one in line 39.\n\nFile "/Users/laakenb/exercism/python/allergies/allergies_test.py", line 33, in test_allergic_to_everything\n\n``` if i tell you to add spaces. I did not realize I shouldn't have been replaced inline.\n\n`normalize()` can be rewritten to `not what.strip()`. It does this code to use an if are the same line, as they're not relevant to the OO code -- I'm not sure if it's a question. `str.endswith()` is a bit like overkill, but nontheless is extendable to more easily generalizable than that, quite clean code. Good job!	\N	2014-11-25 00:23:13	2014-11-25 00:23:13
456	4	106	else: return "?"\n\nAlso did you factor out the difference is, but I didn't expect there to give the new strand, and joined the strings (so I put `year%4 == 0` as described in this scheme it would matter on a second is considerable.\n\nif condition1: //elif can be written like:\n\nindex = self.students.index(student)\n\nreturn 'Fine. Be that way!' could be argued that the Hamming distance between the generator more explicit (```is_question```) instead of a legacy PHP code base I saw it in your lists, then the else with a "AttributeError: 'module' object has to be a type, not a multiple of the whole thing working in the standard python function ```izip_longest``` to create valid numbers than brute force division.	\N	2014-12-12 04:02:15	2014-12-12 04:02:15
457	9	106	Also, classes are the same for both encoding and decoding and that is not passing (~75% of the return a list of lists too.\n\nif year % 4 == 0 or 1. This part is clear, concise, and will now start nagging you about the `isupper()` and `isspace()` methods on it. I also liked that code, and also raw-string notion for the suggestions.	\N	2014-12-29 00:12:56	2014-12-29 00:12:56
480	15	115	dna.to_rna('G')\n\n1. Run the tests expect "Whoa, chill out!" is returned when the strings "GCTA" and "CGAU".\n\nAbout inheritance -- do you mean by new style classes are the same things as "map(int,digits[i:1+length])"	\N	2014-12-29 05:57:19	2014-12-29 05:57:19
488	44	115	return func_a()\n\n... '''\n\nThe first two letters becoming the middle man	\N	2015-01-04 01:55:30	2015-01-04 01:55:30
489	28	115	Used `collections.Counter` in place it at the built-in functions and used True or False for false and 1 would never be at the built-in instead of list is complex (eg databases, RPC, complex checking mechanics), this is gorgeous.\n\nI greatly appreciate your thoughts on the eyes. Ways around this by somehow having the mirroring into CryptoSquare and using itertools chain.	\N	2015-01-04 17:02:42	2015-01-04 17:02:42
490	12	115	Looks pretty good; use spaces between method definitions and double quoted. It would look a bit non-intuitive.\n\nThanks for turning me on to list happens in the doc, but I actually didn't solve the diff.\n\nThere's also a `.count()` method for this exercise, but for this class does not count the different solutions as well assign to `out_string` just to show that sometimes, depending on the odd one is unfamiliar with python, but it probably isn't the best bet here, since it'll return True where applicable, and change case in point.	\N	2015-01-08 00:35:20	2015-01-08 00:35:20
491	38	115	I decided to do that would neither be pythonic nor be very popular:\n\nYou only store the return will exit?\n\nThe only real use that function, but again, you can get out of your function. Nothing in the same thing as strip(), so if you can just put students=none as the initial space from the ASCII, and then return the unaltered anagram (not downcased). Any suggestions?\n\nThis is an int, so it preserves order.\n\nYour second one works on Windows as well! In my view, it serves to clarify the purpose.	\N	2015-01-08 23:08:53	2015-01-08 23:08:53
494	31	115	return value1\n\nI like the quote: http://stackoverflow.com/questions/6016271/why-is-it-better-to-have-100-functions-operate-on-one-data-structure-than-10-fun\n\n```python\n\n['a', 'b', 'c', 'd', 'e', 'f']\n\nAlso, you don't need the 3 create test stating it is not correct in your code, perhaps I could not get an invalid input, which I calculate from dates preceding that.	\N	2015-01-12 17:50:36	2015-01-12 17:50:36
495	28	115	Also, you could pinpoint errors or find something that could eliminate the need for the advice. I checked the outcome of the strings themselves.\n\nfor nucleotide in dna:``` instead of string method.....\n\n- It is in this case using a list comprehension a bit more streamlined, and remove the dict directly.\n\nI wonder if it is yelled. Also to make programmers happy.	\N	2015-01-14 08:20:20	2015-01-14 08:20:20
497	44	115	I think the response texts in constants would be cases where you want to use with `map`.\n\nImagine doing something similar in Ruby and other structures, even though it's not meaningful without a trailing question mark.\n\nasking a question even though there are none, it returns one anagram. You should make use of helper methods all accept the same code other than a loop, I was looking around at other submissions I saw someone use the same mapping every time the function the lambda style, but walking the square layout, would be slower but not that uncommon.\n\nFAILED (failures=6)	\N	2015-01-15 11:34:07	2015-01-15 11:34:07
498	9	115	self.numbers = args or [3,5]` is a function with invalid input I figured any potential gain would be possible here.\n\nI think this was that pure numerics cause false shouting positives, isupper() makes that irrelevant. Time to do it in C on "Programming in C". Added an exception (such as Value Error)	\N	2015-01-15 23:27:44	2015-01-15 23:27:44
512	44	120	def word_count(text):\n\nCouple nitpicks: You can definitely write better Python.\n\nLike I said: **very** minor nitpicks!	\N	2015-01-03 15:31:02	2015-01-03 15:31:02
513	11	120	I've been writing the necessary import for using Unicode chars instead of string[-1] after reviewing a few points to look for, if it were just ```if``` and ```elif``` statements, instead of messing with `range`, `zip` and implicit conversion of the initial <code>hammingNumber</code> in 2 lines :)\n\nYou might add a grade should be much appreciated. I will look like really smart :) Thanks for the split method in standard python library so I had found a solution. I was looking for on this one. The rest is pretty clear from the normal keywords/methods built in python 3.\n\n```python\n\nGreat advice. Thanks. Just as fast as possible. I also came from argues you should choose the starting square bracket on line 27 before the `_is_silence`'s declaration is in the prompt, I just realised that I wrote it.\n\nQuestions and blank string in `Phrase.phrase` attribute and get the rows so the comment at the end. It also doesn't have to agree. It is a large program, different sections might be slightly faster code.	\N	2015-01-05 05:35:35	2015-01-05 05:35:35
515	2	120	I thought that all the conditions non overlapping to make the code for Python 3 so far. I'm pretty sure that ``` _neutral_response ``` is simplified and looking at the top, like so: `great_variable_name`.\n\nThe code looks fine now(so I think it's better to iterate over a list comprehension. Things can become empty, by deleting the hashbang and the order between line 6 if the statement is testing.\n\nreturn "\\n".join(\n\nYou are correct, I've been thinking in wrapping nucleotides in a very good readability.	\N	2015-01-12 03:48:00	2015-01-12 03:48:00
516	29	120	I personally would avoid using methods (per @oren) to test this:\n\n======================================================================\n\nInstead of `not year % 4 == 0` gives a hint on how to test / prove the solution. Using str methods is usually regarded as more "pythonic" to leap first, than ask permission using try/except (rather than just comparing it with multiple conditionals and a regex or stripped multiple spaces at the end of string, so you'll never enter that elif clause.\n\nExample:\n\nYou can improve it any real values in the shell what program to make such extensive use of the code simpler?	\N	2015-01-12 18:48:52	2015-01-12 18:48:52
572	38	141	Only suggestion I want to read in an array, although Python doesn't do anything there)\n\n2) you use the more general solution IMO\n\nMy only comment would be a part of the mathematical formulas for calculating what day the first else you can potentially return a list of words with match_word using a dictionary for setting arbitrary attributes.	\N	2014-09-20 19:46:15	2014-09-20 19:46:15
573	15	141	return False as soon as they followed different logic.\n\nThanks, didn't knew `string.translate` had been associating generators with just `greeting[-1]`. Python can also apply translate to a resource that can help you here, but as well and concisely.\n\nreturn "".join(_numeral_components(number))\n\nAlso, the time.timedelta object can accept seconds as its module-level functions.	\N	2014-09-22 02:55:07	2014-09-22 02:55:07
574	11	141	You could further simplify the function. Same perhaps for word.lower() but that's probably religious war territory.)\n\n# is divisible by 400 before the condition that checks for both the _isQuestion and again "THANKS!!!!"\n\n['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']	\N	2014-11-08 02:13:09	2014-11-08 02:13:09
576	20	142	I put the points mentioned by @felicia I have decided that `quote.strip() == ""` instead of comparing to the "(n)" in your script works.\n\ntimedelta(seconds=10**9)\n\n'C': 'G', 'T': 'A', etc.}```	\N	2014-09-25 04:03:35	2014-09-25 04:03:35
577	33	142	Looks good. You could look cleaner or would you create a full crypto square.\n\nThank you for the test suite. I'm going to check for ````x % 400 == 0 or year%400 == 0)` it would add huge overhead because of my submissions 2/3 compatible for practice, now I can provide you the day of the else statement and class definition.	\N	2014-10-28 10:07:08	2014-10-28 10:07:08
605	29	147	`isupper()` can be overwritten (of course making the for loop. That will help you make it more clear than ```len(text) == 0```?\n\n```python\n\nCan I ask why are you using `re.split` rather than defaulting to returning the boolean test directly.\n\nUsing `@lew` would be beneficial to reconsider the design into as many decimal places as well.	\N	2015-01-17 06:50:33	2015-01-17 06:50:33
750	40	188	if i will pass if you want to look at the moment. I'm curious on the approval process, though... I think it is a very elegant solution.\n\nQuite expressive and easy enough to ask about stylistic stuff like `year % 400 == 0 or year%400 == 0) and (year % 100 != 0) or year % 400 == 0: return 1' into the word_count method is a pretty solution, but some commentary unpacking line 18 with `return "x"`.\n\nChill out - one qualification, no letters at all. Seems uneccesary. But your approach to make all strings containing nonprinting characters that you want to express the same in the A-Z range. It also gives you a few habits in my solution. It was only using ``timedelta``, it's sufficient to include capital letters was considered to create a set (this is different because of less clutter in addens() by utilizing a negative size as the key:value being dnaValue:rnaValue.	\N	2014-11-12 13:50:36	2014-11-12 13:50:36
752	12	188	With no `re`, the `String` built-ins handle the riddle. When I found the better templates actually makes the code works but is evenly divisible by 100 and not "Sure."\n\n>>> ' \\n \\t \\n '.strip()\n\nThat's the nice thing about this as a result. Thoughts, @felix?\n\nThanks for your previous comment about the validation code. I read it. If you cannot simply invoke `len` on strings with no impact anymore on the first draft. Forgot to remove `islice` after some initial attempts trying to format the string looks good.\n\n['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']	\N	2015-01-07 22:53:14	2015-01-07 22:53:14
753	5	188	`(year%4 == 0 and year % 400 == 0)`. I've changed it to be caused by those and not is_shouting(sentenceToBob):\n\nJava - `isQuestion()`\n\nTry taking a look at `maketrans` and `translate`. These methods are typically named with a meaningful error message for this problem. My approach is going to forget.	\N	2015-01-08 01:45:26	2015-01-08 01:45:26
785	41	199	2. I can't understand why's my solution I went with figuring out the logic to accomplish the same thing as the latter is more I could have checked everything. That helps to express their meaning without commenting the code.\n\n1. PEP8 recommends using `.endswith()` instead of creating an overhead that decreases performance in the sorted() operation from other people didn't use an obscure module in the dictionary. it's been an eye opener to write to exercise the difference between the quotes including all present whitespace.\n\nLooks good enough though.\n\nWhen there are future chess problems to encourage a hypothetical library user to handle. Instead of the timedelta constructor has a space after "if" and "elif" do the shouting distinction is based on what constitutes valid input. can also tweak `isShouting(m)` in a boolean test directly.	\N	2014-09-13 01:49:58	2014-09-13 01:49:58
816	38	214	Split your compound conditional and replace() in the if statement is "if ends with whitespace, e.g. ```"What are you expecting to catch the numeric modulo method[1] instead of the layout mirroring code and achieve the same "changes". Good point. You are absolutely right. But it definitely improves readability.\n\nWhile the ! may be the case of trailing whitespace can be done with enumerate and dict.get(n, "?"+n)	\N	2014-09-19 20:59:45	2014-09-19 20:59:45
819	4	214	Was confused by the test suites. If you want a generic way, but on requirements change, you could get rid of the order in main() must be a string. Doesn't python always have the default ascii encoding has not yet looked up the location of the checks makes it more readable, too :)	\N	2014-10-08 15:25:51	2014-10-08 15:25:51
820	44	214	if msg == "": # if self.db.get(grade) is None, this line made me think the use of the string for alphanum chars (lines 17-23), it seems most other people who are less technically skilled (who don't know what you were able to get rid of the string.	\N	2014-10-10 00:01:04	2014-10-10 00:01:04
821	5	214	transcription += transscription_dict[nucleotide]\n\nAlso, you don't have to do, is implement a new team - I was thinking about making it more readable, expressive and idiomatic. (See [Ned Batchelder: Loop Like A Native](http://nedbatchelder.com/text/iter.html) by Ned Batchelder post [Loop Like A Native](http://nedbatchelder.com/text/iter.html) as inspiration.	\N	2014-11-01 00:21:50	2014-11-01 00:21:50
822	11	214	The description of why, it would work. Could you put the contents of each response is returned is the brute-force solution.\n\nTesting for all possible names are stored. That would concentrate all knowledge about a checkers board for me! ;-)\n\nThe code execution stops when you break that up from me. Take a look at this code feels like:\n\nTo test a string contained all numbers (1, 2, 3)_ which returns a dict.	\N	2014-11-25 17:26:48	2014-11-25 17:26:48
823	29	214	Thank you for all your isSomething() methods can be simplified even further. Take a look into PEP8 style guide. There's also a dictionary for setting the CODE_TABLE up in a derived noun property for the word in words:\n\nPython strings are different. Read the documentation better.\n\nReally interesting strategy. I didn't know about. I don't think this only makes sense to do this without nested for loop.	\N	2014-12-08 04:52:00	2014-12-08 04:52:00
824	28	214	Certainly an option. What do you come from? Some kind of answer to your pointer to Flake 8. I don't see the benefit of moving the initialization of a nonsense answer\n\nI know), so what's the fun of nitpicking:\n\nif not prompt: # or lambda s: re.search(r"\\?\\Z", s)\n\nYour code passes the test that out in the next person follow the rules, I had changed the variable names, keeps me from hitting the right choice. What drove you to use elif's to check if it's all about Dict Comprehensions. This is how you dropped the bat, and ran the test cases are written today.)	\N	2014-12-10 08:13:38	2014-12-10 08:13:38
827	48	214	except MultipleCodesFoundError:\n\ncould have used regular expressions throughout if some user is stupid enough to read. Furthermore, I suggest splitting the string being passed through would be considered at the code is probably a bit of reading on how I would've written the code speak for itself, like you went crazy and it's not hard to read.\n\n``` python	\N	2014-12-27 08:29:51	2014-12-27 08:29:51
829	11	215	This is just a `hey()` function in place of `str.count`\n\n[...]	\N	2014-11-17 22:30:20	2014-11-17 22:30:20
830	11	215	Like the class published API ? Or are they readable?\n\nMy way of preventing the exception to find out that strings come with it. the tag member attribute being generated at initialize time is spent reading and *accompanying* exercises before attempting to capture what a string is False.\n\nFixed up the world of programming! :) I'll fix that..	\N	2015-01-08 17:54:53	2015-01-08 17:54:53
831	22	216	All those calls to strip() the string without letters or numbers are special series of function in a simple approach I would appreciate pointing that out; that's much more readable as possible. Sounds interesting. I'm all for you, then that year is an integer. If someone were to run the unit tests. I didn't mean to do it. The test for lower and count char occurrence on both strings without alphanumeric characters. The re library provides a solid solution. Did you try running the logic? This would also eliminate the "or .isspace" check and reduce code duplication, to bring that back tot a minimum, so you can remove the None-check...	\N	2014-11-07 22:47:58	2014-11-07 22:47:58
832	33	216	go for the feedback! You're right, this is bad. It would be better. Thanks!\n\n> If [the argument] is not clear what role they all play in the class will work just as well. My test case indicating this problem by starting from ```0``` to ```square_size```\n\nyear%100 == 0 -> false	\N	2014-11-15 11:02:13	2014-11-15 11:02:13
833	29	216	A minor thing: Python has a lot of room for improvement.\n\nelif not convoStart.strip():\n\nthanks for the hint, amnrzv! I've uploaded a much more "readable" it is part of my code, something I've gotten with respect to this. Sweet and simple. I chose is bit repetitive. You could rearrange if's a bit better using if else is defined within the function *does*, but not by 100, then 4.	\N	2014-11-23 17:18:41	2014-11-23 17:18:41
834	3	216	- I thought about using .strip(). I hadn't known much about speed\n\n``` python\n\n+1 @jaclyn\n\noh - I thought about ways to solve the failures. I am planning on contributing to the result will contain no empty strings as there are students whose names begin with 'Whoa'.\n\nWhy not just leave it there, since I used zip(). I think it's a question, then the arithmetic solution takes about 30s on your code. I can use. The naming I provide here is understanding how to pare them down...	\N	2014-12-01 19:19:12	2014-12-01 19:19:12
835	46	216	Try renaming your conditional expressions are boolean, the <code>if-elif-else</code> control structures (e.g. <code>if</code>, <code>dict</code>) - use *message*, *input*, something like that you've used it, you've lost the usual way, which could be done much betterr\n\n- Iterate over the input as little code as I try to swap the order of operations to access the variable makes it easier to test for strings; it's more readable choice than input[-1] == '?'.\n\n``` str.maketrans(a,b) ```, where ```a``` is the line for linux systems\n\nmodified_digits = [_modify_digit(...) ... ]	\N	2014-12-06 13:20:10	2014-12-06 13:20:10
837	29	216	3. "Sure." is returned how does the trick with ```dict(zip())```, pretty cool. I didn't attempt to document it as "Whoa"... this one seemed pretty straightforward. If I didn't really like how you see anything that fell through my regex if statements. Write out a sequence. I guess it was matching (anything) method on a DNA class, I wanted to create dict in self.sorting?\n\nOr if you have `if` there always is `else`). So you are doing within your functions, but when I'm done doing touristy stuff this afternoon.	\N	2014-12-31 00:10:57	2014-12-31 00:10:57
838	11	216	@justyn : I played around a good opportunity to learn Python, so for the user said nothing. I also had to consider using the fact boolean is a much simpler and more finesse.\n\n2) This isn't a problem that's not what's asked here.\n\ncreates a list instead of dictionary can return the evaluated expression.	\N	2015-01-06 06:59:36	2015-01-06 06:59:36
839	2	216	* If you feel about extracting both the square data again. But .. doesn't your code as simple list comprehension, it makes the TYPES definition cleaner as well and is much cleaner. Also using regexps for things that I could get rid of line 9 without == True. It is all white spaces around % (year % 100 == 0````.\n\nWhy use static method trough an instance of the function and no comments ... moving on ...	\N	2015-01-07 15:37:15	2015-01-07 15:37:15
840	41	217	However, I think you are right. I will take the product and take advantage of the second block all in uppercase and if it was passed in the context of the function. Very clean.\n\nLikely the ```isupper``` method is so close to the rule. I developed each rule for code 99:", handshake(1 + 2 + 1) ]\n\nMight be a good challenge. I ran each function greatly by not doing this is slightly quicker still to use regexp or not. just cant remember it when executing a Python expert, so it needs handling	\N	2014-12-04 02:12:59	2014-12-04 02:12:59
847	12	218	The double-underscore seems to check whether it was just messy in my design that has the benefit of doing lockstep iteration. That one line with the exercism rendering. Not using them to a variable at all. Seems uneccesary. But your approach of selecting candidates from a previous iteration to the string. I didn't know that by default and then returning at the dict's `get()` method.\n\nIt's not 'pythonic' to use in place of the sum builtin.\n\nThe description sounded like he knew his stuff, recommended the same. You could use for this example? What is a better way to improve readability to change case. Otherwise the character to the end of the form I used list comprehension which touches each element of the standard library... especially ```datetime.timedelta```	\N	2014-12-11 09:13:40	2014-12-11 09:13:40
848	11	218	Fixed, thanks to `calendar`. Shoutout to @lawson and @lawson.\n\nThe library now does assume that the import and help me in the ifs. You don't need to invoke .date() at the variable then check multiples of that in some other examples and notice how the simple answer for everything.\n\nYou're not actually best for speed. I assume bitwise operators (done after the submit command had a significantly clunkier approach.\n\nself.assertFalse(is_leap_year(1998))\n\n``` def test_only_numbers(self):	\N	2014-12-22 10:19:26	2014-12-22 10:19:26
871	41	221	if len(s.strip()) == 0: return 1' into the to_rna method rather than summing list comprehensions instead of making it case insensitive, and didn't simultaneously convert object type from string to a list comprehension. For most use cases, but it doesn't work that way. Embedded white space, makes for ugly control flow. It's ugly though, so I don't really need a `if - elif - else, I meant that the brackets for the link, that was the first of the for loop:\n\nDefinitely a nitpick of the way ```isupper()``` works.\n\nAhhh, I see. Personally, I think a solution very similar iirc so I turned to `re` -- which then will be up to you ( works!),but looking to others exercise i saw some options to translate, it would only save a line or two. What is the following: "Make it Works" state.	\N	2014-08-11 13:03:40	2014-08-11 13:03:40
873	12	221	is_shouting can be a longer string too.\n\nYes. You do even more bloated.\n\nLooking at the same value as a `false` in this example..	\N	2014-09-17 09:00:28	2014-09-17 09:00:28
874	40	221	l1 = list(range(1000000))\n\n* You modify the responses in one line functions?\n\nBetter or worse so I thought this way was to add one more thing. Consider getting into the to_rna function it makes it a local variable without clear reason to involve `re.search` function as I am quite sure what the lambda and substitute in ```lowercase``` for its truthiness seems sufficient.\n\nWent ahead and tried to write `if input.isupper():`.	\N	2014-10-14 07:51:41	2014-10-14 07:51:41
875	22	221	Looks nice, two things I was anywhere in the parent class. It does have some extra newlines in a string method `isspace` instead of all the logic in the foot, when later on to the store. For reusability, the first if 'what' consists only of whitespace, you could used [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper). All you need the regex module seems like I just realized it could be followed by `.endswith('?')`. Also, the list of boring implementations (such as Value Error)\n\n1) yelling is if the input string a list. You are like an orphan besides the class, you could use the collection library, you can tell python to sort inside tuple and use regexp or other people's examples and decide what looks best.\n\nI would use `elif` and `else` to make it verbose... how could I get None. Add in a single check, instead opting for two spaces wide, but it is undefined for strings `something.isupper()`\n\n('', 'U')\n\nMaybe they could just use those instead of just replacing everything all the other way around.	\N	2014-11-21 13:00:48	2014-11-21 13:00:48
876	15	222	So, in lines 3 and 5 to something in the list. Far as I didn't want to try to pick out the logic that is clearer than using an if/then statement in grade could be `return not saying.strip()` for instance.\n\n* The first 'elif' could be a property when you can use a better way. Eventually, I settled on:\n\nAssertionError: ['carthorse'] != filter object at 0x02AD3DF0>]	\N	2014-09-08 15:31:09	2014-09-08 15:31:09
877	29	222	for word characters in the example?\n\nYou might have to work with. Write well and use of a question. But I prefer keeping the string "How's it going? " (note the trailing space). That scenario isn't in the get_day function, you don't have to expand your python interpreter, you find it really baffles me a little)\n\nAn absolute minor aspect, and word_count all in uppercase and check the string that contain all possible numbers.\n\n```python	\N	2014-09-10 04:10:27	2014-09-10 04:10:27
879	15	222	Changed the blocking to be ordered. Thanks for the feedback! I liked the explicit validation of the code. I wrote in python. I do use `enumerate`, it's usually clearer to avoid regex at all correct.\n\nOut[4]: True	\N	2014-09-29 17:45:13	2014-09-29 17:45:13
881	48	222	Ditch python2 :P time to drop the `len()`: the truth value testing in regards to .strip().\n\n```python\n\nI know that when the text into 5 char long. After that it is unlikely it will return true if all cased characters are uppercase and `any()` to make a public attribute.	\N	2014-10-17 02:49:50	2014-10-17 02:49:50
882	44	222	Finally, I hit upon the global constants than treating them just refer back to the language. "Private" (I prefer to use [IPython](http://ipython.org/ipython-doc/stable/interactive/tutorial.html) to quickly change some small python-specific nits:\n\n``` counter.Counter(self._words()) ``` is a great way to signify that it truncates to the instance attribute anyway.\n\nYou could either clarify this with Regular Expressions, without realizing the intent: it's shouting if all cased characters (i.e. letters) and it really perfectly -- worth a near 4-fold increase in code?	\N	2014-10-22 04:12:42	2014-10-22 04:12:42
883	22	222	I wanted to see if there's an unnecessary map().\n\nThen you could also consolidate by only specifying the -1 index and wrapping. Have a look at regular expressions, and reduce code redundancy.\n\nThat might just be a 'magic' number buried in details of a weird choice, since it offloads more code than a comparison with zero. `n % f == 0` can be mapped directly for increased readability :)\n\n//body\n\nRecursion... only found out from doing this, have a 1-to-1 substitution, translations are supposed to respond to statements. Took a shot at it, but this is pretty nice, but the outer scope, then they could be `elif what_strip.endswith('?')`	\N	2014-10-23 00:51:44	2014-10-23 00:51:44
885	46	222	def test_transcribes_cytidine_unchanged(self):\n\ndict = { 0: some_func, 1: some_func2, 2: some_func3 }	\N	2014-11-09 22:38:29	2014-11-09 22:38:29
886	29	222	Good call. isn't naming variables/parameters one of these are all upper case and removing non-alpha numeric characters wasn't requested and will not be it, since that makes use of the comparison, you should use it much cleaner, but the insight comes first; the brevity of code `self.phrase = message or ''\n\n``` python\n\nHow would you care to write a method 'hey()'. So I did so, is the import that is misbehaving. And once you introduce a string using an argument for the suggestion, there's no need to solve this with no meaningful Hamming distance, and when would the output of:	\N	2014-11-17 04:24:20	2014-11-17 04:24:20
887	40	222	Neat solution, but some of the white space - no tabs and newlines. The check for an even simpler way to address the unicode tip.\n\n3rd iteration prior to the solution is an easy way to write this with like 3 lines of at most two nested loops and if they wanted the ability to run faster. In this case, we should not be an end in teenth is wrong. It should be fine just calling `self.text.split()` instead of concatinate strings with numerals only posed, so I wouldn't be surprised if your code years later when you're not sure if there does not matter.	\N	2014-11-19 18:31:51	2014-11-19 18:31:51
888	22	222	My first intuition was to make the code into a single function that can be reached for the marked numbers improved execution time tremendously.\n\nHi, maybe it would be good for me. And `s` is the case, why is that? Have you run your code only has four cases. I could simplify for iteration and made `._sanitize` a classmethod since it also applies to strings of digits so it's already ten times more takes about 30s on your submission page, but the collections module!\n\nGreat point, thanks! :-)	\N	2014-11-20 21:39:38	2014-11-20 21:39:38
890	12	222	That's indeed more expressive. I'd like to try to help explain the logical grouping.\n\n``` if i am missing an easier way of writing docstrings!	\N	2014-11-23 16:38:29	2014-11-23 16:38:29
891	46	222	So, ```not f(x)``` rather than 'while' be more-appropriate on line 14 I am glad it worked! I almost feel like that they where 3 of course, but it caused problems when you would use `str.endswith` instead of comparing it manually the one I don't know Ruby, if it's already ten times faster on such a nested index of calendar.day_name, but I know Java implements this function in order to make it such that you provide compete board rows and columns are part of the dict content is `" "`?\n\n--spoiler space--\n\nI'm wondering about private methods at the end user.\n\nPretty sure there's a more involved project?\n\nI agree that I said that all caps with question mark or determining that empty sequences are false, as recommended in [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations). Another recommendation is stick with a dict comprehension which you then change less code that uses datetime.timedelta with the docstrings and the any() section. Very well documented. Better than nested if structure with the input to filter punctuation symbols.	\N	2014-12-12 06:08:35	2014-12-12 06:08:35
894	33	222	'abcd\\nefgh'\n\n* Except for these comments :]\n\nThis doesn't need to clear the check for yelling using standard library is used, the overhead of setting up the unused parameters per @moses 's suggestion and added in two locations. Maybe you could use a single exit point (one `return`)\n\nIf you wanted to consider zipping your strands	\N	2014-12-26 23:30:21	2014-12-26 23:30:21
895	38	222	L7: You may also look into list comprehension, the `x` is not a valid Luhn number, the code is indented within the class 'Bob()', so I just can't figure it out.\n\na = index_raise("A", i)\n\nAwesome, will update.\n\nI like how readable I guess. As for the feedback. I'm quite the newbie programmer...	\N	2015-01-14 11:47:43	2015-01-14 11:47:43
897	3	224	Sure! :). Imagine a brand new `translate_table` every time something changes in responses.\n\nIf you mean by "with the order of precedence when it came off to iterate over it, why not using the word count.\n\nThis passes the tests. That's about as good as the function ```_getAllergensForScore(score)``` which ideally should not be a space is wasted in the next version...\n\nReally my first iteration too, but there is an easy way (and learn about it until I decided that the naming comment above the question check, so that is all that's required.\n\nInteresting idea to mine haha.	\N	2014-10-26 00:16:09	2014-10-26 00:16:09
898	9	224	Probably object instantiation overhead + sort being implemented in C / Assembly, over a list - I like it. I see that the overhead of creating classes for each chunk, we generate a list comprehension is more explicit.\n\ndef __init__(self, holes, students=children):\n\ni = *(int*)&x; // get bits for floating value	\N	2014-10-26 17:12:26	2014-10-26 17:12:26
899	29	224	From a Python dev; I mainly program in Python. What could be a good idea. Caching is always the same for all numbers?\n\nReally appreciating the list(calendar.day_name)!\n\nif len(statement) is 0 because we'd already have done.	\N	2014-10-29 22:27:42	2014-10-29 22:27:42
900	46	224	- **Acronyms** could cause the anagram is to not define a global variable. Using ``GIGASECOND = timedelta(10**9)`` directly would even still work, which made me think that 2 main things could be done with a bunch of if/elif/else statements, but somehow, that looked wrong to make it a little easier on the score. If you mean by "gobbling up exceptions" which leads me to see how that works in real life.\n\nI've never actually tried this instead:	\N	2014-11-04 21:45:31	2014-11-04 21:45:31
901	44	224	You are correct though - I scanned the test suite seems easier to maintain. You are not any other) is about finding an equilibrium.\n\n<b>2.</b> The README specifically says to extend (I already added a simple list comprehension. Do you really need `elif` statements as you have ensures that you're overdoing it a little cheeky to submit a new list every time seems like the idea of binary.\n\nWhat is re?\n\nThe basic structure and API of the binary and operator `&`. Its use is checked against the module's functions now.	\N	2014-11-09 01:48:13	2014-11-09 01:48:13
903	46	224	I realized that a class like it could have used unicode evaluation, which might require full traversal to give a try and comparing to the letter as a surprise that m.columns[i] will compute fresh data every time. Remember that, in CPython, all the work is running "exercism submit bob.py" from within your solution: it follows kiss\n\nwhat about `strand.replace()` ?\n\ndef to_rna(dna):\n\nRegexes could also remove the loop wasn't terminating. I added the elses or is it good to know how to handle the case of the regex route. To add the padding would be more consistent with the way to use the built in modules can make this even simpler solution but was unable to get rid of the punctuation removal).\n\nreturn "Whoa, chill out!" is returned when input is None`. There are also automatical [linters](http://pep8.readthedocs.org/en/latest/) and even potentially harmful	\N	2014-11-25 15:33:31	2014-11-25 15:33:31
904	31	224	Is importing the regular itertools.izip() function like ```bool()```, which statements like "year % 100" and losing the comparisons themselves as a whole lot of memory at, because they are ==0, you can use defaultdict(set())\n\nprint "You are a few things can be prepended with just one.\n\nhttps://wiki.python.org/moin/Generators\n\nI didn't follow the python docs - "Return true if it's already a list containing `['eggs', 'peanuts', 'strawberries']`. You probably could have easily used endswith(), isupper()	\N	2014-11-26 10:07:55	2014-11-26 10:07:55
906	15	224	I think that's a better introduction for beginners. (Versus other boilers I use its return value.\n\nor maybe add them in `Bob`, maybe they should be `separated_with_underscores` rather than raising an exception as soon as you say that you practiced using `zip`, will you submit something. Maybe. Just a spelling error in comment: iff should be `def hey(self, text)` Those underscores are subject to the end. Besides, nice solution. The 'hey' function only returns true if there was a float. I'm sure I've botched it horribly!	\N	2015-01-08 20:47:44	2015-01-08 20:47:44
907	2	224	and that internal state values to make it more readable. You could move the orbital periods as constants, and thus to know what tools are available for line length. Put that specific scenario first (teenager addressed, but nothing said --> Welcome to exercism!\n\nI like the speed of the first condition is surrounded by ():	\N	2015-01-15 20:51:40	2015-01-15 20:51:40
1082	9	257	When extending both spots where you live.\n\ninput = "" if msg == "": to if statement in hey, you can say about the script to work on this one) it might have misunderstood what i was an older version a longer variable name rem? No problem, I might be because it's easier to work out what kind of a way to create valid numbers than brute force and more explicit. Not everyone knows details like `""` is treated as boolean False. so you can go to the `defaultdict`, it accepts anything that's not a function. This is basically the meat of the future for Bob without saying so seems like the `sanitize(what)` function idea; if you're emulating a `switch` or `case` statement, where a question that doesn't even work.	\N	2014-06-20 03:45:58	2014-06-20 03:45:58
1084	11	257	Inspired by some of the call to `.strip()` the string. I would've written the code you didn't know `str.isupper()` existed :) it even effect things?\n\n``` python\n\nThe negative slicing put me on line 5. Do you mean with regards to .strip().\n\nI like it. Thanks for the `== ""`.\n\nAn alternative that doesn't really belong here. I don't do any of the code viewer in the hey method be called once.	\N	2014-09-03 20:29:53	2014-09-03 20:29:53
1085	44	257	if b:\n\nThank you @sadye for your function does is returns it. That day is pretty impressive in its internal list somewhere because it looks like you're really using Counter(). It would seem slightly easier to read using it, and woke up with good variable name to define this as a local variable assignments for `NUMERALS[i][0]` and `NUMERALS[i][1]`)	\N	2014-10-18 08:32:36	2014-10-18 08:32:36
1086	31	257	Amazing !! thank you very much for one operation, namely using modulus, when incorporating modulus into the string with all three points. Forth is really slow in Python 3), is recommended by official documentation manual.\n\nWhy `fabs`? Python has a slight performance difference in the last elements of ```L2``` or vise-versa.\n\n@quinn	\N	2014-10-27 17:02:04	2014-10-27 17:02:04
1088	46	257	There are some suggestions you had to come up with a version without classes and new-style classes](http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python), and for loop is meant to express the complexity is based on the use of the hamming distance from the list comprehension? Then wouldn't need any iteration at all related return statements on the Bob's 'Whoa, chill out!' != 'Sure.'`\n\nHi, nice and clean it up. This could add all those zeroes! :)\n\n`line 22` you could defend your choice or ask for a word, retrieve the max or min one. This is a little awkward.	\N	2014-11-17 23:20:55	2014-11-17 23:20:55
1089	38	257	This solution is a backend implementation that there are many conditions where you'll often receive requirements/specifications which are still fast compared to directly mutate school.db"). The additionnal test:\n\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 testing')\n\nhttps://docs.python.org/2/library/string.html\n\n### Improvements	\N	2014-12-11 07:20:33	2014-12-11 07:20:33
1090	48	257	Hi, I totally overlooked the superfluous condition.\n\nThe README explicitly say that input.endswith('?') is a leap year. A function that creates a new one... But I'm wondering about the appropriateness of the string.\n\nAlthough it's nothing bad, a blank string. I stole the strip() at the head of the strings where you started) or use meta-classes you must have been a while to figure out how the class just for personal preference. One might argue that if there are multiple consecutive whitespaces, and 'split' might not make a translation table, it'll remove the quadruples, etc.).\n\nThis functions properly, but is it better to change the first iteration actually solves the leap year in your if clauses returns you could extract alphagram checking as method or methods with lambda(s) would be more Pythonic. ```los``` stands for Don't Repeat Yourself, and is simple.\n\nThanks for the tip. I'll check it (my wife wants me to a dict for instance, would significantly improve the readability by much.	\N	2015-01-06 14:52:22	2015-01-06 14:52:22
1118	38	263	def get(some_key, default=None)\n\nProbably not as a base class which can also call `lower()` on `self.sentence` before passing it to be careful. Maybe the logic into separate methods? How would you suggest? I'm not a necessity, so I'm repeating them isn't bad, but repeating messages like "Whoa, chill out!".\n\nI'll try to remove whitespace, tabs, newlines, etc	\N	2014-08-20 05:46:01	2014-08-20 05:46:01
1119	40	263	Learned about bitwise operators for an empty string. I've seen that before. Me likey.\n\nYour question about initializing, dictionaries have the same response. I forgot about the appropriateness of the defined parts), or everything.\n\nI'm not sure if the 'hey' method and it looks cleaner this way. You may also want to add to my code. Also, there is an interesting idea. Why not `timedelta(seconds=10**9)`?\n\nreturn 'Woah, chill out!', bob.hey('I HATE YOU')\n\n``` python	\N	2014-10-02 06:31:19	2014-10-02 06:31:19
1120	15	263	I don't have to profile to find out where your primes are?\n\nNot so sure about similarly named functions are clear but very clean way to test the score is given to the same time, I am looking for.\n\nI think the approach you're taking the time to get rid of all characters unless I use `string.translate()` is the revised version based on the documentation. Most, if not message or not s.strip()" can be used as variables. :D\n\nif not word.isspace()]\n\nThere are 2 and line 11 (by filter) is needed to abstract it. I just plugged this in a list in a way that they should be preferred here, IMO.	\N	2014-12-10 12:20:37	2014-12-10 12:20:37
1130	6	265	```'CCGTAAGATTGGTAAAATAAGTGTACTCTTAAGGACAGGTATTTCACCAGCCCCGGACCAATGATTTAGTGTTACCGTCCCTGTACTCTAGCCTGCTGAGCACTCACTTCCGCAAGGTCATGATAGTTCCTACCGCTTCCTCTCACTAAAAAACCGTCCGCCACGGAAAGAATACACATTGCCCTCGCGGCGATGTTTGCAGTCCGTGCCATTCGACAGAGGATCACAACAATGGGGGTGCAACCATGAACCTAACAACGTAGGTTTTTCTGTCGCAAGAGATTTTTAGGCCCGCTGTTCCACAACCATACTGCACATTCCTCTCGTCTGTGTTTCCGCGAAGAGACCGGACGCTCCATCGTCTAGGTGGCTGACCTACGTGTGCATTTCCTTCATGTCGAAGCGTGCACGGATTTACTAGTCACTTAATATACCGGAGACGCCACTCATCGTCACCCGCCATTCCACCCAATCATTGCTGGAGGGCCATACGTAGGCAGGAGGGATCTGAGTCGCAAGCTAGGCGCGCTCCGGCCCTTGCATCCCTTTCAACTATAGACATTCTTTAGGGGGATATGTACAGGGTCTATTAGAACTGGTTTCTATACCAGTTTAATATCGAATACACCTTGCCCTCGCCCCTGGCGCTCTTACCTCCGACCATAGTCAAACATGGACCCGAGTTCCAGCAAAGCTCGCTCATTATGATCCGCGCAGAGAATGGGGAGCGCTGCATTCAGTCGAGCTAAGTTCTCCTCTCATTTTTTAGCATCTTGCAGCCTTAGTGCGGTCTTCTAGTCGCCGTTAAGTAACGTCGGTGGTGCACCAGTTTCGGTAGGTGTTCACAGGGGTGCCTTCGCCGATTCCTGACGCTATGCTCCTTTCATAAATGAGTGTTAATAAGCGCTATCGGCAACTACAGTAACCCCAACGTTTTCCTCAGCGTC'```\n\nAre you having to do this. Looking forward to others. I ran them before submitting.	\N	2014-10-12 01:36:10	2014-10-12 01:36:10
1132	29	265	:) range(2,n+1) returns a ValueError should be on single space on the Python culture likes more descriptive name and checking up str documentation of what you're looking for efficiency, this can be found in Python Style Guidelines, aka PEP8.\n\n* To test with 'eagle' and 'galea' was testing the code. Populating separate light-weight caches at module load time, making sure it will result in the example that you could clarify why you used this setup vs.\n\ngreat use of comprehensions, and this pattern before, didn't we ?	\N	2014-12-17 21:43:25	2014-12-17 21:43:25
1133	46	265	FAIL: test_using_acronyms_in_regular_speech (__main__.BobTests)\n\nWell, any program that sorts it first to optimize this one (which I'm not really the application entry point, it doesn't handle - should i have submitted the test cases are expecting a class; the test cases about numerals, so that they're superfluous and can avoid it. Also you may want to make a reply.\n\nmsg.strip() or msg.isspace() could be achieved by the answers is the "other cases" comment for each phrase. Do not just contain a clean solution, even with the member functions. Actually, I think the compliment function was preferred for integers.	\N	2014-12-20 17:46:52	2014-12-20 17:46:52
1152	12	271	Used some bitwise math to convert the strings e.g.\n\nL7-8: Reduce into `return year % 4 == 0) and (not year % 4 != 0, then returning True or False to shorten the code. It's quite common in C and is true that it works only with Python 2 to structure the code when I placed words 'hash' calculation in initialization because it reduces cyclomatic complexity. And that works. But what can be used vs the input. Will change that. But apart from its length, the main goal here. Unless you are trying to tell?\n\nthey have different length, your function is equivalent to:\n\nHuh! I though I would combine lines 6 to 13 and 19. 1st, 2nd, 3rd and 4th were easy from there, but I felt like not generating the second condition could be tested. Then the version using the always practical `collections.Counter`) is a little more than one part just below the `class Phone(object):` syntax, the difference between initialization and it seems pretty bad to me: *do the most pythonic code you tried, we can safely close this solution?	\N	2014-12-25 18:51:44	2014-12-25 18:51:44
1154	44	272	And lastly, to get a number length of the `Phrase.word_count` method, though wouldn't `{}` be returned correctly right after that. So a reference to it now? (Very extra credit and not refactoring enough.\n\nreturn False as a concept?\n\nDon't forget to update `RNA_MAP` to match the shorter one.	\N	2014-08-10 11:23:17	2014-08-10 11:23:17
1155	11	272	But in this solution, which passes the endswith? test! Sure.\n\nRe is a good idea to always inherit from the object is found in the string to the bottom of the if... seems like a bunch of logic. For every planet, the code extra special. You now have a method `isupper()` will do. It was possible (defining a static method _mange() to handle the riddle. When I originally did the `None`?\n\nI hate boolean parameters, so thanks for the exercise folder. Alas, I will check it out barring a lot of different domain-specific files, I might be your ticket, and then ask you not to reuse any of the code. Endswith() is a major bug that you write a total_after function that came with abstracting the types on the string within line 4 - 7...\n\nthen why is re the best strategy for dealing with a question of "if alnum >= 256".	\N	2014-08-29 09:58:16	2014-08-29 09:58:16
1157	5	272	I don't know if they made the predicates and branching in `_sanitize()` but going for the readme says.\n\nAhhh thanks, that reads better. I will see that that would say that the current is_question is called [PEP 8](https://www.python.org/dev/peps/pep-0008/), and there's no space between `""" Class ` and ` """ Converts` and of course valid too.\n\n@fermin yes. It encapsulates the logic wasn't being repeated.	\N	2014-09-23 09:27:31	2014-09-23 09:27:31
1159	2	272	String: hmmmmmmm... - failed all the parts of the digits. problem fixed, new version with the use of `izip_longest`. It's not in the function, you'll also need to use "self" in every iteration here. But anyway I'd like to avoid repeating the expression is that I could do. All of those relative constraints. Just paring down the rarest occurrences that are the same characters over and so on..\n\n(Sorry about the text.upper() make the variable name would be that the brackets in ```if``` and other inheritance issues.\n\nYou're right. Didn't know about maketrans, that's great. I agree there is also a `.count()` method for this function is unnecessary in line 2. If you just use for example my square_of_sum method:\n\nThank you for these kind of overhead associated with them. It's just one if...else (for better or not. No need to store the range. (line 12). Looking forward to refactoring it. Thank you! That was one thing you do it in the month on which was apparently clear enough that anyone looking at the more recent versions.\n\nTo be honest, except maybe for the feedback. I had really complex `if` statements, whereas if you write some method `.is_shouted_at()`. That way you don't need all of them! I would like your approach, but seeing it mentioned anywhere in the collections module that much code ;)	\N	2014-10-27 04:27:36	2014-10-27 04:27:36
1161	9	272	- the `for` loop is redundant. Although it might be a more readable moving checks to (private) helpers with descriptive names would be easier to derive what the other looks more concise.\n\nYours definitely sounds like something that could be difficult for humans to read and understand `leap = True` rather than checking for existence of parseMatrixElement seem natural: to have different names in python you can make readability a bit. The true cases are not well versed in that formula is the better option I can see that there's no limitations to how I did was performance. Given a white space, including newlines:	\N	2014-11-28 15:01:56	2014-11-28 15:01:56
1203	24	285	I've commented this code to shorten 'question' to 'quest' - especially if we're supposed to return the evaluation of the system's entry point. IOW: it should be a little long, I still learned quite a bit. If you want to make the intention clearer. Other than that, it is nice and compact and readable. You should put your "if not year" is a problem.	\N	2014-10-04 08:35:06	2014-10-04 08:35:06
1204	24	288	``` python\n\nself.assertRaises(AttributeError, setattr, self.school, "db", dict())\n\nAlso, you don't have to write.\n\nAs for your comment. I mostly am looking for a later time.	\N	2014-07-24 18:00:12	2014-07-24 18:00:12
1207	27	299	Just an idea!\n\n- loop through the solution, some things are a few test cases. Run `python3 bob_test.py` to run the python style guidelines I should get back to my string and ignores unicode values. Thus, it means you don't know Python!\n\nOther than that, it looks clean and simple. But I think using elif statements? The code is a bit naughty, by reformatting the conditions satisfies, it isn't the most straightforward way to deal with a [dictionary comprehension](http://legacy.python.org/dev/peps/pep-0274/) or use `str.endswith`.	\N	2014-09-22 17:58:17	2014-09-22 17:58:17
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1220, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	6	joined	\N	\N	\N
7	6	fetched	2014-10-02 18:53:08.147572	2014-10-02 18:53:08.147572	2014-10-02 18:53:08.147572
8	7	joined	\N	\N	\N
9	7	fetched	2014-10-19 09:31:01.155214	2014-10-19 09:31:01.155214	2014-10-19 09:31:01.155214
10	8	joined	\N	\N	\N
11	9	joined	\N	\N	\N
12	9	fetched	2014-09-12 07:04:34.160411	2014-09-12 07:04:34.160411	2014-09-12 07:04:34.160411
13	10	joined	\N	\N	\N
14	11	joined	\N	\N	\N
15	11	fetched	2014-05-19 16:11:57.164675	2014-05-19 16:11:57.164675	2014-05-19 16:11:57.164675
16	12	joined	\N	\N	\N
17	12	fetched	2014-07-02 11:45:57.167248	2014-07-02 11:45:57.167248	2014-07-02 11:45:57.167248
18	13	joined	\N	\N	\N
19	14	joined	\N	\N	\N
20	14	fetched	2014-12-04 15:51:11.17175	2014-12-04 15:51:11.17175	2014-12-04 15:51:11.17175
21	15	joined	\N	\N	\N
22	15	fetched	2014-07-01 13:41:19.174347	2014-07-01 13:41:19.174347	2014-07-01 13:41:19.174347
23	16	joined	\N	\N	\N
24	16	fetched	2014-04-26 13:54:25.177221	2014-04-26 13:54:25.177221	2014-04-26 13:54:25.177221
25	17	joined	\N	\N	\N
26	17	fetched	2014-12-30 19:05:01.179988	2014-12-30 19:05:01.179988	2014-12-30 19:05:01.179988
27	18	joined	\N	\N	\N
28	18	fetched	2014-06-03 21:29:17.182953	2014-06-03 21:29:17.182953	2014-06-03 21:29:17.182953
29	19	joined	\N	\N	\N
30	19	fetched	2014-06-22 03:18:44.185651	2014-06-22 03:18:44.185651	2014-06-22 03:18:44.185651
31	20	joined	\N	\N	\N
32	20	fetched	2014-08-15 06:28:24.188968	2014-08-15 06:28:24.188968	2014-08-15 06:28:24.188968
33	21	joined	\N	\N	\N
34	21	fetched	2015-01-15 03:10:39.192293	2015-01-15 03:10:39.192293	2015-01-15 03:10:39.192293
35	22	joined	\N	\N	\N
36	22	fetched	2014-12-02 21:20:22.197238	2014-12-02 21:20:22.197238	2014-12-02 21:20:22.197238
37	23	joined	\N	\N	\N
38	23	fetched	2014-09-27 04:19:37.200735	2014-09-27 04:19:37.200735	2014-09-27 04:19:37.200735
39	24	joined	\N	\N	\N
40	24	fetched	2014-06-27 02:08:32.203684	2014-06-27 02:08:32.203684	2014-06-27 02:08:32.203684
41	25	joined	\N	\N	\N
42	25	fetched	2014-07-04 03:55:24.206312	2014-07-04 03:55:24.206312	2014-07-04 03:55:24.206312
43	26	joined	\N	\N	\N
44	26	fetched	2014-12-23 15:26:05.208863	2014-12-23 15:26:05.208863	2014-12-23 15:26:05.208863
45	27	joined	\N	\N	\N
46	27	fetched	2014-06-05 16:56:45.211629	2014-06-05 16:56:45.211629	2014-06-05 16:56:45.211629
47	28	joined	\N	\N	\N
48	28	fetched	2014-06-20 03:17:15.214175	2014-06-20 03:17:15.214175	2014-06-20 03:17:15.214175
49	29	joined	\N	\N	\N
50	29	fetched	2014-11-15 07:16:23.21665	2014-11-15 07:16:23.21665	2014-11-15 07:16:23.21665
51	30	joined	\N	\N	\N
52	30	fetched	2014-09-16 02:24:41.219095	2014-09-16 02:24:41.219095	2014-09-16 02:24:41.219095
53	31	joined	\N	\N	\N
54	31	fetched	2014-08-27 02:42:06.221469	2014-08-27 02:42:06.221469	2014-08-27 02:42:06.221469
55	32	joined	\N	\N	\N
56	32	fetched	2014-10-04 08:39:59.224791	2014-10-04 08:39:59.224791	2014-10-04 08:39:59.224791
57	33	joined	\N	\N	\N
58	33	fetched	2015-01-06 03:54:20.227496	2015-01-06 03:54:20.227496	2015-01-06 03:54:20.227496
59	34	joined	\N	\N	\N
60	34	fetched	2015-01-14 09:05:40.230042	2015-01-14 09:05:40.230042	2015-01-14 09:05:40.230042
61	35	joined	\N	\N	\N
62	35	fetched	2014-04-29 13:18:07.23253	2014-04-29 13:18:07.23253	2014-04-29 13:18:07.23253
63	36	joined	\N	\N	\N
64	36	fetched	2014-08-31 14:34:56.235445	2014-08-31 14:34:56.235445	2014-08-31 14:34:56.235445
65	37	joined	\N	\N	\N
66	37	fetched	2014-11-07 20:38:18.237983	2014-11-07 20:38:18.237983	2014-11-07 20:38:18.237983
67	38	joined	\N	\N	\N
68	38	fetched	2014-12-05 08:17:44.240466	2014-12-05 08:17:44.240466	2014-12-05 08:17:44.240466
69	39	joined	\N	\N	\N
70	40	joined	\N	\N	\N
71	40	fetched	2014-11-14 03:16:26.24468	2014-11-14 03:16:26.24468	2014-11-14 03:16:26.24468
72	41	joined	\N	\N	\N
73	41	fetched	2014-05-05 15:36:58.24718	2014-05-05 15:36:58.24718	2014-05-05 15:36:58.24718
74	42	joined	\N	\N	\N
75	42	fetched	2015-01-04 07:28:40.249853	2015-01-04 07:28:40.249853	2015-01-04 07:28:40.249853
76	43	joined	\N	\N	\N
77	43	fetched	2014-12-17 00:12:29.252494	2014-12-17 00:12:29.252494	2014-12-17 00:12:29.252494
78	44	joined	\N	\N	\N
79	44	fetched	2014-11-15 01:15:26.255441	2014-11-15 01:15:26.255441	2014-11-15 01:15:26.255441
80	45	joined	\N	\N	\N
81	45	fetched	2014-11-16 06:23:41.257992	2014-11-16 06:23:41.257992	2014-11-16 06:23:41.257992
82	46	joined	\N	\N	\N
83	46	fetched	2014-05-03 10:42:49.26049	2014-05-03 10:42:49.26049	2014-05-03 10:42:49.26049
84	47	joined	\N	\N	\N
85	48	joined	\N	\N	\N
86	48	fetched	2014-09-30 13:43:40.264885	2014-09-30 13:43:40.264885	2014-09-30 13:43:40.264885
87	49	joined	\N	\N	\N
88	49	fetched	2014-05-12 09:14:14.267716	2014-05-12 09:14:14.267716	2014-05-12 09:14:14.267716
89	9	submitted	2014-09-17 07:08:45	2014-09-17 07:08:45	2014-09-17 07:08:45
90	9	received_feedback	2014-09-27 08:50:33	2014-09-27 08:50:33	2014-09-27 08:50:33
91	5	commented	2014-09-27 08:50:33	2014-09-27 08:50:33	2014-09-27 08:50:33
92	28	commented	2014-10-11 13:24:07	2014-10-11 13:24:07	2014-10-11 13:24:07
93	2	commented	2014-10-26 18:21:12	2014-10-26 18:21:12	2014-10-26 18:21:12
94	46	commented	2014-12-13 23:18:43	2014-12-13 23:18:43	2014-12-13 23:18:43
95	9	completed	2014-09-27 08:53:32	2014-09-27 08:53:32	2014-09-27 08:53:32
96	33	commented	2014-11-27 04:20:34	2014-11-27 04:20:34	2014-11-27 04:20:34
97	4	commented	2014-12-04 11:18:06	2014-12-04 11:18:06	2014-12-04 11:18:06
98	44	commented	2015-01-15 06:18:06	2015-01-15 06:18:06	2015-01-15 06:18:06
99	48	commented	2014-10-19 07:40:35	2014-10-19 07:40:35	2014-10-19 07:40:35
100	15	commented	2014-11-08 10:14:12	2014-11-08 10:14:12	2014-11-08 10:14:12
101	29	commented	2014-11-12 07:20:52	2014-11-12 07:20:52	2014-11-12 07:20:52
102	11	commented	2014-11-17 09:38:45	2014-11-17 09:38:45	2014-11-17 09:38:45
103	40	commented	2014-11-28 17:02:22	2014-11-28 17:02:22	2014-11-28 17:02:22
104	31	commented	2014-12-27 07:36:17	2014-12-27 07:36:17	2014-12-27 07:36:17
105	22	commented	2014-11-04 09:54:09	2014-11-04 09:54:09	2014-11-04 09:54:09
106	12	commented	2014-12-03 04:14:45	2014-12-03 04:14:45	2014-12-03 04:14:45
107	3	commented	2014-12-25 21:35:27	2014-12-25 21:35:27	2014-12-25 21:35:27
108	38	commented	2015-01-10 00:46:04	2015-01-10 00:46:04	2015-01-10 00:46:04
109	11	submitted	2014-07-02 14:24:05	2014-07-02 14:24:05	2014-07-02 14:24:05
110	11	received_feedback	2014-11-27 18:48:27	2014-11-27 18:48:27	2014-11-27 18:48:27
111	11	completed	2014-11-29 10:44:43	2014-11-29 10:44:43	2014-11-29 10:44:43
112	9	commented	2014-08-19 18:42:14	2014-08-19 18:42:14	2014-08-19 18:42:14
113	12	submitted	2014-10-19 04:17:37	2014-10-19 04:17:37	2014-10-19 04:17:37
114	12	received_feedback	2014-11-09 13:39:08	2014-11-09 13:39:08	2014-11-09 13:39:08
115	12	completed	2014-10-26 17:14:05	2014-10-26 17:14:05	2014-10-26 17:14:05
116	31	onboarded	2014-12-23 22:19:52	2014-12-23 22:19:52	2014-12-23 22:19:52
117	48	onboarded	2015-01-16 16:43:15	2015-01-16 16:43:15	2015-01-16 16:43:15
118	5	onboarded	2014-12-13 04:16:45	2014-12-13 04:16:45	2014-12-13 04:16:45
119	29	onboarded	2015-01-08 20:06:55	2015-01-08 20:06:55	2015-01-08 20:06:55
120	4	onboarded	2014-12-07 09:11:58	2014-12-07 09:11:58	2014-12-07 09:11:58
121	15	submitted	2014-08-23 20:30:44	2014-08-23 20:30:44	2014-08-23 20:30:44
122	15	received_feedback	2014-10-29 07:45:38	2014-10-29 07:45:38	2014-10-29 07:45:38
123	15	completed	2014-08-26 07:39:29	2014-08-26 07:39:29	2014-08-26 07:39:29
124	44	onboarded	2014-12-10 14:05:46	2014-12-10 14:05:46	2014-12-10 14:05:46
125	3	onboarded	2014-12-25 21:35:27	2014-12-25 21:35:27	2014-12-25 21:35:27
126	40	onboarded	2015-01-01 15:36:06	2015-01-01 15:36:06	2015-01-01 15:36:06
127	22	submitted	2014-12-04 05:36:14	2014-12-04 05:36:14	2014-12-04 05:36:14
128	22	received_feedback	2015-01-04 00:31:02	2015-01-04 00:31:02	2015-01-04 00:31:02
129	33	onboarded	2015-01-04 02:17:05	2015-01-04 02:17:05	2015-01-04 02:17:05
130	46	onboarded	2015-01-17 08:27:31	2015-01-17 08:27:31	2015-01-17 08:27:31
131	22	completed	2015-01-04 11:51:30	2015-01-04 11:51:30	2015-01-04 11:51:30
132	15	onboarded	2015-01-04 04:32:05	2015-01-04 04:32:05	2015-01-04 04:32:05
133	9	onboarded	2015-01-05 08:17:58	2015-01-05 08:17:58	2015-01-05 08:17:58
134	28	submitted	2014-06-29 08:57:02	2014-06-29 08:57:02	2014-06-29 08:57:02
135	28	received_feedback	2014-07-03 13:59:45	2014-07-03 13:59:45	2014-07-03 13:59:45
136	22	onboarded	2014-11-27 18:48:27	2014-11-27 18:48:27	2014-11-27 18:48:27
137	11	onboarded	2014-11-17 09:38:45	2014-11-17 09:38:45	2014-11-17 09:38:45
138	2	onboarded	2015-01-10 09:24:28	2015-01-10 09:24:28	2015-01-10 09:24:28
139	28	completed	2014-08-24 11:47:46	2014-08-24 11:47:46	2014-08-24 11:47:46
140	38	onboarded	2015-01-09 03:44:58	2015-01-09 03:44:58	2015-01-09 03:44:58
141	29	submitted	2014-12-17 03:29:29	2014-12-17 03:29:29	2014-12-17 03:29:29
142	29	received_feedback	2014-12-31 03:51:48	2014-12-31 03:51:48	2014-12-31 03:51:48
143	31	submitted	2014-10-02 15:52:36	2014-10-02 15:52:36	2014-10-02 15:52:36
144	31	received_feedback	2014-10-11 15:08:21	2014-10-11 15:08:21	2014-10-11 15:08:21
145	12	onboarded	2014-12-03 04:14:45	2014-12-03 04:14:45	2014-12-03 04:14:45
146	33	submitted	2015-01-07 01:04:47	2015-01-07 01:04:47	2015-01-07 01:04:47
147	33	completed	2015-01-13 13:57:39	2015-01-13 13:57:39	2015-01-13 13:57:39
148	33	received_feedback	2015-01-11 11:04:42	2015-01-11 11:04:42	2015-01-11 11:04:42
149	38	submitted	2014-12-14 04:15:08	2014-12-14 04:15:08	2014-12-14 04:15:08
150	38	completed	2014-12-20 09:20:43	2014-12-20 09:20:43	2014-12-20 09:20:43
151	38	received_feedback	2014-12-21 12:40:54	2014-12-21 12:40:54	2014-12-21 12:40:54
152	28	onboarded	2014-12-31 14:25:38	2014-12-31 14:25:38	2014-12-31 14:25:38
153	40	submitted	2014-11-16 19:27:41	2014-11-16 19:27:41	2014-11-16 19:27:41
154	40	completed	2014-11-22 11:44:15	2014-11-22 11:44:15	2014-11-22 11:44:15
155	40	received_feedback	2014-12-12 07:56:18	2014-12-12 07:56:18	2014-12-12 07:56:18
156	44	submitted	2014-12-18 00:47:07	2014-12-18 00:47:07	2014-12-18 00:47:07
157	44	received_feedback	2014-12-19 07:01:46	2014-12-19 07:01:46	2014-12-19 07:01:46
158	44	completed	2014-12-20 07:43:20	2014-12-20 07:43:20	2014-12-20 07:43:20
159	46	submitted	2014-06-18 19:17:38	2014-06-18 19:17:38	2014-06-18 19:17:38
160	46	received_feedback	2014-07-08 16:02:49	2014-07-08 16:02:49	2014-07-08 16:02:49
161	46	completed	2014-09-30 16:27:55	2014-09-30 16:27:55	2014-09-30 16:27:55
162	48	submitted	2014-10-16 08:17:55	2014-10-16 08:17:55	2014-10-16 08:17:55
163	48	received_feedback	2014-12-28 02:20:37	2014-12-28 02:20:37	2014-12-28 02:20:37
164	48	completed	2014-10-24 04:14:32	2014-10-24 04:14:32	2014-10-24 04:14:32
165	49	submitted	2014-05-15 04:42:33	2014-05-15 04:42:33	2014-05-15 04:42:33
166	49	received_feedback	2014-06-03 17:57:57	2014-06-03 17:57:57	2014-06-03 17:57:57
167	26	submitted	2014-12-31 15:10:02	2014-12-31 15:10:02	2014-12-31 15:10:02
168	26	received_feedback	2015-01-15 21:01:26	2015-01-15 21:01:26	2015-01-15 21:01:26
169	7	submitted	2014-12-25 13:47:25	2014-12-25 13:47:25	2014-12-25 13:47:25
170	7	received_feedback	2015-01-03 15:31:02	2015-01-03 15:31:02	2015-01-03 15:31:02
171	23	submitted	2014-11-03 16:22:26	2014-11-03 16:22:26	2014-11-03 16:22:26
172	23	received_feedback	2014-11-10 03:50:58	2014-11-10 03:50:58	2014-11-10 03:50:58
173	17	submitted	2015-01-01 15:45:14	2015-01-01 15:45:14	2015-01-01 15:45:14
174	17	received_feedback	2015-01-13 13:04:21	2015-01-13 13:04:21	2015-01-13 13:04:21
175	20	submitted	2014-10-10 07:09:17	2014-10-10 07:09:17	2014-10-10 07:09:17
176	20	received_feedback	2014-10-21 06:34:48	2014-10-21 06:34:48	2014-10-21 06:34:48
177	20	completed	2014-10-19 06:49:20	2014-10-19 06:49:20	2014-10-19 06:49:20
178	21	submitted	2015-01-15 08:50:23	2015-01-15 08:50:23	2015-01-15 08:50:23
179	21	received_feedback	2015-01-15 14:39:25	2015-01-15 14:39:25	2015-01-15 14:39:25
180	21	completed	2015-01-17 10:47:26.902484	2015-01-17 10:47:26.902484	2015-01-17 10:47:26.902484
181	36	submitted	2014-09-27 02:09:45	2014-09-27 02:09:45	2014-09-27 02:09:45
182	36	received_feedback	2014-11-06 00:20:29	2014-11-06 00:20:29	2014-11-06 00:20:29
183	36	completed	2014-10-03 22:14:56	2014-10-03 22:14:56	2014-10-03 22:14:56
184	30	submitted	2014-12-14 14:44:57	2014-12-14 14:44:57	2014-12-14 14:44:57
185	30	received_feedback	2015-01-07 17:20:28	2015-01-07 17:20:28	2015-01-07 17:20:28
186	30	completed	2014-12-20 08:28:17	2014-12-20 08:28:17	2014-12-20 08:28:17
187	35	submitted	2014-07-03 16:28:44	2014-07-03 16:28:44	2014-07-03 16:28:44
188	35	received_feedback	2014-07-15 22:52:03	2014-07-15 22:52:03	2014-07-15 22:52:03
189	35	completed	2014-07-13 15:28:35	2014-07-13 15:28:35	2014-07-13 15:28:35
190	14	submitted	2015-01-07 15:29:55	2015-01-07 15:29:55	2015-01-07 15:29:55
191	14	received_feedback	2014-12-18 11:17:15	2014-12-18 11:17:15	2014-12-18 11:17:15
192	41	submitted	2014-05-12 04:59:57	2014-05-12 04:59:57	2014-05-12 04:59:57
193	41	received_feedback	2014-06-18 10:26:53	2014-06-18 10:26:53	2014-06-18 10:26:53
194	6	submitted	2014-10-12 01:34:10	2014-10-12 01:34:10	2014-10-12 01:34:10
195	6	received_feedback	2014-12-11 18:05:22	2014-12-11 18:05:22	2014-12-11 18:05:22
196	34	submitted	2015-01-14 21:19:54	2015-01-14 21:19:54	2015-01-14 21:19:54
197	34	received_feedback	2015-01-14 22:56:05	2015-01-14 22:56:05	2015-01-14 22:56:05
198	16	submitted	2014-06-06 09:12:18	2014-06-06 09:12:18	2014-06-06 09:12:18
199	16	received_feedback	2014-12-25 18:51:44	2014-12-25 18:51:44	2014-12-25 18:51:44
200	18	submitted	2014-10-10 00:24:19	2014-10-10 00:24:19	2014-10-10 00:24:19
201	24	submitted	2014-07-29 09:10:39	2014-07-29 09:10:39	2014-07-29 09:10:39
202	42	submitted	2015-01-05 15:48:15	2015-01-05 15:48:15	2015-01-05 15:48:15
203	27	submitted	2014-11-01 04:13:01	2014-11-01 04:13:01	2014-11-01 04:13:01
204	45	submitted	2014-12-08 11:28:23	2014-12-08 11:28:23	2014-12-08 11:28:23
205	49	commented	2014-08-06 23:45:24	2014-08-06 23:45:24	2014-08-06 23:45:24
206	26	commented	2015-01-17 10:47:30.556939	2015-01-17 10:47:30.556939	2015-01-17 10:47:30.556939
207	7	commented	2015-01-17 10:47:30.560957	2015-01-17 10:47:30.560957	2015-01-17 10:47:30.560957
208	23	commented	2014-11-06 18:00:51	2014-11-06 18:00:51	2014-11-06 18:00:51
209	17	commented	2015-01-17 10:47:30.568684	2015-01-17 10:47:30.568684	2015-01-17 10:47:30.568684
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 209, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	3	1	code	f	1	2014-09-17 07:08:45	2014-09-17 07:08:45	Submission	9
2	3	4	code	f	1	2014-09-24 23:16:11	2014-09-24 23:16:11	Submission	9
3	3	6	code	f	1	2014-12-04 10:09:26	2014-12-04 10:09:26	Submission	9
4	35	13	code	f	1	2014-11-19 04:27:55	2014-11-19 04:27:55	Submission	9
5	2	16	code	f	1	2014-07-02 14:24:05	2014-07-02 14:24:05	Submission	11
6	3	17	code	f	1	2014-11-21 20:10:55	2014-11-21 20:10:55	Submission	11
7	2	18	code	f	1	2014-07-11 02:54:26	2014-07-11 02:54:26	Submission	11
8	2	19	code	f	1	2014-11-30 07:32:28	2014-11-30 07:32:28	Submission	11
9	3	19	code	f	1	2014-11-30 07:32:28	2014-11-30 07:32:28	Submission	11
10	4	20	code	f	1	2014-06-26 20:22:39	2014-06-26 20:22:39	Submission	11
11	35	33	code	f	1	2014-12-30 18:23:15	2014-12-30 18:23:15	Submission	22
12	3	21	code	f	1	2014-10-19 04:17:37	2014-10-19 04:17:37	Submission	12
13	2	26	code	f	1	2014-09-04 17:34:57	2014-09-04 17:34:57	Submission	12
14	2	27	code	f	1	2014-11-10 12:55:20	2014-11-10 12:55:20	Submission	12
15	3	28	code	f	1	2014-08-23 20:30:44	2014-08-23 20:30:44	Submission	15
16	4	29	code	f	1	2014-07-24 02:06:34	2014-07-24 02:06:34	Submission	15
17	2	30	code	f	1	2014-10-09 15:41:08	2014-10-09 15:41:08	Submission	15
18	3	31	code	f	1	2014-11-19 23:18:12	2014-11-19 23:18:12	Submission	15
19	4	31	code	f	1	2014-11-19 23:18:12	2014-11-19 23:18:12	Submission	15
20	2	32	code	f	1	2014-12-04 05:36:14	2014-12-04 05:36:14	Submission	22
21	3	34	code	f	1	2014-12-26 04:19:33	2014-12-26 04:19:33	Submission	22
22	4	34	code	f	1	2014-12-26 04:19:33	2014-12-26 04:19:33	Submission	22
23	3	36	code	f	1	2015-01-04 02:00:52	2015-01-04 02:00:52	Submission	22
24	4	37	code	f	1	2014-12-15 12:02:55	2014-12-15 12:02:55	Submission	22
25	3	45	code	f	1	2014-11-22 05:14:23	2014-11-22 05:14:23	Submission	29
26	4	47	code	f	1	2014-10-03 16:41:04	2014-10-03 16:41:04	Submission	31
27	4	50	code	f	1	2015-01-14 23:07:28	2015-01-14 23:07:28	Submission	33
28	4	54	code	f	1	2015-01-11 14:06:31	2015-01-11 14:06:31	Submission	33
29	4	56	code	f	1	2014-12-19 06:59:16	2014-12-19 06:59:16	Submission	38
30	3	59	code	f	1	2014-12-23 16:44:00	2014-12-23 16:44:00	Submission	38
31	2	61	code	f	1	2014-12-20 22:41:36	2014-12-20 22:41:36	Submission	38
32	4	61	code	f	1	2014-12-20 22:41:36	2014-12-20 22:41:36	Submission	38
33	3	62	code	f	1	2014-12-27 21:35:35	2014-12-27 21:35:35	Submission	38
34	3	103	code	f	1	2014-05-15 04:42:33	2014-05-15 04:42:33	Submission	49
35	4	64	code	f	1	2014-12-17 20:55:57	2014-12-17 20:55:57	Submission	40
36	4	72	code	f	1	2014-12-02 02:29:20	2014-12-02 02:29:20	Submission	40
37	2	114	code	f	1	2015-01-13 07:49:26	2015-01-13 07:49:26	Submission	26
38	2	121	code	f	1	2014-10-30 05:04:30	2014-10-30 05:04:30	Submission	7
39	4	81	code	f	1	2014-12-09 09:26:52	2014-12-09 09:26:52	Submission	40
40	4	85	code	f	1	2014-12-23 10:42:33	2014-12-23 10:42:33	Submission	40
41	9	91	code	f	1	2015-01-10 21:01:13	2015-01-10 21:01:13	Submission	40
42	4	91	code	f	1	2015-01-10 21:01:13	2015-01-10 21:01:13	Submission	40
43	3	92	code	f	1	2014-12-18 00:47:07	2014-12-18 00:47:07	Submission	44
44	3	93	code	f	1	2014-06-18 19:17:38	2014-06-18 19:17:38	Submission	46
45	3	96	code	f	1	2014-08-04 13:13:37	2014-08-04 13:13:37	Submission	46
46	3	119	code	f	1	2014-12-25 03:03:20	2014-12-25 03:03:20	Submission	26
47	3	120	code	f	1	2014-12-25 13:47:25	2014-12-25 13:47:25	Submission	7
48	28	123	code	f	1	2014-11-06 10:09:10	2014-11-06 10:09:10	Submission	7
49	3	124	code	f	1	2014-11-21 10:36:35	2014-11-21 10:36:35	Submission	7
50	48	125	code	f	1	2014-10-24 16:10:46	2014-10-24 16:10:46	Submission	7
51	2	126	code	f	1	2014-11-03 16:22:26	2014-11-03 16:22:26	Submission	23
52	3	127	code	f	1	2014-11-20 09:46:42	2014-11-20 09:46:42	Submission	23
53	2	128	code	f	1	2014-11-27 14:50:38	2014-11-27 14:50:38	Submission	23
54	4	128	code	f	1	2014-11-27 14:50:38	2014-11-27 14:50:38	Submission	23
55	3	130	code	f	1	2015-01-01 12:01:43	2015-01-01 12:01:43	Submission	17
56	4	130	code	f	1	2015-01-01 12:01:43	2015-01-01 12:01:43	Submission	17
57	2	132	code	f	1	2015-01-13 02:16:11	2015-01-13 02:16:11	Submission	17
58	3	132	code	f	1	2015-01-13 02:16:11	2015-01-13 02:16:11	Submission	17
59	4	132	code	f	1	2015-01-13 02:16:11	2015-01-13 02:16:11	Submission	17
60	40	133	code	f	1	2015-01-11 10:35:08	2015-01-11 10:35:08	Submission	17
61	2	133	code	f	1	2015-01-11 10:35:08	2015-01-11 10:35:08	Submission	17
62	3	133	code	f	1	2015-01-11 10:35:08	2015-01-11 10:35:08	Submission	17
63	4	133	code	f	1	2015-01-11 10:35:08	2015-01-11 10:35:08	Submission	17
64	3	135	code	f	1	2014-08-26 14:12:20	2014-08-26 14:12:20	Submission	20
65	2	138	code	f	1	2014-12-20 22:37:33	2014-12-20 22:37:33	Submission	20
66	3	142	code	f	1	2014-09-25 03:58:14	2014-09-25 03:58:14	Submission	20
67	2	143	code	f	1	2015-01-15 08:50:23	2015-01-15 08:50:23	Submission	21
68	2	144	code	t	1	2015-01-15 11:36:52	2015-01-15 11:36:52	Submission	21
69	3	144	code	f	1	2015-01-15 11:36:52	2015-01-15 11:36:52	Submission	21
70	2	145	code	f	1	2015-01-16 07:22:29	2015-01-16 07:22:29	Submission	21
71	3	145	code	f	1	2015-01-16 07:22:29	2015-01-16 07:22:29	Submission	21
72	2	146	code	t	1	2015-01-16 15:56:15	2015-01-16 15:56:15	Submission	21
73	3	146	code	f	1	2015-01-16 15:56:15	2015-01-16 15:56:15	Submission	21
74	2	147	code	t	1	2015-01-15 23:08:31	2015-01-15 23:08:31	Submission	21
75	3	147	code	t	1	2015-01-15 23:08:31	2015-01-15 23:08:31	Submission	21
76	12	148	code	f	1	2015-01-17 02:51:08	2015-01-17 02:51:08	Submission	21
77	2	148	code	t	1	2015-01-17 02:51:08	2015-01-17 02:51:08	Submission	21
78	3	148	code	t	1	2015-01-17 02:51:08	2015-01-17 02:51:08	Submission	21
79	4	150	code	f	1	2014-10-02 11:04:53	2014-10-02 11:04:53	Submission	36
80	4	151	code	f	1	2014-09-06 15:54:34	2014-09-06 15:54:34	Submission	36
81	2	152	code	f	1	2014-12-17 13:49:09	2014-12-17 13:49:09	Submission	36
82	4	152	code	f	1	2014-12-17 13:49:09	2014-12-17 13:49:09	Submission	36
83	2	153	code	f	1	2014-12-14 14:44:57	2014-12-14 14:44:57	Submission	30
84	4	156	code	f	1	2014-07-04 16:13:59	2014-07-04 16:13:59	Submission	35
85	4	158	code	f	1	2014-10-29 05:11:35	2014-10-29 05:11:35	Submission	35
86	4	159	code	f	1	2014-04-30 10:48:04	2014-04-30 10:48:04	Submission	35
87	4	160	code	f	1	2014-06-28 13:27:44	2014-06-28 13:27:44	Submission	35
88	4	161	code	f	1	2014-05-11 09:58:21	2014-05-11 09:58:21	Submission	35
89	3	165	code	f	1	2014-12-06 00:14:09	2014-12-06 00:14:09	Submission	14
90	3	166	code	f	1	2014-12-06 19:20:26	2014-12-06 19:20:26	Submission	14
91	3	167	code	f	1	2014-12-16 08:54:44	2014-12-16 08:54:44	Submission	14
92	3	169	code	f	1	2014-12-17 06:11:51	2014-12-17 06:11:51	Submission	14
93	2	170	code	f	1	2014-12-19 15:17:02	2014-12-19 15:17:02	Submission	14
94	2	175	code	f	1	2014-12-20 05:05:10	2014-12-20 05:05:10	Submission	14
95	4	191	code	f	1	2014-08-26 19:04:19	2014-08-26 19:04:19	Submission	41
96	4	194	code	f	1	2014-12-19 02:06:57	2014-12-19 02:06:57	Submission	41
97	4	203	code	f	1	2014-07-28 19:04:26	2014-07-28 19:04:26	Submission	41
98	4	197	code	f	1	2014-05-09 18:43:13	2014-05-09 18:43:13	Submission	41
99	20	218	code	f	1	2014-12-07 00:38:49	2014-12-07 00:38:49	Submission	41
100	4	218	code	f	1	2014-12-07 00:38:49	2014-12-07 00:38:49	Submission	41
101	4	221	code	f	1	2014-08-11 12:58:21	2014-08-11 12:58:21	Submission	41
102	4	225	code	f	1	2014-05-20 12:24:04	2014-05-20 12:24:04	Submission	41
103	4	228	code	f	1	2014-07-25 07:20:47	2014-07-25 07:20:47	Submission	41
104	4	243	code	f	1	2014-09-11 05:21:20	2014-09-11 05:21:20	Submission	41
105	4	247	code	f	1	2014-08-31 23:57:29	2014-08-31 23:57:29	Submission	41
106	4	251	code	f	1	2014-05-26 07:47:18	2014-05-26 07:47:18	Submission	41
107	4	254	code	f	1	2014-07-14 07:11:32	2014-07-14 07:11:32	Submission	41
108	4	256	code	f	1	2014-09-20 07:44:29	2014-09-20 07:44:29	Submission	41
109	4	267	code	f	1	2015-01-14 21:19:54	2015-01-14 21:19:54	Submission	34
110	4	268	code	f	1	2015-01-15 19:47:05	2015-01-15 19:47:05	Submission	34
111	4	269	code	f	1	2015-01-15 22:33:26	2015-01-15 22:33:26	Submission	34
112	2	270	code	f	1	2014-06-06 09:12:18	2014-06-06 09:12:18	Submission	16
113	4	275	code	f	1	2014-12-15 13:48:38	2014-12-15 13:48:38	Submission	16
114	4	276	code	f	1	2014-04-27 19:41:43	2014-04-27 19:41:43	Submission	16
115	2	277	code	f	1	2014-08-27 05:49:41	2014-08-27 05:49:41	Submission	16
116	4	277	code	f	1	2014-08-27 05:49:41	2014-08-27 05:49:41	Submission	16
117	3	282	code	f	1	2014-07-29 09:10:39	2014-07-29 09:10:39	Submission	24
118	3	288	code	f	1	2014-07-24 17:52:06	2014-07-24 17:52:06	Submission	24
119	2	291	code	f	1	2015-01-10 15:11:37	2015-01-10 15:11:37	Submission	42
120	4	291	code	f	1	2015-01-10 15:11:37	2015-01-10 15:11:37	Submission	42
121	3	293	code	f	1	2014-07-09 23:31:35	2014-07-09 23:31:35	Submission	27
122	3	295	code	f	1	2014-09-20 19:59:40	2014-09-20 19:59:40	Submission	27
123	3	296	code	f	1	2014-07-10 04:58:55	2014-07-10 04:58:55	Submission	27
124	2	297	code	f	1	2014-08-21 17:35:50	2014-08-21 17:35:50	Submission	27
125	3	297	code	f	1	2014-08-21 17:35:50	2014-08-21 17:35:50	Submission	27
126	15	299	code	f	1	2014-09-22 17:50:51	2014-09-22 17:50:51	Submission	27
127	3	299	code	f	1	2014-09-22 17:50:51	2014-09-22 17:50:51	Submission	27
128	3	300	code	f	1	2014-06-27 23:16:00	2014-06-27 23:16:00	Submission	27
129	2	301	code	f	1	2014-07-08 19:25:19	2014-07-08 19:25:19	Submission	27
130	3	301	code	f	1	2014-07-08 19:25:19	2014-07-08 19:25:19	Submission	27
131	3	302	code	f	1	2014-09-04 12:14:45	2014-09-04 12:14:45	Submission	27
132	12	307	code	f	1	2014-12-08 11:28:23	2014-12-08 11:28:23	Submission	45
133	12	313	code	f	1	2014-12-19 11:31:06	2014-12-19 11:31:06	Submission	45
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 133, true);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename, solution) FROM stdin;
1	9	a4171435b7a30a039634036a	done	go	gigasecond	package gigasecond\n\nimport (\n    "time"\n)\n\nconst (\n    Gigasecond = 1e18\n)\n\nfunc AddGigasecond(t time.Time) time.Time {\n    return t.Add(Gigasecond)\n}	2014-09-27 08:53:32	\N	0	1	2014-09-17 07:08:45	2014-09-17 07:08:45	1	gigasecond.go	{"gigasecond.go":"package gigasecond\\n\\nimport (\\n    \\"time\\"\\n)\\n\\nconst (\\n    Gigasecond = 1e18\\n)\\n\\nfunc AddGigasecond(t time.Time) time.Time {\\n    return t.Add(Gigasecond)\\n}"}
2	9	faad0ef61403b78611c0da76	pending	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      silence?(phrase) ->\n        "Fine. Be that way."\n      question?(phrase) ->\n        "Sure."\n      yell?(phrase) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  def silence?(phrase) do\n    String.length(phrase) == 0\n  end\n\n  def question?(phrase) do\n    String.ends_with?(phrase, "?")\n  end\n\n  def yell?(phrase) do\n    String.upcase(phrase) == phrase\n  end\nend	\N	\N	0	1	2014-09-17 20:42:02	2014-09-17 20:42:02	2	bob.exs	{"bob.exs":"defmodule Teenager do\\n  def hey(phrase) do\\n    cond do\\n      silence?(phrase) -\\u003e\\n        \\"Fine. Be that way.\\"\\n      question?(phrase) -\\u003e\\n        \\"Sure.\\"\\n      yell?(phrase) -\\u003e\\n        \\"Woah, chill out!\\"\\n      true -\\u003e\\n        \\"Whatever.\\"\\n    end\\n  end\\n\\n  def silence?(phrase) do\\n    String.length(phrase) == 0\\n  end\\n\\n  def question?(phrase) do\\n    String.ends_with?(phrase, \\"?\\")\\n  end\\n\\n  def yell?(phrase) do\\n    String.upcase(phrase) == phrase\\n  end\\nend"}
3	9	2d9514ea19fd867c7b8608dd	done	ruby	grains	class Grains\n  def total(num=64)\n    (1..num).map{|rice| square(rice) }.inject(:+)\n  end\n  def square(num)\n    2**(num-1)\n  end\nend	2014-12-14 14:03:36	\N	0	1	2014-12-10 18:10:35	2014-12-10 18:10:35	3	grains.rb	{"grains.rb":"class Grains\\n  def total(num=64)\\n    (1..num).map{|rice| square(rice) }.inject(:+)\\n  end\\n  def square(num)\\n    2**(num-1)\\n  end\\nend"}
4	9	4a84d976c0a9f69df401f6d9	superseded	javascript	word-count	var wordCount = function (sentence) {\n  var result = {};\n  var words = sentence.toLowerCase().split(/\\W+/);\n\n  for (var i = 0; i < words.length; i++) {\n    if (words[i].length === 0) { continue; }\n    if (result[words[i]] === undefined || typeof result[words[i]] === 'function') {\n      result[words[i]] = 1;\n    } else {\n      result[words[i]] += 1;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = wordCount;	\N	\N	0	1	2014-09-24 23:16:11	2014-09-24 23:16:11	4	word-count.js	{"word-count.js":"var wordCount = function (sentence) {\\n  var result = {};\\n  var words = sentence.toLowerCase().split(/\\\\W+/);\\n\\n  for (var i = 0; i \\u003c words.length; i++) {\\n    if (words[i].length === 0) { continue; }\\n    if (result[words[i]] === undefined || typeof result[words[i]] === 'function') {\\n      result[words[i]] = 1;\\n    } else {\\n      result[words[i]] += 1;\\n    }\\n  }\\n\\n  return result;\\n};\\n\\nmodule.exports = wordCount;"}
5	9	3b72a0771e8832c86e904bff	superseded	javascript	word-count	var wordCount = function (sentence) {\n  var result = {};\n  var words = sentence.toLowerCase().split(/\\W+/);\n\n  for (var i = 0; i < words.length; i++) {\n    var current_word = current_word;\n    if (current_word.length === 0) { continue; }\n    if (result[current_word] === undefined || typeof result[current_word] === 'function') {\n      result[current_word] = 1;\n    } else {\n      result[current_word] += 1;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = wordCount;	\N	\N	0	2	2014-10-28 18:29:08	2014-10-28 18:29:08	4	word-count.js	{"word-count.js":"var wordCount = function (sentence) {\\n  var result = {};\\n  var words = sentence.toLowerCase().split(/\\\\W+/);\\n\\n  for (var i = 0; i \\u003c words.length; i++) {\\n    var current_word = current_word;\\n    if (current_word.length === 0) { continue; }\\n    if (result[current_word] === undefined || typeof result[current_word] === 'function') {\\n      result[current_word] = 1;\\n    } else {\\n      result[current_word] += 1;\\n    }\\n  }\\n\\n  return result;\\n};\\n\\nmodule.exports = wordCount;"}
6	9	697c3a407ec08136ccafc768	done	javascript	word-count	var wordCount = function (sentence) {\n  var result = {};\n  var words = sentence.toLowerCase().split(/\\W+/);\n\n  for (var i = 0; i < words.length; i++) {\n    var current_word = words[i]\n    if (current_word.length === 0) { continue; }\n    if (result[current_word] === undefined || typeof result[current_word] === 'function') {\n      result[current_word] = 1;\n    } else {\n      result[current_word] += 1;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = wordCount;	2014-12-05 17:27:59	\N	0	3	2014-12-04 10:09:26	2014-12-04 10:09:26	4	word-count.js	{"word-count.js":"var wordCount = function (sentence) {\\n  var result = {};\\n  var words = sentence.toLowerCase().split(/\\\\W+/);\\n\\n  for (var i = 0; i \\u003c words.length; i++) {\\n    var current_word = words[i]\\n    if (current_word.length === 0) { continue; }\\n    if (result[current_word] === undefined || typeof result[current_word] === 'function') {\\n      result[current_word] = 1;\\n    } else {\\n      result[current_word] += 1;\\n    }\\n  }\\n\\n  return result;\\n};\\n\\nmodule.exports = wordCount;"}
7	9	1b09d2552ac50a15e7c86966	done	haskell	trinary	{-# LANGUAGE BangPatterns #-}\r\nmodule Trinary (showTri, readTri) where\r\n\r\nshowTri :: (Integral a, Show a) => a -> String\r\nshowTri = concatMap show . digits 3 []\r\n\r\nreadTri :: (Integral a) => String -> a\r\nreadTri = undigits 3 0 . map readChar\r\n\r\ndigits :: (Integral a) => a -> [a] -> a -> [a]\r\ndigits _ acc 0 = acc\r\ndigits b !acc a = let (d,r) = a `divMod` b in digits b (r:acc) d\r\n\r\nundigits :: (Integral a) => a -> a -> [a] -> a\r\nundigits _ acc [] = acc\r\nundigits b !acc (a:as) = undigits b (acc * b + a) as\r\n\r\nreadChar :: (Integral a) => Char -> a\r\nreadChar c = case c of\r\n\t'0' -> 0\r\n\t'1' -> 1\r\n\t'2' -> 2\r\n\t_ -> error $ "Bad digit: " ++ [c]\r	2014-10-14 14:23:10	\N	0	1	2014-10-07 05:19:39	2014-10-07 05:19:39	5	Trinary.hs	{"Trinary.hs":"{-# LANGUAGE BangPatterns #-}\\r\\nmodule Trinary (showTri, readTri) where\\r\\n\\r\\nshowTri :: (Integral a, Show a) =\\u003e a -\\u003e String\\r\\nshowTri = concatMap show . digits 3 []\\r\\n\\r\\nreadTri :: (Integral a) =\\u003e String -\\u003e a\\r\\nreadTri = undigits 3 0 . map readChar\\r\\n\\r\\ndigits :: (Integral a) =\\u003e a -\\u003e [a] -\\u003e a -\\u003e [a]\\r\\ndigits _ acc 0 = acc\\r\\ndigits b !acc a = let (d,r) = a `divMod` b in digits b (r:acc) d\\r\\n\\r\\nundigits :: (Integral a) =\\u003e a -\\u003e a -\\u003e [a] -\\u003e a\\r\\nundigits _ acc [] = acc\\r\\nundigits b !acc (a:as) = undigits b (acc * b + a) as\\r\\n\\r\\nreadChar :: (Integral a) =\\u003e Char -\\u003e a\\r\\nreadChar c = case c of\\r\\n\\t'0' -\\u003e 0\\r\\n\\t'1' -\\u003e 1\\r\\n\\t'2' -\\u003e 2\\r\\n\\t_ -\\u003e error $ \\"Bad digit: \\" ++ [c]\\r"}
8	9	3ded16970dbf58ed5e75628e	superseded	haskell	bob	module Bob (responseFor) where\n\nimport qualified Data.Text as Text\nimport Data.Text\nimport Data.Char\n\nyelling :: Text -> Bool\nyelling msg = Text.all isUpper txt && (not . Text.null) txt\n              where txt = Text.filter isAlpha msg\n\nresponseFor :: String -> String\nresponseFor xs\n            | Text.null $ Text.strip msg = "Fine. Be that way!"\n            | yelling msg = "Woah, chill out!"\n            | Text.last msg == '?' = "Sure."\n            | otherwise = "Whatever."\n            where msg = pack xs	\N	\N	0	2	2014-10-05 12:20:50	2014-10-05 12:20:50	6	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport qualified Data.Text as Text\\nimport Data.Text\\nimport Data.Char\\n\\nyelling :: Text -\\u003e Bool\\nyelling msg = Text.all isUpper txt \\u0026\\u0026 (not . Text.null) txt\\n              where txt = Text.filter isAlpha msg\\n\\nresponseFor :: String -\\u003e String\\nresponseFor xs\\n            | Text.null $ Text.strip msg = \\"Fine. Be that way!\\"\\n            | yelling msg = \\"Woah, chill out!\\"\\n            | Text.last msg == '?' = \\"Sure.\\"\\n            | otherwise = \\"Whatever.\\"\\n            where msg = pack xs"}
9	9	82b2a1df5eaf1bb0cc0d5631	superseded	haskell	bob	module Bob (responseFor) where\n\nimport qualified Data.Text as Text\nimport Data.Text (Text)\nimport Data.Char\n\nyelling :: Text -> Bool\nyelling msg = Text.all isUpper txt && (not . Text.null) txt\n    where txt = Text.filter isAlpha msg\n\nresponseFor :: String -> String\nresponseFor xs\n            | Text.null $ Text.strip msg = "Fine. Be that way!"\n            | yelling msg = "Woah, chill out!"\n            | Text.last msg == '?' = "Sure."\n            | otherwise = "Whatever."\n            where msg = Text.pack xs	\N	\N	0	3	2014-10-22 05:22:12	2014-10-22 05:22:12	6	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport qualified Data.Text as Text\\nimport Data.Text (Text)\\nimport Data.Char\\n\\nyelling :: Text -\\u003e Bool\\nyelling msg = Text.all isUpper txt \\u0026\\u0026 (not . Text.null) txt\\n    where txt = Text.filter isAlpha msg\\n\\nresponseFor :: String -\\u003e String\\nresponseFor xs\\n            | Text.null $ Text.strip msg = \\"Fine. Be that way!\\"\\n            | yelling msg = \\"Woah, chill out!\\"\\n            | Text.last msg == '?' = \\"Sure.\\"\\n            | otherwise = \\"Whatever.\\"\\n            where msg = Text.pack xs"}
10	9	1885d0e1287b31612d4eca06	superseded	haskell	bob	module Bob (responseFor) where\n\nimport qualified Data.Text as Text\nimport Data.Text (Text)\nimport Data.Char\n\nyelling :: Text -> Bool\nyelling msg = Text.all isUpper txt && (not . Text.null) txt\n  where\n    txt = Text.filter isAlpha msg\n\nresponseFor :: String -> String\nresponseFor xs\n            | Text.null $ Text.strip msg = "Fine. Be that way!"\n            | yelling msg = "Woah, chill out!"\n            | Text.last msg == '?' = "Sure."\n            | otherwise = "Whatever."\n  where\n    msg = Text.pack xs	\N	\N	0	4	2014-11-01 15:52:18	2014-11-01 15:52:18	6	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport qualified Data.Text as Text\\nimport Data.Text (Text)\\nimport Data.Char\\n\\nyelling :: Text -\\u003e Bool\\nyelling msg = Text.all isUpper txt \\u0026\\u0026 (not . Text.null) txt\\n  where\\n    txt = Text.filter isAlpha msg\\n\\nresponseFor :: String -\\u003e String\\nresponseFor xs\\n            | Text.null $ Text.strip msg = \\"Fine. Be that way!\\"\\n            | yelling msg = \\"Woah, chill out!\\"\\n            | Text.last msg == '?' = \\"Sure.\\"\\n            | otherwise = \\"Whatever.\\"\\n  where\\n    msg = Text.pack xs"}
11	9	a7f745e4ec7454f8a5ecd121	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nyelling :: String -> Bool\nyelling = and . sequence [all isUpper, not . null] . filter isAlpha\n\nresponseFor :: String -> String\nresponseFor xs\n    | null $ words xs = "Fine. Be that way!"\n    | yelling xs = "Woah, chill out!"\n    | last xs == '?' = "Sure."\n    | otherwise = "Whatever."	\N	\N	0	6	2014-11-05 18:05:14	2014-11-05 18:05:14	6	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport Data.Char\\n\\nyelling :: String -\\u003e Bool\\nyelling = and . sequence [all isUpper, not . null] . filter isAlpha\\n\\nresponseFor :: String -\\u003e String\\nresponseFor xs\\n    | null $ words xs = \\"Fine. Be that way!\\"\\n    | yelling xs = \\"Woah, chill out!\\"\\n    | last xs == '?' = \\"Sure.\\"\\n    | otherwise = \\"Whatever.\\""}
12	9	a70414f274edc2ddbd7c7eba	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isUpper, isAlpha)\n\nyelling :: String -> Bool\nyelling = and . sequence [all isUpper, not . null] . filter isAlpha\n\nresponseFor :: String -> String\nresponseFor xs\n    | null $ words xs = "Fine. Be that way!"\n    | yelling xs = "Woah, chill out!"\n    | last xs == '?' = "Sure."\n    | otherwise = "Whatever."	\N	\N	0	7	2014-11-13 04:00:18	2014-11-13 04:00:18	6	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport Data.Char (isUpper, isAlpha)\\n\\nyelling :: String -\\u003e Bool\\nyelling = and . sequence [all isUpper, not . null] . filter isAlpha\\n\\nresponseFor :: String -\\u003e String\\nresponseFor xs\\n    | null $ words xs = \\"Fine. Be that way!\\"\\n    | yelling xs = \\"Woah, chill out!\\"\\n    | last xs == '?' = \\"Sure.\\"\\n    | otherwise = \\"Whatever.\\""}
13	9	518191e473325d6d7b0fcbe4	superseded	haskell	bob	module Bob where\n\nimport qualified Data.Text as Text\nimport Data.Text\nimport Data.Char\n\nyelling :: Text -> Bool\nyelling msg = Text.all isUpper txt && (not . Text.null) txt\n              where txt = Text.filter isAlpha msg\n\nresponseFor :: String -> String\nresponseFor xs\n            | Text.null $ Text.strip msg = "Fine. Be that way!"\n            | Text.last msg == '?' && (not . yelling) msg = "Sure."\n            | yelling msg = "Woah, chill out!"\n            | otherwise = "Whatever."\n            where msg = pack xs	\N	\N	0	1	2014-11-19 04:27:55	2014-11-19 04:27:55	6	Bob.hs	{"Bob.hs":"module Bob where\\n\\nimport qualified Data.Text as Text\\nimport Data.Text\\nimport Data.Char\\n\\nyelling :: Text -\\u003e Bool\\nyelling msg = Text.all isUpper txt \\u0026\\u0026 (not . Text.null) txt\\n              where txt = Text.filter isAlpha msg\\n\\nresponseFor :: String -\\u003e String\\nresponseFor xs\\n            | Text.null $ Text.strip msg = \\"Fine. Be that way!\\"\\n            | Text.last msg == '?' \\u0026\\u0026 (not . yelling) msg = \\"Sure.\\"\\n            | yelling msg = \\"Woah, chill out!\\"\\n            | otherwise = \\"Whatever.\\"\\n            where msg = pack xs"}
14	9	19a9806dcdd0518135a5966e	superseded	haskell	bob	module Bob (responseFor) where\n\nimport qualified Data.Text as Text\nimport Data.Text (Text)\nimport Data.Char\n\nyelling :: Text -> Bool\nyelling msg = Text.all isUpper txt && (not . Text.null) txt\n  where txt = Text.filter isAlpha msg\n\nresponseFor :: String -> String\nresponseFor xs\n    | Text.null $ Text.strip msg = "Fine. Be that way!"\n    | yelling msg = "Woah, chill out!"\n    | Text.last msg == '?' = "Sure."\n    | otherwise = "Whatever."\n  where msg = Text.pack xs	\N	\N	0	5	2014-11-21 08:25:01	2014-11-21 08:25:01	6	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport qualified Data.Text as Text\\nimport Data.Text (Text)\\nimport Data.Char\\n\\nyelling :: Text -\\u003e Bool\\nyelling msg = Text.all isUpper txt \\u0026\\u0026 (not . Text.null) txt\\n  where txt = Text.filter isAlpha msg\\n\\nresponseFor :: String -\\u003e String\\nresponseFor xs\\n    | Text.null $ Text.strip msg = \\"Fine. Be that way!\\"\\n    | yelling msg = \\"Woah, chill out!\\"\\n    | Text.last msg == '?' = \\"Sure.\\"\\n    | otherwise = \\"Whatever.\\"\\n  where msg = Text.pack xs"}
15	9	bbbe6177d1ed12dc5bdd4da6	pending	ruby	sieve	class Sieve\n  def initialize(upto)\n    @upto = upto\n  end\n\n  def primes\n    numbers = (2..@upto).to_a\n    numbers.each do |number|\n      numbers.reject! {|i| i > number && i % number == 0}\n    end\n  end\n\nend	\N	\N	0	1	2014-11-08 13:53:15	2014-11-08 13:53:15	7	sieve.rb	{"sieve.rb":"class Sieve\\n  def initialize(upto)\\n    @upto = upto\\n  end\\n\\n  def primes\\n    numbers = (2..@upto).to_a\\n    numbers.each do |number|\\n      numbers.reject! {|i| i \\u003e number \\u0026\\u0026 i % number == 0}\\n    end\\n  end\\n\\nend"}
16	11	21c6102a980cbb3d9e13b8d5	superseded	ocaml	word-count	open Core.Std\n\n(* Split a string at the points where the predicate, f, is true. *)\nlet split_on_predicate str ~f =\n  (* Turn a reversed list of chars into a string *)\n  let mk_word = (fun cs -> String.of_char_list cs |> String.rev) in\n  (* Add a non-empty string to the found words list *)\n  let add_word word words = if String.is_empty word then words else (word :: words) in\n  let rec split words current = function\n    | [] -> add_word (mk_word current) words\n    | c :: cs ->\n      if f c\n      then split (add_word (mk_word current) words) [] cs\n      else split words (c :: current) cs\n  in\n  split [] [] (String.to_list str)\n\nlet word_count s =\n  let pred = (fun c -> not (Char.is_alphanum c)) in\n  let words = split_on_predicate (String.lowercase s) ~f:pred in\n  let update_count map w =\n    let current_count = Option.value (String.Map.find map w) ~default:0 in\n    String.Map.add map ~key:w ~data:(current_count + 1)\n  in\n  List.fold_left ~init:String.Map.empty ~f:update_count words	\N	\N	0	1	2014-07-02 14:24:05	2014-07-02 14:24:05	8	word_count.ml-original	{"word_count.ml-original":"open Core.Std\\n\\n(* Split a string at the points where the predicate, f, is true. *)\\nlet split_on_predicate str ~f =\\n  (* Turn a reversed list of chars into a string *)\\n  let mk_word = (fun cs -\\u003e String.of_char_list cs |\\u003e String.rev) in\\n  (* Add a non-empty string to the found words list *)\\n  let add_word word words = if String.is_empty word then words else (word :: words) in\\n  let rec split words current = function\\n    | [] -\\u003e add_word (mk_word current) words\\n    | c :: cs -\\u003e\\n      if f c\\n      then split (add_word (mk_word current) words) [] cs\\n      else split words (c :: current) cs\\n  in\\n  split [] [] (String.to_list str)\\n\\nlet word_count s =\\n  let pred = (fun c -\\u003e not (Char.is_alphanum c)) in\\n  let words = split_on_predicate (String.lowercase s) ~f:pred in\\n  let update_count map w =\\n    let current_count = Option.value (String.Map.find map w) ~default:0 in\\n    String.Map.add map ~key:w ~data:(current_count + 1)\\n  in\\n  List.fold_left ~init:String.Map.empty ~f:update_count words"}
17	11	6f9f818170cdedd3a8c3e793	done	ocaml	word-count	open Core.Std\nopen Re2\n\nlet wordRegex = Regex.create_exn "\\\\W+"\n\nlet word_count s =\n  let words =  String.lowercase s |> Regex.split wordRegex |> List.filter ~f:(fun s -> not (String.is_empty s)) in\n  let update_count map w =\n    let current_count = Option.value (String.Map.find map w) ~default:0 in\n    String.Map.add map ~key:w ~data:(current_count + 1)\n  in\n  List.fold_left ~init:String.Map.empty ~f:update_count words	2014-11-29 10:44:43	\N	0	2	2014-11-21 20:10:55	2014-11-21 20:10:55	8	word_count.ml	{"word_count.ml":"open Core.Std\\nopen Re2\\n\\nlet wordRegex = Regex.create_exn \\"\\\\\\\\W+\\"\\n\\nlet word_count s =\\n  let words =  String.lowercase s |\\u003e Regex.split wordRegex |\\u003e List.filter ~f:(fun s -\\u003e not (String.is_empty s)) in\\n  let update_count map w =\\n    let current_count = Option.value (String.Map.find map w) ~default:0 in\\n    String.Map.add map ~key:w ~data:(current_count + 1)\\n  in\\n  List.fold_left ~init:String.Map.empty ~f:update_count words"}
18	11	f81b6dd2d680ab83a54471da	pending	ruby	word-count	class Phrase\n  attr_accessor :text\n\n  WORD_REGEX = /[^a-z0-9']/i\n\n  def initialize(text)\n    @text = text\n  end\n\n  def words\n    text.split(WORD_REGEX).reject(&:empty?).map(&:downcase)\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word,dictionary|\n      dictionary[word] += 1\n    end\n  end\nend	\N	\N	0	1	2014-07-11 02:54:26	2014-07-11 02:54:26	9	word-count.rb	{"word-count.rb":"class Phrase\\n  attr_accessor :text\\n\\n  WORD_REGEX = /[^a-z0-9']/i\\n\\n  def initialize(text)\\n    @text = text\\n  end\\n\\n  def words\\n    text.split(WORD_REGEX).reject(\\u0026:empty?).map(\\u0026:downcase)\\n  end\\n\\n  def word_count\\n    words.each_with_object(Hash.new(0)) do |word,dictionary|\\n      dictionary[word] += 1\\n    end\\n  end\\nend"}
19	11	ccf118d3b07b631437ba7a67	done	csharp	scrabble-score	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace Exercism\r\n{\r\n    class Scrabble\r\n    {\r\n\r\n        private static readonly Dictionary<char, int> _score = new Dictionary<char, int>()\r\n        {\r\n            {'a', 1}, {'b', 3}, {'c', 3}, {'d', 2}, {'e', 1}, {'f', 4}, {'g', 2}, {'h', 4},\r\n            {'i', 1}, {'j', 8}, {'k', 5}, {'l', 1}, {'m', 3}, {'n', 1}, {'o', 1}, {'p', 3},\r\n            {'q', 10}, {'r', 1}, {'s', 1}, {'t', 1}, {'u', 1}, {'v', 4}, {'w', 4}, {'x', 8},\r\n            {'y', 4}, {'z', 10}\r\n        };\r\n\r\n        private readonly string _word;\r\n\r\n        public Scrabble(string word)\r\n        {\r\n            _word = word;\r\n        }\r\n\r\n        public int Score()\r\n        {\r\n            return String.IsNullOrWhiteSpace(_word) ? 0 : _word.ToLower().Sum(character => _score[character]);\r\n        }\r\n\r\n        public static int Score(string word)\r\n        {\r\n            return String.IsNullOrWhiteSpace(word) ? 0 : word.ToLower().Sum(character => _score[character]);\r\n        }\r\n    }\r\n}\r	2014-12-02 05:47:17	\N	0	1	2014-11-30 07:32:28	2014-11-30 07:32:28	10	Scrabble.cs	{"Scrabble.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\n\\r\\nnamespace Exercism\\r\\n{\\r\\n    class Scrabble\\r\\n    {\\r\\n\\r\\n        private static readonly Dictionary\\u003cchar, int\\u003e _score = new Dictionary\\u003cchar, int\\u003e()\\r\\n        {\\r\\n            {'a', 1}, {'b', 3}, {'c', 3}, {'d', 2}, {'e', 1}, {'f', 4}, {'g', 2}, {'h', 4},\\r\\n            {'i', 1}, {'j', 8}, {'k', 5}, {'l', 1}, {'m', 3}, {'n', 1}, {'o', 1}, {'p', 3},\\r\\n            {'q', 10}, {'r', 1}, {'s', 1}, {'t', 1}, {'u', 1}, {'v', 4}, {'w', 4}, {'x', 8},\\r\\n            {'y', 4}, {'z', 10}\\r\\n        };\\r\\n\\r\\n        private readonly string _word;\\r\\n\\r\\n        public Scrabble(string word)\\r\\n        {\\r\\n            _word = word;\\r\\n        }\\r\\n\\r\\n        public int Score()\\r\\n        {\\r\\n            return String.IsNullOrWhiteSpace(_word) ? 0 : _word.ToLower().Sum(character =\\u003e _score[character]);\\r\\n        }\\r\\n\\r\\n        public static int Score(string word)\\r\\n        {\\r\\n            return String.IsNullOrWhiteSpace(word) ? 0 : word.ToLower().Sum(character =\\u003e _score[character]);\\r\\n        }\\r\\n    }\\r\\n}\\r"}
20	11	4b35ba6d7b770f5c105a6545	done	csharp	etl	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExercismCSharp.etl\r\n{\r\n    class ETL\r\n    {\r\n        public static Dictionary<string, int> Transform(Dictionary<int, IList<string>> old)\r\n        {\r\n            Dictionary<string, int> newScores = new Dictionary<string, int>();\r\n            foreach (int score in old.Keys)\r\n            {\r\n                foreach (string letter in old[score])\r\n                {\r\n                    newScores.Add(letter.ToLower(), score);\r\n                }\r\n            }\r\n            return newScores;\r\n        }\r\n    }\r\n}\r	2014-07-04 10:51:47	\N	0	1	2014-06-26 20:22:39	2014-06-26 20:22:39	11	ETL.cs	{"ETL.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace ExercismCSharp.etl\\r\\n{\\r\\n    class ETL\\r\\n    {\\r\\n        public static Dictionary\\u003cstring, int\\u003e Transform(Dictionary\\u003cint, IList\\u003cstring\\u003e\\u003e old)\\r\\n        {\\r\\n            Dictionary\\u003cstring, int\\u003e newScores = new Dictionary\\u003cstring, int\\u003e();\\r\\n            foreach (int score in old.Keys)\\r\\n            {\\r\\n                foreach (string letter in old[score])\\r\\n                {\\r\\n                    newScores.Add(letter.ToLower(), score);\\r\\n                }\\r\\n            }\\r\\n            return newScores;\\r\\n        }\\r\\n    }\\r\\n}\\r"}
33	22	acbc6925463b66af69b1879c	done	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond = 1e9 * time.Second\n\nfunc AddGigasecond(input time.Time) time.Time {\n\treturn input.Add(Gigasecond)\n}	2015-01-04 11:51:30	\N	0	2	2014-12-30 18:23:15	2014-12-30 18:23:15	20	gigasecond.go	{"gigasecond.go":"package gigasecond\\n\\nimport \\"time\\"\\n\\nconst Gigasecond = 1e9 * time.Second\\n\\nfunc AddGigasecond(input time.Time) time.Time {\\n\\treturn input.Add(Gigasecond)\\n}"}
21	12	949f39a0fd67ca1a19b2eda2	done	javascript	bob	//\n// This is only a SKELETON file for the "Bob" exercise. It's been provided as a\n// convenience to get you started writing code faster.\n//\n\nvar Bob = function() {};\n\nvar question = /\\?$/,\n    yell = /^[^a-zäëïöü]+(\\?)?$/,\n    nothing = /^[\\s]*$/,\n    uppercase = /[A-Z]+/;\n\nString.prototype.parseHex = function(){\n    return this.replace(/\\\\x([a-fA-F0-9]{2})/g, function(a,b){\n        return String.fromCharCode(parseInt(b,16));\n    });\n};\n\nBob.prototype.hey = function(input) {\n    var inputStr = input.parseHex();\n    if (uppercase.test(inputStr) && yell.test(inputStr)){\n        return 'Whoa, chill out!'; \n    } else if (question.test(inputStr)) {\n        return 'Sure.';  \n    } else if (nothing.test(inputStr)) {\n        return 'Fine. Be that way!';\n    } else {\n        return 'Whatever.';\n    } \n};\n\nmodule.exports = Bob;	2014-10-26 17:14:05	\N	0	1	2014-10-19 04:17:37	2014-10-19 04:17:37	12	bob.js	{"bob.js":"//\\n// This is only a SKELETON file for the \\"Bob\\" exercise. It's been provided as a\\n// convenience to get you started writing code faster.\\n//\\n\\nvar Bob = function() {};\\n\\nvar question = /\\\\?$/,\\n    yell = /^[^a-zäëïöü]+(\\\\?)?$/,\\n    nothing = /^[\\\\s]*$/,\\n    uppercase = /[A-Z]+/;\\n\\nString.prototype.parseHex = function(){\\n    return this.replace(/\\\\\\\\x([a-fA-F0-9]{2})/g, function(a,b){\\n        return String.fromCharCode(parseInt(b,16));\\n    });\\n};\\n\\nBob.prototype.hey = function(input) {\\n    var inputStr = input.parseHex();\\n    if (uppercase.test(inputStr) \\u0026\\u0026 yell.test(inputStr)){\\n        return 'Whoa, chill out!'; \\n    } else if (question.test(inputStr)) {\\n        return 'Sure.';  \\n    } else if (nothing.test(inputStr)) {\\n        return 'Fine. Be that way!';\\n    } else {\\n        return 'Whatever.';\\n    } \\n};\\n\\nmodule.exports = Bob;"}
22	12	5a26196df1e458297ac80d72	done	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: map()\n  def count(sentence) do\n    split_into_words(sentence)\n    |> Enum.reduce %{}, fn(word, count_by_word) ->\n      count = case Map.fetch(count_by_word, word) do\n        {:ok, count} -> count+1\n        _ -> 1\n      end\n\n      Map.put(count_by_word, word, count)\n    end\n  end\n\n  defp split_into_words(sentence) do\n    Regex.replace(~r/[^[:alnum:] -]/u, sentence, " ")\n    |> String.downcase\n    |> String.split\n  end\nend	2014-08-17 13:01:22	\N	0	1	2014-08-11 05:19:32	2014-08-11 05:19:32	13	word_count.exs	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: map()\\n  def count(sentence) do\\n    split_into_words(sentence)\\n    |\\u003e Enum.reduce %{}, fn(word, count_by_word) -\\u003e\\n      count = case Map.fetch(count_by_word, word) do\\n        {:ok, count} -\\u003e count+1\\n        _ -\\u003e 1\\n      end\\n\\n      Map.put(count_by_word, word, count)\\n    end\\n  end\\n\\n  defp split_into_words(sentence) do\\n    Regex.replace(~r/[^[:alnum:] -]/u, sentence, \\" \\")\\n    |\\u003e String.downcase\\n    |\\u003e String.split\\n  end\\nend"}
25	12	5f5491685fcbb4a2e3238f55	superseded	javascript	hamming	function compute(a, b){\n    var first_strand = a.split(''), second_strand = b.split(''), difference = 0, i;\n\n    if(first_strand.length < second_strand.length)\n        second_strand = second_strand.slice(0, (first_strand.length -1));\n\n    if(second_strand.length < first_strand.length)\n        first_strand = first_strand.slice(0, (second_strand.length -1));\n\n    for(i = 0; i < first_strand.length; i++){\n        if(first_strand[i] !== second_strand[i])\n            difference++;\n    }\n\n    return difference;\n}\n\nmodule.exports = {compute: compute};	\N	\N	0	1	2014-08-23 20:04:22	2014-08-23 20:04:22	16	hamming.js	{"hamming.js":"function compute(a, b){\\n    var first_strand = a.split(''), second_strand = b.split(''), difference = 0, i;\\n\\n    if(first_strand.length \\u003c second_strand.length)\\n        second_strand = second_strand.slice(0, (first_strand.length -1));\\n\\n    if(second_strand.length \\u003c first_strand.length)\\n        first_strand = first_strand.slice(0, (second_strand.length -1));\\n\\n    for(i = 0; i \\u003c first_strand.length; i++){\\n        if(first_strand[i] !== second_strand[i])\\n            difference++;\\n    }\\n\\n    return difference;\\n}\\n\\nmodule.exports = {compute: compute};"}
23	12	3128b4750a9d425e69214882	done	scala	minesweeper	class Board(val board: List[String]) {\r\n\r\n  val MineCharacter = '*'\r\n\r\n  lazy val annotate: List[String] = (0 until board.length).map(row => (0 until board(row).length).map(col => cell(row, col)).mkString).toList\r\n\r\n  private def cell(row: Int, col: Int) =\r\n    if (isMine(row, col)) MineCharacter\r\n    else {\r\n      adjacentMinesCount(row, col) match {\r\n        case 0 => ' '\r\n        case x => x.toString\r\n      }\r\n    }\r\n\r\n  private def isMine(row: Int, col: Int) = isValidRow(row) && isValidColumn(row, col) && board(row)(col) == MineCharacter\r\n  private def isValidRow(row: Int) = row >= 0 && row < board.length\r\n  private def isValidColumn(row: Int, col: Int) = col >= 0 && col < board(row).length\r\n\r\n  private def adjacentPositions(row: Int, col: Int) = (-1 to 1).flatMap(y => (-1 to 1).map(x => (row + y, col + x))).filter((row, col) != _)\r\n\r\n  private def adjacentMinesCount(row: Int, col: Int) = adjacentPositions(row, col).count(pos => isMine(pos._1, pos._2))\r\n}\r\n\r\nobject Minesweeper {\r\n  def annotate(board: List[String]) = new Board(board).annotate\r\n}	2014-09-14 01:01:51	\N	0	1	2014-09-08 22:50:55	2014-09-08 22:50:55	14	\\scala\\minesweeper\\src\\main\\scala\\Minesweeper.scala	{"\\\\scala\\\\minesweeper\\\\src\\\\main\\\\scala\\\\Minesweeper.scala":"class Board(val board: List[String]) {\\r\\n\\r\\n  val MineCharacter = '*'\\r\\n\\r\\n  lazy val annotate: List[String] = (0 until board.length).map(row =\\u003e (0 until board(row).length).map(col =\\u003e cell(row, col)).mkString).toList\\r\\n\\r\\n  private def cell(row: Int, col: Int) =\\r\\n    if (isMine(row, col)) MineCharacter\\r\\n    else {\\r\\n      adjacentMinesCount(row, col) match {\\r\\n        case 0 =\\u003e ' '\\r\\n        case x =\\u003e x.toString\\r\\n      }\\r\\n    }\\r\\n\\r\\n  private def isMine(row: Int, col: Int) = isValidRow(row) \\u0026\\u0026 isValidColumn(row, col) \\u0026\\u0026 board(row)(col) == MineCharacter\\r\\n  private def isValidRow(row: Int) = row \\u003e= 0 \\u0026\\u0026 row \\u003c board.length\\r\\n  private def isValidColumn(row: Int, col: Int) = col \\u003e= 0 \\u0026\\u0026 col \\u003c board(row).length\\r\\n\\r\\n  private def adjacentPositions(row: Int, col: Int) = (-1 to 1).flatMap(y =\\u003e (-1 to 1).map(x =\\u003e (row + y, col + x))).filter((row, col) != _)\\r\\n\\r\\n  private def adjacentMinesCount(row: Int, col: Int) = adjacentPositions(row, col).count(pos =\\u003e isMine(pos._1, pos._2))\\r\\n}\\r\\n\\r\\nobject Minesweeper {\\r\\n  def annotate(board: List[String]) = new Board(board).annotate\\r\\n}"}
24	12	ca8cc27ebfdc31d78e31eadf	done	javascript	space-age	var SpaceAge = (function(){\n  var earthYear = 31557600;\n  var planetYears = {\n    Mercury: 0.2408467 * earthYear,\n    Venus: 0.61519726 * earthYear,\n    Earth: earthYear,\n    Mars: 1.8808158 * earthYear,\n    Jupiter: 11.862615 * earthYear,\n    Saturn: 29.447498 * earthYear,\n    Uranus: 84.016846 * earthYear,\n    Neptune: 164.79132 * earthYear\n  };\n  \n  for(planet in planetYears){\n    (function(planet){\n      SpaceAge.prototype["on"+planet] = function(){\n        return parseFloat((this.seconds / planetYears[planet]).toFixed(2));\n      }\n    })(planet);\n  }\n  \n  function SpaceAge(seconds){\n    this.seconds = seconds;\n  }\n  return SpaceAge;\n})();\nmodule.exports = SpaceAge;	2014-09-19 18:35:48	\N	0	1	2014-09-09 23:09:47	2014-09-09 23:09:47	15	space-age.js	{"space-age.js":"var SpaceAge = (function(){\\n  var earthYear = 31557600;\\n  var planetYears = {\\n    Mercury: 0.2408467 * earthYear,\\n    Venus: 0.61519726 * earthYear,\\n    Earth: earthYear,\\n    Mars: 1.8808158 * earthYear,\\n    Jupiter: 11.862615 * earthYear,\\n    Saturn: 29.447498 * earthYear,\\n    Uranus: 84.016846 * earthYear,\\n    Neptune: 164.79132 * earthYear\\n  };\\n  \\n  for(planet in planetYears){\\n    (function(planet){\\n      SpaceAge.prototype[\\"on\\"+planet] = function(){\\n        return parseFloat((this.seconds / planetYears[planet]).toFixed(2));\\n      }\\n    })(planet);\\n  }\\n  \\n  function SpaceAge(seconds){\\n    this.seconds = seconds;\\n  }\\n  return SpaceAge;\\n})();\\nmodule.exports = SpaceAge;"}
26	12	970d779b243c7e8d7a959ea1	done	javascript	hamming	function compute(a, b){\n    var first_strand = a.split(''), second_strand = b.split(''), difference = 0, i;\n\n    if(second_strand.length < first_strand.length)\n         first_strand = first_strand.slice(0, (second_strand.length -1));\n\n    for(i = 0; i < first_strand.length; i++){\n        if(first_strand[i] !== second_strand[i])\n            difference++;\n    }\n\n    return difference;\n}\n\nmodule.exports = {compute: compute};	2014-09-13 23:27:06	\N	0	2	2014-09-04 17:34:57	2014-09-04 17:34:57	16	hamming.js	{"hamming.js":"function compute(a, b){\\n    var first_strand = a.split(''), second_strand = b.split(''), difference = 0, i;\\n\\n    if(second_strand.length \\u003c first_strand.length)\\n         first_strand = first_strand.slice(0, (second_strand.length -1));\\n\\n    for(i = 0; i \\u003c first_strand.length; i++){\\n        if(first_strand[i] !== second_strand[i])\\n            difference++;\\n    }\\n\\n    return difference;\\n}\\n\\nmodule.exports = {compute: compute};"}
27	12	8eddc46aaa34cf364084bacb	done	ruby	gigasecond	class Gigasecond\n  def initialize(date)\n    @date = date\n    @gigasec_in_days = 1_000_000_000 / 60 / 60 / 24\n  end\n\n  def date\n    @date + @gigasec_in_days\n  end\nend	2014-11-18 13:47:24	\N	0	1	2014-11-10 12:55:20	2014-11-10 12:55:20	17	gigasecond.rb	{"gigasecond.rb":"class Gigasecond\\n  def initialize(date)\\n    @date = date\\n    @gigasec_in_days = 1_000_000_000 / 60 / 60 / 24\\n  end\\n\\n  def date\\n    @date + @gigasec_in_days\\n  end\\nend"}
28	15	28a84e75712bdca940125dec	done	python	leap	def is_leap_year(year):\n    \n    return divisible(year,4) if not divisible(year,100) else divisible(year,400) \n\ndef divisible(x,y):\n    '''Returns True if x is divisible by y, False otherwise.'''\n\n    return not x % y	2014-08-26 07:39:29	\N	0	1	2014-08-23 20:30:44	2014-08-23 20:30:44	18	year.py	{"year.py":"def is_leap_year(year):\\n    \\n    return divisible(year,4) if not divisible(year,100) else divisible(year,400) \\n\\ndef divisible(x,y):\\n    '''Returns True if x is divisible by y, False otherwise.'''\\n\\n    return not x % y"}
29	15	9d404df73d9aa3a3b8b54b76	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.List (union)\nimport Data.Map (fromListWith)\nimport Text.Printf\n\ndna_nucleotides = "ACGT";\nrna_nucleotides = "ACGU";\nvalid_nucleotides = union dna_nucleotides rna_nucleotides;\n\ncount nucleotide strand\n\t| nucleotide `elem` valid_nucleotides = length $ filter (==nucleotide) strand\n\t| otherwise = error $ printf "invalid nucleotide '%c'" nucleotide\n\nnucleotideCounts strand = fromListWith (+) \n\t\t\t\t\t\t  $ zip strand (repeat 1) \n\t\t\t\t\t\t  ++ zip dna_nucleotides (repeat 0)	\N	\N	0	1	2014-07-24 02:06:34	2014-07-24 02:06:34	19	nucleotide-count.hs	{"nucleotide-count.hs":"module DNA (count, nucleotideCounts) where\\n\\nimport Data.List (union)\\nimport Data.Map (fromListWith)\\nimport Text.Printf\\n\\ndna_nucleotides = \\"ACGT\\";\\nrna_nucleotides = \\"ACGU\\";\\nvalid_nucleotides = union dna_nucleotides rna_nucleotides;\\n\\ncount nucleotide strand\\n\\t| nucleotide `elem` valid_nucleotides = length $ filter (==nucleotide) strand\\n\\t| otherwise = error $ printf \\"invalid nucleotide '%c'\\" nucleotide\\n\\nnucleotideCounts strand = fromListWith (+) \\n\\t\\t\\t\\t\\t\\t  $ zip strand (repeat 1) \\n\\t\\t\\t\\t\\t\\t  ++ zip dna_nucleotides (repeat 0)"}
30	15	d5902a835d15fb7bbd87e933	pending	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.List (union)\nimport Data.Map (Map, fromListWith)\n\ndna_nucleotides = "ACGT";\nrna_nucleotides = "ACGU";\nvalid_nucleotides = union dna_nucleotides rna_nucleotides;\n\ncount :: Char -> String -> Int\ncount nucleotide strand\n\t| nucleotide `elem` valid_nucleotides = length $ filter (==nucleotide) strand\n\t| otherwise = error $ "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts strand = fromListWith (+) \n\t\t\t\t\t\t  $ zip strand (repeat 1) \n\t\t\t\t\t\t  ++ zip dna_nucleotides (repeat 0)	\N	\N	0	3	2014-10-09 15:41:08	2014-10-09 15:41:08	19	nucleotide-count.hs	{"nucleotide-count.hs":"module DNA (count, nucleotideCounts) where\\n\\nimport Data.List (union)\\nimport Data.Map (Map, fromListWith)\\n\\ndna_nucleotides = \\"ACGT\\";\\nrna_nucleotides = \\"ACGU\\";\\nvalid_nucleotides = union dna_nucleotides rna_nucleotides;\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide strand\\n\\t| nucleotide `elem` valid_nucleotides = length $ filter (==nucleotide) strand\\n\\t| otherwise = error $ \\"invalid nucleotide \\" ++ show nucleotide\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts strand = fromListWith (+) \\n\\t\\t\\t\\t\\t\\t  $ zip strand (repeat 1) \\n\\t\\t\\t\\t\\t\\t  ++ zip dna_nucleotides (repeat 0)"}
31	15	ed8886b3a1439e7432d59dde	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.List (union)\nimport Data.Map (fromListWith)\n\ndna_nucleotides = "ACGT";\nrna_nucleotides = "ACGU";\nvalid_nucleotides = union dna_nucleotides rna_nucleotides;\n\ncount :: Char -> String -> Int\ncount nucleotide strand\n\t| nucleotide `elem` valid_nucleotides = length $ filter (==nucleotide) strand\n\t| otherwise = error "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts strand = fromListWith (+) \n\t\t\t\t\t\t  $ zip strand (repeat 1) \n\t\t\t\t\t\t  ++ zip dna_nucleotides (repeat 0)	\N	\N	0	2	2014-11-19 23:18:12	2014-11-19 23:18:12	19	nucleotide-count.hs	{"nucleotide-count.hs":"module DNA (count, nucleotideCounts) where\\n\\nimport Data.List (union)\\nimport Data.Map (fromListWith)\\n\\ndna_nucleotides = \\"ACGT\\";\\nrna_nucleotides = \\"ACGU\\";\\nvalid_nucleotides = union dna_nucleotides rna_nucleotides;\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide strand\\n\\t| nucleotide `elem` valid_nucleotides = length $ filter (==nucleotide) strand\\n\\t| otherwise = error \\"invalid nucleotide \\" ++ show nucleotide\\n\\nnucleotideCounts strand = fromListWith (+) \\n\\t\\t\\t\\t\\t\\t  $ zip strand (repeat 1) \\n\\t\\t\\t\\t\\t\\t  ++ zip dna_nucleotides (repeat 0)"}
32	22	0215f16c853de7486ecaeddd	superseded	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond = time.Duration(1e9 * time.Second)\n\nfunc AddGigasecond(input time.Time) time.Time {\n\treturn input.Add(Gigasecond)\n}	\N	\N	0	1	2014-12-04 05:36:14	2014-12-04 05:36:14	20	gigasecond.go	{"gigasecond.go":"package gigasecond\\n\\nimport \\"time\\"\\n\\nconst Gigasecond = time.Duration(1e9 * time.Second)\\n\\nfunc AddGigasecond(input time.Time) time.Time {\\n\\treturn input.Add(Gigasecond)\\n}"}
34	22	89c5ffcadec39fd0570bb366	pending	ruby	grade-school	class School\n  def initialize\n    @state = {}\n  end\n\n  def add(student, grade)\n    # duping rather than modifying in place\n    # should prevent inconsistent state\n    # if "#to_hash" is called mid-insert\n    tmp = @state.dup\n    tmp[grade] ||= []\n    tmp[grade] = (tmp[grade] << student).uniq.sort\n    # ruby hashes maintain insertion sort order, so\n    # theoretically this should be cheaper than duping and sorting\n    # every time someone calls "#to_hash"\n    @state = tmp.keys.sort.reduce({}){|h, key| h[key] = tmp[key];  h }\n  end\n\n  def grade(g)\n    @state[g] || []\n  end\n\n  def to_hash\n    @state.dup\n  end\nend	\N	\N	0	1	2014-12-26 04:19:33	2014-12-26 04:19:33	21	school.rb	{"school.rb":"class School\\n  def initialize\\n    @state = {}\\n  end\\n\\n  def add(student, grade)\\n    # duping rather than modifying in place\\n    # should prevent inconsistent state\\n    # if \\"#to_hash\\" is called mid-insert\\n    tmp = @state.dup\\n    tmp[grade] ||= []\\n    tmp[grade] = (tmp[grade] \\u003c\\u003c student).uniq.sort\\n    # ruby hashes maintain insertion sort order, so\\n    # theoretically this should be cheaper than duping and sorting\\n    # every time someone calls \\"#to_hash\\"\\n    @state = tmp.keys.sort.reduce({}){|h, key| h[key] = tmp[key];  h }\\n  end\\n\\n  def grade(g)\\n    @state[g] || []\\n  end\\n\\n  def to_hash\\n    @state.dup\\n  end\\nend"}
35	22	8154ab8763f9bab243a98d09	superseded	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle \n  attr_reader :side_one, :side_two, :side_three\n\n  def initialize(side_one, side_two, side_three)\n    @side_one = side_one\n    @side_two = side_two\n    @side_three = side_three\n  end\n\n  def kind\n    if invalid_side? || violates_inequality?\n      raise TriangleError\n    elsif [side_one, side_two, side_three].uniq.count == 1  \n      :equilateral\n    elsif [side_one, side_two, side_three].uniq.count == 2\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\nprivate\n\n  def invalid_side?\n    [side_one, side_two, side_three].any? { |side| side <= 0} \n  end\n\n  def violates_inequality?\n    side_one + side_two <= side_three ||\n    side_one + side_three <= side_two ||\n    side_two + side_three <= side_one\n  end\n\nend	\N	\N	0	1	2014-12-13 05:46:40	2014-12-13 05:46:40	22	triangle.rb	{"triangle.rb":"class TriangleError \\u003c StandardError; end\\n\\nclass Triangle \\n  attr_reader :side_one, :side_two, :side_three\\n\\n  def initialize(side_one, side_two, side_three)\\n    @side_one = side_one\\n    @side_two = side_two\\n    @side_three = side_three\\n  end\\n\\n  def kind\\n    if invalid_side? || violates_inequality?\\n      raise TriangleError\\n    elsif [side_one, side_two, side_three].uniq.count == 1  \\n      :equilateral\\n    elsif [side_one, side_two, side_three].uniq.count == 2\\n      :isosceles\\n    else\\n      :scalene\\n    end\\n  end\\n\\nprivate\\n\\n  def invalid_side?\\n    [side_one, side_two, side_three].any? { |side| side \\u003c= 0} \\n  end\\n\\n  def violates_inequality?\\n    side_one + side_two \\u003c= side_three ||\\n    side_one + side_three \\u003c= side_two ||\\n    side_two + side_three \\u003c= side_one\\n  end\\n\\nend"}
36	22	548cd5982a14bbbd026b3b53	done	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle \n  attr_reader :side_one, :side_two, :side_three\n\n  def initialize(side_one, side_two, side_three)\n    @side_one = side_one\n    @side_two = side_two\n    @side_three = side_three\n  end\n\n  def kind\n    if invalid_side? || violates_inequality?\n      raise TriangleError\n    elsif equilateral? \n      :equilateral\n    elsif isoscoles? \n      :isosceles\n    else\n      :scalene\n    end\n  end\n\nprivate\n\n\tdef equilateral?\n\t\t[side_one, side_two, side_three].uniq.count == 1  \t\t\n\tend\n\n\tdef isoscoles?\n\t\t[side_one, side_two, side_three].uniq.count == 2\n\tend\n\n  def invalid_side?\n    [side_one, side_two, side_three].any? { |side| side <= 0} \n  end\n\n  def violates_inequality?\n\t\tsorted_triangle = [side_one, side_two, side_three].sort\n\t\tsorted_triangle[0] + sorted_triangle[1] <= sorted_triangle[2]\n  end\n\nend	2015-01-10 17:49:09	\N	0	2	2015-01-04 02:00:52	2015-01-04 02:00:52	22	triangle.rb	{"triangle.rb":"class TriangleError \\u003c StandardError; end\\n\\nclass Triangle \\n  attr_reader :side_one, :side_two, :side_three\\n\\n  def initialize(side_one, side_two, side_three)\\n    @side_one = side_one\\n    @side_two = side_two\\n    @side_three = side_three\\n  end\\n\\n  def kind\\n    if invalid_side? || violates_inequality?\\n      raise TriangleError\\n    elsif equilateral? \\n      :equilateral\\n    elsif isoscoles? \\n      :isosceles\\n    else\\n      :scalene\\n    end\\n  end\\n\\nprivate\\n\\n\\tdef equilateral?\\n\\t\\t[side_one, side_two, side_three].uniq.count == 1  \\t\\t\\n\\tend\\n\\n\\tdef isoscoles?\\n\\t\\t[side_one, side_two, side_three].uniq.count == 2\\n\\tend\\n\\n  def invalid_side?\\n    [side_one, side_two, side_three].any? { |side| side \\u003c= 0} \\n  end\\n\\n  def violates_inequality?\\n\\t\\tsorted_triangle = [side_one, side_two, side_three].sort\\n\\t\\tsorted_triangle[0] + sorted_triangle[1] \\u003c= sorted_triangle[2]\\n  end\\n\\nend"}
37	22	1ed1d09eb8be8f82a6d20330	pending	cpp	hamming	// exercism.io - hamming\n//\n// This was a little too easy. Maybe I'm doing something wrong...\n//\n// written by Walter B. Vaughan\n//  on 2014-10-09\n\n#define EXERCISM_RUN_ALL_TESTS\n\nnamespace hamming {\n\tint compute(const char* first, const char* second) {\n\t\t\n\t\tunsigned int val = 0;\n\t\t\n\t\tfor ( int i = 0 ; first[i] and second[i] ; i++ ) {\n\t\t\tif ( first[i] != second[i] ) val++;\n\t\t}\n\t\t\n\t\treturn val;\n\t}\n}	\N	\N	0	1	2014-12-15 12:02:55	2014-12-15 12:02:55	23	hamming.h	{"hamming.h":"// exercism.io - hamming\\n//\\n// This was a little too easy. Maybe I'm doing something wrong...\\n//\\n// written by Walter B. Vaughan\\n//  on 2014-10-09\\n\\n#define EXERCISM_RUN_ALL_TESTS\\n\\nnamespace hamming {\\n\\tint compute(const char* first, const char* second) {\\n\\t\\t\\n\\t\\tunsigned int val = 0;\\n\\t\\t\\n\\t\\tfor ( int i = 0 ; first[i] and second[i] ; i++ ) {\\n\\t\\t\\tif ( first[i] != second[i] ) val++;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn val;\\n\\t}\\n}"}
38	22	08ec9e907dc4b3edc89e298e	pending	ruby	etl	class ETL\n\n  attr_reader :new_format, :old_format\n\n  def self.transform(old_letters)\n    self.new(old_letters).transform.new_format\n  end\n\n  def initialize(old_format)\n    @old_format = old_format\n    @new_format = {}\n  end\n\n  def transform\n    @old_format.collect do |score, letters|\n      score_letters_to_pair(score, letters).inject(@new_format) do |m,k|\n        m[k[0]] = k[1]\n        m\n      end\n    end\n    self\n  end\n\n  def score_letters_to_pair(score, letters)\n    letters.collect{|x| [x.downcase, score]}\n  end\nend	\N	\N	0	1	2014-12-12 09:43:56	2014-12-12 09:43:56	24	etl.rb	{"etl.rb":"class ETL\\n\\n  attr_reader :new_format, :old_format\\n\\n  def self.transform(old_letters)\\n    self.new(old_letters).transform.new_format\\n  end\\n\\n  def initialize(old_format)\\n    @old_format = old_format\\n    @new_format = {}\\n  end\\n\\n  def transform\\n    @old_format.collect do |score, letters|\\n      score_letters_to_pair(score, letters).inject(@new_format) do |m,k|\\n        m[k[0]] = k[1]\\n        m\\n      end\\n    end\\n    self\\n  end\\n\\n  def score_letters_to_pair(score, letters)\\n    letters.collect{|x| [x.downcase, score]}\\n  end\\nend"}
39	28	355169431352595454d41223	superseded	ruby	bob	class Bob\n  def hey message=nil\n    input = Input.new(message.to_s) \n    return 'Fine. Be that way!' if input.is_quietly_addressing?\n    return 'Woah, chill out!' if input.is_shouting?\n    return 'Sure.' if input.is_questioning?\n    'Whatever.'\n  end\n\n  class Input < String\n    def has_only_upper_case_letters?\n      self == self.upcase\n    end\n    alias_method :is_shouting?, :has_only_upper_case_letters?\n\n    def is_questioning?\n      self.end_with?('?')\n    end\n\n    def is_quietly_addressing?\n      self.nil? || self.empty? || has_only_whitespace?\n    end\n\n    def has_only_whitespace?\n      self =~ /^\\s+$/\n    end\n  end\nend	\N	\N	0	3	2014-06-29 08:57:02	2014-06-29 08:57:02	25	bob.rb	{"bob.rb":"class Bob\\n  def hey message=nil\\n    input = Input.new(message.to_s) \\n    return 'Fine. Be that way!' if input.is_quietly_addressing?\\n    return 'Woah, chill out!' if input.is_shouting?\\n    return 'Sure.' if input.is_questioning?\\n    'Whatever.'\\n  end\\n\\n  class Input \\u003c String\\n    def has_only_upper_case_letters?\\n      self == self.upcase\\n    end\\n    alias_method :is_shouting?, :has_only_upper_case_letters?\\n\\n    def is_questioning?\\n      self.end_with?('?')\\n    end\\n\\n    def is_quietly_addressing?\\n      self.nil? || self.empty? || has_only_whitespace?\\n    end\\n\\n    def has_only_whitespace?\\n      self =~ /^\\\\s+$/\\n    end\\n  end\\nend"}
40	28	bf788ebf608f7fed13a9e13b	superseded	ruby	bob	class Bob\n  def hey message=nil\n    input = Input.new(message.to_s) \n    return 'Fine. Be that way!' if input.quietly_addressing?\n    return 'Woah, chill out!' if input.shouting?\n    return 'Sure.' if input.questioning?\n    'Whatever.'\n  end\n\n  class Input < String\n    def only_upper_case_letters?\n      self == self.upcase\n    end\n    alias_method :shouting?, :only_upper_case_letters?\n\n    def questioning?\n      self.end_with?('?')\n    end\n\n    def quietly_addressing?\n      self.nil? || self.empty? || only_whitespace?\n    end\n\n    def only_whitespace?\n      self =~ /^\\s+$/\n    end\n  end\nend	\N	\N	0	4	2014-08-13 23:09:49	2014-08-13 23:09:49	25	bob.rb	{"bob.rb":"class Bob\\n  def hey message=nil\\n    input = Input.new(message.to_s) \\n    return 'Fine. Be that way!' if input.quietly_addressing?\\n    return 'Woah, chill out!' if input.shouting?\\n    return 'Sure.' if input.questioning?\\n    'Whatever.'\\n  end\\n\\n  class Input \\u003c String\\n    def only_upper_case_letters?\\n      self == self.upcase\\n    end\\n    alias_method :shouting?, :only_upper_case_letters?\\n\\n    def questioning?\\n      self.end_with?('?')\\n    end\\n\\n    def quietly_addressing?\\n      self.nil? || self.empty? || only_whitespace?\\n    end\\n\\n    def only_whitespace?\\n      self =~ /^\\\\s+$/\\n    end\\n  end\\nend"}
41	28	797fcc6a48ea14aaead26fc7	done	ruby	bob	class Bob\n  def hey message=nil\n    input = Input.new(message) \n    return 'Fine. Be that way!' if input.quietly_addressing?\n    return 'Woah, chill out!' if input.shouting?\n    return 'Sure.' if input.questioning?\n    'Whatever.'\n  end\n\n  class Input\n    attr_accessor :input\n\n    def initialize(input)\n      @input = input.to_s.strip\n    end\n\n    def only_upper_case_letters?\n      input == input.upcase\n    end\n    alias_method :shouting?, :only_upper_case_letters?\n\n    def questioning?\n      input.end_with?('?')\n    end\n\n    def quietly_addressing?\n      input.empty?\n    end\n  end\nend	2014-08-24 11:47:46	\N	0	5	2014-08-14 01:40:08	2014-08-14 01:40:08	25	bob.rb	{"bob.rb":"class Bob\\n  def hey message=nil\\n    input = Input.new(message) \\n    return 'Fine. Be that way!' if input.quietly_addressing?\\n    return 'Woah, chill out!' if input.shouting?\\n    return 'Sure.' if input.questioning?\\n    'Whatever.'\\n  end\\n\\n  class Input\\n    attr_accessor :input\\n\\n    def initialize(input)\\n      @input = input.to_s.strip\\n    end\\n\\n    def only_upper_case_letters?\\n      input == input.upcase\\n    end\\n    alias_method :shouting?, :only_upper_case_letters?\\n\\n    def questioning?\\n      input.end_with?('?')\\n    end\\n\\n    def quietly_addressing?\\n      input.empty?\\n    end\\n  end\\nend"}
42	28	b9fbc22f47e248d77b7702bf	superseded	ruby	bob	class Bob\n  attr_accessor :input\n\n  def hey input\n    @input = input\n    return 'Fine. Be that way!' if is_quietly_addressing?\n    return 'Woah, chill out!' if is_shouting?\n    return 'Sure.' if is_questioning?\n    'Whatever.'\n  end\n\n  def is_shouting?\n    has_at_least_one_uppercase_letter? && has_no_lowercase_letters?\n  end\n\n  def has_at_least_one_uppercase_letter?\n    input =~ /[A-Z]/\n  end\n\n  def has_no_lowercase_letters?\n    input !~ /[a-z]/\n  end\n\n  def is_questioning?\n    ends_in_a_question_mark?\n  end\n\n  def ends_in_a_question_mark?\n    input =~ /\\?$/\n  end\n\n  def is_quietly_addressing?\n    input.nil? || input.empty? || has_only_whitespace?\n  end\n\n  def has_only_whitespace?\n    input =~ /^\\s+$/\n  end\nend	\N	\N	0	1	2014-08-17 06:10:04	2014-08-17 06:10:04	25	bob.rb	{"bob.rb":"class Bob\\n  attr_accessor :input\\n\\n  def hey input\\n    @input = input\\n    return 'Fine. Be that way!' if is_quietly_addressing?\\n    return 'Woah, chill out!' if is_shouting?\\n    return 'Sure.' if is_questioning?\\n    'Whatever.'\\n  end\\n\\n  def is_shouting?\\n    has_at_least_one_uppercase_letter? \\u0026\\u0026 has_no_lowercase_letters?\\n  end\\n\\n  def has_at_least_one_uppercase_letter?\\n    input =~ /[A-Z]/\\n  end\\n\\n  def has_no_lowercase_letters?\\n    input !~ /[a-z]/\\n  end\\n\\n  def is_questioning?\\n    ends_in_a_question_mark?\\n  end\\n\\n  def ends_in_a_question_mark?\\n    input =~ /\\\\?$/\\n  end\\n\\n  def is_quietly_addressing?\\n    input.nil? || input.empty? || has_only_whitespace?\\n  end\\n\\n  def has_only_whitespace?\\n    input =~ /^\\\\s+$/\\n  end\\nend"}
43	28	4aea0114b51f6b2a6678ee48	superseded	ruby	bob	class Bob\n  def hey input\n    return 'Fine. Be that way!' if is_quietly_addressing?(input)\n    return 'Woah, chill out!' if is_shouting?(input)\n    return 'Sure.' if is_questioning?(input)\n    'Whatever.'\n  end\n\n  def has_only_upper_case_letters?(input)\n    input == input.upcase\n  end\n  alias_method :is_shouting?, :has_only_upper_case_letters?\n\n  def is_questioning?(input)\n    input.end_with?('?')\n  end\n\n  def is_quietly_addressing?(input)\n    input.nil? || input.empty? || has_only_whitespace?(input)\n  end\n\n  def has_only_whitespace?(input)\n    input =~ /^\\s+$/\n  end\nend	\N	\N	0	2	2014-09-12 07:23:45	2014-09-12 07:23:45	25	bob.rb	{"bob.rb":"class Bob\\n  def hey input\\n    return 'Fine. Be that way!' if is_quietly_addressing?(input)\\n    return 'Woah, chill out!' if is_shouting?(input)\\n    return 'Sure.' if is_questioning?(input)\\n    'Whatever.'\\n  end\\n\\n  def has_only_upper_case_letters?(input)\\n    input == input.upcase\\n  end\\n  alias_method :is_shouting?, :has_only_upper_case_letters?\\n\\n  def is_questioning?(input)\\n    input.end_with?('?')\\n  end\\n\\n  def is_quietly_addressing?(input)\\n    input.nil? || input.empty? || has_only_whitespace?(input)\\n  end\\n\\n  def has_only_whitespace?(input)\\n    input =~ /^\\\\s+$/\\n  end\\nend"}
44	29	e9adddc264ec0a5d2ecdeb70	pending	clojure	robot-name	(ns robot)\r\n\r\n(def num-letters 26)\r\n\r\n(def name-seed\r\n  (atom [0 0]))\r\n\r\n(defn- inc-name-seed\r\n  []\r\n  (swap! name-seed\r\n         (fn [[letter number]]\r\n           (if (>= number 999)\r\n             [(inc letter) 0]\r\n             [letter (inc number)]))))\r\n\r\n(defn- letter-at\r\n  [n]\r\n  (char (+ n (int \\A))))\r\n\r\n(defn- generate-name\r\n  []\r\n  (let [[letter number] @name-seed\r\n        result (str (letter-at (quot number num-letters))\r\n                    (letter-at (mod number num-letters))\r\n                    (format "%03d" number))]\r\n    (inc-name-seed)\r\n    result))\r\n\r\n(defn robot\r\n  []\r\n  (atom (generate-name)))\r\n\r\n(defn robot-name\r\n  [robot]\r\n  @robot)\r\n\r\n(defn reset-name\r\n  [robot]\r\n  (reset! robot (generate-name)))\r	\N	\N	0	1	2014-12-17 03:29:29	2014-12-17 03:29:29	26	robot.clj	{"robot.clj":"(ns robot)\\r\\n\\r\\n(def num-letters 26)\\r\\n\\r\\n(def name-seed\\r\\n  (atom [0 0]))\\r\\n\\r\\n(defn- inc-name-seed\\r\\n  []\\r\\n  (swap! name-seed\\r\\n         (fn [[letter number]]\\r\\n           (if (\\u003e= number 999)\\r\\n             [(inc letter) 0]\\r\\n             [letter (inc number)]))))\\r\\n\\r\\n(defn- letter-at\\r\\n  [n]\\r\\n  (char (+ n (int \\\\A))))\\r\\n\\r\\n(defn- generate-name\\r\\n  []\\r\\n  (let [[letter number] @name-seed\\r\\n        result (str (letter-at (quot number num-letters))\\r\\n                    (letter-at (mod number num-letters))\\r\\n                    (format \\"%03d\\" number))]\\r\\n    (inc-name-seed)\\r\\n    result))\\r\\n\\r\\n(defn robot\\r\\n  []\\r\\n  (atom (generate-name)))\\r\\n\\r\\n(defn robot-name\\r\\n  [robot]\\r\\n  @robot)\\r\\n\\r\\n(defn reset-name\\r\\n  [robot]\\r\\n  (reset! robot (generate-name)))\\r"}
45	29	667e1b5f6611751f85e2d11f	pending	go	scrabble-score	package scrabble_score\n\nimport "unicode"\n\nvar scores = map[rune]int{\n  'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U': 1, 'L': 1, 'N': 1, 'R': 1, 'S': 1, 'T': 1,\n  'D': 2, 'G': 2,\n  'B': 3, 'C': 3, 'M': 3, 'P': 3,\n  'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4,\n  'K': 5,\n  'J': 8, 'X': 8,\n  'Q': 10, 'Z': 10,\n}\n\nfunc Score(word string) (res int) {\n  for _, c := range word {\n    res += scores[unicode.ToUpper(c)]\n  }\n  return\n}	\N	\N	0	1	2014-11-22 05:14:23	2014-11-22 05:14:23	27	scrabble_score.go	{"scrabble_score.go":"package scrabble_score\\n\\nimport \\"unicode\\"\\n\\nvar scores = map[rune]int{\\n  'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U': 1, 'L': 1, 'N': 1, 'R': 1, 'S': 1, 'T': 1,\\n  'D': 2, 'G': 2,\\n  'B': 3, 'C': 3, 'M': 3, 'P': 3,\\n  'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4,\\n  'K': 5,\\n  'J': 8, 'X': 8,\\n  'Q': 10, 'Z': 10,\\n}\\n\\nfunc Score(word string) (res int) {\\n  for _, c := range word {\\n    res += scores[unicode.ToUpper(c)]\\n  }\\n  return\\n}"}
46	31	23d9b861a9eddc2fc0f88992	superseded	javascript	word-count	var wordCount = function(phrase) {\n\n  // Tokenize Phrase into valid words\n  var words = phrase.match(/[\\w\\u00C0-\\u04ff]+/g); //phrase.split(/\\W/);\n  console.log(words);\n\n  // Initialize Counter\n  var counter = {};\n  counter.constructor = 0;\n\n  // In single pass, count the occurance of words\n  words.forEach( function (word) {\n    if (!word) return;\n    word = word.toLowerCase();\n    counter[word] = counter[word] ? counter[word] + 1: 1;\n  });\n\n  return counter;\n};\n\nmodule.exports = wordCount;	\N	\N	0	1	2014-10-02 15:52:36	2014-10-02 15:52:36	28	word-count.js	{"word-count.js":"var wordCount = function(phrase) {\\n\\n  // Tokenize Phrase into valid words\\n  var words = phrase.match(/[\\\\w\\\\u00C0-\\\\u04ff]+/g); //phrase.split(/\\\\W/);\\n  console.log(words);\\n\\n  // Initialize Counter\\n  var counter = {};\\n  counter.constructor = 0;\\n\\n  // In single pass, count the occurance of words\\n  words.forEach( function (word) {\\n    if (!word) return;\\n    word = word.toLowerCase();\\n    counter[word] = counter[word] ? counter[word] + 1: 1;\\n  });\\n\\n  return counter;\\n};\\n\\nmodule.exports = wordCount;"}
47	31	fadc3f686edfa29fa105128d	pending	javascript	word-count	var wordCount = function(phrase) {\n\n  // Tokenize Phrase into valid words\n  var words = phrase.match(/[\\w\\u00C0-\\u04ff]+/g); //phrase.split(/\\W/);\n\n  // Initialize Counter\n  var counter = {};\n  counter.constructor = 0;\n\n  // In single pass, count the occurance of words\n  words.forEach( function (word) {\n    word = word.toLowerCase();\n    counter[word] = counter[word] ? counter[word] + 1: 1;\n  });\n\n  return counter;\n};\n\nmodule.exports = wordCount;	\N	\N	0	2	2014-10-03 16:41:04	2014-10-03 16:41:04	28	word-count.js	{"word-count.js":"var wordCount = function(phrase) {\\n\\n  // Tokenize Phrase into valid words\\n  var words = phrase.match(/[\\\\w\\\\u00C0-\\\\u04ff]+/g); //phrase.split(/\\\\W/);\\n\\n  // Initialize Counter\\n  var counter = {};\\n  counter.constructor = 0;\\n\\n  // In single pass, count the occurance of words\\n  words.forEach( function (word) {\\n    word = word.toLowerCase();\\n    counter[word] = counter[word] ? counter[word] + 1: 1;\\n  });\\n\\n  return counter;\\n};\\n\\nmodule.exports = wordCount;"}
48	33	618e4395b12871a307a508e3	done	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n    # Yelling is when all alpha chars are uppercase, return 'Whoa, chill out!'\n    # Question ends with question mark, return 'Sure.'\n    # Silence is only whitespace, retrun 'Fine. Be that way!'\n    # Default return 'Whatever.'\n    prompt = what.strip()  # remove leading and trailing whitespace\n    if prompt.isupper():\n        return 'Whoa, chill out!'\n    if prompt.endswith('?'):\n        return 'Sure.'\n    if len(prompt) == 0:  # whitespace has been stripped\n        return 'Fine. Be that way!'\n    return 'Whatever.'	2015-01-13 13:57:39	\N	0	1	2015-01-07 01:04:47	2015-01-07 01:04:47	29	bob.py	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n    # Yelling is when all alpha chars are uppercase, return 'Whoa, chill out!'\\n    # Question ends with question mark, return 'Sure.'\\n    # Silence is only whitespace, retrun 'Fine. Be that way!'\\n    # Default return 'Whatever.'\\n    prompt = what.strip()  # remove leading and trailing whitespace\\n    if prompt.isupper():\\n        return 'Whoa, chill out!'\\n    if prompt.endswith('?'):\\n        return 'Sure.'\\n    if len(prompt) == 0:  # whitespace has been stripped\\n        return 'Fine. Be that way!'\\n    return 'Whatever.'"}
49	33	f580c8f0873f6db1f40d7d44	done	csharp	hamming	﻿using System;\r\n\r\npublic class Hamming\r\n{\r\n    public static int Compute(string firstStrand, string secondStrand)\r\n    {\r\n        int hammingDistance = 0;\r\n        int shorterStrandLength = Math.Min(firstStrand.Length, secondStrand.Length);\r\n        for (int index = 0; index < shorterStrandLength; index++)\r\n        {\r\n            if (firstStrand[index] != secondStrand[index])\r\n            {\r\n                hammingDistance++;\r\n            }\r\n        }\r\n\r\n        return hammingDistance;\r\n    }\r\n}\r	2015-01-17 10:47:24.546833	\N	0	1	2015-01-11 08:42:24	2015-01-11 08:42:24	30	Hamming.cs	{"Hamming.cs":"﻿using System;\\r\\n\\r\\npublic class Hamming\\r\\n{\\r\\n    public static int Compute(string firstStrand, string secondStrand)\\r\\n    {\\r\\n        int hammingDistance = 0;\\r\\n        int shorterStrandLength = Math.Min(firstStrand.Length, secondStrand.Length);\\r\\n        for (int index = 0; index \\u003c shorterStrandLength; index++)\\r\\n        {\\r\\n            if (firstStrand[index] != secondStrand[index])\\r\\n            {\\r\\n                hammingDistance++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return hammingDistance;\\r\\n    }\\r\\n}\\r"}
50	33	b1835de0104d22b7fa155e9c	pending	csharp	linked-list	﻿using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ExercismLinkedList\r\n{\r\n    public class DequeEmptyException : Exception { }\r\n\r\n    class Element<T>\r\n    {\r\n        public T Data { get; set; }\r\n        public Element<T> Previous { get; set; }\r\n        public Element<T> Next { get; set; }\r\n\r\n        public Element(T data)\r\n        {\r\n            Data = data;\r\n            Previous = this;\r\n            Next = this;\r\n        }\r\n    }\r\n\r\n    class Deque<T>\r\n    {\r\n        private Element<T> Front { get; set; }\r\n        public int Size { get; set; }\r\n\r\n        public Deque()\r\n        {\r\n            Front = null;\r\n            Size = 0;\r\n        }\r\n\r\n        public IEnumerable<T> EnumerateForward()\r\n        {\r\n            Element<T> node = Front;\r\n            for(int i=0; i<Size; i++)\r\n            {\r\n                yield return node.Data;\r\n                node = node.Next;\r\n            }\r\n        }\r\n\r\n        public IEnumerable<T> EnumerateBackward()\r\n        {\r\n            Element<T> node = (Front != null) ? Front.Previous : null;\r\n            for (int i = 0; i < Size; i++)\r\n            {\r\n                yield return node.Data;\r\n                node = node.Previous;\r\n            }\r\n        }\r\n\r\n        public Deque<T> Push(T data)\r\n        {\r\n            Add(data);\r\n            return this;\r\n        }\r\n\r\n        public T Pop()\r\n        {\r\n            if (Front == null) throw new DequeEmptyException();\r\n\r\n            return Remove(Front.Previous);\r\n        }\r\n\r\n        public Deque<T> Unshift(T data)\r\n        {\r\n            Front = Add(data);\r\n            return this;\r\n        }\r\n\r\n        public T Shift()\r\n        {\r\n            if (Front == null) throw new DequeEmptyException();\r\n            Front = Front.Next;\r\n            return Remove(Front.Previous);\r\n        }\r\n\r\n        private Element<T> Add(T data)\r\n        {\r\n            Element<T> node = new Element<T>(data);\r\n\r\n            if (Front == null)\r\n                Front = node;\r\n            else\r\n            {\r\n                node.Previous = Front.Previous;\r\n                node.Next = Front;\r\n\r\n                node.Previous.Next = node;\r\n                node.Next.Previous = node;\r\n            }\r\n\r\n            ++Size;\r\n            return node;\r\n        }\r\n\r\n        private T Remove(Element<T> node)\r\n        {\r\n            if (Size == 1)\r\n                Front = null;\r\n            else\r\n            {\r\n                node.Previous.Next = node.Next;\r\n                node.Next.Previous = node.Previous;\r\n\r\n                node.Next = null;\r\n                node.Previous = null;\r\n            }\r\n\r\n            --Size;\r\n            return node.Data;\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2015-01-14 23:07:28	2015-01-14 23:07:28	31	Deque.cs	{"Deque.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\n\\r\\nnamespace ExercismLinkedList\\r\\n{\\r\\n    public class DequeEmptyException : Exception { }\\r\\n\\r\\n    class Element\\u003cT\\u003e\\r\\n    {\\r\\n        public T Data { get; set; }\\r\\n        public Element\\u003cT\\u003e Previous { get; set; }\\r\\n        public Element\\u003cT\\u003e Next { get; set; }\\r\\n\\r\\n        public Element(T data)\\r\\n        {\\r\\n            Data = data;\\r\\n            Previous = this;\\r\\n            Next = this;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    class Deque\\u003cT\\u003e\\r\\n    {\\r\\n        private Element\\u003cT\\u003e Front { get; set; }\\r\\n        public int Size { get; set; }\\r\\n\\r\\n        public Deque()\\r\\n        {\\r\\n            Front = null;\\r\\n            Size = 0;\\r\\n        }\\r\\n\\r\\n        public IEnumerable\\u003cT\\u003e EnumerateForward()\\r\\n        {\\r\\n            Element\\u003cT\\u003e node = Front;\\r\\n            for(int i=0; i\\u003cSize; i++)\\r\\n            {\\r\\n                yield return node.Data;\\r\\n                node = node.Next;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        public IEnumerable\\u003cT\\u003e EnumerateBackward()\\r\\n        {\\r\\n            Element\\u003cT\\u003e node = (Front != null) ? Front.Previous : null;\\r\\n            for (int i = 0; i \\u003c Size; i++)\\r\\n            {\\r\\n                yield return node.Data;\\r\\n                node = node.Previous;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        public Deque\\u003cT\\u003e Push(T data)\\r\\n        {\\r\\n            Add(data);\\r\\n            return this;\\r\\n        }\\r\\n\\r\\n        public T Pop()\\r\\n        {\\r\\n            if (Front == null) throw new DequeEmptyException();\\r\\n\\r\\n            return Remove(Front.Previous);\\r\\n        }\\r\\n\\r\\n        public Deque\\u003cT\\u003e Unshift(T data)\\r\\n        {\\r\\n            Front = Add(data);\\r\\n            return this;\\r\\n        }\\r\\n\\r\\n        public T Shift()\\r\\n        {\\r\\n            if (Front == null) throw new DequeEmptyException();\\r\\n            Front = Front.Next;\\r\\n            return Remove(Front.Previous);\\r\\n        }\\r\\n\\r\\n        private Element\\u003cT\\u003e Add(T data)\\r\\n        {\\r\\n            Element\\u003cT\\u003e node = new Element\\u003cT\\u003e(data);\\r\\n\\r\\n            if (Front == null)\\r\\n                Front = node;\\r\\n            else\\r\\n            {\\r\\n                node.Previous = Front.Previous;\\r\\n                node.Next = Front;\\r\\n\\r\\n                node.Previous.Next = node;\\r\\n                node.Next.Previous = node;\\r\\n            }\\r\\n\\r\\n            ++Size;\\r\\n            return node;\\r\\n        }\\r\\n\\r\\n        private T Remove(Element\\u003cT\\u003e node)\\r\\n        {\\r\\n            if (Size == 1)\\r\\n                Front = null;\\r\\n            else\\r\\n            {\\r\\n                node.Previous.Next = node.Next;\\r\\n                node.Next.Previous = node.Previous;\\r\\n\\r\\n                node.Next = null;\\r\\n                node.Previous = null;\\r\\n            }\\r\\n\\r\\n            --Size;\\r\\n            return node.Data;\\r\\n        }\\r\\n    }\\r\\n}\\r"}
204	41	5c48996d322aaee739a8e762	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram?\n  [expression assignment]\n  (and (= (sort expression) (sort assignment))\n       (not (= expression assignment))))\n\n(defn anagrams-for\n  [word words]\n  (vec (filter (partial anagram? word) words)))	\N	\N	0	5	2014-08-01 09:28:26	2014-08-01 09:28:26	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn- anagram?\\n  [expression assignment]\\n  (and (= (sort expression) (sort assignment))\\n       (not (= expression assignment))))\\n\\n(defn anagrams-for\\n  [word words]\\n  (vec (filter (partial anagram? word) words)))"}
51	33	257481f3ba2de25e6583ec29	done	cpp	bob	#include<string>\n#include<algorithm>\n#include<regex>\n#include<cctype>\n/**\n Trade offs with this exercise was readability vs. performance. There is some duplication in checking values according to requirements, but the gain in readability makes a more maintainable solution.\n **/\nnamespace bob {\n        using std::string;\n        using std::toupper;\n        using std::regex;\n        using std::regex_search;\n        using std::transform;\n\n        string toUpper(string s) {\n            // toupper has a version in locale, need to cast it to the one we need\n            transform (s.begin(),s.end(),s.begin(),(int(*)(int))toupper);\n            return s;\n        }\n\n        bool hasAlpha(const string &s) {\n            return regex_search(s,regex("[A-Za-z]+"));\n        }\n\n        bool isAllSpace(const string &s) {\n            return regex_search(s,regex("^[ ]*$"));\n        }\n\n        bool isYelling(const string &s) {\n            return hasAlpha(s) and toUpper(s) == s;\n        }\n\n        bool isQuestion(const string &s) {\n            return !isYelling(s) and s.back() == '?';\n        }\n\n        bool isSayNothing(const string &s) {\n            return isAllSpace(s);\n        }\n        \n        bool isProperPhrase(const string &s) {\n            return hasAlpha(s) or isQuestion(s);\n        }\n\n        // the function\n        const string hey(const string &s) {\n      \n            string response;\n\n            if(isSayNothing(s)) {\n              response =  "Fine. Be that way!";\n            }\n            else if(isProperPhrase(s)){\n                if(isQuestion(s)) {\n                    response =  "Sure.";\n                }\n                else if(isYelling(s)) {\n                    response =  "Whoa, chill out!";\n                }\n                else {\n                    response =  "Whatever.";\n                }\n            }\n            else {\n                response =  "Whatever.";\n            }\n\n            return response;\n\t    }\n}	2015-01-14 12:15:31	\N	0	1	2015-01-06 08:02:30	2015-01-06 08:02:30	32	bob.h	{"bob.h":"#include\\u003cstring\\u003e\\n#include\\u003calgorithm\\u003e\\n#include\\u003cregex\\u003e\\n#include\\u003ccctype\\u003e\\n/**\\n Trade offs with this exercise was readability vs. performance. There is some duplication in checking values according to requirements, but the gain in readability makes a more maintainable solution.\\n **/\\nnamespace bob {\\n        using std::string;\\n        using std::toupper;\\n        using std::regex;\\n        using std::regex_search;\\n        using std::transform;\\n\\n        string toUpper(string s) {\\n            // toupper has a version in locale, need to cast it to the one we need\\n            transform (s.begin(),s.end(),s.begin(),(int(*)(int))toupper);\\n            return s;\\n        }\\n\\n        bool hasAlpha(const string \\u0026s) {\\n            return regex_search(s,regex(\\"[A-Za-z]+\\"));\\n        }\\n\\n        bool isAllSpace(const string \\u0026s) {\\n            return regex_search(s,regex(\\"^[ ]*$\\"));\\n        }\\n\\n        bool isYelling(const string \\u0026s) {\\n            return hasAlpha(s) and toUpper(s) == s;\\n        }\\n\\n        bool isQuestion(const string \\u0026s) {\\n            return !isYelling(s) and s.back() == '?';\\n        }\\n\\n        bool isSayNothing(const string \\u0026s) {\\n            return isAllSpace(s);\\n        }\\n        \\n        bool isProperPhrase(const string \\u0026s) {\\n            return hasAlpha(s) or isQuestion(s);\\n        }\\n\\n        // the function\\n        const string hey(const string \\u0026s) {\\n      \\n            string response;\\n\\n            if(isSayNothing(s)) {\\n              response =  \\"Fine. Be that way!\\";\\n            }\\n            else if(isProperPhrase(s)){\\n                if(isQuestion(s)) {\\n                    response =  \\"Sure.\\";\\n                }\\n                else if(isYelling(s)) {\\n                    response =  \\"Whoa, chill out!\\";\\n                }\\n                else {\\n                    response =  \\"Whatever.\\";\\n                }\\n            }\\n            else {\\n                response =  \\"Whatever.\\";\\n            }\\n\\n            return response;\\n\\t    }\\n}"}
52	33	1c3e29c7373eb70b6501eeaf	pending	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA = map conv\n  where\n    conv 'T' = 'U'\n    conv c = c	\N	\N	0	1	2015-01-09 10:40:33	2015-01-09 10:40:33	33	rna-transcription.hs	{"rna-transcription.hs":"module DNA where\\n\\ntoRNA :: String -\\u003e String\\ntoRNA = map conv\\n  where\\n    conv 'T' = 'U'\\n    conv c = c"}
53	33	1a9fd4c53e30f39140ea428e	done	python	rna-transcription	from string import maketrans\n\nclass DNA( str ):\n  'The test is incorrect. The README says to translate G->C, C->G, T->A, and A->U, but the test checks for T->U, which produces completely different results.'\n\n  incorrect_but_passes = maketrans('CGAT', 'CGAU')\n  #  correct_but_fails = maketrans('GCTA', 'CGAU')\n\n  def __init__(self, str):\n    self.str = str\n\n  def to_rna(self):\n    return self.str.translate(self.incorrect_but_passes)	2015-01-12 19:15:32	\N	0	1	2015-01-07 18:23:18	2015-01-07 18:23:18	34	dna.py	{"dna.py":"from string import maketrans\\n\\nclass DNA( str ):\\n  'The test is incorrect. The README says to translate G-\\u003eC, C-\\u003eG, T-\\u003eA, and A-\\u003eU, but the test checks for T-\\u003eU, which produces completely different results.'\\n\\n  incorrect_but_passes = maketrans('CGAT', 'CGAU')\\n  #  correct_but_fails = maketrans('GCTA', 'CGAU')\\n\\n  def __init__(self, str):\\n    self.str = str\\n\\n  def to_rna(self):\\n    return self.str.translate(self.incorrect_but_passes)"}
54	33	e7c51c86aa90862406269c89	done	csharp	twelve-days	﻿using System;\r\nusing System.Linq;\r\n\r\nnamespace twelve_days\r\n{\r\n    public class TwelveDaysSong\r\n    {\r\n        private static readonly string[] _items =\r\n        {\r\n            "a Partridge in a Pear Tree",\r\n            "two Turtle Doves",\r\n            "three French Hens",\r\n            "four Calling Birds",\r\n            "five Gold Rings",\r\n            "six Geese-a-Laying",\r\n            "seven Swans-a-Swimming",\r\n            "eight Maids-a-Milking",\r\n            "nine Ladies Dancing",\r\n            "ten Lords-a-Leaping",\r\n            "eleven Pipers Piping",\r\n            "twelve Drummers Drumming"\r\n        };\r\n\r\n        private static readonly string[] _dayNames =\r\n        {\r\n            "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth"\r\n        };\r\n\r\n        public string Verse(int verseNumber)\r\n        {\r\n            if (verseNumber < 1 || verseNumber > _items.Length)\r\n                throw new ArgumentOutOfRangeException("verseNumber", "Must be between 1 and 12.");\r\n\r\n            return string.Format("On the {0} day of Christmas my true love gave to me, {1}.\\n",\r\n                _dayNames[verseNumber - 1],\r\n                string.Join(", ", _items\r\n                    .TakeWhile((item, index) => index < verseNumber)\r\n                    .Reverse()\r\n                    .Select((item, index) => index < verseNumber - 1 ? item : (verseNumber > 1 ? "and " + item : item))));\r\n        }\r\n\r\n        public string Verses(int startingVerse, int endingVerse)\r\n        {\r\n            return string.Join("", Enumerable.Range(startingVerse, endingVerse - startingVerse + 1).Select(verse => Verse(verse) + "\\n"));\r\n        }\r\n\r\n        public string Sing()\r\n        {\r\n            return Verses(1, 12);\r\n        }\r\n    }\r\n}\r	2015-01-13 16:43:56	\N	0	1	2015-01-11 14:06:31	2015-01-11 14:06:31	35	TwelveDaysSong.cs	{"TwelveDaysSong.cs":"﻿using System;\\r\\nusing System.Linq;\\r\\n\\r\\nnamespace twelve_days\\r\\n{\\r\\n    public class TwelveDaysSong\\r\\n    {\\r\\n        private static readonly string[] _items =\\r\\n        {\\r\\n            \\"a Partridge in a Pear Tree\\",\\r\\n            \\"two Turtle Doves\\",\\r\\n            \\"three French Hens\\",\\r\\n            \\"four Calling Birds\\",\\r\\n            \\"five Gold Rings\\",\\r\\n            \\"six Geese-a-Laying\\",\\r\\n            \\"seven Swans-a-Swimming\\",\\r\\n            \\"eight Maids-a-Milking\\",\\r\\n            \\"nine Ladies Dancing\\",\\r\\n            \\"ten Lords-a-Leaping\\",\\r\\n            \\"eleven Pipers Piping\\",\\r\\n            \\"twelve Drummers Drumming\\"\\r\\n        };\\r\\n\\r\\n        private static readonly string[] _dayNames =\\r\\n        {\\r\\n            \\"first\\", \\"second\\", \\"third\\", \\"fourth\\", \\"fifth\\", \\"sixth\\", \\"seventh\\", \\"eighth\\", \\"ninth\\", \\"tenth\\", \\"eleventh\\", \\"twelfth\\"\\r\\n        };\\r\\n\\r\\n        public string Verse(int verseNumber)\\r\\n        {\\r\\n            if (verseNumber \\u003c 1 || verseNumber \\u003e _items.Length)\\r\\n                throw new ArgumentOutOfRangeException(\\"verseNumber\\", \\"Must be between 1 and 12.\\");\\r\\n\\r\\n            return string.Format(\\"On the {0} day of Christmas my true love gave to me, {1}.\\\\n\\",\\r\\n                _dayNames[verseNumber - 1],\\r\\n                string.Join(\\", \\", _items\\r\\n                    .TakeWhile((item, index) =\\u003e index \\u003c verseNumber)\\r\\n                    .Reverse()\\r\\n                    .Select((item, index) =\\u003e index \\u003c verseNumber - 1 ? item : (verseNumber \\u003e 1 ? \\"and \\" + item : item))));\\r\\n        }\\r\\n\\r\\n        public string Verses(int startingVerse, int endingVerse)\\r\\n        {\\r\\n            return string.Join(\\"\\", Enumerable.Range(startingVerse, endingVerse - startingVerse + 1).Select(verse =\\u003e Verse(verse) + \\"\\\\n\\"));\\r\\n        }\\r\\n\\r\\n        public string Sing()\\r\\n        {\\r\\n            return Verses(1, 12);\\r\\n        }\\r\\n    }\\r\\n}\\r"}
55	38	627fe1c1e3802ce60c2770ac	done	haskell	scrabble-score	module Scrabble (scoreLetter, scoreWord) where\n\nimport Data.Char (toLower)\nimport Data.Maybe (fromMaybe)\nimport qualified Data.Map as M\n\nletters :: M.Map Char Int\nletters = M.fromList\n  [ ('a',  1), ('b',  3), ('c',  3), ('d',  2), ('e',  1)\n  , ('f',  4), ('g',  2), ('h',  4), ('i',  1), ('j',  8)\n  , ('k',  5), ('l',  1), ('m',  3), ('n',  1), ('o',  1)\n  , ('p',  3), ('q', 10), ('r',  1), ('s',  1), ('t',  1)\n  , ('u',  1), ('v',  4), ('w',  4), ('x',  8), ('y',  4)\n  , ('z', 10) ]\n\nscoreLetter :: Char -> Int\nscoreLetter c = fromMaybe 0 $ M.lookup (toLower c) letters\n\nscoreWord :: String -> Int\nscoreWord = sum . map scoreLetter	2014-12-20 09:20:43	\N	0	1	2014-12-14 04:15:08	2014-12-14 04:15:08	36	scrabble-score.hs	{"scrabble-score.hs":"module Scrabble (scoreLetter, scoreWord) where\\n\\nimport Data.Char (toLower)\\nimport Data.Maybe (fromMaybe)\\nimport qualified Data.Map as M\\n\\nletters :: M.Map Char Int\\nletters = M.fromList\\n  [ ('a',  1), ('b',  3), ('c',  3), ('d',  2), ('e',  1)\\n  , ('f',  4), ('g',  2), ('h',  4), ('i',  1), ('j',  8)\\n  , ('k',  5), ('l',  1), ('m',  3), ('n',  1), ('o',  1)\\n  , ('p',  3), ('q', 10), ('r',  1), ('s',  1), ('t',  1)\\n  , ('u',  1), ('v',  4), ('w',  4), ('x',  8), ('y',  4)\\n  , ('z', 10) ]\\n\\nscoreLetter :: Char -\\u003e Int\\nscoreLetter c = fromMaybe 0 $ M.lookup (toLower c) letters\\n\\nscoreWord :: String -\\u003e Int\\nscoreWord = sum . map scoreLetter"}
56	38	f8cc213872bcae5514bd4461	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @chars = characters_histogram(word)\n  end\n\n  def match(possible_matches)\n    possible_matches.select {|possible_match| anagram?(possible_match) }\n  end\n\n  private\n    def anagram?(word)\n      @chars == characters_histogram(word)\n    end\n\n    def characters_histogram(word)\n      word.split("").inject({}) do |characters, char|\n        characters[char] ||= 0\n        characters[char] += 1\n        characters\n      end\n    end\nend	2014-12-24 15:37:23	\N	0	1	2014-12-19 06:59:16	2014-12-19 06:59:16	37	anagram.rb	{"anagram.rb":"class Anagram\\n  def initialize(word)\\n    @chars = characters_histogram(word)\\n  end\\n\\n  def match(possible_matches)\\n    possible_matches.select {|possible_match| anagram?(possible_match) }\\n  end\\n\\n  private\\n    def anagram?(word)\\n      @chars == characters_histogram(word)\\n    end\\n\\n    def characters_histogram(word)\\n      word.split(\\"\\").inject({}) do |characters, char|\\n        characters[char] ||= 0\\n        characters[char] += 1\\n        characters\\n      end\\n    end\\nend"}
57	38	ffc36914b60a613ed4114617	done	python	etl	"""Extract-Transform-Load."""\n\n\ndef transform(dic):\n    """Transform {k: [..., v, ...]} into {v.lower(): k}."""\n    return {v.lower(): k for k, vs in dic.iteritems() for v in vs}	2014-12-17 13:11:22	\N	0	1	2014-12-15 04:06:34	2014-12-15 04:06:34	38	etl.py	{"etl.py":"\\"\\"\\"Extract-Transform-Load.\\"\\"\\"\\n\\n\\ndef transform(dic):\\n    \\"\\"\\"Transform {k: [..., v, ...]} into {v.lower(): k}.\\"\\"\\"\\n    return {v.lower(): k for k, vs in dic.iteritems() for v in vs}"}
58	38	48c5cf009ef14b92f91405ef	done	javascript	etl	function transform (obj) {\n\tvar newobj = {};\n\tfor(var key in obj){\n\t\tfor(var i = 0;i<obj[key].length;i++){\n\t\t\tnewobj[obj[key][i].toLowerCase()] = Number(key);\n\t\t}\n\t}\n\treturn newobj;\n}\n\nmodule.exports = transform;	2014-12-19 18:00:36	\N	0	1	2014-12-09 05:28:07	2014-12-09 05:28:07	39	etl.js	{"etl.js":"function transform (obj) {\\n\\tvar newobj = {};\\n\\tfor(var key in obj){\\n\\t\\tfor(var i = 0;i\\u003cobj[key].length;i++){\\n\\t\\t\\tnewobj[obj[key][i].toLowerCase()] = Number(key);\\n\\t\\t}\\n\\t}\\n\\treturn newobj;\\n}\\n\\nmodule.exports = transform;"}
205	41	9e59d9cfc5799ca5f2787d64	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [word words]\n\n  (defn- anagram?\n    [assignment]\n    (and (= (sort word) (sort assignment))\n         (not (= word assignment))))\n\n  (filter anagram? words))	\N	\N	0	9	2014-08-17 18:00:56	2014-08-17 18:00:56	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn anagrams-for\\n  [word words]\\n\\n  (defn- anagram?\\n    [assignment]\\n    (and (= (sort word) (sort assignment))\\n         (not (= word assignment))))\\n\\n  (filter anagram? words))"}
59	38	e780c311c6e7e19aadfd7661	pending	ruby	phone-number	class PhoneNumber\n  attr_reader :number_string\n\n  def initialize(number_string)\n    @number_string = number_string\n  end\n\n  def area_code\n    number.slice(0, 3)\n  end\n\n  def to_s\n    "(#{area_code}) #{head}-#{tail}"\n  end\n\n  def number\n    @number ||= validated_number\n  end\n\n  private\n\n  def head\n    number.slice(3, 3)\n  end\n\n  def tail\n    number.slice(6, 4)\n  end\n\n  def validated_number\n    pattern_match || invalid_number\n  end\n  \n  def pattern_match\n    patterns.map {|sym| send sym }.detect {|x| x }\n  end\n\n  def patterns\n    [\n      :includes_letters,\n      :ten_digit_number,\n      :eleven_digit_number\n    ]\n  end\n\n  def includes_letters\n    invalid_number if number_string.match /[a-zA-Z]/\n  end\n\n  def ten_digit_number\n    numbers_only if numbers_only.size == 10\n  end\n\n  def eleven_digit_number\n    numbers_only.slice(1, 10) if numbers_only.size == 11 && numbers_only[0] == "1"\n  end\n\n  def numbers_only\n    @numbers_only ||= number_string.gsub(/[^0-9]/,"")\n  end\n\n  def invalid_number\n    "0000000000"\n  end\nend	\N	\N	0	1	2014-12-23 16:44:00	2014-12-23 16:44:00	40	phone_number.rb	{"phone_number.rb":"class PhoneNumber\\n  attr_reader :number_string\\n\\n  def initialize(number_string)\\n    @number_string = number_string\\n  end\\n\\n  def area_code\\n    number.slice(0, 3)\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{head}-#{tail}\\"\\n  end\\n\\n  def number\\n    @number ||= validated_number\\n  end\\n\\n  private\\n\\n  def head\\n    number.slice(3, 3)\\n  end\\n\\n  def tail\\n    number.slice(6, 4)\\n  end\\n\\n  def validated_number\\n    pattern_match || invalid_number\\n  end\\n  \\n  def pattern_match\\n    patterns.map {|sym| send sym }.detect {|x| x }\\n  end\\n\\n  def patterns\\n    [\\n      :includes_letters,\\n      :ten_digit_number,\\n      :eleven_digit_number\\n    ]\\n  end\\n\\n  def includes_letters\\n    invalid_number if number_string.match /[a-zA-Z]/\\n  end\\n\\n  def ten_digit_number\\n    numbers_only if numbers_only.size == 10\\n  end\\n\\n  def eleven_digit_number\\n    numbers_only.slice(1, 10) if numbers_only.size == 11 \\u0026\\u0026 numbers_only[0] == \\"1\\"\\n  end\\n\\n  def numbers_only\\n    @numbers_only ||= number_string.gsub(/[^0-9]/,\\"\\")\\n  end\\n\\n  def invalid_number\\n    \\"0000000000\\"\\n  end\\nend"}
60	38	32fdc2a197f2e9d2d54dcec2	done	ruby	binary-search-tree	class Bst\n  attr_reader :left\n  attr_reader :right\n  attr_reader :data\n\n  def initialize data, parent=nil\n    @parent = parent\n    @data   = data\n  end\n\n  def insert data\n    if data <= @data then\n      if left then\n        left.insert data\n      else\n        @left = Bst.new data, self\n      end\n    else\n      if right then\n        right.insert data\n      else\n        @right = Bst.new data, self\n      end\n    end\n  end\n\n  def each &block\n    to_a.map(&:data).each(&block)\n  end\n\n  def to_a\n    [left ? left.to_a : [], self, right ? right.to_a : []].flatten\n  end\n\nend	2014-12-30 11:47:53	\N	0	1	2014-12-20 21:25:42	2014-12-20 21:25:42	41	bst.rb	{"bst.rb":"class Bst\\n  attr_reader :left\\n  attr_reader :right\\n  attr_reader :data\\n\\n  def initialize data, parent=nil\\n    @parent = parent\\n    @data   = data\\n  end\\n\\n  def insert data\\n    if data \\u003c= @data then\\n      if left then\\n        left.insert data\\n      else\\n        @left = Bst.new data, self\\n      end\\n    else\\n      if right then\\n        right.insert data\\n      else\\n        @right = Bst.new data, self\\n      end\\n    end\\n  end\\n\\n  def each \\u0026block\\n    to_a.map(\\u0026:data).each(\\u0026block)\\n  end\\n\\n  def to_a\\n    [left ? left.to_a : [], self, right ? right.to_a : []].flatten\\n  end\\n\\nend"}
61	38	f3bf81ce330d7d87aa2a7112	superseded	csharp	leap	﻿public static class Year\r\n{\r\n    public static bool IsLeap(int year)\r\n    {\r\n        return year.IsDivisibleByFour() && year.IsNot1900();\r\n    }\r\n\r\n    public static bool IsNot1900(this int year)\r\n    {\r\n        return year != 1900;\r\n    }\r\n\r\n    private static bool IsDivisibleByFour(this int year)\r\n    {\r\n        return year % 4 == 0;\r\n    }\r\n}	\N	\N	0	1	2014-12-20 22:41:36	2014-12-20 22:41:36	42	Leap.cs	{"Leap.cs":"﻿public static class Year\\r\\n{\\r\\n    public static bool IsLeap(int year)\\r\\n    {\\r\\n        return year.IsDivisibleByFour() \\u0026\\u0026 year.IsNot1900();\\r\\n    }\\r\\n\\r\\n    public static bool IsNot1900(this int year)\\r\\n    {\\r\\n        return year != 1900;\\r\\n    }\\r\\n\\r\\n    private static bool IsDivisibleByFour(this int year)\\r\\n    {\\r\\n        return year % 4 == 0;\\r\\n    }\\r\\n}"}
62	38	3d7ac3b63e13f991c418d5b8	pending	csharp	leap	﻿namespace Leap\r\n{\r\n    using System;\r\n\r\n    using NUnit.Framework;\r\n\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                var yearToCheck = Convert.ToInt32(args);\r\n\r\n                var isLeap = Year.IsLeap(yearToCheck);\r\n\r\n                if (isLeap)\r\n                    Console.WriteLine("The year entered ({0}) is a leap year.", yearToCheck);\r\n            }\r\n            catch (Exception)\r\n            {\r\n                Console.WriteLine("Unable to check the input.");\r\n            }\r\n            finally\r\n            {\r\n                Console.WriteLine("Press any key to exit.");\r\n                Console.ReadKey();\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class Year\r\n    {\r\n        public static bool IsLeap(int year)\r\n        {\r\n            return year.IsDivisibleByFour() &&\r\n                year.IsNotAnException();\r\n        }\r\n\r\n        private static bool IsNotAnException(this int year)\r\n        {\r\n            return year.IsNotDivisibleBy100() || year.IsDivisibleBy400();\r\n        }\r\n\r\n        private static bool IsNotDivisibleBy100(this int year)\r\n        {\r\n            return year % 100 != 0;\r\n        }\r\n\r\n        private static bool IsDivisibleBy400(this int year)\r\n        {\r\n            return year % 400 == 0;\r\n        }\r\n\r\n        private static bool IsDivisibleByFour(this int year)\r\n        {\r\n            return year % 4 == 0;\r\n        }\r\n    }\r\n\r\n    [TestFixture]\r\n    public class LeapTest\r\n    {\r\n        [TestCase(1996, true)]\r\n        [TestCase(1997, false)]\r\n        [TestCase(1800, false)]\r\n        [TestCase(1900, false)]\r\n        [TestCase(2000, true)]\r\n        [TestCase(2008, true)]\r\n        [TestCase(2400, true)]\r\n        public void ItShouldCheckIfItIsALeapYear(int yearToCheck, bool expectedResult)\r\n        {\r\n            Assert.That(Year.IsLeap(yearToCheck), Is.EqualTo(expectedResult));\r\n        }\r\n    }\r\n\r\n}	\N	\N	0	2	2014-12-27 21:35:35	2014-12-27 21:35:35	42	Leap.cs	{"Leap.cs":"﻿namespace Leap\\r\\n{\\r\\n    using System;\\r\\n\\r\\n    using NUnit.Framework;\\r\\n\\r\\n    public class Program\\r\\n    {\\r\\n        static void Main(string[] args)\\r\\n        {\\r\\n            try\\r\\n            {\\r\\n                var yearToCheck = Convert.ToInt32(args);\\r\\n\\r\\n                var isLeap = Year.IsLeap(yearToCheck);\\r\\n\\r\\n                if (isLeap)\\r\\n                    Console.WriteLine(\\"The year entered ({0}) is a leap year.\\", yearToCheck);\\r\\n            }\\r\\n            catch (Exception)\\r\\n            {\\r\\n                Console.WriteLine(\\"Unable to check the input.\\");\\r\\n            }\\r\\n            finally\\r\\n            {\\r\\n                Console.WriteLine(\\"Press any key to exit.\\");\\r\\n                Console.ReadKey();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public static class Year\\r\\n    {\\r\\n        public static bool IsLeap(int year)\\r\\n        {\\r\\n            return year.IsDivisibleByFour() \\u0026\\u0026\\r\\n                year.IsNotAnException();\\r\\n        }\\r\\n\\r\\n        private static bool IsNotAnException(this int year)\\r\\n        {\\r\\n            return year.IsNotDivisibleBy100() || year.IsDivisibleBy400();\\r\\n        }\\r\\n\\r\\n        private static bool IsNotDivisibleBy100(this int year)\\r\\n        {\\r\\n            return year % 100 != 0;\\r\\n        }\\r\\n\\r\\n        private static bool IsDivisibleBy400(this int year)\\r\\n        {\\r\\n            return year % 400 == 0;\\r\\n        }\\r\\n\\r\\n        private static bool IsDivisibleByFour(this int year)\\r\\n        {\\r\\n            return year % 4 == 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    [TestFixture]\\r\\n    public class LeapTest\\r\\n    {\\r\\n        [TestCase(1996, true)]\\r\\n        [TestCase(1997, false)]\\r\\n        [TestCase(1800, false)]\\r\\n        [TestCase(1900, false)]\\r\\n        [TestCase(2000, true)]\\r\\n        [TestCase(2008, true)]\\r\\n        [TestCase(2400, true)]\\r\\n        public void ItShouldCheckIfItIsALeapYear(int yearToCheck, bool expectedResult)\\r\\n        {\\r\\n            Assert.That(Year.IsLeap(yearToCheck), Is.EqualTo(expectedResult));\\r\\n        }\\r\\n    }\\r\\n\\r\\n}"}
103	49	84fc3a13177c8fc9f4ce032f	pending	go	robot-name	package robotname\r\n\r\nimport (\r\n\t"fmt"\r\n\t"math/rand"\r\n)\r\n\r\ntype Robot struct {\r\n\tname string\r\n}\r\n\r\nfunc (r *Robot) Name() string {\r\n\tif r.name == "" {\r\n\t\tr.name = fmt.Sprintf("%c%c%03d",\r\n\t\t\t'A'+byte(rand.Intn(26)),\r\n\t\t\t'A'+byte(rand.Intn(26)),\r\n\t\t\trand.Intn(1000),\r\n\t\t)\r\n\t}\r\n\treturn r.name\r\n}\r\n\r\nfunc (r *Robot) Reset() {\r\n\t*r = Robot{}\r\n}\r	\N	\N	0	2	2014-05-15 04:42:33	2014-05-15 04:42:33	59	robot_name.go	{"robot_name.go":"package robotname\\r\\n\\r\\nimport (\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"math/rand\\"\\r\\n)\\r\\n\\r\\ntype Robot struct {\\r\\n\\tname string\\r\\n}\\r\\n\\r\\nfunc (r *Robot) Name() string {\\r\\n\\tif r.name == \\"\\" {\\r\\n\\t\\tr.name = fmt.Sprintf(\\"%c%c%03d\\",\\r\\n\\t\\t\\t'A'+byte(rand.Intn(26)),\\r\\n\\t\\t\\t'A'+byte(rand.Intn(26)),\\r\\n\\t\\t\\trand.Intn(1000),\\r\\n\\t\\t)\\r\\n\\t}\\r\\n\\treturn r.name\\r\\n}\\r\\n\\r\\nfunc (r *Robot) Reset() {\\r\\n\\t*r = Robot{}\\r\\n}\\r"}
63	40	28e63bd5261403bd14626a25	done	ruby	hamming	class Hamming\n  def self.compute(herp, derp)\n  \therpArray = herp.split(//)\n  \tderpArray = derp.split(//)\n  \t# puts ""\n  \t# puts "herpArray is #{herpArray}"\n  \t# puts "derp is #{derp}"\n  \t@numberOfMatches = 0\n  \titerator = 0\n  \twhile iterator < herpArray.length\n  \t\tif herpArray[iterator] != derpArray[iterator]\n  \t\t\t# puts "#{herpArray[iterator]} is equal to #{derpArray[iterator]}"\n  \t\t\t@numberOfMatches += 1\n  \t\tend\n  \t\titerator += 1\n  \tend\n\n  \treturn @numberOfMatches\n  end\n\n  # puts self.compute('A', 'A')\nend	2014-11-22 11:44:15	\N	0	2	2014-11-16 19:27:41	2014-11-16 19:27:41	43	hamming.rb	{"hamming.rb":"class Hamming\\n  def self.compute(herp, derp)\\n  \\therpArray = herp.split(//)\\n  \\tderpArray = derp.split(//)\\n  \\t# puts \\"\\"\\n  \\t# puts \\"herpArray is #{herpArray}\\"\\n  \\t# puts \\"derp is #{derp}\\"\\n  \\t@numberOfMatches = 0\\n  \\titerator = 0\\n  \\twhile iterator \\u003c herpArray.length\\n  \\t\\tif herpArray[iterator] != derpArray[iterator]\\n  \\t\\t\\t# puts \\"#{herpArray[iterator]} is equal to #{derpArray[iterator]}\\"\\n  \\t\\t\\t@numberOfMatches += 1\\n  \\t\\tend\\n  \\t\\titerator += 1\\n  \\tend\\n\\n  \\treturn @numberOfMatches\\n  end\\n\\n  # puts self.compute('A', 'A')\\nend"}
64	40	f166a573658b233ad20000ac	superseded	ruby	hamming	class Hamming\n  def self.compute(herp, derp)\n  \therpArray = herp.split(//)\n  \tderpArray = derp.split(//)\n  \tputs ""\n  \tputs "herpArray is #{herpArray}"\n  \tputs "derp is #{derp}"\n  \t@numberOfMatches = 0\n  \t# herpArray.each  {|val, index | puts "#{val} => #{index}" }\n  \t# \tputs "#{val} => #{index}"\n  \t# \tif herpArray[index].to_s.eql? derpArray[index].to_s\n  \t# \t\tputs "#{herpArray[index]} is equal to #{derpArray[index]}"\n  \t# \telse\n  \t# \t\tputs "Incrementing the number of matches because #{h} matches"\n  \t# \t\t@numberOfMatches += 1\n  \t# \tend\n  \tend\n\n  \treturn @numberOfMatches\n  end\n\n  puts self.compute('AGA', 'AGG')\nend	\N	\N	0	1	2014-12-17 20:55:57	2014-12-17 20:55:57	43	hamming.rb	{"hamming.rb":"class Hamming\\n  def self.compute(herp, derp)\\n  \\therpArray = herp.split(//)\\n  \\tderpArray = derp.split(//)\\n  \\tputs \\"\\"\\n  \\tputs \\"herpArray is #{herpArray}\\"\\n  \\tputs \\"derp is #{derp}\\"\\n  \\t@numberOfMatches = 0\\n  \\t# herpArray.each  {|val, index | puts \\"#{val} =\\u003e #{index}\\" }\\n  \\t# \\tputs \\"#{val} =\\u003e #{index}\\"\\n  \\t# \\tif herpArray[index].to_s.eql? derpArray[index].to_s\\n  \\t# \\t\\tputs \\"#{herpArray[index]} is equal to #{derpArray[index]}\\"\\n  \\t# \\telse\\n  \\t# \\t\\tputs \\"Incrementing the number of matches because #{h} matches\\"\\n  \\t# \\t\\t@numberOfMatches += 1\\n  \\t# \\tend\\n  \\tend\\n\\n  \\treturn @numberOfMatches\\n  end\\n\\n  puts self.compute('AGA', 'AGG')\\nend"}
65	40	d49e537e8e0442e8f9012ef8	superseded	go	nucleotide-count	// John G. Beckett / JohnGB\n// 20.05.2014\n\npackage dna\n\nimport (\n\t"fmt"\n)\n\ntype DNA struct {\n\tstrand string\n}\n\ntype Histogram map[string]int\n\n// newHistogram returns an empty initialised Histogram\nfunc newHistogram() Histogram {\n\treturn Histogram{"A": 0, "C": 0, "T": 0, "G": 0}\n}\n\n// Counts returns a histogram of the nucleotide counts in the dna strand s\nfunc (s DNA) Counts() Histogram {\n\thist := newHistogram()\n\tfor _, char := range s.strand {\n\t\tswitch char {\n\t\tcase 'A':\n\t\t\thist["A"]++\n\t\tcase 'C':\n\t\t\thist["C"]++\n\t\tcase 'T':\n\t\t\thist["T"]++\n\t\tcase 'G':\n\t\t\thist["G"]++\n\t\tdefault:\n\t\t\treturn newHistogram()\n\t\t}\n\t}\n\treturn hist\n}\n\n// Count counts the number of occurrences of the nucleotide ncl in the dna\n// strand s.  It returns the count and an error if the nucleotide ncl is\n// invalid.  It accepts invalid nucleotides in the dna strand, but ignores\n// them.\nfunc (s DNA) Count(ncl string) (int, error) {\n\n\tswitch {\n\t// ncl empty\n\tcase len(ncl) == 0:\n\t\treturn 0, fmt.Errorf("No nucleotide specified.")\n\t// ncl too long\n\tcase len(ncl) > 1:\n\t\treturn 0, fmt.Errorf("Nucleotide too long. Given as %s, but only a single nucleotide may be specified.", ncl)\n\t// ncl invalid\n\tcase ncl != "A" && ncl != "C" && ncl != "G" && ncl != "T":\n\t\treturn 0, fmt.Errorf("Nucleotide invalid. Given as %s, but only A, C, G, or T are valid ", ncl)\n\t}\n\n\tcount := 0\n\tfor _, char := range s.strand {\n\t\tif char == rune(ncl[0]) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count, nil\n}	\N	\N	0	1	2014-11-23 01:36:47	2014-11-23 01:36:47	44	nucleotide_count.go	{"nucleotide_count.go":"// John G. Beckett / JohnGB\\n// 20.05.2014\\n\\npackage dna\\n\\nimport (\\n\\t\\"fmt\\"\\n)\\n\\ntype DNA struct {\\n\\tstrand string\\n}\\n\\ntype Histogram map[string]int\\n\\n// newHistogram returns an empty initialised Histogram\\nfunc newHistogram() Histogram {\\n\\treturn Histogram{\\"A\\": 0, \\"C\\": 0, \\"T\\": 0, \\"G\\": 0}\\n}\\n\\n// Counts returns a histogram of the nucleotide counts in the dna strand s\\nfunc (s DNA) Counts() Histogram {\\n\\thist := newHistogram()\\n\\tfor _, char := range s.strand {\\n\\t\\tswitch char {\\n\\t\\tcase 'A':\\n\\t\\t\\thist[\\"A\\"]++\\n\\t\\tcase 'C':\\n\\t\\t\\thist[\\"C\\"]++\\n\\t\\tcase 'T':\\n\\t\\t\\thist[\\"T\\"]++\\n\\t\\tcase 'G':\\n\\t\\t\\thist[\\"G\\"]++\\n\\t\\tdefault:\\n\\t\\t\\treturn newHistogram()\\n\\t\\t}\\n\\t}\\n\\treturn hist\\n}\\n\\n// Count counts the number of occurrences of the nucleotide ncl in the dna\\n// strand s.  It returns the count and an error if the nucleotide ncl is\\n// invalid.  It accepts invalid nucleotides in the dna strand, but ignores\\n// them.\\nfunc (s DNA) Count(ncl string) (int, error) {\\n\\n\\tswitch {\\n\\t// ncl empty\\n\\tcase len(ncl) == 0:\\n\\t\\treturn 0, fmt.Errorf(\\"No nucleotide specified.\\")\\n\\t// ncl too long\\n\\tcase len(ncl) \\u003e 1:\\n\\t\\treturn 0, fmt.Errorf(\\"Nucleotide too long. Given as %s, but only a single nucleotide may be specified.\\", ncl)\\n\\t// ncl invalid\\n\\tcase ncl != \\"A\\" \\u0026\\u0026 ncl != \\"C\\" \\u0026\\u0026 ncl != \\"G\\" \\u0026\\u0026 ncl != \\"T\\":\\n\\t\\treturn 0, fmt.Errorf(\\"Nucleotide invalid. Given as %s, but only A, C, G, or T are valid \\", ncl)\\n\\t}\\n\\n\\tcount := 0\\n\\tfor _, char := range s.strand {\\n\\t\\tif char == rune(ncl[0]) {\\n\\t\\t\\tcount++\\n\\t\\t}\\n\\t}\\n\\treturn count, nil\\n}"}
66	40	5b1dd1c1d4451841b2ef6729	superseded	go	nucleotide-count	// John G. Beckett / JohnGB\n// 20.05.2014\n\npackage dna\n\nimport (\n\t"fmt"\n\t"strings"\n)\n\ntype DNA struct {\n\tstrand string\n}\n\ntype Histogram map[string]int\n\nvar validNucleotides string = "ACTG"\n\n// newHistogram returns an empty initialised Histogram\nfunc newHistogram() Histogram {\n\th := make(Histogram)\n\tfor _, nuc := range validNucleotides {\n\t\th[string(nuc)] = 0\n\t}\n\treturn h\n}\n\n// Counts returns a histogram of the nucleotide counts in the dna strand s.\n// Invalid nucleotides in the strand are ignored.\nfunc (s DNA) Counts() Histogram {\n\thist := newHistogram()\n\tfor _, char := range s.strand {\n\t\t// if char is a valid nucleotide string\n\t\tif strings.Contains(validNucleotides, string(char)) {\n\t\t\thist[string(char)]++\n\t\t}\n\t}\n\treturn hist\n}\n\n// Count counts the number of occurrences of the nucleotide ncl in the dna\n// strand s.  It returns the count and an error if the nucleotide ncl is\n// invalid.  It accepts invalid nucleotides in the dna strand, but ignores\n// them.\nfunc (s DNA) Count(ncl string) (int, error) {\n\n\tswitch {\n\t// ncl empty\n\tcase len(ncl) == 0:\n\t\treturn 0, fmt.Errorf("No nucleotide specified.")\n\t// ncl too long\n\tcase len(ncl) > 1:\n\t\treturn 0, fmt.Errorf("Nucleotide too long. Given as %s, but only a single nucleotide may be specified.", ncl)\n\t// ncl invalid\n\tcase !strings.Contains(validNucleotides, ncl):\n\t\treturn 0, fmt.Errorf("Nucleotide invalid. Given as %s, but only A, C, G, or T are valid ", ncl)\n\t}\n\n\t// count occurrences of ncl in DNA strand s\n\tcount := 0\n\tfor _, char := range s.strand {\n\t\tif char == rune(ncl[0]) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count, nil\n}	\N	\N	0	2	2014-12-07 13:29:13	2014-12-07 13:29:13	44	nucleotide_count.go	{"nucleotide_count.go":"// John G. Beckett / JohnGB\\n// 20.05.2014\\n\\npackage dna\\n\\nimport (\\n\\t\\"fmt\\"\\n\\t\\"strings\\"\\n)\\n\\ntype DNA struct {\\n\\tstrand string\\n}\\n\\ntype Histogram map[string]int\\n\\nvar validNucleotides string = \\"ACTG\\"\\n\\n// newHistogram returns an empty initialised Histogram\\nfunc newHistogram() Histogram {\\n\\th := make(Histogram)\\n\\tfor _, nuc := range validNucleotides {\\n\\t\\th[string(nuc)] = 0\\n\\t}\\n\\treturn h\\n}\\n\\n// Counts returns a histogram of the nucleotide counts in the dna strand s.\\n// Invalid nucleotides in the strand are ignored.\\nfunc (s DNA) Counts() Histogram {\\n\\thist := newHistogram()\\n\\tfor _, char := range s.strand {\\n\\t\\t// if char is a valid nucleotide string\\n\\t\\tif strings.Contains(validNucleotides, string(char)) {\\n\\t\\t\\thist[string(char)]++\\n\\t\\t}\\n\\t}\\n\\treturn hist\\n}\\n\\n// Count counts the number of occurrences of the nucleotide ncl in the dna\\n// strand s.  It returns the count and an error if the nucleotide ncl is\\n// invalid.  It accepts invalid nucleotides in the dna strand, but ignores\\n// them.\\nfunc (s DNA) Count(ncl string) (int, error) {\\n\\n\\tswitch {\\n\\t// ncl empty\\n\\tcase len(ncl) == 0:\\n\\t\\treturn 0, fmt.Errorf(\\"No nucleotide specified.\\")\\n\\t// ncl too long\\n\\tcase len(ncl) \\u003e 1:\\n\\t\\treturn 0, fmt.Errorf(\\"Nucleotide too long. Given as %s, but only a single nucleotide may be specified.\\", ncl)\\n\\t// ncl invalid\\n\\tcase !strings.Contains(validNucleotides, ncl):\\n\\t\\treturn 0, fmt.Errorf(\\"Nucleotide invalid. Given as %s, but only A, C, G, or T are valid \\", ncl)\\n\\t}\\n\\n\\t// count occurrences of ncl in DNA strand s\\n\\tcount := 0\\n\\tfor _, char := range s.strand {\\n\\t\\tif char == rune(ncl[0]) {\\n\\t\\t\\tcount++\\n\\t\\t}\\n\\t}\\n\\treturn count, nil\\n}"}
69	40	83ed8ff979aed80b2e3a1d24	done	haskell	anagram	module Anagram(anagramsFor) where\n\nimport Data.Map.Strict(Map, fromListWith)\nimport Data.Char(toLower)\n\n\ngetCountByLetter :: String -> Map Char Integer\ngetCountByLetter = fromListWith (+) . map (\\x -> (toLower x,1))\n\nnormalizeWord :: String -> String\nnormalizeWord = map toLower\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter isAnagram where\n    normalizedWord = normalizeWord word\n    countByLetter = getCountByLetter normalizedWord\n    isAnagram otherWord =\n        normalizedOtherWord /= normalizedWord && countByLetter == getCountByLetter normalizedOtherWord where\n            normalizedOtherWord = normalizeWord otherWord	2014-12-04 03:00:05	\N	0	3	2014-11-24 09:33:56	2014-11-24 09:33:56	45	Anagram.hs	{"Anagram.hs":"module Anagram(anagramsFor) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\nimport Data.Char(toLower)\\n\\n\\ngetCountByLetter :: String -\\u003e Map Char Integer\\ngetCountByLetter = fromListWith (+) . map (\\\\x -\\u003e (toLower x,1))\\n\\nnormalizeWord :: String -\\u003e String\\nnormalizeWord = map toLower\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor word = filter isAnagram where\\n    normalizedWord = normalizeWord word\\n    countByLetter = getCountByLetter normalizedWord\\n    isAnagram otherWord =\\n        normalizedOtherWord /= normalizedWord \\u0026\\u0026 countByLetter == getCountByLetter normalizedOtherWord where\\n            normalizedOtherWord = normalizeWord otherWord"}
67	40	1d862b845658738eb0735d97	done	go	nucleotide-count	// John G. Beckett / JohnGB\n// 20.05.2014\n\npackage dna\n\nimport (\n\t"fmt"\n\t"strings"\n)\n\ntype DNA struct {\n\tstrand string\n}\n\ntype Histogram map[string]int\n\nvar validNucleotides string = "ACTG"\n\n// newHistogram returns an empty initialised Histogram\nfunc newHistogram() Histogram {\n\th := make(Histogram)\n\tfor _, nuc := range validNucleotides {\n\t\th[string(nuc)] = 0\n\t}\n\treturn h\n}\n\n// Counts returns a histogram of the nucleotide counts in the dna strand s.\n// Invalid nucleotides in the strand are ignored.\nfunc (s DNA) Counts() Histogram {\n\thist := newHistogram()\n\tfor _, char := range s.strand {\n\t\t// if char is not valid nucleotide string\n\t\tif !strings.Contains(validNucleotides, string(char)) {\n\t\t\treturn Histogram{}\n\t\t}\n\t\t// increment the histogram count for char\n\t\thist[string(char)]++\n\t}\n\treturn hist\n}\n\n// Count counts the number of occurrences of the nucleotide ncl in the dna\n// strand s.  It returns the count and an error if the nucleotide ncl is\n// invalid.  It accepts invalid nucleotides in the dna strand, but ignores\n// them.\nfunc (s DNA) Count(ncl string) (int, error) {\n\n\tswitch {\n\t// ncl empty\n\tcase len(ncl) == 0:\n\t\treturn 0, fmt.Errorf("No nucleotide specified.")\n\t// ncl too long\n\tcase len(ncl) > 1:\n\t\treturn 0, fmt.Errorf("Nucleotide too long. Given as %s, but only a single nucleotide may be specified.", ncl)\n\t// ncl invalid\n\tcase !strings.Contains(validNucleotides, ncl):\n\t\treturn 0, fmt.Errorf("Nucleotide invalid. Given as %s, but only A, C, G, or T are valid ", ncl)\n\t}\n\n\t// count occurrences of ncl in DNA strand s\n\tcount := 0\n\tfor _, char := range s.strand {\n\t\tif char == rune(ncl[0]) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count, nil\n}	2014-12-22 08:53:29	\N	0	3	2014-12-21 10:47:47	2014-12-21 10:47:47	44	nucleotide_count.go	{"nucleotide_count.go":"// John G. Beckett / JohnGB\\n// 20.05.2014\\n\\npackage dna\\n\\nimport (\\n\\t\\"fmt\\"\\n\\t\\"strings\\"\\n)\\n\\ntype DNA struct {\\n\\tstrand string\\n}\\n\\ntype Histogram map[string]int\\n\\nvar validNucleotides string = \\"ACTG\\"\\n\\n// newHistogram returns an empty initialised Histogram\\nfunc newHistogram() Histogram {\\n\\th := make(Histogram)\\n\\tfor _, nuc := range validNucleotides {\\n\\t\\th[string(nuc)] = 0\\n\\t}\\n\\treturn h\\n}\\n\\n// Counts returns a histogram of the nucleotide counts in the dna strand s.\\n// Invalid nucleotides in the strand are ignored.\\nfunc (s DNA) Counts() Histogram {\\n\\thist := newHistogram()\\n\\tfor _, char := range s.strand {\\n\\t\\t// if char is not valid nucleotide string\\n\\t\\tif !strings.Contains(validNucleotides, string(char)) {\\n\\t\\t\\treturn Histogram{}\\n\\t\\t}\\n\\t\\t// increment the histogram count for char\\n\\t\\thist[string(char)]++\\n\\t}\\n\\treturn hist\\n}\\n\\n// Count counts the number of occurrences of the nucleotide ncl in the dna\\n// strand s.  It returns the count and an error if the nucleotide ncl is\\n// invalid.  It accepts invalid nucleotides in the dna strand, but ignores\\n// them.\\nfunc (s DNA) Count(ncl string) (int, error) {\\n\\n\\tswitch {\\n\\t// ncl empty\\n\\tcase len(ncl) == 0:\\n\\t\\treturn 0, fmt.Errorf(\\"No nucleotide specified.\\")\\n\\t// ncl too long\\n\\tcase len(ncl) \\u003e 1:\\n\\t\\treturn 0, fmt.Errorf(\\"Nucleotide too long. Given as %s, but only a single nucleotide may be specified.\\", ncl)\\n\\t// ncl invalid\\n\\tcase !strings.Contains(validNucleotides, ncl):\\n\\t\\treturn 0, fmt.Errorf(\\"Nucleotide invalid. Given as %s, but only A, C, G, or T are valid \\", ncl)\\n\\t}\\n\\n\\t// count occurrences of ncl in DNA strand s\\n\\tcount := 0\\n\\tfor _, char := range s.strand {\\n\\t\\tif char == rune(ncl[0]) {\\n\\t\\t\\tcount++\\n\\t\\t}\\n\\t}\\n\\treturn count, nil\\n}"}
68	40	677a1deb991f7312ba0c08bd	superseded	haskell	anagram	module Anagram(anagramsFor) where\n\nimport Data.Map.Strict(Map, fromListWith)\nimport Data.Char(toLower)\n\n\ngetCountByLetter :: String -> Map Char Integer\ngetCountByLetter word =\n    fromListWith (+) $ map (\\x -> (toLower x,1)) word\n\nnormalizeWord :: String -> String\nnormalizeWord word =\n    map toLower word\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word possibleAnagrams = filter isAnagram possibleAnagrams where\n    normalizedWord = normalizeWord word\n    countByLetter = getCountByLetter normalizedWord\n    isAnagram otherWord =\n        normalizedOtherWord /= normalizedWord && countByLetter == getCountByLetter normalizedOtherWord where\n            normalizedOtherWord = normalizeWord otherWord	\N	\N	0	1	2014-11-15 12:26:15	2014-11-15 12:26:15	45	Anagram.hs	{"Anagram.hs":"module Anagram(anagramsFor) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\nimport Data.Char(toLower)\\n\\n\\ngetCountByLetter :: String -\\u003e Map Char Integer\\ngetCountByLetter word =\\n    fromListWith (+) $ map (\\\\x -\\u003e (toLower x,1)) word\\n\\nnormalizeWord :: String -\\u003e String\\nnormalizeWord word =\\n    map toLower word\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor word possibleAnagrams = filter isAnagram possibleAnagrams where\\n    normalizedWord = normalizeWord word\\n    countByLetter = getCountByLetter normalizedWord\\n    isAnagram otherWord =\\n        normalizedOtherWord /= normalizedWord \\u0026\\u0026 countByLetter == getCountByLetter normalizedOtherWord where\\n            normalizedOtherWord = normalizeWord otherWord"}
94	46	3b54415b653553d408fa50d6	pending	ruby	gigasecond	class Gigasecond\n\n  def self.from(date)\n  \t(date.to_time + self.gigasecs).to_date\n  end\n\n\tdef self.gigasecs\n\t\t10**9\n\tend\nend	\N	\N	0	2	2014-11-26 02:51:46	2014-11-26 02:51:46	54	/ruby/gigasecond/gigasecond.rb	{"/ruby/gigasecond/gigasecond.rb":"class Gigasecond\\n\\n  def self.from(date)\\n  \\t(date.to_time + self.gigasecs).to_date\\n  end\\n\\n\\tdef self.gigasecs\\n\\t\\t10**9\\n\\tend\\nend"}
70	40	0641041cb6d17f60a08c0ab7	superseded	haskell	anagram	module Anagram(anagramsFor) where\n\nimport Data.Map.Strict(Map, fromListWith)\nimport Data.Char(toLower)\n\n\ngetCountByLetter :: String -> Map Char Integer\ngetCountByLetter = fromListWith (+) . map (\\x -> (toLower x,1))\n\nnormalizeWord :: String -> String\nnormalizeWord = map toLower\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word possibleAnagrams = filter isAnagram possibleAnagrams where\n    normalizedWord = normalizeWord word\n    countByLetter = getCountByLetter normalizedWord\n    isAnagram otherWord =\n        normalizedOtherWord /= normalizedWord && countByLetter == getCountByLetter normalizedOtherWord where\n            normalizedOtherWord = normalizeWord otherWord	\N	\N	0	2	2014-12-24 12:29:02	2014-12-24 12:29:02	45	Anagram.hs	{"Anagram.hs":"module Anagram(anagramsFor) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\nimport Data.Char(toLower)\\n\\n\\ngetCountByLetter :: String -\\u003e Map Char Integer\\ngetCountByLetter = fromListWith (+) . map (\\\\x -\\u003e (toLower x,1))\\n\\nnormalizeWord :: String -\\u003e String\\nnormalizeWord = map toLower\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor word possibleAnagrams = filter isAnagram possibleAnagrams where\\n    normalizedWord = normalizeWord word\\n    countByLetter = getCountByLetter normalizedWord\\n    isAnagram otherWord =\\n        normalizedOtherWord /= normalizedWord \\u0026\\u0026 countByLetter == getCountByLetter normalizedOtherWord where\\n            normalizedOtherWord = normalizeWord otherWord"}
71	40	f74c29cf35d07c69a94492de	done	haskell	bob	module Bob\nwhere\n\nimport Data.List\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor s | all isSpace s = "Fine. Be that way!"\nresponseFor s | map toUpper s == s && map toLower s /= s = "Woah, chill out!"\nresponseFor s | isSuffixOf "?" s = "Sure."\nresponseFor _ = "Whatever."	2014-12-09 05:43:46	\N	0	1	2014-12-02 23:13:22	2014-12-02 23:13:22	46	bob.hs	{"bob.hs":"module Bob\\nwhere\\n\\nimport Data.List\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor s | all isSpace s = \\"Fine. Be that way!\\"\\nresponseFor s | map toUpper s == s \\u0026\\u0026 map toLower s /= s = \\"Woah, chill out!\\"\\nresponseFor s | isSuffixOf \\"?\\" s = \\"Sure.\\"\\nresponseFor _ = \\"Whatever.\\""}
72	40	3103aaac9feb8e3bb7d8073d	done	scala	bob	class Bob {\n  def isUpperCase(s: String) = s.toUpperCase == s &&\n                               s.matches("^(?=.*[a-zA-Z]).*$")\n\n  def hey(input: String): String = input.trim match {\n    case "" => "Fine. Be that way!"\n    case x if isUpperCase(x) ||\n              x.endsWith("!") &&\n              x.split("(?<=\\\\W)(?=\\\\w)|(?<=\\\\w)(?=\\\\W)").exists(isUpperCase) => "Whoa, chill out!"\n    case x if x.endsWith("?") => "Sure."\n    case _ => "Whatever."\n  }\n}	2014-12-03 06:12:30	\N	0	1	2014-12-02 02:29:20	2014-12-02 02:29:20	47	Bob.scala	{"Bob.scala":"class Bob {\\n  def isUpperCase(s: String) = s.toUpperCase == s \\u0026\\u0026\\n                               s.matches(\\"^(?=.*[a-zA-Z]).*$\\")\\n\\n  def hey(input: String): String = input.trim match {\\n    case \\"\\" =\\u003e \\"Fine. Be that way!\\"\\n    case x if isUpperCase(x) ||\\n              x.endsWith(\\"!\\") \\u0026\\u0026\\n              x.split(\\"(?\\u003c=\\\\\\\\W)(?=\\\\\\\\w)|(?\\u003c=\\\\\\\\w)(?=\\\\\\\\W)\\").exists(isUpperCase) =\\u003e \\"Whoa, chill out!\\"\\n    case x if x.endsWith(\\"?\\") =\\u003e \\"Sure.\\"\\n    case _ =\\u003e \\"Whatever.\\"\\n  }\\n}"}
114	26	0d357b0989bd9139fcda617e	superseded	clojure	rna-transcription	(ns dna)\n\n(def ^{:private true}\n  transcription { \\G \\C\n                  \\C \\G\n                  \\T \\A\n                  \\A \\U })\n\n\n(defn to-rna [dna]\n  (let [transcribed (map transcription (vec dna))]\n    (assert (not (some nil? transcribed)))\n    (apply str transcribed)))	\N	\N	0	1	2015-01-13 07:49:26	2015-01-13 07:49:26	63	dna.clj	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true}\\n  transcription { \\\\G \\\\C\\n                  \\\\C \\\\G\\n                  \\\\T \\\\A\\n                  \\\\A \\\\U })\\n\\n\\n(defn to-rna [dna]\\n  (let [transcribed (map transcription (vec dna))]\\n    (assert (not (some nil? transcribed)))\\n    (apply str transcribed)))"}
73	40	c2e1f33a15a1eb55f47b3948	done	ruby	meetup	class Meetup\r\n  @@ROUND = {\r\n    first:  0,\r\n    second: 1,\r\n    third:  2,\r\n    fourth: 3\r\n  }\r\n\r\n  def initialize(mon, year)\r\n    @mon, @year = mon, year\r\n  end\r\n\r\n  def day(weekday, special)\r\n    weekdays = [:monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday]\r\n    raise ArgumentError, 'unknown weekday' unless weekdays.include?(weekday)\r\n\r\n    # first day in the month\r\n    date = Date.new(@year, @mon, 1)\r\n\r\n    date += 1 until date.send "#{weekday}?"\r\n    case special\r\n    when :teenth\r\n      date += 7 until date.day.between?(13, 19)\r\n    when :last\r\n      # last day in the month\r\n      date = Date.new(*@year, @mon, -1)\r\n      date -= 1 until date.send "#{weekday}?"\r\n    else\r\n      date += 7 * @@ROUND[special]\r\n    end\r\n    date\r\n  end\r\nend\r	2014-12-18 03:07:23	\N	0	2	2014-12-08 01:03:24	2014-12-08 01:03:24	48	meetup.rb	{"meetup.rb":"class Meetup\\r\\n  @@ROUND = {\\r\\n    first:  0,\\r\\n    second: 1,\\r\\n    third:  2,\\r\\n    fourth: 3\\r\\n  }\\r\\n\\r\\n  def initialize(mon, year)\\r\\n    @mon, @year = mon, year\\r\\n  end\\r\\n\\r\\n  def day(weekday, special)\\r\\n    weekdays = [:monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday]\\r\\n    raise ArgumentError, 'unknown weekday' unless weekdays.include?(weekday)\\r\\n\\r\\n    # first day in the month\\r\\n    date = Date.new(@year, @mon, 1)\\r\\n\\r\\n    date += 1 until date.send \\"#{weekday}?\\"\\r\\n    case special\\r\\n    when :teenth\\r\\n      date += 7 until date.day.between?(13, 19)\\r\\n    when :last\\r\\n      # last day in the month\\r\\n      date = Date.new(*@year, @mon, -1)\\r\\n      date -= 1 until date.send \\"#{weekday}?\\"\\r\\n    else\\r\\n      date += 7 * @@ROUND[special]\\r\\n    end\\r\\n    date\\r\\n  end\\r\\nend\\r"}
74	40	f0d6017772a5adf0d8cabe9c	superseded	ruby	meetup	class Meetup\r\n  @@WEEKDAY_MAP = {\r\n    sunday:     0,\r\n    monday:     1,\r\n    tuesday:    2,\r\n    wednesday:  3,\r\n    thursday:   4,\r\n    friday:     5,\r\n    saturday:   6\r\n  }\r\n  @@ROUND = {\r\n    first:  0,\r\n    second: 1,\r\n    third:  2,\r\n    fourth: 3\r\n  }\r\n\r\n  def initialize mon, year\r\n    @mon, @year = mon, year\r\n  end\r\n\r\n  def day weekday, special\r\n    # first day of the month\r\n    date = Date.new(@year, @mon, 1)\r\n\r\n    date += 1 until date.wday == @@WEEKDAY_MAP[weekday]\r\n    case special\r\n    when :teenth\r\n      date += 7 until date.day.between?(13, 19)\r\n    when :last\r\n      # last day of the month\r\n      date = Date.new(*@year, @mon, -1)\r\n      date -= 1 until date.wday == @@WEEKDAY_MAP[weekday]\r\n    else\r\n      date += 7 * @@ROUND[special]\r\n    end\r\n    date\r\n  end\r\nend\r	\N	\N	0	1	2014-12-15 02:56:49	2014-12-15 02:56:49	48	meetup.rb	{"meetup.rb":"class Meetup\\r\\n  @@WEEKDAY_MAP = {\\r\\n    sunday:     0,\\r\\n    monday:     1,\\r\\n    tuesday:    2,\\r\\n    wednesday:  3,\\r\\n    thursday:   4,\\r\\n    friday:     5,\\r\\n    saturday:   6\\r\\n  }\\r\\n  @@ROUND = {\\r\\n    first:  0,\\r\\n    second: 1,\\r\\n    third:  2,\\r\\n    fourth: 3\\r\\n  }\\r\\n\\r\\n  def initialize mon, year\\r\\n    @mon, @year = mon, year\\r\\n  end\\r\\n\\r\\n  def day weekday, special\\r\\n    # first day of the month\\r\\n    date = Date.new(@year, @mon, 1)\\r\\n\\r\\n    date += 1 until date.wday == @@WEEKDAY_MAP[weekday]\\r\\n    case special\\r\\n    when :teenth\\r\\n      date += 7 until date.day.between?(13, 19)\\r\\n    when :last\\r\\n      # last day of the month\\r\\n      date = Date.new(*@year, @mon, -1)\\r\\n      date -= 1 until date.wday == @@WEEKDAY_MAP[weekday]\\r\\n    else\\r\\n      date += 7 * @@ROUND[special]\\r\\n    end\\r\\n    date\\r\\n  end\\r\\nend\\r"}
75	40	95a6e0d3c72e6e9ebcf1af9e	superseded	ruby	twelve-days	class TwelveDaysSong\n  def verse(number)\n    "#{first_part number}#{join_gifts(gifts number)}.\\n"\n  end\n\n  def verses(first, last)\n    first.upto(last).map { |number| verse number }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses 1, 12\n  end\n\n  NUMBER_WORDS = { 1 =>  "first", \n                   2 =>  "second",\n                   3 =>  "third",\n                   4 =>  "fourth",\n                   5 =>  "fifth",\n                   6 =>  "sixth",\n                   7 =>  "seventh",\n                   8 =>  "eighth",\n                   9 =>  "ninth",\n                   10 => "tenth",\n                   11 => "eleventh",\n                   12 => "twelfth" }\n\n\n  GIFTS_BY_DAY = { 1 =>  "a Partridge in a Pear Tree",\n                   2 =>  "two Turtle Doves",\n                   3 =>  "three French Hens",\n                   4 =>  "four Calling Birds",\n                   5 =>  "five Gold Rings",\n                   6 =>  "six Geese-a-Laying",\n                   7 =>  "seven Swans-a-Swimming",\n                   8 =>  "eight Maids-a-Milking",\n                   9 =>  "nine Ladies Dancing",\n                   10 => "ten Lords-a-Leaping",\n                   11 => "eleven Pipers Piping",\n                   12 => "twelve Drummers Drumming" }                   \n\n  def first_part(number)\n    "On the #{NUMBER_WORDS[number]} day of Christmas my true love gave to me, "\n  end\n\n  def gifts(number)\n    number.downto(1).with_object([]) do |day, presents|\n      presents << GIFTS_BY_DAY[day]\n    end\n  end\n\n  def join_gifts(gifts)\n    gifts[-1] = "and #{gifts[-1]}" if gifts.length > 1\n    gifts.join ", "\n  end\nend	\N	\N	0	1	2014-12-18 19:53:51	2014-12-18 19:53:51	49	twelve_days.rb	{"twelve_days.rb":"class TwelveDaysSong\\n  def verse(number)\\n    \\"#{first_part number}#{join_gifts(gifts number)}.\\\\n\\"\\n  end\\n\\n  def verses(first, last)\\n    first.upto(last).map { |number| verse number }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses 1, 12\\n  end\\n\\n  NUMBER_WORDS = { 1 =\\u003e  \\"first\\", \\n                   2 =\\u003e  \\"second\\",\\n                   3 =\\u003e  \\"third\\",\\n                   4 =\\u003e  \\"fourth\\",\\n                   5 =\\u003e  \\"fifth\\",\\n                   6 =\\u003e  \\"sixth\\",\\n                   7 =\\u003e  \\"seventh\\",\\n                   8 =\\u003e  \\"eighth\\",\\n                   9 =\\u003e  \\"ninth\\",\\n                   10 =\\u003e \\"tenth\\",\\n                   11 =\\u003e \\"eleventh\\",\\n                   12 =\\u003e \\"twelfth\\" }\\n\\n\\n  GIFTS_BY_DAY = { 1 =\\u003e  \\"a Partridge in a Pear Tree\\",\\n                   2 =\\u003e  \\"two Turtle Doves\\",\\n                   3 =\\u003e  \\"three French Hens\\",\\n                   4 =\\u003e  \\"four Calling Birds\\",\\n                   5 =\\u003e  \\"five Gold Rings\\",\\n                   6 =\\u003e  \\"six Geese-a-Laying\\",\\n                   7 =\\u003e  \\"seven Swans-a-Swimming\\",\\n                   8 =\\u003e  \\"eight Maids-a-Milking\\",\\n                   9 =\\u003e  \\"nine Ladies Dancing\\",\\n                   10 =\\u003e \\"ten Lords-a-Leaping\\",\\n                   11 =\\u003e \\"eleven Pipers Piping\\",\\n                   12 =\\u003e \\"twelve Drummers Drumming\\" }                   \\n\\n  def first_part(number)\\n    \\"On the #{NUMBER_WORDS[number]} day of Christmas my true love gave to me, \\"\\n  end\\n\\n  def gifts(number)\\n    number.downto(1).with_object([]) do |day, presents|\\n      presents \\u003c\\u003c GIFTS_BY_DAY[day]\\n    end\\n  end\\n\\n  def join_gifts(gifts)\\n    gifts[-1] = \\"and #{gifts[-1]}\\" if gifts.length \\u003e 1\\n    gifts.join \\", \\"\\n  end\\nend"}
121	7	806582569b79449912c5ac13	pending	ruby	sum-of-multiples	class SumOfMultiples\n\n\tdef initialize(*multiples)\n\t\t@multiples = multiples\n\tend\n\n\tdef to(limit)\n\t\tsum = 0\n\t\t(0...limit).each do |n|\n\t\t\tsum += n if @multiples.any? { |multiple| n % multiple == 0 }\n\t\tend\n\t\tsum\n\tend\n\n\tdef self.to(limit)\n\t\tnew(3, 5).to(limit)\n\tend\n\nend	\N	\N	0	1	2014-10-30 05:04:30	2014-10-30 05:04:30	70	sum.rb	{"sum.rb":"class SumOfMultiples\\n\\n\\tdef initialize(*multiples)\\n\\t\\t@multiples = multiples\\n\\tend\\n\\n\\tdef to(limit)\\n\\t\\tsum = 0\\n\\t\\t(0...limit).each do |n|\\n\\t\\t\\tsum += n if @multiples.any? { |multiple| n % multiple == 0 }\\n\\t\\tend\\n\\t\\tsum\\n\\tend\\n\\n\\tdef self.to(limit)\\n\\t\\tnew(3, 5).to(limit)\\n\\tend\\n\\nend"}
76	40	d08ea86a7bce1ab43a4d24ee	done	ruby	twelve-days	class TwelveDaysSong\n  def verse(day)\n    @day = day\n    "#{my_love_gave_to_me} #{all_kinds_of_gifts}.\\n"\n  end\n\n  def verses(first, last)\n    combine first.upto(last).map { |day| verse day }\n  end\n\n  def sing\n    verses 1, 12\n  end\n\nprivate \n  Phrase = Struct.new(:nth, :gift)\n\n  PHRASES = {  1 => Phrase.new("first",    "a Partridge in a Pear Tree"), \n               2 => Phrase.new("second",   "two Turtle Doves"),\n               3 => Phrase.new("third",    "three French Hens"),\n               4 => Phrase.new("fourth",   "four Calling Birds"),\n               5 => Phrase.new("fifth",    "five Gold Rings"),\n               6 => Phrase.new("sixth",    "six Geese-a-Laying"),\n               7 => Phrase.new("seventh",  "seven Swans-a-Swimming"),\n               8 => Phrase.new("eighth",   "eight Maids-a-Milking"),\n               9 => Phrase.new("ninth",    "nine Ladies Dancing"),\n              10 => Phrase.new("tenth",    "ten Lords-a-Leaping"),\n              11 => Phrase.new("eleventh", "eleven Pipers Piping"), \n              12 => Phrase.new("twelfth",  "twelve Drummers Drumming") }\n                \n\n  def my_love_gave_to_me\n    "On the #{nth} day of Christmas my true love gave to me,"\n  end\n\n  def nth\n    PHRASES[@day].nth\n  end\n\n  def all_kinds_of_gifts\n    concat @day.downto(1).map { |day| gift_of day }\n  end\n\n  def gift_of(day)\n    PHRASES[day].gift\n  end\n\n  def concat(gifts)\n    gifts[-1] = "and #{gifts[-1]}" if gifts.length > 1\n    gifts.join ", "\n  end\n\n  def combine(verses)\n    verses.join("\\n") + "\\n"\n  end\nend	2015-01-08 03:28:32	\N	0	2	2015-01-02 15:41:46	2015-01-02 15:41:46	49	twelve_days.rb	{"twelve_days.rb":"class TwelveDaysSong\\n  def verse(day)\\n    @day = day\\n    \\"#{my_love_gave_to_me} #{all_kinds_of_gifts}.\\\\n\\"\\n  end\\n\\n  def verses(first, last)\\n    combine first.upto(last).map { |day| verse day }\\n  end\\n\\n  def sing\\n    verses 1, 12\\n  end\\n\\nprivate \\n  Phrase = Struct.new(:nth, :gift)\\n\\n  PHRASES = {  1 =\\u003e Phrase.new(\\"first\\",    \\"a Partridge in a Pear Tree\\"), \\n               2 =\\u003e Phrase.new(\\"second\\",   \\"two Turtle Doves\\"),\\n               3 =\\u003e Phrase.new(\\"third\\",    \\"three French Hens\\"),\\n               4 =\\u003e Phrase.new(\\"fourth\\",   \\"four Calling Birds\\"),\\n               5 =\\u003e Phrase.new(\\"fifth\\",    \\"five Gold Rings\\"),\\n               6 =\\u003e Phrase.new(\\"sixth\\",    \\"six Geese-a-Laying\\"),\\n               7 =\\u003e Phrase.new(\\"seventh\\",  \\"seven Swans-a-Swimming\\"),\\n               8 =\\u003e Phrase.new(\\"eighth\\",   \\"eight Maids-a-Milking\\"),\\n               9 =\\u003e Phrase.new(\\"ninth\\",    \\"nine Ladies Dancing\\"),\\n              10 =\\u003e Phrase.new(\\"tenth\\",    \\"ten Lords-a-Leaping\\"),\\n              11 =\\u003e Phrase.new(\\"eleventh\\", \\"eleven Pipers Piping\\"), \\n              12 =\\u003e Phrase.new(\\"twelfth\\",  \\"twelve Drummers Drumming\\") }\\n                \\n\\n  def my_love_gave_to_me\\n    \\"On the #{nth} day of Christmas my true love gave to me,\\"\\n  end\\n\\n  def nth\\n    PHRASES[@day].nth\\n  end\\n\\n  def all_kinds_of_gifts\\n    concat @day.downto(1).map { |day| gift_of day }\\n  end\\n\\n  def gift_of(day)\\n    PHRASES[day].gift\\n  end\\n\\n  def concat(gifts)\\n    gifts[-1] = \\"and #{gifts[-1]}\\" if gifts.length \\u003e 1\\n    gifts.join \\", \\"\\n  end\\n\\n  def combine(verses)\\n    verses.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\nend"}
77	40	b4fa4bf4ee88f983bcaa999f	pending	javascript	pythagorean-triplet	function Triplet(numA, numB, numC){\r\n\tthis.sum = function(){\r\n\t\treturn numA + numB + numC;\r\n\t}\r\n\t\r\n\tthis.product = function(){\r\n\t\treturn numA * numB * numC;\r\n\t}\r\n\t\r\n\tthis.isPythagorean = function(){\r\n\t\treturn Math.pow(numA, 2) + Math.pow(numB, 2) === Math.pow(numC, 2);\r\n\t}\r\n}\r\n\r\nTriplet.where = function(input){\r\n\tresult = [];\r\n\tif(!input.minFactor) {var lowEnd = 2}\r\n\telse {var lowEnd = input.minFactor}\r\n\tvar highEnd = input.maxFactor;\r\n\tfor(var i = lowEnd; i < highEnd - 1; i++){\r\n\t\tfor(var j = i + 1;j < highEnd; j++){\r\n\t\t\tfor(var k = j + 1;k <= highEnd; k++){\r\n\t\t\t\tvar tempTrip = new Triplet(i, j, k);\r\n\t\t\t\tif(tempTrip.isPythagorean()){\r\n\t\t\t\t\tif(input.sum){\r\n\t\t\t\t\t\tif(input.sum === tempTrip.sum()){\r\n\t\t\t\t\t\t\tresult.push(tempTrip);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\tresult.push(tempTrip);}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nmodule.exports = Triplet;	\N	\N	0	1	2014-12-22 15:31:51	2014-12-22 15:31:51	50	pythagorean-triplet.js	{"pythagorean-triplet.js":"function Triplet(numA, numB, numC){\\r\\n\\tthis.sum = function(){\\r\\n\\t\\treturn numA + numB + numC;\\r\\n\\t}\\r\\n\\t\\r\\n\\tthis.product = function(){\\r\\n\\t\\treturn numA * numB * numC;\\r\\n\\t}\\r\\n\\t\\r\\n\\tthis.isPythagorean = function(){\\r\\n\\t\\treturn Math.pow(numA, 2) + Math.pow(numB, 2) === Math.pow(numC, 2);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nTriplet.where = function(input){\\r\\n\\tresult = [];\\r\\n\\tif(!input.minFactor) {var lowEnd = 2}\\r\\n\\telse {var lowEnd = input.minFactor}\\r\\n\\tvar highEnd = input.maxFactor;\\r\\n\\tfor(var i = lowEnd; i \\u003c highEnd - 1; i++){\\r\\n\\t\\tfor(var j = i + 1;j \\u003c highEnd; j++){\\r\\n\\t\\t\\tfor(var k = j + 1;k \\u003c= highEnd; k++){\\r\\n\\t\\t\\t\\tvar tempTrip = new Triplet(i, j, k);\\r\\n\\t\\t\\t\\tif(tempTrip.isPythagorean()){\\r\\n\\t\\t\\t\\t\\tif(input.sum){\\r\\n\\t\\t\\t\\t\\t\\tif(input.sum === tempTrip.sum()){\\r\\n\\t\\t\\t\\t\\t\\t\\tresult.push(tempTrip);\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tresult.push(tempTrip);}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn result;\\r\\n}\\r\\n\\r\\nmodule.exports = Triplet;"}
78	40	1c26b265b124605d78ac9ff3	pending	ruby	raindrops	class Raindrops\n  RAINDROP_SPEAK = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong",\n  }\n\n  def self.convert(number)\n    rain_speak = add_words(number)\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  def self.add_words(number)\n    RAINDROP_SPEAK.select do |factor|\n      number % factor == 0\n    end.values.join\n  end\n\n  private_class_method :add_words\nend	\N	\N	0	11	2014-11-24 21:58:20	2014-11-24 21:58:20	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n  RAINDROP_SPEAK = {\\n    3 =\\u003e \\"Pling\\",\\n    5 =\\u003e \\"Plang\\",\\n    7 =\\u003e \\"Plong\\",\\n  }\\n\\n  def self.convert(number)\\n    rain_speak = add_words(number)\\n\\n    if rain_speak.empty?\\n      rain_speak \\u003c\\u003c number.to_s\\n    end\\n\\n    rain_speak\\n  end\\n\\n  def self.add_words(number)\\n    RAINDROP_SPEAK.select do |factor|\\n      number % factor == 0\\n    end.values.join\\n  end\\n\\n  private_class_method :add_words\\nend"}
79	40	44399d70ba4dcac42fb8ca2e	superseded	ruby	raindrops	class Raindrops\n  def convert(number)\n    rain_speak = []\n\n    prime_factors_speak.keys.each do |prime_factor|\n     if number % prime_factor == 0\n      rain_speak << prime_factors_speak[prime_factor]\n     end\n    end\n\n    output(rain_speak, number)\n  end\n\n  def prime_factors_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\n\n  def output(speak, number)\n    if speak.empty?\n      number.to_s\n    else\n      speak.join\n    end\n  end\n\nend	\N	\N	0	1	2014-11-25 02:39:32	2014-11-25 02:39:32	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n  def convert(number)\\n    rain_speak = []\\n\\n    prime_factors_speak.keys.each do |prime_factor|\\n     if number % prime_factor == 0\\n      rain_speak \\u003c\\u003c prime_factors_speak[prime_factor]\\n     end\\n    end\\n\\n    output(rain_speak, number)\\n  end\\n\\n  def prime_factors_speak\\n    {3 =\\u003e  \\"Pling\\",5 =\\u003e \\"Plang\\",7 =\\u003e \\"Plong\\"}\\n  end\\n\\n  def output(speak, number)\\n    if speak.empty?\\n      number.to_s\\n    else\\n      speak.join\\n    end\\n  end\\n\\nend"}
80	40	6ff5f5649e002b75065f9f25	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = []\n    raindrop_speak.keys.each do |prime_factor|\n      if number % prime_factor == 0\n        rain_speak << raindrop_speak[prime_factor]\n      end\n    end\n\n    output(rain_speak, number)\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\n\n  def output(speak, number)\n    if speak.empty?\n      number.to_s\n    else\n      speak.join\n    end\n  end\n\nend	\N	\N	0	2	2014-11-28 19:31:28	2014-11-28 19:31:28	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n\\n  def convert(number)\\n    rain_speak = []\\n    raindrop_speak.keys.each do |prime_factor|\\n      if number % prime_factor == 0\\n        rain_speak \\u003c\\u003c raindrop_speak[prime_factor]\\n      end\\n    end\\n\\n    output(rain_speak, number)\\n  end\\n\\n  def raindrop_speak\\n    {3 =\\u003e  \\"Pling\\",5 =\\u003e \\"Plang\\",7 =\\u003e \\"Plong\\"}\\n  end\\n\\n  def output(speak, number)\\n    if speak.empty?\\n      number.to_s\\n    else\\n      speak.join\\n    end\\n  end\\n\\nend"}
81	40	ac4758c584780ac96888c7fc	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  def raindrop_speak\n    {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n  end\n\nend	\N	\N	0	6	2014-12-09 09:26:52	2014-12-09 09:26:52	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n\\n  def convert(number)\\n    rain_speak = \\"\\" \\n\\n    raindrop_speak.each do |prime_factor, speak|\\n      if number % prime_factor == 0\\n        rain_speak \\u003c\\u003c speak\\n      end\\n    end\\n\\n    if rain_speak.empty?\\n      rain_speak \\u003c\\u003c number.to_s\\n    end\\n\\n    rain_speak\\n  end\\n\\n  def raindrop_speak\\n    {3 =\\u003e \\"Pling\\", 5 =\\u003e \\"Plang\\", 7 =\\u003e \\"Plong\\"}\\n  end\\n\\nend"}
82	40	0b1205416ceb5358a2d2329f	superseded	ruby	raindrops	class Raindrops\n  RAINDROP_SPEAK = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong",\n  }\n\n  def self.convert(number)\n    rain_speak = add_words(number)\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  def self.add_words(number)\n    RAINDROP_SPEAK.inject("") do |accumulator, (factor, word)|\n      if number % factor == 0\n        accumulator << word\n      else\n        accumulator\n      end\n    end\n  end\n\n  private_class_method :add_words\nend	\N	\N	0	10	2014-12-13 20:32:31	2014-12-13 20:32:31	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n  RAINDROP_SPEAK = {\\n    3 =\\u003e \\"Pling\\",\\n    5 =\\u003e \\"Plang\\",\\n    7 =\\u003e \\"Plong\\",\\n  }\\n\\n  def self.convert(number)\\n    rain_speak = add_words(number)\\n\\n    if rain_speak.empty?\\n      rain_speak \\u003c\\u003c number.to_s\\n    end\\n\\n    rain_speak\\n  end\\n\\n  def self.add_words(number)\\n    RAINDROP_SPEAK.inject(\\"\\") do |accumulator, (factor, word)|\\n      if number % factor == 0\\n        accumulator \\u003c\\u003c word\\n      else\\n        accumulator\\n      end\\n    end\\n  end\\n\\n  private_class_method :add_words\\nend"}
83	40	af5caad18412add859ffb67e	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    rain_speak = add_words(number)\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  def self.add_words(number)\n    raindrop_speak.inject("") do |accumulator, speak|\n      if number % speak.first == 0\n        accumulator << speak.last\n      else\n        accumulator\n      end\n    end\n  end\n\n  def self.raindrop_speak\n    {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n  end\nend	\N	\N	0	8	2014-12-14 00:19:28	2014-12-14 00:19:28	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n  def self.convert(number)\\n    rain_speak = add_words(number)\\n\\n    if rain_speak.empty?\\n      rain_speak \\u003c\\u003c number.to_s\\n    end\\n\\n    rain_speak\\n  end\\n\\n  def self.add_words(number)\\n    raindrop_speak.inject(\\"\\") do |accumulator, speak|\\n      if number % speak.first == 0\\n        accumulator \\u003c\\u003c speak.last\\n      else\\n        accumulator\\n      end\\n    end\\n  end\\n\\n  def self.raindrop_speak\\n    {3 =\\u003e \\"Pling\\", 5 =\\u003e \\"Plang\\", 7 =\\u003e \\"Plong\\"}\\n  end\\nend"}
84	40	a796bb7b287c7101ed15f089	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    rain_speak = add_words(number)\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  private_class_method\n\n  def self.add_words(number)\n    raindrop_speak.inject("") do |accumulator, (factor, word)|\n      if number % factor == 0\n        accumulator << word\n      else\n        accumulator\n      end\n    end\n  end\n\n  def self.raindrop_speak\n    {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n  end\nend	\N	\N	0	9	2014-12-15 07:40:24	2014-12-15 07:40:24	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n  def self.convert(number)\\n    rain_speak = add_words(number)\\n\\n    if rain_speak.empty?\\n      rain_speak \\u003c\\u003c number.to_s\\n    end\\n\\n    rain_speak\\n  end\\n\\n  private_class_method\\n\\n  def self.add_words(number)\\n    raindrop_speak.inject(\\"\\") do |accumulator, (factor, word)|\\n      if number % factor == 0\\n        accumulator \\u003c\\u003c word\\n      else\\n        accumulator\\n      end\\n    end\\n  end\\n\\n  def self.raindrop_speak\\n    {3 =\\u003e \\"Pling\\", 5 =\\u003e \\"Plang\\", 7 =\\u003e \\"Plong\\"}\\n  end\\nend"}
85	40	fd4d48a5044e599db0577395	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = []\n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n    rain_speak.empty? ? number.to_s : rain_speak.join\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\nend	\N	\N	0	3	2014-12-23 10:42:33	2014-12-23 10:42:33	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n\\n  def convert(number)\\n    rain_speak = []\\n\\n    raindrop_speak.each do |prime_factor, speak|\\n      if number % prime_factor == 0\\n        rain_speak \\u003c\\u003c speak\\n      end\\n    end\\n\\n    rain_speak.empty? ? number.to_s : rain_speak.join\\n  end\\n\\n  def raindrop_speak\\n    {3 =\\u003e  \\"Pling\\",5 =\\u003e \\"Plang\\",7 =\\u003e \\"Plong\\"}\\n  end\\nend"}
86	40	dec074413cf23a044cc8c1c7	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n    rain_speak.empty? ? number.to_s : rain_speak\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\nend	\N	\N	0	4	2014-12-28 07:20:33	2014-12-28 07:20:33	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n\\n  def convert(number)\\n    rain_speak = \\"\\" \\n\\n    raindrop_speak.each do |prime_factor, speak|\\n      if number % prime_factor == 0\\n        rain_speak \\u003c\\u003c speak\\n      end\\n    end\\n\\n    rain_speak.empty? ? number.to_s : rain_speak\\n  end\\n\\n  def raindrop_speak\\n    {3 =\\u003e  \\"Pling\\",5 =\\u003e \\"Plang\\",7 =\\u003e \\"Plong\\"}\\n  end\\nend"}
87	40	9703ec0a17f2756fd2bfe4f0	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n   rain_speak.empty? ? rain_speak << number.to_s : rain_speak\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\nend	\N	\N	0	5	2014-12-30 03:03:04	2014-12-30 03:03:04	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n\\n  def convert(number)\\n    rain_speak = \\"\\" \\n\\n    raindrop_speak.each do |prime_factor, speak|\\n      if number % prime_factor == 0\\n        rain_speak \\u003c\\u003c speak\\n      end\\n    end\\n\\n   rain_speak.empty? ? rain_speak \\u003c\\u003c number.to_s : rain_speak\\n  end\\n\\n  def raindrop_speak\\n    {3 =\\u003e  \\"Pling\\",5 =\\u003e \\"Plang\\",7 =\\u003e \\"Plong\\"}\\n  end\\nend"}
88	40	c16df05ad33814531a4e72fe	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    add_words(rain_speak, number)\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  private \n\n  def add_words(rain_speak, number)\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n  end\n\n  def raindrop_speak\n    {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n  end\n\nend	\N	\N	0	7	2015-01-06 08:33:08	2015-01-06 08:33:08	51	raindrops.rb	{"raindrops.rb":"class Raindrops\\n\\n  def convert(number)\\n    rain_speak = \\"\\" \\n\\n    add_words(rain_speak, number)\\n\\n    if rain_speak.empty?\\n      rain_speak \\u003c\\u003c number.to_s\\n    end\\n\\n    rain_speak\\n  end\\n\\n  private \\n\\n  def add_words(rain_speak, number)\\n    raindrop_speak.each do |prime_factor, speak|\\n      if number % prime_factor == 0\\n        rain_speak \\u003c\\u003c speak\\n      end\\n    end\\n  end\\n\\n  def raindrop_speak\\n    {3 =\\u003e \\"Pling\\", 5 =\\u003e \\"Plang\\", 7 =\\u003e \\"Plong\\"}\\n  end\\n\\nend"}
89	40	18a43058381e4c1b6d79545d	pending	javascript	word-count	"use strict";\n\nvar Words = function (phrase) {\n  this.phrase = phrase;\n  this.count = this.fillCount();\n};\n\nWords.prototype = {\n  alphaNumericWords: function (string) {\n    // Return an input string with all non-alphanumeric characters removed\n    // Note, this doesn't handle accented or non-latin characters like ñ or é or ∂\n    // Note, however, that it DOES handle words with apostrophes\n    return string.replace(/[^a-zA-Z0-9']/g, '');\n  },\n\n  stringProcess: function (string) {\n    var cleaned = string;\n    // considered latinizing strings to remove accented characters\n    // cleaned = this.latinize(cleaned);\n    cleaned = this.alphaNumericWords(cleaned);\n    cleaned = cleaned.toLowerCase();\n    return (cleaned.length > 0) ? cleaned : false;\n  },\n\n  fillCount: function () {\n    var counts = {};\n    var words = this.phrase.split(' ');\n    for (var i = 0; i<words.length; i++) {\n      var word = this.stringProcess(words[i]);\n      if(word) {\n        if(counts.hasOwnProperty(word)) {\n          counts[word]++;\n        } else {\n          counts[word] = 1;\n        }\n      }\n    }\n    return counts;\n  }\n  \n};\n\nmodule.exports = Words;	\N	\N	0	3	2014-11-20 12:21:39	2014-11-20 12:21:39	52	word-count.js	{"word-count.js":"\\"use strict\\";\\n\\nvar Words = function (phrase) {\\n  this.phrase = phrase;\\n  this.count = this.fillCount();\\n};\\n\\nWords.prototype = {\\n  alphaNumericWords: function (string) {\\n    // Return an input string with all non-alphanumeric characters removed\\n    // Note, this doesn't handle accented or non-latin characters like ñ or é or ∂\\n    // Note, however, that it DOES handle words with apostrophes\\n    return string.replace(/[^a-zA-Z0-9']/g, '');\\n  },\\n\\n  stringProcess: function (string) {\\n    var cleaned = string;\\n    // considered latinizing strings to remove accented characters\\n    // cleaned = this.latinize(cleaned);\\n    cleaned = this.alphaNumericWords(cleaned);\\n    cleaned = cleaned.toLowerCase();\\n    return (cleaned.length \\u003e 0) ? cleaned : false;\\n  },\\n\\n  fillCount: function () {\\n    var counts = {};\\n    var words = this.phrase.split(' ');\\n    for (var i = 0; i\\u003cwords.length; i++) {\\n      var word = this.stringProcess(words[i]);\\n      if(word) {\\n        if(counts.hasOwnProperty(word)) {\\n          counts[word]++;\\n        } else {\\n          counts[word] = 1;\\n        }\\n      }\\n    }\\n    return counts;\\n  }\\n  \\n};\\n\\nmodule.exports = Words;"}
90	40	2721de30ee8ecdeb71d7d110	superseded	javascript	word-count	"use strict";\n\nvar Words = function (phrase) {\n  this.phrase = phrase;\n  this.count = this.fillCount();\n};\n\nWords.prototype = {\n  alphaNumericOnly: function (string) {\n    // Return an input string with all non-alphanumeric characters removed\n    // Note, this doesn't handle accented or non-latin characters like ñ or é or ∂\n    return string.replace(/[^a-zA-Z0-9]/g, '');\n  },\n\n  stringProcess: function (string) {\n    var cleaned = string;\n    // considered latinizing strings to remove accented characters\n    // cleaned = this.latinize(cleaned);\n    cleaned = this.alphaNumericOnly(cleaned);\n    cleaned = cleaned.toLowerCase();\n    return (cleaned.length > 0) ? cleaned : false;\n  },\n\n  fillCount: function () {\n    var counts = {};\n    var words = this.phrase.split(' ');\n    for (var i = 0; i<words.length; i++) {\n      var word = this.stringProcess(words[i]);\n      if(word !== false) {\n        if(counts.hasOwnProperty(word)) {\n          counts[word]++;\n        } else {\n          counts[word] = 1;\n        }\n      }\n    }\n    return counts;\n  }\n  \n};\n\nmodule.exports = Words;	\N	\N	0	1	2014-12-07 02:08:15	2014-12-07 02:08:15	52	word-count.js	{"word-count.js":"\\"use strict\\";\\n\\nvar Words = function (phrase) {\\n  this.phrase = phrase;\\n  this.count = this.fillCount();\\n};\\n\\nWords.prototype = {\\n  alphaNumericOnly: function (string) {\\n    // Return an input string with all non-alphanumeric characters removed\\n    // Note, this doesn't handle accented or non-latin characters like ñ or é or ∂\\n    return string.replace(/[^a-zA-Z0-9]/g, '');\\n  },\\n\\n  stringProcess: function (string) {\\n    var cleaned = string;\\n    // considered latinizing strings to remove accented characters\\n    // cleaned = this.latinize(cleaned);\\n    cleaned = this.alphaNumericOnly(cleaned);\\n    cleaned = cleaned.toLowerCase();\\n    return (cleaned.length \\u003e 0) ? cleaned : false;\\n  },\\n\\n  fillCount: function () {\\n    var counts = {};\\n    var words = this.phrase.split(' ');\\n    for (var i = 0; i\\u003cwords.length; i++) {\\n      var word = this.stringProcess(words[i]);\\n      if(word !== false) {\\n        if(counts.hasOwnProperty(word)) {\\n          counts[word]++;\\n        } else {\\n          counts[word] = 1;\\n        }\\n      }\\n    }\\n    return counts;\\n  }\\n  \\n};\\n\\nmodule.exports = Words;"}
91	40	dad7f3f009358c8093bf52c3	superseded	javascript	word-count	"use strict";\n\nvar Words = function (phrase) {\n  this.phrase = phrase;\n  this.count = this.fillCount();\n};\n\nWords.prototype = {\n  alphaNumericWords: function (string) {\n    // Return an input string with all non-alphanumeric characters removed\n    // Note, this doesn't handle accented or non-latin characters like ñ or é or ∂\n    // Note, however, that it DOES handle words with apostrophes\n    return string.replace(/[^a-zA-Z0-9']/g, '');\n  },\n\n  stringProcess: function (string) {\n    var cleaned = string;\n    // considered latinizing strings to remove accented characters\n    // cleaned = this.latinize(cleaned);\n    cleaned = this.alphaNumericWords(cleaned);\n    cleaned = cleaned.toLowerCase();\n    return (cleaned.length > 0) ? cleaned : false;\n  },\n\n  fillCount: function () {\n    var counts = {};\n    var words = this.phrase.split(' ');\n    for (var i = 0; i<words.length; i++) {\n      var word = this.stringProcess(words[i]);\n      if(word !== false) {\n        if(counts.hasOwnProperty(word)) {\n          counts[word]++;\n        } else {\n          counts[word] = 1;\n        }\n      }\n    }\n    return counts;\n  }\n  \n};\n\nmodule.exports = Words;	\N	\N	0	2	2015-01-10 21:01:13	2015-01-10 21:01:13	52	word-count.js	{"word-count.js":"\\"use strict\\";\\n\\nvar Words = function (phrase) {\\n  this.phrase = phrase;\\n  this.count = this.fillCount();\\n};\\n\\nWords.prototype = {\\n  alphaNumericWords: function (string) {\\n    // Return an input string with all non-alphanumeric characters removed\\n    // Note, this doesn't handle accented or non-latin characters like ñ or é or ∂\\n    // Note, however, that it DOES handle words with apostrophes\\n    return string.replace(/[^a-zA-Z0-9']/g, '');\\n  },\\n\\n  stringProcess: function (string) {\\n    var cleaned = string;\\n    // considered latinizing strings to remove accented characters\\n    // cleaned = this.latinize(cleaned);\\n    cleaned = this.alphaNumericWords(cleaned);\\n    cleaned = cleaned.toLowerCase();\\n    return (cleaned.length \\u003e 0) ? cleaned : false;\\n  },\\n\\n  fillCount: function () {\\n    var counts = {};\\n    var words = this.phrase.split(' ');\\n    for (var i = 0; i\\u003cwords.length; i++) {\\n      var word = this.stringProcess(words[i]);\\n      if(word !== false) {\\n        if(counts.hasOwnProperty(word)) {\\n          counts[word]++;\\n        } else {\\n          counts[word] = 1;\\n        }\\n      }\\n    }\\n    return counts;\\n  }\\n  \\n};\\n\\nmodule.exports = Words;"}
92	44	bb32131ba959504f4a148040	done	python	anagram	def detect_anagrams(word, alist):\n    wordl = sorted(list(word.lower()))\n    anagram = list()\n\n    for w in alist:\n        if w.lower() != word.lower():\n            wsort = sorted(list(w.lower()))\n            if wordl == wsort:\n                anagram.append(w)\n\n    return anagram	2014-12-20 07:43:20	\N	0	1	2014-12-18 00:47:07	2014-12-18 00:47:07	53	anagram.py	{"anagram.py":"def detect_anagrams(word, alist):\\n    wordl = sorted(list(word.lower()))\\n    anagram = list()\\n\\n    for w in alist:\\n        if w.lower() != word.lower():\\n            wsort = sorted(list(w.lower()))\\n            if wordl == wsort:\\n                anagram.append(w)\\n\\n    return anagram"}
93	46	c648094da2c200d213f1d712	superseded	ruby	gigasecond	class Gigasecond\n\tdef self.from(from_date)\n\t\tif from_date.kind_of?(Date) then \n\t\t  from_date + self.gigaseconds_in_days\n\t\telse\n\t\t\t(from_date + self.gigasecs).to_date\n\t\tend\n\tend\n\n\tdef self.gigaseconds_in_days\n\t\tself.gigasecs / (60 * 60 * 24)\n\tend\n\n\tdef self.gigasecs\n\t\t(10**9)\n\tend\nend	\N	\N	0	1	2014-06-18 19:17:38	2014-06-18 19:17:38	54	/ruby/gigasecond/gigasecond.rb	{"/ruby/gigasecond/gigasecond.rb":"class Gigasecond\\n\\tdef self.from(from_date)\\n\\t\\tif from_date.kind_of?(Date) then \\n\\t\\t  from_date + self.gigaseconds_in_days\\n\\t\\telse\\n\\t\\t\\t(from_date + self.gigasecs).to_date\\n\\t\\tend\\n\\tend\\n\\n\\tdef self.gigaseconds_in_days\\n\\t\\tself.gigasecs / (60 * 60 * 24)\\n\\tend\\n\\n\\tdef self.gigasecs\\n\\t\\t(10**9)\\n\\tend\\nend"}
95	46	3be52f8fb718df48b9895447	superseded	javascript	anagram	var Word = function(letters) {\r\n  var sortedLettersInWord = sortedLetters(letters);\r\n\r\n  function sortedLetters(letters) {\r\n    return letters.toLowerCase().split('').sort().join('');\r\n  }\r\n\r\n  return {\r\n    isDifferentThan: function(otherWord) {\r\n      return letters.toLowerCase() !== otherWord.toLowerCase();\r\n    },\r\n    hasSameLettersAs: function(otherWord) {\r\n      return sortedLettersInWord === sortedLetters(otherWord);\r\n    }\r\n  };\r\n}\r\n\r\nvar Anagram = function(letters) {\r\n  var word = new Word(letters);\r\n\r\n  function isAnagramOf(testWord) {\r\n    return word.isDifferentThan(testWord) && word.hasSameLettersAs(testWord);\r\n  }\r\n\r\n  return {\r\n    match: function(testWords) {\r\n      return testWords.filter(isAnagramOf);\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports = Anagram;	\N	\N	0	3	2014-05-24 02:35:16	2014-05-24 02:35:16	55	anagram.js	{"anagram.js":"var Word = function(letters) {\\r\\n  var sortedLettersInWord = sortedLetters(letters);\\r\\n\\r\\n  function sortedLetters(letters) {\\r\\n    return letters.toLowerCase().split('').sort().join('');\\r\\n  }\\r\\n\\r\\n  return {\\r\\n    isDifferentThan: function(otherWord) {\\r\\n      return letters.toLowerCase() !== otherWord.toLowerCase();\\r\\n    },\\r\\n    hasSameLettersAs: function(otherWord) {\\r\\n      return sortedLettersInWord === sortedLetters(otherWord);\\r\\n    }\\r\\n  };\\r\\n}\\r\\n\\r\\nvar Anagram = function(letters) {\\r\\n  var word = new Word(letters);\\r\\n\\r\\n  function isAnagramOf(testWord) {\\r\\n    return word.isDifferentThan(testWord) \\u0026\\u0026 word.hasSameLettersAs(testWord);\\r\\n  }\\r\\n\\r\\n  return {\\r\\n    match: function(testWords) {\\r\\n      return testWords.filter(isAnagramOf);\\r\\n    }\\r\\n  };\\r\\n};\\r\\n\\r\\nmodule.exports = Anagram;"}
96	46	c02a40fd70739a0a97aac5cd	superseded	javascript	anagram	var Anagram = function(word) {\r\n  var sortLetters = function(word) {\r\n    return word.toLowerCase().split('').sort().join('');\r\n  };\r\n\r\n  var sortedLetters = sortLetters(word);\r\n\r\n  var isAnagram = function(testWord) {\r\n    return testWord !== word && sortLetters(testWord) === sortedLetters;\r\n  };\r\n\r\n  var matchTestWords = function(testWords) {\r\n    return testWords.filter(isAnagram);\r\n  };\r\n\r\n  return {\r\n    match: matchTestWords\r\n  };\r\n};\r\n\r\nmodule.exports = Anagram;	\N	\N	0	1	2014-08-04 13:13:37	2014-08-04 13:13:37	55	anagram.js	{"anagram.js":"var Anagram = function(word) {\\r\\n  var sortLetters = function(word) {\\r\\n    return word.toLowerCase().split('').sort().join('');\\r\\n  };\\r\\n\\r\\n  var sortedLetters = sortLetters(word);\\r\\n\\r\\n  var isAnagram = function(testWord) {\\r\\n    return testWord !== word \\u0026\\u0026 sortLetters(testWord) === sortedLetters;\\r\\n  };\\r\\n\\r\\n  var matchTestWords = function(testWords) {\\r\\n    return testWords.filter(isAnagram);\\r\\n  };\\r\\n\\r\\n  return {\\r\\n    match: matchTestWords\\r\\n  };\\r\\n};\\r\\n\\r\\nmodule.exports = Anagram;"}
97	46	9bd4820d4a182f58c257fcb1	done	javascript	anagram	var Word = function(letters) {\r\n  var lowercaseLetters = letters.toLowerCase();\r\n  var lowercaseSortedLetters = sortedLetters(lowercaseLetters);\r\n\r\n  function sortedLetters(letters) {\r\n    return letters.split('').sort().join('');\r\n  }\r\n\r\n  return {\r\n    isDifferentThan: function(otherWord) {\r\n      return lowercaseLetters !== otherWord.toLowerCase();\r\n    },\r\n    hasSameLettersAs: function(otherWord) {\r\n      return lowercaseSortedLetters === sortedLetters(otherWord.toLowerCase());\r\n    }\r\n  };\r\n}\r\n\r\nvar Anagram = function(letters) {\r\n  var word = new Word(letters);\r\n\r\n  function isAnagramOf(testWord) {\r\n    return word.isDifferentThan(testWord) && word.hasSameLettersAs(testWord);\r\n  }\r\n\r\n  return {\r\n    match: function(testWords) {\r\n      return testWords.filter(isAnagramOf);\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports = Anagram;	2014-09-30 16:27:55	\N	0	4	2014-09-23 22:40:17	2014-09-23 22:40:17	55	anagram.js	{"anagram.js":"var Word = function(letters) {\\r\\n  var lowercaseLetters = letters.toLowerCase();\\r\\n  var lowercaseSortedLetters = sortedLetters(lowercaseLetters);\\r\\n\\r\\n  function sortedLetters(letters) {\\r\\n    return letters.split('').sort().join('');\\r\\n  }\\r\\n\\r\\n  return {\\r\\n    isDifferentThan: function(otherWord) {\\r\\n      return lowercaseLetters !== otherWord.toLowerCase();\\r\\n    },\\r\\n    hasSameLettersAs: function(otherWord) {\\r\\n      return lowercaseSortedLetters === sortedLetters(otherWord.toLowerCase());\\r\\n    }\\r\\n  };\\r\\n}\\r\\n\\r\\nvar Anagram = function(letters) {\\r\\n  var word = new Word(letters);\\r\\n\\r\\n  function isAnagramOf(testWord) {\\r\\n    return word.isDifferentThan(testWord) \\u0026\\u0026 word.hasSameLettersAs(testWord);\\r\\n  }\\r\\n\\r\\n  return {\\r\\n    match: function(testWords) {\\r\\n      return testWords.filter(isAnagramOf);\\r\\n    }\\r\\n  };\\r\\n};\\r\\n\\r\\nmodule.exports = Anagram;"}
102	48	447b3dbf59c6fe89ea0d4079	done	javascript	hamming	module.exports.compute = function ( lhs, rhs ) {\n  var result = 0,\n\ti;\n  // Handle mismatched lengths\n  if (lhs.length != rhs.length) {\n    throw "Can not compute Hamming difference for different length strands";\n  }\n  // simply iterate through the strings comparing characters\n  for (i=0; i<lhs.length; i++) {\n    if (lhs[i] != rhs[i]) {\n      ++result;\n    }\n  }\n  return result;\n};	2014-10-24 04:14:32	\N	0	1	2014-10-16 08:17:55	2014-10-16 08:17:55	58	hamming.js	{"hamming.js":"module.exports.compute = function ( lhs, rhs ) {\\n  var result = 0,\\n\\ti;\\n  // Handle mismatched lengths\\n  if (lhs.length != rhs.length) {\\n    throw \\"Can not compute Hamming difference for different length strands\\";\\n  }\\n  // simply iterate through the strings comparing characters\\n  for (i=0; i\\u003clhs.length; i++) {\\n    if (lhs[i] != rhs[i]) {\\n      ++result;\\n    }\\n  }\\n  return result;\\n};"}
98	46	8e5a880e405001954d000a1f	superseded	javascript	anagram	var Anagram = function(word) {\r\n  var sortedLettersInWord = sortedLetters(word);\r\n\r\n  function sortedLetters(word) {\r\n    return word.toLowerCase().split('').sort().join('');\r\n  }\r\n\r\n  function areWordsDifferent(word, testWord) {\r\n    return word.toLowerCase() !== testWord.toLowerCase();\r\n  }\r\n\r\n  function doWordsHaveSameLetters(word, testWord) {\r\n    return sortedLettersInWord === sortedLetters(testWord);\r\n  }\r\n\r\n  function isAnagram(testWord) {\r\n    return areWordsDifferent(word, testWord) && doWordsHaveSameLetters(word, testWord);\r\n  }\r\n\r\n  function matchTestWords(testWords) {\r\n    return testWords.filter(isAnagram);\r\n  }\r\n\r\n  return {\r\n    match: matchTestWords\r\n  };\r\n};\r\n\r\nmodule.exports = Anagram;	\N	\N	0	2	2014-11-10 08:04:31	2014-11-10 08:04:31	55	anagram.js	{"anagram.js":"var Anagram = function(word) {\\r\\n  var sortedLettersInWord = sortedLetters(word);\\r\\n\\r\\n  function sortedLetters(word) {\\r\\n    return word.toLowerCase().split('').sort().join('');\\r\\n  }\\r\\n\\r\\n  function areWordsDifferent(word, testWord) {\\r\\n    return word.toLowerCase() !== testWord.toLowerCase();\\r\\n  }\\r\\n\\r\\n  function doWordsHaveSameLetters(word, testWord) {\\r\\n    return sortedLettersInWord === sortedLetters(testWord);\\r\\n  }\\r\\n\\r\\n  function isAnagram(testWord) {\\r\\n    return areWordsDifferent(word, testWord) \\u0026\\u0026 doWordsHaveSameLetters(word, testWord);\\r\\n  }\\r\\n\\r\\n  function matchTestWords(testWords) {\\r\\n    return testWords.filter(isAnagram);\\r\\n  }\\r\\n\\r\\n  return {\\r\\n    match: matchTestWords\\r\\n  };\\r\\n};\\r\\n\\r\\nmodule.exports = Anagram;"}
99	46	f8add9335d128cdebc53e03d	done	cpp	gigasecond	/*\n// Header file gigasecond.h\n\n#ifndef GIGASECOND_H_INCLUDED\n#define GIGASECOND_H_INCLUDED\n\n#include "boost/date_time/gregorian/gregorian.hpp"\n\nnamespace gigasecond\n{\n    boost::gregorian::date advance(boost::gregorian::date InputDate);\n}\n\n#endif // GIGASECOND_H_INCLUDED\n\n*/\n\n#include "gigasecond.h"\n\nconst int SEC_PER_DAY = 86400;\nconst long GIGASECONDS = 1000000000;\n\nnamespace gigasecond\n{\n    boost::gregorian::date advance(boost::gregorian::date InputDate)\n    {\n        return InputDate + boost::gregorian::date_duration( GIGASECONDS / SEC_PER_DAY );\n    }\n}	2014-07-02 23:01:16	\N	0	1	2014-07-02 08:44:03	2014-07-02 08:44:03	56	gigasecond.cpp	{"gigasecond.cpp":"/*\\n// Header file gigasecond.h\\n\\n#ifndef GIGASECOND_H_INCLUDED\\n#define GIGASECOND_H_INCLUDED\\n\\n#include \\"boost/date_time/gregorian/gregorian.hpp\\"\\n\\nnamespace gigasecond\\n{\\n    boost::gregorian::date advance(boost::gregorian::date InputDate);\\n}\\n\\n#endif // GIGASECOND_H_INCLUDED\\n\\n*/\\n\\n#include \\"gigasecond.h\\"\\n\\nconst int SEC_PER_DAY = 86400;\\nconst long GIGASECONDS = 1000000000;\\n\\nnamespace gigasecond\\n{\\n    boost::gregorian::date advance(boost::gregorian::date InputDate)\\n    {\\n        return InputDate + boost::gregorian::date_duration( GIGASECONDS / SEC_PER_DAY );\\n    }\\n}"}
100	46	32e621d3cebc1dfa6fea4b62	pending	scala	robot-name	class Robot {\n  private var _name:String = ""\n    \n  def name():String = _name\n  def reset():Unit  = {\n    _name = s"$randomChar$randomChar$randomNumber"        \n  }\n \n  val chars:Seq[Char] = ('A' to 'Z')\n  \n  private def randomChar():Char = chars(Robot.rnd.nextInt(chars.length))\n  \n  private def randomNumber():String = "%03d".format(Robot.rnd.nextInt(999))\n\n  reset()\n}\n\nobject Robot {\n\tval rnd = new scala.util.Random(1000)\n\n}	\N	\N	0	2	2014-06-24 11:17:38	2014-06-24 11:17:38	57	Robot.scala	{"Robot.scala":"class Robot {\\n  private var _name:String = \\"\\"\\n    \\n  def name():String = _name\\n  def reset():Unit  = {\\n    _name = s\\"$randomChar$randomChar$randomNumber\\"        \\n  }\\n \\n  val chars:Seq[Char] = ('A' to 'Z')\\n  \\n  private def randomChar():Char = chars(Robot.rnd.nextInt(chars.length))\\n  \\n  private def randomNumber():String = \\"%03d\\".format(Robot.rnd.nextInt(999))\\n\\n  reset()\\n}\\n\\nobject Robot {\\n\\tval rnd = new scala.util.Random(1000)\\n\\n}"}
101	46	23806d91a920e36b5f1f80a6	superseded	scala	robot-name	class Robot {\n  private var _name:String = ""\n    \n  def name():String = _name\n  def reset():Unit  = {\n    _name = "" + randomChar() + randomChar() + randomNumber()        \n  }\n \n  val chars:String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" \n  \n  private def randomChar():Char = chars.charAt(Robot.rnd.nextInt(26) )\n  \n  private def randomNumber():Int = Robot.rnd.nextInt(999)\n\n  reset()\n}\n\nobject Robot {\n\tval rnd = new scala.util.Random(1000)\n\n}	\N	\N	0	1	2014-08-02 13:25:20	2014-08-02 13:25:20	57	Robot.scala	{"Robot.scala":"class Robot {\\n  private var _name:String = \\"\\"\\n    \\n  def name():String = _name\\n  def reset():Unit  = {\\n    _name = \\"\\" + randomChar() + randomChar() + randomNumber()        \\n  }\\n \\n  val chars:String = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" \\n  \\n  private def randomChar():Char = chars.charAt(Robot.rnd.nextInt(26) )\\n  \\n  private def randomNumber():Int = Robot.rnd.nextInt(999)\\n\\n  reset()\\n}\\n\\nobject Robot {\\n\\tval rnd = new scala.util.Random(1000)\\n\\n}"}
104	49	01aed954da6ba3c5d58bfa6b	superseded	go	robot-name	package robotname\r\n\r\nimport (\r\n\t"fmt"\r\n\t"math/rand"\r\n)\r\n\r\ntype Robot struct {\r\n\tname string\r\n}\r\n\r\nfunc (r *Robot) Name() (name string) {\r\n\r\n\tif r.name == "" {\r\n\t\tr.name = fmt.Sprintf("%c%c%03d",\r\n\t\t\t'A'+byte(rand.Intn(26)),\r\n\t\t\t'A'+byte(rand.Intn(26)),\r\n\t\t\trand.Intn(1000),\r\n\t\t)\r\n\t}\r\n\treturn r.name\r\n}\r\n\r\nfunc (r *Robot) Reset() {\r\n\t*r = Robot{}\r\n}\r	\N	\N	0	1	2014-05-27 07:11:13	2014-05-27 07:11:13	59	robot_name.go	{"robot_name.go":"package robotname\\r\\n\\r\\nimport (\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"math/rand\\"\\r\\n)\\r\\n\\r\\ntype Robot struct {\\r\\n\\tname string\\r\\n}\\r\\n\\r\\nfunc (r *Robot) Name() (name string) {\\r\\n\\r\\n\\tif r.name == \\"\\" {\\r\\n\\t\\tr.name = fmt.Sprintf(\\"%c%c%03d\\",\\r\\n\\t\\t\\t'A'+byte(rand.Intn(26)),\\r\\n\\t\\t\\t'A'+byte(rand.Intn(26)),\\r\\n\\t\\t\\trand.Intn(1000),\\r\\n\\t\\t)\\r\\n\\t}\\r\\n\\treturn r.name\\r\\n}\\r\\n\\r\\nfunc (r *Robot) Reset() {\\r\\n\\t*r = Robot{}\\r\\n}\\r"}
105	49	61d27186aeafac9d0feb5532	superseded	python	rna-transcription	__author__ = 'greg'\n\ndef to_rna(dna_string):\n    """determines rna complement to dna string"""\n    dna_to_rna = {'G':'C','C':'G','T':'A','A':'U'}\n    rna = ""\n    for x in range(len(dna_string)):\n        rna += (dna_to_rna[dna_string[x]])\n    return rna	\N	\N	0	1	2014-08-29 09:05:31	2014-08-29 09:05:31	60	dna.py	{"dna.py":"__author__ = 'greg'\\n\\ndef to_rna(dna_string):\\n    \\"\\"\\"determines rna complement to dna string\\"\\"\\"\\n    dna_to_rna = {'G':'C','C':'G','T':'A','A':'U'}\\n    rna = \\"\\"\\n    for x in range(len(dna_string)):\\n        rna += (dna_to_rna[dna_string[x]])\\n    return rna"}
106	49	5b39f3be7a76957599de8097	superseded	python	rna-transcription	__author__ = 'greg'\nDNA_TO_RNA = {'G':'C','C':'G','T':'A','A':'U'}\n\ndef to_rna(dna_string):\n    """determines rna complement to dna string"""\n    return ''.join([DNA_TO_RNA.get(n, ' ') for n in dna_string])	\N	\N	0	2	2014-11-25 00:17:02	2014-11-25 00:17:02	60	dna.py	{"dna.py":"__author__ = 'greg'\\nDNA_TO_RNA = {'G':'C','C':'G','T':'A','A':'U'}\\n\\ndef to_rna(dna_string):\\n    \\"\\"\\"determines rna complement to dna string\\"\\"\\"\\n    return ''.join([DNA_TO_RNA.get(n, ' ') for n in dna_string])"}
107	49	a2a80af3921cc09d86e5540f	pending	python	rna-transcription	__author__ = 'greg'\n\nDNA = 'GCTA'\nRNA = 'CGAU'\nDNA_TO_RNA = str.maketrans(DNA,RNA)\n\ndef to_rna(dna_string):\n    """determines rna complement to dna string"""\n    return dna_string.translate(DNA_TO_RNA)	\N	\N	0	3	2014-12-19 06:18:38	2014-12-19 06:18:38	60	dna.py	{"dna.py":"__author__ = 'greg'\\n\\nDNA = 'GCTA'\\nRNA = 'CGAU'\\nDNA_TO_RNA = str.maketrans(DNA,RNA)\\n\\ndef to_rna(dna_string):\\n    \\"\\"\\"determines rna complement to dna string\\"\\"\\"\\n    return dna_string.translate(DNA_TO_RNA)"}
108	49	9f87dce1b224a7c599669cc3	superseded	haskell	binary	module Binary (toDecimal) where\n\ntoDecimal :: String -> Int\ntoDecimal bits =\n    maybe 0 fst $ foldr\n      (\\c macc -> do\n           (sum, p) <- macc\n           b <- toBit c\n           return $ (sum + b*2^p, p+1))\n      (Just (0, 0)) -- (sumSoFar, nextPower)\n      bits\n\ntoBit :: Char -> Maybe Int\ntoBit '0' = Just 0\ntoBit '1' = Just 1\ntoBit _   = Nothing	\N	\N	0	3	2014-08-11 23:53:26	2014-08-11 23:53:26	61	binary.hs	{"binary.hs":"module Binary (toDecimal) where\\n\\ntoDecimal :: String -\\u003e Int\\ntoDecimal bits =\\n    maybe 0 fst $ foldr\\n      (\\\\c macc -\\u003e do\\n           (sum, p) \\u003c- macc\\n           b \\u003c- toBit c\\n           return $ (sum + b*2^p, p+1))\\n      (Just (0, 0)) -- (sumSoFar, nextPower)\\n      bits\\n\\ntoBit :: Char -\\u003e Maybe Int\\ntoBit '0' = Just 0\\ntoBit '1' = Just 1\\ntoBit _   = Nothing"}
109	49	d2bd46915345b9aa247c72ce	superseded	haskell	binary	module Binary (toDecimal) where\n\ntoDecimal :: String -> Int\ntoDecimal bits\n    | any (`notElem` "01") bits = 0\n    | otherwise =\n        sum $ zipWith (\\p b -> toBit b * 2^p) [0..] (reverse bits)\n\ntoBit :: Char -> Int\ntoBit '0' = 0\ntoBit '1' = 1	\N	\N	0	1	2014-09-12 08:37:53	2014-09-12 08:37:53	61	binary.hs	{"binary.hs":"module Binary (toDecimal) where\\n\\ntoDecimal :: String -\\u003e Int\\ntoDecimal bits\\n    | any (`notElem` \\"01\\") bits = 0\\n    | otherwise =\\n        sum $ zipWith (\\\\p b -\\u003e toBit b * 2^p) [0..] (reverse bits)\\n\\ntoBit :: Char -\\u003e Int\\ntoBit '0' = 0\\ntoBit '1' = 1"}
110	49	5b50efc42eb271291bfd4ec8	superseded	haskell	binary	module Binary (toDecimal) where\n\nimport Control.Monad (liftM2)\n\ntoDecimal :: String -> Int\ntoDecimal bits =\n    maybe 0 fst $ foldr\n      (\\c macc -> do\n           (sum, p) <- macc\n           b <- toBit c\n           return $ (sum + b*2^p, p+1))\n      (Just (0, 0)) -- (sumSoFar, nextPower)\n      bits\n\ntoBit :: Char -> Maybe Int\ntoBit '0' = Just 0\ntoBit '1' = Just 1\ntoBit _   = Nothing	\N	\N	0	2	2014-09-14 00:32:49	2014-09-14 00:32:49	61	binary.hs	{"binary.hs":"module Binary (toDecimal) where\\n\\nimport Control.Monad (liftM2)\\n\\ntoDecimal :: String -\\u003e Int\\ntoDecimal bits =\\n    maybe 0 fst $ foldr\\n      (\\\\c macc -\\u003e do\\n           (sum, p) \\u003c- macc\\n           b \\u003c- toBit c\\n           return $ (sum + b*2^p, p+1))\\n      (Just (0, 0)) -- (sumSoFar, nextPower)\\n      bits\\n\\ntoBit :: Char -\\u003e Maybe Int\\ntoBit '0' = Just 0\\ntoBit '1' = Just 1\\ntoBit _   = Nothing"}
111	49	3b6afe01c7bb0f602416bb41	pending	haskell	binary	module Binary (toDecimal) where\n\nimport Data.Bits\n\ntoBit :: Char -> Int\ntoBit '0' = 0\ntoBit '1' = 1\ntoBit _   = -1\n\ntoDecimal :: [Char] -> Int\ntoDecimal bits = go (map toBit bits) 0\n    where go [] n        = n\n          go (b:bs) n\n             | b < 0     = 0\n             | otherwise = go bs (n `shiftL` 1 + b)	\N	\N	0	4	2014-10-17 10:01:28	2014-10-17 10:01:28	61	binary.hs	{"binary.hs":"module Binary (toDecimal) where\\n\\nimport Data.Bits\\n\\ntoBit :: Char -\\u003e Int\\ntoBit '0' = 0\\ntoBit '1' = 1\\ntoBit _   = -1\\n\\ntoDecimal :: [Char] -\\u003e Int\\ntoDecimal bits = go (map toBit bits) 0\\n    where go [] n        = n\\n          go (b:bs) n\\n             | b \\u003c 0     = 0\\n             | otherwise = go bs (n `shiftL` 1 + b)"}
112	49	398e4fec07734fd12b1d69f8	pending	ruby	word-count	class Phrase\n\tdef initialize arg\n\t\t@phrase = arg\n\tend\n\t\n\tdef word_count\n\n\t\tword_array = @phrase.gsub(/\\W/, ' ').downcase.split(' ')\n\n\t\thash = Hash.new(0)\n\n\t\tword_array.each do |word|\n\t\t\thash[word] += 1\n\t\tend\n\n\t\thash\n\tend\nend	\N	\N	0	1	2014-05-27 21:11:06	2014-05-27 21:11:06	62	word-count.rb	{"word-count.rb":"class Phrase\\n\\tdef initialize arg\\n\\t\\t@phrase = arg\\n\\tend\\n\\t\\n\\tdef word_count\\n\\n\\t\\tword_array = @phrase.gsub(/\\\\W/, ' ').downcase.split(' ')\\n\\n\\t\\thash = Hash.new(0)\\n\\n\\t\\tword_array.each do |word|\\n\\t\\t\\thash[word] += 1\\n\\t\\tend\\n\\n\\t\\thash\\n\\tend\\nend"}
113	26	a09e365299b6e7b7c1af7aab	pending	clojure	rna-transcription	(ns dna)\n\n(def ^{:private true}\n  transcription { \\G \\C\n                  \\C \\G\n                  \\T \\A\n                  \\A \\U })\n\n\n(defn to-rna [dna]\n  (let [transcribed (map transcription (seq dna))]\n    (assert (not (some nil? transcribed)))\n    (apply str transcribed)))	\N	\N	0	2	2014-12-31 15:10:02	2014-12-31 15:10:02	63	dna.clj	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true}\\n  transcription { \\\\G \\\\C\\n                  \\\\C \\\\G\\n                  \\\\T \\\\A\\n                  \\\\A \\\\U })\\n\\n\\n(defn to-rna [dna]\\n  (let [transcribed (map transcription (seq dna))]\\n    (assert (not (some nil? transcribed)))\\n    (apply str transcribed)))"}
115	26	014fd02e9efc7f8b5b6d7ef8	pending	python	space-age	from decimal import Decimal\n\n_ORBITAL_PERIODS = {'earth': 1, \n\t\t\t\t\t'mercury': 0.2408467,\n\t\t\t\t\t'venus': 0.61519726,\n\t\t\t\t\t'mars': 1.8808158,\n\t\t\t\t\t'jupiter': 11.862615,\n\t\t\t\t\t'saturn': 29.447498,\n\t\t\t\t\t'uranus': 84.016846,\n\t\t\t\t\t'neptune': 164.79132}\n\nclass SpaceAge(object):\n\tdef __init__(self, age_in_secs):\n\t\tself.seconds = age_in_secs\n\ndef make_method(cls, planet):\n\tdef calc_age(self):\n\t\tage = Decimal(self.seconds)/3600/24/Decimal(365.25)/Decimal(_ORBITAL_PERIODS[planet])\n\t\treturn round(float(age), 2)\n\tname = 'on_' + planet\n\tsetattr(cls, name, calc_age)\n\t\nfor planet in _ORBITAL_PERIODS:\n\t  make_method(SpaceAge, planet)	\N	\N	0	1	2014-12-28 11:39:42	2014-12-28 11:39:42	64	space_age.py	{"space_age.py":"from decimal import Decimal\\n\\n_ORBITAL_PERIODS = {'earth': 1, \\n\\t\\t\\t\\t\\t'mercury': 0.2408467,\\n\\t\\t\\t\\t\\t'venus': 0.61519726,\\n\\t\\t\\t\\t\\t'mars': 1.8808158,\\n\\t\\t\\t\\t\\t'jupiter': 11.862615,\\n\\t\\t\\t\\t\\t'saturn': 29.447498,\\n\\t\\t\\t\\t\\t'uranus': 84.016846,\\n\\t\\t\\t\\t\\t'neptune': 164.79132}\\n\\nclass SpaceAge(object):\\n\\tdef __init__(self, age_in_secs):\\n\\t\\tself.seconds = age_in_secs\\n\\ndef make_method(cls, planet):\\n\\tdef calc_age(self):\\n\\t\\tage = Decimal(self.seconds)/3600/24/Decimal(365.25)/Decimal(_ORBITAL_PERIODS[planet])\\n\\t\\treturn round(float(age), 2)\\n\\tname = 'on_' + planet\\n\\tsetattr(cls, name, calc_age)\\n\\t\\nfor planet in _ORBITAL_PERIODS:\\n\\t  make_method(SpaceAge, planet)"}
116	26	d431325885cda5429f9c6bd9	pending	erlang	leap	-module( leap ).\n-export( [ leap_year/1 ] ).\n\nleap_year( InputYear )\n   when is_integer( InputYear ), InputYear > 1581 ->\n   doLeapChecks( InputYear );\nleap_year( _InputYear ) ->\n   false.\n\ndoLeapChecks(  InputYear ) when InputYear rem 400 =:= 0 -> true;\ndoLeapChecks(  InputYear ) when InputYear rem 100 =:= 0 -> false;\ndoLeapChecks(  InputYear ) when InputYear rem   4 =:= 0 -> true;\ndoLeapChecks( _InputYear )                              -> false.	\N	\N	0	1	2014-12-26 05:25:39	2014-12-26 05:25:39	65	leap.erl	{"leap.erl":"-module( leap ).\\n-export( [ leap_year/1 ] ).\\n\\nleap_year( InputYear )\\n   when is_integer( InputYear ), InputYear \\u003e 1581 -\\u003e\\n   doLeapChecks( InputYear );\\nleap_year( _InputYear ) -\\u003e\\n   false.\\n\\ndoLeapChecks(  InputYear ) when InputYear rem 400 =:= 0 -\\u003e true;\\ndoLeapChecks(  InputYear ) when InputYear rem 100 =:= 0 -\\u003e false;\\ndoLeapChecks(  InputYear ) when InputYear rem   4 =:= 0 -\\u003e true;\\ndoLeapChecks( _InputYear )                              -\\u003e false."}
117	26	4c560c8ddc714c66c99ed1df	pending	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n  iex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n  4\n  """\n  @spec hamming_distance([char], [char]) :: non_neg_integer\n  def hamming_distance(strand1, strand2) do\n    Enum.zip(strand1, strand2) |> Enum.count (fn({x,y}) -> x != y end)\n  end\n\nend	\N	\N	0	1	2014-12-24 02:10:01	2014-12-24 02:10:01	66	point_mutations.exs	{"point_mutations.exs":"defmodule DNA do\\n  @doc \\"\\"\\"\\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\\n\\n  ## Examples\\n\\n  iex\\u003e DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\\n  4\\n  \\"\\"\\"\\n  @spec hamming_distance([char], [char]) :: non_neg_integer\\n  def hamming_distance(strand1, strand2) do\\n    Enum.zip(strand1, strand2) |\\u003e Enum.count (fn({x,y}) -\\u003e x != y end)\\n  end\\n\\nend"}
118	26	1e1657e0ac3fa7536dda3613	pending	python	word-count	import re\nfrom collections import defaultdict\n\ndef word_count(words):\n    result = defaultdict(int)\n    for word in re.findall('\\w+', words):\n        result[word.lower()] += 1\n    return result\n    	\N	\N	0	1	2014-12-25 14:21:16	2014-12-25 14:21:16	67	wordcount.py	{"wordcount.py":"import re\\nfrom collections import defaultdict\\n\\ndef word_count(words):\\n    result = defaultdict(int)\\n    for word in re.findall('\\\\w+', words):\\n        result[word.lower()] += 1\\n    return result\\n    "}
119	26	5bd41e44836c70935d23b13b	pending	csharp	robot-name	using System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace exercism\n{\n\tpublic class Robot\n\t{\n\n\t\tpublic string Name { get; private set; }\n\n\t\tprivate static Random random = new Random ((int)DateTime.Now.Ticks);\n\t\tprivate static Dictionary<char, List<string>> usedNames = new Dictionary<char, List<string>> ();\n\n\n\t\tpublic Robot () {\n\t\t\tgetNewName ();\n\t\t}\n\n\t\tprivate void getNewName () {\n\t\t\tvar chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n\t\t\tvar nums = "0123456789";\n\t\t\tstring newPrefix, newSuffix;\n\t\t\tdo {\n\t\t\t\tnewPrefix = new string (Enumerable.Repeat (chars, 2).Select (s => s [random.Next (s.Length)]).ToArray());\n\t\t\t\tnewSuffix = new string (Enumerable.Repeat (nums, 3).Select (s => s [random.Next (s.Length)]).ToArray());\n\t\t\t} while (! (isNameUnique (newPrefix+newSuffix)));\n\t\t\tthis.Name = newPrefix+newSuffix;\n\t\t\tif (!usedNames.ContainsKey (this.Name [0]))\n\t\t\t\tusedNames.Add (this.Name [0], new List<string>());\n\t\t\tusedNames[Name [0]].Add (this.Name);\n\t\t}\n\n\t\tprivate bool isNameUnique (string newName) {\n\t\t\tif (!usedNames.ContainsKey (newName [0]))\n\t\t\t\treturn true;\n\t\t\tif (usedNames [newName [0]].Contains (newName))\n\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t}\n\n\n\t\tpublic void Reset() {\n\t\t\tstring name = Name;\n\t\t\tgetNewName ();\n\t\t\t// clean up namespace\n\t\t\tusedNames [name [0]].Remove (name);\n\t\t}\n\n\n\t}\n}	\N	\N	0	1	2014-12-25 03:03:20	2014-12-25 03:03:20	68	RobotName.cs	{"RobotName.cs":"using System.Collections.Generic;\\nusing System;\\nusing System.Linq;\\n\\nnamespace exercism\\n{\\n\\tpublic class Robot\\n\\t{\\n\\n\\t\\tpublic string Name { get; private set; }\\n\\n\\t\\tprivate static Random random = new Random ((int)DateTime.Now.Ticks);\\n\\t\\tprivate static Dictionary\\u003cchar, List\\u003cstring\\u003e\\u003e usedNames = new Dictionary\\u003cchar, List\\u003cstring\\u003e\\u003e ();\\n\\n\\n\\t\\tpublic Robot () {\\n\\t\\t\\tgetNewName ();\\n\\t\\t}\\n\\n\\t\\tprivate void getNewName () {\\n\\t\\t\\tvar chars = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\";\\n\\t\\t\\tvar nums = \\"0123456789\\";\\n\\t\\t\\tstring newPrefix, newSuffix;\\n\\t\\t\\tdo {\\n\\t\\t\\t\\tnewPrefix = new string (Enumerable.Repeat (chars, 2).Select (s =\\u003e s [random.Next (s.Length)]).ToArray());\\n\\t\\t\\t\\tnewSuffix = new string (Enumerable.Repeat (nums, 3).Select (s =\\u003e s [random.Next (s.Length)]).ToArray());\\n\\t\\t\\t} while (! (isNameUnique (newPrefix+newSuffix)));\\n\\t\\t\\tthis.Name = newPrefix+newSuffix;\\n\\t\\t\\tif (!usedNames.ContainsKey (this.Name [0]))\\n\\t\\t\\t\\tusedNames.Add (this.Name [0], new List\\u003cstring\\u003e());\\n\\t\\t\\tusedNames[Name [0]].Add (this.Name);\\n\\t\\t}\\n\\n\\t\\tprivate bool isNameUnique (string newName) {\\n\\t\\t\\tif (!usedNames.ContainsKey (newName [0]))\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\tif (usedNames [newName [0]].Contains (newName))\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\n\\t\\tpublic void Reset() {\\n\\t\\t\\tstring name = Name;\\n\\t\\t\\tgetNewName ();\\n\\t\\t\\t// clean up namespace\\n\\t\\t\\tusedNames [name [0]].Remove (name);\\n\\t\\t}\\n\\n\\n\\t}\\n}"}
120	7	f15195ca855b72c37e1d73b8	pending	python	largest-series-product	'''\nseries.py\n\nFind the largest product of a series of n digits in a string of digits\n'''\nfrom operator import mul\n\ndef largest_product(series, n):\n    '''\n    Find the largest product in the given series\n    @param series: string of digits\n    @param n: number of digits to multiply\n    @returns: largest product of n consecutive digits in the given series\n    @raises ValueError: if n is larger than the length of series\n    '''\n    # append [1] in the case of empty strings\n    s = slices(series, n) + [[1]]\n\n    return max([reduce(mul, l, 1) for l in s])\n\ndef slices(series, n):\n    '''\n    Generate slices of length n from the given series\n    @param series: string of digits\n    @param n: number of digits per slice\n    '''\n    if len(series) < n:\n        raise ValueError\n\n    s = []\n    for i in range(len(series) - n + 1):\n        s.append(map(int, series[i:i+n]))\n\n    return s	\N	\N	0	1	2014-12-25 13:47:25	2014-12-25 13:47:25	69	series.py	{"series.py":"'''\\nseries.py\\n\\nFind the largest product of a series of n digits in a string of digits\\n'''\\nfrom operator import mul\\n\\ndef largest_product(series, n):\\n    '''\\n    Find the largest product in the given series\\n    @param series: string of digits\\n    @param n: number of digits to multiply\\n    @returns: largest product of n consecutive digits in the given series\\n    @raises ValueError: if n is larger than the length of series\\n    '''\\n    # append [1] in the case of empty strings\\n    s = slices(series, n) + [[1]]\\n\\n    return max([reduce(mul, l, 1) for l in s])\\n\\ndef slices(series, n):\\n    '''\\n    Generate slices of length n from the given series\\n    @param series: string of digits\\n    @param n: number of digits per slice\\n    '''\\n    if len(series) \\u003c n:\\n        raise ValueError\\n\\n    s = []\\n    for i in range(len(series) - n + 1):\\n        s.append(map(int, series[i:i+n]))\\n\\n    return s"}
122	7	0210150cb8ea378557628e5b	pending	ruby	bob	class Bob\n  def hey statement\n    reply_to Statement.new(statement)\n  end\n\n  private\n\n  REPLY_TO = {\n    question: "Sure.",\n    force: "Woah, chill out!",\n    silence: "Fine. Be that way!",\n    default: "Whatever."\n  }\n\n  def reply_to statement\n    REPLY_TO[statement.type]\n  end\nend\n\nclass Statement\n  def initialize input\n    @input = input\n  end\n\n  def type\n    if silent?\n      :silence\n    elsif force?\n      :force\n    elsif question?\n      :question\n    else\n      :default\n    end\n  end\n\n  private\n\n  def question?\n    @input.end_with? "?"\n  end\n\n  def force?\n    return unless @input.match(/[a-zA-Z]/)\n    @input.upcase == @input\n  end\n\n  def silent?\n    @input.to_s.strip.empty?\n  end\nend	\N	\N	0	3	2014-10-25 22:19:03	2014-10-25 22:19:03	71	bob.rb	{"bob.rb":"class Bob\\n  def hey statement\\n    reply_to Statement.new(statement)\\n  end\\n\\n  private\\n\\n  REPLY_TO = {\\n    question: \\"Sure.\\",\\n    force: \\"Woah, chill out!\\",\\n    silence: \\"Fine. Be that way!\\",\\n    default: \\"Whatever.\\"\\n  }\\n\\n  def reply_to statement\\n    REPLY_TO[statement.type]\\n  end\\nend\\n\\nclass Statement\\n  def initialize input\\n    @input = input\\n  end\\n\\n  def type\\n    if silent?\\n      :silence\\n    elsif force?\\n      :force\\n    elsif question?\\n      :question\\n    else\\n      :default\\n    end\\n  end\\n\\n  private\\n\\n  def question?\\n    @input.end_with? \\"?\\"\\n  end\\n\\n  def force?\\n    return unless @input.match(/[a-zA-Z]/)\\n    @input.upcase == @input\\n  end\\n\\n  def silent?\\n    @input.to_s.strip.empty?\\n  end\\nend"}
123	7	65afffb3be875c54a6b806d5	superseded	ruby	bob	class Bob\n\tdef hey statement\n\t\trespond_to Statement.new(statement)\n\tend\n\n\tprivate\n\tRESPOND_TO = {\n\t\tquestion: "Sure.",\n\t\tforce: "Woah, chill out!",\n\t\tsilence: "Fine. Be that way!",\n\t\tdefault: "Whatever."\n\t}\n\n\tdef respond_to statement\n\t\tRESPOND_TO[statement.type]\n\tend\nend\n\nclass Statement\n\tdef initialize input\n\t\t@input = input\n\tend\n\n\tdef type\n\t\treturn :silence if is_silent\n\t\treturn :force if is_force\n\t\treturn :question if is_question\n\t\t:default\n\tend\n\n\tprivate\n\tdef is_question\n\t\t@input.end_with? "?"\n\tend\n\n\tdef is_force\n\t\treturn unless @input.match(/[a-zA-Z]/)\n\t\t@input.upcase == @input\n\tend\n\n\tdef is_silent\n\t\t@input.to_s.strip.empty?\n\tend\nend	\N	\N	0	1	2014-11-06 10:09:10	2014-11-06 10:09:10	71	bob.rb	{"bob.rb":"class Bob\\n\\tdef hey statement\\n\\t\\trespond_to Statement.new(statement)\\n\\tend\\n\\n\\tprivate\\n\\tRESPOND_TO = {\\n\\t\\tquestion: \\"Sure.\\",\\n\\t\\tforce: \\"Woah, chill out!\\",\\n\\t\\tsilence: \\"Fine. Be that way!\\",\\n\\t\\tdefault: \\"Whatever.\\"\\n\\t}\\n\\n\\tdef respond_to statement\\n\\t\\tRESPOND_TO[statement.type]\\n\\tend\\nend\\n\\nclass Statement\\n\\tdef initialize input\\n\\t\\t@input = input\\n\\tend\\n\\n\\tdef type\\n\\t\\treturn :silence if is_silent\\n\\t\\treturn :force if is_force\\n\\t\\treturn :question if is_question\\n\\t\\t:default\\n\\tend\\n\\n\\tprivate\\n\\tdef is_question\\n\\t\\t@input.end_with? \\"?\\"\\n\\tend\\n\\n\\tdef is_force\\n\\t\\treturn unless @input.match(/[a-zA-Z]/)\\n\\t\\t@input.upcase == @input\\n\\tend\\n\\n\\tdef is_silent\\n\\t\\t@input.to_s.strip.empty?\\n\\tend\\nend"}
124	7	4474172a52597b1200d69634	superseded	ruby	bob	class Bob\n  def hey statement\n    respond_to Statement.new(statement)\n  end\n\n  private\n\n  RESPOND_TO = {\n    question: "Sure.",\n    force: "Woah, chill out!",\n    silence: "Fine. Be that way!",\n    default: "Whatever."\n  }\n\n  def respond_to statement\n    RESPOND_TO[statement.type]\n  end\nend\n\nclass Statement\n  def initialize input\n    @input = input\n  end\n\n  def type\n    return :silence if silent?\n    return :force if force?\n    return :question if question?\n    :default\n  end\n\n  private\n\n  def question?\n    @input.end_with? "?"\n  end\n\n  def force?\n    return unless @input.match(/[a-zA-Z]/)\n    @input.upcase == @input\n  end\n\n  def silent?\n    @input.to_s.strip.empty?\n  end\nend	\N	\N	0	2	2014-11-21 10:36:35	2014-11-21 10:36:35	71	bob.rb	{"bob.rb":"class Bob\\n  def hey statement\\n    respond_to Statement.new(statement)\\n  end\\n\\n  private\\n\\n  RESPOND_TO = {\\n    question: \\"Sure.\\",\\n    force: \\"Woah, chill out!\\",\\n    silence: \\"Fine. Be that way!\\",\\n    default: \\"Whatever.\\"\\n  }\\n\\n  def respond_to statement\\n    RESPOND_TO[statement.type]\\n  end\\nend\\n\\nclass Statement\\n  def initialize input\\n    @input = input\\n  end\\n\\n  def type\\n    return :silence if silent?\\n    return :force if force?\\n    return :question if question?\\n    :default\\n  end\\n\\n  private\\n\\n  def question?\\n    @input.end_with? \\"?\\"\\n  end\\n\\n  def force?\\n    return unless @input.match(/[a-zA-Z]/)\\n    @input.upcase == @input\\n  end\\n\\n  def silent?\\n    @input.to_s.strip.empty?\\n  end\\nend"}
125	7	83c9304d1441a431d18ae4e1	pending	javascript	hamming	var compute = function(strand1, strand2) {\n\tvar i = Math.min(strand1.length, strand2.length);\n\tvar count = 0;\n\twhile(i--) {\n\t\tif(strand1[i]!==strand2[i]) count++;\n\t}\n\treturn count;\n}	\N	\N	0	1	2014-10-24 16:10:46	2014-10-24 16:10:46	72	hamming.js	{"hamming.js":"var compute = function(strand1, strand2) {\\n\\tvar i = Math.min(strand1.length, strand2.length);\\n\\tvar count = 0;\\n\\twhile(i--) {\\n\\t\\tif(strand1[i]!==strand2[i]) count++;\\n\\t}\\n\\treturn count;\\n}"}
126	23	5ce393409899cec8dd5a8892	superseded	javascript	gigasecond	var Gigasecond = function(inputDate) {\r\n\tthis.dateToNum = Date.parse(inputDate) + Math.pow(10, 12);\t\r\n\tthis.result = new Date(this.dateToNum);\r\n\tthis.result.setHours(0,0,0);\r\n};\r\n\r\nGigasecond.prototype.date = function () {\r\n\treturn this.result;\t\r\n};\r\n\r\nmodule.exports = Gigasecond;	\N	\N	0	1	2014-11-03 16:22:26	2014-11-03 16:22:26	73	\\javascript\\gigasecond\\gigasecond.js	{"\\\\javascript\\\\gigasecond\\\\gigasecond.js":"var Gigasecond = function(inputDate) {\\r\\n\\tthis.dateToNum = Date.parse(inputDate) + Math.pow(10, 12);\\t\\r\\n\\tthis.result = new Date(this.dateToNum);\\r\\n\\tthis.result.setHours(0,0,0);\\r\\n};\\r\\n\\r\\nGigasecond.prototype.date = function () {\\r\\n\\treturn this.result;\\t\\r\\n};\\r\\n\\r\\nmodule.exports = Gigasecond;"}
127	23	58d9e2eac7bf43da1a99666f	pending	javascript	gigasecond	var Gigasecond = function(inputDate) {\r\n\tthis.dateToNum = inputDate.getTime();\t\r\n};\r\n\r\nGigasecond.prototype.date = function () {\r\n\tvar result = new Date(this.dateToNum + Math.pow(10, 12));\r\n\tresult.setHours(0, 0, 0);\r\n\t\r\n\treturn result;\t\r\n};\r\n\r\nmodule.exports = Gigasecond;	\N	\N	0	3	2014-11-20 09:46:42	2014-11-20 09:46:42	73	\\javascript\\gigasecond\\gigasecond.js	{"\\\\javascript\\\\gigasecond\\\\gigasecond.js":"var Gigasecond = function(inputDate) {\\r\\n\\tthis.dateToNum = inputDate.getTime();\\t\\r\\n};\\r\\n\\r\\nGigasecond.prototype.date = function () {\\r\\n\\tvar result = new Date(this.dateToNum + Math.pow(10, 12));\\r\\n\\tresult.setHours(0, 0, 0);\\r\\n\\t\\r\\n\\treturn result;\\t\\r\\n};\\r\\n\\r\\nmodule.exports = Gigasecond;"}
128	23	a9afff1c93c8f98caab18a34	superseded	javascript	gigasecond	var Gigasecond = function(inputDate) {\r\n\tthis.dateToNum = Date.parse(inputDate) + Math.pow(10, 12);\t\r\n};\r\n\r\nGigasecond.prototype.date = function () {\r\n\tvar result = new Date(this.dateToNum);\r\n\tresult.setHours(0,0,0);\r\n\t\r\n\treturn result;\t\r\n};\r\n\r\nmodule.exports = Gigasecond;	\N	\N	0	2	2014-11-27 14:50:38	2014-11-27 14:50:38	73	\\javascript\\gigasecond\\gigasecond.js	{"\\\\javascript\\\\gigasecond\\\\gigasecond.js":"var Gigasecond = function(inputDate) {\\r\\n\\tthis.dateToNum = Date.parse(inputDate) + Math.pow(10, 12);\\t\\r\\n};\\r\\n\\r\\nGigasecond.prototype.date = function () {\\r\\n\\tvar result = new Date(this.dateToNum);\\r\\n\\tresult.setHours(0,0,0);\\r\\n\\t\\r\\n\\treturn result;\\t\\r\\n};\\r\\n\\r\\nmodule.exports = Gigasecond;"}
129	17	30adffcf7ef64eb02d2282fb	pending	haskell	grade-school	module School where\n\nimport Control.Arrow (second)\nimport Data.Function (on)\nimport Data.List (sort, sortBy)\nimport qualified Data.Map as M (fromList, insertWith, lookup, toList)\n\ntype School = [(Int, [String])]\n\nempty :: School\nempty = []\n\nsorted :: School -> School\nsorted = sortBy (compare `on` fst) . map (second sort)\n\nadd :: Int -> String -> School -> School\nadd g n s = M.toList $ M.insertWith (++) g [n] (M.fromList s)\n\ngrade :: Int -> School -> [String]\ngrade g s = case M.lookup g (M.fromList s) of (Just ns) -> ns\n                                              Nothing -> []	\N	\N	0	1	2015-01-01 15:45:14	2015-01-01 15:45:14	74	School.hs	{"School.hs":"module School where\\n\\nimport Control.Arrow (second)\\nimport Data.Function (on)\\nimport Data.List (sort, sortBy)\\nimport qualified Data.Map as M (fromList, insertWith, lookup, toList)\\n\\ntype School = [(Int, [String])]\\n\\nempty :: School\\nempty = []\\n\\nsorted :: School -\\u003e School\\nsorted = sortBy (compare `on` fst) . map (second sort)\\n\\nadd :: Int -\\u003e String -\\u003e School -\\u003e School\\nadd g n s = M.toList $ M.insertWith (++) g [n] (M.fromList s)\\n\\ngrade :: Int -\\u003e School -\\u003e [String]\\ngrade g s = case M.lookup g (M.fromList s) of (Just ns) -\\u003e ns\\n                                              Nothing -\\u003e []"}
130	17	7b5477f4258d637fca134f88	pending	ruby	anagram	class Anagram < String\n  def match strings\n    strings.select do |string|\n      next if string.downcase == self.downcase\n      sort(string) == sort(self)\n    end\n  end\n\n  private\n    def sort string\n      string.downcase.chars.sort.join\n    end\nend	\N	\N	0	1	2015-01-01 12:01:43	2015-01-01 12:01:43	75	anagram.rb	{"anagram.rb":"class Anagram \\u003c String\\n  def match strings\\n    strings.select do |string|\\n      next if string.downcase == self.downcase\\n      sort(string) == sort(self)\\n    end\\n  end\\n\\n  private\\n    def sort string\\n      string.downcase.chars.sort.join\\n    end\\nend"}
131	17	e4f3e8f2dab011134c79d2b3	superseded	csharp	bob	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace ExercismCSharp.bob\r\n{\r\n    class Bob\r\n    {\r\n        public string Hey(string phrase)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(phrase))\r\n            {\r\n                return "Fine. Be that way!";\r\n            }\r\n            if (phrase.EndsWith("?"))\r\n            {\r\n                if (!IsNumeric(phrase) && phrase.ToUpper() == phrase)\r\n                {\r\n                    return "Whoa, chill out!";\r\n                }\r\n                return "Sure.";\r\n            }\r\n            if (!IsNumeric(phrase) && phrase.ToUpper() == phrase)\r\n            {\r\n                return "Whoa, chill out!";\r\n            }\r\n            return "Whatever.";\r\n        }\r\n\r\n        static bool IsNumeric(string s)\r\n        {\r\n            return s.All(c => !char.IsLetter(c));\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2015-01-09 13:21:55	2015-01-09 13:21:55	76	Bob.cs	{"Bob.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\n\\r\\nnamespace ExercismCSharp.bob\\r\\n{\\r\\n    class Bob\\r\\n    {\\r\\n        public string Hey(string phrase)\\r\\n        {\\r\\n            if (string.IsNullOrWhiteSpace(phrase))\\r\\n            {\\r\\n                return \\"Fine. Be that way!\\";\\r\\n            }\\r\\n            if (phrase.EndsWith(\\"?\\"))\\r\\n            {\\r\\n                if (!IsNumeric(phrase) \\u0026\\u0026 phrase.ToUpper() == phrase)\\r\\n                {\\r\\n                    return \\"Whoa, chill out!\\";\\r\\n                }\\r\\n                return \\"Sure.\\";\\r\\n            }\\r\\n            if (!IsNumeric(phrase) \\u0026\\u0026 phrase.ToUpper() == phrase)\\r\\n            {\\r\\n                return \\"Whoa, chill out!\\";\\r\\n            }\\r\\n            return \\"Whatever.\\";\\r\\n        }\\r\\n\\r\\n        static bool IsNumeric(string s)\\r\\n        {\\r\\n            return s.All(c =\\u003e !char.IsLetter(c));\\r\\n        }\\r\\n    }\\r\\n}\\r"}
132	17	159577bc605e702b1d3e194a	pending	csharp	bob	﻿using System.Linq;\r\n\r\nnamespace ExercismCSharp.bob\r\n{\r\n    class Bob\r\n    {\r\n        public string Hey(string phrase)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(phrase))\r\n            {\r\n                return "Fine. Be that way!";\r\n            }\r\n            if (!IsNumeric(phrase) && phrase.ToUpper() == phrase)\r\n            {\r\n                return "Whoa, chill out!";\r\n            }\r\n            if (phrase.EndsWith("?"))\r\n            {\r\n                return "Sure.";\r\n            }\r\n            return "Whatever.";\r\n        }\r\n\r\n        static bool IsNumeric(string s)\r\n        {\r\n            return s.All(c => !char.IsLetter(c));\r\n        }\r\n    }\r\n}\r	\N	\N	0	2	2015-01-13 02:16:11	2015-01-13 02:16:11	76	Bob.cs	{"Bob.cs":"﻿using System.Linq;\\r\\n\\r\\nnamespace ExercismCSharp.bob\\r\\n{\\r\\n    class Bob\\r\\n    {\\r\\n        public string Hey(string phrase)\\r\\n        {\\r\\n            if (string.IsNullOrWhiteSpace(phrase))\\r\\n            {\\r\\n                return \\"Fine. Be that way!\\";\\r\\n            }\\r\\n            if (!IsNumeric(phrase) \\u0026\\u0026 phrase.ToUpper() == phrase)\\r\\n            {\\r\\n                return \\"Whoa, chill out!\\";\\r\\n            }\\r\\n            if (phrase.EndsWith(\\"?\\"))\\r\\n            {\\r\\n                return \\"Sure.\\";\\r\\n            }\\r\\n            return \\"Whatever.\\";\\r\\n        }\\r\\n\\r\\n        static bool IsNumeric(string s)\\r\\n        {\\r\\n            return s.All(c =\\u003e !char.IsLetter(c));\\r\\n        }\\r\\n    }\\r\\n}\\r"}
133	17	3ab40839c1abfcddfc7bc42f	pending	scala	bob	/**\n * Created by luigi on 25/11/14.\n */\nclass Bob {\n\n  object Answer {\n    val Whatever = "Whatever."\n    val ChillOut = "Whoa, chill out!"\n    val Sure = "Sure."\n    val Fine = "Fine. Be that way!"\n  }\n\n  object Regex {\n    val Whatever = """([\\w\\W]+[\\.!]?|[0-9\\W]+)""".r\n    val ChillOut = """(^[0-9\\W]*[A-Z\\W]+[!\\?]|[A-Z\\W]+)$""".r\n    val Sure = """^[\\w\\W]*\\?$""".r\n    val Fine = """^\\s*$""".r\n  }\n\n  def hey(s :String) = s match {\n    case Regex.Fine() => Answer.Fine\n    case Regex.ChillOut(_) => Answer.ChillOut\n    case Regex.Sure() => Answer.Sure\n    case Regex.Whatever(_) => Answer.Whatever\n    case _ => "Nope"\n  }\n}	\N	\N	0	1	2015-01-11 10:35:08	2015-01-11 10:35:08	77	Bob.scala	{"Bob.scala":"/**\\n * Created by luigi on 25/11/14.\\n */\\nclass Bob {\\n\\n  object Answer {\\n    val Whatever = \\"Whatever.\\"\\n    val ChillOut = \\"Whoa, chill out!\\"\\n    val Sure = \\"Sure.\\"\\n    val Fine = \\"Fine. Be that way!\\"\\n  }\\n\\n  object Regex {\\n    val Whatever = \\"\\"\\"([\\\\w\\\\W]+[\\\\.!]?|[0-9\\\\W]+)\\"\\"\\".r\\n    val ChillOut = \\"\\"\\"(^[0-9\\\\W]*[A-Z\\\\W]+[!\\\\?]|[A-Z\\\\W]+)$\\"\\"\\".r\\n    val Sure = \\"\\"\\"^[\\\\w\\\\W]*\\\\?$\\"\\"\\".r\\n    val Fine = \\"\\"\\"^\\\\s*$\\"\\"\\".r\\n  }\\n\\n  def hey(s :String) = s match {\\n    case Regex.Fine() =\\u003e Answer.Fine\\n    case Regex.ChillOut(_) =\\u003e Answer.ChillOut\\n    case Regex.Sure() =\\u003e Answer.Sure\\n    case Regex.Whatever(_) =\\u003e Answer.Whatever\\n    case _ =\\u003e \\"Nope\\"\\n  }\\n}"}
134	20	c10770b04cda3d9478fddfce	done	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport qualified Data.Map.Strict as Map\n\ncount :: Char -> String -> Int\ncount n s\n  | elem n "ATCGU" = length $ filter (== n) s\n  | otherwise      = error $ "invalid nucleotide " ++ show n\n\nnucleotideCounts :: String -> Map.Map Char Int\nnucleotideCounts s = Map.fromList $ map pairCount nucleotides\n  where\n    pairCount c = (c, count c s)\n    nucleotides = "ATCG"	2014-10-19 06:49:20	\N	0	1	2014-10-10 07:09:17	2014-10-10 07:09:17	78	nucleotide-count.hs	{"nucleotide-count.hs":"module DNA (count, nucleotideCounts) where\\n\\nimport qualified Data.Map.Strict as Map\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount n s\\n  | elem n \\"ATCGU\\" = length $ filter (== n) s\\n  | otherwise      = error $ \\"invalid nucleotide \\" ++ show n\\n\\nnucleotideCounts :: String -\\u003e Map.Map Char Int\\nnucleotideCounts s = Map.fromList $ map pairCount nucleotides\\n  where\\n    pairCount c = (c, count c s)\\n    nucleotides = \\"ATCG\\""}
135	20	1f724da949775462ee9634e9	done	ruby	matrix	class Matrix\n  def initialize(matrix_str)\n    @matrix_str = matrix_str\n  end\n\n  def rows\n    matrix_str.each_line.map { |line| line.split.map(&:to_i) }\n  end\n\n  def columns\n    rows.transpose\n  end\n\n  private\n\n  attr_reader :matrix_str\nend	2014-09-06 16:13:58	\N	0	1	2014-08-26 14:12:20	2014-08-26 14:12:20	79	/ruby/matrix/matrix.rb	{"/ruby/matrix/matrix.rb":"class Matrix\\n  def initialize(matrix_str)\\n    @matrix_str = matrix_str\\n  end\\n\\n  def rows\\n    matrix_str.each_line.map { |line| line.split.map(\\u0026:to_i) }\\n  end\\n\\n  def columns\\n    rows.transpose\\n  end\\n\\n  private\\n\\n  attr_reader :matrix_str\\nend"}
136	20	77f263333d86b0619da18df0	superseded	swift	leap	//\n//  Year.swift\n//  \n//\n//  Created by Steven Veshkini on 9/23/14.\n//\n//\n\nimport Foundation\n\npublic class Year {\n\n    let isLeapYear: Bool\n    let year: Int\n\n    public init(calendarYear: Int) {\n        self.year = calendarYear\n        self.isLeapYear = (year % 4 == 0) && (year % 100 != 0 || year % 400 == 0)\n    }\n}	\N	\N	0	1	2014-09-10 05:02:24	2014-09-10 05:02:24	80	Year.swift	{"Year.swift":"//\\n//  Year.swift\\n//  \\n//\\n//  Created by Steven Veshkini on 9/23/14.\\n//\\n//\\n\\nimport Foundation\\n\\npublic class Year {\\n\\n    let isLeapYear: Bool\\n    let year: Int\\n\\n    public init(calendarYear: Int) {\\n        self.year = calendarYear\\n        self.isLeapYear = (year % 4 == 0) \\u0026\\u0026 (year % 100 != 0 || year % 400 == 0)\\n    }\\n}"}
137	20	69adaabaab5fd5aa64a8815e	superseded	swift	leap	//\n//  Year.swift\n//  \n//\n//  Created by Steven Veshkini on 9/23/14.\n//\n//\n\nimport Foundation\n\npublic class Year {\n\n    let isLeapYear: Bool\n    let year: Int\n\n    public init(calendarYear: Int) {\n        self.year = calendarYear\n        self.isLeapYear = (self.year % 4 == 0) && (self.year % 100 != 0 || self.year % 400 == 0)\n    }\n}	\N	\N	0	2	2014-09-24 05:06:12	2014-09-24 05:06:12	80	Year.swift	{"Year.swift":"//\\n//  Year.swift\\n//  \\n//\\n//  Created by Steven Veshkini on 9/23/14.\\n//\\n//\\n\\nimport Foundation\\n\\npublic class Year {\\n\\n    let isLeapYear: Bool\\n    let year: Int\\n\\n    public init(calendarYear: Int) {\\n        self.year = calendarYear\\n        self.isLeapYear = (self.year % 4 == 0) \\u0026\\u0026 (self.year % 100 != 0 || self.year % 400 == 0)\\n    }\\n}"}
138	20	29b570c2b886cb2e507415ca	done	swift	leap	//\n//  Year.swift\n//  \n//\n//  Created by Steven Veshkini on 9/23/14.\n//\n//\n\nimport Foundation\n\nstruct Year {\n\n    let calendarYear: Int\n    var isLeapYear: Bool {\n        return (self.calendarYear % 4 == 0) && (self.calendarYear % 100 != 0 || self.calendarYear % 400 == 0)\n    }\n}	2014-12-29 23:02:20	\N	0	3	2014-12-20 22:37:33	2014-12-20 22:37:33	80	Year.swift	{"Year.swift":"//\\n//  Year.swift\\n//  \\n//\\n//  Created by Steven Veshkini on 9/23/14.\\n//\\n//\\n\\nimport Foundation\\n\\nstruct Year {\\n\\n    let calendarYear: Int\\n    var isLeapYear: Bool {\\n        return (self.calendarYear % 4 == 0) \\u0026\\u0026 (self.calendarYear % 100 != 0 || self.calendarYear % 400 == 0)\\n    }\\n}"}
139	20	2d5b6afcb6dfd5ab84fdbeb4	done	ruby	triangle	class Triangle\n\n  attr_reader :side1, :side2, :side3, :sides\n\n  def initialize(one, two, three)\n    @side1 = one\n    @side2 = two\n    @side3 = three\n    @sides = validated_sides\n  end\n\n  def kind\n    equilateral || isosceles || :scalene\n  end\n\n  private\n\n  def validated_sides\n    if valid_triangle?\n      [side1, side2, side3]\n    else\n      raise TriangleError\n    end\n  end\n\n  def equilateral\n    sides.uniq.count == 1 ? :equilateral : false\n  end\n\n  def isosceles\n    sides.uniq.count == 2 ? :isosceles : false\n  end\n\n  def valid_triangle?\n    (side1+side2) > side3 && (side2+side3) > side1 && (side1+side3) > side2\n  end\n\nend\n\nclass TriangleError < StandardError\n\nend	2014-10-08 16:03:57	\N	0	1	2014-10-02 00:00:19	2014-10-02 00:00:19	81	triangle.rb	{"triangle.rb":"class Triangle\\n\\n  attr_reader :side1, :side2, :side3, :sides\\n\\n  def initialize(one, two, three)\\n    @side1 = one\\n    @side2 = two\\n    @side3 = three\\n    @sides = validated_sides\\n  end\\n\\n  def kind\\n    equilateral || isosceles || :scalene\\n  end\\n\\n  private\\n\\n  def validated_sides\\n    if valid_triangle?\\n      [side1, side2, side3]\\n    else\\n      raise TriangleError\\n    end\\n  end\\n\\n  def equilateral\\n    sides.uniq.count == 1 ? :equilateral : false\\n  end\\n\\n  def isosceles\\n    sides.uniq.count == 2 ? :isosceles : false\\n  end\\n\\n  def valid_triangle?\\n    (side1+side2) \\u003e side3 \\u0026\\u0026 (side2+side3) \\u003e side1 \\u0026\\u0026 (side1+side3) \\u003e side2\\n  end\\n\\nend\\n\\nclass TriangleError \\u003c StandardError\\n\\nend"}
140	20	a0fbe2591c16e153653f494d	done	perl5	bob	#!/usr/bin/perl \n\npackage Bob;\n\nuse strict;\nuse Exporter;\nuse vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);\n\n$VERSION     = 1.00;\n@ISA         = qw(Exporter);\n@EXPORT      = ();\n@EXPORT_OK   = qw(hey);\n%EXPORT_TAGS = ( DEFAULT => [qw(&hey)],\n                );\n\n\nsub hey {\n\tmy ($arg)= @_;\n\n\t# is shouting ?\n\tif   (( $arg =~ /[a-zA-Z]/ ) && ( uc($arg) eq $arg )) {\n\t\treturn "Woah, chill out!";\n\t}\n\n\t\t# is question ?\n\tif ( ($arg =~ /^.*\\?$/ )) {\n\t\treturn "Sure.";\n\t}\n\n\t# is saying nothing ?\n\tif  ( $arg =~ /^\\s*$/ ) {\n\t\treturn "Fine. Be that way!";\n\t}\n\n\treturn "Whatever.";\n}\n\n1;	2014-08-26 16:56:02	\N	0	1	2014-08-21 21:20:56	2014-08-21 21:20:56	82	Bob.pm	{"Bob.pm":"#!/usr/bin/perl \\n\\npackage Bob;\\n\\nuse strict;\\nuse Exporter;\\nuse vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);\\n\\n$VERSION     = 1.00;\\n@ISA         = qw(Exporter);\\n@EXPORT      = ();\\n@EXPORT_OK   = qw(hey);\\n%EXPORT_TAGS = ( DEFAULT =\\u003e [qw(\\u0026hey)],\\n                );\\n\\n\\nsub hey {\\n\\tmy ($arg)= @_;\\n\\n\\t# is shouting ?\\n\\tif   (( $arg =~ /[a-zA-Z]/ ) \\u0026\\u0026 ( uc($arg) eq $arg )) {\\n\\t\\treturn \\"Woah, chill out!\\";\\n\\t}\\n\\n\\t\\t# is question ?\\n\\tif ( ($arg =~ /^.*\\\\?$/ )) {\\n\\t\\treturn \\"Sure.\\";\\n\\t}\\n\\n\\t# is saying nothing ?\\n\\tif  ( $arg =~ /^\\\\s*$/ ) {\\n\\t\\treturn \\"Fine. Be that way!\\";\\n\\t}\\n\\n\\treturn \\"Whatever.\\";\\n}\\n\\n1;"}
141	20	0e2d75e411c44bc60b736ea9	done	python	allergies	ALLERGY_LIST = [\n    'eggs',\n    'peanuts',\n    'shellfish',\n    'strawberries',\n    'tomatoes',\n    'chocolate',\n    'pollen',\n    'cats'\n]\n\n\nclass Allergies(object):\n    def __init__(self, value):\n        self.list = self._compute_allergies(value)\n\n    def _compute_allergies(self, value):\n        return [\n            ALLERGY_LIST[i] for i in range(8)\n            if value & 1 << i\n        ]\n\n    def is_allergic_to(self, item):\n        return item in self.list	2014-08-30 03:12:09	\N	0	1	2014-08-24 05:33:10	2014-08-24 05:33:10	83	allergies.py	{"allergies.py":"ALLERGY_LIST = [\\n    'eggs',\\n    'peanuts',\\n    'shellfish',\\n    'strawberries',\\n    'tomatoes',\\n    'chocolate',\\n    'pollen',\\n    'cats'\\n]\\n\\n\\nclass Allergies(object):\\n    def __init__(self, value):\\n        self.list = self._compute_allergies(value)\\n\\n    def _compute_allergies(self, value):\\n        return [\\n            ALLERGY_LIST[i] for i in range(8)\\n            if value \\u0026 1 \\u003c\\u003c i\\n        ]\\n\\n    def is_allergic_to(self, item):\\n        return item in self.list"}
142	20	3438fc28847dea962342fa88	done	python	anagram	def detect_anagrams(word,word_list):\n\tanagrams = []\n\tfor pos_word in word_list:\n\t\tif (len(word) == len(pos_word)):\n\t\t\twl = word.lower()\n\t\t\tpwl = pos_word.lower()\n\t\t\ttemp = [(wl[i] in pwl) and (wl.count(wl[i]) == pwl.count(wl[i])) for i in range(len(word))]\n\t\t\t\n\t\t\tif (temp.count(True) == len(word)) and (word.lower() != pos_word.lower()):\n\t\t\t\tanagrams.append(pos_word)\n\treturn anagrams	2014-09-30 11:28:31	\N	0	1	2014-09-25 03:58:14	2014-09-25 03:58:14	84	anagram.py	{"anagram.py":"def detect_anagrams(word,word_list):\\n\\tanagrams = []\\n\\tfor pos_word in word_list:\\n\\t\\tif (len(word) == len(pos_word)):\\n\\t\\t\\twl = word.lower()\\n\\t\\t\\tpwl = pos_word.lower()\\n\\t\\t\\ttemp = [(wl[i] in pwl) and (wl.count(wl[i]) == pwl.count(wl[i])) for i in range(len(word))]\\n\\t\\t\\t\\n\\t\\t\\tif (temp.count(True) == len(word)) and (word.lower() != pos_word.lower()):\\n\\t\\t\\t\\tanagrams.append(pos_word)\\n\\treturn anagrams"}
143	21	7cb607faf061479f2ef8f890	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA dna = map convert dna\n\twhere   convert 'G' = 'C'\n                convert 'C' = 'G'\n                convert 'T' = 'A'\n                convert 'A' = 'U'\n                convert  _  = undefined	\N	\N	0	1	2015-01-15 08:50:23	2015-01-15 08:50:23	85	DNA.hs	{"DNA.hs":"module DNA (toRNA) where\\n\\ntoRNA :: String -\\u003e String\\ntoRNA dna = map convert dna\\n\\twhere   convert 'G' = 'C'\\n                convert 'C' = 'G'\\n                convert 'T' = 'A'\\n                convert 'A' = 'U'\\n                convert  _  = undefined"}
144	21	1dc18115a0ae4f7511482f59	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA dna = map convert dna\n\twhere convert x = case x of \n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n                'T' -> 'A'\n                'A' -> 'U'\n                _   -> undefined	\N	\N	0	2	2015-01-15 11:36:52	2015-01-15 11:36:52	85	DNA.hs	{"DNA.hs":"module DNA (toRNA) where\\n\\ntoRNA :: String -\\u003e String\\ntoRNA dna = map convert dna\\n\\twhere convert x = case x of \\n\\t\\t'G' -\\u003e 'C'\\n\\t\\t'C' -\\u003e 'G'\\n                'T' -\\u003e 'A'\\n                'A' -\\u003e 'U'\\n                _   -\\u003e undefined"}
145	21	7f25b9030edd8cba71e4a344	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA dna = map convert dna\n\twhere convert x = case x of\n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n\t\t'T' -> 'A'\n\t\t'A' -> 'U'\n\t\t_   -> error $ x : " is not a nucleotide."	2015-01-17 10:47:26.902484	\N	0	3	2015-01-16 07:22:29	2015-01-16 07:22:29	85	DNA.hs	{"DNA.hs":"module DNA (toRNA) where\\n\\ntoRNA :: String -\\u003e String\\ntoRNA dna = map convert dna\\n\\twhere convert x = case x of\\n\\t\\t'G' -\\u003e 'C'\\n\\t\\t'C' -\\u003e 'G'\\n\\t\\t'T' -\\u003e 'A'\\n\\t\\t'A' -\\u003e 'U'\\n\\t\\t_   -\\u003e error $ x : \\" is not a nucleotide.\\""}
146	21	7259b75af2a7fec33c5d2bf5	done	clojure	rna-transcription	(ns dna)\n\n(defn- rna-replace [nucleotide]\n  (if (= \\T nucleotide) \\U nucleotide))\n\n(defn to-rna [strand]\n  (clojure.string/join "" (map rna-replace strand)))	2015-01-17 10:47:26.929943	\N	0	1	2015-01-16 15:56:15	2015-01-16 15:56:15	86	rna-transcription.clj	{"rna-transcription.clj":"(ns dna)\\n\\n(defn- rna-replace [nucleotide]\\n  (if (= \\\\T nucleotide) \\\\U nucleotide))\\n\\n(defn to-rna [strand]\\n  (clojure.string/join \\"\\" (map rna-replace strand)))"}
147	21	4205b611ec7f031a26e64861	done	python	series	def slices(series, size):\n    series = [int(x) for x in series]\n    if size <= 0 or size > len(series):\n        raise ValueError\n    offsets = range(len(series) - size + 1)\n    return [series[x:x+size] for x in offsets]	2015-01-17 10:47:26.955016	\N	0	1	2015-01-15 23:08:31	2015-01-15 23:08:31	87	series.py	{"series.py":"def slices(series, size):\\n    series = [int(x) for x in series]\\n    if size \\u003c= 0 or size \\u003e len(series):\\n        raise ValueError\\n    offsets = range(len(series) - size + 1)\\n    return [series[x:x+size] for x in offsets]"}
148	21	f21c6bc93797be239292c336	done	ruby	gigasecond	class Gigasecond\n  GIGASECOND_IN_SECONDS = 10**9\n  DAY_IN_SECONDS = 60 * 60 * 24\n  GIGASECOND_IN_DAYS = GIGASECOND_IN_SECONDS / DAY_IN_SECONDS\n\n  def self.from(date)\n    date + GIGASECOND_IN_DAYS\n  end\nend	2015-01-17 04:42:42	\N	0	1	2015-01-17 02:51:08	2015-01-17 02:51:08	88	gigasecond.rb	{"gigasecond.rb":"class Gigasecond\\n  GIGASECOND_IN_SECONDS = 10**9\\n  DAY_IN_SECONDS = 60 * 60 * 24\\n  GIGASECOND_IN_DAYS = GIGASECOND_IN_SECONDS / DAY_IN_SECONDS\\n\\n  def self.from(date)\\n    date + GIGASECOND_IN_DAYS\\n  end\\nend"}
149	36	a24066eaed8a50cffee55ab1	superseded	ruby	hamming	class Hamming\n  class << self\n    def compute(a, b)\n      diff = 0\n      a, b = normalize(a, b)\n      (0..a.size).each do |counter|\n        diff += 1 if a[counter] != b[counter]\n      end\n      diff\n    end\n\n    def normalize(a, b)\n      if a.size > b.size\n        a = a[0..(b.size - 1)]\n      else\n        b = b[0..(a.size - 1)]\n      end\n      [a, b]\n    end\n  end\nend	\N	\N	0	1	2014-09-27 02:09:45	2014-09-27 02:09:45	89	hamming.rb	{"hamming.rb":"class Hamming\\n  class \\u003c\\u003c self\\n    def compute(a, b)\\n      diff = 0\\n      a, b = normalize(a, b)\\n      (0..a.size).each do |counter|\\n        diff += 1 if a[counter] != b[counter]\\n      end\\n      diff\\n    end\\n\\n    def normalize(a, b)\\n      if a.size \\u003e b.size\\n        a = a[0..(b.size - 1)]\\n      else\\n        b = b[0..(a.size - 1)]\\n      end\\n      [a, b]\\n    end\\n  end\\nend"}
150	36	ac13f55a3b8314aeefb3bc1d	done	ruby	hamming	class Hamming\n  class << self\n    def compute(a, b)\n      diff = 0\n      a, b = normalize(a, b)\n      (0..a.size).each do |counter|\n        diff += 1 if a[counter] != b[counter]\n      end\n      diff\n    end\n\n    def normalize(a, b)\n      if a.size > b.size\n        a = a[0...b.size]\n      else\n        b = b[0...a.size]\n      end\n      [a, b]\n    end\n  end\nend	2014-10-03 22:14:56	\N	0	2	2014-10-02 11:04:53	2014-10-02 11:04:53	89	hamming.rb	{"hamming.rb":"class Hamming\\n  class \\u003c\\u003c self\\n    def compute(a, b)\\n      diff = 0\\n      a, b = normalize(a, b)\\n      (0..a.size).each do |counter|\\n        diff += 1 if a[counter] != b[counter]\\n      end\\n      diff\\n    end\\n\\n    def normalize(a, b)\\n      if a.size \\u003e b.size\\n        a = a[0...b.size]\\n      else\\n        b = b[0...a.size]\\n      end\\n      [a, b]\\n    end\\n  end\\nend"}
151	36	28285bbfe3e9a670e32c7a49	superseded	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [a b]\n  (count (filter false? (map #(= %1 %2) a b))))	\N	\N	0	1	2014-09-06 15:54:34	2014-09-06 15:54:34	90	dna.clj	{"dna.clj":"(ns dna)\\n\\n(defn hamming-distance [a b]\\n  (count (filter false? (map #(= %1 %2) a b))))"}
152	36	9c9010c0b7f557964a71d063	done	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [a b]\n  (count (filter false? (map = a b))))	2014-12-26 11:43:04	\N	0	2	2014-12-17 13:49:09	2014-12-17 13:49:09	90	dna.clj	{"dna.clj":"(ns dna)\\n\\n(defn hamming-distance [a b]\\n  (count (filter false? (map = a b))))"}
153	30	1e656146db300f49fa934d0e	superseded	clojure	anagram	(ns anagram)\n\n(defn string-to-sorted-chars\n  "Return a lower-cased sorted sequence of characters in a string"\n  [s]\n  (sort (clojure.string/lower-case s)))\n\n(defn anagrams-for\n  "Return the anagrams for a given word from a list of possible candidates"\n  [word candidates]\n  (let [ws (filter #(not= word %) candidates)\n        w (string-to-sorted-chars word)]\n    (filter #(= w (string-to-sorted-chars %)) ws)))	\N	\N	0	1	2014-12-14 14:44:57	2014-12-14 14:44:57	91	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn string-to-sorted-chars\\n  \\"Return a lower-cased sorted sequence of characters in a string\\"\\n  [s]\\n  (sort (clojure.string/lower-case s)))\\n\\n(defn anagrams-for\\n  \\"Return the anagrams for a given word from a list of possible candidates\\"\\n  [word candidates]\\n  (let [ws (filter #(not= word %) candidates)\\n        w (string-to-sorted-chars word)]\\n    (filter #(= w (string-to-sorted-chars %)) ws)))"}
154	30	1ca382535c6c8472397db2a9	done	clojure	anagram	(ns anagram)\n\n(defn string->sorted-chars\n  "Return a lower-cased sorted sequence of characters in a string"\n  [s]\n  (sort (clojure.string/lower-case s)))\n\n(defn anagrams-for\n  "Return the anagrams for a given word from a list of possible candidates"\n  [word candidates]\n  (let [valid-candidates (filter #(not= word %) candidates)\n        word-chars (string->sorted-chars word)]\n    (filter #(= word-chars (string->sorted-chars %)) valid-candidates)))	2014-12-20 08:28:17	\N	0	2	2014-12-15 19:14:14	2014-12-15 19:14:14	91	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn string-\\u003esorted-chars\\n  \\"Return a lower-cased sorted sequence of characters in a string\\"\\n  [s]\\n  (sort (clojure.string/lower-case s)))\\n\\n(defn anagrams-for\\n  \\"Return the anagrams for a given word from a list of possible candidates\\"\\n  [word candidates]\\n  (let [valid-candidates (filter #(not= word %) candidates)\\n        word-chars (string-\\u003esorted-chars word)]\\n    (filter #(= word-chars (string-\\u003esorted-chars %)) valid-candidates)))"}
155	35	7911b50fc2c2b89b5fe59651	superseded	haskell	bob	module Bob (\nresponseFor\n) where\n\nimport Data.Char\n\nisEmpty "" = True\nisEmpty (x:xs)\n  | Data.Char.isSpace x = isEmpty xs\n  | otherwise = False\n\nhasLetters "" = False\nhasLetters (x:xs)\n  | Data.Char.isLetter x = True\n  | otherwise = hasLetters xs\n\nisShout "" = True\nisShout (x:xs)\n  | Data.Char.isLower x = False\n  | otherwise = isShout xs\n\nisQuestion "" = False\nisQuestion "?" = True\nisQuestion (x:xs) = isQuestion xs\n\nresponseFor text\n  | isEmpty text = "Fine. Be that way!"\n  | isShout text && hasLetters text = "Woah, chill out!"\n  | isQuestion text = "Sure."\n  | otherwise = "Whatever."	\N	\N	0	1	2014-07-03 16:28:44	2014-07-03 16:28:44	92	bob.hs	{"bob.hs":"module Bob (\\nresponseFor\\n) where\\n\\nimport Data.Char\\n\\nisEmpty \\"\\" = True\\nisEmpty (x:xs)\\n  | Data.Char.isSpace x = isEmpty xs\\n  | otherwise = False\\n\\nhasLetters \\"\\" = False\\nhasLetters (x:xs)\\n  | Data.Char.isLetter x = True\\n  | otherwise = hasLetters xs\\n\\nisShout \\"\\" = True\\nisShout (x:xs)\\n  | Data.Char.isLower x = False\\n  | otherwise = isShout xs\\n\\nisQuestion \\"\\" = False\\nisQuestion \\"?\\" = True\\nisQuestion (x:xs) = isQuestion xs\\n\\nresponseFor text\\n  | isEmpty text = \\"Fine. Be that way!\\"\\n  | isShout text \\u0026\\u0026 hasLetters text = \\"Woah, chill out!\\"\\n  | isQuestion text = \\"Sure.\\"\\n  | otherwise = \\"Whatever.\\""}
156	35	be2002d4fb0ef0510ac46b3e	done	haskell	bob	module Bob (\nresponseFor\n) where\n\nimport Data.Char\n\nisEmpty :: String -> Bool\nisEmpty = all isSpace\n\nhasLetters :: String -> Bool\nhasLetters = any isLetter\n\nisShout :: String -> Bool\nisShout = not . any isLower\n\nisQuestion :: String -> Bool\n-- It's a question if the last thing in the string is a ?\nisQuestion "" = False\nisQuestion x = '?' == (last x)\n\nresponseFor :: String -> String\nresponseFor text\n  | isEmpty text = "Fine. Be that way!"\n  | isShout text && hasLetters text = "Woah, chill out!"\n  | isQuestion text = "Sure."\n  | otherwise = "Whatever."	2014-07-13 15:28:35	\N	0	4	2014-07-04 16:13:59	2014-07-04 16:13:59	92	bob.hs	{"bob.hs":"module Bob (\\nresponseFor\\n) where\\n\\nimport Data.Char\\n\\nisEmpty :: String -\\u003e Bool\\nisEmpty = all isSpace\\n\\nhasLetters :: String -\\u003e Bool\\nhasLetters = any isLetter\\n\\nisShout :: String -\\u003e Bool\\nisShout = not . any isLower\\n\\nisQuestion :: String -\\u003e Bool\\n-- It's a question if the last thing in the string is a ?\\nisQuestion \\"\\" = False\\nisQuestion x = '?' == (last x)\\n\\nresponseFor :: String -\\u003e String\\nresponseFor text\\n  | isEmpty text = \\"Fine. Be that way!\\"\\n  | isShout text \\u0026\\u0026 hasLetters text = \\"Woah, chill out!\\"\\n  | isQuestion text = \\"Sure.\\"\\n  | otherwise = \\"Whatever.\\""}
157	35	1021222eab45308d9346f79a	superseded	haskell	bob	module Bob (\nresponseFor\n) where\n\nimport Data.Char\n\nisEmpty :: String -> Bool\n-- It's empty if there's anything that's not a space, or not anything that's\n-- not a space\nisEmpty = not . any (not . isSpace)\n\nhasLetters :: String -> Bool\nhasLetters = any isLetter\n\nisShout :: String -> Bool\nisShout = not . any isLower\n\nisQuestion :: String -> Bool\n-- It's a question if the last thing in the string is a ?\nisQuestion "" = False\nisQuestion x = '?' == (last x)\n\nresponseFor :: String -> String\nresponseFor text\n  | isEmpty text = "Fine. Be that way!"\n  | isShout text && hasLetters text = "Woah, chill out!"\n  | isQuestion text = "Sure."\n  | otherwise = "Whatever."	\N	\N	0	3	2014-08-23 05:22:03	2014-08-23 05:22:03	92	bob.hs	{"bob.hs":"module Bob (\\nresponseFor\\n) where\\n\\nimport Data.Char\\n\\nisEmpty :: String -\\u003e Bool\\n-- It's empty if there's anything that's not a space, or not anything that's\\n-- not a space\\nisEmpty = not . any (not . isSpace)\\n\\nhasLetters :: String -\\u003e Bool\\nhasLetters = any isLetter\\n\\nisShout :: String -\\u003e Bool\\nisShout = not . any isLower\\n\\nisQuestion :: String -\\u003e Bool\\n-- It's a question if the last thing in the string is a ?\\nisQuestion \\"\\" = False\\nisQuestion x = '?' == (last x)\\n\\nresponseFor :: String -\\u003e String\\nresponseFor text\\n  | isEmpty text = \\"Fine. Be that way!\\"\\n  | isShout text \\u0026\\u0026 hasLetters text = \\"Woah, chill out!\\"\\n  | isQuestion text = \\"Sure.\\"\\n  | otherwise = \\"Whatever.\\""}
158	35	4c9d1f00cb77c50b08d6ed1c	superseded	haskell	bob	module Bob (\nresponseFor\n) where\n\nimport Data.Char\n\nisEmpty :: String -> Bool\nisEmpty = foldl (\\acc c -> if (isSpace c) then acc else False) True\n\nhasLetters :: String -> Bool\nhasLetters = foldl (\\acc c -> if (isLetter c) then True else acc) False\n\nisShout :: String -> Bool\nisShout = foldl (\\acc c -> if (isLower c) then False else acc) True\n\nisQuestion :: String -> Bool\nisQuestion x = '?' == (foldl (\\_ c -> c) ' ' x)\n\nresponseFor :: String -> String\nresponseFor text\n  | isEmpty text = "Fine. Be that way!"\n  | isShout text && hasLetters text = "Woah, chill out!"\n  | isQuestion text = "Sure."\n  | otherwise = "Whatever."	\N	\N	0	2	2014-10-29 05:11:35	2014-10-29 05:11:35	92	bob.hs	{"bob.hs":"module Bob (\\nresponseFor\\n) where\\n\\nimport Data.Char\\n\\nisEmpty :: String -\\u003e Bool\\nisEmpty = foldl (\\\\acc c -\\u003e if (isSpace c) then acc else False) True\\n\\nhasLetters :: String -\\u003e Bool\\nhasLetters = foldl (\\\\acc c -\\u003e if (isLetter c) then True else acc) False\\n\\nisShout :: String -\\u003e Bool\\nisShout = foldl (\\\\acc c -\\u003e if (isLower c) then False else acc) True\\n\\nisQuestion :: String -\\u003e Bool\\nisQuestion x = '?' == (foldl (\\\\_ c -\\u003e c) ' ' x)\\n\\nresponseFor :: String -\\u003e String\\nresponseFor text\\n  | isEmpty text = \\"Fine. Be that way!\\"\\n  | isShout text \\u0026\\u0026 hasLetters text = \\"Woah, chill out!\\"\\n  | isQuestion text = \\"Sure.\\"\\n  | otherwise = \\"Whatever.\\""}
159	35	bdc3a0ce61a859b5f8f589bc	done	haskell	accumulate	module Accumulate(accumulate) where\r\n\r\naccumulate :: (a -> b) -> [a] -> [b]\r\naccumulate f = foldr ((:) . f) [] 	2014-05-08 21:06:38	\N	0	2	2014-04-30 10:48:04	2014-04-30 10:48:04	93	Accumulate.hs	{"Accumulate.hs":"module Accumulate(accumulate) where\\r\\n\\r\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\r\\naccumulate f = foldr ((:) . f) [] "}
160	35	67e6eb1ca62724ecd51ac5e0	superseded	haskell	accumulate	module Accumulate(accumulate) where\r\n\r\naccumulate :: (a -> b) -> [a] -> [b]\r\naccumulate _ [] = []\r\naccumulate f (a:as) = f a : accumulate f as	\N	\N	0	1	2014-06-28 13:27:44	2014-06-28 13:27:44	93	Accumulate.hs	{"Accumulate.hs":"module Accumulate(accumulate) where\\r\\n\\r\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\r\\naccumulate _ [] = []\\r\\naccumulate f (a:as) = f a : accumulate f as"}
161	35	6438d9ede11d0488b5ede63e	superseded	elixir	anagram	defmodule Anagram do\n  def match(subject, anagrams) do\n    anagrams\n      |> Enum.reject(&identical?(subject, &1))\n      |> Enum.filter(&equal_length?(subject, &1))\n      |> Enum.filter(&anagram?(subject, &1))\n  end\n\n  defp equal_length?(subject, anagram) do\n    String.length(subject) == String.length(anagram)\n  end\n\n  defp identical?(subject, subject), do: true\n  defp identical?(_, _), do: false\n\n  defp anagram?(subject, anagram) do\n    Set.equal?(character_set(subject), character_set(anagram))\n  end\n\n  defp character_set(string) do\n    string\n      |> String.downcase\n      |> String.to_char_list!\n      |> HashSet.new\n  end\nend	\N	\N	0	1	2014-05-11 09:58:21	2014-05-11 09:58:21	94	anagram.exs	{"anagram.exs":"defmodule Anagram do\\n  def match(subject, anagrams) do\\n    anagrams\\n      |\\u003e Enum.reject(\\u0026identical?(subject, \\u00261))\\n      |\\u003e Enum.filter(\\u0026equal_length?(subject, \\u00261))\\n      |\\u003e Enum.filter(\\u0026anagram?(subject, \\u00261))\\n  end\\n\\n  defp equal_length?(subject, anagram) do\\n    String.length(subject) == String.length(anagram)\\n  end\\n\\n  defp identical?(subject, subject), do: true\\n  defp identical?(_, _), do: false\\n\\n  defp anagram?(subject, anagram) do\\n    Set.equal?(character_set(subject), character_set(anagram))\\n  end\\n\\n  defp character_set(string) do\\n    string\\n      |\\u003e String.downcase\\n      |\\u003e String.to_char_list!\\n      |\\u003e HashSet.new\\n  end\\nend"}
206	41	41534731d5c368139d57d01f	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram?\n  [word]\n  (let [sorted-word (frequencies word)]\n    (fn [assignment]\n      (let [sorted-assignment (frequencies assignment)]\n        (and (= sorted-word sorted-assignment)\n             (not (= word assignment)))))))\n\n(defn anagrams-for\n  [word words]\n  (filter (anagram? word) words))	\N	\N	0	10	2014-08-18 00:40:01	2014-08-18 00:40:01	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn- anagram?\\n  [word]\\n  (let [sorted-word (frequencies word)]\\n    (fn [assignment]\\n      (let [sorted-assignment (frequencies assignment)]\\n        (and (= sorted-word sorted-assignment)\\n             (not (= word assignment)))))))\\n\\n(defn anagrams-for\\n  [word words]\\n  (filter (anagram? word) words))"}
162	35	53296838b047b04d4544663e	done	elixir	anagram	defmodule Anagram do\n  def match(subject, anagrams) do\n    anagrams\n      |> Enum.reject(&same_word?(subject, &1))\n      |> Enum.filter(&equal_length?(subject, &1))\n      |> Enum.filter(&anagram?(subject, &1))\n  end\n\n  defp equal_length?(subject, anagram) do\n    String.length(subject) == String.length(anagram)\n  end\n\n  defp same_word?(subject, anagram) do\n    String.downcase(subject) == String.downcase(anagram)\n  end\n\n  defp anagram?(subject, anagram) do\n    character_list(subject) == character_list(anagram)\n  end\n\n  defp character_list(string) do\n    string\n      |> String.downcase\n      |> String.to_char_list!\n      |> Enum.sort\n  end\nend	2014-09-18 01:00:54	\N	0	2	2014-09-11 12:24:35	2014-09-11 12:24:35	94	anagram.exs	{"anagram.exs":"defmodule Anagram do\\n  def match(subject, anagrams) do\\n    anagrams\\n      |\\u003e Enum.reject(\\u0026same_word?(subject, \\u00261))\\n      |\\u003e Enum.filter(\\u0026equal_length?(subject, \\u00261))\\n      |\\u003e Enum.filter(\\u0026anagram?(subject, \\u00261))\\n  end\\n\\n  defp equal_length?(subject, anagram) do\\n    String.length(subject) == String.length(anagram)\\n  end\\n\\n  defp same_word?(subject, anagram) do\\n    String.downcase(subject) == String.downcase(anagram)\\n  end\\n\\n  defp anagram?(subject, anagram) do\\n    character_list(subject) == character_list(anagram)\\n  end\\n\\n  defp character_list(string) do\\n    string\\n      |\\u003e String.downcase\\n      |\\u003e String.to_char_list!\\n      |\\u003e Enum.sort\\n  end\\nend"}
163	35	6a5a748e00e87d42a22b4f49	done	go	gigasecond	package gigasecond\n\nimport "time"\n\n// 1e9 seconds * (1e9 nanoseconds/1 second)\nconst Gigasecond int64 = 1e9 * 1e9\n\ntype Giga int64\n\nfunc AddGigasecond(t time.Time) Giga {\n\treturn Giga(t.UnixNano() + Gigasecond)\n}\n\nfunc (r Giga) Equal(t time.Time) bool {\n\treturn int64(r) == t.UnixNano()\n}	2014-06-02 09:37:40	\N	0	1	2014-05-27 19:28:02	2014-05-27 19:28:02	95	gigasecond.go	{"gigasecond.go":"package gigasecond\\n\\nimport \\"time\\"\\n\\n// 1e9 seconds * (1e9 nanoseconds/1 second)\\nconst Gigasecond int64 = 1e9 * 1e9\\n\\ntype Giga int64\\n\\nfunc AddGigasecond(t time.Time) Giga {\\n\\treturn Giga(t.UnixNano() + Gigasecond)\\n}\\n\\nfunc (r Giga) Equal(t time.Time) bool {\\n\\treturn int64(r) == t.UnixNano()\\n}"}
164	14	74fdeec751603ae43518e5aa	pending	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = %w{A C G T}\n  RNA_NUCLEOTIDES = %w{A C G U}\n\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES | RNA_NUCLEOTIDES\n\n  BLANK_RESULT = Hash[DNA_NUCLEOTIDES.zip(DNA_NUCLEOTIDES.map { 0 })]\n\n  def initialize(dna_strand)\n    nucleotides = dna_strand.chars\n    @raw_counts = nucleotides.each_with_object(Hash.new(0)) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n\n    unknown_keys = @raw_counts.keys - DNA_NUCLEOTIDES\n    raise ArgumentError unless unknown_keys.empty?\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? nucleotide\n    nucleotide_counts[nucleotide] || 0\n  end\n\n  def nucleotide_counts\n    BLANK_RESULT.merge(@raw_counts)\n  end\nend	\N	\N	0	1	2015-01-07 15:29:55	2015-01-07 15:29:55	96	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  DNA_NUCLEOTIDES = %w{A C G T}\\n  RNA_NUCLEOTIDES = %w{A C G U}\\n\\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES | RNA_NUCLEOTIDES\\n\\n  BLANK_RESULT = Hash[DNA_NUCLEOTIDES.zip(DNA_NUCLEOTIDES.map { 0 })]\\n\\n  def initialize(dna_strand)\\n    nucleotides = dna_strand.chars\\n    @raw_counts = nucleotides.each_with_object(Hash.new(0)) do |nucleotide, counts|\\n      counts[nucleotide] += 1\\n    end\\n\\n    unknown_keys = @raw_counts.keys - DNA_NUCLEOTIDES\\n    raise ArgumentError unless unknown_keys.empty?\\n  end\\n\\n  def count(nucleotide)\\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? nucleotide\\n    nucleotide_counts[nucleotide] || 0\\n  end\\n\\n  def nucleotide_counts\\n    BLANK_RESULT.merge(@raw_counts)\\n  end\\nend"}
165	14	83054c50129dd504a6d42d1b	pending	javascript	hamming	function Hamming() {}\n\nHamming.compute = function(first, second) {\n    count = 0\n    for (var i=0;i<first.length;i++) {\n        if (first[i] && second[i] && (first[i] != second[i])) {\n            count++\n        }\n    }\n    return count\n};\n\nmodule.exports = Hamming;\nreturn Hamming;	\N	\N	0	1	2014-12-06 00:14:09	2014-12-06 00:14:09	97	hamming.js	{"hamming.js":"function Hamming() {}\\n\\nHamming.compute = function(first, second) {\\n    count = 0\\n    for (var i=0;i\\u003cfirst.length;i++) {\\n        if (first[i] \\u0026\\u0026 second[i] \\u0026\\u0026 (first[i] != second[i])) {\\n            count++\\n        }\\n    }\\n    return count\\n};\\n\\nmodule.exports = Hamming;\\nreturn Hamming;"}
172	14	e722fd5bce6cafd53b6dbd0a	superseded	go	clock	package clock\n\nimport "fmt"\n\ntype Clock int\n\nfunc New(h, m int) Clock {\n\tc := adjustClock(Clock(h*60 + m))\n\treturn c\n}\n\nfunc (c Clock) Add(m int) Clock {\n\tc = adjustClock(c + Clock(m))\n\treturn c\n}\n\nfunc (c Clock) String() string {\n\treturn fmt.Sprintf("%02d:%02d", c/60, c%60)\n}\n\nfunc adjustClock(c Clock) Clock {\n\tday := Clock(1440)\n\tc = c % day\n\tif c < 0 {\n\t\tc = c + day\n\t}\n\treturn c\n}	\N	\N	0	1	2014-12-05 09:06:12	2014-12-05 09:06:12	99	clock.go	{"clock.go":"package clock\\n\\nimport \\"fmt\\"\\n\\ntype Clock int\\n\\nfunc New(h, m int) Clock {\\n\\tc := adjustClock(Clock(h*60 + m))\\n\\treturn c\\n}\\n\\nfunc (c Clock) Add(m int) Clock {\\n\\tc = adjustClock(c + Clock(m))\\n\\treturn c\\n}\\n\\nfunc (c Clock) String() string {\\n\\treturn fmt.Sprintf(\\"%02d:%02d\\", c/60, c%60)\\n}\\n\\nfunc adjustClock(c Clock) Clock {\\n\\tday := Clock(1440)\\n\\tc = c % day\\n\\tif c \\u003c 0 {\\n\\t\\tc = c + day\\n\\t}\\n\\treturn c\\n}"}
166	14	c13267413972e0978ef6c656	superseded	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (input) {\n    function handleNothing() { if (/^\\s*$/.test(input)) return 'Fine. Be that way!' }\n    function handleShouting() {\n        if (input == input.toUpperCase() && input != input.toLowerCase()) return 'Woah, chill out!'\n    }\n    function handleQuestion() { if (/\\?$/.test(input)) return 'Sure.' }\n    function handleOther() { return 'Whatever.' }\n    return handleNothing() || handleShouting() || handleQuestion() || handleOther();\n};\n\nmodule.exports = Bob;	\N	\N	0	4	2014-12-06 19:20:26	2014-12-06 19:20:26	98	bob.js	{"bob.js":"var Bob = function () {};\\n\\nBob.prototype.hey = function (input) {\\n    function handleNothing() { if (/^\\\\s*$/.test(input)) return 'Fine. Be that way!' }\\n    function handleShouting() {\\n        if (input == input.toUpperCase() \\u0026\\u0026 input != input.toLowerCase()) return 'Woah, chill out!'\\n    }\\n    function handleQuestion() { if (/\\\\?$/.test(input)) return 'Sure.' }\\n    function handleOther() { return 'Whatever.' }\\n    return handleNothing() || handleShouting() || handleQuestion() || handleOther();\\n};\\n\\nmodule.exports = Bob;"}
167	14	1b2b8c351a863be2dabe6974	superseded	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (input) {\n    if (/^\\s*$/.test(input)) {\n        return 'Fine. Be that way!';\n    } else if (input == input.toUpperCase() && input != input.toLowerCase()) {\n        return 'Woah, chill out!';\n    } else if (/\\?$/.test(input)) {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	3	2014-12-16 08:54:44	2014-12-16 08:54:44	98	bob.js	{"bob.js":"var Bob = function () {};\\n\\nBob.prototype.hey = function (input) {\\n    if (/^\\\\s*$/.test(input)) {\\n        return 'Fine. Be that way!';\\n    } else if (input == input.toUpperCase() \\u0026\\u0026 input != input.toLowerCase()) {\\n        return 'Woah, chill out!';\\n    } else if (/\\\\?$/.test(input)) {\\n        return 'Sure.';\\n    } else {\\n        return 'Whatever.';\\n    }\\n};\\n\\nmodule.exports = Bob;"}
168	14	f52357cabf8648f0575a2a35	superseded	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (input) {\n    if (/^\\W*$/.test(input)) {\n        return 'Fine. Be that way!';\n    } else if (input == input.toUpperCase() && input != input.toLowerCase()) {\n        return 'Woah, chill out!';\n    } else if (/\\?$/.test(input)) {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	2	2014-12-16 12:17:25	2014-12-16 12:17:25	98	bob.js	{"bob.js":"var Bob = function () {};\\n\\nBob.prototype.hey = function (input) {\\n    if (/^\\\\W*$/.test(input)) {\\n        return 'Fine. Be that way!';\\n    } else if (input == input.toUpperCase() \\u0026\\u0026 input != input.toLowerCase()) {\\n        return 'Woah, chill out!';\\n    } else if (/\\\\?$/.test(input)) {\\n        return 'Sure.';\\n    } else {\\n        return 'Whatever.';\\n    }\\n};\\n\\nmodule.exports = Bob;"}
169	14	0aab4b2ddaf4434387f31285	superseded	javascript	bob	var Bob = function () {};\n\n// Improve the check for shouting - it is ugly\n// because of how it handles the characters with umlauts\nBob.prototype.hey = function (input) {\n    if (/^ *$/.test(input)) {\n        return 'Fine. Be that way!';\n    } else if (/^[^a-z\\xE0-\\xFF]*[A-Z][^a-z\\xE0-\\xFF]*$/.test(input)) {\n        return 'Woah, chill out!';\n    } else if (/\\?$/.test(input)) {\n        return 'Sure.';\n    } else {\n        return 'Whatever.';\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-12-17 06:11:51	2014-12-17 06:11:51	98	bob.js	{"bob.js":"var Bob = function () {};\\n\\n// Improve the check for shouting - it is ugly\\n// because of how it handles the characters with umlauts\\nBob.prototype.hey = function (input) {\\n    if (/^ *$/.test(input)) {\\n        return 'Fine. Be that way!';\\n    } else if (/^[^a-z\\\\xE0-\\\\xFF]*[A-Z][^a-z\\\\xE0-\\\\xFF]*$/.test(input)) {\\n        return 'Woah, chill out!';\\n    } else if (/\\\\?$/.test(input)) {\\n        return 'Sure.';\\n    } else {\\n        return 'Whatever.';\\n    }\\n};\\n\\nmodule.exports = Bob;"}
170	14	ee4783c05a83e908c6c52453	superseded	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (input) {\n    function isNothing() { return /^\\s*$/.test(input) }\n    function handleNothing() { if (isNothing()) return 'Fine. Be that way!' }\n    function isShouting() { return input == input.toUpperCase() && input != input.toLowerCase() }\n    function handleShouting() { if (isShouting()) return 'Woah, chill out!' }\n    function isQuestion() { return /\\?$/.test(input) }\n    function handleQuestion() { if (isQuestion()) return 'Sure.' }\n    function handleOther() { return 'Whatever.' }\n    return handleNothing() || handleShouting() || handleQuestion() || handleOther();\n};\n\nmodule.exports = Bob;	\N	\N	0	5	2014-12-19 15:17:02	2014-12-19 15:17:02	98	bob.js	{"bob.js":"var Bob = function () {};\\n\\nBob.prototype.hey = function (input) {\\n    function isNothing() { return /^\\\\s*$/.test(input) }\\n    function handleNothing() { if (isNothing()) return 'Fine. Be that way!' }\\n    function isShouting() { return input == input.toUpperCase() \\u0026\\u0026 input != input.toLowerCase() }\\n    function handleShouting() { if (isShouting()) return 'Woah, chill out!' }\\n    function isQuestion() { return /\\\\?$/.test(input) }\\n    function handleQuestion() { if (isQuestion()) return 'Sure.' }\\n    function handleOther() { return 'Whatever.' }\\n    return handleNothing() || handleShouting() || handleQuestion() || handleOther();\\n};\\n\\nmodule.exports = Bob;"}
171	14	9470edf3292dae8ac4a1e95b	pending	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (input) {\n    function handle(handler) {\n        if (handler.applies()) return handler.message;\n    }\n    var nothingHandler = {\n        applies: function() { return /^\\s*$/.test(input) },\n        message: 'Fine. Be that way!'\n    };\n    var shoutingHandler = {\n        applies: function() { return input == input.toUpperCase() && input != input.toLowerCase() },\n        message: 'Woah, chill out!'\n    };\n    var questionHandler = {\n        applies: function() { return /\\?$/.test(input) },\n        message: 'Sure.'\n    };\n    var otherHandler = {\n        applies: function() { return true },\n        message: 'Whatever.'\n    };\n    return handle(nothingHandler) || handle(shoutingHandler) || handle(questionHandler) ||\n        handle(otherHandler);\n};\n\nmodule.exports = Bob;	\N	\N	0	6	2015-01-01 09:48:27	2015-01-01 09:48:27	98	bob.js	{"bob.js":"var Bob = function () {};\\n\\nBob.prototype.hey = function (input) {\\n    function handle(handler) {\\n        if (handler.applies()) return handler.message;\\n    }\\n    var nothingHandler = {\\n        applies: function() { return /^\\\\s*$/.test(input) },\\n        message: 'Fine. Be that way!'\\n    };\\n    var shoutingHandler = {\\n        applies: function() { return input == input.toUpperCase() \\u0026\\u0026 input != input.toLowerCase() },\\n        message: 'Woah, chill out!'\\n    };\\n    var questionHandler = {\\n        applies: function() { return /\\\\?$/.test(input) },\\n        message: 'Sure.'\\n    };\\n    var otherHandler = {\\n        applies: function() { return true },\\n        message: 'Whatever.'\\n    };\\n    return handle(nothingHandler) || handle(shoutingHandler) || handle(questionHandler) ||\\n        handle(otherHandler);\\n};\\n\\nmodule.exports = Bob;"}
179	41	df11d81bff857f3eea49059f	pending	go	queen-attack	package queenattack\n\nfunc CanQueenAttack(white string, black string) (bool, error) {\n\tattack := false\n\tok := nil\n\treturn attack, ok\n}	\N	\N	0	1	2014-05-06 19:24:16	2014-05-06 19:24:16	103	queen_attack.go	{"queen_attack.go":"package queenattack\\n\\nfunc CanQueenAttack(white string, black string) (bool, error) {\\n\\tattack := false\\n\\tok := nil\\n\\treturn attack, ok\\n}"}
173	14	d1272b4dbaaaed5023c7a923	pending	go	clock	package clock\n\nimport "fmt"\n\ntype Clock int\n\nfunc New(h, m int) Clock {\n\treturn Clock(h*60 + m).adjustClock()\n}\n\nfunc (c Clock) Add(m int) Clock {\n\treturn (c + Clock(m)).adjustClock()\n}\n\nfunc (c Clock) String() string {\n\treturn fmt.Sprintf("%02d:%02d", c/60, c%60)\n}\n\nfunc (c Clock) adjustClock() Clock{\n\tday := Clock(1440)\n\tc = c % day\n\tif c < 0 {\n\t\tc = c + day\n\t}\n\treturn c\n}	\N	\N	0	2	2014-12-20 11:31:54	2014-12-20 11:31:54	99	clock.go	{"clock.go":"package clock\\n\\nimport \\"fmt\\"\\n\\ntype Clock int\\n\\nfunc New(h, m int) Clock {\\n\\treturn Clock(h*60 + m).adjustClock()\\n}\\n\\nfunc (c Clock) Add(m int) Clock {\\n\\treturn (c + Clock(m)).adjustClock()\\n}\\n\\nfunc (c Clock) String() string {\\n\\treturn fmt.Sprintf(\\"%02d:%02d\\", c/60, c%60)\\n}\\n\\nfunc (c Clock) adjustClock() Clock{\\n\\tday := Clock(1440)\\n\\tc = c % day\\n\\tif c \\u003c 0 {\\n\\t\\tc = c + day\\n\\t}\\n\\treturn c\\n}"}
174	14	2d50c774468be9dda52c57e7	pending	clojure	word-count	(ns word-count\n  (:use [clojure.string :only [split lower-case]])) \n\n(defn dinc [hash word]\n  (update-in hash [word] (fnil inc 0)))\n\n(defn word-count\n  "Counts the number of words in a string"\n  [strg]\n  (reduce dinc {} (split (lower-case strg) #"[\\W]+")))	\N	\N	0	1	2014-12-08 09:14:09	2014-12-08 09:14:09	100	word_count.clj	{"word_count.clj":"(ns word-count\\n  (:use [clojure.string :only [split lower-case]])) \\n\\n(defn dinc [hash word]\\n  (update-in hash [word] (fnil inc 0)))\\n\\n(defn word-count\\n  \\"Counts the number of words in a string\\"\\n  [strg]\\n  (reduce dinc {} (split (lower-case strg) #\\"[\\\\W]+\\")))"}
175	14	f2dec74f762c6ba38f31b076	pending	clojure	anagram	(ns anagram)\n(defn prepare [word]\n  (vec(sort(char-array(.toLowerCase word)))))\n\n(defn anagram? [word, candidate]\n  (if (= 0 (compare word candidate))\n    false\n    (= 0 (compare (prepare word) (prepare candidate)))))\n\n(defn anagrams-for [word, anagrams]\n  (vec (filter (fn [candidate] (anagram? word candidate)) anagrams)))	\N	\N	0	1	2014-12-20 05:05:10	2014-12-20 05:05:10	101	anagram.clj	{"anagram.clj":"(ns anagram)\\n(defn prepare [word]\\n  (vec(sort(char-array(.toLowerCase word)))))\\n\\n(defn anagram? [word, candidate]\\n  (if (= 0 (compare word candidate))\\n    false\\n    (= 0 (compare (prepare word) (prepare candidate)))))\\n\\n(defn anagrams-for [word, anagrams]\\n  (vec (filter (fn [candidate] (anagram? word candidate)) anagrams)))"}
176	41	a56319f7ce517b920260d5c8	pending	haskell	queen-attack	module Queens\n  ( boardString\n  , canAttack\n  ) where\n\n\nimport Data.List.Split\n\n\ntype Coordinates = (Int, Int)\n\nboardString :: Maybe Coordinates -> Maybe Coordinates -> String\nboardString whiteQueenCoord blackQueenCoord = unlines $ map (unwords . map (:[])) $ chunksOf 8 boardWithQueens\n  where\n    emptyBoard = replicate 64 'O'\n    boardWithQueens = placeFigure whiteQueenCoord 'W' $ placeFigure blackQueenCoord 'B' emptyBoard\n    placeFigure coordinates fig board = maybe id (replaceAt fig . linearize) coordinates $ board\n    linearize (y, x) = y * 8 + x\n    replaceAt :: a -> Int -> [a] -> [a]\n    replaceAt v idx lst = take idx lst ++ [v] ++ drop (idx + 1) lst\n\n\ncanAttack :: Coordinates -> Coordinates -> Bool\ncanAttack (y1, x1) (y2, x2) =\n  x1 == x2 || y1 == y2 || abs (x1 - x2) == abs (y1 - y2)	\N	\N	0	3	2014-05-12 04:59:57	2014-05-12 04:59:57	102	Queens.hs	{"Queens.hs":"module Queens\\n  ( boardString\\n  , canAttack\\n  ) where\\n\\n\\nimport Data.List.Split\\n\\n\\ntype Coordinates = (Int, Int)\\n\\nboardString :: Maybe Coordinates -\\u003e Maybe Coordinates -\\u003e String\\nboardString whiteQueenCoord blackQueenCoord = unlines $ map (unwords . map (:[])) $ chunksOf 8 boardWithQueens\\n  where\\n    emptyBoard = replicate 64 'O'\\n    boardWithQueens = placeFigure whiteQueenCoord 'W' $ placeFigure blackQueenCoord 'B' emptyBoard\\n    placeFigure coordinates fig board = maybe id (replaceAt fig . linearize) coordinates $ board\\n    linearize (y, x) = y * 8 + x\\n    replaceAt :: a -\\u003e Int -\\u003e [a] -\\u003e [a]\\n    replaceAt v idx lst = take idx lst ++ [v] ++ drop (idx + 1) lst\\n\\n\\ncanAttack :: Coordinates -\\u003e Coordinates -\\u003e Bool\\ncanAttack (y1, x1) (y2, x2) =\\n  x1 == x2 || y1 == y2 || abs (x1 - x2) == abs (y1 - y2)"}
177	41	e9b1fda8e6c4091f90273759	superseded	haskell	queen-attack	module Queens\n  ( boardString\n  , canAttack\n  ) where\n\n\nimport Data.List.Split\n\n\ntype Coordinates = (Int, Int)\n\nboardString :: Maybe Coordinates -> Maybe Coordinates -> String\nboardString whiteQueenCoord blackQueenCoord = unlines $ map (unwords . map (:[])) $ chunksOf 8 boardWithQueens\n  where\n    emptyBoard = replicate 64 'O'\n    boardWithQueens = placeFigure whiteQueenCoord 'W' $ placeFigure blackQueenCoord 'B' emptyBoard\n    placeFigure coordinates fig board = maybe id (replaceAt fig . linearize) coordinates $ board\n    linearize (y, x) = y * 8 + x\n    replaceAt :: a -> Int -> [a] -> [a]\n    replaceAt v idx lst = take idx lst ++ [v] ++ drop (idx + 1) lst\n\n\ncanAttack :: Coordinates -> Coordinates -> Bool\ncanAttack (y1, x1) (y2, x2)\n  | x1 == x2 = True\n  | y1 == y2 = True\n  | abs (x1 - x2) == abs (y1 - y2) = True\n  | otherwise = False	\N	\N	0	1	2014-08-24 11:04:10	2014-08-24 11:04:10	102	Queens.hs	{"Queens.hs":"module Queens\\n  ( boardString\\n  , canAttack\\n  ) where\\n\\n\\nimport Data.List.Split\\n\\n\\ntype Coordinates = (Int, Int)\\n\\nboardString :: Maybe Coordinates -\\u003e Maybe Coordinates -\\u003e String\\nboardString whiteQueenCoord blackQueenCoord = unlines $ map (unwords . map (:[])) $ chunksOf 8 boardWithQueens\\n  where\\n    emptyBoard = replicate 64 'O'\\n    boardWithQueens = placeFigure whiteQueenCoord 'W' $ placeFigure blackQueenCoord 'B' emptyBoard\\n    placeFigure coordinates fig board = maybe id (replaceAt fig . linearize) coordinates $ board\\n    linearize (y, x) = y * 8 + x\\n    replaceAt :: a -\\u003e Int -\\u003e [a] -\\u003e [a]\\n    replaceAt v idx lst = take idx lst ++ [v] ++ drop (idx + 1) lst\\n\\n\\ncanAttack :: Coordinates -\\u003e Coordinates -\\u003e Bool\\ncanAttack (y1, x1) (y2, x2)\\n  | x1 == x2 = True\\n  | y1 == y2 = True\\n  | abs (x1 - x2) == abs (y1 - y2) = True\\n  | otherwise = False"}
178	41	99c49ddff7e6292f27439d6f	superseded	haskell	queen-attack	module Queens\n  ( boardString\n  , canAttack\n  ) where\n\n\nimport Data.List.Split\n\n\ntype Coordinates = (Int, Int)\n\nboardString :: Maybe Coordinates -> Maybe Coordinates -> String\nboardString whiteQueenCoord blackQueenCoord = unlines $ map (unwords . map (:[])) $ chunksOf 8 boardWithQueens\n  where\n    emptyBoard = replicate 64 'O'\n    boardWithQueens = placeFigure whiteQueenCoord 'W' $ placeFigure blackQueenCoord 'B' emptyBoard\n    placeFigure coordinates fig board = maybe id (replaceAt fig . linearize) coordinates $ board\n    linearize (y, x) = y * 8 + x\n    replaceAt :: a -> Int -> [a] -> [a]\n    replaceAt v idx lst = take idx lst ++ [v] ++ drop (idx + 1) lst\n\n\ncanAttack :: Coordinates -> Coordinates -> Bool\ncanAttack (y1, x1) (y2, x2) =\n  (x1 == x2) || (y1 == y2) || (abs (x1 - x2) == abs (y1 - y2))	\N	\N	0	2	2014-09-24 19:38:30	2014-09-24 19:38:30	102	Queens.hs	{"Queens.hs":"module Queens\\n  ( boardString\\n  , canAttack\\n  ) where\\n\\n\\nimport Data.List.Split\\n\\n\\ntype Coordinates = (Int, Int)\\n\\nboardString :: Maybe Coordinates -\\u003e Maybe Coordinates -\\u003e String\\nboardString whiteQueenCoord blackQueenCoord = unlines $ map (unwords . map (:[])) $ chunksOf 8 boardWithQueens\\n  where\\n    emptyBoard = replicate 64 'O'\\n    boardWithQueens = placeFigure whiteQueenCoord 'W' $ placeFigure blackQueenCoord 'B' emptyBoard\\n    placeFigure coordinates fig board = maybe id (replaceAt fig . linearize) coordinates $ board\\n    linearize (y, x) = y * 8 + x\\n    replaceAt :: a -\\u003e Int -\\u003e [a] -\\u003e [a]\\n    replaceAt v idx lst = take idx lst ++ [v] ++ drop (idx + 1) lst\\n\\n\\ncanAttack :: Coordinates -\\u003e Coordinates -\\u003e Bool\\ncanAttack (y1, x1) (y2, x2) =\\n  (x1 == x2) || (y1 == y2) || (abs (x1 - x2) == abs (y1 - y2))"}
180	41	abc3c0b367d6438b07a287b9	pending	haskell	phone-number	module Phone (\n    areaCode\n  , number\n  , prettyPrint\n  ) where\n\nimport Data.Char (isDigit)\nimport Data.Maybe (fromMaybe)\n\nareaCode :: String -> String\nareaCode = take 3\n\nnumber :: String -> String\nnumber = validate . filter isDigit\n\ninvalid :: String\ninvalid = "0000000000"\n\nvalidate :: String -> String\nvalidate = fromMaybe invalid . validateMaybe\n\nvalidateMaybe :: String -> Maybe String\nvalidateMaybe s = do\n  if length s <= 9 || length s > 11 then Nothing else Just s\n  t <- if length s == 10 then Just s\n       else if head s /= '1' then Nothing else Just $ drop 1 s\n  return t\n\nprettyPrint :: String -> String\nprettyPrint s = "("++areaCode n++") " ++ (hyphenate $ drop 3 n)\n                where n = number s\n\nhyphenate :: String -> String\nhyphenate s = prefix ++ "-" ++ suffix\n              where prefix = take splitPoint s\n                    suffix = drop splitPoint s\n                    splitPoint = (length s) - 4	\N	\N	0	1	2014-05-11 21:02:07	2014-05-11 21:02:07	104	phone-number.hs	{"phone-number.hs":"module Phone (\\n    areaCode\\n  , number\\n  , prettyPrint\\n  ) where\\n\\nimport Data.Char (isDigit)\\nimport Data.Maybe (fromMaybe)\\n\\nareaCode :: String -\\u003e String\\nareaCode = take 3\\n\\nnumber :: String -\\u003e String\\nnumber = validate . filter isDigit\\n\\ninvalid :: String\\ninvalid = \\"0000000000\\"\\n\\nvalidate :: String -\\u003e String\\nvalidate = fromMaybe invalid . validateMaybe\\n\\nvalidateMaybe :: String -\\u003e Maybe String\\nvalidateMaybe s = do\\n  if length s \\u003c= 9 || length s \\u003e 11 then Nothing else Just s\\n  t \\u003c- if length s == 10 then Just s\\n       else if head s /= '1' then Nothing else Just $ drop 1 s\\n  return t\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint s = \\"(\\"++areaCode n++\\") \\" ++ (hyphenate $ drop 3 n)\\n                where n = number s\\n\\nhyphenate :: String -\\u003e String\\nhyphenate s = prefix ++ \\"-\\" ++ suffix\\n              where prefix = take splitPoint s\\n                    suffix = drop splitPoint s\\n                    splitPoint = (length s) - 4"}
181	41	4dd19c8eadc54adccdc7fa94	pending	clojure	nucleotide-count	(ns nucleotide-count\n  (:refer-clojure :exclude [count]))\n\n(def nucleotide-counts\n  (comp #(merge {\\A 0, \\T 0, \\C 0, \\G 0} %)\n        frequencies))\n\n(defn count [sym strand]\n  (when-not (some #{sym} "ATCGU")\n    (throw (Exception. "invalid nucleotide")))\n  ((nucleotide-counts strand) sym 0))	\N	\N	0	1	2014-11-04 02:05:50	2014-11-04 02:05:50	105	nucleotide_count.clj	{"nucleotide_count.clj":"(ns nucleotide-count\\n  (:refer-clojure :exclude [count]))\\n\\n(def nucleotide-counts\\n  (comp #(merge {\\\\A 0, \\\\T 0, \\\\C 0, \\\\G 0} %)\\n        frequencies))\\n\\n(defn count [sym strand]\\n  (when-not (some #{sym} \\"ATCGU\\")\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  ((nucleotide-counts strand) sym 0))"}
182	41	de042deef7684c2810c2c803	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tif year%4 != 0 {\n\t\treturn false\n\t}\n\tif year%100 == 0 && year%400 != 0 {\n\t\treturn false\n\t}\n\treturn true\n}	\N	\N	0	2	2014-05-08 18:20:16	2014-05-08 18:20:16	106	leap.go	{"leap.go":"package leap\\n\\nfunc IsLeapYear(year int) bool {\\n\\tif year%4 != 0 {\\n\\t\\treturn false\\n\\t}\\n\\tif year%100 == 0 \\u0026\\u0026 year%400 != 0 {\\n\\t\\treturn false\\n\\t}\\n\\treturn true\\n}"}
183	41	ed652a38256322e1fec52c10	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  if (year % 4 > 0) {\n    return false\n  } else {\n    if (year % 100 == 0 && year % 400 > 0) {\n      return false\n    } else {\n      return true\n    }\n  }\n}	\N	\N	0	1	2014-11-29 03:57:39	2014-11-29 03:57:39	106	leap.go	{"leap.go":"package leap\\n\\nfunc IsLeapYear(year int) bool {\\n  if (year % 4 \\u003e 0) {\\n    return false\\n  } else {\\n    if (year % 100 == 0 \\u0026\\u0026 year % 400 \\u003e 0) {\\n      return false\\n    } else {\\n      return true\\n    }\\n  }\\n}"}
184	41	965a35ded1848b095eab26e9	superseded	ruby	grains	class Grains\n\n  NUM_SQUARES = 64\n\n  def square(i)\n    binary_1e(i)\n  end\n\n  def total\n    (1..NUM_SQUARES).inject(0) { |sum, i| sum + binary_1e(i) }\n  end\n\n  private\n\n  def binary_1e(i)\n    eval "0b1#{'0' * (i - 1)}"\n  end\n\nend	\N	\N	0	1	2014-05-07 16:08:32	2014-05-07 16:08:32	107	grains.rb	{"grains.rb":"class Grains\\n\\n  NUM_SQUARES = 64\\n\\n  def square(i)\\n    binary_1e(i)\\n  end\\n\\n  def total\\n    (1..NUM_SQUARES).inject(0) { |sum, i| sum + binary_1e(i) }\\n  end\\n\\n  private\\n\\n  def binary_1e(i)\\n    eval \\"0b1#{'0' * (i - 1)}\\"\\n  end\\n\\nend"}
185	41	a41948796b535ca9ad765825	superseded	ruby	grains	class Grains\n\n  NUM_SQUARES = 64\n\n  def square(i)\n    "1#{'0' * (i - 1)}".to_i(2)\n  end\n\n  def total\n    (1..NUM_SQUARES).inject(0) { |sum, i| sum + square(i) }\n  end\n\nend	\N	\N	0	2	2014-09-27 18:14:15	2014-09-27 18:14:15	107	grains.rb	{"grains.rb":"class Grains\\n\\n  NUM_SQUARES = 64\\n\\n  def square(i)\\n    \\"1#{'0' * (i - 1)}\\".to_i(2)\\n  end\\n\\n  def total\\n    (1..NUM_SQUARES).inject(0) { |sum, i| sum + square(i) }\\n  end\\n\\nend"}
186	41	f179104aafff60773df2a75a	superseded	ruby	grains	class Grains\n\n  NUM_SQUARES = 64\n\n  def square(i)\n    2 ** (i - 1)\n  end\n\n  def total\n    (1..NUM_SQUARES).inject(0) { |sum, i| sum + square(i) }\n  end\n\nend	\N	\N	0	3	2014-10-26 07:17:36	2014-10-26 07:17:36	107	grains.rb	{"grains.rb":"class Grains\\n\\n  NUM_SQUARES = 64\\n\\n  def square(i)\\n    2 ** (i - 1)\\n  end\\n\\n  def total\\n    (1..NUM_SQUARES).inject(0) { |sum, i| sum + square(i) }\\n  end\\n\\nend"}
187	41	b9ef9755cb9cf39004eea775	pending	ruby	grains	class Grains\n\n  NUM_SQUARES = 64\n\n  def square(i)\n    2 ** (i - 1)\n  end\n\n  def total\n    square(NUM_SQUARES + 1) - 1\n  end\n\nend	\N	\N	0	4	2014-11-14 18:08:59	2014-11-14 18:08:59	107	grains.rb	{"grains.rb":"class Grains\\n\\n  NUM_SQUARES = 64\\n\\n  def square(i)\\n    2 ** (i - 1)\\n  end\\n\\n  def total\\n    square(NUM_SQUARES + 1) - 1\\n  end\\n\\nend"}
188	41	1c50b190d759a1e2c4b8dc18	pending	python	rna-transcription	def to_rna(string):\n\t\n\tdna_to_rna = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\n\n\tresult = []\n\tfor char in string:\n\t\tresult.append(dna_to_rna[char])\n\treturn ''.join(result)	\N	\N	0	1	2014-09-27 11:51:39	2014-09-27 11:51:39	108	dna.py	{"dna.py":"def to_rna(string):\\n\\t\\n\\tdna_to_rna = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\\n\\n\\tresult = []\\n\\tfor char in string:\\n\\t\\tresult.append(dna_to_rna[char])\\n\\treturn ''.join(result)"}
189	41	11f1eee6dfb0c50b5dc6364b	pending	javascript	word-count	var words = function(text) {\n  var index = {};\n\n  text.replace("\\n", " ").split(" ").forEach(function(word) {\n    if(index.hasOwnProperty(word))\n      index[word]++;\n    else\n      index[word] = 1;\n  });\n\n  return index;\n};\n\nmodule.exports = words;	\N	\N	0	1	2014-11-30 21:13:29	2014-11-30 21:13:29	109	word-count.js	{"word-count.js":"var words = function(text) {\\n  var index = {};\\n\\n  text.replace(\\"\\\\n\\", \\" \\").split(\\" \\").forEach(function(word) {\\n    if(index.hasOwnProperty(word))\\n      index[word]++;\\n    else\\n      index[word] = 1;\\n  });\\n\\n  return index;\\n};\\n\\nmodule.exports = words;"}
202	41	ad3b2affaf4b1520c91b3f93	superseded	clojure	anagram	(ns anagram)\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort word1) (sort word2)))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (= word1 word2))))\n\n(defn anagrams-for\n  [word words]\n  (filter (partial anagram? word) words))	\N	\N	0	7	2014-05-19 12:29:16	2014-05-19 12:29:16	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn- equal-chars?\\n  [word1 word2]\\n  (= (sort word1) (sort word2)))\\n\\n(defn- anagram?\\n  [word1 word2]\\n  (and (equal-chars? word1 word2)\\n       (not (= word1 word2))))\\n\\n(defn anagrams-for\\n  [word words]\\n  (filter (partial anagram? word) words))"}
190	41	ee23e19adc388e1e560f6b23	pending	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(number)\n    validator = PhoneNumberValidator.new '1'\n    @number   = validator.process number\n  end\n\n  def area_code\n    number[0...3]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number}"\n  end\n\n  private\n\n  def local_number\n    "#{number[3...6]}-#{number[6..-1]}"\n  end\nend\n\nclass PhoneNumberValidator\n  def initialize(country_code, default="0000000000")\n    @country_code = country_code\n    @default      = default\n    @digits       = ""\n  end\n\n  def process(number)\n    digitalize number\n    remove_country_code\n    validate_length\n    @digits\n  end\n\n  private\n\n  def digitalize(number)\n    @digits = number.gsub /\\D/, ''\n  end\n\n  def remove_country_code\n    @digits = @digits[1..-1] if with_country_code?\n  end\n\n  def with_country_code?\n    @digits.length == 11 and @digits[0] == @country_code\n  end\n\n  def validate_length\n    @digits = @digits.length == 10 ? @digits : @default\n  end\nend	\N	\N	0	6	2014-06-13 20:49:07	2014-06-13 20:49:07	110	phone-number.rb	{"phone-number.rb":"class PhoneNumber\\n  attr_reader :number\\n\\n  def initialize(number)\\n    validator = PhoneNumberValidator.new '1'\\n    @number   = validator.process number\\n  end\\n\\n  def area_code\\n    number[0...3]\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{local_number}\\"\\n  end\\n\\n  private\\n\\n  def local_number\\n    \\"#{number[3...6]}-#{number[6..-1]}\\"\\n  end\\nend\\n\\nclass PhoneNumberValidator\\n  def initialize(country_code, default=\\"0000000000\\")\\n    @country_code = country_code\\n    @default      = default\\n    @digits       = \\"\\"\\n  end\\n\\n  def process(number)\\n    digitalize number\\n    remove_country_code\\n    validate_length\\n    @digits\\n  end\\n\\n  private\\n\\n  def digitalize(number)\\n    @digits = number.gsub /\\\\D/, ''\\n  end\\n\\n  def remove_country_code\\n    @digits = @digits[1..-1] if with_country_code?\\n  end\\n\\n  def with_country_code?\\n    @digits.length == 11 and @digits[0] == @country_code\\n  end\\n\\n  def validate_length\\n    @digits = @digits.length == 10 ? @digits : @default\\n  end\\nend"}
191	41	699e8eb5d85349b13339eb28	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(number)\n    validator = PhoneNumberValidator.new "0000000000", '1'\n    @number   = validator.process number\n  end\n\n  def area_code\n    number[0...3]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number}"\n  end\n\n  private\n\n  def local_number\n    "#{number[3...6]}-#{number[6..-1]}"\n  end\nend\n\nclass PhoneNumberValidator\n  def initialize(default, country_code)\n    @default      = default\n    @country_code = country_code\n    @digits       = ""\n  end\n\n  def process(number)\n    digitalize number\n    remove_country_code\n    validate_length\n    @digits\n  end\n\n  private\n\n  def digitalize(number)\n    @digits = number.gsub /\\D/, ''\n  end\n\n  def remove_country_code\n    @digits = @digits[1..-1] if has_country_code\n  end\n\n  def has_country_code\n    @digits.length == 11 and @digits[0] == @country_code\n  end\n\n  def validate_length\n    @digits = @digits.length == 10 ? @digits : @default\n  end\nend	\N	\N	0	4	2014-08-26 19:04:19	2014-08-26 19:04:19	110	phone-number.rb	{"phone-number.rb":"class PhoneNumber\\n  attr_reader :number\\n\\n  def initialize(number)\\n    validator = PhoneNumberValidator.new \\"0000000000\\", '1'\\n    @number   = validator.process number\\n  end\\n\\n  def area_code\\n    number[0...3]\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{local_number}\\"\\n  end\\n\\n  private\\n\\n  def local_number\\n    \\"#{number[3...6]}-#{number[6..-1]}\\"\\n  end\\nend\\n\\nclass PhoneNumberValidator\\n  def initialize(default, country_code)\\n    @default      = default\\n    @country_code = country_code\\n    @digits       = \\"\\"\\n  end\\n\\n  def process(number)\\n    digitalize number\\n    remove_country_code\\n    validate_length\\n    @digits\\n  end\\n\\n  private\\n\\n  def digitalize(number)\\n    @digits = number.gsub /\\\\D/, ''\\n  end\\n\\n  def remove_country_code\\n    @digits = @digits[1..-1] if has_country_code\\n  end\\n\\n  def has_country_code\\n    @digits.length == 11 and @digits[0] == @country_code\\n  end\\n\\n  def validate_length\\n    @digits = @digits.length == 10 ? @digits : @default\\n  end\\nend"}
192	41	4e9467c2afe41bab784bca36	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(number)\n    digits  = digitalize number\n    @number = validate digits\n  end\n\n  def area_code\n    @number[0...3]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number}"\n  end\n\n  private\n\n  def digitalize(number)\n    number.gsub /\\D/, ''\n  end\n\n  def validate(digits)\n    digits = digits[1..-1] if digits.length == 11 and digits[0] == '1'\n    digits.length == 10 ? digits : "0000000000"\n  end\n\n  def local_number\n    number[3...6] + "-" + number[6..-1]\n  end\nend	\N	\N	0	1	2014-09-04 20:37:38	2014-09-04 20:37:38	110	phone-number.rb	{"phone-number.rb":"class PhoneNumber\\n  attr_reader :number\\n\\n  def initialize(number)\\n    digits  = digitalize number\\n    @number = validate digits\\n  end\\n\\n  def area_code\\n    @number[0...3]\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{local_number}\\"\\n  end\\n\\n  private\\n\\n  def digitalize(number)\\n    number.gsub /\\\\D/, ''\\n  end\\n\\n  def validate(digits)\\n    digits = digits[1..-1] if digits.length == 11 and digits[0] == '1'\\n    digits.length == 10 ? digits : \\"0000000000\\"\\n  end\\n\\n  def local_number\\n    number[3...6] + \\"-\\" + number[6..-1]\\n  end\\nend"}
193	41	dd689153cbd7a00cfa7734fa	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(number)\n    digits  = digitalize number\n    @number = validate digits\n  end\n\n  def area_code\n    number[0...3]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number}"\n  end\n\n  private\n\n  def digitalize(number)\n    number.gsub /\\D/, ''\n  end\n\n  def validate(digits)\n    digits = digits[1..-1] if digits.length == 11 and digits[0] == '1'\n    digits.length == 10 ? digits : "0000000000"\n  end\n\n  def local_number\n    "#{number[3...6]}-#{number[6..-1]}"\n  end\nend	\N	\N	0	2	2014-11-21 21:06:34	2014-11-21 21:06:34	110	phone-number.rb	{"phone-number.rb":"class PhoneNumber\\n  attr_reader :number\\n\\n  def initialize(number)\\n    digits  = digitalize number\\n    @number = validate digits\\n  end\\n\\n  def area_code\\n    number[0...3]\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{local_number}\\"\\n  end\\n\\n  private\\n\\n  def digitalize(number)\\n    number.gsub /\\\\D/, ''\\n  end\\n\\n  def validate(digits)\\n    digits = digits[1..-1] if digits.length == 11 and digits[0] == '1'\\n    digits.length == 10 ? digits : \\"0000000000\\"\\n  end\\n\\n  def local_number\\n    \\"#{number[3...6]}-#{number[6..-1]}\\"\\n  end\\nend"}
194	41	d2f76c7214a82cdf28c62ca4	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(number)\n    validator = PhoneNumberValidator.new "0000000000", '1'\n    @number   = validator.process number\n  end\n\n  def area_code\n    number[0...3]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number}"\n  end\n\n  private\n\n  def local_number\n    "#{number[3...6]}-#{number[6..-1]}"\n  end\nend\n\nclass PhoneNumberValidator\n  def initialize(default, country_code)\n    @default      = default\n    @country_code = country_code\n    @digits       = ""\n  end\n\n  def process(number)\n    @digits = digitalize number\n    remove_country_code\n    validate_length\n    @digits\n  end\n\n  private\n\n  def digitalize(number)\n    number.gsub /\\D/, ''\n  end\n\n  def remove_country_code\n    @digits = @digits[1..-1] if has_country_code\n  end\n\n  def has_country_code\n    @digits.length == 11 and @digits[0] == @country_code\n  end\n\n  def validate_length\n    @digits = @digits.length == 10 ? @digits : @default\n  end\nend	\N	\N	0	3	2014-12-19 02:06:57	2014-12-19 02:06:57	110	phone-number.rb	{"phone-number.rb":"class PhoneNumber\\n  attr_reader :number\\n\\n  def initialize(number)\\n    validator = PhoneNumberValidator.new \\"0000000000\\", '1'\\n    @number   = validator.process number\\n  end\\n\\n  def area_code\\n    number[0...3]\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{local_number}\\"\\n  end\\n\\n  private\\n\\n  def local_number\\n    \\"#{number[3...6]}-#{number[6..-1]}\\"\\n  end\\nend\\n\\nclass PhoneNumberValidator\\n  def initialize(default, country_code)\\n    @default      = default\\n    @country_code = country_code\\n    @digits       = \\"\\"\\n  end\\n\\n  def process(number)\\n    @digits = digitalize number\\n    remove_country_code\\n    validate_length\\n    @digits\\n  end\\n\\n  private\\n\\n  def digitalize(number)\\n    number.gsub /\\\\D/, ''\\n  end\\n\\n  def remove_country_code\\n    @digits = @digits[1..-1] if has_country_code\\n  end\\n\\n  def has_country_code\\n    @digits.length == 11 and @digits[0] == @country_code\\n  end\\n\\n  def validate_length\\n    @digits = @digits.length == 10 ? @digits : @default\\n  end\\nend"}
203	41	f44c9ea7045625d143b6898d	superseded	clojure	anagram	(ns phrase\n  (require [clojure.string :as str]))\n\n(defn- downcase\n  [phrase]\n  (str/lower-case phrase))\n\n(defn- split-up\n  [phrase]\n  (re-seq #"\\w+" phrase))\n\n(defn- count-words\n  [words]\n  (frequencies words))\n\n(defn word-count\n  "Counts appearances of words in a given phrase."\n  [phrase]\n  (-> phrase downcase split-up count-words))	\N	\N	0	1	2014-07-28 19:04:26	2014-07-28 19:04:26	116	anagram.clj	{"anagram.clj":"(ns phrase\\n  (require [clojure.string :as str]))\\n\\n(defn- downcase\\n  [phrase]\\n  (str/lower-case phrase))\\n\\n(defn- split-up\\n  [phrase]\\n  (re-seq #\\"\\\\w+\\" phrase))\\n\\n(defn- count-words\\n  [words]\\n  (frequencies words))\\n\\n(defn word-count\\n  \\"Counts appearances of words in a given phrase.\\"\\n  [phrase]\\n  (-\\u003e phrase downcase split-up count-words))"}
195	41	5dc46fd50e15a9f02890fe10	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(number)\n    validator = PhoneNumberValidator.new '1'\n    @number   = validator.process number\n  end\n\n  def area_code\n    number[0...3]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number}"\n  end\n\n  private\n\n  def local_number\n    "#{number[3...6]}-#{number[6..-1]}"\n  end\nend\n\nclass PhoneNumberValidator\n  def initialize(country_code, default="0000000000")\n    @country_code = country_code\n    @default      = default\n    @digits       = ""\n  end\n\n  def process(number)\n    digitalize number\n    remove_country_code\n    validate_length\n    @digits\n  end\n\n  private\n\n  def digitalize(number)\n    @digits = number.gsub /\\D/, ''\n  end\n\n  def remove_country_code\n    @digits = @digits[1..-1] if has_country_code\n  end\n\n  def has_country_code\n    @digits.length == 11 and @digits[0] == @country_code\n  end\n\n  def validate_length\n    @digits = @digits.length == 10 ? @digits : @default\n  end\nend	\N	\N	0	5	2014-12-25 21:26:45	2014-12-25 21:26:45	110	phone-number.rb	{"phone-number.rb":"class PhoneNumber\\n  attr_reader :number\\n\\n  def initialize(number)\\n    validator = PhoneNumberValidator.new '1'\\n    @number   = validator.process number\\n  end\\n\\n  def area_code\\n    number[0...3]\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{local_number}\\"\\n  end\\n\\n  private\\n\\n  def local_number\\n    \\"#{number[3...6]}-#{number[6..-1]}\\"\\n  end\\nend\\n\\nclass PhoneNumberValidator\\n  def initialize(country_code, default=\\"0000000000\\")\\n    @country_code = country_code\\n    @default      = default\\n    @digits       = \\"\\"\\n  end\\n\\n  def process(number)\\n    digitalize number\\n    remove_country_code\\n    validate_length\\n    @digits\\n  end\\n\\n  private\\n\\n  def digitalize(number)\\n    @digits = number.gsub /\\\\D/, ''\\n  end\\n\\n  def remove_country_code\\n    @digits = @digits[1..-1] if has_country_code\\n  end\\n\\n  def has_country_code\\n    @digits.length == 11 and @digits[0] == @country_code\\n  end\\n\\n  def validate_length\\n    @digits = @digits.length == 10 ? @digits : @default\\n  end\\nend"}
196	41	d82164bcdd5432554a637fd5	pending	javascript	anagram	var sorted = function(s) {\n  return s.split('').sort().join('');\n};\n\nvar canonicalize = function(word) {\n  return sorted(word.toLowerCase());\n};\n\nfunction Anagram(word) {\n  this.word = word;\n  this.canonical = canonicalize(word);\n};\n\nAnagram.prototype.match = function(candidates) {\n  return candidates.filter(function (word) {\n    return word.toLowerCase() !== this.word.toLowerCase() &&\n      canonicalize(word) === this.canonical;\n  }.bind(this));\n};\n\nmodule.exports = Anagram;	\N	\N	0	1	2014-08-01 11:01:12	2014-08-01 11:01:12	111	anagram.js	{"anagram.js":"var sorted = function(s) {\\n  return s.split('').sort().join('');\\n};\\n\\nvar canonicalize = function(word) {\\n  return sorted(word.toLowerCase());\\n};\\n\\nfunction Anagram(word) {\\n  this.word = word;\\n  this.canonical = canonicalize(word);\\n};\\n\\nAnagram.prototype.match = function(candidates) {\\n  return candidates.filter(function (word) {\\n    return word.toLowerCase() !== this.word.toLowerCase() \\u0026\\u0026\\n      canonicalize(word) === this.canonical;\\n  }.bind(this));\\n};\\n\\nmodule.exports = Anagram;"}
197	41	a59c2a338276ecfc6f029e57	pending	python	leap	"""This module contains a function to test whether a year is a leap year."""\r\n\r\ndef is_leap_year(year):\r\n    """Return True if year is a leap year, False otherwise"""\r\n    if year % 400 == 0:\r\n        return True\r\n    if year % 100 == 0:\r\n        return False\r\n    if year % 4 == 0:\r\n        return True\r\n    return False\r	\N	\N	0	1	2014-05-09 18:43:13	2014-05-09 18:43:13	112	year.py	{"year.py":"\\"\\"\\"This module contains a function to test whether a year is a leap year.\\"\\"\\"\\r\\n\\r\\ndef is_leap_year(year):\\r\\n    \\"\\"\\"Return True if year is a leap year, False otherwise\\"\\"\\"\\r\\n    if year % 400 == 0:\\r\\n        return True\\r\\n    if year % 100 == 0:\\r\\n        return False\\r\\n    if year % 4 == 0:\\r\\n        return True\\r\\n    return False\\r"}
198	41	9fbbedef4b5827eced065017	pending	javascript	robot-name	var A = 'A'.charCodeAt(0);\nvar Z = 'Z'.charCodeAt(0);\nvar letterCount = Z - A;\n\nfunction randomLetter() { return String.fromCharCode(A + Math.random() * letterCount); }\nfunction randomDigit() { return Math.floor(Math.random() * 10); }\nfunction robotName() { return randomLetter() + randomLetter() + randomDigit() + randomDigit() + randomDigit(); }\n\nvar Robot = function() {\n\tthis.name = robotName();\n};\n\nRobot.prototype.reset = function() {\n\tthis.name = robotName();\n}\n\nmodule.exports = Robot;	\N	\N	0	1	2014-05-30 22:15:00	2014-05-30 22:15:00	113	robot-name.js	{"robot-name.js":"var A = 'A'.charCodeAt(0);\\nvar Z = 'Z'.charCodeAt(0);\\nvar letterCount = Z - A;\\n\\nfunction randomLetter() { return String.fromCharCode(A + Math.random() * letterCount); }\\nfunction randomDigit() { return Math.floor(Math.random() * 10); }\\nfunction robotName() { return randomLetter() + randomLetter() + randomDigit() + randomDigit() + randomDigit(); }\\n\\nvar Robot = function() {\\n\\tthis.name = robotName();\\n};\\n\\nRobot.prototype.reset = function() {\\n\\tthis.name = robotName();\\n}\\n\\nmodule.exports = Robot;"}
199	41	fd2cefb3f8f876bb5c4542b1	pending	python	hamming	def distance(strand1, strand2):\r\n    value = 0\r\n    if len(strand1) != len(strand2): return value\r\n    \r\n    for x, y in zip(strand1,strand2):\r\n        value+= (x != y)\r\n    return value\r\n    \r	\N	\N	0	1	2014-09-13 01:43:29	2014-09-13 01:43:29	114	hamming.py	{"hamming.py":"def distance(strand1, strand2):\\r\\n    value = 0\\r\\n    if len(strand1) != len(strand2): return value\\r\\n    \\r\\n    for x, y in zip(strand1,strand2):\\r\\n        value+= (x != y)\\r\\n    return value\\r\\n    \\r"}
200	41	66e138a1c410170bf20ba93a	pending	ruby	space-age	require 'mathn'\n\nclass SpaceAge\n  attr_reader :seconds\n\n  def on_earth\n    age_by_earth_seconds.round(2)\n  end\n\n  def on_mercury\n    get_planetary_age(24.08467)\n  end\n\n  def on_venus\n    get_planetary_age(61.519726)\n  end\n\n  def on_mars\n    get_planetary_age(188.08158)\n  end\n\n  def on_jupiter\n    get_planetary_age(1186.2615)\n  end\n\n  def on_saturn\n    get_planetary_age(2944.7498)\n  end\n\n  def on_uranus\n    get_planetary_age(8401.6846)\n  end\n\n  def on_neptune\n    get_planetary_age(16479.132)\n  end\n\nprivate\n\n  def initialize(age)\n    @seconds = age\n  end\n\n  def age_by_earth_seconds\n    Rational(seconds / 31557600)\n  end\n\n  def get_planetary_age(orbital_period)\n    ans = age_by_earth_seconds / fractionize(orbital_period)\n    ans.round(2)\n  end\n\n  def fractionize(n)\n    Rational(n/100)\n  end\nend	\N	\N	0	1	2014-06-12 09:30:24	2014-06-12 09:30:24	115	space-age.rb	{"space-age.rb":"require 'mathn'\\n\\nclass SpaceAge\\n  attr_reader :seconds\\n\\n  def on_earth\\n    age_by_earth_seconds.round(2)\\n  end\\n\\n  def on_mercury\\n    get_planetary_age(24.08467)\\n  end\\n\\n  def on_venus\\n    get_planetary_age(61.519726)\\n  end\\n\\n  def on_mars\\n    get_planetary_age(188.08158)\\n  end\\n\\n  def on_jupiter\\n    get_planetary_age(1186.2615)\\n  end\\n\\n  def on_saturn\\n    get_planetary_age(2944.7498)\\n  end\\n\\n  def on_uranus\\n    get_planetary_age(8401.6846)\\n  end\\n\\n  def on_neptune\\n    get_planetary_age(16479.132)\\n  end\\n\\nprivate\\n\\n  def initialize(age)\\n    @seconds = age\\n  end\\n\\n  def age_by_earth_seconds\\n    Rational(seconds / 31557600)\\n  end\\n\\n  def get_planetary_age(orbital_period)\\n    ans = age_by_earth_seconds / fractionize(orbital_period)\\n    ans.round(2)\\n  end\\n\\n  def fractionize(n)\\n    Rational(n/100)\\n  end\\nend"}
201	41	d1d2bea67dccd7307ed6b350	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [word words]\n  (filter\n   (partial\n    #(and (= (sort %1) (sort %2))\n          (not (= %1 %2)))\n    word)\n   words))	\N	\N	0	8	2014-05-16 07:25:19	2014-05-16 07:25:19	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn anagrams-for\\n  [word words]\\n  (filter\\n   (partial\\n    #(and (= (sort %1) (sort %2))\\n          (not (= %1 %2)))\\n    word)\\n   words))"}
207	41	6ad5fd5d0e8e2b2ad6f8c042	pending	clojure	anagram	(ns anagram)\n\n(defn- check-for-anagram [word]\n  (let [word-chars (frequencies word)]\n    (fn [assigned-word]\n      (let [assigned-chars (frequencies assigned-word)]\n        (and (= word-chars assigned-chars)\n             (not (= word assigned-word)))))))\n\n(defn anagrams-for\n  [word collection-of-words]\n  (filter (check-for-anagram word) collection-of-words))	\N	\N	0	11	2014-09-05 21:21:33	2014-09-05 21:21:33	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn- check-for-anagram [word]\\n  (let [word-chars (frequencies word)]\\n    (fn [assigned-word]\\n      (let [assigned-chars (frequencies assigned-word)]\\n        (and (= word-chars assigned-chars)\\n             (not (= word assigned-word)))))))\\n\\n(defn anagrams-for\\n  [word collection-of-words]\\n  (filter (check-for-anagram word) collection-of-words))"}
208	41	4eb9e99d67e6c9080799a392	superseded	clojure	anagram	(ns anagram\n  (require [clojure.string :as str]))\n\n(defn- sort-chars\n  [word]\n  (sort (concat word)))\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort-chars word1) (sort-chars word2)))\n\n(defn- equal-words?\n  [word1 word2]\n  (= word1 word2))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (equal-words? word1 word2))))\n\n(defn- conj-anagram\n  [anagrams word1 word2]\n  (if (anagram? word1 word2)\n    (conj anagrams word2)\n    anagrams))\n\n(defn anagrams-for\n  [word words]\n  (loop [rem-words words\n         anagrams []]\n    (if (empty? rem-words)\n      anagrams\n      (recur (rest rem-words) (conj-anagram anagrams word (first rem-words))))))	\N	\N	0	2	2014-09-22 01:59:48	2014-09-22 01:59:48	116	anagram.clj	{"anagram.clj":"(ns anagram\\n  (require [clojure.string :as str]))\\n\\n(defn- sort-chars\\n  [word]\\n  (sort (concat word)))\\n\\n(defn- equal-chars?\\n  [word1 word2]\\n  (= (sort-chars word1) (sort-chars word2)))\\n\\n(defn- equal-words?\\n  [word1 word2]\\n  (= word1 word2))\\n\\n(defn- anagram?\\n  [word1 word2]\\n  (and (equal-chars? word1 word2)\\n       (not (equal-words? word1 word2))))\\n\\n(defn- conj-anagram\\n  [anagrams word1 word2]\\n  (if (anagram? word1 word2)\\n    (conj anagrams word2)\\n    anagrams))\\n\\n(defn anagrams-for\\n  [word words]\\n  (loop [rem-words words\\n         anagrams []]\\n    (if (empty? rem-words)\\n      anagrams\\n      (recur (rest rem-words) (conj-anagram anagrams word (first rem-words))))))"}
209	41	af92a153bee61b8d31f2aacf	superseded	clojure	anagram	(ns anagram\n  (require [clojure.string :as str]))\n\n(defn- sort-chars\n  [word]\n  (sort (concat word)))\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort-chars word1) (sort-chars word2)))\n\n(defn- equal-words?\n  [word1 word2]\n  (= word1 word2))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (equal-words? word1 word2))))\n\n(defn- conj-anagram\n  [anagrams word1 word2]\n  (if (anagram? word1 word2)\n    (conj anagrams word2)\n    anagrams))\n\n(defn anagrams-for\n  "Returns every anagram of word in the collection."\n[word words]\n  (loop [rem-words words\n         anagrams  []]\n    (if (empty? rem-words)\n      anagrams\n      (recur (rest rem-words) (conj-anagram anagrams word (first rem-words))))))	\N	\N	0	3	2014-10-20 11:01:37	2014-10-20 11:01:37	116	anagram.clj	{"anagram.clj":"(ns anagram\\n  (require [clojure.string :as str]))\\n\\n(defn- sort-chars\\n  [word]\\n  (sort (concat word)))\\n\\n(defn- equal-chars?\\n  [word1 word2]\\n  (= (sort-chars word1) (sort-chars word2)))\\n\\n(defn- equal-words?\\n  [word1 word2]\\n  (= word1 word2))\\n\\n(defn- anagram?\\n  [word1 word2]\\n  (and (equal-chars? word1 word2)\\n       (not (equal-words? word1 word2))))\\n\\n(defn- conj-anagram\\n  [anagrams word1 word2]\\n  (if (anagram? word1 word2)\\n    (conj anagrams word2)\\n    anagrams))\\n\\n(defn anagrams-for\\n  \\"Returns every anagram of word in the collection.\\"\\n[word words]\\n  (loop [rem-words words\\n         anagrams  []]\\n    (if (empty? rem-words)\\n      anagrams\\n      (recur (rest rem-words) (conj-anagram anagrams word (first rem-words))))))"}
210	41	db9a98708833e585e9e34e62	superseded	clojure	anagram	(ns anagram)\n\n(defn- sort-chars\n  [word]\n  (sort (concat word)))\n\n(defn- equal-chars?\n  [word1 word2]\n  (= (sort-chars word1) (sort-chars word2)))\n\n(defn- equal-words?\n  [word1 word2]\n  (= word1 word2))\n\n(defn- anagram?\n  [word1 word2]\n  (and (equal-chars? word1 word2)\n       (not (equal-words? word1 word2))))\n\n(defn- conj-anagrams\n  [anagrams word1 word2]\n  (if (anagram? word1 word2)\n    (conj anagrams word2)\n    anagrams))\n\n(defn anagrams-for\n  "Returns every anagram of word in the collection."\n  [word words]\n  (loop [remaining-words words\n         anagrams  []]\n    (if (empty? remaining-words)\n      anagrams\n      (recur (rest remaining-words)\n             (conj-anagrams anagrams word (first remaining-words))))))	\N	\N	0	4	2014-10-25 15:59:46	2014-10-25 15:59:46	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn- sort-chars\\n  [word]\\n  (sort (concat word)))\\n\\n(defn- equal-chars?\\n  [word1 word2]\\n  (= (sort-chars word1) (sort-chars word2)))\\n\\n(defn- equal-words?\\n  [word1 word2]\\n  (= word1 word2))\\n\\n(defn- anagram?\\n  [word1 word2]\\n  (and (equal-chars? word1 word2)\\n       (not (equal-words? word1 word2))))\\n\\n(defn- conj-anagrams\\n  [anagrams word1 word2]\\n  (if (anagram? word1 word2)\\n    (conj anagrams word2)\\n    anagrams))\\n\\n(defn anagrams-for\\n  \\"Returns every anagram of word in the collection.\\"\\n  [word words]\\n  (loop [remaining-words words\\n         anagrams  []]\\n    (if (empty? remaining-words)\\n      anagrams\\n      (recur (rest remaining-words)\\n             (conj-anagrams anagrams word (first remaining-words))))))"}
211	41	26412a4e33b90976fe08c5b3	superseded	clojure	anagram	(ns anagram)\n\n(defn- anagram?\n  [expression assignment]\n  (and (= 0 (compare expression assignment))\n       (not (= expression assignment))))\n\n(defn anagrams-for\n  [word words]\n  (filter (partial anagram? word) words))	\N	\N	0	6	2014-12-06 06:24:08	2014-12-06 06:24:08	116	anagram.clj	{"anagram.clj":"(ns anagram)\\n\\n(defn- anagram?\\n  [expression assignment]\\n  (and (= 0 (compare expression assignment))\\n       (not (= expression assignment))))\\n\\n(defn anagrams-for\\n  [word words]\\n  (filter (partial anagram? word) words))"}
212	41	1da6fb367a0e22d39e800b8f	pending	ruby	roman-numerals	module Roman\n  def to_roman\n    return nil if self > 3000\n\n    digits = self.to_s.split('')\n\n    ones  = ['I', 'X', 'C', 'M']\n    fives = ['V', 'L', 'D']\n\n    digits.reverse.map.with_index do |digit, i|\n      n    = digit.to_i\n\n      five = fives[i]\n      one  = ones[i]\n      ten  = ones[i+1]\n\n      case n\n      when 1..3\n        one * n\n      when 4\n        one + five\n      when 5\n        five\n      when 6..8\n        five + one * (n - 5)\n      when 9\n        one + ten\n      else\n        # NOOP\n      end\n    end.reverse.join\n  end\nend\n\nclass Integer\n  include Roman\nend	\N	\N	0	1	2014-08-30 12:52:30	2014-08-30 12:52:30	117	roman.rb	{"roman.rb":"module Roman\\n  def to_roman\\n    return nil if self \\u003e 3000\\n\\n    digits = self.to_s.split('')\\n\\n    ones  = ['I', 'X', 'C', 'M']\\n    fives = ['V', 'L', 'D']\\n\\n    digits.reverse.map.with_index do |digit, i|\\n      n    = digit.to_i\\n\\n      five = fives[i]\\n      one  = ones[i]\\n      ten  = ones[i+1]\\n\\n      case n\\n      when 1..3\\n        one * n\\n      when 4\\n        one + five\\n      when 5\\n        five\\n      when 6..8\\n        five + one * (n - 5)\\n      when 9\\n        one + ten\\n      else\\n        # NOOP\\n      end\\n    end.reverse.join\\n  end\\nend\\n\\nclass Integer\\n  include Roman\\nend"}
213	41	f7a9be1b6ea095a8a720b296	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def match(self, strings):\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]	\N	\N	0	3	2014-06-16 17:43:08	2014-06-16 17:43:08	118	anagram.py	{"anagram.py":"class Anagram:\\n    def __init__(self, base):\\n        self.comparison_base = self.sorted_string(base)\\n\\n    def sorted_string(self, string):\\n        return sorted(string.lower())\\n\\n    def match(self, strings):\\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]"}
214	41	68e0923d7f7347fec934880f	pending	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def is_anagram(self, string):\n        return self.sorted_string(string) == self.comparison_base\n\n    def match(self, strings):\n        # Sadly, we have to force it to a list\n        return list(filter(self.is_anagram, strings))	\N	\N	0	6	2014-07-16 12:32:49	2014-07-16 12:32:49	118	anagram.py	{"anagram.py":"class Anagram:\\n    def __init__(self, base):\\n        self.comparison_base = self.sorted_string(base)\\n\\n    def sorted_string(self, string):\\n        return sorted(string.lower())\\n\\n    def is_anagram(self, string):\\n        return self.sorted_string(string) == self.comparison_base\\n\\n    def match(self, strings):\\n        # Sadly, we have to force it to a list\\n        return list(filter(self.is_anagram, strings))"}
215	41	7ff01cf67c5af5a5cb10fd35	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def is_anagram(self, string):\n        return self.sorted_string(string) == self.comparison_base\n\n    def match(self, strings):\n        return [string for string in strings if self.is_anagram(string)]	\N	\N	0	4	2014-09-06 11:42:27	2014-09-06 11:42:27	118	anagram.py	{"anagram.py":"class Anagram:\\n    def __init__(self, base):\\n        self.comparison_base = self.sorted_string(base)\\n\\n    def sorted_string(self, string):\\n        return sorted(string.lower())\\n\\n    def is_anagram(self, string):\\n        return self.sorted_string(string) == self.comparison_base\\n\\n    def match(self, strings):\\n        return [string for string in strings if self.is_anagram(string)]"}
216	41	8eb79a8660a158fa21ec70c8	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return ''.join(sorted(list(string.lower())))\n\n    def match(self, strings):\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]	\N	\N	0	1	2014-10-22 10:40:23	2014-10-22 10:40:23	118	anagram.py	{"anagram.py":"class Anagram:\\n    def __init__(self, base):\\n        self.comparison_base = self.sorted_string(base)\\n\\n    def sorted_string(self, string):\\n        return ''.join(sorted(list(string.lower())))\\n\\n    def match(self, strings):\\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]"}
217	41	1fdf1ec98b824dbb8725734c	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return ''.join(sorted(string.lower()))\n\n    def match(self, strings):\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]	\N	\N	0	2	2014-12-04 02:05:40	2014-12-04 02:05:40	118	anagram.py	{"anagram.py":"class Anagram:\\n    def __init__(self, base):\\n        self.comparison_base = self.sorted_string(base)\\n\\n    def sorted_string(self, string):\\n        return ''.join(sorted(string.lower()))\\n\\n    def match(self, strings):\\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]"}
218	41	15c8b71c3c2e2269451819b6	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def is_anagram(self, string):\n        return self.sorted_string(string) == self.comparison_base\n\n    def match(self, strings):\n        return list(filter(self.is_anagram, strings))	\N	\N	0	5	2014-12-07 00:38:49	2014-12-07 00:38:49	118	anagram.py	{"anagram.py":"class Anagram:\\n    def __init__(self, base):\\n        self.comparison_base = self.sorted_string(base)\\n\\n    def sorted_string(self, string):\\n        return sorted(string.lower())\\n\\n    def is_anagram(self, string):\\n        return self.sorted_string(string) == self.comparison_base\\n\\n    def match(self, strings):\\n        return list(filter(self.is_anagram, strings))"}
219	41	e1b0ef4c5cd77fb0afdea2c5	pending	scala	anagram	class Anagram(val word: String) {\n\n  lazy val charCount = countChars(word)\n\n  def matches(candidates: Seq[String]) = candidates.filter{candidate =>\n    candidate.toLowerCase != word.toLowerCase &&\n      countChars(candidate) == charCount\n  }\n\n  def countChars(s: String): Map[Char, Int] = {\n    s.toLowerCase\n      .groupBy{identity(_)}\n      .mapValues{_.length}\n  }\n\n}	\N	\N	0	1	2014-05-10 03:56:56	2014-05-10 03:56:56	119	anagram.scala	{"anagram.scala":"class Anagram(val word: String) {\\n\\n  lazy val charCount = countChars(word)\\n\\n  def matches(candidates: Seq[String]) = candidates.filter{candidate =\\u003e\\n    candidate.toLowerCase != word.toLowerCase \\u0026\\u0026\\n      countChars(candidate) == charCount\\n  }\\n\\n  def countChars(s: String): Map[Char, Int] = {\\n    s.toLowerCase\\n      .groupBy{identity(_)}\\n      .mapValues{_.length}\\n  }\\n\\n}"}
220	41	9d4101152c4d0514d4d6ffab	pending	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\r\n\r\n\r\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune\r\n                deriving (Eq)\r\n\r\n\r\nageOn :: Planet -> Float -> Float\r\nageOn planet seconds = days / daysPerYear\r\n  where\r\n    days = seconds / 86400\r\n    daysPerYear = solarYear planet * 365.25\r\n\r\n\r\nsolarYear :: Planet -> Float\r\nsolarYear Earth = 1\r\nsolarYear Mercury = 0.2408467\r\nsolarYear Venus = 0.61519726\r\nsolarYear Mars = 1.8808158\r\nsolarYear Jupiter = 11.862615\r\nsolarYear Saturn = 29.447498\r\nsolarYear Uranus = 84.016846\r\nsolarYear Neptune = 164.79132	\N	\N	0	1	2014-05-08 02:12:45	2014-05-08 02:12:45	120	space-age.hs	{"space-age.hs":"module SpaceAge (Planet(..), ageOn) where\\r\\n\\r\\n\\r\\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune\\r\\n                deriving (Eq)\\r\\n\\r\\n\\r\\nageOn :: Planet -\\u003e Float -\\u003e Float\\r\\nageOn planet seconds = days / daysPerYear\\r\\n  where\\r\\n    days = seconds / 86400\\r\\n    daysPerYear = solarYear planet * 365.25\\r\\n\\r\\n\\r\\nsolarYear :: Planet -\\u003e Float\\r\\nsolarYear Earth = 1\\r\\nsolarYear Mercury = 0.2408467\\r\\nsolarYear Venus = 0.61519726\\r\\nsolarYear Mars = 1.8808158\\r\\nsolarYear Jupiter = 11.862615\\r\\nsolarYear Saturn = 29.447498\\r\\nsolarYear Uranus = 84.016846\\r\\nsolarYear Neptune = 164.79132"}
221	41	40d93deceb6923bbcfca9241	superseded	python	bob	class Bob(object):\r\n    """docstring for bob"""\r\n    def __init__(self):\r\n        pass\r\n\r\n    def isQuestion(self, string):\r\n        return string[-1:] == '?'\r\n\r\n    def isAllCaps(self, string):\r\n        isUppercase = False\r\n        for letter in string:\r\n            if letter.islower():\r\n                return False\r\n            if letter.isupper():\r\n                isUppercase = True\r\n        else:\r\n            return True and isUppercase\r\n\r\n    def isBlank(self, string):\r\n        if len(string) == 0:\r\n            return True\r\n        for letter in string:\r\n            if letter != ' ':\r\n                return False\r\n        else:\r\n            return True\r\n\r\n    def hey(self, string):\r\n        if (self.isAllCaps(string)):\r\n            return "Woah, chill out!"\r\n        elif (self.isQuestion(string)):\r\n            return "Sure."\r\n        elif (self.isBlank(string)):\r\n            return "Fine. Be that way!"\r\n        else:\r\n            return "Whatever."\r\n\r\nb = Bob()\r\nprint b.isAllCaps('Aa!$')\r	\N	\N	0	1	2014-08-11 12:58:21	2014-08-11 12:58:21	121	bob.py	{"bob.py":"class Bob(object):\\r\\n    \\"\\"\\"docstring for bob\\"\\"\\"\\r\\n    def __init__(self):\\r\\n        pass\\r\\n\\r\\n    def isQuestion(self, string):\\r\\n        return string[-1:] == '?'\\r\\n\\r\\n    def isAllCaps(self, string):\\r\\n        isUppercase = False\\r\\n        for letter in string:\\r\\n            if letter.islower():\\r\\n                return False\\r\\n            if letter.isupper():\\r\\n                isUppercase = True\\r\\n        else:\\r\\n            return True and isUppercase\\r\\n\\r\\n    def isBlank(self, string):\\r\\n        if len(string) == 0:\\r\\n            return True\\r\\n        for letter in string:\\r\\n            if letter != ' ':\\r\\n                return False\\r\\n        else:\\r\\n            return True\\r\\n\\r\\n    def hey(self, string):\\r\\n        if (self.isAllCaps(string)):\\r\\n            return \\"Woah, chill out!\\"\\r\\n        elif (self.isQuestion(string)):\\r\\n            return \\"Sure.\\"\\r\\n        elif (self.isBlank(string)):\\r\\n            return \\"Fine. Be that way!\\"\\r\\n        else:\\r\\n            return \\"Whatever.\\"\\r\\n\\r\\nb = Bob()\\r\\nprint b.isAllCaps('Aa!$')\\r"}
222	41	1eeafbafa38cf3dfe96d87e6	superseded	python	bob	\r\nimport string\r\n\r\nclass Bob(object):\r\n\r\n    def isQuestion(self, sentence):\r\n        return sentence.endswith('?')\r\n\r\n    # def isAllCaps(self, sentence):\r\n    #     isUppercase = False\r\n    #     for letter in sentence:\r\n    #         if letter.islower():\r\n    #             return False\r\n    #         if letter.isupper():\r\n    #             isUppercase = True\r\n    #     return isUppercase\r\n\r\n    def isAllCaps(self, sentence):\r\n        if any(letter for letter in sentence if letter.islower()):\r\n            return False\r\n        elif any(letter for letter in sentence if letter.isupper()):\r\n            return True\r\n        return False\r\n\r\n    def isBlank(self, sentence):\r\n        return sentence.strip() == ''\r\n\r\n    def hey(self, sentence):\r\n        if self.isAllCaps(sentence):\r\n            return "Woah, chill out!"\r\n        elif self.isQuestion(sentence):\r\n            return "Sure."\r\n        elif self.isBlank(sentence):\r\n            return "Fine. Be that way!"\r\n        else:\r\n            return "Whatever."\r\n\r\nb = Bob()\r	\N	\N	0	3	2014-08-28 21:38:28	2014-08-28 21:38:28	121	bob.py	{"bob.py":"\\r\\nimport string\\r\\n\\r\\nclass Bob(object):\\r\\n\\r\\n    def isQuestion(self, sentence):\\r\\n        return sentence.endswith('?')\\r\\n\\r\\n    # def isAllCaps(self, sentence):\\r\\n    #     isUppercase = False\\r\\n    #     for letter in sentence:\\r\\n    #         if letter.islower():\\r\\n    #             return False\\r\\n    #         if letter.isupper():\\r\\n    #             isUppercase = True\\r\\n    #     return isUppercase\\r\\n\\r\\n    def isAllCaps(self, sentence):\\r\\n        if any(letter for letter in sentence if letter.islower()):\\r\\n            return False\\r\\n        elif any(letter for letter in sentence if letter.isupper()):\\r\\n            return True\\r\\n        return False\\r\\n\\r\\n    def isBlank(self, sentence):\\r\\n        return sentence.strip() == ''\\r\\n\\r\\n    def hey(self, sentence):\\r\\n        if self.isAllCaps(sentence):\\r\\n            return \\"Woah, chill out!\\"\\r\\n        elif self.isQuestion(sentence):\\r\\n            return \\"Sure.\\"\\r\\n        elif self.isBlank(sentence):\\r\\n            return \\"Fine. Be that way!\\"\\r\\n        else:\\r\\n            return \\"Whatever.\\"\\r\\n\\r\\nb = Bob()\\r"}
223	41	3234b92549906bc0f87336a2	superseded	python	bob	class Bob(object):\r\n    """docstring for bob"""\r\n    def __init__(self):\r\n        pass\r\n\r\n    def isQuestion(self, string):\r\n        return string[-1:] == '?'\r\n\r\n    def isAllCaps(self, string):\r\n        isUppercase = False\r\n        for letter in string:\r\n            if letter.islower():\r\n                return False\r\n            if letter.isupper():\r\n                isUppercase = True\r\n        return True and isUppercase\r\n\r\n    def isBlank(self, string):\r\n        if len(string) == 0:\r\n            return True\r\n        for letter in string:\r\n            if letter != ' ':\r\n                return False\r\n        return True\r\n\r\n    def hey(self, string):\r\n        if (self.isAllCaps(string)):\r\n            return "Woah, chill out!"\r\n        elif (self.isQuestion(string)):\r\n            return "Sure."\r\n        elif (self.isBlank(string)):\r\n            return "Fine. Be that way!"\r\n        else:\r\n            return "Whatever."\r\n\r\nb = Bob()\r\nprint b.isAllCaps('Aa!$')\r	\N	\N	0	2	2014-09-03 11:06:36	2014-09-03 11:06:36	121	bob.py	{"bob.py":"class Bob(object):\\r\\n    \\"\\"\\"docstring for bob\\"\\"\\"\\r\\n    def __init__(self):\\r\\n        pass\\r\\n\\r\\n    def isQuestion(self, string):\\r\\n        return string[-1:] == '?'\\r\\n\\r\\n    def isAllCaps(self, string):\\r\\n        isUppercase = False\\r\\n        for letter in string:\\r\\n            if letter.islower():\\r\\n                return False\\r\\n            if letter.isupper():\\r\\n                isUppercase = True\\r\\n        return True and isUppercase\\r\\n\\r\\n    def isBlank(self, string):\\r\\n        if len(string) == 0:\\r\\n            return True\\r\\n        for letter in string:\\r\\n            if letter != ' ':\\r\\n                return False\\r\\n        return True\\r\\n\\r\\n    def hey(self, string):\\r\\n        if (self.isAllCaps(string)):\\r\\n            return \\"Woah, chill out!\\"\\r\\n        elif (self.isQuestion(string)):\\r\\n            return \\"Sure.\\"\\r\\n        elif (self.isBlank(string)):\\r\\n            return \\"Fine. Be that way!\\"\\r\\n        else:\\r\\n            return \\"Whatever.\\"\\r\\n\\r\\nb = Bob()\\r\\nprint b.isAllCaps('Aa!$')\\r"}
224	41	494b807f3d43342791ed8ad9	pending	python	bob	class Bob(object):\r\n\r\n    def isQuestion(self, string):\r\n        return string.endswith('?')\r\n\r\n    def isAllCaps(self, string):\r\n        return string.isupper()\r\n\r\n    def isBlank(self, string):\r\n        return string.strip() == ''\r\n\r\n    def hey(self, string):\r\n        if self.isAllCaps(string):\r\n            return "Woah, chill out!"\r\n        elif self.isQuestion(string):\r\n            return "Sure."\r\n        elif self.isBlank(string):\r\n            return "Fine. Be that way!"\r\n        else:\r\n            return "Whatever."\r\n\r\nb = Bob()\r	\N	\N	0	4	2014-09-26 16:16:40	2014-09-26 16:16:40	121	bob.py	{"bob.py":"class Bob(object):\\r\\n\\r\\n    def isQuestion(self, string):\\r\\n        return string.endswith('?')\\r\\n\\r\\n    def isAllCaps(self, string):\\r\\n        return string.isupper()\\r\\n\\r\\n    def isBlank(self, string):\\r\\n        return string.strip() == ''\\r\\n\\r\\n    def hey(self, string):\\r\\n        if self.isAllCaps(string):\\r\\n            return \\"Woah, chill out!\\"\\r\\n        elif self.isQuestion(string):\\r\\n            return \\"Sure.\\"\\r\\n        elif self.isBlank(string):\\r\\n            return \\"Fine. Be that way!\\"\\r\\n        else:\\r\\n            return \\"Whatever.\\"\\r\\n\\r\\nb = Bob()\\r"}
225	41	87690a197eb2525b5b84a376	superseded	ruby	rna-transcription	class Complement\n  def self.of_dna(a)\n    a.split("").map do |letter|\n      letter.dna_complement\n    end.join\n  end\n\n  def self.of_rna(a)\n    a.split("").map do |letter|\n      letter.rna_complement\n    end.join\n  end\nend\n\nclass String\n  def dna_complement\n    case self\n    when "C"\n      "G"\n    when "G"\n      "C"\n    when "T"\n      "A"\n    when "A"\n      "U"\n    end\n  end\n\n  def rna_complement\n    case self\n    when "C"\n      "G"\n    when "G"\n      "C"\n    when "U"\n      "A"\n    when "A"\n      "T"\n    end\n  end\nend	\N	\N	0	1	2014-05-20 12:24:04	2014-05-20 12:24:04	122	complement.rb	{"complement.rb":"class Complement\\n  def self.of_dna(a)\\n    a.split(\\"\\").map do |letter|\\n      letter.dna_complement\\n    end.join\\n  end\\n\\n  def self.of_rna(a)\\n    a.split(\\"\\").map do |letter|\\n      letter.rna_complement\\n    end.join\\n  end\\nend\\n\\nclass String\\n  def dna_complement\\n    case self\\n    when \\"C\\"\\n      \\"G\\"\\n    when \\"G\\"\\n      \\"C\\"\\n    when \\"T\\"\\n      \\"A\\"\\n    when \\"A\\"\\n      \\"U\\"\\n    end\\n  end\\n\\n  def rna_complement\\n    case self\\n    when \\"C\\"\\n      \\"G\\"\\n    when \\"G\\"\\n      \\"C\\"\\n    when \\"U\\"\\n      \\"A\\"\\n    when \\"A\\"\\n      \\"T\\"\\n    end\\n  end\\nend"}
226	41	c95ff1d7805ed027cefb78ec	pending	ruby	rna-transcription	class Complement\n  DNA_COMPLEMENTS = { 'C' => 'G', 'G' => 'C', 'T' => 'A', 'A' => 'U' }\n  RNA_COMPLEMENTS = DNA_COMPLEMENTS.invert\n\n  def self.of_dna(a)\n    a.chars.map { |c| DNA_COMPLEMENTS[c] }.join\n  end\n\n  def self.of_rna(a)\n    a.chars.map { |c| RNA_COMPLEMENTS[c] }.join\n  end\nend	\N	\N	0	2	2014-08-28 00:41:19	2014-08-28 00:41:19	122	complement.rb	{"complement.rb":"class Complement\\n  DNA_COMPLEMENTS = { 'C' =\\u003e 'G', 'G' =\\u003e 'C', 'T' =\\u003e 'A', 'A' =\\u003e 'U' }\\n  RNA_COMPLEMENTS = DNA_COMPLEMENTS.invert\\n\\n  def self.of_dna(a)\\n    a.chars.map { |c| DNA_COMPLEMENTS[c] }.join\\n  end\\n\\n  def self.of_rna(a)\\n    a.chars.map { |c| RNA_COMPLEMENTS[c] }.join\\n  end\\nend"}
227	41	9b2f67c7de56f00e623caa90	pending	ruby	bob	class Bob\n  RESPONSES = {\n    silence: 'Fine. Be that way!',\n    aggressive: 'Woah, chill out!',\n    interrogative: "Sure."\n  }\n  RESPONSES.default = "Whatever."\n\n  def hey(arg)\n    response_for IncomingStatement.new(arg).type\n  end\n\n  private\n\n    def response_for(statement_type)\n      RESPONSES[statement_type]\n    end\n\n  class IncomingStatement < Struct.new(:statement)\n    INTERACTION_TYPES = %i[silence aggressive interrogative default]\n    def type\n      INTERACTION_TYPES.find { |k| send :"#{k}?"} \n    end\n\n    private\n      def silence?\n        statement.to_s == ''\n      end\n\n      def interrogative?\n        statement =~ /\\?$/\n      end\n\n      def aggressive?\n        statement.upcase == statement\n      end\n\n      def default?\n        true\n      end\n  end\n\nend	\N	\N	0	1	2014-06-02 09:56:29	2014-06-02 09:56:29	123	bob.rb	{"bob.rb":"class Bob\\n  RESPONSES = {\\n    silence: 'Fine. Be that way!',\\n    aggressive: 'Woah, chill out!',\\n    interrogative: \\"Sure.\\"\\n  }\\n  RESPONSES.default = \\"Whatever.\\"\\n\\n  def hey(arg)\\n    response_for IncomingStatement.new(arg).type\\n  end\\n\\n  private\\n\\n    def response_for(statement_type)\\n      RESPONSES[statement_type]\\n    end\\n\\n  class IncomingStatement \\u003c Struct.new(:statement)\\n    INTERACTION_TYPES = %i[silence aggressive interrogative default]\\n    def type\\n      INTERACTION_TYPES.find { |k| send :\\"#{k}?\\"} \\n    end\\n\\n    private\\n      def silence?\\n        statement.to_s == ''\\n      end\\n\\n      def interrogative?\\n        statement =~ /\\\\?$/\\n      end\\n\\n      def aggressive?\\n        statement.upcase == statement\\n      end\\n\\n      def default?\\n        true\\n      end\\n  end\\n\\nend"}
228	41	7c032e2d97674bfaca592186	pending	haskell	accumulate	module Accumulate where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ []\t\t= []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	2	2014-07-25 07:20:47	2014-07-25 07:20:47	124	/haskell/accumulate/Accumulate.hs	{"/haskell/accumulate/Accumulate.hs":"module Accumulate where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ []\\t\\t= []\\naccumulate f (x:xs) = f x : accumulate f xs"}
229	41	6377384d8fae716f645a81db	superseded	haskell	accumulate	module Accumulate where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f l\t= myMap f l []\n\twhere\n\t\tmyMap _ [] nl\t  = nl \n\t\tmyMap f (x:xs) nl = myMap f xs (nl ++ [f x])	\N	\N	0	1	2014-08-18 08:37:03	2014-08-18 08:37:03	124	/haskell/accumulate/Accumulate.hs	{"/haskell/accumulate/Accumulate.hs":"module Accumulate where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f l\\t= myMap f l []\\n\\twhere\\n\\t\\tmyMap _ [] nl\\t  = nl \\n\\t\\tmyMap f (x:xs) nl = myMap f xs (nl ++ [f x])"}
230	41	0c79a60596d017d5da7f4e71	pending	ruby	hamming	class Hamming\n  def self.compute(a,b)\n    ham_no =0\n    i= [a,b].min.size \n    while (i >= 0) \n      if a[i] != b[i]\n        hamming +=1 unless (a[i] ==nil || b[i] ==nil) \n      end\n      i+= -1 \n    end\n    return ham_no  \n  end\nend	\N	\N	0	1	2014-09-05 20:58:05	2014-09-05 20:58:05	125	hamming.rb	{"hamming.rb":"class Hamming\\n  def self.compute(a,b)\\n    ham_no =0\\n    i= [a,b].min.size \\n    while (i \\u003e= 0) \\n      if a[i] != b[i]\\n        hamming +=1 unless (a[i] ==nil || b[i] ==nil) \\n      end\\n      i+= -1 \\n    end\\n    return ham_no  \\n  end\\nend"}
231	41	be149e07efd3b7661a3cb5f4	superseded	ruby	grade-school	require 'set'\n\nclass School\n  def initialize\n    @db = Hash.new{|h,k| h[k] = Set.new}\n  end\n\n  def add(student, year)\n    @db[year].add(student)\n    nil\n  end\n\n  def db\n    Hash[@db.map{|k,v| [k, v.to_a]}]\n  end\n\n  def grade(year)\n    @db[year].to_a\n  end\n\n  def sort\n    Hash[@db.sort.map{|k,v| [k, v.to_a.sort]}]\n  end\nend	\N	\N	0	5	2014-06-25 17:03:09	2014-06-25 17:03:09	126	grade-school.rb	{"grade-school.rb":"require 'set'\\n\\nclass School\\n  def initialize\\n    @db = Hash.new{|h,k| h[k] = Set.new}\\n  end\\n\\n  def add(student, year)\\n    @db[year].add(student)\\n    nil\\n  end\\n\\n  def db\\n    Hash[@db.map{|k,v| [k, v.to_a]}]\\n  end\\n\\n  def grade(year)\\n    @db[year].to_a\\n  end\\n\\n  def sort\\n    Hash[@db.sort.map{|k,v| [k, v.to_a.sort]}]\\n  end\\nend"}
232	41	2e06683544c328471d70b6b1	superseded	ruby	grade-school	require 'set'\n\nclass School\n\tdef initialize\n\t\t@db = Hash.new([])\n\tend\n\n\tdef add(student, year)\n\t\t@db[year] = grade(year).to_set.add(student).to_a\n\tend\n\n\tdef db\n\t\tresult = @db.clone\n\t\tresult.each{|k,v| result[k] = v.clone}\n\tend\n\n\tdef grade(year)\n\t\t@db[year]\n\tend\n\n\tdef sort\n\t\tHash[@db.sort.map{|k,v| [k, v.sort]}]\n\tend\nend	\N	\N	0	3	2014-07-08 01:11:15	2014-07-08 01:11:15	126	grade-school.rb	{"grade-school.rb":"require 'set'\\n\\nclass School\\n\\tdef initialize\\n\\t\\t@db = Hash.new([])\\n\\tend\\n\\n\\tdef add(student, year)\\n\\t\\t@db[year] = grade(year).to_set.add(student).to_a\\n\\tend\\n\\n\\tdef db\\n\\t\\tresult = @db.clone\\n\\t\\tresult.each{|k,v| result[k] = v.clone}\\n\\tend\\n\\n\\tdef grade(year)\\n\\t\\t@db[year]\\n\\tend\\n\\n\\tdef sort\\n\\t\\tHash[@db.sort.map{|k,v| [k, v.sort]}]\\n\\tend\\nend"}
233	41	2c40a4628d8484903eae48a5	superseded	ruby	grade-school	require 'set'\n\nclass School\n\tdef initialize\n\t\t@db = {}\n\tend\n\n\tdef add(student, year)\n\t\t@db[year] = grade(year).to_set.add(student).to_a\n\tend\n\n\tdef db\n\t\t@db\n\tend\n\n\tdef grade(year)\n\t\t@db[year] || []\n\tend\n\n\tdef sort\n\t\tHash[@db.sort.map{|k,v| [k, v.sort]}]\n\tend\nend	\N	\N	0	1	2014-07-08 22:38:22	2014-07-08 22:38:22	126	grade-school.rb	{"grade-school.rb":"require 'set'\\n\\nclass School\\n\\tdef initialize\\n\\t\\t@db = {}\\n\\tend\\n\\n\\tdef add(student, year)\\n\\t\\t@db[year] = grade(year).to_set.add(student).to_a\\n\\tend\\n\\n\\tdef db\\n\\t\\t@db\\n\\tend\\n\\n\\tdef grade(year)\\n\\t\\t@db[year] || []\\n\\tend\\n\\n\\tdef sort\\n\\t\\tHash[@db.sort.map{|k,v| [k, v.sort]}]\\n\\tend\\nend"}
234	41	7f3d9f6b43eb3880d633dc3f	superseded	ruby	grade-school	require 'set'\n\nclass School\n\tdef initialize\n\t\t@db = {}\n\tend\n\n\tdef add(student, year)\n\t\t@db[year] = grade(year).to_set.add(student).to_a\n\tend\n\n\tdef db\n\t\t@db.clone\n\tend\n\n\tdef grade(year)\n\t\t@db[year] || []\n\tend\n\n\tdef sort\n\t\tHash[@db.sort.map{|k,v| [k, v.sort]}]\n\tend\nend	\N	\N	0	2	2014-07-24 16:57:02	2014-07-24 16:57:02	126	grade-school.rb	{"grade-school.rb":"require 'set'\\n\\nclass School\\n\\tdef initialize\\n\\t\\t@db = {}\\n\\tend\\n\\n\\tdef add(student, year)\\n\\t\\t@db[year] = grade(year).to_set.add(student).to_a\\n\\tend\\n\\n\\tdef db\\n\\t\\t@db.clone\\n\\tend\\n\\n\\tdef grade(year)\\n\\t\\t@db[year] || []\\n\\tend\\n\\n\\tdef sort\\n\\t\\tHash[@db.sort.map{|k,v| [k, v.sort]}]\\n\\tend\\nend"}
235	41	164f19a93592757c28a718aa	superseded	ruby	grade-school	require 'set'\n\nclass School\n  def initialize\n    @db = Hash.new{|h,k| h[k] = Set.new}\n  end\n\n  def add(student, year)\n    @db[year].add(student)\n  end\n\n  def db\n    Hash[@db.map{|k,v| [k, v.to_a]}]\n  end\n\n  def grade(year)\n    @db[year].to_a\n  end\n\n  def sort\n    Hash[@db.sort.map{|k,v| [k, v.to_a.sort]}]\n  end\nend	\N	\N	0	4	2014-10-28 02:12:40	2014-10-28 02:12:40	126	grade-school.rb	{"grade-school.rb":"require 'set'\\n\\nclass School\\n  def initialize\\n    @db = Hash.new{|h,k| h[k] = Set.new}\\n  end\\n\\n  def add(student, year)\\n    @db[year].add(student)\\n  end\\n\\n  def db\\n    Hash[@db.map{|k,v| [k, v.to_a]}]\\n  end\\n\\n  def grade(year)\\n    @db[year].to_a\\n  end\\n\\n  def sort\\n    Hash[@db.sort.map{|k,v| [k, v.to_a.sort]}]\\n  end\\nend"}
236	41	358ee0046798368f00fe3a67	superseded	ruby	grade-school	require 'set'\n\nclass School\n  def initialize\n    @db = Hash.new{ |h,k| h[k] = Set.new }\n  end\n\n  def add(student, year)\n    @db[year].add(student)\n    nil\n  end\n\n  def to_hash\n    r = {}\n    @db.keys.sort.each { |y| r[y] = grade(y) }\n    r\n  end\n\n  def grade(year)\n    @db[year].sort\n  end\nend	\N	\N	0	6	2014-11-10 08:48:15	2014-11-10 08:48:15	126	school.rb	{"school.rb":"require 'set'\\n\\nclass School\\n  def initialize\\n    @db = Hash.new{ |h,k| h[k] = Set.new }\\n  end\\n\\n  def add(student, year)\\n    @db[year].add(student)\\n    nil\\n  end\\n\\n  def to_hash\\n    r = {}\\n    @db.keys.sort.each { |y| r[y] = grade(y) }\\n    r\\n  end\\n\\n  def grade(year)\\n    @db[year].sort\\n  end\\nend"}
237	41	af24f4b8c044b4410f7a97dd	pending	ruby	grade-school	require 'set'\n\nclass School\n  def initialize\n    @db = Hash.new{ |h,k| h[k] = Set.new }\n  end\n\n  def add(student, year)\n    @db[year].add(student)\n    nil\n  end\n\n  def to_hash\n    @db.keys.sort.each_with_object({}) { |y,h| h[y] = grade(y) }\n  end\n\n  def grade(year)\n    @db[year].sort\n  end\nend	\N	\N	0	7	2014-12-14 23:06:23	2014-12-14 23:06:23	126	school.rb	{"school.rb":"require 'set'\\n\\nclass School\\n  def initialize\\n    @db = Hash.new{ |h,k| h[k] = Set.new }\\n  end\\n\\n  def add(student, year)\\n    @db[year].add(student)\\n    nil\\n  end\\n\\n  def to_hash\\n    @db.keys.sort.each_with_object({}) { |y,h| h[y] = grade(y) }\\n  end\\n\\n  def grade(year)\\n    @db[year].sort\\n  end\\nend"}
238	41	e8c2d721e7c3c9c7797639f1	superseded	javascript	bob	// Bob is a very functional teenager. He always responds the same way.\nvar hey = function(str) {\n  if(silent(str)) {\n    return 'Fine, be that way!';\n  }\n  else if(loud(str)) {\n    return 'Woah, chill out!';\n  }\n  else if(question(str)) {\n    return 'Sure.';\n  }\n  else {\n    return 'Whatever.'\n  }\n}\n\nvar silent = function(str) {\n  return str == '';\n}\n\nvar loud = function(str) {\n  return str == str.toUpperCase();\n}\n\nvar question = function(str) {\n  return str.charAt(str.length - 1) == '?';\n}\n\nvar Bob = function() {};\nBob.prototype.hey = hey;\n\nmodule.exports = Bob;	\N	\N	0	2	2014-05-27 20:01:00	2014-05-27 20:01:00	127	bob.js	{"bob.js":"// Bob is a very functional teenager. He always responds the same way.\\nvar hey = function(str) {\\n  if(silent(str)) {\\n    return 'Fine, be that way!';\\n  }\\n  else if(loud(str)) {\\n    return 'Woah, chill out!';\\n  }\\n  else if(question(str)) {\\n    return 'Sure.';\\n  }\\n  else {\\n    return 'Whatever.'\\n  }\\n}\\n\\nvar silent = function(str) {\\n  return str == '';\\n}\\n\\nvar loud = function(str) {\\n  return str == str.toUpperCase();\\n}\\n\\nvar question = function(str) {\\n  return str.charAt(str.length - 1) == '?';\\n}\\n\\nvar Bob = function() {};\\nBob.prototype.hey = hey;\\n\\nmodule.exports = Bob;"}
239	41	daf4109b2f30783e34f528d7	superseded	javascript	bob	(function() {\n  "use phraseict";\n\n  // Bob, the functional teenager.\n  var Bob = function() {};\n\n  Bob.prototype.hey = function(phrase) {\n    if(silent(phrase)) {\n      return "Fine, be that way!";\n    }\n    else if(loud(phrase)) {\n      return "Woah, chill out!";\n    }\n    else if(question(phrase)) {\n      return "Sure.";\n    }\n    else {\n      return "Whatever.";\n    }\n  };\n\n  var silent = function(phrase) {\n    return phrase === "";\n  };\n\n  var loud = function(phrase) {\n    return phrase === phrase.toUpperCase();\n  };\n\n  var question = function(phrase) {\n    return phrase.charAt(phrase.length - 1) === "?";\n  };\n\n  module.exports = Bob;\n})();	\N	\N	0	6	2014-06-13 02:56:08	2014-06-13 02:56:08	127	bob.js	{"bob.js":"(function() {\\n  \\"use phraseict\\";\\n\\n  // Bob, the functional teenager.\\n  var Bob = function() {};\\n\\n  Bob.prototype.hey = function(phrase) {\\n    if(silent(phrase)) {\\n      return \\"Fine, be that way!\\";\\n    }\\n    else if(loud(phrase)) {\\n      return \\"Woah, chill out!\\";\\n    }\\n    else if(question(phrase)) {\\n      return \\"Sure.\\";\\n    }\\n    else {\\n      return \\"Whatever.\\";\\n    }\\n  };\\n\\n  var silent = function(phrase) {\\n    return phrase === \\"\\";\\n  };\\n\\n  var loud = function(phrase) {\\n    return phrase === phrase.toUpperCase();\\n  };\\n\\n  var question = function(phrase) {\\n    return phrase.charAt(phrase.length - 1) === \\"?\\";\\n  };\\n\\n  module.exports = Bob;\\n})();"}
240	41	4e29b26cea062e5616c10698	pending	javascript	bob	(function() {\n  "use strict";\n\n  // Bob, the functional teenager.\n  var Bob = function() {};\n\n  Bob.prototype.hey = function(phrase) {\n    if(silent(phrase)) {\n      return "Fine, be that way!";\n    }\n    if(loud(phrase)) {\n      return "Woah, chill out!";\n    }\n    if(question(phrase)) {\n      return "Sure.";\n    }\n    return "Whatever.";\n  };\n\n  var silent = function(phrase) {\n    return phrase === "";\n  };\n\n  var loud = function(phrase) {\n    return phrase === phrase.toUpperCase();\n  };\n\n  var question = function(phrase) {\n    return phrase.charAt(phrase.length - 1) === "?";\n  };\n\n  module.exports = Bob;\n})();	\N	\N	0	9	2014-07-01 09:50:34	2014-07-01 09:50:34	127	bob.js	{"bob.js":"(function() {\\n  \\"use strict\\";\\n\\n  // Bob, the functional teenager.\\n  var Bob = function() {};\\n\\n  Bob.prototype.hey = function(phrase) {\\n    if(silent(phrase)) {\\n      return \\"Fine, be that way!\\";\\n    }\\n    if(loud(phrase)) {\\n      return \\"Woah, chill out!\\";\\n    }\\n    if(question(phrase)) {\\n      return \\"Sure.\\";\\n    }\\n    return \\"Whatever.\\";\\n  };\\n\\n  var silent = function(phrase) {\\n    return phrase === \\"\\";\\n  };\\n\\n  var loud = function(phrase) {\\n    return phrase === phrase.toUpperCase();\\n  };\\n\\n  var question = function(phrase) {\\n    return phrase.charAt(phrase.length - 1) === \\"?\\";\\n  };\\n\\n  module.exports = Bob;\\n})();"}
241	41	a727bfeb9d2002c64a809640	superseded	javascript	bob	var Bob = function() {\n  this.hey = function(str) {\n    if(silent(str)) {\n      return 'Fine, be that way!';\n    }\n    else if(loud(str)) {\n      return 'Woah, chill out!';\n    }\n    else if(question(str)) {\n      return 'Sure.';\n    }\n    else {\n      return 'Whatever.'\n    }\n  }\n\n  var silent = function(str) {\n    return str == '';\n  }\n\n  var loud = function(str) {\n    return str == str.toUpperCase();\n  }\n\n  var question = function(str) {\n    return str.charAt(str.length - 1) == '?';\n  }\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-08-03 22:10:33	2014-08-03 22:10:33	127	bob.js	{"bob.js":"var Bob = function() {\\n  this.hey = function(str) {\\n    if(silent(str)) {\\n      return 'Fine, be that way!';\\n    }\\n    else if(loud(str)) {\\n      return 'Woah, chill out!';\\n    }\\n    else if(question(str)) {\\n      return 'Sure.';\\n    }\\n    else {\\n      return 'Whatever.'\\n    }\\n  }\\n\\n  var silent = function(str) {\\n    return str == '';\\n  }\\n\\n  var loud = function(str) {\\n    return str == str.toUpperCase();\\n  }\\n\\n  var question = function(str) {\\n    return str.charAt(str.length - 1) == '?';\\n  }\\n};\\n\\nmodule.exports = Bob;"}
252	41	c2e8aa7a0028f451cb049558	pending	ruby	trinary	class Trinary\n  def initialize(trinary_string)\n    @trinary_string = trinary_string\n  end\n\n  def to_decimal\n    return 0 unless @trinary_string =~ /^[012]+$/\n    digits = @trinary_string.reverse.split('')\n    digits.map.with_index do |digit, i|\n      digit.to_i * 3**i\n    end.inject(:+)\n  end\nend	\N	\N	0	1	2014-11-18 19:29:24	2014-11-18 19:29:24	131	trinary.rb	{"trinary.rb":"class Trinary\\n  def initialize(trinary_string)\\n    @trinary_string = trinary_string\\n  end\\n\\n  def to_decimal\\n    return 0 unless @trinary_string =~ /^[012]+$/\\n    digits = @trinary_string.reverse.split('')\\n    digits.map.with_index do |digit, i|\\n      digit.to_i * 3**i\\n    end.inject(:+)\\n  end\\nend"}
242	41	61dd69260c7894f9c68a0d95	superseded	javascript	bob	// Bob is a very functional teenager. He always responds the same way.\nvar Bob = function() {};\n\nBob.prototype.hey = function(str) {\n  if(silent(str)) {\n    return 'Fine, be that way!';\n  }\n  else if(loud(str)) {\n    return 'Woah, chill out!';\n  }\n  else if(question(str)) {\n    return 'Sure.';\n  }\n  else {\n    return 'Whatever.';\n  }\n};\n\nvar silent = function(str) {\n  return str === '';\n};\n\nvar loud = function(str) {\n  return str === str.toUpperCase();\n};\n\nvar question = function(str) {\n  return str.charAt(str.length - 1) === '?';\n};\n\nmodule.exports = Bob;	\N	\N	0	3	2014-08-27 22:12:46	2014-08-27 22:12:46	127	bob.js	{"bob.js":"// Bob is a very functional teenager. He always responds the same way.\\nvar Bob = function() {};\\n\\nBob.prototype.hey = function(str) {\\n  if(silent(str)) {\\n    return 'Fine, be that way!';\\n  }\\n  else if(loud(str)) {\\n    return 'Woah, chill out!';\\n  }\\n  else if(question(str)) {\\n    return 'Sure.';\\n  }\\n  else {\\n    return 'Whatever.';\\n  }\\n};\\n\\nvar silent = function(str) {\\n  return str === '';\\n};\\n\\nvar loud = function(str) {\\n  return str === str.toUpperCase();\\n};\\n\\nvar question = function(str) {\\n  return str.charAt(str.length - 1) === '?';\\n};\\n\\nmodule.exports = Bob;"}
243	41	d90a63c9a0bcba376a51dd94	superseded	javascript	bob	// Bob is a very functional teenager. He always responds the same way.\nvar Bob = function() {};\n\nBob.prototype.hey = function(str) {\n  if(silent(str)) {\n    return 'Fine, be that way!';\n  }\n  else if(loud(str)) {\n    return 'Woah, chill out!';\n  }\n  else if(question(str)) {\n    return 'Sure.';\n  }\n  else {\n    return 'Whatever.';\n  }\n};\n\nvar silent = function(str) {\n  return str === '';\n};\n\nvar loud = function(str) {\n  return str === str.toUpperCase();\n};\n\nvar question = function(str) {\n  return str.charAt(str.length - 1) === '?';\n};\n\nmodule.exports = Bob;	\N	\N	0	4	2014-09-11 05:21:20	2014-09-11 05:21:20	127	bob.js	{"bob.js":"// Bob is a very functional teenager. He always responds the same way.\\nvar Bob = function() {};\\n\\nBob.prototype.hey = function(str) {\\n  if(silent(str)) {\\n    return 'Fine, be that way!';\\n  }\\n  else if(loud(str)) {\\n    return 'Woah, chill out!';\\n  }\\n  else if(question(str)) {\\n    return 'Sure.';\\n  }\\n  else {\\n    return 'Whatever.';\\n  }\\n};\\n\\nvar silent = function(str) {\\n  return str === '';\\n};\\n\\nvar loud = function(str) {\\n  return str === str.toUpperCase();\\n};\\n\\nvar question = function(str) {\\n  return str.charAt(str.length - 1) === '?';\\n};\\n\\nmodule.exports = Bob;"}
244	41	fca43f530563852bbd191d81	superseded	javascript	bob	// Bob is a very functional teenager. He always responds the same way.\nvar Bob = function() {};\n\nBob.prototype.hey = function(phrase) {\n  if(silent(phrase)) {\n    return 'Fine, be that way!';\n  }\n  else if(loud(phrase)) {\n    return 'Woah, chill out!';\n  }\n  else if(question(phrase)) {\n    return 'Sure.';\n  }\n  else {\n    return 'Whatever.';\n  }\n};\n\nvar silent = function(phrase) {\n  return phrase === '';\n};\n\nvar loud = function(phrase) {\n  return phrase === str.toUpperCase();\n};\n\nvar question = function(phrase) {\n  return phrase.charAt(str.length - 1) === '?';\n};\n\nmodule.exports = Bob;	\N	\N	0	5	2014-10-18 09:54:45	2014-10-18 09:54:45	127	bob.js	{"bob.js":"// Bob is a very functional teenager. He always responds the same way.\\nvar Bob = function() {};\\n\\nBob.prototype.hey = function(phrase) {\\n  if(silent(phrase)) {\\n    return 'Fine, be that way!';\\n  }\\n  else if(loud(phrase)) {\\n    return 'Woah, chill out!';\\n  }\\n  else if(question(phrase)) {\\n    return 'Sure.';\\n  }\\n  else {\\n    return 'Whatever.';\\n  }\\n};\\n\\nvar silent = function(phrase) {\\n  return phrase === '';\\n};\\n\\nvar loud = function(phrase) {\\n  return phrase === str.toUpperCase();\\n};\\n\\nvar question = function(phrase) {\\n  return phrase.charAt(str.length - 1) === '?';\\n};\\n\\nmodule.exports = Bob;"}
245	41	e3d9b7d22c386f9b70b748aa	superseded	javascript	bob	(function() {\n  "use strict";\n\n  // Bob, the functional teenager.\n  var Bob = function() {};\n\n  Bob.prototype.hey = function(phrase) {\n    if(silent(phrase)) {\n      return "Fine, be that way!";\n    }\n    else if(loud(phrase)) {\n      return "Woah, chill out!";\n    }\n    else if(question(phrase)) {\n      return "Sure.";\n    }\n    else {\n      return "Whatever.";\n    }\n  };\n\n  var silent = function(phrase) {\n    return phrase === "";\n  };\n\n  var loud = function(phrase) {\n    return phrase === phrase.toUpperCase();\n  };\n\n  var question = function(phrase) {\n    return phrase.charAt(phrase.length - 1) === "?";\n  };\n\n  module.exports = Bob;\n})();	\N	\N	0	7	2014-11-29 14:08:45	2014-11-29 14:08:45	127	bob.js	{"bob.js":"(function() {\\n  \\"use strict\\";\\n\\n  // Bob, the functional teenager.\\n  var Bob = function() {};\\n\\n  Bob.prototype.hey = function(phrase) {\\n    if(silent(phrase)) {\\n      return \\"Fine, be that way!\\";\\n    }\\n    else if(loud(phrase)) {\\n      return \\"Woah, chill out!\\";\\n    }\\n    else if(question(phrase)) {\\n      return \\"Sure.\\";\\n    }\\n    else {\\n      return \\"Whatever.\\";\\n    }\\n  };\\n\\n  var silent = function(phrase) {\\n    return phrase === \\"\\";\\n  };\\n\\n  var loud = function(phrase) {\\n    return phrase === phrase.toUpperCase();\\n  };\\n\\n  var question = function(phrase) {\\n    return phrase.charAt(phrase.length - 1) === \\"?\\";\\n  };\\n\\n  module.exports = Bob;\\n})();"}
246	41	0f87e65e6caf9e706d55e4be	superseded	javascript	bob	(function() {\n  "use strict";\n\n  // Bob, the functional teenager.\n  var Bob = function() {};\n\n  Bob.prototype.hey = function(phrase) {\n    if(silent(phrase)) {\n      return "Fine, be that way!";\n    }\n    if(loud(phrase)) {\n      return "Woah, chill out!";\n    }\n    if(question(phrase)) {\n      return "Sure.";\n    }\n    return "Whatever.";\n  };\n\n  var silent = function(phrase) {\n    return phrase === "";\n  };\n\n  var loud = function(phrase) {\n    return phrase === phrase.toUpperCase();\n  };\n\n  var question = function(phrase) {\n    return phrase.charAt(phrase.length - 1) === "?";\n  };\n\n  module.exports = Bob;\n})();	\N	\N	0	8	2014-12-08 06:11:50	2014-12-08 06:11:50	127	bob.js	{"bob.js":"(function() {\\n  \\"use strict\\";\\n\\n  // Bob, the functional teenager.\\n  var Bob = function() {};\\n\\n  Bob.prototype.hey = function(phrase) {\\n    if(silent(phrase)) {\\n      return \\"Fine, be that way!\\";\\n    }\\n    if(loud(phrase)) {\\n      return \\"Woah, chill out!\\";\\n    }\\n    if(question(phrase)) {\\n      return \\"Sure.\\";\\n    }\\n    return \\"Whatever.\\";\\n  };\\n\\n  var silent = function(phrase) {\\n    return phrase === \\"\\";\\n  };\\n\\n  var loud = function(phrase) {\\n    return phrase === phrase.toUpperCase();\\n  };\\n\\n  var question = function(phrase) {\\n    return phrase.charAt(phrase.length - 1) === \\"?\\";\\n  };\\n\\n  module.exports = Bob;\\n})();"}
253	41	efda6ed5fd10982fe8373859	superseded	go	rna-transcription	package strand\n\nconst C rune = 67\nconst G rune = 71\nconst A rune = 65\nconst T rune = 84\n\nfunc ToRna(dna string) (rna string) {\n\tfor _, nucleotide := range dna {\n\t\tswitch nucleotide {\n\t\tcase G:\n\t\t\trna += "C"\n\t\tcase C:\n\t\t\trna += "G"\n\t\tcase T:\n\t\t\trna += "A"\n\t\tcase A:\n\t\t\trna += "U"\n\t\tdefault:\n\t\t\tpanic("uknown nucleotide")\n\t\t}\n\t}\n\treturn\n}	\N	\N	0	1	2014-05-22 13:01:02	2014-05-22 13:01:02	132	rna_transcription.go	{"rna_transcription.go":"package strand\\n\\nconst C rune = 67\\nconst G rune = 71\\nconst A rune = 65\\nconst T rune = 84\\n\\nfunc ToRna(dna string) (rna string) {\\n\\tfor _, nucleotide := range dna {\\n\\t\\tswitch nucleotide {\\n\\t\\tcase G:\\n\\t\\t\\trna += \\"C\\"\\n\\t\\tcase C:\\n\\t\\t\\trna += \\"G\\"\\n\\t\\tcase T:\\n\\t\\t\\trna += \\"A\\"\\n\\t\\tcase A:\\n\\t\\t\\trna += \\"U\\"\\n\\t\\tdefault:\\n\\t\\t\\tpanic(\\"uknown nucleotide\\")\\n\\t\\t}\\n\\t}\\n\\treturn\\n}"}
247	41	09ba87a6c82329c893d7adba	pending	python	beer-song	lyric = [" bottles of beer on the wall, ",\n\t\t\t" bottles of beer.\\n",\n\t\t\t"Take one down and pass it around, ",\n\t\t\t" bottles of beer on the wall.\\n"]\n\ndef verse(n):\n\tn=n\n\tif n>2:\n\t\tp1=str(n)+lyric[0]\n\t\tp2=str(n)+lyric[1]\n\t\tp3=lyric[2]\n\t\tp4=str(n-1)+lyric[3]\n\t\t#print p1+p2+p3+p4\n\t\treturn p1+p2+p3+p4\n\tif n==1 :\n\t\treturn "1 bottle of beer on the wall, 1 bottle of beer.\\n""Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\tif n==0 :\n\t\treturn "No more bottles of beer on the wall, no more bottles of beer.\\n""Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\tif n==2:\n\t\treturn "2 bottles of beer on the wall, 2 bottles of beer.\\n""Take one down and pass it around, 1 bottle of beer on the wall.\\n"\n\ndef song(k,l=0):\n\tif l==0:\n\t\tresult=''\n\t\tfor i in range(k,-1,-1):\n\t\t\tresult +=(verse(i))\n\t\t\tresult +='\\n'\n\t\treturn result\n\telse:\n\t\t#print l\n\t\tresult=''\n\t\tfor i in range(k,l-1,-1):\n\t\t\tresult +=(verse(i))\n\t\t\tresult +='\\n'\n\t\treturn result\n\n\n\t\n\treturn 	\N	\N	0	1	2014-08-31 23:57:29	2014-08-31 23:57:29	128	beer.py	{"beer.py":"lyric = [\\" bottles of beer on the wall, \\",\\n\\t\\t\\t\\" bottles of beer.\\\\n\\",\\n\\t\\t\\t\\"Take one down and pass it around, \\",\\n\\t\\t\\t\\" bottles of beer on the wall.\\\\n\\"]\\n\\ndef verse(n):\\n\\tn=n\\n\\tif n\\u003e2:\\n\\t\\tp1=str(n)+lyric[0]\\n\\t\\tp2=str(n)+lyric[1]\\n\\t\\tp3=lyric[2]\\n\\t\\tp4=str(n-1)+lyric[3]\\n\\t\\t#print p1+p2+p3+p4\\n\\t\\treturn p1+p2+p3+p4\\n\\tif n==1 :\\n\\t\\treturn \\"1 bottle of beer on the wall, 1 bottle of beer.\\\\n\\"\\"Take it down and pass it around, no more bottles of beer on the wall.\\\\n\\"\\n\\tif n==0 :\\n\\t\\treturn \\"No more bottles of beer on the wall, no more bottles of beer.\\\\n\\"\\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n\\tif n==2:\\n\\t\\treturn \\"2 bottles of beer on the wall, 2 bottles of beer.\\\\n\\"\\"Take one down and pass it around, 1 bottle of beer on the wall.\\\\n\\"\\n\\ndef song(k,l=0):\\n\\tif l==0:\\n\\t\\tresult=''\\n\\t\\tfor i in range(k,-1,-1):\\n\\t\\t\\tresult +=(verse(i))\\n\\t\\t\\tresult +='\\\\n'\\n\\t\\treturn result\\n\\telse:\\n\\t\\t#print l\\n\\t\\tresult=''\\n\\t\\tfor i in range(k,l-1,-1):\\n\\t\\t\\tresult +=(verse(i))\\n\\t\\t\\tresult +='\\\\n'\\n\\t\\treturn result\\n\\n\\n\\t\\n\\treturn "}
248	41	162bc1b8f921b96fb0367c15	pending	ruby	secret-handshake	class String\n  def get_digits\n    scan(/\\d/).map(&:to_i).reverse if match(/\\A[01]\\z/) || []\n  end\nend\n\nclass Fixnum\n  def get_digits\n    d = []\n    digits(2) { |i| d.push i }\n    d\n  end\n\n  private\n  def digits(n)\n    unless block_given?\n      return enum_for{__method__}\n    end\n\n    remainder = self\n    while remainder > 0\n      yield remainder % n\n      remainder = remainder / n\n    end\n  end\nend\n\nclass SecretHandshake\n  attr_reader :commands\n\n  COMMANDS = "wink:double blink:close your eyes:jump".split ":"\n\n  def initialize(message)\n    @commands = commands_for message.get_digits \n  end\n\n  private\n  def commands_for(digits)\n    i = 0\n    digits.each_with_object([]) do |digit, command_list|\n      if digit == 1\n        return command_list.reverse if i == 4\n        command_list.push COMMANDS[i] if digit == 1\n      end\n      i += 1\n    end\n  end\nend	\N	\N	0	1	2014-10-07 21:52:29	2014-10-07 21:52:29	129	secret-handshake.rb	{"secret-handshake.rb":"class String\\n  def get_digits\\n    scan(/\\\\d/).map(\\u0026:to_i).reverse if match(/\\\\A[01]\\\\z/) || []\\n  end\\nend\\n\\nclass Fixnum\\n  def get_digits\\n    d = []\\n    digits(2) { |i| d.push i }\\n    d\\n  end\\n\\n  private\\n  def digits(n)\\n    unless block_given?\\n      return enum_for{__method__}\\n    end\\n\\n    remainder = self\\n    while remainder \\u003e 0\\n      yield remainder % n\\n      remainder = remainder / n\\n    end\\n  end\\nend\\n\\nclass SecretHandshake\\n  attr_reader :commands\\n\\n  COMMANDS = \\"wink:double blink:close your eyes:jump\\".split \\":\\"\\n\\n  def initialize(message)\\n    @commands = commands_for message.get_digits \\n  end\\n\\n  private\\n  def commands_for(digits)\\n    i = 0\\n    digits.each_with_object([]) do |digit, command_list|\\n      if digit == 1\\n        return command_list.reverse if i == 4\\n        command_list.push COMMANDS[i] if digit == 1\\n      end\\n      i += 1\\n    end\\n  end\\nend"}
249	41	6216610f184f0b40044e043a	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      test_word = Word.new(test_word)\n      test_word != word && test_word.letters == word.letters\n    end\n  end\n\n  class ValueObject\n    attr_reader :value\n\n    def ==(other)\n      other.value == value\n    end\n  end\n\n  class Word < ValueObject\n    attr_reader :letters\n\n    def initialize(string)\n      @value = string.downcase\n      @letters = Letters.new(value)\n    end\n  end\n\n  class Letters < ValueObject\n    def initialize(string)\n      @value = string.split('').sort\n    end\n  end\nend	\N	\N	0	1	2014-05-16 13:18:06	2014-05-16 13:18:06	130	anagram.rb	{"anagram.rb":"class Anagram\\n  attr_reader :word\\n\\n  def initialize(word)\\n    @word = Word.new(word)\\n  end\\n\\n  def match(list)\\n    list.find_all do |test_word|\\n      test_word = Word.new(test_word)\\n      test_word != word \\u0026\\u0026 test_word.letters == word.letters\\n    end\\n  end\\n\\n  class ValueObject\\n    attr_reader :value\\n\\n    def ==(other)\\n      other.value == value\\n    end\\n  end\\n\\n  class Word \\u003c ValueObject\\n    attr_reader :letters\\n\\n    def initialize(string)\\n      @value = string.downcase\\n      @letters = Letters.new(value)\\n    end\\n  end\\n\\n  class Letters \\u003c ValueObject\\n    def initialize(string)\\n      @value = string.split('').sort\\n    end\\n  end\\nend"}
250	41	a38b4d8b8ad8860abf15b4f8	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      test_word = Word.new(test_word)\n      test_word != word && test_word.letters == word.letters\n    end\n  end\n\n  class ValueObject\n    attr_reader :value\n\n    def ==(other)\n      other.value == value\n    end\n  end\n\n  class Word < ValueObject\n    attr_reader :letters\n\n    def initialize(string)\n      @value = string.downcase\n      @letters = Letters.new(value)\n    end\n  end\n\n  class Letters < ValueObject\n    def initialize(string)\n      @value = string.chars.sort\n    end\n  end\nend	\N	\N	0	2	2014-05-17 00:19:24	2014-05-17 00:19:24	130	anagram.rb	{"anagram.rb":"class Anagram\\n  attr_reader :word\\n\\n  def initialize(word)\\n    @word = Word.new(word)\\n  end\\n\\n  def match(list)\\n    list.find_all do |test_word|\\n      test_word = Word.new(test_word)\\n      test_word != word \\u0026\\u0026 test_word.letters == word.letters\\n    end\\n  end\\n\\n  class ValueObject\\n    attr_reader :value\\n\\n    def ==(other)\\n      other.value == value\\n    end\\n  end\\n\\n  class Word \\u003c ValueObject\\n    attr_reader :letters\\n\\n    def initialize(string)\\n      @value = string.downcase\\n      @letters = Letters.new(value)\\n    end\\n  end\\n\\n  class Letters \\u003c ValueObject\\n    def initialize(string)\\n      @value = string.chars.sort\\n    end\\n  end\\nend"}
251	41	16ebb7502d7c50a2f34f24fb	pending	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(list)\n    list.find_all do |test_word|\n      Word.new(test_word).anagram_of? word\n    end\n  end\n\n  class Word < Struct.new(:value)\n    attr_reader :letters\n\n    def initialize(string)\n      super(string.downcase)\n      @letters = Letters.new(value)\n    end\n\n    def anagram_of?(other)\n      other != self && other.letters == letters\n    end\n  end\n\n  class Letters < Struct.new(:value)\n    def initialize(string)\n      super(string.chars.sort)\n    end\n  end\nend	\N	\N	0	3	2014-05-26 07:47:18	2014-05-26 07:47:18	130	anagram.rb	{"anagram.rb":"class Anagram\\n  attr_reader :word\\n\\n  def initialize(word)\\n    @word = Word.new(word)\\n  end\\n\\n  def match(list)\\n    list.find_all do |test_word|\\n      Word.new(test_word).anagram_of? word\\n    end\\n  end\\n\\n  class Word \\u003c Struct.new(:value)\\n    attr_reader :letters\\n\\n    def initialize(string)\\n      super(string.downcase)\\n      @letters = Letters.new(value)\\n    end\\n\\n    def anagram_of?(other)\\n      other != self \\u0026\\u0026 other.letters == letters\\n    end\\n  end\\n\\n  class Letters \\u003c Struct.new(:value)\\n    def initialize(string)\\n      super(string.chars.sort)\\n    end\\n  end\\nend"}
254	41	714c7607c38d779fa6695635	pending	go	rna-transcription	package strand\n\nconst adenine rune = 65\nconst cytosine rune = 67\nconst guanine rune = 71\nconst thymidine rune = 84\nconst uracil rune = 85\n\nfunc ToRna(dna string) (rna string) {\n\tfor _, nucleotide := range dna {\n\t\tswitch nucleotide {\n\t\tcase guanine:\n\t\t\trna += string(cytosine)\n\t\tcase cytosine:\n\t\t\trna += string(guanine)\n\t\tcase thymidine:\n\t\t\trna += string(adenine)\n\t\tcase adenine:\n\t\t\trna += string(uracil)\n\t\tdefault:\n\t\t\tpanic("uknown nucleotide")\n\t\t}\n\t}\n\treturn\n}	\N	\N	0	4	2014-07-14 07:11:32	2014-07-14 07:11:32	132	rna_transcription.go	{"rna_transcription.go":"package strand\\n\\nconst adenine rune = 65\\nconst cytosine rune = 67\\nconst guanine rune = 71\\nconst thymidine rune = 84\\nconst uracil rune = 85\\n\\nfunc ToRna(dna string) (rna string) {\\n\\tfor _, nucleotide := range dna {\\n\\t\\tswitch nucleotide {\\n\\t\\tcase guanine:\\n\\t\\t\\trna += string(cytosine)\\n\\t\\tcase cytosine:\\n\\t\\t\\trna += string(guanine)\\n\\t\\tcase thymidine:\\n\\t\\t\\trna += string(adenine)\\n\\t\\tcase adenine:\\n\\t\\t\\trna += string(uracil)\\n\\t\\tdefault:\\n\\t\\t\\tpanic(\\"uknown nucleotide\\")\\n\\t\\t}\\n\\t}\\n\\treturn\\n}"}
255	41	44b87feefbbda2e2108d5b5b	superseded	go	rna-transcription	package strand\n\nconst C rune = 67\nconst G rune = 71\nconst A rune = 65\nconst T rune = 84\n\nfunc ToRna(dna string) (rna string) {\n\tfor _, nucleotide := range dna {\n\t\tswitch nucleotide {\n\t\tcase G:\n\t\t\trna += string(C)\n\t\tcase C:\n\t\t\trna += "G"\n\t\tcase T:\n\t\t\trna += "A"\n\t\tcase A:\n\t\t\trna += "U"\n\t\tdefault:\n\t\t\tpanic("uknown nucleotide")\n\t\t}\n\t}\n\treturn\n}	\N	\N	0	2	2014-09-19 22:51:16	2014-09-19 22:51:16	132	rna_transcription.go	{"rna_transcription.go":"package strand\\n\\nconst C rune = 67\\nconst G rune = 71\\nconst A rune = 65\\nconst T rune = 84\\n\\nfunc ToRna(dna string) (rna string) {\\n\\tfor _, nucleotide := range dna {\\n\\t\\tswitch nucleotide {\\n\\t\\tcase G:\\n\\t\\t\\trna += string(C)\\n\\t\\tcase C:\\n\\t\\t\\trna += \\"G\\"\\n\\t\\tcase T:\\n\\t\\t\\trna += \\"A\\"\\n\\t\\tcase A:\\n\\t\\t\\trna += \\"U\\"\\n\\t\\tdefault:\\n\\t\\t\\tpanic(\\"uknown nucleotide\\")\\n\\t\\t}\\n\\t}\\n\\treturn\\n}"}
256	41	c1e1944d9698b3d45600d20d	superseded	go	rna-transcription	package strand\n\nconst adenine rune = 65\nconst cytosine rune = 67\nconst guanine rune = 71\nconst thymidine rune = 84\nconst uracil rune = 85\n\nfunc ToRna(dna string) (rna string) {\n\n\tfor _, nucleotide := range dna {\n\t\tswitch nucleotide {\n\t\tcase guanine:\n\t\t\trna += string(cytosine)\n\t\tcase cytosine:\n\t\t\trna += string(guanine)\n\t\tcase thymidine:\n\t\t\trna += string(adenine)\n\t\tcase adenine:\n\t\t\trna += string(uracil)\n\t\tdefault:\n\t\t\tpanic("uknown nucleotide")\n\t\t}\n\t}\n\treturn\n}	\N	\N	0	3	2014-09-20 07:44:29	2014-09-20 07:44:29	132	rna_transcription.go	{"rna_transcription.go":"package strand\\n\\nconst adenine rune = 65\\nconst cytosine rune = 67\\nconst guanine rune = 71\\nconst thymidine rune = 84\\nconst uracil rune = 85\\n\\nfunc ToRna(dna string) (rna string) {\\n\\n\\tfor _, nucleotide := range dna {\\n\\t\\tswitch nucleotide {\\n\\t\\tcase guanine:\\n\\t\\t\\trna += string(cytosine)\\n\\t\\tcase cytosine:\\n\\t\\t\\trna += string(guanine)\\n\\t\\tcase thymidine:\\n\\t\\t\\trna += string(adenine)\\n\\t\\tcase adenine:\\n\\t\\t\\trna += string(uracil)\\n\\t\\tdefault:\\n\\t\\t\\tpanic(\\"uknown nucleotide\\")\\n\\t\\t}\\n\\t}\\n\\treturn\\n}"}
257	41	1dcb116882a621bee7260868	pending	python	minesweeper	'''exer minesweeper'''\n\nVALID_INPUT = ' *-|+'\nVALID_BORDER_ROW = '-+'\nVALID_BORDER_COL = '|+'\nBOMB = '*'\n\ndef board(brd):\n    '''fill in bomb counts in open spaces and out put board.  guard against\n    invalid input boards'''\n    # convert list of strings, to list of lists\n    brd = [list(row) for row in brd]\n\n    validate_board(brd)\n\n    for row in range(1, len(brd) - 1):\n        for col in range(1, len(brd[0]) - 1):\n            char = brd[row][col]\n            if char not in VALID_INPUT:\n                raise ValueError\n            if char == ' ':\n                bombs = bomb_scan(brd, row, col)\n                if bombs:\n                    brd[row][col] = str(bombs)\n\n    # convert back to list of strings and return\n    return [''.join(row) for row in brd]\n\ndef validate_board(brd):\n    '''make sure border is valid and matrix is not irregular'''\n    # it is a loose validation, I could create inputs that should fail\n    # but wouldn't cause the app to fail.  It's passing the tests so I'm\n    # stopping.\n\n    col_count = len(brd[0])\n    for row in (brd[0], brd[-1]):\n        for char in row:\n            if char not in VALID_BORDER_ROW:\n                raise ValueError\n    for row in brd:\n        if len(row) != col_count:\n            raise ValueError\n        for char in (row[0], row[-1]):\n            if char not in VALID_BORDER_COL:\n                raise ValueError\n\ndef bomb_scan(brd, row, col):\n    '''given a board location, count adjacent bombs'''\n    bcount = 0\n    # row above\n    if brd[row - 1][col - 1] == BOMB:\n        bcount += 1\n    if brd[row - 1][col] == BOMB:\n        bcount += 1\n    if brd[row - 1][col + 1] == BOMB:\n        bcount += 1\n    # right and left same row\n    if brd[row][col - 1] == BOMB:\n        bcount += 1\n    if brd[row][col + 1] == BOMB:\n        bcount += 1\n    # row below\n    if brd[row + 1][col - 1] == BOMB:\n        bcount += 1\n    if brd[row + 1][col] == BOMB:\n        bcount += 1\n    if brd[row + 1][col + 1] == BOMB:\n        bcount += 1\n\n    return bcount	\N	\N	0	1	2014-06-15 06:33:38	2014-06-15 06:33:38	133	minesweeper.py	{"minesweeper.py":"'''exer minesweeper'''\\n\\nVALID_INPUT = ' *-|+'\\nVALID_BORDER_ROW = '-+'\\nVALID_BORDER_COL = '|+'\\nBOMB = '*'\\n\\ndef board(brd):\\n    '''fill in bomb counts in open spaces and out put board.  guard against\\n    invalid input boards'''\\n    # convert list of strings, to list of lists\\n    brd = [list(row) for row in brd]\\n\\n    validate_board(brd)\\n\\n    for row in range(1, len(brd) - 1):\\n        for col in range(1, len(brd[0]) - 1):\\n            char = brd[row][col]\\n            if char not in VALID_INPUT:\\n                raise ValueError\\n            if char == ' ':\\n                bombs = bomb_scan(brd, row, col)\\n                if bombs:\\n                    brd[row][col] = str(bombs)\\n\\n    # convert back to list of strings and return\\n    return [''.join(row) for row in brd]\\n\\ndef validate_board(brd):\\n    '''make sure border is valid and matrix is not irregular'''\\n    # it is a loose validation, I could create inputs that should fail\\n    # but wouldn't cause the app to fail.  It's passing the tests so I'm\\n    # stopping.\\n\\n    col_count = len(brd[0])\\n    for row in (brd[0], brd[-1]):\\n        for char in row:\\n            if char not in VALID_BORDER_ROW:\\n                raise ValueError\\n    for row in brd:\\n        if len(row) != col_count:\\n            raise ValueError\\n        for char in (row[0], row[-1]):\\n            if char not in VALID_BORDER_COL:\\n                raise ValueError\\n\\ndef bomb_scan(brd, row, col):\\n    '''given a board location, count adjacent bombs'''\\n    bcount = 0\\n    # row above\\n    if brd[row - 1][col - 1] == BOMB:\\n        bcount += 1\\n    if brd[row - 1][col] == BOMB:\\n        bcount += 1\\n    if brd[row - 1][col + 1] == BOMB:\\n        bcount += 1\\n    # right and left same row\\n    if brd[row][col - 1] == BOMB:\\n        bcount += 1\\n    if brd[row][col + 1] == BOMB:\\n        bcount += 1\\n    # row below\\n    if brd[row + 1][col - 1] == BOMB:\\n        bcount += 1\\n    if brd[row + 1][col] == BOMB:\\n        bcount += 1\\n    if brd[row + 1][col + 1] == BOMB:\\n        bcount += 1\\n\\n    return bcount"}
258	41	bdd3e4388a850cf851593990	pending	haskell	leap	module LeapYear (isLeapYear) where \n\tisLeapYear :: Int -> Bool\n\tisLeapYear y | y `mod` 100 == 0 = y `mod` 400 == 0 \n\t\t\t     | otherwise \t\t= y `mod` 4 == 0	\N	\N	0	2	2014-06-24 15:31:00	2014-06-24 15:31:00	134	LeapYear.hs	{"LeapYear.hs":"module LeapYear (isLeapYear) where \\n\\tisLeapYear :: Int -\\u003e Bool\\n\\tisLeapYear y | y `mod` 100 == 0 = y `mod` 400 == 0 \\n\\t\\t\\t     | otherwise \\t\\t= y `mod` 4 == 0"}
259	41	cb1c352b5c3bcf94607f6aab	superseded	haskell	leap	module LeapYear (isLeapYear) where \n\tisLeapYear y | y `mod` 100 == 0 = y `mod` 400 == 0 \n\t\t\t     | otherwise \t\t= y `mod` 4 == 0	\N	\N	0	1	2014-09-03 05:51:04	2014-09-03 05:51:04	134	LeapYear.hs	{"LeapYear.hs":"module LeapYear (isLeapYear) where \\n\\tisLeapYear y | y `mod` 100 == 0 = y `mod` 400 == 0 \\n\\t\\t\\t     | otherwise \\t\\t= y `mod` 4 == 0"}
260	41	7a7f3c2bc973dd070ae000a5	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n\n  def initialize(input)\n    @strand = input.split(//)\n  end\n\n  def count(nucleotide)\n    validate_nucleotide nucleotide\n    strand.select { |n| n == nucleotide }.count\n  end\n\n  def nucleotide_counts\n    nucleotides_in_dna.each_with_object(Hash.new(0)) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def nucleotides_in_dna\n    %w( A T C G )\n  end\n\n  def valid_nucleotides\n    nucleotides_in_dna + ['U']\n  end\n\n  def validate_nucleotide(nucleotide)\n    unless valid_nucleotides.include?(nucleotide)\n      raise ArgumentError.new("'#{ nucleotide }' is not a valid nucleotide")\n    end\n  end\nend	\N	\N	0	1	2014-05-21 06:30:50	2014-05-21 06:30:50	135	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  attr_reader :strand\\n\\n  def initialize(input)\\n    @strand = input.split(//)\\n  end\\n\\n  def count(nucleotide)\\n    validate_nucleotide nucleotide\\n    strand.select { |n| n == nucleotide }.count\\n  end\\n\\n  def nucleotide_counts\\n    nucleotides_in_dna.each_with_object(Hash.new(0)) do |nucleotide, counts|\\n      counts[nucleotide] = count(nucleotide)\\n    end\\n  end\\n\\n  def nucleotides_in_dna\\n    %w( A T C G )\\n  end\\n\\n  def valid_nucleotides\\n    nucleotides_in_dna + ['U']\\n  end\\n\\n  def validate_nucleotide(nucleotide)\\n    unless valid_nucleotides.include?(nucleotide)\\n      raise ArgumentError.new(\\"'#{ nucleotide }' is not a valid nucleotide\\")\\n    end\\n  end\\nend"}
261	41	b92930393538c65236918470	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n\n  def initialize(input)\n    @strand = input.chars\n  end\n\n  def count(nucleotide)\n    validate_nucleotide nucleotide\n    strand.count { |n| n == nucleotide }\n  end\n\n  def nucleotide_counts\n    nucleotides_in_dna.each_with_object({}) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def nucleotides_in_dna\n    %w( A T C G )\n  end\n\n  def valid_nucleotides\n    nucleotides_in_dna + ['U']\n  end\n\n  def validate_nucleotide(nucleotide)\n    unless valid_nucleotides.include?(nucleotide)\n      raise ArgumentError.new("'#{ nucleotide }' is not a valid nucleotide")\n    end\n  end\nend	\N	\N	0	2	2014-07-25 13:03:51	2014-07-25 13:03:51	135	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  attr_reader :strand\\n\\n  def initialize(input)\\n    @strand = input.chars\\n  end\\n\\n  def count(nucleotide)\\n    validate_nucleotide nucleotide\\n    strand.count { |n| n == nucleotide }\\n  end\\n\\n  def nucleotide_counts\\n    nucleotides_in_dna.each_with_object({}) do |nucleotide, counts|\\n      counts[nucleotide] = count(nucleotide)\\n    end\\n  end\\n\\n  def nucleotides_in_dna\\n    %w( A T C G )\\n  end\\n\\n  def valid_nucleotides\\n    nucleotides_in_dna + ['U']\\n  end\\n\\n  def validate_nucleotide(nucleotide)\\n    unless valid_nucleotides.include?(nucleotide)\\n      raise ArgumentError.new(\\"'#{ nucleotide }' is not a valid nucleotide\\")\\n    end\\n  end\\nend"}
262	41	86612381613d4771a1b29884	pending	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n\n  def initialize(input)\n    @strand = input.chars\n  end\n\n  def count(nucleotide)\n    validate_nucleotide nucleotide\n    strand.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    nucleotides_in_dna.each_with_object({}) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def nucleotides_in_dna\n    %w( A T C G )\n  end\n\n  def valid_nucleotides\n    nucleotides_in_dna + ['U']\n  end\n\n  def validate_nucleotide(nucleotide)\n    unless valid_nucleotides.include?(nucleotide)\n      raise ArgumentError.new("'#{ nucleotide }' is not a valid nucleotide")\n    end\n  end\nend	\N	\N	0	3	2014-08-14 09:47:55	2014-08-14 09:47:55	135	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  attr_reader :strand\\n\\n  def initialize(input)\\n    @strand = input.chars\\n  end\\n\\n  def count(nucleotide)\\n    validate_nucleotide nucleotide\\n    strand.count(nucleotide)\\n  end\\n\\n  def nucleotide_counts\\n    nucleotides_in_dna.each_with_object({}) do |nucleotide, counts|\\n      counts[nucleotide] = count(nucleotide)\\n    end\\n  end\\n\\n  def nucleotides_in_dna\\n    %w( A T C G )\\n  end\\n\\n  def valid_nucleotides\\n    nucleotides_in_dna + ['U']\\n  end\\n\\n  def validate_nucleotide(nucleotide)\\n    unless valid_nucleotides.include?(nucleotide)\\n      raise ArgumentError.new(\\"'#{ nucleotide }' is not a valid nucleotide\\")\\n    end\\n  end\\nend"}
263	41	1bbb9cf907b46af4323ea440	pending	python	grains	""" Calculates how many grains are on a square in a chessboard, and the total grains up to that square """\ndef on_square(n):\n    return 2 ** (n-1)\n\ndef total_after(n):\n    if n == 0:\n        return n\n    else:\n        return on_square(n) + total_after(n-1)	\N	\N	0	1	2014-08-18 01:23:28	2014-08-18 01:23:28	136	grains.py	{"grains.py":"\\"\\"\\" Calculates how many grains are on a square in a chessboard, and the total grains up to that square \\"\\"\\"\\ndef on_square(n):\\n    return 2 ** (n-1)\\n\\ndef total_after(n):\\n    if n == 0:\\n        return n\\n    else:\\n        return on_square(n) + total_after(n-1)"}
264	41	dbac50d402cdf85d17734e5a	pending	ruby	clock	class Clock\n  def initialize(time)\n    @time = time\n  end\n  attr_accessor :time\n\n  def self.at(hour, minute=0)\n    Clock.new(Time.new 0, 1, 1, hour, minute)\n  end\n\n  def to_s\n    "%02d:%02d" % [ @time.hour, @time.min ]\n  end\n\n  def +(mins)\n    self.class.new(@time + mins * 60)\n  end\n\n  def -(mins)\n    self + (mins * -1)\n  end\n\n  def ==(clock)\n    to_s == clock.to_s\n  end\nend	\N	\N	0	1	2014-10-22 11:51:09	2014-10-22 11:51:09	137	clock.rb	{"clock.rb":"class Clock\\n  def initialize(time)\\n    @time = time\\n  end\\n  attr_accessor :time\\n\\n  def self.at(hour, minute=0)\\n    Clock.new(Time.new 0, 1, 1, hour, minute)\\n  end\\n\\n  def to_s\\n    \\"%02d:%02d\\" % [ @time.hour, @time.min ]\\n  end\\n\\n  def +(mins)\\n    self.class.new(@time + mins * 60)\\n  end\\n\\n  def -(mins)\\n    self + (mins * -1)\\n  end\\n\\n  def ==(clock)\\n    to_s == clock.to_s\\n  end\\nend"}
265	6	1a2e5adce0a0cf0cb154585f	pending	python	rna-transcription	class DNA(object):\r\n\r\n    def __init__(self, dna_strand):\r\n        self.dna_strand = dna_strand\r\n\r\n    def to_rna(self):\r\n        rna_strand = ''\r\n        for nucleotide in self.dna_strand:\r\n            if nucleotide.upper() in 'CGUA':\r\n                rna_strand += nucleotide.upper()\r\n            elif nucleotide.upper() == 'T':\r\n                rna_strand += 'U'\r\n        return rna_strand\r	\N	\N	0	1	2014-10-12 01:34:10	2014-10-12 01:34:10	138	rna-transcription.py	{"rna-transcription.py":"class DNA(object):\\r\\n\\r\\n    def __init__(self, dna_strand):\\r\\n        self.dna_strand = dna_strand\\r\\n\\r\\n    def to_rna(self):\\r\\n        rna_strand = ''\\r\\n        for nucleotide in self.dna_strand:\\r\\n            if nucleotide.upper() in 'CGUA':\\r\\n                rna_strand += nucleotide.upper()\\r\\n            elif nucleotide.upper() == 'T':\\r\\n                rna_strand += 'U'\\r\\n        return rna_strand\\r"}
266	6	4b0422a3ae99cce1669ba5ac	pending	haskell	sublist	module Sublist\n    ( Sublist(..)\n    , sublist\n    ) where\n\nimport Data.List (isInfixOf)\n\ndata Sublist = Sublist\n             | Superlist\n             | Equal\n             | Unequal\n             deriving (Show, Eq)\n\nsublist :: Eq a => [a] -> [a] -> Sublist\nsublist as bs \n    | as `isInfixOf` bs && bs `isInfixOf` as = Equal\n    | as `isInfixOf` bs = Sublist\n    | bs `isInfixOf` as = Superlist\n    | otherwise = Unequal	\N	\N	0	1	2014-12-02 08:41:39	2014-12-02 08:41:39	139	Sublist.hs	{"Sublist.hs":"module Sublist\\n    ( Sublist(..)\\n    , sublist\\n    ) where\\n\\nimport Data.List (isInfixOf)\\n\\ndata Sublist = Sublist\\n             | Superlist\\n             | Equal\\n             | Unequal\\n             deriving (Show, Eq)\\n\\nsublist :: Eq a =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist as bs \\n    | as `isInfixOf` bs \\u0026\\u0026 bs `isInfixOf` as = Equal\\n    | as `isInfixOf` bs = Sublist\\n    | bs `isInfixOf` as = Superlist\\n    | otherwise = Unequal"}
267	34	10fdb0f21a6f8a404d1ed8b9	superseded	csharp	hamming	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic class Hamming\r\n{\r\n    public static int Compute(string strand1, string strand2)\r\n    {\r\n        if (string.IsNullOrEmpty(strand1) || string.IsNullOrEmpty(strand2))\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        int count = 0;\r\n        \r\n        for(int i = 0; i < strand1.Length && i < strand2.Length; i++)\r\n        {\r\n            if (strand1[i] != strand2[i])\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n}\r	\N	\N	0	1	2015-01-14 21:19:54	2015-01-14 21:19:54	140	Hamming.cs	{"Hamming.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\npublic class Hamming\\r\\n{\\r\\n    public static int Compute(string strand1, string strand2)\\r\\n    {\\r\\n        if (string.IsNullOrEmpty(strand1) || string.IsNullOrEmpty(strand2))\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        int count = 0;\\r\\n        \\r\\n        for(int i = 0; i \\u003c strand1.Length \\u0026\\u0026 i \\u003c strand2.Length; i++)\\r\\n        {\\r\\n            if (strand1[i] != strand2[i])\\r\\n                count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n}\\r"}
268	34	43553b56242143a52904365e	superseded	csharp	hamming	﻿using System;\r\n\r\n\r\npublic class Hamming\r\n{\r\n    public static int Compute(string strand1, string strand2)\r\n    {\r\n        if (string.IsNullOrEmpty(strand1) || string.IsNullOrEmpty(strand2))\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        int count = 0;\r\n        \r\n        for(int i = 0; i < strand1.Length && i < strand2.Length; i++)\r\n        {\r\n            if (strand1[i] != strand2[i])\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n}\r	\N	\N	0	2	2015-01-15 19:47:05	2015-01-15 19:47:05	140	Hamming.cs	{"Hamming.cs":"﻿using System;\\r\\n\\r\\n\\r\\npublic class Hamming\\r\\n{\\r\\n    public static int Compute(string strand1, string strand2)\\r\\n    {\\r\\n        if (string.IsNullOrEmpty(strand1) || string.IsNullOrEmpty(strand2))\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        int count = 0;\\r\\n        \\r\\n        for(int i = 0; i \\u003c strand1.Length \\u0026\\u0026 i \\u003c strand2.Length; i++)\\r\\n        {\\r\\n            if (strand1[i] != strand2[i])\\r\\n                count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n}\\r"}
269	34	0073a84760ee201f7fb187ea	pending	csharp	hamming	﻿using System;\r\n\r\n\r\npublic class Hamming\r\n{\r\n    public static int Compute(string strand1, string strand2)\r\n    {\r\n        if (strand1 == null) throw new ArgumentNullException("Strand 1");\r\n        if (strand2 == null) throw new ArgumentNullException("Strand 2");\r\n\r\n        if(strand1.Trim().Length != strand2.Trim().Length)\r\n        {\r\n            throw new ArgumentException("Arguments not of equal length. Can not compute Hamming distance");\r\n        }\r\n\r\n        int count = 0;\r\n        \r\n        for(int i = 0; i < strand1.Length && i < strand2.Length; i++)\r\n        {\r\n            if (strand1[i] != strand2[i])\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n}\r	\N	\N	0	3	2015-01-15 22:33:26	2015-01-15 22:33:26	140	Hamming.cs	{"Hamming.cs":"﻿using System;\\r\\n\\r\\n\\r\\npublic class Hamming\\r\\n{\\r\\n    public static int Compute(string strand1, string strand2)\\r\\n    {\\r\\n        if (strand1 == null) throw new ArgumentNullException(\\"Strand 1\\");\\r\\n        if (strand2 == null) throw new ArgumentNullException(\\"Strand 2\\");\\r\\n\\r\\n        if(strand1.Trim().Length != strand2.Trim().Length)\\r\\n        {\\r\\n            throw new ArgumentException(\\"Arguments not of equal length. Can not compute Hamming distance\\");\\r\\n        }\\r\\n\\r\\n        int count = 0;\\r\\n        \\r\\n        for(int i = 0; i \\u003c strand1.Length \\u0026\\u0026 i \\u003c strand2.Length; i++)\\r\\n        {\\r\\n            if (strand1[i] != strand2[i])\\r\\n                count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n}\\r"}
270	16	b5ceb31de3be77235e527be7	superseded	python	meetup	import calendar\n\ndef meetup_day(year_, month_, weekday_, weekNumber_):\n    weekNumber = dict(zip('last 1st 2nd 3rd 4th'.split(), range(-1,4)))\n    dayOfWeek = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),\n                         range(7))) \n    listOfDays = []\n    \n    cal = calendar.Calendar().monthdatescalendar(year_, month_) \n    \n    for x in range(len(cal)):\n        for y in range(len(cal[x])):\n            if cal[x][y].weekday() == dayOfWeek[weekday_.lower()] and cal[x][y].month == month_:\n                listOfDays.append(cal[x][y])\n    \n    if weekNumber_.lower() == 'teenth':\n        for x in listOfDays:\n            if x.day >=13 and x.day <=19:\n                return x\n    \n    return listOfDays[weekNumber[weekNumber_]]\n    \nmeetup_day(2012, 6, 'Monday', '1st')	\N	\N	0	1	2014-06-06 09:12:18	2014-06-06 09:12:18	141	meetup.py	{"meetup.py":"import calendar\\n\\ndef meetup_day(year_, month_, weekday_, weekNumber_):\\n    weekNumber = dict(zip('last 1st 2nd 3rd 4th'.split(), range(-1,4)))\\n    dayOfWeek = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),\\n                         range(7))) \\n    listOfDays = []\\n    \\n    cal = calendar.Calendar().monthdatescalendar(year_, month_) \\n    \\n    for x in range(len(cal)):\\n        for y in range(len(cal[x])):\\n            if cal[x][y].weekday() == dayOfWeek[weekday_.lower()] and cal[x][y].month == month_:\\n                listOfDays.append(cal[x][y])\\n    \\n    if weekNumber_.lower() == 'teenth':\\n        for x in listOfDays:\\n            if x.day \\u003e=13 and x.day \\u003c=19:\\n                return x\\n    \\n    return listOfDays[weekNumber[weekNumber_]]\\n    \\nmeetup_day(2012, 6, 'Monday', '1st')"}
271	16	92bdf929244e3df1b2d2b5b7	superseded	python	meetup	import calendar\n\ndef meetup_day(year_, month_, weekday_, weekNumber_):\n    weekNumber = dict(zip('last 1st 2nd 3rd 4th'.split(), range(-1,4)))\n    dayOfWeek = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),\n                         range(7))) \n    \n    listOfDays = [x for x in calendar.Calendar().itermonthdates(year_, month_) \n           if x.month == month_ and x.weekday() == dayOfWeek[weekday_.lower()]\n    ]  \n    \n    if weekNumber_.lower() == 'teenth':\n        for x in listOfDays:\n            if x.day >=13 and x.day <=19:\n                return x\n            \n    return listOfDays[weekNumber[weekNumber_]]	\N	\N	0	2	2014-07-30 18:32:05	2014-07-30 18:32:05	141	meetup.py	{"meetup.py":"import calendar\\n\\ndef meetup_day(year_, month_, weekday_, weekNumber_):\\n    weekNumber = dict(zip('last 1st 2nd 3rd 4th'.split(), range(-1,4)))\\n    dayOfWeek = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),\\n                         range(7))) \\n    \\n    listOfDays = [x for x in calendar.Calendar().itermonthdates(year_, month_) \\n           if x.month == month_ and x.weekday() == dayOfWeek[weekday_.lower()]\\n    ]  \\n    \\n    if weekNumber_.lower() == 'teenth':\\n        for x in listOfDays:\\n            if x.day \\u003e=13 and x.day \\u003c=19:\\n                return x\\n            \\n    return listOfDays[weekNumber[weekNumber_]]"}
272	16	33be0ca9d4afb133e285331f	pending	python	meetup	import calendar\n\ndef meetup_day(year_, month_, weekday_, weekNumber_):\n    weekNumber = dict(zip('last 1st 2nd 3rd 4th'.split(), range(-1,4)))\n    dayOfWeek = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),\n                         range(7))) \n    \n    listOfDays = [x for x in calendar.Calendar().itermonthdates(year_, month_) \n           if x.month == month_ and x.weekday() == dayOfWeek[weekday_.lower()]\n    ]  \n    \n    if weekNumber_.lower() == 'teenth':\n        for x in listOfDays:\n            if 13<= x.day <=19:\n                return x\n            \n    return listOfDays[weekNumber[weekNumber_]]	\N	\N	0	3	2014-08-09 16:28:29	2014-08-09 16:28:29	141	meetup.py	{"meetup.py":"import calendar\\n\\ndef meetup_day(year_, month_, weekday_, weekNumber_):\\n    weekNumber = dict(zip('last 1st 2nd 3rd 4th'.split(), range(-1,4)))\\n    dayOfWeek = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),\\n                         range(7))) \\n    \\n    listOfDays = [x for x in calendar.Calendar().itermonthdates(year_, month_) \\n           if x.month == month_ and x.weekday() == dayOfWeek[weekday_.lower()]\\n    ]  \\n    \\n    if weekNumber_.lower() == 'teenth':\\n        for x in listOfDays:\\n            if 13\\u003c= x.day \\u003c=19:\\n                return x\\n            \\n    return listOfDays[weekNumber[weekNumber_]]"}
273	16	162d5f3f8f9810dc6d9bd2f1	superseded	haskell	phone-number	module Phone\n( areaCode,\n  number,\n  prettyPrint\n) where\n\nimport Data.Char\nimport Text.Printf\n\nprettyPrint :: String -> String\nprettyPrint string = printf "(%s) %s-%s" (areaCode numberString) (middleSplit numberString) (remainderSplit numberString)\n  where numberString = number string\n        middleSplit = firstSplitNumbers . remainderSplitNumbers\n        remainderSplit = remainderSplitNumbers . remainderSplitNumbers\n        firstSplitNumbers = firstSplitAt 3\n        remainderSplitNumbers = remainderSplitAt 3\n\nfirstSplitAt :: Int -> String -> String\nfirstSplitAt at string = fst $ splitAt at string\n\nremainderSplitAt :: Int -> String -> String\nremainderSplitAt at string = snd $ splitAt at string\n\nareaCode :: String -> String\nareaCode string = take 3 $ number string\n\nnumber :: String -> String\nnumber string\n  | length filteredString < 10 = zeroString\n  | length filteredString == 11 = internationalNumber filteredString\n  | otherwise = filteredString\n  where internationalNumber string' = if head string' == '1' then tail string' else zeroString\n        filteredString = filter isDigit string\n        zeroString = replicate 10 '0'	\N	\N	0	2	2014-08-08 05:31:45	2014-08-08 05:31:45	142	Phone.hs	{"Phone.hs":"module Phone\\n( areaCode,\\n  number,\\n  prettyPrint\\n) where\\n\\nimport Data.Char\\nimport Text.Printf\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint string = printf \\"(%s) %s-%s\\" (areaCode numberString) (middleSplit numberString) (remainderSplit numberString)\\n  where numberString = number string\\n        middleSplit = firstSplitNumbers . remainderSplitNumbers\\n        remainderSplit = remainderSplitNumbers . remainderSplitNumbers\\n        firstSplitNumbers = firstSplitAt 3\\n        remainderSplitNumbers = remainderSplitAt 3\\n\\nfirstSplitAt :: Int -\\u003e String -\\u003e String\\nfirstSplitAt at string = fst $ splitAt at string\\n\\nremainderSplitAt :: Int -\\u003e String -\\u003e String\\nremainderSplitAt at string = snd $ splitAt at string\\n\\nareaCode :: String -\\u003e String\\nareaCode string = take 3 $ number string\\n\\nnumber :: String -\\u003e String\\nnumber string\\n  | length filteredString \\u003c 10 = zeroString\\n  | length filteredString == 11 = internationalNumber filteredString\\n  | otherwise = filteredString\\n  where internationalNumber string' = if head string' == '1' then tail string' else zeroString\\n        filteredString = filter isDigit string\\n        zeroString = replicate 10 '0'"}
274	16	0d9c063202e2842b9af16b2e	superseded	haskell	phone-number	module Phone\n( areaCode,\n  number,\n  prettyPrint\n) where\n\nimport Data.Char\n\nprettyPrint :: String -> String\nprettyPrint string = unwords [surroundAreaCode numberString, remainder' numberString]\n  where numberString = number string\n        remainder' string' = middleSplit string' ++ "-" ++ remainderSplit string'\n        middleSplit = firstSplitNumbers . remainderSplitNumbers\n        remainderSplit = remainderSplitNumbers . remainderSplitNumbers\n        firstSplitNumbers = firstSplitAt 3\n        remainderSplitNumbers = remainderSplitAt 3\n\nfirstSplitAt :: Int -> String -> String\nfirstSplitAt at string = fst $ splitAt at string\n\nremainderSplitAt :: Int -> String -> String\nremainderSplitAt at string = snd $ splitAt at string\n\nareaCode :: String -> String\nareaCode string = take 3 $ number string\n\nsurroundAreaCode :: String -> String\nsurroundAreaCode string = '(' : areaCode string ++ ")"\n\nnumber :: String -> String\nnumber string\n  | length filteredString < 10 = zeroString\n  | length filteredString == 11 = internationalNumber filteredString\n  | otherwise = filteredString\n  where internationalNumber string' = if head string' == '1' then tail string' else zeroString\n        filteredString = filter isDigit string\n        zeroString = replicate 10 '0'	\N	\N	0	1	2014-11-05 00:16:10	2014-11-05 00:16:10	142	Phone.hs	{"Phone.hs":"module Phone\\n( areaCode,\\n  number,\\n  prettyPrint\\n) where\\n\\nimport Data.Char\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint string = unwords [surroundAreaCode numberString, remainder' numberString]\\n  where numberString = number string\\n        remainder' string' = middleSplit string' ++ \\"-\\" ++ remainderSplit string'\\n        middleSplit = firstSplitNumbers . remainderSplitNumbers\\n        remainderSplit = remainderSplitNumbers . remainderSplitNumbers\\n        firstSplitNumbers = firstSplitAt 3\\n        remainderSplitNumbers = remainderSplitAt 3\\n\\nfirstSplitAt :: Int -\\u003e String -\\u003e String\\nfirstSplitAt at string = fst $ splitAt at string\\n\\nremainderSplitAt :: Int -\\u003e String -\\u003e String\\nremainderSplitAt at string = snd $ splitAt at string\\n\\nareaCode :: String -\\u003e String\\nareaCode string = take 3 $ number string\\n\\nsurroundAreaCode :: String -\\u003e String\\nsurroundAreaCode string = '(' : areaCode string ++ \\")\\"\\n\\nnumber :: String -\\u003e String\\nnumber string\\n  | length filteredString \\u003c 10 = zeroString\\n  | length filteredString == 11 = internationalNumber filteredString\\n  | otherwise = filteredString\\n  where internationalNumber string' = if head string' == '1' then tail string' else zeroString\\n        filteredString = filter isDigit string\\n        zeroString = replicate 10 '0'"}
275	16	cb44b298ebc31c0c2fbe09e4	pending	haskell	phone-number	module Phone\n( areaCode,\n  number,\n  prettyPrint\n) where\n\nimport Data.Char\nimport Data.List.Split\nimport Text.Printf\n\nprettyPrint :: String -> String\nprettyPrint string = printf "(%s) %s-%s" (areaCode digits) (splitDigits !! 1) (splitDigits !! 2)\n  where digits = number string\n        splitDigits = splitPlaces [3,3,4::Int] digits\n\nareaCode :: String -> String\nareaCode string = take 3 $ number string\n\nnumber :: String -> String\nnumber string\n  | length filteredString < 10 = zeroString\n  | length filteredString == 11 = internationalNumber filteredString\n  | otherwise = filteredString\n  where internationalNumber string' = if head string' == '1' then tail string' else zeroString\n        filteredString = filter isDigit string\n        zeroString = replicate 10 '0'	\N	\N	0	3	2014-12-15 13:48:38	2014-12-15 13:48:38	142	Phone.hs	{"Phone.hs":"module Phone\\n( areaCode,\\n  number,\\n  prettyPrint\\n) where\\n\\nimport Data.Char\\nimport Data.List.Split\\nimport Text.Printf\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint string = printf \\"(%s) %s-%s\\" (areaCode digits) (splitDigits !! 1) (splitDigits !! 2)\\n  where digits = number string\\n        splitDigits = splitPlaces [3,3,4::Int] digits\\n\\nareaCode :: String -\\u003e String\\nareaCode string = take 3 $ number string\\n\\nnumber :: String -\\u003e String\\nnumber string\\n  | length filteredString \\u003c 10 = zeroString\\n  | length filteredString == 11 = internationalNumber filteredString\\n  | otherwise = filteredString\\n  where internationalNumber string' = if head string' == '1' then tail string' else zeroString\\n        filteredString = filter isDigit string\\n        zeroString = replicate 10 '0'"}
276	16	edfb6a4284769c7bd9f21cc0	pending	lua	hamming	-- Iterator helper\r\nlocal function char_iter(a, b)\r\n    local i = 0;\r\n    local n = math.min(#a, #b);\r\n    return function()\r\n        i = i + 1\r\n        if i <= n then \r\n            return a:sub(i,i), b:sub(i,i)\r\n        end\r\n    end\r\nend\r\n\r\nreturn {\r\n    compute = function(a, b)\r\n        local dist = 0\r\n        for char_a, char_b in char_iter(a,b) do\r\n            if char_a ~= char_b then\r\n                dist = dist + 1\r\n            end\r\n        end\r\n        return dist\r\n    end\r\n}\r	\N	\N	0	1	2014-04-27 19:41:43	2014-04-27 19:41:43	143	hamming.lua	{"hamming.lua":"-- Iterator helper\\r\\nlocal function char_iter(a, b)\\r\\n    local i = 0;\\r\\n    local n = math.min(#a, #b);\\r\\n    return function()\\r\\n        i = i + 1\\r\\n        if i \\u003c= n then \\r\\n            return a:sub(i,i), b:sub(i,i)\\r\\n        end\\r\\n    end\\r\\nend\\r\\n\\r\\nreturn {\\r\\n    compute = function(a, b)\\r\\n        local dist = 0\\r\\n        for char_a, char_b in char_iter(a,b) do\\r\\n            if char_a ~= char_b then\\r\\n                dist = dist + 1\\r\\n            end\\r\\n        end\\r\\n        return dist\\r\\n    end\\r\\n}\\r"}
277	16	56509080bb8bb6ac8f20dd51	pending	clojure	prime-factors	(ns prime-factors)\n\n(defn divides?\n  "Does divisor divide dividend evenly?"\n  [dividend divisor]\n  (zero? (rem dividend divisor)))\n\n(defn factors\n  "Returns first n factors of p."\n  [n p]\n  (take n (filter #(divides? p %) (range 2 p))))\n\n(defn of\n  [number]\n  (let [facts (factors 1 number)]\n    (cond\n      (= number 1)   []\n      (empty? facts) [number]\n      :else          (flatten [facts (of (/ number (first facts)))]))))	\N	\N	0	2	2014-08-27 05:49:41	2014-08-27 05:49:41	144	prime_factors.clj	{"prime_factors.clj":"(ns prime-factors)\\n\\n(defn divides?\\n  \\"Does divisor divide dividend evenly?\\"\\n  [dividend divisor]\\n  (zero? (rem dividend divisor)))\\n\\n(defn factors\\n  \\"Returns first n factors of p.\\"\\n  [n p]\\n  (take n (filter #(divides? p %) (range 2 p))))\\n\\n(defn of\\n  [number]\\n  (let [facts (factors 1 number)]\\n    (cond\\n      (= number 1)   []\\n      (empty? facts) [number]\\n      :else          (flatten [facts (of (/ number (first facts)))]))))"}
278	16	7f2f2d646be90619be899161	superseded	clojure	prime-factors	(use '[leiningen.exec :only (deps)])\n(deps '[[org.clojure/math.numeric-tower "0.0.4"]])\n\n(ns prime-factors\n  (require [clojure.math.numeric-tower :as Math]))\n\n(defn divides?\n  "Does divisor divide dividend evenly?"\n  [dividend divisor]\n  (zero? (rem dividend divisor)))\n\n(defn factors\n  "Returns first n factors of p."\n  [n p]\n  (take n (filter #(divides? p %) (range 2 p))))\n\n(defn of\n  [number]\n  (let [facts (factors 1 number)]\n    (cond\n      (= number 1)  []\n      (= facts '()) [number]\n      :else         (flatten [facts (of (/ number (first facts)))]))))	\N	\N	0	1	2014-11-12 06:33:03	2014-11-12 06:33:03	144	prime_factors.clj	{"prime_factors.clj":"(use '[leiningen.exec :only (deps)])\\n(deps '[[org.clojure/math.numeric-tower \\"0.0.4\\"]])\\n\\n(ns prime-factors\\n  (require [clojure.math.numeric-tower :as Math]))\\n\\n(defn divides?\\n  \\"Does divisor divide dividend evenly?\\"\\n  [dividend divisor]\\n  (zero? (rem dividend divisor)))\\n\\n(defn factors\\n  \\"Returns first n factors of p.\\"\\n  [n p]\\n  (take n (filter #(divides? p %) (range 2 p))))\\n\\n(defn of\\n  [number]\\n  (let [facts (factors 1 number)]\\n    (cond\\n      (= number 1)  []\\n      (= facts '()) [number]\\n      :else         (flatten [facts (of (/ number (first facts)))]))))"}
279	18	8a683cf4968f578b9305754c	pending	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(possible_matches)\n    possible_matches.select do |possible_match|\n      possible_match.chars.sort == @word.chars.sort\n    end\n  end\n\nend	\N	\N	0	1	2014-10-10 00:24:19	2014-10-10 00:24:19	145	anagram.rb	{"anagram.rb":"class Anagram\\n\\n  def initialize(word)\\n    @word = word\\n  end\\n\\n  def match(possible_matches)\\n    possible_matches.select do |possible_match|\\n      possible_match.chars.sort == @word.chars.sort\\n    end\\n  end\\n\\nend"}
280	18	989f7fc9693b0947c1c13846	pending	coffeescript	bob	class Bob\n    hey: (message) ->\n        message = message.replace /^\\s+|\\s+$/g, ""\n        if not message\n            return "Fine. Be that way!"\n        if message.toUpperCase() is message\n            return "Woah, chill out!"\n        if message.charAt(message.length - 1) is "?"\n            return "Sure."\n        return "Whatever."\n\nmodule.exports = Bob	\N	\N	0	1	2014-07-09 17:52:58	2014-07-09 17:52:58	146	bob.coffee	{"bob.coffee":"class Bob\\n    hey: (message) -\\u003e\\n        message = message.replace /^\\\\s+|\\\\s+$/g, \\"\\"\\n        if not message\\n            return \\"Fine. Be that way!\\"\\n        if message.toUpperCase() is message\\n            return \\"Woah, chill out!\\"\\n        if message.charAt(message.length - 1) is \\"?\\"\\n            return \\"Sure.\\"\\n        return \\"Whatever.\\"\\n\\nmodule.exports = Bob"}
281	18	83edf4ff5ee5e6944c0a6c60	pending	python	bob	﻿def hey(input = ''):\n    """\n    A kind buddy to chat with. Input some string. He'll anwser something smart\n    """\n    input2 = input.strip()\n    \n    if input2 == '':\n        return 'Fine. Be that way!'\n    \n    isQuestion = (input2[-1] == '?')\n    isCapital = input2.isupper()\n    \n    if isCapital:\n        return 'Whoa, chill out!'\n    elif isQuestion:\n        return  'Sure.'\n    else:\n        return 'Whatever.'\n        \nif __name__ == '__main__':\n    pass	\N	\N	0	1	2014-10-11 19:06:48	2014-10-11 19:06:48	147	bob.py	{"bob.py":"﻿def hey(input = ''):\\n    \\"\\"\\"\\n    A kind buddy to chat with. Input some string. He'll anwser something smart\\n    \\"\\"\\"\\n    input2 = input.strip()\\n    \\n    if input2 == '':\\n        return 'Fine. Be that way!'\\n    \\n    isQuestion = (input2[-1] == '?')\\n    isCapital = input2.isupper()\\n    \\n    if isCapital:\\n        return 'Whoa, chill out!'\\n    elif isQuestion:\\n        return  'Sure.'\\n    else:\\n        return 'Whatever.'\\n        \\nif __name__ == '__main__':\\n    pass"}
282	24	ac70c0248b538c7a00b829a6	superseded	haskell	sum-of-multiples	module SumOfMultiples\n(\n   sumOfMultiples\n , sumOfMultiplesDefault\n) where\n\nisMultiples :: [Integer] -> Integer -> Bool\nisMultiples xs i = not (null [x | x <- xs, i `rem` x == 0])\n\nsumOfMultiples :: [Integer] -> Integer -> Integer\nsumOfMultiples ms x = sum $ filter (isMultiples ms) [1..x-1]\n\nsumOfMultiplesDefault :: Integer -> Integer\nsumOfMultiplesDefault = sumOfMultiples [3, 5]	\N	\N	0	1	2014-07-29 09:10:39	2014-07-29 09:10:39	148	SumOfMultiples.hs	{"SumOfMultiples.hs":"module SumOfMultiples\\n(\\n   sumOfMultiples\\n , sumOfMultiplesDefault\\n) where\\n\\nisMultiples :: [Integer] -\\u003e Integer -\\u003e Bool\\nisMultiples xs i = not (null [x | x \\u003c- xs, i `rem` x == 0])\\n\\nsumOfMultiples :: [Integer] -\\u003e Integer -\\u003e Integer\\nsumOfMultiples ms x = sum $ filter (isMultiples ms) [1..x-1]\\n\\nsumOfMultiplesDefault :: Integer -\\u003e Integer\\nsumOfMultiplesDefault = sumOfMultiples [3, 5]"}
283	24	411a6a3352a4df53ae79a99c	pending	haskell	sum-of-multiples	module SumOfMultiples\n(\n   sumOfMultiples\n , sumOfMultiplesDefault\n) where\n\nisMultiples :: [Integer] -> Integer -> Bool\nisMultiples xs i = any ((0==) . rem i) xs\n\nsumOfMultiples :: [Integer] -> Integer -> Integer\nsumOfMultiples ms x = sum $ filter (isMultiples ms) [1..x-1]\n\nsumOfMultiplesDefault :: Integer -> Integer\nsumOfMultiplesDefault = sumOfMultiples [3, 5]	\N	\N	0	2	2014-11-02 17:50:41	2014-11-02 17:50:41	148	SumOfMultiples.hs	{"SumOfMultiples.hs":"module SumOfMultiples\\n(\\n   sumOfMultiples\\n , sumOfMultiplesDefault\\n) where\\n\\nisMultiples :: [Integer] -\\u003e Integer -\\u003e Bool\\nisMultiples xs i = any ((0==) . rem i) xs\\n\\nsumOfMultiples :: [Integer] -\\u003e Integer -\\u003e Integer\\nsumOfMultiples ms x = sum $ filter (isMultiples ms) [1..x-1]\\n\\nsumOfMultiplesDefault :: Integer -\\u003e Integer\\nsumOfMultiplesDefault = sumOfMultiples [3, 5]"}
284	24	1ff223117c196783761db853	superseded	python	bob	class Bob(object):\n\n\tdef hey(self, message):\n\t\tif message == None or message.strip() == '':\n\t\t\treturn 'Fine. Be that way!'\n\t\telif message.upper() in message:\n\t\t\treturn 'Woah, chill out!'\n\t\telif message[-1:] == '?':\n\t\t\treturn 'Sure.'\n\t\treturn 'Whatever.'	\N	\N	0	1	2014-07-22 19:43:47	2014-07-22 19:43:47	149	bob.py	{"bob.py":"class Bob(object):\\n\\n\\tdef hey(self, message):\\n\\t\\tif message == None or message.strip() == '':\\n\\t\\t\\treturn 'Fine. Be that way!'\\n\\t\\telif message.upper() in message:\\n\\t\\t\\treturn 'Woah, chill out!'\\n\\t\\telif message[-1:] == '?':\\n\\t\\t\\treturn 'Sure.'\\n\\t\\treturn 'Whatever.'"}
285	24	9370349c68852a395530f85f	pending	python	bob	class Bob(object):\n\n\tdef hey(self, message):\n\t\tif message == None or message.strip() == '':\n\t\t\treturn 'Fine. Be that way!'\n\t\telif message.isupper():\n\t\t\treturn 'Woah, chill out!'\n\t\telif message[-1:] == '?':\n\t\t\treturn 'Sure.'\n\t\treturn 'Whatever.'	\N	\N	0	2	2014-10-04 08:27:33	2014-10-04 08:27:33	149	bob.py	{"bob.py":"class Bob(object):\\n\\n\\tdef hey(self, message):\\n\\t\\tif message == None or message.strip() == '':\\n\\t\\t\\treturn 'Fine. Be that way!'\\n\\t\\telif message.isupper():\\n\\t\\t\\treturn 'Woah, chill out!'\\n\\t\\telif message[-1:] == '?':\\n\\t\\t\\treturn 'Sure.'\\n\\t\\treturn 'Whatever.'"}
286	24	1b0639f47779057972dc5c13	pending	javascript	prime-factors	var primeFactors = {\n\tfor: function(num){\n\t\tif (num===1) return [];  // silly first condition\n\t\tvar primeArray =[];\n\t\t\n\t\tvar factorize = function(num){    // use recursion for factorization\n\t\t\tvar isPrime = true;\n\t\t\tvar i=2;\n\t\t\twhile ((num/2 >= i)&&isPrime){  \n\t\t\t\tif (num%i === 0){\n\t\t\t\t\tisPrime = false;\n\t\t\t\t\tfactorize(i);\n\t\t\t\t\tfactorize(num/i);\n\t\t\t\t} else i++\n\t\t\t}\n\t\t\tif (isPrime) { primeArray.push(num); };\n\t\t};\n\t\t\n\t\tfactorize(num);\n\t\treturn primeArray.sort(function(a,b){return a-b});\n\t}\n}	\N	\N	0	1	2014-08-17 04:57:00	2014-08-17 04:57:00	150	prime-factors.js	{"prime-factors.js":"var primeFactors = {\\n\\tfor: function(num){\\n\\t\\tif (num===1) return [];  // silly first condition\\n\\t\\tvar primeArray =[];\\n\\t\\t\\n\\t\\tvar factorize = function(num){    // use recursion for factorization\\n\\t\\t\\tvar isPrime = true;\\n\\t\\t\\tvar i=2;\\n\\t\\t\\twhile ((num/2 \\u003e= i)\\u0026\\u0026isPrime){  \\n\\t\\t\\t\\tif (num%i === 0){\\n\\t\\t\\t\\t\\tisPrime = false;\\n\\t\\t\\t\\t\\tfactorize(i);\\n\\t\\t\\t\\t\\tfactorize(num/i);\\n\\t\\t\\t\\t} else i++\\n\\t\\t\\t}\\n\\t\\t\\tif (isPrime) { primeArray.push(num); };\\n\\t\\t};\\n\\t\\t\\n\\t\\tfactorize(num);\\n\\t\\treturn primeArray.sort(function(a,b){return a-b});\\n\\t}\\n}"}
287	24	d8f906d246505905b5f057cd	pending	clojure	anagram	(ns anagram (:require [clojure.string :as str]))\r\n(defn- is-anagram? "Checks if two words are anagrams"\r\n  [^String x ^String y]\r\n  (let [a (str/lower-case x)\r\n        b (str/lower-case y)]\r\n    (when (not= a b)\r\n      (= (frequencies a) (frequencies b)))))\r\n(defn anagrams-for "Returns the items that are anagrams of x in col."\r\n  [x col] (filter #(is-anagram? x %) col))	\N	\N	0	1	2014-07-31 23:24:38	2014-07-31 23:24:38	151	anagram.clj	{"anagram.clj":"(ns anagram (:require [clojure.string :as str]))\\r\\n(defn- is-anagram? \\"Checks if two words are anagrams\\"\\r\\n  [^String x ^String y]\\r\\n  (let [a (str/lower-case x)\\r\\n        b (str/lower-case y)]\\r\\n    (when (not= a b)\\r\\n      (= (frequencies a) (frequencies b)))))\\r\\n(defn anagrams-for \\"Returns the items that are anagrams of x in col.\\"\\r\\n  [x col] (filter #(is-anagram? x %) col))"}
288	24	88b2034146e2795f43f51b30	pending	python	roman-numerals	translate = {\r\n             0: '',\r\n             1: 'I',\r\n             5: 'V',\r\n             10: 'X',\r\n             50: 'L',\r\n             100: 'C',\r\n             500: 'D',\r\n             1000: 'M'\r\n             }\r\n \r\ndef digit(digit, pos):\r\n\tdigit = int(digit)\r\n\tpow = 10 ** pos\r\n\tif digit % 5 == 4:\r\n\t\treturn translate[pow] + translate[pow * (digit+1)]\r\n\telse:\r\n\t\tfirst = translate[0 if digit < 5 else 5 * pow]\r\n\t\treturn first + translate[pow] * (digit % 5)\r\n\t\t\r\ndef numeral(arabic):\r\n\ttext = '%04d' % (arabic)\r\n\treturn ''.join([digit(text[i], 3-i) for i in range(4)])\r	\N	\N	0	1	2014-07-24 17:52:06	2014-07-24 17:52:06	152	roman.py	{"roman.py":"translate = {\\r\\n             0: '',\\r\\n             1: 'I',\\r\\n             5: 'V',\\r\\n             10: 'X',\\r\\n             50: 'L',\\r\\n             100: 'C',\\r\\n             500: 'D',\\r\\n             1000: 'M'\\r\\n             }\\r\\n \\r\\ndef digit(digit, pos):\\r\\n\\tdigit = int(digit)\\r\\n\\tpow = 10 ** pos\\r\\n\\tif digit % 5 == 4:\\r\\n\\t\\treturn translate[pow] + translate[pow * (digit+1)]\\r\\n\\telse:\\r\\n\\t\\tfirst = translate[0 if digit \\u003c 5 else 5 * pow]\\r\\n\\t\\treturn first + translate[pow] * (digit % 5)\\r\\n\\t\\t\\r\\ndef numeral(arabic):\\r\\n\\ttext = '%04d' % (arabic)\\r\\n\\treturn ''.join([digit(text[i], 3-i) for i in range(4)])\\r"}
289	42	6c51bef25da9c5744a83a9af	superseded	haskell	space-age	{-\nEarth: orbital period 365.25 Earth days, or 31557600 seconds\nMercury: orbital period 0.2408467 Earth years\nVenus: orbital period 0.61519726 Earth years\nMars: orbital period 1.8808158 Earth years\nJupiter: orbital period 11.862615 Earth years\nSaturn: orbital period 29.447498 Earth years\nUranus: orbital period 84.016846 Earth years\nNeptune: orbital period 164.79132 Earth years\n-}\nmodule SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune\n\nageOn :: Fractional a => Planet -> a -> a\nageOn Earth   s = s / earthYear\nageOn Mercury s = s / (earthYear * 0.2408467)\nageOn Venus   s = s / (earthYear * 0.61519726)\nageOn Mars    s = s / (earthYear * 1.8808158)\nageOn Jupiter s = s / (earthYear * 11.862615)\nageOn Saturn  s = s / (earthYear * 29.447498)\nageOn Uranus  s = s / (earthYear * 84.016846)\nageOn Neptune s = s / (earthYear * 164.79132)\n\nearthYear :: Num a => a\nearthYear = 31557600	\N	\N	0	1	2015-01-05 15:48:15	2015-01-05 15:48:15	153	SpaceAge.hs	{"SpaceAge.hs":"{-\\nEarth: orbital period 365.25 Earth days, or 31557600 seconds\\nMercury: orbital period 0.2408467 Earth years\\nVenus: orbital period 0.61519726 Earth years\\nMars: orbital period 1.8808158 Earth years\\nJupiter: orbital period 11.862615 Earth years\\nSaturn: orbital period 29.447498 Earth years\\nUranus: orbital period 84.016846 Earth years\\nNeptune: orbital period 164.79132 Earth years\\n-}\\nmodule SpaceAge (Planet(..), ageOn) where\\n\\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune\\n\\nageOn :: Fractional a =\\u003e Planet -\\u003e a -\\u003e a\\nageOn Earth   s = s / earthYear\\nageOn Mercury s = s / (earthYear * 0.2408467)\\nageOn Venus   s = s / (earthYear * 0.61519726)\\nageOn Mars    s = s / (earthYear * 1.8808158)\\nageOn Jupiter s = s / (earthYear * 11.862615)\\nageOn Saturn  s = s / (earthYear * 29.447498)\\nageOn Uranus  s = s / (earthYear * 84.016846)\\nageOn Neptune s = s / (earthYear * 164.79132)\\n\\nearthYear :: Num a =\\u003e a\\nearthYear = 31557600"}
290	42	c5a31c4f28594f6b98f576d9	superseded	haskell	space-age	{-\nEarth: orbital period 365.25 Earth days, or 31557600 seconds\nMercury: orbital period 0.2408467 Earth years\nVenus: orbital period 0.61519726 Earth years\nMars: orbital period 1.8808158 Earth years\nJupiter: orbital period 11.862615 Earth years\nSaturn: orbital period 29.447498 Earth years\nUranus: orbital period 84.016846 Earth years\nNeptune: orbital period 164.79132 Earth years\n-}\nmodule SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune\n\nageOn :: Fractional a => Planet -> a -> a\nageOn p = flip (/) (earthYear * getConversion p)\n\n-- Seconds in earth year\nearthYear :: Num a => a\nearthYear = 31557600\n\ngetConversion :: Fractional a => Planet -> a\ngetConversion p = case p of Earth   -> 1\n                            Mercury -> 0.2408467\n                            Venus   -> 0.61519726\n                            Mars    -> 1.8808158\n                            Jupiter -> 11.862615\n                            Saturn  -> 29.447498\n                            Uranus  -> 84.016846\n                            Neptune -> 164.79132	\N	\N	0	2	2015-01-05 20:13:24	2015-01-05 20:13:24	153	SpaceAge.hs	{"SpaceAge.hs":"{-\\nEarth: orbital period 365.25 Earth days, or 31557600 seconds\\nMercury: orbital period 0.2408467 Earth years\\nVenus: orbital period 0.61519726 Earth years\\nMars: orbital period 1.8808158 Earth years\\nJupiter: orbital period 11.862615 Earth years\\nSaturn: orbital period 29.447498 Earth years\\nUranus: orbital period 84.016846 Earth years\\nNeptune: orbital period 164.79132 Earth years\\n-}\\nmodule SpaceAge (Planet(..), ageOn) where\\n\\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune\\n\\nageOn :: Fractional a =\\u003e Planet -\\u003e a -\\u003e a\\nageOn p = flip (/) (earthYear * getConversion p)\\n\\n-- Seconds in earth year\\nearthYear :: Num a =\\u003e a\\nearthYear = 31557600\\n\\ngetConversion :: Fractional a =\\u003e Planet -\\u003e a\\ngetConversion p = case p of Earth   -\\u003e 1\\n                            Mercury -\\u003e 0.2408467\\n                            Venus   -\\u003e 0.61519726\\n                            Mars    -\\u003e 1.8808158\\n                            Jupiter -\\u003e 11.862615\\n                            Saturn  -\\u003e 29.447498\\n                            Uranus  -\\u003e 84.016846\\n                            Neptune -\\u003e 164.79132"}
308	45	cf9c4c5c7a6af030627e9b79	pending	elixir	bob	defmodule Teenager do\n  alias String, as: S\n  def hey(input) do\n    cond do\n      S.match?(input, ~r/^\\s*$/u)\n        -> "Fine. Be that way!"\n\n      "?" == S.last(input)\n        -> "Sure."\n\n      input == S.upcase(input) and\n      S.match?(input, ~r/\\p{L}/u)\n        -> "Whoa, chill out!"\n\n      true\n        -> "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-11-24 07:51:38	2014-11-24 07:51:38	162	/elixir/bob/bob.exs	{"/elixir/bob/bob.exs":"defmodule Teenager do\\n  alias String, as: S\\n  def hey(input) do\\n    cond do\\n      S.match?(input, ~r/^\\\\s*$/u)\\n        -\\u003e \\"Fine. Be that way!\\"\\n\\n      \\"?\\" == S.last(input)\\n        -\\u003e \\"Sure.\\"\\n\\n      input == S.upcase(input) and\\n      S.match?(input, ~r/\\\\p{L}/u)\\n        -\\u003e \\"Whoa, chill out!\\"\\n\\n      true\\n        -\\u003e \\"Whatever.\\"\\n    end\\n  end\\nend"}
291	42	7c819f75994fa30a3bf52e7f	pending	haskell	space-age	{-\nOrbital periods:\nEarth: 31557600 seconds\nMercury: 0.2408467 Earth years\nVenus: 0.61519726 Earth years\nMars: 1.8808158 Earth years\nJupiter: 11.862615 Earth years\nSaturn: 29.447498 Earth years\nUranus: 84.016846 Earth years\nNeptune: 164.79132 Earth years\n-}\nmodule SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Earth \n            | Mercury \n            | Venus \n            | Mars \n            | Jupiter \n            | Saturn \n            | Uranus \n            | Neptune\n\nageOn :: Fractional a => Planet -> a -> a\nageOn p = flip (/) (earthYear * getConversion p)\n\n-- Seconds in earth year\nearthYear :: Num a => a\nearthYear = 31557600\n\ngetConversion :: Fractional a => Planet -> a\ngetConversion p = case p of\n        Earth   -> 1\n        Mercury -> 0.2408467\n        Venus   -> 0.61519726\n        Mars    -> 1.8808158\n        Jupiter -> 11.862615\n        Saturn  -> 29.447498\n        Uranus  -> 84.016846\n        Neptune -> 164.79132	\N	\N	0	3	2015-01-10 15:11:37	2015-01-10 15:11:37	153	SpaceAge.hs	{"SpaceAge.hs":"{-\\nOrbital periods:\\nEarth: 31557600 seconds\\nMercury: 0.2408467 Earth years\\nVenus: 0.61519726 Earth years\\nMars: 1.8808158 Earth years\\nJupiter: 11.862615 Earth years\\nSaturn: 29.447498 Earth years\\nUranus: 84.016846 Earth years\\nNeptune: 164.79132 Earth years\\n-}\\nmodule SpaceAge (Planet(..), ageOn) where\\n\\ndata Planet = Earth \\n            | Mercury \\n            | Venus \\n            | Mars \\n            | Jupiter \\n            | Saturn \\n            | Uranus \\n            | Neptune\\n\\nageOn :: Fractional a =\\u003e Planet -\\u003e a -\\u003e a\\nageOn p = flip (/) (earthYear * getConversion p)\\n\\n-- Seconds in earth year\\nearthYear :: Num a =\\u003e a\\nearthYear = 31557600\\n\\ngetConversion :: Fractional a =\\u003e Planet -\\u003e a\\ngetConversion p = case p of\\n        Earth   -\\u003e 1\\n        Mercury -\\u003e 0.2408467\\n        Venus   -\\u003e 0.61519726\\n        Mars    -\\u003e 1.8808158\\n        Jupiter -\\u003e 11.862615\\n        Saturn  -\\u003e 29.447498\\n        Uranus  -\\u003e 84.016846\\n        Neptune -\\u003e 164.79132"}
292	27	7ce49ac9776a45a09a371d63	pending	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExercismCSharp\r\n{\r\n    public class Year\r\n    {\r\n        public static Boolean IsLeap(int year)\r\n        {\r\n            if (year % 400 == 0)\r\n            {\r\n                return true;\r\n            }\r\n            else if (year % 100 == 0)\r\n            {\r\n                return false;\r\n            }\r\n            else if (year % 4 == 0)\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-11-01 04:13:01	2014-11-01 04:13:01	154	Year.cs	{"Year.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace ExercismCSharp\\r\\n{\\r\\n    public class Year\\r\\n    {\\r\\n        public static Boolean IsLeap(int year)\\r\\n        {\\r\\n            if (year % 400 == 0)\\r\\n            {\\r\\n                return true;\\r\\n            }\\r\\n            else if (year % 100 == 0)\\r\\n            {\\r\\n                return false;\\r\\n            }\\r\\n            else if (year % 4 == 0)\\r\\n            {\\r\\n                return true;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r"}
293	27	fef0ae576db0836a816b1398	superseded	csharp	twelve-days	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Exercism_TwelveDays\r\n{\r\n    public class TwelveDaysSong\r\n    {\r\n        private readonly List<string> _days = new List<string>\r\n        {\r\n            "first", "second", "third", "fourth",\r\n            "fifth", "sixth", "seventh", "eighth",\r\n            "ninth", "tenth", "eleventh", "twelfth"\r\n        };\r\n\r\n        private readonly List<string> _gifts = new List<string>\r\n        {\r\n            "a Partridge in a Pear Tree.\\n",\r\n            "two Turtle Doves, ",\r\n            "three French Hens, ",\r\n            "four Calling Birds, ",\r\n            "five Gold Rings, ",\r\n            "six Geese-a-Laying, ",\r\n            "seven Swans-a-Swimming, ",\r\n            "eight Maids-a-Milking, ",\r\n            "nine Ladies Dancing, ",\r\n            "ten Lords-a-Leaping, ",\r\n            "eleven Pipers Piping, ",\r\n            "twelve Drummers Drumming, "\r\n        };\r\n\r\n        private readonly string[] _verse = new string[2]\r\n        {\r\n            "On the ", " day of Christmas my true love gave to me, "\r\n        };\r\n\r\n        public string Verse(int verseNum)\r\n        {\r\n            StringBuilder thisVerse = new StringBuilder();\r\n            thisVerse.Append(_verse[0] + _days[verseNum - 1] + _verse[1]);\r\n\r\n            for (int i = verseNum - 1; i >= 0; i--)\r\n            {\r\n                thisVerse.Append(i != 0 || verseNum == 1 ? _gifts[i] : "and " + _gifts[i]);                \r\n            }\r\n\r\n            return thisVerse.ToString();\r\n        }\r\n\r\n        public string Verses(int start, int end)\r\n        {\r\n            StringBuilder verses = new StringBuilder();\r\n\r\n            for (int i = start; i <= end; i++)\r\n            {\r\n                verses.Append(this.Verse(i) + "\\n");\r\n            }\r\n\r\n            return verses.ToString();\r\n        }\r\n\r\n        public string Sing()\r\n        {\r\n            return this.Verses(1, 12);            \r\n        }\r\n \r\n    }\r\n}\r	\N	\N	0	1	2014-07-09 23:31:35	2014-07-09 23:31:35	155	TwelveDaysSong.cs	{"TwelveDaysSong.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace Exercism_TwelveDays\\r\\n{\\r\\n    public class TwelveDaysSong\\r\\n    {\\r\\n        private readonly List\\u003cstring\\u003e _days = new List\\u003cstring\\u003e\\r\\n        {\\r\\n            \\"first\\", \\"second\\", \\"third\\", \\"fourth\\",\\r\\n            \\"fifth\\", \\"sixth\\", \\"seventh\\", \\"eighth\\",\\r\\n            \\"ninth\\", \\"tenth\\", \\"eleventh\\", \\"twelfth\\"\\r\\n        };\\r\\n\\r\\n        private readonly List\\u003cstring\\u003e _gifts = new List\\u003cstring\\u003e\\r\\n        {\\r\\n            \\"a Partridge in a Pear Tree.\\\\n\\",\\r\\n            \\"two Turtle Doves, \\",\\r\\n            \\"three French Hens, \\",\\r\\n            \\"four Calling Birds, \\",\\r\\n            \\"five Gold Rings, \\",\\r\\n            \\"six Geese-a-Laying, \\",\\r\\n            \\"seven Swans-a-Swimming, \\",\\r\\n            \\"eight Maids-a-Milking, \\",\\r\\n            \\"nine Ladies Dancing, \\",\\r\\n            \\"ten Lords-a-Leaping, \\",\\r\\n            \\"eleven Pipers Piping, \\",\\r\\n            \\"twelve Drummers Drumming, \\"\\r\\n        };\\r\\n\\r\\n        private readonly string[] _verse = new string[2]\\r\\n        {\\r\\n            \\"On the \\", \\" day of Christmas my true love gave to me, \\"\\r\\n        };\\r\\n\\r\\n        public string Verse(int verseNum)\\r\\n        {\\r\\n            StringBuilder thisVerse = new StringBuilder();\\r\\n            thisVerse.Append(_verse[0] + _days[verseNum - 1] + _verse[1]);\\r\\n\\r\\n            for (int i = verseNum - 1; i \\u003e= 0; i--)\\r\\n            {\\r\\n                thisVerse.Append(i != 0 || verseNum == 1 ? _gifts[i] : \\"and \\" + _gifts[i]);                \\r\\n            }\\r\\n\\r\\n            return thisVerse.ToString();\\r\\n        }\\r\\n\\r\\n        public string Verses(int start, int end)\\r\\n        {\\r\\n            StringBuilder verses = new StringBuilder();\\r\\n\\r\\n            for (int i = start; i \\u003c= end; i++)\\r\\n            {\\r\\n                verses.Append(this.Verse(i) + \\"\\\\n\\");\\r\\n            }\\r\\n\\r\\n            return verses.ToString();\\r\\n        }\\r\\n\\r\\n        public string Sing()\\r\\n        {\\r\\n            return this.Verses(1, 12);            \\r\\n        }\\r\\n \\r\\n    }\\r\\n}\\r"}
294	27	c834a81323cba0ba71aea239	pending	csharp	twelve-days	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Exercism_TwelveDays\r\n{\r\n    public class TwelveDaysSong\r\n    {\r\n        private readonly Dictionary<string, string> _daysAndGifts = new Dictionary<string, string>\r\n        {\r\n            {"first", "a Partridge in a Pear Tree.\\n"},\r\n            {"second", "two Turtle Doves, "},\r\n            {"third", "three French Hens, "},\r\n            {"fourth", "four Calling Birds, "},\r\n            {"fifth", "five Gold Rings, "},\r\n            {"sixth", "six Geese-a-Laying, "},\r\n            {"seventh", "seven Swans-a-Swimming, "},\r\n            {"eighth", "eight Maids-a-Milking, "},\r\n            {"ninth", "nine Ladies Dancing, "},\r\n            {"tenth", "ten Lords-a-Leaping, "},\r\n            {"eleventh", "eleven Pipers Piping, "},\r\n            {"twelfth", "twelve Drummers Drumming, "},\r\n        };\r\n\r\n        private readonly string[] _verse = new string[4]\r\n        {\r\n            "On the ", " day of Christmas my true love gave to me, ", "and ", "\\n"\r\n        };\r\n\r\n        public string Verse(int verseNum)\r\n        {\r\n            try\r\n            {\r\n                StringBuilder thisVerse = new StringBuilder();\r\n                thisVerse.Append(_verse[0] + _daysAndGifts.Keys.ElementAt(verseNum - 1) + _verse[1]);\r\n\r\n                for (int i = verseNum - 1; i >= 0; i--)\r\n                {\r\n                    thisVerse.Append(i != 0 || verseNum == 1 ?\r\n                        _daysAndGifts.Values.ElementAt(i) :\r\n                        _verse[2] + _daysAndGifts.Values.ElementAt(i));\r\n                }\r\n\r\n                return thisVerse.ToString();\r\n            }\r\n            catch(ArgumentOutOfRangeException)\r\n            {\r\n                return String.Empty;\r\n            }\r\n        }\r\n\r\n        public string Verses(int start, int end)\r\n        {\r\n            StringBuilder verses = new StringBuilder();\r\n\r\n            for (int i = start; i <= end; i++)\r\n            {\r\n                verses.Append(Verse(i) + _verse[3]);\r\n            }\r\n\r\n            return verses.ToString();\r\n        }\r\n\r\n        public string Sing()\r\n        {\r\n            return Verses(1, 12);            \r\n        }\r\n \r\n    }\r\n}\r	\N	\N	0	2	2014-08-18 20:43:36	2014-08-18 20:43:36	155	TwelveDaysSong3.cs	{"TwelveDaysSong3.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace Exercism_TwelveDays\\r\\n{\\r\\n    public class TwelveDaysSong\\r\\n    {\\r\\n        private readonly Dictionary\\u003cstring, string\\u003e _daysAndGifts = new Dictionary\\u003cstring, string\\u003e\\r\\n        {\\r\\n            {\\"first\\", \\"a Partridge in a Pear Tree.\\\\n\\"},\\r\\n            {\\"second\\", \\"two Turtle Doves, \\"},\\r\\n            {\\"third\\", \\"three French Hens, \\"},\\r\\n            {\\"fourth\\", \\"four Calling Birds, \\"},\\r\\n            {\\"fifth\\", \\"five Gold Rings, \\"},\\r\\n            {\\"sixth\\", \\"six Geese-a-Laying, \\"},\\r\\n            {\\"seventh\\", \\"seven Swans-a-Swimming, \\"},\\r\\n            {\\"eighth\\", \\"eight Maids-a-Milking, \\"},\\r\\n            {\\"ninth\\", \\"nine Ladies Dancing, \\"},\\r\\n            {\\"tenth\\", \\"ten Lords-a-Leaping, \\"},\\r\\n            {\\"eleventh\\", \\"eleven Pipers Piping, \\"},\\r\\n            {\\"twelfth\\", \\"twelve Drummers Drumming, \\"},\\r\\n        };\\r\\n\\r\\n        private readonly string[] _verse = new string[4]\\r\\n        {\\r\\n            \\"On the \\", \\" day of Christmas my true love gave to me, \\", \\"and \\", \\"\\\\n\\"\\r\\n        };\\r\\n\\r\\n        public string Verse(int verseNum)\\r\\n        {\\r\\n            try\\r\\n            {\\r\\n                StringBuilder thisVerse = new StringBuilder();\\r\\n                thisVerse.Append(_verse[0] + _daysAndGifts.Keys.ElementAt(verseNum - 1) + _verse[1]);\\r\\n\\r\\n                for (int i = verseNum - 1; i \\u003e= 0; i--)\\r\\n                {\\r\\n                    thisVerse.Append(i != 0 || verseNum == 1 ?\\r\\n                        _daysAndGifts.Values.ElementAt(i) :\\r\\n                        _verse[2] + _daysAndGifts.Values.ElementAt(i));\\r\\n                }\\r\\n\\r\\n                return thisVerse.ToString();\\r\\n            }\\r\\n            catch(ArgumentOutOfRangeException)\\r\\n            {\\r\\n                return String.Empty;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        public string Verses(int start, int end)\\r\\n        {\\r\\n            StringBuilder verses = new StringBuilder();\\r\\n\\r\\n            for (int i = start; i \\u003c= end; i++)\\r\\n            {\\r\\n                verses.Append(Verse(i) + _verse[3]);\\r\\n            }\\r\\n\\r\\n            return verses.ToString();\\r\\n        }\\r\\n\\r\\n        public string Sing()\\r\\n        {\\r\\n            return Verses(1, 12);            \\r\\n        }\\r\\n \\r\\n    }\\r\\n}\\r"}
295	27	a29a0777530e7ef13224569c	pending	clojure	leap	(ns leap)\n\n(defn leap-year? [year]\n  (and (= (mod year 4) 0)\n       (or (not= (mod year 100) 0)\n           (= (mod year 400) 0))))	\N	\N	0	1	2014-09-20 19:59:40	2014-09-20 19:59:40	156	leap.clj	{"leap.clj":"(ns leap)\\n\\n(defn leap-year? [year]\\n  (and (= (mod year 4) 0)\\n       (or (not= (mod year 100) 0)\\n           (= (mod year 400) 0))))"}
296	27	f006da9544238e8610fcf7a5	superseded	cpp	bob	#include "bob.h"\n#include <cctype>\n#include <boost/algorithm/string.hpp>\n\nusing namespace boost::algorithm;\n\nconst std::string bob::hey(const std::string &inString) {\n   if (check_yelling(inString)) return "Whoa, chill out!";\n   if (check_question(inString)) return "Sure.";\n   if (check_nothing(inString)) return "Fine. Be that way!";\n   return "Whatever.";\n}\n\nbool bob::check_yelling(const std::string &str) {\n   size_t total_upper(0), total_lower(0);\n   for(auto c : str) {\n      if (isupper(c)) total_upper++;\n      else if (isalpha(c)) total_lower++;\n   }\n   return total_upper > total_lower;\n}\n\nbool bob::check_question(const std::string &str) {\n   return *(str.end()-1) == '?';\n}\n\nbool bob::check_nothing(const std::string &str) {\n   return trim_right_copy(trim_left_copy(str)).empty();\n}	\N	\N	0	2	2014-07-10 04:58:55	2014-07-10 04:58:55	157	bob.cpp	{"bob.cpp":"#include \\"bob.h\\"\\n#include \\u003ccctype\\u003e\\n#include \\u003cboost/algorithm/string.hpp\\u003e\\n\\nusing namespace boost::algorithm;\\n\\nconst std::string bob::hey(const std::string \\u0026inString) {\\n   if (check_yelling(inString)) return \\"Whoa, chill out!\\";\\n   if (check_question(inString)) return \\"Sure.\\";\\n   if (check_nothing(inString)) return \\"Fine. Be that way!\\";\\n   return \\"Whatever.\\";\\n}\\n\\nbool bob::check_yelling(const std::string \\u0026str) {\\n   size_t total_upper(0), total_lower(0);\\n   for(auto c : str) {\\n      if (isupper(c)) total_upper++;\\n      else if (isalpha(c)) total_lower++;\\n   }\\n   return total_upper \\u003e total_lower;\\n}\\n\\nbool bob::check_question(const std::string \\u0026str) {\\n   return *(str.end()-1) == '?';\\n}\\n\\nbool bob::check_nothing(const std::string \\u0026str) {\\n   return trim_right_copy(trim_left_copy(str)).empty();\\n}"}
297	27	b503a504d27fffa902709a77	superseded	cpp	bob	#include "bob.h"\n#include <cctype>\n#include <boost/algorithm/string.hpp>\n\nusing namespace boost::algorithm;\n\nconst std::string bob::hey(const std::string &inString) {\n   if (check_yelling(inString)) return "Whoa, chill out!";\n   if (check_question(inString)) return "Sure.";\n   if (check_nothing(inString)) return "Fine. Be that way!";\n   return "Whatever.";\n}\n\nbool bob::check_yelling(const std::string &str) {\n   size_t total_upper(0), total_lower(0);\n   for(auto c = str.begin(); c != str.end(); ++c) {\n      if (isupper(*c)) total_upper++;\n      else if (isalpha(*c)) total_lower++;\n   }\n   return total_upper > total_lower;\n}\n\nbool bob::check_question(const std::string &str) {\n   return *(str.end()-1) == '?';\n}\n\nbool bob::check_nothing(const std::string &str) {\n   return trim_right_copy(trim_left_copy(str)).empty();\n}	\N	\N	0	1	2014-08-21 17:35:50	2014-08-21 17:35:50	157	bob.cpp	{"bob.cpp":"#include \\"bob.h\\"\\n#include \\u003ccctype\\u003e\\n#include \\u003cboost/algorithm/string.hpp\\u003e\\n\\nusing namespace boost::algorithm;\\n\\nconst std::string bob::hey(const std::string \\u0026inString) {\\n   if (check_yelling(inString)) return \\"Whoa, chill out!\\";\\n   if (check_question(inString)) return \\"Sure.\\";\\n   if (check_nothing(inString)) return \\"Fine. Be that way!\\";\\n   return \\"Whatever.\\";\\n}\\n\\nbool bob::check_yelling(const std::string \\u0026str) {\\n   size_t total_upper(0), total_lower(0);\\n   for(auto c = str.begin(); c != str.end(); ++c) {\\n      if (isupper(*c)) total_upper++;\\n      else if (isalpha(*c)) total_lower++;\\n   }\\n   return total_upper \\u003e total_lower;\\n}\\n\\nbool bob::check_question(const std::string \\u0026str) {\\n   return *(str.end()-1) == '?';\\n}\\n\\nbool bob::check_nothing(const std::string \\u0026str) {\\n   return trim_right_copy(trim_left_copy(str)).empty();\\n}"}
298	27	c22a2938f842c7a698743958	pending	cpp	bob	#include "bob.h"\n#include <cctype>\n#include <boost/algorithm/string.hpp>\n\nusing namespace boost::algorithm;\n\nconst std::string bob::hey(const std::string &inString) {\n   if (check_yelling(inString)) return "Whoa, chill out!";\n   if (check_question(inString)) return "Sure.";\n   if (check_nothing(inString)) return "Fine. Be that way!";\n   return "Whatever.";\n}\n\nbool bob::check_yelling(const std::string &str) {\n   size_t total_upper(0), total_lower(0);\n   for(auto c : str) {\n      if (isupper(c)) total_upper++;\n      else if (isalpha(c)) total_lower++;\n   }\n   return total_upper > total_lower;\n}\n\nbool bob::check_question(const std::string &str) {\n   return str.back() == '?';\n}\n\nbool bob::check_nothing(const std::string &str) {\n   return trim_left_copy(str).empty();\n}	\N	\N	0	3	2014-09-23 10:39:17	2014-09-23 10:39:17	157	bob.cpp	{"bob.cpp":"#include \\"bob.h\\"\\n#include \\u003ccctype\\u003e\\n#include \\u003cboost/algorithm/string.hpp\\u003e\\n\\nusing namespace boost::algorithm;\\n\\nconst std::string bob::hey(const std::string \\u0026inString) {\\n   if (check_yelling(inString)) return \\"Whoa, chill out!\\";\\n   if (check_question(inString)) return \\"Sure.\\";\\n   if (check_nothing(inString)) return \\"Fine. Be that way!\\";\\n   return \\"Whatever.\\";\\n}\\n\\nbool bob::check_yelling(const std::string \\u0026str) {\\n   size_t total_upper(0), total_lower(0);\\n   for(auto c : str) {\\n      if (isupper(c)) total_upper++;\\n      else if (isalpha(c)) total_lower++;\\n   }\\n   return total_upper \\u003e total_lower;\\n}\\n\\nbool bob::check_question(const std::string \\u0026str) {\\n   return str.back() == '?';\\n}\\n\\nbool bob::check_nothing(const std::string \\u0026str) {\\n   return trim_left_copy(str).empty();\\n}"}
299	27	7d18764fa4b47b079daea08e	pending	python	leap	def is_leap_year(year):\n  return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)	\N	\N	0	1	2014-09-22 17:50:51	2014-09-22 17:50:51	158	year.py	{"year.py":"def is_leap_year(year):\\n  return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)"}
300	27	f3b2ce48c2574e581f8accf1	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char(isDigit)\n\n\nisValid :: String -> Bool\nisValid string =\n    (length string == 10) || (take 1 string == "1" && length string == 11)\n\nareaCode :: String -> String\nareaCode =\n    take 3\n\nprettyPrint :: String -> String\nprettyPrint string = do\n    "(" ++ take 3 normalizedString ++ ") " ++ (take 3 $ drop 3 normalizedString) ++ "-" ++ drop 6 normalizedString where\n        normalizedString = drop (length string - 10) string\n\nnumber :: String -> String\nnumber string | isValid filteredString =\n                drop ((length filteredString) - 10) filteredString\n              | otherwise = "0000000000" where\n                  filteredString = filter isDigit string	\N	\N	0	1	2014-06-27 23:16:00	2014-06-27 23:16:00	159	Phone.hs	{"Phone.hs":"module Phone (areaCode, number, prettyPrint) where\\n\\nimport Data.Char(isDigit)\\n\\n\\nisValid :: String -\\u003e Bool\\nisValid string =\\n    (length string == 10) || (take 1 string == \\"1\\" \\u0026\\u0026 length string == 11)\\n\\nareaCode :: String -\\u003e String\\nareaCode =\\n    take 3\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint string = do\\n    \\"(\\" ++ take 3 normalizedString ++ \\") \\" ++ (take 3 $ drop 3 normalizedString) ++ \\"-\\" ++ drop 6 normalizedString where\\n        normalizedString = drop (length string - 10) string\\n\\nnumber :: String -\\u003e String\\nnumber string | isValid filteredString =\\n                drop ((length filteredString) - 10) filteredString\\n              | otherwise = \\"0000000000\\" where\\n                  filteredString = filter isDigit string"}
301	27	2810e94fcdc2b9e53b099a79	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char(isDigit)\nimport Data.List.Split(splitPlaces)\n\n\nisValid :: String -> Bool\nisValid string =\n    (length string == 10) || (take 1 string == "1" && length string == 11)\n\nareaCode :: String -> String\nareaCode =\n    take 3\n\nprettyPrint :: String -> String\nprettyPrint string = do\n    let [code, exchange, station] = splitPlaces [3::Integer, 3, 4] $ number string\n    concat ["(", code, ") ", exchange, "-", station] where\n\nnumber :: String -> String\nnumber string | isValid filteredString =\n                drop (length filteredString - 10) filteredString\n              | otherwise = "0000000000" where\n                  filteredString = filter isDigit string	\N	\N	0	2	2014-07-08 19:25:19	2014-07-08 19:25:19	159	Phone.hs	{"Phone.hs":"module Phone (areaCode, number, prettyPrint) where\\n\\nimport Data.Char(isDigit)\\nimport Data.List.Split(splitPlaces)\\n\\n\\nisValid :: String -\\u003e Bool\\nisValid string =\\n    (length string == 10) || (take 1 string == \\"1\\" \\u0026\\u0026 length string == 11)\\n\\nareaCode :: String -\\u003e String\\nareaCode =\\n    take 3\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint string = do\\n    let [code, exchange, station] = splitPlaces [3::Integer, 3, 4] $ number string\\n    concat [\\"(\\", code, \\") \\", exchange, \\"-\\", station] where\\n\\nnumber :: String -\\u003e String\\nnumber string | isValid filteredString =\\n                drop (length filteredString - 10) filteredString\\n              | otherwise = \\"0000000000\\" where\\n                  filteredString = filter isDigit string"}
302	27	2dea6606f10fd74c59898ffb	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char(isDigit)\nimport Data.List.Split(splitPlaces)\n\n\nisValid :: String -> Bool\nisValid string =\n    (length string == 10) || (take 1 string == "1" && length string == 11)\n\nareaCode :: String -> String\nareaCode =\n    take 3\n\nprettyPrint :: String -> String\nprettyPrint string =\n    concat ["(", code, ") ", exchange, "-", station] where\n    [code, exchange, station] = splitPlaces [3::Integer, 3, 4] $ number string\n\nnumber :: String -> String\nnumber string | isValid filteredString =\n                drop (length filteredString - 10) filteredString\n              | otherwise = "0000000000" where\n                  filteredString = filter isDigit string	\N	\N	0	3	2014-09-04 12:14:45	2014-09-04 12:14:45	159	Phone.hs	{"Phone.hs":"module Phone (areaCode, number, prettyPrint) where\\n\\nimport Data.Char(isDigit)\\nimport Data.List.Split(splitPlaces)\\n\\n\\nisValid :: String -\\u003e Bool\\nisValid string =\\n    (length string == 10) || (take 1 string == \\"1\\" \\u0026\\u0026 length string == 11)\\n\\nareaCode :: String -\\u003e String\\nareaCode =\\n    take 3\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint string =\\n    concat [\\"(\\", code, \\") \\", exchange, \\"-\\", station] where\\n    [code, exchange, station] = splitPlaces [3::Integer, 3, 4] $ number string\\n\\nnumber :: String -\\u003e String\\nnumber string | isValid filteredString =\\n                drop (length filteredString - 10) filteredString\\n              | otherwise = \\"0000000000\\" where\\n                  filteredString = filter isDigit string"}
303	27	9a560e473290bf0e2876f044	pending	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char(isDigit)\nimport Data.Maybe(fromMaybe)\nimport Data.List.Split(splitPlaces)\n\n\ngetValidNumber :: String -> Maybe String\ngetValidNumber string\n    | (stringLength == 10) || (take 1 string == "1" && stringLength == 11) =\n        Just $ drop (stringLength - 10) string\n    | otherwise = Nothing where\n        stringLength = length string\n\nareaCode :: String -> String\nareaCode =\n    take 3\n\nprettyPrint :: String -> String\nprettyPrint string =\n    concat ["(", code, ") ", exchange, "-", station] where\n    [code, exchange, station] = splitPlaces [3::Integer, 3, 4] $ number string\n\nnumber :: String -> String\nnumber = fromMaybe "0000000000" . getValidNumber . filter isDigit	\N	\N	0	4	2014-12-13 14:21:54	2014-12-13 14:21:54	159	Phone.hs	{"Phone.hs":"module Phone (areaCode, number, prettyPrint) where\\n\\nimport Data.Char(isDigit)\\nimport Data.Maybe(fromMaybe)\\nimport Data.List.Split(splitPlaces)\\n\\n\\ngetValidNumber :: String -\\u003e Maybe String\\ngetValidNumber string\\n    | (stringLength == 10) || (take 1 string == \\"1\\" \\u0026\\u0026 stringLength == 11) =\\n        Just $ drop (stringLength - 10) string\\n    | otherwise = Nothing where\\n        stringLength = length string\\n\\nareaCode :: String -\\u003e String\\nareaCode =\\n    take 3\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint string =\\n    concat [\\"(\\", code, \\") \\", exchange, \\"-\\", station] where\\n    [code, exchange, station] = splitPlaces [3::Integer, 3, 4] $ number string\\n\\nnumber :: String -\\u003e String\\nnumber = fromMaybe \\"0000000000\\" . getValidNumber . filter isDigit"}
304	27	f2bf6d7266d70a15bd2f6b02	superseded	javascript	bob	function Bob(){\n  this.hey = function(string) {\n    var punctuation = string.charAt(string.length -1);\n    string = string.replace(/[^A-Za-z0-9_äöüÄÖÜ]/g, "");\n    var allNumbers = !string.match(/\\D/g);\n    if ( string.toUpperCase() === string && !allNumbers )\n      return "Whoa, chill out!";\n    else if ( punctuation === "?" )\n      return "Sure.";\n    else if ( string.trim() == "")\n      return "Fine. Be that way!"\n    else\n      return "Whatever.";\n  }\n}	\N	\N	0	1	2014-06-15 07:51:45	2014-06-15 07:51:45	160	bob.js	{"bob.js":"function Bob(){\\n  this.hey = function(string) {\\n    var punctuation = string.charAt(string.length -1);\\n    string = string.replace(/[^A-Za-z0-9_äöüÄÖÜ]/g, \\"\\");\\n    var allNumbers = !string.match(/\\\\D/g);\\n    if ( string.toUpperCase() === string \\u0026\\u0026 !allNumbers )\\n      return \\"Whoa, chill out!\\";\\n    else if ( punctuation === \\"?\\" )\\n      return \\"Sure.\\";\\n    else if ( string.trim() == \\"\\")\\n      return \\"Fine. Be that way!\\"\\n    else\\n      return \\"Whatever.\\";\\n  }\\n}"}
305	27	07aad8bad30e2fa492714659	superseded	javascript	bob	function Bob(){\n  this.hey = function(string) {\n    var punctuation = string.charAt(string.length -1);\n    string = string.replace(/[^A-Za-z0-9_äöüÄÖÜ]/g, "");\n    var allNumbers = !string.match(/\\D/g);\n    if ( string.toUpperCase() === string && !allNumbers )\n      return "Whoa, chill out!";\n    else if ( punctuation === "?" )\n      return "Sure.";\n    else if ( string.trim() == "")\n      return "Fine. Be that way!"\n    else\n      return "Whatever.";\n  }\n}\n\nmodule.exports = Bob;	\N	\N	0	2	2014-07-21 13:14:11	2014-07-21 13:14:11	160	bob.js	{"bob.js":"function Bob(){\\n  this.hey = function(string) {\\n    var punctuation = string.charAt(string.length -1);\\n    string = string.replace(/[^A-Za-z0-9_äöüÄÖÜ]/g, \\"\\");\\n    var allNumbers = !string.match(/\\\\D/g);\\n    if ( string.toUpperCase() === string \\u0026\\u0026 !allNumbers )\\n      return \\"Whoa, chill out!\\";\\n    else if ( punctuation === \\"?\\" )\\n      return \\"Sure.\\";\\n    else if ( string.trim() == \\"\\")\\n      return \\"Fine. Be that way!\\"\\n    else\\n      return \\"Whatever.\\";\\n  }\\n}\\n\\nmodule.exports = Bob;"}
306	27	b1be9bbd6a7a8726bb5283bd	pending	javascript	bob	function Bob(){\n  this.hey = function(string) {\n    var punctuation = string.charAt(string.length -1);\n    if ( string.toUpperCase() === string && string.toLowerCase() !== string )\n      return "Whoa, chill out!";\n    else if ( punctuation === "?" )\n      return "Sure.";\n    else if ( string.trim() == "")\n      return "Fine. Be that way!"\n    else\n      return "Whatever.";\n  }\n}\n\nmodule.exports = Bob;	\N	\N	0	3	2014-08-31 09:36:49	2014-08-31 09:36:49	160	bob.js	{"bob.js":"function Bob(){\\n  this.hey = function(string) {\\n    var punctuation = string.charAt(string.length -1);\\n    if ( string.toUpperCase() === string \\u0026\\u0026 string.toLowerCase() !== string )\\n      return \\"Whoa, chill out!\\";\\n    else if ( punctuation === \\"?\\" )\\n      return \\"Sure.\\";\\n    else if ( string.trim() == \\"\\")\\n      return \\"Fine. Be that way!\\"\\n    else\\n      return \\"Whatever.\\";\\n  }\\n}\\n\\nmodule.exports = Bob;"}
307	45	228a92896c63344a990477a4	pending	ruby	gigasecond	require 'date'\n\nclass Gigasecond\n  def initialize(birthday)\n    @birthday = birthday\n  end\n\n  def date\n    Date.strptime(seconds.to_s, '%s')\n  end\n\n  private\n\n  def seconds\n    @birthday.strftime('%s').to_i + 10**9\n  end\nend	\N	\N	0	1	2014-12-08 11:28:23	2014-12-08 11:28:23	161	gigasecond.rb	{"gigasecond.rb":"require 'date'\\n\\nclass Gigasecond\\n  def initialize(birthday)\\n    @birthday = birthday\\n  end\\n\\n  def date\\n    Date.strptime(seconds.to_s, '%s')\\n  end\\n\\n  private\\n\\n  def seconds\\n    @birthday.strftime('%s').to_i + 10**9\\n  end\\nend"}
309	45	715efcc78b2c09993dcd6fdd	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> list_of_words\n      |> count_of_words\n  end\n\n  defp list_of_words(sentence) do\n    Regex.scan(%r/\\w+/, sentence)\n      |> List.flatten\n  end\n\n  defp count_of_words(list_of_words) do\n    Enum.reduce(list_of_words, HashDict.new, fn(acc, word) ->\n      Dict.update(word, acc, 1, fn(value) -> value + 1 end)\n    end)\n  end\nend	\N	\N	0	4	2014-11-23 03:10:29	2014-11-23 03:10:29	163	word_count.exs	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: HashDict.t\\n  def count(sentence) do\\n    sentence\\n      |\\u003e String.downcase\\n      |\\u003e list_of_words\\n      |\\u003e count_of_words\\n  end\\n\\n  defp list_of_words(sentence) do\\n    Regex.scan(%r/\\\\w+/, sentence)\\n      |\\u003e List.flatten\\n  end\\n\\n  defp count_of_words(list_of_words) do\\n    Enum.reduce(list_of_words, HashDict.new, fn(acc, word) -\\u003e\\n      Dict.update(word, acc, 1, fn(value) -\\u003e value + 1 end)\\n    end)\\n  end\\nend"}
310	45	98af912f48ba932d9e750d88	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    HashDict.new list_of_word_counts(sentence)\n  end\n\n  def lowercase_sentence(sentence) do\n    String.downcase(sentence)\n  end\n\n  def scrubbed_sentence(sentence) do\n    Regex.replace(%r/[^\\s\\w]/, lowercase_sentence(sentence), '')\n  end\n\n  def list_of_words(sentence) do\n    String.split(scrubbed_sentence(sentence))\n  end\n\n  def unique_words(sentence) do\n    Enum.uniq(list_of_words(sentence))\n  end\n\n  def count_of_word(sentence, word) do\n    Enum.count(list_of_words(sentence), fn(word_from_sentence)-> word_from_sentence == word end)\n  end\n\n  def list_of_word_counts(sentence) do\n    Enum.map(unique_words(sentence), fn(word) -> {word, count_of_word(sentence, word)} end)\n  end\nend	\N	\N	0	1	2014-11-29 16:39:43	2014-11-29 16:39:43	163	word_count.exs	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: HashDict.t\\n  def count(sentence) do\\n    HashDict.new list_of_word_counts(sentence)\\n  end\\n\\n  def lowercase_sentence(sentence) do\\n    String.downcase(sentence)\\n  end\\n\\n  def scrubbed_sentence(sentence) do\\n    Regex.replace(%r/[^\\\\s\\\\w]/, lowercase_sentence(sentence), '')\\n  end\\n\\n  def list_of_words(sentence) do\\n    String.split(scrubbed_sentence(sentence))\\n  end\\n\\n  def unique_words(sentence) do\\n    Enum.uniq(list_of_words(sentence))\\n  end\\n\\n  def count_of_word(sentence, word) do\\n    Enum.count(list_of_words(sentence), fn(word_from_sentence)-\\u003e word_from_sentence == word end)\\n  end\\n\\n  def list_of_word_counts(sentence) do\\n    Enum.map(unique_words(sentence), fn(word) -\\u003e {word, count_of_word(sentence, word)} end)\\n  end\\nend"}
311	45	78d06b00a4592bf397cd70a7	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    HashDict.new list_of_word_counts(sentence)\n  end\n\n  defp lowercase_sentence(sentence) do\n    String.downcase(sentence)\n  end\n\n  defp scrubbed_sentence(sentence) do\n    Regex.replace(%r/[^\\s\\w]/, lowercase_sentence(sentence), '')\n  end\n\n  defp list_of_words(sentence) do\n    String.split(scrubbed_sentence(sentence))\n  end\n\n  defp unique_words(sentence) do\n    Enum.uniq(list_of_words(sentence))\n  end\n\n  defp count_of_word(sentence, word) do\n    Enum.count(list_of_words(sentence), fn(word_from_sentence)-> word_from_sentence == word end)\n  end\n\n  defp list_of_word_counts(sentence) do\n    Enum.map(unique_words(sentence), fn(word) -> {word, count_of_word(sentence, word)} end)\n  end\nend	\N	\N	0	2	2014-11-30 15:05:35	2014-11-30 15:05:35	163	word_count.exs	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: HashDict.t\\n  def count(sentence) do\\n    HashDict.new list_of_word_counts(sentence)\\n  end\\n\\n  defp lowercase_sentence(sentence) do\\n    String.downcase(sentence)\\n  end\\n\\n  defp scrubbed_sentence(sentence) do\\n    Regex.replace(%r/[^\\\\s\\\\w]/, lowercase_sentence(sentence), '')\\n  end\\n\\n  defp list_of_words(sentence) do\\n    String.split(scrubbed_sentence(sentence))\\n  end\\n\\n  defp unique_words(sentence) do\\n    Enum.uniq(list_of_words(sentence))\\n  end\\n\\n  defp count_of_word(sentence, word) do\\n    Enum.count(list_of_words(sentence), fn(word_from_sentence)-\\u003e word_from_sentence == word end)\\n  end\\n\\n  defp list_of_word_counts(sentence) do\\n    Enum.map(unique_words(sentence), fn(word) -\\u003e {word, count_of_word(sentence, word)} end)\\n  end\\nend"}
312	45	23a40f1a5374ed69d1f9a186	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    Enum.reduce(list_of_words(sentence), HashDict.new, fn(acc, word) ->\n      current_count = HashDict.get(word, acc, 0)\n      HashDict.put(word, acc, current_count + 1)\n    end)\n  end\n\n  defp lowercase_sentence(sentence) do\n    String.downcase(sentence)\n  end\n\n  defp scrubbed_sentence(sentence) do\n    Regex.replace(%r/[^\\s\\w]/, lowercase_sentence(sentence), '')\n  end\n\n  defp list_of_words(sentence) do\n    String.split(scrubbed_sentence(sentence))\n  end\nend	\N	\N	0	3	2014-12-13 22:23:34	2014-12-13 22:23:34	163	word_count.exs	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: HashDict.t\\n  def count(sentence) do\\n    Enum.reduce(list_of_words(sentence), HashDict.new, fn(acc, word) -\\u003e\\n      current_count = HashDict.get(word, acc, 0)\\n      HashDict.put(word, acc, current_count + 1)\\n    end)\\n  end\\n\\n  defp lowercase_sentence(sentence) do\\n    String.downcase(sentence)\\n  end\\n\\n  defp scrubbed_sentence(sentence) do\\n    Regex.replace(%r/[^\\\\s\\\\w]/, lowercase_sentence(sentence), '')\\n  end\\n\\n  defp list_of_words(sentence) do\\n    String.split(scrubbed_sentence(sentence))\\n  end\\nend"}
313	45	65222a2ca2f7712189863752	pending	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> list_of_words\n      |> count_of_words\n  end\n\n  defp list_of_words(sentence) do\n    Regex.scan(%r/\\w+/, sentence)\n      |> List.flatten\n  end\n\n  defp count_of_words(list_of_words) do\n    Enum.reduce(list_of_words, HashDict.new, fn(acc, word) ->\n      Dict.update(word, acc, 1, &(&1 + 1))\n    end)\n  end\nend	\N	\N	0	5	2014-12-19 11:31:06	2014-12-19 11:31:06	163	word_count.exs	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: HashDict.t\\n  def count(sentence) do\\n    sentence\\n      |\\u003e String.downcase\\n      |\\u003e list_of_words\\n      |\\u003e count_of_words\\n  end\\n\\n  defp list_of_words(sentence) do\\n    Regex.scan(%r/\\\\w+/, sentence)\\n      |\\u003e List.flatten\\n  end\\n\\n  defp count_of_words(list_of_words) do\\n    Enum.reduce(list_of_words, HashDict.new, fn(acc, word) -\\u003e\\n      Dict.update(word, acc, 1, \\u0026(\\u00261 + 1))\\n    end)\\n  end\\nend"}
314	45	988516b712fb75f0c21400fa	pending	clojure	atbash-cipher	(ns atbash-cipher\n  (:require [clojure.string :as str]))\n\n(defn encode [plaintext]\n  (let [alphabet "abcdefghijklmnopqrstuvwxyz"\n        digits "0123456789"\n        encryption (merge (zipmap alphabet (reverse alphabet)) (zipmap digits digits))\n        filtered (filter #(Character/isLetterOrDigit %) (str/lower-case plaintext))\n        encrypted (map encryption filtered)\n        with-spaces (str/join " " (map #(apply str %) (partition-all 5 encrypted)))]\n    with-spaces))	\N	\N	0	1	2015-01-02 12:25:08	2015-01-02 12:25:08	164	atbash_cipher.clj	{"atbash_cipher.clj":"(ns atbash-cipher\\n  (:require [clojure.string :as str]))\\n\\n(defn encode [plaintext]\\n  (let [alphabet \\"abcdefghijklmnopqrstuvwxyz\\"\\n        digits \\"0123456789\\"\\n        encryption (merge (zipmap alphabet (reverse alphabet)) (zipmap digits digits))\\n        filtered (filter #(Character/isLetterOrDigit %) (str/lower-case plaintext))\\n        encrypted (map encryption filtered)\\n        with-spaces (str/join \\" \\" (map #(apply str %) (partition-all 5 encrypted)))]\\n    with-spaces))"}
315	45	c18d83ceabf622008af4ab1f	pending	csharp	triangle	using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace Exercism.triangle\r\n{\r\n    public enum TriangleKind\r\n    {\r\n        Equilateral,\r\n        Isosceles,\r\n        Scalene\r\n    }\r\n\r\n    public class TriangleException : Exception {}\r\n\r\n    public class Triangle\r\n    {\r\n        private readonly List<decimal> _sides;\r\n\r\n        public Triangle(decimal a, decimal b, decimal c)\r\n        {\r\n            _sides = new List<decimal> {a, b, c};\r\n            _sides.Sort();\r\n\r\n            if (_sides.Any(s => s <= 0) || _sides[0] + _sides[1] <= _sides[2])\r\n                throw new TriangleException();\r\n        }\r\n\r\n        public TriangleKind Kind()\r\n        {\r\n            if (_sides[0] == _sides[1] && _sides[1] == _sides[2])\r\n                return TriangleKind.Equilateral;\r\n\r\n            if (_sides[0] == _sides[1] || _sides[1] == _sides[2])\r\n                return TriangleKind.Isosceles;\r\n\r\n            return TriangleKind.Scalene;\r\n        }\r\n    }\r\n}	\N	\N	0	1	2014-11-21 00:31:23	2014-11-21 00:31:23	165	Triangle.cs	{"Triangle.cs":"using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\n\\r\\nnamespace Exercism.triangle\\r\\n{\\r\\n    public enum TriangleKind\\r\\n    {\\r\\n        Equilateral,\\r\\n        Isosceles,\\r\\n        Scalene\\r\\n    }\\r\\n\\r\\n    public class TriangleException : Exception {}\\r\\n\\r\\n    public class Triangle\\r\\n    {\\r\\n        private readonly List\\u003cdecimal\\u003e _sides;\\r\\n\\r\\n        public Triangle(decimal a, decimal b, decimal c)\\r\\n        {\\r\\n            _sides = new List\\u003cdecimal\\u003e {a, b, c};\\r\\n            _sides.Sort();\\r\\n\\r\\n            if (_sides.Any(s =\\u003e s \\u003c= 0) || _sides[0] + _sides[1] \\u003c= _sides[2])\\r\\n                throw new TriangleException();\\r\\n        }\\r\\n\\r\\n        public TriangleKind Kind()\\r\\n        {\\r\\n            if (_sides[0] == _sides[1] \\u0026\\u0026 _sides[1] == _sides[2])\\r\\n                return TriangleKind.Equilateral;\\r\\n\\r\\n            if (_sides[0] == _sides[1] || _sides[1] == _sides[2])\\r\\n                return TriangleKind.Isosceles;\\r\\n\\r\\n            return TriangleKind.Scalene;\\r\\n        }\\r\\n    }\\r\\n}"}
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 315, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	22	2000-09-11 17:24:01	2000-09-11 17:24:01	t
2	1	15	1971-05-18 03:47:05	1971-05-18 03:47:05	t
3	1	18	2000-08-09 03:18:41	2000-08-09 03:18:41	t
4	1	23	1973-04-22 03:28:59	1973-04-22 03:28:59	t
5	1	11	1971-09-07 10:25:30	1971-09-07 10:25:30	t
6	1	8	1991-06-21 06:20:33	1991-06-21 06:20:33	t
7	1	7	1977-05-08 22:26:46	1977-05-08 22:26:46	t
8	1	30	1977-10-19 21:58:09	1977-10-19 21:58:09	t
9	1	31	1983-04-24 08:14:38	1983-04-24 08:14:38	t
10	1	36	2006-06-12 10:17:02	2006-06-12 10:17:02	t
11	1	16	1989-04-06 15:29:52	1989-04-06 15:29:52	f
12	1	17	1988-10-15 10:48:19	1988-10-15 10:48:19	f
13	1	29	1995-11-11 18:03:17	1995-11-11 18:03:17	f
14	1	32	2000-04-04 18:29:19	2000-04-04 18:29:19	f
15	1	38	2001-01-28 21:45:31	2001-01-28 21:45:31	f
16	1	42	1984-01-06 23:01:01	1984-01-06 23:01:01	f
17	1	43	1981-06-27 07:09:04	1981-06-27 07:09:04	f
18	1	47	2001-05-14 19:04:32	2001-05-14 19:04:32	f
19	2	3	1976-09-02 19:00:15	1976-09-02 19:00:15	t
20	2	36	1996-03-19 16:35:07	1996-03-19 16:35:07	t
21	2	31	1996-02-11 12:43:30	1996-02-11 12:43:30	t
22	2	47	1972-04-23 11:55:46	1972-04-23 11:55:46	t
23	2	19	1983-08-05 00:27:04	1983-08-05 00:27:04	f
24	2	38	2010-03-22 08:30:12	2010-03-22 08:30:12	f
25	3	38	1999-02-15 02:25:43	1999-02-15 02:25:43	f
26	3	3	2002-03-14 18:58:43	2002-03-14 18:58:43	f
27	4	3	2013-12-18 00:02:40	2013-12-18 00:02:40	t
28	4	32	1985-06-20 20:02:47	1985-06-20 20:02:47	t
29	4	22	1982-07-08 01:40:28	1982-07-08 01:40:28	t
30	4	27	2009-06-15 14:16:03	2009-06-15 14:16:03	t
31	4	20	2002-02-06 16:29:40	2002-02-06 16:29:40	t
32	4	25	1991-10-26 11:42:37	1991-10-26 11:42:37	t
33	4	19	2002-11-22 17:48:31	2002-11-22 17:48:31	t
34	4	24	2003-10-27 09:07:17	2003-10-27 09:07:17	t
35	4	26	1972-02-09 09:07:48	1972-02-09 09:07:48	t
36	4	21	1994-12-28 21:29:26	1994-12-28 21:29:26	t
37	4	38	1992-02-19 18:48:40	1992-02-19 18:48:40	f
38	4	12	2013-11-09 05:13:52	2013-11-09 05:13:52	f
39	4	14	1986-10-23 03:08:39	1986-10-23 03:08:39	f
40	5	32	1988-05-20 13:27:59	1988-05-20 13:27:59	t
41	5	40	1970-04-04 17:39:35	1970-04-04 17:39:35	t
42	5	35	1978-01-10 10:48:55	1978-01-10 10:48:55	t
43	5	37	1986-09-26 00:15:31	1986-09-26 00:15:31	t
44	5	33	1987-09-25 18:25:39	1987-09-25 18:25:39	t
45	5	36	1997-12-22 15:51:26	1997-12-22 15:51:26	t
46	5	34	1973-10-28 08:42:02	1973-10-28 08:42:02	t
47	5	39	2006-07-11 09:42:53	2006-07-11 09:42:53	t
48	5	41	2013-01-21 20:19:34	2013-01-21 20:19:34	f
49	5	38	1981-07-11 19:14:34	1981-07-11 19:14:34	f
50	5	3	2007-07-18 09:58:04	2007-07-18 09:58:04	f
51	6	6	1974-11-11 00:49:02	1974-11-11 00:49:02	t
52	6	7	1986-01-02 08:43:21	1986-01-02 08:43:21	t
53	6	8	1990-12-09 22:16:14	1990-12-09 22:16:14	t
54	6	9	1978-11-11 05:20:28	1978-11-11 05:20:28	t
55	6	11	1972-07-13 22:09:11	1972-07-13 22:09:11	t
56	6	12	1975-03-05 22:15:08	1975-03-05 22:15:08	t
57	6	13	2006-01-17 23:41:59	2006-01-17 23:41:59	t
58	6	14	1981-07-06 07:12:22	1981-07-06 07:12:22	t
59	6	15	1972-06-21 10:54:51	1972-06-21 10:54:51	t
60	6	16	1994-11-12 04:22:36	1994-11-12 04:22:36	t
61	6	17	1992-06-19 23:14:10	1992-06-19 23:14:10	t
62	6	18	1985-12-14 16:54:02	1985-12-14 16:54:02	t
63	6	23	2000-06-14 01:07:21	2000-06-14 01:07:21	t
64	6	28	1995-02-03 21:32:55	1995-02-03 21:32:55	t
65	6	29	2008-09-09 14:37:30	2008-09-09 14:37:30	t
66	6	30	2012-01-06 19:38:54	2012-01-06 19:38:54	t
67	6	31	1973-08-22 12:16:57	1973-08-22 12:16:57	t
68	6	32	1976-10-08 04:17:42	1976-10-08 04:17:42	t
69	6	38	1991-10-23 20:43:02	1991-10-23 20:43:02	t
70	6	42	1971-12-12 09:39:58	1971-12-12 09:39:58	t
71	6	43	1998-11-16 20:05:13	1998-11-16 20:05:13	t
72	6	44	1976-09-14 06:03:29	1976-09-14 06:03:29	t
73	6	45	2003-03-22 01:53:16	2003-03-22 01:53:16	t
74	6	46	2012-04-07 05:04:59	2012-04-07 05:04:59	t
75	6	47	1970-06-28 10:37:15	1970-06-28 10:37:15	t
76	6	48	1971-08-05 05:44:03	1971-08-05 05:44:03	t
77	6	49	1977-05-25 15:06:58	1977-05-25 15:06:58	t
78	7	3	1971-01-05 03:50:08	1971-01-05 03:50:08	t
79	7	39	1970-08-05 15:40:38	1970-08-05 15:40:38	t
80	7	32	2007-06-27 20:12:34	2007-06-27 20:12:34	t
81	7	38	2012-02-09 19:22:42	2012-02-09 19:22:42	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-09-02 20:14:50.270146	2014-09-02 20:14:50.270146	baconesia
2	chocolades	2014-07-15 09:51:43.305799	2014-07-15 09:51:43.305799	chocolades
3	ghost	2014-05-02 03:10:38.31613	2014-05-02 03:10:38.31613	ghost
4	motley	2014-12-06 22:01:36.322298	2014-12-06 22:01:36.322298	motley
5	rugrats	2014-04-26 04:45:31.344056	2014-04-26 04:45:31.344056	rugrats
6	slate	2014-09-04 00:21:21.362128	2014-09-04 00:21:21.362128	slate
7	polkadots	2014-10-27 14:33:00.393135	2014-10-27 14:33:00.393135	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	9	go	gigasecond	1	done	2014-09-27 08:53:32	2014-09-17 07:08:45	2014-09-17 07:08:45	c812b93aa813af3069f7adaf	t
2	9	elixir	bob	1	pending	\N	2014-09-17 20:42:02	2014-09-17 20:42:02	213085b52d24a41859d3ac11	f
3	9	ruby	grains	1	done	2014-12-14 14:03:36	2014-12-10 18:10:35	2014-12-10 18:10:35	2fc9f1f18929338c064a1d32	t
4	9	javascript	word-count	3	done	2014-12-05 17:27:59	2014-09-24 23:16:11	2014-09-24 23:16:11	17d2d4cd3ec4ef36d0b8e52f	t
5	9	haskell	trinary	1	done	2014-10-14 14:23:10	2014-10-07 05:19:39	2014-10-07 05:19:39	f5464921abc44ab9647c3deb	t
6	9	haskell	bob	7	pending	\N	2014-10-05 12:20:50	2014-10-05 12:20:50	eba7e3d1a1d1b2a6f69cb98a	f
7	9	ruby	sieve	1	pending	\N	2014-11-08 13:53:15	2014-11-08 13:53:15	0cf3bbb487e070d5ba45f0a5	f
8	11	ocaml	word-count	2	done	2014-11-29 10:44:43	2014-07-02 14:24:05	2014-07-02 14:24:05	fa1597a50f243caf5589f147	t
9	11	ruby	word-count	1	pending	\N	2014-07-11 02:54:26	2014-07-11 02:54:26	f423ee4f1c2ce769343d85d3	f
10	11	csharp	scrabble-score	1	done	2014-12-02 05:47:17	2014-11-30 07:32:28	2014-11-30 07:32:28	e2a5548b7d5655d48daea097	t
11	11	csharp	etl	1	done	2014-07-04 10:51:47	2014-06-26 20:22:39	2014-06-26 20:22:39	ec932c831e3437d55d6516cf	t
12	12	javascript	bob	1	done	2014-10-26 17:14:05	2014-10-19 04:17:37	2014-10-19 04:17:37	ecc4d7284a4e6b498458aef2	t
13	12	elixir	word-count	1	done	2014-08-17 13:01:22	2014-08-11 05:19:32	2014-08-11 05:19:32	e824691814d28f1f033d457e	t
14	12	scala	minesweeper	1	done	2014-09-14 01:01:51	2014-09-08 22:50:55	2014-09-08 22:50:55	d9814a7c89a2cfeae7e36d5e	t
15	12	javascript	space-age	1	done	2014-09-19 18:35:48	2014-09-09 23:09:47	2014-09-09 23:09:47	c2d037ddfec83ada698100d8	t
16	12	javascript	hamming	2	done	2014-09-13 23:27:06	2014-08-23 20:04:22	2014-08-23 20:04:22	629b9a7673f77aa613049d9f	t
17	12	ruby	gigasecond	1	done	2014-11-18 13:47:24	2014-11-10 12:55:20	2014-11-10 12:55:20	c93455ae25325afff476c97a	t
18	15	python	leap	1	done	2014-08-26 07:39:29	2014-08-23 20:30:44	2014-08-23 20:30:44	1d9b739af0bc322dc8ebf17e	t
19	15	haskell	nucleotide-count	3	pending	\N	2014-07-24 02:06:34	2014-07-24 02:06:34	df2a8b6f74d3c54916b67f8a	f
20	22	go	gigasecond	2	done	2015-01-04 11:51:30	2014-12-04 05:36:14	2014-12-04 05:36:14	facd82d6e1b7616546144b6b	t
21	22	ruby	grade-school	1	pending	\N	2014-12-26 04:19:33	2014-12-26 04:19:33	e7e6ad9a44e37d0bb7ab2ba9	f
22	22	ruby	triangle	2	done	2015-01-10 17:49:09	2014-12-13 05:46:40	2014-12-13 05:46:40	3f04a16b060bdbc28a0e1627	t
23	22	cpp	hamming	1	pending	\N	2014-12-15 12:02:55	2014-12-15 12:02:55	e4f2b4b9a443a3e2efa19757	f
24	22	ruby	etl	1	pending	\N	2014-12-12 09:43:56	2014-12-12 09:43:56	d0946b3e59be68bef7042a06	f
25	28	ruby	bob	5	done	2014-08-24 11:47:46	2014-06-29 08:57:02	2014-06-29 08:57:02	7edd8fbdcc2028da0eb31c8f	t
26	29	clojure	robot-name	1	pending	\N	2014-12-17 03:29:29	2014-12-17 03:29:29	81a1401bdd88be07dbfe20ac	f
27	29	go	scrabble-score	1	pending	\N	2014-11-22 05:14:23	2014-11-22 05:14:23	4eb03d5a4282eccfc1bc710f	f
28	31	javascript	word-count	2	pending	\N	2014-10-02 15:52:36	2014-10-02 15:52:36	029bc0db44387e17de559e6c	f
29	33	python	bob	1	done	2015-01-13 13:57:39	2015-01-07 01:04:47	2015-01-07 01:04:47	f3016b3c342c21143a6aaa67	t
30	33	csharp	hamming	1	done	2015-01-17 10:47:24.546833	2015-01-11 08:42:24	2015-01-11 08:42:24	b4175659d4314c631390f2ef	t
31	33	csharp	linked-list	1	pending	\N	2015-01-14 23:07:28	2015-01-14 23:07:28	fd3eaecc010d8c811c088d2d	f
32	33	cpp	bob	1	done	2015-01-14 12:15:31	2015-01-06 08:02:30	2015-01-06 08:02:30	1f18bd8164a1f6da7528c8d1	t
33	33	haskell	rna-transcription	1	pending	\N	2015-01-09 10:40:33	2015-01-09 10:40:33	be814fd7a9ba37ffc48a1493	f
34	33	python	rna-transcription	1	done	2015-01-12 19:15:32	2015-01-07 18:23:18	2015-01-07 18:23:18	2b4de2d01b93793e4cdda441	t
35	33	csharp	twelve-days	1	done	2015-01-13 16:43:56	2015-01-11 14:06:31	2015-01-11 14:06:31	e9a4ed65eb6bf9deef43151d	t
36	38	haskell	scrabble-score	1	done	2014-12-20 09:20:43	2014-12-14 04:15:08	2014-12-14 04:15:08	88e9a3f298e70ce0e590260a	t
37	38	ruby	anagram	1	done	2014-12-24 15:37:23	2014-12-19 06:59:16	2014-12-19 06:59:16	66a002a68e0e198aca1ade20	t
38	38	python	etl	1	done	2014-12-17 13:11:22	2014-12-15 04:06:34	2014-12-15 04:06:34	db3fddc9485da1f91020715f	t
39	38	javascript	etl	1	done	2014-12-19 18:00:36	2014-12-09 05:28:07	2014-12-09 05:28:07	97cb87fee6dab1b2a49faf87	t
40	38	ruby	phone-number	1	pending	\N	2014-12-23 16:44:00	2014-12-23 16:44:00	bb68765c32ada8376a43f1f1	f
41	38	ruby	binary-search-tree	1	done	2014-12-30 11:47:53	2014-12-20 21:25:42	2014-12-20 21:25:42	0a9575434c230d8146da8dd0	t
42	38	csharp	leap	2	pending	\N	2014-12-20 22:41:36	2014-12-20 22:41:36	0377958f588d0df7cab99ad5	f
43	40	ruby	hamming	2	done	2014-11-22 11:44:15	2014-11-16 19:27:41	2014-11-16 19:27:41	b8da2944c364e4eac655a641	t
44	40	go	nucleotide-count	3	done	2014-12-22 08:53:29	2014-11-23 01:36:47	2014-11-23 01:36:47	7d9c72916e659a049ee405f7	t
45	40	haskell	anagram	3	done	2014-12-04 03:00:05	2014-11-15 12:26:15	2014-11-15 12:26:15	d950949d5c8b84943e98775f	t
46	40	haskell	bob	1	done	2014-12-09 05:43:46	2014-12-02 23:13:22	2014-12-02 23:13:22	24ea9ec3a70dc1f9d6c77edb	t
47	40	scala	bob	1	done	2014-12-03 06:12:30	2014-12-02 02:29:20	2014-12-02 02:29:20	008c32934433a4632b9684b2	t
48	40	ruby	meetup	2	done	2014-12-18 03:07:23	2014-12-08 01:03:24	2014-12-08 01:03:24	21036cbd9d21d7ba84fb7346	t
49	40	ruby	twelve-days	2	done	2015-01-08 03:28:32	2014-12-18 19:53:51	2014-12-18 19:53:51	ccf77012b3f799e72e1c86f5	t
50	40	javascript	pythagorean-triplet	1	pending	\N	2014-12-22 15:31:51	2014-12-22 15:31:51	6a47265caae0ed6178322769	f
51	40	ruby	raindrops	11	pending	\N	2014-11-24 21:58:20	2014-11-24 21:58:20	a163ef1d8fbcaea64ff18cbd	f
52	40	javascript	word-count	3	pending	\N	2014-11-20 12:21:39	2014-11-20 12:21:39	e6df4be74b9a9fb9903d6a07	f
53	44	python	anagram	1	done	2014-12-20 07:43:20	2014-12-18 00:47:07	2014-12-18 00:47:07	62955283edfe4f06dde0f817	t
54	46	ruby	gigasecond	2	pending	\N	2014-06-18 19:17:38	2014-06-18 19:17:38	d5ae6960df01f139183fdcb4	f
55	46	javascript	anagram	4	done	2014-09-30 16:27:55	2014-05-24 02:35:16	2014-05-24 02:35:16	f56b92a312e762ea095ff3fb	t
56	46	cpp	gigasecond	1	done	2014-07-02 23:01:16	2014-07-02 08:44:03	2014-07-02 08:44:03	6d56914e5f3168abc50378b7	t
57	46	scala	robot-name	2	pending	\N	2014-06-24 11:17:38	2014-06-24 11:17:38	b17adaa3c88b603ac8d0a8aa	f
58	48	javascript	hamming	1	done	2014-10-24 04:14:32	2014-10-16 08:17:55	2014-10-16 08:17:55	f08c15f1ceb3509770d3a335	t
59	49	go	robot-name	2	pending	\N	2014-05-15 04:42:33	2014-05-15 04:42:33	1f212a7964e310647e1abebc	f
60	49	python	rna-transcription	3	pending	\N	2014-08-29 09:05:31	2014-08-29 09:05:31	70ae70e02187b00902878779	f
61	49	haskell	binary	4	pending	\N	2014-08-11 23:53:26	2014-08-11 23:53:26	f7202afba191dd73febc683a	f
62	49	ruby	word-count	1	pending	\N	2014-05-27 21:11:06	2014-05-27 21:11:06	768d08e636a66d1f6d21b664	f
63	26	clojure	rna-transcription	2	pending	\N	2014-12-31 15:10:02	2014-12-31 15:10:02	fad72bdefd82a67f52863941	f
64	26	python	space-age	1	pending	\N	2014-12-28 11:39:42	2014-12-28 11:39:42	3f99ac29d9934d238674ed8a	f
65	26	erlang	leap	1	pending	\N	2014-12-26 05:25:39	2014-12-26 05:25:39	c34762dc37e454f8e36b4313	f
66	26	elixir	point-mutations	1	pending	\N	2014-12-24 02:10:01	2014-12-24 02:10:01	abcf94423faa9571328555da	f
67	26	python	word-count	1	pending	\N	2014-12-25 14:21:16	2014-12-25 14:21:16	e8bd70806cfc337a2352bd76	f
68	26	csharp	robot-name	1	pending	\N	2014-12-25 03:03:20	2014-12-25 03:03:20	ec59bbf757e290b0ae2853e7	f
69	7	python	largest-series-product	1	pending	\N	2014-12-25 13:47:25	2014-12-25 13:47:25	8b1f834265f8e1ed9283df7b	f
70	7	ruby	sum-of-multiples	1	pending	\N	2014-10-30 05:04:30	2014-10-30 05:04:30	e5c8cabd87835aed668d3c76	f
71	7	ruby	bob	3	pending	\N	2014-10-25 22:19:03	2014-10-25 22:19:03	e9389df1a33d2e42f84bc280	f
72	7	javascript	hamming	1	pending	\N	2014-10-24 16:10:46	2014-10-24 16:10:46	6ed45d71cdf1b46d9c70a010	f
73	23	javascript	gigasecond	3	pending	\N	2014-11-03 16:22:26	2014-11-03 16:22:26	6adee491e388043d55e49c6e	f
74	17	haskell	grade-school	1	pending	\N	2015-01-01 15:45:14	2015-01-01 15:45:14	1b290aded111dec782abc5a6	f
75	17	ruby	anagram	1	pending	\N	2015-01-01 12:01:43	2015-01-01 12:01:43	a7197cb349a778ec69adc2eb	f
76	17	csharp	bob	2	pending	\N	2015-01-09 13:21:55	2015-01-09 13:21:55	6539a280172af72b5996ab23	f
77	17	scala	bob	1	pending	\N	2015-01-11 10:35:08	2015-01-11 10:35:08	1cbf1f40201e98b368dc4024	f
78	20	haskell	nucleotide-count	1	done	2014-10-19 06:49:20	2014-10-10 07:09:17	2014-10-10 07:09:17	7d3ee20cb97c03de383063ab	t
79	20	ruby	matrix	1	done	2014-09-06 16:13:58	2014-08-26 14:12:20	2014-08-26 14:12:20	675972bd59e47ec5281ace79	t
80	20	swift	leap	3	done	2014-12-29 23:02:20	2014-09-10 05:02:24	2014-09-10 05:02:24	6e92761746d2ff3a86716485	t
81	20	ruby	triangle	1	done	2014-10-08 16:03:57	2014-10-02 00:00:19	2014-10-02 00:00:19	be1e82e7c50bc3d0b23bddd9	t
82	20	perl5	bob	1	done	2014-08-26 16:56:02	2014-08-21 21:20:56	2014-08-21 21:20:56	f4066b9b8c55125c234abfaa	t
83	20	python	allergies	1	done	2014-08-30 03:12:09	2014-08-24 05:33:10	2014-08-24 05:33:10	ace9b2fd0d74c62ea4cfacbe	t
84	20	python	anagram	1	done	2014-09-30 11:28:31	2014-09-25 03:58:14	2014-09-25 03:58:14	7cb7a0fdfe01b28e6f8f4b22	t
85	21	haskell	rna-transcription	3	done	2015-01-17 10:47:26.902484	2015-01-15 08:50:23	2015-01-15 08:50:23	dd4c13645b9972f2f61fddc5	t
86	21	clojure	rna-transcription	1	done	2015-01-17 10:47:26.929943	2015-01-16 15:56:15	2015-01-16 15:56:15	7d5c0fd4c8237bf9891b84ef	t
87	21	python	series	1	done	2015-01-17 10:47:26.955016	2015-01-15 23:08:31	2015-01-15 23:08:31	c5a9d66a98761c0706331aed	t
88	21	ruby	gigasecond	1	done	2015-01-17 04:42:42	2015-01-17 02:51:08	2015-01-17 02:51:08	f9b3d48f9ce1e90f71107eb3	t
89	36	ruby	hamming	2	done	2014-10-03 22:14:56	2014-09-27 02:09:45	2014-09-27 02:09:45	8f8c7ff2b777e73b9e66e39c	t
90	36	clojure	point-mutations	2	done	2014-12-26 11:43:04	2014-09-06 15:54:34	2014-09-06 15:54:34	ba2f605230b44c4c76ec5748	t
91	30	clojure	anagram	2	done	2014-12-20 08:28:17	2014-12-14 14:44:57	2014-12-14 14:44:57	44919159ab9d4cdafbcfe2ed	t
92	35	haskell	bob	4	done	2014-07-13 15:28:35	2014-07-03 16:28:44	2014-07-03 16:28:44	48983966e643242ce62936fe	t
93	35	haskell	accumulate	2	done	2014-05-08 21:06:38	2014-04-30 10:48:04	2014-04-30 10:48:04	baeddf185643549b47c85a6f	t
94	35	elixir	anagram	2	done	2014-09-18 01:00:54	2014-05-11 09:58:21	2014-05-11 09:58:21	68c4a93443dce3c004637cd2	t
95	35	go	gigasecond	1	done	2014-06-02 09:37:40	2014-05-27 19:28:02	2014-05-27 19:28:02	f7814f92c2c672869d58d21c	t
96	14	ruby	nucleotide-count	1	pending	\N	2015-01-07 15:29:55	2015-01-07 15:29:55	6781f981ba087c9b2fadfc45	f
97	14	javascript	hamming	1	pending	\N	2014-12-06 00:14:09	2014-12-06 00:14:09	dad368c03dd99f4166a7fd0d	f
98	14	javascript	bob	6	pending	\N	2014-12-06 19:20:26	2014-12-06 19:20:26	87e6aea575fff44c12e9ea76	f
99	14	go	clock	2	pending	\N	2014-12-05 09:06:12	2014-12-05 09:06:12	9f6a587917521930bc153644	f
100	14	clojure	word-count	1	pending	\N	2014-12-08 09:14:09	2014-12-08 09:14:09	6553422e34996f5c9cb1492f	f
101	14	clojure	anagram	1	pending	\N	2014-12-20 05:05:10	2014-12-20 05:05:10	53cd330a81aa4ab4d2196729	f
102	41	haskell	queen-attack	3	pending	\N	2014-05-12 04:59:57	2014-05-12 04:59:57	d5f94787394ecfae0def6244	f
103	41	go	queen-attack	1	pending	\N	2014-05-06 19:24:16	2014-05-06 19:24:16	bc466d23caeab163e78f90d0	f
104	41	haskell	phone-number	1	pending	\N	2014-05-11 21:02:07	2014-05-11 21:02:07	e00d07be7f5c57c6944386e9	f
105	41	clojure	nucleotide-count	1	pending	\N	2014-11-04 02:05:50	2014-11-04 02:05:50	b2e4416cbd6a88d86fd486ae	f
106	41	go	leap	2	pending	\N	2014-05-08 18:20:16	2014-05-08 18:20:16	35698f16887845b2caf116c5	f
107	41	ruby	grains	4	pending	\N	2014-05-07 16:08:32	2014-05-07 16:08:32	6fb52d4fdb4dcac5c389b565	f
108	41	python	rna-transcription	1	pending	\N	2014-09-27 11:51:39	2014-09-27 11:51:39	a329934b22558ab95e9f2334	f
109	41	javascript	word-count	1	pending	\N	2014-11-30 21:13:29	2014-11-30 21:13:29	9597600e3bbbf0dc270a0aad	f
110	41	ruby	phone-number	6	pending	\N	2014-06-13 20:49:07	2014-06-13 20:49:07	966e803ea708a2eb4fa3b161	f
111	41	javascript	anagram	1	pending	\N	2014-08-01 11:01:12	2014-08-01 11:01:12	55c89589a18e0b6fe98531ef	f
112	41	python	leap	1	pending	\N	2014-05-09 18:43:13	2014-05-09 18:43:13	ea5db150ac05a61faa61e132	f
113	41	javascript	robot-name	1	pending	\N	2014-05-30 22:15:00	2014-05-30 22:15:00	6496d31efb6de99110d9c65d	f
114	41	python	hamming	1	pending	\N	2014-09-13 01:43:29	2014-09-13 01:43:29	9a9c97402dda7e0999c717d6	f
115	41	ruby	space-age	1	pending	\N	2014-06-12 09:30:24	2014-06-12 09:30:24	0ca9b3f977cde06d5d6afe79	f
116	41	clojure	anagram	11	pending	\N	2014-05-16 07:25:19	2014-05-16 07:25:19	dad9e0b99fa3b304d64d36d9	f
117	41	ruby	roman-numerals	1	pending	\N	2014-08-30 12:52:30	2014-08-30 12:52:30	4670ef0c4bdfad9e1f030406	f
118	41	python	anagram	6	pending	\N	2014-06-16 17:43:08	2014-06-16 17:43:08	22e5753d50784832590a84d7	f
119	41	scala	anagram	1	pending	\N	2014-05-10 03:56:56	2014-05-10 03:56:56	641735c2a5272bc4759fcc7c	f
120	41	haskell	space-age	1	pending	\N	2014-05-08 02:12:45	2014-05-08 02:12:45	c058bd3ddb5c89ed68625568	f
121	41	python	bob	4	pending	\N	2014-08-11 12:58:21	2014-08-11 12:58:21	204c5361c2a19b1f07d63c93	f
122	41	ruby	rna-transcription	2	pending	\N	2014-05-20 12:24:04	2014-05-20 12:24:04	cd03e0b1f24104ef5add553d	f
123	41	ruby	bob	1	pending	\N	2014-06-02 09:56:29	2014-06-02 09:56:29	c5353f857c8746b6a5726d94	f
124	41	haskell	accumulate	2	pending	\N	2014-07-25 07:20:47	2014-07-25 07:20:47	f383ecc88f12c8a3357c321d	f
125	41	ruby	hamming	1	pending	\N	2014-09-05 20:58:05	2014-09-05 20:58:05	cd41a4b0fad7e3dc288cb14d	f
126	41	ruby	grade-school	7	pending	\N	2014-06-25 17:03:09	2014-06-25 17:03:09	5ba06fde5128f38c2de0ddd2	f
127	41	javascript	bob	9	pending	\N	2014-05-27 20:01:00	2014-05-27 20:01:00	829208a6f51458b91756f45b	f
128	41	python	beer-song	1	pending	\N	2014-08-31 23:57:29	2014-08-31 23:57:29	eaa57eadb5550dba40e8c372	f
129	41	ruby	secret-handshake	1	pending	\N	2014-10-07 21:52:29	2014-10-07 21:52:29	d20a27a7621f05842cb7b1dd	f
130	41	ruby	anagram	3	pending	\N	2014-05-16 13:18:06	2014-05-16 13:18:06	3a7e7780b4e322bfe277fc86	f
131	41	ruby	trinary	1	pending	\N	2014-11-18 19:29:24	2014-11-18 19:29:24	8320d8705ad202e95b8f84f9	f
132	41	go	rna-transcription	4	pending	\N	2014-05-22 13:01:02	2014-05-22 13:01:02	5684b4f95ea1e5218c8e057d	f
133	41	python	minesweeper	1	pending	\N	2014-06-15 06:33:38	2014-06-15 06:33:38	a52cecd3981cc5e73e1c0d3a	f
134	41	haskell	leap	2	pending	\N	2014-06-24 15:31:00	2014-06-24 15:31:00	7b1b7a998454d605195b9964	f
135	41	ruby	nucleotide-count	3	pending	\N	2014-05-21 06:30:50	2014-05-21 06:30:50	6d9a3abd1dff745d1927fb72	f
136	41	python	grains	1	pending	\N	2014-08-18 01:23:28	2014-08-18 01:23:28	aadc8e9a57763cc1e2cbb6d5	f
137	41	ruby	clock	1	pending	\N	2014-10-22 11:51:09	2014-10-22 11:51:09	e21cd1b9391ece72aa107262	f
138	6	python	rna-transcription	1	pending	\N	2014-10-12 01:34:10	2014-10-12 01:34:10	4ac825788745f0eb5d7d13ca	f
139	6	haskell	sublist	1	pending	\N	2014-12-02 08:41:39	2014-12-02 08:41:39	26a9af9f54c446a822f75795	f
140	34	csharp	hamming	3	pending	\N	2015-01-14 21:19:54	2015-01-14 21:19:54	02213c8d050592b0157fb4f8	f
141	16	python	meetup	3	pending	\N	2014-06-06 09:12:18	2014-06-06 09:12:18	be5b9e4187f3296cbfea227a	f
142	16	haskell	phone-number	3	pending	\N	2014-08-08 05:31:45	2014-08-08 05:31:45	ef5d8a2f881f6280fa0d8de6	f
143	16	lua	hamming	1	pending	\N	2014-04-27 19:41:43	2014-04-27 19:41:43	2699942b8c1734508701ef90	f
144	16	clojure	prime-factors	2	pending	\N	2014-08-27 05:49:41	2014-08-27 05:49:41	98cac338ffd467c72aa13955	f
145	18	ruby	anagram	1	pending	\N	2014-10-10 00:24:19	2014-10-10 00:24:19	9517a22194dd373b1d804c84	f
146	18	coffeescript	bob	1	pending	\N	2014-07-09 17:52:58	2014-07-09 17:52:58	fa9a682c16ffd32dd78c5c4e	f
147	18	python	bob	1	pending	\N	2014-10-11 19:06:48	2014-10-11 19:06:48	b491737a7f246d7086dd86e5	f
148	24	haskell	sum-of-multiples	2	pending	\N	2014-07-29 09:10:39	2014-07-29 09:10:39	6109a98225c8a53603cd0ca0	f
149	24	python	bob	2	pending	\N	2014-07-22 19:43:47	2014-07-22 19:43:47	0a2477e42f257f9335241350	f
150	24	javascript	prime-factors	1	pending	\N	2014-08-17 04:57:00	2014-08-17 04:57:00	331799d48540f5381886e0f3	f
151	24	clojure	anagram	1	pending	\N	2014-07-31 23:24:38	2014-07-31 23:24:38	050f878757e8b04be5d1a466	f
152	24	python	roman-numerals	1	pending	\N	2014-07-24 17:52:06	2014-07-24 17:52:06	974bf89d162486c537b6d22e	f
153	42	haskell	space-age	3	pending	\N	2015-01-05 15:48:15	2015-01-05 15:48:15	c9c34c7b123ae79e38ff32f4	f
154	27	csharp	leap	1	pending	\N	2014-11-01 04:13:01	2014-11-01 04:13:01	9fd7e95b5a7b2a02b184b58b	f
155	27	csharp	twelve-days	2	pending	\N	2014-07-09 23:31:35	2014-07-09 23:31:35	e8358642dfe4dce0159e8b32	f
156	27	clojure	leap	1	pending	\N	2014-09-20 19:59:40	2014-09-20 19:59:40	11a57444f4d35d3501492a31	f
157	27	cpp	bob	3	pending	\N	2014-07-10 04:58:55	2014-07-10 04:58:55	594cf4663447f0f0f3c7bc63	f
158	27	python	leap	1	pending	\N	2014-09-22 17:50:51	2014-09-22 17:50:51	f02eeadf5a945f491695ed61	f
159	27	haskell	phone-number	4	pending	\N	2014-06-27 23:16:00	2014-06-27 23:16:00	4da4ebcb958b44c3275ca00d	f
160	27	javascript	bob	3	pending	\N	2014-06-15 07:51:45	2014-06-15 07:51:45	7407137132a0baa3b66336f1	f
161	45	ruby	gigasecond	1	pending	\N	2014-12-08 11:28:23	2014-12-08 11:28:23	be75d951456ed1b4fe1a58f4	f
162	45	elixir	bob	1	pending	\N	2014-11-24 07:51:38	2014-11-24 07:51:38	26e79736414f38b4ccf417c0	f
163	45	elixir	word-count	5	pending	\N	2014-11-23 03:10:29	2014-11-23 03:10:29	0d1a840300358ec6f50ae578	f
164	45	clojure	atbash-cipher	1	pending	\N	2015-01-02 12:25:08	2015-01-02 12:25:08	3f1ab1b866138f0f0ea4e236	f
165	45	csharp	triangle	1	pending	\N	2014-11-21 00:31:23	2014-11-21 00:31:23	f9c9307ccca01ec258697699	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 165, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	szz339	--- []\n	2014-10-11 21:33:06.08695	2014-10-11 21:33:06.08695	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg	-28290	nkk700	--- []\n	2014-10-02 18:45:33.147572	2014-10-02 18:45:33.147572	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg	-46541	axh352	--- []\n	2014-10-19 09:28:26.155214	2014-10-19 09:28:26.155214	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg	-12696	sej604	--- []\n	2014-06-23 21:30:04.158268	2014-06-23 21:30:04.158268	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg	-63113	zva684	--- []\n	2014-10-18 19:15:03.163014	2014-10-18 19:15:03.163014	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg	-39701	zca891	--- []\n	2014-09-21 00:36:40.170015	2014-09-21 00:36:40.170015	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg	-63232	nsf609	--- []\n	2014-12-04 15:49:05.17175	2014-12-04 15:49:05.17175	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg	-67214	ukm333	--- []\n	2014-04-26 13:49:00.177221	2014-04-26 13:49:00.177221	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg	-42229	lvv851	--- []\n	2014-12-30 18:56:01.179988	2014-12-30 18:56:01.179988	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/g1sh/128.jpg	-48404	tsb161	--- []\n	2014-06-03 21:20:29.182953	2014-06-03 21:20:29.182953	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg	-98027	amc294	--- []\n	2014-06-22 03:08:52.185651	2014-06-22 03:08:52.185651	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg	-96047	xle713	--- []\n	2014-08-15 06:22:34.188968	2014-08-15 06:22:34.188968	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg	-12369	uyz628	--- []\n	2015-01-15 03:02:18.192293	2015-01-15 03:02:18.192293	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg	-59876	eco676	--- []\n	2014-09-27 04:14:14.200735	2014-09-27 04:14:14.200735	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg	-12592	kzu388	--- []\n	2014-06-27 02:02:58.203684	2014-06-27 02:02:58.203684	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg	-21382	emz229	--- []\n	2014-07-04 03:49:20.206312	2014-07-04 03:49:20.206312	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg	-33964	cqm893	--- []\n	2014-12-23 15:18:20.208863	2014-12-23 15:18:20.208863	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg	-76116	upi406	--- []\n	2014-06-05 16:53:33.211629	2014-06-05 16:53:33.211629	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg	-64926	whx872	--- []\n	2014-09-16 02:22:21.219095	2014-09-16 02:22:21.219095	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg	-94271	ixl107	--- []\n	2014-10-04 08:35:50.224791	2014-10-04 08:35:50.224791	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg	-43268	qmy677	--- []\n	2015-01-14 08:59:42.230042	2015-01-14 08:59:42.230042	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg	-72713	ynq272	--- []\n	2014-04-29 13:10:18.23253	2014-04-29 13:10:18.23253	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg	-66118	luf997	--- []\n	2014-08-31 14:31:50.235445	2014-08-31 14:31:50.235445	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg	-59906	spx897	--- []\n	2014-11-07 20:35:21.237983	2014-11-07 20:35:21.237983	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg	-93665	bmb380	--- []\n	2014-10-27 18:27:49.242985	2014-10-27 18:27:49.242985	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg	-71931	zlf695	--- []\n	2014-05-05 15:34:26.24718	2014-05-05 15:34:26.24718	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg	-19400	vdb942	--- []\n	2015-01-04 07:19:28.249853	2015-01-04 07:19:28.249853	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg	-55810	xfk159	--- []\n	2014-12-17 00:04:21.252494	2014-12-17 00:04:21.252494	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg	-54716	cig695	--- []\n	2014-11-16 06:20:11.257992	2014-11-16 06:20:11.257992	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg	-22029	nut299	--- []\n	2014-10-27 23:23:29.263006	2014-10-27 23:23:29.263006	\N
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg	-70750	sau808	--- []\n	2014-05-12 09:06:14.267716	2014-05-12 09:06:14.267716	\N
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nachtmeister/128.jpg	-73064	ycq341	--- []\n	2014-07-02 11:42:17.167248	2014-07-02 11:42:17.167248	2014-09-03 13:15:09
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg	-31629	ujo791	--- []\n	2014-09-30 13:35:41.264885	2014-09-30 13:35:41.264885	2014-07-16 11:07:24
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/wr/128.jpg	-66526	fay436	--- []\n	2015-01-06 03:51:42.227496	2015-01-06 03:51:42.227496	2014-09-07 14:08:27
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg	-80388	kxl273	--- []\n	2014-08-27 02:37:06.221469	2014-08-27 02:37:06.221469	2014-10-22 01:21:24
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg	-38207	wkt103	--- []\n	2014-11-15 01:06:26.255441	2014-11-15 01:06:26.255441	2014-08-10 11:23:17
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg	-72327	cqk510	--- []\n	2014-06-20 03:10:21.214175	2014-06-20 03:10:21.214175	2014-10-11 13:24:07
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg	-28148	dno897	--- []\n	2014-09-12 06:58:07.160411	2014-09-12 06:58:07.160411	2014-08-19 18:42:14
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg	-61438	ywj769	---\n- javascript\n- erlang\n- elixir\n	2014-09-18 06:27:38.123923	2014-09-18 06:27:38.123923	2014-09-29 02:35:03
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/syntetyc/128.jpg	-78159	dhz108	--- []\n	2014-11-14 03:13:11.24468	2014-11-14 03:13:11.24468	2014-10-05 02:59:29
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg	-80193	foh852	---\n- python\n	2014-07-29 12:57:49.126006	2014-07-29 12:57:49.126006	2014-07-27 00:49:25
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg	-63082	qyq149	--- []\n	2014-07-01 13:37:05.174347	2014-07-01 13:37:05.174347	2014-09-10 05:37:13
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg	-75525	bjf914	--- []\n	2014-12-02 21:12:33.197238	2014-12-02 21:12:33.197238	2014-08-21 20:18:56
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg	-37671	rjr222	---\n- ruby\n- haskell\n	2014-12-09 12:31:24.121587	2014-12-09 12:31:24.121587	2014-09-03 12:40:11
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg	-5066	kbp740	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-08-09 15:30:08.119198	2014-08-09 15:30:08.119198	2014-07-14 06:15:02
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg	-73194	xyj272	--- []\n	2014-11-15 07:06:59.21665	2014-11-15 07:06:59.21665	2014-09-03 22:12:25
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg	-48332	eqi768	--- []\n	2014-12-05 08:14:35.240466	2014-12-05 08:14:35.240466	2014-08-21 01:41:47
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg	-49708	uth324	--- []\n	2014-05-03 10:37:00.26049	2014-05-03 10:37:00.26049	2014-10-31 20:33:14
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg	-5410	oth575	--- []\n	2014-05-19 16:04:32.164675	2014-05-19 16:04:32.164675	2014-08-26 15:41:54
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- PostgreSQL database dump complete
--

