--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	16	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-30 13:33:17	2014-10-30 13:33:17
2	17	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-17 18:25:40	2014-10-17 18:25:40
3	29	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-29 11:27:20	2014-10-29 11:27:20
4	32	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-26 05:28:41	2014-10-26 05:28:41
5	38	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-14 09:27:23	2014-11-14 09:27:23
6	42	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-25 01:57:00	2014-10-25 01:57:00
7	43	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-11-15 06:36:24	2014-11-15 06:36:24
8	47	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-10-16 15:52:35	2014-10-16 15:52:35
9	19	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-11-22 06:42:19	2014-11-22 06:42:19
10	38	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-11-25 13:15:41	2014-11-25 13:15:41
11	38	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-08-01 09:31:00	2014-08-01 09:31:00
12	3	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-07-17 21:03:40	2014-07-17 21:03:40
13	38	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-03-29 11:32:34	2014-03-29 11:32:34
14	12	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-04-23 19:08:04	2014-04-23 19:08:04
15	14	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-01 20:26:45	2014-07-01 20:26:45
16	41	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-08-26 14:19:17	2014-08-26 14:19:17
17	38	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-08-31 02:50:41	2014-08-31 02:50:41
18	3	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-09-16 11:12:15	2014-09-16 11:12:15
19	38	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-10-07 00:30:36	2014-10-07 00:30:36
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	11	1	A COMMENT	\N	2014-08-16 12:06:58	2014-08-16 12:06:58
2	28	1	A COMMENT	\N	2014-08-24 22:24:12	2014-08-24 22:24:12
3	29	1	A COMMENT	\N	2014-08-25 19:30:03	2014-08-25 19:30:03
4	22	1	A COMMENT	\N	2014-09-05 22:29:37	2014-09-05 22:29:37
5	5	1	A COMMENT	\N	2014-09-07 22:30:19	2014-09-07 22:30:19
6	2	1	A COMMENT	\N	2014-09-08 02:04:04	2014-09-08 02:04:04
7	29	1	A COMMENT	\N	2014-10-09 20:40:27	2014-10-09 20:40:27
8	22	1	A COMMENT	\N	2014-10-22 16:39:02	2014-10-22 16:39:02
9	11	2	A COMMENT	\N	2014-06-18 17:27:08	2014-06-18 17:27:08
10	22	3	A COMMENT	\N	2014-09-10 02:26:23	2014-09-10 02:26:23
11	48	4	A COMMENT	\N	2014-09-10 14:39:17	2014-09-10 14:39:17
12	46	4	A COMMENT	\N	2014-09-11 02:20:10	2014-09-11 02:20:10
13	12	4	A COMMENT	\N	2014-09-19 16:03:08	2014-09-19 16:03:08
14	5	4	A COMMENT	\N	2014-09-28 16:18:17	2014-09-28 16:18:17
15	2	4	A COMMENT	\N	2014-10-18 18:15:37	2014-10-18 18:15:37
16	11	4	A COMMENT	\N	2014-11-02 21:10:15	2014-11-02 21:10:15
17	38	4	A COMMENT	\N	2014-11-19 14:26:23	2014-11-19 14:26:23
18	46	6	A COMMENT	\N	2014-07-27 17:03:13	2014-07-27 17:03:13
19	44	6	A COMMENT	\N	2014-08-04 08:04:46	2014-08-04 08:04:46
20	48	6	A COMMENT	\N	2014-08-05 07:48:41	2014-08-05 07:48:41
21	22	6	A COMMENT	\N	2014-08-05 13:24:32	2014-08-05 13:24:32
22	22	6	A COMMENT	\N	2014-08-13 22:08:28	2014-08-13 22:08:28
23	38	6	A COMMENT	\N	2014-08-16 08:49:35	2014-08-16 08:49:35
24	11	6	A COMMENT	\N	2014-08-21 11:09:26	2014-08-21 11:09:26
25	9	6	A COMMENT	\N	2014-08-25 02:44:42	2014-08-25 02:44:42
26	5	6	A COMMENT	\N	2014-08-28 12:01:35	2014-08-28 12:01:35
27	46	6	A COMMENT	\N	2014-08-31 03:40:10	2014-08-31 03:40:10
28	31	6	A COMMENT	\N	2014-09-07 11:36:02	2014-09-07 11:36:02
29	33	6	A COMMENT	\N	2014-09-18 08:13:31	2014-09-18 08:13:31
30	29	6	A COMMENT	\N	2014-10-01 18:36:28	2014-10-01 18:36:28
31	15	6	A COMMENT	\N	2014-10-03 06:34:35	2014-10-03 06:34:35
32	11	6	A COMMENT	\N	2014-10-23 16:43:55	2014-10-23 16:43:55
33	3	6	A COMMENT	\N	2014-10-30 06:30:33	2014-10-30 06:30:33
34	15	6	A COMMENT	\N	2014-11-08 12:30:20	2014-11-08 12:30:20
35	44	6	A COMMENT	\N	2014-11-24 22:18:26	2014-11-24 22:18:26
36	11	7	A COMMENT	\N	2014-09-26 17:42:49	2014-09-26 17:42:49
37	15	8	A COMMENT	\N	2014-07-19 10:49:59	2014-07-19 10:49:59
38	2	8	A COMMENT	\N	2014-07-21 07:42:34	2014-07-21 07:42:34
39	44	8	A COMMENT	\N	2014-07-24 00:40:33	2014-07-24 00:40:33
40	33	8	A COMMENT	\N	2014-07-31 03:36:18	2014-07-31 03:36:18
41	22	8	A COMMENT	\N	2014-08-02 14:30:04	2014-08-02 14:30:04
42	28	8	A COMMENT	\N	2014-08-26 22:11:53	2014-08-26 22:11:53
43	9	8	A COMMENT	\N	2014-08-28 04:31:46	2014-08-28 04:31:46
44	5	8	A COMMENT	\N	2014-09-03 21:20:22	2014-09-03 21:20:22
45	3	8	A COMMENT	\N	2014-10-04 03:47:42	2014-10-04 03:47:42
46	33	8	A COMMENT	\N	2014-10-04 23:50:29	2014-10-04 23:50:29
47	44	8	A COMMENT	\N	2014-10-15 19:11:36	2014-10-15 19:11:36
48	3	8	A COMMENT	\N	2014-10-28 06:23:15	2014-10-28 06:23:15
49	9	8	A COMMENT	\N	2014-11-14 21:36:00	2014-11-14 21:36:00
50	28	8	A COMMENT	\N	2014-11-20 12:30:33	2014-11-20 12:30:33
51	9	9	A COMMENT	\N	2014-09-23 00:51:41	2014-09-23 00:51:41
52	15	9	A COMMENT	\N	2014-09-24 02:22:46	2014-09-24 02:22:46
53	11	10	A COMMENT	\N	2014-06-21 23:47:58	2014-06-21 23:47:58
54	11	11	A COMMENT	\N	2014-07-21 04:05:47	2014-07-21 04:05:47
55	44	11	A COMMENT	\N	2014-08-27 11:30:05	2014-08-27 11:30:05
56	44	11	A COMMENT	\N	2014-09-16 01:24:10	2014-09-16 01:24:10
57	11	11	A COMMENT	\N	2014-09-17 13:42:06	2014-09-17 13:42:06
58	4	11	A COMMENT	\N	2014-10-28 16:07:20	2014-10-28 16:07:20
59	3	11	A COMMENT	\N	2014-11-21 13:09:39	2014-11-21 13:09:39
60	11	12	A COMMENT	\N	2014-10-21 03:25:42	2014-10-21 03:25:42
61	5	12	A COMMENT	\N	2014-10-26 13:53:35	2014-10-26 13:53:35
62	3	12	A COMMENT	\N	2014-10-29 14:29:34	2014-10-29 14:29:34
63	9	12	A COMMENT	\N	2014-10-30 18:46:32	2014-10-30 18:46:32
64	40	12	A COMMENT	\N	2014-11-17 18:18:50	2014-11-17 18:18:50
65	31	12	A COMMENT	\N	2014-11-17 20:32:58	2014-11-17 20:32:58
66	4	12	A COMMENT	\N	2014-11-18 13:55:35	2014-11-18 13:55:35
67	5	12	A COMMENT	\N	2014-11-22 03:51:08	2014-11-22 03:51:08
68	29	12	A COMMENT	\N	2014-11-23 03:03:53	2014-11-23 03:03:53
69	29	12	A COMMENT	\N	2014-11-23 16:52:17	2014-11-23 16:52:17
70	11	13	A COMMENT	\N	2014-07-04 09:18:07	2014-07-04 09:18:07
71	5	14	A COMMENT	\N	2014-08-28 06:54:47	2014-08-28 06:54:47
72	44	14	A COMMENT	\N	2014-09-08 21:05:31	2014-09-08 21:05:31
73	22	14	A COMMENT	\N	2014-09-15 17:19:25	2014-09-15 17:19:25
74	2	14	A COMMENT	\N	2014-10-12 23:01:49	2014-10-12 23:01:49
75	5	14	A COMMENT	\N	2014-10-28 17:59:16	2014-10-28 17:59:16
76	11	15	A COMMENT	\N	2014-07-05 04:26:55	2014-07-05 04:26:55
77	40	15	A COMMENT	\N	2014-07-27 17:12:14	2014-07-27 17:12:14
78	3	15	A COMMENT	\N	2014-07-28 02:45:33	2014-07-28 02:45:33
79	28	16	A COMMENT	\N	2014-06-10 10:02:00	2014-06-10 10:02:00
80	15	16	A COMMENT	\N	2014-06-24 04:58:41	2014-06-24 04:58:41
81	11	16	A COMMENT	\N	2014-06-26 09:41:34	2014-06-26 09:41:34
82	33	16	A COMMENT	\N	2014-07-12 01:59:09	2014-07-12 01:59:09
83	9	16	A COMMENT	\N	2014-09-01 17:31:15	2014-09-01 17:31:15
84	28	16	A COMMENT	\N	2014-09-21 11:09:58	2014-09-21 11:09:58
85	31	16	A COMMENT	\N	2014-10-06 19:42:53	2014-10-06 19:42:53
86	15	16	A COMMENT	\N	2014-10-14 21:11:10	2014-10-14 21:11:10
87	29	16	A COMMENT	\N	2014-10-20 08:45:20	2014-10-20 08:45:20
88	12	16	A COMMENT	\N	2014-10-31 03:09:52	2014-10-31 03:09:52
89	4	16	A COMMENT	\N	2014-11-05 11:31:33	2014-11-05 11:31:33
90	11	17	A COMMENT	\N	2014-08-05 22:42:46	2014-08-05 22:42:46
91	40	17	A COMMENT	\N	2014-08-09 22:28:41	2014-08-09 22:28:41
92	15	17	A COMMENT	\N	2014-08-15 20:12:06	2014-08-15 20:12:06
93	29	17	A COMMENT	\N	2014-08-18 02:01:01	2014-08-18 02:01:01
94	3	17	A COMMENT	\N	2014-08-21 07:12:13	2014-08-21 07:12:13
95	15	17	A COMMENT	\N	2014-10-04 18:27:54	2014-10-04 18:27:54
96	22	17	A COMMENT	\N	2014-10-05 02:51:48	2014-10-05 02:51:48
97	3	17	A COMMENT	\N	2014-10-09 20:08:13	2014-10-09 20:08:13
98	5	17	A COMMENT	\N	2014-10-21 04:51:44	2014-10-21 04:51:44
99	11	17	A COMMENT	\N	2014-11-15 16:10:53	2014-11-15 16:10:53
100	29	17	A COMMENT	\N	2014-11-26 23:46:16	2014-11-26 23:46:16
101	4	18	A COMMENT	\N	2014-10-13 09:43:55	2014-10-13 09:43:55
102	2	18	A COMMENT	\N	2014-10-13 10:22:50	2014-10-13 10:22:50
103	12	18	A COMMENT	\N	2014-10-20 15:17:50	2014-10-20 15:17:50
104	15	18	A COMMENT	\N	2014-11-27 22:07:53	2014-11-27 22:07:53
105	33	19	A COMMENT	\N	2014-10-13 12:24:34	2014-10-13 12:24:34
106	48	19	A COMMENT	\N	2014-11-17 04:34:29	2014-11-17 04:34:29
107	3	19	A COMMENT	\N	2014-11-21 17:56:15	2014-11-21 17:56:15
108	15	21	A COMMENT	\N	2014-10-09 03:18:43	2014-10-09 03:18:43
109	33	21	A COMMENT	\N	2014-11-22 06:41:07	2014-11-22 06:41:07
110	5	23	A COMMENT	\N	2014-07-17 16:55:35	2014-07-17 16:55:35
111	44	23	A COMMENT	\N	2014-07-21 04:14:55	2014-07-21 04:14:55
112	31	23	A COMMENT	\N	2014-08-10 21:56:26	2014-08-10 21:56:26
113	12	23	A COMMENT	\N	2014-08-23 01:06:30	2014-08-23 01:06:30
114	46	23	A COMMENT	\N	2014-09-13 23:48:30	2014-09-13 23:48:30
115	46	23	A COMMENT	\N	2014-09-18 15:46:31	2014-09-18 15:46:31
116	22	23	A COMMENT	\N	2014-09-25 00:18:26	2014-09-25 00:18:26
117	4	23	A COMMENT	\N	2014-11-19 17:11:17	2014-11-19 17:11:17
118	29	23	A COMMENT	\N	2014-11-22 19:18:55	2014-11-22 19:18:55
119	15	23	A COMMENT	\N	2014-11-26 21:58:31	2014-11-26 21:58:31
120	11	24	A COMMENT	\N	2014-08-20 23:36:52	2014-08-20 23:36:52
121	33	24	A COMMENT	\N	2014-08-24 13:29:39	2014-08-24 13:29:39
122	12	24	A COMMENT	\N	2014-08-26 17:30:20	2014-08-26 17:30:20
123	48	24	A COMMENT	\N	2014-08-28 06:55:17	2014-08-28 06:55:17
124	11	24	A COMMENT	\N	2014-08-31 04:52:24	2014-08-31 04:52:24
125	22	24	A COMMENT	\N	2014-09-09 18:06:52	2014-09-09 18:06:52
126	12	24	A COMMENT	\N	2014-09-13 16:45:01	2014-09-13 16:45:01
127	11	24	A COMMENT	\N	2014-09-14 12:35:24	2014-09-14 12:35:24
128	28	24	A COMMENT	\N	2014-09-21 19:16:36	2014-09-21 19:16:36
129	15	24	A COMMENT	\N	2014-10-05 03:48:02	2014-10-05 03:48:02
130	44	24	A COMMENT	\N	2014-11-05 04:06:01	2014-11-05 04:06:01
131	22	24	A COMMENT	\N	2014-11-18 15:20:08	2014-11-18 15:20:08
132	2	24	A COMMENT	\N	2014-11-21 18:37:49	2014-11-21 18:37:49
133	4	24	A COMMENT	\N	2014-11-21 20:11:22	2014-11-21 20:11:22
134	31	25	A COMMENT	\N	2014-09-06 13:03:47	2014-09-06 13:03:47
135	48	25	A COMMENT	\N	2014-11-01 06:04:17	2014-11-01 06:04:17
136	48	25	A COMMENT	\N	2014-11-17 16:40:46	2014-11-17 16:40:46
137	2	26	A COMMENT	\N	2014-05-21 11:37:09	2014-05-21 11:37:09
138	40	26	A COMMENT	\N	2014-06-19 12:08:10	2014-06-19 12:08:10
139	3	26	A COMMENT	\N	2014-07-24 20:35:44	2014-07-24 20:35:44
140	9	26	A COMMENT	\N	2014-08-14 23:17:02	2014-08-14 23:17:02
141	31	26	A COMMENT	\N	2014-08-19 23:46:20	2014-08-19 23:46:20
142	28	26	A COMMENT	\N	2014-09-02 23:17:24	2014-09-02 23:17:24
143	33	26	A COMMENT	\N	2014-09-07 17:56:50	2014-09-07 17:56:50
144	29	26	A COMMENT	\N	2014-09-17 06:46:50	2014-09-17 06:46:50
145	46	26	A COMMENT	\N	2014-09-19 09:17:33	2014-09-19 09:17:33
146	5	27	A COMMENT	\N	2014-07-31 09:09:01	2014-07-31 09:09:01
147	11	28	A COMMENT	\N	2014-05-20 15:20:22	2014-05-20 15:20:22
148	12	28	A COMMENT	\N	2014-07-04 09:43:26	2014-07-04 09:43:26
149	4	28	A COMMENT	\N	2014-10-15 05:31:04	2014-10-15 05:31:04
150	5	29	A COMMENT	\N	2014-08-28 16:52:50	2014-08-28 16:52:50
151	48	29	A COMMENT	\N	2014-09-02 08:11:58	2014-09-02 08:11:58
152	28	29	A COMMENT	\N	2014-09-05 12:58:01	2014-09-05 12:58:01
153	46	29	A COMMENT	\N	2014-10-01 15:22:27	2014-10-01 15:22:27
154	3	29	A COMMENT	\N	2014-10-01 23:30:32	2014-10-01 23:30:32
155	31	29	A COMMENT	\N	2014-10-26 13:27:09	2014-10-26 13:27:09
156	48	29	A COMMENT	\N	2014-11-02 23:21:18	2014-11-02 23:21:18
157	38	29	A COMMENT	\N	2014-11-17 04:12:27	2014-11-17 04:12:27
158	11	31	A COMMENT	\N	2014-07-11 21:56:21	2014-07-11 21:56:21
159	15	32	A COMMENT	\N	2014-09-03 23:59:27	2014-09-03 23:59:27
160	29	32	A COMMENT	\N	2014-09-06 10:42:34	2014-09-06 10:42:34
161	22	32	A COMMENT	\N	2014-10-16 10:00:43	2014-10-16 10:00:43
162	12	33	A COMMENT	\N	2014-08-19 11:19:59	2014-08-19 11:19:59
163	11	33	A COMMENT	\N	2014-08-29 13:40:55	2014-08-29 13:40:55
164	28	33	A COMMENT	\N	2014-09-18 14:11:26	2014-09-18 14:11:26
165	9	33	A COMMENT	\N	2014-09-19 07:33:06	2014-09-19 07:33:06
166	5	33	A COMMENT	\N	2014-09-22 05:05:19	2014-09-22 05:05:19
167	3	33	A COMMENT	\N	2014-09-27 03:14:49	2014-09-27 03:14:49
168	2	33	A COMMENT	\N	2014-10-05 00:25:34	2014-10-05 00:25:34
169	48	33	A COMMENT	\N	2014-10-09 00:22:50	2014-10-09 00:22:50
170	9	33	A COMMENT	\N	2014-10-26 11:29:30	2014-10-26 11:29:30
171	31	33	A COMMENT	\N	2014-10-26 12:41:58	2014-10-26 12:41:58
172	38	33	A COMMENT	\N	2014-10-28 15:57:37	2014-10-28 15:57:37
173	15	33	A COMMENT	\N	2014-11-06 08:15:18	2014-11-06 08:15:18
174	28	33	A COMMENT	\N	2014-11-12 17:13:14	2014-11-12 17:13:14
175	2	35	A COMMENT	\N	2014-06-10 11:24:22	2014-06-10 11:24:22
176	3	35	A COMMENT	\N	2014-07-19 21:18:40	2014-07-19 21:18:40
177	4	35	A COMMENT	\N	2014-08-28 01:53:28	2014-08-28 01:53:28
178	9	35	A COMMENT	\N	2014-08-29 16:38:17	2014-08-29 16:38:17
179	22	35	A COMMENT	\N	2014-09-01 17:34:46	2014-09-01 17:34:46
180	12	36	A COMMENT	\N	2014-06-23 06:26:09	2014-06-23 06:26:09
181	46	36	A COMMENT	\N	2014-08-07 17:43:11	2014-08-07 17:43:11
182	48	36	A COMMENT	\N	2014-08-16 13:11:44	2014-08-16 13:11:44
183	38	36	A COMMENT	\N	2014-08-21 12:43:39	2014-08-21 12:43:39
184	9	36	A COMMENT	\N	2014-09-10 06:00:53	2014-09-10 06:00:53
185	38	36	A COMMENT	\N	2014-10-12 06:35:36	2014-10-12 06:35:36
186	15	36	A COMMENT	\N	2014-10-26 12:56:09	2014-10-26 12:56:09
187	11	37	A COMMENT	\N	2014-07-30 11:17:59	2014-07-30 11:17:59
188	48	39	A COMMENT	\N	2014-10-11 03:12:26	2014-10-11 03:12:26
189	28	39	A COMMENT	\N	2014-10-15 13:01:26	2014-10-15 13:01:26
190	9	39	A COMMENT	\N	2014-10-20 07:26:21	2014-10-20 07:26:21
191	33	39	A COMMENT	\N	2014-10-24 15:48:43	2014-10-24 15:48:43
192	38	39	A COMMENT	\N	2014-10-27 04:15:43	2014-10-27 04:15:43
193	33	39	A COMMENT	\N	2014-10-30 11:40:48	2014-10-30 11:40:48
194	12	39	A COMMENT	\N	2014-11-07 10:25:16	2014-11-07 10:25:16
195	44	39	A COMMENT	\N	2014-11-25 19:21:55	2014-11-25 19:21:55
196	22	40	A COMMENT	\N	2014-07-14 21:49:10	2014-07-14 21:49:10
197	11	42	A COMMENT	\N	2014-07-12 17:13:55	2014-07-12 17:13:55
198	46	42	A COMMENT	\N	2014-07-17 22:07:18	2014-07-17 22:07:18
199	4	42	A COMMENT	\N	2014-07-27 10:52:20	2014-07-27 10:52:20
200	38	42	A COMMENT	\N	2014-08-17 23:24:22	2014-08-17 23:24:22
201	9	42	A COMMENT	\N	2014-09-19 20:49:01	2014-09-19 20:49:01
202	22	42	A COMMENT	\N	2014-10-19 02:30:43	2014-10-19 02:30:43
203	31	42	A COMMENT	\N	2014-11-15 20:09:54	2014-11-15 20:09:54
204	5	43	A COMMENT	\N	2014-08-29 12:05:09	2014-08-29 12:05:09
205	33	43	A COMMENT	\N	2014-10-06 23:36:49	2014-10-06 23:36:49
206	3	43	A COMMENT	\N	2014-11-06 19:37:52	2014-11-06 19:37:52
207	38	43	A COMMENT	\N	2014-11-14 16:22:47	2014-11-14 16:22:47
208	31	43	A COMMENT	\N	2014-11-22 12:08:16	2014-11-22 12:08:16
209	31	44	A COMMENT	\N	2014-10-10 04:23:31	2014-10-10 04:23:31
210	29	44	A COMMENT	\N	2014-10-23 14:48:48	2014-10-23 14:48:48
211	12	44	A COMMENT	\N	2014-10-26 01:01:17	2014-10-26 01:01:17
212	11	44	A COMMENT	\N	2014-10-29 08:27:09	2014-10-29 08:27:09
213	22	46	A COMMENT	\N	2014-06-07 22:11:45	2014-06-07 22:11:45
214	46	46	A COMMENT	\N	2014-07-06 03:16:18	2014-07-06 03:16:18
215	11	46	A COMMENT	\N	2014-07-29 20:07:07	2014-07-29 20:07:07
216	11	47	A COMMENT	\N	2014-06-16 13:58:59	2014-06-16 13:58:59
217	22	48	A COMMENT	\N	2014-09-11 03:52:17	2014-09-11 03:52:17
218	29	48	A COMMENT	\N	2014-09-19 18:53:24	2014-09-19 18:53:24
219	12	48	A COMMENT	\N	2014-10-03 13:14:03	2014-10-03 13:14:03
220	11	49	A COMMENT	\N	2014-09-16 11:23:43	2014-09-16 11:23:43
221	11	50	A COMMENT	\N	2014-10-12 15:45:03	2014-10-12 15:45:03
222	11	50	A COMMENT	\N	2014-11-04 05:43:15	2014-11-04 05:43:15
223	33	50	A COMMENT	\N	2014-11-23 09:53:42	2014-11-23 09:53:42
224	11	51	A COMMENT	\N	2014-05-30 00:53:10	2014-05-30 00:53:10
225	11	51	A COMMENT	\N	2014-08-29 09:41:10	2014-08-29 09:41:10
226	11	52	A COMMENT	\N	2014-06-20 16:27:19	2014-06-20 16:27:19
227	38	52	A COMMENT	\N	2014-07-11 13:38:26	2014-07-11 13:38:26
228	22	52	A COMMENT	\N	2014-08-26 11:08:37	2014-08-26 11:08:37
229	31	52	A COMMENT	\N	2014-09-15 17:03:45	2014-09-15 17:03:45
230	11	52	A COMMENT	\N	2014-09-18 17:04:13	2014-09-18 17:04:13
231	11	52	A COMMENT	\N	2014-10-05 18:57:56	2014-10-05 18:57:56
232	46	52	A COMMENT	\N	2014-10-08 23:13:30	2014-10-08 23:13:30
233	48	52	A COMMENT	\N	2014-10-09 15:13:32	2014-10-09 15:13:32
234	9	52	A COMMENT	\N	2014-10-14 11:55:45	2014-10-14 11:55:45
235	9	52	A COMMENT	\N	2014-10-17 01:28:59	2014-10-17 01:28:59
236	38	52	A COMMENT	\N	2014-11-02 05:21:57	2014-11-02 05:21:57
237	11	53	A COMMENT	\N	2014-06-19 23:15:44	2014-06-19 23:15:44
238	15	53	A COMMENT	\N	2014-07-15 09:58:21	2014-07-15 09:58:21
239	38	53	A COMMENT	\N	2014-07-25 19:20:17	2014-07-25 19:20:17
240	12	53	A COMMENT	\N	2014-08-24 10:13:17	2014-08-24 10:13:17
241	3	53	A COMMENT	\N	2014-10-30 16:46:00	2014-10-30 16:46:00
242	11	54	A COMMENT	\N	2014-06-19 16:21:35	2014-06-19 16:21:35
243	40	55	A COMMENT	\N	2014-09-05 18:22:54	2014-09-05 18:22:54
244	31	55	A COMMENT	\N	2014-10-19 13:30:41	2014-10-19 13:30:41
245	5	56	A COMMENT	\N	2014-09-20 02:39:30	2014-09-20 02:39:30
246	15	56	A COMMENT	\N	2014-10-04 15:20:36	2014-10-04 15:20:36
247	48	56	A COMMENT	\N	2014-11-14 06:37:53	2014-11-14 06:37:53
248	33	56	A COMMENT	\N	2014-11-19 19:30:41	2014-11-19 19:30:41
249	12	59	A COMMENT	\N	2014-07-04 04:08:25	2014-07-04 04:08:25
250	33	60	A COMMENT	\N	2014-09-25 22:23:41	2014-09-25 22:23:41
251	3	60	A COMMENT	\N	2014-10-09 15:58:57	2014-10-09 15:58:57
252	46	60	A COMMENT	\N	2014-11-07 07:00:00	2014-11-07 07:00:00
253	9	60	A COMMENT	\N	2014-11-12 23:17:15	2014-11-12 23:17:15
254	4	60	A COMMENT	\N	2014-11-26 13:59:47	2014-11-26 13:59:47
255	12	61	A COMMENT	\N	2014-09-07 05:55:50	2014-09-07 05:55:50
256	15	61	A COMMENT	\N	2014-09-18 09:28:05	2014-09-18 09:28:05
257	29	61	A COMMENT	\N	2014-09-20 00:25:21	2014-09-20 00:25:21
258	44	61	A COMMENT	\N	2014-11-18 18:35:42	2014-11-18 18:35:42
259	33	62	A COMMENT	\N	2014-08-30 05:00:31	2014-08-30 05:00:31
260	40	62	A COMMENT	\N	2014-09-11 23:20:00	2014-09-11 23:20:00
261	44	62	A COMMENT	\N	2014-09-12 06:20:58	2014-09-12 06:20:58
262	22	62	A COMMENT	\N	2014-09-20 17:37:05	2014-09-20 17:37:05
263	11	62	A COMMENT	\N	2014-10-21 20:07:11	2014-10-21 20:07:11
264	38	62	A COMMENT	\N	2014-10-26 05:31:56	2014-10-26 05:31:56
265	33	62	A COMMENT	\N	2014-11-15 04:08:28	2014-11-15 04:08:28
266	12	62	A COMMENT	\N	2014-11-19 22:20:45	2014-11-19 22:20:45
267	38	62	A COMMENT	\N	2014-11-22 08:13:59	2014-11-22 08:13:59
268	48	62	A COMMENT	\N	2014-11-27 16:57:06	2014-11-27 16:57:06
269	46	63	A COMMENT	\N	2014-10-02 02:48:48	2014-10-02 02:48:48
270	12	63	A COMMENT	\N	2014-10-05 12:45:58	2014-10-05 12:45:58
271	4	63	A COMMENT	\N	2014-10-09 16:53:36	2014-10-09 16:53:36
272	22	63	A COMMENT	\N	2014-10-22 13:18:44	2014-10-22 13:18:44
273	11	63	A COMMENT	\N	2014-11-05 04:24:01	2014-11-05 04:24:01
274	5	63	A COMMENT	\N	2014-11-08 22:33:32	2014-11-08 22:33:32
275	15	63	A COMMENT	\N	2014-11-12 19:23:38	2014-11-12 19:23:38
276	5	63	A COMMENT	\N	2014-11-16 02:10:50	2014-11-16 02:10:50
277	40	63	A COMMENT	\N	2014-11-16 15:51:54	2014-11-16 15:51:54
278	12	64	A COMMENT	\N	2014-09-13 11:08:34	2014-09-13 11:08:34
279	40	64	A COMMENT	\N	2014-09-28 16:28:45	2014-09-28 16:28:45
280	15	64	A COMMENT	\N	2014-11-03 00:31:45	2014-11-03 00:31:45
281	22	64	A COMMENT	\N	2014-11-13 17:46:42	2014-11-13 17:46:42
282	33	64	A COMMENT	\N	2014-11-16 08:54:46	2014-11-16 08:54:46
283	48	65	A COMMENT	\N	2014-09-28 21:23:48	2014-09-28 21:23:48
284	48	66	A COMMENT	\N	2014-10-07 13:35:00	2014-10-07 13:35:00
285	28	66	A COMMENT	\N	2014-10-19 07:08:41	2014-10-19 07:08:41
286	29	66	A COMMENT	\N	2014-10-28 12:11:40	2014-10-28 12:11:40
287	46	66	A COMMENT	\N	2014-11-09 08:31:14	2014-11-09 08:31:14
288	31	66	A COMMENT	\N	2014-11-19 21:39:31	2014-11-19 21:39:31
289	9	67	A COMMENT	\N	2014-10-12 00:00:35	2014-10-12 00:00:35
290	46	67	A COMMENT	\N	2014-10-18 22:48:52	2014-10-18 22:48:52
291	29	67	A COMMENT	\N	2014-10-25 11:32:31	2014-10-25 11:32:31
292	28	67	A COMMENT	\N	2014-11-02 11:49:16	2014-11-02 11:49:16
293	4	67	A COMMENT	\N	2014-11-05 17:55:25	2014-11-05 17:55:25
294	3	67	A COMMENT	\N	2014-11-07 09:35:35	2014-11-07 09:35:35
295	5	67	A COMMENT	\N	2014-11-08 01:39:56	2014-11-08 01:39:56
296	46	67	A COMMENT	\N	2014-11-10 01:54:39	2014-11-10 01:54:39
297	33	67	A COMMENT	\N	2014-11-17 18:54:47	2014-11-17 18:54:47
298	40	67	A COMMENT	\N	2014-11-23 04:46:48	2014-11-23 04:46:48
299	11	67	A COMMENT	\N	2014-11-23 22:38:15	2014-11-23 22:38:15
300	31	67	A COMMENT	\N	2014-11-25 08:29:22	2014-11-25 08:29:22
301	40	67	A COMMENT	\N	2014-11-25 15:11:46	2014-11-25 15:11:46
302	40	67	A COMMENT	\N	2014-11-25 23:56:01	2014-11-25 23:56:01
303	11	68	A COMMENT	\N	2014-11-23 22:06:58	2014-11-23 22:06:58
304	22	70	A COMMENT	\N	2014-10-08 08:23:13	2014-10-08 08:23:13
305	9	70	A COMMENT	\N	2014-10-08 12:13:13	2014-10-08 12:13:13
306	2	70	A COMMENT	\N	2014-10-14 18:25:03	2014-10-14 18:25:03
307	48	70	A COMMENT	\N	2014-11-03 02:38:00	2014-11-03 02:38:00
308	22	70	A COMMENT	\N	2014-11-07 15:29:46	2014-11-07 15:29:46
309	46	70	A COMMENT	\N	2014-11-10 18:37:46	2014-11-10 18:37:46
310	11	71	A COMMENT	\N	2014-10-31 14:53:04	2014-10-31 14:53:04
311	22	71	A COMMENT	\N	2014-11-07 15:21:47	2014-11-07 15:21:47
312	11	71	A COMMENT	\N	2014-11-09 04:14:15	2014-11-09 04:14:15
313	31	71	A COMMENT	\N	2014-11-20 11:05:27	2014-11-20 11:05:27
314	48	71	A COMMENT	\N	2014-11-25 02:23:42	2014-11-25 02:23:42
315	48	73	A COMMENT	\N	2014-10-29 20:23:05	2014-10-29 20:23:05
316	46	73	A COMMENT	\N	2014-11-20 08:11:53	2014-11-20 08:11:53
317	38	73	A COMMENT	\N	2014-11-23 01:35:54	2014-11-23 01:35:54
318	48	73	A COMMENT	\N	2014-11-23 02:36:41	2014-11-23 02:36:41
319	22	74	A COMMENT	\N	2014-10-05 22:24:02	2014-10-05 22:24:02
320	29	75	A COMMENT	\N	2014-10-23 23:59:29	2014-10-23 23:59:29
321	2	78	A COMMENT	\N	2014-10-02 12:38:16	2014-10-02 12:38:16
322	44	78	A COMMENT	\N	2014-10-03 06:13:50	2014-10-03 06:13:50
323	48	78	A COMMENT	\N	2014-10-07 13:24:50	2014-10-07 13:24:50
324	15	78	A COMMENT	\N	2014-10-10 03:24:38	2014-10-10 03:24:38
325	29	78	A COMMENT	\N	2014-10-17 01:02:22	2014-10-17 01:02:22
326	29	78	A COMMENT	\N	2014-10-17 21:02:13	2014-10-17 21:02:13
327	46	78	A COMMENT	\N	2014-10-23 18:13:01	2014-10-23 18:13:01
328	31	78	A COMMENT	\N	2014-10-25 13:27:39	2014-10-25 13:27:39
329	12	78	A COMMENT	\N	2014-10-25 23:27:18	2014-10-25 23:27:18
330	9	78	A COMMENT	\N	2014-10-26 23:57:45	2014-10-26 23:57:45
331	46	78	A COMMENT	\N	2014-10-29 12:42:18	2014-10-29 12:42:18
332	22	78	A COMMENT	\N	2014-10-29 18:57:57	2014-10-29 18:57:57
333	5	78	A COMMENT	\N	2014-11-02 08:56:10	2014-11-02 08:56:10
334	11	78	A COMMENT	\N	2014-11-10 20:21:23	2014-11-10 20:21:23
335	11	78	A COMMENT	\N	2014-11-12 19:40:05	2014-11-12 19:40:05
336	22	78	A COMMENT	\N	2014-11-13 18:12:40	2014-11-13 18:12:40
337	31	78	A COMMENT	\N	2014-11-16 19:54:17	2014-11-16 19:54:17
338	4	78	A COMMENT	\N	2014-11-25 04:06:49	2014-11-25 04:06:49
339	44	79	A COMMENT	\N	2014-11-01 13:52:30	2014-11-01 13:52:30
340	33	79	A COMMENT	\N	2014-11-05 12:13:43	2014-11-05 12:13:43
341	4	79	A COMMENT	\N	2014-11-09 04:49:30	2014-11-09 04:49:30
342	28	80	A COMMENT	\N	2014-10-06 10:38:45	2014-10-06 10:38:45
343	11	80	A COMMENT	\N	2014-10-13 07:06:35	2014-10-13 07:06:35
344	40	80	A COMMENT	\N	2014-10-17 07:57:50	2014-10-17 07:57:50
345	2	80	A COMMENT	\N	2014-11-14 23:46:20	2014-11-14 23:46:20
346	11	80	A COMMENT	\N	2014-11-27 06:45:56	2014-11-27 06:45:56
347	44	81	A COMMENT	\N	2014-11-11 22:16:13	2014-11-11 22:16:13
348	3	82	A COMMENT	\N	2014-10-27 21:00:38	2014-10-27 21:00:38
349	3	82	A COMMENT	\N	2014-10-28 07:27:38	2014-10-28 07:27:38
350	38	82	A COMMENT	\N	2014-11-13 09:36:15	2014-11-13 09:36:15
351	33	83	A COMMENT	\N	2014-11-03 06:09:25	2014-11-03 06:09:25
352	31	83	A COMMENT	\N	2014-11-13 01:50:28	2014-11-13 01:50:28
353	29	83	A COMMENT	\N	2014-11-18 05:14:39	2014-11-18 05:14:39
354	44	83	A COMMENT	\N	2014-11-21 08:15:56	2014-11-21 08:15:56
355	48	83	A COMMENT	\N	2014-11-23 10:57:32	2014-11-23 10:57:32
356	3	83	A COMMENT	\N	2014-11-27 14:03:19	2014-11-27 14:03:19
357	5	84	A COMMENT	\N	2014-11-15 00:39:25	2014-11-15 00:39:25
358	11	84	A COMMENT	\N	2014-11-15 01:04:06	2014-11-15 01:04:06
359	46	84	A COMMENT	\N	2014-11-28 04:00:08	2014-11-28 04:00:08
360	15	84	A COMMENT	\N	2014-11-28 05:53:14	2014-11-28 05:53:14
361	22	85	A COMMENT	\N	2014-10-15 21:10:16	2014-10-15 21:10:16
362	40	85	A COMMENT	\N	2014-10-23 10:31:05	2014-10-23 10:31:05
363	9	85	A COMMENT	\N	2014-10-23 19:10:33	2014-10-23 19:10:33
364	44	85	A COMMENT	\N	2014-10-25 13:18:39	2014-10-25 13:18:39
365	15	85	A COMMENT	\N	2014-11-18 18:28:06	2014-11-18 18:28:06
366	22	86	A COMMENT	\N	2014-10-30 03:54:39	2014-10-30 03:54:39
367	9	86	A COMMENT	\N	2014-11-03 14:28:44	2014-11-03 14:28:44
368	4	86	A COMMENT	\N	2014-11-08 12:19:13	2014-11-08 12:19:13
369	9	86	A COMMENT	\N	2014-11-23 03:30:01	2014-11-23 03:30:01
370	2	86	A COMMENT	\N	2014-11-25 07:04:05	2014-11-25 07:04:05
371	33	87	A COMMENT	\N	2014-11-11 07:02:08	2014-11-11 07:02:08
372	46	87	A COMMENT	\N	2014-11-14 14:45:30	2014-11-14 14:45:30
373	22	89	A COMMENT	\N	2014-11-02 10:11:59	2014-11-02 10:11:59
374	31	89	A COMMENT	\N	2014-11-11 10:20:28	2014-11-11 10:20:28
375	11	89	A COMMENT	\N	2014-11-12 04:02:55	2014-11-12 04:02:55
376	29	89	A COMMENT	\N	2014-11-20 12:52:11	2014-11-20 12:52:11
377	46	89	A COMMENT	\N	2014-11-23 20:14:36	2014-11-23 20:14:36
378	46	90	A COMMENT	\N	2014-10-29 16:24:34	2014-10-29 16:24:34
379	4	90	A COMMENT	\N	2014-11-04 12:25:46	2014-11-04 12:25:46
380	5	90	A COMMENT	\N	2014-11-05 00:35:53	2014-11-05 00:35:53
381	48	90	A COMMENT	\N	2014-11-08 19:03:55	2014-11-08 19:03:55
382	29	90	A COMMENT	\N	2014-11-10 07:03:18	2014-11-10 07:03:18
383	31	90	A COMMENT	\N	2014-11-10 16:19:53	2014-11-10 16:19:53
384	15	90	A COMMENT	\N	2014-11-11 12:51:33	2014-11-11 12:51:33
385	3	90	A COMMENT	\N	2014-11-12 20:19:24	2014-11-12 20:19:24
386	5	90	A COMMENT	\N	2014-11-18 01:23:30	2014-11-18 01:23:30
387	46	90	A COMMENT	\N	2014-11-21 04:05:45	2014-11-21 04:05:45
388	3	90	A COMMENT	\N	2014-11-21 06:16:41	2014-11-21 06:16:41
389	46	91	A COMMENT	\N	2014-10-20 01:56:27	2014-10-20 01:56:27
390	15	91	A COMMENT	\N	2014-11-06 21:39:07	2014-11-06 21:39:07
391	33	91	A COMMENT	\N	2014-11-24 05:13:59	2014-11-24 05:13:59
392	2	92	A COMMENT	\N	2014-11-13 20:38:31	2014-11-13 20:38:31
393	22	92	A COMMENT	\N	2014-11-17 03:50:27	2014-11-17 03:50:27
394	31	92	A COMMENT	\N	2014-11-25 00:47:20	2014-11-25 00:47:20
395	40	92	A COMMENT	\N	2014-11-27 22:49:28	2014-11-27 22:49:28
396	5	93	A COMMENT	\N	2014-11-18 14:27:51	2014-11-18 14:27:51
397	11	93	A COMMENT	\N	2014-11-19 05:47:54	2014-11-19 05:47:54
398	40	93	A COMMENT	\N	2014-11-21 03:10:07	2014-11-21 03:10:07
399	31	93	A COMMENT	\N	2014-11-22 13:51:00	2014-11-22 13:51:00
400	28	93	A COMMENT	\N	2014-11-26 00:52:14	2014-11-26 00:52:14
401	4	94	A COMMENT	\N	2014-10-12 13:05:11	2014-10-12 13:05:11
402	5	94	A COMMENT	\N	2014-10-14 08:42:29	2014-10-14 08:42:29
403	3	94	A COMMENT	\N	2014-10-22 19:00:42	2014-10-22 19:00:42
404	48	94	A COMMENT	\N	2014-10-28 01:57:18	2014-10-28 01:57:18
405	31	94	A COMMENT	\N	2014-11-06 21:43:06	2014-11-06 21:43:06
406	46	94	A COMMENT	\N	2014-11-21 07:15:32	2014-11-21 07:15:32
407	40	94	A COMMENT	\N	2014-11-23 08:53:51	2014-11-23 08:53:51
408	5	94	A COMMENT	\N	2014-11-28 02:10:35	2014-11-28 02:10:35
409	22	95	A COMMENT	\N	2014-10-10 09:54:11	2014-10-10 09:54:11
410	48	95	A COMMENT	\N	2014-10-10 20:14:02	2014-10-10 20:14:02
411	11	95	A COMMENT	\N	2014-10-21 21:11:42	2014-10-21 21:11:42
412	40	95	A COMMENT	\N	2014-10-22 17:01:25	2014-10-22 17:01:25
413	31	95	A COMMENT	\N	2014-10-27 11:54:00	2014-10-27 11:54:00
414	4	95	A COMMENT	\N	2014-11-05 06:53:12	2014-11-05 06:53:12
415	44	95	A COMMENT	\N	2014-11-08 02:18:14	2014-11-08 02:18:14
416	46	95	A COMMENT	\N	2014-11-17 06:35:53	2014-11-17 06:35:53
417	40	95	A COMMENT	\N	2014-11-26 10:19:45	2014-11-26 10:19:45
418	28	95	A COMMENT	\N	2014-11-27 03:09:11	2014-11-27 03:09:11
419	48	96	A COMMENT	\N	2014-10-23 09:48:32	2014-10-23 09:48:32
420	40	96	A COMMENT	\N	2014-11-06 16:00:19	2014-11-06 16:00:19
421	4	96	A COMMENT	\N	2014-11-17 20:20:35	2014-11-17 20:20:35
422	44	97	A COMMENT	\N	2014-10-24 09:57:36	2014-10-24 09:57:36
423	5	97	A COMMENT	\N	2014-10-27 14:10:45	2014-10-27 14:10:45
424	28	97	A COMMENT	\N	2014-10-30 07:22:21	2014-10-30 07:22:21
425	46	97	A COMMENT	\N	2014-11-26 22:09:02	2014-11-26 22:09:02
426	22	99	A COMMENT	\N	2014-11-17 02:01:53	2014-11-17 02:01:53
427	22	102	A COMMENT	\N	2014-10-05 11:29:57	2014-10-05 11:29:57
428	40	102	A COMMENT	\N	2014-11-28 02:56:51	2014-11-28 02:56:51
429	44	103	A COMMENT	\N	2014-11-03 19:44:00	2014-11-03 19:44:00
430	33	103	A COMMENT	\N	2014-11-09 00:56:37	2014-11-09 00:56:37
431	48	103	A COMMENT	\N	2014-11-10 00:38:23	2014-11-10 00:38:23
432	22	103	A COMMENT	\N	2014-11-12 10:26:31	2014-11-12 10:26:31
433	9	103	A COMMENT	\N	2014-11-13 01:57:18	2014-11-13 01:57:18
434	29	103	A COMMENT	\N	2014-11-14 03:53:43	2014-11-14 03:53:43
435	11	103	A COMMENT	\N	2014-11-15 06:17:24	2014-11-15 06:17:24
436	40	103	A COMMENT	\N	2014-11-16 18:54:41	2014-11-16 18:54:41
437	4	103	A COMMENT	\N	2014-11-18 16:44:33	2014-11-18 16:44:33
438	5	103	A COMMENT	\N	2014-11-23 05:21:09	2014-11-23 05:21:09
439	28	104	A COMMENT	\N	2014-11-08 22:00:33	2014-11-08 22:00:33
440	31	104	A COMMENT	\N	2014-11-12 23:16:05	2014-11-12 23:16:05
441	11	104	A COMMENT	\N	2014-11-13 19:55:13	2014-11-13 19:55:13
442	38	104	A COMMENT	\N	2014-11-16 23:59:37	2014-11-16 23:59:37
443	12	104	A COMMENT	\N	2014-11-27 18:58:01	2014-11-27 18:58:01
444	22	106	A COMMENT	\N	2014-11-23 21:35:56	2014-11-23 21:35:56
445	3	106	A COMMENT	\N	2014-11-24 01:33:57	2014-11-24 01:33:57
446	12	106	A COMMENT	\N	2014-11-24 04:25:38	2014-11-24 04:25:38
447	9	106	A COMMENT	\N	2014-11-24 09:59:01	2014-11-24 09:59:01
448	3	106	A COMMENT	\N	2014-11-24 14:40:28	2014-11-24 14:40:28
449	40	106	A COMMENT	\N	2014-11-24 21:37:20	2014-11-24 21:37:20
450	40	106	A COMMENT	\N	2014-11-25 08:08:31	2014-11-25 08:08:31
451	4	106	A COMMENT	\N	2014-11-25 11:06:26	2014-11-25 11:06:26
452	40	106	A COMMENT	\N	2014-11-25 14:52:29	2014-11-25 14:52:29
453	38	106	A COMMENT	\N	2014-11-26 19:29:36	2014-11-26 19:29:36
454	15	106	A COMMENT	\N	2014-11-26 20:23:06	2014-11-26 20:23:06
455	5	106	A COMMENT	\N	2014-11-27 00:03:49	2014-11-27 00:03:49
456	28	106	A COMMENT	\N	2014-11-27 04:20:20	2014-11-27 04:20:20
457	9	106	A COMMENT	\N	2014-11-27 10:32:41	2014-11-27 10:32:41
458	48	106	A COMMENT	\N	2014-11-27 12:45:36	2014-11-27 12:45:36
459	33	106	A COMMENT	\N	2014-11-27 14:32:59	2014-11-27 14:32:59
460	29	106	A COMMENT	\N	2014-11-27 15:56:17	2014-11-27 15:56:17
461	11	106	A COMMENT	\N	2014-11-27 17:00:00	2014-11-27 17:00:00
462	11	106	A COMMENT	\N	2014-11-27 18:23:51	2014-11-27 18:23:51
463	31	106	A COMMENT	\N	2014-11-28 01:42:36	2014-11-28 01:42:36
464	2	108	A COMMENT	\N	2014-06-01 04:32:53	2014-06-01 04:32:53
465	22	108	A COMMENT	\N	2014-10-24 03:14:59	2014-10-24 03:14:59
466	9	109	A COMMENT	\N	2014-06-09 20:42:16	2014-06-09 20:42:16
467	9	109	A COMMENT	\N	2014-06-16 05:55:03	2014-06-16 05:55:03
468	33	109	A COMMENT	\N	2014-07-20 17:06:01	2014-07-20 17:06:01
469	5	109	A COMMENT	\N	2014-07-27 09:09:17	2014-07-27 09:09:17
470	9	109	A COMMENT	\N	2014-08-19 05:02:44	2014-08-19 05:02:44
471	4	109	A COMMENT	\N	2014-09-05 16:58:47	2014-09-05 16:58:47
472	40	109	A COMMENT	\N	2014-09-18 06:43:30	2014-09-18 06:43:30
473	2	109	A COMMENT	\N	2014-10-15 08:25:52	2014-10-15 08:25:52
474	28	109	A COMMENT	\N	2014-10-26 14:12:44	2014-10-26 14:12:44
475	46	109	A COMMENT	\N	2014-10-29 15:19:19	2014-10-29 15:19:19
476	38	110	A COMMENT	\N	2014-05-06 14:36:44	2014-05-06 14:36:44
477	11	110	A COMMENT	\N	2014-06-01 00:36:33	2014-06-01 00:36:33
478	31	110	A COMMENT	\N	2014-06-29 17:27:35	2014-06-29 17:27:35
479	2	110	A COMMENT	\N	2014-07-08 18:18:22	2014-07-08 18:18:22
480	38	110	A COMMENT	\N	2014-07-25 00:30:01	2014-07-25 00:30:01
481	48	110	A COMMENT	\N	2014-08-21 23:41:55	2014-08-21 23:41:55
482	22	110	A COMMENT	\N	2014-08-23 19:52:29	2014-08-23 19:52:29
483	29	110	A COMMENT	\N	2014-08-24 07:51:52	2014-08-24 07:51:52
484	15	110	A COMMENT	\N	2014-08-29 19:33:04	2014-08-29 19:33:04
485	29	110	A COMMENT	\N	2014-09-12 10:13:23	2014-09-12 10:13:23
486	3	110	A COMMENT	\N	2014-09-19 07:45:35	2014-09-19 07:45:35
487	33	110	A COMMENT	\N	2014-10-05 16:06:26	2014-10-05 16:06:26
488	44	110	A COMMENT	\N	2014-10-12 02:16:39	2014-10-12 02:16:39
489	11	110	A COMMENT	\N	2014-10-28 04:34:33	2014-10-28 04:34:33
490	12	110	A COMMENT	\N	2014-10-31 05:04:42	2014-10-31 05:04:42
491	22	110	A COMMENT	\N	2014-10-31 06:01:38	2014-10-31 06:01:38
492	48	110	A COMMENT	\N	2014-11-10 22:29:37	2014-11-10 22:29:37
493	33	110	A COMMENT	\N	2014-11-13 06:51:51	2014-11-13 06:51:51
494	29	112	A COMMENT	\N	2014-08-04 09:20:31	2014-08-04 09:20:31
495	12	113	A COMMENT	\N	2014-06-22 08:12:23	2014-06-22 08:12:23
496	44	113	A COMMENT	\N	2014-06-27 07:08:51	2014-06-27 07:08:51
497	31	113	A COMMENT	\N	2014-07-16 16:36:52	2014-07-16 16:36:52
498	44	113	A COMMENT	\N	2014-07-23 08:19:33	2014-07-23 08:19:33
499	48	113	A COMMENT	\N	2014-08-11 23:00:59	2014-08-11 23:00:59
500	2	113	A COMMENT	\N	2014-08-30 17:12:54	2014-08-30 17:12:54
501	33	113	A COMMENT	\N	2014-09-05 20:08:25	2014-09-05 20:08:25
502	9	113	A COMMENT	\N	2014-09-22 01:49:11	2014-09-22 01:49:11
503	48	113	A COMMENT	\N	2014-10-28 00:35:51	2014-10-28 00:35:51
504	38	114	A COMMENT	\N	2014-08-08 02:51:42	2014-08-08 02:51:42
505	2	114	A COMMENT	\N	2014-10-10 19:00:51	2014-10-10 19:00:51
506	38	114	A COMMENT	\N	2014-10-25 11:32:42	2014-10-25 11:32:42
507	29	115	A COMMENT	\N	2014-06-11 18:01:46	2014-06-11 18:01:46
508	5	116	A COMMENT	\N	2014-07-17 12:54:51	2014-07-17 12:54:51
509	11	116	A COMMENT	\N	2014-08-05 12:05:59	2014-08-05 12:05:59
510	4	116	A COMMENT	\N	2014-08-15 13:16:52	2014-08-15 13:16:52
511	9	116	A COMMENT	\N	2014-09-10 10:04:09	2014-09-10 10:04:09
512	2	116	A COMMENT	\N	2014-09-13 10:20:17	2014-09-13 10:20:17
513	28	116	A COMMENT	\N	2014-09-26 09:51:18	2014-09-26 09:51:18
514	11	116	A COMMENT	\N	2014-10-07 09:05:53	2014-10-07 09:05:53
515	3	116	A COMMENT	\N	2014-10-09 08:31:33	2014-10-09 08:31:33
516	46	116	A COMMENT	\N	2014-10-13 17:38:31	2014-10-13 17:38:31
517	46	116	A COMMENT	\N	2014-10-27 23:52:47	2014-10-27 23:52:47
518	15	116	A COMMENT	\N	2014-10-28 13:22:54	2014-10-28 13:22:54
519	12	116	A COMMENT	\N	2014-11-09 19:36:23	2014-11-09 19:36:23
520	40	116	A COMMENT	\N	2014-11-22 13:56:58	2014-11-22 13:56:58
521	28	117	A COMMENT	\N	2014-06-24 05:47:05	2014-06-24 05:47:05
522	40	117	A COMMENT	\N	2014-06-24 17:54:09	2014-06-24 17:54:09
523	46	117	A COMMENT	\N	2014-08-11 03:19:53	2014-08-11 03:19:53
524	46	118	A COMMENT	\N	2014-10-12 11:14:17	2014-10-12 11:14:17
525	28	118	A COMMENT	\N	2014-10-22 07:12:20	2014-10-22 07:12:20
526	12	118	A COMMENT	\N	2014-11-19 15:39:40	2014-11-19 15:39:40
527	29	119	A COMMENT	\N	2014-05-04 13:03:18	2014-05-04 13:03:18
528	40	120	A COMMENT	\N	2014-07-30 10:46:11	2014-07-30 10:46:11
529	31	120	A COMMENT	\N	2014-08-30 23:08:32	2014-08-30 23:08:32
530	40	120	A COMMENT	\N	2014-09-16 16:56:39	2014-09-16 16:56:39
531	44	120	A COMMENT	\N	2014-09-20 18:48:29	2014-09-20 18:48:29
532	38	120	A COMMENT	\N	2014-11-24 05:59:58	2014-11-24 05:59:58
533	48	121	A COMMENT	\N	2014-08-18 14:33:22	2014-08-18 14:33:22
534	33	121	A COMMENT	\N	2014-08-23 10:17:00	2014-08-23 10:17:00
535	4	121	A COMMENT	\N	2014-08-26 18:09:14	2014-08-26 18:09:14
536	44	121	A COMMENT	\N	2014-09-17 19:39:47	2014-09-17 19:39:47
537	12	121	A COMMENT	\N	2014-09-19 11:51:13	2014-09-19 11:51:13
538	46	121	A COMMENT	\N	2014-10-10 07:35:28	2014-10-10 07:35:28
539	3	121	A COMMENT	\N	2014-11-20 08:34:50	2014-11-20 08:34:50
540	2	122	A COMMENT	\N	2014-10-08 13:50:51	2014-10-08 13:50:51
541	31	122	A COMMENT	\N	2014-10-21 21:03:55	2014-10-21 21:03:55
542	33	122	A COMMENT	\N	2014-10-23 08:40:28	2014-10-23 08:40:28
543	3	122	A COMMENT	\N	2014-10-28 06:13:04	2014-10-28 06:13:04
544	33	122	A COMMENT	\N	2014-11-02 01:57:57	2014-11-02 01:57:57
545	44	122	A COMMENT	\N	2014-11-12 13:50:54	2014-11-12 13:50:54
546	5	122	A COMMENT	\N	2014-11-16 11:39:41	2014-11-16 11:39:41
547	28	123	A COMMENT	\N	2014-05-25 16:04:51	2014-05-25 16:04:51
548	46	123	A COMMENT	\N	2014-07-06 23:58:32	2014-07-06 23:58:32
549	9	123	A COMMENT	\N	2014-08-16 00:48:52	2014-08-16 00:48:52
550	28	123	A COMMENT	\N	2014-10-23 00:26:42	2014-10-23 00:26:42
551	29	123	A COMMENT	\N	2014-11-28 02:40:13	2014-11-28 02:40:13
552	29	124	A COMMENT	\N	2014-03-30 14:42:36	2014-03-30 14:42:36
553	11	124	A COMMENT	\N	2014-07-21 15:19:25	2014-07-21 15:19:25
554	44	124	A COMMENT	\N	2014-09-05 23:17:48	2014-09-05 23:17:48
555	48	125	A COMMENT	\N	2014-08-15 13:45:41	2014-08-15 13:45:41
556	40	125	A COMMENT	\N	2014-09-10 06:28:21	2014-09-10 06:28:21
557	3	125	A COMMENT	\N	2014-09-10 17:51:35	2014-09-10 17:51:35
558	2	125	A COMMENT	\N	2014-09-27 10:15:24	2014-09-27 10:15:24
559	38	125	A COMMENT	\N	2014-11-10 05:30:35	2014-11-10 05:30:35
560	5	125	A COMMENT	\N	2014-11-25 18:40:53	2014-11-25 18:40:53
561	29	129	A COMMENT	\N	2014-06-04 04:05:34	2014-06-04 04:05:34
562	46	129	A COMMENT	\N	2014-07-08 04:24:43	2014-07-08 04:24:43
563	5	129	A COMMENT	\N	2014-07-11 17:11:18	2014-07-11 17:11:18
564	31	129	A COMMENT	\N	2014-10-15 14:16:31	2014-10-15 14:16:31
565	29	130	A COMMENT	\N	2014-08-04 03:02:46	2014-08-04 03:02:46
566	3	132	A COMMENT	\N	2014-05-09 17:23:41	2014-05-09 17:23:41
567	12	132	A COMMENT	\N	2014-05-18 17:28:38	2014-05-18 17:28:38
568	44	132	A COMMENT	\N	2014-10-05 02:40:55	2014-10-05 02:40:55
569	2	132	A COMMENT	\N	2014-11-07 23:13:35	2014-11-07 23:13:35
570	12	132	A COMMENT	\N	2014-11-17 09:34:11	2014-11-17 09:34:11
571	9	133	A COMMENT	\N	2014-05-06 23:46:36	2014-05-06 23:46:36
572	12	133	A COMMENT	\N	2014-05-26 16:11:12	2014-05-26 16:11:12
573	29	133	A COMMENT	\N	2014-06-25 03:18:10	2014-06-25 03:18:10
574	29	133	A COMMENT	\N	2014-07-04 13:14:45	2014-07-04 13:14:45
575	46	133	A COMMENT	\N	2014-10-02 17:32:53	2014-10-02 17:32:53
576	12	133	A COMMENT	\N	2014-10-19 02:21:58	2014-10-19 02:21:58
577	11	137	A COMMENT	\N	2014-07-31 07:12:36	2014-07-31 07:12:36
578	9	137	A COMMENT	\N	2014-08-08 04:54:37	2014-08-08 04:54:37
579	44	137	A COMMENT	\N	2014-08-21 16:46:53	2014-08-21 16:46:53
580	46	137	A COMMENT	\N	2014-10-05 17:26:53	2014-10-05 17:26:53
581	44	137	A COMMENT	\N	2014-11-17 14:17:19	2014-11-17 14:17:19
582	2	137	A COMMENT	\N	2014-11-25 12:21:47	2014-11-25 12:21:47
583	29	138	A COMMENT	\N	2014-07-07 10:48:08	2014-07-07 10:48:08
584	31	138	A COMMENT	\N	2014-07-21 08:22:28	2014-07-21 08:22:28
585	44	138	A COMMENT	\N	2014-09-04 19:55:37	2014-09-04 19:55:37
586	2	138	A COMMENT	\N	2014-11-06 01:52:55	2014-11-06 01:52:55
587	33	139	A COMMENT	\N	2014-06-28 09:02:53	2014-06-28 09:02:53
588	9	142	A COMMENT	\N	2014-05-18 14:11:37	2014-05-18 14:11:37
589	12	142	A COMMENT	\N	2014-08-16 10:42:11	2014-08-16 10:42:11
590	38	142	A COMMENT	\N	2014-08-20 11:32:03	2014-08-20 11:32:03
591	44	142	A COMMENT	\N	2014-09-11 20:26:00	2014-09-11 20:26:00
592	5	142	A COMMENT	\N	2014-09-13 12:17:22	2014-09-13 12:17:22
593	44	143	A COMMENT	\N	2014-09-18 04:17:44	2014-09-18 04:17:44
594	46	143	A COMMENT	\N	2014-10-12 06:57:25	2014-10-12 06:57:25
595	2	143	A COMMENT	\N	2014-10-23 23:48:36	2014-10-23 23:48:36
596	28	143	A COMMENT	\N	2014-11-20 09:21:12	2014-11-20 09:21:12
597	29	144	A COMMENT	\N	2014-07-15 22:08:38	2014-07-15 22:08:38
598	4	144	A COMMENT	\N	2014-07-19 09:26:08	2014-07-19 09:26:08
599	15	144	A COMMENT	\N	2014-08-07 11:47:26	2014-08-07 11:47:26
600	29	144	A COMMENT	\N	2014-08-07 17:20:55	2014-08-07 17:20:55
601	28	144	A COMMENT	\N	2014-09-09 08:34:30	2014-09-09 08:34:30
602	5	144	A COMMENT	\N	2014-10-01 15:31:52	2014-10-01 15:31:52
603	48	145	A COMMENT	\N	2014-09-08 14:50:53	2014-09-08 14:50:53
604	31	145	A COMMENT	\N	2014-09-12 07:51:23	2014-09-12 07:51:23
605	29	145	A COMMENT	\N	2014-09-29 14:53:32	2014-09-29 14:53:32
606	2	145	A COMMENT	\N	2014-10-08 08:42:16	2014-10-08 08:42:16
607	15	145	A COMMENT	\N	2014-10-28 23:31:11	2014-10-28 23:31:11
608	29	146	A COMMENT	\N	2014-04-30 07:39:50	2014-04-30 07:39:50
609	11	147	A COMMENT	\N	2014-09-07 00:22:02	2014-09-07 00:22:02
610	29	148	A COMMENT	\N	2014-09-01 04:35:15	2014-09-01 04:35:15
611	11	148	A COMMENT	\N	2014-11-09 16:31:54	2014-11-09 16:31:54
612	29	150	A COMMENT	\N	2014-05-14 10:59:48	2014-05-14 10:59:48
613	33	151	A COMMENT	\N	2014-08-17 08:50:45	2014-08-17 08:50:45
614	9	151	A COMMENT	\N	2014-10-28 02:37:05	2014-10-28 02:37:05
615	29	152	A COMMENT	\N	2014-07-30 06:20:02	2014-07-30 06:20:02
616	15	152	A COMMENT	\N	2014-08-04 13:51:18	2014-08-04 13:51:18
617	22	152	A COMMENT	\N	2014-09-12 09:06:58	2014-09-12 09:06:58
618	44	152	A COMMENT	\N	2014-10-05 06:31:47	2014-10-05 06:31:47
619	12	152	A COMMENT	\N	2014-10-07 01:18:58	2014-10-07 01:18:58
620	48	152	A COMMENT	\N	2014-10-29 10:39:41	2014-10-29 10:39:41
621	40	152	A COMMENT	\N	2014-11-11 01:17:54	2014-11-11 01:17:54
622	48	152	A COMMENT	\N	2014-11-23 06:19:37	2014-11-23 06:19:37
623	29	153	A COMMENT	\N	2014-06-24 17:32:17	2014-06-24 17:32:17
624	40	153	A COMMENT	\N	2014-09-09 19:29:13	2014-09-09 19:29:13
625	12	154	A COMMENT	\N	2014-10-31 08:52:10	2014-10-31 08:52:10
626	28	154	A COMMENT	\N	2014-11-01 00:04:13	2014-11-01 00:04:13
627	48	154	A COMMENT	\N	2014-11-07 07:52:58	2014-11-07 07:52:58
628	5	154	A COMMENT	\N	2014-11-19 03:47:46	2014-11-19 03:47:46
629	4	154	A COMMENT	\N	2014-11-19 22:40:07	2014-11-19 22:40:07
630	38	155	A COMMENT	\N	2014-11-06 00:35:35	2014-11-06 00:35:35
631	28	155	A COMMENT	\N	2014-11-10 08:31:25	2014-11-10 08:31:25
632	15	155	A COMMENT	\N	2014-11-16 15:54:37	2014-11-16 15:54:37
633	15	155	A COMMENT	\N	2014-11-16 21:22:48	2014-11-16 21:22:48
634	48	155	A COMMENT	\N	2014-11-18 14:37:15	2014-11-18 14:37:15
635	48	155	A COMMENT	\N	2014-11-21 18:30:38	2014-11-21 18:30:38
636	11	155	A COMMENT	\N	2014-11-26 13:05:42	2014-11-26 13:05:42
637	29	157	A COMMENT	\N	2014-05-03 13:43:41	2014-05-03 13:43:41
638	29	159	A COMMENT	\N	2014-06-28 20:26:50	2014-06-28 20:26:50
639	12	159	A COMMENT	\N	2014-07-13 15:36:21	2014-07-13 15:36:21
640	46	159	A COMMENT	\N	2014-10-20 06:14:01	2014-10-20 06:14:01
641	2	160	A COMMENT	\N	2014-05-17 15:27:08	2014-05-17 15:27:08
642	22	160	A COMMENT	\N	2014-06-02 23:08:29	2014-06-02 23:08:29
643	31	160	A COMMENT	\N	2014-06-20 07:21:34	2014-06-20 07:21:34
644	31	160	A COMMENT	\N	2014-07-05 15:42:02	2014-07-05 15:42:02
645	11	160	A COMMENT	\N	2014-07-06 18:25:11	2014-07-06 18:25:11
646	12	160	A COMMENT	\N	2014-07-21 14:37:57	2014-07-21 14:37:57
647	48	160	A COMMENT	\N	2014-08-09 19:10:23	2014-08-09 19:10:23
648	33	160	A COMMENT	\N	2014-08-12 10:55:14	2014-08-12 10:55:14
649	40	160	A COMMENT	\N	2014-08-14 04:29:29	2014-08-14 04:29:29
650	48	160	A COMMENT	\N	2014-08-26 06:45:36	2014-08-26 06:45:36
651	11	160	A COMMENT	\N	2014-09-01 10:30:07	2014-09-01 10:30:07
652	4	160	A COMMENT	\N	2014-09-21 15:20:06	2014-09-21 15:20:06
653	33	160	A COMMENT	\N	2014-10-07 04:00:00	2014-10-07 04:00:00
654	4	160	A COMMENT	\N	2014-10-22 07:27:32	2014-10-22 07:27:32
655	9	160	A COMMENT	\N	2014-11-20 15:55:02	2014-11-20 15:55:02
656	40	160	A COMMENT	\N	2014-11-23 08:47:29	2014-11-23 08:47:29
657	29	161	A COMMENT	\N	2014-06-02 01:38:59	2014-06-02 01:38:59
658	44	161	A COMMENT	\N	2014-06-03 10:24:28	2014-06-03 10:24:28
659	4	161	A COMMENT	\N	2014-11-17 00:16:01	2014-11-17 00:16:01
660	29	162	A COMMENT	\N	2014-06-02 01:51:45	2014-06-02 01:51:45
661	33	162	A COMMENT	\N	2014-06-14 11:06:34	2014-06-14 11:06:34
662	28	162	A COMMENT	\N	2014-06-14 20:11:18	2014-06-14 20:11:18
663	31	162	A COMMENT	\N	2014-06-20 05:47:40	2014-06-20 05:47:40
664	9	162	A COMMENT	\N	2014-08-02 16:34:04	2014-08-02 16:34:04
665	48	162	A COMMENT	\N	2014-08-04 07:08:59	2014-08-04 07:08:59
666	38	162	A COMMENT	\N	2014-10-26 11:58:52	2014-10-26 11:58:52
667	4	163	A COMMENT	\N	2014-10-29 06:20:41	2014-10-29 06:20:41
668	46	163	A COMMENT	\N	2014-11-02 02:34:57	2014-11-02 02:34:57
669	2	163	A COMMENT	\N	2014-11-03 13:14:50	2014-11-03 13:14:50
670	29	164	A COMMENT	\N	2014-04-11 03:16:39	2014-04-11 03:16:39
671	22	164	A COMMENT	\N	2014-10-27 08:30:41	2014-10-27 08:30:41
672	11	166	A COMMENT	\N	2014-04-29 09:55:09	2014-04-29 09:55:09
673	22	166	A COMMENT	\N	2014-06-03 21:21:15	2014-06-03 21:21:15
674	2	166	A COMMENT	\N	2014-07-02 22:07:04	2014-07-02 22:07:04
675	38	166	A COMMENT	\N	2014-07-04 08:59:25	2014-07-04 08:59:25
676	33	166	A COMMENT	\N	2014-07-07 07:37:27	2014-07-07 07:37:27
677	9	166	A COMMENT	\N	2014-07-11 03:59:59	2014-07-11 03:59:59
678	4	166	A COMMENT	\N	2014-07-18 11:10:13	2014-07-18 11:10:13
679	9	166	A COMMENT	\N	2014-07-29 10:57:48	2014-07-29 10:57:48
680	48	166	A COMMENT	\N	2014-07-29 15:17:59	2014-07-29 15:17:59
681	40	166	A COMMENT	\N	2014-08-02 08:55:15	2014-08-02 08:55:15
682	48	166	A COMMENT	\N	2014-08-10 20:41:26	2014-08-10 20:41:26
683	29	166	A COMMENT	\N	2014-09-03 09:59:07	2014-09-03 09:59:07
684	3	166	A COMMENT	\N	2014-09-04 16:47:02	2014-09-04 16:47:02
685	33	166	A COMMENT	\N	2014-09-06 11:17:45	2014-09-06 11:17:45
686	11	166	A COMMENT	\N	2014-09-09 06:53:39	2014-09-09 06:53:39
687	4	166	A COMMENT	\N	2014-09-15 21:01:46	2014-09-15 21:01:46
688	28	166	A COMMENT	\N	2014-10-29 15:54:35	2014-10-29 15:54:35
689	2	166	A COMMENT	\N	2014-11-02 17:18:14	2014-11-02 17:18:14
690	46	166	A COMMENT	\N	2014-11-02 21:44:50	2014-11-02 21:44:50
691	5	167	A COMMENT	\N	2014-07-29 13:57:25	2014-07-29 13:57:25
692	38	167	A COMMENT	\N	2014-08-27 01:10:46	2014-08-27 01:10:46
693	29	170	A COMMENT	\N	2014-08-22 14:55:54	2014-08-22 14:55:54
694	2	170	A COMMENT	\N	2014-09-08 13:25:44	2014-09-08 13:25:44
695	5	170	A COMMENT	\N	2014-09-10 12:12:23	2014-09-10 12:12:23
696	4	170	A COMMENT	\N	2014-10-23 01:08:20	2014-10-23 01:08:20
697	31	173	A COMMENT	\N	2014-07-29 14:05:15	2014-07-29 14:05:15
698	33	173	A COMMENT	\N	2014-10-21 18:40:17	2014-10-21 18:40:17
699	33	174	A COMMENT	\N	2014-06-28 19:42:48	2014-06-28 19:42:48
700	12	174	A COMMENT	\N	2014-08-06 14:26:01	2014-08-06 14:26:01
701	31	174	A COMMENT	\N	2014-09-16 16:26:13	2014-09-16 16:26:13
702	44	174	A COMMENT	\N	2014-09-19 21:10:45	2014-09-19 21:10:45
703	28	174	A COMMENT	\N	2014-10-09 21:16:38	2014-10-09 21:16:38
704	3	174	A COMMENT	\N	2014-10-12 08:45:42	2014-10-12 08:45:42
705	15	174	A COMMENT	\N	2014-10-19 20:23:16	2014-10-19 20:23:16
706	48	174	A COMMENT	\N	2014-11-14 23:51:54	2014-11-14 23:51:54
707	33	176	A COMMENT	\N	2014-09-18 22:02:09	2014-09-18 22:02:09
708	15	177	A COMMENT	\N	2014-07-26 00:13:21	2014-07-26 00:13:21
709	5	177	A COMMENT	\N	2014-08-02 00:58:59	2014-08-02 00:58:59
710	12	177	A COMMENT	\N	2014-08-06 14:28:45	2014-08-06 14:28:45
711	3	177	A COMMENT	\N	2014-08-19 05:36:19	2014-08-19 05:36:19
712	31	177	A COMMENT	\N	2014-09-03 22:22:34	2014-09-03 22:22:34
713	29	177	A COMMENT	\N	2014-09-05 20:26:12	2014-09-05 20:26:12
714	5	177	A COMMENT	\N	2014-09-10 15:44:30	2014-09-10 15:44:30
715	38	177	A COMMENT	\N	2014-09-20 19:53:10	2014-09-20 19:53:10
716	4	177	A COMMENT	\N	2014-10-04 22:34:49	2014-10-04 22:34:49
717	22	177	A COMMENT	\N	2014-10-08 04:24:32	2014-10-08 04:24:32
718	48	177	A COMMENT	\N	2014-10-09 10:19:03	2014-10-09 10:19:03
719	22	177	A COMMENT	\N	2014-10-10 21:42:46	2014-10-10 21:42:46
720	28	177	A COMMENT	\N	2014-10-13 17:00:01	2014-10-13 17:00:01
721	33	177	A COMMENT	\N	2014-10-20 07:01:38	2014-10-20 07:01:38
722	9	177	A COMMENT	\N	2014-11-07 19:21:07	2014-11-07 19:21:07
723	33	177	A COMMENT	\N	2014-11-22 15:35:55	2014-11-22 15:35:55
724	38	180	A COMMENT	\N	2014-07-24 02:57:14	2014-07-24 02:57:14
725	12	180	A COMMENT	\N	2014-08-17 14:27:46	2014-08-17 14:27:46
726	44	180	A COMMENT	\N	2014-08-30 21:46:55	2014-08-30 21:46:55
727	29	180	A COMMENT	\N	2014-09-07 00:38:05	2014-09-07 00:38:05
728	2	180	A COMMENT	\N	2014-10-30 03:13:52	2014-10-30 03:13:52
729	28	181	A COMMENT	\N	2014-10-26 06:19:34	2014-10-26 06:19:34
730	5	182	A COMMENT	\N	2014-06-15 21:00:07	2014-06-15 21:00:07
731	46	182	A COMMENT	\N	2014-07-01 06:04:46	2014-07-01 06:04:46
732	4	182	A COMMENT	\N	2014-07-05 13:14:23	2014-07-05 13:14:23
733	48	182	A COMMENT	\N	2014-07-06 17:17:32	2014-07-06 17:17:32
734	46	182	A COMMENT	\N	2014-07-19 20:03:12	2014-07-19 20:03:12
735	38	182	A COMMENT	\N	2014-08-01 05:36:13	2014-08-01 05:36:13
736	33	182	A COMMENT	\N	2014-08-12 16:20:43	2014-08-12 16:20:43
737	5	182	A COMMENT	\N	2014-10-20 15:26:24	2014-10-20 15:26:24
738	9	182	A COMMENT	\N	2014-10-27 00:51:34	2014-10-27 00:51:34
739	31	182	A COMMENT	\N	2014-11-22 00:12:53	2014-11-22 00:12:53
740	38	183	A COMMENT	\N	2014-07-02 10:46:13	2014-07-02 10:46:13
741	4	183	A COMMENT	\N	2014-07-16 08:33:23	2014-07-16 08:33:23
742	22	183	A COMMENT	\N	2014-08-15 08:02:13	2014-08-15 08:02:13
743	38	183	A COMMENT	\N	2014-08-15 10:22:13	2014-08-15 10:22:13
744	11	183	A COMMENT	\N	2014-10-07 10:37:51	2014-10-07 10:37:51
745	31	185	A COMMENT	\N	2014-04-13 05:40:38	2014-04-13 05:40:38
746	33	185	A COMMENT	\N	2014-07-08 09:20:49	2014-07-08 09:20:49
747	38	185	A COMMENT	\N	2014-08-17 22:23:23	2014-08-17 22:23:23
748	29	185	A COMMENT	\N	2014-08-22 16:22:26	2014-08-22 16:22:26
749	11	185	A COMMENT	\N	2014-09-03 18:59:04	2014-09-03 18:59:04
750	2	185	A COMMENT	\N	2014-09-09 11:43:34	2014-09-09 11:43:34
751	38	185	A COMMENT	\N	2014-10-26 08:56:56	2014-10-26 08:56:56
752	33	186	A COMMENT	\N	2014-07-29 23:48:48	2014-07-29 23:48:48
753	5	186	A COMMENT	\N	2014-10-10 17:21:01	2014-10-10 17:21:01
754	15	187	A COMMENT	\N	2014-08-18 05:21:00	2014-08-18 05:21:00
755	38	187	A COMMENT	\N	2014-08-23 14:10:04	2014-08-23 14:10:04
756	22	187	A COMMENT	\N	2014-10-01 21:06:27	2014-10-01 21:06:27
757	31	187	A COMMENT	\N	2014-10-04 03:15:16	2014-10-04 03:15:16
758	38	187	A COMMENT	\N	2014-10-14 15:54:57	2014-10-14 15:54:57
759	9	187	A COMMENT	\N	2014-11-02 17:01:11	2014-11-02 17:01:11
760	3	188	A COMMENT	\N	2014-10-31 10:58:41	2014-10-31 10:58:41
761	5	188	A COMMENT	\N	2014-11-25 00:25:20	2014-11-25 00:25:20
762	12	189	A COMMENT	\N	2014-10-30 04:43:21	2014-10-30 04:43:21
763	40	191	A COMMENT	\N	2014-03-17 06:49:52	2014-03-17 06:49:52
764	5	191	A COMMENT	\N	2014-08-29 11:49:18	2014-08-29 11:49:18
765	28	192	A COMMENT	\N	2014-07-22 23:00:58	2014-07-22 23:00:58
766	15	193	A COMMENT	\N	2014-07-03 06:15:39	2014-07-03 06:15:39
767	38	193	A COMMENT	\N	2014-08-14 13:11:41	2014-08-14 13:11:41
768	33	193	A COMMENT	\N	2014-08-14 15:10:24	2014-08-14 15:10:24
769	48	193	A COMMENT	\N	2014-08-14 20:34:35	2014-08-14 20:34:35
770	40	193	A COMMENT	\N	2014-09-16 00:45:23	2014-09-16 00:45:23
771	44	193	A COMMENT	\N	2014-09-25 19:55:30	2014-09-25 19:55:30
772	31	193	A COMMENT	\N	2014-10-14 22:56:47	2014-10-14 22:56:47
773	5	193	A COMMENT	\N	2014-10-19 17:06:41	2014-10-19 17:06:41
774	3	193	A COMMENT	\N	2014-10-31 06:28:49	2014-10-31 06:28:49
775	29	193	A COMMENT	\N	2014-11-13 21:14:11	2014-11-13 21:14:11
776	40	194	A COMMENT	\N	2014-08-05 10:31:58	2014-08-05 10:31:58
777	12	195	A COMMENT	\N	2014-08-04 13:42:21	2014-08-04 13:42:21
778	3	195	A COMMENT	\N	2014-08-14 23:13:39	2014-08-14 23:13:39
779	5	195	A COMMENT	\N	2014-08-26 12:23:48	2014-08-26 12:23:48
780	3	195	A COMMENT	\N	2014-10-18 10:07:54	2014-10-18 10:07:54
781	2	195	A COMMENT	\N	2014-10-28 22:57:52	2014-10-28 22:57:52
782	38	198	A COMMENT	\N	2014-07-31 00:02:00	2014-07-31 00:02:00
783	15	198	A COMMENT	\N	2014-09-02 13:41:44	2014-09-02 13:41:44
784	31	198	A COMMENT	\N	2014-11-17 02:12:44	2014-11-17 02:12:44
785	48	198	A COMMENT	\N	2014-11-23 01:25:47	2014-11-23 01:25:47
786	5	198	A COMMENT	\N	2014-11-23 13:37:43	2014-11-23 13:37:43
787	31	199	A COMMENT	\N	2014-06-28 16:10:31	2014-06-28 16:10:31
788	46	199	A COMMENT	\N	2014-08-17 06:12:37	2014-08-17 06:12:37
789	46	199	A COMMENT	\N	2014-08-29 18:22:55	2014-08-29 18:22:55
790	4	199	A COMMENT	\N	2014-09-03 00:19:18	2014-09-03 00:19:18
791	4	199	A COMMENT	\N	2014-10-31 07:06:03	2014-10-31 07:06:03
792	48	200	A COMMENT	\N	2014-11-16 15:33:52	2014-11-16 15:33:52
793	46	201	A COMMENT	\N	2014-04-01 23:52:12	2014-04-01 23:52:12
794	48	201	A COMMENT	\N	2014-04-04 17:45:29	2014-04-04 17:45:29
795	46	201	A COMMENT	\N	2014-04-12 19:46:34	2014-04-12 19:46:34
796	15	201	A COMMENT	\N	2014-05-13 18:41:18	2014-05-13 18:41:18
797	33	201	A COMMENT	\N	2014-05-23 04:15:39	2014-05-23 04:15:39
798	28	201	A COMMENT	\N	2014-06-04 12:58:53	2014-06-04 12:58:53
799	4	201	A COMMENT	\N	2014-08-18 09:32:02	2014-08-18 09:32:02
800	9	201	A COMMENT	\N	2014-08-29 00:15:28	2014-08-29 00:15:28
801	44	201	A COMMENT	\N	2014-10-17 14:15:02	2014-10-17 14:15:02
802	12	201	A COMMENT	\N	2014-11-11 14:36:45	2014-11-11 14:36:45
803	31	202	A COMMENT	\N	2014-07-06 12:54:52	2014-07-06 12:54:52
804	40	202	A COMMENT	\N	2014-07-23 09:35:29	2014-07-23 09:35:29
805	4	202	A COMMENT	\N	2014-07-28 21:44:57	2014-07-28 21:44:57
806	12	202	A COMMENT	\N	2014-07-30 18:24:23	2014-07-30 18:24:23
807	11	202	A COMMENT	\N	2014-09-05 19:03:58	2014-09-05 19:03:58
808	38	202	A COMMENT	\N	2014-09-09 18:49:25	2014-09-09 18:49:25
809	15	202	A COMMENT	\N	2014-09-13 12:54:12	2014-09-13 12:54:12
810	29	202	A COMMENT	\N	2014-09-18 04:12:03	2014-09-18 04:12:03
811	11	202	A COMMENT	\N	2014-09-20 03:32:25	2014-09-20 03:32:25
812	4	202	A COMMENT	\N	2014-10-17 06:14:39	2014-10-17 06:14:39
813	9	202	A COMMENT	\N	2014-10-23 16:34:32	2014-10-23 16:34:32
814	28	202	A COMMENT	\N	2014-10-30 11:08:01	2014-10-30 11:08:01
815	5	202	A COMMENT	\N	2014-11-03 07:17:21	2014-11-03 07:17:21
816	46	202	A COMMENT	\N	2014-11-04 07:42:28	2014-11-04 07:42:28
817	12	202	A COMMENT	\N	2014-11-10 17:49:22	2014-11-10 17:49:22
818	33	202	A COMMENT	\N	2014-11-12 08:08:34	2014-11-12 08:08:34
819	40	203	A COMMENT	\N	2014-08-30 21:54:38	2014-08-30 21:54:38
820	31	205	A COMMENT	\N	2014-06-04 04:23:56	2014-06-04 04:23:56
821	22	205	A COMMENT	\N	2014-07-05 11:15:50	2014-07-05 11:15:50
822	2	205	A COMMENT	\N	2014-07-17 09:54:16	2014-07-17 09:54:16
823	11	205	A COMMENT	\N	2014-09-05 02:06:42	2014-09-05 02:06:42
824	29	205	A COMMENT	\N	2014-09-05 23:34:32	2014-09-05 23:34:32
825	15	205	A COMMENT	\N	2014-10-07 14:25:14	2014-10-07 14:25:14
826	40	205	A COMMENT	\N	2014-10-12 03:52:24	2014-10-12 03:52:24
827	28	205	A COMMENT	\N	2014-11-02 01:39:30	2014-11-02 01:39:30
828	3	205	A COMMENT	\N	2014-11-07 08:12:57	2014-11-07 08:12:57
829	40	207	A COMMENT	\N	2014-06-28 22:52:24	2014-06-28 22:52:24
830	48	207	A COMMENT	\N	2014-06-29 21:35:22	2014-06-29 21:35:22
831	12	207	A COMMENT	\N	2014-09-08 16:32:25	2014-09-08 16:32:25
832	31	207	A COMMENT	\N	2014-09-28 06:06:32	2014-09-28 06:06:32
833	28	207	A COMMENT	\N	2014-11-20 16:23:13	2014-11-20 16:23:13
834	44	207	A COMMENT	\N	2014-11-23 13:25:34	2014-11-23 13:25:34
835	40	208	A COMMENT	\N	2014-04-21 20:49:51	2014-04-21 20:49:51
836	33	208	A COMMENT	\N	2014-05-06 06:55:17	2014-05-06 06:55:17
837	9	208	A COMMENT	\N	2014-05-21 11:08:52	2014-05-21 11:08:52
838	3	208	A COMMENT	\N	2014-06-07 03:07:09	2014-06-07 03:07:09
839	4	208	A COMMENT	\N	2014-06-08 04:46:29	2014-06-08 04:46:29
840	3	208	A COMMENT	\N	2014-06-15 08:35:59	2014-06-15 08:35:59
841	15	208	A COMMENT	\N	2014-08-13 23:15:09	2014-08-13 23:15:09
842	33	208	A COMMENT	\N	2014-09-11 12:14:20	2014-09-11 12:14:20
843	38	208	A COMMENT	\N	2014-10-08 13:01:18	2014-10-08 13:01:18
844	11	209	A COMMENT	\N	2014-05-07 19:27:49	2014-05-07 19:27:49
845	22	209	A COMMENT	\N	2014-08-30 17:46:08	2014-08-30 17:46:08
846	48	209	A COMMENT	\N	2014-10-19 01:20:27	2014-10-19 01:20:27
847	40	210	A COMMENT	\N	2014-05-23 23:24:35	2014-05-23 23:24:35
848	3	210	A COMMENT	\N	2014-11-04 10:15:13	2014-11-04 10:15:13
849	40	211	A COMMENT	\N	2014-06-09 09:06:16	2014-06-09 09:06:16
850	44	211	A COMMENT	\N	2014-07-08 02:06:52	2014-07-08 02:06:52
851	2	212	A COMMENT	\N	2014-07-31 12:19:06	2014-07-31 12:19:06
852	15	212	A COMMENT	\N	2014-08-26 07:20:56	2014-08-26 07:20:56
853	9	212	A COMMENT	\N	2014-09-08 12:16:46	2014-09-08 12:16:46
854	9	212	A COMMENT	\N	2014-09-12 08:15:58	2014-09-12 08:15:58
855	48	212	A COMMENT	\N	2014-09-17 08:09:49	2014-09-17 08:09:49
856	44	212	A COMMENT	\N	2014-10-02 23:43:47	2014-10-02 23:43:47
857	40	212	A COMMENT	\N	2014-10-27 13:23:10	2014-10-27 13:23:10
858	44	212	A COMMENT	\N	2014-11-23 11:42:42	2014-11-23 11:42:42
859	40	213	A COMMENT	\N	2014-07-09 05:28:05	2014-07-09 05:28:05
860	12	213	A COMMENT	\N	2014-07-12 14:22:27	2014-07-12 14:22:27
861	40	213	A COMMENT	\N	2014-08-03 13:33:07	2014-08-03 13:33:07
862	2	213	A COMMENT	\N	2014-08-13 10:44:34	2014-08-13 10:44:34
863	28	213	A COMMENT	\N	2014-09-04 06:36:26	2014-09-04 06:36:26
864	3	213	A COMMENT	\N	2014-09-28 19:59:49	2014-09-28 19:59:49
865	15	216	A COMMENT	\N	2014-06-05 08:09:31	2014-06-05 08:09:31
866	38	216	A COMMENT	\N	2014-11-26 20:22:52	2014-11-26 20:22:52
867	48	217	A COMMENT	\N	2014-09-14 18:50:13	2014-09-14 18:50:13
868	29	217	A COMMENT	\N	2014-09-16 08:00:15	2014-09-16 08:00:15
869	33	217	A COMMENT	\N	2014-09-18 05:17:50	2014-09-18 05:17:50
870	9	217	A COMMENT	\N	2014-09-29 05:48:39	2014-09-29 05:48:39
871	31	217	A COMMENT	\N	2014-10-08 13:45:28	2014-10-08 13:45:28
872	12	217	A COMMENT	\N	2014-10-13 16:28:00	2014-10-13 16:28:00
873	11	217	A COMMENT	\N	2014-10-29 20:22:42	2014-10-29 20:22:42
874	28	217	A COMMENT	\N	2014-10-30 00:23:29	2014-10-30 00:23:29
875	31	217	A COMMENT	\N	2014-11-23 09:09:40	2014-11-23 09:09:40
876	40	218	A COMMENT	\N	2014-09-06 08:41:17	2014-09-06 08:41:17
877	9	218	A COMMENT	\N	2014-10-26 11:42:07	2014-10-26 11:42:07
878	31	218	A COMMENT	\N	2014-11-27 18:02:07	2014-11-27 18:02:07
879	33	219	A COMMENT	\N	2014-06-12 13:27:12	2014-06-12 13:27:12
880	40	220	A COMMENT	\N	2014-03-26 15:03:46	2014-03-26 15:03:46
881	22	220	A COMMENT	\N	2014-06-16 15:39:24	2014-06-16 15:39:24
882	48	220	A COMMENT	\N	2014-08-02 17:16:31	2014-08-02 17:16:31
883	15	220	A COMMENT	\N	2014-09-02 23:00:26	2014-09-02 23:00:26
884	4	220	A COMMENT	\N	2014-09-10 15:22:21	2014-09-10 15:22:21
885	5	220	A COMMENT	\N	2014-09-12 05:31:19	2014-09-12 05:31:19
886	29	220	A COMMENT	\N	2014-10-01 20:14:06	2014-10-01 20:14:06
887	4	220	A COMMENT	\N	2014-11-05 14:48:05	2014-11-05 14:48:05
888	48	220	A COMMENT	\N	2014-11-22 19:14:24	2014-11-22 19:14:24
889	38	221	A COMMENT	\N	2014-08-01 19:40:56	2014-08-01 19:40:56
890	4	221	A COMMENT	\N	2014-08-17 08:09:24	2014-08-17 08:09:24
891	3	221	A COMMENT	\N	2014-09-11 19:10:11	2014-09-11 19:10:11
892	40	222	A COMMENT	\N	2014-05-20 07:20:05	2014-05-20 07:20:05
893	33	222	A COMMENT	\N	2014-05-23 16:14:08	2014-05-23 16:14:08
894	31	222	A COMMENT	\N	2014-06-06 21:29:36	2014-06-06 21:29:36
895	44	222	A COMMENT	\N	2014-06-28 05:28:25	2014-06-28 05:28:25
896	40	222	A COMMENT	\N	2014-07-25 15:03:04	2014-07-25 15:03:04
897	3	222	A COMMENT	\N	2014-09-01 04:11:41	2014-09-01 04:11:41
898	40	222	A COMMENT	\N	2014-09-04 14:11:11	2014-09-04 14:11:11
899	12	222	A COMMENT	\N	2014-09-15 23:39:12	2014-09-15 23:39:12
900	46	222	A COMMENT	\N	2014-09-18 03:10:52	2014-09-18 03:10:52
901	29	222	A COMMENT	\N	2014-11-03 03:54:00	2014-11-03 03:54:00
902	40	223	A COMMENT	\N	2014-06-03 07:24:18	2014-06-03 07:24:18
903	28	223	A COMMENT	\N	2014-06-30 08:03:34	2014-06-30 08:03:34
904	22	223	A COMMENT	\N	2014-08-10 02:19:02	2014-08-10 02:19:02
905	44	223	A COMMENT	\N	2014-10-21 09:49:12	2014-10-21 09:49:12
906	40	224	A COMMENT	\N	2014-06-26 12:52:36	2014-06-26 12:52:36
907	40	225	A COMMENT	\N	2014-08-26 11:59:07	2014-08-26 11:59:07
908	44	225	A COMMENT	\N	2014-11-06 16:49:18	2014-11-06 16:49:18
909	44	226	A COMMENT	\N	2014-09-26 05:44:31	2014-09-26 05:44:31
910	2	226	A COMMENT	\N	2014-10-04 05:14:02	2014-10-04 05:14:02
911	9	226	A COMMENT	\N	2014-10-13 15:18:43	2014-10-13 15:18:43
912	15	226	A COMMENT	\N	2014-10-22 22:09:10	2014-10-22 22:09:10
913	28	226	A COMMENT	\N	2014-11-14 00:54:48	2014-11-14 00:54:48
914	40	228	A COMMENT	\N	2014-05-10 17:15:01	2014-05-10 17:15:01
915	33	228	A COMMENT	\N	2014-06-03 10:25:37	2014-06-03 10:25:37
916	2	228	A COMMENT	\N	2014-08-29 14:27:11	2014-08-29 14:27:11
917	11	228	A COMMENT	\N	2014-09-21 18:24:11	2014-09-21 18:24:11
918	44	228	A COMMENT	\N	2014-10-03 20:57:04	2014-10-03 20:57:04
919	29	228	A COMMENT	\N	2014-11-12 09:48:46	2014-11-12 09:48:46
920	28	228	A COMMENT	\N	2014-11-12 18:20:03	2014-11-12 18:20:03
921	9	228	A COMMENT	\N	2014-11-15 03:52:24	2014-11-15 03:52:24
922	40	230	A COMMENT	\N	2014-04-08 10:30:12	2014-04-08 10:30:12
923	3	230	A COMMENT	\N	2014-06-11 09:22:56	2014-06-11 09:22:56
924	29	230	A COMMENT	\N	2014-06-27 15:44:56	2014-06-27 15:44:56
925	31	230	A COMMENT	\N	2014-06-30 03:16:33	2014-06-30 03:16:33
926	40	231	A COMMENT	\N	2014-06-12 18:25:03	2014-06-12 18:25:03
927	29	231	A COMMENT	\N	2014-06-15 07:22:05	2014-06-15 07:22:05
928	9	231	A COMMENT	\N	2014-08-24 23:35:21	2014-08-24 23:35:21
929	46	232	A COMMENT	\N	2014-10-08 19:22:08	2014-10-08 19:22:08
930	40	233	A COMMENT	\N	2014-08-03 19:29:42	2014-08-03 19:29:42
931	40	234	A COMMENT	\N	2014-04-28 15:54:09	2014-04-28 15:54:09
932	3	234	A COMMENT	\N	2014-06-11 02:38:31	2014-06-11 02:38:31
933	38	234	A COMMENT	\N	2014-06-21 05:04:53	2014-06-21 05:04:53
934	31	234	A COMMENT	\N	2014-08-01 00:58:24	2014-08-01 00:58:24
935	31	234	A COMMENT	\N	2014-08-03 13:54:37	2014-08-03 13:54:37
936	33	234	A COMMENT	\N	2014-08-11 15:14:13	2014-08-11 15:14:13
937	9	234	A COMMENT	\N	2014-10-17 01:27:28	2014-10-17 01:27:28
938	12	234	A COMMENT	\N	2014-10-21 15:53:17	2014-10-21 15:53:17
939	22	234	A COMMENT	\N	2014-11-03 22:13:54	2014-11-03 22:13:54
940	3	234	A COMMENT	\N	2014-11-14 19:28:59	2014-11-14 19:28:59
941	40	236	A COMMENT	\N	2014-04-30 06:58:58	2014-04-30 06:58:58
942	3	237	A COMMENT	\N	2014-03-22 02:42:32	2014-03-22 02:42:32
943	48	237	A COMMENT	\N	2014-04-04 12:46:19	2014-04-04 12:46:19
944	31	237	A COMMENT	\N	2014-04-05 15:15:43	2014-04-05 15:15:43
945	44	237	A COMMENT	\N	2014-04-22 12:22:29	2014-04-22 12:22:29
946	9	237	A COMMENT	\N	2014-09-28 22:48:34	2014-09-28 22:48:34
947	46	237	A COMMENT	\N	2014-10-13 19:09:29	2014-10-13 19:09:29
948	22	237	A COMMENT	\N	2014-11-01 09:54:27	2014-11-01 09:54:27
949	4	239	A COMMENT	\N	2014-06-21 04:46:45	2014-06-21 04:46:45
950	15	239	A COMMENT	\N	2014-07-16 07:36:17	2014-07-16 07:36:17
951	44	239	A COMMENT	\N	2014-07-25 02:24:13	2014-07-25 02:24:13
952	38	239	A COMMENT	\N	2014-09-23 09:21:43	2014-09-23 09:21:43
953	3	239	A COMMENT	\N	2014-10-09 04:55:16	2014-10-09 04:55:16
954	22	240	A COMMENT	\N	2014-05-16 03:40:51	2014-05-16 03:40:51
955	2	240	A COMMENT	\N	2014-05-16 15:19:32	2014-05-16 15:19:32
956	3	240	A COMMENT	\N	2014-05-17 14:36:17	2014-05-17 14:36:17
957	2	240	A COMMENT	\N	2014-07-18 08:26:47	2014-07-18 08:26:47
958	29	240	A COMMENT	\N	2014-07-20 13:25:05	2014-07-20 13:25:05
959	15	240	A COMMENT	\N	2014-08-10 22:40:18	2014-08-10 22:40:18
960	44	240	A COMMENT	\N	2014-08-28 03:54:47	2014-08-28 03:54:47
961	33	240	A COMMENT	\N	2014-10-09 23:05:41	2014-10-09 23:05:41
962	12	240	A COMMENT	\N	2014-10-14 13:48:08	2014-10-14 13:48:08
963	22	240	A COMMENT	\N	2014-10-19 03:31:06	2014-10-19 03:31:06
964	15	241	A COMMENT	\N	2014-05-30 22:53:20	2014-05-30 22:53:20
965	3	241	A COMMENT	\N	2014-06-07 18:23:23	2014-06-07 18:23:23
966	12	241	A COMMENT	\N	2014-06-18 22:29:16	2014-06-18 22:29:16
967	5	241	A COMMENT	\N	2014-06-25 21:51:28	2014-06-25 21:51:28
968	38	241	A COMMENT	\N	2014-08-01 06:33:25	2014-08-01 06:33:25
969	31	241	A COMMENT	\N	2014-08-03 17:11:12	2014-08-03 17:11:12
970	3	241	A COMMENT	\N	2014-08-06 21:51:26	2014-08-06 21:51:26
971	46	241	A COMMENT	\N	2014-08-12 22:26:34	2014-08-12 22:26:34
972	44	241	A COMMENT	\N	2014-08-15 22:29:47	2014-08-15 22:29:47
973	38	241	A COMMENT	\N	2014-08-18 20:18:13	2014-08-18 20:18:13
974	33	241	A COMMENT	\N	2014-09-07 16:03:45	2014-09-07 16:03:45
975	11	241	A COMMENT	\N	2014-09-15 08:36:31	2014-09-15 08:36:31
976	2	241	A COMMENT	\N	2014-09-19 01:15:36	2014-09-19 01:15:36
977	44	241	A COMMENT	\N	2014-11-01 13:48:08	2014-11-01 13:48:08
978	5	241	A COMMENT	\N	2014-11-16 03:43:50	2014-11-16 03:43:50
979	40	242	A COMMENT	\N	2014-06-17 17:45:50	2014-06-17 17:45:50
980	3	242	A COMMENT	\N	2014-06-17 20:43:12	2014-06-17 20:43:12
981	2	242	A COMMENT	\N	2014-06-23 09:05:46	2014-06-23 09:05:46
982	4	242	A COMMENT	\N	2014-07-05 18:53:18	2014-07-05 18:53:18
983	9	242	A COMMENT	\N	2014-07-13 20:51:33	2014-07-13 20:51:33
984	31	242	A COMMENT	\N	2014-08-24 05:11:24	2014-08-24 05:11:24
985	9	242	A COMMENT	\N	2014-09-09 20:25:26	2014-09-09 20:25:26
986	12	242	A COMMENT	\N	2014-09-14 03:57:26	2014-09-14 03:57:26
987	5	242	A COMMENT	\N	2014-09-19 06:55:15	2014-09-19 06:55:15
988	31	242	A COMMENT	\N	2014-09-22 10:32:28	2014-09-22 10:32:28
989	46	242	A COMMENT	\N	2014-09-22 14:28:03	2014-09-22 14:28:03
990	31	242	A COMMENT	\N	2014-09-24 21:37:26	2014-09-24 21:37:26
991	44	242	A COMMENT	\N	2014-09-30 18:14:11	2014-09-30 18:14:11
992	46	242	A COMMENT	\N	2014-10-07 08:16:35	2014-10-07 08:16:35
993	11	242	A COMMENT	\N	2014-10-09 22:24:04	2014-10-09 22:24:04
994	48	242	A COMMENT	\N	2014-10-11 08:05:48	2014-10-11 08:05:48
995	33	242	A COMMENT	\N	2014-10-14 13:01:48	2014-10-14 13:01:48
996	4	242	A COMMENT	\N	2014-10-18 09:30:57	2014-10-18 09:30:57
997	12	242	A COMMENT	\N	2014-10-19 03:40:55	2014-10-19 03:40:55
998	28	242	A COMMENT	\N	2014-11-21 06:40:44	2014-11-21 06:40:44
999	4	243	A COMMENT	\N	2014-05-05 09:33:47	2014-05-05 09:33:47
1000	2	243	A COMMENT	\N	2014-05-06 14:03:51	2014-05-06 14:03:51
1001	29	243	A COMMENT	\N	2014-05-16 14:50:55	2014-05-16 14:50:55
1002	33	243	A COMMENT	\N	2014-05-24 21:31:40	2014-05-24 21:31:40
1003	12	243	A COMMENT	\N	2014-06-01 00:43:50	2014-06-01 00:43:50
1004	29	243	A COMMENT	\N	2014-07-01 17:56:55	2014-07-01 17:56:55
1005	3	243	A COMMENT	\N	2014-07-05 14:27:24	2014-07-05 14:27:24
1006	28	243	A COMMENT	\N	2014-07-16 00:20:46	2014-07-16 00:20:46
1007	12	243	A COMMENT	\N	2014-07-21 01:14:48	2014-07-21 01:14:48
1008	9	243	A COMMENT	\N	2014-07-22 05:09:16	2014-07-22 05:09:16
1009	22	243	A COMMENT	\N	2014-07-28 15:42:36	2014-07-28 15:42:36
1010	22	243	A COMMENT	\N	2014-09-04 18:56:25	2014-09-04 18:56:25
1011	40	243	A COMMENT	\N	2014-09-28 10:37:05	2014-09-28 10:37:05
1012	31	243	A COMMENT	\N	2014-10-01 08:34:21	2014-10-01 08:34:21
1013	46	243	A COMMENT	\N	2014-10-05 09:13:59	2014-10-05 09:13:59
1014	3	243	A COMMENT	\N	2014-11-03 07:50:04	2014-11-03 07:50:04
1015	40	244	A COMMENT	\N	2014-07-21 17:23:13	2014-07-21 17:23:13
1016	4	244	A COMMENT	\N	2014-08-04 01:00:13	2014-08-04 01:00:13
1017	3	244	A COMMENT	\N	2014-08-08 04:47:53	2014-08-08 04:47:53
1018	28	244	A COMMENT	\N	2014-08-09 22:07:53	2014-08-09 22:07:53
1019	9	244	A COMMENT	\N	2014-08-13 02:59:21	2014-08-13 02:59:21
1020	48	244	A COMMENT	\N	2014-09-17 01:47:49	2014-09-17 01:47:49
1021	11	244	A COMMENT	\N	2014-09-27 15:09:44	2014-09-27 15:09:44
1022	31	244	A COMMENT	\N	2014-10-18 03:47:05	2014-10-18 03:47:05
1023	5	244	A COMMENT	\N	2014-11-22 08:54:12	2014-11-22 08:54:12
1024	2	244	A COMMENT	\N	2014-11-25 15:30:14	2014-11-25 15:30:14
1025	40	245	A COMMENT	\N	2014-07-20 14:13:28	2014-07-20 14:13:28
1026	46	245	A COMMENT	\N	2014-08-08 20:45:41	2014-08-08 20:45:41
1027	15	245	A COMMENT	\N	2014-08-27 12:43:43	2014-08-27 12:43:43
1028	38	245	A COMMENT	\N	2014-09-08 22:39:02	2014-09-08 22:39:02
1029	29	245	A COMMENT	\N	2014-10-25 04:36:22	2014-10-25 04:36:22
1030	5	245	A COMMENT	\N	2014-11-21 13:17:30	2014-11-21 13:17:30
1031	2	245	A COMMENT	\N	2014-11-26 11:12:05	2014-11-26 11:12:05
1032	40	246	A COMMENT	\N	2014-09-10 04:22:06	2014-09-10 04:22:06
1033	5	246	A COMMENT	\N	2014-10-06 17:12:37	2014-10-06 17:12:37
1034	5	246	A COMMENT	\N	2014-10-08 09:48:14	2014-10-08 09:48:14
1035	44	246	A COMMENT	\N	2014-10-10 23:52:23	2014-10-10 23:52:23
1036	48	246	A COMMENT	\N	2014-10-28 13:21:59	2014-10-28 13:21:59
1037	22	246	A COMMENT	\N	2014-11-02 22:59:28	2014-11-02 22:59:28
1038	40	247	A COMMENT	\N	2014-03-24 15:24:51	2014-03-24 15:24:51
1039	2	247	A COMMENT	\N	2014-03-29 04:56:23	2014-03-29 04:56:23
1040	38	247	A COMMENT	\N	2014-04-04 01:14:04	2014-04-04 01:14:04
1041	31	247	A COMMENT	\N	2014-04-04 11:32:59	2014-04-04 11:32:59
1042	3	247	A COMMENT	\N	2014-04-24 23:20:51	2014-04-24 23:20:51
1043	15	247	A COMMENT	\N	2014-04-28 17:06:46	2014-04-28 17:06:46
1044	33	247	A COMMENT	\N	2014-05-25 23:44:26	2014-05-25 23:44:26
1045	9	247	A COMMENT	\N	2014-06-04 22:41:59	2014-06-04 22:41:59
1046	2	247	A COMMENT	\N	2014-06-24 18:18:31	2014-06-24 18:18:31
1047	4	247	A COMMENT	\N	2014-07-08 09:15:44	2014-07-08 09:15:44
1048	44	247	A COMMENT	\N	2014-07-10 13:04:32	2014-07-10 13:04:32
1049	28	247	A COMMENT	\N	2014-07-29 12:16:15	2014-07-29 12:16:15
1050	31	247	A COMMENT	\N	2014-08-24 10:40:02	2014-08-24 10:40:02
1051	5	247	A COMMENT	\N	2014-08-29 17:20:50	2014-08-29 17:20:50
1052	40	247	A COMMENT	\N	2014-09-02 13:57:44	2014-09-02 13:57:44
1053	46	247	A COMMENT	\N	2014-10-31 11:42:44	2014-10-31 11:42:44
1054	22	247	A COMMENT	\N	2014-11-03 14:56:40	2014-11-03 14:56:40
1055	4	247	A COMMENT	\N	2014-11-08 21:59:33	2014-11-08 21:59:33
1056	9	247	A COMMENT	\N	2014-11-18 19:38:37	2014-11-18 19:38:37
1057	44	248	A COMMENT	\N	2014-08-06 12:46:37	2014-08-06 12:46:37
1058	31	249	A COMMENT	\N	2014-10-02 19:17:40	2014-10-02 19:17:40
1059	48	249	A COMMENT	\N	2014-10-04 16:43:34	2014-10-04 16:43:34
1060	22	249	A COMMENT	\N	2014-10-05 17:12:38	2014-10-05 17:12:38
1061	28	249	A COMMENT	\N	2014-10-08 05:54:02	2014-10-08 05:54:02
1062	33	249	A COMMENT	\N	2014-10-12 08:58:11	2014-10-12 08:58:11
1063	4	249	A COMMENT	\N	2014-10-14 12:40:41	2014-10-14 12:40:41
1064	28	249	A COMMENT	\N	2014-10-23 10:32:18	2014-10-23 10:32:18
1065	46	249	A COMMENT	\N	2014-10-23 22:29:07	2014-10-23 22:29:07
1066	9	249	A COMMENT	\N	2014-10-31 07:47:30	2014-10-31 07:47:30
1067	31	249	A COMMENT	\N	2014-11-08 05:08:31	2014-11-08 05:08:31
1068	5	249	A COMMENT	\N	2014-11-08 06:28:43	2014-11-08 06:28:43
1069	5	249	A COMMENT	\N	2014-11-12 01:45:27	2014-11-12 01:45:27
1070	11	249	A COMMENT	\N	2014-11-15 01:33:17	2014-11-15 01:33:17
1071	4	249	A COMMENT	\N	2014-11-19 05:55:30	2014-11-19 05:55:30
1072	22	249	A COMMENT	\N	2014-11-22 04:14:19	2014-11-22 04:14:19
1073	4	251	A COMMENT	\N	2014-09-24 09:10:36	2014-09-24 09:10:36
1074	46	252	A COMMENT	\N	2014-10-02 06:17:45	2014-10-02 06:17:45
1075	46	252	A COMMENT	\N	2014-10-15 17:40:55	2014-10-15 17:40:55
1076	15	252	A COMMENT	\N	2014-10-31 00:21:56	2014-10-31 00:21:56
1077	44	252	A COMMENT	\N	2014-11-08 02:56:34	2014-11-08 02:56:34
1078	5	252	A COMMENT	\N	2014-11-26 14:24:36	2014-11-26 14:24:36
1079	46	253	A COMMENT	\N	2014-10-20 22:34:07	2014-10-20 22:34:07
1080	31	254	A COMMENT	\N	2014-09-28 06:23:46	2014-09-28 06:23:46
1081	40	254	A COMMENT	\N	2014-10-27 10:25:56	2014-10-27 10:25:56
1082	2	254	A COMMENT	\N	2014-11-02 09:24:46	2014-11-02 09:24:46
1083	33	254	A COMMENT	\N	2014-11-03 06:23:59	2014-11-03 06:23:59
1084	11	254	A COMMENT	\N	2014-11-06 17:34:44	2014-11-06 17:34:44
1085	38	255	A COMMENT	\N	2014-09-26 14:46:53	2014-09-26 14:46:53
1086	38	255	A COMMENT	\N	2014-10-04 18:29:05	2014-10-04 18:29:05
1087	28	255	A COMMENT	\N	2014-10-05 20:15:31	2014-10-05 20:15:31
1088	22	255	A COMMENT	\N	2014-10-06 01:13:21	2014-10-06 01:13:21
1089	48	255	A COMMENT	\N	2014-10-09 20:36:45	2014-10-09 20:36:45
1090	22	255	A COMMENT	\N	2014-10-13 22:17:58	2014-10-13 22:17:58
1091	46	255	A COMMENT	\N	2014-10-13 22:41:11	2014-10-13 22:41:11
1092	31	255	A COMMENT	\N	2014-10-17 00:31:24	2014-10-17 00:31:24
1093	12	255	A COMMENT	\N	2014-10-17 18:43:55	2014-10-17 18:43:55
1094	31	255	A COMMENT	\N	2014-10-19 01:44:51	2014-10-19 01:44:51
1095	40	255	A COMMENT	\N	2014-10-23 15:53:11	2014-10-23 15:53:11
1096	48	255	A COMMENT	\N	2014-10-30 12:52:22	2014-10-30 12:52:22
1097	5	255	A COMMENT	\N	2014-11-01 14:33:30	2014-11-01 14:33:30
1098	12	255	A COMMENT	\N	2014-11-09 05:49:46	2014-11-09 05:49:46
1099	4	255	A COMMENT	\N	2014-11-14 03:07:20	2014-11-14 03:07:20
1100	31	255	A COMMENT	\N	2014-11-17 03:12:44	2014-11-17 03:12:44
1101	4	255	A COMMENT	\N	2014-11-26 11:10:27	2014-11-26 11:10:27
1102	2	255	A COMMENT	\N	2014-11-27 18:05:14	2014-11-27 18:05:14
1103	3	255	A COMMENT	\N	2014-11-28 05:47:30	2014-11-28 05:47:30
1104	31	257	A COMMENT	\N	2014-09-16 08:30:08	2014-09-16 08:30:08
1105	31	257	A COMMENT	\N	2014-10-01 03:57:18	2014-10-01 03:57:18
1106	15	257	A COMMENT	\N	2014-10-01 08:02:34	2014-10-01 08:02:34
1107	15	257	A COMMENT	\N	2014-11-07 00:34:20	2014-11-07 00:34:20
1108	22	257	A COMMENT	\N	2014-11-07 04:03:45	2014-11-07 04:03:45
1109	12	257	A COMMENT	\N	2014-11-18 16:12:13	2014-11-18 16:12:13
1110	12	257	A COMMENT	\N	2014-11-20 16:44:21	2014-11-20 16:44:21
1111	40	258	A COMMENT	\N	2014-10-20 14:24:07	2014-10-20 14:24:07
1112	46	259	A COMMENT	\N	2014-09-04 03:45:39	2014-09-04 03:45:39
1113	44	259	A COMMENT	\N	2014-09-13 17:27:19	2014-09-13 17:27:19
1114	5	259	A COMMENT	\N	2014-09-14 03:36:41	2014-09-14 03:36:41
1115	11	259	A COMMENT	\N	2014-10-08 04:39:10	2014-10-08 04:39:10
1116	12	259	A COMMENT	\N	2014-11-04 10:39:20	2014-11-04 10:39:20
1117	31	259	A COMMENT	\N	2014-11-05 19:54:53	2014-11-05 19:54:53
1118	4	259	A COMMENT	\N	2014-11-22 23:43:34	2014-11-22 23:43:34
1119	31	260	A COMMENT	\N	2014-09-04 03:35:31	2014-09-04 03:35:31
1120	40	260	A COMMENT	\N	2014-09-04 13:56:10	2014-09-04 13:56:10
1121	46	260	A COMMENT	\N	2014-09-08 09:10:47	2014-09-08 09:10:47
1122	29	260	A COMMENT	\N	2014-11-17 15:46:24	2014-11-17 15:46:24
1123	5	263	A COMMENT	\N	2014-11-22 23:52:51	2014-11-22 23:52:51
1124	5	263	A COMMENT	\N	2014-11-24 02:06:41	2014-11-24 02:06:41
1125	11	263	A COMMENT	\N	2014-11-26 14:14:26	2014-11-26 14:14:26
1126	5	263	A COMMENT	\N	2014-11-26 19:27:28	2014-11-26 19:27:28
1127	46	263	A COMMENT	\N	2014-11-28 03:40:39	2014-11-28 03:40:39
1128	4	264	A COMMENT	\N	2014-11-23 00:57:12	2014-11-23 00:57:12
1129	3	264	A COMMENT	\N	2014-11-23 10:50:39	2014-11-23 10:50:39
1130	2	264	A COMMENT	\N	2014-11-25 02:08:26	2014-11-25 02:08:26
1131	22	264	A COMMENT	\N	2014-11-25 05:41:13	2014-11-25 05:41:13
1132	9	264	A COMMENT	\N	2014-11-25 17:26:00	2014-11-25 17:26:00
1133	3	264	A COMMENT	\N	2014-11-26 06:46:05	2014-11-26 06:46:05
1134	29	264	A COMMENT	\N	2014-11-26 14:14:40	2014-11-26 14:14:40
1135	4	264	A COMMENT	\N	2014-11-27 16:57:32	2014-11-27 16:57:32
1136	44	264	A COMMENT	\N	2014-11-27 18:55:45	2014-11-27 18:55:45
1137	9	264	A COMMENT	\N	2014-11-27 19:00:03	2014-11-27 19:00:03
1138	44	264	A COMMENT	\N	2014-11-27 19:24:20	2014-11-27 19:24:20
1139	48	265	A COMMENT	\N	2014-11-24 04:01:23	2014-11-24 04:01:23
1140	48	265	A COMMENT	\N	2014-11-24 04:28:12	2014-11-24 04:28:12
1141	2	265	A COMMENT	\N	2014-11-24 18:02:10	2014-11-24 18:02:10
1142	33	265	A COMMENT	\N	2014-11-25 09:29:53	2014-11-25 09:29:53
1143	4	265	A COMMENT	\N	2014-11-25 09:46:23	2014-11-25 09:46:23
1144	46	265	A COMMENT	\N	2014-11-26 02:41:15	2014-11-26 02:41:15
1145	29	265	A COMMENT	\N	2014-11-26 10:41:40	2014-11-26 10:41:40
1146	5	265	A COMMENT	\N	2014-11-26 14:02:19	2014-11-26 14:02:19
1147	2	265	A COMMENT	\N	2014-11-27 00:00:22	2014-11-27 00:00:22
1148	29	265	A COMMENT	\N	2014-11-27 08:00:14	2014-11-27 08:00:14
1149	38	265	A COMMENT	\N	2014-11-27 18:44:28	2014-11-27 18:44:28
1150	44	265	A COMMENT	\N	2014-11-28 00:26:30	2014-11-28 00:26:30
1151	48	266	A COMMENT	\N	2014-11-26 23:10:44	2014-11-26 23:10:44
1152	33	266	A COMMENT	\N	2014-11-27 05:57:23	2014-11-27 05:57:23
1153	4	266	A COMMENT	\N	2014-11-27 15:20:13	2014-11-27 15:20:13
1154	29	268	A COMMENT	\N	2014-11-26 07:12:37	2014-11-26 07:12:37
1155	11	268	A COMMENT	\N	2014-11-26 14:10:15	2014-11-26 14:10:15
1156	4	268	A COMMENT	\N	2014-11-26 18:59:05	2014-11-26 18:59:05
1157	29	268	A COMMENT	\N	2014-11-27 17:11:17	2014-11-27 17:11:17
1158	3	268	A COMMENT	\N	2014-11-27 23:21:39	2014-11-27 23:21:39
1159	22	268	A COMMENT	\N	2014-11-27 23:49:58	2014-11-27 23:49:58
1160	29	269	A COMMENT	\N	2014-11-28 05:53:08	2014-11-28 05:53:08
1161	48	270	A COMMENT	\N	2014-11-23 12:44:05	2014-11-23 12:44:05
1162	48	271	A COMMENT	\N	2014-11-25 13:35:56	2014-11-25 13:35:56
1163	49	272	A COMMENT	\N	2014-07-10 13:54:33	2014-07-10 13:54:33
1164	44	272	A COMMENT	\N	2014-08-08 06:54:33	2014-08-08 06:54:33
1165	9	272	A COMMENT	\N	2014-09-16 06:10:13	2014-09-16 06:10:13
1166	5	272	A COMMENT	\N	2014-10-04 05:16:36	2014-10-04 05:16:36
1167	9	272	A COMMENT	\N	2014-11-13 11:35:07	2014-11-13 11:35:07
1168	38	272	A COMMENT	\N	2014-11-24 18:07:35	2014-11-24 18:07:35
1169	49	273	A COMMENT	\N	2014-10-14 21:59:39	2014-10-14 21:59:39
1170	49	274	A COMMENT	\N	2014-09-28 20:03:11	2014-09-28 20:03:11
1171	9	275	A COMMENT	\N	2014-08-15 15:50:52	2014-08-15 15:50:52
1172	28	275	A COMMENT	\N	2014-09-24 13:21:40	2014-09-24 13:21:40
1173	5	275	A COMMENT	\N	2014-09-26 11:18:49	2014-09-26 11:18:49
1174	31	275	A COMMENT	\N	2014-09-27 09:58:12	2014-09-27 09:58:12
1175	38	275	A COMMENT	\N	2014-10-04 07:15:29	2014-10-04 07:15:29
1176	12	275	A COMMENT	\N	2014-10-26 17:25:32	2014-10-26 17:25:32
1177	4	276	A COMMENT	\N	2014-10-04 03:44:39	2014-10-04 03:44:39
1178	4	276	A COMMENT	\N	2014-11-15 13:07:22	2014-11-15 13:07:22
1179	38	276	A COMMENT	\N	2014-11-17 11:31:20	2014-11-17 11:31:20
1180	22	276	A COMMENT	\N	2014-11-19 17:50:24	2014-11-19 17:50:24
1181	49	277	A COMMENT	\N	2014-07-18 07:10:02	2014-07-18 07:10:02
1182	40	277	A COMMENT	\N	2014-07-28 02:51:04	2014-07-28 02:51:04
1183	4	277	A COMMENT	\N	2014-08-21 09:13:11	2014-08-21 09:13:11
1184	44	277	A COMMENT	\N	2014-09-01 17:35:51	2014-09-01 17:35:51
1185	38	277	A COMMENT	\N	2014-09-02 16:20:52	2014-09-02 16:20:52
1186	12	277	A COMMENT	\N	2014-10-15 16:56:29	2014-10-15 16:56:29
1187	31	278	A COMMENT	\N	2014-09-20 14:57:44	2014-09-20 14:57:44
1188	49	279	A COMMENT	\N	2014-08-05 23:03:20	2014-08-05 23:03:20
1189	2	279	A COMMENT	\N	2014-11-25 02:11:35	2014-11-25 02:11:35
1190	49	280	A COMMENT	\N	2014-08-25 12:15:09	2014-08-25 12:15:09
1191	40	280	A COMMENT	\N	2014-10-01 10:06:02	2014-10-01 10:06:02
1192	2	280	A COMMENT	\N	2014-10-08 23:24:14	2014-10-08 23:24:14
1193	3	280	A COMMENT	\N	2014-10-29 00:16:16	2014-10-29 00:16:16
1194	15	280	A COMMENT	\N	2014-11-10 17:32:52	2014-11-10 17:32:52
1195	49	281	A COMMENT	\N	2014-08-02 02:47:28	2014-08-02 02:47:28
1196	31	281	A COMMENT	\N	2014-08-02 18:59:10	2014-08-02 18:59:10
1197	22	281	A COMMENT	\N	2014-08-07 10:52:49	2014-08-07 10:52:49
1198	29	281	A COMMENT	\N	2014-08-25 23:05:24	2014-08-25 23:05:24
1199	5	281	A COMMENT	\N	2014-09-06 15:09:04	2014-09-06 15:09:04
1200	4	281	A COMMENT	\N	2014-10-13 07:09:33	2014-10-13 07:09:33
1201	12	281	A COMMENT	\N	2014-10-26 09:11:43	2014-10-26 09:11:43
1202	9	281	A COMMENT	\N	2014-10-28 14:38:14	2014-10-28 14:38:14
1203	4	281	A COMMENT	\N	2014-11-15 13:47:47	2014-11-15 13:47:47
1204	29	281	A COMMENT	\N	2014-11-20 01:07:35	2014-11-20 01:07:35
1205	38	281	A COMMENT	\N	2014-11-21 08:35:56	2014-11-21 08:35:56
1206	29	282	A COMMENT	\N	2014-08-29 18:40:49	2014-08-29 18:40:49
1207	22	282	A COMMENT	\N	2014-09-09 04:38:52	2014-09-09 04:38:52
1208	5	282	A COMMENT	\N	2014-09-10 13:42:43	2014-09-10 13:42:43
1209	40	282	A COMMENT	\N	2014-09-23 05:44:20	2014-09-23 05:44:20
1210	22	282	A COMMENT	\N	2014-09-26 02:07:11	2014-09-26 02:07:11
1211	33	282	A COMMENT	\N	2014-09-29 11:16:48	2014-09-29 11:16:48
1212	46	282	A COMMENT	\N	2014-09-30 02:31:24	2014-09-30 02:31:24
1213	40	282	A COMMENT	\N	2014-09-30 04:29:38	2014-09-30 04:29:38
1214	46	282	A COMMENT	\N	2014-10-05 19:10:37	2014-10-05 19:10:37
1215	11	282	A COMMENT	\N	2014-10-17 00:05:21	2014-10-17 00:05:21
1216	4	282	A COMMENT	\N	2014-10-24 19:17:21	2014-10-24 19:17:21
1217	44	282	A COMMENT	\N	2014-10-28 17:48:56	2014-10-28 17:48:56
1218	28	282	A COMMENT	\N	2014-10-28 21:46:50	2014-10-28 21:46:50
1219	28	282	A COMMENT	\N	2014-10-31 02:17:21	2014-10-31 02:17:21
1220	46	282	A COMMENT	\N	2014-11-02 20:10:41	2014-11-02 20:10:41
1221	49	284	A COMMENT	\N	2014-07-15 19:41:26	2014-07-15 19:41:26
1222	9	285	A COMMENT	\N	2014-08-24 23:39:16	2014-08-24 23:39:16
1223	29	285	A COMMENT	\N	2014-09-25 23:36:42	2014-09-25 23:36:42
1224	9	285	A COMMENT	\N	2014-10-03 18:25:07	2014-10-03 18:25:07
1225	38	285	A COMMENT	\N	2014-10-28 23:28:32	2014-10-28 23:28:32
1226	12	285	A COMMENT	\N	2014-11-21 09:19:13	2014-11-21 09:19:13
1227	2	286	A COMMENT	\N	2014-08-31 06:43:03	2014-08-31 06:43:03
1228	4	286	A COMMENT	\N	2014-09-07 03:05:50	2014-09-07 03:05:50
1229	15	286	A COMMENT	\N	2014-10-01 09:54:20	2014-10-01 09:54:20
1230	22	286	A COMMENT	\N	2014-10-23 12:52:13	2014-10-23 12:52:13
1231	33	286	A COMMENT	\N	2014-10-25 19:09:59	2014-10-25 19:09:59
1232	3	287	A COMMENT	\N	2014-10-02 16:58:21	2014-10-02 16:58:21
1233	2	287	A COMMENT	\N	2014-10-12 10:34:53	2014-10-12 10:34:53
1234	5	287	A COMMENT	\N	2014-10-25 17:57:07	2014-10-25 17:57:07
1235	46	287	A COMMENT	\N	2014-11-08 08:26:50	2014-11-08 08:26:50
1236	22	287	A COMMENT	\N	2014-11-21 06:57:30	2014-11-21 06:57:30
1237	38	288	A COMMENT	\N	2014-10-15 18:25:52	2014-10-15 18:25:52
1238	33	288	A COMMENT	\N	2014-10-21 19:31:02	2014-10-21 19:31:02
1239	29	288	A COMMENT	\N	2014-10-23 21:40:04	2014-10-23 21:40:04
1240	12	288	A COMMENT	\N	2014-10-26 12:17:08	2014-10-26 12:17:08
1241	9	288	A COMMENT	\N	2014-10-27 22:47:09	2014-10-27 22:47:09
1242	44	288	A COMMENT	\N	2014-10-29 11:16:23	2014-10-29 11:16:23
1243	40	288	A COMMENT	\N	2014-10-31 02:16:04	2014-10-31 02:16:04
1244	5	288	A COMMENT	\N	2014-11-05 14:47:43	2014-11-05 14:47:43
1245	4	288	A COMMENT	\N	2014-11-08 03:14:48	2014-11-08 03:14:48
1246	15	288	A COMMENT	\N	2014-11-13 21:00:45	2014-11-13 21:00:45
1247	12	288	A COMMENT	\N	2014-11-16 14:35:07	2014-11-16 14:35:07
1248	31	288	A COMMENT	\N	2014-11-17 17:23:01	2014-11-17 17:23:01
1249	3	288	A COMMENT	\N	2014-11-19 10:38:27	2014-11-19 10:38:27
1250	48	288	A COMMENT	\N	2014-11-20 05:35:35	2014-11-20 05:35:35
1251	2	288	A COMMENT	\N	2014-11-20 11:42:04	2014-11-20 11:42:04
1252	40	288	A COMMENT	\N	2014-11-20 23:07:44	2014-11-20 23:07:44
1253	28	288	A COMMENT	\N	2014-11-22 18:45:52	2014-11-22 18:45:52
1254	22	288	A COMMENT	\N	2014-11-24 08:30:46	2014-11-24 08:30:46
1255	2	288	A COMMENT	\N	2014-11-24 09:06:02	2014-11-24 09:06:02
1256	46	289	A COMMENT	\N	2014-08-03 02:14:22	2014-08-03 02:14:22
1257	38	289	A COMMENT	\N	2014-08-15 13:34:21	2014-08-15 13:34:21
1258	11	289	A COMMENT	\N	2014-08-16 09:55:41	2014-08-16 09:55:41
1259	12	289	A COMMENT	\N	2014-08-16 21:09:34	2014-08-16 21:09:34
1260	46	289	A COMMENT	\N	2014-08-21 06:02:30	2014-08-21 06:02:30
1261	22	289	A COMMENT	\N	2014-08-21 18:02:33	2014-08-21 18:02:33
1262	31	289	A COMMENT	\N	2014-08-22 13:12:15	2014-08-22 13:12:15
1263	9	289	A COMMENT	\N	2014-08-23 15:43:55	2014-08-23 15:43:55
1264	44	289	A COMMENT	\N	2014-09-03 13:31:22	2014-09-03 13:31:22
1265	5	289	A COMMENT	\N	2014-09-05 03:09:49	2014-09-05 03:09:49
1266	44	289	A COMMENT	\N	2014-09-06 03:17:12	2014-09-06 03:17:12
1267	48	289	A COMMENT	\N	2014-09-06 07:37:42	2014-09-06 07:37:42
1268	46	289	A COMMENT	\N	2014-09-25 21:30:34	2014-09-25 21:30:34
1269	12	289	A COMMENT	\N	2014-10-05 20:17:26	2014-10-05 20:17:26
1270	2	289	A COMMENT	\N	2014-10-17 14:05:41	2014-10-17 14:05:41
1271	4	289	A COMMENT	\N	2014-10-28 06:58:36	2014-10-28 06:58:36
1272	2	289	A COMMENT	\N	2014-11-04 21:12:11	2014-11-04 21:12:11
1273	28	289	A COMMENT	\N	2014-11-15 06:42:37	2014-11-15 06:42:37
1274	15	289	A COMMENT	\N	2014-11-19 10:23:42	2014-11-19 10:23:42
1275	15	289	A COMMENT	\N	2014-11-19 21:55:12	2014-11-19 21:55:12
1276	44	290	A COMMENT	\N	2014-10-09 12:48:16	2014-10-09 12:48:16
1277	9	291	A COMMENT	\N	2014-08-15 16:24:31	2014-08-15 16:24:31
1278	9	291	A COMMENT	\N	2014-08-24 06:16:19	2014-08-24 06:16:19
1279	40	291	A COMMENT	\N	2014-09-24 19:55:10	2014-09-24 19:55:10
1280	40	291	A COMMENT	\N	2014-10-14 12:39:56	2014-10-14 12:39:56
1281	40	291	A COMMENT	\N	2014-11-19 13:19:42	2014-11-19 13:19:42
1282	12	291	A COMMENT	\N	2014-11-27 10:50:43	2014-11-27 10:50:43
1283	49	292	A COMMENT	\N	2014-08-01 01:28:12	2014-08-01 01:28:12
1284	49	293	A COMMENT	\N	2014-09-14 15:53:22	2014-09-14 15:53:22
1285	2	293	A COMMENT	\N	2014-09-25 10:45:06	2014-09-25 10:45:06
1286	33	293	A COMMENT	\N	2014-10-06 07:14:46	2014-10-06 07:14:46
1287	5	293	A COMMENT	\N	2014-10-25 22:53:27	2014-10-25 22:53:27
1288	22	293	A COMMENT	\N	2014-11-02 01:46:55	2014-11-02 01:46:55
1289	40	293	A COMMENT	\N	2014-11-22 00:13:36	2014-11-22 00:13:36
1290	22	293	A COMMENT	\N	2014-11-26 07:40:52	2014-11-26 07:40:52
1291	3	294	A COMMENT	\N	2014-10-25 22:46:10	2014-10-25 22:46:10
1292	11	294	A COMMENT	\N	2014-10-28 18:20:54	2014-10-28 18:20:54
1293	22	294	A COMMENT	\N	2014-10-30 15:42:33	2014-10-30 15:42:33
1294	40	294	A COMMENT	\N	2014-10-31 09:11:19	2014-10-31 09:11:19
1295	38	294	A COMMENT	\N	2014-10-31 23:44:31	2014-10-31 23:44:31
1296	5	294	A COMMENT	\N	2014-11-04 13:06:36	2014-11-04 13:06:36
1297	28	294	A COMMENT	\N	2014-11-08 09:52:17	2014-11-08 09:52:17
1298	29	294	A COMMENT	\N	2014-11-25 10:03:34	2014-11-25 10:03:34
1299	28	295	A COMMENT	\N	2014-11-20 03:45:51	2014-11-20 03:45:51
1300	29	295	A COMMENT	\N	2014-11-20 22:07:43	2014-11-20 22:07:43
1301	33	295	A COMMENT	\N	2014-11-27 02:10:26	2014-11-27 02:10:26
1302	46	296	A COMMENT	\N	2014-08-01 15:22:07	2014-08-01 15:22:07
1303	28	296	A COMMENT	\N	2014-08-03 06:34:45	2014-08-03 06:34:45
1304	29	296	A COMMENT	\N	2014-08-12 00:51:49	2014-08-12 00:51:49
1305	11	296	A COMMENT	\N	2014-08-24 03:51:41	2014-08-24 03:51:41
1306	33	296	A COMMENT	\N	2014-10-01 04:43:48	2014-10-01 04:43:48
1307	40	296	A COMMENT	\N	2014-10-31 14:27:32	2014-10-31 14:27:32
1308	48	296	A COMMENT	\N	2014-11-23 06:08:36	2014-11-23 06:08:36
1309	28	297	A COMMENT	\N	2014-07-14 03:43:33	2014-07-14 03:43:33
1310	44	297	A COMMENT	\N	2014-08-11 19:05:27	2014-08-11 19:05:27
1311	15	297	A COMMENT	\N	2014-09-02 20:56:19	2014-09-02 20:56:19
1312	31	297	A COMMENT	\N	2014-10-11 11:20:57	2014-10-11 11:20:57
1313	12	297	A COMMENT	\N	2014-10-14 00:14:22	2014-10-14 00:14:22
1314	15	297	A COMMENT	\N	2014-11-20 03:03:54	2014-11-20 03:03:54
1315	22	298	A COMMENT	\N	2014-08-09 18:28:17	2014-08-09 18:28:17
1316	2	298	A COMMENT	\N	2014-08-14 15:22:36	2014-08-14 15:22:36
1317	31	298	A COMMENT	\N	2014-09-15 23:01:36	2014-09-15 23:01:36
1318	46	298	A COMMENT	\N	2014-09-19 21:33:52	2014-09-19 21:33:52
1319	49	299	A COMMENT	\N	2014-08-18 13:00:37	2014-08-18 13:00:37
1320	4	299	A COMMENT	\N	2014-09-17 20:27:49	2014-09-17 20:27:49
1321	9	299	A COMMENT	\N	2014-10-12 18:12:27	2014-10-12 18:12:27
1322	12	299	A COMMENT	\N	2014-10-21 02:10:10	2014-10-21 02:10:10
1323	22	299	A COMMENT	\N	2014-11-06 19:43:27	2014-11-06 19:43:27
1324	31	299	A COMMENT	\N	2014-11-11 02:31:50	2014-11-11 02:31:50
1325	49	300	A COMMENT	\N	2014-10-26 21:08:07	2014-10-26 21:08:07
1326	2	300	A COMMENT	\N	2014-10-28 06:59:23	2014-10-28 06:59:23
1327	15	300	A COMMENT	\N	2014-11-02 04:36:48	2014-11-02 04:36:48
1328	11	300	A COMMENT	\N	2014-11-06 13:55:19	2014-11-06 13:55:19
1329	33	300	A COMMENT	\N	2014-11-08 01:09:53	2014-11-08 01:09:53
1330	40	300	A COMMENT	\N	2014-11-21 09:53:32	2014-11-21 09:53:32
1331	46	301	A COMMENT	\N	2014-07-29 03:44:35	2014-07-29 03:44:35
1332	28	301	A COMMENT	\N	2014-09-24 00:52:52	2014-09-24 00:52:52
1333	38	301	A COMMENT	\N	2014-10-26 16:21:44	2014-10-26 16:21:44
1334	44	301	A COMMENT	\N	2014-11-02 17:03:39	2014-11-02 17:03:39
1335	31	302	A COMMENT	\N	2014-08-13 08:22:24	2014-08-13 08:22:24
1336	3	302	A COMMENT	\N	2014-08-21 07:48:56	2014-08-21 07:48:56
1337	33	302	A COMMENT	\N	2014-08-30 05:13:00	2014-08-30 05:13:00
1338	28	302	A COMMENT	\N	2014-09-12 11:13:41	2014-09-12 11:13:41
1339	22	302	A COMMENT	\N	2014-10-21 18:58:30	2014-10-21 18:58:30
1340	3	302	A COMMENT	\N	2014-10-30 03:19:24	2014-10-30 03:19:24
1341	33	302	A COMMENT	\N	2014-11-03 19:36:54	2014-11-03 19:36:54
1342	46	302	A COMMENT	\N	2014-11-06 08:47:10	2014-11-06 08:47:10
1343	44	302	A COMMENT	\N	2014-11-08 22:05:12	2014-11-08 22:05:12
1344	49	304	A COMMENT	\N	2014-10-14 19:53:18	2014-10-14 19:53:18
1345	2	304	A COMMENT	\N	2014-10-28 09:08:59	2014-10-28 09:08:59
1346	38	304	A COMMENT	\N	2014-10-31 21:54:30	2014-10-31 21:54:30
1347	11	304	A COMMENT	\N	2014-11-09 13:02:48	2014-11-09 13:02:48
1348	5	304	A COMMENT	\N	2014-11-21 20:18:11	2014-11-21 20:18:11
1349	31	304	A COMMENT	\N	2014-11-24 02:23:30	2014-11-24 02:23:30
1350	26	305	A COMMENT	\N	2014-09-27 21:49:33	2014-09-27 21:49:33
1351	33	307	A COMMENT	\N	2014-10-06 23:37:28	2014-10-06 23:37:28
1352	22	307	A COMMENT	\N	2014-10-26 04:52:38	2014-10-26 04:52:38
1353	44	307	A COMMENT	\N	2014-10-26 17:45:37	2014-10-26 17:45:37
1354	12	307	A COMMENT	\N	2014-11-10 00:59:57	2014-11-10 00:59:57
1355	26	308	A COMMENT	\N	2014-10-14 00:06:22	2014-10-14 00:06:22
1356	48	308	A COMMENT	\N	2014-10-21 21:26:39	2014-10-21 21:26:39
1357	9	308	A COMMENT	\N	2014-10-25 00:34:38	2014-10-25 00:34:38
1358	44	308	A COMMENT	\N	2014-11-16 05:43:44	2014-11-16 05:43:44
1359	33	308	A COMMENT	\N	2014-11-27 17:19:22	2014-11-27 17:19:22
1360	38	309	A COMMENT	\N	2014-09-27 16:25:04	2014-09-27 16:25:04
1361	2	309	A COMMENT	\N	2014-09-30 06:22:13	2014-09-30 06:22:13
1362	33	309	A COMMENT	\N	2014-10-02 16:02:16	2014-10-02 16:02:16
1363	4	309	A COMMENT	\N	2014-10-09 04:11:09	2014-10-09 04:11:09
1364	3	309	A COMMENT	\N	2014-10-11 23:12:20	2014-10-11 23:12:20
1365	22	309	A COMMENT	\N	2014-10-13 02:43:12	2014-10-13 02:43:12
1366	15	309	A COMMENT	\N	2014-10-16 18:58:15	2014-10-16 18:58:15
1367	29	309	A COMMENT	\N	2014-10-17 03:45:36	2014-10-17 03:45:36
1368	44	309	A COMMENT	\N	2014-10-22 01:23:30	2014-10-22 01:23:30
1369	29	309	A COMMENT	\N	2014-10-24 21:40:34	2014-10-24 21:40:34
1370	5	309	A COMMENT	\N	2014-10-28 23:54:37	2014-10-28 23:54:37
1371	48	309	A COMMENT	\N	2014-10-30 04:19:58	2014-10-30 04:19:58
1372	15	309	A COMMENT	\N	2014-10-31 05:19:58	2014-10-31 05:19:58
1373	11	309	A COMMENT	\N	2014-11-21 02:55:53	2014-11-21 02:55:53
1374	28	309	A COMMENT	\N	2014-11-23 09:54:25	2014-11-23 09:54:25
1375	4	309	A COMMENT	\N	2014-11-26 10:34:49	2014-11-26 10:34:49
1376	46	309	A COMMENT	\N	2014-11-26 22:31:19	2014-11-26 22:31:19
1377	31	310	A COMMENT	\N	2014-11-17 09:28:21	2014-11-17 09:28:21
1378	31	311	A COMMENT	\N	2014-10-07 01:40:15	2014-10-07 01:40:15
1379	28	311	A COMMENT	\N	2014-10-13 12:28:53	2014-10-13 12:28:53
1380	9	311	A COMMENT	\N	2014-10-28 00:30:04	2014-10-28 00:30:04
1381	31	311	A COMMENT	\N	2014-10-30 18:31:32	2014-10-30 18:31:32
1382	40	311	A COMMENT	\N	2014-11-12 10:47:25	2014-11-12 10:47:25
1383	12	311	A COMMENT	\N	2014-11-14 16:07:34	2014-11-14 16:07:34
1384	11	311	A COMMENT	\N	2014-11-23 22:23:12	2014-11-23 22:23:12
1385	9	314	A COMMENT	\N	2014-10-26 02:11:32	2014-10-26 02:11:32
1386	2	314	A COMMENT	\N	2014-10-29 11:59:07	2014-10-29 11:59:07
1387	28	314	A COMMENT	\N	2014-11-14 11:26:52	2014-11-14 11:26:52
1388	22	314	A COMMENT	\N	2014-11-27 14:45:22	2014-11-27 14:45:22
1389	38	315	A COMMENT	\N	2014-10-15 07:42:38	2014-10-15 07:42:38
1390	11	315	A COMMENT	\N	2014-10-22 18:46:31	2014-10-22 18:46:31
1391	9	315	A COMMENT	\N	2014-11-09 14:36:10	2014-11-09 14:36:10
1392	40	315	A COMMENT	\N	2014-11-22 13:45:18	2014-11-22 13:45:18
1393	29	315	A COMMENT	\N	2014-11-27 17:37:36	2014-11-27 17:37:36
1394	3	315	A COMMENT	\N	2014-11-28 03:08:23	2014-11-28 03:08:23
1395	26	316	A COMMENT	\N	2014-10-17 03:48:02	2014-10-17 03:48:02
1396	9	316	A COMMENT	\N	2014-10-19 07:32:52	2014-10-19 07:32:52
1397	38	316	A COMMENT	\N	2014-10-22 18:32:42	2014-10-22 18:32:42
1398	4	316	A COMMENT	\N	2014-10-24 16:51:56	2014-10-24 16:51:56
1399	11	316	A COMMENT	\N	2014-11-12 02:33:18	2014-11-12 02:33:18
1400	4	316	A COMMENT	\N	2014-11-12 06:38:28	2014-11-12 06:38:28
1401	46	316	A COMMENT	\N	2014-11-17 08:31:04	2014-11-17 08:31:04
1402	4	316	A COMMENT	\N	2014-11-24 11:09:57	2014-11-24 11:09:57
1403	46	316	A COMMENT	\N	2014-11-25 00:03:23	2014-11-25 00:03:23
1404	2	317	A COMMENT	\N	2014-11-01 12:56:39	2014-11-01 12:56:39
1405	15	317	A COMMENT	\N	2014-11-02 01:12:09	2014-11-02 01:12:09
1406	46	317	A COMMENT	\N	2014-11-08 15:40:30	2014-11-08 15:40:30
1407	3	317	A COMMENT	\N	2014-11-12 14:20:20	2014-11-12 14:20:20
1408	38	317	A COMMENT	\N	2014-11-14 20:43:28	2014-11-14 20:43:28
1409	2	318	A COMMENT	\N	2014-11-03 19:38:17	2014-11-03 19:38:17
1410	26	319	A COMMENT	\N	2014-11-05 01:47:44	2014-11-05 01:47:44
1411	5	319	A COMMENT	\N	2014-11-10 01:11:45	2014-11-10 01:11:45
1412	3	319	A COMMENT	\N	2014-11-10 23:40:35	2014-11-10 23:40:35
1413	44	319	A COMMENT	\N	2014-11-11 21:04:47	2014-11-11 21:04:47
1414	4	319	A COMMENT	\N	2014-11-16 10:01:51	2014-11-16 10:01:51
1415	12	319	A COMMENT	\N	2014-11-16 16:18:19	2014-11-16 16:18:19
1416	31	319	A COMMENT	\N	2014-11-19 06:40:23	2014-11-19 06:40:23
1417	22	319	A COMMENT	\N	2014-11-19 16:22:47	2014-11-19 16:22:47
1418	4	319	A COMMENT	\N	2014-11-23 01:24:32	2014-11-23 01:24:32
1419	33	319	A COMMENT	\N	2014-11-25 18:40:57	2014-11-25 18:40:57
1420	40	319	A COMMENT	\N	2014-11-27 07:44:41	2014-11-27 07:44:41
1421	40	319	A COMMENT	\N	2014-11-27 17:04:00	2014-11-27 17:04:00
1422	9	320	A COMMENT	\N	2014-11-21 05:12:11	2014-11-21 05:12:11
1423	33	320	A COMMENT	\N	2014-11-21 13:07:24	2014-11-21 13:07:24
1424	29	320	A COMMENT	\N	2014-11-23 06:00:24	2014-11-23 06:00:24
1425	29	320	A COMMENT	\N	2014-11-24 06:14:29	2014-11-24 06:14:29
1426	46	320	A COMMENT	\N	2014-11-24 08:55:50	2014-11-24 08:55:50
1427	11	321	A COMMENT	\N	2014-11-23 19:22:56	2014-11-23 19:22:56
1428	28	321	A COMMENT	\N	2014-11-28 01:32:23	2014-11-28 01:32:23
1429	26	322	A COMMENT	\N	2014-10-17 22:26:50	2014-10-17 22:26:50
1430	40	322	A COMMENT	\N	2014-10-23 13:56:41	2014-10-23 13:56:41
1431	38	322	A COMMENT	\N	2014-10-27 15:38:11	2014-10-27 15:38:11
1432	28	322	A COMMENT	\N	2014-11-02 18:54:22	2014-11-02 18:54:22
1433	9	322	A COMMENT	\N	2014-11-14 13:50:19	2014-11-14 13:50:19
1434	11	322	A COMMENT	\N	2014-11-16 08:02:20	2014-11-16 08:02:20
1435	26	323	A COMMENT	\N	2014-11-03 12:50:14	2014-11-03 12:50:14
1436	46	323	A COMMENT	\N	2014-11-03 18:09:49	2014-11-03 18:09:49
1437	48	323	A COMMENT	\N	2014-11-05 17:43:49	2014-11-05 17:43:49
1438	22	323	A COMMENT	\N	2014-11-06 05:15:13	2014-11-06 05:15:13
1439	38	323	A COMMENT	\N	2014-11-06 22:35:10	2014-11-06 22:35:10
1440	12	323	A COMMENT	\N	2014-11-11 17:56:50	2014-11-11 17:56:50
1441	28	323	A COMMENT	\N	2014-11-12 17:38:08	2014-11-12 17:38:08
1442	44	323	A COMMENT	\N	2014-11-12 21:33:49	2014-11-12 21:33:49
1443	15	323	A COMMENT	\N	2014-11-13 06:55:07	2014-11-13 06:55:07
1444	40	323	A COMMENT	\N	2014-11-15 02:34:53	2014-11-15 02:34:53
1445	40	323	A COMMENT	\N	2014-11-16 07:17:57	2014-11-16 07:17:57
1446	44	323	A COMMENT	\N	2014-11-18 06:49:56	2014-11-18 06:49:56
1447	12	323	A COMMENT	\N	2014-11-23 08:47:58	2014-11-23 08:47:58
1448	40	323	A COMMENT	\N	2014-11-25 10:12:22	2014-11-25 10:12:22
1449	48	323	A COMMENT	\N	2014-11-25 12:28:43	2014-11-25 12:28:43
1450	28	323	A COMMENT	\N	2014-11-26 05:49:04	2014-11-26 05:49:04
1451	29	323	A COMMENT	\N	2014-11-26 10:39:34	2014-11-26 10:39:34
1452	9	323	A COMMENT	\N	2014-11-27 15:49:20	2014-11-27 15:49:20
1453	2	323	A COMMENT	\N	2014-11-27 20:57:00	2014-11-27 20:57:00
1454	26	324	A COMMENT	\N	2014-10-10 11:02:45	2014-10-10 11:02:45
1455	33	324	A COMMENT	\N	2014-10-12 03:56:15	2014-10-12 03:56:15
1456	46	324	A COMMENT	\N	2014-10-24 11:01:19	2014-10-24 11:01:19
1457	7	326	A COMMENT	\N	2014-09-29 06:56:09	2014-09-29 06:56:09
1458	15	327	A COMMENT	\N	2014-10-24 06:20:25	2014-10-24 06:20:25
1459	9	327	A COMMENT	\N	2014-11-02 04:33:05	2014-11-02 04:33:05
1460	29	327	A COMMENT	\N	2014-11-07 12:47:42	2014-11-07 12:47:42
1461	3	327	A COMMENT	\N	2014-11-10 12:49:19	2014-11-10 12:49:19
1462	44	327	A COMMENT	\N	2014-11-20 22:39:33	2014-11-20 22:39:33
1463	5	327	A COMMENT	\N	2014-11-24 10:20:23	2014-11-24 10:20:23
1464	38	327	A COMMENT	\N	2014-11-27 04:09:54	2014-11-27 04:09:54
1465	2	328	A COMMENT	\N	2014-11-22 22:04:35	2014-11-22 22:04:35
1466	7	329	A COMMENT	\N	2014-11-26 01:04:10	2014-11-26 01:04:10
1467	7	331	A COMMENT	\N	2014-10-06 17:31:14	2014-10-06 17:31:14
1468	48	331	A COMMENT	\N	2014-10-09 01:23:06	2014-10-09 01:23:06
1469	46	331	A COMMENT	\N	2014-10-10 01:14:34	2014-10-10 01:14:34
1470	9	331	A COMMENT	\N	2014-10-13 20:38:12	2014-10-13 20:38:12
1471	15	331	A COMMENT	\N	2014-10-16 10:30:14	2014-10-16 10:30:14
1472	40	331	A COMMENT	\N	2014-10-20 12:13:26	2014-10-20 12:13:26
1473	15	331	A COMMENT	\N	2014-10-22 01:58:28	2014-10-22 01:58:28
1474	29	331	A COMMENT	\N	2014-10-25 09:32:09	2014-10-25 09:32:09
1475	28	331	A COMMENT	\N	2014-10-27 00:59:16	2014-10-27 00:59:16
1476	22	331	A COMMENT	\N	2014-10-31 09:25:17	2014-10-31 09:25:17
1477	4	331	A COMMENT	\N	2014-10-31 10:48:56	2014-10-31 10:48:56
1478	31	331	A COMMENT	\N	2014-11-02 15:33:53	2014-11-02 15:33:53
1479	48	331	A COMMENT	\N	2014-11-04 00:59:37	2014-11-04 00:59:37
1480	31	331	A COMMENT	\N	2014-11-04 03:18:10	2014-11-04 03:18:10
1481	2	331	A COMMENT	\N	2014-11-06 14:39:53	2014-11-06 14:39:53
1482	11	331	A COMMENT	\N	2014-11-13 11:19:07	2014-11-13 11:19:07
1483	4	331	A COMMENT	\N	2014-11-17 19:49:18	2014-11-17 19:49:18
1484	4	331	A COMMENT	\N	2014-11-18 08:54:28	2014-11-18 08:54:28
1485	12	331	A COMMENT	\N	2014-11-21 23:03:20	2014-11-21 23:03:20
1486	46	331	A COMMENT	\N	2014-11-27 10:43:04	2014-11-27 10:43:04
1487	12	333	A COMMENT	\N	2014-11-09 06:46:47	2014-11-09 06:46:47
1488	3	333	A COMMENT	\N	2014-11-14 21:09:10	2014-11-14 21:09:10
1489	7	334	A COMMENT	\N	2014-11-13 07:00:24	2014-11-13 07:00:24
1490	22	334	A COMMENT	\N	2014-11-18 04:21:55	2014-11-18 04:21:55
1491	3	334	A COMMENT	\N	2014-11-18 13:18:09	2014-11-18 13:18:09
1492	33	334	A COMMENT	\N	2014-11-22 17:01:02	2014-11-22 17:01:02
1493	2	336	A COMMENT	\N	2014-11-09 02:15:35	2014-11-09 02:15:35
1494	2	336	A COMMENT	\N	2014-11-09 15:35:24	2014-11-09 15:35:24
1495	22	336	A COMMENT	\N	2014-11-17 17:09:01	2014-11-17 17:09:01
1496	31	337	A COMMENT	\N	2014-11-08 18:47:38	2014-11-08 18:47:38
1497	40	338	A COMMENT	\N	2014-09-21 17:38:02	2014-09-21 17:38:02
1498	11	338	A COMMENT	\N	2014-09-27 07:13:02	2014-09-27 07:13:02
1499	44	338	A COMMENT	\N	2014-10-02 21:12:52	2014-10-02 21:12:52
1500	11	338	A COMMENT	\N	2014-10-12 01:25:48	2014-10-12 01:25:48
1501	12	338	A COMMENT	\N	2014-10-14 19:18:28	2014-10-14 19:18:28
1502	33	338	A COMMENT	\N	2014-10-18 17:59:18	2014-10-18 17:59:18
1503	15	338	A COMMENT	\N	2014-10-19 10:42:11	2014-10-19 10:42:11
1504	3	338	A COMMENT	\N	2014-11-01 22:23:16	2014-11-01 22:23:16
1505	40	338	A COMMENT	\N	2014-11-12 11:51:09	2014-11-12 11:51:09
1506	48	338	A COMMENT	\N	2014-11-13 15:24:42	2014-11-13 15:24:42
1507	2	338	A COMMENT	\N	2014-11-15 05:02:11	2014-11-15 05:02:11
1508	12	338	A COMMENT	\N	2014-11-16 21:25:24	2014-11-16 21:25:24
1509	22	338	A COMMENT	\N	2014-11-20 21:50:44	2014-11-20 21:50:44
1510	33	338	A COMMENT	\N	2014-11-22 23:54:18	2014-11-22 23:54:18
1511	9	338	A COMMENT	\N	2014-11-24 09:49:22	2014-11-24 09:49:22
1512	33	339	A COMMENT	\N	2014-09-01 10:18:40	2014-09-01 10:18:40
1513	12	339	A COMMENT	\N	2014-09-03 04:26:13	2014-09-03 04:26:13
1514	48	339	A COMMENT	\N	2014-09-04 09:07:46	2014-09-04 09:07:46
1515	5	339	A COMMENT	\N	2014-09-05 02:41:12	2014-09-05 02:41:12
1516	3	339	A COMMENT	\N	2014-09-07 08:46:43	2014-09-07 08:46:43
1517	29	339	A COMMENT	\N	2014-09-11 02:50:09	2014-09-11 02:50:09
1518	11	339	A COMMENT	\N	2014-09-16 22:42:55	2014-09-16 22:42:55
1519	33	339	A COMMENT	\N	2014-09-17 22:24:26	2014-09-17 22:24:26
1520	12	339	A COMMENT	\N	2014-09-29 21:39:34	2014-09-29 21:39:34
1521	44	339	A COMMENT	\N	2014-10-07 07:13:14	2014-10-07 07:13:14
1522	46	339	A COMMENT	\N	2014-10-16 08:05:53	2014-10-16 08:05:53
1523	31	339	A COMMENT	\N	2014-10-18 02:39:34	2014-10-18 02:39:34
1524	44	339	A COMMENT	\N	2014-10-18 04:06:06	2014-10-18 04:06:06
1525	4	339	A COMMENT	\N	2014-10-20 19:11:48	2014-10-20 19:11:48
1526	38	339	A COMMENT	\N	2014-10-21 10:14:07	2014-10-21 10:14:07
1527	38	339	A COMMENT	\N	2014-11-03 08:36:47	2014-11-03 08:36:47
1528	2	339	A COMMENT	\N	2014-11-06 15:41:52	2014-11-06 15:41:52
1529	22	339	A COMMENT	\N	2014-11-13 09:49:06	2014-11-13 09:49:06
1530	46	339	A COMMENT	\N	2014-11-23 13:44:22	2014-11-23 13:44:22
1531	4	341	A COMMENT	\N	2014-10-31 00:26:25	2014-10-31 00:26:25
1532	29	341	A COMMENT	\N	2014-11-05 07:05:36	2014-11-05 07:05:36
1533	40	341	A COMMENT	\N	2014-11-23 05:54:59	2014-11-23 05:54:59
1534	9	341	A COMMENT	\N	2014-11-27 18:21:37	2014-11-27 18:21:37
1535	3	342	A COMMENT	\N	2014-08-10 18:09:09	2014-08-10 18:09:09
1536	23	343	A COMMENT	\N	2014-08-30 16:19:29	2014-08-30 16:19:29
1537	4	344	A COMMENT	\N	2014-08-27 12:23:23	2014-08-27 12:23:23
1538	5	344	A COMMENT	\N	2014-08-31 10:54:02	2014-08-31 10:54:02
1539	31	344	A COMMENT	\N	2014-09-01 12:42:05	2014-09-01 12:42:05
1540	38	344	A COMMENT	\N	2014-09-04 13:12:14	2014-09-04 13:12:14
1541	38	344	A COMMENT	\N	2014-10-03 16:35:18	2014-10-03 16:35:18
1542	12	344	A COMMENT	\N	2014-10-04 00:19:29	2014-10-04 00:19:29
1543	33	344	A COMMENT	\N	2014-10-08 18:06:17	2014-10-08 18:06:17
1544	40	344	A COMMENT	\N	2014-10-11 08:41:49	2014-10-11 08:41:49
1545	15	344	A COMMENT	\N	2014-10-16 17:48:29	2014-10-16 17:48:29
1546	29	344	A COMMENT	\N	2014-11-14 00:39:13	2014-11-14 00:39:13
1547	23	346	A COMMENT	\N	2014-07-11 18:16:44	2014-07-11 18:16:44
1548	15	346	A COMMENT	\N	2014-08-02 02:45:43	2014-08-02 02:45:43
1549	38	346	A COMMENT	\N	2014-10-09 06:50:58	2014-10-09 06:50:58
1550	2	346	A COMMENT	\N	2014-10-09 13:47:00	2014-10-09 13:47:00
1551	44	346	A COMMENT	\N	2014-10-16 13:59:48	2014-10-16 13:59:48
1552	23	347	A COMMENT	\N	2014-08-02 07:17:14	2014-08-02 07:17:14
1553	23	348	A COMMENT	\N	2014-07-06 21:02:04	2014-07-06 21:02:04
1554	5	348	A COMMENT	\N	2014-07-08 14:22:52	2014-07-08 14:22:52
1555	31	348	A COMMENT	\N	2014-07-08 23:58:43	2014-07-08 23:58:43
1556	38	348	A COMMENT	\N	2014-07-18 00:07:46	2014-07-18 00:07:46
1557	48	348	A COMMENT	\N	2014-07-18 03:28:23	2014-07-18 03:28:23
1558	29	348	A COMMENT	\N	2014-07-25 05:54:00	2014-07-25 05:54:00
1559	48	348	A COMMENT	\N	2014-08-06 18:03:41	2014-08-06 18:03:41
1560	9	348	A COMMENT	\N	2014-08-11 09:28:00	2014-08-11 09:28:00
1561	40	348	A COMMENT	\N	2014-09-29 12:29:20	2014-09-29 12:29:20
1562	15	348	A COMMENT	\N	2014-10-10 08:03:26	2014-10-10 08:03:26
1563	2	348	A COMMENT	\N	2014-10-16 19:16:43	2014-10-16 19:16:43
1564	29	348	A COMMENT	\N	2014-10-18 20:05:20	2014-10-18 20:05:20
1565	46	348	A COMMENT	\N	2014-10-24 18:20:01	2014-10-24 18:20:01
1566	33	348	A COMMENT	\N	2014-10-25 09:35:48	2014-10-25 09:35:48
1567	2	348	A COMMENT	\N	2014-11-24 05:33:03	2014-11-24 05:33:03
1568	23	349	A COMMENT	\N	2014-07-08 15:31:02	2014-07-08 15:31:02
1569	11	349	A COMMENT	\N	2014-07-21 18:26:43	2014-07-21 18:26:43
1570	44	349	A COMMENT	\N	2014-08-05 17:19:43	2014-08-05 17:19:43
1571	3	349	A COMMENT	\N	2014-08-06 02:38:09	2014-08-06 02:38:09
1572	38	349	A COMMENT	\N	2014-08-06 04:32:25	2014-08-06 04:32:25
1573	22	349	A COMMENT	\N	2014-08-13 16:18:51	2014-08-13 16:18:51
1574	12	349	A COMMENT	\N	2014-09-03 07:37:11	2014-09-03 07:37:11
1575	33	349	A COMMENT	\N	2014-09-15 04:07:21	2014-09-15 04:07:21
1576	31	349	A COMMENT	\N	2014-09-15 14:32:40	2014-09-15 14:32:40
1577	44	349	A COMMENT	\N	2014-09-18 07:16:20	2014-09-18 07:16:20
1578	12	349	A COMMENT	\N	2014-09-19 19:20:27	2014-09-19 19:20:27
1579	40	349	A COMMENT	\N	2014-09-30 16:12:17	2014-09-30 16:12:17
1580	9	349	A COMMENT	\N	2014-10-17 01:52:27	2014-10-17 01:52:27
1581	28	349	A COMMENT	\N	2014-10-18 18:59:47	2014-10-18 18:59:47
1582	5	349	A COMMENT	\N	2014-10-20 02:00:07	2014-10-20 02:00:07
1583	46	349	A COMMENT	\N	2014-10-20 21:08:02	2014-10-20 21:08:02
1584	28	349	A COMMENT	\N	2014-10-23 05:27:58	2014-10-23 05:27:58
1585	4	349	A COMMENT	\N	2014-11-07 08:26:51	2014-11-07 08:26:51
1586	29	349	A COMMENT	\N	2014-11-12 05:52:08	2014-11-12 05:52:08
1587	31	349	A COMMENT	\N	2014-11-13 15:10:33	2014-11-13 15:10:33
1588	22	349	A COMMENT	\N	2014-11-24 16:52:29	2014-11-24 16:52:29
1589	23	350	A COMMENT	\N	2014-08-10 16:48:32	2014-08-10 16:48:32
1590	15	351	A COMMENT	\N	2014-09-11 07:41:58	2014-09-11 07:41:58
1591	22	351	A COMMENT	\N	2014-09-16 04:42:52	2014-09-16 04:42:52
1592	48	351	A COMMENT	\N	2014-09-21 10:42:51	2014-09-21 10:42:51
1593	38	352	A COMMENT	\N	2014-11-11 11:54:58	2014-11-11 11:54:58
1594	22	352	A COMMENT	\N	2014-11-13 15:07:16	2014-11-13 15:07:16
1595	28	356	A COMMENT	\N	2014-09-03 22:19:30	2014-09-03 22:19:30
1596	3	356	A COMMENT	\N	2014-09-24 17:13:10	2014-09-24 17:13:10
1597	15	356	A COMMENT	\N	2014-09-28 16:23:55	2014-09-28 16:23:55
1598	29	356	A COMMENT	\N	2014-10-01 11:31:02	2014-10-01 11:31:02
1599	44	356	A COMMENT	\N	2014-10-03 05:05:22	2014-10-03 05:05:22
1600	2	356	A COMMENT	\N	2014-10-08 14:19:49	2014-10-08 14:19:49
1601	33	356	A COMMENT	\N	2014-10-10 16:55:11	2014-10-10 16:55:11
1602	11	356	A COMMENT	\N	2014-10-30 22:02:39	2014-10-30 22:02:39
1603	22	356	A COMMENT	\N	2014-11-12 03:24:36	2014-11-12 03:24:36
1604	40	356	A COMMENT	\N	2014-11-13 20:29:00	2014-11-13 20:29:00
1605	29	357	A COMMENT	\N	2014-09-29 04:27:05	2014-09-29 04:27:05
1606	29	357	A COMMENT	\N	2014-09-30 03:36:38	2014-09-30 03:36:38
1607	44	357	A COMMENT	\N	2014-09-30 08:01:08	2014-09-30 08:01:08
1608	22	357	A COMMENT	\N	2014-10-02 23:26:04	2014-10-02 23:26:04
1609	31	357	A COMMENT	\N	2014-10-05 00:19:14	2014-10-05 00:19:14
1610	2	357	A COMMENT	\N	2014-10-10 21:54:44	2014-10-10 21:54:44
1611	44	357	A COMMENT	\N	2014-10-22 10:49:53	2014-10-22 10:49:53
1612	48	357	A COMMENT	\N	2014-10-26 04:19:24	2014-10-26 04:19:24
1613	5	357	A COMMENT	\N	2014-10-26 20:30:12	2014-10-26 20:30:12
1614	29	357	A COMMENT	\N	2014-10-27 18:05:15	2014-10-27 18:05:15
1615	2	357	A COMMENT	\N	2014-10-28 10:47:02	2014-10-28 10:47:02
1616	11	357	A COMMENT	\N	2014-11-03 13:00:33	2014-11-03 13:00:33
1617	12	357	A COMMENT	\N	2014-11-03 18:53:53	2014-11-03 18:53:53
1618	38	357	A COMMENT	\N	2014-11-04 18:00:10	2014-11-04 18:00:10
1619	31	357	A COMMENT	\N	2014-11-05 18:11:23	2014-11-05 18:11:23
1620	46	357	A COMMENT	\N	2014-11-13 02:33:13	2014-11-13 02:33:13
1621	12	357	A COMMENT	\N	2014-11-16 20:26:46	2014-11-16 20:26:46
1622	12	357	A COMMENT	\N	2014-11-19 22:48:29	2014-11-19 22:48:29
1623	11	357	A COMMENT	\N	2014-11-27 16:08:59	2014-11-27 16:08:59
1624	23	358	A COMMENT	\N	2014-10-11 22:01:16	2014-10-11 22:01:16
1625	12	358	A COMMENT	\N	2014-10-18 06:58:08	2014-10-18 06:58:08
1626	46	358	A COMMENT	\N	2014-10-21 14:37:42	2014-10-21 14:37:42
1627	2	358	A COMMENT	\N	2014-10-21 20:18:20	2014-10-21 20:18:20
1628	15	358	A COMMENT	\N	2014-10-27 07:10:35	2014-10-27 07:10:35
1629	46	358	A COMMENT	\N	2014-10-29 02:08:16	2014-10-29 02:08:16
1630	38	358	A COMMENT	\N	2014-10-31 17:27:31	2014-10-31 17:27:31
1631	9	358	A COMMENT	\N	2014-11-01 08:43:18	2014-11-01 08:43:18
1632	38	358	A COMMENT	\N	2014-11-01 18:14:05	2014-11-01 18:14:05
1633	3	358	A COMMENT	\N	2014-11-03 09:36:08	2014-11-03 09:36:08
1634	4	358	A COMMENT	\N	2014-11-13 02:09:42	2014-11-13 02:09:42
1635	3	358	A COMMENT	\N	2014-11-21 14:02:48	2014-11-21 14:02:48
1636	48	358	A COMMENT	\N	2014-11-22 21:52:55	2014-11-22 21:52:55
1637	46	359	A COMMENT	\N	2014-08-16 08:01:24	2014-08-16 08:01:24
1638	11	359	A COMMENT	\N	2014-10-20 05:03:05	2014-10-20 05:03:05
1639	28	359	A COMMENT	\N	2014-11-22 13:57:47	2014-11-22 13:57:47
1640	11	359	A COMMENT	\N	2014-11-25 16:44:55	2014-11-25 16:44:55
1641	48	360	A COMMENT	\N	2014-10-14 04:03:40	2014-10-14 04:03:40
1642	12	360	A COMMENT	\N	2014-10-19 13:34:35	2014-10-19 13:34:35
1643	29	360	A COMMENT	\N	2014-11-19 07:24:54	2014-11-19 07:24:54
1644	23	361	A COMMENT	\N	2014-08-19 05:52:28	2014-08-19 05:52:28
1645	11	361	A COMMENT	\N	2014-08-27 05:11:53	2014-08-27 05:11:53
1646	33	361	A COMMENT	\N	2014-09-28 17:01:58	2014-09-28 17:01:58
1647	15	361	A COMMENT	\N	2014-10-08 18:11:26	2014-10-08 18:11:26
1648	40	361	A COMMENT	\N	2014-10-09 08:34:59	2014-10-09 08:34:59
1649	11	361	A COMMENT	\N	2014-11-01 05:19:20	2014-11-01 05:19:20
1650	40	361	A COMMENT	\N	2014-11-05 23:11:14	2014-11-05 23:11:14
1651	22	361	A COMMENT	\N	2014-11-22 06:23:10	2014-11-22 06:23:10
1652	23	362	A COMMENT	\N	2014-08-10 06:43:33	2014-08-10 06:43:33
1653	12	362	A COMMENT	\N	2014-09-13 17:35:32	2014-09-13 17:35:32
1654	40	362	A COMMENT	\N	2014-10-13 14:13:03	2014-10-13 14:13:03
1655	12	363	A COMMENT	\N	2014-08-01 11:51:38	2014-08-01 11:51:38
1656	40	363	A COMMENT	\N	2014-08-19 17:54:48	2014-08-19 17:54:48
1657	29	363	A COMMENT	\N	2014-09-06 12:19:32	2014-09-06 12:19:32
1658	29	363	A COMMENT	\N	2014-09-15 17:53:42	2014-09-15 17:53:42
1659	9	363	A COMMENT	\N	2014-09-27 10:44:34	2014-09-27 10:44:34
1660	28	363	A COMMENT	\N	2014-10-01 16:20:26	2014-10-01 16:20:26
1661	40	363	A COMMENT	\N	2014-10-06 01:28:50	2014-10-06 01:28:50
1662	48	363	A COMMENT	\N	2014-10-16 17:40:47	2014-10-16 17:40:47
1663	15	363	A COMMENT	\N	2014-10-28 22:35:42	2014-10-28 22:35:42
1664	31	363	A COMMENT	\N	2014-11-07 10:59:26	2014-11-07 10:59:26
1665	23	364	A COMMENT	\N	2014-08-16 07:33:27	2014-08-16 07:33:27
1666	22	364	A COMMENT	\N	2014-08-24 09:36:13	2014-08-24 09:36:13
1667	28	364	A COMMENT	\N	2014-09-12 10:10:03	2014-09-12 10:10:03
1668	38	364	A COMMENT	\N	2014-09-13 23:20:10	2014-09-13 23:20:10
1669	4	364	A COMMENT	\N	2014-09-20 10:36:50	2014-09-20 10:36:50
1670	9	364	A COMMENT	\N	2014-10-22 14:16:43	2014-10-22 14:16:43
1671	12	364	A COMMENT	\N	2014-10-23 00:18:35	2014-10-23 00:18:35
1672	11	364	A COMMENT	\N	2014-11-09 13:33:30	2014-11-09 13:33:30
1673	5	364	A COMMENT	\N	2014-11-18 10:04:59	2014-11-18 10:04:59
1674	23	366	A COMMENT	\N	2014-10-11 17:02:34	2014-10-11 17:02:34
1675	28	366	A COMMENT	\N	2014-10-26 05:22:11	2014-10-26 05:22:11
1676	9	366	A COMMENT	\N	2014-11-05 07:00:23	2014-11-05 07:00:23
1677	15	366	A COMMENT	\N	2014-11-19 00:49:11	2014-11-19 00:49:11
1678	23	367	A COMMENT	\N	2014-07-24 07:13:51	2014-07-24 07:13:51
1679	3	367	A COMMENT	\N	2014-09-10 05:33:30	2014-09-10 05:33:30
1680	4	367	A COMMENT	\N	2014-09-22 22:47:53	2014-09-22 22:47:53
1681	38	367	A COMMENT	\N	2014-09-30 17:58:39	2014-09-30 17:58:39
1682	33	367	A COMMENT	\N	2014-10-17 08:55:33	2014-10-17 08:55:33
1683	9	367	A COMMENT	\N	2014-10-22 07:36:15	2014-10-22 07:36:15
1684	23	368	A COMMENT	\N	2014-10-12 14:02:17	2014-10-12 14:02:17
1685	28	368	A COMMENT	\N	2014-10-28 20:49:59	2014-10-28 20:49:59
1686	15	368	A COMMENT	\N	2014-11-10 21:33:45	2014-11-10 21:33:45
1687	23	369	A COMMENT	\N	2014-07-19 09:26:54	2014-07-19 09:26:54
1688	23	371	A COMMENT	\N	2014-07-14 17:24:07	2014-07-14 17:24:07
1689	29	371	A COMMENT	\N	2014-07-23 19:30:54	2014-07-23 19:30:54
1690	31	371	A COMMENT	\N	2014-07-23 23:02:22	2014-07-23 23:02:22
1691	5	371	A COMMENT	\N	2014-08-01 07:03:05	2014-08-01 07:03:05
1692	5	371	A COMMENT	\N	2014-08-06 20:55:10	2014-08-06 20:55:10
1693	48	371	A COMMENT	\N	2014-08-12 04:14:03	2014-08-12 04:14:03
1694	15	371	A COMMENT	\N	2014-08-29 04:40:15	2014-08-29 04:40:15
1695	22	371	A COMMENT	\N	2014-08-29 18:23:02	2014-08-29 18:23:02
1696	28	371	A COMMENT	\N	2014-09-23 20:40:58	2014-09-23 20:40:58
1697	4	371	A COMMENT	\N	2014-09-25 15:58:20	2014-09-25 15:58:20
1698	9	371	A COMMENT	\N	2014-09-28 01:51:52	2014-09-28 01:51:52
1699	29	371	A COMMENT	\N	2014-10-21 10:36:08	2014-10-21 10:36:08
1700	2	371	A COMMENT	\N	2014-11-04 14:58:25	2014-11-04 14:58:25
1701	23	372	A COMMENT	\N	2014-10-02 19:09:40	2014-10-02 19:09:40
1702	3	372	A COMMENT	\N	2014-10-10 04:26:40	2014-10-10 04:26:40
1703	29	372	A COMMENT	\N	2014-11-09 11:54:15	2014-11-09 11:54:15
1704	22	372	A COMMENT	\N	2014-11-18 13:15:33	2014-11-18 13:15:33
1705	4	372	A COMMENT	\N	2014-11-20 22:06:35	2014-11-20 22:06:35
1706	15	373	A COMMENT	\N	2014-10-04 07:33:02	2014-10-04 07:33:02
1707	33	373	A COMMENT	\N	2014-11-02 17:15:35	2014-11-02 17:15:35
1708	40	374	A COMMENT	\N	2014-10-21 22:58:02	2014-10-21 22:58:02
1709	44	374	A COMMENT	\N	2014-11-12 18:06:43	2014-11-12 18:06:43
1710	3	374	A COMMENT	\N	2014-11-21 03:27:53	2014-11-21 03:27:53
1711	23	375	A COMMENT	\N	2014-07-27 18:29:07	2014-07-27 18:29:07
1712	23	376	A COMMENT	\N	2014-08-24 17:38:09	2014-08-24 17:38:09
1713	2	376	A COMMENT	\N	2014-09-14 13:11:28	2014-09-14 13:11:28
1714	22	376	A COMMENT	\N	2014-09-15 22:18:15	2014-09-15 22:18:15
1715	38	376	A COMMENT	\N	2014-09-25 10:32:12	2014-09-25 10:32:12
1716	33	376	A COMMENT	\N	2014-10-09 19:51:43	2014-10-09 19:51:43
1717	46	376	A COMMENT	\N	2014-10-13 08:02:58	2014-10-13 08:02:58
1718	40	376	A COMMENT	\N	2014-10-13 10:41:55	2014-10-13 10:41:55
1719	29	376	A COMMENT	\N	2014-10-16 05:30:07	2014-10-16 05:30:07
1720	44	376	A COMMENT	\N	2014-10-21 02:11:53	2014-10-21 02:11:53
1721	15	376	A COMMENT	\N	2014-10-24 15:46:24	2014-10-24 15:46:24
1722	9	377	A COMMENT	\N	2014-08-23 18:31:34	2014-08-23 18:31:34
1723	15	377	A COMMENT	\N	2014-10-09 15:21:12	2014-10-09 15:21:12
1724	4	378	A COMMENT	\N	2014-11-26 09:36:45	2014-11-26 09:36:45
1725	44	379	A COMMENT	\N	2014-10-02 21:12:10	2014-10-02 21:12:10
1726	48	379	A COMMENT	\N	2014-10-03 23:07:09	2014-10-03 23:07:09
1727	28	379	A COMMENT	\N	2014-11-14 05:19:17	2014-11-14 05:19:17
1728	22	380	A COMMENT	\N	2014-11-14 11:56:23	2014-11-14 11:56:23
1729	40	380	A COMMENT	\N	2014-11-16 08:23:15	2014-11-16 08:23:15
1730	9	380	A COMMENT	\N	2014-11-17 07:37:16	2014-11-17 07:37:16
1731	15	380	A COMMENT	\N	2014-11-18 21:03:06	2014-11-18 21:03:06
1732	12	380	A COMMENT	\N	2014-11-20 02:08:18	2014-11-20 02:08:18
1733	38	381	A COMMENT	\N	2014-09-06 19:06:51	2014-09-06 19:06:51
1734	33	381	A COMMENT	\N	2014-11-08 15:21:52	2014-11-08 15:21:52
1735	40	382	A COMMENT	\N	2014-08-04 12:43:49	2014-08-04 12:43:49
1736	15	382	A COMMENT	\N	2014-08-17 14:08:25	2014-08-17 14:08:25
1737	29	383	A COMMENT	\N	2014-10-25 08:22:16	2014-10-25 08:22:16
1738	28	383	A COMMENT	\N	2014-11-21 03:05:37	2014-11-21 03:05:37
1739	23	384	A COMMENT	\N	2014-07-18 03:33:06	2014-07-18 03:33:06
1740	11	385	A COMMENT	\N	2014-08-29 03:30:21	2014-08-29 03:30:21
1741	11	385	A COMMENT	\N	2014-09-08 11:18:48	2014-09-08 11:18:48
1742	44	385	A COMMENT	\N	2014-09-12 11:35:51	2014-09-12 11:35:51
1743	3	385	A COMMENT	\N	2014-09-16 21:35:34	2014-09-16 21:35:34
1744	38	385	A COMMENT	\N	2014-09-18 00:34:13	2014-09-18 00:34:13
1745	4	385	A COMMENT	\N	2014-10-06 11:06:43	2014-10-06 11:06:43
1746	5	385	A COMMENT	\N	2014-10-16 16:30:18	2014-10-16 16:30:18
1747	15	385	A COMMENT	\N	2014-11-13 18:36:21	2014-11-13 18:36:21
1748	23	386	A COMMENT	\N	2014-08-29 11:22:31	2014-08-29 11:22:31
1749	48	387	A COMMENT	\N	2014-11-02 16:06:50	2014-11-02 16:06:50
1750	11	387	A COMMENT	\N	2014-11-05 09:06:19	2014-11-05 09:06:19
1751	28	387	A COMMENT	\N	2014-11-05 21:48:15	2014-11-05 21:48:15
1752	29	387	A COMMENT	\N	2014-11-17 22:41:01	2014-11-17 22:41:01
1753	2	388	A COMMENT	\N	2014-07-14 19:51:45	2014-07-14 19:51:45
1754	33	388	A COMMENT	\N	2014-07-19 09:29:09	2014-07-19 09:29:09
1755	46	388	A COMMENT	\N	2014-07-20 21:03:20	2014-07-20 21:03:20
1756	38	388	A COMMENT	\N	2014-07-22 21:47:02	2014-07-22 21:47:02
1757	28	388	A COMMENT	\N	2014-07-23 16:01:16	2014-07-23 16:01:16
1758	22	388	A COMMENT	\N	2014-07-28 05:33:53	2014-07-28 05:33:53
1759	48	388	A COMMENT	\N	2014-08-15 14:52:59	2014-08-15 14:52:59
1760	33	388	A COMMENT	\N	2014-08-30 16:25:17	2014-08-30 16:25:17
1761	29	388	A COMMENT	\N	2014-09-06 12:05:56	2014-09-06 12:05:56
1762	46	388	A COMMENT	\N	2014-09-28 15:54:32	2014-09-28 15:54:32
1763	48	388	A COMMENT	\N	2014-10-09 20:17:06	2014-10-09 20:17:06
1764	2	388	A COMMENT	\N	2014-10-12 10:43:37	2014-10-12 10:43:37
1765	3	388	A COMMENT	\N	2014-10-18 06:56:49	2014-10-18 06:56:49
1766	28	388	A COMMENT	\N	2014-10-21 08:09:04	2014-10-21 08:09:04
1767	44	388	A COMMENT	\N	2014-10-29 08:28:42	2014-10-29 08:28:42
1768	38	388	A COMMENT	\N	2014-11-07 02:59:39	2014-11-07 02:59:39
1769	48	388	A COMMENT	\N	2014-11-08 05:38:50	2014-11-08 05:38:50
1770	9	388	A COMMENT	\N	2014-11-10 19:53:07	2014-11-10 19:53:07
1771	31	388	A COMMENT	\N	2014-11-12 22:43:46	2014-11-12 22:43:46
1772	22	388	A COMMENT	\N	2014-11-14 06:42:12	2014-11-14 06:42:12
1773	2	389	A COMMENT	\N	2014-09-01 03:00:36	2014-09-01 03:00:36
1774	48	389	A COMMENT	\N	2014-09-04 17:21:00	2014-09-04 17:21:00
1775	29	389	A COMMENT	\N	2014-09-27 09:48:42	2014-09-27 09:48:42
1776	33	389	A COMMENT	\N	2014-10-24 20:31:34	2014-10-24 20:31:34
1777	22	389	A COMMENT	\N	2014-11-06 07:25:02	2014-11-06 07:25:02
1778	46	389	A COMMENT	\N	2014-11-07 09:15:36	2014-11-07 09:15:36
1779	3	389	A COMMENT	\N	2014-11-15 07:35:37	2014-11-15 07:35:37
1780	2	390	A COMMENT	\N	2014-08-08 09:27:18	2014-08-08 09:27:18
1781	28	390	A COMMENT	\N	2014-08-28 14:15:38	2014-08-28 14:15:38
1782	12	390	A COMMENT	\N	2014-08-31 04:28:21	2014-08-31 04:28:21
1783	38	390	A COMMENT	\N	2014-09-14 10:00:01	2014-09-14 10:00:01
1784	15	390	A COMMENT	\N	2014-09-15 23:23:30	2014-09-15 23:23:30
1785	5	390	A COMMENT	\N	2014-09-28 06:18:18	2014-09-28 06:18:18
1786	11	390	A COMMENT	\N	2014-10-15 13:20:21	2014-10-15 13:20:21
1787	5	390	A COMMENT	\N	2014-10-30 11:07:34	2014-10-30 11:07:34
1788	31	390	A COMMENT	\N	2014-11-15 04:44:18	2014-11-15 04:44:18
1789	29	390	A COMMENT	\N	2014-11-19 19:05:40	2014-11-19 19:05:40
1790	2	390	A COMMENT	\N	2014-11-22 06:59:57	2014-11-22 06:59:57
1791	46	392	A COMMENT	\N	2014-11-19 11:34:18	2014-11-19 11:34:18
1792	2	392	A COMMENT	\N	2014-11-19 21:52:50	2014-11-19 21:52:50
1793	38	392	A COMMENT	\N	2014-11-20 02:36:36	2014-11-20 02:36:36
1794	11	392	A COMMENT	\N	2014-11-20 07:42:14	2014-11-20 07:42:14
1795	40	392	A COMMENT	\N	2014-11-20 15:57:03	2014-11-20 15:57:03
1796	2	392	A COMMENT	\N	2014-11-22 10:56:15	2014-11-22 10:56:15
1797	5	392	A COMMENT	\N	2014-11-22 15:38:46	2014-11-22 15:38:46
1798	5	392	A COMMENT	\N	2014-11-23 06:17:03	2014-11-23 06:17:03
1799	4	392	A COMMENT	\N	2014-11-24 02:03:55	2014-11-24 02:03:55
1800	22	392	A COMMENT	\N	2014-11-25 03:09:18	2014-11-25 03:09:18
1801	15	392	A COMMENT	\N	2014-11-25 12:56:37	2014-11-25 12:56:37
1802	38	392	A COMMENT	\N	2014-11-26 13:55:19	2014-11-26 13:55:19
1803	22	392	A COMMENT	\N	2014-11-26 16:12:17	2014-11-26 16:12:17
1804	11	393	A COMMENT	\N	2014-11-10 16:03:11	2014-11-10 16:03:11
1805	44	393	A COMMENT	\N	2014-11-27 10:13:04	2014-11-27 10:13:04
1806	17	394	A COMMENT	\N	2014-11-05 20:52:17	2014-11-05 20:52:17
1807	48	395	A COMMENT	\N	2014-11-26 14:45:28	2014-11-26 14:45:28
1808	46	395	A COMMENT	\N	2014-11-27 07:50:52	2014-11-27 07:50:52
1809	9	395	A COMMENT	\N	2014-11-27 10:54:21	2014-11-27 10:54:21
1810	31	396	A COMMENT	\N	2014-11-27 12:14:28	2014-11-27 12:14:28
1811	40	396	A COMMENT	\N	2014-11-27 13:50:41	2014-11-27 13:50:41
1812	40	396	A COMMENT	\N	2014-11-27 23:07:04	2014-11-27 23:07:04
1813	5	396	A COMMENT	\N	2014-11-28 00:34:08	2014-11-28 00:34:08
1814	38	397	A COMMENT	\N	2014-11-27 22:59:15	2014-11-27 22:59:15
1815	5	397	A COMMENT	\N	2014-11-28 01:05:49	2014-11-28 01:05:49
1816	5	397	A COMMENT	\N	2014-11-28 01:19:37	2014-11-28 01:19:37
1817	48	397	A COMMENT	\N	2014-11-28 04:27:59	2014-11-28 04:27:59
1818	20	398	A COMMENT	\N	2014-11-27 00:35:26	2014-11-27 00:35:26
1819	15	398	A COMMENT	\N	2014-11-27 00:37:26	2014-11-27 00:37:26
1820	15	398	A COMMENT	\N	2014-11-27 14:04:35	2014-11-27 14:04:35
1821	20	399	A COMMENT	\N	2014-11-27 09:48:19	2014-11-27 09:48:19
1822	33	399	A COMMENT	\N	2014-11-27 12:44:08	2014-11-27 12:44:08
1823	22	399	A COMMENT	\N	2014-11-27 13:51:43	2014-11-27 13:51:43
1824	9	399	A COMMENT	\N	2014-11-27 16:02:25	2014-11-27 16:02:25
1825	48	399	A COMMENT	\N	2014-11-28 04:46:53	2014-11-28 04:46:53
1826	11	399	A COMMENT	\N	2014-11-28 05:58:50	2014-11-28 05:58:50
1827	11	400	A COMMENT	\N	2014-11-26 16:40:51	2014-11-26 16:40:51
1828	2	400	A COMMENT	\N	2014-11-27 01:32:42	2014-11-27 01:32:42
1829	38	400	A COMMENT	\N	2014-11-27 10:06:38	2014-11-27 10:06:38
1830	30	404	A COMMENT	\N	2014-05-23 02:25:05	2014-05-23 02:25:05
1831	15	404	A COMMENT	\N	2014-06-22 07:53:26	2014-06-22 07:53:26
1832	44	404	A COMMENT	\N	2014-08-28 14:29:59	2014-08-28 14:29:59
1833	12	404	A COMMENT	\N	2014-09-07 03:29:56	2014-09-07 03:29:56
1834	28	404	A COMMENT	\N	2014-10-02 22:01:02	2014-10-02 22:01:02
1835	15	404	A COMMENT	\N	2014-10-17 06:23:52	2014-10-17 06:23:52
1836	28	404	A COMMENT	\N	2014-10-21 11:41:01	2014-10-21 11:41:01
1837	30	405	A COMMENT	\N	2014-06-13 23:03:21	2014-06-13 23:03:21
1838	40	405	A COMMENT	\N	2014-06-28 05:56:03	2014-06-28 05:56:03
1839	9	405	A COMMENT	\N	2014-06-28 06:28:03	2014-06-28 06:28:03
1840	11	405	A COMMENT	\N	2014-07-26 10:29:17	2014-07-26 10:29:17
1841	3	405	A COMMENT	\N	2014-08-18 19:53:35	2014-08-18 19:53:35
1842	4	405	A COMMENT	\N	2014-08-23 16:19:53	2014-08-23 16:19:53
1843	33	405	A COMMENT	\N	2014-09-17 01:16:10	2014-09-17 01:16:10
1844	12	405	A COMMENT	\N	2014-10-11 01:39:49	2014-10-11 01:39:49
1845	33	407	A COMMENT	\N	2014-06-16 00:27:46	2014-06-16 00:27:46
1846	48	407	A COMMENT	\N	2014-06-25 00:56:36	2014-06-25 00:56:36
1847	11	407	A COMMENT	\N	2014-06-27 04:28:31	2014-06-27 04:28:31
1848	11	407	A COMMENT	\N	2014-07-05 14:56:20	2014-07-05 14:56:20
1849	4	407	A COMMENT	\N	2014-07-16 09:39:06	2014-07-16 09:39:06
1850	29	407	A COMMENT	\N	2014-08-11 15:53:54	2014-08-11 15:53:54
1851	22	407	A COMMENT	\N	2014-08-12 03:26:51	2014-08-12 03:26:51
1852	3	407	A COMMENT	\N	2014-08-23 05:02:00	2014-08-23 05:02:00
1853	15	407	A COMMENT	\N	2014-08-25 00:39:52	2014-08-25 00:39:52
1854	40	407	A COMMENT	\N	2014-09-01 17:40:13	2014-09-01 17:40:13
1855	22	407	A COMMENT	\N	2014-09-12 07:46:19	2014-09-12 07:46:19
1856	46	407	A COMMENT	\N	2014-09-23 14:49:32	2014-09-23 14:49:32
1857	5	407	A COMMENT	\N	2014-09-24 17:45:41	2014-09-24 17:45:41
1858	40	407	A COMMENT	\N	2014-09-26 20:07:23	2014-09-26 20:07:23
1859	38	407	A COMMENT	\N	2014-10-02 07:52:23	2014-10-02 07:52:23
1860	46	407	A COMMENT	\N	2014-10-20 09:48:44	2014-10-20 09:48:44
1861	9	407	A COMMENT	\N	2014-10-22 02:07:17	2014-10-22 02:07:17
1862	11	407	A COMMENT	\N	2014-11-11 12:36:22	2014-11-11 12:36:22
1863	44	407	A COMMENT	\N	2014-11-19 11:39:08	2014-11-19 11:39:08
1864	5	408	A COMMENT	\N	2014-07-09 20:38:31	2014-07-09 20:38:31
1865	22	408	A COMMENT	\N	2014-08-12 22:41:15	2014-08-12 22:41:15
1866	31	408	A COMMENT	\N	2014-11-09 04:50:25	2014-11-09 04:50:25
1867	22	411	A COMMENT	\N	2014-07-31 23:40:07	2014-07-31 23:40:07
1868	9	411	A COMMENT	\N	2014-11-18 14:57:40	2014-11-18 14:57:40
1869	31	412	A COMMENT	\N	2014-11-27 16:52:32	2014-11-27 16:52:32
1870	29	412	A COMMENT	\N	2014-11-28 00:29:20	2014-11-28 00:29:20
1871	3	412	A COMMENT	\N	2014-11-28 05:17:52	2014-11-28 05:17:52
1872	33	413	A COMMENT	\N	2014-11-27 17:01:02	2014-11-27 17:01:02
1873	9	413	A COMMENT	\N	2014-11-27 18:34:43	2014-11-27 18:34:43
1874	28	413	A COMMENT	\N	2014-11-27 19:17:03	2014-11-27 19:17:03
1875	29	413	A COMMENT	\N	2014-11-27 21:40:57	2014-11-27 21:40:57
1876	48	413	A COMMENT	\N	2014-11-27 22:10:48	2014-11-27 22:10:48
1877	5	413	A COMMENT	\N	2014-11-28 03:17:24	2014-11-28 03:17:24
1878	38	413	A COMMENT	\N	2014-11-28 03:52:37	2014-11-28 03:52:37
1879	22	413	A COMMENT	\N	2014-11-28 04:41:08	2014-11-28 04:41:08
1880	40	413	A COMMENT	\N	2014-11-28 04:51:08	2014-11-28 04:51:08
1881	31	413	A COMMENT	\N	2014-11-28 05:38:10	2014-11-28 05:38:10
1882	29	414	A COMMENT	\N	2014-11-27 19:08:52	2014-11-27 19:08:52
1883	22	414	A COMMENT	\N	2014-11-27 20:49:27	2014-11-27 20:49:27
1884	4	414	A COMMENT	\N	2014-11-27 23:58:00	2014-11-27 23:58:00
1885	44	414	A COMMENT	\N	2014-11-28 03:39:57	2014-11-28 03:39:57
1886	9	414	A COMMENT	\N	2014-11-28 04:35:45	2014-11-28 04:35:45
1887	11	414	A COMMENT	\N	2014-11-28 04:54:46	2014-11-28 04:54:46
1888	38	414	A COMMENT	\N	2014-11-28 05:04:05	2014-11-28 05:04:05
1889	2	415	A COMMENT	\N	2014-11-28 00:40:12	2014-11-28 00:40:12
1890	28	415	A COMMENT	\N	2014-11-28 02:14:16	2014-11-28 02:14:16
1891	40	415	A COMMENT	\N	2014-11-28 02:28:48	2014-11-28 02:28:48
1892	22	415	A COMMENT	\N	2014-11-28 02:33:47	2014-11-28 02:33:47
1893	2	415	A COMMENT	\N	2014-11-28 04:02:10	2014-11-28 04:02:10
1894	44	415	A COMMENT	\N	2014-11-28 04:44:10	2014-11-28 04:44:10
1895	29	415	A COMMENT	\N	2014-11-28 04:45:39	2014-11-28 04:45:39
1896	22	415	A COMMENT	\N	2014-11-28 05:41:31	2014-11-28 05:41:31
1897	33	415	A COMMENT	\N	2014-11-28 06:33:19	2014-11-28 06:33:19
1898	31	417	A COMMENT	\N	2014-11-28 00:58:44	2014-11-28 00:58:44
1899	4	417	A COMMENT	\N	2014-11-28 03:48:07	2014-11-28 03:48:07
1900	35	418	A COMMENT	\N	2014-11-27 15:46:46	2014-11-27 15:46:46
1901	11	418	A COMMENT	\N	2014-11-27 18:42:16	2014-11-27 18:42:16
1902	29	418	A COMMENT	\N	2014-11-27 23:36:44	2014-11-27 23:36:44
1903	22	418	A COMMENT	\N	2014-11-28 01:29:42	2014-11-28 01:29:42
1904	2	418	A COMMENT	\N	2014-11-28 02:12:54	2014-11-28 02:12:54
1905	35	419	A COMMENT	\N	2014-11-27 22:20:44	2014-11-27 22:20:44
1906	2	419	A COMMENT	\N	2014-11-28 01:52:54	2014-11-28 01:52:54
1907	31	419	A COMMENT	\N	2014-11-28 01:53:01	2014-11-28 01:53:01
1908	46	419	A COMMENT	\N	2014-11-28 04:00:20	2014-11-28 04:00:20
1909	40	419	A COMMENT	\N	2014-11-28 06:17:53	2014-11-28 06:17:53
1910	4	419	A COMMENT	\N	2014-11-28 06:29:12	2014-11-28 06:29:12
1911	14	420	A COMMENT	\N	2014-07-01 04:29:50	2014-07-01 04:29:50
1912	14	421	A COMMENT	\N	2014-07-10 07:09:27	2014-07-10 07:09:27
1913	33	422	A COMMENT	\N	2014-08-14 01:46:44	2014-08-14 01:46:44
1914	12	422	A COMMENT	\N	2014-08-24 21:06:15	2014-08-24 21:06:15
1915	11	422	A COMMENT	\N	2014-08-25 06:11:07	2014-08-25 06:11:07
1916	15	422	A COMMENT	\N	2014-09-08 12:50:39	2014-09-08 12:50:39
1917	2	422	A COMMENT	\N	2014-10-02 02:23:51	2014-10-02 02:23:51
1918	5	422	A COMMENT	\N	2014-10-11 06:27:32	2014-10-11 06:27:32
1919	44	422	A COMMENT	\N	2014-11-08 13:33:15	2014-11-08 13:33:15
1920	33	422	A COMMENT	\N	2014-11-16 08:10:54	2014-11-16 08:10:54
1921	2	423	A COMMENT	\N	2014-09-12 21:26:56	2014-09-12 21:26:56
1922	3	423	A COMMENT	\N	2014-10-24 05:48:25	2014-10-24 05:48:25
1923	40	423	A COMMENT	\N	2014-11-16 17:15:15	2014-11-16 17:15:15
1924	22	424	A COMMENT	\N	2014-09-07 16:09:50	2014-09-07 16:09:50
1925	46	424	A COMMENT	\N	2014-09-13 16:49:49	2014-09-13 16:49:49
1926	4	424	A COMMENT	\N	2014-09-15 14:22:45	2014-09-15 14:22:45
1927	29	424	A COMMENT	\N	2014-09-15 19:59:01	2014-09-15 19:59:01
1928	38	424	A COMMENT	\N	2014-10-22 06:22:09	2014-10-22 06:22:09
1929	3	424	A COMMENT	\N	2014-10-29 16:11:05	2014-10-29 16:11:05
1930	44	424	A COMMENT	\N	2014-11-17 06:59:37	2014-11-17 06:59:37
1931	5	424	A COMMENT	\N	2014-11-24 04:25:58	2014-11-24 04:25:58
1932	28	424	A COMMENT	\N	2014-11-27 01:49:01	2014-11-27 01:49:01
1933	22	425	A COMMENT	\N	2014-08-04 01:48:43	2014-08-04 01:48:43
1934	31	425	A COMMENT	\N	2014-08-09 04:53:25	2014-08-09 04:53:25
1935	5	425	A COMMENT	\N	2014-08-23 14:21:39	2014-08-23 14:21:39
1936	12	425	A COMMENT	\N	2014-10-05 10:55:35	2014-10-05 10:55:35
1937	31	425	A COMMENT	\N	2014-10-21 04:59:27	2014-10-21 04:59:27
1938	12	425	A COMMENT	\N	2014-11-23 11:16:31	2014-11-23 11:16:31
1939	3	425	A COMMENT	\N	2014-11-26 02:47:39	2014-11-26 02:47:39
1940	14	426	A COMMENT	\N	2014-07-29 14:11:32	2014-07-29 14:11:32
1941	28	426	A COMMENT	\N	2014-08-28 06:07:36	2014-08-28 06:07:36
1942	48	426	A COMMENT	\N	2014-09-05 01:31:06	2014-09-05 01:31:06
1943	46	426	A COMMENT	\N	2014-09-23 21:14:15	2014-09-23 21:14:15
1944	9	426	A COMMENT	\N	2014-10-06 08:10:22	2014-10-06 08:10:22
1945	48	426	A COMMENT	\N	2014-10-15 22:30:19	2014-10-15 22:30:19
1946	33	426	A COMMENT	\N	2014-10-28 04:01:04	2014-10-28 04:01:04
1947	29	426	A COMMENT	\N	2014-11-08 15:31:29	2014-11-08 15:31:29
1948	44	426	A COMMENT	\N	2014-11-15 22:57:25	2014-11-15 22:57:25
1949	4	427	A COMMENT	\N	2014-09-30 13:37:48	2014-09-30 13:37:48
1950	3	427	A COMMENT	\N	2014-10-10 03:41:08	2014-10-10 03:41:08
1951	15	427	A COMMENT	\N	2014-11-15 18:20:52	2014-11-15 18:20:52
1952	22	427	A COMMENT	\N	2014-11-19 03:51:05	2014-11-19 03:51:05
1953	9	429	A COMMENT	\N	2014-11-20 18:45:59	2014-11-20 18:45:59
1954	14	430	A COMMENT	\N	2014-11-05 21:37:33	2014-11-05 21:37:33
1955	38	430	A COMMENT	\N	2014-11-08 13:50:32	2014-11-08 13:50:32
1956	31	430	A COMMENT	\N	2014-11-10 16:54:08	2014-11-10 16:54:08
1957	15	430	A COMMENT	\N	2014-11-14 19:14:30	2014-11-14 19:14:30
1958	44	430	A COMMENT	\N	2014-11-16 02:11:39	2014-11-16 02:11:39
1959	15	430	A COMMENT	\N	2014-11-17 09:17:38	2014-11-17 09:17:38
1960	15	430	A COMMENT	\N	2014-11-18 18:32:23	2014-11-18 18:32:23
1961	9	430	A COMMENT	\N	2014-11-20 02:09:05	2014-11-20 02:09:05
1962	48	430	A COMMENT	\N	2014-11-22 22:08:13	2014-11-22 22:08:13
1963	9	430	A COMMENT	\N	2014-11-24 10:15:45	2014-11-24 10:15:45
1964	28	430	A COMMENT	\N	2014-11-26 05:32:52	2014-11-26 05:32:52
1965	9	431	A COMMENT	\N	2014-09-04 13:05:46	2014-09-04 13:05:46
1966	29	431	A COMMENT	\N	2014-09-06 20:23:43	2014-09-06 20:23:43
1967	12	431	A COMMENT	\N	2014-09-14 12:55:19	2014-09-14 12:55:19
1968	38	431	A COMMENT	\N	2014-09-15 02:05:04	2014-09-15 02:05:04
1969	4	431	A COMMENT	\N	2014-09-19 11:55:18	2014-09-19 11:55:18
1970	15	431	A COMMENT	\N	2014-10-21 09:18:22	2014-10-21 09:18:22
1971	40	431	A COMMENT	\N	2014-10-31 08:09:04	2014-10-31 08:09:04
1972	15	431	A COMMENT	\N	2014-11-06 19:34:48	2014-11-06 19:34:48
1973	3	432	A COMMENT	\N	2014-09-22 00:33:13	2014-09-22 00:33:13
1974	44	432	A COMMENT	\N	2014-10-22 06:43:30	2014-10-22 06:43:30
1975	44	432	A COMMENT	\N	2014-10-28 17:29:56	2014-10-28 17:29:56
1976	44	432	A COMMENT	\N	2014-11-07 19:49:45	2014-11-07 19:49:45
1977	41	433	A COMMENT	\N	2014-09-23 19:48:04	2014-09-23 19:48:04
1978	41	435	A COMMENT	\N	2014-09-04 03:16:38	2014-09-04 03:16:38
1979	31	435	A COMMENT	\N	2014-09-10 18:08:54	2014-09-10 18:08:54
1980	9	435	A COMMENT	\N	2014-09-16 23:47:55	2014-09-16 23:47:55
1981	33	435	A COMMENT	\N	2014-09-19 12:30:15	2014-09-19 12:30:15
1982	5	435	A COMMENT	\N	2014-09-21 09:57:09	2014-09-21 09:57:09
1983	31	435	A COMMENT	\N	2014-09-25 12:08:36	2014-09-25 12:08:36
1984	46	435	A COMMENT	\N	2014-09-30 05:01:09	2014-09-30 05:01:09
1985	12	435	A COMMENT	\N	2014-10-03 03:33:13	2014-10-03 03:33:13
1986	11	435	A COMMENT	\N	2014-10-05 05:09:49	2014-10-05 05:09:49
1987	44	435	A COMMENT	\N	2014-10-26 17:34:02	2014-10-26 17:34:02
1988	12	435	A COMMENT	\N	2014-11-04 05:33:22	2014-11-04 05:33:22
1989	41	436	A COMMENT	\N	2014-09-08 20:40:17	2014-09-08 20:40:17
1990	31	437	A COMMENT	\N	2014-09-07 11:02:12	2014-09-07 11:02:12
1991	5	437	A COMMENT	\N	2014-09-21 16:01:34	2014-09-21 16:01:34
1992	48	437	A COMMENT	\N	2014-09-23 20:33:40	2014-09-23 20:33:40
1993	28	437	A COMMENT	\N	2014-09-26 08:00:56	2014-09-26 08:00:56
1994	15	437	A COMMENT	\N	2014-11-07 07:11:18	2014-11-07 07:11:18
1995	41	438	A COMMENT	\N	2014-10-02 14:34:21	2014-10-02 14:34:21
1996	4	438	A COMMENT	\N	2014-10-02 15:26:39	2014-10-02 15:26:39
1997	3	438	A COMMENT	\N	2014-10-12 07:10:44	2014-10-12 07:10:44
1998	31	438	A COMMENT	\N	2014-10-31 09:49:51	2014-10-31 09:49:51
1999	29	438	A COMMENT	\N	2014-11-01 16:58:43	2014-11-01 16:58:43
2000	4	438	A COMMENT	\N	2014-11-17 14:44:45	2014-11-17 14:44:45
2001	9	439	A COMMENT	\N	2014-10-17 09:10:49	2014-10-17 09:10:49
2002	9	439	A COMMENT	\N	2014-10-18 00:06:58	2014-10-18 00:06:58
2003	28	439	A COMMENT	\N	2014-10-19 14:41:12	2014-10-19 14:41:12
2004	46	439	A COMMENT	\N	2014-10-19 23:20:17	2014-10-19 23:20:17
2005	3	439	A COMMENT	\N	2014-11-01 07:37:28	2014-11-01 07:37:28
2006	46	439	A COMMENT	\N	2014-11-02 03:59:02	2014-11-02 03:59:02
2007	4	439	A COMMENT	\N	2014-11-05 13:28:10	2014-11-05 13:28:10
2008	12	439	A COMMENT	\N	2014-11-09 19:39:40	2014-11-09 19:39:40
2009	33	439	A COMMENT	\N	2014-11-11 08:41:22	2014-11-11 08:41:22
2010	2	439	A COMMENT	\N	2014-11-11 13:40:51	2014-11-11 13:40:51
2011	29	439	A COMMENT	\N	2014-11-12 10:17:41	2014-11-12 10:17:41
2012	40	439	A COMMENT	\N	2014-11-12 19:18:47	2014-11-12 19:18:47
2013	9	439	A COMMENT	\N	2014-11-12 20:54:37	2014-11-12 20:54:37
2014	28	439	A COMMENT	\N	2014-11-17 00:56:22	2014-11-17 00:56:22
2015	33	439	A COMMENT	\N	2014-11-19 12:42:19	2014-11-19 12:42:19
2016	11	439	A COMMENT	\N	2014-11-19 21:05:22	2014-11-19 21:05:22
2017	22	439	A COMMENT	\N	2014-11-22 22:25:39	2014-11-22 22:25:39
2018	5	439	A COMMENT	\N	2014-11-25 17:52:12	2014-11-25 17:52:12
2019	41	440	A COMMENT	\N	2014-10-19 01:06:31	2014-10-19 01:06:31
2020	41	441	A COMMENT	\N	2014-10-20 22:04:16	2014-10-20 22:04:16
2021	33	442	A COMMENT	\N	2014-11-23 05:51:22	2014-11-23 05:51:22
2022	9	442	A COMMENT	\N	2014-11-26 19:21:07	2014-11-26 19:21:07
2023	41	443	A COMMENT	\N	2014-09-28 18:00:43	2014-09-28 18:00:43
2024	9	443	A COMMENT	\N	2014-09-29 04:14:32	2014-09-29 04:14:32
2025	3	443	A COMMENT	\N	2014-10-12 20:30:10	2014-10-12 20:30:10
2026	33	443	A COMMENT	\N	2014-10-16 14:47:20	2014-10-16 14:47:20
2027	9	443	A COMMENT	\N	2014-10-19 20:39:52	2014-10-19 20:39:52
2028	29	443	A COMMENT	\N	2014-10-21 20:49:26	2014-10-21 20:49:26
2029	2	443	A COMMENT	\N	2014-11-07 05:19:38	2014-11-07 05:19:38
2030	12	443	A COMMENT	\N	2014-11-15 05:42:50	2014-11-15 05:42:50
2031	29	443	A COMMENT	\N	2014-11-18 17:50:57	2014-11-18 17:50:57
2032	4	444	A COMMENT	\N	2014-08-26 00:28:38	2014-08-26 00:28:38
2033	48	444	A COMMENT	\N	2014-08-29 03:28:47	2014-08-29 03:28:47
2034	40	444	A COMMENT	\N	2014-09-14 08:00:46	2014-09-14 08:00:46
2035	31	444	A COMMENT	\N	2014-09-19 20:08:04	2014-09-19 20:08:04
2036	22	444	A COMMENT	\N	2014-10-15 03:33:50	2014-10-15 03:33:50
2037	41	445	A COMMENT	\N	2014-09-01 05:38:51	2014-09-01 05:38:51
2038	33	448	A COMMENT	\N	2014-09-16 03:21:37	2014-09-16 03:21:37
2039	28	448	A COMMENT	\N	2014-09-29 13:14:05	2014-09-29 13:14:05
2040	11	448	A COMMENT	\N	2014-10-24 07:07:49	2014-10-24 07:07:49
2041	22	448	A COMMENT	\N	2014-10-29 05:28:27	2014-10-29 05:28:27
2042	31	448	A COMMENT	\N	2014-11-03 16:37:38	2014-11-03 16:37:38
2043	4	448	A COMMENT	\N	2014-11-04 17:29:05	2014-11-04 17:29:05
2044	40	448	A COMMENT	\N	2014-11-05 02:37:09	2014-11-05 02:37:09
2045	44	448	A COMMENT	\N	2014-11-05 18:14:30	2014-11-05 18:14:30
2046	3	448	A COMMENT	\N	2014-11-10 15:43:32	2014-11-10 15:43:32
2047	31	448	A COMMENT	\N	2014-11-22 09:21:31	2014-11-22 09:21:31
2048	41	449	A COMMENT	\N	2014-10-10 15:56:24	2014-10-10 15:56:24
2049	15	449	A COMMENT	\N	2014-10-18 23:51:51	2014-10-18 23:51:51
2050	12	450	A COMMENT	\N	2014-10-02 02:53:15	2014-10-02 02:53:15
2051	15	450	A COMMENT	\N	2014-10-23 14:06:02	2014-10-23 14:06:02
2052	31	450	A COMMENT	\N	2014-11-10 20:27:05	2014-11-10 20:27:05
2053	15	450	A COMMENT	\N	2014-11-25 03:59:19	2014-11-25 03:59:19
2054	9	451	A COMMENT	\N	2014-11-02 11:28:30	2014-11-02 11:28:30
2055	22	452	A COMMENT	\N	2014-10-09 06:17:37	2014-10-09 06:17:37
2056	33	452	A COMMENT	\N	2014-11-01 07:30:52	2014-11-01 07:30:52
2057	28	452	A COMMENT	\N	2014-11-07 05:30:16	2014-11-07 05:30:16
2058	33	452	A COMMENT	\N	2014-11-14 20:48:59	2014-11-14 20:48:59
2059	41	454	A COMMENT	\N	2014-10-24 09:47:45	2014-10-24 09:47:45
2060	41	455	A COMMENT	\N	2014-09-19 09:30:52	2014-09-19 09:30:52
2061	41	456	A COMMENT	\N	2014-08-16 16:25:14	2014-08-16 16:25:14
2062	11	456	A COMMENT	\N	2014-08-17 05:05:52	2014-08-17 05:05:52
2063	46	456	A COMMENT	\N	2014-09-07 02:24:02	2014-09-07 02:24:02
2064	15	456	A COMMENT	\N	2014-09-13 07:04:48	2014-09-13 07:04:48
2065	22	456	A COMMENT	\N	2014-09-14 04:44:14	2014-09-14 04:44:14
2066	40	456	A COMMENT	\N	2014-10-01 20:41:01	2014-10-01 20:41:01
2067	4	457	A COMMENT	\N	2014-10-11 10:35:29	2014-10-11 10:35:29
2068	9	458	A COMMENT	\N	2014-08-27 22:22:01	2014-08-27 22:22:01
2069	31	458	A COMMENT	\N	2014-10-03 06:19:09	2014-10-03 06:19:09
2070	2	458	A COMMENT	\N	2014-10-08 02:43:32	2014-10-08 02:43:32
2071	5	458	A COMMENT	\N	2014-10-21 03:29:36	2014-10-21 03:29:36
2072	4	458	A COMMENT	\N	2014-11-03 21:06:25	2014-11-03 21:06:25
2073	9	459	A COMMENT	\N	2014-09-18 22:46:17	2014-09-18 22:46:17
2074	15	459	A COMMENT	\N	2014-10-04 21:55:06	2014-10-04 21:55:06
2075	3	459	A COMMENT	\N	2014-10-15 22:34:07	2014-10-15 22:34:07
2076	28	459	A COMMENT	\N	2014-10-18 00:38:44	2014-10-18 00:38:44
2077	22	459	A COMMENT	\N	2014-10-23 21:19:39	2014-10-23 21:19:39
2078	40	459	A COMMENT	\N	2014-10-28 19:32:21	2014-10-28 19:32:21
2079	4	460	A COMMENT	\N	2014-09-19 22:19:53	2014-09-19 22:19:53
2080	3	460	A COMMENT	\N	2014-09-27 11:02:51	2014-09-27 11:02:51
2081	33	460	A COMMENT	\N	2014-10-03 15:03:59	2014-10-03 15:03:59
2082	33	460	A COMMENT	\N	2014-10-08 22:04:18	2014-10-08 22:04:18
2083	40	460	A COMMENT	\N	2014-10-10 08:37:49	2014-10-10 08:37:49
2084	5	460	A COMMENT	\N	2014-10-14 14:48:52	2014-10-14 14:48:52
2085	48	460	A COMMENT	\N	2014-10-23 18:50:49	2014-10-23 18:50:49
2086	15	460	A COMMENT	\N	2014-10-25 13:11:16	2014-10-25 13:11:16
2087	41	461	A COMMENT	\N	2014-08-17 00:47:38	2014-08-17 00:47:38
2088	31	461	A COMMENT	\N	2014-10-09 02:54:23	2014-10-09 02:54:23
2089	11	462	A COMMENT	\N	2014-09-05 04:50:29	2014-09-05 04:50:29
2090	40	462	A COMMENT	\N	2014-09-22 06:01:53	2014-09-22 06:01:53
2091	38	462	A COMMENT	\N	2014-10-06 12:36:48	2014-10-06 12:36:48
2092	48	462	A COMMENT	\N	2014-10-20 10:03:19	2014-10-20 10:03:19
2093	44	462	A COMMENT	\N	2014-11-21 22:17:52	2014-11-21 22:17:52
2094	41	463	A COMMENT	\N	2014-11-01 16:17:22	2014-11-01 16:17:22
2095	11	464	A COMMENT	\N	2014-08-25 06:48:57	2014-08-25 06:48:57
2096	22	464	A COMMENT	\N	2014-09-03 02:25:40	2014-09-03 02:25:40
2097	3	464	A COMMENT	\N	2014-10-10 13:59:12	2014-10-10 13:59:12
2098	22	464	A COMMENT	\N	2014-10-21 15:53:32	2014-10-21 15:53:32
2099	38	464	A COMMENT	\N	2014-11-11 18:03:19	2014-11-11 18:03:19
2100	29	465	A COMMENT	\N	2014-08-26 08:13:59	2014-08-26 08:13:59
2101	12	465	A COMMENT	\N	2014-09-27 10:41:11	2014-09-27 10:41:11
2102	41	466	A COMMENT	\N	2014-09-04 14:29:12	2014-09-04 14:29:12
2103	22	466	A COMMENT	\N	2014-09-13 02:18:50	2014-09-13 02:18:50
2104	33	466	A COMMENT	\N	2014-10-01 00:50:24	2014-10-01 00:50:24
2105	33	466	A COMMENT	\N	2014-10-04 02:29:49	2014-10-04 02:29:49
2106	9	466	A COMMENT	\N	2014-10-15 00:18:45	2014-10-15 00:18:45
2107	4	466	A COMMENT	\N	2014-10-15 07:12:56	2014-10-15 07:12:56
2108	41	467	A COMMENT	\N	2014-09-17 17:20:11	2014-09-17 17:20:11
2109	48	468	A COMMENT	\N	2014-09-24 05:58:27	2014-09-24 05:58:27
2110	40	468	A COMMENT	\N	2014-09-26 13:39:10	2014-09-26 13:39:10
2111	48	468	A COMMENT	\N	2014-10-04 12:03:09	2014-10-04 12:03:09
2112	48	468	A COMMENT	\N	2014-10-11 17:02:22	2014-10-11 17:02:22
2113	44	468	A COMMENT	\N	2014-10-18 02:13:36	2014-10-18 02:13:36
2114	46	468	A COMMENT	\N	2014-10-20 10:02:00	2014-10-20 10:02:00
2115	44	468	A COMMENT	\N	2014-10-27 05:27:01	2014-10-27 05:27:01
2116	15	468	A COMMENT	\N	2014-11-01 15:40:08	2014-11-01 15:40:08
2117	15	468	A COMMENT	\N	2014-11-02 11:42:53	2014-11-02 11:42:53
2118	31	468	A COMMENT	\N	2014-11-02 19:54:01	2014-11-02 19:54:01
2119	40	468	A COMMENT	\N	2014-11-07 19:07:30	2014-11-07 19:07:30
2120	3	468	A COMMENT	\N	2014-11-11 03:14:49	2014-11-11 03:14:49
2121	2	468	A COMMENT	\N	2014-11-12 05:21:10	2014-11-12 05:21:10
2122	29	468	A COMMENT	\N	2014-11-13 01:10:52	2014-11-13 01:10:52
2123	22	468	A COMMENT	\N	2014-11-15 21:45:06	2014-11-15 21:45:06
2124	40	468	A COMMENT	\N	2014-11-21 16:11:47	2014-11-21 16:11:47
2125	5	468	A COMMENT	\N	2014-11-22 17:31:15	2014-11-22 17:31:15
2126	11	468	A COMMENT	\N	2014-11-24 07:32:50	2014-11-24 07:32:50
2127	4	468	A COMMENT	\N	2014-11-24 20:07:41	2014-11-24 20:07:41
2128	28	468	A COMMENT	\N	2014-11-25 21:19:17	2014-11-25 21:19:17
2129	31	469	A COMMENT	\N	2014-09-19 03:29:38	2014-09-19 03:29:38
2130	46	469	A COMMENT	\N	2014-10-28 18:42:24	2014-10-28 18:42:24
2131	5	469	A COMMENT	\N	2014-11-10 04:29:22	2014-11-10 04:29:22
2132	3	469	A COMMENT	\N	2014-11-14 11:37:16	2014-11-14 11:37:16
2133	15	469	A COMMENT	\N	2014-11-27 08:00:48	2014-11-27 08:00:48
2134	41	470	A COMMENT	\N	2014-09-08 12:12:04	2014-09-08 12:12:04
2135	46	471	A COMMENT	\N	2014-11-08 17:18:55	2014-11-08 17:18:55
2136	22	471	A COMMENT	\N	2014-11-21 04:33:07	2014-11-21 04:33:07
2137	9	472	A COMMENT	\N	2014-10-06 14:08:17	2014-10-06 14:08:17
2138	9	472	A COMMENT	\N	2014-10-23 11:18:47	2014-10-23 11:18:47
2139	5	472	A COMMENT	\N	2014-11-05 01:03:44	2014-11-05 01:03:44
2140	5	472	A COMMENT	\N	2014-11-07 00:03:35	2014-11-07 00:03:35
2141	46	472	A COMMENT	\N	2014-11-17 12:31:23	2014-11-17 12:31:23
2142	41	473	A COMMENT	\N	2014-09-27 00:24:54	2014-09-27 00:24:54
2143	5	473	A COMMENT	\N	2014-09-30 18:28:30	2014-09-30 18:28:30
2144	40	473	A COMMENT	\N	2014-10-06 06:24:52	2014-10-06 06:24:52
2145	46	473	A COMMENT	\N	2014-10-19 07:26:51	2014-10-19 07:26:51
2146	15	473	A COMMENT	\N	2014-10-21 19:01:47	2014-10-21 19:01:47
2147	44	473	A COMMENT	\N	2014-10-27 06:43:27	2014-10-27 06:43:27
2148	46	473	A COMMENT	\N	2014-10-28 11:19:47	2014-10-28 11:19:47
2149	4	473	A COMMENT	\N	2014-11-11 10:47:54	2014-11-11 10:47:54
2150	12	473	A COMMENT	\N	2014-11-12 00:59:46	2014-11-12 00:59:46
2151	40	473	A COMMENT	\N	2014-11-27 07:24:25	2014-11-27 07:24:25
2152	15	475	A COMMENT	\N	2014-08-21 22:51:02	2014-08-21 22:51:02
2153	11	475	A COMMENT	\N	2014-09-28 02:47:52	2014-09-28 02:47:52
2154	5	476	A COMMENT	\N	2014-08-08 10:31:18	2014-08-08 10:31:18
2155	4	476	A COMMENT	\N	2014-08-28 12:46:26	2014-08-28 12:46:26
2156	3	476	A COMMENT	\N	2014-09-14 14:19:25	2014-09-14 14:19:25
2157	15	476	A COMMENT	\N	2014-09-27 00:54:35	2014-09-27 00:54:35
2158	22	476	A COMMENT	\N	2014-11-03 14:33:57	2014-11-03 14:33:57
2159	33	478	A COMMENT	\N	2014-09-17 08:58:09	2014-09-17 08:58:09
2160	31	478	A COMMENT	\N	2014-10-01 22:29:58	2014-10-01 22:29:58
2161	46	478	A COMMENT	\N	2014-10-07 16:50:00	2014-10-07 16:50:00
2162	9	478	A COMMENT	\N	2014-10-08 01:44:44	2014-10-08 01:44:44
2163	3	478	A COMMENT	\N	2014-10-09 13:40:15	2014-10-09 13:40:15
2164	29	478	A COMMENT	\N	2014-10-18 12:34:30	2014-10-18 12:34:30
2165	44	478	A COMMENT	\N	2014-10-20 22:01:40	2014-10-20 22:01:40
2166	15	478	A COMMENT	\N	2014-11-14 02:11:56	2014-11-14 02:11:56
2167	29	478	A COMMENT	\N	2014-11-27 00:52:06	2014-11-27 00:52:06
2168	33	478	A COMMENT	\N	2014-11-27 20:10:24	2014-11-27 20:10:24
2169	9	479	A COMMENT	\N	2014-11-02 16:42:17	2014-11-02 16:42:17
2170	3	479	A COMMENT	\N	2014-11-05 14:58:34	2014-11-05 14:58:34
2171	5	479	A COMMENT	\N	2014-11-05 22:02:40	2014-11-05 22:02:40
2172	11	479	A COMMENT	\N	2014-11-22 11:44:50	2014-11-22 11:44:50
2173	46	479	A COMMENT	\N	2014-11-25 12:33:30	2014-11-25 12:33:30
2174	22	481	A COMMENT	\N	2014-09-15 17:26:53	2014-09-15 17:26:53
2175	46	481	A COMMENT	\N	2014-10-01 10:58:36	2014-10-01 10:58:36
2176	11	481	A COMMENT	\N	2014-11-23 14:41:25	2014-11-23 14:41:25
2177	3	482	A COMMENT	\N	2014-05-24 07:39:58	2014-05-24 07:39:58
2178	5	482	A COMMENT	\N	2014-07-04 13:39:05	2014-07-04 13:39:05
2179	5	482	A COMMENT	\N	2014-07-09 12:37:27	2014-07-09 12:37:27
2180	9	482	A COMMENT	\N	2014-09-30 11:30:46	2014-09-30 11:30:46
2181	4	482	A COMMENT	\N	2014-11-03 04:01:32	2014-11-03 04:01:32
2182	16	484	A COMMENT	\N	2014-07-22 13:18:40	2014-07-22 13:18:40
2183	4	484	A COMMENT	\N	2014-09-02 20:31:30	2014-09-02 20:31:30
2184	4	484	A COMMENT	\N	2014-11-22 11:45:27	2014-11-22 11:45:27
2185	9	485	A COMMENT	\N	2014-10-07 03:35:10	2014-10-07 03:35:10
2186	33	485	A COMMENT	\N	2014-10-15 06:14:51	2014-10-15 06:14:51
2187	40	485	A COMMENT	\N	2014-11-09 17:14:45	2014-11-09 17:14:45
2188	5	485	A COMMENT	\N	2014-11-24 11:44:36	2014-11-24 11:44:36
2189	16	487	A COMMENT	\N	2014-07-05 05:31:44	2014-07-05 05:31:44
2190	5	487	A COMMENT	\N	2014-07-05 11:08:13	2014-07-05 11:08:13
2191	33	487	A COMMENT	\N	2014-07-31 04:04:36	2014-07-31 04:04:36
2192	29	487	A COMMENT	\N	2014-08-14 11:33:58	2014-08-14 11:33:58
2193	46	487	A COMMENT	\N	2014-08-19 02:37:58	2014-08-19 02:37:58
2194	28	487	A COMMENT	\N	2014-08-31 05:09:15	2014-08-31 05:09:15
2195	31	487	A COMMENT	\N	2014-09-01 18:55:32	2014-09-01 18:55:32
2196	33	487	A COMMENT	\N	2014-09-05 08:28:43	2014-09-05 08:28:43
2197	28	487	A COMMENT	\N	2014-10-18 09:43:20	2014-10-18 09:43:20
2198	16	488	A COMMENT	\N	2014-06-26 13:54:17	2014-06-26 13:54:17
2199	44	488	A COMMENT	\N	2014-07-26 07:50:41	2014-07-26 07:50:41
2200	40	488	A COMMENT	\N	2014-09-02 02:11:44	2014-09-02 02:11:44
2201	46	488	A COMMENT	\N	2014-09-10 11:31:16	2014-09-10 11:31:16
2202	16	489	A COMMENT	\N	2014-04-24 14:11:39	2014-04-24 14:11:39
2203	29	489	A COMMENT	\N	2014-05-24 13:52:45	2014-05-24 13:52:45
2204	22	489	A COMMENT	\N	2014-08-09 19:55:38	2014-08-09 19:55:38
2205	3	489	A COMMENT	\N	2014-08-22 02:42:55	2014-08-22 02:42:55
2206	28	489	A COMMENT	\N	2014-10-15 02:54:44	2014-10-15 02:54:44
2207	2	490	A COMMENT	\N	2014-08-31 22:49:29	2014-08-31 22:49:29
2208	38	490	A COMMENT	\N	2014-09-13 07:29:10	2014-09-13 07:29:10
2209	40	490	A COMMENT	\N	2014-10-26 16:19:41	2014-10-26 16:19:41
2210	9	490	A COMMENT	\N	2014-11-25 02:08:56	2014-11-25 02:08:56
2211	48	490	A COMMENT	\N	2014-11-27 11:33:44	2014-11-27 11:33:44
2212	11	492	A COMMENT	\N	2014-04-15 03:28:54	2014-04-15 03:28:54
2213	3	492	A COMMENT	\N	2014-06-04 11:13:49	2014-06-04 11:13:49
2214	29	492	A COMMENT	\N	2014-06-25 05:47:37	2014-06-25 05:47:37
2215	2	492	A COMMENT	\N	2014-10-15 00:26:33	2014-10-15 00:26:33
2216	31	493	A COMMENT	\N	2014-07-03 03:36:56	2014-07-03 03:36:56
2217	15	493	A COMMENT	\N	2014-07-21 16:46:18	2014-07-21 16:46:18
2218	46	493	A COMMENT	\N	2014-07-27 07:45:45	2014-07-27 07:45:45
2219	22	493	A COMMENT	\N	2014-08-11 14:16:25	2014-08-11 14:16:25
2220	9	493	A COMMENT	\N	2014-08-24 08:19:28	2014-08-24 08:19:28
2221	38	493	A COMMENT	\N	2014-08-31 16:30:36	2014-08-31 16:30:36
2222	4	493	A COMMENT	\N	2014-09-08 20:41:00	2014-09-08 20:41:00
2223	4	493	A COMMENT	\N	2014-09-30 10:50:05	2014-09-30 10:50:05
2224	2	493	A COMMENT	\N	2014-10-13 05:56:16	2014-10-13 05:56:16
2225	44	493	A COMMENT	\N	2014-10-20 03:35:24	2014-10-20 03:35:24
2226	11	493	A COMMENT	\N	2014-11-01 20:47:16	2014-11-01 20:47:16
2227	4	493	A COMMENT	\N	2014-11-04 03:06:03	2014-11-04 03:06:03
2228	5	494	A COMMENT	\N	2014-10-01 05:25:10	2014-10-01 05:25:10
2229	15	494	A COMMENT	\N	2014-10-14 02:04:52	2014-10-14 02:04:52
2230	11	494	A COMMENT	\N	2014-10-23 09:10:26	2014-10-23 09:10:26
2231	11	494	A COMMENT	\N	2014-10-29 15:24:53	2014-10-29 15:24:53
2232	29	495	A COMMENT	\N	2014-10-24 10:39:42	2014-10-24 10:39:42
2233	29	496	A COMMENT	\N	2014-07-24 23:52:14	2014-07-24 23:52:14
2234	5	496	A COMMENT	\N	2014-08-29 19:16:59	2014-08-29 19:16:59
2235	22	496	A COMMENT	\N	2014-10-19 17:02:31	2014-10-19 17:02:31
2236	15	496	A COMMENT	\N	2014-10-20 04:08:18	2014-10-20 04:08:18
2237	15	496	A COMMENT	\N	2014-11-12 03:26:19	2014-11-12 03:26:19
2238	18	499	A COMMENT	\N	2014-09-27 21:55:08	2014-09-27 21:55:08
2239	18	500	A COMMENT	\N	2014-07-25 00:00:53	2014-07-25 00:00:53
2240	18	503	A COMMENT	\N	2014-07-23 10:29:03	2014-07-23 10:29:03
2241	18	504	A COMMENT	\N	2014-07-09 13:53:02	2014-07-09 13:53:02
2242	18	507	A COMMENT	\N	2014-06-21 02:35:21	2014-06-21 02:35:21
2243	18	509	A COMMENT	\N	2014-08-07 11:09:02	2014-08-07 11:09:02
2244	18	510	A COMMENT	\N	2014-08-07 13:48:19	2014-08-07 13:48:19
2245	18	514	A COMMENT	\N	2014-09-19 19:14:06	2014-09-19 19:14:06
2246	18	522	A COMMENT	\N	2014-07-19 13:34:15	2014-07-19 13:34:15
2247	18	523	A COMMENT	\N	2014-08-19 21:12:57	2014-08-19 21:12:57
2248	18	532	A COMMENT	\N	2014-09-14 21:46:46	2014-09-14 21:46:46
2249	18	533	A COMMENT	\N	2014-09-18 20:22:04	2014-09-18 20:22:04
2250	18	537	A COMMENT	\N	2014-10-11 17:15:12	2014-10-11 17:15:12
2251	24	542	A COMMENT	\N	2014-06-19 16:34:09	2014-06-19 16:34:09
2252	42	547	A COMMENT	\N	2014-11-14 00:14:05	2014-11-14 00:14:05
2253	42	550	A COMMENT	\N	2014-11-03 15:05:11	2014-11-03 15:05:11
2254	45	566	A COMMENT	\N	2014-10-27 03:54:56	2014-10-27 03:54:56
2255	45	567	A COMMENT	\N	2014-11-11 12:21:56	2014-11-11 12:21:56
2256	45	568	A COMMENT	\N	2014-11-21 08:38:29	2014-11-21 08:38:29
2257	45	572	A COMMENT	\N	2014-10-28 02:32:29	2014-10-28 02:32:29
2258	45	574	A COMMENT	\N	2014-10-19 11:22:25	2014-10-19 11:22:25
2259	45	575	A COMMENT	\N	2014-10-30 02:29:36	2014-10-30 02:29:36
2260	45	578	A COMMENT	\N	2014-11-01 01:52:38	2014-11-01 01:52:38
2261	45	582	A COMMENT	\N	2014-11-01 11:53:54	2014-11-01 11:53:54
2262	49	145	A COMMENT	\N	2014-08-22 11:16:46	2014-08-22 11:16:46
2263	26	450	A COMMENT	\N	2014-10-02 01:02:40	2014-10-02 01:02:40
2264	7	565	A COMMENT	\N	2014-11-21 07:53:03	2014-11-21 07:53:03
2265	23	504	A COMMENT	\N	2014-07-17 14:54:20	2014-07-17 14:54:20
2266	17	266	A COMMENT	\N	2014-11-28 06:37:22.134642	2014-11-28 06:37:22.134642
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 2266, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	6	joined	\N	\N	\N
7	6	fetched	2014-07-31 07:30:03.160579	2014-07-31 07:30:03.160579	2014-07-31 07:30:03.160579
8	7	joined	\N	\N	\N
9	7	fetched	2014-09-19 11:53:02.163186	2014-09-19 11:53:02.163186	2014-09-19 11:53:02.163186
10	8	joined	\N	\N	\N
11	9	joined	\N	\N	\N
12	9	fetched	2014-05-28 22:34:05.167372	2014-05-28 22:34:05.167372	2014-05-28 22:34:05.167372
13	10	joined	\N	\N	\N
14	11	joined	\N	\N	\N
15	11	fetched	2014-05-09 04:30:19.173448	2014-05-09 04:30:19.173448	2014-05-09 04:30:19.173448
16	12	joined	\N	\N	\N
17	12	fetched	2014-05-30 01:58:42.177399	2014-05-30 01:58:42.177399	2014-05-30 01:58:42.177399
18	13	joined	\N	\N	\N
19	14	joined	\N	\N	\N
20	14	fetched	2014-06-20 04:43:29.183024	2014-06-20 04:43:29.183024	2014-06-20 04:43:29.183024
21	15	joined	\N	\N	\N
22	15	fetched	2014-08-18 12:18:51.185698	2014-08-18 12:18:51.185698	2014-08-18 12:18:51.185698
23	16	joined	\N	\N	\N
24	16	fetched	2014-03-06 09:24:09.188287	2014-03-06 09:24:09.188287	2014-03-06 09:24:09.188287
25	17	joined	\N	\N	\N
26	17	fetched	2014-11-01 00:10:30.191263	2014-11-01 00:10:30.191263	2014-11-01 00:10:30.191263
27	18	joined	\N	\N	\N
28	18	fetched	2014-06-12 20:18:41.193969	2014-06-12 20:18:41.193969	2014-06-12 20:18:41.193969
29	19	joined	\N	\N	\N
30	19	fetched	2014-07-30 00:49:08.196783	2014-07-30 00:49:08.196783	2014-07-30 00:49:08.196783
31	20	joined	\N	\N	\N
32	20	fetched	2014-11-25 22:35:47.19941	2014-11-25 22:35:47.19941	2014-11-25 22:35:47.19941
33	21	joined	\N	\N	\N
34	21	fetched	2014-10-05 15:39:27.202243	2014-10-05 15:39:27.202243	2014-10-05 15:39:27.202243
35	22	joined	\N	\N	\N
36	22	fetched	2014-09-26 09:39:20.205491	2014-09-26 09:39:20.205491	2014-09-26 09:39:20.205491
37	23	joined	\N	\N	\N
38	23	fetched	2014-07-02 22:15:21.208759	2014-07-02 22:15:21.208759	2014-07-02 22:15:21.208759
39	24	joined	\N	\N	\N
40	24	fetched	2014-03-17 16:34:33.211833	2014-03-17 16:34:33.211833	2014-03-17 16:34:33.211833
41	25	joined	\N	\N	\N
42	25	fetched	2014-09-13 06:14:49.214714	2014-09-13 06:14:49.214714	2014-09-13 06:14:49.214714
43	26	joined	\N	\N	\N
44	26	fetched	2014-09-11 16:37:23.217381	2014-09-11 16:37:23.217381	2014-09-11 16:37:23.217381
45	27	joined	\N	\N	\N
46	27	fetched	2014-09-22 11:10:12.220577	2014-09-22 11:10:12.220577	2014-09-22 11:10:12.220577
47	28	joined	\N	\N	\N
48	28	fetched	2014-10-24 05:35:17.223321	2014-10-24 05:35:17.223321	2014-10-24 05:35:17.223321
49	29	joined	\N	\N	\N
50	29	fetched	2014-03-24 01:06:31.226118	2014-03-24 01:06:31.226118	2014-03-24 01:06:31.226118
51	30	joined	\N	\N	\N
52	30	fetched	2014-05-19 07:16:55.228806	2014-05-19 07:16:55.228806	2014-05-19 07:16:55.228806
53	31	joined	\N	\N	\N
54	31	fetched	2014-04-01 15:45:47.231341	2014-04-01 15:45:47.231341	2014-04-01 15:45:47.231341
55	32	joined	\N	\N	\N
56	32	fetched	2014-08-23 08:50:06.233944	2014-08-23 08:50:06.233944	2014-08-23 08:50:06.233944
57	33	joined	\N	\N	\N
58	33	fetched	2014-06-20 04:00:28.236465	2014-06-20 04:00:28.236465	2014-06-20 04:00:28.236465
59	34	joined	\N	\N	\N
60	34	fetched	2014-08-11 08:35:17.239431	2014-08-11 08:35:17.239431	2014-08-11 08:35:17.239431
61	35	joined	\N	\N	\N
62	35	fetched	2014-11-26 23:52:56.242105	2014-11-26 23:52:56.242105	2014-11-26 23:52:56.242105
63	36	joined	\N	\N	\N
64	36	fetched	2014-03-04 02:20:49.244716	2014-03-04 02:20:49.244716	2014-03-04 02:20:49.244716
65	37	joined	\N	\N	\N
66	37	fetched	2014-04-25 18:07:15.247347	2014-04-25 18:07:15.247347	2014-04-25 18:07:15.247347
67	38	joined	\N	\N	\N
68	38	fetched	2014-03-09 12:42:52.249912	2014-03-09 12:42:52.249912	2014-03-09 12:42:52.249912
69	39	joined	\N	\N	\N
70	40	joined	\N	\N	\N
71	40	fetched	2014-03-16 13:26:48.254396	2014-03-16 13:26:48.254396	2014-03-16 13:26:48.254396
72	41	joined	\N	\N	\N
73	41	fetched	2014-08-16 11:20:36.257156	2014-08-16 11:20:36.257156	2014-08-16 11:20:36.257156
74	42	joined	\N	\N	\N
75	42	fetched	2014-10-20 03:28:53.259912	2014-10-20 03:28:53.259912	2014-10-20 03:28:53.259912
76	43	joined	\N	\N	\N
77	43	fetched	2014-10-16 10:16:28.262631	2014-10-16 10:16:28.262631	2014-10-16 10:16:28.262631
78	44	joined	\N	\N	\N
79	44	fetched	2014-07-26 03:51:42.265299	2014-07-26 03:51:42.265299	2014-07-26 03:51:42.265299
80	45	joined	\N	\N	\N
81	45	fetched	2014-10-17 21:17:48.267902	2014-10-17 21:17:48.267902	2014-10-17 21:17:48.267902
82	46	joined	\N	\N	\N
83	46	fetched	2014-08-25 23:40:41.270585	2014-08-25 23:40:41.270585	2014-08-25 23:40:41.270585
84	47	joined	\N	\N	\N
85	48	joined	\N	\N	\N
86	48	fetched	2014-11-22 11:23:08.275451	2014-11-22 11:23:08.275451	2014-11-22 11:23:08.275451
87	49	joined	\N	\N	\N
88	49	fetched	2014-06-30 15:19:50.278864	2014-06-30 15:19:50.278864	2014-06-30 15:19:50.278864
89	9	submitted	2014-08-14 21:50:32	2014-08-14 21:50:32	2014-08-14 21:50:32
90	9	received_feedback	2014-08-16 12:06:58	2014-08-16 12:06:58	2014-08-16 12:06:58
91	11	commented	2014-08-16 12:06:58	2014-08-16 12:06:58	2014-08-16 12:06:58
92	28	commented	2014-08-24 22:24:12	2014-08-24 22:24:12	2014-08-24 22:24:12
93	29	commented	2014-08-25 19:30:03	2014-08-25 19:30:03	2014-08-25 19:30:03
94	22	commented	2014-09-05 22:29:37	2014-09-05 22:29:37	2014-09-05 22:29:37
95	5	commented	2014-09-07 22:30:19	2014-09-07 22:30:19	2014-09-07 22:30:19
96	2	commented	2014-09-08 02:04:04	2014-09-08 02:04:04	2014-09-08 02:04:04
97	11	submitted	2014-06-18 17:24:18	2014-06-18 17:24:18	2014-06-18 17:24:18
98	11	received_feedback	2014-09-10 02:26:23	2014-09-10 02:26:23	2014-09-10 02:26:23
99	48	commented	2014-09-10 14:39:17	2014-09-10 14:39:17	2014-09-10 14:39:17
100	46	commented	2014-09-11 02:20:10	2014-09-11 02:20:10	2014-09-11 02:20:10
101	12	commented	2014-09-19 16:03:08	2014-09-19 16:03:08	2014-09-19 16:03:08
102	38	commented	2014-11-19 14:26:23	2014-11-19 14:26:23	2014-11-19 14:26:23
103	44	commented	2014-08-04 08:04:46	2014-08-04 08:04:46	2014-08-04 08:04:46
104	9	commented	2014-08-25 02:44:42	2014-08-25 02:44:42	2014-08-25 02:44:42
105	31	commented	2014-09-07 11:36:02	2014-09-07 11:36:02	2014-09-07 11:36:02
106	33	commented	2014-09-18 08:13:31	2014-09-18 08:13:31	2014-09-18 08:13:31
107	15	commented	2014-10-03 06:34:35	2014-10-03 06:34:35	2014-10-03 06:34:35
108	3	commented	2014-10-30 06:30:33	2014-10-30 06:30:33	2014-10-30 06:30:33
109	11	completed	2014-09-29 20:09:02	2014-09-29 20:09:02	2014-09-29 20:09:02
110	4	commented	2014-10-28 16:07:20	2014-10-28 16:07:20	2014-10-28 16:07:20
111	40	commented	2014-11-17 18:18:50	2014-11-17 18:18:50	2014-11-17 18:18:50
112	12	submitted	2014-06-04 06:37:50	2014-06-04 06:37:50	2014-06-04 06:37:50
113	12	received_feedback	2014-09-25 22:23:41	2014-09-25 22:23:41	2014-09-25 22:23:41
114	29	onboarded	2014-09-20 00:25:21	2014-09-20 00:25:21	2014-09-20 00:25:21
115	15	submitted	2014-08-26 05:39:57	2014-08-26 05:39:57	2014-08-26 05:39:57
116	15	received_feedback	2014-08-30 05:00:31	2014-08-30 05:00:31	2014-08-30 05:00:31
117	33	onboarded	2014-09-25 22:23:41	2014-09-25 22:23:41	2014-09-25 22:23:41
118	44	onboarded	2014-11-18 18:35:42	2014-11-18 18:35:42	2014-11-18 18:35:42
119	22	onboarded	2014-09-20 17:37:05	2014-09-20 17:37:05	2014-09-20 17:37:05
120	46	onboarded	2014-11-07 07:00:00	2014-11-07 07:00:00	2014-11-07 07:00:00
121	4	onboarded	2014-11-26 13:59:47	2014-11-26 13:59:47	2014-11-26 13:59:47
122	5	onboarded	2014-11-08 22:33:32	2014-11-08 22:33:32	2014-11-08 22:33:32
123	28	onboarded	2014-10-19 07:08:41	2014-10-19 07:08:41	2014-10-19 07:08:41
124	15	completed	2014-09-01 09:36:29	2014-09-01 09:36:29	2014-09-01 09:36:29
125	22	submitted	2014-10-03 16:24:21	2014-10-03 16:24:21	2014-10-03 16:24:21
126	22	received_feedback	2014-10-12 00:00:35	2014-10-12 00:00:35	2014-10-12 00:00:35
127	9	onboarded	2014-11-12 23:17:15	2014-11-12 23:17:15	2014-11-12 23:17:15
128	3	onboarded	2014-11-07 09:35:35	2014-11-07 09:35:35	2014-11-07 09:35:35
129	40	onboarded	2014-11-23 04:46:48	2014-11-23 04:46:48	2014-11-23 04:46:48
130	11	onboarded	2014-11-23 22:38:15	2014-11-23 22:38:15	2014-11-23 22:38:15
131	31	onboarded	2014-11-25 08:29:22	2014-11-25 08:29:22	2014-11-25 08:29:22
132	22	completed	2014-10-05 08:48:14	2014-10-05 08:48:14	2014-10-05 08:48:14
133	2	onboarded	2014-10-14 18:25:03	2014-10-14 18:25:03	2014-10-14 18:25:03
134	48	onboarded	2014-11-03 02:38:00	2014-11-03 02:38:00	2014-11-03 02:38:00
135	38	onboarded	2014-11-23 01:35:54	2014-11-23 01:35:54	2014-11-23 01:35:54
136	15	onboarded	2014-10-10 03:24:38	2014-10-10 03:24:38	2014-10-10 03:24:38
137	12	onboarded	2014-10-25 23:27:18	2014-10-25 23:27:18	2014-10-25 23:27:18
138	28	submitted	2014-11-08 21:54:32	2014-11-08 21:54:32	2014-11-08 21:54:32
139	28	received_feedback	2014-11-12 23:16:05	2014-11-12 23:16:05	2014-11-12 23:16:05
140	28	completed	2014-11-10 18:32:32	2014-11-10 18:32:32	2014-11-10 18:32:32
141	29	submitted	2014-07-18 02:26:27	2014-07-18 02:26:27	2014-07-18 02:26:27
142	29	received_feedback	2014-06-01 04:32:53	2014-06-01 04:32:53	2014-06-01 04:32:53
143	29	completed	2014-06-14 02:42:19	2014-06-14 02:42:19	2014-06-14 02:42:19
144	31	submitted	2014-07-29 08:40:10	2014-07-29 08:40:10	2014-07-29 08:40:10
145	31	received_feedback	2014-08-22 14:55:54	2014-08-22 14:55:54	2014-08-22 14:55:54
146	31	completed	2014-08-26 20:27:47	2014-08-26 20:27:47	2014-08-26 20:27:47
147	33	submitted	2014-08-08 06:58:26	2014-08-08 06:58:26	2014-08-08 06:58:26
148	33	completed	2014-09-23 21:08:44	2014-09-23 21:08:44	2014-09-23 21:08:44
149	33	received_feedback	2014-07-26 00:13:21	2014-07-26 00:13:21	2014-07-26 00:13:21
150	38	submitted	2014-07-24 02:49:06	2014-07-24 02:49:06	2014-07-24 02:49:06
151	38	received_feedback	2014-08-17 14:27:46	2014-08-17 14:27:46	2014-08-17 14:27:46
152	38	completed	2014-05-05 03:05:14	2014-05-05 03:05:14	2014-05-05 03:05:14
153	40	submitted	2014-03-17 06:39:56	2014-03-17 06:39:56	2014-03-17 06:39:56
154	40	received_feedback	2014-08-29 11:49:18	2014-08-29 11:49:18	2014-08-29 11:49:18
155	40	completed	2014-03-18 01:03:14	2014-03-18 01:03:14	2014-03-18 01:03:14
156	44	submitted	2014-08-11 17:48:55	2014-08-11 17:48:55	2014-08-11 17:48:55
157	44	completed	2014-08-17 15:20:45	2014-08-17 15:20:45	2014-08-17 15:20:45
158	46	submitted	2014-09-08 18:50:20	2014-09-08 18:50:20	2014-09-08 18:50:20
159	46	received_feedback	2014-09-24 09:10:36	2014-09-24 09:10:36	2014-09-24 09:10:36
160	46	completed	2014-09-17 14:44:57	2014-09-17 14:44:57	2014-09-17 14:44:57
161	48	submitted	2014-11-26 16:25:38	2014-11-26 16:25:38	2014-11-26 16:25:38
162	48	completed	2014-11-28 06:37:15.114526	2014-11-28 06:37:15.114526	2014-11-28 06:37:15.114526
163	48	received_feedback	2014-11-22 23:52:51	2014-11-22 23:52:51	2014-11-22 23:52:51
164	49	submitted	2014-07-10 13:46:39	2014-07-10 13:46:39	2014-07-10 13:46:39
165	49	received_feedback	2014-08-08 06:54:33	2014-08-08 06:54:33	2014-08-08 06:54:33
166	26	submitted	2014-09-27 21:41:28	2014-09-27 21:41:28	2014-09-27 21:41:28
167	26	received_feedback	2014-10-06 23:37:28	2014-10-06 23:37:28	2014-10-06 23:37:28
168	7	submitted	2014-09-29 06:46:15	2014-09-29 06:46:15	2014-09-29 06:46:15
169	7	received_feedback	2014-10-24 06:20:25	2014-10-24 06:20:25	2014-10-24 06:20:25
170	23	submitted	2014-07-26 02:37:41	2014-07-26 02:37:41	2014-07-26 02:37:41
171	23	received_feedback	2014-11-08 18:47:38	2014-11-08 18:47:38	2014-11-08 18:47:38
172	17	submitted	2014-11-04 11:02:44	2014-11-04 11:02:44	2014-11-04 11:02:44
173	17	received_feedback	2014-11-19 11:34:18	2014-11-19 11:34:18	2014-11-19 11:34:18
174	20	submitted	2014-11-26 02:37:54	2014-11-26 02:37:54	2014-11-26 02:37:54
175	20	received_feedback	2014-11-26 14:45:28	2014-11-26 14:45:28	2014-11-26 14:45:28
176	20	completed	2014-11-28 06:37:18.865614	2014-11-28 06:37:18.865614	2014-11-28 06:37:18.865614
177	21	submitted	2014-10-06 23:47:39	2014-10-06 23:47:39	2014-10-06 23:47:39
178	21	completed	2014-10-14 18:40:04	2014-10-14 18:40:04	2014-10-14 18:40:04
179	36	submitted	2014-10-18 09:50:37	2014-10-18 09:50:37	2014-10-18 09:50:37
180	36	completed	2014-10-25 17:42:36	2014-10-25 17:42:36	2014-10-25 17:42:36
181	30	submitted	2014-05-23 02:15:14	2014-05-23 02:15:14	2014-05-23 02:15:14
182	30	received_feedback	2014-06-22 07:53:26	2014-06-22 07:53:26	2014-06-22 07:53:26
183	30	completed	2014-06-19 06:48:43	2014-06-19 06:48:43	2014-06-19 06:48:43
184	35	submitted	2014-11-27 13:37:05	2014-11-27 13:37:05	2014-11-27 13:37:05
185	35	received_feedback	2014-11-27 16:52:32	2014-11-27 16:52:32	2014-11-27 16:52:32
186	35	completed	2014-11-28 06:37:19.335693	2014-11-28 06:37:19.335693	2014-11-28 06:37:19.335693
187	14	submitted	2014-07-01 04:23:47	2014-07-01 04:23:47	2014-07-01 04:23:47
188	14	received_feedback	2014-08-14 01:46:44	2014-08-14 01:46:44	2014-08-14 01:46:44
189	41	submitted	2014-09-01 17:32:58	2014-09-01 17:32:58	2014-09-01 17:32:58
190	41	received_feedback	2014-09-04 13:05:46	2014-09-04 13:05:46	2014-09-04 13:05:46
191	6	submitted	2014-08-08 00:15:58	2014-08-08 00:15:58	2014-08-08 00:15:58
192	6	received_feedback	2014-08-08 10:31:18	2014-08-08 10:31:18	2014-08-08 10:31:18
193	34	submitted	2014-09-07 23:13:24	2014-09-07 23:13:24	2014-09-07 23:13:24
194	16	submitted	2014-05-18 05:00:23	2014-05-18 05:00:23	2014-05-18 05:00:23
195	16	received_feedback	2014-09-15 17:26:53	2014-09-15 17:26:53	2014-09-15 17:26:53
196	18	submitted	2014-09-07 12:23:36	2014-09-07 12:23:36	2014-09-07 12:23:36
197	24	submitted	2014-03-29 19:47:33	2014-03-29 19:47:33	2014-03-29 19:47:33
198	42	submitted	2014-11-04 02:08:35	2014-11-04 02:08:35	2014-11-04 02:08:35
199	27	submitted	2014-10-14 21:54:18	2014-10-14 21:54:18	2014-10-14 21:54:18
200	45	submitted	2014-11-08 14:39:54	2014-11-08 14:39:54	2014-11-08 14:39:54
201	49	commented	2014-08-22 11:16:46	2014-08-22 11:16:46	2014-08-22 11:16:46
202	26	commented	2014-10-02 01:02:40	2014-10-02 01:02:40	2014-10-02 01:02:40
203	45	received_feedback	2014-11-21 07:53:03	2014-11-21 07:53:03	2014-11-21 07:53:03
204	7	commented	2014-11-21 07:53:03	2014-11-21 07:53:03	2014-11-21 07:53:03
205	18	received_feedback	2014-07-17 14:54:20	2014-07-17 14:54:20	2014-07-17 14:54:20
206	23	commented	2014-07-17 14:54:20	2014-07-17 14:54:20	2014-07-17 14:54:20
207	17	commented	2014-11-28 06:37:22.134642	2014-11-28 06:37:22.134642	2014-11-28 06:37:22.134642
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 207, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	3	167	code	f	1	2014-05-27 07:06:22	2014-05-27 07:06:22	Submission	29
2	3	172	code	f	1	2014-06-13 23:25:56	2014-06-13 23:25:56	Submission	31
3	4	172	code	f	1	2014-06-13 23:25:56	2014-06-13 23:25:56	Submission	31
4	2	174	code	f	1	2014-05-17 11:32:53	2014-05-17 11:32:53	Submission	31
5	4	174	code	f	1	2014-05-17 11:32:53	2014-05-17 11:32:53	Submission	31
6	4	178	code	f	1	2014-10-11 08:13:40	2014-10-11 08:13:40	Submission	33
7	2	180	code	f	1	2014-07-24 02:49:06	2014-07-24 02:49:06	Submission	38
8	2	185	code	f	1	2014-04-08 13:35:18	2014-04-08 13:35:18	Submission	38
9	2	187	code	f	1	2014-07-27 03:57:48	2014-07-27 03:57:48	Submission	38
10	40	188	code	f	1	2014-09-11 17:22:55	2014-09-11 17:22:55	Submission	38
11	4	194	code	f	1	2014-08-05 10:24:40	2014-08-05 10:24:40	Submission	40
12	29	195	code	f	1	2014-08-02 14:44:34	2014-08-02 14:44:34	Submission	40
13	4	200	code	f	1	2014-06-01 08:59:07	2014-06-01 08:59:07	Submission	40
14	4	201	code	f	1	2014-03-21 00:36:45	2014-03-21 00:36:45	Submission	40
15	30	395	code	f	1	2014-11-26 02:37:54	2014-11-26 02:37:54	Submission	20
16	2	395	code	f	1	2014-11-26 02:37:54	2014-11-26 02:37:54	Submission	20
17	3	395	code	f	1	2014-11-26 02:37:54	2014-11-26 02:37:54	Submission	20
18	4	205	code	f	1	2014-03-27 01:00:40	2014-03-27 01:00:40	Submission	40
19	29	206	code	f	1	2014-06-03 17:53:12	2014-06-03 17:53:12	Submission	40
20	4	223	code	f	1	2014-06-03 07:20:05	2014-06-03 07:20:05	Submission	40
21	4	224	code	f	1	2014-06-26 12:50:09	2014-06-26 12:50:09	Submission	40
22	4	236	code	f	1	2014-04-30 06:54:38	2014-04-30 06:54:38	Submission	40
23	30	244	code	f	1	2014-07-19 23:19:32	2014-07-19 23:19:32	Submission	40
24	4	244	code	f	1	2014-07-19 23:19:32	2014-07-19 23:19:32	Submission	40
25	4	247	code	f	1	2014-03-24 15:18:53	2014-03-24 15:18:53	Submission	40
26	4	248	code	f	1	2014-03-29 19:23:42	2014-03-29 19:23:42	Submission	40
27	3	252	code	f	1	2014-10-02 06:09:43	2014-10-02 06:09:43	Submission	46
28	3	256	code	f	1	2014-10-17 06:14:39	2014-10-17 06:14:39	Submission	46
29	3	257	code	f	1	2014-08-29 13:22:26	2014-08-29 13:22:26	Submission	46
30	40	284	code	f	1	2014-07-15 19:36:33	2014-07-15 19:36:33	Submission	49
31	3	286	code	f	1	2014-08-11 03:17:46	2014-08-11 03:17:46	Submission	49
32	11	261	code	f	1	2014-10-08 05:53:02	2014-10-08 05:53:02	Submission	46
33	3	261	code	f	1	2014-10-08 05:53:02	2014-10-08 05:53:02	Submission	46
34	30	262	code	f	1	2014-11-26 16:25:38	2014-11-26 16:25:38	Submission	48
35	40	262	code	t	1	2014-11-26 16:25:38	2014-11-26 16:25:38	Submission	48
36	3	262	code	t	1	2014-11-26 16:25:38	2014-11-26 16:25:38	Submission	48
37	3	263	code	f	1	2014-11-22 18:45:28	2014-11-22 18:45:28	Submission	48
38	3	264	code	f	1	2014-11-22 21:17:29	2014-11-22 21:17:29	Submission	48
39	3	265	code	f	1	2014-11-24 03:56:42	2014-11-24 03:56:42	Submission	48
40	3	266	code	t	1	2014-11-26 23:03:34	2014-11-26 23:03:34	Submission	48
41	3	267	code	f	1	2014-11-25 16:15:30	2014-11-25 16:15:30	Submission	48
42	3	269	code	f	1	2014-11-26 22:46:06	2014-11-26 22:46:06	Submission	48
43	29	270	code	f	1	2014-11-23 12:38:53	2014-11-23 12:38:53	Submission	48
44	22	270	code	f	1	2014-11-23 12:38:53	2014-11-23 12:38:53	Submission	48
45	3	271	code	f	1	2014-11-25 13:27:20	2014-11-25 13:27:20	Submission	48
46	3	272	code	f	1	2014-07-10 13:46:39	2014-07-10 13:46:39	Submission	49
47	3	273	code	f	1	2014-10-14 21:51:32	2014-10-14 21:51:32	Submission	49
48	3	276	code	f	1	2014-09-25 13:00:23	2014-09-25 13:00:23	Submission	49
49	40	288	code	f	1	2014-10-14 03:26:40	2014-10-14 03:26:40	Submission	49
50	29	290	code	f	1	2014-07-19 15:47:36	2014-07-19 15:47:36	Submission	49
51	30	292	code	f	1	2014-08-01 01:26:02	2014-08-01 01:26:02	Submission	49
52	40	293	code	f	1	2014-09-14 15:47:59	2014-09-14 15:47:59	Submission	49
53	30	295	code	f	1	2014-11-20 01:50:10	2014-11-20 01:50:10	Submission	49
54	3	297	code	f	1	2014-07-05 12:01:21	2014-07-05 12:01:21	Submission	49
55	40	298	code	f	1	2014-07-26 08:51:42	2014-07-26 08:51:42	Submission	49
56	40	299	code	f	1	2014-08-18 12:54:06	2014-08-18 12:54:06	Submission	49
57	3	299	code	f	1	2014-08-18 12:54:06	2014-08-18 12:54:06	Submission	49
58	3	300	code	f	1	2014-10-26 20:58:50	2014-10-26 20:58:50	Submission	49
59	2	306	code	f	1	2014-10-23 06:13:33	2014-10-23 06:13:33	Submission	26
60	29	309	code	f	1	2014-09-19 19:31:37	2014-09-19 19:31:37	Submission	26
61	30	311	code	f	1	2014-09-13 03:15:11	2014-09-13 03:15:11	Submission	26
62	2	312	code	f	1	2014-09-24 17:22:56	2014-09-24 17:22:56	Submission	26
63	4	332	code	f	1	2014-10-29 04:32:34	2014-10-29 04:32:34	Submission	7
64	30	313	code	f	1	2014-10-03 21:13:36	2014-10-03 21:13:36	Submission	26
65	2	314	code	f	1	2014-10-04 03:23:14	2014-10-04 03:23:14	Submission	26
66	22	316	code	f	1	2014-10-17 03:39:29	2014-10-17 03:39:29	Submission	26
67	30	318	code	f	1	2014-11-01 17:40:41	2014-11-01 17:40:41	Submission	26
68	29	318	code	f	1	2014-11-01 17:40:41	2014-11-01 17:40:41	Submission	26
69	30	321	code	f	1	2014-11-22 13:26:34	2014-11-22 13:26:34	Submission	26
70	29	321	code	f	1	2014-11-22 13:26:34	2014-11-22 13:26:34	Submission	26
71	22	321	code	f	1	2014-11-22 13:26:34	2014-11-22 13:26:34	Submission	26
72	3	321	code	f	1	2014-11-22 13:26:34	2014-11-22 13:26:34	Submission	26
73	3	322	code	f	1	2014-10-17 22:23:32	2014-10-17 22:23:32	Submission	26
74	3	324	code	f	1	2014-10-10 10:55:46	2014-10-10 10:55:46	Submission	26
75	2	326	code	f	1	2014-09-29 06:46:15	2014-09-29 06:46:15	Submission	7
76	40	327	code	f	1	2014-10-19 11:57:00	2014-10-19 11:57:00	Submission	7
77	2	327	code	f	1	2014-10-19 11:57:00	2014-10-19 11:57:00	Submission	7
78	40	328	code	f	1	2014-11-22 00:15:43	2014-11-22 00:15:43	Submission	7
79	3	328	code	f	1	2014-11-22 00:15:43	2014-11-22 00:15:43	Submission	7
80	4	328	code	f	1	2014-11-22 00:15:43	2014-11-22 00:15:43	Submission	7
81	40	329	code	f	1	2014-11-26 01:00:37	2014-11-26 01:00:37	Submission	7
82	3	329	code	f	1	2014-11-26 01:00:37	2014-11-26 01:00:37	Submission	7
83	4	329	code	f	1	2014-11-26 01:00:37	2014-11-26 01:00:37	Submission	7
84	11	330	code	f	1	2014-10-09 11:16:09	2014-10-09 11:16:09	Submission	7
85	4	359	code	f	1	2014-07-21 20:50:03	2014-07-21 20:50:03	Submission	23
86	40	334	code	f	1	2014-11-13 06:57:52	2014-11-13 06:57:52	Submission	7
87	3	334	code	f	1	2014-11-13 06:57:52	2014-11-13 06:57:52	Submission	7
88	2	337	code	f	1	2014-07-26 02:37:41	2014-07-26 02:37:41	Submission	23
89	29	338	code	f	1	2014-09-18 08:16:23	2014-09-18 08:16:23	Submission	23
90	4	342	code	f	1	2014-07-11 11:32:31	2014-07-11 11:32:31	Submission	23
91	3	344	code	f	1	2014-08-26 22:07:43	2014-08-26 22:07:43	Submission	23
92	3	345	code	f	1	2014-07-11 16:08:19	2014-07-11 16:08:19	Submission	23
93	30	348	code	f	1	2014-07-06 20:58:58	2014-07-06 20:58:58	Submission	23
94	2	348	code	f	1	2014-07-06 20:58:58	2014-07-06 20:58:58	Submission	23
95	30	349	code	f	1	2014-07-08 15:27:21	2014-07-08 15:27:21	Submission	23
96	2	349	code	f	1	2014-07-08 15:27:21	2014-07-08 15:27:21	Submission	23
97	2	350	code	f	1	2014-08-10 16:44:05	2014-08-10 16:44:05	Submission	23
98	30	351	code	f	1	2014-08-23 06:01:53	2014-08-23 06:01:53	Submission	23
99	2	351	code	f	1	2014-08-23 06:01:53	2014-08-23 06:01:53	Submission	23
100	3	351	code	f	1	2014-08-23 06:01:53	2014-08-23 06:01:53	Submission	23
101	40	352	code	f	1	2014-10-10 12:20:52	2014-10-10 12:20:52	Submission	23
102	2	352	code	f	1	2014-10-10 12:20:52	2014-10-10 12:20:52	Submission	23
103	3	352	code	f	1	2014-10-10 12:20:52	2014-10-10 12:20:52	Submission	23
104	2	355	code	f	1	2014-07-12 01:00:51	2014-07-12 01:00:51	Submission	23
105	4	355	code	f	1	2014-07-12 01:00:51	2014-07-12 01:00:51	Submission	23
106	3	356	code	f	1	2014-08-27 19:31:43	2014-08-27 19:31:43	Submission	23
107	3	357	code	f	1	2014-09-28 06:54:58	2014-09-28 06:54:58	Submission	23
108	4	357	code	f	1	2014-09-28 06:54:58	2014-09-28 06:54:58	Submission	23
109	29	358	code	f	1	2014-10-11 21:56:17	2014-10-11 21:56:17	Submission	23
110	22	358	code	f	1	2014-10-11 21:56:17	2014-10-11 21:56:17	Submission	23
111	3	360	code	f	1	2014-08-29 08:14:25	2014-08-29 08:14:25	Submission	23
112	4	360	code	f	1	2014-08-29 08:14:25	2014-08-29 08:14:25	Submission	23
113	4	362	code	f	1	2014-08-10 06:40:36	2014-08-10 06:40:36	Submission	23
114	4	364	code	f	1	2014-08-16 07:25:35	2014-08-16 07:25:35	Submission	23
115	4	365	code	f	1	2014-09-18 05:36:01	2014-09-18 05:36:01	Submission	23
116	3	366	code	f	1	2014-10-11 16:57:31	2014-10-11 16:57:31	Submission	23
117	3	368	code	f	1	2014-10-12 13:56:32	2014-10-12 13:56:32	Submission	23
118	4	372	code	f	1	2014-10-02 19:01:35	2014-10-02 19:01:35	Submission	23
119	3	373	code	f	1	2014-07-28 17:06:31	2014-07-28 17:06:31	Submission	23
120	3	378	code	f	1	2014-08-28 03:50:02	2014-08-28 03:50:02	Submission	23
121	3	379	code	f	1	2014-09-05 12:20:30	2014-09-05 12:20:30	Submission	23
122	4	379	code	f	1	2014-09-05 12:20:30	2014-09-05 12:20:30	Submission	23
123	3	380	code	f	1	2014-11-14 02:23:38	2014-11-14 02:23:38	Submission	23
124	4	380	code	f	1	2014-11-14 02:23:38	2014-11-14 02:23:38	Submission	23
125	40	382	code	f	1	2014-07-03 07:40:07	2014-07-03 07:40:07	Submission	23
126	4	382	code	f	1	2014-07-03 07:40:07	2014-07-03 07:40:07	Submission	23
127	2	383	code	f	1	2014-08-29 17:14:31	2014-08-29 17:14:31	Submission	23
128	3	383	code	f	1	2014-08-29 17:14:31	2014-08-29 17:14:31	Submission	23
129	4	385	code	f	1	2014-08-25 13:11:28	2014-08-25 13:11:28	Submission	23
130	2	386	code	f	1	2014-08-29 11:13:13	2014-08-29 11:13:13	Submission	23
131	3	386	code	f	1	2014-08-29 11:13:13	2014-08-29 11:13:13	Submission	23
132	2	389	code	f	1	2014-08-25 17:24:47	2014-08-25 17:24:47	Submission	23
133	4	393	code	f	1	2014-11-05 10:55:45	2014-11-05 10:55:45	Submission	17
134	2	396	code	f	1	2014-11-27 00:18:25	2014-11-27 00:18:25	Submission	20
135	3	396	code	t	1	2014-11-27 00:18:25	2014-11-27 00:18:25	Submission	20
136	2	397	code	f	1	2014-11-26 20:38:38	2014-11-26 20:38:38	Submission	20
137	3	397	code	f	1	2014-11-26 20:38:38	2014-11-26 20:38:38	Submission	20
138	2	398	code	t	1	2014-11-27 00:32:13	2014-11-27 00:32:13	Submission	20
139	3	398	code	t	1	2014-11-27 00:32:13	2014-11-27 00:32:13	Submission	20
140	2	399	code	f	1	2014-11-27 09:41:41	2014-11-27 09:41:41	Submission	20
141	3	399	code	f	1	2014-11-27 09:41:41	2014-11-27 09:41:41	Submission	20
142	3	400	code	f	1	2014-11-26 02:03:32	2014-11-26 02:03:32	Submission	20
143	3	401	code	f	1	2014-11-26 03:05:40	2014-11-26 03:05:40	Submission	20
144	29	405	code	f	1	2014-06-13 22:58:42	2014-06-13 22:58:42	Submission	30
145	2	411	code	f	1	2014-07-21 17:57:02	2014-07-21 17:57:02	Submission	30
146	4	412	code	t	1	2014-11-27 13:37:05	2014-11-27 13:37:05	Submission	35
147	4	413	code	f	1	2014-11-27 16:22:04	2014-11-27 16:22:04	Submission	35
148	4	414	code	f	1	2014-11-27 18:51:50	2014-11-27 18:51:50	Submission	35
149	4	415	code	t	1	2014-11-27 23:41:39	2014-11-27 23:41:39	Submission	35
150	4	416	code	t	1	2014-11-27 00:53:29	2014-11-27 00:53:29	Submission	35
151	4	417	code	f	1	2014-11-27 23:32:26	2014-11-27 23:32:26	Submission	35
152	4	418	code	t	1	2014-11-27 15:37:02	2014-11-27 15:37:02	Submission	35
153	40	419	code	t	1	2014-11-27 22:11:10	2014-11-27 22:11:10	Submission	35
154	4	419	code	t	1	2014-11-27 22:11:10	2014-11-27 22:11:10	Submission	35
155	2	420	code	f	1	2014-07-01 04:23:47	2014-07-01 04:23:47	Submission	14
156	2	423	code	f	1	2014-08-19 16:28:12	2014-08-19 16:28:12	Submission	14
157	4	442	code	f	1	2014-11-13 09:38:24	2014-11-13 09:38:24	Submission	41
158	30	443	code	f	1	2014-09-28 17:52:00	2014-09-28 17:52:00	Submission	41
159	40	443	code	f	1	2014-09-28 17:52:00	2014-09-28 17:52:00	Submission	41
160	29	428	code	f	1	2014-07-03 02:16:43	2014-07-03 02:16:43	Submission	14
161	40	429	code	f	1	2014-09-29 06:59:12	2014-09-29 06:59:12	Submission	14
162	3	429	code	f	1	2014-09-29 06:59:12	2014-09-29 06:59:12	Submission	14
163	4	432	code	f	1	2014-09-03 19:42:32	2014-09-03 19:42:32	Submission	41
164	30	436	code	f	1	2014-09-08 20:31:45	2014-09-08 20:31:45	Submission	41
165	29	436	code	f	1	2014-09-08 20:31:45	2014-09-08 20:31:45	Submission	41
166	4	447	code	f	1	2014-09-23 00:08:23	2014-09-23 00:08:23	Submission	41
167	11	452	code	f	1	2014-09-18 09:14:17	2014-09-18 09:14:17	Submission	41
168	4	469	code	f	1	2014-08-22 18:12:33	2014-08-22 18:12:33	Submission	41
169	4	455	code	f	1	2014-09-19 09:28:15	2014-09-19 09:28:15	Submission	41
170	4	458	code	f	1	2014-08-26 21:31:58	2014-08-26 21:31:58	Submission	41
171	4	463	code	f	1	2014-11-01 16:08:54	2014-11-01 16:08:54	Submission	41
172	3	478	code	f	1	2014-09-12 23:54:23	2014-09-12 23:54:23	Submission	6
173	2	482	code	f	1	2014-04-01 01:36:52	2014-04-01 01:36:52	Submission	16
174	2	485	code	f	1	2014-10-04 09:15:44	2014-10-04 09:15:44	Submission	16
175	3	487	code	f	1	2014-07-05 05:28:55	2014-07-05 05:28:55	Submission	16
176	2	491	code	f	1	2014-03-10 12:00:44	2014-03-10 12:00:44	Submission	16
177	2	495	code	f	1	2014-10-13 10:14:50	2014-10-13 10:14:50	Submission	16
178	2	499	code	f	1	2014-09-27 21:52:42	2014-09-27 21:52:42	Submission	18
179	3	499	code	f	1	2014-09-27 21:52:42	2014-09-27 21:52:42	Submission	18
180	2	501	code	f	1	2014-07-07 18:28:32	2014-07-07 18:28:32	Submission	18
181	3	501	code	f	1	2014-07-07 18:28:32	2014-07-07 18:28:32	Submission	18
182	4	501	code	f	1	2014-07-07 18:28:32	2014-07-07 18:28:32	Submission	18
183	4	503	code	f	1	2014-07-23 10:22:26	2014-07-23 10:22:26	Submission	18
184	4	504	code	f	1	2014-07-09 13:44:27	2014-07-09 13:44:27	Submission	18
185	3	507	code	f	1	2014-06-21 02:28:13	2014-06-21 02:28:13	Submission	18
186	2	511	code	f	1	2014-08-16 05:31:51	2014-08-16 05:31:51	Submission	18
187	3	511	code	f	1	2014-08-16 05:31:51	2014-08-16 05:31:51	Submission	18
188	4	511	code	f	1	2014-08-16 05:31:51	2014-08-16 05:31:51	Submission	18
189	29	534	code	f	1	2014-09-22 17:06:55	2014-09-22 17:06:55	Submission	18
190	2	534	code	f	1	2014-09-22 17:06:55	2014-09-22 17:06:55	Submission	18
191	4	514	code	f	1	2014-09-19 19:08:48	2014-09-19 19:08:48	Submission	18
192	4	517	code	f	1	2014-10-31 14:37:03	2014-10-31 14:37:03	Submission	18
193	4	520	code	f	1	2014-07-19 17:23:20	2014-07-19 17:23:20	Submission	18
194	2	521	code	f	1	2014-06-27 09:45:40	2014-06-27 09:45:40	Submission	18
195	4	535	code	f	1	2014-10-18 11:05:33	2014-10-18 11:05:33	Submission	18
196	2	522	code	f	1	2014-07-19 13:26:26	2014-07-19 13:26:26	Submission	18
197	3	522	code	f	1	2014-07-19 13:26:26	2014-07-19 13:26:26	Submission	18
198	4	522	code	f	1	2014-07-19 13:26:26	2014-07-19 13:26:26	Submission	18
199	2	523	code	f	1	2014-08-19 21:04:56	2014-08-19 21:04:56	Submission	18
200	2	524	code	f	1	2014-06-23 03:29:19	2014-06-23 03:29:19	Submission	18
201	40	528	code	f	1	2014-06-21 16:59:07	2014-06-21 16:59:07	Submission	18
202	40	529	code	f	1	2014-08-14 23:12:49	2014-08-14 23:12:49	Submission	18
203	2	531	code	f	1	2014-09-03 19:37:24	2014-09-03 19:37:24	Submission	18
204	3	568	code	f	1	2014-11-21 08:31:41	2014-11-21 08:31:41	Submission	45
205	30	536	code	f	1	2014-11-10 10:34:03	2014-11-10 10:34:03	Submission	18
206	3	536	code	f	1	2014-11-10 10:34:03	2014-11-10 10:34:03	Submission	18
207	2	537	code	f	1	2014-10-11 17:08:59	2014-10-11 17:08:59	Submission	18
208	2	543	code	f	1	2014-05-04 23:38:42	2014-05-04 23:38:42	Submission	24
209	2	544	code	f	1	2014-11-04 02:08:35	2014-11-04 02:08:35	Submission	42
210	46	546	code	f	1	2014-11-11 02:41:21	2014-11-11 02:41:21	Submission	42
211	2	549	code	f	1	2014-10-26 18:21:18	2014-10-26 18:21:18	Submission	42
212	30	553	code	f	1	2014-11-05 15:03:59	2014-11-05 15:03:59	Submission	27
213	40	553	code	f	1	2014-11-05 15:03:59	2014-11-05 15:03:59	Submission	27
214	40	554	code	f	1	2014-11-08 14:39:54	2014-11-08 14:39:54	Submission	45
215	11	555	code	f	1	2014-10-28 18:39:59	2014-10-28 18:39:59	Submission	45
216	3	557	code	f	1	2014-10-18 13:27:54	2014-10-18 13:27:54	Submission	45
217	3	564	code	f	1	2014-11-16 07:48:50	2014-11-16 07:48:50	Submission	45
218	29	571	code	f	1	2014-11-01 23:39:22	2014-11-01 23:39:22	Submission	45
219	3	571	code	f	1	2014-11-01 23:39:22	2014-11-01 23:39:22	Submission	45
220	3	573	code	f	1	2014-10-25 05:52:41	2014-10-25 05:52:41	Submission	45
221	3	576	code	f	1	2014-11-02 14:38:29	2014-11-02 14:38:29	Submission	45
222	3	578	code	f	1	2014-11-01 01:43:21	2014-11-01 01:43:21	Submission	45
223	4	2	code	f	1	2014-06-18 17:24:18	2014-06-18 17:24:18	Submission	11
224	3	3	code	f	1	2014-07-06 20:08:31	2014-07-06 20:08:31	Submission	11
225	3	8	code	f	1	2014-07-18 01:39:08	2014-07-18 01:39:08	Submission	11
226	4	8	code	f	1	2014-07-18 01:39:08	2014-07-18 01:39:08	Submission	11
227	3	128	code	f	1	2014-06-16 16:48:50	2014-06-16 16:48:50	Submission	29
228	2	130	code	f	1	2014-08-04 02:57:47	2014-08-04 02:57:47	Submission	29
229	4	131	code	f	1	2014-11-02 01:04:42	2014-11-02 01:04:42	Submission	29
230	3	132	code	f	1	2014-04-02 10:15:11	2014-04-02 10:15:11	Submission	29
231	4	132	code	f	1	2014-04-02 10:15:11	2014-04-02 10:15:11	Submission	29
232	4	11	code	f	1	2014-07-21 04:03:46	2014-07-21 04:03:46	Submission	11
233	4	12	code	f	1	2014-10-21 03:20:35	2014-10-21 03:20:35	Submission	11
234	4	13	code	f	1	2014-07-04 09:10:01	2014-07-04 09:10:01	Submission	11
235	3	14	code	f	1	2014-07-18 12:53:26	2014-07-18 12:53:26	Submission	11
236	4	14	code	f	1	2014-07-18 12:53:26	2014-07-18 12:53:26	Submission	11
237	46	471	code	f	1	2014-09-10 03:30:09	2014-09-10 03:30:09	Submission	41
238	4	471	code	f	1	2014-09-10 03:30:09	2014-09-10 03:30:09	Submission	41
239	2	16	code	f	1	2014-06-08 08:09:58	2014-06-08 08:09:58	Submission	11
240	3	16	code	f	1	2014-06-08 08:09:58	2014-06-08 08:09:58	Submission	11
241	2	17	code	f	1	2014-08-05 22:38:56	2014-08-05 22:38:56	Submission	11
242	3	18	code	f	1	2014-10-02 19:51:12	2014-10-02 19:51:12	Submission	11
243	2	22	code	f	1	2014-05-26 04:52:48	2014-05-26 04:52:48	Submission	11
244	3	25	code	f	1	2014-08-24 16:47:22	2014-08-24 16:47:22	Submission	11
245	4	26	code	f	1	2014-05-20 14:50:17	2014-05-20 14:50:17	Submission	11
246	3	27	code	f	1	2014-07-08 20:57:50	2014-07-08 20:57:50	Submission	11
247	3	34	code	f	1	2014-05-14 08:52:43	2014-05-14 08:52:43	Submission	11
248	4	34	code	f	1	2014-05-14 08:52:43	2014-05-14 08:52:43	Submission	11
249	3	41	code	f	1	2014-09-09 00:46:40	2014-09-09 00:46:40	Submission	11
250	29	44	code	f	1	2014-10-05 10:24:23	2014-10-05 10:24:23	Submission	11
251	4	44	code	f	1	2014-10-05 10:24:23	2014-10-05 10:24:23	Submission	11
252	3	45	code	f	1	2014-10-31 10:16:15	2014-10-31 10:16:15	Submission	11
253	2	35	code	f	1	2014-06-07 12:10:31	2014-06-07 12:10:31	Submission	11
254	4	35	code	f	1	2014-06-07 12:10:31	2014-06-07 12:10:31	Submission	11
255	3	39	code	f	1	2014-09-30 05:11:19	2014-09-30 05:11:19	Submission	11
256	3	40	code	f	1	2014-05-12 21:29:33	2014-05-12 21:29:33	Submission	11
257	4	40	code	f	1	2014-05-12 21:29:33	2014-05-12 21:29:33	Submission	11
258	2	48	code	f	1	2014-08-23 22:31:51	2014-08-23 22:31:51	Submission	11
259	3	48	code	f	1	2014-08-23 22:31:51	2014-08-23 22:31:51	Submission	11
260	3	53	code	f	1	2014-06-10 22:09:48	2014-06-10 22:09:48	Submission	11
261	3	54	code	f	1	2014-06-19 16:16:49	2014-06-19 16:16:49	Submission	11
262	2	55	code	f	1	2014-08-19 17:51:13	2014-08-19 17:51:13	Submission	11
263	2	57	code	f	1	2014-06-04 06:37:50	2014-06-04 06:37:50	Submission	12
264	3	57	code	f	1	2014-06-04 06:37:50	2014-06-04 06:37:50	Submission	12
265	3	61	code	f	1	2014-09-07 05:51:22	2014-09-07 05:51:22	Submission	12
266	2	63	code	f	1	2014-08-30 07:41:42	2014-08-30 07:41:42	Submission	15
267	3	66	code	f	1	2014-08-23 02:18:06	2014-08-23 02:18:06	Submission	15
268	3	67	code	f	1	2014-10-03 16:24:21	2014-10-03 16:24:21	Submission	22
269	2	68	code	f	1	2014-10-31 00:06:32	2014-10-31 00:06:32	Submission	22
270	4	68	code	f	1	2014-10-31 00:06:32	2014-10-31 00:06:32	Submission	22
271	2	69	code	f	1	2014-09-28 03:19:22	2014-09-28 03:19:22	Submission	22
272	3	71	code	f	1	2014-10-08 14:10:44	2014-10-08 14:10:44	Submission	22
273	2	72	code	f	1	2014-09-29 07:33:53	2014-09-29 07:33:53	Submission	22
274	2	88	code	f	1	2014-11-19 21:59:16	2014-11-19 21:59:16	Submission	22
275	2	89	code	f	1	2014-10-22 20:06:49	2014-10-22 20:06:49	Submission	22
276	31	90	code	f	1	2014-10-27 04:01:49	2014-10-27 04:01:49	Submission	22
277	3	76	code	f	1	2014-10-04 02:41:46	2014-10-04 02:41:46	Submission	22
278	4	76	code	f	1	2014-10-04 02:41:46	2014-10-04 02:41:46	Submission	22
279	2	79	code	f	1	2014-10-16 08:08:11	2014-10-16 08:08:11	Submission	22
280	40	83	code	f	1	2014-11-01 18:39:46	2014-11-01 18:39:46	Submission	22
281	3	83	code	f	1	2014-11-01 18:39:46	2014-11-01 18:39:46	Submission	22
282	4	87	code	f	1	2014-10-27 16:33:51	2014-10-27 16:33:51	Submission	22
283	11	94	code	f	1	2014-10-05 18:42:17	2014-10-05 18:42:17	Submission	22
284	4	96	code	f	1	2014-10-16 09:36:13	2014-10-16 09:36:13	Submission	22
285	46	106	code	f	1	2014-11-23 19:29:09	2014-11-23 19:29:09	Submission	28
286	3	106	code	f	1	2014-11-23 19:29:09	2014-11-23 19:29:09	Submission	28
287	2	108	code	f	1	2014-03-24 08:14:14	2014-03-24 08:14:14	Submission	29
288	4	109	code	f	1	2014-06-09 02:02:43	2014-06-09 02:02:43	Submission	29
289	2	110	code	f	1	2014-05-05 23:03:16	2014-05-05 23:03:16	Submission	29
290	2	111	code	f	1	2014-05-30 16:44:36	2014-05-30 16:44:36	Submission	29
291	30	112	code	f	1	2014-08-04 09:14:52	2014-08-04 09:14:52	Submission	29
292	2	114	code	f	1	2014-05-21 00:33:53	2014-05-21 00:33:53	Submission	29
293	2	115	code	f	1	2014-06-11 17:57:14	2014-06-11 17:57:14	Submission	29
294	4	116	code	f	1	2014-06-25 16:11:58	2014-06-25 16:11:58	Submission	29
295	2	117	code	f	1	2014-06-19 11:16:16	2014-06-19 11:16:16	Submission	29
296	2	127	code	f	1	2014-07-29 23:03:42	2014-07-29 23:03:42	Submission	29
297	3	119	code	f	1	2014-05-04 13:00:45	2014-05-04 13:00:45	Submission	29
298	2	121	code	f	1	2014-07-26 16:10:12	2014-07-26 16:10:12	Submission	29
299	11	122	code	f	1	2014-10-04 23:17:45	2014-10-04 23:17:45	Submission	29
300	2	122	code	f	1	2014-10-04 23:17:45	2014-10-04 23:17:45	Submission	29
301	3	122	code	f	1	2014-10-04 23:17:45	2014-10-04 23:17:45	Submission	29
302	4	124	code	f	1	2014-03-30 14:32:49	2014-03-30 14:32:49	Submission	29
303	3	125	code	f	1	2014-07-26 09:49:28	2014-07-26 09:49:28	Submission	29
304	2	126	code	f	1	2014-06-23 23:58:11	2014-06-23 23:58:11	Submission	29
305	40	134	code	f	1	2014-05-26 20:21:17	2014-05-26 20:21:17	Submission	29
306	3	134	code	f	1	2014-05-26 20:21:17	2014-05-26 20:21:17	Submission	29
307	4	136	code	f	1	2014-07-17 09:09:12	2014-07-17 09:09:12	Submission	29
308	3	138	code	f	1	2014-07-07 10:39:58	2014-07-07 10:39:58	Submission	29
309	4	139	code	f	1	2014-05-03 01:42:27	2014-05-03 01:42:27	Submission	29
310	2	140	code	f	1	2014-07-17 08:37:50	2014-07-17 08:37:50	Submission	29
311	3	160	code	f	1	2014-04-05 11:54:23	2014-04-05 11:54:23	Submission	29
312	2	141	code	f	1	2014-04-03 10:25:35	2014-04-03 10:25:35	Submission	29
313	3	141	code	f	1	2014-04-03 10:25:35	2014-04-03 10:25:35	Submission	29
314	4	145	code	f	1	2014-08-14 14:58:40	2014-08-14 14:58:40	Submission	29
315	4	146	code	f	1	2014-04-30 07:31:03	2014-04-30 07:31:03	Submission	29
316	2	147	code	f	1	2014-08-30 17:37:43	2014-08-30 17:37:43	Submission	29
317	3	150	code	f	1	2014-05-14 10:55:07	2014-05-14 10:55:07	Submission	29
318	4	150	code	f	1	2014-05-14 10:55:07	2014-05-14 10:55:07	Submission	29
319	4	152	code	f	1	2014-07-30 06:17:35	2014-07-30 06:17:35	Submission	29
320	4	153	code	f	1	2014-06-24 17:25:11	2014-06-24 17:25:11	Submission	29
321	3	155	code	f	1	2014-11-03 21:52:37	2014-11-03 21:52:37	Submission	29
322	4	155	code	f	1	2014-11-03 21:52:37	2014-11-03 21:52:37	Submission	29
323	3	156	code	f	1	2014-05-19 20:38:48	2014-05-19 20:38:48	Submission	29
324	4	159	code	f	1	2014-06-28 20:23:21	2014-06-28 20:23:21	Submission	29
325	3	161	code	f	1	2014-06-02 01:32:32	2014-06-02 01:32:32	Submission	29
326	2	163	code	f	1	2014-10-15 10:47:29	2014-10-15 10:47:29	Submission	29
327	3	164	code	f	1	2014-04-11 03:10:46	2014-04-11 03:10:46	Submission	29
328	4	164	code	f	1	2014-04-11 03:10:46	2014-04-11 03:10:46	Submission	29
329	3	166	code	f	1	2014-04-07 19:29:20	2014-04-07 19:29:20	Submission	29
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 329, true);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
1	9	451c2c42de23eebef2019648	pending	go	clock	package clock\r\n\r\nimport (\r\n\t"fmt"\r\n)\r\n\r\ntype Clock int\r\n\r\nfunc New(h, m int) Clock {\r\n\tc := Clock((h*60 + m) % 1440)\r\n\tif c < 0 {\r\n\t\tc += 1440\r\n\t}\r\n\treturn c\r\n}\r\n\r\nfunc (c Clock) Add(m int) Clock {\r\n\tc = (c + Clock(m)) % 1440\r\n\tif c < 0 {\r\n\t\tc += 1440\r\n\t}\r\n\treturn c\r\n}\r\n\r\nfunc (c Clock) String() string {\r\n\treturn fmt.Sprintf("%02d:%02d", c/60, c%60)\r\n}\r	\N	\N	0	1	2014-08-14 21:50:32	2014-08-14 21:50:32	1	clock.go
2	11	e0a6c356460b775a5c6af253	superseded	ruby	anagram	class Anagram < String\n\n  def match(possible_anagrams)\n    possible_anagrams.delete_if { |str| not anagram_of?(str) }\n  end\n\n  def anagram_of?(other)\n    Anagram.key_of(self) == Anagram.key_of(other) &&\n      downcase != other.downcase\n  end\n\n  def Anagram.key_of(str)\n    str.downcase.chars.sort.join\n  end\n  \nend	\N	\N	0	3	2014-06-18 17:24:18	2014-06-18 17:24:18	2	anagram.rb
3	11	01ad58f1f7ba6b55d3f38280	pending	ruby	anagram	class Anagram < String\n\n  def match(possible_anagrams)\n    possible_anagrams.delete_if { |str| not anagram_of?(str) }\n  end\n\n  def anagram_of?(other)\n    Anagram.key_of(self) == Anagram.key_of(other) &&\n      downcase != other.downcase\n  end\n\n  def Anagram.key_of(str)\n    str.downcase.chars.sort\n  end\n  \nend	\N	\N	0	4	2014-07-06 20:08:31	2014-07-06 20:08:31	2	anagram.rb
4	11	b7b6987bef9f7c9bad15bbbe	superseded	ruby	anagram	class String\n\n  def anagram_of?(other_string)\n    anagram_key == other_string.anagram_key &&\n      downcase != other_string.downcase\n  end\n\n  def anagram_key\n    downcase.chars.sort.join\n  end\n  \nend\n\nclass Anagram < String\n\n  def match(possible_anagrams)\n    possible_anagrams.delete_if { |str| not str.anagram_of?(self) }\n  end\n\nend	\N	\N	0	1	2014-09-04 12:57:03	2014-09-04 12:57:03	2	anagram.rb
5	11	fa2f5cec27a46fca0b85337c	superseded	ruby	anagram	class Anagram < String\n\n  def match(possible_anagrams)\n    possible_anagrams.delete_if do |str| \n      not Anagram.new(str).anagram_of?(self)\n    end\n  end\n\n  def anagram_of?(other)\n    anagram_key == other.anagram_key &&\n      downcase != other.downcase\n  end\n\n  def anagram_key\n    downcase.chars.sort.join\n  end\n  \nend	\N	\N	0	2	2014-09-22 04:10:05	2014-09-22 04:10:05	2	anagram.rb
6	11	ad90cbb554ea113019e1c520	pending	python	beer-song	class Beer:\n\n\n  def sing(self, top, lower=0):\n    verses = [ self.verse(x) for x in reversed(range(lower, top + 1))]\n    return "\\n".join(verses) + "\\n"\n    \n\n  def verse(self, count):\n    if count == 0: \n      return self.verse_0()\n    elif count == 1:\n      return self.verse_1()\n    elif count == 2:\n      return self.verse_2()\n    else:\n      return self.verse_x(count)\n\n  def verse_0(self):\n    return ( "No more bottles of beer on the wall, no more bottles of beer.\\n"\n             "Go to the store and buy some more, 99 bottles of beer on the wall.\\n")\n\n  def verse_1(self):\n    return ("1 bottle of beer on the wall, 1 bottle of beer.\\n"\n            "Take it down and pass it around, no more bottles of beer on the wall.\\n")\n\n  def verse_2(self):\n    return ( "2 bottles of beer on the wall, 2 bottles of beer.\\n"\n            "Take one down and pass it around, 1 bottle of beer on the wall.\\n")\n\n  def verse_x(self, count):\n    return ( str(count) +  " bottles of beer on the wall, " + str(count) + " bottles of beer.\\n"\n            "Take one down and pass it around, " + str(count - 1) +  " bottles of beer on the wall.\\n")	\N	\N	0	1	2014-07-02 16:18:18	2014-07-02 16:18:18	3	beer-song.py
7	11	ed9d0449651c385a83d575d6	done	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  #\n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically imported) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l) do\n    list_count(l)\n  end\n\n  defp list_count([_head|tail]), do: list_count(tail) + 1\n  defp list_count([]), do: 0\n\n  @spec reverse(list) :: list\n  def reverse(l) do\n    reverse_list(l)\n  end\n\n  defp reverse_list([head|tail]), do: [reverse_list(tail) | head]\n  defp reverse_list([]), do: []\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    for i <- l, do: f.(i)\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    for i <- l, f.(i), do: i\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    reduce_list(l, acc, f)\n  end\n\n  defp reduce_list([head|tail], acc, f), do: reduce_list(tail, f.(head, acc), f)\n  defp reduce_list([], acc, _), do: acc\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n\n  end\nend	2014-09-29 20:09:02	\N	0	1	2014-09-26 17:32:59	2014-09-26 17:32:59	4	list_ops.exs
8	11	9112b5b8bd21bea013517d76	done	ruby	binary	class Binary\n  def initialize (binary_number)\n    @binary_number = binary_number\n  end\n\n  def to_decimal\n    decimal_sum = 0\n    counter = 0\n    if @binary_number =~ /[a-z]/\n      decimal_sum = 0\n    else\n      @binary_number= @binary_number.chars\n      @binary_number.map! { |x| x.to_i }\n      @binary_number.reverse.each do |x|\n        decimal_sum += x * 2 ** (counter)\n        counter += 1\n      end\n    end\n    decimal_sum\n  end\n\nend	2014-07-24 16:00:04	\N	0	1	2014-07-18 01:39:08	2014-07-18 01:39:08	5	binary.rb
128	29	303721cac8cb4b3a6a1f3d60	done	ruby	gigasecond	class Gigasecond\n  def initialize(day)\n    @day = day\n  end\n  def date\n    @day + (10**9)/86400\n  end\nend	2014-06-16 19:02:27	\N	0	1	2014-06-16 16:48:50	2014-06-16 16:48:50	69	gigasecond.rb
129	29	725d9d77b3a5d6492e8bfe79	superseded	ruby	grains	class Grains\n  def initialize\n    @starting_grains = 1\n  end\n\n  def square(num)\n    return @starting_grains if num == 1\n    Grains.new.square(num - 1) * 2\n  end\n\n  def total\n    total = 0\n    (1..64).each do |g|\n      total += Grains.new.square(g)\n    end\n    total\n  end\nend	\N	\N	0	1	2014-06-04 03:56:32	2014-06-04 03:56:32	70	grains.rb
130	29	961eed255f867acbc196f0b1	pending	ruby	grains	class Grains\n  def initialize\n    @starting_grains = 1\n  end\n\n  def square(num)\n    return @starting_grains if num == 1\n    square(num - 1) * 2\n  end\n\n  def total\n    total_so_far(64)\n  end\n\n  def total_so_far(num)\n    return @starting_grains if num == 1\n    total_so_far(num - 1) + square(num)\n  end\nend	\N	\N	0	3	2014-08-04 02:57:47	2014-08-04 02:57:47	70	grains.rb
131	29	82bd09ee908ba9a751d3399a	superseded	ruby	grains	class Grains\n  def initialize\n    @starting_grains = 1\n  end\n\n  def square(num)\n    return @starting_grains if num == 1\n    square(num - 1) * 2\n  end\n\n  def total\n    total_so_far(64)\n  end\n\n  def total_so_far(num)\n    return 1 if num == 1\n    total_so_far(num - 1) + square(num)\n  end\nend	\N	\N	0	2	2014-11-02 01:04:42	2014-11-02 01:04:42	70	grains.rb
132	29	737640f0a98afc4a204f5a84	done	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Integral i => i -> Bool\nisLeapYear year\n  = mul 4 && (not (mul 100) || mul 400)\n    where mul d = year `mod` d == 0	2014-04-06 19:41:39	\N	0	1	2014-04-02 10:15:11	2014-04-02 10:15:11	71	LeapYear.hs
133	29	ca6ccd2f7733781a963ed1f2	done	ruby	leap	class Year\n  def Year.leap?(year)\n    return true  if year % 400 == 0\n    return false if year % 100 == 0\n    year % 4 == 0\n  end\nend	2014-05-06 01:04:35	\N	0	1	2014-05-03 11:27:47	2014-05-03 11:27:47	72	year.rb
9	11	a39cb4f03d4e96fe58915ab1	pending	javascript	bob	module.exports = function() {\n\n\tfunction isShouting(phrase) {\n\t\treturn phrase.toUpperCase() === phrase && /[A-Z]/.test(phrase); // I cheated on this line. Wasn't sure what the rule should be to determine shouting.\n\t}\n\n\tfunction isQuestion(phrase) {\n\t\t// Has a question mark at the end\n\t\treturn phrase.slice(-1) == "?";\n\t}\n\n\tfunction isEmpty(phrase) {\n\t\treturn phrase.length === 0;\n\t}\n\n\tthis.hey = function(phrase) {\n\t\tphrase = phrase.trim();\n\n\t\tif (isEmpty(phrase)) {\n\t\t\treturn "Fine. Be that way!";\n\t\t} else if (isShouting(phrase)) {\n\t\t\treturn "Woah, chill out!";\n\t\t} else if (isQuestion(phrase)) {\n\t\t\treturn "Sure.";\n\t\t}\n\n\t\treturn "Whatever.";\n\t};\n};	\N	\N	0	1	2014-07-15 13:15:26	2014-07-15 13:15:26	6	bob.js
10	11	b3ef12847339f00ee8311d9f	done	ruby	beer-song	class Beer\n  attr_accessor :bottle_count\n\n  def sing(first, last=0)\n    first.downto(last).inject("") do |memo, num|\n      memo << verse(num) + "\\n"\n    end\n  end\n\n  def verse(num)\n    @bottle_count = num\n    [line1, line2, action, remaining_bottles].join()\n  end\n\nprivate\n  def line1\n    pluralize_bottles(bottle_count).capitalize + " of beer on the wall, "\n  end\n\n  def line2\n    pluralize_bottles(bottle_count) + " of beer.\\n"\n  end\n\n  def action\n    if bottle_count == 0\n      "Go to the store and buy some more, "\n    else\n      "Take #{humanize_bottles} down and pass it around, "\n    end\n  end\n\n  def remaining_bottles\n    reset_bottles if bottle_count == 0\n    "#{pluralize_bottles(bottle_count-1)} of beer on the wall.\\n"\n  end\n\n  def reset_bottles\n    @bottle_count = 100\n  end\n\n  def humanize_bottles\n    bottle_count == 1 ? 'it' : 'one'\n  end\n\n  def pluralize_bottles(count)\n    if count == 0\n      "no more bottles"\n    elsif count == 1\n      "1 bottle"\n    else\n      "#{count} bottles"\n    end\n  end\n\n\nend	2014-06-23 03:16:34	\N	0	3	2014-06-21 23:40:20	2014-06-21 23:40:20	7	beer-song.rb
11	11	71cbf22bd7fef834212ea2a4	superseded	ruby	beer-song	class Beer\n\n  def sing(first, last=0)\n    s = ""\n    first.downto(last).each do |number|\n      s << verse(number)\n      s << "\\n"\n    end\n    s\n  end\n\n  def verse(number)\n    s = ""\n    s << pluralize_bottles(number).capitalize + " of beer on the wall, "\n    s << pluralize_bottles(number) + " of beer.\\n"\n    s << action(number)\n    s << remaining_bottles(number)\n  end\n\nprivate\n  def action(number)\n    if number == 0\n      "Go to the store and buy some more, "\n    else\n      "Take #{number ==1 ? 'it' : 'one'} down and pass it around, "\n    end\n  end\n\n  def remaining_bottles(number)\n    number = 100 if number == 0\n    "#{pluralize_bottles(number-1)} of beer on the wall.\\n"\n  end\n\n\n  def pluralize_bottles(number)\n    if number == 0\n      "no more bottles"\n    elsif number == 1\n      "1 bottle"\n    else\n      "#{number} bottles"\n    end\n  end\n\n\nend	\N	\N	0	1	2014-07-21 04:03:46	2014-07-21 04:03:46	7	beer-song.rb
12	11	21fe2d4f9135e2a2d14356ca	superseded	ruby	beer-song	class Beer\n  attr_accessor :bottle_count\n\n  def sing(first, last=0)\n    s = ""\n    first.downto(last).each do |num|\n      s << verse(num)\n      s << "\\n"\n    end\n    s\n  end\n\n  def verse(num)\n    @bottle_count = num\n    [line1, line2, action, remaining_bottles].inject("") do |memo, word|\n      memo << word\n    end\n  end\n\n  def line1\n    pluralize_bottles(bottle_count).capitalize + " of beer on the wall, "\n  end\n\n  def line2\n    pluralize_bottles(bottle_count) + " of beer.\\n"\n  end\n\n  def action\n    if bottle_count == 0\n      "Go to the store and buy some more, "\n    else\n      "Take #{humanize_bottles} down and pass it around, "\n    end\n  end\n\n  def remaining_bottles\n    reset_bottles if bottle_count == 0\n    "#{pluralize_bottles(bottle_count-1)} of beer on the wall.\\n"\n  end\n\nprivate\n\n  def reset_bottles\n    @bottle_count = 100\n  end\n\n  def humanize_bottles\n    bottle_count == 1 ? 'it' : 'one'\n  end\n\n  def pluralize_bottles(count)\n    if count == 0\n      "no more bottles"\n    elsif count == 1\n      "1 bottle"\n    else\n      "#{count} bottles"\n    end\n  end\n\n\nend	\N	\N	0	2	2014-10-21 03:20:35	2014-10-21 03:20:35	7	beer-song.rb
13	11	efcf1caa9fddc4bd1b590fc5	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.List (foldl')\nimport Data.Char (isSpace, isSymbol, isPunctuation, toLower)\nimport qualified Data.Map as M\n\ntype WordFreq = M.Map String Int\n\nwordCount :: String -> WordFreq\nwordCount = foldl' accumulate M.empty . uniqueWords\n\naccumulate :: WordFreq -> String -> WordFreq\naccumulate freq str = M.alter incrementMaybe str freq\n  where\n    incrementMaybe (Just x) = Just (x + 1)\n    incrementMaybe Nothing  = Just 1\n\nuniqueWords :: String -> [String]\nuniqueWords = splitWords . map toLower\n\n-- Adapted from Data.String.words\nsplitWords :: String -> [String]\nsplitWords s = case dropWhile isSeparator s of\n  "" -> []\n  s' -> w : splitWords s''\n    where\n      (w, s'') = break isSeparator s'\n\nisSeparator :: Char -> Bool\nisSeparator c = isSymbol c || isSpace c || isPunctuation c	\N	\N	0	1	2014-07-04 09:10:01	2014-07-04 09:10:01	8	WordCount.hs
14	11	f1349f387fa459259c5fc075	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.List (foldl')\nimport Data.Char (isAlphaNum, toLower)\nimport Data.Map (Map, empty, insertWith)\n\nwordCount :: String -> Map String Int\nwordCount = foldl' accumulate empty . words\n  where\n    accumulate freq str = insertWith (+) str 1 freq\n    words = splitWords . map toLower\n\n-- Adapted from Data.String.words\nsplitWords :: String -> [String]\nsplitWords s = case dropWhile isSeparator s of\n  "" -> []\n  s' -> w : splitWords s''\n    where\n      (w, s'') = break isSeparator s'\n\nisSeparator :: Char -> Bool\nisSeparator = not . isAlphaNum	2014-07-18 13:32:06	\N	0	2	2014-07-18 12:53:26	2014-07-18 12:53:26	8	WordCount.hs
470	41	a7761c1dc240bbf869cbcc0c	superseded	ruby	grains	class Grains\n  def initialize\n\n  end\n  def square(number)\n    2**(number-1)\n  end\n  def total\n    (\n  end\nend	\N	\N	0	1	2014-09-08 12:06:59	2014-09-08 12:06:59	270	grains.rb
471	41	6a1bad02c5ed1e219e9b97c1	pending	ruby	grains	class Grains\n  def initialize\n\n  end\n  def square(number)\n    2**(number-1)\n  end\n  def total\n    1.upto(65).each do |number|\n    @total = (0 + 2**(number-1))\n    end\n    @total - 1\n  end\nend	\N	\N	0	3	2014-09-10 03:30:09	2014-09-10 03:30:09	270	grains.rb
472	41	c8ec37445bed4d160bf4b239	pending	perl5	minesweeper	#!/usr/bin/perl\n\npackage Minesweeper;\n\nuse warnings;\nuse strict;\n\nsub count_adjacent_bombs {\n\n  my ($in) = @_;\n\n  my @in = split(/\\n/, $in);\n\n  my ($rows, $cols) = (scalar @in, length($in[0]));\n\n  for (0..$rows - 1) {\n    die "ArgumentError" if (length($in[$_]) != $cols);\n    if ($_ == 0 || $_ == $rows - 1) {\n      die "ArgumentError" if ($in[$_] ne "+" . ("-" x ($cols - 2)) . "+");\n    } else {\n      die "ArgumentError" if ($in[$_] !~ /^\\|[ *]+\\|$/);\n    }\n  }\n\n  for my $r (1..$rows - 2) {\n    for my $c (1..$cols - 2) {\n      next if (substr($in[$r], $c, 1) ne "*");\n\n      for (map {[ $_, $c - 1], [ $_, $c ], [ $_, $c + 1 ]} ($r - 1..$r + 1)) {\n        next if (substr($in[$_->[0]], $_->[1], 1) =~ /[+*|-]/);\n        substr($in[$_->[0]], $_->[1], 1)++;\n      }\n    }\n  }\n  \n  return join("", map { "$_\\n" } @in);\n}\n\n\n1;	\N	\N	0	1	2014-10-04 20:45:46	2014-10-04 20:45:46	271	Minesweeper.pm
473	41	26e15ba96620e80dc7a193f8	pending	python	leap	# Bridgette Eichelberger\r\n# Leap Year\r\n# 9/23/2014\r\n\r\n\r\ndef is_leap_year(year):\r\n    \r\n    # any year evenly divisible by 4 is a leap year\r\n    # but if a year is divisible by 100, only a leap year if also divisible by 400\r\n\r\n    if year % 4 == 0:\r\n        if year % 100 == 0:\r\n            if year % 400 == 0:\r\n                return True\r\n            else:\r\n                return False\r\n        return True\r\n    return False\r\n\r	\N	\N	0	1	2014-09-27 00:21:02	2014-09-27 00:21:02	272	year.py
15	11	cc9bbb8f0b4ee7587a89a0e5	pending	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  def on_earth\n    calculate_years(1.0)\n  end\n\n  def on_mercury\n    calculate_years(0.2408467)\n  end\n\n  def on_venus\n    calculate_years(0.61519726)\n  end\n\n  def on_mars\n    calculate_years(1.8808158)\n  end\n\n  def on_jupiter\n    calculate_years(11.862615)\n  end\n\n  def on_saturn\n    calculate_years(29.447498)\n  end\n\n  def on_uranus\n    calculate_years(84.016846)\n  end\n\n  def on_neptune\n    calculate_years(164.79132)\n  end\n\n  private\n\n  EARTH_YEAR_IN_SECONDS = 365.25 * 86400\n\n  def calculate_years(years_on_earth)\n    years = seconds / EARTH_YEAR_IN_SECONDS / years_on_earth\n    years.round(2)\n  end\nend	\N	\N	0	1	2014-07-05 04:23:06	2014-07-05 04:23:06	9	space-age.rb
16	11	f718ad4b253e6df35e97bd03	done	ruby	strain	class Array\n\n  def keep(&block)\n    result = []\n    each do |element|\n      result << element if yield element\n    end\n    result\n  end\n\n  def discard(&block)\n    result = []\n    each do |element|\n      result << element unless yield element\n    end\n    result\n  end\n\nend	2014-06-12 13:05:10	\N	0	4	2014-06-08 08:09:58	2014-06-08 08:09:58	10	array.rb
17	11	8e0a84c60b0ef1738990927e	superseded	ruby	strain	class Array\n\n  def keep(&block)\n    self.select do |element|\n      yield element\n    end\n  end\n\n  def discard(&block)\n    self.reject do |element|\n      yield element\n    end\n  end\n\nend	\N	\N	0	1	2014-08-05 22:38:56	2014-08-05 22:38:56	10	array.rb
18	11	ff80219f27aebc04231d852b	superseded	ruby	strain	class Array\n\n  def keep(&block)\n    self.map do |element|\n      element if yield element\n    end.compact\n  end\n\n  def discard(&block)\n    self - keep(&block)\n  end\n\nend	\N	\N	0	2	2014-10-02 19:51:12	2014-10-02 19:51:12	10	array.rb
19	11	e065e19d3ba221881be918b4	superseded	ruby	strain	class Array\n\n  def keep\n    self.select do |element|\n      yield element\n    end\n  end\n\n  def discard(&block)\n    self - keep(&block)\n  end\n\nend	\N	\N	0	3	2014-10-11 22:29:40	2014-10-11 22:29:40	10	array.rb
20	11	9e28c5fd6dd7643633bf29f6	done	javascript	hamming	var Hamming = function(a,b) {\n\tvar result=0;\n\tfor(var i=0; i<Math.min(a.length,b.length); i++)\n\t\tif(a.charAt(i)!=b.charAt(i))\n\t\t\tresult++;\n\treturn result;\n};\n\nmodule.exports.compute = Hamming;	2014-06-15 14:51:47	\N	0	1	2014-06-11 02:48:17	2014-06-11 02:48:17	11	hamming.js
21	11	743a1c1c5ccf53820bf94919	done	clojure	triangle	(ns triangle.test)\n\n(defn- equilateral? [a b c] (= a b c))\n(defn- illogical? [a b c] (or (>= c (+ a b))\n                        (>= b (+ a c))\n                        (>= a (+ b c))))\n(defn- isoscelese? [a b c] (or (= a b)\n                               (= b c)\n                               (= a c)))\n\n(defn triangle [a b c]\n  (cond (equilateral? a b c) :equilateral\n        (illogical? a b c) :illogical\n        (isoscelese? a b c) :isosceles\n        :else :scalene))	2014-10-01 07:52:52	\N	0	1	2014-09-25 02:57:52	2014-09-25 02:57:52	12	triangle.clj
22	11	788e01a919eeb2a1d66e9eb3	superseded	ruby	bob	class MessageAnalyzer\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def silence?\n    text.strip.empty?\n  end\n\n  def shouting?\n    text == text.upcase\n  end\n\n  def asking?\n    text.end_with?("?")\n  end\nend\n\nclass Bob\n  def hey(text)\n    message = MessageAnalyzer.new(text)\n\n    return "Fine. Be that way!" if message.silence?\n    return "Woah, chill out!" if message.shouting?\n    return "Sure." if message.asking?\n\n    "Whatever."\n  end\nend	\N	\N	0	3	2014-05-26 04:52:48	2014-05-26 04:52:48	13	bob.rb
23	11	d01e732f0e8f715e09800826	pending	ruby	bob	class Message\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def silence?\n    text.strip.empty?\n  end\n\n  def shouting?\n    text == text.upcase\n  end\n\n  def asking?\n    text.end_with?("?")\n  end\nend\n\nclass Bob\n  def hey(text)\n    message = Message.new(text)\n\n    return "Fine. Be that way!" if message.silence?\n    return "Woah, chill out!" if message.shouting?\n    return "Sure." if message.asking?\n\n    "Whatever."\n  end\nend	\N	\N	0	4	2014-07-13 11:52:06	2014-07-13 11:52:06	13	bob.rb
24	11	dc8dd8f4bad6749867f867d6	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    return "Fine. Be that way!" if is_empty?(message)\n    return "Woah, chill out!" if is_all_caps?(message)\n    return "Sure." if is_asking?(message)\n    "Whatever."\n  end\n\n  private\n\n  def is_empty?(message)\n    message.match(/^\\s*$/)\n  end\n\n  def is_all_caps?(message)\n    message.gsub(/[\\W\\d]+/, '').match(/^[A-Z]+$/)\n  end\n\n  def is_asking?(message)\n    return true if message[-1] == "?"\n  end\nend	\N	\N	0	1	2014-08-20 23:31:00	2014-08-20 23:31:00	13	bob.rb
25	11	7c6036a104fe863035a60905	superseded	ruby	bob	class MessageAnalyzer\n\n  attr_accessor :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def empty?\n    text.strip.empty?\n  end\n\n  def all_caps?\n    text == text.upcase\n  end\n\n  def asking?\n    text.end_with?("?")\n  end\nend\n\nclass Bob\n  def hey(text)\n    message = MessageAnalyzer.new(text)\n\n    return "Fine. Be that way!" if message.empty?\n    return "Woah, chill out!" if message.all_caps?\n    return "Sure." if message.asking?\n\n    "Whatever."\n  end\nend	\N	\N	0	2	2014-08-24 16:47:22	2014-08-24 16:47:22	13	bob.rb
26	11	44dd73f7ad2c875af17912fd	superseded	python	word-count	from collections import defaultdict\nfrom string import punctuation\n\ndef word_count(sentence):\n    counts = defaultdict(int)\n    sentence = filter(lambda c: c not in punctuation, sentence).lower()\n    words = sentence.split()\n    for word in words:\n        counts[word] += 1\n    return counts	\N	\N	0	1	2014-05-20 14:50:17	2014-05-20 14:50:17	14	wordcount.py
27	11	c8008cafdedf023adfb5f246	pending	python	word-count	from collections import Counter\nfrom string import punctuation\n\ndef word_count(sentence):\n    sentence = filter(lambda c: c not in punctuation, sentence).lower()\n    words = sentence.split()\n    return Counter(words)	\N	\N	0	2	2014-07-08 20:57:50	2014-07-08 20:57:50	14	wordcount.py
28	11	df8c9d5e0a14fd48bb6a1e52	done	python	hamming	import itertools\n\ndef hamming(dna0, dna1):\n    aggregate = itertools.izip_longest(dna0,dna1,'F')\n    count = sum(1 for pair in aggregate if pair[0] != pair[1])\n    return count	2014-05-30 22:44:52	\N	0	3	2014-05-20 15:16:54	2014-05-20 15:16:54	15	hamming.py
29	11	c3dfab1aac1f6a4640d2d8bc	superseded	python	hamming	def hamming(dna0, dna1):\n    dna0_len = len(dna0)\n    dna1_len = len(dna1)\n\n    if dna0_len == 0:\n        return dna1_len\n    elif dna1_len == 0:\n        return dna0_len\n\n    count = 0\n    dna_len = 0\n\n    if dna0_len > dna1_len:\n        count = dna0_len-dna1_len\n        dna_len = dna1_len\n    elif dna1_len > dna0_len:\n        count = dna1_len-dna0_len\n        dna_len = dna0_len\n    else:\n        dna_len = dna0_len\n    \n    for x in xrange(dna_len):\n        if dna0[x] != dna1[x]:\n            count += 1\n\n    return count	\N	\N	0	1	2014-08-13 05:36:18	2014-08-13 05:36:18	15	hamming.py
30	11	ae81dea9a37bc6ad0c4bf9c4	superseded	python	hamming	import itertools\n\ndef hamming(dna0, dna1):\n    aggregate = itertools.izip_longest(dna0,dna1,'F')\n    count = 0\n    for item in aggregate:\n        if item[0] != item[1]:\n            count+=1\n    return count	\N	\N	0	2	2014-08-22 07:04:46	2014-08-22 07:04:46	15	hamming.py
31	11	87cdd23773f726fb574644b5	done	haskell	anagram	module Anagram ( anagramsFor ) where\n\nimport Data.List as List\nimport Data.Char\n\nstringToLower :: String -> String\nstringToLower = map toLower \n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word candidates =\n   map (\\(w, _) -> w) (filter (\\(w, sortedW) -> sortedW == sortedWord) sortedCandidates)\n    where\n      lowerWord = stringToLower word\n      sortedWord = List.sort lowerWord\n      lowerCandidates = map stringToLower candidates\n      differentCandidates = filter (\\x -> x /= lowerWord) lowerCandidates\n      sortedCandidates = zip candidates (map List.sort differentCandidates)	2014-07-13 12:41:28	\N	0	1	2014-07-11 21:52:34	2014-07-11 21:52:34	16	Anagram.hs
32	11	8bc1a1afd7188657721dd693	superseded	python	grade-school	class School(object):\n\n    def __init__(self, name):\n        self.name = name\n        self.db = {}\n\n    def add(self, student, grade):\n        if grade in self.db.keys():\n            self.db[grade].add(student)\n        else:\n            self.db[grade] = set([student])\n\n    def grade(self, grade):\n        if grade in self.db:\n            return self.db[grade]\n        return set()\n\n    def sort(self):\n        sorteddb = {}\n        for grade, students in self.db.iteritems():\n            sortedstudents = sorted(students)\n            sorteddb[grade] = tuple(sortedstudents)\n        return sorteddb	\N	\N	0	1	2014-08-12 13:59:12	2014-08-12 13:59:12	17	school.py
33	11	cbfeb29139f723272aabc592	done	python	grade-school	import pickle\nfrom string import ascii_letters, maketrans, digits\n\n'''\nThis is just the atbash_cipher from a previous exercise\nmodified to allow numbers, uppercase, and lowercase switching.\n'''\n\n\ndef encode(text):\n    alphabet = ascii_letters + digits\n    code = text.translate(maketrans(alphabet, alphabet[::-1])).replace(" ", "")\n    return " ".join(code[i:i + 5] for i in xrange(0, len(code), 5))\n\n\ndef decode(text):\n    return encode(text).replace(" ", "")\n\n\nclass School(object):\n\n    def __init__(self, name):\n        self.name = name\n        self.encodeddb = encode(pickle.dumps({}))\n        self.db = pickle.loads(decode(self.encodeddb))\n\n    def add(self, student, grade):\n        database = self.db\n        if grade in database.keys():\n            database[grade].add(student)\n        else:\n            database[grade] = set([student])\n        self.encodeddb = encode(pickle.dumps(database))\n\n    def grade(self, grade):\n        if grade in self.db:\n            return self.db[grade]\n        return set()\n\n    def sort(self):\n        sorteddb = {}\n        for grade, students in self.db.iteritems():\n            sortedstudents = sorted(students)\n            sorteddb[grade] = tuple(sortedstudents)\n        return sorteddb	2014-08-20 07:21:29	\N	0	2	2014-08-17 07:28:48	2014-08-17 07:28:48	17	school.py
34	11	59e03860e0d5f5098973485b	superseded	elixir	beer-song	defmodule Beer do\n  @doc """\n    Write a program which produces the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall.\n\n    Note that Not all verses are identical.\n\n    The verse for 1 bottle is as follows:\n\n    ```plain\n    1 bottle of beer on the wall, 1 bottle of beer.\n    Take it down and pass it around, no more bottles of beer on the wall.\n    ```\n\n    ```plain\n    The verse for 0 bottles is as follows:\n    No more bottles of beer on the wall, no more bottles of beer.\n    Go to the store and buy some more, 99 bottles of beer on the wall.\n    ```\n\n    You can get multiple verses by passing in the verse to start from, and (optionally) the last verse to include.\n  """\n  def sing(start_verse) do\n    sing(start_verse, 0)\n  end\n\n  def sing(start_verse, end_verse) when start_verse <= end_verse do\n    "#{verse(start_verse)}\\n"\n  end\n\n  def sing(start_verse, end_verse) do\n    "#{verse(start_verse)}\\n#{sing(start_verse-1, end_verse)}"\n  end\n\n  def verse(0) do\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\n\n  def verse(1) do\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  def verse(2) do\n    "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n  end\n\n  def verse(n) do\n    "#{n} bottles of beer on the wall, #{n} bottles of beer.\\nTake one down and pass it around, #{n-1} bottles of beer on the wall.\\n"\n  end\nend	\N	\N	0	1	2014-05-14 08:52:43	2014-05-14 08:52:43	18	beer-song.exs
41	11	bee93f1576312c68e1cf2928	done	haskell	beer-song	module Beer where\nimport Text.Printf\nimport Data.Char\nimport Data.List\n\nverse :: Int -> String\nverse n = firstVerse n ++ secondVerse n\n    where firstVerse n = printf "%s of beer on the wall, %s of beer.\\n" (capitalise $ pluraliseBottle n) (pluraliseBottle n)\n          secondVerse 0 = "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n          secondVerse 1 = "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n          secondVerse n = printf "Take one down and pass it around, %s of beer on the wall.\\n" (pluraliseBottle $ n-1)\n          pluraliseBottle 0 = "no more bottles"\n          pluraliseBottle 1 = "1 bottle"\n          pluraliseBottle n = show n ++ " bottles"\n          capitalise s@(x:xs) | isLower x = (toUpper x):xs\n                              | otherwise = s\n\nsing :: Int -> Int -> String\nsing from to = (intercalate "\\n" . map verse $ reverse [to..from]) ++ "\\n"	2014-09-10 17:12:30	\N	0	1	2014-09-09 00:46:40	2014-09-09 00:46:40	23	beer-song.hs
42	11	ea157cfbe18a32714f5fd2ee	done	go	leap	package leap\n\n// Short-Circuit based leap year calculation\n// See: http://en.wikipedia.org/wiki/Leap_year#Algorithm\nfunc IsLeapYear(year int) bool {\n\tif year%4 != 0 {\n\t\treturn false\n\t}\n\n\tif year%100 != 0 {\n\t\treturn true\n\t}\n\n\treturn year%400 == 0\n}	2014-07-20 22:13:55	\N	0	4	2014-07-12 17:07:08	2014-07-12 17:07:08	24	leap.go
43	11	14991678c67f641917f9ace4	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tif year%4 != 0 {\n\t\treturn false\n\t}\n\n\tif year%100 != 0 {\n\t\treturn true\n\t}\n\n\tif year%400 != 0 {\n\t\treturn false\n\t}\n\n\treturn true\n}	\N	\N	0	1	2014-08-21 04:36:15	2014-08-21 04:36:15	24	leap.go
44	11	676934f3ae67d34322c6b8cb	superseded	go	leap	package leap\n\n// Short-Circuit based leap year calculation\n// See: http://en.wikipedia.org/wiki/Leap_year#Algorithm\nfunc IsLeapYear(year int) bool {\n\tif year%4 != 0 {\n\t\treturn false\n\t}\n\n\tif year%100 != 0 {\n\t\treturn true\n\t}\n\n\tif year%400 != 0 {\n\t\treturn false\n\t}\n\n\treturn true\n}	\N	\N	0	2	2014-10-05 10:24:23	2014-10-05 10:24:23	24	leap.go
45	11	6fed25fc08b4b518b3f51154	superseded	go	leap	package leap\n\n// Short-Circuit based leap year calculation\n// See: http://en.wikipedia.org/wiki/Leap_year#Algorithm\nfunc IsLeapYear(year int) bool {\n\tif year%4 != 0 {\n\t\treturn false\n\t}\n\n\tif year%100 != 0 {\n\t\treturn true\n\t}\n\n\treturn year%400 != 0\n}	\N	\N	0	3	2014-10-31 10:16:15	2014-10-31 10:16:15	24	leap.go
46	11	43ae04ed77d47afd129e51cf	superseded	javascript	anagram	function Anagram(string){\n        this.match = function(words){\n                var matches = [];\n                var sorted = string.split('').sort();\n                for(var i=0; i < words.length; i++) {\n                        if(words[i].split('').sort().join() == sorted.join()) {\n                                matches.push(words[i]);\n                        }\n                };\n                return matches;\n        };\n\n}	\N	\N	0	1	2014-06-05 22:49:16	2014-06-05 22:49:16	25	anagram.js
35	11	28bb9e70a148c4358c6b726a	pending	elixir	beer-song	defmodule Beer do\n  @doc """\n    Write a program which produces the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall.\n\n    Note that Not all verses are identical.\n\n    The verse for 1 bottle is as follows:\n\n    ```plain\n    1 bottle of beer on the wall, 1 bottle of beer.\n    Take it down and pass it around, no more bottles of beer on the wall.\n    ```\n\n    ```plain\n    The verse for 0 bottles is as follows:\n    No more bottles of beer on the wall, no more bottles of beer.\n    Go to the store and buy some more, 99 bottles of beer on the wall.\n    ```\n\n    You can get multiple verses by passing in the verse to start from, and (optionally) the last verse to include.\n  """\n  def sing(start_verse) do\n    sing(start_verse, 0)\n  end\n\n  def sing(start_verse, end_verse) when start_verse == end_verse do\n    verse(start_verse) <> "\\n"\n  end\n\n  def sing(start_verse, end_verse) do\n    verse(start_verse) <> "\\n" <> sing(start_verse-1, end_verse)\n  end\n\n  def verse(n) do\n    "#{bottles_phrase(n) |> String.capitalize} on the wall, #{bottles_phrase(n)}.\\n" <> \n    "#{take_one_phrase(n)}, #{bottles_phrase(n-1)} on the wall.\\n"\n  end\n\n  defp bottles_phrase(0), do: "no more bottles of beer"\n  defp bottles_phrase(1), do: "1 bottle of beer"\n  defp bottles_phrase(-1), do: "99 bottles of beer"\n  defp bottles_phrase(n), do: "#{n} bottles of beer"\n\n  defp take_one_phrase(0), do: "Go to the store and buy some more"\n  defp take_one_phrase(1), do: "Take it down and pass it around"\n  defp take_one_phrase(n), do: "Take one down and pass it around"\nend	\N	\N	0	2	2014-06-07 12:10:31	2014-06-07 12:10:31	18	beer-song.exs
36	11	cc6a9a5b90c4c8684860f28e	done	csharp	hamming	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic static class Hamming\r\n{\r\n    /// <summary>\r\n    /// Calculate the Hamming difference between two DNA strands.\r\n    /// </summary>\r\n    /// <param name="dna1">DNA strand one</param>\r\n    /// <param name="dna2">DNA strand two</param>\r\n    /// <returns>The Hamming difference</returns>\r\n    public static int Compute(string dna1, string dna2)\r\n    {\r\n        int diff = 0;\r\n        for(int i = 0; i < dna1.Length && i < dna2.Length; i++)\r\n        {\r\n            if(dna1[i] != dna2[i]) diff++;\r\n        }\r\n        return diff;\r\n    }\r\n}\r	2014-06-20 01:49:08	\N	0	1	2014-06-16 10:55:32	2014-06-16 10:55:32	19	Hamming.cs
37	11	f9cce6fa4de993b25fd71bf3	done	csharp	hamming	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic static class Hamming\r\n{\r\n    /// <summary>\r\n    /// Calculate the Hamming difference between two DNA strands.\r\n    /// </summary>\r\n    /// <param name="dna1">DNA strand one</param>\r\n    /// <param name="dna2">DNA strand two</param>\r\n    /// <returns>The Hamming difference</returns>\r\n    public static int Compute(string dna1, string dna2)\r\n    {\r\n        if(dna1 == null) throw new ArgumentNullException("dna1");\r\n        if(dna2 == null) throw new ArgumentNullException("dna2");\r\n\r\n        int diff = 0;\r\n        for(int i = 0; i < dna1.Length && i < dna2.Length; i++)\r\n        {\r\n            if(dna1[i] != dna2[i]) diff++;\r\n        }\r\n        return diff;\r\n    }\r\n}\r	2014-08-02 15:25:25	\N	0	2	2014-07-30 11:15:09	2014-07-30 11:15:09	19	Hamming.cs
38	11	09679cad03f4a5106a689c28	pending	haskell	leap	module LeapYear where\n\nisLeapYear :: Int -> Bool\nisLeapYear y\n  | mod y 400 == 0 = True\n  | mod y 100 == 0 = False\n  | mod y 4 == 0 = True\n  | otherwise = False	\N	\N	0	1	2014-05-26 03:04:25	2014-05-26 03:04:25	20	leapYear.hs
39	11	27d8d8673a6340147af038b1	pending	haskell	bob	module Bob (\n    responseFor\n)   where\n\nimport Data.Char\n\nresponseFor q\n    | all isSpace   q  = "Fine. Be that way!"\n    | isShout       q  = "Woah, chill out!"\n    | isQuestion    q  = "Sure."\n    | otherwise        = "Whatever."\n        \n\n-- | answers the question 'Is this guy shouting at me?'\nisShout xs = hasLetters xs && allUpper xs\n\n-- | answers the question 'Is this guy asking me something?'\nisQuestion xs  = last xs == '?'\n\nallUpper "" = True\nallUpper xs = all isUpper $ filter isAlpha xs\n\nhasLetters xs = not $ null $ filter isAlpha xs	\N	\N	0	1	2014-09-30 05:11:19	2014-09-30 05:11:19	21	Bob.hs
40	11	11201c993d62c37a419581eb	done	javascript	clock	var Clock = module.exports = function(min){\n    this.minutes = ((min % (24*60)) + 24*60) % (24*60);\n};\nClock.at = function(hours,minutes){\n    return new Clock((hours||0)*60+(minutes||0));\n};\nClock.prototype.toString = function(){\n    return ('00'+((this.minutes/60)^0)).slice(-2) + ':' + ('00'+(this.minutes%60)).slice(-2);\n};\nClock.prototype.plus = function(min){\n    return new Clock(this.minutes + min);\n}\nClock.prototype.minus = function(min){\n    return new Clock(this.minutes - min);\n}\nClock.prototype.equals = function(oClock){\n    return this.minutes === oClock.minutes;\n}	2014-05-15 06:23:14	\N	0	1	2014-05-12 21:29:33	2014-05-12 21:29:33	22	clock.js
47	11	24a90ebf5bef106974669b29	superseded	javascript	anagram	function Anagram(string) {\n\n  var canonicalAnagram = function(string) {\n    return string.split('').sort().join();\n  };\n\n  this.match = function(words) {\n    var thisCanonicalAnagram = canonicalAnagram(string);\n\n    return words.filter(function(word) {\n      return canonicalAnagram(word) == thisCanonicalAnagram;\n    });\n  };\n}	\N	\N	0	4	2014-06-16 13:52:35	2014-06-16 13:52:35	25	anagram.js
48	11	4eed1162466892b6a00455f0	done	javascript	anagram	function Anagram(target) {\n\n  var canonicalAnagram = function(nonCanonicalAnagram) {\n    return nonCanonicalAnagram.split('').sort().join();\n  };\n\n  this.match = function(words) {\n    var canonicalTarget = canonicalAnagram(target);\n\n    return words.filter(function(word) {\n      return canonicalAnagram(word) == canonicalTarget;\n    });\n  };\n}	2014-09-02 17:16:09	\N	0	5	2014-08-23 22:31:51	2014-08-23 22:31:51	25	anagram.js
49	11	f0aab60b539ba7951a54f186	superseded	javascript	anagram	function Anagram(string){\n  this.match = function(words){\n    var matches = [];\n    var sorted = string.split('').sort().join();\n    for(var i=0; i < words.length; i++) {\n      var word = words[i];\n      if(word.split('').sort().join() == sorted) {\n        matches.push(word);\n      }\n    };\n    return matches;\n  };\n\n}	\N	\N	0	2	2014-09-16 11:21:03	2014-09-16 11:21:03	25	anagram.js
50	11	9a488ae20d36d6292b26c766	superseded	javascript	anagram	function Anagram(string){\n  var sortString = function(string) {\n    return string.split('').sort().join();\n  }\n  this.match = function(words){\n    var matches = [];\n    var sorted = sortString(string);\n    for(var i=0; i < words.length; i++) {\n      var word = words[i];\n      if(sortString(word) == sorted) {\n        matches.push(word);\n      }\n    };\n    return matches;\n  };\n}	\N	\N	0	3	2014-10-12 15:36:27	2014-10-12 15:36:27	25	anagram.js
51	11	2e7c544b4080545931a3839c	superseded	elixir	bob	defmodule StringInquires do\n  import String\n\n  def blank?(nil),  do: true\n  def blank?(s),    do: strip(s) == ""\n  def question?(s), do: ends_with?(s, "?")\n  def all_caps?(s), do: upcase(s) == s\nend\n\n\ndefmodule Teenager do\n  import StringInquires\n\n  def hey(msg) do\n    if blank?(msg) do "Fine. Be that way!"\n      else if question?(msg) do "Sure."\n        else if all_caps?(msg) do "Woah, chill out!"\n          else "Whatever."\n        end\n      end\n    end\n  end\n\nend	\N	\N	0	1	2014-05-30 00:48:53	2014-05-30 00:48:53	26	bob.exs
52	11	2241f51aeda22a5d196bb6af	pending	elixir	bob	defmodule StringInquires do\n  import String\n\n  def blank?(nil),  do: true\n  def blank?(s),    do: strip(s) == ""\n  def question?(s), do: ends_with?(s, "?")\n  def all_caps?(s), do: upcase(s) == s\nend\n\n\ndefmodule Teenager do\n  import StringInquires\n\n  def hey(msg) do\n    cond do\n      blank?(msg) -> "Fine. Be that way!"\n      question?(msg) -> "Sure."\n      all_caps?(msg) -> "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\n\nend	\N	\N	0	2	2014-06-20 16:18:55	2014-06-20 16:18:55	26	bob.exs
53	11	2d9c7672b76021e7e591aad5	superseded	python	anagram	from collections import Counter\n\n\nclass Anagram(object):\n    def __init__(self, target):\n        self.target = target\n\n    def match(self, candidates):\n        target = self.target.lower()\n        target_histo = Counter(target)\n\n        result = []\n        for s in candidates:\n            sl = s.lower()\n            if target_histo == Counter(sl) and sl != target:\n                result.append(s)\n        return result	\N	\N	0	1	2014-06-10 22:09:48	2014-06-10 22:09:48	27	anagram.py
54	11	97ef55a73c46ebbc6ecdc7c4	superseded	python	anagram	from collections import Counter\n\n\nclass Anagram(object):\n    @staticmethod\n    def normalize(word):\n        wl = word.lower()\n        return wl, Counter(wl)\n\n    def __init__(self, target):\n        self._target = target\n        self._target_lower, self._target_counter = \\\n            self.__class__.normalize(target)\n\n    def match(self, candidates):\n        return [s for s in candidates if self.match_one(s)]\n\n    def match_one(self, word):\n        wl, c = self.__class__.normalize(word)\n        return wl != self._target_lower and c == self._target_counter	\N	\N	0	3	2014-06-19 16:16:49	2014-06-19 16:16:49	27	anagram.py
55	11	cb5c13f5008d31a9dc462fc7	superseded	python	anagram	from collections import Counter\n\n\nclass Anagram(object):\n    def __init__(self, target):\n        self.target = target\n\n    @staticmethod\n    def normalize(word):\n        wl = word.lower()\n        return wl, Counter(wl)\n\n    @property\n    def target(self):\n        return self._target\n\n    @target.setter\n    def target(self, new_val):\n        self._target = new_val\n        self._target_lower, self._target_counter = \\\n            self.__class__.normalize(new_val)\n\n    def match(self, candidates):\n        return [s for s in candidates if self.match_one(s)]\n\n    def match_one(self, word):\n        wl, c = self.__class__.normalize(word)\n        return wl != self._target_lower and c == self._target_counter	\N	\N	0	2	2014-08-19 17:51:13	2014-08-19 17:51:13	27	anagram.py
56	11	d848a8d0bdb83b7120d5a690	done	python	anagram	from collections import Counter\n\n\nclass Anagram(object):\n    @staticmethod\n    def normalize(word):\n        wl = word.lower()\n        return wl, Counter(wl)\n\n    def __init__(self, target):\n        self._target = target\n        self._target_lower, self._target_counter = \\\n            self.normalize(target)\n\n    def match(self, candidates):\n        return [s for s in candidates if self.match_one(s)]\n\n    def match_one(self, word):\n        wl, c = self.normalize(word)\n        return wl != self._target_lower and c == self._target_counter	2014-09-19 09:03:51	\N	0	4	2014-09-15 04:34:56	2014-09-15 04:34:56	27	anagram.py
57	12	ead0c3c03421b27bf908c26b	superseded	clojure	word-count	(ns phrase\n  (:use [clojure.string :only [split lower-case]]))\n\n(defn word-count [string]\n  (-> string\n      (lower-case)\n      (split #"[\\W]+")\n      (frequencies)))	\N	\N	0	4	2014-06-04 06:37:50	2014-06-04 06:37:50	28	word-count.clj
58	12	43ffa05cb7a42d6dc9a3cc9d	pending	clojure	word-count	(ns phrase\n  (:use [clojure.string :only [split lower-case]]))\n\n(defn word-count [string]\n  (-> string\n      (lower-case)\n      (split #"\\W+")\n      (frequencies)))	\N	\N	0	5	2014-06-28 11:09:31	2014-06-28 11:09:31	28	word-count.clj
59	12	c26d0bbfc8513b05d2fb8a45	superseded	clojure	word-count	(ns phrase\n  (:use [clojure.string :as str :only [split]]))\n\n(defn word-count [string]\n  (let [words (map #(.toLowerCase %) (remove #(= "" %) (str/split string #"\\W")))\n        counts {}]\n    ;; For the sake of this exercise, I'm going to pretend that the frequencies\n    ;; function (which does exactly what word-count needs to do) does not exist.\n    ;; (frequences words) ;; TADA!!\n    (reduce\n      (fn [counts x]\n        (assoc counts x (inc (get counts x 0))))\n      {}\n      words)))	\N	\N	0	1	2014-07-04 04:01:18	2014-07-04 04:01:18	28	word-count.clj
60	12	e662e1613094ff28c6387558	superseded	clojure	word-count	(ns phrase\n  (:use [clojure.string :as str :only [split]]))\n\n(defn word-count [string]\n  (let [words (map #(.toLowerCase %) (remove #(= "" %) (str/split string #"\\W")))]\n    ;; For the sake of this exercise, I'm going to pretend that the frequencies\n    ;; function (which does exactly what word-count needs to do) does not exist.\n    ;; (frequences words) ;; TADA!!\n    (reduce\n      (fn [counts x] (assoc counts x (inc (get counts x 0))))\n      {}\n      words)))	\N	\N	0	2	2014-08-16 17:47:30	2014-08-16 17:47:30	28	word-count.clj
61	12	e077bd6d743c350f10896515	superseded	clojure	word-count	(ns phrase\n  (:use [clojure.string :only [split lower-case]]))\n\n(defn word-count [string]\n  (let [words (split (lower-case string) #"[\\W]+")]\n    (frequencies words)))	\N	\N	0	3	2014-09-07 05:51:22	2014-09-07 05:51:22	28	word-count.clj
62	15	61f1857381459483a493d04a	superseded	elixir	anagram	defmodule Anagram do\n\n  def match(word, anagrams) do\n    Enum.filter(anagrams, matches_anagram?(&1, word))\n  end\n\n  defp sort_word(word) do\n    String.downcase(word)\n    |> String.codepoints\n    |> Enum.sort\n    |> Enum.join \n  end \n\n  defp matches_anagram?(anagram, word) do    \n    is_anagram?(anagram, word) && not_same_word?(anagram, word)\n  end\n\n  defp is_anagram?(anagram, word) do\n    sort_word(anagram) == sort_word(word)\n  end\n\n  defp not_same_word?(anagram, word) do     \n     anagram != word\n  end\nend	\N	\N	0	2	2014-08-26 05:39:57	2014-08-26 05:39:57	29	anagram.exs
63	15	8372fc2432ebf6c7f7481d1e	superseded	elixir	anagram	defmodule Anagram do\n\n  def match(word, anagrams) do   \n    Enum.filter(anagrams, is_word_anagram?(&1,word))\n    |> Enum.filter( not_same_word?(&1,word))\n  end\n\n  defp sort_word(word) do\n    String.downcase(word)\n    |> String.codepoints\n    |> Enum.sort\n    |> Enum.join \n  end \n\n  defp is_word_anagram?(anagram,word) do\n    sort_word(anagram) == sort_word(word)\n  end\n\n  defp not_same_word?(anagram,word) do\n    anagram != word\n  end\n\nend	\N	\N	0	3	2014-08-30 07:41:42	2014-08-30 07:41:42	29	anagram.exs
64	15	17c122c6c9a0ca2d44a18252	pending	elixir	anagram	defmodule Anagram do\n\n  def match(word, anagrams) do   \n    Enum.filter(anagrams, is_word_anagram?(&1, word))\n    |> Enum.filter( not_same_word?(&1, word))\n  end\n\n  defp sort_word(word) do\n    :lists.sort String.codepoints word\n    |> String.downcase\n  end \n\n  defp is_word_anagram?(anagram,word) do\n    sort_word(anagram) == sort_word(word)\n  end\n\n  defp not_same_word?(anagram,word) do\n    anagram != word\n  end\n\nend	\N	\N	0	4	2014-09-08 07:41:09	2014-09-08 07:41:09	29	anagram.exs
65	15	2f5ec13f1feb34a99ac09ca1	superseded	elixir	anagram	defmodule Anagram do\n\t\n  def match(dictionary, anagrams) do\n    Enum.filter(anagrams, matches_dictionary?(&1, dictionary))\n  end\n\n  defp sort_word(word) do\n    String.codepoints(word) \n    |> Enum.sort\n    |> Enum.join \n  end \n\n  defp matches_dictionary?(word, dictionary) do    \n  \tsort_word(word) == sort_word(dictionary) && word != dictionary\n  end\nend	\N	\N	0	1	2014-09-20 12:43:50	2014-09-20 12:43:50	29	anagram.exs
66	15	a4e8dfe2b273785844659f65	done	ruby	nucleotide-count	# Extend string to implement a to_a method, this has the nice\n# affect of allowing DNA to take any sort of class that can\n# be cast to an array.  This means we could do:\n#  DNA.new(['G', 'G', 'G'])\n#   or\n#  DNA.new('GGG')\n# I think this is worth the cost of extending the core String\n# class. \nclass String\n  def to_a\n    chars.to_a\n  end\nend\n\nclass DNA\n  VALID_NUCLEOTIDES = %w{ A T C G }\n\n  def self.valid_dna?(dna)\n    invalid_componets = dna.to_a.reject do |component|\n      VALID_NUCLEOTIDES.include? component\n    end\n    invalid_componets.empty? \n  end\n\n  attr_reader :components\n\n  def initialize(dna)\n    raise ArgumentError unless self.class.valid_dna?(dna)\n    @components = dna.to_a\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless self.class.valid_dna?(nucleotide.to_s)\n    components.count { |component| component == nucleotide }\n  end\n\n  def nucleotide_counts\n    VALID_NUCLEOTIDES.each.inject({}) do |nucleotides_hash, nucleotide|\n      nucleotides_hash[nucleotide] = count(nucleotide)\n      nucleotides_hash\n    end\n  end\nend	2014-09-01 09:36:29	\N	0	1	2014-08-23 02:18:06	2014-08-23 02:18:06	30	dna.rb
67	22	8f24660766b3608e2a166c01	done	clojure	phone-number	(ns phone)\n\n(def invalid "0000000000")\n\n(defn number [text]\n  (let [digits (clojure.string/join (re-seq #"\\d" text))\n        digits-count (count digits)]\n    (cond\n      (< digits-count 10) invalid\n      (= digits-count 10) digits\n      :else\n        (if (.startsWith digits "1")\n          (number (subs digits 1))\n          invalid))))\n\n(defn area-code [text] (subs (number text) 0 3))\n\n(defn pretty-print [text]\n  (let [num (number text)]\n    (str "(" (area-code num) ") " (subs num 3 6) "-" (subs num 6))))	2014-10-05 08:48:14	\N	0	1	2014-10-03 16:24:21	2014-10-03 16:24:21	31	phone.clj
68	22	5d21abeac692e124d46f83e3	done	haskell	grains	module Grains (square, total) where\nimport Data.List (foldl')\n\nsquare :: Integer -> Integer\nsquare x = 2^(x-1)\n\ntotal = foldl' (+) 0 $ map square $ enumFromTo 1 64	2014-11-03 06:18:20	\N	0	1	2014-10-31 00:06:32	2014-10-31 00:06:32	32	Grains.hs
69	22	e80b62e3df8ba1e12eeee91a	done	python	bob	class Bob:\n    def hey(self, msg):\n        msg = msg.strip()\n\n        if msg:\n            if msg.isupper() and any(c.isalpha() for c in msg):\n                return "Woah, chill out!"\n\n            if msg.endswith("?"):\n                return "Sure."\n\n            return "Whatever."\n        else:\n            return "Fine. Be that way!"	2014-10-07 22:20:25	\N	0	1	2014-09-28 03:19:22	2014-09-28 03:19:22	33	bob.py
70	22	bf55d9645df65766c31377d6	done	ruby	bob	class Bob\n  \n  def hey(input)\n    if empty_string?(input)  \n      'Fine. Be that way!'\n    elsif yelling?(input)\n      "Woah, chill out!"\n    elsif is_question?(input)\n      "Sure."\n    else  \n      "Whatever."\n    end\n  end\n\n  def is_question?(string)\n    string.end_with? "?"\n  end\n\n  def yelling?(string)\n    string == string.upcase && string =~ /[A-Z]/\n  end\n\n  def empty_string?(string)\n    string !~ /\\S/ ? true : false  \n  end\nend	2014-10-11 12:32:09	\N	0	2	2014-10-08 08:14:45	2014-10-08 08:14:45	34	bob.rb
71	22	3f80f6d394c5a48a591b05bc	superseded	ruby	bob	class Bob\n  \n  def hey(input)\n    if input !~ /\\S/    # check if it includes any non white space, this catches empty strings as well\n      'Fine. Be that way!'\n    elsif input == input.upcase && input =~ /[A-Z]/  # if input is the same upcased or not and it it includes at least one character A..Z\n      "Woah, chill out!"\n    elsif input[-1] == "?" # only if the last character is a question mark\n      "Sure."\n    else  # the rest of the situations\n      "Whatever."\n    end\n  end\n\nend	\N	\N	0	1	2014-10-08 14:10:44	2014-10-08 14:10:44	34	bob.rb
72	22	3a16378cb5b5a38039eeef2d	done	clojure	bob	(ns bob\n    (require [clojure.string :as string]))\n\n(defn- silence? [msg] (string/blank? msg))\n\n(defn- question? [msg] (.endsWith  msg "?"))\n\n(defn- letter? [msg] (some #(or (Character/isUpperCase %)\n     (Character/isLowerCase %)) msg))\n\n(defn- shouting? [msg] (and (= msg (string/upper-case msg))\n     (letter? msg)))\n\n(defn response-for [input]\n    (cond\n          (silence? input) "Fine. Be that way!"\n          (shouting? input) "Woah, chill out!"\n          (question? input) "Sure."\n          :else "Whatever."))	2014-10-02 07:02:16	\N	0	1	2014-09-29 07:33:53	2014-09-29 07:33:53	35	bob.clj
73	22	9cc83672ef9deb00ba392d7a	pending	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc sortedString(word string) string {\n\tletters := strings.Split(word, "")\n\tsort.Strings(letters)\n\treturn strings.Join(letters, "")\n}\n\nfunc Detect(subject string, candidates []string) []string {\n\tsubject = strings.ToLower(subject)\n\tsorted := sortedString(subject)\n\tvar anagrams []string\n\tfor _, word := range candidates {\n\t\tword = strings.ToLower(word)\n\t\tif word != subject && sortedString(word) == sorted {\n\t\t\tanagrams = append(anagrams, word)\n\t\t}\n\t}\n\treturn anagrams\n}	\N	\N	0	1	2014-09-28 15:19:55	2014-09-28 15:19:55	36	anagram.go
88	22	bcf2eae8edae9f52957a8997	done	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    string = ""\n    string << "Pling" if number % 3 == 0\n    string << "Plang" if number % 5 == 0\n    string << "Plong" if number % 7 == 0\n    string = number.to_s if string.empty?\n    string\n  end\nend	2014-11-27 12:19:08	\N	0	1	2014-11-19 21:59:16	2014-11-19 21:59:16	46	raindrops.rb
89	22	525698dc464caadee22b91eb	pending	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\nimport Data.IORef (IORef, readIORef, newIORef, writeIORef)\nimport System.Random \n\ndata Robot = Robot { name :: IORef String }\n\nrobotName :: Robot -> IO String\nrobotName = readIORef . name\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newIORef >>= return . Robot\n\nresetName :: Robot -> IO ()\nresetName r = generateName >>= writeIORef (name r)\n\ngenerateName :: IO String\ngenerateName = \n  let lettersPart = take 2 . randomRs ('A', 'Z') \n      numbersPart = take 3 . randomRs ('0', '9') \n      newName g = lettersPart g ++ numbersPart g\n  in newStdGen >>= return . newName	\N	\N	0	2	2014-10-22 20:06:49	2014-10-22 20:06:49	47	robot-name.hs
90	22	6e8985c015ce70550be1757b	superseded	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\nimport Data.IORef (IORef, readIORef, newIORef, writeIORef)\nimport System.Random \n\ndata Robot = Robot { name :: IORef String }\n\nrobotName :: Robot -> IO String\nrobotName = readIORef.name\n\nmkRobot :: IO Robot\nmkRobot = do\n  randomName <- generateName\n  newName <- newIORef randomName\n  return $ Robot newName\n\nresetName :: Robot -> IO ()\nresetName r = do\n  randomName <- generateName\n  writeIORef (name r) randomName\n\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO pattern\n  where pattern = [ letter, letter, digit, digit, digit ]\n        letter = ('A', 'Z')\n        digit = ('0', '9')	\N	\N	0	1	2014-10-27 04:01:49	2014-10-27 04:01:49	47	robot-name.hs
91	22	27d87034464f6362f416cb34	pending	haskell	binary	module Binary where\n\ntoDecimal :: String -> Int\ntoDecimal s | not (isValid s) = 0\n            | otherwise       = foldl (\\a d -> a*2 + d) 0 (map toBinaryDigit s)\n    where toBinaryDigit '1' = 1\n          toBinaryDigit _   = 0\n\nisValid :: String -> Bool\nisValid = all (\\x -> x == '1' || x == '0')	\N	\N	0	1	2014-10-19 17:38:22	2014-10-19 17:38:22	48	binary.hs
74	22	5c4d0e60f0ef612572376e71	done	javascript	queen-attack	var Coordinate = function(row, column){\n  this.row = row;\n  this.column = column;\n};\n\nCoordinate.prototype.isAt = function(row, column){\n  return this.row == row &&\n   this.column == column;\n};\n\nvar defineCoordinate = function(name, definitions, defaults, obj){\n  var coordinateName = name + 'Coordinate';\n  if (definitions && definitions[name]){\n    obj[coordinateName] = new Coordinate(definitions[name][0], definitions[name][1]);\n  } else {\n    obj[coordinateName] = defaults;\n  }\n\n  obj.__defineGetter__(name, function(){\n    return [obj[coordinateName].row,\n      this[coordinateName].column];\n  });\n};\n\nvar Queens = function(definitions){\n  this.gridSize = 8;\n\n  defineCoordinate('white', definitions, new Coordinate(0,3), this);\n  defineCoordinate('black', definitions, new Coordinate(7,3), this);\n\n  if (this.blackCoordinate.isAt(this.whiteCoordinate.row, \n                                this.whiteCoordinate.column)){\n    new Error("Queens cannot share the same space");\n  }\n};\n\nQueens.prototype.canAttack = function(){\n  return this.blackCoordinate.row == this.whiteCoordinate.row ||\n    this.blackCoordinate.column == this.whiteCoordinate.column ||\n    Math.abs(this.blackCoordinate.row - this.whiteCoordinate.row) ==\n    Math.abs(this.blackCoordinate.column - this.whiteCoordinate.column);\n};\n\nQueens.prototype.toString = function(){\n  var str = '';\n  for(var row=0; row<this.gridSize; row++){\n    for(var col=0; col<this.gridSize; col++){\n      if (this.blackCoordinate.isAt(row,col)){\n        str+= 'B ';\n      } else if (this.whiteCoordinate.isAt(row, col)){\n        str += 'W ';\n      } else {\n        str += 'O '; \n      }\n    }\n    str = str.trim();\n    str += '\\n';\n  }\n  return str;\n};\n\nmodule.exports = Queens;	2014-10-07 20:56:50	\N	0	1	2014-10-05 22:17:32	2014-10-05 22:17:32	37	queen-attack.js
75	22	b26f3ebb8c962405ddd16fad	pending	python	leap	def is_leap_year (year):\r\n\tif(year%400==0):\r\n\t\treturn True\r\n\telif (year%100==0):\r\n\t\treturn False\r\n\telif (year%4==0):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False	\N	\N	0	1	2014-09-27 09:46:15	2014-09-27 09:46:15	38	year.py
76	22	b82ed9ca01b9f1fdbc446b79	done	javascript	grains	var Grains = function () {\n};\n\nGrains.prototype.square = function(num) {\n\tvar grains = 0;\n\tif (num === 1) {\n\t\tgrains = 1;\n\t} else {\n\t\tgrains = this.square(num-1) * 2;\n\t}\n\treturn grains;\n};\n\nGrains.prototype.total = function() {\n\tvar result = 0;\n\n\tfor (var i = 64; i >= 1; i--) {\n\t\tresult += this.square(i);\n\t}\n\treturn result;\n};	2014-10-06 23:41:05	\N	0	1	2014-10-04 02:41:46	2014-10-04 02:41:46	39	grains.js
77	22	660dc7c87e15ab803d39939c	done	python	gigasecond	import datetime\ngigasecond = pow(10,9);\nminute = 60;\nhour = 60;\nday = 24;\n\ndef add_gigasecond(bday):\n\tdays = gigasecond/minute/hour/day;\n\tendDate = bday + datetime.timedelta(days=days);\n\treturn endDate;	2014-11-09 13:59:20	\N	0	1	2014-10-29 13:30:15	2014-10-29 13:30:15	40	gigasecond.py
78	22	dde018544746064a0877e247	superseded	fsharp	difference-of-squares	﻿module DifferenceOfSquares\r\n\r\ntype DifferenceOfSquares(number: int) = \r\n    let user_number = number\r\n\r\n    member this.sumOfSquares() =\r\n        [1..user_number] |> List.fold(fun acc x -> acc + (x * x)) 0\r\n\r\n    member this.squareOfSums() =\r\n        let sum = [1..user_number] |> List.sum\r\n        sum * sum\r\n\r\n    member this.difference() =\r\n        this.squareOfSums() - this.sumOfSquares()\r	\N	\N	0	1	2014-10-02 09:36:54	2014-10-02 09:36:54	41	difference-of-squares.fs
79	22	aac06a28391923b7707923fe	pending	fsharp	difference-of-squares	﻿module DifferenceOfSquares\r\n\r\ntype DifferenceOfSquares(number: int) = \r\n    let seq = {1..number}\r\n\r\n    member this.sumOfSquares() =\r\n        Seq.fold(fun acc x -> acc + (x * x)) 0 seq\r\n\r\n    member this.squareOfSums() =\r\n        let sum = Seq.sum seq\r\n        sum * sum\r\n\r\n    member this.difference() =\r\n        this.squareOfSums() - this.sumOfSquares()\r	\N	\N	0	2	2014-10-16 08:08:11	2014-10-16 08:08:11	41	difference-of-squares.fs
80	22	97cfd9bff55f252f898e99dd	done	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Calendar (Day, addDays)\n\nfromDay :: Day -> Day \nfromDay = addDays (giga `div` daySeconds)\n  where\n    giga = 10^9\n    daySeconds = 24*60*60	2014-10-13 18:42:59	\N	0	1	2014-10-03 09:09:43	2014-10-03 09:09:43	42	gigasecond.hs
81	22	f364f1d5df45ff471a26ef99	done	ruby	space-age	class SpaceAge\r\n\r\n\tdef initialize(seconds)\r\n\t\t@seconds = seconds\r\n\tend\r\n\r\n\tdef seconds\r\n\t\t@seconds\r\n\tend\r\n\t\r\n\tdef on_earth\r\n\t\tearth = (@seconds / 31557600.0).round(2)\r\n\tend\r\n\t\r\n\tdef on_planet(relative_to_earth)\r\n\t\t((@seconds / 31557600.0) / relative_to_earth).round(2)\r\n\tend\r\n\t\r\n\tdef on_mercury\r\n\t\tself.on_planet(0.2408467)\r\n\tend\r\n\t\r\n\tdef on_venus\r\n\t\tself.on_planet(0.61519726)\r\n\tend\r\n\t\r\n\tdef on_mars\r\n\t\tself.on_planet(1.8808158)\r\n\tend\r\n\t\r\n\tdef on_jupiter\r\n\t\tself.on_planet(11.862615)\r\n\tend\r\n\t\r\n\tdef on_saturn\r\n\t\tself.on_planet(29.447498)\r\n\tend\r\n\t\r\n\tdef on_uranus\r\n\t\tself.on_planet(84.016846)\r\n\tend\r\n\t\r\n\tdef on_neptune\r\n\t\tself.on_planet(164.79132)\r\n\tend\r\n\t\r\nend	2014-11-04 23:21:49	\N	0	1	2014-10-28 14:40:54	2014-10-28 14:40:54	43	space_age.rb
82	22	af92d92f381859b15c96d9b2	done	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  def count('', _), do: 0\n  def count(strand, nucleotide) do\n    Enum.count(strand, &(&1 === nucleotide))\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new @nucleotides, &{&1, DNA.count(strand, &1)}\n  end\nend	2014-11-01 19:35:54	\N	0	3	2014-10-26 09:58:49	2014-10-26 09:58:49	44	nucleotide-count.exs
83	22	d00412f15e610ea923ee9482	superseded	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  def count('', _), do: 0\n  def count(strand, nucleotide) do\n    Enum.count(strand, &(&1 === nucleotide))\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new(@nucleotides, &({&1, DNA.count(strand, &1)}))\n  end\nend	\N	\N	0	2	2014-11-01 18:39:46	2014-11-01 18:39:46	44	nucleotide-count.exs
84	22	d66afe5b314cf02485e41c29	superseded	elixir	nucleotide-count	defmodule DNA do\n  def count('', _), do: 0\n  def count(strand, nucleotide) do\n    Enum.count(strand, &(&1 === nucleotide))\n  end\n\n  def nucleotide_counts(strand) do\n    HashDict.new([?A, ?C, ?G, ?T], &({&1, DNA.count(strand, &1)}))\n  end\nend	\N	\N	0	1	2014-11-13 06:44:48	2014-11-13 06:44:48	44	nucleotide-count.exs
85	22	c5a9c74fe00512917544534f	pending	elixir	anagram	defmodule Anagram do\n\n  def match(target, words) do\n    anagram_key = to_anagram_key(target)\n    Enum.filter words, fn(word) ->\n      to_anagram_key(word) == anagram_key\n    end\n  end\n\n  defp to_anagram_key(word) do\n    normalize(word) |> tokenize\n  end\n\n  defp normalize(word) do\n    String.downcase(word)\n  end\n\n  defp tokenize(word) do\n    String.codepoints(word) |> Enum.sort\n  end\nend	\N	\N	0	3	2014-10-15 21:05:40	2014-10-15 21:05:40	45	anagram.exs
86	22	57ea0dc7649276b4e5bf141a	superseded	elixir	anagram	defmodule Anagram do\n\n  def match(target, words) do\n    anagram_key = to_anagram_key(target)\n    Enum.filter words, fn(word) ->\n      to_anagram_key(word) == anagram_key\n    end\n  end\n\n  defp to_anagram_key(word) do\n    normalized_word = String.downcase(word)\n    data = Enum.sort(String.codepoints(normalized_word))\n    Enum.join(data, "")\n  end\nend	\N	\N	0	1	2014-10-27 09:20:26	2014-10-27 09:20:26	45	anagram.exs
87	22	5bcfbbd032953fb3c4a09afc	superseded	elixir	anagram	defmodule Anagram do\n\n  def match(target, words) do\n    anagram_key = to_anagram_key(target)\n    Enum.filter words, fn(word) ->\n      to_anagram_key(word) == anagram_key\n    end\n  end\n\n  defp to_anagram_key(word) do\n    normalize(word) |> tokenize |> Enum.join\n  end\n\n  defp normalize(word) do\n    String.downcase(word)\n  end\n\n  defp tokenize(word) do\n    String.codepoints(word) |> Enum.sort\n  end\nend	\N	\N	0	2	2014-10-27 16:33:51	2014-10-27 16:33:51	45	anagram.exs
92	22	47a0ffc211cfe4930e2d5487	done	javascript	binary-search-tree	var Bst = function(num) {\n  this.data = num;\n  this.left = null;\n  this.right = null;\n};\n\nBst.prototype.insert = function(num) {\n  var node = new this.constructor(num);\n\n  if ( num <= this.data ) {\n    if ( !this.left ) {\n      this.left = node;\n    } else {\n      this.left.insert(num);\n    }\n  } else {\n    if ( !this.right ) {\n      this.right = node;\n    } else {\n      this.right.insert(num);\n    }\n  }\n};\n\nBst.prototype.each = function(func){\n  if (this.left) {\n    this.left.each(func);\n  }\n\n  func(this.data);\n\n  if (this.right) {\n    this.right.each( func );\n  }\n\n}	2014-11-11 13:19:50	\N	0	2	2014-11-07 03:57:54	2014-11-07 03:57:54	49	binaryTest.js
93	22	def9e239a63abe6385b277ba	superseded	javascript	binary-search-tree	var makeNode = function(val){\n  return {data: val,\n          left: {},\n          right: {},\n          }\n}\n\n\nvar Bst = function(loc){\n  this.data = 4;\n  this.left = {};\n  this.right = {};\n\n  this.insert = function(newNode){\n    var found = false;\n    var current = this.data;\n    var currentNode = this;\n\n    while(!found){\n\n      if(newNode <= current){\n        currentNode = currentNode.left;\n\n        if(currentNode.data === undefined){\n          currentNode = new makeNode(newNode);\n          console.log(currentNode)\n          this.left = currentNode;\n          found = true;\n        } else {\n          current = currentNode.data\n        }\n\n      } else {\n        currentNode = currentNode.right;\n        if(currentNode.data === undefined){\n          currentNode = new makeNode(newNode);\n          this.right = currentNode;\n          found = true;\n        } else {\n          current = currentNode.data\n        }\n      }\n    }\n\n    console.log('Right',this.right)\n  }\n}	\N	\N	0	1	2014-11-15 09:05:21	2014-11-15 09:05:21	49	binaryTest.js
94	22	8d5408d65dc4f701b5a66015	superseded	ruby	binary	class Binary\n\n  attr_accessor :binary_string\n\n  def initialize binary_string\n    @binary_string = binary_string\n  end\n\n  def to_decimal\n    binary_array.reverse_each.with_index.reduce( 0 ) do |sum, ( char, index )|\n      sum + base_10_of( char, index )\n    end\n  end\n\nprivate\n  \n  def binary_array\n     binary_string.match( /^[01]+$/ ).to_s.chars.map &:to_i\n  end\n\n  def base_10_of char, index\n    char * ( 2 ** index )\n  end\n\nend	\N	\N	0	1	2014-10-05 18:42:17	2014-10-05 18:42:17	50	binary.rb
95	22	e1788c69008ee46f1773b8bb	superseded	ruby	binary	class Binary\n\n  attr_accessor :binary_string\n\n  def initialize binary_string\n    @binary_string = binary_string\n  end\n\n  def to_decimal\n    digits_enumerator.reduce( 0 ) do |sum, ( char, index )|\n      sum + char * ( 2 ** index )\n    end\n  end\n\nprivate\n  \n  def binary_array\n     binary_string.match( /^[01]+$/ ).to_s.chars.map &:to_i\n  end\n\n  def digits_enumerator\n     binary_array.reverse_each.with_index\n  end\n\nend	\N	\N	0	2	2014-10-10 09:48:52	2014-10-10 09:48:52	50	binary.rb
96	22	73e384602edd4928bcd4500b	done	ruby	binary	class Binary\n\n  attr_reader :binary_string\n\n  def initialize binary_string\n    @binary_string = binary_string\n  end\n\n  def to_decimal\n    digits_with_index.reduce( 0 ) do |sum, ( char, index )|\n      sum + char * ( 2 ** index )\n    end\n  end\n\nprivate\n  \n  def binary_array\n     binary_string.match( /^[01]+$/ ).to_s.chars.map &:to_i\n  end\n\n  def digits_with_index\n     binary_array.reverse_each.with_index\n  end\n\nend	2014-10-20 20:37:37	\N	0	3	2014-10-16 09:36:13	2014-10-16 09:36:13	50	binary.rb
97	22	98df4ece7f4aa9143fe46974	done	ruby	crypto-square	class Crypto\n  \n  attr_accessor :input\n  \n  def initialize(input)\n    self.input = input\n    normalize_plaintext\n  end  \n  \n  def normalize_plaintext\n    self.input = self.input.downcase.gsub(/[^a-z0-9]/,"")\n  end  \n  \n  def size\n    Math.sqrt(self.input.size).ceil\n  end  \n  \n  def plaintext_segments\n    ret_val =[]\n    self.input.split("").each_slice(size) { |s| ret_val << s.join("")}\n    ret_val\n  end  \n  \n  def ciphertext\n    pt = plaintext_segments\n    ret_val = []\n    size.times do |row|\n      str = []\n      size.times do |col|\n        str << pt[col][row] if pt[col]  \n      end\n      ret_val << str.join("")\n    end  \n    ret_val.join("")\n  end  \n  \n  def normalize_ciphertext\n    ret_val =[]\n    ciphertext.split("").each_slice(5) { |s| ret_val << s.join("")}\n    ret_val.join(" ")\n  end \n \n  \nend  	2014-10-21 23:09:33	\N	0	1	2014-10-17 13:16:51	2014-10-17 13:16:51	51	crypto.rb
98	22	9f391543ab59830abb3f0333	pending	ruby	palindrome-products	class Palindromes\n  def initialize(min_factor: 1, max_factor: 100)\n    @min_factor, @max_factor = min_factor, max_factor\n  end\n\n  def generate\n    @palindromes = pairs_by_product.lazy.\n      map { |product, pairs| Product.new(product, pairs) }.\n      select(&:palindrome?)\n  end\n\n  def smallest\n    palindromes.min\n  end\n\n  def largest\n    palindromes.max\n  end\n\n  private\n\n  attr_reader :min_factor, :max_factor, :palindromes\n\n  def pairs_by_product\n    factors.product(factors).\n      uniq { |pair| pair.sort }.\n      group_by { |f1, f2| f1 * f2 }\n  end\n\n  def factors\n    (min_factor..max_factor).to_a\n  end\nend\n\n\nclass Product\n  include Comparable\n\n  attr_reader :value, :factors\n\n  def initialize(value, factors)\n    @value, @factors = value, factors\n  end\n\n  def palindrome?\n    value.to_s.reverse == value.to_s\n  end\n\n  def <=>(other)\n    value <=> other.value\n  end\nend	\N	\N	0	2	2014-10-08 18:27:08	2014-10-08 18:27:08	52	palindromes.rb
99	22	ff26bebc67bca4a9f9660382	superseded	ruby	palindrome-products	class Palindromes\n  def initialize(min_factor: 1, max_factor: 100)\n    @min_factor, @max_factor = min_factor, max_factor\n  end\n\n  def generate\n    factors = (min_factor..max_factor).to_a\n    product_pairs = factors.product(factors).\n      uniq { |a| a.sort }.\n      group_by { |x, y| x * y }\n\n    @palindromes = product_pairs.each_with_object([]) do |(product, pairs), a|\n      a << Palindrome.new(product, pairs) if product.to_s.reverse == product.to_s\n    end\n  end\n\n  def smallest\n    palindromes.min\n  end\n\n  def largest\n    palindromes.max\n  end\n\n  private\n\n  attr_reader :min_factor, :max_factor, :palindromes\nend\n\n\nclass Palindrome\n  include Comparable\n\n  attr_reader :value, :factors\n\n  def initialize(value, factors)\n    @value, @factors = value, factors\n  end\n\n  def <=>(other)\n    value <=> other.value\n  end\nend	\N	\N	0	1	2014-10-23 16:12:31	2014-10-23 16:12:31	52	palindrome-products.rb
100	22	775c1cdd84a64ab238916c86	superseded	ruby	hexadecimal	class Hexadecimal\n  attr_reader :hex_code\n\n  def initialize(hex_code)\n    @hex_code = hex_code.match(/[^0-9a-f]/) ? '0' : hex_code\n  end\n\n  def to_decimal\n    hex_code.chars.reverse_each.with_index.reduce(0) do |sum, (d, i)|\n      sum += %w(0 1 2 3 4 5 6 7 8 9 a b c d e f).index(d) * (16**i)\n    end\n  end\nend	\N	\N	0	1	2014-10-12 17:55:11	2014-10-12 17:55:11	53	hexadecimal.rb
101	22	996d34a35bbb8ab531fd83bc	done	ruby	hexadecimal	class Hexadecimal\n  attr_reader :hex_code\n\n  def initialize hex_code\n    @hex_code = hex_code.match(/[^0-9a-f]/) ? '0' : hex_code\n  end\n\n  def to_decimal\n    hex_code.chars.reverse_each.with_index.reduce 0 do |sum, (d, i)|\n      sum + %w(0 1 2 3 4 5 6 7 8 9 a b c d e f).index(d) * 16**i\n    end\n  end\nend	2014-10-24 04:14:05	\N	0	2	2014-10-13 09:49:36	2014-10-13 09:49:36	53	hexadecimal.rb
102	22	3a0a87bf6da7d4815ef3b7b5	pending	python	grade-school	class School:\n    def __init__(self, name):\n        self.name = name\n        self.db = {}\n\n    def add(self, student, grade_):\n        if grade_ not in self.db:\n            self.db[grade_] = set()\n        self.db[grade_].add(student)\n\n    def grade(self, grade_):\n        return self.db[grade_] if grade_ in self.db else set([])\n\n    def sort(self):\n        sorted_db = {}\n        for key in self.db:\n            sorted_db[key] = tuple(self.db[key])\n        return sorted_db	\N	\N	0	1	2014-10-05 11:20:44	2014-10-05 11:20:44	54	school.py
103	22	53ab94044b0402f9ce6addbf	pending	clojure	robot-name	(ns robot)\n\n(def letters (map char (range (int \\A) (inc (int \\Z)))))\n(def registry {})\n\n(defn- random-letter []\n  (nth letters (rand-int (count letters))))\n\n(defn- random-digit []\n  (rand-int 10))\n\n(defn- random-name []\n  (str (random-letter)\n       (random-letter)\n       (random-digit)\n       (random-digit)\n       (random-digit)))\n\n(defn- assign-random-name [id]\n  (def registry (assoc registry id (random-name))))\n\n(defn robot []\n  (let [id (gensym)]\n    (assign-random-name id)\n    id))\n\n(defn reset-name [robot]\n  (assign-random-name robot))\n\n(defn robot-name [robot]\n  (get registry robot))	\N	\N	0	1	2014-10-24 04:47:05	2014-10-24 04:47:05	55	robot.clj
104	28	f5918dbc1e10cbf618a0a620	superseded	ruby	word-count	class Words\n\n  attr_reader :phrase\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def count\n    split.each_with_object(Hash.new(0)) do |word, word_counts|\n      word_counts[word] += 1\n    end\n  end\n\n  def split\n    phrase.downcase.scan(%r{\\w+})\n  end\nend	\N	\N	0	2	2014-11-08 21:54:32	2014-11-08 21:54:32	56	word-count.rb
105	28	ef0743d6312b101f0ce8f1dd	done	ruby	word-count	class Words\n\n  attr_reader :phrase\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def count\n    word_counts = Hash.new(0)\n\n    each_word do |word|\n      word_counts[word] += 1\n    end\n\n    word_counts\n  end\n\n  def each_word\n    normalized_words = phrase.downcase.scan(%r{\\w+})\n    normalized_words.each do |word|\n      yield word\n    end\n  end\nend	2014-11-10 18:32:32	\N	0	3	2014-11-10 04:07:55	2014-11-10 04:07:55	56	word-count.rb
106	28	dce64750db78e7849b491cc8	superseded	ruby	word-count	class Words\n\n  attr_reader :words\n\n  def initialize phrase\n    @words = normalize(phrase)\n  end\n\n  def count\n    words.each_with_object(Hash.new(0)) do |word, word_counts|\n      word_counts[word] += 1\n    end\n  end\n\n  def normalize phrase\n    phrase.downcase.scan(%r{\\w+})\n  end\nend	\N	\N	0	1	2014-11-23 19:29:09	2014-11-23 19:29:09	56	word-count.rb
107	29	9167d1f92eccfcb061f4dcc6	pending	perl5	list-ops	package ListOps;\nuse Modern::Perl;\n\nsub map{\n\tmy($sub, $list_ref) = @_;\n\tmy @mapped;\n\tpush @mapped, $sub->($_) for @$list_ref;\n\t\\@mapped;\n}\n\nsub reduce{\n\tmy($sub, $list_ref) = @_;\n\tmy $reduced = shift @$list_ref;\n\t$reduced = $sub->($reduced, $_) for @$list_ref;\n\t$reduced;\n}\n\n#not sure what length is supposed to do in other language...\nsub length{ scalar @{shift()} }\n\n1;	\N	\N	0	1	2014-07-18 02:26:27	2014-07-18 02:26:27	57	ListOps.pm
108	29	779c70863497ebad916d63eb	superseded	csharp	etl	﻿using System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ETLExercism\r\n{\r\n    public static class ETL\r\n    {\r\n        public static Dictionary<string, int> Transform(Dictionary<int, IList<string>> datasets)\r\n        {\r\n            Dictionary<string, int> completeTransform = new Dictionary<string, int>();\r\n            foreach (KeyValuePair<int, IList<string>> dataset in datasets)\r\n            {\r\n                Dictionary<string, int> transformedDataset = TransformDataset(dataset.Key, dataset.Value);\r\n                completeTransform.AddRange(transformedDataset);\r\n            }\r\n            return completeTransform;\r\n\r\n        }\r\n\r\n        private static Dictionary<string, int> TransformDataset(int key, IEnumerable<string> values)\r\n        {\r\n            return values.ToDictionary(v => v.ToLowerInvariant(), x => key);\r\n        }\r\n    }\r\n    internal static class DictionaryExtensions\r\n    {\r\n        public static void AddRange(this Dictionary<string, int> dictionary, Dictionary<string, int> dictionaryToAppend)\r\n        {\r\n            foreach (KeyValuePair<string, int> pair in dictionaryToAppend)\r\n            {\r\n                dictionary.Add(pair.Key, pair.Value);\r\n            }\r\n        }\r\n    } \r\n}\r	\N	\N	0	1	2014-03-24 08:14:14	2014-03-24 08:14:14	58	ETL.cs
109	29	07bb3b2571f6a501b13f8eee	done	csharp	etl	﻿using System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ETLExercism\r\n{\r\n    public static class ETL\r\n    {\r\n        public static Dictionary<string, int> Transform(Dictionary<int, IList<string>> datasets)\r\n        {\r\n            IEnumerable<Dictionary<string, int>> transformedDatasets = datasets.Select(d => d.Value.ToDictionary(v => v.ToLowerInvariant(), x => d.Key));\r\n            return transformedDatasets.SelectMany(d => d).ToDictionary(d => d.Key, d => d.Value);\r\n        }\r\n    }\r\n}\r	2014-06-14 02:42:19	\N	0	2	2014-06-09 02:02:43	2014-06-09 02:02:43	58	ETL.cs
110	29	c58c853a72b495eb456e8d02	pending	haskell	binary-search-tree	module BST (\n    bstLeft,\n    bstRight,\n    bstValue,\n    singleton,\n    insert,\n    fromList,\n    toList\n) where\n\nimport Data.List (foldl')\n\ndata Tree a = Nil | Node (Tree a) a (Tree a)\n\nbstValue :: Tree a -> a\nbstValue (Node _ x _) = x\nbstValue Nil          = error "empty tree"\n\nsingleton :: a -> Tree a\nsingleton x = Node Nil x Nil\n\n-- This tree implementation permits multiple elements\ninsert :: (Ord a) => a -> Tree a -> Tree a\ninsert x Nil          = singleton x\ninsert x (Node l y r) = if x > y\n                          then Node l y (insert x r)\n                          else Node (insert x l) y r\n\nbstLeft :: Tree a -> Maybe (Tree a)\nbstLeft Nil          = Nothing\nbstLeft (Node l _ _) = Just l\n\nbstRight :: Tree a -> Maybe (Tree a)\nbstRight Nil          = Nothing\nbstRight (Node _ _ r) = Just r\n\nfromList :: (Ord a) => [a] -> Tree a\nfromList = foldl' (flip insert) Nil \n\ntoList :: Tree a -> [a]\ntoList Nil          = []\ntoList (Node l y r) = toList l ++ [y] ++ toList r	\N	\N	0	1	2014-05-05 23:03:16	2014-05-05 23:03:16	59	binary-search-tree.hs
111	29	1e1cef9a2d94d1a448ba37ad	superseded	ruby	bob	class Bob\n  def hey(query)\n    case query\n    when /\\n.*\\n/s\n      return 'Whatever.'\n    when /^ *$/\n      return 'Fine. Be that way!'\n    when /^[0-9, ]*\\?$/\n      return 'Sure.'\n    when /^[0-9, ]*$/\n      return 'Whatever.'\n    when /^[0-9,A-Z%\\^\\*@#\\$\\(\\)! ]*[!\\?]?$/\n      return 'Woah, chill out!'\n    when /\\?$/\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	\N	0	1	2014-05-30 16:44:36	2014-05-30 16:44:36	60	bob.rb
112	29	85057ed06683caeb55338f74	done	ruby	bob	class Bob\n  def hey(query)\n    return 'Woah, chill out!'   if shout?(query)\n    return 'Fine. Be that way!' if silence?(query)\n    return 'Sure.'              if query?(query)\n    return 'Whatever.'\n  end\n\n  def query?(query)\n    return !!(query.match(/\\?\\Z/))\n  end\n\n  def shout?(query)\n    return !!(query.match(/[A-Z]/) && !query.match(/[a-z]/))\n  end\n\n  def silence?(query)\n    return !!(query.match(/\\A\\s*\\Z/))\n  end\nend	2014-08-14 16:20:37	\N	0	2	2014-08-04 09:14:52	2014-08-04 09:14:52	60	bob.rb
113	29	911195d658d301b403f194b7	done	javascript	queen-attack	var Coordinate = function(row, column){\n  this.row = row;\n  this.column = column;\n};\n\nCoordinate.prototype.isAt = function(row, column){\n  return this.row == row &&\n   this.column == column;\n};\n\nvar defineCoordinate = function(name, definitions, defaults, obj){\n  var coordinateName = name + 'Coordinate';\n  if (definitions && definitions[name]){\n    obj[coordinateName] = new Coordinate(definitions[name][0], definitions[name][1]);\n  } else {\n    obj[coordinateName] = defaults;\n  }\n\n  obj.__defineGetter__(name, function(){\n    return [obj[coordinateName].row,\n      this[coordinateName].column];\n  });\n};\n\nvar Queens = function(definitions){\n  this.gridSize = 8;\n\n  defineCoordinate('white', definitions, new Coordinate(0,3), this);\n  defineCoordinate('black', definitions, new Coordinate(7,3), this);\n\n  if (this.blackCoordinate.isAt(this.whiteCoordinate.row, \n                                this.whiteCoordinate.column)){\n    new Error("Queens cannot share the same space");\n  }\n};\n\nQueens.prototype.canAttack = function(){\n  return this.blackCoordinate.row == this.whiteCoordinate.row ||\n    this.blackCoordinate.column == this.whiteCoordinate.column ||\n    Math.abs(this.blackCoordinate.row - this.whiteCoordinate.row) ==\n    Math.abs(this.blackCoordinate.column - this.whiteCoordinate.column);\n};\n\nQueens.prototype.toString = function(){\n  var str = '';\n  for(var row=0; row<this.gridSize; row++){\n    for(var col=0; col<this.gridSize; col++){\n      if (this.blackCoordinate.isAt(row,col)){\n        str+= 'B ';\n      } else if (this.whiteCoordinate.isAt(row, col)){\n        str += 'W ';\n      } else {\n        str += 'O '; \n      }\n    }\n    str = str.trim();\n    str += '\\n';\n  }\n  return str;\n};\n\nmodule.exports = Queens;	2014-06-17 15:21:03	\N	0	1	2014-06-16 00:04:45	2014-06-16 00:04:45	61	queen-attack.js
114	29	331e6896e24a82d3b985ed7e	superseded	haskell	binary	module Binary (toDecimal) where\n\ntoDecimal :: String -> Int\ntoDecimal b\n  | all (`elem` "10") b = sum . map (\\(x, y) -> if x == '1' then 2^y else 0) $ zip (reverse b) [0..]\n  | otherwise = 0	\N	\N	0	1	2014-05-21 00:33:53	2014-05-21 00:33:53	62	binary.hs
115	29	dbece1056e00a6c04a9f831c	done	haskell	binary	module Binary (toDecimal) where\n\ntoDecimal :: String -> Int\ntoDecimal b\n  | all (`elem` "10") b = sum $ zipWith (\\x y -> if x == '1' then 2^y else 0) b positions\n  | otherwise = 0\n  where len = length b\n        positions = [len-1, len-2 .. 0]	2014-06-20 19:41:43	\N	0	2	2014-06-11 17:57:14	2014-06-11 17:57:14	62	binary.hs
116	29	86568a0d29d7d20e48bde75c	done	coffeescript	word-count	class Words\n  constructor: (string) ->\n    string_array = string.replace(/[^\\d\\w\\s]/g, '').replace(/\\s\\s/g, ' ').toLowerCase().split ' '\n    @count = { }\n    for word in string_array\n      if @count[word]\n        @count[word] = @count[word] + 1\n      else\n        @count[word] = 1\n\nmodule.exports = Words	2014-07-05 10:46:03	\N	0	1	2014-06-25 16:11:58	2014-06-25 16:11:58	63	words.coffee
117	29	8e083433bf0aba49d01bb0d6	pending	elixir	anagram	defmodule Anagram do\n\n  defp normalise(word) do\n    String.downcase(word) |> String.codepoints |> Enum.sort\n  end\n\n  defp anagram_of?(word) do\n    fn w -> normalise(word) == normalise(w) end\n  end\n\n  defp unequal_caseless?(word) do\n    fn w -> String.downcase(w) != String.downcase(word) end\n  end\n\n  @spec predicate_and?([(any -> boolean)]) :: (any -> boolean)\n  def predicate_and?([]),     do: fn _ -> true end\n  def predicate_and?([f|fs]), do: &(f.(&1) and predicate_and?(fs).(&1))\n\n  def match(word, words) do\n    Enum.filter(words,\n                predicate_and?([anagram_of?(word), unequal_caseless?(word)]))\n  end\nend	\N	\N	0	1	2014-06-19 11:16:16	2014-06-19 11:16:16	64	anagram.exs
118	29	e2156222bb51b4785be167c0	superseded	haskell	beer-song	module Beer\n  ( sing\n  , verse\n  ) where\n\n\nimport Data.Char\nimport Text.Printf\n\n\nverse :: Integer -> String\nverse i =\n  let (nextCountOfBottles,orderFmt) =\n        if i == 0 then\n          (99, "Go to the store and buy some more, %s on the wall.")\n        else\n          (i - 1, printf "Take %s down and pass it around, %%s on the wall." (if i == 1 then "it" else "one"))\n      order = printf orderFmt (bottlesOfBeerToStr nextCountOfBottles)::String\n      currentBottlesOfBeer = bottlesOfBeerToStr i\n      (v:erse) = printf "%s on the wall, %s.\\n%s\\n" currentBottlesOfBeer currentBottlesOfBeer order\n  in (toUpper v:erse)\n  where\n    bottlesToStr 0 = ("no more", "s")\n    bottlesToStr 1 = ("1", "")\n    bottlesToStr i = (show i, "s")\n    bottlesOfBeerToStr :: Integer -> String\n    bottlesOfBeerToStr i = uncurry (printf "%s bottle%s of beer") (bottlesToStr i)\n\n\nsing :: Integer -> Integer -> String\nsing i j = concat $ map ((++ "\\n") . verse) [i,i-1..j]	\N	\N	0	1	2014-04-22 23:08:52	2014-04-22 23:08:52	65	Beer.hs
127	29	0ac95ca189323b74211b3a9a	done	clojure	rna-transcription	(ns dna)\n\n(defn transcribe [strand map-function]\n  (apply str (map map-function (seq strand))))\n\n(defn to-rna [dna-strand]\n  (defn complements [dna-nucleotide]\n    (case dna-nucleotide\n      \\G \\C\n      \\C \\G\n      \\T \\A\n      \\A \\U\n      (throw (AssertionError. "Unknown DNA-nucleotide"))))\n  (transcribe dna-strand complements))	2014-08-01 08:08:12	\N	0	2	2014-07-29 23:03:42	2014-07-29 23:03:42	68	dna.clj
119	29	d9a244dbf03e9aff2a919001	superseded	haskell	beer-song	module Beer\n  ( sing\n  , verse\n  ) where\n\n\nimport Data.Char\nimport Text.Printf\n\n\nverse :: Integer -> String\nverse i =\n  let (nextCountOfBottles,orderFmt) =\n        if i == 0 then\n          (99, "Go to the store and buy some more")\n        else\n          (i - 1, printf "Take %s down and pass it around" (if i == 1 then "it" else "one"))\n      order = printf (orderFmt ++ ", " ++ onTheWallFmt ++ ".") (bottlesOfBeerToStr nextCountOfBottles)::String\n      currentBottlesOfBeer = bottlesOfBeerToStr i\n      (v:erse) = printf (onTheWallFmt ++ ", %s.\\n%s\\n") currentBottlesOfBeer currentBottlesOfBeer order\n  in (toUpper v:erse)\n  where\n    bottlesToStr 0 = ("no more", "s")\n    bottlesToStr 1 = ("1", "")\n    bottlesToStr i = (show i, "s")\n    bottlesOfBeerToStr :: Integer -> String\n    bottlesOfBeerToStr i = uncurry (printf "%s bottle%s of beer") (bottlesToStr i)\n    onTheWallFmt = "%s on the wall"\n\n\nsing :: Integer -> Integer -> String\nsing i j = concat $ map ((++ "\\n") . verse) [i,i-1..j]	\N	\N	0	2	2014-05-04 13:00:45	2014-05-04 13:00:45	65	Beer.hs
120	29	6662e6c6df95040b42c40ca9	superseded	haskell	beer-song	module Beer\n  ( sing\n  , verse\n  ) where\n\n\nimport Data.Char\nimport Text.Printf\n\n\nverse :: Integer -> String\nverse i =\n  let (nextCountOfBottles,orderFmt) =\n        if i == 0 then\n          (99, "Go to the store and buy some more")\n        else\n          (i - 1, printf "Take %s down and pass it around" (if i == 1 then "it" else "one"))\n      order = printf (orderFmt ++ ", " ++ onTheWallFmt ++ ".") (bottlesOfBeerToStr nextCountOfBottles)::String\n      currentBottlesOfBeer = bottlesOfBeerToStr i\n      (v:erse) = printf (onTheWallFmt ++ ", %s.\\n%s\\n") currentBottlesOfBeer currentBottlesOfBeer order\n  in (toUpper v:erse)\n  where\n    bottlesToStr 0 = ("no more", "s")\n    bottlesToStr 1 = ("1", "")\n    bottlesToStr i = (show i, "s")\n    bottlesOfBeerToStr :: Integer -> String\n    bottlesOfBeerToStr i = uncurry (printf "%s bottle%s of beer") (bottlesToStr i)\n    onTheWallFmt = "%s on the wall"\n\n\nsing :: Integer -> Integer -> String\nsing i j = concatMap ((++ "\\n") . verse) [i,i-1..j]	\N	\N	0	3	2014-07-16 23:26:27	2014-07-16 23:26:27	65	Beer.hs
121	29	22dd9d4c327388ee487ef9c4	superseded	haskell	beer-song	module Beer\n  ( sing\n  , verse\n  ) where\n\n\nimport Data.Char\nimport Text.Printf\n\n\nverse :: Integer -> String\nverse i =\n  let (nextCountOfBottles,orderTpl) =\n        if i == 0 then\n          (99, "Go to the store and buy some more")\n        else\n          (i - 1, printf "Take %s down and pass it around" (if i == 1 then "it" else "one"))\n      order = printf (orderTpl ++ ", " ++ onTheWallTpl ++ ".") (bottlesOfBeerToStr nextCountOfBottles)::String\n      currentBottlesOfBeer = bottlesOfBeerToStr i\n      (v:erse) = printf (onTheWallTpl ++ ", %s.\\n%s\\n") currentBottlesOfBeer currentBottlesOfBeer order\n  in (toUpper v:erse)\n  where\n    bottlesToStr 0 = ("no more", "s")\n    bottlesToStr 1 = ("1", "")\n    bottlesToStr i = (show i, "s")\n    bottlesOfBeerToStr :: Integer -> String\n    bottlesOfBeerToStr i = uncurry (printf "%s bottle%s of beer") (bottlesToStr i)\n    onTheWallTpl = "%s on the wall"\n\n\nsing :: Integer -> Integer -> String\nsing i j = unlines $ map verse [i,i-1..j]	\N	\N	0	4	2014-07-26 16:10:12	2014-07-26 16:10:12	65	Beer.hs
122	29	848316244210a37d7bd55f19	pending	haskell	beer-song	module Beer\n  ( sing\n  , verse\n  ) where\n\n\nimport Data.Char\nimport Text.Printf\n\n\nverse :: Integer -> String\nverse i =\n  let (nextCountOfBottles,orderTpl) =\n        if i == 0 then\n          (99, "Go to the store and buy some more,")\n        else\n          (i - 1, printf "Take %s down and pass it around," (if i == 1 then "it" else "one"))\n      order = printf (unwords [orderTpl, onTheWallTpl '.']) (bottlesOfBeerToStr nextCountOfBottles)::String\n      currentBottlesOfBeer = bottlesOfBeerToStr i\n      (v:erse) = printf (unwords [onTheWallTpl ',', "%s.\\n%s\\n"]) currentBottlesOfBeer currentBottlesOfBeer order\n  in (toUpper v:erse)\n  where\n    bottlesToStr 0 = ("no more", "s")\n    bottlesToStr 1 = ("1", "")\n    bottlesToStr i = (show i, "s")\n    bottlesOfBeerToStr :: Integer -> String\n    bottlesOfBeerToStr i = uncurry (printf "%s bottle%s of beer") (bottlesToStr i)\n    onTheWallTpl lastPunct = "%s on the wall" ++ [lastPunct]\n\n\nsing :: Integer -> Integer -> String\nsing i j = unlines $ map verse [i,i-1..j]	\N	\N	0	5	2014-10-04 23:17:45	2014-10-04 23:17:45	65	Beer.hs
123	29	301556fe98b87f306ec43029	done	ruby	raindrops	class Raindrops\n\n  def self.convert(num)\n\n    hash = {3 => 'Pling', 5 => 'Plang', 7 => 'Plong'}\n    div_check = false\n    output = ""\n\n    hash.each do |key, value|\n      div_check = true if num % key == 0\n    end\n\n    if !(div_check)\n      output = num\n    else\n      hash.each do |prime, string|\n        if num % prime == 0\n          output += string\n        end\n      end\n    end\n    output.to_s\n  end\nend	2014-05-30 00:15:21	\N	0	1	2014-05-23 22:40:28	2014-05-23 22:40:28	66	raindrops.rb
124	29	dddf60637658be8845eb9624	superseded	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Leap\r\n{\r\n    public class Year\r\n    {\r\n        public static bool IsLeap(int year)\r\n        {\r\n\r\n            if (year % 100 == 0)\r\n            {\r\n                return year % 400 == 0; //true when the year is divisible by 400 other years divisible by 100 are false.  i.e. 1900 --> false, 2000 --> true\r\n            }\r\n            else\r\n            {\r\n                return year % 4 == 0; //true when the year is divisible by 4 and not divisible by 100 otherwise false.  i.e. 1996 --> true, 1997 --> false\r\n            }\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-03-30 14:32:49	2014-03-30 14:32:49	67	Leap.cs
125	29	1a354846e7c979577482ab17	pending	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Leap\r\n{\r\n    /// <summary>\r\n    /// A utility class for determining characteristics of a year.\r\n    /// </summary>\r\n    public class Year\r\n    {\r\n        /// <summary>\r\n        /// Determines whether the specified year is a leap year.\r\n        /// </summary>\r\n        /// <param name="year">The year.</param>\r\n        /// <returns><c>true</c> if the <paramref name="year"/> is a leap year; otherwise <c>false</c>.</returns>\r\n        /// <exception cref="System.ArgumentOutOfRangeException"><paramref name="year"/> is less than or equal to zero.</exception>\r\n        public static bool IsLeap(int year)\r\n        {\r\n            if (year <= 0) throw new ArgumentOutOfRangeException("year", "The year parameter must be greater than zero.");\r\n\r\n            if (year % 100 == 0)\r\n            {\r\n                return year % 400 == 0; //true when the year is divisible by 400 other years divisible by 100 are false.  i.e. 1900 --> false, 2000 --> true\r\n            }\r\n            else\r\n            {\r\n                return year % 4 == 0; //true when the year is divisible by 4 and not divisible by 100 otherwise false.  i.e. 1996 --> true, 1997 --> false\r\n            }\r\n        }\r\n    }\r\n}\r	\N	\N	0	2	2014-07-26 09:49:28	2014-07-26 09:49:28	67	Leap.cs
126	29	1fc4da6d38f91eea1274cdec	superseded	clojure	rna-transcription	(ns dna)\r\n\r\n(defn valid-dna-strand?\r\n\t[dna-strand]\r\n\t(= (re-find #"[^GCTA]" dna-strand) nil))\r\n\r\n(defn to-rna-char\r\n\t[dna-char]\r\n  (case dna-char\r\n    "G" "C"\r\n    "C" "G"\r\n    "T" "A"\r\n    "A" "U"))\r\n\r\n(defn to-rna\r\n\t[dna-strand]\r\n  (if (valid-dna-strand? dna-strand)\r\n    (clojure.string/replace dna-strand #"[GCTA]" #(str (to-rna-char %1)))\r\n    (throw (AssertionError. "DNA strand must contain only 'GCTA'-characters."))))\r	\N	\N	0	1	2014-06-23 23:58:11	2014-06-23 23:58:11	68	dna.clj
134	29	848ae721fc6915e3b74f5a4f	done	ruby	hamming	class Hamming\n  def self.compute(a,b)\n    errorcount = 0\n    testlength = 0\n     \n    testlength = a.length > b.length ? b.length : a.length\n\n    testlength.times.each{|index|\n      errorcount += 1 if a[index] != b[index]\n    }\n    return errorcount\n  end\nend	2014-06-03 14:03:36	\N	0	1	2014-05-26 20:21:17	2014-05-26 20:21:17	73	hamming.rb
135	29	87d8c734bc14e4ec220a3ea0	done	haskell	rna-transcription	{-# LANGUAGE LambdaCase #-}\n\nmodule DNA where\n\ntoRNA :: String -> String\ntoRNA = map $ \\case\n    'T' -> 'U'\n    c   -> c	2014-04-12 13:57:54	\N	0	1	2014-04-04 14:14:52	2014-04-04 14:14:52	74	rna-transcription.hs
136	29	d12ee263cd75c4974b83b2af	done	go	leap	package leap\r\nfunc IsLeapYear(year int) bool {\r\n\tif (year % 4 == 0) \t{\r\n\t\tif (year % 100 == 0) {\r\n\t\t\treturn (year % 400 == 0) \r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r	2014-07-26 10:34:42	\N	0	1	2014-07-17 09:09:12	2014-07-17 09:09:12	75	leap.go
137	29	20232f9f63a30287f20f3f9a	done	coffeescript	clock	class Clock\n  @at: (hours, minutes = 0) ->\n    new Clock(hours, minutes)\n\n  constructor: (hours, minutes) ->\n    @minutes = minutes + (60 * hours)\n    @minutes = 1440 + @minutes if @minutes < 0\n\n  toString:    -> "#{_pad(@_hours())}:#{_pad(@_minutes())}"\n\n  plus:  (n) -> new Clock(0, @minutes + n)\n  minus: (n) -> @plus(-n)\n\n  equals: (clock) -> @minutes is clock.minutes\n\n  _minutes:    -> @minutes % 60\n  _hours:      -> parseInt(@minutes / 60) % 24\n  _days:       -> @_hours() / 24\n  _pad = (str) -> if "#{str}".length is 2 then str else "0#{str}"\n\nmodule.exports = Clock	2014-07-24 10:01:18	\N	0	1	2014-07-22 16:28:15	2014-07-22 16:28:15	76	clock.coffee
138	29	09dc1eb84c77ae70945bb3c7	done	javascript	robot-simulator	var Robot = function () {\n  this.coordinates = [0, 0];\n  this.bearing = 'north';\n};\n\nRobot.prototype.at = function (x, y) {\n  this.coordinates = [x, y];\n};\n\nRobot.prototype.orient = function (direction) {\n  this.bearing = direction;\n};\n\nRobot.prototype.advance = function () {\n  if (this.bearing === 'north') {\n    this.coordinates[1] += 1;\n  } else if (this.bearing === 'south') {\n    this.coordinates[1] -= 1;\n  } else if (this.bearing === 'east') {\n    this.coordinates[0] += 1;\n  } else if (this.bearing === 'west') {\n    this.coordinates[0] -= 1;\n  }\n};\n\nRobot.prototype.turnLeft = function () {\n  if (this.bearing === 'north') {\n    this.orient('west');\n  } else if (this.bearing === 'south') {\n    this.orient('east');\n  } else if (this.bearing === 'east') {\n    this.orient('north');\n  } else if (this.bearing === 'west') {\n    this.orient('south');\n  }\n};\n\nRobot.prototype.turnRight = function () {\n  if (this.bearing === 'north') {\n    this.orient('east');\n  } else if (this.bearing === 'south') {\n    this.orient('west');\n  } else if (this.bearing === 'east') {\n    this.orient('south');\n  } else if (this.bearing === 'west') {\n    this.orient('north');\n  }\n};\n\nRobot.prototype.instructions = function (str) {\n  var result = [];\n  str.split('').forEach(function (character) {\n    if (character === 'L') {\n      result.push('turnLeft');\n    } else if (character === 'R') {\n      result.push('turnRight');\n    } else if (character === 'A') {\n      result.push('advance');\n    }\n  });\n  return result;\n};\n\nRobot.prototype.place = function (options) {\n  this.coordinates = [options.x, options.y];\n  this.bearing = options.direction;\n};\n\nRobot.prototype.evaluate = function (str) {\n  this.instructions(str).forEach(function (instruction) {\n    this[instruction]();\n  }, this);\n};	2014-07-11 19:53:17	\N	0	1	2014-07-07 10:39:58	2014-07-07 10:39:58	77	robot-sim.js
139	29	471ceaeef6a46ac7c936abb4	done	ruby	pythagorean-triplet	class Triplet\n  def initialize(*args)\n    @x, @y, @z = args[0], args[1], args[2]\n  end\n\n  def sum\n    angles.inject(&:+)\n  end\n\n  def product\n    angles.inject(&:*)\n  end\n\n  def pythagorean?\n    @x ** 2 + @y ** 2 == @z ** 2\n  end\n\n  def self.where(*options)\n    TripletCollection.where(options)\n  end\n\n  private\n\n  def angles\n    [@x, @y, @z]\n  end\nend\n\nclass TripletCollection\n  def self.where(options)\n    new(*options).matching_collections\n  end\n\n  def initialize(max_factor: 1, min_factor: 1, sum: nil)\n    @range = *(min_factor..max_factor)\n    @sum = sum\n  end\n\n  def matching_collections\n    return find_triplets unless @sum\n\n    find_triplets.select { |t| t.sum == @sum }\n  end\n\n  def find_triplets\n    @triplets ||= @range.combination(3).select do |x, y, z|\n      Triplet.new(x, y, z).pythagorean?\n    end\n    .map do |angles|\n      Triplet.new(*angles)\n    end\n  end\nend	2014-05-10 04:55:47	\N	0	2	2014-05-03 01:42:27	2014-05-03 01:42:27	78	triplet.rb
140	29	1ca7ab6138aefa4666160a6c	superseded	ruby	pythagorean-triplet	require 'pry'\n\nclass Triplet\n  attr_reader :first, :second, :third\n\n  def initialize(*args)\n    @first, @second, @third = args[0], args[1], args[2]\n  end\n\n  def sum\n    angles.inject(&:+)\n  end\n\n  def product\n    angles.inject(&:*)\n  end\n\n  def pythagorean?\n    angles[0]**2 + angles[1]**2 == angles[2]**2\n  end\n\n  def angles\n    [first, second, third].sort\n  end\n\n  def self.where(options)\n    min = options[:min_factor] || 1\n    max = options[:max_factor]\n    sum = options[:sum]\n    result = loop_from_hell(min, max)\n    sum ? match_sum(sum, result) : result\n  end\n\n  private\n\n  def self.loop_from_hell(min, max)\n    triplets = []\n    (min..max).to_a.each do |x|\n      (min..max).to_a.each do |y|\n        (min..max).to_a.each do |z|\n          t = Triplet.new(x, y, z)\n          if t.pythagorean? && !in_collection?(triplets, t)\n            triplets << t\n          end\n        end\n      end\n    end\n    triplets\n  end\n\n  def self.in_collection?(collection, triplet)\n    collection.any? {|x| x.angles == triplet.angles}\n  end\n\n  def self.match_sum(sum, collection)\n    collection.select {|t| t.sum == sum}\n  end\n\nend	\N	\N	0	1	2014-07-17 08:37:50	2014-07-17 08:37:50	78	pythagorean-triplet.rb
160	29	db12159d931f6b8f0e6fe422	done	python	octal	def Base(base_, name_):\n    all_digits = "0123456789" + "".join(chr(i) for i in xrange(ord('a'), ord('z')+1))\n    if base_ > len(all_digits):\n        raise ValueError("Cannot create a numbering base {}: not enough digits".format(base_))\n\n    class Base(object):\n        digits = all_digits[:base_]\n        base = base_\n        name = name_\n\n        def __init__(self, s):\n            self.num = s\n            acc = 0\n            b = self.base\n            for sd in self.num:\n                try:\n                    d = self.digits.index(sd)\n                    acc *= b\n                    acc += d\n                except ValueError:\n                    raise ValueError("Invalid {} digit: {}".format(self.name, sd))\n            self.value = acc\n\n        def to_decimal(self):\n            return self.value\n\n    return Base\n\nclass Octal(Base(8, 'octal')):\n    pass	2014-04-06 21:10:02	\N	0	1	2014-04-05 11:54:23	2014-04-05 11:54:23	90	octal.py
141	29	b845193748190830f57e8b9e	done	haskell	robot-name	module Robot (robotName, mkRobot, resetName)\r\n  where\r\n\r\nimport Control.Monad (replicateM)\r\nimport Data.IORef\r\nimport System.Random (randomRIO)\r\n\r\ndata RobotRec = \r\n  RobotRec {name :: IORef String}\r\n\r\nrandomLetters :: Int -> IO String\r\nrandomLetters n = do\r\n  letters <- replicateM n $ randomRIO ('A','Z')\r\n  return letters\r\n\r\nrandomNumbers :: Int -> IO String\r\nrandomNumbers n = do\r\n  numbers <- replicateM n $ randomRIO ('0','9')\r\n  return numbers\r\n\r\nrandomName :: IO String\r\nrandomName = do\r\n  letters <- (randomLetters 2)\r\n  numbers <- (randomNumbers 3)\r\n  return $ letters ++ numbers\r\n\r\nmkRobot :: IO RobotRec\r\nmkRobot = do \r\n  nameRef <- newIORef ""\r\n  return (RobotRec nameRef)\r\n\r\nrobotName :: RobotRec -> IO String\r\nrobotName robot = do\r\n  nameRef <- readIORef $ name robot\r\n  if nameRef==""\r\n    then do\r\n      resetName robot\r\n      nameRef <- readIORef $ name robot\r\n      return nameRef\r\n    else\r\n      return nameRef\r\n\r\nresetName :: RobotRec -> IO RobotRec\r\nresetName robot = do\r\n  newName <- randomName\r\n  writeIORef (name robot) newName\r\n  return robot\r\n\r	2014-04-10 15:11:24	\N	0	1	2014-04-03 10:25:35	2014-04-03 10:25:35	79	robot-name.hs
142	29	1610cfa92fefafa054aa4882	done	clojure	bob	(ns bob\n  (:require [clojure.string :refer [upper-case]]))\n\n(defn- silent? [what]\n  (= "" what))\n\n(defn- shout? [what]\n  (= what (upper-case what)))\n\n(defn- question? [what]\n  (= \\? (last what)))\n\n(defn response-for [what]\n  (cond\n    (silent? what) "Fine, be that way."\n    (shout? what) "Woah, chill out!"\n    (question? what) "Sure."\n    :else "Whatever."))	2014-04-25 17:16:01	\N	0	3	2014-04-21 23:49:21	2014-04-21 23:49:21	80	bob.clj
143	29	52b4135e8ab47e16f2843bf4	superseded	clojure	bob	(ns bob)\n\n(defn- silent? [what]\n  (= "" what))\n\n(defn- shout? [what]\n  (= (clojure.string/upper-case what) what))\n\n(defn- question? [what]\n  (= \\? (last what)))\n\n(defn response-for [what]\n  (cond\n    (silent? what) "Fine, be that way."\n    (shout? what) "Woah, chill out!"\n    (question? what) "Sure."\n    :else "Whatever."))	\N	\N	0	2	2014-07-05 11:27:32	2014-07-05 11:27:32	80	bob.clj
144	29	38204cdf5aa44b4ec183b33f	superseded	clojure	bob	(ns bob)\n\n(defn is-silent [what]\n  (= "" what))\n\n(defn is-shout [what]\n  (= (clojure.string/upper-case what) what))\n\n(defn is-question [what]\n  (= \\? (last what)))\n\n(defn response-for [what]\n  (cond\n    (is-silent what) "Fine, be that way."\n    (is-shout what) "Woah, chill out!"\n    (is-question what) "Sure."\n    :else "Whatever."))	\N	\N	0	1	2014-07-15 22:05:50	2014-07-15 22:05:50	80	bob.clj
145	29	67ac2dd3cc9671727a4b6351	done	go	hamming	package hamming\n\nfunc Distance(a, b string) int {\n\t// If they're of unequal length, make sure a is the shorter string\n\tif len(a) > len(b) {\n\t\ta, b = b, a\n\t}\n\n\td := 0\n\tfor i := 0; i < len(a); i++ {\n\t\tif a[i] != b[i] {\n\t\t\td++\n\t\t}\n\t}\n\treturn d\n}	2014-08-16 20:15:51	\N	0	1	2014-08-14 14:58:40	2014-08-14 14:58:40	81	hamming.go
146	29	a46e0809348bc83a9ab9187f	superseded	haskell	luhn	module Luhn (checkDigit, addends, checksum, isValid, create) where\r\n\r\nimport Data.Char\r\nimport Data.List\r\n\r\ncheckDigit :: Integer -> Integer\r\ncheckDigit = (`mod` 10)\r\n\r\naddends :: Integer -> [Integer]\r\naddends xs = zipWith go genCycle xstr\r\n  where \r\n    xstr = show xs\r\n    genCycle = drop (length xstr `mod` 2) (cycle [0, 1])\r\n    go isDouble xs = let x = (toInteger.digitToInt) xs \r\n                         fix a = if a >= 10 then a - 9 else a\r\n                     in \r\n                         if even isDouble then fix (x*2) else x\r\n  \r\n\r\nchecksum :: Integer -> Integer\r\nchecksum = checkDigit . sum . addends\r\n\r\nisValid :: Integer -> Bool\r\nisValid = (0 ==) . checksum\r\n\r\ncreate :: Integer -> Integer\r\ncreate n = (+ base) . (`mod` 10) . (10-) . checksum $ base\r\n  where \r\n    base = n * 10\r\n\r\n\r	\N	\N	0	1	2014-04-30 07:31:03	2014-04-30 07:31:03	82	Luhn.hs
147	29	4a8415972259c4799c1194c8	superseded	haskell	luhn	module Luhn (checkDigit, addends, checksum, isValid, create) where\n\nimport Data.Char (digitToInt)\n\ncheckDigit :: Integer -> Integer\ncheckDigit = (`mod` 10)\n\naddends :: Integer -> [Integer]\naddends i = map snd . scanr go (True, i `mod` 10) $ (init.show) i\n  where go xs (double, _) = let x = (toInteger.digitToInt) xs \n                                norm a = if a >= 10 then a - 9 else a\n                            in if double then (False, norm (x*2)) else (True, x)\n\nchecksum :: Integer -> Integer\nchecksum = checkDigit . sum . addends\n\nisValid :: Integer -> Bool\nisValid = (0 ==) . checksum\n\ncreate :: Integer -> Integer\ncreate n = (+ base) . (`mod` 10) . (10-) . checksum $ base\n  where base = n * 10	\N	\N	0	2	2014-08-30 17:37:43	2014-08-30 17:37:43	82	Luhn.hs
148	29	eb5731ced6ef163c1fb5b110	done	haskell	luhn	module Luhn (checkDigit, addends, checksum, isValid, create) where\n\nimport Data.Char\nimport Data.List\n\ncheckDigit :: Integer -> Integer\ncheckDigit = (`mod` 10)\n\naddends :: Integer -> [Integer]\naddends = reverse\n          . zipWith ($) (cycle [id, doubler])\n          . map (toInteger . digitToInt)\n          . reverse\n          . show\n  where doubler = let f x = if x >= 10 then x - 9 else x \n                  in f . (*2)\n                  \n\nchecksum :: Integer -> Integer\nchecksum = checkDigit . sum . addends\n\nisValid :: Integer -> Bool\nisValid = (0 ==) . checksum\n\ncreate :: Integer -> Integer\ncreate n = (+ n10) . (`mod` 10) . (10-) . checksum $ n10\n  where n10 = n * 10	2014-09-09 13:13:48	\N	0	3	2014-09-01 04:31:00	2014-09-01 04:31:00	82	Luhn.hs
149	29	4c7c762b6d596c8d7a729db4	done	python	bob	# Bob\n# Justin Ewasko\n\n# RESPONSE_QUESTION is returned if string ends in '?' and is not all caps\nRESPONSE_QUESTION = 'Sure.'\n\n# RESPONSE_YELL is returned if string is all caps\nRESPONSE_YELL = 'Whoa, chill out!'\n\n# RESPONSE_EMPTY is returned if string contains no characters or is empty\nRESPONSE_EMPTY = 'Fine. Be that way!'\n\n# RESPONSE_DEFAULT is returned in all other cases\nRESPONSE_DEFAULT = 'Whatever.'\n\ndef hey(inputString):\n\tif inputString.isupper():\n\t\treturn RESPONSE_YELL\n\telif inputString.isspace() or not inputString:\n\t\treturn RESPONSE_EMPTY\n\telif inputString.find('?') == len(inputString) - 1:\n\t\treturn RESPONSE_QUESTION\n\telse:\n\t\treturn RESPONSE_DEFAULT	2014-09-21 04:07:38	\N	0	1	2014-09-12 23:01:23	2014-09-12 23:01:23	83	bob.py
150	29	3095e0224b6d03e12fa97b0e	done	csharp	phone-number	public class PhoneNumber\r\n    {\r\n    private string originalNumber;\r\n    public PhoneNumber ( string number )\r\n        {\r\n        originalNumber = number;\r\n\r\n        }\r\n\r\n    public string Number \r\n        {\r\n        get\r\n            {\r\n            string number = originalNumber;\r\n            string[] chs = new string[] { "(", ")", " ", "-", "." };\r\n            foreach ( string ch in chs )\r\n                {\r\n                number = number.Replace ( ch, string.Empty );\r\n                }\r\n            \r\n            if ( number.Length == 11 && number [ 0 ] == '1' )\r\n                number = number.Substring ( 1 );\r\n            \r\n            if ( number.Length >= 11 || number.Length <= 9 )\r\n                return "0000000000";\r\n            \r\n            return number;\r\n            }\r\n        }\r\n\r\n    public string AreaCode\r\n        {\r\n        get\r\n            {\r\n            return Number.Substring ( 0, 3 );\r\n            }\r\n        }\r\n\r\n    public override string ToString ()\r\n        {\r\n        return "(" + Number.Substring ( 0, 3 ) + ") " + Number.Substring ( 3, 3 ) + "-" + Number.Substring ( 6 );\r\n        }\r\n    }	2014-05-19 00:51:51	\N	0	1	2014-05-14 10:55:07	2014-05-14 10:55:07	84	PhoneNumber.cs
151	29	c17917a18cb94494bee0f119	superseded	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond int64 = 1e18\n\nfunc AddGigasecond(t time.Time) time.Time {\n\treturn t.Add(time.Duration(Gigasecond))\n}	\N	\N	0	1	2014-07-05 00:27:24	2014-07-05 00:27:24	85	gigasecond.go
152	29	689ec9136b53a940a31fc0ce	done	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond time.Duration = 1e9 * time.Second\n\nfunc AddGigasecond(t time.Time) time.Time {\n\treturn t.Add(Gigasecond)\n}	2014-08-10 07:50:19	\N	0	2	2014-07-30 06:17:35	2014-07-30 06:17:35	85	gigasecond.go
153	29	5789694c974f3ef72cfb370c	done	go	word-count	package wc\n\nimport "strings"\n\ntype Histogram map[string]int\n\nconst punctuation = "'!\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~'"\n\nfunc canonicalize(word string) string {\n\treturn strings.ToLower(strings.Trim(word, punctuation))\n}\n\nfunc incrementCount(word string, histogram Histogram) {\n\tcount, ok := histogram[word]\n\tif !ok {\n\t\tcount = 0\n\t}\n\thistogram[word] = count + 1\n}\n\nfunc WordCount(phrase string) Histogram {\n\thistogram := Histogram(make(map[string]int))\n\tfor _, word := range strings.Fields(phrase) {\n\t\tif word = canonicalize(word); word != "" {\n\t\t\tincrementCount(word, histogram)\n\t\t}\n\t}\n\treturn histogram\n}	2014-06-24 23:45:48	\N	0	1	2014-06-24 17:25:11	2014-06-24 17:25:11	86	histogram.go
154	29	9e3b27759d922a51737fc423	superseded	clojure	word-count	(ns word-count\n  (:require [clojure.string :as s]))\n\n(defn word-count [words]\n  (-> words\n      (s/replace #"[^\\w\\d\\s]" "")\n      s/lower-case\n      (s/split #"\\s+")\n      frequencies))	\N	\N	0	1	2014-10-28 10:51:40	2014-10-28 10:51:40	87	word_count.clj
155	29	84ed71c0e25cc414c7634217	pending	clojure	word-count	(ns word-count\n  (:require [clojure.string :as s]))\n\n(defn word-count [words]\n  (->> words\n      s/lower-case\n      (re-seq #"\\w+")\n      frequencies))	\N	\N	0	2	2014-11-03 21:52:37	2014-11-03 21:52:37	87	word_count.clj
156	29	2baa3603ad70c359c9ff235a	done	go	series	package slice\n\nfunc Frist(n int, s string) (first string) {\n\tif n > len(s) {\n\t\treturn ""\n\t}\n\treturn s[:n]\n}\n\nfunc First(n int, s string) (string, bool) {\n\treturn Frist(n, s), n <= len(s)\n}\n\nfunc All(n int, s string) []string {\n\tif len(s) < n {\n\t\treturn nil\n\t}\n\tvar output []string\n\tfor i := 0; i < len(s)+1-n; i++ {\n\t\toutput = append(output, s[i:i+n])\n\t}\n\treturn output\n}	2014-05-25 19:52:50	\N	0	1	2014-05-19 20:38:48	2014-05-19 20:38:48	88	series.go
157	29	fac3becff2a2a9c50a19329b	superseded	haskell	simple-linked-list	{-# LANGUAGE DeriveFoldable #-}\r\n\r\nmodule LinkedList (new, nil, isNil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\nimport qualified Data.Foldable as F\r\n\r\ndata List a = Nil | Cons a (List a) deriving (Show, Read, Eq, Ord, F.Foldable)\r\n\r\nnilError :: error\r\nnilError = error "nil list"\r\n\r\nnew :: a -> List a -> List a\r\nnew = Cons\r\n\r\nnil :: List a\r\nnil = Nil\r\n\r\nisNil :: List a -> Bool\r\nisNil Nil = True\r\nisNil _ = False\r\n\r\ndatum :: List a -> a\r\ndatum Nil = nilError\r\ndatum (Cons x _) = x\r\n\r\nnext :: List a -> List a\r\nnext Nil = nilError\r\nnext (Cons _ xs) = xs\r\n\r\ntoList :: List a -> [a]\r\ntoList = F.toList\r\n\r\nfromList :: [a] -> List a\r\nfromList = F.foldr' new nil\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = F.foldl' (flip new) nil	\N	\N	0	2	2014-05-03 13:33:45	2014-05-03 13:33:45	89	LinkedList.hs
158	29	d7d35317107d452224721267	superseded	haskell	simple-linked-list	module LinkedList where\r\n\r\nimport Data.List (foldl')\r\n\r\ndata List a = Nil | Cons a (List a) deriving (Show, Read, Eq, Ord)\r\n\r\nnew :: a -> List a -> List a\r\nnew = Cons\r\n\r\nnil :: List a\r\nnil = Nil\r\n\r\nisNil :: List a -> Bool\r\nisNil Nil = True\r\nisNil _ = False\r\n\r\ndatum :: List a -> a\r\ndatum Nil = undefined\r\ndatum (Cons x _) = x\r\n\r\nnext :: List a -> List a\r\nnext Nil = undefined\r\nnext (Cons _ y) = y\r\n\r\ntoList :: List a -> [a]\r\ntoList Nil= []\r\ntoList (Cons x xs) = x : toList xs\r\n\r\nfromList :: [a] -> List a\r\nfromList l = foldl' (flip new) nil $ reverse l\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList Nil = Nil \r\nreverseLinkedList x = fromList $ reverse $ toList x	\N	\N	0	1	2014-06-06 14:20:27	2014-06-06 14:20:27	89	LinkedList.hs
159	29	4ec4aee26b48b7afb234953f	pending	haskell	simple-linked-list	{-# LANGUAGE DeriveFoldable #-}\r\n\r\nmodule LinkedList (new, nil, isNil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\nimport qualified Data.Foldable as F\r\n\r\ndata List a = Nil | Cons a (List a) deriving (Show, Read, Eq, Ord, F.Foldable)\r\n\r\nnilError :: error\r\nnilError = error "nil list"\r\n\r\nnew :: a -> List a -> List a\r\nnew = Cons\r\n\r\nnil :: List a\r\nnil = Nil\r\n\r\nisNil :: List a -> Bool\r\nisNil Nil = True\r\nisNil _ = False\r\n\r\ndatum :: List a -> a\r\ndatum Nil = nilError\r\ndatum (Cons x _) = x\r\n\r\nnext :: List a -> List a\r\nnext Nil = nilError\r\nnext (Cons _ xs) = xs\r\n\r\ntoList :: List a -> [a]\r\ntoList = F.toList\r\n\r\nfromList :: [a] -> List a\r\nfromList = F.foldr new nil\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = F.foldl' (flip new) nil	\N	\N	0	3	2014-06-28 20:23:21	2014-06-28 20:23:21	89	LinkedList.hs
242	40	6a3ab330cd150cbc8ce76990	done	go	rna-transcription	package strand\n\nimport "bytes"\n\nfunc ToRna(dna string) string {\n\tvar buffer bytes.Buffer\n\n\tfor nuc := range transform(dna) {\n\t\tbuffer.WriteRune(nuc)\n\t}\n\n\treturn buffer.String()\n}\n\nfunc transform(dna string) <-chan rune {\n\tout := make(chan rune)\n\tgo func() {\n\t\tfor _, n := range dna {\n\t\t\tswitch {\n\t\t\tcase n == 'C':\n\t\t\t\tout <- 'G'\n\t\t\tcase n == 'G':\n\t\t\t\tout <- 'C'\n\t\t\tcase n == 'A':\n\t\t\t\tout <- 'U'\n\t\t\tcase n == 'T':\n\t\t\t\tout <- 'A'\n\t\t\t}\n\t\t}\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\n//go build -gcflags -m a.go	2014-06-22 03:12:16	\N	0	1	2014-06-17 17:38:02	2014-06-17 17:38:02	136	main.go
161	29	c39084acc986c88a8b7304d2	done	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) []string {\n\tanagramList := make([]string, 0, len(candidates))\n\tsubject = strings.ToLower(subject)\n\n\tsliceSubject := sort.StringSlice(strings.Split(subject, ""))\n\tsliceSubject.Sort()\n\n\tfor _, candidate := range candidates {\n\t\tcandidate = strings.ToLower(candidate)\n\t\tif len(subject) != len(candidate) || subject == candidate {\n\t\t\tcontinue\n\t\t}\n\n\t\tisSameWord := true\n\t\tsliceCandidate := sort.StringSlice(strings.Split(candidate, ""))\n\t\tsliceCandidate.Sort()\n\n\t\tfor i, c := range sliceSubject {\n\t\t\tif c != sliceCandidate[i] {\n\t\t\t\tisSameWord = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif isSameWord == true {\n\t\t\tanagramList = append(anagramList, candidate)\n\t\t}\n\t}\n\n\treturn anagramList\n}	2014-06-03 08:29:09	\N	0	1	2014-06-02 01:32:32	2014-06-02 01:32:32	91	anagram.go
162	29	22ff263ace923d5a6cefd777	superseded	csharp	robot-name	using System;\nusing System.Collections.Generic;\n\npublic class Robot\n{\n\tprivate static readonly string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n\tprivate static readonly List<string> used = new List<string>();\n\tprivate static readonly Random random = new Random();\n\n\tprivate string _name;\n\tpublic string Name\n\t{ \n\t\tget\n\t\t{\n\t\t\tif (_name == null)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t_name = alphabet[random.Next(alphabet.Length - 1)].ToString();\n\t\t\t\t\t_name += alphabet[random.Next(alphabet.Length - 1)];\n\t\t\t\t\t_name += random.Next(100, 999);\n\n\t\t\t\t} while(used.Contains(_name));\n\n\t\t\t\tused.Add(_name);\n\t\t\t}\n\t\t\t\t\t\n\t\t\treturn _name;\n\t\t}\n\t}\n\n\tpublic void Reset()\n\t{\n\t\t_name = null;\n\t}\n}	\N	\N	0	1	2014-06-02 01:45:01	2014-06-02 01:45:01	92	Robot.cs
163	29	fee98c6ac3dd94b7d5db2c8f	pending	csharp	robot-name	using System;\nusing System.Collections.Generic;\n\npublic class Robot\n{\n\tprivate static readonly List<string> used = new List<string>();\n\tprivate static readonly Random random = new Random();\n\n\tprivate string _name;\n\tpublic string Name\n\t{ \n\t\tget\n\t\t{\n\t\t\tif (_name == null)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t_name = (GetRandomChar() + GetRandomChar()).ToString();\n\t\t\t\t\t_name += random.Next(1000).ToString("000");\n\n\t\t\t\t} while(used.Contains(_name));\n\n\t\t\t\tused.Add(_name);\n\t\t\t}\n\t\t\t\t\t\n\t\t\treturn _name;\n\t\t}\n\t}\n\n\tpublic void Reset()\n\t{\n\t\t_name = null;\n\t}\n\n\tprivate char GetRandomChar()\n\t{\n\t\treturn (char)('A' + random.Next(26));\n\t}\n}	\N	\N	0	2	2014-10-15 10:47:29	2014-10-15 10:47:29	92	Robot.cs
164	29	b63bfe17107493ffa4bb4738	pending	javascript	etl	module.exports = function(old) {\r\n\tvar result = {}, value, word;\r\n\tfor(value in old) {\r\n\t\tfor(word in old[value]) {\r\n\t\t\tresult[old[value][word].toLowerCase()] = parseInt(value, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};	\N	\N	0	1	2014-04-11 03:10:46	2014-04-11 03:10:46	93	etl.js
165	29	87ac26de71490b50c3ae6466	superseded	haskell	matrix	module Matrix\r\n( Matrix\r\n, row\r\n, rows\r\n, column\r\n, cols\r\n, shape\r\n, transpose\r\n, reshape\r\n, flatten\r\n, fromString\r\n, Matrix.fromList\r\n) where\r\n\r\nimport           Data.Vector\r\nimport qualified Data.Vector as V\r\nimport qualified Prelude as P\r\nimport           Prelude hiding\r\n  (map\r\n  ,concat\r\n  ,words\r\n  ,length\r\n  ,head\r\n  ,null\r\n  ,splitAt\r\n  ,any\r\n  ,tail)\r\n\r\ndata Matrix a = Matrix (Vector (Vector a))\r\n                deriving (Eq, Show)\r\n\r\nrow :: Int -> Matrix a -> Vector a\r\nrow n (Matrix vs) = vs ! n\r\n\r\ncolumn :: Int -> Matrix a -> Vector a\r\ncolumn n (Matrix vs) = map (! n) vs\r\n\r\nrows :: Matrix a -> Int\r\nrows (Matrix vs) = length vs\r\n\r\ncols :: Matrix a -> Int\r\ncols (Matrix vs)\r\n    | length vs == 0 = 0\r\n    | otherwise      = length $ head vs\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape x = (rows x, cols x)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (_, n) (Matrix vs) = Matrix (chunksOf n . flattenVs $ vs)\r\n  where\r\n    chunksOf z = unfoldr (\\x -> if null x then Nothing else Just $ splitAt z x)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vs) = flattenVs vs\r\n\r\nflattenVs :: Vector (Vector a) -> Vector a\r\nflattenVs = concat . toList\r\n\r\ntranspose :: Matrix a-> Matrix a\r\ntranspose (Matrix vs) = Matrix (transposeVs vs)\r\n\r\ntransposeVs :: Vector (Vector a) -> Vector (Vector a)\r\ntransposeVs vs\r\n    | any null vs = empty\r\n    | otherwise   = map head vs `cons` transposeVs (map tail vs)\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix $ V.fromList (P.map V.fromList xs)\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = P.map (P.map P.read . sep) . P.lines $ str\r\n    sep xs\r\n        | P.head xs == '"' = [xs] -- Don't split sentences\r\n        | otherwise        = P.words xs	\N	\N	0	1	2014-04-03 00:17:37	2014-04-03 00:17:37	94	Matrix.hs
166	29	35a7ade5773ed2e3765cc465	superseded	haskell	matrix	module Matrix\r\n( Matrix\r\n, row\r\n, rows\r\n, column\r\n, cols\r\n, shape\r\n, transpose\r\n, reshape\r\n, flatten\r\n, fromString\r\n, Matrix.fromList\r\n) where\r\n\r\nimport           Data.Vector\r\nimport qualified Data.Vector as V\r\nimport qualified Prelude as P\r\nimport           Prelude hiding\r\n  ( map\r\n  , concat\r\n  , words\r\n  , length\r\n  , head\r\n  , null\r\n  , splitAt\r\n  , any\r\n  , tail )\r\n\r\ndata Matrix a = Matrix (Vector (Vector a))\r\n                deriving (Eq, Show)\r\n\r\nrow :: Int -> Matrix a -> Vector a\r\nrow n (Matrix vs) = vs ! n\r\n\r\ncolumn :: Int -> Matrix a -> Vector a\r\ncolumn n (Matrix vs) = map (! n) vs\r\n\r\nrows :: Matrix a -> Int\r\nrows (Matrix vs) = length vs\r\n\r\ncols :: Matrix a -> Int\r\ncols (Matrix vs)\r\n    | length vs == 0 = 0\r\n    | otherwise      = length $ head vs\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape x = (rows x, cols x)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (_, n) (Matrix vs) = Matrix (chunksOf n . flattenVs $ vs)\r\n  where\r\n    chunksOf z = unfoldr (\\x -> if null x then Nothing else Just $ splitAt z x)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vs) = flattenVs vs\r\n\r\nflattenVs :: Vector (Vector a) -> Vector a\r\nflattenVs = concat . toList\r\n\r\ntranspose :: Matrix a-> Matrix a\r\ntranspose (Matrix vs) = Matrix (transposeVs vs)\r\n  where\r\n    transposeVs zs\r\n        | any null zs = empty\r\n        | otherwise   = map head zs `cons` transposeVs (map tail zs)\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix $ V.fromList (P.map V.fromList xs)\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = P.map (P.map P.read . sep) . P.lines $ str\r\n    sep xs\r\n        | P.head xs == '"' = [xs] -- Don't split sentences\r\n        | otherwise        = P.words xs	\N	\N	0	2	2014-04-07 19:29:20	2014-04-07 19:29:20	94	Matrix.hs
173	31	ba59427714e5cf7413b09c20	done	go	clock	package clock\r\n\r\nimport "fmt"\r\n\r\ntype Clock struct {\r\n\thour, minute int\r\n}\r\n\r\nfunc New(hour, minute int) Clock {\r\n\treturn Clock{hour, minute}\r\n}\r\n\r\nfunc (c Clock) Add(minutes int) Clock {\r\n\ttotalMinutes := minutes + c.minute\r\n\r\n\tfinalMinute := totalMinutes % 60\r\n\tif finalMinute < 0 {\r\n\t\tfinalMinute += 60\r\n\t\ttotalMinutes -= 60\r\n\t}\r\n\r\n\ttotalHours := totalMinutes/60 + c.hour\r\n\r\n\tfinalHour := totalHours % 24\r\n\tif finalHour < 0 {\r\n\t\tfinalHour += 24\r\n\t}\r\n\r\n\treturn Clock{finalHour, finalMinute}\r\n}\r\n\r\nfunc (c Clock) String() string {\r\n\treturn fmt.Sprintf("%02d:%02d", c.hour, c.minute)\r\n}\r	2014-08-05 07:32:25	\N	0	2	2014-07-29 14:00:01	2014-07-29 14:00:01	96	clock.go
167	29	c50922c08b88755fbdefa769	superseded	haskell	matrix	module Matrix\r\n  ( Matrix\r\n  , row\r\n  , rows\r\n  , column\r\n  , cols\r\n  , shape\r\n  , transpose\r\n  , reshape\r\n  , flatten\r\n  , fromString\r\n  , Matrix.fromList\r\n  ) where\r\n\r\nimport           Data.Vector (Vector)\r\nimport qualified Data.Vector as V\r\n\r\ntype Rows = Int\r\ntype Cols = Int\r\ndata Matrix a = Matrix (Vector a) (Rows, Cols)\r\n                deriving (Eq, Show)\r\n\r\nrows, cols :: Matrix a -> Int\r\nrows (Matrix _ (rs, _)) = rs\r\ncols (Matrix _ (_, cs)) = cs\r\n\r\nrow, column :: Int -> Matrix a -> Vector a\r\nrow    n (Matrix vec (_ , cs)) = V.slice (n * cs) cs vec\r\n\r\ncolumn n (Matrix vec (rs, cs)) = V.fromList $ map (vec V.!) indxs\r\n  where\r\n    indxs = [n,n+cs..cs*rs-1]\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape (Matrix _ (rs, cs)) = (rs, cs)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (rs, cs) (Matrix vec _) = Matrix vec (rs, cs)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vec _) = vec\r\n\r\ntranspose :: Matrix a -> Matrix a\r\ntranspose mtrx@(Matrix _ (rs, cs)) = Matrix vec (cs, rs)\r\n  where\r\n   vec= V.concat [column c mtrx | c <- [0..cs-1]]\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = map (map read . sep) . lines $ str\r\n    sep xs\r\n        | head xs == '"' = [xs] -- Kepp sentences intact\r\n        | otherwise      = words xs\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix (V.fromList $ concat xs) (rows', cols')\r\n  where\r\n    rows' = length xs\r\n    cols' = case xs of (x:_) -> length x\r\n                       _     -> 0	\N	\N	0	4	2014-05-27 07:06:22	2014-05-27 07:06:22	94	Matrix.hs
168	29	43789e65acea8c6fdc24c6ca	superseded	haskell	matrix	module Matrix\r\n  ( Matrix\r\n  , row\r\n  , rows\r\n  , column\r\n  , cols\r\n  , shape\r\n  , transpose\r\n  , reshape\r\n  , flatten\r\n  , fromString\r\n  , Matrix.fromList\r\n  ) where\r\n\r\nimport           Data.Vector (Vector)\r\nimport qualified Data.Vector as V\r\n\r\ntype Rows = Int\r\ntype Cols = Int\r\ndata Matrix a = Matrix (Vector a) (Rows, Cols)\r\n                deriving (Eq, Show)\r\n\r\nrows, cols :: Matrix a -> Int\r\nrows (Matrix _ (rs, _)) = rs\r\ncols (Matrix _ (_, cs)) = cs\r\n\r\nrow, column :: Int -> Matrix a -> Vector a\r\nrow    n (Matrix vec (_ , cs)) = V.slice (n * cs) cs vec\r\n\r\ncolumn n (Matrix vec (rs, cs)) = V.fromList $ map (vec V.!) indxs\r\n  where\r\n    indxs = [n,n+cs..cs*rs-1]\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape (Matrix _ (rs, cs)) = (rs, cs)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (rs, cs) (Matrix vs _) = Matrix vs (rs, cs)\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix vs _) = vs\r\n\r\ntranspose :: Matrix a -> Matrix a\r\ntranspose mtrx@(Matrix _ (rs, cs)) = Matrix vs (cs, rs)\r\n  where\r\n    vs = V.concat [column c mtrx | c <- [0..cs-1]]\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = map (map read . sep) . lines $ str\r\n    sep xs\r\n        | head xs == '"' = [xs] -- Kepp sentences intact\r\n        | otherwise      = words xs\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix (V.fromList $ concat xs) (rows', cols')\r\n  where\r\n    rows' = length xs\r\n    cols' = case xs of (x:_) -> length x\r\n                       _     -> 0	\N	\N	0	3	2014-08-10 19:38:45	2014-08-10 19:38:45	94	Matrix.hs
169	29	bad5db0f3e8104996ed45e34	done	haskell	matrix	module Matrix\r\n  ( Matrix\r\n  , row\r\n  , rows\r\n  , column\r\n  , cols\r\n  , shape\r\n  , transpose\r\n  , reshape\r\n  , flatten\r\n  , fromString\r\n  , Matrix.fromList\r\n  ) where\r\n\r\nimport           Data.Vector (Vector)\r\nimport qualified Data.Vector as V\r\n\r\ntype Rows = Int\r\ntype Cols = Int\r\ndata Matrix a = Matrix Rows Cols (Vector a)\r\n                deriving (Eq, Show)\r\n\r\nrows, cols :: Matrix a -> Int\r\nrows (Matrix rs _  _) = rs\r\ncols (Matrix _  cs _) = cs\r\n\r\nrow, column :: Int -> Matrix a -> Vector a\r\nrow    n (Matrix _  cs vec) = V.slice (n * cs) cs vec\r\n\r\ncolumn n (Matrix rs cs vec) = V.fromList $ map (vec V.!) indxs\r\n  where\r\n    indxs = [n,n+cs..cs*rs-1]\r\n\r\nshape :: Matrix a -> (Int, Int)\r\nshape (Matrix rs cs _) = (rs, cs)\r\n\r\nreshape :: (Int, Int) -> Matrix a -> Matrix a\r\nreshape (rs, cs) (Matrix _ _ vec) = Matrix rs cs vec\r\n\r\nflatten :: Matrix a -> Vector a\r\nflatten (Matrix _ _ vec) = vec\r\n\r\ntranspose :: Matrix a -> Matrix a\r\ntranspose mtrx@(Matrix rs cs _) = Matrix cs rs vec\r\n  where\r\n   vec= V.concat [column c mtrx | c <- [0..cs-1]]\r\n\r\nfromString :: (Read a) => String -> Matrix a\r\nfromString str = Matrix.fromList str'\r\n  where\r\n    str' = map (map read . sep) . lines $ str\r\n    sep xs\r\n        | head xs == '"' = [xs] -- Keep sentences intact\r\n        | otherwise      = words xs\r\n\r\nfromList :: [[a]] -> Matrix a\r\nfromList xs = Matrix rows' cols' (V.fromList $ concat xs)\r\n  where\r\n    rows' = length xs\r\n    cols' = case xs of (x:_) -> length x\r\n                       _     -> 0	2014-11-13 14:06:15	\N	0	5	2014-11-07 04:53:38	2014-11-07 04:53:38	94	Matrix.hs
170	31	af8156e83b99c77dda79f08d	superseded	haskell	robot-name	module Robot\n    (robotName\n    ,mkRobot\n    ,resetName)\nwhere\n\nimport           Control.Applicative (liftA2, (<$>))\nimport           Control.Monad       (replicateM)\nimport           Data.IORef          (IORef, newIORef, readIORef, writeIORef)\nimport           System.Random       (randomRIO)\n\nnewtype Robot = Robot {\n    runRobot :: IORef String }\n\nnewName :: IO String\nnewName = liftA2 (++)\n    (replicateM 2 $ randomRIO ('A', 'Z'))\n    (replicateM 3 $ randomRIO ('0', '9'))\n\nmkRobot :: IO Robot\nmkRobot = Robot <$> (newIORef =<< newName)\n\nrobotName :: Robot -> IO String\nrobotName = readIORef . runRobot\n\nresetName :: Robot -> IO ()\nresetName r = writeIORef (runRobot r) =<< newName	\N	\N	0	1	2014-07-29 08:40:10	2014-07-29 08:40:10	95	Robot.hs
171	31	b4c53c1a0ed8edda7ccb033a	done	haskell	robot-name	module Robot\n    (robotName\n    ,mkRobot\n    ,resetName)\nwhere\n\nimport           Control.Applicative ((<$>))\nimport           Data.IORef          (IORef, newIORef, readIORef, writeIORef)\nimport           System.Random       (randomRIO)\n\nnewtype Robot = Robot {\n    runRobot :: IORef String }\n\nnewName :: IO String\nnewName = mapM randomRIO [l, l, d, d, d]\n    where\n        l = ('A', 'Z')\n        d = ('0', '9')\n\nmkRobot :: IO Robot\nmkRobot = Robot <$> (newIORef =<< newName)\n\nrobotName :: Robot -> IO String\nrobotName = readIORef . runRobot\n\nresetName :: Robot -> IO ()\nresetName r = writeIORef (runRobot r) =<< newName	2014-08-26 20:27:47	\N	0	2	2014-08-26 17:21:27	2014-08-26 17:21:27	95	Robot.hs
172	31	b693c664298c7b858926e756	superseded	go	clock	package clock\n\nimport "fmt"\n\ntype Clock struct {\n\thour, minute int\n}\n\nfunc New(hour, minute int) Clock {\n\treturn Clock{hour, minute}\n}\n\nfunc (c Clock) Add(minutes int) Clock {\n\ttotalMinutes := minutes + c.minute\n\tfinalMinute := totalMinutes % 60\n\n\tif finalMinute < 0 {\n\t\tfinalMinute += 60\n\t\ttotalMinutes -= 60\n\t}\n\n\ttotalHours := totalMinutes/60 + c.hour\n\tfinalHour := totalHours % 24\n\n\tif finalHour < 0 {\n\t\tfinalHour += 24\n\t}\n\n\treturn Clock{finalHour, finalMinute}\n}\n\nfunc (c Clock) String() string {\n\treturn fmt.Sprintf("%02d:%02d", c.hour, c.minute)\n}	\N	\N	0	1	2014-06-13 23:25:56	2014-06-13 23:25:56	96	clock.go
174	31	bf41ffab7bd5a04135274bd8	done	python	phone-number	def _extract_digits(text):\n    return ''.join(character for character in text if character.isdigit())\n\nclass Phone(object):\n    INVALID_NUMBER = '0' * 10\n\n    def __init__(self, text):\n        self.number = _extract_digits(text)\n\n        self._trim_country_code()\n        if not self._looks_valid():\n            self._mark_as_invalid()\n\n    def _trim_country_code(self):\n        if len(self.number) == 11 and self.number.startswith('1'):\n            self.number = self.number[1:]\n\n    def _looks_valid(self):\n        return len(self.number) == 10\n\n    def _mark_as_invalid(self):\n        self.number = Phone.INVALID_NUMBER\n\n    def area_code(self):\n        return self.number[:3]\n\n    def prefix(self):\n        return self.number[3:6]\n\n    def line_number(self):\n        return self.number[6:]\n\n    def pretty(self):\n        return '({}) {}-{}'.format(\n            self.area_code(), self.prefix(), self.line_number())	2014-05-20 08:19:03	\N	0	1	2014-05-17 11:32:53	2014-05-17 11:32:53	97	phone.py
175	33	37285089bf6f1c0a257f0a27	pending	ruby	clock	class Clock\n\n  def initialize(time)\n    @time = time\n  end\n\n  def minute\n    @time.min\n  end\n\n  def hour\n    @time.hour\n  end\n\n  def to_s\n    "%02d:%02d" % [hour, minute]\n  end\n\n  def +(sec)\n    Clock.new(@time + (sec * 60))\n  end\n\n  def -(sec)\n    Clock.new(@time - (sec * 60))\n  end\n\n  def self.at(hour, minute = 0)\n    Clock.new(Time.new(0, 1, 1, hour, minute))\n  end\n\n  def == (clock)\n    clock.to_s == to_s\n  end\nend	\N	\N	0	1	2014-08-08 06:58:26	2014-08-08 06:58:26	98	clock.rb
176	33	995b02f9c6991e9d797660e3	done	perl5	leap	package Leap;\n\nuse strict;\nuse warnings;\n\nsub is_leap {\n    my $year = shift;\n    return 0 if $year % 4 != 0;\n    return 0 if $year % 4 == 0 and $year % 100 == 0 and $year % 400 != 0;\n    return 1;\n}\n\n1;	2014-09-23 21:08:44	\N	0	1	2014-09-18 21:55:37	2014-09-18 21:55:37	99	Leap.pm
177	33	3160a9fd75e8a9f7f64bcc78	superseded	swift	leap	//\n//  Leap.swift\n//  Leap\n//\n//  Created by Russell Lewis on 9/23/14.\n//  Copyright (c) 2014 S&R&B, LLC. All rights reserved.\n//\n\nimport Foundation\n\nclass Year {\n    var isLeapYear = false\n    \n    init(calendarYear: Int) {\n        isLeapYear = computeIsLeapYear(calendarYear)\n    }\n    \n    func computeIsLeapYear(calendarYear: Int) -> Bool {\n        var result: Bool\n        if 0 == calendarYear % 400 {\n            result = true\n        }\n        else if 0 == calendarYear % 100 {\n            result = false\n        }\n        else if 0 == calendarYear % 4 {\n            result = true\n        }\n        else {\n            result = false\n        }\n        return result\n    }\n}	\N	\N	0	1	2014-07-23 05:24:13	2014-07-23 05:24:13	100	Leap.swift
178	33	c0da9cda71f887f39d6847ce	done	swift	leap	//\n//  Leap.swift\n//  Leap\n//\n//  Created by Russell Lewis on 9/23/14.\n//  Copyright (c) 2014 S&R&B, LLC. All rights reserved.\n//\n\nimport Foundation\n\nclass Year {\n    let calendarYear: Int\n    var isLeapYear: Bool = false\n    \n    init(calendarYear: Int) {\n        self.calendarYear = calendarYear\n        isLeapYear = computeIsLeapYear()\n    }\n    \n    func computeIsLeapYear() -> Bool {\n        var result: Bool\n        if 0 == calendarYear % 400 {\n            result = true\n        }\n        else if 0 == calendarYear % 100 {\n            result = false\n        }\n        else if 0 == calendarYear % 4 {\n            result = true\n        }\n        else {\n            result = false\n        }\n        return result\n    }\n}	2014-10-19 16:10:49	\N	0	2	2014-10-11 08:13:40	2014-10-11 08:13:40	100	Leap.swift
179	33	750e47e8eca2dcfa324c679e	done	perl5	word-count	use strict;\n\npackage Phrase;\n\nsub word_count {\n    my $text = shift;\n    my %count;\n    ++$count{ lc $1 } while $text =~ /(\\w+)/g;\n    \\%count;\n}\n\n1;	2014-10-05 20:44:35	\N	0	1	2014-09-27 11:00:56	2014-09-27 11:00:56	101	word-count.pm
180	38	d685d1726b66b9ed5c0aa049	pending	python	phone-number	import re\n\nclass Phone:\n    BLANK_NUMBER = '0000000000'\n\n    def __init__(self, raw_number):\n        self.number = self._limit_length(self._parse(raw_number))\n\n    def area_code(self):\n        return self.number[0:3]\n\n    def prefix(self):\n        return self.number[3:6]\n\n    def suffix(self):\n        return self.number[6:10]\n\n    def pretty(self):\n        return "(%s) %s-%s" % (self.area_code(), self.prefix(), self.suffix())\n\n\n\n    def _parse(self, number):\n        return re.sub('[^0-9]', '', number)\n\n    def _limit_length(self, number):\n        if len(number) is 10:\n            return number\n        elif len(number) is 11 and number[:1] is '1':\n            return number[1:11]\n        else:\n            return self.BLANK_NUMBER	\N	\N	0	1	2014-07-24 02:49:06	2014-07-24 02:49:06	102	phone.py
181	38	161fc3b8676264e0dda57d9d	done	clojure	rna-transcription	(ns rna-transcription)\n(defn to-rna [dna]\n  (if (re-find #"[^GCTA]" dna)\n    (throw (AssertionError."invalid dna"))\n    (clojure.string/replace\n      (str dna) #"G|C|T|A" {"G" "C" "C" "G" "T" "A" "A" "U"})))	2014-05-05 03:05:14	\N	0	1	2014-04-30 19:02:34	2014-04-30 19:02:34	103	rna_transcription.clj
182	38	484da31a5cac234a5369a9b0	pending	clojure	word-count	(ns phrase\n  (:require [clojure.string :as string]))\n\n(defn word-count [phrase]\n  (->>\n    phrase\n    string/lower-case\n    (re-seq #"\\w+")\n    frequencies))	\N	\N	0	3	2014-04-08 03:31:02	2014-04-08 03:31:02	104	word-count.clj
183	38	2e946344c97f84f10ed8ab8e	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as string]))\n\n(defn words [phrase]\n  (let [p1 (string/trim phrase)\n        p2 (string/lower-case p1)]\n    (string/split p2 #"(\\s|[^a-z0-9])+")))\n\n(defn word-count [phrase]\n  (frequencies (words phrase)))	\N	\N	0	1	2014-07-02 10:39:26	2014-07-02 10:39:26	104	word-count.clj
184	38	6a9bf06ee8f5ef547f2abdcb	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as string]))\n\n(defn words [phrase]\n  (let [p1 (string/trim phrase)\n        p2 (string/lower-case p1)]\n    (string/split p2 #"\\W+")))\n\n(defn word-count [phrase]\n  (frequencies (words phrase)))	\N	\N	0	2	2014-09-11 08:46:57	2014-09-11 08:46:57	104	word-count.clj
185	38	6921cfac45062d7bef9fd18d	pending	ruby	nth-prime	class Prime\n\nend	\N	\N	0	1	2014-04-08 13:35:18	2014-04-08 13:35:18	105	prime.rb
186	38	c258af657a793110ba444190	superseded	csharp	leap	﻿using System;\n\npublic class Year\n{\n\tpublic Year ()\n\t{\n\t}\n\n\t//\ton every year that is evenly divisible by 4\n\t//\texcept every year that is evenly divisible by 100\n\t//\tunless the year is also evenly divisible by 400\n\tstatic public bool IsLeap(int year)\n\t{\n\t\tFunc <int, int, bool> divisible_by = (x, y) => ((x % y) == 0);\n\t\tbool isLeapYear = false;\n\n\t\t// a year divisible by 400 \n\t\t// is a leap year\n\t\tif (divisible_by (year, 400)) {\n\t\t\tisLeapYear = true;\n\t\t}\n\n\t\t// a year divisible by 100 and not divisible by 400\n\t\t// is not a leap year\n\t\telse if (divisible_by (year, 100)) {\n\t\t\tisLeapYear = false;\n\t\t}\n\n\t\t// a year divisible by 4 and not divisible by 400 and not divisible by 100\n\t\t// is a leap year\n\t\telse if (divisible_by (year, 4)) {\n\t\t\tisLeapYear = true;\n\t\t}\n\n\t\t// the year is not a leap year\n\t\telse {\n\t\t\tisLeapYear = false;\n\t\t}\n\n\t\treturn isLeapYear;\n\t}\n}	\N	\N	0	2	2014-06-15 19:00:56	2014-06-15 19:00:56	106	Year.cs
187	38	bb3607503e3d1bf96eb73969	superseded	csharp	leap	﻿using System;\n\npublic class Year\n{\n\tpublic Year ()\n\t{\n\t}\n\n\t//\ton every year that is evenly divisible by 4\n\t//\texcept every year that is evenly divisible by 100\n\t//\tunless the year is also evenly divisible by 400\n\tstatic public bool IsLeap(int year)\n\t{\n\t\tFunc <int, int, bool> divisible_by = (x, y) => ((x % y) == 0);\n\t\treturn (divisible_by(year, 4) && \n\t\t\t\t(!divisible_by(year, 100) || divisible_by(year, 400)));\n\t}\n}	\N	\N	0	1	2014-07-27 03:57:48	2014-07-27 03:57:48	106	Year.cs
188	38	5588222315008d9fe5fdfba5	superseded	csharp	leap	﻿using System;\n\npublic class Year\n{\n\tpublic Year ()\n\t{\n\t}\n\n\t//\ton every year that is evenly divisible by 4\n\t//\texcept every year that is evenly divisible by 100\n\t//\tunless the year is also evenly divisible by 400\n\tstatic public bool IsLeap(int year)\n\t{\n\t\tFunc <int, int, bool> DivisibleBy = (x, y) => ((x % y) == 0);\n\t\tbool isLeapYear = false;\n\n\t\t// a year divisible by 400 \n\t\t// is a leap year\n\t\tif (DivisibleBy (year, 400)) {\n\t\t\tisLeapYear = true;\n\t\t}\n\n\t\t// a year divisible by 100 and not divisible by 400\n\t\t// is not a leap year\n\t\telse if (DivisibleBy (year, 100)) {\n\t\t\tisLeapYear = false;\n\t\t}\n\n\t\t// a year divisible by 4 and not divisible by 400 and not divisible by 100\n\t\t// is a leap year\n\t\telse if (DivisibleBy (year, 4)) {\n\t\t\tisLeapYear = true;\n\t\t}\n\n\t\t// the year is not a leap year\n\t\telse {\n\t\t\tisLeapYear = false;\n\t\t}\n\n\t\treturn isLeapYear;\n\t}\n}	\N	\N	0	3	2014-09-11 17:22:55	2014-09-11 17:22:55	106	Year.cs
189	38	6a7f5ac26a318a61ac5ca141	done	csharp	leap	﻿using System;\n\npublic static class IntExtensions\n{\n\tpublic static bool DivisibleBy(this int dividend, int divisor)\n\t{\n\t\treturn (dividend % divisor) == 0;\n\t}\n}\n\npublic static class Year\n{\n\n\t//\ton every year that is evenly divisible by 4\n\t//\texcept every year that is evenly divisible by 100\n\t//\tunless the year is also evenly divisible by 400\n\tstatic public bool IsLeap(int year)\n\t{\n\t\tbool isLeapYear = false;\n\n\t\t// a year divisible by 400 \n\t\t// is a leap year\n\t\tif (year.DivisibleBy(400)) {\n\t\t\tisLeapYear = true;\n\t\t}\n\n\t\t// a year divisible by 100 and not divisible by 400\n\t\t// is not a leap year\n\t\telse if (year.DivisibleBy(100)) {\n\t\t\tisLeapYear = false;\n\t\t}\n\n\t\t// a year divisible by 4 and not divisible by 400 and not divisible by 100\n\t\t// is a leap year\n\t\telse if (year.DivisibleBy(4)) {\n\t\t\tisLeapYear = true;\n\t\t}\n\n\t\t// the year is not a leap year\n\t\telse {\n\t\t\tisLeapYear = false;\n\t\t}\n\n\t\treturn isLeapYear;\n\t}\n}	2014-10-14 20:54:11	\N	0	4	2014-10-13 14:09:59	2014-10-13 14:09:59	106	Year.cs
190	38	e1c4418b436ccaa676f3a6dc	done	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(student, grade)\n    db[grade] ? db[grade] << student : db[grade] = [student]\n  end\n\n  def grade(year)\n    db[year] ||= []\n  end\n\n  def sort \n    Hash[school_array.sort]\n  end\n\n  def school_array\n    db.collect { |grade, names| [grade, names.sort] }\n  end\n\nend	2014-08-16 10:02:51	\N	0	1	2014-08-11 14:21:33	2014-08-11 14:21:33	107	grade-school.rb
191	40	3375be9fd707880a69e2b9cd	done	javascript	bob	function Bob() {}\n\nBob.prototype.hey = function(msg) {\n\n  var mood = new MessageMood(msg);\n  var response;\n\n  if(mood.isSilence()) {\n    response = "Fine. Be that way!";\n  } else if(mood.isShouting()) {\n    response = "Woah, chill out!";\n  } else if (mood.isAsking()) {\n    response = "Sure.";\n  } else {\n    response = "Whatever.";\n  }\n\n  return response;\n\n};\n\nmodule.exports = Bob;\n\n\nfunction MessageMood(msg) {\n  this.msg = msg;\n}\n\nMessageMood.prototype.isShouting = function() {\n  return this.msg === this.msg.toUpperCase() &&\n    this.msg !== this.msg.toLowerCase();\n};\n\nMessageMood.prototype.isAsking = function() {\n  return this.msg.slice(-1) === "?";\n};\n\nMessageMood.prototype.isSilence = function() {\n  return this.msg.trim() === "";\n};	2014-03-18 01:03:14	\N	0	2	2014-03-17 06:39:56	2014-03-17 06:39:56	108	bob.js
192	40	43eb59edfd48b75475adab19	superseded	javascript	bob	function MessageMood(msg) {\n  this.msg = msg;\n}\n\nMessageMood.prototype.isShouting = function() {\n  return this.msg === this.msg.toUpperCase();\n};\n\nMessageMood.prototype.isAsking = function() {\n  return this.msg.charAt(this.msg.length - 1) === "?";\n};\n\nMessageMood.prototype.isSilence = function() {\n  return this.msg === "";\n};\n\n\nfunction Bob() {}\n\nBob.prototype.hey = function(msg) {\n\n  var mood = new MessageMood(msg);\n  var response;\n\n  if(mood.isSilence()) {\n    response = "Fine, be that way.";\n  } else if(mood.isShouting()) {\n    response = "Woah, chill out!";\n  } else if (mood.isAsking()) {\n    response = "Sure";\n  } else {\n    response = "Whatever";\n  }\n\n  return response;\n\n};\n\nglobal.Bob = Bob;	\N	\N	0	1	2014-07-17 20:24:10	2014-07-17 20:24:10	108	bob.js
193	40	e7cf1fbb94eac88b37531358	pending	ruby	roman-numerals	module MyRoman\n  @letters = {\n    'M' => 1000,\n    'D' => 500,\n    'C' => 100,\n    'L' => 50,\n    'X' => 10,\n    'V' => 5,\n    'I' => 1\n  }\n\n  def self.to_roman(number)\n    romanized_string = ""\n    previous_letter = 'M'\n\n    @letters.each do |letter, letter_value|\n      letter_multiplier = number / letter_value\n      if letter_multiplier > 3\n        difference = 5 - letter_multiplier\n        romanized_string << letter * difference\n        romanized_string << previous_letter\n      else\n        romanized_string << letter * letter_multiplier\n      end\n      number -= letter_multiplier * letter_value\n      previous_letter = letter\n    end\n\n    to_proper_roman(romanized_string)\n  end\n\n  def self.to_proper_roman(improper_roman)\n    improper_roman.sub!(/DCD/, 'CM')\n    improper_roman.sub!(/LXL/, 'XC')\n    improper_roman.sub!(/VIV/, 'IX')\n    improper_roman\n  end\nend\n\nclass Integer\n  def to_roman\n    MyRoman.to_roman(self)\n  end\nend	\N	\N	0	1	2014-06-15 07:40:25	2014-06-15 07:40:25	109	roman.rb
194	40	1565fb8709a8bb6f29718442	done	ruby	raindrops	class Raindrops\n\n  def self.convert(number)\n    return number.to_s if number == 0\n    output = ''\n    output += 'Pling' if number % 3 == 0\n    output += 'Plang' if number % 5 == 0\n    output += 'Plong' if number % 7 == 0\n    output == '' ? number.to_s : output\n  end\n\nend	2014-08-12 06:26:37	\N	0	1	2014-08-05 10:24:40	2014-08-05 10:24:40	110	raindrops.rb
195	40	fb83aa25c9130ee5db9d5419	done	ruby	leap	module Year\n\n  def self.leap? y\n    if not div_by_4 y \n      false\n    else \n      if not div_by_100 y \n        true\n      else \n        if not div_by_400 y \n          false\n        else true\n        end\n      end\n    end\n  end\n\n  private\n\n  def self.div_by_4 y\n    y % 4 == 0\n  end\n\n  def self.div_by_100 y\n    y % 100 == 0\n  end\n\n  def self.div_by_400 y\n    y % 400 == 0\n  end\n\n\nend	2014-08-11 00:20:19	\N	0	1	2014-08-02 14:44:34	2014-08-02 14:44:34	111	year.rb
196	40	11343cb788be1aaf166bddaf	done	python	word-count	"""Produces a count of words"""\n\nimport re\n\nclass Phrase(object):\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    def word_count(self):\n        "Counts the words in self.phrase, ignoring special chars"""\n        count = {}\n        word_list = [x for x in self.phrase.split()]\n        for word in word_list:\n            """We need to lowercase, remove special chars, and deal with\n               the situation where it leaves a zero length string"""\n            word = word.lower()\n            word = re.sub('[?,:;!@#$%^&]', '', word)\n            if len(word) > 0:\n                if word not in count:\n                    count[word] = 1\n                else:\n                    count[word] += 1\n        return count	2014-06-20 10:58:53	\N	0	2	2014-06-18 06:27:07	2014-06-18 06:27:07	112	wordcount.py
197	40	aaab82d8760f9973ec401fe6	superseded	python	word-count	"""Produces a count of words"""\n\nimport re\n\nclass Phrase(object):\n    def __init__(self, *args):\n        self.phrase = args[0]\n\n    def word_count(self):\n        count = {}\n        word_list = [x for x in self.phrase.split()]\n        for word in word_list:\n            """We need to lowercase, remove special chars, and deal with\n               the situation where it leaves a zero length string"""\n            word = word.lower()\n            word = re.sub('[?,:;!@#$%^&]', '', word)\n            if len(word) > 0:\n                if word not in count:\n                    count[word] = 1\n                else:\n                    count[word] += 1\n        return count	\N	\N	0	1	2014-07-26 11:05:11	2014-07-26 11:05:11	112	word-count.py
198	40	1c3943603d1720a583bff083	done	haskell	nucleotide-count	module DNA (count, nucleotideCounts)\nwhere\n\nimport Data.List (sort, group)\nimport Data.Map (Map, fromList, union)\n\ndata Nucleotide = A | C | G | T | U\n    deriving (Show, Eq, Ord)\n\ngetNucleotide :: Char -> Nucleotide\ngetNucleotide 'A' = A\ngetNucleotide 'C' = C\ngetNucleotide 'G' = G\ngetNucleotide 'T' = T\ngetNucleotide 'U' = U\ngetNucleotide x = error $ "invalid nucleotide " ++ show x ++ ""\n\nemptyMap :: Map Char Int\nemptyMap = fromList [('A', 0), ('C', 0), ('G', 0), ('T', 0)]\n\ncount :: Char -> String -> Int\ncount nucleotide string = length $ filter (== nucleotide') string\n    where\n        -- nucleotide validation\n        nucleotide' = (show $ getNucleotide nucleotide) !! 0\n\ncountNucleotides :: String -> Map Char Int\ncountNucleotides string = fromList $ map (\\g -> (g !! 0, length g)) $ group $ sort string\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts string = union (countNucleotides string) emptyMap	2014-07-03 07:23:01	\N	0	1	2014-06-26 22:15:20	2014-06-26 22:15:20	113	DNA.hs
199	40	6cefbf1fdc2d771f4007513f	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(scoreMap map[int][]string) map[string]int {\n\tresult := make(map[string]int)\n\tfor score, letters := range scoreMap {\n\t\tfor _, letter := range letters {\n\t\t\tresult[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn result\n}	\N	\N	0	1	2014-05-26 12:06:18	2014-05-26 12:06:18	114	etl.go
200	40	10434758c4d0f9921eaeffed	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(lettersByScore map[int][]string) map[string]int {\n\tscoreByLetter := make(map[string]int)\n\tfor score, letters := range lettersByScore {\n\t\tfor _, letter := range letters {\n\t\t\tscoreByLetter[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn scoreByLetter\n}	2014-06-02 06:10:40	\N	0	2	2014-06-01 08:59:07	2014-06-01 08:59:07	114	etl.go
201	40	67e149c75e25b371f5d98a93	superseded	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace ExercismCSharp.csharp.leap\r\n{\r\n    public static class Year\r\n    {\r\n        #region Private Methods\r\n\r\n        public static bool IsLeap(int year)\r\n        {\r\n            if (year % 4 == 0)\r\n            {\r\n                if (year % 100 == 0)\r\n                {\r\n                    if (year % 400 == 0)\r\n                    {\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        #endregion Private Methods\r\n    }\r\n}	\N	\N	0	1	2014-03-21 00:36:45	2014-03-21 00:36:45	115	Year.cs
202	40	6daa66b2766a60dc72d7f7a1	superseded	csharp	leap	﻿//-----------------------------------------------------------------------\r\n// <author>Jeremiah Altepeter</author>\r\n//-----------------------------------------------------------------------\r\nnamespace ExercismCSharp.csharp.leap\r\n{\r\n    /// <summary>\r\n    /// Utility class to determine if a specific year is a leap year.\r\n    /// </summary>\r\n    public static class Year\r\n    {\r\n        #region Private Methods\r\n\r\n        /// <summary>\r\n        /// Determines whether the specified year is a leap year.\r\n        /// </summary>\r\n        /// <param name="year">The year to evaluate</param>\r\n        /// <returns>true if the year is a leap year; otherwise false</returns>\r\n        public static bool IsLeap(int year)\r\n        {\r\n            if (year % 4 == 0)\r\n            {\r\n                if (year % 100 == 0)\r\n                {\r\n                    if (year % 400 == 0)\r\n                    {\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        #endregion Private Methods\r\n    }\r\n}	\N	\N	0	2	2014-06-25 05:38:48	2014-06-25 05:38:48	115	Year.cs
203	40	4dd90886143eab0ce4e2078f	superseded	csharp	leap	﻿//-----------------------------------------------------------------------\r\n// <author>Jeremiah Altepeter</author>\r\n//-----------------------------------------------------------------------\r\nnamespace ExercismCSharp.csharp.leap\r\n{\r\n    using System;\r\n\r\n    /// <summary>\r\n    /// Utility class to determine if a specific year is a leap year.\r\n    /// </summary>\r\n    public static class Year\r\n    {\r\n        #region Private Methods\r\n\r\n        /// <summary>\r\n        /// Determines whether the specified year is a leap year.\r\n        /// </summary>\r\n        /// <param name="year">The year to evaluate</param>\r\n        /// <returns>true if the year is a leap year; otherwise false</returns>\r\n        public static bool IsLeap(int year)\r\n        {\r\n            if (year <= 0)\r\n            {\r\n                throw new ArgumentOutOfRangeException("year", "The year cannot be less than 1");\r\n            }\r\n\r\n            // A leap year occurs:\r\n            // on every year that is evenly divisible by 4\r\n            //  except every year that is evenly divisible by 100\r\n            //      unless the year is also evenly divisible by 400\r\n            return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);\r\n        }\r\n\r\n        #endregion Private Methods\r\n    }\r\n}	\N	\N	0	3	2014-08-30 21:50:19	2014-08-30 21:50:19	115	Year.cs
277	49	ea8a73950b143636c79f4019	pending	python	bob	class Bob():\n\t\n\tdef Bob():\n\t\treturn self\n\n\tdef hey(self, question):\n\t\tif(not question or question.isspace()):\n\t\t\treturn 'Fine. Be that way!'\n\t\telif(question.isupper()):\n\t\t\treturn 'Woah, chill out!'\n\t\telif(question[-1] == '?'):\n\t\t\treturn 'Sure.'\n\t\telse:\n\t\t\treturn 'Whatever.'	\N	\N	0	1	2014-07-18 07:04:46	2014-07-18 07:04:46	156	bob.py
278	49	13ae473dd99c55941d5f57d4	pending	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    word_map = { 3 => "Pling", 5 => "Plang", 7 => "Plong" }\n    word = ""\n    word_map.each { |k, v| word << v if num % k == 0 }\n    word.empty? ? num.to_s : word\n  end\nend	\N	\N	0	1	2014-08-25 00:19:48	2014-08-25 00:19:48	157	raindrops.rb
279	49	2bd1f08a12f582aff7379866	superseded	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = "ATCG"\n\n  def initialize(string)\n    raise ArgumentError unless good_genes(string) || string.empty?\n    @string = string\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless good_genes(nucleotide)\n    @string.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    Hash[*NUCLEOTIDES.chars.map {|k| [k,count(k)]}.flatten]\n  end\n\n  private\n\n  def good_genes(strand)\n    strand =~ Regexp.new("^[#{NUCLEOTIDES}]+")\n  end\n\nend	\N	\N	0	1	2014-08-05 22:54:56	2014-08-05 22:54:56	158	dna.rb
395	20	509cf3d2261387f3ff649a54	done	javascript	word-count	var words = function(string) {\n  var regex  = /[^0-9A-Za-z\\u00C0-\\u017F\\u0400-\\u04FF]+/,\n      counts = {},\n      _words = string.split(regex),\n      word;\n\n  for (var i in _words) {\n    word = _words[i].toLowerCase();\n    if (word.match(/[^\\s]+/))\n      counts[word] = (parseInt(counts[word]) || 0) + 1;\n  }\n\n  return counts;\n}\n\nmodule.exports = words;	2014-11-28 06:37:18.865614	\N	0	1	2014-11-26 02:37:54	2014-11-26 02:37:54	226	word-count.js
204	40	7a87c2d7aebc407aa50434d5	done	csharp	leap	﻿//-----------------------------------------------------------------------\r\n// <author>Jeremiah Altepeter</author>\r\n//-----------------------------------------------------------------------\r\nnamespace ExercismCSharp.csharp.leap\r\n{\r\n    using System;\r\n\r\n    /// <summary>\r\n    /// Utility class to determine if a specific year is a leap year.\r\n    /// </summary>\r\n    public static class Year\r\n    {\r\n        #region Public Methods\r\n\r\n        /// <summary>\r\n        /// Determines whether the specified year is a leap year.\r\n        /// </summary>\r\n        /// <param name="year">The year to evaluate</param>\r\n        /// <returns>true if the year is a leap year; otherwise false</returns>\r\n        public static bool IsLeap(int year)\r\n        {\r\n            if (year <= 0)\r\n            {\r\n                throw new ArgumentOutOfRangeException("year", "The year cannot be less than 1");\r\n            }\r\n\r\n            // A leap year occurs:\r\n            // on every year that is evenly divisible by 4\r\n            //  except every year that is evenly divisible by 100\r\n            //      unless the year is also evenly divisible by 400\r\n            return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\r\n        }\r\n\r\n        #endregion Public Methods\r\n    }\r\n}	2014-09-10 19:12:06	\N	0	4	2014-09-06 22:23:32	2014-09-06 22:23:32	115	Year.cs
205	40	3d9d7f0e1e5a5e0036e6cc69	done	ruby	hamming	module Hamming\n  def self.compute(a, b)\n    return 0 if a == b\n    a.chars.take(b.size).zip(b.chars).count { |x,y| x != y }\n  end\nend	2014-03-30 06:58:36	\N	0	2	2014-03-27 01:00:40	2014-03-27 01:00:40	116	hamming.rb
206	40	1dbdaa9b26ea0ef6ca9a47b2	superseded	ruby	hamming	module Hamming\n  def self.compute(a, b)\n    return 0 if a == b\n    y = b.split('')\n    x = a.split('').take(y.size)\n    result = x.map.with_index { |value, index| (value <=> y[index]).abs }\n    result.inject(&:+)\n  end\nend	\N	\N	0	1	2014-06-03 17:53:12	2014-06-03 17:53:12	116	hamming.rb
207	40	4b73fc4e1c19c67005f08601	done	csharp	sum-of-multiples	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace SumOfMultiples\r\n{\r\n    public class SumOfMultiples\r\n    {\r\n        List<int> _multiples; \r\n\r\n        public SumOfMultiples()\r\n        {\r\n\r\n        }\r\n        public SumOfMultiples(List<int> multiplesOf)\r\n        {\r\n            _multiples = multiplesOf;\r\n        }\r\n\r\n        public int To(int Distance)\r\n        {\r\n            int returnSum = 0;\r\n\r\n            if (_multiples == null)\r\n            {\r\n                List<int> usedMultpliers = new List<int>();\r\n                int mul3Count = ((Distance - 1 - ((Distance - 1) % 3)) /3);\r\n                for (int i = 1; i <= mul3Count; i++)\r\n                {\r\n                    if (!usedMultpliers.Contains(3 * i))\r\n                    {\r\n                        returnSum += 3 * i;\r\n                        usedMultpliers.Add(3 * i);\r\n                    }\r\n                    \r\n                }\r\n                int mul5Count = ((Distance - 1 - ((Distance - 1) % 5)) / 5);\r\n\r\n                for (int i = 1; i <= mul5Count; i++)\r\n                {\r\n                    if (!usedMultpliers.Contains(i*5))\r\n                    {\r\n                        returnSum += 5 * i;\r\n                        usedMultpliers.Add(5 * i);\r\n                    }\r\n                }\r\n                return returnSum;\r\n            }\r\n            else\r\n            {\r\n                List<int> usedMultpliers = new List<int>();\r\n                List<int> multiples = new List<int>(_multiples);\r\n                foreach (int i in multiples)\r\n                {\r\n                    int mulCount = ((Distance - 1 - ((Distance - 1) % i)) / i);\r\n                    for (int y = 1; y <= mulCount; y++)\r\n                    {\r\n                        if (!usedMultpliers.Contains(i * y))\r\n                        {\r\n                            returnSum += i * y;\r\n                            usedMultpliers.Add(y * i);\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                return returnSum;\r\n            }\r\n        }\r\n    }\r\n}\r	2014-06-30 14:16:09	\N	0	1	2014-06-28 22:43:55	2014-06-28 22:43:55	117	SumOfMultiples.cs
208	40	e3d79df59e6454e23825f382	done	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    counter = {}\n\n    @phrase\n      .split(/[^a-z0-9\\']/i)\n      .each { |word|\n        word = word.strip.downcase\n        unless(word.empty?)\n          (counter.has_key?(word)) ? counter[word] += 1 : counter[word] = 1\n        end\n      }\n\n    counter\n  end\n\nend	2014-04-24 15:20:21	\N	0	1	2014-04-21 20:46:05	2014-04-21 20:46:05	118	phrase.rb
209	40	cafbbb2bd65ae3bc0d56c304	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\n\nhammingDistance :: String -> String -> Int\nhammingDistance strand = \n    length . filter isNotSame . zip strand where\n        isNotSame (x,y) = x /= y	\N	\N	0	1	2014-04-28 21:00:08	2014-04-28 21:00:08	119	DNA.hs
210	40	d47a1d97f4805b4c2282ff1f	done	haskell	point-mutations	module DNA (hammingDistance) where\n\n\nhammingDistance :: String -> String -> Int\nhammingDistance strand =\n    length . filter (uncurry (/=)) . zip strand	2014-05-29 21:28:39	\N	0	2	2014-05-23 23:17:04	2014-05-23 23:17:04	119	DNA.hs
211	40	f48b4316a7c2aab1a4331ff9	superseded	ruby	etl	class ETL\n  \n  def self.transform values\n    values.each_pair.with_object({}) do |(score, words), result|\n      words.collect do |word|\n        result[word.downcase] = score\n      end\n    end\n  end\n  \nend	\N	\N	0	1	2014-06-09 08:59:34	2014-06-09 08:59:34	120	etl.rb
212	40	197f740e267813731f7d5f3d	pending	ruby	etl	class ETL\n  \n  def self.transform old_scores\n    old_scores.each.with_object({}) do |(score, words), new_scores|\n      words.each do |word|\n        new_scores[word.downcase] = score\n      end\n    end\n  end\n  \nend	\N	\N	0	2	2014-07-18 14:01:28	2014-07-18 14:01:28	120	etl.rb
221	40	353667b6f713d5d2c305b93f	superseded	javascript	word-count	var WordCount = (function () {\n\n    var Words = function (input) {\n\n        var words =  input.toLowerCase()\n                    .replace(/([!:@\\$%\\^&,¡\\?¿\\n]+)/g, " ")\n                    .trim()\n                    .split(/ +/g);\n\n        this.histogram = function() {\n            var counts = new Array();\n\n            /** how do I add incrementKey to the Array object so its more oo?? */\n            function incrementKey(key, array) {\n                array[key] = ( typeof array[key] === "number") ? array[key] + 1 : 1;\n            }\n\n            words.forEach(function (key) {\n                incrementKey(key, counts);\n            }, counts);\n\n            return counts;\n        };\n    };\n\n    return function (input) {\n        return new Words(input).histogram();\n    };\n})();\n\n\nmodule.exports = WordCount;	\N	\N	0	1	2014-04-25 02:15:06	2014-04-25 02:15:06	126	word-count.js
222	40	ecaf5807cce71e42f70e0992	superseded	javascript	word-count	//Array3.prototype.add = Array3.prototype.push\n\nvar NumberArray = function() {\n    Array.call(this);\n};\nNumberArray.prototype = new Array();\nNumberArray.prototype["incKey"] = function(key) {\n    this[key] = ( typeof this[key] === "number") ? this[key] + 1 : 1;\n};\n\nvar WordCount = (function () {\n\n    var Words = function (input) {\n\n        var words =  input.toLowerCase()\n                    .replace(/([!:@\\$%\\^&,¡\\?¿\\n]+)/g, " ")\n                    .trim()\n                    .split(/ +/g);\n\n        this.histogram = function() {\n//            var counts = new Array();\n            var counts = new NumberArray();\n\n            /** how do I add incrementKey to the Array object so its more oo?? */\n            function incrementKey(key, array) {\n                array[key] = ( typeof array[key] === "number") ? array[key] + 1 : 1;\n            }\n\n            words.forEach(function (key) {\n                counts.incKey(key);\n//                incrementKey(key, counts);\n            }, counts);\n\n            return counts;\n        };\n    };\n\n    return function (input) {\n        return new Words(input).histogram();\n    };\n})();\n\n\nmodule.exports = WordCount;	\N	\N	0	3	2014-05-20 07:10:27	2014-05-20 07:10:27	126	word-count.js
229	40	6334266e3a6de6f858db698c	pending	cpp	word-count	#include "word_count.h"\n#include "stdio.h"\n#include "ctype.h"\n\nusing namespace std;\n\nstring word_count::filter(string message) {\n    string filtered;\n    for(string::const_iterator it = message.begin(); it != message.end(); ++it) {\n        if (isalnum(*it)) {\n           filtered += tolower(*it); \n        }\n    }\n    return filtered;\n}\n\nmap<string, int> word_count::words(string message) {\n    map<string, int> word_map;\n    istringstream iss(message);\n\n    do\n    {\n        string sub;\n        iss >> sub;\n        sub = word_count::filter(sub);\n        if (!sub.empty()) {\n            word_map[sub] = word_map[sub] + 1;\n        }\n    } while (iss); \n    \n    return word_map;\n}	\N	\N	0	1	2014-05-17 18:40:40	2014-05-17 18:40:40	128	word_count.cpp
213	40	4b4da5becedc821770e88fb8	superseded	clojure	robot-simulator	;;; Low level functions on individual attributes\n\n(def turn-right\n  {:north :east, :east :south, :south :west, :west :north})\n\n(def turn-left\n  {:east :north, :south :east, :west :south, :north :west})\n\n(defn move\n  [coords bearing]\n  (case bearing\n    :north (assoc coords :y (inc (:y coords)))\n    :south (assoc coords :y (dec (:y coords)))\n    :east (assoc coords :x (inc (:x coords)))\n    :west (assoc coords :x (dec (:x coords)))))\n\n;;; A robot protocol\n\n(defprotocol RobotActions\n  "Actions performed by a Robot"\n  (right [robot]   "Turn the robot to the right.")\n  (left [robot]    "Turn the robot to the left.")\n  (advance [robot] "Advance one space in the current bearing."))\n\n;;; A concrete implementation of the Robot protocol\n\n(defrecord Robot [coordinates bearing]\n  RobotActions\n  (left [this]\n    (->Robot (:coordinates this)\n             (turn-left (:bearing this))))\n  (right [this]\n    (->Robot (:coordinates this)\n             (turn-right (:bearing this))))\n  (advance [this]\n    (->Robot (move (:coordinates this) (:bearing this))\n             (:bearing this))))\n\n(defn robot\n  "Robot construction function."\n  ([]               (robot {:x 0 :y 0}))\n  ([coords]         (robot coords :north))\n  ([coords bearing] (->Robot coords bearing)))\n\n;;; Simulation functions (i.e. functions that turn a string of\n;;; characters into robot actions.\n\n(defn step\n  "Carry out a single step of a robot simulation."\n  [robot instruction]\n  (case instruction\n    \\R (right robot)\n    \\L (left robot)\n    \\A (advance robot)))\n\n(defn simulate\n  "Carry out the given instructions to the robot."\n  [instructions robot]\n  (reduce step robot instructions))	\N	\N	0	1	2014-07-09 05:22:34	2014-07-09 05:22:34	121	robot.clj
214	40	f3d1e19b82433e998da792e3	done	clojure	robot-simulator	;;; Low level functions on individual attributes\n\n(def turn-right\n  {:north :east, :east :south, :south :west, :west :north})\n\n(def turn-left\n  {:east :north, :south :east, :west :south, :north :west})\n\n(defn move\n  [coords bearing]\n  (case bearing\n    :north (update-in coords [:y] inc)\n    :south (update-in coords [:y] dec)\n    :east  (update-in coords [:x] inc)\n    :west  (update-in coords [:x] dec)))\n\n;;; A robot protocol\n\n(defprotocol RobotActions\n  "Actions performed by a Robot"\n  (right [robot]   "Turn the robot to the right.")\n  (left [robot]    "Turn the robot to the left.")\n  (advance [robot] "Advance one space in the current bearing."))\n\n;;; A concrete implementation of the Robot protocol\n\n(defrecord Robot [coordinates bearing]\n  RobotActions\n  (left [_]\n    (->Robot coordinates\n             (turn-left bearing)))\n  (right [_]\n    (->Robot coordinates\n             (turn-right bearing)))\n  (advance [_]\n    (->Robot (move coordinates bearing)\n             bearing)))\n\n(defn robot\n  "Robot construction function."\n  ([]               (robot {:x 0 :y 0}))\n  ([coords]         (robot coords :north))\n  ([coords bearing] (->Robot coords bearing)))\n\n;;; Simulation functions (i.e. functions that turn a string of\n;;; characters into robot actions.\n\n(defn step\n  "Carry out a single step of a robot simulation."\n  [robot instruction]\n  (case instruction\n    \\R (right robot)\n    \\L (left robot)\n    \\A (advance robot)))\n\n(defn simulate\n  "Carry out the given instructions to the robot."\n  [instructions robot]\n  (reduce step robot instructions))	2014-08-02 03:51:52	\N	0	2	2014-07-26 19:38:02	2014-07-26 19:38:02	121	robot.clj
215	40	28b38be82f60c939ec2bbe94	done	elixir	nucleotide-count	defmodule DNA do\n\n  def count(dna, nucleotide) do\n    nucleotide_counts(dna) |> HashDict.get(nucleotide, 0)\n  end\n\n  def nucleotide_counts(dna) do\n    dna |> do_parse_nucleotides |> do_count_nucleotides\n  end\n\n  defp do_parse_nucleotides(dna) do\n    dna |> to_char_list\n  end\n\n  defp do_count_nucleotides(nucleotides) do\n    counts = HashDict.new [{?A, 0}, {?T, 0}, {?C, 0}, {?G, 0}]\n    Enum.reduce(nucleotides, counts,\n      fn(nucleotide, dict) -> HashDict.update!(dict, nucleotide, &1 + 1) end)\n  end\n\nend	2014-04-26 07:39:31	\N	0	1	2014-04-19 11:53:04	2014-04-19 11:53:04	122	nucleotide-count.exs
216	40	46f5603e9c16c84662577c05	done	python	rna-transcription	__author__ = 'romleinster'\r\n\r\n\r\ndef to_rna(dna):\r\n    rna = ""\r\n    translation = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\r\n    for letter in dna:\r\n        if letter in translation.keys():\r\n            rna += translation[letter]\r\n    return rna\r	2014-05-21 17:42:32	\N	0	1	2014-05-18 00:33:43	2014-05-18 00:33:43	123	dna.py
217	40	fe961cc7924a0a3db43fcdf2	superseded	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (let [blank? #(clojure.string/blank? input)\n        any-lower-case? #(re-find #"[a-z]" %1)\n        any-upper-case? #(re-find #"[A-Z]" %1)\n        shout? #(and (any-upper-case? input) (not (any-lower-case? input)))\n        question? #(re-find #"\\?$" input)]\n    (cond\n      (blank?) "Fine. Be that way!"\n      (shout?) "Woah, chill out!"\n      (question?) "Sure."\n      :else "Whatever.")))	\N	\N	0	1	2014-07-16 18:04:05	2014-07-16 18:04:05	124	bob.clj
218	40	d7b90383b61665ce792569ba	pending	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (let [blank? (clojure.string/blank? input)\n        any-lower-case? (re-find #"[a-z]" input)\n        any-upper-case? (re-find #"[A-Z]" input)\n        shout? (and any-upper-case? (not any-lower-case?))\n        question? (re-find #"\\?$" input)]\n    (cond\n      blank? "Fine. Be that way!"\n      shout? "Woah, chill out!"\n      question? "Sure."\n      :else "Whatever.")))	\N	\N	0	2	2014-09-06 08:35:30	2014-09-06 08:35:30	124	bob.clj
219	40	a8b8aa863aaed62285000d78	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\nisNothing :: String -> Bool\nisNothing s = not (any isAlphaNum s || any isMark s || any isSymbol s || any isPunctuation s)\n\nisYelling :: String -> Bool\nisYelling s = not ( any isLower s ) && any isUpper s\n\nisQuestion :: String -> Bool\nisQuestion [] = False\nisQuestion s = '?' == last s\n\nresponseFor :: String -> String\nresponseFor request\n    | isYelling  request = "Woah, chill out!"\n    | isQuestion request = "Sure."\n    | isNothing  request = "Fine. Be that way!"\n    | otherwise = "Whatever."	\N	\N	0	1	2014-03-22 23:56:29	2014-03-22 23:56:29	125	Bob.hs
220	40	250aa2d97fa4f0782bbdda09	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\nisNothing :: String -> Bool\nisNothing = all isSpace\n\nisYelling :: String -> Bool\nisYelling s = not ( any isLower s ) && any isUpper s\n\nisQuestion :: String -> Bool\nisQuestion [] = False\nisQuestion s = '?' == last s\n\nresponseFor :: String -> String\nresponseFor request\n    | isYelling  request = "Woah, chill out!"\n    | isQuestion request = "Sure."\n    | isNothing  request = "Fine. Be that way!"\n    | otherwise = "Whatever."	2014-04-02 02:07:03	\N	0	2	2014-03-26 14:55:27	2014-03-26 14:55:27	125	Bob.hs
228	40	97c201682747441a33cd685b	pending	ruby	triangle	class Triangle\n  def initialize(a, b, c)\n    @points = [a, b, c].sort\n    raise TriangleError unless @points.min > 0\n    raise TriangleError unless @points.last < @points.first(2).reduce(:+)\n  end\n\n  def kind\n    case @points.uniq.length\n    when 1 then :equilateral\n    when 2 then :isosceles\n    when 3 then :scalene\n    end\n  end\nend\n\nclass TriangleError < Exception; end	\N	\N	0	1	2014-05-10 17:06:26	2014-05-10 17:06:26	127	triangle.rb
230	40	be7af9e062c81021a0498182	superseded	elixir	rna-transcription	defmodule RNAPolymerase do\n  use GenServer.Behaviour\n\n  def new do\n    {:ok, pid} = :gen_server.start_link(__MODULE__, [], [])\n  end\nend\n\ndefmodule DNA do\n  def to_rna(dna) do\n    rna = RNAPolymerase.new()\n\n    # Regex.replace(%r/T/, dna, 'U')\n  end\n\n  def bind\nend	\N	\N	0	2	2014-04-08 10:21:21	2014-04-08 10:21:21	129	rna-transcription.exs
223	40	ce898a38c295497dd619c15c	superseded	javascript	word-count	//Array3.prototype.add = Array3.prototype.push\n\nvar NumberArray = function() {\n    Array.call(this);\n};\nNumberArray.prototype = new Array();\nNumberArray.prototype["incKey"] = function(key) {\n    this[key] = ( typeof this[key] === "number") ? this[key] + 1 : 1;\n};\n\nvar WordCount = (function () {\n\n    var Words = function (input) {\n\n        var words =  input.toLowerCase()\n                    .replace(/([!:@\\$%\\^&,¡\\?¿\\n]+)/g, " ")\n                    .trim()\n                    .split(/ +/g);\n\n        this.histogram = function() {\n            var counts = new Array();\n            //var counts = new NumberArray();\n\n            /** how do I add incrementKey to the Array object so its more oo?? */\n            function incrementKey(key, array) {\n                array[key] = ( typeof array[key] === "number") ? array[key] + 1 : 1;\n            }\n\n            words.forEach(function (key) {\n                //counts.incKey(key);\n                incrementKey(key, counts);\n            }, counts);\n\n            return counts;\n        };\n    };\n\n    return function (input) {\n        return new Words(input).histogram();\n    };\n})();\n\n\nmodule.exports = WordCount;	\N	\N	0	2	2014-06-03 07:20:05	2014-06-03 07:20:05	126	word-count.js
224	40	750257c09f13104e4403b012	superseded	javascript	word-count	var NumberArray = function () {\n    Array.call(this);\n};\nNumberArray.prototype = new Array();\nNumberArray.prototype["incKey"] = function (key) {\n    this[key] = ( typeof this[key] === "number") ? this[key] + 1 : 1;\n};\nNumberArray.prototype.toObject = function () {\n    var result = {};\n    this.forEach(function (key) {\n        result[key] = this[key];\n    }, this);\n};\n\nvar WordCount = (function () {\n\n    var Words = function (input) {\n\n        function parseWords() {\n            return input.toLowerCase()\n                .replace(/([!:@\\$%\\^&,¡\\?¿\\n]+)/g, " ")\n                .trim()\n                .split(/ +/g);\n        }\n\n        var words = parseWords();\n\n        this.histogram = function () {\n            var counts = new Array();\n//            var counts = new NumberArray();\n\n            /** how do I add incrementKey to the Array object so its more oo?? */\n            function incrementKey(key, array) {\n                array[key] = ( typeof array[key] === "number") ? array[key] + 1 : 1;\n            }\n\n            words.forEach(function (key) {\n//                counts.incKey(key);\n                    incrementKey(key, counts);\n                },\n//                counts.toObject());\n                counts);\n\n            return counts;\n        };\n    };\n\n    return function (input) {\n        return new Words(input).histogram();\n    };\n})();\n\n\nmodule.exports = WordCount;	\N	\N	0	4	2014-06-26 12:50:09	2014-06-26 12:50:09	126	word-count.js
225	40	f46f552fe92415b46dc3434c	superseded	javascript	word-count	var WordCount = (function () {\n\n    var _parseWords = function (input) {\n        return input.toLowerCase()\n            .replace(/([!:@\\$%\\^&,¡\\?¿\\n]+)/g, " ")\n            .trim()\n            .split(/ +/g);\n    };\n\n    var _incrementKey = function (key, array) {\n        /** how do I add incrementKey to the Array object so its more oo??\n         * ive tried to do this but the toEqual check fails in jasmine\n         * the toStrings of the objects look identical :S  */\n        array[key] = ( typeof array[key] === "number") ? array[key] + 1 : 1;\n    };\n\n    var _histogramForWords = function (words) {\n\n        var result = new Array();\n\n        words.forEach(function (key) {\n            _incrementKey(key, result);\n        }, result);\n\n        return result;\n    };\n\n    var Words = function (input) {\n        var words = _parseWords(input);\n        this.histogram = function () {\n            return _histogramForWords(words);\n        };\n    };\n\n    return function (input) {\n        return new Words(input).histogram();\n    };\n})();\n\n\nmodule.exports = WordCount;	\N	\N	0	5	2014-08-26 11:51:03	2014-08-26 11:51:03	126	word-count.js
226	40	f76af94b1c833308b2542685	superseded	javascript	word-count	var Words = (function () {\n\n    var _parseWords = function (input) {\n        return input.toLowerCase()\n            .replace(/([!:@\\$%\\^&,¡\\?¿\\n]+)/g, " ")\n            .trim()\n            .split(/ +/g);\n    };\n\n    var _incrementKey = function (key, array) {\n        /** how do I add incrementKey to the Array object so its more oo??\n         * ive tried to do this but the toEqual check fails in jasmine\n         * the toStrings of the objects look identical :S  */\n        array[key] = ( typeof array[key] === "number") ? array[key] + 1 : 1;\n    };\n\n    var _histogramForWords = function (words) {\n\n        var result = new Array();\n\n        words.forEach(function (key) {\n            _incrementKey(key, result);\n        }, result);\n\n        return result;\n    };\n\n    var Words = function (input) {\n\n        var words = _parseWords(input);\n\n        this.histogram = function () {\n            return _histogramForWords(words);\n        };\n    };\n\n    return Words;\n\n}());\n\n\n\nvar WordCount = (function () {\n    return function (input) {\n        return new Words(input).histogram();\n    };\n})();\n\n\nmodule.exports = WordCount;	\N	\N	0	6	2014-08-31 08:21:42	2014-08-31 08:21:42	126	word-count.js
227	40	a45579e9cb9c2d429e73ac95	done	javascript	word-count	var WordCount = (function () {\n    var _parseWords = function (input) {\n        var result;\n\n        var punctuation = /([!:@\\$%\\^&,¡\\?¿]+)/g;\n        var whiteSpace = /\\s+/g;\n\n        result = input\n            .toLowerCase()\n            .replace(punctuation, "")\n            .split(whiteSpace);\n\n        return  result;\n    };\n\n    var _incrementKey = function (key) {\n        /** how do I add incrementKey to the Array object so its more oo??\n         * ive tried to do this but the toEqual check fails in jasmine\n         * the toStrings of the objects look identical :S  */\n        this[key] = ( typeof this[key] === "number") ? this[key] + 1 : 1;\n    };\n\n    var Words = function (input) {\n        var words = _parseWords(input);\n\n        this.histogram = function () {\n            var result_array = [];\n            words.forEach(_incrementKey, result_array);\n            return result_array;\n        };\n    };\n\n    return  function (input) {\n        return new Words(input).histogram();\n    };\n})();\n\n\nmodule.exports = WordCount;	2014-09-13 14:28:21	\N	0	7	2014-09-11 10:58:49	2014-09-11 10:58:49	126	word-count.js
231	40	1fc1f0fc772f62c1927aaffd	superseded	elixir	rna-transcription	defmodule Cell do\n  def create do\n    :gen_event.start_link()\n  end\n\n  def add_enzyme(cell, enzyme, substrate) do\n    :gen_event.add_handler(cell, enzyme, substrate)\n  end\n\n  def signal(cell, event) do\n    :gen_event.notify(cell, event)\n  end\nend\n\ndefmodule RNAPolymerase do\n  use GenEvent.Behaviour\n\n  def product(cell) do\n    :gen_event.call(cell, RNAPolymerase, :product)\n  end\n\n  # GenEvent\n  def init(substrate) do\n    {:ok, substrate}\n  end\n\n  def handle_event(:do_transription, substrate) do\n    {:ok, Regex.replace(%r/T/, substrate, 'U')}\n  end\n\n  def handle_call(:product, product) do\n    {:ok, product, product}\n  end\nend\n\ndefmodule DNA do\n  def to_rna(dna) do\n    {:ok, cell} = Cell.create\n    Cell.add_enzyme(cell, RNAPolymerase, dna)\n    Cell.signal(cell, :do_transription)\n    RNAPolymerase.product(cell)\n  end\nend	\N	\N	0	3	2014-06-12 18:22:34	2014-06-12 18:22:34	129	rna-transcription.exs
232	40	87f2416941f4047892f5edc1	superseded	elixir	rna-transcription	defmodule DNA do\n  def to_rna(dna) do\n    Regex.replace(%r/T/, dna, 'U')\n  end\nend	\N	\N	0	1	2014-08-02 20:10:12	2014-08-02 20:10:12	129	rna-transcription.exs
233	40	28031f533a03d7f3447457f1	done	elixir	rna-transcription	defmodule Cell do\n  def create do\n    {:ok, pid} = :gen_event.start_link\n    Process.register(pid, :cell)\n    pid\n  end\n\n  def add_enzyme(enzyme, substrate) do\n    :gen_event.add_handler(cellid, enzyme, substrate)\n  end\n\n  def signal(event) do\n    :gen_event.notify(cellid, event)\n  end\n\n  def cellid do\n    Process.whereis(:cell)\n  end\nend\n\ndefmodule RNAPolymerase do\n  use GenEvent.Behaviour\n\n  def product do\n    :gen_event.call(Cell.cellid, RNAPolymerase, :product)\n  end\n\n  defp transribe(?T), do: ?U\n  defp transribe(nucleotide), do: nucleotide \n\n  # GenEvent\n  def handle_event(:do_transription, substrate) do\n    {:ok, Enum.map(substrate, &transribe/1)}\n  end\n\n  def handle_call(:product, product) do\n    {:ok, product, product}\n  end\nend\n\ndefmodule DNA do\n  def to_rna(dna) do\n    cell = Cell.create\n    Cell.add_enzyme(RNAPolymerase, dna)\n    Cell.signal(:do_transription)\n    RNAPolymerase.product\n  end\nend	2014-08-07 16:09:20	\N	0	4	2014-08-03 19:22:53	2014-08-03 19:22:53	129	rna-transcription.exs
234	40	144046d76e962852b061fef2	pending	python	hamming	def hamming(dna_seq_1, dna_seq_2):\r\n \r\n  hamming_distance = abs(len(dna_seq_1) - len(dna_seq_2))\r\n  \r\n  for a,b in zip(dna_seq_1, dna_seq_2):\r\n    if a != b: \r\n      hamming_distance += 1\r\n\r\n  return hamming_distance\r\n    \r\n\r\n\r	\N	\N	0	2	2014-04-28 15:46:57	2014-04-28 15:46:57	130	hamming.py
235	40	5f224ee218cf97aa122c50e2	superseded	python	hamming	\r\n'''\r\nGet the difference of the string length of two string as a default\r\nHamming distance. Use zip() to compare and count the hamming distance of\r\nstrands having same length.\r\n'''\r\n\r\ndef hamming(dna_strand_1, dna_strand_2):\r\n  \r\n  return sum(a != b for a, b in zip(dna_strand_1,dna_strand_2)) + abs(len(dna_strand_1) - len(dna_strand_2))	\N	\N	0	1	2014-05-19 19:03:44	2014-05-19 19:03:44	130	hamming.py
236	40	9350252ea585b953035e6469	done	ruby	difference-of-squares	class Squares\r\n\r\n\tdef initialize ( n )\r\n\t\t@num = n\r\n\t\t@sqsum = 0\r\n\t\t@sumsq = 0\r\n\tend\r\n\r\n\tdef square_of_sums\r\n\t\tfor n in 1..@num\r\n\t\t\t@sqsum += n\r\n\t\tend\r\n\t\t@sqsum = @sqsum**2\r\n\tend\r\n\r\n\tdef sum_of_squares\r\n\t\tfor n in 1..@num\r\n\t\t\t@sumsq += n**2\r\n\t\tend\r\n\t\t@sumsq\r\n\tend\r\n\r\n\tdef difference\r\n\t\tdiff = square_of_sums - sum_of_squares\r\n\t\tdiff\r\n\tend\r\n\r\nend	2014-05-02 04:36:23	\N	0	1	2014-04-30 06:54:38	2014-04-30 06:54:38	131	squares.rb
237	40	d4435acfb202f55ade3168a5	superseded	cpp	bob	#ifndef usa_bob_h\n#define usa_bob_h\n\n#include <string>\n\nclass bob\n{\npublic:\n    \n    static std::string hey(std::string str)\n    {\n        \n        //Uppercase copy of the given string\n        std::string uppercase = str;\n        std::transform(uppercase.begin(), uppercase.end(), uppercase.begin(), std::toupper);\n        \n        \n        std::string alfabet = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";\n        std::string numbers = "1234567890";\n\n        bool containletters = false;\n        bool containnumbers = false;\n        \n        \n        //Check for letters in the string\n        for (auto it = str.begin(); it != str.end(); it++) {\n            if(alfabet.find(*it) != alfabet.npos)\n            {\n                containletters = true;\n                break;\n            }\n        }\n        \n        //check for numbers in the string\n        for (auto it = str.begin(); it != str.end(); it++) {\n            if(numbers.find(*it) != numbers.npos)\n            {\n                containnumbers = true;\n                break;\n            }\n        }\n        \n        \n        //If the string is equals to the upercase version of the string\n        //and it contains alfabet letters then the string is already all uppercase (The person is screaming)\n        if(containletters)\n        {\n            if(str.compare(uppercase) == 0)\n                return "Whoa, chill out!";\n        }\n        else\n        {\n            //If the string does not contain letters then the person is screaming only\n            //if the last letter is '!'\n            if(str[str.length() - 1] == '!')\n                return "Whoa, chill out!";\n        }\n        \n        //If the last character (size - 1) is a questionmark\n        //then you are probably asking a question\n        if(str[str.length()-1] == '?')\n        {\n            return "Sure.";\n        }\n        \n        //If the string dosent contain numbers or letters then it dosent contain any usful information for bob\n        if(!containletters && !containnumbers)\n        {\n            return "Fine. Be that way!";\n        }\n        \n        //Defult retrun valu if non of the if statments are true\n        return "Whatever.";\n    }\n};\n\n\n#endif	\N	\N	0	1	2014-03-20 12:37:29	2014-03-20 12:37:29	132	bob.h
238	40	826b1273c2a54eccd1cb5852	done	cpp	bob	#ifndef usa_bob_h\n#define usa_bob_h\n\n#include <string>\n\nclass bob\n{\npublic:\n    \n    static std::string hey(const std::string & str)\n    {\n        \n        //Uppercase copy of the given string\n        std::string uppercase = str;\n        std::transform(uppercase.begin(), uppercase.end(), uppercase.begin(), std::toupper);\n        \n        \n        std::string alfabet = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";\n        std::string numbers = "1234567890";\n\n        bool containletters = false;\n        bool containnumbers = false;\n        \n        \n        //Check for letters in the string\n        for (auto it = str.begin(); it != str.end(); it++) {\n            if(alfabet.find(*it) != alfabet.npos)\n            {\n                containletters = true;\n                break;\n            }\n        }\n        \n        //check for numbers in the string\n        for (auto it = str.begin(); it != str.end(); it++) {\n            if(numbers.find(*it) != numbers.npos)\n            {\n                containnumbers = true;\n                break;\n            }\n        }\n        \n        \n        //If the string is equals to the upercase version of the string\n        //and it contains alfabet letters then the string is already all uppercase (The person is screaming)\n        if(containletters)\n        {\n            if(str.compare(uppercase) == 0)\n                return "Whoa, chill out!";\n        }\n        else\n        {\n            //If the string does not contain letters then the person is screaming only\n            //if the last letter is '!'\n            if(str[str.length() - 1] == '!')\n                return "Whoa, chill out!";\n        }\n        \n        //If the last character (size - 1) is a questionmark\n        //then you are probably asking a question\n        if(str[str.length()-1] == '?')\n        {\n            return "Sure.";\n        }\n        \n        //If the string dosent contain numbers or letters then it dosent contain any usful information for bob\n        if(!containletters && !containnumbers)\n        {\n            return "Fine. Be that way!";\n        }\n        \n        //Defult retrun valu if non of the if statments are true\n        return "Whatever.";\n    }\n};\n\n\n#endif	2014-05-23 01:14:29	\N	0	2	2014-05-14 18:02:40	2014-05-14 18:02:40	132	bob.h
239	40	fcb62feeb1b51bbd0519f0a7	pending	elixir	bob	defmodule Teenager do\n\n  def __info__ do\n\n  end\n\n  def hey(_statement) do\n\t\tshouting = String.upcase(_statement) == _statement && String.downcase(_statement) != _statement\n\t\tquestion = String.ends_with? _statement, "?" \n\t\tsilence = String.rstrip(_statement) == ""\n\t\tif(silence) do\n\t\t\t"Fine. Be that way!"\n\t\telse\n\t\t\tif(shouting) do\n\t\t\t  "Woah, chill out!"\n\t\t\telse\n\t\t\t\tif(question) do\n\t\t\t\t\t"Sure."\n\t\t\t\telse\n\t\t\t\t\t"Whatever."\n\t\t\t\tend\n\t\t\tend\n\t\tend\n  end\n\nend	\N	\N	0	1	2014-04-18 02:38:17	2014-04-18 02:38:17	133	bob.exs
240	40	2add7c79ddceffbb362b737c	pending	python	leap	def is_leap_year(year):\n    if (year % 4 == 0 and (not year % 100 == 0)) or year % 400 == 0:\n        return True\n    	\N	\N	0	1	2014-04-18 13:01:39	2014-04-18 13:01:39	134	year.py
241	40	b5c9e22914d89735cc42f469	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  def match(possible_anagrams)\n    return possible_anagrams.select { |possible| anagram?(possible) }\n  end\n\n  private\n  def anagram?(possible)\n    original, other = @word.downcase, possible.downcase\n    return original != other && original.chars.sort == other.chars.sort\n  end\nend	2014-05-12 08:29:32	\N	0	1	2014-05-08 01:32:10	2014-05-08 01:32:10	135	anagram.rb
474	41	cafed6b918d641cfff827e1d	pending	clojure	etl	(ns etl)\n\n(defn transform [old-map]\n  (apply hash-map \n         (mapcat (fn [[k v]] \n                   (mapcat (fn [val] \n                             (list (clojure.string/lower-case val) k)) \n                           v)) old-map)))	\N	\N	0	1	2014-09-20 01:55:00	2014-09-20 01:55:00	273	etl.clj
580	45	143155c5ea42f4ce1f2558ee	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement =\n\tcase rnaComplement of \n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n\t\t'T' -> 'A'\n\t\t'A' -> 'U'\n\t\t _  -> error ("Invalid nucleotide: " ++ [rnaComplement])\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	\N	0	4	2014-11-07 04:53:51	2014-11-07 04:53:51	334	DNA.hs
243	40	fb735466bf59559914f2abd1	superseded	ruby	bob	class Bob\n\tdef hey(string)\n\t\t# Check if nothing is said to bob\n\t\tif string.strip.empty?\n\t\t\treturn 'Fine. Be that way!'\n\t\t# check if bob is being yelled at\n\t\telsif string == string.upcase\n\t\t\treturn 'Woah, chill out!'\n\t\t# check if bob is being asked a question\n\t\telsif string.end_with?('?')\n\t\t\treturn 'Sure.'\n\t\telse\n\t\t\treturn 'Whatever.'\n\t\tend\n\tend\nend	\N	\N	0	2	2014-04-23 07:41:28	2014-04-23 07:41:28	137	bob.rb
244	40	456505c0a110c41aa8721be0	superseded	ruby	bob	class Phrase\n\tattr_reader :string\n\n\tdef initialize(string)\n\t\t@string = string\n\tend\n\tdef word_count\n\t\t\n\t\twords = string.downcase.gsub(/(\\W)/, " ").split\n\t\t# make the hash default to 0.\n\t\thash = Hash.new(0)\n\n\t\twords.each do |word|\n\t\t\thash[word] += 1\n\t\tend\n\n\t\treturn hash\n\tend\nend	\N	\N	0	3	2014-07-19 23:19:32	2014-07-19 23:19:32	137	bob.rb
245	40	0b1fb7a9ff726085b4eacfad	superseded	ruby	bob	class Bob\n\tdef hey(string)\n\t\tif string.strip.empty?\n\t\t\treturn 'Fine. Be that way!'\n\t\telsif string == string.upcase\n\t\t\treturn 'Woah, chill out!'\n\t\telsif string.end_with?('?')\n\t\t\treturn 'Sure.'\n\t\telse\n\t\t\treturn 'Whatever.'\n\t\tend\n\tend\nend	\N	\N	0	1	2014-07-20 14:11:27	2014-07-20 14:11:27	137	bob.rb
246	40	4a1957b08001ed7da4e12b22	pending	ruby	bob	class Bob\n\tdef hey(string)\n\t\t# Check if nothing is said to bob\n\t\tif string.strip.empty?\n\t\t\treturn 'Fine. Be that way!'\n\t\t# check if bob is being yelled at\n\t\telsif string == string.upcase\n\t\t\treturn 'Woah, chill out!'\n\t\t# check if bob is being asked a question\n\t\telsif string.end_with?('?')\n\t\t\treturn 'Sure.'\n\t\telse\n\t\t\treturn 'Whatever.'\n\t\tend\n\tend\nend	\N	\N	0	4	2014-09-10 04:16:44	2014-09-10 04:16:44	137	bob.rb
247	40	f4c47ec3f8caa4165971a34f	done	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n\tiex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n\t4\n\t"""\n\t@spec hamming_distance([char], [char]) :: non_neg_integer\n\tdef hamming_distance(strand1, strand2) do\n    Enum.zip(strand1, strand2)\n    |> Enum.filter( fn {a,b} -> a != b end)\n    |> Enum.count\n\tend\nend	2014-03-24 17:27:01	\N	0	1	2014-03-24 15:18:53	2014-03-24 15:18:53	138	point-mutations.exs
248	40	dee1ce1496820af5f502d11e	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) int {\n    length := Min(len(strandA), len(strandB))\n    distance := 0\n    for i := 0; i < length; i++ {\n        if strandA[i] != strandB[i] {\n            distance++\n        }\n    }\n    return distance\n}\n\nfunc Min(a int, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}	\N	\N	0	1	2014-03-29 19:23:42	2014-03-29 19:23:42	139	hamming.go
249	40	428744c1e92dc60d8c248628	done	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) (distance int) {\n\tlength := min(len(strandA), len(strandB))\n\tfor i := 0; i < length; i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdistance++\n\t\t}\n\t}\n\treturn distance\n}\n\nfunc min(a int, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}	2014-10-04 21:31:19	\N	0	2	2014-09-25 19:37:58	2014-09-25 19:37:58	139	hamming.go
250	44	057eba12d2dfb3f9ee2c5f7e	done	javascript	beer-song	module.exports = {\n  verse: function(verseNumber) {\n    return upcaseFirstLetter(printLineOne(verseNumber)) +''+ printLineTwo(verseNumber - 1)\n  },\n\n  sing: function(startVerse, endVerse) {\n    endVerse = endVerse || 0\n    result = ''\n    for(i = startVerse; i >= endVerse; i--) {\n      result += this.verse(i)\n      if(i !== endVerse) {\n        result += "\\n"\n      }\n    }\n    return result\n  }\n}\n\nvar upcaseFirstLetter = function(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nvar printLineOne = function(number) {\n   return printNumberAndBottles(number) + ' of beer on the wall, ' + printNumberAndBottles(number) + ' of beer.\\n'\n}\n\nvar printLineTwo = function(number) {\n  switch(number) {\n    case -1:\n      return 'Go to the store and buy some more, ' + printNumberAndBottles(99) + ' of beer on the wall.\\n'\n      break\n    case 0:\n      return 'Take it down and pass it around, ' + printNumberAndBottles(0) + ' of beer on the wall.\\n'\n      break\n    default:\n      return 'Take one down and pass it around, ' + printNumberAndBottles(number) + ' of beer on the wall.\\n'\n  }\n}\n\nvar printNumberAndBottles = function(number) {\n  switch(number) {\n    case 0:\n      return 'no more bottles'\n      break\n    case 1:\n      return number + ' bottle'\n      break\n    default:\n      return number + ' bottles'\n      break\n  }\n}	2014-08-17 15:20:45	\N	0	1	2014-08-11 17:48:55	2014-08-11 17:48:55	140	beer-song.js
251	46	a4aa729a55b3d6347b88812a	done	clojure	bob	(ns bob\n  (:use [clojure.string :only [upper-case blank?]]))\n\n(defn yell?\n  [str]\n  (and (= str (upper-case str))\n       (not (empty? (re-seq #"[A-Z]+" str)))))\n\n(defn question?\n  [str]\n  (= (last str) \\?))\n\n(defn nonsense?\n  [str]\n  (blank? str))\n\n(defn response-for\n  [s]\n  (cond\n   (yell? s)     "Woah, chill out!"\n   (question? s) "Sure."\n   (nonsense? s) "Fine. Be that way!"\n   :else         "Whatever."))	2014-09-17 14:44:57	\N	0	3	2014-09-08 18:50:20	2014-09-08 18:50:20	141	bob.clj
252	46	93ea6e155d302b3377d28ce1	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn yell?\n  [str]\n  (and (= str (string/upper-case str))\n       (not (empty? (re-seq #"[A-Z]+" str)))))\n\n(defn question?\n  [str]\n  (= (last str) \\?))\n\n(defn nothing?\n  [str]\n  (string/blank? str))\n\n(defn bob/response-for\n  [s]\n  (cond\n   (yell? s)     "Woah, chill out!"\n   (question? s) "Sure."\n   (nothing? s)  "Fine. Be that way!"\n   :else         "Whatever."))	\N	\N	0	2	2014-10-02 06:09:43	2014-10-02 06:09:43	141	bob.clj
253	46	d280b3749f54c2ae2d6784a8	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as string]))\n\n(defn yell?\n  [str]\n  (when-let [words (re-seq #"[a-zA-Z]+" str)]\n    (when (seq words)\n      (every? #(= % (string/upper-case %)) words))))\n\n(defn question?\n  [str]\n  (= (last str) \\?))\n\n(defn nothing?\n  [str]\n  (string/blank? (string/trim str)))\n\n(defn bob/response-for\n  [s]\n  (cond\n   (yell? s)     "Woah, chill out!"\n   (question? s) "Sure."\n   (nothing? s)  "Fine. Be that way!"\n   :else         "Whatever."))	\N	\N	0	1	2014-10-20 22:31:39	2014-10-20 22:31:39	141	bob.clj
280	49	930a1debbb7806286139fae1	pending	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = "ATCG"\n\n  def initialize(string)\n    raise ArgumentError if bad_genes(string) && !string.empty?\n    @string = string\n  end\n\n  def count(nucleotide)\n    raise ArgumentError if bad_genes(nucleotide)\n    @string.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    Hash[*NUCLEOTIDES.chars.map {|k| [k,count(k)]}.flatten]\n  end\n\n  private\n\n  def bad_genes(strand)\n    strand =~ Regexp.new("[^#{NUCLEOTIDES}]")\n  end\n\nend	\N	\N	0	2	2014-08-25 12:08:10	2014-08-25 12:08:10	158	dna.rb
281	49	ae42754912319368ae9e75f2	superseded	haskell	rna-transcription	module DNA ( toRNA) where\n\ntoRNA :: String -> String\ntoRNA = fmap go\n where\n   go 'G' = 'C'\n   go 'C' = 'G'\n   go 'T' = 'A'\n   go 'A' = 'U'	\N	\N	0	1	2014-08-02 02:42:32	2014-08-02 02:42:32	159	Dna.hs
282	49	4c69666500499e0bbedf49db	superseded	haskell	rna-transcription	module DNA ( toRNA) where\n\ntoRNA :: String -> String\ntoRNA = fmap go\n where\n   go 'G' = 'C'\n   go 'C' = 'G'\n   go 'T' = 'A'\n   go 'A' = 'U'\n   go a = error ("only GCTA chars are valid.  got " ++ show a)	\N	\N	0	2	2014-08-26 01:15:27	2014-08-26 01:15:27	159	Dna.hs
283	49	f2bc8ab0aba4b114b3870dce	pending	haskell	rna-transcription	{-# LANGUAGE LambdaCase #-}\nmodule DNA ( toRNA) where\n\ntoRNA :: String -> String\ntoRNA = fmap $ \\case\n   'G' -> 'C'\n   'C' -> 'G'\n   'T' -> 'A'\n   'A' -> 'U'\n   a -> error ("only GCTA chars are valid.  got " ++ show a)	\N	\N	0	3	2014-09-07 15:08:52	2014-09-07 15:08:52	159	Dna.hs
254	46	2f9a1a9c3bcf5efcee1977f6	done	ruby	wordy	require 'strscan'\n\nclass StrictStringScanner < StringScanner\n\n  def scan!(pattern)\n    token = scan(pattern)\n    raise ArgumentError unless token\n    token\n  end\n\nend\n\nclass WordProblem\n\n  class CalculationState\n\n    attr_reader :state, :answer, :operation\n\n    def initialize(state, answer, operation)\n      @state, @answer, @operation = state, answer, operation\n    end\n\n  end\n\n  class StateTransition\n\n    attr_reader :expected_token\n\n    def initialize(expected_token)\n      @expected_token = expected_token\n    end\n\n    def update(calculation, token)\n      raise NotImplemented\n    end\n\n  end\n\n  class OnFirstNumber < StateTransition\n\n    def initialize\n      super(:number)\n    end\n\n    def update(calculation, token)\n      CalculationState.new(:operation, token.to_i, nil)\n    end\n\n  end\n\n  class OnNumber < StateTransition\n\n    def initialize\n      super(:number)\n    end\n\n    def update(calculation, token)\n      CalculationState.new(:operation, calculation.operation.(calculation.answer, token.to_i), nil)\n    end\n\n  end\n\n  class OnOperation < StateTransition\n\n    def initialize\n      super(:operation)\n    end\n\n    def update(calculation, token)\n      if token =~ /raised to the (\\d+)/\n        raise_to_nth_power(calculation, $1.to_i)\n      else\n        arithmetic_operation(calculation, token)\n      end\n    end\n\n    private\n\n    def raise_to_nth_power(calculation, n)\n      CalculationState.new(:operation, calculation.answer ** n, nil)\n    end\n\n    def arithmetic_operation(calculation, token)\n      CalculationState.new(:number, calculation.answer, operation_for(token))\n    end\n\n    def operation_for(token)\n      case token\n        when "plus"          then -> (answer, x) { answer + x }\n        when "minus"         then -> (answer, x) { answer - x }\n        when "multiplied by" then -> (answer, x) { answer * x }\n        when "divided by"    then -> (answer, x) { answer / x }\n      end\n    end\n\n  end\n\n  TOKENS = {\n    :spaces       => /\\s+/,\n    :first_number => /-?\\d+/,\n    :number       => /-?\\d+/,\n    :operation    => /plus|minus|multiplied by|divided by|raised to the \\d+(st|nd|th) power/,\n  }\n\n  STATE_TRANSITIONS = {\n    :first_number => OnFirstNumber.new,\n    :operation    => OnOperation.new,\n    :number       => OnNumber.new,\n  }\n\n  def initialize(question)\n    @question = question\n  end\n\n  def answer\n    calculation = CalculationState.new(:first_number, nil, nil)\n    scan_question do |scanner|\n      state_transition_for calculation do |transition|\n        token = scanner.scan!(TOKENS[transition.expected_token])\n        calculation = transition.update(calculation, token)\n      end\n    end\n    calculation.answer\n  end\n\n  private\n\n  def state_transition_for(calculation)\n    yield STATE_TRANSITIONS[calculation.state]\n  end\n\n  def scan_question\n    scanner = StrictStringScanner.new(sanitize(@question))\n    while not scanner.eos?\n      scanner.skip(TOKENS[:spaces])\n      yield scanner\n    end\n  end\n\n  def sanitize(question)\n    question.\n      gsub(/^What is/, "").\n      gsub(/\\?$/, "")\n  end\n\nend	2014-09-13 12:58:15	\N	0	1	2014-09-11 01:46:51	2014-09-11 01:46:51	142	word_problem.rb
255	46	3060e9410ef6421e11604a44	superseded	ruby	word-count	class Phrase\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def words\n    @words ||= phrase.downcase.gsub(/[^0-9a-zA-Z']/, " ").split(" ")\n  end\n\n  def word_count\n    @word_count ||= Hash[words.map do |word|\n      [word, words.count(word)]\n    end]\n  end\nend	\N	\N	0	1	2014-09-25 17:16:06	2014-09-25 17:16:06	143	word-count.rb
256	46	eac8e41c75f8485526432bb8	done	ruby	word-count	class Phrase\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def words\n    @words ||= phrase.downcase.gsub(/[^\\w']/, " ").split(" ")\n  end\n\n  def word_count\n    @word_count ||= Hash[words.map do |word|\n      [word, words.count(word)]\n    end]\n  end\nend	2014-10-26 03:34:02	\N	0	2	2014-10-17 06:14:39	2014-10-17 06:14:39	143	word-count.rb
257	46	3c89e0b57fcedd421a105b39	superseded	ruby	grains	class Grains\n  def initialize\n\n  end\n  def square(number)\n    2**(number-1)\n  end\n  def total\n    total = 0\n    1.upto(65).each do |number|\n    @new_total = (total + 2**(number-1))\n    end\n    @new_total - 1\n  end\nend	\N	\N	0	2	2014-08-29 13:22:26	2014-08-29 13:22:26	144	grains.rb
258	46	45e036f6eacf764fbc69c0f2	superseded	ruby	grains	class Grains\n  def initialize\n\n  end\n  def square(number)\n    2**(number-1)\n  end\n  def total\n    (\n  end\nend	\N	\N	0	1	2014-09-01 04:18:06	2014-09-01 04:18:06	144	grains.rb
259	46	a2ff298dd7eee087d6a4abb4	done	ruby	grains	class Grains\n  def initialize\n\n  end\n  def square(number)\n    2**(number-1)\n  end\n  def total\n    1.upto(65).each do |number|\n    @total = (0 + 2**(number-1))\n    end\n    @total - 1\n  end\nend	2014-09-09 23:55:17	\N	0	3	2014-09-04 03:35:47	2014-09-04 03:35:47	144	grains.rb
260	46	b248b9c45c31350923837c42	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  defp count_iter([], acc), do: acc\n  defp count_iter([_ | t], acc), do: count_iter(t, acc+1)\n\n  @spec count(list) :: non_neg_integer\n  def count(list), do: count_iter(list, 0)\n\n  \n  defp reverse_iter([], acc), do: acc\n  defp reverse_iter([h | t], acc), do: reverse_iter(t, [h | acc])\n\n  @spec reverse(list) :: list\n  def reverse(list), do: reverse_iter(list, [])\n\n  \n  defp map_iter([], _, acc), do: reverse(acc)\n  defp map_iter([h|t], f, acc), do: map_iter(t, f, [f.(h) | acc])\n\n  @spec map(list, (any -> any)) :: list\n  def map(list, f), do: map_iter(list, f, [])\n\n\n  defp filter_iter([], _, acc), do: reverse(acc)\n  defp filter_iter([h|t], f, acc) do\n    if f.(h) == true do\n      filter_iter(t, f, [h | acc])\n    else\n      filter_iter(t, f, acc)\n    end\n  end\n  \n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(list, f), do: filter_iter(list, f, [])\n\n  \n  defp reduce_iter([], acc, _), do: acc\n  defp reduce_iter([h | t], acc, f), do: reduce_iter(t, f.(h, acc), f)\n\n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce(list, acc, f), do: reduce_iter(list, acc, f)\n\n  \n  defp append_iter([], acc), do: acc\n  defp append_iter([h | t], acc), do: append_iter(t, [h | acc])\n\n  @spec append(list, list) :: list\n  def append(a, b), do: append_iter(reverse(a), b)\n\n\n  defp concat_iter([], acc), do: acc\n  defp concat_iter([h | t], acc), do: concat_iter(t, append(h, acc))\n  \n  @spec concat([[any]]) :: [any]\n  def concat(lists), do: concat_iter(reverse(lists), [])\nend	\N	\N	0	1	2014-09-02 17:14:04	2014-09-02 17:14:04	145	list_ops.exs
284	49	a3f3b53ca0b3db97a52e5639	pending	ruby	anagram	class Anagram\n  def initialize(anagram)\n    @anagram = anagram.downcase.chars\n  end\n\n  def match(words)\n    words.each_with_object([]) do |word, obj|\n      chars = word.downcase.chars\n      obj << word if (chars.sort == @anagram.sort) && (chars != @anagram)\n    end\n  end\nend	\N	\N	0	1	2014-07-15 19:36:33	2014-07-15 19:36:33	160	anagram.rb
285	49	df8671e43dd46986c43795ab	superseded	python	word-count	"""\nA module for counting the number of occurences of words\nin a phrase.\n"""\nimport re\nfrom collections import Counter\n\nclass Phrase(object):\n    """\n    A phrase object for standardizing phrases and counting word\n    occurences\n    """\n    ignore_chars = re.compile(r'[!@$%^&:,\\.]')\n\n\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n\n    @property\n    def normalized_phrase(self):\n        phrase = self.phrase.lower()\n        return re.sub(self.ignore_chars, '', phrase)\n\n\n    def get_words(self):\n        return self.normalized_phrase.split()\n\n\n    def word_count(self):\n        return dict(Counter(self.get_words()))	\N	\N	0	1	2014-08-02 18:25:53	2014-08-02 18:25:53	161	word-count.py
286	49	bac0145cf0836ee992c888b8	superseded	python	word-count	"""\nA module for counting the number of occurences of words\nin a phrase.\n"""\nimport re\nfrom collections import Counter\n\nclass Phrase(object):\n    """\n    A phrase object for standardizing phrases and counting word\n    occurences.\n    """\n    ignore_chars = re.compile(r'[!@$%^&:,\\.]')\n\n\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n\n    @property\n    def normalized_phrase(self):\n        phrase = self.phrase.lower()\n        return re.sub(self.ignore_chars, '', phrase)\n\n\n    def _get_words(self):\n        return self.normalized_phrase.split()\n\n\n    def word_count(self):\n        return dict(Counter(self.get_words()))	\N	\N	0	2	2014-08-11 03:17:46	2014-08-11 03:17:46	161	word-count.py
287	49	f8e2c582466099249701588e	superseded	python	word-count	"""\nA module for counting the number of occurences of words\nin a phrase.\n"""\nimport re\nfrom collections import Counter\n\n\nclass Phrase(object):\n    """\n    A phrase object for standardizing phrases and counting word\n    occurences.\n    """\n    ignore_chars = re.compile(r'[^\\w\\s]', re.I)\n\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    @property\n    def normalized_phrase(self):\n        phrase = self.phrase.lower()\n        return re.sub(self.ignore_chars, '', phrase)\n\n    def _get_words(self):\n        return self.normalized_phrase.split()\n\n    def word_count(self):\n        return dict(Counter(self._get_words()))	\N	\N	0	3	2014-08-30 09:55:15	2014-08-30 09:55:15	161	word-count.py
581	45	7c6994a928e18795f29b06f8	pending	haskell	binary	module Binary (toDecimal) where\n\nimport Data.List (foldl')\n\ntoDecimal :: String -> Int\ntoDecimal = foldl' (\\n b -> n * 2 + fromEnum (b == '1')) 0 	\N	\N	0	3	2014-10-20 17:34:28	2014-10-20 17:34:28	335	binary.hs
261	46	952a5648cee9190889d1980d	pending	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  defp count_iter([], acc), do: acc\n  defp count_iter([_ | t], acc), do: count_iter(t, acc+1)\n\n  @spec count(list) :: non_neg_integer\n  def count(list), do: count_iter(list, 0)\n\n  \n  defp reverse_iter([], acc), do: acc\n  defp reverse_iter([h | t], acc), do: reverse_iter(t, [h | acc])\n\n  @spec reverse(list) :: list\n  def reverse(list), do: reverse_iter(list, [])\n\n  \n  defp map_iter([], _, acc), do: reverse(acc)\n  defp map_iter([h|t], f, acc), do: map_iter(t, f, [f.(h) | acc])\n\n  @spec map(list, (any -> any)) :: list\n  def map(list, f), do: map_iter(list, f, [])\n\n\n  defp filter_iter([], _, acc), do: reverse(acc)\n  defp filter_iter([h|t], f, acc) do\n    if f.(h) == true do\n      filter_iter(t, f, [h | acc])\n    else\n      filter_iter(t, f, acc)\n    end\n  end\n  \n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(list, f), do: filter_iter(list, f, [])\n\n  \n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce([], acc, _), do: acc\n  def reduce([h | t], acc, f), do: reduce(t, f.(h, acc), f)\n\n  \n  defp append_iter([], acc), do: acc\n  defp append_iter([h | t], acc), do: append_iter(t, [h | acc])\n\n  @spec append(list, list) :: list\n  def append(a, b), do: append_iter(reverse(a), b)\n\n\n  defp concat_iter([], acc), do: acc\n  defp concat_iter([h | t], acc), do: concat_iter(t, append(h, acc))\n  \n  @spec concat([[any]]) :: [any]\n  def concat(lists), do: concat_iter(reverse(lists), [])\nend	\N	\N	0	2	2014-10-08 05:53:02	2014-10-08 05:53:02	145	list_ops.exs
262	48	3ae21c812936fcb7343a97fb	done	javascript	word-count	var words = function(string) {\n\n  var counts = {},\n      tokens = string.match(/\\b[a-z0-9]+\\b/gi);\n\n  tokens.forEach( function(token){\n    var word = token.toLowerCase();\n    word in counts ? counts[word] += 1 : counts[word] = 1;\n  });\n\n  return counts;\n};\n\nmodule.exports = words;	2014-11-28 06:37:15.114526	\N	0	1	2014-11-26 16:25:38	2014-11-26 16:25:38	146	word-count.js
263	48	2942d058a379dfca7470f625	done	clojure	meetup	(ns meetup)\n\n\n(def third #(nth % 2))\n(def fourth #(nth % 3))\n\n\n(defn- leap-year?\n  [year]\n\n  (cond\n   (zero? (mod year 400)) true\n   (zero? (mod year 100)) false\n   (zero? (mod year 4))   true\n   :else                  false))\n\n\n(defn- get-month-dates\n  [year month]\n\n  (if (and (= month 2) (leap-year? year))\n    29\n    (get {1 31, 2 28, 3 31, 4 30,  5 31\n          6 30, 7 31, 8 31, 9 30, 10 31\n          11 30, 12 31} month)))\n\n\n(defn- get-day-of-week\n  [year month day]\n\n  (let [table [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4]\n        y (if (< month 3) (dec year) year)]\n    (-> y\n        (+ (quot y 4))\n        (- (quot y 100))\n        (+ (quot y 400))\n        (+ (nth table (dec month)))\n        (+ day)\n        (mod 7))))\n\n\n(defn- get-month-days\n  [year month]\n\n  (let [total (get-month-dates year month)]\n    (->> (cycle (range 7))\n         (drop (get-day-of-week year month 1))\n         (take total)\n         (map (fn [date] (nth [:sun :mon :tues :wednes :thurs :fri :satur] date)))\n         (map vector (range 1 (inc total))))))\n\n\n(defn dayteenth\n  [year month dd]\n  [year month (->> (get-month-days year month)\n                   (some (fn [[date day]]\n                           (when (and (>= date 13) (= day dd)) date))))])\n\n(defn nth-day\n  [year month nth-fn day]\n  [year month (->> (get-month-days year month)\n                   (filter (fn [[_ d]] (= d day)))\n                   (nth-fn)\n                   (first))])\n\n\n;; teenth\n(defn monteenth    [month year] (dayteenth year month :mon))\n(defn tuesteenth   [month year] (dayteenth year month :tues))\n(defn wednesteenth [month year] (dayteenth year month :wednes))\n(defn thursteenth  [month year] (dayteenth year month :thurs))\n(defn friteenth    [month year] (dayteenth year month :fri))\n(defn saturteenth  [month year] (dayteenth year month :satur))\n(defn sunteenth    [month year] (dayteenth year month :sun))\n\n;; first\n(defn first-monday    [month year] (nth-day year month first :mon))\n(defn first-tuesday   [month year] (nth-day year month first :tues))\n(defn first-wednesday [month year] (nth-day year month first :wednes))\n(defn first-thursday  [month year] (nth-day year month first :thurs))\n(defn first-friday    [month year] (nth-day year month first :fri))\n(defn first-saturday  [month year] (nth-day year month first :satur))\n(defn first-sunday    [month year] (nth-day year month first :sun))\n\n;; second\n(defn second-monday    [month year] (nth-day year month second :mon))\n(defn second-tuesday   [month year] (nth-day year month second :tues))\n(defn second-wednesday [month year] (nth-day year month second :wednes))\n(defn second-thursday  [month year] (nth-day year month second :thurs))\n(defn second-friday    [month year] (nth-day year month second :fri))\n(defn second-saturday  [month year] (nth-day year month second :satur))\n(defn second-sunday    [month year] (nth-day year month second :sun))\n\n;; third\n(defn third-monday    [month year] (nth-day year month third :mon))\n(defn third-tuesday   [month year] (nth-day year month third :tues))\n(defn third-wednesday [month year] (nth-day year month third :wednes))\n(defn third-thursday  [month year] (nth-day year month third :thurs))\n(defn third-friday    [month year] (nth-day year month third :fri))\n(defn third-saturday  [month year] (nth-day year month third :satur))\n(defn third-sunday    [month year] (nth-day year month third :sun))\n\n;; fourth\n(defn fourth-monday    [month year] (nth-day year month fourth :mon))\n(defn fourth-tuesday   [month year] (nth-day year month fourth :tues))\n(defn fourth-wednesday [month year] (nth-day year month fourth :wednes))\n(defn fourth-thursday  [month year] (nth-day year month fourth :thurs))\n(defn fourth-friday    [month year] (nth-day year month fourth :fri))\n(defn fourth-saturday  [month year] (nth-day year month fourth :satur))\n(defn fourth-sunday    [month year] (nth-day year month fourth :sun))\n\n;; last\n(defn last-monday    [month year] (nth-day year month last :mon))\n(defn last-tuesday   [month year] (nth-day year month last :tues))\n(defn last-wednesday [month year] (nth-day year month last :wednes))\n(defn last-thursday  [month year] (nth-day year month last :thurs))\n(defn last-friday    [month year] (nth-day year month last :fri))\n(defn last-saturday  [month year] (nth-day year month last :satur))\n(defn last-sunday    [month year] (nth-day year month last :sun))	2014-11-28 06:37:15.147563	\N	0	1	2014-11-22 18:45:28	2014-11-22 18:45:28	147	meetup.clj
264	48	073a62a604a323ae3929378c	pending	ruby	rna-transcription	class Complement\r\n\tdef self.of_dna(dna)\r\n\t\tdna_array = dna.split('')\r\n\t\ta = dna_array.map { |base| \r\n\t\t\tif base.downcase == 'a'\r\n\t\t\t\tbase = 'U'\r\n\t\t\telsif base.downcase == 't'\r\n\t\t\t\tbase = 'A'\r\n\t\t\telsif base.downcase == 'c'\r\n\t\t\t\tbase = 'G'\r\n\t\t\telse\r\n\t\t\t\tbase = 'C'\r\n\t\t\tend\r\n\t\t\t\t }\r\n\t\t\ta.join('')\r\n\tend\r\n\r\n\tdef self.of_rna(rna)\r\n\t\tdna_array = rna.split('')\r\n\t\ta = dna_array.map { |base| \r\n\t\t\tif base.downcase == 'a'\r\n\t\t\t\tbase = 'T'\r\n\t\t\telsif base.downcase == 'u'\r\n\t\t\t\tbase = 'A'\r\n\t\t\telsif base.downcase == 'c'\r\n\t\t\t\tbase = 'G'\r\n\t\t\telse\r\n\t\t\t\tbase = 'C'\r\n\t\t\tend\r\n\t\t\t\t }\r\n\t\t\ta.join('')\r\n\tend\r\nend	\N	\N	0	1	2014-11-22 21:17:29	2014-11-22 21:17:29	148	complement.rb
265	48	7c0d13277c859375396993c3	superseded	python	matrix	class Matrix:\n  """\n  A matrix\n  """\n  def __init__(self,content):\n    """\n    Constructor\n    """\n    self.rows=map(lambda x:map(int,x.split()),content.split("\\n"))\n    self.columns=map(list,zip(*self.rows))\n\ndef main():\n  """\n  Test function, outputs the rows and columns of the matrix\n  |1 2 3|\n  |4 5 6|\n  """\n  test_matrix=Matrix("1 2 3\\n4 5 6")\n  print "rows=",test_matrix.rows\n  print "columns=",test_matrix.columns\n\n\nif __name__=="__main__":\n  main()	\N	\N	0	1	2014-11-24 03:56:42	2014-11-24 03:56:42	149	matrix.py
266	48	c9c359f4e90732c9d5f34aca	done	python	matrix	class Matrix:\n    \n    def __init__(self,content):\n        self.rows=[ [int(x) for x in row.split() ] for row in content.split("\\n") ]\n        self.columns=[list(x) for x in zip(*self.rows) ]\n\ndef main():\n    """\n    Test function, outputs the rows and columns of the matrix\n    |1 2 3|\n    |4 5 6|\n    """\n    \n    test_matrix=Matrix("1 2 3\\n4 5 6")\n    print "rows=",test_matrix.rows\n    print "columns=",test_matrix.columns\n\n\nif __name__=="__main__":\n  main()	2014-11-28 06:37:15.25978	\N	0	2	2014-11-26 23:03:34	2014-11-26 23:03:34	149	matrix.py
267	48	9ece4c12fb76d521feb768ee	superseded	haskell	kindergarten-garden	module Garden ( garden\n              , defaultGarden\n              , lookupPlants\n              , Plant(..)\n              )\nwhere\nimport Data.Tuple (swap)\nimport Data.List (splitAt, elemIndex, sort)\nimport Data.Array.IO (IOArray)\nimport qualified Data.Array.IO as Array\n\ndata Plant = Radishes\n           | Clover\n           | Grass\n           | Violets\n           | NoPlant\n           deriving (Eq, Show, Read)\n\n-- | Read a single plant\ngetPlant :: String -> [(Plant, String)]\ngetPlant ('G':cs) = [(Grass   , cs)]\ngetPlant ('R':cs) = [(Radishes, cs)]\ngetPlant ('C':cs) = [(Clover  , cs)]\ngetPlant ('V':cs) = [(Violets , cs)]\ngetPlant ('.':cs) = [(NoPlant , cs)]\ngetPlant _        = []\n\n-- | Get the list of plants and the rest of the string\ngetPlants :: String -> ([Plant], String)\ngetPlants str =\n  case getPlant str of\n    [(p, cs)] -> (p:ps, ccs)\n      where\n        (ps, ccs) = getPlants cs\n    []        -> ([], str)\n\nsplitBy :: Int -> [a] -> [[a]]\nsplitBy n l =\n  case splitAt n l of\n    (hds, [])  -> [hds]\n    (hds, tls) -> hds : splitBy n tls\n\ndefault_names :: [String]\ndefault_names = [ "Alice", "Bob", "Charlie", "David"\n                , "Eve", "Fred", "Ginny", "Harriet"\n                , "Ileana", "Joseph", "Kincaid", "Larry"\n                ]\n\n-- | A garden contains a list of names, of front and back plants\ndata Garden = Garden { names :: [String], \n                       front :: [Plant], \n                       back :: [Plant] }\n            deriving (Show, Read, Eq)\n\n-- | Create a plant row of the correct size, adding empty pots for other students\nplantRow :: Int -> String -> [Plant]\nplantRow nb_students str = fsts ++ replicate (2*nb_students - length fsts) NoPlant\n  where\n    (fsts, []) = getPlants str\n\n-- | Define a garden with default student list\ndefaultGarden :: String -> Garden\ndefaultGarden = garden default_names\n\n-- | Create a new garden with a list of students and a description string\ngarden :: [String] -> String -> Garden\ngarden nms str =\n  Garden { names = sort nms\n         , front = plantRow nb_names frnt\n         , back  = plantRow nb_names bck }\n  where\n    (frnt : bck : []) = lines str\n    nb_names = length nms\n\n-- | Helper to get the front and back plants separately\nextractPlants :: Int -> [Plant] -> [Plant]\nextractPlants n = take 2 . drop (2*n)\n\n-- | Get the plants of a student\nlookupPlants :: String -> Garden -> [Plant]\nlookupPlants name garden =\n  case elemIndex name (names garden) of\n    Just idx -> (extractPlants idx $ front garden) ++ (extractPlants idx $ back garden)\n    Nothing  -> error ("'" ++ name ++ "' -- no such name in student list")	\N	\N	0	1	2014-11-25 16:15:30	2014-11-25 16:15:30	150	Garden.hs
582	45	cde58cff3e8c244859d20978	superseded	haskell	binary	module Binary (toDecimal) where\n\nimport Data.List (foldl')\n\ntoDecimal :: String -> Integer\ntoDecimal = foldl' (\\n b -> n * 2 + fromEnum (b == '1')) 0 	\N	\N	0	2	2014-11-01 11:51:38	2014-11-01 11:51:38	335	binary.hs
583	45	2af99a0d1f3ef42f369c1e0d	superseded	haskell	binary	module Binary (toDecimal) where\n\nimport Data.List (foldl')\n\ntoDecimal = foldl' (\\n b -> n * 2 + fromEnum (b == '1')) 0 	\N	\N	0	1	2014-11-02 00:04:33	2014-11-02 00:04:33	335	binary.hs
268	48	a50a21e4169d1c7ee46fa98c	superseded	haskell	kindergarten-garden	module Garden ( garden\n              , defaultGarden\n              , lookupPlants\n              , Plant(..)\n              )\nwhere\n\nimport Data.List (elemIndex, sort)\n\ndata Plant = Radishes\n           | Clover\n           | Grass\n           | Violets\n           | NoPlant\n           deriving (Eq, Show, Read)\n\n-- | Read a single plant\ngetPlant :: String -> [(Plant, String)]\ngetPlant ('G':cs) = [(Grass   , cs)]\ngetPlant ('R':cs) = [(Radishes, cs)]\ngetPlant ('C':cs) = [(Clover  , cs)]\ngetPlant ('V':cs) = [(Violets , cs)]\ngetPlant ('.':cs) = [(NoPlant , cs)]\ngetPlant _        = []\n\n-- | Get the list of plants and the rest of the string\ngetPlants :: String -> ([Plant], String)\ngetPlants str =\n  case getPlant str of\n    [(p, cs)] -> (p:ps, ccs)\n      where\n        (ps, ccs) = getPlants cs\n    []        -> ([], str)\n\ndefault_names :: [String]\ndefault_names = [ "Alice", "Bob", "Charlie", "David"\n                , "Eve", "Fred", "Ginny", "Harriet"\n                , "Ileana", "Joseph", "Kincaid", "Larry"\n                ]\n\n-- | A garden contains a list of names, of front and back plants\ndata Garden = Garden { names :: [String], \n                       front :: [Plant], \n                       back :: [Plant] }\n            deriving (Show, Read, Eq)\n\n-- | Create a plant row of the correct size, adding empty pots for other students\nplantRow :: Int -> String -> [Plant]\nplantRow nb_students str = fsts ++ replicate (2*nb_students - length fsts) NoPlant\n  where\n    (fsts, []) = getPlants str\n\n-- | Define a garden with default student list\ndefaultGarden :: String -> Garden\ndefaultGarden = garden default_names\n\n-- | Create a new garden with a list of students and a description string\ngarden :: [String] -> String -> Garden\ngarden nms str =\n  Garden { names = sort nms\n         , front = plantRow nb_names frnt\n         , back  = plantRow nb_names bck }\n  where\n    (frnt : bck : []) = lines str\n    nb_names = length nms\n\n-- | Helper to get the front and back plants separately\nextractPlants :: Int -> [Plant] -> [Plant]\nextractPlants n = take 2 . drop (2*n)\n\n-- | Get the plants of a student\nlookupPlants :: String -> Garden -> [Plant]\nlookupPlants name gdn =\n  case elemIndex name (names gdn) of\n    Just idx -> (extractPlants idx $ front gdn) ++ (extractPlants idx $ back gdn)\n    Nothing  -> error ("'" ++ name ++ "' -- no such name in student list")	\N	\N	0	2	2014-11-25 21:33:50	2014-11-25 21:33:50	150	Garden.hs
269	48	17f5623a8aec4986aa6d7fc5	pending	haskell	kindergarten-garden	module Garden ( garden\n              , defaultGarden\n              , lookupPlants\n              , Plant(..)\n              )\nwhere\n\nimport Data.List (sort, elemIndex)\nimport Data.Maybe (mapMaybe)\n\ndata Plant = Radishes\n           | Clover\n           | Grass\n           | Violets\n           | NoPlant\n           deriving (Eq, Show, Read)\n\n-- | Read a single plant\ngetPlant :: Char -> Maybe Plant\ngetPlant 'G' = Just Grass\ngetPlant 'R' = Just Radishes\ngetPlant 'C' = Just Clover\ngetPlant 'V' = Just Violets\ngetPlant '.' = Just NoPlant\ngetPlant  _  = Nothing\n\n-- | Get the list of plants and the rest of the string\ngetPlants :: String -> [Plant]\ngetPlants = mapMaybe getPlant\n\ndefault_names :: [String]\ndefault_names = [ "Alice", "Bob", "Charlie", "David"\n                , "Eve", "Fred", "Ginny", "Harriet"\n                , "Ileana", "Joseph", "Kincaid", "Larry"\n                ]\n\n-- | A garden contains a list of names, of front and back plants\ndata Garden = Garden { names :: [String], \n                       front :: [Plant], \n                       back :: [Plant] }\n            deriving (Show, Read, Eq)\n\n-- | Create a plant row of the correct size, adding empty pots for other students\nplantRow :: Int -> String -> [Plant]\nplantRow nb_students str = fsts ++ replicate (2*nb_students - length fsts) NoPlant\n  where\n    fsts = getPlants str\n\n-- | Define a garden with default student list\ndefaultGarden :: String -> Garden\ndefaultGarden = garden default_names\n\n-- | Create a new garden with a list of students and a description string\ngarden :: [String] -> String -> Garden\ngarden nms str =\n  Garden { names = sort nms\n         , front = plantRow nb_names frnt\n         , back  = plantRow nb_names bck }\n  where\n    [frnt, bck] = lines str\n    nb_names = length nms\n\n-- | Helper to get the front and back plants separately\nextractPlants :: Int -> [Plant] -> [Plant]\nextractPlants n = take 2 . drop (2*n)\n\n-- | Get the plants of a student\nlookupPlants :: String -> Garden -> [Plant]\nlookupPlants name mgarden =\n  case elemIndex name (names mgarden) of\n    Just idx -> (extractPlants idx $ front mgarden) ++ (extractPlants idx $ back mgarden)\n    Nothing  -> error (show name ++ " -- no such name in student list")	\N	\N	0	3	2014-11-26 22:46:06	2014-11-26 22:46:06	150	Garden.hs
270	48	f3eb56e123681e37a2bc7261	pending	ruby	bob	class Bob\n\n  def hey(phrase)\n    case phrase\n    when *empty?\n      'Fine. Be that way.'\n    when shouting?\n      'Woah, chill out!'\n    when question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n  def empty?\n    ['', nil]\n  end\n\n  def shouting?\n    /^[^a-z]*$/\n  end\n\n  def question?\n    /\\?$/\n  end\nend	\N	\N	0	1	2014-11-23 12:38:53	2014-11-23 12:38:53	151	bob.rb
271	48	0f5a3fdd9946f72ecf7132c5	pending	javascript	allergies	var Allergies = function (score) {\n\tthis.score = score;\n};\n\nAllergies.prototype.list = function() {\n\tvar result = [],\n\t\t\tsum = 0,\n\t\t\tscore = this.score,\n\t\t\tlookup = ["eggs", "peanuts", "shellfish", "strawberries", "tomatoes", "chocolate", "pollen", "cats"],\n\t\t\tTwoToExp = function (exp) { return Math.pow(2, exp); };\n\n\tif (score > 255) {\n\t\tscore = score % 256; // I hate you\n\t}\n\n\tfor (var i = 7; i >= 0; i--) {\n\t\tvar currentVal = TwoToExp(i);\n\n\t\tif (score - currentVal >= 0) {\n\t\t\tscore -= currentVal;\n\n\t\t\tresult.push(lookup[i]);\n\t\t}\n\t}\n\n\treturn result.reverse(); // damn test\n};\n\nAllergies.prototype.allergicTo = function(allergen) {\n\tvar killers = this.list();\n\n\tfor (var i = 0; i < killers.length; i++) {\n\t\tif (killers[i] === allergen) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false;\n};	\N	\N	0	1	2014-11-25 13:27:20	2014-11-25 13:27:20	152	allergies.js
272	49	6896bc6683a8696a1ff2420f	pending	ruby	rna-transcription	class Complement\n\n  DNA = 'GCTA'\n  RNA = 'CGAU'\n\n  def self.of_dna dna_strand\n    dna_strand.tr DNA, RNA\n  end\n\n  def self.of_rna rna_strand\n    rna_strand.tr RNA, DNA\n  end\n\nend	\N	\N	0	2	2014-07-10 13:46:39	2014-07-10 13:46:39	153	complement.rb
273	49	f42c1c4dd0168b760a0323fb	superseded	ruby	rna-transcription	class Complement\n\n  TO_RNA = { 'G' => 'C', 'C' => 'G', 'T' => 'A', 'A' => 'U' }\n  TO_DNA = { 'U' => 'A', 'A' => 'T', 'G' => 'C', 'C' => 'G' }\n\n  def self.of_dna dna_strand\n    convert_nucleotides_of dna_strand, TO_RNA\n  end\n\n  def self.of_rna rna_strand\n    convert_nucleotides_of rna_strand, TO_DNA\n  end\n\n  private\n\n  def self.convert_nucleotides_of strand, lexicon\n    pattern = Regexp.new lexicon.keys.join("|")\n    strand.gsub(pattern) {|match| lexicon[match] }\n  end\n\nend	\N	\N	0	1	2014-10-14 21:51:32	2014-10-14 21:51:32	153	complement.rb
274	49	ba405a18da4c84813a4d367d	pending	ruby	bob	require 'minitest/autorun'\n\nbegin\n\n  class TeenagerTest < MiniTest::Unit::TestCase\n    attr_reader :teenager\n\n    def setup\n      @teenager = Bob.new\n    end\n\n    def test_stating_something\n      assert_equal 'Whatever.', teenager.hey('Tom-ay-to, tom-aaaah-to.')\n    end\n\n    def test_shouting\n      skip\n      assert_equal 'Woah, chill out!', teenager.hey('WATCH OUT!')\n    end\n\n    def test_asking_a_question\n      skip\n      assert_equal 'Sure.', teenager.hey('Does this cryogenic chamber make me look fat?')\n    end\n\n    def test_talking_forcefully\n      skip\n      assert_equal 'Whatever.', teenager.hey("Let's go make out behind the gym!")\n    end\n\n    def test_using_acronyms_in_regular_speech\n      skip\n      assert_equal 'Whatever.', teenager.hey("It's OK if you don't want to go to the DMV.")\n    end\n\n    def test_forceful_questions\n      skip\n      assert_equal 'Woah, chill out!', teenager.hey('WHAT THE HELL WERE YOU THINKING?')\n    end\n\n    def test_shouting_numbers\n      skip\n      assert_equal 'Woah, chill out!', teenager.hey('1, 2, 3 GO!')\n    end\n\n    def test_shouting_with_special_characters\n      skip\n      assert_equal 'Woah, chill out!', teenager.hey('ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!')\n    end\n\n    def test_shouting_with_no_exclamation_mark\n      skip\n      assert_equal 'Woah, chill out!', teenager.hey('I HATE YOU')\n    end\n\n    def test_statement_containing_question_mark\n      skip\n      assert_equal 'Whatever.', teenager.hey('Ending with ? means a question.')\n    end\n\n    def test_prattling_on\n      skip\n      assert_equal 'Sure.', teenager.hey("Wait! Hang on. Are you going to be OK?")\n    end\n\n    def test_silence\n      skip\n      assert_equal 'Fine. Be that way!', teenager.hey('')\n    end\n\n    def test_more_silence\n      skip\n      assert_equal 'Fine. Be that way!', teenager.hey(nil)\n    end\n  end\n\nrescue LoadError => e\n\n  def explain(something)\n    7.times { puts }\n    puts "Hit enter to continue..."\n    gets\n    7.times { puts }\n    puts something\n    puts\n  end\n\n  zomg = <<-ERROR\n######## ########  ########   #######  ########  \n##       ##     ## ##     ## ##     ## ##     ## \n##       ##     ## ##     ## ##     ## ##     ## \n######   ########  ########  ##     ## ########  \n##       ##   ##   ##   ##   ##     ## ##   ##   \n##       ##    ##  ##    ##  ##     ## ##    ##  \n######## ##     ## ##     ##  #######  ##     ## \n\n  ERROR\n  puts\n  puts zomg\n\n  explain "I'm going to\\n* show you an error message,\\n* then explain what you're seeing\\n* then tell you how to fix it."\n  explain "Seriously, don't freak out. It's not that bad."\n  explain "OK, this is it:\\n\\n#{e.backtrace.first} #{e.message}"\n  explain "First it tells you the name of the file where the error is occurring.\\n\\n\\n\\tbob_test.rb"\n  explain "Then it tells you which line that error is on.\\n\\n\\n\\tbob_test.rb:5"\n\n  explain "After that, it tells you the name of the method where the error is occurring.\\n\\n\\n\\tin `require_relative'."\n  explain "Next, it tells you exactly what the error is.\\n\\n\\n\\tcannot load such file"\n  explain "Finally, it tells you which file is missing.\\n\\n\\n\\t/path/to/your/code/ruby/bob/bob"\n  explain "So the error is that on line 5. What's on line 5?\\n\\n\\n\\trequire_relative 'bob'"\n  explain "Essentially, when we try to require the file, it says it's not there. You can fix the problem by creating an empty file named bob.rb inside of the ruby/bob directory."\n  explain "Now take another look at the error message.\\nDoes it make more sense?\\n\\n\\n#{e.backtrace.first} #{e.message}"\n  10.times { puts }\n  exit!\nend	\N	\N	0	1	2014-09-28 20:00:43	2014-09-28 20:00:43	154	bob.rb
275	49	01dbbb8024842d3f0bf8c7e9	superseded	ruby	scrabble-score	#!/usr/bin/env ruby\n\nVALUES = {"AEIOULNRST" => 1, "DG" => 2, "BCMP" => 3,\n          "FHVWY" => 4, "K" => 5, "JX" => 8, "QZ" => 10}\n\nclass Scrabble\n    def initialize(word)\n        @word = word\n    end\n    \n    def score\n        Scrabble.score @word\n    end\n    \n    def self.score(word)\n        return 0 if word.nil?\n        counter = 0\n        word.upcase.chars.each do |letter|\n            VALUES.keys.each do |letters|\n                counter += VALUES[letters] if letters.chars.member? letter\n            end\n        end\n        counter\n    end\nend	\N	\N	0	1	2014-08-09 05:00:36	2014-08-09 05:00:36	155	scrabble.rb
276	49	bea6ede876921321680a84e5	pending	ruby	scrabble-score	class Scrabble\n  LETTER_VALUES = {"AEIOULNRST" => 1, "DG" => 2, "BCMP" => 3,\n                   "FHVWY" => 4, "K" => 5, "JX" => 8, "QZ" => 10}\n  \n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    Scrabble.score @word\n  end\n\n  def self.score(word)\n    return 0 if word.nil?\n    counter = 0\n    word.upcase.chars.each do |letter|\n      LETTER_VALUES.each do |letters, value|\n        counter += value if letters.chars.member? letter\n      end\n    end\n    counter\n  end\nend	\N	\N	0	2	2014-09-25 13:00:23	2014-09-25 13:00:23	155	scrabble.rb
288	49	40a5b46dc91ffb99eb8a2e22	pending	python	word-count	"""\nA module for counting the number of occurences of words\nin a phrase.\n"""\nimport string\nfrom collections import Counter\n\n\nclass Phrase(object):\n    """\n    A phrase object for standardizing phrases and counting word\n    occurences.\n    """\n\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    @property\n    def normalized_phrase(self):\n        trans = string.maketrans(string.uppercase, string.lowercase)\n        return string.translate(self.phrase, trans, string.punctuation)\n\n    def _get_words(self):\n        return self.normalized_phrase.split()\n\n    def word_count(self):\n        return dict(Counter(self._get_words()))	\N	\N	0	4	2014-10-14 03:26:40	2014-10-14 03:26:40	161	word-count.py
289	49	483c5a31f2323edd1440cc5b	pending	haskell	strain	module Strain (keep, discard) where\n\nkeep :: (a -> Bool) -> [a] -> [a]\nkeep p (x:xs)\n    | p x    = x : rest\n    | otherwise = rest\n    where rest = keep p xs\nkeep _ [] = []\n\ndiscard :: (a -> Bool) -> [a] -> [a]\ndiscard p = keep $ not . p\n\ndiscard' :: (a -> Bool) -> [a] -> [a]\ndiscard' = keep . (not .)	\N	\N	0	1	2014-08-03 00:14:28	2014-08-03 00:14:28	162	Strain.hs
290	49	e75a860d9d27a9f27f66f0ce	pending	ruby	gigasecond	module Gigasecond\nend	\N	\N	0	1	2014-07-19 15:47:36	2014-07-19 15:47:36	163	gigasecond.rb
291	49	5779494ed8864ed0b01e8532	pending	python	leap	def is_leap_year(year):\n  if year % 400 == 0:\n    return True\n  elif year % 100 == 0:\n    return False\n  elif year % 4 == 0:\n    return True\n  return False	\N	\N	0	1	2014-07-19 20:43:30	2014-07-19 20:43:30	164	year.py
292	49	2679a34143af6435903094a7	pending	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    joined_strings = [a, b]\n\n    length = joined_strings.min{ |a, b| a.length <=> b.length }.length\n    array_a = a.chars.take(length)\n    array_b = b.chars.take(length)\n\n    array_c = array_a.zip(array_b)\n    array_d = array_c.each {|pair| pair.uniq!}\n    array_e = array_d.map {|x| x.count}\n    array_e.delete_if {|i| i < 2}\n    array_e.count\n  end\nend	\N	\N	0	1	2014-08-01 01:26:02	2014-08-01 01:26:02	165	hamming.rb
293	49	f198edc16c9546fb7ba8a48f	pending	ruby	leap	module Divisible\n  def divisible_by? n\n    self % n == 0\n  end\nend\nNumeric.send(:include, Divisible)\n\nmodule Year\n  def self.leap? year\n    return true  if year.divisible_by? 400\n    return false if year.divisible_by? 100\n    return year.divisible_by? 4\n  end\nend	\N	\N	0	3	2014-09-14 15:47:59	2014-09-14 15:47:59	166	year.rb
294	49	4dd2a22da662c289282277c7	superseded	ruby	leap	module Divisible\n  def divisible_by? n\n    self % n == 0\n  end\nend\n\nNumeric.send(:include, Divisible)\n\nmodule Year\n  def self.leap? y\n    return false if !y.divisible_by? 4\n    return true  if  y.divisible_by? 400\n    return false if  y.divisible_by? 100\n    true\n  end\nend	\N	\N	0	1	2014-10-21 16:52:32	2014-10-21 16:52:32	166	year.rb
295	49	b57fdec8b66fd8253e30fd52	superseded	ruby	leap	module Divisible\n  def divisible_by? n\n    self % n == 0\n  end\nend\n\nNumeric.send(:include, Divisible)\n\nmodule Year\n  def self.leap? y\n    return true  if  y.divisible_by? 400\n    return false if  y.divisible_by? 100\n    return y.divisible_by? 4\n  end\nend	\N	\N	0	2	2014-11-20 01:50:10	2014-11-20 01:50:10	166	year.rb
296	49	b1fbd22ed3210abe7a4c40dd	pending	clojure	bob	(ns bob)\n\n; UTILITY METHODS\n(defn last-character-of-sentence\n  [sentence]\n  (let [words (clojure.string/split sentence #"\\s+")\n        last-word (nth words (dec (count words)))\n        last-character (nth last-word (dec (count last-word)))]\n    last-character))\n\n(defn contains-alphabet-letter?\n  [sentence]\n  (> (count (re-find #"[a-zA-z]" sentence)) 0))\n\n; HELPER METHODS\n(defn is-shout?\n  [sentence]\n  (and\n    (= (clojure.string/upper-case sentence) sentence)\n    (contains-alphabet-letter? sentence)))\n\n(defn is-question?\n  [sentence]\n  (let [character (last-character-of-sentence sentence)]\n  (= character \\?)))\n\n(defn is-silent?\n  [sentence]\n  (= (clojure.string/trim sentence) ""))\n\n; MAIN RESPONSE METHOD\n(defn response-for\n  [sentence]\n  (cond\n    (is-silent? sentence)\n      "Fine. Be that way!"\n    (is-shout? sentence)\n      "Woah, chill out!"\n    (is-question? sentence)\n      "Sure."\n    :else\n      "Whatever."))	\N	\N	0	1	2014-07-30 18:27:58	2014-07-30 18:27:58	167	bob.clj
297	49	b07468be91eaed6f32a9b07b	pending	fsharp	space-age	﻿namespace SpaceAge\r\n\r\ntype SpaceAge(seconds: decimal) =\r\n    let secondsPerEarthYear =\r\n            31557600m\r\n\r\n    let earthYears = [\r\n        0.2408467m;\r\n       0.61519726m;\r\n                1m;\r\n        1.8808158m;\r\n        11.862615m;\r\n        29.447498m;\r\n        84.016846m;\r\n        164.79132m;\r\n    ]\r\n\r\n    let secondsToYears ratio =\r\n        let preciseYears = (double)(seconds / secondsPerEarthYear / ratio)\r\n        round (preciseYears * 100.) / 100.\r\n\r\n    let planetYears = earthYears\r\n                       |> List.map secondsToYears\r\n    \r\n    member this.Seconds() = seconds\r\n    \r\n    member this.onMercury() = planetYears.[0]\r\n    member this.onVenus()   = planetYears.[1]\r\n    member this.onEarth()   = planetYears.[2]\r\n    member this.onMars()    = planetYears.[3]\r\n    member this.onJupiter() = planetYears.[4]\r\n    member this.onSaturn()  = planetYears.[5]\r\n    member this.onUranus()  = planetYears.[6]\r\n    member this.onNeptune() = planetYears.[7]\r	\N	\N	0	1	2014-07-05 12:01:21	2014-07-05 12:01:21	168	SpaceAge.fs
298	49	744ab41f9e7715783c1593ce	superseded	haskell	bob	import Test.HUnit (Assertion, (@=?), runTestTT, Test(..))\nimport Control.Monad (void)\nimport Bob (responseFor)\n\ntestCase :: String -> Assertion -> Test\ntestCase label assertion = TestLabel label (TestCase assertion)\n\ntest_respondsToSomething :: Assertion\ntest_respondsToSomething =\n  "Whatever." @=? responseFor "Tom-ay-to, tom-aaaah-to."\n\ntest_respondsToShouts :: Assertion\ntest_respondsToShouts =\n  "Woah, chill out!" @=? responseFor "WATCH OUT!"\n\ntest_respondsToQuestions :: Assertion\ntest_respondsToQuestions =\n  "Sure." @=? responseFor "Does this cryogenic chamber make me look fat?"\n\ntest_respondsToForcefulTalking :: Assertion\ntest_respondsToForcefulTalking =\n  "Whatever." @=? responseFor "Let's go make out behind the gym!"\n\ntest_respondsToAcronyms :: Assertion\ntest_respondsToAcronyms =\n  "Whatever." @=? responseFor "It's OK if you don't want to go to the DMV."\n\ntest_respondsToForcefulQuestions :: Assertion\ntest_respondsToForcefulQuestions =\n  "Woah, chill out!" @=? responseFor "WHAT THE HELL WERE YOU THINKING?"\n\ntest_respondsToShoutingWithSpecialCharacters :: Assertion\ntest_respondsToShoutingWithSpecialCharacters =\n  "Woah, chill out!" @=? responseFor (\n    "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!")\n\ntest_respondsToShoutingNumbers :: Assertion\ntest_respondsToShoutingNumbers =\n  "Woah, chill out!" @=? responseFor "1, 2, 3 GO!"\n\ntest_respondsToShoutingWithNoExclamationMark :: Assertion\ntest_respondsToShoutingWithNoExclamationMark =\n  "Woah, chill out!" @=? responseFor "I HATE YOU"\n\ntest_respondsToStatementContainingQuestionMark :: Assertion\ntest_respondsToStatementContainingQuestionMark =\n  "Whatever." @=? responseFor "Ending with ? means a question."\n\ntest_respondsToSilence :: Assertion\ntest_respondsToSilence =\n  "Fine. Be that way!" @=? responseFor ""\n\ntest_respondsToProlongedSilence :: Assertion\ntest_respondsToProlongedSilence =\n  "Fine. Be that way!" @=? responseFor "    "\n\ntest_respondsToNonLettersWithQuestion :: Assertion\ntest_respondsToNonLettersWithQuestion =\n  "Sure." @=? responseFor ":) ?"\n\ntest_respondsToMultipleLineQuestions :: Assertion\ntest_respondsToMultipleLineQuestions =\n  "Whatever." @=? responseFor "\\nDoes this cryogenic chamber make me look fat? \\nno"\n\ntest_respondsToOtherWhitespace :: Assertion\ntest_respondsToOtherWhitespace =\n  "Fine. Be that way!" @=? responseFor "\\n\\r \\t\\v\\xA0\\x2002" -- \\xA0 No-break space, \\x2002 En space\n\nrespondsToTests :: [Test]\nrespondsToTests =\n  [ testCase "something" test_respondsToSomething\n  , testCase "shouts" test_respondsToShouts\n  , testCase "questions" test_respondsToQuestions\n  , testCase "forceful talking" test_respondsToForcefulTalking\n  , testCase "acronyms" test_respondsToAcronyms\n  , testCase "forceful questions" test_respondsToForcefulQuestions\n  , testCase "shouting with special characters"\n    test_respondsToShoutingWithSpecialCharacters\n  , testCase "shouting numbers" test_respondsToShoutingNumbers\n  , testCase "shouting with no exclamation mark"\n    test_respondsToShoutingWithNoExclamationMark\n  , testCase "statement containing question mark"\n    test_respondsToStatementContainingQuestionMark\n  , testCase "silence" test_respondsToSilence\n  , testCase "prolonged silence" test_respondsToProlongedSilence\n  , testCase "questioned nonsence" test_respondsToNonLettersWithQuestion\n  , testCase "multiple-line statement containing question mark"\n    test_respondsToMultipleLineQuestions\n  , testCase "all whitespace is silence" test_respondsToOtherWhitespace\n  ]\n\nmain :: IO ()\nmain = void (runTestTT (TestList respondsToTests))	\N	\N	0	2	2014-07-26 08:51:42	2014-07-26 08:51:42	169	bob.hs
299	49	408fe8c64d36ceb2e124fab3	pending	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isSpace, isLower, isUpper)\n\ndata Message = Question | Shout | Silence | OtherMessage\n\nresponseFor :: String -> String\nresponseFor = messageResponse . messageType\n\nmessageType :: String -> Message\nmessageType s\n  | all isSpace s                        = Silence\n  | noLowerCase s && containsUppercase s = Shout\n  | last s == '?'                        = Question\n  | otherwise                            = OtherMessage\n\nmessageResponse :: Message -> String\nmessageResponse Shout    = "Woah, chill out!"\nmessageResponse Question = "Sure."\nmessageResponse Silence  = "Fine. Be that way!"\nmessageResponse OtherMessage        = "Whatever."\n\ncontainsUppercase :: String -> Bool\ncontainsUppercase = any isUpper\n\nnoLowerCase :: String -> Bool\nnoLowerCase = not . any isLower	\N	\N	0	3	2014-08-18 12:54:06	2014-08-18 12:54:06	169	bob.hs
300	49	090a1cbf8f2eaa679630c6ac	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isSpace, isLower, isUpper)\n\ndata Message = Question | Shout | Silence | OtherMessage\n\nresponseFor :: String -> String\nresponseFor s = messageResponse (messageType s)\n\nmessageType :: String -> Message\nmessageType s\n  | allWhiteSpace s                      = Silence\n  | noLowerCase s && containsUppercase s = Shout\n  | last s == '?'                        = Question\n  | otherwise                            = OtherMessage\n\nmessageResponse :: Message -> String\nmessageResponse Shout    = "Woah, chill out!"\nmessageResponse Question = "Sure."\nmessageResponse Silence  = "Fine. Be that way!"\nmessageResponse _        = "Whatever."\n\n\nallWhiteSpace :: String -> Bool\nallWhiteSpace = and . (map isSpace)\n\ncontainsUppercase :: String -> Bool\ncontainsUppercase = or . (map isUpper)\n\nnoLowerCase :: String -> Bool\nnoLowerCase = and . (map (not . isLower))	\N	\N	0	1	2014-10-26 20:58:50	2014-10-26 20:58:50	169	bob.hs
301	49	a0e474dd38ca27da1672a0ce	pending	scala	word-count	import scala.collection.immutable.Map\nclass Phrase(val str:String) { \n\tdef wordCount():Map[String,Int] = {\n\t\tval str1 = str.split("[,\\\\s]+");\n\t\tval str2 = str1.map(a => a.filter{b => if(b == '\\'') true else Character.isLetterOrDigit(b) })\n\t\tval str3 = str2.filter(_.length > 0)\n\t\tval str4 = str3.map(_.toLowerCase)\n\t\tval counts = str4.groupBy(identity).mapValues(_.size)\n\t\tprintln(str1 + ":" + str2 + ":" + counts)\n\t\tcounts\n\t\n\t\t}\n}	\N	\N	0	1	2014-07-21 09:51:32	2014-07-21 09:51:32	170	Phrase.scala
302	49	93951ff3d784feb6237a138f	superseded	coffeescript	bob	module.exports = class Bob \n  RESPONSES = \n    "^[^a-z]*[A-Z]+[^a-z]*$": "Woah, chill out!"\n    "\\\\?$"                  : "Sure."\n    "^\\\\s*$"                : "Fine. Be that way!"\n  \n  hey: (input) ->\n    responses = (response for pattern, response of RESPONSES when input.search(pattern) != -1)\n    responses[0] || "Whatever."	\N	\N	0	1	2014-08-11 09:06:12	2014-08-11 09:06:12	171	bob.coffee
303	49	966f4e883717006b0b11bde4	pending	coffeescript	bob	module.exports = class Bob \n  RESPONSES = \n    "^[^a-z]*[A-Z]+[^a-z]*$": "Woah, chill out!"\n    "\\\\?$"                  : "Sure."\n    "^\\\\s*$"                : "Fine. Be that way!"\n  \n  hey: (input) ->\n    responses = (response for pattern, response of RESPONSES when input.match(pattern))\n    responses[0] || "Whatever."	\N	\N	0	2	2014-09-10 00:15:52	2014-09-10 00:15:52	171	bob.coffee
304	49	513c26a2de38ac2dab25464d	pending	python	anagram	def detect_anagrams(anagram, alist):\r\n    """\r\n    (str, list of str)-> list of str\r\n    """\r\n    result = []\r\n    sanagram = list(anagram.lower())\r\n    sanagram.sort()\r\n    for word in alist:\r\n        #discard an entry if it is the exact word\r\n        if anagram.lower() == word.lower():\r\n            continue\r\n        sword = list(word.lower())\r\n        sword.sort()\r\n        if sanagram == sword:\r\n            result.append(word)\r\n    return result\r	\N	\N	0	1	2014-10-14 19:49:28	2014-10-14 19:49:28	172	anagram.py
305	26	aa28768ffcfb82da765e2f49	pending	python	gigasecond	from datetime import timedelta\r\n\r\ndef add_gigasecond (start_date):\r\n\t\r\n\treturn start_date + timedelta(seconds=10**9)\r	\N	\N	0	2	2014-09-27 21:41:28	2014-09-27 21:41:28	173	gigasecond.py
306	26	c3ebed09e45fef5543e67ece	superseded	python	gigasecond	from datetime import timedelta, datetime\r\n\r\ndef add_gigasecond (start_date):\r\n\treturn start_date + timedelta(seconds=1000000000)\r	\N	\N	0	1	2014-10-23 06:13:33	2014-10-23 06:13:33	173	gigasecond.py
307	26	89b1cb87b0630379e5ca6a7b	superseded	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char\nimport Data.String\n\nverse :: Int -> String\nverse n =\n  (capitalize . onTheWall) n ++ ", " ++ beer n ++ ".\\n" ++\n  takeDown n ++ onTheWall (n-1) ++ ".\\n"\n    where\n      capitalize (x:xs) = toUpper x : xs\n\n      onTheWall (-1) = onTheWall 99\n      onTheWall m = beer m ++ " on the wall"\n\n      beer m = bottles m ++ " of beer"\n\n      bottles x = case x of\n                    0 -> "no more bottles"\n                    1 -> "1 bottle"\n                    y -> show y ++ " bottles"\n\n      takeDown x = case x of\n                     0 -> "Go to the store and buy some more, "\n                     y -> "Take " ++ what ++ " down and pass it around, "\n                        where what = case y of\n                                       1 -> "it"\n                                       _ -> "one"\n\nsing :: Int -> Int -> String\nsing start end = unlines $ map verse [start, start-1 .. end]	\N	\N	0	1	2014-10-05 08:03:55	2014-10-05 08:03:55	174	Beer.hs
308	26	9cff79ab794b71180b66909f	pending	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char\nimport Data.List\n\nverse :: Int -> String\nverse n = capitalize $ concat $ map makeLine phrases\n  where\n    makeLine xs = (intercalate ", " $ map unwords xs) ++ ".\\n"\n    phrases = [ [onTheWall n, beer n]\n              , [takeDown n, onTheWall (n-1)]\n              ]\n\n    capitalize (x:xs) = toUpper x : xs\n\n    onTheWall (-1) = onTheWall 99\n    onTheWall m = beer m ++ ["on the wall"]\n\n    beer m = bottles m ++ ["of beer"]\n\n    bottles 0 = ["no more bottles"]\n    bottles 1 = ["1 bottle"]\n    bottles x = [show x, "bottles"]\n\n    takeDown 0 = ["Go to the store and buy some more"]\n    takeDown x = ["Take", what x, "down and pass it around"]\n      where\n        what 1 = "it"\n        what _ = "one"\n\nsing :: Int -> Int -> String\nsing start end = unlines $ map verse [start, start-1 .. end]	\N	\N	0	2	2014-10-14 00:00:43	2014-10-14 00:00:43	174	Beer.hs
309	26	96cb2eaca7bcdc2ace33c8d1	superseded	haskell	leap	module LeapYear\n( isLeapYear\n) where\n\nisLeapYear year\n\t| year `mod` 4 /= 0 = False\n\t| year `mod` 100 /= 0 = True\n\t| year `mod` 400 /= 0 = False\n\t| otherwise = True 	\N	\N	0	1	2014-09-19 19:31:37	2014-09-19 19:31:37	175	LeapYear.hs
310	26	d9276951052273e0b770c4d6	pending	haskell	leap	module LeapYear\n( isLeapYear\n) where\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n\t| year `mod` 4 /= 0 = False\n\t| year `mod` 100 /= 0 = True\n\t| year `mod` 400 /= 0 = False\n\t| otherwise = True 	\N	\N	0	2	2014-11-03 19:21:04	2014-11-03 19:21:04	175	LeapYear.hs
311	26	2c440cbd60e124acf2704c29	superseded	ruby	bob	class Bob\n  def hey sentence\n    @sentence = sentence || ''\n    return "Fine. Be that way!" if @sentence.empty?\n    return "Woah, chill out!" if is_shouting?\n    return "Sure." if is_question?\n    "Whatever."\n  end\n\n  private\n    def is_shouting?\n      return true if @sentence.upcase == @sentence\n    end\n\n    def is_question?\n      return true if @sentence[-1] == "?" \n    end\nend	\N	\N	0	1	2014-09-13 03:15:11	2014-09-13 03:15:11	176	bob.rb
312	26	fc0295eaa48b89116d351e56	superseded	ruby	bob	module Statement\n  def shouting? statement\n    statement.upcase == statement\n  end\n\n  def question? statement\n    statement.end_with? "?"\n  end\n\n  def silent? statement\n    statement.to_s.empty?\n  end\nend\n\nclass Bob\n  include Statement\n  def hey sentence\n    if silent?(sentence)\n      "Fine. Be that way!"\n    elsif shouting?(sentence)\n      "Woah, chill out!" \n    elsif question?(sentence)\n      "Sure." \n    else \n      "Whatever."\n    end \n  end\nend	\N	\N	0	9	2014-09-24 17:22:56	2014-09-24 17:22:56	176	bob.rb
332	7	b3738bda4e0c2b9a44bb0658	superseded	javascript	word-count	var words = function(phrase) {\n\tvar PUNCTUATION_MATCH = /([a-zа-я0-9]|é)+/g;\n\tvar wordCounts = {};\n\n\tvar wordsInPhrase = phrase.toLowerCase().match(PUNCTUATION_MATCH);\n\n\twordsInPhrase.forEach(function(word) {\n\t\t// check if a count exists already, if not, initialize at 0\n\t\tif(!wordCounts.hasOwnProperty(word)) {\n\t\t\twordCounts[word] = 0;\n\t\t}\n\n\t\twordCounts[word] += 1;\n\t});\n\n\treturn wordCounts;\n};\n\nmodule.exports = words;	\N	\N	0	2	2014-10-29 04:32:34	2014-10-29 04:32:34	182	word-count.js
313	26	fd4a277a18c6d1a18589a207	pending	ruby	bob	class Statement\n  def initialize statement\n    @statement = statement || ""\n  end\n\n  def shouting?\n    @statement.upcase == @statement\n  end\n\n  def question?\n    @statement.end_with? "?"\n  end\n\n  def silent?\n    @statement.empty?\n  end\nend\n\nclass Teenager\n  def hey sentence\n    statement = Statement.new(sentence)\n    if statement.silent?\n      "Fine. Be that way!"\n    elsif statement.shouting?\n      "Woah, chill out!" \n    elsif statement.question?\n      "Sure." \n    else \n      "Whatever."\n    end \n  end\nend\n\nclass Bob < Teenager\nend	\N	\N	0	11	2014-10-03 21:13:36	2014-10-03 21:13:36	176	bob.rb
314	26	4488dd906418983263edbaed	superseded	ruby	bob	class Bob\n  def hey sentence\n    return "Fine. Be that way!" if is_silent?(sentence)\n    return "Woah, chill out!" if is_shouting?(sentence)\n    return "Sure." if is_question?(sentence)\n    "Whatever."\n  end\n\n  private\n    def is_shouting? sentence\n      sentence.upcase == sentence\n    end\n\n    def is_question? sentence\n      sentence.end_with? "?"\n    end\n\n    def is_silent? sentence\n      sentence == nil || sentence.empty?\n    end\nend	\N	\N	0	6	2014-10-04 03:23:14	2014-10-04 03:23:14	176	bob.rb
315	26	90f24895580a644d644f8be4	superseded	ruby	bob	class Bob\n  def hey sentence, *another\n    @sentence = sentence || ''\n    return "One.at.a.time." if another.any?     # Multiple people talking\n    return "Fine. Be that way!" if is_silent? \n    return "Woah, chill out!" if is_shouting?\n    return "Sure." if is_question?\n    "Whatever."\n  end\n\n  private\n    def is_shouting?\n      return true if @sentence.upcase == @sentence\n    end\n\n    def is_question?\n      return true if @sentence[-1] == "?" \n    end\n\n    def is_silent?\n      return true if @sentence.empty?\n    end\nend	\N	\N	0	2	2014-10-12 05:15:19	2014-10-12 05:15:19	176	bob.rb
316	26	10343eea81b0a755f5b87e57	superseded	ruby	bob	class Bob\n  def hey sentence\n    if silent?(sentence)\n      "Fine. Be that way!"\n    elsif shouting?(sentence)\n      "Woah, chill out!" \n    elsif question?(sentence)\n      "Sure." \n    else \n      "Whatever."\n    end \n  end\n\n  private\n    def shouting? sentence\n      sentence.upcase == sentence\n    end\n\n    def question? sentence\n      sentence.end_with? "?"\n    end\n\n    def silent? sentence\n      sentence == nil || sentence.empty?\n    end\nend	\N	\N	0	7	2014-10-17 03:39:29	2014-10-17 03:39:29	176	bob.rb
317	26	fb9e1586a1f10a865213c373	superseded	ruby	bob	class Bob\n  def hey sentence\n    if silent?(sentence)\n      "Fine. Be that way!"\n    elsif shouting?(sentence)\n      "Woah, chill out!" \n    elsif question?(sentence)\n      "Sure." \n    else \n      "Whatever."\n    end \n  end\n\n  private\n    def shouting? sentence\n      sentence.upcase == sentence\n    end\n\n    def question? sentence\n      sentence.end_with? "?"\n    end\n\n    def silent? sentence\n      sentence.to_s.empty?\n    end\nend	\N	\N	0	8	2014-10-23 11:13:51	2014-10-23 11:13:51	176	bob.rb
318	26	9a407a1dfb1300f5b20b8448	superseded	ruby	bob	class Bob\n  def hey sentence\n    return "Fine. Be that way!" if is_silent?(sentence)\n    return "Woah, chill out!" if is_shouting?(sentence)\n    return "Sure." if is_question?(sentence)\n    "Whatever."\n  end\n\n  private\n    def is_shouting? sentence\n      return true if sentence.upcase == sentence\n    end\n\n    def is_question? sentence\n      return true if sentence[-1] == "?" \n    end\n\n    def is_silent? sentence\n      return true if sentence == nil || sentence.empty?\n    end\nend	\N	\N	0	3	2014-11-01 17:40:41	2014-11-01 17:40:41	176	bob.rb
319	26	d2ed4b05a9464c885c2214c2	superseded	ruby	bob	class Bob\n  def hey sentence\n    return "Fine. Be that way!" if is_silent?(sentence)\n    return "Woah, chill out!" if is_shouting?(sentence)\n    return "Sure." if is_question?(sentence)\n    "Whatever."\n  end\n\n  private\n    def is_shouting? sentence\n      sentence.upcase == sentence\n    end\n\n    def is_question? sentence\n      sentence[-1] == "?" \n    end\n\n    def is_silent? sentence\n      sentence == nil || sentence.empty?\n    end\nend	\N	\N	0	5	2014-11-05 01:45:37	2014-11-05 01:45:37	176	bob.rb
320	26	029d0baf19c36111f314d761	superseded	ruby	bob	class Bob\n  def hey sentence\n    return "Fine. Be that way!" if is_silent?(sentence)\n    return "Woah, chill out!" if is_shouting?(sentence)\n    return "Sure." if is_question?(sentence)\n    "Whatever."\n  end\n\n  private\n    def is_shouting? sentence\n      true if sentence.upcase == sentence\n    end\n\n    def is_question? sentence\n      true if sentence[-1] == "?" \n    end\n\n    def is_silent? sentence\n      true if sentence == nil || sentence.empty?\n    end\nend	\N	\N	0	4	2014-11-20 23:59:55	2014-11-20 23:59:55	176	bob.rb
321	26	ce7df7f6f7da9b031f46e21f	superseded	ruby	bob	class Statement\n  def initialize statement\n    @statement = statement \n  end\n\n  def shouting?\n    @statement.upcase == @statement\n  end\n\n  def question?\n    @statement.end_with? "?"\n  end\n\n  def silent?\n    @statement.to_s.empty?\n  end\nend\n\nclass Teenager\n  def hey sentence\n    statement = Statement.new(sentence)\n    if statement.silent?\n      "Fine. Be that way!"\n    elsif statement.shouting?\n      "Woah, chill out!" \n    elsif statement.question?\n      "Sure." \n    else \n      "Whatever."\n    end \n  end\nend\n\nclass Bob < Teenager\nend	\N	\N	0	10	2014-11-22 13:26:34	2014-11-22 13:26:34	176	bob.rb
322	26	84c4ef2b57de432a84991d00	superseded	python	beer-song	#!/usr/bin/env python\n\nclass Beer:\n    def verse(self, nr):\n        def bottle_phrase(amount):\n            phrase = "bottle"\n            if amount == 0:\n                phrase = "no more " + phrase\n            else:\n                phrase = "{0} {1}".format(amount, phrase)\n            if amount != 1:\n                phrase += "s"\n            return phrase\n        \n        def beer_phrase(amount):\n            return "{0} of beer".format(bottle_phrase(amount))\n        \n        def wall_phrase(amount):\n            return "{0} on the wall".format(beer_phrase(amount))\n        \n        def action_phrase(amount):\n            if amount == 0:\n                return "Go to the store and buy some more"\n            else:\n                phrase = "Take {0} down and pass it around"\n                if amount == 1:\n                    return phrase.format("it")\n                else:\n                    return phrase.format("one")\n        \n        result = "{0}, {1}.\\n{2}, {3}.\\n".format(wall_phrase(nr),\n                                                 beer_phrase(nr),\n                                                 action_phrase(nr),\n                                                 wall_phrase((nr + 99) % 100))\n        return result[0].upper() + result[1:]\n    \n    def sing(self, start, stop=0):\n        return "\\n".join([self.verse(n) for n in range(start, stop - 1, -1)]) + "\\n"	\N	\N	0	1	2014-10-17 22:23:32	2014-10-17 22:23:32	177	beer.py
331	7	ef83858bbb83321145a6b600	superseded	javascript	word-count	var returnArrayOfWords = function(phrase) {\n\t// remove excess whitespace\n\tphrase = phrase\n\t\t.trim()\n\t\t// replace any non-whitespace, non-letter, non-number, non-underscore with empty string\n\t\t.replace(/[^\\w\\s\\p{L}]/g, "");\n\n\tconsole.log(phrase);\n\n\t// split all spaces (2+ included)\n\treturn phrase.split(/ +/);\n};\n\nvar words = function(phrase) {\n\n\tvar wordCounts = Object.create(null); // no prototype, no keywords\n\tvar wordsInPhrase = returnArrayOfWords(phrase)\n\n\twordsInPhrase.forEach(function(word) {\n\t\tword = word.toLowerCase(); // normalize the word\n\n\t\t// check if a count exists already, if not, initialize at 0\n\t\tif(!wordCounts[word]) {\n\t\t\twordCounts[word] = 0;\n\t\t}\n\n\t\twordCounts[word] += 1;\n\t});\n\n\treturn wordCounts;\n};\n\nmodule.exports = words;	\N	\N	0	1	2014-10-06 17:22:11	2014-10-06 17:22:11	182	word-count.js
323	26	a6818ddd61e6163c8550e74d	pending	python	beer-song	from string import capitalize\n\n\nclass Beer(object):\n\n    """Beer song generator"""\n\n    def _bottle_phrase(self, number):\n        """Return exactly how many bottles are involved."""\n        phrase = "bottle"\n        if number:\n            phrase = "{0} {1}".format(number, phrase)\n        else:\n            phrase = "no more " + phrase\n        if number != 1:\n            phrase += "s"\n        return phrase\n\n    def _beer_phrase(self, number):\n        """Return how much beer is involved."""\n        return self._bottle_phrase(number) + " of beer"\n\n    def _wall_phrase(self, number):\n        """Return where the beer is located."""\n        return self._beer_phrase(number) + " on the wall"\n\n    def _action_phrase(self, number):\n        """Return what to do under these circumstances."""\n        if number:\n            phrase = "Take {0} down and pass it around"\n            if number == 1:\n                return phrase.format("it")\n            else:\n                return phrase.format("one")\n        else:\n            return "Go to the store and buy some more"\n\n    def _previous(self, number):\n        """Return number of previous verse."""\n        return(number + 99) % 100\n\n    def verse(self, number):\n        """Return one verse of the beer song."""\n        return (capitalize(self._wall_phrase(number)) + ", " +\n                self._beer_phrase(number) + ".\\n" +\n                self._action_phrase(number) + ", " +\n                self._wall_phrase(self._previous(number)) + ".\\n")\n\n    def sing(self, start, stop=0):\n        """Return several verses of the beer song."""\n        return "\\n".join([self.verse(n) for\n                          n in range(start, stop - 1, -1)]) + "\\n"	\N	\N	0	2	2014-11-03 12:42:31	2014-11-03 12:42:31	177	beer.py
324	26	1fd2d0b89a5d5ba0bd0c44d0	pending	javascript	bob	var Bob = function(){\n  this.hey = function(input){\n    if(input === input.toUpperCase() && /[A-Z]/.test(input))\n      return('Woah, chill out!');\n\n    else if(input.replace(/\\s+/g, '') === "")\n      return('Fine. Be that way!');\n\n    else if(input.charAt(input.length-1)==='?')\n      return('Sure.');\n\n    else return('Whatever.');\n  };\n}\n\nmodule.exports = Bob;	\N	\N	0	1	2014-10-10 10:55:46	2014-10-10 10:55:46	178	bob.js
325	26	65c6e6b2210c6742d8e67439	pending	ruby	prime-factors	module Factoring\n  refine Fixnum do\n    def has_factors?\n      self > 1\n    end\n\n    def factor_of?(n)\n      n.modulo(self).zero?\n    end\n  end\nend\n\nusing Factoring\n\nclass PrimeFactors\n\n  def self.for(number)\n    self.new(number).factors\n  end\n\n  def initialize(number)\n    @number = number\n  end\n\n  def factors\n    factors = []\n    divisor = 2\n    n = @number\n\n    while n.has_factors?\n      if divisor.factor_of?(n)\n        factors << divisor\n        n /= divisor\n      else\n        divisor = divisor.next\n      end\n    end\n    factors\n  end\nend	\N	\N	0	1	2014-09-23 19:53:17	2014-09-23 19:53:17	179	prime-factors.rb
326	7	27d29ede7378d848727c0227	superseded	haskell	bob	module Bob ( responseFor ) where \n\nimport qualified Data.Char (toUpper)\nimport qualified Data.Text (unpack, strip, pack)\n\ntrim :: String -> String\ntrim = Data.Text.unpack . Data.Text.strip . Data.Text.pack\n\nupper :: String -> String\nupper = map Data.Char.toUpper\n\ndata StatementType = Silence | Yell | Query | Other\n  \ntypeOfStatement :: String -> StatementType\ntypeOfStatement s\n  | s == []                    = Silence\n  | s == (upper s)             = Yell\n  | (head $ reverse s) == '?'  = Query\n  | otherwise                  = Other\n\nbobSaysFor :: StatementType -> String\nbobSaysFor Silence = "Fine. Be that way."\nbobSaysFor Yell    = "Woah, chill out!"\nbobSaysFor Query   = "Sure."\nbobSaysFor Other   = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = bobSaysFor . typeOfStatement . trim	\N	\N	0	1	2014-09-29 06:46:15	2014-09-29 06:46:15	180	bob.hs
327	7	92c3a5ffa80c9312c5da893d	superseded	haskell	bob	module Bob ( responseFor ) where \n\nimport Data.Char (isSpace, toUpper)\n\nupper :: String -> String\nupper = map toUpper\n\nstrip :: String -> String\nstrip = lstrip . rstrip\n\nlstrip :: String -> String\nlstrip s = case s of\n             []     -> []\n             (x:xs) -> if isSpace x\n                       then lstrip xs\n                       else s\n\nrstrip :: String -> String\nrstrip = reverse . lstrip . reverse\n\ndata StatementType = Silence | Yell | Query | Other\n  \ntypeOfStatement :: String -> StatementType\ntypeOfStatement s\n  | s == []       = Silence\n  | upper s == s  = Yell\n  | last s == '?' = Query\n  | otherwise     = Other\n\nbobSaysFor :: StatementType -> String\nbobSaysFor Silence = "Fine. Be that way."\nbobSaysFor Yell    = "Woah, chill out!"\nbobSaysFor Query   = "Sure."\nbobSaysFor Other   = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = bobSaysFor . typeOfStatement . strip	\N	\N	0	3	2014-10-19 11:57:00	2014-10-19 11:57:00	180	bob.hs
328	7	92d0a4bfd7f1c35d72be6df0	superseded	haskell	bob	module Bob ( responseFor ) where \n\nimport Data.Char (toUpper)\n\nupper :: String -> String\nupper = map toUpper\n\nwschars :: String\nwschars = " \\t\\r\\n"\n\nstrip :: String -> String\nstrip = lstrip . rstrip\n\nlstrip :: String -> String\nlstrip s = case s of\n                  [] -> []\n                  (x:xs) -> if elem x wschars\n                            then lstrip xs\n                            else s\n\nrstrip :: String -> String\nrstrip = reverse . lstrip . reverse\n\ndata StatementType = Silence | Yell | Query | Other\n  \ntypeOfStatement :: String -> StatementType\ntypeOfStatement s\n  | s == []                    = Silence\n  | s == (upper s)             = Yell\n  | (head $ reverse s) == '?'  = Query\n  | otherwise                  = Other\n\nbobSaysFor :: StatementType -> String\nbobSaysFor Silence = "Fine. Be that way."\nbobSaysFor Yell    = "Woah, chill out!"\nbobSaysFor Query   = "Sure."\nbobSaysFor Other   = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = bobSaysFor . typeOfStatement . strip	\N	\N	0	2	2014-11-22 00:15:43	2014-11-22 00:15:43	180	bob.hs
329	7	6c34712b565f769360068afc	pending	haskell	bob	module Bob ( responseFor ) where \n\nimport Data.Char (isSpace, toUpper)\n\nupper :: String -> String\nupper = map toUpper\n\nstrip :: String -> String\nstrip = lstrip . rstrip\n\nlstrip :: String -> String\nlstrip = dropWhile isSpace\n\nrstrip :: String -> String\nrstrip = reverse . lstrip . reverse\n\ndata StatementType = Silence | Yell | Query | Other\n  \ntypeOfStatement :: String -> StatementType\ntypeOfStatement s\n  | s == []       = Silence\n  | upper s == s  = Yell\n  | last s == '?' = Query\n  | otherwise     = Other\n\nbobSaysFor :: StatementType -> String\nbobSaysFor Silence = "Fine. Be that way."\nbobSaysFor Yell    = "Woah, chill out!"\nbobSaysFor Query   = "Sure."\nbobSaysFor Other   = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = bobSaysFor . typeOfStatement . strip	\N	\N	0	4	2014-11-26 01:00:37	2014-11-26 01:00:37	180	bob.hs
330	7	c686202880890bef6ed93dee	pending	javascript	anagram	var _= require('underscore');\n\nmodule.exports = function(string)\n{\n\tthis.string = string.toLowerCase();\n\tthis.list = string.match(/.{1}/g);\n\tthis.list.sort();\n\n\tthis.match = function(stringList)\n\t{\n\t\tlist = [];\n\n\t\tfor ( var i = 0; i < stringList.length; i++)\n\t\t{\n\n\t\t\tinputList = stringList[i].match(/.{1}/g);\n\t\t\tinputList.sort();\n\n\t\t\tif (_.isEqual(inputList, this.list))\n\t\t\t{\n\t\t\t\tlist.push(stringList[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn list;\n\t};\n\n};	\N	\N	0	1	2014-10-09 11:16:09	2014-10-09 11:16:09	181	anagram.js
359	23	83b5447fb398c3a716702a0e	pending	ruby	word-count	class Phrase\n  attr_reader :content\n\n  def initialize(content)\n    @content = content\n  end\n\n  def word_count\n    words.each_with_object(Hash.new 0) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  private\n  def words\n    content.downcase.split(/\\W+/)\n  end\nend	\N	\N	0	1	2014-07-21 20:50:03	2014-07-21 20:50:03	201	word-count.rb
333	7	159e3768ff18c1bdb477c543	superseded	javascript	word-count	var words = function(phrase) {\n\tvar PUNCTUATION_MATCH = /([a-zа-я0-9]|é)+/g;\n\n\t// lowercases words\n\t// removes puncuation\n\t// returns an array of the words in the phrase\n\tvar wordsInPhrase = phrase.toLowerCase().match(PUNCTUATION_MATCH);\n\n\t// Sorts array of words into object\n\tvar wordCounts = wordsInPhrase.reduce(function(wordCounts, word) {\n\t\treturn wordCounts.hasOwnProperty(word) ? wordCounts[word] += 1 : wordCounts[word] = 1;\n\t}, {});\n\n\treturn wordCounts;\n};\n\nmodule.exports = words;	\N	\N	0	3	2014-11-07 16:57:49	2014-11-07 16:57:49	182	word-count.js
334	7	603a7f5b68868d0d25ee19fa	pending	javascript	word-count	var words = function(phrase) {\n\tvar PUNCTUATION_MATCH = /([a-zа-я0-9]|é)+/g;\n\n\t// lowercases words\n\t// removes puncuation\n\t// returns an array of the words in the phrase\n\tvar wordsInPhrase = phrase.toLowerCase().match(PUNCTUATION_MATCH);\n\n\t// Sorts array of words into object\n\tvar wordCounts = wordsInPhrase.reduce(function(wordCounts, word) {\n\t\twordCounts.hasOwnProperty(word) ? wordCounts[word] += 1 : wordCounts[word] = 1;\n\t\treturn wordCounts;\n\t}, {});\n\n\treturn wordCounts;\n};\n\nmodule.exports = words;	\N	\N	0	4	2014-11-13 06:57:52	2014-11-13 06:57:52	182	word-count.js
335	7	bd4b344d5fe031d5bb7474de	pending	python	rna-transcription	class DNA:\n\n    _translation = dict(C='C', G='G', A='A', T='U')\n\n    def __init__(self, dna):\n        self.dna = dna\n\n    def to_rna(self):\n        rna = ''.join(self._translation[c] for c in self.dna)\n        return rna	\N	\N	0	1	2014-10-04 21:20:01	2014-10-04 21:20:01	183	dna.py
336	7	65e50df4c490010df87961a6	pending	ruby	robot-name	class Robot\n    def initialize\n        name #boot\n    end\n    \n    def name\n        @name ||= RobotNameGenerator.generate\n    end\n    \n    def reset\n        @name = nil #wipe\n    end\nend\n\nmodule RobotNameGenerator\n    @@used = []\n    \n    def self.generate\n        loop do\n            result = \n                ('a'..'z').to_a.shuffle[0,2].join.upcase + \n                ('0'..'9').to_a.shuffle[0,3].join\n                \n            return ( @@used << result ).last unless @@used.include? result\n        end\n    end\nend	\N	\N	0	1	2014-11-04 05:08:45	2014-11-04 05:08:45	184	robot.rb
337	23	1c3bfe1a5ffbc0573d799461	pending	ruby	raindrops	class Raindrops\n  RULES = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong",\n  }\n\n  def self.convert(number)\n    prime_digits = prime_factors(number)\n    return number.to_s if prime_digits.empty?\n\n    prime_digits.map {|_digit|\n      RULES[_digit]\n    }.join\n  end\n\n  private\n  def self.prime_factors(number)\n    factors = []\n    divider = factor(number)\n\n    while !divider.nil?\n      factors << divider\n      number = numbe / divider\n      divider = factor(number)\n    end\n\n    factors.keep_if {|_digit|\n      [3, 5, 7].include?(_digit)\n    }.uniq\n  end\n\n  def self.factor(number)\n    (2..number).detect do |_divider|\n      number % _divider == 0\n    end\n  end\nend	\N	\N	0	2	2014-07-26 02:37:41	2014-07-26 02:37:41	185	raindrops.rb
338	23	091ff23cef4ffcafe82a08ed	superseded	ruby	raindrops	class Raindrops\n  RULES = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong",\n  }\n\n  def self.convert(number)\n    prime_digits = prime_factors(number)\n    return number.to_s if prime_digits.empty?\n\n    prime_digits.map {|_digit|\n      RULES[_digit]\n    }.join\n  end\n\n  private\n  def self.prime_factors(number)\n    factors = []\n    divider = factor(number)\n\n    while !divider.nil?\n      factors << divider\n      number /= divider\n      divider = factor(number)\n    end\n\n    factors.keep_if {|_digit|\n      [3, 5, 7].include?(_digit)\n    }.uniq\n  end\n\n  def self.factor(number)\n    (2..number).detect do |_divider|\n      number % _divider == 0\n    end\n  end\nend	\N	\N	0	1	2014-09-18 08:16:23	2014-09-18 08:16:23	185	raindrops.rb
339	23	b82f2ff1387d936ac8766bd2	pending	python	difference-of-squares	def difference(n):\n    return square_of_sum(n) - sum_of_squares(n)\n\n\ndef square_of_sum(n):\n    return sum(range(n + 1))**2\n\n\ndef sum_of_squares(n):\n    return sum([x**2 for x in range(n + 1)])	\N	\N	0	1	2014-08-06 03:04:34	2014-08-06 03:04:34	186	difference_of_squares.py
340	23	fd4f9ed340e4d3feb2bd5539	pending	python	bob	import re\n\nclass Bob:\n    def hey(self, message):\n        if message.isupper():\n            return "Woah, chill out!"\n        elif re.compile('.*\\?$').match(message):\n            return "Sure."\n        elif not message.strip():\n            return "Fine. Be that way!"\n        else:\n            return "Whatever."	\N	\N	0	1	2014-10-27 05:42:58	2014-10-27 05:42:58	187	bob.py
341	23	b68292ced81b59f4f5d8ed6b	pending	ruby	roman-numerals	class Fixnum\n  @@roman = {\n    1 => 'I',\n    2 => 'II',\n    3 => 'III',\n    4 => 'IV',\n    5 => 'V',\n    6 => 'VI',\n    7 => 'VII',\n    8 => 'VIII',\n    9 => 'IX',\n    10 => 'X',\n    20 => 'XX',\n    30 => 'XXX',\n    40 => 'XL',\n    50 => 'L',\n    60 => 'LX',\n    70 => 'LXX',\n    80 => 'LXXX',\n    90 => 'XC',\n    100 => 'C',\n    200 => 'CC',\n    300 => 'CCC',\n    400 => 'CD',\n    500 => 'D',\n    600 => 'DC',\n    700 => 'DCC',\n    800 => 'DCCC',\n    900 => 'CM',\n    1000 => 'M',\n    2000 => 'MM',\n    3000 => 'MMM'\n  }\n\n  def to_roman\n    x = self\n    ret = ""\n    [1000,100,10,1].each do |e|\n      t,r = x.divmod(e)\n      x = r\n      ret << @@roman[t*e]  if t > 0\n    end\n    ret\n  end \n\n  def to_roman_old\n    ret  = ""\n    r = 0\n    x = self\n    if x >= 1000\n      t, r = x.divmod(1000)\n      ret << @@roman[t*1000]\n      x = r\n    end\n    if  x >= 100\n      t, r = x.divmod(100)\n      ret << @@roman[t*100]\n      x = r\n    end\n    if  x >= 10\n      t, r = x.divmod(10)\n      ret << @@roman[t*10]\n      x = r\n    end\n    if  x >= 1\n      ret << @@roman[x]\n    end\n    ret\n  end\nend	\N	\N	0	1	2014-09-27 15:38:49	2014-09-27 15:38:49	188	roman.rb
342	23	c24dcb9d2823bc11693c0a06	pending	clojure	raindrops	(ns drops)\n\n(defn convert\n  [n]\n  (let [m {3 "Pling" 5 "Plang" 7 "Plong"}\n        s (apply str (for [[k v] m]\n                       (if (zero? (rem n k))\n                         v\n                         "")))]\n    (if (clojure.string/blank? s)\n      (str n)\n      s)))	\N	\N	0	1	2014-07-11 11:32:31	2014-07-11 11:32:31	189	raindrops.clj
343	23	dce8eb0c5d3d02900641f9a1	pending	ruby	leap	class Year\n  attr_reader :value\n\n  def self.leap?(value)\n    new(value).leap?\n  end\n\n  def initialize(value)\n    @value = value\n  end\n\n  def leap?\n    if divisible_by_400?\n      true\n    elsif divisible_by_100?\n      false\n    elsif divisible_by_4?\n      true\n    else\n      false\n    end\n  end\n\n  def divisible_by_400?\n    value % 400 == 0\n  end\n\n  def divisible_by_100?\n    value % 100 == 0\n  end\n\n  def divisible_by_4?\n    value % 4 == 0\n  end\nend	\N	\N	0	1	2014-08-30 16:16:09	2014-08-30 16:16:09	190	year.rb
344	23	00de678f33d7035545012f11	pending	csharp	grade-school	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Collections;\r\nusing System.Text;\r\n\r\nnamespace TestProject\r\n{\r\n    class School\r\n    {\r\n        public Dictionary<int, List<string>> Roster = new Dictionary<int, List<string>>();\r\n\r\n        internal void Add(string studentName, int studentGrade)\r\n        {\r\n            if (!this.Roster.ContainsKey(studentGrade))\r\n            {\r\n                this.Roster.Add(studentGrade, new List<string>());\r\n            }\r\n            this.Roster[studentGrade].Add(studentName);\r\n            this.Roster[studentGrade].Sort();\r\n        }\r\n        public List<string> Grade(int gradeLevel)\r\n        {\r\n            if (!this.Roster.ContainsKey(gradeLevel))\r\n            {\r\n                this.Roster.Add(gradeLevel, new List<string>());\r\n            }\r\n            return this.Roster[gradeLevel];\r\n        }\r\n    }\r\n}	\N	\N	0	1	2014-08-26 22:07:43	2014-08-26 22:07:43	191	School.cs
345	23	a5a8b69d46846d35b0090a0a	pending	ruby	nucleotide-count	class DNA\n  VALID_NUCLEOTIDES =  %w{A T C G U}\n  VALID_DNA_NUCLEOTIDES =  %w{A T C G}\n\n  def initialize sequence\n    @sequence = sequence\n    validate_dna_sequence\n  end\n\n  def count nucleotide\n    raise ArgumentError unless valid_nucleotide? nucleotide\n    @sequence.count nucleotide\n  end\n\n  def nucleotide_counts\n    VALID_DNA_NUCLEOTIDES.each_with_object({}) { |nucleotide,result| result[nucleotide] = count(nucleotide) }\n  end\n\n  private\n\n  def validate_dna_sequence\n    @sequence.chars.each { |nucleotide| raise ArgumentError unless valid_dna_nucleotide? nucleotide }\n  end\n\n\n  def valid_dna_nucleotide? nucleotide\n    VALID_DNA_NUCLEOTIDES.include? nucleotide\n  end\n\n  def valid_nucleotide? nucleotide\n    VALID_NUCLEOTIDES.include? nucleotide\n  end\n\n\nend	\N	\N	0	2	2014-07-11 16:08:19	2014-07-11 16:08:19	192	nucleotide-count.rb
346	23	df7b15e35d2396f9d76aa873	superseded	ruby	nucleotide-count	class DNA\n  VALID_NUCLEOTIDES =  %w{A T C G U}\n  VALID_DNA_NUCLEOTIDES =  %w{A T C G}\n\n  def initialize sequence\n    @sequence = sequence\n    validate_dna_sequence\n  end\n\n  def count nucleotide\n    raise ArgumentError unless valid_nucleotide? nucleotide\n    @sequence.count nucleotide\n  end\n\n  def nucleotide_counts\n    result = {}\n    VALID_DNA_NUCLEOTIDES.each { |nucleotide| result[nucleotide] = count(nucleotide) }\n    result\n  end\n\n  private\n\n  def validate_dna_sequence\n    @sequence.chars.each { |nucleotide| raise ArgumentError unless valid_dna_nucleotide? nucleotide }\n  end\n\n\n  def valid_dna_nucleotide? nucleotide\n    VALID_DNA_NUCLEOTIDES.include? nucleotide\n  end\n\n  def valid_nucleotide? nucleotide\n    VALID_NUCLEOTIDES.include? nucleotide\n  end\n\n\nend	\N	\N	0	1	2014-07-11 18:13:52	2014-07-11 18:13:52	192	nucleotide-count.rb
347	23	5e5cc221f11f5d5587c68f86	pending	go	secret-handshake	package secret\n\nvar commands = []string{\n\t"wink",\n\t"double blink",\n\t"close your eyes",\n\t"jump",\n}\n\nfunc Handshake(n int) []string {\n\tif n <= 0 || n >= 32 {\n\t\treturn []string{}\n\t}\n\n\tl := make([]string, 0, 4)\n\n\tfor i, c := range commands {\n\t\tif 1<<uint(i)&n != 0 {\n\t\t\tl = append(l, c)\n\t\t}\n\t}\n\n\tif 1<<uint(len(commands))&n != 0 {\n\t\tfor i, j := 0, len(l)-1; i < j; i, j = i+1, j-1 {\n\t\t\tl[i], l[j] = l[j], l[i]\n\t\t}\n\t}\n\treturn l\n}	\N	\N	0	1	2014-08-02 07:08:50	2014-08-02 07:08:50	193	secret_handshake.go
348	23	f69f53951d1b168af3bd3d16	superseded	ruby	hamming	class Hamming\n  def self.compute( acid1, acid2 )\n    i = 0\n    distance = 0\n    \n    while( acid1[i] and acid2[i] )\n      if( acid1[i] != acid2[i] )\n        distance += 1\n      end\n      i += 1\n    end\n    \n    distance\n  end\nend	\N	\N	0	1	2014-07-06 20:58:58	2014-07-06 20:58:58	194	hamming.rb
349	23	9bb07306969cf7cb50e8f738	superseded	ruby	hamming	class Hamming\n  def self.compute( acid1, acid2 )\n    count = [ acid1.length, acid2.length ].min\n    distance = 0\n    \n    for i in 0...count\n      if( acid1[i] != acid2[i] )\n        distance += 1\n      end\n    end\n    \n    distance\n  end\nend	\N	\N	0	2	2014-07-08 15:27:21	2014-07-08 15:27:21	194	hamming.rb
350	23	7f72f611376c46ea718ae62e	superseded	ruby	hamming	class Hamming\n  def self.compute( seq1, seq2 )\n    count = [ seq1.length, seq2.length ].min\n    distance = 0\n    \n    for i in 0...count\n      if( seq1[i] != seq2[i] )\n        distance += 1\n      end\n    end\n    \n    distance\n  end\nend	\N	\N	0	3	2014-08-10 16:44:05	2014-08-10 16:44:05	194	hamming.rb
351	23	7f88e98fb77f442d3ea68edd	superseded	ruby	hamming	class Hamming\n  # returns the Hamming distance between two DNA strands\n  def self.compute( seq1, seq2 )\n    hamming_distance = 0\n    max_length_comparable = [ seq1.length, seq2.length ].min\n    \n    for i in 0...max_length_comparable\n      nucleotide1 = seq1[i]\n      nucleotide2 = seq2[i]\n      if nucleotide1 != nucleotide2\n        hamming_distance += 1\n      end\n    end\n    \n    return hamming_distance\n  end\nend	\N	\N	0	4	2014-08-23 06:01:53	2014-08-23 06:01:53	194	hamming.rb
352	23	56e663cf05ae9a231586d820	pending	ruby	hamming	class Hamming\n  # returns the Hamming distance (# of point mutations) between two DNA strands\n  def self.compute( seq1, seq2 )\n    hamming_distance = 0\n    max_length_comparable = [ seq1.length, seq2.length ].min\n    \n    for i in 0...max_length_comparable\n      nucleotide1 = seq1[i]\n      nucleotide2 = seq2[i]\n      if nucleotide1 != nucleotide2\n        hamming_distance += 1\n      end\n    end\n    \n    return hamming_distance\n  end\nend	\N	\N	0	5	2014-10-10 12:20:52	2014-10-10 12:20:52	194	hamming.rb
353	23	9c3f9f99b197ae740be1efa9	pending	ruby	gigasecond	class Gigasecond\r\n\r\n\tdef initialize(date)\r\n\t\t@date = date\r\n\tend\r\n\t\r\n\tSEC_PER_DAY = 24 * 3600\r\n\tR = Rational(10 ** 9, SEC_PER_DAY)\r\n\t\r\n\tdef date\r\n\t\t(@date + R.to_int).to_date\r\n\tend\r\n\t\r\nend	\N	\N	0	1	2014-07-22 23:56:22	2014-07-22 23:56:22	195	gigasecond.rb
354	23	7252cfe7f2eb0e815f3b48be	pending	ruby	nth-prime	class Prime\n  require 'prime'\n  def self.nth(n)\n    raise ArgumentError if n <= 0\n    Prime.first(n).last\n  end\nend	\N	\N	0	1	2014-08-29 16:31:08	2014-08-29 16:31:08	196	prime.rb
355	23	905eaf47797dca3ed7d3b803	pending	python	word-count	from collections import defaultdict\nimport re\n\nclass Phrase(object):\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    def word_count(self):\n        counts = defaultdict(int)\n        for word in self._words():\n            counts[word] += 1\n        return counts\n\n    def _words(self):\n        words_re = re.compile(r'\\w+')\n        sanitized = self._sanitize()\n        for word in words_re.finditer(sanitized):\n            yield word.group()   \n\n    def _sanitize(self):\n        return self.phrase.lower()	\N	\N	0	1	2014-07-12 01:00:51	2014-07-12 01:00:51	197	wordcount.py
356	23	4786ad9344ccdd85469d4945	pending	javascript	phone-number	var PhoneNumber = function(input){\n  this.input = input;\n\n  this.number = function(){\n    var clean_input = input.replace(/\\D/g, "");\n    \n    if (clean_input.length == 11 && clean_input.charAt(0) === '1'){\n      return clean_input.slice(1);\n    }\n    else if (clean_input.length == 10){\n      return clean_input;\n    }\n    else {\n      return "0000000000";\n    }\n  };\n\n  this.areaCode = function(){\n    var area = input.substring(0,3);\n    return area;\n  };\n\n  this.toString = function(){\n    return "(" + this.areaCode(input) + ")" +  " " + input.substring(3,6) + "-" + input.substring(6,10);\n  };\n};\n\nmodule.exports = PhoneNumber;	\N	\N	0	1	2014-08-27 19:31:43	2014-08-27 19:31:43	198	phone-number.js
357	23	da2fc03c2486252e6ec6e2af	pending	scala	bob	class Bob {\n  def hey(s:String):String = {\n    if (s.trim.isEmpty) {\n      "Fine. Be that way!"\n    } else {\n      val isShouting = s.forall(c => !c.isLetter || Character.isUpperCase(c)) && s.exists(_.isLetter)\n      if (isShouting) {\n        "Woah, chill out!"\n      } else {\n        val isQuestion = s.endsWith("?")\n        if (isQuestion) {\n          "Sure."\n        } else {\n          "Whatever."\n        }\n      }\n    }\n  }\n}	\N	\N	0	1	2014-09-28 06:54:58	2014-09-28 06:54:58	199	bob.scala
358	23	7db3d24dbd046201a40ee934	pending	ruby	bob	class Word\n  attr_reader :message\n  def initialize(message)\n    @message = message\n  end\n  \n  def silence?\n    message.strip == ""\n  end\n  \n  def shouting?\n    message == message.upcase\n  end\n\n  def question?\n    message.end_with???\n  end\nend\n\nclass Bob\n  def initialize(response)\n  end\n  def hey(message)\n    word = Word.new message\n    \n    if word.silence?\n      response[:silent]\n    elsif word.shouting?\n      response[:shouting]\n    elsif word.question?\n      response[:question]\n    else\n      response[:default]\n    end\n  end\n  \n  private\n  \n  def response\n    {\n      silent: 'Fine. Be that way!',\n      shouting: "Woah, chill out!",\n      question: 'Sure.',\n      default: "Whatever."\n    }\n  end\nend	\N	\N	0	1	2014-10-11 21:56:17	2014-10-11 21:56:17	200	bob.rb
360	23	f42d9087c1bb72346b3c01fd	pending	ruby	scrabble-score	class Scrabble\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from word\n  end\n\n  def score\n    letters.map { |letter| score_for letter }.inject(0) { |sum, score| sum + score }\n  end\n\n  def self.score(word)\n    new(word).score\n  end\n\n  private\n\n  def letters_from(word)\n    word.to_s.downcase.gsub(/[^a-z]/, '').chars\n  end\n\n  def score_for(letter)\n    _, score = scores.detect { |(letters, _)| letters.include? letter }\n    score\n  end\n\n  def scores\n    [\n      ['aeilnorstu', 1],\n      ['dg',         2],\n      ['bcmp',       3],\n      ['fhvwy',      4],\n      ['k',          5],\n      ['jx',         8],\n      ['qz',        10]\n    ]\n  end\nend	\N	\N	0	1	2014-08-29 08:14:25	2014-08-29 08:14:25	202	scrabble-score.rb
361	23	acaca85b15e06d7f9d972f18	pending	python	ocr-numbers	def number(grid):\n    ROW0 = {' _ ': set(['0', '2', '3', '5', '6', '7', '8', '9']),\n            '   ': set(['1', '4'])}\n    ROW1 = {'  |': set(['1', '7']),\n            ' _|': set(['2', '3']),\n            '|_|': set(['4', '8', '9']),\n            '|_ ': set(['5', '6']),\n            '| |': set(['0'])}\n    ROW2 = {'  |': set(['1', '4', '7']),\n            ' _|': set(['3', '5', '9']),\n            '|_|': set(['0', '6', '8']),\n            '|_ ': set(['2'])}\n    if not grid or len(grid) < 4 or\\\n       any(len(row) != len(grid[0]) for row in grid):\n        raise ValueError('Invalid grid')\n    number = ROW0.get(grid[0], set())\n    number &= ROW1.get(grid[1], set())\n    number &= ROW2.get(grid[2], set())\n    if len(number) == 0 or grid[3] != '   ':\n        return '?'\n    return number.pop()\n\n\ndef grid(n):\n    grids = {'0': [" _ ", "| |", "|_|", "   "],\n             '1': ["   ", "  |", "  |", "   "]}\n    if n not in grids:\n        raise ValueError('Invalid number')\n    return grids[n]	\N	\N	0	1	2014-08-19 05:49:36	2014-08-19 05:49:36	203	ocr.py
362	23	e6df7330aa1f4a28160d63f2	pending	haskell	largest-series-product	module Series (digits, slices, largestProduct) where\n\nimport Data.Char (digitToInt)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\nslices :: Int -> String -> [[Int]]\nslices n cs = aux n (digits cs)\n    where aux n xs | length xs <= n = [xs]\n                   | otherwise      = take n xs : aux n (tail xs)\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n cs \n    | length cs < n = 1\n    | otherwise     = maximum [product xs | xs <- slices n cs]	\N	\N	0	1	2014-08-10 06:40:36	2014-08-10 06:40:36	204	largest-series-product.hs
363	23	8981602d4bda089de382298b	superseded	javascript	etl	function transformer(old_schema) {\n  return function reducer(new_schema, points) {\n    var words = old_schema[points];\n\n    words.forEach(function value_into_new_schema(word) {\n      new_schema[word.toLowerCase()] = parseInt(points, 10);\n    });\n\n    return new_schema;\n  };\n}\n\nfunction transform(old_schema) {\n  return Object.keys(old_schema).reduce(transformer(old_schema), {});\n}\n\nif (module) {\n  module.exports = transform;\n}	\N	\N	0	1	2014-07-18 06:31:55	2014-07-18 06:31:55	205	etl.js
364	23	7772cf40dca95e7179608944	superseded	javascript	etl	if (module) {\n  module.exports = transform;\n}\n\nfunction transform(old_schema) {\n  return Object.keys(old_schema).reduce(transformer(old_schema), {});\n}\n\nfunction transformer(old_schema) {\n  return function(new_schema, point_value) {\n    return old_schema[point_value].reduce(function(_, word){\n      new_schema[word.toLowerCase()] = int(point_value);\n      return new_schema;\n    }, new_schema);\n  };\n}\n\nfunction int(a_string) {\n  return parseInt(a_string, 10);\n}	\N	\N	0	2	2014-08-16 07:25:35	2014-08-16 07:25:35	205	etl.js
365	23	9abf3011c03abfa154a04212	superseded	javascript	etl	if (module) {\n  module.exports = transform;\n}\n\nfunction transform(old_schema) {\n  return Object.keys(old_schema).reduce(transformer(old_schema), {});\n}\nfunction transformer(old_schema) {\n  return function(new_schema, point_value) {\n    var points = int(point_value);\n    var keys = old_schema[points];\n    function insert_points_into_schema(schema, word) {\n      schema[word.toLowerCase()] = points;\n      return schema;\n    }\n    return keys.reduce(insert_points_into_schema, new_schema);\n  };\n}\n\nfunction int(a_string) {\n  return parseInt(a_string, 10);\n}	\N	\N	0	3	2014-09-18 05:36:01	2014-09-18 05:36:01	205	etl.js
366	23	35b5e0b17a08b13f7b447939	pending	javascript	etl	if (module) {\n  module.exports = transform_schema;\n}\n\nfunction transform_schema(old_schema) {\n  return Object.keys(old_schema).reduce(create_schema_transformer(old_schema), {});\n}\n\nfunction create_schema_transformer(old_schema) {\n  return function(new_schema, point_value) {\n    point_value = Number(point_value);\n    function insert_points_into_schema(schema, word) {\n      schema[word.toLowerCase()] = point_value;\n      return schema;\n    }\n    return old_schema[point_value].reduce(insert_points_into_schema, new_schema);\n  };\n}	\N	\N	0	4	2014-10-11 16:57:31	2014-10-11 16:57:31	205	etl.js
367	23	483b3dd515f0ba5965886361	pending	python	rna-transcription	DNA_MAP = {\n        'G': 'C',\n        'C': 'G',\n        'T': 'A',\n        'A': 'U',\n}\n\ndef to_rna(dna):\n    rna = ''\n    for n in dna:\n        rna += DNA_MAP[n]\n    return rna	\N	\N	0	1	2014-07-24 07:08:10	2014-07-24 07:08:10	206	dna.py
368	23	ec6ec6cae631002580a1223c	pending	ruby	wordy	class WordProblem\r\n\r\n\tdef initialize(question)\r\n\t\t@question = question\r\n\tend\r\n\t\r\n\tdef calculate(md)\r\n\t\tif \t\t/plus/.match(md[2]) then\r\n\t\t\t\tresult = md[1].to_f + md[3].to_f\r\n\t\telsif \t/minus/.match(md[2]) then\r\n\t\t\t\tresult = md[1].to_f - md[3].to_f\r\n\t\telsif \t/divided by/.match(md[2]) then\r\n\t\t\t\tresult = md[1].to_f / md[3].to_f\r\n\t\telsif \t/multiplied by/.match(md[2]) then\r\n\t\t\t\tresult = md[1].to_f * md[3].to_f\r\n\t\tend \r\n\t\tresult\r\n\tend\r\n\t\r\n\tdef calculate_on(md, r)\r\n\t\tif \t\t/plus/.match(md[2]) then\r\n\t\t\t\tresult = r + md[3].to_f\r\n\t\telsif \t/minus/.match(md[2]) then\r\n\t\t\t\tresult = r - md[3].to_f\r\n\t\telsif \t/divided by/.match(md[2]) then\r\n\t\t\t\tresult = r / md[3].to_f\r\n\t\telsif \t/multiplied by/.match(md[2]) then\r\n\t\t\t\tresult = r * md[3].to_f\r\n\t\telse \traise ArgumentError.new('Too advanced!')\r\n\t\tend \r\n\t\tresult\r\n\tend\r\n\r\n\tdef answer \r\n\t\tif /^What is ([-]*\\d+) ([^\\d-]+)([-]*\\d+)([^\\d-]+[-]*\\d+)*\\?$/.match(@question)\r\n\t\t\tmd = /^What is ([-]*\\d+) ([^\\d-]+)([-]*\\d+)[ ]*(.*)\\?$/.match(@question)\t\t\t\r\n\t\t\tresult = calculate(md)\r\n\t\t\t\r\n\t\t\tif md[4] != nil\r\n\t\t\t\tif \tmd_new = /()([^\\d-]+)([-]*\\d+)[ ]*(.*)$/.match(md[4])\r\n\t\t\t\t\tresult = calculate_on(md_new, result)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse raise ArgumentError.new('This is not a possible word problem.')\r\n\t\tend\r\n\t\tresult\r\n\tend\r\n\t\r\nend	\N	\N	0	1	2014-10-12 13:56:32	2014-10-12 13:56:32	207	word_problem.rb
369	23	4c25e715b47871d3ca61058a	pending	javascript	rna-transcription	module.exports = function(dna) {\n  return dna.replace(/T/g, 'U');\n}	\N	\N	0	1	2014-07-19 09:21:23	2014-07-19 09:21:23	208	rna-transcription.js
370	23	f025e366c9d312cbbb787b61	superseded	coffeescript	anagram	class Anagram\r\n\t\r\n\tconstructor: (word) ->\r\n\t\t@_word = word.toLowerCase()\r\n\t\t\r\n\tmatch: (list) ->\r\n\t\tsublist = []\r\n\t\tsWord \t= sortString @_word\r\n\t\tfor word in list\r\n\t\t\tword = word.toLowerCase()\r\n\t\t\tsublist.push word if @_word isnt word and sWord is sortString word\r\n\t\tsublist\r\n\t\t\t\r\n\tsortString = (str) ->\r\n\t\tstr.split("").sort().join("")\r\n\t\r\nmodule.exports = Anagram	\N	\N	0	1	2014-07-13 20:29:18	2014-07-13 20:29:18	209	anagram.coffee
371	23	f444803fdc5f5330bf09acb3	pending	coffeescript	anagram	class Anagram\r\n\r\n\tconstructor: (word) ->\r\n\t\t@_word \t= word.toLowerCase()\r\n\t\t@_sWord = sortString @_word\r\n\r\n\tmatch: (list) ->\r\n\t\tlist = list.map (str) -> str.toLowerCase()\r\n\t\tstr for str in list when isAnagram.call @, str\r\n\t\t\r\n\tsortString = (str) ->\r\n\t\tstr.split("").sort().join("")\r\n\t\t\t\r\n\tisAnagram = (str) ->\r\n\t\t@_word isnt str and @_sWord is sortString str \r\n\r\nmodule.exports = Anagram	\N	\N	0	2	2014-07-14 17:20:52	2014-07-14 17:20:52	209	anagram.coffee
372	23	efe1f9e4ddbe86acf55069d5	pending	perl5	clock	package Clock;\r\nuse strict;\r\nuse warnings;\r\n\r\nuse overload '+'  => \\&clock_add,\r\n             'eq' => \\&clock_equal,\r\n             '-'  => \\&clock_subtract;\r\n\r\nsub clockstring { #returns a string like "hh:mm" from an array reference like \\[hh,mm]\r\n        my $clockref = \\@{shift @_};\r\n        no warnings 'uninitialized'; #We know we'll be missing a minute variable occasionally\r\n        return sprintf "%02d:%02d", ${$clockref}[0], ${$clockref}[1];\r\n}\r\n#returns an array [hh,mm] from a string like "hh:mm"\r\nsub clockarray { return split(':',$_[0]); }\r\n\r\nsub clockcompute { #returns an array like [hh,mm] from an array like [hh,mm,calc(ie. -60:+30)]\r\n        my ($h,$m,$calc) = (@_);\r\n        my $totalminutes = ($h * 60) + $m;\r\n        #we know we'll go forward or back a day, this is to compensate\r\n        if (($totalminutes + ($calc)) < 0) { $totalminutes += 1440; }\r\n        elsif (($totalminutes + ($calc)) >= 1440) { $totalminutes -= 1440; }\r\n        $totalminutes += $calc; #apply the addition/subtraction\r\n        return (int ($totalminutes / 60), ($totalminutes % 60));\r\n}\r\n          \r\nsub new {\r\n        my $class = shift;\r\n        my $clockref = shift;\r\n        my $self = { clock => clockstring($clockref) };\r\n        return (bless $self, $class);\r\n}\r\n\r\nsub clock_add {\r\n        my $self = shift;\r\n        my $minutes = shift;\r\n        my @clockarray = clockcompute( clockarray($self->{clock}) , $minutes);\r\n        return clockstring(\\@clockarray);\r\n};\r\n\r\nsub clock_equal {\r\n        if (ref($_[1]) ne "Clock" ) { #Make sure we're comparing the correct variable types\r\n            if (( "$_[0]->{clock}" ne "$_[1]")) { return 0; }\r\n        }\r\n        elsif ( "$_[0]->{clock}" ne "$_[1]->{clock}") { return 0; }\r\n        return 1;\r\n};\r\n\r\nsub clock_subtract {\r\n        my $self = shift;\r\n        my $minutes = shift;\r\n        my @clockarray = clockcompute( clockarray($self->{clock}) , $minutes * -1);\r\n        return clockstring(\\@clockarray);\r\n};\r\n1;        \r	\N	\N	0	1	2014-10-02 19:01:35	2014-10-02 19:01:35	210	Clock.pm
373	23	d52da0245b981db04c46957d	superseded	python	leap	def is_leap_year(y):\n    if (0 == (y%4)):\n        if (0 == (y%100)):\n            if (0 == (y%400)):\n                return True\n            return False\n        return True\n    return False\n\n                \n            	\N	\N	0	1	2014-07-28 17:06:31	2014-07-28 17:06:31	211	year.py
374	23	1a145ddf4c6b3f0d1b6ff000	pending	python	leap	// word_count.py\ndef word_count(s):\n\td = {}\n\twords = s.split()\n\tfor w in words:\n\t\tif w in d.keys():\n\t\t\td[w] = 1\n\t\telse:\n\t\t\td[w] += 1\n\treturn d	\N	\N	0	2	2014-09-07 15:58:52	2014-09-07 15:58:52	211	word-count.py
375	23	d1a3c80b5a7250f22e0cf576	pending	swift	bob	import Foundation\n\nclass Bob {\n    class func hey(input: String) -> String {\n        if (isMeaningless(input)) {\n            return "Fine, be that way."\n        } else if (isShouting(input)) {\n            return "Woah, chill out!"\n        } else if (isQuestion(input)) {\n            return "Sure."\n        }\n        \n        return "Whatever."\n    }\n    \n    private class func isMeaningless(input: String) -> Bool {\n        let whitespaceCharacters = NSCharacterSet.whitespaceAndNewlineCharacterSet()\n        let cleanInput = input.stringByTrimmingCharactersInSet(whitespaceCharacters)\n        \n        return cleanInput.isEmpty\n    }\n    \n    private class func isShouting(input: String) -> Bool {\n        let uppercase = input.uppercaseStringWithLocale(NSLocale.currentLocale())\n        let lowercase = input.lowercaseStringWithLocale(NSLocale.currentLocale())\n        \n        return (uppercase == lowercase) ? false : (uppercase == input)\n    }\n    \n    private class func isQuestion(input: String) -> Bool {\n        let whitespaceCharacters = NSCharacterSet.whitespaceAndNewlineCharacterSet()\n        let cleanInput = input.stringByTrimmingCharactersInSet(whitespaceCharacters)\n        \n        return cleanInput.hasSuffix("?")\n    }\n}	\N	\N	0	1	2014-07-27 18:22:25	2014-07-27 18:22:25	212	Bob.swift
376	23	e8e2432febb6cb17c1bbc5d5	pending	elixir	grains	defmodule Grains do\n  use Bitwise\n  def square(x), do: (1 <<< (x - 1))\n  def total(), do: Enum.reduce(1..64, 0, fn(x, acc) -> acc + square(x) end)\nend	\N	\N	0	1	2014-08-24 17:29:36	2014-08-24 17:29:36	213	grains.exs
377	23	f8ca4208ba12614de9bb90a3	superseded	haskell	pascals-triangle	module Triangle (row, triangle) where\n\n\nimport Data.List\nimport Control.Monad\n\n\ntriangle :: (Integral a) => [[a]]\ntriangle = [1] : (map ((1:) . (++[1])) $ map (ap (zipWith (+)) tail) triangle)\n\n\n-- | List of factorials [1,1,2,6,24]\nfactorials :: (Integral a) => [a]\nfactorials = unfoldr (\\(p,i) -> Just $ (p, (p * i, i+1))) (1,1)\n\n\nrow ::  Integral a => Int -> [a]\nrow n =\n  let mFacts     = take n factorials\n      nSubMFacts = reverse mFacts\n      nFact      = head nSubMFacts\n  in take n $ zipWith (\\mf ndf -> nFact `quot` (mf * ndf)) mFacts nSubMFacts	\N	\N	0	1	2014-07-04 03:17:30	2014-07-04 03:17:30	214	Triangle.hs
378	23	e5c5ddfa4e71a6dc240c5a7a	superseded	haskell	pascals-triangle	module Triangle (row, triangle) where\n\n\nimport Control.Monad\n\n\ntriangle :: (Integral a) => [[a]]\ntriangle = [1] : (map ((1:) . (++[1])) $ map (ap (zipWith (+)) tail) triangle)\n\n\nrow ::  Integral a => a -> [a]\nrow n' =\n  -- we use those fact that (n; m) = (n; m - 1) * (n - m + 1) / m\n  -- for calculate binomial coefficients step by step\n  let n = n' - 1\n      halfRow = scanl (\\c m -> (c * (n - m + 1)) `quot` m) 1 [1..(n `quot` 2)]\n      fullRow = halfRow ++ (reverse $ (if even n then init else id) halfRow)\n  in fullRow	\N	\N	0	2	2014-08-28 03:50:02	2014-08-28 03:50:02	214	Triangle.hs
379	23	5b3dae68ae14345cd2979121	pending	haskell	pascals-triangle	module Triangle (row, triangle) where\n\n\nimport Control.Monad\n\n\ntriangle :: (Integral a) => [[a]]\ntriangle = [1] : (map ((1:) . (++[1])) $ map (ap (zipWith (+)) tail) triangle)\n\n\nrow ::  Integral a => a -> [a]\nrow n' = fullRow\n  where\n  -- we use those fact that (n; m) = (n; m - 1) * (n - m + 1) / m\n  -- for calculate binomial coefficients step by step\n    n = n' - 1\n    halfRow = scanl (\\c m -> (c * (n - m + 1)) `quot` m) 1 [1..(n `quot` 2)]\n    fullRow = halfRow ++ (reverse $ (if even n then init else id) halfRow)	\N	\N	0	3	2014-09-05 12:20:30	2014-09-05 12:20:30	214	Triangle.hs
380	23	75459225a26affaa1576dbe9	pending	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :refer (join)]))\n\n(def dna-to-rna {\n  \\C \\C\n  \\G \\G\n  \\A \\A\n  \\T \\U\n})\n\n(defn- valid-dna? [nucleotide]\n  (contains? dna-to-rna nucleotide))\n\n(defn- transcribe [nucleotide]\n  (assert (valid-dna? nucleotide))\n  (dna-to-rna nucleotide))\n\n(defn to-rna [strand]\n  (join "" (map transcribe strand)))	\N	\N	0	1	2014-11-14 02:23:38	2014-11-14 02:23:38	215	dna.clj
381	23	6f7955891794d3f123f65be0	pending	haskell	nth-prime	module Prime (nth) where\n\nprimes :: [Int]\nprimes = 2:3:filter isPrime candidates\n  where\n    candidates = [6*k + i | k <- [1..], i <- [-1, 1]]\n    isPrime p = all (\\n -> p `mod` n /= 0) $ takeWhile (\\n -> n*n <= p) primes\n\nnth :: Int -> Int\nnth i = primes !! (i - 1)	\N	\N	0	1	2014-08-03 09:30:53	2014-08-03 09:30:53	216	nth-prime.hs
382	23	b67f5e78b5cc39487ac804b8	superseded	javascript	bob	var Bob = function() {\n  this.hey = function(input) {\n    var hasOnlyNumbers = function(input) {\n      return /^[\\d\\s,?]+$/.test(input);\n    }\n\n    var isShouting = function(input) {\n      return input === input.toUpperCase();\n    }\n\n    var isAskingQuestion = function(input) {\n      return input[input.length-1] === '?';\n    }\n\n    var isSilent = function(input) {\n      return input.length === 0 || /^\\s*$/.test(input);\n    }\n\n    if(isSilent(input)) return "Fine. Be that way!";\n    if(hasOnlyNumbers(input) && isAskingQuestion(input)) return "Sure.";\n    if(hasOnlyNumbers(input)) return "Whatever."\n    if(isShouting(input)) return "Whoa, chill out!";\n    if(isAskingQuestion(input)) return "Sure.";\n    return "Whatever.";\n  }\n}\n\nmodule.exports = Bob;	\N	\N	0	1	2014-07-03 07:40:07	2014-07-03 07:40:07	217	bob.js
383	23	eb996485dd033f55f4a3569d	pending	javascript	bob	var Bob = function() {\n  this.hey = function(input) {\n\n    var isShouting = function(input) {\n      return input === (input).toUpperCase() && /[A-Z]/.test(input);;\n    }\n\n    var isAskingQuestion = function(input) {\n      return input[input.length-1] === '?';\n    }\n\n    var isSilent = function(input) {\n      return input.length === 0 || /^\\s*$/.test(input);\n    }\n\n    if(isShouting(input)) return "Whoa, chill out!";\n    if(isAskingQuestion(input)) return "Sure.";\n    if(isSilent(input)) return "Fine. Be that way!";\n    return "Whatever.";\n  }\n}\n\nmodule.exports = Bob;	\N	\N	0	2	2014-08-29 17:14:31	2014-08-29 17:14:31	217	bob.js
384	23	be456d1e543f7fb1ed117982	pending	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc sortedString(word string) string {\n\tletters := strings.Split(word, "")\n\tsort.Strings(letters)\n\treturn strings.Join(letters, "")\n}\n\nfunc Detect(subject string, candidates []string) []string {\n\tsubject = strings.ToLower(subject)\n\tsorted := sortedString(subject)\n\tvar anagrams []string\n\tfor _, word := range candidates {\n\t\tword = strings.ToLower(word)\n\t\tif word != subject && sortedString(word) == sorted {\n\t\t\tanagrams = append(anagrams, word)\n\t\t}\n\t}\n\treturn anagrams\n}	\N	\N	0	1	2014-07-18 03:28:38	2014-07-18 03:28:38	218	anagram.go
385	23	2ab1c8dbfa4b7888084d22cc	superseded	ruby	rna-transcription	class Complement\n  RNA_HASH = {"G" => "C", "C" => "G", "T" => "A", "A" => "U"} \n  DNA_HASH = {"C" => "G", "G" => "C", "A" => "T", "U" => "A"} \n\n  def self.of_dna(a)\n    rna = ""\n\n    a.length.times do |i|\n      rna += RNA_HASH[a[i]]\n    end\n\n    rna\n  end\n\n  def self.of_rna(a)\n    dna= ""\n\n    a.length.times do |i|\n      dna += DNA_HASH[a[i]]\n    end\n\n    dna\n  end\nend	\N	\N	0	1	2014-08-25 13:11:28	2014-08-25 13:11:28	219	complement.rb
386	23	1d01106752554fab973ecd7f	superseded	ruby	rna-transcription	class Complement\n  RNA_HASH = {"G" => "C", "C" => "G", "T" => "A", "A" => "U"} \n  DNA_HASH = RNA_HASH.invert\n\n  def self.of_dna(a)\n    rna = ""\n\n    a.length.times do |i|\n      rna += RNA_HASH[a[i]]\n    end\n\n    rna\n  end\n\n  def self.of_rna(a)\n    dna= ""\n\n    a.length.times do |i|\n      dna += DNA_HASH[a[i]]\n    end\n\n    dna\n  end\nend	\N	\N	0	2	2014-08-29 11:13:13	2014-08-29 11:13:13	219	complement.rb
387	23	c273d56013b45835f7697c59	pending	ruby	rna-transcription	class Complement\n  class << self\n    DNA_TO_RNA = {"G" => "C", "C" => "G", "T" => "A", "A" => "U"}  \n\n    def of_dna(dna)\n      calculate_complement(dna, DNA_TO_RNA)\n    end\n\n    def of_rna(rna)\n      calculate_complement(rna, DNA_TO_RNA.invert)\n    end\n\n    private\n\n    def calculate_complement(s, k)\n      s.split("").map {|l| k[l]}.join\n    end\n  end\nend	\N	\N	0	3	2014-10-29 10:14:55	2014-10-29 10:14:55	219	complement.rb
388	23	56a2a49b64e68e22373223e1	superseded	elixir	space-age	defmodule SpaceAge do\n\n  def age_on(planet, seconds) do\n    seconds / case planet do\n      :earth   -> 1\n      :mercury -> 0.2408467\n      :venus   -> 0.61519726\n      :mars    -> 1.8808158\n      :jupiter -> 11.862615\n      :saturn  -> 29.447498\n      :uranus  -> 84.016846\n      :neptune -> 164.79132\n    end * earth_year\n  end\n\n  defp earth_year do\n    31557600\n  end\n\nend	\N	\N	0	1	2014-07-13 04:23:06	2014-07-13 04:23:06	220	space-age.exs
389	23	2a643b8a685ef4495e1daa72	pending	elixir	space-age	defmodule SpaceAge do\n\n  def age_on(planet, seconds) do\n    seconds / (earth_years(planet) * seconds_in_earth_year)\n  end\n\n  defp earth_years(planet) do\n    case planet do\n      :earth   -> 1\n      :mercury -> 0.2408467\n      :venus   -> 0.61519726\n      :mars    -> 1.8808158\n      :jupiter -> 11.862615\n      :saturn  -> 29.447498\n      :uranus  -> 84.016846\n      :neptune -> 164.79132\n    end\n  end\n\n  defp seconds_in_earth_year do\n    31557600\n  end\n\nend	\N	\N	0	2	2014-08-25 17:24:47	2014-08-25 17:24:47	220	space-age.exs
390	23	5c90cccadd77d59e06cf6309	pending	ruby	grade-school	class School\n  attr_accessor :roster\n\n  def initialize\n    self.roster = Hash.new { |h,k| h[k] = [] }\n  end\n\n  def add name, grade\n    klass = roster[grade]\n\n    idx = klass.index { |n| n > name } || -1\n\n    klass.insert idx, name\n  end\n\n  def grade n\n    roster[n]\n  end\n\n  def to_hash\n    Hash[roster.sort]\n  end\nend	\N	\N	0	1	2014-07-14 07:04:45	2014-07-14 07:04:45	221	school.rb
391	17	a39f4a2efa7bac284f682a7c	pending	ruby	pythagorean-triplet	class Triplet\n  class << self\n    def where(options = {})\n      options.each_with_object(TripletGenerator.new) do |(key, value), gen|\n        gen.send(key, value)\n      end\n    end\n  end\n\n  def initialize(*factors)\n    @a, @b, @c = factors.sort\n  end\n\n  def sum\n    factors.inject(:+)\n  end\n\n  def product\n    factors.inject(:*)\n  end\n\n  def pythagorean?\n    a ** 2 + b ** 2 == c ** 2\n  end\n\n  private\n\n  attr_reader :a, :b, :c\n\n  def factors\n    [a, b, c]\n  end\n\n  class TripletGenerator\n    include Enumerable\n\n    def max_factor(f)\n      @max = f\n    end\n\n    def min_factor(f)\n      @min = f\n    end\n\n    def sum(f)\n      @sum = f\n    end\n\n    def each(&block)\n      to_a.each &block\n    end\n\n    private\n\n    def min\n      @min || 1\n    end\n\n    def max\n      @max\n    end\n\n    def to_a\n      raise ArgumentError, "no upper bound" unless max\n      squares.each_with_object([]) do |(b, bs), triplets|\n        squares.take_while {|_, as| as < bs }.each do |a, as|\n          if c = inverted_squares[as + bs]\n            triplets << Triplet.new(a, b, c)\n          end\n        end\n      end.select(&filter_block)\n    end\n    alias_method :to_ary, :to_a\n\n    def squares\n      @squares ||= Hash[range.map {|x| [x, x**2] }]\n    end\n\n    def inverted_squares\n      @inverted_squares ||= Hash[squares.map(&:reverse)]\n    end\n\n    def range\n      @range ||= (min..max)\n    end\n\n    def filter_block\n      @sum ? ->(x){ x.sum == @sum } : ->(x){ x }\n    end\n  end\nend	\N	\N	0	1	2014-11-04 11:02:44	2014-11-04 11:02:44	222	triplet.rb
392	17	8f345b7feb096274cd5bb5b5	pending	ruby	gigasecond	require 'date'\n\nclass Gigasecond\n\n  def initialize(input)\n    @date = input\n  end\n\n  def date\n    @date + time_to_add\n  end\n\n  def time_to_add\n    gigasecond = 10 ** 9\n\n    second = 1\n    minute = second * 60\n    hour = minute * 60\n    day = hour * 24\n    month = day * 30\n    year = (month * 12) + (day*5)\n\n    times = [[year, 365], [month, 30], [day, 1]]\n\n    x = 0\n    days_to_add = 0\n\n    while gigasecond > day\n      if gigasecond >= times[x][0]\n        gigasecond -= times[x][0]\n        days_to_add += times[x][1]\n      else\n        x += 1\n      end\n    end\n    days_to_add\n  end\n\nend	\N	\N	0	1	2014-11-18 21:47:07	2014-11-18 21:47:07	223	gigasecond.rb
393	17	edab185977a6d05cb8f986cb	pending	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\n\r\n    public static class Year\r\n    {\r\n        public static Boolean IsLeap(int year)\r\n        {\r\n       \r\n            return (year % 4 == 0 // a leap year is divisible by 4\n                  && \n                    (year % 100 != 0 || //but not 100\n                    year % 400 == 0));  //unless it is also divisible by 400                       \r\n        }\r\n    }\r\n\r	\N	\N	0	1	2014-11-05 10:55:45	2014-11-05 10:55:45	224	Year.cs
394	17	a929fd802bf10f7dddb89e33	pending	haskell	bob	module Bob where\n\nimport Data.Char (isSpace, toUpper)\n\nresponseFor :: String -> String\nresponseFor msg\n  | isSilence   = "Fine. Be that way."\n  | isShouting  = "Woah, chill out!"\n  | isQuestion  = "Sure."\n  | otherwise   = "Whatever."\n  where  isSilence   = null $ filter (not . isSpace) msg\n         isShouting  = map toUpper msg == msg\n         isQuestion  = last msg == '?'	\N	\N	0	1	2014-11-05 20:47:02	2014-11-05 20:47:02	225	bob.hs
396	20	f6c6eabc85b38215d07ebe68	done	ruby	allergies	class Allergies\n  def initialize(num)\n    @num = num\n  end\n\n  def allergic_to?(allergen)\n    binary_string = num_to_binary(@num)\n    return true if binary_string[-1] == "1" && allergen == "eggs"\n    return true if binary_string[-2] == "1" && allergen == "peanuts"\n    return true if binary_string[-3] == "1" && allergen == "shellfish"\n    return true if binary_string[-4] == "1" && allergen == "strawberries"\n    return true if binary_string[-5] == "1" && allergen == "tomatoes"\n    return true if binary_string[-6] == "1" && allergen == "chocolate"\n    return true if binary_string[-7] == "1" && allergen == "pollen"\n    return true if binary_string[-8] == "1" && allergen == "cats"\n  end\n\n  def list\n    binary_string = num_to_binary(@num)\n    allergen_list = []\n    allergen_list << "eggs"          if binary_string[-1] == "1"\n    allergen_list << "peanuts"       if binary_string[-2] == "1"\n    allergen_list << "shellfish"     if binary_string[-3] == "1"\n    allergen_list << "strawberries"  if binary_string[-4] == "1"\n    allergen_list << "tomatoes"      if binary_string[-5] == "1"\n    allergen_list << "chocolate"     if binary_string[-6] == "1"\n    allergen_list << "pollen"        if binary_string[-7] == "1"\n    allergen_list << "cats"          if binary_string[-8] == "1"\n    return allergen_list\n  end\n\n  def num_to_binary(num)\n    @num.to_s(2).rjust(8, "0")\n  end\nend	2014-11-28 06:37:18.896247	\N	0	1	2014-11-27 00:18:25	2014-11-27 00:18:25	227	allergies.rb
397	20	f020769684c66f941e203664	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	2014-11-26 20:38:38	2014-11-26 20:38:38	228	dna.clj
398	20	ff79a03349752f1d1e850eec	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	2014-11-27 00:32:13	2014-11-27 00:32:13	228	dna.clj
399	20	7ac8795b35d044ee56044cd2	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	2014-11-28 06:37:18.95882	\N	0	3	2014-11-27 09:41:41	2014-11-27 09:41:41	228	dna.clj
400	20	40fcd785510a7230e709aa35	done	haskell	sublist	module Sublist where\nimport Data.List\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Eq, Show)\n\nsublist :: (Eq a) => [a] -> [a] -> Sublist\nsublist x y \n  | xiny && yinx = Equal\n  | xiny = Sublist\n  | yinx = Superlist\n  | otherwise = Unequal\n  where xiny = x `isInfixOf` y\n        yinx = y `isInfixOf` x	2014-11-28 06:37:18.981944	\N	0	1	2014-11-26 02:03:32	2014-11-26 02:03:32	229	Sublist.hs
401	20	da9c01e566c92aa35ac095f3	done	javascript	pythagorean-triplet	var Triplet = function(a, b, c) {\r\n  this.members = function() { return [a, b, c]; };\r\n  this.sum = function() { return a + b + c; };\r\n  this.product = function() { return a * b * c; };\r\n  this.isPythagorean = function() {\r\n    return a*a + b*b == c*c;\r\n  };\r\n  this.print = function() {\r\n    return "a: " + a + ", b: " + b + ", c: " + c;\r\n  };\r\n};\r\n\r\nTriplet.where = function(options) {\r\n  var max = options.maxFactor || 425,\r\n      min = options.minFactor || 3,\r\n      sum = options.sum,\r\n      i, j, k, trip, triplets = [];\r\n\r\n  for(i = min; i < max - 1; i++)\r\n    for(j = i + 1; j < max; j++)\r\n      for(k = j + 1; k <= max; k++) {\r\n        trip = new Triplet(i, j, k);\r\n        if(trip.isPythagorean())\r\n          if(!sum || trip.sum() == sum)\r\n            triplets.push(trip);\r\n      }\r\n\r\n  return triplets;\r\n};\r\n\r\nmodule.exports = Triplet;\r\n\r\nfunction extraTests() {\r\n  it('gets the right answer', function() {\r\n    var triplets = Triplet.where({sum: 1000, minFactor: 200, maxFactor: 425 });\r\n    var products = triplets.sort().map( function (triplet) {\r\n      return triplet.product();\r\n    });\r\n    expect(products).toEqual([31875000]);\r\n  });\r\n\r\n  it('prints its member factors', function() {\r\n    expect((new Triplet(1,2,3)).print()).toEqual("a: 1, b: 2, c: 3");\r\n  });\r\n\r\n  it('returns its member factors', function() {\r\n    expect((new Triplet(5,6,7)).members()).toEqual([5,6,7]);\r\n  }); \r\n}	2014-11-26 17:08:37	\N	0	1	2014-11-26 03:05:40	2014-11-26 03:05:40	230	pythagorean-triplet.js
402	21	dfb6eb567d0e4fe1af2f646c	done	erlang	rna-transcription	-module(dna).\n\n-export([to_rna/1]).\n\nto_rna([$G | Tail]) ->\n    [$C ] ++ to_rna(Tail);\nto_rna([$C | Tail]) ->\n    [$G ] ++ to_rna(Tail);\nto_rna([$T | Tail]) ->\n    [$A ] ++ to_rna(Tail);\nto_rna([$A | Tail]) ->\n    [$U ] ++ to_rna(Tail);\nto_rna([]) ->\n    [].	2014-10-14 18:40:04	\N	0	1	2014-10-06 23:47:39	2014-10-06 23:47:39	231	dna.erl
403	36	68934bb184c86f4b3a39a57b	done	ruby	difference-of-squares	class Squares\n  attr_reader :num\n\n  def initialize(num)\n    @num = num\n  end\n\n  def square_of_sums\n    @square_of_sums ||= (1..num).inject(:+)**2\n  end\n\n  def sum_of_squares\n    @sum_of_squares ||= (1..num).map { |i| i**2 }.inject(:+)\n  end\n\n  def difference\n    square_of_sums - sum_of_squares\n  end\nend	2014-10-25 17:42:36	\N	0	1	2014-10-18 09:50:37	2014-10-18 09:50:37	232	squares.rb
404	30	adb0e184aac5b53f9a6aeb75	superseded	ruby	hamming	class Hamming \n  def self.compute(s1, s2)\n    iterations = s1.length < s2.length ? s1.length : s2.length\n\n    hd = 0\n    for i in 0...iterations\n      hd += 1 if s1[i] != s2[i]\n    end\n\n    hd\n  end\nend	\N	\N	0	1	2014-05-23 02:15:14	2014-05-23 02:15:14	233	hamming.rb
405	30	def806004e716d06d5f2a667	done	ruby	hamming	class Hamming \n  def self.compute(s1, s2)\n    iterations = [s1.length, s2.length].min\n\n    hd = 0\n    iterations.times do |i|\n      hd += 1 if s1[i] != s2[i]\n    end\n\n    hd\n  end\nend	2014-06-19 06:48:43	\N	0	2	2014-06-13 22:58:42	2014-06-13 22:58:42	233	hamming.rb
437	41	48696f1b8dec0b67797e8de1	pending	python	bob	class Bob(object):\n  def hey(self, question):\n    response = 'Fine. Be that way!'\n\n    if question and not question.isspace():\n      if question.isupper():\n        response = 'Woah, chill out!'\n      elif question.endswith('?'):\n        response = 'Sure.'\n      else:\n        response = 'Whatever.'\t\t\n \n    return response	\N	\N	0	1	2014-08-20 21:44:49	2014-08-20 21:44:49	249	bob.py
438	41	6fc8296a6e2d9277577bd13b	pending	python	word-count	import collections\nimport re\n\nclass Phrase(object):\n\tdef __init__(self, s):\n\t\tself._s = s\n\t\tself._wc  = None\n\n\tdef word_count(self):\n\t\t# Calculate wc only once.\n\t\tif not self._wc:\n\t\t\twords = re.findall("[a-z\\d]+", self._s.lower())\n\t\t\tself._wc = collections.Counter(words)\n\t\treturn self._wc	\N	\N	0	5	2014-10-02 14:31:05	2014-10-02 14:31:05	250	word-count.py
439	41	d84d3a31168ea11c2582955b	superseded	python	word-count	import re\n\nclass Phrase(object):\n\tdef __init__(self, s):\n\t\tself.s = s\n\n\tdef word_count(self):\n\t\twords = filter(None, re.split("[^a-z0-9]", self.s.lower()))\n\t\td = {}\n\t\tfor word in words:\n\t\t\tif word in d:\n\t\t\t\td[word] += 1\n\t\t\telse:\n\t\t\t\td[word] = 1\n\t\treturn d	\N	\N	0	1	2014-10-15 18:14:24	2014-10-15 18:14:24	250	word-count.py
406	30	ac1875a31999ca5b7785554f	done	clojure	beer-song	(ns beer\n  (:require [clojure.string :only (join capitalize) :as s]))\n\n(def template1 "%s of beer on the wall, %s of beer.\\n")\n(def template2-1 "Take %s down and pass it around, %s of beer on the wall.\\n")\n(def template2-2 "Go to the store and buy some more, 99 bottles of beer on the wall.\\n")\n\n(defn- one [n]\n  (if (< 1 n) "one" "it"))\n\n(defn- bottles [n]\n  (cond (= 0 n) "no more bottles"\n        (= 1 n) "1 bottle"\n        :else (format "%d bottles" n)))\n\n(defn verse [n]\n  (if (= n 0)\n    (format (str template1 template2-2) (s/capitalize (bottles n)) (bottles n))\n    (format (str template1 template2-1) (bottles n) (bottles n) (one n) (bottles (dec n)))))\n\n(defn sing\n  ([n]\n     (sing n 0))\n  ([m n]\n     (->> (range m (dec n) -1)\n          (map verse)\n          (s/join "\\n"))))	2014-09-13 22:19:06	\N	0	1	2014-09-13 14:04:34	2014-09-13 14:04:34	234	beer.clj
407	30	140140efbd372c1829b402e1	superseded	ruby	bob	module TeenagerRefinements\n  refine String do\n    def yelling?\n      self == self.upcase\n    end\n\n    def question?\n      self[-1] == '?'\n    end\n\n    def only_whitespace?\n      self.strip.empty?\n    end\n  end\nend\n\nusing TeenagerRefinements\n\nclass Bob\n\n  def hey(msg)\n    return 'Fine. Be that way!' if msg.only_whitespace?\n    return 'Woah, chill out!' if msg.yelling?\n    return 'Sure.' if msg.question?\n\n    'Whatever.'\n  end\nend	\N	\N	0	2	2014-06-12 00:55:00	2014-06-12 00:55:00	235	bob.rb
408	30	57efe4da1e4839aecccc90e3	done	ruby	bob	module TeenagerRefinements\n  refine String do\n    def yelling?\n      self == self.upcase\n    end\n\n    def question?\n      self.end_with? '?'\n    end\n\n    def silent_treatment?\n      self.strip.empty?\n    end\n  end\nend\n\nusing TeenagerRefinements\n\nclass Bob\n\n  def hey(msg)\n    return 'Fine. Be that way!' if msg.silent_treatment?\n    return 'Woah, chill out!' if msg.yelling?\n    return 'Sure.' if msg.question?\n\n    'Whatever.'\n  end\nend	2014-07-08 19:34:41	\N	0	3	2014-06-30 20:37:36	2014-06-30 20:37:36	235	bob.rb
409	30	5b8c6152d90623ffc15cc17d	superseded	ruby	bob	class String\n  def yelling?\n    self == self.upcase\n  end\n\n  def question?\n    self[-1] == '?'\n  end\nend\n\nclass Bob\n  def hey(msg)\n    return 'Fine. Be that way!' if msg.strip.empty?\n    return 'Woah, chill out!' if msg.yelling?\n    return 'Sure.' if msg.question?\n\n    'Whatever.'\n  end\nend	\N	\N	0	1	2014-08-22 17:52:04	2014-08-22 17:52:04	235	bob.rb
410	30	5f34c40030939c26c77377ed	done	javascript	word-count	function words(input) {\n  var hash = {};\n  var trimmedAtEnd = input.replace(/\\W*$/, '');\n  var words = trimmedAtEnd.toLowerCase().split(/\\W+/);\n  words.forEach(function(word) {\n    var existingCount = hash.hasOwnProperty(word) && hash[word];\n    hash[word] = (existingCount || 0) + 1;\n  });\n  return hash;\n}\n\nmodule.exports = words;	2014-07-13 02:34:03	\N	0	1	2014-07-01 18:32:52	2014-07-01 18:32:52	236	word-count.js
411	30	6f93cf9545ad1135ffd73b54	done	ruby	leap	class Year\n  def self.leap? year\n    return true if year % 400 == 0\n    return false if year % 100 == 0\n    return true if year % 4 == 0\n    false\n  end\nend	2014-07-31 20:26:04	\N	0	1	2014-07-21 17:57:02	2014-07-21 17:57:02	237	year.rb
412	35	6ebbefc227e5d24201fb62c2	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :strand\n\n  @@thymaine = "T"\n  @@uracil = "U"\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    strand.tr(@@thymaine, @@uracil)\n  end\n\nend 	\N	\N	0	3	2014-11-27 13:37:05	2014-11-27 13:37:05	238	rna-transcription.rb
413	35	e1354f3e5ca61e42cf762f97	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :dna_string\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n  end\n\n  def to_rna\n    self.dna_string.tr("T", "U")\n  end\n\nend 	\N	\N	0	1	2014-11-27 16:22:04	2014-11-27 16:22:04	238	rna-transcription.rb
414	35	f8f8089f5cf003844f0afa68	done	ruby	rna-transcription	class DNA\n\n  attr_reader :strand\n\n  THYMAINE = "T"\n  URACIL = "U"\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    strand.tr(THYMAINE, URACIL)\n  end\n\nend 	2014-11-28 06:37:19.335693	\N	0	4	2014-11-27 18:51:50	2014-11-27 18:51:50	238	rna-transcription.rb
415	35	d6fd30cdba0f2d5cfb31d1f1	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :dna_string\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n  end\n\n  def to_rna\n    dna_string.tr("T", "U")\n  end\n\nend 	\N	\N	0	2	2014-11-27 23:41:39	2014-11-27 23:41:39	238	rna-transcription.rb
416	35	afbb678f74d9f2009445aa2e	superseded	javascript	nucleotide-count	function DNA(strand) {\n  this.strand = strand.split('')\n}\n\nDNA.prototype = {\n  DNA:          ['A', 'T', 'C', 'G'],\n  validNucleos: ['A', 'T', 'C', 'G', 'U'],\n\n  validate: function(nucleo) {\n    if (!(this.validNucleos.indexOf(nucleo) > -1)) throw 'Invalid Nucleotide'\n  },\n  count: function(nucleo) {\n    this.validate(nucleo)\n    var count = 0\n    this.strand.forEach(function(letter) {\n      if (nucleo === letter) count++\n    })\n    debugger\n    return count\n  },\n  nucleotideCounts: function() {\n    result = {}\n    this.DNA.forEach(function(nucleo) {\n      result[nucleo] = this.count(nucleo)\n    }, this)\n    return result\n  }\n}\n\nmodule.exports = DNA	\N	\N	0	1	2014-11-27 00:53:29	2014-11-27 00:53:29	239	nucleotide-count.js
417	35	e85e1ae0964aca1c51912a8e	done	javascript	nucleotide-count	function DNA(strand) {\n  this.strand = strand.split('')\n  this.nucleotideCounts = this.countNucleotides()\n}\n\nDNA.prototype = {\n  DNA: ['A', 'T', 'C', 'G'],\n  validNucleos: ['A', 'T', 'C', 'G', 'U'],\n\n  validate: function(nucleo) {\n    if (!(this.validNucleos.indexOf(nucleo) > -1)) throw 'Invalid Nucleotide'\n  },\n  count: function(nucleo) {\n    this.validate(nucleo)\n    var count = 0\n    this.strand.forEach(function(letter) {\n      if (nucleo === letter) count++\n    })\n    return count\n  },\n  countNucleotides: function() {\n    result = {}\n    this.DNA.forEach(function(nucleo) {\n      result[nucleo] = this.count(nucleo)\n    }, this)\n    return result\n  }\n}\n\nmodule.exports = DNA	2014-11-28 06:37:19.394618	\N	0	2	2014-11-27 23:32:26	2014-11-27 23:32:26	239	nucleotide-count.js
418	35	11ec89c7929fd421491ecdf6	done	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [origin comparison]\n  (count\n    (filter (fn [[o c]] (not= o c))\n            (partition 2 (interleave origin comparison)))))	2014-11-28 06:37:19.420701	\N	0	1	2014-11-27 15:37:02	2014-11-27 15:37:02	240	point-mutations.clj
419	35	d2c963c88f921fed6c51ebf0	done	python	rna-transcription	def to_rna(dna_string):\n    return ''.join([{'G':'C','C':'G','T':'A','A':'U'}[x] for x in dna_string])	2014-11-28 06:37:19.460425	\N	0	1	2014-11-27 22:11:10	2014-11-27 22:11:10	241	dna.py
420	14	2d28883cb656a3ae4b609ee8	superseded	javascript	word-count	function words(text) {\n  function strip_punctuation(t) {\n    return t.replace(/[^a-z0-9 ]/g, '');\n  }\n  var analysis = { },\n    corpus = strip_punctuation(text.toLowerCase()).split(/\\s+/);\n\n  for (var i in corpus) {\n    var word = corpus[i];\n    if (!analysis[word]) {\n      analysis[word] = 0;\n    }\n    analysis[word]++;\n  }\n  return analysis;\n}\n\nif (module) {\n  module.exports = words;\n}	\N	\N	0	1	2014-07-01 04:23:47	2014-07-01 04:23:47	242	word-count.js
421	14	acc608cfc3456287c13af995	superseded	javascript	word-count	function words(text) {\n  function strip_punctuation(t) {\n    return t.replace(/[^a-z0-9 ]/g, '');\n  }\n  var analysis = { },\n    corpus = strip_punctuation(text.toLowerCase()).split(/\\s+/);\n\n  for (var i in corpus) {\n    if (corpus.hasOwnProperty(i)) {\n      var word = corpus[i];\n      if (!analysis[word]) {\n        analysis[word] = 0;\n      }\n      analysis[word]++;\n    }\n  }\n  return analysis;\n}\n\nif (module) {\n  module.exports = words;\n}	\N	\N	0	2	2014-07-10 07:02:28	2014-07-10 07:02:28	242	word-count.js
422	14	367411d9ffd953b6f48913f0	superseded	javascript	word-count	function word_analyzer(text) {\n  var analysis, corpus;\n  function strip_punctuation(str) {\n    return str.replace(/[^a-z0-9 ]/g, '');\n  }\n  function analyze(accumulator, element) {\n    if (!accumulator.hasOwnProperty(element)) {\n      accumulator[element] = 1;\n    } else {\n      accumulator[element]++;\n    }\n    return accumulator;\n  }\n\n  corpus = strip_punctuation(text.toLowerCase()).split(/\\s+/);\n\n  return corpus.reduce(analyze, {});\n}\n\nif (module) {\n  module.exports = word_analyzer;\n}	\N	\N	0	3	2014-08-13 22:45:55	2014-08-13 22:45:55	242	word-count.js
423	14	23e5afe0b770305aad5cf36b	superseded	javascript	word-count	function count_unique_elements(accumulator, element) {\n  if (accumulator.hasOwnProperty(element)) {\n    accumulator[element]++;\n  } else {\n    accumulator[element] = 1;\n  }\n  return accumulator;\n}\n\nfunction strip_punctuation(str) {\n  return str.toLowerCase().replace(/[^a-z0-9 ]/g, '');\n}\n\nfunction word_analyzer(text) {\n  return strip_punctuation(text).split(/\\s+/).reduce(count_unique_elements, {});\n}\n\nif (module) {\n  module.exports = word_analyzer;\n}	\N	\N	0	4	2014-08-19 16:28:12	2014-08-19 16:28:12	242	word-count.js
424	14	096f1f4c2e3c8f4e6f94bea9	pending	javascript	word-count	var REGEX_PUNCTUATION = /[\\u00A1\\u00BF\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!"#\\$%&\\(\\)\\*\\+,\\-\\.\\/:;<=>\\?@\\[\\]\\^_`\\{\\|\\}~]/g;\n\nfunction countUniqueElements(sums, word) {\n  if (sums.hasOwnProperty(word)) {\n    sums[word]++;\n  } else {\n    sums[word] = 1;\n  }\n  return sums;\n}\n\nfunction stripPunctuation(str) {\n  return str.replace(REGEX_PUNCTUATION, '');\n}\n\nfunction wordAnalyzer(text) {\n  return stripPunctuation(text).toLowerCase().split(/\\s+/).reduce(countUniqueElements, {});\n}\n\nif (module) {\n  module.exports = wordAnalyzer;\n}	\N	\N	0	5	2014-08-24 18:42:22	2014-08-24 18:42:22	242	word-count.js
425	14	8e37314a575f91915c7de364	superseded	python	meetup	from datetime import date as Date\nfrom datetime import timedelta as Timedelta\nimport calendar\n\ndef meetup_day(year, month, weekday, condition):\n    # initialization and error handling\n    try: # (enclosed in a try block for code collapsing in editor)\n        weekday_abbr    = [day.lower() for day in list(calendar.day_abbr)]\n        weekday_dict    = dict(zip(weekday_abbr,range(0,7)))\n        condition_dict  = {'1st'    : 0,\n                           '2nd'    : 1,\n                           '3rd'    : 2,\n                           '4th'    : 3,\n                           '5th'    : 4, # added some flexibility here\n                           'first'  : 0, #\n                           'second' : 1, #\n                           'third'  : 2, #\n                           'fourth' : 3, #\n                           'fifth'  : 4, #\n                           'last'   :-1,\n                           'teenth' : 'teenth'}\n\n        try:\n            date    = Date(year, month, 1)  # convert to Date object\n        except:\n            raise AssertionError("Invalid date type.")\n\n        try:\n            weekday = weekday.lower()       # set to lower case and test if string\n            weekday = weekday[:3]           # check if at least 3 letters\n            weekday = weekday_dict[weekday] # swap value to numeric weekday\n        except:\n            raise AssertionError("Invalid weekday. Use: " + str(weekday_dict.keys()))\n\n        try:\n            condition = condition_dict[condition]   # swap value for numeric condition\n        except:\n            raise AssertionError("Invalid condition. Use: " + str(condition_dict.keys()))\n    except: print("Unknown error.")\n\n    # call getWeekdayDates function to get list of weekdays\n    weekdays = getWeekdayDates(date, weekday)\n\n    # return either the teenth or the ith index of weekdays\n    if condition == 'teenth':\n        for day in weekdays:\n            if 13 <= day.day <= 19:\n                return day\n        print("Calendar error.  Your calendar doesn't have teenths!")\n    else:\n        return weekdays[condition]\n\ndef getWeekdayDates(date, weekday):\n    ''' date: Date object - resets day to 1\n        weekday: int - 0=mon, 6=sun\n        returns: list of dates in month that match weekday\n    '''\n    date = date.replace(day=1)\n    delta = weekday - date.weekday()\n    if delta >= 0:\n        first_weekday = date + Timedelta(days=delta)\n    else:\n        first_weekday = date + Timedelta(days=delta+7)\n\n    result = []\n    for i in range(5):\n        new_date = first_weekday + Timedelta(days=i*7)\n        if new_date.month == date.month:\n            result.append(new_date)\n        else:\n            break\n\n    return result	\N	\N	0	1	2014-07-02 16:16:58	2014-07-02 16:16:58	243	meetup.py
440	41	89fb709bb3eb30e9808859c3	superseded	python	word-count	import collections\nimport re\n\nclass Phrase(object):\n\tdef __init__(self, s):\n\t\tself.s = s\n\n\tdef word_count(self):\n\t\twords = re.findall("[a-z\\d]+", self.s.lower())\n\t\td = collections.defaultdict(int)\n\t\tfor word in words:\n\t\t\td[word] += 1\n\t\treturn d	\N	\N	0	2	2014-10-19 01:02:59	2014-10-19 01:02:59	250	word-count.py
441	41	4026ea9642e2c05d46e403c2	superseded	python	word-count	import collections\nimport re\n\nclass Phrase(object):\n\tdef __init__(self, s):\n\t\tself.s = s\n\n\tdef word_count(self):\n\t\twords = re.findall("[a-z\\d]+", self.s.lower())\n\t\treturn collections.Counter(words)	\N	\N	0	3	2014-10-20 21:55:47	2014-10-20 21:55:47	250	word-count.py
442	41	5def88dec741537fb6428667	superseded	python	word-count	import collections\nimport re\n\nclass Phrase(object):\n\tdef __init__(self, s):\n\t\tself.s = s\n\t\tself.wc  = None\n\n\tdef word_count(self):\n\t\t# Calculate wc only once.\n\t\tif not self.wc:\n\t\t\twords = re.findall("[a-z\\d]+", self.s.lower())\n\t\t\tself.wc = collections.Counter(words)\n\t\treturn self.wc	\N	\N	0	4	2014-11-13 09:38:24	2014-11-13 09:38:24	250	word-count.py
443	41	9fcef8c0c5c9b147cd4bce0a	pending	ruby	hamming	module Hamming\n\n  def compute(lstrand, rstrand)\n    rstrand.chars.\n      zip(lstrand.chars).\n      reject{|(a,b)| not a or not b }.\n      reject{|(a,b)| a == b }.\n      length\n  end\n  module_function :compute\n\nend	\N	\N	0	1	2014-09-28 17:52:00	2014-09-28 17:52:00	251	hamming.rb
533	18	bcf455023b1bca3350f85d0d	pending	ruby	bob	class Bob\n  RESPONSES = [\n    { response: "Fine. Be that way!", test: lambda { |words| !words || words.lstrip.empty? } },\n    { response: "Woah, chill out!",   test: lambda { |words| words == words.upcase } },\n    { response: "Sure.",              test: lambda { |words| words.end_with? "?" } },\n    { response: "Whatever.",          test: lambda { |words| true } }\n  ]\n\n  def hey(words)\n    appropriate_response = ->(potential_response) { potential_response[:test].call(words) }\n    RESPONSES.detect(&appropriate_response)[:response]\n  end\nend	\N	\N	0	7	2014-09-18 20:14:13	2014-09-18 20:14:13	302	bob.rb
426	14	5d40c27e674f8ad061ef467d	pending	python	meetup	from datetime import date as Date\nimport calendar\n\nDEFAULT_CONDITIONS  = {'1st': 0, '2nd': 1, '3rd': 2, '4th': 3,\n                       'last':-1, 'teenth' : 'teenth'}\n\ndef meetup_day(year, month, weekday, condition, condition_dict=DEFAULT_CONDITIONS):\n    """\n    calculates the date of meetups\n\n    year (int): year\n    month (int): month\n    weekday (str): day of week, e.g. 'Monday'\n    condition (str): e.g. '1st', '2nd', '3rd', '4th', 'last', 'teenth'\n    """\n    # initialization and error handling\n    weekday_names = [day for day in list(calendar.day_name)]\n    weekday_dict = dict(zip(weekday_names, range(0, 7)))\n    date = Date(year, month, 1)             # convert to Date object\n    weekday = weekday_dict[weekday]         # swap value to numeric weekday\n    condition = condition_dict[condition]   # swap value to numeric condition\n    \n    # call get_weekdays() to get list of weekdays\n    weekdays = get_weekdays(date, weekday)\n\n    # return either the teenth or the i-th index of weekdays\n    if condition == 'teenth':\n        for day in weekdays:\n            if 13 <= day.day <= 19:\n                return day\n    else:\n        return weekdays[condition]\n\ndef get_weekdays(date, weekday):\n    """\n    finds dates in the same month as 'date' that land on a 'weekday'\n    \n    date (Date): provides which month and year to check, day ignored\n    weekday (int): weekday represented as an integer: 0=mon to 6=sun\n    returns (list): 'Date' objects in month that match weekday\n    """\n    year = date.year\n    month = date.month\n    monthcalendar = calendar.monthcalendar(year, month)\n    weekdays = []\n\n    for week in monthcalendar:\n        day = week[weekday]\n        if day != 0:\n            weekdays.append(Date(year, month, day))\n\n    return weekdays	\N	\N	0	2	2014-07-29 14:08:23	2014-07-29 14:08:23	243	meetup.py
427	14	f889318eddec8b9179bdb7df	pending	python	difference-of-squares	def sum_of_squares(n):\n    return sum([x**2 for x in range(1, n+1)])\n    \ndef square_of_sum(n):\n    sum = (1 + n) * (n / 2.0)\n    return sum**2\n\ndef difference(n):\n    return abs(sum_of_squares(n) - square_of_sum(n))\n    \n    	\N	\N	0	1	2014-09-28 12:58:10	2014-09-28 12:58:10	244	difference_of_squares.py
428	14	270b8cb565f09cb3c4a3a85b	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    differences = 0\n    strand1.length.times do |i|\n      break if strand2.length <= i\n      differences += 1 unless strand1[i] == strand2[i]\n    end\n    differences\n  end\nend	\N	\N	0	1	2014-07-03 02:16:43	2014-07-03 02:16:43	245	hamming.rb
429	14	715de7dfffbd3cf152af5d74	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    distance = 0\n    [strand1.length, strand2.length].min.times do |i|\n      distance += 1 if strand1[i] != strand2[i]\n    end\n    distance\n  end\nend	\N	\N	0	2	2014-09-29 06:59:12	2014-09-29 06:59:12	245	hamming.rb
430	14	ab6e27922c6e4cb9eb337c93	pending	ruby	hamming	class Hamming\n  def self.compute(s1, s2)\n    [s1.size, s2.size].min.times.count { |i| s1[i] != s2[i] }\n  end\nend	\N	\N	0	3	2014-11-05 21:31:31	2014-11-05 21:31:31	245	hamming.rb
431	41	f4f4ec3735e43ee24124ce0a	pending	javascript	beer-song	(function() {\n  'use strict';\n\n  function bottles(number) {\n    var str = "";\n\n    if (number === 0) {\n      str = "no more bottles";\n    } else if (number === 1) {\n      str = "1 bottle";\n    } else {\n      str = number + " bottles";\n    }\n\n    return str;\n  }\n\n  function action(current_verse) {\n    var sbj, str = "";\n\n    if (current_verse === 0) {\n      str = "Go to the store and buy some more, ";\n    } else {\n      sbj = (current_verse === 1 ? "it" : "one");\n      str = "Take " + sbj + " down and pass it around, ";\n    }\n\n    return str;\n  }\n\n  function next_bottle(current_verse) {\n    return bottles(next_verse(current_verse)) + " of beer on the wall.\\n";\n  }\n\n  function next_verse(current_verse) {\n    return current_verse === 0 ? 99 : (current_verse - 1);\n  }\n\n  exports.sing = function(first, last) {\n    if (typeof(first) === 'undefined') {\n      first = 99;\n    }\n    if (typeof(last) === 'undefined') {\n      last = 0;\n    }\n\n    var verses = [];\n    for (var i = first; i >= last; i--) {\n      verses.push(this.verse(i));\n    }\n\n    return verses.join("\\n");\n  };\n\n  exports.verse = function(number) {\n    var line1 = bottles(number).capitalize() + " of beer on the wall, ";\n    var line2 = bottles(number) + " of beer.\\n";\n    var line3 = action(number);\n    var line4 = next_bottle(number);\n\n    return [line1, line2, line3, line4].join("");\n  };\n\n  String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n  };\n})();	\N	\N	0	1	2014-09-01 17:32:58	2014-09-01 17:32:58	246	beer-song.js
432	41	4e46763015ae8504c8abce83	pending	ruby	rna-transcription	class Complement\n  @rna_to_dna = {"C" => "G",\n                 "G" => "C",\n                 "U" => "A",\n                 "A" => "T"}\n  def self.of_dna(seq)\n      seq.gsub(/[ACGT]/) {|g| @rna_to_dna.key(g)}\n  end\n\n  def self.of_rna(seq)\n      seq.gsub(/[ACGU]/) {|g| @rna_to_dna[g]}\n  end\nend	\N	\N	0	2	2014-09-03 19:42:32	2014-09-03 19:42:32	247	complement.rb
433	41	c2a72d20eed4d4208e089e5f	superseded	ruby	rna-transcription	class Complement\n  def self.of_dna(seq)\n    seq.split('').reduce('') do |sum, elt|\n      case elt\n      when "C"\n        sum << "G"\n      when "G"\n        sum << "C"\n      when "T"\n        sum << "A"\n      when "A"\n        sum << "U"\n      end\n    end\n  end\n\n  def self.of_rna(seq)\n    seq.split('').reduce('') do |sum, elt|\n      case elt\n      when "C"\n        sum << "G"\n      when "G"\n        sum << "C"\n      when "U"\n        sum << "A"\n      when "A"\n        sum << "T"\n      end\n    end\n  end\nend	\N	\N	0	1	2014-09-23 19:42:46	2014-09-23 19:42:46	247	complement.rb
434	41	1bb391d98ee539fa9a724bad	pending	ruby	bob	class Bob\n\n  def initialize\n    @responses = {question: 'Fine. Be that way!',\n                  yell:     'Woah, chill out!',\n                  nothing:  'Sure.',\n                  anything: 'Whatever.'}\n  end\n\n  def hey message\n    answer message\n  end\n\n  private\n\n  def answer message\n    clean message\n\n    @responses.select do |response, answer|\n      send response, message\n    end.values.first\n  end\n\n  def anything m; true end\n\n  def nothing message\n    message.end_with? '?'\n  end\n\n  def yell message\n    message.match /^[^a-z]*$/\n  end\n\n  def question message\n    message.empty?\n  end\n\n  def clean message\n    message.strip!\n  end\nend	\N	\N	0	3	2014-08-30 09:58:43	2014-08-30 09:58:43	248	bob.rb
435	41	78f09473f9b87aae27514225	superseded	ruby	bob	class Bob\n  def hey blablabla\n    blablabla.strip!\n    if blablabla.empty?\n      'Fine. Be that way!'\n    elsif blablabla.match /^[^a-z]*$/\n      'Woah, chill out!'\n    elsif blablabla.end_with? '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	1	2014-09-04 03:11:00	2014-09-04 03:11:00	248	bob.rb
436	41	e4c25e540d78e9fa7cc73054	superseded	ruby	bob	class Bob\n\n  def initialize\n    @responses = {question: 'Fine. Be that way!',\n                  yell:     'Woah, chill out!',\n                  nothing:  'Sure.',\n                  anything: 'Whatever.'}\n  end\n\n  def hey message\n    answer meaning message\n  end\n\n  private\n\n  def answer response\n    @responses[response]\n  end\n\n  def meaning message\n    clean message\n\n    if message.empty?\n      :question\n    elsif message.match /^[^a-z]*$/\n      :yell\n    elsif message.end_with? '?'\n      :nothing\n    else\n      :anything\n    end\n  end\n\n  def clean message\n    message.strip!\n  end\nend	\N	\N	0	2	2014-09-08 20:31:45	2014-09-08 20:31:45	248	bob.rb
444	41	54ca8751c817355b4e51f2ef	pending	elixir	bank-account	defmodule BankAccount do\n  @moduledoc """\n  A bank account that supports access from multiple processes.\n  """\n\n  use GenServer.Behaviour\n  \n  ## Callbacks\n  \n  def init(_args) do\n    { :ok, 0 }\n  end\n\n  def handle_call(:balance, _from, balance) do\n    { :reply, balance, balance }\n  end\n\n  def handle_call({ :update, amount }, _from, balance) do\n    { :reply, :ok, balance + amount }\n  end\n\n  def handle_call(:close, _from, balance) do\n    # We stop normally and return :stopped to the caller.\n    { :stop, :normal, :stopped, balance }\n  end\n  \n  ## Interface for tests\n  \n  @typedoc """\n  An account handle.\n  """\n  @opaque account :: pid\n\n  @doc """\n  Open the bank. Makes the account available.\n  """\n  @spec open_bank() :: account\n  def open_bank() do\n    { :ok, pid } = :gen_server.start_link(BankAccount, [], [])\n    pid\n  end\n\n  @doc """\n  Close the bank. Makes the account unavailable.\n  """\n  @spec close_bank(account) :: none\n  def close_bank(account) do\n    :gen_server.call(account, :close)\n  end\n\n  @doc """\n  Get the account's balance.\n  """\n  @spec balance(account) :: integer\n  def balance(account) do\n    :gen_server.call(account, :balance) \n  end\n \n  @doc """\n  Update the account's balance by adding the given amount which may be negative.\n  """\n  def update(account, amount) do\n    :gen_server.call(account, { :update, amount })\n  end\nend	\N	\N	0	1	2014-08-25 11:19:06	2014-08-25 11:19:06	252	bank-account.exs
445	41	68245de327ac55d03970c008	pending	python	grains	def on_square(num):\n    return 2 ** (num - 1)\n\n\ndef total_after(square_num):\n    return (2 ** square_num) - 1	\N	\N	0	2	2014-09-01 05:28:53	2014-09-01 05:28:53	253	grains.py
446	41	aff9eae981dd08137e8f841a	superseded	python	grains	# Fill in the squares\nSQUARES = [0, 1]\nfor _ in range(63):\n    SQUARES.append(SQUARES[-1] * 2)\n\n\ndef on_square(num):\n    return SQUARES[num]\n\n\ndef total_after(square_num):\n    return sum(SQUARES[:square_num + 1])	\N	\N	0	1	2014-10-11 06:21:16	2014-10-11 06:21:16	253	grains.py
447	41	fdf61a1d33559ca3e1d8fe82	pending	ruby	accumulate	class Array\n  def accumulate\n    new = []\n    self.each { |i| new << (yield i) }\n    new\n  end\nend	\N	\N	0	1	2014-09-23 00:08:23	2014-09-23 00:08:23	254	accumulate.rb
448	41	bb95131c60d7f1a6b60cd365	pending	ruby	scrabble-score	class Scrabble\n  # Transformed to {letter => value}\n  LETTER_VALUES = {\n     1 => %w[A E I O U L N R S T],\n     2 => %w[D G],\n     3 => %w[B C M P],\n     4 => %w[F H V W Y],\n     5 => %w[K],\n     8 => %w[J X],\n    10 => %w[Q Z]\n  }.each_with_object({}) do |(point, point_classes), new_hash|\n    point_classes.each { |point_class| new_hash.merge!(point_class => point) }\n  end\n\n  attr_reader :string\n\n  def self.score(string)\n    new(string).score\n  end\n\n  def initialize(string)\n    @string = string || ""\n  end\n\n  def score\n    values.reduce(:+) || 0\n  end\n\n  private\n\n  def values\n    chars.map { |char| LETTER_VALUES[char] }\n  end\n\n  def chars\n    string.upcase.gsub(/[^A-Z]/, '').chars.to_a\n  end\nend	\N	\N	0	1	2014-09-13 17:22:22	2014-09-13 17:22:22	255	scrabble.rb
449	41	02633d302a6267ba3e535069	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(strand, other)\n  local mutations = 0\n  for i = 1, math.min(#strand, #other) do\n    if strand:sub(i,i) ~= other:sub(i,i) then\n      mutations = mutations + 1\n    end\n  end\n  return mutations\nend\n\nreturn Hamming	\N	\N	0	1	2014-10-10 15:53:19	2014-10-10 15:53:19	256	hamming.lua
450	41	80304154242a0f2b92a8b1b3	superseded	csharp	twelve-days	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic class TwelveDaysSong\r\n{\r\n\r\n    private const int MAX_VERSE = 12;\r\n    private const string VERSE_PLACEHOLDER = "On the {0} day of Christmas my true love gave to me, {1}.\\n";\r\n    private readonly IDictionary<string, string> _verses = new Dictionary<string, string>() {\r\n        { "first", "a Partridge in a Pear Tree" },\r\n        { "second", "two Turtle Doves" },\r\n        { "third", "three French Hens" },\r\n        { "fourth", "four Calling Birds" },\r\n        { "fifth", "five Gold Rings" },\r\n        { "sixth", "six Geese-a-Laying" },\r\n        { "seventh", "seven Swans-a-Swimming" },\r\n        { "eighth", "eight Maids-a-Milking" },\r\n        { "ninth", "nine Ladies Dancing" },\r\n        { "tenth", "ten Lords-a-Leaping" },\r\n        { "eleventh", "eleven Pipers Piping" },\r\n        { "twelfth", "twelve Drummers Drumming" }\r\n    };\r\n\r\n    public string Verse(int day)\r\n    {\r\n        if (day < 1 || day > MAX_VERSE) throw new ArgumentOutOfRangeException("The 'day' can only be between 1 and 12, inclusive.");\r\n        \r\n        var verses = _verses.Values.TakeWhile((verse, index) => index < day).Reverse().ToList();\r\n        \r\n        // If more than one verse, the last gift needs 'and ' added to it\r\n        if (verses.Count > 1) \r\n        {\r\n            verses[verses.Count - 1] = "and " + verses[verses.Count - 1];\r\n        }\r\n\r\n        return string.Format(VERSE_PLACEHOLDER, _verses.ElementAt((day - 1)).Key, string.Join(", ", verses));\r\n    }\r\n\r\n    public string Verses(int from, int to)\r\n    {\r\n        StringBuilder result = new StringBuilder();\r\n        for (int verse = from; verse <= to; verse++)\r\n        {\r\n            result.Append(Verse(verse)).Append("\\n");\r\n        }\r\n        return result.ToString();\r\n    }\r\n\r\n    public string Sing()\r\n    {\r\n        return Verses(1, MAX_VERSE);\r\n    }\r\n}\r	\N	\N	0	1	2014-09-21 21:15:54	2014-09-21 21:15:54	257	TwelveDaysSong.cs
451	41	db13372c61b9f87ed87c4f32	pending	csharp	twelve-days	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\npublic class TwelveDaysSong\r\n{\r\n\r\n    private const int MAX_VERSE = 12;\r\n    private const string VERSE_PLACEHOLDER = "On the {0} day of Christmas my true love gave to me, {1}.\\n";\r\n    private readonly IDictionary<string, string> _verses = new Dictionary<string, string>() {\r\n        { "first", "a Partridge in a Pear Tree" },\r\n        { "second", "two Turtle Doves" },\r\n        { "third", "three French Hens" },\r\n        { "fourth", "four Calling Birds" },\r\n        { "fifth", "five Gold Rings" },\r\n        { "sixth", "six Geese-a-Laying" },\r\n        { "seventh", "seven Swans-a-Swimming" },\r\n        { "eighth", "eight Maids-a-Milking" },\r\n        { "ninth", "nine Ladies Dancing" },\r\n        { "tenth", "ten Lords-a-Leaping" },\r\n        { "eleventh", "eleven Pipers Piping" },\r\n        { "twelfth", "twelve Drummers Drumming" }\r\n    };\r\n\r\n    public string Verse(int day)\r\n    {\r\n        if (day < 1 || day > MAX_VERSE) throw new ArgumentOutOfRangeException("The 'day' can only be between 1 and 12, inclusive.");\r\n        \r\n        var gifts = _verses.Values.TakeWhile((verse, index) => index < day).Reverse().ToList();\r\n        \r\n        // If more than one gift, the last gift needs 'and ' added to it\r\n        if (gifts.Count > 1) \r\n        {\r\n            gifts[gifts.Count - 1] = "and " + gifts[gifts.Count - 1];\r\n        }\r\n\r\n        return string.Format(VERSE_PLACEHOLDER, _verses.ElementAt((day - 1)).Key, string.Join(", ", gifts));\r\n    }\r\n\r\n    public string Verses(int from, int to)\r\n    {\r\n        StringBuilder result = new StringBuilder();\r\n        for (int verse = from; verse <= to; verse++)\r\n        {\r\n            result.Append(Verse(verse)).Append("\\n");\r\n        }\r\n        return result.ToString();\r\n    }\r\n\r\n    public string Sing()\r\n    {\r\n        return Verses(1, MAX_VERSE);\r\n    }\r\n}	\N	\N	0	2	2014-10-27 01:24:50	2014-10-27 01:24:50	257	TwelveDaysSong.cs
452	41	e5ce07f195ada1e66411bbc0	pending	javascript	hamming	var Hamming = function(dna1,dna2){\n\tvar diffCount = 0;\n\tvar length = dna1.length < dna2.length ? dna1.length : dna2.length;\n\n\tfor (i = 0; i < length; i++){\n\t\tif (dna1[i] != dna2[i]){\n\t\t\tdiffCount = diffCount + 1;\n\t\t}\n\t}\n\n\treturn diffCount;\n}\nexports.compute = Hamming;	\N	\N	0	1	2014-09-18 09:14:17	2014-09-18 09:14:17	258	hamming.js
465	41	8a610de302e7935ec3b83b0c	superseded	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA [] = []\ntoRNA ('T':xs) = 'U':(toRNA xs)\ntoRNA (x:xs) = x:(toRNA xs)	\N	\N	0	2	2014-08-18 01:53:36	2014-08-18 01:53:36	269	rna-transcription.hs
466	41	b5dd46664b723e1e7301a367	superseded	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA s = map t2u s\n  where t2u c = if c == 'T' then 'U' else c	\N	\N	0	1	2014-09-04 14:26:44	2014-09-04 14:26:44	269	rna-transcription.hs
467	41	5654759ae6929268e9fe8082	superseded	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA = map (\\c -> if c == 'T' then 'U' else c)	\N	\N	0	3	2014-09-17 17:14:10	2014-09-17 17:14:10	269	rna-transcription.hs
468	41	189a3ef1283bb85f1dddc015	pending	haskell	rna-transcription	module DNA where\n\nimport Data.String.Utils (replace) -- from MissingH package\n\ntoRNA :: String -> String\ntoRNA = replace "T" "U"	\N	\N	0	4	2014-09-21 21:23:31	2014-09-21 21:23:31	269	rna-transcription.hs
469	41	aa0a2a98aa2d1bd691c30313	superseded	ruby	grains	class Grains\n  def initialize\n\n  end\n  def square(number)\n    2**(number-1)\n  end\n  def total\n    total = 0\n    1.upto(65).each do |number|\n    @new_total = (total + 2**(number-1))\n    end\n    @new_total - 1\n  end\nend	\N	\N	0	2	2014-08-22 18:12:33	2014-08-22 18:12:33	270	grains.rb
453	41	bd2707b569436521125fb1ba	pending	javascript	robot-name	var Robot = function () {\n    getNewName = function () {\n        var name = [];\n      var firstTwoLetters = Array.apply(0, Array(2)).map(function() {\n            return (function(charset){\n                return charset.charAt(Math.floor(Math.random() * charset.length));\n                }('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n              }).join('');\n      name.push(firstTwoLetters);\n      var secondThreeNumbers = Array.apply(0, Array(3)).map(function() {\n            return (function(charset){\n                return charset.charAt(Math.floor(Math.random() * charset.length));\n                }('0123456789'));\n              }).join('');\n      name.push(secondThreeNumbers);\n      return name.join("").toString();\n    };\n    this.name = getNewName();\n  };\n\nRobot.prototype.reset = function() {\n    this.name = getNewName();\n}\n// Robot.prototype.name = function () {\n//     getNewName = function () {\n//         var name = [];\n//       var firstTwoLetters = function () {\n//         var twoLetters = "";\n//         var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n//         for( var i=0; i < 2; i++ )\n//             twoLetters += possible.charAt(Math.floor(Math.random() * possible.length));\n//           }\n//           name.push(twoLetters);\n//       var secondThreeNumbers = function () {\n//         var threeNumbers = "";\n//         var possible = "0123456789";\n//         for( var i = 0; i < 3; i++ )\n//           threeNumbers += possible.charAt(Math.floor(Math.random() * possible.length));\n//       }\n//       name.unshift(threeNumbers);\n//       return name.toString();\n//       }\n//     }	\N	\N	0	1	2014-09-08 08:40:39	2014-09-08 08:40:39	259	robot-name_test.js
454	41	70d2f2c3d3f7676d06205f04	pending	go	hamming	package hamming\n\nfunc Distance(a, b string) int {\n\tdistance := 0\n\n\tfor i := 0; i < len(a) && i < len(b); i++ {\n\t\tif a[i] != b[i] {\n\t\t\tdistance++\n\t\t}\n\t}\n\n\treturn distance\n}	\N	\N	0	1	2014-10-24 09:44:54	2014-10-24 09:44:54	260	hamming.go
455	41	15abd4c7c7878661b02bcbcd	pending	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :refer (join)]))\n\n(def dna-to-rna {\n  \\C \\C\n  \\G \\G\n  \\A \\A\n  \\T \\U\n})\n\n(defn- valid-dna? [nucleotide]\n  (contains? dna-to-rna nucleotide))\n\n(defn- transcribe [nucleotide]\n  (assert (valid-dna? nucleotide))\n  (dna-to-rna nucleotide))\n\n(defn to-rna [strand]\n  (join "" (map transcribe strand)))	\N	\N	0	1	2014-09-19 09:28:15	2014-09-19 09:28:15	261	dna.clj
456	41	af31908428d0572a2f24fefe	pending	coffeescript	beer-song	class Beer\n\n  @verse: (num) ->\n    if num == 0\n      lastVerse()\n    else if num == 1\n      singleVerse()\n    else\n      regularVerse(num)\n\n  @sing: (start, finish=0) ->\n    (@verse(num) for num in [start..finish]).join("\\n\\n") + "\\n"\n\n  regularVerse = (num) ->\n    """\n    #{num} bottles of beer on the wall, #{num} bottles of beer.\n    Take one down and pass it around, #{num - 1} bottles of beer on the wall.\n    """\n\n  singleVerse = ->\n    """\n    1 bottle of beer on the wall, 1 bottle of beer.\n    Take it down and pass it around, no more bottles of beer on the wall.\n    """\n\n  lastVerse = ->\n    """\n    No more bottles of beer on the wall, no more bottles of beer.\n    Go to the store and buy some more, 99 bottles of beer on the wall.\n    """\n\nmodule.exports = Beer	\N	\N	0	1	2014-08-16 16:20:48	2014-08-16 16:20:48	262	beer.coffee
457	41	c3c45c2e8b6bef054830bf48	pending	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function(message) {\n  if (isYelling(message)) { return 'Woah, chill out!' };\n  if (isQuestion(message)) { return 'Sure.' };\n  if (isEmpty(message)) { return 'Fine. Be that way!' };\n  return 'Whatever.'\n};\n\nisYelling = function(message) {\n  var upper_case_letters = /[A-Z]/\n  var lower_case_letters = /[a-z]/\n  if (upper_case_letters.test(message) == true && lower_case_letters.test(message) == false ) {return true};\n};\n\nisQuestion = function(message) {\n  var ends_with_question_mark = /[?]$/ \n  if (ends_with_question_mark.test(message)) {return true};\n};\n\nisEmpty = function(message) {\n  var check_for_empty_string = /^\\s*$/ \n  if (check_for_empty_string.test(message)) {return true};\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-09-16 12:26:57	2014-09-16 12:26:57	263	bob.js
458	41	29c01e3846de037a4416a17c	pending	clojure	word-count	(ns phrase)\n\n\n(def phrase->lower-case-words\n  (comp (partial re-seq #"\\w+") clojure.string/lower-case))\n\n(defn word-count\n  [phrase]\n  (frequencies (phrase->lower-case-words phrase)))	\N	\N	0	2	2014-08-26 21:31:58	2014-08-26 21:31:58	264	word-count.clj
459	41	47223c364e01d2757d08b0f8	superseded	clojure	word-count	(ns phrase)\n\n(defn word-count\n  [phrase]\n  (let [words (re-seq #"\\w+" phrase)\n        lower-case-words (map clojure.string/lower-case words)]\n    (reduce\n     (fn [acc word]\n       (update-in acc [word] (fn [count] (if count (inc count) 1))))\n     {}\n     lower-case-words)))	\N	\N	0	1	2014-08-27 01:54:58	2014-08-27 01:54:58	264	word-count.clj
460	41	f94bdc3b6ca875161a733265	pending	coffeescript	bob	class Bob\n  hey: (message) ->\n    if /^\\s*$/.test message\n      "Fine. Be that way!"\n    else if /^[^a-z]+$/.test message\n      "Woah, chill out!"\n    else if /\\?$/.test message\n      "Sure."\n    else\n      "Whatever."\n\nmodule.exports = Bob	\N	\N	0	1	2014-09-01 10:11:11	2014-09-01 10:11:11	265	bob.coffee
461	41	8f4973fa38a6d95fe33041b6	superseded	ruby	anagram	class Anagram\n  def initialize source\n    @raw_source = source.downcase\n    @source = standard_form @raw_source\n  end\n\n  def match targets\n    targets.select do |target|\n      raw_target = target.downcase\n      @source == standard_form(raw_target) && @raw_source != raw_target\n    end\n  end\n\n  def standard_form word\n    word.split("").sort\n  end\nend	\N	\N	0	1	2014-08-17 00:38:14	2014-08-17 00:38:14	266	anagram.rb
462	41	5ed52a8e44355ef1af151f40	pending	ruby	anagram	class Anagram\n  def initialize source\n    @raw_source = source.downcase\n    @source = standard_form @raw_source\n  end\n\n  def match targets\n    targets.select do |target|\n      raw_target = target.downcase\n      are_anagrams = @source == standard_form(raw_target)\n      are_same = (@raw_source == raw_target)\n      are_anagrams.but_not are_same\n    end\n  end\n\n  def standard_form word\n    word.chars.sort\n  end\nend\n\nclass Object\n  def but_not obj\n    self && !obj\n  end\nend	\N	\N	0	2	2014-08-26 22:03:36	2014-08-26 22:03:36	266	anagram.rb
463	41	d922732bfcd4b2021e93744c	pending	python	series	def slices(source, n):\r\n\tif n == 0:\r\n\t\traise ValueError('Overly short slice')\r\n\tif n > len(source):\r\n\t\traise ValueError('Overly long slice')\r\n\r\n\tconverted = [int(l) for l in source]\r\n\treturn [converted[i : i + n] for i in xrange(0, len(source) - n + 1)]\r	\N	\N	0	1	2014-11-01 16:08:54	2014-11-01 16:08:54	267	series.py
464	41	f97a107313fe795261e7ee8b	pending	javascript	robot-simulator	function Robot () {\n  this.bearing = 'north';\n  this.coordinates = [0, 0];\n}\n\nRobot.prototype = {\n  directions: { 'east': 1, 'west': -1, 'north': 1, 'south': -1 },\n\n  orient: function(direction) {\n    if (!Robot.prototype.directions.hasOwnProperty(direction)) {\n      throw "Invalid Robot Bearing";\n    }\n    this.bearing = direction;\n  },\n\n  turnRight: function() {\n    var bearing = this.bearing;\n    if (bearing === 'north') this.bearing = 'east';\n    else if (bearing === 'east') this.bearing = 'south';\n    else if (bearing === 'south') this.bearing = 'west';\n    else this.bearing = 'north';\n  },\n\n  turnLeft: function() {\n    var bearing = this.bearing;\n    if (bearing === 'north') this.bearing = 'west';\n    else if (bearing === 'east') this.bearing = 'north';\n    else if (bearing === 'south') this.bearing = 'east';\n    else this.bearing = 'south';\n  },\n\n  at: function (x, y) {\n    this.coordinates[0] = x;\n    this.coordinates[1] = y;\n  },\n\n  advance: function () {\n    var bearing = this.bearing;\n    var curX = this.coordinates[0];\n    var curY = this.coordinates[1];\n    if (bearing === 'north') this.coordinates[1] += 1;\n    else if (bearing === 'east') this.coordinates[0] += 1;\n    else if (bearing === 'south') this.coordinates[1] -=1;\n    else this.coordinates[0] -= 1;\n  },\n\n  instructions: function(str) {\n    var instructions = [];\n    for (var i = 0; i < str.length; i++) {\n      var letter = str[i];\n      var instruction;\n      switch (letter) {\n        case "L":\n          instruction = "turnLeft";\n          break;\n        case "R":\n          instruction = "turnRight";\n          break;\n        case "A":\n          instruction = "advance";\n          break;\n        default:\n          throw "Invalid instruction: " + letter;\n          break;\n      }\n      instructions.push(instruction);\n    }\n    return instructions;\n  },\n\n  place: function(params) {\n    this.at(params.x, params.y);\n    this.orient(params.direction);\n  },\n\n  evaluate: function(str) {\n    var instructions = this.instructions(str);\n    var that = this;\n    instructions.forEach(function(instruction) {\n      that[instruction].call(that);\n    });\n  }\n\n};	\N	\N	0	1	2014-08-20 15:50:07	2014-08-20 15:50:07	268	robot-simulator_test.js
475	41	af705e05c5bae2be2aca32d6	pending	clojure	anagram	;;;; Anagram\n;;;;\n;;;; Write a program that, given a word and a list of possible anagrams,\n;;;; selects the correct sublist.\n;;;;\n;;;; Given `"listen"` and a list of candidates like `"enlists" "google"\n;;;; "inlets" "banana"` the program should return a list containing\n;;;; `"inlets"`.\n;;;;\n(ns anagram\n  (:use [clojure.string :only [lower-case]]))\n\n(defn- copy-but [word n]\n  "Return all characters in the string except the one at n"\n  (apply str (concat (take n word) (nthrest word (inc n)))))\n\n(defn- indexof\n  "Return index of first character of w1 in w2"\n  [w1 w2]\n  (.indexOf w2 (str (first w1))))\n\n(defn- anagram-insensitive\n  "Whether w2 is an anagram of w1"\n  [w1 w2]\n  (cond\n    (not= (count w1) (count w2)) false\n    (empty? w1) true\n    (= w1 w2) false\n    (= (indexof w1 w2) -1) false\n    :else (recur (rest w1) (copy-but w2 (indexof w1 w2)))))\n\n(defn- anagram? \n  "Whether w2 is an anagram of w1"\n  [w1 w2]\n  (anagram-insensitive (lower-case w1) (lower-case w2)))\n\n(defn anagrams-for\n  "Given a word and a list of possible anagrams, selects sublist of anagrams."\n  [word candidates]\n  (filter (partial anagram? word) candidates))	\N	\N	0	1	2014-08-21 18:40:48	2014-08-21 18:40:48	274	anagram.clj
476	6	12fc7bbb7dd4d6d174a861b3	pending	javascript	palindrome-products	function Palindromes(factors) {\n    var isPalindrome = function(a, b) {\n        var product = (a * b).toString();\n        var reversedProduct = product.split("").reverse().join("");\n        return product === reversedProduct;\n    };\n\n    this.generate = function() {\n        var minFactor = factors.minFactor || 1;\n        var maxFactor = factors.maxFactor;\n        var palindromeProducts = [];\n        for (var i = minFactor; i <= maxFactor; i++) {\n            for (var j = i; j <= maxFactor; j++) {\n                if (isPalindrome(i, j)) {\n                    var palindrome = new Palindrome(i, j);\n                    palindromeProducts.push(palindrome);\n                }\n            }\n        }\n        this.palindromes = palindromeProducts;\n    };\n\n    this.mostExtremeProduct = function(minOrMax) {\n        var products = this.palindromes.map(function(palindrome) {\n            return palindrome.product;\n        });\n        return minOrMax.apply(null, products);\n    };\n\n    this.extremeFactors = function(minOrMax) {\n        var mostExtremeProduct = this.mostExtremeProduct(minOrMax);\n        var largestPalindromes = this.palindromes.filter(function(palindrome) {\n            return palindrome.product === mostExtremeProduct;\n        });\n        return largestPalindromes.map(function(palindrome) {\n            return [palindrome.factor1, palindrome.factor2];\n        });\n    };\n\n    this.largest = function() {\n        return {\n            value: this.mostExtremeProduct(Math.max),\n            factors: this.extremeFactors(Math.max)\n        };\n    };\n\n    this.smallest = function() {\n        return {\n            value: this.mostExtremeProduct(Math.min),\n            factors: this.extremeFactors(Math.min)\n        };\n    };\n}\n\nfunction Palindrome(factor1, factor2) {\n    this.factor1 = factor1;\n    this.factor2 = factor2;\n    this.product = factor1 * factor2;\n}\n\nmodule.exports = Palindromes;	\N	\N	0	1	2014-08-08 00:15:58	2014-08-08 00:15:58	275	palindrome-products.js
477	6	87584406e2c7147531f14d96	pending	ruby	grains	class Grains\r\n\tdef square num\r\n\t\t2 ** (num - 1)\r\n\tend\r\n\t\r\n\tdef total\r\n\t\ttotal = 0\r\n\t\t(1..64).each do |num|\r\n\t\t\ttotal += square num\r\n\t\tend\r\n\t\ttotal\r\n\tend\r\nend	\N	\N	0	1	2014-09-18 07:04:34	2014-09-18 07:04:34	276	grains.rb
478	6	e54f2fe0d02eabe6008661a9	superseded	cpp	word-count	#include <map>\n#include <set>\n#include <string>\n\nnamespace word_count\n{\n  std::set<char> alphanumerics = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    '1', '2', '3', '4', '5', '6', '7', '8', '9'\n  };\n\n  void update(std::map<std::string, int> &counts, std::string word)\n  {\n    if (counts.find(word) != counts.end())\n      counts[word] = counts[word] + 1;\n    else\n      counts[word] = 1;\n  }\n\n  std::map<std::string, int> words(std::string sentence)\n  {\n    std::map<std::string, int> counts; // A map containing our results.\n    std::string word = ""; // Keeps track of a run of alphanumeric characters.\n    bool was_alphanumeric = false; // Flag referring to the last character read.\n\n    for (std::string::iterator letter = sentence.begin();\n         letter != sentence.end();\n         letter++)\n    {\n      bool is_alphanumeric = alphanumerics.find(*letter) != alphanumerics.end();\n\n      if (is_alphanumeric)\n        word.push_back(tolower(*letter));\n\n      // If this is the first non-alphanumeric character we've found since we\n      // last came across an alphanumeric character, we say we've found the end\n      // of a word and update `counts` with the completed word.\n      if (!is_alphanumeric && was_alphanumeric)\n      {\n        update(counts, word);\n        word.erase();\n      }\n\n      was_alphanumeric = is_alphanumeric;\n    }\n\n    // We need to check if we have a word we haven't updated with the collection\n    // with yet; it's possible that we have a sentence like "A", in which case\n    // we wouldn't have updated `counts` with the word "a" yet (because we never\n    // got to set the value of `was_alphanumeric` to true before using it to\n    // check if we should update).\n    if (!word.empty())\n      update(counts, word);\n\n    return counts;\n  }\n};	\N	\N	0	1	2014-09-12 23:54:23	2014-09-12 23:54:23	277	word_count.h
479	6	1421273a419c57080e780af4	pending	cpp	word-count	#include <map>\n#include <string>\n\nnamespace word_count\n{\n  void update(std::map<std::string, int> &counts, std::string word)\n  {\n    if (counts.find(word) != counts.end())\n      counts[word] += 1;\n    else\n      counts[word] = 1;\n  }\n\n  std::map<std::string, int> words(const std::string &sentence)\n  {\n    std::map<std::string, int> counts; // A map containing our results.\n    std::string word = ""; // Keeps track of a run of alphanumeric characters.\n    bool was_alphanumeric = false; // Flag referring to the last character read.\n\n    for (auto letter : sentence)\n    {\n      bool is_alphanumeric = (letter >= 'A' && letter <= 'Z') ||\n                             (letter >= 'a' && letter <= 'z') ||\n                             (letter >= '0' && letter <= '9');\n\n      if (is_alphanumeric)\n        word.push_back(tolower(letter));\n\n      // If this is the first non-alphanumeric character we've found since we\n      // last came across an alphanumeric character, we say we've found the end\n      // of a word and update `counts` with the completed word.\n      if (!is_alphanumeric && was_alphanumeric)\n      {\n        update(counts, word);\n        word.erase();\n      }\n\n      was_alphanumeric = is_alphanumeric;\n    }\n\n    // We need to check if we have a word we haven't updated with the collection\n    // with yet; it's possible that we have a sentence like "A", in which case\n    // we wouldn't have updated `counts` with the word "a" yet (because we never\n    // got to set the value of `was_alphanumeric` to true before using it to\n    // check if we should update).\n    if (!word.empty())\n      update(counts, word);\n\n    return counts;\n  }\n};	\N	\N	0	2	2014-10-18 05:30:13	2014-10-18 05:30:13	277	word_count.h
480	34	de093092c161b5f585c25ef8	pending	python	bob	def hey(message):\n    if message.isupper():\n        return 'Whoa, chill out!'\n    if message.strip():\n    \tpunctuation = message.strip()[-1]\n    \treturn 'Sure.' if punctuation == '?' else 'Whatever.'\n    return 'Fine. Be that way!'	\N	\N	0	1	2014-09-07 23:13:24	2014-09-07 23:13:24	278	bob.py
481	16	cb973dcd7cd46e510d11e3da	pending	go	house	package house\n\nfunc Embed(relPhrase, nounPhrase string) string {\n\treturn relPhrase + " " + nounPhrase\n}\n\nfunc Verse(subject string, relPhrases []string, nounPhrase string) string {\n\tfor i := len(relPhrases) - 1; i >= 0; i-- {\n\t\tnounPhrase = Embed(relPhrases[i], nounPhrase)\n\t}\n\treturn subject + " " + nounPhrase\n}\n\nvar songPhrases = []string{\n\t"the horse and the hound and the horn\\nthat belonged to",\n\t"the farmer sowing his corn\\nthat kept",\n\t"the rooster that crowed in the morn\\nthat woke",\n\t"the priest all shaven and shorn\\nthat married",\n\t"the man all tattered and torn\\nthat kissed",\n\t"the maiden all forlorn\\nthat milked",\n\t"the cow with the crumpled horn\\nthat tossed",\n\t"the dog\\nthat worried",\n\t"the cat\\nthat killed",\n\t"the rat\\nthat ate",\n\t"the malt\\nthat lay in",\n}\n\nfunc Song() string {\n\ts := ""\n\tfor i := len(songPhrases); i >= 0; i-- {\n\t\ts += Verse("This is", songPhrases[i:], "the house that Jack built.")\n\t\tif i > 0 {\n\t\t\ts += "\\n\\n"\n\t\t}\n\t}\n\treturn s\n}	\N	\N	0	1	2014-05-18 05:00:23	2014-05-18 05:00:23	279	house.go
482	16	72f38a47734d3e1627909a00	pending	python	hamming	def hamming(dna1, dna2):\n\titerations = 0\n\thamming = 0\n\n\tif len(dna2) < len(dna1):\n\t\titerations = len(dna2)\n\t\thamming = len(dna1) - len(dna2)\n\telse:\n\t\titerations = len(dna1)\n\t\thamming = len(dna2) - len(dna1)\n\n\tfor i in range(iterations):\n\t\tif dna1[i] != dna2[i]:\n\t\t\thamming += 1\n\t\ti+=1\n\n\treturn hamming	\N	\N	0	1	2014-04-01 01:36:52	2014-04-01 01:36:52	280	hamming.py
483	16	59c56c97d7ba422e3a5c4fbd	pending	csharp	etl	﻿using System.Collections.Generic;\r\n\r\nnamespace etl\r\n{\r\n    public class Etl\r\n    {\r\n        public static Dictionary<string, int> Transform(Dictionary<int, IList<string>> old)\r\n        {\r\n            var dictionary = new Dictionary<string, int>();\r\n\r\n            foreach (var tileList in old)\r\n            {\r\n                foreach (var tileLetter in tileList.Value)\r\n                {\r\n                    dictionary.Add(tileLetter.ToLower(), tileList.Key);\r\n                }\r\n            }\r\n\r\n            return dictionary;\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-03-07 09:13:08	2014-03-07 09:13:08	281	Etl.cs
484	16	55860ff43f49699034225eae	superseded	ruby	nucleotide-count	class DNA\n\n  attr_reader :nucleotides\n\n  def initialize(strand)\n    if valid_dna?(strand)\n      @nucleotides = strand\n    else\n      raise ArgumentError \n    end\n  end\n\n  def valid_dna?(input)\n    letters = input.split("")\n    letters.all?{|letter| dna_nucleotides.include?(letter)}\n  end\n\n  def count(nucleotide)\n    if valid_dna?(nucleotide)\n      nucleotides.count(nucleotide)\n    else\n      raise ArgumentError.new("Bad DNA")\n    end\n  end\n\n  def dna_nucleotides\n    ['A', 'T', 'C', 'G']\n  end\n\n  def nucleotide_counts\n    dna_nucleotides.each_with_object({}) do |nucleotide, result| \n      result[nucleotide] = count(nucleotide)\n    end\n  end\n\nend	\N	\N	0	1	2014-07-22 13:14:30	2014-07-22 13:14:30	282	nucleotide-count.rb
485	16	66cf232378a5771d3a0422d1	pending	ruby	nucleotide-count	class DNA\n\n  attr_reader :nucleotides\n\n  def initialize(strand)\n    raise ArgumentError unless valid_dna?(strand)\n    @nucleotides = strand\n  end\n\n  def valid_dna?(input)\n    letters = input.split("")\n    letters.all?{|letter| dna_nucleotides.include?(letter)}\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new("Bad DNA") unless valid_dna?(nucleotide)\n    nucleotides.count(nucleotide)\n  end\n\n  def dna_nucleotides\n    ['A', 'T', 'C', 'G']\n  end\n\n  def nucleotide_counts\n    {'A' => count('A'), 'T' => count('T'), 'G' => count('G'), 'C' => count('C')}\n  end\n\nend	\N	\N	0	2	2014-10-04 09:15:44	2014-10-04 09:15:44	282	nucleotide-count.rb
486	16	ec862ed81903d54a6a23b5a1	superseded	python	leap	'''year.py\n\tcreated 23 Sept 2014\n\tby @jestuber\n'''\n\ndef is_leap_year(year):\n\t#check if we have a year\n\ttry:\n\t\tval = int(year) \n\texcept ValueError:\n\t\tprint("Please enter an integer year")\n\n\tif year%4 == 0:\n\t\tif year%400 == 0:\n\t\t\treturn True\n\t\tif year%100 == 0:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\telse:\n\t\treturn False	\N	\N	0	1	2014-06-22 00:13:07	2014-06-22 00:13:07	283	year.py
487	16	4bf35617977f2f16dfc5c2cd	pending	python	leap	'''year.py\n\tcreated 23 Sept 2014\n\tby @jestuber\n'''\n\n\ndef is_leap_year(year):\n\t'''leap years occur:\n\ton every year that is evenly divisible by 4\n\texcept every year that is evenly divisible by 100\n    unless the year is also evenly divisible by 400\n    '''\n\n\n\t#check if we have a year\n\ttry:\n\t\tval = int(year) \n\texcept ValueError:\n\t\tprint("Please enter an integer year")\n\n\tif year%400 == 0:\n\t\t\treturn True\n\telif year%100 == 0:\n\t\t\treturn False\n\telif year%4 == 0:\n\t\t\treturn True\n\telse:\n\t\treturn False	\N	\N	0	2	2014-07-05 05:28:55	2014-07-05 05:28:55	283	year.py
488	16	caaf7a6bf7bffe0d1e682fc7	pending	javascript	space-age	var SpaceAge = function(seconds){\n  this.seconds = seconds;\n\n  var earthYears = this.seconds/31557600;\n\n  var rounding = function(planetYears){\n    return Math.round(earthYears / planetYears *100)/100;\n  };\n\n  this.onEarth = function(){\n    return rounding(1);\n  };\n  this.onMercury = function (){\n    return rounding(0.2408467);\n  }\n  this.onVenus = function (){\n    return rounding(0.61519726);\n  }\n\n  this.onMars = function (){\n    return rounding(1.8808158);\n  }\n\n  this.onJupiter = function (){\n    return rounding(11.862615);\n  }\n\n  this.onSaturn = function (){\n    return rounding(29.447498);\n  }\n\n  this.onUranus = function (){\n    return rounding(84.016846);\n  }\n\n   this.onNeptune = function (){\n    return rounding(164.79132);\n  }\n};\n\n\n\nmodule.exports = SpaceAge;	\N	\N	0	1	2014-06-26 13:47:49	2014-06-26 13:47:49	284	space-age.js
489	16	3d45d0d960c80c15ecbd7677	pending	clojure	nucleotide-count	(ns dna\n  (:refer-clojure :exclude [count])\n  (:require [clojure.core :as core]))\n\n(def valid-nucleotides? (set "AGCTU"))\n\n(defn count [n strand]\n  (if (valid-nucleotides? n)\n    (core/count (filter #(= n %) strand))\n    (throw (Exception. "invalid nucleotide"))\n    ))\n\n(defn nucleotide-counts [strand]\n  {\\A (count \\A strand),\n   \\T (count \\T strand),\n   \\C (count \\C strand),\n   \\G (count \\G strand)}\n  )	\N	\N	0	2	2014-04-24 14:02:55	2014-04-24 14:02:55	285	dna.clj
490	16	8baf2e18faf1425a3f02eec3	superseded	clojure	nucleotide-count	(ns dna\n  (:refer-clojure :exclude [count])\n  (:require [clojure.core :as core]))\n\n(def valid-nucleotides (set "AGCTU"))\n\n(defn count [n strand]\n  (if (not (contains? valid-nucleotides n))\n    (throw (Exception. "invalid nucleotide"))\n    (core/count (filter #(= n %) strand))))\n\n(defn nucleotide-counts [strand]\n  {\\A (count \\A strand),\n   \\T (count \\T strand),\n   \\C (count \\C strand),\n   \\G (count \\G strand)}\n  )	\N	\N	0	1	2014-06-22 04:28:13	2014-06-22 04:28:13	285	dna.clj
491	16	ab4a6693e400a8ef83192ed4	superseded	javascript	bob	var Bob = function() {\n\tthis.hey = function(whatIsSaid) {\n\t\tswitch (whatIsSaid) {\n\t\t\tcase "Tom-ay-to, tom-aaaah-to.":\n\t\t\t\tvar response = "Whatever.";\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n\t\t\tcase "WATCH OUT!":\n\t\t\t\tvar response = "Whoa, chill out!";\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n\n    \t\tcase "Does this cryogenic chamber make me look fat?":\n    \t\t\tvar response = 'Sure.'\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "Let's go make out behind the gym!":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "It's OK if you don't want to go to the DMV.":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "WHAT THE HELL WERE YOU THINKING?":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "1, 2, 3 GO!":\n    \t\t\tvar response = 'Whoa, chill out!'\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "1, 2, 3":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "4?":\n    \t\t\tvar response = 'Sure.';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "\\xdcML\\xc4\\xdcTS!":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "\\xfcML\\xe4\\xdcTS":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "I HATE YOU":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "Ending with a ? means a question.":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "Wait! Hang on.  Are you going to be OK?":\n    \t\t\tvar response = 'Sure.';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "":\n    \t\t\tvar response = 'Fine. Be that way!';\n\t\t\t\treturn response;\n\t\t\t\tbreak;\n    \t\tcase "   ":\n    \t\t\tvar response = 'Fine. Be that way!';\n \t\t\t\treturn response;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\nmodule.exports = Bob;	\N	\N	0	1	2014-03-10 12:00:44	2014-03-10 12:00:44	286	bob.js
492	16	c1240e3a3ebf1fe4328d54a9	superseded	javascript	bob	var Bob = function() {\n\tthis.hey = function(whatIsSaid) {\n\t\tswitch (whatIsSaid) {\n\t\t\tcase "Tom-ay-to, tom-aaaah-to.":\n\t\t\t\tvar response = "Whatever.";\n\t\t\t\tbreak;\n\t\t\tcase "WATCH OUT!":\n\t\t\t\tvar response = "Whoa, chill out!";\n\t\t\t\tbreak;\n    \t\tcase "Does this cryogenic chamber make me look fat?":\n    \t\t\tvar response = 'Sure.'\n\t\t\t\tbreak;\n    \t\tcase "Let's go make out behind the gym!":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "It's OK if you don't want to go to the DMV.":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "WHAT THE HELL WERE YOU THINKING?":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "1, 2, 3 GO!":\n    \t\t\tvar response = 'Whoa, chill out!'\n\t\t\t\tbreak;\n    \t\tcase "1, 2, 3":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "4?":\n    \t\t\tvar response = 'Sure.';\n\t\t\t\tbreak;\n    \t\tcase "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "\\xdcML\\xc4\\xdcTS!":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "\\xfcML\\xe4\\xdcTS":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "I HATE YOU":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "Ending with a ? means a question.":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "Wait! Hang on.  Are you going to be OK?":\n    \t\t\tvar response = 'Sure.';\n\t\t\t\tbreak;\n    \t\tcase "":\n    \t\t\tvar response = 'Fine. Be that way!';\n\t\t\t\tbreak;\n    \t\tcase "   ":\n    \t\t\tvar response = 'Fine. Be that way!';\n\t\t\t\tbreak;\n\t\t}\n\t\tif (typeof response != 'undefined') {\n\t\t\treturn response;\n\t\t}\n\t}\n}\nmodule.exports = Bob;	\N	\N	0	2	2014-04-14 00:05:49	2014-04-14 00:05:49	286	bob.js
493	16	10b35fd837971be24bd15450	pending	javascript	bob	var Bob = function() {;\n\n\tthis.hey = function(sentence) {\n\t\t\n\t\tvar isQuestion = (/[^A-Z]\\?$|[K|Y]\\?$/).test(sentence);\n\t\tvar isYelling = (/[A-Z]{4}|[A-Z|0-9]\\!$/).test(sentence);\n\t\tvar isSilence = (/^\\s*$/).test(sentence);\n\n\t\tif (isQuestion) \n\t\t\t{return "Sure.";}\n\t\tif (isYelling)\n\t\t\t{return "Whoa, chill out!";}\n\t\tif (isSilence)\n\t\t\t{return "Fine. Be that way!";}\n\t\telse \n\t\t\t{return "Whatever.";}\n\n\t}\n}\nmodule.exports = Bob;	\N	\N	0	5	2014-06-14 18:27:35	2014-06-14 18:27:35	286	bob.js
494	16	95a82d3557f96b05bcf652ad	superseded	javascript	bob	var Bob = function() {\n\tthis.hey = function(whatIsSaid) {\n\t\tswitch (whatIsSaid) {\n\t\t\tcase "Tom-ay-to, tom-aaaah-to.":\n\t\t\t\tvar response = "Whatever.";\n\t\t\t\tbreak;\n\t\t\tcase "WATCH OUT!":\n\t\t\t\tvar response = "Whoa, chill out!";\n\t\t\t\tbreak;\n    \t\tcase "Does this cryogenic chamber make me look fat?":\n    \t\t\tvar response = 'Sure.'\n\t\t\t\tbreak;\n    \t\tcase "Let's go make out behind the gym!":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "It's OK if you don't want to go to the DMV.":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "WHAT THE HELL WERE YOU THINKING?":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "1, 2, 3 GO!":\n    \t\t\tvar response = 'Whoa, chill out!'\n\t\t\t\tbreak;\n    \t\tcase "1, 2, 3":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "4?":\n    \t\t\tvar response = 'Sure.';\n\t\t\t\tbreak;\n    \t\tcase "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "\\xdcML\\xc4\\xdcTS!":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "\\xfcML\\xe4\\xdcTS":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "I HATE YOU":\n    \t\t\tvar response = 'Whoa, chill out!';\n\t\t\t\tbreak;\n    \t\tcase "Ending with a ? means a question.":\n    \t\t\tvar response = 'Whatever.';\n\t\t\t\tbreak;\n    \t\tcase "Wait! Hang on.  Are you going to be OK?":\n    \t\t\tvar response = 'Sure.';\n\t\t\t\tbreak;\n    \t\tcase "":\n    \t\t\tvar response = 'Fine. Be that way!';\n\t\t\t\tbreak;\n    \t\tcase "   ":\n    \t\t\tvar response = 'Fine. Be that way!';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar response = '';\n\t\t\t\tbreak;\n\t\t}\n\t\tif (typeof response != 'undefined') {\n\t\t\treturn response;\n\t\t}\n\t}\n}\nmodule.exports = Bob;	\N	\N	0	3	2014-09-01 21:32:50	2014-09-01 21:32:50	286	bob.js
495	16	8610f8255fa4a15a8721e9d7	superseded	javascript	bob	var Bob = function() {;\n\n\tthis.hey = function(sentence) {\n\t\t\n\t\tvar isQuestion = (/[^A-Z]\\?$|[K|Y]\\?$/).test(sentence);\n\t\tvar isForceful = (/\\!$/).test(sentence);\n\t\tvar isYelling = (/[A-Z]{4}|[A-Z|0-9]\\!$/).test(sentence);\n\t\tvar isSilence = (/^\\s*$/).test(sentence);\n\n\t\tif (isQuestion) \n\t\t\t{return "Sure.";}\n\t\tif (isYelling)\n\t\t\t{return "Whoa, chill out!";}\n\t\tif (isSilence)\n\t\t\t{return "Fine. Be that way!";}\n\t\telse \n\t\t\t{return "Whatever.";}\n\n\t}\n}\nmodule.exports = Bob;	\N	\N	0	4	2014-10-13 10:14:50	2014-10-13 10:14:50	286	bob.js
496	16	69eeff3ae8892cb92283960f	pending	python	word-count	def word_count(sentence):\n\twordCount = {}\n\twords = sentence.split()\n\n\tfor word in words:\n\t\tif word not in wordCount:\n\t\t\twordCount[word] = 0\n\t\twordCount[word] = wordCount[word] + 1\n\n\treturn wordCount	\N	\N	0	1	2014-07-01 19:05:39	2014-07-01 19:05:39	287	wordcount.py
497	18	107908968c62fa67ee7563c7	pending	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Calendar (Day(..), addDays)\n\n-- Gigasecond anniversary will happen on the 11574th day.\nfromDay :: Day -> Day\nfromDay = addDays 11574	\N	\N	0	1	2014-09-07 12:23:36	2014-09-07 12:23:36	288	Gigasecond.hs
498	18	8869959117f05d5137d170cb	superseded	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n    if (what.isupper() == True) or (what[-1:].endswith('?') == True and what.isupper() == True):\n        return 'Whoa, chill out!'\n    elif what.isspace() or what == '':\n        return 'Fine. Be that way!'\n    elif what[-1:].endswith('?') == True:\n        return 'Sure.'\n    if what[-1:].endswith('.') == True:\n        return 'Whatever.'\n    else:\n        return 'Whatever.'	\N	\N	0	1	2014-08-11 04:43:05	2014-08-11 04:43:05	289	bob.py
499	18	4aca8b9431ba45072996c7cb	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n    if (what.endswith('?') and what.isupper()) or what.isupper():\n        return 'Whoa, chill out!'\n    elif what.isspace() or what == '':\n        return 'Fine. Be that way!'\n    elif what.endswith('?'):\n        return 'Sure.'\n    else:\n        return 'Whatever.'	\N	\N	0	2	2014-09-27 21:52:42	2014-09-27 21:52:42	289	bob.py
500	18	f1a74f1f14a5d5b3be04a503	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    digits = %w(1000 900 500 400 100 90 50 40 10 9 5 4 1).map(&:to_i)\n    numerals = %w(M CM D CD C XC L XL X IX V IV I)\n    roman_numerals = digits.zip(numerals).to_h\n\n    return unless numeral = roman_numerals.detect { |k,v| k <= self }\n    numeral_value, numeral_character = numeral\n    div, mod = self.divmod(numeral_value)\n    "#{numeral_character * div}#{mod.to_roman}"\n  end\nend	\N	\N	0	1	2014-07-24 23:57:08	2014-07-24 23:57:08	290	roman.rb
501	18	8133021755812aa6de6e8564	superseded	javascript	word-count	function words(string) {\n  var punctReplacer = function(strToConvert) {\n    var charSet = /[!-/:-@[-`{-~¿¡]/g;\n    var newStr = strToConvert.replace(charSet, "").replace(/\\n/g, " ").replace(/\\s{2,}/g, " ");\n    return newStr;\n  };\n\n  var stringArr = punctReplacer(string.toLowerCase()).split(" ");\n  var counts = {};\n\n  for (var i=0; i < stringArr.length; i++) {\n    if (stringArr[i] in counts) {\n      counts[stringArr[i]]++;\n\n    } else {\n      counts[stringArr[i]] = 1;\n    }\n  }\n  return counts;\n}	\N	\N	0	1	2014-07-07 18:28:32	2014-07-07 18:28:32	291	word-count.js
502	18	2320d4be3c8eb1a6f9dc6ca9	pending	javascript	word-count	function words(string) {\n  var punctReplacer = function(strToConvert) {\n    var charSet = /[!-/:-@[-`{-~¿¡]/g,\n        newStr = strToConvert.replace(charSet, "").replace(/\\n/g, " ").replace(/\\s{2,}/g, " ");\n    return newStr;\n  };\n\n  var stringArr = punctReplacer(string.toLowerCase()).split(" "),\n      counts = {};\n\n  for (var i=0; i < stringArr.length; i++) {\n    if (counts.hasOwnProperty(stringArr[i])) {\n      counts[stringArr[i]]++;\n    } else {\n      counts[stringArr[i]] = 1;\n    }\n  }\n  return counts;\n}	\N	\N	0	2	2014-07-30 18:28:10	2014-07-30 18:28:10	291	word-count.js
503	18	7dbfd42245b8ebec1a85f445	pending	elixir	rna-transcription	defmodule DNA do\n  @translation Enum.into [{?A, ?U}, {?T, ?A}, {?C, ?G}, {?G, ?C}], %{}\n\n  @doc """\n  Transcribes a character list representing DNA nucleotides to RNA\n\n  ## Examples\n\n  iex> DNA.to_rna('ACTG')\n  'UGAC'\n  """\n  @spec to_rna([char]) :: [char]\n  def to_rna(dna) do\n    Enum.map(dna, fn key -> transcribe(key) end)\n  end\n\n  defp transcribe(key) do\n    Map.fetch!(@translation, key)\n  end\nend	\N	\N	0	1	2014-07-23 10:22:26	2014-07-23 10:22:26	292	dna.exs
504	18	9858952ab4a93098cce6a160	superseded	haskell	nucleotide-count	module DNA \n  ( count\n  , nucleotideCounts\n  ) where\n\nimport Data.List (foldl')\nimport qualified Data.Map as M\n\ncount :: Char -> String -> Int\ncount n s\n    | validNucleotide n = length $ filter (== n) s\n    | otherwise = error $ "invalid nucleotide '" ++ [n] ++ "'"\n    -- ^ throwing errors feels so wrong, but \n    -- it's required by the test cases\n  where validNucleotide = flip elem "ATCGU"\n\nnucleotideCounts :: String -> M.Map Char Int\nnucleotideCounts = foldl' insert initial\n  where insert m n = M.insertWith (+) n 1 m\n        initial = M.fromList $ zip "ATCG" (repeat 0)	\N	\N	0	2	2014-07-09 13:44:27	2014-07-09 13:44:27	293	nucleotide-count.hs
505	18	09294d8751cfa78f4b3ddb42	pending	haskell	nucleotide-count	module DNA \n  ( count\n  , nucleotideCounts\n  ) where\n\nimport Data.List (foldl')\nimport qualified Data.Map as M\n\ncount :: Char -> String -> Int\ncount n s\n    | validNucleotide n = length $ filter (== n) s\n    | otherwise = error $ "invalid nucleotide '" ++ [n] ++ "'"\n  where validNucleotide = flip elem "ATCGU"\n\nnucleotideCounts :: String -> M.Map Char Int\nnucleotideCounts = M.fromListWith (+) \n                 . (initial ++) \n                 . flip zip (repeat 1)\n  where initial = zip "ATCG" (repeat 0)	\N	\N	0	3	2014-08-18 07:11:03	2014-08-18 07:11:03	293	nucleotide-count.hs
506	18	c5f529209503b7d065d953e8	superseded	haskell	nucleotide-count	module DNA \n  ( count\n  , nucleotideCounts\n  ) where\n\nimport qualified Data.Map as M\n\ncount :: Char -> String -> Int\ncount n s\n    | validNucleotide n = length $ filter (== n) s\n    | otherwise = error $ "invalid nucleotide '" ++ [n] ++ "'"\n    -- ^ throwing errors feels so wrong, but \n    -- it's required by the test cases\n  where validNucleotide = flip elem "ATCGU"\n\nnucleotideCounts :: String -> M.Map Char Int\nnucleotideCounts = foldl insert initial\n  where insert m n = M.insertWith (+) n 1 m\n        initial = M.fromList $ zip "ATCG" (repeat 0)	\N	\N	0	1	2014-10-10 13:02:38	2014-10-10 13:02:38	293	nucleotide-count.hs
507	18	0bfecb02e43404e20d2fd071	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word.downcase\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (word_is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def word_is_anagram?(word)\n    word = word.downcase\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(word)\n    bool_flag = true\n    bool_flag = false if @a_word == word\n    word_hash.each do |key,val|\n      if (!@a_word_hash.has_key?(key)||@a_word_hash.keys.length!=word_hash.keys.length||@a_word_hash[key]!=val)\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def letter_count_hash(word)\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	\N	0	1	2014-06-21 02:28:13	2014-06-21 02:28:13	294	anagram.rb
508	18	1098e1158103f631ad3912f5	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def is_anagram?(word)\n    temp_word = word.downcase\n    return false if @a_word == temp_word #don't allow identical words as anagrams\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(temp_word)\n    return false unless same_number_of_letters?(@a_word_hash,word_hash)\n    bool_flag = true\n    word_hash.each do |key,val|\n      unless @a_word_hash.key?(key)&&@a_word_hash[key]==val\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def same_number_of_letters?(word1_hash,word2_hash)\n    word1_hash.keys.length==word2_hash.keys.length\n  end\n  def letter_count_hash(word)\n    #{"dab"=>1,"bad"=>3,"etc"=>4}\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	\N	0	4	2014-07-25 23:16:32	2014-07-25 23:16:32	294	anagram.rb
509	18	e2224623dd9a2457a11bc47d	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word.downcase\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (word_is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def word_is_anagram?(word)\n    word = word.downcase\n    return false if @a_word == word #don't allow identical words as anagrams\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(word)\n    return false unless same_number_of_letters?(@a_word_hash,word_hash)\n    bool_flag = true\n    word_hash.each do |key,val|\n      if (!@a_word_hash.has_key?(key)||@a_word_hash[key]!=val)\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def same_number_of_letters?(word1_hash,word2_hash)\n    word1_hash.keys.length==word2_hash.keys.length\n  end\n  def letter_count_hash(word)\n    #{"dab"=>1,"bad"=>3,"etc"=>4}\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	\N	0	2	2014-08-07 11:00:15	2014-08-07 11:00:15	294	anagram.rb
510	18	6aff471ba204b57a9212be18	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word)\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    count_letters(candidate) == count_letters(subject)\n  end\n  \n  def count_letters(letters)\n    Hash.new(0).tap do |letter_counts|\n      letters.each_char { |letter| letter_counts[letter] += 1 }\n    end\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	\N	0	11	2014-08-07 13:41:01	2014-08-07 13:41:01	294	anagram.rb
511	18	70e6d16b2bc86ab372cd03a3	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word.downcase\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (word_is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def word_is_anagram?(word)\n    temp_word = word.downcase\n    return false if @a_word == temp_word #don't allow identical words as anagrams\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(temp_word)\n    return false unless same_number_of_letters?(@a_word_hash,word_hash)\n    bool_flag = true\n    word_hash.each do |key,val|\n      unless @a_word_hash.key?(key)&&@a_word_hash[key]==val\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def same_number_of_letters?(word1_hash,word2_hash)\n    word1_hash.keys.length==word2_hash.keys.length\n  end\n  def letter_count_hash(word)\n    #{"dab"=>1,"bad"=>3,"etc"=>4}\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	\N	0	3	2014-08-16 05:31:51	2014-08-16 05:31:51	294	anagram.rb
512	18	a633f55499ef34d0981bd43c	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word\n  end\n  \n  def match(words)\n    matches =  []\n    words.each do |word|\n      if (perfect_anagram?(word))\n        matches.push(word)\n      end\n    end\n    matches\n  end\n  \n  private\n  \n  def perfect_anagram?(word)\n    #perfect anagrams have the same number of letters as the original subject\n    return false if @subject == word.downcase #don't allow identical words as anagrams\n    subject_letter_counts = count_letters(@subject.downcase)\n    letter_counts = count_letters(word.downcase)\n    return false unless same_letters?(subject_letter_counts,letter_counts)\n    letter_counts.all? {|key,val| subject_letter_counts.key?(key) && subject_letter_counts[key] == val}\n  end\n  \n  def same_letters?(letter_counts1, letter_counts2)\n    letter_counts1.keys.length == letter_counts2.keys.length\n  end\n\n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    @letter_counts = {}\n    word.each_char do |letter|\n      @letter_counts[letter] = @letter_counts[letter].nil? ? 0 : @letter_counts[letter] + 1\n    end\n    @letter_counts\n  end\n\nend	\N	\N	0	5	2014-08-17 17:36:12	2014-08-17 17:36:12	294	anagram.rb
534	18	4f162921ae9d15c922a00419	superseded	ruby	bob	class Bob\n  TRANSLATION_TABLE = {\n    "Fine. Be that way!" => lambda { |words| !words || words.lstrip.empty? },\n    "Woah, chill out!"   => lambda { |words| words == words.upcase },\n    "Sure."              => lambda { |words| words[-1] == "?" }\n  }\n  def hey(words)\n    TRANSLATION_TABLE.each_pair  do |response, test|\n      return response if test.call(words)\n    end\n    "Whatever."\n  end\n\nend	\N	\N	0	1	2014-09-22 17:06:55	2014-09-22 17:06:55	302	bob.rb
513	18	ef5d5e854b4b104673fc74a9	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word.downcase\n  end\n  \n  def match(possible_anagrams)\n    matches = possible_anagrams.select { |possible_anagram| anagram?(possible_anagram.downcase) }\n  end\n  \n  private\n  \n  def anagram?(possible_anagram)\n    unidentical_word?(possible_anagram) && same_letter_frequency?(possible_anagram)\n  end\n  \n  def same_letter_frequency?(possible_anagram)\n    letter_counts = count_letters(possible_anagram)\n    subject_letter_counts = count_letters(@subject)\n    letter_counts.keys.length == subject_letter_counts.keys.length && letter_counts.all? {|letter,count| subject_letter_counts.key?(letter) && subject_letter_counts[letter] == count}\n  end\n  \n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    letter_counts = {}\n    word.each_char do |letter|\n      letter_counts[letter] = letter_counts[letter].nil? ? 0 : letter_counts[letter] + 1\n    end\n    letter_counts\n  end\n\n  def unidentical_word?(word)\n    @subject != word.downcase\n  end\n\nend	\N	\N	0	7	2014-09-13 14:19:58	2014-09-13 14:19:58	294	anagram.rb
514	18	134d5f415d6d1ee2765e00ef	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    letter_counts = count_letters(candidate)\n    subject_letter_counts = count_letters(@subject)\n    letter_counts.eql?(subject_letter_counts)\n  end\n  \n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    letter_counts = Hash.new(0)\n    word.each_char do |letter|\n      letter_counts[letter] += 1\n    end\n    letter_counts\n  end\n\n  def identical_word?(word)\n    @subject == word\n  end\n\nend	\N	\N	0	8	2014-09-19 19:08:48	2014-09-19 19:08:48	294	anagram.rb
515	18	77265560ff281a925b8afcbc	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word\n  end\n  \n  def match(words)\n    matches =  []\n    words.each do |word|\n      if (perfect_anagram?(word))\n        matches.push(word)\n      end\n    end\n    matches\n  end\n  \n  private\n  \n  def perfect_anagram?(word)\n    #perfect anagrams have the same number of letters as the original subject\n    return false if @subject == word.downcase #don't allow identical words as anagrams\n    subject_letter_counts = count_letters(@subject.downcase)\n    letter_counts = count_letters(word.downcase)\n    return false unless same_letters?(subject_letter_counts,letter_counts)\n    letter_counts.all? {|letter,count| subject_letter_counts.key?(letter) && subject_letter_counts[letter] == count}\n  end\n  \n  def same_letters?(letter_counts1, letter_counts2)\n    letter_counts1.keys.length == letter_counts2.keys.length\n  end\n\n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    @letter_counts = {}\n    word.each_char do |letter|\n      @letter_counts[letter] = @letter_counts[letter].nil? ? 0 : @letter_counts[letter] + 1\n    end\n    @letter_counts\n  end\n\nend	\N	\N	0	6	2014-10-19 20:39:23	2014-10-19 20:39:23	294	anagram.rb
516	18	7cd2f3378b6ed6ba43b0a826	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word)\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    count_letters(candidate) == count_letters(subject)\n  end\n  \n  def count_letters(letters)\n    letter_counts = Hash.new(0)\n    letters.each_char { |letter| letter_counts[letter] += 1 }\n    return letter_counts\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	\N	0	10	2014-10-23 02:51:57	2014-10-23 02:51:57	294	anagram.rb
517	18	0ad7ac393d6b28706bb6674f	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word="")\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    count_letters(candidate) == count_letters(subject)\n  end\n  \n  def count_letters(letters)\n    letter_counts = Hash.new(0)\n    letters.each_char { |letter| letter_counts[letter] += 1 }\n    return letter_counts\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	\N	0	9	2014-10-31 14:37:03	2014-10-31 14:37:03	294	anagram.rb
518	18	d5ea7f5988378cb7d4f4e522	pending	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word)\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    letter_frequency(candidate) == letter_frequency(subject)\n  end\n  \n  def letter_frequency(letters)\n    Hash.new(0).tap do |letter_frequencies|\n      letters.each_char { |letter| letter_frequencies[letter] += 1 }\n    end\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	\N	0	12	2014-11-01 00:37:48	2014-11-01 00:37:48	294	anagram.rb
519	18	aa763a19eba9c806dc9ae297	superseded	haskell	sum-of-multiples	module SumOfMultiples (sumOfMultiples, sumOfMultiplesDefault, isMultiple) where\n\nsumOfMultiplesDefault :: Int -> Int\nsumOfMultiplesDefault x = sumOfMultiples [3, 5] x\n\nsumOfMultiples :: [Int] -> Int -> Int\nsumOfMultiples xs a = sum [ x | x <- [1..(a-1)], isMultiple xs x ]\n\n\nisMultiple :: [Int] -> Int -> Bool\nisMultiple xs a = any (isDivisible a) xs\n    where isDivisible first second = (mod first second == 0)	\N	\N	0	1	2014-06-24 22:41:40	2014-06-24 22:41:40	295	SumOfMultiples.hs
520	18	01fe8efc17add7944b7c0f43	pending	haskell	sum-of-multiples	module SumOfMultiples (sumOfMultiples, sumOfMultiplesDefault, isMultiple) where\n\nsumOfMultiplesDefault :: Int -> Int\nsumOfMultiplesDefault = sumOfMultiples [3, 5]\n\nsumOfMultiples :: [Int] -> Int -> Int\nsumOfMultiples xs a = sum [ x | x <- [1..(a-1)], isMultiple xs x ]\n\n\nisMultiple :: [Int] -> Int -> Bool\nisMultiple xs a = any (isDivisible a) xs\n    where isDivisible first =  (==0) . mod first	\N	\N	0	2	2014-07-19 17:23:20	2014-07-19 17:23:20	295	SumOfMultiples.hs
521	18	4695b6ef5324ae46875971ab	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(date):\n  return date + datetime.timedelta(seconds=10**9)	\N	\N	0	1	2014-06-27 09:45:40	2014-06-27 09:45:40	296	gigasecond.py
535	18	16f1a76427032f397e223403	superseded	ruby	bob	class Bob\n  TRANSLATION_TABLE = {\n    "Fine. Be that way!" => lambda { |words| !words || words.lstrip.empty? },\n    "Woah, chill out!"   => lambda { |words| words == words.upcase },\n    "Sure."              => lambda { |words| words[-1] == "?" },\n    "Whatever."          => lambda { |words| true }\n  }\n  def hey(words)\n    TRANSLATION_TABLE.detect do |response, test|\n      test === words\n    end.first\n  end\n\nend	\N	\N	0	2	2014-10-18 11:05:33	2014-10-18 11:05:33	302	bob.rb
567	45	c088974d6ecce786656c652d	pending	clojure	nucleotide-count	(ns nucleotide_count\n  (:refer-clojure :exclude [count]))\n\n\n(defn count\n  [character dna-strand]\n\n  ;; wtf uracil ...\n  (when-not (get #{\\A \\T \\G \\C \\U} character)\n    (throw (Exception. "invalid nucleotide")))\n\n  (->> dna-strand\n       (filter #{character})\n       (clojure.core/count)))\n\n(defn nucleotide-counts\n  [s]\n  (->> (frequencies s)\n       (merge {\\A 0 \\T 0 \\G 0 \\C 0})))	\N	\N	0	1	2014-11-11 12:14:37	2014-11-11 12:14:37	326	nucleotide_count.clj
522	18	0347ed67e1eafb17ea80585f	pending	ruby	food-chain	require 'pry'\n\nclass FoodChainSong\n  LINES = [\n    ['fly', "I don't know why she swallowed the fly. Perhaps she'll die.\\n"],\n    ['spider', 'It wriggled and jiggled and tickled inside her.'],\n    ['bird', 'How absurd to swallow a bird!'],\n    ['cat', 'Imagine that, to swallow a cat!'],\n    ['dog', 'What a hog, to swallow a dog!'],\n    ['goat', 'Just opened her throat and swallowed a goat!'],\n    ['cow', "I don't know how she swallowed a cow!"],\n    ['horse', "She's dead, of course!\\n"]\n  ]\n  private_constant :LINES\n\n  def verse(position)\n    lines =\n      if last_verse?(position)\n        swallow_and_awe(LINES.last)\n      else\n        lines = (position - 1)\n          .downto(1)\n          .each_with_object(swallow_and_awe(LINES[position - 1])) do |p, lines|\n            lines << swallowed_to_catch(LINES[p].first, LINES[p - 1].first)\n          end\n\n        unless first_verse?(position)\n          lines << LINES.first.last\n        end\n\n        lines\n      end\n\n    lines.join("\\n")\n  end\n\n  def verses(start, stop)\n    start\n      .upto(stop)\n      .each_with_object([]) { |position, verses| verses << verse(position) }\n      .join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 8)\n  end\n\n  private def first_verse?(position)\n    position == 1\n  end\n\n  private def last_verse?(position)\n    position == LINES.size\n  end\n\n  private def swallowed(item)\n    "I know an old lady who swallowed a #{item}."\n  end\n\n  private def swallowed_to_catch(predator, prey)\n    "She swallowed the #{predator} to catch the #{prey}" +\n      (prey == 'spider' ? ' that wriggled and jiggled and tickled inside her' : '') +\n      '.'\n  end\n\n  private def swallow_and_awe(line)\n    [\n      swallowed(line.first),\n      line.last\n    ]\n  end\nend	\N	\N	0	1	2014-07-19 13:26:26	2014-07-19 13:26:26	297	food_chain.rb
523	18	fc7ba0966e47ad9dddf50a0e	pending	python	anagram	from collections import Counter\n\ndef detect_anagrams(source_word, candidates):\n    source_counts = Counter(source_word.lower())\n\n    def is_anagram(candidate):\n        if candidate.lower() == source_word.lower(): return False\n        return source_counts == Counter(candidate.lower())\n\n    return filter(is_anagram, candidates)	\N	\N	0	1	2014-08-19 21:04:56	2014-08-19 21:04:56	298	anagram.py
524	18	fcb729fd15116230c41d95b6	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    @word_count ||= begin\n      hash = Hash.new(0)\n      @phrase.split(/\\W+/).each do |word|\n        hash[word.downcase] += 1\n      end\n      hash\n    end\n  end\nend	\N	\N	0	2	2014-06-23 03:29:19	2014-06-23 03:29:19	299	word-count.rb
525	18	1f1144aae68423e507c66955	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n\n  def initialize(phrase)\n    @word_count = Hash.new(0)\n    phrase.split(/\\W+/).each do |word|\n      @word_count[word.downcase] += 1\n    end\n  end\nend	\N	\N	0	1	2014-09-28 02:19:33	2014-09-28 02:19:33	299	word-count.rb
526	18	9dc8eb41e2f41317442372d7	pending	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    @word_count ||= begin\n      @phrase.split(/\\W+/).each_with_object(Hash.new(0)) do |word, hash|\n        hash[word.downcase] += 1\n      end\n    end\n  end\nend	\N	\N	0	3	2014-10-29 05:41:40	2014-10-29 05:41:40	299	word-count.rb
527	18	f4b2467c45530e43d5e80814	pending	perl5	difference-of-squares	#!/usr/bin/bash\n\npackage Squares;\n\nuse warnings;\nuse strict;\n\nsub new {\n\n  my ($class, $n) = @_;\n\n  #constructor\n  my $self = [ $n ];\n    \n  bless $self, $class;\n\n  return $self;\n}\n\nsub difference {\n\n  my ($self) = @_;\n\n  my $diff = $self->square_of_sums() - $self->sum_of_squares();\n\n  return $diff;\n}\n\nsub square_of_sums {\n  my ($self) = @_;\n  my $sqsu = 0;\n  map { $sqsu += $_; } (1..$self->[0]);\n  return $sqsu ** 2;\n}\n\nsub sum_of_squares {\n\n  my ($self) = @_;\n\n  my $susq = 0;\n\n  for (1..$self->[0]) {\n    $susq += ($_ ** 2);\n  }\n\n  return $susq;\n}\n\n1;	\N	\N	0	1	2014-09-24 22:57:30	2014-09-24 22:57:30	300	Squares.pm
528	18	b1f4c54ebdec065796258fcb	superseded	ruby	hamming	class Hamming\r\n\tdef self.compute(first_strand,second_strand)\r\n\t\tfirst_strand_array = first_strand.split('')\r\n\t\tsecond_strand_array = second_strand.split('') \r\n\t\tdiff_counter = 0\r\n\t\tcounter = 0\r\n\t\tif first_strand_array.length >= second_strand_array.length\r\n\t\t\tlength = second_strand_array.length\r\n\t\telse\r\n\t\t\tlength = first_strand_array.length\r\n\t\tend\r\n\t\twhile counter < length\r\n\t\t\tif first_strand_array[counter] != second_strand_array[counter]\r\n\t\t\t\t\tdiff_counter += 1\r\n\t\t\tend\r\n\t\t\tcounter +=1\r\n\t\tend\r\n\t\tdiff_counter\r\n\tend\r\nend	\N	\N	0	1	2014-06-21 16:59:07	2014-06-21 16:59:07	301	hamming.rb
529	18	dfca93a8f64215b4010c4b96	pending	ruby	hamming	class Hamming\r\n\tdef self.compute(first_strand,second_strand)\r\n\t\t# first_strand_array = first_strand.split('')\r\n\t\t# second_strand_array = second_strand.split('') \r\n\t\tdiff_counter = 0\r\n\t\tcounter = 0\r\n\t\twhile counter < first_strand.length && counter < second_strand.length\r\n\t\t\tif first_strand[counter] != second_strand[counter]\r\n\t\t\t\t\tdiff_counter += 1\r\n\t\t\tend\r\n\t\t\tcounter +=1\r\n\t\tend\r\n\t\tdiff_counter\r\n\tend\r\n\r\n\t# condensed if statement question? true| false\r\nend	\N	\N	0	2	2014-08-14 23:12:49	2014-08-14 23:12:49	301	hamming.rb
530	18	0dae98c8093bd0dc15a00720	superseded	ruby	bob	class Bob\n  require 'ostruct'\n  class Responder < OpenStruct\n    def applys_for?(words)\n      test.call(words)\n    end\n  end\n  RESPONSES = [\n    { response: "Fine. Be that way!", test: lambda { |words| !words || words.lstrip.empty? } },\n    { response: "Woah, chill out!",   test: lambda { |words| words == words.upcase } },\n    { response: "Sure.",              test: lambda { |words| words[-1] == "?" } },\n    { response: "Whatever.",          test: lambda { |words| true } }\n  ].map(&Responder.method(:new))\n\n  def hey(words)\n    appropriate_response = ->(potential_response) { potential_response.applys_for?(words) }\n    RESPONSES.detect(&appropriate_response).response\n  end\nend	\N	\N	0	4	2014-06-17 13:37:29	2014-06-17 13:37:29	302	bob.rb
531	18	f5fdd0465d9f18aff87d3b69	superseded	ruby	bob	class Bob\n  require 'ostruct'\n  class Responder < OpenStruct\n    def applys_for?(words)\n      test.call(words)\n    end\n  end\n  RESPONSE_FACTORY = Responder.method(:new)\n  RESPONSES = [\n    { response: "Fine. Be that way!", test: lambda { |words| !words || words.lstrip.empty? } },\n    { response: "Woah, chill out!",   test: lambda { |words| words == words.upcase } },\n    { response: "Sure.",              test: lambda { |words| words[-1] == "?" } },\n    { response: "Whatever.",          test: lambda { |words| true } }\n  ].map(&RESPONSE_FACTORY)\n\n  def hey(words)\n    appropriate_response = ->(potential_response) { potential_response.applys_for?(words) }\n    RESPONSES.detect(&appropriate_response).response\n  end\nend	\N	\N	0	5	2014-09-03 19:37:24	2014-09-03 19:37:24	302	bob.rb
532	18	09a1ba5defc9bcdcdf6106bd	superseded	ruby	bob	class Bob\n  RESPONSES = [\n    { response: "Fine. Be that way!", test: lambda { |words| !words || words.lstrip.empty? } },\n    { response: "Woah, chill out!",   test: lambda { |words| words == words.upcase } },\n    { response: "Sure.",              test: lambda { |words| words[-1] == "?" } },\n    { response: "Whatever.",          test: lambda { |words| true } }\n  ]\n\n  def hey(words)\n    appropriate_response = ->(potential_response) { potential_response[:test].call(words) }\n    RESPONSES.detect(&appropriate_response)[:response]\n  end\nend	\N	\N	0	3	2014-09-14 21:42:41	2014-09-14 21:42:41	302	bob.rb
568	45	ea9381631daf171a89c44070	pending	python	rna-transcription	class DNA:\n\n    def __init__(self, dna):\n        self.dna = dna\n\n    def to_rna(self):\n        return self.dna.replace("T", "U")	\N	\N	0	1	2014-11-21 08:31:41	2014-11-21 08:31:41	327	rna-transcription.py
536	18	ddae462bae99eb41c5cb61ea	superseded	ruby	bob	class Bob\n  RESPONSES = [\n    { response: "Fine. Be that way!", test: lambda { |words| !words || words.lstrip.empty? } },\n    { response: "Woah, chill out!",   test: lambda { |words| words == words.upcase } },\n    { response: "Sure.",              test: lambda { |words| words[-1] == "?" } },\n    { response: "Whatever.",          test: lambda { |words| true } }\n  ]\n\n  def hey(words)\n    appropriate_response = ->(potential_response) { potential_response[:test].call(words) }\n    RESPONSES.detect(&appropriate_response)[:response]\n  end\nend	\N	\N	0	6	2014-11-10 10:34:03	2014-11-10 10:34:03	302	bob.rb
537	18	39457842746fd8f6d231da31	pending	ruby	meetup	class Meetup < Struct.new(:month, :year)\n\n  SCHEDULES = {\n    first:  [*1..7],\n    second: [*8..15],\n    third:  [*15..23],\n    fourth: [*22..31],\n    last:   [*1..31].reverse,\n    teenth: [*13..19],\n  }\n\n  def day weekday, schedule\n    raise "Unknown schedule : '#{schedule}'" unless SCHEDULES.key? schedule\n    day = SCHEDULES[schedule].find do |d|\n      begin\n        Date.new(year, month, d).send("#{weekday}?")\n      rescue\n        false\n      end\n    end\n    Date.new(year, month, day)\n  end\n\nend	\N	\N	0	1	2014-10-11 17:08:59	2014-10-11 17:08:59	303	meetup.rb
538	18	0a81dff38b8a6e8dc56c345f	pending	javascript	triangle	var Triangle = function(x,y,z) {\n\tvar sides = [x, y, z];\n\tsides.sort();\n\tvar a = sides[0];\n\tvar b = sides[1];\n\tvar c = sides[2];\n\n\n\tfunction kind() {\n\t\tif (a == 0 || b == 0 || c ==0 ) {\n\t\t\tthrow Error('illegal');\n\t\t}\n\t\t// negatives sides and failing triangle inequality\n\t\telse if (a < 0 || b < 0 || c < 0 || !((a+b>c) && (b+a>c) && (a+c>b))) {\n\t\t\treturn 'illegal';\n\t\t}\n\t\telse if (a == b && b==c) {\n\t\t\treturn 'equilateral';\n\t\t}\n\t\telse if (a!=b && b!=c && a!=c) {\n\t\t\treturn 'scalene';\n\t\t}\n\t\telse {\n\t\t\treturn 'isosceles';\n\t\t}\n\t}\n\treturn {\n\t\tkind: kind\n\t}\n};\nmodule.exports = Triangle;	\N	\N	0	1	2014-08-02 08:23:48	2014-08-02 08:23:48	304	triangle.js
539	18	3c6937bf681f77643370ec0f	pending	python	leap	def is_leap_year(y):\n    if y % 100 == 0:\n        return y % 400 == 0\n    else:\n        return y % 4 == 0	\N	\N	0	1	2014-08-10 18:21:57	2014-08-10 18:21:57	305	year.py
540	24	7eb0e2aa8e014df4b4417887	superseded	ruby	rna-transcription	module Complement\n  DNAtoRNA = { 'G'=>'C', 'C'=>'G', 'T'=>'A', 'A'=>'U' }\n  RNAtoDNA = { 'C'=>'G', 'G'=>'C', 'U'=>'A', 'A'=>'T' }\n\n  def self.of_dna(dna) \n    raise ArgumentError if dna.match(/[^#{DNAtoRNA.keys.join}]/)\n    self.translate(DNAtoRNA, dna)\n  end\n\n  def self.of_rna(rna)\n    raise ArgumentError if rna.match(/[^#{RNAtoDNA.keys.join}]/)\n    self.translate(RNAtoDNA, rna)\n  end\n\n  def self.translate(table, input_strain)\n    input_strain.each_char.with_object("") do |nuc, output_strain|\n      output_strain << table[nuc]\n    end\n  end\nend	\N	\N	0	1	2014-03-29 19:47:33	2014-03-29 19:47:33	306	complement.rb
541	24	10fdfdaf5647101f268d2488	superseded	ruby	rna-transcription	module Complement\n  DNAtoRNA = { 'G'=>'C', 'C'=>'G', 'T'=>'A', 'A'=>'U' }\n  RNAtoDNA = { 'C'=>'G', 'G'=>'C', 'U'=>'A', 'A'=>'T' }\n\n  def self.of_dna(dna) \n    raise ArgumentError if dna.match(/[^#{DNAtoRNA.keys.join}]/)\n    self.translate(DNAtoRNA, dna)\n  end\n\n  def self.of_rna(rna)\n    raise ArgumentError if rna.match(/[^#{RNAtoDNA.keys.join}]/)\n    self.translate(RNAtoDNA, rna)\n  end\n\n  def self.translate(table, input)\n    input.each_char.map {|nuc| table[nuc] }.join\n  end\nend	\N	\N	0	2	2014-06-18 12:09:07	2014-06-18 12:09:07	306	complement.rb
542	24	612378d83fcdf436cb008fd6	pending	ruby	rna-transcription	module Complement\n  DNAtoRNA = { 'G'=>'C', 'C'=>'G', 'T'=>'A', 'A'=>'U' }\n  RNAtoDNA = { 'C'=>'G', 'G'=>'C', 'U'=>'A', 'A'=>'T' }\n\n  def self.of_dna(dna) \n    raise ArgumentError if dna.match(/[^#{DNAtoRNA.keys.join}]/)\n    self.translate(DNAtoRNA, dna)\n  end\n\n  def self.of_rna(rna)\n    raise ArgumentError if rna.match(/[^#{RNAtoDNA.keys.join}]/)\n    self.translate(RNAtoDNA, rna)\n  end\n\n  def self.translate(table, strain)\n    strain.each_char.map { |nuc| table[nuc] }.join\n  end\nend	\N	\N	0	3	2014-06-19 16:26:39	2014-06-19 16:26:39	306	complement.rb
543	24	c6ad11d6691609d2c5afb0a8	pending	python	meetup	from datetime import date, timedelta\n\ndef meetup_day(year, month, day, type):\n    day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].index(day)\n    current_day = date(year, month, 1)\n    current_day += timedelta((day - current_day.weekday()) % 7)\n    if type != 'teenth' and type != 'last':\n        type = int(type[0])\n        week = 1\n    while True:\n        if type == 'teenth':\n            if 13 <= current_day.day:\n                return current_day\n        elif type == 'last':\n            if current_day.month != month:\n                return current_day - timedelta(7)\n        else:\n            if week == type:\n                return current_day\n            week += 1\n        current_day += timedelta(7)	\N	\N	0	1	2014-05-04 23:38:42	2014-05-04 23:38:42	307	meetup.py
544	42	3b3b175b7b359b9f80939ec8	pending	ruby	leap	module Year\n  \n  def self.leap?(year)\n    false\n    if year.modulo(4).zero?\n      if year.modulo(100).zero?\n        year.modulo(400).zero?\n      else\n        true\n      end\n    end\n  end\nend	\N	\N	0	1	2014-11-04 02:08:35	2014-11-04 02:08:35	308	year.rb
545	42	fb070ad333b8815c20cfcbb5	pending	cpp	scrabble-score	#pragma once\n\n#include <map>\n#include <string>\n\nnamespace scrabble_score {\n    std::map<char, int> scores = {\n        {'A', 1}, {'E', 1}, {'I', 1}, {'O', 1}, {'U', 1},\n        {'L', 1}, {'N', 1}, {'R', 1}, {'S', 1}, {'T', 1},\n        {'D', 2}, {'G', 2}, {'B', 3}, {'C', 3}, {'M', 3},\n        {'P', 3}, {'F', 4}, {'H', 4}, {'V', 4}, {'W', 4},\n        {'Y', 4}, {'K', 5}, {'J', 8}, {'X', 8}, {'Q', 10}, {'Z', 10}\n    };\n\n    const int score(const std::string& letters) {\n        int score = 0;\n\n        for (const char& c : letters) {\n            score += scores[toupper(c)];\n        }\n\n        return score;\n    }\n};	\N	\N	0	1	2014-11-14 20:50:31	2014-11-14 20:50:31	309	scrabble_score.h
546	42	b813276d264ec9010890a9ef	superseded	ruby	grains	class Grains\n  def square num\n    2 ** (num - 1)\n  end\n\n  def total\n    (0...64).inject(0) { |sum, num| sum += 2**num }\n  end\nend	\N	\N	0	1	2014-11-11 02:41:21	2014-11-11 02:41:21	310	grains.rb
547	42	dfd21bd0412a92b5976dcc4f	pending	ruby	grains	class Grains\n  def square num\n    2 ** (num - 1)\n  end\n\n  def total\n    (1..64).inject { |sum, num| sum += square(num) }\n  end\nend	\N	\N	0	2	2014-11-14 00:08:54	2014-11-14 00:08:54	310	grains.rb
548	42	e207eae973abee0f02f34822	pending	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst (\n\tGigasecond = time.Second * 1e9\n)\n\nfunc AddGigasecond(t time.Time) time.Time {\n\treturn t.Add(Gigasecond)\n}	\N	\N	0	1	2014-10-23 10:12:14	2014-10-23 10:12:14	311	gigasecond.go
565	45	ff315f20246cda74cc819299	pending	python	bob	# Kevin Barbour\n# exercism.io - bob\n\n\ndef hey(greeting):\n  if len(greeting) == 0 or greeting.isspace():\n    return 'Fine. Be that way!'\n  elif greeting.isupper():\n    return 'Woah, chill out!'\n  elif greeting[-1] == '?':\n    return 'Sure.'\n  else: return 'Whatever.'	\N	\N	0	1	2014-11-10 21:40:31	2014-11-10 21:40:31	324	bob.py
566	45	9017aa5819650bd3ed88ac36	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%100 != 0 || year%400 == 0)\n}	\N	\N	0	1	2014-10-27 03:45:42	2014-10-27 03:45:42	325	leap.go
579	45	4a528458cd75d39c6f8b1ed2	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement =\n\tcase rnaComplement of \n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n\t\t'T' -> 'A'\n\t\t'A' -> 'U'\n\t\t _  -> error("Invalid nucleotide: " ++ [rnaComplement])\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	\N	0	3	2014-11-04 20:52:58	2014-11-04 20:52:58	334	DNA.hs
549	42	246a55f8e9db179032f8aadf	pending	go	queen-attack	package queenattack\n\nimport (\n\t"errors"\n)\n\n// CanQueenAttack API as required by test case\nfunc CanQueenAttack(w, b string) (result bool, err error) {\n\tvar wp, bp Position\n\tif wp, err = ParsePosition(w); err != nil {\n\t\treturn\n\t}\n\tif bp, err = ParsePosition(b); err != nil {\n\t\treturn\n\t}\n\tif wp == bp {\n\t\treturn false, errors.New("duplicate position")\n\t}\n\treturn validQueenMove(wp, bp), nil\n}\n\n// The original problem by Dalbey specified an array had to be used to\n// configure the "board" and then processed to return true/false. We'll\n// skip all that since neither this specification of the problem nor the\n// test asks for it. I.e. we don't check for pieces in the way, just if\n// a queen can move from A to B on an empty chess board.\n\nfunc validQueenMove(src, dst Position) (result bool) {\n\t//return validRookMove(src, dst) || validBishopMove(src, dst)\n\tswitch {\n\tcase dst.x == src.x:\n\t\tresult = true // same file\n\tcase dst.y == src.y:\n\t\tresult = true // same rank\n\tcase delta(dst.x, src.x) == delta(dst.y, src.y):\n\t\tresult = true // diagonal\n\t}\n\t//log.Println(src, "to", dst, result)\n\treturn result\n}\n\nfunc delta(a, b uint8) uint8 {\n\tif a >= b {\n\t\treturn a - b\n\t}\n\treturn b - a\n}\n\n// Make a new type for the position, it's overkill for this problem\n// but makes parsing and formating simpler.\n\n// Position represents a position on a chess board.\ntype Position struct {\n\tx, y uint8\n}\n\n// more overkill for error handling\n\nvar (\n\tErrRange  = errors.New("value out of range")\n\tErrSyntax = errors.New("invalid syntax")\n)\n\ntype ParseError struct {\n\tInput string\n\tErr   error\n}\n\nfunc (e *ParseError) Error() string {\n\treturn "queenattack.ParsePosition: parsing \\"" +\n\t\te.Input + "\\": " + e.Err.Error()\n}\n\n// ParsePosition interprets a string s and returns\n// the corresponding chess position p.\n// Returned errors are of type *ParseError.\nfunc ParsePosition(s string) (p Position, err error) {\n\tif len(s) != 2 {\n\t\treturn p, &ParseError{s, ErrSyntax}\n\t}\n\t// Could use ToLower() but this is simple enough\n\tswitch {\n\tcase s[0] >= 'a' && s[0] <= 'h':\n\t\tp.x = s[0] - 'a'\n\tcase s[0] >= 'A' && s[0] <= 'H':\n\t\tp.x = s[0] - 'A'\n\tdefault:\n\t\treturn p, &ParseError{s, ErrRange}\n\t}\n\tif s[1] < '1' || s[1] > '8' {\n\t\treturn p, &ParseError{s, ErrRange}\n\t}\n\tp.y = s[1] - '1'\n\treturn p, nil\n}\n\nfunc (p Position) String() string {\n\tvar tmp [2]byte\n\ttmp[0] = p.x + 'a'\n\ttmp[1] = p.y + '1'\n\treturn string(tmp[:])\n}	\N	\N	0	1	2014-10-26 18:21:18	2014-10-26 18:21:18	312	queen_attack.go
550	42	9d8bd399c0078f48d436bbd7	pending	coffeescript	binary	module.exports = class Binary\n    constructor: (binary) ->\n        @binary = ( parseInt(x) for x in binary.split('').reverse() )\n\n    toDecimal: () ->\n        sum = 0\n\n        for n, i in @binary\n            sum += n * Math.pow(2,i)\n\n        return if isNaN(sum) then 0 else sum	\N	\N	0	1	2014-11-03 15:03:11	2014-11-03 15:03:11	313	binary.coffee
551	42	8c4c5064787c71cb8c32550e	pending	haskell	strain	module Strain (keep, discard) where\r\n\r\nkeep :: (a -> Bool) -> [a] -> [a]\r\nkeep _ [] = []\r\nkeep f (a:as)\r\n  | f a = a:keep f as\r\n  | otherwise = keep f as\r\n\r\ndiscard :: (a -> Bool) -> [a] -> [a]\r\ndiscard _ [] = []\r\ndiscard f (a:as)\r\n  | f a = discard f as\r\n  | otherwise = a:discard f as\r	\N	\N	0	1	2014-10-31 07:33:01	2014-10-31 07:33:01	314	Strain.hs
552	27	e1c0379bea0876c6172903e7	pending	ruby	hamming	class Hamming\n    def self.compute(strand_one, strand_two)\n        min_length = [strand_one.length, strand_two.length].min\n\n        return (0...min_length).reduce(0) do |hamming_distance, idx|\n            hamming_distance += (strand_one[idx] != strand_two[idx]) ? 1 : 0\n        end\n    end\nend	\N	\N	0	2	2014-10-14 21:54:18	2014-10-14 21:54:18	315	hamming.rb
553	27	218fd864c77c198fa350cfe4	superseded	ruby	hamming	class Hamming\n    def self.compute(strand_one, strand_two)\n        min_length = [strand_one.length, strand_two.length].min\n        hamming_distance = 0\n\n        for idx in 0...min_length do\n            if strand_one[idx] != strand_two[idx] then\n                hamming_distance += 1\n            end\n        end\n\n        return hamming_distance\n    end\nend	\N	\N	0	1	2014-11-05 15:03:59	2014-11-05 15:03:59	315	hamming.rb
554	45	ccec52bcc8dd423190632a06	pending	python	word-count	from collections import Counter\n\ndef word_count(sentence):\n\twordlist = sentence.split()\n\t\n\tcount = Counter()\n\t\n\tfor word in wordlist:\n\t\tcount[word] += 1\n\treturn count	\N	\N	0	1	2014-11-08 14:39:54	2014-11-08 14:39:54	316	wordcount.py
555	45	75e23440476bc753f160efd9	pending	python	anagram	from collections import Counter\n\n\nclass Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self.word_signature = self.get_signature(word)\n\n    def match(self, candidates):\n        return [c for c in candidates if self.is_anagram(c)]\n\n    def is_anagram(self, candidate):\n        if candidate == self.word:\n            # Word is not anagram to itself\n            return False\n\n        return self.word_signature == self.get_signature(candidate)\n\n    def get_signature(self, word):\n        return Counter(list(word.lower()))	\N	\N	0	1	2014-10-28 18:39:59	2014-10-28 18:39:59	317	anagram.py
556	45	f26abc34d7c42edf436183aa	pending	ruby	nth-prime	require 'prime'\n\nclass Prime\n  def self.nth(i)\n   raise ArgumentError if i == 0\n\n   first(i).last\n  end\nend	\N	\N	0	3	2014-10-18 01:28:23	2014-10-18 01:28:23	318	prime.rb
557	45	2e9ee395d187ad14100b1a6a	superseded	ruby	nth-prime	require 'prime'\n\nclass Prime\n  def self.nth(i)\n   raise ArgumentError if i == 0\n\n   Prime.first(i).last\n  end\nend	\N	\N	0	2	2014-10-18 13:27:54	2014-10-18 13:27:54	318	prime.rb
558	45	68af72b774a6810571cf8356	superseded	ruby	nth-prime	require 'prime'\n\nclass Prime\n  def nth(i)\n   raise ArgumentError if i == 0\n\n   Prime.first(i).last\n  end\nend	\N	\N	0	1	2014-10-19 14:54:20	2014-10-19 14:54:20	318	prime.rb
559	45	7ab066927caa8b61e6ef9648	superseded	clojure	word-count	(ns phrase (:require [clojure.string :refer [split lower-case]]))\n\n(defn word-count [words]\n  (reduce (fn [a b] (assoc a b (inc (a b 0)))) {}\n    (split (lower-case words) #"\\W+")))	\N	\N	0	1	2014-11-01 08:15:55	2014-11-01 08:15:55	319	word-count.clj
560	45	b42442129e1832fb4ecca4ef	pending	clojure	word-count	(ns phrase (:require [clojure.string :refer [split lower-case]]))\n\n(defn word-count [words]\n   (frequencies (split (lower-case words) #"\\W+")))	\N	\N	0	2	2014-11-06 09:46:26	2014-11-06 09:46:26	319	word-count.clj
561	45	b1bdfc4c98c76100b5dc6020	pending	python	phone-number	import re\n\n\nclass Phone(object):\n    def __init__(self, input_number):\n        self.number = self.sanitize(input_number)\n\n    def sanitize(self, input_number):\n        bad_number = "0"*10\n        digits = re.sub(r'[^\\d]', '', input_number)\n        if len(digits) < 10 or len(digits) > 11:\n            return bad_number\n        elif len(digits) == 10:\n            return digits\n        else:\n            if digits[0] == '1':\n                return digits[1:]\n            else:\n                return bad_number\n\n    def area_code(self):\n        return self.number[0:3]\n\n    def pretty(self):\n        return ("({area_code}) {local}-{last4}"\n                .format(area_code=self.area_code(),\n                        local=self.number[3:6],\n                        last4=self.number[6:]))	\N	\N	0	1	2014-10-27 13:29:26	2014-10-27 13:29:26	320	phone.py
562	45	ed2f716144c5d55120228a03	pending	clojure	etl	(ns etl)\n\n(defn transform [m]\n  (into {} (for [[point words] m\n                 word words]\n             [(clojure.string/lower-case word) point])))	\N	\N	0	1	2014-11-02 15:44:42	2014-11-02 15:44:42	321	etl.clj
563	45	2a5abdca492dd1748930145e	pending	javascript	nucleotide-count	function DNA(dnaString) {\n  this.nucleotideCounts = { A : 0, T : 0, C : 0, G : 0 };\n  this.count = function(nucleotide) {\n    if(nucleotide == 'U')\n      return 0;\n    else if (["A", "T", "C", "G"].indexOf(nucleotide) != -1)\n      return this.nucleotideCounts[nucleotide];\n    else\n      throw new Error("Invalid Nucleotide");\n  };\n  arr = dnaString.split('');\n  for(var i = 0; i < arr.length; i++) {\n    this.nucleotideCounts[arr[i]] += 1;\n  }\n}\nmodule.exports = DNA	\N	\N	0	1	2014-11-12 23:54:39	2014-11-12 23:54:39	322	nucleotide-count.js
564	45	a35a4a1fb9564a59387ac9c2	pending	javascript	raindrops	var Raindrops = function() { };\r\nRaindrops.prototype.convert = function(input) {\r\n\tvar output = '';\r\n\r\n\tif(input % 3 === 0) output += 'Pling';\r\n\tif(input % 5 === 0) output += 'Plang';\r\n\tif(input % 7 === 0) output += 'Plong';\r\n\t\r\n\treturn (output.length > 0) ? output : input.toString();\r\n};\r\n\r\nmodule.exports = Raindrops;	\N	\N	0	1	2014-11-16 07:48:50	2014-11-16 07:48:50	323	raindrops.js
569	45	b0ceace90b624bd5003b3a9f	superseded	python	nucleotide-count	class DNA(object):\n    """\n    Represents a strand of DNA, with methods for enumerating the nucleotides\n    in each strand.\n    """\n    NUCLEOTIDES = ('A', 'G', 'C', 'T', 'U')\n\n    def __init__(self, strand):\n        self._strand = strand\n        self._count = dict(A=0, G=0, C=0, T=0)\n\n        for n in strand:\n            self._count[n] = strand.count(n)\n\n    def count(self, nucleotide):\n        """\n        Return the count of a specific nucleotide within the strand.\n        """\n        if nucleotide not in self.NUCLEOTIDES:\n            raise ValueError('{} is not a nucleotide.'.format(nucleotide))\n\n        return self._count.get(nucleotide, 0)\n\n    def nucleotide_counts(self):\n        """\n        Return the counts of all nucleotides within the strand.\n        """\n        return self._count	\N	\N	0	1	2014-10-25 02:33:38	2014-10-25 02:33:38	328	dna.py
570	45	0d7e2b64f9b952eeed7f0a12	pending	python	nucleotide-count	class DNA(object):\n    """\n    Represents a strand of DNA, with methods for enumerating the nucleotides\n    in each strand.\n    """\n    def __init__(self, strand):\n        self._strand = strand\n        self._count = dict(A=0, G=0, C=0, T=0)\n\n        for n in self._count.keys():\n            self._count[n] = strand.count(n)\n\n    def count(self, nucleotide):\n        """\n        Return the count of a specific nucleotide within the strand.\n        """\n        if nucleotide not in 'ACTGU':\n            raise ValueError('{} is not a nucleotide.'.format(nucleotide))\n\n        return self._count.get(nucleotide, 0)\n\n    def nucleotide_counts(self):\n        """\n        Return the counts of all nucleotides within the strand.\n        """\n        return self._count	\N	\N	0	2	2014-11-20 11:55:04	2014-11-20 11:55:04	328	dna.py
571	45	910edc14a973d86bab434b72	pending	ruby	hamming	=begin\nprogram that can calculate the Hamming difference between two DNA strands.\n\nA mutation is simply a mistake that occurs during the creation or copying of a nucleic acid, in particular DNA. Because nucleic acids are vital to cellular functions, mutations tend to cause a ripple effect throughout the cell. Although mutations are technically mistakes, a very rare mutation may equip the cell with a beneficial attribute. In fact, the macro effects of evolution are attributable by the accumulated result of beneficial microscopic mutations over many generations.\n\nThe simplest and most common type of nucleic acid mutation is a point mutation, which replaces one base with another at a single nucleotide.\n\nBy counting the number of differences between two homologous DNA strands taken from different genomes with a common ancestor, we get a measure of the minimum number of point mutations that could have occurred on the evolutionary path between the two strands.\n\nThis is called the 'Hamming distance'\n\n    GAGCCTACTAACGGGAT\n    CATCGTAATGACGGCCT\n    ^ ^ ^  ^ ^    ^^\n\nThe Hamming distance between these two DNA strands is 7.\n\n=end\n\nclass Hamming\n\n  def self.compute(string_1, string_2)\n\n  \tcount = 0\n\n    if string_1.length != string_2.length\n      return 0\n    end\n\n    for posicion in 0..string_1.length\n      if string_1[posicion] != string_2[posicion]\n        count+=1\n      end\n    end\n\n    return count\n   end\nend	\N	\N	0	1	2014-11-01 23:39:22	2014-11-01 23:39:22	329	hamming.rb
572	45	74cd926d12a446efffe4047b	pending	fsharp	beer-song	﻿namespace BeerSong\r\n\r\nopen System\r\n\r\ntype BeerSong() =\r\n    let action n = \r\n        match n with\r\n        | 0 -> "Go to the store and buy some more"\r\n        | 1 -> "Take it down and pass it around"\r\n        | _ -> "Take one down and pass it around"\r\n    let bottlesRemaining n =\r\n        match n with\r\n        | 0 -> 99\r\n        | n -> n - 1 \r\n    let capitalise s =\r\n        match s with\r\n        | "" -> ""\r\n        | s  -> Char.ToUpper(s.[0]).ToString() + s.Substring 1\r\n    let bottles n =\r\n        match n with\r\n        | 0 -> "no more bottles of beer"\r\n        | 1 -> "1 bottle of beer"\r\n        | n -> n.ToString() + " bottles of beer"\r\n    let onTheWall n = bottles n + " on the wall"\r\n    let firstLine n = capitalise(onTheWall n) + ", " + bottles n + "."\r\n    let secondLine n = action n + ", " + onTheWall(bottlesRemaining n) + "."\r\n    member this.verse n = firstLine n + "\\n" + secondLine n + "\\n"\r\n    member this.verses(from, downTo) = \r\n        List.map (fun n -> this.verse n + "\\n") [from .. -1 .. downTo]\r\n        |> String.concat ""\r\n    member this.sing() = this.verses(99, 0)	\N	\N	0	1	2014-10-28 02:26:15	2014-10-28 02:26:15	330	BeerSong.fs
573	45	1a2a4f2cc6628e9634239255	pending	ruby	bob	class Bob\n  def hey(saying)\n    if saying.strip.empty?\n      'Fine. Be that way!'\n    elsif saying.upcase == saying && saying.downcase != saying\n      'Woah, chill out!'\n    elsif saying.end_with?('?')\n      'Sure.'\n    else\n    'Whatever.'\n    end\n  end\nend	\N	\N	0	1	2014-10-25 05:52:41	2014-10-25 05:52:41	331	bob.rb
574	45	3f2ecc4735df4dab5d34476f	pending	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide), do: count(strand, nucleotide, 0)\n  defp count([], _, num), do: num\n  defp count([match|rest], match, num), do: count(rest, match, num + 1)\n  defp count([_|rest], not_match, num), do: count(rest, not_match, num)\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  %{?A => 4, ?T => 1, ?C => 0, ?G => 0}\n  """\n  @spec nucleotide_counts([char]) :: Dict.t\n  def nucleotide_counts(strand) do\n    Enum.reduce(strand, %{?A => 0, ?T => 0, ?C => 0, ?G => 0}, fn(nucleotide, summary) ->\n      Dict.update!(summary, nucleotide, &(&1 + 1))\n    end)\n  end\nend	\N	\N	0	1	2014-10-19 11:14:32	2014-10-19 11:14:32	332	dna.exs
575	45	37e2dd259b44f297edf26ad1	superseded	javascript	gigasecond	//gs.setTime(1332403882588);\n//A gigasecond is one billion (10**9) seconds.\n\nfunction Gigasecond(dateObj){\n\tthis.date = function(){\n\t\tvar gigaMilliseconds = Math.pow(10, 9) * 1000;\n\t\tdateObj.setTime( dateObj.getTime() + gigaMilliseconds );\n\t\treturn dateObj;\n\t}\n}\n\nmodule.exports = Gigasecond;	\N	\N	0	1	2014-10-30 02:23:50	2014-10-30 02:23:50	333	gigasecond.js
576	45	bab96d198b00e3c0462ec495	pending	javascript	gigasecond	//gs.setTime(1332403882588);\n//A gigasecond is one billion (10**9) seconds.\n\nfunction Gigasecond(dateObj){\n\tthis.date = function(){\n\t\tdateObj.setTime( dateObj.getTime() + Math.pow(10, 9) * 1000 );\n\n\t\t//rounding \n\t\tdateObj.setHours(0); dateObj.setMinutes(0); dateObj.setSeconds(0);\n\t\treturn dateObj;\n\t}\n}\n\nmodule.exports = Gigasecond;	\N	\N	0	2	2014-11-02 14:38:29	2014-11-02 14:38:29	333	gigasecond.js
577	45	f014572b5939fa67d918fd0f	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement\n\t| rnaComplement == 'G' = 'C'\n\t| rnaComplement == 'C' = 'G'\n\t| rnaComplement == 'T' = 'A'\n\t| otherwise            = 'U'\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	\N	0	1	2014-10-28 15:50:43	2014-10-28 15:50:43	334	DNA.hs
578	45	9c3358eff9c8ebbf268dcd9f	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ndnaToRNA :: Char -> Char\ndnaToRNA rnaComplement =\n\tcase rnaComplement of\n\t\t'G' -> 'C'\n\t\t'C' -> 'G'\n\t\t'T' -> 'A'\n\t\t'A' -> 'U'\n\t\t_ -> error("Invalid nucleotide: " ++ [rnaComplement])\n\ntoRNA :: String -> String\ntoRNA = map dnaToRNA	\N	\N	0	2	2014-11-01 01:43:21	2014-11-01 01:43:21	334	DNA.hs
584	45	b970a86f57a61c4c46b62f90	superseded	javascript	grade-school	module.exports = School;\n\nfunction School() {\n  this.db = {}\n}\n\nSchool.prototype.add = function(name, n) {\n  this.grade(n).push(name);\n}\n\nSchool.prototype.grade = function(n) {\n  return this.db[n] || (this.db[n] = []);\n}\n\nSchool.prototype.sort = function() {\n  var self = this;\n  return Object.keys(this.db).reduce(function(sorted, n) {\n    sorted[n] = self.grade(n).sort();\n    return sorted;\n  },{});\n}	\N	\N	0	1	2014-10-27 22:26:53	2014-10-27 22:26:53	336	grade-school.js
585	45	902c34d15d6d5ef0e8850729	superseded	javascript	grade-school	module.exports = School;\n\nfunction School() {\n  this.db = {};\n}\n\nSchool.prototype.add = function(name, n) {\n  this.grade(n).push(name);\n}\n\nSchool.prototype.grade = function(n) {\n  return this.db[n] || (this.db[n] = []);\n}\n\nSchool.prototype.sort = function() {\n  var self = this;\n  return Object.keys(this.db).reduce(function(sorted, n) {\n    sorted[n] = self.grade(n).sort();\n    return sorted;\n  },{});\n}	\N	\N	0	2	2014-11-06 20:12:18	2014-11-06 20:12:18	336	grade-school.js
586	45	c59ddd7093fdae3b54ee3d25	pending	javascript	grade-school	module.exports = School;\n\nfunction School() {\n  this.db = {};\n}\n\nSchool.prototype.add = function(name, grade) {\n  this.grade(grade, true).push(name);\n}\n\nSchool.prototype.grade = function(n, addIfAbsent) {\n  return this.db[n]\n    || (addIfAbsent ? (this.db[n] = []) : []);\n}\n\nSchool.prototype.sort = function() {\n  var self = this;\n  return Object.keys(this.db).reduce(function(sorted, n) {\n    sorted[n] = self.grade(n).slice().sort();\n    return sorted;\n  },{});\n}	\N	\N	0	3	2014-11-09 11:43:31	2014-11-09 11:43:31	336	grade-school.js
587	45	48afc6e419570fe6935a3b2c	superseded	swift	leap	//\n//  Year.swift\n//  Leap\n//\n//  Created by Aaron Cruz on 8/7/14.\n//  Copyright (c) 2014 Spaceman Labs. All rights reserved.\n//\n\npublic class Year {\n    public var isLeapYear: Bool = false\n    \n    public init(calendarYear: Int) {\n        isLeapYear = checkLeapYear(calendarYear)\n    }\n    \n    func checkLeapYear(year: Int) -> Bool {\n        return year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)\n    }\n}	\N	\N	0	1	2014-10-28 18:22:05	2014-10-28 18:22:05	337	Year.swift
588	45	9fcb7d8e828a758eaa83d62f	pending	swift	leap	//\n//  Year.swift\n//  Leap\n//\n//  Created by Aaron Cruz on 8/7/14.\n//  Copyright (c) 2014 Spaceman Labs. All rights reserved.\n//\n\npublic class Year {\n    public let isLeapYear: Bool\n    \n    public init(calendarYear: Int) {\n        self.isLeapYear = calendarYear % 400 == 0 ||\n                          (calendarYear % 4 == 0 && calendarYear % 100 != 0)\n    }\n}	\N	\N	0	2	2014-11-09 12:12:21	2014-11-09 12:12:21	337	Year.swift
589	45	cf3ed5861bcd4e56446d6698	pending	csharp	anagram	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace anagram\r\n{\r\n    public class Anagram\r\n    {\r\n        private readonly string _word;\r\n\r\n        public Anagram(string word)\r\n        {\r\n            _word = word;\r\n        }\r\n\r\n        public string[] Match(string[] candidates)\r\n        {\r\n            List<string> anagrams = new List<string>();\r\n\r\n            foreach (string candidate in candidates.Where(c => !string.IsNullOrEmpty(c)))\r\n            {\r\n                if (string.Compare(candidate, _word, true) == 0)\r\n                    continue;\r\n\r\n                LinkedList<char> candidateCharacters = new LinkedList<char>(candidate);\r\n\r\n                bool candidateIsAnagram = true;\r\n\r\n                foreach (char letter in _word)\r\n                {\r\n                    LinkedListNode<char> letterMatchNode = null;\r\n                    for (LinkedListNode<char> node = candidateCharacters.First; node != null; node = node.Next)\r\n                    {\r\n                        if (char.ToUpper(node.Value) == char.ToUpper(letter))\r\n                        {\r\n                            letterMatchNode = node;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (letterMatchNode == null)\r\n                    {\r\n                        candidateIsAnagram = false;\r\n                        break;\r\n                    }\r\n\r\n                    candidateCharacters.Remove(letterMatchNode);\r\n                }\r\n\r\n                if (candidateIsAnagram && candidateCharacters.Count == 0)\r\n                    anagrams.Add(candidate);\r\n            }\r\n\r\n            return anagrams.OrderBy(anagram => anagram).ToArray();\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-10-19 07:26:45	2014-10-19 07:26:45	338	Anagram.cs
590	45	641d5cb57a238664eb4d46de	pending	ruby	leap	class Year\n  def self.leap? year\n    year%4 == 0 && (year%100 != 0 || year%400 == 0)\n  end\nend	\N	\N	0	1	2014-10-17 22:01:15	2014-10-17 22:01:15	339	year.rb
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 590, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	22	1993-10-17 22:20:06	1993-10-17 22:20:06	t
2	1	15	1971-07-03 04:58:26	1971-07-03 04:58:26	t
3	1	18	2008-02-10 06:42:40	2008-02-10 06:42:40	t
4	1	23	2014-11-05 07:38:02	2014-11-05 07:38:02	t
5	1	11	1983-04-04 00:15:04	1983-04-04 00:15:04	t
6	1	8	2008-05-09 09:12:54	2008-05-09 09:12:54	t
7	1	7	2009-10-14 21:49:21	2009-10-14 21:49:21	t
8	1	30	1986-08-26 23:39:59	1986-08-26 23:39:59	t
9	1	31	2005-01-31 23:09:44	2005-01-31 23:09:44	t
10	1	36	2009-06-20 13:39:43	2009-06-20 13:39:43	t
11	1	16	1982-08-01 06:32:09	1982-08-01 06:32:09	f
12	1	17	1972-09-28 07:55:54	1972-09-28 07:55:54	f
13	1	29	1972-10-06 04:48:36	1972-10-06 04:48:36	f
14	1	32	2004-12-19 13:24:04	2004-12-19 13:24:04	f
15	1	38	2002-05-30 19:30:08	2002-05-30 19:30:08	f
16	1	42	2005-03-05 12:24:29	2005-03-05 12:24:29	f
17	1	43	2011-05-17 21:58:23	2011-05-17 21:58:23	f
18	1	47	1982-08-02 22:16:35	1982-08-02 22:16:35	f
19	2	3	1975-04-17 21:28:54	1975-04-17 21:28:54	t
20	2	36	1976-09-15 11:08:12	1976-09-15 11:08:12	t
21	2	31	1995-06-30 23:47:19	1995-06-30 23:47:19	t
22	2	47	1995-06-19 13:49:50	1995-06-19 13:49:50	t
23	2	19	1995-12-09 13:43:52	1995-12-09 13:43:52	f
24	2	38	1981-12-06 05:35:04	1981-12-06 05:35:04	f
25	3	38	1987-09-21 06:45:27	1987-09-21 06:45:27	f
26	3	3	1991-06-08 11:12:56	1991-06-08 11:12:56	f
27	4	3	2012-07-01 17:32:38	2012-07-01 17:32:38	t
28	4	32	1993-01-13 20:52:33	1993-01-13 20:52:33	t
29	4	22	2008-10-26 05:35:06	2008-10-26 05:35:06	t
30	4	27	1996-08-03 14:55:13	1996-08-03 14:55:13	t
31	4	20	2000-09-21 00:17:03	2000-09-21 00:17:03	t
32	4	25	1982-08-18 11:06:47	1982-08-18 11:06:47	t
33	4	19	2012-05-22 13:47:28	2012-05-22 13:47:28	t
34	4	24	2006-10-27 12:26:15	2006-10-27 12:26:15	t
35	4	26	2007-11-16 20:11:11	2007-11-16 20:11:11	t
36	4	21	1983-02-23 19:51:27	1983-02-23 19:51:27	t
37	4	38	2014-10-05 06:47:39	2014-10-05 06:47:39	f
38	4	12	1991-09-20 14:33:24	1991-09-20 14:33:24	f
39	4	14	1973-06-07 12:39:46	1973-06-07 12:39:46	f
40	5	32	1987-12-17 15:32:54	1987-12-17 15:32:54	t
41	5	40	1970-12-15 20:34:21	1970-12-15 20:34:21	t
42	5	35	1994-11-25 21:08:36	1994-11-25 21:08:36	t
43	5	37	1988-12-10 22:14:13	1988-12-10 22:14:13	t
44	5	33	2001-06-30 17:44:04	2001-06-30 17:44:04	t
45	5	36	2011-09-06 15:35:04	2011-09-06 15:35:04	t
46	5	34	2010-03-12 00:47:53	2010-03-12 00:47:53	t
47	5	39	1997-10-15 02:19:37	1997-10-15 02:19:37	t
48	5	41	1994-11-26 04:58:04	1994-11-26 04:58:04	f
49	5	38	1977-12-31 20:48:29	1977-12-31 20:48:29	f
50	5	3	1986-08-17 22:40:35	1986-08-17 22:40:35	f
51	6	6	2002-02-28 23:42:07	2002-02-28 23:42:07	t
52	6	7	1975-09-11 11:45:56	1975-09-11 11:45:56	t
53	6	8	1982-09-20 06:30:26	1982-09-20 06:30:26	t
54	6	9	1978-09-27 21:14:06	1978-09-27 21:14:06	t
55	6	11	1997-07-04 20:05:24	1997-07-04 20:05:24	t
56	6	12	2011-01-07 15:27:50	2011-01-07 15:27:50	t
57	6	13	1984-06-12 23:33:27	1984-06-12 23:33:27	t
58	6	14	2013-05-10 23:53:16	2013-05-10 23:53:16	t
59	6	15	2008-05-05 20:57:52	2008-05-05 20:57:52	t
60	6	16	2008-01-09 07:32:28	2008-01-09 07:32:28	t
61	6	17	1977-03-22 07:45:55	1977-03-22 07:45:55	t
62	6	18	1996-10-28 16:38:39	1996-10-28 16:38:39	t
63	6	23	2002-03-12 15:09:43	2002-03-12 15:09:43	t
64	6	28	2008-05-22 17:51:00	2008-05-22 17:51:00	t
65	6	29	1980-12-04 12:49:36	1980-12-04 12:49:36	t
66	6	30	2010-04-21 16:10:14	2010-04-21 16:10:14	t
67	6	31	1985-06-05 03:11:26	1985-06-05 03:11:26	t
68	6	32	1976-12-05 06:45:47	1976-12-05 06:45:47	t
69	6	38	1985-03-09 18:57:05	1985-03-09 18:57:05	t
70	6	42	1990-05-05 12:02:13	1990-05-05 12:02:13	t
71	6	43	1991-08-26 09:24:58	1991-08-26 09:24:58	t
72	6	44	1972-03-03 09:52:27	1972-03-03 09:52:27	t
73	6	45	2009-04-19 09:10:00	2009-04-19 09:10:00	t
74	6	46	1998-12-22 10:21:02	1998-12-22 10:21:02	t
75	6	47	1996-09-11 02:05:18	1996-09-11 02:05:18	t
76	6	48	1988-06-08 15:05:03	1988-06-08 15:05:03	t
77	6	49	1977-08-08 21:20:44	1977-08-08 21:20:44	t
78	7	3	1987-08-30 16:33:25	1987-08-30 16:33:25	t
79	7	39	1993-08-19 15:53:36	1993-08-19 15:53:36	t
80	7	32	2006-07-05 16:06:21	2006-07-05 16:06:21	t
81	7	38	1998-11-19 19:21:50	1998-11-19 19:21:50	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-10-08 16:17:04.281512	2014-10-08 16:17:04.281512	baconesia
2	chocolades	2014-10-28 16:12:13.32216	2014-10-28 16:12:13.32216	chocolades
3	ghost	2014-05-31 19:27:08.332198	2014-05-31 19:27:08.332198	ghost
4	motley	2014-03-18 06:06:49.338534	2014-03-18 06:06:49.338534	motley
5	rugrats	2014-07-02 17:20:02.360417	2014-07-02 17:20:02.360417	rugrats
6	slate	2014-03-31 12:49:00.376487	2014-03-31 12:49:00.376487	slate
7	polkadots	2014-09-13 14:11:51.411017	2014-09-13 14:11:51.411017	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	9	go	clock	1	pending	\N	2014-08-14 21:50:32	2014-08-14 21:50:32	c79b16268b97305110d5d159	f
2	11	ruby	anagram	4	pending	\N	2014-06-18 17:24:18	2014-06-18 17:24:18	944d6d898ae4811b31abf4fc	f
3	11	python	beer-song	1	pending	\N	2014-07-02 16:18:18	2014-07-02 16:18:18	858880afb7875eed6e3f40ce	f
4	11	elixir	list-ops	1	done	2014-09-29 20:09:02	2014-09-26 17:32:59	2014-09-26 17:32:59	0e8c43c4f39b6b337c8fe08c	t
5	11	ruby	binary	1	done	2014-07-24 16:00:04	2014-07-18 01:39:08	2014-07-18 01:39:08	9361a2d47eec72746a659708	t
6	11	javascript	bob	1	pending	\N	2014-07-15 13:15:26	2014-07-15 13:15:26	e77f4921029044e2814307f8	f
7	11	ruby	beer-song	3	done	2014-06-23 03:16:34	2014-06-21 23:40:20	2014-06-21 23:40:20	26d444926d04cbdc581c0247	t
8	11	haskell	word-count	2	done	2014-07-18 13:32:06	2014-07-04 09:10:01	2014-07-04 09:10:01	d5b207d37a06e951c6a06340	t
9	11	ruby	space-age	1	pending	\N	2014-07-05 04:23:06	2014-07-05 04:23:06	8311d13db477daf8f51403ad	f
10	11	ruby	strain	4	done	2014-06-12 13:05:10	2014-06-08 08:09:58	2014-06-08 08:09:58	e9f155f78f590e1e5028f7a9	t
11	11	javascript	hamming	1	done	2014-06-15 14:51:47	2014-06-11 02:48:17	2014-06-11 02:48:17	cc7ba433dfc45ef12892e83e	t
12	11	clojure	triangle	1	done	2014-10-01 07:52:52	2014-09-25 02:57:52	2014-09-25 02:57:52	ee68b040bb8588cb7c5f555f	t
13	11	ruby	bob	4	pending	\N	2014-05-26 04:52:48	2014-05-26 04:52:48	aa804e60dcbf2f01200a2435	f
14	11	python	word-count	2	pending	\N	2014-05-20 14:50:17	2014-05-20 14:50:17	5c9bb2f48a55ae9b2158678b	f
15	11	python	hamming	3	done	2014-05-30 22:44:52	2014-05-20 15:16:54	2014-05-20 15:16:54	e61ec0b69c5427e9fcd965e1	t
16	11	haskell	anagram	1	done	2014-07-13 12:41:28	2014-07-11 21:52:34	2014-07-11 21:52:34	e48a90fbfbe85182d067ee5e	t
17	11	python	grade-school	2	done	2014-08-20 07:21:29	2014-08-12 13:59:12	2014-08-12 13:59:12	9f2b035dbfc482cf16862d04	t
18	11	elixir	beer-song	2	pending	\N	2014-05-14 08:52:43	2014-05-14 08:52:43	8be42a00687c472498f763df	f
19	11	csharp	hamming	2	done	2014-08-02 15:25:25	2014-06-16 10:55:32	2014-06-16 10:55:32	72bf71b71bb393aff698d570	t
20	11	haskell	leap	1	pending	\N	2014-05-26 03:04:25	2014-05-26 03:04:25	392502d37603574ae0771aa3	f
21	11	haskell	bob	1	pending	\N	2014-09-30 05:11:19	2014-09-30 05:11:19	6f841dd2dfba98acf0c87744	f
22	11	javascript	clock	1	done	2014-05-15 06:23:14	2014-05-12 21:29:33	2014-05-12 21:29:33	c1ac9cd42856790c7cdf3fed	t
23	11	haskell	beer-song	1	done	2014-09-10 17:12:30	2014-09-09 00:46:40	2014-09-09 00:46:40	21de44b24517a96faa00db6c	t
24	11	go	leap	4	done	2014-07-20 22:13:55	2014-07-12 17:07:08	2014-07-12 17:07:08	f35b77bee54c7c4f7f6ac638	t
25	11	javascript	anagram	5	done	2014-09-02 17:16:09	2014-06-05 22:49:16	2014-06-05 22:49:16	c5b7a6a90fbba6a28291ff7a	t
26	11	elixir	bob	2	pending	\N	2014-05-30 00:48:53	2014-05-30 00:48:53	52c6e31a6058be0b4a03ec72	f
27	11	python	anagram	4	done	2014-09-19 09:03:51	2014-06-10 22:09:48	2014-06-10 22:09:48	7d8ebab1db7a5c77095fd948	t
28	12	clojure	word-count	5	pending	\N	2014-06-04 06:37:50	2014-06-04 06:37:50	bcd5878e7d0a0bade231b972	f
29	15	elixir	anagram	4	pending	\N	2014-08-26 05:39:57	2014-08-26 05:39:57	f96dc4a7b0709133fc450d8b	f
30	15	ruby	nucleotide-count	1	done	2014-09-01 09:36:29	2014-08-23 02:18:06	2014-08-23 02:18:06	0cb4b5e021a8b524e8abe8d4	t
31	22	clojure	phone-number	1	done	2014-10-05 08:48:14	2014-10-03 16:24:21	2014-10-03 16:24:21	94d3d1027035627ca2e06610	t
32	22	haskell	grains	1	done	2014-11-03 06:18:20	2014-10-31 00:06:32	2014-10-31 00:06:32	f901242cf2660ec9f712c13c	t
33	22	python	bob	1	done	2014-10-07 22:20:25	2014-09-28 03:19:22	2014-09-28 03:19:22	2838808546c6774949771de2	t
34	22	ruby	bob	2	done	2014-10-11 12:32:09	2014-10-08 08:14:45	2014-10-08 08:14:45	8911d34474cf51bcd132684d	t
35	22	clojure	bob	1	done	2014-10-02 07:02:16	2014-09-29 07:33:53	2014-09-29 07:33:53	1bc4465b82180ef35487c084	t
36	22	go	anagram	1	pending	\N	2014-09-28 15:19:55	2014-09-28 15:19:55	904adf2be78a45fe5bd034c4	f
37	22	javascript	queen-attack	1	done	2014-10-07 20:56:50	2014-10-05 22:17:32	2014-10-05 22:17:32	539eff3f9c06012a4a2867e0	t
38	22	python	leap	1	pending	\N	2014-09-27 09:46:15	2014-09-27 09:46:15	36e092567d42fa7710d71ce4	f
39	22	javascript	grains	1	done	2014-10-06 23:41:05	2014-10-04 02:41:46	2014-10-04 02:41:46	2504b48513e15d9595ba819c	t
40	22	python	gigasecond	1	done	2014-11-09 13:59:20	2014-10-29 13:30:15	2014-10-29 13:30:15	df302f920cbba9c5e9e9542c	t
41	22	fsharp	difference-of-squares	2	pending	\N	2014-10-02 09:36:54	2014-10-02 09:36:54	e31598b27cd544584314a697	f
42	22	haskell	gigasecond	1	done	2014-10-13 18:42:59	2014-10-03 09:09:43	2014-10-03 09:09:43	1f3a7eef47362e568cdb5f73	t
43	22	ruby	space-age	1	done	2014-11-04 23:21:49	2014-10-28 14:40:54	2014-10-28 14:40:54	69c4fea067aaabca6c94e1aa	t
44	22	elixir	nucleotide-count	3	done	2014-11-01 19:35:54	2014-10-26 09:58:49	2014-10-26 09:58:49	606c0578343be20e14f15423	t
45	22	elixir	anagram	3	pending	\N	2014-10-15 21:05:40	2014-10-15 21:05:40	878de98044d8a5a046c34c88	f
46	22	ruby	raindrops	1	done	2014-11-27 12:19:08	2014-11-19 21:59:16	2014-11-19 21:59:16	11ea7e13c20d32c718b8200c	t
47	22	haskell	robot-name	2	pending	\N	2014-10-22 20:06:49	2014-10-22 20:06:49	d050c2ae3d6fd0799f1b2b6f	f
48	22	haskell	binary	1	pending	\N	2014-10-19 17:38:22	2014-10-19 17:38:22	a0b3fd74991f820f212c67ca	f
49	22	javascript	binary-search-tree	2	done	2014-11-11 13:19:50	2014-11-07 03:57:54	2014-11-07 03:57:54	d1793b864e51c241d67851df	t
50	22	ruby	binary	3	done	2014-10-20 20:37:37	2014-10-05 18:42:17	2014-10-05 18:42:17	410da26f398275ba0b1f69a0	t
51	22	ruby	crypto-square	1	done	2014-10-21 23:09:33	2014-10-17 13:16:51	2014-10-17 13:16:51	03d2a20b5d3713d654f8443d	t
52	22	ruby	palindrome-products	2	pending	\N	2014-10-08 18:27:08	2014-10-08 18:27:08	0e894aaab4f941e8450b1389	f
53	22	ruby	hexadecimal	2	done	2014-10-24 04:14:05	2014-10-12 17:55:11	2014-10-12 17:55:11	64fcc007b4a91034dfedaabc	t
54	22	python	grade-school	1	pending	\N	2014-10-05 11:20:44	2014-10-05 11:20:44	b93cb6a44a333bdde75cb3d1	f
55	22	clojure	robot-name	1	pending	\N	2014-10-24 04:47:05	2014-10-24 04:47:05	efebc9d18dccc599d17a7438	f
56	28	ruby	word-count	3	done	2014-11-10 18:32:32	2014-11-08 21:54:32	2014-11-08 21:54:32	0bf1095e4aae1756d564b5b1	t
57	29	perl5	list-ops	1	pending	\N	2014-07-18 02:26:27	2014-07-18 02:26:27	c7272d2481ccfb3a8bdac18f	f
58	29	csharp	etl	2	done	2014-06-14 02:42:19	2014-03-24 08:14:14	2014-03-24 08:14:14	e987f2beda8462d7d329aad2	t
59	29	haskell	binary-search-tree	1	pending	\N	2014-05-05 23:03:16	2014-05-05 23:03:16	c59e0c814e1061045cd50ce4	f
60	29	ruby	bob	2	done	2014-08-14 16:20:37	2014-05-30 16:44:36	2014-05-30 16:44:36	5894dc3fd7b504f7f1b54a27	t
61	29	javascript	queen-attack	1	done	2014-06-17 15:21:03	2014-06-16 00:04:45	2014-06-16 00:04:45	eb58d68b3a5e035ec978349c	t
62	29	haskell	binary	2	done	2014-06-20 19:41:43	2014-05-21 00:33:53	2014-05-21 00:33:53	3d323e2aba302b061741849a	t
63	29	coffeescript	word-count	1	done	2014-07-05 10:46:03	2014-06-25 16:11:58	2014-06-25 16:11:58	c9b8ac8c72670eb80d5f1758	t
64	29	elixir	anagram	1	pending	\N	2014-06-19 11:16:16	2014-06-19 11:16:16	7dd4da5951c05e411ec92d92	f
65	29	haskell	beer-song	5	pending	\N	2014-04-22 23:08:52	2014-04-22 23:08:52	a18023ebea4734038db0b248	f
66	29	ruby	raindrops	1	done	2014-05-30 00:15:21	2014-05-23 22:40:28	2014-05-23 22:40:28	b187935088455d45b274824c	t
67	29	csharp	leap	2	pending	\N	2014-03-30 14:32:49	2014-03-30 14:32:49	27a261d8bf44c4e00c207732	f
68	29	clojure	rna-transcription	2	done	2014-08-01 08:08:12	2014-06-23 23:58:11	2014-06-23 23:58:11	9bd0cd24c9ee884497ac349b	t
69	29	ruby	gigasecond	1	done	2014-06-16 19:02:27	2014-06-16 16:48:50	2014-06-16 16:48:50	55e23ea75ad020631934fa3c	t
70	29	ruby	grains	3	pending	\N	2014-06-04 03:56:32	2014-06-04 03:56:32	020c70d228d412ef6d402812	f
71	29	haskell	leap	1	done	2014-04-06 19:41:39	2014-04-02 10:15:11	2014-04-02 10:15:11	86dfdf37fffce90d90a8ddf9	t
72	29	ruby	leap	1	done	2014-05-06 01:04:35	2014-05-03 11:27:47	2014-05-03 11:27:47	fad76186eff33605d4742473	t
73	29	ruby	hamming	1	done	2014-06-03 14:03:36	2014-05-26 20:21:17	2014-05-26 20:21:17	c3bacac89b7db94b1a29cad2	t
74	29	haskell	rna-transcription	1	done	2014-04-12 13:57:54	2014-04-04 14:14:52	2014-04-04 14:14:52	f8fad0e563cf402d2a1be6e7	t
75	29	go	leap	1	done	2014-07-26 10:34:42	2014-07-17 09:09:12	2014-07-17 09:09:12	9fec3077879d5c3e43944888	t
76	29	coffeescript	clock	1	done	2014-07-24 10:01:18	2014-07-22 16:28:15	2014-07-22 16:28:15	8a784176da69d42918bceac1	t
77	29	javascript	robot-simulator	1	done	2014-07-11 19:53:17	2014-07-07 10:39:58	2014-07-07 10:39:58	37fbf0f16fe7a5584bb63113	t
78	29	ruby	pythagorean-triplet	2	done	2014-05-10 04:55:47	2014-05-03 01:42:27	2014-05-03 01:42:27	11f2a36c4b37bb50f9bab6e6	t
79	29	haskell	robot-name	1	done	2014-04-10 15:11:24	2014-04-03 10:25:35	2014-04-03 10:25:35	8add0eaa3f443b789008f756	t
80	29	clojure	bob	3	done	2014-04-25 17:16:01	2014-04-21 23:49:21	2014-04-21 23:49:21	225daedd23dcc3a9843797e6	t
81	29	go	hamming	1	done	2014-08-16 20:15:51	2014-08-14 14:58:40	2014-08-14 14:58:40	0c7396f2de750c7aca746ffc	t
82	29	haskell	luhn	3	done	2014-09-09 13:13:48	2014-04-30 07:31:03	2014-04-30 07:31:03	90a980c50e19eb368bbe5e05	t
83	29	python	bob	1	done	2014-09-21 04:07:38	2014-09-12 23:01:23	2014-09-12 23:01:23	da21a479d95cbf2f5f5fd365	t
84	29	csharp	phone-number	1	done	2014-05-19 00:51:51	2014-05-14 10:55:07	2014-05-14 10:55:07	462cbf9b36f5a564cd1b32ed	t
85	29	go	gigasecond	2	done	2014-08-10 07:50:19	2014-07-05 00:27:24	2014-07-05 00:27:24	dcfd030347cd569b9a1895f0	t
86	29	go	word-count	1	done	2014-06-24 23:45:48	2014-06-24 17:25:11	2014-06-24 17:25:11	24e5dc3bbad648d697f0ea69	t
87	29	clojure	word-count	2	pending	\N	2014-10-28 10:51:40	2014-10-28 10:51:40	8fc360c25c0024ed84910fbd	f
88	29	go	series	1	done	2014-05-25 19:52:50	2014-05-19 20:38:48	2014-05-19 20:38:48	93f55bf857c8afe08b159cd9	t
89	29	haskell	simple-linked-list	3	pending	\N	2014-05-03 13:33:45	2014-05-03 13:33:45	357526d74ffa5e8c0c365855	f
90	29	python	octal	1	done	2014-04-06 21:10:02	2014-04-05 11:54:23	2014-04-05 11:54:23	274b7d9cdabaddb0ef21dc3b	t
91	29	go	anagram	1	done	2014-06-03 08:29:09	2014-06-02 01:32:32	2014-06-02 01:32:32	7ad0ab420cb753079df1aa30	t
92	29	csharp	robot-name	2	pending	\N	2014-06-02 01:45:01	2014-06-02 01:45:01	e865b1e8879d1d349f558c73	f
93	29	javascript	etl	1	pending	\N	2014-04-11 03:10:46	2014-04-11 03:10:46	0c98a008f086a8762a090660	f
94	29	haskell	matrix	5	done	2014-11-13 14:06:15	2014-04-03 00:17:37	2014-04-03 00:17:37	509d6ff993817a49940bcad0	t
95	31	haskell	robot-name	2	done	2014-08-26 20:27:47	2014-07-29 08:40:10	2014-07-29 08:40:10	31af127eef5b06ea960ec937	t
96	31	go	clock	2	done	2014-08-05 07:32:25	2014-06-13 23:25:56	2014-06-13 23:25:56	4dd4fe189c7dfa09bdd3abd1	t
97	31	python	phone-number	1	done	2014-05-20 08:19:03	2014-05-17 11:32:53	2014-05-17 11:32:53	ff2cd6090b384573f3619110	t
98	33	ruby	clock	1	pending	\N	2014-08-08 06:58:26	2014-08-08 06:58:26	cf763a0ac1c9fe29b24f0f8b	f
99	33	perl5	leap	1	done	2014-09-23 21:08:44	2014-09-18 21:55:37	2014-09-18 21:55:37	18925e46ef3132a0d2ddb2a2	t
100	33	swift	leap	2	done	2014-10-19 16:10:49	2014-07-23 05:24:13	2014-07-23 05:24:13	bed4eb721e7677cda77acf46	t
101	33	perl5	word-count	1	done	2014-10-05 20:44:35	2014-09-27 11:00:56	2014-09-27 11:00:56	e4c53eb5d4c8bb9eb75501a5	t
102	38	python	phone-number	1	pending	\N	2014-07-24 02:49:06	2014-07-24 02:49:06	f66eb27c4e751e267f3717ff	f
103	38	clojure	rna-transcription	1	done	2014-05-05 03:05:14	2014-04-30 19:02:34	2014-04-30 19:02:34	0579160287301f6a6f10853f	t
104	38	clojure	word-count	3	pending	\N	2014-04-08 03:31:02	2014-04-08 03:31:02	7b88fb74f8171777db087e50	f
105	38	ruby	nth-prime	1	pending	\N	2014-04-08 13:35:18	2014-04-08 13:35:18	9983a4e5bdccd35f2f3a1c89	f
106	38	csharp	leap	4	done	2014-10-14 20:54:11	2014-06-15 19:00:56	2014-06-15 19:00:56	6de600e18037df502a6f8b16	t
107	38	ruby	grade-school	1	done	2014-08-16 10:02:51	2014-08-11 14:21:33	2014-08-11 14:21:33	72335c6ddeb2ebf450547722	t
108	40	javascript	bob	2	done	2014-03-18 01:03:14	2014-03-17 06:39:56	2014-03-17 06:39:56	28205b9b4b7ec02eef9b48f0	t
109	40	ruby	roman-numerals	1	pending	\N	2014-06-15 07:40:25	2014-06-15 07:40:25	609e02bc656dd60b6cfab060	f
110	40	ruby	raindrops	1	done	2014-08-12 06:26:37	2014-08-05 10:24:40	2014-08-05 10:24:40	b28e1b3d94f92f923d3847ad	t
111	40	ruby	leap	1	done	2014-08-11 00:20:19	2014-08-02 14:44:34	2014-08-02 14:44:34	fa372a0f3cef29a00ba3555e	t
112	40	python	word-count	2	done	2014-06-20 10:58:53	2014-06-18 06:27:07	2014-06-18 06:27:07	b02e6cb1b79da99df545d701	t
113	40	haskell	nucleotide-count	1	done	2014-07-03 07:23:01	2014-06-26 22:15:20	2014-06-26 22:15:20	38100a067b09feb129f82531	t
114	40	go	etl	2	done	2014-06-02 06:10:40	2014-05-26 12:06:18	2014-05-26 12:06:18	9c57c3c4c9ccf9d6de666965	t
115	40	csharp	leap	4	done	2014-09-10 19:12:06	2014-03-21 00:36:45	2014-03-21 00:36:45	212548f6a292bb8b7c67c500	t
116	40	ruby	hamming	2	done	2014-03-30 06:58:36	2014-03-27 01:00:40	2014-03-27 01:00:40	ee9a6009a9d38136b4650f52	t
117	40	csharp	sum-of-multiples	1	done	2014-06-30 14:16:09	2014-06-28 22:43:55	2014-06-28 22:43:55	91932936674162f8820cec49	t
118	40	ruby	word-count	1	done	2014-04-24 15:20:21	2014-04-21 20:46:05	2014-04-21 20:46:05	d5f4d328a43adc7d72212977	t
119	40	haskell	point-mutations	2	done	2014-05-29 21:28:39	2014-04-28 21:00:08	2014-04-28 21:00:08	67f0e6259e721dfdd4092ec5	t
120	40	ruby	etl	2	pending	\N	2014-06-09 08:59:34	2014-06-09 08:59:34	3cc66df41abf74fc5c0abb7b	f
121	40	clojure	robot-simulator	2	done	2014-08-02 03:51:52	2014-07-09 05:22:34	2014-07-09 05:22:34	fe14bbb562482d889f98ddcd	t
122	40	elixir	nucleotide-count	1	done	2014-04-26 07:39:31	2014-04-19 11:53:04	2014-04-19 11:53:04	1394bbe3f6b263851e20335f	t
123	40	python	rna-transcription	1	done	2014-05-21 17:42:32	2014-05-18 00:33:43	2014-05-18 00:33:43	862b8f1471fafba9b97536b5	t
124	40	clojure	bob	2	pending	\N	2014-07-16 18:04:05	2014-07-16 18:04:05	b0c25ddd8b13632ba7a331ba	f
125	40	haskell	bob	2	done	2014-04-02 02:07:03	2014-03-22 23:56:29	2014-03-22 23:56:29	ba738d9606059ce3c4291406	t
126	40	javascript	word-count	7	done	2014-09-13 14:28:21	2014-04-25 02:15:06	2014-04-25 02:15:06	195c5585f4aa00c83bbe0f85	t
127	40	ruby	triangle	1	pending	\N	2014-05-10 17:06:26	2014-05-10 17:06:26	5f16637e18ccdb2fb9e4d6ea	f
128	40	cpp	word-count	1	pending	\N	2014-05-17 18:40:40	2014-05-17 18:40:40	b2551a4e546811feb686b799	f
129	40	elixir	rna-transcription	4	done	2014-08-07 16:09:20	2014-04-08 10:21:21	2014-04-08 10:21:21	5a9f6300d656e762a4c2841a	t
130	40	python	hamming	2	pending	\N	2014-04-28 15:46:57	2014-04-28 15:46:57	46a90b876d12793a725f8992	f
131	40	ruby	difference-of-squares	1	done	2014-05-02 04:36:23	2014-04-30 06:54:38	2014-04-30 06:54:38	bd1572d431be0cc33475a3b6	t
132	40	cpp	bob	2	done	2014-05-23 01:14:29	2014-03-20 12:37:29	2014-03-20 12:37:29	8aea54ee39fcf1cc10ecc795	t
133	40	elixir	bob	1	pending	\N	2014-04-18 02:38:17	2014-04-18 02:38:17	b780e84b4991ac7b51b2a96d	f
134	40	python	leap	1	pending	\N	2014-04-18 13:01:39	2014-04-18 13:01:39	9d1abbcf2238ec8ca7127200	f
135	40	ruby	anagram	1	done	2014-05-12 08:29:32	2014-05-08 01:32:10	2014-05-08 01:32:10	ed84ab63faa6ee9a7094f93d	t
136	40	go	rna-transcription	1	done	2014-06-22 03:12:16	2014-06-17 17:38:02	2014-06-17 17:38:02	f08d10a4a414bdbd05abe2f9	t
137	40	ruby	bob	4	pending	\N	2014-04-23 07:41:28	2014-04-23 07:41:28	72c040473e9b5d94f69e22bc	f
138	40	elixir	point-mutations	1	done	2014-03-24 17:27:01	2014-03-24 15:18:53	2014-03-24 15:18:53	92f6cade35e7f3d1329e9038	t
139	40	go	hamming	2	done	2014-10-04 21:31:19	2014-03-29 19:23:42	2014-03-29 19:23:42	04c85908aa76bdc4e0c7e3be	t
140	44	javascript	beer-song	1	done	2014-08-17 15:20:45	2014-08-11 17:48:55	2014-08-11 17:48:55	adb84f8aae01c75ae2c86d25	t
141	46	clojure	bob	3	done	2014-09-17 14:44:57	2014-09-08 18:50:20	2014-09-08 18:50:20	a7164e92a78be0b21035f5c3	t
142	46	ruby	wordy	1	done	2014-09-13 12:58:15	2014-09-11 01:46:51	2014-09-11 01:46:51	6cab308aae55f8d2f3622809	t
143	46	ruby	word-count	2	done	2014-10-26 03:34:02	2014-09-25 17:16:06	2014-09-25 17:16:06	5a257617c58df88d80c8ebd1	t
144	46	ruby	grains	3	done	2014-09-09 23:55:17	2014-08-29 13:22:26	2014-08-29 13:22:26	9d849679c7f92794e1ededc3	t
145	46	elixir	list-ops	2	pending	\N	2014-09-02 17:14:04	2014-09-02 17:14:04	0e3a0f338e18dd3b5c4ecece	f
146	48	javascript	word-count	1	done	2014-11-28 06:37:15.114526	2014-11-26 16:25:38	2014-11-26 16:25:38	bbf7bdc1d406ac32de6cee91	t
147	48	clojure	meetup	1	done	2014-11-28 06:37:15.147563	2014-11-22 18:45:28	2014-11-22 18:45:28	c4ceb5b3319665da0898f7ba	t
148	48	ruby	rna-transcription	1	pending	\N	2014-11-22 21:17:29	2014-11-22 21:17:29	96e64e04de8540dd2d849689	f
149	48	python	matrix	2	done	2014-11-28 06:37:15.25978	2014-11-24 03:56:42	2014-11-24 03:56:42	7b564ef990678e6c1876b9a3	t
150	48	haskell	kindergarten-garden	3	pending	\N	2014-11-25 16:15:30	2014-11-25 16:15:30	e2091004b1073f17c25fb5ad	f
151	48	ruby	bob	1	pending	\N	2014-11-23 12:38:53	2014-11-23 12:38:53	7454cfd8d09c32dbf71cbd32	f
152	48	javascript	allergies	1	pending	\N	2014-11-25 13:27:20	2014-11-25 13:27:20	605daa1b7dc184bf78df78e1	f
153	49	ruby	rna-transcription	2	pending	\N	2014-07-10 13:46:39	2014-07-10 13:46:39	f78ef84412053fa51524b341	f
154	49	ruby	bob	1	pending	\N	2014-09-28 20:00:43	2014-09-28 20:00:43	f373d8dff676d93e08748262	f
155	49	ruby	scrabble-score	2	pending	\N	2014-08-09 05:00:36	2014-08-09 05:00:36	b45b07e4d4f17b4c363f112a	f
156	49	python	bob	1	pending	\N	2014-07-18 07:04:46	2014-07-18 07:04:46	31a48e2d69388cd90f1f856a	f
157	49	ruby	raindrops	1	pending	\N	2014-08-25 00:19:48	2014-08-25 00:19:48	fcf8ad32d2fce4a5ed3fbe19	f
158	49	ruby	nucleotide-count	2	pending	\N	2014-08-05 22:54:56	2014-08-05 22:54:56	eecd378aeda3bc006ce2d0ee	f
159	49	haskell	rna-transcription	3	pending	\N	2014-08-02 02:42:32	2014-08-02 02:42:32	6f7150befd79922cb03e8dd9	f
160	49	ruby	anagram	1	pending	\N	2014-07-15 19:36:33	2014-07-15 19:36:33	896643f9c24e0c6e5dc6cba9	f
161	49	python	word-count	4	pending	\N	2014-08-02 18:25:53	2014-08-02 18:25:53	4fe2f75497f11bad95629b1f	f
162	49	haskell	strain	1	pending	\N	2014-08-03 00:14:28	2014-08-03 00:14:28	56f8da7d6fc97296c14d8c71	f
163	49	ruby	gigasecond	1	pending	\N	2014-07-19 15:47:36	2014-07-19 15:47:36	a8f5f797c58338bbabfb6281	f
164	49	python	leap	1	pending	\N	2014-07-19 20:43:30	2014-07-19 20:43:30	b4b3170dd89070c739f392b5	f
165	49	ruby	hamming	1	pending	\N	2014-08-01 01:26:02	2014-08-01 01:26:02	6a4d3184dc0a2aec5ac1fa64	f
166	49	ruby	leap	3	pending	\N	2014-09-14 15:47:59	2014-09-14 15:47:59	2ade0e1bb6a75ffa68a3850b	f
167	49	clojure	bob	1	pending	\N	2014-07-30 18:27:58	2014-07-30 18:27:58	c8269255911d95530a0879d4	f
168	49	fsharp	space-age	1	pending	\N	2014-07-05 12:01:21	2014-07-05 12:01:21	95eba703e92feec680c8a709	f
169	49	haskell	bob	3	pending	\N	2014-07-26 08:51:42	2014-07-26 08:51:42	c9a254005c39f200968a0f0a	f
170	49	scala	word-count	1	pending	\N	2014-07-21 09:51:32	2014-07-21 09:51:32	67f30e98b2313a9bf8726fa0	f
171	49	coffeescript	bob	2	pending	\N	2014-08-11 09:06:12	2014-08-11 09:06:12	a61d5b4b207959e40f96ea3c	f
172	49	python	anagram	1	pending	\N	2014-10-14 19:49:28	2014-10-14 19:49:28	1adc89bbff8e6122a08a500f	f
173	26	python	gigasecond	2	pending	\N	2014-09-27 21:41:28	2014-09-27 21:41:28	b2daa5f34a977bf9578a4aee	f
174	26	haskell	beer-song	2	pending	\N	2014-10-05 08:03:55	2014-10-05 08:03:55	180b28b46af2cef8c0f5c766	f
175	26	haskell	leap	2	pending	\N	2014-09-19 19:31:37	2014-09-19 19:31:37	3a2de7e025561b7199499249	f
176	26	ruby	bob	11	pending	\N	2014-09-13 03:15:11	2014-09-13 03:15:11	f61633d52134a5bc9ed7aba8	f
177	26	python	beer-song	2	pending	\N	2014-10-17 22:23:32	2014-10-17 22:23:32	76c1bdc12294418ff382c83d	f
178	26	javascript	bob	1	pending	\N	2014-10-10 10:55:46	2014-10-10 10:55:46	ab291cb9b45f49b1541c6014	f
179	26	ruby	prime-factors	1	pending	\N	2014-09-23 19:53:17	2014-09-23 19:53:17	288e14a1588ff4eac88ee665	f
180	7	haskell	bob	4	pending	\N	2014-09-29 06:46:15	2014-09-29 06:46:15	677b1e58f9cad6bb580cdc4d	f
181	7	javascript	anagram	1	pending	\N	2014-10-09 11:16:09	2014-10-09 11:16:09	ccd96225e29c63b05af3450e	f
182	7	javascript	word-count	4	pending	\N	2014-10-06 17:22:11	2014-10-06 17:22:11	368ff210c7de360e52382d62	f
183	7	python	rna-transcription	1	pending	\N	2014-10-04 21:20:01	2014-10-04 21:20:01	3ccbf875c834a2daf843d989	f
184	7	ruby	robot-name	1	pending	\N	2014-11-04 05:08:45	2014-11-04 05:08:45	02c8d2f6b1816288d3460270	f
185	23	ruby	raindrops	2	pending	\N	2014-07-26 02:37:41	2014-07-26 02:37:41	12d893c2e7651d431143ae25	f
186	23	python	difference-of-squares	1	pending	\N	2014-08-06 03:04:34	2014-08-06 03:04:34	a60b7ff0b53e19248a235ad4	f
187	23	python	bob	1	pending	\N	2014-10-27 05:42:58	2014-10-27 05:42:58	d558e120e0a3d26b499630e7	f
188	23	ruby	roman-numerals	1	pending	\N	2014-09-27 15:38:49	2014-09-27 15:38:49	aecb5e0247cf05b64e148aa7	f
189	23	clojure	raindrops	1	pending	\N	2014-07-11 11:32:31	2014-07-11 11:32:31	563a312e2f937ddf50e39ae3	f
190	23	ruby	leap	1	pending	\N	2014-08-30 16:16:09	2014-08-30 16:16:09	6463ab25ab7bea82c7c520e1	f
191	23	csharp	grade-school	1	pending	\N	2014-08-26 22:07:43	2014-08-26 22:07:43	6b632e1e5eee0a04c972c475	f
192	23	ruby	nucleotide-count	2	pending	\N	2014-07-11 16:08:19	2014-07-11 16:08:19	65560e620ecdd5628ce65902	f
193	23	go	secret-handshake	1	pending	\N	2014-08-02 07:08:50	2014-08-02 07:08:50	31cec13637d0f3d40e0f83b1	f
194	23	ruby	hamming	5	pending	\N	2014-07-06 20:58:58	2014-07-06 20:58:58	01e7ad722658271582037ba7	f
195	23	ruby	gigasecond	1	pending	\N	2014-07-22 23:56:22	2014-07-22 23:56:22	3d6c985b3b2711a0abc58f18	f
196	23	ruby	nth-prime	1	pending	\N	2014-08-29 16:31:08	2014-08-29 16:31:08	a10c73cb64a8b7219aeb95c7	f
197	23	python	word-count	1	pending	\N	2014-07-12 01:00:51	2014-07-12 01:00:51	63a9172da3c9ca84ee576bf8	f
198	23	javascript	phone-number	1	pending	\N	2014-08-27 19:31:43	2014-08-27 19:31:43	3b4d78bf1ca4cec34ab44551	f
199	23	scala	bob	1	pending	\N	2014-09-28 06:54:58	2014-09-28 06:54:58	6139968161a1ec85f13f4845	f
200	23	ruby	bob	1	pending	\N	2014-10-11 21:56:17	2014-10-11 21:56:17	bf246c0f7142125d932612e2	f
201	23	ruby	word-count	1	pending	\N	2014-07-21 20:50:03	2014-07-21 20:50:03	bb6fcbd204e265c75c286b5d	f
202	23	ruby	scrabble-score	1	pending	\N	2014-08-29 08:14:25	2014-08-29 08:14:25	8c6e9ecf144a44d0f9e06b91	f
203	23	python	ocr-numbers	1	pending	\N	2014-08-19 05:49:36	2014-08-19 05:49:36	f3dcfd7389035bcbf4027381	f
204	23	haskell	largest-series-product	1	pending	\N	2014-08-10 06:40:36	2014-08-10 06:40:36	94f65cf0a3863af9594479ca	f
205	23	javascript	etl	4	pending	\N	2014-07-18 06:31:55	2014-07-18 06:31:55	96b661b57e775dc8f5bdbfc1	f
206	23	python	rna-transcription	1	pending	\N	2014-07-24 07:08:10	2014-07-24 07:08:10	d944cf0e9518946741ccaa75	f
207	23	ruby	wordy	1	pending	\N	2014-10-12 13:56:32	2014-10-12 13:56:32	4366fd519f1950c24f258589	f
208	23	javascript	rna-transcription	1	pending	\N	2014-07-19 09:21:23	2014-07-19 09:21:23	c6b93c134e6e08697569f095	f
209	23	coffeescript	anagram	2	pending	\N	2014-07-13 20:29:18	2014-07-13 20:29:18	e8c1868b372b2afcd00a38b9	f
210	23	perl5	clock	1	pending	\N	2014-10-02 19:01:35	2014-10-02 19:01:35	c18046148cc446902d20b7c1	f
211	23	python	leap	2	pending	\N	2014-07-28 17:06:31	2014-07-28 17:06:31	9294849ad1f98ad51b4ac3f0	f
212	23	swift	bob	1	pending	\N	2014-07-27 18:22:25	2014-07-27 18:22:25	da66b13c90d9c27423bccba5	f
213	23	elixir	grains	1	pending	\N	2014-08-24 17:29:36	2014-08-24 17:29:36	7f465cf92eac4b7dfcb404ce	f
214	23	haskell	pascals-triangle	3	pending	\N	2014-07-04 03:17:30	2014-07-04 03:17:30	944bdbc9a2b369aa050c555e	f
215	23	clojure	rna-transcription	1	pending	\N	2014-11-14 02:23:38	2014-11-14 02:23:38	8eb54eac4f8c60dfe447dd9d	f
216	23	haskell	nth-prime	1	pending	\N	2014-08-03 09:30:53	2014-08-03 09:30:53	c5d004332ee2e4ab0ece46bb	f
217	23	javascript	bob	2	pending	\N	2014-07-03 07:40:07	2014-07-03 07:40:07	117758248b50a7755d91d7a8	f
218	23	go	anagram	1	pending	\N	2014-07-18 03:28:38	2014-07-18 03:28:38	ed7f0065bb12189936802a92	f
219	23	ruby	rna-transcription	3	pending	\N	2014-08-25 13:11:28	2014-08-25 13:11:28	07ffc813fab36eef61ebb179	f
220	23	elixir	space-age	2	pending	\N	2014-07-13 04:23:06	2014-07-13 04:23:06	54bd1fe54707ac74efa838c2	f
221	23	ruby	grade-school	1	pending	\N	2014-07-14 07:04:45	2014-07-14 07:04:45	7b11ea9fa76fa62f0a1008e1	f
222	17	ruby	pythagorean-triplet	1	pending	\N	2014-11-04 11:02:44	2014-11-04 11:02:44	8e2378cb97c366bf536fa878	f
223	17	ruby	gigasecond	1	pending	\N	2014-11-18 21:47:07	2014-11-18 21:47:07	eea69a247ef6e395502b5b41	f
224	17	csharp	leap	1	pending	\N	2014-11-05 10:55:45	2014-11-05 10:55:45	fcb5e266b2a29b8e9e8fe3e5	f
225	17	haskell	bob	1	pending	\N	2014-11-05 20:47:02	2014-11-05 20:47:02	bd5fd0438e22e38c041d9152	f
226	20	javascript	word-count	1	done	2014-11-28 06:37:18.865614	2014-11-26 02:37:54	2014-11-26 02:37:54	6f3b8a6bece6c66005a628c0	t
227	20	ruby	allergies	1	done	2014-11-28 06:37:18.896247	2014-11-27 00:18:25	2014-11-27 00:18:25	b7db032e8cfe550751e8db9a	t
228	20	clojure	nucleotide-count	3	done	2014-11-28 06:37:18.95882	2014-11-26 20:38:38	2014-11-26 20:38:38	ffc5d3840121dadb3ab81358	t
229	20	haskell	sublist	1	done	2014-11-28 06:37:18.981944	2014-11-26 02:03:32	2014-11-26 02:03:32	1a5def5e4231d3408c96b2a3	t
230	20	javascript	pythagorean-triplet	1	done	2014-11-26 17:08:37	2014-11-26 03:05:40	2014-11-26 03:05:40	1458f1c7ecf1c57cb22a24fe	t
231	21	erlang	rna-transcription	1	done	2014-10-14 18:40:04	2014-10-06 23:47:39	2014-10-06 23:47:39	f76bf558324e20c89a90bb4d	t
232	36	ruby	difference-of-squares	1	done	2014-10-25 17:42:36	2014-10-18 09:50:37	2014-10-18 09:50:37	4c4a0a0ad8c312775d7ec2dd	t
233	30	ruby	hamming	2	done	2014-06-19 06:48:43	2014-05-23 02:15:14	2014-05-23 02:15:14	abb6a9f52d9fc1a5c14926b5	t
234	30	clojure	beer-song	1	done	2014-09-13 22:19:06	2014-09-13 14:04:34	2014-09-13 14:04:34	393ccb40c128906c40f5ac14	t
235	30	ruby	bob	3	done	2014-07-08 19:34:41	2014-06-12 00:55:00	2014-06-12 00:55:00	f4733f2df395700edc1454a8	t
236	30	javascript	word-count	1	done	2014-07-13 02:34:03	2014-07-01 18:32:52	2014-07-01 18:32:52	2658968d1fbd482b26d17f21	t
237	30	ruby	leap	1	done	2014-07-31 20:26:04	2014-07-21 17:57:02	2014-07-21 17:57:02	763286012f85d7a66344aa42	t
238	35	ruby	rna-transcription	4	done	2014-11-28 06:37:19.335693	2014-11-27 13:37:05	2014-11-27 13:37:05	f848e7207ca70ae552236d81	t
239	35	javascript	nucleotide-count	2	done	2014-11-28 06:37:19.394618	2014-11-27 00:53:29	2014-11-27 00:53:29	4e59aad5d2100bf361908e78	t
240	35	clojure	point-mutations	1	done	2014-11-28 06:37:19.420701	2014-11-27 15:37:02	2014-11-27 15:37:02	d6836e31fa50be5850441e38	t
241	35	python	rna-transcription	1	done	2014-11-28 06:37:19.460425	2014-11-27 22:11:10	2014-11-27 22:11:10	ab81b92808b3126372475a64	t
242	14	javascript	word-count	5	pending	\N	2014-07-01 04:23:47	2014-07-01 04:23:47	24c91da4eec25fa5622473d1	f
243	14	python	meetup	2	pending	\N	2014-07-02 16:16:58	2014-07-02 16:16:58	77876f5234586cb9c1a5ea4b	f
244	14	python	difference-of-squares	1	pending	\N	2014-09-28 12:58:10	2014-09-28 12:58:10	6ba3fb389a5a387d15440827	f
245	14	ruby	hamming	3	pending	\N	2014-07-03 02:16:43	2014-07-03 02:16:43	d2472223ec8a4a7e5575bc60	f
246	41	javascript	beer-song	1	pending	\N	2014-09-01 17:32:58	2014-09-01 17:32:58	9e8832e662fef2cd8c98685d	f
247	41	ruby	rna-transcription	2	pending	\N	2014-09-03 19:42:32	2014-09-03 19:42:32	c5733c00adc4d210d72373ec	f
248	41	ruby	bob	3	pending	\N	2014-08-30 09:58:43	2014-08-30 09:58:43	81a20e40f47c2dd413cead09	f
249	41	python	bob	1	pending	\N	2014-08-20 21:44:49	2014-08-20 21:44:49	e665bdf6a73aee7df0993486	f
250	41	python	word-count	5	pending	\N	2014-10-02 14:31:05	2014-10-02 14:31:05	9bd2ce9ab1a62f08e41895de	f
251	41	ruby	hamming	1	pending	\N	2014-09-28 17:52:00	2014-09-28 17:52:00	8fedd05519b099e3c9eedee1	f
252	41	elixir	bank-account	1	pending	\N	2014-08-25 11:19:06	2014-08-25 11:19:06	c6e4c0f90c14815807c6a1ee	f
253	41	python	grains	2	pending	\N	2014-09-01 05:28:53	2014-09-01 05:28:53	f6b0d6bb314728d52b48f1a9	f
254	41	ruby	accumulate	1	pending	\N	2014-09-23 00:08:23	2014-09-23 00:08:23	d4cf5471d495564f6a1edfaa	f
255	41	ruby	scrabble-score	1	pending	\N	2014-09-13 17:22:22	2014-09-13 17:22:22	0688458781e03bad4b27d572	f
256	41	lua	hamming	1	pending	\N	2014-10-10 15:53:19	2014-10-10 15:53:19	dbac6edb63341705752422c5	f
257	41	csharp	twelve-days	2	pending	\N	2014-09-21 21:15:54	2014-09-21 21:15:54	2f3183a4adefcc5a66ba65da	f
258	41	javascript	hamming	1	pending	\N	2014-09-18 09:14:17	2014-09-18 09:14:17	2f6ea21f83cc7c3f2d09ece1	f
259	41	javascript	robot-name	1	pending	\N	2014-09-08 08:40:39	2014-09-08 08:40:39	3bb52f4715fd3b3cad56cd52	f
260	41	go	hamming	1	pending	\N	2014-10-24 09:44:54	2014-10-24 09:44:54	9fbc7186de1afdd5615e089b	f
261	41	clojure	rna-transcription	1	pending	\N	2014-09-19 09:28:15	2014-09-19 09:28:15	565c2b32b23e5abfb123a361	f
262	41	coffeescript	beer-song	1	pending	\N	2014-08-16 16:20:48	2014-08-16 16:20:48	4caae7c1909729a254b139ad	f
263	41	javascript	bob	1	pending	\N	2014-09-16 12:26:57	2014-09-16 12:26:57	e56331f7083993306aac4fb0	f
264	41	clojure	word-count	2	pending	\N	2014-08-26 21:31:58	2014-08-26 21:31:58	258313217c71b4c674d2c53e	f
265	41	coffeescript	bob	1	pending	\N	2014-09-01 10:11:11	2014-09-01 10:11:11	3c84ed633ca04c1a8093a492	f
266	41	ruby	anagram	2	pending	\N	2014-08-17 00:38:14	2014-08-17 00:38:14	0fdcca34b7bb83752e07f829	f
267	41	python	series	1	pending	\N	2014-11-01 16:08:54	2014-11-01 16:08:54	da004cd660ca99258e6dddb1	f
268	41	javascript	robot-simulator	1	pending	\N	2014-08-20 15:50:07	2014-08-20 15:50:07	103f666d64ef67ed5e2dde4c	f
269	41	haskell	rna-transcription	4	pending	\N	2014-08-18 01:53:36	2014-08-18 01:53:36	c1136f0c69cb9e529c06a9bb	f
270	41	ruby	grains	3	pending	\N	2014-08-22 18:12:33	2014-08-22 18:12:33	e36013c63629aba62d25a5b6	f
271	41	perl5	minesweeper	1	pending	\N	2014-10-04 20:45:46	2014-10-04 20:45:46	1577ca2ba214a9af37ca979d	f
272	41	python	leap	1	pending	\N	2014-09-27 00:21:02	2014-09-27 00:21:02	e990e4f4a1453d4cc772e7c9	f
273	41	clojure	etl	1	pending	\N	2014-09-20 01:55:00	2014-09-20 01:55:00	46c38e3c8c0a69003fcddbb4	f
274	41	clojure	anagram	1	pending	\N	2014-08-21 18:40:48	2014-08-21 18:40:48	33381b4c548a867bee1e53e8	f
275	6	javascript	palindrome-products	1	pending	\N	2014-08-08 00:15:58	2014-08-08 00:15:58	1f5bed1cea34fe8052a494fd	f
276	6	ruby	grains	1	pending	\N	2014-09-18 07:04:34	2014-09-18 07:04:34	27867dca11ec85cfa6735c41	f
277	6	cpp	word-count	2	pending	\N	2014-09-12 23:54:23	2014-09-12 23:54:23	8a2ce4b86d9d094829d97372	f
278	34	python	bob	1	pending	\N	2014-09-07 23:13:24	2014-09-07 23:13:24	54099c8d9fbbb66fd801b08a	f
279	16	go	house	1	pending	\N	2014-05-18 05:00:23	2014-05-18 05:00:23	e007d2dcba8233afdb159560	f
280	16	python	hamming	1	pending	\N	2014-04-01 01:36:52	2014-04-01 01:36:52	3b3845b9d20c2c4812e35ddb	f
281	16	csharp	etl	1	pending	\N	2014-03-07 09:13:08	2014-03-07 09:13:08	9f91d25344209e86389c2e17	f
282	16	ruby	nucleotide-count	2	pending	\N	2014-07-22 13:14:30	2014-07-22 13:14:30	cdb28e44cc25ac11a3fe89a3	f
283	16	python	leap	2	pending	\N	2014-06-22 00:13:07	2014-06-22 00:13:07	69c375b54df6df6e9d3cd6d2	f
284	16	javascript	space-age	1	pending	\N	2014-06-26 13:47:49	2014-06-26 13:47:49	cbda5f4ea8d78500806ad21e	f
285	16	clojure	nucleotide-count	2	pending	\N	2014-04-24 14:02:55	2014-04-24 14:02:55	e1272dff6ae86e8c4d0f6f1e	f
286	16	javascript	bob	5	pending	\N	2014-03-10 12:00:44	2014-03-10 12:00:44	1cc25601d03e91bec91159c5	f
287	16	python	word-count	1	pending	\N	2014-07-01 19:05:39	2014-07-01 19:05:39	2aef6bbfaea551437c1bd70a	f
288	18	haskell	gigasecond	1	pending	\N	2014-09-07 12:23:36	2014-09-07 12:23:36	fab402c907ba76140b1cfb3c	f
289	18	python	bob	2	pending	\N	2014-08-11 04:43:05	2014-08-11 04:43:05	7d0cd5fea573382276206523	f
290	18	ruby	roman-numerals	1	pending	\N	2014-07-24 23:57:08	2014-07-24 23:57:08	269592911d87d404eada424d	f
291	18	javascript	word-count	2	pending	\N	2014-07-07 18:28:32	2014-07-07 18:28:32	dd08e91f95055c54cbf61965	f
292	18	elixir	rna-transcription	1	pending	\N	2014-07-23 10:22:26	2014-07-23 10:22:26	0fd10c6e07db8c5c9e974c4f	f
293	18	haskell	nucleotide-count	3	pending	\N	2014-07-09 13:44:27	2014-07-09 13:44:27	68adfa3aeeeae647c46ebd70	f
294	18	ruby	anagram	12	pending	\N	2014-06-21 02:28:13	2014-06-21 02:28:13	1b55c42c946cb2837aeae0ef	f
295	18	haskell	sum-of-multiples	2	pending	\N	2014-06-24 22:41:40	2014-06-24 22:41:40	21baf79b98bbe96dc8cec139	f
296	18	python	gigasecond	1	pending	\N	2014-06-27 09:45:40	2014-06-27 09:45:40	417c96989e56537be7c74f21	f
297	18	ruby	food-chain	1	pending	\N	2014-07-19 13:26:26	2014-07-19 13:26:26	e3f6193a49f60a0acbbac24d	f
298	18	python	anagram	1	pending	\N	2014-08-19 21:04:56	2014-08-19 21:04:56	d6ea011acbb8163f909914c8	f
299	18	ruby	word-count	3	pending	\N	2014-06-23 03:29:19	2014-06-23 03:29:19	39dd07c6a26bb11aa25f2985	f
300	18	perl5	difference-of-squares	1	pending	\N	2014-09-24 22:57:30	2014-09-24 22:57:30	55e36fa6bda676b3c4421b98	f
301	18	ruby	hamming	2	pending	\N	2014-06-21 16:59:07	2014-06-21 16:59:07	15073793a0376cf8b43c7c7b	f
302	18	ruby	bob	7	pending	\N	2014-06-17 13:37:29	2014-06-17 13:37:29	3d380d480405104228576847	f
303	18	ruby	meetup	1	pending	\N	2014-10-11 17:08:59	2014-10-11 17:08:59	31e46c313007818df02eb06c	f
304	18	javascript	triangle	1	pending	\N	2014-08-02 08:23:48	2014-08-02 08:23:48	3d37ce0a82d8559c254b69fa	f
305	18	python	leap	1	pending	\N	2014-08-10 18:21:57	2014-08-10 18:21:57	fb64876fa64e1fd0e246c0fb	f
306	24	ruby	rna-transcription	3	pending	\N	2014-03-29 19:47:33	2014-03-29 19:47:33	effd60ff372ca922eb2c4366	f
307	24	python	meetup	1	pending	\N	2014-05-04 23:38:42	2014-05-04 23:38:42	6ad303543426f919735e0f29	f
308	42	ruby	leap	1	pending	\N	2014-11-04 02:08:35	2014-11-04 02:08:35	14bb3d3bc62b09d5adb60fe0	f
309	42	cpp	scrabble-score	1	pending	\N	2014-11-14 20:50:31	2014-11-14 20:50:31	13588b077f1226e15ed79ae6	f
310	42	ruby	grains	2	pending	\N	2014-11-11 02:41:21	2014-11-11 02:41:21	ed1cf335525ea4a5d934bf6c	f
311	42	go	gigasecond	1	pending	\N	2014-10-23 10:12:14	2014-10-23 10:12:14	30d7da89d06d15097f08f2c6	f
312	42	go	queen-attack	1	pending	\N	2014-10-26 18:21:18	2014-10-26 18:21:18	4c5c2b67168f2f4ca227cf1c	f
313	42	coffeescript	binary	1	pending	\N	2014-11-03 15:03:11	2014-11-03 15:03:11	4a49cf87b3d1f94e3f463c3f	f
314	42	haskell	strain	1	pending	\N	2014-10-31 07:33:01	2014-10-31 07:33:01	bc2aac124c018434ce6e54d7	f
315	27	ruby	hamming	2	pending	\N	2014-10-14 21:54:18	2014-10-14 21:54:18	57c1c38ef2e1dbf22dc6361f	f
316	45	python	word-count	1	pending	\N	2014-11-08 14:39:54	2014-11-08 14:39:54	d1dd2e5851e3575e1f802241	f
317	45	python	anagram	1	pending	\N	2014-10-28 18:39:59	2014-10-28 18:39:59	8bf3ffef0c3277143f1c7da2	f
318	45	ruby	nth-prime	3	pending	\N	2014-10-18 01:28:23	2014-10-18 01:28:23	7ca89475b949f508fe59570e	f
319	45	clojure	word-count	2	pending	\N	2014-11-01 08:15:55	2014-11-01 08:15:55	e2da4d479d2076a46de3f07e	f
320	45	python	phone-number	1	pending	\N	2014-10-27 13:29:26	2014-10-27 13:29:26	26487f37293ed2485f66b87a	f
321	45	clojure	etl	1	pending	\N	2014-11-02 15:44:42	2014-11-02 15:44:42	8a23d95dde0b5859f37e5597	f
322	45	javascript	nucleotide-count	1	pending	\N	2014-11-12 23:54:39	2014-11-12 23:54:39	560e09f64e003060dd83be2f	f
323	45	javascript	raindrops	1	pending	\N	2014-11-16 07:48:50	2014-11-16 07:48:50	9afaaa9eded3d7800686f6ec	f
324	45	python	bob	1	pending	\N	2014-11-10 21:40:31	2014-11-10 21:40:31	a4c00cd12a2cfd8951688356	f
325	45	go	leap	1	pending	\N	2014-10-27 03:45:42	2014-10-27 03:45:42	d6abd9ed4dfb737ad21c044a	f
326	45	clojure	nucleotide-count	1	pending	\N	2014-11-11 12:14:37	2014-11-11 12:14:37	6848a8074283def71fafc873	f
327	45	python	rna-transcription	1	pending	\N	2014-11-21 08:31:41	2014-11-21 08:31:41	caa6ac61d574e53b6d0d515a	f
328	45	python	nucleotide-count	2	pending	\N	2014-10-25 02:33:38	2014-10-25 02:33:38	96d1eddb9e03b7a140cf8ea9	f
329	45	ruby	hamming	1	pending	\N	2014-11-01 23:39:22	2014-11-01 23:39:22	198404a6194d205a61a94aeb	f
330	45	fsharp	beer-song	1	pending	\N	2014-10-28 02:26:15	2014-10-28 02:26:15	75b9bf3e92091c85ddaea36e	f
331	45	ruby	bob	1	pending	\N	2014-10-25 05:52:41	2014-10-25 05:52:41	4ce81aed6f50be9ff09dcb99	f
332	45	elixir	nucleotide-count	1	pending	\N	2014-10-19 11:14:32	2014-10-19 11:14:32	a89e6187c3f7b3cf3b851712	f
333	45	javascript	gigasecond	2	pending	\N	2014-10-30 02:23:50	2014-10-30 02:23:50	7072f6beb10a6ade0071879e	f
334	45	haskell	rna-transcription	4	pending	\N	2014-10-28 15:50:43	2014-10-28 15:50:43	4095f077ee1fe8ed69d8d94f	f
335	45	haskell	binary	3	pending	\N	2014-10-20 17:34:28	2014-10-20 17:34:28	37414375caea8970cdcfeefa	f
336	45	javascript	grade-school	3	pending	\N	2014-10-27 22:26:53	2014-10-27 22:26:53	f8ecca4537f7df4d9514b698	f
337	45	swift	leap	2	pending	\N	2014-10-28 18:22:05	2014-10-28 18:22:05	bb28483250f9ea67b4b7be9b	f
338	45	csharp	anagram	1	pending	\N	2014-10-19 07:26:45	2014-10-19 07:26:45	0cdf04cf630693187bc923a3	f
339	45	ruby	leap	1	pending	\N	2014-10-17 22:01:15	2014-10-17 22:01:15	b21411fc5cca8328ffdb1b0c	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 339, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	vdv961	--- []\n	2014-06-07 09:15:34.13625	2014-06-07 09:15:34.13625	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tutsii159/128.jpg	-99066	epw694	--- []\n	2014-07-31 07:20:39.160579	2014-07-31 07:20:39.160579	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg	-91178	yim296	--- []\n	2014-09-19 11:46:39.163186	2014-09-19 11:46:39.163186	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg	-38341	yfq712	--- []\n	2014-07-06 10:15:48.165757	2014-07-06 10:15:48.165757	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg	-49063	evh371	--- []\n	2014-11-04 13:57:24.171002	2014-11-04 13:57:24.171002	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg	-45893	ehd390	--- []\n	2014-08-22 22:02:15.181078	2014-08-22 22:02:15.181078	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg	-94208	gnt669	--- []\n	2014-06-20 04:37:18.183024	2014-06-20 04:37:18.183024	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg	-36804	mpo474	--- []\n	2014-03-06 09:14:34.188287	2014-03-06 09:14:34.188287	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg	-27174	ekc184	--- []\n	2014-11-01 00:06:05.191263	2014-11-01 00:06:05.191263	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg	-56486	pzo789	--- []\n	2014-06-12 20:10:59.193969	2014-06-12 20:10:59.193969	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg	-54878	dsp239	--- []\n	2014-07-30 00:46:32.196783	2014-07-30 00:46:32.196783	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sedovsek/128.jpg	-92008	zyj314	--- []\n	2014-11-25 22:31:32.19941	2014-11-25 22:31:32.19941	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg	-1067	zgs435	--- []\n	2014-10-05 15:31:06.202243	2014-10-05 15:31:06.202243	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg	-61254	qrl505	--- []\n	2014-07-02 22:12:24.208759	2014-07-02 22:12:24.208759	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg	-87794	pwo119	--- []\n	2014-03-17 16:29:29.211833	2014-03-17 16:29:29.211833	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg	-77153	nta172	--- []\n	2014-09-13 06:11:59.214714	2014-09-13 06:11:59.214714	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg	-99085	byi477	--- []\n	2014-09-11 16:34:49.217381	2014-09-11 16:34:49.217381	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/teclaro/128.jpg	-14642	wvm609	--- []\n	2014-09-22 11:01:09.220577	2014-09-22 11:01:09.220577	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg	-43291	ttd127	--- []\n	2014-05-19 07:11:19.228806	2014-05-19 07:11:19.228806	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg	-87340	zij114	--- []\n	2014-08-23 08:45:02.233944	2014-08-23 08:45:02.233944	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg	-34142	exl558	--- []\n	2014-08-11 08:26:29.239431	2014-08-11 08:26:29.239431	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg	-26246	thc156	--- []\n	2014-11-26 23:45:58.242105	2014-11-26 23:45:58.242105	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg	-89647	ypk517	--- []\n	2014-03-04 02:18:48.244716	2014-03-04 02:18:48.244716	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg	-83781	qgb421	--- []\n	2014-04-25 18:02:23.247347	2014-04-25 18:02:23.247347	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg	-77594	mgz700	--- []\n	2014-09-02 03:19:52.252512	2014-09-02 03:19:52.252512	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg	-15959	kjh643	--- []\n	2014-08-16 11:12:24.257156	2014-08-16 11:12:24.257156	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg	-52667	qcp940	--- []\n	2014-10-20 03:24:26.259912	2014-10-20 03:24:26.259912	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg	-5616	nld308	--- []\n	2014-10-16 10:07:05.262631	2014-10-16 10:07:05.262631	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg	-95989	inj683	--- []\n	2014-10-17 21:08:42.267902	2014-10-17 21:08:42.267902	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg	-47964	umr711	--- []\n	2014-10-14 04:42:17.273205	2014-10-14 04:42:17.273205	\N
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg	-42866	iaz466	--- []\n	2014-03-09 12:35:54.249912	2014-03-09 12:35:54.249912	2014-07-11 13:38:26
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg	-53125	epm601	---\n- python\n	2014-03-26 14:37:56.15853	2014-03-26 14:37:56.15853	2014-07-04 13:39:05
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg	-71232	eks107	---\n- ruby\n- haskell\n	2014-06-29 10:49:07.153769	2014-06-29 10:49:07.153769	2014-05-24 07:39:58
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/arnel_lenteria/128.jpg	-86921	xlc172	--- []\n	2014-04-01 15:43:09.231341	2014-04-01 15:43:09.231341	2014-06-20 05:47:40
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg	-65139	hye603	--- []\n	2014-07-26 03:44:12.265299	2014-07-26 03:44:12.265299	2014-07-21 04:14:55
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg	-63107	wbm190	--- []\n	2014-05-30 01:50:08.177399	2014-05-30 01:50:08.177399	2014-06-23 06:26:09
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg	-66911	jqn686	---\n- javascript\n- erlang\n- elixir\n	2014-09-19 14:23:14.156145	2014-09-19 14:23:14.156145	2014-07-16 09:39:06
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg	-94775	alj478	--- []\n	2014-08-18 12:11:48.185698	2014-08-18 12:11:48.185698	2014-06-24 04:58:41
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg	-62485	ghy772	--- []\n	2014-06-30 15:17:06.278864	2014-06-30 15:17:06.278864	\N
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg	-68993	bad411	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-08-13 15:08:06.151255	2014-08-13 15:08:06.151255	2014-05-21 11:37:09
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg	-22140	gql693	--- []\n	2014-05-09 04:22:51.173448	2014-05-09 04:22:51.173448	2014-05-07 19:27:49
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg	-38086	gcd929	--- []\n	2014-03-24 01:04:03.226118	2014-03-24 01:04:03.226118	2014-07-23 19:30:54
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg	-87757	zjj726	--- []\n	2014-09-26 09:33:49.205491	2014-09-26 09:33:49.205491	2014-06-07 22:11:45
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg	-59325	aro468	--- []\n	2014-06-20 03:51:59.236465	2014-06-20 03:51:59.236465	2014-06-16 00:27:46
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg	-89723	qxe231	--- []\n	2014-10-24 05:26:15.223321	2014-10-24 05:26:15.223321	2014-06-10 10:02:00
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg	-40000	smh494	--- []\n	2014-03-16 13:23:00.254396	2014-03-16 13:23:00.254396	2014-06-28 05:56:03
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg	-81351	yni213	--- []\n	2014-11-22 11:19:30.275451	2014-11-22 11:19:30.275451	2014-07-06 17:17:32
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg	-46134	lsb336	--- []\n	2014-08-25 23:32:43.270585	2014-08-25 23:32:43.270585	2014-07-06 03:16:18
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg	-45456	gxy494	--- []\n	2014-05-28 22:25:58.167372	2014-05-28 22:25:58.167372	2014-06-28 06:28:03
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- PostgreSQL database dump complete
--

