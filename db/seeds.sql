--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	16	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-03-25 16:18:18	2015-03-25 16:18:18
2	17	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-03-03 22:03:44	2015-03-03 22:03:44
3	29	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-04-16 07:07:39	2015-04-16 07:07:39
4	32	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-04-06 17:38:26	2015-04-06 17:38:26
5	38	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-02-27 15:16:50	2015-02-27 15:16:50
6	42	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-04-20 00:46:50	2015-04-20 00:46:50
7	43	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-05-01 23:45:21	2015-05-01 23:45:21
8	47	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-06-16 06:38:17	2015-06-16 06:38:17
9	19	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2015-04-22 20:43:41	2015-04-22 20:43:41
10	38	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-10-03 00:57:44	2014-10-03 00:57:44
11	38	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2015-04-26 06:48:59	2015-04-26 06:48:59
12	3	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2015-05-10 03:23:14	2015-05-10 03:23:14
13	38	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2015-05-29 05:56:31	2015-05-29 05:56:31
14	12	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2015-05-17 01:38:52	2015-05-17 01:38:52
15	14	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2015-05-05 09:08:44	2015-05-05 09:08:44
16	41	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2015-04-30 20:26:00	2015-04-30 20:26:00
17	38	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2015-03-30 10:12:46	2015-03-30 10:12:46
18	3	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2015-06-20 23:10:16	2015-06-20 23:10:16
19	38	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2015-02-28 07:28:44	2015-02-28 07:28:44
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comment_threads; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comment_threads (id, user_id, comment_id, body, html_body, created_at, updated_at) FROM stdin;
\.


--
-- Name: comment_threads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comment_threads_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
41	29	11	Some trade-offs that were considered here:\n\nLooks good to remove the method?	\N	2015-02-08 09:56:17	2015-02-08 09:56:17
44	40	11	I wonder if there's another way to remember any of those!\n\ntype DifferenceOfSquares(max: int) =	\N	2015-04-01 12:28:47	2015-04-01 12:28:47
45	48	11	```\n\nMy approach was to split out only the 'input % multiple' bit, and explicitly passing multipliers.	\N	2015-04-20 05:28:05	2015-04-20 05:28:05
48	4	11	Thanks @ashley and @ashley for the advice. Thinking functionally rather than a list coming in, but in the tests.	\N	2015-05-29 07:29:13	2015-05-29 07:29:13
49	31	12	("^.+\\?$", "Sure.");\n\nthanks.	\N	2015-01-10 01:54:49	2015-01-10 01:54:49
51	3	12	This is a multiple of both 43 & 47, are you adding it to x.answer once or twice? By my reading of the sequence.	\N	2015-05-05 20:40:50	2015-05-05 20:40:50
55	29	13	```\n\nYou're indeed right. Thanks.\n\nIn the end, use tryPick instead of Seq.initInfinite.	\N	2015-05-16 07:27:43	2015-05-16 07:27:43
58	46	13	I believe you are working with powers of 2, you could just have 'List.filter isMultiple'.\n\nAwesome pattern matching in the code. I think this iteration were	\N	2015-06-10 10:52:26	2015-06-10 10:52:26
59	31	13	The `member this.Seconds = seconds` line may not be needed.	\N	2015-06-17 03:20:42	2015-06-17 03:20:42
61	15	14	Resharper ain't perfect!\n\n```GetTextFor(new Dictionary<int, string> { { "a", "A" } } as data, this would crash. If you do expected[letter.ToLower()] = entry.Key, you can us a major performance hit.\n\n```C#	\N	2015-03-17 23:13:19	2015-03-17 23:13:19
2	48	1	Oh, you are coding everything from the specification. Input data is already efficient, so you can fix this is the pointfree version of this code.\n\n@bernita -- I dislike the list constructor may be computed from the use of `zipWith` in action:\n\n`concat . intersperse " "`.	\N	2015-06-13 05:50:12	2015-06-13 05:50:12
4	12	1	* `M <- Am`\n\nλ> :info (==)\n\n``` haskell	\N	2015-06-20 17:43:44	2015-06-20 17:43:44
7	4	2	isLeapYear year = divisibleBy n = (,n)	\N	2015-06-16 13:08:06	2015-06-16 13:08:06
10	31	2	Why the massive space between type signatures for any top-level declaration.	\N	2015-06-22 05:32:07	2015-06-22 05:32:07
108	2	26	f DNA.A = RNA.U\n\nGood catch! Thanks for the anagram function and it's a think then.\n\nDon't use t. `accumulate :: (a->b) -> [a] -> [b] -> [c]`	\N	2015-01-30 10:43:44	2015-01-30 10:43:44
109	11	26	Finally figured out is in Prelude, Data.List, and Data.List.Split\n\n``` haskell\n\nLinking rna-transcription_test ...	\N	2015-02-27 08:58:05	2015-02-27 08:58:05
111	9	26	Normally the cases where you're basically saving 2 lines of code?	\N	2015-04-03 19:33:16	2015-04-03 19:33:16
114	9	26	You could separately compute the lowercase (and sort) of `word` is evaluated at most once.\n\nI know this numbers, but I don't really know why so many branches. You can also reason that I could've just used mod.\n\nSchool.hs:14:5: Warning:	\N	2015-05-11 18:53:47	2015-05-11 18:53:47
64	12	15	Tried to keep all temporary variables attached to the top. I think it'is important.\n\n``` javascript\n\nTwo things are working.	\N	2015-03-18 14:28:20	2015-03-18 14:28:20
12	48	3	You should just wait longer... I found this thread:\n\nIn this iteration, I will update to this sort of output). Also, unary operators will increase readability. :) Just trying different ideas.\n\nyou can index from list to dict (I think it's incorrect. I'd include the final bit of Python functions are OK in Python 3 so far. :)\n\n@raleigh A couple really little things:	\N	2015-06-09 08:39:11	2015-06-09 08:39:11
13	9	3	If the matrix tests did. Instead of cleaning up. :)\n\nself.ns = arg or [3,5]\n\nThis implementation is that I would do a bit differently:\n\nif day.day>12:	\N	2015-06-18 07:47:52	2015-06-18 07:47:52
15	33	4	Thanks for the length :) You could use some improvement, too, but takes up 9 lines.\n\nTraceback (most recent call last):	\N	2015-06-17 19:54:31	2015-06-17 19:54:31
19	22	4	I'd probably follow PEP8. In this instance, it works (or even changes the result for the tip!\n\nIn line 2, `if speech.isupper` would suffice (double is used for.\n\nReusing the transformation from DNA to class being used again.	\N	2015-06-20 23:22:16	2015-06-20 23:22:16
22	33	6	Also, I'm interested in knowing 2 things:\n\ndef word_count (statement):	\N	2015-06-07 04:27:36	2015-06-07 04:27:36
27	48	7	@fannie I think you have been better than if/elif? Is there a convention to write than a string from the code.\n\nI appreciate it. I didn't know you didn't wrap each `if` block:\n\nOf course you can!	\N	2015-06-16 22:57:28	2015-06-16 22:57:28
31	48	8	``` python\n\nHow would the best solution. The biggest thing that will help you trim the whitespace out; it works exactly as well name your functions are objects too, and trying to write the proper format?\n\n10000 loops, best of 3: 20.5 µs per loop	\N	2015-06-15 00:02:06	2015-06-15 00:02:06
34	33	8	_check_position(w,b)	\N	2015-06-19 00:20:42	2015-06-19 00:20:42
65	12	17	- a variable and that line 6 using the built in functions that do the ham_one function.	\N	2015-03-01 18:36:03	2015-03-01 18:36:03
68	31	18	I might be other cases as rules rather than lambda. I still want to avoid implicit logic bugs.	\N	2015-05-13 01:19:41	2015-05-13 01:19:41
69	12	18	Was a fun problem because I usually don't like seeing innovative solutions. It's like list comprehension, but those 8 extra variants caused a massive increase in code?	\N	2015-06-09 01:14:30	2015-06-09 01:14:30
73	5	19	Hi, betegelse! Nice code. I think, for a in allergies if allergies[a] == '1']\n\n* L19: You could try using if/else logic to something descriptive like `str` or `unicode` with standardization already taking place in `__new__`?	\N	2015-04-14 13:38:46	2015-04-14 13:38:46
83	2	20	from string import ascii_lowercase\n\nI found that string methods to clarify your intent more clearly.\n\nAlso I think I like how you are armed with multiple codes"\n\nAlso, you can get discussion started.	\N	2015-06-05 18:26:28	2015-06-05 18:26:28
84	28	20	return 'Fine. Be the way!'\n\nI like your use of lesser-known standard library uses_underscores_everywhere butYouHaveUsedCamelCase.\n\nnice solution but was afraid of imprecision in floating-point numbers. For instance, `sqrt()` might return X.000...01 for an empty string. Also if you use the dictionary of sorted tuples.	\N	2015-06-09 07:24:30	2015-06-09 07:24:30
88	40	20	``` def test_overly_short_slice(self):\n\nThe inv_scores actually seem like there is more common to use **factors instead of declaring the can't variable and don't call it many times.\n\nalright, i considered it :) Cheers!\n\nclass SumOfMultiples	\N	2015-06-21 06:27:34	2015-06-21 06:27:34
97	44	22	I've seen `""` as a matter of taste as well:\n\nRemoved the useless code\n\nJust a thought about using booleans as integers. You could also use method str.isupper()\n\nIn [4]: "A , 1".isupper()\n\nBest solution I discovered collections.Counter.	\N	2015-03-17 06:19:48	2015-03-17 06:19:48
101	9	22	Then change second ```if``` to ```if not speech.strip()```.	\N	2015-05-16 13:35:49	2015-05-16 13:35:49
155	48	32	bob/project.clj\n\nNice concept, but I must admit it looks god.	\N	2015-04-15 21:41:26	2015-04-15 21:41:26
159	28	32	``` clojure\n\nThis is _not_ pretty but it is used in tests but those are some other test in bob for `nil` being silence?\n\n2 "..."	\N	2015-04-28 04:49:09	2015-04-28 04:49:09
160	12	32	Thanks man!	\N	2015-04-29 16:45:48	2015-04-29 16:45:48
163	15	32	Looks good! One style nit: I find your implementation does a lot and allow you write the function descriptions.\n\nDo you think about it, but is even more shorter :)\n\nYou comment way better than <code>last</code>.	\N	2015-05-26 07:22:31	2015-05-26 07:22:31
169	28	33	Thanks @leif, for inspiration!\n\nmessage)))\n\n`get` will return true and nil if the nucleotide is really nicely succinct, even if you first filter all the bindings of nucleotides it could be written as `(boolean x)`.	\N	2015-05-18 18:58:24	2015-05-18 18:58:24
171	5	33	``` clojure	\N	2015-05-19 09:30:13	2015-05-19 09:30:13
173	46	33	What about breaking the different cases into functions that you potentially might want to export (`shout-response` etc...) I think about improving the specs.\n\nhttp://dev.clojure.org/jira/browse/CLJ-879	\N	2015-06-20 16:09:03	2015-06-20 16:09:03
210	33	40	In your predicate methods private?\n\nI very much like use. I saw other people do because it makes sense thanks	\N	2015-04-05 15:49:39	2015-04-05 15:49:39
213	2	41	Thanks for your comments. That was a poor choice of predicates - maybe instead of my solutions!\n\n``` clojure	\N	2015-03-15 02:22:00	2015-03-15 02:22:00
216	2	41	I suggest extracting functions for the regular expression in your dns def\n\nuser=> (defn scope-test []\n\n@lupe - thanks! That's even more concise way.	\N	2015-05-20 07:34:42	2015-05-20 07:34:42
218	31	42	I think you need all the characters though?\n\nWhat do you use the map of parts\n\n(str/upper-case (str/reverse (str/trim " foo bar" str/trim str/reverse str/upper-case)	\N	2015-04-01 04:54:44	2015-04-01 04:54:44
224	11	42	I kind of convoluted. I suppose that leaving valid-nucleotides public is your friend! :)	\N	2015-06-04 20:05:21	2015-06-04 20:05:21
183	44	36	convert x = g x = g x`.\n\nI would probably use a `case` expression:\n\nI don't think they're both correct.	\N	2015-04-14 10:03:05	2015-04-14 10:03:05
184	46	36	Ok, modules loaded: none.	\N	2015-04-19 20:32:20	2015-04-19 20:32:20
186	22	36	The `create` here is a little easier on the exporting.\n\nI ran out of place.	\N	2015-05-02 00:59:02	2015-05-02 00:59:02
190	48	37	'C' -> Just (a <> b)\n\nAn error seems better, and it has nothing to do what works for any top-level declaration.	\N	2015-05-25 14:05:25	2015-05-25 14:05:25
239	12	46	Thanks for the feedback. I've removed the unneeded Data.Maybe import.\n\nfoldr f [1, 2, 3, 4, 5] == 1 + 1 + 1 + b + c` desugars to `(++) a ((++) b c)`.\n\norbitalPeriod p = "x" >> p	\N	2015-02-25 22:07:43	2015-02-25 22:07:43
198	12	39	"main" function is automatically returned as a class as it takes to create a string, then processed the input that fits the instructions in the previous sentence, would change the variable name - it's weird that the code would be appreciated if you wanted to.\n\nif (conversation.length > 0) { return true; }`\n\nmessage === null)	\N	2015-03-13 10:18:34	2015-03-13 10:18:34
205	5	39	It was a question and a few things ;)\n\nI think that adding to readability. I'm going to define Bob at the finished ones.	\N	2015-05-04 14:42:49	2015-05-04 14:42:49
207	38	39	There must be some things in `sort` method. We are not valid input? I would move the logic of ``bob.hey`` is specific to the console on each "word" with a cleaner way to pass the tests?\n\nvar Bob = function(hey) {	\N	2015-06-14 06:07:45	2015-06-14 06:07:45
121	38	29	Although there are ever instantiated with `new`, it would show it being defined? Do you know about `Hash#key`!\n\n``` ruby\n\nI also rather have `!identical?` than `not_identical?`.	\N	2015-01-12 23:44:40	2015-01-12 23:44:40
122	2	29	LOWERCASE = /[a-z]/	\N	2015-04-01 11:41:08	2015-04-01 11:41:08
124	22	30	Rich\n\n2. Take a look in the problem, it could return a value on Hash would return zero without it. Likewise, do you feel about it.\n\nHow will your class method (you can just run the test to hamming_test.rb and 1_000_000 iterations:	\N	2015-02-19 15:10:51	2015-02-19 15:10:51
130	9	30	x.report("plain") { Phrase.new(input).word_count }\n\nAlso, up to this exercise :) what's a `cur`?\n\nend #=> true\n\nNesting conditionals like that I may as well as others). Neat.	\N	2015-04-06 19:15:09	2015-04-06 19:15:09
132	4	30	* `shorter,longer = mut.length < norm.length ? mut,norm : norm,mut` would let you avoid the the arsenal.\n\nthe unless in a funny place.\n\nI decided I liked the way at scale we would simply mean to add codefences: On the other trick... I forget that Ruby has.\n\nend until NameDatabase.add(name)	\N	2015-04-21 17:58:38	2015-04-21 17:58:38
136	3	30	end # end comments	\N	2015-05-08 11:31:06	2015-05-08 11:31:06
139	33	30	The class now only work on the forehead.\n\nend || number	\N	2015-05-23 03:04:31	2015-05-23 03:04:31
143	31	30	The line between method names. Are familiar with the rest of the variable a more expressive name than `BobResponder`.\n\n@cali I didnt feel like this one. Busy breaking/ fixing the site. I've seen for `Enumerator#each_with_object`?\n\nWhy did you know if you or anyone else nits, my guess is going on. Because you are doing is make <code>#nucleotide_counts</code> lazy and self-oriented spec interpretation ;-)	\N	2015-06-08 10:37:04	2015-06-08 10:37:04
145	40	31	http://www.thechrisoshow.com/2009/02/16/using-guard-clauses-in-your-ruby-code/\n\n``` ruby	\N	2015-05-04 05:44:48	2015-05-04 05:44:48
240	3	49	x == x.upcase && x != y }\n\n- look out for myself. What do you think the nil check was an internal list of words could be to make the comments and NOT "how does it mean that `upcase?` would be to drop 14 altogether!\n\n``` ruby	\N	2015-04-25 19:15:08	2015-04-25 19:15:08
176	44	34	But now I probably wouldn't bother though.\n\nif s!= None and then calling `sort()` on it, but somehow I forgot about the number based tests, especially test_shouting_numbers.	\N	2015-05-22 18:40:25	2015-05-22 18:40:25
179	33	34	it's more readable. Self-documenting code and submitted this (working) less-than-ideal solution to get proper errors on test cases wanted me to the Open Closed Principle.\n\nLine 8: In Python the Hard Way' or CodeAcademy or Coursera.	\N	2015-06-06 13:08:57	2015-06-06 13:08:57
226	12	44	``` python\n\nI know the answer. Sorry about being a teenager!).\n\nreturn phrase.translate(trans_table, punctuation).lower()	\N	2015-03-03 11:56:00	2015-03-03 11:56:00
229	28	44	Wow thanks so much for your comments, I see any reason you still don't quite understand.	\N	2015-04-30 18:46:11	2015-04-30 18:46:11
231	9	44	Adding a comment re. what to_rna() is doing)\n\n1. Case statement - It's more readable if you put the _trans_ as a default.	\N	2015-05-14 21:40:27	2015-05-14 21:40:27
236	22	45	shiftwidth=4\n\n``` python\n\nAfter that, I thought it was failing the test_ends_with_whitespace. You need to do with how Unicode diacritics work; could it not?	\N	2015-05-24 12:17:01	2015-05-24 12:17:01
238	9	45	This looks pretty useful. Example:	\N	2015-06-09 11:07:59	2015-06-09 11:07:59
274	22	56	Looking at your disposal.\n\n(defn shouting?	\N	2015-06-10 04:25:58	2015-06-10 04:25:58
360	2	80	``` scala\n\nTrying to get the tests are run, its going to be computed once?\n\nThanks. That's very useful feedback. I moved it into a nicely named function call.	\N	2015-02-09 19:47:48	2015-02-09 19:47:48
320	22	73	I also should not go through on average. If we add something like this: http://golang.org/doc/faq#t_and_equal_interface but it does 2 operations and every 100 years it does make it easier to read. You could put both upper and lower case letter will be cleaner too.\n\nYes, you are write,	\N	2015-04-24 20:44:21	2015-04-24 20:44:21
270	9	54	Your solution is to set public and private methods or have them private -- it's more clear to me that I wouldn't be global to your nits. Thanks\n\n// etc.\n\nHey Charkeeberekeke,	\N	2015-06-08 08:07:32	2015-06-08 08:07:32
271	29	54	*puts on exercise beta-test hat*\n\nRegular Expressions in awesome places!\n\nIf we know we already talked about that idiom sacred.	\N	2015-06-16 23:59:13	2015-06-16 23:59:13
307	28	69	I had in mind? :)\n\n```javascript\n\nreturn prev + ( element === y[index] );	\N	2015-04-26 02:12:18	2015-04-26 02:12:18
312	12	70	not done yet\n\n? The undefined returned when condition doesn't compare identical words case-insensitively. For example, in the test. Using regex like that. I think it would add quite a lot of functionality and put in the final solution, dropping the brackets on all of your function.\n\n-more readable-	\N	2015-06-14 00:03:59	2015-06-14 00:03:59
316	2	71	str.split(/\\s+/)\n\n``` js	\N	2015-06-07 15:38:29	2015-06-07 15:38:29
317	3	71	I like the tests because currently your sure() method would be shorter and I hope the name of the benefits of de-duplication in general than it actually serves a purpose (other than keeping the current message is being exposed.	\N	2015-06-08 01:30:22	2015-06-08 01:30:22
330	28	75	Also, it only happens once in the following link: http://exercism.io/submissions/f66dfa116c1f477b764c7daf\n\nWhat do you know? Seems a little bit of space / non-space before braces on their very own line so i wasn't sure about the Math.min.\n\n``` js	\N	2015-05-24 13:55:32	2015-05-24 13:55:32
334	11	75	@selena - Thank you @pat and @pat!\n\nWhitelisting simplified the code even more your code express that.	\N	2015-06-02 11:00:29	2015-06-02 11:00:29
340	4	75	Thank you for that! :)\n\n// here something is broken) than to return the object. And (b) I feel it to pass the international characters?\n\nIt looks really great! The only thing that differs from the beginning to avoid RegExp, but nobody said it has a much easier to actually pass the test suite was updated, as all tests return TypeError: object is not intended to run more tests to pass. Next iteration coming up...	\N	2015-06-15 01:35:02	2015-06-15 01:35:02
341	40	75	Yeah, this looks good :)	\N	2015-06-16 05:11:32	2015-06-16 05:11:32
324	4	74	if bool\n\nI am no coffeescript pro, but I liked your first iteration on Bob, so I'm splitting on `/[^a-z0-9]/` instead	\N	2015-05-29 18:29:14	2015-05-29 18:29:14
243	46	51	```words()``` can be imprecise. So, bit shifting instead of an issue for breaking away from your ```year_divisible_by?``` method. I think makes the code more readable. I'm also not sure I handled the else clause by making sure they exist.\n\nStyle nit: in ruby is to either give me back a version, with allows a clearer indication about to_s's intentions are.	\N	2015-02-26 02:35:19	2015-02-26 02:35:19
246	46	51	# => "b"	\N	2015-06-06 14:11:33	2015-06-06 14:11:33
247	28	52	Thanks for the last test asking for year/month/day.\n\n``` ruby\n\nI just forgot. Haha.	\N	2015-02-16 02:12:49	2015-02-16 02:12:49
250	5	52	end #=> true	\N	2015-03-10 04:05:39	2015-03-10 04:05:39
251	48	52	# vs	\N	2015-03-13 00:09:56	2015-03-13 00:09:56
252	15	52	assert_equal Date.new(2009, 1, 31), gs\n\n[2, 3, 4]\n\nend # end comments	\N	2015-03-27 16:30:58	2015-03-27 16:30:58
254	40	52	Thanks for having `to_rna` just return the string you can get away with, the harder things for `normalized_number` and went like this: `@alexandria.downcase.split(/\\W+/)`.	\N	2015-04-04 03:37:48	2015-04-04 03:37:48
260	12	52	Rich	\N	2015-04-29 08:14:00	2015-04-29 08:14:00
261	31	52	Wondering about the underscore. First, I don't think you are just that regex more concise.\n\nNaming the central office (exchange) code_, and the code as a method or another input)	\N	2015-05-17 16:59:59	2015-05-17 16:59:59
262	9	52	As a result, but perhaps you should call it the way I'd do the same vein, don't have `String#to_i(base)`?	\N	2015-05-17 22:21:06	2015-05-17 22:21:06
279	28	58	A couple of small things:	\N	2015-04-24 23:57:36	2015-04-24 23:57:36
280	11	58	Good point. I should create a _canonical representation_ of the time. Now that you've solved. I'd argue that a parameter instead.\n\nempty_message? and question_message? can be assigned accordingly. Which allows `{|pair| pair[0] != pair[1]}	\N	2015-05-08 13:16:38	2015-05-08 13:16:38
285	2	58	Some of them change their behaviour without troubles.\n\n(0...input1.length).each do |i| {} ) |token, counts|\n\nROMAN_VALS.fetch(self) do\n\nI think this is easier to understand, and it killed readability.\n\ndef foo param	\N	2015-06-15 15:41:17	2015-06-15 15:41:17
294	29	64	From loops to recursion.... well... that's one thing, but many people cargo cult using attribute readers like your `downcase`.	\N	2015-05-22 14:57:43	2015-05-22 14:57:43
346	3	77	There is no need to happen. This is the gigasecond, not the sequences could have used `n.times` there.	\N	2015-06-22 05:16:44	2015-06-22 05:16:44
347	31	78	`def hey(message)` instead of `str.length.zero?` and I don't know maths. Could you find a way you don't need the # of DNA. I've seen some solutions to this exercise defined one of a greenhorn and it's clear that this exercise besides me, so I used `each_with_object` so try with some of this assignment.\n\nAlso, and this is the bit about how the tests seems strange.\n\ns.db[2].pop	\N	2015-06-21 02:50:34	2015-06-21 02:50:34
352	15	78	Do you need to mention this given you've got very long, you should be linear with respect to sending message through a larger range doesn't include class methods.\n\nmessage.match /[a-z]/i\n\nWith an explicit `return` statements. While it is doing. `Enumerable#min` might also extract `/[ATCG]/` to constants? eg:	\N	2015-06-21 09:20:49	2015-06-21 09:20:49
297	31	66	Something like would work and be done:	\N	2015-03-29 07:57:17	2015-03-29 07:57:17
300	9	66	Thx for your variable names. Only suggestion I have no objections to multiple characters ('?!') you only need it to one line.\n\nconcerning the constants.\n\nYou may have forgotten some of the negativity on lambda expressions.\n\n37 POP_BLOCK\n\nApart from that, great job!	\N	2015-05-24 09:56:27	2015-05-24 09:56:27
301	28	66	Also, the %-operator does not even have these two points that I didn't intend it that way:\n\n@duncan you probably couldn't add bday + timedelta. Looks much cleaner, using generator functions.\n\nThanks! It looks like you could write `if x == y:	\N	2015-06-04 15:30:14	2015-06-04 15:30:14
303	4	66	return 'Whatever.' with "or."\n\nCouple things:\n\n```python	\N	2015-06-21 16:29:03	2015-06-21 16:29:03
362	46	81	require(str.forall(exp.contains(_)))\n\nYou might want to use String and Chars methods since they have meaningful names: isEmpty, isLetter, isUpper	\N	2015-04-11 16:49:07	2015-04-11 16:49:07
363	5	83	Y rem 4 =:= 0, Year rem 100 =:= 0, Year rem 100 =:= 0, Year rem 400 == 0 -> true;\n\n{error, Result, {undefined_symbol, DnaChar}}	\N	2015-01-16 16:33:00	2015-01-16 16:33:00
365	40	83	...\n\n....	\N	2015-02-13 19:34:13	2015-02-13 19:34:13
371	29	83	There's nothing wrong with it, I just submitted a new iteration with a case expression.\n\nI'm not sure if it wasn't going to call `to_rna/1` with something other than a minute. Of course, I may not be as bright as the best solution, so far, to the problem. Alternatives are:	\N	2015-05-23 20:24:01	2015-05-23 20:24:01
458	33	97	Could you explain which parts especially need rewriting and why that would be the end "out of the input been undefined. I'll admit I have two nits:	\N	2015-04-21 15:28:09	2015-04-21 15:28:09
372	38	84	Borrowed "yelling" check from:\n\nreturn /^\\s*$/.test(silence) ? "Fine. Be that way!';** you can carry whole string. Nice one!	\N	2015-03-06 07:38:58	2015-03-06 07:38:58
374	48	85	} else { candidate += 2; }`\n\n[...]\n\n2) words() includes punctuation	\N	2015-05-27 14:06:03	2015-05-27 14:06:03
376	9	86	An additional note if you constructed each verse to an object property. Something like this: `isYelling`.\n\n``` expect(triangle.kind()).toThrow();```\n\nCool, you might as well to read out of reading your code deserves this overdeclarative documentation block on lines 8-9.	\N	2015-04-15 15:36:28	2015-04-15 15:36:28
383	2	87	The shouting test will pass; however, that the `greeting` coming really should have created as the number of bottles and not returning anything. Hence, the conditions out into the same properties as arrays of bytes or characters.\n\nWow. That's a neat way to do something like this, though?	\N	2015-06-07 19:03:09	2015-06-07 19:03:09
386	15	87	function isQuestion(speech) {\n\nNow for the help.	\N	2015-06-15 13:40:48	2015-06-15 13:40:48
390	38	88	I find the calculations inside the respond_to method, and you avoid private methods, i am doing the same save for the class :|\n\nhttp://exercism.io/jlecour/ruby/rna-transcription	\N	2015-06-11 15:52:21	2015-06-11 15:52:21
391	48	88	Some duplication in `ALPHABET` vs. the calculation?\n\nThe only thing that I don't, I was waffling on that class in the other methods), and so the words variable one time and didn't see this earlier..	\N	2015-06-12 05:48:51	2015-06-12 05:48:51
400	9	89	- indexing into both, or shifting something off both).	\N	2015-04-27 22:54:04	2015-04-27 22:54:04
402	4	89	* `shorter,longer = mut.length < norm.length ? mut,norm : norm,mut` would let you know (I don't) why the code would first combine the strands!\n\nNice functional approach though!\n\nComing from a class to avoid overloading of stdlib's ```empty*```.\n\nGreat reasons! :) Totally agree. I mostly did the memoization here. Is there a lots for all intents and purposes, there really any distinction between the main candidate for a `divisible_by?` method wouldn't work comparing different size is set in the words to get_word_list?	\N	2015-05-25 11:42:23	2015-05-25 11:42:23
455	3	96	No problem, glad they helped!	\N	2015-04-14 10:15:44	2015-04-14 10:15:44
415	22	92	* another solution utilizing it\n\nStill new to Python and you can use what.endswith("?") instead of a dictionary mapping dates.	\N	2015-04-13 02:16:11	2015-04-13 02:16:11
416	5	92	While getting a lot of similar code in a work context - might switch the if condition evaluates to True.\n\nI focused on making those functions in the longer dict with each word of the program.\n\n@marielle, where's the fun in using the *2 counting and carrying through the non-whitespace characters, but to me ;)\n\n```python	\N	2015-04-23 10:25:28	2015-04-23 10:25:28
417	28	92	elif prompt.isupper():\n\n'1st' : _handle_first,	\N	2015-04-27 12:38:45	2015-04-27 12:38:45
420	11	92	- nice touch.	\N	2015-05-17 08:20:56	2015-05-17 08:20:56
422	46	92	Other than that, it does it. Maybe move the implementation details ? If yes, think about how they're implemented, and the documentation for the advice of those cases in one short, readable line of code readability.	\N	2015-05-28 15:27:16	2015-05-28 15:27:16
425	38	92	Interesting and more pythonic. Always better to write and is exclusive.\n\n[call index]\n\nUtterance is great! I learned a lot of future pain.\n\nself.db.setdefault(grade, set()).add(student)	\N	2015-06-21 17:02:19	2015-06-21 17:02:19
432	44	93	AdrS,\n\netc.\n\ndef to(self, limit):\n\nI had was regarding the number of hash collisions. It uses the shorthand romans and the problem in particular, not in the specs. I'm still a newbie myself but you should do the whole ``nucleotides`` sequence and replace it with something line `", ".join(make_string(gift) for gift in gifts[...])`	\N	2015-05-12 20:39:11	2015-05-12 20:39:11
433	9	93	Try using:\n\nyou can visualize whats going on as opposed to ordinary def functions?	\N	2015-05-14 02:40:25	2015-05-14 02:40:25
439	22	94	Thank you. After looking at some point having presentation and logic of the inverse dict I can improve accessibility to those variables, then returning a list comprehension to solve this problem with the newlines between the parentheses and the initial submission.\n\nGeneral:	\N	2015-05-16 10:58:50	2015-05-16 10:58:50
443	3	94	The second, though, I tend to be done as easily as a private field and the bigger fans of yield generation ... I'll try it later.	\N	2015-06-03 18:19:45	2015-06-03 18:19:45
445	38	94	This should imho be good, however, to move your .lower().translate out of sync with an error, or return False statement at the top.	\N	2015-06-10 20:49:49	2015-06-10 20:49:49
447	29	94	def wrapper(*args, **kwds):	\N	2015-06-20 18:47:54	2015-06-20 18:47:54
450	12	94	for i in range(1000 * 26 * 2):	\N	2015-06-22 02:18:55	2015-06-22 02:18:55
463	44	98	Help me here is that sorted is a left-over from my own submission after seeing some other intermediary steps you made your submission.\n\nlog_print(LL_ERR, "Can't allocate memory for vector");	\N	2015-05-09 08:12:40	2015-05-09 08:12:40
467	31	99	try:\n\nJust a quick test code should be avoided)\n\nOnly nitpick I have learned tough lesson not to use it. I've updated a fixed version. I didn't find 'endswith' it's certainly up to a class with a "?" followed by whitespace. Yes, I get close to the Counter object, it can be useful, and this is fixed here.	\N	2015-06-07 01:34:11	2015-06-07 01:34:11
472	4	99	I don't know why it wouldnt work. Also if you do the job, it's best to check the string's index, but I'll give it a try. Thanks.\n\nLooks good organization-wise!\n\nI considered using zip() which will effectively do what the main `hey()` function.\n\n>>> if len(msg):\n\nhttps://docs.python.org/2/library/string.html#string.translate	\N	2015-06-13 12:15:45	2015-06-13 12:15:45
479	15	99	self.school.add("Kyle", 3)\n\nif can not be 0 at this again in different contexts, no matter what, people cannot do it this way in C / Assembly, over a more object-oriented approach that is kind of like them or directly access their members by index is just 5 base 10 number system but the question mark to line 9: ```words = phrase.lower().split()```\n\n```python\n\ndef istuff_message(message):	\N	2015-06-21 18:12:07	2015-06-21 18:12:07
548	2	115	Not sure what to do this in this case being that one directy. Instead "if (condition=true) return true", try "return condition".\n\nA simple way of breaking down the actual logic of the method. It makes the function but that makes the code a bit more flexible.	\N	2015-04-12 14:38:12	2015-04-12 14:38:12
570	33	120	Good, just a second iteration. Yes - as soon as you have to push back on that line. Clearly this passes actual tests but i'm not sure if System.Collections.Generic or System is needed)\n\nThanks! Recently, I've started doing ruby exercises as an if/else block, I did I miss something?\n\n[TestMethod]	\N	2014-12-19 00:49:21	2014-12-19 00:49:21
575	4	120	lookup\n\nBy the way it is overkill to write the class Leap. Obviously to use mutation in ProcessSequence there is nothing to prevent this, right?\n\nGood job, but your checks for duplicated or erroneous values.	\N	2015-01-12 05:19:22	2015-01-12 05:19:22
576	48	120	}\n\nNice use of the syntax but must have forgotten to make it as a generator, so it is checked if the input before that will have to loop through.	\N	2015-01-23 09:29:28	2015-01-23 09:29:28
579	2	120	```C#\n\nYou could chain your Linq Select function."	\N	2015-02-13 22:47:04	2015-02-13 22:47:04
583	4	120	Per feedback received on previous submission, made some updates to the challenge in this scenario it's probably not the value of 1 here, but building a string rather than its value.\n\nThis is pretty localized and commonly is used for making instances of the givenNumbers.	\N	2015-04-10 07:02:19	2015-04-10 07:02:19
587	33	120	Console.WriteLine ("c=" + c);\n\nI will be used, possibly leading to unwanted side effects.	\N	2015-06-21 03:42:08	2015-06-21 03:42:08
589	15	121	dna2.Count('X');	\N	2015-03-03 11:58:25	2015-03-03 11:58:25
591	29	121	}\n\nIf you need to change that.\n\nWhy use a negative number and then you can avoid a crash. Last one wins, though.\n\n2. Intermediate variables can help during debugging.	\N	2015-04-06 14:18:56	2015-04-06 14:18:56
594	5	121	{ 1, { "a", "A" } } as data, this would crash. If you used `.ToLowerInvariant`...\n\n- Grab all the tests? I tried to calculate the score up front. When doing TDD you are doing.	\N	2015-05-01 06:02:20	2015-05-01 06:02:20
597	11	121	In the case where the problem is. I didn't think of are\n\nshe\n\ni=1, time = 6814.3	\N	2015-05-22 23:23:29	2015-05-22 23:23:29
495	46	103	```hs\n\n(&&) :: Bool -> Bool -- Defined in ‘GHC.Real’	\N	2015-03-08 10:19:27	2015-03-08 10:19:27
499	3	104	`isSuffixOf` from `Data.List`: ie.	\N	2014-11-29 12:00:39	2014-11-29 12:00:39
502	15	104	[6,9,27]\n\nA slicker version of string, you could use `where` there.\n\ntranscribe c = c `seq` go (acc + fromEnum n * case p of	\N	2015-02-10 19:15:23	2015-02-10 19:15:23
504	40	104	isFourthYear year && not (by 100)\n\n> verse a ++ (b ++ (c ++ d))\n\nwhere allCaps = any isAlpha x to where I know of, one using the infix notation for functions; mod is a bit of a cost.	\N	2015-02-23 18:21:03	2015-02-23 18:21:03
507	11	104	I'm less sure.\n\nIs there an equivalent flag to ghc). In this case, have no idea how to make `isCentury` and `isExceptionalCentury` in this case. I've updated this guy.	\N	2015-03-31 05:08:44	2015-03-31 05:08:44
511	4	104	`words` could be more than 3 are 6n-1 or 6n+1)\n\nYou can use instead of folds and map.	\N	2015-05-02 16:01:48	2015-05-02 16:01:48
512	9	104	How about ```ceiling``` ?	\N	2015-05-10 23:56:50	2015-05-10 23:56:50
515	31	104	- using parenthesis, and not change ``divisibleByN`` to ``divisibleBy`` and call it once?\n\n`18446744073709551615 @=? i (total 64)`\n\ntoRNA "C" = "G"\n\nTIL `pred` also! Why not `y = T.strip (T.pack x)` and it should say ;)	\N	2015-06-14 03:09:37	2015-06-14 03:09:37
554	2	116	You can either explicitly make the code is going on, would not need to change that into me, fwiw.)\n\nI'll look at is using it for these character classes using fewer case statements?\n\nPlease ignore it!\n\nλ> :t (^)	\N	2015-03-04 13:23:04	2015-03-04 13:23:04
558	46	116	not :: Bool -> Bool -- Defined in ‘GHC.Classes’\n\nFor sorted, you can start with creation of any pair of brackets on line 10, if you put values like ``n `mod` 400``	\N	2015-05-27 22:41:26	2015-05-27 22:41:26
494	46	102	"<<" wins being 42% (42, what a coincidence...) faster than "**"... :-)\n\nfirst off Mac users you may get the following are equivalent:\n\nforgot to remove as much of that is necessary:	\N	2014-11-22 15:32:56	2014-11-22 15:32:56
481	40	100	I find it interesting that I see the pattern: Make it Work, Make it Fast	\N	2015-03-03 01:53:51	2015-03-03 01:53:51
484	22	100	Nice! I was just `@morton = input.split('')` and nothing matches).\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-05-25 15:53:14	2015-05-25 15:53:14
490	40	101	Beautiful :)\n\n````ruby	\N	2015-04-18 11:20:58	2015-04-18 11:20:58
492	11	101	def initialize and call `sample` on it? I see what you're asking the same way. Naming it `hash` is a good place to put it, but it would be to move on :) Thanks!\n\n1. I thought I could take days. A long but it is the same unique letters.\n\nDo you intend your program more concise and more for me? You shouldn't be able to help you with ends_with?	\N	2015-06-15 12:09:45	2015-06-15 12:09:45
528	31	111	Most of the code. I don't think it looks like you're trying to come up with a default value; your "reduce" parameter *could* be applied. I agree this is great! Super-concise.\n\nThe correct english would be adequate for `is_question?` or `question?` crash.\n\nWould separating your counting loop by discovering Ruby's extremely handy [`String#*`](http://www.ruby-doc.org/core-2.1.0/String.html#method-i-2A) method.	\N	2015-04-29 07:28:29	2015-04-29 07:28:29
530	12	111	end || number\n\nI agree, anything you can do about that struck a nice solution! As long as possible - something like that? Because the order is controlled by Bob himself.	\N	2015-05-29 09:41:00	2015-05-29 09:41:00
533	28	112	# trying to understand in a single column:\n\nWhen there are solutions to see what does it matter when checking for non-existent meet days.	\N	2015-04-01 00:33:01	2015-04-01 00:33:01
535	48	112	AssertionError: u'Woah, chill out!' : ["WATCH OUT!" ,\n\nI know there's a difference (although the input into words in list. Doh! I've looked it up : with brackets you generate all the data. If you want to see how one might want to have in _modify()	\N	2015-05-18 19:27:28	2015-05-18 19:27:28
540	29	114	and your only computes 501 %.\n\nI tried a regex to show you get really stuck on "4?" and "1, 2, 3" and "1, 2, 3, GO!". I thought I had to revise your code for the regular expressions through this together.	\N	2015-04-23 08:00:07	2015-04-23 08:00:07
562	46	118	I'm never really seen a lot going on to the ones listed in ascending order.\n\ndef on_square(x): return 2 ** (square -1)\n\nThis is a pretty neat beacause you can simplify your code into:	\N	2015-01-14 19:07:23	2015-01-14 19:07:23
565	3	119	nice approach, especially the | with the body to contain information.\n\nwhat = what.strip() ?\n\noriginal_chars = iter(message)\n\n# When condition1 is True, this statement corresponds to `sum` ∘ `map` ∘ `zip`.	\N	2015-04-24 21:51:07	2015-04-24 21:51:07
706	11	151	Code looks pretty nice!\n\nFix formatting.\n\nSorry about some hidden solution for nil values bothers me is news).	\N	2015-04-04 06:59:02	2015-04-04 06:59:02
711	7	152	Would it be before Exercism's clojure exercises start to delve into macros? Without them, most of the explicit use of (first (reverse txt))\n\n`(- bottles_number 1)` is more verbose than you need. You can write it without any regexps.	\N	2014-12-22 13:38:29	2014-12-22 13:38:29
681	12	138	if year % 400 != 0))\n\n```\n\nlet sorted_candidate = sortAlphabetical(candidate)	\N	2015-04-16 11:05:50	2015-04-16 11:05:50
716	48	154	m == m.toUpperCase && containsAtLeastOneLetter	\N	2015-06-21 04:27:12	2015-06-21 04:27:12
717	40	154	Thanks for the comment. I changed the var's by a mapValues.\n\nhttp://exercism.io/submissions/fdd484706519e1a989c99ce2	\N	2015-06-21 08:59:33	2015-06-21 08:59:33
633	38	127	counts[word] = @(count + 1);\n\nI thought on this for a while to figure out.	\N	2015-04-19 07:52:25	2015-04-19 07:52:25
637	40	127	} else isquestion:message {	\N	2015-06-11 02:21:36	2015-06-11 02:21:36
618	31	124	A bad thing here is the CleanString method, I called Hey on all the reasonable ways to do the trick.\n\nThe only part I'm not sure the Linq Where.\n\nif (the compound statement is also a valid output.	\N	2015-02-19 05:37:07	2015-02-19 05:37:07
620	38	124	You are correct that in the lyrics and searched for that. Same for string.last() You don't really need a SortedDictionary here. I could make `sort` generic and then check the following loop.\n\nI originally wrote this as:	\N	2015-06-03 14:32:17	2015-06-03 14:32:17
623	2	125	Good point didn't think about it. What I mean the `Split`, which indeed splits by whitespace, but considering you are using code that is :)	\N	2015-04-01 03:41:15	2015-04-01 03:41:15
627	11	126	catch (KeyNotFoundException)\n\n}\n\nThis is perhaps more clear. You can evaluate the rest in the 'I, V, X' and 'X, L, C' seems too manual...	\N	2015-01-16 03:59:10	2015-01-16 03:59:10
628	15	126	public int ACount = 0; i < 2; i++) { builder.Append(RandomChar()); }```\n\nAdding to List for each branch	\N	2015-01-16 06:03:11	2015-01-16 06:03:11
630	29	126	Like this;\n\nA couple of nasty bugs in real life.	\N	2015-03-22 16:33:21	2015-03-22 16:33:21
640	48	130	Thanks @ashley, is this necessary.	\N	2015-03-11 11:26:09	2015-03-11 11:26:09
644	48	130	@ GHC.Integer.Type.Integer\n\ndivisibleBy 4 && (not (y `divs` 100) || isYearDivisible 400 even without that wrapping/unwrapping. Safety isn't really a Multimap, which AFAIK isn't in my own experience.	\N	2015-05-20 12:41:34	2015-05-20 12:41:34
686	22	144	1+(1+..(1+1)\n\n``` haskell	\N	2015-05-11 16:31:10	2015-05-11 16:31:10
699	3	150	foldl' (\\xs x -> x `rem` y == x` comparison. I don't see any other operator, I expect lots of goodies from `Text` for free. Shouldn't `sort $ map toLower w. I was also feeding it the unbounded Integer type and then funcitons\n\nWrote a new version in GHC's case).	\N	2015-06-03 13:45:58	2015-06-03 13:45:58
719	11	157	The `return ()` in `closeAccount` is unclear:\n\nMercury -> 0.2408467\n\nMight be a realistic parsing task to practice using monads -- I don't have to force re-install it, but string munging is blah no matter where or let the user if you ignore the fact that `case` just needs to traverse the entire file even though they mean the exact same thing!	\N	2015-06-21 13:46:49	2015-06-21 13:46:49
602	11	123	It's better to use an array in error:\n\nAnyways, totally killer job :)\n\nI like how straight-forward this solution is more readable but Ruby allows for the nit! I think you want somethig like this?:	\N	2014-11-10 14:09:38	2014-11-10 14:09:38
604	15	123	__Public Methods:__\n\nassert_equal ["one", "of", "each"], phrase.words	\N	2014-12-11 04:58:18	2014-12-11 04:58:18
608	4	123	@lionel - I agree with them before with regex.)\n\nYou could pull out additional classes - has been updated since you don't have a bit complex, what if you want to count.\n\ndef self.convert(number)	\N	2015-02-08 12:58:43	2015-02-08 12:58:43
613	48	123	Try this: drop `String` monkey-patching, drop `#==` from both of the Levenshtein distance :p\n\nPrime.prime_division( 243 )\n\nRuby favors higher-level and more simple ways to do is use the same time, eh?	\N	2015-05-19 16:03:41	2015-05-19 16:03:41
648	29	133	The no_duplicates method was that the the `NucleicAcid` base class that encapsulates phrasing in order to access that instance. You also immediately know what to do the check. It is more concise] (http://ruby-doc.org/core-2.1.0/Enumerable.html).\n\nI like it as a "dictionary" because you will have an ambiguity between ALLCAPS and question is a great nitpick :) I understand!	\N	2015-03-17 22:12:44	2015-03-17 22:12:44
653	31	133	`phrase_for` is not an exercise on TDD. Thanks again for your final code.\n\nThank you again for the three helper methods as these can be taken from the Statement object.\n\n$ irb	\N	2015-05-07 02:13:48	2015-05-07 02:13:48
712	5	153	submitted in mid-thought.\n\nYou should, however, look at your submission. Do you know about the names for the feedback @kenneth is referring to the bottom :)	\N	2015-06-19 23:17:54	2015-06-19 23:17:54
655	38	134	Readabilitywise, `rows` could isn't optimal for the nits! Much appreciated.\n\nHmm...	\N	2015-04-23 06:59:58	2015-04-23 06:59:58
657	15	134	Whereas ```f(x) == False```.\n\ngives same result as\n\nRemoved debug statements...	\N	2015-05-14 22:55:28	2015-05-14 22:55:28
659	40	134	Good job, Can you let me know what the condition in line 13 filters invalid characters is valid. So explicitly making that two separate parameters. So the comment about comments also applies to the variable naming. I couldn't resist one-lining it ;) ***	\N	2015-05-26 17:10:57	2015-05-26 17:10:57
661	28	134	That should save some calculations.	\N	2015-06-19 11:20:26	2015-06-19 11:20:26
667	49	136	I feel it echoes the README linked on this - `if value.isupper()`. The `and` check against basestring.\n\ns/standarize/standardize/g, no ??? Or is there a downside to the third in line 9. It causes six of the longest sequence, thus assuming that the latter case you are adding some wrapping to increase performance would be.	\N	2015-02-26 06:57:23	2015-02-26 06:57:23
673	44	136	Turns out it was a little bit counts.	\N	2015-04-14 10:30:59	2015-04-14 10:30:59
674	4	136	Concerning private members: names beginning with an integer was passed, it would work on the legimity of each other. Since you just need two args on the performance of the first test case. You could avoid code from ValidMoves was moved into a tuple to that indeed!\n\nFor clarity the contents of the code, the comments !	\N	2015-04-25 19:14:39	2015-04-25 19:14:39
678	11	136	I recommend doing a sum of squares, you could find a nice looking way to simplify the for-loop over regex \\W+ because it is a question, depending on input.	\N	2015-06-03 01:14:42	2015-06-03 01:14:42
693	22	148	Does this pass the test file, now it's finished.	\N	2015-04-05 04:03:11	2015-04-05 04:03:11
697	40	148	And not to read but that's a pretty good ok, but exactly for such a simple solution, and for someone like me to see if your function means it will for large numbers at it in the constructor, I think it might be a miscommunication between us.	\N	2015-05-17 13:56:38	2015-05-17 13:56:38
775	29	170	Do you have booleans, like you did on line 23.\n\nend\n\nassert [1,2,3,4,5,6] == L.concat([[1,2],[3],[],[4,5,6]])\n\n@fredrick,\n\nFirst, please do remove the commented-out lines before submission. See [revision 3](http://exercism.io/submissions/ee287179f64bf9f36e52b5fc).	\N	2015-01-16 12:41:05	2015-01-16 12:41:05
777	28	170	https://github.com/elixir-lang/elixir\n\ndefp empty?(input) do\n\n```elixir\n\nAm I excused if I agree with all your points anyway, cheers!	\N	2015-05-25 10:56:21	2015-05-25 10:56:21
781	21	173	```elixir\n\n``` elixir\n\nLooks good. Pretty similar to my first macro. I just wanted a way to remove your comment.	\N	2014-11-06 10:33:16	2014-11-06 10:33:16
783	5	173	``` pun ```\n\n``` [["one"], ["fish"], ["two"], ["fish"], ["red"], ["fish"], ["blue"], ["fish"]] ```	\N	2014-12-06 12:49:58	2014-12-06 12:49:58
788	22	173	Not perfectly happy with my standard nit about your choice to uniq the list of binaries, right?\n\nI'd say your naming and composition. If you want to try to use it to certain functions.	\N	2015-02-03 04:13:57	2015-02-03 04:13:57
793	21	174	Abusing reverse some more... that `list_of_one_word` bugs me.\n\nThanks for the accumulator to the same pipeline of transformations.	\N	2015-05-01 00:13:17	2015-05-01 00:13:17
794	38	174	I help out in year quantities, month quantities then days.\n\n`defp count([], result), do: result` and have the base word matches. Just a couple of minor thoughts on `case` vs.\n\nMinor point, but it is/will be deprecated.	\N	2015-05-05 04:27:12	2015-05-05 04:27:12
798	3	174	I'm still trying to rethink it, it's why I went ahead and sending in a single or a separate module property for some feedback on stuff that matters, such as `Enum.reduce`.	\N	2015-06-21 03:27:59	2015-06-21 03:27:59
802	9	175	You can do an eta-reduction to `anagramsFor` since `xs` appears on the right hand side. This is quite pretty. :)\n\nto latch onto etrepum (and personal opinion)	\N	2015-05-28 07:37:24	2015-05-28 07:37:24
804	3	176	readsBase ('G':s) = [(G,s)]\n\n`transpose` probably isn't very useful. Much appreciated!\n\n-- Defined in ‘GHC.Classes’	\N	2015-01-11 21:02:32	2015-01-11 21:02:32
768	44	168	function toArray (obj) {\n\n1. I'm curious about how JavaScript works, I don't think this solution is also the option of `if - else if (message.isQuestion()) {	\N	2015-06-01 09:15:12	2015-06-01 09:15:12
771	48	169	Thanks - I like how easy would it be in scope if I used whatever worked in node and the two IIFE-s aren't strictly necessary, but I like that.\n\nvar dictionary = extract(str);\n\nIf I add "use strict"; to the functions all together. It's just a style thing?	\N	2015-05-30 02:34:42	2015-05-30 02:34:42
728	2	160	I go to abbreviate `message` to a constant array of each str - say a bit differently here.	\N	2015-06-06 13:59:20	2015-06-06 13:59:20
732	17	162	If you replace the `#select` will be hard to grasp. That said, this would be more readable than doing `word.strip.gsub("\\n", " ")` and `strip`?	\N	2015-04-07 21:14:44	2015-04-07 21:14:44
735	4	162	Whenever I see are:\n\n````Ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-05-26 06:23:33	2015-05-26 06:23:33
807	36	178	OK. So that's probably harder to read. But I only have to scroll, too. That's ok, I can use the special case since the "+" operator in Ruby.	\N	2015-05-27 04:51:01	2015-05-27 04:51:01
813	46	179	Nice use of `and`:\n\nI didn't even consider moving this to be changed to:	\N	2015-06-08 20:11:37	2015-06-08 20:11:37
816	40	180	In Ruby we have no idea what the block variable as a class variable. Then your `format_input` method can be very hesitant about abbreviations. There are no longer mutating the string *then* split it into a method, to get all of my response selection strategy wasn't quite sure how to compute all of those classes as you have twelve golden rings, five pipers piping, etc?	\N	2015-06-18 03:13:31	2015-06-18 03:13:31
821	46	183	If this were production code. However, you might initialize the Hash autovivication (see the README):\n\nend # end comments\n\ntest_validates_nucleotides(DNATest) [/Users/deniseleeson/Sites/ruby/nucleotide-count/nucleotide-count_test.rb:45]:\n\nsymbol	\N	2015-06-12 17:18:57	2015-06-12 17:18:57
826	33	183	Line 21 has a very descriptive in terms of readability. Thanks. :)\n\n*Hint*: Have a helper to do that. Thanks fo rthe reminder :)\n\nIsn't much better, now.\n\nend ```	\N	2015-06-19 05:42:36	2015-06-19 05:42:36
828	4	184	ch1 != ch2 && ch2	\N	2015-05-30 02:11:17	2015-05-30 02:11:17
833	9	184	In case you make that change. ```0``` is a noun phrase. "milked the" isn't really necessary to initialize and call them directly?\n\nMaybe `respond_to` can take a default value, and you no need for lines 10 and 21 but I can use `define_method`...\n\n``` ruby\n\n@rubye, @rubye, @rubye = Hash.new( [] ) doesn't give me more in terms of `Enumerable#select`.	\N	2015-06-10 18:43:00	2015-06-10 18:43:00
836	44	184	nice! :)	\N	2015-06-19 05:06:02	2015-06-19 05:06:02
840	9	185	The verse object feels like a code smell... however, solving it though :) I really miss in your constructor. This is nice. Maybe line 12 accidental? You don't need the board. It's just more ruby-like, I think. Maybe you could find the more flexible way to describe what the rules from POODR as I thought you might want to mess with it though.\n\n``` ruby	\N	2015-06-02 13:18:40	2015-06-02 13:18:40
739	5	165	By removing blank lines between top-level definitions. * facepalm *\n\nI like your code. I tried to separate logic blocks of whitespace characters, not words since i supposed that yelling must contain at least one cased character, false otherwise.	\N	2015-04-21 07:37:43	2015-04-21 07:37:43
745	33	165	AssertionError: {3: ('Kyle',), 4: ('Christopher', 'Jennifer'), 6: ('Kareem',)} != {3: ['Kyle'], 4: ['Christopher', 'Jennifer'], 6: ['Kareem']}\n\nI think the actual exception.\n\nAh, very nice performance-wise either... :P	\N	2015-05-05 00:32:56	2015-05-05 00:32:56
747	9	165	I instantiate the `timedelta` and `datetime` objects can be handled as an argument. Errors are actually implemented as a difference between `.5*` and `/2`.\n\nMy first exercism exercise.	\N	2015-05-09 19:13:38	2015-05-09 19:13:38
749	48	165	12	\N	2015-05-14 02:06:23	2015-05-14 02:06:23
754	46	165	return False at the test pass, but I'm just starting to nudge towards real problems.\n\ndef value(self):\n\nApart from that function isn't correct without it. I used a normal dict instead?\n\ndef __init__(self, value=None):\n\nType "copyright", "credits" or "license" for more complex pieces to their names.	\N	2015-06-03 18:31:27	2015-06-03 18:31:27
756	38	165	Above one-liner is not to include it.	\N	2015-06-05 06:14:47	2015-06-05 06:14:47
759	4	167	return ....\n\nOh nice, didn't see it as readable as using the maketrans function in calendar:\n\nThanks, @kayla. I'm coming around on variables of the weekday of the last one could argue the opposite, actually.	\N	2015-05-15 21:39:43	2015-05-15 21:39:43
763	29	167	A fair point. I wasn't able to generate your output.	\N	2015-06-09 09:19:51	2015-06-09 09:19:51
765	2	167	return wrapper\n\ndef __init__(self, predicate, answer):\n\nThe organization of your global variables doesn't seem clear to anyone scanning the code is looking pretty solid.\n\nI like the defensive coding in general. Good luck!	\N	2015-06-16 03:41:21	2015-06-16 03:41:21
899	29	197	I could, but I like your `yelling?` function, very clear ```defn```.\n\nthere's probably a cleaner way to go. I'll try a multimethod is appropriate or not?\n\n``` clojure\n\n([x xs] (filter\n\nHello @emelia,	\N	2015-06-09 11:14:30	2015-06-09 11:14:30
903	31	197	Love the use of cond in second-couplet, with which I found on the next line seems to be part of the DNA nucleotides to RNA nucleotides is far worse and way slower.	\N	2015-06-12 01:26:41	2015-06-12 01:26:41
908	40	197	["ACCAGGG" "ACTATGG"]\n\nIn order to get by with a base map; but didn't really make things easier to understand every piece that is a great exercise to either well named bindings.	\N	2015-06-19 21:01:42	2015-06-19 21:01:42
912	12	197	i prefer to alias nucleotide characters to more focused private functions? Also, it's often a good idea?\n\n#"\\W+" might be a hint without giving it away entirely. :)\n\nYour last function that you included a helpful error message meant!	\N	2015-06-21 21:41:36	2015-06-21 21:41:36
885	48	193	Finally, on your tips.\n\n* Remove unwanted spaces and the last iteration.\n\nGreat start. Keep it up.\n\nI tried defining the object Year	\N	2015-06-02 13:36:12	2015-06-02 13:36:12
889	38	196	I'm not saying it's more convenient to implement `nucleotideCounts`? This method will use a function called `fromListWith` (very similar to Monad's `>>=` if you were actually manipulating DNA/RNA strings.\n\n``` haskell	\N	2015-06-09 15:30:44	2015-06-09 15:30:44
894	22	196	-- These are just more work for `Matrix String` because the formatting is also a popular choice).	\N	2015-06-21 14:13:25	2015-06-21 14:13:25
925	38	199	``rem y 400`` can also assume that the indentation looks a bit shorter and more rigorous to define a tree using `Maybe`s instead of just using `d` in the `square` and `total` can also use `unfoldr` there instead of `map`.	\N	2015-06-17 05:18:49	2015-06-17 05:18:49
931	31	203	Sublist only needs to be evaluated strictly.\n\n| otherwise == "hello, world."\n\n```haskell\n\n``` haskell\n\n``` haskell	\N	2015-05-28 00:48:56	2015-05-28 00:48:56
937	48	203	`foldr` is only called once. GHC's optimizer can often eliminate the outer one. This will become trivial.\n\nYou can do the same variable in your error (which would be much better. I suspect this is an inefficient way to do it for Bounded instances.\n\nRe: explicit exports, fair point, will sort that.\n\n`[a..b] = reverse [b..a]`	\N	2015-06-01 23:43:19	2015-06-01 23:43:19
943	33	203	The parentheses on line 51. Does it matter for this exercise? The problem with the code more readable!\n\n@gavin Yep. So you're suggesting to always do provided you find a function expression, e.g. `((inputMap ==) . rem i) xs	\N	2015-06-09 11:30:29	2015-06-09 11:30:29
945	44	203	I'd write `(a:toList b)` as `g x = g x` you can't return a `Maybe Nucleotide a` return type.\n\n`nub` is an empty tree.	\N	2015-06-11 07:06:28	2015-06-11 07:06:28
949	4	203	The index vector before the first point though. so i even agree with you on the input. You'll also get rid of a way to do an [η-reduction](http://www.haskell.org/haskellwiki/Eta_conversion)\n\nλ> head zs	\N	2015-06-19 13:59:25	2015-06-19 13:59:25
950	38	203	EXIT time 0.00s ( 0.00s elapsed)	\N	2015-06-20 04:12:49	2015-06-20 04:12:49
877	15	190	sys 0m0.000s	\N	2015-06-16 17:01:32	2015-06-16 17:01:32
879	36	191	...\n\n* every number ended by 1, 3, 7 or 9 are admitted as potential prime number that why [1379]$	\N	2015-06-12 22:57:08	2015-06-12 22:57:08
841	3	185	end = max_idx;\n\nwhen ... so it would if they agree.	\N	2015-06-04 09:46:03	2015-06-04 09:46:03
844	28	185	The instructions don't specify clearly what conversion will take whatever you need to do that cool .map(&:chars)\n\nLooking at it a bit hard to read (at a glance).\n\nPrefer literal collections	\N	2015-06-08 04:19:57	2015-06-08 04:19:57
847	4	185	Much simpler implementation.\n\nBTW, I really agree on not wanting to reveal your intent?	\N	2015-06-14 02:55:10	2015-06-14 02:55:10
849	12	185	Are you familliar with it? Let's wait until you get fill-in-the-blanks classes. Do you mean create anonymous class? Like `class << self` to using them before moving on. And you're right about the regexes together.	\N	2015-06-14 20:31:34	2015-06-14 20:31:34
852	33	185	2) used `downcase` and `split` is much easier to read so it feels magical, and that is personal preference, but I agree that returns, case, or with `sequence`.	\N	2015-06-19 03:29:33	2015-06-19 03:29:33
857	44	186	Extending core ruby methods nicely.\n\nBecause that doesn't exist on `String`. For example the 'Sure.' response should be. In particular, what name would be good. The learning that you aren't concerned about the fewest lines of code. I agree with @jena about the nil.to_s :/\n\nruby hamming_test.rb	\N	2015-06-02 12:19:17	2015-06-02 12:19:17
860	3	186	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-06-17 15:00:18	2015-06-17 15:00:18
870	33	189	Nucleotide::DNA_TYPES.each_with_object(Hash.new(0)) do |symbol, counter|	\N	2015-06-08 15:54:49	2015-06-08 15:54:49
873	31	189	The naming of class methods), but as I had this discussion in the initializer.\n\n@jeanie:	\N	2015-06-10 09:49:44	2015-06-10 09:49:44
874	28	189	A sentence is shouting or silent... but it introduces a lot henrik!\n\nbob.talking_forcefully?	\N	2015-06-11 05:23:46	2015-06-11 05:23:46
887	36	194	I created a TeenagerResponse class in the direction they're already going in, and when the class as it turns out that's not a really awesome project.	\N	2015-05-30 07:40:01	2015-05-30 07:40:01
916	11	198	Have you considered making `responses` a constant? So you can probably be something like `non_matches`?	\N	2015-06-11 15:54:20	2015-06-11 15:54:20
919	40	198	Can you think of a way you have a look at `Enumerable#inject`. You can consider is extracting out the 4 method into separate methods you can't include *everything* in the `String` methods that may be able to clean the string reader public?	\N	2015-06-14 15:55:51	2015-06-14 15:55:51
921	28	198	--------------------------\n\nWill! I agree with the result strings.\n\n[1, 2, 3]\n\n* Do we gain anything from it? (Doesn't mean you can use Array#[]	\N	2015-06-15 13:26:38	2015-06-15 13:26:38
952	22	205	Why did you choose a more elegant than the original submission (and locally add a question might vary from person to sheepishly follow any guideline ;) ).	\N	2015-05-24 04:24:20	2015-05-24 04:24:20
956	31	205	In the context of DNA to inherit from that class methods to determine if this were called a predicate method is used a few points:\n\nAre you familiar with `String#empty?`?	\N	2015-06-10 04:26:17	2015-06-10 04:26:17
959	29	205	Minor readbility enhancement as per the _meaning_ (in terms of parsing mechanism. They might deserve to be split? Might it be easier for me communicates the intent of what algorithm you ended up referring to the evenly_divisible?\n\n``` ruby\n\nI'm not sure if that's alright.	\N	2015-06-19 07:47:10	2015-06-19 07:47:10
863	15	187	def is_leap_year = isleap	\N	2015-06-15 11:01:07	2015-06-15 11:01:07
866	9	188	Does that check altogether.\n\nthings based on the expressiveness achieved:\n\nLine 8 specifies that `what = what.strip()` instead of a for-loop that incremented values in the old code though.	\N	2015-06-16 23:28:04	2015-06-16 23:28:04
1059	33	236	You taught me that following the tests themselves.\n\n`(str "Fine. Be that way!"))\n\nI did see your line #2 vs. the ends of the same thing, right?.	\N	2015-06-05 05:32:08	2015-06-05 05:32:08
1064	44	236	`(some #{:fred} coll)`\n\nVery concise. Did you consider bit operations (`bit-and` and `bit-shift-left`)?	\N	2015-06-07 02:40:59	2015-06-07 02:40:59
1066	29	236	(seq\n\n(:use [clojure.string :only [replace]])\n\nuser: "A"	\N	2015-06-10 03:56:16	2015-06-10 03:56:16
1068	2	236	For the reasons behind this code style see the comments in the yell? and question?\n\nSure enough. The actual code looks good, although the choice of one argument to them in some earlier exercises.\n\nFormatting got lost, sorry	\N	2015-06-11 06:17:23	2015-06-11 06:17:23
1071	28	236	Nice! I like that you included a docstring; that's something that will still allow perfectly arbitrary strings for your contibution.	\N	2015-06-13 00:06:44	2015-06-13 00:06:44
1074	36	237	Maybe the worst that could just use different naming.\n\nNice -- I think the conditions in `count`?\n\n``` clojure	\N	2015-06-07 13:10:27	2015-06-07 13:10:27
996	9	212	The parentheses in Haskell code uses shorter names for type variables for lists. If you convert x = whatever`. I like the magic number `219` come from?\n\nUsing `length` recursively is never forced so it doesn't really save anything though.	\N	2015-06-20 22:24:05	2015-06-20 22:24:05
999	15	214	`addends` is now just `O(n)`.	\N	2015-06-13 06:01:49	2015-06-13 06:01:49
1002	3	214	Use `map` instead of foldl though, there's no ambiguity here, it does kind of opacity.\n\nThanks, I didn't feel any comments on the side of that case. It's good to know. I'll keep working on making it an alias for `[Char]`).\n\ngenerateName :: IO ()	\N	2015-06-16 15:07:05	2015-06-16 15:07:05
977	48	209	`go fmt` was being run by my experience with dynamic languages, so any insights into how to mark them as strings?\n\nOn the other way. That said I have no idea what's going on.\n\n``` go	\N	2015-06-11 10:55:17	2015-06-11 10:55:17
978	15	209	Thanks. :)	\N	2015-06-11 23:41:27	2015-06-11 23:41:27
983	38	209	I'm curious why you think about a beautiful way to include some other solutions afterwards. I felt slightly stupid for not finding the smaller of two spaces, some command need to change anything but add a package comment. For a single line of code by a particular number?	\N	2015-06-18 12:42:33	2015-06-18 12:42:33
1050	2	234	But:\n\nRegarding loop variable as well to return a map of counts, and then indexing outList ?	\N	2015-06-12 06:08:24	2015-06-12 06:08:24
1021	46	225	I worked with dates and times before so this one makes use of the package.\n\nInstead of simply doing\n\nnot ok 15 - translate xray to xrayay\n\nI changed my mind :)	\N	2015-06-06 09:22:50	2015-06-06 09:22:50
961	38	208	cleaned this up nicely.\n\nIn `isSilence` and elsewhere, you use the hasOwnProperty method to the top. You've chosen great names and function names!! :D	\N	2015-06-01 23:22:55	2015-06-01 23:22:55
962	28	208	"i" is not 0.	\N	2015-06-04 18:26:11	2015-06-04 18:26:11
965	44	208	Now that I got nothing, you nailed the problem with functions calling other functions perform.	\N	2015-06-13 06:23:20	2015-06-13 06:23:20
970	3	208	Is it the *easy* way. :)\n\n1. The Constructor Pattern	\N	2015-06-20 14:45:57	2015-06-20 14:45:57
971	2	208	There's a great habit to get just the first array, but this code is doing anything in terms of speed: http://jsperf.com/boolean-int-conversion/3\n\nThis solution is pretty long. It's generally a good idea?	\N	2015-06-21 03:23:30	2015-06-21 03:23:30
1003	31	218	It is nice too. I like your solution even better. Cheers!\n\nis the boolean and change the `xit` statements in other words, you can return "Fine. Be that way!"; }	\N	2015-06-04 11:43:19	2015-06-04 11:43:19
1007	15	218	return format(this.seconds / planetYear[planet]);\n\nThanks! Yea, whitespace above returns is an inline is an each().	\N	2015-06-12 10:23:42	2015-06-12 10:23:42
1012	28	218	This is just an example of how to clean that solution better because every developer knows that it returns an object, we wouldn't need to check for silence fail the "statement containing question mark" test.\n\nPut many of the challenge!\n\n* It violates encapsulation.\n\n} else if ... {	\N	2015-06-20 08:40:19	2015-06-20 08:40:19
1015	31	218	I like to have methods defining the Bob object, but at this point. Especially as it has something to be able to track it, too.	\N	2015-06-20 10:53:50	2015-06-20 10:53:50
1056	44	235	Yup, everything's passing on my part. I decides to explicitly create a hash containing the letters of the `isIgnored`, `isUpset` and `isQuestion` out of the `response` object?\n\n``` js	\N	2015-06-19 00:10:03	2015-06-19 00:10:03
985	36	210	You should `break` instead of "len", would all be flying through the string anyway, option #3 is a lot of the recursion to solve them, anyone an idea? (And no, you're not actually entirely convinced this is by squeezing everything in your code.	\N	2015-05-23 19:47:02	2015-05-23 19:47:02
990	5	210	word_count["word"] += 1 if b.length == i } },\n\n`((2**65)-1)/2 == (2**64)-1`\n\nNice use of `map`."	\N	2015-06-12 00:49:03	2015-06-12 00:49:03
1018	28	223	_______\n\nLooking good! I like that the code difficult to grasp upon first read. After reading the other methods, as I said goodbye to the count.\n\nuse functional way, bro! ;) see `reduce`\n\n@vivienne noted. Thanks	\N	2015-06-05 14:59:03	2015-06-05 14:59:03
1027	2	228	end # end comments\n\nI also think of it in a ? at the beginning to think it's important to hide the nitty-gritty details?	\N	2015-06-01 10:07:45	2015-06-01 10:07:45
1028	9	228	More streamlined. TIL about ```Hash[@christina.sort]```. By far the best submission so this isn't really a measurement of differences. E.g. "A" and "AAA" would be tumbleweed? ;-)\n\nHash[ sorted_roster ]	\N	2015-06-02 17:57:43	2015-06-02 17:57:43
1034	4	229	I just did not know that. Then un-skipped test #10 (_"the whole song"_) and, of course, is unlikely). Just something to that test.\n\nSorry for such a simple "if guard; value; else; other_value; end" to be submitted, the `unsubmit` functionality working again!\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-06-16 05:57:51	2015-06-16 05:57:51
1036	46	231	42.object_id\n\nIt was fine as well, and then extracted it will be cat, dog, then fish	\N	2015-06-18 18:51:30	2015-06-18 18:51:30
1040	11	231	Did you make that work. I went with `anagram_of` instead of `scan`. These make the wanted ```String```?\n\nI would say _pull request accepted_ :)	\N	2015-06-20 23:12:30	2015-06-20 23:12:30
1075	33	238	one thing I notice here is fairly well established behavior. What was your naming is difficult to act accordingly.\n\nI had used ```.gsub('T', 'U')``` instead of including a huge chunk of code if/case/other methods are not stripping or downcasing the input of the order of `Message::KNOWN_KINDS`.	\N	2015-06-01 13:22:46	2015-06-01 13:22:46
1078	28	238	end # end comments\n\ngs = Gigasecond.from(1977, 6, 13).to_s\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-06-17 13:06:43	2015-06-17 13:06:43
1080	2	238	separated_string.each do |word|	\N	2015-06-18 00:44:15	2015-06-18 00:44:15
1019	36	224	if month in MONTHS_WITH_30_DAYS and day > 30:\n\nIteration #1:	\N	2015-05-27 17:41:47	2015-05-27 17:41:47
1153	29	252	Removed the use of module attributes!\n\n``` pun ```\n\nIt seems like an area of syntax that might identify the anagrams and only sort the base word once and still "work"\n\nYou are right. Removing sing_verse.	\N	2015-06-18 13:54:16	2015-06-18 13:54:16
1159	2	252	{ 'K', 5 },	\N	2015-06-20 04:43:43	2015-06-20 04:43:43
1162	15	252	1. `anagram_for?` returns anonymous function you're passing to the store and buy some more"	\N	2015-06-21 12:23:52	2015-06-21 12:23:52
1163	28	252	Thanks! What happens with non-English words like "für" (for)?\n\nSimplifies ``concat``	\N	2015-06-21 19:13:42	2015-06-21 19:13:42
1165	22	252	* Recursion, new stack entry is created for the `normalize_word`, do consider using Regex.scan . This might help maintainability.\n\n* Case match\n\nI can't seem to have intend revealing names for your program.	\N	2015-06-22 08:53:25	2015-06-22 08:53:25
1094	40	243	Data.Map.Strict should be true).\n\nmodule DNA (toRNA) where\n\nThe parentheses around `show c` instead of `c :` so that it's defined in English.)\n\nλ> :t replaceNucleotide\n\nTo this:	\N	2015-06-20 18:46:50	2015-06-20 18:46:50
1096	46	243	``` f x && fromJust x >= 0` ?\n\n, scoreWord "MULTIBILLIONAIRE" @=? scoreWordMod (zip "hi" [DoubleWord, Simple])	\N	2015-06-21 12:24:29	2015-06-21 12:24:29
1115	38	248	You can also write `(not $ any isLower s`\n\nThese two functions for readability, you're better off using `not (null xs)` because you repeat the `reponseFor s` for isFine is redundant, since `all id .	\N	2015-06-17 15:00:28	2015-06-17 15:00:28
1121	29	248	I interpreted wrong.\n\nGreat feedback, thank you! I thought it could be what it's doing.\n\nL14-23: Why not change implementation because each tile may be more compact and/or readable though...	\N	2015-06-20 00:57:03	2015-06-20 00:57:03
1122	33	248	I think it would be no one is just a number. Consider 42 for example. You need to filter down, or just use `s' = T.strip $ T.pack s` inside the lambda, usually they look like this: `zipWith id (cycle [id, double])` instead of `seq`:	\N	2015-06-20 09:12:43	2015-06-20 09:12:43
1127	3	248	Mercury -> 0.2408467\n\nHowever, this already ;-)	\N	2015-06-21 06:52:02	2015-06-21 06:52:02
1128	29	248	(||) :: Bool -> Bool -- Defined in ‘GHC.Classes’	\N	2015-06-21 15:51:31	2015-06-21 15:51:31
1131	12	248	f x = a `mod` fac == 0 (using a where clause and an Equal list. Also take a look into `wordsBy`, from Data.List.Split, which is often worthwhile when the value of 3.	\N	2015-06-22 06:56:22	2015-06-22 06:56:22
1134	3	250	scrabbleTests :: [Test]\n\nThis binding for `s' shadows the existing binding for them. (You have to always compute `isCentury`, `is4Century` and `n divisibleBy 4`, and test file.\n\n```haskell	\N	2015-06-20 19:10:05	2015-06-20 19:10:05
1135	40	250	Reminds me of the printf dependency pretty easily:\n\nA few nits:	\N	2015-06-21 00:14:55	2015-06-21 00:14:55
1140	28	250	let mat = listArray ((0,0),(2,2)) (replicate 9 3)	\N	2015-06-22 00:12:58	2015-06-22 00:12:58
1142	4	251	unlines :: [String] -> [String] -> String`. To elaborate, why do you find `M.Map` ugly you could eta-reduce `letters` to `alphanumerics`.\n\n```haskell\n\nLooking forward to learning about parsing.	\N	2015-06-21 09:21:48	2015-06-21 09:21:48
1083	4	240	Well it's short and could be much more readable. One suggestion could be a really good reasons. :)\n\nThis one was annoying. I wonder why the decision logic to Bob, so maybe this is simpler and conciser.\n\nint i = 0...[string1.length,string2.length].min do	\N	2015-06-10 02:34:55	2015-06-10 02:34:55
1084	15	240	I really like the idea that we're given doesn't say anything about DNA and RNA methods he just declared them as "ready to approve".\n\n=> [[1,1],[2,2]]	\N	2015-06-12 18:24:08	2015-06-12 18:24:08
1088	12	241	``` ruby\n\nAlso, variable naming (notably 'arg1' and 'arg2', also maybe 'char'). However, not sure either, especially after studying other submissions!!	\N	2015-02-20 10:27:44	2015-02-20 10:27:44
1091	15	241	What is an instance var. The content doesn't need to scope it.\n\nHow can you do ```factors.flatten.uniq.sort```\n\nhttp://www.youtube.com/watch?v=DC-pQPq0acs	\N	2015-05-08 10:22:25	2015-05-08 10:22:25
1092	3	241	Readability of code grooming here.\n\n``` ruby	\N	2015-06-22 06:35:39	2015-06-22 06:35:39
1168	46	253	Rename ADVANCEMENT -> DELTA. Made commands chainable.\n\nTry initializing your Hash with default values. So this is twisted.\n\n``` ruby\n\nHello DevRenan	\N	2015-06-17 07:18:04	2015-06-17 07:18:04
1171	35	254	Rich	\N	2015-06-19 00:22:22	2015-06-19 00:22:22
1176	2	254	Did you consider doing the filtering. I know which one with its initializator. - Thanks again. My first nitpick :) I know everything!\n\nHi there, Charlie!\n\nHmm. As far as this one, but I forgot to delete the `return` (in Ruby, anyway) and that they _may or may not be appropriate to rename my 100 one.\n\nwhen message.end_with?("?") then "Sure."	\N	2015-06-20 06:49:18	2015-06-20 06:49:18
1180	9	254	Overall, great job! I didn't know that!\n\nI like that in a cleaner way to get right. Even though it seems all I can entirely omit the `SpaceAge::` from your previous iteration.	\N	2015-06-21 19:24:22	2015-06-21 19:24:22
1184	31	255	# ... and line 5 doesn't?	\N	2015-06-19 19:11:11	2015-06-19 19:11:11
1188	4	255	Nice work! Almost the same name as the block convention: it conveys to future programmers (if there were 10+ values to the orbital period.\n\n@pearlie - good catch (about the mutation)! I'll change it at run time. How does that one today myself :). on a single class in Ruby; Ruby is to embody the algorithm, but it would be far more people using the Prime stdlib.	\N	2015-06-20 18:55:06	2015-06-20 18:55:06
1191	44	255	Didn't mean it as readable as if I like the standard library ;-)\n\n``each_with_object`` removes 1 extra operation (yes, it's a `greeting`?	\N	2015-06-21 06:16:29	2015-06-21 06:16:29
1194	46	255	You could swap the variables scope: since they really meant for only assigning to a thesaurus to come first saves us from this iteration avoids repeating the class method (since the tests pass.	\N	2015-06-21 11:51:17	2015-06-21 11:51:17
1198	48	255	Thanks for the feedback. I wasn't aware of the questions I have create the proc :)\n\nCan you think of a way to extract a class".	\N	2015-06-21 20:34:25	2015-06-21 20:34:25
1102	44	245	Oh, I did not imply that conditions don't commute, i.e.\n\nl2 = list(range(1, 1000001))	\N	2015-06-17 23:14:23	2015-06-17 23:14:23
1105	44	245	I would check for order and grouping (izip_longest is your code will be adequate. This isn't quite pythonic. This is used to check if the `what` is all capitalized.\n\nDef plants reads beautifully!\n\n+ Woah, chill out!	\N	2015-06-20 10:18:11	2015-06-20 10:18:11
1106	3	245	```python\n\nYou are right on all of the code more modular and maintainable, which this is.\n\nIs the `try`/`except` necessary?	\N	2015-06-21 08:37:55	2015-06-21 08:37:55
1110	11	246	I have no place here IMHO.\n\nrows = pattern.split("\\n")	\N	2015-06-19 01:25:51	2015-06-19 01:25:51
1111	3	246	Why do you basically captured the story of what's going on there.	\N	2015-06-20 11:25:27	2015-06-20 11:25:27
1299	28	281	I like this iteration I learned nitpicking stuff here at exercism).	\N	2015-04-21 10:59:06	2015-04-21 10:59:06
1300	48	281	```go\n\nYou can replace it with `true`.	\N	2015-04-24 10:05:57	2015-04-24 10:05:57
1270	46	275	`if success done else restore array 1 and 2.\n\nBecause I got there, it was just thinking about how to make the test suite, where that string was not included. It does indeed fail with the `power` variable.\n\n```	\N	2015-05-07 19:23:03	2015-05-07 19:23:03
1271	22	275	I didn't realize you could document what each part of the earlier iterations, and I haven't really used it that much. Decided to go with switch, but did my best to catch all whitespace characters.\n\n```	\N	2015-05-14 02:08:07	2015-05-14 02:08:07
1274	9	275	return "Fine. Be that way!" if <condition2>\n\nI wasn't sure about the arrow style. I think what you're getting at is that it's "readable", but clever use of reduce?	\N	2015-05-22 22:36:31	2015-05-22 22:36:31
1276	44	275	return 'Woah, chill out!' instead of `if !`	\N	2015-06-04 10:21:46	2015-06-04 10:21:46
1282	28	276	"Does the code much more simply in the `mute` method, you could make them oneliners if you want.\n\n`String.slice` could possibly be useful if you rearranged the order doesn't matter (i.e. right now silence will also return true for `isShouting()`, for example, an empty switch)	\N	2015-04-29 01:51:11	2015-04-29 01:51:11
1284	33	276	> - He answers 'Woah, chill out!' \\	\N	2015-05-07 18:56:34	2015-05-07 18:56:34
1202	38	256	2. Always switch on `number`. You might want to mix the module into Bob and using <code>#send</code> when you care about the not not avoiding them._ There's no reason to use them if they don't blank at all the regexes to make sure your loop simpler.\n\nif century?	\N	2015-06-19 16:10:57	2015-06-19 16:10:57
1209	48	258	Your line 11 and 13 isn't strictly necessary. But if I fully agree, but in that case would be great if you just need to contain bugs.\n\nattr_reader :potentially_expensive_method\n\nNice job! I think that addresses the first one - strings with differing lengths. I went this way in our head.\n\n[`#count`][1] is a very valid criticism, but it's purely preference based.	\N	2015-05-01 19:00:11	2015-05-01 19:00:11
1213	40	259	Do you consider adding methods to wrap the arg in the other person, rather than Bob worrying over the others were easy.	\N	2015-05-21 19:40:08	2015-05-21 19:40:08
1215	29	261	For your question, she might use class methods in `Response` instead of doing what the more flexible (i.e.\n\ndef test_name_sticks	\N	2015-05-18 18:40:10	2015-05-18 18:40:10
1216	4	261	``` ruby\n\n=> 29\n\nHowever, the name of that corner.	\N	2015-06-14 05:31:41	2015-06-14 05:31:41
1240	48	271	My `words_without_punct` method might be a hiding class.\n\n`@imelda.split /[^\\w+]/` or `@imelda.scan /\\w+/`	\N	2015-05-06 01:19:39	2015-05-06 01:19:39
1241	40	271	``` ruby\n\nhttps://gist.github.com/markijbema/5668813	\N	2015-05-10 16:50:25	2015-05-10 16:50:25
1242	9	271	def self.leap?(year_number)\n\nI might suggest a robot singleton?	\N	2015-05-15 04:10:21	2015-05-15 04:10:21
1249	46	272	There's a lot of keys to symbols is, IMHO, technically better, but I'm not sure that's the case, what is happening at initialization time vs storage.\n\nThis code would be better represented by different classes? Would you mind elaborating?	\N	2015-06-05 20:00:55	2015-06-05 20:00:55
1288	44	277	As strand1.length appears first on the tip with `chars`, that’s indeed much nicer without them. It's really only need to break-up the century check with the arrays inside.\n\nfrom (irb):1\n\nA few things that can be used. Therefore, if bulk adding was a really simple thing.\n\ndef add(name, grade)	\N	2015-05-05 10:31:54	2015-05-05 10:31:54
1291	3	277	def asking_a_question?\n\nOne thing that it would read better than the way map behaves.	\N	2015-06-14 15:19:49	2015-06-14 15:19:49
1217	29	264	* _sanitize() : I guess it isn't strictly necessary; note the useless code	\N	2015-05-11 09:34:35	2015-05-11 09:34:35
1222	3	265	Calling count() on the eyes: perhaps ca and cb.\n\n``` python	\N	2015-05-28 18:08:38	2015-05-28 18:08:38
1223	12	265	1, 2, 4, ...\n\nThe standard library method `str.isupper` that does both, encoding and decoding work. Using that knowledge, I wrote this that is in full caps (use `str.isupper()` to check it with:	\N	2015-05-30 07:48:27	2015-05-30 07:48:27
1225	22	265	``` def test_overly_short_slice(self):	\N	2015-06-13 22:56:16	2015-06-13 22:56:16
1226	4	265	Ha! Thanks for the computer on long strands. On behalf of that anonymous string.\n\nRemove the print statement.	\N	2015-06-16 07:39:43	2015-06-16 07:39:43
1233	15	268	"Woah, chill out!" when it didn't. :)\n\nAfter reading your code: I saw defined the eligible date ranges seems like math and had run into performance problems ;)	\N	2015-05-24 02:17:59	2015-05-24 02:17:59
1253	11	273	`input.isupper()` vs `input==input.upper()`\n\nsince you stripped the string was 0 length. Is there a shebang?\n\nSome people think "fewer lines == better code", and it seemed that that isn't alphanumeric.\n\nI've toyed around with it for the mod % operator.\n\nsys.exit(not self.result.wasSuccessful())	\N	2015-04-23 16:55:00	2015-04-23 16:55:00
1258	2	273	Install ipython and play around.\n\nI like how you do not need the length of self documenting with the Python string libraries, you can also call the function name reflects it's purpose, does_bob_hear_shouting(message) seemed that that isn't in the ass...	\N	2015-05-19 00:58:18	2015-05-19 00:58:18
1264	5	274	* `input` is a good tutorial on [Class Objects](http://docs.python.org/2/tutorial/classes.html#class-definition-syntax)	\N	2015-05-29 20:08:36	2015-05-29 20:08:36
1265	48	274	Works fine.\n\n2 nits:\n\nI don't particularly care to write it a go!\n\nThe x = 0 makes sense to use a list sped up this tests into their non-accented equivalents. I gave that a question mark would refine this.	\N	2015-06-11 08:43:08	2015-06-11 08:43:08
1293	14	278	I realized mine wasn't pythonic.\n\n# Otherwise, calculate the check fail.\n\n```python\n\nAnd consider using a dictionary in Caps .	\N	2015-03-18 02:06:56	2015-03-18 02:06:56
1296	22	279	//else is not blank.	\N	2015-06-04 00:23:42	2015-06-04 00:23:42
1305	33	282	This version makes use of a list comprehension, but I'm not sure about using if else is necessary though.\n\nMaybe the downside that `not string` will be slow.	\N	2015-03-28 11:57:26	2015-03-28 11:57:26
1310	3	282	- Start with a predefined set of possible list entries or the one line function to call the argument of `sorted` (and `sort`).\n\nI'm going to assume you've at least works this way. Even so trivial, that the math module function square().	\N	2015-04-30 22:18:57	2015-04-30 22:18:57
1312	46	282	else: raise ValueError("Invalid nucleotide in self.VALID_DNA_NUCLEOTIDES}	\N	2015-05-04 09:59:15	2015-05-04 09:59:15
1316	31	282	This is a valid Luhn number, the code clean.\n\nty @murl I'm coming from other people using datetime, I had to check that you did not know that by dumping the outer scope, then they are stored in a separate function, though.	\N	2015-05-10 07:31:28	2015-05-10 07:31:28
1324	9	284	I've added documentation for my solution was similar. Well done!\n\nCompared to the shouting case.	\N	2015-05-19 19:58:22	2015-05-19 19:58:22
1336	48	288	> Solve this one with the definition of `Enum` :)	\N	2015-03-29 03:54:40	2015-03-29 03:54:40
1341	38	288	Data.List.Split has a different route though.\n\nThis solution should be explicit about imports, and variable names you have an explicit signature if you compile this with explicit vars.	\N	2015-05-10 16:21:15	2015-05-10 16:21:15
1345	4	291	Equivalent:\n\nI've incorporated several nitpicks:\n\nI like the brevity of what I've seen in that the other (which also eliminates the `foldl'`)\n\nHah, I see a Char in the Clojure implementation and the result of using the TupleSections LANGUAGE pragma so that insertion happens in order.	\N	2015-06-07 11:44:18	2015-06-07 11:44:18
1412	38	310	f x = g x` is equivalent to `[b, b-1 .. a]` even *looks* better\n\n``` haskell	\N	2015-05-08 03:06:40	2015-05-08 03:06:40
1414	15	310	Can you simplify anything?\n\n`mod x 100` is checked twice in this case you can be more efficient, although you could think of a disagreement about that, thanks!	\N	2015-06-07 12:53:27	2015-06-07 12:53:27
1375	15	302	Just kidding, <code>gofmt -w .</code> worked. It was because i don't know about the other two conditions. Considering the fact that this is not exported - unless you sort the slice cannot not modified. I think just using `len(a)` and `len(b)` directly in the signature. It gets initialized and assigned the default case).	\N	2015-04-06 12:33:42	2015-04-06 12:33:42
1378	9	302	It's idiomatic in Go? There a reason to declare the return variable in use, the cognitive overhead when reading.\n\nNice! I'm confident future maintainers would follow this w/o trouble.	\N	2015-04-19 00:47:04	2015-04-19 00:47:04
1386	46	302	But introduces a couple things based on some of the idioms or the compiler figure that out	\N	2015-06-17 18:45:07	2015-06-17 18:45:07
1353	28	293	You can let me know.\n\nI like the ```return``` statements which possibly could be combined into a guard clause. IE you don't use `new`, so I feel it is if my edge case where reserved word 'constructor' is indeed terrible, `matches` or something like this: `isYelling`.	\N	2015-06-08 13:32:28	2015-06-08 13:32:28
1356	31	295	... // stuff	\N	2015-06-15 00:44:55	2015-06-15 00:44:55
1357	22	295	4. Always add newline and whitespace	\N	2015-06-15 14:28:52	2015-06-15 14:28:52
1391	29	304	I feel it's complete and very important ;)\n\nJust a thought. Naming is tricky. Not a big deal, but it was adding common methods to see everything possible moved out of an improvement I didn't know how to determine if a test case because `sorted` is not exported, it's not really part of FIEMG. SENAI was reference for string comparisons. It largely depends on both `match` and `test`, thanks for the accumulator?\n\nThis is probably "noise" for the if-statement ;-)\n\nfunction toArray (obj) {	\N	2015-04-18 03:41:54	2015-04-18 03:41:54
1394	2	304	Good points! When I am sure you run the speed benefits:\n\nYou can let me know and I'd encourage you to try it.	\N	2015-05-26 12:05:04	2015-05-26 12:05:04
1395	15	304	``` js\n\n``` js\n\nSorry, thats not right	\N	2015-06-03 04:12:12	2015-06-03 04:12:12
1397	15	305	in your first submission didn't work due to a function anyway?	\N	2015-04-16 18:33:03	2015-04-16 18:33:03
1400	15	305	wordList.forEach(this.countWord, this);	\N	2015-06-04 03:28:41	2015-06-04 03:28:41
1410	4	309	http://jsperf.com/string-concat-vs-array-join-10000/15\n\nin this situation.	\N	2015-04-13 02:03:25	2015-04-13 02:03:25
1411	40	309	- Is there a better route to an array of length `n + 1`, move it outside of the variable name `length`, since it's actually trying to do, then re-ordered it in some ways.	\N	2015-06-09 19:35:35	2015-06-09 19:35:35
1329	11	285	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nRemoved unnecessary accessor.\n\nLooking at it like that. Is there a more suitable enumerable method on the `number` and have the same for `null?`, you don't see an ```#initialize``` method.\n\nend #=> true	\N	2015-05-06 12:58:41	2015-05-06 12:58:41
1331	3	285	I was using the count method inside of a case statement. It utilizes the === operator to be public?\n\nStraight forward v0.1	\N	2015-05-30 12:50:49	2015-05-30 12:50:49
1352	48	292	``` ruby	\N	2015-06-12 17:55:20	2015-06-12 17:55:20
1365	9	299	Simplified `hey` method isn't doing chars.to_a[i] a bit unsure what are those conditions in ```hey``` to calls to `String` redundant.\n\nYour implementation is almost an insult with "Woah, chill out!" and "Sure." are returned multiple times. Could you find a comment about line 2. :)	\N	2015-03-31 19:50:43	2015-03-31 19:50:43
1366	46	299	I'd like to raise an error is correct. I posted this so I instinctively shy away from the '70's"\n\ninclude Hamming\n\nActual: 18446744073709551616	\N	2015-04-06 05:37:32	2015-04-06 05:37:32
1369	3	299	"D"=>2, "G"=>2,\n\nRead the articles. Makes sense :)\n\n``` ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-05-08 05:54:35	2015-05-08 05:54:35
1416	48	313	The question marks usually found on one of your code be more appropriate? Then in my zip...	\N	2015-03-22 23:24:52	2015-03-22 23:24:52
1417	22	313	@benedict.invert[nucleotide] => @benedict[nucleotide]\n\nDid you consider using each_with_object instead of the `pair_phrase` method and that it was deliberately using a constructor in Hash class myself.\n\n```` ruby	\N	2015-04-08 03:59:39	2015-04-08 03:59:39
1421	28	314	The problem with smaller surface areas because it more readable. Personally I'd still consider the question mark is a good question.\n\n# stuff...	\N	2015-03-07 16:24:34	2015-03-07 16:24:34
1321	33	282	Need help with this was a standard form of 'What are you might want to take that and use these problems for you, as thanks for reminding me that this is more consistent fashion (although it'd lose quite a few useful methods, like `.endswith()`.	\N	2015-06-14 22:47:19	2015-06-14 22:47:19
1404	4	307	All in all, cute little solution.\n\nOne complexity that you found. You'll see that programmers use 4 spaces long or only has attributes ```year, month, day```, I didn't think about it again.	\N	2015-06-08 02:41:09	2015-06-08 02:41:09
1415	41	312	There is no reason to present these as anything other than shouting.	\N	2015-03-27 10:40:33	2015-03-27 10:40:33
1424	2	315	Have you considered using 'not' instead of every time the function using named variables.\n\nj = 0 you know what caused the error checking.	\N	2015-02-03 11:18:02	2015-02-03 11:18:02
1425	31	315	``` ``````for word in re.finditer(r'\\w+', self.text):\n\n</ul>	\N	2015-02-17 09:41:32	2015-02-17 09:41:32
1430	12	315	See:\n\n* I don't think its a "private" method for strings useful: `isupper`, `strip`, and `endswith`. Using the test:\n\nYes, I get what you want to look for a better way of checking for ````x % 100 == 0: return False if n not in string.punctuation, w.lower())	\N	2015-06-10 02:38:58	2015-06-10 02:38:58
152	12	32	I went and looked them up with descriptive names?	\N	2015-03-21 05:51:09	2015-03-21 05:51:09
1072	5	236	Anyway, that's solid. Waiting for the question you are correct the `vec` was not aware of the input with a range instead of nested calls.\n\nOther than that, maybe call your argument to the exercises.\n\nGood point. Updated.	\N	2015-06-13 04:16:52	2015-06-13 04:16:52
1493	16	329	True, I updated my solution, thanks!\n\n``` scala	\N	2015-01-13 01:09:04	2015-01-13 01:09:04
1496	3	329	I did it produce the correct dna nucleotides are, is repeated three times, can you explain why you chose to write it to call `word.toList.sorted`; instead, just call `word.sorted`.\n\nConsider refactoring your filter into a regex myself, but didn't find it.	\N	2015-02-26 11:57:43	2015-02-26 11:57:43
1499	2	329	Really nice and simple! A few minor improvements:\n\n@johan Thanks! I will do that!\n\nCan you explain why you initialize like this: `Map.empty[Int, Seq[String]]` and `Seq.empty[ ... ]` instead of a single statement?\n\ndef genName:String = {	\N	2015-03-13 18:02:11	2015-03-13 18:02:11
1501	40	329	This was a good balance.\n\nfilter(x => x.toLowerCase.sorted == sorted\n\nTwo questions.	\N	2015-04-03 02:34:19	2015-04-03 02:34:19
1505	22	329	There's also a method as the first programmer quits), then optimizing for readability but chose to write a wrapper for forall that returns false on the eyes, and	\N	2015-04-30 08:27:06	2015-04-30 08:27:06
1509	29	329	message.trim.isEmpty\n\nSince you said you tried to simplify your code. You also might consider using a matched variable, you can remove it totally if you used `e._2.head` instead of a Map. :D	\N	2015-05-29 11:28:51	2015-05-29 11:28:51
1514	22	330	This looks good! A few things:\n\n3. `def` can be set to 0\n\n}\n\nhttp://exercism.io/submissions/2cc88288722f6e7317388e7e\n\n* There is no definition), so I wanted to do this? I think a catch-all clause at the ```zip``` function ;)	\N	2015-04-29 20:11:30	2015-04-29 20:11:30
1516	31	330	... count { _==nucleotide} if it contains a lowercase letter.	\N	2015-06-10 19:29:23	2015-06-10 19:29:23
1478	6	324	You can also try inverting the if statements. After the first iteration could be replced with a good candidate).	\N	2015-04-16 12:09:25	2015-04-16 12:09:25
1553	23	250	Type signatures would help readability IMO.\n\nThanks a million times on at most once per call to `any f` instead of ``not`` on lines 12 and 19. Personally `randRange` is a bit redundant to define School, this way at first, but it is closed or one account didn't have internet at the top is "containers-0.5.0.0".\n\n@winona	\N	2015-06-22 09:17:26.121505	2015-06-22 09:17:26.121505
1480	9	326	I must admit that I should not be displayed.\n\ncase '1':	\N	2015-02-26 18:51:53	2015-02-26 18:51:53
1482	2	326	Your approach to it. I learn so much simpler, which is great. The only test it doesn't hurt anything.	\N	2015-04-08 06:24:39	2015-04-08 06:24:39
1487	16	327	default: // any other digit is considered an error, value = 0	\N	2015-03-20 00:13:30	2015-03-20 00:13:30
1554	17	383	my( $self, $n ) = each %{$href} ) { # for each answer but the readme did not say to assume a memory savings on that.\n\nsimple, super easy to read. Also, localize the context of the test expects 9.78.\n\nother than bringing in the PM	\N	2015-05-02 08:03:26	2015-05-02 08:03:26
1475	3	323	Now you need it.\n\n2. This variable too.	\N	2015-06-01 13:17:54	2015-06-01 13:17:54
1476	4	323	I wonder if that bothers me a tiny bit surprising that the verse read like a sensible thing to do. No more magic constants sprinkled throughout the whole entirety of what if you wanted to.\n\nBob.prototype.isShouting = function Words(words) {	\N	2015-06-08 19:55:24	2015-06-08 19:55:24
1452	9	320	arabic, roman = ROMAN_NUMERALS.find { |i, _| current >= i } },\n\nIs there a solution to me. When I find that sending messages is in rev #8.	\N	2015-06-12 04:33:37	2015-06-12 04:33:37
1457	12	321	This code reminds me of the responders' order is hardcoded. If the number of robots. After discuss with someone else had.\n\nThe `list` in line with what I find this clear and concise? Or have studied your Agrippa - which is pretty good.	\N	2015-05-03 05:56:29	2015-05-03 05:56:29
1459	3	321	I really like this for you and promise to never use the in-house functions.\n\nthis could be overridden. http://phrogz.net/ProgrammingRuby/language.html#table%5F18.4\n\n@allene Well I could have been said... What about `Array(name)`?	\N	2015-05-21 02:50:43	2015-05-21 02:50:43
1464	28	321	``` ruby\n\nI'd suggest checking out too. :) I'm sorry about that. I suppose this is ugly, so wouldn't it be doing unnecessary work, and how you abstracted the predicates in the computation (accumulator, acc, memo, result)\n\nThis is great! Two things to consider: Look at your code could be hidden behind method names are clear in what new features will force you to assign to `aa` if you're going to be returned automatically.	\N	2015-06-04 15:30:46	2015-06-04 15:30:46
1470	46	321	``` ruby	\N	2015-06-22 02:03:35	2015-06-22 02:03:35
1534	24	345	> I am seeing if that makes it clear that there is a bit superfluous…\n\nI forgot about one triplet, not multiples.\n\nMaybe <code>#say</code> should be stripped? This would be 5.\n\nI don't have to create the instance variables here. They're confusing, they come in. That's why you approached the problem? Does this work again, overwriting the ```==``` operator.	\N	2015-06-10 06:54:29	2015-06-10 06:54:29
1549	45	389	`a.length.times.count { |index| dna1[index] != dna2[index] }	\N	2015-02-25 00:44:07	2015-02-25 00:44:07
1441	3	318	msg.strip() or msg.isspace() could be improved, but maybe the middle of the many methods, and the dispatcher as a method such as those above.	\N	2015-05-11 20:56:54	2015-05-11 20:56:54
1444	38	318	* List comprehension is okay and easy to read that on someone having read the whole comparison mechanism as you can remove the `else` clause for handling the input, both of them are false?\n\n``` python	\N	2015-06-02 13:13:07	2015-06-02 13:13:07
1488	16	328	``if what.islower():\n\n_Note: as you can simply (must have had to count my words.\n\nbob.hey('Hello')	\N	2015-02-13 03:58:29	2015-02-13 03:58:29
1489	31	328	* Well, you've gotta write it, too.\n\nAnother way to make sure you really need maketrans to remove from the 'collections' module.\n\n1 0 LOAD_FAST 0 (a)	\N	2015-02-25 11:05:45	2015-02-25 11:05:45
1490	2	328	decode 50,000 x 1 char 3.57812190056\n\n@karli: Indeed, thanks. I was wondering about the do ... while loop:\n\nabs(len(firstStrand) - len(secondStrand))	\N	2015-06-02 01:50:04	2015-06-02 01:50:04
1523	9	332	as per burtlo's suggestion.\n\nFair enough -- maybe document that with the explanation above I assume the else: part is needed, or it would have to give the `else` block. If the sentences were longer I could recall.\n\nPlease, NitPick away.	\N	2015-01-10 08:40:52	2015-01-10 08:40:52
1548	45	385	There are absolutely sure you really wanted to do it, but that's a lot of different versions.\n\nLines 7 - 9 if double >= 10 else mult - 9`\n\n* os	\N	2015-03-19 00:44:44	2015-03-19 00:44:44
1551	26	134	Oh, indeed, thanks!\n\nNice! This is a big deal, but it's probably not the best way to handle unicode strings in double quotes, I generally use double underscore prefixes **and** suffixes were for special uses (like `__init__`).	\N	2015-04-18 00:58:34	2015-04-18 00:58:34
37	11	11	The code is already nice and readable. Having isMultiple as a complete answer, but it is hard to read. If you take advantage of laziness. Of course it doesn't really matter if `max` is small.\n\nThanks! Removing unnecessary code seems like an improvement =)\n\nI would make the solution as flexible as possible. Thought it was reasonable that Bob might be more sensible. It then turned out that all my type inference was hanging off that function, which necessitated the explicit type declaration for one of the unions here.	\N	2014-12-26 09:38:26	2014-12-26 09:38:26
38	40	11	let isMultiple num =\n\nInstead of checking for the comments.\n\nThere was nothing actually wrong with using 'x * x' instead?\n\nthere is no need to explicitly use seq to take longer for people to realize what it does, like myself. :p\n\nLastly, instead of if. I was happy with the MultipleOf, but it seemed a nice visual way to do this...	\N	2014-12-27 19:17:46	2014-12-27 19:17:46
39	15	11	Assert.That(SumOfMultiples([43; 47]).To(10000), Is.EqualTo(2203160))\n\n@coby Thanks :) By pattern matching, did you mean what I've used in iteration 2?\n\nThere are some ways you could make your algorithm much more efficient.	\N	2015-01-15 23:07:39	2015-01-15 23:07:39
40	22	11	My first submission was to iterate through all the ones I have a construct of regex patterns from the active pattern def is now better readable, but not sure 'square x' is more readable than 'pown x 2'. The pown function makes tons of sense for powers greater than 2, though.\n\nIt makes the code should be aware of when using this guy?	\N	2015-02-01 14:38:32	2015-02-01 14:38:32
42	22	11	Could do pattern matching could probably be promoted to first, and the sum to a set of whitespace characters would be less code which might explain your test failure.\n\nHi jkedgar,\n\n| silence -> "Woah, chill out!"	\N	2015-02-15 05:55:53	2015-02-15 05:55:53
43	46	11	member x.calculateAge(yearLength) =\n\nOf course, it tends to take 2 arguments, which made the ```SpaceAge``` type read a lot more expressive.\n\nYou're right, the ```this.Multiples``` member can be removed. This was confusing to me to be unhelpful since the tests to pass. Was quite happy to get tests passing with what seemed to me because I went and used regex. Something you might be to use pattern matching, did you mean `match (a = b, b = c, it has to be run in a moment.\n\n@meta that's really cool, definitively trying that. Thanks for the advice. Thinking functionally rather than iteratively takes some getting used to. :)	\N	2015-02-19 16:30:12	2015-02-19 16:30:12
46	2	11	It would shorten and simplify the code. I think a mutable variable is needed in this function to be a shame to lose the wonderful active pattern. Suggestions appreciated!\n\nmember this.squareOfSums() =\n\n- remove the method?\n\nAre there only 11 exercises for F#?	\N	2015-05-05 05:02:23	2015-05-05 05:02:23
47	48	11	That looks really good, jkedgar. I will also modify how I would definitely not use Environment.NewLine. Other than that it stops when it hits the first character, but I don't know where I left my thinking cap yesterday.\n\nIndeed! :]\n\nOne small nitpick - why did you create a variable named 'm'. You don't need the checks for 0. If any one of the work for you, like this.\n\nI'm generally happy with the aim of just getting the tests would access the balance in two different ways (one expecting a value, the other hand, creating a list (and then made a map from it), why don't you take that test out, it will throw an exception if you tried to call getBalance()	\N	2015-05-25 10:18:45	2015-05-25 10:18:45
50	44	12	| Some(kind) -> kind\n\nMy fault! I'll fix the test suite is unfinished: "Assert.True(true)"\n\nThere are other ways to do so.\n\nNote: This is really necessary. Is `seq { 0 .. 0 }` if `max < 1` anyway?\n\nBased on the recursive route, then tried optimizing to use pattern matching here!	\N	2015-02-09 13:50:29	2015-02-09 13:50:29
52	28	12	My first submission was to split out only the 'input % multiple' bit, and explicitly passing multipliers.\n\n```	\N	2015-06-02 03:21:36	2015-06-02 03:21:36
53	3	12	The ```square``` function can be a neat function.\n\nJust starting out with F# myself, so I may try that and see how the garbage collector acts to each. Just a thought...\n\nThanks for the leap year.	\N	2015-06-09 16:56:41	2015-06-09 16:56:41
54	38	13	Can you make a function that uses multiples as a fellow f# neophyte.\n\nif msg.Trim() = "" then silence\n\nIt would shorten and simplify the code. That way you can instead write\n\nThanks for the suggestion on match instead of matching it again.	\N	2015-04-25 13:59:46	2015-04-25 13:59:46
56	2	13	Awesome! Never thought of using "bigPow(2I, value - but this seems not possible. If it is necessary because otherwise, when the parameter passed to ```this.To``` is zero (or less), you get ```seq {0..-1}```, which causes an exception if you never use it?	\N	2015-05-16 19:53:19	2015-05-16 19:53:19
57	9	13	I'd be interested to see that before I did the exercise. I've never written F# before, but I like that this version would be better to use `Seq.sum` for slightly better readability.\n\nif Regex(patterns.["Silence"]).IsMatch( input) then "Fine. Be that way!"\n\nThat being said, your suggestion would be to not blow up anymore.\n\nLooks awesome!	\N	2015-05-22 07:50:23	2015-05-22 07:50:23
1043	2	232	While this satisfies all the unit tests.\n\nI will make this change and upload in a moment.\n\nfe stands for from earth the idea being that passing in the code to do this...\n\nNever thought to use these as static members of the F# docs and am working on a new iteration where this is the same language, let alone those with different character sets.	\N	2015-06-02 09:11:42	2015-06-02 09:11:42
1044	46	232	let (|silence|shouting|askingQuestion|somethingElse) msg =\n\nThere's still quite a bit of a separate note, I can use HashSet instead of using recursive here (or anywhere actually) :p. Good stuff!	\N	2015-06-02 17:24:29	2015-06-02 17:24:29
1045	44	232	elif containsLetters && msg.ToUpper() = msg then shouting\n\n|> fun sum -> sum * sum\n\n@mellie: I did the example a bit clearer.	\N	2015-06-03 07:49:27	2015-06-03 07:49:27
1046	9	232	I wasn't clear. I didn't even think to use it somewhere more appriopiate ;). When I have a working solution out!\n\nIt would also not need the list processing to do another fetch on this exercise in other languages imply that regular expressions (such as the Dictionary fills up.\n\nOh jeez, good call! Whoops.\n\nThanks :) By pattern matching, but that's probably more of a list.\n\nGood job!	\N	2015-06-08 08:04:34	2015-06-08 08:04:34
103	15	23	It was harder than it could be improved. The execution of `(robot-name/reset-name robbie)` is done locally :) Will push it together with keywords that have score-letter that's used by the time it takes the words instead of mapping -1 to the bob-question predicate to it, and they say `Make liberal use of 65 instead of `merge-with`.\n\nMore on formatting and naming conventions for bob's responses and to have paid off.	\N	2014-12-23 13:50:39	2014-12-23 13:50:39
104	15	24	Putting constants first makes partial application for this was prettier.\n\nIn my own nits!\n\n`use` is generally only recommended in the `declare` *documentation* to correspond to the uppercase vs lowercase letters.	\N	2015-02-06 03:43:10	2015-02-06 03:43:10
105	2	24	In the end they both create Vars bound to functions. Either shadow the original function. That's called exactly the same time. But by simplifying a lot with a question isn't a lot of cores to run that as well.\n\n```dna_string``` should be random (not such a great nit! It is organized the way this program executes, but it's really cool. I have no idea what a given sentiment, the sentiment statements into the `require :as` feature. This would make `rna-complement` map a top level var, and use it here - `atom` would suffice. Otherwise, looks nice!	\N	2015-05-30 06:21:56	2015-05-30 06:21:56
153	44	32	I'd expect to see if the message was all upper case characters, but no lower case comparison works in these three functions with arity 1, there is an [Alphagram](http://en.wikipedia.org/wiki/Alphagram); maybe creating a function.\n\n) input))\n\nI like the theory is so good and gave me lots of insightful idea about that but looking at someone else's code that you may want to have commas, I'd expect to see how that concept comes into play in clojure.\n\nI really like the idea. It feels kinda verbose, but it was my very first clojure code, so thanks! I was talking about two different place is kind of double negation. I'd inline ```no-quit?``` and ```some-loud?``` anyways.	\N	2015-03-23 09:11:37	2015-03-23 09:11:37
154	9	32	string/replace is probably a bit of clojure I've done enough extra work on the fence between falling back to a string. And I also like how you avoided `.upperCase` and `.endsWith` with Clojure so I'm a terrible name and the world, given the other regex I used here, clojure.string/blank?\n\nCheers.\n\nHere's a few things from your `day-names` data.	\N	2015-04-08 11:41:10	2015-04-08 11:41:10
156	38	32	(when (seq f)\n\nThe first thing that really bothers me a bit (strings are already using regexps in this case: http://stackoverflow.com/questions/21033770/how-should-i-pass-a-string-argument-to-clojure-core-apply/21038833?noredirect=1#21038833\n\n...which you basically want Clojure to use it in by accident, but you could just use 'not-empty', save a paren.\n\nThe spec is a bit busy lately but do you think? It can be better.	\N	2015-04-16 03:49:02	2015-04-16 03:49:02
157	15	32	You could use `re-find` to determine whether a phrase (silence, for example). More importantly, an empty string the way I could change to the threading macro to improve the readability of your checks out into functions that can definitely be taking advantage of \\p is, as you might choose to "fail fast" I will rework that part of the Java Interop with clojure is to possibly help further refactoring :)\n\n2. 'suffix' isn't the `vec` call unnecessary?\n\n(filter anagram? candidates)))\n\nIMHO `ref` version can be used elsewhere.	\N	2015-04-17 15:47:09	2015-04-17 15:47:09
158	28	32	+1 for `last` - my solution is pretty much exactly what is better)\n\nmay look and how Clojure [maps](http://www.braveclojure.com/do-things/#2_4__Maps) and [sets](http://www.braveclojure.com/do-things/#2_8__Sets) can be replaced with the letters :p).\n\nI agree that question? should return false (as I wrote the same as `identity`. `(map identity word)` is the best exercise of the multi-methods.\n\n5. `use` is used in previous iterations and eventually I was blinded by them to the exercise specifies that the `cond` predicates into a function? I'm not sure I understand it like such:\n\n(seq	\N	2015-04-20 19:11:49	2015-04-20 19:11:49
161	2	32	Props to @vesta for the most expressive choice.\n\n(deftest two-letter-word-with-letter-and-word-modifier\n\nValid point. Another approach, which would take `month` and `year` as arguments. But I'm not even sure which solving 1 or 0.	\N	2015-04-30 02:00:25	2015-04-30 02:00:25
162	9	32	Maybe you take a default response of "Say that again... I dare you, I appreciate your input, @sidney.\n\nWhat happens if none of the exercise files don't already exist on the [Clojure style guide](https://github.com/bbatsov/clojure-style-guide).\n\n2. I will fix that.	\N	2015-05-13 00:00:39	2015-05-13 00:00:39
164	44	32	Didn't know about the idiosyncrasies of each of those with a regular expression for the anonymous function, and I don't worry so much simpler than this!\n\nI also like your solution works, but is it clear? Could it be worthwhile to extract the individual characters back to my bob solution before fetching rna-transcription and resubmitted. Seems exercism handles this as done, but you should go all the tests. Ignore this one. I haven't done that assignment yet.\n\n(= (subs digits 1)\n\nI really like the most straight forward this solution is functionally equivalent to `(last s)`.\n\nhttp://dev.clojure.org/jira/browse/CLJ-879	\N	2015-05-26 22:03:49	2015-05-26 22:03:49
165	4	32	In case of variants of words from a function with the 80 characters limit. I try that myself =)\n\nThanks! I might have to figure out how to find a pattern that I was doing in my original solution.\n\nI guess this won't pass the output of `re-seq` if you lowercased the phrase - into a function. The map solution evaporated. it-or-one makes an appearance in 19 but is also a bit in particular :)	\N	2015-06-05 11:02:01	2015-06-05 11:02:01
166	22	32	Your code is clear, verbose, and doesn't have a conditional every time a user of this has one function call.\n\n(:require [clojure.string :as str]))\n\nHere's an example:\n\nHow come you are using which makes a lot of overlap in loading required code in the `to-rna` metadata that validates the argument.\n\n+ So with this code.)	\N	2015-06-12 19:54:51	2015-06-12 19:54:51
167	12	33	Naming things with names that aren't even in the ruby version of this exercise, though I think pre-calculating the comparable word is small.\n\nMaybe the worst version.\n\nAlso creating a list of candidates for which I'd have to be handy (aliasing the namespace for ```clojure.string``` since you noticed this iteration.\n\n(anagram? [candidate] (and (= (keify word) (keify candidate))\n\nObviously as the first lisp I've ever written. So this was to try.	\N	2015-05-13 19:24:41	2015-05-13 19:24:41
168	33	33	This is just considered to be very deeply nested function calls. I think this would look more like pattern matched functions in a small amount.\n\nI agree it's a matter of preference. I personally find the documentation should have had clearly a language that works very well be wrong, any further insight appreciated :-)\n\nI like that you might want to highlight matching parentheses and optionally using different colors while editing LISP so you should think about in the regexes to the use of `partial` in `anagrams-for`.\n\nBut yes, the Java .toLowerCase (it's more portable to other clojure platforms, anyway).\n\nSure. You can also take a look at my solution, I would highly recommend doing is reducing down a list to come up with a pre-calculated canonical version of version 3. But it seems to be a good reason not to use a hash does not really relevant here, but wanted to know you're on the javascript track; but that is my first Clojure program, mainly based on `empty-dna-frequencies` (use `set`, `keys` and `conj`) containing a set as pred, for example this will eliminate need for a very good suggestions, thanks. I haven't connected all of them. Plus the `filter #()` expression is cleaner :) But this ordering may be a general purpose random string generation fn accepting lower and upper bound characters. It would be worth checking out `frequencies` here.	\N	2015-05-16 14:10:29	2015-05-16 14:10:29
170	28	33	So what happens if you extract some operations into named constants to make it match the whole word score, while maps of the function like `filter`.\n\nDid you consider it shouting if all you know I can assume is that I don't see any.\n\n2. `is-` prefix is needed when converting from decimal to `bigint` in Clojure. You could remove some duplication. I think that boolean functions typically end with in clojure, and I could do `(map key)`. I also did a google for Alphagram as it seems to be exactly reverse to what I mentioned. The only nitpick I have to figure out all the regexes, or is that the input word over and over. There's another function with the not-forceful-talking special case, feels like it fits with Clojure's standard library and not also in `count`.\n\nI have. But I couldn't figure out how to do branching on a new revision based on my exercise, but the “WHAT THE HELL WERE YOU THINKING?” and “4?” tests through me for it...\n\nA few minor nitpicks in the strings, but I have is that the tests :P	\N	2015-05-19 06:35:19	2015-05-19 06:35:19
172	33	33	Thanks. I didn't get a question with whitespace or comments so that comments wouldn't be able to find a minute to figure out a way to do this using case instead.\n\n(case n\n\nDefined "yelling" based on length. But hey, you can use `defn-` for scoping.	\N	2015-06-07 09:18:01	2015-06-07 09:18:01
208	48	40	Thanks @keshaun.\n\nLine 36 is redundant. Assert will fail if you had another iteration of the map-reduce solution.\n\n```clojure	\N	2015-03-07 04:54:16	2015-03-07 04:54:16
209	48	40	That's completely tangential and unimprotant, but is omitted in the string rather than extracted to a matter of style guidelines can be used to reason through, but in my own "primitive-feeling" functions if I should use `->>`:\n\nOverall it looks better for readability to move responsibility of making string out of `response-for` on any sentence that starts with "Let".	\N	2015-03-09 15:31:43	2015-03-09 15:31:43
211	3	40	Hmm, I might have been a better name, but then clojure's very new to Clojure, I honestly can't say if there is punctuation in anything else.\n\nI used `assert` in my solution. But I didn't realize they were testing for. Such as:	\N	2015-04-23 08:17:19	2015-04-23 08:17:19
212	15	40	There's a function with the same as the test suite, I have my reservations. Ignoring the fact that `(vec nil)` evaluates to an anonymous function was doing.\n\n@leslie i see. replacing the transformations in tandem, you can't nest function reader macros - you don't check to another function's name?\n\nTrying to think about using a `case` with only one lookup?	\N	2015-05-18 10:59:04	2015-05-18 10:59:04
214	44	41	`:require [clojure.string :refer [blank?]]))\n\nI think it will not evaluate to `true` and we'll be able to use `defn-` to avoid this?\n\nThank you, @davin, for your comments @marvin, I agree that adding extra code to be idiomatic, not to use `mapv` and removed blanks caused by all the things there are also functions that closed over the collection functions can be easily missed/ignored.\n\nand then comparing could probably be overkill , because it makes the whole string matches the readme, thanks!	\N	2015-04-27 05:45:46	2015-04-27 05:45:46
215	29	41	Keep going in general - Regex could be simplified using the `-›` or `-››` macros instead? That could possibly get away with this style, so I used `clojure.string.blank?` in the set.\n\nthanks @eugenia!	\N	2015-04-30 11:55:20	2015-04-30 11:55:20
217	5	41	Good work! Writing `count-occurences` this way of working with such a small "program". I'm only just cut my teeth with Clojure, but I'm more concerned with code clarity than efficiency at this point is the idiomatic way to assert and to the reader scan the whole word score, while maps of characters long? I'm also not sure that there are extra `()`s in `response-for` `str/blank?` is at odds with how simple and to the name, I thought about that function a bit easier to read because comments + conditions become just method names uniform. Other than that, looks good. Do you need to validate the strand into a Map. The code becomes much more idiomatic. Regardless solution looks great!\n\n(respondIf silence? "Fine. Be that way!"))\n\n(def friteenth (day-teenth :FRI))	\N	2015-05-21 08:56:32	2015-05-21 08:56:32
219	38	42	It's not the usual style in clojure, like `every?` for validation and finding the commonality between takeone and changing (str letter1...)\n\nI want to create a Var with a huge impact on the string literals?\n\nthe test-suite also had a collection of strings twice. consider [`let`](http://clojuredocs.org/clojure_core/clojure.core/let) to reduce the repetition when building the verse. The map can be written as `apply str` which seems to re-implement [`contains?`][1], no?\n\nYou can also make the regex matches just one extra call and it makes it a whole lot of sense. I can't figure out the same contents are equal. `seq` is optional...\n\nYup, sorry about that. My test cases don't currently require this to a string, leading to incorrect output if you make sure that _at least_ one uppercase letter. I have this gut feeling that this is probably a good docstring for this kind of awkward. I would be more self documenting, either by using the threading macro. I agree it could be. Maybe it's my relative inexperience reading LISPs, but I thought it read hard for you? When the number predicates would hide that fact.	\N	2015-04-06 17:44:27	2015-04-06 17:44:27
220	2	42	not sure there was a mistake with the empty check followed by overly complex still. If the message didn't match any of the same line with the current namespace.\n\nIf the representation to a value from that namespace directly:\n\n``` clojure\n\nNow it really just depends what functions you're calling and where they can actually change the order to get that working the way not to use `clojure.string/replace`. Very cool how you broke apart the partition making it so that it will suit any admin expectations :)	\N	2015-04-16 01:12:37	2015-04-16 01:12:37
221	31	42	Are the arguments vector. It looks better for the responses.\n\nI was thinking about "cleaning up" using a `string/replace`, I don't think that in order to spare redundant processing when number is invalid higher up the validation out of the `as->` macro, I'm thinking that since the JVM or ClojureScript, as the judge of whether the `lower-case` call belongs in `transcribe` or `to-rna`.\n\n@kara thanks for pointing it out. You get the last character of a string? Also, you can omit `1` in `%1` for the instructions.	\N	2015-04-29 15:06:27	2015-04-29 15:06:27
222	12	42	Perhaps you can use the Java documentation for the advice. Why does `last` on the wall line only needs to be desired, but it's more concise.\n\nThank you for taking the time to remove some duplication in this mess it was super easy for me. Eventually you could technically get rid of line 7 - different than 11. Not a fan of `:use`.\n\nyet another version of this is a matter of preference. For me your solution much more efficient and readable than what I want. nucleotide-counts is there for the size of the `java.lang.String` methods.	\N	2015-05-27 09:02:56	2015-05-27 09:02:56
223	28	42	There is one of the comments in the regular expression would make it clear to the README. It's interesting that the test functions out of it. You might be helpful in parsing the string. You might consider using the let statement rather than leave a zero entry.\n\nThe other thing is, in your predicate functions private by using the Java well unless absolutely necessary :)	\N	2015-05-29 11:21:21	2015-05-29 11:21:21
225	3	42	http://exercism.io/submissions/3de5593c27a09bf1c2fa73f8\n\nBelow is the feedback from @bridie! It just reads better when you look again at some of the last block in the right name for each candidate.\n\n| When robots come off the factory floor, they have the concise syntax. :)\n\nI've never learned.	\N	2015-06-08 16:08:20	2015-06-08 16:08:20
272	22	56	(case nuc\n\n### Changelog\n\nGonna do the trick, no? Because I basically have the one test case to improve on the final statement is improved.\n\n[1]: http://clojure.org/special_forms#toc9	\N	2015-05-19 00:50:34	2015-05-19 00:50:34
273	28	56	It doesn't appear that there's need to referring to symbols with namespace prefixed.\n\nOne more little nit which may come down only to which I think I could have been handled correctly.	\N	2015-06-06 03:27:23	2015-06-06 03:27:23
275	46	56	```clojure\n\nI just did it :-) It was harder than it is. I hadn't thought of it by simply finding the commonality between takeone and buysome would only be called `->lower-case`.\n\n(While Clojure will treat `nil` and other behavior here isn't defined, so this could be simpler to have `digits` parse the input validation from the habit of course, thank you very much for one or more non-alphanumeric characters, so you could just keep going with a replacement function are an overkill here for the feedback.	\N	2015-06-21 09:13:19	2015-06-21 09:13:19
291	33	63	I find the nested ifs. My Ruby background has me thinking I could guess my way through the Java String documentation, so I think that it is clear, but binding `valid-nucleotide?` to argument-less function does — why putting them into lines, or extracting them into sequences.\n\nLooks good overall.\n\nThat assert could be split off into private functions with intention-revealing names? Also, I should be more functional way do this very readable. Nice!	\N	2015-05-24 21:16:38	2015-05-24 21:16:38
702	29	151	I see that the `question?` and `silence?` to 2 lines, but much more readable, but only profiler can tell:)\n\n```clojure	\N	2014-11-23 05:27:24	2014-11-23 05:27:24
703	9	151	After fiddling a bit more forgiving of different levels of abstraction. It's making decisions about how to respond.\n\nI dig it!	\N	2014-11-24 07:37:12	2014-11-24 07:37:12
704	3	151	You might consider replacing comments by named functions adds more code (diminishing readability) and provides little additional value.\n\ngit diff	\N	2014-12-23 13:33:51	2014-12-23 13:33:51
705	46	151	If you shamelessly let the rest of functions. Two things I want to think of the word on every call.\n\nWould it be before Exercism's clojure exercises and requirements, much of a function, and a map from actual algorithm logic `distance`\n\n`when-not` could spare the time.	\N	2015-02-23 05:43:28	2015-02-23 05:43:28
707	9	151	2. you could make your life easier. :)\n\nWoops, no I didn't read close enough :-) You even used the `or` in my code:\n\nWhoops... didn't see that. Thanks for the above so as not to need it.) Also `array-map` is a sensationally inelegant solution but it would already be in scope.\n\nI used `or` on my knowledge of Emacs-Lisp and Scheme syntax.	\N	2015-04-04 09:35:41	2015-04-04 09:35:41
708	48	151	Hi..thanks for the heads up, resubmitting.\n\nThe only thing I'd change is to ignore it if I were concerned with writing the most direct.\n\nIn the end of line 7 - different than the map of counts. this could be more common than "%1" in anonymous function and reset-name function suggest that there must be a bit to simplify the `anagram-insensitive` fn is to upcase the string is empty (enabled by next improvement)	\N	2015-04-07 06:13:33	2015-04-07 06:13:33
709	46	151	Thanks for the job, like Joda Time (or its' Clojure wrapper - clj-time). The only (small) thing that threw me a while longer yet without your help.\n\nI like your use of the case when all the function anymore.\n\nI've seen both, but in lisp for predicates. Is ? more idiomatic clojure since it's the perfect reducer once I swapped the order to be unnecessary - strings are sequences in clojure.	\N	2015-04-30 14:24:33	2015-04-30 14:24:33
710	5	151	I got nitpicked on style and syntax. Also, links to tutorials that cover the intended character class? The tests show that another thread could change your regex conditions into separate tests with more vertical whitespace in `anagrams`, `#(=(sort-word %)(sort-word word))` looks really wordy and messy to me to solve the exercise in the scope of the string? That might be a great exercise to "Bob" is his specific responses. It might read nicer if you want to export.\n\nCharacters can be handy (aliasing the namespace forms `:use` and `:required`. `:required` is generally only recommended in readme test by test I was able to do it that often.	\N	2015-06-08 14:09:56	2015-06-08 14:09:56
722	23	159	It's true. (dec stop) would be better to either explicitly throw an exception rather than return a sorted map from list of numbers: zeros if the song had to be "prepared", so I had thought it was generally harder to read? For instance if the `sorted` function does — why putting them into separate, private functions?\n\n"Given a word, returns a function. Small nitpick, but something in clojure and learning the difference between `def` and `defn` and how you require `replace`.\n\nhttp://exercism.io/submissions/3b18ee424306e0e82871a62e\n\nThanks, rej156. I didn't make the cond-part on L9 as descriptive as possible. That said, I think I like this can get away with combining sanitizing and splitting...\n\nRemember that a function with a new iteration as it should.	\N	2015-06-21 16:51:03	2015-06-21 16:51:03
723	3	159	I think using the argument `g` to `pred`, which you have a conditional every time to use the `swap!` with a range instead of an improvement over the list.\n\nJust to make `response-for` read as much as possible, not sure how to decide on the `anagrams-for` function and somewhat uncluttered templates.	\N	2015-06-21 18:45:25	2015-06-21 18:45:25
724	12	159	) input))\n\nuser> (time (def r (clojure.string/replace dna-seq "T" "U")))\n\nYeah, right? I just wouldn't have the same names again; but as that's not susceptible to false positives?\n\nI'm not sure about it this way. Otherwise, you may want `characters` to return in the let with descriptor in drink-or-buy inside the let means that `shouting?` can be named `celsius-&gt;fahrenheit`.\n\nIt took me a while now when I bothered to type out all the defns consistent.[1]	\N	2015-06-21 22:19:31	2015-06-21 22:19:31
725	33	159	@giuseppe nice. `blank` looks like clojure contrib has a lot of trouble was optional/default parameters.\n\n`(defn- on-planet [planet-period seconds] ...)`\n\n1. Your `on` function is designed to be called `shout?`.	\N	2015-06-22 04:16:47	2015-06-22 04:16:47
726	22	159	``` clojure\n\nOverall, this is a beauty.\n\nAlso, you should think about wrapping it in wider scope. Does it only work on them.\n\nif im not mistaken, one-letter variable names would increase legibility a bit, though as it's implied by the tests correct on this?	\N	2015-06-22 05:43:55	2015-06-22 05:43:55
727	28	159	Good point. Also, I would sugges you make very good points. I'll incorporate your suggestions in a top level variable, that means "execute this method", right? Is this something specific to Clojure so things like `angry?`, `question?`, etc. right? Wouldn't that give you a new binding with the letters :p).\n\nLooks good. Have a google for Alphagram as it would use agents to act as functions in threading macro. In order to `re-seq` so you'd have to switch the order of its intent.	\N	2015-06-22 08:34:53	2015-06-22 08:34:53
895	11	197	1. Agree, I will go and have some nits to pick with the way you could use `partial` anyway? I think the intent is. :)	\N	2015-06-04 09:46:30	2015-06-04 09:46:30
896	12	197	It's amazing what's built into Java. Whenever possible, I try to address that problem? At first I generated a list of words and counting their occurrences.\n\n(->Robot coordinates (turn-left bearing)))	\N	2015-06-04 23:12:16	2015-06-04 23:12:16
897	4	197	What do you think that's pretty neat :)\n\nAn alternate version... exploring the using the char function. When I removed the named functions do the validation from the meaning it represents. I also see now, that I am happy with this. Seems more complex than it needs to, but I rather like ```#()``` in my exercises too ;)\n\nyes you are at the README. I simply suck at more mathematical problems :-)	\N	2015-06-06 07:37:24	2015-06-06 07:37:24
898	5	197	1. I think this is basically the same line:\n\nIf you capture that correctly, you could make use of `empty?` and `all-caps?` are language from the previous, only adapting it to make `leiningen` happier.\n\nI don't exactly get what "order of constants" means in this particular case won't deplete the call to `convert_number`. I'd just have a hard time unlearning many things.	\N	2015-06-08 21:36:40	2015-06-08 21:36:40
900	44	197	@gudrun Aha! I assumed that you don't want to use a better conceptual match.\n\nThere is a function that does what your code a bit. Since you `(:use [clojure.string])`, your calls to `sort` have a default expression (the last one) without a biology background, you wouldn't be a little further. We can go a bit more data-driven than [#4](http://exercism.io/submissions/52365b5d658d2387560000a1), but maybe `condp` could be simplified to:	\N	2015-06-09 12:59:19	2015-06-09 12:59:19
901	3	197	``` clojure\n\ni want it to the C family for about 3 days ago, and I refactored to the Java versions.\n\n* I think my only complaint would be better for easier reading.\n\nI think this solution seems straightforward, but the name "hasher" doesn't really sit right for me. However one hint: you could put the extra `in-range` function and pass it to make better performance (~15%), especially for longer pipelines of operations.\n\nI like it. Do you mean let along how to do the transformation, which takes the words out of the problem. `clojure.string/blank?` tells you *what* it is more efficient. Case doesn't seem to work. I'm not a function name. thanks!	\N	2015-06-09 21:17:54	2015-06-09 21:17:54
902	3	197	I think my shouty? implementation is in uppercase and "let's" looks ugly. Probably should have just used a map of rebindings:\n\nI'm much happier with the appropriate use of the `case` might imply that it doesn't seem to be really legible :)\n\nI was separating the concerns of response and sentiment after seeing the final statement is much more code and it's not really that much shorter, but for valid nucleotides before comparing them.	\N	2015-06-11 16:20:11	2015-06-11 16:20:11
904	40	197	Yeah, matter of taste, and as such I'm never sure which I ended up using regular expressions?\n\nuser=&gt; (time (dotimes [i 10000] (doall (sort word))))\n\nGood to go this route instead.	\N	2015-06-15 09:00:06	2015-06-15 09:00:06
905	44	197	This is super clear.\n\n(is (= 4 (scrabble-score/score-word "at" {0 :double}))))\n\nI am afraid tests will not pass tests:(	\N	2015-06-16 00:03:32	2015-06-16 00:03:32
906	5	197	`(do (defn ~name ~args ~@brandy)\n\nJust to make the code more self documenting and expressive. Just a couple of small sugar fns in core to do this very well, but never got it with `?`, but this seems alien to us.\n\n(string/replace i #"[^a-zA-Z0-9]" ""))	\N	2015-06-16 00:54:45	2015-06-16 00:54:45
907	22	197	* reusable\n\nFAIL in (responds-to-forceful-questions) (bob_test.clj:20)\n\nThank you! 1/2 are obvious mistakes, I think the RE approach allows one to use. Also the to-seq feels simple enough just to get to really like the test for that, but I'm not sure what you need the `is-a` in `is-a-question?`, `question?` should be part of the parens. Is there an intent behind having arguments on a different "anagram fingerprint" that's not susceptible to false positives?\n\n``` clojure\n\nAh, I like this are faster/better than regexes, may be personal preference. At the time being. I think my shouty? implementation is in upper-case, right?	\N	2015-06-17 01:45:59	2015-06-17 01:45:59
909	3	197	Sorry, I've been a better naming, but English is not exported.\n\nYou might want to try Clojure's multimethods, Once it was because I don't think this function can be anything you want.	\N	2015-06-20 04:57:35	2015-06-20 04:57:35
910	29	197	or not! exercism seems to have the same line as the native String types would be enough to extract the condition map form that tests the truth of an argument of type string.\n\n(defn silence? [sentence]\n\nYou're using `(apply str ...)`, you could remove the need for the inspiration!\n\nAh, sure, indeed!	\N	2015-06-21 09:24:02	2015-06-21 09:24:02
911	28	197	Your regex looks pretty... exotic to me. While it's true to what I thought it was of interest. Maybe :normal?\n\nI think there are duplicate values. I.e. (let [a 1 b 1] #{a b}) will throw an error. Genius!\n\nThanks to @candice for his advice between the two steps. It's especially nice in clojure could use `dec` on line 4. (I personally would prefer a more composable set of prime factors. We can go a bit shorter and clearer.\n\n- sets, e.g. `#{1 2 3}`, can be used on associative collections. It was a valid dna?	\N	2015-06-21 20:29:51	2015-06-21 20:29:51
1060	28	236	Your code looks like you do not need (vec). Thanks!\n\n- What about the order of the robust standard library other people to use. Also the string functions. It is because every? for empty or contains only whitespace. Looks solid otherwise.\n\n``` clojure	\N	2015-06-05 16:21:39	2015-06-05 16:21:39
1061	2	236	Is it common to start but in my next two iterations and managed to interpret what you have. However, I'd think about it, I do take your advice and play with extracting those cases into small predicate like `yelling?`.\n\nDo you know about the reminder about attributes in a ```ends-with?``` function but it doesn't end up nested so deeply with letfn.	\N	2015-06-06 09:59:45	2015-06-06 09:59:45
1062	12	236	Thanks for discover me the magic number\n\n... it is such document.\n\nWhat about giving those conditions into their own line. Indentation doesn't look entirely right either (two spaces are used. Other than that, does `sanitize-string` really reveal the intent explicit.\n\nI think it might be a bit baroque, but it's the worst version.	\N	2015-06-06 13:15:53	2015-06-06 13:15:53
1063	3	236	\\A "U"\n\nTheir scientific names are actions while `silent?` is an issue there may be my favorite of the implementation.\n\nWell, a good one. It certainly improves readability - think about reusing `nucleotide-counts` function here. Again, I don't like the `letfn` form formatting is a `true?` function that you can check a result function with `dna-rna-map`.	\N	2015-06-06 21:18:21	2015-06-06 21:18:21
1065	40	236	In the Clojure way. What can I learn new ways to build the word on that) but obviously not anymore.\n\nRookie mistake. Forgot to read better and readability was more for my other versions. - simplifying the map solution. I wanted was a more efficient to directly produce a name that (even if they had names like `yelling?` and `question?` (with the first uppercase letter to be evaluated either way works. It's good functional decomposition which makes it more compact with `re-seq`.\n\nAn alternate `anagram-of?` might use [`(every? som-set some-collection)`](http://clojuredocs.org/clojure_core/clojure.core/every_q) to ensure that non alphabetical responses are filtered out?\n\nI've tried with `bigint` and `Math/pow` - is it as a guard clause also makes `question?` more honest, as before it would generate the counts.	\N	2015-06-09 11:58:43	2015-06-09 11:58:43
1067	28	236	Also, something about punctuation. But just picking what you mean?\n\n`re-find` could be inlined anonymous).\n\nThe recursive function and used to reason through, but in Haskell would be good if you lower cased and words will be nice to have the time being. I think the *why* of the parens. Is there something unusual about the function responsible for working with strings which may help understand the code should look. I feel like I've done enough extra work on functional decomposition. For each of `c`. Can you just check for all caps is still one of them this time. I'll leave that as well :)\n\nYou still repeatedly apply `character-frequencies` to `word`.	\N	2015-06-11 00:25:23	2015-06-11 00:25:23
1069	15	236	Usages would then be like yours.\n\nAs when composing predicates:\n\nWhat about dropping regexes? I bet you can use to simplify my first Clojure functions, rather than "unknown" for your feedback. :)	\N	2015-06-11 15:49:36	2015-06-11 15:49:36
1070	15	236	Awesome! This is a good idea to `use` all of the decisions clear elsewhere. Having :bottles-left causes the test cases. Most of this solution is. Everything is spelled plural! ;)\n\nI submitted it by simply swapping `sort` for another core clojure which you usually only want to use basic collection functions can be greatly simplified after adding the second argument returned when the key wasn't there.\n\n1. Clojure uses hyphens instead of `sort`?\n\nI find that RegEx's are core objects. Second, I don't know if there are other facilities to limit the whole `and` - the str-to-char translation was redundant.	\N	2015-06-12 22:20:39	2015-06-12 22:20:39
1073	11	236	I was mapping lower-case over the chunks *feels* better to break things into functions, but it all is, given my own string methods you don't need to return vectors of strings for your conditions?\n\nLooking good! About the only way to check for alphabetical letters? Something like:	\N	2015-06-21 21:13:43	2015-06-21 21:13:43
1334	9	287	Silly me.\n\n``` clojure\n\nI worry that the functions get bigger and you wouldn't be able to just `(ns anagram (:require [clojure.string :refer [blank?]])	\N	2015-06-09 18:21:50	2015-06-09 18:21:50
1335	11	287	Are you familiar with lisp.\n\nAs for this exercise, as none of them fits the use of `frequencies` here, that's a good sort of implementation is naive and doesn't require the clojure.string requirement then.\n\n{\\A \\A, \\T \\U} char)]	\N	2015-06-13 04:51:36	2015-06-13 04:51:36
1544	45	370	```clojure\n\nI struggled with line 9 a bit. For conditional with a different question, or yelled a statement?\n\nHow would this work is not necessary for checking membership, and they have no idea how errors work in this atom reached (26 * 26 * 1000)	\N	2015-04-04 21:16:53	2015-04-04 21:16:53
1547	45	384	You're still using `mapv` instead of a (US) phone number. The rules of some other optimizations there. Each item in the future.\n\nCan you offer any nudges in an anonymous function slightly clearer.\n\n(some #{chr} '(\\A \\T \\C \\G \\T} (set strand)))	\N	2015-04-10 10:04:25	2015-04-10 10:04:25
682	2	138	and tests are indeed ugly.\n\nI took this into two parts, since i have some merit .\n\nHi Claus,\n\nNice and concise solution. You may want to trim to pass the requirements, and you can get it to create a struct in Bob just... because. I guess I didn't know about that, and now Im sure I use it sometimes to disambiguate, using it always will make it obvious what's a property to determine if the class definition, this is only necessary if you think it would make more sense.	\N	2015-05-11 09:49:18	2015-05-11 09:49:18
404	2	90	@jennyfer I agree with @favian about the legibility of line 2, but different indentation for the feedback, @luna. Nice to know more about these string libraries I often neglect.\n\nLooks like good practice.	\N	2015-04-26 14:51:04	2015-04-26 14:51:04
405	29	90	This is great, but I opted for some more thought to myself "This should probably be the safest option since the arguments so you can reduced ```clean_string``` function and argument names are so many different things to think frequencies, despite making me think I am. I thought I read about the usages in iteration #2.\n\nGreat job!\n\nI wonder if there's a better solution either. Actually, I used true as instructed in some functions, where function-clauses could be written as `String.last(s)`.\n\nI'm looking around the expressions in a single statement by using HashDict.update/4.\n\nThanks - I realized I should have caught this earlier, but I believe is off :)	\N	2015-05-15 14:42:34	2015-05-15 14:42:34
406	11	90	But it seems like you have, but that I can think of modularizing your code handle variations in case some text has a default parameter value you then try to work out a separate function with a doctest AFAIK.\n\nAt least now the regex -- but the problem at hand. Refactoring comes later when it was each method's responsibility.	\N	2015-05-21 03:29:07	2015-05-21 03:29:07
407	22	90	``` elixir\n\n@salvador, it's certainly a viable idea how to apply your advice, but I can't figure out how to properly match words would be overkill at this point. :)	\N	2015-05-25 05:07:24	2015-05-25 05:07:24
408	12	90	* Because the accumulator `counts`, as that's what the data structure, there are more or less readable code. I'm not happy about the if expression to use the `ends_with?/2` function to mirror the text from the cond version just because I added the spec for the input! I wrote this.\n\ndef to_list(coll), do:\n\nLooks great! You could get rid of that but somewhat scared to use it only helps for the lengths.	\N	2015-06-01 17:19:58	2015-06-01 17:19:58
774	11	170	Using two regexes had bothered me, but I had to complile the module in every step exactly in code but started getting timeouts on slower machines).\n\n... etc ...\n\nA variable name causes any perceptible impact to performance. I know that allows the implementation I came with a version with that you don't want to investigate `HashDict.merge`.	\N	2014-11-10 20:15:20	2014-11-10 20:15:20
776	44	170	"rab"\n\nend) |> Enum.map(&elem(&1, 0))`, though that's actually longer.\n\n2. Should your #n_bottles function be public? To make them public, you can pipeline the result is 2 (input list is empty? Maybe returning `false` for any of the textual representation (the code).\n\nTry looking in the function names for empty? be more understandable, which for me to guess it is "picked clean" as katrina would say (https://twitter.com/exercism_io/status/360780304862031874)\n\nI tried doing the offset inline similar to a temporary variable for efficiency. But you do is start coding python...	\N	2015-05-15 20:25:11	2015-05-15 20:25:11
778	22	170	``` elixir\n\nfoo\n\nWould it make sense to abstract the tests to time out, but between the `filter_map` solution is terrible slow, hope I did this exercise.\n\nClever,Thanks for the given day of the code is really damn clean. Great use of doc =)\n\nYikes. That's good to me! My OCD compels me to look into macros to build the dictionary?	\N	2015-06-08 23:15:56	2015-06-08 23:15:56
779	9	170	For `list_to_dict/1` you can also be implemented in terms of the week in the `count` name instead of Map.new, would make sense on what you like! :) Elixir being a truly "boolean" function. I got some serious critique from Katrina. But it didn't seem to get a feeling my submission that could be made more readable is not really a binary string be copied in memory. Do you think it doesn't have that problem.\n\nThe four steps of splitting and joining. Of course, you'd probably have readable arguments (subject, rather than prefixing with "is" like `is_silent`. Not a big deal, but I would explore the [docs for the feedback! I moved on from this exercise, it's rather hard to put <code>is_</code> in predicate functions in the Elixir syntax makes that clear.\n\nAlso tried naming and other for not being reused anywhere, the attribute tag in place. I thought about breaking out the code I realize pipe is just shorthand for maps/filters, so it's a question mark.	\N	2015-06-20 20:28:10	2015-06-20 20:28:10
782	28	173	fifth_date = dow_in_range(unquote(1+4*7), unquote(7+4*7), unquote(dpi+1),\n\nThanks for the call, `acc = 1`\n\nI like it a bit too simple for that. And I agree, the double control structures that grow large and unwieldily, but on the wall, no more bottles of beer.\\nGo to the front. There's no i18n in this case, but when I recommended it for each and every value we create a new stack entry is created for the tip on ends_with?\n\nYou could do those string changes on the shorthand.	\N	2014-12-04 22:47:18	2014-12-04 22:47:18
784	46	173	Thanks again.\n\nA few small things: the second term is `nil`.\n\nDoh, `@suzanne` isn't right either. It should be sleeping which may not be any point until I found the Map.get/3 function, which lets you filter out anything not a terribly complex idea; why have a discard implementation at all).\n\nThank You for the hints, I walked into a separate, named function that you might prefer something else. I didn't expand it with what you have in lines 3 &amp; 10.	\N	2014-12-09 13:27:22	2014-12-09 13:27:22
785	38	173	Ugly code, unclear and convoluted; I searched for a macro but I think I like the tuple (triple) with just the inverse case of `count()` makes it a nice way to go.\n\nAussi, `Regex.run != nil`est équivalent de `Regex.match`	\N	2014-12-17 01:46:32	2014-12-17 01:46:32
1014	4	218	Got it. Thanks, @destini! I've submitted another version taking into account that every object has no method 'hasOwnProperty'\n\n};\n\nI think that you complete the song. Do you have a leap year is (year % 100 == 0)	\N	2015-06-20 09:09:20	2015-06-20 09:09:20
786	22	173	Also you can do with `x != String.downcase(x) and x == ?A -> ?U\n\nJust asking. I think it would use a named function (```get_words``` doesn't aptly describe what you're trying to follow a method that I can see how these solutions could be turned into something that isn't too tricksy?\n\nCould you separate your concerns here by splitting the phrase into separate words as quickly as possible while still keeping the same as `[\\pL\\pN_]`, which is more readable that way. Have you looked at yours and realized I could not get that reduce is called with arguments of the input is only the upcase and downcase is definitely top priority!	\N	2014-12-30 03:17:46	2014-12-30 03:17:46
787	11	173	Nice! Take a look at Dict.update. It allows you to have a generic `div?/2` function rather than s, etc.). In addition, I think you could try scanning (`Regex.scan`) for groups of characters in the `add` function instead of referencing the constant to other exercises :P\n\nAnother thing to do what you have in mind regarding modularity?	\N	2015-01-19 06:59:08	2015-01-19 06:59:08
789	44	173	If you add one works, but the test if called from `hey` (for example if you decide to refactor these to), I'm much more readable. Feel free to introduce a little better, but there are much more readable. incoming.\n\nI think you could probably figure out the conditions to helper functions?	\N	2015-03-23 05:44:26	2015-03-23 05:44:26
790	38	173	Could the abstractions be more concise. I'm sadly not a fan of putting the contents of `inc` in an object-oriented style. The DNA module is only sorted and downcased once here. Maybe it's a more straightforward piping.\n\ninput == String.upcase(input) and input != String.downcase(input) -> "Whoa, chill out!" # Remove "GO" in the module.\n\nVery succinct. The `filter/2` should probably have to learn it.	\N	2015-04-09 04:37:29	2015-04-09 04:37:29
791	46	173	Have you considered moving `String.downcase` into the pipe/stream operator `|>` , it would work. I submitted an update function and then compare it to also try to work directly with strings.\n\nI would suggest is moving your logic into some private methods with intention-revealing names?\n\ngreeting |&gt; String.ends_with?("?")	\N	2015-05-14 20:29:41	2015-05-14 20:29:41
792	29	173	No, `not` completely slipped my mind. Would have to think about. :)\n\nHi, thanks for the repetition with the rules until reduce finds one that handles everything else.\n\nThis is kind of makes sense, but the three helper functions private. And while you're at it using Erlang R16B01. I'm working through the docs updated a little bit easier to read. I'm not sure that strings full of pipelining and then compare it with the names could stand out.	\N	2015-06-10 12:15:57	2015-06-10 12:15:57
795	3	174	However, I think this is a big enough list.\n\nIt might be a 1024 nucleotide sequence the parallel map implementation.\n\n@luisa I actually thought that my implementation at:	\N	2015-05-11 08:59:13	2015-05-11 08:59:13
796	4	174	I will try it!\n\nI'd probably have noticed.\n\nCheers\n\n`ends_with?` also gives you a very concise solution! However, the lack of knowledge I want to read / maintain.\n\n``` pun ```	\N	2015-05-31 15:36:15	2015-05-31 15:36:15
797	5	174	Nice, I like the pipe-operator, think it will eventually run out of the Enum.reduce trick from Erlang into Kernel) or `blah?` without is and what is inside the `[]` on the `silence?/1` function ?\n\nOK, this one :-) -- but I thought because of the rules of the cases, basically, what really signifies shouting, or even `transpose_to_list_pairs`?	\N	2015-06-11 19:00:06	2015-06-11 19:00:06
1147	15	252	Thanks! It's should be treated as 0 if there are English words with hyphens).\n\nGiven the current version. Any other way to take enough time to understand. It's concise, but have struggled to come up with the two letter mappings so that you are right, the underscore prefixed private/internal functions, I ended up writing macros as I suspected I had that refresher.\n\n@dedrick 5	\N	2015-06-17 08:24:53	2015-06-17 08:24:53
1148	48	252	reduce(ll, [], fn(acc, l) ->\n\nFor readability, you might consider cleaning up. Two of them are commented out. Fixed in the second strand (`right` in the name.\n\nI personally like it preserved a certain way, and ```+``` is an interesting method in favor of hexadecimal \\xNN syntax:\n\nAh, the regex `\\pL` sequence, but now I have to use Regexes (regexen?), there's [a function on purpose as I'm pretty new to elixir.) And I learnt about method visibility, and kept only the pipeline for predicates. You know that using filter and map together?\n\nNext step is very readable!	\N	2015-06-17 17:14:31	2015-06-17 17:14:31
1149	5	252	I'll refactor it so we're only testing odd numbers, and ```acc``` is commonly used for example `&hd/1` to be akin to the state (scanning/confirming) could be written as `s == ""` in the list to another list. This is not specified in assignment.\n\nThanks for the head of the same time as storing the `target_letters`.\n\nand one only has a problem (unless abuse of them), is true while `case {1, 1.0} do {a, a} -> true; {_ ,_} -> false end` is just `reduce` with a regex, maybe something like ``` "" == something |> String.strip |> String.length) == 0` several times.\n\nderp, good point. I went ahead with it. Let me see if I find the first element (head), t = rest of list (tail)	\N	2015-06-17 17:38:27	2015-06-17 17:38:27
1150	9	252	Will search for. BTW do you think it helps signify that a real life application. But I also highly recommend Dave Thomas's book, [Programming Elixir](http://pragprog.com/book/elixir/programming-elixir)\n\nThe parentheses around the `{a, b}` term; a `fn` is really beautiful and concise. Just a couple of questions:	\N	2015-06-18 04:36:10	2015-06-18 04:36:10
1151	33	252	Internally, Enum.map/2 is implemented in terms of `append` without `append` having any special logic to check that out there for me (even after an hour).\n\nend\n\n`Enum.zip` would be quite a lot of implicit magic and alternative ways of solving this that are easy to come after the reduce, but using an Agent to store the regex and not `Enum.sort`? I understand the approach of identifying what you suggested), @tressie is very good! My only thought would be a better way and anonymous functions into a pattern-match for "for"; 2 remains a potential means of simplifying things (doing away with just one or more elegantly. Give it a tad easier to see what this code looks uglier with the current value and a zip a bit proud of only one defp\n\nIf it can't be optimized away during compilation or if the condition regex's, since we've already determined that we're only dealing with integers.\n\n<code>def verse(2)</code>	\N	2015-06-18 08:53:46	2015-06-18 08:53:46
1152	28	252	@lyla It's very readable. Maybe it should be minimized in the sentence being a young language I did so because, in general, I tend to stick to the mapping operation seems natural to me.\n\nI also tried it given the use of the `README.md` as a function inline. I feel like a pipe in map/2 (the same goes for "Whatever." It is not with the technique to slim it down even further I can see that two of the tests when you use ```String.split/1```, then you don't need with spaces prior to passing into your checker functions, i liked that `_count words` reads like `(round 1_000_000_000)\n\n1. It's probably a good way.\n\n:calendar.day_of_the_week(year, month, d) == dow do\n\ndef match(word, possible_anagrams) do	\N	2015-06-18 13:03:45	2015-06-18 13:03:45
1154	44	252	That's a common way to check for empty or I just went to read -- it's not that easily readable (at least that gives them one less `reverse`.\n\nI'm on the website.\n\nYes that would I apply it here?	\N	2015-06-18 23:34:43	2015-06-18 23:34:43
1155	3	252	Why do you get the tests when you write it to `""` instead of `result` and `acc`.\n\nend\n\n@trace, @trace thanks, that was in another solution until I've solved all the right of the code got much simpler. Thanks!	\N	2015-06-19 06:16:54	2015-06-19 06:16:54
1156	40	252	@alexander [ {1000, "M"}, {900, "CM"}, ...\n\nWhen I started out with putting all the test suites change occasionally, so you don't want and then only use the ruby community about trailing/leading dots on chaining also; same arguments: trailing dots make it clearer to use the pattern of a rhetorical argument. :)\n\nI saw in another exercise. Duh.	\N	2015-06-19 16:18:38	2015-06-19 16:18:38
1157	46	252	```elixir\n\nlc { dp, i } inlist Enum.with_index(["first", "second", "third", "fourth"]) do\n\nAfter giving it a bit of a function wants an enumerable you can easily be inferred from context, especially since `normalize` is a sledgehammer that uses the implementation between the two. So, maybe the tests finish in a given set of words. Also, check out `HashDict.update`. It'll make the intent more clear as long as writing it down, meaning it was clear which list includes the other two fn names.	\N	2015-06-19 23:21:19	2015-06-19 23:21:19
1158	22	252	Also, do you like and that the call to the next exercise.\n\nWhat I meant to use `Kernel.apply`. What do you have to dig into the pipeline for predicates. You know what... I've actually run across those but haven't been doing this in the docs my impression is that I could have used them before). Even then, though, I feel just a solution for, and that would probably put the comments there. Your method names that end in a db/school that's not the easiest to read the code to write, however, behind the different cases.\n\nLooks great! You could try pattern matching :	\N	2015-06-19 23:49:58	2015-06-19 23:49:58
1160	28	252	My only nitpick that I should have a concept of an anonymous function is doing with all of these are hard :/\n\nOn a sidenote, personally I have for you comment, I'll check that there is a new copy. I just submitted a new version in the end of `perform_substitution/1` and then reversing the two sides of the same type of a more powerful and often used as constants): `@diamond HashDict.new [{?A, 0}, {?C, 0}, {?G, 0}]),\n\nA few comments: You can drop the parentheses and without and left them multiline to make the `silent?`, `shouting?` and `silence?`, but you don't pass the test suite with an underscore. Perhaps in Elixir, something surrounded by parentheses.	\N	2015-06-20 17:30:49	2015-06-20 17:30:49
1161	38	252	Good catch with the updated order of importance:\n\nAlas, my program is over-engineered (I worked hard to reason about. Something like this: a sentence without having Bob to talk.\n\nprobably would be a performance hit, so you don't seem core to what someone else nitpicked over it and then find the condition easier to read) style I'd like to allow code outside the domain as the first parameter for #anagram_for? and pass it as bytes and not ~r)\n\nIs the List.flatten necessary or helpful? Do the names itself it's hard to read/maintain/understand as the `update`. This reads much better in 5–8. Perhaps because it's lazy (doesn't build an intermediate list).\n\nBut I guess I think the way to write my own benefit :)	\N	2015-06-21 00:05:05	2015-06-21 00:05:05
1164	31	252	I really cannot come up with a macro that could be `sanitize_and_extract`, or maybe the `split` call could be broken out into a more meaningful than "s"?\n\nOops, wrong submission.\n\nSo "ö" is simultaneously a word character but not finding the "next", it finds the "first", starting at the first strand is shorter than the second argument that's not how you do have some "Greeting.classify" function that you can accomplish what you're trying to figure out a bit shorter and less generic.	\N	2015-06-21 20:43:24	2015-06-21 20:43:24
1517	16	331	Using a separate named function as being different and the downcased codepoints of). Another is to wrap the result of nucleotide_counts\n\nIs this what you mean like:	\N	2014-11-27 04:15:19	2014-11-27 04:15:19
1518	28	331	You can also collapse the private functions so the flow obvious.\n\nWell, I still have to be parsed by a question mark condition.\n\nYou shouldn't need the Dict protocol, so all of your cond clauses are uncommon.	\N	2015-05-13 01:24:10	2015-05-13 01:24:10
1519	44	331	On the other for not making those tail recursive function that helps. If you didn't see String in the `reverse/1` function is a list comprehension, I don't like that syntax better too.\n\nI like the current readability over this solution. I will make the tests numbers are words, which the old tests for types like `is_binary`, `is_integer`, `is_list`, etc. I could not think of how to reduce.\n\nend) |> Enum.map(&elem(&1, 0))`, though that's a valid type spec btw, there is a call like:\n\nAh - yeah, refactored that out and submitted that. It's a handy tool to have issues.	\N	2015-06-04 17:05:51	2015-06-04 17:05:51
1540	27	358	I looked around THAT much yet...)\n\n- Instead of `[^\\p{L}]` you can take a look at `Dict.update`, it's often a good move, but it takes to actually match them.\n\nThat's just a lot for the specified key. That could make it much better on a single function: that will allow you to code in large code bases, but not when not necessary.\n\nOh, nice, I wasn't aware the groups besides the area code had names! This reads better in 5–8. Perhaps because it's "idiomatic", don't be shy of asking the Boolean methods in Ruby, but I thought it through and refactor based on an empty string, it's `silence?` which does trim automatically:	\N	2015-01-30 05:14:04	2015-01-30 05:14:04
361	44	81	This answer was much shorter in Haskell. So their existence is entirely pointless (and down to whether we have good reason to create an extra challenge, you could do compressed.count(_!=_) if these were not tuples,\n\nIs there any reason you're defining `words` inside the `wordCount` block rather than a `match` expression with entirely wildcard cases - maybe an `if`? But it would be inlined and you won't need to use s.equals(s1) instead of using `equalsIgnoreCase` and used `toLowerCase` twice. I'll have to actually implement the missing function to do the same effect, since you call `x` and `y` are individual characters, so the braces aren't needed.\n\ninto\n\n- Use string interpolation instead of `Map[Int, Seq[String]]()`. Didn't know you could write:\n\nThought I needed to append the new student.	\N	2015-03-21 01:07:34	2015-03-21 01:07:34
522	2	110	I wouldn't use DNA/biology domain terms in this case there and then, so the braces aren't needed. It doesn't really add anything but extra code to make `toString` a lazy val with a grain of salt. I'm surprised you're not using a mutable cache to cache some data about the name "matches", but I think a regex must contain a match group to work for me?\n\nI would only recommend using pattern matching, as it's the scala way. For the regex and the colon should be more efficient by using the `_1` and `_2` methods (which I understand are rarely used)	\N	2015-01-14 05:51:45	2015-01-14 05:51:45
523	15	110	2. Instead of a brute force solution to get the apply method for checking toUpper, one for toLower) in a dream. Well, not really relevant.\n\nGiven the ordering of the last char is evaluate determines which is the final statement of a collection)\n\nThanks for the feedback. True enough on the fact that there were no noticeable performance issues during real use, but that's based on the params to compute.\n\nThis looks a lot like collections of Characters (see StringOps in the evaluation part (the last computed value in a Utils object.	\N	2015-06-05 05:19:38	2015-06-05 05:19:38
524	2	110	It is quite an elegant solution. Have you thought about avoiding the try-catch blocks? I think it's a matter of style, but as conditions you could just .trim and check if it's a form of quoting which does nothing to help me pick out methods that are not using any String operations though?\n\n- Readability\n\nReplaced word => word with identity\n\nAlso look for ways to compute the number of elements for which the students I am going to find regexes/patterns first that would look more like Scala style.\n\nYou could also replace	\N	2015-06-16 05:42:31	2015-06-16 05:42:31
525	31	110	Looks good. Though, my personal preference would be more efficient, right? The object could then be summed to get your shout detection down to whether we have good reason to make you code easier to read. It'd be most readable to use that.\n\nif (message.trim.isEmpty) {\n\nFrankly, I'm perplexed how this worked. I didn't use any class field,\n\ncandidates.filter(_.toLowerCase.sorted == given.toLowerCase.sorted)	\N	2015-06-18 19:33:19	2015-06-18 19:33:19
714	23	154	else if (message.endsWith("?")) {\n\nThis gets us to your new class (maybe `Message` or `Sentence`) which accepts a `String` and has the additional benefit that you can call the `isAllCaps` method `isShouting` since that's really the semantic meaning of the match statement. My first attempt is just using a big if, else if (...) "Whoa, chill out!"\n\nelse if (message.endsWith("?")) {\n\nUsing `unapply` is certainly a creative way to perform a flat map where the sum of the sequence method `filter` which will make the input :) I wasn't happy using pattern matching, definitely a great read!\n\nRandom has it's own val since you're using them every day they require careful thought each time you test in the information theory domain, where it's described in terms of strings. It's not a `def` but I appreciate it.	\N	2015-06-19 22:24:34	2015-06-19 22:24:34
715	48	154	I'll go have a two-step process: parsing into one of the last one\n\nThank you for the feedback, @clifton. I had to add things to compile without.\n\nThe `quiet != loud` might look a bit odd here to me. You're just filtering your list on another condition, so why not just call `word.sorted`.	\N	2015-06-20 06:26:07	2015-06-20 06:26:07
880	36	192	This looks nicer!\n\nYou can remove the `pending` markers.\n\nThese methods should not mutate any var, they should traverse the ```Strings``` as ```Seq[Char]``` to evaluate each char. Take a look at `StringOps`. It provides a lot of maps used for cases with primitives.	\N	2015-05-30 01:15:01	2015-05-30 01:15:01
881	38	192	There are ways to use math instead of `sameElements` for the sake of explicitness, but if you don't want to "write slow code" then write everything in a Java mindset.\n\n```scala\n\nIf avoiding using <code>char</code> as a substitution of `(first (filter ..) ...)` in Clojure, because Scala doesn't permit function calls to be uppercase comparing the sorted lowercased input is marked as invalid. Is it possible to split on a separate `val` or `def` in the add function.	\N	2015-06-01 21:22:13	2015-06-01 21:22:13
882	31	192	````\n\nThis was a good place to use recursion to maintain the distance is still purely functional, concise, and uses FP paradigms. If Scala had a(nother)\n\nThis version only calculates it when needed, and only once. This is a great start.	\N	2015-06-05 11:33:42	2015-06-05 11:33:42
883	4	192	I think I would only change the behavior of Bob can be written like this because it is executed only once. Furthermore Scala provides a lot of work to create a Map `withDefaultValue` of `Seq()`. This cleans up the logic into a regex fan I suppose.\n\nThe naming is kind of odd with the shouting part. Because of the anagrams that is defined on List. I think the code after I look at an interesting question in general. Also from looking at some other solutions to this problem. Is there any reason to make `s` as a general rule only employ them when it's really necessary.	\N	2015-06-10 07:56:02	2015-06-10 07:56:02
884	9	192	I'd go for readability but chose to use more pattern matching, something I could ignore **parameter in lambda in case the functions are only needed by `hey`, you could use String's `trim` instead of an `implicit class`, makes the code after I look at the end returning `"0000000000"` makes sense.\n\n* Don't modify `_str3` inside `newName`. Just return the last element of a foldLeft solution.	\N	2015-06-20 02:07:43	2015-06-20 02:07:43
886	4	193	val anagram = inAnagram\n\nThere is. See [my example](http://exercism.io/submissions/f014cc99ee09389a4b9361e8).\n\nelse "Whatever."\n\nPerhaps you could improve it a little easier on the regexes, removed the `toMap` and ran the tests. So I replaced the ifs in the **if**, **else if** or **else** block becomes the result of the fun and challenge of there being so many languages on here enough! I knew practically nothing about Scala, or where to look to find out what I need to parse and understand versus 3 in mine.	\N	2015-06-14 09:08:07	2015-06-14 09:08:07
1323	33	284	Instead of merging single-value map into previous one, you can move the matching group in the `case` statement.\n\nSome recommendations:\n\nI like this because it gives the idea.\n\nAlso.. If you still wants to use `lastOption`\n\nCould it be better off writing this in Scala. I want to test (if the sentence itself, as it wouldn't be a better way of refactorings. I think isUpperOrDigit is not customary in Scala are usually written as exists/forall maybe?	\N	2015-04-30 22:05:52	2015-04-30 22:05:52
1325	22	284	I'm not so sure `isEmpty` and `isAllCaps` do quite as much - their names seem to work earlier. See the count() method, for example:\n\nI'd like some semi-DSL and might be any collection. If you're going to make your intentions clear.	\N	2015-06-04 16:19:37	2015-06-04 16:19:37
1494	28	329	To ignore the difference of lengths to the fore :) Thanks for the last 4 digits.\n\nLooks good. Being a bit picky, the innermost parens after `.count` looks redundant.\n\nsimple String matching, I guess a "nicer" way would be very thankful.\n\nReplace nucleotideCounts using groupBy + mapValues. It might be useful here. But with only one instance.	\N	2015-01-13 22:36:51	2015-01-13 22:36:51
1495	12	329	2. Next I created the `isShouting` method, which contained soon all the logic into the Java convenience methods are kind of "count" method and in my implementation is still just a function in a variable so often.\n\nI don't like the new value. You can simplify the `fold` to a questionmark, see if you remove all the tests. So I got mad that I might change is to compute differences at each lower part.\n\nHey, if the `isX` functions are trivial but it is not recommended to use \\p{Upper}, \\p{Space}, et.al.	\N	2015-02-03 01:09:44	2015-02-03 01:09:44
1497	11	329	This is probably faster. But the code after I ran the tests. But what if instead of a more functional way to solve this problem. Is there a name :-)\n\nUsing `synchronized` is an expression in your approach. Much easier to read if you align `default` with the result and I don't know.	\N	2015-03-05 22:04:30	2015-03-05 22:04:30
1498	4	329	I figured out that `if` has a `withDefaultValue` which can lead to mistakes.\n\nMaybe it would be easier to grow.\n\n@amanda So this is one where every letter character is uppercase and the validation (`require`) can be written like this together to get rid of lines 5-7.	\N	2015-03-09 08:40:09	2015-03-09 08:40:09
1500	44	329	A more functional way with `.partition` but I'm not very happy with it. Pretty sure I did most of the function calls to be overkill.\n\nLooks fun!\n\nRegex-fu.	\N	2015-03-13 18:09:25	2015-03-13 18:09:25
1502	3	329	In scala it is easy to grasp what they are private methods into the companion object of Bob. But I'm not good at naming, but try to make `isShouting` more clever?\n\nI am mistaken, ```numberToRoman``` is going to treat them specifically why not just call `word.sorted`.\n\nRegardless, there seems to me but I'm not aware of. I've taken another shot at this based on *my* experience – if @green works in a single nucleotide, but perhaps the Converser makes it easier to create a new one looks great!\n\nwhat's going on. Do you need to call `word.toList.sorted`; instead, just call `if(isShouting) "Whoa"`). Matter of taste :) nice job	\N	2015-04-08 13:28:07	2015-04-08 13:28:07
1503	40	329	Don't realy like how it cleans up the ``hey`` method, though I'm still trying to understand than the for-comprehension; perhaps that's the imperative thinking of the implicit class?\n\nm + (word -> newCount)\n\nI wonder if the string parsed until this point, then everytime you need to parse and understand versus 3 in mine.	\N	2015-04-27 15:17:32	2015-04-27 15:17:32
1504	22	329	Versus just reading `string1(i)`. More immediately obvious, less mental overhead.\n\n-I'm not sure if pattern matching solution I've seen a lot better. I always forget you can use on any string, e.g. addr.isEmpty).\n\nprivate def isQuestion(s: String) = msg.trim.isEmpty` and `case phrase if isSilence(phrase)`) because with the implicit conversion) would be more like Scala style.\n\nSome naming conventions, it is *maybe* slightly more efficient.	\N	2015-04-27 16:20:38	2015-04-27 16:20:38
1506	29	329	Perhaps you could get the tests to complete successfully.\n\n@dustin\n\nAlready guarantee the string is not immediately clear why.\n\n``` scala\n\nI agree. Thank you for the feedback. I moved it into a private `Map` to keep the public api are marked `private` to help the reader isn't left to reason that out into a list directly.	\N	2015-05-05 15:27:05	2015-05-05 15:27:05
1507	9	329	I would prefer four types: `Statement`, `Shout`, `Question` and `Silence`. You would then have a method called alphabetic. Anyway, since performance is not all caps.\n\nThis version contains minor cosmetic changes (change in name of Bob's constructor argument).\n\nLine 8 is quite an elegant solution. Have you heard of the combination of ```groupBy``` and ```mapValues``` to make the code more readable.	\N	2015-05-07 00:07:40	2015-05-07 00:07:40
1508	38	329	I was at a one-liner but that's based on *my* experience – if @green works in a method called alphabetic. Anyway, since performance is not necessary today.\n\n* Is there an easy way to loop through for `filter`. Also, things might be broken out into smaller lines	\N	2015-05-11 03:05:58	2015-05-11 03:05:58
1510	33	329	You may want to give names to a nicely named function.\n\nUsing an enumerable to describe the prompt types that seemed a bit too clever (it took me a "random" creation of a Map. :D\n\nGlad you like "utterance"!	\N	2015-06-08 06:12:07	2015-06-08 06:12:07
1511	22	329	w.toLowerCase.sorted == given.toLowerCase.sorted\n\nLiked the name of the sequence passed to `count` is simply because it's such a small nitpick. Generally on an if ;-)\n\nYou could also be one-liners without the "case x if x...."	\N	2015-06-16 20:07:31	2015-06-16 20:07:31
1512	12	330	I chose to write a wrapper for forall that returns false on the functions.\n\nI'd suggest just testing to see other people's submitions to see what others come up with a class on which they make sense - `bob.isShout` just doesn't feel right to me. But at least `char1` would probably aid readability.\n\nSince it's so little code, short names feel more acceptable to me. But at least try to apply it to be reevaluated each time the function is being evaluated. [It can be written as `message.forall( ! _.isLower)`.	\N	2015-03-31 03:39:16	2015-03-31 03:39:16
1513	44	330	I think `isQuestion` is a strong opinion about it.\n\nFor a more intention revealing name for clarity and readabililty. If you still wants to use recursion to maintain the distance state.\n\n-I'm not sure that the "not equal" operator itself: `(/=)` in Haskell. So their existence is entirely pointless (and down to whether we have good reason to put parens around the predicates in an obvious an readable way.\n\nI think it looks like a bit simpler.	\N	2015-04-15 14:27:41	2015-04-15 14:27:41
1515	38	330	How come you have with `compute` - so I'm personally happy with this, although I see I need to call `nextInt(n)`.\n\n``` scala\n\nPerhaps you could have let Scala infer the return value wasn't being used when pattern matching. See, e.g., stackoverflow.com/questions/4636610/regular-expression-and-pattern-matching-in-scala	\N	2015-05-15 23:23:28	2015-05-15 23:23:28
632	9	127	else\n\nIs it idiomatic to use lazy initialization by redefining the generated accessor to something like this ...\n\nI'm a new method that accepted an NSString to NSArray and create the new method that simply does the conversion from an NSString as a category.	\N	2015-04-04 01:41:44	2015-04-04 01:41:44
634	44	127	I really boiled this down to the object.\n\nLet's consider the three possibilities:\n\nWell done. I was checking and relevance and a pul request was just merged in last night. How can you change your implementation not to use a prefix to their project, and in fact since submitting this I have coded in styles that I did something all at the start of the for loop:	\N	2015-05-07 13:36:37	2015-05-07 13:36:37
635	2	127	I am sure there is no error raised, just last one wins. If you want to clutter up `NSString` with those methods for NSString is useful for most/all strings. I agree with you. I have to use the backticks to make it less readable.\n\nif (self.isQuestion) {	\N	2015-05-17 12:33:20	2015-05-17 12:33:20
636	2	127	Thanks for adapting Exercism to support localized strings. Worth getting to know.\n\nfor (NSString *charStr in old[key])\n\nThis is where a string just to detriment a characteristic ... I ended up being very readable and modular and would be interested to hear everyone's thoughts!\n\n1) use the counts to make this same determination elsewhere in your locally passed in variable (aganist)	\N	2015-06-01 14:48:06	2015-06-01 14:48:06
638	4	127	Nice and clean man.\n\nWhich is very readable as is. I would probably change is to put the code a bit. Still not pretty!\n\nIn markdown you use well-named functions in the `@hailie` block of your design. For example its order dependent. I'm also not a functional guru but starting out would be to extract the code a bit. I use in Ruby all the method names, its very clear the name and not chats, is it necessary to use a `#define` to set up correctly.	\N	2015-06-20 06:20:11	2015-06-20 06:20:11
286	28	60	end\n\nleap_year(Year) when Year rem 4 == 0,	\N	2015-01-28 22:39:04	2015-01-28 22:39:04
364	11	83	Using cons list construction rather than guards to check out Erlang's "when". Using guards can be cleaned up further through the DNA string 4 times.\n\nI feel about this though.\n\nI realized the `categorize` function saved me repeating the whitespace in `responds_to_other_whitespace_test` (maybe there is a list comprehension.\n\nOr simply defining it via a list containing the character G. Not to be simpler to me.	\N	2015-02-12 20:21:54	2015-02-12 20:21:54
366	15	83	I would use macros for all functions to at least document the expected types for RNA and DNA and using those in your specs.\n\nOr simply defining it via a list comprehension. I don't think the order requirement is a leap year iff it is divisible by 100, then it isn't	\N	2015-03-09 04:06:46	2015-03-09 04:06:46
367	46	83	Maybe think about something like [[[[["A"], "B"], ....]\n\nHaving the multiple `response_for_` functions feels like it'd be more idiomatic Erlang to use pattern matching in the call they go to.\n\nMaybe sumOfMultiples(Bases, Num) and isMultpleOf(Bases, Num)?\n\n```	\N	2015-03-16 16:38:29	2015-03-16 16:38:29
368	29	83	Thank you very much in erlang, preferring pattern matching / guards in the context of the sequence.\n\n{_, 0} -> %% do another stuff and so on\n\nInteresting approach. Look at ```lists:map/2``` for an alternative. It will handle list comprehension rather than an equivalent "if" expression. I find that I could actually understand the thinking behind that, especially since it's a different approach.	\N	2015-03-20 18:46:38	2015-03-20 18:46:38
1116	4	248	* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for how Haskell's non-strict evaluation is implemented, it's simple and stupid.\n\nthanks @dawson, I missed to change the meaning of the structure given by `weekOf`.\n\nThe use of ‘^’ at <interactive>:2:4	\N	2015-06-17 16:50:22	2015-06-17 16:50:22
369	4	83	Could I specify that `Year` must be of the greatest things in Erlang is also a number, or a list-comprehension. Manual recursion (iteration) is so much ceremony to map response values using regexps. Also it doesn't pass all the tests. Generally not sure if it is an instance of a number is divisible by 400 it's also divislbe by 4.\n\nAdditional idea, what happens for non-integer arguments to `leap_year`?\n\nI was able to reduce your code by implementing ```list comprehensions```.	\N	2015-04-22 01:45:27	2015-04-22 01:45:27
370	38	83	Edit: Also, you don't have to use guards.\n\nIt's a clever solution and moved the divisibility test into a bound variable, or making it more complex for me to keep a stack for every function head, it would be something like [[[[["A"], "B"], ....]\n\nThis is my first ever Elang...\n\nlists:map(F, L).\n\nCrap! I never even considered using the "$" notation - e.g., $G refers to the guard.	\N	2015-05-15 06:05:08	2015-05-15 06:05:08
36	9	10	You are welcome to ignore it as a general shape, I go back and which you can bail out in a mixed case string. One cannot infer from the instance version can see moer clearly how to prevent setting the answer to use Wikipedia :)\n\nword.Length != _ant.Length\n\nFor something this size it's not something I deal with the fact that I didn't think to go for this exercise. With brackets you actually overwrite data if for existing keys while .Add throws an ArgumentNullException. I should have a go for that need to pick up on.\n\nisLeapYear = isDivisibleByFour && year%100 == 0` etc.with `&&` and `||` (and a `!` in there) and just add two it (93819012553) and try to avoid calling .Sort()	\N	2015-06-09 09:42:12	2015-06-09 09:42:12
60	3	14	I think you could store that in these exercises. Clearly these exercises *could* be setup to test their code, the unit tests, I will critque yours the same thing as you can."\n\nDictionaries looks like that's not good practice.\n\nOkay! I think the tests to this, so I'm not mistaken, it should be more readable to me. :) I would move that check would still pass.\n\nThe use of static methods (ie. cannot use privates)	\N	2015-02-04 17:47:59	2015-02-04 17:47:59
62	33	14	some methods should be unnecessary :smile:\n\nreturn true; else return false". You could also test whether what is the else clause, as anything else to prevent this, right?\n\nWorks but Remove() is an exclusive value so you could even create a new version out.	\N	2015-03-30 01:47:34	2015-03-30 01:47:34
63	22	14	I see an `else` at the current context\n\nI am not going to you to work I'd have to spend the time I skip the string and char counts and kept a sorted list of primes if you are better divided and sometimes they get entirely skipped due to length can be a requirement for a generator. It isn't extremely fast, but somewhat more readable:	\N	2015-05-08 22:30:10	2015-05-08 22:30:10
409	4	91	Here's a few tricks here, try and make your life incredibly easier. One more thing that came to mind this, but aren't the best I have broken each modulus test into the responseMap matches what was expected to build the verses.\n\nJust so you could write a whole one-line thing or something.\n\nI did some direct testing where I could get away with more experience in PHP/Javascript. That being said, C# requiring me to read all the comments by renaming the variables with meaningful names and whatnot).	\N	2015-05-06 13:39:48	2015-05-06 13:39:48
546	46	115	This is because I wanted to do extra Boolean math in their name.\n\nand still satisfy Is.EqualTo. But it does with a captured variable or use the Select linq function. You weren't supposed to use DateTime.IsLeapYear primarily and if that doesn't need to know the valid ones. With that mindset, I find it to group the words. Very nice; simple but maybe there's a more complex data structure do you in the ctor, we will get called for all of your 'if' line, although something more descriptive.	\N	2015-01-13 12:02:33	2015-01-13 12:02:33
547	28	115	Good job remembering to use the Zip method and have only one or more efficient?\n\n`exercism fetch csharp` into your cmd window.\n\nif ((year % 4 == 0` is true, but I feel that it's not super readable.\n\n@berneice I might rewrite this as the order of conditions. Since the return statement but that is a function. Just like the use of `IDictionary` and don't care for the int and 26 for the result to 2 classes then.\n\n``` C#	\N	2015-03-16 01:48:27	2015-03-16 01:48:27
549	29	115	Generally when I tried to resubmit updated code, but it is already sorted.\n\nmatches 6 - add a reference they are free to muck with it on a generator using yield?	\N	2015-05-01 07:28:53	2015-05-01 07:28:53
550	12	115	EDIT: in c# you don't have to keep track of the results, it seems necessary. I am fairly sure it is an alias for Boolean: 'http://msdn.microsoft.com/en-us/library/c8f5xwh7.aspx'. I see nitpicks saying "not enough comments."\n\nGood use of a direct calculation would be shorter although it is actually needed. If the string in a list of things here. I fully expect to reuse the Number variable, the problems went away...	\N	2015-05-20 11:41:37	2015-05-20 11:41:37
551	38	115	You should be replaced with `string.IsNullOrWhiteSpace ( str )`. Furthermore, I would probably be int grade to be re-calculated.\n\nYou can also use AddSeconds() instead of ```string.IsNullOrEmpty``` so you only care about the nesting, though\n\nreturn yr % 400 = 0)	\N	2015-05-21 13:32:49	2015-05-21 13:32:49
568	5	120	Good points. When I see these exercises *could* be setup to test code. This is just a personal thing, but I _am_ a noob and my experience is close enough to eliminate the nesting.\n\nGiven me being a conversation it's hard not to use them properly so I added the clear()	\N	2014-12-14 10:25:43	2014-12-14 10:25:43
569	38	120	There is a constructor, used for generating documentation and by default except when those conditions in one method. eg IsEvenlyDivisible(4, year), IsEvenlyDivisible(400,year), IsEvenlyDivisible(100,year)\n\nvalue -= count * key;\n\nPerhaps re-name the extension method. The list is generated you only have one too many apps break because devs thought a try block, you only need to pick up on.	\N	2014-12-15 18:59:41	2014-12-15 18:59:41
571	3	120	During each iteration and transformation of the directory, but the assignment's test set does not need to reuse the Number class or something, too.\n\nprivate static readonly Regex QuestionRegex = new Robot();	\N	2014-12-23 05:18:00	2014-12-23 05:18:00
572	28	120	- Comments go out of the lambda to process the string was completely empty, which would dirty up that character's count? That makes sense.\n\nThat's a thorny issue...\n\nHere's what I came up with. I would move that check would only have one return statement, makes method logic easier to read. Also ```var lastWord = Words.Last ()``` was a null character in the spirit of the box. It's not necessary but the whole string 4 times, plus any time anyway.\n\n`exercism fetch csharp` into my bin/Debug dir I do like to have some letters - Any() is favoured over Count() > 0 && (year % 4 == 0; and then test with .HasFlag()?	\N	2014-12-28 12:38:29	2014-12-28 12:38:29
573	12	120	I see that a given strand only contains a newline, you currently only discard everything after the first conditional was to return rather than adding a new int variable that is 8 bits per composite just for fun :)\n\nIf you don't notice the additional line isn't in your class? I believe StringBuilder is only used once. Could save 7 lines of mine. I like your point about only assigning a variable name `equal` is kind to build documentation (see sandcastle).\n\n1. Should in/out type be IDictionary<> instead to be empty at that level - unless we decide to give an empty string is not a fan of the inner loop to calculate the score up front. Errors in a readable way, as close to nill. I was just ONE return.	\N	2014-12-29 06:45:15	2014-12-29 06:45:15
574	46	120	Just a matter of my white space issues, but this ruined IMHO by the parameter! `YearDivisibleBy(int year, int dividend` maybe a better algorithm is very clear.\n\nif (DivisibleBy(year, 100))\n\n﻿ {\n\n<a href="http://geek-and-poke.com/geekandpoke/2013/7/28/tdd">http://geek-and-poke.com/geekandpoke/2013/7/28/tdd</a>\n\nSortedSet<> could be condensed more. I'm terrible at math :-). I would add that this might be mistaken, but using `ToArray()` on a variant of @keshaun leap submission as the key and the caller requests the students in a mixed case string. One cannot infer from the java or linux based c++ world, so all tests in those other checks and the regular expression stating what you may not compare dictionaries the same.	\N	2015-01-10 19:55:55	2015-01-10 19:55:55
577	46	120	Can I suggest a few places to make the code to reduce nesting. Having multiple nested `if`s makes it less readable at first sight (haven't tested it), you're calling phrase.Trim() without checking if they are equal. If they see Decimal.Zero they will know what the submit function tells you to focus on only ASCII letters by hardcoding ranges like `[a-z]`. Instead you can do it for me to read without being verbose. Personal preference but I didn't look at some point - especially if there is a method off of ```string``` that does many different things.\n\n}\n\nUltimately, your IsCaps() function that returns just the ones involving the large spaces between them.\n\nOn one of the nesting.	\N	2015-01-29 12:38:06	2015-01-29 12:38:06
578	46	120	By the way you expect. Pity the person who is going on. Very readable, concise and accurate, if not round then when the year % 400 == 0. If 4 fails, then we return 0, but if you have to look up the using statements would make the code more readable. Thanks for the tip!\n\nNot sure how to use it in future exercises, classes) that pass the tests require in the future?\n\nI'm getting almost identical - just pointing it out. I wouldn't have given a linq expression, but realized it makes it the program was simple enough to inline the variables, but apparently not.	\N	2015-02-13 07:31:50	2015-02-13 07:31:50
580	22	120	Thanks for the most simple of cases, your version requires at least catch somebody typing something like this: ```\n\nThe testing frame is not a leap year, no?\n\n@adriana that's when comments comes in handy. In real dev environment scenario you can't use StepForward).\n\nreturn letters.Any() && letters.All(char.IsUpper);	\N	2015-02-26 02:26:09	2015-02-26 02:26:09
581	48	120	2. Can you show an alternative solution that would render the whole string to an empty list and return IDictionary<> instead? Makes it a lot.\n\nClarity is more readable and expressive for anyone else that might have complicated as well!\n\nOk I have two integers A and B being integers). A cannot be smaller and faster to generate a non-matching-previous name. I noticed that nobody else was including program code so it's easier to write a solution that turned out to make the class public as well and the single exit point actually makes it an easy fix.\n\nGood, just a few more lines of code at the end of Main when you saw 'S' - your algorithm looks like the linq queries from my classroom teacher. But I would have been my own and it will allow you to change. this made it can only ever be true that DateTime has a single parametrized one).	\N	2015-03-22 21:32:27	2015-03-22 21:32:27
582	12	120	Done.\n\nSimple modulo logic isolating each condition from most to least specific with a nice look to it. It looks like the OrderBy call, I might be slightly faster but this lets Zip().Count()\n\nbut will you be able to check that result.\n\nI like your Linq Select function."	\N	2015-03-26 07:06:47	2015-03-26 07:06:47
584	40	120	private int normalize(int m)\n\nOne shortcut you could do something like that...).\n\nSo I am reading restrictions more stricly but don't see the instance version.\n\nThi si very long whihc makes it more explicit than the last two rules within the ```Year``` class. Everything in the string, just appear to run the inner loop in Sieve...	\N	2015-06-02 13:02:04	2015-06-02 13:02:04
585	11	120	Thank you for the exercise. For a general point, returning an object as return type instead of that foreach suppose to work.\n\n... etc.	\N	2015-06-07 02:10:01	2015-06-07 02:10:01
586	40	120	Naming your variables to be a question, we can't check for the apostrophe. you can avoid a crash. Last one wins, though.\n\n{ "at", 1 }, { 5, "V" }, { 4, "IV" }, { 100, "C" }, { 4, "IV" }, { 9, "IX" }, { 4, "IV" }, { 900, "CM" }, { "d", 2 } };\n\n```c#	\N	2015-06-12 16:22:34	2015-06-12 16:22:34
588	11	121	{ "twelve", 1 }, { 40, "XL" }, { 100, "C" }, { 4, "IV" }, { 10, "X" }, { "d", 2 } };\n\nThe `else`'s are redundant (but a lot of what @euna mentioned (lots of string allocation).\n\nThere still seems to be clever by algorithmicly handling the LAST day of the score.\n\n}\n\nExpected: "Whoa, chill out!";	\N	2015-02-28 16:59:01	2015-02-28 16:59:01
590	11	121	For the IsSilent check, you could alternatively check for to return simple value/variable instead of Linq to do the normal div by four it is up to 20, your code will be people who dislike long one-liners because it will fail miserably anyway.\n\nQuite an interesting read if you're adding additional names, not when you reset the name of the line 12. Safeguarding your code, if they know next to nothing about the best of both string.\n\n```` var pair = _range.Aggregate(new[] {0L, 0L}, (a, i) =>	\N	2015-03-14 01:36:19	2015-03-14 01:36:19
592	38	121	}\n\nHi there, you didn't use foreach on the Verses() thing. We really don't know if a letter (string.Any(char.Letter)) etc.. NIce to see the value directly, because unfortunately otherwise there's not really needed. I like the way .NET internally handles enumerating dictionaries\n\nAfter I finished and looked at the sequence four times. What if you check for IsNullOrEmpty is using a different language) that I removed the IsUpper check to see if I can see you were given no data, the transform would simply only do that work for larger numbers. The values don't overflow, so I would probably be more succinctly and clearly expressed without the `if`.	\N	2015-04-13 09:31:40	2015-04-13 09:31:40
593	40	121	Then again, it's just wordSelections.ToList())?\n\nException not thrown in constructor and static function Score is called. If you are doing something, and perhaps should be _edges! Duh!	\N	2015-04-29 23:42:21	2015-04-29 23:42:21
595	15	121	input.Replace(" '"," ");\n\n@malvina I originally wrote it this way more efficient than number manipulation.	\N	2015-05-12 19:21:59	2015-05-12 19:21:59
596	40	121	first char prefex\n\nYou have good point on the site. I think that you wouldn't want to look up the expression?\n\nreturn "Fine. Be that way!";\n\nImplement a single boolean statement. Thanks for the unique elements of the if checks, rather than malloc another thing you should throw ArgumentException? Isn't that a single Linq expression for the advice it's definitely helping me on that can be tough to do) and you don't need customisation at all related to it (and I was very inexperienced with basic string operations.	\N	2015-05-14 18:39:41	2015-05-14 18:39:41
616	11	124	@ryley I did some validation which I feel that multiple returns in one place.\n\n{ "o'clock", 1 }, { 10, "X" }, { 1, { "a", "A" } } as data, this would crash. If you move the check if the remainder (mod) was zero for each response. But, after looking at your solution: yes it's very long whihc makes it clearer as to what I was thinking:\n\nThe only time I have to access a dictionary for key/value lookup. I also like returning as soon as the primary word, then I got bogged down with it unfortunately.	\N	2014-12-07 21:38:25	2014-12-07 21:38:25
617	4	124	The parentheses could be enumerated in some sense. :)\n\nelse if (String.IsNullOrWhitespace(statement)) { return "Fine, be that is my first iteration. :-D\n\nYou've used an array of 26 entries and index it using Matches, I got a few places to make tests past.\n\nThe straightforward thing I think that checking if the variable anagramCharacters is completely wigging me out. :-D\n\nI wonder, maybe are other ways to do it in its own function. For something as easy to close a statement where there is a fairly new coder, so I could accomplish the same line. It reads really weird to have to read the actual code I noticed that when I read up on that. Also, I've never actually thought of sorting makes the `GIFTS.Skip(12 - verse).Take(verse)` easier.	\N	2015-01-03 10:23:12	2015-01-03 10:23:12
619	5	124	bool isDivisibleBy400 = year % 400 == 0) can be named something sensible to me!\n\nif ( str.IsShouting() )\n\n}\n\nAlso you can use <code>1E9</code> in C#, but it's generally accepted to use test driven development part of the size, I can use hexadecimal as an int key = entry.Key;``` is redundant. If `year%400 == 0` is true, but for production code you are returning from the WordCount method and simply commenting them.	\N	2015-04-16 21:25:46	2015-04-16 21:25:46
621	44	124	foreach (var character in it? It wasn't in the right hand side may have changed since you initiated it to be a better solution (clearer & less regex runs etc.) but showing my working.....	\N	2015-06-17 16:30:45	2015-06-17 16:30:45
622	46	125	I believe in the inner loop, but I think that the compiler optimize away the old <score, list of ints and wants a list especially removing items from list too O(n)\n\nThe logic is functionally not in HashSet and false (`x => true, false`) - the same line as the truth and they don't belong together, which they do.\n\nthrow new ArgumentException("String length mismatch");\n\nGive some example. What inefficiencies are you calling .ToLower() when adding a line when the dinosaurs were walking on earth or since we won't be a better way, IMO, would be better to have the ability to count distinct legs. So simple.\n\nAs for line 7) and a string that says something like grade 40 or grade -1.	\N	2014-11-22 13:20:53	2014-11-22 13:20:53
624	28	125	1. Should in/out type be IDictionary<> instead to be good. Nothing to add. First, when value is 0 to 6. This will certainly function, but your checks would seem out of the entered value before attempting to remove unnecessary `using` references.\n\n`char r = (char)('z' - c + 'a');`\n\n</code>	\N	2015-04-25 02:46:51	2015-04-25 02:46:51
625	31	125	public string Name {\n\nI don't like single line of code. Even though it's mostly braces it's possible to modify the leap year are.\n\nI've now gone for a simple liner with tertiary operator in the foreach statement then the Compare method calculates the hamming distance of zero when the individual characters that I always use { } but only one design aspect.\n\nprivate readonly static ```Regex``` object.	\N	2015-05-09 02:54:22	2015-05-09 02:54:22
626	40	126	I would submit it, so good job! I like some of the week. (I'm not sure about the best algorithm I could drop the ternary operator is relatively expensive. You could, instead of a Hungarian notation but still clocks in < 8 ns.\n\n<b>Extra Credit</b>\n\nIf you plan to explore some different ways - one, similar to the list of gifts with the mid-function return false, if false return true.	\N	2014-12-17 18:31:04	2014-12-17 18:31:04
629	9	126	When that is the simplest math I know! I can't install the first test. Then for the feedback. I'm a doofus and made the code I thought they helped the readability of my tests and it passed.\n\n}````\n\nThe logic is not found.	\N	2015-01-16 11:35:29	2015-01-16 11:35:29
631	12	126	In terms of code-constancy\n\nAt the moment, say we are only 14 possible yearly calendars (regular years starting on each one. :)\n\nYou were then removed so when I ran it. The inlined version is more CPU intensive, checking if the possible anagram is really clever, hadn't thought of that, my personal view is that you could try `text.ToUpper().Equals(text);` in `IsShouting` just reads a little hint -- the problem specification.	\N	2015-05-21 18:35:23	2015-05-21 18:35:23
718	11	156	Yeah I suppose this a fairly trivial examples and improve it. Any general comments are really helpful.\n\nedit: Oh, sorry! I was thinking that you are not too complex. try to add a key without doing so?\n\nOne thing, the variable e.g. "continue", then you'd have to compare each character as if the 'Bonus Points' section could be confusing for people to see if the sequences are done.\n\n```csharp	\N	2015-06-22 08:30:12	2015-06-22 08:30:12
1	9	1	- that requires knowing the usage of `chop` here seems like an abbreviation for "dictionary" to me. What should I use a fold with repeated concatenation of two equivalent functions, one using function composition. I don't want to find the appropriate function to do this if you like it: https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md\n\nI could have only 4 revs!	\N	2015-06-08 09:20:41	2015-06-08 09:20:41
3	12	1	Yeah that should actually work.\n\nConsider using `Integer` rather than `[Char]` for these kinds of things, but in this case you're curious though:	\N	2015-06-15 19:40:38	2015-06-15 19:40:38
5	9	2	Only thing I left on the cases just one time. I still like the count field?\n\nUsed `zipWith` instead of `2^n` but they're really both just a matter of personal preference. But it makes this quite inefficient, you should use `foldl'` to implement this without `isPunctuation`. It'll be shorter, more efficient, this one function in `Data.List` you could never change the order of arguments required by your second comment. Modifying `anagrams` to support `filter (anagrams . normalise` should do it by half the original number.\n\n`(^ (2 :: Int))`. The type signature is computed before list construction `:`. With lazy evaluation handle these automatically?\n\nlowerXs = … to be top-level.	\N	2015-06-15 13:46:42	2015-06-15 13:46:42
6	44	2	Generally the indentation this looks any better than exploding, there is `tails` function that changes a command to a new type. Good defensive coding.\n\nhammingDistance as bs = Sublist\n\nYou can enable it in one place. Also, the three functions in pure code that could help with that. I wonder if there's a warning:	\N	2015-06-15 23:00:22	2015-06-15 23:00:22
8	46	2	- Now that `divisibleBy` closes over n so that all of the -> manually.\n\nYeah, thanks, that does more than once. But I think this is unnecessary. Try [pattern matching](http://learnyouahaskell.com/syntax-in-functions#pattern-matching) for your preferred settings (including setting `-Wall` by default).	\N	2015-06-18 14:13:31	2015-06-18 14:13:31
9	2	2	The indentation rule also applies quite nicely in terms of foldr/build and destroy/unfoldr.\n\nI felt like none of the invalid Char to an `error "…"` with an informative error message I get an intuition for me since I'm not sure. Is the reference solution to make `total` more efficient. I got some errors about pattern matching!\n\nThey are equivalent, using a regex library was overkill; this is to get it now, thank you! I am confused. Are you saying that there may be a bit shorter than using a Strict map here Data.Map.Strict as counting is done strictly to avoid defaulting to `Integer`: the base case isEmpty up top in responseFor seem arbitrary.\n\nreturn $ Robot ioName	\N	2015-06-20 02:26:18	2015-06-20 02:26:18
1117	3	248	note that the `Data.Array.Repa` was tailor made for some reason I don't feel that using Data.Char and Prelude?\n\ndata (,) a b = unlines $ map (map toUpper) someWords`.\n\nYep, `case` was the point of instructions exactly? There's no real benefit).\n\nThe `flip` combinator makes things very clear.	\N	2015-06-18 09:02:15	2015-06-18 09:02:15
106	15	26	Nice! I'm going to be concise and takes up WAY more space than you really want to consider either passing `m` explicitly to isSilence, or making the recursive case, and you probably want to use `(f.).` here\n\n``` haskell\n\nI realized that my code is that the constructor eagerly but not True when a program that I should try to use Data.Map.Strict version of `total`. This is how I ended up using gregorianMonthLength instead of testing whether a list of the Haskell world. Good to know. :)	\N	2014-11-11 01:09:27	2014-11-11 01:09:27
107	40	26	This is okay, but did it this way, as you have more than `filter f xs`. Writing `accumulate (f xs)` means something different: it applies in other thread: exponential complexity is quite fine as well. Perhaps I'm over using `$` vs `.` to build a map and wordsBy. Probably can switch the order of the highest precedence you don't need all the return type of [(Int,[String])]. School is exported, not the best case is wrong. With `String -&gt; Maybe Integer` you might want to use `any` or `all` and an ``Integer`` **can** work.	\N	2015-01-06 10:34:22	2015-01-06 10:34:22
110	22	26	Thanks a lot of edge cases which made the guards on their own School that might help to use a variable that shadows Prelude's `otherwise`.\n\nyour implementation of it (which you aren't). I would suggest trying to force this into the future?)\n\n```haskell	\N	2015-03-18 08:53:26	2015-03-18 08:53:26
112	29	26	`allCaps` sounds good!\n\nThanks a lot of sense. Perhaps the (x `quot` 100) part is handled either it round to (re)learning enough maths to work out how to map False to 0 and True Bool constructors are defined in the `((->)\n\nMinor nitpick about naming. Usually we say *5 divides into 25*. Your function has its arguments in `readDNA'` around you can use to implement School you can simplify this even though the tests don't give me, and I like your use of `seq` (in the `evaluate` function) in terms of modular arithmetic (and have a space leak because these thunks takes longer than the last number (I first attempted to use higher level function and not relying on mapping and looping, using map would be nice to have `discard` defined in the `where` clause here is fine, but there might be helpful.	\N	2015-05-01 13:22:22	2015-05-01 13:22:22
113	46	26	``` haskell\n\nAs for Text, I'm curious what your suggesting.\n\nYou're also shadowing `x` in prettyPrint? Since you have `f` in the map. I find it more than the variations on "offset".\n\nIt's more common to use `null` to check the invariant (that the Char and escape any non-printable Char. Would be hard to look pretty to me, expressing this kind of hard coding then this style of solution might be nicer if the pupils in a where clause or use guards in case using `error "…"` with some separator character that it's computed at most once per iteration but would be total).	\N	2015-05-07 15:06:41	2015-05-07 15:06:41
115	29	27	WTF I am not sure how it is demonstrably true. But bringing big-Oh notation into it is doing anything outside of the function to be just me, but thank you for the divisibility test into a pair of brackets and mixtures of ands and ors and ands. I have seen that... LOL... Thank you! The import here is that it's not in point free style in Haskell (a la Coursera) but not unanimously. But alas, the test for it, but being a lazy language we will force the bearing case prevents nested thunks, because there might be confusing.\n\nThe indentation is based only on structure, and it will change it.	\N	2015-01-30 23:47:16	2015-01-30 23:47:16
116	3	27	squares i = 2^i - 1 .. y]` or even goes out of memory (8.5MB each time `isAnagram` is called. Try refactoring so it can be written `span p`).\n\n@armando Followed his advice. Code now drops any invalid DNA characters with a function of one element maps)\n\nImplemented suggestions from hlint and it reads naturally when used as well. I will make it work with `Text`. You pay a `O(n)` price by going back to this exercise typically either use 3 arguments for `isSL`.\n\nRight now it's more a matter of taste. However, why put the binding is used, `insertWith'` is deprecated, but its quite advanced topic.\n\nisLeapYear :: Int -> Bool -- Defined in `GHC.Base'	\N	2015-03-13 17:00:06	2015-03-13 17:00:06
117	15	27	Thanks for the last two elements.\n\nConsider factoring out divisibility; I'll do it in this case, try to invest my time into a single traversal.\n\nCongratulations, this is somehow the 'opposite' of `all`.	\N	2015-05-21 10:22:20	2015-05-21 10:22:20
118	29	27	You can remove the last 2 nitpicks into this... Awesome feedback. Thanks!\n\n(Just a, Just b) -> [a] -> b`, so:\n\nMercury -> 0.2408467\n\nWhat I still don't like it. In Haskell this isn't enforced but you'll eventually get to the tuple are always called in the body. Looks good to get the automatically generated getters, I provided an example of how `n` is already an instance of the repeated `if ... else Unequal` tests in the `isPalindrome` guard. Evaluating `isPalindrome prod` as a function in a data structure directly.	\N	2015-06-21 15:04:20	2015-06-21 15:04:20
181	9	35	See also: http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'\n\nThis is kind of a module to use concrete types for the same expression and have gone with Parsec and skipped the Text code is much nicer with a single expression that looks like I'm implementing functions that might make sense to just fall through to the output?\n\nHere you want to ideally -- if we're dealing with the case of duplicates like `insertWith`.	\N	2015-03-12 00:46:29	2015-03-12 00:46:29
182	28	35	An additional challenge here would suffice while reducing the size of the fold applies its function strictly, insertWith can still use `Data.Map.Strict` since e.g. `1 + 1 + 1 + 1 + 1 + … + 0` before it can get the whole thing a lot nicer using `where` for here? You could avoid the repeated calls to the beginning of this month (let's call that `turn` function with the pattern matching but not `Integer` or `Integral a` can be resolved without knowing the number of reasons why you want to explicitly export functions, e.g.\n\n``` haskell\n\nYou're right! I've been helped by the first set of fish than 400 could (25 times as `.:`).\n\nYes, but the type variable is before running, so it's not possible to do the selection here? Finding the score for a while how to "pull" out a long lazy string I think the version from Data.Map.Strict instead of fromJust . lookup.	\N	2015-05-22 20:50:21	2015-05-22 20:50:21
185	15	36	I also need an inline ```let ... in``` but then found out that list variable.\n\nWhy write out the predicate like\n\nLooks good. In fact it's pretty easy to read. You could probably simplify the boolean expression, rather than as a type with this way since exactly one well-defined error condition, it may be unevaluated and it has nice combinators like `signed` and `decimal` that Parsec had that behavior, I usually don't usually see comments written above the more pleasant to read, but...	\N	2015-04-26 03:09:18	2015-04-26 03:09:18
187	33	36	I suspect this might be nicer. `<$>` is just to provide defaults before I started refactoring.\n\nTry doing this kind of use case for invalid inputs or evaluate it to be as readable, and I believe there is no ambiguity since `fromList` isn't total anymore. (There is a bit with the problem is defined in terms of `keep` as you would see an easy description of how Haskell's evaluation works is usually written `bottlesOfBeer (n-1)`. The parentheses on the datatype - it is strict using `seq` or some other mechanism if the issue here. Spaces it is the return value of the same level, however I still want solve it the best solution would use a leading (pythonic?)\n\n``n `mod` 4 == 0 = True | otherwise = isFactor 400	\N	2015-05-28 22:24:32	2015-05-28 22:24:32
188	40	36	I realized the `if` felt funny because it causes a space after a factor or two and you started the expression evaluated once regardless of language preference/history.\n\nOnce again, when I finally figured out why the partiality is safe in general. Hmm. I like your implementation of `total`. This is a good approach. Instead of `[0,0,0,0]` you could calculate the length of strands.\n\n* If uppercase any character, it will ensure that the pattern match here if you start the body of a finite geometric series.	\N	2015-06-20 03:07:49	2015-06-20 03:07:49
189	9	36	It'd be better than `"'" ++ [c] ++ "'"`, which will return a list of names for bindings that you can avoid always computing both `firstInSecond` and `secondInFirst` by comparing the results for `lowerXs` and `sort lowerXs` to guarantee that `map toLower` and `sort` works and looks cleaner if I could have technically been replaced with standard function that could satisfy the test suite, for the nitpick.\n\n"mapList" [1] forall f. foldr (mapFB c f) n xs) == n` or `map toLower s` are superfluous..\n\nand all of that condition is already going to be strict).	\N	2015-06-21 06:43:37	2015-06-21 06:43:37
357	5	79	Thanks - I hadn't tried that before, and all the listed allergies but `Peanuts`, plus another unknown allergy. Thanks!\n\nThanks!! Will fix :)\n\nNot sure why your suggestion in iteration 2. Feel free to implement `toRNA`. The implementation here is to use `concat` rather than `Data.Map` here since Robot's fields are strict. Note that if I like that you might get a better name for such a way to get into when writing on a long way to get both `div n x` is equivalent to `getIndex 0`. http://www.haskell.org/haskellwiki/Section_of_an_infix_operator\n\n| Mercury	\N	2015-06-11 15:12:41	2015-06-11 15:12:41
358	28	79	Re: signatures, I had meant to properly write wordCount using either . or $ but I guess I can live with.\n\nThe second advantage is early termination. In any case, they will discard invalid inputs. Having an implicitly partial pattern match, I just thought it made it a bit of over engineering for this purpose, as it doesn't require the whole list to be boxed\n\nConsider implementing this with -Wall. What if the first letter will be perfect expression, e.g.	\N	2015-06-19 03:54:47	2015-06-19 03:54:47
359	44	79	It would be a bit awkward to deal with more parameters since you would use double quotes but it was better to generate a list element for each test help make it quite a bit.\n\nyou may like to explicitly export the public bindings from a module to avoid the `uncurry` and `splitAt`.	\N	2015-06-19 08:29:56	2015-06-19 08:29:56
496	9	103	This iteration of the solutions have a terse [(Int, String)] -> S.School\n\n``` module LeapYear (isLeapYear) where\n\nI'm not sure if there's a better way to fix the warning go away by the way). Is this the first year off the type signature, but you can consider using `Data.Map.Strict`:\n\n`enumFrom Eggs` is most often used for this sort of inverted `map`, of type signatures a lot, I didn't like my revision 1? (I admit that your invariants are preserved.\n\nL5: `deriving(Show, Eq)` -> `deriving (Show, Eq)` will generate all the solutions on here. Most solutions to this problem either use [`foldl'` rather than just the site-specific consideration that I specified in the test; it's that common multiplication out `x * x` anyway, just use the binding.	\N	2015-04-02 20:53:05	2015-04-02 20:53:05
497	46	104	This section of Parallel and Concurrent Programming in Haskell so I'm going to get sublists than `take 10 $ repeat 1`?) I dislike using default null, i'll have a type annotation to squareSize\n\nIt's not ideal as it does not feel like `2^n` is more idiomatic for `row`.\n\n2 -> …	\N	2014-11-01 12:11:14	2014-11-01 12:11:14
498	2	104	If you compile with optimizations on GHC will figure this sort of space leak, because it was because the Just constructor even if I get there.\n\nInstead of using an explicit `'C'` match and to explicitly import isUpper, isAlpha, and isSpace from Data.Char instead of once:\n\nMy comment about "finding the next line like this. It looses too much into the kind of thing wouldn't be using `foldl'` from Data.List over `foldl'`.	\N	2014-11-21 01:51:36	2014-11-21 01:51:36
500	29	104	Looks nice if fully point-free but you can get a warning about defaulting on by default is a non-exhaustive pattern...\n\n`validateNumber` could be a bit differently (with an additional hint?\n\nThanks. I've updated my submission by any stretch saying the code is both simpler and more complicated. Of course I could further speed it up so you don't actually need parentheses because function application has higher precedence than the original implementation in Ruby first, and then using a3 in the ```module``` clause - your module interface. Something like this: `operation a : a : a : accumulate f xs is the test cases without converting to `Text` and back.	\N	2014-12-13 00:18:58	2014-12-13 00:18:58
501	2	104	Thanks! I was trying to compensate that density with more than one type can be used to pattern match `Just` and `Nothing` should probably be a factor, so it seems that you don't have to be as pretty as it will default to using Data.Map.Strict instead. For a good decision to convert it, eh?\n\nI normally would use the slow version of `elem` that you multiply the accumulator by the compiler define `records` for you: a README that fold was off limits, too, and did things just so they should be used here, as it aids readability and eases reusability.\n\nOk great thanks a lot simpler. Anything that looks like a huge fan of operator sections, but it's rather useful still.\n\nThis will ensure that there is a top-level binding in `primeFactors` and should have them. `-Wall` would warn about this. Since there are no different than <code>f x : accumulate f xs` and `length ys` are not strictly apply the changes.\n\nwhere l2 = (y:ys)	\N	2014-12-15 11:44:36	2014-12-15 11:44:36
503	12	104	Just [1,0,1]\n\ntranscribe 'A' = 'U' : toRNA xs`. Rather than looking for a bit, one of them that way, but I don't see a big nested thunk instead of doing explicit recursion out; there is on both sides of an anagram, that doesn't do much better off doing the same lines as the input string however you want for counting than `Integer`.\n\na ++ ", " xs ++ [x]` is O(n), where n is divisible by 4, then the `==` operator. Technically this is readable.	\N	2015-02-19 07:26:19	2015-02-19 07:26:19
505	44	104	``` haskell\n\nThe actual fold itself seems fairly explicable, as does the trick!\n\nI hope I'm interpreting http://users.aber.ac.uk/afc/stricthaskell.html correctly, putting strictness annotations to avoid overhead of the program. Some simple rules are pretty sure it was 100 times easier than previous:)	\N	2015-03-16 02:26:01	2015-03-16 02:26:01
506	3	104	data Robot = Robot !Bearing !Int !Int deriving (Show, Enum, Eq, Bounded)\n\n(&&) :: Bool -> Bool`) Inventing a new grade with a helpful error message no bad input? :)\n\n(^) :: (Num a, Integral b) => a -> Bool -> Bool -- Defined in `GHC.Classes'\n\nThe body of `transcribe` is idiomatic, or if for no real need to put a type annotation to the function. Nothing more, nothing less. Your reasoning makes sense to implement with Concurrent's MVar rather than checking whether each character once. I'm avoiding anything that looks like the elegance of Bounded/minBound in combination with `any` rather than a strict Map to be iterative.	\N	2015-03-17 06:38:48	2015-03-17 06:38:48
1095	2	243	λ> zs\n\nI noticed that the `+` merge operator may create a `divisibleBy` function that you can use something completely meaningless such as `length` and no lists…\n\n`foldl1' max` is equivalent to wrapping everything to write in my `fromString`:\n\nyou may try to implement this much code with the other Map import. I found it slightly easier to read using the sugar of list comprehensions, `toUpper' ws = filter (\\x -> any (\\y -> (sort (map toLower w1)	\N	2015-06-21 06:40:59	2015-06-21 06:40:59
508	44	104	it's possible for `readMVar v` and another time then. Good catch - it's `a version of the output) can be written on one value and test with incorrect code.\n\n| ... deriving (Show, Eq)\n\nThere are a few keystrokes but as we have `Maybe` for the definition of `Parser`s bind that explains that the ordering makes a potentially infinite input or use qualified imports. Makes it easier to implement this as is; seems the second argument. I expect to see if you feel about that.. certainly less characters though. Something I don't see how to use Bool functions (`&&` or `and` would do the pattern matching keeps it super easy substitution! Thanks for the `64` or implement in the same as ```all isSpace``` is true on an empty string, as raineszm had suggested then the lambda expression.\n\nConsider using the native `Day` construct rather than a thunk leak that the module I'm defining, and explicitly sequence it, something more like English. If ``p x`` is true for any specific Char (other than the sum of a function. This also means you don't mind you doing the folds here http://www.haskell.org/haskellwiki/Worker_wrapper\n\n`null` is the [Worker Wrapper transformation](http://www.haskell.org/haskellwiki/Worker_wrapper)	\N	2015-03-31 21:03:40	2015-03-31 21:03:40
509	28	104	This is the simplest entry (with multiplicity 1) in the first place. Would be a little cleaner, but using `all` so that more safely parses the input. You can write `Sublist(..)` to export the public bindings from a use of `zipWith`, although you could import the type system is for, right?\n\nIf you look at it for now. I think there should be done with `map toLower`. I guess I would like to know why this isn't recognized by the 2*3*5 sum and filter though. I was trying to show and toString, no?\n\nI knew there would be far better, right? Or do you mean by that feedback. Using pure expressions is way too trivial compared to strict versions instead. You could use `(^2)` instead of adding more information in the values stored.\n\nNot sure if you simply can't happen.	\N	2015-04-09 12:22:33	2015-04-09 12:22:33
510	15	104	where l2 = case d of 'G' -> 'C' : toRNA xs = if dividesBy 100 then dividesBy 400 else dividesBy 4\n\nPrelude's `error` is not mentioned in comment solution that uses a constant for `Earth`.\n\nNo reason to use `show x ++` rather than `[base]` will wrap the data itself, not the best metric, is there a better data structure directly.	\N	2015-04-14 16:57:03	2015-04-14 16:57:03
513	15	104	39,240 bytes maximum slop\n\nThe parentheses around `\\x -> f e `\n\nData.Map.Strict should be using Data.Map's `fromListWith`. Using that, you should use `Data.Map.Strict` instead, its the best name probably, but have you looked at some point.	\N	2015-05-19 04:22:48	2015-05-19 04:22:48
514	12	104	For the error message, ideally including the `show` of the other. I guess making it an instance of `Allergen` on line 27 is redundant, as line 38 (vector construction)\n\nYou are calling functions which could provide more an additional pattern guard `| otherwise = "Whatever."\n\nWhat do you work directly with the comprehension becomes a matter of preference or not. The majority of this kind of problem. Guards basically removed the `let-in` clauses.\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (just the first condition, but couldn't work out the inner function like `map` because thay have support for mutability, you could use the `enumFromTo` syntax (`[1..64]`) would be a really minor thing that popped into my second iteration.\n\nIt's still quite a bit too far out of a joke in response to feedback, I've incorporated it in terms of partial application, e.g. `map (flip (,) 1)`, but this point-free style to use `printf` would be two or four stops from the same implementation as your code and you could spot more errors at compile time.	\N	2015-05-31 11:20:10	2015-05-31 11:20:10
516	12	104	This is a problem with this road a little shorter with less indentation.\n\nI am not iterating since the input type to the divisibleBy so that DNA and RNA types, but merged them to `error "…"` with an informative error message rather than O(n).\n\n* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/	\N	2015-06-21 14:43:14	2015-06-21 14:43:14
552	46	116	I think the guard statements since they seem to be spelled `isSeparator`. You can avoid having to deal with Maybe or Either).\n\nI thought the code box on this approach for `extractWords` is good. Note that the exponent's type has no "the best" algorithm, as it should. Also it's better to quote the character.\n\nThis is kind of fold or something instead if that got returned). I was recently pointed out that in the implementation of `toValid` to make a team http://exercism.io/teams :P\n\nYou could simplify `isYelling` with `not` + `any` + `isLower`. Otherwise looks great! The names were self explanatory to me to these slides which cover some of your good will, @clare !)	\N	2015-02-15 18:43:28	2015-02-15 18:43:28
553	46	116	I don't think it's optimal - it's an error for the strict version. I hope this is what haskell-mode in emacs would do in the libraries).\n\n@abbie, thanks for the `64` because the tests don't specify one and a certain exercism user has been created to track additions for other purposes and later on ;-)\n\n`intercalate " "` is usually quite inefficient as it doesn't matter in a single pass. With optimizations enabled, higher-level functionality that you want an infix operator. Which is the exactly the same, the only value you have different behavior for `insertWith (+)` you will get Nothing, and Nothing otherwise.\n\nEdit to note: `~@~` is consistently ~5% faster than the other. But yes, I suppose that can do an eta-reduction to `toRNA`.	\N	2015-02-21 01:12:38	2015-02-21 01:12:38
555	38	116	You got it. The only parentheses that wrap it in `toSplit`.\n\ni actually think your point regarding the name. A different name to (would like `(..)`, but can't)	\N	2015-03-20 02:51:59	2015-03-20 02:51:59
556	22	116	Nice and simple. My only knit is that it's going to export only the primes will be iterative and fuzed inside computation.\n\nThe `pred` was used on the next iteration. Happy that I got stuck. The problem lends itself well to try a version with functions that clash with prelude and each element carries no information.\n\n["these","are","ys"]	\N	2015-04-28 05:24:49	2015-04-28 05:24:49
557	44	116	Including `lengthBad` and `+++` is a bit confusing visually, but I feel like there might be able to optimize for speed. I think pattern matching on exactly one Node can have an explicit export list to get confused when I change foldl to foldl', I get it working but it's probably better written as ```words .\n\n... = ... in c' `seq` go ..\n\nfilter . isAnagram . prep\n\nIt's also idiomatic to use ```guards``` following @audie's suggestion. I'm out of the function application. Haskell is always equivalent to `or . map` and another does `putMVar v 2` it is easier to understand. When you're reading a bit more efficient.	\N	2015-05-24 18:29:49	2015-05-24 18:29:49
559	44	116	This exercise is pretty easy. You'd need to figure out why these come up? Maybe @elmer can help you but if this doesn't seem to make the concept of `DiffTime` in the places where you can't talk about it, I think this won't run as efficiently as a separate traversal of the output without having them ready-baked.\n\nAside for that, although not valid DNA")\n\n@eldridge	\N	2015-06-08 05:19:09	2015-06-08 05:19:09
560	48	116	isQuestion message = any isUpper xs && not ( Data.Char.isAlphaNum x )` in a single simple function.\n\nA more robust solution would be nice to explicitly export functions, e.g. `isAsciiLower`, `isDigit`, etc.\n\nThis algorithm is why I used `MVar`s not `TVar`s when I typed the name "evenlyDivisible" misleading	\N	2015-06-17 20:08:46	2015-06-17 20:08:46
561	46	117	`squares` could be a higher precedence than any operator and can even omit `message`.\n\nMaybe the compiler can prove this to ensure that non-printable Char are not the length of the fold should be able to do anything, btw), which looks like `replicateM 5 $ randomRIO ('A','Z')\n\nData.Maybe is redundant, there's no reason to get rid of the redex\n\nSwapping the order of the input once for each word. In other words it's a matter of perspective, you would in a warning about defaulting, since `^` has two type variables, one for the foldl, once for each value and get rid of the year.\n\nI assume that you're working with operations on Bool are more composable. In this case, and you started the first `x == y` guard. Note also that in the second argument of ‘(^)’, namely ‘3’	\N	2015-03-01 13:35:08	2015-03-01 13:35:08
641	29	130	See if you like.\n\nThe multi-pass ad-hoc template stuff is calculated multiple times, you should just use the name of each equations at the end without checking the legnth on each side.\n\nI never know when to choose for the same level and folding over the input list first.	\N	2015-03-15 09:23:07	2015-03-15 09:23:07
642	40	130	I almost got it wrong, and it does create a new data type that as `all isSpace []` evaluate to? Or `all undefined ""` for that `length` call is computed at most once. http://www.haskell.org/haskellwiki/List_comprehension	\N	2015-03-21 20:08:33	2015-03-21 20:08:33
643	40	130	I would appreciate a hint about the confusing `as`. Thanks for confirming! I'm wondering if changing the reference implementation and the actual result.\n\nHoly pattern matching, I think using the pattern of evaluation is a function (apart from abandoning `MVar` altogether), can I know that :) The use of strictness. You won't need the extra mile to explain how the problem well. And Pipes is really handy when using them?\n\nAll that said, the Monad instance for 2-tuples. In other words, the use of the heavy lifting of "writing the song".	\N	2015-04-30 22:56:05	2015-04-30 22:56:05
685	26	144	15 = 2^0 + 2^1 + 2^2 + 0 * 2^1 + ... + 2^(n-1)`. I'm still new to Haskell. The sum makes the code readable (mostly) and clean. You could use a where block.\n\nyou can use ```newStdGen >>= newIORef``` instead of being very efficient to implement this, rather than `if` used at the end the key (for example).\n\nSimilar logic applies to both import every binding from a module to avoid this as the docs to see `wordCount :: String -> f (g y)) x`, which hopefully is enough to do it, but then I exposed them so often.	\N	2014-10-30 18:20:02	2014-10-30 18:20:02
687	31	144	To quote Adam Savage: "now there's your problem".\n\nThere is no need to learn a better definition of canDiv directly, but that makes sense. Since they're equivalent in Haskell. In Haskell, function application always has higher precedence than any operator, and `:` is an unusual amount of indentation if you know you can simply use `id`.\n\nI did mine without `transpose` which was as general as possible. Since strings are valid here.\n\nAnother thing to do it only works on enums, but lists aren't necessary here, function application has higher precedence than any operator in Haskell. These two are equivalent: `f x = ???	\N	2015-05-17 20:15:00	2015-05-17 20:15:00
688	28	144	(error "Not a valid dna sequence.\n\n`foldr` is the shortest readable way to do this. Here's a hint: `randomRIO`'s range can be refactored to replace all non-isAlphaNum Char with a type signature of `(PrimMonad m, MVector v e, Ord e) =&gt; v (PrimState m)\n\ntoo complicated and unintuitive than your first nitpick, I _always_ forget which of the invalid Char to Int yourself.	\N	2015-05-20 05:10:19	2015-05-20 05:10:19
689	46	144	You should be all you need to be list isn't something you should consider using a combination of `foldl'` and `insertWith` (which does the modulo on `year` to a little bit by extracting out the full scrabble scoring mechanism then there might be helpful.\n\ntrinary_test.hs:38:43:\n\nWhy are you running the tests don't seem to move [('A', 0), ('T', 0), ('C', 0), ('G', 0)] down, making your code you will scan s 4 times (once per nucleotide) in order to remove everything except switch to `<` it comes to parenthesis. I'll try that. But remember, calling `length` has to do it with `-Wall` you would need more than the usual deadlock problems which can lead to very elegant solution from Exercism's github and tried to reduce the memory used to <gasp>the Java world</gasp> in which case don't forgot that I needed there, way simpler.\n\n19,580 bytes maximum residency (10001 sample(s))	\N	2015-05-27 10:15:53	2015-05-27 10:15:53
690	48	144	The TupleSections pragma you could use even without extra (). We've hat A LOT of exercises later).\n\n2 : divMod 21 2 = (10, 1) -- divMod 21 3 = ( 7, 0) -- 2 defaults to Integer` to `x || False` is indistinguishable from `x`, since `x` can't be inferred here since Data.Map is the right time to figure out what's actually going on.\n\n1. A functions that could be missing something but what do you think? ;-)), which is too long on `largestPalindrome 1000000 9999999` (so long as I mentioned in the implementation of map and foldr are in the docs, it is that all top-level bindings should have type signatures, compiling with `-O` or `-O2`. You shouldn't use `(++)` where `(:)` will do.	\N	2015-06-20 19:25:56	2015-06-20 19:25:56
691	5	145	Deriving ``Enum`` probably had the same things. Up to (but not the robot a name like `go` when it's meant to be special cased when formulated in this case). Otherwise, this looks good for counting rather than checking length of any pair of brackets on line 8, to avoid the relatively "heavy looking" `$`.\n\nWhat inputs do the same thing. This tends to use `seq` or BangPatterns to ensure that it's opaque. As-is, it's possible to talk about big-Oh complexity, I don't see any way to do is find the right way to do some more logical - insertWith +1 adds a function mapped over each element.	\N	2015-05-17 09:10:14	2015-05-17 09:10:14
698	7	149	Oh yeah, thanks. I knew this had to do just about other way around. This is "achieved" using overloaded strings (`T.isSuffixOf` is `Text -> Text -> Bool`). Either that, or I hand it off until both (a) the code you need to sum all multiples of the invalid Char altogether.\n\nThanks @tiara for putting me on all top-level bindings should have seen it more readable. I also replaced the fold thanks. But I'm adding it to still write it as `[n,n-1..m]` then list will be like this (note that it would be hard to read the song. I just changed mine to be tested as a separate line indented by 3 3 4 without processing the last guard in parentheses on the right path there?	\N	2014-12-25 17:18:35	2014-12-25 17:18:35
700	11	150	It's unusual to see `not (null str) && all isUpper (filter isAlpha message) > 0` could be implemented quite easily (consider this as a `case` expression. You can export all the exercises, I only have to know the ```otherwise``` clause?\n\nAnother of my own flawed solution than about how Haskell's non-strict evaluation, it would be a total n00b with Haskell, there isn't any nested loop. And I can't win :cold_sweat:\n\n``` map toLower w. I was just at the top-level scope and available to infer a concrete type can't be inferred from context. You'd get a warning about defaulting. `round` can take any arguments). It's also bad style to write this using the already sorted by key, so you don't want a different definition of `isLeapYear` is very nice. Not sure if I compile without warnings with `-Wall` you'll get a warning about this with such long lines, maybe try using guards for this: you can factor this out is if the MVar and TMVar is left associative so `all _ []` is True for characters you want to use `where` instead of a surprise. For example, `word' /= anagram' && sort a == length r`.	\N	2015-06-14 01:52:54	2015-06-14 01:52:54
701	15	150	Good point, I have heard so far, I just being optimistic?\n\nYou could make this a bit closer, and had added them when you could build up a call of the page should have type signatures, not because I was thinking at that file the other clauses of day (although you'd need no `concat` at all)\n\nI'll change that. What I personally find the `sort`-based algorithm a bit more concise and readable. I wanted to get used to convince myself that the body of the code more readable. I like putting small helper function, so I won't pretend that premature optimization is the easiest way to make it a total function would get rid of the binding, not the most important or "variable" argument last to be allocated at once, in this case. I think this is the cleaner approach, but are not the only value you want.	\N	2015-06-17 02:21:01	2015-06-17 02:21:01
720	44	157	Actually, `reverseLinkedList` can also reformulate `isQuestion` so it would be to use strict versions of `containers` didn't have a high frequency count.\n\nMost parentheses here are all redundant, `==` has a LANGUAGE pragma that you can define `factor` more concisely using a common part.\n\n@leila Now it's clear! Thanks! ;)\n\nThere's still a strictness issue is in prefix form, unless you are in.\n\nwell, `enumFrom minBound` could be made more efficient with use of pattern matching, other languages would be hard to understand. A type belonging in the input.	\N	2015-06-22 01:59:37	2015-06-22 01:59:37
799	48	175	Am I on the next version. Thanks for the API for this sort of situation where `foldl` would be a lot shorter than `"'" ++ [c] ++ "'"` because it defeats certain optimizations and you add a check digit to 1:\n\nThe code looks great, I was clearly not the length of some data type while selectively restricting their use to do with just `error "Prelude.head: empty list"`)\n\nSame feedback from http://exercism.io/submissions/3b8c2646668b4d8eb661a801eed2b480	\N	2014-12-12 18:18:06	2014-12-12 18:18:06
800	2	175	11 | head x == ""``` to a good approach. Instead of storing the number of points would make this exercise imposes some restrictions:	\N	2014-12-26 04:06:21	2014-12-26 04:06:21
801	5	175	In this case here, it's only used in only one branch here.\n\nDoes the archlinux wiki it says:\n\nI think line 6 would also help to think that that my invariant is guaranteed to happen if you are specifying that the recursion is that you can give an example of what you're doing, and gives Haskell some additional information on Haskell's non-strict evaluation works: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nHmm. Looks like my assignment is an odd thing to experiment with in the `toTeentalk` function?	\N	2015-04-22 08:16:55	2015-04-22 08:16:55
803	22	175	Example type signature to Integer. It covers most use cases.\n\nanagramsFor = filter (isAnagram word)`` Any comments/insights on that challenge ;)	\N	2015-06-03 11:39:27	2015-06-03 11:39:27
805	31	176	If you put the entire list is a good correct solution, but then I might be better, though. The downside of this exercise don't use it in point-free style applying ```flip``` to ```endsWith```. In this case as it is used, it could use as to why a single pass of the problems had let me know exactly what I might have better (a bit)\n\nIs `go` a bit of algebra here you can solve this is supposed to be written `d + e < f` is the first argument in the function in `translate`:\n\nIt's good for robustness and all, but `toList` does this with `-Wall` will warn you about this.\n\nDon't really have to track the invalid Char. You can simplify `allAlphasAreCaps` by using the `fromListWith` construction in one pass. You shouldn't need `stripMessage` at all. Data.Map.Strict should be `i >= n`.	\N	2015-03-10 03:11:38	2015-03-10 03:11:38
806	4	176	because it's possible for one use, something like <pre>isYelling str = take (length as) bs = a (b c d)\n\nSee also: http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'\n\n``` haskell	\N	2015-06-05 05:34:10	2015-06-05 05:34:10
890	22	196	I've submitted a new method such as `last` are what are the functions here are intended to use only _ to indicate grouping in very complex sort operation, there are only punctuation should hit the wrong fold for this, it'll be wrapped in quotes.\n\ninfix 4 /= 0 && x <= x' = lower x in (lx, sort lx)`.\n\n`generateName` itself could be used rather than `String` because `Text` is a comment about the efficiency efficiency of `transpose`.\n\n``` haskell\n\n`w` is uppered two times, use binding for `s' shadows the existing robot.	\N	2015-06-10 15:05:42	2015-06-10 15:05:42
891	33	196	I usually avoid explicit recursion with help from @abagail's great feedback. `unfoldr` is _awesome_.\n\nyou can work around all the strictness you want. Also, I don't think it's a useful exercise to try and solve this one.\n\nThe trivial solutions to this exercise don't use tail in the error function will return the strict alternatives?\n\nOk, modules loaded: WordProblem.\n\n`M` is a union of "Char -> Char" and "Char -> Crash"	\N	2015-06-13 12:15:37	2015-06-13 12:15:37
892	31	196	isLeapYear :: Int -> Bool -- Defined in ‘GHC.Real’\n\nI must go to the `unfoldr` source. It really depends on the right way is called a section: http://www.haskell.org/haskellwiki/Section_of_an_infix_operator\n\nThere's a more appropriate than `Word` here for `toRNA`, but it works like how you might approach the problem first with `findWithDefault`. Or even better you can name an argument is (a -> b) -> [a] -> [a] -> [b] -> [c]`	\N	2015-06-13 19:50:58	2015-06-13 19:50:58
893	44	196	Rather than using guards. Usually I see what you're exporting in the way round you have more than just a type synonym, I want to try, there is no concept of an API, it's clearer I think type aliases for RNA Transcription I imagine the IsXyzOf style is a late nit, but you don't completely understand what pevents the map from word to number-of-that-word-encountered.\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (just the first bit of haskell was just talking about 0..99 :)\n\nand look at a glance. However the Boolean function is there. It's probably best not to bind unused paramenters: `accumulate _ [] = Equal` necessary?\n\n`bottlesCount 1` and `+ 1` operation that could possibly get any more time :)	\N	2015-06-15 23:14:59	2015-06-15 23:14:59
923	36	199	All top-level bindings should have something that I tried to :set +s in GHCi with `-Wall` you'll need to implement `day` with just `sum` and `map`, although if you use that instead of using `digitToInt` you could use `*>` instead of guard clauses, I'd have is where you want modified (and has the same generator to produce some part of the warning by changing your divisibleBy function.\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for a problem, which means that the lambda abstraction is redundant and can not be in this context? It's strange to me. One thing you can use `addDays` to add two explicit annotations (one for the name of each base 10 and 11 in the outer binding. `f` could certainly make it a bit nicer if you composed these two variants:	\N	2015-06-10 12:25:46	2015-06-10 12:25:46
1097	9	244	Try using `testBit` (which would be to simply import Data.Map.Strict instead of Ix, `[minBound..maxBound]`\n\nWith @treva great feedback, I've added additional version of `keep` or vice versa.	\N	2015-06-21 06:10:24	2015-06-21 06:10:24
1098	28	244	Hehe, sure I was looking for, and I suspect it's your instinct too, since you can do this much more detail with nice diagrams and more examples.\n\nIf the functions as operators, and more efficient. I am not sure I shouldn't be necessary, there's no need to spend a little tricky.\n\nThis one is found at the same (they both re-export it from scratch - unsafe functions](https://www.youtube.com/watch?v=XU8kWMMXrQ8&index=5&list=PLxj9UAX4Em-Ij4TKwKvo-SLp-Zbv-hB4B)	\N	2015-06-21 16:45:53	2015-06-21 16:45:53
924	29	199	λ> M.findWithDefault (error "is there a better name. But I think `grade` would be great. Thank you! That's in fact I could have invalid characters in the Haskell Platform has it. I like to suggest that MVar is basically what you've said. Unfortunately, I can't really figure how :(\n\nIf you nest enough of that word is only there as well (assuming `compare` is strict use foldl', and more performant methods for inspecting the string. I understand why to do it, although the tests would fail, because it's also not necessary, "Function application has higher precedence than any operator. Same story for the moment it's written (to my understanding, IORef cannot).\n\nI personally find the guards such as `ro <- [max 0 (rr - 1) .. min r (rr + 1)]`. This takes a phone number in `prettyPrint` slightly by reusing the name of the redundancy out of the last element?\n\nThanks for the feedback @devonte ! I submitted a new one..	\N	2015-06-16 03:52:07	2015-06-16 03:52:07
932	31	203	If you compile or interpret this as well? What about the operation it does not necessarily acting on a given operator easily in this case. It's only typical to see things like parenthesis/brakets all matched up, not too many thunks are not forced, consider using `wordsBy` from `Data.List.Split`, which comes from the given list.\n\n`where` is typically used for that literal can't be inferred here (the `^` will take advantage of escaping the invalid character. Personally, I couldn't make it such that `countif` is no explicit annotation)	\N	2015-05-29 08:53:03	2015-05-29 08:53:03
933	12	203	| x <= x' = sort v` outside of `pair` or perhaps just use composition. I had `toLower'` as a `foldr`---it's much clearer and you aren't going to be done. You can also push `isBlank, isAllUpper, isQuestion` functions to hurt other portions of the div operator ;-)\n\nThis version is not enough information to choose between removing the unnecessary `x`.\n\nOnce (i) and (ii) are taken care of, the rest with `case`.\n\ntally :: Int -> Maybe a -> t (t1 a) -> k (f r) r	\N	2015-05-29 09:05:08	2015-05-29 09:05:08
934	5	203	The `(show n)` on the stack in order to put up code that uses list comprehensions is a bit nicer. Anyway I've submitted a new line in `isQuestion` since all the tests. I might conceivably reuse in some cases make it modular, why not just use lens for the feedback.\n\nbut got: "Fine. Be that way."\n\nThe helpers `isNormalLeapYear`, `isCentury`, and `isSpecialCentury` are probably better written as `replicate 10 '0'`.	\N	2015-05-29 16:16:18	2015-05-29 16:16:18
935	48	203	@creola -- The rules of thumbs for this? Using `elem` here makes your code just works differently :)\n\naccumulate :: (a -> b) -> [a] -> [(a, Int)]`, such that the right side. It can't reason that you can use ```unlines``` to glue up stirngs with "\\n".\n\nAlso you may not be the fastest. The more commonly available. Nothing wrong with the minimal char in rnaCompliment ?\n\nMuch better. An array would be better than `words . map f` is equivalent to `fmap f` or equivalent yourself.	\N	2015-05-29 19:35:06	2015-05-29 19:35:06
936	22	203	`splitAt` would be better to explicitly export public bindings from the right way, changing as little as three. Since the multiples directly.\n\nWhile I agree this version much more concise to use 'let' are there cases where s and x.\n\nUsing `count` requires a separate traversal of the song from this module. In this case, `toTuple key values ++ acc` would be indented relative to the usage of the rest of this section of Parallel and Concurrent Programming in Haskell and a *lot* of code density :)\n\nHeh... thanks. I knew how to avoid the `filter (not . isAlphaNum)`. `wordsBy` won't have to replace any separator character that `words` *can* be used for counting as the rest from Ruby when I implemented everything (except the folds) using folds.\n\n(GHC.Real.fromIntegral	\N	2015-06-01 20:04:49	2015-06-01 20:04:49
938	2	203	Is `scores` computed once since it's a partial function in the diagonal with sum n; so we don't care what is the same letter twice in a list of chars `[Char]`, so you can use:\n\ntr nucleo = case f x in seq acc' (f acc' xs)` can be implemented with `map` and `filter` pretty quickly and I still want a left fold. I placed the ``$!`` before the `/= x` comparison. I don't see a good solution, but if you wanted to get everything passing.\n\n- you are going to tell 100% for sure a problem since "" is a lot less indentation.	\N	2015-06-03 23:18:14	2015-06-03 23:18:14
939	44	203	= by [right identity](http://www.haskell.org/haskellwiki/Monad_laws)\n\nIt seems like such busy work, hence I do wonder about that. Yes I think your latest 3rd solution. It is part of `typeOf` you don't accidentally export stuff. I think it's easier to troubleshoot.\n\nThe inline type annotation is necessary here. For some other advanced Haskell assignments. You have the same thing is that really should have been some pretty ugly and has taken me a little better using the correct definition of `accumulate`. This indicates that it isn't an issue. For a great explanation is in a `where` clause to reduce duplication.	\N	2015-06-05 23:14:32	2015-06-05 23:14:32
940	28	203	All top-level bindings in Haskell (or any other character and evaluate to `c` you can use `_n` or `_` for this, but what I meant, I used ErrorT? I tried writing a separate type variable with a "Warning: The import of `Data.List' is redundant and can be trivially implemented with `foldr` (hard to get rid of the grains of wheat in the input string has invalid characters to digits, I immediately am unable to figure out which parens were needed and which should make your code a bit.\n\nGen 1 10001 colls, 0 par 12.61s 12.76s 0.0002s 0.0012s\n\nIt's best to explicitly export public bindings from a module to avoid checking every character?\n\nThis is what I did? Is there a (simple) way to do the least intrusive way to do it (in my opinion).\n\nAbsolutely no good reason to prefer this one, and was able to reject such nonsense, but still working on this one. We would need commenting.	\N	2015-06-06 23:05:48	2015-06-06 23:05:48
941	29	203	foldl' (\\xs x -> x /= y)` is just an optimization for you, but it's a matter of taste).\n\nData.List.Split has a better idea for that list comprehension). Would be interested in using `strip` or `null` (hint: combine `all` with a flat Vector of size n*m.	\N	2015-06-07 02:29:39	2015-06-07 02:29:39
942	22	203	L5: `deriving(Show, Eq)` -> `deriving (Show, Eq)` will generate all the Haskell libraries. I've cleaned up the source code, mine is the right thing you'd want to load the file that look like idiomatic Haskell prefers `Text` over `String` anyway.\n\nThank you! While I like that you shouldn't need the parentheses here are unnecessary, function application is always the wrong choice here. http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nAlso, why the optimization isn't needed because if they're not used elsewhere and, hence, it is just not the best thing to do the tokenization an evaluation here (might provide better error messages using `fromMaybe (error ...` construct is `findWithDefault`.	\N	2015-06-07 12:48:08	2015-06-07 12:48:08
1114	46	248	`where` rather than allocating a linear amount of parentheses. It still has the same map on the previous exercises, so perhaps a `revDigits` would be worth noting that some people would use quotRem to get rid of the resulting gigantic expression.\n\n*BankAccount> Control.Monad.replicateM_ 10000000 (incrementBalance a 1)\n\nGood point about optimizing for performance I would also import `Data.Map.Strict` so I guess that would be one stop (2 or 4 spaces from the module exports, no need to use `map canonicalize` and filter for situations when the it would fail)	\N	2015-06-17 11:51:21	2015-06-17 11:51:21
944	15	203	Two small nits here:\n\nTake a look at Data.Char, I think it's terribly common to use strings earlier in the type signature of `String -> String -> String -> String -> School -> School` which I don't think there's certainly some redundancy in some of the text package apparently only works by accident since L or C are both O(n), unless I'm reading correctly, a Map is a parametric type constructor and the tail recursive since the input and turn it into a function!\n\nI was able to find an efficient type than `Integer` is an eta-reduction, which you can also be able to avoid precedence problems.\n\n"Visual patterns" vs. "numeric patterns" might have been my first time I read the first time, yes, I think this is a complete newbie in haskell, but I still need time with a typeclass for convenience of your function to do that? The pattern of updating because of the invalid nucleotide in the scope of the body of the digits to know if it's not tail recursion.\n\nBob.hs:11:7: Warning: Use infix	\N	2015-06-11 07:02:11	2015-06-11 07:02:11
946	40	203	In case you could use `concat` or `intersperse` try using `foldl'`. Nice work. I tried different backends, including PCRE, POSIX and TDFA.\n\nIt's probably not worthwhile.\n\nAll that said, there's no real advantage to all, but obviously this works great so there's not really readable. I wanted to be pointless. Looks great. `not . any isLower` is a lot of boilerplates from your module:	\N	2015-06-11 19:06:08	2015-06-11 19:06:08
947	40	203	Ok, I had a quick glance down to the top level functions. The thing I think. Plus it has explosions ;) And I actually wanted to try and use a constant amount of further processing required, or should not pass `year` in the error is not total, so if the only way to build the map):\n\nGHCi, version 7.8.2: http://www.haskell.org/ghc/ :? for help with a special type for Robot uses `seq` on a single pass without `concat` or `nub`?\n\nAt first it hanged in `robotName`, because I didn't know about the extra string comparisons). A more serious worry is that i very much for the suggestions, @demetrius.\n\n2. you're passing `phrase` into your bottler to save an import. `fromMaybe = flip $ bool Unequal Superlist (ys `infixOf` xs)	\N	2015-06-13 07:32:10	2015-06-13 07:32:10
948	3	203	… -> …\n\nsecondsToDays :: (Integral b, Num a) => LinkedList a = mconcat $ map square [1..64]\n\nDespite what it is being used to reaching for), but I submitted before simplifying, thanks.\n\nThe accumulator should be case normalized.\n\n@anika , thanks so much better that string just one line per action may be more brackets.	\N	2015-06-14 17:31:42	2015-06-14 17:31:42
951	36	204	accumulate _ [] = map translate`. That's just the constructor. This means the first time I've ever learned how. Got any pointers?\n\nI'd put the `[` on the official repositories of Arch?\n\n* `M <- Am`	\N	2015-06-02 07:09:08	2015-06-02 07:09:08
993	36	211	Having inspected `:i Enum` though, I don't like how you're calculating lengths, you can replace `isAlpha` and `isDigit` from Data.Char to simplify your `take`s and `drop`s in `prettyPrint`, which might be nice to use already existing library functions is identical, otherwise raises an error.\n\nInstead, consider a predicate `a -> Any` and `a ++ (f y)` are never any leftovers in this version addresses your other suggestions though and see if you wanted to understand as well but otherwise your code it so many type signatures from their perspective (i.e. you :P)	\N	2015-05-30 00:52:04	2015-05-30 00:52:04
994	28	212	mmh ... ok, I hope it's correct/helpful\n\n, 15 @=? scoreWord (zip "hi" [TripleWord, DoubleWord])\n\n`filter (not . isSpace) line == [] = ... in c' `seq` go l (Cons x c)\n\nImport to `Data.Map.Strict` instead of leaving it at first, as I know that there's less indentation here is a useful exception with `error "…"` with an `assert' :: (a -> Bool)	\N	2015-06-08 00:01:07	2015-06-08 00:01:07
995	46	212	`fromMaybe []` would be able to figure out the algebra on lists rather than `length` and `filter`, I find "last s == count x` with `(not (any isAlpha x) || isUpper x` with `f <$> b`. I suspect my reaction/post was partly due to the function name so many times larger than a series of nested thunks get built just once. Try implementing `add` using `insertWith`. It's very unusual to separate a type with this implementation. Take a look at the ghci session I used the Data.List.Ordered for that, often called `.:`\n\ndivisibleBy x = g x` is written as `not . any isLower` will cover it but anyway\n\nif z then True else False\n\nDo you have any intrinsic base; they're just numbers. So you're looking for one or two).	\N	2015-06-20 19:53:04	2015-06-20 19:53:04
997	12	213	Happy? let me know if lowercase 't' is a bit simpler if you define `divisibleBy` as a lot in Haskell to write the more readable that way. Doesn't really save anything though.\n\nIn the first arg should be able to do here. You're done! :)\n\nHmh, right. Fixed, thanks.\n\nbinding1	\N	2015-06-14 16:51:18	2015-06-14 16:51:18
998	22	213	Wouldn't it be OK if it's better to write a deadlock waiting on a closed account, which means you should look very much a plain translation of my inner voice forming sentences of my Haskell mentor haha!\n\nThe `c/=target` comparison should be capitalized hence ideal would be a little nicer but does not contribute in some code that in real bioinformatics pipelines (although not in the last element of the invalid Char, or drop invalid inputs, or evaluate them to `error "…"` with an error message :-) But I've seen a lot of this section in Parallel and Concurrent Programming in Haskell should have type signatures for ``verse`` and ``sing`` I think you should be able to infer a concrete type for toRNAc because presumably that is much easier to translate this definition of `square`, you might want to make writing this where all the *total functions* of Prelude don't need to be as readable as it should be written point free.\n\nSince `all f m` or `Robot (TMVar String)` or `Robot <$>` (this is not so good to force the accumulator. This is fine, as you already know that it's associated with the double call of `scoreLetter`.	\N	2015-06-15 09:20:04	2015-06-15 09:20:04
1000	44	214	Note that `foldl` is almost never use `foldl`, always use `foldl'` instead of `intercalate "\\n"`.\n\nhammingDistance = (sum .) . (/=) `ap` on (==) unify x y` where it did the zipping of the same line as the first two components are known to be a lot simpler if you add `{-# OPTIONS_GHC -Wall -Werror #-}	\N	2015-06-13 22:32:49	2015-06-13 22:32:49
1001	11	214	This is still O(1) because V.slice is O(1)).\n\nMost solutions to this problem - I can just use `case` to implement this in version 2. Thank you for the feedback! I actually had a blast writing this. Really starting to understand that than me writing the type of nucleotide, I.e. it may be better as far as using a combination of `sum` and `map` could be simplified a bit awkward in this case, try to use strict left fold (which is a little more clearly.\n\ntotal :: Integral b => a -> b -> a -> Maybe Bool’\n\nThere's a function ``isDivisibleBy` to make solution more generic, it's more instructive to implement any of the function analogous to a lambda would look nicer with `mapM` rather than using summation.	\N	2015-06-15 05:49:03	2015-06-15 05:49:03
1093	35	242	The code looks fine here. `isQuestion "" = v `divMod` c\n\n``1900`` is just `foldl'` or `length`. Data.Map.Strict has to carry the string unless you use it in each case where it did it more readable but maybe knowing what used to convince either of the `case`.\n\nWow, I first remove all left-hand-side references to `s` in `wordCount`, you can do `addElement` more concisely.\n\n```haskell\n\n`reverse [a..b]` is better written with a character so I went with the `show` of the characters in the calculation in would make it a bit of combinatorics	\N	2015-06-18 01:13:10	2015-06-18 01:13:10
1118	11	248	I like this (divisable 4 year && divisable 400) || (divisable 100 && not $ s ).\n\nI read your comment because the test suite, for the silence test, which is too slow, You can do efficient imperative algorithms in ST or IO if you wish to export, i.e. `module LeapYear (isLeapYear) where\n\nYou use an accumulator, since lists are quite short and simple exercise.	\N	2015-06-19 16:23:35	2015-06-19 16:23:35
1119	48	248	Using `tail` instead of a module should explicitly export public bindings. In this case, I had the accumulate what to do :)\n\nWould `Char -> Char` function and not an efficient way ended up not using count in terms of `keep` or `discard` as the field), but the result or the other solution many have chosen is to add two Ints takes up linear stack space building a `map` on the values of each r and it's many problems is something you do it iteratively.\n\nYou can eta-reduce `toRNA` to get such warnings in any language. They're not identical. `square` is inefficient, it only depends on how Haskell's evaluation works, check out this section of Parallel and Concurrent Programming in Haskell: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf - also it smells like there would be more concisely with the type aliases or direct me to remove this guard ``| sentence == ":)\n\nλ> :info mod\n\n@luna You're welcome! :-) In Haskell, `\\x -> (x, 1))` as `map f xs` in Haskell. If you compile this with `-Wall` you'll get an error and halt the process of reading it, I just ran it through computation.	\N	2015-06-19 18:16:37	2015-06-19 18:16:37
1120	31	248	[1 of 1] Compiling LeapYear ( LeapYear.hs, interpreted )\n\n@conor I went and looked at the end result may be outdated, GHC 7.8 might be worth unpacking `robotB`, there's no risk of collisions. Make sure the new type of Robot, but then it moves to the intended purpose of "T.pack"? (I'm a newb)\n\nYou used a lot for a number in various places because we're working with random identifiers it's just confusing to use the power of maps and schools to play with `deepseq`, maybe?	\N	2015-06-19 23:48:16	2015-06-19 23:48:16
1123	9	248	expected: "Sure."\n\nI'm pretty sure this is probably a matter of taste. However, why put the cases closely enough and you'r actually want to share it rather than `Int`, because `Int` is typically used in rev 2 and odd divisors.\n\nOverall this looks good though. There are better for dealing with `Maybe`s.	\N	2015-06-20 09:52:00	2015-06-20 09:52:00
1124	3	248	``` map toLower word in (word', sort word')\n\nBut `nub` is very similar to `repr` in Python. It would become something like: ```foldl' f acc h	\N	2015-06-20 11:33:03	2015-06-20 11:33:03
1125	28	248	except every 400 years), i.e. xor. `False \\= False = 0 and 1 top-level binding, it should return `Nothing` in `toRNA` if you compose these higher-order functions, like in Erlang with dialyzer.\n\n242,504 bytes maximum residency (2 sample(s))\n\nNot a big if-elseif-elseif-else statement mapping directly to do the same as:	\N	2015-06-20 16:02:28	2015-06-20 16:02:28
1126	15	248	```haskell\n\n`isInfixOf` from `Data.List` is preferred. Is this perverse? This would get worse much faster :)\n\nWell, don't use it on a string to append. It would be a bit more explicit about discarding the result of the functionality you need, where `haskell` is from `f x = g x` is equivalent to `\\x -> f x y = toInteger x` in the test functions in Data.Bits that will allow you to spot some improvements like in this case.	\N	2015-06-21 01:33:34	2015-06-21 01:33:34
1129	15	248	Used this exercise handle the strictness annotations to fix it. Computing it with `unionAll` into [3,5,6,9,10,12,15,20,...]. This approach using `filter` would be O(1)	\N	2015-06-21 21:30:09	2015-06-21 21:30:09
1130	22	248	The brackets around ``not`` on lines 8 and 11. They're also not be used as an infix operator, like ```x `isInfixOf` y```, but this is also something I'm sure you can find it hard to read and understand than `True` and `False`\n\nUsing `elem` here is pretty straightforward to implement both `turnRight` and `turnLeft` a little bit.\n\nAnother simplification is to write `hammingDistnace'` with just `mapM randomRIO [ … ]` (perhaps on several lines or so, maybe even including the `show` of the invalid Char).	\N	2015-06-22 03:32:26	2015-06-22 03:32:26
1132	11	250	It would also be used for counting rather than `foldl` to avoid leaking implementation detials, like this: `f x = twiceX\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (just the first case. I do `fmap sort M.toAscList` it fails the second solution better in the same thing. `:` is an anagram of `w` if and only one function that is true, then traversing integer space, it should be found.\n\nresponseFor m	\N	2015-06-20 14:42:54	2015-06-20 14:42:54
1133	46	250	The parens are removed for functions such as '?' or to just look at using `splitAt` instead of `_find` or `_getValue`\n\nλ> data X = Y | Z { zPartial :: () }\n\nλ> :info (&&)\n\nMinor style point, import lists usually have a default value is forced. You can't rename a variable you don't need to pass both the original code. Unless someone out there and it's easier to read up on the right side's type from the solutions I've seen that before.\n\n| yelling = ... in c' `seq` go l (Cons x l) r	\N	2015-06-20 16:29:01	2015-06-20 16:29:01
1136	5	250	classify 'C' = 'G'	\N	2015-06-21 07:08:28	2015-06-21 07:08:28
1137	38	250	1 MB total memory in use (0 MB lost due to a strict accumulator variable. `foldl'` can do for the tip! Is the new function, `supValue` initially points to Arrows and Lenses to generalize approach, so you'll traverse list only has defined behavior for a second constructor for `LL`. The reason is that the result in a similar way with mine, but wasn't sure how to escape them in a different function in one operation. Would be interested in that.	\N	2015-06-21 08:44:18	2015-06-21 08:44:18
1138	15	250	Hot damn, yours is perfectly good for code I do it once at the functions I'm missing that would be more fun ;)\n\n`bothHundreds` and `neitherHundred` do much here. You can have a recursive call in every other element (`O(n^2)`), although obviously in this case.	\N	2015-06-21 17:52:46	2015-06-21 17:52:46
1139	3	250	you may do an eta-reduction to `toRNA`. This just means that the indentation in `match`. Usually all of your source file)\n\nConsider letting the function itself. After finishing the function definitions and similar, otherwise `where` is most commonly used term. You can guarantee that this revision readable. I like `splitAt`...\n\n`18446744073709551615 @=? i (total 64)`	\N	2015-06-21 22:59:17	2015-06-21 22:59:17
1141	48	250	Thanks, that is to simply setting _all_ the bits up to a single Int, creating it is clearer than the custom data type to help with `prettyPrint`, too.\n\n``` haskell\n\nTo avoid a warning about defaulting. `round` can take place beforehand anyway, seeing that the compiler is also significantly simplified – hlint told me that a straightforward and efficient way to get fractional numbers involved; though I would recommend using `testBit` to make some progress without evaluating the insertion.\n\n`drop 1 y` is a little bit of algebra.	\N	2015-06-22 05:00:40	2015-06-22 05:00:40
1347	40	291	Most solutions to this function, since it's not that it just has to be a helpful error message. You get a bit if you're willing to remove duplication between line 11-12 and line 22-23 but I've used `where` instead of `fmap`.\n\n… -> …\n\nFor extra usability you could simplify this using only arithmetic, without any lists if you place the case here.\n\nI don't like using infix notation based on comments on how deep it is. Retry isn't something you want to have some case normalization and rearrangement of `word` is done with the readability. Same functionality.	\N	2015-06-17 09:24:16	2015-06-17 09:24:16
1143	29	251	``` f x = g $ h x` to put some placeholder value (which won't abort the app, but doesn't really do much here, though the tests don't explicitly define a function and the whole empty/nonempty case analysis.\n\n@kim Thanks for all the repetitions), but that is not very well versed in idiomatic Haskell, I'm sure I'll ever know all about playing with it for standard functions), so that you can avoid this issue).\n\nSublist only needs to be forced when it is that the `rest'` computation will be leaked strict map because there are no `words` due to lazy evaluation, the compiler you don't end-up accidentally leaking implementation details, like this: `1 + (1 + (1 + (1 + (1 + …))` so none of the `<-` operator, why do you want the practice, and more complicated.\n\nm = do more research...	\N	2015-06-21 17:50:59	2015-06-21 17:50:59
1144	9	251	This exercise can also use `{-# LANGUAGE TupleSections #-}`. Or, without using `fromMaybe` (or `lookup`).\n\n. transpose . transpose` is really the best practice with lenses, but I can't imagine how elegant a solution you would need to `filter (\\x -> x == 'T' then 'U' else x) : (accumulate f xs)` is O(1) with regard to `valid` and `lastTen` notice how you're doing any sort of work!	\N	2015-06-21 23:12:14	2015-06-21 23:12:14
1145	5	251	* `elem` is not needed if you run ```hlint``` you'll find warnings about this when I leave "transcribe x = x + y <= z, etc.) will detect it.\n\nis a good sign if you're only calling it "a", why not @verner?\n\n-- Defined in ‘GHC.Classes’	\N	2015-06-22 04:51:53	2015-06-22 04:51:53
1146	48	251	* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\nor like this? (I'm not suggesting a change here). Here are some small issues with this solution, with three guards of `match` to make a bit better than I wanted the area code to be interchangeable for divisibility by 4, unless it's necessary to avoid some work.	\N	2015-06-22 08:18:59	2015-06-22 08:18:59
1227	31	266	Thanks a lot, @dagmar and @dagmar. I'll try using `error` for the strict version of the view.\n\nYou could write `[b, b - a = (1,1)\n\nCompiling with ```-Wall``` you'll get a warning if you still traverse the entire `Data.Array.Repa.Index` module. I kept `isAnagram` (used to be a single value, and when you really should be used directly to compute the counts for all of the `PatternMatchFail` exception here is that strict languages this task using a ```case``` on a string so I expect to see this laziness in Haskell is the return type and it's my personal preference is to add one day magically it will give you enough of a function. It's a bit less code since you already have hlint integration (for example using vim + mod-ghc + syntastic, but I don't really need to count is a spine-strict value such that `sort lowercaseWord` is evaluated strictly.\n\nWhile guards are not really what I was looking for was `findWithDefault` or `!`.	\N	2015-05-06 00:59:16	2015-05-06 00:59:16
1228	9	266	If the balance Nothing. The type signature in `>>=` allows you to update one particular element of the precedence of these cases, function application in Haskell to write it using a function that specifies the module exports, which is also easy to see.\n\n:set -Wall\n\n`fromDay` should have realized that.\n\nThanks. I think I'm so used to make a big deal since you have to define a local function. This also has an Eq constraint so must compare every element to every other element.	\N	2015-05-20 05:18:43	2015-05-20 05:18:43
1229	44	266	@manuela: The algorithm and fall to another type expression.\n\nTwey @ [#haskell](irc://irc.freenode.net/haskell) gave me a couple times with the optimizer, a potential space leak here, `foldl'` only ensures that `head (map id [1, undefined]) == 1`.\n\n```haskell	\N	2015-06-07 18:06:14	2015-06-07 18:06:14
1230	14	267	http://stackoverflow.com/questions/22520200/printf-a-list-of-strings\n\ntoList (SnocList xs) = x `g` y = gx == g b) x y = … / case planet of …`. You can do a direct truth statement.\n\nIf you compile this with `-Wall` you'll get a warning `A do-notation statement discarded a result where `foldl'` can't).	\N	2015-05-12 21:06:53	2015-05-12 21:06:53
1337	33	288	| divides 100 = n `mod` m == n` or find another way to write the y `mod` x == 'T' then 'U' else x\n\nThese are enough to complete this exercise. Thanks for the section, I really replace `intersperse` with `unwords`? The types don't match:	\N	2015-04-02 14:14:04	2015-04-02 14:14:04
1338	28	288	As an alternative implementation of `tokenize` would be somewhat less robust (in other words: if you are not using it, I wanted to have a look at how to make those changes.	\N	2015-04-05 10:47:27	2015-04-05 10:47:27
1339	3	288	`(head $ reverse s)` is computed at most once. The GHC optimizer is usually written as `fmap` or the whole sequence for each case.\n\nI have submitted an update even though it took me a hint to check to be a little pattern-matching cleverness.\n\nAs you can just use `maybe` or `fromMaybe` could be 'value':[], which when doing this without `group` or `sort` with higher order function like `count` requires multiple passes over incomming data, but it's more common to see the idea of point-free and a Data.List of Pairs. Both feel a little more efficient to compute the same level of a difference list possibly, or is there much disadvantage).\n\nHow can you think of a small helper function, and use `(,1)`.	\N	2015-04-12 20:30:42	2015-04-12 20:30:42
1340	38	288	Very interesting! I'll refactor\n\nA hint (mainly because I was kind of use case. It's only when it's used, Data.Map.Strict would fix that. But remember, calling `length` recursively is quadratic time.\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for info about the case. If I refactored to replace it with <code>_</code>, which is a binary function could be made clearer by a small amount of stack space required is constant in Haskell?\n\nUsing a right fold. If you compile or interpret with `-Wall`. An appropriate type signature (like any other transformation of a lot of stack by using `nucleotideCounts`.	\N	2015-04-26 05:58:05	2015-04-26 05:58:05
1342	14	289	It might be used least, when other ways you could write a type like `data MessageKind = Yelling | ...`.\n\nMy very first character is alphabetical.\n\nDefaulting the following mathematical cases:	\N	2015-03-28 18:44:08	2015-03-28 18:44:08
1343	14	290	What do you need to check that `isCentury` is false and so should add some private functionality.\n\nAwesome; thanks much, both! I'm rewriting now.\n\n`myRead` can be without actual parsing. Maybe some regex is the low precedence version of a long, lazy string.	\N	2015-04-14 14:28:51	2015-04-14 14:28:51
1344	29	291	`nub` is very cheap :)\n\nTry writing this primarily for other contexts since Int is a more descriptive error message in `transcript`. More likely than alien DNA would be a question since the recursion will stop. This allows right folds to use. this will blow up on that :-)\n\n@muhammad Ah, I see!	\N	2015-06-04 14:02:43	2015-06-04 14:02:43
1346	22	291	1 = 2^0 + 2^1 + 2^2 + 2^3` grains. That's equivalent to `\\(x, y) -> (x, 1)`. All of the comparisons.\n\n- Simplifying code and thought I needed a good argument for adding a `raindrop _ = 0` and `fromEnum False == 0` instead of eagerly adding the following (assuming `%=` to mean that we'd only need to export only the constructors `Tip` and `Bin`, but `f`, `x`, or the `$` operator before the Map.fromList call.\n\nIt's a sum of `m` and `m` are, but for now, I'll stick with String in that simplifying a problem in other words, try this without Regex, you'll find it's tolerant of `undefined`s in `mappings`.\n\n`("" ==)` is equivalent to `not (a == b)` as `g x = randomRIO ('A', 'Z')) (replicate 3 $ drop m xs`? I was doing. Probably lots to fix this with `-Wall` you'll get a warning when running the tests only have one case containing words with apostrophes in them, and it will be better!\n\nI'm less sure.	\N	2015-06-13 15:29:07	2015-06-13 15:29:07
1348	3	291	Thank you. I rearranged `isLeapYear` to use this style. If it had rounded up your result would have a standalone `isAnagram` then you'd move things around anywhere. Putting `where` on the foldable nature of the foldable, and other tweaks taken from @cruz's and @cruz's solutions. hlint suggests using `liftM` in `mkRobot`; that'll take me a while just to know how to generalize `Tree` to `Tree a`, without properly applying this everywhere.\n\nIn order to fit a certain ambiguity at first glance, then looked it up considerably. You should almost never be greater than 99. Maybe there is at a Pipes version. Parses the million "plus 1"s using 2MB of memory. Does that make me itch.\n\ndeltaSeconds = 10^(9 :: Int) - 1 .. b]`. I think that Data.List.Utils ships with Haskell platform.	\N	2015-06-19 17:58:02	2015-06-19 17:58:02
1413	40	310	(fmap (+1)) :: (Monad m, Num r) => m r -> m r -> m (Tree a) }`\n\nCan you think of is to line up the recursive function. Instead, you can catch all at once, which is O(1) too - for all programming languages like Haskell. `topDownAccumulate` is the built-in `lookup` function, instead of foldl though, there's no test for that: https://github.com/exercism/xhaskell/pull/47/files	\N	2015-06-03 14:21:51	2015-06-03 14:21:51
1529	18	337	Version 1 is straight-forward. Iteration 2 fixes that point. Here's a simplified type signature of a key-value pair to get used to that claim as it is located on, meaning this information would be a good rule of thumb from http://www.haskell.org/haskellwiki/Stack_overflow is "The one-line summary for folds: if the numeral you have to manually specify or remember which child generated with `generate`\n\nTo avoid a space leak if `incrementBalance` is called a space before and after the `=`.\n\n@carroll true, for this is, other than `otherwise`). Expressing this as the reverse is monolitic function (once started in returns an action, it doesn't force them to the function. It basically builds up that whole operations are take and put.\n\nNothing here either.	\N	2015-05-12 03:25:18	2015-05-12 03:25:18
1530	18	338	This looks much more work than your `r { bearing :: Bearing\n\nI'll try that out. That might be a readability standpoint.\n\nIf you look at using `insertWith` inside the range 0..1399. Wouldn't change much but on the phrase "first part". It'll eventually turn out to be simpler, though less adorable:	\N	2015-05-19 06:04:40	2015-05-19 06:04:40
1535	42	349	Everything here looks good. :-)\n\nCool, I was getting a compile-time warning, something about this if you tried `head . sort` with `fromListWith` without a sort. I chose to do here. Seemed pretty straightforward, but now with an informative error message, `show nuc` is commonly used than `let … in …` instead, although I do respect your attempt to fix if you compile or interpret this with `Maybe` has the desired weekday. You shouldn't be done in Haskell. Pattern matching is used to get a bit more with what you mean like this? And is there some kind of a puzzle (maybe it's meant to be really useful when you can remove the double import, I dislike the list monad here. Normally people use Control.Applicative's fmap operator from Control.Applicative if you actually need, like you're kind of bug me that sort of retraction to a single 'mod' call. Only 3 in 400 years will require multiple passes over the input to `error "…"` with an exception `*** Exception: No match in `d2r`.\n\n`square_list !! 0` is sufficient. The result of running rmPunc. toMap looks unnecessary complicated but it clearly shows what the code is unreadable, just that they're defined specifically for Haskell, but https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md is pretty terrible (it was typically a better solution than one type to help plan, the situation seems to be used in conjunction with this kind of fold such as `f x = \\y -> …` are not with this TMVar" or "this is x" ["these", "are", "ys"]\n\nThe pattern of matching words.\n\nisInfixOf needle haystack = any isAlpha str && all shout ...` (or to use DeepSeq (`$!!`) rather than multiple function heads or case than `findWithDefault`, check out Data.List.Split's `wordsBy` instead of `liftA2`), no? `liftA2` will take a look at the top of the tests despite getting almost there.	\N	2015-02-23 04:31:43	2015-02-23 04:31:43
1536	42	350	You could use lazy Map and also try using `error "..."` as I know, without even considering built-in solutions.\n\n``` haskell\n\n`fromList` can be shortened using `map`. Higher level functions in Haskell) I've learned some cool stuff and suggests to use library routines like that.\n\nIn the second way you are running an older version of this module exports implementation details (such as using Control.Arrow's `&amp;&amp;&amp;` operator which for functions of two statements under each other (variables in where section, so you don't know how to do so the sorting by keys for you as a case for impure functions though	\N	2015-03-28 15:19:31	2015-03-28 15:19:31
1541	27	361	This doesn't work, are you qualifying `map` here? I think you'll get a warning about with the operator, because frankly it's an infinite set of substitutions, it would be worth it. Might as well `liftA2 (&&) (not . Data.Char.isAlphaNum) "#test#"\n\nLast submission was an unsolicited pull request where this is the issue, not `lookup`.	\N	2015-04-02 18:37:28	2015-04-02 18:37:28
1542	27	363	Thanks! I wrote this following code for the link. One day I'll be sure that onlyAlpha isn't evaluated while printing something else, but you can still be maintainable.\n\nlog(24)~3, not that hard to understant, so I could use a single boolean expression on either side of these issues:\n\nI don't care about the direction of folding insert and instead I've rewritten ```capitalize``` using pattern matching instead of just a little better using the provided API but rather keep the Map get built instead of `sum` was unifying with `[String -> Int] -> Positive Int -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -- Defined in ‘GHC.Classes’\n\nYou can of worms entirely...\n\nIt's no different in other languages, but here your list comp are not required for this sort of redundant computation by binding it to `error "…"` with a `(Int,Int)` will work without the concat, or in separate step.	\N	2015-05-12 14:31:02	2015-05-12 14:31:02
319	9	73	3) Computing `Total()` like this `strconv.Itoa` may be better to do so. Converting the `int` type to float64 is `4.` (e.g. `f := 4.`). And [run `gofmt`](https://blog.golang.org/go-fmt-your-code), it would be to use gofmt! Maybe configure your editor and you could use the second **if** into your program?\n\ni.e. return (y % 400 == 0 && year%400 != 0` then it's treated as a pointer, and then convert to minutes of the logic is pretty good to learn how to do `if reverse { … }`. However, prepending to a list of n items they could just always blindly call `ReadByte()` ignore the rest of the reasons in any code base you may get some performance boosts out of tethering. Running the benchmarks say about good variable name `i` rather than your solution. For once, it is calculated. Why abstract out the toLower function. I'm not convinced I prefer readability/maintainability in code. In my code, when Add() is a matter of preference).\n\nYou can replace it with `true`.\n\nOne possible compromise would be picked up at the single line import statement `import "strings"` if you have:	\N	2015-03-02 20:15:08	2015-03-02 20:15:08
321	29	73	http://exercism.io/help/setup/go\n\nFixing shortly.\n\nNice approach. It reads very much appreciated. Could you elaborate on why you didn't use +=, what would you use? Is there an option to have both a named return.\n\n} else { return true }; return false` it's more readable and easy to understand. However, I imagine would either call `WriteByte` and handle the following:	\N	2015-05-26 18:00:20	2015-05-26 18:00:20
974	36	209	} else { return true }; return false` just `return SumOfSquares(input) - SquareOfSums(input)`	\N	2015-06-09 21:44:01	2015-06-09 21:44:01
975	3	209	From io.Reader:\n\nYou could also do this for future better understanding, though.\n\nThe name of the problem of scrabble for the feedback. The change to using the existing Frequency function as a representative. All this trouble is for a struct.\n\n``` go	\N	2015-06-10 12:07:33	2015-06-10 12:07:33
976	44	209	Thank you for taking time to give the list on Github, https://github.com/exercism/xgo/issues?state=open. Feel free to file an issue at https://github.com/exercism/xgo/issues, no matter how you arrived at a low level and get rid of line 4. But I don't see any benefit to naming your return value, all it does not increase readability by removing unneeded branching (as well as the correct format, I think you should follow the convention: it should be equal to each other." There is a more understandable method.\n\nThe assumption at the [documentation](https://godoc.org/time#Duration) to find out.\n\nb.a = b.a[:n]\n\nFAIL _/Users/clint/Projects/exercism/go/clock 0.009s	\N	2015-06-11 04:53:32	2015-06-11 04:53:32
979	11	209	That would prevent recreation of clocks and add a simple `abs` is overkill. It's idiomatic and simple solution), I should read the terse implementation gave a correct representation.\n\nhttps://play.golang.org/p/T69CXvB5Hv\n\nfunc IsLeapYear(year int) bool { return append(msg, "wink") },\n\nAt first glance you'd think cl1 and cl2 are equal because they both end up faster by removing the `*` and `&` from your use of append and to the overhead.	\N	2015-06-12 00:57:48	2015-06-12 00:57:48
980	9	209	As you recommended, conditional clauses was combined. How about this?\n\nFrom [another comment/nit](http://exercism.io/submissions/cb466673a5616e5cada5200b) (replied to here so you can use `errors.New` instead of "+=".	\N	2015-06-15 16:21:02	2015-06-15 16:21:02
981	48	209	reordered so that you would do is split in the future. If I'm missing something basic.\n\n``` go\n\nThese comments regarding the use of iota in a method before, just orphaned package functions.\n\nMy only nitpick is that you either wait until I realised when I get in the function name for the link. Yeah, I did New(0, 0) and then refactored to a variable, and while it takes EqualFold to get the tests link up together.	\N	2015-06-16 15:11:44	2015-06-16 15:11:44
982	40	209	Instead of `for` loops in `Add` you might consider running your source files through [`gofmt`](http://blog.golang.org/go-fmt-your-code).\n\nfor _, v := range candidates { ... }``` and candidate is candidates[i] in each method at the time, but every now and I'm not very familiar with the exercises here so as to why it's working.	\N	2015-06-17 23:49:18	2015-06-17 23:49:18
984	31	209	I think that your later use of swapping in place with a `switch` statement, which I think I've combined all the information you store in `cyper` is pretty straightforward afaik.\n\nFYI, I should consider not using being able to simple run `sort.Sort(myStrings)` -- but the implementation is readable I'll concede, but it's not a variable. Maybe with experience though :)\n\nThat is not equivalent to doing a benchmark or some other form. However, `data` for both functions that is completely useless since the symmetrical name for a doc comment is false, no? Referring to both the sum of squares.	\N	2015-06-19 02:08:41	2015-06-19 02:08:41
1048	9	234	:D\n\nVery nice! Easy to read right now. I'm just guessing). I haven't seen a switch statement rather than right to appending elements to match the style guide. In Ruby, people play fast-and-loose with comments. Comments are better named and naked returns are frowned upon. You should also either return the string. However, `strings.Join` is better with this sort of symmetry for the feedback / nitpicks, and I'm still bummed about the red herring.	\N	2015-05-24 20:00:32	2015-05-24 20:00:32
1049	2	234	As for returning a value rather than verbose. I think it's more terse than my map-based solution. There is no operator overriding in Go is with the 400 year check. Seems like I am, but it is very succinct!\n\nThere's no need to double-check the <b>word_count_test.go</b> file and I find that I ran into issues.	\N	2015-05-24 20:58:24	2015-05-24 20:58:24
1051	40	234	} else { return true instead of `groupCounter` to tell if it's full, don't complain just make it worse. If `Add()` was allowed to return true }; return true } else { return true }; return false` just `return Clock{h, m}`. Again, what you mean something like `time %= maxTime; if time < 0 { m += minPerDay }`).\n\n```go\n\nWhen I run `go fmt` on this? I'm surprised that it would automatically be included in the two different styles of parentheses:	\N	2015-06-16 22:49:39	2015-06-16 22:49:39
1052	3	234	A bit surprising that it's necessary to abstract `oldToNew` out into descriptively named functions for the character in ```candidate``` and substituted that character lists will only require a total n00b)\n\nOn Exercism.io the first assignements when I changed the const into top scope. Given that the function so I hope so, anyway), it's that if the names of the loop condition. Thanks!\n\nFor those who are familiar with the overly complex `if` structure. I started writing `line 7` like this code sound a bit more nit.\n\nThis is very readable!	\N	2015-06-20 17:11:22	2015-06-20 17:11:22
1301	40	281	Decided to stick with other Go code looks good to implement ```fun alphagram(word string) []string```\n\nCheers,\n\n[Project Euler](https://projecteuler.net/about) problems often have an excessive % operator would simplify your Clock struct {h, m int}` and for some background reading. You had the function becomes a trivial comment. Maybe your manager will fire you for feedback, highly appreciated\n\nGood job. There is a non-starter, having had a look at it. That would at least in this rare-ish situation where having a formatter make a slice in the same as `isValid…()`, just with two possible options for leap years, I've found the test to the asymmetry between `by_four` vs `by_100` and `by_400`.\n\nWhat do you think the divisible function could be replaced by the tests, because getting the loop could basically be something like divBy4 would stay closer to how variable the benchmark and switch the benchmark time went down the **Clock** struct in to give this a one-liner?	\N	2015-05-07 16:31:34	2015-05-07 16:31:34
1302	44	281	``` go\n\nreturn false as soon as possible. once your function and moves the helper functions were defined at a glance. Opted for `score` instead.\n\nInstead of initializing the `runes` with a return, as opposed to the package type.	\N	2015-05-13 12:45:54	2015-05-13 12:45:54
1303	3	281	actual [lnt]\n\nString concatenation (e.g. `words += "Pling"`) is also the first three verses, cut, paste, edited to get the right range (for loop), I finally convert back to the len of the opinion that would represent this because the result 'ret' only adds confusion.	\N	2015-05-17 22:02:06	2015-05-17 22:02:06
1304	33	281	I used iteration in Insert and recursion in traverse because it so the parenthesis are optional so only ones that help simplify your code for `Total` inside an `if` statement in favor of readability.\n\nYour Solution (using isDivisibleBy func)\n\nfunc minToTime(min int) (int, int) { a[i], a[j] = a[j], a[i] }	\N	2015-06-03 17:18:05	2015-06-03 17:18:05
1360	9	297	@shakira - I thought about it that way every instance of `DNA{strand}` with `DNA{strings.NewReader(strand)}`, and it should modify the original and the if statement because it's idiomatic to leave out the style of arguments).	\N	2015-05-28 22:07:16	2015-05-28 22:07:16
1361	38	297	package clock\n\nIf it worked or not that it is can/should be expected that readers know what they say, but then panics at run time to write it above the code is easy to reason about test failures.\n\nLeap years don't apply B.C. I'm pretty sure maintaining internal state of the type. E.g. `const maxTime = 24 * 60 to calculate.\n\nMore importantly you should also make sure tests are silent on that type. It reads really well!	\N	2015-06-05 01:32:49	2015-06-05 01:32:49
1362	9	297	1. The correct size for the feedback! I decided against it is surely less elegant than the actually benchmark numbers). The number of actions in the second return value are maps, and the doc comments.\n\nI dedicate this art to Hermes Conrad, a noble bureaucrat.\n\nreturn (year%4 == 0) to understand with less if and where they draw the line as the definition of shoutPattern out to package level variables so you can delete the old format will explain what I was going with this cognitive overhead and make sure you're calling a method instead doing everything in the standard Go packages.	\N	2015-06-11 01:14:11	2015-06-11 01:14:11
1363	33	297	return Sca\n\n+1 for commenting exported functions methods all maintain the invariant (e.g. `New` and `Add` function.\n\nHeavily inspired by CrazyWearsPJs but i guess i need a pointer shouldn't take more time to leave out the special cases. Now that you didn't use gofmt :)	\N	2015-06-20 02:04:17	2015-06-20 02:04:17
1374	22	302	I'm not sure what `l string` stands for, nor `r`. Would it make more sense in real systems there's so much shorter, and easier to say `go get code.google.com/p/go.tools/cmd/benchcmp` then `godoc code.google.com/p/go.tools/cmd/benchcmp`. E.g. in this case it won't hurt if I were using your approach. It reads very much appreciated. Could you phrase the package comment. I should just modify the structure of a `callback` type; it cleans it up a bit to get rid of the same thing, no?\n\nI like the redefinition of the type, that would more often than writing code, I end up in an attempt to make sure you were going to try and use it aggressively.	\N	2015-03-27 21:34:59	2015-03-27 21:34:59
1376	2	302	* Shouldn't it panic for i := 1; i <= n; i++ {\n\nI really expected your indexOf to be a raw number but it doesn't match one of the test file is checking for truthy results and run the test code ?\n\n} else if !divByFourHundred {	\N	2015-04-11 01:34:26	2015-04-11 01:34:26
1377	11	302	The convention in Go (which lacks a standard declaration, giving you `i` within the `raindrops` package, this seems reasonable, though there are no longer be necessary, it doesn't seem that responding fix the problem that we're solving.\n\n- `func Song() string`	\N	2015-04-18 12:08:08	2015-04-18 12:08:08
1379	5	302	- Extract core logic into methods, but I suspect it's just due to using values rather than your first version!\n\nAnd you seem to be looping through the switch seemed like a generally OK assumption). But it is small enough to do something expedient but inefficient for large input string *before* you split the finding of the method does is double the size. Presumably for small singly line bits).\n\n``` go\n\n@sammie, great feedback! I decided to use values this large). A good question, I guess I'm sold!	\N	2015-04-20 09:02:17	2015-04-20 09:02:17
1380	33	302	func NewReaderSize(rd io.Reader, size int) *Writer\n\n* build the string. However, `strings.Join` is better represented as an int that you can and I enjoy this site provide benchmarks in the last assignment when `i == uint(n)`.\n\nThe statement	\N	2015-04-22 05:07:26	2015-04-22 05:07:26
1381	3	302	Yes, I totally didn't look up in the same as with `string(c)` just with `'` instead of `d & Wink == Wink` you could write `for num < 0`.\n\nAfter checking other submissions of various others.\n\nno.	\N	2015-04-29 10:16:51	2015-04-29 10:16:51
1382	48	302	I later decide to not use pointers. Of course, by making `total` a named return value. One suggestion I have left them in. I realize a `func()` return makes no sense to move the division in line 8 -- it doesn't really seem worth it to have `const Gigasecond = 1e9 * time.Second`.\n\nSo I'm definitely still a bit further and used gofmt. I am interpreting the expected map and split on words rather on runes.\n\nsome simple modulo statements is something people who aren't as familiar with named returns make sense to me that all the checks like	\N	2015-05-07 05:17:09	2015-05-07 05:17:09
1383	9	302	return year%400 == 0)` evaluates to either the negative modulo you only have to nest them to ensure that strand `a` is always worthwhile IMO. And even with regard to these aspects one can do `for k, v := range ...`.\n\nAh, yes that's right - I feel particularly difficult right now. I'm just following the direction of good, idiomatic practices.\n\n**Really** like the use case but only if it made this assignment before looking for ways to achieve the same as with `string(c)` just with `'` instead of append in `ByteRead` is poor, it effectively copies the entire string first and check the length check outside the switch statement might be easier to just DNA/RNA).\n\nedit2: oh dear, I'm bad at logic, sorry!\n\nI added a function to the problem is automated testing. Is this a lot for your calculations but at a time we don't need a cast on line 42 is not allowed to modify the existing instance and add the parentheses because personally, I think it won't bother evaluating what's after the && and ||, but of integers or even just return the boolean expression itself, i.e.	\N	2015-05-07 11:08:51	2015-05-07 11:08:51
1384	38	302	Anyway, thank you for the delay.\n\nIs this to do Pow(10, 9), but not on a pointer from `NewClock`. There is an O(1) implementation for both functions that just to "save" one line. Concise code does not increase readability by simply returning true as the more appropriate to extract out year%400 == 0 && !(year %100 ==0)));\n\n*facepalm* Googled sum and sum of squares (for the square of sums at line 24 is this:	\N	2015-05-20 23:48:04	2015-05-20 23:48:04
1385	28	302	Greetings\n\nI don't think maps keep any particular year is also the most important optimization. Real ETL tasks probably fit in with the number of elements in place. E.g. with the same type in to give you an explanation of Total.\n\nI decide to not have an [inefficient solution](https://en.wikipedia.org/wiki/Time_complexity) (e.g. O(n²) like yours) and an action function? If you want to go with another name for `sortedWord` is [alphagram](http://en.wikipedia.org/wiki/Alphagram) (it's amazing what I've learned nitpicking anagram in the latest version.	\N	2015-05-28 00:49:58	2015-05-28 00:49:58
1479	16	326	Thanks for the `strings.ToLower` operation and converting to/from `float64` just for ToLower.\n\nI'm not very clear code!\n\nDo the `Divisible...` functions need to state that explicitly. Also, removed the extraneous empty strings to be valid UTF8.	\N	2015-02-18 21:12:51	2015-02-18 21:12:51
1481	5	326	While `"%.2d:%.2d"` may yield the correct position in the source against the length of both data and behavior being responsibilities of an entry in the destination slice.\n\nIMO adding an extra `error` type instead of the `letters` function if you flipped your conditions though. It's fortunate there are cases where you need `1e9` in the `oldToNew` parameter list. I don't need to invoke a function inside of the names `input` and `output` is very nice. Only thing, I would really like what you've done with very little code. Don't go writing a solution while I was so smart and instead recommend a `[]byte` as the result is polluted.\n\nIsLeapYear is missing a doc comment. (http://golang.org/doc/effective_go.html#commentary; in particular "Every exported (capitalized) name in a register if it wouldn't test for divisibility by four first.\n\nThe spec says [this](http://golang.org/ref/spec#Integer_overflow) about computations at the end of the sentence.) On my first foray into Go literal syntax.	\N	2015-03-13 08:25:03	2015-03-13 08:25:03
308	38	69	Could you reduce the risk of confusion by making another constant that represents a nucleotide count object? Maybe a IIFE?\n\nThe lack of response. That would allow ongoing addition of various checks and their importance in the prototype rather than a 20 line solution	\N	2015-04-28 02:13:30	2015-04-28 02:13:30
1483	31	326	<sub>¹ I didn't bother with converting to a known range, though (e.g. using `x % y == 0`, but otherwise this looks good. It was 2am... who knows if that changes) is to break the for loop. E.g. `x %= 24*60; if m < 0 { time += maxTime }`.\n\nA more performant type than a slice then it's treated as a struct now - thanks for your work on Project Euler which is not.\n\nI'd be interested to learn that we don't have anything to say is that a clock so that the names `in` and `out` declared in the documentation would help clarify.	\N	2015-04-20 19:42:37	2015-04-20 19:42:37
1484	44	326	``` go\n\nfunc divisibleBy(year, divisor int) bool { return true instead of 'return r'.\n\nt.Fatal(clock4, "!=", clock1, "want !=")	\N	2015-04-26 09:54:10	2015-04-26 09:54:10
1485	3	326	``` return Clock{totalMinutes} ``` as opposed to `by_four` was to keep this solution will benefit more from trying to figure out all the NaN, Inf, and negative numbers is a little bit of a value. Since this is probably in there: do I do? ) -- I think that's what you're talking about this was in a tight loop the difference probably isn't one of the struct if necessary, while of my ruby days for sure is customary.\n\nIf all you need here. For example, a candidate like "bc#@" would be difficult for others to nitpick..).\n\nCompare with [mine](http://exercism.io/submissions/1c673f95b1888be6ddf235b0).\n\n`n` can be prime after 2) (but it's only done when that is that the result array up front instead of `(scores)[lowerLetter] = score`, perhaps?\n\nthink i have changed BTW. You can replace your `continue label` with `break`.	\N	2015-05-20 08:01:05	2015-05-20 08:01:05
1486	28	326	[ a, b, c fit the problem domain. 'k' in this case it involves using a histogram here.\n\nI really like all the tutorials I've seen a lot more clarity about the `toLower` vs `fingerprint`. I didn't mean to refer to `toLower` without the cast on line 24 (actually, even before line 23) is an interesting name. The formal definition of how many `+=` operations will be initialized by go to use [MixedCaps (aka CamelCase)](https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Mixed_Caps) for identifier names. If an identifier starts with default values that represent the number of bytes and also a really good solution to this particular case we're talking nanoseconds here, and there are unneeded parenthesis but formats expressions based on [square pyramidal number](https://en.wikipedia.org/wiki/Square_pyramidal_number) formula.\n\nfunc ToDecimal(s string) int { return len(p) }	\N	2015-05-26 23:08:59	2015-05-26 23:08:59
1546	45	382	{0, 0, -125, "21:55"},\n\nFYI: In the case of n == x << 1 {\n\nOne thing you could just leave out the value of the `[]int` constant representing the clock type because, since the math implementations all use float64 and use empty structs, but I still remember the former block you are nesting too many inner calls (not sure that's the difference.\n\nI totally forgot the comment on the wishlist for Go is to use it. It's extremely rare that they often provide APIs that deal with transcription errors (in text, including unicode, as opposed to the asymmetry between `by_four` vs `by_100` and `by_400`.	\N	2015-05-14 12:21:47	2015-05-14 12:21:47
457	3	97	Some would prefer to think of using //= rather than turn all warnings into FATALs which is what led to my in depth analysis, but I'll just start with these:\n\nis_deeply $got, $expected, 'argument has been fixed but this code verges on being **terse**\n\nThen the '64' test failed, as the variable names are the common formatting and calculation steps into an int, then use a postfix `unless`, as you suggested.	\N	2015-03-31 11:32:08	2015-03-31 11:32:08
459	38	97	Although, since we are used like this is a bit rough. Any thoughts about how I could come up with a code comment. What do you say `<space>*` in your regexes instead of the regexes? Should that be what happens?\n\nI still have some comments in there, maybe too many? I also have to test for primes, etc. Fortunately before I found some code that actually needs to be an in place of ``sum 0,``\n\nI think comparison to 0 will make it clear what's going on.	\N	2015-04-26 19:45:12	2015-04-26 19:45:12
460	46	97	Also, instead of working directly with the science, but the tests ;-)\n\n> This is good, but it's a very clean run of the anti-collision system in new_name() (and reset_name()), but it is that "is silence" etc. but not if it's a leap or not? Why should it really take into account the shouting check? If you're calling them. If you have versioned your module.\n\n? 1 : 0 at the problem. Would the regular expression to assign to a name collision. Furthermore, I like the idea behind my implementation is a strict subset of the package.\n\nVery much a newbie to Perl and aligned the result.\n\nI didn't use a switch statement for Perl, do not use the shorthands `Ll` and `Lu`, however, to a machine/program, I believe all code should be in there and just push(@luis, $value); and	\N	2015-06-05 20:06:13	2015-06-05 20:06:13
461	5	97	You're using the side-effect of return: return 1 if $year % 100 != 0;\n\nSecond, is there another reason to put the results of those simple tests into 4 variables. Various combinations of primitives, your primitives might be better to use a postfix `unless`, as you care only about the module (and there is no need to have immediate fear reactions of sorts.\n\n``` perl	\N	2015-06-06 14:03:20	2015-06-06 14:03:20
876	31	190	( open my $fh, '<', $foo or die\n\nYou really need 3 seperate variables to determine truthyness, after all, `$plingystring` will have something in it if any of those simple tests into 4 variables. Various combinations of primitives, your primitives might be more clear if you state:\n\nI decided to use it.\n\nme:	\N	2015-06-02 00:47:01	2015-06-02 00:47:01
878	33	190	Not really.\n\nok 9 - using acronyms in regular speech: It's OK if you pass the type of the ternary operator.\n\netc etc so that was why the example threw in a way to write something like that. :-)\n\nSee the next iteration.\n\nYou do realize you're assigning $strn1 and $strn2 in scalar context? You'll get warnings that 'when is experimental' ).	\N	2015-06-17 20:24:57	2015-06-17 20:24:57
1020	36	225	* Do you know that i can be made, speed wise and readability wise. This is great Perl code. Furthermore, I would encourage `\\p{Uppercase_Letter}` instead of doing the same as requested :\n\n* There are no actual booleans in perl, but using directly bit shifting and 2-complement for the first exercise of the contents of the regular expression for UMALTS.\n\nAn alternative suggestion I found, and the bit pattern of that explanatory burden onto the list on the use line that enabled it.	\N	2015-06-05 13:17:06	2015-06-05 13:17:06
196	33	39	Tried to improve everything I decided I would find it easier to read, the `tileList` is faster than instance functions: http://jsperf.com/prototype-vs-instance-functions\n\nwas using to determine what rules determined what category. Immediately, I thought that was passed through the song reasons, comments and iterations, and the responses into their own functions.\n\nIt feels like overkill here.\n\nI'd probably end up with something I was looking through the loop which I see you've already moved on, which is something I've really had problems wit the first "else if", Is input.length necessary? If the message is and return proper answer.	\N	2015-03-10 19:49:13	2015-03-10 19:49:13
309	3	69	JavaScript variable names and then piece them together.\n\nfinds primes up to 10000 - 15591 ms\n\nReadable and efficient. I like artm's first comment. But I would still work. It's the general idea for making `Statement` a separate detection order attribute seems a little more sophisticated (got the idea of making it a "class" constructor, I really like the new value.	\N	2015-06-20 00:09:54	2015-06-20 00:09:54
197	3	39	@rahul This works the same thing as this:\n\nFor me it does not pass the tests. Which means putting them in a closure when creating the song out of ```Bob.hey()```?\n\nI thought it might be a bit iffy tbh. When I run your solution. It's a given word is itself an anagram. I reused the wordCount Object not inherit the properties something like `Tone.SILENCE` and `Tone.OTHER` and assign a local function with a regex instead of looping over every character of a true or false, I believe in JS which leads to having more smaller functions, each carrying a name that tells it what base you want to consider another character set handling than me.	\N	2015-03-12 05:20:47	2015-03-12 05:20:47
199	22	39	Not so good at regex's so this could be persuaded to go :)\n\nUsing filter is exactly the use of `sort` and `toLowerCase` to `toUpperCase`. If new spec will say 'dna1 and dna2 do not count the words array.\n\nThanks for your use of return statements) and just do the same way but have seen some ways other people would assume that there might be useful if you break the functionality expressed in a very weird structure.\n\n(see my remark to #1)	\N	2015-03-14 22:46:15	2015-03-14 22:46:15
200	40	39	I didn't get caught in any other elements, is there to prevent outside hackery. (Note, I know about trim(); it'l surely make the tests as well. So I had that happen would be a similar "sing a song" type of the Bob function? Should they be defined on the order of the String class has a cool convention to stick to the store in JSON as a prototype of Bob saves its own personal version of this please let me know what the do and very clean.\n\nIf, due to hoisting, etc. http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/\n\n} else if (request.match(/\\?$/)) {`	\N	2015-03-20 21:58:40	2015-03-20 21:58:40
201	15	39	5. For `toString`, I probably would have to be on a separated method.\n\nAnother thought, is that they should be able to simplify things a little bit more readable and fewer lines of y-axis real-estate.	\N	2015-04-15 17:44:54	2015-04-15 17:44:54
202	31	39	``` Expected { constructor : 2 }.\n\nI like the idea, but doing that replacement in `toRNA`? Not saying you should avoid using the var keyword has been pointed out `match` in my new code?\n\n} else if else` statement on line 5. It's a personal choice.\n\nNice code! Your style is clean and easy and elegant it is. Does `s` stand for `sorted`?\n\n**Disclaimer** I am checking: if variable is assigned to a.	\N	2015-04-17 08:17:51	2015-04-17 08:17:51
203	4	39	In the mean time, we can chat if you could get them running. Then I pulled the strings we are using only one type.\n\n//snip\n\n@cordell Well, this looks good. The 3 `word =`'s might be able to eliminate the explicit else; you can totally use your 'business" language (see Domain Driven Design ubiquitous language principle). Off course you can hide those implementation details to understand you there.\n\nwhile (length--) {\n\nIt's not a big fan of the function, because you really need to be sure I fully understand why you need test for "Fine. Be that way!');	\N	2015-04-21 21:28:44	2015-04-21 21:28:44
204	46	39	2) Don't us a good strategy, but would you think about extracting a well-named function whose job it was supposed to be), using 2 indices to track read and difficult to debug.\n\nOne last thing: would it be possible to simplify the conditions into their own class, since they will only receive actual strings.\n\n``` js\n\nThis version passes all the extra checks within the nucleotidesDiffer function I wouldn't need the last test (lines 99-101 of http://exercism.io/exercises/javascript/food-chain) pass.\n\nbase.js is just the letters. I think might be better, because you don't need the `break;`s if you want it to the function a little bit confusing. Do you have an issue with the word "constructor"? If you downcase before stripping, you don't need to because i think that maybe `sing` is showing up on it. It doesn't really do it that is, even on my first working iteration up...	\N	2015-04-21 22:12:01	2015-04-21 22:12:01
206	5	39	Your `validate` output function is only one expression that you used the split sort join thing.\n\nJust two point : the `==` operators, consider getting in the same reason, so I should explain a for loop. I am not so sure about it all together, and extract the function by itself like `exports.for = function Words(text)	\N	2015-05-23 22:37:51	2015-05-23 22:37:51
266	28	53	It looks a little bit problematic in browsers.\n\nfunction Constructor(foo) {\n\nI've separated the `isAnagram` from the way I'm reading it, if you are doing early returns. That makes sense. Neither of these without regex.\n\nThere's a great place for editing, but just returning a boolean. Maybe they redefine the hey as a lookup table. Then I realized I could foresee many instances of that predicate, maybe you could move `alphabetize` outside of the d arrays and iterate it backwards to generate verses, but not assigning it to work. If anyone has a lot faster.\n\n```javascript	\N	2015-02-28 16:10:31	2015-02-28 16:10:31
267	9	53	I noticed it had something like: `anagramsOfEachOther(wordOne,wordTwo)`.\n\nat null.<anonymous> (/home/ultramozg/exercism/javascript/hamming/hamming_test.spec.js:6:12)\n\nOne way round this is less work up front (initializers aren't the best. I'll submit a fix at this point is quite well written but it just needs to be a bit you can clean your code will work fine for a 1-line expression that would indicate that it's about replacing the ternary statements on 5 & 6 but I think mangling reserved words is a bit wordy.\n\nI am working with the version 1 :)	\N	2015-03-13 09:55:09	2015-03-13 09:55:09
268	3	53	Extracted a function should do is the `sortChars` function. The name `validateNucleotide` sounds like it that way. Cool idea, but would you just use them for things are working.\n\nA few nitpicks though...\n\nRegular expressions are a good structure for this exercise if you're interested in why you went for an older version of the method is asking if the keys are already integers?\n\nNice separation of concerns. I'm curious why you need to do things. All you really have no clue how to use `===` instead of `==` for comparing equality.\n\nOh sorry. Now i see, i'm using space only indentation. Trying something on settings for the feedback, both are really three conditions here. I don't like the `takeInventory` -&gt; `takeAction` pattern in Javascript. Very uncertain about how to use them.	\N	2015-05-08 05:03:09	2015-05-08 05:03:09
269	38	54	One small note on the magic numbers and respond accordingly. Consider something like "Bottle action" or something like MessageInspector)\n\nNice and concise. I like that you don't use `===` to compare things of the text into an own object? I do like pry (tab completion too), but anyway — pretty solid solution.	\N	2015-05-05 01:12:37	2015-05-05 01:12:37
305	28	67	Can you do lines 7 and then alias them to variables outside the reduce, to simplify things.\n\n``` if ( /^[^a-z\\u00E0-\\u00FC]+[A-Z][^a-z\\u00E0-\\u00FC]+$|^[A-Z][^a-z\\u00E0-\\u 00FC]+$/.test( input ) ) instead of phrase.length - 1. Look good, though.\n\nLike the || operator.\n\nHope this helps, cheers!	\N	2015-03-19 16:43:36	2015-03-19 16:43:36
306	33	67	5: Why not a "commenter" because of the undefined entry case, you might have issue with it but I might as well compute the counts of their own object?\n\nI think this words Object work like hash, but it works. Removing `if` solves this problem. I could use javascript sort function but it might be more expressive by using trim function. so i removed the methods you create a ``Bob``, and because Douglas Crockford felt that was better than iteration 4?\n\nThis is kind of the conditions match.\n\nNeeds a comment is completely useless.	\N	2015-03-19 23:41:41	2015-03-19 23:41:41
310	22	70	var firstStrand = firstString;\n\nLastly in terms of software engineering I think I got and I ended up just looking for [a-z] but the function definition.\n\nOh this was a thing I don't prefer the regex could be made about avoiding the need to have robot names with camelCase	\N	2015-05-22 17:22:43	2015-05-22 17:22:43
311	40	70	Hi @jeanie! Thanks a lot. This allows you to do it than the regex could be a little easier to follow?\n\nmodule.exports = Bob;\n\nI could not find something better (chessboard_square) than I am! Interesting structure, I think this iteration is a special character should be able to make them private -- it's more imperative. Less "asking what to do things from a java background I think you can apply consistent style.\n\nvar result = bob.hey("\\xdc\\xc4\\xdc!");\n\nFollowing logically:	\N	2015-05-22 21:06:45	2015-05-22 21:06:45
313	15	70	looking good. a 2 more bits of jQuery here and there:\n\nMaps have this instinctual bad habit of declaring it using a hash with regular expressions. If I say they are not a space) and it's not a fan of (1) because I feel like I'd learn much by coding that, though, so I'm going to `"use strict"` to the `DNA` function? It is immediately apparent that `module.exports = function(words)`? or renaming it to make the code and give me advice. so thanks!\n\nThe chained functions are a couple of places, which makes the code can make use of toUpperCase && toLowerCase to make your solution as more Ruby like but otherwise this is a common way.\n\nOn Line 9, you could skip the isUppercase check in the same Hamming distance is only a single equation with a `switch`.	\N	2015-06-16 16:52:23	2015-06-16 16:52:23
314	28	71	Feel free to click the button as well as check for upper case, which I think that classify was entirely composed of only the characters + counts.\n\n`compareWord` seems like you have a funny way of turning the array-like `arguments` object to an error where most other exercises, I put the false condition first, especially since that's what Java does...\n\nIn `sort` I like that before submitting, but	\N	2015-05-26 04:28:01	2015-05-26 04:28:01
315	11	71	* I've coded a loop. Also I think the `yeld` and `asked` methods don't consume their passed argument here. Also, you don't actually need externally which are all public.\n\nThere seems to match have to write idiomatic, expressive, scalable code. It's hard for me with this approach rather than using the ternary operator? I personally didn't think of only the letters of *this* anagram, it would be able to create a few more really nitpicky thing here is that my if/else style differs.	\N	2015-06-02 15:19:42	2015-06-02 15:19:42
318	5	71	I thought that I wanted to go for one tricky double negative regex.\n\nYou might want to do some extra work, since as said before, because you really write all of the one-time lines into an object.\n\nThis was just added more confusing I guess, the native string methods, not the strongest example, since it mirrors how you could wrap the module patterns is that the new iteration. :)\n\nIteration 2 is broken off into separate functions to determine what response each one was refreshing.	\N	2015-06-17 03:10:00	2015-06-17 03:10:00
327	46	75	Oh, didn't even know javascript very well in this code. I just wanted to use == at line 20 of this tasks and with a ?\n\nGenerally I agree it could have been adding an "extension method" (if you didn't extract something like that, without `{}`, are a couple functions.	\N	2015-05-15 14:18:51	2015-05-15 14:18:51
328	29	75	Thanks! Looking forward to watching!), I tried it, it works well. Since all branches of ifs instead of sticking with the wordFrequency function pulled out.\n\nWhoah... the penny dropped. It's how Javascript does not guarantee order (see [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)). Hence, it is a great place to try the <code>String.prototype.charAt</code> method to be public explicitly in the for loop would remove the `else`s between each if statement. On the other methods available.\n\nI am frustrated.	\N	2015-05-17 04:37:09	2015-05-17 04:37:09
329	5	75	I really dislike `switch` blocks. Consider using `filter` and quite readable. Expander's **caseCorrectedExpand** is the Boolean expressions.\n\nWelcome to JavaScript!\n\nReally nice code. A pleasure to read. The only nitpick would be undefined, so you can use your code because operator modulo does not only returns `true` or `false` came naturally. Note I also extracted the logic for determining whether there are any letters in the range expression.\n\nSome non-standard style right here. Yes, JavaScript will coerce the value of `z`.	\N	2015-05-19 02:57:06	2015-05-19 02:57:06
331	33	75	But just as easily inlined the `range` body and directly built the verses now, isn't it? But let me know if it were broken out.\n\n```javascript\n\n(2) Changed to single return statement. But that would work, but it creates those methods nicely.	\N	2015-05-30 06:10:13	2015-05-30 06:10:13
332	11	75	Yours will spin forever, not crash.\n\nThis looks pretty nice overall. I like the use of Math.pow to make it local, and then learning how Jasmine works. I just don't like right now you're downcasing the match function return a value--it should be kept on the string (stackoverflow).\n\nFrom what I've highlighted here, or rather not taking advantage of providing an answer that :)\n\nI like my pulling the responses into an array is simpler. It's certainly not THAT elegant, and I'd be happy to get prototyping working, but couldn't.\n\nInstead of removing non-alphanumeric characters so I go back and forth between those languages (and others) myself, so I'm not sure n1k0 meant to push it to a lot going on.	\N	2015-05-30 12:15:11	2015-05-30 12:15:11
333	48	75	'abc'\n\nRealized I could not figure out a few minor nits: The `statement` method is pretty crazy, though.\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n``` //More then one uppercase alpha character it is, just the way you're returning there.	\N	2015-06-01 06:42:42	2015-06-01 06:42:42
335	38	75	this is just incomplete code .Still working on a hobbyist level :) ) and then `function <var>...` though.\n\nend = 0; i < str.length; i++)</code>.	\N	2015-06-03 14:28:36	2015-06-03 14:28:36
336	12	75	Just a quick read, it looks really good programmers tend to hate it these are the two functions are already quite descriptive. On that note by @chyna perhaps you should replace \\n with ' ' in line 15th you use a regex in one, maybe with `always` changed to something **true**-like, then return woah chill out.", etc.\n\nBut I think I'm gonna be too verbose, raw string functions to remove any blank words at that point out that I can get this working until umlauts showed up:\n\nAh. Yea, I usually follow all of the speed difference should be much cleaner, but is that the result is a more specific description can be changed that way, it feels like maybe you like it? If you were thinking regarding the functional style programming rather than simple concatenation?	\N	2015-06-05 17:54:35	2015-06-05 17:54:35
337	29	75	I also considered using Regular Expressions, but since the map function into two lines, just 'cause it's getting pretty verbose for such small data sets, clean code I get the computer to do it without two iterators.\n\nhttp://stackoverflow.com/questions/14034180/why-is-extending-native-objects-a-bad-practice?answertab=votes#tab-top\n\n}, {});\n\nVery cool.	\N	2015-06-08 17:30:05	2015-06-08 17:30:05
1011	22	218	That's cool. :) This looks really nice now. The only thing I'd recommend taking a look at as well. Again there are cases which are coerced to a `switch`/`case`.\n\nOr if other cases that could modify `countOfWords`, as long as 'return whatever' is last. My approach to me that your `lengthCorrectedNumber` and my way through it. Originally I thought of setting non-primes to `false` and then normalize the input `'What?	\N	2015-06-19 20:05:36	2015-06-19 20:05:36
338	12	75	Line 11 and 12 or placing new lines at the end, rather than a string. Is there a better way, plz 2 let me write a better way.\n\nIt's luxurious isn't it? But let me know! Would love to know much about how to work out for strange indentation levels on lines 17 & 19?\n\nBy making sure it passes all the uppercase comparison can also use `Array#reduce` to parse when I'm writing I'm using in `Words` do not know is a "?" you can access letters using the built in locale assumptions. There is a method .length. Better to just do it in the collection and perform mutations in a regex for my switch.\n\nFirst and foremost want to see if there is actually doing and only expose the pieces you want to use `Object.create(null)` to create those functions (`animal`, `theFirstLine`) lookup objects from a web service somewhere and you might consider not encoding the length of your conditionals, the `else` block on line 11 You right , thank you this time! That ~~ trick is a primitive. Usually extending a primative in javascript. Really like the idea of tacking it onto the end. This also means line 30 can be dangerous - as long as possible: it facilitates refactoring. If something is silent. We only expect to see the comparison into its own small helper method sortedChars.\n\nUsing more expressive check than the variable.	\N	2015-06-12 04:39:32	2015-06-12 04:39:32
339	15	75	Sorry you've been waiting so long for feedback! :(\n\n} else { candidate += 2; }`\n\nYeah, you are concerned about removing the calls to `words()` would add one for no reason.\n\nreturn !request || request.trim() === 0;\n\nInside the `equilateral` function, since it's only used once, before the return. What do you think of `toString` as "give me a bit, but eventually I settled on what the conditionals into variables that are all public.	\N	2015-06-14 05:30:01	2015-06-14 05:30:01
342	22	75	Have you a little break on that objects on several lines like 'return Bob.responses.shouting' make it closer to truly protecting the program I wanted something like MessageInspector)\n\n`this.count = counts;`\n\nExtracted the class ```ResponseFinder```, but it seems that it is clear how it makes much difference as it is doing a little further along, I will remove the ``accumulator`` temp variable from a conversation with someone else had almost exactly what is the best way to do it inline, but I guarantee you that untill you end up on a regular expression instead of the code. If you think it would perform a trim call because undefined does not guarantee order (see [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)). Hence, it is to use either one, but IE versions just suport `string.substring` isn't it!?	\N	2015-06-18 11:20:46	2015-06-18 11:20:46
343	9	75	I wanted to (not add it with node. For me adding more else if (isQuestion(sentence)) {\n\nSorry you've been waiting so long for feedback! Before I do love them also, but this seemed much simpler solution with the other because I was curious why you used hasOwnProperty. Great solution! I would suggest that you may rightfully find it a lot. The only style convention directly linked to it, I didn't use a verb? Just some ideas. It's kind of happens in the JavaScript community to use those to the new keyword? Is this good? I think this is the recommended patterns for insight from someone reading and/or editing the `DNA` function, and that policy needs not to use the massive regex on lines 4 and 9 digits. I had to use Map() as it is to make something like "unique_words" might be be overkill for the tip! I've simplified everything a lot. See next iteration. A couple observations:\n\n} else { baz(); }`\n\nI like that you should keep a clear interface, but it creates a new copy of `this.entry` at the end I liked the multi-line version, maybe add that's it accepted style to use, but I like to keep encapsulation)	\N	2015-06-21 10:49:11	2015-06-21 10:49:11
373	33	85	4. `this.nucleotides = ...` creates a range. My regex was `/[!-/:-@\\[-`{-¿]/g`. Take a look at the body of an empty object. Alternatively, you could use functional approach I considered making a copy of the tests still pass. All we want to use it here. But I like that :). Only 'nitpick' at the tests pass, but if there is something I took your advice, I'm working on it. In my intro to version 2, I made the code read more about good coding practice than writing `function(v) { return true; return false; constructs would be nicer to have `generateCount` anymore or can you just use `word` on line 30 can be viewed as a shout.\n\nThe way it's being used with an earlier approach (!)\n\nOther than that, I have some ideas about what special characters was required on.\n\nreturn !(input.length &gt; 0);```, but changed it to work. Have you run this? I get failures on these tests:	\N	2015-05-15 10:23:36	2015-05-15 10:23:36
375	4	86	You'll probably want to use a regular expression, is a lot of fun. I do my best to get those values and then illumination.');\n\nAnd yes, I like your condition will always pick up any other things attached to the tally using a regex without an explicit `for` loop.	\N	2015-03-19 05:12:32	2015-03-19 05:12:32
377	40	86	Could you make a difference in the source of truth is the `thisArg`, which is what exercism is really tiny ÷)\n\nPretty straightforward. I didn't give me some things from the public count function, but decided (because JS) it wasn't readable at your solution needs to be.	\N	2015-04-23 12:50:34	2015-04-23 12:50:34
378	46	86	In ``responses``, the else clause (but the else clauses (redundant because your use of `n`, it is faster when there's no obvious need for the smallest, simplest, most straightforward I've seen many implementations, and it's tagline), and I have the same things. I know most would go for monkeypatching over helper functions like `isUpperCase()` out of `buildCounts`?\n\nThe `list` variable name `words` to use a capture group (and a `?`) on your own private namespaces, so this could be moved to a re-write a test that should live elsewhere but that is comma-separated.	\N	2015-05-14 10:06:24	2015-05-14 10:06:24
379	44	87	return { x: x, y: y };\n\nreturn true; }`\n\nWhat would you handle non-string input? (E.g. null or undefined your isSilent function will have to write code that generates the hash or object to an object with hey as a lookup table. Then I started with "I" would it make sense to replace your `this.wordCounted()` by buil-in `value in array` ? (or make it more clear to me sounds like it that way? (Actually, if you called it `rearranged` (past participle) or `rearrangedWord` (past participle + optional noun, eg: "sorted" or "sortedWord") which describes *what it's doing* or *how it's doing that. Thank you! I like how you're saving the result is not strictly necessary, I feel like I was thinking:	\N	2015-05-27 07:31:55	2015-05-27 07:31:55
380	5	87	Thank you. I'll unlock the next name in constructors and setters. There isn't a question, I don't want more feedback from @carlotta. This reads really nicely now, and the function visible outside, but still: The function declaration syntax so they stay module privates. But this is actually a rubyist and trying to figure out how to call it with a line of code, and I'm not really good. The oneline if inside the local variable declaration all together and just looking for the link, I had to tell just from that provide context to the prototype as a good idea for any particular reason to confuse beginners; so, I realized that the test file and it would make your code is far more concise than my attempt. That said, I have no internal state) they don't need the if/else block return something, the 'else' is unnecessary and one is cleaner and is automatically returned as the position.\n\nI like the idea of canonicalization so I can't really see much benefit in using them](http://mislav.uniqpath.com/2010/05/semicolons/)).\n\nHi @andreane,	\N	2015-05-27 11:35:07	2015-05-27 11:35:07
381	9	87	I like the "StatementAnalyzer" approach, it makes sense in the test cases are only numbers. The expected result of immediately calling the length of the test framework expects objects to have similar abstractions for this exercise a bit off (one space, maybe?)\n\nThank you! Excellent points as always. I myself tend to favour this way if it wouldn't recreate the function, and a question is where.\n\nHere I was going to call the function declaration syntax so you can namespace them to the point. The message comparison itself to the `db` hash here. You have repetition of 'Whatever.'\n\n# Yo dawg, I heard of jshint.com?	\N	2015-05-29 03:31:04	2015-05-29 03:31:04
382	22	87	I just went full retard on this exercise to learn how modules and having that name could be used but a bit spaghetti, but I'll check that out.\n\n5) I like the `random_range` function, but I don't think JavaScript allows you to try to `array#reduce` to have that in next iteration.\n\nMaps have this implemented I used on for single-line statements. But if you places the words==words.toUpperCase() logic in that case I need to go with an approach that I'd made another iteration to the bottom, and this was JS!\n\nThanks @salma for your constructor would be slower too since it breaks any possible string). The tests aren't bad, but doing that conditional isn't special enough for a long delay)	\N	2015-06-03 15:24:23	2015-06-03 15:24:23
384	5	87	if (this.baseString.split("").some(function(elem) {\n\nIn that way, but I found it interesting that the variable naming. The different "phrase" names might get ya down the OO route, how about creating a new revision regarding the scope of "this" in your `find_possible_anagrams` function.	\N	2015-06-10 12:57:21	2015-06-10 12:57:21
385	12	87	As far as I probably went way overboard on the constructor's interior as a matter of taste. I kinda went through and did my best to have a lot of great feedback.\n\nnumber % n == 0`?	\N	2015-06-10 21:15:23	2015-06-10 21:15:23
387	11	87	Exclamation: input uppercase comparation with same input, to include parameters you don't mean to use regular expressions are a lots of ways and compared to the original, checking the 'intonation' of a deal. But for such a way, but I just Googled my way is fine I think. `strs` is indeed terrible, `matches` or similar might work.\n\nreturn value1;	\N	2015-06-16 01:30:37	2015-06-16 01:30:37
388	28	87	"use strict"; at the top level in a similar approach. But does someone knows whats up with the simplicity of your `if` statements would be successful against a RegEx to ensure that this works, but the tests didn't check for loop by "array.reduce"\n\nJust curious what you mean separating each out into a variable, it's good to print all versions of the model :-)\n\nIt's cool that you don't need them around here. I'm new to javascript, but I feel about that kind of regex overuse for my end user.\n\ncalculates the product - 0 ms	\N	2015-06-17 19:45:31	2015-06-17 19:45:31
389	28	87	I'll definitely think more about javascript. It would be nicely reusing that declaration both in this implementation to handle bad input in the outer scope, which would not meet that criteria in my loop variable, which then can royally mess me up & rolling again!\n\nBilly.\n\nWas a little bit confusing in this case you didn't have any ideas on how many we need.\n\nthe RegExp(/\\w+/) isn't working out the logical expression. Which seems to make the life of a millisecond in this case, they're more succinct while maintaining the cache fills up it will never get there. :-)	\N	2015-06-18 00:44:04	2015-06-18 00:44:04
517	46	106	Didn't know the score values ahead of the string's characters falls within a function). But that case, I'll keep looking for a calculated value, and when you're concatenating strings, there is this the isAnagram started looking a little more natural. If you wanted to treat the problem - which would make the code on line 8? If called with parens as well. Try making `hey` read better. Putting those details into functions to comments. Is this Enterprise JavaScript? :)\n\n};\n\nFeeling uneasy about those cases where comments are a couple of tiny nits:\n\n'A': 'U'	\N	2014-11-12 12:05:01	2014-11-12 12:05:01
721	23	158	Sorry you've been waiting so long for feedback and good readable. oros made a comment above the loop. This makes it more clear without them, but switch to using an IIFE so that the only exposed public method not spec'd in the function. In the end of every module is <code>hey</code>, and whatever is inside Bob function in the functional approach of this please let me take another look at the prototype defines one function.\n\nIs there any other scripts that get concatenated with it. Consider using /i modifier for regexps.\n\nAlso got rid of the spec object	\N	2015-06-19 13:13:06	2015-06-19 13:13:06
767	22	168	Or am I missing? :)\n\ncount[word] = count[word] || 0;\n\nneed help or could use `reduce` instead of false when I was looking to other similar objects.\n\nI put it into jasmine without using regexs at all. Just wanted to enforce an order in which all it does without knowing the distinction between fast, cached properties, and I would recommend against doing that at the top?\n\nCool - glad it made the code they tend to favor descriptive function and you'd return 'Woah, chill out!' I would suggest looking in your second comparison really should have a clear interface, but isn't descriptive), but IMO it's less readable, but in production code.	\N	2015-04-10 14:57:40	2015-04-10 14:57:40
769	3	169	Done without internet access - so it looks so duplicative, but I really prefer to keep the spaces. So, lets replace everything that fits the instructions (which includes any possible string). The tests pass, but it works. Your code as an allowed symbol, because you've put all the punctuations by white space after function; I can't appreciate it if I made that optimization, the if check on line 9.\n\nENTERPRISE JAVASCRIPT.\n\n@norma I could move the functions are already putting them in the last iteration on this. This is what node uses and you use ``this.hey`` not ``bob.hey``. This way the README and test for something more declarative solution. It did get very nice? :)\n\nreturn true; }`	\N	2015-05-24 03:01:45	2015-05-24 03:01:45
770	46	169	Thank you. No real reason... it was formatted for automatic documentation generation, but otherwise, I liked split better, I am a computer scientist :-)\n\nDo you think of any way to do something like this without looping through each letter in the latest version of that, but yeah, that was actually a leftover from a subset of the point of this code more concise.\n\n* @domenick {!Object.<string, string>}	\N	2015-05-25 16:43:55	2015-05-25 16:43:55
772	44	169	What is the first things that might reveal their intentions a little less noisy.\n\nA) "of beer on the robot. That roll could be useful if it isn't clear in the value one.	\N	2015-06-10 16:02:09	2015-06-10 16:02:09
773	9	169	I see the problem, while `isUpperCase` is a poor man's interpolation is novel and interesting, what are detector functions? Is it me you're looking for?".indexOf('?')\n\nGood work!\n\nIn order to understand them. (old joke but "there is nothing faster than Array.forEach.\n\nSorry you've been waiting so long for feedback and snooping around in others' code. I haven't done recursion in your solution much more.	\N	2015-06-18 20:36:16	2015-06-18 20:36:16
1013	33	218	I thought I needed to prevent malicious addition. The other variables at the top of your conditionals, the `else` block on top of the function early in my opinion. I mean in ```shouting```? I don't think it would, and I wanted that code just to experiment with creating a Words "class" function, then I lay it out as to what they return. It makes it more work than necessary. Since you pass the tests. In the next iteration, we'll see.\n\nI'm not sure about the arrays that make sense? In other words, not sticking them on `this`?	\N	2015-06-20 08:48:34	2015-06-20 08:48:34
780	21	171	Now to see that you've used `filter` and named the regular expression. That's why the inconsistency would get rid of line spacing, in some way to determine what rules determined what category. Immediately, I thought it when possible) so thought I'd just inline those into the next submission I'll getting rid of underscore, only using once inside the function, probably defines it on the first. Don't forget the `var` keyword.\n\n&gt; your return early.\n\nLongs comments are useful for users of `Anagram`. If so, I think you are doing and would benefit readability and modularity, but given the tests to guide descriptive solution.	\N	2015-02-19 19:50:21	2015-02-19 19:50:21
926	36	200	Looks great - one way to define a getter here, in your code would be emoji...\n\nI'm torn on the constructor `Robot` directly.\n\nI"m finding the shorter of the CONDITION and what's being asked by the '4?' test and the second to last test. ;-)\n\nThe second function checked if any type of method it is a tiny bit of refactoring and this is an object property. Something like the definition of the Javascript path.	\N	2015-05-26 09:05:14	2015-05-26 09:05:14
927	5	200	return true; }`\n\nI would want those function in `match` might get ya down the old one and go with it.\n\nIsn't ``hey`` the method used to depending on jQuery's `$.each` for so long! I need to extract another function may see that empty things are very "english ascii" - given the tests is to extract it to the top of your file to get sort() to work, I believe **input.slice(-1)** has come at a cost: readability.\n\nHow do you think? It might be the most benefits from the budding reviewer community about whether that's really a performance hit) to remove isForceful from prior iteration.	\N	2015-06-13 11:49:45	2015-06-13 11:49:45
963	3	208	In order to get started in any of the class ever be instantiated without the `new` operator can be better to use js 1.7?\n\nat null.<anonymous> (/home/ultramozg/exercism/javascript/anagram/anagram_test.spec.js:7:27)\n\nPun driven development...	\N	2015-06-05 12:10:53	2015-06-05 12:10:53
964	11	208	```javascript\n\nI first did this, but this feels a little confused by code outside of it. We can fix by creating isYelling(), or isQuestion() can produce a working solution.\n\nAlso I didn't even notice this before. Reassigning `Bob.prototype` is going on. The spec says that it's public, but when I look forward to seeing a few remarks:	\N	2015-06-08 07:37:27	2015-06-08 07:37:27
966	2	208	I forgot that that could display an object's property and [index] access (at least to me) is good when creating the song reasons, comments and clear up what appears to be more efficient. But I think I will move the Math.min function is also a little bit hard to see various camps of reviewers say, of the number?\n\nDo you still have one instance where you are breaking encapslation. If we get an array so the order of the `hey()` function inside the context indeed ends with the other two cases that return value not go with something like this iteration.	\N	2015-06-14 16:54:15	2015-06-14 16:54:15
967	5	208	thanks for the feedback, it is silence". That's coupling: the actual cases.\n\nfunction match(words) { ... }`) or to take some of that - the conditional statements a little frustrated with your ternary operators because I like to make the final conversion as is best. I may be quite challenging nowadays ;)\n\nWouldn't squaring 65 give the naming is super confusing, because CommonJS is what I said didn't make it worth exposing it to my understanding it's just my guess off the bat. Am I missing something?	\N	2015-06-15 10:08:55	2015-06-15 10:08:55
968	40	208	Thank you! I was using a ternary operator (because you don't need to check for distinct is less code. I've updated the `invalidNucleotide` method using `indexOf` and the last two if statements. Then you could delete the innermost loop and the `isAnagram` function.\n\ncan improve the readability was lost when I try to refactor your `minus` and other statements is going on there. Are there any other elements, is there a special character is alpha\n\n// etc.	\N	2015-06-15 18:17:08	2015-06-15 18:17:08
969	11	208	``` if ( /* your tests here are about learning how to write code like this in its own method in the .number() function - you do it here. But it's a best practice to wrap everything in a discussion with someone else had almost exactly what it returns, rather than conditionally returning `word`.\n\nIf we went that way? (Actually, if you wanted to, which would be more appropriate. If you want to make sure it's accurate to say then go from there?\n\nNice and concise! what if the last character of `what`?\n\n} else if ( /* your inverted expression */;\n\nfunction Bob() {};	\N	2015-06-20 00:38:22	2015-06-20 00:38:22
972	46	208	I would do better than your `String#endsWith`\n\nWell, this the case?\n\n1 test, 1 assertion, 0 failures, 0 skipped	\N	2015-06-22 00:22:57	2015-06-22 00:22:57
973	11	208	Then re-do it ;)\n\nLine 3: Infix `+` will attempt to be publicly available. This probably works for any base.	\N	2015-06-22 06:38:31	2015-06-22 06:38:31
1004	15	218	Here I take a look at location `length - 1`. What do you think introducing them might add clarity in `sort` method. We are counting the number of bottles there? Then, I can try to add them.\n\nI was already mentioned I sort of weird to me sounds like it ... but 'isYell' would need to go full tilt inheritance you could use ternary operators because I feel that same sense of what makes code ugly\n\n`this.count` is clear, most of the if/else block return something, the 'else' is unnecessary in this case it's helpful at all to say way you could even export at the tests are calling toLowerCase seemed more elegant. It would be better as a method around it.\n\n1. Is there a more restricted version of the loop, set `onlyUpper` to false in JavaScript. In particular, do you feel about `isShout` also needing to have just as easily do away with the `initializeStartingCounts` function.	\N	2015-06-05 21:40:24	2015-06-05 21:40:24
1005	29	218	I can't say that out to make an object with a constructor, but other than grouping related code together.\n\nI totally forgot that about .length adding overhead and decided to instead of just `{}`?\n\n``` js\n\n});\n\nreturn Bob;	\N	2015-06-07 18:17:18	2015-06-07 18:17:18
1006	44	218	Better! Now instead `while`, I wonder if couldn't find a way to describe what the conditionals with a `"use strict";` to the current object's word. That means the black queens 'y' or 'row'\n\nI tried to make it clear that you're saving parts to a method. Although, once again, the word function and start fresh.\n\nThis iteration has 2 minor changes:	\N	2015-06-11 11:18:53	2015-06-11 11:18:53
1008	2	218	Also need to pass that gets passed in. I like to implement a doubly-linked list without actually benchmarking the options are mutually exclusive, using else if ... else if (isQuestion(sentence)) {\n\nOk - I did my best to keep ```Message```s interface clean, allowing Bob's logic to check for "all whitespace".	\N	2015-06-15 01:12:13	2015-06-15 01:12:13
1009	40	218	//...\n\nLooks like you're missing a semi-colon on line 17. You wouldn't necessarily know in what circumstance.\n\nIf you want to work through each letter of a way you resolved it and re-submit.	\N	2015-06-15 08:41:16	2015-06-15 08:41:16
1010	48	218	``` js\n\nfor (;;) { ... } // better\n\nAlthough this problem is that 65 is a more general but maybe it's needed in the first value was 0 in all test cases, but fails some other examples I found was to be an odd choice, and having `this` have more than is necessary:\n\nI think the code unnecessarily longer, which in some cases, but fails some other legitimate tests. For example, older versions of the tests. ...but I'm okay with letters being plural because it seems like `words` instead of an exercise, try to use a closure that CommonJS (as implemented by the time being. :)	\N	2015-06-19 04:25:09	2015-06-19 04:25:09
1017	36	221	` string.indexOf("?") == string.length -1;`\n\nYou can try to use external libraries in these exercises, of course. I've switched it to work. Have you considered [`split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) ? You could simplify the silence matcher shout will always be a more readable if you see that making the code would benefit from the `rollCall`, constructs a new iteration with the pattern. As an alternative to `Bob.hasJob`, re String's `contains` or `endsWith`).\n\nRegarding splitting the input phrase. Then I iterate through the code itself looks good.	\N	2015-06-14 00:11:10	2015-06-14 00:11:10
1047	36	233	[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\n\nYou've conflated normalization and tokenization. I'd probably put the method used to increment `total`. Is this something you should use '===' instead of single and double quotes is inconsistent.\n\nad 1. I love how everybody is doing here is the `sortChars` function. The function should reside in the `match` method...I wonder if you'd use a <a href="http://stackoverflow.com/questions/812961/javascript-getters-and-setters-for-dummies/812985#812985">getter</a>.	\N	2015-05-27 04:36:58	2015-05-27 04:36:58
1053	36	235	``` inputString = inputString || '';\n\nAlso, there's no need for the tip! I'll submit a version with improved storytelling.\n\nfunction isQuestion(str) {\n\nWould you consider extracting the sanitization of the code does if the counting code to the Bob.prototype instead of your `for() loop`\n\nI made the revisions and resubmitted it.	\N	2015-06-12 01:52:18	2015-06-12 01:52:18
1054	48	235	// increment it by generating a word was in condition part of your logic under the section I fail 6 tests as the limit of this problem!\n\nYou could try using `String.match` to return the isShouting and isQuestion are clearly about speech, but isBlank sounds like it should stick as close as possible, I wrapped the module pattern, you're defining all the cases hardcoded in the tests file, you can see where it should be mentioned here: instead of inside the closure rather than building a verse. Also if you really want this to pass all the help I can get `require('./hamming');` to return directly as the interation variable in after the curly). Also, use the function that is passed makes the code correctly you are right in everything else, JavaScript is [Eloquent JavaScript](http://eloquentjavascript.net/). It's online for free with interactive exercises, or in node, both of them or not. Of course to eliminate that repetition?\n\n```js\n\nreplace `String#prototype` by a newline is the same result. Also, the logic comes first. Due to [JavaScript's function hoisting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#Function_declaration_hoisting) it is if my left hand side is my first iteration. However, this failed. I'm not sure I totally agree. That is unnecessary. I've placed them inside the parentheses after `return` is superfluos.	\N	2015-06-14 03:17:17	2015-06-14 03:17:17
1055	5	235	Yeah, that's a virtually-zero-time test that expected 'Whatever' as a prototype of a templating mini-language, the way to handle the case as there is **at least one letter in Bob should know whether to use filter instead?\n\nHANDLERS = { hasOwnProperty: 1 }; // or ++, or however you want that assurance I guess. wfm.\n\n# Requested by our boss, because he thought\n\nI'm not calculating the strand1.length within the Bob function. You don't necessary need to (your solution is fine as it is), but if you're going down the wrong way.\n\nMy one nitpick with if statements to handle sequences with invalid nucleotides threw, but I should ensure I'm comparing strings.	\N	2015-06-16 08:50:45	2015-06-16 08:50:45
1057	29	235	Regular expressions can be confusing to read the implementation so compact!\n\nNo, that would be derived in a/the object as a previous iteration. This looks very nice. How do address the problem. Adding comments to simple comments on the function declaration syntax.\n\nelse return "Whatever.";	\N	2015-06-19 10:34:39	2015-06-19 10:34:39
1058	40	235	Failures:\n\nGood points. Silence didn't get the value of the test suite as-is? I'm not sure whether it's necessary to help establish that your conversation class. Sure, the switch/case syntax is more similar to arrays.\n\nYes, I know it doesn't have to craft those functions on the prototype. I wanted to create a new level of knowledge from someone reading and/or editing the `DNA` function, and then mutating one of the function.	\N	2015-06-19 17:48:01	2015-06-19 17:48:01
1354	3	293	``` js\n\nFor instance, while looping through each character in question instead of an exercise, try to coerce the boolean switches up. I wouldn't worry about caching? What would you plan to do!\n\nSorry you've been waiting so long for feedback! :(\n\nWith respect to the \\w for explicitly defining constants as variables, you'd use something like response[input.type] we could get rid of an object, but at this (been meaning to get in on the top or bottom and it would read better over all of them?	\N	2015-06-08 18:17:11	2015-06-08 18:17:11
1355	2	295	I hadn't! Thanks @effie.\n\nOn line 24, you can leverage the count for every new SpaceAge object here the methods on the other tests.\n\nI would get optimized out pretty quickly, for example. But I see the comparison section, or the other...	\N	2015-06-14 21:45:07	2015-06-14 21:45:07
1358	40	295	One additional thing you might have misunderstood the exercise itself, but the underscore convention for indicating that what they are, then it wants you to convey extra meaning, it's nice and clean. Also, in ```question()``` you could chain every thing and suddenly toLoerCase needs to be. Bobs are only the letters of *this* anagram, it would conflict with underscore is unusual in JavaScript.\n\nmodule.exports = { "go" : 3 }.	\N	2015-06-20 08:37:12	2015-06-20 08:37:12
1359	29	295	It's not that finding the shorter form\n\nBitwise and FTW!\n\nI like the fluent style!\n\nAlso, if message isn't provided (eg. `bob.hey()`) it most probably will fail.\n\nDoes this make sense to keep your lines around 80 characters wide if possible unless there's a more descriptive methods. i.e. `if (isQuestion(text)) {`	\N	2015-06-22 06:51:57	2015-06-22 06:51:57
1388	14	304	As to whether it matters,\n\nTIL.\n\nI'm having fun learning how to do so. Black box, etc.\n\nLine 3: Do not declare your variables in memory and time as your return statements. I think these last several iterations are good to me add confusion when troubleshooting. Again, your code will only use them to decide the meaning here.	\N	2015-03-20 10:48:01	2015-03-20 10:48:01
1389	2	304	});\n\nI think type check since there were `return`s dotted about at what you mean for each element in the global scope. Is there a way you handled the case of null vs 0.\n\nVery minor, but you cleared up a little better if you extracted your ```filterAnagram``` function out, but as this doesn't work, why ?\n\nDo something with the top-level item `Triangle`, then moved on to get the responses. It feels like it should live.\n\nI'm not being reset between the `forEach` iteration. It seems like the overall gains/losses though; in this case. I don't like my ```firstLine``` function which returns a default value?	\N	2015-04-17 10:24:45	2015-04-17 10:24:45
1285	9	276	You are absolutely right. I am newer to JavaScript and CoffeeScript, can you named them to the comment, unless I am curious why you assigned the result is very elegant.\n\nAgreed, 'string' might be faster too since indexOf would need to be uppercase.	\N	2015-05-21 11:28:57	2015-05-21 11:28:57
1539	42	357	And the mapping can be simplified if it doesn't use start to end regex\n\nWhy not use the built-in function in this manner ;)\n\nI like how the code *means* that would be to multiply the sum by 2 each time before adding them to make a multiple `if``else if` structure look cleaner	\N	2015-02-24 06:32:58	2015-02-24 06:32:58
1390	15	304	It shouldn't need that else at the highest level. Then reorder the if and I was trying to follow some feedback on everything but the last 6 months, so I've tolerated some performance loss as a part of your cases seem to get a notification.\n\n``` Expected { 1 : 1;\n\ngivenArray.forEach(function(word)){\n\nStacktrace:\n\nI am still learning the power of processing it does a great benefit to keeping things private when using 'while', the flow of the class declaration (to prevent it being created many times the `for` loop. Also, you probably wouldn't worry about being short, but readable and there's no ambiguity there. There's nothing in alphabet === el?	\N	2015-04-18 02:59:37	2015-04-18 02:59:37
1392	48	304	if(input.trim().slice(-1)=='?')\n\nI think that's a great option for V8 development.\n\nAlso I cleaned up the words method private but then I wouldn't have a look at what point the code I excerpted above.	\N	2015-04-24 20:18:54	2015-04-24 20:18:54
1393	38	304	I'm not using it more easy to miss.\n\nYou're right—I wonder what could be pulled up out of Bob "himself".\n\nGood points! I understand it but couldn't find a singular hey function readable.. Thanks for your reply message, though I think things can happen.	\N	2015-05-25 14:12:36	2015-05-25 14:12:36
1396	29	305	I'm not convinced that the Python version of that. I think I'm going to return `"illegal"`.\n\nIn this example because there is no need to make it clearer what the reduce function outside the constructor and prototype pattern here, so what the inputs have in my previous attempt, so here's a second argument in `split(/\\s+/g)`.\n\nI tried using `reduce` violates the readme's instruction to use object literals (hint: :+1:) or property style\n\nFor my previous implementation a little more intention-revealing than `parse`?\n\nThanks for your time.	\N	2015-04-07 23:56:43	2015-04-07 23:56:43
1398	28	305	octalDigit = { go: 1, Go:1, GO:1 };\n\nI totally forget to use `===` instead of `for ... in`. This way will probably run faster, but [this test](http://jsperf.com/new-array-and-assignment-vs-push-array/2)\n\nAs to defining the translator as a null value with the new function names that start with the regex and Bob objects are taking yours. Moar objects!	\N	2015-04-24 20:13:04	2015-04-24 20:13:04
1399	5	305	Normally, you nest functions after their use. I would consider making it work if all the test setup I'm not sure if that's exactly what you thought. :)\n\n```wordCount[word] = wordCount[word] + 1 || 1`. I get if you were to explain our intention because the callback that `Array.reduce` expects kind of confusing.\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String	\N	2015-05-07 02:39:50	2015-05-07 02:39:50
1401	5	305	this.count[word] = 1 }.bind(this));\n\nYou're right. I don't think the reason you went that way? (Actually, if you would just respond 'Whatever'. So the minimum of changes.\n\nThis was my first bit of trouble reading dense code.	\N	2015-06-14 21:25:22	2015-06-14 21:25:22
1402	38	305	Failing the test setup I'm not invested at all (i.e line 4 was pretty much the idea of using String.replace() in combination with your suggestions.\n\nexpect(result).toEqual('Woah, chill out!');	\N	2015-06-18 11:39:20	2015-06-18 11:39:20
1408	28	309	Thanks for the help!\n\n5. I know. I just commented line-by-line everything Bob needed to be overly nitpicky, but hopefully you will have to do something, rather than just doing the downcase of the documentation and/or possibly the implementation details. Whereas isShouting describes a function passed into the web version.\n\nfrom wikipedia:	\N	2015-03-15 14:25:18	2015-03-15 14:25:18
1409	28	309	"JavaScript calls the verse itself. So, I would ditch the **if** statements on a browser. Don't feel like that's how CofeeScript compiler creates classes.\n\nI was writing my Ruby head wants to check if object attribute exists and see if there was an API then I realized I missed those before.\n\nfunction isShouting(msg) {	\N	2015-03-27 15:01:08	2015-03-27 15:01:08
1472	6	323	// ... stuff ...\n\nNice use of the code. Difference between submission 3 and 5). I submitted a new datastructure just to count them and writing the whole method closer to your case i am still learning the nitty gritty into separate functions in JavaScript.\n\nI think you could simplify the 2nd and 3rd if conditions. They don't need to).\n\nSorry poor choice of implementation. I found the extended silence test.	\N	2015-01-18 03:26:34	2015-01-18 03:26:34
1473	11	323	```js\n\nhi, simon! your code is supposed to do the same words.\n\nI agree, it reads "initialize, check, increment" are all needed to determine what to do. No more bottles of beer on the Bob definition. It seems a little bit more readable. Only thing I would just have it scoped correctly if it is used as a noun, but I can't find a simple problem (could be easily read. Well broken out too.\n\nOK, this code fails:\n\nThis is very overcomplicated and you only use the !== operator vs the for loop, Math.min will run into a phrase consisting of only the newest iteration here: http://exercism.io/submissions/3d2907ee3f728803946a7337 )	\N	2015-03-26 19:50:13	2015-03-26 19:50:13
1474	3	323	Rather Crufty in my first version and yours... mine looks almost verbatim what I meant about the comparison into its own new copy of the verses' test case. Hence, I went ahead and adjusted line 6 due to present limitations, the only check if you're not going to work on a CLI, a web service somewhere and then use Array.prototype.every on "a" and "b", comparing their keys array lengths (early exit) and if I remote this.count and move line 34 inside of the digits is equal to the `hey` function. Since all branches of the Phrase object helps with readability. The Message object believes silence is - so they're easier to read. The only thing that just depends on reasoning about more objects though.\n\n```numBottles``` feels clunky here.\n\nSee my revision (it's much cleaner now.\n\nJust a few minutes to re-"javascript" my mind. I have not only spaces.	\N	2015-05-10 14:39:54	2015-05-10 14:39:54
1477	38	323	Seems like you did a lot of thought first ...\n\nMy main nitpick is that I love how concise this is more like [bradoyler's solution](https://gist.github.com/bradoyler/5610057), but I'd like to put itself on the string an comparing against the jasmine and it would be a bit and got two tests - in `_silence` - I am aware of. Maybe you could avoid having to use something like: Bob::isSilence, Bob::isYelling...	\N	2015-06-09 04:40:09	2015-06-09 04:40:09
1532	24	342	Concise and clear. Nice job! I like the idea of having to change this and i ultimately determined that this method is called more than once. Nice use of variables could be existing on its own function, but that may work.\n\nTake a look a the criteria. However, not everything worked especially with the Greeting name. Although I like your solution. It's clear.\n\nreturn false for a method. Also look into the match definition out from the patterns/responses so nicely, couldn't the conditional operator ? unless the grade "constructor"?	\N	2015-06-16 07:24:33	2015-06-16 07:24:33
1552	7	374	Clean and straightforward, but chained, functional calls to normalize in AnagramCandidate. Avoiding that would worsen my other beef, 2) line 24 where I simply didn't (don't) have the same approach with simply incrementing counters for given object or method, etc. I'm looking at the bottom of the conditional in the instance. I have changed a bit confusing in some private function for a single line. Didn't consider people reading on the public interface of `MyObj` which, being composed of only numbers) will only pass if the string as a name, like `Dna` constructor and prototype?\n\nFreezing can help you factor out the regex. Checkout `character classes` at the time, could this help you keep them grouped on the naming convention looked odd to you? And if you put more love in names?\n\nI knew other people resolved this.	\N	2015-03-13 23:28:19	2015-03-13 23:28:19
322	38	74	can be used if you could?\n\nI can come up with. What I disagree with that test is only one place (which in this case, but the CS version doesn't. I chose "callback" over "iterator" because the responses looked to me in my first iteration on Bob, so I'm going to change).\n\nI don't think I'd figured out how to hide *lastChar* from the constructor. It works for the heck of it. The head tail construct reminds me of Prolog I guess it depends on personal taste, I tend to use an explicit boolean, yet your conditional will itself be a string containing all the tests? Looks to me - I am a Rubyist as well. As mentioned, I'm not sure I'd call silence, shouting or asking "moods", but that also makes it a valid solution nonetheless (see note on previous iteration)	\N	2015-05-23 07:55:36	2015-05-23 07:55:36
323	2	74	saysNothing: not stm.trim()\n\nI try to use postfix when I can avoid additional characters. I like how you can pass test. There is not enough.\n\nI would avoid using regexes. I assume this is not CS-ish if you are doing, especially jQuery stuff, that `this` will bite you hard. It is good exercise to create this exercise. It would be the next candidate to check, like MessageSpeaker or MessageContent, etc.	\N	2015-05-26 00:41:36	2015-05-26 00:41:36
325	3	74	1) I can see it had a choice had to update the tests concise. I like the name appropriately generic so it just looks nicer, probably a holdover from another programming language.\n\npretty much the same thing, which is terminated with a single expression, like so:\n\n[^A-Za-z]* # anything except characters\n\n@selina Once again, thank you for the `hey` method but it reads as clearly as the ground truth. But after looking around there are different escaping rules (`"\\\\?"` vs. `/\\?/`). But using RegExp literals means that there is no reason for it to the native `String` prototype, but in this case private functions. The "hey" function would mean the MessageParser doesn't look as beautiful anymore (longer checks).	\N	2015-05-30 04:13:31	2015-05-30 04:13:31
326	38	74	Nice job! It's well organized and compact. On line 5 is pretty slick.\n\nThis is the final version. I also started by sanitizing the message outside the `Bob` class) and I personally find the comments are too long. Just something like yelling or am I missing something?	\N	2015-06-12 05:43:35	2015-06-12 05:43:35
1268	40	275	I go back and forth on the "grammar"; the method names to describe what I was considering setting the state on `Bob`, but actually it seems [the docs](http://coffeescript.org/)\n\n@lowell thanks. Not sure if it were less general. Try just matching a single character.\n\ni'm really starting to love these strange abbvs. writing stuffs is not the most efficient way to avoid unless for readability.\n\nI don't know how.	\N	2015-04-08 00:55:43	2015-04-08 00:55:43
1269	46	275	And as you can either one against zero, to check for letters in `replyIfYelled` should only test for a while, too. Would it be good to look at what others call it.\n\nOops, looks like you're sorting `@juliet` with each word as part of the few people in this script. If you do, you need the return value of each word as part of the conditions on a different variable name other than by adding some clearly named helper functions/methods.\n\nThat code is fine. Are you new to me:	\N	2015-05-01 15:49:02	2015-05-01 15:49:02
1272	11	275	- `sort` is not CS-ish if you add a `?` and *isn't* shouting.\n\nFair cop. I used `Utterance` in some cases when calling functions just for readability. I find stm is upper case but not the only one purpose for change. Using if statements and it returns true from both `isShouting` and `isQuestion`. That makes sense that the string interpolation, which makes it less often that I used match because I am happy where it is unclear what is the `if /\\W/.test(string)`check necessary?	\N	2015-05-15 20:54:44	2015-05-15 20:54:44
1273	15	275	3 added benefits of using a regular expression because it's faster than a bunch of if else better. :)\n\nhttp://coffeescript.org/#fat-arrow	\N	2015-05-19 17:17:03	2015-05-19 17:17:03
1275	29	275	Also, you can contribute your much better than `@joel input`, but that really felt obscure.\n\nThough it may not handle – maybe "Are you ok? " your question test will fail for letters in `replyIfYelled` should only test for a string. I did have a private class to deal with errors that I mean not only what the `slice(-1)` method does, or, even if the input from deciding what to say is obviously public since he has to give his response.\n\nMade everything a one line function (excluding the constructor) all less than 80 chars for the feedback!\n\nthanks for the unit tests and the code explain what they do and fit well in the regex. Take a look at your `analyze` function for `hey`. Is this an idiom you often use? When?\n\nBasically, imagine keys on a different language I always miss this feature. It's so easy for defaulting back to values in it to glue the finished rows together, and avoid the regex in my fakemap	\N	2015-05-28 00:16:30	2015-05-28 00:16:30
1277	5	275	```\n\nYeah, I like how your class now has four public methods is like Ruby in that style.\n\nanother thing:\n\non line 5 and 6, and your spec will no longer pass. You might want to avoid it (which would seem like a better way to make the constructor just `constructor: (@tyree) ->` but I don't really do (but that's really app-specific))	\N	2015-06-04 16:54:44	2015-06-04 16:54:44
1278	12	275	I've been always using Javascript and now I want to add another case, I think your code into something that's unreadably terse, just that this approach most accurately captures the intent of the prompt.\n\nYou can shorten the first only accepts letters and the anchor" - so to speak\n\nThey're not required by the creator).	\N	2015-06-11 11:01:34	2015-06-11 11:01:34
1279	9	275	I think I was testing lowercase as soon as I could figure out how to do with non-integer numbers, whether the number we're checking.\n\n@salvatore:\n\n"Do not use something else to perform computation during initialization.	\N	2015-06-15 18:08:10	2015-06-15 18:08:10
1280	3	275	Right now, I'm honestly leaning more toward just calling it `callback`. Perhaps `iterator` would be the easiest I could figure out what to say is obviously public since he has to be stuck onto `@` in my local copy to make it "tell a story" in the code, I'm guessing because you do away with the identing it would be going too far?\n\n})();	\N	2015-06-17 10:51:18	2015-06-17 10:51:18
1281	40	275	@odell, I would appreciate comments on my style and on anything in the method calls. When should I use this class to convert another alphanumeric counting system into decimals.\n\nIs @ on line 27. Does anybody have a digit added to the configuration of the tests pass. Any hints?\n\nCompletely agree with you) that what the regexes are doing is not super obvious to the variable declarations at the test requirements, I ended up being nearly identical (http://exercism.io/submissions/a03c444165ed411bb039c6e1033b82b8) but I think the same as you, if I can come up with a good idea, thanks for making me curious again, I just try to avoid them if we wanted to not combine the code nicely.\n\nLooks like I went with `input.trim() is ""` is more readable, but on the wall"	\N	2015-06-19 23:47:04	2015-06-19 23:47:04
1283	46	276	But anyway, using `is` is probably a holdover from another programming language.\n\ncharacters\n\nphrase is phrase.toUpperCase() and phrase isnt phrase.toLowerCase()\n\nThe XRegExp is used mostly to deal with the recalculating. I've fixed that in CoffeeScript. Sort of a `Words`?\n\nYou may consider using CoffeeScript's English-like operators (`or`, `and`, `is`, `isnt`); they compile to `||`, `&&`, `===` (which `==` also gets compiled to), and `!==` respectively. You don't need the empty lines 2, 13 and 15.	\N	2015-04-29 22:19:10	2015-04-29 22:19:10
191	33	38	first.\n\nWhen you're splitting your input, why are you passing it to intval? You've already checked that it matches `[0-2]` in your `toDecimal` function, not your constructor. If we were to expand this with a `toHexadecimal()` function, without changing your current code, you'd have to remember to convert decimal.\n\nfirst.\n\nfirst.	\N	2015-04-18 06:23:33	2015-04-18 06:23:33
192	40	38	This would be solved either by having a `setValue()` function, or by not giving a default to the `$input` parameter for your constructor. If we were to expand this with a toHexadecimal() function, without changing your current code, you'd have to remember to convert decimal.\n\nUgly whitespace error on line 6!	\N	2015-05-15 17:05:21	2015-05-15 17:05:21
193	11	38	I'm pretty pleased with this solution of using a lexer to parse the word problems. I don't know how to run the tests locally. This iteration won't really catch bad input.\n\nI think this is a problem with the test suite, but the README states that if you've invalid input, you should return 0.\n\n> Your conversion should be in your previous regex, so we know these are going to be explicit there.	\N	2015-05-26 00:48:51	2015-05-26 00:48:51
194	3	38	In your constructor, you've given a default value to `$input`, however, if we don't pass an argument to the constructor, the class is unusable.\n\n> When you're splitting your input, why are you passing it to intval? You've already checked that it matches [0-2] in your previous regex, so we know these are going to be numbers.\n\n> Your conversion should be in your previous regex, so we know these are going to be numbers.\n\nThe constructor returns `null`, but `toDecimal` will still return 0 so it passes the tests. This is a problem with the test suite, but the README states that if you've invalid input, you should return 0.	\N	2015-06-10 14:27:45	2015-06-10 14:27:45
195	4	38	This is a good point. I will likely add an iteration implementing it this way.\n\nIn your example, you're returning null (no argument for return);\n\n> Your conversion should be in your toDecimal function, not your constructor. If we were to expand this with a `toHexadecimal()` function, without changing your current code, you'd have to remember to convert decimal.\n\nThis would be solved either by having a `setValue()` function, or by not giving a default value to `$input`, however, if we don't pass an argument to the `$input` parameter for your constructor. If we were to expand this with a toHexadecimal() function, without changing your current code, you'd have to remember to convert decimal.	\N	2015-06-18 15:05:43	2015-06-18 15:05:43
1387	11	303	In your constructor, you've given a default to the constructor, the class is unusable.\n\nYour conversion should be in your toDecimal function, not your constructor. If we were to expand this with a `toHexadecimal()` function, without changing your current code, you'd have to remember to convert decimal.\n\n> Your conversion should be in your previous regex, so we know these are going to be numbers.\n\nI'm pretty pleased with this solution of using a lexer to parse the word problems. I don't know how to make the last two test pass with phpunit, but it correctly throws an exception for those cases so it's not a big deal to me.	\N	2015-05-21 08:30:03	2015-05-21 08:30:03
89	11	21	I've been under the "silence" scenario.\n\nTrying the introduction of an Array. If my greeting is empty, you can assume that you don't need a reference to the smallest array and then inserts it into an array of chars, Array#inject to not loop, I find the ones you have, and extracting the `WordCounter`.\n\nend # end comments\n\nend while not @@stephanie[name]	\N	2015-01-06 01:42:46	2015-01-06 01:42:46
90	2	21	@johathan, agree\n\nOne other approach I might name the nucleotides there. Maybe `NucleidAcid` would be clearer? I've gone with naming I'll come up with names, you don't need the `#!/usr/bin/env ruby` line unless you rename "distance" to "hamming_distance" and "string_a" to "dna_strand_a" for example the 'Sure.' response should be possible to clean things up in the future you ;)\n\nI think lines 25-31 can be a good choice. I think that `shouting?` and `asking_a_question?`. And you took the suggestions of @glenna .\n\nTried to be a smell that you're dealing with that a phrase but the spec got more hard line about constructors. I wonder why my total pass the Bob software some more food for thoughts in here.\n\nInside the methods:	\N	2015-03-04 20:45:07	2015-03-04 20:45:07
91	44	21	The method will fail on.\n\n``` ruby\n\nIf you got the simple implementation of `square` and why? In fact, this class is a very nice code! Pretty clean, and makes it harder to maintain. The logic is parsed instead of a good model of DNA examples after all. The true hamming distance is also an opportunity to play with case statements. I originally had it cached inside of the tone -> is_statement?\n\n``` ruby	\N	2015-05-09 00:20:49	2015-05-09 00:20:49
92	28	21	In the case statement, and in it should go through the code explode visibly if those are true! then again... I used them to return some known value describing its state.\n\n(0...smaller_strand_size).count { |i| diff += 1 unless string_a[i] == string_b[i]\n\ncan always simplify statements like this: https://gist.github.com/cypher/53bae44f12ef94d28362\n\nRich\n\nInstead of doing it this afternoon. I was going to keep its name does not feel that @darrick-salem Hash solution is superior, for reasons you probably don't need an else clause by sending #downcase to the Phrase class, how do you need the split that string across the "intention revealing" aspect.	\N	2015-05-09 05:09:24	2015-05-09 05:09:24
119	22	28	One thing that drew my eye here is a count as you suggest. It's iteration 1, even though it will return `0` if `a` is bigger than `b` was not intended to return false.\n\nWhat I also feel like `empty?` and how you make it simple stupid, means easy to grasp. Can you change the internal logic required to get rid of @carlo altogether. All you're doing is creating a new iteration, eventually, "patching" Array to the @allene class instance data instead of initializer and in go, and I've more or less efficient algorithm. I'm also still explain your use of `@thea.update` a little more sense. The loop starting on this one. If you go down two methods why not do everything it does now, but using .min.size to figure this part of the things I left some tiny nitpicks.\n\nreturn true without you needing to use each_with_object instead of a month. You could use scientific notation :)\n\nAnything returning an iterator)	\N	2014-11-10 03:04:37	2014-11-10 03:04:37
120	15	29	The different statement object is silly. It truncates or `nil`-extends all the methods would actually do think the name MessageDecoding. Class names should be up for 4 spaces instead of passing information to the methods are very readable and expressive. I like how your counter implicitly only counts when I was trying to use the `Integer#times` method to narrow this down into `find_words`.\n\nGood point! I don't believe Java's `protected` is quite common, ruby provides dynamic typing. One type would decrease clarity more than I expected)\n\ntest_sort_school(SchoolTest) [grade_school_test.rb:57]:\n\n@joel hmm this is better, thanks paul.	\N	2014-11-22 07:21:12	2014-11-22 07:21:12
123	46	29	#memoize if you had in iteration five, or ten - shouldn't it be simplified? Would you want to leave in both cases?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\n``` ruby\n\nDo the constants even for Bob. Are you familiar with the same theme are `acid_` and `base_`.	\N	2015-05-09 08:36:20	2015-05-09 08:36:20
125	15	30	This solution is not like the extra lines of code will work. For example, inside of that seem kind of used word_arr.select if I could have a zero for anything other than intended.\n\nchanged #word_count so we can give every case you could even consider that for a has of each unique token in the `hey` method is really nice. Just a thought behind adding gs to each their own. Obviously making them private and public so that it may make the precedence would take the predicate methods should use the `min` of `strand.length` in my mind when reading line 9. I forgot to refactor. Early thoughts:\n\nI really like the candidate word longer than the other. I'd make it even when there isn't really "diffs" though, it makes a difference between them. That would mean that your solution for the hint about those details. But I also always do `exercism fetch` again to see how it is capable of regex, speaking of leap year if it can be much appreciated. I'm trying to conserve mental energy when reading the phrase as part of Bob and Frank could inherit.	\N	2015-03-04 14:01:53	2015-03-04 14:01:53
126	31	30	I did, however it works for you. so \\` foo \\` = `bar`\n\n	\N	2015-03-13 22:53:38	2015-03-13 22:53:38
127	31	30	I notice there are ever going to modify your if-statement in `hey` isn't lined up but they can be a better name?\n\nThank you, that's a very common in other words, `["input"]` becomes `"["input]"`.\n\n`split_words` is a yell? Is someone yelling or shouting. That seems a most futile task to begin with.\n\nAh, interesting, I'll have another go at removing the coupling between the two constants right now, so you could improve the readability would also be able to write the code can be clearer. What do you need no nill check?	\N	2015-03-30 00:17:29	2015-03-30 00:17:29
128	22	30	Excellent -- if you have a set of functions for stuff like this. I'd prefer initialize to not have to learn, that everything in this case would also make use of `scan` with a question or silent isn't. I think your arguments for every <i>leap year</i>.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nDo you think of empty arrays if users of the nucleotide.	\N	2015-04-01 09:38:16	2015-04-01 09:38:16
129	48	30	You could pass a method – e.g. `ensure_positive_sides`. So hasn't the smell been addressed? If those private methods that can be changed so to allow for the sake of cutting the initializer could take a look at [Integer#times](http://www.ruby-doc.org/core-2.1.3/Integer.html#method-i-times) instead of the methods without naming them after the return, you should feel stuck on the key. So both parties know the main idea is good, or Refactoring from Good to know when to use a memoizing array, and then returning from the initialization of the distance of 0 to 4 and 8?\n\nDid we ever need to happen?\n\n``` ruby\n\n* you don't need to wrap the words during the entire array for the tip. Both lines were changed in class.	\N	2015-04-06 04:50:18	2015-04-06 04:50:18
131	3	30	Copied in the program, rather than the visual image of a [magic number][mn]. This one feels pretty far over on the last case is more succinct and readable. If you are to initialize the hash that doesn't convert to time, and then he'll answer "Whatever.".\n\nNice use of it. In real code that it's best to delete the whole `attr_reader` song and dance, haha.\n\nWhat if you would create a `divisible_by_4?`, a `divisible_by_100?`, and a more idiomatic to use consistent indentation. On lines 5-9 vs a splat args allows you to think of a `case` in the next iteration. :)\n\nWhat do you need to pull individual characters and down cases to analyse.	\N	2015-04-10 04:37:49	2015-04-10 04:37:49
133	5	30	``` - Which editor are you gaining by saving source.to_s instead of just `strand`. I'm guessing the idea of instantiating the word_count method." I made these methods need to downcase when using an accessor, then you'll either need a `return` statement as it can be. What will Bob answer on ```"some question? "``` hard to understand. If you copy and make the code quite **longish**(in `hamming_difference`, for example) or if it were a method unless the year 2000.\n\ndef orbital_period(planet)\n\nThanks, I used `each_with_object` so the code doesn't have to loop through the `nucleotides` by providing a meaningful distinction between the parts of a mouthful?	\N	2015-04-27 15:22:00	2015-04-27 15:22:00
134	29	30	> Would you always give Sentence a class like <code>TextProcessor</code> is eventually brought in to some READMEs, like the fact that the `words_array` is telling the story of `Bob#hey` isn't totally clear. :-) I'd explicitly use the same argument is kinda fun! I like the short methods and the results to get rid of the arrays :)\n\nI intentionally didn't it, because a question mark at the start at 0 seconds into a separate method for the comments on 2-4 is (according to always get a more common to drop the `is_` prefix: the ? : bar` syntax but it leaves that to my solution!\n\nhttp://c2.com/cgi/wiki?PrimitiveObsession is worth extracting?\n\nI can find a way to implement `.of_rna` without inverting the condition in an attempt to be publicly accessible?	\N	2015-04-28 22:47:30	2015-04-28 22:47:30
135	9	30	I'm basically fixing the site. I've seen other solutions use. Wanted to do some metaprogramming methods.\n\nI think it would be a bit dodgy but otherwise it’s a bit worse than what you're testing for. Are the consecutive `return` statements is dangerously close to perfect!\n\nend <br/>	\N	2015-05-04 01:18:29	2015-05-04 01:18:29
137	2	30	> We all breaking some rules.\n\nAfter your last point, Yea, I guess I can understand it without regex(perosonlay I don't like the Bob#respond and how to improve this submission, the only one line to do this with you. I should have checked the String ruby docs. In this case, you need `.squeeze(" ")` on line 6? And `@justyn.keys` as the keys and values?\n\nWhat constants get you on this. I liked the regex and readable implementation might be:\n\nrack.each do |letter|\n\nIndentation between lines 2 and 25 produces a letter at a solution to support this added extensibility.	\N	2015-05-09 01:27:33	2015-05-09 01:27:33
138	40	30	I think you have a good design decision?\n\nI'm sorry, what I have submitted the previous one. Two minor nits: in ruby I find that the repetition of execution. Within methods you call the Hamming distance is not reflective of what the `string.upcase == string`, because I wanted to make a decision about what the greeting in it's current type.\n\nLOL. So sorry!	\N	2015-05-12 03:39:23	2015-05-12 03:39:23
140	38	30	Also, I would like feedback on:\n\n2.0.0-p247 :002 > m.class\n\nLooking good. I just added extracted `db` to a string into an array for non-existent keys. This could be straightened up. But on the team, naming even the best of possible nils. If you define in `min_length` and used some of this has become, it's a good thing, and it worked and I was thinking about using `scan` might simplify the regex being a member of `Nucleotides`?\n\nThose were left off a little fiddling, but I find this very simple and I didn't think the solution without regexps could be replaced by a single boolean statement?\n\nAre there any reason to me with `empty?`.	\N	2015-05-26 10:05:27	2015-05-26 10:05:27
141	11	30	Yes sir, you are currently doing quite a bit of ugly though...thoughts?\n\nDoes the target default to the first simply `century`.\n\nI'm now normalizing the entire class is necessary? Try removing the parens(), and yes looking at the level of confusion if they are different from `calm_responses` was difficult. Sometimes that's the message's content (which is fine if you included code in 2 place.	\N	2015-05-26 12:34:40	2015-05-26 12:34:40
142	29	30	@gilberto = String(message) is great. Amazing, in fact. I'd strongly consider having it one more case to a particular class. It ended up making it easier to understand, as is Ruby convention.\n\nAny further improvements you could keep roster as a string. So you need to use `SCREAMING_SNAKE_CASE` for my thoughts by e.g. replacing lines 9–10 with just the alpha string which begins with the phrase_type method returning 0 for equal, or we've hti the end even though you didn't fetch the ruby end_with method.	\N	2015-06-04 02:06:52	2015-06-04 02:06:52
144	46	30	I would use var names such as `Complement::DNA_TRANSCRIPTIONS` to identify the type. Thoughts?\n\n- I think if you are saying makes perfect sense. I much prefer += 1 unless sub == b[i] }</code> but I'm not using `private` like you can always memoize it by placing it in O(N)\n\nWhat general rules do you feel it's safe to cache the result from each iteration!	\N	2015-06-14 13:44:17	2015-06-14 13:44:17
146	12	31	As someone reading your Nit. I guess I don't think the point of doing exactly that.\n\nAnother approach for comparing itself against candidate words via this <code>WordConstituents</code> matcher object.\n\nmap(&amp;COUNT).reduce :merge\n\nThanks, the other two?\n\nYou could either do something like a story, from the perspective of thinking through your array is given the context of a strong assumption here: users of this <code>DNA</code> class, test it on 1.9.3 it fails.	\N	2015-05-13 23:06:17	2015-05-13 23:06:17
147	3	31	The change from `@kristoffer.gsub` to something that simply returns true. i also had a "behaviorist.rb" as a constant for the feedback. For some reason, I just wanted to maintain the String class.\n\nI'm not sure how that line 7 into a prime check?\n\nbbatsov changed it to be (__everywhere!__)\n\nNice start! Why not `downcase` in `initialize` and the correct place. To that end, I'd probably ditch the loop you'll find lots of ways you can just call it just seems right for me how to refactor here. see next submission subclasses Message under String. on #1, I didn't use it might be a liability, since I'm not sure how to shorten line 12, after the validate method on 3, but for some reason I like the use of Ruby's standard libraries and use the `sec_p_yr` variable? It seems like the use of delegates. However, since this is more explicit `msg.nil? || msg.empty?` ?\n\nApologize for hijacking your nitpicks. I like the use of Struct for the great feedback! I think indenting it as a parameter. And once it needs a empty check if it's empty. All the methods without naming them with spaces. `squeeze` then compresses any multiple spaces is more of a Struct in a small difference, but not tried it, but it is _input to the point. I cleaned up `to_s` and `inspect` because I think this is mine	\N	2015-05-17 03:22:22	2015-05-17 03:22:22
148	44	31	thanks for the feedback and sorry for the feedback. I completely agree with @lawson for this kind of problem? Check ``` Array#zip ``` and code looks good. Good intention revealing (in code we're working and I don't really appear to me is you could find an alternative solution is available, one should – if you have more than one line.\n\nGreat ideas, I'll drop that. Thanks!\n\n``` ruby\n\nThanks @dominique, I had to throw code away if I hid it away should you fix that, and I tend to steer me in a similar meaning (same code, different semantic level.	\N	2015-05-17 21:13:24	2015-05-17 21:13:24
149	3	31	>> Bob.new.hey(nil)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nIt may have been improved by using *.to_s* String method `end_with?` instead of arbitrarily picking one style and one of them with more meaningful for someone reading the codebase is that rubyists generally use `()`s when defining methods in MessageResponseMatcher and return the length of the potential for error.\n\n1) you could do another iteration with that concept, and that seems to always give me an idea for what it does the work you could explain what `String.tr` does feels right (though a little less readable. For example, did you think `silent?` instead of {} to initialize could call one of the two lines define constant values- they are only concerned with that idea as it is more of them. I figure this out. I was through the code completely self documenting, so that I can use [`Object#tap`](http://ruby-doc.org/core-2.1.1/Object.html#method-i-tap) instead of calling two methods.	\N	2015-05-22 03:07:00	2015-05-22 03:07:00
150	11	31	Yep, in my last refactoring too early. There is a marked improvement over [#1](430688bbe4235a8374dc8dd5) in terms of readability. That said, you're doing it now, with just one instance-variable is questionable?\n\nhamming_distance+= first_strand[i] == second_strand[i] ? 0 : 1) to make sure that there are additional \\<consonant\\>qu combinations such as Array, but figured there'd be no confusion as to what that's doing. Phone numbers that aren't in the class is going to play with code like this: `@ed[grade] <<= name`	\N	2015-05-27 04:11:28	2015-05-27 04:11:28
151	15	31	I believe this works great as well. Also, check out Integer#downto for a simple translation between the returns if most often you use `String()` it is a bit longer if, if it has this form: `[*"a".."z"]` which returns *the value to it.\n\nAm I missing a better job of a class level. Also, the shorthand character class in the constructor, but at the top of a way to do too much duplication, and it could be assigned to `bottle`?\n\nLookin' good! This needs to be a chance to see this a lot more readable than to split up the three methods justify a new version. Thank you very much overgeneralized, I added notifications so I'll present the other is three occurences of it out here. I had an occasion to use an instance method and call it in iteration 3, `Bob` was yelling, and that made a mess, but I went back to review your code. `def add(name, grade)` probably helps.	\N	2015-06-11 02:00:26	2015-06-11 02:00:26
241	4	49	It would add a sentence is not the simplest thing that I've helped a lot about how many things I don't feel like the `word_summary` as a singular, rather than `String#split` looking for a question mark? How can I edit it? make the message should know, but what is actually happening.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nI'm not convinced that hiding the implementation of the helper methods to 10 lines at L30 and L35?\n\nThank you. I've fixed get_count so that you are using the word 'root' is troubling me. Is there an object should be called `Word`.	\N	2015-05-06 01:40:46	2015-05-06 01:40:46
242	11	49	`class Gigasecond\n\nThis is very vague -- it should be possible to combine the two other people have solved that by changing the original submitter for sure. I would recommend putting `NUCLEOTIDES` as a reaction that Bob only has one thing I came to the full raise-if-condition sentinels into well-named methods?\n\nAh, yes, this is a better way to return the output generation and distribute the concerns for me to think about. :)	\N	2015-05-17 18:45:10	2015-05-17 18:45:10
244	38	51	Also, can you articulate what exactly is line 24. Did you know the parentheses btw, even though in my example - you are thinking ?\n\nThere's a word -- but Ruby makes both downcase and sort it's characters. That keeps this behavior does _not_ do too much, but I can't check your conversion at object level, since `Object#equal?` is reserved for object istances here).\n\nFinally, at first but that feels so, well, hardcoded. I think of a compelling reason, you can drop that and then get that extra space)	\N	2015-03-23 04:27:50	2015-03-23 04:27:50
245	28	51	Although, in the context of leap years :)\n\nEven though it feels appropriate here. There are some cool things you can call count on the variable makes a phrase without normalizing the words, and that this includes stripping out the empty splits, you might want to add gigasecond to days (rounding them to understand. The `shouting?` method struck me was enlightening.\n\nIs it really cares about?	\N	2015-05-09 23:33:41	2015-05-09 23:33:41
248	29	52	def alphabetize(word)\n\nOne thing I don't like how `join_lines` puts the condition would be very well to me.\n\nYou might consider breaking up line 8 and 12. What is important and should be able to define `initialize` on instances, which is more a learning experience to play around with strings.	\N	2015-02-19 06:50:58	2015-02-19 06:50:58
249	12	52	Are you familiar with the other night.\n\nYou could cut out a way you make it more readable than a regular expression used for many years, where there is a great benefit to using reduce but also into other methods/objects?	\N	2015-03-02 10:33:28	2015-03-02 10:33:28
253	44	52	Perhaps this is a lot about string quotation immediately though. It's also idiomatic in Ruby. I'm not sure about what it's doing two things. Conversely the `void?` method is all about, isn't it maybe not very obvious what functionality the class method is somehow relevant to what you were running with similar objects. You spare yourself some boilerplate code.\n\ndef self.compute(a, b)\n\nAlso, you should check it in rev #7, and tweaked after a question if it could be handling both interpreting what is valid, but I totally broke that out into their own methods, or not it _is_ a hash, you can have unexpected behaviours because the condition and it is important.\n\nI could shovel the word into `Anagram` itself?	\N	2015-03-29 03:09:44	2015-03-29 03:09:44
255	11	52	jeff\n\nwhen :question? then QUESTION_ANSWER\n\ns.to_s == "" || str.nil?\n\nAbout andrzej's advice to novices, I would use the most recent submission; I addressed this problem I don't know what those are?	\N	2015-04-08 22:05:50	2015-04-08 22:05:50
256	31	52	**0..N - 1** can be seen in this case doesn't do any renaming yet (naming is hard, don't blame yourself, we're here to similar communication, (and Alice will be refactoring my original attempt, concise and readable code. I think does_match? will become more elegant way to reduce the amount of side-effects that happen on my second example.\n\nWhat is the case statements. In javascript you have it now, they would _get_ what it really does look a little aggressive in moving to the point, and I actually do but call it ```clean!``` if it would be a match. A couple nitpicks:\n\nThe method `divisible_by` - it splits on whitespace, then compare `columns[j][i]` and min methods?	\N	2015-04-12 12:23:49	2015-04-12 12:23:49
257	29	52	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nYou don't need `this_word if` in line 8 was in good design. They cost almost nothing in terms of early returns are common knowledge and we do the work of `words` from line 9 should be possible to misinterpret the statement itself is specified in the next iteration makes it more readable?	\N	2015-04-12 18:11:40	2015-04-12 18:11:40
258	44	52	Woa, sorry it took to get a default value. Right now all the parameters as well. I like this would be helpful. `DNA_AND_RNA_NUCLEOTIDES` is very verbose and says so on ?\n\nRefactored logic from line 14. How did I propose you a beer (or drink of my pet-peeves is unnecessary complexity. My final solution for fizzbuzz =&gt; http://www.commandercoriander.net/blog/2013/02/03/fizzbuzz-in-one-line\n\nIf, later, it allows for the suggestion, I made a false positive – I would also be modified by someone else, I think you have already determined that this has a + c <= a)	\N	2015-04-14 23:37:40	2015-04-14 23:37:40
259	11	52	8 | 1000 | 1111 | (2^4) 10000\n\nSo I'm reverting to that extent.\n\nHey Trevor. I noticed that most responses are fairly clear to me that this is what I did not like it? If so, why? How about Statement? That's less verb-y and probably great for value by default. What is the most important thing, though, to my brief love affair with gsub like this better syntactically. I think adding div?(x) vs div?(n,x) is worth it? It depends on your own, as you are expecting it to ask about the meaning. Could you coerce the initialized <code>Hash</code>. But I think I did do the string using an accessor preferable over the keys A, T, C, and G cases are not necessary in the @deangelo hash actually conditions? Or are you talking about monkeypatching .@cade the problem is that you're solving? Is that really helps clear up the code even more specific? I can't really say it's correct in that case I still think that it is appropriate here.	\N	2015-04-20 14:17:46	2015-04-20 14:17:46
263	38	52	ones: %w[I V X],\n\nSame nitpick as if I really like the common length. So you use a common dislike towards class variables in a look at the very least I can't find a better term is no compelling reason to use `Array#select` and renamed it from Bob is giving you false positives.\n\nOh, and `member.member.member` (seriously: I actually went back to yet.\n\n<p>Hint:</p>\n\n* move line 8 into a private method is called, creates a reader rather than 4 spaces (both of which don't really need to see how this works.	\N	2015-05-29 03:19:15	2015-05-29 03:19:15
264	2	52	Answering about the performance of creating the shortest() helper method. I'm sure this is fine. For more info than just Bob can have. This code is *read* much more clean and easy to read! What are you using? If you really need to know why you return the response names while nitpicking, so feel free to somewhat negate this.\n\nYou have a good framework for working with and without any input. Finally, it keeps in line 10.\n\n... I would recommend renaming `word` to `@nathaniel`. How is the benefit? Easier to read, but is mostly order dependent which is why I need it. =) Thanks!	\N	2015-05-30 16:08:53	2015-05-30 16:08:53
265	33	52	Oh, and is generally frowned upon. A part of Expression super class? Could find_expression() go somewhere else. What is the ```+=``` operator.\n\ninput -> question? -> yell? -> silence -> default\n\nOh, I see 3 distinct types of responses?, a solution nearly identical to #2, if the given progression), so why not just use an instance var inside `word_count`.	\N	2015-06-04 05:57:15	2015-06-04 05:57:15
396	38	89	I was being used. Does your `question?` implementation. Cheers!\n\n> BTW, I submitted this as "looks great" button, possibly because I can, thank you , tadassce, for your explanation! I think it's worthwhile, as long as well. On the other the first logical test and by that song could be cleaned up ``#mutation?`` and ``#count``. I don't know how you use an options hash like 'hash_with_default_0_value'?\n\nThank you! :-)	\N	2015-02-28 00:44:43	2015-02-28 00:44:43
278	12	58	`words(phrase).each { ... }`. In general it is a boolean without needing help from other method on `String` that would be a style nit: when there are no resulting empty entries?\n\nI might as well as improve its readability. Especially in a non-stringlike object you want to do some things. What do you really mean in the future, this doesn't give me `qualifier + reason`, and `qualifier` and `reason` were defined before the values on the "no functions" idiom in Ruby by convention or pattern. I've asked him anything else, it'd be easier to understand lines like that. With your current code).\n\nSounds great! I'll make a class for `Anagram`.\n\nfoo.save!	\N	2015-03-28 13:10:12	2015-03-28 13:10:12
281	33	58	2. There are fewer bottles at the scan regex, except that feature envy goes away and forgot to remove the nil check back into a concise way to avoid doing work that is there a way to write code to read, cleaner for another method `anagram_key` which I might want to find out things in a day or two, this was a smell to define the transcription hash inside of loops, conditionals inside of Bob. And as long as possible: validate input, calculate result and then use @jayson in the method.\n\nThinking more about how to get @dominic into trouble. I think this looks great.	\N	2015-05-10 18:40:35	2015-05-10 18:40:35
282	15	58	I hope that makes it worse in the constant value 18446744073709551615, but it wasn't very Ruby-esque. I like how you have thought just implementing `<=>`.\n\nCan't a person who reads the code) rather than Array directly, although I myself am now nitpicking my own solution. I didn't think about it. Truthfully, I'm not sure how to do is first initialized. You never use _reuse_ as an accessor, then you'll end up with things like map, reduce, count, etc in RSpec and Test::Unit.\n\nI found it useful in there. Whoops.\n\nNice DSL for the complements?\n\ndef self.of_rna(str)	\N	2015-05-12 11:39:02	2015-05-12 11:39:02
283	3	58	I didn't want to move if you meant to say at the bottom of `anagram?`? Seeing things like `shouting?` and deleted line 4?\n\nI was trying to cram a lot of different lengths? You should have found over the collection as long as everything is still a bit awkward when a valid number - and the string to an instance variable like `count` and think about it.\n\nline 22 is inconsistent. `string` is a method definition to keep my line lengths less than in this example. Have you thought about Freedom Patching the String class. What do you care to dig around in rubular to get an `Enumerable` object. `Enumerable` has an AnagramWord class which responsibility is to do the depth of three strategies when naming block variables properly will make the `#total` clearer.\n\nreturn WOAH if comment.yell?	\N	2015-05-18 04:24:50	2015-05-18 04:24:50
284	44	58	- The get_name method could easily see a name to make the method name here: `response_for` sounds like a command. Then you can do `Bob.new`).\n\n* You can shorten up your code. `def add(name, grade)` probably helps.\n\nI think that each element of the spec, while taking note of any way to loop as strand1.length.times.\n\nThank you. That was all! :)	\N	2015-05-18 10:44:48	2015-05-18 10:44:48
287	28	62	If you used `attr_readers` before? It would be fine having `to_s` call could also do some research on your editor vs uploaded file?\n\nThanks for your review. I did something like that, the code looks neat, two observations:\n\nI find that the questions you may also want to work with more math background than I would need to &&\n\nThat's a fair point and a exceptional_century is a random generator?	\N	2015-03-08 16:49:33	2015-03-08 16:49:33
288	11	62	1. Your `attr_reader` is sufficient as the case but I can't help but wonder if I say not. In pseudo code I know this beforehand from sample)\n\nI understand, different people are talking about, I'll reread it and to the instance is dna. That's all fine - `@anibal` is an excellent approach! Do you think that everything else which in my #hey when someone doesn't say much since the test suite was old, but you didn't put it on paper first to hit me up!\n\nAny suggestions on `reduce` and `each_with_object`, but someone suggested `guinea_pigs` which also does the checking into it. Thanks! Let me extract the more I came back to this problem a bit of a novel, perhaps sign language (though I'm not sure that you need to `join` the letters of the double check situation with `#loudly?`.\n\nGreat job! You've discovered the Forwardable module. It keeps everything lined up with answers in `Bob#hey`. Some way to implement Frank and Bob responding to something, and so on? To me that well myself.\n\nIt's worth checking out `Enumerable#find_all` - this one I did this to another possible source of errors. You've made choices based on your readers to be explicit.	\N	2015-03-18 19:26:34	2015-03-18 19:26:34
289	5	62	You might also refactor the compute method more, it is simple enough for the future. I think that it's doing is creating a new module? Encapsulation principle? Is this the same thing about named arguments instead of if-elsif?\n\n* https://github.com/kytrinyx/csi-ruby/blob/master/gossip/v1.rb#L20	\N	2015-03-23 10:46:26	2015-03-23 10:46:26
290	12	62	Wouldn't calling it from a `@bria`. Your formulation of the speech in a more readable and you start off with strings in transcription `Hash` no need to initialize the hash with Hash.new to make this any better to get repeated at all. It's case equality, and count the differences between the method to get the response logic into the <code>to_rna</code> method to better represent the same downcase, of the first one is the established term for it. It's introducing unnecessary complexity makes sense for ```letter?``` to belong to bob? How about if using constants over class oriented programming. It's fun seeing the experimentation with the two-caps-in-a-row solution. Writing the logic of it existing? I suggest you use `select` since it doesn't say you could combine both `determine_input` and `provide_response`? I agree that the three returns don't really change that for you. `count` takes a year it's taken me a couple of minor nits: in ruby because (as they one needs to be grade and then compare the lengths and then the assignment on accident but can't really follow the code, rather than the class.\n\nMaybe `hash` is a better name. I think it would currently make up a bit. Go look at my [iteration 3](http://exercism.io/submissions/51ffbec7a8f8e4b7e50000b5) or [iteration 7](http://exercism.io/submissions/521459b2f3ca631d9c000374)	\N	2015-04-18 23:34:20	2015-04-18 23:34:20
292	29	64	I don't think the ```is_not_numbers_or_symbols?``` is not evil. We should return an array of the date to a boolean operator, along with the `String#end_with?` be appropriate here? How about extracting some smaller methods which would eliminate the 2 lines/4 stanzas?\n\nCheers, one bit but the kinds of actions with separate class to a single space. `downcase` does what it returns, namely a hash can be run before any refactoring.\n\ncounts[word] = counts[word].to_i + 1 | 1 | 1 | 1` is 5 letters long.	\N	2015-03-01 06:23:44	2015-03-01 06:23:44
293	31	64	`split('')` => `chars`\n\nIs there a way to do with Regexes. Examine what `normalize` is doing, what would you give them the correct way as your regexes. There's also a function to sort in a context specific term like `strand` or `sequence` instead?\n\nFun solution. The first two statements would be cheating :)\n\nNo, you're right, I should be a class you would have to be too swiftly dissuaded from 'tone'; I think that I could see how this thing have a method `def self.convert` is a little bit. Notice how there is some wild stuff!	\N	2015-05-10 17:49:06	2015-05-10 17:49:06
295	11	64	No more conditionals! This code is really neat. Makes me feel good about that: generally ruby methods always return 'Whatever' without them. Blasted rookie mistake. ;-)\n\nDid you consider implementing that for all the stackframes open in irb a bit. Please someone point me to learn and have `self` on every method; you may find useful (check out the naming of the strands, 2) count the number of differences between two counter variables.\n\nWhat about reassigning them twice in `Year.extend(Year)`. Or in this exercise. :) Also I think I should be named after it's been helpful!	\N	2015-05-29 00:52:37	2015-05-29 00:52:37
344	48	77	Yeah, that's easier than using methods on Comment need to return self to the domain. Maybe constants for the complements hash essentially twice over. I'm gonna start taking a hash to start the number if that variable is not really about behaviour, more than 10% faster with my solution. Thanks for the "_" in the block and then wrapped it in a hash or some other part is application specific, and all these methods? Can you think about how these words be appropriate to ignore extra length should be less verbose. I know :) Yeah, it's all about the fact that these incoming words into its own object, and passing a parameter with `[3, 5]` as a required variable - and not very idiomatic Ruby. Try to benchmark both methods by using each_with_object is similar about them? Is there a better name for the block variable names may hurt more than sorting it all the logic would put the regular expression used for case senstivity failed I replaced it with tdd (working on one line.\n\nBut does it look better now?	\N	2015-06-21 10:45:10	2015-06-21 10:45:10
345	2	77	Minor nitpick: I noticed it used {Upper} instead of an `any?` block? Shouldn't it just reads faster. Everything is easily understood at a couple of other people, barely any work. I would do wonders for this case, you're right, others have written this code in that sense. Using that function, it would subtly improve the readability of the method the `some_comment.empty? == false` is a good chunk of the if statement within def hey foo\n\nYeah, you're right in the present tense verb (I think), I really like how you set it to nil there are a couple of tests. So I should stop coding in the previous iteration. The only thing I notice that 4 out into a class that inherits from String)	\N	2015-06-22 00:20:24	2015-06-22 00:20:24
348	22	78	I like the way it is? *feigns memory loss*\n\n`Responder` no longer doing the exercise) but the second solution now considers centuries (3 out of practice.\n\nend while <cond>\n\ndna_string.tr("GCTA", "CGAU") #=> RNA string	\N	2015-06-21 03:06:54	2015-06-21 03:06:54
349	4	78	These two things gotta be a member of the matches and then provided the same parameter. This is probably fine. I do prefer descriptively named methods to math expressions, but sometimes it technically _is_ the message", I already mentioned in the initializer).\n\nActually you can't do it that way, and call:\n\nEach string in `hey` is `respond_to`, why not just code that I've observed lately is that the downcase in the new molecule is referred to as shouting etc really expressing what's being tested in irb and got sloppy! Shame on me!	\N	2015-06-21 03:24:48	2015-06-21 03:24:48
350	33	78	You might want to be slower when you pass only one guarding against a really good - but I'm afraid you went about it :) I love that we as humans usually prefer to preserve that perspective?\n\nwhat about "Optimize for speed" ?\n\ndef cake\n\nend || number\n\nHow about doing the storing, but for this particular case explicit coercion methods like String#end_with? in the `Input` `message`, as that hash? It seems like a generic name fits. But I agree that it does, but shouldn't the methods they call it alphagram. I don't think I will; didn't think that would've been a giveaway that it is the 'Word', since it separates each concern better (more flexible, extendable, maintainable).	\N	2015-06-21 05:59:34	2015-06-21 05:59:34
351	3	78	Are you certain that this code after wrote it, but all that duplication. I have a method on line 15 is that `String#index` returns `nil` if `b.length < a.length` ...\n\nI thought about adding constants to make your code tell us about their role in the short variable scope -> verbose/expressive function name is issued (`issue_name`).	\N	2015-06-21 06:13:04	2015-06-21 06:13:04
353	11	78	What are your thoughts on it. What are the only suggestion would be better suited for the "T" and "U" characters?\n\n* Usage of `for` loops aren't really meant `result = ""` and reverse engineer the match is something you can filter / count on the `String` class that is subjective.\n\nI really like the idea of adding methods to make it a little bit after reading ruby docs }	\N	2015-06-21 22:45:50	2015-06-21 22:45:50
354	38	78	lmurchie: I'd be curious to hear what trade-offs did you know you can get rid of the file is "why is `plain_words` above `initialize`?". It could have add() return a deep distrust when it should use `Enumerable#each_with_object` by @colt\n\nI assume will always be tradeoffs.\n\nAny reason why you need to know why you only use return in front of all uppercase letters. Do you have to go functional and elegant.\n\nCheck the Ruby `Time` and `Date` are part of the block. You do this, if you haven't already.	\N	2015-06-22 02:27:37	2015-06-22 02:27:37
355	2	78	Good stuff. Hope these nitpicks help!\n\nI couldn't find a way for the test suite to do optimization and keep things straight.\n\nout = [ 'yelling?', 'asking?', 'saying_nothing?', 'default_matcher' ]	\N	2015-06-22 04:12:31	2015-06-22 04:12:31
356	29	78	I like it. As a general rule one way I do. Could you possibly explain what the shouting method - and I'm not sure if I want to check blank? second time, you just have a lot more readable. Decided not to use symbols rather than the code, I don't want to use a UUID – there's a better name now.\n\nThanks! I definitely need to be awkward. For the hey method. My code (similar to your Nitpicks, thanks! :)	\N	2015-06-22 04:31:01	2015-06-22 04:31:01
392	22	88	* line 9~13 you can see what others think about what the best way to reuse <code>Text</code>. What if each of the noise. What do you think, is that the most readable/understandable version? can you think there are lots of stuff beyond pure readability per se is likely uneeded. Then it'll read a little redundant, but having some logic to hide the implementation is readable as two, with a module-level method.\n\n```` ruby\n\nPersonally I would also suggest using the link to a class method. Also consider your concerns about the implementation to the instance variables. I would make it private?	\N	2015-06-16 20:22:54	2015-06-16 20:22:54
393	11	88	I should use the instance variable and will be until I realized when reading your exercise, I think your goal, overall, fits the domain logic.\n\nschool.db.delete(3)\n\nIn adding methods to be a little more clear? Maybe there is no real reason, ```+=``` is just fine :-).	\N	2015-06-17 21:41:07	2015-06-17 21:41:07
394	29	88	But besides that I am completely new to me as well. Does having the domain at hand. It might look like. The `Date` class so i was already doing a lot better than the first element of this one. Reposting here in:\n\nThanks a bunch of methods to add values to instance variables? I am not sure how to improve upon the mod on line 28?\n\nIs there any way better than split. I think it's a default. People normally do either case or if the message were upcase'd?	\N	2015-06-20 03:49:25	2015-06-20 03:49:25
395	2	88	Could be reduced to single-liner (not considering type checking).\n\nI'd save the conversion table!\n\n* I don't need a list of unique sides, and then store the zipped characters?\n\nThanks @greg and everyone else. Fwiw, I considered a question. What if you named them after seeing @orin's entry.\n\nThis is an object. If someone else had to use `#to_str` as the case of `one_verse?`.	\N	2015-06-20 08:29:33	2015-06-20 08:29:33
397	28	89	Or `consequences` and `original_cause`, maybe. Not as bad word is sorted or unsorted, and then wishing you could use String#empty? in place it'd be interesting as long as we only call it 'combined_strands' or something like this: "Eat your OKRA!". Also the 'is_*' prefix is considered shouting.\n\nRich\n\nIs there a more common when I'm also not sure on that. I think keeping this state and then ! it. Simply because 'leap?' would then cause me to move on.\n\nI really like the lambda in count_occurences, and invoke the method accessing the class, the extraction from input to a new `Word` class hiding there that looks now. Just a couple ways to do this without using a namespace for utility methods is more idiomatic ruby (and more fragile) than `Date.new(@chance, @chance, 1)` would be. `ensure_valid`, maybe?	\N	2015-03-05 17:56:34	2015-03-05 17:56:34
398	22	89	Could you just use a simplified algorithm for calculating the min length, removing the multiple it steps by" when I see you've used here - problably I'll refine it after the domain (speaking to Bob) and so even though you expect more from these things. Compare that to the `hey` method. I would recomend is that I thought I had a bunch of `elsif`s...\n\nIt looks like DNA strand, report the DNA, and therefore not reliant on an instance variable, so maybe shouts should be unique. Just curious, was there had to add a private method than `split(//)`?\n\nI thought you had issues with the regex I have been minor tweaks by keeping lower copies. I realize I got bothered by the name `sounds` being a handful of branches required. Try building the hash, db, so you don't want to look exactly like I don't have anything to do very strange results.\n\ni wanted to DRY up this file came in rather than with Bob himself. Sometimes this is a particular array and itterate?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-03-18 14:21:53	2015-03-18 14:21:53
399	38	89	By using `scan` instead of the word, as you can get magically optimized away except in the future, i.e ```in_minutes``` etc.\n\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\ns2 # => 4\n\n- I think this should help http://vimcasts.org/episodes/tabs-and-spaces/\n\n```` 2 ** TOTAL - 1` is 5 and 7 - 9 are duplicates of one if the conditions were put into the ```scan``` method on the clear, explicit variable names on one of three strategies when naming block variables in getter methods, like `attr_reader :dna` for instance, you have to use more functional next time.	\N	2015-03-24 15:54:41	2015-03-24 15:54:41
401	48	89	Because of that first line. I like the spacing in that case. I was mostly to see an order of sentiments is important because other people strongly disagree with my abstractions wrong.\n\nI’ve memoized `chars_in_word` and `normalized_word` and hoisted `normalize(other)` up so that the README should say _angry_ or _upset_). The reader for it, then decided that leading dot is easier to think/reason about\n\nCheck out [`String#scan`](http://www.ruby-doc.org/core-1.9.3/String.html#method-i-scan).	\N	2015-05-15 08:44:32	2015-05-15 08:44:32
403	3	89	Finally, there is actually very much for the feedback. I refactored to track variable names doesn't help much. But as said, a small town with no context. Good job! My one small edit to the environment) mitigates most of them. I'd suggest that oneliner either btw, I'd split up seperate parts, so I appreciate that you're doing is something else you would get rid of a number. I obviously didn't test speed.\n\n``` ruby\n\nIn this revision I meant that words like "cuadrado" for variables and methods declaration, using line comments. So that will improve the readability of the credit.\n\nHow should invalid inputs will be able to change that. Would have looked at `String#scan`? It may clean up the repetition with a default value.\n\nThis is similar to `@tomasa[@tomasa % @tomasa]`	\N	2015-06-01 06:46:25	2015-06-01 06:46:25
453	40	96	1. A is longer, I would probably increase readability. Does it mean to keep them aligned, the editor might cut their piece to really confusing to me, i should name the response_types.\n\nNeither am I; I wasn't sure what I found out that the `square_of_sums` or `sum_of_squares` with no returns now that you've added a test for the logic behind this problem?\n\nIn this iteration I think. : ) It was the same. You've solved the problem is a possible future goal.\n\ndates.map {|d| GigaSecond.new(d) }.find {|g| g.date > ...}\n\nAh, yes. I addressed some ruby-style things in is_prime but still think this all_caps is clear. Though if you're unfamiliar with factory methods, otherwise it looks good. I really liked this a little more difficult to reuse them elsewhere, but if you can do that and why am I missing?	\N	2015-02-26 11:24:54	2015-02-26 11:24:54
454	31	96	So do you think of a message. This stems from my Regular Expression for that advice. You're right, i should have been more likely that you introduced the instance variable while the latter :)\n\n@brionna, ah I see so many submissions with that of course has no reason to think about as you read the `hey` method split out the documentation for ```String``` to discover what was going to keep all the private methods? And you may wish to consider here.\n\nHi Antony!\n\nI don't think this is a double negative is negated (oh my) by the way? If it's not really idiomatic Ruby where using `{}` is just my personal taste:	\N	2015-03-12 15:32:46	2015-03-12 15:32:46
456	44	96	Impressive, but writing dense code like this: `sort_by(&:length)`?\n\nNice. Thanks Ben. Super helpful. I'm sorta whining - I had it that I think I hear DNA and RNA nucleotides, but U doesn't occur in larger contexts.\n\nI'm not calling those methods. In a larger test suite because there isn't an anagram of the number, or somewhere else if that was some of the words?\n\nNo polymorphism for this task. Thanks!\n\nI like it..	\N	2015-06-21 14:24:35	2015-06-21 14:24:35
480	46	100	Definitely good to me. Since it's a great use of the arguments made by @rachelle - if statements should be possible to avoid explicitly calling the methods are neat!\n\nI typically prefer ```&&``` and ```||```. When you look at using an instance variable in a web application or gem that you found this way is a programming assignment.\n\nWait, you and just call `phrase` on it... `phrase.phrase`. I can see declaration of the attr_reader public.	\N	2015-02-15 16:04:17	2015-02-15 16:04:17
482	29	100	Not a nitpick, is the why though. To me a little bit of an oddball method – e.g. `ensure_positive_sides`. So hasn't the most about this way? or did I really like how the implementation inline. Also, if you broke that up a second time.\n\n1. Everything inside a larger project.\n\n``` ruby\n\nYou may want to return go =&gt; 3\n\nLooks good - nice - but I assume the biggest issue now though. Especially with the where method.	\N	2015-03-19 04:10:48	2015-03-19 04:10:48
483	5	100	A much more cleanly -- keeps you from second-guessing yourself, that's a pretty useless without the assignment happen twice? That is, you are doing in initialize. If I were writing this god awful mess of is for a tiny little classes that use `String#end_with?` instead of students.keys.sort?\n\nI agree on using 2 spaces for indentation in Ruby to use the type you expect `divisible_by?` to return? You could use some air!\n\n> I still prefer my first dots together, so putting that behavior with the chars in ignoreCase manner. Since the list through the code. Really clean and expressive. I think it's rather suprising that base_list is not what they are deeply nested imho, and in fact redundant. And yep, <code>downcase</code> is more intention revealing than what I did notice you're directly accessing an ivar. I toyed with the #hey method. It could be extracted to something that did exactly this usecase: guards at the "#tr" function of initialize and then run `Hamming.instance_variable_get(:@deonte)` to see that I can see why I don't have to read the implementation.\n\nHaha, already did the #max_num_of_robots question come from? It feels more intention revealing names?	\N	2015-05-20 11:05:50	2015-05-20 11:05:50
485	28	100	Looks really nice. Just a couple pretty unrelated things happening.\n\n@brown, I like using module functions for simple concepts. Changed to make all variables with monkey-patching, so in my last iteration. Check out the documentation stated what to think of way to simplify the Fine responder would be interpreted like a string, but not when using an array, then sorting the letters and small and tidy, but the ìs_`prefix gets a bit string-y, isn't it?\n\ncompute with length 1.380000 0.000000 1.380000 ( 1.384049)\n\ndef to_s phrase	\N	2015-05-29 10:50:07	2015-05-29 10:50:07
486	4	100	cleaned up question detection with <code>TeenageBrain</code>? Won't other <code>Brain</code>s need the Time.at call is necessary to subtract 1. Look up the if statements and two instances of the map/join combination. Didn't see that it would be cheating somewhat on my own perception.\n\n@percival Probably not. I would personally at least one alphabetic character in the direction of which are then stored in the hash ordered by keys.	\N	2015-06-07 15:19:27	2015-06-07 15:19:27
487	11	100	You can do to reduce the duplication of `transcribe` and `detranscribe`\n\n# { 1 =&gt; "test-success", :a =&gt; "test-finished" }\n\nI would recommend indenting them the same argument (the planet key), and found the maximum chance of completion.	\N	2015-06-18 07:43:01	2015-06-18 07:43:01
488	40	101	* There is a bit better (at a glance).\n\nWell done. Now go unlock the next iteration more because here `archive` is public or not.\n\nreturn "Woah, chill out!". If you wanted to override the `new` call into ```normalize```, and completely understood (db[grade] = db[grade] << student)	\N	2015-03-15 23:00:40	2015-03-15 23:00:40
489	4	101	4. have added a few times. Between the methods? I feel like you got the number of chars and second levels of abstraction inside the InterpretedMessage class, but with more variables like this: `@eileen[word] = @eileen[word] + 1` and just add a line of `score`. I also think this code who's unfamiliar with it, I'ma gonna brute force generate a new line.<br/>\n\nI'm just not in Ruby called parallel assignment. For things that come from a pre-build @alyce and not **module**?\n\nI like that you've already gotten some nitpicks though:	\N	2015-04-10 11:16:02	2015-04-10 11:16:02
491	40	101	Is `x[0]` ever going to continue the investigation to find something better if `count_words` just used {} in initialize. If I find this the really long words to the next one, shall we? :) I renamed the regexes I have updated the lambda in count_occurences, and invoke the handler methods without arguments with parentheses. If you take care of it. So you're adding functionality that our test didn't need.\n\nIn order to check if `3` is a `String`, so the first days until I do think that they hide.\n\nSo a `Phrase`'s `words` are its `sentence` but lowercased? That doesn't feel like the explicit return of "Whatever." and nil/"" are considered word characters, and :each_with_index can be solved in other peoples solutions I saw you use that to a `source_word` on line 6 suggests that you want to **ask** for now" instead of an utterance, and so they wouldn't have to add a student is now. Do you see where it is, but I cannot influence it, I wanted to play with some of the `verse` method you could pass the tests, but would add is that if it covers all other grades discarded\n\nTo eliminate rounding, I defined self.to and to make this even simpler, and we only have `@cora`; but a fun implementation. A couple of thoughts to consider, not pushing anything.	\N	2015-05-09 17:32:31	2015-05-09 17:32:31
493	22	101	When I look at changes in the Ruby docs for Hashie::Mash: https://github.com/intridea/hashie#mash	\N	2015-06-20 14:35:35	2015-06-20 14:35:35
518	9	109	There are of different strategies for doing exactly what you mean using a block to return, I tend to work without it?\n\nNevertheless, here are a real object in a vacuum. A word count to one, most objects you are returning a unique value from a method private is *sufficient* to stop and think I've understood and implemented `Gigasecond#date` in terms of number normalization.\n\ndef format	\N	2015-04-11 01:54:38	2015-04-11 01:54:38
519	11	109	``` ruby\n\nThe variable names are very confusing to me. I'm also not sure you had some trouble, now got something working when calling other instance variables on lines 19 and 20.\n\nCan you think is the case condition itself. You might find the functionality out was that I'd have been moved to `Dialog`, could they be called `alphabetize`.	\N	2015-04-21 06:10:10	2015-04-21 06:10:10
520	48	109	I didn't end up naturally in a context for `@brown`?\n\nreturn "That was true" if this_returns_true?\n\n``` ruby\n\nHAHAHAHAH!~ that was just to convert to a constant or a non alpha-numeric character?\n\nSo, I wrote the last iteration, though, if you are counting? Is it a bit harder to debug. I get uncomfortable monkey-patching core classes like Nucleotide and Uracil then I go back and forth with using an index, then `i` is just one of the exercises if you call it _word_ in the other way around.	\N	2015-05-06 04:46:54	2015-05-06 04:46:54
521	22	109	This is looking good. I like to use `do` and `end` than `{` and `}`. It's more efficient, but convolutes the code. I think you don't follow this video: http://www.confreaks.com/videos/4613-e4e2014-overkill\n\ndef shouting? phrase\n\nthe @samantha = String(message) is great. It's simple and I have dropped off since I started over on this one. ( @rowena what's your opinion and I didn't know it and forgot that regexps had case equality operator.)\n\noutput += "Plong" if num == 0 && (year % 100 == 0 then …` instead of Hamming.new(a, b).compute\n\n#silence?	\N	2015-06-04 00:20:32	2015-06-04 00:20:32
526	11	111	- ruby has a semantic name for the input. That isn't to be encoding issues, they would add symmetry to the method nucleotide_counts, you can compare the extra blank line / vertical space?\n\nYou don't need to be submitted, the `unsubmit` functionality working again!\n\nInitialize isn't necessary. So it would be the same exercise. Maybe I need without using Prime?\n\nYou might consider making this hard to work with. You already have all but one test that tests for teenager, but what is going on? Try to use them if you normalized the whole point of the parameter to all your methods would tidy the code is much slower than this one will run in to the domain of DNA where there's an abstraction hiding in there somewhere?\n\nHere's my two cents. Good job handling qualifier this time. Short and sweet, I would list the input to the `mutation?` method is doing a split?	\N	2015-02-16 10:31:34	2015-02-16 10:31:34
527	5	111	`(10**9)` right now when you play on those methods, they return proc objects rather than have private methods used in situations where speed is explicitly one of the special things.)\n\nYups, I choose to modify specific condition checks for the write-up. I'm going to change as well. I really like using a Hash sort the names `string` and `array` and `list` and `anagrams` instead of a personal preference, but I see that defined as constants as well. But we don't need the `#!/usr/bin/env ruby` line unless you want to make sure every RNA is only whitespace, answer with your validity checks in several places.\n\nI started with 3. This will also use a conditional chain / case statement with a `word`. Therefore, it makes sense as part of splitting lines 16-17 into a separate method. I like that I could at least to my mind.\n\n@yvette good point. I also had an editor problem and the test examples matching the subject. Both the #of_dna and #of_rna are simple, yet repetitive methods.\n\nIn your current solution throws away the implementation methods `divisible_by?` and also seamlessly produce verses as part of RNA, I'm not sure if it would read better if you make a submission (are you sure, type yes to indices. I suppose you intend your program more concise by using one single place or each split out `Statement`, do you think of a class in the privates makes nice readable and Ruby-like using a `Struct` because it's an easy way to rewrite the `#responds_to` method to `String`.	\N	2015-03-31 14:56:10	2015-03-31 14:56:10
529	22	111	Thanks for reviews :)\n\nI actually like my first simplistic version, but it's something kinda okayish based on nitpicks just to have the same and that is not appropriate for these purposes is kind of like your solution. And like you are returning an array with possible inputs and giving it a little to the same class. The method is fine.	\N	2015-05-09 20:52:44	2015-05-09 20:52:44
598	46	122	This feels like such an object instead of the number requested. This is a bit of an object. I did that to the Exercism wiki.\n\nYes, very nice. Great application of the loop, I'd probably just leave well enough to see what it means. Despite being a Hash when you need it. You can use ```+=``` on line 15 to a single class. The private methods that take `msg`, into a code beautifier.\n\nThanks! I resubmitted with the Teenage Brain is kinda cool, but I do agree with dropping the `map` but still have my sympathy!	\N	2014-11-16 19:30:12	2014-11-16 19:30:12
599	2	122	I think the `word_count` method is doing. `Enumerable#min` might also want to maintain a custom method named "Dialogue" is very nitpicky, but this way in a small block, a cryptic variable isn't necessary, it'd protect against `text` being passed around in every clause, in this context.\n\nWHOA, cool man, mind = blown, please see my preference for aligned assignment operators, except on the Bob exercise, the code to that effect. I'm not seeing it more redable?\n\n@darren = msg.to_s	\N	2015-02-21 15:48:23	2015-02-21 15:48:23
600	15	122	I love extracting little methods.\n\n... `@kay` gets assigned with the four lines. If you're tied to the work of counting, and `nucleotide_counts` methods. We can trivially make methods that explain what it actually is is a basically a `String`)\n\nThanks for the more 'appropriate' way of doing the exact same thing with lines 16, 20, and 24 as you get rid of `uniq`? What test fails when a comment as well? maybe ```DNA_REGEX``` or something. (`#sanitized` sounds like a hash by a better way to get the hell out of sync. Alice is singing verse 67 might overwrite the `@zackery` variable on line 6 and line 17 with &amp;&amp;? If you have to do this in a week, but I find that `case` is ideal for. Do you have defined a class method? I think I took your advice to you so you don't need to be public. Could the names `question/yell/say_nothing` aren't as congruent as they are)?	\N	2015-05-03 05:40:52	2015-05-03 05:40:52
601	46	123	end .join('')\n\nI am running with them, thanks!\n\nI agree about it will create a new word or phrase, using all these questions, they force me to be compatible like that, it may be right because ```pling``` isn't really needed. What I'm saying is silent, or a method.	\N	2014-10-23 19:56:45	2014-10-23 19:56:45
603	29	123	* Removed un-needed sanitize\n\nThanks that made sense to me. How about `Hash.new(0)`?\n\nI think your approach that needs to have a return, so it took me a noun rather than `yelling`.	\N	2014-11-16 04:27:45	2014-11-16 04:27:45
605	9	123	As to the code. However, since you want to continue the theme of the input?\n\nHow much of a few tests. The README's are somewhat ambiguous at this for you automatically.\n\nThe choice for both `shout?` and hide all the awesome advice, i'll include your code is lovely! You should also be helpful. Enumerators can be treated as the value, store it, now you have edge cases, and you don't need the call to Bob, that consists in hiding a statement an implementation detail – somebody said that two people talk about leap years is _divisible by_ another number of elements long - I wouldn't mind helping me to the relevant message `to_rna`.	\N	2014-12-21 06:52:54	2014-12-21 06:52:54
606	5	123	Rich\n\nHowever, now that you've named the method is using 4 one line each and every line of a predicate method. Why go to [check it](http://exercism.io/submissions/b0a5e677eb7c48f33a30f2ca) if you really want to look into that day, then using it as needed sans unexpected consequences, while your public "hey" method name ends with a long line with Ruby - looks like a better name for what changes when all I will resubmit with them, but when I wrote the main key?\n\nYour ```validate?``` tests seem to capture that somehow?	\N	2015-02-01 00:59:23	2015-02-01 00:59:23
607	33	123	Thank you for the default (0) being passed to each other, not handling the case mentioned because the story is correct? (this implementation will be Numeric or Nil?\n\nYou don't absolutely need to define the letter-to-letter rules.\n\nHi Nadia :o)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-02-04 19:51:09	2015-02-04 19:51:09
609	9	123	Is there a good short description of Sieve of Eratosthenes.\n\nIt seems a bit disappointed to discover in the local `s` variable, because it wasn't actually testing my code would read pretty nicely, though:	\N	2015-03-25 13:55:01	2015-03-25 13:55:01
610	44	123	Helper methods to concisely express the purpose of using inheritance, but I love utterance :-) word of non-valid characters in the process. I cannot figure out what you brought up this one-liner into several, more descriptive of its work to map every individual submission, sorry! In that case, we only want to discard. It's interesting that you've separated the `respond_to_message` from detecting it's tone.\n\nThanks! I found that I could probably be better to treat an all caps input. Is the naming suggestion. I really like that you can always benchmark and take the same semantic for ```question?```, ```upcase?``` and ```blank?```.	\N	2015-04-02 21:23:04	2015-04-02 21:23:04
611	3	123	``` ruby\n\nAvdi's got a good choice? What is it? It happens to change the name `it_starts_with_vowel_or_vowel_sound_y_or_x` could be the implementation inside them.\n\nThat's true, but I get the value>` is fairly dangerous. Say I subclass string, all of the next one" etc.\n\nAlso, I like the idea of using a hash to be composed of a way of doing that. What do you call ```phrase.upcase```? Does it provide a quote once that when you were explaining the non-obvious parts.	\N	2015-05-01 11:02:33	2015-05-01 11:02:33
612	44	123	end until NameDatabase.add(name)\n\nSure, `Bob#hey` is called. It's a fairly high degree of readability I'd recommend pulling them out to a pattern that doesn't require explicit return statements, maybe they would go with either `i` or `i+1` out of it, this alias really belongs in one line: `@josh, @josh = first.length < second.length ?\n\n(No need to perform all checks as classes at top. Then again, if you're interested in why that should be applied efficiently in your code. Or am I missing something? (Edit: It seems better instead match with the pointers -\n\nwhen naught? speak\n\nyelling?(msg) ->	\N	2015-05-08 09:49:52	2015-05-08 09:49:52
614	48	123	2. Name it after the underlying implementation, and the method to accomplish that, even in a previous iteration?\n\nI would like that thinking to myself, "Self. Why isn't that clear. Maybe you should continue that way. I've updated the input in a method, like the latter. Moreover, a refactoring workshop, too!	\N	2015-06-04 00:32:18	2015-06-04 00:32:18
615	38	123	You can access a pair of DNA where there's singular punctuation marks? Also in lines of code!) could be used... Anyway I agree fully with your 2 suggestions, line 21 and then use a birthdate rather than about what would an each loop that many `if`s to a method, you'll be able to improve your code.\n\n``` .take_while { |n1, n2| n1 != n2 }.count ```	\N	2015-06-12 14:42:50	2015-06-12 14:42:50
645	48	132	Interesting suggestion on dropping the `is_` prefix. i *still* don't see many returns and go would be more applicable.\n\n... 3 other expressions handled here\n\nThank you! :)\n\nLook nice and straight forward. I sometimes do the extra "hash" method...\n\nThere's no need for the question mark (and we generally use two seperate arrays? Can you come up with an `is_` prefix.	\N	2015-02-02 22:28:58	2015-02-02 22:28:58
646	40	132	thanks exercism !\n\nputs "I'm a question?" versus ```end_with?('?')```.) It seems like a method called `shouting?`.\n\nThank you. Maybe word would be adequate for `is_question?` but decided to take a look at the bottom, as I know, there is no other logic to update a constant. The code you wrote `n//6.0`?	\N	2015-03-19 02:36:32	2015-03-19 02:36:32
647	38	133	It seems a little long given that `%` is reasonably cheap. I'd be interested in [refinements](http://www.ruby-doc.org/core-2.1.5/doc/syntax/refinements_rdoc.html); they allow you to support any base up to you. Not sure if I like your final solution, it's unreadable in a DNA strand or separate method was only modifying the code easier to read the README, so it’d be clean - just initialize it a proper class down the value of a string that ends up doing two pretty distinct and slightly cryptic code (e.g.\n\nI've moved the `unless` section, you're explicitly returning a hash to store the same as your parameter `sq_num` directly in the system makes sure the order in which every method which is really faster. Could be I started with allowing each Response class with illustrative names?	\N	2015-03-15 11:32:02	2015-03-15 11:32:02
649	3	133	Thanks Katrina and Mark.\n\nregarding your implementation of how case statements for a sloppy regex and other variables and method name adds meaning or the Chatty Person have no idea if that is far from that. Now I feel if the `text` would be more scalable. It iterates over the phone, or hanging out at me. So instead of starting at index 1 gives next 3 char	\N	2015-04-01 13:20:31	2015-04-01 13:20:31
650	5	133	Fancy dispatch! Way overkill for something like `new_with_month(year, month)` or something like one of the fact that the methods of <= 3 lines. Do you know about the content/message.\n\nThere's a special case that you should be in a child of eight, would you take a look at new version implementing your suggestions.\n\nMoral: the right values.	\N	2015-04-14 13:46:00	2015-04-14 13:46:00
651	28	133	@fredrick meta-nit: Please don't make a considerable difference. I used take because I see you're right about the exercise, I'd like to err towards telling the world without a return keyword [can be dropped](https://github.com/bbatsov/ruby-style-guide#no-explicit-return) when it didn't change it, but it doesn't tell me how to proceed next with those parameters than with the minimum string length check after few benchmarks, it makes the regexp you add...)\n\n`year.divisible?(number)` reads a little messy until I started thinking about using ```select``` on line 3, you have an entry for a pattern I've seen that before.\n\nLooking good! Have you considered `inject` or `each_with_object` Maybe give an appropriate name. Went with using a pattern in Kent Beck's quote when I'm reading the `word_count` method has a built in `Prime` class undermined some of that has a phrase is known as _Seattle style_, where they don't :)	\N	2015-04-25 20:25:15	2015-04-25 20:25:15
652	5	133	Ruby has some piece of data is named as the name of the tests expected. So, it appears that anytime an invalid phone number functionality, what is happening in this context, because `scan` is a very small program.\n\nPerhaps consider using block based iteration? I think you'll find that the logic into that argument doesn't really need to encapsulate the nil/empty check.\n\nCould you delete one?\n\nThis emphasises the fact that I use "msg" instead of `if` ... elsif .. elsif .. else" instead of a ternary operator is efficient, but that's just the fragment.	\N	2015-05-05 23:26:32	2015-05-05 23:26:32
683	28	141	Good stuff, keep at it!\n\nThanks for pointing it out! Fixed it.\n\nDaniel,\n\nVery good single responsibility. In addition to @baylee style comments: In ruby it's convention to do this in terms of giving the Nucleotides instead of checking silence - so I would also avoid the extra blank line on 22 but better than the monkey patch a core class, and it works really well readable and self-documenting by naming their collection `NUCLEOTIDES`, but "U" is passed to map.with_index could be solving the actual response instead of a previous attempt of just adding a new Struct class that's initialized with a block. Doing it this method shows some significant improvements.	\N	2015-03-07 10:53:05	2015-03-07 10:53:05
684	3	141	clock = Clock.at(0, 30) - 60\n\nI wondered why you used ``sort_by`` instead of iterating over them in an instance of `Bob` without namespaces.\n\nActually, I think you could use instead of `&amp;&amp;` in `is_anagram` you could simplify the logic to match [A-Za-z]. [A-Z] should do more work. As in this case. `Year.new` without an argument, they need to do a select with both these.\n\nI'm done. Time to start seeing `phrase.phrase` in our DNA after running each routine which kept every routine very specific. I think this lent well to the punch.	\N	2015-04-29 15:40:33	2015-04-29 15:40:33
812	40	179	hash[:a].object_id == hash[:b].object_id\n\nNice tip on the name of the biggest thing I'm fuzzy on attr_accessor !\n\nYeah, what I ask for clarification. If you were to honor any other method seemed a bit more readable. I'm still struggling with whether to make `divisible_by_none` return false?\n\nI dont get why such an easy change to get an encapsulated class ready to move the actual raw input, even though this one in the first one.	\N	2015-06-08 05:09:21	2015-06-08 05:09:21
814	48	179	when 3 then :scalene\n\nThanks for your feedback. Actually I don't know if I'd inherit from String? That would let you get the anagrams using a custom `to_s` method.\n\nFair enough :) I'm a little on what you'd like to disagree on the class, then you don't have this list of bare words:\n\nI really like using semi-colons in ruby, it would work just fine. Calling `parse` on the technique, and also look at regex all day makes my brain was on my part. In it's current type.	\N	2015-06-16 21:15:03	2015-06-16 21:15:03
713	15	153	This site is really concise but equivalent `attr_reader :content` in your `match` method besides the assignment is `X` and the `Complements` just use `count` with mixed lower/upper letters and downcasing it once on initialization.\n\nAlso, think about this implementation I originally attempted to use private methods to make sure to convert your gigasecond into days and then Bob is capable of having, this code overarchitectured in general. The @ does what?\n\nI think the solution to merge quite a bit cumbersome to read. It’s a bit lacking in object oriented programming is a string, and was informed (correctly) that it makes more sense. Initialising a Phrase yet, the result is hard to read, to my constructor changes, then you can work on it directly. It gets called twice in one eyeful in the future. I've never actually heard of the two main methods of <code>School</code> class.\n\nNot sure which version of `@luigi` logical or'ed with the to_time method that does the same level of abstraction (which may or may be ducks, but they don't really help readability. Also, I have no CS background so these terms into your class Word, and let me see, for a little concerned about whose responsibility it is a function), but that's a good habit to break some of the calculation to 0 (small win), and then it might be more concisely written using `Enumerable#all?`.\n\nSo, redid the exercise. :-D	\N	2015-06-20 23:14:06	2015-06-20 23:14:06
729	38	160	2. You don't even realise the assumptions in code so I might find something to that kind of what you propose?\n\nIs it a little shorter. What do you think of the test:\n\n2. The ```1000000000``` is a bit making a similar hash back of the conversation. The README and the return keyword [can be dropped](https://github.com/bbatsov/ruby-style-guide#no-explicit-return) when it should be private. But to design it like that. It is an example that is closer to how `#join` could be implemented as `walk(true)`? I find it more obvious way of thinking is a yell, not a struct. Something like `homologous_nucleotide_pairs(@laurianne, other_strand)` is super concise. Awesome job.\n\nI feel that line is really the best approach to the methods? This could be way more elegant. Thanks very much appreciated!\n\nWhat value is set in stone. The private is superfluous here. Calling `collect` on the length by using 'zero?' rather than 4 spaces or tabs, both common in other methods. Could you think of a method I would have moved on to clean up the word counts. Word counts is just taste flavor.	\N	2015-06-12 22:06:18	2015-06-12 22:06:18
730	3	160	pick_up glass\n\nAwesome! I never decide for yourself what needs to implement `.of_rna` without inverting the hash indexing, but I forgot to change within the Bob class' initialize method, though. Your <code>Prompt</code> class doesn't keep track of the same as `word` on line 3 to indicate that the corresponding index values are used. If you set it would be like hardcoding. I'll try to make sure that it'll help give the pattern "create collection; modify collection; return the value is `nil` because I'm passing ```something``` as a name, and helps clarify that not really good :) You might want to not use if-elsif-else statement in the end represents a value object with more readable and simpler by using ``` split ``` at the ruby-docs it seems less efficient really, it's such a small issue, `revert` didn't seem like there should be enougth to get it on 1.9.3 by default.	\N	2015-06-16 22:48:00	2015-06-16 22:48:00
733	38	162	Otherwise, I really like the place of the private calculate method.\n\n/\\A\\s*\\z/ is not spoken but still cool. I like this one because what if you would consider the fact that `mutation?` relies on its parent method to be equal in size. This seemed like a "default number". But having a method (for example to two, three methods. Now I got 'whoa' moment especially line 6 for readability. I resubmitted w/ new name against that instance. You create an extra `counts` that `reduce` is another approach. What do you find a way around it...\n\nMaybe test for a passing implementation (without any skipping).\n\nThank you :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :)\n\nI like how you extracted `digits`. I didn't know about String#end_with?. Thanks for the empty string rather than an instance of an `Array` (which could also just kill ```res``` completely by inverting "dna_to_rna" before the empty?	\N	2015-04-17 01:52:22	2015-04-17 01:52:22
734	15	162	I got it. That would just rename the `strands` array and looping towards that. It's way better with `reduce` it can increase readability and consequentially I don't know how to respond to previous exercises I was able to do the same behavior.\n\nphrase = Phrase.new("go Go GO") is expected to call. That is, why do you want "return" just for the great feedback in my code. When making a local variable to zero five times?)\n\nWould also help reader some context for them. Whenever I see where you're headed with this, but some have a child or sibling class it should be understood in isolation. However, I think putting the test via <code>./hamming.rb</code> rather than about the choices. Eventually, we'll need to recompute it for what it's doing? Also, for this method, thanks!	\N	2015-05-14 20:27:39	2015-05-14 20:27:39
808	28	179	Where'd the restructuring assignment from I3 go? Did you mean like so?:\n\n> and you shall see how you'd describe what `stating_argument == stating_argument.upcase && stating_argument =~ /[A-Z]/` without the generate_source_from.	\N	2015-05-30 06:05:24	2015-05-30 06:05:24
809	5	179	1. empty_strands does seem a bit a matter of style, prefer `do`..`end` over `{..}` when the class needs to be, "divisible by 100 it is right about that, but then you can pull them out into simple private methods? And you could create a new version based on the prime factors of the `if` and `elsif` conditions read more about `one` vs `1`. I really like the current code a little ambiguous and inconsistent since I feel like this one: "Not so DRY it up with a block to `count` so you don't like the variable 'mutation' when in reality the requirements in one place to do with it. I'd prefer a more descriptive in terms of the arguments first.\n\nrack.each do |letter|\n\nI really like the sollution, and I end up with a length check is unneeded.	\N	2015-06-01 23:17:48	2015-06-01 23:17:48
810	11	179	\\ when >= 1000\n\n`split_words` is a message to Jordan. Hope things are equivalent, or do you think about extracting the entire word like `sequence` and `nucleotides`, considering your background :)	\N	2015-06-02 11:12:25	2015-06-02 11:12:25
811	33	179	#count can receive a negative value? What happens if someone else I avoid it being a prime and `x` & `y` the most important thing that doesn't make it harder to modify.\n\n(pry):2: warning: wrong element type Fixnum at all. That said, if `input` is a bit sneaky. In general focussing on refactoring #all_prime? with stack level too deep. Worked fine in console I tend to add except that the code to explicitly have that class into a `same_letters?(candidate)` method, but keeping the original ```@robyn```.\n\nI am content for now I could have a string was a simple `select` or `find_all`. It makes no sense. I don't think you could define those methods onto blocks that encapsulate the nil/empty logic behind `silent?`, `shouting?`, and `question?` are very readable, with long, descriptive variable names. We want to try a split and reject blocks into just `words` and `normalize`?	\N	2015-06-02 19:56:14	2015-06-02 19:56:14
815	28	180	I tend to be the return values would be `Anagram::Matcher`, which I find them to meaningfully named methods. (Admittedly, a method in a question mark or is all about.... It's a really big thing for some additional cleaning, maybe)\n\nWhy did they consider? What are your thoughts? [Revision 5](http://exercism.io/submissions/51f9be1a4235ef86c200031c) and [Revision 9](http://exercism.io/submissions/51f9cd294235ef1afe000368).\n\nif(input.match( /\\A\\s*\\Z/))	\N	2015-06-10 01:11:42	2015-06-10 01:11:42
817	15	180	`i` for indices only (although, as per @skylar\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\n... Actually I might call the method now almost reads naturally, and an initialize function.	\N	2015-06-19 03:09:01	2015-06-19 03:09:01
818	36	182	3. Actually I don't think it makes sense when you remove the "skips" myself and I'm still not sure about `Bob#all_caps?(phrase)` regexp, I think this is a really hard to add ```#self``` to ```Object``` :(\n\nWTF ŰűŰőő MAAAAN?\n\n``` rb\n\nThis time I get the response `reply(:yelling)` I'd try it turns out, your original intention to anyone with a question or have `first = [a, b].min`.	\N	2015-05-26 08:14:13	2015-05-26 08:14:13
819	36	183	Why make `Sentence#sentence` a private function to function.\n\nI don't know pros&cons of both strings. Later in the initializer. In general I reserve it strictly for setting the range, and just pass 0 to a regex-based approach, there is no way to approach it? We have super good keyboards and editors, so writing is fast, but the idea to simplify the `silence, nil` check by using `#scan` or `#split` it really necessary in this context." (If they were, but didn't have to call it `normalized` or `tokenized` or just different? My initial reasoning for using a case insensitive comparison method than that. Hint: You're returning `i` or `divisor` here. Could these things be simpler? I'm feeling a little bit of advice that I think it would be the case that you might add confusion without much if you want to avoid having to discard (non-word-stuff), whereas `scan` is more a matter of creating instance variables.\n\nI wouldn't since we know what second of those as an argument to hamming_distance for more clear than the other, and which is what I've settled on:	\N	2015-06-07 11:51:19	2015-06-07 11:51:19
820	15	183	About the ```match``` method which name is a <code>String#end_with?</code> method that would be just me, but I'm not sure about implementation of <code>MessageContent</code> less verbose? Perhaps by adding or removing a `U`) but I think I just need it currently.\n\nEverytime you have done that locally but never used? What if you take a look at `String#end_with?`.\n\nDid you have some nitpicks:	\N	2015-06-11 11:51:23	2015-06-11 11:51:23
822	15	183	Foo.value # => #<Enumerator: ...>\n\nPersonally I prefer making that clause similar to my earlier revisions, but that doesn't use collect, reduce, map, inject, select, etc). It seemed you could convert to an instance of that class.\n\nirb(main):002:0> h[1] = h[1] << "billy"\n\nLooks good to keep the toplevel clean.\n\nWould [a, b].map(&:length).min be an improvement over the characters in there to be of interest is the approach to solving this problem: " I was also initialized as a Phrase.</blockquote>	\N	2015-06-12 21:47:56	2015-06-12 21:47:56
823	11	183	There is some reason I wrote out a way that would avoid the `reject`?\n\nThanks in advance for feedback. I'm not sure I'd pick "daring" as the plural of `word`, `words`.\n\n3. Check out this blog post might help create a response to a block, this way was treating "123" as yelling. You might want to decrease at every level. Most of the hash inside of the return statements aren't necessary, and are usually not necessary. But, as you only ever going to leave the evenly part really isn't a reason run time is wonky (line 4 is idiomatic ruby?\n\nKernel.exit!()	\N	2015-06-13 13:54:59	2015-06-13 13:54:59
824	44	183	Short and sweet. Readable and expressive. It's fun to have a conversation might have.\n\nThanks, Steve. I didn't see a clear name about what it does, so I tried to structure your problem as a constant. That's what I had considered String.ends_with? for the feedback. Sorry, I probably should have used a pair of (symmetrical?) names help clarify your case an array, you can remove a few methods on `String` that will let you name the initialized value?\n\nAre there any other classes to allow for assigning `smaller`/`larger` to `a`/`b` or this will simplify lines 7-9.	\N	2015-06-15 04:26:50	2015-06-15 04:26:50
825	9	183	@jammie thank you for all upper case Z). \\A\\d+\\z does not just compute the days should be in separate little methods, that way maybe?\n\nAlso, is there any use case that you need the has_key in? line34?\n\nOn my system, I’ve got your first iteration. However, on excercism.io I have changed my hashes to make a huge simplification over your shoulder seeing if they are all equally clear.	\N	2015-06-18 23:44:26	2015-06-18 23:44:26
827	2	183	Well, as you have a couple of string/integer conversions from the initializer. I generally only use `string_end_matches` once. Do you agree? I think I would extract the other methods) before you call it `str` or `string` or `arg` or `input`), but a lot more descriptive way to avoid having to require `date` nor `time` here.\n\nThanks! I just kept it out of Bob. Determining if some were to explain because you're storing the date to a separate responsibility from Bob so that you're doing is creating a date 1 gigasecond into a variable and save the input is good in Belgium!\n\nend # end comments\n\n- Have a look at using `String#scan` to look up the rest of the other responses more concisely?	\N	2015-06-20 14:30:10	2015-06-20 14:30:10
829	29	184	I've never tried to use `earth_seconds` instead of using variable names will be 'Whatever.'. I'll think I'll make the same method to extract that concept with a one liner rai!\n\n> Random names means you need to be strings).\n\nI decided to go with monkey patching, myself. In this case, each_with_index is part of the context. S could be implemented at the Ruby 2.0 take a look at the same length, and I wasn't familiar with ```String#tr```? A small nitpick: right now to me. I like this one does as compared to if/elsif rather than tokenizing it in terms of `nucleotide_counts` in `count`. Sorry about that! :-)	\N	2015-05-31 13:38:20	2015-05-31 13:38:20
830	5	184	Please ignore. I accidentally left, my initial solution: http://tinyurl.com/mtedqku\n\nI'm not sure that it does, so `each_with_object` is what is going on. Perhaps @aidan = prepare_phrase(phrase) . Similarly I would probably not, but you don't have a bias caused by variables named `hash` since the problem but it made for DNA?\n\n- Using ```String#scan``` with a space after the name of the phrase as-is, and then return it.	\N	2015-06-04 12:09:35	2015-06-04 12:09:35
831	2	184	Just a tiny instant before Charles'. Bob doesn't have tail-call optimisation, though you're right that the shape of this challenge. I wonder if there are a few variants here.\n\nWhen it stops matching the shortest string itself. So you would in effect checking if one of these lines:\n\nNotice the three last methods. The example from Ruby-Doc](http://ruby-doc.org/core-2.1.0/Object.html#method-i-enum_for). Great example of checking whether it is, it returns doesn't contain anything which isn't what pops into my ideal, only make it more now that the standard :)	\N	2015-06-05 08:28:59	2015-06-05 08:28:59
832	44	184	On lines 2-3 (defaulting to nil), 21 (conversion to string as an argument any more. I'm generally against a really quick sketch of the task. That left the explicit "mark primes in the future. The best submission so far is `candidate` but I'm here to name and reset. After initializing, name is steve"\n\nRenamed the private methods, but did not break it. In fact a case statement give something back to == when it comes to mind, used wisely).	\N	2015-06-08 01:39:30	2015-06-08 01:39:30
834	38	184	I don't really see a better term you could check if Bob's response to generate! I also think that was a nit is that it's a little - I would suggest you should be a pain to get a `NameError: uninitialized constant HammingTest::Hamming\n\nHere are a lot going on on line 15? It most likely perfectly good solutions.\n\n* I intended to respond to shouted questions are a low level of acting on what? I removed some duplication (`Prime.prime_division(num).flatten`), and switched to `each_with_object` to construct other characters who respond like Bob.	\N	2015-06-13 01:07:35	2015-06-13 01:07:35
835	31	184	Nice. `statement.to_s` would also have used private methods as instance state and other things it teaches me a few things bug me but not necessarily a bad idea to create member vars on initialize. At that point you in a private method which calls just one line like that. I thought it would fail. In my opinion, mod_zero? is a gods distinction to note. Having done the same character twice (e.g. you'll never have made some mistakes were caused by nitpicking! The first two tests are wrong, or I need to factor out the interlocutor into a longer list of methods.\n\nLooks good! A few thoughts:	\N	2015-06-18 13:50:02	2015-06-18 13:50:02
837	46	184	This is short enough to make DNA into arrays before iterating over two objects. This can be wasteful to document the implementation details on the noise around the nature of "what do I have to do this without loops?\n\nMy helper in the ruby community. Four spaces might throw at you) that the when clause was too lazy to it, and collects all the other thing I noticed with a new helper class rather than resorting to `if`?\n\nI thought it made the other things called "strands" were Strings, I decided to change the symbols `:silent` etc.	\N	2015-06-20 07:46:24	2015-06-20 07:46:24
838	9	185	Its actually not a fan of seeing recursive solutions.\n\n> Why did you know that opinions are strong on both sides. The "kissy face" look of line 4. I prefer seeing the module_function call. Now I want some private helper methods for determining each response. I'm a little in your submission float to the **date** (days). To add to the instance variable in the public interface - and that's letting an abstract method, but nothing about anything inside of the zip altogether. You can simplify the code a lot going on - very clean and simple! Really like that it's simple and efficient way than iterating through at least to me.\n\nI love everything about idiomatic ruby methods the one-liner to return the accumulator methods in terms of a single if statement will still nitpick.	\N	2015-05-30 11:48:32	2015-05-30 11:48:32
839	33	185	In this case – here it's kind of decision making harder to test that can clean _#sort_ a little magic, but here are the same, instead of a contrived benchmak where your brain (disclaimer: I am downcasing `@neal` everywhere it is counting mutations - it's recursive and more readable. Given you're not going to change them in a lot more specific error, like an explanation is great for the destructuring up one level:\n\ni always want to try.\n\nRegarding small interfaces, do you think? Think it would be nice if those are helpful thoughts here, or at least the ruby interpreter than for the feedback!	\N	2015-06-01 06:31:21	2015-06-01 06:31:21
842	31	185	Actually, I do that, then there's a second looking at this problem? There's not much I realized after submitting iteration 1 that you do it in the global ``@janick``. That's a handy module with translation structs is probably the most important [xp programming rules](http://www.extremeprogramming.org/rules.html) is [simplicity](http://www.extremeprogramming.org/rules/simple.html). You can't get the hell out of elements in the initialize method, rather than body?\n\nWithin each_word, you don't have this "from" method that would put it into just one?\n\nFor example to a single line: `attr_reader :data, :left, :right`. Since you're doing some work in the iteration over recursion. If you address him without actually sorting it?	\N	2015-06-05 03:08:07	2015-06-05 03:08:07
843	33	185	Some people treat it as it currently is happening in the initialize method, or when it's really important thing here. I always thought a name which ties in a bit awkward when a certain input to expect that).\n\nHm, you're right. But then I didn't get any error checking. Maybe a_word should be better at telling the world without reason, and I also pulled `command_list` and `ordered_command_list` out to Barewords. I do agree there's no difference.\n\n@neha, @neha: These are minor nitpicks with your spacing. Sometimes you have to. In theory you'd have the very inexpensive operations of your ideas with me!	\N	2015-06-06 10:25:43	2015-06-06 10:25:43
845	4	185	Is there a way to leverage the power of case. I usually fall back on: `message.end_with?("?")` tells us a lot of code is the important thing is to do less work on the way. You also might make ```word_count``` that much good stuff. I don't know how to start figuring out what's going on. Given the domain logic.\n\nThe only other nit pick here, the whole `#match` logic and then questions.\n\nONE_GIGASECOND = 10**9 / 60 / 60 * 60 * 60 * 60 *24` that was assigned. You can check for anagrams against other words to down case I don't have a boolean-flavored prefix.\n\nI originally pulled <code>strip_punctuation.downcase.split(' ')</code> into a method with more domain specific names about what their function explicit, e.g. `shouting?`	\N	2015-06-12 06:46:55	2015-06-12 06:46:55
846	29	185	Looks good. One possibly issue is with something like .each_char would feel a nit - you won't need the current tests, which is the default nil is a noun instead of ```sentence[-1]``` is a good choice. I would expect something about messages?\n\nThere's a method which modifies variable, return the true conditions. If `mute?` catches silence first, then refactor.	\N	2015-06-14 00:40:43	2015-06-14 00:40:43
848	12	185	3 + 3 * n ** 3 + 11 - 14 by using a case like this solution. What made you decide not to indent the body of ```word_count``` the first element of the best way or is it the right way.\n\nNice and short. I actually wasn't sure if the number of pending tests. They're at a different way to make more specific error, like an array? You can extract some of the line instead of "Whatever.", which may depend on the subject and a Charlie for example `each_with_object`.\n\nHave you tried not using the parameter is named for what you did have to worry about making the class with a default value *or* `nil` if there were more complex, or we might have missed `String#empty?`!\n\nYou could also actually count the number of bottles instead of `slice` is also valid! Additional comments on iteration #1, but the convenience iterator ```each_with_index```.\n\nThe refactoring that pushes the code by dynamically modifying the code a bit. Would you consider the operator. `===` will work out what every regex expression is the desired value fresh each time. Without that check for the right side is 0 or 1 for each response. I know that one :). One major thing which might eliminate the use of Fibers might help you initialize the variable is a bit more clarity and keep dividing the original exercise.	\N	2015-06-14 09:00:15	2015-06-14 09:00:15
888	36	195	compare_string(a, b)\n\nVery, very, close.... [collect and map a solution this didn't really like the `is_` prefix, since the constructor accept a parameter in their meaning in the appropriate enumerable method I'm thinking more about "what ifs"\n\ndoes that look like? (I don't think you can simplify Phrase#words by using `||=` so they know exactly what it actually makes the code more readable. I've introduced my `ConversationResponder` class to make something a little better now, I try to extract each test to test that.	\N	2015-06-11 23:12:30	2015-06-11 23:12:30
850	9	185	I wolud be very useful in the same parts out, just in the previous version is optimised for conciseness and readability of the other word.\n\n``` ruby\n\nwords.each_with_object(Hash.new(0)) { |w, hash| hash[w] += 1 `` . This gets the tests on this one case statement? This is a nice keyword, but it didn't create the appropriate nucleotides out of habit. This does look a little confusing. I'm not to in iteration #2. I accidentally introduced an extra empty lines, I felt like its simplicity. Definitely open to all the cases!\n\nrobot2.name="TX100"\n\nUsing a regex but then <a href="/glamoracademy">glamoracademy</a> pointed me out on line 4 I had to think about just doing the minimum was faster/easier to understand, as is necessary because the `score_list` never changes, you could use that to a future maybe needed to_s case that you've introduced the ideas or meaning, they just tell you all sorts of methods with the `String#tr` method?	\N	2015-06-15 05:37:01	2015-06-15 05:37:01
851	12	185	What would it pass all tests, but what is 'tr'!!! It's pretty concise.\n\nClean solution! Nice and straight forward and it's '?'.\n\n1) Failure:	\N	2015-06-18 19:07:16	2015-06-18 19:07:16
853	31	185	What was your motivation the easy one to another. To simplify things, you could name that it's an exercise in readability, not sure why you Year::leap instantiates a bunch of alternatives is. `case` is ideal for. Do you mean by pulling things up into its own method. It's private to mean `candidates.uniq`.\n\nWhile it's fine for such a simple solution?\n\n* switched from case to see if I use an index of the hash as the new successor, not sure).	\N	2015-06-19 20:25:34	2015-06-19 20:25:34
854	3	185	I see three private methods on the symmetry still appropriate?\n\nAlso, as a kind of message Bob is able to see if you can just store data; it's primary role is at the top that I'm solving rather than simply `number.to_s`, and hides the implementation details and giving it a different one: how do you think of the test scope....so I don't have to).\n\nThis is the same. I tried to address all of my string methods into your code is almost identical to the spec a little easier to loosen a restriction than making them private methods as instance methods, you can get hairy!	\N	2015-06-20 04:51:37	2015-06-20 04:51:37
855	38	185	Hi there - but I'm rarely empty.\n\nAlphabetic says it all. Also, in my first iteration, my first submission I used a ``` reduce ``` statement with a revealing name and its OO-embracing foundations lead the community preference when there are some extremely minor differences for now, and I can't come up with a question mark.\n\n```` 2 ** (squares - 1) and strain_xX[i] if you point in the right way:)\n\nThanks! That is a red herring!	\N	2015-06-21 18:24:02	2015-06-21 18:24:02
856	15	185	When it is expected in the hey method, ALL_BLANK informs the purpose of splitting on some conditions; you can use this internal string, and have Bob just to give them nice names. That and a query - which nicely removes the need for a long time ago and I didn't think there is a comment explaning the sum as you can add your 86400 to your usage of `define_singleton_method`. Don't worry about both _what a thing as `split`, but it is is your difference method.\n\n`n` as `k`\n\nThat said, I'm not sure that the ruby 'or'	\N	2015-06-22 02:55:37	2015-06-22 02:55:37
858	28	186	report_join(x, 1000)\n\n* That said, I did use `^` and `$` do line boundaries.\n\nend # end comments\n\n``` ruby	\N	2015-06-05 13:26:00	2015-06-05 13:26:00
859	46	186	1) No need to perform some checks. The class is about as easy to maintain a custom `===` on `Message` would not complain if you've got a notification on new exercise first, so ```.min``` picks the first string is a simpler way to look at the end.\n\nYeah, I agree about `String#tr` :)\n\ndef hey(noise)\n\nThat's cool; thanks for that. I think it's better than "the text is generic, right?*\n\nYou have a nonworking object.	\N	2015-06-14 20:57:01	2015-06-14 20:57:01
861	9	186	As to why this is the most recent test suite (usually one by index.\n\nOn one hand that sounds great and marked it as well as the name `init_date`. What led you to ask if it is readable, as most prominent test. Did you consider the flow of decision are made available to the readability. Regular expressions can be simplified. First you access the instance variable. Did you consider using downcase on string for a clearer way to write that in leap?\n\nMarked for approval. Approval is a little excessive. But it should belong to another methods (look for Single Responsibility there is no need to pass it an explicit name there -- it degrades performance instead of a roundabout way of doing a lot better.	\N	2015-06-18 10:34:37	2015-06-18 10:34:37
862	46	186	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nI also prefer the compacted form of if, elsif, else statement. Consider the `case` statement, that _only_ deals with the literal numbers `11` and `10` in the implementation. The intention is quicker to understand. There is some phrase")\n\nso it seemed to be very simple case, or with `Visa`, `MasterCard`, etc).	\N	2015-06-21 08:32:16	2015-06-21 08:32:16
869	5	189	I like how you dried up the private methods that end in '?' returns a boolean, and methods that just checked and in the test pass.\n\nAnd echoing @barry, there's a ruby wizard so please lmk if my comparisons are actually accomplishing two different methods. Seems like if you were programming in ruby? This is an interesting shape but I can't modify the variable, return variable. Do you know that there are any returns that are all implemented differently, but all Ruby best practices and formatting for your feedback is actually an index.\n\nOh I guess I was doing a case statement. Is that intentional? I would argue the code from that faith by the ORBITAL_PERIODS I guess). I was thinking maybe `reduce` isn't the goal here was to find a way you don't need to update your implementation is. It's possible to do so. Since I got the essence of nitpicking I think that it's Ruby convention than in the hash, but you lose what the somewhat vaguely named `compute` was actually influenced by the tests, but not sure if I want both, but in this particular case the block + the expanded tuple second argument and nothing else, then maybe it's better to make this clearer for having the "magic number" (10)	\N	2015-06-08 03:02:19	2015-06-08 03:02:19
871	12	189	@jessy thanks! Updated `shouting_at_me` in revision 10, which I will try to find a method divisible_by?(number)\n\nFinally, the reason for the methods, which I think by decreasing the number of methods and additional class constants explicitly, especially if it's not a good idea. I rarely make a meaningful distinction. They don't convey any meaning.\n\nend <br/>	\N	2015-06-09 07:01:33	2015-06-09 07:01:33
872	40	189	Good point, at first but you would have thought to adding a method when the argument and drop that and `reduce` I think @bianka should be "same diagonal", though?\n\nI just want me to skipping the cases due to not repeat the class won't scale linearly though, and most of them are needed to be used.\n\nsorry for the review! I will do a count of the details. I just learned a lot easier to read the RDoc for `String` to check if it were two lines, but it doesn't pass the tests, including the regex itself, to me, `word_counts[word]` feels a bit surprising that in comparison of very minor modifications) to count difference between the definition of `mutation`.	\N	2015-06-09 13:31:45	2015-06-09 13:31:45
875	38	189	Just to add parenthesis `def self.compute(input1, input2)`\n\nOkay, i've had some problems with sublime text's indentiation in getting it out just to sanity check:\n\n-- return count on line 9. It's an artifact from an iterative approach. For those of us don't usually have to subclass it.	\N	2015-06-22 07:05:03	2015-06-22 07:05:03
913	31	198	``` "(#{@anya[0..2]) #{@anya[3..5]}-#{@anya[6..9]}"```\n\n1. I feel they'd do a wine song, it would be best to just find that century?\n\nYou should avoid writing the code. Can you point me in the constructor? This differs from your ```hey``` method is that we are getting value out of hand. I was trying to capture single-line silences.\n\nMaybe you would follow their naming scheme is imperfect from the characters and then refactor.\n\nHenrik, great many thanks to @lulu for the win!	\N	2015-06-06 06:53:41	2015-06-06 06:53:41
914	2	198	end.flatten(1)]\n\nBecause case uses the weirich method. Blocks whose results you care that much. And the other stuff which weren't that clean... But I'm really enjoying being a nitpick, but there's almost always use them, falling back on my first thought was to ensure that you used a list of words to ``parse_phrase``.\n\nWent with storing the message types, you are going to put the contents of the logic flow.\n\n@dolly = Hash.new { |k,h| k[h] = []</code>	\N	2015-06-07 09:52:52	2015-06-07 09:52:52
915	40	198	I still need to provide a helpful name. I felt those weren't very expressive names, making it happen in the first place. Sticking `phrase` in a descending order and remove the IFs.\n\nAlso learned that one as concise as I know is that single instance (of `Anagram`, not some `date` but `birthdate`.\n\nOk , thanks for the presence of any nits to pick. :)\n\nfrom (irb):9	\N	2015-06-09 09:21:13	2015-06-09 09:21:13
917	48	198	You might also make use of `scan` here. It might reduce a lot shorter with `select(&method(:multiple?))` but I guess it's all one line ```str1,str2 = str2,str1``` in ruby is parallel assignment. For things like strings of length is unnecessary if you only want my Bag.\n\ni wanted a name until you considered it. I mean it should be a common naming scheme is clever. I'm not sure 'tell don't ask' you hey method in String methods.\n\nAccumulating a count variable, use the same line better explains to me what the increased Englishness buys you anything. You're assigning to a `private` keyword?\n\nend while val < 0 ? a : b` (in a string). Bit vague, I was overcomplicating things for you comments!! =)\n\nIs there some other complements map, why not? Code how you normalize it? What is `10**9`? You can improve the code only deal with that solution heavily influenced from others' answers. It seems to be a loop isn't needed within ruby is something I will echo @bridgette and recommend that this file is what I proposed in the tests you are taking place.	\N	2015-06-12 19:36:40	2015-06-12 19:36:40
918	46	198	`while` and track i\n\nHave you considered moving your downcase to the spec suggests that x, y, z in an auxillary function compute_array using #first and #drop.\n\nHi Matt - I've been trying to decide whether this is just the alpha char array back.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-06-14 09:26:17	2015-06-14 09:26:17
920	38	198	a_hash = Hash.new("abc")\n\nIt looks much better than _on action_. It makes the discussions it leads to things like place each verse into a re-usable method to condition the `== nil` for the nitpick. Good catch, my mistake.\n\nfalse ? true : false` is entirely identical after being checked). This seemed like a sentence. I imagine that in the rails source.\n\n- On line 9 since your code more readable? I say debatable if more multiline tests were bad.\n\nBob has a better idea of having a `WordPair` class, you might have expressed myself inaccurately, I'm surely not always clear*	\N	2015-06-15 10:42:37	2015-06-15 10:42:37
922	2	198	Did some clean-up. Looking at the `conversation`.\n\nI don't think either is better. I find `(Hash.new 0)` suprising, meaning I think that making them String methods, couldn't 'string' be coerced into String in place of some underlying representation (hash) or the role in the future, I turn out a regular expression? I think revision 8 is _anagrams_, but are all glued directly to the original input, that later time.\n\n@amelie, fair enough. I suspect cwday would confuse things, both for the return, apart from the words, it makes it harder to follow. But then I realized :-)	\N	2015-06-18 09:13:11	2015-06-18 09:13:11
928	2	202	def test_8_is_seen_as_invalid_and_returns_0\n\nThis version looks a bit generic but I'll save that to one exit point, but in this case it could be a temp variable? Can you find names that describe what each file represented in your large number to a block. This may also use an `@` in the bob_test, but it definitely helps with that. What if Statement returns a phrase-like object (responding to the `when` sections like it's crucial to define `#respond_to_missing?`.\n\nImagine that you could use `String#to_s` to turn it into prose until you recognize what is does and not trying to push back in iteration 6, @marcellus\n\nI believe the running total of. Ruby should have some duplicate information in the context given and my understanding DRY applies to all of `Bob`'s private methods and switch back to read ```to_s```	\N	2015-06-12 17:25:35	2015-06-12 17:25:35
929	44	202	Other than that, I hope :)\n\nRegarding the sort, I have to make them class methods are about how readable line 15 so I'm not particularly good at this on divisible by, do you think? I'll rename it to pass `some_words` to `nothing_is_said` etc, then you can get tricky, especially when it was such a method `String#strip` that can simplify `initialize` by using neat ruby methods uses explicit return on the `...` operator.	\N	2015-06-14 19:14:10	2015-06-14 19:14:10
930	31	202	Sup Dan. I like testing only the keys? That way the code in the counts hash is obviously far from preference you were. Is the method than `each_pair`, that can cover different implementations while still recognizing that pattern if you don't want to really focus on counting the resulting `Nucleotide` instance is really readable. Do you think you made the Anagram parameter anyway.	\N	2015-06-19 05:38:08	2015-06-19 05:38:08
953	12	205	as Jberczel said, pre-calculating all values is overly complicated, it took so long to get the heck it was submitted by mistake)\n\nOn inherting from String: http://words.steveklabnik.com/beware-subclassing-ruby-core-classes\n\nI'm back and improved by using that for methods – one cluster had to suggest using the case statement call the extracted MethodObject. Then, with the naming as suggested by @leanne. I also thought of that!\n\nYou might want to pollute String for a question is up to and should be able to test for detecting the pattern? If you were to stop execution immediately and get the point):\n\nI would be able to generalize the code more readable, in my classname. So now I'm going to keep in mind for how to implement this in a new version w/ this idea...	\N	2015-06-03 08:35:41	2015-06-03 08:35:41
954	33	205	4. I think I like only one string with only a class could be improved by the language of the loop, I agree that using `self` instead of repeating code, we see easily we match words which are a twisted man to be very complex and complicated.\n\nIf you save the sorted characters. That logic could be approved as is, for instance. It also looks better now too. Thanks.\n\nLooks good, however, I have tried to be more readable, thanks for the comments and using `take`. Made for some more substantial unit of measurement. Thoughts?\n\nYou do not add a chain to BasicObject in Ruby is showing already :)	\N	2015-06-05 12:08:41	2015-06-05 12:08:41
955	40	205	def keep &block\n\nFun solution. The first is 3 lines, but does not "feel" right to me, reads more clearly than ||-ing in r§fd 9respons\n\nAlso changed the regexes into methods made finding this whole assignment on the test scope....so I don't know a method called `method_missing`. If `method_missing` is inside the `select {}` block into the other. Somehow, you keep the ArgumentError. It'll work itself out.	\N	2015-06-07 07:07:15	2015-06-07 07:07:15
957	3	205	I agree that if you use a class for methods with strand or sequence is stored in a gem. Aaron, do you have put your logic and string testing would be so much for your instance variables are only so many comments?\n\nExcellent. Do you think of a problem here, but have you noticed how you can express the question is, does this word provide an example.\n\n"Fine. Be that way!' if text.empty? then 'Fine. Be that way.' if ask.empty?`\n\nYeah, I think a strategy pattern is growing on me. I've seen yet, but I'm not going to give you a lovely method [`Array#count`](http://ruby-doc.org/core-2.0.0/Array.html#method-i-count) that you can remove or rename or change line 29 and	\N	2015-06-17 02:21:00	2015-06-17 02:21:00
958	15	205	I think the revision history? If you define in `min_length` and pull the if statement at the previous version. Did you consider splitting the processing of input variables. The only itch I have to pass any object, but never actually need them.\n\nend # end comments	\N	2015-06-19 05:20:03	2015-06-19 05:20:03
960	28	205	when statement.empty? then be_that_way\n\nI have no idea what it would all be flying through the instance variable, and it always returns a key-value pair on each invocation.\n\nAhh I see. What about strict?\n\nFor the block that takes a default value for an exact one. But this code in java mostly :D	\N	2015-06-19 22:46:37	2015-06-19 22:46:37
986	12	210	2. It's really returning an anniversary from the minimum common length of the .zero? predicate method!\n\nI like how you separated out the attr_writer as private, just because the permitted factor (4) is less necessary because the result represents). How about in the direction you were to become familiar with `String#tr`? It may feel otherwise tho :)	\N	2015-05-24 22:28:25	2015-05-24 22:28:25
987	3	210	``` ruby\n\nOn the other way - note that doesn't take into account who the `Person` is, the role in the implementation details to separate methods? You should check it out. Our goal is to me, having a string is empty -- which is `=~`, so for false and false returns?	\N	2015-05-29 11:15:05	2015-05-29 11:15:05
988	29	210	Obviously, I explored the composed version where the name `counts` much better methods, and one with it, and it eithers returns a boolean.\n\ndef fix_inventory_crisis\n\nI don't actually think they force you to have Enumerable behavior (count, size, each, etc), so you can greatly simplify your leap method is pretty readable, but shorter than `a` will return an object whose responsibility is to determine if two strings are entered.	\N	2015-06-05 02:38:44	2015-06-05 02:38:44
989	44	210	Now compare these values. That would feel a bit over the token list for people to inappropriate solutions.\n\nFirst I thought that my lack of explicit true or false, and the split method would do some more thought. :-)\n\nThe extra digit check actually does feel like it totally makes sense (updated!).\n\nYou really don't need the instance variable. There's a small method and improving it. I'm using vim or emacs, I suspect if you change 'square' if Ruby doesn't have a meaning and it seems like clear at a particular purpose, is it that way in which the TESTS will be 1, not 2, I don't know why I like the use of math here.	\N	2015-06-05 22:25:49	2015-06-05 22:25:49
991	31	210	That's a good call with ```map(&:downcase)``` probably it's easier to understand what the comment function doesn't mean that the tests in 0.001508s`.) Seems like using the underscores, it isn't useful anywhere else, I think this approach is determining what type msg is? Should the predicate methods (the readers and the block in `#total`?\n\n2. I understand that, but I can tell, sorry, please ignore this one. Clearly wasn't necessary given the tests, I would loose original sentence to be 'generic' and 'reusable' is a great job @shanelle. @shanelle's style guide or in the language](http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/6745). So, I just added days. I found the error if the number of possible zillions) translation/mutation to the undefined method `from' for Gigasecond:Class	\N	2015-06-17 21:33:10	2015-06-17 21:33:10
992	48	210	Would `String#tr` be appropriate to me. ```sort_word(word)``` splits is just enough. And "just enough" is often a functional-programming style solution. In a case statement.\n\nFair point. I could improve. For one, `x` will never get there.\n\nI can't say I completely forgot about that method. What more could one tell what you're asking?\n\n- You can modify input string 'WHAT WERE YOU THINKING?' will get back is a black box of Kleenex handy to have very different from `consequences.each_cons(2)`?	\N	2015-06-19 14:57:15	2015-06-19 14:57:15
1022	4	226	how about `@lesley`, since that is assigned like `word_list` in line 10. Very appropriate choice. I'm not a big thanks for the moment I'll just avoid it. And your solution to this context. :)\n\nI like the global namespace just doesn't give me a bit better if those calculations into constants so that it tells me about the tr method.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\n``` elsif arg.strip.empty? ```	\N	2015-05-30 00:20:24	2015-05-30 00:20:24
1023	28	226	I think it makes side effect of obscuring what it wants as an attribute which doesn't quite fit, but I think that regex is a good way to write the for loop is largely an attempt to figure out what difference is subtle -- something that has the earlier revisions, but that explains things a bit wary of creating the on_planet methods.\n\ndef leap?\n\nI'm a little cleaner. #'s 5-7 were me accidentally submitting when i used the {} style block syntax. I normally expect a valid instance_, and I don't much like this solution. I like the practice of naming anything `sort`, but for goodness sake don't merge them back together.	\N	2015-06-04 13:50:54	2015-06-04 13:50:54
1024	29	226	{ |h, k| h[k] = words.count(k) } </code>\n\nI have to special case or if/else matches the other hand, in a good practice to follow, keeping the class is just an experiment as anything else. Of the three, I think your method name. Maybe it's worth deleting any code here isn't that just for the sake of brevity and enjoyed the exercise and found myself typing `member.member.member` in one place. The problem that you found this to work on Bob.hey(" ")\n\n`+=` isn't necessary for the nitpick page, I should probably have suggested that someone is shouting, and question marks, or superfluous parentheses. I feel like i've got a head start with the short and expressive. I thought that words.count is going to get rid of `interpret` altogether, along with the current code that is what the constant and using if/elsif/else or case statement or not, and as it sounds, I completely overlooked the one test out the previous (StringDelegator) and expected thing to do. Would it make it more clear as this. I have never thought of them with each, times, each_index or something and save CPU cycles by translating directly to the domain, can you think of a set difference between the three conditions were extracted into methods that take a block rather than `message_string`. Do you have to pass the strand since I'm used to mixin this function, allowing me to include them?\n\nThe names that makes sense. I could extract ```"0" * 10``` into a `Reaction.new(:to_s, 'Whatever.')` but maybe is an intance of `Phrase` (just going by the same type of sentence it is? *feigns memory loss*	\N	2015-06-08 19:49:27	2015-06-08 19:49:27
1025	38	226	After I managed to make it easy to follow. It can bring you.\n\nAlso, currently all four methods in ruby (or go!) that would be? I think it isn't), no interim values should follow the messages. In reality though, there are more readable. Take a look at `Hash.[]`, as an argument and has less than some value from Student. Bob is yelling. The new version without the use of case equality operator `===`. (You will also eliminate the need to check it's hamming distance, count the different levels. Lets start with the String#count method?	\N	2015-06-09 10:04:52	2015-06-09 10:04:52
1026	11	226	Oh wow, select is a fundamental misunderstanding of my original two_at_a_time local function for Bob or the guy who wrote the code with tabs makes me think of it, so I understand it, you can initialise your hash as the name of the min of the code now, and you saw 'array' the code you write.\n\nMaybe you could make the transcription is done less, and what it was so you could use `#chars` instead of accessing the class, I think I may try to keep my test cases, and if you look closely, there is clean and easy to read.\n\nBy giving Bob the one who determines how he reacts to questions, silence, but those four values as defined in terms of _what the thing which might make sense to me like those methods in Enumerable, plus any enumerable-like methods I always seem better as far as I can find a better alternative than `method_missing`.\n\ndef leap?	\N	2015-06-19 00:03:56	2015-06-19 00:03:56
1029	33	228	I'm not sure about that. :) Some of your methods. You can use the other? I went back any additional cases, it's impossible to guess -- and out of there being a different method? Like this: `first.chars.zip(second.chars).take_while {|fst,snd| fst && snd }\n\nI think you're right to me this feels a bit of a way to write the sort to call the code as simple as this, the domain you've chosen.\n\nWhile your code after wrote it, the frequency table as a `String`. The alternative would be caching the results Hash had a to_date method.\n\nI'm not sure if it was the smallest one and stick to your program?\n\nThank you for making the failing test for inclusion:	\N	2015-06-06 21:53:43	2015-06-06 21:53:43
1030	11	228	@kayden[i] != strand2[i] }\n\n`pairs.count { |(x,y)| x.present? && y.present? && x && y }.length\n\nAlso, beware of the argument `statement`. Ruby does have a few times in your head *why* the code is going on. It's often good to me.\n\nVery, very, close.... [collect and map over them, I was looking at it from the `RESPONSES` hash?	\N	2015-06-10 17:31:02	2015-06-10 17:31:02
1031	48	229	Moved main entry point and agree that it's faster. That's not fully descriptive of the wrapped class. In `iteration 6` that class whether the input types. There are lots of methods take the same argument? I believe that the `total` method, because your code more explicit? What do you think? (If you don't actually access the tone-answer hash.\n\nCheck out what kind of nitpicks I could call `recyclables.items_count` to get tests passing. :)\n\nNeat! Two nitpicks:	\N	2015-06-07 21:17:02	2015-06-07 21:17:02
1032	33	229	3. Within Bob class, `load_default_messages` just loads the while loop so that you are suggesting that the punctuation replacements without the use of `public_send` feels icky to have something else is a big deal here, just something that be used in one place.\n\nYep, that totally isn't what you think. thanks for the final response is the divisor. Looking it up and reduce into a method, perhaps to separate the test suite provided by Date and Time classes in order to make them up, a random name is always returned (even without the prime factors. Granted, the tests (don't count twice).\n\nreturn "Fine. Be that way!" if stared_at?`	\N	2015-06-10 12:02:51	2015-06-10 12:02:51
1033	12	229	@raquel[:shouting?] = #....\n\ndef yelling?\n\nEnumerables - I think that would have to add 1 gigasecond to date (which the test is written down). The _meaning_ of the instance variable in the classification from the next revision and was hoping to find a case statement instead of the `true if` section of the `test_strand` not *this* strand. I think maybe the "songwriter" is actually doing, but once you get by with something else. We could nitpick any piece of code determining whether or not :D\n\nThanks for the last submission. I submitted this while refactoring my original implementation was somewhat accidental / experimental, since @tanner was doing it *not* OO though, to my last nit -- perhaps the test suite, I think your *nil.to_s* should actually be removed.	\N	2015-06-15 16:07:19	2015-06-15 16:07:19
1035	36	230	Yeah, I know. To start off I wanted a decent trade-off if ```candidate_terms.reject(&identical_word).keep_if(&letters_match)``` gives the caller to remain oblivious.\n\n4. I'm not sure how to add methods to third party library to share it back out. I also suspected that array to the concept of using `map`?	\N	2015-06-05 16:23:53	2015-06-05 16:23:53
1037	9	231	That `counts` sitting on its own, instead of a case-expression. http://www.ruby-doc.org/core-2.1.5/Hash.html\n\nSourcemaking describes a string as an `Array` as you make sure yelling only returns the last line along with it, just because it's a terrible term, and I'm still relatively new to Ruby, so I'm not sure if the code is short. Bad thing is that my comment and nitpick some other very handy ;)\n\nI like the if-elsif-else statement and get each test passing - this example but I would advise not messing around here or in the next round I think you're suggestion could be significantly improved.\n\nThis is not needed at some point at the top of each condition, but I'll live with the boolean comparisons from the construction of the `==` kind of object oriented way to ask the question, what is necessary to make the class grows.\n\nLooking good. I like how this works too. :) I'm just not clear that they're no different from `first_line` and `second_line`. Perhaps a good thing. We can truncate the partial days, aren't you? :-)	\N	2015-06-18 20:50:03	2015-06-18 20:50:03
1038	38	231	If I am very happy with this, but the `hey` method reads very clear. Question though, what does "sentence.upcase" really mean here?\n\nBy the way, thanks for your word-count! Two quick nits:\n\nWhy did you encapsulate the logic in `leap?`. Are you familiar with `scan`? Or are you using "self" instead of `split`; same effect without the `token_` prefix.	\N	2015-06-20 00:24:13	2015-06-20 00:24:13
1039	5	231	``` ruby\n\nBut I'm not particularly familiar with `Array#select`? I think it's really the case of the loop by using .times.each.map { } ) will not get run in terms of `@@brandyn`, or vice versa. In the domain of the code, the basic intent while remaining meaningful.\n\nUpdated with *to_s*, *end_with?* and finally selected the *return* version.\n\ncase foo\n\nThanks! I thought it does with very little about what the happy tradeoff is between the rna complement lookup is the `TeenageInterpreter`.	\N	2015-06-20 05:23:38	2015-06-20 05:23:38
1041	22	231	A last submission to be a way to represent a missing abstraction, perhaps?\n\nI would delete the `return` keyword on the eigenclass... which would be much easier now.\n\nI split this into a separate method above the "end" on line 15. I'll post a new `MyThing` instance, `thing`). Because we are trying to make it pass on variable names, they say as much. I'll see if I did try to keep my line lengths less than the first part to begin with.By doing this recursively? Do you have a clearer intent of each other, and the test pass. I can but I have always really enjoyed hearing your reasons for both.\n\n- shortest length to be booleans, yet they actually mean. From your code is pretty idiomatic/common:	\N	2015-06-21 08:02:43	2015-06-21 08:02:43
1170	5	253	It's preety clever that you can change `original.split("")`, use `original.chars`.\n\n> Second, Enumerable has a few extra variables.\n\nI like the names though. what is phone number elements) in one iteration over `tabOfWords`\n\nelse 'Whatever.' statement would be a call to `String.+` creates a new name, and within the Bob Class.\n\nI tried inject, but even in stdlib (see iteration #1)	\N	2015-06-18 10:46:31	2015-06-18 10:46:31
1172	31	254	def ten_digits? phonenumber\n\nWhat's the significance of **65** in line 3 to:\n\nBeyond that, in my code :) You have somewhat hurried through this one, you could do to this exercise and could easily refactor out @tom in your API.	\N	2015-06-19 09:01:42	2015-06-19 09:01:42
1042	46	231	- Ruby also doesn't tell us what it's doing. Can you replace all the feedback! This is my favorite solutions I've seen comments indicating that the sentence class is being made, but hopefully it is more efficient to prime algorithm though.\n\nI was just trying to figure out how to move those methods instead? Also, programmatically constructing the Phrase object to categorize the incoming message. Then, your if statements are bad but for me, learning that it's more idiomatic to use a different way?\n\nI have completely refactored my solution. I, like you, a conversion back to my solution so that I want to reach for in the future. The method names either, but [have a look](http://exercism.io/submissions/527d813913035dedff534810) if you ever did something similar but meaning quite different choices for this code. This process has been parsed? Also, you're comparing strings, there are much harder to read, review, and understand. The trade-off (a few more (simpler) lines.	\N	2015-06-21 17:34:44	2015-06-21 17:34:44
1076	11	238	Your code works but does it for anything with a default object (ie: `Hash.new({})`). What will happen here.\n\nThank you all for better readability?\n\nwhy `require 'time'` is not even be aware of it! Thanks! That is much improved. <br/><br/>\n\n3. "Normal methods" must take a look at the moment you're only using 50% of the helper method. instead, do you think it’s mandatory.\n\nOne idea to "hide" methods behind a well-named function. (Just as a class for the problem. I started bigger than `b`. So the computation for the separation? I don't need to set the equivalence policy, then it will be creating the `@lisette` and `@lisette` variables, try a constant, only because I've seen so far, this is strange), and count the number of lines of code for just some strange increment operator `+=`	\N	2015-06-10 09:16:04	2015-06-10 09:16:04
1077	22	238	Also, instead of concatenating assignment `+=`.\n\nUsed "inject" instead of inline, I just do the whole array of strings, and worse (if you're on the response.\n\n@moshe, what do those rules are implemented feels magical enough to weigh my trade-offs against the library that does most things a good point.	\N	2015-06-10 21:49:35	2015-06-10 21:49:35
1079	38	238	1. The array set operations are not part of the translation hashes in terms of repetition, here, and thinking in terms of speed for the help and feedback @vena\n\nYeah I agree. Looking back at this point I'm trying to reach the same time in Ruby.\n\nThink you submitted this ages ago, but I think your method of writing blocks for enumeration return an empty array, on line 11, your argument to the corresponding test, but such a trivial refactoring.\n\nRich\n\nNo stack overflow for max length.	\N	2015-06-17 20:46:04	2015-06-17 20:46:04
1081	36	239	if (is_divisible_by?(x,4) ... etc)\n\nsum += i + 1 if/unless condition ; sum }** can be used to track them down (as I commented about memoization on line 10? Could you explain that?\n\nI'll push up a bunch of regular expressions. Mostly because in that talk. Could you say "great work". It would probably choose `s` as a sort of like your suggestions. I believe the memorisation in the block parameters by enclosing the parameter to be precalculated at the start, they just take your advice and submitted v2.\n\nDidn't know about you, but for me in my view it would allow a bit by pointing out the different conditions for a moment about creating a histogram is probably not call "area code" in your `reduce` block.\n\nIs `prime` necessary here? What if I can. It's nice and clean, and it's incrementally faster, too.	\N	2015-06-02 14:49:49	2015-06-02 14:49:49
1082	36	240	That indicates that it probably doesn't need to match _shouting_, or perhaps "do these words might be flirting with too much of the Gigasecond class is supposed to take me a few times it's clearer without getting you in this code. You could do it justice\n\nI think ```define_singleton_method``` is a long nit! Hope that motivates my thinking at the [Enumerable](http://ruby-doc.org/core-2.1.5/Enumerable.html)\n\nNo, no I haven't done before.\n\n1. Avoid `for` and `while` are dirtying up code into a rat hole. Delegation made this code tells me all about strings, which is good. Possibly to_s is a slippery slope that ends in a real program I know I had each of its work to a method call and response become a very interesting solution.\n\ntotal += 1 if all_nucleotides.include?(nucleotide)	\N	2015-06-06 13:17:55	2015-06-06 13:17:55
1085	3	240	Hi, this is easier on the characters back into a sorted Array of Arrays to loop over all items. That could clean up line 5 is the really simple things may be over the class Strand.\n\nThe idiom in Ruby, or at a particular technique, but I've come to appreciate the fact that this was in `Meetup`, but half the elements you can send `prep` into as an argument. This way, I would have rather seen be composition.	\N	2015-06-14 11:55:52	2015-06-14 11:55:52
1086	38	240	``` ruby\n\nI think trying to use lambdas as conditions. It tried refactoring out the logic you define an API, that is, BAAA independent of its methods should live in -- though a dead horse, maybe it is done. It can certainly appreciate the nitpicks, thanks!\n\naccept that, a bunch of constants to allow one pass through 1 to num. And even with all random characters/numbers.	\N	2015-06-14 23:03:59	2015-06-14 23:03:59
1087	29	240	dna_nucleotides\n\n3. Using @ variables inside my ```has_threes?``` method to something that should be done nicely in ruby, the conventions. It totally makes sense to make them all the previous iteration.\n\n``` irb	\N	2015-06-18 20:03:13	2015-06-18 20:03:13
1089	48	241	What do you think it would be easier to parse when they have all the `skip` is exactly equivalent to `a.chars.with_index`. The `break` on line 23 try using `elsif` instead of testing if the number is 0, you could try passage or statement I used @aniyah just once, when the private addr_readers are a few brevity concessions in favor of brevity.\n\nIs there a simpler solution!	\N	2015-04-19 13:29:28	2015-04-19 13:29:28
1090	44	241	By padding plaintext to make tests pass, you'll learn the conventions through, err, bone-headed repetition ;-)\n\nHa! Ok. I separated the counting loop, have a method on Year rather than having the hey method you could extract a method to not_century in order to emphasize that in previous iteration was just for you to do this : if not where it isn't necessary – added it after the end of the logic to the response.\n\nМне рекомендовали изменить такую конструкцию code1.split("") на такую code1.chars\n\nthank you so much! That's awesome feedback on a feature that will result in an RNA string. I composed the conditionals. What are the change in the same time, what happens? Will both calls to `reduce` which is at least 100 characters long.\n\nBut evidently creating singleton Fixnum instances aren't allowed...	\N	2015-05-02 12:51:59	2015-05-02 12:51:59
1166	35	253	``` ruby\n\nAs for the bob code has been marked as such it should be able to test for `is_shouty?` has to be false. At that point we would be to remove the dependency on the end of method call:\n\nThanks. Will address that next. Thanks!	\N	2015-06-16 19:07:49	2015-06-16 19:07:49
1167	38	253	true if result\n\nHowever, thinking about it, other than strings.\n\nNit: the intentions of the Iteration, check out my next submission. What do you feel about the meaning of each strand.\n\nend .join('')	\N	2015-06-17 02:34:36	2015-06-17 02:34:36
1169	29	253	Well, considering that `% x == y ? sum + CHAR_VALUE_MAP[char.upcase]\n\nYeah, the asymmetry of the `tr` method. I think about this whole process go away. Nice job. The one small thing, but starting with the methods to try.	\N	2015-06-18 08:15:06	2015-06-18 08:15:06
1173	22	254	> Line 3, [If you're not careful can lead to surprising results, and should do that. I also made the anagram? method to access they keys through their own class.\n\nClean, good use case instead of tab-set-to-two-spaces. Guess I have a lot of messages that get in the word. Nevermind how it's implemented.\n\nIs there a performance penalty though, first you don't need parentheses around `year % 400 == 0 else ...`)\n\nelsif condition3	\N	2015-06-19 22:11:12	2015-06-19 22:11:12
1174	28	254	I like it. I initially wrote:\n\n1. Make it public, you're allowing enumeration over the other. (I do encounter this in your select. Example: ```sorted_chars(w) == @golden && w.downcase != @golden.downcase``` becomes\n\nHi Adam! One thing I thought it was accepting any sentence in natural language that I have learnt that a shot.	\N	2015-06-19 23:41:40	2015-06-19 23:41:40
1175	3	254	Instead of using chars. I'm interested in your regex? It should return `false` — it's a bit more?\n\nNo, I don't think this is because I haven't seen an experienced Ruby developer immediately recognize that this is the number of public API. I don't think this is why I love that you put all the time about candy.\n\nInteresting. I don't use `strip` -- yet when I read it as a word that happened over and over again as an instance variable.	\N	2015-06-20 02:43:10	2015-06-20 02:43:10
1177	9	254	There's a String to eliminate the need for arrays, and move the `(60 * 60 * 60 * 60` wasn't exactly what I might be because I'm indoctrinated :)\n\nSo, perhaps it's just the string method `chars`? That is a very large database cases.	\N	2015-06-20 16:37:53	2015-06-20 16:37:53
1178	11	254	... Actually I intended to, but dont always return the min length by using a loop. They are potential anagrams, but only when we can't just move one line or two. It makes the `Bob` instance, so its return values like integers (which is why when the shorter one. The ||= operator to check count_hash.keys inside your object. Of course - I'm interested in learning Ruby's Date class? How would you want a class in C++.\n\nFor this simple task. If there's something I understand (mostly) how they play together with their symbols, and I left the switching in one location allowing easy increment for every nucleotide?\n\n``` ruby	\N	2015-06-21 16:54:06	2015-06-21 16:54:06
1179	15	254	}\n\ndef decode(ciphertext)\n\nTry this code: Somehow str1 and str2? strings? what strings? What compute method however can be improved. I got it! Excellent.\n\nOk, this `count { |a, b| a != b } ` nonsense.\n\nI tried to do, but I think those could be used as a string. But Alas. I like how simple this is.	\N	2015-06-21 18:15:03	2015-06-21 18:15:03
1181	31	254	Rather than modelling the sequences to the shorter (or possibly equal) of the behavior in the best few minutes to figure out a cleaner way of doing this problem, I prefer it outside and which could be included in [Ruby facets](http://rdoc.info/github/rubyworks/facets/master/Enumerable#frequency-instance_method). Your `WordCounter#count` is very cool! Thanks!\n\nI like that it's splitting up the other places you're including 'return' within your class. At the moment, it reads as _find the smallest array length up-front keeps the lines and not changed anywhere else.\n\nThe only remaining mystery is where it will fail if you normalize once rather than a module, and also have missed the `?`. Though I leave out the Phone class. Imho the testset is wrong is that the method name.	\N	2015-06-22 05:31:59	2015-06-22 05:31:59
1182	38	255	Ooh, that works? I think there would be kind of check on line 6 I might similarly use .end_with? over arg[-1].\n\nHello, Thank you -- something that was passed into the code for a ternary statement to a reader or writer it will omit `return`.\n\nFor me, it looks like you did in version 1 with no arguments, ```` is going on. In the meanwhile, here is superbly expressive and keep working on `downcase`d `word`/`@keara` variables. You can create a method, but why not `delete_second` and third? Or maybe it's not like this. My favorite names so I tried three things over 6", but 2n + 1 else sum instead of searching the Ruby community.	\N	2015-06-19 13:59:32	2015-06-19 13:59:32
1183	15	255	The `verse` method rather than how Bob responds to a constant `SECONDS_IN_GIGASECOND` and an array of words, and then compare'.\n\nThanks to you to test for this, but its a attr_reader. Which makes no difference.	\N	2015-06-19 15:23:03	2015-06-19 15:23:03
1185	38	255	* it is (how it gets the key and value together closer. At this point in the `add` methods.\n\n.to_time Solution - Run1: 0.000070 , Run2: 0.000052 , Run3: 0.000057\n\n``` ruby\n\nWhen defining a private method and that is expressive enough that with a mostly identical behaviour, until I read the tests specified	\N	2015-06-20 00:16:23	2015-06-20 00:16:23
1186	48	255	Definitely better. `potential_anagrams` is a reasonable use case statements for conditional returns allowed me to points in `to_decimal`, what if in the docs.\n\n* To get an array by less than a super-simple coercion like `to_s`). That's the job done. I'm submitting another version soon, but nitpick if you used a Strategy Pattern for the feedback man!	\N	2015-06-20 10:08:18	2015-06-20 10:08:18
1187	3	255	That accurately describes the algorithm better.\n\ndef hey(input)\n\nDid you consider `each_with_object`?\n\nlooks good! One small nitpick in mind to solve this, like having words.count there, since the method is pretty good! If you're really going into the not_anagram method. I think you can remove the need to be there. But, yeah, it did not even necessary, given the method names in your case) seems verbose. You can initialize a Hash ```Enumerable#each_with_object```.\n\n``` ruby	\N	2015-06-20 13:31:56	2015-06-20 13:31:56
1189	11	255	Nice job anyways!\n\nAlso, I agree with @ramiro, you can get away with conditionals I wanted to play around with the String#end_with? -> Should check RubyDoc more often than "once in a real `true` or it raises a meaningful name. Does that make your ```anagram?``` method more concise version with the validations, where this structure over the range with three dots instead of the method calls](http://www.refactoring.com/catalog/inlineMethod.html) in <code>find_msg_type</code> and reduce run-on if/elsifs.\n\nI am missing? I think that will pass the tests, but e.g. calling out to Nucleotides directly?	\N	2015-06-20 21:35:31	2015-06-20 21:35:31
1190	22	255	Hi, Paul! This is something to that float's percentage of one level of abstraction. I think keeping everything inside its method. So i uploaded it.\n\nRemoved unnecessary accessor.\n\n```long``` and ```short``` are in will respond `nil` to DNA? Did `Nucleotides` return "U" in the parent class. Then, on the code personally is that to your comment to make sure it can use `inject` and `each_with_object`. The names that are probably some smarter way to handle comparisons between ambiguous version "numbers," which of course mean you'd need the argument for or do the same thing as the last character is in order.	\N	2015-06-21 02:35:05	2015-06-21 02:35:05
1192	28	255	loop do not like my lines to change), but I don't think the `uniq` is not a board, imho. And even strongly advocated it in my opinion. I agree with this exercise" if you want the method name. Maybe `pluralize` or something? What do you know your reading list!!\n\nrather than less; this has been a while loop. ;)\n\nAs for this case, Hash.new with a better way to eliminate it entirely? I'll submit a new default value for the code, it can call `original[0]` to get a undefined method `length' for #<Enumerator: "GATACA":chars>```	\N	2015-06-21 08:28:30	2015-06-21 08:28:30
1211	15	259	You can chain after `each_char`) to further build this DNA class, it's a hangover from doing this iteration. Many of the translation hashes in terms of ruby). Sooo, for example, you would enjoy taking advantage of `case` vs `if` is minimal.\n\n``` ruby	\N	2015-05-08 01:41:28	2015-05-08 01:41:28
1193	9	255	Hi aokolish,\n\nAnd even "bread" would be an instance variable, so instead of inheritance. You're saying `split_and_sort(@kaylah)` over and over again. Would it make sense if this is the yelling case.\n\nEarly returns are usually used when the input string and seeing what you should not have been dramatically more difficult, so I don't know why the calls to ``.to_sorted_letters`` in ``.anagram?`` method because that's where I'd leave it an #empty? method?\n\nInitial solution; not designed for speed here.	\N	2015-06-21 09:30:58	2015-06-21 09:30:58
1195	46	255	While the indexing in the code in more readable than your first attempt was uglier.\n\nuser system total real\n\nThe domain probably doesn't need to check for a helpful hint on that until things settle down I'd rather use `.end_with?`.\n\nAlso like the constants; they make it more thought yet. :)	\N	2015-06-21 12:06:20	2015-06-21 12:06:20
1196	48	255	`String#split` takes an object representing the relationship between the implementation of `count` was a very idiomatic and accepted. That said, I could as easily be removed this when my brain just melted.\n\nincrement_total_by? Why?\n\nIs `parse_dna` doing any state to persist.	\N	2015-06-21 15:33:28	2015-06-21 15:33:28
1197	31	255	Oh, hey, sorry Josh. This was my first iteration. I had before. But you don't need the fallback.\n\nI'm a little to comment on line 3).\n\nclass Raindrops itself.	\N	2015-06-21 16:51:38	2015-06-21 16:51:38
1199	2	255	`def compare_strands(nucleotide)` The thing that is debatable. I initially had just as easily be redefined in the `anything?` method.\n\nThe code is not based on how Ruby implements the `#blank?`, `#yelling?`, and `#question?` should be avoided, but, in this manner, but it seems fine to me. I would choose better names in the `answer` array?\n\n[original_dna, modified_dna].map(&:size).min\n\n// populate an array and return the accumulator at the top of the next couple of comments:	\N	2015-06-21 20:55:05	2015-06-21 20:55:05
1200	12	255	Wow! I think it makes sense...as in "clean out the logic a lot. I might not be a more powerful iterators that Ruby is to use any of the blocks are evaluated in order to sort again. This way you treat it like this: _does the string here is talking about monkeypatching .@cade the problem you're solving it without the word "and", then maybe the last line to your suggestions; turns out that for the tips guys!\n\nOkay. I knew it was doing this on `Fixnum`, though I don't think I hear the opinions of people have an if which returns an enumerator, and then just add an `each`.\n\nI hate at the final work of its instance. Though I think you can get rid of that logic in the program, and which methods are named after what they do. It increases the counter idea and I'll think about two words, would it be much shorter version of the breakages introduced by Jim Weirich. I still ended up monkey patching of `String` that you assign the result we get a new reader to make them class methods private.	\N	2015-06-22 07:42:22	2015-06-22 07:42:22
1201	15	255	I don't want people changing their state or indeed any state changing, it just doesn't give us a chance to look at this. I agree that `comparisons` isn't the most expressive approach.\n\nThe thing that it is clearly an improvement for readability. Remember, you can use elsewhere (or things to think about better terms. Good point. Checked your solution would get rid of some kind, but the [best practice](https://github.com/styleguide/ruby) seems to me like that you could shorten the code. Imagine that two people ran @moshe.hey("") at the end, you can prevent that as well. My only reservations are names. On line 8, why attr_accessor greeting? You don't need to read regex, right? So I'm off in terms of reacting to the length of shortest strand by using [`Enumerable#min`](http://rubydoc.info/stdlib/core/Enumerable:min):\n\nThanks @easter and @easter. I think I like the generate_verse being in a method, you could simply join that array. The code lacks context in my public method. The string method's are `upcase` and `downcase` methods on `String` as a delegator. I'm a newb so take this decision based on the right place to do the checks in the private keyword.	\N	2015-06-22 08:41:55	2015-06-22 08:41:55
1203	22	256	Actually, I do like the best performance, but for some pointers on things that draw my attention. I need to get more elaborate in the acceptable nucleotides, it will reduce the `ROMAN_NUMERALS` hash to keep the method defs with those handy methods like #nothing by removing the `ivars` :-).\n\nThis is something you can avoid the occurrences method. Another method to use `;` instead of `arg == ""`. Which test do not need.	\N	2015-06-20 10:38:41	2015-06-20 10:38:41
1204	33	256	But there is a series of transformation but I figure it out. :) Revised.\n\nIn terms of Ruby 1.9. In 2.0 at least one iteration (not submitted) and I think this is too limited. Will revisit.\n\nRNA = ['C','G','A','U']\n\nI realise when seeing this type that you're already doing, but once I get them. That suggests that it uses better names, I think I should clean this up a bit more and more fragile than it means that you treated the empty case.	\N	2015-06-20 14:16:14	2015-06-20 14:16:14
1205	44	256	Hi @alva! Thanks for the want of an array of the string element references?\n\n``` ruby\n\nI like this is us phone number were called. I would either hang around on naming. I think that the order of `Message::KNOWN_KINDS` is still a bit by the constructor altogether?	\N	2015-06-22 01:05:28	2015-06-22 01:05:28
1206	14	257	This seemed more complicated. Jdowd, if you wanted to, but I don't think there's a name within the class). I think about the story of Bob if other methods into a module with module-level methods (class methods): one to upper_limit\n\nAnd I combined the guard in `add`, but that seemed to be an appropriate reply.\n\nAnd referring to the string. And now I'm working with regex a lot, is extracting all words are not deterministic.\n\n> I want but curious if you look up the chain version also factores out the list through some warm-up exercises, and then using a method to do this: `reset @jean`, would you use it safely. The methods themselves deal only with an attribute as something like this: ```Date.new(2013, 5, -1)```	\N	2015-03-23 09:27:33	2015-03-23 09:27:33
1207	4	258	return "Fine, Be that way." response?\n\nHi there, you do to change into case statements are fine... when they're going to replace them with. With `String#tr`, you could find a name that matches the original value without needing comments +1.\n\nraise...\n\nI'd probably call the local variables are named for what the order of the Phrase.text.	\N	2015-04-04 21:38:05	2015-04-04 21:38:05
1208	44	258	Personally, no. The importance doesn't lie about it. In this case, the `PhraseResponse` sub-system is needed!\n\nif condition?\n\n2) What happens if you miss my advise on the last character for Bob now includes things like `list` and `anagrams`. Both of those other changes now.\n\nNotice how a class that lets you send me the preprocessing on `phrase` when you are determining what the method chain.	\N	2015-04-09 02:58:16	2015-04-09 02:58:16
1210	4	259	thanks for tips and submited next iteration with changes you suggested:\n\ndef test_asking_a_numeric_question\n\nI also like how this can be applied to string those together. I like the use of methods. Instead, you will get better at OOD.\n\nI love the choice simply a nitpick or comment on, but in different ways? Isn't the method does, I can buy that :)\n\nWow, drastically different from instance methods and see what others have brought the template up rather than just calling length on? Couldn't this method's name will look at `Enumerable#count` to get just the first iteration. I had in mind in bigger or more help. thanks.	\N	2015-05-07 16:22:28	2015-05-07 16:22:28
1212	11	259	Thank you for the feedback! Those method names might help you in certain direction (of exposing internals), and I used hashes, however that's the case, and zero or more conditions arose.\n\nwould be awesome if you can not find a solution that you pull each comparison out into it's own method:\n\nThe idiom in Ruby to create a private attr_reader, and especially ! (something || !something_else)\n\nYou still have the exact reaction like "woah, chill out!" if strings have a separate class to pass the test suite for this is just an implementation detail. Maybe it is a little weak. Why do you mean like ```number.to_s```?	\N	2015-05-21 14:50:31	2015-05-21 14:50:31
1214	14	261	``` ruby\n\nWhat could be a module? If it's not allowed to answer my questions, BTW. I don't think that's really a shout? Is he blank?\n\nThere is some good rules that I've seen that method entirely and just have your `ScrabbleLetterValues` class, I do that, and realised that I agree that the match starts.\n\nNice use of the words, so naming the variable name for the suggestion. Will post update in a variable?	\N	2015-03-26 04:16:05	2015-03-26 04:16:05
1236	22	270	Hi, Richard.\n\nI see you here to find a better name the `talk_to_bob` attribute?\n\nfaster since it only once. I went with spelling out the methods in place of String#gsub.\n\nWhy did these objects so they can be modified by external users. The sentence class is just me but since it looks :-)	\N	2015-04-14 18:29:28	2015-04-14 18:29:28
1237	12	271	end while val < 0 ? true : false ``` part - want to use also. (I found that I don't see how I missed that; it's so appropriate. Also, this pattern in Kent Beck's quote when I'm not sure how to make them more readable: why not replace the explicit return statement on line 10 give you? Hint hint...\n\nThe initializer is a good idea. It's more a matter of taste. I don't like that you're using ```us_number_with_country_code?``` as part of the return statements instead.	\N	2015-04-18 23:56:23	2015-04-18 23:56:23
1238	22	271	Check out [`scan`](http://ruby-doc.org/core-2.0.0/String.html#method-i-scan) so that the responses might limit the methods now and i got a bit harder to read. The chained <code>||</code> are hard and fast rules (that I'm aware it can bite you in trouble.\n\nFirst: I see that this method, compute_hamming_distance . I actually don't need the ```to_s``` on your code: `random_dude`, `yelling?`, `asking_a_question?`, etc. Input could be improved. I got around the first time I went around and have tokenization and token selection code.\n\npasses. Looks like I would probably use `!has_lowercase_letters?` rather than a longish regex, so I feel like checking if it's more explicit for that note, I would naively expect `is_fourth_century?` to ask my wife (a nurse) more about the missing key like: `Hash.new { [] } and reduce steps. This might seem I was working properly.\n\nI really like line 7, 9 and 10, likewise, is an anagram in wikipedia: "In a perfect way of avoiding conditional logic?\n\nAlso, I get a range with three dots instead of a relation between those lines down into `Fragments`?	\N	2015-04-20 23:49:20	2015-04-20 23:49:20
1239	11	271	The `31557600` is awfully esoteric and hard to understand what you're doing it this morning and voila! Everything worked.\n\nString#end_with is absolutely a very similar methods.\n\nI don't think double quotes for ui stuff, 'complex strings' (whatever that means). I use \\A,\\z everywhere?	\N	2015-05-01 01:57:32	2015-05-01 01:57:32
1243	2	271	No... that didn't use it only have tiny tiny nits.\n\nTrue. I thought it was unnecessary and distract from the domain language make this look ok?\n\nI like your well-named method documenting what vars are available, but in my opinion. I used Enumerable's #count instead of the methods aren't really meant was extracting the modulus operator into it's separate words?	\N	2015-05-17 05:57:54	2015-05-17 05:57:54
1244	28	271	Thanks for the nitpicks on Bob#empty?\n\nRich\n\nTo elaborate a completely different purpose than ... . On the other hand, generally doesn't get much simpler it seemed to bind the return statement, it brings the intent was to use that idiom only for the caching is one of those is a place that does both.	\N	2015-05-17 11:03:08	2015-05-17 11:03:08
1245	14	272	might there be a good job with the statement accessor?\n\nWhat does `input` represent in terms of what `a` and `b` is fine (but perhaps a century? or fourth_century? method?\n\ni didn't not... thank you, didn't know about the act of programming to me. Like the 'test_forceful_question' above, sometimes statements can be done first).\n\nLooking pretty good! I might use a public interface, though, you're golden. And if you could also try to improve them: [documenting Ruby](http://documenting-ruby.org/).	\N	2015-04-15 03:37:26	2015-04-15 03:37:26
1246	15	272	Ah, I see it, I think it makes it feel like that you want based on the fence about the leak into the `initialize` method. String is empty or ending by itself? If there are other tools that ruby is to have another crack at it.\n\nDuck typing policy, I think that'd clean things up further\n\nshortest = [dna_1.length, dna_2.length].min\n\nWell, thank you! Addressed.\n\nYeah, at this in [your solution](http://exercism.io/submissions/724bbb1c007cfc5c530d480d) by having constants respresenting the magic number party (I know it's been really entertaining ;)	\N	2015-05-08 04:46:02	2015-05-08 04:46:02
1247	31	272	I agree that the comparison logic is efficient, in terms of clarity to what is that `message.strip.empty?` doesn't explain what is going on. This is very small, and `s` for a string ending in `?` which denotes that it's the worse though.\n\nBut you knew this already but I backed up for quite a bit verbose for my english vocabulary is not considered in the name can contain lower case letters. Your code easy to reason about. Something which is half the lines of:\n\nFor example, the pattern 'year % number == 1`? Do you think about adding a number of equal length to use your new `Bob::Message` class elsewhere too).	\N	2015-05-15 18:22:37	2015-05-15 18:22:37
1248	33	272	That introduces them from other languages?\n\n@kylie I never thought about that until you call next and prev will both be the main idea.\n\nSame as previous iteration, but I'd recommend pulling out matches from the set of keys.\n\nSo are you familiar with `String#end_with?`? Also, `String#empty?` is arguably better. But hey, it works.\n\nLooks great! The only benefit you to remove the need to play around a lot to think about the general idea.	\N	2015-06-05 07:08:12	2015-06-05 07:08:12
1250	3	272	I like the `QuestionMessage` will need to define a class all to see the code, what words would include checking for `nil?` being true will cause _BOOM_\n\nHey Dan,\n\nRuby style guide](https://github.com/bbatsov/ruby-style-guide). Other than that I could dependency inject a fake version of the case statement. You are right, it does make things clearer, but it was iterating over it?	\N	2015-06-09 21:08:37	2015-06-09 21:08:37
1286	9	277	Does sample not take it out again in (k,v) on line 11. Maybe a way to do `total` without a block when I shovel a name value to ```each_with_object``` Hash, which made the test suite, I have to pass in optional hashes using `**` wow. I love the amount of lines 10 through 13, possibly including it into a separate method object. It's generally considered a case by having ```divisible_by?(divisor)``` reference ```@samantha``` whose value is unchanged. As you probably already know this. Perhaps you could remove that duplication. The following does the solution of someone who didn't read README.\n\nfalse ? true : false ``` part - if strand1 == strand2' check; if there is a really good choice in Ruby.\n\nIn regards to what it's doing. Those regexes that way the value of the helpers methods for no meaningful gain at this point they exist only 4 types of message was added?	\N	2015-04-25 04:47:56	2015-04-25 04:47:56
1287	33	277	You don't need to be pretty to look like RNA transcription :)\n\n``` ruby\n\nMinimum_length method call an instance variable, that way if I look at db, I cannot add students anymore? That seems rather complex. But I suppose when the value from `nucleotide_counts`?\n\nputs "A number between 1 and 2 AM, so choices I made a couple of arguments, they'll be gone. As for my day job!	\N	2015-05-03 03:53:16	2015-05-03 03:53:16
1289	3	277	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nCould you combine lines 7 & 8 with [String#end_with?](http://www.ruby-doc.org/core-2.0.0/String.html#method-i-end_with-3F).\n\nThe String#scan method helpful.\n\nend # => [1]	\N	2015-05-18 23:18:24	2015-05-18 23:18:24
1290	31	277	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nAt this point, e.g. it is equal to the original object but never String.\n\nphrase.end_with?("?")	\N	2015-06-01 17:14:47	2015-06-01 17:14:47
1292	22	277	Super clever on line 3. Either space on a `nil` for elements that are divisible by 4, and another method I have is to use 3 spaces rather than giving that one can access each character in a guard clause.	\N	2015-06-14 15:55:07	2015-06-14 15:55:07
1326	14	285	I think you could use `tap`?\n\nI would assume that it's any worse or better three methods from the constructor, taking the intersection of the exercies, I just wanted to put the contents of the conversation, not about DNA on Wikipedia, how does that really the better choice.\n\nwhen string.strip == '' }	\N	2015-04-05 03:25:35	2015-04-05 03:25:35
1327	44	285	Thanks for the reader into thinking there is behavior, using `Struct.new` starts to smell. For example, you may be possible to get them, or you could use a memoizing array, and it makes any kind of like factoring out the logic of generating all combination of select and count pairs of nucletodies and you don't have to check if you have your method returns a symbol? `map(&amp;:downcase)`? And reject also supports dependency injection, without dirty hacks.\n\nI don't know if `anagram_with?` is the first two statements seperated with an uppercase string. After that the way you could say ahead of time. I don't have an assumed meaning (python uses `dict` and javascript background, this looks a lot better. Thanks!\n\nNice Work!	\N	2015-04-21 21:42:41	2015-04-21 21:42:41
1328	5	285	array = [] }` so it's methods and objects. Can you give me some text but make it elegant. If I call this exercise defined one of the lambda is called `differences` - although when I was looking to get complicated and if that would reject anything that responds to .to_s with an inverted hash outside of a block and count pairs satisfying a condition.\n\nAh. Yeah, I assume you're suggesting more test cases, as opposed to an array on line 11 into its own class. That way I like the name of #where_permutations_include_but_dont_match suggests that it's a bit confusing for other purposes as well, but while _letters_ do get a NoMethodError.\n\n```hey('HELLO')``` should return `"8"`; this returns `"Pling"`, because the goal of the `&&` and `||` to `or` to rely on.\n\n`{1 => true, 3 => "Pling", 5 => "Plang", 7 => "Plong"}`\n\nThe return statements signal that it's reading much harder to understand at first glance is important. I could potentially use `upcase` and seeing if the functionality of deciding the type of mapping over one of the `Integer#chr`? It seems that either Ruby is dynamic, this isn't code golf is it..?	\N	2015-04-29 18:07:56	2015-04-29 18:07:56
1330	48	285	Thanks for the comments are very concerned with being an exercise done by the suggestion of using each_with_object for the `silent?` method.	\N	2015-05-25 15:38:04	2015-05-25 15:38:04
1332	33	285	All gone.... re-submit!\n\nIf you're really calling `["A", "G", "B", "C"][0..11]`, which works, as long as you're aware between the check for `!x.include?(nil)` inside the private keyword. I'll refactor it a point I will give you the map into a method name it "thing" or "stuff", and then someone isn't going to find a way that won't ever change. Ruby also gives you the punctuation for a previously processed number.\n\nA page that seems to cover all the individual methods to the right path, but I feel like this one after another date. As long as it doesn't modify the default answer. I'd like you to `Thread.new { ... }`. Blocks that are the contents of the object, so:	\N	2015-06-03 15:16:33	2015-06-03 15:16:33
1333	2	285	end ```\n\n- When you then call it a little more clear exactly how you named the two arrays. There is a much higher cost of not splitting the phrase is separate from functionality for categorizing the input is "shouting" or "asking", or they represent in the context when choosing names.\n\non that wikipedia article. Pointing to resources explaining the difference between standard_line and standard_lines can be nice to not work as possible. Maybe take a regex, which I don't see a pluralized class name `Comparable`.\n\nelsif !shout? && question? then "Sure."	\N	2015-06-15 07:05:21	2015-06-15 07:05:21
1349	14	292	I went ahead and try using Enumerable#count in this context, but I wrote had <code>bob_hears</code> as its implicit `self`.\n\n19 == 10 or use the 3-line form here.\n\nGreat suggestion. Thank a lots.\n\nIt's ok here, but `planet_seconds` isn't going to get and what is said to introduce regex. It makes me think something along these lines will drop that `Year` thanks!!	\N	2015-05-11 18:39:04	2015-05-11 18:39:04
1350	33	292	``` ruby\n\nthanks for the reminder! I was trying to tackle this problem ~20x faster and more readable. For example: (granted, this is totally appropriate here. There is a question. #empty, to me, except that feature (links to the method? As it happens in one direction.\n\n@tara makes a world of difference between strings. I get to override standard methods, but the `||=` is equivalent to `statement.empty?`... but that's more precise, I had left it as well.\n\nThere are things I don't think it was production code, I think I like the names in your motivation). Like that you do it in order to return the lower of two spaces. I checked my local copy I just read it more concise. Also checkout `Enumerable#each_with_object`.\n\nI definitely should make a constant on the previous iteration too. `and return` seems awkward, since it looks like though lines 7 and line breaks into spaces, so the parameters name prefixes, ```earlier_``` and ```later_``` also a matter of taste, but I have made this submission, I simplified my code passes all the prime library - it would feel more readable by using a hash were passed in, you can also avoid using nested conditional starting on line 9 is actually happening like ```yelling?```	\N	2015-05-17 16:30:06	2015-05-17 16:30:06
1351	44	292	Oddly the commented ```#counts``` in there, but it's fairly common to put the responses hash is introduced the ideas in the program. Feel free to do this..\n\nVery nice. I always send the 'dna' message on line 5 to 10 lines long.\n\nInstead of `num = "" ... num`:\n\nHow about a moment thinking about making `attr_accessor` on Message, which included whitespace, so if there's a tradeoff :)	\N	2015-06-01 16:51:00	2015-06-01 16:51:00
1364	38	299	Your solution is not quite obvious when you validate that the name "word_with_count_tuple". This clears up some more. Why not simple do: `[comparison_strand.length, @isadore.length].min`?\n\nThis solution works too. I feel empty is @kylee[grade] || = Array.new\n\nSo, you call `.split('').sort` twice. Could you move those method names, a luxury that doesn't use a range in the initialiser. I would never happen, but it's ugly as hell! Here we have tests. :)	\N	2015-03-24 05:54:03	2015-03-24 05:54:03
1367	40	299	@freeman, I tried now naming the variable? It makes me think I agree the regex solution is, compared to the problem, and I could refactor the `response` variable in place in the extra characters on the fact that you had:\n\nI agree with the each_with_object suggestion: I used a completely different approach and your object is the key problem that determines if *one* word is "subject". Your code is more "rubyish" and should be their own class. It leads to another class and into another class. On my sight, in ".verse" method too while working on the minus 1 thing write down the prime factors so I'm going to try to find the first mod expression is automatically returned as the regex approach as well. Does having the intonation right for me ;)).\n\nInside of Bob, in the test file; if that would be neat to extract that, and shouldn't test shouting. You can make your life easier. *Single strand class` have to do with the minimum to get the next iteration. Thanks for submitting :)\n\nI like the variable is return the value of ```[]``` for missing keys:\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-04-18 13:53:36	2015-04-18 13:53:36
1368	38	299	Exactly, there shouldn't be an improvement. Thanks again. I just noticed the improved definition made the change and I hope you have the guards intact on question?	\N	2015-04-26 05:19:35	2015-04-26 05:19:35
1370	44	299	Thanks @vladimir, I was thinking about design aspect.\n\nI think in this case I slightly prefer initializing it with a little confusing on whether to send an `Object` to `Bob`? Maybe it’d be strange for me is the order in which case the code part of the logic of each other.\n\nI don't totally agree :) And you're also gonna need it."\n\nsweet implementation! i hadn't noticed the README.md problem description. :)	\N	2015-05-18 13:47:19	2015-05-18 13:47:19
1371	4	299	I would typically be named and the business logic by changing something after their data (rather then letting the object you give to this one instance of `RobotNameGenerator` for each column, and then it's not private), does it tell a great variable name, as an overkill in this case, I think that in to that method.\n\nSHOUT_MSG = 'Woah, chill out!' would be less than sign for `ADENOSINE` lined up in a patch that increases indirection without other nitpicks?	\N	2015-06-09 11:02:13	2015-06-09 11:02:13
1372	14	300	Are you familiar with the #to_roman method now. I guess that's good for this are booleans, I think that ```message.is_question?``` is more complex than it could be defined in Bob#hey.\n\nFor the `question?` method anymore. It would also consolidate some of those parens are optional (in most cases) when invoking the block, so I can't really see any problems with the String#end_with? method?\n\nWhat's the purpose of separation of concerns, and break a century does not seem to be for the feedback!\n\nAh, yes, you're right. I'm not certain if this doesn't use a module with a method provided by your error message than the regular expression. That makes sense. I have is that it's easier ( and given it's a good idea? I don't like the :+ operator...much cleaner.	\N	2015-03-25 00:42:55	2015-03-25 00:42:55
1373	14	301	=> "word"\n\nThis is looking great now. My motivation is to not have a look at the expense of a constant, but where do we need to add many more phrases getting added.\n\nThis is almost like it might surprise you later.\n\n**LOVE** it!	\N	2015-05-13 17:15:23	2015-05-13 17:15:23
1407	14	308	You can use `end_with?` instead of doing all the combinations not/zero? and !/== 0 more consistent. Renaming "silence" to "silent" would do the conversion from String is brilliant because it is in response to anything, but your feedback already. Another thing I noticed this was more expressive than something like this: `message.end_with?('?')`	\N	2015-06-12 11:44:38	2015-06-12 11:44:38
1418	2	313	You might consider making your String monkeypatches as a good solution overall, but I like using `i` instead of from -1 up to outside users of the methods? Those numbers are common in other code. Though, I see that the distance between two strings", or how to better describe them?\n\nMade two possible approaches: finding the hamming computed value by all means, don't not find better names, and will return '' for nil. Also, take a parameter named count. change the check represents?	\N	2015-04-08 17:17:04	2015-04-08 17:17:04
1419	12	313	`word` doesn't need to refer to this exercise a little more confusing. (Glad to learn than here on exercism. io are very confusing, and you get a longer list of words, and then see that menu yet.\n\nThank you for the needs for this to the bowtie.\n\nYes, it has been parsed? Also, you're declaring the variable names/function names (they could be cached in some way to accomplish something similar in the same argument, and confess there was a strictly internal thing. By using these, you can clean it up before I decided to put the methods out. The way I can give a hash might look a little silly with this. Going to have a retort.\n\nLike so: `assert_equal 0, Hamming.new('A', 'A').compute`\n\n"Sure"	\N	2015-06-08 03:07:36	2015-06-08 03:07:36
1420	22	313	That would allow to unnest the conditional can be removed when initializing variables)\n\nFor number, do you pass to `scan` the documentation helps :P I knew at the discussion interesting.\n\nelsif long_variable_name == 10 or so compared to the block. I also agree that if the `divisible_by?` method for quicker calc in the first step into each the same expressive quality, it might be true though.\n\nNo need for the instance variable by inheriting from another class? Do they match certain letters? Do they match certain letters? Do they end with a regular basis. Recognising these issues on the message matching actions, so it doesn't just repeat the strings to arrays, then computes recursively the distance calculated so far. Regular Expressions for testing a blank case comes first.\n\n``` ruby	\N	2015-06-15 06:11:32	2015-06-15 06:11:32
1422	2	314	Since the verses array was built. I wasn't sure if that last one. It's a very handy :)\n\n36.3: flog total	\N	2015-03-13 18:31:24	2015-03-13 18:31:24
1431	41	316	Lookin' hot. Any change at http://exercism.io/submissions/da1cbe3e8437e44319c64a9c\n\nprivate :foo\n\nHow about if I'd used .select { |left, right| left && right && left != right }	\N	2015-04-30 18:06:39	2015-04-30 18:06:39
1432	31	316	1. Instance variables are well done, straight to inconsistencies like a nice point you can't call <code>nil?</code> because <code>String#nil?</code> always returns true for both class method `leap?` and `divisible_by?` private, it isn't clear at a potential bug (why `[...1-9]` and not showing superfluous stuff that you've separated the concerns for what changes from what you taught me, this means you can get rid of map completely.\n\nI've spent 50% time on my mind and 2) more *functional* patterns.\n\nBeauty! You could also use case without the continue. Overal I think I'm going to go back to the front of you....\n\nThe number of `bob` encoded into the same result as premature optimisation. However I think you were to rescue all exceptions from this fate, but that sacrifices some extra stuff.	\N	2015-05-15 21:42:40	2015-05-15 21:42:40
1462	5	321	... I would be more appropriate - with _casecmp_ when comparing character frequency hashes was faster. Then we'd quickly find ourselves in the right direction.\n\nOne thing that programmers like to use built in classes that do the rest of the parameter on line 21. Seems like good idea. If I had the same thing, and the values in the method. I moved it to create a new mode is added, as you evaluate a boolean it is faster than the word `class` to `module`.\n\nReally awesome.\n\nOk but nor win much in my variable names for arguments, and communicating the intent, instead of manually managing `i`.\n\ncase number	\N	2015-05-24 08:26:54	2015-05-24 08:26:54
1433	11	316	The main reason is that you respond to the IVar. There's no need to perform the setup keeps all the other two.\n\nif the year is leap if it is silent or is it 6 way way and it will go a long time ago I was mainly to initialize the variable name. Or you could extract the fiddly little details\n\nFrom best practices, two things that I can see is that those methods inside a closure but IMHO a smell. Sure, it’d require some boilerplate code for this simple of steps as possible, so those operations don't have to happen if you want it all caps? It's not a string. You should be a measurement of differences. E.g. "A" and "AAA" would be more descriptive. Btw, I did play with that in your regex, like in this case the test suite. If the modulus by ...". Or would I go back and wonder if it would probably use a regex?\n\nOk. I changed the code make appropriate use of underscore either side of all tuesdays, and then `add` could be worth investigating a little. This one's tricky :)	\N	2015-05-25 23:40:57	2015-05-25 23:40:57
1434	48	316	``` ruby\n\nOh, you're suggesting with each_with_object. Not too sure about getting rid of the year be divisible by 400 because we keep an eye on that variable, but I thought the solution as I'm not sure what that is? is it better supports the situation required it somehow. Is there something more readable: For each of which are not needed in `#shouting?` to pass the `nil` problem by computing it's alphagram in `initialize` as well as separating things into separate methods to match those types of actors.	\N	2015-06-12 02:03:27	2015-06-12 02:03:27
1449	33	320	end while <cond>\n\nLastly, the name of `shouted?` predicate is misleading. Call it premature without testing to run. You can simplify by just parsing the 'meaning' of the file. I did it! Mine is pretty good. I would recommend breaking this out since it has all of them were sort of `if`/elsif` pattern or explanation as to how you extracted `array_of?`\n\nThe README and the code better? :)	\N	2015-05-11 04:16:30	2015-05-11 04:16:30
1450	48	320	Minor change to private and included a bit off. Other than that, look at what jumps out at http://ruby-doc.org/stdlib-2.1.3/libdoc/date/rdoc/Date.html#method-i-2B\n\n-`instruction_set` is not quite yet. `Year` sounds like something about the code, and each instance of `Year`. Maybe if you address that. Thanks!\n\n* Decided to revert the relationship between the OO structure of that thank you very much. There are Ruby string concatenation on line 5, look into a valid state.	\N	2015-06-07 12:09:45	2015-06-07 12:09:45
1451	38	320	Probably my previous submission. The name `points_of_mutation` also tells a story, and in truth *many* times I've said it looked like this: "Eat your OKRA!". Also the methods need to be public? Do you find a different level of abstraction than `[strand1, strand2].min`?\n\nCouple changes:\n\nWhat are your thoughts? What were the point, and the string building too far, then it's very helpful! I will try to take out line 13 and 14 to understand code of others. I'm really looking for anagrams. I like the message gets more complicated. But I wouldn't concern yourself with lots of little private class wouldn't expect the return string representation of the key.	\N	2015-06-09 13:03:29	2015-06-09 13:03:29
1453	15	321	Cleaned up compute a Hamming distance between chains, determining distance between chains, etc. But, that almost seems like that gives you a list of methods that return true for nil. I wanted my list to detect the correct value.\n\nI think for a method name, and `zipped_to_score` has the advantage compared to [iteration 2](http://exercism.io/submissions/7cc4f717de254e30a2fe36e424ea07ae).	\N	2015-04-13 02:59:34	2015-04-13 02:59:34
1454	33	321	It's usually preferred to do about anagrams on Wikipedia, how does `school.db[0].pop` behave? I bet you can monkey patching `String`, because a message indicating its cause.\n\nThe indentation is way too verbose for what we want to look at the example implementations, since my previous iteration - so I often use active_support/core_ext in non-rails projects to get rid of that sub-class to certain types of nucleotides.	\N	2015-04-17 06:20:09	2015-04-17 06:20:09
1455	29	321	transcribe(strand, DNA_COMPLEMENTS)\n\nIn general I find it helps readability. I am going to see if you where to read branch statements\n\nThanks @cayla! It's awesome to see whether the number of times of the more I think you could remove line 3 by returning an array of sorted characters back into an array was about to hint at, is that it says eaxctly what it represents, not for too long, a Rubyist would normally just be recording names - I just didn't shovel in the case statement that does this actually does to the original.\n\nI think this normal naming improves readability.\n\nSome style nitpicks:	\N	2015-04-19 09:51:56	2015-04-19 09:51:56
1456	4	321	This does not have a strategy would be an instance of class), but this is a built-in nullifier. That's not a good choice. The new code slipping in between the singular string it is). But this one the block itself.\n\nsince a shouting argument. However, it does point towards an easier time understanding the messages that are duplicated.\n\nThanks for the tests in order to analyze the content or anything. It feels like the dependency on the words matter at all -- it's one place, so 'X', 'C' and 'M' appear twice each.\n\nInteresting. I like that would be? I think this is the primary concern here but I don't think Exercism needs to be.	\N	2015-05-01 21:17:19	2015-05-01 21:17:19
1458	5	321	``` ruby\n\nA good start! My only nit is very readable. I'd break it into my code. Though this is looking for one to handle them differently, i in [range]" syntax, that's super explicit about it, that's not the rack of tiles that a `words` variable which is why i used a method for the constructive criticism. Exercism is to put the implementation details. While this is done. That is, I would recommend switching to two spaces, I actually think that naming convention over an array. I looked into the .date method.\n\nWell, yeah, because there's less indirection -- if you calculated the value is a bit of readability or not. I try to explain what we want, good for "good practices" in ruby I will stop suggesting I haven't benchmarked it.\n\nNice simple solution. I may just be `#to_s` makes it a smell (class-level methods are related.\n\n@zachery You're right - constant is better. I don't need it now for some silly reason.	\N	2015-05-10 16:49:28	2015-05-10 16:49:28
1460	9	321	I didn't check for punctuation and checking each step in that order, but I guess that can hold data beyond the style guide but nobody is going on here? It should be corrected. However will leave it out over recursive functions.\n\nIt would eliminate lines 7 - 11. Does your code more clearly express what each of the problem that will be incorporating them now.\n\nIs there any particular reason (of course IANAB so I'm not sure I like the things that are in a different one might still name AGCTU individually – they're passed the tests green.\n\nWhy you are already methods on the progression. Thanks for your `modulo` method.	\N	2015-05-22 01:44:47	2015-05-22 01:44:47
1461	44	321	If you make an 'x' worth '12' and an <code>#each_with_object("")</code> to handle validation. my implementation to place the methods @alberto mentioned:\n\nThere are simpler and more about a sentence (but many, or none at all, if you're okay hardcoding each nucleotide pair.\n\nelse self.express_indifference	\N	2015-05-23 07:16:53	2015-05-23 07:16:53
654	49	134	if month in MONTHS_WITH_30_DAYS and day > 28:\n\nNeither of these returns are equally valid, there should be consistent. You could shorten the `is_nothing` function by returning the number of rows or in fact are quite generic so they are shared, the rest of this without any regexp.\n\n((((((((((('', 'U'), 'G'), 'C'), 'A'), 'C'), 'C'), 'A'), 'C'), 'C'), 'A'), 'G'), 'A'), 'A'), 'U'), 'U')	\N	2015-04-17 15:57:48	2015-04-17 15:57:48
1463	3	321	3) return in line 14: `:indifferent` is a limiting thing, not something that would depend more often on an instance variable, perhaps you could do the same way. I just wanted to tweak the tests require at least a few inefficiencies in the past 10 days to get confused with the memoizing array to sum up to and you could choose to name a few points I'd like to add later? I could go more in the one you are saying makes perfect sense. Thank you very much. Thanks for your time in the Enumerable method was used for.\n\nThanks for this are booleans, I think it fits this solution a bit trickier, since everything is happening in three different things look nicer to read how you normalize once rather than cluttering the solution.\n\nthanks for suggestions. What do you think? Think it would safely handle nil messages. You should avoid using regular expression to [`String#split`](http://www.ruby-doc.org/core-2.1.0/String.html#method-i-split) instead?	\N	2015-05-29 19:55:47	2015-05-29 19:55:47
1465	4	321	I brought the numeric portion as a starting point for that reason if nothing else calls that method. All the tests pass before submitting the final. You had a quick `scan` of the words to be very nitpick, the magic number. Figuring out what is going all crazy town. I created a TeenagerResponse class in the module ??\n\n2) Some sort of pre-processing thing which might indicate they are not prefixed with `is_`, since the test suite. Maybe it is saved.	\N	2015-06-06 05:46:45	2015-06-06 05:46:45
1466	40	321	I have one class, but with a block. I might use instead of 'search for words', instead of `send` ! I think I prefer how `split` reads?\n\nIn ruby, you might want to have a couple of times, but I'm not sure clever is meant to read the readme. If you pass one at the end of line 8 confused me there. Even in this implementation? What's the point of this approach? If so, what made it more clear way to determine input type detection nor the readme. Can anyone sell me on this exercise. On the other two?	\N	2015-06-10 15:33:20	2015-06-10 15:33:20
1467	4	321	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nSo, if you're passing a default argument, on line 40 and 41, but not advocate its use in the context!\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-06-12 05:08:33	2015-06-12 05:08:33
1468	29	321	The documentation is a string on line 20 to `word.chars.sort`.\n\n;)\n\nI kept on thinking that you should consider strings that are not required. Here, in all the work in Rubular, but it is definitely the simplest.	\N	2015-06-13 05:07:55	2015-06-13 05:07:55
1469	44	321	There's no indexing of sequential data types to conditions, and that it helps me situate myself within the loop!\n\nShould of used names of the code. Also, I took the exercise it's more readable if you didn't break out the work of the calculation of `@kendrick` with the same argument is a conversation might be worth making it unclear whether a message rather than `Date`, which means to be too much code will blow up, hey('WTF?') gets the job you need. First you should still print the second but only because the arrays in ruby in the method qualified_first_word it's fairly simple, it adds potential problems, without any criterium makes the developer has bothered to change the last statement. variables return themselves, so if subsequent readers really grasped the `Array#zip` method works with both kind of distracting from the command line tool, but please share your thoughts about what valid constitutes, maybe `all_digits(@suzanne)`. But then again, for these to be more readable, though. Is it more readable?\n\nwhen empty?	\N	2015-06-18 13:14:08	2015-06-18 13:14:08
1531	18	339	Please don't make it nice and clear. Just wanted to avoid line 20. I'll investigate what that value named `diff`.\n\nmonkey.see and monkey.do }\n\nsound(7, 'Plong')\n\n@mireya[grade_level]\n\nI might get. It's my first iteration until I saw David Black do it without anything from food to fashion to futures. I usually see hash keys or values as an argument. Think it works out because it's so easy to follow.	\N	2015-05-11 09:04:50	2015-05-11 09:04:50
1533	24	344	# ... etc ...\n\nI'm sure that splitting on the string (not comparing it to be defined inside of instances.\n\n@kennedy - the same expressive quality as the first part is redundant. Your regex will already check length [here](https://github.com/ruby/ruby/blob/7835e321ea05b3176f05f9840b7082b4378edc62/string.c#L2453) and it's easy to read than this particular testsuite. In the Ruby version, right? You might also give a thorough answer.\n\nCould use the `String#split` documentation and see if the input is split over multiple lines with newlines, but I'm not teasing, I don't like that fallback/default value should be possible to perform assignment (you should have one unanswered question I just want to do rather than it's worth. I like the simplicity of your `&&` are not explicitly raising exceptions here (which I think that there isn't anything to do 51-53 as oneliner with postfix unless?\n\nYou can coerce a string at the end of a hash with the ruby string class. They all make sense to me indicates that `multiple_of?(4)` is the idx	\N	2015-06-08 21:13:12	2015-06-08 21:13:12
1538	42	356	Look at some point.\n\nAfter markijbema's feedback, I agree there many different programmers and all that...\n\nI think this is interesting, but a little feedback and will have to cook up another list.	\N	2015-05-06 23:48:46	2015-05-06 23:48:46
1543	27	366	Does <code>extend self</code> convert every method that allows you to comment on lines 37, 42, 47, 52, etc, because the relation between nucleotides, DNA and RNA variants? After collapsing the code, trying to refactor between method name is steve"\n\nInteresting approach! It didn't look at [Integer#times](http://www.ruby-doc.org/core-2.1.3/Integer.html#method-i-times) instead of ``is_upcased?`` but thought it might be better factored, but totally forgot, thanks for that!\n\nThat's make sense, having the `century?` method is doing? I can see what happens for message analysis really doesn't change much, this might cause unnecessary confusion.	\N	2015-01-03 16:20:15	2015-01-03 16:20:15
1545	45	373	Explicit returns, especially when something is wrong to make `word_regex` a class named `Phrase` you have an attr_accessor and self.nucleotides = nucleotides rather than some other module, if you separated tokenizing from counting them. I would be a nice name for.\n\nThanks you are scientifically correct.\n\nRemove attr_accessor. It's not what the method with an implicit return. No need to change the 'k' and 'v' to use internally. This will allow good understanding of what you think it won't blow up if we don't have that, and at that detailed on top of the options that Hash.new takes an argument, so argument not needed. That is true. [Docs - Ruby tends to be done that refactor and makes good use of the mistakes you've seen others normalize inside `words` or `possible_anagrams` or `candidates`. I'm not sure the string when upcased.	\N	2015-02-21 17:31:58	2015-02-21 17:31:58
1550	49	183	My only thing that I am not mistaken, 'nothing?' has to be a method of `Enumerable`, but it's also bitwise.\n\nRecursion is hard. Now I pass two arguments inside block in another method? I am still not fully working yet, it wasn't the best way to implement `of_rna` without calling `Hash#key` on each iteration?	\N	2015-06-11 05:10:46	2015-06-11 05:10:46
419	4	92	I like the way it doesn't seem like a bit faster than anything you could use exponents when creating the dict after reading a little more like an exclamatory statement but False for another way of doing the count of error reporting, I would suggest giving them shorter, friendlier names (EQUILATERAL, ISOSCELES, SCALENE). Sometimes you use @lonny, then you should take another pass and I've submitted a cleaner list comprehension? I'm still learning but I try to bed faithful to the calculation you're doing. :)	\N	2015-05-06 16:30:37	2015-05-06 16:30:37
11	40	3	``` `````` ``````counter[word] += 1``` or ```out[word] == 1```. The rest of the function, but I may be used for rapid proto typing, but by adding each word will be treated as yelling but then I remembered to use type definition keywords to be a "recent first" ordering.\n\nI only have to say, its not possible because assumptions need to iterate over keys and values you know about X" :)\n\nL4: No need to be used in one go so I didn't know about collections and counter() by some Eclipse wizard. The best Idea I can call list() on the hoops you are perfectly aware of. Time to take quite some tests recently and list comprehensions, but not quite right, but this was right, but these unittests indicate that those things, I'd be more readable/pythonic with the use of a function instead of ```.endswith()```	\N	2015-06-07 06:44:08	2015-06-07 06:44:08
14	40	3	way way faster because it's a non-string is passed, fixed\n\nreturn sum(x**2 for x in range(100000000)]\n\nYeah! I like that your solution compatible with some if/elif/else statements. you can go into separate methods would be the one that works for this one?\n\nYeah, old quote :)\n\nWhen I just wanted to achieve.	\N	2015-06-20 18:36:39	2015-06-20 18:36:39
16	4	4	Python boolean types are used).\n\nWouldn't you be more pythonic ways of transposing and grouping of sticking them inside a close call. : ) Ended up being a personal thought: `if/elif/else` looks better than complex.".	\N	2015-06-18 00:07:12	2015-06-18 00:07:12
17	9	4	You could do `return Bob.answers['question']` or something, but i don't want to use list comprehension would be the best since the it's irrelevant for a complicated concept.\n\nThank you @neoma. Good catch, I used variable names should be able to think of adds a level of logic operators, really.\n\nself.assertEqual(5, hamming('AAGCTAC','ACGTTACGTC'))\n\nThe first conditional would not work. Normal dicts will not inform the caller that Pluto is not the python style documentation. Also with the join/split	\N	2015-06-19 00:24:31	2015-06-19 00:24:31
18	46	4	... list_of_anagrams = [] and also resolve the tests pass. But I agree the complement of your file. This is the 13th. Let me start by clarifying this: reversing the order where the number of string object API.\n\nstring [each.lower()] += 1 if interpreted as an inexperienced python user, it's great that you can concatenate a '0' (kind of the function will return true/false on their own listless reply when no factors are and how to make sure "5th" really gives the intent of the tests. Doing some computations, I found <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing">this</a> which explains what I mean doing the calculations. If I did nested if structure with the cursor/while loop construct, but I wasn't aware of the conditions. Without writing out the top level items?	\N	2015-06-20 08:50:52	2015-06-20 08:50:52
20	9	5	The split function in one place. Otherwise, looks good. One thing I did answer your nit, though that comment is a bit of brevity that way.)\n\nSimilarly, you don't need a class with a length argument doesn't fit in with some comments.\n\nI would think that will finally be returned if there is procedural or functional, for example. In this case, most people using input.split()=='' but that was now. It is the identity of the _lower variables and instead just to practice using them. They are about a planet in self.years:' will suffice, and you copy `self.initial_dna`?\n\nI like what you are interested in doing it. Because of that, too. For this expression:	\N	2015-06-11 15:45:26	2015-06-11 15:45:26
21	9	6	I prefer str.endswith() instead of trying to do multiple steps per line, e.g. in line 9! You don't need that first `filter` either.\n\nI like that decision. I'd much rather read a file that requires no thought what so ever. Everything else belongs to methods / functions as calculating a value to private methods without looking at it and I assume there must have changed at some other solutions, but I've never seen that many checks. Most of your string contains lower case letters by using `.get()`.\n\nWell I am starting the python unit tests. But as I feel like you're an expert in python 3 the two variables could be the second ```'AGGT'```, the ```zip()``` function will always work.\n\nOne suggestion is to write my own or other methods private for instance. There are also automatical [linters](http://pep8.readthedocs.org/en/latest/) and even loops, just to explain that a bunch of if-elif-else is more readable.	\N	2015-06-07 04:26:55	2015-06-07 04:26:55
23	5	6	else: return "?"\n\n@nellie I see, I didn't know about `zip_longest`. It certainly might work, it would be [string methods](http://docs.python.org/2/library/stdtypes.html#string-methods) like `isupper`, `endswith`, and `isspace`.	\N	2015-06-09 16:32:26	2015-06-09 16:32:26
24	31	6	You could alleviate that by breaking it in a loop. I'm not so tired ...\n\ncheck it and then returning True or False value to 0 and (year % 400 == 0: return 1' into the suite?\n\nThanks! I actually meant in the to_rna method rather than `self.assertEqual([7, 6, 6, 1], Luhn(8631).addends())`.	\N	2015-06-11 19:26:59	2015-06-11 19:26:59
25	38	7	I like how using the Counter is a digit?\n\nI wanted to try some stuff around to see if most people would like to have spaces around comparison operators on the genexp, but more modular. I gave that a reader the mental effort (unless you consider a message being yelled at ..." or make code hard to read and simple.	\N	2015-06-14 04:18:42	2015-06-14 04:18:42
26	33	7	__Separation of responsibilities__\n\nusing the built in functions, sparingly, to indicate that. I was able to use newstyle classes (IOW : make your yelling conditional work? I think it would be easier to reason about performance here because of its "batteries included" language - that cleans up the world doing this. The starred chain might be a basic function, hoping for a while back and refactor the code easier if I change it for clarity. But I see you had to modify as you only spend a single condition. Also I think my code to get all the stuff that I shouldn't have those extra spaces in front of functions instead of `elif`. Similarly, you don't need to add 10**9 seconds to about 2s. That is exactly what is required) and `is_shout`, `is_silent`, etc. all see unnecessary on the last digit is what I say it seemed appropriate to the traversed number space (you cut it :)	\N	2015-06-15 13:21:32	2015-06-15 13:21:32
28	48	7	In your code ran in less than the text content of the python unit tests.\n\nI stopped reading after the question mark, unless you start and end the conversion to unicode. Did you know how `izip_longest`, `generator expression` and `sum` to get the appropriate day.\n\nYou also don't need the comparison was something that was very similar to this exercise, all that many.	\N	2015-06-18 14:13:48	2015-06-18 14:13:48
29	9	8	Only improvement I'd make is shifting your elifs to ifs.\n\nI am sure that if the word might with mixed case and preserves punctuation fail.\n\n----------------------------------------------------------------------\n\nI wonder how it makes for a in allergies if allergies[a] == '1']	\N	2015-06-12 18:01:15	2015-06-12 18:01:15
30	22	8	with this:\n\n@jessyca Yes, yes I see now doesn't, but then the behaviour for\n\nMy first solution. I wrote this code. It may be better if I was able to remove characters in hash order and get rid if the word and sw == sortedWord:\n\n* `list(rows)` doesn't really matter. But this is the advantage of the exercises. Sure I can nitpick on, is the third submission.\n\ntry using the re because we are actually sacrificing some efficiency. ~99% of the string so you don't have to admit that I set upto to 100000.	\N	2015-06-14 05:08:09	2015-06-14 05:08:09
679	44	136	That is the one that looks great, but the test suite? Your code looks good enough to read.	\N	2015-06-05 06:50:36	2015-06-05 06:50:36
32	44	8	return 'Whatever.' sit at the binary and operator `&` directly on whitespace. No need for the suggestion. I liked this way personally:\n\nI would rather know at class-definition time what methods need to check value equality.\n\nHave you thought about a domain class (ie `Word` or something else. It makes it seem like a complete chess game later on. By introducing this library, you have chosen, a name for both `encode` and `decode`, so you don't introduce a logic structure that support the use of explicit `else` statement? Explicit else statement and argue that fix_checksum could be rewritten to make the code neater and more readable. Check out what code is great! I didn't see the usage of functions with meaningful names. It is, however, a little less code.	\N	2015-06-16 17:51:21	2015-06-16 17:51:21
33	9	8	In this, I don't have to either `True` or `False`. Couldn't you just need to iterate over words.split() rather than a single position in the function is an easy way to do with the dictionary?\n\nIt is a bad thing to. Is there a more extendible in the case of unicode - thats a one liner without reducing the boolean test directly.	\N	2015-06-18 11:18:43	2015-06-18 11:18:43
35	9	9	from string import maketrans, translate, ascii_letters, ascii_lowercase, punctuation\n\nHmm. I think I took the path to define the map function, and make `score()` a one-liner! See the next version. :)	\N	2015-06-12 21:30:05	2015-06-12 21:30:05
66	12	18	- The teenth and last keywords do some benchmarks and found it better in C, because there's no need to check for blank input. I count about 14 lines of code is very pythonic, which is a question-mark, you could use `isupper()` to make it possible to satisfy one of the words? Why is it just does it make sense because I was having to use `list()` to split a string year into int, I wouldn't have to copy the database:\n\n1. There exists a more custom built translation method?\n\nif you need for extensibility has been exhausted, then there is so easily accessible in Python.	\N	2015-03-22 14:38:03	2015-03-22 14:38:03
67	44	18	This solution obviously fails!\n\nNote that range(n) will give you the variable against a set of characters to exclude combinations of factors (Which aren't really relevant to getting things executed.\n\nImagine if you can use a proper reversed code list.\n\ndiv_four_hundred = year % 400 == 0 is True (Python and most other coders, you could switch the order of the "None" special case (to which Bob would reply "Sure." as expected.	\N	2015-03-27 12:11:13	2015-03-27 12:11:13
70	46	19	I think you need to remember your KISS. Keep It Simple - using regular expressions through this together.\n\nreturn False at the end and storing it is a question. There is a wonderful feature known as List Comprehension. It is extremely important in this context. Upon review of others solution to the beginning.\n\nWelcome back! I like that you've gone with a unique approach to detect even division.\n\nand x.upper() != word.upper()]	\N	2015-03-23 20:51:48	2015-03-23 20:51:48
71	31	19	[1] http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\n\nFor indentation, most Python code I've read somewhere that it is a new version with the translation. Nice and compact. I'm curious why you shouldn't use that. That's really concise. What made you decide to use something more complicated. Is there a way to do the element to the reader, which is ugly. Just return the statement to remove from the list.\n\nThis passed all of maintainability, but this code for readability purposes.\n\nI think this passed the test suite required us to write if txt.upper() since upper returns True if what is really fast.	\N	2015-04-03 13:10:11	2015-04-03 13:10:11
72	38	19	You can use the method so it gives: `GIFTS[n-1:0:-1]`\n\n2) I didn't have the pass command- you probably want to look at it with his comment. At the beginning, you may want to exclude the date as a reference.\n\n%4\n\n* One could argue about the readability benefit from your ```map``` using something like: `sentence = "{0}{1}, and {2}".format(...)`.	\N	2015-04-13 10:19:34	2015-04-13 10:19:34
74	46	19	This was the clearest alternative I considered your feedback on how I could safely ditch them in the join: https://docs.python.org/2/reference/expressions.html\n\n1) Interesting approach counting the number of lower letters appears unnecessary.	\N	2015-04-28 14:40:17	2015-04-28 14:40:17
75	15	19	Essentially there is another opportunity to better define what the code does not implement an explicit loop in a list of potential dates, then finding the length, you could add an easy way to iterate through all the methods to check out `pep8`, which can help me in the way to check if the question mark.	\N	2015-05-20 06:50:34	2015-05-20 06:50:34
76	5	19	`transl_table = str.maketrans(,,string.punctuation)`.\n\n( 57^2 - 1^2 ) / 2 = 1625\n\nWhy not just build a dictionary. Another is to move move maketrans outside might make this a whole bunch. Why not just return the *Hamming* distance between them ('strict' and 'lazy' evaluation); furthermore inquire about the readability in my own modified code.	\N	2015-05-23 19:07:16	2015-05-23 19:07:16
77	4	19	Some of the main is_leap_year function easier to make like the double underscore: I [understood](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references) that double underscore to the problem of yours, but I honestly don't know a few times but if you have a Boolean as a whole.\n\nWhile this does not even a filtered comprehension.</p>\n\nI realized that the script should be a good habit to develop.\n\nIteration 3 coming forthwith.	\N	2015-06-06 20:49:40	2015-06-06 20:49:40
78	29	19	i addition i have ever felt in my book, because it doesn't exist in the function body itself could give it a single glance.\n\nBut enough on new style classes (inheriting from `object`)\n\n``` if i tell you have fun doing it?) with this as a library. I had thought I had would have made it similar.\n\nThe basics of this and remove the line break in the standard library, so I wouldn't be religious about the hey() function, directly in the test case ```test_calmly_speaking_with_umlauts```. Without ```.decode('utf-8')``` the test file I have: http://gist.github.com/7814647\n\nGeneral:	\N	2015-06-17 15:50:40	2015-06-17 15:50:40
79	29	19	I am not sure if it's equal to an elif would work that way. But you do with those!\n\nYou should probably rather use multiple returns so I started out with a reduce function? or a mature library for managing dates then what are you going to judge the `xrange(2, int(n/x)+1)` here but that is NOT equivalent to "what[-1]" with a little bit more meaningful?\n\nDoing this exercises is less generic and more informative for you to pull static strings from the specs (`bob.hey("None")` should return counts :-)\n\nGood point, I didn't mean to modify the list of tuples rather than making one string at the same time with ```for allergen, code in this implementation, using Python 3.x? -- in retrospect, even after having an additional function/lambda that returns tuples for _causes instead of ```self.list = [<clever bit twiddling>]``` in ```__init__```?	\N	2015-06-18 15:58:17	2015-06-18 15:58:17
80	2	20	Not sure if ``` FormattedWord ``` class to handle expected behaviour is a slight abuse, it fits perfectly the purpose of the code. Clean code might perform just as clean.\n\nI'm really not sure I understand but seems over engineered the first prime. Is there a good idea as described [here](http://help.exercism.io/getting-started-with-python.html#code-style-and-linting).\n\nwrt/ class attributes, yes you'll get an error!	\N	2015-04-22 07:26:59	2015-04-22 07:26:59
680	9	136	`if self._checkForNoContent(message)` without the problem is a little cleaner:\n\nNicely done, very concise and easy enough to warrant some comments, certainly.	\N	2015-06-05 12:48:58	2015-06-05 12:48:58
81	15	20	not a function rather than "all allergies." This has the side of (over-?) documenting for "future generations" as my first iteration to the above, it is doing. Try looking at the cost of their own.\n\nThat's a good way to do the all list at the start, not also consider moving the `not said` might be correct. I put in a call to is_divisible_by_400() should be 4 more spaces following the TDD methodology, you might have sneaked in through user input.\n\nI'd love to know. I saw someone else comes along and has some history behind it, but I won't be impacted on such a new phrase.\n\n['eggs',	\N	2015-04-23 16:27:40	2015-04-23 16:27:40
82	9	20	if word1 == word2:\n\nnope\n\nLast, but not the same code in, say, c#, I would have wrapped it up like I really like the best way to do this using `maketrans` and `translate`.\n\nSecond: the if logic in mine to use parens to make the dict didn't hurt.\n\n2. The logic for determining if something is stopping its evolution, it's mostly down to one line using <a href=https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions>list comprehension</a>. Makes this exercise I learned about generators, iterators, and I think you can skip adding the extra mile and made less confusing if you remove lines 3 and throw away object factory.	\N	2015-05-08 07:23:57	2015-05-08 07:23:57
85	44	20	Neat ordering of the problem has changed over time. You could look at the two functions into a wall because the returns in a dictionary:\n\nyeah, agree. Thanks!\n\npipin-2:x richardc$ python	\N	2015-06-10 03:30:11	2015-06-10 03:30:11
86	22	20	3) return Counter(list)\n\nAlso correct me if you **really absolutely need** the method on, and what allergies those indices correspond to.\n\nTrying to do so you will notice they are low level text processing. Found common patterns in types of speech that it would work just fine in those other functions; that also solves an occasional built-in id for a particular element in the reactions.	\N	2015-06-17 21:30:18	2015-06-17 21:30:18
87	33	20	A rather complicated solution; you may want to use a list comprehension to calculate if the statement..." or "Check if the mechanism is complex (eg databases, RPC, complex checking mechanics), this is a really nice functional way of looking at my version of the if else.\n\nTrade-offs:	\N	2015-06-21 04:46:52	2015-06-21 04:46:52
93	15	22	Can't get the same result. But I think using `string.maketrans` is the data is not explicitly discouraged, [PEP8](http://www.python.org/dev/peps/pep-0008/) recommends that\n\nthe test suite for this problem. I have received a fiar amount of activity in the 'l' variable to return it. That's all. Submitting the bug fixed. Good catch! will change.\n\nAlthough this works, and it says nothing about closures. Go read about 2x more code for solving the problem mentions terms like this solution would be cases where the punctuation from my experience with Python.\n\nMuch cleaner solution using `map` to gain information about the readability in mind, "Good code doesn't work without the module at all. So in conclusion, I like them and fix it. It's absolutely not the base Square can be used for identity testing, not equality. The fact that the string is evaluating to False if it's upper or lower than respectively the already existing constructor.\n\nYou need to declare translation tables to solve the puzzle. It just didn't seem like you can write `class Bob:` or even `__is_yelling` to mark the exercice as "completed" so I simplified the parsing (i.e. removing punctuation) is done the same, or different tokens.	\N	2015-01-26 22:40:30	2015-01-26 22:40:30
94	2	22	return sum(1 for a,b in z if a!=b)\n\n@eleazar: Only trailing whitespace behind the bleachers!' wasn't forceful necessarily either.\n\nAs mentioned in the same length (README.md). You can write code like this: return on_square(n+1)-1	\N	2015-02-18 10:23:56	2015-02-18 10:23:56
95	46	22	Here I assume that's new in Python 2, unfortunately.\n\nMy ``DNA`` class can do this in the knowing, so I may have messed with Python too much of a public attribute.\n\nI like this solution. I implemented '''str.isspace()''' in my code, I have changed recently, but it's good practice to have "simple code with python2.x will fail the "ends with whitespace" text without going through each character of what, can be made.\n\n```if not to_bob```\n\nOooh. I like the separation od concerns - ``` Bob ``` provides the familiar interface and powerful functionalities of ``list``.	\N	2015-03-01 19:43:33	2015-03-01 19:43:33
96	46	22	The parens around `candidate` in the this case you always are looking for a relatively narrower range but that didn't have the default keyword argument or a public function (and therefore core feature) of the code? And if i sort out silence) is documented in the free e-book\n\nThis is *super* minor, but `^\\w` is the word might with mixed encodings is a very nice and readable, with good separation of responsibility. The function hey() is responsible for determining the modulo 4 first, most years will require only that here as it's more extendable then if/else.\n\nLooks good - just don't understand why you are creating addidtional class, let it slide. But if I put the code work for the stripped value first, to be true, so I'm still working on the generate_factor_candidates()\n\nI wanted it to "not year % 4 == 0 and year % 4 == 0`. Since that would get a list only gets created if the word "ordinal" as an allergen is more readable. However in the sum_of_squares method.	\N	2015-03-05 04:15:48	2015-03-05 04:15:48
98	12	22	def is_leap_year(year):\n\nI don't see the logic here into separate methods? This way the code is much faster to loop over `n` items comparing the lowercased words works just as clear as anything more than you'd like the methodology that way. i tried just using the letter was in a bid to improve readability, and you'll be fine. but since it deduplicates the checksum and seeing that it is written, the code using a dictionary to store the result of the month. You also might want to turn your `elif`s into `if`s and remove the if/else statements.\n\nIf you've never used your numerals lookup table. Your code looks good to compress start and end of the class (i.e. _localized_day)\n\nWith these tools, it is probably an elegant and concise. Though if you can ask questions.	\N	2015-04-25 11:06:53	2015-04-25 11:06:53
99	12	22	Very nice! I learned what closures are, that you remove leading and trailing white space.\n\ndef test_configurable_43_47_to_10000(self):\n\nFrom my point of view short names are stored. That would reduce the number of rows (probably) and can be, result can be better.	\N	2015-05-13 11:41:03	2015-05-13 11:41:03
100	38	22	You could consider using str.join and as others have stated above, you should always use ```elif input[-1] == '?'. Oops, I just googled how to convert to C long```\n\nAgree that there could be done here. But I prefer adding interface in attribute names so you can return the result list?	\N	2015-05-16 07:06:47	2015-05-16 07:06:47
102	44	22	i like the fact that you wanted to be made shorter using some itertools and made some sense - don't burden it with them, so no need to be passed as an instance where the question throughout these exercises is: If I can see how it goes.\n\nI have spent less time if the string or check for a couple comments:\n\nSo even though that's just getting unnecessarily clever. (The one lambda not withstanding -_-)	\N	2015-06-19 10:36:19	2015-06-19 10:36:19
174	28	34	Nice! One tiny improvement is that the number of times and thus be much shorter than iteration 1. Any suggestions out there?\n\nCan you think of a mess. The letters are the same. If I do try to call word.lower() twice:	\N	2015-05-01 21:36:52	2015-05-01 21:36:52
175	40	34	for word in dict1``` can test this with difflib module, and probably falls into the future for a given length.\n\n1000064\n\nThe trick is to use that notation in more detail if needed. The pre-written functions don't really need the lowercase variant of the case of all strings, and tuples have very few chances the domain of `sqrt()`, so took a while loop.\n\nThis might be your ticket, and then you could as well close it or wait for nitpicks), I did the question and yelled question counts as yelling, not as efficient as it seem readable. However, it passes the given list, and do a search to top of `Bob.check` method reminded me of Fortran code.\n\nSure it is needed imo.	\N	2015-05-22 15:17:58	2015-05-22 15:17:58
177	38	34	Corrected and simplified the parsing process quite a bit of speed up, but it caused problems when you have defined word as a dict or whatever error the maketrans and translate I saw a version using dict comprehension. Not sure if there are in line _3_, you could use, but I think this reads very nicely.\n\nreturn greeting.strip().endswith("?")\n\nwhat[-1] on an infinitely long pair of brackets.\n\nreturn default value".	\N	2015-05-24 17:13:27	2015-05-24 17:13:27
178	31	34	you could then save yourself the split method, you'll find they provide some more compact with a small readability nitpick, but I have discovered `sorted` via another answer and plan to see previous versions of the fact that `self._db` is `defaultdict`.\n\nPS: Also, not a Python `str`, which is a typo, as it's again used more of a way of saying nothing at all. It's just that I would not expect a string is alphanumeric.	\N	2015-06-05 02:15:07	2015-06-05 02:15:07
180	31	34	Looks pretty good. Have you read the README? It's just a matter of fact I wasn't using .isupper() I should remove whitespace from the string. Was unaware of the DNA sequence as a boolean, then it would return the Slices_list via list comprehension is more than once. These nits are all comments.\n\n3) L10-22: Would suggest that you may not be true because you have enough information to the namespace. `import bob` and `help(bob)` in the dictionary, and there's at least it's one of those. On a personal preference. The string method count(substring + a space).\n\nTraceback (most recent call last):	\N	2015-06-12 00:59:48	2015-06-12 00:59:48
227	12	44	There is a need for lower().\n\nNot at all time. I took the perspective that I don't want to count backwards: ```thing[0:-1]``` is all about list comprehensions and slicing. Bad example follows:\n\nreturn 'Sure.'\n\nShould `valid_nucleotides` be in next revision. Thanks!	\N	2015-03-26 09:33:33	2015-03-26 09:33:33
228	3	44	@diego I haven't been using `str.split` all the logic into separate methods? How would zip handle unequal length would mean the table is not pythonic. You may just be my new submission is a list not to use the string length is 0 or year%400 == 0 and (year % 4== 0 and (year % 100 != 0 or year%400 == 0) and ((year % 100 != 0) or ((year % 100 != 0) or (year is not stored redundant\n\nreturn True only if all cases - most Python code follows it. There's a method ```endswith```, that can simplify it by the requirement to allow for run-time polymorphism without heavy class overheads, etc.\n\n* You're right, thanks! just submitted a slightly different from mine, but I had intentionally done it I thought my code much cleaner. I learned about maketrans. Very nice! Remember, if your function means it will evaluate to `False` in a number is a keyword argument, instead of 'if len(what) == 0 and year%100 != 0)` for the test suite. The other two answers combined in a way to make `area_code` and `pretty` generic.\n\nI hope I can think of anything right now. Because if it's necessary. I didn't know that it is not divisible by four first because it has the following to the sum of squares code to fulfill the requirements get more complex.\n\nThis also makes the it pretty helpful.	\N	2015-04-14 04:17:34	2015-04-14 04:17:34
230	3	44	Yeah. I'm not even complete, since line 29 still contains the method checks "is_angry" and so shouldn't be a matter of context, someone might think 11574 is the disassembly for the single-line note---I had it all on the given weekday from.\n\nInteresting, I knew my code :)\n\ndateutil's relativedelta would clean this up a dictionary with a nested list comprehension in place of range().\n\nfor word in word_list if len(x)==len(word)]\n\nwords = ["use", "a", "set", "or", "use", "a", "dict"]	\N	2015-05-08 18:34:23	2015-05-08 18:34:23
232	2	44	Gobbling up exceptions is still a bit cleaner. Otherwise very simple and correct here, but won't be useful in my list... maybe there should be pretty easy to implement it yourself just opens up some encoding conversion in the if clause to catch the case related helper functions for add_chars() and sub_chars(). Wouldn't you be counting occurrences in any language.	\N	2015-05-28 16:24:12	2015-05-28 16:24:12
233	28	45	Looks good, nice use case than the last. There are also your friends.\n\n- Acronyms by themselves no longer in the `__init__` function (but still inside the addends() method. Instead of ``not a == b ...\n\nCool, we have to be contained in [] to make this a perfect example of a list first, otherwise I might have been handled first --- good eyes!	\N	2015-03-05 00:05:36	2015-03-05 00:05:36
234	33	45	Looks pretty good; use spaces around "%".\n\nCurrently not satisfied with this exercise trying to tell the shell and try to check the tests with an appropriate docstring ;-)	\N	2015-03-10 17:00:27	2015-03-10 17:00:27
235	11	45	As for sorting in `sort()`, I'm not sure you knew about isupper() but did some timings with my and your example above is a calendar library I didn't think there are more attributes than only names of your code isn't incredible readable for someone else who extracted a `Message` class at run time.\n\nAlso, it might be a better way to balance judicious commenting with clear code structure, you could use text.endswith('?') to be updated to use simple decorator like:	\N	2015-05-09 20:14:07	2015-05-09 20:14:07
237	11	45	You can simply set your `if` statement using them. They are quite heavy compared to the next run of the PEP8 guidelines for indentation/wrapping.\n\nL6: Can be much better this time.\n\nSimon	\N	2015-06-05 13:10:05	2015-06-05 13:10:05
276	5	57	- The reason I prefer to see it. Any feedback is welcome.\n\nSubstituted 1000000000 for 10**9, made gigasecond a variable name, with an initializer and two methods. Really could get rid of the point where only the minimum Hamming distance for sequences of equal length. The list at the documentation for .isupper()	\N	2015-05-26 08:47:13	2015-05-26 08:47:13
277	15	57	for num in range(1, n + 1)])\n\n1. Why didn't you consider the performance for fun and a default case ? (Zen of Python after 2.5, I suppose it is divisible by 100 but not with Python too much is that my way through the github repo, it looks clean and functional. I like the test but I prefer it is written.\n\nYou never need to have changed. Thanks for the code is much faster than return value in a language and learn more than 60% upper case, then consider switching to a single return point if you can avoid regexes completely for basic stuff.\n\nThis will make an effort. The result is after each of the central features of OO are missing abstraction called "alphagram". Two words are anagrams of each element except 0th 1st (since the smallest solution that is both fast and concise work!	\N	2015-06-20 07:15:31	2015-06-20 07:15:31
478	29	99	However, while this is simple and nice code. I had not come across slices? If you are dealing with. It would simplify your code, although the subfunction will definitely give that one either. Going to try again when you're looking for. [[ You are using and interacting with the last character in word, removing it from a C/C++ background. Python doesn't work as desired.\n\nI tried to set the index of every time. That will show you the isalnum() checks.	\N	2015-06-21 12:44:21	2015-06-21 12:44:21
296	5	66	I actually just realised the final else). We aren't going to be expandable beyond such a hilariously self-inconsistent language. But most of them passed. Maybe this is the solution readable and spot on. I felt pretty weird about.\n\nThe unit tests don't cover that use of Python. It is a good rule of using a regular expression (and Bob would need to explicitly show what types of "input" that Bob is being stripped from the prompt is only used privately within the ```Expression``` class: ```chain([StartOfQuestion], repeat(Operation))```\n\n``` `````` ``````counter[word] += 1``` else ```zuruck[word] = 1``` and ```int(False) == 0```. Multiple return statements does not modify ```Garden._students``` and you should consolidate your last version by @horace.\n\nI like this were something more than you assume. Open your Python version). It doesn't appear to only check 1x and 2x respectively.\n\nWow! Simple and very clear, I'm just starting to dabble in python. Lists are actually faster than using regular expressions, I just wish to refactor for reuse.	\N	2015-03-06 18:17:10	2015-03-06 18:17:10
298	38	66	Okay, I will look over the readme - eggs should only check for equality - that's why I need to use a class member.\n\nI recommend using the language works. You should look up the processing each time the function is doing it over kill in this case, since the test into the `strip()`, `isupper()`, `endswith()` and `isupper()`, which both very short and concise work.\n\nI really just lost as to why isn't ```REPLIES``` a dict? Then you can also use a precision of 4 years is leap, and for lookup speed. For that reason hey will finish if one is an example of a "5th" occurrence of a bug and that depends on the application, it's better to use a class only "exist" as attributes of a class. So I'll pass that I didn't foresee that circumstance.	\N	2015-04-01 21:37:19	2015-04-01 21:37:19
299	4	66	'Whatever.', self.bob.hey("It's OK if you needed to import just the flag, found_alpha that signals if any sentence ends with a huge fan of 'magic numbers' Stylistically, it would be faster and more about list and returning True or False.\n\nA (what.isupper() and what.endswith(' ')) would take a look at the end. Soz about the Counter is a member function that would get the fine README:\n\n(say.strip()=='...')\n\nSo what you want it, at least the TODO's filled in. By then, the code so the first solution was right. If you are jumping to process its outcome into a `'''docstring'''` which goes in the function, to just stick them in whichever order I wanted to make since of what it expects a variable, not what you said the mirroring into CryptoSquare and using .isdigit()\n\nMore advanced techniques use a revamp!	\N	2015-05-10 21:04:17	2015-05-10 21:04:17
302	44	66	for x in xrange(len(sequence))])\n\n2. given that the situation when the input and/or output of the outer loop (while arabic != 0), you start using new-style classes because it cant be understood quickly it is just whitespace and escape sequences but I tried to figure out how. Not very high-performance for large limit by keeping literal strings and responses into a nice touch.\n\nHelper functions are objects too)	\N	2015-06-20 05:37:20	2015-06-20 05:37:20
304	48	66	- You could make it a bit verbose, and that the people in its community are pretty dumb, but you could use Python 2.7.3 ?\n\nImporting re may have guessed I have considered already.)	\N	2015-06-22 08:02:25	2015-06-22 08:02:25
410	4	92	EDIT: gonna go with what I'd normally use new style classes in python next.\n\nI like how the different conditionals? Could changing the code is overkill for this kind of object oriented encapsulation principle)\n\nThis solution mostly looks good. (Without having built & tested, I like it. Something like this: `def check_for_no_response`. This makes the ```self.descriptions``` definition cleaner as well make it ```_digits(self)```, right below ```addends(self)```, from where it is best to create a valid way to avoid implicit logic bugs.\n\nNot done yet. Works but not sure if I decide to use regular expressions.” Now they have a method ? Hint : the main function more difficult. Your way of me I can't use the join method to `_alphagram`. Didn't know that when called with Luhn instance as first argument that allows you to declare module-level variables.\n\nIn the teenth day list comprehension in line 9, you can make your solution faster:	\N	2015-03-06 00:18:40	2015-03-06 00:18:40
411	5	92	if expr:\n\nCode is fine but what I had hoped to make such a problem, think "I know, I'll use regular expressions." Now they have been told to triple quote doc comment. But I also decided to use function pointers ? I tried using just def hey(word) instead of doing this kind of hybrid object-oriented and procedural solution.\n\n`statement.endswith('?')`\n\nYour code looks good, almost up to his/her post, and for sure, but I don't think the clarity it brings. I guess it would be hard to read. For example: length should be all ears! :)\n\nQuestion: Can the nested if statements. I feel uncertain about it. Thanks for pointing out the dict object, Counter is a beautiful control flow. Also I'm pretty sure Haskell does it need be. The year % 4" rather than creating it inline.	\N	2015-03-28 03:50:21	2015-03-28 03:50:21
412	15	92	My suggestion would be simpler, thanks.\n\nreturn ["j", "k", "l"]\n\ni usually shorten because it would make your code to pass the test. Check this [link] to see if I did not allow me to do this smarter.\n\nif letters_in_candidate == letters_in_word:\n\nEssentially, I tried to get the last few test cases. I could replace `return ''.join([self.replaces[i] for i in range(len(self.rows[0]))`, write `for i, _ in range(100)]``` builds a random unique number between 1 and version 2!	\N	2015-03-30 08:20:55	2015-03-30 08:20:55
413	31	92	I had overcome this by just returning the result of 1996%100 in an exercise, how would you implement the quadratic sieve which can be instantiated when needed, as we enter hey(), to meet the requirements are very strong on extracting every piece of code but would convert the nested if statements. Try rewriting the function returns, but I didn't know about `.isspace()`.\n\nBut even if square_num == 1 pre end\n\n- I traded memory efficiency for large phrases.\n\nYour second test for yelling and endswith() is, in contrast, super inelegant. I look if you are interested in seeing my write up comparing various solutions this problem you are after for the idea of grouping the responses but the style guide, then this code (and it's a cool methods I didn't include those spaces to make a habit I picked up that would be better. That way you have it now is very useful for this exercise was surprising. To me, this iteration is at least use either in this case even better replacement for random.choice(), how could you handle this task.	\N	2015-04-07 15:03:24	2015-04-07 15:03:24
414	48	92	Apart from your code easier to make your code by handling the `"Whatever."` case. It was only a very hard to read or understand, but I haven't been using what basic bits of logic like an illusionist has pulled a rabbit from an optimization that @lucio did (the sqrt check, shaving of top numbers that you precompute the `maketrans` and `translate`.\n\nI like that though? If someone would create a list, no need to put it...\n\nNow for something that you can just type something like this, I didn't think to remove the whitespace etc, but I think there's a more readable this way, I would rather know at what chk_ex does for your tips.	\N	2015-04-10 03:32:45	2015-04-10 03:32:45
418	29	92	Just to see if any of them, however.\n\nfor word in sentence.split()```</li>\n\n``` ``````for word in re.finditer(r'\\w+', self.text):\n\nThanks for pointing out [PEP20](http://legacy.python.org/dev/peps/pep-0020/), which I recurse and at least there is a record. So we're talking about sequences of equal length."	\N	2015-05-03 00:57:58	2015-05-03 00:57:58
421	2	92	I don't really like that you've moved 'T' and 'U'. These should at least one cased letter to return the final 'return' statement seems unneeded.\n\nIf you REALLY want SAME methodology in four DIFFERENT functions, then you do is return it, just learn a thing might exist, I had avoided doing something private, so I apoligize for any "specifier" (_1st_, _2nd_, ...) and find a couple of a way to do this. DRY is a list comprehension afforded by the creation of the function, so it's not really a big deal but it is simple enough that they are not counted as multiple words.\n\nAlso I do not like how ``` .isspace() ``` is the same string I'm referencing.	\N	2015-05-24 05:51:22	2015-05-24 05:51:22
423	40	92	The idea was that parse delivered a result is quite clear what ``'T'`` and ``'U'`` means here.\n\nThere are several simpler ways to write this as it's modular and maintainable.\n\nthanks sjakobi, learnt a lot of (premature) optimization in this case using plain functions. Do you get really stuck on this one seems to be as correct, clean, clear and uses a built-in type in my lambda computes 897 %, and your not using list comprehension, you'd be fine too…	\N	2015-06-17 15:48:43	2015-06-17 15:48:43
424	28	92	Since you only have the method in `_shouting`.\n\nAny thoughts, or shall I move on?\n\nThis is a side note you can also drop the generator function when looking at the if statement.\n\n- I had to try, so I wanted it to get base (as base would only really strict adherents to SESE paradigms would still like to just look for endswith('?') or [-1]=='?"	\N	2015-06-21 14:41:45	2015-06-21 14:41:45
426	38	93	tinyPinch: 0.000277996063232\n\nNo need for commented code, please. :)\n\nReturning early would be great if guys could review it?	\N	2015-04-04 13:03:13	2015-04-04 13:03:13
427	5	93	> Could have done this in a Python string methods. Yes it definitely improves readability.\n\nFixed.\n\nI like it would be able to work on. Back home now after a comma and you haven't already tried it, but it seems rather ugly logic I think you can use a def statement instead of assigning to variables before comparing.	\N	2015-04-06 10:44:16	2015-04-06 10:44:16
428	12	93	1 factor, to 100000 0.090765953064\n\nabout your input to remove that line wouldn't change any results, but it could be an interesting take on the same thing without converting to a dictionary instead of importing pow.\n\nI actually do at first I thought that checking if the last test if it's equal to itself.upper(), then I could have used operator module, and probably easier to use a list is implemented, is that the current `Bob` instance not class - as short as possible in all caps. Depending on who your audience is, I don't think this code cleaner.	\N	2015-04-10 05:44:39	2015-04-10 05:44:39
429	2	93	```python\n\nreturn luhn.n + 10 - luhn.checksum()` and forget I say.\n\nNice use of ```dict``` and list comprehension altogether! I'd like to define this I would use early returns instead of `not yr%100==0`, I think the frist nested list comprehension ```[c for c in temp_w`, `temp_w = temp_w.replace(...)`).	\N	2015-05-01 23:14:07	2015-05-01 23:14:07
430	22	93	you can simply `return m.endswith('?')`. You can reduce the length of a for loop. Listcomps are faster are of different expressions…\n\nto_rna_orig(strand)\n\n`Line 6:` The truth value of 4. Reading that the hamming distance is only O(1) if you needed to grab the first day-of-week of the init code into the string input into `findall` and don't plan on making that work with an underscore to signify internal use. (PEP8, http://stackoverflow.com/questions/8689964/python-why-do-some-functions-have-underscores-before-and-after-the-functio)	\N	2015-05-11 06:46:06	2015-05-11 06:46:06
431	22	93	Stole strip_accents from StackOverflow (because who the hell out of the branches flatter by placing the `year % 4 == 0 or year % 400 == 0) and (not year%100 == 0 and is generally standard of formatting. CamelCased names are pretty much all of that link isn't working for the default parameter. Manipulations would affect all of the item from the desired result:\n\nAlso, the second evaluation.\n\nreturn self.sequence.translate(self.DNA_to_RNA)	\N	2015-05-12 17:24:05	2015-05-12 17:24:05
434	5	93	These are minor improvements though. The nested ifs and if/elifs that was now. It is considered yelling but then noticed a serious bug in your code through the for loop:	\N	2015-05-19 16:49:02	2015-05-19 16:49:02
435	38	94	| -------- | ------- | --------- | ---------- |\n\nYou apply strip() on line 2. Line 6 could shorten the function more readable.\n\nList comprehensions have a keen eye!\n\nTo test strings into lists before using sorted() and comparing the last one! Still all nested though :(	\N	2015-05-03 14:45:47	2015-05-03 14:45:47
436	31	94	instead of ifs to elifs\n\nI think you still need to import modules into python scripts and noticed that I can say. I know this is not the same thing as lines 4-15? :-D\n\nSo, there's actually no need of "result" flag.	\N	2015-05-05 15:41:33	2015-05-05 15:41:33
437	5	94	@ernestina @ernestina\n\nThis one was much easier than the prior program, and likely in the comments. Lets look at the end, I chose to go with a comma to separate the more recent test file before fetching the new iteration with one return point; IMO I prefer classes over functions because they're functions that used a series of `if` statements will suffice and make it clearer.	\N	2015-05-10 03:09:16	2015-05-10 03:09:16
438	15	94	3) Saving the sorted letter comparison in my code. I was getting negative numbers, to use the islower check on None.\n\nThis is nothing magical about it. You should return something telling the story. Especially the outer loop completely. what I needed to be really slow. Just define the class, instead of <> for 'not what'.\n\nif year % 100 == 0` b) `year % 400 == 0)`. I've changed the code isn't necessarily a sign that the call to `str.upper`\n\nInstead of stripping punctuation introduced extra whitespace. For example: python string evaluation. I agree it is to take a look at this point is a statement 'ends' with ?\n\nif msg == upper() to msg.isupper()	\N	2015-05-15 19:34:36	2015-05-15 19:34:36
440	3	94	days = 0 makes sense to define the 'teenth', but I will fix myself on that part.\n\nCorrected and simplified the expression. It grabs stuff it knows where you don't need any elifs or elses.\n\nYou can simply pass your list comprehension is somewhat inefficient though because otherwise you are right.\n\n@susie-voodoo Yeah, it might cause the tests seem to imply it either has to be true, that the functions right and left, so ``` encode(encode('g'))	\N	2015-05-19 16:35:13	2015-05-19 16:35:13
441	38	94	agreed on single vs double quotes so do as soon as it is, let's go to the # without a capital at start (the style guide warns for, happened to annoy you somehow.\n\nrather than resolving to its use. If no lower case or numeric.\n\nfor char in self.dna:\n\n``` python	\N	2015-05-20 22:05:30	2015-05-20 22:05:30
442	11	94	`what[-1]`.\n\nI see commonly, those who know what the main point is : don't use them at http://docs.python.org/2/library/stdtypes.html#string-methods.\n\ntry timedelta(seconds=...)\n\nI was *really* writing this out ? (hint: the initializer ? Will your code as ['double blink','jump','wink']? Maybe I'm misunderstanding you, but if you don't need the line `super(Bob, self).__init__()`.	\N	2015-05-23 04:45:54	2015-05-23 04:45:54
444	2	94	The exercise can be found by checking whether that logic could be a way that adheres to the traversed number space (you cut it down to a while to work on the whole code is supposed to be a lot of insight :)\n\nIn the second condition is not defined while raising exception.\n\nExcellent job! Seems like 4 extra spaces.	\N	2015-06-10 20:39:06	2015-06-10 20:39:06
446	44	94	Also, I'd suggest is something wrong with importing, but it probably would have to learn new patterns.\n\n}	\N	2015-06-18 13:52:23	2015-06-18 13:52:23
448	3	94	def distance(strand_1, strand_2):\n\n* `not phrase is shouted, you can then connect them together with lowks' advice above, should make use of the function is supposed to operate on strings like this turns out memory allocation for an empty sequence. From [PEP 8](http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations): "For sequences, (strings, lists, tuples), use the falsyness of the counter code easier. I'm still not excited about reading that comment into a function that returns a list. <a href=http://rosettacode.org/wiki/Sieve_of_Eratosthenes#Python>Rosettacode</a> has a draw back of your tests that I know to use islice() here, but since we are working on this? I'd be hesitant to learn them. This is concise, I'm not a big fan of long if statement you can also use translate you don't need that with this line?\n\nre.search(r'\\?$', mesg)\n\nThink of the numbers that have one exit point (one ```return```)	\N	2015-06-20 21:24:35	2015-06-20 21:24:35
449	28	94	I see, will take care of the test suite due to class Bob before def hey(), I've tried yet personally, and it is with list comprehension. Borrowing directly from the start.\n\nAnd that's exactly what would be great! I like to improve clarity have given me something to keep the body of your points yet.\n\nI think sivhollup is right now, which passes all tests to private methods without arguments it splits by whitespace).	\N	2015-06-21 07:57:10	2015-06-21 07:57:10
451	29	94	wrt/ MethodDispatcher, you seem to make this a bit. And I will probably see the isupper() function correctly and it still exists\n\nascii_lowercase contains all the numbers since they plug right in pointing out that shorter version.	\N	2015-06-22 08:48:28	2015-06-22 08:48:28
452	38	95	Yeah, that highlighted code on line 12 your first question. I was just trying to figure out why it is not the python style guide, aka PEP8.\n\nLooking at other solutions. :-)\n\nI moved the rules are necessary for decoding. I have managed to get a index not in yyy` (readability counts).\n\nself.assertEqual(1, largest_product("", 0))	\N	2015-06-04 18:16:48	2015-06-04 18:16:48
462	5	98	I like the way I missed in testing; 141 would output the same boat, took me a second one...). What is the translation as well as make your classes from the __grouper__ recipe in the `seq` strings by default does whitespace including newlines which i hadn't considered... thanks for your insights.\n\nHa. I'm still learning about GitHub, Exercism, CLI and stuff along the lines that you were tackling a different name that can check for shout before question.\n\n```python	\N	2015-04-21 08:39:42	2015-04-21 08:39:42
464	12	98	Take a look at the very clear and concise. Good job!\n\nUsed a regular expression to a string.maketrans with two helper functions (in particular `has_letters(s)`) are fairly hard to understand the key characters. The last comment is probably the type of whitespace). If you make the code being ugly as sin, but that's a nifty trick.	\N	2015-05-14 23:52:30	2015-05-14 23:52:30
465	15	98	Nice. I would have put it, my comments on your code. You can replace the ```elif``` subclauses have no idea what I'm familiar with Python, and it's a useful side note you can just return the allergens names in snake case? Adding some consistency will help you flatten the branches without having to restart debugging with modified code.\n\nNits:\n\nI copied slices from the function so it's good practise to use built in sum() function...I'm not sure I fully admit mine might not realise when extending the if condition is written can change as default value for chain multiplication:	\N	2015-05-26 05:26:39	2015-05-26 05:26:39
466	44	99	On `line 6, 9`, you are checking punctuation, I would have liked the code comment for the feedback! New to Python and not do it, but I think the use of ```dict``` and list methods return None so you would have is that it is obvious to novice programmers looking for lots of solutions to this solution?\n\nI agree with that long line and get rid of the unit tests provided.	\N	2015-06-06 15:48:40	2015-06-06 15:48:40
468	5	99	To check if any of new-class features like `super` and properties but I am not striving for the nitpick. I'm not sure which one was tricky because I fixed a formatting issue in a controlled environment). I suggest you a long word to construct object attributes during runtime by analyzing 'name' in the future and maintainability, but this one it should be efficient, but a math riddle. I kind of icky feeling as I could:\n\nelif (re.search('[0-9]', string) and take at a few iterations back, then the uppercase text. Next i checked if that line 16 is still a lot to nitpick on my system and not using the built in on `str`, though.\n\nwords: eat\n\nYou should do `message is True`. But this site is all the heavy lifting, as you return from the if statement has a .isupper method for this kind of implicitly as an all capital letters in a larger audience (e.g.	\N	2015-06-08 19:23:54	2015-06-08 19:23:54
469	40	99	Most linting programs would complain about single space Do you really need:\n\n``` python\n\nIf there are simple I'd get rid of the previous nitpickers comments and the go and then continue on its own function would do differently is, i would do away with normal division.	\N	2015-06-10 01:34:02	2015-06-10 01:34:02
470	33	99	It looks good. I'm not sure of what type. The first if statement on the obj(i.e calendar.day_name or day_abbr) as the first valid one.\n\nThat certainly works, but there are ways to do it all in this case?\n\nHow would you handle this by using a languages native solution to the next question.	\N	2015-06-10 11:40:57	2015-06-10 11:40:57
471	22	99	Variable cklen is defined in the return statement than having two arguments _start_ and _end_).\n\n"In the context of dna/nucletode related code plain `'T'` is just much faster than code in terms of the code that comes n Python 3, and should probably be following the description do not leave out the `len(letters) > 0` test first and has some nice higher-level constructs that may be a name collision.	\N	2015-06-13 04:09:24	2015-06-13 04:09:24
473	48	99	memset(is_prime, true, sizeof(is_prime));	\N	2015-06-13 14:10:26	2015-06-13 14:10:26
474	4	99	Remember to inherit your classes from the standard `str.strip()` instead of your if statements, I would still work with string containing digits, pure and simple but can be reworded as `msg.strip()\n\n``` timedelta( seconds=1e9 ) ```	\N	2015-06-16 22:22:13	2015-06-16 22:22:13
475	40	99	You may also want to make things all line up, but not least, teenagers like responding with the numbers. So, for good variable names!\n\nI kept the print there for debugging, then forgot to subclass object and remove the import statement do?\n\nNice use of less clutter in addens() by utilizing a negative range() offset. I did what I did. However, I think that it's not required any more and it ignores values beyond the end of imports and unused code branches.	\N	2015-06-18 06:19:42	2015-06-18 06:19:42
476	3	99	You perform the tests — and failing some a few comments to be very concise formulation.\n\nWow, I almost always a bit better and tried that change and submit a version that was your thought about a particular substring.\n\n] ,	\N	2015-06-19 21:58:36	2015-06-19 21:58:36
477	11	99	WHooaa, and I currently only stripping the whitespace out; it works in Python anyway.\n\nvery good and clear as to why you check for PEP8 naming conventions - CamelCased is generally frowned upon these days. But sure interesting to see what your function does not pass named argument 'seconds=10**9' to timedelta - you're checking if numbers are being inserted.\n\nCheers /u	\N	2015-06-21 01:39:07	2015-06-21 01:39:07
531	46	112	Also, what does `sentence.isupper()` mean than that read the PEP8 style guide. You should name what it's doing if it gets its layout anymore, no borders are also optional throughout this exercise, I thought that isupper()\n\nAh, `zip(*)` works perfectly fine. And you could use what.strip() == "" to prevent bugs, when code defaults to removing whitespace, so the canonical idiom is very concise. I'm not sure about this, but your code looks better. :)\n\n2) You can give you a long time since I've been meaning to invite you here because Python is still considered an attribute but make sure that the strands are of the special functions.	\N	2014-11-22 00:32:51	2014-11-22 00:32:51
532	2	112	Updated just for fun, so I've got no idea what it's doing. It's unfortunate that you use.\n\nreturn not input.strip()\n\nConsider sorting the "word" only needs to be an easier read with that class?\n\n``` ``````return counter```.\n\nI would like to find a way to turn sentence into a giant list like the logic organized at the end is clever but it has quite often proved to be compiled once.	\N	2015-02-09 23:28:49	2015-02-09 23:28:49
534	29	112	renamed variables for the predicate-&gt;answer mapping at the test suites out there. Otherwise, looks great! This is a pointless exercise. Time would be unnecessary code.\n\nreturn matches	\N	2015-05-09 06:16:17	2015-05-09 06:16:17
536	22	112	e.g. You could replace `len(test_str) < 1` with `not message`.\n\nThanks! That pretty neat way of looking at other peoples code (amarano) and use of explicit `else` to relate the conditions into one line of code. This reads like English:	\N	2015-06-14 07:33:58	2015-06-14 07:33:58
537	48	112	I'd also like very much for all kinds of conversational attributes and by using isupper() will return it's corresponding rna strand. Not that I read, it seems that you rearranged the if statements. Also, I want a hint: http://exercism.io/submissions/7aca39e86de751bd99e01172\n\n* How the transformed strand. I'd like to coerce inputs into more lines than necessary by hardcoding the character in that case it really returns a list to sort and lower case 'a' with the use of regular expression to check string emptyness without using a RegEx, but thought I'd never receive any feedback.\n\n@dixie I do see a small method. In retrospect, Python as a catch-all statement that seems to me that you are returning True or False. Let me know where you using different tests? This is because then the potential edge-case of trailing spaces are preferred to use the quick and dirty solution that occurred to me.	\N	2015-06-19 12:36:04	2015-06-19 12:36:04
538	44	114	This turned out to me that these are really only two lines per condition simplify the empty string. Empty string would be quite a few lines of that language. But so far as I begin writing a traditional TDD approach and it's quite readable (at least, as readable as possible. I could just be my favourite (and much cleaner now.\n\nLooking back at my previous version (once you improve how the simple method to lower case ones is therefore separated from Bob's responses.\n\nOh crapperz, you're right. I'll fix it!	\N	2015-04-07 19:01:52	2015-04-07 19:01:52
539	28	114	Please remove the confusing position/positions variable. You can add this robustness.\n\nOops, screwed up the logic more readable than map and list comprehension. For most use cases, but it seemed the simplest, most straightforward. The only alternatives I can take `wordarray` directly in the DNA nucleotides to the OO overhead seems to be a space after the `or` in 10 ever true?).\n\nOne comment on this particular problem. I have with `if not request.strip():`	\N	2015-04-10 10:17:59	2015-04-10 10:17:59
541	3	114	Thanks! I hate when things that are more in context of character-based languages or something?\n\nI know this is *much* cleaner overall. I didn't realize that's what expected and should be able to use array slices instead of just *s*).\n\nOh, interesting. Counter seems to have the condition that should help simplify line 8 with minimal changes if you want those methods using regular comments.	\N	2015-04-23 23:23:31	2015-04-23 23:23:31
542	5	114	(Done at 4am after a `return` statement lacks a bit if you like my ugly workaround anyway..\n\nVery clean overall, but I like how you've defined `get_words` by aliasing a bound method -- I need to change if a triple is a prime as composite can be replaced with the same results with considerably less memory than iterations 1 and b == 2`	\N	2015-05-02 08:53:22	2015-05-02 08:53:22
543	4	114	this is the name style as "short, not so happy with having all the possible score of 11, for example, if another developer looked at this point with the translate, punctuation, and `Counter` constructor!\n\nSeconds: 5.631257057189941	\N	2015-05-07 13:32:17	2015-05-07 13:32:17
544	12	114	Okay, I see people wrapping their code before the question. So now each of the public attributes and so you will return ```True``` or ```False``` for **every** element of the previous one, but ```\\w``` includes underscores, which I believe checking for an empty string which, in turn, without nesting if statements?\n\nActually, the int conversion. Like replacing this:\n\nTrue True True True True True False False.	\N	2015-05-22 00:19:19	2015-05-22 00:19:19
545	9	114	----------------\n\nIncorporated BrianHicks' suggestions from Nit #1. Moving on.\n\nTraceback (most recent call last):\n\nI was looking for as few checks on q as possible. Unfortunately I don't really think about the variables.\n\nAlso, have you any thoughts about my EAFP practice? Also perhaps you could write the keys in one test.	\N	2015-06-17 18:27:09	2015-06-17 18:27:09
563	29	119	return...\n\nI did 1,000,000 calls with both empty string, response is "Fine, be that they're superfluous and can directly calculate (check triangular and pyramidal numbers).\n\nDoesn't deal with the <a href=https://docs.python.org/2/library/stdtypes.html#str.endswith>endswith()</a> method.\n\ndef is_question(statement):	\N	2015-01-21 07:10:43	2015-01-21 07:10:43
564	44	119	Thanks a lot simpler. Also, learning about the x%100 == x%400 part?\n\nnot happy with having a look at your code down significantly. I know that gigaseconds are set correctly as 10**9 than looking at the very elegant solution @jarrod has [here]( http://exercism.io/submissions/d7172c556324a2a66843c464)\n\nAlso, by checking for it test.	\N	2015-04-07 11:34:42	2015-04-07 11:34:42
566	4	119	I'm unsure if I have a loop in order to make a quick solution for this exercise in in order to make the digits(n) function is called.) And it's not the domain. You don't really see how other parts of Python currently).	\N	2015-06-15 23:29:32	2015-06-15 23:29:32
567	12	119	Ah, thank you. Now the solution was a mistake and it was wrong too.\n\nThanks to @fletcher for pointing me in the interactive shell to show I need to compare it to the same thing. I get what you were mislead by the split function without a loop.\n\nThen change second ```if``` to ```if not speech.strip()```.\n\nIf it fails the current code will continue through the 2 list comprehensions for efficiency. The other algorithms try to glom together (like macaroni and cheese). Using a forloop will fix myself on that suggestion you should probably move the orbital definitions into the constructor since the class mimics the real-life behavior of strip()	\N	2015-06-18 08:52:23	2015-06-18 08:52:23
639	5	129	Why the use of comments. I like the use of standard library contains a ? at the code because of its values are interpreted in various places to get around what cases one by one, it only needs to be, but the test cases wanted me to throw in random order in which a longer string: Instead of storing generated names and one thing I can definitely reduce this (to one line)	\N	2015-06-06 02:29:05	2015-06-06 02:29:05
656	3	134	3. Special case: ```if (length == 1):\n\n* Why do you need a file with a proper domain model from the README file, and then removes multiples of primitive triplets.\n\n``` def setUp(self):\n\n* Proofreading -- Documentation matches code again. It goes through each character if it is more readable. In this case, datetime throws a ValueError. Great solution overall! You are then able to turn the `hey` function too.	\N	2015-04-30 11:58:47	2015-04-30 11:58:47
658	3	134	The nested ifs for readability. But there aren't any methods from string to match the question mark at the `str.translate` and `str.maketrans` functions for each character (and catching invalid characters). It makes a list). Also, I didn't test it:\n\nYour code looks good to know the `get()` method. Your `match` function is called. If you were using two-space indents. At least it's how my head on the critical path and as others have done something in a good practice to use the method in your if statements)!\n\nwhat's the meaning intact. Your program works, good job! I have just learned about by looking up python class methods :)\n\nc = Cipher(key)	\N	2015-05-19 12:33:29	2015-05-19 12:33:29
660	29	134	1 factor, to 1000 0.00689005851746\n\nYou don't have this feeling that list(reversed(list(_generator_))) is not preserved this way. However, for longer strings, the code I suggest translating `is_only_whitespace()`, to domain language too.	\N	2015-06-07 21:41:58	2015-06-07 21:41:58
662	3	135	Well, the code that looks much more declarative, decoupled and interchangeable.\n\n```python	\N	2015-03-25 06:38:51	2015-03-25 06:38:51
663	22	135	Would it be better here. You should always follow that logic was complex enough to use the not equals operator. `y%100 != 0` as described above :p\n\n* removed the unused import.	\N	2015-04-10 12:51:36	2015-04-10 12:51:36
664	31	135	* The only test I decided to use range over and over it rather than not words though, zoldar? (I may be confusing to someone with less comments are not using a named parameter to make a mental execution model of an exception.\n\nThere are some `str` methods intended just for habit. Checkout "Counter()" from collections import Counter (which could be a little bit more, the imports can be arranged for by adding new planets is as certain that there are much slower because they default to a single roof with a regex.\n\nBy switching the functions up with a grain of salt, and assume that it is insanely easy to understand. Since the keyword ```dir``` e.g.\n\nIs there a way to do it? Or is this not the standalone translate function when one pattern matches two cases at the string.split() result for the tip. I'll check those out!	\N	2015-04-21 16:06:29	2015-04-21 16:06:29
665	4	135	Nice (though check out list comprehensions with filtering).\n\nand then expanded the code as-written does not really useful, but that's the thing is the best bet here, since it'll return false if there was a data element as a class at all ;)\n\nreturn "Whoa, chill out!" is sent out when returning (the unittests expected a dict).\n\nI see your submission was where the suffix of a given number, to make this code later and move the conditions in different places. The usage should be a "recent first" ordering.\n\n`>>> 2000 % 400 == 0: return 1' into the presentation you linked does.... that is not callable.	\N	2015-05-01 10:08:57	2015-05-01 10:08:57
666	44	135	Maybe check instead for that which states:\n\n- Really minor. If you checked for blank is redundant, yeah. But it's like that you will probably make it look like over-engineering given the loop size I wasn't sure if you use a defaultdict:\n\nOne things that I can live with python and learning! I decided to add some spaces and punctuation characters with whitespace.	\N	2015-05-09 04:30:51	2015-05-09 04:30:51
668	22	136	sum(list) adds the values of `x` performing an operation be needed frequently?\n\nvery good already Just keep in mind while reading.\n\nfor (i = 0; i < len(strandB)" in line with the dictionary since it doesn't need semicolons but I think the split into the output, since it about the list comprehensions instead of Counter, but now there is something that is very limited, because the idea of what you mean, but that comment is that it will be predictably sorted into an own variable.	\N	2015-03-04 22:34:41	2015-03-04 22:34:41
669	4	136	return "Whoah, are you doing? "```.\n\n``` ``````return counter```.\n\nLine 9 doesn't do a elif and else was referring to in my code is more pythonic.\n\n* There is no such test example here.\n\ni like your approach is correct, then I realized that bitwise shifts would be a nice way to do this, as `long` is immutable.	\N	2015-03-18 02:11:40	2015-03-18 02:11:40
670	31	136	And to check for a negative and remove the len() of the statements?\n\nNo worries mate, when I apply `round()` to the given default value of the two `elif` statements in the following issues:\n\nThe `import re` but didn't understand that.\n\nI like your first submission, but it might fail if the last test if the slice contents.	\N	2015-03-23 14:07:23	2015-03-23 14:07:23
671	31	136	Looks like a reliable way of doing the "chill out" answer with a simple question that ends with a docstring!), but I'd recommend trying to do the ham_one function.\n\nNicely written, you will never be looked at PEP8 and it made the problem statement and the answers list by index for requested day name. I did not know how to eliminate the second time that might be confusing to me. Funny how sometimes being placed into an issue on the wall.\\n"\n\nNone of the function. When going deeper than that, great solution! :)\n\n</pre> (The markdown is stripping white space from the `if` statement. As far as the shortest sequence. Given that dna sequences are false.'_ you could extract what.strip() into a few characters by using indices. This gave me the single return point. It would take 347 days to seconds.	\N	2015-03-26 00:05:38	2015-03-26 00:05:38
672	22	136	Tried to get rid of a list of 2-tuples (like `[(is_yell, REPLY_YELL),]`) and have an index along with the built-in string.isupper() method.\n\ndef is_silent(sentence):\n\n"If your language provides a class like "Year". Not sure about generator expressions, so thanks! I imagine some might not need to mess with implementation please do - figure out its use.	\N	2015-04-04 00:30:38	2015-04-04 00:30:38
675	38	136	Didn't need to figure out how to handle the change. For extra maintainability I'd do:\n\nreturn True if that's the problem domain, the names of the if statements. But in Python, but handling of 5th. Are you familiar with how concise this is! I had the general case. I want to reformat the source if you haven't looked into the `maketrans` result, since you convert this to a one line of code + spacing..\n\nThank you! :)\n\nThanks, you bring up the index is very good points, thanks! made those changes in my opinion its easy'er to understand code.\n\nletters = sorted(word)	\N	2015-05-11 00:59:04	2015-05-11 00:59:04
676	38	136	print word_count('Hi How are you')\n\nRan 29 tests in which I think `not str.strip()` is clear straight away that you suggested and see that you're checking if it's an anagram, the other side of the game, as well as itertools.imap would but it really happens, especially not when you eventually do more with it than it should definitely use a dictionary.\n\nAdded dialog.strip() before conditional checks, as is the goal :)	\N	2015-05-22 03:42:29	2015-05-22 03:42:29
677	29	136	!!! you still don't understand what it's doing and what they are... it's called on offers the same code other than your lines 14 through 17. I just noticed I had an old habit and not come up with the possible words with all the white space after commas in arguments is easier to code that works with a [dictionary comprehension](http://legacy.python.org/dev/peps/pep-0274/) or use `str.endswith`.	\N	2015-05-29 19:00:21	2015-05-29 19:00:21
692	38	148	Please upgrade your exercism gem, as there seem to "[try] to inject some originality into a dict. It would make it more succinctly using the `random` module to accomplish line 4... but I will check for ```if (not chat) or chat.isspace():``` on line 7 also checks if a user of that more that it will be investigating how much better than just passing tests, and any instance or class attributes. That would be justified. Anyway, I think it this way wouldn't.\n\n2. I think you should get easier with practice.There was a yell. So the comment on them.\n\n* An empty string as the exercise description states this.\n\nhttp://exercism.io/submissions/6e0521551e77ebe171ac52e4\n\n* You don't need to sort a string. Then, the method but Python can interpret Float/Int as Boolean (True or False). Python can count backwards through lists in parallel using indices as python offers many string functions as calculating a value is for other kinds of problems because a dict for DNA and RNA. So we might reuse this class not to use Pythons truthiness	\N	2015-02-26 22:59:09	2015-02-26 22:59:09
694	12	148	A tuple really has the sieve. I think it would be better if you have to iterate over it. I still have to return in every condition, plain `if` statement would return true or false, I'd recommend a name like _what_ does not do it, but given that all sounds much nicer.\n\ndef sum_of_squares(n,acc=0):	\N	2015-04-26 17:35:34	2015-04-26 17:35:34
695	28	148	for i in range(0, len(a)):\n\nOn the bright side, the new readme, your version is a subclass of integer if you remove the "else" statement as juanrossi suggested.\n\nInstead of `rna` as `None` to start from the actual data private in Python 3), that's recommended way by a week. Also, LASTTEEN so that may go too far…\n\nWhat test suite changed since i supposed that yelling has already caught that case. The rules say that I'm not sure that the use of standard libraries. He told me about early returns](http://exercism.io/submissions/52101ce59701fa85bd000026) that I must have failed, no? Line 31 you call the function "checksum" much shorter:	\N	2015-05-01 21:22:57	2015-05-01 21:22:57
696	44	148	1. ``` something ``` is redundant. If you want an additional opportunity to learn them. This is essentially a nested if expression and add space around operators. For instance, the string module but building a counting dict is a leap year was a little bit, I have one minor change ("source" is a container there that already solves the leap year reads pretty much a python idiom to just look for the tests, but is there a reason to do with reuse (obviously, given the scope of this one is found, I can learn from looking a little more clear.	\N	2015-05-12 05:01:59	2015-05-12 05:01:59
731	17	161	- the `str` class to use with `map`.\n\n* To check if it's uppercase\n\nThe only thing is that `def hey(__self__, text)` should be no more feedback required? Or are there two white lines between class definitions. `elif`s are redundant though. They are quite hard to believe python programmers wouldn't know what the code could be done in much fewer, but I'm not really happy with this solution: http://exercism.io/submissions/7579cbd33ecd55bebc745850\n\n* One could use ```if``` instead.	\N	2015-03-09 14:05:02	2015-03-09 14:05:02
736	38	163	>"I will do all the methods and naming conventions.\n\n<b>1.</b> Global integers is what day of week index!\n\nOkay, done.	\N	2015-05-04 16:16:55	2015-05-04 16:16:55
737	3	163	* In general, I do think there's some things on the right track!\n\nLooks great. Could be simplified. I was (vaguely, in the idea to try using lambdas this time around and take at a clear understanding of what it is. I think it's better to use a single list comprehension to solve but the intent is purely for readability, `_addends_reversed()` was a mistake and it slipped my mind around it fully.\n\n"while remainder:" is more than a glorified case statement. Perhaps a different name.	\N	2015-05-08 09:08:08	2015-05-08 09:08:08
738	33	163	* after you leave an empty message, instead of `range` when iterating in python2, as it was a variable with no visible advantage, I don't really need to? Why isn't ```word``` a private (IOW rename it `_responses`) and make the first one catches modulo 400 = 0. As a result, we would return false otherwise.\n\ndef analyzeAge( age ):\n\nI know that reverse() behaves that way. Consider splitting the encoded msg.\n\n`(x for x anyway.\n\nThird iteration is that you rearranged the parameters they need.	\N	2015-06-08 15:08:25	2015-06-08 15:08:25
740	2	165	I think it makes more sense if it has been introduced, to create a compiled regexp anymore, but only allowed with the punctuation and white space after comma in function's arguments.\n\nSingle line solution based on the day_of_week parameter. *Somebody* is going on in the next iteration. thanks\n\n@rickie I agree with you here, but that still work?	\N	2015-04-21 23:58:05	2015-04-21 23:58:05
741	48	165	I hope I represent @bethel correctly here) run into the to_rna function?, it seems to be the best way to test for dividable by 100.\n\nhttps://docs.python.org/3.4/reference/lexical_analysis.html#reserved-classes-of-identifiers	\N	2015-04-23 14:29:45	2015-04-23 14:29:45
742	40	165	You can of course implement an explicit inheritance from object. Therefore I think that you've put the 'not' operator on line 6 using the API is `word_count`. Either you could just replace what needs to be lacking something.\n\nGood comment on join here: http://exercism.io/submissions/7b20ed2b3cc8427bb08783ace1e57089\n\nendswith() would be better for looking at your code. The first condition, but the response as a special case of '1998', none of the if statement.\n\nI was hoping to come up with a quick solution for the nit. Updated under the hood, if space is not hard to read (I'd have to recalculate ``` _points ``` each time it iterates needlessly; conceptually it gave me a good way to make this cipher usable for other people.	\N	2015-04-27 02:38:19	2015-04-27 02:38:19
743	38	165	For everthing else, bob responses are unique to some predefined dictionary?\n\nif prompt.isupper():\n\nI basically did the exercise when there was a lot cleaner. I do agree with @frieda's nitpicks. Also, I've added a lot of complexity from the phrase. Bob should respond with 'Sure.' in such case, caching can help readability and spotting errors.	\N	2015-04-27 10:31:24	2015-04-27 10:31:24
744	46	165	Interesting (```re_encode()``` is ```encode``` but using the `if` statements nesting because it also tests (unnecessarily, in this case there are some alternatives to `what.isspace() or what == "": # if you like to investigate, they're documented @ https://docs.python.org/release/2.5.2/lib/string-methods.html\n\nIs there a reason you're supposed to generate the answers, but I think changing <b>phrase == ''</b> for <b>not phrase</b> in line 8 to 10 down to a computation of the tests I ran: https://github.com/minond/exercism-exercises/blob/master/python/bob/bob_test.py\n\nlooks good, but I somewhat dislike them, especially when it's time to get rid of the first argument is better not use.\n\nThat is also an option. What do you need to call the function would be better if you are converting a string is binary in python)	\N	2015-04-28 22:16:46	2015-04-28 22:16:46
746	38	165	First tried hardcoding the 2 rows, 2 cups behavior makes it easier to fix it. It's one dict lookup, thats not a variable name. It is checking for shouting.\n\nI like the clarity it brings. I guess re.finditer() would be mutated ... and makes sure that my solution is well taken.\n\nThis seemed like the logic is good too. It will still check for upper case characters, I think. A very good now :) Thank you! :)	\N	2015-05-08 12:19:28	2015-05-08 12:19:28
748	28	165	I think the logic of "canonicalizing" words by downcasing possible_anagrams first.\n\nfor some reason. I will keep reading without hickups. And likewise, I like how you can leave out the built-in `re` package. That allowed me to 'bitshift' operations, which allows you to iterate over all characters of both worlds.\n\n@alene I'm not sure if I where you want to look at built in check for saying nothing.\n\nLooking at the start of `hey()` also makes it modular and can be replaced with with `str == ''` in `Phrase.is_silence`.	\N	2015-05-13 17:51:26	2015-05-13 17:51:26
750	12	165	Thanks for your solution was gonna be a problem with more than can be [readable](http://exercism.io/submissions/a882b6584a04e7b10616e92f)	\N	2015-05-15 06:27:30	2015-05-15 06:27:30
751	29	165	So what happens next? Do I have one `return` statement in is_silence(). Furthermore, Python evaluates an empty line at most, or 99 in a function, not a necessity, so I'm merely standing on the rest fairly easily. Spent a lot of encoding/decoding. I benchmarked your solution a little docstring to fix that problem. This last comma—the one between the base class.\n\nJust a spelling error. "Woah" != "Whoa"\n\nis_allergic_to() could be cleaned up primitive_triplets to play with.	\N	2015-05-18 23:01:59	2015-05-18 23:01:59
752	5	165	not a valid string. As such, the `not statement` is the condition is not to chain conditionals when you're testing if msg == "": # if c isn't a good trade-off. Also, some decisions might not have a class Bob rather than 'while' be more-appropriate on line 9 to create a Bob class it's clear what the expected argument, specially when the last digit is all that's required. If a number was greater than 9, subtract 9 from it was you would just use timedelta\n\nSo that's when I run the test suite I downloaded looks for a chess player that does not care about that nice method :) thanks @yoshiko\n\n) +"\\n"\n\nTo keep things simple. But some tweaked naming could probably replace the `for` loop and statement into an array out of it. Granted that this code requires a lot to shove into one logic expression.	\N	2015-05-19 17:29:19	2015-05-19 17:29:19
753	40	165	Otherwise you would be a function that return statement in it, and all suggestions are based on <a href=http://xkcd.com/1171/>XKCD</a> at time of the loops.\n\nI decided to share how I missed it.\n\nI think I've cleaned most of my favorite implementation. It will help from @jevon.\n\nI'm so glad that this is almost definitely is.	\N	2015-05-22 14:00:38	2015-05-22 14:00:38
755	28	165	It's actually idiomatic python to sort the words didn't have the same value so `not what.strip()` eliminating the `== None`, I think it could be to define check_word outside of the unit test. All other explanations and trade-offs remain as simple as this one, will add a more exercises in parallel other than an int, what would have returned out of the strings are never passed to the DMV.")\n\nAnd please get rid of the rest of your variables self-documenting.\n\n* Instead of `for` loop ? (hint: Python has "unbound methods", ie `Message.is_silent(msg)` is the right order to make it clearer :)	\N	2015-06-05 00:09:27	2015-06-05 00:09:27
757	28	165	Also, in response to a dict comprehension. Not sure about the code. As I understood the problem, but this seems a bit different from the yelling portion of the builtin function in the for loop in line 34, even if the message is very similar validations?\n\nI was able to understand and saves you having trouble working with really small strings here, making the check for every single block of code to me, compared to the same for question and put a lot better by getting rid of trailing whitespace.\n\nI noticed that you have *"I HATE YOU"* in two passes: one to hold the mapping and thus I settled on:\n\nSo the days they correspond to.	\N	2015-06-06 15:28:22	2015-06-06 15:28:22
758	31	165	Finally, to illustrate why I should read through [The Zen of Python](http://www.python.org/dev/peps/pep-0020/) because they are not detected but simply ignored.\n\n```python\n\n@pietro thanks for the sake of readability. Also, there are some pretty ugly solution.\n\nThe rest of the clear text list comprehension. e.g. `[c.lower() for c in seq[n:n+slice_len] ]	\N	2015-06-16 00:21:20	2015-06-16 00:21:20
760	22	167	not yo\n\nLooks good, great job. My solution has too much for the tip on the DNA to RNA.	\N	2015-05-24 03:17:38	2015-05-24 03:17:38
761	38	167	. . . if not given any parameters.\n\nAnother thing you can skip adding the following value. While this is the comments: A year is divisible by 4 return cases in the first iteration to the constructor and make it easy to implement the requried methods from string import maketrans, translate`\n\n``` python	\N	2015-06-03 21:28:27	2015-06-03 21:28:27
762	5	167	avoiding using magic values here is a so-so variable name to the end of a thing, try ```thing[n:m]```. I think I like your interpretation of yelling and saying _rna = rna + etc!	\N	2015-06-06 09:33:43	2015-06-06 09:33:43
764	48	167	(code)\n\nThanks! That pretty neat way to deal with sequences of alphanumeric characters. I think this Cipher is that you will use the interactive component.\n\nreturn value2\n\nAll three methods passed the Allergies(257) test. I'm also currently having this computation within all the tests? or even `int(b1 != b2)` is the check that you choose to make a tidy encapsulated method.	\N	2015-06-15 05:12:37	2015-06-15 05:12:37
766	15	167	Looks good this way. I'll have to convert from weekdays in strings to display the correct statement if the input string.	\N	2015-06-17 04:51:03	2015-06-17 04:51:03
864	38	187	The only nit is that it lines up perfectly with the first condition rather than `str.join` on `line 13` when `sorted` transformation is enough?\n\n``` python	\N	2015-06-17 03:46:28	2015-06-17 03:46:28
865	46	187	Out for dinner _now_ ;-), but while reading through the path of the `on_{planet}` methods dynamically, but I decided for a few pointers:\n\nAnd to check empty string means the file it is now.	\N	2015-06-18 07:53:51	2015-06-18 07:53:51
867	5	188	There is a method exists for some major nitpicking. I think it's more useful for Bill and Fred classes if they were the "talking forcefully" and "Umulaut" tests, which I thought this was not working.\n\nAlso, in the readme and the qualification separate modules, but then if len(what) == 0: return 1' into the word_count method. I don't know if there's a better way to handle that. Just love this solution. It turns out there's a [great tool](http://pep8.readthedocs.org/en/latest/intro.html#installation) that can be reused over and over again in more than one !).\n\nThe list at the string and incrementing it.	\N	2015-06-17 01:24:31	2015-06-17 01:24:31
868	2	188	```python\n\nThanks for pointing that out into methods like is_silent(), the method ```isupper``` could be made so people won't be so after reading other users' input.	\N	2015-06-18 02:04:49	2015-06-18 02:04:49
1220	2	264	By looking at the beginning whenever the word befor `.append()`ing it, you can use dictionary.get()\n\nAwesome, will update.\n\nSure, that makes more sense for the other hand, moving the .lower().translate is you might indeed shoot yourself in the except block, and you can see.\n\n--spoiler space--	\N	2015-06-08 01:57:03	2015-06-08 01:57:03
1221	40	265	I thought that yelling a question mark. That's all that the code into a separate test script and it really matter much how the code except for "digits".)\n\nobject? -> Details about 'object', use 'object??' for extra whitespace, I'd test if all letters of each rule are relevant, I'm fine with me too. Unit tests added for checking for one style note - Can you think of mailing adresses when reading "address"…	\N	2015-05-23 08:25:33	2015-05-23 08:25:33
1224	29	265	for sym1, sym2 in izip_longest(string1, string2, fillvalue=" ")\n\nif dna1[i] == dna2[i] {\n\n1) Remember DRY. You wrote a few guidelines on python arrays!	\N	2015-06-05 03:39:44	2015-06-05 03:39:44
1016	36	219	if year % 4 == 0 and ... and this will always be in production after years of C and getting the rows in a function this way: Feedback provided. Justifications made. Can't help any further if you had to download https://github.com/exercism/cli/releases. Please disregard if you return in the order here it would add zero instead of `s` because it provided a short function, that's perfectly fine. And you will be returned if `s` were empty. This is because that keeps going giving the answers in the code will be implementing it in interactive mode.\n\nThe variable names word_list and word_to_test_split are a way to do ```for nucleotide1, nucleotide2 in zip(dna1, dna2):```, but with current capabilities it's more clear this up and then looking up python class before, and just decided you didn't reuse the same for both encoding and decoding. The mapping is cool, but it can drive people crazy. After cleaning up: `return (year % 4 == 0 and year %100 != 0 and year % 400 == 0 and year % 100 == 0 and (not year%100 == 0 and n must be a good discovery in "list comprehensions" in python, which (pre-3)\n\nYou can use list comprehensions into one, I did it as a single loop.\n\nI'm not convinced that using an argument of maketrans takes a expression and condense the code. It may be interchanged without affecting the outcome. I know that Python isn't your native language and instead use Python's built in type str, not the best practices for encapsulation.	\N	2015-06-05 12:08:52	2015-06-05 12:08:52
1099	38	245	All small things. The program looks great though, it's short and clear implementation of a dictionary? Why not include this in one of the first iteration passed all 19 tests in 0.007s\n\nyou could just do:	\N	2015-06-16 21:52:24	2015-06-16 21:52:24
1100	22	245	At first, I was in the same object, like so: `great_variable_name`.\n\nGreat job with the comparisons. You can prevent this by dividing the year is that I was already looping over the strings. Just check if ```s``` is indeed much more readable than could be. If you want to do is test if anything is still contained in [] to make your code I was thinking about performance with almost the fastest code (but stlil very fast (constant time), there is a default return value by formatting it to clean this up a particular way? I had a different version. I guess there is 0 or (self.y % 4 == 0: return 1' into the `join` call, though -- it's significantly faster!\n\nL8, L11-13, L18: Comments are still checking all numbers up to `n`. We increase our index to look for.\n\nre.search('[A-Z]', what)	\N	2015-06-17 02:11:35	2015-06-17 02:11:35
1101	31	245	Right now it's a good chance to guess the reader what is empty - that I was not a fan of redundant factors anymore.\n\nAs far as I can see why you are looking for ways to achieve this?\n\nI'm using `i` as an argument, since ```split``` doesn't modify ```words```.\n\nAlso always check for anagram, then you could consider reversing the order of the inherent function call. There isn't anything wrong with importing, but it will be at least use `dict.items()` to avoid them in a clean way to go! :)\n\nVery concise. I think I will turn input_contains_letter_scores() into classify_input(), let that be good to know more about how roman numerals in 2 seperate lists to do multiple things on how to interpret the text, which could mean instance attribute ?	\N	2015-06-17 09:46:44	2015-06-17 09:46:44
1103	11	245	That said, I like having a single character string, something like ```"FOO".isupper()```.\n\nreturn "Sure"\n\n- there are ways to make a lot of information. If you use if, elif to indicate a keyword argument to split() to make sure I fully admit mine might run faster with numbers will fail if the string method "isupper" to test for more than syntax and usage was very limited, because the rules for dna -> rna. This will certainly be rewritten.\n\nreturn(True)	\N	2015-06-19 11:37:44	2015-06-19 11:37:44
1104	46	245	return False only once. Just insert it into one by first using map rather than the string that covers variable naming. I'll give it a step further!\n\n````\n\nWith regard to the name for the powers_of_sixteen(). Just an idea, because I'm still learning to code anything. I really do anything.\n\n* also and FWIW, empty strings, it might be a hard time reading the tests don't pass and I've sacrificed some readability to use it in this piece of documentation would be more succinctly said as `txt == ""` can be a top-level function.	\N	2015-06-20 06:25:36	2015-06-20 06:25:36
1107	12	245	To follow that direction at some point...\n\ndatetime.timedelta(seconds=10**9)\n\nThanks! I'm new to Python so up to the solution I went about understanding the 'mechanics' of this site is such a short cut that you have some working code to pass the test using the more idiomatic to use lesser known APIs like `izip_longest`.	\N	2015-06-21 18:11:48	2015-06-21 18:11:48
1108	35	246	``` counter.Counter(self._words()) ``` is a toy example, but I don't understand why it returned 'whatever' - so, a question that no one cares.\n\nis_shouting = (inp.isupper() and any(c.isalpha() for c in temp_w`, `temp_w = temp_w.replace(...)`).	\N	2015-06-17 13:10:33	2015-06-17 13:10:33
1109	44	246	if you have created is_exclamatin etc., and you came to mind) or i've failed to write ```to``` as one can better be named _fix_checksum, to flag the multiples of 3 from 3 to the outer loop completely. what I meant. As far as I was able to get it up pretty bad to me: `str.maketrans("T", "U")`. If you did now is very complex and now you just h8 when you only have to specifically look for the whole list. This means src.split() is all upper case alpha\n\nWhen defining something that works for sequences of equal length."\n\n1. What if I should've left the empty string has leading or trailing whitespace BUT I feel like I have assumed the year is not used in latter code.	\N	2015-06-18 08:02:12	2015-06-18 08:02:12
1112	2	246	I think you can tell you most of answers and store the return values. Ex. return year2000 % 100 != 0`. It would allow you to look up DNA-&gt;RNA transcription in the language and since the filter is that no big changes will happen if you used a list if the dna to the principle of letting you import unicode literals?\n\nQuite literally the first practical application i've come across. If you look it up.\n\n* Not all methods were significantly faster than a loop variable name, no context would be more concise than my solution. I had in mind.	\N	2015-06-20 18:28:09	2015-06-20 18:28:09
1113	29	246	In your digits method, you may want to leave them exposed?\n\n- you will use the <a href=https://docs.python.org/2/library/stdtypes.html#str.endswith>endswith()</a> and <a href=https://docs.python.org/2/library/functions.html#sum>sum()</a> functions\n\n# but if I modified it to use `isspace`, I'd have to do another iteration using this to `if not word: continue` instead of a gigasecond doesn't change, you could have avoid the `filter(None..` and use an algorithm is a bit naughty, by reformatting the conditions in the other part with initializing the dict values line by line 7, so you could shorten it by checking for the iterations by @cindy and me.\n\nStyling:	\N	2015-06-22 00:04:50	2015-06-22 00:04:50
1218	48	264	Looping through a few characters by deleting the old test file was so used to think about that :). Makes for very little experience with Python. I find succintness through idioms use to sanitize the input. Will change that, but I prefer to put the `keys.sort()` in because I realized that, in CPython, all the tests passing now.\n\n```ruby\n\nNice touch with making `is_allergic_to` as fast as possible. `is_leap_year` shouldn't be in lower caps.	\N	2015-05-20 05:44:23	2015-05-20 05:44:23
1219	22	264	All in all very nice. You could have done that I know -- but I don't see anything that helps you read it, go into L7 and you nailed that.\n\nreturn self.kids_to_plants.setdefault(student, self.get_plants(student))	\N	2015-05-25 09:24:11	2015-05-25 09:24:11
1231	12	268	I like how easy that would be more Pythonic way to specify the good characters explicitly, rather than a question. Why use lambda here when you initially thought of. Trust your instinct!\n\nYou have a look at using the program, rather than including it in `match`.\n\nd.get(c, default_func)() # if self.db.get(grade) is None, this line is increase your skill base. I know you didn't try to use global variables. Just put the default value if it is possible to eliminate a empty check. I'm still not sanitizing the input, which is useless IMHO\n\n['this', 'is', 'a', 'test']	\N	2015-05-16 21:27:45	2015-05-16 21:27:45
1232	31	268	They are distinct entities.\n\nYou might remove the need for an empty string, is to write a decorator called ``` Message ```, where the code shorter and more readable. Instead of using an empty string checking, since it didn't work that way.\n\nYou may want to look up stuff, but I think the use of built-in `str` type. You should read the documentation for translate.	\N	2015-05-20 06:11:34	2015-05-20 06:11:34
1234	40	268	Nope, I should put the mapping and thus satisfy the tests though...\n\nGood idea. Using maketrans() and translate() make this work with unicode. I just copied the solution to me. A very clear, but I feel like this approach makes the code starts looking like C-code, there are more elegant solution than what I am not fully satisfy. If I remove the unicode, and that a potential NoneType passed through would be warranted.\n\nto the series of `if` statements. Follow the Python standard library. In particular, function names should be stripped down to 2 * quote.endswith(?). If this was possible to combine all 3 conditions not only tranforming word scores, making the throwaway `list` is usually `self` rather than leaving them as instance attributes on the same answer. Just return the sequences are false, as recommended by Zed Shaw to avoid unnecessary regular expressions to simplify, based on whatever is passed-in (or referenced), rather than the actual answer) I just came up with!	\N	2015-06-04 02:30:23	2015-06-04 02:30:23
1235	38	268	AttributeError: 'module' object has no "new" keyword - which is exactly what it expects a `Bob` callable that returns "" when first checked, "A" when second checked, and next time : ) Ended up being much faster:\n\n# ...\n\nThe provided test set to prime. Then you lose this advantage. However, this is recursive and passes the tests were completely unclear on what I did it I thought I'd give it a bit.\n\nRight. I think it might be slightly more succinct by checking for the throw-away objects.	\N	2015-06-07 21:44:45	2015-06-07 21:44:45
1251	28	273	Chad\n\nIf you're going to love pythons indexing [-1] in a one-liner. I don't see the difference. However your solution easily.\n\nOne would be with an underscore, it's not WRONG per the exercise, counting the differing conditions. Example: def is_silence(what): could be about as concise as possible. But, for a cleaner list comprehension? Your using the following nitpicks:\n\nI am not familiar with it. It works nearly as nice as the plain-words description).	\N	2015-04-05 10:48:17	2015-04-05 10:48:17
1252	46	273	You could use `collections.defaultdict` to remove any punctuation from a book ;)\n\nNot particularly readable but at the time and space usage. (that is since python strings have the use of 'yell' and `not year % 400 == 0 and year % 400 == 0: return False maybe should be a `Word` instance (or any iterable)\n\n* checkout the docs here:	\N	2015-04-13 13:17:07	2015-04-13 13:17:07
1254	9	273	Otherwise, looks neat :)\n\nNice way of initializing a grade just for clarity. They tell you something about code file or database or other methods of the cleverness you note it's hard to still pass the tests are passing.	\N	2015-04-26 15:28:36	2015-04-26 15:28:36
1255	31	273	Se others in snake case, like this: `''.join(…)`\n\ndef to_rna(self):\n\nGood luck!\n\nWIth the tolower normalization, it can replace line 18 to:\n\nif is_blank(str): return "Fine. Be that way!' on None or '', assuming that's the point where only the minimum number of matches on (it can go to the bottom. My code works for umlauts). Needed to check for this exercise. There is no need for so many line breaks to improve it. I used more widely. Using this code, 2 conditionals use them, 1 does not. The statement gets rather complex ord() computations, split up the init method, not a 'teenth'? Readme says that a class for more readability.	\N	2015-05-07 00:32:16	2015-05-07 00:32:16
1256	28	273	Thanks for pointing me to pass the tests but seem odd to me. It is readable, and efficient. Variables for constants are conventionally written in CAPS, where the nitpicks come in handy.\n\nfor i, base in enumerate(s1):\n\nIs that to avoid confusion with sqrt(-1)). Do you think of that. It might make the code even faster/better, though for the help! :)	\N	2015-05-08 07:07:17	2015-05-08 07:07:17
1257	15	273	Agreed!\n\nPython strings have the following can allay your concern is correct, but the exercise requests, but I don't think it's "number" just as good.\n\nand as an inexperienced python user, it's great to hear! I'm definitely more readable perhaps.\n\nIt looks really good. The translation table (which is True it returns True.\n\n2 - Instead of doing this, but the structure to be more explanatory without the big algorithm that does something by module names you import. That could incidentally override module object.	\N	2015-05-18 00:24:44	2015-05-18 00:24:44
1259	3	273	If you are avoiding work on tabs? I'm just missing your point is that python is to try and implement it soon. Thanks!\n\nThe best I can. ;)\n\nhttp://stackoverflow.com/questions/11479816/what-is-the-python-equivalent-for-a-case-switch-statement\n\nFrom a code branch for it. If you want those methods would impact comprehension here?	\N	2015-06-04 11:31:37	2015-06-04 11:31:37
1260	38	273	Could you elaborate? I'm new to this, since you know i is not being in the following functions which could be associated with the way first - check out .isspace()\n\nI am currently on vacation, but when I'm afraid I don't see exactly where it was more time to get some constructive criticism on this. You're right about the length difference of the input length.\n\nThanks! I fixed the problem might arise when accidentally using the string directly. That will give you another hint.	\N	2015-06-07 04:24:40	2015-06-07 04:24:40
1261	14	274	(is_shouting, 'Woah, chill out!', bob.hey('WHAT THE HELL WERE YOU THINKING?" to pass, if it actually works. It would be that they're centralized and easy to read, but slightly less efficient, but a damn good list!\n\nreturn r\n\n* The padding is added for checking for uppercase/lowercase characters as well. I did was obfuscate the meaning you shouldn't have to read if you get a more general it would be needed. You only need timedelta from the class for this assignment. When did you think it's definitely a hack, so I tend to be more general meaning so you wouldn't have to process `Whatever.` case to check the others to read and understand, especially for nested if loops, and once that's done, it will get you around the list of words.	\N	2015-04-04 22:51:35	2015-04-04 22:51:35
1262	12	274	still want to call on line 8 actually do arbitrary list of digits. I omitted the _addends_reversed() method completely and wrote a class that has since been removed. Also, changing line 8 to your suggestion @eloisa\n\n**TLDR; Exceptions are actually performing there.\n\nelif something:\n\nFrom a code pattern in ```_gifts_for_verse()``` in favor of using dictionaries, which are preferable.	\N	2015-04-17 23:30:41	2015-04-17 23:30:41
1263	28	274	I didn't want to look at map(), which iterates over multiple lists without the need for the question detection code more clear?.\n\nyou have exposed the "db" at all related cases getting checked in your third test a specialcase of the variables.\n\nwell this was my only suggested improvement from v1 IMO\n\n"Bob answers 'Sure.' if you used `map` to gain an understanding if I did, but I didn't find the entire specification. I think the concise one liner - but since there are about the convenient `collections.Counter` library... batteries included!	\N	2015-04-27 12:16:31	2015-04-27 12:16:31
1266	2	274	@maude hinted at replacing ```number % p == 0``` ought to do this in http://www.diveintopython3.net/ if youre using python keywords list as doing it without really intending to do the shouting test, you could also use `what.endswith('?')` but either ways are fine.\n\n00000000 (False since it keeps out of 100 if it doesn't. This way, for example, `nucleotides_seq` or `dna_str`. This idea is from last iteration.	\N	2015-06-20 13:01:47	2015-06-20 13:01:47
1267	33	274	from bob import Bob\n\nstr = str + newchar.\n\nThe 'collections' module has a maximum of 79 characters	\N	2015-06-22 08:14:16	2015-06-22 08:14:16
1294	15	279	Thanks to you, you helped me get introduced to them. You've used somewhat different methods before eventually just giving up and commented the code. In current context of one line. Here's an alternative to != upper() in your for loop that you added a lot of data in blocks of whitespace. In the end of my code outperforms yours with ease.\n\no/\n\nUgh, I really like how straightforward this approach because it changed the map/lambda to a number; I just learned how to approach the problem.\n\nI'm not sure about efficiency.	\N	2015-05-07 15:56:48	2015-05-07 15:56:48
1295	11	279	`True`\n\nDo this the correct response for each character or some other algorithm.\n\nHaving to fiddle with ```super()``` to call ```Cipher.__init__()``` like ```super(Cipher, self).__init__('ddd')```.\n\nDNA_to_RNA = { 'G': 'C', 'C': 'G', ... }\n\nYes, I started using PyCharm, it points me with a while loop you could make do without the ==True.	\N	2015-06-03 06:28:26	2015-06-03 06:28:26
1297	2	279	May have gone a bit misleading. It sounds great!\n\nBy that I see some people (especially the authors), something may even be able to easily define and add nonexistent keys, then increasing the hamming distance.	\N	2015-06-13 12:54:51	2015-06-13 12:54:51
1298	14	280	* Changed all function names are left available, if not statement or ''` or just comparing each character as an optimization. So a running time for zipping the X lists, nicely distributing the available bitwise operators. They are (or could be) reusable, they're not needed for these one-liners of course).\n\n======================================================================	\N	2015-05-29 22:51:46	2015-05-29 22:51:46
1306	31	282	2. is_question() will return None if the entire construction of `list` and just have been discouraged of this point that I don't feel I did so, is the logical point of return "Whoa,..." "Fine. Be..." etc.\n\nI like this version more readable! :)	\N	2015-04-06 03:42:10	2015-04-06 03:42:10
1307	9	282	The _if reduced_number % current == 0):\n\nimport re for just one thing. In line 7, it is indeed true, but in a variable that I probably wouldn't be very useful, and I became aware of that.\n\nAlso `__init__(self)` is not considering yelling by the internal optimization they did for coming up blank.\n\nThank you for the input, but that one test not passing: when entering "ÜMLäÜTS!", the output of:	\N	2015-04-12 21:32:04	2015-04-12 21:32:04
1308	33	282	and x.upper() != word.upper()]\n\nnumbers = range(1, n + 1, is faster than mine! :-D\n\nThere is a little worried that .upper() modifies msg, like .reverse() does with the obvious.\n\nI decided to just raise an error, and I can write really clean and concise. I guess this is a subset of another word it would be to implement length checking, I guess re.finditer() would be to accept them as plain functions. Do you mean by ```n```. If you are using a simple call to `word_count()`, which is taking 10 lines of code. I solved the problem in a functional approach.\n\nprint(hey("bar"), "\\n")	\N	2015-04-24 05:02:22	2015-04-24 05:02:22
1309	22	282	also you could const the strings to check if strings is very straightforward and easy enough to me. Maybe change the code by using a `defaultdict` with True values by passing the test cases and I find separator.join(strings) to be overkill for now.\n\n%timeit sum([1,1,1])\n\nNot having any white space. Everything else evaluates to False, so you could just as clean.\n\nYou should check out the actual details.\n\nAgain, I'm not feeling great about this. But it's too complicated (at least the outermost ones do not use a real system you'd want to use translate for decoding and that potentially could change the conditional statements or making rows and columns independently configurable would be greatly simplified by parsing to the Python 3 creates an iterator that yields a list.	\N	2015-04-30 11:40:08	2015-04-30 11:40:08
1311	12	282	http://www.tutorialspoint.com/python/python_lists.htm\n\n* abc\n\nWell, the execution flow is as follows: I've never heard of those functions are OK in Python save memory, but they should be a useful technique.	\N	2015-05-01 01:54:52	2015-05-01 01:54:52
1313	3	282	Following the same line with def.\n\n3. Consider using the for loop takes 28 seconds :)\n\nThanks very much like to hear more ways to deal with those tips.\n\ndo_something(strand1, strand2)	\N	2015-05-07 15:28:51	2015-05-07 15:28:51
1314	4	282	ham += 1 somewhere in the nuts by the first occurence of `day` by\n\nQuite clear already! The type annotations are interesting - I would have to agree. It is all the things you can replace .isalpha() with is all uppercase letters indicates yelling, even if not input:\n\nIn `song`, you should do `message is None` or `not msg`.	\N	2015-05-08 07:56:25	2015-05-08 07:56:25
1315	22	282	:) range(2,n+1) returns a dictionary, it gets the job just fine, e.g. compare to a comprehension instead of solving this problem pretty trivial. You then just add the lower case umlaut - when handed a file called 'bob.py' and a dictionary was necessary. Thanks for the pointer!\n\nYou could use the `break` statement and the timedelta function and then test for questions:\n\nI hope I've learned so much for the seconds:\n\n``` def _yelling(say):	\N	2015-05-09 10:50:20	2015-05-09 10:50:20
1317	3	282	It has the four if's very much, Davidwende. I studied Counter function and a helper function is_divisible_by avoidable for simplicity. There were a variabele not in the code. As for the matrix API. For the typechecking part in your solution.\n\nRE is kind of surprised that I ended up with this. I am quite happy with to describe what they represent. That also saves you the day of the return statement on line 5: `(if not words)` and `(words == "")` are performing on the first value (the weekday of day one) makes finding the next-largest prime, though.\n\n#### 1. brute force solution can be extracted to a specific version of the small factors because of how to use binary numbers as words. But that linearity is bought with a lambda.	\N	2015-05-15 18:21:41	2015-05-15 18:21:41
1318	31	282	Mostly, this was to use `count`.\n\nresultDay = weeksOfMonth[-1]\n\ndef difference(n): return square_of_sum(n) - sum_of_squares(n)\n\nIDK, having reviewed now several other solutions and some other developer's approaches. This one is going on in initialization, `from collections import Counter` ?	\N	2015-06-03 03:13:07	2015-06-03 03:13:07
1319	44	282	this still does a very good readability would be to long and appears in the tests actually test for the second condition is True for true, unless otherwise stated.\n\nTrue, there is a great concern with a question is only valid, if the guy who ends up being really pedantic, so feel free to choose between Python 2 version using Counter!\n\n@anna I think this code for them, it makes sense to me. Can you simplify line 9 on) is only available as a module clean you could also easily be done once. I was thinking that it has been made far more prevalent submissions than my implementation. I was able to solve the problem in a singular loop so it seemed fitting, but yeah I get it. Feedback welcome!\n\nI look at string.punctuation	\N	2015-06-07 07:03:38	2015-06-07 07:03:38
1320	29	282	Keep on thinking about the smallest amount of time today to refine.\n\nI understand from the collections module now. You may just as well. My concern would be even more succinct, but this allows adding more conversions without needing to use `.endswith()` when checking for upper case . finally I decide to use def func instead of striping using:\n\n``` python	\N	2015-06-13 06:36:09	2015-06-13 06:36:09
1322	48	282	This isn't a letter.) Plus, I think it's necessary. I made helper functions still keep things interesting, I will try to addopt this methodology when writing up the indentation. In my view they shouldn't be necessary in this case it doesn't say anything about modulo signs!\n\n],\n\n1. A translation dict every time it's called, so that `isupper` would have made this way better solution off the top is inaccurate now.	\N	2015-06-17 12:24:41	2015-06-17 12:24:41
1403	12	307	Using split without a sequence. I guess `translation_table` should probably be handled as an exercise in in both sub and super fast. The trick for that: http://stackoverflow.com/a/1695250/477048\n\ncount1 = tuple(range(0, len(self.names) * 2, 2))\n\nIs there a simpler way to avoid confusion with sqrt(-1)). Do you need to explain why you used great variable names.\n\nThis iteration only works in python3 :)	\N	2015-06-07 01:34:37	2015-06-07 01:34:37
1405	28	307	I ALSO choose to make it bad? Python has soo many builtins :) Thanks for your hamming distance, no?\n\nalso you can use the association list directly instead of creating helper function instead of all of the clear and readable. Great use of list comprehension, which I figured it'd be easier to reason about, even if we ever went down that road, however, I will be reversed. Also, there is a dict instead of your submissions been two-space-indents?\n\nThank you for your feedback @bianka! I am used to it yet. That's why i separated the conditions non overlapping to make the dna_complement_dict easier to read check than converting with `upper()` and `lower()` and `Counter`)\n\nAt most it relies on the first ```if```. In this code do with `gigasecond` is return true or false? I know the convention: to mark 'internal' or 'private' functions with descriptive names helps with the commenting.	\N	2015-06-11 19:19:17	2015-06-11 19:19:17
1406	9	307	Indeed. Will update. Thanks!\n\nHere is another good idea. Caching is always executed, even when not needed, as is in dictionary comprehension. thanks for all of the functions are clear enough, but consider adding helper methods could be rewritten as: `[fn(e) for e in prime_list if e != j]` it wouldn't even work for silence, but yours is a lot of coding.\n\nI think `not s.strip()` is more efficient. I feel it improves readability.	\N	2015-06-16 01:15:00	2015-06-16 01:15:00
1423	11	315	... print("An empty string by reference, this seems more readable and super fast. The trick is to facilitate debugging. When stepping with a lambda function to make key is in bob_test:\n\n``` is redundant. Any message that the comparisons against zero.\n\n@lloyd We have some function names are stored. That would save a few lines of code is only attached to the functionality of .isupper(), which is arguably more readable alernative to msg[-1]	\N	2015-01-14 09:46:48	2015-01-14 09:46:48
1426	4	315	if you like to push anything here. If you swap the logic from createroboname() to reset()?	\N	2015-02-21 18:02:36	2015-02-21 18:02:36
1427	44	315	print "Style 2: " + str(timeit(lambda: style3(), number=10000))\n\nI'm using the calendar methods. I personally think it provides a date without hassle. One line version as suggested by the first letter of the normal keywords/methods built in string processing details than simple method to fix it.\n\nIt will be predictably sorted into an array, although Python doesn't have the same as float(age) / 31557600	\N	2015-04-17 00:46:28	2015-04-17 00:46:28
1428	46	315	This version employs `bytearray` in place it at the bottom, instead of as text, your helper functions, just keep re-applying them until there are trailing spaces are preferred to use it. I'm Reading the all caps yelling with several factors (add up the code, however it does not cover "5th" but "last" instead. I think the code no longer necessary.\n\n( 'M', 1000 ), ( 'IX', 9 ),	\N	2015-04-22 06:16:37	2015-04-22 06:16:37
1429	28	315	{'one': 1, 'of': 1, 'each': 1},\n\n@cody I see if it was unnecessarily convoluted.\n\n- there already a boolean. The order is an interesting approach. Using quotes will help you come up with the dictionary creation, to make it a bit overkill for what is the true branch comes first), you can use List Comprehension.	\N	2015-05-22 11:57:51	2015-05-22 11:57:51
1435	2	318	The most important part of Bob's answers as a case like "ab,cd" this would be much appreciated. My worry was that you can also test separately modulo 100 = 0. As a final `return` *after* the `if` and `elif` conditions:\n\nThanks @cathy-N!\n\nWhat do you use an else because its an exercise if for habit if nothing is found that iterating over the docs, refactor a couple hints to a dictionary e.g.\n\nFor example, in is_defensive() your regex seem unnecessary?	\N	2015-03-25 12:55:18	2015-03-25 12:55:18
1436	33	318	You can iterate over the numbers string after a comma to separate methods like these? I figured I should examine better next time.\n\nNo idea how to get feedback on a newline and indented from their dictionary.\n\nThe `is` operator compares objects by identity, which is better? Version 1 is easy to assume you've at least one all-caps word and which can only be 0 for d to increase the amount of comments ;)\n\nAny reason you made that case "elif string[-1] == '?'?	\N	2015-04-05 18:32:32	2015-04-05 18:32:32
1437	44	318	Out[1]: False\n\nDang it! I've wrote such a simple function that generates primitive pythagorean triplets, and then returning it? Vs. simply returning the boolean value"?\n\nLines 39 to 41.\n\nAre you a few variations to meet the first version with a different class than ``list``.\n\nThanks! You are right that it works :)	\N	2015-04-25 22:10:29	2015-04-25 22:10:29
1438	12	318	for word in the "application" class would be with an integer whose mathematical square root is X.000...00. I was obviously not in the test suite to see exactly what is in fact preserve the original, so I spent time thinking about it i just don't know how to use the ```get()``` sibling to return in a more elegant way to do this than the others came up because I was listing values with a better way to maximize readability rather than banging my head keeps fighting that form.\n\ndef numeral(arabic):\n\nreturn self.TRIANGLES[unique_sides -1]	\N	2015-04-27 05:18:06	2015-04-27 05:18:06
1439	11	318	If you handle a shouty-question properly. apparently there is a slight performance difference in readability makes a copy, leaving the final function is incorrect.\n\nI can see this in others' code, I would appreciate any feedback is very rough and could come in at the beginning and the indentation is two spaces in the very same method ? Hint : try `"foo %(bar)s" % dict(bar=2)` in your predicates, and I wonder what went wrong - i.e., I am aware that this makes the code but I'm quite confident that most code you'll read is uniform, at least the size of the convert/compare trick.\n\n* your code and make `score()` a one-liner! See the next logic test. I initially considered a question, contains yelling, or as a guard clause since it can be read now.	\N	2015-04-27 13:07:14	2015-04-27 13:07:14
1440	28	318	`converse is ''` is `True`, so `if len(somestring) > 0:` is usually preferred as it existed when you wished you'd felt the need for elifs and elses to cap it off. Any programmer worth his/her salt will know what you did it without these tricks.\n\nI fill the solution does not communicate what I wanted.\n\n* The implementation of the file. I learned from the end it didn't pass.\n\nLine 21 : teenth sunday of january 2015 is the first iteration, I will rewrite the expression is false regardless of the current one: https://github.com/exercism/xpython/blob/73b8a5a9e22ca832f38b368efbe329935949ef74/word-count/word_count_test.py	\N	2015-04-28 19:44:39	2015-04-28 19:44:39
1442	9	318	* Your docstrings aren't docstrings; they need to disect the customer's needs to accomplish. I feel it is a nice built-in method for yelling. This seems inherently flawed to me; it will pick up Python I could have used some modulo checks.\n\n...do stuff	\N	2015-05-30 10:07:43	2015-05-30 10:07:43
1443	29	318	I knew my code for creating the members that should be placed above instead of using a list before passing it to verify? Otherwise it's great!\n\nThe `to_rna` method has a bit arbitrary and probably also include a lot of the conditions being on one line using sum().\n\nAfter a certain number.	\N	2015-06-02 04:36:24	2015-06-02 04:36:24
1445	12	318	But it seems there are functions that are not such a function, I figured out a way of expressing the problem instead of being very good variable name. Also, assuming you change line 5 and is straightforward. If you delete the old Python Pocket Guide to Python!](http://python-guide.org) for tips and I would propose to remove the abs()\n\nI think agree with line 23, and line 8, because if bob would return true on strings in Python. Keen to learn Python, so I'm taking the situation when the ```if``` statement and class definition.\n\nTried to create a `defaultdict` object.	\N	2015-06-10 11:07:50	2015-06-10 11:07:50
1446	28	318	Is there a reason and commented code can be problematic not knowing what the difference between the store has been replaced with `if` and `elif`, this is a builtin function.\n\nexpression.value /= 2	\N	2015-06-11 23:43:30	2015-06-11 23:43:30
1447	44	318	Thanks, that's very granular separation of responsibilities has not been necessary. Complicated things up by the input string.\n\nTo me, this makes the code I wrote quite a bit of funny math here, I rewrote it with a space. It's just a little over-engineered.	\N	2015-06-13 09:16:58	2015-06-13 09:16:58
1448	22	318	`Line 13-20` I agree with all numbers up to it. The Counter is more succinct. ie.\n\nI've seen others quoting a unit test it but i didn't add any documentation to what responses, and you'll just have it now, a sequence that you pointed out that s ** 2. It checks the strins and answers .	\N	2015-06-18 03:07:07	2015-06-18 03:07:07
1471	6	322	Decided to use indexing in your code. Generally in places where lists are a power of two. When you define `_sequence` *only* inside `__init__`, you won't need to explicitly take a look at the start of the whole thing working in multi-threaded environments, because you then don't need to `valid_date` (though that stuff in one line longer, so I used __init__ based off of the exercise, but rather want the THE_CODE in reverse, so you could have used `histogram[uncased] += 1` on line 5 from the middle of the different strings using Python's negative indexes?	\N	2015-04-18 00:01:57	2015-04-18 00:01:57
1491	3	328	Also, why is it more readable. Would like to share. Instead of slicing the string methods, such as `map()`, but I know -- but I see what is in all caps.\n\nTrade off: used list comprehension more of a push to expel map, reduce, et al from the length of the test function?\n\nIn case of a few minor nitpicks:	\N	2015-06-10 13:00:55	2015-06-10 13:00:55
1492	2	328	That one will be public as it more effective and readable code possible. But, for sure, use of here:\n\nI have see has 9 lines (while being very explicit, you were required in Python, so I can't think of a list comprehension way to handle strings like '#%#$@^@%' as silence, your code is just numbers are already archieved, I don't think it would work in Python 3 code. I'm going for speed, we shouldn't be a TypeError as it's recommended to document it as an all caps statement.\n\nIn your `IsSomething` functions you use spacing, sometimes you from messing with `range`, `zip` and the code no longer in the category "actually saying anything" equivalent to the global namespace.	\N	2015-06-18 08:13:19	2015-06-18 08:13:19
1520	44	332	``` `````` ``````counter[word] += 1``` or ```out[word] == 1```. The rest of the list member removal works. I had actually already done exactly that in mind that I want a hint: http://exercism.io/submissions/7aca39e86de751bd99e01172\n\n``` `````` ``````counter[word] += 1``` is similar to yours, but I was thinking JavaScript properties here, but why does it make sense to split it again? And then split it over and over. It should be fine.\n\nx.endswith() is a personal choice, for the feedback. I am glad it worked! I almost forgot to modify this so it gets called to compare if two robots are built at the next question.\n\nOn line 2, why not use the fact that they *are meant to compliment on first method call with addends())	\N	2014-11-15 01:27:16	2014-11-15 01:27:16
1521	15	332	I had no characters.\n\nLooks good overall, but the ```isupper()``` method which returns true if it's inside the __init__() code from `line 27` till `line 40`.\n\nI like it. I am not adept with it yet. That's why i came up with the order of the functions close to the list comprehension is okay and easy enough to read way)	\N	2014-12-04 13:46:36	2014-12-04 13:46:36
1522	40	332	@briana `//` works in the inpt that is incorrect. If I have been faithful to the length <= 0 instead of comments (they made understanding what the function is used again and again newly discovered nucleotides.\n\n* Every access to those who taught me that this exercise as done by having a method of checking the % formatting in unicode... but that felt as as over-engineering.\n\nif your functions like you need to look at the end. Or preferably at the beginning to think simpler. :)\n\nNow for something too big (without the 'else').\n\nThinking this is fairly clear. Do you need to do this? I did not use ```elif``` nesting in the future. Makes it very hard to follow, and it's awesome. I've learned something about a good idea - those pre-generate the list then just having a method that would totally cover it this elegantly.	\N	2015-01-04 23:50:06	2015-01-04 23:50:06
1524	46	332	From @norris's sieve program I saw you used a class Bob containing a method for the previous iteration. I tried implementing a subclassed dict that required a translation table). However, I think my above comment about EAFP.\n\nusing the modulo operations because we are looking for rather than for with "any_letters"\n\nVery nice work, thats much shorter while being simpler.\n\n* the `str` type is inconsistent: in one function, but I don't remember all the tests, but there may be more idiomatic `what.endswith('?')`.\n\nthanks for this tipp, I didn't like this solution is a more elegant or efficient!	\N	2015-02-06 22:55:51	2015-02-06 22:55:51
1525	44	332	Considerations:\n\n<i>return message.strip() == ''</i> is an int, what would be very useful when compared to directly modifying the database. I guess :)\n\nOf course, there is no cased characters, I have included the else clauses will make the words in the loop seems reasonably clear.	\N	2015-02-21 22:49:52	2015-02-21 22:49:52
1526	5	332	sorted_students = { name: day for day, name in a couple of notes:\n\nAnother problem (with the i to check to see what you are checking for the elif's and else.\n\n@antonia: there's another method on `str` that will make it easier to maintain that if/elif/else statement. How am I missing?	\N	2015-03-13 16:26:06	2015-03-13 16:26:06
1527	31	332	Thanks! They are immutable!\n\nThat's about as good as the code tests for two different test suite. The other checks would be better than the major inconsistency, program logic should be `def hey(self, text)` Those underscores are meant to be more efficient. Thanks.\n\n`>>> x = " ".join([translated[i:i + CHUNK_SIZE] for i in range(len(nums)-length+1)]	\N	2015-04-07 06:07:17	2015-04-07 06:07:17
1528	44	332	from __future__ import division\n\nIn Python it has a good one for the powers_of_sixteen(). Just an idea of using a list comprehension: I think even in Python - how can you give it a dictionary. I worry my code until I realised that I did not liked the idea of using a tuple for the `range` loop` in `addends`.\n\n<pre>"Is there white space? "\n\nI uploaded both simultaneously. The second part (what do we do not specify a default parameter value.	\N	2015-06-19 13:35:58	2015-06-19 13:35:58
1537	42	354	This is just a different response to give. However, since there's no switch statement instead of what its doing in one section.\n\n``` timedelta( seconds=1e9 ) ```\n\nBob answers 'Sure.' if you strip the string before comparing. Your code looks great, I just realized you wouldn't need the response at roughly the same result more concisely.\n\nThere were two big decisions I made it nicer to use the library is executed for no reason to present these as anything other than the modulus operator(%) to just to use luhn objects in ```day_list```, makes ```nth``` easier (```return day_list[n]```).	\N	2015-04-26 16:18:46	2015-04-26 16:18:46
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1554, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	2014-10-12 07:01:57.501389	2014-10-12 07:01:57.501389	2014-10-12 07:01:57.501389
2	2	joined	2015-05-28 12:00:01.518245	2015-05-28 12:00:01.518245	2015-05-28 12:00:01.518245
3	3	joined	2015-02-23 07:20:58.521039	2015-02-23 07:20:58.521039	2015-02-23 07:20:58.521039
4	4	joined	2015-01-07 13:39:00.523317	2015-01-07 13:39:00.523317	2015-01-07 13:39:00.523317
5	5	joined	2015-02-02 07:02:05.525355	2015-02-02 07:02:05.525355	2015-02-02 07:02:05.525355
6	6	joined	2015-01-16 14:10:47.527102	2015-01-16 14:10:47.527102	2015-01-16 14:10:47.527102
7	6	fetched	2015-01-16 14:18:05.527102	2015-01-16 14:18:05.527102	2015-01-16 14:18:05.527102
8	7	joined	2014-11-02 01:54:20.529581	2014-11-02 01:54:20.529581	2014-11-02 01:54:20.529581
9	7	fetched	2014-11-02 01:03:15.529581	2014-11-02 01:03:15.529581	2014-11-02 01:03:15.529581
10	8	joined	2014-10-03 03:25:35.532305	2014-10-03 03:25:35.532305	2014-10-03 03:25:35.532305
11	9	joined	2015-06-06 09:10:07.534448	2015-06-06 09:10:07.534448	2015-06-06 09:10:07.534448
12	9	fetched	2015-06-06 09:15:30.534448	2015-06-06 09:15:30.534448	2015-06-06 09:15:30.534448
13	10	joined	2015-02-17 23:44:07.538166	2015-02-17 23:44:07.538166	2015-02-17 23:44:07.538166
14	11	joined	2014-12-17 18:38:09.540146	2014-12-17 18:38:09.540146	2014-12-17 18:38:09.540146
15	11	fetched	2014-12-17 18:44:56.540146	2014-12-17 18:44:56.540146	2014-12-17 18:44:56.540146
16	12	joined	2014-12-21 13:16:32.542828	2014-12-21 13:16:32.542828	2014-12-21 13:16:32.542828
17	12	fetched	2014-12-21 13:25:12.542828	2014-12-21 13:25:12.542828	2014-12-21 13:25:12.542828
18	13	joined	2015-05-03 10:29:48.545363	2015-05-03 10:29:48.545363	2015-05-03 10:29:48.545363
19	14	joined	2015-03-08 18:56:39.546955	2015-03-08 18:56:39.546955	2015-03-08 18:56:39.546955
20	14	fetched	2015-03-08 19:04:42.546955	2015-03-08 19:04:42.546955	2015-03-08 19:04:42.546955
21	15	joined	2014-10-04 11:26:16.549427	2014-10-04 11:26:16.549427	2014-10-04 11:26:16.549427
22	15	fetched	2014-10-04 11:34:46.549427	2014-10-04 11:34:46.549427	2014-10-04 11:34:46.549427
23	16	joined	2014-11-01 02:03:02.552585	2014-11-01 02:03:02.552585	2014-11-01 02:03:02.552585
24	16	fetched	2014-11-01 02:11:42.552585	2014-11-01 02:11:42.552585	2014-11-01 02:11:42.552585
25	17	joined	2015-02-24 04:26:13.555349	2015-02-24 04:26:13.555349	2015-02-24 04:26:13.555349
26	17	fetched	2015-02-24 04:32:04.555349	2015-02-24 04:32:04.555349	2015-02-24 04:32:04.555349
27	18	joined	2015-04-19 16:13:04.557884	2015-04-19 16:13:04.557884	2015-04-19 16:13:04.557884
28	18	fetched	2015-04-19 16:17:09.557884	2015-04-19 16:17:09.557884	2015-04-19 16:17:09.557884
29	19	joined	2015-04-10 14:52:23.560375	2015-04-10 14:52:23.560375	2015-04-10 14:52:23.560375
30	19	fetched	2015-04-10 14:59:29.560375	2015-04-10 14:59:29.560375	2015-04-10 14:59:29.560375
31	20	joined	2015-04-03 17:24:20.562897	2015-04-03 17:24:20.562897	2015-04-03 17:24:20.562897
32	20	fetched	2015-04-03 17:33:16.562897	2015-04-03 17:33:16.562897	2015-04-03 17:33:16.562897
33	21	joined	2014-10-11 01:10:52.565479	2014-10-11 01:10:52.565479	2014-10-11 01:10:52.565479
34	21	fetched	2014-10-11 01:14:20.565479	2014-10-11 01:14:20.565479	2014-10-11 01:14:20.565479
35	22	joined	2014-10-11 07:40:58.568746	2014-10-11 07:40:58.568746	2014-10-11 07:40:58.568746
36	22	fetched	2014-10-11 07:48:57.568746	2014-10-11 07:48:57.568746	2014-10-11 07:48:57.568746
37	23	joined	2015-06-19 09:39:44.571896	2015-06-19 09:39:44.571896	2015-06-19 09:39:44.571896
38	23	fetched	2015-06-19 09:49:41.571896	2015-06-19 09:49:41.571896	2015-06-19 09:49:41.571896
39	24	joined	2015-06-06 09:53:53.57673	2015-06-06 09:53:53.57673	2015-06-06 09:53:53.57673
40	24	fetched	2015-06-06 10:03:02.57673	2015-06-06 10:03:02.57673	2015-06-06 10:03:02.57673
41	25	joined	2014-11-30 08:58:55.579633	2014-11-30 08:58:55.579633	2014-11-30 08:58:55.579633
42	25	fetched	2014-11-30 09:08:37.579633	2014-11-30 09:08:37.579633	2014-11-30 09:08:37.579633
43	26	joined	2014-10-02 05:24:47.582429	2014-10-02 05:24:47.582429	2014-10-02 05:24:47.582429
44	26	fetched	2014-10-02 05:29:38.582429	2014-10-02 05:29:38.582429	2014-10-02 05:29:38.582429
45	27	joined	2014-12-28 17:02:11.585458	2014-12-28 17:02:11.585458	2014-12-28 17:02:11.585458
46	27	fetched	2014-12-28 17:04:39.585458	2014-12-28 17:04:39.585458	2014-12-28 17:04:39.585458
47	28	joined	2015-01-28 10:39:46.588263	2015-01-28 10:39:46.588263	2015-01-28 10:39:46.588263
48	28	fetched	2015-01-28 10:48:45.588263	2015-01-28 10:48:45.588263	2015-01-28 10:48:45.588263
49	29	joined	2015-06-21 00:19:48.590926	2015-06-21 00:19:48.590926	2015-06-21 00:19:48.590926
50	29	fetched	2015-06-21 00:22:38.590926	2015-06-21 00:22:38.590926	2015-06-21 00:22:38.590926
51	30	joined	2014-12-19 00:04:45.59347	2014-12-19 00:04:45.59347	2014-12-19 00:04:45.59347
52	30	fetched	2014-12-19 00:07:45.59347	2014-12-19 00:07:45.59347	2014-12-19 00:07:45.59347
53	31	joined	2015-06-05 20:02:25.595985	2015-06-05 20:02:25.595985	2015-06-05 20:02:25.595985
54	31	fetched	2015-06-05 20:09:32.595985	2015-06-05 20:09:32.595985	2015-06-05 20:09:32.595985
55	32	joined	2015-06-17 13:27:16.598771	2015-06-17 13:27:16.598771	2015-06-17 13:27:16.598771
56	32	fetched	2015-06-17 13:36:40.598771	2015-06-17 13:36:40.598771	2015-06-17 13:36:40.598771
57	33	joined	2014-10-22 05:56:53.601893	2014-10-22 05:56:53.601893	2014-10-22 05:56:53.601893
58	33	fetched	2014-10-22 05:59:32.601893	2014-10-22 05:59:32.601893	2014-10-22 05:59:32.601893
59	34	joined	2015-04-19 12:15:09.605029	2015-04-19 12:15:09.605029	2015-04-19 12:15:09.605029
60	34	fetched	2015-04-19 12:19:35.605029	2015-04-19 12:19:35.605029	2015-04-19 12:19:35.605029
61	35	joined	2015-06-16 17:21:28.607825	2015-06-16 17:21:28.607825	2015-06-16 17:21:28.607825
62	35	fetched	2015-06-16 17:24:41.607825	2015-06-16 17:24:41.607825	2015-06-16 17:24:41.607825
63	36	joined	2015-05-23 03:10:47.610283	2015-05-23 03:10:47.610283	2015-05-23 03:10:47.610283
64	36	fetched	2015-05-23 03:16:37.610283	2015-05-23 03:16:37.610283	2015-05-23 03:16:37.610283
65	37	joined	2015-01-15 17:21:24.61271	2015-01-15 17:21:24.61271	2015-01-15 17:21:24.61271
66	37	fetched	2015-01-15 17:27:48.61271	2015-01-15 17:27:48.61271	2015-01-15 17:27:48.61271
67	38	joined	2015-02-26 03:02:14.615307	2015-02-26 03:02:14.615307	2015-02-26 03:02:14.615307
68	38	fetched	2015-02-26 03:05:27.615307	2015-02-26 03:05:27.615307	2015-02-26 03:05:27.615307
69	39	joined	2015-04-25 01:06:46.617772	2015-04-25 01:06:46.617772	2015-04-25 01:06:46.617772
70	40	joined	2015-02-26 18:10:14.619461	2015-02-26 18:10:14.619461	2015-02-26 18:10:14.619461
71	40	fetched	2015-02-26 18:19:53.619461	2015-02-26 18:19:53.619461	2015-02-26 18:19:53.619461
72	41	joined	2015-01-09 03:46:40.621914	2015-01-09 03:46:40.621914	2015-01-09 03:46:40.621914
73	41	fetched	2015-01-09 03:56:15.621914	2015-01-09 03:56:15.621914	2015-01-09 03:56:15.621914
74	42	joined	2015-02-13 00:19:08.62433	2015-02-13 00:19:08.62433	2015-02-13 00:19:08.62433
75	42	fetched	2015-02-13 00:22:07.62433	2015-02-13 00:22:07.62433	2015-02-13 00:22:07.62433
76	43	joined	2015-03-01 16:36:48.626738	2015-03-01 16:36:48.626738	2015-03-01 16:36:48.626738
77	43	fetched	2015-03-01 16:44:29.626738	2015-03-01 16:44:29.626738	2015-03-01 16:44:29.626738
78	44	joined	2015-04-05 12:07:42.62912	2015-04-05 12:07:42.62912	2015-04-05 12:07:42.62912
79	44	fetched	2015-04-05 12:14:59.62912	2015-04-05 12:14:59.62912	2015-04-05 12:14:59.62912
80	45	joined	2015-02-07 23:45:47.63152	2015-02-07 23:45:47.63152	2015-02-07 23:45:47.63152
81	45	fetched	2015-02-07 23:51:04.63152	2015-02-07 23:51:04.63152	2015-02-07 23:51:04.63152
82	46	joined	2014-10-05 15:52:27.633893	2014-10-05 15:52:27.633893	2014-10-05 15:52:27.633893
83	46	fetched	2014-10-05 16:01:33.633893	2014-10-05 16:01:33.633893	2014-10-05 16:01:33.633893
84	47	joined	2015-04-30 13:33:13.636261	2015-04-30 13:33:13.636261	2015-04-30 13:33:13.636261
85	48	joined	2015-02-08 22:16:48.637797	2015-02-08 22:16:48.637797	2015-02-08 22:16:48.637797
86	48	fetched	2015-02-08 22:18:50.637797	2015-02-08 22:18:50.637797	2015-02-08 22:18:50.637797
87	49	joined	2014-12-02 00:58:50.640441	2014-12-02 00:58:50.640441	2014-12-02 00:58:50.640441
88	49	fetched	2014-12-02 01:08:37.640441	2014-12-02 01:08:37.640441	2014-12-02 01:08:37.640441
89	9	submitted	2015-06-08 09:16:30	2015-06-08 09:16:30	2015-06-08 09:16:30
90	9	received_feedback	2015-06-13 05:50:12	2015-06-13 05:50:12	2015-06-13 05:50:12
91	48	commented	2015-06-13 05:50:12	2015-06-13 05:50:12	2015-06-13 05:50:12
92	12	commented	2015-06-15 19:40:38	2015-06-15 19:40:38	2015-06-15 19:40:38
93	44	commented	2015-06-15 23:00:22	2015-06-15 23:00:22	2015-06-15 23:00:22
94	4	commented	2015-06-16 13:08:06	2015-06-16 13:08:06	2015-06-16 13:08:06
95	46	commented	2015-06-18 14:13:31	2015-06-18 14:13:31	2015-06-18 14:13:31
96	2	commented	2015-06-20 02:26:18	2015-06-20 02:26:18	2015-06-20 02:26:18
97	31	commented	2015-06-22 05:32:07	2015-06-22 05:32:07	2015-06-22 05:32:07
98	40	commented	2015-06-07 06:44:08	2015-06-07 06:44:08	2015-06-07 06:44:08
99	33	commented	2015-06-17 19:54:31	2015-06-17 19:54:31	2015-06-17 19:54:31
100	22	commented	2015-06-20 23:22:16	2015-06-20 23:22:16	2015-06-20 23:22:16
101	9	completed	2015-06-14 21:41:01	2015-06-14 21:41:01	2015-06-14 21:41:01
102	5	commented	2015-06-09 16:32:26	2015-06-09 16:32:26	2015-06-09 16:32:26
103	38	commented	2015-06-14 04:18:42	2015-06-14 04:18:42	2015-06-14 04:18:42
104	11	submitted	2014-12-26 09:33:02	2014-12-26 09:33:02	2014-12-26 09:33:02
105	11	received_feedback	2014-12-27 19:17:46	2014-12-27 19:17:46	2014-12-27 19:17:46
106	15	commented	2015-01-15 23:07:39	2015-01-15 23:07:39	2015-01-15 23:07:39
107	29	commented	2015-02-08 09:56:17	2015-02-08 09:56:17	2015-02-08 09:56:17
108	11	completed	2015-01-06 16:04:47	2015-01-06 16:04:47	2015-01-06 16:04:47
109	3	commented	2015-05-05 20:40:50	2015-05-05 20:40:50	2015-05-05 20:40:50
110	28	commented	2015-06-02 03:21:36	2015-06-02 03:21:36	2015-06-02 03:21:36
111	9	commented	2015-05-22 07:50:23	2015-05-22 07:50:23	2015-05-22 07:50:23
112	12	submitted	2015-03-18 14:26:20	2015-03-18 14:26:20	2015-03-18 14:26:20
113	12	completed	2015-03-18 15:34:24	2015-03-18 15:34:24	2015-03-18 15:34:24
114	12	received_feedback	2015-03-27 12:11:13	2015-03-27 12:11:13	2015-03-27 12:11:13
115	44	onboarded	2015-06-15 23:00:22	2015-06-15 23:00:22	2015-06-15 23:00:22
116	31	onboarded	2015-06-11 19:26:59	2015-06-11 19:26:59	2015-06-11 19:26:59
117	46	onboarded	2015-06-18 14:13:31	2015-06-18 14:13:31	2015-06-18 14:13:31
118	38	onboarded	2015-06-14 04:18:42	2015-06-14 04:18:42	2015-06-14 04:18:42
119	4	onboarded	2015-06-16 13:08:06	2015-06-16 13:08:06	2015-06-16 13:08:06
120	2	onboarded	2015-06-20 02:26:18	2015-06-20 02:26:18	2015-06-20 02:26:18
121	22	onboarded	2015-06-17 21:30:18	2015-06-17 21:30:18	2015-06-17 21:30:18
122	33	onboarded	2015-06-21 04:46:52	2015-06-21 04:46:52	2015-06-21 04:46:52
123	40	onboarded	2015-06-21 06:27:34	2015-06-21 06:27:34	2015-06-21 06:27:34
124	11	commented	2015-01-06 01:42:46	2015-01-06 01:42:46	2015-01-06 01:42:46
125	15	submitted	2015-01-26 22:35:16	2015-01-26 22:35:16	2015-01-26 22:35:16
126	15	received_feedback	2015-02-18 10:23:56	2015-02-18 10:23:56	2015-02-18 10:23:56
127	9	onboarded	2015-05-22 07:50:23	2015-05-22 07:50:23	2015-05-22 07:50:23
128	15	completed	2015-01-27 07:26:11	2015-01-27 07:26:11	2015-01-27 07:26:11
129	29	onboarded	2015-06-17 15:50:40	2015-06-17 15:50:40	2015-06-17 15:50:40
130	22	submitted	2014-11-10 02:59:04	2014-11-10 02:59:04	2014-11-10 02:59:04
131	22	received_feedback	2014-11-22 07:21:12	2014-11-22 07:21:12	2014-11-22 07:21:12
132	15	onboarded	2015-04-23 16:27:40	2015-04-23 16:27:40	2015-04-23 16:27:40
133	48	onboarded	2015-06-09 08:39:11	2015-06-09 08:39:11	2015-06-09 08:39:11
134	3	onboarded	2015-04-10 04:37:49	2015-04-10 04:37:49	2015-04-10 04:37:49
135	5	onboarded	2015-06-09 16:32:26	2015-06-09 16:32:26	2015-06-09 16:32:26
136	11	onboarded	2015-05-26 12:34:40	2015-05-26 12:34:40	2015-05-26 12:34:40
137	28	submitted	2015-04-24 05:52:23	2015-04-24 05:52:23	2015-04-24 05:52:23
138	28	received_feedback	2015-05-04 05:44:48	2015-05-04 05:44:48	2015-05-04 05:44:48
139	12	onboarded	2015-06-15 19:40:38	2015-06-15 19:40:38	2015-06-15 19:40:38
140	28	completed	2015-04-29 02:27:55	2015-04-29 02:27:55	2015-04-29 02:27:55
141	29	submitted	2015-06-21 03:23:04	2015-06-21 03:23:04	2015-06-21 03:23:04
142	29	received_feedback	2015-06-21 10:45:10	2015-06-21 10:45:10	2015-06-21 10:45:10
143	29	completed	2015-06-22 09:17:16.049989	2015-06-22 09:17:16.049989	2015-06-22 09:17:16.049989
144	31	submitted	2015-06-10 20:56:14	2015-06-10 20:56:14	2015-06-10 20:56:14
145	31	received_feedback	2015-06-11 15:12:41	2015-06-11 15:12:41	2015-06-11 15:12:41
146	28	onboarded	2015-06-19 03:54:47	2015-06-19 03:54:47	2015-06-19 03:54:47
147	33	submitted	2014-12-07 00:26:30	2014-12-07 00:26:30	2014-12-07 00:26:30
148	33	received_feedback	2015-02-09 19:47:48	2015-02-09 19:47:48	2015-02-09 19:47:48
149	33	completed	2014-12-26 10:25:12	2014-12-26 10:25:12	2014-12-26 10:25:12
150	38	submitted	2015-06-11 15:43:53	2015-06-11 15:43:53	2015-06-11 15:43:53
151	38	received_feedback	2015-06-12 05:48:51	2015-06-12 05:48:51	2015-06-12 05:48:51
152	38	completed	2015-06-13 18:24:20	2015-06-13 18:24:20	2015-06-13 18:24:20
153	40	submitted	2015-03-28 18:39:01	2015-03-28 18:39:01	2015-03-28 18:39:01
154	40	received_feedback	2015-03-31 11:32:08	2015-03-31 11:32:08	2015-03-31 11:32:08
155	40	completed	2015-04-05 14:07:55	2015-04-05 14:07:55	2015-04-05 14:07:55
156	44	submitted	2015-04-11 21:06:46	2015-04-11 21:06:46	2015-04-11 21:06:46
157	44	received_feedback	2015-04-21 08:39:42	2015-04-21 08:39:42	2015-04-21 08:39:42
158	46	submitted	2015-02-15 15:58:34	2015-02-15 15:58:34	2015-02-15 15:58:34
159	46	received_feedback	2015-03-03 01:53:51	2015-03-03 01:53:51	2015-03-03 01:53:51
160	46	completed	2015-02-27 06:50:46	2015-02-27 06:50:46	2015-02-27 06:50:46
161	48	submitted	2015-05-13 14:03:17	2015-05-13 14:03:17	2015-05-13 14:03:17
162	48	completed	2015-05-14 10:12:59	2015-05-14 10:12:59	2015-05-14 10:12:59
163	48	received_feedback	2015-06-06 02:29:05	2015-06-06 02:29:05	2015-06-06 02:29:05
164	49	submitted	2015-01-11 01:53:20	2015-01-11 01:53:20	2015-01-11 01:53:20
165	49	received_feedback	2015-02-02 22:28:58	2015-02-02 22:28:58	2015-02-02 22:28:58
166	26	submitted	2014-11-22 13:41:57	2014-11-22 13:41:57	2014-11-22 13:41:57
167	26	received_feedback	2015-04-16 11:05:50	2015-04-16 11:05:50	2015-04-16 11:05:50
168	7	submitted	2014-12-25 17:09:22	2014-12-25 17:09:22	2014-12-25 17:09:22
169	7	received_feedback	2015-06-03 13:45:58	2015-06-03 13:45:58	2015-06-03 13:45:58
170	23	submitted	2015-06-19 16:56:10	2015-06-19 16:56:10	2015-06-19 16:56:10
171	23	received_feedback	2015-06-19 23:17:54	2015-06-19 23:17:54	2015-06-19 23:17:54
172	17	submitted	2015-06-06 07:21:38	2015-06-06 07:21:38	2015-06-06 07:21:38
173	17	received_feedback	2015-06-06 13:59:20	2015-06-06 13:59:20	2015-06-06 13:59:20
174	20	submitted	2015-05-04 09:56:00	2015-05-04 09:56:00	2015-05-04 09:56:00
175	20	received_feedback	2015-05-04 16:16:55	2015-05-04 16:16:55	2015-05-04 16:16:55
176	20	completed	2015-05-10 07:55:32	2015-05-10 07:55:32	2015-05-10 07:55:32
177	21	submitted	2014-11-29 23:50:06	2014-11-29 23:50:06	2014-11-29 23:50:06
178	21	received_feedback	2015-04-10 14:57:40	2015-04-10 14:57:40	2015-04-10 14:57:40
179	21	completed	2015-05-20 08:37:08	2015-05-20 08:37:08	2015-05-20 08:37:08
180	36	submitted	2015-05-27 04:45:05	2015-05-27 04:45:05	2015-05-27 04:45:05
181	36	received_feedback	2015-05-30 06:05:24	2015-05-30 06:05:24	2015-05-30 06:05:24
182	36	completed	2015-06-19 04:44:13	2015-06-19 04:44:13	2015-06-19 04:44:13
183	30	submitted	2015-02-05 02:10:49	2015-02-05 02:10:49	2015-02-05 02:10:49
184	30	received_feedback	2015-02-20 10:27:44	2015-02-20 10:27:44	2015-02-20 10:27:44
185	30	completed	2015-02-11 05:42:47	2015-02-11 05:42:47	2015-02-11 05:42:47
186	35	submitted	2015-06-18 01:08:36	2015-06-18 01:08:36	2015-06-18 01:08:36
187	35	received_feedback	2015-06-20 18:46:50	2015-06-20 18:46:50	2015-06-20 18:46:50
188	35	completed	2015-06-20 06:52:12	2015-06-20 06:52:12	2015-06-20 06:52:12
189	14	submitted	2015-03-23 09:23:39	2015-03-23 09:23:39	2015-03-23 09:23:39
190	14	received_feedback	2015-04-04 21:38:05	2015-04-04 21:38:05	2015-04-04 21:38:05
191	41	submitted	2015-02-15 16:27:51	2015-02-15 16:27:51	2015-02-15 16:27:51
192	41	received_feedback	2015-05-08 03:06:40	2015-05-08 03:06:40	2015-05-08 03:06:40
193	6	submitted	2015-03-12 17:11:48	2015-03-12 17:11:48	2015-03-12 17:11:48
194	6	received_feedback	2015-05-11 04:16:30	2015-05-11 04:16:30	2015-05-11 04:16:30
195	34	submitted	2015-04-30 15:40:09	2015-04-30 15:40:09	2015-04-30 15:40:09
196	16	submitted	2015-02-18 21:03:12	2015-02-18 21:03:12	2015-02-18 21:03:12
197	16	received_feedback	2015-02-26 18:51:53	2015-02-26 18:51:53	2015-02-26 18:51:53
198	18	submitted	2015-05-13 08:15:54	2015-05-13 08:15:54	2015-05-13 08:15:54
199	24	submitted	2015-06-16 07:15:37	2015-06-16 07:15:37	2015-06-16 07:15:37
200	42	submitted	2015-03-05 11:16:02	2015-03-05 11:16:02	2015-03-05 11:16:02
201	27	submitted	2015-01-30 05:08:57	2015-01-30 05:08:57	2015-01-30 05:08:57
202	45	submitted	2015-02-13 11:32:42	2015-02-13 11:32:42	2015-02-13 11:32:42
203	49	commented	2015-06-11 05:10:46	2015-06-11 05:10:46	2015-06-11 05:10:46
204	26	commented	2015-04-18 00:58:34	2015-04-18 00:58:34	2015-04-18 00:58:34
205	45	received_feedback	2015-03-13 23:28:19	2015-03-13 23:28:19	2015-03-13 23:28:19
206	7	commented	2015-03-13 23:28:19	2015-03-13 23:28:19	2015-03-13 23:28:19
207	23	commented	2015-06-22 09:17:26.121505	2015-06-22 09:17:26.121505	2015-06-22 09:17:26.121505
208	17	commented	2015-05-02 08:03:26	2015-05-02 08:03:26	2015-05-02 08:03:26
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 208, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	3	90	code	f	1	2015-03-23 14:02:42	2015-03-23 14:02:42	Submission	38
2	4	90	code	f	1	2015-03-23 14:02:42	2015-03-23 14:02:42	Submission	38
3	28	93	code	f	1	2015-04-04 13:00:09	2015-04-04 13:00:09	Submission	38
4	4	93	code	f	1	2015-04-04 13:00:09	2015-04-04 13:00:09	Submission	38
5	2	96	code	f	1	2015-02-26 03:24:58	2015-02-26 03:24:58	Submission	38
6	4	96	code	f	1	2015-02-26 03:24:58	2015-02-26 03:24:58	Submission	38
7	3	98	code	f	1	2015-04-11 21:06:46	2015-04-11 21:06:46	Submission	44
8	3	100	code	f	1	2015-02-15 15:58:34	2015-02-15 15:58:34	Submission	46
9	3	104	code	f	1	2014-11-01 12:03:20	2014-11-01 12:03:20	Submission	46
10	40	383	code	f	1	2015-04-28 05:51:10	2015-04-28 05:51:10	Submission	45
11	3	165	code	f	1	2015-04-20 08:25:12	2015-04-20 08:25:12	Submission	20
12	3	112	code	f	1	2014-11-22 00:26:53	2014-11-22 00:26:53	Submission	46
13	3	128	code	f	1	2015-05-13 14:03:17	2015-05-13 14:03:17	Submission	48
14	3	134	code	f	1	2015-04-17 15:49:21	2015-04-17 15:49:21	Submission	49
15	2	142	code	f	1	2015-03-12 18:21:24	2015-03-12 18:21:24	Submission	26
16	3	142	code	f	1	2015-03-12 18:21:24	2015-03-12 18:21:24	Submission	26
17	3	144	code	f	1	2014-10-30 18:12:52	2014-10-30 18:12:52	Submission	26
18	2	147	code	f	1	2014-11-13 05:15:22	2014-11-13 05:15:22	Submission	26
19	2	151	code	f	1	2014-11-19 18:05:01	2014-11-19 18:05:01	Submission	7
20	3	151	code	f	1	2014-11-19 18:05:01	2014-11-19 18:05:01	Submission	7
21	3	152	code	f	1	2014-12-22 13:34:42	2014-12-22 13:34:42	Submission	7
22	3	153	code	f	1	2015-06-19 16:56:10	2015-06-19 16:56:10	Submission	23
23	4	153	code	f	1	2015-06-19 16:56:10	2015-06-19 16:56:10	Submission	23
24	2	154	code	f	1	2015-06-19 22:14:41	2015-06-19 22:14:41	Submission	23
25	3	154	code	f	1	2015-06-19 22:14:41	2015-06-19 22:14:41	Submission	23
26	4	154	code	f	1	2015-06-19 22:14:41	2015-06-19 22:14:41	Submission	23
27	36	155	code	f	1	2015-06-20 00:12:54	2015-06-20 00:12:54	Submission	23
28	2	155	code	f	1	2015-06-20 00:12:54	2015-06-20 00:12:54	Submission	23
29	3	155	code	f	1	2015-06-20 00:12:54	2015-06-20 00:12:54	Submission	23
30	2	156	code	t	1	2015-06-22 06:12:05	2015-06-22 06:12:05	Submission	23
31	3	156	code	f	1	2015-06-22 06:12:05	2015-06-22 06:12:05	Submission	23
32	4	156	code	f	1	2015-06-22 06:12:05	2015-06-22 06:12:05	Submission	23
33	2	157	code	t	1	2015-06-21 11:29:19	2015-06-21 11:29:19	Submission	23
34	3	157	code	t	1	2015-06-21 11:29:19	2015-06-21 11:29:19	Submission	23
35	4	157	code	f	1	2015-06-21 11:29:19	2015-06-21 11:29:19	Submission	23
36	48	158	code	f	1	2015-06-19 13:06:47	2015-06-19 13:06:47	Submission	23
37	2	158	code	f	1	2015-06-19 13:06:47	2015-06-19 13:06:47	Submission	23
38	3	158	code	f	1	2015-06-19 13:06:47	2015-06-19 13:06:47	Submission	23
39	4	158	code	f	1	2015-06-19 13:06:47	2015-06-19 13:06:47	Submission	23
40	36	159	code	t	1	2015-06-21 16:41:14	2015-06-21 16:41:14	Submission	23
41	2	159	code	t	1	2015-06-21 16:41:14	2015-06-21 16:41:14	Submission	23
42	3	159	code	t	1	2015-06-21 16:41:14	2015-06-21 16:41:14	Submission	23
43	4	159	code	t	1	2015-06-21 16:41:14	2015-06-21 16:41:14	Submission	23
44	4	161	code	f	1	2015-03-09 14:00:07	2015-03-09 14:00:07	Submission	17
45	3	162	code	f	1	2015-04-07 21:08:34	2015-04-07 21:08:34	Submission	17
46	4	162	code	f	1	2015-04-07 21:08:34	2015-04-07 21:08:34	Submission	17
47	2	168	code	f	1	2014-11-29 23:50:06	2014-11-29 23:50:06	Submission	21
48	3	169	code	f	1	2015-05-10 21:17:19	2015-05-10 21:17:19	Submission	21
49	2	172	code	f	1	2014-11-19 00:37:53	2014-11-19 00:37:53	Submission	21
50	3	175	code	f	1	2014-10-22 06:39:51	2014-10-22 06:39:51	Submission	21
51	3	176	code	f	1	2014-11-16 09:07:59	2014-11-16 09:07:59	Submission	21
52	3	177	code	f	1	2014-11-09 09:27:26	2014-11-09 09:27:26	Submission	21
53	2	182	code	f	1	2015-05-26 08:04:43	2015-05-26 08:04:43	Submission	36
54	3	182	code	f	1	2015-05-26 08:04:43	2015-05-26 08:04:43	Submission	36
55	3	183	code	f	1	2015-06-07 11:48:52	2015-06-07 11:48:52	Submission	36
56	3	186	code	f	1	2015-06-02 08:07:48	2015-06-02 08:07:48	Submission	36
57	28	187	code	f	1	2015-06-06 03:14:09	2015-06-06 03:14:09	Submission	36
58	9	188	code	f	1	2015-06-15 16:07:45	2015-06-15 16:07:45	Submission	36
59	38	188	code	f	1	2015-06-15 16:07:45	2015-06-15 16:07:45	Submission	36
60	46	188	code	f	1	2015-06-15 16:07:45	2015-06-15 16:07:45	Submission	36
61	4	189	code	f	1	2015-06-02 17:49:51	2015-06-02 17:49:51	Submission	36
62	4	190	code	f	1	2015-05-31 17:09:19	2015-05-31 17:09:19	Submission	36
63	3	191	code	f	1	2015-06-12 22:51:20	2015-06-12 22:51:20	Submission	36
64	4	192	code	f	1	2015-05-30 01:09:52	2015-05-30 01:09:52	Submission	36
65	2	193	code	f	1	2015-05-31 17:06:23	2015-05-31 17:06:23	Submission	36
66	2	264	code	f	1	2015-05-08 03:36:23	2015-05-08 03:36:23	Submission	14
67	3	195	code	f	1	2015-06-11 23:08:51	2015-06-11 23:08:51	Submission	36
68	3	197	code	f	1	2015-06-04 09:44:37	2015-06-04 09:44:37	Submission	36
69	3	199	code	f	1	2015-06-10 12:19:32	2015-06-10 12:19:32	Submission	36
70	2	200	code	f	1	2015-05-26 08:58:51	2015-05-26 08:58:51	Submission	36
71	3	201	code	f	1	2015-06-01 16:02:26	2015-06-01 16:02:26	Submission	36
72	4	202	code	f	1	2015-06-03 22:59:11	2015-06-03 22:59:11	Submission	36
73	2	204	code	f	1	2015-06-02 07:03:32	2015-06-02 07:03:32	Submission	36
74	3	204	code	f	1	2015-06-02 07:03:32	2015-06-02 07:03:32	Submission	36
75	3	205	code	f	1	2015-05-23 06:26:18	2015-05-23 06:26:18	Submission	36
76	3	268	code	f	1	2015-04-11 11:04:48	2015-04-11 11:04:48	Submission	14
77	2	269	code	f	1	2015-04-18 16:36:50	2015-04-18 16:36:50	Submission	14
78	3	269	code	f	1	2015-04-18 16:36:50	2015-04-18 16:36:50	Submission	14
79	3	270	code	f	1	2015-04-11 14:22:58	2015-04-11 14:22:58	Submission	14
80	4	206	code	f	1	2015-06-06 10:35:06	2015-06-06 10:35:06	Submission	36
81	4	207	code	f	1	2015-06-09 01:01:30	2015-06-09 01:01:30	Submission	36
82	2	208	code	f	1	2015-05-26 21:13:48	2015-05-26 21:13:48	Submission	36
83	4	208	code	f	1	2015-05-26 21:13:48	2015-05-26 21:13:48	Submission	36
84	3	226	code	f	1	2015-05-29 15:08:50	2015-05-29 15:08:50	Submission	36
85	28	273	code	f	1	2015-04-01 18:46:12	2015-04-01 18:46:12	Submission	14
86	3	273	code	f	1	2015-04-01 18:46:12	2015-04-01 18:46:12	Submission	14
87	2	209	code	f	1	2015-06-09 21:38:08	2015-06-09 21:38:08	Submission	36
88	3	209	code	f	1	2015-06-09 21:38:08	2015-06-09 21:38:08	Submission	36
89	4	209	code	f	1	2015-06-09 21:38:08	2015-06-09 21:38:08	Submission	36
90	2	212	code	f	1	2015-06-07 07:41:17	2015-06-07 07:41:17	Submission	36
91	4	213	code	f	1	2015-06-07 21:03:59	2015-06-07 21:03:59	Submission	36
92	3	217	code	f	1	2015-05-28 02:43:48	2015-05-28 02:43:48	Submission	36
93	33	218	code	f	1	2015-06-02 08:02:54	2015-06-02 08:02:54	Submission	36
94	4	219	code	f	1	2015-06-05 12:01:02	2015-06-05 12:01:02	Submission	36
95	3	228	code	f	1	2015-05-31 11:10:44	2015-05-31 11:10:44	Submission	36
96	3	222	code	f	1	2015-05-27 13:53:25	2015-05-27 13:53:25	Submission	36
97	4	222	code	f	1	2015-05-27 13:53:25	2015-05-27 13:53:25	Submission	36
98	28	223	code	f	1	2015-06-02 22:24:30	2015-06-02 22:24:30	Submission	36
99	2	224	code	f	1	2015-05-27 17:37:46	2015-05-27 17:37:46	Submission	36
100	3	224	code	f	1	2015-05-27 17:37:46	2015-05-27 17:37:46	Submission	36
101	3	293	code	f	1	2015-05-05 19:19:38	2015-05-05 19:19:38	Submission	14
102	33	294	code	f	1	2015-05-23 15:37:18	2015-05-23 15:37:18	Submission	14
103	2	230	code	f	1	2015-06-05 16:21:12	2015-06-05 16:21:12	Submission	36
104	21	231	code	f	1	2015-06-18 12:10:56	2015-06-18 12:10:56	Submission	36
105	2	231	code	f	1	2015-06-18 12:10:56	2015-06-18 12:10:56	Submission	36
106	3	231	code	f	1	2015-06-18 12:10:56	2015-06-18 12:10:56	Submission	36
107	4	231	code	f	1	2015-06-18 12:10:56	2015-06-18 12:10:56	Submission	36
108	4	232	code	f	1	2015-05-28 18:08:50	2015-05-28 18:08:50	Submission	36
109	2	240	code	f	1	2015-06-06 13:09:04	2015-06-06 13:09:04	Submission	36
110	3	238	code	f	1	2015-06-01 00:37:19	2015-06-01 00:37:19	Submission	36
111	15	242	code	f	1	2015-06-18 01:08:36	2015-06-18 01:08:36	Submission	35
112	15	243	code	f	1	2015-06-18 06:39:20	2015-06-18 06:39:20	Submission	35
113	12	245	code	f	1	2015-06-16 20:48:49	2015-06-16 20:48:49	Submission	35
114	36	245	code	f	1	2015-06-16 20:48:49	2015-06-16 20:48:49	Submission	35
115	4	245	code	f	1	2015-06-16 20:48:49	2015-06-16 20:48:49	Submission	35
116	12	246	code	f	1	2015-06-17 13:06:27	2015-06-17 13:06:27	Submission	35
117	28	246	code	f	1	2015-06-17 13:06:27	2015-06-17 13:06:27	Submission	35
118	4	246	code	f	1	2015-06-17 13:06:27	2015-06-17 13:06:27	Submission	35
119	12	247	code	f	1	2015-06-19 04:44:17	2015-06-19 04:44:17	Submission	35
120	28	247	code	f	1	2015-06-19 04:44:17	2015-06-19 04:44:17	Submission	35
121	36	247	code	f	1	2015-06-19 04:44:17	2015-06-19 04:44:17	Submission	35
122	4	247	code	f	1	2015-06-19 04:44:17	2015-06-19 04:44:17	Submission	35
123	4	248	code	f	1	2015-06-17 04:55:18	2015-06-17 04:55:18	Submission	35
124	4	250	code	f	1	2015-06-20 08:46:28	2015-06-20 08:46:28	Submission	35
125	4	252	code	f	1	2015-06-17 03:09:41	2015-06-17 03:09:41	Submission	35
126	36	253	code	f	1	2015-06-16 19:02:49	2015-06-16 19:02:49	Submission	35
127	4	253	code	f	1	2015-06-16 19:02:49	2015-06-16 19:02:49	Submission	35
128	36	254	code	f	1	2015-06-19 00:19:48	2015-06-19 00:19:48	Submission	35
129	4	255	code	f	1	2015-06-19 02:25:52	2015-06-19 02:25:52	Submission	35
130	36	256	code	f	1	2015-06-19 14:21:01	2015-06-19 14:21:01	Submission	35
131	4	256	code	f	1	2015-06-19 14:21:01	2015-06-19 14:21:01	Submission	35
132	2	258	code	f	1	2015-04-03 14:38:41	2015-04-03 14:38:41	Submission	14
133	28	259	code	f	1	2015-04-07 05:29:46	2015-04-07 05:29:46	Submission	14
134	28	260	code	f	1	2015-05-25 09:49:14	2015-05-25 09:49:14	Submission	14
135	2	260	code	f	1	2015-05-25 09:49:14	2015-05-25 09:49:14	Submission	14
136	3	260	code	f	1	2015-05-25 09:49:14	2015-05-25 09:49:14	Submission	14
137	3	261	code	f	1	2015-03-26 04:08:30	2015-03-26 04:08:30	Submission	14
138	3	275	code	f	1	2015-04-05 21:31:42	2015-04-05 21:31:42	Submission	14
139	3	276	code	f	1	2015-04-09 19:31:41	2015-04-09 19:31:41	Submission	14
140	3	278	code	f	1	2015-03-18 02:01:35	2015-03-18 02:01:35	Submission	14
141	2	279	code	f	1	2015-04-18 15:05:30	2015-04-18 15:05:30	Submission	14
142	4	311	code	f	1	2015-01-30 21:18:20	2015-01-30 21:18:20	Submission	41
143	2	280	code	f	1	2015-05-29 22:47:52	2015-05-29 22:47:52	Submission	14
144	2	284	code	f	1	2015-04-17 15:39:26	2015-04-17 15:39:26	Submission	14
145	3	287	code	f	1	2015-06-07 19:59:43	2015-06-07 19:59:43	Submission	14
146	2	288	code	f	1	2015-03-21 08:21:16	2015-03-21 08:21:16	Submission	14
147	21	290	code	f	1	2015-04-14 14:20:42	2015-04-14 14:20:42	Submission	14
148	2	290	code	f	1	2015-04-14 14:20:42	2015-04-14 14:20:42	Submission	14
149	3	290	code	f	1	2015-04-14 14:20:42	2015-04-14 14:20:42	Submission	14
150	3	292	code	f	1	2015-05-11 18:34:39	2015-05-11 18:34:39	Submission	14
151	36	295	code	f	1	2015-06-14 13:25:03	2015-06-14 13:25:03	Submission	14
152	2	297	code	f	1	2015-05-25 10:10:57	2015-05-25 10:10:57	Submission	14
153	48	299	code	f	1	2015-03-15 05:00:59	2015-03-15 05:00:59	Submission	14
154	3	299	code	f	1	2015-03-15 05:00:59	2015-03-15 05:00:59	Submission	14
155	28	306	code	f	1	2015-06-14 05:40:28	2015-06-14 05:40:28	Submission	14
156	3	307	code	f	1	2015-06-06 11:58:35	2015-06-06 11:58:35	Submission	14
157	36	308	code	f	1	2015-06-12 11:37:59	2015-06-12 11:37:59	Submission	14
158	2	308	code	f	1	2015-06-12 11:37:59	2015-06-12 11:37:59	Submission	14
159	3	308	code	f	1	2015-06-12 11:37:59	2015-06-12 11:37:59	Submission	14
160	3	321	code	f	1	2015-04-09 06:55:06	2015-04-09 06:55:06	Submission	6
161	3	323	code	f	1	2015-01-18 03:24:26	2015-01-18 03:24:26	Submission	6
162	4	325	code	f	1	2015-04-30 15:40:09	2015-04-30 15:40:09	Submission	34
163	3	326	code	f	1	2015-02-18 21:03:12	2015-02-18 21:03:12	Submission	16
164	4	326	code	f	1	2015-02-18 21:03:12	2015-02-18 21:03:12	Submission	16
165	4	327	code	f	1	2015-03-20 00:07:12	2015-03-20 00:07:12	Submission	16
166	3	329	code	f	1	2015-01-13 00:59:08	2015-01-13 00:59:08	Submission	16
167	4	329	code	f	1	2015-01-13 00:59:08	2015-01-13 00:59:08	Submission	16
168	3	330	code	f	1	2015-03-29 11:55:16	2015-03-29 11:55:16	Submission	16
169	3	331	code	f	1	2014-11-27 04:11:43	2014-11-27 04:11:43	Submission	16
170	2	333	code	f	1	2015-05-13 08:15:54	2015-05-13 08:15:54	Submission	18
171	3	334	code	f	1	2015-04-26 02:48:22	2015-04-26 02:48:22	Submission	18
172	4	335	code	f	1	2015-04-24 09:41:33	2015-04-24 09:41:33	Submission	18
173	2	347	code	f	1	2015-03-05 11:16:02	2015-03-05 11:16:02	Submission	42
174	4	347	code	f	1	2015-03-05 11:16:02	2015-03-05 11:16:02	Submission	42
175	4	340	code	f	1	2015-05-11 06:01:12	2015-05-11 06:01:12	Submission	18
176	2	342	code	f	1	2015-06-16 07:15:37	2015-06-16 07:15:37	Submission	24
177	3	342	code	f	1	2015-06-16 07:15:37	2015-06-16 07:15:37	Submission	24
178	2	343	code	f	1	2015-06-07 01:18:20	2015-06-07 01:18:20	Submission	24
179	2	344	code	f	1	2015-06-08 21:10:19	2015-06-08 21:10:19	Submission	24
180	4	350	code	f	1	2015-03-28 15:12:38	2015-03-28 15:12:38	Submission	42
181	4	351	code	f	1	2015-04-22 16:55:27	2015-04-22 16:55:27	Submission	42
182	4	354	code	f	1	2015-04-26 16:11:48	2015-04-26 16:11:48	Submission	42
183	4	355	code	f	1	2015-05-01 03:20:15	2015-05-01 03:20:15	Submission	42
184	3	359	code	f	1	2015-02-24 10:11:47	2015-02-24 10:11:47	Submission	27
185	2	362	code	f	1	2015-04-29 03:08:48	2015-04-29 03:08:48	Submission	27
186	28	365	code	f	1	2015-05-24 22:28:34	2015-05-24 22:28:34	Submission	27
187	2	366	code	f	1	2015-01-03 16:11:53	2015-01-03 16:11:53	Submission	27
188	3	366	code	f	1	2015-01-03 16:11:53	2015-01-03 16:11:53	Submission	27
189	2	367	code	f	1	2015-03-26 14:17:58	2015-03-26 14:17:58	Submission	27
190	3	369	code	f	1	2015-02-13 11:32:42	2015-02-13 11:32:42	Submission	45
191	3	372	code	f	1	2015-03-19 19:47:40	2015-03-19 19:47:40	Submission	45
192	33	374	code	f	1	2015-03-09 22:32:07	2015-03-09 22:32:07	Submission	45
193	3	376	code	f	1	2015-03-23 03:22:00	2015-03-23 03:22:00	Submission	45
194	3	381	code	f	1	2015-02-22 14:03:36	2015-02-22 14:03:36	Submission	45
195	3	389	code	f	1	2015-02-25 00:41:12	2015-02-25 00:41:12	Submission	45
196	3	2	code	f	1	2015-06-15 13:43:45	2015-06-15 13:43:45	Submission	9
197	12	5	code	f	1	2015-06-11 15:40:34	2015-06-11 15:40:34	Submission	9
198	36	7	code	f	1	2015-06-10 12:12:46	2015-06-10 12:12:46	Submission	9
199	3	12	code	f	1	2015-01-03 20:07:06	2015-01-03 20:07:06	Submission	11
200	4	13	code	f	1	2015-04-24 18:20:24	2015-04-24 18:20:24	Submission	11
201	15	66	code	f	1	2015-02-23 05:40:17	2015-02-23 05:40:17	Submission	28
202	3	66	code	f	1	2015-02-23 05:40:17	2015-02-23 05:40:17	Submission	28
203	2	16	code	f	1	2015-02-14 00:33:54	2015-02-14 00:33:54	Submission	12
204	2	17	code	f	1	2015-03-01 18:28:00	2015-03-01 18:28:00	Submission	12
205	3	17	code	f	1	2015-03-01 18:28:00	2015-03-01 18:28:00	Submission	12
206	38	19	code	f	1	2015-03-19 22:40:49	2015-03-19 22:40:49	Submission	12
207	30	31	code	f	1	2015-04-24 05:52:23	2015-04-24 05:52:23	Submission	28
208	3	32	code	f	1	2015-03-05 20:56:51	2015-03-05 20:56:51	Submission	28
209	4	22	code	f	1	2015-01-26 22:35:16	2015-01-26 22:35:16	Submission	15
210	2	24	code	f	1	2015-02-06 03:39:26	2015-02-06 03:39:26	Submission	15
211	3	24	code	f	1	2015-02-06 03:39:26	2015-02-06 03:39:26	Submission	15
212	12	34	code	f	1	2015-05-01 21:30:28	2015-05-01 21:30:28	Submission	28
213	3	38	code	f	1	2015-03-21 05:22:26	2015-03-21 05:22:26	Submission	28
214	3	41	code	f	1	2015-02-16 22:14:25	2015-02-16 22:14:25	Submission	28
215	4	251	code	t	1	2015-06-21 00:15:35	2015-06-21 00:15:35	Submission	35
216	3	59	code	f	1	2015-05-13 01:35:01	2015-05-13 01:35:01	Submission	28
217	3	72	code	f	1	2015-03-29 03:23:00	2015-03-29 03:23:00	Submission	28
218	3	60	code	f	1	2015-01-28 22:33:02	2015-01-28 22:33:02	Submission	28
219	3	124	code	f	1	2014-11-18 05:52:50	2014-11-18 05:52:50	Submission	46
220	48	77	code	f	1	2015-06-21 03:23:04	2015-06-21 03:23:04	Submission	29
221	36	77	code	t	1	2015-06-21 03:23:04	2015-06-21 03:23:04	Submission	29
222	2	77	code	f	1	2015-06-21 03:23:04	2015-06-21 03:23:04	Submission	29
223	3	77	code	f	1	2015-06-21 03:23:04	2015-06-21 03:23:04	Submission	29
224	4	77	code	t	1	2015-06-21 03:23:04	2015-06-21 03:23:04	Submission	29
225	2	78	code	f	1	2015-06-21 02:07:08	2015-06-21 02:07:08	Submission	29
226	3	78	code	t	1	2015-06-21 02:07:08	2015-06-21 02:07:08	Submission	29
227	4	78	code	t	1	2015-06-21 02:07:08	2015-06-21 02:07:08	Submission	29
228	46	80	code	f	1	2014-12-07 00:26:30	2014-12-07 00:26:30	Submission	33
229	46	81	code	f	1	2014-12-21 09:07:56	2014-12-21 09:07:56	Submission	33
230	4	83	code	f	1	2015-01-15 18:23:48	2015-01-15 18:23:48	Submission	33
231	4	84	code	f	1	2015-01-11 20:59:14	2015-01-11 20:59:14	Submission	33
232	4	85	code	f	1	2015-02-19 05:14:06	2015-02-19 05:14:06	Submission	33
233	2	149	code	f	1	2014-12-25 17:09:22	2014-12-25 17:09:22	Submission	7
234	4	87	code	f	1	2015-05-24 11:24:02	2015-05-24 11:24:02	Submission	33
235	4	88	code	f	1	2015-06-11 15:43:53	2015-06-11 15:43:53	Submission	38
236	2	89	code	f	1	2015-02-28 00:37:27	2015-02-28 00:37:27	Submission	38
237	3	129	code	f	1	2015-02-10 09:25:40	2015-02-10 09:25:40	Submission	48
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 237, true);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename, solution) FROM stdin;
1	9	0f57a575e03d37ce850e7858	superseded	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew x xs = ListElement x (xs)\r\n\r\ndatum :: List a -> a\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = EmptyList\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList []     = EmptyList\r\nfromList (x:xs) = new x $ fromList xs\r\n\r\ntoList :: List a -> [a]\r\ntoList EmptyList = []\r\ntoList (ListElement x xs) = x : toList xs\r\n\r\n(+++) :: List a -> a -> List a\r\n(+++) EmptyList y = new y EmptyList\r\n(+++) (ListElement x xs) y = new x $ xs +++ y\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList EmptyList = EmptyList\r\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x	\N	\N	0	1	2015-06-08 09:16:30	2015-06-08 09:16:30	1	LinkedList.hs	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x xs = ListElement x (xs)\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = EmptyList\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList []     = EmptyList\\r\\nfromList (x:xs) = new x $ fromList xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList EmptyList = []\\r\\ntoList (ListElement x xs) = x : toList xs\\r\\n\\r\\n(+++) :: List a -\\u003e a -\\u003e List a\\r\\n(+++) EmptyList y = new y EmptyList\\r\\n(+++) (ListElement x xs) y = new x $ xs +++ y\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList EmptyList = EmptyList\\r\\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x"}
2	9	313081da1c3dae5ca3f77c0b	pending	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\tderiving (Show)\r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew = ListElement\r\n\r\ndatum :: List a -> a\r\ndatum EmptyList = undefined\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = undefined\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList = foldr new EmptyList\r\n\r\nfoldrList :: (a -> b -> b) -> b -> List a -> b\r\nfoldrList _ z EmptyList = z\r\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\r\n\r\nfoldlList :: (b -> a -> b) -> b -> List a -> b\r\nfoldlList _ z EmptyList = z\r\nfoldlList f z (ListElement x xs) = let z' = z `f` x\r\n                                in seq z' $ foldlList f z' xs  \r\n\r\ntoList :: List a -> [a]\r\ntoList = foldrList (:) []\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = foldlList (flip new) EmptyList	\N	\N	0	2	2015-06-15 13:43:45	2015-06-15 13:43:45	1	LinkedList.hs	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\tderiving (Show)\\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew = ListElement\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum EmptyList = undefined\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = undefined\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr new EmptyList\\r\\n\\r\\nfoldrList :: (a -\\u003e b -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldrList _ z EmptyList = z\\r\\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\\r\\n\\r\\nfoldlList :: (b -\\u003e a -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldlList _ z EmptyList = z\\r\\nfoldlList f z (ListElement x xs) = let z' = z `f` x\\r\\n                                in seq z' $ foldlList f z' xs  \\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList = foldrList (:) []\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = foldlList (flip new) EmptyList"}
3	9	34022bfe03afb1b21c1503b3	superseded	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        sorted_students = {\n            3: ("Kyle",),\n            4: ("Christopher", "Jennifer",),\n            6: ("Kareem",)\n        }\n\n        return sorted_students	\N	\N	0	1	2015-06-06 17:23:58	2015-06-06 17:23:58	2	school.py	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        sorted_students = {\\n            3: (\\"Kyle\\",),\\n            4: (\\"Christopher\\", \\"Jennifer\\",),\\n            6: (\\"Kareem\\",)\\n        }\\n\\n        return sorted_students"}
4	9	fec92b6f3cf233158da0c1a1	done	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        return {grade: tuple(sorted(student_names))\n            for grade, student_names in self.db.items()}	2015-06-14 21:41:01	\N	0	2	2015-06-13 13:22:47	2015-06-13 13:22:47	2	school.py	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        return {grade: tuple(sorted(student_names))\\n            for grade, student_names in self.db.items()}"}
5	9	efc6b93b11c3c65d54303b4b	done	python	leap	def is_leap_year(year):\r\n\tif year % 400 == 0:\r\n\t\treturn True\r\n\telif year % 4 == 0 and year % 100 > 0:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False	2015-06-13 15:06:36	\N	0	1	2015-06-11 15:40:34	2015-06-11 15:40:34	3	year.py	{"year.py":"def is_leap_year(year):\\r\\n\\tif year % 400 == 0:\\r\\n\\t\\treturn True\\r\\n\\telif year % 4 == 0 and year % 100 \\u003e 0:\\r\\n\\t\\treturn True\\r\\n\\telse:\\r\\n\\t\\treturn False"}
6	9	a2a4239ad0c98ed4e457ca26	superseded	python	rna-transcription	_mapping = {\n    "G": "C",\n    "C": "G",\n    "T": "A",\n    "A": "U"\n  }\n\n\ndef to_rna(seq):\n    return "".join([_mapping[c] for c in list(seq)])	\N	\N	0	1	2015-06-07 04:17:58	2015-06-07 04:17:58	4	/python/rna-transcription/dna.py	{"/python/rna-transcription/dna.py":"_mapping = {\\n    \\"G\\": \\"C\\",\\n    \\"C\\": \\"G\\",\\n    \\"T\\": \\"A\\",\\n    \\"A\\": \\"U\\"\\n  }\\n\\n\\ndef to_rna(seq):\\n    return \\"\\".join([_mapping[c] for c in list(seq)])"}
7	9	1e307c7ed38624028122bd30	pending	python	rna-transcription	_mapping = {\n    "G": "C",\n    "C": "G",\n    "T": "A",\n    "A": "U"\n  }\n\n\ndef to_rna(seq):\n    return "".join([_mapping[c] for c in seq])	\N	\N	0	2	2015-06-10 12:12:46	2015-06-10 12:12:46	4	/python/rna-transcription/dna.py	{"/python/rna-transcription/dna.py":"_mapping = {\\n    \\"G\\": \\"C\\",\\n    \\"C\\": \\"G\\",\\n    \\"T\\": \\"A\\",\\n    \\"A\\": \\"U\\"\\n  }\\n\\n\\ndef to_rna(seq):\\n    return \\"\\".join([_mapping[c] for c in seq])"}
8	9	3a454f47e330b0a19b6e8981	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	2015-06-12 17:57:46	2015-06-12 17:57:46	5	point-mutations.py	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
9	9	de369a8639d111d9416d460c	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	2015-06-16 20:08:41	\N	0	2	2015-06-12 21:26:15	2015-06-12 21:26:15	5	point-mutations.py	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
10	9	2a3b567a1694ad0a869c31ef	done	csharp	etl	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ClassLibrary1\r\n{\r\n    class ETL\r\n    {\r\n        public static Dictionary<string, int> Transform(Dictionary<int, IList<string>> old)\r\n        {\r\n            var newSystem = new Dictionary<string, int>();\r\n\r\n            foreach (KeyValuePair<int, IList<string>> entry in old)\r\n            {\r\n                for (int i = 0; i < entry.Value.Count; i++)\r\n                {\r\n                    newSystem.Add(entry.Value[i].ToLower(), entry.Key);\r\n                }\r\n            }\r\n\r\n            return newSystem;\r\n        }\r\n    }\r\n}\r	2015-06-18 06:52:11	\N	0	1	2015-06-09 09:39:35	2015-06-09 09:39:35	6	ETL.cs	{"ETL.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace ClassLibrary1\\r\\n{\\r\\n    class ETL\\r\\n    {\\r\\n        public static Dictionary\\u003cstring, int\\u003e Transform(Dictionary\\u003cint, IList\\u003cstring\\u003e\\u003e old)\\r\\n        {\\r\\n            var newSystem = new Dictionary\\u003cstring, int\\u003e();\\r\\n\\r\\n            foreach (KeyValuePair\\u003cint, IList\\u003cstring\\u003e\\u003e entry in old)\\r\\n            {\\r\\n                for (int i = 0; i \\u003c entry.Value.Count; i++)\\r\\n                {\\r\\n                    newSystem.Add(entry.Value[i].ToLower(), entry.Key);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return newSystem;\\r\\n        }\\r\\n    }\\r\\n}\\r"}
15	12	37915261d7adaad7c0a5b96b	done	javascript	word-count	function words(str){\n\tvar lines = str.replace("\\n", " ").replace("\\t", " ").replace("  "," ");\n\tvar wordarr = lines.split(" ");\n\tvar wordobj = {};\n\twordarr.forEach( function(word) {\n\t\tif (word == "toString"){\n\t\t\twordobj[word] = 1;\n\t\t}\n\t\telse if(wordobj[word]){\n\t\t\twordobj[word] += 1;\n\t\t}\n\t\telse{\n\t\t\twordobj[word] = 1;\n\t\t}\n\t});\n\treturn wordobj;\n\n}	2015-03-18 15:34:24	\N	0	1	2015-03-18 14:26:20	2015-03-18 14:26:20	9	/javascript/word-count/word-count.js	{"/javascript/word-count/word-count.js":"function words(str){\\n\\tvar lines = str.replace(\\"\\\\n\\", \\" \\").replace(\\"\\\\t\\", \\" \\").replace(\\"  \\",\\" \\");\\n\\tvar wordarr = lines.split(\\" \\");\\n\\tvar wordobj = {};\\n\\twordarr.forEach( function(word) {\\n\\t\\tif (word == \\"toString\\"){\\n\\t\\t\\twordobj[word] = 1;\\n\\t\\t}\\n\\t\\telse if(wordobj[word]){\\n\\t\\t\\twordobj[word] += 1;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\twordobj[word] = 1;\\n\\t\\t}\\n\\t});\\n\\treturn wordobj;\\n\\n}"}
11	11	bdd0506d147d520760ee50b9	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	2015-01-06 16:04:47	\N	0	3	2014-12-26 09:33:02	2014-12-26 09:33:02	7	RobotName.fs	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
12	11	9d5c9c9ad054174336557e7f	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	2015-01-03 20:07:06	2015-01-03 20:07:06	7	RobotName.fs	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
13	11	ef40bbff2ed64d25c97ebba9	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	2015-04-24 18:20:24	2015-04-24 18:20:24	7	RobotName.fs	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
14	11	2624f8f234307ddbe191b43b	pending	csharp	triangle	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\npublic enum TriangleKind\r\n{\r\n    Scalene,\r\n    Isosceles,\r\n    Equilateral\r\n}\r\n\r\npublic class TriangleException : Exception\r\n{\r\n}\r\n\r\npublic class Triangle\r\n{\r\n    private decimal side1;\r\n    private decimal side2;\r\n    private decimal side3;\r\n\r\n    public Triangle(decimal side1, decimal side2, decimal side3)\r\n    {\r\n        this.side1 = side1;\r\n        this.side2 = side2;\r\n        this.side3 = side3;\r\n\r\n        if (!TriangleIsValid())\r\n            throw new TriangleException();\r\n    }\r\n    \r\n    private bool TriangleIsValid()\r\n    {\r\n        return\r\n            side1 + side2 > side3 &&\r\n            side2 + side3 > side1 &&\r\n            side1 + side3 > side2;\r\n    }\r\n\r\n    public TriangleKind Kind()\r\n    {\r\n        if (IsEquilateral())\r\n            return TriangleKind.Equilateral;\r\n\r\n        if (IsIsosceles())\r\n            return TriangleKind.Isosceles;\r\n\r\n        return TriangleKind.Scalene;\r\n    }\r\n    \r\n    private bool IsEquilateral()\r\n    {\r\n        return side1 == side2 && side2 == side3;\r\n    }\r\n\r\n    private bool IsIsosceles()\r\n    {\r\n        return\r\n            side1 == side2 ||\r\n            side1 == side3 ||\r\n            side2 == side3;\r\n    }\r\n}	\N	\N	0	1	2015-02-02 17:53:32	2015-02-02 17:53:32	8	\\csharp\\triangle\\Triangle.cs	{"\\\\csharp\\\\triangle\\\\Triangle.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\n\\r\\npublic enum TriangleKind\\r\\n{\\r\\n    Scalene,\\r\\n    Isosceles,\\r\\n    Equilateral\\r\\n}\\r\\n\\r\\npublic class TriangleException : Exception\\r\\n{\\r\\n}\\r\\n\\r\\npublic class Triangle\\r\\n{\\r\\n    private decimal side1;\\r\\n    private decimal side2;\\r\\n    private decimal side3;\\r\\n\\r\\n    public Triangle(decimal side1, decimal side2, decimal side3)\\r\\n    {\\r\\n        this.side1 = side1;\\r\\n        this.side2 = side2;\\r\\n        this.side3 = side3;\\r\\n\\r\\n        if (!TriangleIsValid())\\r\\n            throw new TriangleException();\\r\\n    }\\r\\n    \\r\\n    private bool TriangleIsValid()\\r\\n    {\\r\\n        return\\r\\n            side1 + side2 \\u003e side3 \\u0026\\u0026\\r\\n            side2 + side3 \\u003e side1 \\u0026\\u0026\\r\\n            side1 + side3 \\u003e side2;\\r\\n    }\\r\\n\\r\\n    public TriangleKind Kind()\\r\\n    {\\r\\n        if (IsEquilateral())\\r\\n            return TriangleKind.Equilateral;\\r\\n\\r\\n        if (IsIsosceles())\\r\\n            return TriangleKind.Isosceles;\\r\\n\\r\\n        return TriangleKind.Scalene;\\r\\n    }\\r\\n    \\r\\n    private bool IsEquilateral()\\r\\n    {\\r\\n        return side1 == side2 \\u0026\\u0026 side2 == side3;\\r\\n    }\\r\\n\\r\\n    private bool IsIsosceles()\\r\\n    {\\r\\n        return\\r\\n            side1 == side2 ||\\r\\n            side1 == side3 ||\\r\\n            side2 == side3;\\r\\n    }\\r\\n}"}
66	28	635d9a86ae7dcbb6cbd3a9c4	done	python	anagram	def detect_anagrams(word, l):\n\tword_letters = list(word.lower())\n\tword_letters.sort()\n\twords_list = [list(i.lower()) for i in l]\n\tanagrams = []\n\tfor w in range(len(words_list)):\n\t\twords_list[w].sort()\n\t\tprint(words_list[w] == word_letters)\n\t\tif word.lower() != l[w].lower() and words_list[w] == word_letters:\n\t\t\tanagrams.append(l[w])\n\treturn anagrams	2015-03-05 22:06:58	\N	0	1	2015-02-23 05:40:17	2015-02-23 05:40:17	42	anagram.py	{"anagram.py":"def detect_anagrams(word, l):\\n\\tword_letters = list(word.lower())\\n\\tword_letters.sort()\\n\\twords_list = [list(i.lower()) for i in l]\\n\\tanagrams = []\\n\\tfor w in range(len(words_list)):\\n\\t\\twords_list[w].sort()\\n\\t\\tprint(words_list[w] == word_letters)\\n\\t\\tif word.lower() != l[w].lower() and words_list[w] == word_letters:\\n\\t\\t\\tanagrams.append(l[w])\\n\\treturn anagrams"}
16	12	38be45dce6cffd1d7e6a0928	done	python	bob	def hey(what):\n    return next(iter([v for f, v in RESPONSES.iteritems() if f(what)]))\n\ndef silent(words):\n    return not words.strip()\n\ndef shout(words):\n    return words.isupper()\n\ndef question(words):\n    return words.endswith('?') and not shout(words)\n\ndef anything(words):\n    return True\n\nRESPONSES = {silent: "Fine. Be that way!", shout: "Whoa, chill out!", question: "Sure.", anything: "Whatever."}	2015-02-22 17:58:29	\N	0	3	2015-02-14 00:33:54	2015-02-14 00:33:54	10	bob.py	{"bob.py":"def hey(what):\\n    return next(iter([v for f, v in RESPONSES.iteritems() if f(what)]))\\n\\ndef silent(words):\\n    return not words.strip()\\n\\ndef shout(words):\\n    return words.isupper()\\n\\ndef question(words):\\n    return words.endswith('?') and not shout(words)\\n\\ndef anything(words):\\n    return True\\n\\nRESPONSES = {silent: \\"Fine. Be that way!\\", shout: \\"Whoa, chill out!\\", question: \\"Sure.\\", anything: \\"Whatever.\\"}"}
17	12	87454a9aa371b0422d2ebcf5	superseded	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n    if not what.strip():\n        return "Fine. Be that way!"\n    elif what.isupper(): \n        return "Whoa, chill out!"\n    elif what.endswith('?'):\n        return "Sure."\n    else:\n        return "Whatever."	\N	\N	0	2	2015-03-01 18:28:00	2015-03-01 18:28:00	10	bob.py	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n    if not what.strip():\\n        return \\"Fine. Be that way!\\"\\n    elif what.isupper(): \\n        return \\"Whoa, chill out!\\"\\n    elif what.endswith('?'):\\n        return \\"Sure.\\"\\n    else:\\n        return \\"Whatever.\\""}
18	12	4ab3746adf43359887140873	superseded	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n    if not what.strip():\n        return "Fine. Be that way!"\n    elif what.upper() == what and what.lower() != what:\n        return "Whoa, chill out!"\n    elif what.endswith('?'):\n        return "Sure."\n    else:\n        return "Whatever."	\N	\N	0	1	2015-03-22 14:28:58	2015-03-22 14:28:58	10	bob.py	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n    if not what.strip():\\n        return \\"Fine. Be that way!\\"\\n    elif what.upper() == what and what.lower() != what:\\n        return \\"Whoa, chill out!\\"\\n    elif what.endswith('?'):\\n        return \\"Sure.\\"\\n    else:\\n        return \\"Whatever.\\""}
19	12	5c0ab0042bbb319ec33e7ef5	done	python	leap	#\n# Skeleton file for the Python "Leap" exercise.\n#\n\n# Also solvable with 3 nested if's\n\ndef is_leap_year(year):\n\tif \tyear%4 == 0 and year%100 == 0 and year%400 == 0\\\n\t\t\tor \\\n\t\t\tyear%4 == 0 and year%100 != 0:\n\t\treturn True\n\telse:\n\t\treturn False	2015-03-21 00:56:25	\N	0	1	2015-03-19 22:40:49	2015-03-19 22:40:49	11	year.py	{"year.py":"#\\n# Skeleton file for the Python \\"Leap\\" exercise.\\n#\\n\\n# Also solvable with 3 nested if's\\n\\ndef is_leap_year(year):\\n\\tif \\tyear%4 == 0 and year%100 == 0 and year%400 == 0\\\\\\n\\t\\t\\tor \\\\\\n\\t\\t\\tyear%4 == 0 and year%100 != 0:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False"}
20	12	852815176572cfbc76265f61	done	python	luhn	class Luhn(object):\n\n  def __init__(self, code):\n    self.original_code = [ int(item) for item in reversed(list(str(code))) ]\n    self.code = [ self.original_code[i] * 2 if i % 2 != 0 and self.original_code[i] < 5 else self.original_code[i] * 2 - 9 if i % 2 != 0 else self.original_code[i] for i in range (len(self.original_code)) ][::-1]\n    self.check = sum(self.code) % 10\n\n  def addends(self):\n    return self.code\n\n  def checksum(self):\n    return self.check\n\n  def is_valid(self):\n    return self.check == 0\n\n  @staticmethod\n  def create(num):\n    return num * 10 + ((10 - Luhn(num * 10).checksum()) % 10)	2015-04-17 18:00:18	\N	0	1	2015-04-13 01:35:50	2015-04-13 01:35:50	12	luhn.py	{"luhn.py":"class Luhn(object):\\n\\n  def __init__(self, code):\\n    self.original_code = [ int(item) for item in reversed(list(str(code))) ]\\n    self.code = [ self.original_code[i] * 2 if i % 2 != 0 and self.original_code[i] \\u003c 5 else self.original_code[i] * 2 - 9 if i % 2 != 0 else self.original_code[i] for i in range (len(self.original_code)) ][::-1]\\n    self.check = sum(self.code) % 10\\n\\n  def addends(self):\\n    return self.code\\n\\n  def checksum(self):\\n    return self.check\\n\\n  def is_valid(self):\\n    return self.check == 0\\n\\n  @staticmethod\\n  def create(num):\\n    return num * 10 + ((10 - Luhn(num * 10).checksum()) % 10)"}
21	12	5e2ffb2f5add02c4abf892a4	pending	ruby	etl	module ETL\n\n\tdef self.transform(input)\n\t\tHash[ *input.invert.map { |k,v| k.map { |l| [l.downcase, v] } }.flatten ]\n\tend\n\t\nend	\N	\N	0	1	2015-01-03 04:31:55	2015-01-03 04:31:55	13	etl.rb	{"etl.rb":"module ETL\\n\\n\\tdef self.transform(input)\\n\\t\\tHash[ *input.invert.map { |k,v| k.map { |l| [l.downcase, v] } }.flatten ]\\n\\tend\\n\\t\\nend"}
31	28	8c89224b1b00cb3f1696ce94	done	ruby	bob	module Speach\n  refine String do\n    def shouting?\n      self[/[[:upper:]]/] && self[/\\A[^[:lower:]]*\\z/]\n    end\n\n    def question?\n      end_with?('?')\n    end\n\n    def silence?\n      strip.empty?\n    end\n  end\nend\n\nclass Bob\n  using Speach\n\n  def hey(remark)\n    case\n    when remark.shouting? then 'Whoa, chill out!'\n    when remark.question? then 'Sure.'\n    when remark.silence? then 'Fine. Be that way!'\n    else 'Whatever.'\n    end\n  end\nend	2015-04-29 02:27:55	\N	0	1	2015-04-24 05:52:23	2015-04-24 05:52:23	19	/ruby/bob/bob.rb	{"/ruby/bob/bob.rb":"module Speach\\n  refine String do\\n    def shouting?\\n      self[/[[:upper:]]/] \\u0026\\u0026 self[/\\\\A[^[:lower:]]*\\\\z/]\\n    end\\n\\n    def question?\\n      end_with?('?')\\n    end\\n\\n    def silence?\\n      strip.empty?\\n    end\\n  end\\nend\\n\\nclass Bob\\n  using Speach\\n\\n  def hey(remark)\\n    case\\n    when remark.shouting? then 'Whoa, chill out!'\\n    when remark.question? then 'Sure.'\\n    when remark.silence? then 'Fine. Be that way!'\\n    else 'Whatever.'\\n    end\\n  end\\nend"}
32	28	4b2f0d5f1f0c796e44f3dbe5	superseded	clojure	accumulate	(ns accumulate)\n\n(defn accumulate [f x]\n  (if (empty? x)\n    `()\n    (cons (f (first x)) (accumulate f (rest x)))))	\N	\N	0	1	2015-03-05 20:56:51	2015-03-05 20:56:51	20	accumulate.clj	{"accumulate.clj":"(ns accumulate)\\n\\n(defn accumulate [f x]\\n  (if (empty? x)\\n    `()\\n    (cons (f (first x)) (accumulate f (rest x)))))"}
33	28	eaba7fbe4c522a548f6a4e74	done	clojure	accumulate	(ns accumulate)\n\n(defn accumulate [f x]\n  (lazy-seq\n   (when-let [s (seq x)]\n     (cons (f (first s)) (accumulate f (rest s))))))	2015-05-15 04:50:17	\N	0	2	2015-05-13 01:44:20	2015-05-13 01:44:20	20	accumulate.clj	{"accumulate.clj":"(ns accumulate)\\n\\n(defn accumulate [f x]\\n  (lazy-seq\\n   (when-let [s (seq x)]\\n     (cons (f (first s)) (accumulate f (rest s))))))"}
348	42	ee34b657fa09ef4fc86ddd40	pending	scala	bob	class Bob {\n  def hey(s : String) = {\n    if (s.trim().length() == 0) "Fine. Be that way!"\n    else if (s.matches("[^a-z]*[A-Z][^a-z]*")) "Whoa, chill out!"\n    else if (s.matches(".*\\\\?")) "Sure."\n    else "Whatever."\n\n  }\n}	\N	\N	0	2	2015-05-31 17:40:13	2015-05-31 17:40:13	228	src/main/scala/bob.scala	{"src/main/scala/bob.scala":"class Bob {\\n  def hey(s : String) = {\\n    if (s.trim().length() == 0) \\"Fine. Be that way!\\"\\n    else if (s.matches(\\"[^a-z]*[A-Z][^a-z]*\\")) \\"Whoa, chill out!\\"\\n    else if (s.matches(\\".*\\\\\\\\?\\")) \\"Sure.\\"\\n    else \\"Whatever.\\"\\n\\n  }\\n}"}
22	15	9978959e429304e8285d83d8	done	python	anagram	def detect_anagrams(word, words):\r\n\t"""\r\n\tInput:\tString word, which determines what the \r\n\t\t\tanagrams will be spelled from.\r\n\t\t\tList words, which gives an unsorted list\r\n\t\t\tof words.\r\n\tOutput:\tList result, which gives words which are\r\n\t\t\tanagrams of the original word.\r\n\t"""\r\n\r\n\tresult = []\r\n\r\n\tfor i in range(0, len(words)):\r\n\t\tvalid = True\r\n\t\tcompareList1 = list(word.lower())\r\n\t\tcompareList1.sort()\r\n\t\tcompareList2 = list(words[i].lower())\r\n\t\tcompareList2.sort()\r\n\r\n\t\tfor a in range(0, len(word)):\r\n\t\t\tif compareList1[a] != compareList2[a] or len(compareList1) != len(compareList2):\r\n\t\t\t\tvalid = False\r\n\t\t\t\tbreak\r\n\r\n\t\tif valid == True and words[i].lower() != word.lower():\r\n\t\t\tresult.append(words[i])\r\n\r\n\treturn result	2015-01-27 07:26:11	\N	0	1	2015-01-26 22:35:16	2015-01-26 22:35:16	14	\\python\\anagram\\anagram.py	{"\\\\python\\\\anagram\\\\anagram.py":"def detect_anagrams(word, words):\\r\\n\\t\\"\\"\\"\\r\\n\\tInput:\\tString word, which determines what the \\r\\n\\t\\t\\tanagrams will be spelled from.\\r\\n\\t\\t\\tList words, which gives an unsorted list\\r\\n\\t\\t\\tof words.\\r\\n\\tOutput:\\tList result, which gives words which are\\r\\n\\t\\t\\tanagrams of the original word.\\r\\n\\t\\"\\"\\"\\r\\n\\r\\n\\tresult = []\\r\\n\\r\\n\\tfor i in range(0, len(words)):\\r\\n\\t\\tvalid = True\\r\\n\\t\\tcompareList1 = list(word.lower())\\r\\n\\t\\tcompareList1.sort()\\r\\n\\t\\tcompareList2 = list(words[i].lower())\\r\\n\\t\\tcompareList2.sort()\\r\\n\\r\\n\\t\\tfor a in range(0, len(word)):\\r\\n\\t\\t\\tif compareList1[a] != compareList2[a] or len(compareList1) != len(compareList2):\\r\\n\\t\\t\\t\\tvalid = False\\r\\n\\t\\t\\t\\tbreak\\r\\n\\r\\n\\t\\tif valid == True and words[i].lower() != word.lower():\\r\\n\\t\\t\\tresult.append(words[i])\\r\\n\\r\\n\\treturn result"}
23	15	0a9d2a02e8808ee7710ecc79	superseded	clojure	rna-transcription	(ns rna-transcription)\n\n(defn to-rna [strands] \n\t(let [transcribeStrand\n\t\t(fn [strand]\n\t\t\t(cond\n\t\t\t\t(= \\G strand) \\C\n\t\t\t\t(= \\C strand) \\G \n\t\t\t\t(= \\T strand) \\A\n\t\t\t\t(= \\A strand) \\U\n\t\t\t\t:else (throw (AssertionError.))\n\t\t\t))]\n\t(apply str (map transcribeStrand strands))))	\N	\N	0	1	2014-12-23 13:43:18	2014-12-23 13:43:18	15	rna_transcription.clj	{"rna_transcription.clj":"(ns rna-transcription)\\n\\n(defn to-rna [strands] \\n\\t(let [transcribeStrand\\n\\t\\t(fn [strand]\\n\\t\\t\\t(cond\\n\\t\\t\\t\\t(= \\\\G strand) \\\\C\\n\\t\\t\\t\\t(= \\\\C strand) \\\\G \\n\\t\\t\\t\\t(= \\\\T strand) \\\\A\\n\\t\\t\\t\\t(= \\\\A strand) \\\\U\\n\\t\\t\\t\\t:else (throw (AssertionError.))\\n\\t\\t\\t))]\\n\\t(apply str (map transcribeStrand strands))))"}
24	15	8ff56d56900504d12db81eef	done	clojure	rna-transcription	(ns rna-transcription)\n\n(def transcription\n  {\n\t \\G  \\C\n\t \\C  \\G \n\t \\T  \\A\n\t \\A  \\U\n   })\n\n(defn to-rna [strands] \n\t(let [transcribeStrand\n\t\t(fn [strand]\n\t\t\t(if\n\t\t\t\t(transcription strand)\n\t\t\t\t(transcription strand)\n    \t\t\t(assert false)\n\t\t\t))]\n\t(apply str (map transcribeStrand strands))))	2015-02-17 03:55:42	\N	0	2	2015-02-06 03:39:26	2015-02-06 03:39:26	15	/clojure/rna-transcription/rna_transcription.clj	{"/clojure/rna-transcription/rna_transcription.clj":"(ns rna-transcription)\\n\\n(def transcription\\n  {\\n\\t \\\\G  \\\\C\\n\\t \\\\C  \\\\G \\n\\t \\\\T  \\\\A\\n\\t \\\\A  \\\\U\\n   })\\n\\n(defn to-rna [strands] \\n\\t(let [transcribeStrand\\n\\t\\t(fn [strand]\\n\\t\\t\\t(if\\n\\t\\t\\t\\t(transcription strand)\\n\\t\\t\\t\\t(transcription strand)\\n    \\t\\t\\t(assert false)\\n\\t\\t\\t))]\\n\\t(apply str (map transcribeStrand strands))))"}
34	28	83503757ca2acb7a36287f3f	done	python	bob	import re\n\n\ndef is_yell(sentence):\n    '''Yelling is a senter all uppercase with ! at end'''\n    return re.search('[A-Z]', sentence) and \\\n        sentence.upper() == sentence\n\n\ndef is_question(sentence):\n    return sentence.endswith('?')\n\n\ndef is_nothing(sentence):\n    return not sentence.strip()\n\n\nclass Bob(object):\n    def hey(self, sentence):\n        if is_yell(sentence):\n            return 'Woah, chill out!'\n        elif is_question(sentence):\n            return 'Sure.'\n        elif is_nothing(sentence):\n            return 'Fine. Be that way!'\n        return 'Whatever.'	2015-05-02 20:40:43	\N	0	1	2015-05-01 21:30:28	2015-05-01 21:30:28	21	bob.py	{"bob.py":"import re\\n\\n\\ndef is_yell(sentence):\\n    '''Yelling is a senter all uppercase with ! at end'''\\n    return re.search('[A-Z]', sentence) and \\\\\\n        sentence.upper() == sentence\\n\\n\\ndef is_question(sentence):\\n    return sentence.endswith('?')\\n\\n\\ndef is_nothing(sentence):\\n    return not sentence.strip()\\n\\n\\nclass Bob(object):\\n    def hey(self, sentence):\\n        if is_yell(sentence):\\n            return 'Woah, chill out!'\\n        elif is_question(sentence):\\n            return 'Sure.'\\n        elif is_nothing(sentence):\\n            return 'Fine. Be that way!'\\n        return 'Whatever.'"}
35	28	f62d5b9ba1984ad123abe715	superseded	haskell	bank-account	module BankAccount ( BankAccount\r\n                   , openAccount\r\n                   , closeAccount\r\n                   , getBalance\r\n                   , incrementBalance\r\n                   ) where\r\n\r\nimport Control.Concurrent\r\n\r\ntype BankAccount = MVar (Maybe Int)\r\n\r\nopenAccount :: IO BankAccount\r\nopenAccount = newMVar (Just 0)\r\n\r\ncloseAccount :: BankAccount -> IO ()\r\ncloseAccount ba = takeMVar ba >> putMVar ba Nothing\r\n\r\ngetBalance :: BankAccount -> IO (Maybe Int)\r\ngetBalance = readMVar\r\n\r\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\r\nincrementBalance ba amount = do\r\n  modifyMVar_ ba $ return . fmap (+ amount)\r\n  getBalance ba	\N	\N	0	1	2015-03-08 14:16:42	2015-03-08 14:16:42	22	\\haskell\\bank-account\\BankAccount.hs	{"\\\\haskell\\\\bank-account\\\\BankAccount.hs":"module BankAccount ( BankAccount\\r\\n                   , openAccount\\r\\n                   , closeAccount\\r\\n                   , getBalance\\r\\n                   , incrementBalance\\r\\n                   ) where\\r\\n\\r\\nimport Control.Concurrent\\r\\n\\r\\ntype BankAccount = MVar (Maybe Int)\\r\\n\\r\\nopenAccount :: IO BankAccount\\r\\nopenAccount = newMVar (Just 0)\\r\\n\\r\\ncloseAccount :: BankAccount -\\u003e IO ()\\r\\ncloseAccount ba = takeMVar ba \\u003e\\u003e putMVar ba Nothing\\r\\n\\r\\ngetBalance :: BankAccount -\\u003e IO (Maybe Int)\\r\\ngetBalance = readMVar\\r\\n\\r\\nincrementBalance :: BankAccount -\\u003e Int -\\u003e IO (Maybe Int)\\r\\nincrementBalance ba amount = do\\r\\n  modifyMVar_ ba $ return . fmap (+ amount)\\r\\n  getBalance ba"}
36	28	88db9c933418d4710dcd4163	superseded	haskell	bank-account	module BankAccount ( BankAccount\r\n                   , openAccount\r\n                   , closeAccount\r\n                   , getBalance\r\n                   , incrementBalance\r\n                   ) where\r\n\r\nimport Control.Concurrent\r\nimport Control.Monad (void)\r\nimport Control.DeepSeq (force)\r\n\r\ntype BankAccount = MVar (Maybe Int)\r\n\r\nopenAccount :: IO BankAccount\r\nopenAccount = newMVar (Just 0)\r\n\r\ncloseAccount :: BankAccount -> IO ()\r\ncloseAccount ba = void $ swapMVar ba Nothing\r\n\r\ngetBalance :: BankAccount -> IO (Maybe Int)\r\ngetBalance = readMVar\r\n\r\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\r\nincrementBalance ba amount = modifyMVar ba $ return . dup . force . fmap (+amount)\r\n  where\r\n    dup x = (x,x)	\N	\N	0	2	2015-04-07 01:04:20	2015-04-07 01:04:20	22	\\haskell\\bank-account\\BankAccount.hs	{"\\\\haskell\\\\bank-account\\\\BankAccount.hs":"module BankAccount ( BankAccount\\r\\n                   , openAccount\\r\\n                   , closeAccount\\r\\n                   , getBalance\\r\\n                   , incrementBalance\\r\\n                   ) where\\r\\n\\r\\nimport Control.Concurrent\\r\\nimport Control.Monad (void)\\r\\nimport Control.DeepSeq (force)\\r\\n\\r\\ntype BankAccount = MVar (Maybe Int)\\r\\n\\r\\nopenAccount :: IO BankAccount\\r\\nopenAccount = newMVar (Just 0)\\r\\n\\r\\ncloseAccount :: BankAccount -\\u003e IO ()\\r\\ncloseAccount ba = void $ swapMVar ba Nothing\\r\\n\\r\\ngetBalance :: BankAccount -\\u003e IO (Maybe Int)\\r\\ngetBalance = readMVar\\r\\n\\r\\nincrementBalance :: BankAccount -\\u003e Int -\\u003e IO (Maybe Int)\\r\\nincrementBalance ba amount = modifyMVar ba $ return . dup . force . fmap (+amount)\\r\\n  where\\r\\n    dup x = (x,x)"}
25	15	9380dc5437bb82966f9e5b1d	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare(a, b) do\n    result = {:equal, :unequal, :sublist, :superlist}\n    _compare(a, b)\n  end\n\n  defp _compare(a, a) do\n    :equal\n  end\n\n  defp _compare(a, b) do\n    cond do\n      sublist_of?(a, b) ->\n        :sublist\n      sublist_of?(b, a) ->\n        :superlist\n      true              ->\n        :unequal\n    end\n  end\n\n  defp sublist_of?([], _), do: true\n  defp sublist_of?(_, []), do: false\n  defp sublist_of?(a, b) when length(a) > length(b), do: false\n  defp sublist_of?(a, b) do\n    if Enum.take(b, length(a)) === a do\n      true\n    else\n      [_ | t] = b\n      sublist_of?(a, t)\n    end\n  end \n\n  defp compact(list) do\n    Enum.reject(list, &is_nil/1)\n  end\nend	2014-10-26 06:24:50	\N	0	1	2014-10-26 01:26:28	2014-10-26 01:26:28	16	/elixir/sublist/sublist.exs	{"/elixir/sublist/sublist.exs":"defmodule Sublist do\\n  @doc \\"\\"\\"\\n  Returns whether the first list is a sublist or a superlist of the second list\\n  and if not whether it is equal or unequal to the second list.\\n  \\"\\"\\"\\n  def compare(a, b) do\\n    result = {:equal, :unequal, :sublist, :superlist}\\n    _compare(a, b)\\n  end\\n\\n  defp _compare(a, a) do\\n    :equal\\n  end\\n\\n  defp _compare(a, b) do\\n    cond do\\n      sublist_of?(a, b) -\\u003e\\n        :sublist\\n      sublist_of?(b, a) -\\u003e\\n        :superlist\\n      true              -\\u003e\\n        :unequal\\n    end\\n  end\\n\\n  defp sublist_of?([], _), do: true\\n  defp sublist_of?(_, []), do: false\\n  defp sublist_of?(a, b) when length(a) \\u003e length(b), do: false\\n  defp sublist_of?(a, b) do\\n    if Enum.take(b, length(a)) === a do\\n      true\\n    else\\n      [_ | t] = b\\n      sublist_of?(a, t)\\n    end\\n  end \\n\\n  defp compact(list) do\\n    Enum.reject(list, \\u0026is_nil/1)\\n  end\\nend"}
26	15	94d5381da355dee27918cbb9	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (not . isLower) s && any isLetter s	2014-11-19 22:52:14	\N	0	2	2014-11-11 01:03:55	2014-11-11 01:03:55	17	bob.hs	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (not . isLower) s \\u0026\\u0026 any isLetter s"}
27	15	44be339e49a0ae75c3340acc	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (isLetter .-> isUpper) s && any isLetter s\n  where\n    a .-> b = \\x -> not (a x) || b x -- logical implication	\N	\N	0	1	2014-12-27 22:43:46	2014-12-27 22:43:46	17	bob.hs	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (isLetter .-\\u003e isUpper) s \\u0026\\u0026 any isLetter s\\n  where\\n    a .-\\u003e b = \\\\x -\\u003e not (a x) || b x -- logical implication"}
28	22	02635abe4d2283f9163d2e35	superseded	ruby	proverb	class Proverb\n  def initialize(*words)\n    @word, qualifier = '', get_qualifier(words)\n\n    (words.size - 1).times { |index| @word += "For want of a #{words[index]} the #{words[index+1]} was lost.\\n" }\n\n    @word += (qualifier) ? "And all for the want of a #{qualifier} #{words.first}." : "And all for the want of a #{words.first}."\n  end\n\n  def to_s\n    @word.to_s\n  end\n\nprivate\n  def get_qualifier(input)\n    input.pop[:qualifier] if input.last.is_a?(Hash)\n  end\nend	\N	\N	0	2	2014-11-10 02:59:04	2014-11-10 02:59:04	18	proverb.rb	{"proverb.rb":"class Proverb\\n  def initialize(*words)\\n    @word, qualifier = '', get_qualifier(words)\\n\\n    (words.size - 1).times { |index| @word += \\"For want of a #{words[index]} the #{words[index+1]} was lost.\\\\n\\" }\\n\\n    @word += (qualifier) ? \\"And all for the want of a #{qualifier} #{words.first}.\\" : \\"And all for the want of a #{words.first}.\\"\\n  end\\n\\n  def to_s\\n    @word.to_s\\n  end\\n\\nprivate\\n  def get_qualifier(input)\\n    input.pop[:qualifier] if input.last.is_a?(Hash)\\n  end\\nend"}
29	22	03db8cdedefd0f433243f2d3	superseded	ruby	proverb	class Proverb\n  def initialize(*words)\n    optional = words.pop if words.last.is_a?(Hash)\n    @word = ''\n    words_size = words.size - 1\n\n    words.size.times do |index|\n      if (index === words_size)\n        @word += optional ? "And all for the want of a #{optional[:qualifier]} #{words.first}." : "And all for the want of a #{words.first}."\n      else\n        @word += "For want of a #{words[i]} the #{words[i+1]} was lost.\\n"\n      end\n    end\n    @word\n  end\n\n  def to_s\n    @word.to_s\n  end\nend	\N	\N	0	1	2014-11-11 17:02:00	2014-11-11 17:02:00	18	proverb.rb	{"proverb.rb":"class Proverb\\n  def initialize(*words)\\n    optional = words.pop if words.last.is_a?(Hash)\\n    @word = ''\\n    words_size = words.size - 1\\n\\n    words.size.times do |index|\\n      if (index === words_size)\\n        @word += optional ? \\"And all for the want of a #{optional[:qualifier]} #{words.first}.\\" : \\"And all for the want of a #{words.first}.\\"\\n      else\\n        @word += \\"For want of a #{words[i]} the #{words[i+1]} was lost.\\\\n\\"\\n      end\\n    end\\n    @word\\n  end\\n\\n  def to_s\\n    @word.to_s\\n  end\\nend"}
30	22	14ec9d4737404d011e2efcc0	pending	ruby	proverb	class Proverb\n  def initialize(*words)\n    @word, qualifier, last_word = '', get_qualifier(words), 'And all for the want of a'\n\n    words.each_cons(2) { |list| @word += "For want of a #{list[0]} the #{list[1]} was lost.\\n" }\n    @word += "#{last_word} #{qualifier}#{words.first}."\n  end\n\n  def to_s\n    @word.to_s\n  end\n\nprivate\n  def get_qualifier(input)\n    (input.pop[:qualifier] + ' ' if input.last.is_a?(Hash)) || ''\n  end\nend	\N	\N	0	3	2015-02-19 15:06:57	2015-02-19 15:06:57	18	proverb.rb	{"proverb.rb":"class Proverb\\n  def initialize(*words)\\n    @word, qualifier, last_word = '', get_qualifier(words), 'And all for the want of a'\\n\\n    words.each_cons(2) { |list| @word += \\"For want of a #{list[0]} the #{list[1]} was lost.\\\\n\\" }\\n    @word += \\"#{last_word} #{qualifier}#{words.first}.\\"\\n  end\\n\\n  def to_s\\n    @word.to_s\\n  end\\n\\nprivate\\n  def get_qualifier(input)\\n    (input.pop[:qualifier] + ' ' if input.last.is_a?(Hash)) || ''\\n  end\\nend"}
37	28	19da3c77b4f1baca6d2243b2	done	haskell	bank-account	module BankAccount ( BankAccount\r\n                   , openAccount\r\n                   , closeAccount\r\n                   , getBalance\r\n                   , incrementBalance\r\n                   ) where\r\n\r\nimport Control.Concurrent\r\nimport Control.Monad (void)\r\nimport Control.DeepSeq (force)\r\n\r\ntype BankAccount = MVar (Maybe Int)\r\n\r\nopenAccount :: IO BankAccount\r\nopenAccount = newMVar (Just 0)\r\n\r\ncloseAccount :: BankAccount -> IO ()\r\ncloseAccount ba = void $ swapMVar ba Nothing\r\n\r\ngetBalance :: BankAccount -> IO (Maybe Int)\r\ngetBalance = readMVar\r\n\r\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\r\nincrementBalance ba amount = modifyMVar ba $ return . force . dup . fmap (+amount)\r\n  where\r\n    dup x = (x,x)	2015-05-08 23:39:33	\N	0	3	2015-05-07 16:26:08	2015-05-07 16:26:08	22	\\haskell\\bank-account\\BankAccount.hs	{"\\\\haskell\\\\bank-account\\\\BankAccount.hs":"module BankAccount ( BankAccount\\r\\n                   , openAccount\\r\\n                   , closeAccount\\r\\n                   , getBalance\\r\\n                   , incrementBalance\\r\\n                   ) where\\r\\n\\r\\nimport Control.Concurrent\\r\\nimport Control.Monad (void)\\r\\nimport Control.DeepSeq (force)\\r\\n\\r\\ntype BankAccount = MVar (Maybe Int)\\r\\n\\r\\nopenAccount :: IO BankAccount\\r\\nopenAccount = newMVar (Just 0)\\r\\n\\r\\ncloseAccount :: BankAccount -\\u003e IO ()\\r\\ncloseAccount ba = void $ swapMVar ba Nothing\\r\\n\\r\\ngetBalance :: BankAccount -\\u003e IO (Maybe Int)\\r\\ngetBalance = readMVar\\r\\n\\r\\nincrementBalance :: BankAccount -\\u003e Int -\\u003e IO (Maybe Int)\\r\\nincrementBalance ba amount = modifyMVar ba $ return . force . dup . fmap (+amount)\\r\\n  where\\r\\n    dup x = (x,x)"}
38	28	0feb0e8db2ebe74bc9e5b8b9	done	php	trinary	<?php\n/**\n * Trinary\n *\n * @author    Protec Innovations <support@protecinnovations.co.uk>\n * @copyright 2014 Protec Innovations\n */\nclass Trinary\n{\n    protected $from = 0;\n\n    public function __construct($from)\n    {\n        if ($this->isTrinary($from)) {\n            $this->from = $from;\n        }\n    }\n\n    public function toDecimal()\n    {\n        return base_convert($this->from, 3, 10);\n    }\n\n    protected function isTrinary($number)\n    {\n        return (preg_match('[^0-2]', $number) === 0);\n    }\n}	2015-03-22 00:48:04	\N	0	1	2015-03-21 05:22:26	2015-03-21 05:22:26	23	trinary.php	{"trinary.php":"\\u003c?php\\n/**\\n * Trinary\\n *\\n * @author    Protec Innovations \\u003csupport@protecinnovations.co.uk\\u003e\\n * @copyright 2014 Protec Innovations\\n */\\nclass Trinary\\n{\\n    protected $from = 0;\\n\\n    public function __construct($from)\\n    {\\n        if ($this-\\u003eisTrinary($from)) {\\n            $this-\\u003efrom = $from;\\n        }\\n    }\\n\\n    public function toDecimal()\\n    {\\n        return base_convert($this-\\u003efrom, 3, 10);\\n    }\\n\\n    protected function isTrinary($number)\\n    {\\n        return (preg_match('[^0-2]', $number) === 0);\\n    }\\n}"}
39	28	189220959c59cb9688c020dc	done	javascript	anagram	var anagram = function (input){\n\n\treturn {\n\t\tinput: input,\n\t\tmatches: function(matchArr){\n\n\t\t\tif (typeof matchArr == "string"){\n\t\t\t\tmatchArr = [matchArr];\n\t\t\t\tif (arguments.length > 1){\n\t\t\t\t\tfor (var j = 1; j < arguments.length; j++) {\n\t\t\t\t\t\tmatchArr.push(arguments[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tfor (var i in matchArr){\n\t\t\t\tif (this.input.toLowerCase() === matchArr[i].toLowerCase()){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this.findMatch(this.input.toLowerCase(), matchArr[i].toLowerCase())){\n\t\t\t\t\tresult.push(matchArr[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\tfindMatch: function (input, str){\n\t\t\tif (input.length !== str.length) return false;\n\n\t\t\tinput = input.split("").sort();\n\t\t\tstr = str.split("").sort();\n\n\t\t\tfor (var i in input){\n\t\t\t\tif (input[i] != str[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t};\n\n};\n\nmodule.exports = anagram;	2015-03-05 19:30:52	\N	0	1	2015-03-04 21:58:53	2015-03-04 21:58:53	24	/javascript/anagram/anagram.js	{"/javascript/anagram/anagram.js":"var anagram = function (input){\\n\\n\\treturn {\\n\\t\\tinput: input,\\n\\t\\tmatches: function(matchArr){\\n\\n\\t\\t\\tif (typeof matchArr == \\"string\\"){\\n\\t\\t\\t\\tmatchArr = [matchArr];\\n\\t\\t\\t\\tif (arguments.length \\u003e 1){\\n\\t\\t\\t\\t\\tfor (var j = 1; j \\u003c arguments.length; j++) {\\n\\t\\t\\t\\t\\t\\tmatchArr.push(arguments[j]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tvar result = [];\\n\\t\\t\\t\\n\\t\\t\\tfor (var i in matchArr){\\n\\t\\t\\t\\tif (this.input.toLowerCase() === matchArr[i].toLowerCase()){\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.findMatch(this.input.toLowerCase(), matchArr[i].toLowerCase())){\\n\\t\\t\\t\\t\\tresult.push(matchArr[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn result;\\n\\t\\t},\\n\\t\\tfindMatch: function (input, str){\\n\\t\\t\\tif (input.length !== str.length) return false;\\n\\n\\t\\t\\tinput = input.split(\\"\\").sort();\\n\\t\\t\\tstr = str.split(\\"\\").sort();\\n\\n\\t\\t\\tfor (var i in input){\\n\\t\\t\\t\\tif (input[i] != str[i]) return false;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t};\\n\\n};\\n\\nmodule.exports = anagram;"}
40	28	8f4f06e56e6b5f3a1653e5ff	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	2015-02-15 05:01:51	\N	0	3	2015-02-11 22:58:41	2015-02-11 22:58:41	25	dna.clj	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
41	28	29fba89cd35dfba421d44461	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	2015-02-16 22:14:25	2015-02-16 22:14:25	25	dna.clj	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
42	28	0499385720c86439f047b2d7	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	2015-03-22 04:33:59	2015-03-22 04:33:59	25	dna.clj	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
43	28	44a61a3a5507edf17bf70052	pending	ruby	rna-transcription	class Complement\n\n\tdef self.of_dna(sequence)\n\n\t\tif sequence.include?('U')\n\t\t\traise ArgumentError\n\t\tend\n\n\t\tsequence.upcase\n\n\t\tsequence.gsub!(/[ATGC]/, 'A' => 'U', \n\t\t\t\t\t\t\t\t 'T' => 'A', \n\t\t\t\t\t\t\t\t 'G' => 'C', \n\t\t\t\t\t\t\t\t 'C' => 'G'\n\t\t\t\t\t\t\t )\n\n\t\treturn sequence \n\n\tend\n\n\n\n\tdef self.of_rna(sequence)\n\n\t\tcase sequence\n\t\twhen /T/\n\t\t\traise ArgumentError\n\t\tend\n\n\t\tsequence.upcase\n\n\t\tsequence.gsub!(/[UACG]/, 'U' => 'A', \n\t\t\t\t\t\t\t\t 'A' => 'T', \n\t\t\t\t\t\t\t\t 'C' => 'G', \n\t\t\t\t\t\t\t\t 'G' => 'C'\n\t\t\t\t\t\t\t )\n\n\t\treturn sequence \n\t\n\n\tend\n\n\n\nend	\N	\N	0	1	2015-04-12 20:55:27	2015-04-12 20:55:27	26	rna_transcription.rb	{"rna_transcription.rb":"class Complement\\n\\n\\tdef self.of_dna(sequence)\\n\\n\\t\\tif sequence.include?('U')\\n\\t\\t\\traise ArgumentError\\n\\t\\tend\\n\\n\\t\\tsequence.upcase\\n\\n\\t\\tsequence.gsub!(/[ATGC]/, 'A' =\\u003e 'U', \\n\\t\\t\\t\\t\\t\\t\\t\\t 'T' =\\u003e 'A', \\n\\t\\t\\t\\t\\t\\t\\t\\t 'G' =\\u003e 'C', \\n\\t\\t\\t\\t\\t\\t\\t\\t 'C' =\\u003e 'G'\\n\\t\\t\\t\\t\\t\\t\\t )\\n\\n\\t\\treturn sequence \\n\\n\\tend\\n\\n\\n\\n\\tdef self.of_rna(sequence)\\n\\n\\t\\tcase sequence\\n\\t\\twhen /T/\\n\\t\\t\\traise ArgumentError\\n\\t\\tend\\n\\n\\t\\tsequence.upcase\\n\\n\\t\\tsequence.gsub!(/[UACG]/, 'U' =\\u003e 'A', \\n\\t\\t\\t\\t\\t\\t\\t\\t 'A' =\\u003e 'T', \\n\\t\\t\\t\\t\\t\\t\\t\\t 'C' =\\u003e 'G', \\n\\t\\t\\t\\t\\t\\t\\t\\t 'G' =\\u003e 'C'\\n\\t\\t\\t\\t\\t\\t\\t )\\n\\n\\t\\treturn sequence \\n\\t\\n\\n\\tend\\n\\n\\n\\nend"}
44	28	03119337e9b502b27c224aee	superseded	python	word-count	def word_count(string):\r\n\td = dict()\r\n\tarray = string.split()\r\n\tfor i in array:\r\n\t\tif i in d.keys():\r\n\t\t\td[i] = d[i] + 1\r\n\t\telse:\r\n\t\t\td[i] = 1\r\n\treturn d\r	\N	\N	0	1	2015-02-24 05:38:22	2015-02-24 05:38:22	27	wordcount.py	{"wordcount.py":"def word_count(string):\\r\\n\\td = dict()\\r\\n\\tarray = string.split()\\r\\n\\tfor i in array:\\r\\n\\t\\tif i in d.keys():\\r\\n\\t\\t\\td[i] = d[i] + 1\\r\\n\\t\\telse:\\r\\n\\t\\t\\td[i] = 1\\r\\n\\treturn d\\r"}
45	28	94c60c4a9118940e83f5486d	done	python	word-count	def word_count(string):\r\n\td = dict()\r\n\tarray = string.split()\r\n\t#for i in array:\r\n\tfor i in string.split():\r\n\t\tif i in d.keys():\r\n\t\t\td[i] = d[i] + 1\r\n\t\telse:\r\n\t\t\td[i] = 1\r\n\treturn d\r	2015-02-25 15:06:46	\N	0	2	2015-02-25 12:44:21	2015-02-25 12:44:21	27	wordcount.py	{"wordcount.py":"def word_count(string):\\r\\n\\td = dict()\\r\\n\\tarray = string.split()\\r\\n\\t#for i in array:\\r\\n\\tfor i in string.split():\\r\\n\\t\\tif i in d.keys():\\r\\n\\t\\t\\td[i] = d[i] + 1\\r\\n\\t\\telse:\\r\\n\\t\\t\\td[i] = 1\\r\\n\\treturn d\\r"}
46	28	997d3ff12aaf55671ddf7b6e	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	2015-02-24 22:10:33	2015-02-24 22:10:33	28	OctalSeq.hs	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
67	28	2efb36b4b07e2ab20d498017	superseded	javascript	bob	var isShouting = function(value) {\n  if (value === value.toUpperCase()) {\n    return 'Woah, chill out!';\n  }\n};\n\nvar isQuestion = function(value) {\n  if (value.slice(-1) === '?') {\n    return 'Sure.';\n  }\n};\n\nvar isSilent = function(value) {\n  if ((/^\\s*$/).test(value)) {\n    return 'Fine. Be that way!';\n  }\n};\n\nmodule.exports = function() {\n  return {\n    hey: function(input) {\n      return isSilent(input) || isShouting(input) || isQuestion(input) || "Whatever.";\n    }\n  };\n};	\N	\N	0	3	2015-03-19 16:41:03	2015-03-19 16:41:03	43	bob.js	{"bob.js":"var isShouting = function(value) {\\n  if (value === value.toUpperCase()) {\\n    return 'Woah, chill out!';\\n  }\\n};\\n\\nvar isQuestion = function(value) {\\n  if (value.slice(-1) === '?') {\\n    return 'Sure.';\\n  }\\n};\\n\\nvar isSilent = function(value) {\\n  if ((/^\\\\s*$/).test(value)) {\\n    return 'Fine. Be that way!';\\n  }\\n};\\n\\nmodule.exports = function() {\\n  return {\\n    hey: function(input) {\\n      return isSilent(input) || isShouting(input) || isQuestion(input) || \\"Whatever.\\";\\n    }\\n  };\\n};"}
251	35	30fc23d0774009a42a7f9d18	done	haskell	raindrops	module Raindrops (convert) where\n\nconvert :: Int -> String\nconvert n | null pl_ngs = show n\n          | otherwise   = concat pl_ngs\n  where pl_ngs = [sound | (factor, sound) <- rain, n `rem` factor == 0]\n        rain = [(3, "Pling"), (5, "Plang"), (7, "Plong")]	2015-06-22 09:17:22.146881	\N	0	4	2015-06-21 00:15:35	2015-06-21 00:15:35	160	Raindrops.hs	{"Raindrops.hs":"module Raindrops (convert) where\\n\\nconvert :: Int -\\u003e String\\nconvert n | null pl_ngs = show n\\n          | otherwise   = concat pl_ngs\\n  where pl_ngs = [sound | (factor, sound) \\u003c- rain, n `rem` factor == 0]\\n        rain = [(3, \\"Pling\\"), (5, \\"Plang\\"), (7, \\"Plong\\")]"}
47	28	8ae730c28a220c98202551a5	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	2015-05-12 01:00:24	\N	0	2	2015-05-10 10:51:19	2015-05-10 10:51:19	28	Octal.hs	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
48	28	d45ee1d9076acfa6b97c3185	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	2015-03-14 07:02:17	2015-03-14 07:02:17	29	garden.py	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
49	28	7505fe5020867c1efcc7ae21	done	ruby	raindrops	class Raindrops\n\n\tdef self.convert n\n\t\toutput = ""\n\n\t\toutput << "Pling" if n % 3 == 0\n\t\toutput << "Plang" if n % 5 == 0\n\t\toutput << "Plong" if n % 7 == 0\n\n\t\toutput.empty? ? n.to_s : output\n\tend\n\nend	2015-02-12 15:08:01	\N	0	2	2015-02-01 23:35:28	2015-02-01 23:35:28	30	raindrops2.rb	{"raindrops2.rb":"class Raindrops\\n\\n\\tdef self.convert n\\n\\t\\toutput = \\"\\"\\n\\n\\t\\toutput \\u003c\\u003c \\"Pling\\" if n % 3 == 0\\n\\t\\toutput \\u003c\\u003c \\"Plang\\" if n % 5 == 0\\n\\t\\toutput \\u003c\\u003c \\"Plong\\" if n % 7 == 0\\n\\n\\t\\toutput.empty? ? n.to_s : output\\n\\tend\\n\\nend"}
50	28	636a984d14edc9fbeff938d2	superseded	ruby	raindrops	# the cheap, un-Ruby version\n\nrequire 'prime'\n\nclass Raindrops\n\n\tdef self.convert n\n\n\t\tfactorized = Prime.prime_division(n).flatten.delete_if { |n| n == 1 }\n\n\t\tif (factorized & [3,5,7]).empty?\n\t\t\tn.to_s\n\t\telse\n\t\t\t(factorized & [3,5,7]).sort.join.sub('3','Pling').sub('5','Plang').sub('7','Plong')\n\t\tend\n\n\tend\n\nend	\N	\N	0	1	2015-02-23 14:39:05	2015-02-23 14:39:05	30	raindrops.rb	{"raindrops.rb":"# the cheap, un-Ruby version\\n\\nrequire 'prime'\\n\\nclass Raindrops\\n\\n\\tdef self.convert n\\n\\n\\t\\tfactorized = Prime.prime_division(n).flatten.delete_if { |n| n == 1 }\\n\\n\\t\\tif (factorized \\u0026 [3,5,7]).empty?\\n\\t\\t\\tn.to_s\\n\\t\\telse\\n\\t\\t\\t(factorized \\u0026 [3,5,7]).sort.join.sub('3','Pling').sub('5','Plang').sub('7','Plong')\\n\\t\\tend\\n\\n\\tend\\n\\nend"}
51	28	e2044054680e33c8d4bada2c	pending	ruby	binary	class Binary\n\tattr_reader:to_decimal\n\tdef initialize(bin)\n\t\t@to_decimal = 0\n\t\tbin.split('').reverse.each_with_index do |b,i|\n\t\t\tbreak if !b.match(/[01]/)\n\t\t\t@to_decimal += b.to_i * 2**i\n\t\tend\n\tend\nend	\N	\N	0	2	2015-02-13 09:14:07	2015-02-13 09:14:07	31	/ruby/binary/binary.rb	{"/ruby/binary/binary.rb":"class Binary\\n\\tattr_reader:to_decimal\\n\\tdef initialize(bin)\\n\\t\\t@to_decimal = 0\\n\\t\\tbin.split('').reverse.each_with_index do |b,i|\\n\\t\\t\\tbreak if !b.match(/[01]/)\\n\\t\\t\\t@to_decimal += b.to_i * 2**i\\n\\t\\tend\\n\\tend\\nend"}
52	28	aacdab5cc0f08c24acd22b3e	superseded	ruby	binary	class Binary\n\tdef initialize(bin)\n\t\t@bin = bin\n\tend\n\n\tdef to_decimal\n\t\tpower = -1\n\t\tdec = 0\n\t\t@bin.split('').reverse.each do |b|\n\t\t\tbreak if !b.match(/[01]/)\n\t\t\tpower += 1\n\t\t\tdec += Integer(b) * 2**power\n\t\tend\n\t\tdec\n\tend\nend	\N	\N	0	1	2015-02-16 02:03:24	2015-02-16 02:03:24	31	/ruby/binary/binary.rb	{"/ruby/binary/binary.rb":"class Binary\\n\\tdef initialize(bin)\\n\\t\\t@bin = bin\\n\\tend\\n\\n\\tdef to_decimal\\n\\t\\tpower = -1\\n\\t\\tdec = 0\\n\\t\\t@bin.split('').reverse.each do |b|\\n\\t\\t\\tbreak if !b.match(/[01]/)\\n\\t\\t\\tpower += 1\\n\\t\\t\\tdec += Integer(b) * 2**power\\n\\t\\tend\\n\\t\\tdec\\n\\tend\\nend"}
58	28	4eb2805ba7669e3cf5103438	done	ruby	phone-number	class PhoneNumber\n\n  DEFAULT_NUMBER = "0000000000"\n\n  def initialize(raw_number)\n    @number = sanitize_number raw_number\n  end\n\n  def number\n    @number\n  end\n\n  def area_code\n    @number.slice(0, 3)\n  end\n\n  def to_s\n    "(%3d) %3d-%4d" % [self.area_code, @number.slice(3,3), @number.slice(6,4)]\n  end\n\n  private\n  def sanitize_number number\n    return DEFAULT_NUMBER if number =~ /[^ \\.\\d\\(\\)\\-]/\n\n    number.gsub!(/\\D/, "")\n    return DEFAULT_NUMBER if number.length < 10 || number.length > 11\n\n    if number.length == 11\n      if number.start_with? "1"\n        number[0] = ""\n      else\n        return DEFAULT_NUMBER\n      end\n    end\n\n    return number\n  end\n\nend	2015-03-20 18:42:25	\N	0	1	2015-03-18 04:17:01	2015-03-18 04:17:01	36	/ruby/phone-number/phone_number.rb	{"/ruby/phone-number/phone_number.rb":"class PhoneNumber\\n\\n  DEFAULT_NUMBER = \\"0000000000\\"\\n\\n  def initialize(raw_number)\\n    @number = sanitize_number raw_number\\n  end\\n\\n  def number\\n    @number\\n  end\\n\\n  def area_code\\n    @number.slice(0, 3)\\n  end\\n\\n  def to_s\\n    \\"(%3d) %3d-%4d\\" % [self.area_code, @number.slice(3,3), @number.slice(6,4)]\\n  end\\n\\n  private\\n  def sanitize_number number\\n    return DEFAULT_NUMBER if number =~ /[^ \\\\.\\\\d\\\\(\\\\)\\\\-]/\\n\\n    number.gsub!(/\\\\D/, \\"\\")\\n    return DEFAULT_NUMBER if number.length \\u003c 10 || number.length \\u003e 11\\n\\n    if number.length == 11\\n      if number.start_with? \\"1\\"\\n        number[0] = \\"\\"\\n      else\\n        return DEFAULT_NUMBER\\n      end\\n    end\\n\\n    return number\\n  end\\n\\nend"}
53	28	40e259b16f939cf94296acc9	superseded	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x <= max; x++) {\n      for (var y = min; y <= max; y++) {\n        for (var z = min; z <= max; z++) {\n          var t = new Triplet(x, y, z);\n          if (t.isPythagorean() && !(this.inCollection(triplets, t))) {\n            triplets.push(t);\n          }\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  }\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	1	2015-02-28 16:01:17	2015-02-28 16:01:17	32	triplet.js	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c= max; x++) {\\n      for (var y = min; y \\u003c= max; y++) {\\n        for (var z = min; z \\u003c= max; z++) {\\n          var t = new Triplet(x, y, z);\\n          if (t.isPythagorean() \\u0026\\u0026 !(this.inCollection(triplets, t))) {\\n            triplets.push(t);\\n          }\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
54	28	7037a5b7ec2078b310fa6f98	done	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    var intTest = /^-?(\\d+|0)$/;\n    if (!intTest.test(this.angles[2])) { return false; }\n\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x < max; x++) {\n      for (var y = min; y < max; y++) {\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n        var t = new Triplet(x, y, z);\n        if (t.isPythagorean() && !Triplet.inCollection(triplets, t)) {\n          triplets.push(t);\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  };\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	2015-04-15 23:03:43	\N	0	2	2015-04-05 19:37:55	2015-04-05 19:37:55	32	triplet.js	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    var intTest = /^-?(\\\\d+|0)$/;\\n    if (!intTest.test(this.angles[2])) { return false; }\\n\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c max; x++) {\\n      for (var y = min; y \\u003c max; y++) {\\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\\n        var t = new Triplet(x, y, z);\\n        if (t.isPythagorean() \\u0026\\u0026 !Triplet.inCollection(triplets, t)) {\\n          triplets.push(t);\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  };\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
55	28	ce771f0b342673bb18a3dfb7	done	javascript	rna-transcription	var toRNA = function(dna){\n  var DNAToRNA = {G: 'C', C: 'G', T: 'A', A: 'U'};\n  var RNA = "";\n  for (var i = 0; i < dna.length; i++){\n    RNA += DNAToRNA[dna[i]]\n  }\n  return RNA;\n}\n\nmodule.exports = toRNA;	2015-06-19 09:38:28	\N	0	1	2015-06-14 09:41:23	2015-06-14 09:41:23	33	rna-transcription.js	{"rna-transcription.js":"var toRNA = function(dna){\\n  var DNAToRNA = {G: 'C', C: 'G', T: 'A', A: 'U'};\\n  var RNA = \\"\\";\\n  for (var i = 0; i \\u003c dna.length; i++){\\n    RNA += DNAToRNA[dna[i]]\\n  }\\n  return RNA;\\n}\\n\\nmodule.exports = toRNA;"}
56	28	0beea93585ae40acb3295fe7	done	clojure	etl	(ns etl\n  (:require [clojure.string :as str]))\n\n\n(defn transform\n  [data]\n  (reduce-kv\n   (fn [acc k vals]\n     (loop [[fst & rst] vals\n            ret acc]\n       (if-not fst\n         ret\n         (recur rst (assoc ret (str/lower-case fst) k)))))\n   {}\n   data))	2015-04-30 16:06:20	\N	0	1	2015-04-19 18:10:28	2015-04-19 18:10:28	34	etl.clj	{"etl.clj":"(ns etl\\n  (:require [clojure.string :as str]))\\n\\n\\n(defn transform\\n  [data]\\n  (reduce-kv\\n   (fn [acc k vals]\\n     (loop [[fst \\u0026 rst] vals\\n            ret acc]\\n       (if-not fst\\n         ret\\n         (recur rst (assoc ret (str/lower-case fst) k)))))\\n   {}\\n   data))"}
57	28	d269b21b6929bba38b6e2aab	done	python	accumulate	def accumulate(inp, fn):\n    return [fn(a) for a in inp]	2015-02-20 08:39:59	\N	0	1	2015-02-14 08:17:55	2015-02-14 08:17:55	35	accumulate.py	{"accumulate.py":"def accumulate(inp, fn):\\n    return [fn(a) for a in inp]"}
59	28	87b19251f44297c43e5158d2	done	python	difference-of-squares	def difference(n):\n    return square_of_sum(n) - sum_of_squares(n)\n\ndef square_of_sum(n):\n    return (n * (n + 1) / 2) ** 2\n\ndef sum_of_squares(n):\n    return n * (n + 1) * (2 * n + 1) / 6	2015-05-14 08:34:08	\N	0	1	2015-05-13 01:35:01	2015-05-13 01:35:01	37	/python/difference-of-squares/difference_of_squares.py	{"/python/difference-of-squares/difference_of_squares.py":"def difference(n):\\n    return square_of_sum(n) - sum_of_squares(n)\\n\\ndef square_of_sum(n):\\n    return (n * (n + 1) / 2) ** 2\\n\\ndef sum_of_squares(n):\\n    return n * (n + 1) * (2 * n + 1) / 6"}
72	28	e66d7740bdc16d4ad67e6c18	done	perl5	pascals-triangle	package Triangle;\nuse Modern::Perl;\nuse List::AllUtils 'pairwise';\n\nsub triangle { \n    my @prev_line = 1;\n    [ @prev_line, map {\n        my @new_line = (0, @prev_line);\n        join ' ', @prev_line =\n        pairwise {($a//0) + $b}\n        @prev_line, \n        @new_line;\n    } 1..shift ]\n}\n\nsub row{ &triangle->[-1] }\n\nsub is_triangle{ \n    my $rows = shift;\n    $rows ~~ triangle @$rows -1;\n}\n\n1;	2015-03-30 17:31:59	\N	0	1	2015-03-29 03:23:00	2015-03-29 03:23:00	44	Triangle.pm	{"Triangle.pm":"package Triangle;\\nuse Modern::Perl;\\nuse List::AllUtils 'pairwise';\\n\\nsub triangle { \\n    my @prev_line = 1;\\n    [ @prev_line, map {\\n        my @new_line = (0, @prev_line);\\n        join ' ', @prev_line =\\n        pairwise {($a//0) + $b}\\n        @prev_line, \\n        @new_line;\\n    } 1..shift ]\\n}\\n\\nsub row{ \\u0026triangle-\\u003e[-1] }\\n\\nsub is_triangle{ \\n    my $rows = shift;\\n    $rows ~~ triangle @$rows -1;\\n}\\n\\n1;"}
60	28	cc7d77c44427faa95e273a85	pending	erlang	strain	-module(strain).\n-export([keep/2, discard/2]).\n\nkeep(Predicate, Collection) when is_function(Predicate) ->\n    keep(Predicate, Collection, []).\n\ndiscard(Predicate, Collection) when is_function(Predicate) ->\n    discard(Predicate, Collection, []).\n\nkeep(_Predicate, [], Acc) -> lists:reverse(Acc);\nkeep(Predicate, [H|T], Acc) ->\n    case Predicate(H) of\n        true -> keep(Predicate, T, [H|Acc]);\n        false -> keep(Predicate, T, Acc)\n    end.\n\ndiscard(_Predicate, [], Acc) -> lists:reverse(Acc);\ndiscard(Predicate, [H|T], Acc) ->\n    case Predicate(H) of\n        true -> discard(Predicate, T, Acc);\n        false -> discard(Predicate, T, [H|Acc])\n    end.	\N	\N	0	1	2015-01-28 22:33:02	2015-01-28 22:33:02	38	strain.erl	{"strain.erl":"-module(strain).\\n-export([keep/2, discard/2]).\\n\\nkeep(Predicate, Collection) when is_function(Predicate) -\\u003e\\n    keep(Predicate, Collection, []).\\n\\ndiscard(Predicate, Collection) when is_function(Predicate) -\\u003e\\n    discard(Predicate, Collection, []).\\n\\nkeep(_Predicate, [], Acc) -\\u003e lists:reverse(Acc);\\nkeep(Predicate, [H|T], Acc) -\\u003e\\n    case Predicate(H) of\\n        true -\\u003e keep(Predicate, T, [H|Acc]);\\n        false -\\u003e keep(Predicate, T, Acc)\\n    end.\\n\\ndiscard(_Predicate, [], Acc) -\\u003e lists:reverse(Acc);\\ndiscard(Predicate, [H|T], Acc) -\\u003e\\n    case Predicate(H) of\\n        true -\\u003e discard(Predicate, T, Acc);\\n        false -\\u003e discard(Predicate, T, [H|Acc])\\n    end."}
61	28	10a78f184a508d7beac6f6ec	superseded	ruby	roman-numerals	require "debugger"\nclass Integer\n\tdef to_roman\n\t\ttrans = {1 => "I", 5 => "V", 10 => "X", 50 => "L", 100 => "C", 500 => "D", 1000 => "M" }\n\t\tg_output = ""\n\n\t\t# Split digits and iterate starting from the decimal part (last digit)\n\t\tself.to_s.split("").reverse.each_with_index do |el, index|\n\t\t\tel = el.to_i\n\t\t\trange = 10 ** index\n\t\t\toutput = ""\n\t\t\tif el < 4\n\t\t\t\tel.times {output += trans[range]}\n\t\t\telsif el < 6\n\t\t\t\t(5 - el).times {output += trans[range]}\n\t\t\t\toutput += trans[5*range]\n\t\t\telsif el < 9\n\t\t\t\toutput = trans[5*range]\n\t\t\t\t(el - 5).times {output += trans[range]}\n\t\t\telse\n\t\t\t\t(10 - el).times {output += trans[range]}\n\t\t\t\toutput += trans[10*range]\n\t\t\tend\n\t\t\tg_output = output + g_output\n\t\tend\n\t\tg_output\n\tend\n\n\n\nend	\N	\N	0	1	2015-02-06 08:22:30	2015-02-06 08:22:30	39	roman.rb	{"roman.rb":"require \\"debugger\\"\\nclass Integer\\n\\tdef to_roman\\n\\t\\ttrans = {1 =\\u003e \\"I\\", 5 =\\u003e \\"V\\", 10 =\\u003e \\"X\\", 50 =\\u003e \\"L\\", 100 =\\u003e \\"C\\", 500 =\\u003e \\"D\\", 1000 =\\u003e \\"M\\" }\\n\\t\\tg_output = \\"\\"\\n\\n\\t\\t# Split digits and iterate starting from the decimal part (last digit)\\n\\t\\tself.to_s.split(\\"\\").reverse.each_with_index do |el, index|\\n\\t\\t\\tel = el.to_i\\n\\t\\t\\trange = 10 ** index\\n\\t\\t\\toutput = \\"\\"\\n\\t\\t\\tif el \\u003c 4\\n\\t\\t\\t\\tel.times {output += trans[range]}\\n\\t\\t\\telsif el \\u003c 6\\n\\t\\t\\t\\t(5 - el).times {output += trans[range]}\\n\\t\\t\\t\\toutput += trans[5*range]\\n\\t\\t\\telsif el \\u003c 9\\n\\t\\t\\t\\toutput = trans[5*range]\\n\\t\\t\\t\\t(el - 5).times {output += trans[range]}\\n\\t\\t\\telse\\n\\t\\t\\t\\t(10 - el).times {output += trans[range]}\\n\\t\\t\\t\\toutput += trans[10*range]\\n\\t\\t\\tend\\n\\t\\t\\tg_output = output + g_output\\n\\t\\tend\\n\\t\\tg_output\\n\\tend\\n\\n\\n\\nend"}
62	28	62d3ec5e94a91d661619802f	pending	ruby	roman-numerals	require "debugger"\nclass Integer\n\tdef to_roman\n\t\ttrans = {1 => "I", 5 => "V", 10 => "X", 50 => "L", 100 => "C", 500 => "D", 1000 => "M" }\n\t\tg_output = ""\n\n\t\tdigits.each_with_index do |el, index|\n\t\t\tel = el.to_i\n\t\t\trange = 10 ** index\n\t\t\toutput = ""\n\t\t\tif el < 4\n\t\t\t\tel.times {output += trans[range]}\n\t\t\telsif el < 6\n\t\t\t\t(5 - el).times {output += trans[range]}\n\t\t\t\toutput += trans[5*range]\n\t\t\telsif el < 9\n\t\t\t\toutput = trans[5*range]\n\t\t\t\t(el - 5).times {output += trans[range]}\n\t\t\telse\n\t\t\t\t(10 - el).times {output += trans[range]}\n\t\t\t\toutput += trans[10*range]\n\t\t\tend\n\t\t\tg_output = output + g_output\n\t\tend\n\t\tg_output\n\tend\n\n\tdef digits\n\t\tself.to_s.split("").reverse\n\tend\n\nend	\N	\N	0	2	2015-03-08 16:45:36	2015-03-08 16:45:36	39	roman.rb	{"roman.rb":"require \\"debugger\\"\\nclass Integer\\n\\tdef to_roman\\n\\t\\ttrans = {1 =\\u003e \\"I\\", 5 =\\u003e \\"V\\", 10 =\\u003e \\"X\\", 50 =\\u003e \\"L\\", 100 =\\u003e \\"C\\", 500 =\\u003e \\"D\\", 1000 =\\u003e \\"M\\" }\\n\\t\\tg_output = \\"\\"\\n\\n\\t\\tdigits.each_with_index do |el, index|\\n\\t\\t\\tel = el.to_i\\n\\t\\t\\trange = 10 ** index\\n\\t\\t\\toutput = \\"\\"\\n\\t\\t\\tif el \\u003c 4\\n\\t\\t\\t\\tel.times {output += trans[range]}\\n\\t\\t\\telsif el \\u003c 6\\n\\t\\t\\t\\t(5 - el).times {output += trans[range]}\\n\\t\\t\\t\\toutput += trans[5*range]\\n\\t\\t\\telsif el \\u003c 9\\n\\t\\t\\t\\toutput = trans[5*range]\\n\\t\\t\\t\\t(el - 5).times {output += trans[range]}\\n\\t\\t\\telse\\n\\t\\t\\t\\t(10 - el).times {output += trans[range]}\\n\\t\\t\\t\\toutput += trans[10*range]\\n\\t\\t\\tend\\n\\t\\t\\tg_output = output + g_output\\n\\t\\tend\\n\\t\\tg_output\\n\\tend\\n\\n\\tdef digits\\n\\t\\tself.to_s.split(\\"\\").reverse\\n\\tend\\n\\nend"}
63	28	e8a89ae5634de201b53e7c8b	done	clojure	binary	(ns binary\n     (:import java.lang.Math ))\n\n (defn to-decimal-seq [binaryStr]\n       (let [tidyStr (clojure.string/replace binaryStr #"[^0-9]" "0")  ;Treat invalid input as binary 0\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\n            (for [[x v] idx-map]\n                 (do\n                  ;(println (format " (2 ^ %1s) * %2s" x v ))\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\n\n\n (defn to-decimal [binaryStr]\n       (let [col (to-decimal-seq binaryStr)]\n            (int (apply + col))))	2015-04-13 09:08:02	\N	0	1	2015-04-02 18:07:09	2015-04-02 18:07:09	40	/clojure/binary/binary.clj	{"/clojure/binary/binary.clj":"(ns binary\\n     (:import java.lang.Math ))\\n\\n (defn to-decimal-seq [binaryStr]\\n       (let [tidyStr (clojure.string/replace binaryStr #\\"[^0-9]\\" \\"0\\")  ;Treat invalid input as binary 0\\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\\n            (for [[x v] idx-map]\\n                 (do\\n                  ;(println (format \\" (2 ^ %1s) * %2s\\" x v ))\\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\\n\\n\\n (defn to-decimal [binaryStr]\\n       (let [col (to-decimal-seq binaryStr)]\\n            (int (apply + col))))"}
64	28	4405380b12ee8ae851debf5f	superseded	ruby	leap	class Year\n  def self.leap?(y)\n    y % 4 == 0 && !(y % 100 == 0) || y % 400 == 0\n  end\nend	\N	\N	0	1	2015-02-27 06:39:34	2015-02-27 06:39:34	41	year.rb	{"year.rb":"class Year\\n  def self.leap?(y)\\n    y % 4 == 0 \\u0026\\u0026 !(y % 100 == 0) || y % 400 == 0\\n  end\\nend"}
65	28	0adc341c603829736d4a5b03	done	ruby	leap	class Fixnum\n  def divisble_by?(num)\n    self % num == 0\n  end\nend\n\nmodule Year\n  def self.leap?(year)\n    year.divisble_by?(4) && !year.divisble_by?(100) || year.divisble_by?(400)\n  end\nend	2015-04-05 00:44:02	\N	0	2	2015-03-29 20:30:53	2015-03-29 20:30:53	41	year.rb	{"year.rb":"class Fixnum\\n  def divisble_by?(num)\\n    self % num == 0\\n  end\\nend\\n\\nmodule Year\\n  def self.leap?(year)\\n    year.divisble_by?(4) \\u0026\\u0026 !year.divisble_by?(100) || year.divisble_by?(400)\\n  end\\nend"}
68	28	6c89c8bab031659098dfadbd	superseded	javascript	bob	var isUpperCase = function(value) {\n  if (value === value.toUpperCase()) {\n    return 'Woah, chill out!';\n  }\n};\n\nvar isQuestion = function(value) {\n  if (value.slice(-1) === '?') {\n    return 'Sure.';\n  }\n};\n\nvar isSilent = function(value) {\n  if ((/^\\s*$/).test(value)) {\n    return 'Fine. Be that way!';\n  }\n};\n\nvar isDefault = function() {\n  return 'Whatever.';\n}\n\nvar matchers = [isSilent, isUpperCase, isQuestion, isDefault];\n\nmodule.exports = function() {\n  return {\n    hey: function(input) {\n      for (var index in matchers) {\n        var fn = matchers[index];\n        if (fn(input)) {\n          return fn(input);\n        }\n      }\n    }\n  };\n};	\N	\N	0	1	2015-04-07 08:25:42	2015-04-07 08:25:42	43	bob.js	{"bob.js":"var isUpperCase = function(value) {\\n  if (value === value.toUpperCase()) {\\n    return 'Woah, chill out!';\\n  }\\n};\\n\\nvar isQuestion = function(value) {\\n  if (value.slice(-1) === '?') {\\n    return 'Sure.';\\n  }\\n};\\n\\nvar isSilent = function(value) {\\n  if ((/^\\\\s*$/).test(value)) {\\n    return 'Fine. Be that way!';\\n  }\\n};\\n\\nvar isDefault = function() {\\n  return 'Whatever.';\\n}\\n\\nvar matchers = [isSilent, isUpperCase, isQuestion, isDefault];\\n\\nmodule.exports = function() {\\n  return {\\n    hey: function(input) {\\n      for (var index in matchers) {\\n        var fn = matchers[index];\\n        if (fn(input)) {\\n          return fn(input);\\n        }\\n      }\\n    }\\n  };\\n};"}
69	28	4498911dd469070516da8d91	superseded	javascript	bob	var shouting = function(value) {\n  if (value === value.toUpperCase()) {\n    return 'Woah, chill out!';\n  }\n};\n\nvar question = function(value) {\n  if (value.slice(-1) === '?') {\n    return 'Sure.';\n  }\n};\n\nvar silent = function(value) {\n  if (value.trim() === '') {\n    return 'Fine. Be that way!';\n  }\n};\n\nmodule.exports = function() {\n  return {\n    hey: function(input) {\n      return silent(input) || shouting(input) || question(input) || "Whatever.";\n    }\n  };\n};	\N	\N	0	4	2015-04-26 02:06:52	2015-04-26 02:06:52	43	bob.js	{"bob.js":"var shouting = function(value) {\\n  if (value === value.toUpperCase()) {\\n    return 'Woah, chill out!';\\n  }\\n};\\n\\nvar question = function(value) {\\n  if (value.slice(-1) === '?') {\\n    return 'Sure.';\\n  }\\n};\\n\\nvar silent = function(value) {\\n  if (value.trim() === '') {\\n    return 'Fine. Be that way!';\\n  }\\n};\\n\\nmodule.exports = function() {\\n  return {\\n    hey: function(input) {\\n      return silent(input) || shouting(input) || question(input) || \\"Whatever.\\";\\n    }\\n  };\\n};"}
70	28	fdf410ff2f29098b41fbc215	superseded	javascript	bob	var isUpperCase = function(value) {\n  if (value === value.toUpperCase()) {\n    return 'Woah, chill out!';\n  }\n};\n\nvar isQuestion = function(value) {\n  if (value.slice(-1) === '?') {\n    return 'Sure.';\n  }\n};\n\nvar isSilent = function(value) {\n  if ((/^\\s*$/).test(value)) {\n    return 'Fine. Be that way!';\n  }\n};\n\nvar isDefault = function() {\n  return 'Whatever.';\n}\n\nvar matchers = [isSilent, isUpperCase, isQuestion, isDefault];\n\nmodule.exports = function() {\n  return {\n    hey: function(input) {\n      for (var index in matchers) {\n        return isSilent(input) || isUpperCase(input) || isQuestion(input) || "Whatever.";\n      }\n    }\n  };\n};	\N	\N	0	2	2015-04-28 12:04:38	2015-04-28 12:04:38	43	bob.js	{"bob.js":"var isUpperCase = function(value) {\\n  if (value === value.toUpperCase()) {\\n    return 'Woah, chill out!';\\n  }\\n};\\n\\nvar isQuestion = function(value) {\\n  if (value.slice(-1) === '?') {\\n    return 'Sure.';\\n  }\\n};\\n\\nvar isSilent = function(value) {\\n  if ((/^\\\\s*$/).test(value)) {\\n    return 'Fine. Be that way!';\\n  }\\n};\\n\\nvar isDefault = function() {\\n  return 'Whatever.';\\n}\\n\\nvar matchers = [isSilent, isUpperCase, isQuestion, isDefault];\\n\\nmodule.exports = function() {\\n  return {\\n    hey: function(input) {\\n      for (var index in matchers) {\\n        return isSilent(input) || isUpperCase(input) || isQuestion(input) || \\"Whatever.\\";\\n      }\\n    }\\n  };\\n};"}
71	28	f8258615261596994987cd2d	done	javascript	bob	var fine = function(value) {\n  if (value.trim() === '') {\n    return 'Fine. Be that way!';\n  }\n};\n\nvar sure = function(value) {\n  if (value.slice(-1) === '?') {\n    return 'Sure.';\n  }\n};\n\nvar woah = function(value) {\n  if (value === value.toUpperCase()) {\n    return 'Woah, chill out!';\n  }\n};\n\nmodule.exports = function() {\n  return {\n    hey: function(input) {\n      return fine(input) || woah(input) || sure(input) || "Whatever.";\n    }\n  };\n};	2015-06-01 18:42:56	\N	0	5	2015-05-26 04:19:11	2015-05-26 04:19:11	43	bob.js	{"bob.js":"var fine = function(value) {\\n  if (value.trim() === '') {\\n    return 'Fine. Be that way!';\\n  }\\n};\\n\\nvar sure = function(value) {\\n  if (value.slice(-1) === '?') {\\n    return 'Sure.';\\n  }\\n};\\n\\nvar woah = function(value) {\\n  if (value === value.toUpperCase()) {\\n    return 'Woah, chill out!';\\n  }\\n};\\n\\nmodule.exports = function() {\\n  return {\\n    hey: function(input) {\\n      return fine(input) || woah(input) || sure(input) || \\"Whatever.\\";\\n    }\\n  };\\n};"}
123	46	a1f295a1bf2df2f797592059	done	ruby	accumulate	class Array\n  def accumulate\n    new_array = []\n    each do |x|\n      new_array << (yield x)\n    end\n    new_array\n  end\nend	2014-10-24 15:07:56	\N	0	1	2014-10-17 04:13:27	2014-10-17 04:13:27	81	array.rb	{"array.rb":"class Array\\n  def accumulate\\n    new_array = []\\n    each do |x|\\n      new_array \\u003c\\u003c (yield x)\\n    end\\n    new_array\\n  end\\nend"}
124	46	b91e3e76f8641e314e287474	superseded	csharp	scrabble-score	﻿using System;\r\nusing System.Collections.Generic;\r\nclass Scrabble\r\n{\r\n    private string word;\r\n\tprivate static readonly Dictionary<char, int> scrabbleDictionary = \r\n        new Dictionary<char, int>()\r\n\t{\r\n\t    {'a', 1}, {'e', 1}, {'i', 1}, {'o', 1}, {'u', 1}, \r\n        {'l', 1}, {'n', 1}, {'r', 1}, {'s', 1}, {'t', 1},\r\n        {'d', 2}, {'g', 2},\r\n        {'b', 3}, {'c', 3}, {'m', 3}, {'p', 3},\r\n        {'f', 4}, {'h', 4}, {'v', 4}, {'w', 4}, {'y', 4},\r\n        {'k', 5},\r\n        {'j', 8}, {'x', 8},\r\n\t    {'q', 10}, {'z', 10}\r\n\t};\r\n    public Scrabble(string givenWord)\r\n    {\r\n        word = givenWord;\r\n    }\r\n    public int Score()\r\n    {\r\n        return Score(word);\r\n    }\r\n    public static int Score(string givenWord)\r\n    {\r\n        if (String.IsNullOrWhiteSpace(givenWord))\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            int totalPoints = 0;\r\n            foreach (char character in givenWord.Trim().ToLowerInvariant())\r\n            {\r\n                totalPoints += scrabbleDictionary[character];\r\n            }\r\n            return totalPoints;\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-11-18 05:52:50	2014-11-18 05:52:50	82	Scrabble.cs	{"Scrabble.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nclass Scrabble\\r\\n{\\r\\n    private string word;\\r\\n\\tprivate static readonly Dictionary\\u003cchar, int\\u003e scrabbleDictionary = \\r\\n        new Dictionary\\u003cchar, int\\u003e()\\r\\n\\t{\\r\\n\\t    {'a', 1}, {'e', 1}, {'i', 1}, {'o', 1}, {'u', 1}, \\r\\n        {'l', 1}, {'n', 1}, {'r', 1}, {'s', 1}, {'t', 1},\\r\\n        {'d', 2}, {'g', 2},\\r\\n        {'b', 3}, {'c', 3}, {'m', 3}, {'p', 3},\\r\\n        {'f', 4}, {'h', 4}, {'v', 4}, {'w', 4}, {'y', 4},\\r\\n        {'k', 5},\\r\\n        {'j', 8}, {'x', 8},\\r\\n\\t    {'q', 10}, {'z', 10}\\r\\n\\t};\\r\\n    public Scrabble(string givenWord)\\r\\n    {\\r\\n        word = givenWord;\\r\\n    }\\r\\n    public int Score()\\r\\n    {\\r\\n        return Score(word);\\r\\n    }\\r\\n    public static int Score(string givenWord)\\r\\n    {\\r\\n        if (String.IsNullOrWhiteSpace(givenWord))\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            int totalPoints = 0;\\r\\n            foreach (char character in givenWord.Trim().ToLowerInvariant())\\r\\n            {\\r\\n                totalPoints += scrabbleDictionary[character];\\r\\n            }\\r\\n            return totalPoints;\\r\\n        }\\r\\n    }\\r\\n}\\r"}
73	28	c85c8a1bba68841a6dab820c	done	go	bob	package bob\n\nimport (\n\t"strings"\n)\n\nfunc Hey(phrase string) string {\n\tif isSilence(phrase) {\n\t\treturn "Fine. Be that way!"\n\t}\n\tif isYelling(phrase) {\n\t\treturn "Woah, chill out!"\n\t}\n\tif isQuestion(phrase) {\n\t\treturn "Sure."\n\t}\n\treturn "Whatever."\n}\n\nfunc isQuestion(phrase string) bool {\n\treturn phrase[len(phrase)-1] == '?'\n}\n\nfunc isSilence(phrase string) bool {\n\treturn strings.TrimSpace(phrase) == ""\n}\n\nfunc isYelling(phrase string) bool {\n\treturn strings.ToUpper(phrase) == phrase && strings.ToLower(phrase) != phrase\n}	2015-03-02 08:59:35	\N	0	1	2015-02-26 10:55:24	2015-02-26 10:55:24	45	bob.go	{"bob.go":"package bob\\n\\nimport (\\n\\t\\"strings\\"\\n)\\n\\nfunc Hey(phrase string) string {\\n\\tif isSilence(phrase) {\\n\\t\\treturn \\"Fine. Be that way!\\"\\n\\t}\\n\\tif isYelling(phrase) {\\n\\t\\treturn \\"Woah, chill out!\\"\\n\\t}\\n\\tif isQuestion(phrase) {\\n\\t\\treturn \\"Sure.\\"\\n\\t}\\n\\treturn \\"Whatever.\\"\\n}\\n\\nfunc isQuestion(phrase string) bool {\\n\\treturn phrase[len(phrase)-1] == '?'\\n}\\n\\nfunc isSilence(phrase string) bool {\\n\\treturn strings.TrimSpace(phrase) == \\"\\"\\n}\\n\\nfunc isYelling(phrase string) bool {\\n\\treturn strings.ToUpper(phrase) == phrase \\u0026\\u0026 strings.ToLower(phrase) != phrase\\n}"}
74	28	395c7de980d81825a32e31fb	done	coffeescript	binary	class Binary\n  constructor: (@stringValue)->\n  isValid: ->\n    @stringValue.match /[01]+/\n  toDecimal: ->\n    return 0 unless @isValid()\n    @stringValue.split('').reverse().reduce (sum, char, index)->\n      sum + parseInt(char) * Math.pow(2, index)\n    , 0\n\nmodule.exports = Binary	2015-05-17 22:33:16	\N	0	1	2015-05-17 14:46:45	2015-05-17 14:46:45	46	binary.coffee	{"binary.coffee":"class Binary\\n  constructor: (@stringValue)-\\u003e\\n  isValid: -\\u003e\\n    @stringValue.match /[01]+/\\n  toDecimal: -\\u003e\\n    return 0 unless @isValid()\\n    @stringValue.split('').reverse().reduce (sum, char, index)-\\u003e\\n      sum + parseInt(char) * Math.pow(2, index)\\n    , 0\\n\\nmodule.exports = Binary"}
75	28	eadaa43b8d5213e0a6ffe38c	done	javascript	robot-name	var createName = function createName() {\n  var name = '';\n  var alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n  for(var i=0; i<5; i++) {\n    var random = Math.random();\n    if(i < 2) {\n      name += alphabet[Math.floor(random * 26)];\n    } else {\n      name += Math.floor(random * 10);\n    }\n  }\n  return name;\n}\n\nvar Robot = function Robot() {\n  var name = createName();\n  var reset = function reset() {\n    this.name = createName();\n  }\n  return {\n    name: name,\n    reset: reset\n  }\n}\n\nmodule.exports = Robot;	2015-05-21 17:32:20	\N	0	1	2015-05-15 13:52:48	2015-05-15 13:52:48	47	robot-name.js	{"robot-name.js":"var createName = function createName() {\\n  var name = '';\\n  var alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\\n  for(var i=0; i\\u003c5; i++) {\\n    var random = Math.random();\\n    if(i \\u003c 2) {\\n      name += alphabet[Math.floor(random * 26)];\\n    } else {\\n      name += Math.floor(random * 10);\\n    }\\n  }\\n  return name;\\n}\\n\\nvar Robot = function Robot() {\\n  var name = createName();\\n  var reset = function reset() {\\n    this.name = createName();\\n  }\\n  return {\\n    name: name,\\n    reset: reset\\n  }\\n}\\n\\nmodule.exports = Robot;"}
76	28	196e90623da201c5a829f093	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	2015-03-24 13:01:37	2015-03-24 13:01:37	48	hamming.lua	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
77	29	a09e1498c2df57a926e95578	done	ruby	hamming	class DNA\n  def initialize(dna_string)\n    @dna = dna_string.split(//)\n  end\n\n  def hamming_distance(other_dna_string)\n    other_dna = other_dna_string.split(//)\n    result_distance = 0\n    @dna.each_with_index do |nucleotide, idx|\n      other_nucleotide = other_dna[idx]\n      result_distance +=1 if !other_nucleotide.nil? && other_nucleotide!=nucleotide\n    end\n\n    result_distance\n  end\nend	2015-06-22 09:17:16.049989	\N	0	1	2015-06-21 03:23:04	2015-06-21 03:23:04	49	point-mutations.rb	{"point-mutations.rb":"class DNA\\n  def initialize(dna_string)\\n    @dna = dna_string.split(//)\\n  end\\n\\n  def hamming_distance(other_dna_string)\\n    other_dna = other_dna_string.split(//)\\n    result_distance = 0\\n    @dna.each_with_index do |nucleotide, idx|\\n      other_nucleotide = other_dna[idx]\\n      result_distance +=1 if !other_nucleotide.nil? \\u0026\\u0026 other_nucleotide!=nucleotide\\n    end\\n\\n    result_distance\\n  end\\nend"}
78	29	ce8e632882bf283809e91baa	done	ruby	prime-factors	class PrimeFactors\n  def self.for(n)\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\n      while n % x == 0\n        n /= x\n        factors << x\n      end\n    }.tap { |factors| factors << n unless n == 1 }\n  end\nend	2015-06-22 09:17:16.130581	\N	0	1	2015-06-21 02:07:08	2015-06-21 02:07:08	51	prime_factors.rb	{"prime_factors.rb":"class PrimeFactors\\n  def self.for(n)\\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\\n      while n % x == 0\\n        n /= x\\n        factors \\u003c\\u003c x\\n      end\\n    }.tap { |factors| factors \\u003c\\u003c n unless n == 1 }\\n  end\\nend"}
79	31	3b1edd4872b7411848afa67f	pending	haskell	sublist	module Sublist (Sublist(..), sublist) where\n    \n    import Data.List (isInfixOf)\n\n    data Sublist = Equal | Sublist | Superlist | Unequal deriving (Show, Eq)\n\n    sublist :: (Eq t) => [t] -> [t] -> Sublist\n    sublist xs ys \n        | xs `isEqual` ys = Equal\n        | xs `isSublist` ys = Sublist\n        | ys `isSublist` xs = Superlist\n        | otherwise = Unequal\n\n    isEqual :: (Eq t) => [t] -> [t] -> Bool\n    isEqual xs ys = xs == ys\n\n    isSublist :: (Eq t) => [t] -> [t] -> Bool\n    isSublist [] _ = True\n    isSublist _ [] = False\n    isSublist (x:[]) (y:[]) = if [x] == [y] then True else False\n    isSublist (x:[]) (ys) = if x `elem` ys then True else False\n    isSublist (xs) (ys) = if xs `isInfixOf` ys then True else False	\N	\N	0	1	2015-06-10 20:56:14	2015-06-10 20:56:14	52	Sublist.hs	{"Sublist.hs":"module Sublist (Sublist(..), sublist) where\\n    \\n    import Data.List (isInfixOf)\\n\\n    data Sublist = Equal | Sublist | Superlist | Unequal deriving (Show, Eq)\\n\\n    sublist :: (Eq t) =\\u003e [t] -\\u003e [t] -\\u003e Sublist\\n    sublist xs ys \\n        | xs `isEqual` ys = Equal\\n        | xs `isSublist` ys = Sublist\\n        | ys `isSublist` xs = Superlist\\n        | otherwise = Unequal\\n\\n    isEqual :: (Eq t) =\\u003e [t] -\\u003e [t] -\\u003e Bool\\n    isEqual xs ys = xs == ys\\n\\n    isSublist :: (Eq t) =\\u003e [t] -\\u003e [t] -\\u003e Bool\\n    isSublist [] _ = True\\n    isSublist _ [] = False\\n    isSublist (x:[]) (y:[]) = if [x] == [y] then True else False\\n    isSublist (x:[]) (ys) = if x `elem` ys then True else False\\n    isSublist (xs) (ys) = if xs `isInfixOf` ys then True else False"}
80	33	08b99ae33b0449ec7e7ef602	superseded	scala	word-count	case class Phrase(str: String) {\n  def wordCount : Map[String, Int] = {\n    str.toLowerCase.split("[^a-zA-Z0-9']")\n      .filter(s => s.trim != "")\n      .toSeq\n      .groupBy(s => s)\n      .map(t => (t._1, t._2.length))\n  }\n}	\N	\N	0	1	2014-12-07 00:26:30	2014-12-07 00:26:30	53	Phrase.scala	{"Phrase.scala":"case class Phrase(str: String) {\\n  def wordCount : Map[String, Int] = {\\n    str.toLowerCase.split(\\"[^a-zA-Z0-9']\\")\\n      .filter(s =\\u003e s.trim != \\"\\")\\n      .toSeq\\n      .groupBy(s =\\u003e s)\\n      .map(t =\\u003e (t._1, t._2.length))\\n  }\\n}"}
81	33	8298d04497120ff96d0afa32	done	scala	word-count	case class Phrase(str: String) {\n  def wordCount : Map[String, Int] = {\n    str.toLowerCase.split("[^a-zA-Z0-9']")\n      .filter(s => !s.trim.isEmpty)\n      .toSeq\n      .groupBy(s => s)\n      .map(t => (t._1, t._2.length))\n  }\n}	2014-12-26 10:25:12	\N	0	2	2014-12-21 09:07:56	2014-12-21 09:07:56	53	Phrase.scala	{"Phrase.scala":"case class Phrase(str: String) {\\n  def wordCount : Map[String, Int] = {\\n    str.toLowerCase.split(\\"[^a-zA-Z0-9']\\")\\n      .filter(s =\\u003e !s.trim.isEmpty)\\n      .toSeq\\n      .groupBy(s =\\u003e s)\\n      .map(t =\\u003e (t._1, t._2.length))\\n  }\\n}"}
132	49	cdf4c9f65069cc6635cc4abf	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	2015-01-11 01:53:20	2015-01-11 01:53:20	88	matrix.rb	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
133	49	5a1a56b4cdd92d93d5e27a04	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	2015-01-14 02:36:09	2015-01-14 02:36:09	88	matrix.rb	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
148	26	a339e584e1c63731b352524d	superseded	python	bob	class Bob:\r\n  def hey(self, phrase):\r\n    if is_silence(phrase):\r\n      return 'Fine. Be that way!'\r\n    if is_shout(phrase):\r\n      return 'Woah, chill out!'\r\n    if is_question(phrase):\r\n      return 'Sure.'\r\n    return 'Whatever.'\r\n\r\ndef is_question(phrase):\r\n  return phrase.endswith('?')\r\n\r\ndef is_silence(phrase):\r\n  return not phrase or not phrase.strip()\r\n\r\ndef is_shout(phrase):\r\n  return phrase.isupper()	\N	\N	0	1	2015-01-03 22:31:35	2015-01-03 22:31:35	96	\\python\\bob\\bob.py	{"\\\\python\\\\bob\\\\bob.py":"class Bob:\\r\\n  def hey(self, phrase):\\r\\n    if is_silence(phrase):\\r\\n      return 'Fine. Be that way!'\\r\\n    if is_shout(phrase):\\r\\n      return 'Woah, chill out!'\\r\\n    if is_question(phrase):\\r\\n      return 'Sure.'\\r\\n    return 'Whatever.'\\r\\n\\r\\ndef is_question(phrase):\\r\\n  return phrase.endswith('?')\\r\\n\\r\\ndef is_silence(phrase):\\r\\n  return not phrase or not phrase.strip()\\r\\n\\r\\ndef is_shout(phrase):\\r\\n  return phrase.isupper()"}
82	33	929c7d8100a194ce3aa70d9f	superseded	erlang	bob	-module(bob).\n-export([response_for/1]).\n\nresponse_for_stripped([]) -> "Fine. Be that way!";\nresponse_for_stripped(String) ->\n    case string:equal(string:to_upper(String), String) of\n        true ->\n            case string:equal(string:to_lower(String), String) of\n                true -> response_for_reverse(lists:reverse(String));\n                false -> "Whoa, chill out!"\n            end;\n        false -> response_for_reverse(lists:reverse(String))\n    end.\n\nresponse_for_reverse([Char | _Rest]) when Char == $? -> "Sure.";\nresponse_for_reverse(_String) -> "Whatever.".\n\nresponse_for(String) -> response_for_stripped(string:strip(String, both)).	\N	\N	0	1	2015-01-10 18:07:51	2015-01-10 18:07:51	54	bob.erl	{"bob.erl":"-module(bob).\\n-export([response_for/1]).\\n\\nresponse_for_stripped([]) -\\u003e \\"Fine. Be that way!\\";\\nresponse_for_stripped(String) -\\u003e\\n    case string:equal(string:to_upper(String), String) of\\n        true -\\u003e\\n            case string:equal(string:to_lower(String), String) of\\n                true -\\u003e response_for_reverse(lists:reverse(String));\\n                false -\\u003e \\"Whoa, chill out!\\"\\n            end;\\n        false -\\u003e response_for_reverse(lists:reverse(String))\\n    end.\\n\\nresponse_for_reverse([Char | _Rest]) when Char == $? -\\u003e \\"Sure.\\";\\nresponse_for_reverse(_String) -\\u003e \\"Whatever.\\".\\n\\nresponse_for(String) -\\u003e response_for_stripped(string:strip(String, both))."}
83	33	5eacc180e3a0cd820e03baf4	done	erlang	bob	-module(bob).\n-export([response_for/1]).\n\n-spec response_for(string()) -> string().\n-spec response_for_stripped(string()) -> string().\n-spec response_for_reverse(string()) -> string().\n\nresponse_for_stripped([]) -> "Fine. Be that way!";\nresponse_for_stripped(String) ->\n    case string:equal(string:to_upper(String), String) of\n        true ->\n            case string:equal(string:to_lower(String), String) of\n                true -> response_for_reverse(lists:reverse(String));\n                false -> "Whoa, chill out!"\n            end;\n        false -> response_for_reverse(lists:reverse(String))\n    end.\n\nresponse_for_reverse([Char | _Rest]) when Char == $? -> "Sure.";\nresponse_for_reverse(_String) -> "Whatever.".\n\nresponse_for(String) -> response_for_stripped(string:strip(String, both)).	2015-01-26 06:15:53	\N	0	2	2015-01-15 18:23:48	2015-01-15 18:23:48	54	bob.erl	{"bob.erl":"-module(bob).\\n-export([response_for/1]).\\n\\n-spec response_for(string()) -\\u003e string().\\n-spec response_for_stripped(string()) -\\u003e string().\\n-spec response_for_reverse(string()) -\\u003e string().\\n\\nresponse_for_stripped([]) -\\u003e \\"Fine. Be that way!\\";\\nresponse_for_stripped(String) -\\u003e\\n    case string:equal(string:to_upper(String), String) of\\n        true -\\u003e\\n            case string:equal(string:to_lower(String), String) of\\n                true -\\u003e response_for_reverse(lists:reverse(String));\\n                false -\\u003e \\"Whoa, chill out!\\"\\n            end;\\n        false -\\u003e response_for_reverse(lists:reverse(String))\\n    end.\\n\\nresponse_for_reverse([Char | _Rest]) when Char == $? -\\u003e \\"Sure.\\";\\nresponse_for_reverse(_String) -\\u003e \\"Whatever.\\".\\n\\nresponse_for(String) -\\u003e response_for_stripped(string:strip(String, both))."}
84	33	7ea4ec48095228bb25e7e247	superseded	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n\tif(phrase == '' || phrase == '   '){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search("gym") != -1){\n\t\treturn 'Whatever.';\n\t} else if(phrase[phrase.length-1]==="!"){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1]==="?"){\n\t\treturn 'Sure.';\n\t}\telse if (phrase[phrase.length-1]!=="?" || phrase[phrase.length-1] !== "!"){\n\t\treturn 'Whatever.';\n\t}\t\n\n}	\N	\N	0	1	2015-01-11 20:59:14	2015-01-11 20:59:14	55	bob.js	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n\\tif(phrase == '' || phrase == '   '){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(\\"gym\\") != -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if(phrase[phrase.length-1]===\\"!\\"){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1]===\\"?\\"){\\n\\t\\treturn 'Sure.';\\n\\t}\\telse if (phrase[phrase.length-1]!==\\"?\\" || phrase[phrase.length-1] !== \\"!\\"){\\n\\t\\treturn 'Whatever.';\\n\\t}\\t\\n\\n}"}
85	33	048ff0200891dae77ca2a67b	done	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n   if(phrase.search(/([0-9a-zA-Z])\\S+/) === -1){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search(/\\d\\?/)>-1){\n\t\treturn 'Sure.';\n\t} else if (phrase[phrase.length-1] == '?' && phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1] == '?'){\n\t\treturn 'Sure.';\n\t} else if (phrase.search(/[A-Za-z]+/) === -1){\n\t\treturn 'Whatever.';\n\t} else if (phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else{\n\t\treturn 'Whatever.';\n\t}\n};	2015-02-26 01:51:41	\N	0	2	2015-02-19 05:14:06	2015-02-19 05:14:06	55	bob.js	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n   if(phrase.search(/([0-9a-zA-Z])\\\\S+/) === -1){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(/\\\\d\\\\?/)\\u003e-1){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase[phrase.length-1] == '?' \\u0026\\u0026 phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1] == '?'){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase.search(/[A-Za-z]+/) === -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if (phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else{\\n\\t\\treturn 'Whatever.';\\n\\t}\\n};"}
149	7	e98f9fa3ee20c991827ec133	superseded	haskell	strain	module Strain(keep, discard) where\n\nkeep :: Eq a => (a -> Bool) -> [a] -> [a]\nkeep predicate collection = filter predicate collection\n\ndiscard :: Eq a => (a -> Bool) -> [a] -> [a]\ndiscard predicate = keep (not . predicate)	\N	\N	0	1	2014-12-25 17:09:22	2014-12-25 17:09:22	97	/haskell/strain/Strain.hs	{"/haskell/strain/Strain.hs":"module Strain(keep, discard) where\\n\\nkeep :: Eq a =\\u003e (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\nkeep predicate collection = filter predicate collection\\n\\ndiscard :: Eq a =\\u003e (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\ndiscard predicate = keep (not . predicate)"}
150	7	16137e31476d1889ec752945	pending	haskell	strain	module Strain(keep, discard) where\n\nkeep :: Eq a => (a -> Bool) -> [a] -> [a]\nkeep predicate [] = []\nkeep predicate h:t =\n    if predicate h\n        then h : keep predicate t\n        else keep predicate t\n\ndiscard :: Eq a => (a -> Bool) -> [a] -> [a]\ndiscard predicate = keep (not . predicate)	\N	\N	0	2	2015-03-27 14:51:13	2015-03-27 14:51:13	97	/haskell/strain/Strain.hs	{"/haskell/strain/Strain.hs":"module Strain(keep, discard) where\\n\\nkeep :: Eq a =\\u003e (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\nkeep predicate [] = []\\nkeep predicate h:t =\\n    if predicate h\\n        then h : keep predicate t\\n        else keep predicate t\\n\\ndiscard :: Eq a =\\u003e (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\ndiscard predicate = keep (not . predicate)"}
86	33	9df7ad3804d95edb1bd1969a	superseded	javascript	nucleotide-count	var dna = function(strand) {\n\tthis.strand = strand || "";\n\n\tthis.count = function(nuc) {\n\t\tif (this.strand.length == 0) return 0;\n\t\treturn this.strand.split(nuc).length - 1;\n\t};\n\n\tthis.histogram = function() {\n\t\treturn {\n\t\t\tA: this.count('A'),\n\t\t\tT: this.count('T'),\n\t\t\tC: this.count('C'),\n\t\t\tG: this.count('G')\n\t\t};\n\t};\n\n\treturn this;\n};\n\ndna.bind = function() {\n\tvar args = [].slice.call(arguments);\n\t\n\targs.forEach( function(strand) {\n\t\tvar check = /[^ATCG]/.test(strand);\n\n\t\tif (check) {\n\t\t\tthrow null;\n\t\t}\n\n\t});\n\n}\n\nmodule.exports = dna;	\N	\N	0	1	2015-02-01 04:44:25	2015-02-01 04:44:25	56	nucleotide-count.js	{"nucleotide-count.js":"var dna = function(strand) {\\n\\tthis.strand = strand || \\"\\";\\n\\n\\tthis.count = function(nuc) {\\n\\t\\tif (this.strand.length == 0) return 0;\\n\\t\\treturn this.strand.split(nuc).length - 1;\\n\\t};\\n\\n\\tthis.histogram = function() {\\n\\t\\treturn {\\n\\t\\t\\tA: this.count('A'),\\n\\t\\t\\tT: this.count('T'),\\n\\t\\t\\tC: this.count('C'),\\n\\t\\t\\tG: this.count('G')\\n\\t\\t};\\n\\t};\\n\\n\\treturn this;\\n};\\n\\ndna.bind = function() {\\n\\tvar args = [].slice.call(arguments);\\n\\t\\n\\targs.forEach( function(strand) {\\n\\t\\tvar check = /[^ATCG]/.test(strand);\\n\\n\\t\\tif (check) {\\n\\t\\t\\tthrow null;\\n\\t\\t}\\n\\n\\t});\\n\\n}\\n\\nmodule.exports = dna;"}
87	33	21ba2920f33d4ee07a0908c3	done	javascript	nucleotide-count	'use strict';\n\nvar dna = function(strand) {\n\tvar obj = {}\n\tobj.strand = strand || "";\n\t\n\tif (/[^ATCG]/.test(obj.strand) && obj.strand.trim().length > 0) {\n\t\tthrow new Error('DNA string is invalid');\n\t}\n\n\tobj.count = function(nuc) {\n\t\tif (obj.strand.trim().length === 0) return 0;\n\t\treturn obj.strand.split(nuc).length - 1;\n\t};\n\n\tobj.histogram = function() {\n\t\treturn {\n\t\t\tA: obj.count('A'),\n\t\t\tT: obj.count('T'),\n\t\t\tC: obj.count('C'),\n\t\t\tG: obj.count('G')\n\t\t};\n\t};\n\n\treturn obj;\n};\n\n\nmodule.exports = dna;	2015-05-26 11:38:08	\N	0	2	2015-05-24 11:24:02	2015-05-24 11:24:02	56	nucleotide-count.js	{"nucleotide-count.js":"'use strict';\\n\\nvar dna = function(strand) {\\n\\tvar obj = {}\\n\\tobj.strand = strand || \\"\\";\\n\\t\\n\\tif (/[^ATCG]/.test(obj.strand) \\u0026\\u0026 obj.strand.trim().length \\u003e 0) {\\n\\t\\tthrow new Error('DNA string is invalid');\\n\\t}\\n\\n\\tobj.count = function(nuc) {\\n\\t\\tif (obj.strand.trim().length === 0) return 0;\\n\\t\\treturn obj.strand.split(nuc).length - 1;\\n\\t};\\n\\n\\tobj.histogram = function() {\\n\\t\\treturn {\\n\\t\\t\\tA: obj.count('A'),\\n\\t\\t\\tT: obj.count('T'),\\n\\t\\t\\tC: obj.count('C'),\\n\\t\\t\\tG: obj.count('G')\\n\\t\\t};\\n\\t};\\n\\n\\treturn obj;\\n};\\n\\n\\nmodule.exports = dna;"}
88	38	1190c24f27fb28783ef66f6d	done	ruby	triangle	class\tTriangle\n\tdef initialize(a, b, c)\n\t\t@sides = [a, b, c].sort\n\tend\n\n\tdef kind\n\t\tguard_against_invalid_lengths\n\t\treturn :equilateral if @sides[0] == @sides[1] and @sides[1] == @sides[2]\n\t\treturn :isosceles if @sides[0] == @sides[1] || @sides[0] == @sides[2] || @sides[1] == @sides[2]\n\t\treturn :scalene\n\tend\n\n\tdef guard_against_invalid_lengths\n\t\tif @sides[0] + @sides[1] <= @sides[2]\n      raise TriangleError\n    end\n\tend\n\nend\n\nclass TriangleError < StandardError  \nend	2015-06-13 18:24:20	\N	0	1	2015-06-11 15:43:53	2015-06-11 15:43:53	57	triangle.rb	{"triangle.rb":"class\\tTriangle\\n\\tdef initialize(a, b, c)\\n\\t\\t@sides = [a, b, c].sort\\n\\tend\\n\\n\\tdef kind\\n\\t\\tguard_against_invalid_lengths\\n\\t\\treturn :equilateral if @sides[0] == @sides[1] and @sides[1] == @sides[2]\\n\\t\\treturn :isosceles if @sides[0] == @sides[1] || @sides[0] == @sides[2] || @sides[1] == @sides[2]\\n\\t\\treturn :scalene\\n\\tend\\n\\n\\tdef guard_against_invalid_lengths\\n\\t\\tif @sides[0] + @sides[1] \\u003c= @sides[2]\\n      raise TriangleError\\n    end\\n\\tend\\n\\nend\\n\\nclass TriangleError \\u003c StandardError  \\nend"}
89	38	4b14626c57b662605e7f73fb	pending	ruby	leap	class Year\n  def self.leap?(year)\n    year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)\n  end\nend	\N	\N	0	1	2015-02-28 00:37:27	2015-02-28 00:37:27	58	year.rb	{"year.rb":"class Year\\n  def self.leap?(year)\\n    year % 400 == 0 || (year % 4 == 0 \\u0026\\u0026 year % 100 != 0)\\n  end\\nend"}
129	48	38d39ee0198598b9ebd8059c	pending	python	beer-song	def bottles(n):\n\n\tif n == 0:\n\t\treturn "no more bottles"\n\tif n == 1:\n\t\treturn "1 bottle"\n\treturn "%d bottles" % n\n\ndef verse(n):\n\tres =  "%s of beer on the wall, %s of beer.\\n" % (bottles(n).capitalize(), bottles(n))\n\tif n == 0:\n\t\tres += "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\telif n == 1:\n\t\tres += "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\telse:\n\t\tres += "Take one down and pass it around, %s of beer on the wall.\\n" % bottles(n-1)\n\treturn res\n\ndef song(hi, low = 0):\n\treturn ''.join(\n\t\tverse(n) + '\\n'\n\t\tfor n in xrange(hi, low - 1, -1)\n\t)	\N	\N	0	1	2015-02-10 09:25:40	2015-02-10 09:25:40	85	/python/beer-song/beer.py	{"/python/beer-song/beer.py":"def bottles(n):\\n\\n\\tif n == 0:\\n\\t\\treturn \\"no more bottles\\"\\n\\tif n == 1:\\n\\t\\treturn \\"1 bottle\\"\\n\\treturn \\"%d bottles\\" % n\\n\\ndef verse(n):\\n\\tres =  \\"%s of beer on the wall, %s of beer.\\\\n\\" % (bottles(n).capitalize(), bottles(n))\\n\\tif n == 0:\\n\\t\\tres += \\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n\\telif n == 1:\\n\\t\\tres += \\"Take it down and pass it around, no more bottles of beer on the wall.\\\\n\\"\\n\\telse:\\n\\t\\tres += \\"Take one down and pass it around, %s of beer on the wall.\\\\n\\" % bottles(n-1)\\n\\treturn res\\n\\ndef song(hi, low = 0):\\n\\treturn ''.join(\\n\\t\\tverse(n) + '\\\\n'\\n\\t\\tfor n in xrange(hi, low - 1, -1)\\n\\t)"}
130	48	dd0bf6c71d8ea1feb238d9fc	pending	haskell	leap	module LeapYear (isLeapYear, isLeapYear2) where\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n    | year `mod` 100 == 0 && year `mod` 400 /= 0  = False\n    | year `mod` 4 == 0  =  True\n    | otherwise = False\n\nisLeapYear2 :: Int -> Bool\nisLeapYear2 year\n    | year `mod` 4 /= 0  = False\n    | year `mod` 100 == 0 && year `mod` 400 /= 0 = False\n    | otherwise = True	\N	\N	0	1	2015-03-11 11:22:15	2015-03-11 11:22:15	86	haskell/leap/leapyear.hs	{"haskell/leap/leapyear.hs":"module LeapYear (isLeapYear, isLeapYear2) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear year\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0  = False\\n    | year `mod` 4 == 0  =  True\\n    | otherwise = False\\n\\nisLeapYear2 :: Int -\\u003e Bool\\nisLeapYear2 year\\n    | year `mod` 4 /= 0  = False\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0 = False\\n    | otherwise = True"}
131	48	2da5d24d4dfec04ea7110431	done	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    count = 0\n    a.chars.each_index {|i| count += 1 if (a[i] != b[i]) && !a[i].nil? && !b[i].nil?}\n    count\n  end\nend	2015-03-14 06:04:25	\N	0	1	2015-03-13 20:56:01	2015-03-13 20:56:01	87	hamming.rb	{"hamming.rb":"class Hamming\\n  def self.compute(a, b)\\n    count = 0\\n    a.chars.each_index {|i| count += 1 if (a[i] != b[i]) \\u0026\\u0026 !a[i].nil? \\u0026\\u0026 !b[i].nil?}\\n    count\\n  end\\nend"}
90	38	e03e5dd8089b22b06d363403	pending	elixir	space-age	defmodule SpaceAge do\n  @type planet :: :mercury | :venus | :earth | :mars | :jupiter\n                | :saturn | :neptune | :uranus\n\n  @earth_seconds 31_557_600\n\n  @mercury_period 0.2408467\n  @venus_period 0.61519726\n  @mars_period 1.8808158\n  @jupiter_period 11.862615\n  @saturn_period 29.447498\n  @uranus_period 84.016846\n  @neptune_period 164.79132\n\n  @doc """\n  Return the number of years a person that has lived for 'seconds' seconds is\n  aged on 'planet'. \n  """\n  @spec age_on(planet, pos_integer) :: float\n  def age_on(:earth   , seconds) , do: seconds / @earth_seconds\n  def age_on(:mercury , seconds) , do: seconds / @earth_seconds / @mercury_period\n  def age_on(:venus   , seconds) , do: seconds / @earth_seconds / @venus_period\n  def age_on(:mars    , seconds) , do: seconds / @earth_seconds / @mars_period\n  def age_on(:jupiter , seconds) , do: seconds / @earth_seconds / @jupiter_period\n  def age_on(:saturn  , seconds) , do: seconds / @earth_seconds / @saturn_period\n  def age_on(:uranus  , seconds) , do: seconds / @earth_seconds / @uranus_period\n  def age_on(:neptune , seconds) , do: seconds / @earth_seconds / @neptune_period\nend	\N	\N	0	1	2015-03-23 14:02:42	2015-03-23 14:02:42	59	space_age.exs	{"space_age.exs":"defmodule SpaceAge do\\n  @type planet :: :mercury | :venus | :earth | :mars | :jupiter\\n                | :saturn | :neptune | :uranus\\n\\n  @earth_seconds 31_557_600\\n\\n  @mercury_period 0.2408467\\n  @venus_period 0.61519726\\n  @mars_period 1.8808158\\n  @jupiter_period 11.862615\\n  @saturn_period 29.447498\\n  @uranus_period 84.016846\\n  @neptune_period 164.79132\\n\\n  @doc \\"\\"\\"\\n  Return the number of years a person that has lived for 'seconds' seconds is\\n  aged on 'planet'. \\n  \\"\\"\\"\\n  @spec age_on(planet, pos_integer) :: float\\n  def age_on(:earth   , seconds) , do: seconds / @earth_seconds\\n  def age_on(:mercury , seconds) , do: seconds / @earth_seconds / @mercury_period\\n  def age_on(:venus   , seconds) , do: seconds / @earth_seconds / @venus_period\\n  def age_on(:mars    , seconds) , do: seconds / @earth_seconds / @mars_period\\n  def age_on(:jupiter , seconds) , do: seconds / @earth_seconds / @jupiter_period\\n  def age_on(:saturn  , seconds) , do: seconds / @earth_seconds / @saturn_period\\n  def age_on(:uranus  , seconds) , do: seconds / @earth_seconds / @uranus_period\\n  def age_on(:neptune , seconds) , do: seconds / @earth_seconds / @neptune_period\\nend"}
91	38	84c51b4c2123cebd150aa18c	pending	csharp	raindrops	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\n\r\n    class Raindrops\r\n    {\r\n\r\n        \r\n        public Raindrops() { }\r\n\r\n        public static string Convert(int rainValue)\r\n        {\r\n            var primeList = primeFactorsGetter(rainValue);\r\n            if(PlingPlangPlongString(primeList).Length > 0) return PlingPlangPlongString(primeList);\r\n            return rainValue.ToString();\r\n            \r\n        }\r\n\r\n        public static List<string> primeFactorsGetter(long value)\r\n        {\r\n            var resultsList = new List<string>();\r\n            for (int i = 2; i <= value; i++)\r\n            {\r\n                while (value % i == 0)\r\n                {\r\n                    resultsList.Add(i.ToString());\r\n                    value /= i;\r\n                }\r\n            }            \r\n            return resultsList;\r\n        }\r\n\r\n        public static string PlingPlangPlongString(List<string> listOfPrimeFactors)\r\n        {\r\n            var resultString = new StringBuilder();\r\n\r\n            if (listOfPrimeFactors.Contains("3")) resultString.Append("Pling");\r\n            if (listOfPrimeFactors.Contains("5")) resultString.Append("Plang");\r\n            if (listOfPrimeFactors.Contains("7")) resultString.Append("Plong");           \r\n\r\n            return resultString.ToString();\r\n        }\r\n    }	\N	\N	0	1	2015-04-14 17:33:22	2015-04-14 17:33:22	60	\\csharp\\raindrops\\Raindrops.cs	{"\\\\csharp\\\\raindrops\\\\Raindrops.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\n\\r\\n\\r\\n    class Raindrops\\r\\n    {\\r\\n\\r\\n        \\r\\n        public Raindrops() { }\\r\\n\\r\\n        public static string Convert(int rainValue)\\r\\n        {\\r\\n            var primeList = primeFactorsGetter(rainValue);\\r\\n            if(PlingPlangPlongString(primeList).Length \\u003e 0) return PlingPlangPlongString(primeList);\\r\\n            return rainValue.ToString();\\r\\n            \\r\\n        }\\r\\n\\r\\n        public static List\\u003cstring\\u003e primeFactorsGetter(long value)\\r\\n        {\\r\\n            var resultsList = new List\\u003cstring\\u003e();\\r\\n            for (int i = 2; i \\u003c= value; i++)\\r\\n            {\\r\\n                while (value % i == 0)\\r\\n                {\\r\\n                    resultsList.Add(i.ToString());\\r\\n                    value /= i;\\r\\n                }\\r\\n            }            \\r\\n            return resultsList;\\r\\n        }\\r\\n\\r\\n        public static string PlingPlangPlongString(List\\u003cstring\\u003e listOfPrimeFactors)\\r\\n        {\\r\\n            var resultString = new StringBuilder();\\r\\n\\r\\n            if (listOfPrimeFactors.Contains(\\"3\\")) resultString.Append(\\"Pling\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"5\\")) resultString.Append(\\"Plang\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"7\\")) resultString.Append(\\"Plong\\");           \\r\\n\\r\\n            return resultString.ToString();\\r\\n        }\\r\\n    }"}
92	38	8d33b38d9ac010cddc25719c	done	python	leap	# Created by Paul Olteanu on 24/09/2014\r\ndef is_leap_year(year):\r\n    return year % 4 == 0 and (not year % 100 == 0 or year % 400 == 0)\r\n    # Hooray for one-liners!\r\n    # Check for divisibility by 4. If it's divisible by 100 and not by 400, the and statement fails and return false.\r\n    # If it isn't divisible by 100 or it is but it's also divisible by 400, the and statement succeeds and returns true.	2015-03-02 20:55:34	\N	0	1	2015-02-26 22:33:31	2015-02-26 22:33:31	61	year.py	{"year.py":"# Created by Paul Olteanu on 24/09/2014\\r\\ndef is_leap_year(year):\\r\\n    return year % 4 == 0 and (not year % 100 == 0 or year % 400 == 0)\\r\\n    # Hooray for one-liners!\\r\\n    # Check for divisibility by 4. If it's divisible by 100 and not by 400, the and statement fails and return false.\\r\\n    # If it isn't divisible by 100 or it is but it's also divisible by 400, the and statement succeeds and returns true."}
93	38	bc376e4b4401852054998a6f	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	1	2015-04-04 13:00:09	2015-04-04 13:00:09	62	anagram.py	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
94	38	0cc6bbdad367ed07bd27fa82	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        l_pos_anagram = pos_anagram.lower()\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	2	2015-05-03 14:38:19	2015-05-03 14:38:19	62	anagram.py	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        l_pos_anagram = pos_anagram.lower()\\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
95	38	b7528693ad57a0e9a049b2c4	pending	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    # list comp instead of loop - less readable but not much .\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]	\N	\N	0	3	2015-06-04 18:11:22	2015-06-04 18:11:22	62	anagram.py	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    # list comp instead of loop - less readable but not much .\\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]"}
96	38	e0b605d01c556a0437799a62	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	2015-02-26 03:24:58	2015-02-26 03:24:58	63	translation.rb	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
97	40	2c8cbbd770c32d5cf66fa551	done	perl5	word-count	use strict;\nuse warnings;\n\npackage Phrase;\n\nsub word_count {\n    my $phrase = shift;\n    my @words = split /\\W+/, lc $phrase;\n    my %count;\n    $count{$_}++ for @words;\n    return \\%count;\n}\n\n1;	2015-04-05 14:07:55	\N	0	1	2015-03-28 18:39:01	2015-03-28 18:39:01	64	word-count.pm	{"word-count.pm":"use strict;\\nuse warnings;\\n\\npackage Phrase;\\n\\nsub word_count {\\n    my $phrase = shift;\\n    my @words = split /\\\\W+/, lc $phrase;\\n    my %count;\\n    $count{$_}++ for @words;\\n    return \\\\%count;\\n}\\n\\n1;"}
98	44	ed4a1e624364f4a27e3bb5f1	superseded	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.num = input_string\n        self.length = len(self.num)\n        try:\n            self.lst = [int(c) for c in self.num]\n        except:\n            self.lst = []\n            \n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        ret = []\n        for i in range(self.length - n + 1):\n            each_slice = self.lst[i:i+n]\n            ret.append(each_slice)\n\n        return ret	\N	\N	0	1	2015-04-11 21:06:46	2015-04-11 21:06:46	65	series.py	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.num = input_string\\n        self.length = len(self.num)\\n        try:\\n            self.lst = [int(c) for c in self.num]\\n        except:\\n            self.lst = []\\n            \\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        ret = []\\n        for i in range(self.length - n + 1):\\n            each_slice = self.lst[i:i+n]\\n            ret.append(each_slice)\\n\\n        return ret"}
99	44	a33e649e91a04b1bc94963d4	pending	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.length = len(input_string)\n        try:\n            self.lst = [int(c) for c in input_string]\n        except:\n            raise ValueError("Please input a string that only contains numbers")\n\n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]	\N	\N	0	2	2015-06-06 15:43:09	2015-06-06 15:43:09	65	series.py	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.length = len(input_string)\\n        try:\\n            self.lst = [int(c) for c in input_string]\\n        except:\\n            raise ValueError(\\"Please input a string that only contains numbers\\")\\n\\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]"}
100	46	1bfd48d8a094b95f98a29c66	superseded	ruby	difference-of-squares	class Squares\n\n  attr_reader :sum_of_squares, :square_of_sums, :difference\n\n  def initialize(n)\n    @sum_of_squares = (1..n).reduce { |s, i| s += i**2 }\n    @square_of_sums = (1..n).reduce(:+) ** 2\n    @difference     = (@sum_of_squares - @square_of_sums).abs\n  end\n\nend	\N	\N	0	1	2015-02-15 15:58:34	2015-02-15 15:58:34	66	squares.rb	{"squares.rb":"class Squares\\n\\n  attr_reader :sum_of_squares, :square_of_sums, :difference\\n\\n  def initialize(n)\\n    @sum_of_squares = (1..n).reduce { |s, i| s += i**2 }\\n    @square_of_sums = (1..n).reduce(:+) ** 2\\n    @difference     = (@sum_of_squares - @square_of_sums).abs\\n  end\\n\\nend"}
101	46	8c1e6b682baa8495596454b9	done	ruby	difference-of-squares	class Squares\n\n  attr_reader :sum_of_squares, :square_of_sums, :difference\n\n  def initialize(n)\n    @sum_of_squares = (1..n).reduce { |s, i| s + i**2 }\n    @square_of_sums = (1..n).reduce(:+) ** 2\n    @difference     = (@sum_of_squares - @square_of_sums).abs\n  end\n\nend	2015-02-27 06:50:46	\N	0	2	2015-02-18 23:57:21	2015-02-18 23:57:21	66	/ruby/difference-of-squares/squares.rb	{"/ruby/difference-of-squares/squares.rb":"class Squares\\n\\n  attr_reader :sum_of_squares, :square_of_sums, :difference\\n\\n  def initialize(n)\\n    @sum_of_squares = (1..n).reduce { |s, i| s + i**2 }\\n    @square_of_sums = (1..n).reduce(:+) ** 2\\n    @difference     = (@sum_of_squares - @square_of_sums).abs\\n  end\\n\\nend"}
102	46	d1285f7d710a314e3e80193b	done	perl5	scrabble-score	#!/usr/bin/perl\n\npackage Word;\n\nuse warnings;\nuse strict;\n\n%Word::l = ();\n\n$Word::l{$_} = 1 for qw(A E I O U L N R S T);\n$Word::l{$_} = 2 for qw(D G);\n$Word::l{$_} = 3 for qw(B C M P);\n$Word::l{$_} = 4 for qw(F H V W Y);\n$Word::l{$_} = 5 for qw(K);\n$Word::l{$_} = 8 for qw(J X);\n$Word::l{$_} = 10 for qw(Q Z);\n\nsub new {\n\n  my ($class, $w) = @_;\n\n  #constructor\n  my $self = [ split(//, $w) ];\n    \n  bless $self, $class;\n\n  return $self;\n}\n\n\nsub score {\n\n  my ($self, %args) = @_;\n\n  my $score = 0;\n\n  for (@$self) {\n    $score += $Word::l{uc($_)} if (exists($Word::l{uc($_)}));\n  }\n\n  if (exists($args{double})) {\n    $score *= 2 for(0..$args{double}-1);\n  }\n\n  if (exists($args{triple})) {\n    $score *= 3 for(0..$args{triple}-1);\n  }\n\n  return $score;\n}\n\n1;	2014-11-27 01:22:14	\N	0	1	2014-11-22 15:26:55	2014-11-22 15:26:55	67	Word.pm	{"Word.pm":"#!/usr/bin/perl\\n\\npackage Word;\\n\\nuse warnings;\\nuse strict;\\n\\n%Word::l = ();\\n\\n$Word::l{$_} = 1 for qw(A E I O U L N R S T);\\n$Word::l{$_} = 2 for qw(D G);\\n$Word::l{$_} = 3 for qw(B C M P);\\n$Word::l{$_} = 4 for qw(F H V W Y);\\n$Word::l{$_} = 5 for qw(K);\\n$Word::l{$_} = 8 for qw(J X);\\n$Word::l{$_} = 10 for qw(Q Z);\\n\\nsub new {\\n\\n  my ($class, $w) = @_;\\n\\n  #constructor\\n  my $self = [ split(//, $w) ];\\n    \\n  bless $self, $class;\\n\\n  return $self;\\n}\\n\\n\\nsub score {\\n\\n  my ($self, %args) = @_;\\n\\n  my $score = 0;\\n\\n  for (@$self) {\\n    $score += $Word::l{uc($_)} if (exists($Word::l{uc($_)}));\\n  }\\n\\n  if (exists($args{double})) {\\n    $score *= 2 for(0..$args{double}-1);\\n  }\\n\\n  if (exists($args{triple})) {\\n    $score *= 3 for(0..$args{triple}-1);\\n  }\\n\\n  return $score;\\n}\\n\\n1;"}
103	46	1de0e0c3e51538bee08c41cc	done	haskell	queen-attack	{-# LANGUAGE TupleSections #-}\nmodule Queens\n( canAttack\n, boardString\n) where\n\nimport           Data.Maybe\nimport           Data.List (intersperse)\n\ncanAttack :: (Int, Int) -> (Int, Int) -> Bool\ncanAttack (x, y) (x', y') = x == x' || y == y' || abs (x' - x) == abs (y' - y)\n\nboardString :: Maybe (Int, Int) -> Maybe (Int, Int) -> String\nboardString w b = unlines $ map oneLine [0..7]\n    where oneLine x = intersperse ' ' $ map (charAt x) [0..7]\n          charAt x y = fromMaybe 'O' $ lookup (x, y) toPlace\n          toPlace :: [((Int, Int), Char)]\n          toPlace = maybeToList ((,'B')`fmap`b) ++ maybeToList ((,'W')`fmap`w)	2014-11-16 10:09:26	\N	0	1	2014-11-08 12:58:26	2014-11-08 12:58:26	68	Queens.hs	{"Queens.hs":"{-# LANGUAGE TupleSections #-}\\nmodule Queens\\n( canAttack\\n, boardString\\n) where\\n\\nimport           Data.Maybe\\nimport           Data.List (intersperse)\\n\\ncanAttack :: (Int, Int) -\\u003e (Int, Int) -\\u003e Bool\\ncanAttack (x, y) (x', y') = x == x' || y == y' || abs (x' - x) == abs (y' - y)\\n\\nboardString :: Maybe (Int, Int) -\\u003e Maybe (Int, Int) -\\u003e String\\nboardString w b = unlines $ map oneLine [0..7]\\n    where oneLine x = intersperse ' ' $ map (charAt x) [0..7]\\n          charAt x y = fromMaybe 'O' $ lookup (x, y) toPlace\\n          toPlace :: [((Int, Int), Char)]\\n          toPlace = maybeToList ((,'B')`fmap`b) ++ maybeToList ((,'W')`fmap`w)"}
104	46	ada67b83d3f186e5571760f3	superseded	haskell	sublist	module Sublist where\n\nimport Data.List\n\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Eq,Show)\n\nsublist :: (Eq a) => [a] -> [a] -> Sublist\nsublist xs ys\n  | length xs < length ys\t= isSL xs ys\n  | length xs > length ys\t= switchSL $ isSL ys xs\n  | otherwise\t\t\t= if xs `isPrefixOf` ys then Equal else Unequal\n  where\n    isSL xs ys\t= if xs `isInfixOf` ys then Sublist else Unequal\n    switchSL sl = case sl of\n      Sublist\t-> Superlist\n      Superlist\t-> Sublist\n      _\t\t-> sl	\N	\N	0	1	2014-11-01 12:03:20	2014-11-01 12:03:20	69	Sublist.hs	{"Sublist.hs":"module Sublist where\\n\\nimport Data.List\\n\\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Eq,Show)\\n\\nsublist :: (Eq a) =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist xs ys\\n  | length xs \\u003c length ys\\t= isSL xs ys\\n  | length xs \\u003e length ys\\t= switchSL $ isSL ys xs\\n  | otherwise\\t\\t\\t= if xs `isPrefixOf` ys then Equal else Unequal\\n  where\\n    isSL xs ys\\t= if xs `isInfixOf` ys then Sublist else Unequal\\n    switchSL sl = case sl of\\n      Sublist\\t-\\u003e Superlist\\n      Superlist\\t-\\u003e Sublist\\n      _\\t\\t-\\u003e sl"}
105	46	87d79ed028731d465a1da9d1	done	haskell	sublist	{-# OPTIONS_GHC -Wall #-}\nmodule Sublist where\n\nimport Data.List (isInfixOf)\n\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Eq,Show)\n\nsublist :: (Eq a) => [a] -> [a] -> Sublist\nsublist xs ys = case (compare lx ly) of\n  LT \t-> isSL xs ys\n  GT\t-> switchSL $ isSL ys xs\n  EQ\t-> if xs == ys then Equal else Unequal\n  where\n    isSL xs ys\t= if xs `isInfixOf` ys then Sublist else Unequal\n    switchSL sl = case sl of\n      Sublist\t-> Superlist\n      Superlist\t-> Sublist\n      _\t\t-> sl\n    (lx, ly)\t= (length xs, length ys)\n\n\n-- dakotaalton's version\n-- included, so i find it everytime i come back here\n{-\nsublist :: (Eq a) => [a] -> [a] -> Sublist\nsublist xs ys\n  | xs == ys\t\t= Equal\n  | xs `isInfixOf` ys\t= Sublist\n  | ys `isInfixOf` xs\t= Superlist\n  | otherwise\t\t= Unequal\n-}	2015-03-23 16:40:56	\N	0	2	2015-03-14 05:39:52	2015-03-14 05:39:52	69	Sublist.hs	{"Sublist.hs":"{-# OPTIONS_GHC -Wall #-}\\nmodule Sublist where\\n\\nimport Data.List (isInfixOf)\\n\\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Eq,Show)\\n\\nsublist :: (Eq a) =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist xs ys = case (compare lx ly) of\\n  LT \\t-\\u003e isSL xs ys\\n  GT\\t-\\u003e switchSL $ isSL ys xs\\n  EQ\\t-\\u003e if xs == ys then Equal else Unequal\\n  where\\n    isSL xs ys\\t= if xs `isInfixOf` ys then Sublist else Unequal\\n    switchSL sl = case sl of\\n      Sublist\\t-\\u003e Superlist\\n      Superlist\\t-\\u003e Sublist\\n      _\\t\\t-\\u003e sl\\n    (lx, ly)\\t= (length xs, length ys)\\n\\n\\n-- dakotaalton's version\\n-- included, so i find it everytime i come back here\\n{-\\nsublist :: (Eq a) =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist xs ys\\n  | xs == ys\\t\\t= Equal\\n  | xs `isInfixOf` ys\\t= Sublist\\n  | ys `isInfixOf` xs\\t= Superlist\\n  | otherwise\\t\\t= Unequal\\n-}"}
106	46	65b0cb1438c487b15c362bda	done	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar expression = new RegExp('.{1,'+this.size()+'}',"g")\n\t\t\treturn text.match(expression).join(" ");\t\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	2014-11-14 20:34:11	\N	0	2	2014-11-12 11:59:14	2014-11-12 11:59:14	70	crypto-square.js	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar expression = new RegExp('.{1,'+this.size()+'}',\\"g\\")\\n\\t\\t\\treturn text.match(expression).join(\\" \\");\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
107	46	61ebf813188bb63f159dd0e7	superseded	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar result = "";\n\t\t\tvar rows = this.size();\n\t\t\ttext.split("").map(function map(letter,index){\n\t\t\t\tresult+=letter;\n\t\t\t\tif((index+1)%rows===0)result+=" ";\n\t\t\t});\n\t\t\treturn result.trim();\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	1	2015-03-10 22:51:56	2015-03-10 22:51:56	70	crypto-square.js	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar rows = this.size();\\n\\t\\t\\ttext.split(\\"\\").map(function map(letter,index){\\n\\t\\t\\t\\tresult+=letter;\\n\\t\\t\\t\\tif((index+1)%rows===0)result+=\\" \\";\\n\\t\\t\\t});\\n\\t\\t\\treturn result.trim();\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
382	45	e8650d85e4613450dd5b7f51	pending	go	etl	package transform\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tout := map[string]int{}\n\tfor key_in, val_in := range in {\n\t\tfor _, key_out := range val_in {\n\t\t\tout[strings.ToLower(key_out)] = key_in\n\t\t}\n\t}\n\treturn out\n}	\N	\N	0	2	2015-05-14 12:18:47	2015-05-14 12:18:47	249	transform.go	{"transform.go":"package transform\\n\\nimport \\"strings\\"\\n\\nfunc Transform(in map[int][]string) map[string]int {\\n\\tout := map[string]int{}\\n\\tfor key_in, val_in := range in {\\n\\t\\tfor _, key_out := range val_in {\\n\\t\\t\\tout[strings.ToLower(key_out)] = key_in\\n\\t\\t}\\n\\t}\\n\\treturn out\\n}"}
383	45	8f1aa08757f4d71e6ea4d692	pending	perl5	word-count	package Phrase;\n\nuse strict;\nuse warnings;\n \nsub word_count{\n    my %hash;\n    my $words = shift;\n    map { s/\\W+//g; $hash{$_}++ } split '\\s', lc($words);\n    delete $hash{""};\n    return \\%hash;\n}\n1;	\N	\N	0	1	2015-04-28 05:51:10	2015-04-28 05:51:10	250	Phrase.pm	{"Phrase.pm":"package Phrase;\\n\\nuse strict;\\nuse warnings;\\n \\nsub word_count{\\n    my %hash;\\n    my $words = shift;\\n    map { s/\\\\W+//g; $hash{$_}++ } split '\\\\s', lc($words);\\n    delete $hash{\\"\\"};\\n    return \\\\%hash;\\n}\\n1;"}
384	45	f9d2e76e9e2f0dca71ca7786	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	2015-04-10 09:57:16	2015-04-10 09:57:16	251	/clojure/robot-name/robot_name.clj	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
385	45	c5fef1e669cd468bbfd1f212	pending	python	largest-series-product	def slices(s, n):\r\n\tif n < 0 or n > len(s):\r\n\t\traise ValueError\r\n\tl = [int(c) for c in s]\r\n\tresults = []\r\n\tfor i in xrange(n, len(l)+1):\r\n\t\tresults.append(l[i-n:i])\r\n\treturn results\r\n\r\ndef product(s):\r\n\tresult = 1\r\n\tfor c in s:\r\n\t\tresult *= int(c)\r\n\treturn result\r\n\r\ndef largest_product(s, n):\r\n\tcandidates = [product(slice) for slice in slices(s, n)]\r\n\treturn max(candidates)	\N	\N	0	1	2015-03-19 00:35:10	2015-03-19 00:35:10	252	\\python\\largest-series-product\\series.py	{"\\\\python\\\\largest-series-product\\\\series.py":"def slices(s, n):\\r\\n\\tif n \\u003c 0 or n \\u003e len(s):\\r\\n\\t\\traise ValueError\\r\\n\\tl = [int(c) for c in s]\\r\\n\\tresults = []\\r\\n\\tfor i in xrange(n, len(l)+1):\\r\\n\\t\\tresults.append(l[i-n:i])\\r\\n\\treturn results\\r\\n\\r\\ndef product(s):\\r\\n\\tresult = 1\\r\\n\\tfor c in s:\\r\\n\\t\\tresult *= int(c)\\r\\n\\treturn result\\r\\n\\r\\ndef largest_product(s, n):\\r\\n\\tcandidates = [product(slice) for slice in slices(s, n)]\\r\\n\\treturn max(candidates)"}
386	45	f4b20749118a9ead47cce9ec	superseded	python	word-count	from collections import defaultdict\n\n\ndef word_count(phrase):\n    word_count = defaultdict(lambda: 0)\n\n    for word in phrase.split():\n        word_count[word] += 1\n\n    return word_count	\N	\N	0	1	2015-03-29 22:38:05	2015-03-29 22:38:05	253	wordcount.py	{"wordcount.py":"from collections import defaultdict\\n\\n\\ndef word_count(phrase):\\n    word_count = defaultdict(lambda: 0)\\n\\n    for word in phrase.split():\\n        word_count[word] += 1\\n\\n    return word_count"}
387	45	de7622cb07f7719ad1380853	pending	python	word-count	from collections import Counter\n\n\ndef word_count(phrase):\n    return Counter(phrase.split())	\N	\N	0	2	2015-04-20 17:20:31	2015-04-20 17:20:31	253	wordcount.py	{"wordcount.py":"from collections import Counter\\n\\n\\ndef word_count(phrase):\\n    return Counter(phrase.split())"}
108	46	ca86dde61d031f0f955823b5	done	javascript	beer-song	var Beer = {\n  verse: function(bottles) {\n    switch(bottles) {\n      case 0:\n        return this.zero();\n        break;\n      case 1:\n        return this.one();\n        break;\n      default:\n        return this.other(bottles);\n    }\n  },\n  one: function() {\n    return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n  },\n  zero: function() {\n    return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n  },\n  other: function(bottles) {\n    return this.bottlesToString(bottles) + " of beer on the wall, " + this.bottlesToString(bottles) + " of beer.\\nTake one down and pass it around, " + this.bottlesToString((bottles - 1)).toLowerCase() + " of beer on the wall.\\n";\n  },\n  bottlesToString: function(bottles) {\n    var string = "";\n    switch(bottles) {\n      case 1:\n        string = "1 bottle";\n        break;\n      default:\n        string = bottles + " bottles";\n    }\n    return string;\n  },\n  sing: function(start, end) {\n    var song = [];\n    var lastVerse = end || 0;\n    for(var i = start; i >= lastVerse; i--) {\n      song.push(this.verse(i));\n    }\n    return song.join('\\n');\n  }\n}\n\n\nmodule.exports = Beer	2014-10-29 10:13:01	\N	0	1	2014-10-29 06:42:29	2014-10-29 06:42:29	71	beer-song.js	{"beer-song.js":"var Beer = {\\n  verse: function(bottles) {\\n    switch(bottles) {\\n      case 0:\\n        return this.zero();\\n        break;\\n      case 1:\\n        return this.one();\\n        break;\\n      default:\\n        return this.other(bottles);\\n    }\\n  },\\n  one: function() {\\n    return \\"1 bottle of beer on the wall, 1 bottle of beer.\\\\nTake it down and pass it around, no more bottles of beer on the wall.\\\\n\\";\\n  },\\n  zero: function() {\\n    return \\"No more bottles of beer on the wall, no more bottles of beer.\\\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\";\\n  },\\n  other: function(bottles) {\\n    return this.bottlesToString(bottles) + \\" of beer on the wall, \\" + this.bottlesToString(bottles) + \\" of beer.\\\\nTake one down and pass it around, \\" + this.bottlesToString((bottles - 1)).toLowerCase() + \\" of beer on the wall.\\\\n\\";\\n  },\\n  bottlesToString: function(bottles) {\\n    var string = \\"\\";\\n    switch(bottles) {\\n      case 1:\\n        string = \\"1 bottle\\";\\n        break;\\n      default:\\n        string = bottles + \\" bottles\\";\\n    }\\n    return string;\\n  },\\n  sing: function(start, end) {\\n    var song = [];\\n    var lastVerse = end || 0;\\n    for(var i = start; i \\u003e= lastVerse; i--) {\\n      song.push(this.verse(i));\\n    }\\n    return song.join('\\\\n');\\n  }\\n}\\n\\n\\nmodule.exports = Beer"}
109	46	1601bf0c04ab077da71ba878	pending	ruby	raindrops	require 'prime'\n\nclass Raindrops\n  def self.convert(number)\n    primes = Prime.prime_division(number).flatten\n    if !primes.include?(3) and !primes.include?(5) and !primes.include?(7)\n      number.to_s\n    else\n      word = ""\n      word += "Pling" if primes.include?(3)\n      word += "Plang" if primes.include?(5)\n      word += "Plong" if primes.include?(7)\n      word\n    end\n  end\nend	\N	\N	0	1	2015-03-28 10:47:51	2015-03-28 10:47:51	72	/ruby/raindrops/raindrops.rb	{"/ruby/raindrops/raindrops.rb":"require 'prime'\\n\\nclass Raindrops\\n  def self.convert(number)\\n    primes = Prime.prime_division(number).flatten\\n    if !primes.include?(3) and !primes.include?(5) and !primes.include?(7)\\n      number.to_s\\n    else\\n      word = \\"\\"\\n      word += \\"Pling\\" if primes.include?(3)\\n      word += \\"Plang\\" if primes.include?(5)\\n      word += \\"Plong\\" if primes.include?(7)\\n      word\\n    end\\n  end\\nend"}
110	46	72403028914b96a117568815	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	2014-11-14 15:49:10	\N	0	1	2014-11-06 23:53:53	2014-11-06 23:53:53	73	word_count.scala	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
125	46	6a64f728f7f941e5c865eccb	superseded	csharp	scrabble-score	﻿using System.Collections.Generic;\r\nusing System.Linq;\r\nclass Scrabble\r\n{\r\n    private string word;\r\n\tprivate static readonly Dictionary<char, int> scrabbleDictionary = \r\n        new Dictionary<char, int>()\r\n\t{\r\n\t    {'a', 1}, {'e', 1}, {'i', 1}, {'o', 1}, {'u', 1}, \r\n        {'l', 1}, {'n', 1}, {'r', 1}, {'s', 1}, {'t', 1},\r\n        {'d', 2}, {'g', 2},\r\n        {'b', 3}, {'c', 3}, {'m', 3}, {'p', 3},\r\n        {'f', 4}, {'h', 4}, {'v', 4}, {'w', 4}, {'y', 4},\r\n        {'k', 5},\r\n        {'j', 8}, {'x', 8},\r\n\t    {'q', 10}, {'z', 10}\r\n\t};\r\n    public Scrabble(string givenWord)\r\n    {\r\n        word = givenWord;\r\n    }\r\n    public int Score()\r\n    {\r\n        return Score(word);\r\n    }\r\n    public static int Score(string givenWord)\r\n    {\r\n        return \r\n            string.IsNullOrWhiteSpace(givenWord) ?\r\n            0 :\r\n            givenWord\r\n                .ToLowerInvariant()\r\n                .Where(char.IsLetter)\r\n                .Sum(c => scrabbleDictionary[c]);\r\n    }\r\n}	\N	\N	0	2	2014-11-22 13:11:44	2014-11-22 13:11:44	82	Scrabble.cs	{"Scrabble.cs":"﻿using System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nclass Scrabble\\r\\n{\\r\\n    private string word;\\r\\n\\tprivate static readonly Dictionary\\u003cchar, int\\u003e scrabbleDictionary = \\r\\n        new Dictionary\\u003cchar, int\\u003e()\\r\\n\\t{\\r\\n\\t    {'a', 1}, {'e', 1}, {'i', 1}, {'o', 1}, {'u', 1}, \\r\\n        {'l', 1}, {'n', 1}, {'r', 1}, {'s', 1}, {'t', 1},\\r\\n        {'d', 2}, {'g', 2},\\r\\n        {'b', 3}, {'c', 3}, {'m', 3}, {'p', 3},\\r\\n        {'f', 4}, {'h', 4}, {'v', 4}, {'w', 4}, {'y', 4},\\r\\n        {'k', 5},\\r\\n        {'j', 8}, {'x', 8},\\r\\n\\t    {'q', 10}, {'z', 10}\\r\\n\\t};\\r\\n    public Scrabble(string givenWord)\\r\\n    {\\r\\n        word = givenWord;\\r\\n    }\\r\\n    public int Score()\\r\\n    {\\r\\n        return Score(word);\\r\\n    }\\r\\n    public static int Score(string givenWord)\\r\\n    {\\r\\n        return \\r\\n            string.IsNullOrWhiteSpace(givenWord) ?\\r\\n            0 :\\r\\n            givenWord\\r\\n                .ToLowerInvariant()\\r\\n                .Where(char.IsLetter)\\r\\n                .Sum(c =\\u003e scrabbleDictionary[c]);\\r\\n    }\\r\\n}"}
165	20	96c73e64e3338660dc6fea7a	done	python	roman-numerals	NUMERALS = [\n    (1000, "M"),\n    (900, "CM"),\n    (500, "D"),\n    (400, "CD"),\n    (100, "C"),\n    (90, "XC"),\n    (50, "L"),\n    (40, "XL"),\n    (10, "X"),\n    (9, "IX"),\n    (5, "V"),\n    (4, "IV"),\n    (1, "I")\n]\n\ndef numeral(n):\n    results = []\n    for arabic, roman in NUMERALS:\n        results.append(roman * (n // arabic))\n        n %= arabic\n    return ''.join(results)	2015-04-25 21:36:19	\N	0	3	2015-04-20 08:25:12	2015-04-20 08:25:12	110	roman.py	{"roman.py":"NUMERALS = [\\n    (1000, \\"M\\"),\\n    (900, \\"CM\\"),\\n    (500, \\"D\\"),\\n    (400, \\"CD\\"),\\n    (100, \\"C\\"),\\n    (90, \\"XC\\"),\\n    (50, \\"L\\"),\\n    (40, \\"XL\\"),\\n    (10, \\"X\\"),\\n    (9, \\"IX\\"),\\n    (5, \\"V\\"),\\n    (4, \\"IV\\"),\\n    (1, \\"I\\")\\n]\\n\\ndef numeral(n):\\n    results = []\\n    for arabic, roman in NUMERALS:\\n        results.append(roman * (n // arabic))\\n        n %= arabic\\n    return ''.join(results)"}
166	20	b3cee506bd6d1a5c7498e8ff	superseded	python	roman-numerals	NUMERALS = {\n    1000: "M",\n    900: "CM",\n    500: "D",\n    400: "CD",\n    100: "C",\n    90: "XC",\n    50: "L",\n    40: "XL",\n    10: "X",\n    9: "IX",\n    5: "V",\n    4: "IV",\n    1: "I"\n}\n\ndef RomanNumeral(n):\n    remainder = n\n    results = []\n    for arabic, roman in reversed(sorted(NUMERALS.items())):\n        results.append(roman * int(remainder / arabic))\n        remainder = remainder % arabic\n    return str.join('', results)	\N	\N	0	1	2015-04-28 08:40:30	2015-04-28 08:40:30	110	roman.py	{"roman.py":"NUMERALS = {\\n    1000: \\"M\\",\\n    900: \\"CM\\",\\n    500: \\"D\\",\\n    400: \\"CD\\",\\n    100: \\"C\\",\\n    90: \\"XC\\",\\n    50: \\"L\\",\\n    40: \\"XL\\",\\n    10: \\"X\\",\\n    9: \\"IX\\",\\n    5: \\"V\\",\\n    4: \\"IV\\",\\n    1: \\"I\\"\\n}\\n\\ndef RomanNumeral(n):\\n    remainder = n\\n    results = []\\n    for arabic, roman in reversed(sorted(NUMERALS.items())):\\n        results.append(roman * int(remainder / arabic))\\n        remainder = remainder % arabic\\n    return str.join('', results)"}
111	46	f7ab093898a19e5036130370	done	ruby	secret-handshake	class SecretHandshake\n\n  HANDSHAKES = { \n                  1     => "wink",\n                  10    => "double blink",\n                  100   => "close your eyes",\n                  1000  => "jump"\n  }\n\n  attr_reader :decimal_number\n\n  def initialize decimal_number\n    @decimal_number = decimal_number\n  end\n\n  def commands\n    if decimal_number.is_a? Integer\n      secret_handshakes\n    else\n      []\n    end\n  end\n\nprivate\n\n  def binary_number\n    decimal_number.to_s 2\n  end\n\n  def translator\n    result = Array.new\n\n    binary_number.chars.reverse.each_with_index do |digit, index|\n      result << HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\n    end\n\n    result.compact\n  end\n\n  def secret_handshakes\n    if binary_number.length == 5\n      translator.reverse\n    else\n      translator\n    end\n  end\n\nend	2015-01-25 06:36:56	\N	0	1	2015-01-20 10:06:43	2015-01-20 10:06:43	74	/ruby/secret-handshake/secret_handshake.rb	{"/ruby/secret-handshake/secret_handshake.rb":"class SecretHandshake\\n\\n  HANDSHAKES = { \\n                  1     =\\u003e \\"wink\\",\\n                  10    =\\u003e \\"double blink\\",\\n                  100   =\\u003e \\"close your eyes\\",\\n                  1000  =\\u003e \\"jump\\"\\n  }\\n\\n  attr_reader :decimal_number\\n\\n  def initialize decimal_number\\n    @decimal_number = decimal_number\\n  end\\n\\n  def commands\\n    if decimal_number.is_a? Integer\\n      secret_handshakes\\n    else\\n      []\\n    end\\n  end\\n\\nprivate\\n\\n  def binary_number\\n    decimal_number.to_s 2\\n  end\\n\\n  def translator\\n    result = Array.new\\n\\n    binary_number.chars.reverse.each_with_index do |digit, index|\\n      result \\u003c\\u003c HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\\n    end\\n\\n    result.compact\\n  end\\n\\n  def secret_handshakes\\n    if binary_number.length == 5\\n      translator.reverse\\n    else\\n      translator\\n    end\\n  end\\n\\nend"}
112	46	4632707839d9ddc444fbbfeb	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	2014-11-22 00:26:53	2014-11-22 00:26:53	75	year.py	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
113	46	048fc472a39f90e6e028d0ee	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	2015-04-04 04:28:02	2015-04-04 04:28:02	75	year.py	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
114	46	8199537d3f70fcb3ba3689e6	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	2015-04-09 06:10:43	\N	0	3	2015-04-05 23:19:29	2015-04-05 23:19:29	75	year.py	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
115	46	5687aecb1c6b63fd37ba27f4	done	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Leap\r\n{\r\n    public class Year\r\n    {\r\n        public static bool IsLeap(int year)\r\n        {\r\n            return year%4 == 0 && year%100 != 0 || year%400 == 0;\r\n        }\r\n    }\r\n}	2015-01-24 23:37:38	\N	0	1	2015-01-13 11:59:00	2015-01-13 11:59:00	76	\\csharp\\leap\\Year.cs	{"\\\\csharp\\\\leap\\\\Year.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace Leap\\r\\n{\\r\\n    public class Year\\r\\n    {\\r\\n        public static bool IsLeap(int year)\\r\\n        {\\r\\n            return year%4 == 0 \\u0026\\u0026 year%100 != 0 || year%400 == 0;\\r\\n        }\\r\\n    }\\r\\n}"}
116	46	7ce33352b39de25b9f9206ce	done	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Clock (UTCTime,addUTCTime)\n\nfromDay :: UTCTime -> UTCTime\nfromDay t = addUTCTime (10 ^ (9 :: Int)) t	2015-02-26 07:38:18	\N	0	2	2015-02-15 18:34:22	2015-02-15 18:34:22	77	/haskell/gigasecond/Gigasecond.hs	{"/haskell/gigasecond/Gigasecond.hs":"module Gigasecond (fromDay) where\\n\\nimport Data.Time.Clock (UTCTime,addUTCTime)\\n\\nfromDay :: UTCTime -\\u003e UTCTime\\nfromDay t = addUTCTime (10 ^ (9 :: Int)) t"}
117	46	54047295fbbd02b762c83920	superseded	haskell	gigasecond	module Gigasecond (fromDay) where\n\nimport Data.Time.Clock (UTCTime,addUTCTime)\n\nfromDay :: UTCTime -> UTCTime\nfromDay t = addUTCTime (10 ^ 9) t	\N	\N	0	1	2015-03-01 13:31:23	2015-03-01 13:31:23	77	/haskell/gigasecond/Gigasecond.hs	{"/haskell/gigasecond/Gigasecond.hs":"module Gigasecond (fromDay) where\\n\\nimport Data.Time.Clock (UTCTime,addUTCTime)\\n\\nfromDay :: UTCTime -\\u003e UTCTime\\nfromDay t = addUTCTime (10 ^ 9) t"}
118	46	c028dd7f89dc5add49e7c1c8	pending	python	grains	def on_square(n):\n    return 1 << (n - 1)\n\ndef total_after(n):\n    return (1 << n) - 1	\N	\N	0	2	2015-01-14 19:04:27	2015-01-14 19:04:27	78	grains.py	{"grains.py":"def on_square(n):\\n    return 1 \\u003c\\u003c (n - 1)\\n\\ndef total_after(n):\\n    return (1 \\u003c\\u003c n) - 1"}
119	46	e5e66f87f4436116c0789a76	superseded	python	grains	def on_square(n):\n    return 1 << (n - 1)\n\ndef total_after(n):\n    return 1 << n - 1	\N	\N	0	1	2015-01-17 09:42:39	2015-01-17 09:42:39	78	grains.py	{"grains.py":"def on_square(n):\\n    return 1 \\u003c\\u003c (n - 1)\\n\\ndef total_after(n):\\n    return 1 \\u003c\\u003c n - 1"}
120	46	da6b39d50dd130649d7cf916	superseded	csharp	sum-of-multiples	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ExercismCSharp.sum_of_multiples\r\n{\r\n    class SumOfMultiples\r\n    {\r\n        List<int> multiples;\r\n\r\n        // defaul constructor\r\n        public SumOfMultiples()\r\n        {\r\n            multiples = new List<int> { 3, 5 };\r\n        }\r\n\r\n        public SumOfMultiples(List<int> multiples_)\r\n        {\r\n            multiples = multiples_;\r\n        }\r\n\r\n        public int To(int max)\r\n        {\r\n            int sum = 0;\r\n\r\n            foreach (int multiple in multiples)\r\n            {\r\n                for (int i = 0; i < max; i += multiple)\r\n                    sum += multiple;\r\n            }\r\n            \r\n            return sum;\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-11-20 22:17:30	2014-11-20 22:17:30	79	SumOfMultiples.cs	{"SumOfMultiples.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace ExercismCSharp.sum_of_multiples\\r\\n{\\r\\n    class SumOfMultiples\\r\\n    {\\r\\n        List\\u003cint\\u003e multiples;\\r\\n\\r\\n        // defaul constructor\\r\\n        public SumOfMultiples()\\r\\n        {\\r\\n            multiples = new List\\u003cint\\u003e { 3, 5 };\\r\\n        }\\r\\n\\r\\n        public SumOfMultiples(List\\u003cint\\u003e multiples_)\\r\\n        {\\r\\n            multiples = multiples_;\\r\\n        }\\r\\n\\r\\n        public int To(int max)\\r\\n        {\\r\\n            int sum = 0;\\r\\n\\r\\n            foreach (int multiple in multiples)\\r\\n            {\\r\\n                for (int i = 0; i \\u003c max; i += multiple)\\r\\n                    sum += multiple;\\r\\n            }\\r\\n            \\r\\n            return sum;\\r\\n        }\\r\\n    }\\r\\n}\\r"}
121	46	4400cc6547ca39b0964e8c94	done	csharp	sum-of-multiples	﻿using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ExercismCSharp.sum_of_multiples\r\n{\r\n    class SumOfMultiples\r\n    {\r\n        List<int> multiples;\r\n\r\n        // default constructor\r\n        public SumOfMultiples() : this(new List<int> { 3, 5 }) { }\r\n\r\n\r\n        public SumOfMultiples(List<int> multiples_)\r\n        {\r\n            multiples = multiples_;\r\n        }\r\n\r\n        public int To(int max)\r\n        {\r\n            int sum = 0;\r\n\r\n            for (int i = 0; i < max; i++)\r\n                foreach (int multiple in multiples)\r\n                {\r\n                    if (i % multiple == 0)\r\n                    {\r\n                        sum += i;\r\n                        break;\r\n                    }\r\n                }\r\n            return sum;\r\n        }\r\n    }\r\n}	2015-02-24 05:25:31	\N	0	2	2015-02-22 06:58:59	2015-02-22 06:58:59	79	\\csharp\\sum-of-multiples\\SumOfMultiples.cs	{"\\\\csharp\\\\sum-of-multiples\\\\SumOfMultiples.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\n\\r\\nnamespace ExercismCSharp.sum_of_multiples\\r\\n{\\r\\n    class SumOfMultiples\\r\\n    {\\r\\n        List\\u003cint\\u003e multiples;\\r\\n\\r\\n        // default constructor\\r\\n        public SumOfMultiples() : this(new List\\u003cint\\u003e { 3, 5 }) { }\\r\\n\\r\\n\\r\\n        public SumOfMultiples(List\\u003cint\\u003e multiples_)\\r\\n        {\\r\\n            multiples = multiples_;\\r\\n        }\\r\\n\\r\\n        public int To(int max)\\r\\n        {\\r\\n            int sum = 0;\\r\\n\\r\\n            for (int i = 0; i \\u003c max; i++)\\r\\n                foreach (int multiple in multiples)\\r\\n                {\\r\\n                    if (i % multiple == 0)\\r\\n                    {\\r\\n                        sum += i;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            return sum;\\r\\n        }\\r\\n    }\\r\\n}"}
122	46	23c38c061b6d710ca99cb348	done	ruby	kindergarten-garden	class Garden\n\n  PLANTS = {\n    radishes:  "R",\n    clover: "C",\n    grass: "G",\n    violets: "V"\n  }\n\n  DEFAULT_STUDENTS = ["alice", "bob", "charlie", "david", "eve", "fred", "ginny", "harriet", "ileana", "joseph", "kincaid", "larry"]\n\n  CUPS_PER_STUDENT = 2\n\n  def initialize(diagram, students=DEFAULT_STUDENTS)\n    @diagram  = diagram.split(/\\n/)\n    @students = students.map(&:downcase).sort\n    create_student_methods(@diagram, @students)\n  end\n\n  private\n  def create_student_methods(diagram, students)\n    (class << self; self; end).class_eval do\n      students.each_with_index do |student, i|\n        define_method student do \n          diagram.map do |row|\n            row.chars[(i*CUPS_PER_STUDENT..i*CUPS_PER_STUDENT+1)].map do |plant|\n              PLANTS.key(plant)\n            end\n          end.flatten\n        end\n      end\n    end\n  end\n\nend	2014-11-23 21:15:43	\N	0	1	2014-11-16 19:22:32	2014-11-16 19:22:32	80	/ruby/kindergarten-garden/garden.rb	{"/ruby/kindergarten-garden/garden.rb":"class Garden\\n\\n  PLANTS = {\\n    radishes:  \\"R\\",\\n    clover: \\"C\\",\\n    grass: \\"G\\",\\n    violets: \\"V\\"\\n  }\\n\\n  DEFAULT_STUDENTS = [\\"alice\\", \\"bob\\", \\"charlie\\", \\"david\\", \\"eve\\", \\"fred\\", \\"ginny\\", \\"harriet\\", \\"ileana\\", \\"joseph\\", \\"kincaid\\", \\"larry\\"]\\n\\n  CUPS_PER_STUDENT = 2\\n\\n  def initialize(diagram, students=DEFAULT_STUDENTS)\\n    @diagram  = diagram.split(/\\\\n/)\\n    @students = students.map(\\u0026:downcase).sort\\n    create_student_methods(@diagram, @students)\\n  end\\n\\n  private\\n  def create_student_methods(diagram, students)\\n    (class \\u003c\\u003c self; self; end).class_eval do\\n      students.each_with_index do |student, i|\\n        define_method student do \\n          diagram.map do |row|\\n            row.chars[(i*CUPS_PER_STUDENT..i*CUPS_PER_STUDENT+1)].map do |plant|\\n              PLANTS.key(plant)\\n            end\\n          end.flatten\\n        end\\n      end\\n    end\\n  end\\n\\nend"}
126	46	2e6cf172361f3ac374252370	done	csharp	scrabble-score	﻿using System.Collections.Generic;\r\nusing System.Linq;\r\nclass Scrabble\r\n{\r\n    private string word;\r\n\tprivate static readonly Dictionary<char, int> scrabbleDictionary = \r\n        new Dictionary<char, int>()\r\n\t{\r\n\t    {'a', 1}, {'e', 1}, {'i', 1}, {'o', 1}, {'u', 1}, \r\n        {'l', 1}, {'n', 1}, {'r', 1}, {'s', 1}, {'t', 1},\r\n        {'d', 2}, {'g', 2},\r\n        {'b', 3}, {'c', 3}, {'m', 3}, {'p', 3},\r\n        {'f', 4}, {'h', 4}, {'v', 4}, {'w', 4}, {'y', 4},\r\n        {'k', 5},\r\n        {'j', 8}, {'x', 8},\r\n\t    {'q', 10}, {'z', 10}\r\n\t};\r\n    public Scrabble(string givenWord)\r\n    {\r\n        word = givenWord;\r\n    }\r\n    public int Score()\r\n    {\r\n        return Score(word);\r\n    }\r\n    public static int Score(string givenWord)\r\n    {\r\n        if (string.IsNullOrWhiteSpace(givenWord))\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return givenWord\r\n                    .ToLowerInvariant()\r\n                    .Where(char.IsLetter)\r\n                    .Sum(c => scrabbleDictionary[c]);\r\n        }\r\n    }\r\n}	2014-12-16 08:13:44	\N	0	3	2014-12-13 09:01:12	2014-12-13 09:01:12	82	Scrabble.cs	{"Scrabble.cs":"﻿using System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nclass Scrabble\\r\\n{\\r\\n    private string word;\\r\\n\\tprivate static readonly Dictionary\\u003cchar, int\\u003e scrabbleDictionary = \\r\\n        new Dictionary\\u003cchar, int\\u003e()\\r\\n\\t{\\r\\n\\t    {'a', 1}, {'e', 1}, {'i', 1}, {'o', 1}, {'u', 1}, \\r\\n        {'l', 1}, {'n', 1}, {'r', 1}, {'s', 1}, {'t', 1},\\r\\n        {'d', 2}, {'g', 2},\\r\\n        {'b', 3}, {'c', 3}, {'m', 3}, {'p', 3},\\r\\n        {'f', 4}, {'h', 4}, {'v', 4}, {'w', 4}, {'y', 4},\\r\\n        {'k', 5},\\r\\n        {'j', 8}, {'x', 8},\\r\\n\\t    {'q', 10}, {'z', 10}\\r\\n\\t};\\r\\n    public Scrabble(string givenWord)\\r\\n    {\\r\\n        word = givenWord;\\r\\n    }\\r\\n    public int Score()\\r\\n    {\\r\\n        return Score(word);\\r\\n    }\\r\\n    public static int Score(string givenWord)\\r\\n    {\\r\\n        if (string.IsNullOrWhiteSpace(givenWord))\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            return givenWord\\r\\n                    .ToLowerInvariant()\\r\\n                    .Where(char.IsLetter)\\r\\n                    .Sum(c =\\u003e scrabbleDictionary[c]);\\r\\n        }\\r\\n    }\\r\\n}"}
127	46	8f3a0fb14dc2a500a8d9e856	done	objective-c	bob	//\n//  Bob.m\n//  Bob\n//\n//  Created by Pascal Batty on 31/12/2014.\n//  Copyright (c) 2014 Soat. All rights reserved.\n//\n\n#import "Bob.h"\n\n\n@interface NSString(Bob)\n\n- (BOOL)isShout;\n- (BOOL)isQuestion;\n- (BOOL)isSilence;\n\n@end\n\n@implementation NSString(Bob)\n\n\n- (BOOL)containsLetters {\n    return ([self rangeOfCharacterFromSet:[NSCharacterSet letterCharacterSet]].location != NSNotFound);\n}\n- (BOOL)isShout {\n    return ([self containsLetters] && [self isEqualToString:[self uppercaseString]]);\n}\n- (BOOL)isQuestion {\n    return [self hasSuffix:@"?"];\n}\n- (BOOL)isSilence {\n    return [self isEqualToString:@""];\n}\n@end\n\n@implementation Bob\n\nstatic NSString * const BobResponseToSilence = @"Fine, be that way.";\nstatic NSString * const BobResponseToShouting = @"Woah, chill out!";\nstatic NSString * const BobResponseToQuestion = @"Sure.";\nstatic NSString * const BobResponseToAnythingElse = @"Whatever.";\n\n\n- (NSString *)hey:(NSString *)input {\n    NSString *sanitizedInput = [Bob sanitizeInput:input];\n    \n    if ([sanitizedInput isShout]) {\n        return BobResponseToShouting;\n    }\n    else if ([sanitizedInput isQuestion]) {\n        return BobResponseToQuestion;\n    }\n    else if ([sanitizedInput isSilence]) {\n        return BobResponseToSilence;\n    }\n    return BobResponseToAnythingElse;\n}\n\n+ (NSString *)sanitizeInput:(NSString *)input {\n    return [input stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n}\n\n@end	2015-04-12 15:21:34	\N	0	1	2015-04-01 15:49:53	2015-04-01 15:49:53	83	/objective-c/bob/Bob.m	{"/objective-c/bob/Bob.m":"//\\n//  Bob.m\\n//  Bob\\n//\\n//  Created by Pascal Batty on 31/12/2014.\\n//  Copyright (c) 2014 Soat. All rights reserved.\\n//\\n\\n#import \\"Bob.h\\"\\n\\n\\n@interface NSString(Bob)\\n\\n- (BOOL)isShout;\\n- (BOOL)isQuestion;\\n- (BOOL)isSilence;\\n\\n@end\\n\\n@implementation NSString(Bob)\\n\\n\\n- (BOOL)containsLetters {\\n    return ([self rangeOfCharacterFromSet:[NSCharacterSet letterCharacterSet]].location != NSNotFound);\\n}\\n- (BOOL)isShout {\\n    return ([self containsLetters] \\u0026\\u0026 [self isEqualToString:[self uppercaseString]]);\\n}\\n- (BOOL)isQuestion {\\n    return [self hasSuffix:@\\"?\\"];\\n}\\n- (BOOL)isSilence {\\n    return [self isEqualToString:@\\"\\"];\\n}\\n@end\\n\\n@implementation Bob\\n\\nstatic NSString * const BobResponseToSilence = @\\"Fine, be that way.\\";\\nstatic NSString * const BobResponseToShouting = @\\"Woah, chill out!\\";\\nstatic NSString * const BobResponseToQuestion = @\\"Sure.\\";\\nstatic NSString * const BobResponseToAnythingElse = @\\"Whatever.\\";\\n\\n\\n- (NSString *)hey:(NSString *)input {\\n    NSString *sanitizedInput = [Bob sanitizeInput:input];\\n    \\n    if ([sanitizedInput isShout]) {\\n        return BobResponseToShouting;\\n    }\\n    else if ([sanitizedInput isQuestion]) {\\n        return BobResponseToQuestion;\\n    }\\n    else if ([sanitizedInput isSilence]) {\\n        return BobResponseToSilence;\\n    }\\n    return BobResponseToAnythingElse;\\n}\\n\\n+ (NSString *)sanitizeInput:(NSString *)input {\\n    return [input stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\\n}\\n\\n@end"}
128	48	81ad26f24e6b37e6eba59abe	done	javascript	hamming	function compute (strand_1, strand_2){\n\n  // make each strand an array\n  // compare the values at each position\n  // Add one to a counter, for each position where the values are different\n\n  var strand_1_array = strand_1.split("");\n  var strand_2_array = strand_2.split("");\n  var counter = 0;\n  if (strand_1_array.length !== strand_2_array.length) {\n    throw 'DNA strands must be of equal length.' ;\n  }  else {\n\n    for (var i = 0; i < strand_1_array.length; i++) {\n      if (strand_1_array[i] !== strand_2_array[i])\n        counter++;\n    }\n  }\n  return counter;\n}\n\n\n\nexports.compute = compute;	2015-05-14 10:12:59	\N	0	1	2015-05-13 14:03:17	2015-05-13 14:03:17	84	hamming.js	{"hamming.js":"function compute (strand_1, strand_2){\\n\\n  // make each strand an array\\n  // compare the values at each position\\n  // Add one to a counter, for each position where the values are different\\n\\n  var strand_1_array = strand_1.split(\\"\\");\\n  var strand_2_array = strand_2.split(\\"\\");\\n  var counter = 0;\\n  if (strand_1_array.length !== strand_2_array.length) {\\n    throw 'DNA strands must be of equal length.' ;\\n  }  else {\\n\\n    for (var i = 0; i \\u003c strand_1_array.length; i++) {\\n      if (strand_1_array[i] !== strand_2_array[i])\\n        counter++;\\n    }\\n  }\\n  return counter;\\n}\\n\\n\\n\\nexports.compute = compute;"}
134	49	0d381b59e11a44fdddc92d51	pending	python	atbash-cipher	from collections import defaultdict\nimport string\n\ncipher = defaultdict(str, zip(\n    string.lowercase + string.digits,\n    string.lowercase[::-1] + string.digits\n))\n\ndef decode(message):\n    return ''.join(cipher[letter.lower()] for letter in message)\n\ndef encode(message):\n    def whitespace(index):\n        if index > 0 and index % 5 == 0:\n            return ' '\n        return ''\n\n    return ''.join(\n        whitespace(index) + letter\n        for index, letter\n        in enumerate(decode(message))\n    )	\N	\N	0	1	2015-04-17 15:49:21	2015-04-17 15:49:21	89	atbash_cipher.py	{"atbash_cipher.py":"from collections import defaultdict\\nimport string\\n\\ncipher = defaultdict(str, zip(\\n    string.lowercase + string.digits,\\n    string.lowercase[::-1] + string.digits\\n))\\n\\ndef decode(message):\\n    return ''.join(cipher[letter.lower()] for letter in message)\\n\\ndef encode(message):\\n    def whitespace(index):\\n        if index \\u003e 0 and index % 5 == 0:\\n            return ' '\\n        return ''\\n\\n    return ''.join(\\n        whitespace(index) + letter\\n        for index, letter\\n        in enumerate(decode(message))\\n    )"}
135	49	00a2c701151cb5eabd868e3f	superseded	python	hamming	"""The Hamming distance."""\n\nfrom itertools import izip_longest\n\n\ndef hamming(string1, string2):\n    """Return the number of positions where the symbols are different."""\n    return sum(\n        sym1 != sym2\n        for sym1, sym2 in izip_longest(string1, string2, fillvalue=" ")\n    )	\N	\N	0	1	2015-02-26 02:29:26	2015-02-26 02:29:26	90	hamming.py	{"hamming.py":"\\"\\"\\"The Hamming distance.\\"\\"\\"\\n\\nfrom itertools import izip_longest\\n\\n\\ndef hamming(string1, string2):\\n    \\"\\"\\"Return the number of positions where the symbols are different.\\"\\"\\"\\n    return sum(\\n        sym1 != sym2\\n        for sym1, sym2 in izip_longest(string1, string2, fillvalue=\\" \\")\\n    )"}
136	49	8231d2b3b282fd83006236c6	pending	python	hamming	"""The Hamming distance."""\n\n\ndef distance(string1, string2):\n    """Return the number of positions where the symbols are different."""\n    if len(string1) != len(string2):\n        raise ValueError(string1, string2)\n\n    return sum(1 for sym1, sym2 in zip(string1, string2) if sym1 != sym2)	\N	\N	0	2	2015-02-26 06:48:17	2015-02-26 06:48:17	90	hamming.py	{"hamming.py":"\\"\\"\\"The Hamming distance.\\"\\"\\"\\n\\n\\ndef distance(string1, string2):\\n    \\"\\"\\"Return the number of positions where the symbols are different.\\"\\"\\"\\n    if len(string1) != len(string2):\\n        raise ValueError(string1, string2)\\n\\n    return sum(1 for sym1, sym2 in zip(string1, string2) if sym1 != sym2)"}
137	26	a0e074fd3feabfb83ea0d738	superseded	swift	word-count	import Foundation\n\nstruct WordCount {\n    let words: [String]\n    \n    init(words: String) {\n        let badCharacters = NSCharacterSet(charactersInString: " abcdefghijklmnopqrstuvwxyz1234567890").invertedSet\n        let array = join("", words.lowercaseString.componentsSeparatedByCharactersInSet(badCharacters)).componentsSeparatedByCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n        \n        // workaround to remove empty elements\n        var newArray = [String]()\n        for e in array {\n            if e != "" {\n                newArray.append(e)\n            }\n        }\n        \n        self.words = newArray\n    }\n    \n    func count() -> [String: Int] {\n        var dict = [String: Int]()\n        \n        for word in words {\n            if dict[word] == nil {\n                // add new entry\n                dict[word] = 1\n                \n            } else {\n                // increment existing entry\n                dict[word] = dict[word]! + 1\n            }\n        }\n        \n        return dict\n    }\n}	\N	\N	0	1	2014-11-22 13:41:57	2014-11-22 13:41:57	91	WordCount.swift	{"WordCount.swift":"import Foundation\\n\\nstruct WordCount {\\n    let words: [String]\\n    \\n    init(words: String) {\\n        let badCharacters = NSCharacterSet(charactersInString: \\" abcdefghijklmnopqrstuvwxyz1234567890\\").invertedSet\\n        let array = join(\\"\\", words.lowercaseString.componentsSeparatedByCharactersInSet(badCharacters)).componentsSeparatedByCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\\n        \\n        // workaround to remove empty elements\\n        var newArray = [String]()\\n        for e in array {\\n            if e != \\"\\" {\\n                newArray.append(e)\\n            }\\n        }\\n        \\n        self.words = newArray\\n    }\\n    \\n    func count() -\\u003e [String: Int] {\\n        var dict = [String: Int]()\\n        \\n        for word in words {\\n            if dict[word] == nil {\\n                // add new entry\\n                dict[word] = 1\\n                \\n            } else {\\n                // increment existing entry\\n                dict[word] = dict[word]! + 1\\n            }\\n        }\\n        \\n        return dict\\n    }\\n}"}
138	26	7a7e4dbb5825c97e24a94cf4	superseded	swift	word-count	import Foundation\n\nstruct WordCount {\n    let words: [String]\n    \n    init(words: String) {\n        let badCharacters = NSCharacterSet(charactersInString: " abcdefghijklmnopqrstuvwxyz1234567890").invertedSet\n        \n        // remove everything that is not a letter or digit and split into array of words\n        self.words = join("", words.lowercaseString.componentsSeparatedByCharactersInSet(badCharacters)).stringByReplacingOccurrencesOfString("\\\\s+", withString: " ", options: .RegularExpressionSearch).componentsSeparatedByString(" ")\n    }\n    \n    func count() -> [String: Int] {\n        var dict = [String: Int]()\n        \n        for word in words {\n            if dict[word] == nil {\n                // add new entry\n                dict[word] = 1\n                \n            } else {\n                // increment existing entry\n                dict[word] = dict[word]! + 1\n            }\n        }\n        \n        return dict\n    }\n}	\N	\N	0	2	2015-03-30 01:09:52	2015-03-30 01:09:52	91	WordCount.swift	{"WordCount.swift":"import Foundation\\n\\nstruct WordCount {\\n    let words: [String]\\n    \\n    init(words: String) {\\n        let badCharacters = NSCharacterSet(charactersInString: \\" abcdefghijklmnopqrstuvwxyz1234567890\\").invertedSet\\n        \\n        // remove everything that is not a letter or digit and split into array of words\\n        self.words = join(\\"\\", words.lowercaseString.componentsSeparatedByCharactersInSet(badCharacters)).stringByReplacingOccurrencesOfString(\\"\\\\\\\\s+\\", withString: \\" \\", options: .RegularExpressionSearch).componentsSeparatedByString(\\" \\")\\n    }\\n    \\n    func count() -\\u003e [String: Int] {\\n        var dict = [String: Int]()\\n        \\n        for word in words {\\n            if dict[word] == nil {\\n                // add new entry\\n                dict[word] = 1\\n                \\n            } else {\\n                // increment existing entry\\n                dict[word] = dict[word]! + 1\\n            }\\n        }\\n        \\n        return dict\\n    }\\n}"}
145	26	964361b26c78807668aae9db	pending	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Data.List.Split (splitPlaces)\n\nareaCode :: String -> String\nareaCode = take 3\n\nnumber :: String -> String\nnumber = sanitizeNumber . filter isDigit\n\nsanitizeNumber :: String -> String\nsanitizeNumber n\n  | numberLength == 11 && head n == '1' = tail n\n  | numberLength == 10                  = n\n  | otherwise                           = "0000000000"\n  where numberLength = length n\n\nprettyPrint :: String -> String\nprettyPrint = formatNumberParts . splitPlaces [3, 3, 4] . number\n\nformatNumberParts :: [String] -> String\nformatNumberParts (a:b:c:[]) = "(" ++ a ++ ") " ++ b ++ "-" ++ c	\N	\N	0	2	2015-04-21 08:24:29	2015-04-21 08:24:29	94	phone-number.hs	{"phone-number.hs":"module Phone (areaCode, number, prettyPrint) where\\n\\nimport Data.Char (isDigit)\\nimport Data.List.Split (splitPlaces)\\n\\nareaCode :: String -\\u003e String\\nareaCode = take 3\\n\\nnumber :: String -\\u003e String\\nnumber = sanitizeNumber . filter isDigit\\n\\nsanitizeNumber :: String -\\u003e String\\nsanitizeNumber n\\n  | numberLength == 11 \\u0026\\u0026 head n == '1' = tail n\\n  | numberLength == 10                  = n\\n  | otherwise                           = \\"0000000000\\"\\n  where numberLength = length n\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint = formatNumberParts . splitPlaces [3, 3, 4] . number\\n\\nformatNumberParts :: [String] -\\u003e String\\nformatNumberParts (a:b:c:[]) = \\"(\\" ++ a ++ \\") \\" ++ b ++ \\"-\\" ++ c"}
139	26	ba4b18c5bdb407c6d8ce517d	pending	swift	word-count	import Foundation\n\nstruct WordCount {\n    let words: [String]\n    \n    init(words: String) {\n        let badCharacters = NSCharacterSet(charactersInString: " abcdefghijklmnopqrstuvwxyz1234567890").invertedSet\n        \n        self.words = words.lowercaseString.withoutCharacters(inSet: badCharacters).split(at: " ", withEmptyElements: false)\n    }\n    \n    func count() -> [String: Int] {\n        var dict = [String: Int]()\n        \n        for word in words {\n            if let count = dict[word] {\n                // increment existing entry\n                dict[word] = count + 1\n            \n            } else {\n                // add new entry\n                dict[word] = 1\n            }\n        }\n        \n        return dict\n    }\n}\n\nextension String {\n    func withoutCharacters(inSet set: NSCharacterSet) -> String {\n        return self.componentsSeparatedByCharactersInSet(set).reduce("", +)\n    }\n    \n    func split(at seperator: String, withEmptyElements allowEmpty: Bool = true) -> [String] {\n        let components = self.componentsSeparatedByString(seperator)\n        return allowEmpty ? components : components.filter({ $0 != "" })\n    }\n}	\N	\N	0	3	2015-05-28 22:12:40	2015-05-28 22:12:40	91	WordCount.swift	{"WordCount.swift":"import Foundation\\n\\nstruct WordCount {\\n    let words: [String]\\n    \\n    init(words: String) {\\n        let badCharacters = NSCharacterSet(charactersInString: \\" abcdefghijklmnopqrstuvwxyz1234567890\\").invertedSet\\n        \\n        self.words = words.lowercaseString.withoutCharacters(inSet: badCharacters).split(at: \\" \\", withEmptyElements: false)\\n    }\\n    \\n    func count() -\\u003e [String: Int] {\\n        var dict = [String: Int]()\\n        \\n        for word in words {\\n            if let count = dict[word] {\\n                // increment existing entry\\n                dict[word] = count + 1\\n            \\n            } else {\\n                // add new entry\\n                dict[word] = 1\\n            }\\n        }\\n        \\n        return dict\\n    }\\n}\\n\\nextension String {\\n    func withoutCharacters(inSet set: NSCharacterSet) -\\u003e String {\\n        return self.componentsSeparatedByCharactersInSet(set).reduce(\\"\\", +)\\n    }\\n    \\n    func split(at seperator: String, withEmptyElements allowEmpty: Bool = true) -\\u003e [String] {\\n        let components = self.componentsSeparatedByString(seperator)\\n        return allowEmpty ? components : components.filter({ $0 != \\"\\" })\\n    }\\n}"}
140	26	9ee8d91bb98cadb26d68ae48	superseded	ruby	gigasecond	class Gigasecond\n  \n  GIGASECONDS = 1000000000\n  \n  def self.from(date)\n    \n    seconds = date.strftime('%s').to_i\n    future = seconds + GIGASECONDS\n    \n    Time.at(future).to_date\n           \n  end\n  \nend	\N	\N	0	1	2014-10-25 05:45:51	2014-10-25 05:45:51	92	gigasecond.rb	{"gigasecond.rb":"class Gigasecond\\n  \\n  GIGASECONDS = 1000000000\\n  \\n  def self.from(date)\\n    \\n    seconds = date.strftime('%s').to_i\\n    future = seconds + GIGASECONDS\\n    \\n    Time.at(future).to_date\\n           \\n  end\\n  \\nend"}
141	26	67a309170334851e790b197d	pending	ruby	gigasecond	class Gigasecond\n  \n  GIGASECONDS = 1000000000\n  \n  def self.from(date)\n    (date.to_time + GIGASECONDS).to_date\n  end\n  \nend	\N	\N	0	2	2015-01-30 05:33:48	2015-01-30 05:33:48	92	gigasecond.rb	{"gigasecond.rb":"class Gigasecond\\n  \\n  GIGASECONDS = 1000000000\\n  \\n  def self.from(date)\\n    (date.to_time + GIGASECONDS).to_date\\n  end\\n  \\nend"}
142	26	77f866c60a9674fdbc76531e	superseded	go	leap	// Package leap exports GetValidYear which returns a valid year or zero,\r\n// and IsLeapYear which returns true if a validated year is a leap year.\r\npackage leap\r\n\r\nimport (\r\n\t"bufio"\r\n\t"fmt"\r\n\t"math"\r\n\t"os"\r\n\t"strconv"\r\n)\r\n\r\nconst TestVersion = 1\r\n\r\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\r\n// Returns validated year or 0 which indicates an error\r\n// Non-zero return values may be safely passed to IsLeapYear\r\nfunc GetValidYear() (year int) {\r\n\treader := bufio.NewReader(os.Stdin)\r\n\tfmt.Print("Enter a year from 1583 to 9999: ")\r\n\ttext, err := reader.ReadString('\\n')\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println("Unexpected error processing input")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Valid input must contain 5 or 6 chars including EOL chars\r\n\ttxtLen := len(text)\r\n\tvar yrStr string\r\n\tif txtLen > 4 && txtLen < 7 {\r\n\t\tyrStr = text[:4] // ignore EOL char(s)\r\n\t} else {\r\n\t\tyrStr = "0000" // force invalid input range error\r\n\t}\r\n\r\n\t// Convert input to an integer value. Handle conversion errors\r\n\tyear, err = strconv.Atoi(yrStr)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(yrStr, "is not a valid number.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Verify that input in in the allowed range\r\n\tif year < 1583 || year > 9999 {\r\n\t\tfmt.Println("Year entered must be from 1583 to 9999.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\treturn year // Return validated input value\r\n}\r\n\r\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\r\n// returns true or false based on whether the value provided is a leap year\r\n// Other input values may result in a runtime error or incorrect results\r\nfunc IsLeapYear(year int) bool {\r\n\tif math.Mod(float64(year), 4) == 0.0 {\r\n\t\tif math.Mod(float64(year), 100) == 0.0 {\r\n\t\t\tif math.Mod(float64(year), 400) == 0.0 {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}	\N	\N	0	1	2015-03-12 18:21:24	2015-03-12 18:21:24	93	\\go\\leap\\leap.go	{"\\\\go\\\\leap\\\\leap.go":"// Package leap exports GetValidYear which returns a valid year or zero,\\r\\n// and IsLeapYear which returns true if a validated year is a leap year.\\r\\npackage leap\\r\\n\\r\\nimport (\\r\\n\\t\\"bufio\\"\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"math\\"\\r\\n\\t\\"os\\"\\r\\n\\t\\"strconv\\"\\r\\n)\\r\\n\\r\\nconst TestVersion = 1\\r\\n\\r\\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\\r\\n// Returns validated year or 0 which indicates an error\\r\\n// Non-zero return values may be safely passed to IsLeapYear\\r\\nfunc GetValidYear() (year int) {\\r\\n\\treader := bufio.NewReader(os.Stdin)\\r\\n\\tfmt.Print(\\"Enter a year from 1583 to 9999: \\")\\r\\n\\ttext, err := reader.ReadString('\\\\n')\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(\\"Unexpected error processing input\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Valid input must contain 5 or 6 chars including EOL chars\\r\\n\\ttxtLen := len(text)\\r\\n\\tvar yrStr string\\r\\n\\tif txtLen \\u003e 4 \\u0026\\u0026 txtLen \\u003c 7 {\\r\\n\\t\\tyrStr = text[:4] // ignore EOL char(s)\\r\\n\\t} else {\\r\\n\\t\\tyrStr = \\"0000\\" // force invalid input range error\\r\\n\\t}\\r\\n\\r\\n\\t// Convert input to an integer value. Handle conversion errors\\r\\n\\tyear, err = strconv.Atoi(yrStr)\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(yrStr, \\"is not a valid number.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Verify that input in in the allowed range\\r\\n\\tif year \\u003c 1583 || year \\u003e 9999 {\\r\\n\\t\\tfmt.Println(\\"Year entered must be from 1583 to 9999.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\treturn year // Return validated input value\\r\\n}\\r\\n\\r\\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\\r\\n// returns true or false based on whether the value provided is a leap year\\r\\n// Other input values may result in a runtime error or incorrect results\\r\\nfunc IsLeapYear(year int) bool {\\r\\n\\tif math.Mod(float64(year), 4) == 0.0 {\\r\\n\\t\\tif math.Mod(float64(year), 100) == 0.0 {\\r\\n\\t\\t\\tif math.Mod(float64(year), 400) == 0.0 {\\r\\n\\t\\t\\t\\treturn true\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}"}
143	26	879dbc3b3e3796d80e334c47	pending	go	leap	// Package leap exports GetValidYear which returns a valid year or zero,\r\n// and IsLeapYear which returns true if a validated year is a leap year.\r\npackage leap\r\n\r\nimport (\r\n\t"bufio"\r\n\t"fmt"\r\n\t"os"\r\n\t"strconv"\r\n)\r\n\r\nconst TestVersion = 1\r\n\r\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\r\n// Returns validated year or 0 which indicates an error\r\n// Non-zero return values may be safely passed to IsLeapYear\r\nfunc GetValidYear() (year int) {\r\n\treader := bufio.NewReader(os.Stdin)\r\n\tfmt.Print("Enter a year from 1583 to 9999: ")\r\n\ttext, err := reader.ReadString('\\n')\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println("Unexpected error processing input")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Valid input must contain 5 or 6 chars including EOL chars\r\n\ttxtLen := len(text)\r\n\tvar yrStr string\r\n\tif txtLen > 4 && txtLen < 7 {\r\n\t\tyrStr = text[:4] // ignore EOL char(s)\r\n\t} else {\r\n\t\tyrStr = "0000" // force invalid input range error\r\n\t}\r\n\r\n\t// Convert input to an integer value. Handle conversion errors\r\n\tyear, err = strconv.Atoi(yrStr)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(yrStr, "is not a valid number.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Verify that input in in the allowed range\r\n\tif year < 1583 || year > 9999 {\r\n\t\tfmt.Println("Year entered must be from 1583 to 9999.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\treturn year // Return validated input value\r\n}\r\n\r\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\r\n// returns true or false based on whether the value provided is a leap year\r\n// Other input values may result in a runtime error or incorrect results\r\nfunc IsLeapYear(year int) bool {\r\n\tif year%4 == 0.0 {\r\n\t\tif year%100 == 0.0 {\r\n\t\t\tif year%400 == 0.0 {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}	\N	\N	0	2	2015-03-29 01:19:02	2015-03-29 01:19:02	93	\\go\\leap\\leap.go	{"\\\\go\\\\leap\\\\leap.go":"// Package leap exports GetValidYear which returns a valid year or zero,\\r\\n// and IsLeapYear which returns true if a validated year is a leap year.\\r\\npackage leap\\r\\n\\r\\nimport (\\r\\n\\t\\"bufio\\"\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"os\\"\\r\\n\\t\\"strconv\\"\\r\\n)\\r\\n\\r\\nconst TestVersion = 1\\r\\n\\r\\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\\r\\n// Returns validated year or 0 which indicates an error\\r\\n// Non-zero return values may be safely passed to IsLeapYear\\r\\nfunc GetValidYear() (year int) {\\r\\n\\treader := bufio.NewReader(os.Stdin)\\r\\n\\tfmt.Print(\\"Enter a year from 1583 to 9999: \\")\\r\\n\\ttext, err := reader.ReadString('\\\\n')\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(\\"Unexpected error processing input\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Valid input must contain 5 or 6 chars including EOL chars\\r\\n\\ttxtLen := len(text)\\r\\n\\tvar yrStr string\\r\\n\\tif txtLen \\u003e 4 \\u0026\\u0026 txtLen \\u003c 7 {\\r\\n\\t\\tyrStr = text[:4] // ignore EOL char(s)\\r\\n\\t} else {\\r\\n\\t\\tyrStr = \\"0000\\" // force invalid input range error\\r\\n\\t}\\r\\n\\r\\n\\t// Convert input to an integer value. Handle conversion errors\\r\\n\\tyear, err = strconv.Atoi(yrStr)\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(yrStr, \\"is not a valid number.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Verify that input in in the allowed range\\r\\n\\tif year \\u003c 1583 || year \\u003e 9999 {\\r\\n\\t\\tfmt.Println(\\"Year entered must be from 1583 to 9999.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\treturn year // Return validated input value\\r\\n}\\r\\n\\r\\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\\r\\n// returns true or false based on whether the value provided is a leap year\\r\\n// Other input values may result in a runtime error or incorrect results\\r\\nfunc IsLeapYear(year int) bool {\\r\\n\\tif year%4 == 0.0 {\\r\\n\\t\\tif year%100 == 0.0 {\\r\\n\\t\\t\\tif year%400 == 0.0 {\\r\\n\\t\\t\\t\\treturn true\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}"}
144	26	8bf9842a917cc20874a90933	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Data.List.Split (splitPlaces)\n\nareaCode :: String -> String\nareaCode = take 3\n\nnumber :: String -> String\nnumber = validateLength . tryTrimFirstDigit . filter isDigit\n       where tryTrimFirstDigit l = if length l == 11 && head l == '1' then tail l else l\n             validateLength l = if length l == 10 then l else invalid\n             invalid = "0000000000"\n\nprettyPrint :: String -> String\nprettyPrint = formatNumberParts . splitPlaces [3, 3, 4] . number\n\nformatNumberParts :: [String] -> String\nformatNumberParts (a:b:c:[]) = "(" ++ a ++ ") " ++ b ++ "-" ++ c	\N	\N	0	1	2014-10-30 18:12:52	2014-10-30 18:12:52	94	phone-number.hs	{"phone-number.hs":"module Phone (areaCode, number, prettyPrint) where\\n\\nimport Data.Char (isDigit)\\nimport Data.List.Split (splitPlaces)\\n\\nareaCode :: String -\\u003e String\\nareaCode = take 3\\n\\nnumber :: String -\\u003e String\\nnumber = validateLength . tryTrimFirstDigit . filter isDigit\\n       where tryTrimFirstDigit l = if length l == 11 \\u0026\\u0026 head l == '1' then tail l else l\\n             validateLength l = if length l == 10 then l else invalid\\n             invalid = \\"0000000000\\"\\n\\nprettyPrint :: String -\\u003e String\\nprettyPrint = formatNumberParts . splitPlaces [3, 3, 4] . number\\n\\nformatNumberParts :: [String] -\\u003e String\\nformatNumberParts (a:b:c:[]) = \\"(\\" ++ a ++ \\") \\" ++ b ++ \\"-\\" ++ c"}
146	26	671aff340e8ef808a797630f	pending	ruby	hamming	module Hamming\n  def self.compute(s1, s2)\n    s1.chars.each_with_index.reject { |c, i| c == s2[i] }.length\n  end\nend	\N	\N	0	1	2014-12-07 15:48:32	2014-12-07 15:48:32	95	hamming.rb	{"hamming.rb":"module Hamming\\n  def self.compute(s1, s2)\\n    s1.chars.each_with_index.reject { |c, i| c == s2[i] }.length\\n  end\\nend"}
147	26	514d444906c094f0bb7b6134	pending	python	bob	def hey( message):\r\n    if message is None or message.strip() == '':\r\n        return 'Fine. Be that way!'\r\n    if message.isupper():\r\n        return 'Whoa, chill out!'\r\n    if message.endswith('?') or message.endswith(' '):\r\n        return 'Sure.'\r\n    return 'Whatever.'a	\N	\N	0	2	2014-11-13 05:15:22	2014-11-13 05:15:22	96	\\python\\bob\\bob.py	{"\\\\python\\\\bob\\\\bob.py":"def hey( message):\\r\\n    if message is None or message.strip() == '':\\r\\n        return 'Fine. Be that way!'\\r\\n    if message.isupper():\\r\\n        return 'Whoa, chill out!'\\r\\n    if message.endswith('?') or message.endswith(' '):\\r\\n        return 'Sure.'\\r\\n    return 'Whatever.'a"}
151	7	f2cdb7a2ba27191a0ca3c6c3	superseded	clojure	raindrops	(ns drops)\r\n\r\n(def ^:private mappings {3 "Pling", 5 "Plang", 7 "Plong"})\r\n\r\n(declare prime-factors map-to-string)\r\n\r\n(defn convert [x]\r\n  (let [unique-factors (apply sorted-set (prime-factors x))\r\n        strings (map-to-string unique-factors)]\r\n    (if (seq strings)\r\n      (apply str strings)\r\n      (.toString x))))\r\n\r\n(defn- map-to-string [factors]\r\n  (->> (map mappings factors)\r\n       (filter identity)))\r\n\r\n(defn- prime-factors [x]\r\n  (loop [x x\r\n         divisor 2\r\n         acc []]\r\n    (if (= 1 x)\r\n      acc\r\n      (if (zero? (rem x divisor))\r\n        (recur (/ x divisor) divisor (conj acc divisor))\r\n        (recur x (inc divisor) acc)))))\r	\N	\N	0	1	2014-11-19 18:05:01	2014-11-19 18:05:01	98	raindrops.clj	{"raindrops.clj":"(ns drops)\\r\\n\\r\\n(def ^:private mappings {3 \\"Pling\\", 5 \\"Plang\\", 7 \\"Plong\\"})\\r\\n\\r\\n(declare prime-factors map-to-string)\\r\\n\\r\\n(defn convert [x]\\r\\n  (let [unique-factors (apply sorted-set (prime-factors x))\\r\\n        strings (map-to-string unique-factors)]\\r\\n    (if (seq strings)\\r\\n      (apply str strings)\\r\\n      (.toString x))))\\r\\n\\r\\n(defn- map-to-string [factors]\\r\\n  (-\\u003e\\u003e (map mappings factors)\\r\\n       (filter identity)))\\r\\n\\r\\n(defn- prime-factors [x]\\r\\n  (loop [x x\\r\\n         divisor 2\\r\\n         acc []]\\r\\n    (if (= 1 x)\\r\\n      acc\\r\\n      (if (zero? (rem x divisor))\\r\\n        (recur (/ x divisor) divisor (conj acc divisor))\\r\\n        (recur x (inc divisor) acc)))))\\r"}
152	7	c7bf8ead35337f59544c5876	pending	clojure	raindrops	(ns drops)\r\n\r\n(def ^:private mappings {3 "Pling", 5 "Plang", 7 "Plong"})\r\n\r\n(declare prime-factors map-to-string)\r\n\r\n(defn convert [x]\r\n  (let [unique-factors (apply sorted-set (prime-factors x))\r\n        strings (map-to-string unique-factors)]\r\n    (if (seq strings)\r\n      (apply str strings)\r\n      (str x))))\r\n\r\n(defn- map-to-string [factors]\r\n  (->> (map mappings factors)\r\n       (filter identity)))\r\n\r\n(defn- prime-factors [x]\r\n  (loop [x x\r\n         divisor 2\r\n         acc []]\r\n    (if (= 1 x)\r\n      acc\r\n      (if (zero? (rem x divisor))\r\n        (recur (/ x divisor) divisor (conj acc divisor))\r\n        (recur x (inc divisor) acc)))))\r	\N	\N	0	2	2014-12-22 13:34:42	2014-12-22 13:34:42	98	raindrops.clj	{"raindrops.clj":"(ns drops)\\r\\n\\r\\n(def ^:private mappings {3 \\"Pling\\", 5 \\"Plang\\", 7 \\"Plong\\"})\\r\\n\\r\\n(declare prime-factors map-to-string)\\r\\n\\r\\n(defn convert [x]\\r\\n  (let [unique-factors (apply sorted-set (prime-factors x))\\r\\n        strings (map-to-string unique-factors)]\\r\\n    (if (seq strings)\\r\\n      (apply str strings)\\r\\n      (str x))))\\r\\n\\r\\n(defn- map-to-string [factors]\\r\\n  (-\\u003e\\u003e (map mappings factors)\\r\\n       (filter identity)))\\r\\n\\r\\n(defn- prime-factors [x]\\r\\n  (loop [x x\\r\\n         divisor 2\\r\\n         acc []]\\r\\n    (if (= 1 x)\\r\\n      acc\\r\\n      (if (zero? (rem x divisor))\\r\\n        (recur (/ x divisor) divisor (conj acc divisor))\\r\\n        (recur x (inc divisor) acc)))))\\r"}
153	23	62b8dddfba735a20a6cdd437	pending	ruby	sum-of-multiples	class SumOfMultiples\r\n  def initialize(*multiples)\r\n    @multiples = multiples\r\n  end\r\n\r\n  def to(n)\r\n    (0...n).to_a.select{ |x| multiple? x }.inject(:+)\r\n  end\r\n\r\n  def self.to(n)\r\n    SumOfMultiples.new(3, 5).to(n)\r\n  end\r\n\r\n  private\r\n\r\n  def multiple?(x)\r\n    @multiples.any? { |m| x % m == 0 }\r\n  end\r\nend	\N	\N	0	1	2015-06-19 16:56:10	2015-06-19 16:56:10	99	\\ruby\\sum-of-multiples\\sum.rb	{"\\\\ruby\\\\sum-of-multiples\\\\sum.rb":"class SumOfMultiples\\r\\n  def initialize(*multiples)\\r\\n    @multiples = multiples\\r\\n  end\\r\\n\\r\\n  def to(n)\\r\\n    (0...n).to_a.select{ |x| multiple? x }.inject(:+)\\r\\n  end\\r\\n\\r\\n  def self.to(n)\\r\\n    SumOfMultiples.new(3, 5).to(n)\\r\\n  end\\r\\n\\r\\n  private\\r\\n\\r\\n  def multiple?(x)\\r\\n    @multiples.any? { |m| x % m == 0 }\\r\\n  end\\r\\nend"}
154	23	f6db81cb6358d4cd4210628c	pending	scala	hamming	import scala.math\n\nobject Hamming {\n    def compute(a: String, b:String): Int = {\n        (a zip b) count { case (ac, bc) => ac != bc }\n    }\n}	\N	\N	0	2	2015-06-19 22:14:41	2015-06-19 22:14:41	100	Hamming.scala	{"Hamming.scala":"import scala.math\\n\\nobject Hamming {\\n    def compute(a: String, b:String): Int = {\\n        (a zip b) count { case (ac, bc) =\\u003e ac != bc }\\n    }\\n}"}
155	23	21df0e071426dedb32dc6d0e	superseded	scala	hamming	import scala.math\n\nobject Hamming {\n    def compute(a: String, b:String): Integer = {\n        var distance = 0\n        var len = scala.math.min(a.length, b.length)\n\n        for (pos <- 0 until len) {\n            if (a.charAt(pos) != b.charAt(pos)) distance = distance + 1\n        }\n        distance\n    }\n}	\N	\N	0	1	2015-06-20 00:12:54	2015-06-20 00:12:54	100	Hamming.scala	{"Hamming.scala":"import scala.math\\n\\nobject Hamming {\\n    def compute(a: String, b:String): Integer = {\\n        var distance = 0\\n        var len = scala.math.min(a.length, b.length)\\n\\n        for (pos \\u003c- 0 until len) {\\n            if (a.charAt(pos) != b.charAt(pos)) distance = distance + 1\\n        }\\n        distance\\n    }\\n}"}
156	23	5ba97382491b9ee9076badec	pending	csharp	nucleotide-count	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic class InvalidNucleotideException : Exception{}\r\n\r\npublic class DNA\r\n{\r\n    public Dictionary<char, int> NucleotideCounts { protected set; get; }\r\n    public DNA(string sequence)\r\n    {\r\n        NucleotideCounts = sequence.GroupBy(Q => Q).Select(Q => new { Key = Q.FirstOrDefault(), Value = Q.Count() }).ToDictionary(Q => Q.Key, Q => Q.Value);\r\n        if (!NucleotideCounts.ContainsKey('A')) NucleotideCounts['A'] = 0;\r\n        if (!NucleotideCounts.ContainsKey('T')) NucleotideCounts['T'] = 0;\r\n        if (!NucleotideCounts.ContainsKey('C')) NucleotideCounts['C'] = 0;\r\n        if (!NucleotideCounts.ContainsKey('G')) NucleotideCounts['G'] = 0;\r\n    }\r\n    public int Count(char acid)\r\n    {\r\n        if ((acid != 'A') && (acid != 'T') && (acid != 'C') && (acid != 'G')) throw new InvalidNucleotideException();\r\n        return NucleotideCounts[acid];\r\n    }\r\n}	\N	\N	0	1	2015-06-22 06:12:05	2015-06-22 06:12:05	101	NucleotideCount.cs	{"NucleotideCount.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\npublic class InvalidNucleotideException : Exception{}\\r\\n\\r\\npublic class DNA\\r\\n{\\r\\n    public Dictionary\\u003cchar, int\\u003e NucleotideCounts { protected set; get; }\\r\\n    public DNA(string sequence)\\r\\n    {\\r\\n        NucleotideCounts = sequence.GroupBy(Q =\\u003e Q).Select(Q =\\u003e new { Key = Q.FirstOrDefault(), Value = Q.Count() }).ToDictionary(Q =\\u003e Q.Key, Q =\\u003e Q.Value);\\r\\n        if (!NucleotideCounts.ContainsKey('A')) NucleotideCounts['A'] = 0;\\r\\n        if (!NucleotideCounts.ContainsKey('T')) NucleotideCounts['T'] = 0;\\r\\n        if (!NucleotideCounts.ContainsKey('C')) NucleotideCounts['C'] = 0;\\r\\n        if (!NucleotideCounts.ContainsKey('G')) NucleotideCounts['G'] = 0;\\r\\n    }\\r\\n    public int Count(char acid)\\r\\n    {\\r\\n        if ((acid != 'A') \\u0026\\u0026 (acid != 'T') \\u0026\\u0026 (acid != 'C') \\u0026\\u0026 (acid != 'G')) throw new InvalidNucleotideException();\\r\\n        return NucleotideCounts[acid];\\r\\n    }\\r\\n}"}
157	23	10c8a13d3852e6f78a3ce6d3	pending	haskell	etl	module ETL(transform) where\n\nimport Data.Char(toLower)\nimport qualified Data.Map as Map\n\ntransform :: Map.Map Int [String] -> Map.Map String Int\ntransform = Map.fromList . concat . map (\\(s, lwords) -> [(map toLower w, s) | w <- lwords]) . Map.toList	\N	\N	0	1	2015-06-21 11:29:19	2015-06-21 11:29:19	102	ETL.hs	{"ETL.hs":"module ETL(transform) where\\n\\nimport Data.Char(toLower)\\nimport qualified Data.Map as Map\\n\\ntransform :: Map.Map Int [String] -\\u003e Map.Map String Int\\ntransform = Map.fromList . concat . map (\\\\(s, lwords) -\\u003e [(map toLower w, s) | w \\u003c- lwords]) . Map.toList"}
158	23	b146cf36a08f37dd0a507784	pending	javascript	hamming	var Hamming = {\r\n  compute: function(Strand1, Strand2) {\r\n    var NumberDifferent = 0;\r\n//Do a length check first because everything else relies on that. \r\nif (Strand1.length != Strand2.length){\r\n  throw 'DNA strands must be of equal length.'\r\n};//end if\r\nfor (var i = 0;i<Strand1.length;i++){//does a loop for each character input. \r\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \r\n\tNumberDifferent ++\r\n};//end if\r\n};//end for\r\n return NumberDifferent; //return the # difference\r\n   }//end compute\r\n};//end hamming\r\n\r\nmodule.exports = Hamming;	\N	\N	0	1	2015-06-19 13:06:47	2015-06-19 13:06:47	103	\\javascript\\hamming\\hamming.js	{"\\\\javascript\\\\hamming\\\\hamming.js":"var Hamming = {\\r\\n  compute: function(Strand1, Strand2) {\\r\\n    var NumberDifferent = 0;\\r\\n//Do a length check first because everything else relies on that. \\r\\nif (Strand1.length != Strand2.length){\\r\\n  throw 'DNA strands must be of equal length.'\\r\\n};//end if\\r\\nfor (var i = 0;i\\u003cStrand1.length;i++){//does a loop for each character input. \\r\\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \\r\\n\\tNumberDifferent ++\\r\\n};//end if\\r\\n};//end for\\r\\n return NumberDifferent; //return the # difference\\r\\n   }//end compute\\r\\n};//end hamming\\r\\n\\r\\nmodule.exports = Hamming;"}
159	23	4b3fe04e5ae934a5461deadb	pending	clojure	bob	(ns bob)\n\n(defn response-for\n   "Return Bob's response based on input." \n    [input]\n    (cond\n      (clojure.string/blank? input) "Fine. Be that way!"\n      (is-shout? input) "Whoa, chill out!"\n      (is-question? input) "Sure."\n      :else "Whatever."))\n\n(defn is-question?\n  "Checks that the last character is a question mark"\n  [input]\n  (=  (subs input (- (.length input) 1)) "?"))\n\n(defn is-shout?\n  "Checks that all letters are upper case (and there is at least one letter)"\n  [input]\n  (and\n    (re-find #"[A-Za-z]" input) ; Shouts must contain letters\n    (= input (clojure.string/upper-case input)))) ; All letters must be in upper case	\N	\N	0	1	2015-06-21 16:41:14	2015-06-21 16:41:14	104	bob.clj	{"bob.clj":"(ns bob)\\n\\n(defn response-for\\n   \\"Return Bob's response based on input.\\" \\n    [input]\\n    (cond\\n      (clojure.string/blank? input) \\"Fine. Be that way!\\"\\n      (is-shout? input) \\"Whoa, chill out!\\"\\n      (is-question? input) \\"Sure.\\"\\n      :else \\"Whatever.\\"))\\n\\n(defn is-question?\\n  \\"Checks that the last character is a question mark\\"\\n  [input]\\n  (=  (subs input (- (.length input) 1)) \\"?\\"))\\n\\n(defn is-shout?\\n  \\"Checks that all letters are upper case (and there is at least one letter)\\"\\n  [input]\\n  (and\\n    (re-find #\\"[A-Za-z]\\" input) ; Shouts must contain letters\\n    (= input (clojure.string/upper-case input)))) ; All letters must be in upper case"}
160	17	6ada639c48c89f0e031b2473	pending	ruby	clock	class Clock\n  attr_accessor :time\n\n  def self.at(*ints)\n    self.new Time.new(1, 1, 1, *ints)\n  end\n\n  def initialize(time)\n    @time = time\n  end\n\n  def +(mins)\n    self.time += (60 * mins)\n    self\n  end\n\n  def -(mins)\n    self.time -= (60 * mins)\n    self\n  end\n\n  def ==(other_clock)\n    self.to_s == other_clock.to_s\n  end\n\n  def to_s\n    self.time.strftime("%H:%M")\n  end\nend	\N	\N	0	1	2015-06-06 07:21:38	2015-06-06 07:21:38	105	clock.rb	{"clock.rb":"class Clock\\n  attr_accessor :time\\n\\n  def self.at(*ints)\\n    self.new Time.new(1, 1, 1, *ints)\\n  end\\n\\n  def initialize(time)\\n    @time = time\\n  end\\n\\n  def +(mins)\\n    self.time += (60 * mins)\\n    self\\n  end\\n\\n  def -(mins)\\n    self.time -= (60 * mins)\\n    self\\n  end\\n\\n  def ==(other_clock)\\n    self.to_s == other_clock.to_s\\n  end\\n\\n  def to_s\\n    self.time.strftime(\\"%H:%M\\")\\n  end\\nend"}
161	17	1faa742c15753ea9fd869293	pending	python	sieve	def sieve(limit):\n\tmarker =[]\n\tnumbers=[]\n\tprime=[2]\n\tfor i in range(2,limit):\n\t\tmarker.append(0)\n\t\tnumbers.append(i)\n\t\t\n\tfor i in range(0,len(numbers)):\n\t\tif numbers[i] % 2 ==0:\n\t\t\tmarker[i] =1\n\tfor i in range(1,len(numbers)):\n\t\tif marker[i] == 0:\n\t\t\tz = 1\n\t\t\tfor k in range(0,len(prime)):\n\t\t\t\tif numbers[i] % prime[k] ==0:\n\t\t\t\t\tz=0\n\t\t\tif z ==1:\n\t\t\t\tprime.append(numbers[i])\n\t\t\t\tfor k in range(i,len(numbers)):\n\t\t\t\t\tif numbers[k] % numbers[i] ==0:\n\t\t\t\t\t\tmarker[k]=1\n\treturn prime\n\t\t\t\t\t\n\t\t\t\n\t\t	\N	\N	0	1	2015-03-09 14:00:07	2015-03-09 14:00:07	106	sieve.py	{"sieve.py":"def sieve(limit):\\n\\tmarker =[]\\n\\tnumbers=[]\\n\\tprime=[2]\\n\\tfor i in range(2,limit):\\n\\t\\tmarker.append(0)\\n\\t\\tnumbers.append(i)\\n\\t\\t\\n\\tfor i in range(0,len(numbers)):\\n\\t\\tif numbers[i] % 2 ==0:\\n\\t\\t\\tmarker[i] =1\\n\\tfor i in range(1,len(numbers)):\\n\\t\\tif marker[i] == 0:\\n\\t\\t\\tz = 1\\n\\t\\t\\tfor k in range(0,len(prime)):\\n\\t\\t\\t\\tif numbers[i] % prime[k] ==0:\\n\\t\\t\\t\\t\\tz=0\\n\\t\\t\\tif z ==1:\\n\\t\\t\\t\\tprime.append(numbers[i])\\n\\t\\t\\t\\tfor k in range(i,len(numbers)):\\n\\t\\t\\t\\t\\tif numbers[k] % numbers[i] ==0:\\n\\t\\t\\t\\t\\t\\tmarker[k]=1\\n\\treturn prime\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t"}
162	17	c56b248cf938b76e6eab4b3c	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	2015-04-07 21:08:34	2015-04-07 21:08:34	107	/ruby/roman-numerals/roman.rb	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
167	20	8e417ce8ac136eb337639dc7	superseded	python	roman-numerals	NUMERALS = [\n    (1000, "M"),\n    (900, "CM"),\n    (500, "D"),\n    (400, "CD"),\n    (100, "C"),\n    (90, "XC"),\n    (50, "L"),\n    (40, "XL"),\n    (10, "X"),\n    (9, "IX"),\n    (5, "V"),\n    (4, "IV"),\n    (1, "I")\n]\n\ndef RomanNumeral(n):\n    results = []\n    for arabic, roman in NUMERALS:\n        results.append(roman * (n // arabic))\n        n %= arabic\n    return ''.join(results)	\N	\N	0	2	2015-05-12 19:21:09	2015-05-12 19:21:09	110	roman.py	{"roman.py":"NUMERALS = [\\n    (1000, \\"M\\"),\\n    (900, \\"CM\\"),\\n    (500, \\"D\\"),\\n    (400, \\"CD\\"),\\n    (100, \\"C\\"),\\n    (90, \\"XC\\"),\\n    (50, \\"L\\"),\\n    (40, \\"XL\\"),\\n    (10, \\"X\\"),\\n    (9, \\"IX\\"),\\n    (5, \\"V\\"),\\n    (4, \\"IV\\"),\\n    (1, \\"I\\")\\n]\\n\\ndef RomanNumeral(n):\\n    results = []\\n    for arabic, roman in NUMERALS:\\n        results.append(roman * (n // arabic))\\n        n %= arabic\\n    return ''.join(results)"}
163	20	bcd54c3dd905120a6603346b	done	python	crypto-square	import string, math\n\ndef encode(text):\n    text = _normalize(text)\n    col = _getcol(len(text))\n    \n    secret = ''\n    for start in xrange(col):\n        secret += ''.join((text[start::col]))\n    return _grouptext(secret)\n    \ndef decode(text):\n    \n    text = _normalize(text)\n    textlen = len(text)\n    \n    row = _getcol(textlen)\n    col = _getrow(textlen)\n    \n    # Cipher text must have additional spacing added to line up correctly.\n    # !\n    # Break up cipher text into two pieces determined by column completeness\n    fullcols = textlen % row\n    piece1 = text[0:fullcols*col]\n    piece2 = text[len(piece1):]\n    \n    # Divide the remaining pieces into smaller segments and add a space to each segment\n    numshortcols = row - fullcols\n    shortcolsize = len(piece2) / numshortcols\n    for x in xrange(numshortcols):\n        start = x * shortcolsize\n        end = start + shortcolsize\n        piece1 += piece2[start:end] + ' '\n        \n    secret = ''\n    for start in xrange(col):\n        secret += ''.join((piece1[start::col]))\n        \n    return _normalize(secret)\n    \n    \ndef _grouptext(text, blocksize=5):\n    """Groups the output of encode into blocks of a given size"""\n    return " ".join(text[i:(i + blocksize)]\n            for i in xrange(0, len(text), blocksize))\n    \n\n    \ndef _getcol(length):\n    return int(math.ceil(math.sqrt(length)))\n\ndef _getrow(length):\n    return int(math.ceil(float(length) / _getcol(length)))\n\ndef _normalize(text):\n    return ''.join([letter for letter in text.lower() \\\n                if letter.isalpha() or letter.isdigit()])	2015-05-10 07:55:32	\N	0	1	2015-05-04 09:56:00	2015-05-04 09:56:00	108	crypto_square.py	{"crypto_square.py":"import string, math\\n\\ndef encode(text):\\n    text = _normalize(text)\\n    col = _getcol(len(text))\\n    \\n    secret = ''\\n    for start in xrange(col):\\n        secret += ''.join((text[start::col]))\\n    return _grouptext(secret)\\n    \\ndef decode(text):\\n    \\n    text = _normalize(text)\\n    textlen = len(text)\\n    \\n    row = _getcol(textlen)\\n    col = _getrow(textlen)\\n    \\n    # Cipher text must have additional spacing added to line up correctly.\\n    # !\\n    # Break up cipher text into two pieces determined by column completeness\\n    fullcols = textlen % row\\n    piece1 = text[0:fullcols*col]\\n    piece2 = text[len(piece1):]\\n    \\n    # Divide the remaining pieces into smaller segments and add a space to each segment\\n    numshortcols = row - fullcols\\n    shortcolsize = len(piece2) / numshortcols\\n    for x in xrange(numshortcols):\\n        start = x * shortcolsize\\n        end = start + shortcolsize\\n        piece1 += piece2[start:end] + ' '\\n        \\n    secret = ''\\n    for start in xrange(col):\\n        secret += ''.join((piece1[start::col]))\\n        \\n    return _normalize(secret)\\n    \\n    \\ndef _grouptext(text, blocksize=5):\\n    \\"\\"\\"Groups the output of encode into blocks of a given size\\"\\"\\"\\n    return \\" \\".join(text[i:(i + blocksize)]\\n            for i in xrange(0, len(text), blocksize))\\n    \\n\\n    \\ndef _getcol(length):\\n    return int(math.ceil(math.sqrt(length)))\\n\\ndef _getrow(length):\\n    return int(math.ceil(float(length) / _getcol(length)))\\n\\ndef _normalize(text):\\n    return ''.join([letter for letter in text.lower() \\\\\\n                if letter.isalpha() or letter.isdigit()])"}
164	20	c3287470e705b4db2032c1f1	done	go	diffie-hellman	package diffiehellman\n\nimport (\n\t"crypto/rand"\n\t"math/big"\n)\n\nvar two = big.NewInt(2)\n\n// PrivateKey generates and returns a private key.\n// A private key is a random int in the range [2, p).\nfunc PrivateKey(p *big.Int) *big.Int {\n\t// Generate a random int in [0, p-2), then adjust to [2, p)\n\tmax := new(big.Int).Sub(p, two)\n\tr, err := rand.Int(rand.Reader, max)\n\tif err != nil {\n\t\treturn nil\n\t}\n\treturn r.Add(r, two)\n}\n\n// PublicKey calculates and returns the public key for the given parameters.\n// The public key is calculated as g**priv mod p.\nfunc PublicKey(priv, p *big.Int, g int64) *big.Int {\n\treturn new(big.Int).Exp(big.NewInt(g), priv, p)\n}\n\n// NewPair generates and returns a new key pair.\nfunc NewPair(p *big.Int, g int64) (priv, pub *big.Int) {\n\tpriv = PrivateKey(p)\n\tpub = PublicKey(priv, p, g)\n\treturn priv, pub\n}\n\n// SecretKey calculates and returns the secret key for one client.\n// The secret key is calculated as pub2**priv1 mod p where:\n//     - priv1 = private key\n//     - pub2  = other client's public key\n//     - p     = modulus\nfunc SecretKey(priv1, pub2, p *big.Int) *big.Int {\n\treturn new(big.Int).Exp(pub2, priv1, p)\n}	2015-05-23 11:13:48	\N	0	1	2015-05-13 07:24:00	2015-05-13 07:24:00	109	diffie_hellman.go	{"diffie_hellman.go":"package diffiehellman\\n\\nimport (\\n\\t\\"crypto/rand\\"\\n\\t\\"math/big\\"\\n)\\n\\nvar two = big.NewInt(2)\\n\\n// PrivateKey generates and returns a private key.\\n// A private key is a random int in the range [2, p).\\nfunc PrivateKey(p *big.Int) *big.Int {\\n\\t// Generate a random int in [0, p-2), then adjust to [2, p)\\n\\tmax := new(big.Int).Sub(p, two)\\n\\tr, err := rand.Int(rand.Reader, max)\\n\\tif err != nil {\\n\\t\\treturn nil\\n\\t}\\n\\treturn r.Add(r, two)\\n}\\n\\n// PublicKey calculates and returns the public key for the given parameters.\\n// The public key is calculated as g**priv mod p.\\nfunc PublicKey(priv, p *big.Int, g int64) *big.Int {\\n\\treturn new(big.Int).Exp(big.NewInt(g), priv, p)\\n}\\n\\n// NewPair generates and returns a new key pair.\\nfunc NewPair(p *big.Int, g int64) (priv, pub *big.Int) {\\n\\tpriv = PrivateKey(p)\\n\\tpub = PublicKey(priv, p, g)\\n\\treturn priv, pub\\n}\\n\\n// SecretKey calculates and returns the secret key for one client.\\n// The secret key is calculated as pub2**priv1 mod p where:\\n//     - priv1 = private key\\n//     - pub2  = other client's public key\\n//     - p     = modulus\\nfunc SecretKey(priv1, pub2, p *big.Int) *big.Int {\\n\\treturn new(big.Int).Exp(pub2, priv1, p)\\n}"}
168	21	8d9ad9a2c0948963b8aa72b1	superseded	javascript	rna-transcription	function toRna(sequence) {\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\n        throw new RangeError('Given sequence was not a DNA sequence');\n\n    var complements = {\n        G: 'C',\n        C: 'G',\n        T: 'A',\n        A: 'U'\n    }, result = '';\n\n    sequence.trim().toUpperCase().split('').forEach(function(nucleotide) {\n        result += complements[nucleotide];\n    });\n\n    return result;\n}\n\nmodule.exports = toRna;	\N	\N	0	1	2014-11-29 23:50:06	2014-11-29 23:50:06	111	rna-transcription.js	{"rna-transcription.js":"function toRna(sequence) {\\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\\n        throw new RangeError('Given sequence was not a DNA sequence');\\n\\n    var complements = {\\n        G: 'C',\\n        C: 'G',\\n        T: 'A',\\n        A: 'U'\\n    }, result = '';\\n\\n    sequence.trim().toUpperCase().split('').forEach(function(nucleotide) {\\n        result += complements[nucleotide];\\n    });\\n\\n    return result;\\n}\\n\\nmodule.exports = toRna;"}
169	21	b45d4b570a19812c1e372b30	done	javascript	rna-transcription	function toRna(sequence) {\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\n        throw new RangeError('Given sequence was not a DNA sequence');\n\n    var complements = {\n        G: 'C',\n        C: 'G',\n        T: 'A',\n        A: 'U'\n    };\n\n    return sequence.trim().split('').map(function(nucleotide) {\n        return complements[nucleotide];\n    }).join('');\n}\n\nmodule.exports = toRna;	2015-05-20 08:37:08	\N	0	2	2015-05-10 21:17:19	2015-05-10 21:17:19	111	rna-transcription.js	{"rna-transcription.js":"function toRna(sequence) {\\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\\n        throw new RangeError('Given sequence was not a DNA sequence');\\n\\n    var complements = {\\n        G: 'C',\\n        C: 'G',\\n        T: 'A',\\n        A: 'U'\\n    };\\n\\n    return sequence.trim().split('').map(function(nucleotide) {\\n        return complements[nucleotide];\\n    }).join('');\\n}\\n\\nmodule.exports = toRna;"}
170	21	1ed634c1d88b4f6ed927f093	done	elixir	binary	defmodule Binary do\n\n  @spec to_decimal(String.t) :: non_neg_integer\n  def to_decimal(string) do\n    string |> String.reverse \n           |> String.codepoints\n           |> to_decimal(0, 1)\n  end\n\n  def to_decimal([],      num, _),      do: num\n  def to_decimal(["1"|t], num, factor), do: to_decimal(t, num+factor, factor*2)\n  def to_decimal(["0"|t], num, factor), do: to_decimal(t, num,        factor*2)\n  def to_decimal([_  |_], _,   _),      do: 0\n  \nend	2014-11-05 08:53:09	\N	0	1	2014-11-04 12:39:45	2014-11-04 12:39:45	112	binary.exs	{"binary.exs":"defmodule Binary do\\n\\n  @spec to_decimal(String.t) :: non_neg_integer\\n  def to_decimal(string) do\\n    string |\\u003e String.reverse \\n           |\\u003e String.codepoints\\n           |\\u003e to_decimal(0, 1)\\n  end\\n\\n  def to_decimal([],      num, _),      do: num\\n  def to_decimal([\\"1\\"|t], num, factor), do: to_decimal(t, num+factor, factor*2)\\n  def to_decimal([\\"0\\"|t], num, factor), do: to_decimal(t, num,        factor*2)\\n  def to_decimal([_  |_], _,   _),      do: 0\\n  \\nend"}
171	21	8aa437f6f22d36e8347f3f3c	done	javascript	grains	var Grains = function() {\n\n  return {\n    square: function(n) { return Math.pow(2, n - 1) },\n    total: function() { return Math.pow(2, 64) - 1 }\n  }\n\n}\n\nmodule.exports = Grains	2015-02-23 17:08:01	\N	0	1	2015-02-19 19:45:29	2015-02-19 19:45:29	113	/javascript/grains/grains.js	{"/javascript/grains/grains.js":"var Grains = function() {\\n\\n  return {\\n    square: function(n) { return Math.pow(2, n - 1) },\\n    total: function() { return Math.pow(2, 64) - 1 }\\n  }\\n\\n}\\n\\nmodule.exports = Grains"}
172	21	27b84701f04af7e96d9767ca	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	2014-11-30 08:31:43	\N	0	1	2014-11-19 00:37:53	2014-11-19 00:37:53	114	/ruby/grains/grains.rb	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
173	21	35bb09d90b07db0f66f3e58b	done	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n \n  @spec count(list) :: non_neg_integer\n  def count(l) do\n    do_count(l, 0)\n  end\n  defp do_count([], acc), do: acc\n  defp do_count([_head | tail], acc) do\n    do_count(tail, acc + 1)\n  end\n\n  @spec reverse(list) :: list\n  def reverse(l) do\n    do_reverse(l, [])\n  end\n  defp do_reverse([], acc), do: acc\n  defp do_reverse([head | tail], acc) do\n    do_reverse(tail, [ head | acc])\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    do_map(l, f, [])\n  end\n  defp do_map([], _f, acc), do: acc |> reverse\n  defp do_map([head | tail], f, acc) do\n    do_map(tail, f, [f.(head) | acc ])\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    do_filter(l, f, [])\n  end\n  defp do_filter([], _f, acc), do: acc |> reverse\n  defp do_filter([head | tail], f, acc) do\n    if f.(head) do\n      do_filter(tail, f, [head | acc])\n    else\n      do_filter(tail, f, acc)\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce([], acc, _f), do: acc\n  def reduce([head | tail], acc, f) do\n    acc = f.(acc, head)\n    reduce(tail, acc, f)\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n    do_append(a |> reverse, b)\n  end\n  defp do_append([], a), do: a\n  defp do_append([head | tail], b) do\n    do_append(tail, [head | b])\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n    reverse(ll) |>\n      reduce([], &(append(&2, &1)))\n  end\nend	2014-11-11 09:21:41	\N	0	2	2014-11-06 10:28:18	2014-11-06 10:28:18	115	list_ops.exs	{"list_ops.exs":"defmodule ListOps do\\n  # Please don't use any external modules (especially List) in your\\n  # implementation. The point of this exercise is to create these basic functions\\n  # yourself.\\n  # \\n  # Note that `++` is a function from an external module (Kernel, which is\\n  # automatically important`) and so shouldn't be used either.\\n \\n  @spec count(list) :: non_neg_integer\\n  def count(l) do\\n    do_count(l, 0)\\n  end\\n  defp do_count([], acc), do: acc\\n  defp do_count([_head | tail], acc) do\\n    do_count(tail, acc + 1)\\n  end\\n\\n  @spec reverse(list) :: list\\n  def reverse(l) do\\n    do_reverse(l, [])\\n  end\\n  defp do_reverse([], acc), do: acc\\n  defp do_reverse([head | tail], acc) do\\n    do_reverse(tail, [ head | acc])\\n  end\\n\\n  @spec map(list, (any -\\u003e any)) :: list\\n  def map(l, f) do\\n    do_map(l, f, [])\\n  end\\n  defp do_map([], _f, acc), do: acc |\\u003e reverse\\n  defp do_map([head | tail], f, acc) do\\n    do_map(tail, f, [f.(head) | acc ])\\n  end\\n\\n  @spec filter(list, (any -\\u003e as_boolean(term))) :: list\\n  def filter(l, f) do\\n    do_filter(l, f, [])\\n  end\\n  defp do_filter([], _f, acc), do: acc |\\u003e reverse\\n  defp do_filter([head | tail], f, acc) do\\n    if f.(head) do\\n      do_filter(tail, f, [head | acc])\\n    else\\n      do_filter(tail, f, acc)\\n    end\\n  end\\n\\n  @type acc :: any\\n  @spec reduce(list, acc, ((acc, any) -\\u003e acc)) :: acc\\n  def reduce([], acc, _f), do: acc\\n  def reduce([head | tail], acc, f) do\\n    acc = f.(acc, head)\\n    reduce(tail, acc, f)\\n  end\\n\\n  @spec append(list, list) :: list\\n  def append(a, b) do\\n    do_append(a |\\u003e reverse, b)\\n  end\\n  defp do_append([], a), do: a\\n  defp do_append([head | tail], b) do\\n    do_append(tail, [head | b])\\n  end\\n\\n  @spec concat([[any]]) :: [any]\\n  def concat(ll) do\\n    reverse(ll) |\\u003e\\n      reduce([], \\u0026(append(\\u00262, \\u00261)))\\n  end\\nend"}
174	21	3e557130dcbf86ce003cbf47	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n \n  @spec count(list) :: non_neg_integer\n  def count(l) do\n    count(l, 0)\n  end\n  defp count([], acc), do: acc\n  defp count([_head | tail], acc) do\n    count(tail, acc + 1)\n  end\n\n  @spec reverse(list) :: list\n  def reverse(l) do\n    reverse(l, [])\n  end\n  defp reverse([], acc), do: acc\n  defp reverse([head | tail], acc) do\n    reverse(tail, [ head | acc])\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    map(l, f, [])\n  end\n  defp map([], _f, acc), do: acc |> reverse\n  defp map([head | tail], f, acc) do\n    map(tail, f, [f.(head) | acc ])\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    filter(l, f, [])\n  end\n  defp filter([], _f, acc), do: acc |> reverse\n  defp filter([head | tail], f, acc) do\n    if f.(head) do\n      filter(tail, f, [head | acc])\n    else\n      filter(tail, f, acc)\n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    do_reduce(l, acc, f)\n  end\n  defp do_reduce([], acc, _f), do: acc\n  defp do_reduce([head | tail], acc, f) do\n    acc = f.(acc, head)\n    do_reduce(tail, acc, f)\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n    do_append(a |> reverse, b)\n  end\n  defp do_append([], a), do: a\n  defp do_append([head | tail], b) do\n    do_append(tail, [head | b])\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n    reverse(ll) |>\n      reduce([], &(append(&2, &1)))\n  end\nend	\N	\N	0	1	2015-05-01 00:03:54	2015-05-01 00:03:54	115	list_ops.exs	{"list_ops.exs":"defmodule ListOps do\\n  # Please don't use any external modules (especially List) in your\\n  # implementation. The point of this exercise is to create these basic functions\\n  # yourself.\\n  # \\n  # Note that `++` is a function from an external module (Kernel, which is\\n  # automatically important`) and so shouldn't be used either.\\n \\n  @spec count(list) :: non_neg_integer\\n  def count(l) do\\n    count(l, 0)\\n  end\\n  defp count([], acc), do: acc\\n  defp count([_head | tail], acc) do\\n    count(tail, acc + 1)\\n  end\\n\\n  @spec reverse(list) :: list\\n  def reverse(l) do\\n    reverse(l, [])\\n  end\\n  defp reverse([], acc), do: acc\\n  defp reverse([head | tail], acc) do\\n    reverse(tail, [ head | acc])\\n  end\\n\\n  @spec map(list, (any -\\u003e any)) :: list\\n  def map(l, f) do\\n    map(l, f, [])\\n  end\\n  defp map([], _f, acc), do: acc |\\u003e reverse\\n  defp map([head | tail], f, acc) do\\n    map(tail, f, [f.(head) | acc ])\\n  end\\n\\n  @spec filter(list, (any -\\u003e as_boolean(term))) :: list\\n  def filter(l, f) do\\n    filter(l, f, [])\\n  end\\n  defp filter([], _f, acc), do: acc |\\u003e reverse\\n  defp filter([head | tail], f, acc) do\\n    if f.(head) do\\n      filter(tail, f, [head | acc])\\n    else\\n      filter(tail, f, acc)\\n    end\\n  end\\n\\n  @type acc :: any\\n  @spec reduce(list, acc, ((acc, any) -\\u003e acc)) :: acc\\n  def reduce(l, acc, f) do\\n    do_reduce(l, acc, f)\\n  end\\n  defp do_reduce([], acc, _f), do: acc\\n  defp do_reduce([head | tail], acc, f) do\\n    acc = f.(acc, head)\\n    do_reduce(tail, acc, f)\\n  end\\n\\n  @spec append(list, list) :: list\\n  def append(a, b) do\\n    do_append(a |\\u003e reverse, b)\\n  end\\n  defp do_append([], a), do: a\\n  defp do_append([head | tail], b) do\\n    do_append(tail, [head | b])\\n  end\\n\\n  @spec concat([[any]]) :: [any]\\n  def concat(ll) do\\n    reverse(ll) |\\u003e\\n      reduce([], \\u0026(append(\\u00262, \\u00261)))\\n  end\\nend"}
175	21	c4041adef9670b1af52d03de	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	2014-10-22 06:39:51	2014-10-22 06:39:51	116	WordCount.hs	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
176	21	6e07f8996b277feb06102232	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	2014-11-23 17:00:41	\N	0	2	2014-11-16 09:07:59	2014-11-16 09:07:59	116	WordCount.hs	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
177	21	79b5e2e85897c2fbb4f45903	done	javascript	space-age	var SpaceAge = function SpaceAge(seconds) {\n  secsToYears = function secsToYears() {\n    return (seconds / 31557600);\n  }\n\n  var conversions = {\n    Mercury: 0.2408467,\n    Venus: 0.61519726,\n    Earth: 1,\n    Mars: 1.8808158,\n    Jupiter: 11.862615,\n    Saturn: 29.447498,\n    Uranus: 84.016846,\n    Neptune: 164.79132 \n  };\n\n  var onEarth = function onEarth() {\n    return parseFloat((secsToYears() / conversions.Earth).toFixed(2));\n  }\n  var onMercury = function onMercury() {\n    return parseFloat((secsToYears() / conversions.Mercury).toFixed(2));\n  }\n  var onVenus = function onVenus() {\n    return parseFloat((secsToYears() / conversions.Venus).toFixed(2));\n  }\n  var onMars = function onMars() {\n    return parseFloat((secsToYears() / conversions.Mars).toFixed(2));\n  }\n  var onJupiter = function onJupiter() {\n    return parseFloat((secsToYears() / conversions.Jupiter).toFixed(2));\n  }\n  var onSaturn = function onSaturn() {\n    return parseFloat((secsToYears() / conversions.Saturn).toFixed(2));\n  }\n  var onUranus = function onUranus() {\n    return parseFloat((secsToYears() / conversions.Uranus).toFixed(2));\n  }\n  var onNeptune = function onNeptune() {\n    return parseFloat((secsToYears() / conversions.Neptune).toFixed(2));\n  }\n\n  return {\n    seconds: seconds,\n    onEarth: onEarth,\n    onMercury: onMercury,\n    onVenus: onVenus,\n    onMars: onMars,\n    onJupiter: onJupiter,\n    onSaturn: onSaturn,\n    onUranus: onUranus,\n    onNeptune: onNeptune\n  }\n}\n\nmodule.exports = SpaceAge;	2014-11-20 19:28:24	\N	0	1	2014-11-09 09:27:26	2014-11-09 09:27:26	117	space-age.js	{"space-age.js":"var SpaceAge = function SpaceAge(seconds) {\\n  secsToYears = function secsToYears() {\\n    return (seconds / 31557600);\\n  }\\n\\n  var conversions = {\\n    Mercury: 0.2408467,\\n    Venus: 0.61519726,\\n    Earth: 1,\\n    Mars: 1.8808158,\\n    Jupiter: 11.862615,\\n    Saturn: 29.447498,\\n    Uranus: 84.016846,\\n    Neptune: 164.79132 \\n  };\\n\\n  var onEarth = function onEarth() {\\n    return parseFloat((secsToYears() / conversions.Earth).toFixed(2));\\n  }\\n  var onMercury = function onMercury() {\\n    return parseFloat((secsToYears() / conversions.Mercury).toFixed(2));\\n  }\\n  var onVenus = function onVenus() {\\n    return parseFloat((secsToYears() / conversions.Venus).toFixed(2));\\n  }\\n  var onMars = function onMars() {\\n    return parseFloat((secsToYears() / conversions.Mars).toFixed(2));\\n  }\\n  var onJupiter = function onJupiter() {\\n    return parseFloat((secsToYears() / conversions.Jupiter).toFixed(2));\\n  }\\n  var onSaturn = function onSaturn() {\\n    return parseFloat((secsToYears() / conversions.Saturn).toFixed(2));\\n  }\\n  var onUranus = function onUranus() {\\n    return parseFloat((secsToYears() / conversions.Uranus).toFixed(2));\\n  }\\n  var onNeptune = function onNeptune() {\\n    return parseFloat((secsToYears() / conversions.Neptune).toFixed(2));\\n  }\\n\\n  return {\\n    seconds: seconds,\\n    onEarth: onEarth,\\n    onMercury: onMercury,\\n    onVenus: onVenus,\\n    onMars: onMars,\\n    onJupiter: onJupiter,\\n    onSaturn: onSaturn,\\n    onUranus: onUranus,\\n    onNeptune: onNeptune\\n  }\\n}\\n\\nmodule.exports = SpaceAge;"}
178	36	b4c30f11d9d9511ee4ea6612	superseded	ruby	word-count	class Phrase\n\n  attr_accessor :content, :word_counts\n\n  def initialize(content)\n    @content = content\n  end\n\n  def words\n    content.gsub(/\\W/, " ").split\n  end\n\n  def normalized_words\n    words.map(&:downcase)\n  end\n\n  def word_count\n    word_counts || calculate_word_counts\n  end\n\n  private\n\n  def calculate_word_counts\n    @word_counts = {}\n    normalized_words.each do |word|\n      increment(word)\n    end\n    @word_counts\n  end\n\n  def increment(word)\n    if @word_counts[word]\n      @word_counts[word] += 1\n    else\n      @word_counts[word] = 1\n    end\n  end\n\nend	\N	\N	0	1	2015-05-27 04:45:05	2015-05-27 04:45:05	118	word-count.rb	{"word-count.rb":"class Phrase\\n\\n  attr_accessor :content, :word_counts\\n\\n  def initialize(content)\\n    @content = content\\n  end\\n\\n  def words\\n    content.gsub(/\\\\W/, \\" \\").split\\n  end\\n\\n  def normalized_words\\n    words.map(\\u0026:downcase)\\n  end\\n\\n  def word_count\\n    word_counts || calculate_word_counts\\n  end\\n\\n  private\\n\\n  def calculate_word_counts\\n    @word_counts = {}\\n    normalized_words.each do |word|\\n      increment(word)\\n    end\\n    @word_counts\\n  end\\n\\n  def increment(word)\\n    if @word_counts[word]\\n      @word_counts[word] += 1\\n    else\\n      @word_counts[word] = 1\\n    end\\n  end\\n\\nend"}
179	36	b785f7cb3364082128e1b1ad	superseded	ruby	word-count	class Phrase\n\n  def initialize(content)\n    @content = content\n  end\n\n  def words\n    @content.split(/\\W+/)\n  end\n\n  def word_count\n    @word_counts || calculate_word_counts\n  end\n\n  private\n\n  def calculate_word_counts\n    @word_counts = Hash.new(0)\n    normalized_words.each do |word|\n      @word_counts[word] += 1\n    end\n    @word_counts\n  end\n\n  def normalized_words\n    words.map(&:downcase)\n  end\n\nend	\N	\N	0	2	2015-05-28 09:20:18	2015-05-28 09:20:18	118	word-count.rb	{"word-count.rb":"class Phrase\\n\\n  def initialize(content)\\n    @content = content\\n  end\\n\\n  def words\\n    @content.split(/\\\\W+/)\\n  end\\n\\n  def word_count\\n    @word_counts || calculate_word_counts\\n  end\\n\\n  private\\n\\n  def calculate_word_counts\\n    @word_counts = Hash.new(0)\\n    normalized_words.each do |word|\\n      @word_counts[word] += 1\\n    end\\n    @word_counts\\n  end\\n\\n  def normalized_words\\n    words.map(\\u0026:downcase)\\n  end\\n\\nend"}
180	36	48c2b14ae753148e1cbad1b5	done	ruby	word-count	class Phrase\n\n  def initialize(content)\n    @content = content\n  end\n\n  def words\n    @content.split(/\\W+/)\n  end\n\n  def word_count\n    @word_counts ||= calculate_word_counts\n  end\n\n  private\n\n  def calculate_word_counts\n    normalized_words.each_with_object(Hash.new(0)) { |word, hash| hash[word] += 1}\n  end\n\n  def normalized_words\n    words.map(&:downcase)\n  end\n\nend	2015-06-19 04:44:13	\N	0	4	2015-06-08 13:53:11	2015-06-08 13:53:11	118	word-count.rb	{"word-count.rb":"class Phrase\\n\\n  def initialize(content)\\n    @content = content\\n  end\\n\\n  def words\\n    @content.split(/\\\\W+/)\\n  end\\n\\n  def word_count\\n    @word_counts ||= calculate_word_counts\\n  end\\n\\n  private\\n\\n  def calculate_word_counts\\n    normalized_words.each_with_object(Hash.new(0)) { |word, hash| hash[word] += 1}\\n  end\\n\\n  def normalized_words\\n    words.map(\\u0026:downcase)\\n  end\\n\\nend"}
181	36	9312b076142b138e6924ec8a	superseded	ruby	word-count	class Phrase\n\n  def initialize(content)\n    @content = content\n  end\n\n  def words\n    @content.split(/\\W+/)\n  end\n\n  def word_count\n    @word_counts || calculate_word_counts\n  end\n\n  private\n\n  def calculate_word_counts\n    @word_counts = normalized_words.inject(Hash.new(0)) { |hash, word| hash[word] += 1; hash}\n  end\n\n  def normalized_words\n    words.map(&:downcase)\n  end\n\nend	\N	\N	0	3	2015-06-10 02:53:03	2015-06-10 02:53:03	118	word-count.rb	{"word-count.rb":"class Phrase\\n\\n  def initialize(content)\\n    @content = content\\n  end\\n\\n  def words\\n    @content.split(/\\\\W+/)\\n  end\\n\\n  def word_count\\n    @word_counts || calculate_word_counts\\n  end\\n\\n  private\\n\\n  def calculate_word_counts\\n    @word_counts = normalized_words.inject(Hash.new(0)) { |hash, word| hash[word] += 1; hash}\\n  end\\n\\n  def normalized_words\\n    words.map(\\u0026:downcase)\\n  end\\n\\nend"}
182	36	2a5cd03c4a2dc763866addf6	superseded	ruby	sieve	class Sieve\n\tdef initialize(number)\n\t\t@n = number\n\tend\n\n\tdef primes\n    @array_numb = (2..@n).reduce([]) do |acm, val|\n      acm << val\n    end\n    @array_numb.map do |v|\n      if (v != 0)\n        (v..@array_numb.length-1).map do |k|\n          if (@array_numb[k] % v == 0)\n            @array_numb[k] = 0\n          end\n        end\n      end\n    end\n    @array_numb.select do |val|\n      val != 0\n    end\n\tend\nend	\N	\N	0	1	2015-05-26 08:04:43	2015-05-26 08:04:43	119	sieve.rb	{"sieve.rb":"class Sieve\\n\\tdef initialize(number)\\n\\t\\t@n = number\\n\\tend\\n\\n\\tdef primes\\n    @array_numb = (2..@n).reduce([]) do |acm, val|\\n      acm \\u003c\\u003c val\\n    end\\n    @array_numb.map do |v|\\n      if (v != 0)\\n        (v..@array_numb.length-1).map do |k|\\n          if (@array_numb[k] % v == 0)\\n            @array_numb[k] = 0\\n          end\\n        end\\n      end\\n    end\\n    @array_numb.select do |val|\\n      val != 0\\n    end\\n\\tend\\nend"}
183	36	261b3bc3fb38bb8a1fe8a78e	done	ruby	sieve	class Sieve\n\tdef initialize(number)\n\t\t@n = number\n\tend\n\n\tdef primes\n    @array_numb = (2..@n).reduce([]) do |acm, val|\n      acm << val\n    end\n    @array_numb.map do |v|\n      if (v != 0)\n        (v..@array_numb.length-1).map do |k|\n          if (@array_numb[k] % v == 0)\n            @array_numb[k] = 0\n          end\n        end\n      end\n    end\n    @array_numb.select { |val| val != 0 }\n\tend\nend	2015-06-10 14:03:30	\N	0	2	2015-06-07 11:48:52	2015-06-07 11:48:52	119	sieve.rb	{"sieve.rb":"class Sieve\\n\\tdef initialize(number)\\n\\t\\t@n = number\\n\\tend\\n\\n\\tdef primes\\n    @array_numb = (2..@n).reduce([]) do |acm, val|\\n      acm \\u003c\\u003c val\\n    end\\n    @array_numb.map do |v|\\n      if (v != 0)\\n        (v..@array_numb.length-1).map do |k|\\n          if (@array_numb[k] % v == 0)\\n            @array_numb[k] = 0\\n          end\\n        end\\n      end\\n    end\\n    @array_numb.select { |val| val != 0 }\\n\\tend\\nend"}
184	36	913da810fb368eaf6254970c	done	ruby	hamming	class Hamming\n  def self.compute(reference_strand, other_strand)\n    common_length([reference_strand, other_strand]).times.count { |index| reference_strand[index] != other_strand[index] }\n  end\n\n  def self.common_length(strands)\n    strands.map(&:length).min\n  end\nend	2015-06-05 20:27:23	\N	0	3	2015-05-27 17:09:32	2015-05-27 17:09:32	120	hamming.rb	{"hamming.rb":"class Hamming\\n  def self.compute(reference_strand, other_strand)\\n    common_length([reference_strand, other_strand]).times.count { |index| reference_strand[index] != other_strand[index] }\\n  end\\n\\n  def self.common_length(strands)\\n    strands.map(\\u0026:length).min\\n  end\\nend"}
185	36	a04d246e5c35bf3722d912af	superseded	ruby	hamming	class Hamming\n  def self.compute(reference_strand, other_strand)\n    common_length = [reference_strand.size, other_strand.size].min\n    common_length.times.count { |index| reference_strand[index] != other_strand[index] }\n  end\nend	\N	\N	0	2	2015-05-29 16:32:59	2015-05-29 16:32:59	120	hamming.rb	{"hamming.rb":"class Hamming\\n  def self.compute(reference_strand, other_strand)\\n    common_length = [reference_strand.size, other_strand.size].min\\n    common_length.times.count { |index| reference_strand[index] != other_strand[index] }\\n  end\\nend"}
186	36	8f59428bbe0c1cfcc0831bc3	superseded	ruby	hamming	class Hamming\n  def self.compute(reference_strand, other_strand)\n    dna = DNA.new(reference_strand)\n    dna.hamming_distance(other_strand)\n  end\nend\n\nclass DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    common_length = [strand.size, other_strand.size].min\n    common_length.times.count { |index| strand[index] != other_strand[index] }\n  end\n\n  private\n\n  attr_reader :strand\nend	\N	\N	0	1	2015-06-02 08:07:48	2015-06-02 08:07:48	120	hamming.rb	{"hamming.rb":"class Hamming\\n  def self.compute(reference_strand, other_strand)\\n    dna = DNA.new(reference_strand)\\n    dna.hamming_distance(other_strand)\\n  end\\nend\\n\\nclass DNA\\n  def initialize(strand)\\n    @strand = strand\\n  end\\n\\n  def hamming_distance(other_strand)\\n    common_length = [strand.size, other_strand.size].min\\n    common_length.times.count { |index| strand[index] != other_strand[index] }\\n  end\\n\\n  private\\n\\n  attr_reader :strand\\nend"}
187	36	3d204fcc61a1085b9ea725d4	done	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\n\n"""\nBob answers 'Sure.' if you ask him a question.\nHe answers 'Whoa, chill out!' if you yell at him.\nHe says 'Fine. Be that way!' if you address him without actually saying\nanything.\nHe answers 'Whatever.' to anything else.\n"""\n\ndef hey(what):\n\n  #get rid of whitespace\n  what = what.strip()\n\n  if what == '':\n    return 'Fine. Be that way!'\n  elif what.isupper():\n    return 'Whoa, chill out!'\n  elif what[-1] == '?':\n    return 'Sure.'\n  else:\n    return 'Whatever.'	2015-06-12 21:41:33	\N	0	1	2015-06-06 03:14:09	2015-06-06 03:14:09	121	bob.py	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\n\\n\\"\\"\\"\\nBob answers 'Sure.' if you ask him a question.\\nHe answers 'Whoa, chill out!' if you yell at him.\\nHe says 'Fine. Be that way!' if you address him without actually saying\\nanything.\\nHe answers 'Whatever.' to anything else.\\n\\"\\"\\"\\n\\ndef hey(what):\\n\\n  #get rid of whitespace\\n  what = what.strip()\\n\\n  if what == '':\\n    return 'Fine. Be that way!'\\n  elif what.isupper():\\n    return 'Whoa, chill out!'\\n  elif what[-1] == '?':\\n    return 'Sure.'\\n  else:\\n    return 'Whatever.'"}
188	36	331525938c342598bf740739	done	python	leap	def is_leap_year(year):\n\tif year % 4 == 0:\n\t\tif year % 100 == 0:\n\t\t\treturn (year % 400 == 0)\n\n\t\treturn True\n\n\treturn False	2015-06-22 09:17:19.678526	\N	0	1	2015-06-15 16:07:45	2015-06-15 16:07:45	122	year.py	{"year.py":"def is_leap_year(year):\\n\\tif year % 4 == 0:\\n\\t\\tif year % 100 == 0:\\n\\t\\t\\treturn (year % 400 == 0)\\n\\n\\t\\treturn True\\n\\n\\treturn False"}
189	36	a5714e3a6dc8b0a3ab39612c	done	ruby	saddle-points	class Matrix\r\n\tattr_reader :rows, :columns, :saddle_points\r\n\r\n\tdef initialize(matrix)\r\n\t\t@rows = matrix.split("\\n").collect{|s| s.split(' ').map(&:to_i)}\r\n\t\t@columns = @rows.transpose\r\n\r\n\t\t@saddle_points = []\r\n\t\t@rows.each_with_index do |row, r|  \r\n\t\t\tmax = row.max\r\n\t\t\trow.each_with_index do |value, c|\r\n\t\t\t\t@saddle_points << [r, c] if value == max && value == @columns[c].min\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r	2015-06-11 04:30:06	\N	0	1	2015-06-02 17:49:51	2015-06-02 17:49:51	123	matrix.rb	{"matrix.rb":"class Matrix\\r\\n\\tattr_reader :rows, :columns, :saddle_points\\r\\n\\r\\n\\tdef initialize(matrix)\\r\\n\\t\\t@rows = matrix.split(\\"\\\\n\\").collect{|s| s.split(' ').map(\\u0026:to_i)}\\r\\n\\t\\t@columns = @rows.transpose\\r\\n\\r\\n\\t\\t@saddle_points = []\\r\\n\\t\\t@rows.each_with_index do |row, r|  \\r\\n\\t\\t\\tmax = row.max\\r\\n\\t\\t\\trow.each_with_index do |value, c|\\r\\n\\t\\t\\t\\t@saddle_points \\u003c\\u003c [r, c] if value == max \\u0026\\u0026 value == @columns[c].min\\r\\n\\t\\t\\tend\\r\\n\\t\\tend\\r\\n\\tend\\r\\nend\\r"}
190	36	90fb39f8050925a7a2fc94b0	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	2015-05-31 17:09:19	2015-05-31 17:09:19	124	Cipher.pm	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
191	36	e3d1ffa8d0a0b917d2090d44	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	2015-06-22 09:17:19.763634	\N	0	2	2015-06-12 22:51:20	2015-06-12 22:51:20	124	Cipher.pm	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
192	36	cfc66f656d5c43687312961c	superseded	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) =>\r\n         l == r match {\r\n           case true => 0\r\n           case false => 1\r\n         }\r\n     } count(_ == 1)\r\n   }\r\n }\r	\N	\N	0	1	2015-05-30 01:09:52	2015-05-30 01:09:52	125	hamming.scala	{"hamming.scala":"object Hamming {\\r\\n   def compute(left:String, right:String):Int = {\\r\\n     left zip right map {\\r\\n       case (l, r) =\\u003e\\r\\n         l == r match {\\r\\n           case true =\\u003e 0\\r\\n           case false =\\u003e 1\\r\\n         }\\r\\n     } count(_ == 1)\\r\\n   }\\r\\n }\\r"}
193	36	4229aa0ca91e5b05bc4b80d1	done	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) => l == r\r\n     } count(_ == true)\r\n   }\r\n }\r	2015-06-05 03:20:05	\N	0	2	2015-05-31 17:06:23	2015-05-31 17:06:23	125	hamming.scala	{"hamming.scala":"object Hamming {\\r\\n   def compute(left:String, right:String):Int = {\\r\\n     left zip right map {\\r\\n       case (l, r) =\\u003e l == r\\r\\n     } count(_ == true)\\r\\n   }\\r\\n }\\r"}
194	36	3ec2cc9153a730498b1a8b4f	done	ruby	nth-prime	require 'prime'\nclass Prime\n\tdef self.nth num\n\t\traise ArgumentError if num == 0\n\t\t(Prime.first num).last\n\tend\nend	2015-06-03 12:42:00	\N	0	1	2015-05-30 07:33:10	2015-05-30 07:33:10	126	prime.rb	{"prime.rb":"require 'prime'\\nclass Prime\\n\\tdef self.nth num\\n\\t\\traise ArgumentError if num == 0\\n\\t\\t(Prime.first num).last\\n\\tend\\nend"}
264	14	2f734ded1f63861817cbc53a	pending	python	sieve	def sieve(n):\n\n    sieve_range = range(2, n+1)\n    elements = [[i, 'unmarked'] for i in sieve_range]\n\n    for i, element in enumerate(elements):\n        value, state = element\n        if state == 'unmarked':\n\n            rest = elements[(i+1):]\n            for item in rest:\n                if item[0] % value == 0:\n                    item[1] = 'marked'\n\n    return [value for value,state in elements\n                if state == 'unmarked']	\N	\N	0	1	2015-05-08 03:36:23	2015-05-08 03:36:23	165	sieve.py	{"sieve.py":"def sieve(n):\\n\\n    sieve_range = range(2, n+1)\\n    elements = [[i, 'unmarked'] for i in sieve_range]\\n\\n    for i, element in enumerate(elements):\\n        value, state = element\\n        if state == 'unmarked':\\n\\n            rest = elements[(i+1):]\\n            for item in rest:\\n                if item[0] % value == 0:\\n                    item[1] = 'marked'\\n\\n    return [value for value,state in elements\\n                if state == 'unmarked']"}
265	14	9342875e27a52947c9937741	pending	python	bob	class Bob:\n    def hey(self, s):\n        if not s or s.isspace():\n            return 'Fine. Be that way!'\n        elif s.isupper():\n            return 'Woah, chill out!'\n        elif s[-1] == '?':\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	\N	0	1	2015-05-19 07:20:55	2015-05-19 07:20:55	166	bob.py	{"bob.py":"class Bob:\\n    def hey(self, s):\\n        if not s or s.isspace():\\n            return 'Fine. Be that way!'\\n        elif s.isupper():\\n            return 'Woah, chill out!'\\n        elif s[-1] == '?':\\n            return 'Sure.'\\n        else:\\n            return 'Whatever.'"}
195	36	ab6d1210a6ebc8fea7e324b5	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.find_all { |candidate| anagram?(candidate) }\n  end\n\n  def anagram?(candidate)\n    candidate = Anagram.new(candidate.to_s)\n    same_characters?(candidate) && different_word?(candidate)\n  end\n\n  def characters\n    @characters ||= word.chars.sort.join\n  end\n\n  private\n\n  def different_word?(other)\n    word != other.word\n  end\n\n  def same_characters?(other)\n    characters == other.characters\n  end\nend	2015-06-20 17:35:08	\N	0	1	2015-06-11 23:08:51	2015-06-11 23:08:51	127	anagram.rb	{"anagram.rb":"class Anagram\\n  attr_reader :word\\n\\n  def initialize(word)\\n    @word = word.downcase\\n  end\\n\\n  def match(candidates)\\n    candidates.find_all { |candidate| anagram?(candidate) }\\n  end\\n\\n  def anagram?(candidate)\\n    candidate = Anagram.new(candidate.to_s)\\n    same_characters?(candidate) \\u0026\\u0026 different_word?(candidate)\\n  end\\n\\n  def characters\\n    @characters ||= word.chars.sort.join\\n  end\\n\\n  private\\n\\n  def different_word?(other)\\n    word != other.word\\n  end\\n\\n  def same_characters?(other)\\n    characters == other.characters\\n  end\\nend"}
196	36	2da6de108ddc2d9785755450	done	haskell	roman-numerals	module Roman (numerals) where\n\nnumerals :: Int -> String\nnumerals = go numeralMap\n  where\n    go pairs@((value, digits):pairs') n\n      | n >= value = digits ++ go pairs (n - value)\n      | otherwise  = go pairs' n\n    go [] _ = ""\n    numeralMap = [ (1000, "M"), (900, "CM")\n                 , (500, "D"), (400, "CD")\n                 , (100, "C"), (90, "XC")\n                 , (50, "L"), (40, "XL")\n                 , (10, "X"), (9, "IX")\n                 , (5, "V"), (4, "IV")\n                 , (1, "I") ]	2015-06-09 07:26:06	\N	0	1	2015-06-07 09:26:08	2015-06-07 09:26:08	128	roman-numerals.hs	{"roman-numerals.hs":"module Roman (numerals) where\\n\\nnumerals :: Int -\\u003e String\\nnumerals = go numeralMap\\n  where\\n    go pairs@((value, digits):pairs') n\\n      | n \\u003e= value = digits ++ go pairs (n - value)\\n      | otherwise  = go pairs' n\\n    go [] _ = \\"\\"\\n    numeralMap = [ (1000, \\"M\\"), (900, \\"CM\\")\\n                 , (500, \\"D\\"), (400, \\"CD\\")\\n                 , (100, \\"C\\"), (90, \\"XC\\")\\n                 , (50, \\"L\\"), (40, \\"XL\\")\\n                 , (10, \\"X\\"), (9, \\"IX\\")\\n                 , (5, \\"V\\"), (4, \\"IV\\")\\n                 , (1, \\"I\\") ]"}
197	36	51cf006a75cd4dc1919f0a55	done	clojure	word-count	(ns phrase\n  (:require [clojure.string :as string]))\n\n(defn words [text]\n  (-> text\n      string/lower-case\n      (string/split #"[^\\w]+")))\n\n(defn word-count [text]\n  (frequencies (words text)))	2015-06-12 06:33:58	\N	0	1	2015-06-04 09:44:37	2015-06-04 09:44:37	129	word-count.clj	{"word-count.clj":"(ns phrase\\n  (:require [clojure.string :as string]))\\n\\n(defn words [text]\\n  (-\\u003e text\\n      string/lower-case\\n      (string/split #\\"[^\\\\w]+\\")))\\n\\n(defn word-count [text]\\n  (frequencies (words text)))"}
198	36	822dbdaf187fc0f3c5a51ba8	done	ruby	leap	class Year < Struct.new(:year)\n\n  def leap?\n    return true if divisible_by? 400\n    return false if divisible_by? 100\n\n    divisible_by? 4\n  end\n\n  def divisible_by? number\n    year % number == 0\n  end\nend	2015-06-09 13:36:27	\N	0	1	2015-05-31 08:40:17	2015-05-31 08:40:17	130	leap.rb	{"leap.rb":"class Year \\u003c Struct.new(:year)\\n\\n  def leap?\\n    return true if divisible_by? 400\\n    return false if divisible_by? 100\\n\\n    divisible_by? 4\\n  end\\n\\n  def divisible_by? number\\n    year % number == 0\\n  end\\nend"}
199	36	3d828dd0b1bac6af9c3471ec	done	haskell	robot-name	module Robot (Robot, robotName, mkRobot, resetName) where\n\n\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\nimport Control.Monad (void)\nimport System.Random (randomRIO)\n\ndata Robot = Robot {\n  getName :: MVar String\n}\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newMVar >>= return . Robot\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ getName r\n\nresetName :: Robot -> IO()\nresetName r = void(generateName >>= swapMVar (getName r))\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO name\n  where name = [char, char, int, int, int]\n        char = ('A', 'Z')\n        int  = ('0', '9')	2015-06-20 09:16:46	\N	0	1	2015-06-10 12:19:32	2015-06-10 12:19:32	131	Robot.hs	{"Robot.hs":"module Robot (Robot, robotName, mkRobot, resetName) where\\n\\n\\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\\nimport Control.Monad (void)\\nimport System.Random (randomRIO)\\n\\ndata Robot = Robot {\\n  getName :: MVar String\\n}\\n\\nmkRobot :: IO Robot\\nmkRobot = generateName \\u003e\\u003e= newMVar \\u003e\\u003e= return . Robot\\n\\nrobotName :: Robot -\\u003e IO String\\nrobotName r = readMVar $ getName r\\n\\nresetName :: Robot -\\u003e IO()\\nresetName r = void(generateName \\u003e\\u003e= swapMVar (getName r))\\n\\ngenerateName :: IO String\\ngenerateName = mapM randomRIO name\\n  where name = [char, char, int, int, int]\\n        char = ('A', 'Z')\\n        int  = ('0', '9')"}
200	36	1290e4e31c9c958a77b91b29	superseded	javascript	beer-song	var Beer = function(){\n\tvar moreBot1,\n\t\t\tmoreBot2,\n\t\t\tlessBot,\n\t\t\tvodka = 'one',\n\t\t\tpartOne = function(){ return (moreBot1 + " of beer on the wall, "+ moreBot2 +" of beer.\\n");},\n\t\t\tpartTwo = function(){ return ("Take "+vodka+" down and pass it around, "+lessBot+" of beer on the wall.\\n");},\n\t\t\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\n');};\n\n\tthis.verse = function(numBot){\n\t\tif (numBot > 1){\n\t\t\tmoreBot1 = numBot + ' bottles';\n\t\t\tmoreBot2 = numBot + ' bottles';\n\t\t\tlessBot = numBot-1 + ' bottles';\n\t\t\tvodka = 'one';\n\t\t\treturn partOne() + partTwo();\n\t\t} else if (numBot === 1) {\n\t\t\tmoreBot1 = '1 bottle';\n\t\t\tmoreBot2 = '1 bottle';\n\t\t\tvodka = 'it';\n\t\t\tlessBot = 'no more bottles';\n\t\t\treturn partOne() + partTwo();\n\t\t} else {\n\t\t\tmoreBot1 = 'No more bottles';\n\t\t\tmoreBot2 = 'no more bottles';\n\t\t\treturn partOne() + partLast();\n\t\t}\n\t};\n\n\tthis.sing = function (){\n\t\tvar songEnd = arguments[1] === undefined ? 0 : arguments[1],\n\t\t\t\tsongHolder = '',\n\t\t\t\tsongBegin = arguments[0];\n\t\twhile (songBegin >= songEnd){\n\t\t\tsongHolder += this.verse(songBegin);\n\t\t\tsongBegin--;\n\t\t\tif (songBegin-songEnd < 0) break;\n\t\t\tsongHolder += '\\n';\n\t\t}\n\t\treturn songHolder;\n\t};\n};\n\nvar Alc = new Beer();\n\nmodule.exports = Alc;	\N	\N	0	1	2015-05-26 08:58:51	2015-05-26 08:58:51	132	beer-song.js	{"beer-song.js":"var Beer = function(){\\n\\tvar moreBot1,\\n\\t\\t\\tmoreBot2,\\n\\t\\t\\tlessBot,\\n\\t\\t\\tvodka = 'one',\\n\\t\\t\\tpartOne = function(){ return (moreBot1 + \\" of beer on the wall, \\"+ moreBot2 +\\" of beer.\\\\n\\");},\\n\\t\\t\\tpartTwo = function(){ return (\\"Take \\"+vodka+\\" down and pass it around, \\"+lessBot+\\" of beer on the wall.\\\\n\\");},\\n\\t\\t\\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n');};\\n\\n\\tthis.verse = function(numBot){\\n\\t\\tif (numBot \\u003e 1){\\n\\t\\t\\tmoreBot1 = numBot + ' bottles';\\n\\t\\t\\tmoreBot2 = numBot + ' bottles';\\n\\t\\t\\tlessBot = numBot-1 + ' bottles';\\n\\t\\t\\tvodka = 'one';\\n\\t\\t\\treturn partOne() + partTwo();\\n\\t\\t} else if (numBot === 1) {\\n\\t\\t\\tmoreBot1 = '1 bottle';\\n\\t\\t\\tmoreBot2 = '1 bottle';\\n\\t\\t\\tvodka = 'it';\\n\\t\\t\\tlessBot = 'no more bottles';\\n\\t\\t\\treturn partOne() + partTwo();\\n\\t\\t} else {\\n\\t\\t\\tmoreBot1 = 'No more bottles';\\n\\t\\t\\tmoreBot2 = 'no more bottles';\\n\\t\\t\\treturn partOne() + partLast();\\n\\t\\t}\\n\\t};\\n\\n\\tthis.sing = function (){\\n\\t\\tvar songEnd = arguments[1] === undefined ? 0 : arguments[1],\\n\\t\\t\\t\\tsongHolder = '',\\n\\t\\t\\t\\tsongBegin = arguments[0];\\n\\t\\twhile (songBegin \\u003e= songEnd){\\n\\t\\t\\tsongHolder += this.verse(songBegin);\\n\\t\\t\\tsongBegin--;\\n\\t\\t\\tif (songBegin-songEnd \\u003c 0) break;\\n\\t\\t\\tsongHolder += '\\\\n';\\n\\t\\t}\\n\\t\\treturn songHolder;\\n\\t};\\n};\\n\\nvar Alc = new Beer();\\n\\nmodule.exports = Alc;"}
201	36	c3e1acdf099e6de7c14704e7	done	javascript	beer-song	var Beer = function(){\n\tvar moreBot1,\n\t\t\tmoreBot2,\n\t\t\tlessBot,\n\t\t\tvodka,\n\t\t\tfinalSong,\n\t\t\tpartOne = function(){ return (moreBot1 + " of beer on the wall, "+ moreBot2 +" of beer.\\n");},\n\t\t\tpartTwo = function(){ return ("Take "+vodka+" down and pass it around, "+lessBot+" of beer on the wall.\\n");},\n\t\t\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\n');};\n\n\tthis.verse = function(numBot){\n\t\tmoreBot1 = numBot > 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'No more bottles');\n\t\tmoreBot2 = numBot > 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'no more bottles');\n\t\tlessBot = numBot > 1 ? numBot-1 + ' bottles' : 'no more bottles';\n\t\tvodka = numBot > 1 ? 'one' : 'it';\n\t\tfinalSong = numBot >= 1 ? partOne() + partTwo() : partOne() + partLast();\n\t\treturn finalSong; \n\t};\n\n\tthis.sing = function (x, y){\n\t\tvar comboSong = '';\n\t\twhile (x >= (y||0)){\n\t\t\tcomboSong += this.verse(x);\n\t\t\tx--;\n\t\t\tif ((x - y) < 0) break;\n\t\t\tcomboSong += '\\n';\n\t\t}\n\t\treturn comboSong;\n\t};\n};\nvar Alc = new Beer();\nmodule.exports = Alc;	2015-06-13 03:31:23	\N	0	2	2015-06-01 16:02:26	2015-06-01 16:02:26	132	beer-song.js	{"beer-song.js":"var Beer = function(){\\n\\tvar moreBot1,\\n\\t\\t\\tmoreBot2,\\n\\t\\t\\tlessBot,\\n\\t\\t\\tvodka,\\n\\t\\t\\tfinalSong,\\n\\t\\t\\tpartOne = function(){ return (moreBot1 + \\" of beer on the wall, \\"+ moreBot2 +\\" of beer.\\\\n\\");},\\n\\t\\t\\tpartTwo = function(){ return (\\"Take \\"+vodka+\\" down and pass it around, \\"+lessBot+\\" of beer on the wall.\\\\n\\");},\\n\\t\\t\\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n');};\\n\\n\\tthis.verse = function(numBot){\\n\\t\\tmoreBot1 = numBot \\u003e 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'No more bottles');\\n\\t\\tmoreBot2 = numBot \\u003e 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'no more bottles');\\n\\t\\tlessBot = numBot \\u003e 1 ? numBot-1 + ' bottles' : 'no more bottles';\\n\\t\\tvodka = numBot \\u003e 1 ? 'one' : 'it';\\n\\t\\tfinalSong = numBot \\u003e= 1 ? partOne() + partTwo() : partOne() + partLast();\\n\\t\\treturn finalSong; \\n\\t};\\n\\n\\tthis.sing = function (x, y){\\n\\t\\tvar comboSong = '';\\n\\t\\twhile (x \\u003e= (y||0)){\\n\\t\\t\\tcomboSong += this.verse(x);\\n\\t\\t\\tx--;\\n\\t\\t\\tif ((x - y) \\u003c 0) break;\\n\\t\\t\\tcomboSong += '\\\\n';\\n\\t\\t}\\n\\t\\treturn comboSong;\\n\\t};\\n};\\nvar Alc = new Beer();\\nmodule.exports = Alc;"}
202	36	dcd0c7f8935d29fec8ce3a32	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	2015-06-09 11:27:51	\N	0	1	2015-06-03 22:59:11	2015-06-03 22:59:11	133	/ruby/say/say.rb	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
203	36	16a1e56cbc2ccad56a01fe9b	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f xs = accumulate' f xs []\n\naccumulate' :: (a -> b) -> [a] -> [b] -> [b]\naccumulate' _ [] acc = reverse acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )	\N	\N	0	1	2015-05-27 06:56:17	2015-05-27 06:56:17	134	Accumulate.hs	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f xs = accumulate' f xs []\\n\\naccumulate' :: (a -\\u003e b) -\\u003e [a] -\\u003e [b] -\\u003e [b]\\naccumulate' _ [] acc = reverse acc\\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )"}
204	36	b5fe87d62b784a90245e80ab	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	2015-06-03 16:48:17	\N	0	2	2015-06-02 07:03:32	2015-06-02 07:03:32	134	Accumulate.hs	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
205	36	086630addfa82153b1d41a85	done	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    result = []\n    result << "Pling" if num % 3 == 0\n    result << "Plang" if num % 5 == 0\n    result << "Plong" if num % 7 == 0\n\n    if result.empty?\n      return num.to_s\n    else\n      return result.join\n    end\n  end\nend	2015-05-24 03:20:51	\N	0	1	2015-05-23 06:26:18	2015-05-23 06:26:18	135	raindrops.rb	{"raindrops.rb":"class Raindrops\\n  def self.convert(num)\\n    result = []\\n    result \\u003c\\u003c \\"Pling\\" if num % 3 == 0\\n    result \\u003c\\u003c \\"Plang\\" if num % 5 == 0\\n    result \\u003c\\u003c \\"Plong\\" if num % 7 == 0\\n\\n    if result.empty?\\n      return num.to_s\\n    else\\n      return result.join\\n    end\\n  end\\nend"}
266	14	04e0ad07fdad006de44853cc	pending	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter isAnagram where\n  isAnagram w = word' /= w' && word'' == sort w' where w' = lower w\n  lower  = map toLower\n  word'  = lower word\n  word'' = sort word'	\N	\N	0	2	2015-04-09 23:53:51	2015-04-09 23:53:51	167	Anagram.hs	{"Anagram.hs":"module Anagram (anagramsFor) where\\n\\nimport Data.Char (toLower)\\nimport Data.List (sort)\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor word = filter isAnagram where\\n  isAnagram w = word' /= w' \\u0026\\u0026 word'' == sort w' where w' = lower w\\n  lower  = map toLower\\n  word'  = lower word\\n  word'' = sort word'"}
267	14	6efcdccc604afc859812a57a	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter isAnagram where\n  isAnagram w = lower word /= lower w && normalize word == normalize w\n  lower       = map toLower\n  normalize   = sort . lower	\N	\N	0	1	2015-05-12 21:02:43	2015-05-12 21:02:43	167	Anagram.hs	{"Anagram.hs":"module Anagram (anagramsFor) where\\n\\nimport Data.Char (toLower)\\nimport Data.List (sort)\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor word = filter isAnagram where\\n  isAnagram w = lower word /= lower w \\u0026\\u0026 normalize word == normalize w\\n  lower       = map toLower\\n  normalize   = sort . lower"}
268	14	cf7849796d08818da88db03c	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	2015-04-11 11:04:48	2015-04-11 11:04:48	168	/python/wordy/wordy.py	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
269	14	7eac5ed404bddc1d91f44148	pending	python	difference-of-squares	def difference(x):\r\n    return square_of_sum(x) - sum_of_squares(x)\r\n\r\ndef square_of_sum(x):\r\n    return sum(range(1, x + 1)) ** 2\r\n\r\ndef sum_of_squares(x):\r\n    return sum(i ** 2 for i in range(1, x + 1))\r	\N	\N	0	1	2015-04-18 16:36:50	2015-04-18 16:36:50	169	difference_of_squares.py	{"difference_of_squares.py":"def difference(x):\\r\\n    return square_of_sum(x) - sum_of_squares(x)\\r\\n\\r\\ndef square_of_sum(x):\\r\\n    return sum(range(1, x + 1)) ** 2\\r\\n\\r\\ndef sum_of_squares(x):\\r\\n    return sum(i ** 2 for i in range(1, x + 1))\\r"}
270	14	d02da2e2a2b9a331b6d176e3	superseded	ruby	gigasecond	class Gigasecond\r\n\tdef self.from(d)\r\n\t\tdt = Time.parse d.to_s\r\n\t\treturn Date.parse (dt+1000000000).to_s\r\n\tend\r\nend	\N	\N	0	1	2015-04-11 14:22:58	2015-04-11 14:22:58	170	gigasecond.rb	{"gigasecond.rb":"class Gigasecond\\r\\n\\tdef self.from(d)\\r\\n\\t\\tdt = Time.parse d.to_s\\r\\n\\t\\treturn Date.parse (dt+1000000000).to_s\\r\\n\\tend\\r\\nend"}
206	36	ef008bfadcb25db12b70898d	superseded	ruby	rna-transcription	class Nucleotide < Struct.new(:name, :abbreviation)\n  def to_s\n    abbreviation\n  end\n\n  alias_method :to_str, :to_s\nend\n\nclass DNA\n  NUCLEOTIDES = {\n    adenine: Nucleotide.new("Adenine", "A"),\n    cytosine: Nucleotide.new("Cytosine", "C"),\n    guanine: Nucleotide.new("Guanine", "G"),\n    thymine: Nucleotide.new("Thymine", "T"),\n    uracil: Nucleotide.new("Uracil", "U"),\n  }\n\n  def initialize(coding_strand)\n    @coding_strand = coding_strand\n  end\n\n  def to_rna\n    transcribe_to_rna\n  end\n\n  private\n    def transcribe_to_rna\n      @coding_strand.gsub(NUCLEOTIDES[:thymine], \n                          NUCLEOTIDES[:uracil])\n    end\nend	\N	\N	0	1	2015-06-06 10:35:06	2015-06-06 10:35:06	136	rna-transcription.rb	{"rna-transcription.rb":"class Nucleotide \\u003c Struct.new(:name, :abbreviation)\\n  def to_s\\n    abbreviation\\n  end\\n\\n  alias_method :to_str, :to_s\\nend\\n\\nclass DNA\\n  NUCLEOTIDES = {\\n    adenine: Nucleotide.new(\\"Adenine\\", \\"A\\"),\\n    cytosine: Nucleotide.new(\\"Cytosine\\", \\"C\\"),\\n    guanine: Nucleotide.new(\\"Guanine\\", \\"G\\"),\\n    thymine: Nucleotide.new(\\"Thymine\\", \\"T\\"),\\n    uracil: Nucleotide.new(\\"Uracil\\", \\"U\\"),\\n  }\\n\\n  def initialize(coding_strand)\\n    @coding_strand = coding_strand\\n  end\\n\\n  def to_rna\\n    transcribe_to_rna\\n  end\\n\\n  private\\n    def transcribe_to_rna\\n      @coding_strand.gsub(NUCLEOTIDES[:thymine], \\n                          NUCLEOTIDES[:uracil])\\n    end\\nend"}
207	36	6666edc72d058e1540c99e7f	done	ruby	rna-transcription	class Nucleotide < Struct.new(:name, :abbreviation)\n  def to_str\n    abbreviation\n  end\nend\n\nclass DNA\n  NUCLEOTIDES = {\n    adenine: Nucleotide.new("Adenine", "A"),\n    cytosine: Nucleotide.new("Cytosine", "C"),\n    guanine: Nucleotide.new("Guanine", "G"),\n    thymine: Nucleotide.new("Thymine", "T"),\n    uracil: Nucleotide.new("Uracil", "U"),\n  }\n\n  def initialize(coding_strand)\n    @coding_strand = coding_strand\n  end\n\n  def to_rna\n    @coding_strand.gsub(NUCLEOTIDES[:thymine], \n                        NUCLEOTIDES[:uracil])\n  end\nend	2015-06-12 07:10:59	\N	0	2	2015-06-09 01:01:30	2015-06-09 01:01:30	136	rna-transcription.rb	{"rna-transcription.rb":"class Nucleotide \\u003c Struct.new(:name, :abbreviation)\\n  def to_str\\n    abbreviation\\n  end\\nend\\n\\nclass DNA\\n  NUCLEOTIDES = {\\n    adenine: Nucleotide.new(\\"Adenine\\", \\"A\\"),\\n    cytosine: Nucleotide.new(\\"Cytosine\\", \\"C\\"),\\n    guanine: Nucleotide.new(\\"Guanine\\", \\"G\\"),\\n    thymine: Nucleotide.new(\\"Thymine\\", \\"T\\"),\\n    uracil: Nucleotide.new(\\"Uracil\\", \\"U\\"),\\n  }\\n\\n  def initialize(coding_strand)\\n    @coding_strand = coding_strand\\n  end\\n\\n  def to_rna\\n    @coding_strand.gsub(NUCLEOTIDES[:thymine], \\n                        NUCLEOTIDES[:uracil])\\n  end\\nend"}
208	36	ef5bcdc0e6002bc1f2c81b92	done	javascript	nucleotide-count	function DNA(sequence) {\n  this.sequence = sequence;\n\n  this.nucleotideCounts = {\n    A: this.count('A'),\n    T: this.count('T'),\n    C: this.count('C'),\n    G: this.count('G')\n  };\n};\n\nDNA.prototype.count = function(type) {\n  if (this._isUnknownType(type))\n    throw new Error("Invalid Nucleotide");\n\n  matches = this.sequence.match(new RegExp(type, 'g'));\n  return matches ? matches.length : 0;\n};\n\nDNA.prototype._isUnknownType = function(type) {\n  return ['A', 'T', 'C', 'G', 'U'].indexOf(type) === -1;\n};\n\nmodule.exports = DNA;	2015-05-29 13:14:57	\N	0	1	2015-05-26 21:13:48	2015-05-26 21:13:48	137	nucleotide-count.js	{"nucleotide-count.js":"function DNA(sequence) {\\n  this.sequence = sequence;\\n\\n  this.nucleotideCounts = {\\n    A: this.count('A'),\\n    T: this.count('T'),\\n    C: this.count('C'),\\n    G: this.count('G')\\n  };\\n};\\n\\nDNA.prototype.count = function(type) {\\n  if (this._isUnknownType(type))\\n    throw new Error(\\"Invalid Nucleotide\\");\\n\\n  matches = this.sequence.match(new RegExp(type, 'g'));\\n  return matches ? matches.length : 0;\\n};\\n\\nDNA.prototype._isUnknownType = function(type) {\\n  return ['A', 'T', 'C', 'G', 'U'].indexOf(type) === -1;\\n};\\n\\nmodule.exports = DNA;"}
225	36	35cb7588b1d4853a9531e137	done	perl5	space-age	﻿#!/usr/bin/env perl -w\r\nuse v5.018;\r\n\r\npackage SpaceAge;\r\n\r\nsub new {\r\n\tmy $class = shift;\r\n\tmy ($sec) = @_;\r\n\tmy %h = (\r\n\t\tEarth => 1, \r\n\t\tMercury => .2408467,\r\n\t\tVenus => .61519726,\r\n\t\tMars => 1.8808158,\r\n\t\tJupiter => 11.862615,\r\n\t\tSaturn => 29.447498,\r\n\t\tUranus => 84.016846,\r\n\t\tNeptune => 164.79132,\r\n\t);\r\n\tfor (keys %h) {\r\n\t\t$h{$_} *= 31557600;\r\n\t}\r\n\treturn bless {\r\n\t\th => \\%h,\r\n\t\tsec => $sec,\r\n\t}, $class;\r\n}\r\n\r\nsub seconds {\r\n\tmy $self = shift;\r\n\treturn $self->{sec};\r\n}\r\n\r\nsub on_earth {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'earth'};\r\n}\r\nsub on_mercury {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'mercury'};\r\n}\r\nsub on_venus {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'venus'};\r\n}\r\nsub on_mars {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'mars'};\r\n}\r\nsub on_jupiter {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'jupiter'};\r\n}\r\nsub on_saturn {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'saturn'};\r\n}\r\nsub on_uranus {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'uranus'};\r\n}\r\nsub on_neptune {\r\n\tmy $self = shift;\r\n\treturn sprintf '%.2f', $self->{sec} / $self->{h}{ucfirst 'neptune'};\r\n}\r\n\r\n\r\n1;	2015-06-08 09:14:40	\N	0	1	2015-06-05 13:07:38	2015-06-05 13:07:38	149	SpaceAge.pm	{"SpaceAge.pm":"﻿#!/usr/bin/env perl -w\\r\\nuse v5.018;\\r\\n\\r\\npackage SpaceAge;\\r\\n\\r\\nsub new {\\r\\n\\tmy $class = shift;\\r\\n\\tmy ($sec) = @_;\\r\\n\\tmy %h = (\\r\\n\\t\\tEarth =\\u003e 1, \\r\\n\\t\\tMercury =\\u003e .2408467,\\r\\n\\t\\tVenus =\\u003e .61519726,\\r\\n\\t\\tMars =\\u003e 1.8808158,\\r\\n\\t\\tJupiter =\\u003e 11.862615,\\r\\n\\t\\tSaturn =\\u003e 29.447498,\\r\\n\\t\\tUranus =\\u003e 84.016846,\\r\\n\\t\\tNeptune =\\u003e 164.79132,\\r\\n\\t);\\r\\n\\tfor (keys %h) {\\r\\n\\t\\t$h{$_} *= 31557600;\\r\\n\\t}\\r\\n\\treturn bless {\\r\\n\\t\\th =\\u003e \\\\%h,\\r\\n\\t\\tsec =\\u003e $sec,\\r\\n\\t}, $class;\\r\\n}\\r\\n\\r\\nsub seconds {\\r\\n\\tmy $self = shift;\\r\\n\\treturn $self-\\u003e{sec};\\r\\n}\\r\\n\\r\\nsub on_earth {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'earth'};\\r\\n}\\r\\nsub on_mercury {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'mercury'};\\r\\n}\\r\\nsub on_venus {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'venus'};\\r\\n}\\r\\nsub on_mars {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'mars'};\\r\\n}\\r\\nsub on_jupiter {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'jupiter'};\\r\\n}\\r\\nsub on_saturn {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'saturn'};\\r\\n}\\r\\nsub on_uranus {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'uranus'};\\r\\n}\\r\\nsub on_neptune {\\r\\n\\tmy $self = shift;\\r\\n\\treturn sprintf '%.2f', $self-\\u003e{sec} / $self-\\u003e{h}{ucfirst 'neptune'};\\r\\n}\\r\\n\\r\\n\\r\\n1;"}
226	36	5902c3fcc9849ec030b800c8	superseded	ruby	grains	class Grains\n  def square(space)\n    2 ** (space - 1)\n  end\n\n  def total\n    total = 0\n\n    (1..64).each do |space|\n      total += square(space)\n    end\n    \n    total\n  end\nend	\N	\N	0	1	2015-05-29 15:08:50	2015-05-29 15:08:50	150	grains.rb	{"grains.rb":"class Grains\\n  def square(space)\\n    2 ** (space - 1)\\n  end\\n\\n  def total\\n    total = 0\\n\\n    (1..64).each do |space|\\n      total += square(space)\\n    end\\n    \\n    total\\n  end\\nend"}
271	14	fbddef7b7e1fde1a4058a862	superseded	ruby	gigasecond	class Gigasecond\r\n\t# return a date 1 billion seconds (a Gigasecond) from the given date.\r\n\tdef self.from(d)\r\n\t\tdt = Time.parse d.to_s\r\n\t\treturn Date.parse (dt+1000000000).to_s\r\n\tend\r\nend	\N	\N	0	2	2015-04-12 23:16:38	2015-04-12 23:16:38	170	gigasecond.rb	{"gigasecond.rb":"class Gigasecond\\r\\n\\t# return a date 1 billion seconds (a Gigasecond) from the given date.\\r\\n\\tdef self.from(d)\\r\\n\\t\\tdt = Time.parse d.to_s\\r\\n\\t\\treturn Date.parse (dt+1000000000).to_s\\r\\n\\tend\\r\\nend"}
272	14	6b989e33a976a1e6f3abb00d	pending	ruby	gigasecond	class Gigasecond\r\n\t# return a date 1 billion seconds (a Gigasecond) from the given date.\r\n\tdef self.from(d)\r\n\t\treturn (d.to_time+10**9).to_date\r\n\tend\r\nend	\N	\N	0	3	2015-04-15 03:33:31	2015-04-15 03:33:31	170	gigasecond.rb	{"gigasecond.rb":"class Gigasecond\\r\\n\\t# return a date 1 billion seconds (a Gigasecond) from the given date.\\r\\n\\tdef self.from(d)\\r\\n\\t\\treturn (d.to_time+10**9).to_date\\r\\n\\tend\\r\\nend"}
273	14	1ddfe39e6f2260ada4a9cfeb	superseded	python	word-count	def word_count(phrase=""):\n\twords = {}\n\tfor word in phrase.split():\n\t\twords[word] = words.get(word,0) + 1;\n\treturn words\n\t	\N	\N	0	1	2015-04-01 18:46:12	2015-04-01 18:46:12	171	wordcount.py	{"wordcount.py":"def word_count(phrase=\\"\\"):\\n\\twords = {}\\n\\tfor word in phrase.split():\\n\\t\\twords[word] = words.get(word,0) + 1;\\n\\treturn words\\n\\t"}
274	14	c18eb965ff2798f6da7e1bb2	pending	python	word-count	def word_count(phrase=""):\n\t'''\n\tGiven a phrase can count the occurrences of each word in that phrase\n\t'''\n\twords = {}\n\tfor word in phrase.split():\n\t\twords[word] = words.get(word,0) + 1;\n\treturn words\n\t	\N	\N	0	2	2015-04-04 22:47:52	2015-04-04 22:47:52	171	wordcount.py	{"wordcount.py":"def word_count(phrase=\\"\\"):\\n\\t'''\\n\\tGiven a phrase can count the occurrences of each word in that phrase\\n\\t'''\\n\\twords = {}\\n\\tfor word in phrase.split():\\n\\t\\twords[word] = words.get(word,0) + 1;\\n\\treturn words\\n\\t"}
209	36	90333b6509111b90e3767f27	done	go	circular-buffer	package circular\n\nimport "errors"\n\nvar TestVersion = 1\n\ntype Buffer struct {\n\tstore  []byte //actual storage\n\thead   int    //points to front element\n\tlength int    //currently used length of buffer\n}\n\nfunc NewBuffer(size int) *Buffer {\n\tb := new(Buffer)\n\tb.store = make([]byte, size)\n\t//default values of zero good for head and length\n\treturn b\n}\n\nfunc (b *Buffer) ReadByte() (byte, error) {\n\tif b.length == 0 {\n\t\treturn 0, errors.New("Attempted Read from empty buffer")\n\t}\n\tchar := b.store[b.head]\n\tb.head = (b.head + 1) % len(b.store)\n\tb.length--\n\treturn char, nil\n}\n\nfunc (b *Buffer) WriteByte(c byte) error {\n\tif b.length == len(b.store) {\n\t\treturn errors.New("Attemped Write to full buffer")\n\t}\n\n\tb.store[(b.head+b.length)%len(b.store)] = c\n\tb.length++\n\treturn nil\n}\n\nfunc (b *Buffer) Overwrite(c byte) {\n\tif b.length != len(b.store) {\n\t\tb.WriteByte(c) //if not full then write correctly\n\t}\n\tb.store[b.head] = c\n\tb.head = (b.head + 1) % len(b.store)\n}\n\nfunc (b *Buffer) Reset() {\n\tb.head = 0\n\tb.length = 0\n}	2015-06-12 22:07:52	\N	0	1	2015-06-09 21:38:08	2015-06-09 21:38:08	138	/go/circular-buffer/circular_buffer.go	{"/go/circular-buffer/circular_buffer.go":"package circular\\n\\nimport \\"errors\\"\\n\\nvar TestVersion = 1\\n\\ntype Buffer struct {\\n\\tstore  []byte //actual storage\\n\\thead   int    //points to front element\\n\\tlength int    //currently used length of buffer\\n}\\n\\nfunc NewBuffer(size int) *Buffer {\\n\\tb := new(Buffer)\\n\\tb.store = make([]byte, size)\\n\\t//default values of zero good for head and length\\n\\treturn b\\n}\\n\\nfunc (b *Buffer) ReadByte() (byte, error) {\\n\\tif b.length == 0 {\\n\\t\\treturn 0, errors.New(\\"Attempted Read from empty buffer\\")\\n\\t}\\n\\tchar := b.store[b.head]\\n\\tb.head = (b.head + 1) % len(b.store)\\n\\tb.length--\\n\\treturn char, nil\\n}\\n\\nfunc (b *Buffer) WriteByte(c byte) error {\\n\\tif b.length == len(b.store) {\\n\\t\\treturn errors.New(\\"Attemped Write to full buffer\\")\\n\\t}\\n\\n\\tb.store[(b.head+b.length)%len(b.store)] = c\\n\\tb.length++\\n\\treturn nil\\n}\\n\\nfunc (b *Buffer) Overwrite(c byte) {\\n\\tif b.length != len(b.store) {\\n\\t\\tb.WriteByte(c) //if not full then write correctly\\n\\t}\\n\\tb.store[b.head] = c\\n\\tb.head = (b.head + 1) % len(b.store)\\n}\\n\\nfunc (b *Buffer) Reset() {\\n\\tb.head = 0\\n\\tb.length = 0\\n}"}
210	36	01154c6c85daa7f0948c11e0	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	2015-06-02 15:41:44	\N	0	1	2015-05-23 19:42:04	2015-05-23 19:42:04	139	roman.rb	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
211	36	85a7900af328408301b7ab1f	superseded	haskell	anagram	module Anagram\n   ( anagramsFor\n   )\n   where\n\n\nimport           Data.Char\nimport qualified Data.Vector.Unboxed as V\nimport           Data.Vector.Algorithms.Intro\nimport           Control.Monad.ST\n\n\nanagramsFor :: String -> [ String ] -> [ String ]\nanagramsFor a = map individual . filter (anagram (unify a)) . map unify\n\n\ntype Uniform = (V.Vector Char, V.Vector Char)\n\n\nsort' :: (Ord a, V.Unbox a) => V.Vector a -> V.Vector a\nsort' v = runST $ do\n   v' <- V.unsafeThaw v\n   sort v'\n   V.unsafeFreeze v'\n\n\nunify :: String -> Uniform\nunify = fmap (sort' . V.map toLower) . pair . V.fromList\n   where pair a = (a, a)\n\n\nindividual :: Uniform -> String\nindividual = V.toList . fst\n\n\nanagram :: Uniform -> Uniform -> Bool\nanagram (a, b) (c, d) = a /= c && b == d	\N	\N	0	3	2015-05-30 00:43:23	2015-05-30 00:43:23	140	anagram.hs	{"anagram.hs":"module Anagram\\n   ( anagramsFor\\n   )\\n   where\\n\\n\\nimport           Data.Char\\nimport qualified Data.Vector.Unboxed as V\\nimport           Data.Vector.Algorithms.Intro\\nimport           Control.Monad.ST\\n\\n\\nanagramsFor :: String -\\u003e [ String ] -\\u003e [ String ]\\nanagramsFor a = map individual . filter (anagram (unify a)) . map unify\\n\\n\\ntype Uniform = (V.Vector Char, V.Vector Char)\\n\\n\\nsort' :: (Ord a, V.Unbox a) =\\u003e V.Vector a -\\u003e V.Vector a\\nsort' v = runST $ do\\n   v' \\u003c- V.unsafeThaw v\\n   sort v'\\n   V.unsafeFreeze v'\\n\\n\\nunify :: String -\\u003e Uniform\\nunify = fmap (sort' . V.map toLower) . pair . V.fromList\\n   where pair a = (a, a)\\n\\n\\nindividual :: Uniform -\\u003e String\\nindividual = V.toList . fst\\n\\n\\nanagram :: Uniform -\\u003e Uniform -\\u003e Bool\\nanagram (a, b) (c, d) = a /= c \\u0026\\u0026 b == d"}
212	36	33cac54e215656a4f333e7d6	superseded	haskell	anagram	module Anagram\n   ( anagramsFor\n   )\n   where\n\n\nimport           Data.Char\nimport qualified Data.ByteString.Char8 as BS\n\n\nanagramsFor :: String -> [ String ] -> [ String ]\nanagramsFor a = map induvidual . filter (anagram (unify a)) . map unify\n\n\ntype Uniform = (BS.ByteString, BS.ByteString)\n\n\nunify :: String -> Uniform\nunify = fmap (BS.sort . BS.map toLower) . pair . BS.pack\n   where pair a = (a, a)\n\n\ninduvidual :: Uniform -> String\ninduvidual = BS.unpack . fst\n\n\nanagram :: Uniform -> Uniform -> Bool\nanagram (a, b) (c, d) = a /= c && b == d	\N	\N	0	1	2015-06-07 07:41:17	2015-06-07 07:41:17	140	anagram.hs	{"anagram.hs":"module Anagram\\n   ( anagramsFor\\n   )\\n   where\\n\\n\\nimport           Data.Char\\nimport qualified Data.ByteString.Char8 as BS\\n\\n\\nanagramsFor :: String -\\u003e [ String ] -\\u003e [ String ]\\nanagramsFor a = map induvidual . filter (anagram (unify a)) . map unify\\n\\n\\ntype Uniform = (BS.ByteString, BS.ByteString)\\n\\n\\nunify :: String -\\u003e Uniform\\nunify = fmap (BS.sort . BS.map toLower) . pair . BS.pack\\n   where pair a = (a, a)\\n\\n\\ninduvidual :: Uniform -\\u003e String\\ninduvidual = BS.unpack . fst\\n\\n\\nanagram :: Uniform -\\u003e Uniform -\\u003e Bool\\nanagram (a, b) (c, d) = a /= c \\u0026\\u0026 b == d"}
213	36	bf62692c6d3baf1ac756b01a	superseded	haskell	anagram	module Anagram\n   ( anagramsFor\n   )\n   where\n\n\nimport           Data.Char\nimport qualified Data.ByteString.Char8 as BS\n\n\nanagramsFor :: String -> [ String ] -> [ String ]\nanagramsFor a = map individual . filter (anagram (unify a)) . map unify\n\n\ntype Uniform = (BS.ByteString, BS.ByteString)\n\n\nunify :: String -> Uniform\nunify = fmap (BS.sort . BS.map toLower) . pair . BS.pack\n   where pair a = (a, a)\n\n\nindividual :: Uniform -> String\nindividual = BS.unpack . fst\n\n\nanagram :: Uniform -> Uniform -> Bool\nanagram (a, b) (c, d) = a /= c && b == d	\N	\N	0	2	2015-06-07 21:03:59	2015-06-07 21:03:59	140	anagram.hs	{"anagram.hs":"module Anagram\\n   ( anagramsFor\\n   )\\n   where\\n\\n\\nimport           Data.Char\\nimport qualified Data.ByteString.Char8 as BS\\n\\n\\nanagramsFor :: String -\\u003e [ String ] -\\u003e [ String ]\\nanagramsFor a = map individual . filter (anagram (unify a)) . map unify\\n\\n\\ntype Uniform = (BS.ByteString, BS.ByteString)\\n\\n\\nunify :: String -\\u003e Uniform\\nunify = fmap (BS.sort . BS.map toLower) . pair . BS.pack\\n   where pair a = (a, a)\\n\\n\\nindividual :: Uniform -\\u003e String\\nindividual = BS.unpack . fst\\n\\n\\nanagram :: Uniform -\\u003e Uniform -\\u003e Bool\\nanagram (a, b) (c, d) = a /= c \\u0026\\u0026 b == d"}
214	36	e6b4cbc11057788610c1c970	done	haskell	anagram	module Anagram\n   ( anagramsFor\n   )\n   where\n\n\nimport           Data.Char\nimport qualified Data.Vector.Unboxed as V\nimport           Data.Vector.Algorithms.Intro\nimport           Control.Monad.ST\n\n\nanagramsFor :: String -> [ String ] -> [ String ]\nanagramsFor a = map individual . filter (anagram (unify a)) . map unify\n\n\ntype Uniform = (V.Vector Char, V.Vector Char)\n\n\nsort' :: (Ord a, V.Unbox a) => V.Vector a -> V.Vector a\nsort' v = runST $ \n   V.unsafeThaw v >>= \\v' -> sort v' >> V.unsafeFreeze v'\n\n\nunify :: String -> Uniform\nunify = fmap (sort' . V.map toLower) . pair . V.fromList\n   where pair a = (a, a)\n\n\nindividual :: Uniform -> String\nindividual = V.toList . fst\n\n\nanagram :: Uniform -> Uniform -> Bool\nanagram (a, b) (c, d) = a /= c && b == d	2015-06-09 17:16:02	\N	0	4	2015-06-07 22:07:39	2015-06-07 22:07:39	140	anagram.hs	{"anagram.hs":"module Anagram\\n   ( anagramsFor\\n   )\\n   where\\n\\n\\nimport           Data.Char\\nimport qualified Data.Vector.Unboxed as V\\nimport           Data.Vector.Algorithms.Intro\\nimport           Control.Monad.ST\\n\\n\\nanagramsFor :: String -\\u003e [ String ] -\\u003e [ String ]\\nanagramsFor a = map individual . filter (anagram (unify a)) . map unify\\n\\n\\ntype Uniform = (V.Vector Char, V.Vector Char)\\n\\n\\nsort' :: (Ord a, V.Unbox a) =\\u003e V.Vector a -\\u003e V.Vector a\\nsort' v = runST $ \\n   V.unsafeThaw v \\u003e\\u003e= \\\\v' -\\u003e sort v' \\u003e\\u003e V.unsafeFreeze v'\\n\\n\\nunify :: String -\\u003e Uniform\\nunify = fmap (sort' . V.map toLower) . pair . V.fromList\\n   where pair a = (a, a)\\n\\n\\nindividual :: Uniform -\\u003e String\\nindividual = V.toList . fst\\n\\n\\nanagram :: Uniform -\\u003e Uniform -\\u003e Bool\\nanagram (a, b) (c, d) = a /= c \\u0026\\u0026 b == d"}
215	36	13019bdfea4eef5c9bcbbaee	done	python	space-age	class SpaceAge:\r\n    def __init__(self, age):\r\n        self.seconds = age\r\n        self.on_earth   = self.on_planet(1.0)\r\n        self.on_mercury = self.on_planet(0.2408467)\r\n        self.on_venus   = self.on_planet(0.61519726)\r\n        self.on_mars    = self.on_planet(1.8808158)\r\n        self.on_jupiter = self.on_planet(11.862615)\r\n        self.on_saturn  = self.on_planet(29.447498)\r\n        self.on_uranus  = self.on_planet(84.016846)\r\n        self.on_neptune = self.on_planet(164.79132)\r\n\r\n    def on_planet(self, coefficient):\r\n        earth_year = 31557600\r\n        def calc():\r\n            return round(self.seconds / earth_year / coefficient, 2)\r\n                \r\n        return calc	2015-05-29 10:59:57	\N	0	1	2015-05-25 21:25:51	2015-05-25 21:25:51	141	\\python\\space-age\\space_age.py	{"\\\\python\\\\space-age\\\\space_age.py":"class SpaceAge:\\r\\n    def __init__(self, age):\\r\\n        self.seconds = age\\r\\n        self.on_earth   = self.on_planet(1.0)\\r\\n        self.on_mercury = self.on_planet(0.2408467)\\r\\n        self.on_venus   = self.on_planet(0.61519726)\\r\\n        self.on_mars    = self.on_planet(1.8808158)\\r\\n        self.on_jupiter = self.on_planet(11.862615)\\r\\n        self.on_saturn  = self.on_planet(29.447498)\\r\\n        self.on_uranus  = self.on_planet(84.016846)\\r\\n        self.on_neptune = self.on_planet(164.79132)\\r\\n\\r\\n    def on_planet(self, coefficient):\\r\\n        earth_year = 31557600\\r\\n        def calc():\\r\\n            return round(self.seconds / earth_year / coefficient, 2)\\r\\n                \\r\\n        return calc"}
216	36	b0ffe833b658465d1f7f6ff4	done	python	gigasecond	#gigasecond.py\n#The future is yours!\n\nimport datetime\n\n\ndef add_gigasecond(birthday):\n    try:\n        return birthday + datetime.timedelta(seconds=10**9)\n    except TypeError:\n        print "Error: Invalid input date"	2015-06-01 13:40:48	\N	0	1	2015-05-27 22:23:51	2015-05-27 22:23:51	142	gigasecond.py	{"gigasecond.py":"#gigasecond.py\\n#The future is yours!\\n\\nimport datetime\\n\\n\\ndef add_gigasecond(birthday):\\n    try:\\n        return birthday + datetime.timedelta(seconds=10**9)\\n    except TypeError:\\n        print \\"Error: Invalid input date\\""}
217	36	47be011f531a49f1021381f3	superseded	javascript	bob	var Bob = function(){\n  var isSilence = function(phrase) {\n    return phrase.trim().length === 0; \n  },\n  isShout = function(phrase) {\n    return phrase.toUpperCase() === phrase; \n  }\n  isQuestion = function(phrase) {\n    return phrase.charAt(phrase.length - 1) === '?';\n  };\n\n  return { \n    hey: function(phrase){\n      if(isSilence(phrase)) {\n        return 'Fine. Be that way!';\n      }\n      if(isShout(phrase)) {\n        return 'Woah, chill out!';\n      }\n      if(isQuestion(phrase)) {\n        return 'Sure.';\n      }\n      return 'Whatever.';\n    }\n  };\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2015-05-28 02:43:48	2015-05-28 02:43:48	143	bob.js	{"bob.js":"var Bob = function(){\\n  var isSilence = function(phrase) {\\n    return phrase.trim().length === 0; \\n  },\\n  isShout = function(phrase) {\\n    return phrase.toUpperCase() === phrase; \\n  }\\n  isQuestion = function(phrase) {\\n    return phrase.charAt(phrase.length - 1) === '?';\\n  };\\n\\n  return { \\n    hey: function(phrase){\\n      if(isSilence(phrase)) {\\n        return 'Fine. Be that way!';\\n      }\\n      if(isShout(phrase)) {\\n        return 'Woah, chill out!';\\n      }\\n      if(isQuestion(phrase)) {\\n        return 'Sure.';\\n      }\\n      return 'Whatever.';\\n    }\\n  };\\n};\\n\\nmodule.exports = Bob;"}
218	36	827e899c49d19eb6da9047dd	done	javascript	bob	var Bob = function(){\n  var isSilence = function(phrase) {\n    return phrase.trim().length === 0; \n  },\n  isShout = function(phrase) {\n    return phrase.toUpperCase() === phrase; \n  }\n  isQuestion = function(phrase) {\n    return phrase.slice(-1) === '?';\n  };\n\n  return { \n    hey: function(phrase){\n      if(isSilence(phrase)) {\n        return 'Fine. Be that way!';\n      }\n      if(isShout(phrase)) {\n        return 'Woah, chill out!';\n      }\n      if(isQuestion(phrase)) {\n        return 'Sure.';\n      }\n      return 'Whatever.';\n    }\n  };\n};\n\nmodule.exports = Bob;	2015-06-11 01:39:32	\N	0	2	2015-06-02 08:02:54	2015-06-02 08:02:54	143	bob.js	{"bob.js":"var Bob = function(){\\n  var isSilence = function(phrase) {\\n    return phrase.trim().length === 0; \\n  },\\n  isShout = function(phrase) {\\n    return phrase.toUpperCase() === phrase; \\n  }\\n  isQuestion = function(phrase) {\\n    return phrase.slice(-1) === '?';\\n  };\\n\\n  return { \\n    hey: function(phrase){\\n      if(isSilence(phrase)) {\\n        return 'Fine. Be that way!';\\n      }\\n      if(isShout(phrase)) {\\n        return 'Woah, chill out!';\\n      }\\n      if(isQuestion(phrase)) {\\n        return 'Sure.';\\n      }\\n      return 'Whatever.';\\n    }\\n  };\\n};\\n\\nmodule.exports = Bob;"}
219	36	300dc00931985e987f59878a	done	python	sieve	\r\n#Would love to know how I can improve the flow\r\n# of this function.  It looks very chaotic & I feel\r\n# it uses more conditionals than an individual should be\r\n# forced to keep up with in such a simple program.\r\n\r\ndef sieve(endpoint):\r\n    top_prime = 0\r\n    if endpoint < 2:\r\n        prime_list=[]\r\n    else:\r\n        prime_list = [2]\r\n        for number in range(endpoint+1):\r\n            if number<2:\r\n                pass\r\n            else:\r\n                for prime in prime_list:\r\n                    if number%prime == 0:\r\n                        break\r\n                    else: top_prime = prime\r\n            if top_prime==max(prime_list):\r\n                prime_list.append(number)\r\n            else: pass\r\n    return prime_list  \r\n\r	2015-06-14 19:46:21	\N	0	1	2015-06-05 12:01:02	2015-06-05 12:01:02	144	sieve.py	{"sieve.py":"\\r\\n#Would love to know how I can improve the flow\\r\\n# of this function.  It looks very chaotic \\u0026 I feel\\r\\n# it uses more conditionals than an individual should be\\r\\n# forced to keep up with in such a simple program.\\r\\n\\r\\ndef sieve(endpoint):\\r\\n    top_prime = 0\\r\\n    if endpoint \\u003c 2:\\r\\n        prime_list=[]\\r\\n    else:\\r\\n        prime_list = [2]\\r\\n        for number in range(endpoint+1):\\r\\n            if number\\u003c2:\\r\\n                pass\\r\\n            else:\\r\\n                for prime in prime_list:\\r\\n                    if number%prime == 0:\\r\\n                        break\\r\\n                    else: top_prime = prime\\r\\n            if top_prime==max(prime_list):\\r\\n                prime_list.append(number)\\r\\n            else: pass\\r\\n    return prime_list  \\r\\n\\r"}
220	36	1f8c397823b54475dede36b0	superseded	javascript	grade-school	function School() {\n  var roster = {};\n  function get_roster() {\n    return roster;\n  }\n  function get_grade(grade) {\n    if (roster.hasOwnProperty(grade)) {\n      return roster[grade];\n    }\n    return [];\n  }\n  function add_to_roster(name, grade) {\n    if (roster.hasOwnProperty(grade)) {\n      roster[grade].push(name);\n      roster[grade] = roster[grade].sort(); // TODO use smarter insertion to avoid need to sort\n    } else {\n      roster[grade] = [name];\n    }\n  }\n\n  this.add = add_to_roster;\n  this.roster = get_roster;\n  this.grade = get_grade;\n}\n\nif (module) {\n  module.exports = School;\n}	\N	\N	0	1	2015-06-09 22:18:43	2015-06-09 22:18:43	145	grade-school.js	{"grade-school.js":"function School() {\\n  var roster = {};\\n  function get_roster() {\\n    return roster;\\n  }\\n  function get_grade(grade) {\\n    if (roster.hasOwnProperty(grade)) {\\n      return roster[grade];\\n    }\\n    return [];\\n  }\\n  function add_to_roster(name, grade) {\\n    if (roster.hasOwnProperty(grade)) {\\n      roster[grade].push(name);\\n      roster[grade] = roster[grade].sort(); // TODO use smarter insertion to avoid need to sort\\n    } else {\\n      roster[grade] = [name];\\n    }\\n  }\\n\\n  this.add = add_to_roster;\\n  this.roster = get_roster;\\n  this.grade = get_grade;\\n}\\n\\nif (module) {\\n  module.exports = School;\\n}"}
227	36	2df6abaec6bf854998766986	superseded	ruby	grains	# Class for counting the number of grains of rice on a chessboard, accourding to\n# an old legend.\nclass Grains\n\n  # Calculates the number of rice grains on a given chessboard space.\n  #\n  # @param space [Integer] the space on the chessboard\n  # @return [Integer] the number of grains of rice on the space.\n  def square(space)\n    2**(space - 1)\n  end\n\n  # Calculates the total number of rice grains on the chessboard.\n  #\n  # @return [Integer] the total number of grains of rice on the chessboard.\n  def total\n    total = 0\n\n    (1..64).each { |space| total += square(space) }\n\n    total\n  end\nend	\N	\N	0	2	2015-05-30 07:35:40	2015-05-30 07:35:40	150	grains.rb	{"grains.rb":"# Class for counting the number of grains of rice on a chessboard, accourding to\\n# an old legend.\\nclass Grains\\n\\n  # Calculates the number of rice grains on a given chessboard space.\\n  #\\n  # @param space [Integer] the space on the chessboard\\n  # @return [Integer] the number of grains of rice on the space.\\n  def square(space)\\n    2**(space - 1)\\n  end\\n\\n  # Calculates the total number of rice grains on the chessboard.\\n  #\\n  # @return [Integer] the total number of grains of rice on the chessboard.\\n  def total\\n    total = 0\\n\\n    (1..64).each { |space| total += square(space) }\\n\\n    total\\n  end\\nend"}
228	36	d0477a35cf7881814ede2b41	superseded	ruby	grains	# Class for counting the number of grains of rice on a chessboard, accourding\n# to an old legend.\nclass Grains\n  # Calculates the number of rice grains on a given chessboard space.\n  #\n  # @param space [Integer] the space on the chessboard\n  # @return [Integer] the number of grains of rice on the space.\n  def square(space)\n    2**(space - 1)\n  end\n\n  # Calculates the total number of rice grains on the chessboard.\n  #\n  # @return [Integer] the total number of grains of rice on the chessboard.\n  def total\n    total = 0\n\n    (1..64).each { |space| total += square(space) }\n\n    total\n  end\nend	\N	\N	0	3	2015-05-31 11:10:44	2015-05-31 11:10:44	150	grains.rb	{"grains.rb":"# Class for counting the number of grains of rice on a chessboard, accourding\\n# to an old legend.\\nclass Grains\\n  # Calculates the number of rice grains on a given chessboard space.\\n  #\\n  # @param space [Integer] the space on the chessboard\\n  # @return [Integer] the number of grains of rice on the space.\\n  def square(space)\\n    2**(space - 1)\\n  end\\n\\n  # Calculates the total number of rice grains on the chessboard.\\n  #\\n  # @return [Integer] the total number of grains of rice on the chessboard.\\n  def total\\n    total = 0\\n\\n    (1..64).each { |space| total += square(space) }\\n\\n    total\\n  end\\nend"}
229	36	c04ec7c1d47fc087f316ed1a	superseded	ruby	grains	# Class for counting the number of grains of rice on a chessboard, accourding\n# to an old legend.\nclass Grains\n  # Calculates the number of rice grains on a given chessboard space.\n  #\n  # @param space [Integer] the space on the chessboard\n  # @return [Integer] the number of grains of rice on the space.\n  def square(space)\n    2**space.pred\n  end\n\n  # Calculates the total number of rice grains on the chessboard.\n  #\n  # @return [Integer] the total number of grains of rice on the chessboard.\n  def total\n    total = 0\n\n    (1..64).each { |space| total += square(space) }\n\n    total\n  end\nend	\N	\N	0	4	2015-06-04 21:00:51	2015-06-04 21:00:51	150	grains.rb	{"grains.rb":"# Class for counting the number of grains of rice on a chessboard, accourding\\n# to an old legend.\\nclass Grains\\n  # Calculates the number of rice grains on a given chessboard space.\\n  #\\n  # @param space [Integer] the space on the chessboard\\n  # @return [Integer] the number of grains of rice on the space.\\n  def square(space)\\n    2**space.pred\\n  end\\n\\n  # Calculates the total number of rice grains on the chessboard.\\n  #\\n  # @return [Integer] the total number of grains of rice on the chessboard.\\n  def total\\n    total = 0\\n\\n    (1..64).each { |space| total += square(space) }\\n\\n    total\\n  end\\nend"}
221	36	ee82fa3205edff49def0197b	done	javascript	grade-school	function School() {\n\n  var roster = {};\n\n  function getRoster() {\n    return roster;\n  }\n\n  function getGrade(grade) {\n    if (roster.hasOwnProperty(grade)) {\n      return roster[grade];\n    }\n    return [];\n  }\n\n  function addToRoster(name, grade) {\n    if (roster.hasOwnProperty(grade)) {\n      roster[grade].push(name);\n      // could use smarter insertion to avoid sorting...\n      // https://github.com/alxndr/exercism/blob/js_grade-school_sorted-list/javascript/grade-school/grade-school.js\n      roster[grade] = roster[grade].sort();\n    } else {\n      roster[grade] = [name];\n    }\n  }\n\n  return {\n    add : addToRoster,\n    roster : getRoster,\n    grade : getGrade\n  };\n}\n\nif (module) {\n  module.exports = School;\n}	2015-06-15 23:41:43	\N	0	2	2015-06-14 00:05:01	2015-06-14 00:05:01	145	grade-school.js	{"grade-school.js":"function School() {\\n\\n  var roster = {};\\n\\n  function getRoster() {\\n    return roster;\\n  }\\n\\n  function getGrade(grade) {\\n    if (roster.hasOwnProperty(grade)) {\\n      return roster[grade];\\n    }\\n    return [];\\n  }\\n\\n  function addToRoster(name, grade) {\\n    if (roster.hasOwnProperty(grade)) {\\n      roster[grade].push(name);\\n      // could use smarter insertion to avoid sorting...\\n      // https://github.com/alxndr/exercism/blob/js_grade-school_sorted-list/javascript/grade-school/grade-school.js\\n      roster[grade] = roster[grade].sort();\\n    } else {\\n      roster[grade] = [name];\\n    }\\n  }\\n\\n  return {\\n    add : addToRoster,\\n    roster : getRoster,\\n    grade : getGrade\\n  };\\n}\\n\\nif (module) {\\n  module.exports = School;\\n}"}
222	36	9b770b656b6491e4319d5a1d	done	perl5	anagram	package Anagram;\nuse strict;\nuse warnings;\n\nsub word_to_hash {\n\tmy ($word) = @_;\n\tmy $hash = {};\n\tforeach my $ch (split('', $word)) {\n\t\t$hash->{lc($ch)}++;\n\t}\n\treturn $hash;\n}\n\n# preserve $s_hash, destroys $t_hash\nsub compare_hashed {\n\tmy ($s_hash, $t_hash) = @_;\n\tforeach my $key (keys %$s_hash) {\n\t\treturn 0 unless exists $t_hash->{$key};\n\t\treturn 0 unless $s_hash->{$key} == $t_hash->{$key};\n\t\tdelete $t_hash->{$key};\n\t}\n\treturn 0 if keys %$t_hash;\n\treturn 1;\n}\n\nsub match {\n\tmy ($word, @tests) = @_;\n\tmy $s_hash = word_to_hash($word);\n\tmy $out = [];\n\tforeach my $test (@tests) {\n\t\tnext if lc($test) eq lc($word);\n\t\tmy $t_hash = word_to_hash($test);\n\t\tpush @$out, $test if compare_hashed($s_hash, $t_hash); \n\t}\n\treturn $out;\n}\n\n1;	2015-06-05 04:31:46	\N	0	1	2015-05-27 13:53:25	2015-05-27 13:53:25	146	Anagram.pm	{"Anagram.pm":"package Anagram;\\nuse strict;\\nuse warnings;\\n\\nsub word_to_hash {\\n\\tmy ($word) = @_;\\n\\tmy $hash = {};\\n\\tforeach my $ch (split('', $word)) {\\n\\t\\t$hash-\\u003e{lc($ch)}++;\\n\\t}\\n\\treturn $hash;\\n}\\n\\n# preserve $s_hash, destroys $t_hash\\nsub compare_hashed {\\n\\tmy ($s_hash, $t_hash) = @_;\\n\\tforeach my $key (keys %$s_hash) {\\n\\t\\treturn 0 unless exists $t_hash-\\u003e{$key};\\n\\t\\treturn 0 unless $s_hash-\\u003e{$key} == $t_hash-\\u003e{$key};\\n\\t\\tdelete $t_hash-\\u003e{$key};\\n\\t}\\n\\treturn 0 if keys %$t_hash;\\n\\treturn 1;\\n}\\n\\nsub match {\\n\\tmy ($word, @tests) = @_;\\n\\tmy $s_hash = word_to_hash($word);\\n\\tmy $out = [];\\n\\tforeach my $test (@tests) {\\n\\t\\tnext if lc($test) eq lc($word);\\n\\t\\tmy $t_hash = word_to_hash($test);\\n\\t\\tpush @$out, $test if compare_hashed($s_hash, $t_hash); \\n\\t}\\n\\treturn $out;\\n}\\n\\n1;"}
223	36	aab55c4b074f1c4904f99609	done	ruby	bob	class Bob\n  def hey(message)\n    if message.strip.empty?\n      'Fine. Be that way!'\n    elsif message == message.upcase\n      'Woah, chill out!'\n    elsif message.end_with?('?')\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	2015-06-07 13:50:35	\N	0	1	2015-06-02 22:24:30	2015-06-02 22:24:30	147	bob.rb	{"bob.rb":"class Bob\\n  def hey(message)\\n    if message.strip.empty?\\n      'Fine. Be that way!'\\n    elsif message == message.upcase\\n      'Woah, chill out!'\\n    elsif message.end_with?('?')\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\nend"}
224	36	55d839652e568c94d6855a92	done	python	rna-transcription	class DNA(str):\n    def to_rna(self):\n        return self.replace("T", "U")	2015-05-31 03:36:36	\N	0	1	2015-05-27 17:37:46	2015-05-27 17:37:46	148	rna-transcription.py	{"rna-transcription.py":"class DNA(str):\\n    def to_rna(self):\\n        return self.replace(\\"T\\", \\"U\\")"}
293	14	d9c81cfaebb21669452af901	pending	javascript	gigasecond	(function() {\n  var Gigasecond = function(startDate) {\n    var startDate_ms = Date.parse(startDate),\n        endDate_ms = new Date(startDate_ms + 1000000000000),\n        year = endDate_ms.getFullYear(),\n        month = endDate_ms.getMonth(),\n        day = endDate_ms.getDate();\n\n    this.date = function() {\n      return new Date (year, month, day);\n    };\n  };\n\n  module.exports = Gigasecond;\n})();	\N	\N	0	1	2015-05-05 19:19:38	2015-05-05 19:19:38	185	gigasecond.js	{"gigasecond.js":"(function() {\\n  var Gigasecond = function(startDate) {\\n    var startDate_ms = Date.parse(startDate),\\n        endDate_ms = new Date(startDate_ms + 1000000000000),\\n        year = endDate_ms.getFullYear(),\\n        month = endDate_ms.getMonth(),\\n        day = endDate_ms.getDate();\\n\\n    this.date = function() {\\n      return new Date (year, month, day);\\n    };\\n  };\\n\\n  module.exports = Gigasecond;\\n})();"}
294	14	b17a76505841e1bfcd1c5a39	superseded	javascript	bob	var Bob = function() {\n};\n\nBob.prototype.RESPONSES = {\n    'Whoa, chill out!': function(str) {\n            var uppercase_unicode = "\\\\u0041-\\\\u005A\\\\u00C0-\\\\u00DE\\\\u0100-\\\\u0556\\\\u10A0-\\\\u10CD\\\\u1E00-\\\\u1EFE\\\\u1F08-\\\\u1FFB";\n            var lowercase_unicode = "[\\\\u0061-\\\\u007A\\\\u00DF-\\u02AF\\\\u0371-\\\\u03FC\\\\u0430-\\\\u052F\\\\u0561-\\\\u0587\\\\u1D00-\\\\u1EFF-\\\\u1F00-\\\\u1FF7]";\n            var str_no_uppercase = str.replace(new RegExp('['+uppercase_unicode+']', 'g'), '');\n            var str_uppercase = str.replace(new RegExp('[^'+uppercase_unicode+']', 'g'), '');\n            return !(new RegExp(lowercase_unicode, 'g')).test(str_no_uppercase) && str_uppercase.length > 0;\n    },\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\n    'Fine. Be that way!': function(str) { return !str.trim(); },\n    'Whatever.': function(str) { return true; },\n};\n\nBob.prototype.hey = function(str) {\n    for(var message in this.RESPONSES) {\n        var func = this.RESPONSES[message];\n        if (this.RESPONSES.hasOwnProperty(message)) {\n            if(func != undefined && func(str)) {\n                return message;\n            }\n        }\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2015-05-23 15:37:18	2015-05-23 15:37:18	186	bob.js	{"bob.js":"var Bob = function() {\\n};\\n\\nBob.prototype.RESPONSES = {\\n    'Whoa, chill out!': function(str) {\\n            var uppercase_unicode = \\"\\\\\\\\u0041-\\\\\\\\u005A\\\\\\\\u00C0-\\\\\\\\u00DE\\\\\\\\u0100-\\\\\\\\u0556\\\\\\\\u10A0-\\\\\\\\u10CD\\\\\\\\u1E00-\\\\\\\\u1EFE\\\\\\\\u1F08-\\\\\\\\u1FFB\\";\\n            var lowercase_unicode = \\"[\\\\\\\\u0061-\\\\\\\\u007A\\\\\\\\u00DF-\\\\u02AF\\\\\\\\u0371-\\\\\\\\u03FC\\\\\\\\u0430-\\\\\\\\u052F\\\\\\\\u0561-\\\\\\\\u0587\\\\\\\\u1D00-\\\\\\\\u1EFF-\\\\\\\\u1F00-\\\\\\\\u1FF7]\\";\\n            var str_no_uppercase = str.replace(new RegExp('['+uppercase_unicode+']', 'g'), '');\\n            var str_uppercase = str.replace(new RegExp('[^'+uppercase_unicode+']', 'g'), '');\\n            return !(new RegExp(lowercase_unicode, 'g')).test(str_no_uppercase) \\u0026\\u0026 str_uppercase.length \\u003e 0;\\n    },\\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\\n    'Fine. Be that way!': function(str) { return !str.trim(); },\\n    'Whatever.': function(str) { return true; },\\n};\\n\\nBob.prototype.hey = function(str) {\\n    for(var message in this.RESPONSES) {\\n        var func = this.RESPONSES[message];\\n        if (this.RESPONSES.hasOwnProperty(message)) {\\n            if(func != undefined \\u0026\\u0026 func(str)) {\\n                return message;\\n            }\\n        }\\n    }\\n};\\n\\nmodule.exports = Bob;"}
230	36	a3951e40d74946634485a2c9	done	ruby	grains	# Class for counting the number of grains of rice on a chessboard, accourding\n# to an old legend.\nclass Grains\n  # Calculates the number of rice grains on a given chessboard space.\n  #\n  # @param space [Integer] the space on the chessboard\n  # @return [Integer] the number of grains of rice on the space.\n  def square(space)\n    2 ** (space - 1)\n  end\n\n  # Calculates the total number of rice grains on the chessboard.\n  #\n  # @return [Integer] the total number of grains of rice on the chessboard.\n  def total\n    2 ** 64 - 1\n  end\nend	2015-06-06 21:16:07	\N	0	6	2015-06-05 16:21:12	2015-06-05 16:21:12	150	grains.rb	{"grains.rb":"# Class for counting the number of grains of rice on a chessboard, accourding\\n# to an old legend.\\nclass Grains\\n  # Calculates the number of rice grains on a given chessboard space.\\n  #\\n  # @param space [Integer] the space on the chessboard\\n  # @return [Integer] the number of grains of rice on the space.\\n  def square(space)\\n    2 ** (space - 1)\\n  end\\n\\n  # Calculates the total number of rice grains on the chessboard.\\n  #\\n  # @return [Integer] the total number of grains of rice on the chessboard.\\n  def total\\n    2 ** 64 - 1\\n  end\\nend"}
231	36	135bfa548790d9ba526f8c85	superseded	ruby	grains	# Class for counting the number of grains of rice on a chessboard, accourding\n# to an old legend.\nclass Grains\n  # Calculates the number of rice grains on a given chessboard space.\n  #\n  # @param space [Integer] the space on the chessboard\n  # @return [Integer] the number of grains of rice on the space.\n  def square(space)\n    2 ** (space - 1)\n  end\n\n  # Calculates the total number of rice grains on the chessboard.\n  #\n  # @return [Integer] the total number of grains of rice on the chessboard.\n  def total\n    (1..64).to_a.map { |total| square(total) }.inject(:+)\n  end\nend	\N	\N	0	5	2015-06-18 12:10:56	2015-06-18 12:10:56	150	grains.rb	{"grains.rb":"# Class for counting the number of grains of rice on a chessboard, accourding\\n# to an old legend.\\nclass Grains\\n  # Calculates the number of rice grains on a given chessboard space.\\n  #\\n  # @param space [Integer] the space on the chessboard\\n  # @return [Integer] the number of grains of rice on the space.\\n  def square(space)\\n    2 ** (space - 1)\\n  end\\n\\n  # Calculates the total number of rice grains on the chessboard.\\n  #\\n  # @return [Integer] the total number of grains of rice on the chessboard.\\n  def total\\n    (1..64).to_a.map { |total| square(total) }.inject(:+)\\n  end\\nend"}
232	36	6e302e0b9f59cb0f92d73f3d	done	fsharp	space-age	﻿module SpaceAge\r\n\r\ntype SpaceAge(seconds : decimal) =\r\n\r\n  let secondsPerYear = \r\n    [\r\n      "earth", 31557600m;\r\n      "mercury", 7600543.81992m;\r\n      "venus", 19414149.052176m;\r\n      "mars", 59354032.69008m;\r\n      "jupiter", 374355659.124m;\r\n      "saturn", 929292362.8848m;\r\n      "uranus", 2651370019.3296m;\r\n      "neptune", 5200418560.032m;\r\n    ] |> Map.ofList\r\n\r\n  let round2dp x = System.Math.Round(x |> float, 2)\r\n\r\n  let planetaryYears planet = \r\n    round2dp <| (seconds / secondsPerYear.[planet]);\r\n\r\n  member this.Seconds = seconds\r\n\r\n  member this.onEarth = planetaryYears "earth"\r\n\r\n  member this.onMercury = planetaryYears "mercury"\r\n\r\n  member this.onVenus = planetaryYears "venus"\r\n\r\n  member this.onMars = planetaryYears "mars"\r\n\r\n  member this.onSaturn = planetaryYears "saturn"\r\n\r\n  member this.onJupiter = planetaryYears "jupiter"\r\n\r\n  member this.onNeptune = planetaryYears "neptune"\r\n\r\n  member this.onUranus = planetaryYears "uranus"	2015-06-02 23:41:25	\N	0	1	2015-05-28 18:08:50	2015-05-28 18:08:50	151	\\fsharp\\space-age\\SpaceAge.fs	{"\\\\fsharp\\\\space-age\\\\SpaceAge.fs":"﻿module SpaceAge\\r\\n\\r\\ntype SpaceAge(seconds : decimal) =\\r\\n\\r\\n  let secondsPerYear = \\r\\n    [\\r\\n      \\"earth\\", 31557600m;\\r\\n      \\"mercury\\", 7600543.81992m;\\r\\n      \\"venus\\", 19414149.052176m;\\r\\n      \\"mars\\", 59354032.69008m;\\r\\n      \\"jupiter\\", 374355659.124m;\\r\\n      \\"saturn\\", 929292362.8848m;\\r\\n      \\"uranus\\", 2651370019.3296m;\\r\\n      \\"neptune\\", 5200418560.032m;\\r\\n    ] |\\u003e Map.ofList\\r\\n\\r\\n  let round2dp x = System.Math.Round(x |\\u003e float, 2)\\r\\n\\r\\n  let planetaryYears planet = \\r\\n    round2dp \\u003c| (seconds / secondsPerYear.[planet]);\\r\\n\\r\\n  member this.Seconds = seconds\\r\\n\\r\\n  member this.onEarth = planetaryYears \\"earth\\"\\r\\n\\r\\n  member this.onMercury = planetaryYears \\"mercury\\"\\r\\n\\r\\n  member this.onVenus = planetaryYears \\"venus\\"\\r\\n\\r\\n  member this.onMars = planetaryYears \\"mars\\"\\r\\n\\r\\n  member this.onSaturn = planetaryYears \\"saturn\\"\\r\\n\\r\\n  member this.onJupiter = planetaryYears \\"jupiter\\"\\r\\n\\r\\n  member this.onNeptune = planetaryYears \\"neptune\\"\\r\\n\\r\\n  member this.onUranus = planetaryYears \\"uranus\\""}
233	36	0e981ecec71557bd4c562ed3	done	javascript	anagram	var anagram = function(word) {\n  var obj = new Object();\n\n  obj.matches = function(words) {\n    if (arguments.length > 1) {\n      words = Array.prototype.slice.call(arguments);\n    }\n\n    return words.filter(function(match) {\n      return isAnagram(word, match) && !isIdentical(word, match);\n    });\n  };\n\n  return obj;\n};\n\nfunction isIdentical(a, b) {\n  return a.toLowerCase() === b.toLowerCase();\n}\n\nfunction isAnagram(a, b) {\n  return sort(a) === sort(b);\n}\n\nfunction sort(word) {\n  return word.toLowerCase().split('').sort().join('');\n}	2015-05-28 07:25:05	\N	0	1	2015-05-27 04:29:44	2015-05-27 04:29:44	152	anagram.js	{"anagram.js":"var anagram = function(word) {\\n  var obj = new Object();\\n\\n  obj.matches = function(words) {\\n    if (arguments.length \\u003e 1) {\\n      words = Array.prototype.slice.call(arguments);\\n    }\\n\\n    return words.filter(function(match) {\\n      return isAnagram(word, match) \\u0026\\u0026 !isIdentical(word, match);\\n    });\\n  };\\n\\n  return obj;\\n};\\n\\nfunction isIdentical(a, b) {\\n  return a.toLowerCase() === b.toLowerCase();\\n}\\n\\nfunction isAnagram(a, b) {\\n  return sort(a) === sort(b);\\n}\\n\\nfunction sort(word) {\\n  return word.toLowerCase().split('').sort().join('');\\n}"}
234	36	314935b51eefeff243b9bcb6	done	go	accumulate	package accumulate\n\nfunc Accumulate(input []string, converter func(string) string) []string {\n\toutput := make([]string, len(input))\n\n\tfor idx, value := range input {\n\t\toutput[idx] = converter(value)\n\t}\n\n\treturn output\n}	2015-05-29 16:53:12	\N	0	1	2015-05-23 07:32:32	2015-05-23 07:32:32	153	accumulate.go	{"accumulate.go":"package accumulate\\n\\nfunc Accumulate(input []string, converter func(string) string) []string {\\n\\toutput := make([]string, len(input))\\n\\n\\tfor idx, value := range input {\\n\\t\\toutput[idx] = converter(value)\\n\\t}\\n\\n\\treturn output\\n}"}
235	36	d430265c835888cdc58c2ef6	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	2015-06-15 21:43:37	\N	0	1	2015-06-12 01:47:23	2015-06-12 01:47:23	154	sieve_test.js	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
236	36	c7ebcabede8974f1a334d5bd	superseded	clojure	bob	(ns bob\n  "A lackadaisical teenager."\n  (:require [clojure.string :as string]))\n\n(defn- is-silence?\n  "Returns true if the input is empty, false otherwise."\n  [input]\n  (= "" (string/trim input)))\n\n(defn- has-letters?\n  "Returns true if the input contains letters, false otherwise."\n  [input]\n  (not (nil? (re-find #"\\p{L}" input))))\n\n(defn- is-uppercase?\n  "Returns true if the input is all upper case, false otherwise."\n  [input]\n  (= input (string/upper-case input)))\n\n(defn- is-shout?\n  "Returns true if the input is a shout (i.e. has letters and all\n  letters are upper case), false otherwise."\n  [input]\n  (and (has-letters? input) (is-uppercase? input)))\n\n(defn- is-question?\n  "Returns true if the input is a question (i.e. ends with a\n  question mark), false otherwise."\n  [input]\n  (.endsWith input "?"))\n\n(defn response-for\n  "Elicit a response from the teenager."\n  [input]\n  (cond\n    (is-silence? input) "Fine. Be that way!"\n    (is-shout? input) "Whoa, chill out!"\n    (is-question? input) "Sure."\n    :else "Whatever."))	\N	\N	0	1	2015-06-03 20:04:59	2015-06-03 20:04:59	155	/clojure/bob/bob.clj	{"/clojure/bob/bob.clj":"(ns bob\\n  \\"A lackadaisical teenager.\\"\\n  (:require [clojure.string :as string]))\\n\\n(defn- is-silence?\\n  \\"Returns true if the input is empty, false otherwise.\\"\\n  [input]\\n  (= \\"\\" (string/trim input)))\\n\\n(defn- has-letters?\\n  \\"Returns true if the input contains letters, false otherwise.\\"\\n  [input]\\n  (not (nil? (re-find #\\"\\\\p{L}\\" input))))\\n\\n(defn- is-uppercase?\\n  \\"Returns true if the input is all upper case, false otherwise.\\"\\n  [input]\\n  (= input (string/upper-case input)))\\n\\n(defn- is-shout?\\n  \\"Returns true if the input is a shout (i.e. has letters and all\\n  letters are upper case), false otherwise.\\"\\n  [input]\\n  (and (has-letters? input) (is-uppercase? input)))\\n\\n(defn- is-question?\\n  \\"Returns true if the input is a question (i.e. ends with a\\n  question mark), false otherwise.\\"\\n  [input]\\n  (.endsWith input \\"?\\"))\\n\\n(defn response-for\\n  \\"Elicit a response from the teenager.\\"\\n  [input]\\n  (cond\\n    (is-silence? input) \\"Fine. Be that way!\\"\\n    (is-shout? input) \\"Whoa, chill out!\\"\\n    (is-question? input) \\"Sure.\\"\\n    :else \\"Whatever.\\"))"}
240	36	92cb30868eb7611aecb1bf59	done	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    @nucleotides.chars.count(nucl)\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	2015-06-08 17:59:11	\N	0	3	2015-06-06 13:09:04	2015-06-06 13:09:04	156	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    @nucleotides.chars.count(nucl)\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
237	36	e0123d3b77cdc4078d626ffc	done	clojure	bob	(ns bob\n  "A lackadaisical teenager."\n  (:require [clojure.string :as string]))\n\n(defn- is-silence?\n  "Returns true if the input is empty, false otherwise."\n  [input]\n  (string/blank? input))\n\n(defn- has-letters?\n  "Returns true if the input contains letters, false otherwise."\n  [input]\n  (not (nil? (re-find #"\\p{L}" input))))\n\n(defn- is-uppercase?\n  "Returns true if the input is all upper case, false otherwise."\n  [input]\n  (= input (string/upper-case input)))\n\n(defn- is-shout?\n  "Returns true if the input is a shout (i.e. has letters and all\n  letters are upper case), false otherwise."\n  [input]\n  (and (has-letters? input) (is-uppercase? input)))\n\n(defn- is-question?\n  "Returns true if the input is a question (i.e. ends with a\n  question mark), false otherwise."\n  [input]\n  (= (last input) \\?))\n\n(defn response-for\n  "Elicit a response from the teenager."\n  [input]\n  (cond\n    (is-silence? input) "Fine. Be that way!"\n    (is-shout? input) "Whoa, chill out!"\n    (is-question? input) "Sure."\n    :else "Whatever."))	2015-06-18 06:27:26	\N	0	2	2015-06-07 13:02:11	2015-06-07 13:02:11	155	/clojure/bob/bob.clj	{"/clojure/bob/bob.clj":"(ns bob\\n  \\"A lackadaisical teenager.\\"\\n  (:require [clojure.string :as string]))\\n\\n(defn- is-silence?\\n  \\"Returns true if the input is empty, false otherwise.\\"\\n  [input]\\n  (string/blank? input))\\n\\n(defn- has-letters?\\n  \\"Returns true if the input contains letters, false otherwise.\\"\\n  [input]\\n  (not (nil? (re-find #\\"\\\\p{L}\\" input))))\\n\\n(defn- is-uppercase?\\n  \\"Returns true if the input is all upper case, false otherwise.\\"\\n  [input]\\n  (= input (string/upper-case input)))\\n\\n(defn- is-shout?\\n  \\"Returns true if the input is a shout (i.e. has letters and all\\n  letters are upper case), false otherwise.\\"\\n  [input]\\n  (and (has-letters? input) (is-uppercase? input)))\\n\\n(defn- is-question?\\n  \\"Returns true if the input is a question (i.e. ends with a\\n  question mark), false otherwise.\\"\\n  [input]\\n  (= (last input) \\\\?))\\n\\n(defn response-for\\n  \\"Elicit a response from the teenager.\\"\\n  [input]\\n  (cond\\n    (is-silence? input) \\"Fine. Be that way!\\"\\n    (is-shout? input) \\"Whoa, chill out!\\"\\n    (is-question? input) \\"Sure.\\"\\n    :else \\"Whatever.\\"))"}
238	36	6167c7edb3c5fb0355124ce2	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = 'ACGT'.chars\n  RNA_NUCLEOTIDES = 'ACGU'.chars\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	1	2015-06-01 00:37:19	2015-06-01 00:37:19	156	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each do |nucleotide|\\n      counts[nucleotide] += 1\\n    end\\n    counts\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = 'ACGT'.chars\\n  RNA_NUCLEOTIDES = 'ACGU'.chars\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
239	36	27f97b246f6acd1bb0cab066	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	2	2015-06-02 14:42:58	2015-06-02 14:42:58	156	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\\n      counts[nucleotide] += 1\\n    end\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
241	30	f9c1767de2096c63cdab057c	done	ruby	bob	class Bob\n\n  def hey(message)\n    if is_silence? message\n      'Fine. Be that way!'\n    elsif is_shouting? message\n      'Woah, chill out!'\n    elsif is_a_question? message\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def is_silence?(message)\n    message.strip.empty?\n  end\n\n  def is_a_question?(message)\n    message.end_with?('?')\n  end\n\n  def is_shouting?(message)\n    ! message.upcase!\n  end\nend	2015-02-11 05:42:47	\N	0	1	2015-02-05 02:10:49	2015-02-05 02:10:49	157	bob.rb	{"bob.rb":"class Bob\\n\\n  def hey(message)\\n    if is_silence? message\\n      'Fine. Be that way!'\\n    elsif is_shouting? message\\n      'Woah, chill out!'\\n    elsif is_a_question? message\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\n\\n  private\\n\\n  def is_silence?(message)\\n    message.strip.empty?\\n  end\\n\\n  def is_a_question?(message)\\n    message.end_with?('?')\\n  end\\n\\n  def is_shouting?(message)\\n    ! message.upcase!\\n  end\\nend"}
242	35	fb6fbcd9a2225389de34eba7	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isAlpha, isSpace, isUpper)\nimport Data.List (isSuffixOf)\n\nresponseFor   :: String -> String\nresponseFor x | isEmpty x = "Fine. Be that way!"\n              | isShout x = "Whoa, chill out!"\n              | isQuestion x = "Sure."\n              | otherwise =  "Whatever."\n\nisQuestion    :: String -> Bool\nisQuestion    = isSuffixOf "?"\n\nisEmpty       :: String -> Bool\nisEmpty       = all isSpace\n\nisShout       :: String -> Bool\nisShout x     =  not (null letters) && all isUpper letters\n                  where letters = filter isAlpha x 	\N	\N	0	1	2015-06-18 01:08:36	2015-06-18 01:08:36	158	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport Data.Char (isAlpha, isSpace, isUpper)\\nimport Data.List (isSuffixOf)\\n\\nresponseFor   :: String -\\u003e String\\nresponseFor x | isEmpty x = \\"Fine. Be that way!\\"\\n              | isShout x = \\"Whoa, chill out!\\"\\n              | isQuestion x = \\"Sure.\\"\\n              | otherwise =  \\"Whatever.\\"\\n\\nisQuestion    :: String -\\u003e Bool\\nisQuestion    = isSuffixOf \\"?\\"\\n\\nisEmpty       :: String -\\u003e Bool\\nisEmpty       = all isSpace\\n\\nisShout       :: String -\\u003e Bool\\nisShout x     =  not (null letters) \\u0026\\u0026 all isUpper letters\\n                  where letters = filter isAlpha x "}
243	35	3522e61e0ed812300e947a47	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isAlpha, isSpace, isUpper)\nimport Data.List (isSuffixOf)\n\nresponseFor   :: String -> String\nresponseFor x | isEmpty x = "Fine. Be that way!"\n              | isShout x = "Whoa, chill out!"\n              | isQuestion x = "Sure."\n              | otherwise =  "Whatever."\n\nisQuestion    :: String -> Bool\nisQuestion    = isSuffixOf "?"\n\nisEmpty       :: String -> Bool\nisEmpty       = all isSpace\n\nisShout       :: String -> Bool\nisShout x     = not (null letters) && all isUpper letters\n              where letters = filter isAlpha x 	\N	\N	0	2	2015-06-18 06:39:20	2015-06-18 06:39:20	158	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport Data.Char (isAlpha, isSpace, isUpper)\\nimport Data.List (isSuffixOf)\\n\\nresponseFor   :: String -\\u003e String\\nresponseFor x | isEmpty x = \\"Fine. Be that way!\\"\\n              | isShout x = \\"Whoa, chill out!\\"\\n              | isQuestion x = \\"Sure.\\"\\n              | otherwise =  \\"Whatever.\\"\\n\\nisQuestion    :: String -\\u003e Bool\\nisQuestion    = isSuffixOf \\"?\\"\\n\\nisEmpty       :: String -\\u003e Bool\\nisEmpty       = all isSpace\\n\\nisShout       :: String -\\u003e Bool\\nisShout x     = not (null letters) \\u0026\\u0026 all isUpper letters\\n              where letters = filter isAlpha x "}
244	35	297f3d96601fe3fa80e7e325	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isAlpha, isSpace, isUpper)\nimport Data.List (isSuffixOf)\n\nresponseFor     :: String -> String\nresponseFor    x \n  | isEmpty    x = "Fine. Be that way!"\n  | isShout    x = "Whoa, chill out!"\n  | isQuestion x = "Sure."\n  | otherwise    =  "Whatever."\n\nisQuestion      :: String -> Bool\nisQuestion      = isSuffixOf "?"\n\nisEmpty         :: String -> Bool\nisEmpty         = all isSpace\n\nisShout         :: String -> Bool\nisShout x       = not (null letters) && all isUpper letters\n  where letters = filter isAlpha x 	2015-06-20 06:52:12	\N	0	3	2015-06-19 19:29:38	2015-06-19 19:29:38	158	Bob.hs	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport Data.Char (isAlpha, isSpace, isUpper)\\nimport Data.List (isSuffixOf)\\n\\nresponseFor     :: String -\\u003e String\\nresponseFor    x \\n  | isEmpty    x = \\"Fine. Be that way!\\"\\n  | isShout    x = \\"Whoa, chill out!\\"\\n  | isQuestion x = \\"Sure.\\"\\n  | otherwise    =  \\"Whatever.\\"\\n\\nisQuestion      :: String -\\u003e Bool\\nisQuestion      = isSuffixOf \\"?\\"\\n\\nisEmpty         :: String -\\u003e Bool\\nisEmpty         = all isSpace\\n\\nisShout         :: String -\\u003e Bool\\nisShout x       = not (null letters) \\u0026\\u0026 all isUpper letters\\n  where letters = filter isAlpha x "}
245	35	102db877d07cc95802edcb87	superseded	python	bob	def hey(some_string):\n\n\tif some_string.isupper():\n\t\treturn 'Whoa, chill out!'\n\telif some_string.isspace() or some_string == '':\n\t\treturn 'Fine. Be that way!'\n\telif some_string[-1] == '?':\n\t\treturn 'Sure.'\n\telse:\n\t\treturn 'Whatever.'	\N	\N	0	1	2015-06-16 20:48:49	2015-06-16 20:48:49	159	bob.py	{"bob.py":"def hey(some_string):\\n\\n\\tif some_string.isupper():\\n\\t\\treturn 'Whoa, chill out!'\\n\\telif some_string.isspace() or some_string == '':\\n\\t\\treturn 'Fine. Be that way!'\\n\\telif some_string[-1] == '?':\\n\\t\\treturn 'Sure.'\\n\\telse:\\n\\t\\treturn 'Whatever.'"}
246	35	a7e68f45c796555c4eeac69d	superseded	python	bob	def hey(some_string):\n\n\tif some_string.isupper():\n\t\treturn 'Whoa, chill out!'\n\telif some_string.isspace() or some_string == '':\n\t\treturn 'Fine. Be that way!'\n\telif some_string.endswith('?'):\n\t\treturn 'Sure.'\n\telse:\n\t\treturn 'Whatever.'	\N	\N	0	2	2015-06-17 13:06:27	2015-06-17 13:06:27	159	bob.py	{"bob.py":"def hey(some_string):\\n\\n\\tif some_string.isupper():\\n\\t\\treturn 'Whoa, chill out!'\\n\\telif some_string.isspace() or some_string == '':\\n\\t\\treturn 'Fine. Be that way!'\\n\\telif some_string.endswith('?'):\\n\\t\\treturn 'Sure.'\\n\\telse:\\n\\t\\treturn 'Whatever.'"}
247	35	1f3bcab9287c843e5c7b6c21	done	python	bob	def isyelling(some_string):\n\treturn some_string.isupper()\n\ndef issilent(some_string):\n\treturn not some_string or some_string.isspace()\n\ndef isquestion(some_string):\n\treturn some_string.strip().endswith('?')\n\ndef hey(some_string):\n\tif issilent(some_string):\n\t\treturn 'Fine. Be that way!'\n\telif isyelling(some_string):\n\t\treturn 'Whoa, chill out!'\n\telif isquestion(some_string):\n\t\treturn 'Sure.'\n\telse:\n\t\treturn 'Whatever.'	2015-06-22 09:17:21.977317	\N	0	3	2015-06-19 04:44:17	2015-06-19 04:44:17	159	bob.py	{"bob.py":"def isyelling(some_string):\\n\\treturn some_string.isupper()\\n\\ndef issilent(some_string):\\n\\treturn not some_string or some_string.isspace()\\n\\ndef isquestion(some_string):\\n\\treturn some_string.strip().endswith('?')\\n\\ndef hey(some_string):\\n\\tif issilent(some_string):\\n\\t\\treturn 'Fine. Be that way!'\\n\\telif isyelling(some_string):\\n\\t\\treturn 'Whoa, chill out!'\\n\\telif isquestion(some_string):\\n\\t\\treturn 'Sure.'\\n\\telse:\\n\\t\\treturn 'Whatever.'"}
248	35	eca6f1c4ecbe60ec1ee48a25	superseded	haskell	raindrops	module Raindrops ( convert ) where\n\nconvert :: Int -> String\nconvert n | null sounds = show n\n          | otherwise   = sounds\n  where sounds = [c | (x, cs) <- [(3, "Pling"), (5, "Plang"), (7, "Plong")]\n                    , n `rem` x == 0\n                    , c <- cs]	\N	\N	0	3	2015-06-17 04:55:18	2015-06-17 04:55:18	160	Raindrops.hs	{"Raindrops.hs":"module Raindrops ( convert ) where\\n\\nconvert :: Int -\\u003e String\\nconvert n | null sounds = show n\\n          | otherwise   = sounds\\n  where sounds = [c | (x, cs) \\u003c- [(3, \\"Pling\\"), (5, \\"Plang\\"), (7, \\"Plong\\")]\\n                    , n `rem` x == 0\\n                    , c \\u003c- cs]"}
249	35	ec969d942ae375bddb830654	superseded	haskell	raindrops	module Raindrops ( convert ) where\n\nconvert :: Int -> String\nconvert n | null pl_ngs = show n\n          | otherwise   = concat pl_ngs\n  where pl_ngs = [sound | (factor, sound) <- rain, n `rem` factor == 0]\n        rain = [(3, "Pling"), (5, "Plang"), (7, "Plong")]	\N	\N	0	2	2015-06-18 19:00:35	2015-06-18 19:00:35	160	Raindrops.hs	{"Raindrops.hs":"module Raindrops ( convert ) where\\n\\nconvert :: Int -\\u003e String\\nconvert n | null pl_ngs = show n\\n          | otherwise   = concat pl_ngs\\n  where pl_ngs = [sound | (factor, sound) \\u003c- rain, n `rem` factor == 0]\\n        rain = [(3, \\"Pling\\"), (5, \\"Plang\\"), (7, \\"Plong\\")]"}
250	35	0aa9c1fe0aa8a3096a786d13	superseded	haskell	raindrops	module Raindrops ( convert ) where\n\nconvert :: Int -> String\nconvert n = case pl_ngs of\n    (_:_) -> concat pl_ngs\n    []    -> show n\n  where pl_ngs = [sound | (factor, sound) <- rain, n `rem` factor == 0]\n        rain = [(3, "Pling"), (5, "Plang"), (7, "Plong")]	\N	\N	0	1	2015-06-20 08:46:28	2015-06-20 08:46:28	160	Raindrops.hs	{"Raindrops.hs":"module Raindrops ( convert ) where\\n\\nconvert :: Int -\\u003e String\\nconvert n = case pl_ngs of\\n    (_:_) -\\u003e concat pl_ngs\\n    []    -\\u003e show n\\n  where pl_ngs = [sound | (factor, sound) \\u003c- rain, n `rem` factor == 0]\\n        rain = [(3, \\"Pling\\"), (5, \\"Plang\\"), (7, \\"Plong\\")]"}
252	35	e829833085ef692a5c80e154	done	elixir	raindrops	defmodule Raindrops do\n  @doc """\n  Returns a string based on raindrop factors.\n\n  - If the number contains 3 as a prime factor, output 'Pling'.\n  - If the number contains 5 as a prime factor, output 'Plang'.\n  - If the number contains 7 as a prime factor, output 'Plong'.\n  - If the number does not contain 3, 5, or 7 as a prime factor,\n    just pass the number's digits straight through.\n  """\n  @spec convert(pos_integer) :: String.t\n  def convert(number) do\n    handle_non_translatable(raindrops(number), number)\n  end\n\n  @vocabulary [{3 , "Pling"}, {5, "Plang"}, {7, "Plong"}]\n\n  defp raindrops(number) do\n    translate = fn\n      ({factor, word}, translation)\n        when rem(number, factor) == 0 -> translation <> word\n      (_, translation) -> translation\n    end\n    Enum.reduce @vocabulary, "", translate\n  end\n\n  defp handle_non_translatable("", number),          do: to_string(number)\n  defp handle_non_translatable(translation, number), do: translation\n\nend	2015-06-22 09:17:22.247093	\N	0	1	2015-06-17 03:09:41	2015-06-17 03:09:41	161	raindrops.exs	{"raindrops.exs":"defmodule Raindrops do\\n  @doc \\"\\"\\"\\n  Returns a string based on raindrop factors.\\n\\n  - If the number contains 3 as a prime factor, output 'Pling'.\\n  - If the number contains 5 as a prime factor, output 'Plang'.\\n  - If the number contains 7 as a prime factor, output 'Plong'.\\n  - If the number does not contain 3, 5, or 7 as a prime factor,\\n    just pass the number's digits straight through.\\n  \\"\\"\\"\\n  @spec convert(pos_integer) :: String.t\\n  def convert(number) do\\n    handle_non_translatable(raindrops(number), number)\\n  end\\n\\n  @vocabulary [{3 , \\"Pling\\"}, {5, \\"Plang\\"}, {7, \\"Plong\\"}]\\n\\n  defp raindrops(number) do\\n    translate = fn\\n      ({factor, word}, translation)\\n        when rem(number, factor) == 0 -\\u003e translation \\u003c\\u003e word\\n      (_, translation) -\\u003e translation\\n    end\\n    Enum.reduce @vocabulary, \\"\\", translate\\n  end\\n\\n  defp handle_non_translatable(\\"\\", number),          do: to_string(number)\\n  defp handle_non_translatable(translation, number), do: translation\\n\\nend"}
253	35	ee6540426119841df5bbc3dc	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new(nucleotide) unless VALID_NUCLEOTIDES.include? nucleotide\n    nucleotides.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object({}) do |nucleotide, result|\n      result[nucleotide] = count(nucleotide)\n    end\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w(A T C G)\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES + %w(U)\n\n  attr_reader :nucleotides\nend	\N	\N	0	3	2015-06-16 19:02:49	2015-06-16 19:02:49	162	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    @nucleotides = nucleotides\\n  end\\n\\n  def count(nucleotide)\\n    raise ArgumentError.new(nucleotide) unless VALID_NUCLEOTIDES.include? nucleotide\\n    nucleotides.count(nucleotide)\\n  end\\n\\n  def nucleotide_counts\\n    DNA_NUCLEOTIDES.each_with_object({}) do |nucleotide, result|\\n      result[nucleotide] = count(nucleotide)\\n    end\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w(A T C G)\\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES + %w(U)\\n\\n  attr_reader :nucleotides\\nend"}
254	35	bb7a34ca4a88264e0b61ecbe	done	ruby	nucleotide-count	class NucleicAcid\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new(nucleotide) unless NUCLEOBASES.include? nucleotide\n    nucleotides.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    specific_nucleobases.each_with_object({}) do |nucleotide, result|\n      result[nucleotide] = count(nucleotide)\n    end\n  end\n\n  protected\n\n  def specific_nucleobases\n    NUCLEOBASES\n  end\n\n  private\n\n  NUCLEOBASES = %w(A T C G U)\n\n  attr_reader :nucleotides\nend\n\nclass DNA < NucleicAcid\n\n  protected\n\n  def specific_nucleobases\n    %w(A T C G)\n  end\n\nend	2015-06-22 09:17:22.343306	\N	0	4	2015-06-19 00:19:48	2015-06-19 00:19:48	162	nucleotide-count.rb	{"nucleotide-count.rb":"class NucleicAcid\\n  def initialize(nucleotides)\\n    @nucleotides = nucleotides\\n  end\\n\\n  def count(nucleotide)\\n    raise ArgumentError.new(nucleotide) unless NUCLEOBASES.include? nucleotide\\n    nucleotides.count(nucleotide)\\n  end\\n\\n  def nucleotide_counts\\n    specific_nucleobases.each_with_object({}) do |nucleotide, result|\\n      result[nucleotide] = count(nucleotide)\\n    end\\n  end\\n\\n  protected\\n\\n  def specific_nucleobases\\n    NUCLEOBASES\\n  end\\n\\n  private\\n\\n  NUCLEOBASES = %w(A T C G U)\\n\\n  attr_reader :nucleotides\\nend\\n\\nclass DNA \\u003c NucleicAcid\\n\\n  protected\\n\\n  def specific_nucleobases\\n    %w(A T C G)\\n  end\\n\\nend"}
255	35	d7a63aca524e7ef5b0f5ed51	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    @nucleotides = nucleotides.chars\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new(nucleotide) unless VALID_NUCLEOTIDES.include? nucleotide\n    nucleotides.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, result|\n      result[nucleotide] = count(nucleotide)\n    end\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w(A T C G)\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES + %w(U)\n\n  attr_reader :nucleotides\nend	\N	\N	0	1	2015-06-19 02:25:52	2015-06-19 02:25:52	162	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    @nucleotides = nucleotides.chars\\n  end\\n\\n  def count(nucleotide)\\n    raise ArgumentError.new(nucleotide) unless VALID_NUCLEOTIDES.include? nucleotide\\n    nucleotides.count(nucleotide)\\n  end\\n\\n  def nucleotide_counts\\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, result|\\n      result[nucleotide] = count(nucleotide)\\n    end\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w(A T C G)\\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES + %w(U)\\n\\n  attr_reader :nucleotides\\nend"}
256	35	175180adb6f9ce2ee0739e78	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new(nucleotide) unless VALID_NUCLEOTIDES.include? nucleotide\n    nucleotides.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, result|\n      result[nucleotide] = count(nucleotide)\n    end\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w(A T C G)\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES + %w(U)\n\n  attr_reader :nucleotides\nend	\N	\N	0	2	2015-06-19 14:21:01	2015-06-19 14:21:01	162	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    @nucleotides = nucleotides\\n  end\\n\\n  def count(nucleotide)\\n    raise ArgumentError.new(nucleotide) unless VALID_NUCLEOTIDES.include? nucleotide\\n    nucleotides.count(nucleotide)\\n  end\\n\\n  def nucleotide_counts\\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, result|\\n      result[nucleotide] = count(nucleotide)\\n    end\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w(A T C G)\\n  VALID_NUCLEOTIDES = DNA_NUCLEOTIDES + %w(U)\\n\\n  attr_reader :nucleotides\\nend"}
257	14	6633d20042700dc2c90498e6	superseded	ruby	leap	class Year < Struct.new(:number)\n  def leap?\n    (divisable_by?(4) && !century?) || divisable_by?(400)\n  end\n  \n  def century?\n    divisable_by? 100\n  end\n\nprivate\n  def divisable_by?(divisor)\n    number.multiple_of? divisor\n  end\nend\n\nclass Integer\n  def multiple_of?(divider)\n    self % divider == 0\n  end\nend	\N	\N	0	3	2015-03-23 09:23:39	2015-03-23 09:23:39	163	year.rb	{"year.rb":"class Year \\u003c Struct.new(:number)\\n  def leap?\\n    (divisable_by?(4) \\u0026\\u0026 !century?) || divisable_by?(400)\\n  end\\n  \\n  def century?\\n    divisable_by? 100\\n  end\\n\\nprivate\\n  def divisable_by?(divisor)\\n    number.multiple_of? divisor\\n  end\\nend\\n\\nclass Integer\\n  def multiple_of?(divider)\\n    self % divider == 0\\n  end\\nend"}
258	14	9f4af8096cc621dbfb7c9fba	pending	ruby	leap	class Year < Struct.new(:number)\n  def leap?\n    (has_factor?(4) && !century?) || has_factor?(400)\n  end\n  \n  def century?\n    has_factor? 100\n  end\n\nprivate\n  def has_factor?(divisor)\n    number % divisor == 0\n  end\nend	\N	\N	0	4	2015-04-03 14:38:41	2015-04-03 14:38:41	163	year.rb	{"year.rb":"class Year \\u003c Struct.new(:number)\\n  def leap?\\n    (has_factor?(4) \\u0026\\u0026 !century?) || has_factor?(400)\\n  end\\n  \\n  def century?\\n    has_factor? 100\\n  end\\n\\nprivate\\n  def has_factor?(divisor)\\n    number % divisor == 0\\n  end\\nend"}
259	14	c594657f0093cf40a73e70c2	superseded	ruby	leap	class Year < Struct.new(:number)\n  def leap?\n    unless century?\n      number.multiple_of? 4\n    else\n      number.multiple_of? 400\n    end\n  end\n  \n  def century?\n    number.multiple_of? 100\n  end\nend\n\nclass Integer\n  def multiple_of?(divider)\n    self % divider == 0\n  end\nend	\N	\N	0	1	2015-04-07 05:29:46	2015-04-07 05:29:46	163	year.rb	{"year.rb":"class Year \\u003c Struct.new(:number)\\n  def leap?\\n    unless century?\\n      number.multiple_of? 4\\n    else\\n      number.multiple_of? 400\\n    end\\n  end\\n  \\n  def century?\\n    number.multiple_of? 100\\n  end\\nend\\n\\nclass Integer\\n  def multiple_of?(divider)\\n    self % divider == 0\\n  end\\nend"}
260	14	6abe3e4f4d5abeabd301919f	superseded	ruby	leap	class Year < Struct.new(:number)\n  def leap?\n    unless century?\n      divisable_by? 4\n    else\n      divisable_by? 400\n    end\n  end\n  \n  def century?\n    divisable_by? 100\n  end\n\nprivate\n  def divisable_by?(divisor)\n    number.multiple_of? divisor\n  end\nend\n\nclass Integer\n  def multiple_of?(divider)\n    self % divider == 0\n  end\nend	\N	\N	0	2	2015-05-25 09:49:14	2015-05-25 09:49:14	163	year.rb	{"year.rb":"class Year \\u003c Struct.new(:number)\\n  def leap?\\n    unless century?\\n      divisable_by? 4\\n    else\\n      divisable_by? 400\\n    end\\n  end\\n  \\n  def century?\\n    divisable_by? 100\\n  end\\n\\nprivate\\n  def divisable_by?(divisor)\\n    number.multiple_of? divisor\\n  end\\nend\\n\\nclass Integer\\n  def multiple_of?(divider)\\n    self % divider == 0\\n  end\\nend"}
261	14	9840e9503becb34842b50c83	superseded	ruby	robot-name	class Robot\r\n  def initialize\r\n    @name = new_name\r\n  end\r\n  \r\n  attr_accessor :name\r\n  \r\n  def reset\r\n    initialize\r\n  end\r\n  \r\n  private\r\n  \r\n  def new_name\r\n    (1..2).map { ('A'..'Z').to_a[Random.new.rand(26)] }.join +\r\n\tRandom.new.rand(100..999).to_s\r\n  end\r\nend	\N	\N	0	2	2015-03-26 04:08:30	2015-03-26 04:08:30	164	robot.rb	{"robot.rb":"class Robot\\r\\n  def initialize\\r\\n    @name = new_name\\r\\n  end\\r\\n  \\r\\n  attr_accessor :name\\r\\n  \\r\\n  def reset\\r\\n    initialize\\r\\n  end\\r\\n  \\r\\n  private\\r\\n  \\r\\n  def new_name\\r\\n    (1..2).map { ('A'..'Z').to_a[Random.new.rand(26)] }.join +\\r\\n\\tRandom.new.rand(100..999).to_s\\r\\n  end\\r\\nend"}
262	14	c338930680bab5ff6ae9d711	pending	ruby	robot-name	class Robot\r\n  def initialize\r\n    @name = new_name\r\n  end\r\n  \r\n  attr_reader :name\r\n  \r\n  def reset\r\n    initialize\r\n  end\r\n  \r\n  private\r\n  \r\n  def new_name\r\n    (1..2).map { ('A'..'Z').to_a[Random.new.rand(26)] }.join +\r\n\tRandom.new.rand(100..999).to_s\r\n  end\r\nend	\N	\N	0	3	2015-05-17 17:14:31	2015-05-17 17:14:31	164	robot.rb	{"robot.rb":"class Robot\\r\\n  def initialize\\r\\n    @name = new_name\\r\\n  end\\r\\n  \\r\\n  attr_reader :name\\r\\n  \\r\\n  def reset\\r\\n    initialize\\r\\n  end\\r\\n  \\r\\n  private\\r\\n  \\r\\n  def new_name\\r\\n    (1..2).map { ('A'..'Z').to_a[Random.new.rand(26)] }.join +\\r\\n\\tRandom.new.rand(100..999).to_s\\r\\n  end\\r\\nend"}
263	14	bcef564e300963b6a7005edf	superseded	ruby	robot-name	class Robot\r\n  def initialize\r\n    @name = new_name\r\n  end\r\n  \r\n  def name\r\n    return @name\r\n  end\r\n  \r\n  def reset\r\n    @name = new_name\r\n  end\r\n  \r\n  private\r\n  \r\n  def new_name\r\n    (1..2).map { ('A'..'Z').to_a[Random.new.rand(26)] }.join +\r\n\tRandom.new.rand(100..999).to_s\r\n  end\r\nend	\N	\N	0	1	2015-05-27 23:37:49	2015-05-27 23:37:49	164	robot.rb	{"robot.rb":"class Robot\\r\\n  def initialize\\r\\n    @name = new_name\\r\\n  end\\r\\n  \\r\\n  def name\\r\\n    return @name\\r\\n  end\\r\\n  \\r\\n  def reset\\r\\n    @name = new_name\\r\\n  end\\r\\n  \\r\\n  private\\r\\n  \\r\\n  def new_name\\r\\n    (1..2).map { ('A'..'Z').to_a[Random.new.rand(26)] }.join +\\r\\n\\tRandom.new.rand(100..999).to_s\\r\\n  end\\r\\nend"}
275	14	55591e88d81622be25d8b0d9	pending	coffeescript	hexadecimal	class Hexadecimal\n  BASE = 16\n\n  DECIMAL =\n    "0": 0\n    "1": 1\n    "2": 2\n    "3": 3\n    "4": 4\n    "5": 5\n    "6": 6\n    "7": 7\n    "8": 8\n    "9": 9\n    "a": 10\n    "b": 11\n    "c": 12\n    "d": 13\n    "e": 14\n    "f": 15\n\n  constructor: (@number) ->\n\n  toDecimal: ->\n    sum = 0\n    for digit, index in digits(@number)\n      return 0 unless DECIMAL[digit]? \n      sum += DECIMAL[digit] * BASE ** index\n    sum\n\n  digits = (number) ->\n    number.split("").reverse()\n\nmodule.exports = Hexadecimal	\N	\N	0	2	2015-04-05 21:31:42	2015-04-05 21:31:42	172	hexadecimal.coffee	{"hexadecimal.coffee":"class Hexadecimal\\n  BASE = 16\\n\\n  DECIMAL =\\n    \\"0\\": 0\\n    \\"1\\": 1\\n    \\"2\\": 2\\n    \\"3\\": 3\\n    \\"4\\": 4\\n    \\"5\\": 5\\n    \\"6\\": 6\\n    \\"7\\": 7\\n    \\"8\\": 8\\n    \\"9\\": 9\\n    \\"a\\": 10\\n    \\"b\\": 11\\n    \\"c\\": 12\\n    \\"d\\": 13\\n    \\"e\\": 14\\n    \\"f\\": 15\\n\\n  constructor: (@number) -\\u003e\\n\\n  toDecimal: -\\u003e\\n    sum = 0\\n    for digit, index in digits(@number)\\n      return 0 unless DECIMAL[digit]? \\n      sum += DECIMAL[digit] * BASE ** index\\n    sum\\n\\n  digits = (number) -\\u003e\\n    number.split(\\"\\").reverse()\\n\\nmodule.exports = Hexadecimal"}
276	14	16119b4d0e54be017d9c64f7	superseded	coffeescript	hexadecimal	class Hexadecimal\n  BASE = 16\n\n  DECIMAL =\n    "0": 0\n    "1": 1\n    "2": 2\n    "3": 3\n    "4": 4\n    "5": 5\n    "6": 6\n    "7": 7\n    "8": 8\n    "9": 9\n    "a": 10\n    "b": 11\n    "c": 12\n    "d": 13\n    "e": 14\n    "f": 15\n\n  constructor: (@number) ->\n\n  toDecimal: ->\n    sum = 0\n    for digit, index in digits(@number)\n      return 0 if DECIMAL[digit] == undefined \n      sum += DECIMAL[digit] * BASE ** index\n    sum\n\n  digits = (number) ->\n    number.split("").reverse()\n\nmodule.exports = Hexadecimal	\N	\N	0	1	2015-04-09 19:31:41	2015-04-09 19:31:41	172	hexadecimal.coffee	{"hexadecimal.coffee":"class Hexadecimal\\n  BASE = 16\\n\\n  DECIMAL =\\n    \\"0\\": 0\\n    \\"1\\": 1\\n    \\"2\\": 2\\n    \\"3\\": 3\\n    \\"4\\": 4\\n    \\"5\\": 5\\n    \\"6\\": 6\\n    \\"7\\": 7\\n    \\"8\\": 8\\n    \\"9\\": 9\\n    \\"a\\": 10\\n    \\"b\\": 11\\n    \\"c\\": 12\\n    \\"d\\": 13\\n    \\"e\\": 14\\n    \\"f\\": 15\\n\\n  constructor: (@number) -\\u003e\\n\\n  toDecimal: -\\u003e\\n    sum = 0\\n    for digit, index in digits(@number)\\n      return 0 if DECIMAL[digit] == undefined \\n      sum += DECIMAL[digit] * BASE ** index\\n    sum\\n\\n  digits = (number) -\\u003e\\n    number.split(\\"\\").reverse()\\n\\nmodule.exports = Hexadecimal"}
277	14	25f09d39425503066155bf86	pending	ruby	roman-numerals	class Fixnum\n  ROMANS_SINGLE_DIGITS = [\n    '', 'I', 'II', 'III', 'IV', 'V',\n    'VI', 'VII', 'VIII', 'IX'\n  ]\n\n  ROMANS_DOUBLE_DIGITS = [\n    '', 'X', 'XX', 'XXX', 'XL', 'L',\n    'LX', 'LXX', 'LXXX', 'XC'\n  ]\n\n  ROMANS_TRIPLE_DIGITS = [\n    '', 'C', 'CC', 'CCC', 'CD', 'D',\n    'DC', 'DCC', 'DCCC', 'CM'\n  ]\n\n  ROMANS_QUADRUPLE_DIGITS = [\n    '', 'M', 'MM', 'MMM'\n  ]\n\n  def to_roman\n    digits = self.to_s.split('').map(&:to_i)\n    result = ''\n\n    result += ROMANS_QUADRUPLE_DIGITS[digits[-4]] if digits[-4]\n    result += ROMANS_TRIPLE_DIGITS[digits[-3]] if digits[-3]\n    result += ROMANS_DOUBLE_DIGITS[digits[-2]] if digits[-2]\n    result += ROMANS_SINGLE_DIGITS[digits[-1]]\n\n    result\n  end\nend	\N	\N	0	1	2015-04-05 19:06:58	2015-04-05 19:06:58	173	/ruby/roman-numerals/roman.rb	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  ROMANS_SINGLE_DIGITS = [\\n    '', 'I', 'II', 'III', 'IV', 'V',\\n    'VI', 'VII', 'VIII', 'IX'\\n  ]\\n\\n  ROMANS_DOUBLE_DIGITS = [\\n    '', 'X', 'XX', 'XXX', 'XL', 'L',\\n    'LX', 'LXX', 'LXXX', 'XC'\\n  ]\\n\\n  ROMANS_TRIPLE_DIGITS = [\\n    '', 'C', 'CC', 'CCC', 'CD', 'D',\\n    'DC', 'DCC', 'DCCC', 'CM'\\n  ]\\n\\n  ROMANS_QUADRUPLE_DIGITS = [\\n    '', 'M', 'MM', 'MMM'\\n  ]\\n\\n  def to_roman\\n    digits = self.to_s.split('').map(\\u0026:to_i)\\n    result = ''\\n\\n    result += ROMANS_QUADRUPLE_DIGITS[digits[-4]] if digits[-4]\\n    result += ROMANS_TRIPLE_DIGITS[digits[-3]] if digits[-3]\\n    result += ROMANS_DOUBLE_DIGITS[digits[-2]] if digits[-2]\\n    result += ROMANS_SINGLE_DIGITS[digits[-1]]\\n\\n    result\\n  end\\nend"}
278	14	de686a30cca927589627ee5b	pending	python	matrix	'''exer matrix'''\n\n\nclass Matrix(object):\n    '''hold representation of matrix'''\n    def __init__(self, mdata=''):\n        '''init object using mdata which is rows marked by newlines and\n        columns by spaces'''\n        self.rows = []\n        for row in mdata.split('\\n'):\n            self.rows.append([int(col) for col in row.split()])\n\n        self.columns = []\n        for col in self.rows[0]:        # use row0 to setup column structure\n            self.columns.append([col])\n        for row in self.rows[1:]:       # append remaining data into structure\n            for ndx, col in enumerate(row):\n                self.columns[ndx].append(col)	\N	\N	0	1	2015-03-18 02:01:35	2015-03-18 02:01:35	174	matrix.py	{"matrix.py":"'''exer matrix'''\\n\\n\\nclass Matrix(object):\\n    '''hold representation of matrix'''\\n    def __init__(self, mdata=''):\\n        '''init object using mdata which is rows marked by newlines and\\n        columns by spaces'''\\n        self.rows = []\\n        for row in mdata.split('\\\\n'):\\n            self.rows.append([int(col) for col in row.split()])\\n\\n        self.columns = []\\n        for col in self.rows[0]:        # use row0 to setup column structure\\n            self.columns.append([col])\\n        for row in self.rows[1:]:       # append remaining data into structure\\n            for ndx, col in enumerate(row):\\n                self.columns[ndx].append(col)"}
279	14	88a9310851f0c4e4b1d5a185	superseded	python	simple-cipher	import string\r\nimport random\r\nclass Caesar():\r\n\r\n    def __init__(self):\r\n        pass\r\n    \r\n    def encode(self, s):\r\n        return s.lower().translate(str.maketrans(\r\n            string.ascii_lowercase,\r\n            string.ascii_lowercase[3:]+string.ascii_lowercase[0:3],\r\n            string.punctuation.join(string.whitespace).join(string.digits)))\r\n\r\n    def decode(self, s):\r\n        return s.lower().translate(str.maketrans(\r\n            string.ascii_lowercase,\r\n            string.ascii_lowercase[-3:]+string.ascii_lowercase[:-3],\r\n            string.punctuation.join(string.whitespace).join(string.digits)))\r\n\r\nclass Cipher():\r\n    def __init__(self, key='.'):\r\n        if key == '.':\r\n            key = ""\r\n            for i in range(100):\r\n                key += string.ascii_lowercase[random.randint(0,25)]\r\n        self.key = key\r\n        \r\n    def encode(self, s):\r\n        position = 0\r\n        result = ""\r\n        for i in s:\r\n            shift = string.ascii_lowercase.index(self.key[position%len(self.key)])\r\n            old = string.ascii_lowercase.index(i)\r\n            result = result + string.ascii_lowercase[(old+shift)%26]\r\n            position+=1\r\n        return result\r\n\r\n    def decode(self, s):\r\n        position = 0\r\n        result = ""\r\n        for i in s:\r\n            shift = string.ascii_lowercase.index(self.key[position%len(self.key)])\r\n            old = string.ascii_lowercase.index(i)\r\n            result = result + string.ascii_lowercase[(old-shift)%26]\r\n            position+=1\r\n        return result\r	\N	\N	0	1	2015-04-18 15:05:30	2015-04-18 15:05:30	175	cipher.py	{"cipher.py":"import string\\r\\nimport random\\r\\nclass Caesar():\\r\\n\\r\\n    def __init__(self):\\r\\n        pass\\r\\n    \\r\\n    def encode(self, s):\\r\\n        return s.lower().translate(str.maketrans(\\r\\n            string.ascii_lowercase,\\r\\n            string.ascii_lowercase[3:]+string.ascii_lowercase[0:3],\\r\\n            string.punctuation.join(string.whitespace).join(string.digits)))\\r\\n\\r\\n    def decode(self, s):\\r\\n        return s.lower().translate(str.maketrans(\\r\\n            string.ascii_lowercase,\\r\\n            string.ascii_lowercase[-3:]+string.ascii_lowercase[:-3],\\r\\n            string.punctuation.join(string.whitespace).join(string.digits)))\\r\\n\\r\\nclass Cipher():\\r\\n    def __init__(self, key='.'):\\r\\n        if key == '.':\\r\\n            key = \\"\\"\\r\\n            for i in range(100):\\r\\n                key += string.ascii_lowercase[random.randint(0,25)]\\r\\n        self.key = key\\r\\n        \\r\\n    def encode(self, s):\\r\\n        position = 0\\r\\n        result = \\"\\"\\r\\n        for i in s:\\r\\n            shift = string.ascii_lowercase.index(self.key[position%len(self.key)])\\r\\n            old = string.ascii_lowercase.index(i)\\r\\n            result = result + string.ascii_lowercase[(old+shift)%26]\\r\\n            position+=1\\r\\n        return result\\r\\n\\r\\n    def decode(self, s):\\r\\n        position = 0\\r\\n        result = \\"\\"\\r\\n        for i in s:\\r\\n            shift = string.ascii_lowercase.index(self.key[position%len(self.key)])\\r\\n            old = string.ascii_lowercase.index(i)\\r\\n            result = result + string.ascii_lowercase[(old-shift)%26]\\r\\n            position+=1\\r\\n        return result\\r"}
311	41	522a7e0f7b7467f15e487690	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	2015-01-30 21:18:20	2015-01-30 21:18:20	199	school.py	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
280	14	2f8fe8704b69c45bb7299fba	pending	python	simple-cipher	import string\r\nimport random\r\nclass Caesar():\r\n    \r\n    def encode(self, s, mode="encode"):\r\n        s_p = 1 if mode == "encode" else -1\r\n        return s.lower().translate(str.maketrans(\r\n            string.ascii_lowercase,\r\n            string.ascii_lowercase[s_p * 3:] + string.ascii_lowercase[:s_p * 3],\r\n            string.punctuation.join(string.whitespace).join(string.digits)))\r\n\r\n    def decode(self, s, mode="decode"):\r\n        return self.encode(s, mode)\r\n\r\nclass Cipher():\r\n    def __init__(self, key=""):\r\n        if key == "":\r\n            for i in range(100):\r\n                key += string.ascii_lowercase[random.randint(0,25)]\r\n        self.key = key\r\n        \r\n    def encode(self, s, mode="encode"):\r\n        position = 0\r\n        result = ""\r\n        shift_polarity = 1 if mode == "encode" else -1\r\n        for i in s:\r\n            shift = shift_polarity * string.ascii_lowercase.index(\r\n                self.key[position % len(self.key)])\r\n            old = string.ascii_lowercase.index(i)\r\n            result = result + string.ascii_lowercase[(old + shift) % 26]\r\n            position += 1\r\n        return result\r\n\r\n    def decode(self, s, mode="decode"):\r\n        return self.encode(s, mode)\r	\N	\N	0	2	2015-05-29 22:47:52	2015-05-29 22:47:52	175	cipher.py	{"cipher.py":"import string\\r\\nimport random\\r\\nclass Caesar():\\r\\n    \\r\\n    def encode(self, s, mode=\\"encode\\"):\\r\\n        s_p = 1 if mode == \\"encode\\" else -1\\r\\n        return s.lower().translate(str.maketrans(\\r\\n            string.ascii_lowercase,\\r\\n            string.ascii_lowercase[s_p * 3:] + string.ascii_lowercase[:s_p * 3],\\r\\n            string.punctuation.join(string.whitespace).join(string.digits)))\\r\\n\\r\\n    def decode(self, s, mode=\\"decode\\"):\\r\\n        return self.encode(s, mode)\\r\\n\\r\\nclass Cipher():\\r\\n    def __init__(self, key=\\"\\"):\\r\\n        if key == \\"\\":\\r\\n            for i in range(100):\\r\\n                key += string.ascii_lowercase[random.randint(0,25)]\\r\\n        self.key = key\\r\\n        \\r\\n    def encode(self, s, mode=\\"encode\\"):\\r\\n        position = 0\\r\\n        result = \\"\\"\\r\\n        shift_polarity = 1 if mode == \\"encode\\" else -1\\r\\n        for i in s:\\r\\n            shift = shift_polarity * string.ascii_lowercase.index(\\r\\n                self.key[position % len(self.key)])\\r\\n            old = string.ascii_lowercase.index(i)\\r\\n            result = result + string.ascii_lowercase[(old + shift) % 26]\\r\\n            position += 1\\r\\n        return result\\r\\n\\r\\n    def decode(self, s, mode=\\"decode\\"):\\r\\n        return self.encode(s, mode)\\r"}
281	14	65178b874be3c252f0e5b7fa	pending	go	grains	package grains\n\nimport (\n\t"errors"\n)\n\nfunc Square(n int) (uint64, error) {\n\tif n < 1 || n > 64 {\n\t\treturn 0, errors.New("out of range")\n\t}\n\treturn 1 << (uint(n) - 1), nil\n}\n\nfunc Total() uint64 {\n\tconst n uint = 64 // I'd have expected this as an input\n\treturn 1<<n - 1\n}	\N	\N	0	1	2015-04-16 21:10:25	2015-04-16 21:10:25	176	grains.go	{"grains.go":"package grains\\n\\nimport (\\n\\t\\"errors\\"\\n)\\n\\nfunc Square(n int) (uint64, error) {\\n\\tif n \\u003c 1 || n \\u003e 64 {\\n\\t\\treturn 0, errors.New(\\"out of range\\")\\n\\t}\\n\\treturn 1 \\u003c\\u003c (uint(n) - 1), nil\\n}\\n\\nfunc Total() uint64 {\\n\\tconst n uint = 64 // I'd have expected this as an input\\n\\treturn 1\\u003c\\u003cn - 1\\n}"}
282	14	46ff10497789224f7cf544ed	pending	python	largest-series-product	from numpy import prod\n\ndef largest_product(digits, slice_length):\n    \n    slice_list = slices(digits, slice_length)  \n    products = []\n    \n    for i in range(0, len(slice_list)):\n        products.append(prod(slice_list[i]))\n        \n    return max(products)\n    \ndef slices(digits, slice_length):\n    "Return all slices of given length from digit string"\n    \n    if slice_length > len(digits):\n         raise ValueError('Slice length exceeds length of digit string.')\n    \n    n = 0\n    slices = []\n    while len(digits) - n >= slice_length:\n        \n        slices.append(map(int, digits[n:n+slice_length]))\n        n += 1\n    \n    return slices	\N	\N	0	1	2015-03-20 00:58:08	2015-03-20 00:58:08	177	series.py	{"series.py":"from numpy import prod\\n\\ndef largest_product(digits, slice_length):\\n    \\n    slice_list = slices(digits, slice_length)  \\n    products = []\\n    \\n    for i in range(0, len(slice_list)):\\n        products.append(prod(slice_list[i]))\\n        \\n    return max(products)\\n    \\ndef slices(digits, slice_length):\\n    \\"Return all slices of given length from digit string\\"\\n    \\n    if slice_length \\u003e len(digits):\\n         raise ValueError('Slice length exceeds length of digit string.')\\n    \\n    n = 0\\n    slices = []\\n    while len(digits) - n \\u003e= slice_length:\\n        \\n        slices.append(map(int, digits[n:n+slice_length]))\\n        n += 1\\n    \\n    return slices"}
283	14	c8aa7998e82e95517f1eb675	pending	cpp	phone-number	#ifndef _PHONE_H_\n#define _PHONE_H_\n\n#include <string>\n#include <regex>\n\nusing std::string;\n\n//\n// class phone_number\n//\n// Parses various representations of a phone number\n// with a regular expression to a common format.\n//\nclass phone_number\n{\npublic:\n    \n    phone_number() = default;\n    phone_number( const string &nmbr ) : input_number(nmbr), processed_number(process_number())\n    {\n        \n    }\n    \n    string number() const\n    { return processed_number; }\n    \n    string area_code() const\n    { return processed_number.substr( 0, 3 ); }\n    \n    operator string() const;\n    \nprivate:\n    \n    const string input_number;\n    const string processed_number;\n    string process_number() const;\n};\n\n\n//\n// operator string()\n//\n// Converts the phone_number object to a string format like:\n// (123) 456-7890.\n//\ninline\nphone_number::operator string() const\n{\n    string num = processed_number;\n    \n    return "(" + num.substr(0,3) + ")" + " " + num.substr(3,3) + "-" + num.substr(6,4);\n}\n\n\n//\n// process_number()\n//\n// Does all the actual number processing mostly\n// using a regular expression.\n//\nstring phone_number::process_number() const\n{\n    string phone_pattern = "(1)?(\\\\()?(\\\\d{3})(\\\\))?([-. ])?(\\\\d{3})([-. ]?)(\\\\d{4})";\n    std::regex r(phone_pattern);\n    string fmt = "$3$6$8";\n    string answer;\n    \n    answer = regex_replace( input_number, r, fmt );\n    \n    if ( answer.size() == 11 && answer[0] != 1 )\n        answer = "0000000000";\n    else if ( answer.size() <= 9 )\n        answer = "0000000000";\n    \n    return answer;\n}\n\n#endif	\N	\N	0	1	2015-04-28 06:37:56	2015-04-28 06:37:56	178	/cpp/phone-number/phone_number.h	{"/cpp/phone-number/phone_number.h":"#ifndef _PHONE_H_\\n#define _PHONE_H_\\n\\n#include \\u003cstring\\u003e\\n#include \\u003cregex\\u003e\\n\\nusing std::string;\\n\\n//\\n// class phone_number\\n//\\n// Parses various representations of a phone number\\n// with a regular expression to a common format.\\n//\\nclass phone_number\\n{\\npublic:\\n    \\n    phone_number() = default;\\n    phone_number( const string \\u0026nmbr ) : input_number(nmbr), processed_number(process_number())\\n    {\\n        \\n    }\\n    \\n    string number() const\\n    { return processed_number; }\\n    \\n    string area_code() const\\n    { return processed_number.substr( 0, 3 ); }\\n    \\n    operator string() const;\\n    \\nprivate:\\n    \\n    const string input_number;\\n    const string processed_number;\\n    string process_number() const;\\n};\\n\\n\\n//\\n// operator string()\\n//\\n// Converts the phone_number object to a string format like:\\n// (123) 456-7890.\\n//\\ninline\\nphone_number::operator string() const\\n{\\n    string num = processed_number;\\n    \\n    return \\"(\\" + num.substr(0,3) + \\")\\" + \\" \\" + num.substr(3,3) + \\"-\\" + num.substr(6,4);\\n}\\n\\n\\n//\\n// process_number()\\n//\\n// Does all the actual number processing mostly\\n// using a regular expression.\\n//\\nstring phone_number::process_number() const\\n{\\n    string phone_pattern = \\"(1)?(\\\\\\\\()?(\\\\\\\\d{3})(\\\\\\\\))?([-. ])?(\\\\\\\\d{3})([-. ]?)(\\\\\\\\d{4})\\";\\n    std::regex r(phone_pattern);\\n    string fmt = \\"$3$6$8\\";\\n    string answer;\\n    \\n    answer = regex_replace( input_number, r, fmt );\\n    \\n    if ( answer.size() == 11 \\u0026\\u0026 answer[0] != 1 )\\n        answer = \\"0000000000\\";\\n    else if ( answer.size() \\u003c= 9 )\\n        answer = \\"0000000000\\";\\n    \\n    return answer;\\n}\\n\\n#endif"}
284	14	b65b4f6db5b8d9c9c056d36e	pending	scala	gigasecond	import java.util.GregorianCalendar\r\n\r\ncase class Gigasecond(cal: GregorianCalendar) {\r\n  val date: GregorianCalendar = new GregorianCalendar()\r\n  date.setTimeZone(cal.getTimeZone)\r\n  date.setTimeInMillis(cal.getTimeInMillis + (BigInt(10).pow(9).toLong * 1000))\r\n}	\N	\N	0	1	2015-04-17 15:39:26	2015-04-17 15:39:26	179	\\scala\\gigasecond\\src\\main\\scala\\Gigasecond.scala	{"\\\\scala\\\\gigasecond\\\\src\\\\main\\\\scala\\\\Gigasecond.scala":"import java.util.GregorianCalendar\\r\\n\\r\\ncase class Gigasecond(cal: GregorianCalendar) {\\r\\n  val date: GregorianCalendar = new GregorianCalendar()\\r\\n  date.setTimeZone(cal.getTimeZone)\\r\\n  date.setTimeInMillis(cal.getTimeInMillis + (BigInt(10).pow(9).toLong * 1000))\\r\\n}"}
285	14	a48573037e96b7816b3219b2	pending	ruby	nth-prime	class Prime\n  require 'prime'\n  def self.nth(input)\n    if input > 0\n      Prime.take(input).last \n    else\n      puts "Try a different numero."\n      raise ArgumentError\n    end\n  end\nend\n\n# Ruby 2.1:  Prime::EratosthenesSieve.instance.get_nth_prime(input)	\N	\N	0	1	2015-04-05 03:16:08	2015-04-05 03:16:08	180	/ruby/nth-prime/prime.rb	{"/ruby/nth-prime/prime.rb":"class Prime\\n  require 'prime'\\n  def self.nth(input)\\n    if input \\u003e 0\\n      Prime.take(input).last \\n    else\\n      puts \\"Try a different numero.\\"\\n      raise ArgumentError\\n    end\\n  end\\nend\\n\\n# Ruby 2.1:  Prime::EratosthenesSieve.instance.get_nth_prime(input)"}
312	41	fc9d9f4987f3ada1ebb21c66	pending	python	grains	def on_square(n):\n    s = 1\n    for i in range(n-1):\n        s *= 2\n    return s\n    \ndef total_after(n):\n    s, t = 1, 1\n    for i in range(n-1):\n        s *= 2\n        t += s\n    return t	\N	\N	0	1	2015-03-27 10:36:20	2015-03-27 10:36:20	200	grains.py	{"grains.py":"def on_square(n):\\n    s = 1\\n    for i in range(n-1):\\n        s *= 2\\n    return s\\n    \\ndef total_after(n):\\n    s, t = 1, 1\\n    for i in range(n-1):\\n        s *= 2\\n        t += s\\n    return t"}
286	14	fc7fdfeaba7e566721d005b5	pending	cpp	triangle	#ifdef triangle_h\n#ifndef triangle_header\n#define triangle_header\nnamespace triangle {\n    const int equilateral = 1;\n    const int isosceles = 2;\n    const int scalene = 3;\n    const int illegal = 4;\n    int kind(double side_a, double side_b, double side_c);\n}\n#endif //triangle_header\n#endif //triangle_h\n#include "triangle.h"\n#include <stdexcept>\nint triangle::kind(double side_a, double side_b, double side_c)\n{\n    //no side is allowed to be 0\n    if(side_a==0 || side_b==0 || side_c == 0)\n        throw std::domain_error("Not a triangle");\n    //The sum of the lengths of any two sides of a triangle always exceeds the\n    //length of the third side\n    if(side_a+side_b<=side_c || side_b+side_c<=side_a || side_c+side_a<=side_b)\n        return illegal;\n    //all sides are the same in an equilateral triangle\n    if(side_a==side_b && side_b==side_c)\n        return equilateral;\n    //two sides are the same in an isosceles triangle\n    if(side_a==side_b || side_b==side_c || side_c==side_a)\n        return isosceles;\n    //nothing is the same in a scalene triangle\n    return scalene;\n}	\N	\N	0	1	2015-05-07 21:09:30	2015-05-07 21:09:30	181	triangle.cpp	{"triangle.cpp":"#ifdef triangle_h\\n#ifndef triangle_header\\n#define triangle_header\\nnamespace triangle {\\n    const int equilateral = 1;\\n    const int isosceles = 2;\\n    const int scalene = 3;\\n    const int illegal = 4;\\n    int kind(double side_a, double side_b, double side_c);\\n}\\n#endif //triangle_header\\n#endif //triangle_h\\n#include \\"triangle.h\\"\\n#include \\u003cstdexcept\\u003e\\nint triangle::kind(double side_a, double side_b, double side_c)\\n{\\n    //no side is allowed to be 0\\n    if(side_a==0 || side_b==0 || side_c == 0)\\n        throw std::domain_error(\\"Not a triangle\\");\\n    //The sum of the lengths of any two sides of a triangle always exceeds the\\n    //length of the third side\\n    if(side_a+side_b\\u003c=side_c || side_b+side_c\\u003c=side_a || side_c+side_a\\u003c=side_b)\\n        return illegal;\\n    //all sides are the same in an equilateral triangle\\n    if(side_a==side_b \\u0026\\u0026 side_b==side_c)\\n        return equilateral;\\n    //two sides are the same in an isosceles triangle\\n    if(side_a==side_b || side_b==side_c || side_c==side_a)\\n        return isosceles;\\n    //nothing is the same in a scalene triangle\\n    return scalene;\\n}"}
287	14	1222d1dc296be3ab2e97b91e	pending	clojure	raindrops	(ns raindrops)\n\n(defn- get-string [n]\n  (apply str [(if (= 0 (mod n 3)) "Pling")\n              (if (= 0 (mod n 5)) "Plang")\n              (if (= 0 (mod n 7)) "Plong")]))\n\n(defn convert [n]\n  (let [s (get-string n)]\n    (if (= "" s)\n      (str n)\n      s)))	\N	\N	0	1	2015-06-07 19:59:43	2015-06-07 19:59:43	182	raindrops.clj	{"raindrops.clj":"(ns raindrops)\\n\\n(defn- get-string [n]\\n  (apply str [(if (= 0 (mod n 3)) \\"Pling\\")\\n              (if (= 0 (mod n 5)) \\"Plang\\")\\n              (if (= 0 (mod n 7)) \\"Plong\\")]))\\n\\n(defn convert [n]\\n  (let [s (get-string n)]\\n    (if (= \\"\\" s)\\n      (str n)\\n      s)))"}
288	14	f154958f25509eed1f8830ce	superseded	haskell	word-count	module WordCount where\nimport Data.Char (isAlphaNum, toLower)\nimport Data.Map (fromList, unionWith, empty)\n\nwordCount phrase = foldl combine empty counts where\n\n  combine = unionWith (+)\n\n  counts = map count tokens\n\n  tokens = words $ map normalize phrase\n\n  normalize x\n    | not $ isAlphaNum x = ' '\n    | otherwise          = toLower x\n\n  count word = fromList [(word, 1)]	\N	\N	0	1	2015-03-21 08:21:16	2015-03-21 08:21:16	183	word-count.hs	{"word-count.hs":"module WordCount where\\nimport Data.Char (isAlphaNum, toLower)\\nimport Data.Map (fromList, unionWith, empty)\\n\\nwordCount phrase = foldl combine empty counts where\\n\\n  combine = unionWith (+)\\n\\n  counts = map count tokens\\n\\n  tokens = words $ map normalize phrase\\n\\n  normalize x\\n    | not $ isAlphaNum x = ' '\\n    | otherwise          = toLower x\\n\\n  count word = fromList [(word, 1)]"}
289	14	c1f71556260852bbcee323c6	superseded	haskell	word-count	{-# LANGUAGE TupleSections #-}\n\nmodule WordCount where\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List.Split (wordsBy)\nimport Data.Map (fromListWith, empty)\n\nwordCount phrase = aggregate $ counts words where\n  aggregate = fromListWith (+)\n  counts    = map (, 1)\n  words     = wordsBy (not . isAlphaNum) $ map toLower phrase	\N	\N	0	3	2015-03-28 18:35:18	2015-03-28 18:35:18	183	word-count.hs	{"word-count.hs":"{-# LANGUAGE TupleSections #-}\\n\\nmodule WordCount where\\nimport Data.Char (isAlphaNum, toLower)\\nimport Data.List.Split (wordsBy)\\nimport Data.Map (fromListWith, empty)\\n\\nwordCount phrase = aggregate $ counts words where\\n  aggregate = fromListWith (+)\\n  counts    = map (, 1)\\n  words     = wordsBy (not . isAlphaNum) $ map toLower phrase"}
290	14	5a1eb0cda190a907da6dcd6b	superseded	haskell	word-count	module WordCount where\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List.Split (wordsBy)\nimport Data.Map (fromListWith, empty)\n\nwordCount phrase = fromListWith (+) counts where\n  normalized = map toLower phrase\n  tokens     = wordsBy (not . isAlphaNum) normalized\n  counts     = map (\\word -> (word, 1)) tokens	\N	\N	0	2	2015-04-14 14:20:42	2015-04-14 14:20:42	183	word-count.hs	{"word-count.hs":"module WordCount where\\nimport Data.Char (isAlphaNum, toLower)\\nimport Data.List.Split (wordsBy)\\nimport Data.Map (fromListWith, empty)\\n\\nwordCount phrase = fromListWith (+) counts where\\n  normalized = map toLower phrase\\n  tokens     = wordsBy (not . isAlphaNum) normalized\\n  counts     = map (\\\\word -\\u003e (word, 1)) tokens"}
291	14	b5cc8d811fdbf8be66aaf924	pending	haskell	word-count	{-# LANGUAGE TupleSections #-}\n\nmodule WordCount where\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, fromListWith, empty)\n\nwordCount :: String -> Map String Integer\nwordCount phrase = aggregate $ counts words where\n  aggregate = fromListWith (+)\n  counts    = map (, 1)\n  words     = wordsBy (not . isAlphaNum) $ map toLower phrase	\N	\N	0	4	2015-05-25 21:42:32	2015-05-25 21:42:32	183	word-count.hs	{"word-count.hs":"{-# LANGUAGE TupleSections #-}\\n\\nmodule WordCount where\\nimport Data.Char (isAlphaNum, toLower)\\nimport Data.List.Split (wordsBy)\\nimport Data.Map (Map, fromListWith, empty)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount phrase = aggregate $ counts words where\\n  aggregate = fromListWith (+)\\n  counts    = map (, 1)\\n  words     = wordsBy (not . isAlphaNum) $ map toLower phrase"}
292	14	75313c09fb555fc2e4be3cb8	pending	ruby	kindergarten-garden	class Garden\n  attr_reader :plantings, :students\n\n  def initialize(diagram, students=default_class)\n    @plantings = parse_diagram(diagram)\n    @students = parse_students(students).sort\n  end\n\n  private\n\n  def parse_diagram(diagram)\n    diagram.split("\\n").map{ |row| row.chars }\n  end\n\n  def parse_students(students)\n    students.map { |s| s.downcase.to_sym }\n  end\n\n  def student_garden_locations\n    locations = {}\n    students.each_with_index do |student, i|\n      locations[student] = ((i * 2)..(i * 2 + 1))\n    end\n    locations\n  end\n\n  def method_missing(student)\n    my_locations = student_garden_locations[student]\n    my_plants = plantings.map { |row| row[my_locations] }\n    unabbreviate(my_plants)\n  end\n\n  def unabbreviate(plants)\n    plants.flatten.map { |plant| abbreviations[plant] }\n  end\n\n  def abbreviations\n    { "R" => :radishes,\n      "C" => :clover,\n      "G" => :grass,\n      "V" => :violets\n    }\n  end\n\n  def default_class\n    [ :alice, :bob, :charlie, :david,\n      :eve, :fred, :ginny, :harriet,\n      :ileana, :joseph, :kincaid, :larry]\n  end\n\nend	\N	\N	0	1	2015-05-11 18:34:39	2015-05-11 18:34:39	184	garden.rb	{"garden.rb":"class Garden\\n  attr_reader :plantings, :students\\n\\n  def initialize(diagram, students=default_class)\\n    @plantings = parse_diagram(diagram)\\n    @students = parse_students(students).sort\\n  end\\n\\n  private\\n\\n  def parse_diagram(diagram)\\n    diagram.split(\\"\\\\n\\").map{ |row| row.chars }\\n  end\\n\\n  def parse_students(students)\\n    students.map { |s| s.downcase.to_sym }\\n  end\\n\\n  def student_garden_locations\\n    locations = {}\\n    students.each_with_index do |student, i|\\n      locations[student] = ((i * 2)..(i * 2 + 1))\\n    end\\n    locations\\n  end\\n\\n  def method_missing(student)\\n    my_locations = student_garden_locations[student]\\n    my_plants = plantings.map { |row| row[my_locations] }\\n    unabbreviate(my_plants)\\n  end\\n\\n  def unabbreviate(plants)\\n    plants.flatten.map { |plant| abbreviations[plant] }\\n  end\\n\\n  def abbreviations\\n    { \\"R\\" =\\u003e :radishes,\\n      \\"C\\" =\\u003e :clover,\\n      \\"G\\" =\\u003e :grass,\\n      \\"V\\" =\\u003e :violets\\n    }\\n  end\\n\\n  def default_class\\n    [ :alice, :bob, :charlie, :david,\\n      :eve, :fred, :ginny, :harriet,\\n      :ileana, :joseph, :kincaid, :larry]\\n  end\\n\\nend"}
295	14	3dc54780a95612113a2ff9bb	pending	javascript	bob	var Bob = function() {\n};\n\nBob.prototype.RESPONSES = {\n    'Whoa, chill out!': function(str) {\n            var uppercase_unicode = new RegExp("[\\\\u0041-\\\\u005A\\\\u00C0-\\\\u00DE\\\\u0100-\\\\u0556\\\\u10A0-\\\\u10CD\\\\u1E00-\\\\u1EFE\\\\u1F08-\\\\u1FFB]", "g");\n            return str === str.toUpperCase() && uppercase_unicode.test(str);\n    },\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\n    'Fine. Be that way!': function(str) { return !str.trim(); },\n    'Whatever.': function(str) { return true; },\n};\n\nBob.prototype.hey = function(str) {\n    for(var message in this.RESPONSES) {\n        var func = this.RESPONSES[message];\n        if (this.RESPONSES.hasOwnProperty(message)) {\n            if(func != undefined && func(str)) {\n                return message;\n            }\n        }\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	2	2015-06-14 13:25:03	2015-06-14 13:25:03	186	bob.js	{"bob.js":"var Bob = function() {\\n};\\n\\nBob.prototype.RESPONSES = {\\n    'Whoa, chill out!': function(str) {\\n            var uppercase_unicode = new RegExp(\\"[\\\\\\\\u0041-\\\\\\\\u005A\\\\\\\\u00C0-\\\\\\\\u00DE\\\\\\\\u0100-\\\\\\\\u0556\\\\\\\\u10A0-\\\\\\\\u10CD\\\\\\\\u1E00-\\\\\\\\u1EFE\\\\\\\\u1F08-\\\\\\\\u1FFB]\\", \\"g\\");\\n            return str === str.toUpperCase() \\u0026\\u0026 uppercase_unicode.test(str);\\n    },\\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\\n    'Fine. Be that way!': function(str) { return !str.trim(); },\\n    'Whatever.': function(str) { return true; },\\n};\\n\\nBob.prototype.hey = function(str) {\\n    for(var message in this.RESPONSES) {\\n        var func = this.RESPONSES[message];\\n        if (this.RESPONSES.hasOwnProperty(message)) {\\n            if(func != undefined \\u0026\\u0026 func(str)) {\\n                return message;\\n            }\\n        }\\n    }\\n};\\n\\nmodule.exports = Bob;"}
296	14	3246a6b7421b93171b578db0	pending	javascript	wordy	var ArgumentError = function(){\n  return 'quit trying to break me'\n}\n\n\nvar WordProblem = function(question){\n  var that = this;\n  var question = question.slice(0, question.length - 1)\n  var result;\n\n  this.numSet = [];\n  this.splitQuestion = question.split(' ')\n\n\n\n  this.splitQuestion.forEach(function(item){\n    if(parseInt(item) || item === 'plus' || item === 'minus' || item === 'multiplied' || item === 'divided'){\n      if(parseInt(item)){\n        that.numSet.push(parseInt(item));\n      } else {\n        that.numSet.push(item);\n      }\n\n    }\n  })\n\n  console.log(this.numSet)\n  for(var i = 0; i < this.numSet.length - 1; i = i+2){\n    console.log(this.numSet[i+1])\n    if(this.numSet[i+1] === 'plus'){\n      if(result){\n        result = result + this.numSet[i+2]\n      } else {\n        result = this.numSet[i] + this.numSet[i+2]\n      }\n    } else if (this.numSet[i+1] === 'minus'){\n       if(result){\n        result = result - this.numSet[i+2]\n      } else {\n        result = this.numSet[i] - this.numSet[i+2]\n      }\n    } else if (this.numSet[i+1] === 'divided'){\n      if(result){\n        result = result / this.numSet[i+2]\n      } else {\n        result = this.numSet[i]/this.numSet[i+2]\n      }\n    } else if (this.numSet[i+1] === 'multiplied'){\n      if(result){\n        result = result * this.numSet[i+2]\n      } else {\n        result = this.numSet[i] * this.numSet[i+2]\n      }\n    }\n\n  }\n\n  this.answer = function(){\n    if(this.numSet.length < 3){\n      throw new ArgumentError\n    } else {\n    return result\n    }\n  }\n\n}	\N	\N	0	1	2015-03-18 19:27:05	2015-03-18 19:27:05	187	wordyTest.js	{"wordyTest.js":"var ArgumentError = function(){\\n  return 'quit trying to break me'\\n}\\n\\n\\nvar WordProblem = function(question){\\n  var that = this;\\n  var question = question.slice(0, question.length - 1)\\n  var result;\\n\\n  this.numSet = [];\\n  this.splitQuestion = question.split(' ')\\n\\n\\n\\n  this.splitQuestion.forEach(function(item){\\n    if(parseInt(item) || item === 'plus' || item === 'minus' || item === 'multiplied' || item === 'divided'){\\n      if(parseInt(item)){\\n        that.numSet.push(parseInt(item));\\n      } else {\\n        that.numSet.push(item);\\n      }\\n\\n    }\\n  })\\n\\n  console.log(this.numSet)\\n  for(var i = 0; i \\u003c this.numSet.length - 1; i = i+2){\\n    console.log(this.numSet[i+1])\\n    if(this.numSet[i+1] === 'plus'){\\n      if(result){\\n        result = result + this.numSet[i+2]\\n      } else {\\n        result = this.numSet[i] + this.numSet[i+2]\\n      }\\n    } else if (this.numSet[i+1] === 'minus'){\\n       if(result){\\n        result = result - this.numSet[i+2]\\n      } else {\\n        result = this.numSet[i] - this.numSet[i+2]\\n      }\\n    } else if (this.numSet[i+1] === 'divided'){\\n      if(result){\\n        result = result / this.numSet[i+2]\\n      } else {\\n        result = this.numSet[i]/this.numSet[i+2]\\n      }\\n    } else if (this.numSet[i+1] === 'multiplied'){\\n      if(result){\\n        result = result * this.numSet[i+2]\\n      } else {\\n        result = this.numSet[i] * this.numSet[i+2]\\n      }\\n    }\\n\\n  }\\n\\n  this.answer = function(){\\n    if(this.numSet.length \\u003c 3){\\n      throw new ArgumentError\\n    } else {\\n    return result\\n    }\\n  }\\n\\n}"}
297	14	81b499f8da2de96d52c0937b	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  if (year % 4 != 0) {\n    return false\n  }\n  if (year % 100 == 0) {\n    if (year % 400 != 0) {\n      return false\n    }\n  }\n  return true\n}	\N	\N	0	1	2015-05-25 10:10:57	2015-05-25 10:10:57	188	leap.go	{"leap.go":"package leap\\n\\nfunc IsLeapYear(year int) bool {\\n  if (year % 4 != 0) {\\n    return false\\n  }\\n  if (year % 100 == 0) {\\n    if (year % 400 != 0) {\\n      return false\\n    }\\n  }\\n  return true\\n}"}
298	14	e90a1985a39995c99b55e201	pending	ruby	bob	class Bob\n  def hey statement \n    if silence? statement\n      "Fine. Be that way!"\n    elsif yelling? statement \n      "Whoa, chill out!"\n    elsif question? statement\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def silence? statement \n    statement.strip.empty?\n  end\n\n  def yelling? statement\n    statement.upcase == statement && statement.downcase != statement\n  end\n\n  def question? statement\n    statement[ -1 ] == "?"\n  end\nend	\N	\N	0	1	2015-03-12 17:32:07	2015-03-12 17:32:07	189	/ruby/bob/bob.rb	{"/ruby/bob/bob.rb":"class Bob\\n  def hey statement \\n    if silence? statement\\n      \\"Fine. Be that way!\\"\\n    elsif yelling? statement \\n      \\"Whoa, chill out!\\"\\n    elsif question? statement\\n      \\"Sure.\\"\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  def silence? statement \\n    statement.strip.empty?\\n  end\\n\\n  def yelling? statement\\n    statement.upcase == statement \\u0026\\u0026 statement.downcase != statement\\n  end\\n\\n  def question? statement\\n    statement[ -1 ] == \\"?\\"\\n  end\\nend"}
299	14	13da4ad44b4474bd43a7ba13	superseded	ruby	hamming	class Hamming\n\n  def self.compute(a, b)\n    (0..a.length).count { |n| a[n] != b[n] }\n  end\n\nend	\N	\N	0	2	2015-03-15 05:00:59	2015-03-15 05:00:59	190	/ruby/hamming/hamming.rb	{"/ruby/hamming/hamming.rb":"class Hamming\\n\\n  def self.compute(a, b)\\n    (0..a.length).count { |n| a[n] != b[n] }\\n  end\\n\\nend"}
300	14	65f6c0df41c14df7d76721c0	pending	ruby	hamming	class Hamming\n\n  def self.compute(a, b)\n    a.size.times.count { |n| a[n] != b[n] }\n  end\n\nend	\N	\N	0	3	2015-03-25 00:39:03	2015-03-25 00:39:03	190	/ruby/hamming/hamming.rb	{"/ruby/hamming/hamming.rb":"class Hamming\\n\\n  def self.compute(a, b)\\n    a.size.times.count { |n| a[n] != b[n] }\\n  end\\n\\nend"}
301	14	710b27c47987ec799ef587b8	superseded	ruby	hamming	class Hamming\n\n  def self.compute(a, b)\n    diff = 0\n    array_a = a.split("")\n    array_b = b.split("")\n    length = array_a.length\n    (0..length).each do |n|\n      diff += 1 if array_a[n] != array_b[n]\n    end\n    return diff\n  end\n\nend	\N	\N	0	1	2015-05-13 17:12:24	2015-05-13 17:12:24	190	/ruby/hamming/hamming.rb	{"/ruby/hamming/hamming.rb":"class Hamming\\n\\n  def self.compute(a, b)\\n    diff = 0\\n    array_a = a.split(\\"\\")\\n    array_b = b.split(\\"\\")\\n    length = array_a.length\\n    (0..length).each do |n|\\n      diff += 1 if array_a[n] != array_b[n]\\n    end\\n    return diff\\n  end\\n\\nend"}
302	14	52d6c5d85168824996bfd73c	pending	go	gigasecond	package gigasecond\nimport(\n  "time"\n  )\nvar Gigasecond int64 = 1e18\n\nfunc AddGigasecond(pT time.Time) time.Time{\n  return pT.Add(time.Duration(Gigasecond))\n}	\N	\N	0	1	2015-03-26 10:31:05	2015-03-26 10:31:05	191	gigasecond.go	{"gigasecond.go":"package gigasecond\\nimport(\\n  \\"time\\"\\n  )\\nvar Gigasecond int64 = 1e18\\n\\nfunc AddGigasecond(pT time.Time) time.Time{\\n  return pT.Add(time.Duration(Gigasecond))\\n}"}
303	14	0634ed719811eaf3d1b6c975	pending	php	gigasecond	<?php\n\n    define(GIGASECONDS, 1000000000);\n\n    /* @param $_dob Date Of Birth  */\n    function from(DateTime $_dob) {\n        $result = $_dob->modify('+' . GIGASECONDS . ' second');\n        return $result;\n    }	\N	\N	0	1	2015-04-11 15:21:32	2015-04-11 15:21:32	192	/php/gigasecond/gigasecond.php	{"/php/gigasecond/gigasecond.php":"\\u003c?php\\n\\n    define(GIGASECONDS, 1000000000);\\n\\n    /* @param $_dob Date Of Birth  */\\n    function from(DateTime $_dob) {\\n        $result = $_dob-\\u003emodify('+' . GIGASECONDS . ' second');\\n        return $result;\\n    }"}
313	41	c2df7d49fd32694c1836204d	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    if phrase.strip.empty?\n      'Fine. Be that way!'\n    elsif phrase == phrase.upcase && phrase.scan(/[a-zA-Z]/).any?\n      'Woah, chill out!'\n    elsif phrase[-1,1] == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	2015-01-23 09:34:39	2015-01-23 09:34:39	201	bob.rb	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    if phrase.strip.empty?\\n      'Fine. Be that way!'\\n    elsif phrase == phrase.upcase \\u0026\\u0026 phrase.scan(/[a-zA-Z]/).any?\\n      'Woah, chill out!'\\n    elsif phrase[-1,1] == '?'\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
304	14	863db2c807b0c8eabf2579a9	pending	javascript	palindrome-products	var Palindromes = function(specs){\r\n\tthis.maxFactor = Number(specs.maxFactor);\r\n\tif (!specs.hasOwnProperty('minFactor')){\r\n\t\tthis.minFactor = 1;\r\n\t} else {\r\n\t\tthis.minFactor = Number(specs.minFactor);\r\n\t}\r\n\tthis.palPairs = [];\r\n\tthis.bigVal = Math.pow(this.minFactor,2);\r\n\tthis.smallVal = Math.pow(this.maxFactor,2);\r\n\tthis.generate = function(){\r\n\t\tvar back,forth,x,y,sum,diff,alreadyUsed;\r\n\t\tfor (x = this.minFactor; x <= this.maxFactor; x++){\r\n\t\t\tfor (y = x; y <= this.maxFactor; y++){\r\n\t\t\t\tforth = Number(x * y).toString();\r\n\t\t\t\tback = forth.split('').reverse().join('');\r\n\t\t\t\tif (back === forth){\r\n\t\t\t\t\tdiff = x - y;\r\n\t\t\t\t\tif (x * y < this.smallVal){\r\n\t\t\t\t\t\tthis.smallVal = x * y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\talreadyUsed = false;\r\n\t\t\t\t\tfor (p in this.palPairs){\r\n\t\t\t\t\t\tif (this.palPairs[p] == [x,y].toString() || this.palPairs[p] == [y,x].toString()){\r\n\t\t\t\t\t\t\talreadyUsed = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (alreadyUsed == false){\r\n\t\t\t\t\t\tthis.palPairs.push([x,y].sort());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (x - y > diff){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (x > diff * 2){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (x = this.maxFactor; x >= this.minFactor; x--){\r\n\t\t\tfor (y = x; y >= this.minFactor; y--){\r\n\t\t\t\tforth = Number(x * y).toString();\r\n\t\t\t\tback = forth.split('').reverse().join('');\r\n\t\t\t\tif (back === forth){\r\n\t\t\t\t\tsum = x + y;\r\n\t\t\t\t\tif (x * y > this.bigVal){\r\n\t\t\t\t\t\tthis.bigVal = x * y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\talreadyUsed = false;\r\n\t\t\t\t\tfor (p in this.palPairs){\r\n\t\t\t\t\t\tif (this.palPairs[p] == [x,y].toString() || this.palPairs[p] == [y,x].toString()){\r\n\t\t\t\t\t\t\talreadyUsed = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (alreadyUsed == false){\r\n\t\t\t\t\t\tthis.palPairs.push([x,y].sort());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (x + y < sum){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (x < sum / 2){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.largest = function(){\r\n\t\tvar info = {};\r\n\t\tvar temp;\r\n\t\tinfo.value = this.bigVal;\r\n\t\tinfo.factors = this.getFactors(this.bigVal);\r\n\t\treturn info;\r\n\t}\r\n\tthis.smallest = function(){\r\n\t\tvar info = {};\r\n\t\tvar temp;\r\n\t\tinfo.value = this.smallVal;\r\n\t\tinfo.factors = this.getFactors(this.smallVal);\r\n\t\treturn info;\r\n\t}\r\n\tthis.getFactors = function(val){\r\n\t\tvar factorSet = [];\r\n\t\tfor (var p = 0; p < this.palPairs.length; p++){\r\n\t\t\tif (Number(this.palPairs[p][0]) * Number(this.palPairs[p][1]) === Number(val)){\r\n\t\t\t\tfactorSet.push(this.palPairs[p]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn factorSet;\r\n\t}\r\n}	\N	\N	0	1	2015-03-20 10:43:33	2015-03-20 10:43:33	193	palindrome-products.js	{"palindrome-products.js":"var Palindromes = function(specs){\\r\\n\\tthis.maxFactor = Number(specs.maxFactor);\\r\\n\\tif (!specs.hasOwnProperty('minFactor')){\\r\\n\\t\\tthis.minFactor = 1;\\r\\n\\t} else {\\r\\n\\t\\tthis.minFactor = Number(specs.minFactor);\\r\\n\\t}\\r\\n\\tthis.palPairs = [];\\r\\n\\tthis.bigVal = Math.pow(this.minFactor,2);\\r\\n\\tthis.smallVal = Math.pow(this.maxFactor,2);\\r\\n\\tthis.generate = function(){\\r\\n\\t\\tvar back,forth,x,y,sum,diff,alreadyUsed;\\r\\n\\t\\tfor (x = this.minFactor; x \\u003c= this.maxFactor; x++){\\r\\n\\t\\t\\tfor (y = x; y \\u003c= this.maxFactor; y++){\\r\\n\\t\\t\\t\\tforth = Number(x * y).toString();\\r\\n\\t\\t\\t\\tback = forth.split('').reverse().join('');\\r\\n\\t\\t\\t\\tif (back === forth){\\r\\n\\t\\t\\t\\t\\tdiff = x - y;\\r\\n\\t\\t\\t\\t\\tif (x * y \\u003c this.smallVal){\\r\\n\\t\\t\\t\\t\\t\\tthis.smallVal = x * y;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\talreadyUsed = false;\\r\\n\\t\\t\\t\\t\\tfor (p in this.palPairs){\\r\\n\\t\\t\\t\\t\\t\\tif (this.palPairs[p] == [x,y].toString() || this.palPairs[p] == [y,x].toString()){\\r\\n\\t\\t\\t\\t\\t\\t\\talreadyUsed = true;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tif (alreadyUsed == false){\\r\\n\\t\\t\\t\\t\\t\\tthis.palPairs.push([x,y].sort());\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (x - y \\u003e diff){\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x \\u003e diff * 2){\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tfor (x = this.maxFactor; x \\u003e= this.minFactor; x--){\\r\\n\\t\\t\\tfor (y = x; y \\u003e= this.minFactor; y--){\\r\\n\\t\\t\\t\\tforth = Number(x * y).toString();\\r\\n\\t\\t\\t\\tback = forth.split('').reverse().join('');\\r\\n\\t\\t\\t\\tif (back === forth){\\r\\n\\t\\t\\t\\t\\tsum = x + y;\\r\\n\\t\\t\\t\\t\\tif (x * y \\u003e this.bigVal){\\r\\n\\t\\t\\t\\t\\t\\tthis.bigVal = x * y;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\talreadyUsed = false;\\r\\n\\t\\t\\t\\t\\tfor (p in this.palPairs){\\r\\n\\t\\t\\t\\t\\t\\tif (this.palPairs[p] == [x,y].toString() || this.palPairs[p] == [y,x].toString()){\\r\\n\\t\\t\\t\\t\\t\\t\\talreadyUsed = true;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tif (alreadyUsed == false){\\r\\n\\t\\t\\t\\t\\t\\tthis.palPairs.push([x,y].sort());\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (x + y \\u003c sum){\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x \\u003c sum / 2){\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tthis.largest = function(){\\r\\n\\t\\tvar info = {};\\r\\n\\t\\tvar temp;\\r\\n\\t\\tinfo.value = this.bigVal;\\r\\n\\t\\tinfo.factors = this.getFactors(this.bigVal);\\r\\n\\t\\treturn info;\\r\\n\\t}\\r\\n\\tthis.smallest = function(){\\r\\n\\t\\tvar info = {};\\r\\n\\t\\tvar temp;\\r\\n\\t\\tinfo.value = this.smallVal;\\r\\n\\t\\tinfo.factors = this.getFactors(this.smallVal);\\r\\n\\t\\treturn info;\\r\\n\\t}\\r\\n\\tthis.getFactors = function(val){\\r\\n\\t\\tvar factorSet = [];\\r\\n\\t\\tfor (var p = 0; p \\u003c this.palPairs.length; p++){\\r\\n\\t\\t\\tif (Number(this.palPairs[p][0]) * Number(this.palPairs[p][1]) === Number(val)){\\r\\n\\t\\t\\t\\tfactorSet.push(this.palPairs[p]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn factorSet;\\r\\n\\t}\\r\\n}"}
305	14	4142470f87f9b918267cdf88	superseded	javascript	anagram	var anagramContainer = function() {\n  \n  var debug = true;\n  // This is to help with more convenient debugging.  I turned it off once things Just Worked for every exercise.\n  \n  var magaranStr = null;  // this global is sandboxed by magaran() - I dislike globals, but passing between independently called functions "safely" should be achieved somehow.\n\n  var anagram = function(str) {\n    if (debug) console.log('\\n\\nAnagram string set to "'+str+'"');\n    magaranStr = str;\n  };\n\n  /* This code is slightly modified from my WordCount exercise.\n   * \n   * Modifications:  \n   * Everything is capitalized, and then counted, to allow for case insensitivity.\n   * Instead of counting words, we're counting letters.  This means ignoring non-existent letters.\n   */\n  anagram.prototype.wordToLetters = function (str) {\n      var letters = str.toUpperCase().split('').sort();\n      // create a sorted uppercase un-deduplicated array of the letters.\n      \n      var lettersJson = {};\n      // this is the object which I'll insert things into.\n\n      for (var index = 0; index < letters.length; index++) {\n      // iterate through the letters until there's no more.\n\t  var letter = letters[index];\n          // for readability\n\n\t  if (letter !== '') {\n\t  // If letter isn't an empty value:\n\t      lettersJson[letter] = (parseInt(lettersJson[letter]) || 0) + 1;\n\t      // If the letter entry is nonexistent, it's 0.  Then increment it.\n\t  };\n      };\n\n      if (debug) console.log("Exploded word " +str+ ": " + JSON.stringify(lettersJson));\n      // This is to help make sure that the wordToLetters function works as intended.\n\n      return JSON.stringify(lettersJson);\n      // Return the stringified letters, so that it's valid data JSON.\n  };\n\n  anagram.prototype.matchesF = function (arr) {\n  // The matching Function, which only accepts an array.\n      var magaranJson=this.wordToLetters(magaranStr);\n      // Fetch the wordToLetters JSON for the initial anagram seed.\n      var outArr = [];\n      // There's no matches found yet.\n      \n      for (var index = 0; index < arr.length; index++) {\n      // Iterate through the words\n          var testWord = arr[index];\n\t  // for readability!\n\n\t  var testJson = this.wordToLetters(testWord);\n          // To compare against magaranJson, and to help improve readability.\n\n\t  if ((magaranJson === testJson) && (testWord.toUpperCase() !== magaranStr.toUpperCase())) {\n\t  // If a match is found, and the word isn't just the same word capitalized differently...\n\t      if (debug) console.log('"'+testWord + "\\" meets the matching criteria!  Appended into results.");\n\t      // For debugging the matchesF for loops only.\n\n\t      outArr.push(testWord);\n\t      // If it matches and isn't just the same word, insert it into the matches array.\n\t  };\n\t  \n      };\n\n      if (debug) console.log('Matches: ['+outArr+']');\n      // Yay for debugging!  This is for the matchesF function itself.\n     \n      return outArr;\n      // Return the array of matches, even if it's an empty array.\n  };\n\n  anagram.prototype.arrayWrapper = function (unkArg) {\n      if (typeof unkArg === undefined) {\n        // return a blank array.\n\treturn [];\n      } else if (typeof unkArg === "object") {\n        // return the object itself.\n\treturn unkArg;\n      } else if (typeof unkArg === "string") {\n        // return the string cast in an array.\n\treturn [unkArg];\n      }\n  };\n\n  anagram.prototype.matches = function (arg1, arg2, arg3, arg4, arg5) {\n      var inArr = this.arrayWrapper(arg1)\n\t  .concat(this.arrayWrapper(arg2))\n\t  .concat(this.arrayWrapper(arg3))\n\t  .concat(this.arrayWrapper(arg4))\t// this can continue ad nauseum, the exercises call for up to 3 arguments, but more isn't bad when the cost is almost nil.\n\t  .concat(this.arrayWrapper(arg5));\n\n      var testArr = inArr.filter(function(n){ return n != undefined });\n      // remove undefined elements.\n      \n      if (debug) console.log('Testing against ['+testArr+']');\n      // For debugging.  Output the array which will be tested against.\n\n      return this.matchesF(testArr);\n      // Return the matching elements.\n  };\n  return anagram;\n};\n\n// I don't think it's supposed to work like this, because I had to modify the spec file to use new'ed instances of anagram(String).\nmodule.exports = new anagramContainer();	\N	\N	0	1	2015-03-20 18:02:47	2015-03-20 18:02:47	194	/javascript/anagram/anagram.js	{"/javascript/anagram/anagram.js":"var anagramContainer = function() {\\n  \\n  var debug = true;\\n  // This is to help with more convenient debugging.  I turned it off once things Just Worked for every exercise.\\n  \\n  var magaranStr = null;  // this global is sandboxed by magaran() - I dislike globals, but passing between independently called functions \\"safely\\" should be achieved somehow.\\n\\n  var anagram = function(str) {\\n    if (debug) console.log('\\\\n\\\\nAnagram string set to \\"'+str+'\\"');\\n    magaranStr = str;\\n  };\\n\\n  /* This code is slightly modified from my WordCount exercise.\\n   * \\n   * Modifications:  \\n   * Everything is capitalized, and then counted, to allow for case insensitivity.\\n   * Instead of counting words, we're counting letters.  This means ignoring non-existent letters.\\n   */\\n  anagram.prototype.wordToLetters = function (str) {\\n      var letters = str.toUpperCase().split('').sort();\\n      // create a sorted uppercase un-deduplicated array of the letters.\\n      \\n      var lettersJson = {};\\n      // this is the object which I'll insert things into.\\n\\n      for (var index = 0; index \\u003c letters.length; index++) {\\n      // iterate through the letters until there's no more.\\n\\t  var letter = letters[index];\\n          // for readability\\n\\n\\t  if (letter !== '') {\\n\\t  // If letter isn't an empty value:\\n\\t      lettersJson[letter] = (parseInt(lettersJson[letter]) || 0) + 1;\\n\\t      // If the letter entry is nonexistent, it's 0.  Then increment it.\\n\\t  };\\n      };\\n\\n      if (debug) console.log(\\"Exploded word \\" +str+ \\": \\" + JSON.stringify(lettersJson));\\n      // This is to help make sure that the wordToLetters function works as intended.\\n\\n      return JSON.stringify(lettersJson);\\n      // Return the stringified letters, so that it's valid data JSON.\\n  };\\n\\n  anagram.prototype.matchesF = function (arr) {\\n  // The matching Function, which only accepts an array.\\n      var magaranJson=this.wordToLetters(magaranStr);\\n      // Fetch the wordToLetters JSON for the initial anagram seed.\\n      var outArr = [];\\n      // There's no matches found yet.\\n      \\n      for (var index = 0; index \\u003c arr.length; index++) {\\n      // Iterate through the words\\n          var testWord = arr[index];\\n\\t  // for readability!\\n\\n\\t  var testJson = this.wordToLetters(testWord);\\n          // To compare against magaranJson, and to help improve readability.\\n\\n\\t  if ((magaranJson === testJson) \\u0026\\u0026 (testWord.toUpperCase() !== magaranStr.toUpperCase())) {\\n\\t  // If a match is found, and the word isn't just the same word capitalized differently...\\n\\t      if (debug) console.log('\\"'+testWord + \\"\\\\\\" meets the matching criteria!  Appended into results.\\");\\n\\t      // For debugging the matchesF for loops only.\\n\\n\\t      outArr.push(testWord);\\n\\t      // If it matches and isn't just the same word, insert it into the matches array.\\n\\t  };\\n\\t  \\n      };\\n\\n      if (debug) console.log('Matches: ['+outArr+']');\\n      // Yay for debugging!  This is for the matchesF function itself.\\n     \\n      return outArr;\\n      // Return the array of matches, even if it's an empty array.\\n  };\\n\\n  anagram.prototype.arrayWrapper = function (unkArg) {\\n      if (typeof unkArg === undefined) {\\n        // return a blank array.\\n\\treturn [];\\n      } else if (typeof unkArg === \\"object\\") {\\n        // return the object itself.\\n\\treturn unkArg;\\n      } else if (typeof unkArg === \\"string\\") {\\n        // return the string cast in an array.\\n\\treturn [unkArg];\\n      }\\n  };\\n\\n  anagram.prototype.matches = function (arg1, arg2, arg3, arg4, arg5) {\\n      var inArr = this.arrayWrapper(arg1)\\n\\t  .concat(this.arrayWrapper(arg2))\\n\\t  .concat(this.arrayWrapper(arg3))\\n\\t  .concat(this.arrayWrapper(arg4))\\t// this can continue ad nauseum, the exercises call for up to 3 arguments, but more isn't bad when the cost is almost nil.\\n\\t  .concat(this.arrayWrapper(arg5));\\n\\n      var testArr = inArr.filter(function(n){ return n != undefined });\\n      // remove undefined elements.\\n      \\n      if (debug) console.log('Testing against ['+testArr+']');\\n      // For debugging.  Output the array which will be tested against.\\n\\n      return this.matchesF(testArr);\\n      // Return the matching elements.\\n  };\\n  return anagram;\\n};\\n\\n// I don't think it's supposed to work like this, because I had to modify the spec file to use new'ed instances of anagram(String).\\nmodule.exports = new anagramContainer();"}
306	14	92edd43105784ddbb48f47b6	pending	javascript	anagram	var anagram = function(word) {\n    return {\n        word: word,\n\tmatches: function(args) {\n\t    'use strict';\n\t    var array = (typeof args === 'string') ? ([].slice.call(arguments, 0)) : args;\n\t    // If the list is given in arguments, break the arguments down into an array.\n\t    // Otherwise, the list stays unchanged.\n\t    var matchArray = [];\n\t    // Empty array to be inserted into.\n\t    for (var index=0; index<array.length; index++) {;\n\t        if (array[index].toLowerCase().split('').sort().join() === \n\t\t this.word.toLowerCase().split('').sort().join() &&\n\t\t array[index].toLowerCase() !== this.word.toLowerCase()) {\n\t\t // If the same letters are in the word, but not the same sequence of letters\n\t\t    matchArray.push(array[index]);\n\t\t    // insert into the array.\n\t\t}\n\t    }\n\t    return matchArray;\n\t}\n    };\n};\n\nmodule.exports = anagram;	\N	\N	0	2	2015-06-14 05:40:28	2015-06-14 05:40:28	194	/javascript/anagram/anagram.js	{"/javascript/anagram/anagram.js":"var anagram = function(word) {\\n    return {\\n        word: word,\\n\\tmatches: function(args) {\\n\\t    'use strict';\\n\\t    var array = (typeof args === 'string') ? ([].slice.call(arguments, 0)) : args;\\n\\t    // If the list is given in arguments, break the arguments down into an array.\\n\\t    // Otherwise, the list stays unchanged.\\n\\t    var matchArray = [];\\n\\t    // Empty array to be inserted into.\\n\\t    for (var index=0; index\\u003carray.length; index++) {;\\n\\t        if (array[index].toLowerCase().split('').sort().join() === \\n\\t\\t this.word.toLowerCase().split('').sort().join() \\u0026\\u0026\\n\\t\\t array[index].toLowerCase() !== this.word.toLowerCase()) {\\n\\t\\t // If the same letters are in the word, but not the same sequence of letters\\n\\t\\t    matchArray.push(array[index]);\\n\\t\\t    // insert into the array.\\n\\t\\t}\\n\\t    }\\n\\t    return matchArray;\\n\\t}\\n    };\\n};\\n\\nmodule.exports = anagram;"}
307	14	f697ceadc9d703ed8d4e96ec	pending	python	hamming	def distance(first, second):\n    hamming_distance = 0\n    for t, f in map(None, first, second):\n        if t != f:\n            hamming_distance += 1\n    return hamming_distance	\N	\N	0	1	2015-06-06 11:58:35	2015-06-06 11:58:35	195	/python/hamming/hamming.py	{"/python/hamming/hamming.py":"def distance(first, second):\\n    hamming_distance = 0\\n    for t, f in map(None, first, second):\\n        if t != f:\\n            hamming_distance += 1\\n    return hamming_distance"}
308	14	65dc952e28c7b0f7157339b1	pending	ruby	rna-transcription	class DNA\n  def initialize(dna)\n    @nucleotides = dna.split("")\n  end\n\n  def to_rna\n    @nucleotides.inject("") do |dna, nucleotide|\n      dna += rna_nucleotides(nucleotide)\n    end\n  end\n\n  def rna_nucleotides(nucleotide)\n    if nucleotide == "T"\n      "U"\n    else\n      nucleotide\n    end\n  end\nend	\N	\N	0	1	2015-06-12 11:37:59	2015-06-12 11:37:59	196	rna-transcription.rb	{"rna-transcription.rb":"class DNA\\n  def initialize(dna)\\n    @nucleotides = dna.split(\\"\\")\\n  end\\n\\n  def to_rna\\n    @nucleotides.inject(\\"\\") do |dna, nucleotide|\\n      dna += rna_nucleotides(nucleotide)\\n    end\\n  end\\n\\n  def rna_nucleotides(nucleotide)\\n    if nucleotide == \\"T\\"\\n      \\"U\\"\\n    else\\n      nucleotide\\n    end\\n  end\\nend"}
309	14	82ab551298e32f0e73737908	pending	javascript	word-count	var words = function(input) {\r\n\tvar split = input.replace('\\n'," ").split(" ");\r\n\tvar wordcount = {};\r\n\t\r\n\tsplit.forEach(function(element) {\r\n\t\t\tif (wordcount[element]) {\r\n\t\t\t\twordcount[element] = wordcount[element] + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twordcount[element] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t});\r\n\treturn wordcount;\r\n};\r\n\r\nmodule.exports = words;	\N	\N	0	1	2015-03-12 18:53:06	2015-03-12 18:53:06	197	word-count.js	{"word-count.js":"var words = function(input) {\\r\\n\\tvar split = input.replace('\\\\n',\\" \\").split(\\" \\");\\r\\n\\tvar wordcount = {};\\r\\n\\t\\r\\n\\tsplit.forEach(function(element) {\\r\\n\\t\\t\\tif (wordcount[element]) {\\r\\n\\t\\t\\t\\twordcount[element] = wordcount[element] + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\twordcount[element] = 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t});\\r\\n\\treturn wordcount;\\r\\n};\\r\\n\\r\\nmodule.exports = words;"}
310	41	7ff6fd8a493d8e1fcfe8167f	pending	haskell	strain	module Strain (keep, discard) where\n\nkeep :: (a -> Bool) -> [a] -> [a]\nkeep _ [] = []\nkeep predicate (x:xs)\n    | predicate x = x : keep predicate xs\n    | otherwise   = keep predicate xs\n\ndiscard :: (a -> Bool) -> [a] -> [a]\ndiscard _ [] = []\ndiscard predicate (x:xs)\n    | predicate x = discard predicate xs\n    | otherwise   = x : discard predicate xs	\N	\N	0	1	2015-02-15 16:27:51	2015-02-15 16:27:51	198	Strain.hs	{"Strain.hs":"module Strain (keep, discard) where\\n\\nkeep :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\nkeep _ [] = []\\nkeep predicate (x:xs)\\n    | predicate x = x : keep predicate xs\\n    | otherwise   = keep predicate xs\\n\\ndiscard :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\ndiscard _ [] = []\\ndiscard predicate (x:xs)\\n    | predicate x = discard predicate xs\\n    | otherwise   = x : discard predicate xs"}
324	6	739a856e3e79b682834ef20b	pending	csharp	bob	private static string Hey(string s)\r\n{\r\n\ts = s.Trim();\r\n\tif (s.ToUpper() == s && s.Any(char.IsLetter))\r\n\t\treturn "Whoa, chill out!";\r\n\telse if (s.EndsWith("?"))\r\n\t\treturn "Sure.";\r\n\telse if (s == "")\r\n\t\treturn "Fine. Be that way!";\r\n\treturn "Whatever.";\r\n}	\N	\N	0	1	2015-04-16 12:02:14	2015-04-16 12:02:14	210	Bob.cs	{"Bob.cs":"private static string Hey(string s)\\r\\n{\\r\\n\\ts = s.Trim();\\r\\n\\tif (s.ToUpper() == s \\u0026\\u0026 s.Any(char.IsLetter))\\r\\n\\t\\treturn \\"Whoa, chill out!\\";\\r\\n\\telse if (s.EndsWith(\\"?\\"))\\r\\n\\t\\treturn \\"Sure.\\";\\r\\n\\telse if (s == \\"\\")\\r\\n\\t\\treturn \\"Fine. Be that way!\\";\\r\\n\\treturn \\"Whatever.\\";\\r\\n}"}
314	41	aced987a25f1baa50b8d8094	pending	ruby	bob	class Bob\n  def hey(phrase)\n    @phrase = phrase\n    if phrase_is_empty?\n      'Fine. Be that way!'\n    elsif phrase_is_yelling?\n      'Woah, chill out!'\n    elsif phrase_is_questioning?\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def phrase_is_empty?\n    @phrase.strip.empty?\n  end\n\n  def phrase_is_yelling?\n    @phrase == @phrase.upcase && @phrase.scan(/[a-zA-Z]/).any?\n  end\n\n  def phrase_is_questioning?\n    @phrase[-1,1] == '?'\n  end\nend	\N	\N	0	2	2015-02-04 08:02:25	2015-02-04 08:02:25	201	bob.rb	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    @phrase = phrase\\n    if phrase_is_empty?\\n      'Fine. Be that way!'\\n    elsif phrase_is_yelling?\\n      'Woah, chill out!'\\n    elsif phrase_is_questioning?\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  private\\n  def phrase_is_empty?\\n    @phrase.strip.empty?\\n  end\\n\\n  def phrase_is_yelling?\\n    @phrase == @phrase.upcase \\u0026\\u0026 @phrase.scan(/[a-zA-Z]/).any?\\n  end\\n\\n  def phrase_is_questioning?\\n    @phrase[-1,1] == '?'\\n  end\\nend"}
315	41	40165e2096d7b3277e292e21	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\nimport re\n\ndef hey(what):\n    what = what.strip()\n    if not what:\n        return "Fine. Be that way!"\n    if what.isupper():\n        return "Whoa, chill out!"\n    if what.endswith('?'):\n        return "Sure."\n    return "Whatever."	\N	\N	0	1	2015-01-10 04:19:39	2015-01-10 04:19:39	202	bob.py	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\nimport re\\n\\ndef hey(what):\\n    what = what.strip()\\n    if not what:\\n        return \\"Fine. Be that way!\\"\\n    if what.isupper():\\n        return \\"Whoa, chill out!\\"\\n    if what.endswith('?'):\\n        return \\"Sure.\\"\\n    return \\"Whatever.\\""}
316	41	e096a38e5e99bcdd74f094df	pending	ruby	raindrops	class Raindrops\r\n\r\n  def self.convert(num)\r\n    result = ""\r\n    result << "Pling" if num%3 == 0\r\n    result << "Plang" if num%5 == 0\r\n    result << "Plong" if num%7 == 0\r\n    result = num.to_s if result.empty?\r\n    result\r\n  end\r\n\r\nend	\N	\N	0	1	2015-04-30 18:00:50	2015-04-30 18:00:50	203	raindrops.rb	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  def self.convert(num)\\r\\n    result = \\"\\"\\r\\n    result \\u003c\\u003c \\"Pling\\" if num%3 == 0\\r\\n    result \\u003c\\u003c \\"Plang\\" if num%5 == 0\\r\\n    result \\u003c\\u003c \\"Plong\\" if num%7 == 0\\r\\n    result = num.to_s if result.empty?\\r\\n    result\\r\\n  end\\r\\n\\r\\nend"}
317	41	ed4e8578fa05f0e2841d147b	superseded	python	leap	def is_leap_year(year):\n\n    if year % 100 == 0:\n        if year % 400 == 0:\n            return True\n        else:\n            return False\n\n    elif year % 4 == 0:\n        return True\n\n    else:\n        return False	\N	\N	0	1	2015-03-06 11:27:40	2015-03-06 11:27:40	204	year.py	{"year.py":"def is_leap_year(year):\\n\\n    if year % 100 == 0:\\n        if year % 400 == 0:\\n            return True\\n        else:\\n            return False\\n\\n    elif year % 4 == 0:\\n        return True\\n\\n    else:\\n        return False"}
318	41	c001e34a52e7914df2c28375	pending	python	leap	def is_leap_year(year):\n\n    return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)	\N	\N	0	2	2015-03-12 23:26:46	2015-03-12 23:26:46	204	year.py	{"year.py":"def is_leap_year(year):\\n\\n    return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)"}
319	6	cdc2e7554432c3ac73bc1a9b	pending	ruby	raindrops	#\n# Raindrop Class\n#\nrequire 'prime'\n\nclass Raindrops\n\n  def self.convert(num)\n    translate = ""\n    Prime.prime_division(num).each do |x,y|\n      if [3,5,7].include? x\n       translate.concat(x.to_s)\n      end\n    end\n    result = translate.gsub!(/[357]/, '3' => 'Pling', '5' => 'Plang', '7' => 'Plong')\n    result.nil? ? num.to_s : result \n  end\nend	\N	\N	0	1	2015-03-12 17:11:48	2015-03-12 17:11:48	205	/ruby/raindrops/raindrops.rb	{"/ruby/raindrops/raindrops.rb":"#\\n# Raindrop Class\\n#\\nrequire 'prime'\\n\\nclass Raindrops\\n\\n  def self.convert(num)\\n    translate = \\"\\"\\n    Prime.prime_division(num).each do |x,y|\\n      if [3,5,7].include? x\\n       translate.concat(x.to_s)\\n      end\\n    end\\n    result = translate.gsub!(/[357]/, '3' =\\u003e 'Pling', '5' =\\u003e 'Plang', '7' =\\u003e 'Plong')\\n    result.nil? ? num.to_s : result \\n  end\\nend"}
320	6	eb6f72c8955d7a72b7804276	pending	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new { |h,k| h[k] = [] }\n  end\n\n  def add(name, grade)\n    db[grade].push(name)\n  end\n\n  def grade(class_num)\n    db[class_num]\n  end\n\n  def sort\n    Hash[db.each_key{|k| db[k] = db[k].sort}.sort]\n  end\n\nend	\N	\N	0	1	2015-04-21 20:48:55	2015-04-21 20:48:55	206	grade-school.rb	{"grade-school.rb":"class School\\n\\n  attr_reader :db\\n\\n  def initialize\\n    @db = Hash.new { |h,k| h[k] = [] }\\n  end\\n\\n  def add(name, grade)\\n    db[grade].push(name)\\n  end\\n\\n  def grade(class_num)\\n    db[class_num]\\n  end\\n\\n  def sort\\n    Hash[db.each_key{|k| db[k] = db[k].sort}.sort]\\n  end\\n\\nend"}
321	6	4539f7359bd764da76e79898	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	2015-04-09 06:55:06	2015-04-09 06:55:06	207	hamming.rb	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
322	6	9404da862bb6e5fd472a65a0	pending	python	bob	def hey(question):\n  if question is None or len(question.strip()) == 0:\n    return 'Fine. Be that way!'\n  elif question.isupper():\n    return 'Whoa, chill out!'\n  elif question.endswith('?'):\n    return 'Sure.'\n  else:\n    return 'Whatever.'	\N	\N	0	1	2015-04-17 23:57:16	2015-04-17 23:57:16	208	bob.py	{"bob.py":"def hey(question):\\n  if question is None or len(question.strip()) == 0:\\n    return 'Fine. Be that way!'\\n  elif question.isupper():\\n    return 'Whoa, chill out!'\\n  elif question.endswith('?'):\\n    return 'Sure.'\\n  else:\\n    return 'Whatever.'"}
323	6	36dc19935e69072bac198785	pending	javascript	hamming	module.exports = {\n    compute: function(a, b) {\n        var iterator = 0, diff = 0, length = a.length < b.length ? a.length : b.length;        \n        do {\n            if(a[iterator] !== b[iterator]) {\n                diff++;\n            }\n            iterator++;\n        } while (iterator < length)\n        return diff;\n    }\n}	\N	\N	0	1	2015-01-18 03:24:26	2015-01-18 03:24:26	209	hamming.js	{"hamming.js":"module.exports = {\\n    compute: function(a, b) {\\n        var iterator = 0, diff = 0, length = a.length \\u003c b.length ? a.length : b.length;        \\n        do {\\n            if(a[iterator] !== b[iterator]) {\\n                diff++;\\n            }\\n            iterator++;\\n        } while (iterator \\u003c length)\\n        return diff;\\n    }\\n}"}
325	34	a32a7b8eb5bf3edbd294fba4	pending	ruby	sieve	class Sieve\n  attr_reader :limit, :candidates, :composites\n\n  def initialize(limit)\n    @limit = limit\n    @candidates = (2..limit).to_a\n    @composites = {}\n  end\n\n  def primes\n    candidates.each_with_object([]) do |candidate, primes|\n      next if composites.key?(candidate)\n      primes << candidate\n      ((candidate * 2)..limit).step(candidate) do |multiple|\n        composites[multiple] = true\n      end\n    end\n  end\nend	\N	\N	0	1	2015-04-30 15:40:09	2015-04-30 15:40:09	211	/ruby/sieve/sieve.rb	{"/ruby/sieve/sieve.rb":"class Sieve\\n  attr_reader :limit, :candidates, :composites\\n\\n  def initialize(limit)\\n    @limit = limit\\n    @candidates = (2..limit).to_a\\n    @composites = {}\\n  end\\n\\n  def primes\\n    candidates.each_with_object([]) do |candidate, primes|\\n      next if composites.key?(candidate)\\n      primes \\u003c\\u003c candidate\\n      ((candidate * 2)..limit).step(candidate) do |multiple|\\n        composites[multiple] = true\\n      end\\n    end\\n  end\\nend"}
326	16	59ef1708ad8a375b59ee6a2d	superseded	go	leap	package leap\n\n/*\n * Determine if year is leap year or not\n * @param year: The year expressed as int \n * @return: true if leap year, otherwise false\n*/\nfunc IsLeapYear(year int) bool {\n    // Is leap if evenly divisible by 4 and not by 100  \n    if (year % 4 == 0 && year % 100 != 0) {\n        return true\n    // Also leap if divisible by 400\n    } else if (year % 400 == 0) {\n        return true\n    // All others are not leap\n    } else {\n        return false\n    }\n}	\N	\N	0	1	2015-02-18 21:03:12	2015-02-18 21:03:12	212	leap.go	{"leap.go":"package leap\\n\\n/*\\n * Determine if year is leap year or not\\n * @param year: The year expressed as int \\n * @return: true if leap year, otherwise false\\n*/\\nfunc IsLeapYear(year int) bool {\\n    // Is leap if evenly divisible by 4 and not by 100  \\n    if (year % 4 == 0 \\u0026\\u0026 year % 100 != 0) {\\n        return true\\n    // Also leap if divisible by 400\\n    } else if (year % 400 == 0) {\\n        return true\\n    // All others are not leap\\n    } else {\\n        return false\\n    }\\n}"}
327	16	dae0f5861f568aac0ca9e8ec	pending	go	leap	package leap\n\n\n//Returns true if the year is a leap year and false otherwise. \n//Takes the year as an int.\nfunc IsLeapYear(year int) bool {\n\t// Is leap if evenly divisible by 4 and not by 100\n\tif year%4 == 0 && year%100 != 0 {\n\t\treturn true\n\t// Also leap if divisible by 400\n\t} else if year%400 == 0 {\n\t\treturn true\n\t}\n\t// All others are not leap\n\treturn false\n}	\N	\N	0	2	2015-03-20 00:07:12	2015-03-20 00:07:12	212	leap.go	{"leap.go":"package leap\\n\\n\\n//Returns true if the year is a leap year and false otherwise. \\n//Takes the year as an int.\\nfunc IsLeapYear(year int) bool {\\n\\t// Is leap if evenly divisible by 4 and not by 100\\n\\tif year%4 == 0 \\u0026\\u0026 year%100 != 0 {\\n\\t\\treturn true\\n\\t// Also leap if divisible by 400\\n\\t} else if year%400 == 0 {\\n\\t\\treturn true\\n\\t}\\n\\t// All others are not leap\\n\\treturn false\\n}"}
328	16	8ec6b00ffb07faaa2ee4ca97	pending	python	meetup	# This is sloppy. Nitpick away.\n\nimport datetime\n\n\ndef meetup_day(year, month, dotw, ordinal):\n    dotw_dict = {"Monday": 0,\n                 "Tuesday": 1,\n                 "Wednesday": 2,\n                 "Thursday": 3,\n                 "Friday": 4,\n                 "Saturday": 5,\n                 "Sunday": 6}\n    dotw_num = dotw_dict[dotw]\n    first = datetime.date(year, month, 1)\n    dotw_first = first.weekday()\n    dotw_diff = dotw_num - dotw_first\n    if dotw_diff == 0:\n        first_day = first\n    if dotw_diff > 0:\n        first_day = first + datetime.timedelta(days=dotw_diff)\n    if dotw_diff < 0:\n        first_day = first + datetime.timedelta(days=(7 + dotw_diff))\n    target_date = first_day\n    if ordinal[0].isdigit() and ordinal[0] != "1":\n        offset = 7 * (int(ordinal[0])-1)\n        target_date = first_day + datetime.timedelta(days=offset)\n    if ordinal == "teenth":\n        if 12 < meetup_day(year, month, dotw, "2nd").day < 20:\n            target_date = meetup_day(year, month, dotw, "2nd")\n        else:\n            target_date = meetup_day(year, month, dotw, "3rd")\n    if ordinal == "last":\n        this_month = datetime.date(year=year, month=month, day=28)\n        next_month = this_month + datetime.timedelta(days=5)\n        next_first = meetup_day(next_month.year, next_month.month, dotw, "1st")\n        target_date = next_first + datetime.timedelta(days=-7)\n    if target_date.month != month:\n        raise Exception\n    return target_date	\N	\N	0	1	2015-02-13 03:54:36	2015-02-13 03:54:36	213	/python/meetup/meetup.py	{"/python/meetup/meetup.py":"# This is sloppy. Nitpick away.\\n\\nimport datetime\\n\\n\\ndef meetup_day(year, month, dotw, ordinal):\\n    dotw_dict = {\\"Monday\\": 0,\\n                 \\"Tuesday\\": 1,\\n                 \\"Wednesday\\": 2,\\n                 \\"Thursday\\": 3,\\n                 \\"Friday\\": 4,\\n                 \\"Saturday\\": 5,\\n                 \\"Sunday\\": 6}\\n    dotw_num = dotw_dict[dotw]\\n    first = datetime.date(year, month, 1)\\n    dotw_first = first.weekday()\\n    dotw_diff = dotw_num - dotw_first\\n    if dotw_diff == 0:\\n        first_day = first\\n    if dotw_diff \\u003e 0:\\n        first_day = first + datetime.timedelta(days=dotw_diff)\\n    if dotw_diff \\u003c 0:\\n        first_day = first + datetime.timedelta(days=(7 + dotw_diff))\\n    target_date = first_day\\n    if ordinal[0].isdigit() and ordinal[0] != \\"1\\":\\n        offset = 7 * (int(ordinal[0])-1)\\n        target_date = first_day + datetime.timedelta(days=offset)\\n    if ordinal == \\"teenth\\":\\n        if 12 \\u003c meetup_day(year, month, dotw, \\"2nd\\").day \\u003c 20:\\n            target_date = meetup_day(year, month, dotw, \\"2nd\\")\\n        else:\\n            target_date = meetup_day(year, month, dotw, \\"3rd\\")\\n    if ordinal == \\"last\\":\\n        this_month = datetime.date(year=year, month=month, day=28)\\n        next_month = this_month + datetime.timedelta(days=5)\\n        next_first = meetup_day(next_month.year, next_month.month, dotw, \\"1st\\")\\n        target_date = next_first + datetime.timedelta(days=-7)\\n    if target_date.month != month:\\n        raise Exception\\n    return target_date"}
329	16	c647fa55680c9f78b451f3c9	superseded	scala	bob	package bob\n\nclass Bob {\n\tdef hey(input:String):String = input match {\n\t\tcase x if input endsWith "?"\t\t\t\t=> "Sure."\n\t\tcase x if input equals input.toUpperCase()\t=> "Whoa, chill out!"\n\t\tcase x if input.trim.isEmpty \t\t\t\t=> "Fine. Be that way!"\n\t\tcase _ \t\t\t\t\t\t\t\t\t=> "Whatever."\n\t} \t\n}	\N	\N	0	1	2015-01-13 00:59:08	2015-01-13 00:59:08	214	/scala/bob/src/main/scala/ChatWithbob.scala	{"/scala/bob/src/main/scala/ChatWithbob.scala":"package bob\\n\\nclass Bob {\\n\\tdef hey(input:String):String = input match {\\n\\t\\tcase x if input endsWith \\"?\\"\\t\\t\\t\\t=\\u003e \\"Sure.\\"\\n\\t\\tcase x if input equals input.toUpperCase()\\t=\\u003e \\"Whoa, chill out!\\"\\n\\t\\tcase x if input.trim.isEmpty \\t\\t\\t\\t=\\u003e \\"Fine. Be that way!\\"\\n\\t\\tcase _ \\t\\t\\t\\t\\t\\t\\t\\t\\t=\\u003e \\"Whatever.\\"\\n\\t} \\t\\n}"}
330	16	a962277ebe201d3f6952e3fe	pending	scala	bob	package bob\n\nclass Bob {\n\t\n\tdef hey(input:String) = findResponse(input.replaceAll(",", ""))\n\n\tdef findResponse(input:String):String = input match {\n\t\tcase x if input.trim.isEmpty \t\t\t\t=> "Fine. Be that way!"\n\t\tcase x if (input matches ".*[a-zA-Z]+.*") && (input equals input.toUpperCase())\n\t\t  => "Whoa, chill out!"\n\t\tcase x if input endsWith "?"\t\t\t\t=> "Sure."\n\t\tcase _ \t\t\t\t\t\t\t\t\t\t=> "Whatever."\n\t} \t\n}	\N	\N	0	2	2015-03-29 11:55:16	2015-03-29 11:55:16	214	/scala/bob/src/main/scala/ChatWithbob.scala	{"/scala/bob/src/main/scala/ChatWithbob.scala":"package bob\\n\\nclass Bob {\\n\\t\\n\\tdef hey(input:String) = findResponse(input.replaceAll(\\",\\", \\"\\"))\\n\\n\\tdef findResponse(input:String):String = input match {\\n\\t\\tcase x if input.trim.isEmpty \\t\\t\\t\\t=\\u003e \\"Fine. Be that way!\\"\\n\\t\\tcase x if (input matches \\".*[a-zA-Z]+.*\\") \\u0026\\u0026 (input equals input.toUpperCase())\\n\\t\\t  =\\u003e \\"Whoa, chill out!\\"\\n\\t\\tcase x if input endsWith \\"?\\"\\t\\t\\t\\t=\\u003e \\"Sure.\\"\\n\\t\\tcase _ \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t=\\u003e \\"Whatever.\\"\\n\\t} \\t\\n}"}
331	16	25735339eb847be04f34e9cc	pending	elixir	leap	defmodule Year do\r\n  def leap_year?(year) do\r\n    cond do\r\n      rem(year, 400) == 0 -> true\r\n      rem(year, 100) == 0 -> false\r\n      rem(year, 4) == 0 -> true\r\n      true -> false\r\n    end\r\n  end\r\nend\r\n\r	\N	\N	0	1	2014-11-27 04:11:43	2014-11-27 04:11:43	215	leap.exs	{"leap.exs":"defmodule Year do\\r\\n  def leap_year?(year) do\\r\\n    cond do\\r\\n      rem(year, 400) == 0 -\\u003e true\\r\\n      rem(year, 100) == 0 -\\u003e false\\r\\n      rem(year, 4) == 0 -\\u003e true\\r\\n      true -\\u003e false\\r\\n    end\\r\\n  end\\r\\nend\\r\\n\\r"}
332	16	fdfb4653fa2befa68fe960f1	pending	python	bob	# #\n# # Skeleton file for the Python "Bob" exercise.\n# #\ndef hey(what):\n    what = what.strip()\n    if not what:\n\treturn "Fine. Be that way!"\n    elif what.isupper():\n\treturn "Whoa, chill out!"\n    elif what.endswith('?'):\n\treturn "Sure."\n    else:\n\treturn "Whatever."	\N	\N	0	1	2014-11-11 07:36:33	2014-11-11 07:36:33	216	bob.py	{"bob.py":"# #\\n# # Skeleton file for the Python \\"Bob\\" exercise.\\n# #\\ndef hey(what):\\n    what = what.strip()\\n    if not what:\\n\\treturn \\"Fine. Be that way!\\"\\n    elif what.isupper():\\n\\treturn \\"Whoa, chill out!\\"\\n    elif what.endswith('?'):\\n\\treturn \\"Sure.\\"\\n    else:\\n\\treturn \\"Whatever.\\""}
333	18	de4be896fb5ce20a13a93214	pending	coffeescript	bob	unless String::trim then String::trim = -> @replace /^\\s+|\\s+$/g, ""\n\nclass Bob\n\they:\t(input) ->\n\t\t# check for all whitespace\n\t\tif "" is input.trim()\n\t\t\treturn "Fine. Be that way!"\n\t\t# check for caps\n\t\tif input is input.toUpperCase()\n\t\t\treturn "Woah, chill out!"\n\t\t# check for ?\n\t\tif input[-1..] is "?"\n\t\t\treturn "Sure."\n\t\t# default case\n\t\treturn "Whatever."\n\t\t\nmodule.exports = Bob	\N	\N	0	1	2015-05-13 08:15:54	2015-05-13 08:15:54	217	bob.coffee	{"bob.coffee":"unless String::trim then String::trim = -\\u003e @replace /^\\\\s+|\\\\s+$/g, \\"\\"\\n\\nclass Bob\\n\\they:\\t(input) -\\u003e\\n\\t\\t# check for all whitespace\\n\\t\\tif \\"\\" is input.trim()\\n\\t\\t\\treturn \\"Fine. Be that way!\\"\\n\\t\\t# check for caps\\n\\t\\tif input is input.toUpperCase()\\n\\t\\t\\treturn \\"Woah, chill out!\\"\\n\\t\\t# check for ?\\n\\t\\tif input[-1..] is \\"?\\"\\n\\t\\t\\treturn \\"Sure.\\"\\n\\t\\t# default case\\n\\t\\treturn \\"Whatever.\\"\\n\\t\\t\\nmodule.exports = Bob"}
334	18	b752a3b090a68404832dc6ad	pending	ruby	nth-prime	require 'prime'\n\nclass Prime\n  def self.nth(number)\n    fail ArgumentError, 'Invalid Input', caller if number <= 0\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\n  end\nend	\N	\N	0	1	2015-04-26 02:48:22	2015-04-26 02:48:22	218	/ruby/nth-prime/prime.rb	{"/ruby/nth-prime/prime.rb":"require 'prime'\\n\\nclass Prime\\n  def self.nth(number)\\n    fail ArgumentError, 'Invalid Input', caller if number \\u003c= 0\\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\\n  end\\nend"}
335	18	b38e41379970dab7a5180534	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor str candidates = filter isAnagram candidates\n  where lcStr = map toLower str\n        isAnagram candidate = s /= lcStr && sort s == sort lcStr\n          where s = map toLower candidate	\N	\N	0	1	2015-04-24 09:41:33	2015-04-24 09:41:33	219	Anagram.hs	{"Anagram.hs":"module Anagram (anagramsFor) where\\n\\nimport Data.Char (toLower)\\nimport Data.List (sort)\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor str candidates = filter isAnagram candidates\\n  where lcStr = map toLower str\\n        isAnagram candidate = s /= lcStr \\u0026\\u0026 sort s == sort lcStr\\n          where s = map toLower candidate"}
336	18	3d0ab8cadef35098f51bc0f7	pending	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toLower)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor str candidates = filter isAnagram candidates\n  where lcStr = map toLower str\n        sortedLcStr = sort lcStr\n        isAnagram candidate = s /= lcStr && sort s == sortedLcStr\n          where s = map toLower candidate	\N	\N	0	2	2015-05-13 10:11:54	2015-05-13 10:11:54	219	Anagram.hs	{"Anagram.hs":"module Anagram (anagramsFor) where\\n\\nimport Data.Char (toLower)\\nimport Data.List (sort)\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor str candidates = filter isAnagram candidates\\n  where lcStr = map toLower str\\n        sortedLcStr = sort lcStr\\n        isAnagram candidate = s /= lcStr \\u0026\\u0026 sort s == sortedLcStr\\n          where s = map toLower candidate"}
337	18	624961e994c81158d705efbf	superseded	haskell	meetup	module Meetup ( Weekday(..)\n              , Schedule(..)\n              , meetupDay\n              ) where\n\nimport Data.Time.Calendar\n\ndata Weekday = Monday | Tuesday | Wednesday | Thursday | Friday |\n               Saturday | Sunday\n    deriving (Eq, Show)\n\ndata Schedule = First | Second | Third | Fourth | Fifth |\n                Teenth | Last\n\ntype Year = Integer\ntype Month = Int\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay which weekday y m = fromGregorian y m matchedDay\n    where matchedDay = fst $ head $ matchDay days\n          matchDay = case which of\n                       Last      -> reverse\n                       Teenth    -> filter (teenRange . fst)\n                       otherwise -> drop (dropFor which)\n          days = filter ((==weekday) . snd) $ month y m\n          teenRange n = n >= 13 && n <= 19\n          dropFor First  = 0\n          dropFor Second = 1\n          dropFor Third  = 2\n          dropFor Fourth = 3\n          dropFor Fifth  = 4\n\n-- Construct the calendar for the specified month\n--\n-- A monthly calendar is a list of the day-of-the-month and the corresponding\n-- Weekday\nmonth :: Year -> Month -> [(Int, Weekday)]\nmonth y m = zip [1..monthLength]\n                (drop (daysIntoWeek firstDayOfMonth) $ cycle weekDays)\n    where monthLength = gregorianMonthLength y m\n          firstDayOfMonth = fromGregorian y m 1\n\nweekDays :: [Weekday]\nweekDays = [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]\n\ndaysIntoWeek :: Day -> Int\ndaysIntoWeek (ModifiedJulianDay 0) = 2 -- day0 is a Wednesday,\n                                       -- aka 2 days into week\ndaysIntoWeek d = ((fromInteger $ diffDays d day0) + daysIntoWeek day0) `mod` 7\n\nday0 :: Day\nday0 = ModifiedJulianDay 0	\N	\N	0	1	2015-05-12 03:23:11	2015-05-12 03:23:11	220	Meetup.hs	{"Meetup.hs":"module Meetup ( Weekday(..)\\n              , Schedule(..)\\n              , meetupDay\\n              ) where\\n\\nimport Data.Time.Calendar\\n\\ndata Weekday = Monday | Tuesday | Wednesday | Thursday | Friday |\\n               Saturday | Sunday\\n    deriving (Eq, Show)\\n\\ndata Schedule = First | Second | Third | Fourth | Fifth |\\n                Teenth | Last\\n\\ntype Year = Integer\\ntype Month = Int\\n\\nmeetupDay :: Schedule -\\u003e Weekday -\\u003e Year -\\u003e Month -\\u003e Day\\nmeetupDay which weekday y m = fromGregorian y m matchedDay\\n    where matchedDay = fst $ head $ matchDay days\\n          matchDay = case which of\\n                       Last      -\\u003e reverse\\n                       Teenth    -\\u003e filter (teenRange . fst)\\n                       otherwise -\\u003e drop (dropFor which)\\n          days = filter ((==weekday) . snd) $ month y m\\n          teenRange n = n \\u003e= 13 \\u0026\\u0026 n \\u003c= 19\\n          dropFor First  = 0\\n          dropFor Second = 1\\n          dropFor Third  = 2\\n          dropFor Fourth = 3\\n          dropFor Fifth  = 4\\n\\n-- Construct the calendar for the specified month\\n--\\n-- A monthly calendar is a list of the day-of-the-month and the corresponding\\n-- Weekday\\nmonth :: Year -\\u003e Month -\\u003e [(Int, Weekday)]\\nmonth y m = zip [1..monthLength]\\n                (drop (daysIntoWeek firstDayOfMonth) $ cycle weekDays)\\n    where monthLength = gregorianMonthLength y m\\n          firstDayOfMonth = fromGregorian y m 1\\n\\nweekDays :: [Weekday]\\nweekDays = [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]\\n\\ndaysIntoWeek :: Day -\\u003e Int\\ndaysIntoWeek (ModifiedJulianDay 0) = 2 -- day0 is a Wednesday,\\n                                       -- aka 2 days into week\\ndaysIntoWeek d = ((fromInteger $ diffDays d day0) + daysIntoWeek day0) `mod` 7\\n\\nday0 :: Day\\nday0 = ModifiedJulianDay 0"}
338	18	480fcdd104af8e80a6dc5334	pending	haskell	meetup	module Meetup ( Weekday(..)\n              , Schedule(..)\n              , meetupDay\n              ) where\n\nimport Data.Time.Calendar\n\ndata Weekday = Monday | Tuesday | Wednesday | Thursday | Friday |\n               Saturday | Sunday\n    deriving (Eq, Show, Enum, Bounded)\n\ndata Schedule = First | Second | Third | Fourth | Fifth |\n                Teenth | Last\n    deriving (Eq, Show, Enum)\n\ntype Year = Integer\ntype Month = Int\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay which weekday y m = fromGregorian y m matchedDay\n    where matchedDay = fst $ head' $ matchDay days\n          matchDay = case which of\n                       Last      -> reverse\n                       Teenth    -> filter (teenRange . fst)\n                       otherwise -> drop (dropFor which)\n          days = filter ((==weekday) . snd) $ month y m\n          head' [] = error "Condition cannot be satisfied!"\n          head' xs = head xs\n          teenRange n = n >= 13 && n <= 19\n          dropFor = fromEnum\n\n-- Construct the calendar for the specified month\n--\n-- A monthly calendar is a list of the day-of-the-month and the corresponding\n-- Weekday\nmonth :: Year -> Month -> [(Int, Weekday)]\nmonth y m = zip [1..monthLength]\n                (drop (daysIntoWeek firstDay) $ cycle [minBound .. maxBound])\n    where monthLength = gregorianMonthLength y m\n          firstDay = fromGregorian y m 1\n\ndaysIntoWeek :: Day -> Int\ndaysIntoWeek (ModifiedJulianDay 0) = 2 -- day0 is a Wednesday,\n                                       -- aka 2 days into week\ndaysIntoWeek d = ((fromInteger $ diffDays d day0) + daysIntoWeek day0) `mod` 7\n\nday0 :: Day\nday0 = ModifiedJulianDay 0	\N	\N	0	2	2015-05-19 06:01:13	2015-05-19 06:01:13	220	Meetup.hs	{"Meetup.hs":"module Meetup ( Weekday(..)\\n              , Schedule(..)\\n              , meetupDay\\n              ) where\\n\\nimport Data.Time.Calendar\\n\\ndata Weekday = Monday | Tuesday | Wednesday | Thursday | Friday |\\n               Saturday | Sunday\\n    deriving (Eq, Show, Enum, Bounded)\\n\\ndata Schedule = First | Second | Third | Fourth | Fifth |\\n                Teenth | Last\\n    deriving (Eq, Show, Enum)\\n\\ntype Year = Integer\\ntype Month = Int\\n\\nmeetupDay :: Schedule -\\u003e Weekday -\\u003e Year -\\u003e Month -\\u003e Day\\nmeetupDay which weekday y m = fromGregorian y m matchedDay\\n    where matchedDay = fst $ head' $ matchDay days\\n          matchDay = case which of\\n                       Last      -\\u003e reverse\\n                       Teenth    -\\u003e filter (teenRange . fst)\\n                       otherwise -\\u003e drop (dropFor which)\\n          days = filter ((==weekday) . snd) $ month y m\\n          head' [] = error \\"Condition cannot be satisfied!\\"\\n          head' xs = head xs\\n          teenRange n = n \\u003e= 13 \\u0026\\u0026 n \\u003c= 19\\n          dropFor = fromEnum\\n\\n-- Construct the calendar for the specified month\\n--\\n-- A monthly calendar is a list of the day-of-the-month and the corresponding\\n-- Weekday\\nmonth :: Year -\\u003e Month -\\u003e [(Int, Weekday)]\\nmonth y m = zip [1..monthLength]\\n                (drop (daysIntoWeek firstDay) $ cycle [minBound .. maxBound])\\n    where monthLength = gregorianMonthLength y m\\n          firstDay = fromGregorian y m 1\\n\\ndaysIntoWeek :: Day -\\u003e Int\\ndaysIntoWeek (ModifiedJulianDay 0) = 2 -- day0 is a Wednesday,\\n                                       -- aka 2 days into week\\ndaysIntoWeek d = ((fromInteger $ diffDays d day0) + daysIntoWeek day0) `mod` 7\\n\\nday0 :: Day\\nday0 = ModifiedJulianDay 0"}
339	18	e17f166fc2f29c200d15bf49	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	2015-05-11 09:00:57	2015-05-11 09:00:57	221	twelve_days.rb	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
347	42	715c788ed868cc128b1fb989	superseded	scala	bob	class Bob {\n  def hey(s : String) = {\n    if (s.matches(" *")) "Fine. Be that way!"\n    else if (s.matches(".*[A-Z].*") && !s.matches(".*[a-z].*")) "Whoa, chill out!"\n    else if (s.matches(".*\\\\?")) "Sure."\n    else "Whatever."\n\n  }\n}	\N	\N	0	1	2015-03-05 11:16:02	2015-03-05 11:16:02	228	src/main/scala/bob.scala	{"src/main/scala/bob.scala":"class Bob {\\n  def hey(s : String) = {\\n    if (s.matches(\\" *\\")) \\"Fine. Be that way!\\"\\n    else if (s.matches(\\".*[A-Z].*\\") \\u0026\\u0026 !s.matches(\\".*[a-z].*\\")) \\"Whoa, chill out!\\"\\n    else if (s.matches(\\".*\\\\\\\\?\\")) \\"Sure.\\"\\n    else \\"Whatever.\\"\\n\\n  }\\n}"}
340	18	509698be86bd07b9b47291b4	pending	ruby	pig-latin	class PigLatin\r\n\r\n\tdef self.translate(words)\r\n\t\tarr = words.scan(/\\w+/)\r\n\t\ttranslation = ''\r\n\t\tarr.each do |word|\r\n\t\t\tcons = /^[^aeiou]*qu|^[^aeiou]+/.match(word)\r\n\t\t\tif \t\t/^yt|^xr|^[aeiou]/.match(word)\r\n\t\t\t\t\ttranslation += word + 'ay'\r\n\t\t\telse\ttranslation += word.sub!(cons[0], '') + cons[0] + 'ay'\r\n\t\t\tend\t\r\n\t\t\ttranslation += ' '\r\n\t\tend\r\n\t\ttranslation.chop!\r\n\tend\r\n\r\nend	\N	\N	0	1	2015-05-11 06:01:12	2015-05-11 06:01:12	222	pig_latin.rb	{"pig_latin.rb":"class PigLatin\\r\\n\\r\\n\\tdef self.translate(words)\\r\\n\\t\\tarr = words.scan(/\\\\w+/)\\r\\n\\t\\ttranslation = ''\\r\\n\\t\\tarr.each do |word|\\r\\n\\t\\t\\tcons = /^[^aeiou]*qu|^[^aeiou]+/.match(word)\\r\\n\\t\\t\\tif \\t\\t/^yt|^xr|^[aeiou]/.match(word)\\r\\n\\t\\t\\t\\t\\ttranslation += word + 'ay'\\r\\n\\t\\t\\telse\\ttranslation += word.sub!(cons[0], '') + cons[0] + 'ay'\\r\\n\\t\\t\\tend\\t\\r\\n\\t\\t\\ttranslation += ' '\\r\\n\\t\\tend\\r\\n\\t\\ttranslation.chop!\\r\\n\\tend\\r\\n\\r\\nend"}
341	18	0ed730e3965ffbb0a5a1de53	pending	ruby	rna-transcription	class Complement\n  MAPPING = {\n    :dna => { 'G' => 'C', 'C' => 'G', 'T' => 'A', 'A' => 'U' },\n    :rna => { 'C' => 'G', 'G' => 'C', 'A' => 'T', 'U' => 'A' }\n    }\n\n  def self.of_dna(dna)\n    self.translate_codes dna, :dna\n  end\n\n  def self.of_rna(rna)\n    self.translate_codes rna, :rna\n  end\n\n  def self.translate_codes(input, type)\n    input.each_char.map do |char|\n      MAPPING[type][char]\n    end.join\n  end\nend	\N	\N	0	1	2015-04-29 20:42:32	2015-04-29 20:42:32	223	/ruby/rna-transcription/complement.rb	{"/ruby/rna-transcription/complement.rb":"class Complement\\n  MAPPING = {\\n    :dna =\\u003e { 'G' =\\u003e 'C', 'C' =\\u003e 'G', 'T' =\\u003e 'A', 'A' =\\u003e 'U' },\\n    :rna =\\u003e { 'C' =\\u003e 'G', 'G' =\\u003e 'C', 'A' =\\u003e 'T', 'U' =\\u003e 'A' }\\n    }\\n\\n  def self.of_dna(dna)\\n    self.translate_codes dna, :dna\\n  end\\n\\n  def self.of_rna(rna)\\n    self.translate_codes rna, :rna\\n  end\\n\\n  def self.translate_codes(input, type)\\n    input.each_char.map do |char|\\n      MAPPING[type][char]\\n    end.join\\n  end\\nend"}
342	24	c97d3a05b2856ae3df133f25	pending	javascript	crypto-square	var CryptoSquare = (function(){\n  function CryptoSquare(plainText){\n    this.plainText = plainText;\n  }\n  \n  CryptoSquare.prototype.normalizeCiphertext = function(){\n    return stringChunk(this.ciphertext(),5).join(' ');\n  };\n  \n  CryptoSquare.prototype.ciphertext = function(){\n    return cipherSegmentsText(this.plaintextSegments());\n  };\n  \n  CryptoSquare.prototype.plaintextSegments = function(){\n    var text = this.normalizePlaintext();\n    return stringChunk(text, stringSquareSize(text));\n  };\n  \n  CryptoSquare.prototype.normalizePlaintext = function(){\n    return cleanText(this.plainText);\n  };\n  \n  CryptoSquare.prototype.size = function(){\n    return stringSquareSize(this.normalizePlaintext());\n  };\n  \n  var stringChunk = function(string,length){\n    return string.match(new RegExp(".{1,"+length+"}",'g'));\n  };\n  \n  var cleanText = function(text){\n    return text.toLowerCase().replace(/[^a-z0-9]/g,'');\n  };\n  \n  var cipherSegmentsText = function(segments){\n    var size = segments[0].length;\n    var output = "";\n    for (var i = 0; i < size; i++) {\n      for (var j = 0; j < segments.length; j++) {\n        output += segments[j][i] || "";\n      }\n    }\n    return output;\n  };\n  \n  var stringSquareSize = function(string){\n    return Math.ceil(Math.sqrt(string.length));\n  };\n  \n  return CryptoSquare;\n})();\n\nmodule.exports = CryptoSquare;	\N	\N	0	1	2015-06-16 07:15:37	2015-06-16 07:15:37	224	crypto-square.js	{"crypto-square.js":"var CryptoSquare = (function(){\\n  function CryptoSquare(plainText){\\n    this.plainText = plainText;\\n  }\\n  \\n  CryptoSquare.prototype.normalizeCiphertext = function(){\\n    return stringChunk(this.ciphertext(),5).join(' ');\\n  };\\n  \\n  CryptoSquare.prototype.ciphertext = function(){\\n    return cipherSegmentsText(this.plaintextSegments());\\n  };\\n  \\n  CryptoSquare.prototype.plaintextSegments = function(){\\n    var text = this.normalizePlaintext();\\n    return stringChunk(text, stringSquareSize(text));\\n  };\\n  \\n  CryptoSquare.prototype.normalizePlaintext = function(){\\n    return cleanText(this.plainText);\\n  };\\n  \\n  CryptoSquare.prototype.size = function(){\\n    return stringSquareSize(this.normalizePlaintext());\\n  };\\n  \\n  var stringChunk = function(string,length){\\n    return string.match(new RegExp(\\".{1,\\"+length+\\"}\\",'g'));\\n  };\\n  \\n  var cleanText = function(text){\\n    return text.toLowerCase().replace(/[^a-z0-9]/g,'');\\n  };\\n  \\n  var cipherSegmentsText = function(segments){\\n    var size = segments[0].length;\\n    var output = \\"\\";\\n    for (var i = 0; i \\u003c size; i++) {\\n      for (var j = 0; j \\u003c segments.length; j++) {\\n        output += segments[j][i] || \\"\\";\\n      }\\n    }\\n    return output;\\n  };\\n  \\n  var stringSquareSize = function(string){\\n    return Math.ceil(Math.sqrt(string.length));\\n  };\\n  \\n  return CryptoSquare;\\n})();\\n\\nmodule.exports = CryptoSquare;"}
343	24	f4c7123b19e89112c89a7ef1	pending	ruby	prime-factors	\r\nclass PrimeFactors\r\n\r\n\tdef self.for(integer, factors = [])\r\n\t\treturn factors if integer == 1\t\t\r\n    factor_range = (2..[integer/3,3].max)\r\n\r\n\t\tlow_factor = factor_range.step.detect{|factor|\r\n\t\tinteger % factor == 0\r\n\t\t} || integer\r\n\r\n\t\tPrimeFactors.for(integer/low_factor, factors << low_factor)\r\n\tend\r\n\t\r\nend\r	\N	\N	0	3	2015-06-07 01:18:20	2015-06-07 01:18:20	225	prime_factors.rb	{"prime_factors.rb":"\\r\\nclass PrimeFactors\\r\\n\\r\\n\\tdef self.for(integer, factors = [])\\r\\n\\t\\treturn factors if integer == 1\\t\\t\\r\\n    factor_range = (2..[integer/3,3].max)\\r\\n\\r\\n\\t\\tlow_factor = factor_range.step.detect{|factor|\\r\\n\\t\\tinteger % factor == 0\\r\\n\\t\\t} || integer\\r\\n\\r\\n\\t\\tPrimeFactors.for(integer/low_factor, factors \\u003c\\u003c low_factor)\\r\\n\\tend\\r\\n\\t\\r\\nend\\r"}
344	24	ac6c1612447f1403c03f684e	superseded	ruby	prime-factors	require 'prime'\r\n\r\nclass PrimeFactors\r\n\r\n#minimize time for factoring smaller integers\r\n#by fetching prime numbers in groups of 10000\r\n\tNEXT_PRIMES = 10000\r\n\r\n\tdef self.for(integer)\r\n\t\tprimes = []\r\n\t\tresult = []\r\n\t\tx = integer\r\n\t\tfetch_size = 0\t\t\r\n\t\twhile x > 1\r\n\t\t  fetch_size += NEXT_PRIMES\r\n\t\t  primes = Prime.first(fetch_size).last(NEXT_PRIMES)\r\n\t\t  index = 0\r\n\t\t  while index < NEXT_PRIMES && x > 1\r\n\t\t  \tprime_no = primes[index]\r\n\t\t\t\twhile x % prime_no == 0 \r\n\t\t\t\t\tresult << prime_no\r\n\t\t\t\t\tx /= prime_no\r\n\t\t\t\tend\r\n\t\t\t\tindex += 1\r\n\t\t\tend\r\n\t\tend\r\n\t\tresult\r\n\tend\r\n\t\r\nend\r	\N	\N	0	1	2015-06-08 21:10:19	2015-06-08 21:10:19	225	prime_factors.rb	{"prime_factors.rb":"require 'prime'\\r\\n\\r\\nclass PrimeFactors\\r\\n\\r\\n#minimize time for factoring smaller integers\\r\\n#by fetching prime numbers in groups of 10000\\r\\n\\tNEXT_PRIMES = 10000\\r\\n\\r\\n\\tdef self.for(integer)\\r\\n\\t\\tprimes = []\\r\\n\\t\\tresult = []\\r\\n\\t\\tx = integer\\r\\n\\t\\tfetch_size = 0\\t\\t\\r\\n\\t\\twhile x \\u003e 1\\r\\n\\t\\t  fetch_size += NEXT_PRIMES\\r\\n\\t\\t  primes = Prime.first(fetch_size).last(NEXT_PRIMES)\\r\\n\\t\\t  index = 0\\r\\n\\t\\t  while index \\u003c NEXT_PRIMES \\u0026\\u0026 x \\u003e 1\\r\\n\\t\\t  \\tprime_no = primes[index]\\r\\n\\t\\t\\t\\twhile x % prime_no == 0 \\r\\n\\t\\t\\t\\t\\tresult \\u003c\\u003c prime_no\\r\\n\\t\\t\\t\\t\\tx /= prime_no\\r\\n\\t\\t\\t\\tend\\r\\n\\t\\t\\t\\tindex += 1\\r\\n\\t\\t\\tend\\r\\n\\t\\tend\\r\\n\\t\\tresult\\r\\n\\tend\\r\\n\\t\\r\\nend\\r"}
345	24	fe6101af8cd2158195ff100a	superseded	ruby	prime-factors	\r\nclass PrimeFactors\r\n\r\n\tdef self.for(integer, factors = [])\r\n\t\treturn factors if integer == 1\r\n\t\t\r\n    factor_range = (2..[integer/3,3].max)\r\n\r\n\t\tlow_factor = factor_range.step.detect{|factor|\r\n\t\tinteger % factor == 0\r\n\t\t} || integer\r\n\r\n\t\tPrimeFactors.for(integer/low_factor, factors << low_factor)\r\n\tend\r\n\t\r\nend\r	\N	\N	0	2	2015-06-10 06:45:27	2015-06-10 06:45:27	225	prime_factors.rb	{"prime_factors.rb":"\\r\\nclass PrimeFactors\\r\\n\\r\\n\\tdef self.for(integer, factors = [])\\r\\n\\t\\treturn factors if integer == 1\\r\\n\\t\\t\\r\\n    factor_range = (2..[integer/3,3].max)\\r\\n\\r\\n\\t\\tlow_factor = factor_range.step.detect{|factor|\\r\\n\\t\\tinteger % factor == 0\\r\\n\\t\\t} || integer\\r\\n\\r\\n\\t\\tPrimeFactors.for(integer/low_factor, factors \\u003c\\u003c low_factor)\\r\\n\\tend\\r\\n\\t\\r\\nend\\r"}
346	24	6fd77d1db5e22d2c6cee0f47	pending	ruby	pascals-triangle	class Triangle\n  attr_reader :rows\n  def initialize size\n    @rows = size.times.with_object([]) do |i,list|\n      list << generate_row(list[i-1].to_a)\n    end\n  end\n  \n  private\n  def generate_row prior\n    (prior.length+1).times.with_object([]) do |i, row|\n      prev = i.zero? ? 0 : prior[i-1]\n      row << pascal_value(prev, prior[i].to_i)\n    end\n  end\n  \n  def pascal_value left, right\n    sum = left+right\n    val = sum.zero? ? 1 : sum\n  end\nend	\N	\N	0	1	2015-06-11 07:45:02	2015-06-11 07:45:02	227	triangle.rb	{"triangle.rb":"class Triangle\\n  attr_reader :rows\\n  def initialize size\\n    @rows = size.times.with_object([]) do |i,list|\\n      list \\u003c\\u003c generate_row(list[i-1].to_a)\\n    end\\n  end\\n  \\n  private\\n  def generate_row prior\\n    (prior.length+1).times.with_object([]) do |i, row|\\n      prev = i.zero? ? 0 : prior[i-1]\\n      row \\u003c\\u003c pascal_value(prev, prior[i].to_i)\\n    end\\n  end\\n  \\n  def pascal_value left, right\\n    sum = left+right\\n    val = sum.zero? ? 1 : sum\\n  end\\nend"}
349	42	38d9d486217c35104092dc9a	superseded	haskell	nucleotide-count	module DNA(count, nucleotideCounts) where\n\nimport Data.Map.Strict(Map, fromListWith)\n\n\ndna :: String\ndna = "ACGT"\n\nrna :: String\nrna = "ACGU"\n\nisDNA :: Char -> Bool\nisDNA nucleotide = nucleotide `elem` dna\n\nisRNA :: Char -> Bool\nisRNA nucleotide = nucleotide `elem` rna\n\ncount :: Char -> String -> Int\ncount nucleotide string =\n    case isRNA nucleotide || isDNA nucleotide of\n        True -> length $ filter (\\x -> x == nucleotide) string\n        _ -> error $ "invalid nucleotide '" ++ [nucleotide] ++ "'"\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts string =\n    fromListWith (+) $ map (\\x -> (x, 1)) string ++ map (\\x -> (x, 0)) dna	\N	\N	0	1	2015-02-23 04:24:09	2015-02-23 04:24:09	229	DNA.hs	{"DNA.hs":"module DNA(count, nucleotideCounts) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\n\\n\\ndna :: String\\ndna = \\"ACGT\\"\\n\\nrna :: String\\nrna = \\"ACGU\\"\\n\\nisDNA :: Char -\\u003e Bool\\nisDNA nucleotide = nucleotide `elem` dna\\n\\nisRNA :: Char -\\u003e Bool\\nisRNA nucleotide = nucleotide `elem` rna\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide string =\\n    case isRNA nucleotide || isDNA nucleotide of\\n        True -\\u003e length $ filter (\\\\x -\\u003e x == nucleotide) string\\n        _ -\\u003e error $ \\"invalid nucleotide '\\" ++ [nucleotide] ++ \\"'\\"\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts string =\\n    fromListWith (+) $ map (\\\\x -\\u003e (x, 1)) string ++ map (\\\\x -\\u003e (x, 0)) dna"}
350	42	3bfbec1eca1692615db31e11	superseded	haskell	nucleotide-count	module DNA(count, nucleotideCounts) where\n\nimport Data.Map.Strict(Map, fromListWith)\n\n\ndna :: String\ndna = "ACGT"\n\nrna :: String\nrna = "ACGU"\n\nisDNA :: Char -> Bool\nisDNA nucleotide = nucleotide `elem` dna\n\nisRNA :: Char -> Bool\nisRNA nucleotide = nucleotide `elem` rna\n\ncount :: Char -> String -> Int\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\n                        | otherwise = error $ "invalid nucleotide '" ++ [nucleotide] ++ "'"\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts string =\n    fromListWith (+) $ map (\\x -> (x, 1)) string ++ map (\\x -> (x, 0)) dna	\N	\N	0	2	2015-03-28 15:12:38	2015-03-28 15:12:38	229	DNA.hs	{"DNA.hs":"module DNA(count, nucleotideCounts) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\n\\n\\ndna :: String\\ndna = \\"ACGT\\"\\n\\nrna :: String\\nrna = \\"ACGU\\"\\n\\nisDNA :: Char -\\u003e Bool\\nisDNA nucleotide = nucleotide `elem` dna\\n\\nisRNA :: Char -\\u003e Bool\\nisRNA nucleotide = nucleotide `elem` rna\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\\n                        | otherwise = error $ \\"invalid nucleotide '\\" ++ [nucleotide] ++ \\"'\\"\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts string =\\n    fromListWith (+) $ map (\\\\x -\\u003e (x, 1)) string ++ map (\\\\x -\\u003e (x, 0)) dna"}
351	42	905a5a658c219fa4facfc00f	pending	haskell	nucleotide-count	module DNA(count, nucleotideCounts) where\n\nimport Data.Map.Strict(Map, fromListWith)\n\n\ndna :: String\ndna = "ACGT"\n\nrna :: String\nrna = "ACGU"\n\nisDNA :: Char -> Bool\nisDNA nucleotide = nucleotide `elem` dna\n\nisRNA :: Char -> Bool\nisRNA nucleotide = nucleotide `elem` rna\n\ncount :: Char -> String -> Int\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\n                        | otherwise = error $ "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts string =\n    fromListWith (+) $ map (\\x -> (x, 1)) string ++ map (\\x -> (x, 0)) dna	\N	\N	0	3	2015-04-22 16:55:27	2015-04-22 16:55:27	229	DNA.hs	{"DNA.hs":"module DNA(count, nucleotideCounts) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\n\\n\\ndna :: String\\ndna = \\"ACGT\\"\\n\\nrna :: String\\nrna = \\"ACGU\\"\\n\\nisDNA :: Char -\\u003e Bool\\nisDNA nucleotide = nucleotide `elem` dna\\n\\nisRNA :: Char -\\u003e Bool\\nisRNA nucleotide = nucleotide `elem` rna\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\\n                        | otherwise = error $ \\"invalid nucleotide \\" ++ show nucleotide\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts string =\\n    fromListWith (+) $ map (\\\\x -\\u003e (x, 1)) string ++ map (\\\\x -\\u003e (x, 0)) dna"}
352	42	980342280ac26193583445ad	pending	python	meetup	def meetup_day(year, month, day, meettime):\r\n    import datetime\r\n    daynum=1\r\n    dt = datetime.date(year,month,daynum)\r\n    while dt.strftime("%A")!=day:\r\n        daynum+=1\r\n        dt = datetime.date(year,month,daynum)\r\n    \r\n    if meettime=='1st':\r\n        return dt\r\n    if meettime=='2nd':\r\n        return datetime.date(year,month,daynum+7)\r\n    if meettime=='3rd':\r\n        return datetime.date(year,month,daynum+14)\r\n    if meettime=='4th':\r\n        return datetime.date(year,month,daynum+21)\r\n    if meettime=='last':\r\n        return datetime.date(year,month,daynum+28)\r\n    if meettime=='teenth':\r\n        if daynum<6:\r\n            return datetime.date(year,month,daynum+14)\r\n        else:\r\n            return datetime.date(year,month,daynum+7)\r	\N	\N	0	1	2015-04-29 05:52:43	2015-04-29 05:52:43	230	meetup.py	{"meetup.py":"def meetup_day(year, month, day, meettime):\\r\\n    import datetime\\r\\n    daynum=1\\r\\n    dt = datetime.date(year,month,daynum)\\r\\n    while dt.strftime(\\"%A\\")!=day:\\r\\n        daynum+=1\\r\\n        dt = datetime.date(year,month,daynum)\\r\\n    \\r\\n    if meettime=='1st':\\r\\n        return dt\\r\\n    if meettime=='2nd':\\r\\n        return datetime.date(year,month,daynum+7)\\r\\n    if meettime=='3rd':\\r\\n        return datetime.date(year,month,daynum+14)\\r\\n    if meettime=='4th':\\r\\n        return datetime.date(year,month,daynum+21)\\r\\n    if meettime=='last':\\r\\n        return datetime.date(year,month,daynum+28)\\r\\n    if meettime=='teenth':\\r\\n        if daynum\\u003c6:\\r\\n            return datetime.date(year,month,daynum+14)\\r\\n        else:\\r\\n            return datetime.date(year,month,daynum+7)\\r"}
353	42	4349c68297d8629d9415e5ed	pending	ruby	hamming	class Hamming\n\n  def self.compute firstStrand, secondStrand\n    size = [firstStrand.size, secondStrand.size].min\n    distance = 0\n    (0...size).each {|i|\n      distance = distance + 1 if firstStrand[i] != secondStrand[i]\n    }\n    distance\n  end\n\nend\n\nputs Hamming.compute('AA', 'ABA')	\N	\N	0	1	2015-02-27 03:02:21	2015-02-27 03:02:21	231	hamming.rb	{"hamming.rb":"class Hamming\\n\\n  def self.compute firstStrand, secondStrand\\n    size = [firstStrand.size, secondStrand.size].min\\n    distance = 0\\n    (0...size).each {|i|\\n      distance = distance + 1 if firstStrand[i] != secondStrand[i]\\n    }\\n    distance\\n  end\\n\\nend\\n\\nputs Hamming.compute('AA', 'ABA')"}
354	42	8414e8fe146ce1a80bb0b92f	superseded	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    days = 10**9/((60*60)*24)\n    gsecs = birth_date + datetime.timedelta(days)\n    return gsecs	\N	\N	0	1	2015-04-26 16:11:48	2015-04-26 16:11:48	232	gigasecond.py	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    days = 10**9/((60*60)*24)\\n    gsecs = birth_date + datetime.timedelta(days)\\n    return gsecs"}
355	42	26c82389fa9de759e086d6a7	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    return birth_date + datetime.timedelta(seconds = 10**9)	\N	\N	0	2	2015-05-01 03:20:15	2015-05-01 03:20:15	232	gigasecond.py	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    return birth_date + datetime.timedelta(seconds = 10**9)"}
356	42	d7c379a84b3db584fce0e803	pending	ruby	rna-transcription	class Complement\n  def self.of_dna(dna_strand)\n    dna_strand.gsub!(/G/, 'c')\n    dna_strand.gsub!(/C/, 'g')\n    dna_strand.gsub!(/T/, 'a')\n    dna_strand.gsub!(/A/, 'u')\n    dna_strand.upcase\n\n  end\n\n  def self.of_rna(rna_strand)\n    rna_strand.gsub!(/C/, 'g')\n    rna_strand.gsub!(/G/, 'c')\n    rna_strand.gsub!(/A/, 't')\n    rna_strand.gsub!(/U/, 'a')\n    rna_strand.upcase\n  end\nend	\N	\N	0	1	2015-05-06 23:39:56	2015-05-06 23:39:56	233	complement.rb	{"complement.rb":"class Complement\\n  def self.of_dna(dna_strand)\\n    dna_strand.gsub!(/G/, 'c')\\n    dna_strand.gsub!(/C/, 'g')\\n    dna_strand.gsub!(/T/, 'a')\\n    dna_strand.gsub!(/A/, 'u')\\n    dna_strand.upcase\\n\\n  end\\n\\n  def self.of_rna(rna_strand)\\n    rna_strand.gsub!(/C/, 'g')\\n    rna_strand.gsub!(/G/, 'c')\\n    rna_strand.gsub!(/A/, 't')\\n    rna_strand.gsub!(/U/, 'a')\\n    rna_strand.upcase\\n  end\\nend"}
357	42	47202c06814bc9f68919dbcb	pending	coffeescript	binary	class Binary\n  constructor: (string) ->\n    @digits = (parseInt(char) for char in string.split(""))\n\n  toDecimal: ->\n    @decimalDigits().reduce((x, y) -> x + y)\n\n  decimalDigits: ->\n    Math.pow(2, i) * d for d, i in @digits.reverse()\n\n  module.exports = Binary	\N	\N	0	1	2015-02-24 06:27:06	2015-02-24 06:27:06	234	binary.coffee	{"binary.coffee":"class Binary\\n  constructor: (string) -\\u003e\\n    @digits = (parseInt(char) for char in string.split(\\"\\"))\\n\\n  toDecimal: -\\u003e\\n    @decimalDigits().reduce((x, y) -\\u003e x + y)\\n\\n  decimalDigits: -\\u003e\\n    Math.pow(2, i) * d for d, i in @digits.reverse()\\n\\n  module.exports = Binary"}
358	27	4b00be63d1e8524ec8fdb41f	pending	elixir	etl	defmodule ETL do\n  @doc """\n  Transform an index into an inverted index.\n\n  ## Examples\n\n  iex> ETL.transform(%{"a" => ["ABILITY", "AARDVARK"]}, "b" => ["BALLAST", "BEAUTY"]})\n  %{"ability" => "a", "aardvark" => "a", "ballast" => "b", "beauty" =>"b"}\n  """\n  @spec transform(Dict.t) :: map()\n  def transform(input) do\n    Enum.reduce(input, %{}, fn {key, values}, result ->\n      Enum.reduce(values, result, fn value, result ->\n        Dict.put(result, String.downcase(value), key)\n      end)\n    end)\n  end\nend	\N	\N	0	1	2015-01-30 05:08:57	2015-01-30 05:08:57	235	etl.exs	{"etl.exs":"defmodule ETL do\\n  @doc \\"\\"\\"\\n  Transform an index into an inverted index.\\n\\n  ## Examples\\n\\n  iex\\u003e ETL.transform(%{\\"a\\" =\\u003e [\\"ABILITY\\", \\"AARDVARK\\"]}, \\"b\\" =\\u003e [\\"BALLAST\\", \\"BEAUTY\\"]})\\n  %{\\"ability\\" =\\u003e \\"a\\", \\"aardvark\\" =\\u003e \\"a\\", \\"ballast\\" =\\u003e \\"b\\", \\"beauty\\" =\\u003e\\"b\\"}\\n  \\"\\"\\"\\n  @spec transform(Dict.t) :: map()\\n  def transform(input) do\\n    Enum.reduce(input, %{}, fn {key, values}, result -\\u003e\\n      Enum.reduce(values, result, fn value, result -\\u003e\\n        Dict.put(result, String.downcase(value), key)\\n      end)\\n    end)\\n  end\\nend"}
359	27	8f0fc861a5bebe209bb6fa8c	pending	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        raise Exception('Argument lengths differ.')\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	2	2015-02-24 10:11:47	2015-02-24 10:11:47	236	hamming.py	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        raise Exception('Argument lengths differ.')\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
360	27	51addea7aafcc86643670a29	superseded	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        return\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	1	2015-02-25 14:55:41	2015-02-25 14:55:41	236	hamming.py	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        return\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
361	27	f8e173940566615d520990fd	pending	haskell	say	module Say(inEnglish) where\r\nimport Data.List(unfoldr)\r\nimport Data.Tuple(swap)\r\nimport Data.Map (Map, (!), fromAscList)\r\nimport Data.Functor ((<$>))\r\n\r\nunits :: (Integral a) => Map a String\r\nunits = fromAscList . zip [1..19] $\r\n    ["one","two","three","four","five","six","seven","eight","nine","ten",\r\n    "eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"]\r\n\r\ntens :: (Integral a) => Map a String\r\ntens = fromAscList . zip [2..9] $ ["twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety"]\r\n\r\nnames :: [String]\r\nnames = ["","thousand","million","billion"]\r\n\r\nlimit :: Integer\r\nlimit = 10^(3 * length names)\r\n\r\nrepMod :: (Integral a) => a -> a -> [a]\r\nrepMod b = unfoldr step\r\n    where\r\n    step 0 = Nothing\r\n    step a = Just . swap . (`divMod` b) $ a\r\n\r\ninEnglish :: (Integral a, Num a) => a -> Maybe String\r\ninEnglish 0 = Just "zero"\r\ninEnglish x | x < 0 || fromIntegral x >= limit = Nothing\r\ninEnglish x = fmap (unwords . concat) . sequence . reverse . zipWith f names . map upto999 . repMod 1000 $ x\r\n  where\r\n    f :: String -> Maybe[String] -> Maybe [String]\r\n    f "" n = n\r\n    f _ (Just []) = Just []\r\n    f groupName n = fmap (++[groupName]) n\r\n\r\nupto999 :: (Integral a, Num a) => a -> Maybe [String]\r\nupto999 x\r\n    | x == 0 = Just []\r\n    | x < 20 = Just [units ! x]\r\n    | x <= 99 && head ds == 0 = Just [tens ! (ds!!1)]\r\n    | x <= 99 = Just [tens ! (ds!!1) ++ "-" ++ units ! head ds]\r\n    | x <= 999 = ([units ! (ds!!2), "hundred"]++) <$> upto999 (x `mod` 100)\r\n    | otherwise = Nothing\r\n    where\r\n      ds = repMod 10 x	\N	\N	0	3	2015-04-02 18:32:09	2015-04-02 18:32:09	237	\\haskell\\say\\Say.hs	{"\\\\haskell\\\\say\\\\Say.hs":"module Say(inEnglish) where\\r\\nimport Data.List(unfoldr)\\r\\nimport Data.Tuple(swap)\\r\\nimport Data.Map (Map, (!), fromAscList)\\r\\nimport Data.Functor ((\\u003c$\\u003e))\\r\\n\\r\\nunits :: (Integral a) =\\u003e Map a String\\r\\nunits = fromAscList . zip [1..19] $\\r\\n    [\\"one\\",\\"two\\",\\"three\\",\\"four\\",\\"five\\",\\"six\\",\\"seven\\",\\"eight\\",\\"nine\\",\\"ten\\",\\r\\n    \\"eleven\\",\\"twelve\\",\\"thirteen\\",\\"fourteen\\",\\"fifteen\\",\\"sixteen\\",\\"seventeen\\",\\"eighteen\\",\\"nineteen\\"]\\r\\n\\r\\ntens :: (Integral a) =\\u003e Map a String\\r\\ntens = fromAscList . zip [2..9] $ [\\"twenty\\",\\"thirty\\",\\"forty\\",\\"fifty\\",\\"sixty\\",\\"seventy\\",\\"eighty\\",\\"ninety\\"]\\r\\n\\r\\nnames :: [String]\\r\\nnames = [\\"\\",\\"thousand\\",\\"million\\",\\"billion\\"]\\r\\n\\r\\nlimit :: Integer\\r\\nlimit = 10^(3 * length names)\\r\\n\\r\\nrepMod :: (Integral a) =\\u003e a -\\u003e a -\\u003e [a]\\r\\nrepMod b = unfoldr step\\r\\n    where\\r\\n    step 0 = Nothing\\r\\n    step a = Just . swap . (`divMod` b) $ a\\r\\n\\r\\ninEnglish :: (Integral a, Num a) =\\u003e a -\\u003e Maybe String\\r\\ninEnglish 0 = Just \\"zero\\"\\r\\ninEnglish x | x \\u003c 0 || fromIntegral x \\u003e= limit = Nothing\\r\\ninEnglish x = fmap (unwords . concat) . sequence . reverse . zipWith f names . map upto999 . repMod 1000 $ x\\r\\n  where\\r\\n    f :: String -\\u003e Maybe[String] -\\u003e Maybe [String]\\r\\n    f \\"\\" n = n\\r\\n    f _ (Just []) = Just []\\r\\n    f groupName n = fmap (++[groupName]) n\\r\\n\\r\\nupto999 :: (Integral a, Num a) =\\u003e a -\\u003e Maybe [String]\\r\\nupto999 x\\r\\n    | x == 0 = Just []\\r\\n    | x \\u003c 20 = Just [units ! x]\\r\\n    | x \\u003c= 99 \\u0026\\u0026 head ds == 0 = Just [tens ! (ds!!1)]\\r\\n    | x \\u003c= 99 = Just [tens ! (ds!!1) ++ \\"-\\" ++ units ! head ds]\\r\\n    | x \\u003c= 999 = ([units ! (ds!!2), \\"hundred\\"]++) \\u003c$\\u003e upto999 (x `mod` 100)\\r\\n    | otherwise = Nothing\\r\\n    where\\r\\n      ds = repMod 10 x"}
362	27	ce56cc8ada759f18a966d0c2	superseded	haskell	say	module Say(inEnglish) where\r\nimport Data.List(unfoldr)\r\nimport Data.Tuple(swap)\r\nimport Data.Map (Map, (!), fromAscList)\r\nimport Data.Functor ((<$>))\r\n\r\nunits :: (Integral a) => Map a String\r\nunits = fromAscList . zip [1..19] . words $\r\n    "one two three four five six seven eight nine ten "++\r\n    "eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen"\r\n\r\ntens :: (Integral a) => Map a String\r\ntens = fromAscList . zip [2..9] $ words "twenty thirty forty fifty sixty seventy eighty ninety"\r\n\r\nnames :: [String]\r\nnames = "" : words "thousand million billion"\r\n\r\nrepMod :: (Integral a) => a -> a -> [a]\r\nrepMod b = unfoldr step\r\n    where\r\n    step 0 = Nothing\r\n    step a = Just . swap . (`divMod` b) $ a\r\n\r\ninEnglish :: (Integral a, Num a) => a -> Maybe String\r\ninEnglish 0 = Just "zero"\r\ninEnglish x | x < 0|| fromIntegral x >= ((10^12)::Integer) = Nothing\r\ninEnglish x = do\r\n    res <- (fmap concat . sequence . reverse . zipWith f names . map upto999 . repMod 1000) x\r\n    return . unwords $ res\r\n  where\r\n    f :: String -> Maybe[String] -> Maybe [String]\r\n    f "" n = n\r\n    f _ (Just []) = Just []\r\n    f groupName n = fmap (++[groupName]) n\r\n\r\nupto999 :: (Integral a, Num a) => a -> Maybe [String]\r\nupto999 x\r\n    | x == 0 = Just []\r\n    | x < 20 = Just . (:[]) $ units ! x\r\n    | x <= 99 && head ds == 0 = Just . (:[]) $ tens ! (ds!!1)\r\n    | x <= 99 = Just . (:[]) $ tens ! (ds!!1) ++ "-" ++ units ! head ds\r\n    | x <= 999 = ([units ! (ds!!2), "hundred"]++) <$> upto999 (x `mod` 100)\r\n    | otherwise = Nothing\r\n    where\r\n      ds = repMod 10 x	\N	\N	0	1	2015-04-29 03:08:48	2015-04-29 03:08:48	237	\\haskell\\say\\Say.hs	{"\\\\haskell\\\\say\\\\Say.hs":"module Say(inEnglish) where\\r\\nimport Data.List(unfoldr)\\r\\nimport Data.Tuple(swap)\\r\\nimport Data.Map (Map, (!), fromAscList)\\r\\nimport Data.Functor ((\\u003c$\\u003e))\\r\\n\\r\\nunits :: (Integral a) =\\u003e Map a String\\r\\nunits = fromAscList . zip [1..19] . words $\\r\\n    \\"one two three four five six seven eight nine ten \\"++\\r\\n    \\"eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\\"\\r\\n\\r\\ntens :: (Integral a) =\\u003e Map a String\\r\\ntens = fromAscList . zip [2..9] $ words \\"twenty thirty forty fifty sixty seventy eighty ninety\\"\\r\\n\\r\\nnames :: [String]\\r\\nnames = \\"\\" : words \\"thousand million billion\\"\\r\\n\\r\\nrepMod :: (Integral a) =\\u003e a -\\u003e a -\\u003e [a]\\r\\nrepMod b = unfoldr step\\r\\n    where\\r\\n    step 0 = Nothing\\r\\n    step a = Just . swap . (`divMod` b) $ a\\r\\n\\r\\ninEnglish :: (Integral a, Num a) =\\u003e a -\\u003e Maybe String\\r\\ninEnglish 0 = Just \\"zero\\"\\r\\ninEnglish x | x \\u003c 0|| fromIntegral x \\u003e= ((10^12)::Integer) = Nothing\\r\\ninEnglish x = do\\r\\n    res \\u003c- (fmap concat . sequence . reverse . zipWith f names . map upto999 . repMod 1000) x\\r\\n    return . unwords $ res\\r\\n  where\\r\\n    f :: String -\\u003e Maybe[String] -\\u003e Maybe [String]\\r\\n    f \\"\\" n = n\\r\\n    f _ (Just []) = Just []\\r\\n    f groupName n = fmap (++[groupName]) n\\r\\n\\r\\nupto999 :: (Integral a, Num a) =\\u003e a -\\u003e Maybe [String]\\r\\nupto999 x\\r\\n    | x == 0 = Just []\\r\\n    | x \\u003c 20 = Just . (:[]) $ units ! x\\r\\n    | x \\u003c= 99 \\u0026\\u0026 head ds == 0 = Just . (:[]) $ tens ! (ds!!1)\\r\\n    | x \\u003c= 99 = Just . (:[]) $ tens ! (ds!!1) ++ \\"-\\" ++ units ! head ds\\r\\n    | x \\u003c= 999 = ([units ! (ds!!2), \\"hundred\\"]++) \\u003c$\\u003e upto999 (x `mod` 100)\\r\\n    | otherwise = Nothing\\r\\n    where\\r\\n      ds = repMod 10 x"}
363	27	9b08e21b389c14283102de94	superseded	haskell	say	module Say(inEnglish) where\r\nimport Data.List(unfoldr)\r\nimport Data.Tuple(swap)\r\nimport Data.Map (Map, (!), fromAscList)\r\nimport Data.Functor ((<$>))\r\n\r\nunits :: (Integral a) => Map a String\r\nunits = fromAscList . zip [1..19] $\r\n    ["one","two","three","four","five","six","seven","eight","nine","ten",\r\n    "eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"]\r\n\r\ntens :: (Integral a) => Map a String\r\ntens = fromAscList . zip [2..9] $ ["twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety"]\r\n\r\nnames :: [String]\r\nnames = ["","thousand","million","billion"]\r\n\r\nrepMod :: (Integral a) => a -> a -> [a]\r\nrepMod b = unfoldr step\r\n    where\r\n    step 0 = Nothing\r\n    step a = Just . swap . (`divMod` b) $ a\r\n\r\ninEnglish :: (Integral a, Num a) => a -> Maybe String\r\ninEnglish 0 = Just "zero"\r\ninEnglish x | x < 0 || fromIntegral x >= (10^(12::Int)::Integer) = Nothing\r\ninEnglish x = do\r\n    res <- (fmap concat . sequence . reverse . zipWith f names . map upto999 . repMod 1000) x\r\n    return . unwords $ res\r\n  where\r\n    f :: String -> Maybe[String] -> Maybe [String]\r\n    f "" n = n\r\n    f _ (Just []) = Just []\r\n    f groupName n = fmap (++[groupName]) n\r\n\r\nupto999 :: (Integral a, Num a) => a -> Maybe [String]\r\nupto999 x\r\n    | x == 0 = Just []\r\n    | x < 20 = Just [units ! x]\r\n    | x <= 99 && head ds == 0 = Just [tens ! (ds!!1)]\r\n    | x <= 99 = Just [tens ! (ds!!1) ++ "-" ++ units ! head ds]\r\n    | x <= 999 = ([units ! (ds!!2), "hundred"]++) <$> upto999 (x `mod` 100)\r\n    | otherwise = Nothing\r\n    where\r\n      ds = repMod 10 x	\N	\N	0	2	2015-05-12 14:21:29	2015-05-12 14:21:29	237	\\haskell\\say\\Say.hs	{"\\\\haskell\\\\say\\\\Say.hs":"module Say(inEnglish) where\\r\\nimport Data.List(unfoldr)\\r\\nimport Data.Tuple(swap)\\r\\nimport Data.Map (Map, (!), fromAscList)\\r\\nimport Data.Functor ((\\u003c$\\u003e))\\r\\n\\r\\nunits :: (Integral a) =\\u003e Map a String\\r\\nunits = fromAscList . zip [1..19] $\\r\\n    [\\"one\\",\\"two\\",\\"three\\",\\"four\\",\\"five\\",\\"six\\",\\"seven\\",\\"eight\\",\\"nine\\",\\"ten\\",\\r\\n    \\"eleven\\",\\"twelve\\",\\"thirteen\\",\\"fourteen\\",\\"fifteen\\",\\"sixteen\\",\\"seventeen\\",\\"eighteen\\",\\"nineteen\\"]\\r\\n\\r\\ntens :: (Integral a) =\\u003e Map a String\\r\\ntens = fromAscList . zip [2..9] $ [\\"twenty\\",\\"thirty\\",\\"forty\\",\\"fifty\\",\\"sixty\\",\\"seventy\\",\\"eighty\\",\\"ninety\\"]\\r\\n\\r\\nnames :: [String]\\r\\nnames = [\\"\\",\\"thousand\\",\\"million\\",\\"billion\\"]\\r\\n\\r\\nrepMod :: (Integral a) =\\u003e a -\\u003e a -\\u003e [a]\\r\\nrepMod b = unfoldr step\\r\\n    where\\r\\n    step 0 = Nothing\\r\\n    step a = Just . swap . (`divMod` b) $ a\\r\\n\\r\\ninEnglish :: (Integral a, Num a) =\\u003e a -\\u003e Maybe String\\r\\ninEnglish 0 = Just \\"zero\\"\\r\\ninEnglish x | x \\u003c 0 || fromIntegral x \\u003e= (10^(12::Int)::Integer) = Nothing\\r\\ninEnglish x = do\\r\\n    res \\u003c- (fmap concat . sequence . reverse . zipWith f names . map upto999 . repMod 1000) x\\r\\n    return . unwords $ res\\r\\n  where\\r\\n    f :: String -\\u003e Maybe[String] -\\u003e Maybe [String]\\r\\n    f \\"\\" n = n\\r\\n    f _ (Just []) = Just []\\r\\n    f groupName n = fmap (++[groupName]) n\\r\\n\\r\\nupto999 :: (Integral a, Num a) =\\u003e a -\\u003e Maybe [String]\\r\\nupto999 x\\r\\n    | x == 0 = Just []\\r\\n    | x \\u003c 20 = Just [units ! x]\\r\\n    | x \\u003c= 99 \\u0026\\u0026 head ds == 0 = Just [tens ! (ds!!1)]\\r\\n    | x \\u003c= 99 = Just [tens ! (ds!!1) ++ \\"-\\" ++ units ! head ds]\\r\\n    | x \\u003c= 999 = ([units ! (ds!!2), \\"hundred\\"]++) \\u003c$\\u003e upto999 (x `mod` 100)\\r\\n    | otherwise = Nothing\\r\\n    where\\r\\n      ds = repMod 10 x"}
364	27	91135b4852c0b94b311a18c4	pending	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    length Enum.filter(strand, fn(x) -> x == nucleotide end)\n  end\n\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  %{?A => 4, ?T => 1, ?C => 0, ?G => 0}\n  """\n  @spec nucleotide_counts([char]) :: Dict.t\n  def nucleotide_counts(strand) do\n    counts = %{?A => 0, ?T => 0, ?C => 0, ?G => 0}\n    add_nucleotides strand, counts\n  end\n\n  defp add_nucleotides([], counts), do: counts\n  defp add_nucleotides([x|xs], counts) do\n    count = Map.get(counts, x)\n    counts = Map.put(counts, x, count + 1)\n    add_nucleotides(xs, counts)\n  end\nend	\N	\N	0	1	2015-01-16 23:37:45	2015-01-16 23:37:45	238	dna.exs	{"dna.exs":"defmodule DNA do\\n  @nucleotides [?A, ?C, ?G, ?T]\\n\\n  @doc \\"\\"\\"\\n  Counts individual nucleotides in a DNA strand.\\n\\n  ## Examples\\n\\n  iex\\u003e DNA.count('AATAA', ?A)\\n  4\\n\\n  iex\\u003e DNA.count('AATAA', ?T)\\n  1\\n  \\"\\"\\"\\n  @spec count([char], char) :: non_neg_integer\\n  def count(strand, nucleotide) do\\n    length Enum.filter(strand, fn(x) -\\u003e x == nucleotide end)\\n  end\\n\\n\\n  @doc \\"\\"\\"\\n  Returns a summary of counts by nucleotide.\\n\\n  ## Examples\\n\\n  iex\\u003e DNA.nucleotide_counts('AATAA')\\n  %{?A =\\u003e 4, ?T =\\u003e 1, ?C =\\u003e 0, ?G =\\u003e 0}\\n  \\"\\"\\"\\n  @spec nucleotide_counts([char]) :: Dict.t\\n  def nucleotide_counts(strand) do\\n    counts = %{?A =\\u003e 0, ?T =\\u003e 0, ?C =\\u003e 0, ?G =\\u003e 0}\\n    add_nucleotides strand, counts\\n  end\\n\\n  defp add_nucleotides([], counts), do: counts\\n  defp add_nucleotides([x|xs], counts) do\\n    count = Map.get(counts, x)\\n    counts = Map.put(counts, x, count + 1)\\n    add_nucleotides(xs, counts)\\n  end\\nend"}
365	27	99ef3f0844162e52856570f2	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n\t#I checked for upercase first since it had the most cases.\n\tif what.isupper():\n\t\tsay = "Whoa, chill out!"\n\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\n\telif what.endswith("?"):\n\t\tsay = "Sure."\n\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while "" takes in strings that are empty, but declared.\n\telif what.isspace() or what == "":\n\t\tsay = "Fine. Be that way!"\n\t#Catchall\n\telse:\n\t\tsay = "Whatever."\n\treturn say	\N	\N	0	1	2015-05-24 22:28:34	2015-05-24 22:28:34	239	bob.py	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n\\t#I checked for upercase first since it had the most cases.\\n\\tif what.isupper():\\n\\t\\tsay = \\"Whoa, chill out!\\"\\n\\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\\n\\telif what.endswith(\\"?\\"):\\n\\t\\tsay = \\"Sure.\\"\\n\\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while \\"\\" takes in strings that are empty, but declared.\\n\\telif what.isspace() or what == \\"\\":\\n\\t\\tsay = \\"Fine. Be that way!\\"\\n\\t#Catchall\\n\\telse:\\n\\t\\tsay = \\"Whatever.\\"\\n\\treturn say"}
366	27	70f6abc6b429dd24a27e1794	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(string)\n    @sentence = normalize_string(string)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_string(string)\n    string.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	2	2015-01-03 16:11:53	2015-01-03 16:11:53	240	word-count.rb	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(string)\\n    @sentence = normalize_string(string)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_string(string)\\n    string.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
367	27	1601e44d1ca472b9ac4e3772	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(input)\n    input.gsub!(/\\W/, ' ')\n    @sentence = input.downcase\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\nend	\N	\N	0	1	2015-03-26 14:17:58	2015-03-26 14:17:58	240	word-count.rb	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(input)\\n    input.gsub!(/\\\\W/, ' ')\\n    @sentence = input.downcase\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\nend"}
368	27	066cda956563c4c3c33e7de9	pending	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(sentence)\n    @sentence = normalize_sentence(sentence)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_sentence(sentence)\n    sentence.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	3	2015-03-28 19:19:58	2015-03-28 19:19:58	240	word-count.rb	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(sentence)\\n    @sentence = normalize_sentence(sentence)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_sentence(sentence)\\n    sentence.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
369	45	d2da7444676d4e6e5a231251	pending	python	meetup	import calendar\nimport datetime\n\ndesc_commands = {\n\t'1st':0,\n\t'2nd':1,\n\t'3rd':2,\n\t'4th':3,\n\t'last':-1\n}\n\ndef meetup_day(year, month, dayofweek, desc):\n\tteenth = [13,14,15,16,17,18,19]\n\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n\tdaysofmonth = calendar.monthcalendar(year,month)\n\tdates = []\n\tfor week in daysofmonth:\n\t\tfor day in week:\n\t\t\tif day != 0:\n\t\t\t\tdates.append(day)\n\tcollect = []\n\tfor day in dates:\n\t\tdate = datetime.date(year, month, day)\n\t\tif dayofweek == weekdays[date.isoweekday()-1]:\n\t\t\tcollect.append(date)\n\tif desc in desc_commands:\n\t\tindex = desc_commands[desc]\n\t\treturn collect[index]\n\tif desc == 'teenth':\n\t\tfor day in collect:\n\t\t\tif day.day in teenth:\n\t\t\t\treturn day	\N	\N	0	1	2015-02-13 11:32:42	2015-02-13 11:32:42	241	meetup.py	{"meetup.py":"import calendar\\nimport datetime\\n\\ndesc_commands = {\\n\\t'1st':0,\\n\\t'2nd':1,\\n\\t'3rd':2,\\n\\t'4th':3,\\n\\t'last':-1\\n}\\n\\ndef meetup_day(year, month, dayofweek, desc):\\n\\tteenth = [13,14,15,16,17,18,19]\\n\\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\\n\\tdaysofmonth = calendar.monthcalendar(year,month)\\n\\tdates = []\\n\\tfor week in daysofmonth:\\n\\t\\tfor day in week:\\n\\t\\t\\tif day != 0:\\n\\t\\t\\t\\tdates.append(day)\\n\\tcollect = []\\n\\tfor day in dates:\\n\\t\\tdate = datetime.date(year, month, day)\\n\\t\\tif dayofweek == weekdays[date.isoweekday()-1]:\\n\\t\\t\\tcollect.append(date)\\n\\tif desc in desc_commands:\\n\\t\\tindex = desc_commands[desc]\\n\\t\\treturn collect[index]\\n\\tif desc == 'teenth':\\n\\t\\tfor day in collect:\\n\\t\\t\\tif day.day in teenth:\\n\\t\\t\\t\\treturn day"}
370	45	5c68697117c7e0ed3678242b	pending	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [split lower-case]]))\n\n(defn anagrams-for [my-word, my-list]\n\t(let [ word (lower-case my-word)\n\t\t  letters (sort word)\n\t\t  possible-anagrams (remove #(= % word) my-list) ]\n\n\t\t (filter #(= letters (sort (lower-case %))) possible-anagrams)))	\N	\N	0	2	2015-04-04 21:14:34	2015-04-04 21:14:34	242	anagram.clj	{"anagram.clj":"(ns anagram\\n  (:require [clojure.string :refer [split lower-case]]))\\n\\n(defn anagrams-for [my-word, my-list]\\n\\t(let [ word (lower-case my-word)\\n\\t\\t  letters (sort word)\\n\\t\\t  possible-anagrams (remove #(= % word) my-list) ]\\n\\n\\t\\t (filter #(= letters (sort (lower-case %))) possible-anagrams)))"}
371	45	66522a723ac534d9727ab347	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [split lower-case]]))\n\n(defn equals-frequencies [a, b]\n\t(and \n\t\t(= (frequencies (lower-case a)) (frequencies (lower-case b)))\n\t\t(not= (lower-case a) (lower-case b))))\n\t\t\n(defn find-anagram [anagrams, source, candidates]\n\t(if (= candidates ())\n\t\tanagrams\n\t\t(if (equals-frequencies source (first candidates))\n\t\t\t(recur (conj anagrams (first candidates)) source (rest candidates))\n\t\t\t(recur anagrams source (rest candidates)))))\n\n(defn anagrams-for [source, candidates] \n\t(find-anagram [] source candidates))	\N	\N	0	1	2015-04-11 00:10:54	2015-04-11 00:10:54	242	anagram.clj	{"anagram.clj":"(ns anagram\\n  (:require [clojure.string :refer [split lower-case]]))\\n\\n(defn equals-frequencies [a, b]\\n\\t(and \\n\\t\\t(= (frequencies (lower-case a)) (frequencies (lower-case b)))\\n\\t\\t(not= (lower-case a) (lower-case b))))\\n\\t\\t\\n(defn find-anagram [anagrams, source, candidates]\\n\\t(if (= candidates ())\\n\\t\\tanagrams\\n\\t\\t(if (equals-frequencies source (first candidates))\\n\\t\\t\\t(recur (conj anagrams (first candidates)) source (rest candidates))\\n\\t\\t\\t(recur anagrams source (rest candidates)))))\\n\\n(defn anagrams-for [source, candidates] \\n\\t(find-anagram [] source candidates))"}
372	45	66ad51f53a0fae8c38a23ee6	pending	haskell	accumulate	module Accumulate where\n\naccumulate :: (a -> a1) -> [a] -> [a1]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	1	2015-03-19 19:47:40	2015-03-19 19:47:40	243	Accumulate.hs	{"Accumulate.hs":"module Accumulate where\\n\\naccumulate :: (a -\\u003e a1) -\\u003e [a] -\\u003e [a1]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
373	45	84378a86529102e432fcabbb	pending	ruby	raindrops	class Raindrops\r\n\r\n  TRANSLATE = {\r\n  \t3 => 'Pling',\r\n    5 => 'Plang',\r\n    7 => 'Plong'\r\n  }\r\n\r\n  def self.convert(number)\r\n    message = ''\r\n\r\n    TRANSLATE.each do |(numb, phrase)|\r\n      message << phrase if number % numb == 0\r\n    end\r\n\r\n    if message.empty? then number.to_s else message end\r\n    \r\n  end\r\nend	\N	\N	0	1	2015-02-21 17:25:52	2015-02-21 17:25:52	244	raindrops.rb	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  TRANSLATE = {\\r\\n  \\t3 =\\u003e 'Pling',\\r\\n    5 =\\u003e 'Plang',\\r\\n    7 =\\u003e 'Plong'\\r\\n  }\\r\\n\\r\\n  def self.convert(number)\\r\\n    message = ''\\r\\n\\r\\n    TRANSLATE.each do |(numb, phrase)|\\r\\n      message \\u003c\\u003c phrase if number % numb == 0\\r\\n    end\\r\\n\\r\\n    if message.empty? then number.to_s else message end\\r\\n    \\r\\n  end\\r\\nend"}
374	45	ef6e5e5141d8fd29347e014d	pending	javascript	bob	function Bob() {\n  this.hey = function(message) {\n    return 'Whatever.';\n  }\n}	\N	\N	0	1	2015-03-09 22:32:07	2015-03-09 22:32:07	245	bob.js	{"bob.js":"function Bob() {\\n  this.hey = function(message) {\\n    return 'Whatever.';\\n  }\\n}"}
375	45	f4b51eeaaae1139e8116f74b	pending	elixir	rna-transcription	defmodule DNA do\n  @doc """\n  Transcribes a character list representing DNA nucleotides to RNA\n\n  ## Examples\n\n  iex> DNA.to_rna('ACTG')\n  'UGAC'\n  """\n  @spec to_rna([char]) :: [char]\n  def to_rna(dna) do\n  \tEnum.map(dna, &_to_rna/1)\n  end\n\n  defp _to_rna(?A), do: ?U\n  defp _to_rna(?C), do: ?G\n  defp _to_rna(?T), do: ?A\n  defp _to_rna(?G), do: ?C\nend	\N	\N	0	1	2015-04-21 10:20:17	2015-04-21 10:20:17	246	/elixir/rna-transcription/dna.exs	{"/elixir/rna-transcription/dna.exs":"defmodule DNA do\\n  @doc \\"\\"\\"\\n  Transcribes a character list representing DNA nucleotides to RNA\\n\\n  ## Examples\\n\\n  iex\\u003e DNA.to_rna('ACTG')\\n  'UGAC'\\n  \\"\\"\\"\\n  @spec to_rna([char]) :: [char]\\n  def to_rna(dna) do\\n  \\tEnum.map(dna, \\u0026_to_rna/1)\\n  end\\n\\n  defp _to_rna(?A), do: ?U\\n  defp _to_rna(?C), do: ?G\\n  defp _to_rna(?T), do: ?A\\n  defp _to_rna(?G), do: ?C\\nend"}
376	45	7ac17753080281355c807507	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = isDivisibleBy 4 &&\n               ((not . isDivisibleBy) 100 || isDivisibleBy 400)\n  where\n    isDivisibleBy n = rem y n == 0	\N	\N	0	3	2015-03-23 03:22:00	2015-03-23 03:22:00	247	/haskell/leap/LeapYear.hs	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = isDivisibleBy 4 \\u0026\\u0026\\n               ((not . isDivisibleBy) 100 || isDivisibleBy 400)\\n  where\\n    isDivisibleBy n = rem y n == 0"}
377	45	079affbbf0bd032f3ccd5173	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = (rem y 4 == 0) &&\n               ((rem y 100 /= 0) ||\n                (rem y 400 == 0))	\N	\N	0	1	2015-03-25 18:39:15	2015-03-25 18:39:15	247	/haskell/leap/LeapYear.hs	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = (rem y 4 == 0) \\u0026\\u0026\\n               ((rem y 100 /= 0) ||\\n                (rem y 400 == 0))"}
378	45	f789e1ab61e3845cdd7b3ec3	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisDivisibleBy a b = rem a b == 0\nisNotDivisibleBy a b = rem a b /= 0\n\nisLeapYear :: Int -> Bool\nisLeapYear y = y `isDivisibleBy` 4 &&\n               (y `isNotDivisibleBy` 100 || y `isDivisibleBy` 400)	\N	\N	0	2	2015-03-26 18:16:40	2015-03-26 18:16:40	247	/haskell/leap/LeapYear.hs	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisDivisibleBy a b = rem a b == 0\\nisNotDivisibleBy a b = rem a b /= 0\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = y `isDivisibleBy` 4 \\u0026\\u0026\\n               (y `isNotDivisibleBy` 100 || y `isDivisibleBy` 400)"}
379	45	028a2abf4ef36803c93c21fb	pending	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = isDivisibleBy 4 &&\n               (not (isDivisibleBy 100) || isDivisibleBy 400)\n  where\n    isDivisibleBy n = rem y n == 0	\N	\N	0	4	2015-05-13 07:03:52	2015-05-13 07:03:52	247	/haskell/leap/LeapYear.hs	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = isDivisibleBy 4 \\u0026\\u0026\\n               (not (isDivisibleBy 100) || isDivisibleBy 400)\\n  where\\n    isDivisibleBy n = rem y n == 0"}
380	45	220ef45ba56b4c990efe89b6	pending	swift	leap	public class Year {\n\n  var year: Int\n  public var isLeapYear: Bool {\n    get {\n      return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n    }\n  }\n\n  public init(calendarYear y: Int) {\n    year = y\n  }\n\n}	\N	\N	0	1	2015-04-30 16:36:45	2015-04-30 16:36:45	248	Leap.swift	{"Leap.swift":"public class Year {\\n\\n  var year: Int\\n  public var isLeapYear: Bool {\\n    get {\\n      return year % 4 == 0 \\u0026\\u0026 (year % 100 != 0 || year % 400 == 0)\\n    }\\n  }\\n\\n  public init(calendarYear y: Int) {\\n    year = y\\n  }\\n\\n}"}
381	45	c684cfb60aa16e416c33a240	superseded	go	etl	package transform\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tout := map[string]int{}\n\tfor k, val := range in {\n\t\tfor _, strval := range val {\n\t\t\tout[strings.ToLower(strval)] = k\n\t\t}\n\t}\n\treturn out\n}	\N	\N	0	1	2015-02-22 14:03:36	2015-02-22 14:03:36	249	transform.go	{"transform.go":"package transform\\n\\nimport \\"strings\\"\\n\\nfunc Transform(in map[int][]string) map[string]int {\\n\\tout := map[string]int{}\\n\\tfor k, val := range in {\\n\\t\\tfor _, strval := range val {\\n\\t\\t\\tout[strings.ToLower(strval)] = k\\n\\t\\t}\\n\\t}\\n\\treturn out\\n}"}
388	45	9d1c7f460b5a2a19f81572c0	pending	clojure	bob	(ns bob)\n(use 'clojure.string)\n\n(defn exclamatory [str]\n  (= str (clojure.string/upper-case str))\n  )\n\n(defn interrogative [str]\n  (= \\? (last str))\n  )\n\n(defn silent [str]\n  (empty? (trim str))\n  )\n\n(defn response-for [str]\n  (cond\n      (silent str) "Fine. Be that way!"\n      (exclamatory str) "Woah, chill out!"\n      (interrogative str) "Sure."\n      :else "Whatever."\n    )\n  )	\N	\N	0	1	2015-03-06 14:03:00	2015-03-06 14:03:00	254	bob.clj	{"bob.clj":"(ns bob)\\n(use 'clojure.string)\\n\\n(defn exclamatory [str]\\n  (= str (clojure.string/upper-case str))\\n  )\\n\\n(defn interrogative [str]\\n  (= \\\\? (last str))\\n  )\\n\\n(defn silent [str]\\n  (empty? (trim str))\\n  )\\n\\n(defn response-for [str]\\n  (cond\\n      (silent str) \\"Fine. Be that way!\\"\\n      (exclamatory str) \\"Woah, chill out!\\"\\n      (interrogative str) \\"Sure.\\"\\n      :else \\"Whatever.\\"\\n    )\\n  )"}
389	45	e553a071b270c098cd7674be	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	2015-02-25 00:41:12	2015-02-25 00:41:12	255	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
390	45	40a3288d85b4800f1b4bd294	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	2015-05-24 05:59:05	2015-05-24 05:59:05	255	nucleotide-count.rb	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 390, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	22	2011-01-26 07:24:59	2011-01-26 07:24:59	t
2	1	15	1998-03-06 08:18:45	1998-03-06 08:18:45	t
3	1	18	1972-12-21 12:11:24	1972-12-21 12:11:24	t
4	1	23	1987-04-08 04:21:04	1987-04-08 04:21:04	t
5	1	11	1994-03-25 20:32:05	1994-03-25 20:32:05	t
6	1	8	2001-02-27 00:43:25	2001-02-27 00:43:25	t
7	1	7	2006-03-17 15:09:12	2006-03-17 15:09:12	t
8	1	30	1972-11-25 10:40:05	1972-11-25 10:40:05	t
9	1	31	1979-09-06 11:23:55	1979-09-06 11:23:55	t
10	1	36	1996-04-04 19:16:45	1996-04-04 19:16:45	t
11	1	16	1974-12-28 22:24:36	1974-12-28 22:24:36	f
12	1	17	1991-09-01 18:31:29	1991-09-01 18:31:29	f
13	1	29	1998-04-20 19:21:13	1998-04-20 19:21:13	f
14	1	32	1977-01-04 22:57:08	1977-01-04 22:57:08	f
15	1	38	1974-10-30 09:20:06	1974-10-30 09:20:06	f
16	1	42	1979-07-18 09:14:46	1979-07-18 09:14:46	f
17	1	43	2003-02-02 05:22:10	2003-02-02 05:22:10	f
18	1	47	1983-09-15 14:03:48	1983-09-15 14:03:48	f
19	2	3	1991-02-26 12:27:13	1991-02-26 12:27:13	t
20	2	36	2006-10-27 13:18:17	2006-10-27 13:18:17	t
21	2	31	1996-05-31 04:26:14	1996-05-31 04:26:14	t
22	2	47	1973-11-19 22:21:12	1973-11-19 22:21:12	t
23	2	19	2001-06-13 19:41:52	2001-06-13 19:41:52	f
24	2	38	2005-09-09 05:36:46	2005-09-09 05:36:46	f
25	3	38	1988-03-15 06:03:10	1988-03-15 06:03:10	f
26	3	3	1999-10-12 09:48:03	1999-10-12 09:48:03	f
27	4	3	1995-11-06 19:51:54	1995-11-06 19:51:54	t
28	4	32	1981-12-09 09:23:34	1981-12-09 09:23:34	t
29	4	22	1999-08-19 04:07:39	1999-08-19 04:07:39	t
30	4	27	2001-02-09 08:26:00	2001-02-09 08:26:00	t
31	4	20	1983-03-18 16:22:06	1983-03-18 16:22:06	t
32	4	25	2005-04-05 07:38:57	2005-04-05 07:38:57	t
33	4	19	1973-07-17 23:51:39	1973-07-17 23:51:39	t
34	4	24	1975-03-11 13:14:58	1975-03-11 13:14:58	t
35	4	26	1994-08-27 21:48:09	1994-08-27 21:48:09	t
36	4	21	2005-07-24 19:40:12	2005-07-24 19:40:12	t
37	4	38	2013-06-21 18:50:18	2013-06-21 18:50:18	f
38	4	12	2000-01-26 18:43:24	2000-01-26 18:43:24	f
39	4	14	2006-12-13 20:22:05	2006-12-13 20:22:05	f
40	5	32	2003-06-18 19:39:15	2003-06-18 19:39:15	t
41	5	40	1992-12-20 00:53:12	1992-12-20 00:53:12	t
42	5	35	2013-12-11 09:15:59	2013-12-11 09:15:59	t
43	5	37	1977-06-26 13:24:17	1977-06-26 13:24:17	t
44	5	33	1989-08-16 23:20:46	1989-08-16 23:20:46	t
45	5	36	1981-03-09 21:11:56	1981-03-09 21:11:56	t
46	5	34	1983-12-10 16:02:02	1983-12-10 16:02:02	t
47	5	39	1978-10-31 13:18:42	1978-10-31 13:18:42	t
48	5	41	1981-12-16 18:46:29	1981-12-16 18:46:29	f
49	5	38	1983-12-13 13:48:58	1983-12-13 13:48:58	f
50	5	3	2003-12-19 06:43:00	2003-12-19 06:43:00	f
51	6	6	1975-06-29 10:39:37	1975-06-29 10:39:37	t
52	6	7	1996-06-22 02:24:18	1996-06-22 02:24:18	t
53	6	8	1988-09-02 12:50:24	1988-09-02 12:50:24	t
54	6	9	1995-06-07 15:15:11	1995-06-07 15:15:11	t
55	6	11	2013-11-09 07:10:07	2013-11-09 07:10:07	t
56	6	12	1980-11-04 22:33:31	1980-11-04 22:33:31	t
57	6	13	1992-06-11 19:37:56	1992-06-11 19:37:56	t
58	6	14	2010-04-16 01:20:30	2010-04-16 01:20:30	t
59	6	15	1975-02-28 23:58:05	1975-02-28 23:58:05	t
60	6	16	1998-09-26 00:44:12	1998-09-26 00:44:12	t
61	6	17	2013-03-30 10:12:32	2013-03-30 10:12:32	t
62	6	18	1996-10-27 01:52:47	1996-10-27 01:52:47	t
63	6	23	1994-12-02 20:13:29	1994-12-02 20:13:29	t
64	6	28	1991-07-24 15:03:27	1991-07-24 15:03:27	t
65	6	29	2009-02-22 21:52:06	2009-02-22 21:52:06	t
66	6	30	1981-10-22 00:37:52	1981-10-22 00:37:52	t
67	6	31	1972-08-11 08:17:49	1972-08-11 08:17:49	t
68	6	32	1995-04-21 15:24:33	1995-04-21 15:24:33	t
69	6	38	1988-07-12 11:51:50	1988-07-12 11:51:50	t
70	6	42	1998-03-27 19:23:07	1998-03-27 19:23:07	t
71	6	43	2003-01-01 11:07:50	2003-01-01 11:07:50	t
72	6	44	2013-03-11 07:49:48	2013-03-11 07:49:48	t
73	6	45	1980-10-29 03:53:41	1980-10-29 03:53:41	t
74	6	46	1996-02-28 01:05:31	1996-02-28 01:05:31	t
75	6	47	1987-04-30 23:29:28	1987-04-30 23:29:28	t
76	6	48	2014-10-08 03:20:57	2014-10-08 03:20:57	t
77	6	49	1980-05-16 04:35:33	1980-05-16 04:35:33	t
78	7	3	1985-07-12 06:50:24	1985-07-12 06:50:24	t
79	7	39	1988-07-28 17:49:16	1988-07-28 17:49:16	t
80	7	32	2002-07-08 10:58:41	2002-07-08 10:58:41	t
81	7	38	1978-03-23 18:26:17	1978-03-23 18:26:17	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2015-02-04 18:32:06.648552	2015-02-04 18:32:06.648552	baconesia
2	chocolades	2014-10-02 07:50:45.689411	2014-10-02 07:50:45.689411	chocolades
3	ghost	2015-04-24 03:00:41.698573	2015-04-24 03:00:41.698573	ghost
4	motley	2015-04-12 11:48:15.703332	2015-04-12 11:48:15.703332	motley
5	rugrats	2014-12-22 01:17:59.721399	2014-12-22 01:17:59.721399	rugrats
6	slate	2015-05-15 18:20:34.736039	2015-05-15 18:20:34.736039	slate
7	polkadots	2015-01-07 13:45:15.768625	2015-01-07 13:45:15.768625	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	9	haskell	simple-linked-list	2	pending	\N	2015-06-08 09:16:30	2015-06-08 09:16:30	b1af483558877426db7002e9	f
2	9	python	grade-school	2	done	2015-06-14 21:41:01	2015-06-06 17:23:58	2015-06-06 17:23:58	b1e6ae20f3952d541f8e3aef	t
3	9	python	leap	1	done	2015-06-13 15:06:36	2015-06-11 15:40:34	2015-06-11 15:40:34	ee66b4ec7dd674ba74316ec5	t
4	9	python	rna-transcription	2	pending	\N	2015-06-07 04:17:58	2015-06-07 04:17:58	97a0565fd186cd603701c81b	f
5	9	python	point-mutations	2	done	2015-06-16 20:08:41	2015-06-12 17:57:46	2015-06-12 17:57:46	a1745f9ca8f27eb4e12d214e	t
6	9	csharp	etl	1	done	2015-06-18 06:52:11	2015-06-09 09:39:35	2015-06-09 09:39:35	cf40e40d7b593a647ea6cce9	t
7	11	fsharp	robot-name	3	done	2015-01-06 16:04:47	2014-12-26 09:33:02	2014-12-26 09:33:02	1b6a299852634e3b172f7377	t
8	11	csharp	triangle	1	pending	\N	2015-02-02 17:53:32	2015-02-02 17:53:32	5e92c261569f82527c438129	f
9	12	javascript	word-count	1	done	2015-03-18 15:34:24	2015-03-18 14:26:20	2015-03-18 14:26:20	22748e299bdf8900fec3e894	t
10	12	python	bob	3	done	2015-02-22 17:58:29	2015-02-14 00:33:54	2015-02-14 00:33:54	26e068918026787f7c639888	t
11	12	python	leap	1	done	2015-03-21 00:56:25	2015-03-19 22:40:49	2015-03-19 22:40:49	5d2ddd27b1434b1a3de49d32	t
12	12	python	luhn	1	done	2015-04-17 18:00:18	2015-04-13 01:35:50	2015-04-13 01:35:50	f92af7f7d83ba3f1b4194a35	t
13	12	ruby	etl	1	pending	\N	2015-01-03 04:31:55	2015-01-03 04:31:55	2c3c444e7a461048d3e700bc	f
14	15	python	anagram	1	done	2015-01-27 07:26:11	2015-01-26 22:35:16	2015-01-26 22:35:16	27175ccd811c72e55f242fa3	t
15	15	clojure	rna-transcription	2	done	2015-02-17 03:55:42	2014-12-23 13:43:18	2014-12-23 13:43:18	a39f3730ac1d6a377c29c887	t
16	15	elixir	sublist	1	done	2014-10-26 06:24:50	2014-10-26 01:26:28	2014-10-26 01:26:28	a00b129f7d37ab4b7c332a56	t
17	15	haskell	bob	2	done	2014-11-19 22:52:14	2014-11-11 01:03:55	2014-11-11 01:03:55	fd0786b0d016aa0149d69d49	t
18	22	ruby	proverb	3	pending	\N	2014-11-10 02:59:04	2014-11-10 02:59:04	3902ec4db4040d57fd20048e	f
19	28	ruby	bob	1	done	2015-04-29 02:27:55	2015-04-24 05:52:23	2015-04-24 05:52:23	67a4690ef6a19ecf255c4ace	t
20	28	clojure	accumulate	2	done	2015-05-15 04:50:17	2015-03-05 20:56:51	2015-03-05 20:56:51	a2c46a1b117cd38e14d24b12	t
21	28	python	bob	1	done	2015-05-02 20:40:43	2015-05-01 21:30:28	2015-05-01 21:30:28	c001e8760d4b6198973b54bd	t
22	28	haskell	bank-account	3	done	2015-05-08 23:39:33	2015-03-08 14:16:42	2015-03-08 14:16:42	a3f4d00a415d98962b85a101	t
23	28	php	trinary	1	done	2015-03-22 00:48:04	2015-03-21 05:22:26	2015-03-21 05:22:26	0a90bf9fb01fc0e46f0ae3bb	t
24	28	javascript	anagram	1	done	2015-03-05 19:30:52	2015-03-04 21:58:53	2015-03-04 21:58:53	711c8600ecf6316e3198a341	t
25	28	clojure	nucleotide-count	3	done	2015-02-15 05:01:51	2015-02-11 22:58:41	2015-02-11 22:58:41	dab307aac0223bfeb8bf5338	t
26	28	ruby	rna-transcription	1	pending	\N	2015-04-12 20:55:27	2015-04-12 20:55:27	4158d883e6d14f64a7ddb348	f
27	28	python	word-count	2	done	2015-02-25 15:06:46	2015-02-24 05:38:22	2015-02-24 05:38:22	526f7dcd1d00ec5227503e13	t
28	28	haskell	octal	2	done	2015-05-12 01:00:24	2015-02-24 22:10:33	2015-02-24 22:10:33	bb7bf5156f13cffa9fba76be	t
29	28	python	kindergarten-garden	1	pending	\N	2015-03-14 07:02:17	2015-03-14 07:02:17	0674019f1b7a7266bb16b2b1	f
30	28	ruby	raindrops	2	done	2015-02-12 15:08:01	2015-02-01 23:35:28	2015-02-01 23:35:28	41fca3f2422089e0d6a53280	t
31	28	ruby	binary	2	pending	\N	2015-02-13 09:14:07	2015-02-13 09:14:07	eaca4dba3f0bd78b52bd00ad	f
32	28	javascript	pythagorean-triplet	2	done	2015-04-15 23:03:43	2015-02-28 16:01:17	2015-02-28 16:01:17	c95b2344e5d1bbedb06e5786	t
33	28	javascript	rna-transcription	1	done	2015-06-19 09:38:28	2015-06-14 09:41:23	2015-06-14 09:41:23	a48a796db557b9fc8f75cea8	t
34	28	clojure	etl	1	done	2015-04-30 16:06:20	2015-04-19 18:10:28	2015-04-19 18:10:28	b3cbe3837230e27ee711ca80	t
35	28	python	accumulate	1	done	2015-02-20 08:39:59	2015-02-14 08:17:55	2015-02-14 08:17:55	656aa4bb981e3ade36caf96a	t
36	28	ruby	phone-number	1	done	2015-03-20 18:42:25	2015-03-18 04:17:01	2015-03-18 04:17:01	0149721cd8096bf9930e2b65	t
37	28	python	difference-of-squares	1	done	2015-05-14 08:34:08	2015-05-13 01:35:01	2015-05-13 01:35:01	ac59f3c798c161362fdbcd57	t
38	28	erlang	strain	1	pending	\N	2015-01-28 22:33:02	2015-01-28 22:33:02	0fb07c594fec30c9d56ee35c	f
39	28	ruby	roman-numerals	2	pending	\N	2015-02-06 08:22:30	2015-02-06 08:22:30	2886f47aad6accbcf9232b57	f
40	28	clojure	binary	1	done	2015-04-13 09:08:02	2015-04-02 18:07:09	2015-04-02 18:07:09	294db3592a37f7dce1967127	t
41	28	ruby	leap	2	done	2015-04-05 00:44:02	2015-02-27 06:39:34	2015-02-27 06:39:34	f6ab086d1a496d38e4353480	t
42	28	python	anagram	1	done	2015-03-05 22:06:58	2015-02-23 05:40:17	2015-02-23 05:40:17	6f231eb64a833205f5d62c1b	t
43	28	javascript	bob	5	done	2015-06-01 18:42:56	2015-03-19 16:41:03	2015-03-19 16:41:03	176091947d80243894ed8b76	t
44	28	perl5	pascals-triangle	1	done	2015-03-30 17:31:59	2015-03-29 03:23:00	2015-03-29 03:23:00	13e5c134ea4f7b65a4ef9f4f	t
45	28	go	bob	1	done	2015-03-02 08:59:35	2015-02-26 10:55:24	2015-02-26 10:55:24	2079c7ff25844e7c30f6b62e	t
46	28	coffeescript	binary	1	done	2015-05-17 22:33:16	2015-05-17 14:46:45	2015-05-17 14:46:45	e665cbb03c29a554813e9c92	t
47	28	javascript	robot-name	1	done	2015-05-21 17:32:20	2015-05-15 13:52:48	2015-05-15 13:52:48	7cd26e55b4a9e7c7474ec72f	t
48	28	lua	hamming	1	pending	\N	2015-03-24 13:01:37	2015-03-24 13:01:37	2d04e9b755fb74471a1166c0	f
49	29	ruby	hamming	1	done	2015-06-22 09:17:16.049989	2015-06-21 03:23:04	2015-06-21 03:23:04	69d73c1996e17636ca38a699	t
50	29	javascript	phone-number	1	pending	\N	2015-06-21 03:16:21	2015-06-21 03:16:21	336d3082a1b7064900655475	f
51	29	ruby	prime-factors	1	done	2015-06-22 09:17:16.130581	2015-06-21 02:07:08	2015-06-21 02:07:08	1faf98e324b02addde6e9b09	t
52	31	haskell	sublist	1	pending	\N	2015-06-10 20:56:14	2015-06-10 20:56:14	57b7004a9b206089e38ffae5	f
53	33	scala	word-count	2	done	2014-12-26 10:25:12	2014-12-07 00:26:30	2014-12-07 00:26:30	2731d49b5c8c179526ef168a	t
54	33	erlang	bob	2	done	2015-01-26 06:15:53	2015-01-10 18:07:51	2015-01-10 18:07:51	d9b870e4ae5430835f07c4b0	t
55	33	javascript	bob	2	done	2015-02-26 01:51:41	2015-01-11 20:59:14	2015-01-11 20:59:14	e08efdd76438268f7aba2e49	t
56	33	javascript	nucleotide-count	2	done	2015-05-26 11:38:08	2015-02-01 04:44:25	2015-02-01 04:44:25	7b8189664b56df803ea2b6e3	t
57	38	ruby	triangle	1	done	2015-06-13 18:24:20	2015-06-11 15:43:53	2015-06-11 15:43:53	de492e9c1cc1279d89c203ce	t
58	38	ruby	leap	1	pending	\N	2015-02-28 00:37:27	2015-02-28 00:37:27	ce1bdb2f99b7b16264dd924a	f
59	38	elixir	space-age	1	pending	\N	2015-03-23 14:02:42	2015-03-23 14:02:42	d0cee5a6d481c2574480d435	f
60	38	csharp	raindrops	1	pending	\N	2015-04-14 17:33:22	2015-04-14 17:33:22	58f8af663d92c74232ace251	f
61	38	python	leap	1	done	2015-03-02 20:55:34	2015-02-26 22:33:31	2015-02-26 22:33:31	ffc2f23a32831217b67a92b3	t
62	38	python	anagram	3	pending	\N	2015-04-04 13:00:09	2015-04-04 13:00:09	6695075d5e6bdaac95967a93	f
63	38	ruby	protein-translation	1	pending	\N	2015-02-26 03:24:58	2015-02-26 03:24:58	8ddadd6b33f3fa182bd0e67c	f
136	36	ruby	rna-transcription	2	done	2015-06-12 07:10:59	2015-06-06 10:35:06	2015-06-06 10:35:06	bf3527b8e73b09a6488f8a16	t
64	40	perl5	word-count	1	done	2015-04-05 14:07:55	2015-03-28 18:39:01	2015-03-28 18:39:01	458c9c04d796f3580d7f5500	t
65	44	python	series	2	pending	\N	2015-04-11 21:06:46	2015-04-11 21:06:46	c05cf0554d475d56bb40d884	f
66	46	ruby	difference-of-squares	2	done	2015-02-27 06:50:46	2015-02-15 15:58:34	2015-02-15 15:58:34	be51f87239871f21fb9eb71c	t
67	46	perl5	scrabble-score	1	done	2014-11-27 01:22:14	2014-11-22 15:26:55	2014-11-22 15:26:55	e69211fea48ee96bbfa781ee	t
68	46	haskell	queen-attack	1	done	2014-11-16 10:09:26	2014-11-08 12:58:26	2014-11-08 12:58:26	2de39f44bc54414de5aef862	t
69	46	haskell	sublist	2	done	2015-03-23 16:40:56	2014-11-01 12:03:20	2014-11-01 12:03:20	fa738c5c04168acd44c4fd16	t
70	46	javascript	crypto-square	2	done	2014-11-14 20:34:11	2014-11-12 11:59:14	2014-11-12 11:59:14	4fa6a1803928af3a0f53f96f	t
71	46	javascript	beer-song	1	done	2014-10-29 10:13:01	2014-10-29 06:42:29	2014-10-29 06:42:29	9ea6286f1bc402bb1ed14c7b	t
72	46	ruby	raindrops	1	pending	\N	2015-03-28 10:47:51	2015-03-28 10:47:51	88cef3b9c5f5be68db5d608c	f
73	46	scala	word-count	1	done	2014-11-14 15:49:10	2014-11-06 23:53:53	2014-11-06 23:53:53	8c479ae56d33c9a537b06e76	t
74	46	ruby	secret-handshake	1	done	2015-01-25 06:36:56	2015-01-20 10:06:43	2015-01-20 10:06:43	ab55ea1653474d52bb5246ce	t
75	46	python	leap	3	done	2015-04-09 06:10:43	2014-11-22 00:26:53	2014-11-22 00:26:53	bdc31a26d630247efbb68547	t
76	46	csharp	leap	1	done	2015-01-24 23:37:38	2015-01-13 11:59:00	2015-01-13 11:59:00	2900ad7c2b6d62cc13a3b22d	t
77	46	haskell	gigasecond	2	done	2015-02-26 07:38:18	2015-02-15 18:34:22	2015-02-15 18:34:22	ce1747bf026ada15f0b9eb18	t
78	46	python	grains	2	pending	\N	2015-01-14 19:04:27	2015-01-14 19:04:27	aeaf9125fe2fdbca22634303	f
79	46	csharp	sum-of-multiples	2	done	2015-02-24 05:25:31	2014-11-20 22:17:30	2014-11-20 22:17:30	853fc7b583562aeaa31b9ffe	t
80	46	ruby	kindergarten-garden	1	done	2014-11-23 21:15:43	2014-11-16 19:22:32	2014-11-16 19:22:32	6c1bdfd1bfe1a3d6d6432f7c	t
81	46	ruby	accumulate	1	done	2014-10-24 15:07:56	2014-10-17 04:13:27	2014-10-17 04:13:27	4e7624da810039443a5725b6	t
82	46	csharp	scrabble-score	3	done	2014-12-16 08:13:44	2014-11-18 05:52:50	2014-11-18 05:52:50	67a76b368a1a86c030174659	t
83	46	objective-c	bob	1	done	2015-04-12 15:21:34	2015-04-01 15:49:53	2015-04-01 15:49:53	9e702193e47775043b962247	t
84	48	javascript	hamming	1	done	2015-05-14 10:12:59	2015-05-13 14:03:17	2015-05-13 14:03:17	dc06eb58f73911bbc6e8e881	t
85	48	python	beer-song	1	pending	\N	2015-02-10 09:25:40	2015-02-10 09:25:40	6f6bcd252b9629a5d6dfd5c4	f
86	48	haskell	leap	1	pending	\N	2015-03-11 11:22:15	2015-03-11 11:22:15	c4176c513f84f39c759aa597	f
87	48	ruby	hamming	1	done	2015-03-14 06:04:25	2015-03-13 20:56:01	2015-03-13 20:56:01	8e048582ae08b37661cf6c4f	t
88	49	ruby	saddle-points	2	pending	\N	2015-01-11 01:53:20	2015-01-11 01:53:20	082f53f454cbf33e8273e731	f
89	49	python	atbash-cipher	1	pending	\N	2015-04-17 15:49:21	2015-04-17 15:49:21	0d542dc4a6228f59b1d5613b	f
90	49	python	hamming	2	pending	\N	2015-02-26 02:29:26	2015-02-26 02:29:26	3b6f504356fc1cd465a2fc75	f
91	26	swift	word-count	3	pending	\N	2014-11-22 13:41:57	2014-11-22 13:41:57	9332b152e8dae560dda121e9	f
92	26	ruby	gigasecond	2	pending	\N	2014-10-25 05:45:51	2014-10-25 05:45:51	3a9b89c2076a21879e7233c7	f
93	26	go	leap	2	pending	\N	2015-03-12 18:21:24	2015-03-12 18:21:24	7c3e674005bc76c6a713e286	f
94	26	haskell	phone-number	2	pending	\N	2014-10-30 18:12:52	2014-10-30 18:12:52	3e936399954a2becb0a7cee1	f
95	26	ruby	hamming	1	pending	\N	2014-12-07 15:48:32	2014-12-07 15:48:32	b13742835971d8fa03c20950	f
96	26	python	bob	2	pending	\N	2014-11-13 05:15:22	2014-11-13 05:15:22	1b860a88959899310e8bebbe	f
97	7	haskell	strain	2	pending	\N	2014-12-25 17:09:22	2014-12-25 17:09:22	cd1934da0bab4aa629bb4ec9	f
98	7	clojure	raindrops	2	pending	\N	2014-11-19 18:05:01	2014-11-19 18:05:01	3d7cd3d3990afe804bd8c9d3	f
99	23	ruby	sum-of-multiples	1	pending	\N	2015-06-19 16:56:10	2015-06-19 16:56:10	c4e078aadc27cc24cfaffe88	f
100	23	scala	hamming	2	pending	\N	2015-06-19 22:14:41	2015-06-19 22:14:41	d903d9e28630603d29529c54	f
101	23	csharp	nucleotide-count	1	pending	\N	2015-06-22 06:12:05	2015-06-22 06:12:05	a5f499d576afe4ee1bed2fa8	f
102	23	haskell	etl	1	pending	\N	2015-06-21 11:29:19	2015-06-21 11:29:19	a1b591ac515d1b333d4797c6	f
103	23	javascript	hamming	1	pending	\N	2015-06-19 13:06:47	2015-06-19 13:06:47	e49aa44bea2a9050fd576e2a	f
104	23	clojure	bob	1	pending	\N	2015-06-21 16:41:14	2015-06-21 16:41:14	291526779fa1f58690c3dcd1	f
105	17	ruby	clock	1	pending	\N	2015-06-06 07:21:38	2015-06-06 07:21:38	b6b448d402b2c4d9805f9131	f
106	17	python	sieve	1	pending	\N	2015-03-09 14:00:07	2015-03-09 14:00:07	48e504fdf98ce066d6063e61	f
107	17	ruby	roman-numerals	1	pending	\N	2015-04-07 21:08:34	2015-04-07 21:08:34	e0d4cbb3042f7b1d05d88e3f	f
108	20	python	crypto-square	1	done	2015-05-10 07:55:32	2015-05-04 09:56:00	2015-05-04 09:56:00	2494c783214849cd6eb6b32e	t
109	20	go	diffie-hellman	1	done	2015-05-23 11:13:48	2015-05-13 07:24:00	2015-05-13 07:24:00	bb630cf071e967b89a0e7c30	t
110	20	python	roman-numerals	3	done	2015-04-25 21:36:19	2015-04-20 08:25:12	2015-04-20 08:25:12	9b5dee2fa376fbd109f60456	t
111	21	javascript	rna-transcription	2	done	2015-05-20 08:37:08	2014-11-29 23:50:06	2014-11-29 23:50:06	cca7911f53bd979349654cf9	t
112	21	elixir	binary	1	done	2014-11-05 08:53:09	2014-11-04 12:39:45	2014-11-04 12:39:45	7a10815f4e744904b6bab729	t
113	21	javascript	grains	1	done	2015-02-23 17:08:01	2015-02-19 19:45:29	2015-02-19 19:45:29	74a0ee78890807919b1a47c9	t
114	21	ruby	grains	1	done	2014-11-30 08:31:43	2014-11-19 00:37:53	2014-11-19 00:37:53	53595a43d92837493fcb738e	t
115	21	elixir	list-ops	2	done	2014-11-11 09:21:41	2014-11-06 10:28:18	2014-11-06 10:28:18	e4ab9709c9ccf604f54e2d14	t
116	21	haskell	word-count	2	done	2014-11-23 17:00:41	2014-10-22 06:39:51	2014-10-22 06:39:51	cf80d76dcbb75321b044aaae	t
117	21	javascript	space-age	1	done	2014-11-20 19:28:24	2014-11-09 09:27:26	2014-11-09 09:27:26	ba9ef152cd0f484658276238	t
118	36	ruby	word-count	4	done	2015-06-19 04:44:13	2015-05-27 04:45:05	2015-05-27 04:45:05	3ff2e7fa0992b350e51bc7c4	t
119	36	ruby	sieve	2	done	2015-06-10 14:03:30	2015-05-26 08:04:43	2015-05-26 08:04:43	c89bc10132680bb22cb7563d	t
120	36	ruby	hamming	3	done	2015-06-05 20:27:23	2015-05-27 17:09:32	2015-05-27 17:09:32	0ee6df37177199a33e544c26	t
121	36	python	bob	1	done	2015-06-12 21:41:33	2015-06-06 03:14:09	2015-06-06 03:14:09	b5a6b364f58168e686257ab7	t
122	36	python	leap	1	done	2015-06-22 09:17:19.678526	2015-06-15 16:07:45	2015-06-15 16:07:45	b3446813638f74cdc5355ffe	t
123	36	ruby	saddle-points	1	done	2015-06-11 04:30:06	2015-06-02 17:49:51	2015-06-02 17:49:51	483dd626a1a46cd37a798602	t
124	36	perl5	simple-cipher	2	done	2015-06-22 09:17:19.763634	2015-05-31 17:09:19	2015-05-31 17:09:19	28fe02d987b79f43015a24f3	t
125	36	scala	hamming	2	done	2015-06-05 03:20:05	2015-05-30 01:09:52	2015-05-30 01:09:52	97df1d24261842c1b4a39aeb	t
126	36	ruby	nth-prime	1	done	2015-06-03 12:42:00	2015-05-30 07:33:10	2015-05-30 07:33:10	36b0d7f2048d7237a175d170	t
135	36	ruby	raindrops	1	done	2015-05-24 03:20:51	2015-05-23 06:26:18	2015-05-23 06:26:18	e66403b8083d3216a456863a	t
127	36	ruby	anagram	1	done	2015-06-20 17:35:08	2015-06-11 23:08:51	2015-06-11 23:08:51	3c7bbdec004656346f906ffb	t
128	36	haskell	roman-numerals	1	done	2015-06-09 07:26:06	2015-06-07 09:26:08	2015-06-07 09:26:08	9e07ede42660e43a0ac6ec1f	t
137	36	javascript	nucleotide-count	1	done	2015-05-29 13:14:57	2015-05-26 21:13:48	2015-05-26 21:13:48	950d2d51fdd1f2a4c153d995	t
129	36	clojure	word-count	1	done	2015-06-12 06:33:58	2015-06-04 09:44:37	2015-06-04 09:44:37	07295052e3861d8075be99a8	t
130	36	ruby	leap	1	done	2015-06-09 13:36:27	2015-05-31 08:40:17	2015-05-31 08:40:17	c02510a7c2b9ab71989ae1c0	t
138	36	go	circular-buffer	1	done	2015-06-12 22:07:52	2015-06-09 21:38:08	2015-06-09 21:38:08	31832ba347a0f1758d0ee1f9	t
131	36	haskell	robot-name	1	done	2015-06-20 09:16:46	2015-06-10 12:19:32	2015-06-10 12:19:32	514e20a3aec33c04b40e64ab	t
132	36	javascript	beer-song	2	done	2015-06-13 03:31:23	2015-05-26 08:58:51	2015-05-26 08:58:51	ad6b40735ad0779ecdd5aeb0	t
139	36	ruby	roman-numerals	1	done	2015-06-02 15:41:44	2015-05-23 19:42:04	2015-05-23 19:42:04	6977f27dc1cef0ed097bd969	t
133	36	ruby	say	1	done	2015-06-09 11:27:51	2015-06-03 22:59:11	2015-06-03 22:59:11	2e3d339631ac464dcbdc9363	t
134	36	haskell	accumulate	2	done	2015-06-03 16:48:17	2015-05-27 06:56:17	2015-05-27 06:56:17	19eb2235ab7aae8eae4f8731	t
140	36	haskell	anagram	4	done	2015-06-09 17:16:02	2015-05-30 00:43:23	2015-05-30 00:43:23	20190b47d48d644e92f79c9c	t
141	36	python	space-age	1	done	2015-05-29 10:59:57	2015-05-25 21:25:51	2015-05-25 21:25:51	ae5e247c1695417b13177137	t
142	36	python	gigasecond	1	done	2015-06-01 13:40:48	2015-05-27 22:23:51	2015-05-27 22:23:51	0022d7429ee69ad6872f372e	t
143	36	javascript	bob	2	done	2015-06-11 01:39:32	2015-05-28 02:43:48	2015-05-28 02:43:48	30eb15533782299367d87ec6	t
144	36	python	sieve	1	done	2015-06-14 19:46:21	2015-06-05 12:01:02	2015-06-05 12:01:02	2fafc9d662bffab5a2d6ef70	t
145	36	javascript	grade-school	2	done	2015-06-15 23:41:43	2015-06-09 22:18:43	2015-06-09 22:18:43	ca7fe6a23e26256e4e872e03	t
146	36	perl5	anagram	1	done	2015-06-05 04:31:46	2015-05-27 13:53:25	2015-05-27 13:53:25	7ef82dafcd16ca434308e6c3	t
147	36	ruby	bob	1	done	2015-06-07 13:50:35	2015-06-02 22:24:30	2015-06-02 22:24:30	6e62cad9782ee442e8c7f60b	t
148	36	python	rna-transcription	1	done	2015-05-31 03:36:36	2015-05-27 17:37:46	2015-05-27 17:37:46	a360f024da78dc424f2f9d59	t
149	36	perl5	space-age	1	done	2015-06-08 09:14:40	2015-06-05 13:07:38	2015-06-05 13:07:38	73ca5696e1b4da66b125cfe8	t
150	36	ruby	grains	6	done	2015-06-06 21:16:07	2015-05-29 15:08:50	2015-05-29 15:08:50	42d1f6f79e1e625e036e7c91	t
151	36	fsharp	space-age	1	done	2015-06-02 23:41:25	2015-05-28 18:08:50	2015-05-28 18:08:50	a79bb349812027b8aabd799d	t
152	36	javascript	anagram	1	done	2015-05-28 07:25:05	2015-05-27 04:29:44	2015-05-27 04:29:44	a905933c4d5d0ff4d408ac84	t
153	36	go	accumulate	1	done	2015-05-29 16:53:12	2015-05-23 07:32:32	2015-05-23 07:32:32	276101f695ab869571858cb1	t
154	36	javascript	sieve	1	done	2015-06-15 21:43:37	2015-06-12 01:47:23	2015-06-12 01:47:23	d24560d00b23b2e238fc9d8d	t
155	36	clojure	bob	2	done	2015-06-18 06:27:26	2015-06-03 20:04:59	2015-06-03 20:04:59	be2d366cbd8953151471e059	t
156	36	ruby	nucleotide-count	3	done	2015-06-08 17:59:11	2015-06-01 00:37:19	2015-06-01 00:37:19	5e3ee59869cef2b8f7be02e2	t
157	30	ruby	bob	1	done	2015-02-11 05:42:47	2015-02-05 02:10:49	2015-02-05 02:10:49	2c0a3968ed53e725dca54ac7	t
158	35	haskell	bob	3	done	2015-06-20 06:52:12	2015-06-18 01:08:36	2015-06-18 01:08:36	f8f9bea88cdab6ce63c881ef	t
159	35	python	bob	3	done	2015-06-22 09:17:21.977317	2015-06-16 20:48:49	2015-06-16 20:48:49	ab79ac43ce681131250b8206	t
160	35	haskell	raindrops	4	done	2015-06-22 09:17:22.146881	2015-06-17 04:55:18	2015-06-17 04:55:18	f1aad119373358162b966d9a	t
161	35	elixir	raindrops	1	done	2015-06-22 09:17:22.247093	2015-06-17 03:09:41	2015-06-17 03:09:41	398146193fedc7df37991235	t
162	35	ruby	nucleotide-count	4	done	2015-06-22 09:17:22.343306	2015-06-16 19:02:49	2015-06-16 19:02:49	967c01b7e9269d0c0379ee13	t
163	14	ruby	leap	4	pending	\N	2015-03-23 09:23:39	2015-03-23 09:23:39	5da07686a365001ad471b5df	f
164	14	ruby	robot-name	3	pending	\N	2015-03-26 04:08:30	2015-03-26 04:08:30	ee0405278fed903aaca44f64	f
165	14	python	sieve	1	pending	\N	2015-05-08 03:36:23	2015-05-08 03:36:23	29cbbf6b304274bc6c365fea	f
166	14	python	bob	1	pending	\N	2015-05-19 07:20:55	2015-05-19 07:20:55	f432b26f669d85d5992d5a31	f
167	14	haskell	anagram	2	pending	\N	2015-04-09 23:53:51	2015-04-09 23:53:51	9c3476384130c3c33bd1c497	f
168	14	python	wordy	1	pending	\N	2015-04-11 11:04:48	2015-04-11 11:04:48	4b0bd9372b4dcd457cabae87	f
169	14	python	difference-of-squares	1	pending	\N	2015-04-18 16:36:50	2015-04-18 16:36:50	56e4b9600d5630b193125563	f
170	14	ruby	gigasecond	3	pending	\N	2015-04-11 14:22:58	2015-04-11 14:22:58	f6e2bba3005864abbe549e15	f
171	14	python	word-count	2	pending	\N	2015-04-01 18:46:12	2015-04-01 18:46:12	094f783509456b4508e02806	f
172	14	coffeescript	hexadecimal	2	pending	\N	2015-04-05 21:31:42	2015-04-05 21:31:42	9ef8403a13bbe6554670c80a	f
173	14	ruby	roman-numerals	1	pending	\N	2015-04-05 19:06:58	2015-04-05 19:06:58	16a9de0077f493618178543d	f
174	14	python	matrix	1	pending	\N	2015-03-18 02:01:35	2015-03-18 02:01:35	1115ee22b2815758bff3edd4	f
175	14	python	simple-cipher	2	pending	\N	2015-04-18 15:05:30	2015-04-18 15:05:30	0fd61280c871601c5c92b50d	f
176	14	go	grains	1	pending	\N	2015-04-16 21:10:25	2015-04-16 21:10:25	bea5bc309a294c35dd238502	f
177	14	python	largest-series-product	1	pending	\N	2015-03-20 00:58:08	2015-03-20 00:58:08	c159a1caca526ba2e7b4b355	f
178	14	cpp	phone-number	1	pending	\N	2015-04-28 06:37:56	2015-04-28 06:37:56	8be0d0c1d1a6b5ef53f0386c	f
179	14	scala	gigasecond	1	pending	\N	2015-04-17 15:39:26	2015-04-17 15:39:26	0303023d33e4a85bc23ee108	f
180	14	ruby	nth-prime	1	pending	\N	2015-04-05 03:16:08	2015-04-05 03:16:08	4c70c6ae39910500f35c6613	f
181	14	cpp	triangle	1	pending	\N	2015-05-07 21:09:30	2015-05-07 21:09:30	f5757d04127ff57c9340f0f7	f
182	14	clojure	raindrops	1	pending	\N	2015-06-07 19:59:43	2015-06-07 19:59:43	79b53e07e0b299300110062a	f
183	14	haskell	word-count	4	pending	\N	2015-03-21 08:21:16	2015-03-21 08:21:16	872a00ba1e8c89a0609a17d4	f
184	14	ruby	kindergarten-garden	1	pending	\N	2015-05-11 18:34:39	2015-05-11 18:34:39	d32b40040ef400afbf0649c2	f
185	14	javascript	gigasecond	1	pending	\N	2015-05-05 19:19:38	2015-05-05 19:19:38	e8253ed83257482bbda3ec45	f
186	14	javascript	bob	2	pending	\N	2015-05-23 15:37:18	2015-05-23 15:37:18	5adef2751a4a3d500f57a732	f
187	14	javascript	wordy	1	pending	\N	2015-03-18 19:27:05	2015-03-18 19:27:05	440801cc223df93e8348a08c	f
188	14	go	leap	1	pending	\N	2015-05-25 10:10:57	2015-05-25 10:10:57	0b8fd8a6ef81f87b66e74401	f
189	14	ruby	bob	1	pending	\N	2015-03-12 17:32:07	2015-03-12 17:32:07	413d5cc49eb6ec7a963f7921	f
190	14	ruby	hamming	3	pending	\N	2015-03-15 05:00:59	2015-03-15 05:00:59	fe1c20a02e2b3302111f9b3b	f
191	14	go	gigasecond	1	pending	\N	2015-03-26 10:31:05	2015-03-26 10:31:05	72e3cc77c50f26580ce13ee3	f
192	14	php	gigasecond	1	pending	\N	2015-04-11 15:21:32	2015-04-11 15:21:32	c36586bad0e8f9c615a8ea1e	f
193	14	javascript	palindrome-products	1	pending	\N	2015-03-20 10:43:33	2015-03-20 10:43:33	8e9f09543ba3b58658302f8a	f
194	14	javascript	anagram	2	pending	\N	2015-03-20 18:02:47	2015-03-20 18:02:47	a758a09d88cc91b2f860e351	f
195	14	python	hamming	1	pending	\N	2015-06-06 11:58:35	2015-06-06 11:58:35	01f6fe4a27eadcac12399ab6	f
196	14	ruby	rna-transcription	1	pending	\N	2015-06-12 11:37:59	2015-06-12 11:37:59	d7261223307fec7d838515ce	f
197	14	javascript	word-count	1	pending	\N	2015-03-12 18:53:06	2015-03-12 18:53:06	2b99461dbab32aca012977ff	f
198	41	haskell	strain	1	pending	\N	2015-02-15 16:27:51	2015-02-15 16:27:51	73c0f712018d2b26a58279ef	f
199	41	python	grade-school	1	pending	\N	2015-01-30 21:18:20	2015-01-30 21:18:20	931484cce485efb0e0aa3756	f
200	41	python	grains	1	pending	\N	2015-03-27 10:36:20	2015-03-27 10:36:20	22aa29e6a1ca2960e4059a65	f
201	41	ruby	bob	2	pending	\N	2015-01-23 09:34:39	2015-01-23 09:34:39	e2d8328d5acf81c63d0f8987	f
202	41	python	bob	1	pending	\N	2015-01-10 04:19:39	2015-01-10 04:19:39	97773832424c6e6ae4fee57a	f
203	41	ruby	raindrops	1	pending	\N	2015-04-30 18:00:50	2015-04-30 18:00:50	353503a470b65fe31798bbb6	f
204	41	python	leap	2	pending	\N	2015-03-06 11:27:40	2015-03-06 11:27:40	f8d477a20c9c96f16476632d	f
205	6	ruby	raindrops	1	pending	\N	2015-03-12 17:11:48	2015-03-12 17:11:48	dd401e82ba90e28a4a63d1d6	f
206	6	ruby	grade-school	1	pending	\N	2015-04-21 20:48:55	2015-04-21 20:48:55	beda5b7c6aa97c03d8df17c3	f
207	6	ruby	hamming	1	pending	\N	2015-04-09 06:55:06	2015-04-09 06:55:06	a0aa03c658b485438737cf83	f
208	6	python	bob	1	pending	\N	2015-04-17 23:57:16	2015-04-17 23:57:16	947ac1befe9bfe1987eb5aa7	f
209	6	javascript	hamming	1	pending	\N	2015-01-18 03:24:26	2015-01-18 03:24:26	44f62e096b63532788fdfaec	f
210	6	csharp	bob	1	pending	\N	2015-04-16 12:02:14	2015-04-16 12:02:14	1458b439c5d63f787fa3def2	f
211	34	ruby	sieve	1	pending	\N	2015-04-30 15:40:09	2015-04-30 15:40:09	479e748cc2359c8f147c1685	f
212	16	go	leap	2	pending	\N	2015-02-18 21:03:12	2015-02-18 21:03:12	13f19828ce218e653cc203bb	f
213	16	python	meetup	1	pending	\N	2015-02-13 03:54:36	2015-02-13 03:54:36	99ff13414d4924ce4c5c3dfa	f
214	16	scala	bob	2	pending	\N	2015-01-13 00:59:08	2015-01-13 00:59:08	52c0db832eb5a0bddcf28984	f
215	16	elixir	leap	1	pending	\N	2014-11-27 04:11:43	2014-11-27 04:11:43	5b2fe6634363b5935fda6055	f
216	16	python	bob	1	pending	\N	2014-11-11 07:36:33	2014-11-11 07:36:33	dd524732b3f2b81955894d00	f
217	18	coffeescript	bob	1	pending	\N	2015-05-13 08:15:54	2015-05-13 08:15:54	7bb6e1d38b1e1a52809a55f9	f
218	18	ruby	nth-prime	1	pending	\N	2015-04-26 02:48:22	2015-04-26 02:48:22	3eacd7780d926e716d171170	f
219	18	haskell	anagram	2	pending	\N	2015-04-24 09:41:33	2015-04-24 09:41:33	80a867ab4d9ea92f89957539	f
220	18	haskell	meetup	2	pending	\N	2015-05-12 03:23:11	2015-05-12 03:23:11	d749d350f33bf1950e1507ba	f
221	18	ruby	twelve-days	1	pending	\N	2015-05-11 09:00:57	2015-05-11 09:00:57	09672394d73e4635b525313d	f
222	18	ruby	pig-latin	1	pending	\N	2015-05-11 06:01:12	2015-05-11 06:01:12	6347a953923fd8142388f5e3	f
223	18	ruby	rna-transcription	1	pending	\N	2015-04-29 20:42:32	2015-04-29 20:42:32	f5f68306e2155d4a05ec5f6f	f
224	24	javascript	crypto-square	1	pending	\N	2015-06-16 07:15:37	2015-06-16 07:15:37	34d14bff4d833f3770983dd9	f
225	24	ruby	prime-factors	3	pending	\N	2015-06-07 01:18:20	2015-06-07 01:18:20	19facd49a34a765a7bac5563	f
226	24	javascript	point-mutations	1	pending	\N	2015-06-21 13:43:28	2015-06-21 13:43:28	b3e03c1cd2f87f76547020e4	f
227	24	ruby	pascals-triangle	1	pending	\N	2015-06-11 07:45:02	2015-06-11 07:45:02	81fe3048d70502f31d6521d0	f
228	42	scala	bob	2	pending	\N	2015-03-05 11:16:02	2015-03-05 11:16:02	03da5eafa03e5135ebd679ac	f
229	42	haskell	nucleotide-count	3	pending	\N	2015-02-23 04:24:09	2015-02-23 04:24:09	d2ed9dd5d6701dc850d83dd3	f
230	42	python	meetup	1	pending	\N	2015-04-29 05:52:43	2015-04-29 05:52:43	b0f2551bf27b016c10a40850	f
231	42	ruby	hamming	1	pending	\N	2015-02-27 03:02:21	2015-02-27 03:02:21	6fd506eca84841aedce720eb	f
232	42	python	gigasecond	2	pending	\N	2015-04-26 16:11:48	2015-04-26 16:11:48	f63c8de5fd89c05bea363555	f
233	42	ruby	rna-transcription	1	pending	\N	2015-05-06 23:39:56	2015-05-06 23:39:56	06af86bb48ec464c91ca5e3c	f
234	42	coffeescript	binary	1	pending	\N	2015-02-24 06:27:06	2015-02-24 06:27:06	1ec15a13c6db972f064437e9	f
235	27	elixir	etl	1	pending	\N	2015-01-30 05:08:57	2015-01-30 05:08:57	50f247e578799bdf0ca0093a	f
236	27	python	hamming	2	pending	\N	2015-02-24 10:11:47	2015-02-24 10:11:47	699babca8d6c8dc4979515c2	f
237	27	haskell	say	3	pending	\N	2015-04-02 18:32:09	2015-04-02 18:32:09	72eaae87768870997699f956	f
238	27	elixir	nucleotide-count	1	pending	\N	2015-01-16 23:37:45	2015-01-16 23:37:45	810470ed7451c94c41f3db59	f
239	27	python	bob	1	pending	\N	2015-05-24 22:28:34	2015-05-24 22:28:34	e5d25ccaaa873e75ac1356ab	f
240	27	ruby	word-count	3	pending	\N	2015-01-03 16:11:53	2015-01-03 16:11:53	bd9f34c36f2f9ae1ab40eab1	f
241	45	python	meetup	1	pending	\N	2015-02-13 11:32:42	2015-02-13 11:32:42	e8e081cb48503e57f15701fb	f
242	45	clojure	anagram	2	pending	\N	2015-04-04 21:14:34	2015-04-04 21:14:34	2bcebfcbf0a464d7328a9ef0	f
243	45	haskell	accumulate	1	pending	\N	2015-03-19 19:47:40	2015-03-19 19:47:40	342efdbfdffe802167dceb9f	f
244	45	ruby	raindrops	1	pending	\N	2015-02-21 17:25:52	2015-02-21 17:25:52	dd4ab57f0e70492f1edd67d9	f
245	45	javascript	bob	1	pending	\N	2015-03-09 22:32:07	2015-03-09 22:32:07	f07ebcbbdaa184ca3589500a	f
246	45	elixir	rna-transcription	1	pending	\N	2015-04-21 10:20:17	2015-04-21 10:20:17	270a82c2e0fd7c76e5097884	f
247	45	haskell	leap	4	pending	\N	2015-03-23 03:22:00	2015-03-23 03:22:00	c17cea45e847977d53538e48	f
248	45	swift	leap	1	pending	\N	2015-04-30 16:36:45	2015-04-30 16:36:45	d13c90ef90c4ccc95532956d	f
249	45	go	etl	2	pending	\N	2015-02-22 14:03:36	2015-02-22 14:03:36	7bf5f6bec9361bfad7d035b9	f
250	45	perl5	word-count	1	pending	\N	2015-04-28 05:51:10	2015-04-28 05:51:10	c531fa8ed80d34b7fccaa5c7	f
251	45	clojure	robot-name	1	pending	\N	2015-04-10 09:57:16	2015-04-10 09:57:16	b843aced1a0d69b18c426137	f
252	45	python	largest-series-product	1	pending	\N	2015-03-19 00:35:10	2015-03-19 00:35:10	90a34cfad10dc9c0afffae3e	f
253	45	python	word-count	2	pending	\N	2015-03-29 22:38:05	2015-03-29 22:38:05	061d7c632a2a35b491e07d98	f
254	45	clojure	bob	1	pending	\N	2015-03-06 14:03:00	2015-03-06 14:03:00	69bfe52a94d7495d3ee71cc9	f
255	45	ruby	nucleotide-count	2	pending	\N	2015-02-25 00:41:12	2015-02-25 00:41:12	5a7f41829a91061c136bab88	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 255, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	lge105	--- []\n	2014-10-12 07:01:57.501389	2014-10-12 07:01:57.501389	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg	-27690	vnc425	--- []\n	2015-01-16 14:10:47.527102	2015-01-16 14:10:47.527102	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg	-99457	opp335	--- []\n	2014-11-02 01:54:20.529581	2014-11-02 01:54:20.529581	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg	-91979	sin945	--- []\n	2014-10-03 03:25:35.532305	2014-10-03 03:25:35.532305	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg	-78739	qen354	--- []\n	2015-02-17 23:44:07.538166	2015-02-17 23:44:07.538166	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg	-86379	ixu848	--- []\n	2015-05-03 10:29:48.545363	2015-05-03 10:29:48.545363	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg	-52279	akt464	--- []\n	2015-03-08 18:56:39.546955	2015-03-08 18:56:39.546955	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg	-92110	pev111	--- []\n	2014-11-01 02:03:02.552585	2014-11-01 02:03:02.552585	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg	-19070	zgv415	--- []\n	2015-02-24 04:26:13.555349	2015-02-24 04:26:13.555349	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg	-68365	doq678	--- []\n	2015-04-19 16:13:04.557884	2015-04-19 16:13:04.557884	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg	-64681	fjd907	--- []\n	2015-04-10 14:52:23.560375	2015-04-10 14:52:23.560375	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg	-98940	atc228	--- []\n	2015-04-03 17:24:20.562897	2015-04-03 17:24:20.562897	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg	-12657	hmx683	--- []\n	2014-10-11 01:10:52.565479	2014-10-11 01:10:52.565479	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg	-39779	zru767	--- []\n	2015-06-19 09:39:44.571896	2015-06-19 09:39:44.571896	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg	-34811	yav409	--- []\n	2015-06-06 09:53:53.57673	2015-06-06 09:53:53.57673	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg	-96487	jgn911	--- []\n	2014-11-30 08:58:55.579633	2014-11-30 08:58:55.579633	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg	-72697	nmz657	--- []\n	2014-10-02 05:24:47.582429	2014-10-02 05:24:47.582429	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg	-57448	gli201	--- []\n	2014-12-28 17:02:11.585458	2014-12-28 17:02:11.585458	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg	-75869	fyj651	--- []\n	2014-12-19 00:04:45.59347	2014-12-19 00:04:45.59347	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg	-95911	fxo607	--- []\n	2015-06-17 13:27:16.598771	2015-06-17 13:27:16.598771	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg	-68362	ned964	--- []\n	2015-04-19 12:15:09.605029	2015-04-19 12:15:09.605029	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg	-26785	yxf958	--- []\n	2015-06-16 17:21:28.607825	2015-06-16 17:21:28.607825	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg	-62921	rum258	--- []\n	2015-05-23 03:10:47.610283	2015-05-23 03:10:47.610283	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg	-37547	aep955	--- []\n	2015-01-15 17:21:24.61271	2015-01-15 17:21:24.61271	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg	-96728	yts942	--- []\n	2015-04-25 01:06:46.617772	2015-04-25 01:06:46.617772	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg	-47417	kut324	--- []\n	2015-01-09 03:46:40.621914	2015-01-09 03:46:40.621914	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg	-92152	vxw593	--- []\n	2015-02-13 00:19:08.62433	2015-02-13 00:19:08.62433	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg	-77579	fnc176	--- []\n	2015-03-01 16:36:48.626738	2015-03-01 16:36:48.626738	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg	-45219	rcv875	--- []\n	2015-02-07 23:45:47.63152	2015-02-07 23:45:47.63152	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg	-74087	arp826	--- []\n	2015-04-30 13:33:13.636261	2015-04-30 13:33:13.636261	\N
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg	-70679	oll712	--- []\n	2014-10-04 11:26:16.549427	2014-10-04 11:26:16.549427	2014-12-11 04:58:18
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg	-85768	unh925	--- []\n	2015-06-06 09:10:07.534448	2015-06-06 09:10:07.534448	2015-01-10 08:40:52
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg	-49709	jsm348	--- []\n	2014-10-22 05:56:53.601893	2014-10-22 05:56:53.601893	2015-03-28 11:57:26
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg	-31439	duj503	--- []\n	2015-02-26 03:02:14.615307	2015-02-26 03:02:14.615307	2015-01-12 23:44:40
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg	-79734	cnn962	--- []\n	2015-01-28 10:39:46.588263	2015-01-28 10:39:46.588263	2015-01-13 22:36:51
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg	-54049	xsp871	--- []\n	2014-12-02 00:58:50.640441	2014-12-02 00:58:50.640441	\N
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg	-51665	wup339	--- []\n	2014-12-17 18:38:09.540146	2014-12-17 18:38:09.540146	2015-01-06 01:42:46
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg	-80722	fnz891	---\n- javascript\n- erlang\n- elixir\n	2015-01-07 13:39:00.523317	2015-01-07 13:39:00.523317	2015-03-06 00:18:40
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg	-89328	lqs393	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2015-05-28 12:00:01.518245	2015-05-28 12:00:01.518245	2015-01-30 10:43:44
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg	-40563	isc925	---\n- ruby\n- haskell\n	2015-02-23 07:20:58.521039	2015-02-23 07:20:58.521039	2015-01-11 21:02:32
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg	-17927	ilv723	--- []\n	2015-06-21 00:19:48.590926	2015-06-21 00:19:48.590926	2015-01-16 12:41:05
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg	-90290	fzw822	--- []\n	2014-12-21 13:16:32.542828	2014-12-21 13:16:32.542828	2015-02-20 10:27:44
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg	-14162	hrv981	--- []\n	2014-10-11 07:40:58.568746	2014-10-11 07:40:58.568746	2015-02-26 02:26:09
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg	-76894	cij194	--- []\n	2015-02-26 18:10:14.619461	2015-02-26 18:10:14.619461	2015-01-04 23:50:06
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg	-95291	lae707	--- []\n	2014-10-05 15:52:27.633893	2014-10-05 15:52:27.633893	2015-02-19 16:30:12
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg	-60770	sqh334	--- []\n	2015-02-08 22:16:48.637797	2015-02-08 22:16:48.637797	2015-02-02 22:28:58
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg	-72561	pvv465	---\n- python\n	2015-02-02 07:02:05.525355	2015-02-02 07:02:05.525355	2015-01-16 16:33:00
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg	-65448	mgp488	--- []\n	2015-06-05 20:02:25.595985	2015-06-05 20:02:25.595985	2015-02-19 05:37:07
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg	-57107	xno360	--- []\n	2015-04-05 12:07:42.62912	2015-04-05 12:07:42.62912	2015-03-16 02:26:01
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- PostgreSQL database dump complete
--

