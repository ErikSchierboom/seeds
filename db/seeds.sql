--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-18 01:05:34	2014-03-18 01:05:34
2	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-06-12 09:27:14	2014-06-12 09:27:14
3	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-06-26 23:54:42	2014-06-26 23:54:42
4	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-04-06 13:03:52	2014-04-06 13:03:52
5	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-05-27 10:36:56	2014-05-27 10:36:56
6	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-11 16:11:51	2014-07-11 16:11:51
7	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-07 03:16:25	2014-07-07 03:16:25
8	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-04-11 14:35:57	2014-04-11 14:35:57
9	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-06-28 20:51:36	2014-06-28 20:51:36
10	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-06-21 20:14:10	2014-06-21 20:14:10
11	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-06-24 05:16:55	2014-06-24 05:16:55
12	2	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-06-21 11:45:06	2014-06-21 11:45:06
13	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-06-21 16:19:24	2014-06-21 16:19:24
14	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-04-29 03:45:39	2014-04-29 03:45:39
15	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-05-12 09:37:26	2014-05-12 09:37:26
16	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-24 00:47:08	2014-07-24 00:47:08
17	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-26 12:02:37	2014-07-26 12:02:37
18	2	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-24 06:18:17	2014-07-24 06:18:17
19	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-04-02 04:33:47	2014-04-02 04:33:47
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	32	1	A COMMENT	\N	2014-07-10 20:44:49	2014-07-10 20:44:49
2	14	2	A COMMENT	\N	2014-07-13 04:43:30	2014-07-13 04:43:30
3	11	2	A COMMENT	\N	2014-07-15 17:14:04	2014-07-15 17:14:04
4	32	2	A COMMENT	\N	2014-07-16 01:40:18	2014-07-16 01:40:18
5	1	2	A COMMENT	\N	2014-07-16 11:34:26	2014-07-16 11:34:26
6	37	2	A COMMENT	\N	2014-07-21 06:41:48	2014-07-21 06:41:48
7	4	2	A COMMENT	\N	2014-07-21 06:55:00	2014-07-21 06:55:00
8	30	2	A COMMENT	\N	2014-07-24 22:29:33	2014-07-24 22:29:33
9	2	2	A COMMENT	\N	2014-07-26 15:56:31	2014-07-26 15:56:31
10	10	3	A COMMENT	\N	2014-06-28 15:50:57	2014-06-28 15:50:57
11	3	3	A COMMENT	\N	2014-07-02 10:50:36	2014-07-02 10:50:36
12	8	3	A COMMENT	\N	2014-07-02 15:54:50	2014-07-02 15:54:50
13	39	3	A COMMENT	\N	2014-07-03 09:35:08	2014-07-03 09:35:08
14	47	3	A COMMENT	\N	2014-07-04 19:23:24	2014-07-04 19:23:24
15	45	3	A COMMENT	\N	2014-07-05 13:33:15	2014-07-05 13:33:15
16	47	3	A COMMENT	\N	2014-07-06 01:35:31	2014-07-06 01:35:31
17	11	3	A COMMENT	\N	2014-07-07 15:22:22	2014-07-07 15:22:22
18	21	3	A COMMENT	\N	2014-07-10 10:08:59	2014-07-10 10:08:59
19	8	3	A COMMENT	\N	2014-07-10 23:37:25	2014-07-10 23:37:25
20	43	3	A COMMENT	\N	2014-07-14 03:40:19	2014-07-14 03:40:19
21	27	3	A COMMENT	\N	2014-07-14 17:00:53	2014-07-14 17:00:53
22	37	3	A COMMENT	\N	2014-07-16 17:32:56	2014-07-16 17:32:56
23	3	3	A COMMENT	\N	2014-07-19 02:03:13	2014-07-19 02:03:13
24	11	3	A COMMENT	\N	2014-07-19 08:35:41	2014-07-19 08:35:41
25	10	4	A COMMENT	\N	2014-07-08 05:36:05	2014-07-08 05:36:05
26	21	4	A COMMENT	\N	2014-07-09 02:46:23	2014-07-09 02:46:23
27	37	4	A COMMENT	\N	2014-07-10 01:48:13	2014-07-10 01:48:13
28	14	4	A COMMENT	\N	2014-07-10 12:21:28	2014-07-10 12:21:28
29	8	4	A COMMENT	\N	2014-07-10 16:06:01	2014-07-10 16:06:01
30	47	4	A COMMENT	\N	2014-07-10 23:17:41	2014-07-10 23:17:41
31	8	4	A COMMENT	\N	2014-07-11 04:22:55	2014-07-11 04:22:55
32	2	4	A COMMENT	\N	2014-07-12 04:47:48	2014-07-12 04:47:48
33	27	4	A COMMENT	\N	2014-07-15 05:47:58	2014-07-15 05:47:58
34	30	4	A COMMENT	\N	2014-07-16 05:20:58	2014-07-16 05:20:58
35	11	4	A COMMENT	\N	2014-07-16 20:28:13	2014-07-16 20:28:13
36	28	4	A COMMENT	\N	2014-07-20 00:27:23	2014-07-20 00:27:23
37	27	4	A COMMENT	\N	2014-07-20 03:35:42	2014-07-20 03:35:42
38	39	4	A COMMENT	\N	2014-07-22 14:07:27	2014-07-22 14:07:27
39	28	4	A COMMENT	\N	2014-07-23 01:58:51	2014-07-23 01:58:51
40	4	4	A COMMENT	\N	2014-07-23 04:04:23	2014-07-23 04:04:23
41	39	4	A COMMENT	\N	2014-07-23 10:01:12	2014-07-23 10:01:12
42	32	4	A COMMENT	\N	2014-07-25 17:21:30	2014-07-25 17:21:30
43	27	5	A COMMENT	\N	2014-07-12 22:46:43	2014-07-12 22:46:43
44	45	5	A COMMENT	\N	2014-07-22 06:05:10	2014-07-22 06:05:10
45	45	7	A COMMENT	\N	2014-07-24 17:22:43	2014-07-24 17:22:43
46	30	7	A COMMENT	\N	2014-07-26 03:29:47	2014-07-26 03:29:47
47	39	7	A COMMENT	\N	2014-07-26 17:13:16	2014-07-26 17:13:16
48	10	9	A COMMENT	\N	2014-07-04 02:31:11	2014-07-04 02:31:11
49	39	9	A COMMENT	\N	2014-07-18 18:45:42	2014-07-18 18:45:42
50	47	9	A COMMENT	\N	2014-07-22 16:21:40	2014-07-22 16:21:40
51	10	10	A COMMENT	\N	2014-07-05 06:16:18	2014-07-05 06:16:18
52	1	10	A COMMENT	\N	2014-07-21 19:51:44	2014-07-21 19:51:44
53	14	11	A COMMENT	\N	2014-07-10 15:37:51	2014-07-10 15:37:51
54	11	11	A COMMENT	\N	2014-07-18 11:10:36	2014-07-18 11:10:36
55	10	11	A COMMENT	\N	2014-07-23 22:26:09	2014-07-23 22:26:09
56	32	12	A COMMENT	\N	2014-06-27 10:20:59	2014-06-27 10:20:59
57	37	12	A COMMENT	\N	2014-06-30 09:17:03	2014-06-30 09:17:03
58	30	12	A COMMENT	\N	2014-07-06 12:17:53	2014-07-06 12:17:53
59	4	12	A COMMENT	\N	2014-07-09 19:17:53	2014-07-09 19:17:53
60	32	12	A COMMENT	\N	2014-07-10 10:26:45	2014-07-10 10:26:45
61	21	12	A COMMENT	\N	2014-07-13 04:34:23	2014-07-13 04:34:23
62	11	12	A COMMENT	\N	2014-07-14 06:35:58	2014-07-14 06:35:58
63	37	12	A COMMENT	\N	2014-07-19 21:12:29	2014-07-19 21:12:29
64	28	12	A COMMENT	\N	2014-07-20 18:37:01	2014-07-20 18:37:01
65	39	12	A COMMENT	\N	2014-07-23 01:34:59	2014-07-23 01:34:59
66	27	12	A COMMENT	\N	2014-07-24 18:39:49	2014-07-24 18:39:49
67	30	12	A COMMENT	\N	2014-07-25 00:08:54	2014-07-25 00:08:54
68	3	12	A COMMENT	\N	2014-07-25 15:21:59	2014-07-25 15:21:59
69	8	13	A COMMENT	\N	2014-07-22 14:00:06	2014-07-22 14:00:06
70	30	13	A COMMENT	\N	2014-07-23 08:14:26	2014-07-23 08:14:26
71	27	14	A COMMENT	\N	2014-07-17 08:58:03	2014-07-17 08:58:03
72	4	14	A COMMENT	\N	2014-07-20 08:57:11	2014-07-20 08:57:11
73	32	15	A COMMENT	\N	2014-07-14 23:38:15	2014-07-14 23:38:15
74	47	15	A COMMENT	\N	2014-07-17 16:05:42	2014-07-17 16:05:42
75	14	15	A COMMENT	\N	2014-07-18 05:02:34	2014-07-18 05:02:34
76	1	15	A COMMENT	\N	2014-07-25 11:12:11	2014-07-25 11:12:11
77	32	16	A COMMENT	\N	2014-07-04 02:26:35	2014-07-04 02:26:35
78	30	16	A COMMENT	\N	2014-07-09 09:27:03	2014-07-09 09:27:03
79	28	16	A COMMENT	\N	2014-07-10 07:24:43	2014-07-10 07:24:43
80	37	16	A COMMENT	\N	2014-07-16 00:37:08	2014-07-16 00:37:08
81	43	16	A COMMENT	\N	2014-07-19 05:20:54	2014-07-19 05:20:54
82	37	16	A COMMENT	\N	2014-07-20 10:53:23	2014-07-20 10:53:23
83	30	16	A COMMENT	\N	2014-07-24 17:15:33	2014-07-24 17:15:33
84	45	18	A COMMENT	\N	2014-04-05 11:38:35	2014-04-05 11:38:35
85	1	18	A COMMENT	\N	2014-04-08 18:19:32	2014-04-08 18:19:32
86	47	18	A COMMENT	\N	2014-04-09 23:08:57	2014-04-09 23:08:57
87	37	18	A COMMENT	\N	2014-05-18 16:03:52	2014-05-18 16:03:52
88	30	18	A COMMENT	\N	2014-05-31 11:11:46	2014-05-31 11:11:46
89	11	19	A COMMENT	\N	2014-04-06 20:51:36	2014-04-06 20:51:36
90	30	19	A COMMENT	\N	2014-04-08 02:38:31	2014-04-08 02:38:31
91	47	19	A COMMENT	\N	2014-05-02 19:59:30	2014-05-02 19:59:30
92	27	19	A COMMENT	\N	2014-05-20 13:57:08	2014-05-20 13:57:08
93	30	19	A COMMENT	\N	2014-05-20 22:53:15	2014-05-20 22:53:15
94	10	19	A COMMENT	\N	2014-06-01 06:01:20	2014-06-01 06:01:20
95	28	19	A COMMENT	\N	2014-06-17 05:37:12	2014-06-17 05:37:12
96	39	20	A COMMENT	\N	2014-05-05 18:35:54	2014-05-05 18:35:54
97	30	20	A COMMENT	\N	2014-05-12 22:40:04	2014-05-12 22:40:04
98	30	20	A COMMENT	\N	2014-05-22 16:50:27	2014-05-22 16:50:27
99	32	20	A COMMENT	\N	2014-06-06 08:25:12	2014-06-06 08:25:12
100	43	20	A COMMENT	\N	2014-06-10 18:10:07	2014-06-10 18:10:07
101	2	20	A COMMENT	\N	2014-06-24 03:38:30	2014-06-24 03:38:30
102	8	20	A COMMENT	\N	2014-06-29 05:43:41	2014-06-29 05:43:41
103	27	20	A COMMENT	\N	2014-07-03 00:39:27	2014-07-03 00:39:27
104	28	20	A COMMENT	\N	2014-07-23 07:51:10	2014-07-23 07:51:10
105	3	21	A COMMENT	\N	2014-03-18 10:00:10	2014-03-18 10:00:10
106	21	21	A COMMENT	\N	2014-04-09 02:47:13	2014-04-09 02:47:13
107	37	21	A COMMENT	\N	2014-04-25 13:37:16	2014-04-25 13:37:16
108	1	21	A COMMENT	\N	2014-04-30 10:46:02	2014-04-30 10:46:02
109	8	21	A COMMENT	\N	2014-05-01 19:25:29	2014-05-01 19:25:29
110	39	21	A COMMENT	\N	2014-05-17 14:01:27	2014-05-17 14:01:27
111	10	21	A COMMENT	\N	2014-05-19 17:17:25	2014-05-19 17:17:25
112	11	21	A COMMENT	\N	2014-05-22 14:43:24	2014-05-22 14:43:24
113	47	21	A COMMENT	\N	2014-06-09 09:25:25	2014-06-09 09:25:25
114	27	21	A COMMENT	\N	2014-06-18 21:58:09	2014-06-18 21:58:09
115	4	21	A COMMENT	\N	2014-06-26 19:45:14	2014-06-26 19:45:14
116	2	21	A COMMENT	\N	2014-07-08 20:18:22	2014-07-08 20:18:22
117	3	21	A COMMENT	\N	2014-07-17 21:22:49	2014-07-17 21:22:49
118	30	21	A COMMENT	\N	2014-07-18 22:15:10	2014-07-18 22:15:10
119	37	21	A COMMENT	\N	2014-07-22 10:43:34	2014-07-22 10:43:34
120	28	21	A COMMENT	\N	2014-07-25 22:15:06	2014-07-25 22:15:06
121	27	22	A COMMENT	\N	2014-06-27 19:09:36	2014-06-27 19:09:36
122	32	23	A COMMENT	\N	2014-05-05 04:18:51	2014-05-05 04:18:51
123	27	23	A COMMENT	\N	2014-05-06 22:22:26	2014-05-06 22:22:26
124	2	23	A COMMENT	\N	2014-05-26 08:04:05	2014-05-26 08:04:05
125	30	23	A COMMENT	\N	2014-06-11 11:16:30	2014-06-11 11:16:30
126	47	23	A COMMENT	\N	2014-06-17 10:19:35	2014-06-17 10:19:35
127	47	23	A COMMENT	\N	2014-06-23 23:41:47	2014-06-23 23:41:47
128	4	23	A COMMENT	\N	2014-07-06 16:46:30	2014-07-06 16:46:30
129	4	23	A COMMENT	\N	2014-07-06 20:59:12	2014-07-06 20:59:12
130	11	24	A COMMENT	\N	2014-04-13 22:58:52	2014-04-13 22:58:52
131	32	24	A COMMENT	\N	2014-04-13 23:25:09	2014-04-13 23:25:09
132	47	24	A COMMENT	\N	2014-05-22 00:58:02	2014-05-22 00:58:02
133	37	24	A COMMENT	\N	2014-05-29 07:41:17	2014-05-29 07:41:17
134	30	24	A COMMENT	\N	2014-06-30 10:45:26	2014-06-30 10:45:26
135	14	24	A COMMENT	\N	2014-07-22 05:52:31	2014-07-22 05:52:31
136	2	25	A COMMENT	\N	2014-05-03 15:42:51	2014-05-03 15:42:51
137	28	25	A COMMENT	\N	2014-05-13 04:05:56	2014-05-13 04:05:56
138	10	25	A COMMENT	\N	2014-05-17 09:10:42	2014-05-17 09:10:42
139	2	25	A COMMENT	\N	2014-05-26 19:05:55	2014-05-26 19:05:55
140	30	25	A COMMENT	\N	2014-06-16 12:47:43	2014-06-16 12:47:43
141	4	25	A COMMENT	\N	2014-07-10 00:46:29	2014-07-10 00:46:29
142	32	25	A COMMENT	\N	2014-07-22 18:31:29	2014-07-22 18:31:29
143	43	26	A COMMENT	\N	2014-03-31 16:41:59	2014-03-31 16:41:59
144	28	26	A COMMENT	\N	2014-04-07 20:13:50	2014-04-07 20:13:50
145	32	26	A COMMENT	\N	2014-04-29 17:50:18	2014-04-29 17:50:18
146	3	26	A COMMENT	\N	2014-05-24 21:45:37	2014-05-24 21:45:37
147	14	27	A COMMENT	\N	2014-02-22 23:03:33	2014-02-22 23:03:33
148	14	27	A COMMENT	\N	2014-05-21 07:59:30	2014-05-21 07:59:30
149	14	28	A COMMENT	\N	2014-03-07 07:34:21	2014-03-07 07:34:21
150	21	28	A COMMENT	\N	2014-05-12 01:51:54	2014-05-12 01:51:54
151	4	28	A COMMENT	\N	2014-05-28 16:08:44	2014-05-28 16:08:44
152	21	28	A COMMENT	\N	2014-06-18 13:12:52	2014-06-18 13:12:52
153	4	28	A COMMENT	\N	2014-06-30 17:45:29	2014-06-30 17:45:29
154	21	29	A COMMENT	\N	2014-04-05 08:54:38	2014-04-05 08:54:38
155	1	29	A COMMENT	\N	2014-04-18 19:25:25	2014-04-18 19:25:25
156	1	29	A COMMENT	\N	2014-04-29 22:09:25	2014-04-29 22:09:25
157	45	29	A COMMENT	\N	2014-05-11 12:59:49	2014-05-11 12:59:49
158	37	29	A COMMENT	\N	2014-06-22 12:07:49	2014-06-22 12:07:49
159	28	29	A COMMENT	\N	2014-07-24 19:30:06	2014-07-24 19:30:06
160	8	31	A COMMENT	\N	2014-06-06 07:50:03	2014-06-06 07:50:03
161	43	31	A COMMENT	\N	2014-07-06 05:31:41	2014-07-06 05:31:41
162	21	32	A COMMENT	\N	2014-03-28 06:34:49	2014-03-28 06:34:49
163	32	32	A COMMENT	\N	2014-03-30 19:53:29	2014-03-30 19:53:29
164	27	32	A COMMENT	\N	2014-04-05 23:37:28	2014-04-05 23:37:28
165	37	32	A COMMENT	\N	2014-04-16 11:38:06	2014-04-16 11:38:06
166	14	32	A COMMENT	\N	2014-04-25 19:37:08	2014-04-25 19:37:08
167	1	32	A COMMENT	\N	2014-04-27 17:29:51	2014-04-27 17:29:51
168	21	32	A COMMENT	\N	2014-04-27 18:26:43	2014-04-27 18:26:43
169	14	32	A COMMENT	\N	2014-04-28 22:41:26	2014-04-28 22:41:26
170	21	32	A COMMENT	\N	2014-04-29 19:42:01	2014-04-29 19:42:01
171	39	32	A COMMENT	\N	2014-05-21 09:19:36	2014-05-21 09:19:36
172	10	32	A COMMENT	\N	2014-07-02 13:34:32	2014-07-02 13:34:32
173	37	32	A COMMENT	\N	2014-07-08 16:02:27	2014-07-08 16:02:27
174	8	32	A COMMENT	\N	2014-07-11 17:22:05	2014-07-11 17:22:05
175	1	33	A COMMENT	\N	2014-07-07 11:23:51	2014-07-07 11:23:51
176	1	34	A COMMENT	\N	2014-06-05 20:53:23	2014-06-05 20:53:23
177	47	34	A COMMENT	\N	2014-06-11 13:47:16	2014-06-11 13:47:16
178	43	34	A COMMENT	\N	2014-06-13 11:36:21	2014-06-13 11:36:21
179	14	34	A COMMENT	\N	2014-06-25 20:43:10	2014-06-25 20:43:10
180	2	34	A COMMENT	\N	2014-06-28 16:17:30	2014-06-28 16:17:30
181	47	34	A COMMENT	\N	2014-07-02 01:04:11	2014-07-02 01:04:11
182	11	34	A COMMENT	\N	2014-07-09 08:43:27	2014-07-09 08:43:27
183	39	34	A COMMENT	\N	2014-07-18 10:03:10	2014-07-18 10:03:10
184	45	34	A COMMENT	\N	2014-07-19 13:30:30	2014-07-19 13:30:30
185	10	34	A COMMENT	\N	2014-07-21 12:34:33	2014-07-21 12:34:33
186	21	35	A COMMENT	\N	2014-03-08 11:39:47	2014-03-08 11:39:47
187	21	36	A COMMENT	\N	2014-02-25 10:38:24	2014-02-25 10:38:24
188	30	36	A COMMENT	\N	2014-04-06 15:29:54	2014-04-06 15:29:54
189	4	36	A COMMENT	\N	2014-05-02 13:36:45	2014-05-02 13:36:45
190	8	36	A COMMENT	\N	2014-05-27 10:35:53	2014-05-27 10:35:53
191	37	36	A COMMENT	\N	2014-06-05 13:58:41	2014-06-05 13:58:41
192	21	36	A COMMENT	\N	2014-07-15 03:58:51	2014-07-15 03:58:51
193	21	37	A COMMENT	\N	2014-04-17 14:44:38	2014-04-17 14:44:38
194	3	37	A COMMENT	\N	2014-04-17 15:36:11	2014-04-17 15:36:11
195	45	37	A COMMENT	\N	2014-06-22 17:55:53	2014-06-22 17:55:53
196	32	37	A COMMENT	\N	2014-07-09 00:20:34	2014-07-09 00:20:34
197	4	40	A COMMENT	\N	2014-04-09 02:56:47	2014-04-09 02:56:47
198	45	40	A COMMENT	\N	2014-04-15 10:45:40	2014-04-15 10:45:40
199	37	40	A COMMENT	\N	2014-04-30 11:46:08	2014-04-30 11:46:08
200	21	42	A COMMENT	\N	2014-06-02 02:51:52	2014-06-02 02:51:52
201	10	42	A COMMENT	\N	2014-07-07 04:06:50	2014-07-07 04:06:50
202	47	42	A COMMENT	\N	2014-07-07 17:02:26	2014-07-07 17:02:26
203	37	43	A COMMENT	\N	2014-07-02 19:29:19	2014-07-02 19:29:19
204	37	43	A COMMENT	\N	2014-07-16 08:51:40	2014-07-16 08:51:40
205	21	44	A COMMENT	\N	2014-02-17 10:28:30	2014-02-17 10:28:30
206	43	44	A COMMENT	\N	2014-03-12 18:34:11	2014-03-12 18:34:11
207	4	44	A COMMENT	\N	2014-03-15 10:49:41	2014-03-15 10:49:41
208	11	44	A COMMENT	\N	2014-03-18 07:16:35	2014-03-18 07:16:35
209	1	44	A COMMENT	\N	2014-04-17 04:05:29	2014-04-17 04:05:29
210	11	44	A COMMENT	\N	2014-05-31 01:09:35	2014-05-31 01:09:35
211	10	44	A COMMENT	\N	2014-07-09 03:19:59	2014-07-09 03:19:59
212	30	44	A COMMENT	\N	2014-07-26 04:01:38	2014-07-26 04:01:38
213	32	45	A COMMENT	\N	2014-06-05 22:24:58	2014-06-05 22:24:58
214	43	45	A COMMENT	\N	2014-06-12 00:35:13	2014-06-12 00:35:13
215	32	45	A COMMENT	\N	2014-06-19 02:12:58	2014-06-19 02:12:58
216	21	45	A COMMENT	\N	2014-06-27 17:41:26	2014-06-27 17:41:26
217	10	45	A COMMENT	\N	2014-06-28 22:07:52	2014-06-28 22:07:52
218	30	45	A COMMENT	\N	2014-07-09 20:45:23	2014-07-09 20:45:23
219	11	45	A COMMENT	\N	2014-07-12 17:03:34	2014-07-12 17:03:34
220	37	45	A COMMENT	\N	2014-07-14 08:28:35	2014-07-14 08:28:35
221	1	45	A COMMENT	\N	2014-07-23 18:02:53	2014-07-23 18:02:53
222	47	45	A COMMENT	\N	2014-07-25 17:31:45	2014-07-25 17:31:45
223	30	46	A COMMENT	\N	2014-07-19 03:28:01	2014-07-19 03:28:01
224	2	46	A COMMENT	\N	2014-07-20 02:07:09	2014-07-20 02:07:09
225	1	46	A COMMENT	\N	2014-07-24 05:44:00	2014-07-24 05:44:00
226	4	46	A COMMENT	\N	2014-07-25 16:07:31	2014-07-25 16:07:31
227	43	46	A COMMENT	\N	2014-07-26 20:27:36	2014-07-26 20:27:36
228	21	47	A COMMENT	\N	2014-07-16 21:54:57	2014-07-16 21:54:57
229	28	47	A COMMENT	\N	2014-07-18 00:44:08	2014-07-18 00:44:08
230	8	47	A COMMENT	\N	2014-07-18 17:26:56	2014-07-18 17:26:56
231	30	47	A COMMENT	\N	2014-07-22 16:12:43	2014-07-22 16:12:43
232	10	47	A COMMENT	\N	2014-07-25 08:50:13	2014-07-25 08:50:13
233	8	47	A COMMENT	\N	2014-07-26 11:29:28	2014-07-26 11:29:28
234	27	48	A COMMENT	\N	2014-07-18 02:04:26	2014-07-18 02:04:26
235	27	48	A COMMENT	\N	2014-07-18 06:26:05	2014-07-18 06:26:05
236	11	48	A COMMENT	\N	2014-07-18 08:48:39	2014-07-18 08:48:39
237	47	48	A COMMENT	\N	2014-07-20 14:28:02	2014-07-20 14:28:02
238	10	48	A COMMENT	\N	2014-07-20 21:46:31	2014-07-20 21:46:31
239	1	48	A COMMENT	\N	2014-07-20 23:07:27	2014-07-20 23:07:27
240	30	48	A COMMENT	\N	2014-07-22 01:44:11	2014-07-22 01:44:11
241	32	48	A COMMENT	\N	2014-07-22 15:55:19	2014-07-22 15:55:19
242	30	48	A COMMENT	\N	2014-07-23 14:47:27	2014-07-23 14:47:27
243	14	48	A COMMENT	\N	2014-07-24 06:20:56	2014-07-24 06:20:56
244	1	48	A COMMENT	\N	2014-07-25 12:41:05	2014-07-25 12:41:05
245	21	48	A COMMENT	\N	2014-07-25 13:44:17	2014-07-25 13:44:17
246	30	49	A COMMENT	\N	2014-07-16 17:45:03	2014-07-16 17:45:03
247	43	49	A COMMENT	\N	2014-07-17 18:49:04	2014-07-17 18:49:04
248	2	49	A COMMENT	\N	2014-07-19 04:59:10	2014-07-19 04:59:10
249	8	49	A COMMENT	\N	2014-07-20 23:49:06	2014-07-20 23:49:06
250	1	49	A COMMENT	\N	2014-07-21 07:06:40	2014-07-21 07:06:40
251	27	50	A COMMENT	\N	2014-07-19 22:44:24	2014-07-19 22:44:24
252	30	50	A COMMENT	\N	2014-07-20 00:23:16	2014-07-20 00:23:16
253	47	51	A COMMENT	\N	2014-07-21 04:23:47	2014-07-21 04:23:47
254	27	51	A COMMENT	\N	2014-07-21 10:38:55	2014-07-21 10:38:55
255	11	51	A COMMENT	\N	2014-07-23 02:06:11	2014-07-23 02:06:11
256	2	51	A COMMENT	\N	2014-07-23 05:32:16	2014-07-23 05:32:16
257	8	51	A COMMENT	\N	2014-07-26 19:51:14	2014-07-26 19:51:14
258	27	52	A COMMENT	\N	2014-07-22 02:17:09	2014-07-22 02:17:09
259	32	52	A COMMENT	\N	2014-07-22 06:49:44	2014-07-22 06:49:44
260	4	52	A COMMENT	\N	2014-07-22 21:33:19	2014-07-22 21:33:19
261	45	52	A COMMENT	\N	2014-07-23 12:02:23	2014-07-23 12:02:23
262	4	52	A COMMENT	\N	2014-07-23 21:27:54	2014-07-23 21:27:54
263	43	52	A COMMENT	\N	2014-07-24 00:28:43	2014-07-24 00:28:43
264	2	52	A COMMENT	\N	2014-07-24 06:36:18	2014-07-24 06:36:18
265	27	53	A COMMENT	\N	2014-07-13 16:59:36	2014-07-13 16:59:36
266	45	53	A COMMENT	\N	2014-07-14 21:31:46	2014-07-14 21:31:46
267	10	53	A COMMENT	\N	2014-07-19 07:27:12	2014-07-19 07:27:12
268	47	53	A COMMENT	\N	2014-07-20 01:01:59	2014-07-20 01:01:59
269	8	53	A COMMENT	\N	2014-07-24 04:43:36	2014-07-24 04:43:36
270	32	53	A COMMENT	\N	2014-07-26 17:05:28	2014-07-26 17:05:28
271	8	54	A COMMENT	\N	2014-07-21 18:41:16	2014-07-21 18:41:16
272	28	54	A COMMENT	\N	2014-07-21 23:04:35	2014-07-21 23:04:35
273	43	54	A COMMENT	\N	2014-07-22 00:38:49	2014-07-22 00:38:49
274	4	54	A COMMENT	\N	2014-07-22 03:22:51	2014-07-22 03:22:51
275	37	54	A COMMENT	\N	2014-07-25 20:49:17	2014-07-25 20:49:17
276	45	54	A COMMENT	\N	2014-07-26 20:17:43	2014-07-26 20:17:43
277	21	54	A COMMENT	\N	2014-07-26 21:08:40	2014-07-26 21:08:40
278	37	55	A COMMENT	\N	2014-07-16 02:10:51	2014-07-16 02:10:51
279	21	55	A COMMENT	\N	2014-07-16 09:38:19	2014-07-16 09:38:19
280	37	55	A COMMENT	\N	2014-07-16 19:42:29	2014-07-16 19:42:29
281	45	55	A COMMENT	\N	2014-07-22 22:47:31	2014-07-22 22:47:31
282	27	55	A COMMENT	\N	2014-07-23 08:30:21	2014-07-23 08:30:21
283	4	55	A COMMENT	\N	2014-07-25 03:01:52	2014-07-25 03:01:52
284	10	55	A COMMENT	\N	2014-07-25 04:12:18	2014-07-25 04:12:18
285	8	56	A COMMENT	\N	2014-07-14 18:30:46	2014-07-14 18:30:46
286	4	56	A COMMENT	\N	2014-07-26 15:54:32	2014-07-26 15:54:32
287	2	57	A COMMENT	\N	2014-07-19 06:20:06	2014-07-19 06:20:06
288	1	57	A COMMENT	\N	2014-07-23 18:17:37	2014-07-23 18:17:37
289	8	60	A COMMENT	\N	2014-07-14 06:16:52	2014-07-14 06:16:52
290	2	60	A COMMENT	\N	2014-07-14 10:17:22	2014-07-14 10:17:22
291	43	60	A COMMENT	\N	2014-07-14 23:18:29	2014-07-14 23:18:29
292	37	60	A COMMENT	\N	2014-07-19 15:22:49	2014-07-19 15:22:49
293	45	60	A COMMENT	\N	2014-07-19 17:15:08	2014-07-19 17:15:08
294	8	60	A COMMENT	\N	2014-07-24 11:07:38	2014-07-24 11:07:38
295	11	60	A COMMENT	\N	2014-07-25 06:17:53	2014-07-25 06:17:53
296	37	60	A COMMENT	\N	2014-07-25 13:02:02	2014-07-25 13:02:02
297	43	60	A COMMENT	\N	2014-07-26 17:58:37	2014-07-26 17:58:37
298	11	61	A COMMENT	\N	2014-07-26 00:23:39	2014-07-26 00:23:39
299	32	61	A COMMENT	\N	2014-07-26 19:44:54	2014-07-26 19:44:54
300	14	62	A COMMENT	\N	2014-07-14 06:53:55	2014-07-14 06:53:55
301	3	62	A COMMENT	\N	2014-07-14 11:58:24	2014-07-14 11:58:24
302	39	62	A COMMENT	\N	2014-07-15 03:43:55	2014-07-15 03:43:55
303	4	62	A COMMENT	\N	2014-07-15 16:02:26	2014-07-15 16:02:26
304	45	62	A COMMENT	\N	2014-07-16 11:39:53	2014-07-16 11:39:53
305	32	62	A COMMENT	\N	2014-07-18 15:38:57	2014-07-18 15:38:57
306	37	62	A COMMENT	\N	2014-07-19 18:49:33	2014-07-19 18:49:33
307	1	62	A COMMENT	\N	2014-07-19 22:20:14	2014-07-19 22:20:14
308	28	62	A COMMENT	\N	2014-07-20 14:57:24	2014-07-20 14:57:24
309	39	62	A COMMENT	\N	2014-07-22 21:01:00	2014-07-22 21:01:00
310	43	62	A COMMENT	\N	2014-07-24 19:07:58	2014-07-24 19:07:58
311	37	62	A COMMENT	\N	2014-07-25 20:03:39	2014-07-25 20:03:39
312	39	62	A COMMENT	\N	2014-07-26 21:22:55	2014-07-26 21:22:55
313	14	64	A COMMENT	\N	2014-07-24 01:00:42	2014-07-24 01:00:42
314	4	64	A COMMENT	\N	2014-07-24 11:28:09	2014-07-24 11:28:09
315	30	64	A COMMENT	\N	2014-07-25 03:22:02	2014-07-25 03:22:02
316	10	64	A COMMENT	\N	2014-07-25 08:48:15	2014-07-25 08:48:15
317	11	64	A COMMENT	\N	2014-07-25 22:51:27	2014-07-25 22:51:27
318	37	64	A COMMENT	\N	2014-07-26 03:06:37	2014-07-26 03:06:37
319	1	64	A COMMENT	\N	2014-07-26 05:07:36	2014-07-26 05:07:36
320	47	64	A COMMENT	\N	2014-07-26 22:39:39	2014-07-26 22:39:39
321	27	65	A COMMENT	\N	2014-07-18 14:37:30	2014-07-18 14:37:30
322	1	65	A COMMENT	\N	2014-07-19 21:56:15	2014-07-19 21:56:15
323	3	65	A COMMENT	\N	2014-07-20 20:55:10	2014-07-20 20:55:10
324	10	65	A COMMENT	\N	2014-07-21 21:04:47	2014-07-21 21:04:47
325	28	65	A COMMENT	\N	2014-07-24 10:04:32	2014-07-24 10:04:32
326	27	66	A COMMENT	\N	2014-07-21 13:51:05	2014-07-21 13:51:05
327	39	66	A COMMENT	\N	2014-07-22 22:27:53	2014-07-22 22:27:53
328	1	66	A COMMENT	\N	2014-07-23 09:40:06	2014-07-23 09:40:06
329	43	66	A COMMENT	\N	2014-07-24 02:20:33	2014-07-24 02:20:33
330	32	66	A COMMENT	\N	2014-07-25 23:02:40	2014-07-25 23:02:40
331	21	67	A COMMENT	\N	2014-07-21 19:48:02	2014-07-21 19:48:02
332	4	67	A COMMENT	\N	2014-07-22 13:45:25	2014-07-22 13:45:25
333	47	67	A COMMENT	\N	2014-07-24 00:29:57	2014-07-24 00:29:57
334	10	67	A COMMENT	\N	2014-07-24 08:46:57	2014-07-24 08:46:57
335	2	67	A COMMENT	\N	2014-07-24 09:11:43	2014-07-24 09:11:43
336	43	68	A COMMENT	\N	2014-07-20 15:11:06	2014-07-20 15:11:06
337	39	68	A COMMENT	\N	2014-07-23 01:35:04	2014-07-23 01:35:04
338	27	68	A COMMENT	\N	2014-07-25 01:01:16	2014-07-25 01:01:16
339	10	68	A COMMENT	\N	2014-07-26 06:44:12	2014-07-26 06:44:12
340	3	68	A COMMENT	\N	2014-07-26 18:12:11	2014-07-26 18:12:11
341	27	69	A COMMENT	\N	2014-07-16 14:35:18	2014-07-16 14:35:18
342	21	71	A COMMENT	\N	2014-07-21 16:16:37	2014-07-21 16:16:37
343	3	71	A COMMENT	\N	2014-07-21 17:46:22	2014-07-21 17:46:22
344	28	71	A COMMENT	\N	2014-07-22 03:49:48	2014-07-22 03:49:48
345	8	71	A COMMENT	\N	2014-07-22 07:05:45	2014-07-22 07:05:45
346	27	71	A COMMENT	\N	2014-07-22 09:38:58	2014-07-22 09:38:58
347	43	71	A COMMENT	\N	2014-07-22 16:30:03	2014-07-22 16:30:03
348	39	71	A COMMENT	\N	2014-07-23 09:51:13	2014-07-23 09:51:13
349	14	71	A COMMENT	\N	2014-07-23 21:42:11	2014-07-23 21:42:11
350	11	71	A COMMENT	\N	2014-07-24 02:42:38	2014-07-24 02:42:38
351	39	71	A COMMENT	\N	2014-07-24 03:02:44	2014-07-24 03:02:44
352	37	71	A COMMENT	\N	2014-07-24 09:48:23	2014-07-24 09:48:23
353	21	71	A COMMENT	\N	2014-07-25 01:55:09	2014-07-25 01:55:09
354	11	71	A COMMENT	\N	2014-07-25 02:44:07	2014-07-25 02:44:07
355	47	71	A COMMENT	\N	2014-07-25 05:08:28	2014-07-25 05:08:28
356	2	71	A COMMENT	\N	2014-07-25 18:25:57	2014-07-25 18:25:57
357	1	71	A COMMENT	\N	2014-07-26 17:44:56	2014-07-26 17:44:56
358	27	72	A COMMENT	\N	2014-07-23 17:36:41	2014-07-23 17:36:41
359	45	72	A COMMENT	\N	2014-07-24 06:35:39	2014-07-24 06:35:39
360	4	72	A COMMENT	\N	2014-07-24 12:47:43	2014-07-24 12:47:43
361	39	72	A COMMENT	\N	2014-07-24 17:09:03	2014-07-24 17:09:03
362	8	72	A COMMENT	\N	2014-07-25 19:22:58	2014-07-25 19:22:58
363	37	72	A COMMENT	\N	2014-07-25 20:28:18	2014-07-25 20:28:18
364	2	72	A COMMENT	\N	2014-07-26 18:16:56	2014-07-26 18:16:56
365	27	74	A COMMENT	\N	2014-07-23 00:02:36	2014-07-23 00:02:36
366	45	74	A COMMENT	\N	2014-07-24 22:16:51	2014-07-24 22:16:51
367	37	74	A COMMENT	\N	2014-07-25 07:07:50	2014-07-25 07:07:50
368	2	74	A COMMENT	\N	2014-07-26 02:41:38	2014-07-26 02:41:38
369	14	74	A COMMENT	\N	2014-07-26 12:50:14	2014-07-26 12:50:14
370	21	74	A COMMENT	\N	2014-07-26 17:43:02	2014-07-26 17:43:02
371	32	75	A COMMENT	\N	2014-07-17 14:17:44	2014-07-17 14:17:44
372	1	75	A COMMENT	\N	2014-07-21 00:38:10	2014-07-21 00:38:10
373	32	75	A COMMENT	\N	2014-07-24 11:45:09	2014-07-24 11:45:09
374	10	76	A COMMENT	\N	2014-07-21 08:23:23	2014-07-21 08:23:23
375	28	76	A COMMENT	\N	2014-07-23 15:18:58	2014-07-23 15:18:58
376	11	77	A COMMENT	\N	2014-07-25 03:19:01	2014-07-25 03:19:01
377	2	77	A COMMENT	\N	2014-07-25 10:57:39	2014-07-25 10:57:39
378	43	77	A COMMENT	\N	2014-07-26 01:58:23	2014-07-26 01:58:23
379	21	77	A COMMENT	\N	2014-07-26 04:38:35	2014-07-26 04:38:35
380	1	77	A COMMENT	\N	2014-07-26 15:30:07	2014-07-26 15:30:07
381	27	78	A COMMENT	\N	2014-07-15 12:31:27	2014-07-15 12:31:27
382	27	79	A COMMENT	\N	2014-07-19 12:03:11	2014-07-19 12:03:11
383	8	79	A COMMENT	\N	2014-07-19 12:49:35	2014-07-19 12:49:35
384	3	79	A COMMENT	\N	2014-07-20 21:13:09	2014-07-20 21:13:09
385	43	79	A COMMENT	\N	2014-07-21 10:30:12	2014-07-21 10:30:12
386	43	79	A COMMENT	\N	2014-07-23 09:19:49	2014-07-23 09:19:49
387	14	79	A COMMENT	\N	2014-07-24 17:07:26	2014-07-24 17:07:26
388	39	79	A COMMENT	\N	2014-07-25 15:53:41	2014-07-25 15:53:41
389	4	79	A COMMENT	\N	2014-07-26 11:13:29	2014-07-26 11:13:29
390	1	80	A COMMENT	\N	2014-07-22 05:40:53	2014-07-22 05:40:53
391	21	80	A COMMENT	\N	2014-07-22 08:23:26	2014-07-22 08:23:26
392	32	80	A COMMENT	\N	2014-07-24 16:20:09	2014-07-24 16:20:09
393	45	80	A COMMENT	\N	2014-07-25 18:11:18	2014-07-25 18:11:18
394	4	81	A COMMENT	\N	2014-07-19 18:59:34	2014-07-19 18:59:34
395	43	81	A COMMENT	\N	2014-07-19 23:36:37	2014-07-19 23:36:37
396	2	81	A COMMENT	\N	2014-07-20 13:38:27	2014-07-20 13:38:27
397	14	81	A COMMENT	\N	2014-07-21 05:12:52	2014-07-21 05:12:52
398	11	81	A COMMENT	\N	2014-07-21 19:44:32	2014-07-21 19:44:32
399	21	81	A COMMENT	\N	2014-07-21 20:43:16	2014-07-21 20:43:16
400	32	81	A COMMENT	\N	2014-07-23 09:33:37	2014-07-23 09:33:37
401	39	81	A COMMENT	\N	2014-07-23 21:32:18	2014-07-23 21:32:18
402	45	81	A COMMENT	\N	2014-07-24 03:43:29	2014-07-24 03:43:29
403	45	82	A COMMENT	\N	2014-07-22 07:54:24	2014-07-22 07:54:24
404	10	82	A COMMENT	\N	2014-07-22 22:09:10	2014-07-22 22:09:10
405	47	82	A COMMENT	\N	2014-07-22 23:58:00	2014-07-22 23:58:00
406	4	82	A COMMENT	\N	2014-07-23 05:58:35	2014-07-23 05:58:35
407	2	82	A COMMENT	\N	2014-07-23 12:38:32	2014-07-23 12:38:32
408	1	82	A COMMENT	\N	2014-07-24 17:47:54	2014-07-24 17:47:54
409	8	82	A COMMENT	\N	2014-07-25 02:37:02	2014-07-25 02:37:02
410	8	82	A COMMENT	\N	2014-07-26 06:23:58	2014-07-26 06:23:58
411	45	83	A COMMENT	\N	2014-07-15 23:23:17	2014-07-15 23:23:17
412	14	83	A COMMENT	\N	2014-07-16 02:48:31	2014-07-16 02:48:31
413	39	83	A COMMENT	\N	2014-07-17 09:19:58	2014-07-17 09:19:58
414	1	83	A COMMENT	\N	2014-07-19 10:32:58	2014-07-19 10:32:58
415	32	83	A COMMENT	\N	2014-07-19 11:14:32	2014-07-19 11:14:32
416	30	83	A COMMENT	\N	2014-07-21 19:09:37	2014-07-21 19:09:37
417	1	83	A COMMENT	\N	2014-07-22 05:54:37	2014-07-22 05:54:37
418	11	83	A COMMENT	\N	2014-07-22 11:17:09	2014-07-22 11:17:09
419	27	84	A COMMENT	\N	2014-07-24 20:50:37	2014-07-24 20:50:37
420	27	84	A COMMENT	\N	2014-07-25 00:02:39	2014-07-25 00:02:39
421	39	84	A COMMENT	\N	2014-07-25 18:44:25	2014-07-25 18:44:25
422	21	84	A COMMENT	\N	2014-07-26 17:58:29	2014-07-26 17:58:29
423	27	85	A COMMENT	\N	2014-07-15 21:55:39	2014-07-15 21:55:39
424	27	86	A COMMENT	\N	2014-07-23 03:53:44	2014-07-23 03:53:44
425	4	86	A COMMENT	\N	2014-07-23 11:06:42	2014-07-23 11:06:42
426	11	86	A COMMENT	\N	2014-07-23 23:23:28	2014-07-23 23:23:28
427	1	86	A COMMENT	\N	2014-07-24 04:09:18	2014-07-24 04:09:18
428	28	86	A COMMENT	\N	2014-07-24 13:08:45	2014-07-24 13:08:45
429	30	86	A COMMENT	\N	2014-07-25 23:28:42	2014-07-25 23:28:42
430	27	87	A COMMENT	\N	2014-07-23 18:11:28	2014-07-23 18:11:28
431	4	88	A COMMENT	\N	2014-07-23 11:12:10	2014-07-23 11:12:10
432	11	88	A COMMENT	\N	2014-07-23 11:37:53	2014-07-23 11:37:53
433	32	88	A COMMENT	\N	2014-07-24 11:17:12	2014-07-24 11:17:12
434	37	88	A COMMENT	\N	2014-07-25 22:06:34	2014-07-25 22:06:34
435	21	88	A COMMENT	\N	2014-07-26 04:55:32	2014-07-26 04:55:32
436	45	89	A COMMENT	\N	2014-07-16 14:18:42	2014-07-16 14:18:42
437	2	89	A COMMENT	\N	2014-07-16 23:20:57	2014-07-16 23:20:57
438	39	89	A COMMENT	\N	2014-07-18 04:53:55	2014-07-18 04:53:55
439	39	89	A COMMENT	\N	2014-07-18 09:01:19	2014-07-18 09:01:19
440	27	89	A COMMENT	\N	2014-07-18 10:26:55	2014-07-18 10:26:55
441	47	89	A COMMENT	\N	2014-07-18 12:22:23	2014-07-18 12:22:23
442	10	89	A COMMENT	\N	2014-07-18 15:53:51	2014-07-18 15:53:51
443	43	89	A COMMENT	\N	2014-07-19 04:58:23	2014-07-19 04:58:23
444	32	89	A COMMENT	\N	2014-07-19 23:01:55	2014-07-19 23:01:55
445	3	89	A COMMENT	\N	2014-07-19 23:40:27	2014-07-19 23:40:27
446	27	89	A COMMENT	\N	2014-07-20 11:59:45	2014-07-20 11:59:45
447	28	89	A COMMENT	\N	2014-07-21 05:01:23	2014-07-21 05:01:23
448	27	89	A COMMENT	\N	2014-07-22 19:04:00	2014-07-22 19:04:00
449	45	89	A COMMENT	\N	2014-07-23 06:19:42	2014-07-23 06:19:42
450	4	89	A COMMENT	\N	2014-07-23 07:20:32	2014-07-23 07:20:32
451	11	89	A COMMENT	\N	2014-07-23 12:02:04	2014-07-23 12:02:04
452	1	89	A COMMENT	\N	2014-07-24 13:32:43	2014-07-24 13:32:43
453	43	89	A COMMENT	\N	2014-07-25 17:22:05	2014-07-25 17:22:05
454	3	89	A COMMENT	\N	2014-07-26 11:21:45	2014-07-26 11:21:45
455	43	89	A COMMENT	\N	2014-07-26 16:07:37	2014-07-26 16:07:37
456	3	90	A COMMENT	\N	2014-07-20 05:03:41	2014-07-20 05:03:41
457	27	90	A COMMENT	\N	2014-07-20 18:42:59	2014-07-20 18:42:59
458	21	90	A COMMENT	\N	2014-07-21 00:09:49	2014-07-21 00:09:49
459	28	90	A COMMENT	\N	2014-07-21 19:50:43	2014-07-21 19:50:43
460	39	90	A COMMENT	\N	2014-07-22 02:59:09	2014-07-22 02:59:09
461	3	90	A COMMENT	\N	2014-07-23 00:35:38	2014-07-23 00:35:38
462	43	90	A COMMENT	\N	2014-07-23 05:47:32	2014-07-23 05:47:32
463	32	90	A COMMENT	\N	2014-07-23 21:55:15	2014-07-23 21:55:15
464	28	90	A COMMENT	\N	2014-07-24 04:36:20	2014-07-24 04:36:20
465	2	90	A COMMENT	\N	2014-07-25 01:06:18	2014-07-25 01:06:18
466	45	90	A COMMENT	\N	2014-07-25 03:32:40	2014-07-25 03:32:40
467	27	90	A COMMENT	\N	2014-07-25 09:16:21	2014-07-25 09:16:21
468	30	90	A COMMENT	\N	2014-07-25 10:39:51	2014-07-25 10:39:51
469	32	91	A COMMENT	\N	2014-07-23 04:08:47	2014-07-23 04:08:47
470	27	91	A COMMENT	\N	2014-07-24 03:56:50	2014-07-24 03:56:50
471	27	91	A COMMENT	\N	2014-07-24 10:14:49	2014-07-24 10:14:49
472	45	91	A COMMENT	\N	2014-07-24 13:26:44	2014-07-24 13:26:44
473	39	91	A COMMENT	\N	2014-07-25 10:56:16	2014-07-25 10:56:16
474	27	93	A COMMENT	\N	2014-07-24 04:37:00	2014-07-24 04:37:00
475	32	93	A COMMENT	\N	2014-07-24 21:17:34	2014-07-24 21:17:34
476	8	93	A COMMENT	\N	2014-07-25 18:13:37	2014-07-25 18:13:37
477	27	93	A COMMENT	\N	2014-07-26 08:45:40	2014-07-26 08:45:40
478	11	93	A COMMENT	\N	2014-07-26 22:04:03	2014-07-26 22:04:03
479	45	94	A COMMENT	\N	2014-07-15 22:54:44	2014-07-15 22:54:44
480	2	94	A COMMENT	\N	2014-07-18 11:03:22	2014-07-18 11:03:22
481	3	94	A COMMENT	\N	2014-07-19 09:18:32	2014-07-19 09:18:32
482	21	94	A COMMENT	\N	2014-07-22 20:59:04	2014-07-22 20:59:04
483	27	94	A COMMENT	\N	2014-07-26 03:43:23	2014-07-26 03:43:23
484	28	96	A COMMENT	\N	2014-02-25 06:05:45	2014-02-25 06:05:45
485	2	96	A COMMENT	\N	2014-07-10 23:32:51	2014-07-10 23:32:51
486	3	97	A COMMENT	\N	2014-05-21 21:39:44	2014-05-21 21:39:44
487	2	97	A COMMENT	\N	2014-06-16 18:16:43	2014-06-16 18:16:43
488	27	98	A COMMENT	\N	2014-04-30 15:58:55	2014-04-30 15:58:55
489	4	98	A COMMENT	\N	2014-07-20 07:35:09	2014-07-20 07:35:09
490	11	99	A COMMENT	\N	2014-07-01 20:02:57	2014-07-01 20:02:57
491	28	99	A COMMENT	\N	2014-07-10 00:22:42	2014-07-10 00:22:42
492	45	99	A COMMENT	\N	2014-07-16 03:45:33	2014-07-16 03:45:33
493	28	100	A COMMENT	\N	2013-12-20 19:00:07	2013-12-20 19:00:07
494	8	100	A COMMENT	\N	2013-12-25 15:34:56	2013-12-25 15:34:56
495	28	101	A COMMENT	\N	2014-01-28 18:03:02	2014-01-28 18:03:02
496	47	101	A COMMENT	\N	2014-03-17 00:18:36	2014-03-17 00:18:36
497	14	101	A COMMENT	\N	2014-04-11 20:45:53	2014-04-11 20:45:53
498	37	101	A COMMENT	\N	2014-04-21 23:08:19	2014-04-21 23:08:19
499	10	101	A COMMENT	\N	2014-04-23 08:27:46	2014-04-23 08:27:46
500	21	101	A COMMENT	\N	2014-04-25 22:26:20	2014-04-25 22:26:20
501	3	101	A COMMENT	\N	2014-05-22 14:42:53	2014-05-22 14:42:53
502	28	102	A COMMENT	\N	2014-02-15 17:19:11	2014-02-15 17:19:11
503	43	103	A COMMENT	\N	2014-07-17 22:33:54	2014-07-17 22:33:54
504	8	104	A COMMENT	\N	2014-03-12 01:20:40	2014-03-12 01:20:40
505	47	104	A COMMENT	\N	2014-05-18 17:09:30	2014-05-18 17:09:30
506	39	104	A COMMENT	\N	2014-05-28 04:10:16	2014-05-28 04:10:16
507	3	104	A COMMENT	\N	2014-06-19 20:21:41	2014-06-19 20:21:41
508	32	105	A COMMENT	\N	2014-04-25 17:36:26	2014-04-25 17:36:26
509	28	105	A COMMENT	\N	2014-04-28 17:29:15	2014-04-28 17:29:15
510	1	105	A COMMENT	\N	2014-05-15 19:05:52	2014-05-15 19:05:52
511	8	105	A COMMENT	\N	2014-06-23 15:54:35	2014-06-23 15:54:35
512	30	105	A COMMENT	\N	2014-06-23 17:51:32	2014-06-23 17:51:32
513	39	105	A COMMENT	\N	2014-06-24 01:43:05	2014-06-24 01:43:05
514	3	105	A COMMENT	\N	2014-06-27 21:34:02	2014-06-27 21:34:02
515	27	105	A COMMENT	\N	2014-07-20 16:39:20	2014-07-20 16:39:20
516	2	105	A COMMENT	\N	2014-07-20 20:07:19	2014-07-20 20:07:19
517	27	105	A COMMENT	\N	2014-07-21 09:49:26	2014-07-21 09:49:26
518	32	106	A COMMENT	\N	2014-02-25 13:04:01	2014-02-25 13:04:01
519	32	106	A COMMENT	\N	2014-04-01 11:48:21	2014-04-01 11:48:21
520	27	106	A COMMENT	\N	2014-06-08 15:58:39	2014-06-08 15:58:39
521	2	106	A COMMENT	\N	2014-07-17 03:30:35	2014-07-17 03:30:35
522	47	107	A COMMENT	\N	2014-05-24 06:52:45	2014-05-24 06:52:45
523	10	107	A COMMENT	\N	2014-06-02 23:21:39	2014-06-02 23:21:39
524	32	109	A COMMENT	\N	2014-04-11 13:48:56	2014-04-11 13:48:56
525	28	109	A COMMENT	\N	2014-05-06 01:01:10	2014-05-06 01:01:10
526	37	109	A COMMENT	\N	2014-05-06 13:03:16	2014-05-06 13:03:16
527	11	109	A COMMENT	\N	2014-05-29 08:40:42	2014-05-29 08:40:42
528	1	109	A COMMENT	\N	2014-06-08 03:32:10	2014-06-08 03:32:10
529	30	109	A COMMENT	\N	2014-07-01 11:09:56	2014-07-01 11:09:56
530	27	109	A COMMENT	\N	2014-07-10 02:38:21	2014-07-10 02:38:21
531	32	111	A COMMENT	\N	2014-03-04 02:27:11	2014-03-04 02:27:11
532	30	111	A COMMENT	\N	2014-04-05 05:48:25	2014-04-05 05:48:25
533	14	111	A COMMENT	\N	2014-04-27 21:50:50	2014-04-27 21:50:50
534	32	111	A COMMENT	\N	2014-05-04 01:46:08	2014-05-04 01:46:08
535	2	111	A COMMENT	\N	2014-05-21 18:59:42	2014-05-21 18:59:42
536	10	111	A COMMENT	\N	2014-06-25 10:35:17	2014-06-25 10:35:17
537	32	113	A COMMENT	\N	2014-04-12 05:06:19	2014-04-12 05:06:19
538	45	113	A COMMENT	\N	2014-04-23 15:35:55	2014-04-23 15:35:55
539	21	113	A COMMENT	\N	2014-05-10 15:53:50	2014-05-10 15:53:50
540	3	113	A COMMENT	\N	2014-06-01 03:15:30	2014-06-01 03:15:30
541	28	113	A COMMENT	\N	2014-07-20 16:59:35	2014-07-20 16:59:35
542	32	114	A COMMENT	\N	2014-04-10 11:19:55	2014-04-10 11:19:55
543	21	114	A COMMENT	\N	2014-06-25 09:41:32	2014-06-25 09:41:32
544	39	114	A COMMENT	\N	2014-07-24 23:19:18	2014-07-24 23:19:18
545	4	115	A COMMENT	\N	2014-01-21 01:24:57	2014-01-21 01:24:57
546	28	115	A COMMENT	\N	2014-04-20 21:57:11	2014-04-20 21:57:11
547	14	115	A COMMENT	\N	2014-05-06 06:52:10	2014-05-06 06:52:10
548	11	115	A COMMENT	\N	2014-05-29 10:30:55	2014-05-29 10:30:55
549	37	116	A COMMENT	\N	2014-02-10 14:47:59	2014-02-10 14:47:59
550	4	116	A COMMENT	\N	2014-04-15 20:39:04	2014-04-15 20:39:04
551	11	116	A COMMENT	\N	2014-05-16 14:48:45	2014-05-16 14:48:45
552	3	116	A COMMENT	\N	2014-06-18 18:41:02	2014-06-18 18:41:02
553	37	117	A COMMENT	\N	2014-01-07 21:37:35	2014-01-07 21:37:35
554	37	118	A COMMENT	\N	2014-04-03 06:47:26	2014-04-03 06:47:26
555	37	119	A COMMENT	\N	2014-01-12 10:45:21	2014-01-12 10:45:21
556	37	119	A COMMENT	\N	2014-05-09 03:32:53	2014-05-09 03:32:53
557	1	119	A COMMENT	\N	2014-06-14 02:17:07	2014-06-14 02:17:07
558	32	120	A COMMENT	\N	2014-01-04 17:01:31	2014-01-04 17:01:31
559	43	120	A COMMENT	\N	2014-04-18 05:21:42	2014-04-18 05:21:42
560	28	120	A COMMENT	\N	2014-05-14 05:17:20	2014-05-14 05:17:20
561	30	120	A COMMENT	\N	2014-07-15 13:01:02	2014-07-15 13:01:02
562	45	121	A COMMENT	\N	2014-01-06 13:47:20	2014-01-06 13:47:20
563	10	121	A COMMENT	\N	2014-01-14 10:05:00	2014-01-14 10:05:00
564	3	121	A COMMENT	\N	2014-03-12 15:32:52	2014-03-12 15:32:52
565	14	121	A COMMENT	\N	2014-04-20 15:33:59	2014-04-20 15:33:59
566	3	121	A COMMENT	\N	2014-04-29 03:40:58	2014-04-29 03:40:58
567	37	122	A COMMENT	\N	2013-12-12 07:09:52	2013-12-12 07:09:52
568	4	122	A COMMENT	\N	2013-12-16 11:47:10	2013-12-16 11:47:10
569	27	122	A COMMENT	\N	2014-05-11 16:43:04	2014-05-11 16:43:04
570	1	122	A COMMENT	\N	2014-06-14 08:31:37	2014-06-14 08:31:37
571	28	123	A COMMENT	\N	2014-04-11 07:29:54	2014-04-11 07:29:54
572	21	123	A COMMENT	\N	2014-05-02 20:38:10	2014-05-02 20:38:10
573	30	123	A COMMENT	\N	2014-07-03 00:18:50	2014-07-03 00:18:50
574	47	123	A COMMENT	\N	2014-07-12 02:58:31	2014-07-12 02:58:31
575	8	123	A COMMENT	\N	2014-07-19 06:22:59	2014-07-19 06:22:59
576	32	126	A COMMENT	\N	2014-04-23 04:54:16	2014-04-23 04:54:16
577	4	126	A COMMENT	\N	2014-05-02 21:39:26	2014-05-02 21:39:26
578	2	126	A COMMENT	\N	2014-05-25 12:32:52	2014-05-25 12:32:52
579	27	127	A COMMENT	\N	2014-04-12 09:16:19	2014-04-12 09:16:19
580	10	127	A COMMENT	\N	2014-05-18 03:21:39	2014-05-18 03:21:39
581	45	127	A COMMENT	\N	2014-05-27 04:21:51	2014-05-27 04:21:51
582	43	127	A COMMENT	\N	2014-07-16 05:17:44	2014-07-16 05:17:44
583	8	128	A COMMENT	\N	2014-06-29 16:31:32	2014-06-29 16:31:32
584	8	128	A COMMENT	\N	2014-07-02 16:05:02	2014-07-02 16:05:02
585	21	128	A COMMENT	\N	2014-07-06 12:25:26	2014-07-06 12:25:26
586	1	128	A COMMENT	\N	2014-07-15 10:18:21	2014-07-15 10:18:21
587	43	128	A COMMENT	\N	2014-07-15 11:41:05	2014-07-15 11:41:05
588	45	128	A COMMENT	\N	2014-07-17 21:13:41	2014-07-17 21:13:41
589	4	128	A COMMENT	\N	2014-07-19 01:16:34	2014-07-19 01:16:34
590	45	128	A COMMENT	\N	2014-07-23 05:05:08	2014-07-23 05:05:08
591	28	128	A COMMENT	\N	2014-07-25 08:39:12	2014-07-25 08:39:12
592	14	128	A COMMENT	\N	2014-07-26 17:55:47	2014-07-26 17:55:47
593	39	129	A COMMENT	\N	2014-07-10 17:31:39	2014-07-10 17:31:39
594	21	129	A COMMENT	\N	2014-07-12 07:12:14	2014-07-12 07:12:14
595	43	130	A COMMENT	\N	2014-06-08 08:06:44	2014-06-08 08:06:44
596	32	130	A COMMENT	\N	2014-06-10 03:41:32	2014-06-10 03:41:32
597	14	131	A COMMENT	\N	2014-03-23 05:41:23	2014-03-23 05:41:23
598	43	131	A COMMENT	\N	2014-03-26 03:39:04	2014-03-26 03:39:04
599	47	131	A COMMENT	\N	2014-04-08 21:27:41	2014-04-08 21:27:41
600	28	131	A COMMENT	\N	2014-05-05 04:43:37	2014-05-05 04:43:37
601	47	131	A COMMENT	\N	2014-05-22 09:57:07	2014-05-22 09:57:07
602	37	131	A COMMENT	\N	2014-06-14 14:53:36	2014-06-14 14:53:36
603	27	131	A COMMENT	\N	2014-07-24 18:09:30	2014-07-24 18:09:30
604	39	133	A COMMENT	\N	2014-02-21 22:13:54	2014-02-21 22:13:54
605	39	134	A COMMENT	\N	2014-03-20 02:44:50	2014-03-20 02:44:50
606	8	134	A COMMENT	\N	2014-04-26 07:43:49	2014-04-26 07:43:49
607	14	134	A COMMENT	\N	2014-05-11 22:41:05	2014-05-11 22:41:05
608	30	134	A COMMENT	\N	2014-05-16 05:44:35	2014-05-16 05:44:35
609	14	134	A COMMENT	\N	2014-05-16 11:27:50	2014-05-16 11:27:50
610	37	134	A COMMENT	\N	2014-07-10 15:50:03	2014-07-10 15:50:03
611	8	135	A COMMENT	\N	2014-05-19 20:02:31	2014-05-19 20:02:31
612	2	135	A COMMENT	\N	2014-06-05 23:52:59	2014-06-05 23:52:59
613	3	135	A COMMENT	\N	2014-06-06 15:01:36	2014-06-06 15:01:36
614	43	135	A COMMENT	\N	2014-06-25 20:55:20	2014-06-25 20:55:20
615	14	135	A COMMENT	\N	2014-07-06 14:08:14	2014-07-06 14:08:14
616	39	136	A COMMENT	\N	2014-06-14 22:32:32	2014-06-14 22:32:32
617	37	136	A COMMENT	\N	2014-06-22 23:45:28	2014-06-22 23:45:28
618	47	136	A COMMENT	\N	2014-07-10 05:00:38	2014-07-10 05:00:38
619	21	136	A COMMENT	\N	2014-07-24 15:17:33	2014-07-24 15:17:33
620	39	137	A COMMENT	\N	2014-07-09 03:39:11	2014-07-09 03:39:11
621	45	137	A COMMENT	\N	2014-07-11 13:39:15	2014-07-11 13:39:15
622	32	138	A COMMENT	\N	2014-07-10 16:14:21	2014-07-10 16:14:21
623	4	138	A COMMENT	\N	2014-07-15 01:54:47	2014-07-15 01:54:47
624	45	139	A COMMENT	\N	2014-07-25 18:39:16	2014-07-25 18:39:16
625	21	139	A COMMENT	\N	2014-07-26 05:32:06	2014-07-26 05:32:06
626	45	140	A COMMENT	\N	2014-05-01 04:00:30	2014-05-01 04:00:30
627	8	140	A COMMENT	\N	2014-05-23 04:31:13	2014-05-23 04:31:13
628	30	140	A COMMENT	\N	2014-05-26 02:52:45	2014-05-26 02:52:45
629	10	140	A COMMENT	\N	2014-06-19 04:00:50	2014-06-19 04:00:50
630	1	140	A COMMENT	\N	2014-06-30 19:17:33	2014-06-30 19:17:33
631	30	140	A COMMENT	\N	2014-07-07 05:56:59	2014-07-07 05:56:59
632	1	141	A COMMENT	\N	2014-06-01 05:16:03	2014-06-01 05:16:03
633	2	141	A COMMENT	\N	2014-06-06 11:59:57	2014-06-06 11:59:57
634	43	141	A COMMENT	\N	2014-06-06 20:01:27	2014-06-06 20:01:27
635	3	141	A COMMENT	\N	2014-06-11 11:48:09	2014-06-11 11:48:09
636	11	141	A COMMENT	\N	2014-06-22 03:19:35	2014-06-22 03:19:35
637	30	141	A COMMENT	\N	2014-06-23 10:37:37	2014-06-23 10:37:37
638	4	141	A COMMENT	\N	2014-06-26 06:05:55	2014-06-26 06:05:55
639	28	141	A COMMENT	\N	2014-07-08 16:37:06	2014-07-08 16:37:06
640	30	142	A COMMENT	\N	2014-06-04 10:25:06	2014-06-04 10:25:06
641	45	142	A COMMENT	\N	2014-06-13 19:33:53	2014-06-13 19:33:53
642	39	142	A COMMENT	\N	2014-07-04 23:11:51	2014-07-04 23:11:51
643	30	142	A COMMENT	\N	2014-07-11 02:43:05	2014-07-11 02:43:05
644	2	143	A COMMENT	\N	2014-06-05 04:50:43	2014-06-05 04:50:43
645	14	143	A COMMENT	\N	2014-06-12 15:15:15	2014-06-12 15:15:15
646	14	143	A COMMENT	\N	2014-06-20 19:11:49	2014-06-20 19:11:49
647	2	143	A COMMENT	\N	2014-06-23 04:15:51	2014-06-23 04:15:51
648	28	143	A COMMENT	\N	2014-07-02 06:27:22	2014-07-02 06:27:22
649	11	143	A COMMENT	\N	2014-07-14 09:04:55	2014-07-14 09:04:55
650	45	144	A COMMENT	\N	2014-06-15 05:00:47	2014-06-15 05:00:47
651	32	144	A COMMENT	\N	2014-06-28 08:11:20	2014-06-28 08:11:20
652	21	144	A COMMENT	\N	2014-06-29 15:19:23	2014-06-29 15:19:23
653	47	144	A COMMENT	\N	2014-06-30 01:37:09	2014-06-30 01:37:09
654	8	144	A COMMENT	\N	2014-07-02 00:35:39	2014-07-02 00:35:39
655	11	144	A COMMENT	\N	2014-07-16 22:41:16	2014-07-16 22:41:16
656	8	144	A COMMENT	\N	2014-07-21 14:28:09	2014-07-21 14:28:09
657	45	145	A COMMENT	\N	2014-07-12 19:11:22	2014-07-12 19:11:22
658	2	146	A COMMENT	\N	2014-07-19 12:57:14	2014-07-19 12:57:14
659	32	146	A COMMENT	\N	2014-07-20 06:59:02	2014-07-20 06:59:02
660	8	146	A COMMENT	\N	2014-07-20 08:21:35	2014-07-20 08:21:35
661	37	146	A COMMENT	\N	2014-07-24 12:05:15	2014-07-24 12:05:15
662	45	146	A COMMENT	\N	2014-07-24 14:16:45	2014-07-24 14:16:45
663	39	146	A COMMENT	\N	2014-07-26 04:14:46	2014-07-26 04:14:46
664	10	146	A COMMENT	\N	2014-07-26 12:29:55	2014-07-26 12:29:55
665	32	146	A COMMENT	\N	2014-07-26 19:19:55	2014-07-26 19:19:55
666	32	147	A COMMENT	\N	2014-07-20 02:34:26	2014-07-20 02:34:26
667	39	147	A COMMENT	\N	2014-07-20 03:41:32	2014-07-20 03:41:32
668	14	147	A COMMENT	\N	2014-07-20 05:23:21	2014-07-20 05:23:21
669	37	147	A COMMENT	\N	2014-07-20 08:45:32	2014-07-20 08:45:32
670	8	147	A COMMENT	\N	2014-07-20 16:55:47	2014-07-20 16:55:47
671	3	147	A COMMENT	\N	2014-07-20 20:32:17	2014-07-20 20:32:17
672	1	147	A COMMENT	\N	2014-07-21 03:33:28	2014-07-21 03:33:28
673	28	147	A COMMENT	\N	2014-07-21 03:54:47	2014-07-21 03:54:47
674	3	147	A COMMENT	\N	2014-07-22 12:21:51	2014-07-22 12:21:51
675	8	147	A COMMENT	\N	2014-07-22 13:57:40	2014-07-22 13:57:40
676	21	147	A COMMENT	\N	2014-07-23 15:28:56	2014-07-23 15:28:56
677	32	147	A COMMENT	\N	2014-07-24 04:08:46	2014-07-24 04:08:46
678	3	147	A COMMENT	\N	2014-07-24 09:58:33	2014-07-24 09:58:33
679	10	147	A COMMENT	\N	2014-07-25 13:04:43	2014-07-25 13:04:43
680	1	147	A COMMENT	\N	2014-07-26 09:48:21	2014-07-26 09:48:21
681	45	148	A COMMENT	\N	2014-07-21 00:53:36	2014-07-21 00:53:36
682	28	148	A COMMENT	\N	2014-07-21 06:27:26	2014-07-21 06:27:26
683	21	148	A COMMENT	\N	2014-07-21 16:36:08	2014-07-21 16:36:08
684	39	148	A COMMENT	\N	2014-07-23 06:16:16	2014-07-23 06:16:16
685	43	148	A COMMENT	\N	2014-07-23 23:58:57	2014-07-23 23:58:57
686	2	148	A COMMENT	\N	2014-07-25 21:09:59	2014-07-25 21:09:59
687	27	148	A COMMENT	\N	2014-07-26 01:23:55	2014-07-26 01:23:55
688	21	148	A COMMENT	\N	2014-07-26 06:37:12	2014-07-26 06:37:12
689	45	148	A COMMENT	\N	2014-07-26 13:03:23	2014-07-26 13:03:23
690	47	148	A COMMENT	\N	2014-07-26 13:15:16	2014-07-26 13:15:16
691	45	148	A COMMENT	\N	2014-07-26 20:50:58	2014-07-26 20:50:58
692	10	150	A COMMENT	\N	2014-06-19 13:47:45	2014-06-19 13:47:45
693	32	151	A COMMENT	\N	2014-06-14 09:28:54	2014-06-14 09:28:54
694	27	151	A COMMENT	\N	2014-06-20 15:40:44	2014-06-20 15:40:44
695	14	151	A COMMENT	\N	2014-06-28 04:56:19	2014-06-28 04:56:19
696	45	152	A COMMENT	\N	2014-06-09 17:33:35	2014-06-09 17:33:35
697	11	152	A COMMENT	\N	2014-06-21 18:11:57	2014-06-21 18:11:57
698	14	152	A COMMENT	\N	2014-06-26 21:42:06	2014-06-26 21:42:06
699	14	152	A COMMENT	\N	2014-06-29 08:57:48	2014-06-29 08:57:48
700	14	152	A COMMENT	\N	2014-07-03 21:20:08	2014-07-03 21:20:08
701	39	152	A COMMENT	\N	2014-07-09 08:29:12	2014-07-09 08:29:12
702	47	152	A COMMENT	\N	2014-07-16 04:42:54	2014-07-16 04:42:54
703	1	152	A COMMENT	\N	2014-07-16 10:35:43	2014-07-16 10:35:43
704	2	152	A COMMENT	\N	2014-07-23 19:52:53	2014-07-23 19:52:53
705	4	152	A COMMENT	\N	2014-07-24 00:56:22	2014-07-24 00:56:22
706	30	153	A COMMENT	\N	2014-06-30 08:09:54	2014-06-30 08:09:54
707	11	153	A COMMENT	\N	2014-07-01 15:01:13	2014-07-01 15:01:13
708	45	153	A COMMENT	\N	2014-07-08 16:45:38	2014-07-08 16:45:38
709	32	153	A COMMENT	\N	2014-07-09 01:31:43	2014-07-09 01:31:43
710	11	153	A COMMENT	\N	2014-07-19 11:06:38	2014-07-19 11:06:38
711	45	154	A COMMENT	\N	2014-06-07 20:24:58	2014-06-07 20:24:58
712	10	154	A COMMENT	\N	2014-06-09 10:59:37	2014-06-09 10:59:37
713	45	154	A COMMENT	\N	2014-06-12 17:40:53	2014-06-12 17:40:53
714	39	154	A COMMENT	\N	2014-06-12 20:35:04	2014-06-12 20:35:04
715	21	154	A COMMENT	\N	2014-06-13 10:16:57	2014-06-13 10:16:57
716	37	154	A COMMENT	\N	2014-06-17 00:07:09	2014-06-17 00:07:09
717	2	154	A COMMENT	\N	2014-06-18 06:53:59	2014-06-18 06:53:59
718	4	154	A COMMENT	\N	2014-06-22 15:08:51	2014-06-22 15:08:51
719	47	154	A COMMENT	\N	2014-06-25 08:26:06	2014-06-25 08:26:06
720	3	154	A COMMENT	\N	2014-06-29 02:35:14	2014-06-29 02:35:14
721	28	154	A COMMENT	\N	2014-07-01 02:07:15	2014-07-01 02:07:15
722	10	154	A COMMENT	\N	2014-07-01 07:25:54	2014-07-01 07:25:54
723	1	154	A COMMENT	\N	2014-07-04 08:02:58	2014-07-04 08:02:58
724	39	154	A COMMENT	\N	2014-07-05 00:58:21	2014-07-05 00:58:21
725	8	154	A COMMENT	\N	2014-07-09 00:30:31	2014-07-09 00:30:31
726	47	154	A COMMENT	\N	2014-07-14 08:56:03	2014-07-14 08:56:03
727	43	154	A COMMENT	\N	2014-07-17 12:27:28	2014-07-17 12:27:28
728	27	154	A COMMENT	\N	2014-07-20 09:35:24	2014-07-20 09:35:24
729	32	154	A COMMENT	\N	2014-07-24 20:06:15	2014-07-24 20:06:15
730	14	154	A COMMENT	\N	2014-07-26 15:49:22	2014-07-26 15:49:22
731	45	156	A COMMENT	\N	2014-05-16 15:22:29	2014-05-16 15:22:29
732	30	157	A COMMENT	\N	2014-07-04 23:40:13	2014-07-04 23:40:13
733	2	158	A COMMENT	\N	2014-05-14 12:50:32	2014-05-14 12:50:32
734	27	159	A COMMENT	\N	2014-05-28 21:22:23	2014-05-28 21:22:23
735	11	159	A COMMENT	\N	2014-06-17 05:46:48	2014-06-17 05:46:48
736	2	159	A COMMENT	\N	2014-06-21 14:43:23	2014-06-21 14:43:23
737	27	159	A COMMENT	\N	2014-07-16 06:07:26	2014-07-16 06:07:26
738	45	160	A COMMENT	\N	2014-06-18 18:01:26	2014-06-18 18:01:26
739	30	160	A COMMENT	\N	2014-06-21 17:24:44	2014-06-21 17:24:44
740	4	160	A COMMENT	\N	2014-06-24 01:41:39	2014-06-24 01:41:39
741	37	160	A COMMENT	\N	2014-06-28 05:17:57	2014-06-28 05:17:57
742	45	160	A COMMENT	\N	2014-06-29 00:24:45	2014-06-29 00:24:45
743	14	160	A COMMENT	\N	2014-06-29 02:24:48	2014-06-29 02:24:48
744	43	160	A COMMENT	\N	2014-06-29 15:27:13	2014-06-29 15:27:13
745	11	160	A COMMENT	\N	2014-07-02 11:19:40	2014-07-02 11:19:40
746	8	160	A COMMENT	\N	2014-07-02 23:43:53	2014-07-02 23:43:53
747	4	160	A COMMENT	\N	2014-07-04 10:42:53	2014-07-04 10:42:53
748	37	160	A COMMENT	\N	2014-07-04 19:43:07	2014-07-04 19:43:07
749	3	160	A COMMENT	\N	2014-07-06 11:46:18	2014-07-06 11:46:18
750	32	160	A COMMENT	\N	2014-07-07 06:04:22	2014-07-07 06:04:22
751	1	160	A COMMENT	\N	2014-07-09 09:12:02	2014-07-09 09:12:02
752	47	160	A COMMENT	\N	2014-07-10 15:58:02	2014-07-10 15:58:02
753	8	160	A COMMENT	\N	2014-07-12 15:57:08	2014-07-12 15:57:08
754	30	160	A COMMENT	\N	2014-07-16 05:33:39	2014-07-16 05:33:39
755	28	160	A COMMENT	\N	2014-07-18 15:00:57	2014-07-18 15:00:57
756	1	160	A COMMENT	\N	2014-07-20 01:31:14	2014-07-20 01:31:14
757	47	160	A COMMENT	\N	2014-07-21 22:29:37	2014-07-21 22:29:37
758	14	160	A COMMENT	\N	2014-07-26 18:44:52	2014-07-26 18:44:52
759	47	162	A COMMENT	\N	2013-11-03 21:09:57	2013-11-03 21:09:57
760	27	162	A COMMENT	\N	2013-11-13 07:57:57	2013-11-13 07:57:57
761	2	162	A COMMENT	\N	2013-12-03 18:32:36	2013-12-03 18:32:36
762	14	162	A COMMENT	\N	2014-01-11 21:49:13	2014-01-11 21:49:13
763	1	162	A COMMENT	\N	2014-02-03 11:29:09	2014-02-03 11:29:09
764	32	162	A COMMENT	\N	2014-02-11 00:31:00	2014-02-11 00:31:00
765	3	162	A COMMENT	\N	2014-03-21 21:57:55	2014-03-21 21:57:55
766	45	162	A COMMENT	\N	2014-03-29 03:24:31	2014-03-29 03:24:31
767	3	162	A COMMENT	\N	2014-04-22 08:50:05	2014-04-22 08:50:05
768	3	162	A COMMENT	\N	2014-04-27 16:29:13	2014-04-27 16:29:13
769	1	162	A COMMENT	\N	2014-05-18 10:25:39	2014-05-18 10:25:39
770	39	162	A COMMENT	\N	2014-07-04 03:46:05	2014-07-04 03:46:05
771	10	164	A COMMENT	\N	2014-03-01 01:56:41	2014-03-01 01:56:41
772	21	165	A COMMENT	\N	2013-12-31 21:16:32	2013-12-31 21:16:32
773	14	165	A COMMENT	\N	2014-01-17 10:41:15	2014-01-17 10:41:15
774	47	165	A COMMENT	\N	2014-02-24 23:52:48	2014-02-24 23:52:48
775	39	165	A COMMENT	\N	2014-03-02 18:50:46	2014-03-02 18:50:46
776	1	165	A COMMENT	\N	2014-05-04 19:32:41	2014-05-04 19:32:41
777	4	165	A COMMENT	\N	2014-05-22 11:11:57	2014-05-22 11:11:57
778	3	165	A COMMENT	\N	2014-05-28 11:08:24	2014-05-28 11:08:24
779	3	165	A COMMENT	\N	2014-06-30 00:39:24	2014-06-30 00:39:24
780	39	165	A COMMENT	\N	2014-07-20 09:34:01	2014-07-20 09:34:01
781	47	166	A COMMENT	\N	2013-12-10 22:32:58	2013-12-10 22:32:58
782	47	166	A COMMENT	\N	2013-12-22 13:06:56	2013-12-22 13:06:56
783	21	166	A COMMENT	\N	2014-07-08 06:15:03	2014-07-08 06:15:03
784	47	167	A COMMENT	\N	2014-01-02 04:25:25	2014-01-02 04:25:25
785	43	167	A COMMENT	\N	2014-01-29 13:36:34	2014-01-29 13:36:34
786	39	167	A COMMENT	\N	2014-06-28 12:06:14	2014-06-28 12:06:14
787	32	168	A COMMENT	\N	2014-03-30 14:45:50	2014-03-30 14:45:50
788	11	168	A COMMENT	\N	2014-05-07 09:35:14	2014-05-07 09:35:14
789	47	169	A COMMENT	\N	2013-11-25 13:35:27	2013-11-25 13:35:27
790	4	169	A COMMENT	\N	2014-02-18 00:05:36	2014-02-18 00:05:36
791	14	169	A COMMENT	\N	2014-03-08 17:44:38	2014-03-08 17:44:38
792	8	169	A COMMENT	\N	2014-05-01 13:08:57	2014-05-01 13:08:57
793	8	169	A COMMENT	\N	2014-07-24 19:25:50	2014-07-24 19:25:50
794	47	170	A COMMENT	\N	2013-12-02 03:54:55	2013-12-02 03:54:55
795	30	170	A COMMENT	\N	2013-12-05 19:44:10	2013-12-05 19:44:10
796	43	170	A COMMENT	\N	2014-03-07 18:36:43	2014-03-07 18:36:43
797	39	170	A COMMENT	\N	2014-03-23 14:55:07	2014-03-23 14:55:07
798	37	170	A COMMENT	\N	2014-07-05 23:54:01	2014-07-05 23:54:01
799	48	173	A COMMENT	\N	2014-02-20 07:08:37	2014-02-20 07:08:37
800	21	174	A COMMENT	\N	2013-12-21 20:43:19	2013-12-21 20:43:19
801	10	174	A COMMENT	\N	2013-12-28 05:11:32	2013-12-28 05:11:32
802	30	174	A COMMENT	\N	2013-12-29 05:35:02	2013-12-29 05:35:02
803	14	174	A COMMENT	\N	2013-12-30 19:08:27	2013-12-30 19:08:27
804	8	174	A COMMENT	\N	2014-02-21 12:59:37	2014-02-21 12:59:37
805	4	174	A COMMENT	\N	2014-02-26 01:39:02	2014-02-26 01:39:02
806	1	174	A COMMENT	\N	2014-03-31 09:17:13	2014-03-31 09:17:13
807	21	174	A COMMENT	\N	2014-04-14 11:49:40	2014-04-14 11:49:40
808	43	174	A COMMENT	\N	2014-04-18 03:26:05	2014-04-18 03:26:05
809	2	174	A COMMENT	\N	2014-04-29 12:55:55	2014-04-29 12:55:55
810	8	174	A COMMENT	\N	2014-05-01 11:05:38	2014-05-01 11:05:38
811	27	174	A COMMENT	\N	2014-05-14 21:32:55	2014-05-14 21:32:55
812	4	174	A COMMENT	\N	2014-05-15 21:27:27	2014-05-15 21:27:27
813	28	174	A COMMENT	\N	2014-05-25 12:38:03	2014-05-25 12:38:03
814	3	174	A COMMENT	\N	2014-06-08 14:10:59	2014-06-08 14:10:59
815	37	174	A COMMENT	\N	2014-06-18 09:09:11	2014-06-18 09:09:11
816	14	174	A COMMENT	\N	2014-07-04 08:31:32	2014-07-04 08:31:32
817	43	174	A COMMENT	\N	2014-07-21 15:53:31	2014-07-21 15:53:31
818	11	174	A COMMENT	\N	2014-07-25 00:35:14	2014-07-25 00:35:14
819	45	174	A COMMENT	\N	2014-07-25 11:18:03	2014-07-25 11:18:03
820	48	175	A COMMENT	\N	2013-12-11 20:34:00	2013-12-11 20:34:00
821	39	176	A COMMENT	\N	2014-01-29 02:18:42	2014-01-29 02:18:42
822	43	176	A COMMENT	\N	2014-02-04 02:51:23	2014-02-04 02:51:23
823	8	176	A COMMENT	\N	2014-02-07 10:31:22	2014-02-07 10:31:22
824	28	176	A COMMENT	\N	2014-02-17 21:29:42	2014-02-17 21:29:42
825	21	176	A COMMENT	\N	2014-03-29 09:58:33	2014-03-29 09:58:33
826	47	176	A COMMENT	\N	2014-04-03 02:02:39	2014-04-03 02:02:39
827	1	176	A COMMENT	\N	2014-06-02 15:42:54	2014-06-02 15:42:54
828	11	176	A COMMENT	\N	2014-07-09 23:55:27	2014-07-09 23:55:27
829	4	176	A COMMENT	\N	2014-07-22 22:24:16	2014-07-22 22:24:16
830	2	177	A COMMENT	\N	2014-05-02 18:16:13	2014-05-02 18:16:13
831	11	177	A COMMENT	\N	2014-05-20 12:52:40	2014-05-20 12:52:40
832	10	178	A COMMENT	\N	2014-01-17 14:17:06	2014-01-17 14:17:06
833	39	178	A COMMENT	\N	2014-02-06 21:25:55	2014-02-06 21:25:55
834	8	178	A COMMENT	\N	2014-04-14 11:07:36	2014-04-14 11:07:36
835	2	178	A COMMENT	\N	2014-04-17 09:37:21	2014-04-17 09:37:21
836	48	179	A COMMENT	\N	2014-03-12 15:44:49	2014-03-12 15:44:49
837	45	179	A COMMENT	\N	2014-03-17 15:01:19	2014-03-17 15:01:19
838	3	179	A COMMENT	\N	2014-04-03 12:30:43	2014-04-03 12:30:43
839	21	179	A COMMENT	\N	2014-04-03 18:54:44	2014-04-03 18:54:44
840	4	179	A COMMENT	\N	2014-04-16 21:35:44	2014-04-16 21:35:44
841	47	179	A COMMENT	\N	2014-07-24 16:31:56	2014-07-24 16:31:56
842	4	180	A COMMENT	\N	2014-05-24 12:24:48	2014-05-24 12:24:48
843	10	180	A COMMENT	\N	2014-06-14 23:31:29	2014-06-14 23:31:29
844	48	181	A COMMENT	\N	2013-12-01 04:53:16	2013-12-01 04:53:16
845	1	181	A COMMENT	\N	2013-12-16 04:42:50	2013-12-16 04:42:50
846	39	181	A COMMENT	\N	2014-01-14 20:36:58	2014-01-14 20:36:58
847	28	181	A COMMENT	\N	2014-03-16 18:50:59	2014-03-16 18:50:59
848	1	181	A COMMENT	\N	2014-06-04 20:08:36	2014-06-04 20:08:36
849	4	181	A COMMENT	\N	2014-06-14 14:06:07	2014-06-14 14:06:07
850	11	181	A COMMENT	\N	2014-06-14 15:30:43	2014-06-14 15:30:43
851	47	181	A COMMENT	\N	2014-06-19 09:07:13	2014-06-19 09:07:13
852	48	182	A COMMENT	\N	2014-02-27 04:10:17	2014-02-27 04:10:17
853	21	182	A COMMENT	\N	2014-07-10 04:30:56	2014-07-10 04:30:56
854	39	183	A COMMENT	\N	2014-03-09 13:40:45	2014-03-09 13:40:45
855	11	183	A COMMENT	\N	2014-03-26 17:08:05	2014-03-26 17:08:05
856	4	183	A COMMENT	\N	2014-05-28 19:52:03	2014-05-28 19:52:03
857	8	183	A COMMENT	\N	2014-06-28 05:53:06	2014-06-28 05:53:06
858	39	183	A COMMENT	\N	2014-06-30 02:52:28	2014-06-30 02:52:28
859	48	185	A COMMENT	\N	2013-11-28 02:10:37	2013-11-28 02:10:37
860	45	185	A COMMENT	\N	2014-04-30 22:01:29	2014-04-30 22:01:29
861	8	185	A COMMENT	\N	2014-05-09 00:45:10	2014-05-09 00:45:10
862	32	185	A COMMENT	\N	2014-06-03 22:13:00	2014-06-03 22:13:00
863	1	186	A COMMENT	\N	2014-03-09 23:50:00	2014-03-09 23:50:00
864	27	188	A COMMENT	\N	2014-01-08 10:06:25	2014-01-08 10:06:25
865	39	189	A COMMENT	\N	2014-03-02 06:34:34	2014-03-02 06:34:34
866	1	189	A COMMENT	\N	2014-03-18 02:43:47	2014-03-18 02:43:47
867	27	189	A COMMENT	\N	2014-03-22 05:54:43	2014-03-22 05:54:43
868	47	189	A COMMENT	\N	2014-04-21 02:31:31	2014-04-21 02:31:31
869	2	189	A COMMENT	\N	2014-04-25 06:02:47	2014-04-25 06:02:47
870	8	189	A COMMENT	\N	2014-04-28 20:28:37	2014-04-28 20:28:37
871	32	189	A COMMENT	\N	2014-05-14 19:16:01	2014-05-14 19:16:01
872	43	189	A COMMENT	\N	2014-06-29 12:31:59	2014-06-29 12:31:59
873	3	189	A COMMENT	\N	2014-07-01 08:38:37	2014-07-01 08:38:37
874	32	189	A COMMENT	\N	2014-07-03 20:10:24	2014-07-03 20:10:24
875	48	190	A COMMENT	\N	2014-03-03 03:46:56	2014-03-03 03:46:56
876	32	190	A COMMENT	\N	2014-03-31 09:21:01	2014-03-31 09:21:01
877	11	190	A COMMENT	\N	2014-05-05 17:24:19	2014-05-05 17:24:19
878	39	190	A COMMENT	\N	2014-07-09 07:21:31	2014-07-09 07:21:31
879	48	191	A COMMENT	\N	2014-01-25 22:45:51	2014-01-25 22:45:51
880	43	191	A COMMENT	\N	2014-03-29 21:36:05	2014-03-29 21:36:05
881	11	191	A COMMENT	\N	2014-05-21 05:25:42	2014-05-21 05:25:42
882	30	191	A COMMENT	\N	2014-05-27 02:27:16	2014-05-27 02:27:16
883	39	191	A COMMENT	\N	2014-05-30 13:57:48	2014-05-30 13:57:48
884	4	191	A COMMENT	\N	2014-06-22 19:24:44	2014-06-22 19:24:44
885	1	191	A COMMENT	\N	2014-07-22 20:30:57	2014-07-22 20:30:57
886	21	191	A COMMENT	\N	2014-07-23 12:01:23	2014-07-23 12:01:23
887	48	192	A COMMENT	\N	2014-03-07 02:05:46	2014-03-07 02:05:46
888	48	193	A COMMENT	\N	2014-03-23 03:01:28	2014-03-23 03:01:28
889	30	194	A COMMENT	\N	2013-12-15 02:34:20	2013-12-15 02:34:20
890	21	194	A COMMENT	\N	2014-01-15 12:44:43	2014-01-15 12:44:43
891	21	194	A COMMENT	\N	2014-02-24 01:17:00	2014-02-24 01:17:00
892	14	194	A COMMENT	\N	2014-07-16 20:08:10	2014-07-16 20:08:10
893	43	196	A COMMENT	\N	2014-01-26 05:00:53	2014-01-26 05:00:53
894	1	196	A COMMENT	\N	2014-02-07 11:13:37	2014-02-07 11:13:37
895	4	196	A COMMENT	\N	2014-02-10 09:57:46	2014-02-10 09:57:46
896	11	196	A COMMENT	\N	2014-03-03 15:23:16	2014-03-03 15:23:16
897	2	196	A COMMENT	\N	2014-03-06 15:53:59	2014-03-06 15:53:59
898	39	196	A COMMENT	\N	2014-03-21 09:59:23	2014-03-21 09:59:23
899	2	196	A COMMENT	\N	2014-05-05 04:18:47	2014-05-05 04:18:47
900	30	196	A COMMENT	\N	2014-05-14 22:43:19	2014-05-14 22:43:19
901	3	196	A COMMENT	\N	2014-05-28 16:58:54	2014-05-28 16:58:54
902	21	196	A COMMENT	\N	2014-06-23 22:38:43	2014-06-23 22:38:43
903	48	197	A COMMENT	\N	2014-03-03 17:09:19	2014-03-03 17:09:19
904	28	197	A COMMENT	\N	2014-03-26 17:26:41	2014-03-26 17:26:41
905	11	197	A COMMENT	\N	2014-04-17 21:27:51	2014-04-17 21:27:51
906	14	197	A COMMENT	\N	2014-06-02 11:20:49	2014-06-02 11:20:49
907	21	197	A COMMENT	\N	2014-07-04 16:18:05	2014-07-04 16:18:05
908	48	199	A COMMENT	\N	2014-03-10 21:33:35	2014-03-10 21:33:35
909	30	199	A COMMENT	\N	2014-06-16 00:26:56	2014-06-16 00:26:56
910	8	200	A COMMENT	\N	2014-03-15 23:05:11	2014-03-15 23:05:11
911	47	200	A COMMENT	\N	2014-03-21 12:39:57	2014-03-21 12:39:57
912	47	200	A COMMENT	\N	2014-05-24 05:48:43	2014-05-24 05:48:43
913	32	200	A COMMENT	\N	2014-06-05 05:04:23	2014-06-05 05:04:23
914	30	200	A COMMENT	\N	2014-06-20 08:55:23	2014-06-20 08:55:23
915	3	200	A COMMENT	\N	2014-07-08 17:05:08	2014-07-08 17:05:08
916	37	200	A COMMENT	\N	2014-07-15 18:44:06	2014-07-15 18:44:06
917	4	201	A COMMENT	\N	2014-04-12 07:53:08	2014-04-12 07:53:08
918	10	201	A COMMENT	\N	2014-04-20 18:51:47	2014-04-20 18:51:47
919	32	201	A COMMENT	\N	2014-06-16 16:48:28	2014-06-16 16:48:28
920	3	201	A COMMENT	\N	2014-07-08 19:57:16	2014-07-08 19:57:16
921	30	202	A COMMENT	\N	2014-01-22 05:41:46	2014-01-22 05:41:46
922	27	202	A COMMENT	\N	2014-04-26 15:18:19	2014-04-26 15:18:19
923	32	202	A COMMENT	\N	2014-05-30 09:06:03	2014-05-30 09:06:03
924	14	202	A COMMENT	\N	2014-07-09 20:35:48	2014-07-09 20:35:48
925	48	203	A COMMENT	\N	2013-11-27 15:40:53	2013-11-27 15:40:53
926	47	203	A COMMENT	\N	2013-12-15 08:26:01	2013-12-15 08:26:01
927	3	203	A COMMENT	\N	2013-12-22 06:25:14	2013-12-22 06:25:14
928	43	203	A COMMENT	\N	2014-02-03 15:42:19	2014-02-03 15:42:19
929	8	203	A COMMENT	\N	2014-02-17 14:16:45	2014-02-17 14:16:45
930	39	203	A COMMENT	\N	2014-03-17 13:24:42	2014-03-17 13:24:42
931	10	203	A COMMENT	\N	2014-03-26 08:05:41	2014-03-26 08:05:41
932	1	203	A COMMENT	\N	2014-05-16 08:14:35	2014-05-16 08:14:35
933	37	203	A COMMENT	\N	2014-07-19 21:39:28	2014-07-19 21:39:28
934	1	205	A COMMENT	\N	2014-03-22 11:25:49	2014-03-22 11:25:49
935	3	205	A COMMENT	\N	2014-04-17 02:51:10	2014-04-17 02:51:10
936	37	205	A COMMENT	\N	2014-05-08 13:21:56	2014-05-08 13:21:56
937	2	205	A COMMENT	\N	2014-06-05 10:33:14	2014-06-05 10:33:14
938	10	206	A COMMENT	\N	2014-06-27 22:17:09	2014-06-27 22:17:09
939	27	206	A COMMENT	\N	2014-07-17 10:19:24	2014-07-17 10:19:24
940	28	206	A COMMENT	\N	2014-07-20 19:50:13	2014-07-20 19:50:13
941	48	207	A COMMENT	\N	2014-03-01 03:18:33	2014-03-01 03:18:33
942	21	207	A COMMENT	\N	2014-03-26 16:40:39	2014-03-26 16:40:39
943	43	207	A COMMENT	\N	2014-04-08 14:35:42	2014-04-08 14:35:42
944	11	207	A COMMENT	\N	2014-06-26 20:50:04	2014-06-26 20:50:04
945	28	207	A COMMENT	\N	2014-07-09 14:25:15	2014-07-09 14:25:15
946	32	207	A COMMENT	\N	2014-07-26 01:45:19	2014-07-26 01:45:19
947	48	208	A COMMENT	\N	2014-01-21 11:33:47	2014-01-21 11:33:47
948	32	209	A COMMENT	\N	2014-03-05 09:33:20	2014-03-05 09:33:20
949	39	209	A COMMENT	\N	2014-04-02 01:07:06	2014-04-02 01:07:06
950	28	209	A COMMENT	\N	2014-05-14 11:05:08	2014-05-14 11:05:08
951	47	209	A COMMENT	\N	2014-05-18 19:15:55	2014-05-18 19:15:55
952	2	209	A COMMENT	\N	2014-05-24 17:05:34	2014-05-24 17:05:34
953	32	210	A COMMENT	\N	2014-05-05 00:27:30	2014-05-05 00:27:30
954	45	210	A COMMENT	\N	2014-06-25 19:43:50	2014-06-25 19:43:50
955	30	210	A COMMENT	\N	2014-07-12 08:26:33	2014-07-12 08:26:33
956	48	213	A COMMENT	\N	2014-02-15 19:10:10	2014-02-15 19:10:10
957	48	214	A COMMENT	\N	2014-04-11 16:13:40	2014-04-11 16:13:40
958	48	215	A COMMENT	\N	2014-05-06 03:04:21	2014-05-06 03:04:21
959	1	215	A COMMENT	\N	2014-06-12 15:13:46	2014-06-12 15:13:46
960	14	215	A COMMENT	\N	2014-06-16 07:26:03	2014-06-16 07:26:03
961	4	215	A COMMENT	\N	2014-06-30 03:41:41	2014-06-30 03:41:41
962	39	215	A COMMENT	\N	2014-07-04 04:40:16	2014-07-04 04:40:16
963	2	215	A COMMENT	\N	2014-07-20 03:34:35	2014-07-20 03:34:35
964	48	216	A COMMENT	\N	2014-05-17 13:55:44	2014-05-17 13:55:44
965	11	216	A COMMENT	\N	2014-06-24 10:27:38	2014-06-24 10:27:38
966	48	217	A COMMENT	\N	2013-12-17 23:39:39	2013-12-17 23:39:39
967	21	217	A COMMENT	\N	2013-12-20 06:15:56	2013-12-20 06:15:56
968	39	217	A COMMENT	\N	2014-01-22 02:29:28	2014-01-22 02:29:28
969	10	217	A COMMENT	\N	2014-03-17 07:40:24	2014-03-17 07:40:24
970	32	217	A COMMENT	\N	2014-04-06 15:50:17	2014-04-06 15:50:17
971	37	217	A COMMENT	\N	2014-06-13 21:18:17	2014-06-13 21:18:17
972	4	217	A COMMENT	\N	2014-07-18 12:28:04	2014-07-18 12:28:04
973	43	217	A COMMENT	\N	2014-07-21 22:48:41	2014-07-21 22:48:41
974	14	219	A COMMENT	\N	2014-04-12 15:20:12	2014-04-12 15:20:12
975	48	220	A COMMENT	\N	2014-04-22 03:53:29	2014-04-22 03:53:29
976	48	221	A COMMENT	\N	2014-01-11 01:51:30	2014-01-11 01:51:30
977	43	221	A COMMENT	\N	2014-02-04 05:44:06	2014-02-04 05:44:06
978	32	221	A COMMENT	\N	2014-02-19 20:34:26	2014-02-19 20:34:26
979	4	221	A COMMENT	\N	2014-03-16 14:49:36	2014-03-16 14:49:36
980	43	221	A COMMENT	\N	2014-03-21 12:43:15	2014-03-21 12:43:15
981	8	221	A COMMENT	\N	2014-04-18 14:17:49	2014-04-18 14:17:49
982	11	221	A COMMENT	\N	2014-04-20 08:08:54	2014-04-20 08:08:54
983	37	221	A COMMENT	\N	2014-05-09 02:18:16	2014-05-09 02:18:16
984	28	221	A COMMENT	\N	2014-06-02 07:53:27	2014-06-02 07:53:27
985	32	221	A COMMENT	\N	2014-06-19 13:04:16	2014-06-19 13:04:16
986	28	221	A COMMENT	\N	2014-06-20 23:57:18	2014-06-20 23:57:18
987	21	223	A COMMENT	\N	2014-02-18 22:57:42	2014-02-18 22:57:42
988	28	223	A COMMENT	\N	2014-04-13 15:53:20	2014-04-13 15:53:20
989	43	223	A COMMENT	\N	2014-05-17 07:59:38	2014-05-17 07:59:38
990	11	224	A COMMENT	\N	2014-02-03 16:10:39	2014-02-03 16:10:39
991	37	225	A COMMENT	\N	2014-03-04 21:10:55	2014-03-04 21:10:55
992	8	225	A COMMENT	\N	2014-03-07 15:19:15	2014-03-07 15:19:15
993	8	226	A COMMENT	\N	2014-04-19 13:48:53	2014-04-19 13:48:53
994	47	226	A COMMENT	\N	2014-04-21 00:27:52	2014-04-21 00:27:52
995	28	226	A COMMENT	\N	2014-04-23 13:29:24	2014-04-23 13:29:24
996	3	226	A COMMENT	\N	2014-04-26 10:32:48	2014-04-26 10:32:48
997	32	226	A COMMENT	\N	2014-04-27 23:50:39	2014-04-27 23:50:39
998	21	226	A COMMENT	\N	2014-05-16 01:17:52	2014-05-16 01:17:52
999	28	226	A COMMENT	\N	2014-05-25 00:39:26	2014-05-25 00:39:26
1000	11	226	A COMMENT	\N	2014-06-09 12:00:29	2014-06-09 12:00:29
1001	27	226	A COMMENT	\N	2014-07-21 12:53:19	2014-07-21 12:53:19
1002	48	227	A COMMENT	\N	2013-12-12 16:32:42	2013-12-12 16:32:42
1003	14	227	A COMMENT	\N	2014-07-13 12:29:51	2014-07-13 12:29:51
1004	10	228	A COMMENT	\N	2014-03-30 14:24:11	2014-03-30 14:24:11
1005	14	228	A COMMENT	\N	2014-05-01 02:17:54	2014-05-01 02:17:54
1006	28	228	A COMMENT	\N	2014-05-04 08:17:38	2014-05-04 08:17:38
1007	11	228	A COMMENT	\N	2014-05-13 15:57:55	2014-05-13 15:57:55
1008	8	228	A COMMENT	\N	2014-05-25 21:24:15	2014-05-25 21:24:15
1009	21	228	A COMMENT	\N	2014-06-17 16:45:34	2014-06-17 16:45:34
1010	8	228	A COMMENT	\N	2014-06-17 19:15:17	2014-06-17 19:15:17
1011	1	228	A COMMENT	\N	2014-06-19 10:55:43	2014-06-19 10:55:43
1012	11	229	A COMMENT	\N	2014-05-04 05:57:37	2014-05-04 05:57:37
1013	43	229	A COMMENT	\N	2014-05-29 06:07:21	2014-05-29 06:07:21
1014	21	229	A COMMENT	\N	2014-07-05 09:36:03	2014-07-05 09:36:03
1015	45	229	A COMMENT	\N	2014-07-14 09:56:00	2014-07-14 09:56:00
1016	3	229	A COMMENT	\N	2014-07-21 05:52:51	2014-07-21 05:52:51
1017	25	230	A COMMENT	\N	2014-06-30 01:03:21	2014-06-30 01:03:21
1018	11	230	A COMMENT	\N	2014-07-01 23:57:46	2014-07-01 23:57:46
1019	21	230	A COMMENT	\N	2014-07-04 09:43:40	2014-07-04 09:43:40
1020	11	230	A COMMENT	\N	2014-07-06 10:16:36	2014-07-06 10:16:36
1021	1	230	A COMMENT	\N	2014-07-07 18:56:12	2014-07-07 18:56:12
1022	30	230	A COMMENT	\N	2014-07-11 15:53:42	2014-07-11 15:53:42
1023	43	230	A COMMENT	\N	2014-07-15 00:47:45	2014-07-15 00:47:45
1024	37	230	A COMMENT	\N	2014-07-15 07:49:50	2014-07-15 07:49:50
1025	39	230	A COMMENT	\N	2014-07-16 10:18:31	2014-07-16 10:18:31
1026	11	230	A COMMENT	\N	2014-07-19 20:05:02	2014-07-19 20:05:02
1027	10	230	A COMMENT	\N	2014-07-19 22:44:18	2014-07-19 22:44:18
1028	45	230	A COMMENT	\N	2014-07-20 04:42:06	2014-07-20 04:42:06
1029	8	230	A COMMENT	\N	2014-07-20 15:14:51	2014-07-20 15:14:51
1030	10	230	A COMMENT	\N	2014-07-23 01:54:40	2014-07-23 01:54:40
1031	3	230	A COMMENT	\N	2014-07-24 10:44:55	2014-07-24 10:44:55
1032	43	231	A COMMENT	\N	2014-07-18 18:59:18	2014-07-18 18:59:18
1033	25	234	A COMMENT	\N	2014-03-30 12:56:32	2014-03-30 12:56:32
1034	8	234	A COMMENT	\N	2014-05-01 03:21:52	2014-05-01 03:21:52
1035	11	234	A COMMENT	\N	2014-06-10 15:39:57	2014-06-10 15:39:57
1036	8	234	A COMMENT	\N	2014-06-27 19:52:30	2014-06-27 19:52:30
1037	21	234	A COMMENT	\N	2014-07-21 09:57:42	2014-07-21 09:57:42
1038	39	235	A COMMENT	\N	2014-05-26 17:31:49	2014-05-26 17:31:49
1039	45	235	A COMMENT	\N	2014-05-30 21:34:33	2014-05-30 21:34:33
1040	43	235	A COMMENT	\N	2014-06-03 01:54:26	2014-06-03 01:54:26
1041	47	235	A COMMENT	\N	2014-06-04 00:51:22	2014-06-04 00:51:22
1042	11	235	A COMMENT	\N	2014-06-10 22:30:19	2014-06-10 22:30:19
1043	3	235	A COMMENT	\N	2014-06-13 15:32:01	2014-06-13 15:32:01
1044	2	235	A COMMENT	\N	2014-06-19 09:24:38	2014-06-19 09:24:38
1045	28	235	A COMMENT	\N	2014-06-20 22:12:15	2014-06-20 22:12:15
1046	32	235	A COMMENT	\N	2014-06-25 04:46:37	2014-06-25 04:46:37
1047	14	235	A COMMENT	\N	2014-06-27 20:41:37	2014-06-27 20:41:37
1048	11	235	A COMMENT	\N	2014-06-30 05:02:39	2014-06-30 05:02:39
1049	4	235	A COMMENT	\N	2014-07-01 00:35:27	2014-07-01 00:35:27
1050	2	235	A COMMENT	\N	2014-07-03 15:02:26	2014-07-03 15:02:26
1051	30	235	A COMMENT	\N	2014-07-06 09:31:31	2014-07-06 09:31:31
1052	21	235	A COMMENT	\N	2014-07-07 05:41:13	2014-07-07 05:41:13
1053	30	235	A COMMENT	\N	2014-07-13 19:17:46	2014-07-13 19:17:46
1054	37	235	A COMMENT	\N	2014-07-17 10:55:56	2014-07-17 10:55:56
1055	30	235	A COMMENT	\N	2014-07-23 01:10:46	2014-07-23 01:10:46
1056	25	237	A COMMENT	\N	2014-04-05 01:03:54	2014-04-05 01:03:54
1057	2	237	A COMMENT	\N	2014-04-12 15:05:52	2014-04-12 15:05:52
1058	25	239	A COMMENT	\N	2014-05-18 12:17:08	2014-05-18 12:17:08
1059	21	239	A COMMENT	\N	2014-05-19 08:23:34	2014-05-19 08:23:34
1060	28	239	A COMMENT	\N	2014-05-23 02:23:41	2014-05-23 02:23:41
1061	30	239	A COMMENT	\N	2014-05-29 15:24:12	2014-05-29 15:24:12
1062	11	239	A COMMENT	\N	2014-06-02 23:58:05	2014-06-02 23:58:05
1063	27	239	A COMMENT	\N	2014-06-03 21:16:17	2014-06-03 21:16:17
1064	1	239	A COMMENT	\N	2014-06-04 17:09:17	2014-06-04 17:09:17
1065	3	239	A COMMENT	\N	2014-06-14 08:27:17	2014-06-14 08:27:17
1066	37	239	A COMMENT	\N	2014-06-17 03:39:27	2014-06-17 03:39:27
1067	27	239	A COMMENT	\N	2014-06-18 14:25:39	2014-06-18 14:25:39
1068	32	239	A COMMENT	\N	2014-06-18 18:22:47	2014-06-18 18:22:47
1069	45	239	A COMMENT	\N	2014-06-19 05:45:44	2014-06-19 05:45:44
1070	4	239	A COMMENT	\N	2014-06-22 22:41:39	2014-06-22 22:41:39
1071	43	239	A COMMENT	\N	2014-06-30 13:50:07	2014-06-30 13:50:07
1072	37	239	A COMMENT	\N	2014-07-03 20:29:54	2014-07-03 20:29:54
1073	32	239	A COMMENT	\N	2014-07-07 23:58:26	2014-07-07 23:58:26
1074	45	239	A COMMENT	\N	2014-07-20 10:25:39	2014-07-20 10:25:39
1075	47	239	A COMMENT	\N	2014-07-26 02:04:43	2014-07-26 02:04:43
1076	6	241	A COMMENT	\N	2014-05-03 09:27:22	2014-05-03 09:27:22
1077	32	243	A COMMENT	\N	2014-06-15 10:59:14	2014-06-15 10:59:14
1078	45	243	A COMMENT	\N	2014-06-24 11:17:06	2014-06-24 11:17:06
1079	27	244	A COMMENT	\N	2014-07-20 09:28:14	2014-07-20 09:28:14
1080	45	245	A COMMENT	\N	2014-07-15 05:01:06	2014-07-15 05:01:06
1081	4	245	A COMMENT	\N	2014-07-17 06:25:58	2014-07-17 06:25:58
1082	14	245	A COMMENT	\N	2014-07-18 12:10:57	2014-07-18 12:10:57
1083	3	245	A COMMENT	\N	2014-07-22 22:55:34	2014-07-22 22:55:34
1084	27	245	A COMMENT	\N	2014-07-25 00:06:34	2014-07-25 00:06:34
1085	1	245	A COMMENT	\N	2014-07-25 01:37:13	2014-07-25 01:37:13
1086	11	245	A COMMENT	\N	2014-07-26 10:19:52	2014-07-26 10:19:52
1087	21	246	A COMMENT	\N	2014-05-04 20:35:13	2014-05-04 20:35:13
1088	10	248	A COMMENT	\N	2014-03-24 12:33:05	2014-03-24 12:33:05
1089	45	248	A COMMENT	\N	2014-05-04 18:05:32	2014-05-04 18:05:32
1090	1	248	A COMMENT	\N	2014-05-17 07:17:15	2014-05-17 07:17:15
1091	21	248	A COMMENT	\N	2014-06-06 09:14:40	2014-06-06 09:14:40
1092	14	248	A COMMENT	\N	2014-06-28 07:57:31	2014-06-28 07:57:31
1093	47	248	A COMMENT	\N	2014-07-09 11:01:24	2014-07-09 11:01:24
1094	28	248	A COMMENT	\N	2014-07-12 13:17:30	2014-07-12 13:17:30
1095	22	249	A COMMENT	\N	2014-01-19 11:44:09	2014-01-19 11:44:09
1096	28	249	A COMMENT	\N	2014-02-02 15:50:07	2014-02-02 15:50:07
1097	32	249	A COMMENT	\N	2014-02-17 12:52:26	2014-02-17 12:52:26
1098	45	249	A COMMENT	\N	2014-02-18 05:37:23	2014-02-18 05:37:23
1099	8	249	A COMMENT	\N	2014-02-19 09:48:00	2014-02-19 09:48:00
1100	21	249	A COMMENT	\N	2014-03-03 12:41:52	2014-03-03 12:41:52
1101	47	249	A COMMENT	\N	2014-03-08 22:20:40	2014-03-08 22:20:40
1102	3	249	A COMMENT	\N	2014-03-13 14:34:29	2014-03-13 14:34:29
1103	2	249	A COMMENT	\N	2014-04-04 01:46:08	2014-04-04 01:46:08
1104	27	249	A COMMENT	\N	2014-04-16 23:03:38	2014-04-16 23:03:38
1105	39	249	A COMMENT	\N	2014-04-24 18:03:03	2014-04-24 18:03:03
1106	14	249	A COMMENT	\N	2014-05-02 20:52:58	2014-05-02 20:52:58
1107	21	249	A COMMENT	\N	2014-07-06 12:31:20	2014-07-06 12:31:20
1108	8	249	A COMMENT	\N	2014-07-20 08:18:49	2014-07-20 08:18:49
1109	22	250	A COMMENT	\N	2014-02-16 06:25:16	2014-02-16 06:25:16
1110	47	250	A COMMENT	\N	2014-07-25 18:11:33	2014-07-25 18:11:33
1111	27	251	A COMMENT	\N	2014-03-12 22:22:21	2014-03-12 22:22:21
1112	2	251	A COMMENT	\N	2014-03-14 12:52:33	2014-03-14 12:52:33
1113	8	251	A COMMENT	\N	2014-03-25 23:19:03	2014-03-25 23:19:03
1114	28	251	A COMMENT	\N	2014-04-18 07:41:54	2014-04-18 07:41:54
1115	37	251	A COMMENT	\N	2014-04-19 19:46:48	2014-04-19 19:46:48
1116	43	251	A COMMENT	\N	2014-04-19 22:10:55	2014-04-19 22:10:55
1117	1	251	A COMMENT	\N	2014-04-24 21:12:16	2014-04-24 21:12:16
1118	3	251	A COMMENT	\N	2014-04-26 23:43:34	2014-04-26 23:43:34
1119	37	251	A COMMENT	\N	2014-04-30 19:19:38	2014-04-30 19:19:38
1120	37	251	A COMMENT	\N	2014-05-07 22:27:24	2014-05-07 22:27:24
1121	4	251	A COMMENT	\N	2014-05-08 09:16:16	2014-05-08 09:16:16
1122	14	251	A COMMENT	\N	2014-05-27 12:13:30	2014-05-27 12:13:30
1123	14	251	A COMMENT	\N	2014-06-04 00:15:36	2014-06-04 00:15:36
1124	43	251	A COMMENT	\N	2014-06-24 18:02:59	2014-06-24 18:02:59
1125	30	251	A COMMENT	\N	2014-07-16 11:13:41	2014-07-16 11:13:41
1126	8	251	A COMMENT	\N	2014-07-26 11:33:28	2014-07-26 11:33:28
1127	8	252	A COMMENT	\N	2014-04-30 03:52:24	2014-04-30 03:52:24
1128	21	252	A COMMENT	\N	2014-05-04 08:07:25	2014-05-04 08:07:25
1129	27	252	A COMMENT	\N	2014-06-01 12:21:05	2014-06-01 12:21:05
1130	28	252	A COMMENT	\N	2014-06-08 23:23:25	2014-06-08 23:23:25
1131	37	252	A COMMENT	\N	2014-07-10 00:37:16	2014-07-10 00:37:16
1132	22	253	A COMMENT	\N	2014-03-15 09:03:10	2014-03-15 09:03:10
1133	2	255	A COMMENT	\N	2013-12-28 07:57:57	2013-12-28 07:57:57
1134	39	255	A COMMENT	\N	2014-04-03 12:34:21	2014-04-03 12:34:21
1135	39	255	A COMMENT	\N	2014-05-13 00:59:19	2014-05-13 00:59:19
1136	43	255	A COMMENT	\N	2014-07-12 06:30:07	2014-07-12 06:30:07
1137	3	256	A COMMENT	\N	2014-03-02 18:54:04	2014-03-02 18:54:04
1138	45	257	A COMMENT	\N	2014-02-15 15:19:15	2014-02-15 15:19:15
1139	39	257	A COMMENT	\N	2014-02-17 19:01:35	2014-02-17 19:01:35
1140	37	257	A COMMENT	\N	2014-03-25 01:29:21	2014-03-25 01:29:21
1141	32	257	A COMMENT	\N	2014-03-25 15:37:12	2014-03-25 15:37:12
1142	30	257	A COMMENT	\N	2014-04-17 11:11:26	2014-04-17 11:11:26
1143	27	257	A COMMENT	\N	2014-05-03 19:03:35	2014-05-03 19:03:35
1144	21	257	A COMMENT	\N	2014-05-14 16:52:53	2014-05-14 16:52:53
1145	39	257	A COMMENT	\N	2014-06-25 13:57:04	2014-06-25 13:57:04
1146	8	257	A COMMENT	\N	2014-07-01 06:54:45	2014-07-01 06:54:45
1147	39	257	A COMMENT	\N	2014-07-16 13:41:52	2014-07-16 13:41:52
1148	37	258	A COMMENT	\N	2014-06-05 23:27:11	2014-06-05 23:27:11
1149	3	258	A COMMENT	\N	2014-06-27 05:16:01	2014-06-27 05:16:01
1150	8	258	A COMMENT	\N	2014-06-28 11:39:46	2014-06-28 11:39:46
1151	45	258	A COMMENT	\N	2014-07-05 15:02:33	2014-07-05 15:02:33
1152	8	258	A COMMENT	\N	2014-07-12 16:33:29	2014-07-12 16:33:29
1153	28	258	A COMMENT	\N	2014-07-24 18:32:53	2014-07-24 18:32:53
1154	1	258	A COMMENT	\N	2014-07-26 03:51:03	2014-07-26 03:51:03
1155	2	259	A COMMENT	\N	2014-07-21 18:54:04	2014-07-21 18:54:04
1156	2	260	A COMMENT	\N	2014-06-27 11:18:47	2014-06-27 11:18:47
1157	1	260	A COMMENT	\N	2014-07-06 11:37:51	2014-07-06 11:37:51
1158	32	260	A COMMENT	\N	2014-07-11 08:17:07	2014-07-11 08:17:07
1159	20	262	A COMMENT	\N	2014-06-12 09:33:47	2014-06-12 09:33:47
1160	10	262	A COMMENT	\N	2014-06-15 20:10:29	2014-06-15 20:10:29
1161	3	262	A COMMENT	\N	2014-07-04 04:43:28	2014-07-04 04:43:28
1162	27	262	A COMMENT	\N	2014-07-06 16:20:59	2014-07-06 16:20:59
1163	43	262	A COMMENT	\N	2014-07-16 16:38:25	2014-07-16 16:38:25
1164	21	262	A COMMENT	\N	2014-07-24 23:28:36	2014-07-24 23:28:36
1165	28	265	A COMMENT	\N	2014-07-14 20:51:33	2014-07-14 20:51:33
1166	30	265	A COMMENT	\N	2014-07-20 13:42:04	2014-07-20 13:42:04
1167	14	265	A COMMENT	\N	2014-07-20 18:14:44	2014-07-20 18:14:44
1168	32	265	A COMMENT	\N	2014-07-24 09:19:25	2014-07-24 09:19:25
1169	2	265	A COMMENT	\N	2014-07-26 18:16:48	2014-07-26 18:16:48
1170	21	266	A COMMENT	\N	2014-06-18 13:48:41	2014-06-18 13:48:41
1171	11	266	A COMMENT	\N	2014-06-21 00:34:37	2014-06-21 00:34:37
1172	47	266	A COMMENT	\N	2014-06-28 13:40:35	2014-06-28 13:40:35
1173	8	266	A COMMENT	\N	2014-07-02 20:49:36	2014-07-02 20:49:36
1174	14	266	A COMMENT	\N	2014-07-03 10:31:10	2014-07-03 10:31:10
1175	4	266	A COMMENT	\N	2014-07-04 12:16:35	2014-07-04 12:16:35
1176	47	266	A COMMENT	\N	2014-07-06 21:11:01	2014-07-06 21:11:01
1177	32	266	A COMMENT	\N	2014-07-07 16:40:05	2014-07-07 16:40:05
1178	43	266	A COMMENT	\N	2014-07-24 10:48:05	2014-07-24 10:48:05
1179	3	267	A COMMENT	\N	2014-07-06 07:35:53	2014-07-06 07:35:53
1180	11	267	A COMMENT	\N	2014-07-06 11:08:48	2014-07-06 11:08:48
1181	47	267	A COMMENT	\N	2014-07-09 00:43:03	2014-07-09 00:43:03
1182	1	267	A COMMENT	\N	2014-07-09 20:36:11	2014-07-09 20:36:11
1183	43	267	A COMMENT	\N	2014-07-19 07:15:57	2014-07-19 07:15:57
1184	4	267	A COMMENT	\N	2014-07-21 06:12:56	2014-07-21 06:12:56
1185	32	267	A COMMENT	\N	2014-07-22 23:16:49	2014-07-22 23:16:49
1186	11	267	A COMMENT	\N	2014-07-25 04:29:37	2014-07-25 04:29:37
1187	20	270	A COMMENT	\N	2014-06-18 17:56:49	2014-06-18 17:56:49
1188	20	271	A COMMENT	\N	2014-06-21 01:21:42	2014-06-21 01:21:42
1189	32	271	A COMMENT	\N	2014-07-10 19:38:00	2014-07-10 19:38:00
1190	1	271	A COMMENT	\N	2014-07-20 10:24:25	2014-07-20 10:24:25
1191	14	271	A COMMENT	\N	2014-07-25 13:04:18	2014-07-25 13:04:18
1192	20	272	A COMMENT	\N	2014-07-02 20:05:15	2014-07-02 20:05:15
1193	4	272	A COMMENT	\N	2014-07-06 18:42:41	2014-07-06 18:42:41
1194	30	272	A COMMENT	\N	2014-07-07 03:44:36	2014-07-07 03:44:36
1195	45	272	A COMMENT	\N	2014-07-15 04:40:06	2014-07-15 04:40:06
1196	30	273	A COMMENT	\N	2014-07-18 15:26:03	2014-07-18 15:26:03
1197	20	274	A COMMENT	\N	2014-06-21 08:32:07	2014-06-21 08:32:07
1198	43	274	A COMMENT	\N	2014-06-22 19:43:24	2014-06-22 19:43:24
1199	32	274	A COMMENT	\N	2014-06-29 00:25:47	2014-06-29 00:25:47
1200	45	274	A COMMENT	\N	2014-06-29 10:35:59	2014-06-29 10:35:59
1201	27	274	A COMMENT	\N	2014-07-20 13:06:06	2014-07-20 13:06:06
1202	10	274	A COMMENT	\N	2014-07-23 14:21:16	2014-07-23 14:21:16
1203	27	276	A COMMENT	\N	2014-07-15 08:43:29	2014-07-15 08:43:29
1204	43	276	A COMMENT	\N	2014-07-17 03:06:16	2014-07-17 03:06:16
1205	30	276	A COMMENT	\N	2014-07-18 00:33:10	2014-07-18 00:33:10
1206	32	276	A COMMENT	\N	2014-07-18 13:58:55	2014-07-18 13:58:55
1207	1	276	A COMMENT	\N	2014-07-20 06:42:17	2014-07-20 06:42:17
1208	43	276	A COMMENT	\N	2014-07-20 06:59:34	2014-07-20 06:59:34
1209	45	276	A COMMENT	\N	2014-07-20 23:42:02	2014-07-20 23:42:02
1210	2	276	A COMMENT	\N	2014-07-21 17:24:23	2014-07-21 17:24:23
1211	37	276	A COMMENT	\N	2014-07-23 22:06:23	2014-07-23 22:06:23
1212	32	276	A COMMENT	\N	2014-07-24 13:39:25	2014-07-24 13:39:25
1213	30	276	A COMMENT	\N	2014-07-25 11:26:22	2014-07-25 11:26:22
1214	1	276	A COMMENT	\N	2014-07-26 06:15:22	2014-07-26 06:15:22
1215	10	276	A COMMENT	\N	2014-07-26 11:56:47	2014-07-26 11:56:47
1216	20	278	A COMMENT	\N	2014-06-03 08:43:50	2014-06-03 08:43:50
1217	3	278	A COMMENT	\N	2014-06-05 05:18:14	2014-06-05 05:18:14
1218	43	278	A COMMENT	\N	2014-06-11 06:41:12	2014-06-11 06:41:12
1219	27	278	A COMMENT	\N	2014-06-15 21:54:46	2014-06-15 21:54:46
1220	37	278	A COMMENT	\N	2014-06-16 08:37:28	2014-06-16 08:37:28
1221	43	278	A COMMENT	\N	2014-06-20 04:26:05	2014-06-20 04:26:05
1222	45	278	A COMMENT	\N	2014-06-27 06:34:41	2014-06-27 06:34:41
1223	1	278	A COMMENT	\N	2014-07-02 11:13:50	2014-07-02 11:13:50
1224	8	278	A COMMENT	\N	2014-07-03 04:05:46	2014-07-03 04:05:46
1225	32	278	A COMMENT	\N	2014-07-03 16:27:13	2014-07-03 16:27:13
1226	10	278	A COMMENT	\N	2014-07-04 14:29:33	2014-07-04 14:29:33
1227	47	278	A COMMENT	\N	2014-07-06 20:14:45	2014-07-06 20:14:45
1228	27	278	A COMMENT	\N	2014-07-11 11:44:04	2014-07-11 11:44:04
1229	2	278	A COMMENT	\N	2014-07-12 10:26:53	2014-07-12 10:26:53
1230	45	278	A COMMENT	\N	2014-07-14 02:52:24	2014-07-14 02:52:24
1231	30	278	A COMMENT	\N	2014-07-19 06:40:58	2014-07-19 06:40:58
1232	47	278	A COMMENT	\N	2014-07-19 21:06:16	2014-07-19 21:06:16
1233	8	278	A COMMENT	\N	2014-07-20 04:21:55	2014-07-20 04:21:55
1234	4	278	A COMMENT	\N	2014-07-23 02:19:48	2014-07-23 02:19:48
1235	11	278	A COMMENT	\N	2014-07-26 11:44:24	2014-07-26 11:44:24
1236	1	279	A COMMENT	\N	2014-06-20 10:07:08	2014-06-20 10:07:08
1237	10	279	A COMMENT	\N	2014-06-24 10:20:45	2014-06-24 10:20:45
1238	11	279	A COMMENT	\N	2014-07-01 03:55:00	2014-07-01 03:55:00
1239	14	279	A COMMENT	\N	2014-07-06 12:05:12	2014-07-06 12:05:12
1240	45	279	A COMMENT	\N	2014-07-07 08:29:19	2014-07-07 08:29:19
1241	20	280	A COMMENT	\N	2014-06-16 04:53:20	2014-06-16 04:53:20
1242	8	280	A COMMENT	\N	2014-06-20 12:10:43	2014-06-20 12:10:43
1243	2	280	A COMMENT	\N	2014-06-23 00:15:34	2014-06-23 00:15:34
1244	3	280	A COMMENT	\N	2014-06-23 12:44:50	2014-06-23 12:44:50
1245	11	280	A COMMENT	\N	2014-06-25 00:04:55	2014-06-25 00:04:55
1246	47	280	A COMMENT	\N	2014-07-08 08:40:59	2014-07-08 08:40:59
1247	1	280	A COMMENT	\N	2014-07-09 17:31:42	2014-07-09 17:31:42
1248	4	280	A COMMENT	\N	2014-07-12 05:32:48	2014-07-12 05:32:48
1249	10	280	A COMMENT	\N	2014-07-14 08:45:36	2014-07-14 08:45:36
1250	27	280	A COMMENT	\N	2014-07-19 11:03:46	2014-07-19 11:03:46
1251	28	280	A COMMENT	\N	2014-07-21 11:10:16	2014-07-21 11:10:16
1252	21	280	A COMMENT	\N	2014-07-23 12:47:26	2014-07-23 12:47:26
1253	20	282	A COMMENT	\N	2014-06-12 23:09:10	2014-06-12 23:09:10
1254	21	282	A COMMENT	\N	2014-06-13 15:52:57	2014-06-13 15:52:57
1255	30	282	A COMMENT	\N	2014-06-21 09:19:11	2014-06-21 09:19:11
1256	3	282	A COMMENT	\N	2014-06-24 13:27:14	2014-06-24 13:27:14
1257	21	283	A COMMENT	\N	2014-07-23 11:06:23	2014-07-23 11:06:23
1258	10	283	A COMMENT	\N	2014-07-23 22:41:09	2014-07-23 22:41:09
1259	20	284	A COMMENT	\N	2014-07-10 04:31:30	2014-07-10 04:31:30
1260	8	284	A COMMENT	\N	2014-07-24 16:29:44	2014-07-24 16:29:44
1261	10	285	A COMMENT	\N	2014-07-20 02:46:47	2014-07-20 02:46:47
1262	14	285	A COMMENT	\N	2014-07-20 08:47:05	2014-07-20 08:47:05
1263	20	286	A COMMENT	\N	2014-06-05 05:25:56	2014-06-05 05:25:56
1264	43	286	A COMMENT	\N	2014-07-09 19:27:06	2014-07-09 19:27:06
1265	39	286	A COMMENT	\N	2014-07-11 16:24:24	2014-07-11 16:24:24
1266	30	286	A COMMENT	\N	2014-07-14 19:23:01	2014-07-14 19:23:01
1267	21	287	A COMMENT	\N	2014-06-18 01:33:29	2014-06-18 01:33:29
1268	28	287	A COMMENT	\N	2014-07-06 05:53:56	2014-07-06 05:53:56
1269	21	287	A COMMENT	\N	2014-07-06 09:07:43	2014-07-06 09:07:43
1270	8	287	A COMMENT	\N	2014-07-06 13:35:24	2014-07-06 13:35:24
1271	11	287	A COMMENT	\N	2014-07-08 18:10:52	2014-07-08 18:10:52
1272	45	287	A COMMENT	\N	2014-07-08 21:37:26	2014-07-08 21:37:26
1273	30	287	A COMMENT	\N	2014-07-09 01:04:45	2014-07-09 01:04:45
1274	20	288	A COMMENT	\N	2014-06-08 14:45:13	2014-06-08 14:45:13
1275	14	288	A COMMENT	\N	2014-06-13 19:50:07	2014-06-13 19:50:07
1276	39	288	A COMMENT	\N	2014-06-15 03:39:09	2014-06-15 03:39:09
1277	8	288	A COMMENT	\N	2014-06-16 14:52:31	2014-06-16 14:52:31
1278	30	288	A COMMENT	\N	2014-06-16 18:03:34	2014-06-16 18:03:34
1279	28	288	A COMMENT	\N	2014-06-17 16:58:54	2014-06-17 16:58:54
1280	43	288	A COMMENT	\N	2014-06-18 19:34:34	2014-06-18 19:34:34
1281	11	288	A COMMENT	\N	2014-06-20 04:06:54	2014-06-20 04:06:54
1282	14	288	A COMMENT	\N	2014-06-24 19:21:27	2014-06-24 19:21:27
1283	1	288	A COMMENT	\N	2014-06-26 18:27:41	2014-06-26 18:27:41
1284	21	288	A COMMENT	\N	2014-06-28 08:16:41	2014-06-28 08:16:41
1285	47	288	A COMMENT	\N	2014-06-28 11:35:55	2014-06-28 11:35:55
1286	21	288	A COMMENT	\N	2014-07-02 13:57:27	2014-07-02 13:57:27
1287	39	288	A COMMENT	\N	2014-07-07 09:59:49	2014-07-07 09:59:49
1288	3	288	A COMMENT	\N	2014-07-07 16:02:54	2014-07-07 16:02:54
1289	28	288	A COMMENT	\N	2014-07-07 17:38:12	2014-07-07 17:38:12
1290	32	288	A COMMENT	\N	2014-07-10 13:44:06	2014-07-10 13:44:06
1291	2	288	A COMMENT	\N	2014-07-14 18:39:28	2014-07-14 18:39:28
1292	37	288	A COMMENT	\N	2014-07-20 09:16:27	2014-07-20 09:16:27
1293	2	288	A COMMENT	\N	2014-07-25 15:23:06	2014-07-25 15:23:06
1294	20	289	A COMMENT	\N	2014-06-14 19:33:33	2014-06-14 19:33:33
1295	21	289	A COMMENT	\N	2014-06-22 17:32:27	2014-06-22 17:32:27
1296	3	289	A COMMENT	\N	2014-07-14 15:06:34	2014-07-14 15:06:34
1297	14	290	A COMMENT	\N	2014-06-24 18:51:11	2014-06-24 18:51:11
1298	11	290	A COMMENT	\N	2014-07-02 14:27:27	2014-07-02 14:27:27
1299	1	290	A COMMENT	\N	2014-07-21 03:34:41	2014-07-21 03:34:41
1300	20	291	A COMMENT	\N	2014-07-10 13:41:36	2014-07-10 13:41:36
1301	14	294	A COMMENT	\N	2014-07-03 02:58:57	2014-07-03 02:58:57
1302	30	294	A COMMENT	\N	2014-07-11 22:28:41	2014-07-11 22:28:41
1303	10	294	A COMMENT	\N	2014-07-13 20:39:52	2014-07-13 20:39:52
1304	39	294	A COMMENT	\N	2014-07-24 16:49:51	2014-07-24 16:49:51
1305	8	294	A COMMENT	\N	2014-07-25 14:46:29	2014-07-25 14:46:29
1306	20	296	A COMMENT	\N	2014-07-23 02:58:24	2014-07-23 02:58:24
1307	28	296	A COMMENT	\N	2014-07-23 23:00:29	2014-07-23 23:00:29
1308	1	296	A COMMENT	\N	2014-07-24 09:26:52	2014-07-24 09:26:52
1309	28	296	A COMMENT	\N	2014-07-24 09:40:33	2014-07-24 09:40:33
1310	4	296	A COMMENT	\N	2014-07-24 11:42:00	2014-07-24 11:42:00
1311	3	296	A COMMENT	\N	2014-07-24 19:27:42	2014-07-24 19:27:42
1312	14	297	A COMMENT	\N	2014-06-25 21:29:04	2014-06-25 21:29:04
1313	2	297	A COMMENT	\N	2014-06-30 09:15:33	2014-06-30 09:15:33
1314	21	298	A COMMENT	\N	2014-06-21 12:23:20	2014-06-21 12:23:20
1315	28	298	A COMMENT	\N	2014-06-23 22:10:22	2014-06-23 22:10:22
1316	8	298	A COMMENT	\N	2014-06-26 02:13:22	2014-06-26 02:13:22
1317	43	298	A COMMENT	\N	2014-06-30 03:04:52	2014-06-30 03:04:52
1318	32	298	A COMMENT	\N	2014-07-01 14:43:25	2014-07-01 14:43:25
1319	45	298	A COMMENT	\N	2014-07-10 08:25:28	2014-07-10 08:25:28
1320	4	298	A COMMENT	\N	2014-07-13 00:55:25	2014-07-13 00:55:25
1321	2	298	A COMMENT	\N	2014-07-14 23:50:51	2014-07-14 23:50:51
1322	37	298	A COMMENT	\N	2014-07-16 15:44:02	2014-07-16 15:44:02
1323	4	298	A COMMENT	\N	2014-07-18 21:42:33	2014-07-18 21:42:33
1324	27	298	A COMMENT	\N	2014-07-19 04:12:58	2014-07-19 04:12:58
1325	32	301	A COMMENT	\N	2014-06-25 14:26:14	2014-06-25 14:26:14
1326	3	301	A COMMENT	\N	2014-06-29 17:21:34	2014-06-29 17:21:34
1327	14	301	A COMMENT	\N	2014-07-04 22:16:47	2014-07-04 22:16:47
1328	1	301	A COMMENT	\N	2014-07-05 08:25:03	2014-07-05 08:25:03
1329	37	301	A COMMENT	\N	2014-07-15 11:28:11	2014-07-15 11:28:11
1330	37	302	A COMMENT	\N	2014-06-25 06:46:30	2014-06-25 06:46:30
1331	2	302	A COMMENT	\N	2014-07-06 23:43:22	2014-07-06 23:43:22
1332	27	302	A COMMENT	\N	2014-07-11 03:04:25	2014-07-11 03:04:25
1333	1	302	A COMMENT	\N	2014-07-18 17:38:53	2014-07-18 17:38:53
1334	20	303	A COMMENT	\N	2014-07-21 08:10:14	2014-07-21 08:10:14
1335	21	305	A COMMENT	\N	2014-07-11 15:49:57	2014-07-11 15:49:57
1336	14	305	A COMMENT	\N	2014-07-13 02:10:08	2014-07-13 02:10:08
1337	20	306	A COMMENT	\N	2014-06-09 08:24:36	2014-06-09 08:24:36
1338	8	306	A COMMENT	\N	2014-06-09 13:30:36	2014-06-09 13:30:36
1339	32	306	A COMMENT	\N	2014-06-09 23:12:17	2014-06-09 23:12:17
1340	39	306	A COMMENT	\N	2014-06-11 21:31:39	2014-06-11 21:31:39
1341	45	306	A COMMENT	\N	2014-06-20 19:53:58	2014-06-20 19:53:58
1342	37	306	A COMMENT	\N	2014-06-28 17:26:27	2014-06-28 17:26:27
1343	43	306	A COMMENT	\N	2014-07-10 20:33:42	2014-07-10 20:33:42
1344	8	307	A COMMENT	\N	2014-07-15 19:44:09	2014-07-15 19:44:09
1345	2	307	A COMMENT	\N	2014-07-18 03:46:40	2014-07-18 03:46:40
1346	11	307	A COMMENT	\N	2014-07-20 02:18:39	2014-07-20 02:18:39
1347	2	307	A COMMENT	\N	2014-07-24 12:29:08	2014-07-24 12:29:08
1348	32	307	A COMMENT	\N	2014-07-26 03:17:59	2014-07-26 03:17:59
1349	11	308	A COMMENT	\N	2014-06-23 22:41:17	2014-06-23 22:41:17
1350	11	308	A COMMENT	\N	2014-06-25 09:05:08	2014-06-25 09:05:08
1351	43	308	A COMMENT	\N	2014-07-05 20:18:23	2014-07-05 20:18:23
1352	27	308	A COMMENT	\N	2014-07-12 02:54:32	2014-07-12 02:54:32
1353	14	308	A COMMENT	\N	2014-07-19 23:14:04	2014-07-19 23:14:04
1354	39	308	A COMMENT	\N	2014-07-23 08:40:23	2014-07-23 08:40:23
1355	45	309	A COMMENT	\N	2014-06-21 14:05:09	2014-06-21 14:05:09
1356	2	309	A COMMENT	\N	2014-06-24 20:47:59	2014-06-24 20:47:59
1357	43	309	A COMMENT	\N	2014-07-01 00:25:47	2014-07-01 00:25:47
1358	11	309	A COMMENT	\N	2014-07-02 18:48:14	2014-07-02 18:48:14
1359	21	309	A COMMENT	\N	2014-07-05 10:21:48	2014-07-05 10:21:48
1360	21	309	A COMMENT	\N	2014-07-11 10:19:41	2014-07-11 10:19:41
1361	43	309	A COMMENT	\N	2014-07-11 15:21:20	2014-07-11 15:21:20
1362	14	309	A COMMENT	\N	2014-07-13 04:08:55	2014-07-13 04:08:55
1363	47	309	A COMMENT	\N	2014-07-25 10:36:03	2014-07-25 10:36:03
1364	3	309	A COMMENT	\N	2014-07-26 19:15:36	2014-07-26 19:15:36
1365	1	310	A COMMENT	\N	2014-07-01 14:35:16	2014-07-01 14:35:16
1366	27	310	A COMMENT	\N	2014-07-05 04:33:40	2014-07-05 04:33:40
1367	43	310	A COMMENT	\N	2014-07-22 07:27:54	2014-07-22 07:27:54
1368	11	310	A COMMENT	\N	2014-07-23 19:30:37	2014-07-23 19:30:37
1369	37	310	A COMMENT	\N	2014-07-25 06:26:25	2014-07-25 06:26:25
1370	14	312	A COMMENT	\N	2014-06-05 01:52:25	2014-06-05 01:52:25
1371	2	312	A COMMENT	\N	2014-06-16 18:05:06	2014-06-16 18:05:06
1372	11	312	A COMMENT	\N	2014-06-28 01:21:49	2014-06-28 01:21:49
1373	1	312	A COMMENT	\N	2014-07-09 00:45:46	2014-07-09 00:45:46
1374	39	312	A COMMENT	\N	2014-07-09 10:28:25	2014-07-09 10:28:25
1375	10	312	A COMMENT	\N	2014-07-09 11:32:17	2014-07-09 11:32:17
1376	39	312	A COMMENT	\N	2014-07-21 19:58:56	2014-07-21 19:58:56
1377	21	312	A COMMENT	\N	2014-07-21 20:59:10	2014-07-21 20:59:10
1378	2	312	A COMMENT	\N	2014-07-23 23:10:32	2014-07-23 23:10:32
1379	20	313	A COMMENT	\N	2014-06-09 07:19:26	2014-06-09 07:19:26
1380	35	315	A COMMENT	\N	2014-07-17 08:10:03	2014-07-17 08:10:03
1381	30	315	A COMMENT	\N	2014-07-17 10:05:16	2014-07-17 10:05:16
1382	45	315	A COMMENT	\N	2014-07-19 02:39:26	2014-07-19 02:39:26
1383	14	315	A COMMENT	\N	2014-07-22 17:34:11	2014-07-22 17:34:11
1384	32	315	A COMMENT	\N	2014-07-24 04:55:16	2014-07-24 04:55:16
1385	30	315	A COMMENT	\N	2014-07-25 03:03:20	2014-07-25 03:03:20
1386	10	315	A COMMENT	\N	2014-07-25 05:00:58	2014-07-25 05:00:58
1387	32	315	A COMMENT	\N	2014-07-26 06:31:51	2014-07-26 06:31:51
1388	2	316	A COMMENT	\N	2014-07-18 20:26:28	2014-07-18 20:26:28
1389	45	316	A COMMENT	\N	2014-07-21 16:54:51	2014-07-21 16:54:51
1390	28	316	A COMMENT	\N	2014-07-21 18:40:56	2014-07-21 18:40:56
1391	21	316	A COMMENT	\N	2014-07-23 01:33:53	2014-07-23 01:33:53
1392	21	316	A COMMENT	\N	2014-07-23 15:32:37	2014-07-23 15:32:37
1393	14	316	A COMMENT	\N	2014-07-23 22:18:06	2014-07-23 22:18:06
1394	4	316	A COMMENT	\N	2014-07-25 06:11:10	2014-07-25 06:11:10
1395	47	316	A COMMENT	\N	2014-07-26 13:55:20	2014-07-26 13:55:20
1396	27	320	A COMMENT	\N	2014-06-09 16:36:03	2014-06-09 16:36:03
1397	27	320	A COMMENT	\N	2014-06-11 02:05:26	2014-06-11 02:05:26
1398	10	320	A COMMENT	\N	2014-06-25 17:49:19	2014-06-25 17:49:19
1399	2	320	A COMMENT	\N	2014-07-02 01:42:24	2014-07-02 01:42:24
1400	4	320	A COMMENT	\N	2014-07-10 17:00:13	2014-07-10 17:00:13
1401	43	320	A COMMENT	\N	2014-07-14 08:34:25	2014-07-14 08:34:25
1402	10	320	A COMMENT	\N	2014-07-16 05:22:07	2014-07-16 05:22:07
1403	43	320	A COMMENT	\N	2014-07-20 06:52:58	2014-07-20 06:52:58
1404	8	320	A COMMENT	\N	2014-07-26 07:14:30	2014-07-26 07:14:30
1405	29	322	A COMMENT	\N	2014-06-18 13:11:27	2014-06-18 13:11:27
1406	47	322	A COMMENT	\N	2014-06-21 22:54:20	2014-06-21 22:54:20
1407	3	322	A COMMENT	\N	2014-06-27 01:04:46	2014-06-27 01:04:46
1408	2	322	A COMMENT	\N	2014-06-29 01:47:45	2014-06-29 01:47:45
1409	47	322	A COMMENT	\N	2014-06-30 05:05:52	2014-06-30 05:05:52
1410	10	322	A COMMENT	\N	2014-07-03 06:15:26	2014-07-03 06:15:26
1411	1	322	A COMMENT	\N	2014-07-03 15:46:19	2014-07-03 15:46:19
1412	21	322	A COMMENT	\N	2014-07-05 14:25:01	2014-07-05 14:25:01
1413	1	322	A COMMENT	\N	2014-07-07 21:03:05	2014-07-07 21:03:05
1414	45	322	A COMMENT	\N	2014-07-13 01:25:40	2014-07-13 01:25:40
1415	27	322	A COMMENT	\N	2014-07-18 10:58:36	2014-07-18 10:58:36
1416	4	322	A COMMENT	\N	2014-07-21 13:37:23	2014-07-21 13:37:23
1417	1	322	A COMMENT	\N	2014-07-26 22:02:35	2014-07-26 22:02:35
1418	1	323	A COMMENT	\N	2014-07-14 05:14:31	2014-07-14 05:14:31
1419	37	323	A COMMENT	\N	2014-07-15 06:34:29	2014-07-15 06:34:29
1420	32	323	A COMMENT	\N	2014-07-17 00:30:43	2014-07-17 00:30:43
1421	45	323	A COMMENT	\N	2014-07-22 18:09:40	2014-07-22 18:09:40
1422	10	324	A COMMENT	\N	2014-05-18 01:32:21	2014-05-18 01:32:21
1423	28	324	A COMMENT	\N	2014-05-26 19:09:25	2014-05-26 19:09:25
1424	37	324	A COMMENT	\N	2014-05-26 21:37:16	2014-05-26 21:37:16
1425	4	324	A COMMENT	\N	2014-06-09 11:55:16	2014-06-09 11:55:16
1426	43	324	A COMMENT	\N	2014-06-11 02:04:43	2014-06-11 02:04:43
1427	45	324	A COMMENT	\N	2014-06-14 10:25:44	2014-06-14 10:25:44
1428	2	324	A COMMENT	\N	2014-06-16 15:45:02	2014-06-16 15:45:02
1429	47	324	A COMMENT	\N	2014-07-17 19:18:02	2014-07-17 19:18:02
1430	27	324	A COMMENT	\N	2014-07-21 16:02:29	2014-07-21 16:02:29
1431	32	324	A COMMENT	\N	2014-07-25 14:07:38	2014-07-25 14:07:38
1432	34	325	A COMMENT	\N	2014-06-03 03:50:54	2014-06-03 03:50:54
1433	4	325	A COMMENT	\N	2014-06-06 05:40:53	2014-06-06 05:40:53
1434	30	325	A COMMENT	\N	2014-06-13 23:13:18	2014-06-13 23:13:18
1435	4	325	A COMMENT	\N	2014-06-14 18:54:53	2014-06-14 18:54:53
1436	4	325	A COMMENT	\N	2014-06-26 12:19:35	2014-06-26 12:19:35
1437	37	325	A COMMENT	\N	2014-06-28 13:28:03	2014-06-28 13:28:03
1438	1	325	A COMMENT	\N	2014-06-30 00:07:53	2014-06-30 00:07:53
1439	32	325	A COMMENT	\N	2014-07-05 16:34:47	2014-07-05 16:34:47
1440	39	325	A COMMENT	\N	2014-07-18 14:02:36	2014-07-18 14:02:36
1441	4	326	A COMMENT	\N	2014-06-12 01:54:00	2014-06-12 01:54:00
1442	30	326	A COMMENT	\N	2014-06-19 07:43:12	2014-06-19 07:43:12
1443	2	326	A COMMENT	\N	2014-07-10 08:42:46	2014-07-10 08:42:46
1444	28	326	A COMMENT	\N	2014-07-14 23:29:10	2014-07-14 23:29:10
1445	21	326	A COMMENT	\N	2014-07-17 02:50:22	2014-07-17 02:50:22
1446	27	326	A COMMENT	\N	2014-07-18 16:27:39	2014-07-18 16:27:39
1447	34	327	A COMMENT	\N	2014-07-01 14:45:47	2014-07-01 14:45:47
1448	10	327	A COMMENT	\N	2014-07-13 13:13:55	2014-07-13 13:13:55
1449	4	327	A COMMENT	\N	2014-07-13 14:14:37	2014-07-13 14:14:37
1450	2	327	A COMMENT	\N	2014-07-24 02:24:13	2014-07-24 02:24:13
1451	28	328	A COMMENT	\N	2014-05-22 14:17:02	2014-05-22 14:17:02
1452	3	328	A COMMENT	\N	2014-06-02 09:48:52	2014-06-02 09:48:52
1453	47	328	A COMMENT	\N	2014-07-06 08:47:41	2014-07-06 08:47:41
1454	28	328	A COMMENT	\N	2014-07-15 19:21:35	2014-07-15 19:21:35
1455	14	329	A COMMENT	\N	2014-05-17 04:50:43	2014-05-17 04:50:43
1456	32	329	A COMMENT	\N	2014-05-27 12:29:52	2014-05-27 12:29:52
1457	21	329	A COMMENT	\N	2014-06-17 03:23:42	2014-06-17 03:23:42
1458	21	329	A COMMENT	\N	2014-07-09 06:33:47	2014-07-09 06:33:47
1459	21	329	A COMMENT	\N	2014-07-21 18:02:48	2014-07-21 18:02:48
1460	34	330	A COMMENT	\N	2014-06-01 21:57:57	2014-06-01 21:57:57
1461	28	330	A COMMENT	\N	2014-06-03 02:55:27	2014-06-03 02:55:27
1462	47	330	A COMMENT	\N	2014-06-06 15:55:35	2014-06-06 15:55:35
1463	1	330	A COMMENT	\N	2014-06-12 14:02:56	2014-06-12 14:02:56
1464	3	330	A COMMENT	\N	2014-06-24 15:24:36	2014-06-24 15:24:36
1465	4	330	A COMMENT	\N	2014-07-09 07:23:24	2014-07-09 07:23:24
1466	10	330	A COMMENT	\N	2014-07-14 23:10:17	2014-07-14 23:10:17
1467	2	330	A COMMENT	\N	2014-07-16 01:19:23	2014-07-16 01:19:23
1468	10	330	A COMMENT	\N	2014-07-16 13:07:09	2014-07-16 13:07:09
1469	47	330	A COMMENT	\N	2014-07-18 18:07:29	2014-07-18 18:07:29
1470	14	330	A COMMENT	\N	2014-07-19 07:20:36	2014-07-19 07:20:36
1471	11	330	A COMMENT	\N	2014-07-20 21:02:25	2014-07-20 21:02:25
1472	21	330	A COMMENT	\N	2014-07-20 21:15:27	2014-07-20 21:15:27
1473	32	332	A COMMENT	\N	2014-06-06 13:12:17	2014-06-06 13:12:17
1474	39	332	A COMMENT	\N	2014-06-07 01:33:12	2014-06-07 01:33:12
1475	43	332	A COMMENT	\N	2014-06-10 08:29:15	2014-06-10 08:29:15
1476	27	332	A COMMENT	\N	2014-06-14 05:05:25	2014-06-14 05:05:25
1477	3	332	A COMMENT	\N	2014-06-17 06:52:13	2014-06-17 06:52:13
1478	45	332	A COMMENT	\N	2014-06-19 11:23:39	2014-06-19 11:23:39
1479	32	332	A COMMENT	\N	2014-06-20 08:31:12	2014-06-20 08:31:12
1480	47	332	A COMMENT	\N	2014-06-24 10:17:31	2014-06-24 10:17:31
1481	21	332	A COMMENT	\N	2014-06-25 10:06:04	2014-06-25 10:06:04
1482	39	332	A COMMENT	\N	2014-06-27 12:39:03	2014-06-27 12:39:03
1483	2	332	A COMMENT	\N	2014-06-28 15:15:57	2014-06-28 15:15:57
1484	37	332	A COMMENT	\N	2014-07-09 18:18:58	2014-07-09 18:18:58
1485	3	332	A COMMENT	\N	2014-07-13 14:33:24	2014-07-13 14:33:24
1486	27	332	A COMMENT	\N	2014-07-14 01:56:58	2014-07-14 01:56:58
1487	39	332	A COMMENT	\N	2014-07-18 17:45:49	2014-07-18 17:45:49
1488	8	332	A COMMENT	\N	2014-07-19 15:01:05	2014-07-19 15:01:05
1489	2	332	A COMMENT	\N	2014-07-20 09:11:02	2014-07-20 09:11:02
1490	1	332	A COMMENT	\N	2014-07-24 10:29:53	2014-07-24 10:29:53
1491	45	332	A COMMENT	\N	2014-07-25 07:02:52	2014-07-25 07:02:52
1492	3	334	A COMMENT	\N	2014-06-24 01:45:10	2014-06-24 01:45:10
1493	32	334	A COMMENT	\N	2014-06-24 16:07:42	2014-06-24 16:07:42
1494	21	334	A COMMENT	\N	2014-07-12 03:01:22	2014-07-12 03:01:22
1495	27	334	A COMMENT	\N	2014-07-18 13:02:02	2014-07-18 13:02:02
1496	1	334	A COMMENT	\N	2014-07-23 07:24:10	2014-07-23 07:24:10
1497	34	335	A COMMENT	\N	2014-06-20 08:36:45	2014-06-20 08:36:45
1498	30	335	A COMMENT	\N	2014-06-29 12:04:18	2014-06-29 12:04:18
1499	43	335	A COMMENT	\N	2014-07-04 18:59:15	2014-07-04 18:59:15
1500	8	335	A COMMENT	\N	2014-07-07 05:47:47	2014-07-07 05:47:47
1501	21	335	A COMMENT	\N	2014-07-09 00:15:14	2014-07-09 00:15:14
1502	2	335	A COMMENT	\N	2014-07-12 03:32:47	2014-07-12 03:32:47
1503	10	335	A COMMENT	\N	2014-07-13 07:08:32	2014-07-13 07:08:32
1504	30	335	A COMMENT	\N	2014-07-14 01:58:14	2014-07-14 01:58:14
1505	14	335	A COMMENT	\N	2014-07-23 09:00:39	2014-07-23 09:00:39
1506	1	335	A COMMENT	\N	2014-07-23 12:01:00	2014-07-23 12:01:00
1507	8	335	A COMMENT	\N	2014-07-25 07:36:29	2014-07-25 07:36:29
1508	30	336	A COMMENT	\N	2014-07-05 16:56:12	2014-07-05 16:56:12
1509	3	336	A COMMENT	\N	2014-07-07 19:14:37	2014-07-07 19:14:37
1510	2	336	A COMMENT	\N	2014-07-25 03:53:59	2014-07-25 03:53:59
1511	27	337	A COMMENT	\N	2014-07-09 13:23:50	2014-07-09 13:23:50
1512	45	337	A COMMENT	\N	2014-07-11 09:52:28	2014-07-11 09:52:28
1513	37	337	A COMMENT	\N	2014-07-16 22:40:37	2014-07-16 22:40:37
1514	13	338	A COMMENT	\N	2014-07-25 08:11:17	2014-07-25 08:11:17
1515	39	338	A COMMENT	\N	2014-07-25 14:15:43	2014-07-25 14:15:43
1516	8	338	A COMMENT	\N	2014-07-26 20:45:56	2014-07-26 20:45:56
1517	43	339	A COMMENT	\N	2014-07-26 14:40:13	2014-07-26 14:40:13
1518	28	339	A COMMENT	\N	2014-07-26 14:57:09	2014-07-26 14:57:09
1519	27	339	A COMMENT	\N	2014-07-26 15:14:25	2014-07-26 15:14:25
1520	32	339	A COMMENT	\N	2014-07-26 15:58:57	2014-07-26 15:58:57
1521	45	339	A COMMENT	\N	2014-07-26 16:57:31	2014-07-26 16:57:31
1522	4	339	A COMMENT	\N	2014-07-26 17:54:47	2014-07-26 17:54:47
1523	47	339	A COMMENT	\N	2014-07-26 18:42:23	2014-07-26 18:42:23
1524	30	339	A COMMENT	\N	2014-07-26 19:05:04	2014-07-26 19:05:04
1525	37	339	A COMMENT	\N	2014-07-26 19:14:33	2014-07-26 19:14:33
1526	4	339	A COMMENT	\N	2014-07-26 19:42:48	2014-07-26 19:42:48
1527	21	339	A COMMENT	\N	2014-07-26 19:54:12	2014-07-26 19:54:12
1528	2	339	A COMMENT	\N	2014-07-26 19:59:59	2014-07-26 19:59:59
1529	43	339	A COMMENT	\N	2014-07-26 20:19:54	2014-07-26 20:19:54
1530	37	339	A COMMENT	\N	2014-07-26 20:50:34	2014-07-26 20:50:34
1531	37	339	A COMMENT	\N	2014-07-26 20:52:14	2014-07-26 20:52:14
1532	2	339	A COMMENT	\N	2014-07-26 21:01:09	2014-07-26 21:01:09
1533	3	339	A COMMENT	\N	2014-07-26 21:32:18	2014-07-26 21:32:18
1534	13	340	A COMMENT	\N	2014-07-24 00:00:14	2014-07-24 00:00:14
1535	47	340	A COMMENT	\N	2014-07-24 02:47:59	2014-07-24 02:47:59
1536	27	340	A COMMENT	\N	2014-07-24 12:14:39	2014-07-24 12:14:39
1537	39	340	A COMMENT	\N	2014-07-25 00:03:01	2014-07-25 00:03:01
1538	37	340	A COMMENT	\N	2014-07-25 18:06:31	2014-07-25 18:06:31
1539	28	340	A COMMENT	\N	2014-07-26 01:24:26	2014-07-26 01:24:26
1540	30	341	A COMMENT	\N	2014-07-24 13:07:48	2014-07-24 13:07:48
1541	14	341	A COMMENT	\N	2014-07-24 14:51:26	2014-07-24 14:51:26
1542	8	341	A COMMENT	\N	2014-07-24 17:07:30	2014-07-24 17:07:30
1543	47	341	A COMMENT	\N	2014-07-24 17:11:59	2014-07-24 17:11:59
1544	3	341	A COMMENT	\N	2014-07-26 00:12:07	2014-07-26 00:12:07
1545	30	342	A COMMENT	\N	2014-07-24 16:03:57	2014-07-24 16:03:57
1546	47	342	A COMMENT	\N	2014-07-24 22:13:51	2014-07-24 22:13:51
1547	30	342	A COMMENT	\N	2014-07-25 03:22:17	2014-07-25 03:22:17
1548	1	342	A COMMENT	\N	2014-07-25 04:01:02	2014-07-25 04:01:02
1549	45	342	A COMMENT	\N	2014-07-25 04:25:07	2014-07-25 04:25:07
1550	32	342	A COMMENT	\N	2014-07-25 05:03:40	2014-07-25 05:03:40
1551	10	342	A COMMENT	\N	2014-07-25 13:00:49	2014-07-25 13:00:49
1552	8	342	A COMMENT	\N	2014-07-25 14:20:42	2014-07-25 14:20:42
1553	43	342	A COMMENT	\N	2014-07-25 19:10:07	2014-07-25 19:10:07
1554	37	342	A COMMENT	\N	2014-07-25 23:12:45	2014-07-25 23:12:45
1555	11	342	A COMMENT	\N	2014-07-26 02:22:22	2014-07-26 02:22:22
1556	28	342	A COMMENT	\N	2014-07-26 04:45:55	2014-07-26 04:45:55
1557	14	342	A COMMENT	\N	2014-07-26 08:00:42	2014-07-26 08:00:42
1558	47	342	A COMMENT	\N	2014-07-26 09:28:34	2014-07-26 09:28:34
1559	4	342	A COMMENT	\N	2014-07-26 16:51:02	2014-07-26 16:51:02
1560	39	342	A COMMENT	\N	2014-07-26 22:21:52	2014-07-26 22:21:52
1561	4	343	A COMMENT	\N	2014-07-24 19:06:05	2014-07-24 19:06:05
1562	32	343	A COMMENT	\N	2014-07-26 08:45:02	2014-07-26 08:45:02
1563	13	344	A COMMENT	\N	2014-07-24 14:39:42	2014-07-24 14:39:42
1564	11	344	A COMMENT	\N	2014-07-25 08:20:49	2014-07-25 08:20:49
1565	45	344	A COMMENT	\N	2014-07-25 14:48:54	2014-07-25 14:48:54
1566	13	345	A COMMENT	\N	2014-07-24 15:38:56	2014-07-24 15:38:56
1567	14	345	A COMMENT	\N	2014-07-24 21:10:08	2014-07-24 21:10:08
1568	2	345	A COMMENT	\N	2014-07-25 02:44:53	2014-07-25 02:44:53
1569	43	345	A COMMENT	\N	2014-07-25 04:57:25	2014-07-25 04:57:25
1570	3	345	A COMMENT	\N	2014-07-25 19:07:00	2014-07-25 19:07:00
1571	10	345	A COMMENT	\N	2014-07-26 00:15:52	2014-07-26 00:15:52
1572	27	346	A COMMENT	\N	2014-07-25 10:20:37	2014-07-25 10:20:37
1573	4	346	A COMMENT	\N	2014-07-26 11:07:30	2014-07-26 11:07:30
1574	32	347	A COMMENT	\N	2014-07-26 07:16:40	2014-07-26 07:16:40
1575	28	347	A COMMENT	\N	2014-07-26 13:04:23	2014-07-26 13:04:23
1576	43	347	A COMMENT	\N	2014-07-26 21:19:18	2014-07-26 21:19:18
1577	39	349	A COMMENT	\N	2014-06-15 15:41:17	2014-06-15 15:41:17
1578	43	349	A COMMENT	\N	2014-06-16 02:55:01	2014-06-16 02:55:01
1579	3	349	A COMMENT	\N	2014-06-20 08:39:52	2014-06-20 08:39:52
1580	45	349	A COMMENT	\N	2014-07-04 18:06:41	2014-07-04 18:06:41
1581	3	349	A COMMENT	\N	2014-07-12 03:59:12	2014-07-12 03:59:12
1582	40	351	A COMMENT	\N	2014-06-17 22:26:01	2014-06-17 22:26:01
1583	30	352	A COMMENT	\N	2014-07-09 14:36:36	2014-07-09 14:36:36
1584	21	352	A COMMENT	\N	2014-07-22 06:21:19	2014-07-22 06:21:19
1585	4	352	A COMMENT	\N	2014-07-23 12:36:58	2014-07-23 12:36:58
1586	3	354	A COMMENT	\N	2014-06-18 04:35:04	2014-06-18 04:35:04
1587	8	354	A COMMENT	\N	2014-06-23 22:57:14	2014-06-23 22:57:14
1588	43	354	A COMMENT	\N	2014-06-30 04:08:32	2014-06-30 04:08:32
1589	47	354	A COMMENT	\N	2014-07-14 09:57:54	2014-07-14 09:57:54
1590	27	356	A COMMENT	\N	2014-07-07 14:21:05	2014-07-07 14:21:05
1591	21	356	A COMMENT	\N	2014-07-15 00:31:39	2014-07-15 00:31:39
1592	14	356	A COMMENT	\N	2014-07-18 20:44:44	2014-07-18 20:44:44
1593	1	356	A COMMENT	\N	2014-07-18 22:25:17	2014-07-18 22:25:17
1594	47	356	A COMMENT	\N	2014-07-20 19:46:22	2014-07-20 19:46:22
1595	1	357	A COMMENT	\N	2014-07-11 12:50:36	2014-07-11 12:50:36
1596	11	357	A COMMENT	\N	2014-07-13 19:47:02	2014-07-13 19:47:02
1597	37	357	A COMMENT	\N	2014-07-14 02:57:26	2014-07-14 02:57:26
1598	2	357	A COMMENT	\N	2014-07-14 14:00:11	2014-07-14 14:00:11
1599	27	357	A COMMENT	\N	2014-07-20 04:55:12	2014-07-20 04:55:12
1600	30	357	A COMMENT	\N	2014-07-20 05:23:52	2014-07-20 05:23:52
1601	10	357	A COMMENT	\N	2014-07-20 08:14:51	2014-07-20 08:14:51
1602	43	357	A COMMENT	\N	2014-07-23 04:54:47	2014-07-23 04:54:47
1603	14	357	A COMMENT	\N	2014-07-24 23:05:25	2014-07-24 23:05:25
1604	43	358	A COMMENT	\N	2014-06-18 21:30:04	2014-06-18 21:30:04
1605	37	358	A COMMENT	\N	2014-06-23 11:05:14	2014-06-23 11:05:14
1606	47	358	A COMMENT	\N	2014-06-26 20:28:37	2014-06-26 20:28:37
1607	32	358	A COMMENT	\N	2014-07-08 21:58:07	2014-07-08 21:58:07
1608	28	358	A COMMENT	\N	2014-07-22 23:13:17	2014-07-22 23:13:17
1609	45	359	A COMMENT	\N	2014-06-18 15:47:21	2014-06-18 15:47:21
1610	30	359	A COMMENT	\N	2014-06-20 15:52:01	2014-06-20 15:52:01
1611	14	359	A COMMENT	\N	2014-06-20 21:42:14	2014-06-20 21:42:14
1612	2	359	A COMMENT	\N	2014-06-21 07:02:27	2014-06-21 07:02:27
1613	27	359	A COMMENT	\N	2014-06-26 05:37:29	2014-06-26 05:37:29
1614	3	359	A COMMENT	\N	2014-06-26 14:25:17	2014-06-26 14:25:17
1615	39	359	A COMMENT	\N	2014-06-28 02:43:06	2014-06-28 02:43:06
1616	1	359	A COMMENT	\N	2014-07-01 04:40:50	2014-07-01 04:40:50
1617	11	359	A COMMENT	\N	2014-07-01 20:56:11	2014-07-01 20:56:11
1618	32	359	A COMMENT	\N	2014-07-02 21:04:34	2014-07-02 21:04:34
1619	37	359	A COMMENT	\N	2014-07-04 14:07:36	2014-07-04 14:07:36
1620	10	359	A COMMENT	\N	2014-07-04 21:55:39	2014-07-04 21:55:39
1621	8	359	A COMMENT	\N	2014-07-10 00:09:49	2014-07-10 00:09:49
1622	28	359	A COMMENT	\N	2014-07-11 08:29:53	2014-07-11 08:29:53
1623	27	359	A COMMENT	\N	2014-07-13 23:13:48	2014-07-13 23:13:48
1624	45	359	A COMMENT	\N	2014-07-14 17:07:23	2014-07-14 17:07:23
1625	2	359	A COMMENT	\N	2014-07-16 15:35:11	2014-07-16 15:35:11
1626	10	359	A COMMENT	\N	2014-07-20 23:14:30	2014-07-20 23:14:30
1627	10	359	A COMMENT	\N	2014-07-21 18:11:26	2014-07-21 18:11:26
1628	43	359	A COMMENT	\N	2014-07-23 12:35:17	2014-07-23 12:35:17
1629	27	360	A COMMENT	\N	2014-07-08 05:13:45	2014-07-08 05:13:45
1630	11	360	A COMMENT	\N	2014-07-17 13:38:28	2014-07-17 13:38:28
1631	43	360	A COMMENT	\N	2014-07-26 10:43:59	2014-07-26 10:43:59
1632	40	363	A COMMENT	\N	2014-07-17 12:09:32	2014-07-17 12:09:32
1633	39	363	A COMMENT	\N	2014-07-18 01:30:35	2014-07-18 01:30:35
1634	10	363	A COMMENT	\N	2014-07-19 04:15:34	2014-07-19 04:15:34
1635	14	363	A COMMENT	\N	2014-07-21 07:17:50	2014-07-21 07:17:50
1636	4	363	A COMMENT	\N	2014-07-22 13:59:39	2014-07-22 13:59:39
1637	2	363	A COMMENT	\N	2014-07-24 21:42:06	2014-07-24 21:42:06
1638	27	363	A COMMENT	\N	2014-07-25 07:48:14	2014-07-25 07:48:14
1639	43	363	A COMMENT	\N	2014-07-26 05:31:00	2014-07-26 05:31:00
1640	11	363	A COMMENT	\N	2014-07-26 13:31:34	2014-07-26 13:31:34
1641	11	363	A COMMENT	\N	2014-07-26 20:31:36	2014-07-26 20:31:36
1642	1	364	A COMMENT	\N	2014-07-19 12:04:22	2014-07-19 12:04:22
1643	28	364	A COMMENT	\N	2014-07-25 01:37:10	2014-07-25 01:37:10
1644	8	364	A COMMENT	\N	2014-07-26 00:06:06	2014-07-26 00:06:06
1645	14	364	A COMMENT	\N	2014-07-26 17:29:23	2014-07-26 17:29:23
1646	10	365	A COMMENT	\N	2014-06-25 17:40:19	2014-06-25 17:40:19
1647	10	365	A COMMENT	\N	2014-07-12 13:31:16	2014-07-12 13:31:16
1648	14	367	A COMMENT	\N	2014-07-06 09:03:52	2014-07-06 09:03:52
1649	30	367	A COMMENT	\N	2014-07-09 21:30:16	2014-07-09 21:30:16
1650	43	367	A COMMENT	\N	2014-07-10 00:11:33	2014-07-10 00:11:33
1651	43	367	A COMMENT	\N	2014-07-11 20:00:33	2014-07-11 20:00:33
1652	3	369	A COMMENT	\N	2014-07-13 08:55:08	2014-07-13 08:55:08
1653	39	369	A COMMENT	\N	2014-07-13 19:28:48	2014-07-13 19:28:48
1654	2	369	A COMMENT	\N	2014-07-15 11:08:21	2014-07-15 11:08:21
1655	2	369	A COMMENT	\N	2014-07-17 00:57:37	2014-07-17 00:57:37
1656	37	369	A COMMENT	\N	2014-07-17 09:58:54	2014-07-17 09:58:54
1657	30	369	A COMMENT	\N	2014-07-21 20:28:56	2014-07-21 20:28:56
1658	2	369	A COMMENT	\N	2014-07-21 23:10:02	2014-07-21 23:10:02
1659	32	369	A COMMENT	\N	2014-07-22 03:03:30	2014-07-22 03:03:30
1660	21	369	A COMMENT	\N	2014-07-24 15:59:25	2014-07-24 15:59:25
1661	30	369	A COMMENT	\N	2014-07-24 21:26:02	2014-07-24 21:26:02
1662	28	369	A COMMENT	\N	2014-07-26 13:11:05	2014-07-26 13:11:05
1663	10	370	A COMMENT	\N	2014-06-16 11:03:01	2014-06-16 11:03:01
1664	45	370	A COMMENT	\N	2014-06-21 21:58:28	2014-06-21 21:58:28
1665	37	371	A COMMENT	\N	2014-06-19 15:45:47	2014-06-19 15:45:47
1666	10	371	A COMMENT	\N	2014-06-21 11:54:16	2014-06-21 11:54:16
1667	39	371	A COMMENT	\N	2014-06-29 02:16:03	2014-06-29 02:16:03
1668	43	371	A COMMENT	\N	2014-06-30 10:22:23	2014-06-30 10:22:23
1669	45	371	A COMMENT	\N	2014-06-30 16:03:30	2014-06-30 16:03:30
1670	3	371	A COMMENT	\N	2014-07-03 07:35:05	2014-07-03 07:35:05
1671	43	371	A COMMENT	\N	2014-07-06 06:43:20	2014-07-06 06:43:20
1672	10	371	A COMMENT	\N	2014-07-14 13:59:27	2014-07-14 13:59:27
1673	1	371	A COMMENT	\N	2014-07-23 07:14:08	2014-07-23 07:14:08
1674	39	371	A COMMENT	\N	2014-07-26 01:36:47	2014-07-26 01:36:47
1675	28	372	A COMMENT	\N	2014-07-06 11:58:29	2014-07-06 11:58:29
1676	14	372	A COMMENT	\N	2014-07-09 02:04:06	2014-07-09 02:04:06
1677	40	373	A COMMENT	\N	2014-06-24 22:04:45	2014-06-24 22:04:45
1678	14	374	A COMMENT	\N	2014-07-25 14:25:35	2014-07-25 14:25:35
1679	45	375	A COMMENT	\N	2014-06-26 13:34:54	2014-06-26 13:34:54
1680	45	375	A COMMENT	\N	2014-07-11 01:25:03	2014-07-11 01:25:03
1681	1	375	A COMMENT	\N	2014-07-19 15:17:45	2014-07-19 15:17:45
1682	43	375	A COMMENT	\N	2014-07-22 22:49:49	2014-07-22 22:49:49
1683	43	375	A COMMENT	\N	2014-07-23 01:53:55	2014-07-23 01:53:55
1684	47	375	A COMMENT	\N	2014-07-24 00:30:57	2014-07-24 00:30:57
1685	45	376	A COMMENT	\N	2014-07-15 17:54:12	2014-07-15 17:54:12
1686	39	376	A COMMENT	\N	2014-07-16 04:22:04	2014-07-16 04:22:04
1687	43	376	A COMMENT	\N	2014-07-19 00:37:19	2014-07-19 00:37:19
1688	10	376	A COMMENT	\N	2014-07-19 06:40:47	2014-07-19 06:40:47
1689	3	377	A COMMENT	\N	2014-07-14 11:23:09	2014-07-14 11:23:09
1690	43	377	A COMMENT	\N	2014-07-25 01:18:15	2014-07-25 01:18:15
1691	40	378	A COMMENT	\N	2014-07-17 05:04:35	2014-07-17 05:04:35
1692	11	378	A COMMENT	\N	2014-07-24 17:57:15	2014-07-24 17:57:15
1693	40	379	A COMMENT	\N	2014-06-26 06:30:03	2014-06-26 06:30:03
1694	1	379	A COMMENT	\N	2014-06-27 05:36:42	2014-06-27 05:36:42
1695	14	379	A COMMENT	\N	2014-07-03 04:32:02	2014-07-03 04:32:02
1696	1	379	A COMMENT	\N	2014-07-18 00:41:43	2014-07-18 00:41:43
1697	2	379	A COMMENT	\N	2014-07-19 02:28:15	2014-07-19 02:28:15
1698	8	379	A COMMENT	\N	2014-07-22 22:13:11	2014-07-22 22:13:11
1699	40	380	A COMMENT	\N	2014-06-21 12:00:24	2014-06-21 12:00:24
1700	40	381	A COMMENT	\N	2014-06-18 20:16:51	2014-06-18 20:16:51
1701	3	381	A COMMENT	\N	2014-06-27 12:47:28	2014-06-27 12:47:28
1702	47	381	A COMMENT	\N	2014-07-24 04:26:19	2014-07-24 04:26:19
1703	40	382	A COMMENT	\N	2014-06-28 09:43:33	2014-06-28 09:43:33
1704	45	382	A COMMENT	\N	2014-07-05 07:51:58	2014-07-05 07:51:58
1705	43	382	A COMMENT	\N	2014-07-20 01:28:03	2014-07-20 01:28:03
1706	3	382	A COMMENT	\N	2014-07-20 14:04:54	2014-07-20 14:04:54
1707	28	382	A COMMENT	\N	2014-07-25 07:15:19	2014-07-25 07:15:19
1708	45	383	A COMMENT	\N	2014-07-04 23:30:05	2014-07-04 23:30:05
1709	32	383	A COMMENT	\N	2014-07-22 09:56:28	2014-07-22 09:56:28
1710	21	384	A COMMENT	\N	2014-06-19 07:59:58	2014-06-19 07:59:58
1711	1	384	A COMMENT	\N	2014-06-19 17:16:56	2014-06-19 17:16:56
1712	2	384	A COMMENT	\N	2014-06-22 14:30:00	2014-06-22 14:30:00
1713	43	384	A COMMENT	\N	2014-06-27 21:28:30	2014-06-27 21:28:30
1714	11	384	A COMMENT	\N	2014-06-29 04:29:25	2014-06-29 04:29:25
1715	10	384	A COMMENT	\N	2014-06-29 05:37:43	2014-06-29 05:37:43
1716	4	384	A COMMENT	\N	2014-07-02 05:15:26	2014-07-02 05:15:26
1717	45	384	A COMMENT	\N	2014-07-05 15:25:38	2014-07-05 15:25:38
1718	43	384	A COMMENT	\N	2014-07-07 00:51:42	2014-07-07 00:51:42
1719	32	384	A COMMENT	\N	2014-07-11 15:11:07	2014-07-11 15:11:07
1720	21	384	A COMMENT	\N	2014-07-15 15:13:13	2014-07-15 15:13:13
1721	14	384	A COMMENT	\N	2014-07-16 06:00:51	2014-07-16 06:00:51
1722	14	384	A COMMENT	\N	2014-07-16 13:08:58	2014-07-16 13:08:58
1723	28	384	A COMMENT	\N	2014-07-17 14:05:44	2014-07-17 14:05:44
1724	32	384	A COMMENT	\N	2014-07-20 13:41:41	2014-07-20 13:41:41
1725	2	384	A COMMENT	\N	2014-07-21 13:32:37	2014-07-21 13:32:37
1726	28	384	A COMMENT	\N	2014-07-21 15:02:43	2014-07-21 15:02:43
1727	11	384	A COMMENT	\N	2014-07-23 16:30:32	2014-07-23 16:30:32
1728	30	384	A COMMENT	\N	2014-07-23 17:00:38	2014-07-23 17:00:38
1729	40	385	A COMMENT	\N	2014-06-27 09:53:36	2014-06-27 09:53:36
1730	45	385	A COMMENT	\N	2014-07-15 20:09:23	2014-07-15 20:09:23
1731	40	386	A COMMENT	\N	2014-06-29 22:22:01	2014-06-29 22:22:01
1732	45	387	A COMMENT	\N	2014-07-15 06:16:28	2014-07-15 06:16:28
1733	14	388	A COMMENT	\N	2014-07-12 12:10:33	2014-07-12 12:10:33
1734	47	388	A COMMENT	\N	2014-07-12 12:55:19	2014-07-12 12:55:19
1735	37	388	A COMMENT	\N	2014-07-17 01:22:28	2014-07-17 01:22:28
1736	37	388	A COMMENT	\N	2014-07-18 09:12:12	2014-07-18 09:12:12
1737	1	388	A COMMENT	\N	2014-07-20 15:28:25	2014-07-20 15:28:25
1738	3	388	A COMMENT	\N	2014-07-23 18:08:56	2014-07-23 18:08:56
1739	39	388	A COMMENT	\N	2014-07-24 20:37:04	2014-07-24 20:37:04
1740	3	388	A COMMENT	\N	2014-07-26 04:04:43	2014-07-26 04:04:43
1741	45	389	A COMMENT	\N	2014-07-24 16:16:03	2014-07-24 16:16:03
1742	40	390	A COMMENT	\N	2014-06-12 19:39:39	2014-06-12 19:39:39
1743	37	390	A COMMENT	\N	2014-06-19 18:38:58	2014-06-19 18:38:58
1744	39	390	A COMMENT	\N	2014-06-29 06:14:49	2014-06-29 06:14:49
1745	2	390	A COMMENT	\N	2014-07-01 03:24:19	2014-07-01 03:24:19
1746	10	391	A COMMENT	\N	2014-06-28 03:04:29	2014-06-28 03:04:29
1747	2	391	A COMMENT	\N	2014-07-25 18:48:44	2014-07-25 18:48:44
1748	43	392	A COMMENT	\N	2014-07-09 16:02:31	2014-07-09 16:02:31
1749	11	392	A COMMENT	\N	2014-07-10 01:45:45	2014-07-10 01:45:45
1750	28	392	A COMMENT	\N	2014-07-10 13:03:06	2014-07-10 13:03:06
1751	10	392	A COMMENT	\N	2014-07-10 21:40:10	2014-07-10 21:40:10
1752	30	392	A COMMENT	\N	2014-07-12 02:56:51	2014-07-12 02:56:51
1753	32	392	A COMMENT	\N	2014-07-16 17:26:42	2014-07-16 17:26:42
1754	39	392	A COMMENT	\N	2014-07-17 03:32:04	2014-07-17 03:32:04
1755	8	392	A COMMENT	\N	2014-07-19 05:40:32	2014-07-19 05:40:32
1756	28	392	A COMMENT	\N	2014-07-20 08:24:28	2014-07-20 08:24:28
1757	2	392	A COMMENT	\N	2014-07-20 21:30:18	2014-07-20 21:30:18
1758	47	392	A COMMENT	\N	2014-07-22 02:58:15	2014-07-22 02:58:15
1759	14	392	A COMMENT	\N	2014-07-22 12:49:56	2014-07-22 12:49:56
1760	1	392	A COMMENT	\N	2014-07-23 07:41:25	2014-07-23 07:41:25
1761	3	392	A COMMENT	\N	2014-07-24 18:04:48	2014-07-24 18:04:48
1762	2	392	A COMMENT	\N	2014-07-25 01:47:43	2014-07-25 01:47:43
1763	37	392	A COMMENT	\N	2014-07-25 10:50:17	2014-07-25 10:50:17
1764	14	392	A COMMENT	\N	2014-07-25 17:13:31	2014-07-25 17:13:31
1765	47	392	A COMMENT	\N	2014-07-26 02:10:52	2014-07-26 02:10:52
1766	10	392	A COMMENT	\N	2014-07-26 05:10:10	2014-07-26 05:10:10
1767	2	393	A COMMENT	\N	2014-06-23 10:04:27	2014-06-23 10:04:27
1768	21	393	A COMMENT	\N	2014-06-23 20:11:20	2014-06-23 20:11:20
1769	47	393	A COMMENT	\N	2014-06-29 19:09:22	2014-06-29 19:09:22
1770	3	393	A COMMENT	\N	2014-06-29 19:31:53	2014-06-29 19:31:53
1771	28	393	A COMMENT	\N	2014-06-30 03:30:38	2014-06-30 03:30:38
1772	39	393	A COMMENT	\N	2014-07-02 22:40:30	2014-07-02 22:40:30
1773	4	393	A COMMENT	\N	2014-07-04 02:27:35	2014-07-04 02:27:35
1774	43	393	A COMMENT	\N	2014-07-04 12:38:21	2014-07-04 12:38:21
1775	2	393	A COMMENT	\N	2014-07-06 12:53:20	2014-07-06 12:53:20
1776	47	393	A COMMENT	\N	2014-07-09 20:56:23	2014-07-09 20:56:23
1777	27	393	A COMMENT	\N	2014-07-12 08:41:26	2014-07-12 08:41:26
1778	11	393	A COMMENT	\N	2014-07-12 22:51:21	2014-07-12 22:51:21
1779	8	393	A COMMENT	\N	2014-07-13 09:29:06	2014-07-13 09:29:06
1780	30	393	A COMMENT	\N	2014-07-13 22:03:55	2014-07-13 22:03:55
1781	14	393	A COMMENT	\N	2014-07-20 06:48:34	2014-07-20 06:48:34
1782	30	396	A COMMENT	\N	2014-06-29 22:51:00	2014-06-29 22:51:00
1783	28	396	A COMMENT	\N	2014-07-08 12:22:18	2014-07-08 12:22:18
1784	47	396	A COMMENT	\N	2014-07-08 23:15:38	2014-07-08 23:15:38
1785	10	396	A COMMENT	\N	2014-07-23 17:54:17	2014-07-23 17:54:17
1786	3	396	A COMMENT	\N	2014-07-25 06:52:53	2014-07-25 06:52:53
1787	40	397	A COMMENT	\N	2014-06-27 19:39:28	2014-06-27 19:39:28
1788	39	397	A COMMENT	\N	2014-06-28 13:25:35	2014-06-28 13:25:35
1789	4	397	A COMMENT	\N	2014-07-01 21:43:32	2014-07-01 21:43:32
1790	8	397	A COMMENT	\N	2014-07-01 22:26:34	2014-07-01 22:26:34
1791	11	397	A COMMENT	\N	2014-07-03 09:51:32	2014-07-03 09:51:32
1792	43	397	A COMMENT	\N	2014-07-08 13:54:23	2014-07-08 13:54:23
1793	30	397	A COMMENT	\N	2014-07-13 12:47:05	2014-07-13 12:47:05
1794	28	397	A COMMENT	\N	2014-07-15 13:49:04	2014-07-15 13:49:04
1795	1	397	A COMMENT	\N	2014-07-16 15:02:48	2014-07-16 15:02:48
1796	43	397	A COMMENT	\N	2014-07-18 14:46:10	2014-07-18 14:46:10
1797	43	398	A COMMENT	\N	2014-07-07 14:28:10	2014-07-07 14:28:10
1798	45	398	A COMMENT	\N	2014-07-10 07:35:48	2014-07-10 07:35:48
1799	1	398	A COMMENT	\N	2014-07-17 07:20:36	2014-07-17 07:20:36
1800	27	398	A COMMENT	\N	2014-07-21 15:30:30	2014-07-21 15:30:30
1801	8	398	A COMMENT	\N	2014-07-24 01:07:09	2014-07-24 01:07:09
1802	14	399	A COMMENT	\N	2014-07-01 21:44:13	2014-07-01 21:44:13
1803	4	399	A COMMENT	\N	2014-07-21 23:11:27	2014-07-21 23:11:27
1804	45	399	A COMMENT	\N	2014-07-26 14:50:34	2014-07-26 14:50:34
1805	28	400	A COMMENT	\N	2014-05-09 04:04:26	2014-05-09 04:04:26
1806	21	400	A COMMENT	\N	2014-05-11 14:15:38	2014-05-11 14:15:38
1807	2	400	A COMMENT	\N	2014-05-13 17:56:33	2014-05-13 17:56:33
1808	39	400	A COMMENT	\N	2014-05-23 10:56:42	2014-05-23 10:56:42
1809	32	400	A COMMENT	\N	2014-05-27 04:59:16	2014-05-27 04:59:16
1810	45	400	A COMMENT	\N	2014-05-30 11:57:57	2014-05-30 11:57:57
1811	32	400	A COMMENT	\N	2014-06-14 01:50:37	2014-06-14 01:50:37
1812	1	400	A COMMENT	\N	2014-06-18 07:03:31	2014-06-18 07:03:31
1813	4	400	A COMMENT	\N	2014-06-19 23:05:32	2014-06-19 23:05:32
1814	4	400	A COMMENT	\N	2014-06-23 08:02:12	2014-06-23 08:02:12
1815	10	400	A COMMENT	\N	2014-06-25 22:14:20	2014-06-25 22:14:20
1816	27	400	A COMMENT	\N	2014-06-26 12:29:16	2014-06-26 12:29:16
1817	14	400	A COMMENT	\N	2014-07-02 19:40:08	2014-07-02 19:40:08
1818	37	400	A COMMENT	\N	2014-07-05 01:14:36	2014-07-05 01:14:36
1819	2	400	A COMMENT	\N	2014-07-10 10:07:18	2014-07-10 10:07:18
1820	10	400	A COMMENT	\N	2014-07-11 10:45:40	2014-07-11 10:45:40
1821	30	400	A COMMENT	\N	2014-07-17 17:49:56	2014-07-17 17:49:56
1822	28	400	A COMMENT	\N	2014-07-22 14:50:51	2014-07-22 14:50:51
1823	28	401	A COMMENT	\N	2014-07-03 23:44:13	2014-07-03 23:44:13
1824	43	401	A COMMENT	\N	2014-07-22 20:40:15	2014-07-22 20:40:15
1825	27	401	A COMMENT	\N	2014-07-23 09:53:43	2014-07-23 09:53:43
1826	5	402	A COMMENT	\N	2014-06-29 15:38:31	2014-06-29 15:38:31
1827	28	402	A COMMENT	\N	2014-06-30 13:11:12	2014-06-30 13:11:12
1828	27	402	A COMMENT	\N	2014-07-03 14:46:29	2014-07-03 14:46:29
1829	47	402	A COMMENT	\N	2014-07-08 19:31:53	2014-07-08 19:31:53
1830	10	402	A COMMENT	\N	2014-07-10 03:41:09	2014-07-10 03:41:09
1831	11	402	A COMMENT	\N	2014-07-23 23:44:02	2014-07-23 23:44:02
1832	5	403	A COMMENT	\N	2014-07-02 02:40:08	2014-07-02 02:40:08
1833	45	405	A COMMENT	\N	2014-07-06 02:17:50	2014-07-06 02:17:50
1834	37	405	A COMMENT	\N	2014-07-06 09:34:08	2014-07-06 09:34:08
1835	14	405	A COMMENT	\N	2014-07-08 03:18:07	2014-07-08 03:18:07
1836	30	405	A COMMENT	\N	2014-07-08 17:06:48	2014-07-08 17:06:48
1837	43	405	A COMMENT	\N	2014-07-09 18:16:36	2014-07-09 18:16:36
1838	10	405	A COMMENT	\N	2014-07-10 20:26:18	2014-07-10 20:26:18
1839	43	405	A COMMENT	\N	2014-07-11 00:09:50	2014-07-11 00:09:50
1840	11	405	A COMMENT	\N	2014-07-22 22:48:42	2014-07-22 22:48:42
1841	45	405	A COMMENT	\N	2014-07-25 14:26:01	2014-07-25 14:26:01
1842	33	406	A COMMENT	\N	2014-07-05 23:22:36	2014-07-05 23:22:36
1843	33	407	A COMMENT	\N	2014-07-15 08:29:17	2014-07-15 08:29:17
1844	28	407	A COMMENT	\N	2014-07-21 21:48:56	2014-07-21 21:48:56
1845	2	407	A COMMENT	\N	2014-07-25 23:59:47	2014-07-25 23:59:47
1846	11	408	A COMMENT	\N	2014-07-17 09:36:02	2014-07-17 09:36:02
1847	2	408	A COMMENT	\N	2014-07-19 19:19:33	2014-07-19 19:19:33
1848	27	408	A COMMENT	\N	2014-07-20 16:32:36	2014-07-20 16:32:36
1849	32	408	A COMMENT	\N	2014-07-21 04:07:36	2014-07-21 04:07:36
1850	10	408	A COMMENT	\N	2014-07-23 03:20:26	2014-07-23 03:20:26
1851	11	408	A COMMENT	\N	2014-07-23 10:42:38	2014-07-23 10:42:38
1852	21	408	A COMMENT	\N	2014-07-24 18:49:59	2014-07-24 18:49:59
1853	2	408	A COMMENT	\N	2014-07-24 21:40:47	2014-07-24 21:40:47
1854	33	409	A COMMENT	\N	2014-07-25 04:23:03	2014-07-25 04:23:03
1855	45	409	A COMMENT	\N	2014-07-26 03:23:41	2014-07-26 03:23:41
1856	43	409	A COMMENT	\N	2014-07-26 05:43:51	2014-07-26 05:43:51
1857	1	409	A COMMENT	\N	2014-07-26 07:04:07	2014-07-26 07:04:07
1858	45	409	A COMMENT	\N	2014-07-26 16:08:56	2014-07-26 16:08:56
1859	33	410	A COMMENT	\N	2014-07-25 09:13:47	2014-07-25 09:13:47
1860	8	410	A COMMENT	\N	2014-07-25 16:27:24	2014-07-25 16:27:24
1861	10	410	A COMMENT	\N	2014-07-26 13:50:45	2014-07-26 13:50:45
1862	3	410	A COMMENT	\N	2014-07-26 14:57:17	2014-07-26 14:57:17
1863	4	410	A COMMENT	\N	2014-07-26 19:29:37	2014-07-26 19:29:37
1864	33	411	A COMMENT	\N	2014-06-28 19:13:45	2014-06-28 19:13:45
1865	45	412	A COMMENT	\N	2014-07-23 21:28:49	2014-07-23 21:28:49
1866	33	413	A COMMENT	\N	2014-06-18 13:06:02	2014-06-18 13:06:02
1867	2	413	A COMMENT	\N	2014-06-23 14:51:11	2014-06-23 14:51:11
1868	43	413	A COMMENT	\N	2014-06-26 20:55:31	2014-06-26 20:55:31
1869	11	413	A COMMENT	\N	2014-07-03 12:17:24	2014-07-03 12:17:24
1870	2	413	A COMMENT	\N	2014-07-05 17:12:44	2014-07-05 17:12:44
1871	27	413	A COMMENT	\N	2014-07-09 16:00:36	2014-07-09 16:00:36
1872	10	413	A COMMENT	\N	2014-07-10 05:29:19	2014-07-10 05:29:19
1873	21	413	A COMMENT	\N	2014-07-18 10:40:08	2014-07-18 10:40:08
1874	21	413	A COMMENT	\N	2014-07-24 19:56:41	2014-07-24 19:56:41
1875	33	414	A COMMENT	\N	2014-06-21 03:44:16	2014-06-21 03:44:16
1876	43	414	A COMMENT	\N	2014-06-27 00:06:17	2014-06-27 00:06:17
1877	39	414	A COMMENT	\N	2014-06-27 15:50:27	2014-06-27 15:50:27
1878	33	415	A COMMENT	\N	2014-06-22 19:14:35	2014-06-22 19:14:35
1879	45	415	A COMMENT	\N	2014-07-02 18:45:59	2014-07-02 18:45:59
1880	45	415	A COMMENT	\N	2014-07-25 14:16:44	2014-07-25 14:16:44
1881	21	415	A COMMENT	\N	2014-07-25 21:31:41	2014-07-25 21:31:41
1882	2	417	A COMMENT	\N	2014-07-05 00:13:36	2014-07-05 00:13:36
1883	33	418	A COMMENT	\N	2014-06-28 22:45:23	2014-06-28 22:45:23
1884	21	418	A COMMENT	\N	2014-07-03 18:47:25	2014-07-03 18:47:25
1885	3	418	A COMMENT	\N	2014-07-04 11:50:16	2014-07-04 11:50:16
1886	45	418	A COMMENT	\N	2014-07-05 22:35:34	2014-07-05 22:35:34
1887	8	418	A COMMENT	\N	2014-07-07 05:40:09	2014-07-07 05:40:09
1888	30	418	A COMMENT	\N	2014-07-08 01:05:22	2014-07-08 01:05:22
1889	4	418	A COMMENT	\N	2014-07-08 04:49:48	2014-07-08 04:49:48
1890	37	418	A COMMENT	\N	2014-07-14 11:23:16	2014-07-14 11:23:16
1891	14	418	A COMMENT	\N	2014-07-14 21:53:58	2014-07-14 21:53:58
1892	32	418	A COMMENT	\N	2014-07-16 23:17:47	2014-07-16 23:17:47
1893	47	418	A COMMENT	\N	2014-07-18 04:54:11	2014-07-18 04:54:11
1894	11	418	A COMMENT	\N	2014-07-19 09:16:53	2014-07-19 09:16:53
1895	43	418	A COMMENT	\N	2014-07-20 00:28:35	2014-07-20 00:28:35
1896	37	418	A COMMENT	\N	2014-07-21 01:30:30	2014-07-21 01:30:30
1897	2	418	A COMMENT	\N	2014-07-22 02:28:38	2014-07-22 02:28:38
1898	4	418	A COMMENT	\N	2014-07-22 12:01:42	2014-07-22 12:01:42
1899	14	418	A COMMENT	\N	2014-07-23 14:41:44	2014-07-23 14:41:44
1900	43	418	A COMMENT	\N	2014-07-26 18:39:46	2014-07-26 18:39:46
1901	33	420	A COMMENT	\N	2014-06-23 12:35:35	2014-06-23 12:35:35
1902	32	420	A COMMENT	\N	2014-06-24 21:14:33	2014-06-24 21:14:33
1903	11	420	A COMMENT	\N	2014-07-08 13:46:02	2014-07-08 13:46:02
1904	30	420	A COMMENT	\N	2014-07-09 07:50:54	2014-07-09 07:50:54
1905	47	420	A COMMENT	\N	2014-07-09 22:57:06	2014-07-09 22:57:06
1906	39	420	A COMMENT	\N	2014-07-16 05:33:55	2014-07-16 05:33:55
1907	4	420	A COMMENT	\N	2014-07-16 18:46:14	2014-07-16 18:46:14
1908	30	420	A COMMENT	\N	2014-07-20 19:52:45	2014-07-20 19:52:45
1909	14	420	A COMMENT	\N	2014-07-21 14:18:31	2014-07-21 14:18:31
1910	28	420	A COMMENT	\N	2014-07-25 23:35:54	2014-07-25 23:35:54
1911	3	420	A COMMENT	\N	2014-07-26 21:35:08	2014-07-26 21:35:08
1912	33	421	A COMMENT	\N	2014-06-28 14:21:37	2014-06-28 14:21:37
1913	14	424	A COMMENT	\N	2014-06-28 23:58:42	2014-06-28 23:58:42
1914	21	424	A COMMENT	\N	2014-07-04 07:56:32	2014-07-04 07:56:32
1915	47	424	A COMMENT	\N	2014-07-14 01:31:13	2014-07-14 01:31:13
1916	11	424	A COMMENT	\N	2014-07-14 11:50:48	2014-07-14 11:50:48
1917	3	424	A COMMENT	\N	2014-07-20 05:43:35	2014-07-20 05:43:35
1918	27	425	A COMMENT	\N	2014-06-28 08:19:24	2014-06-28 08:19:24
1919	10	425	A COMMENT	\N	2014-07-03 06:46:56	2014-07-03 06:46:56
1920	10	425	A COMMENT	\N	2014-07-05 22:21:38	2014-07-05 22:21:38
1921	4	425	A COMMENT	\N	2014-07-08 10:37:36	2014-07-08 10:37:36
1922	8	425	A COMMENT	\N	2014-07-08 17:19:12	2014-07-08 17:19:12
1923	14	425	A COMMENT	\N	2014-07-09 06:36:43	2014-07-09 06:36:43
1924	14	425	A COMMENT	\N	2014-07-10 04:11:10	2014-07-10 04:11:10
1925	30	425	A COMMENT	\N	2014-07-12 19:07:12	2014-07-12 19:07:12
1926	45	425	A COMMENT	\N	2014-07-21 07:53:22	2014-07-21 07:53:22
1927	33	426	A COMMENT	\N	2014-07-18 19:24:05	2014-07-18 19:24:05
1928	4	426	A COMMENT	\N	2014-07-20 02:25:20	2014-07-20 02:25:20
1929	45	426	A COMMENT	\N	2014-07-22 10:06:12	2014-07-22 10:06:12
1930	43	426	A COMMENT	\N	2014-07-24 05:11:24	2014-07-24 05:11:24
1931	43	426	A COMMENT	\N	2014-07-24 18:51:18	2014-07-24 18:51:18
1932	3	426	A COMMENT	\N	2014-07-25 10:17:34	2014-07-25 10:17:34
1933	11	427	A COMMENT	\N	2014-06-27 16:19:46	2014-06-27 16:19:46
1934	37	427	A COMMENT	\N	2014-07-07 15:21:19	2014-07-07 15:21:19
1935	32	427	A COMMENT	\N	2014-07-09 01:17:26	2014-07-09 01:17:26
1936	33	428	A COMMENT	\N	2014-06-30 07:20:38	2014-06-30 07:20:38
1937	28	429	A COMMENT	\N	2014-06-28 19:51:05	2014-06-28 19:51:05
1938	45	429	A COMMENT	\N	2014-07-04 13:34:34	2014-07-04 13:34:34
1939	3	429	A COMMENT	\N	2014-07-16 09:02:43	2014-07-16 09:02:43
1940	11	429	A COMMENT	\N	2014-07-26 16:53:18	2014-07-26 16:53:18
1941	33	431	A COMMENT	\N	2014-06-25 01:47:54	2014-06-25 01:47:54
1942	33	432	A COMMENT	\N	2014-07-03 13:42:32	2014-07-03 13:42:32
1943	43	432	A COMMENT	\N	2014-07-26 15:43:32	2014-07-26 15:43:32
1944	33	433	A COMMENT	\N	2014-07-20 08:51:07	2014-07-20 08:51:07
1945	37	433	A COMMENT	\N	2014-07-20 15:13:09	2014-07-20 15:13:09
1946	45	433	A COMMENT	\N	2014-07-20 15:31:30	2014-07-20 15:31:30
1947	2	433	A COMMENT	\N	2014-07-20 17:21:53	2014-07-20 17:21:53
1948	27	433	A COMMENT	\N	2014-07-21 07:08:29	2014-07-21 07:08:29
1949	21	433	A COMMENT	\N	2014-07-21 22:52:59	2014-07-21 22:52:59
1950	21	433	A COMMENT	\N	2014-07-22 08:41:57	2014-07-22 08:41:57
1951	21	433	A COMMENT	\N	2014-07-23 02:59:38	2014-07-23 02:59:38
1952	30	433	A COMMENT	\N	2014-07-23 09:13:27	2014-07-23 09:13:27
1953	39	433	A COMMENT	\N	2014-07-23 18:56:15	2014-07-23 18:56:15
1954	37	433	A COMMENT	\N	2014-07-24 05:35:13	2014-07-24 05:35:13
1955	47	433	A COMMENT	\N	2014-07-24 10:07:26	2014-07-24 10:07:26
1956	3	433	A COMMENT	\N	2014-07-24 15:53:44	2014-07-24 15:53:44
1957	32	433	A COMMENT	\N	2014-07-24 19:28:48	2014-07-24 19:28:48
1958	2	433	A COMMENT	\N	2014-07-24 20:17:19	2014-07-24 20:17:19
1959	30	433	A COMMENT	\N	2014-07-25 01:10:24	2014-07-25 01:10:24
1960	43	433	A COMMENT	\N	2014-07-25 03:41:28	2014-07-25 03:41:28
1961	37	433	A COMMENT	\N	2014-07-25 05:17:29	2014-07-25 05:17:29
1962	32	433	A COMMENT	\N	2014-07-25 06:07:57	2014-07-25 06:07:57
1963	3	433	A COMMENT	\N	2014-07-26 19:53:07	2014-07-26 19:53:07
1964	14	433	A COMMENT	\N	2014-07-26 19:59:47	2014-07-26 19:59:47
1965	1	435	A COMMENT	\N	2014-07-15 13:46:04	2014-07-15 13:46:04
1966	43	435	A COMMENT	\N	2014-07-15 20:56:04	2014-07-15 20:56:04
1967	43	435	A COMMENT	\N	2014-07-17 17:04:46	2014-07-17 17:04:46
1968	2	435	A COMMENT	\N	2014-07-18 07:37:14	2014-07-18 07:37:14
1969	28	435	A COMMENT	\N	2014-07-19 04:36:28	2014-07-19 04:36:28
1970	1	435	A COMMENT	\N	2014-07-19 21:24:51	2014-07-19 21:24:51
1971	4	435	A COMMENT	\N	2014-07-19 22:59:13	2014-07-19 22:59:13
1972	39	435	A COMMENT	\N	2014-07-20 11:08:04	2014-07-20 11:08:04
1973	45	435	A COMMENT	\N	2014-07-22 06:50:25	2014-07-22 06:50:25
1974	8	435	A COMMENT	\N	2014-07-26 15:49:02	2014-07-26 15:49:02
1975	37	435	A COMMENT	\N	2014-07-26 22:33:44	2014-07-26 22:33:44
1976	43	436	A COMMENT	\N	2014-07-13 11:26:25	2014-07-13 11:26:25
1977	30	436	A COMMENT	\N	2014-07-18 12:15:42	2014-07-18 12:15:42
1978	33	437	A COMMENT	\N	2014-07-05 14:11:07	2014-07-05 14:11:07
1979	39	437	A COMMENT	\N	2014-07-06 00:01:40	2014-07-06 00:01:40
1980	37	437	A COMMENT	\N	2014-07-08 03:54:10	2014-07-08 03:54:10
1981	14	437	A COMMENT	\N	2014-07-12 22:09:31	2014-07-12 22:09:31
1982	28	437	A COMMENT	\N	2014-07-14 03:45:29	2014-07-14 03:45:29
1983	14	437	A COMMENT	\N	2014-07-15 05:06:21	2014-07-15 05:06:21
1984	1	437	A COMMENT	\N	2014-07-15 18:36:22	2014-07-15 18:36:22
1985	37	437	A COMMENT	\N	2014-07-16 00:19:48	2014-07-16 00:19:48
1986	27	437	A COMMENT	\N	2014-07-16 22:43:45	2014-07-16 22:43:45
1987	1	437	A COMMENT	\N	2014-07-18 12:35:39	2014-07-18 12:35:39
1988	32	437	A COMMENT	\N	2014-07-21 01:37:14	2014-07-21 01:37:14
1989	11	437	A COMMENT	\N	2014-07-23 04:44:23	2014-07-23 04:44:23
1990	4	437	A COMMENT	\N	2014-07-24 03:02:26	2014-07-24 03:02:26
1991	45	437	A COMMENT	\N	2014-07-26 20:10:06	2014-07-26 20:10:06
1992	37	437	A COMMENT	\N	2014-07-26 21:36:36	2014-07-26 21:36:36
1993	3	438	A COMMENT	\N	2014-07-18 19:23:49	2014-07-18 19:23:49
1994	10	438	A COMMENT	\N	2014-07-25 04:05:56	2014-07-25 04:05:56
1995	33	439	A COMMENT	\N	2014-06-26 04:12:22	2014-06-26 04:12:22
1996	30	439	A COMMENT	\N	2014-07-04 14:53:10	2014-07-04 14:53:10
1997	3	439	A COMMENT	\N	2014-07-11 01:00:17	2014-07-11 01:00:17
1998	28	439	A COMMENT	\N	2014-07-11 08:30:38	2014-07-11 08:30:38
1999	43	439	A COMMENT	\N	2014-07-12 12:58:42	2014-07-12 12:58:42
2000	27	439	A COMMENT	\N	2014-07-13 04:43:12	2014-07-13 04:43:12
2001	2	439	A COMMENT	\N	2014-07-16 16:15:17	2014-07-16 16:15:17
2002	14	439	A COMMENT	\N	2014-07-24 02:38:40	2014-07-24 02:38:40
2003	39	439	A COMMENT	\N	2014-07-24 03:49:18	2014-07-24 03:49:18
2004	10	439	A COMMENT	\N	2014-07-25 01:52:52	2014-07-25 01:52:52
2005	32	439	A COMMENT	\N	2014-07-26 20:05:17	2014-07-26 20:05:17
2006	39	440	A COMMENT	\N	2014-07-03 12:58:46	2014-07-03 12:58:46
2007	47	440	A COMMENT	\N	2014-07-08 14:27:45	2014-07-08 14:27:45
2008	32	440	A COMMENT	\N	2014-07-12 12:44:50	2014-07-12 12:44:50
2009	32	440	A COMMENT	\N	2014-07-15 14:22:56	2014-07-15 14:22:56
2010	28	440	A COMMENT	\N	2014-07-25 01:49:06	2014-07-25 01:49:06
2011	33	441	A COMMENT	\N	2014-07-07 00:09:15	2014-07-07 00:09:15
2012	10	441	A COMMENT	\N	2014-07-11 00:29:56	2014-07-11 00:29:56
2013	4	441	A COMMENT	\N	2014-07-12 02:53:16	2014-07-12 02:53:16
2014	47	441	A COMMENT	\N	2014-07-12 23:32:00	2014-07-12 23:32:00
2015	3	441	A COMMENT	\N	2014-07-20 03:16:15	2014-07-20 03:16:15
2016	28	441	A COMMENT	\N	2014-07-20 18:17:36	2014-07-20 18:17:36
2017	10	441	A COMMENT	\N	2014-07-23 21:03:51	2014-07-23 21:03:51
2018	45	442	A COMMENT	\N	2014-07-26 12:13:32	2014-07-26 12:13:32
2019	3	443	A COMMENT	\N	2014-07-02 20:51:15	2014-07-02 20:51:15
2020	28	443	A COMMENT	\N	2014-07-10 06:38:28	2014-07-10 06:38:28
2021	10	443	A COMMENT	\N	2014-07-11 16:56:38	2014-07-11 16:56:38
2022	27	443	A COMMENT	\N	2014-07-11 17:21:12	2014-07-11 17:21:12
2023	37	443	A COMMENT	\N	2014-07-14 22:38:38	2014-07-14 22:38:38
2024	33	444	A COMMENT	\N	2014-06-19 00:52:25	2014-06-19 00:52:25
2025	37	444	A COMMENT	\N	2014-06-22 03:10:31	2014-06-22 03:10:31
2026	2	444	A COMMENT	\N	2014-07-01 22:48:54	2014-07-01 22:48:54
2027	10	444	A COMMENT	\N	2014-07-07 18:52:57	2014-07-07 18:52:57
2028	47	444	A COMMENT	\N	2014-07-14 02:11:11	2014-07-14 02:11:11
2029	45	444	A COMMENT	\N	2014-07-19 08:43:45	2014-07-19 08:43:45
2030	14	444	A COMMENT	\N	2014-07-22 01:48:14	2014-07-22 01:48:14
2031	4	444	A COMMENT	\N	2014-07-23 14:11:15	2014-07-23 14:11:15
2032	43	444	A COMMENT	\N	2014-07-24 22:16:50	2014-07-24 22:16:50
2033	2	445	A COMMENT	\N	2014-06-29 16:41:30	2014-06-29 16:41:30
2034	37	445	A COMMENT	\N	2014-07-01 14:05:34	2014-07-01 14:05:34
2035	21	445	A COMMENT	\N	2014-07-02 06:28:19	2014-07-02 06:28:19
2036	30	445	A COMMENT	\N	2014-07-06 09:00:35	2014-07-06 09:00:35
2037	47	445	A COMMENT	\N	2014-07-06 16:14:27	2014-07-06 16:14:27
2038	30	445	A COMMENT	\N	2014-07-15 17:34:35	2014-07-15 17:34:35
2039	37	445	A COMMENT	\N	2014-07-15 21:54:40	2014-07-15 21:54:40
2040	21	445	A COMMENT	\N	2014-07-16 05:14:46	2014-07-16 05:14:46
2041	43	445	A COMMENT	\N	2014-07-20 05:03:18	2014-07-20 05:03:18
2042	10	445	A COMMENT	\N	2014-07-20 20:08:20	2014-07-20 20:08:20
2043	47	445	A COMMENT	\N	2014-07-24 08:49:39	2014-07-24 08:49:39
2044	15	447	A COMMENT	\N	2014-05-28 20:01:24	2014-05-28 20:01:24
2045	15	448	A COMMENT	\N	2014-06-10 20:42:50	2014-06-10 20:42:50
2046	3	448	A COMMENT	\N	2014-06-10 20:44:28	2014-06-10 20:44:28
2047	1	448	A COMMENT	\N	2014-06-12 05:52:22	2014-06-12 05:52:22
2048	4	448	A COMMENT	\N	2014-06-20 02:10:13	2014-06-20 02:10:13
2049	47	448	A COMMENT	\N	2014-06-20 04:24:39	2014-06-20 04:24:39
2050	11	448	A COMMENT	\N	2014-06-26 19:58:05	2014-06-26 19:58:05
2051	39	448	A COMMENT	\N	2014-07-14 11:35:42	2014-07-14 11:35:42
2052	28	448	A COMMENT	\N	2014-07-16 05:14:34	2014-07-16 05:14:34
2053	15	449	A COMMENT	\N	2014-07-11 20:02:58	2014-07-11 20:02:58
2054	4	449	A COMMENT	\N	2014-07-15 14:13:51	2014-07-15 14:13:51
2055	43	449	A COMMENT	\N	2014-07-19 06:33:02	2014-07-19 06:33:02
2056	11	449	A COMMENT	\N	2014-07-19 16:48:59	2014-07-19 16:48:59
2057	28	449	A COMMENT	\N	2014-07-21 18:55:55	2014-07-21 18:55:55
2058	39	449	A COMMENT	\N	2014-07-21 23:15:41	2014-07-21 23:15:41
2059	10	450	A COMMENT	\N	2014-07-17 07:42:52	2014-07-17 07:42:52
2060	21	450	A COMMENT	\N	2014-07-17 17:55:55	2014-07-17 17:55:55
2061	32	450	A COMMENT	\N	2014-07-18 20:31:08	2014-07-18 20:31:08
2062	10	451	A COMMENT	\N	2014-06-06 17:09:34	2014-06-06 17:09:34
2063	27	451	A COMMENT	\N	2014-06-08 20:19:59	2014-06-08 20:19:59
2064	32	451	A COMMENT	\N	2014-06-22 22:38:01	2014-06-22 22:38:01
2065	21	451	A COMMENT	\N	2014-06-23 15:37:51	2014-06-23 15:37:51
2066	8	451	A COMMENT	\N	2014-06-25 23:24:33	2014-06-25 23:24:33
2067	43	451	A COMMENT	\N	2014-06-26 15:15:48	2014-06-26 15:15:48
2068	2	451	A COMMENT	\N	2014-06-26 16:02:14	2014-06-26 16:02:14
2069	30	451	A COMMENT	\N	2014-07-03 19:30:05	2014-07-03 19:30:05
2070	3	451	A COMMENT	\N	2014-07-04 06:09:02	2014-07-04 06:09:02
2071	8	451	A COMMENT	\N	2014-07-08 04:11:27	2014-07-08 04:11:27
2072	8	451	A COMMENT	\N	2014-07-09 12:58:45	2014-07-09 12:58:45
2073	11	451	A COMMENT	\N	2014-07-11 22:04:47	2014-07-11 22:04:47
2074	45	451	A COMMENT	\N	2014-07-12 05:11:47	2014-07-12 05:11:47
2075	3	451	A COMMENT	\N	2014-07-16 13:18:47	2014-07-16 13:18:47
2076	1	451	A COMMENT	\N	2014-07-17 00:19:21	2014-07-17 00:19:21
2077	2	451	A COMMENT	\N	2014-07-19 16:11:56	2014-07-19 16:11:56
2078	43	452	A COMMENT	\N	2014-06-12 10:51:38	2014-06-12 10:51:38
2079	45	452	A COMMENT	\N	2014-06-27 03:38:27	2014-06-27 03:38:27
2080	45	452	A COMMENT	\N	2014-06-29 22:44:43	2014-06-29 22:44:43
2081	37	452	A COMMENT	\N	2014-07-14 00:40:15	2014-07-14 00:40:15
2082	30	452	A COMMENT	\N	2014-07-20 15:05:57	2014-07-20 15:05:57
2083	37	453	A COMMENT	\N	2014-06-06 21:00:33	2014-06-06 21:00:33
2084	28	453	A COMMENT	\N	2014-06-14 08:12:03	2014-06-14 08:12:03
2085	32	453	A COMMENT	\N	2014-06-18 17:28:43	2014-06-18 17:28:43
2086	2	453	A COMMENT	\N	2014-06-24 19:32:59	2014-06-24 19:32:59
2087	3	454	A COMMENT	\N	2014-06-17 14:18:03	2014-06-17 14:18:03
2088	30	454	A COMMENT	\N	2014-07-21 13:59:29	2014-07-21 13:59:29
2089	4	456	A COMMENT	\N	2014-06-08 20:13:46	2014-06-08 20:13:46
2090	47	456	A COMMENT	\N	2014-06-08 22:10:51	2014-06-08 22:10:51
2091	28	456	A COMMENT	\N	2014-06-10 11:31:31	2014-06-10 11:31:31
2092	27	456	A COMMENT	\N	2014-06-23 14:36:28	2014-06-23 14:36:28
2093	8	456	A COMMENT	\N	2014-06-29 04:23:37	2014-06-29 04:23:37
2094	47	456	A COMMENT	\N	2014-07-05 18:51:20	2014-07-05 18:51:20
2095	3	456	A COMMENT	\N	2014-07-17 20:37:26	2014-07-17 20:37:26
2096	43	456	A COMMENT	\N	2014-07-18 06:03:39	2014-07-18 06:03:39
2097	1	456	A COMMENT	\N	2014-07-26 21:18:52	2014-07-26 21:18:52
2098	15	457	A COMMENT	\N	2014-06-06 03:26:07	2014-06-06 03:26:07
2099	4	457	A COMMENT	\N	2014-07-07 19:16:51	2014-07-07 19:16:51
2100	39	457	A COMMENT	\N	2014-07-16 07:25:02	2014-07-16 07:25:02
2101	45	458	A COMMENT	\N	2014-07-08 11:44:38	2014-07-08 11:44:38
2102	2	458	A COMMENT	\N	2014-07-12 21:07:18	2014-07-12 21:07:18
2103	15	459	A COMMENT	\N	2014-05-29 12:08:12	2014-05-29 12:08:12
2104	11	459	A COMMENT	\N	2014-06-02 22:37:09	2014-06-02 22:37:09
2105	8	459	A COMMENT	\N	2014-06-05 18:04:27	2014-06-05 18:04:27
2106	43	459	A COMMENT	\N	2014-06-17 09:43:38	2014-06-17 09:43:38
2107	39	459	A COMMENT	\N	2014-07-06 19:02:31	2014-07-06 19:02:31
2108	39	460	A COMMENT	\N	2014-06-07 16:08:35	2014-06-07 16:08:35
2109	30	460	A COMMENT	\N	2014-06-18 22:32:16	2014-06-18 22:32:16
2110	8	460	A COMMENT	\N	2014-07-13 06:13:28	2014-07-13 06:13:28
2111	15	461	A COMMENT	\N	2014-06-02 15:11:18	2014-06-02 15:11:18
2112	43	461	A COMMENT	\N	2014-06-05 09:10:13	2014-06-05 09:10:13
2113	21	461	A COMMENT	\N	2014-06-08 09:08:24	2014-06-08 09:08:24
2114	3	461	A COMMENT	\N	2014-06-15 12:21:40	2014-06-15 12:21:40
2115	39	461	A COMMENT	\N	2014-06-22 09:35:03	2014-06-22 09:35:03
2116	1	461	A COMMENT	\N	2014-06-29 01:09:04	2014-06-29 01:09:04
2117	10	461	A COMMENT	\N	2014-07-11 01:01:23	2014-07-11 01:01:23
2118	1	461	A COMMENT	\N	2014-07-18 13:10:58	2014-07-18 13:10:58
2119	32	461	A COMMENT	\N	2014-07-23 07:58:30	2014-07-23 07:58:30
2120	1	462	A COMMENT	\N	2014-07-02 08:24:07	2014-07-02 08:24:07
2121	37	462	A COMMENT	\N	2014-07-05 17:58:38	2014-07-05 17:58:38
2122	1	462	A COMMENT	\N	2014-07-05 18:24:41	2014-07-05 18:24:41
2123	30	462	A COMMENT	\N	2014-07-08 17:30:44	2014-07-08 17:30:44
2124	3	462	A COMMENT	\N	2014-07-10 02:27:43	2014-07-10 02:27:43
2125	21	462	A COMMENT	\N	2014-07-10 04:57:41	2014-07-10 04:57:41
2126	30	462	A COMMENT	\N	2014-07-15 15:00:25	2014-07-15 15:00:25
2127	2	462	A COMMENT	\N	2014-07-17 08:28:41	2014-07-17 08:28:41
2128	32	462	A COMMENT	\N	2014-07-22 22:39:46	2014-07-22 22:39:46
2129	39	462	A COMMENT	\N	2014-07-25 08:16:24	2014-07-25 08:16:24
2130	15	463	A COMMENT	\N	2014-07-04 13:49:05	2014-07-04 13:49:05
2131	30	463	A COMMENT	\N	2014-07-04 14:13:42	2014-07-04 14:13:42
2132	10	463	A COMMENT	\N	2014-07-06 00:14:54	2014-07-06 00:14:54
2133	11	463	A COMMENT	\N	2014-07-10 12:44:48	2014-07-10 12:44:48
2134	30	463	A COMMENT	\N	2014-07-11 09:06:31	2014-07-11 09:06:31
2135	45	463	A COMMENT	\N	2014-07-14 18:11:27	2014-07-14 18:11:27
2136	37	463	A COMMENT	\N	2014-07-16 13:47:54	2014-07-16 13:47:54
2137	8	463	A COMMENT	\N	2014-07-18 20:31:11	2014-07-18 20:31:11
2138	28	463	A COMMENT	\N	2014-07-23 04:51:02	2014-07-23 04:51:02
2139	21	463	A COMMENT	\N	2014-07-24 19:08:17	2014-07-24 19:08:17
2140	39	463	A COMMENT	\N	2014-07-26 20:54:21	2014-07-26 20:54:21
2141	32	464	A COMMENT	\N	2014-07-08 12:29:27	2014-07-08 12:29:27
2142	10	464	A COMMENT	\N	2014-07-09 18:34:06	2014-07-09 18:34:06
2143	1	464	A COMMENT	\N	2014-07-09 18:55:29	2014-07-09 18:55:29
2144	8	464	A COMMENT	\N	2014-07-11 18:45:27	2014-07-11 18:45:27
2145	14	464	A COMMENT	\N	2014-07-12 09:53:55	2014-07-12 09:53:55
2146	28	464	A COMMENT	\N	2014-07-16 21:32:46	2014-07-16 21:32:46
2147	37	464	A COMMENT	\N	2014-07-18 19:03:16	2014-07-18 19:03:16
2148	27	464	A COMMENT	\N	2014-07-19 04:05:51	2014-07-19 04:05:51
2149	37	464	A COMMENT	\N	2014-07-20 18:05:16	2014-07-20 18:05:16
2150	43	464	A COMMENT	\N	2014-07-21 12:19:04	2014-07-21 12:19:04
2151	2	464	A COMMENT	\N	2014-07-23 09:45:50	2014-07-23 09:45:50
2152	21	464	A COMMENT	\N	2014-07-24 12:17:47	2014-07-24 12:17:47
2153	27	464	A COMMENT	\N	2014-07-24 23:36:21	2014-07-24 23:36:21
2154	28	465	A COMMENT	\N	2014-05-29 02:03:47	2014-05-29 02:03:47
2155	39	465	A COMMENT	\N	2014-06-29 18:35:32	2014-06-29 18:35:32
2156	39	465	A COMMENT	\N	2014-06-30 01:46:21	2014-06-30 01:46:21
2157	32	465	A COMMENT	\N	2014-07-06 01:04:57	2014-07-06 01:04:57
2158	2	465	A COMMENT	\N	2014-07-15 11:59:05	2014-07-15 11:59:05
2159	15	466	A COMMENT	\N	2014-05-31 15:53:33	2014-05-31 15:53:33
2160	4	466	A COMMENT	\N	2014-06-01 01:13:06	2014-06-01 01:13:06
2161	15	467	A COMMENT	\N	2014-06-13 05:22:39	2014-06-13 05:22:39
2162	3	467	A COMMENT	\N	2014-06-13 14:08:15	2014-06-13 14:08:15
2163	11	467	A COMMENT	\N	2014-06-15 18:54:27	2014-06-15 18:54:27
2164	21	467	A COMMENT	\N	2014-06-25 10:15:00	2014-06-25 10:15:00
2165	10	467	A COMMENT	\N	2014-07-06 07:12:32	2014-07-06 07:12:32
2166	45	467	A COMMENT	\N	2014-07-10 16:11:02	2014-07-10 16:11:02
2167	32	467	A COMMENT	\N	2014-07-11 00:42:42	2014-07-11 00:42:42
2168	10	467	A COMMENT	\N	2014-07-23 05:28:07	2014-07-23 05:28:07
2169	28	467	A COMMENT	\N	2014-07-26 03:27:25	2014-07-26 03:27:25
2170	43	468	A COMMENT	\N	2014-06-18 02:46:56	2014-06-18 02:46:56
2171	39	468	A COMMENT	\N	2014-06-23 09:44:00	2014-06-23 09:44:00
2172	28	468	A COMMENT	\N	2014-06-25 15:33:45	2014-06-25 15:33:45
2173	14	468	A COMMENT	\N	2014-07-07 02:34:49	2014-07-07 02:34:49
2174	30	468	A COMMENT	\N	2014-07-15 05:27:15	2014-07-15 05:27:15
2175	28	468	A COMMENT	\N	2014-07-18 09:44:19	2014-07-18 09:44:19
2176	15	469	A COMMENT	\N	2014-06-20 11:05:04	2014-06-20 11:05:04
2177	32	470	A COMMENT	\N	2014-07-02 17:07:37	2014-07-02 17:07:37
2178	15	471	A COMMENT	\N	2014-06-25 07:41:25	2014-06-25 07:41:25
2179	3	471	A COMMENT	\N	2014-07-02 07:57:16	2014-07-02 07:57:16
2180	28	471	A COMMENT	\N	2014-07-18 08:17:40	2014-07-18 08:17:40
2181	28	471	A COMMENT	\N	2014-07-23 12:26:28	2014-07-23 12:26:28
2182	2	472	A COMMENT	\N	2014-06-09 12:59:43	2014-06-09 12:59:43
2183	14	472	A COMMENT	\N	2014-06-11 23:22:55	2014-06-11 23:22:55
2184	21	472	A COMMENT	\N	2014-06-16 00:53:27	2014-06-16 00:53:27
2185	28	472	A COMMENT	\N	2014-06-30 06:07:12	2014-06-30 06:07:12
2186	32	472	A COMMENT	\N	2014-07-04 11:40:51	2014-07-04 11:40:51
2187	47	472	A COMMENT	\N	2014-07-13 02:08:19	2014-07-13 02:08:19
2188	21	472	A COMMENT	\N	2014-07-21 01:25:33	2014-07-21 01:25:33
2189	1	472	A COMMENT	\N	2014-07-24 06:57:27	2014-07-24 06:57:27
2190	15	475	A COMMENT	\N	2014-07-11 20:33:40	2014-07-11 20:33:40
2191	2	475	A COMMENT	\N	2014-07-14 01:45:03	2014-07-14 01:45:03
2192	47	475	A COMMENT	\N	2014-07-14 09:41:07	2014-07-14 09:41:07
2193	30	475	A COMMENT	\N	2014-07-15 03:28:48	2014-07-15 03:28:48
2194	10	475	A COMMENT	\N	2014-07-16 06:09:50	2014-07-16 06:09:50
2195	43	475	A COMMENT	\N	2014-07-17 04:16:32	2014-07-17 04:16:32
2196	14	475	A COMMENT	\N	2014-07-20 00:10:04	2014-07-20 00:10:04
2197	3	475	A COMMENT	\N	2014-07-20 21:58:47	2014-07-20 21:58:47
2198	10	475	A COMMENT	\N	2014-07-21 23:31:18	2014-07-21 23:31:18
2199	1	475	A COMMENT	\N	2014-07-23 01:58:15	2014-07-23 01:58:15
2200	37	475	A COMMENT	\N	2014-07-23 18:12:37	2014-07-23 18:12:37
2201	14	475	A COMMENT	\N	2014-07-25 13:49:27	2014-07-25 13:49:27
2202	32	475	A COMMENT	\N	2014-07-25 15:21:14	2014-07-25 15:21:14
2203	32	476	A COMMENT	\N	2014-07-26 00:33:33	2014-07-26 00:33:33
2204	15	477	A COMMENT	\N	2014-07-15 08:08:34	2014-07-15 08:08:34
2205	15	479	A COMMENT	\N	2014-06-15 09:50:10	2014-06-15 09:50:10
2206	30	479	A COMMENT	\N	2014-07-14 03:40:09	2014-07-14 03:40:09
2207	4	479	A COMMENT	\N	2014-07-15 22:33:10	2014-07-15 22:33:10
2208	15	480	A COMMENT	\N	2014-06-21 04:11:20	2014-06-21 04:11:20
2209	3	482	A COMMENT	\N	2014-06-16 09:44:15	2014-06-16 09:44:15
2210	11	482	A COMMENT	\N	2014-06-16 17:44:29	2014-06-16 17:44:29
2211	45	482	A COMMENT	\N	2014-07-18 15:20:45	2014-07-18 15:20:45
2212	45	482	A COMMENT	\N	2014-07-20 17:49:33	2014-07-20 17:49:33
2213	1	482	A COMMENT	\N	2014-07-26 09:48:11	2014-07-26 09:48:11
2214	15	483	A COMMENT	\N	2014-07-03 04:09:05	2014-07-03 04:09:05
2215	15	484	A COMMENT	\N	2014-07-17 10:55:43	2014-07-17 10:55:43
2216	14	484	A COMMENT	\N	2014-07-18 12:02:06	2014-07-18 12:02:06
2217	11	485	A COMMENT	\N	2014-07-21 23:18:05	2014-07-21 23:18:05
2218	15	486	A COMMENT	\N	2014-06-23 16:56:26	2014-06-23 16:56:26
2219	37	487	A COMMENT	\N	2014-05-23 18:06:20	2014-05-23 18:06:20
2220	47	487	A COMMENT	\N	2014-05-24 05:41:00	2014-05-24 05:41:00
2221	27	487	A COMMENT	\N	2014-05-31 07:44:30	2014-05-31 07:44:30
2222	39	487	A COMMENT	\N	2014-06-04 09:48:11	2014-06-04 09:48:11
2223	28	487	A COMMENT	\N	2014-06-18 18:45:25	2014-06-18 18:45:25
2224	2	487	A COMMENT	\N	2014-06-20 00:07:26	2014-06-20 00:07:26
2225	8	487	A COMMENT	\N	2014-07-06 18:41:33	2014-07-06 18:41:33
2226	10	487	A COMMENT	\N	2014-07-18 03:22:04	2014-07-18 03:22:04
2227	8	489	A COMMENT	\N	2014-07-02 20:16:18	2014-07-02 20:16:18
2228	21	489	A COMMENT	\N	2014-07-07 06:09:13	2014-07-07 06:09:13
2229	39	489	A COMMENT	\N	2014-07-17 09:39:03	2014-07-17 09:39:03
2230	47	489	A COMMENT	\N	2014-07-19 15:30:05	2014-07-19 15:30:05
2231	4	489	A COMMENT	\N	2014-07-25 17:01:44	2014-07-25 17:01:44
2232	39	490	A COMMENT	\N	2014-07-11 02:48:29	2014-07-11 02:48:29
2233	14	490	A COMMENT	\N	2014-07-16 10:01:35	2014-07-16 10:01:35
2234	15	491	A COMMENT	\N	2014-06-05 00:11:06	2014-06-05 00:11:06
2235	2	491	A COMMENT	\N	2014-07-13 19:43:38	2014-07-13 19:43:38
2236	15	493	A COMMENT	\N	2014-06-01 20:26:11	2014-06-01 20:26:11
2237	39	493	A COMMENT	\N	2014-06-05 05:14:38	2014-06-05 05:14:38
2238	11	493	A COMMENT	\N	2014-06-19 18:01:39	2014-06-19 18:01:39
2239	47	493	A COMMENT	\N	2014-06-20 10:18:11	2014-06-20 10:18:11
2240	43	494	A COMMENT	\N	2014-06-22 06:33:09	2014-06-22 06:33:09
2241	11	494	A COMMENT	\N	2014-06-25 02:47:37	2014-06-25 02:47:37
2242	2	494	A COMMENT	\N	2014-07-14 04:43:26	2014-07-14 04:43:26
2243	28	494	A COMMENT	\N	2014-07-22 06:19:50	2014-07-22 06:19:50
2244	30	494	A COMMENT	\N	2014-07-24 02:20:02	2014-07-24 02:20:02
2245	39	494	A COMMENT	\N	2014-07-24 18:53:24	2014-07-24 18:53:24
2246	15	496	A COMMENT	\N	2014-06-23 01:24:14	2014-06-23 01:24:14
2247	27	496	A COMMENT	\N	2014-06-25 11:47:55	2014-06-25 11:47:55
2248	37	496	A COMMENT	\N	2014-06-29 22:00:11	2014-06-29 22:00:11
2249	47	496	A COMMENT	\N	2014-07-09 13:22:21	2014-07-09 13:22:21
2250	43	496	A COMMENT	\N	2014-07-09 18:40:59	2014-07-09 18:40:59
2251	14	496	A COMMENT	\N	2014-07-11 10:48:59	2014-07-11 10:48:59
2252	30	496	A COMMENT	\N	2014-07-16 07:50:52	2014-07-16 07:50:52
2253	15	497	A COMMENT	\N	2014-06-26 03:04:35	2014-06-26 03:04:35
2254	3	497	A COMMENT	\N	2014-06-26 19:29:58	2014-06-26 19:29:58
2255	3	497	A COMMENT	\N	2014-06-28 04:41:57	2014-06-28 04:41:57
2256	11	497	A COMMENT	\N	2014-07-04 02:51:38	2014-07-04 02:51:38
2257	32	497	A COMMENT	\N	2014-07-12 20:36:01	2014-07-12 20:36:01
2258	27	497	A COMMENT	\N	2014-07-14 10:17:10	2014-07-14 10:17:10
2259	21	497	A COMMENT	\N	2014-07-17 15:29:23	2014-07-17 15:29:23
2260	10	497	A COMMENT	\N	2014-07-18 13:16:50	2014-07-18 13:16:50
2261	37	497	A COMMENT	\N	2014-07-19 05:41:48	2014-07-19 05:41:48
2262	11	497	A COMMENT	\N	2014-07-20 23:45:06	2014-07-20 23:45:06
2263	47	498	A COMMENT	\N	2014-07-20 14:32:16	2014-07-20 14:32:16
2264	2	498	A COMMENT	\N	2014-07-20 16:02:42	2014-07-20 16:02:42
2265	30	498	A COMMENT	\N	2014-07-21 09:54:07	2014-07-21 09:54:07
2266	39	498	A COMMENT	\N	2014-07-21 20:21:48	2014-07-21 20:21:48
2267	30	498	A COMMENT	\N	2014-07-21 22:18:55	2014-07-21 22:18:55
2268	1	498	A COMMENT	\N	2014-07-22 07:16:20	2014-07-22 07:16:20
2269	28	498	A COMMENT	\N	2014-07-23 20:08:17	2014-07-23 20:08:17
2270	4	498	A COMMENT	\N	2014-07-23 22:21:59	2014-07-23 22:21:59
2271	28	498	A COMMENT	\N	2014-07-24 08:20:35	2014-07-24 08:20:35
2272	47	498	A COMMENT	\N	2014-07-25 15:24:19	2014-07-25 15:24:19
2273	14	498	A COMMENT	\N	2014-07-26 00:14:36	2014-07-26 00:14:36
2274	10	498	A COMMENT	\N	2014-07-26 07:00:28	2014-07-26 07:00:28
2275	14	498	A COMMENT	\N	2014-07-26 21:35:19	2014-07-26 21:35:19
2276	15	499	A COMMENT	\N	2014-06-18 17:29:46	2014-06-18 17:29:46
2277	32	499	A COMMENT	\N	2014-06-18 22:28:10	2014-06-18 22:28:10
2278	39	499	A COMMENT	\N	2014-06-19 11:22:06	2014-06-19 11:22:06
2279	8	499	A COMMENT	\N	2014-06-24 08:03:27	2014-06-24 08:03:27
2280	45	499	A COMMENT	\N	2014-06-28 08:04:50	2014-06-28 08:04:50
2281	45	499	A COMMENT	\N	2014-06-29 00:31:08	2014-06-29 00:31:08
2282	1	499	A COMMENT	\N	2014-07-03 23:59:35	2014-07-03 23:59:35
2283	27	499	A COMMENT	\N	2014-07-08 23:18:23	2014-07-08 23:18:23
2284	43	499	A COMMENT	\N	2014-07-12 04:17:38	2014-07-12 04:17:38
2285	39	499	A COMMENT	\N	2014-07-13 22:15:53	2014-07-13 22:15:53
2286	8	499	A COMMENT	\N	2014-07-16 12:21:02	2014-07-16 12:21:02
2287	14	499	A COMMENT	\N	2014-07-22 19:23:39	2014-07-22 19:23:39
2288	28	499	A COMMENT	\N	2014-07-22 21:04:46	2014-07-22 21:04:46
2289	14	499	A COMMENT	\N	2014-07-24 14:07:37	2014-07-24 14:07:37
2290	37	499	A COMMENT	\N	2014-07-24 16:36:03	2014-07-24 16:36:03
2291	15	500	A COMMENT	\N	2014-05-29 07:34:12	2014-05-29 07:34:12
2292	11	500	A COMMENT	\N	2014-05-30 05:15:22	2014-05-30 05:15:22
2293	3	500	A COMMENT	\N	2014-06-02 04:15:36	2014-06-02 04:15:36
2294	4	500	A COMMENT	\N	2014-06-16 05:18:51	2014-06-16 05:18:51
2295	14	500	A COMMENT	\N	2014-06-16 18:46:00	2014-06-16 18:46:00
2296	27	500	A COMMENT	\N	2014-06-24 09:11:18	2014-06-24 09:11:18
2297	28	500	A COMMENT	\N	2014-06-26 02:15:24	2014-06-26 02:15:24
2298	30	500	A COMMENT	\N	2014-06-28 03:57:06	2014-06-28 03:57:06
2299	47	500	A COMMENT	\N	2014-06-30 10:13:11	2014-06-30 10:13:11
2300	3	500	A COMMENT	\N	2014-07-05 23:09:12	2014-07-05 23:09:12
2301	39	500	A COMMENT	\N	2014-07-07 09:39:02	2014-07-07 09:39:02
2302	37	500	A COMMENT	\N	2014-07-10 01:08:02	2014-07-10 01:08:02
2303	10	500	A COMMENT	\N	2014-07-16 19:48:53	2014-07-16 19:48:53
2304	37	500	A COMMENT	\N	2014-07-23 13:05:33	2014-07-23 13:05:33
2305	11	501	A COMMENT	\N	2014-06-11 06:30:24	2014-06-11 06:30:24
2306	39	501	A COMMENT	\N	2014-06-22 11:38:10	2014-06-22 11:38:10
2307	4	501	A COMMENT	\N	2014-06-26 10:34:33	2014-06-26 10:34:33
2308	8	501	A COMMENT	\N	2014-07-06 18:49:38	2014-07-06 18:49:38
2309	15	502	A COMMENT	\N	2014-06-09 17:07:29	2014-06-09 17:07:29
2310	45	502	A COMMENT	\N	2014-06-29 17:07:20	2014-06-29 17:07:20
2311	39	502	A COMMENT	\N	2014-07-25 03:08:11	2014-07-25 03:08:11
2312	43	503	A COMMENT	\N	2014-06-29 23:00:52	2014-06-29 23:00:52
2313	27	503	A COMMENT	\N	2014-07-03 12:01:25	2014-07-03 12:01:25
2314	14	503	A COMMENT	\N	2014-07-05 03:05:28	2014-07-05 03:05:28
2315	15	504	A COMMENT	\N	2014-07-06 07:23:39	2014-07-06 07:23:39
2316	1	504	A COMMENT	\N	2014-07-09 19:06:42	2014-07-09 19:06:42
2317	37	504	A COMMENT	\N	2014-07-09 23:27:46	2014-07-09 23:27:46
2318	30	504	A COMMENT	\N	2014-07-11 11:00:30	2014-07-11 11:00:30
2319	32	504	A COMMENT	\N	2014-07-14 17:54:41	2014-07-14 17:54:41
2320	14	504	A COMMENT	\N	2014-07-17 17:25:53	2014-07-17 17:25:53
2321	47	504	A COMMENT	\N	2014-07-18 08:24:18	2014-07-18 08:24:18
2322	8	504	A COMMENT	\N	2014-07-20 20:06:29	2014-07-20 20:06:29
2323	10	504	A COMMENT	\N	2014-07-22 05:11:31	2014-07-22 05:11:31
2324	45	504	A COMMENT	\N	2014-07-24 04:15:50	2014-07-24 04:15:50
2325	4	506	A COMMENT	\N	2014-06-30 13:18:07	2014-06-30 13:18:07
2326	15	507	A COMMENT	\N	2014-07-22 07:41:19	2014-07-22 07:41:19
2327	2	507	A COMMENT	\N	2014-07-24 06:07:23	2014-07-24 06:07:23
2328	27	507	A COMMENT	\N	2014-07-24 14:05:24	2014-07-24 14:05:24
2329	2	507	A COMMENT	\N	2014-07-25 21:25:03	2014-07-25 21:25:03
2330	17	509	A COMMENT	\N	2014-05-20 23:39:03	2014-05-20 23:39:03
2331	17	510	A COMMENT	\N	2014-06-11 04:03:52	2014-06-11 04:03:52
2332	17	511	A COMMENT	\N	2014-06-15 13:43:46	2014-06-15 13:43:46
2333	17	512	A COMMENT	\N	2014-06-20 06:50:06	2014-06-20 06:50:06
2334	17	515	A COMMENT	\N	2014-06-01 19:53:39	2014-06-01 19:53:39
2335	17	516	A COMMENT	\N	2014-06-04 07:40:13	2014-06-04 07:40:13
2336	23	525	A COMMENT	\N	2014-01-26 15:54:09	2014-01-26 15:54:09
2337	23	530	A COMMENT	\N	2014-06-08 18:02:08	2014-06-08 18:02:08
2338	23	531	A COMMENT	\N	2014-01-07 04:32:01	2014-01-07 04:32:01
2339	23	537	A COMMENT	\N	2014-04-26 09:28:20	2014-04-26 09:28:20
2340	23	538	A COMMENT	\N	2014-04-10 21:53:26	2014-04-10 21:53:26
2341	23	546	A COMMENT	\N	2014-03-26 01:27:38	2014-03-26 01:27:38
2342	23	552	A COMMENT	\N	2014-02-02 14:32:39	2014-02-02 14:32:39
2343	23	556	A COMMENT	\N	2014-02-06 15:25:27	2014-02-06 15:25:27
2344	23	557	A COMMENT	\N	2014-03-04 04:13:00	2014-03-04 04:13:00
2345	23	563	A COMMENT	\N	2014-02-12 04:28:07	2014-02-12 04:28:07
2346	23	568	A COMMENT	\N	2014-05-09 01:00:14	2014-05-09 01:00:14
2347	41	575	A COMMENT	\N	2014-03-18 12:36:20	2014-03-18 12:36:20
2348	41	576	A COMMENT	\N	2014-03-31 11:24:49	2014-03-31 11:24:49
2349	41	580	A COMMENT	\N	2014-07-08 06:09:30	2014-07-08 06:09:30
2350	41	585	A COMMENT	\N	2014-03-19 08:11:55	2014-03-19 08:11:55
2351	41	587	A COMMENT	\N	2014-04-07 01:14:07	2014-04-07 01:14:07
2352	41	590	A COMMENT	\N	2014-05-09 12:41:52	2014-05-09 12:41:52
2353	41	593	A COMMENT	\N	2014-04-10 02:15:56	2014-04-10 02:15:56
2354	41	594	A COMMENT	\N	2014-03-17 17:12:04	2014-03-17 17:12:04
2355	41	595	A COMMENT	\N	2014-03-24 19:24:23	2014-03-24 19:24:23
2356	41	597	A COMMENT	\N	2014-05-07 21:51:15	2014-05-07 21:51:15
2357	41	603	A COMMENT	\N	2014-04-09 15:37:18	2014-04-09 15:37:18
2358	41	606	A COMMENT	\N	2014-05-06 11:08:17	2014-05-06 11:08:17
2359	41	607	A COMMENT	\N	2014-06-13 17:20:43	2014-06-13 17:20:43
2360	41	609	A COMMENT	\N	2014-04-18 10:08:08	2014-04-18 10:08:08
2361	41	612	A COMMENT	\N	2014-06-02 18:34:17	2014-06-02 18:34:17
2362	41	617	A COMMENT	\N	2014-05-08 03:18:44	2014-05-08 03:18:44
2363	41	620	A COMMENT	\N	2014-07-15 22:07:17	2014-07-15 22:07:17
2364	41	629	A COMMENT	\N	2014-05-28 06:28:20	2014-05-28 06:28:20
2365	26	633	A COMMENT	\N	2014-06-30 22:50:56	2014-06-30 22:50:56
2366	26	635	A COMMENT	\N	2014-07-01 21:26:15	2014-07-01 21:26:15
2367	26	638	A COMMENT	\N	2014-07-15 06:25:24	2014-07-15 06:25:24
2368	26	643	A COMMENT	\N	2014-07-14 13:55:32	2014-07-14 13:55:32
2369	44	644	A COMMENT	\N	2013-12-24 15:45:43	2013-12-24 15:45:43
2370	48	104	A COMMENT	\N	2014-03-10 02:54:32	2014-03-10 02:54:32
2371	25	391	A COMMENT	\N	2014-06-22 16:27:45	2014-06-22 16:27:45
2372	6	453	A COMMENT	\N	2014-06-11 16:32:39	2014-06-11 16:32:39
2373	22	631	A COMMENT	\N	2014-07-09 16:59:22	2014-07-09 16:59:22
2374	16	201	A COMMENT	\N	2014-03-30 21:37:25	2014-03-30 21:37:25
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 2374, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	5	fetched	2014-04-14 22:11:49.801332	2014-04-14 22:11:49.801332	2014-04-14 22:11:49.801332
7	6	joined	\N	\N	\N
8	6	fetched	2014-05-01 11:42:45.804739	2014-05-01 11:42:45.804739	2014-05-01 11:42:45.804739
9	7	joined	\N	\N	\N
10	8	joined	\N	\N	\N
11	8	fetched	2014-04-18 22:18:55.810326	2014-04-18 22:18:55.810326	2014-04-18 22:18:55.810326
12	9	joined	\N	\N	\N
13	10	joined	\N	\N	\N
14	10	fetched	2014-06-25 09:12:30.814465	2014-06-25 09:12:30.814465	2014-06-25 09:12:30.814465
15	11	joined	\N	\N	\N
16	11	fetched	2014-03-07 11:49:17.816919	2014-03-07 11:49:17.816919	2014-03-07 11:49:17.816919
17	12	joined	\N	\N	\N
18	13	joined	\N	\N	\N
19	13	fetched	2014-07-23 23:04:15.820978	2014-07-23 23:04:15.820978	2014-07-23 23:04:15.820978
20	14	joined	\N	\N	\N
21	14	fetched	2014-01-29 07:05:52.823357	2014-01-29 07:05:52.823357	2014-01-29 07:05:52.823357
22	15	joined	\N	\N	\N
23	15	fetched	2014-05-19 18:27:37.825786	2014-05-19 18:27:37.825786	2014-05-19 18:27:37.825786
24	16	joined	\N	\N	\N
25	16	fetched	2013-11-14 06:25:45.837068	2013-11-14 06:25:45.837068	2013-11-14 06:25:45.837068
26	17	joined	\N	\N	\N
27	17	fetched	2014-05-20 05:17:58.844518	2014-05-20 05:17:58.844518	2014-05-20 05:17:58.844518
28	18	joined	\N	\N	\N
29	18	fetched	2014-04-10 12:57:16.848407	2014-04-10 12:57:16.848407	2014-04-10 12:57:16.848407
30	19	joined	\N	\N	\N
31	19	fetched	2014-05-21 00:29:12.8515	2014-05-21 00:29:12.8515	2014-05-21 00:29:12.8515
32	20	joined	\N	\N	\N
33	20	fetched	2014-05-31 17:40:25.854312	2014-05-31 17:40:25.854312	2014-05-31 17:40:25.854312
34	21	joined	\N	\N	\N
35	21	fetched	2014-01-28 14:01:26.857399	2014-01-28 14:01:26.857399	2014-01-28 14:01:26.857399
36	22	joined	\N	\N	\N
37	22	fetched	2014-01-13 14:07:31.861089	2014-01-13 14:07:31.861089	2014-01-13 14:07:31.861089
38	23	joined	\N	\N	\N
39	23	fetched	2013-12-03 18:38:58.864129	2013-12-03 18:38:58.864129	2013-12-03 18:38:58.864129
40	24	joined	\N	\N	\N
41	24	fetched	2014-05-01 07:17:36.866732	2014-05-01 07:17:36.866732	2014-05-01 07:17:36.866732
42	25	joined	\N	\N	\N
43	25	fetched	2014-03-18 07:09:17.869366	2014-03-18 07:09:17.869366	2014-03-18 07:09:17.869366
44	26	joined	\N	\N	\N
45	26	fetched	2014-06-28 19:06:28.872112	2014-06-28 19:06:28.872112	2014-06-28 19:06:28.872112
46	27	joined	\N	\N	\N
47	27	fetched	2014-07-13 13:06:37.874667	2014-07-13 13:06:37.874667	2014-07-13 13:06:37.874667
48	28	joined	\N	\N	\N
49	28	fetched	2013-11-11 15:27:19.877123	2013-11-11 15:27:19.877123	2013-11-11 15:27:19.877123
50	29	joined	\N	\N	\N
51	29	fetched	2014-03-02 13:39:10.879532	2014-03-02 13:39:10.879532	2014-03-02 13:39:10.879532
52	30	joined	\N	\N	\N
53	30	fetched	2014-01-05 18:09:02.881943	2014-01-05 18:09:02.881943	2014-01-05 18:09:02.881943
54	31	joined	\N	\N	\N
55	31	fetched	2014-07-09 08:44:57.884353	2014-07-09 08:44:57.884353	2014-07-09 08:44:57.884353
56	32	joined	\N	\N	\N
57	32	fetched	2014-02-18 00:28:31.886821	2014-02-18 00:28:31.886821	2014-02-18 00:28:31.886821
58	33	joined	\N	\N	\N
59	33	fetched	2014-06-15 21:54:34.889227	2014-06-15 21:54:34.889227	2014-06-15 21:54:34.889227
60	34	joined	\N	\N	\N
61	34	fetched	2014-05-10 08:49:31.891708	2014-05-10 08:49:31.891708	2014-05-10 08:49:31.891708
62	35	joined	\N	\N	\N
63	35	fetched	2014-07-16 14:31:44.894101	2014-07-16 14:31:44.894101	2014-07-16 14:31:44.894101
64	36	joined	\N	\N	\N
65	36	fetched	2014-06-07 16:27:12.89661	2014-06-07 16:27:12.89661	2014-06-07 16:27:12.89661
66	37	joined	\N	\N	\N
67	37	fetched	2013-11-03 14:40:03.899081	2013-11-03 14:40:03.899081	2013-11-03 14:40:03.899081
68	38	joined	\N	\N	\N
69	39	joined	\N	\N	\N
70	39	fetched	2014-02-16 11:13:26.903518	2014-02-16 11:13:26.903518	2014-02-16 11:13:26.903518
71	40	joined	\N	\N	\N
72	40	fetched	2014-06-11 02:57:55.906244	2014-06-11 02:57:55.906244	2014-06-11 02:57:55.906244
73	41	joined	\N	\N	\N
74	41	fetched	2014-03-16 18:31:02.908784	2014-03-16 18:31:02.908784	2014-03-16 18:31:02.908784
75	42	joined	\N	\N	\N
76	42	fetched	2014-06-13 14:49:56.911288	2014-06-13 14:49:56.911288	2014-06-13 14:49:56.911288
77	43	joined	\N	\N	\N
78	43	fetched	2014-06-21 11:54:05.9143	2014-06-21 11:54:05.9143	2014-06-21 11:54:05.9143
79	44	joined	\N	\N	\N
80	44	fetched	2013-11-09 10:28:54.917048	2013-11-09 10:28:54.917048	2013-11-09 10:28:54.917048
81	45	joined	\N	\N	\N
82	45	fetched	2014-04-27 16:13:22.919497	2014-04-27 16:13:22.919497	2014-04-27 16:13:22.919497
83	46	joined	\N	\N	\N
84	47	joined	\N	\N	\N
85	47	fetched	2013-11-03 13:42:54.923556	2013-11-03 13:42:54.923556	2013-11-03 13:42:54.923556
86	48	joined	\N	\N	\N
87	48	fetched	2013-11-16 23:26:15.926024	2013-11-16 23:26:15.926024	2013-11-16 23:26:15.926024
88	8	submitted	2014-04-19 12:04:09	2014-04-19 12:04:09	2014-04-19 12:04:09
89	8	received_feedback	2014-07-10 20:44:49	2014-07-10 20:44:49	2014-07-10 20:44:49
90	32	commented	2014-07-10 20:44:49	2014-07-10 20:44:49	2014-07-10 20:44:49
91	8	completed	2014-04-25 06:13:52	2014-04-25 06:13:52	2014-04-25 06:13:52
92	10	submitted	2014-07-10 20:10:57	2014-07-10 20:10:57	2014-07-10 20:10:57
93	10	received_feedback	2014-07-13 04:43:30	2014-07-13 04:43:30	2014-07-13 04:43:30
94	14	commented	2014-07-13 04:43:30	2014-07-13 04:43:30	2014-07-13 04:43:30
95	11	commented	2014-07-15 17:14:04	2014-07-15 17:14:04	2014-07-15 17:14:04
96	1	commented	2014-07-16 11:34:26	2014-07-16 11:34:26	2014-07-16 11:34:26
97	37	commented	2014-07-21 06:41:48	2014-07-21 06:41:48	2014-07-21 06:41:48
98	4	commented	2014-07-21 06:55:00	2014-07-21 06:55:00	2014-07-21 06:55:00
99	30	commented	2014-07-24 22:29:33	2014-07-24 22:29:33	2014-07-24 22:29:33
100	2	commented	2014-07-26 15:56:31	2014-07-26 15:56:31	2014-07-26 15:56:31
101	10	completed	2014-07-20 12:22:00	2014-07-20 12:22:00	2014-07-20 12:22:00
102	3	commented	2014-07-02 10:50:36	2014-07-02 10:50:36	2014-07-02 10:50:36
103	8	commented	2014-07-02 15:54:50	2014-07-02 15:54:50	2014-07-02 15:54:50
104	39	commented	2014-07-03 09:35:08	2014-07-03 09:35:08	2014-07-03 09:35:08
105	47	commented	2014-07-04 19:23:24	2014-07-04 19:23:24	2014-07-04 19:23:24
106	45	commented	2014-07-05 13:33:15	2014-07-05 13:33:15	2014-07-05 13:33:15
107	21	commented	2014-07-10 10:08:59	2014-07-10 10:08:59	2014-07-10 10:08:59
108	43	commented	2014-07-14 03:40:19	2014-07-14 03:40:19	2014-07-14 03:40:19
109	27	commented	2014-07-14 17:00:53	2014-07-14 17:00:53	2014-07-14 17:00:53
110	28	commented	2014-07-20 00:27:23	2014-07-20 00:27:23	2014-07-20 00:27:23
111	11	submitted	2014-03-08 17:34:03	2014-03-08 17:34:03	2014-03-08 17:34:03
112	11	received_feedback	2014-04-05 11:38:35	2014-04-05 11:38:35	2014-04-05 11:38:35
113	10	commented	2014-06-01 06:01:20	2014-06-01 06:01:20	2014-06-01 06:01:20
114	11	completed	2014-04-13 14:24:34	2014-04-13 14:24:34	2014-04-13 14:24:34
115	14	submitted	2014-02-16 04:58:59	2014-02-16 04:58:59	2014-02-16 04:58:59
116	14	received_feedback	2014-03-31 16:41:59	2014-03-31 16:41:59	2014-03-31 16:41:59
117	14	completed	2014-04-26 20:35:20	2014-04-26 20:35:20	2014-04-26 20:35:20
118	21	submitted	2014-03-08 11:31:09	2014-03-08 11:31:09	2014-03-08 11:31:09
119	21	completed	2014-03-14 04:52:51	2014-03-14 04:52:51	2014-03-14 04:52:51
120	21	received_feedback	2014-04-06 15:29:54	2014-04-06 15:29:54	2014-04-06 15:29:54
121	27	submitted	2014-07-19 01:10:02	2014-07-19 01:10:02	2014-07-19 01:10:02
122	27	received_feedback	2014-07-19 03:28:01	2014-07-19 03:28:01	2014-07-19 03:28:01
123	27	completed	2014-07-26 18:01:00	2014-07-26 18:01:00	2014-07-26 18:01:00
124	28	submitted	2013-11-23 06:56:01	2013-11-23 06:56:01	2013-11-23 06:56:01
125	28	completed	2013-11-26 23:34:47	2013-11-26 23:34:47	2013-11-26 23:34:47
126	28	received_feedback	2014-07-10 23:32:51	2014-07-10 23:32:51	2014-07-10 23:32:51
127	30	submitted	2014-03-04 22:38:42	2014-03-04 22:38:42	2014-03-04 22:38:42
128	30	received_feedback	2014-03-12 01:20:40	2014-03-12 01:20:40	2014-03-12 01:20:40
129	30	completed	2014-03-08 09:02:55	2014-03-08 09:02:55	2014-03-08 09:02:55
130	32	submitted	2014-04-25 17:29:56	2014-04-25 17:29:56	2014-04-25 17:29:56
131	32	received_feedback	2014-04-28 17:29:15	2014-04-28 17:29:15	2014-04-28 17:29:15
132	32	completed	2014-05-04 11:50:02	2014-05-04 11:50:02	2014-05-04 11:50:02
133	37	submitted	2013-12-20 22:13:23	2013-12-20 22:13:23	2013-12-20 22:13:23
134	37	received_feedback	2014-01-21 01:24:57	2014-01-21 01:24:57	2014-01-21 01:24:57
135	37	completed	2013-12-30 17:44:21	2013-12-30 17:44:21	2013-12-30 17:44:21
136	39	submitted	2014-03-23 08:39:40	2014-03-23 08:39:40	2014-03-23 08:39:40
137	39	received_feedback	2014-04-12 09:16:19	2014-04-12 09:16:19	2014-04-12 09:16:19
138	39	completed	2014-03-28 08:48:36	2014-03-28 08:48:36	2014-03-28 08:48:36
139	43	submitted	2014-07-25 07:31:28	2014-07-25 07:31:28	2014-07-25 07:31:28
140	43	received_feedback	2014-07-25 18:39:16	2014-07-25 18:39:16	2014-07-25 18:39:16
141	45	submitted	2014-05-01 03:56:50	2014-05-01 03:56:50	2014-05-01 03:56:50
142	45	received_feedback	2014-05-23 04:31:13	2014-05-23 04:31:13	2014-05-23 04:31:13
143	45	completed	2014-07-19 21:39:30	2014-07-19 21:39:30	2014-07-19 21:39:30
144	47	submitted	2013-11-03 21:04:40	2013-11-03 21:04:40	2013-11-03 21:04:40
145	47	received_feedback	2013-11-13 07:57:57	2013-11-13 07:57:57	2013-11-13 07:57:57
146	47	completed	2013-11-04 09:12:59	2013-11-04 09:12:59	2013-11-04 09:12:59
147	48	submitted	2014-02-20 06:59:40	2014-02-20 06:59:40	2014-02-20 06:59:40
148	48	received_feedback	2013-12-21 20:43:19	2013-12-21 20:43:19	2013-12-21 20:43:19
149	25	submitted	2014-04-08 21:31:39	2014-04-08 21:31:39	2014-04-08 21:31:39
150	25	received_feedback	2014-05-04 05:57:37	2014-05-04 05:57:37	2014-05-04 05:57:37
151	6	submitted	2014-05-03 09:20:12	2014-05-03 09:20:12	2014-05-03 09:20:12
152	6	received_feedback	2014-06-15 10:59:14	2014-06-15 10:59:14	2014-06-15 10:59:14
153	22	submitted	2014-03-01 23:07:49	2014-03-01 23:07:49	2014-03-01 23:07:49
154	22	received_feedback	2014-03-24 12:33:05	2014-03-24 12:33:05	2014-03-24 12:33:05
155	16	submitted	2013-11-22 14:58:33	2013-11-22 14:58:33	2013-11-22 14:58:33
156	16	received_feedback	2013-12-28 07:57:57	2013-12-28 07:57:57	2013-12-28 07:57:57
157	19	submitted	2014-05-23 12:56:22	2014-05-23 12:56:22	2014-05-23 12:56:22
158	19	received_feedback	2014-06-05 23:27:11	2014-06-05 23:27:11	2014-06-05 23:27:11
159	19	completed	2014-06-04 01:48:12	2014-06-04 01:48:12	2014-06-04 01:48:12
160	20	submitted	2014-06-12 09:30:22	2014-06-12 09:30:22	2014-06-12 09:30:22
161	20	received_feedback	2014-06-15 20:10:29	2014-06-15 20:10:29	2014-06-15 20:10:29
162	20	completed	2014-06-22 00:44:54	2014-06-22 00:44:54	2014-06-22 00:44:54
163	35	submitted	2014-07-18 07:04:24	2014-07-18 07:04:24	2014-07-18 07:04:24
164	35	completed	2014-07-26 05:56:20	2014-07-26 05:56:20	2014-07-26 05:56:20
165	35	received_feedback	2014-07-17 10:05:16	2014-07-17 10:05:16	2014-07-17 10:05:16
166	29	submitted	2014-04-03 11:55:26	2014-04-03 11:55:26	2014-04-03 11:55:26
167	29	completed	2014-04-16 07:24:05	2014-04-16 07:24:05	2014-04-16 07:24:05
168	29	received_feedback	2014-06-09 16:36:03	2014-06-09 16:36:03	2014-06-09 16:36:03
169	34	submitted	2014-06-03 03:42:58	2014-06-03 03:42:58	2014-06-03 03:42:58
170	34	received_feedback	2014-06-06 05:40:53	2014-06-06 05:40:53	2014-06-06 05:40:53
171	34	completed	2014-06-16 23:22:18	2014-06-16 23:22:18	2014-06-16 23:22:18
172	13	submitted	2014-07-25 08:08:27	2014-07-25 08:08:27	2014-07-25 08:08:27
173	13	received_feedback	2014-07-25 14:15:43	2014-07-25 14:15:43	2014-07-25 14:15:43
174	40	submitted	2014-06-12 15:45:41	2014-06-12 15:45:41	2014-06-12 15:45:41
175	40	received_feedback	2014-06-15 15:41:17	2014-06-15 15:41:17	2014-06-15 15:41:17
176	5	submitted	2014-05-04 19:23:17	2014-05-04 19:23:17	2014-05-04 19:23:17
177	5	received_feedback	2014-05-09 04:04:26	2014-05-09 04:04:26	2014-05-09 04:04:26
178	33	submitted	2014-06-16 12:06:33	2014-06-16 12:06:33	2014-06-16 12:06:33
179	33	received_feedback	2014-07-06 02:17:50	2014-07-06 02:17:50	2014-07-06 02:17:50
180	15	submitted	2014-06-25 19:25:43	2014-06-25 19:25:43	2014-06-25 19:25:43
181	15	received_feedback	2014-06-29 16:41:30	2014-06-29 16:41:30	2014-06-29 16:41:30
182	17	submitted	2014-06-27 18:17:38	2014-06-27 18:17:38	2014-06-27 18:17:38
183	23	submitted	2014-05-09 02:10:32	2014-05-09 02:10:32	2014-05-09 02:10:32
184	41	submitted	2014-03-17 04:04:44	2014-03-17 04:04:44	2014-03-17 04:04:44
185	26	submitted	2014-06-30 07:20:36	2014-06-30 07:20:36	2014-06-30 07:20:36
186	44	submitted	2013-12-24 15:37:21	2013-12-24 15:37:21	2013-12-24 15:37:21
187	48	commented	2014-03-10 02:54:32	2014-03-10 02:54:32	2014-03-10 02:54:32
188	25	commented	2014-06-22 16:27:45	2014-06-22 16:27:45	2014-06-22 16:27:45
189	6	commented	2014-06-11 16:32:39	2014-06-11 16:32:39	2014-06-11 16:32:39
190	26	received_feedback	2014-07-09 16:59:22	2014-07-09 16:59:22	2014-07-09 16:59:22
191	22	commented	2014-07-09 16:59:22	2014-07-09 16:59:22	2014-07-09 16:59:22
192	16	commented	2014-03-30 21:37:25	2014-03-30 21:37:25	2014-03-30 21:37:25
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 192, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 1, false);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
1	8	475367116daff49b8603e95c	done	ruby	anagram	module NU\n  class Word\n    attr_reader :text\n\n    def self.letter_frequency(text)\n      text.chars.each.inject(Hash.new(0)) do |hash, letter|\n        hash[letter.downcase] += 1\n        hash\n      end\n    end\n\n    def initialize(text)\n      @text = text\n    end\n\n    def anagram?(word)\n      letter_frequency == self.class.letter_frequency(word)\n    end\n\n    def exact_match?(word)\n      word.downcase == text.downcase\n    end\n\n    def anagrams_from_list(list)\n      list.select { |word| anagram?(word) && !exact_match?(word) }\n    end\n\n    def letter_frequency\n      self.class.letter_frequency(text) \n    end\n  end\nend\n\n# This is a little adapter to fit the requirements of the testing\n# interface.  Since the new Word class might be part of a bigger\n# library, or even a gem that's been factored out of the program\n# it might make sense to make use of an adapter like this\nclass Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = NU::Word.new(word)\n  end\n\n  def match(words)\n    word.anagrams_from_list(words)\n  end\nend\n\n# The new shiny class always comes with some tests of its own\n#require 'minitest/spec'\n#require 'minitest/autorun'\n\n#require_relative 'anagram'\n\n#def test_word\n  #"listen"\n#end\n\n#def test_anagram\n  #"inlets"\n#end\n\n#def test_frequency\n  #{"l"=>1, "i"=>1, "s"=>1, "t"=>1, "e"=>1, "n"=>1}\n#end\n\n#def test_not_an_anagram\n  #"cucumber"\n#end\n\n#def test_list\n  #[test_anagram, test_not_an_anagram]\n#end\n\n#def test_no_agagram_list\n  #[test_not_an_anagram]\n#end\n\n#def test_anagrams\n  #[test_anagram]\n#end\n\n#def subject\n  #NU::Word.new(test_word)\n#end\n\n#describe NU::Word do\n  #describe 'initialization' do\n    #it 'stores the value as text' do\n      #subject.text.must_equal test_word\n    #end\n  #end\n\n  #describe 'anagram?' do\n    #it 'takes a single word and returns true if the word is an anagram' do\n      #subject.anagram?(test_anagram).must_equal true\n      #subject.anagram?(test_not_an_anagram).must_equal false\n    #end\n  #end\n\n  #describe 'anagrams_from_list' do\n    #it 'returns the set of words that are correct anagrams' do\n      #subject.anagrams_from_list(test_list).must_equal test_anagrams\n    #end\n    #it 'returns an empty list when there are no correct anagrams' do\n      #subject.anagrams_from_list(test_no_agagram_list).must_equal []\n    #end\n  #end\n\n  #describe 'letter_frequency' do\n    #it 'returns the letter frequency for the word the class represents' do\n      #subject.letter_frequency.must_equal test_frequency\n    #end\n  #end\n\n  #describe '.letter_frequency' do\n    #it 'returns a hash of the frequency that letters occur' do\n      #NU::Word.letter_frequency(test_anagram).must_equal(test_frequency)\n    #end\n  #end\n#end	2014-04-25 06:13:52	\N	0	1	2014-04-19 12:04:09	2014-04-19 12:04:09	1	anagram.rb
2	10	13730d4919408d068d6f4775	done	ruby	grains	class Grains\n  \n  def square(number)\n    2**(number-1)\n  end\n  \n  def total_grains\n    sum = 0\n    (1..64).each do |number|\n      sum += square(number)\n    end\n    sum\n  end\n  \nend	2014-07-20 12:22:00	\N	0	1	2014-07-10 20:10:57	2014-07-10 20:10:57	2	grains.rb
3	10	1c5e47979f434ce1a124b8c7	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) int {\n\tdiffCount := 0\n\n\tfor i := 0; i < len(strandA) && i < len(strandB); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdiffCount++\n\t\t}\n\t}\n\n\treturn diffCount\n}	\N	\N	0	1	2014-06-28 15:47:20	2014-06-28 15:47:20	3	hamming.go
4	10	9b242f18f0dfe422eec8f5be	done	go	hamming	package hamming\n\nfunc Distance(strandA, strandB string) int {\n\tdiffCount := 0\n\n\tfor i := 0; i < len(strandA) && i < len(strandB); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdiffCount++\n\t\t}\n\t}\n\n\treturn diffCount\n}	2014-07-19 05:23:37	\N	0	2	2014-07-08 05:26:36	2014-07-08 05:26:36	3	hamming.go
5	10	9879e66f55a740425f217a9c	done	javascript	phone-number	var Phone = function(phoneString) {\n\tthis.phoneString = phoneString;\n};\n\nSTANDARD_PHONE_NUMBER_LENGTH = 10;\nINVALID_PHONE_NUMBER_PLACEHOLDER = "0000000000";\n\nPhone.prototype = {\n\tremovePrefix: function (phoneNumber) {\n\t\tif (phoneNumber.length == 11 && phoneNumber.charAt(0) == '1')\n\t\t\tphoneNumber = phoneNumber.substr(1);\n\t\treturn phoneNumber;\n\t},\n\tnormalize: function (phoneNumber) {\n\t\tphoneNumber = this.removePrefix(phoneNumber);\n\t\t\n\t\tif (phoneNumber.length != STANDARD_PHONE_NUMBER_LENGTH)\n\t\t\tphoneNumber = INVALID_PHONE_NUMBER_PLACEHOLDER;\n\t\t\n\t\treturn phoneNumber;\n\t},\n\tnumber: function() {\n\t\tphoneNumber = this.phoneString.replace(/[^0-9]/gi, '');\n\t\t\n\t\treturn this.normalize(phoneNumber);\n\t},\n\tareaCode: function () {\n\t\treturn this.number().substr(0,3);\n\t},\n\ttoString: function() {\n\t\tvar localFirstPart = this.number().substr(3,3);\n\t\tvar localSecondPart = this.number().substr(6,4);\n\t\treturn "(" + this.areaCode() + ") " + localFirstPart + "-" + localSecondPart;\n\t}\n};\n\nmodule.exports = Phone;	2014-07-10 17:22:58	\N	0	3	2014-07-04 01:54:18	2014-07-04 01:54:18	4	phone-number.js
6	10	cf2aea93e85dff343e448a87	superseded	javascript	phone-number	var Phone = function(phoneString) {\n\tthis.phoneString = phoneString;\n};\n\nSTANDARD_PHONE_NUMBER_LENGTH = 10;\n\nPhone.prototype = {\n\tremovePrefix: function (phoneNumber) {\n\t\tif (phoneNumber.length == 11 && phoneNumber.charAt(0) == '1')\n\t\t\tphoneNumber = phoneNumber.substr(1);\n\t\treturn phoneNumber;\n\t},\n\tnormalize: function (phoneNumber) {\n\t\tphoneNumber = this.removePrefix(phoneNumber);\n\t\t\n\t\tif (phoneNumber.length != STANDARD_PHONE_NUMBER_LENGTH)\n\t\t\tphoneNumber = "0000000000";\n\t\t\n\t\treturn phoneNumber;\n\t},\n\tnumber: function() {\n\t\tphoneNumber = this.phoneString.replace(/[^0-9]/gi, '');\n\t\t\n\t\treturn this.normalize(phoneNumber);\n\t},\n\tareaCode: function () {\n\t\treturn this.number().substr(0,3);\n\t},\n\ttoString: function() {\n\t\tvar localFirstPart = this.number().substr(3,3);\n\t\tvar localSecondPart = this.number().substr(6,4);\n\t\treturn "(" + this.areaCode() + ") " + localFirstPart + "-" + localSecondPart;\n\t}\n};\n\nmodule.exports = Phone;	\N	\N	0	2	2014-07-06 22:12:14	2014-07-06 22:12:14	4	phone-number.js
454	15	1af47334fc4fdee315157cc5	pending	elixir	grains	defmodule Grains do\n\n  def square(n), do: trunc :math.pow(2, n - 1)\n\n  def total, do: Enum.reduce(1..64, 0, &(square(&1) + &2))\nend	\N	\N	0	1	2014-06-10 20:38:56	2014-06-10 20:38:56	238	grains.exs
478	15	f827a9e243ab23d8dd9cbf60	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n  var out map[string]int = make(map[string]int)\n  for counter, letters := range in {\n    for _, letter := range letters {\n      letter = strings.ToLower(letter)\n      out[letter] += counter\n    }\n  }\n  return out\n}	\N	\N	0	1	2014-05-29 06:08:03	2014-05-29 06:08:03	250	etl.go
479	15	f4ee5c9eb6571d46371a44a9	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor counter, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += counter\n\t\t}\n\t}\n\treturn out\n}	\N	\N	0	2	2014-06-15 09:45:10	2014-06-15 09:45:10	250	etl.go
480	15	e162fb1bbab979550e6a9d91	pending	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor times, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += times\n\t\t}\n\t}\n\treturn out\n}	\N	\N	0	3	2014-06-21 04:02:00	2014-06-21 04:02:00	250	etl.go
481	15	350396eab81e35272c3f5758	superseded	elixir	word-count	defmodule Words do\n  def count(string) do\n    string = String.downcase(string)\n    words = List.flatten(Regex.scan(%r{\\w+}, string))\n    List.foldl(words, HashDict.new, fn (word, counts) ->\n      Dict.put(counts, word, Dict.get(counts, word, 0) + 1)\n    end)\n  end\nend	\N	\N	0	1	2014-05-27 21:14:00	2014-05-27 21:14:00	251	word-count.exs
482	15	8fa078d69d5f591e55d51926	superseded	elixir	word-count	defmodule Words do\n  def count(string) when is_binary(string) do\n    Words.count(Words.to_list(string))\n  end\n\n  def count(list) when is_list(list) do\n    List.foldl(list, HashDict.new, fn (word, counts) ->\n      Words.increment_count(counts, word)\n    end)\n  end\n\n  def increment_count(dict, word) do\n    Dict.put(dict, word, Dict.get(dict, word, 0) + 1)\n  end\n\n  def to_list(string) do\n    string = String.downcase(string)\n    List.flatten(Regex.scan(%r{\\w+}, string))\n  end\nend	\N	\N	0	2	2014-06-07 11:49:34	2014-06-07 11:49:34	251	word-count.exs
483	15	2f6c77b563f1027da242aae5	superseded	elixir	word-count	defmodule Words do\n  def count(string) when is_binary(string) do\n    count(to_list(string))\n  end\n\n  def count(list) when is_list(list) do\n    List.foldl(list, HashDict.new, fn (word, counts) ->\n      increment_count(counts, word)\n    end)\n  end\n\n  def increment_count(dict, word) do\n    Dict.put(dict, word, Dict.get(dict, word, 0) + 1)\n  end\n\n  def to_list(string) do\n    string = String.downcase(string)\n    List.flatten(Regex.scan(%r/\\w+/, string))\n  end\nend	\N	\N	0	3	2014-07-03 04:05:01	2014-07-03 04:05:01	251	word-count.exs
7	10	92ac4afe93fec7451fde82aa	superseded	javascript	phone-number	var Phone = function(phoneString) {\n\tthis.phoneString = phoneString;\n};\n\nPhone.prototype = {\n\tnormalize: function (phoneNumber) {\n\t\tif (phoneNumber.length == 11 && phoneNumber.charAt(0) == '1')\n\t\t\tphoneNumber = phoneNumber.substr(1);\n\t\t\n\t\tif (phoneNumber.length != 10)\n\t\t\tphoneNumber = "0000000000";\n\t\t\n\t\treturn phoneNumber;\n\t},\n\tnumber: function() {\n\t\tphoneNumber = this.phoneString.replace(/[^0-9]/gi, '');\n\t\t\n\t\treturn this.normalize(phoneNumber);\n\t},\n\tareaCode: function () {\n\t\treturn this.number().substr(0,3);\n\t},\n\tlocalNumberFirst: function() {\n\t\treturn this.number().substr(3,3);\n\t},\n\tlocalNumberLast: function() {\n\t\treturn this.number().substr(6,4);\n\t},\n\ttoString: function() {\n\t\treturn "("+this.areaCode()+") "+this.localNumberFirst()+"-"+this.localNumberLast();\n\t}\n};\n\nmodule.exports = Phone;	\N	\N	0	1	2014-07-23 13:19:32	2014-07-23 13:19:32	4	phone-number.js
8	10	7a8d1801576097a493bbbdf2	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    normalize_text = normalize(text)\n    @words = to_array(normalize_text)\n  end\n\n  def word_count\n    return @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def to_array(text)\n      text.split(/\\W+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	\N	0	2	2014-06-30 15:11:17	2014-06-30 15:11:17	5	word-count.rb
9	10	6789c2cfb69b90eea7d38d58	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    clean_text = remove_punctuation(text)\n    normalize_text = normalize(clean_text)\n    @words = to_array(normalize_text)\n  end\n\n  def word_count\n    counts = Hash.new(0)\n    @words.each { |word| counts[word] += 1 }\n    counts\n  end\n\n  private\n\n    def remove_punctuation(text)\n      text.gsub(/(\\W)/, " ")\n    end\n\n    def to_array(text)\n      text.split(/[\\s,]+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	\N	0	1	2014-07-04 02:27:34	2014-07-04 02:27:34	5	word-count.rb
10	10	e066327ba68fadeb62266abf	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @words = to_array(normalize(text))\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def to_array(text)\n      text.split(/\\W+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	\N	0	3	2014-07-05 06:08:13	2014-07-05 06:08:13	5	word-count.rb
11	10	58acddbb9762adb027065db8	done	ruby	word-count	class Phrase\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def words\n      text.downcase.split(/\\W+/)\n    end\nend	2014-07-15 06:58:27	\N	0	4	2014-07-09 03:06:43	2014-07-09 03:06:43	5	word-count.rb
12	10	6df8eebefa3d39bd36c63898	superseded	haskell	anagram	module Anagram where\r\n\r\n\r\nimport Control.Monad\r\nimport Data.Char\r\nimport Data.List\r\nimport Data.Function\r\n\r\n\r\nanagramsFor :: String -> [String] -> [String]\r\nanagramsFor word candidates = filter isAnagram candidates\r\n  where\r\n    isAnagram w = normalize w == word' && w /= word\r\n    normalize = sort . map toLower\r\n    word' = normalize word\r\n\r	\N	\N	0	1	2014-06-26 10:27:27	2014-06-26 10:27:27	6	anagram.hs
13	10	def904a1619ac7340171cd25	superseded	haskell	anagram	module Anagram where\r\n\r\n\r\nimport Data.Char\r\nimport Data.List\r\n\r\n\r\nanagramsFor :: String -> [String] -> [String]\r\nanagramsFor word candidates = filter isAnagram candidates\r\n  where\r\n    isAnagram w = normalize w == word' && w /= word\r\n    normalize = sort . map toLower\r\n    word' = normalize word\r\n\r	\N	\N	0	2	2014-07-03 02:07:29	2014-07-03 02:07:29	6	anagram.hs
14	10	ced48b5a10165104786cf485	done	haskell	anagram	module Anagram where\r\n\r\n\r\nimport Data.Char\r\nimport Data.List\r\n\r\n\r\nanagramsFor :: String -> [String] -> [String]\r\nanagramsFor word = filter isAnagram\r\n  where\r\n    isAnagram w = normalize w == word' && w /= word\r\n    normalize = sort . map toLower\r\n    word' = normalize word\r\n\r	2014-07-17 23:08:13	\N	0	3	2014-07-14 14:36:00	2014-07-14 14:36:00	6	anagram.hs
15	10	fb42332cdac602abc39ed30d	pending	ruby	sum-of-multiples	class SumOfMultiples\n  def initialize *args\n    @multipliers = args\n  end\n\n  def self.to border\n    SumOfMultiples.new(3,5).to(border)\n  end\n\n  def to border\n    @terms = {}\n    @multipliers.min.upto(border-1).each{|i| @terms[i] = false}\n    @multipliers.each{|m| (m..border-1).step(m){|term| @terms[term] = true}}\n    @terms.select{|k, v| v == true }.keys.reduce(0){|acc, term| acc+term}\n  end\nend	\N	\N	0	1	2014-07-13 06:53:14	2014-07-13 06:53:14	7	sum.rb
16	10	46f745eca19ffebd99cc92b8	done	ruby	hamming	class Hamming\n  def self.compute(a_str, b_str)\n    distance = 0\n    a_ary = a_str.split('')\n    b_ary = b_str.split('')\n\n    a_ary.zip(b_ary).each do |a, b|\n      next if a.nil? || b.nil?\n      distance += 1 if a != b\n    end\n\n    distance\n  end\nend	2014-07-02 20:35:56	\N	0	1	2014-06-25 19:24:16	2014-06-25 19:24:16	8	hamming.rb
17	11	7940fbf89efcf4463140f4d8	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn canonical [word]\n  (sort (lower-case word)))\n\n(defn is-anagram? [word1 word2]\n  (and (= (canonical word1) (canonical word2)) (not= word1 word2)))\n\n(defn anagrams-for [word candidates]\n  (filter #(is-anagram? word %) candidates))	\N	\N	0	1	2014-03-08 17:34:03	2014-03-08 17:34:03	9	anagram.clj
18	11	2be24ec58057cf08c5369838	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn canonical-form [word]\n  (frequencies (lower-case word)))\n\n(defn is-anagram? [reference-word candidate-word]\n    (= reference-word (canonical-form candidate-word)))\n\n(defn anagrams-for [word candidates]\n  (let [canonical (canonical-form word)]\n    (filter #(and (not= word %) (is-anagram? canonical %)) candidates)))	\N	\N	0	3	2014-04-01 21:02:22	2014-04-01 21:02:22	9	anagram.clj
19	11	ac291bad8f72bab25eb7cc42	done	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn- canonical-form [word]\n  (frequencies (lower-case word)))\n\n(defn- is-anagram? [reference-word candidate-word]\n    (= reference-word (canonical-form candidate-word)))\n\n(defn anagrams-for [word candidates]\n  (let [canonical (canonical-form word)]\n    (filter #(and (not= word %) (is-anagram? canonical %)) candidates)))	2014-04-13 14:24:34	\N	0	4	2014-04-06 20:47:07	2014-04-06 20:47:07	9	anagram.clj
20	11	cad7d253f8f3e836537b6eb1	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn canonical [word]\n  (sort (lower-case word)))\n\n(defn is-anagram? [word1 word2]\n    (= word1 (canonical word2)))\n\n(defn anagrams-for [word candidates]\n  (let [cform (canonical word)]\n    (filter #(and (not= word %) (is-anagram? cform %)) candidates)))	\N	\N	0	2	2014-05-02 23:27:17	2014-05-02 23:27:17	9	anagram.clj
145	45	dfd76047a34968a7bfb58668	done	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    chars1 = string1.chars\n    chars2 = string2.chars\n\n    merge = string1 <= string2 ? chars1.zip(chars2) : chars2.zip(chars1)\n\n    merge.count { |char1, char2| char1 != char2 }\n  end\nend	2014-07-19 21:39:30	\N	0	9	2014-07-12 19:03:43	2014-07-12 19:03:43	73	hamming.rb
638	26	a130d7c86a9bafe95fecd482	superseded	haskell	bob	module Bob where\nimport Text.Regex.Posix\nimport Data.Char\n\nresponseFor sentence\n  | silence   = "Fine. Be that way!"\n  | shout     = "Woah, chill out!"\n  | question  = "Sure."\n  | otherwise = "Whatever."\n  where\n    stripped = foldl (++) "" $ lines sentence\n    silence  = all isSpace stripped\n    shout    = any isAlpha stripped && map toUpper stripped == stripped\n    question = last stripped == '?'	\N	\N	0	1	2014-07-15 06:17:34	2014-07-15 06:17:34	329	bob.hs
21	11	8dd02dc17386d0bfd2004b03	done	ruby	roman-numerals	class Integer\n\n  NUMERALS = [[1000, "M"], [500, "D"],\n                    [100, "C"], [50, "L"],\n                    [10, "X"], [5, "V"], [1, "I"]]\n\n  def to_roman\n    number = self\n    roman = ""\n\n    NUMERALS.each_with_index do |pair,i|\n      if number/pair[0] == 1 && ((number - pair[0])/NUMERALS[i+1][0] == 4 if NUMERALS[i+1])\n        roman << NUMERALS[i+1][1] << NUMERALS[i-1][1]\n        number = number - pair[0] - 4*NUMERALS[i+1][0]\n      elsif number/pair[0] == 4\n        roman << pair[1] << NUMERALS[i-1][1]\n        number = number - pair[0]*(number/pair[0])\n      else\n        (number/pair[0]).times do\n          roman << pair[1]\n          number = number - pair[0]\n        end\n      end\n      return roman if number == 0\n    end\n  end\n\nend	2014-03-18 20:13:17	\N	0	1	2014-03-18 04:34:06	2014-03-18 04:34:06	10	roman.rb
22	11	b9884d20e63cc625bc4f54ff	pending	ruby	grains	class Grains\n  NUMBER_OF_SQUARES = 64\n\n  def square(index)\n    2 ** (index - 1)\n  end\n\n  def total\n    square(NUMBER_OF_SQUARES + 1) - 1\n  end\nend	\N	\N	0	2	2014-03-15 02:35:16	2014-03-15 02:35:16	11	grains.rb
23	11	e51fe6dc5a69f4ace76aa061	superseded	ruby	grains	class Grains\n  def square(index)\n    return index if index == 1\n    2 * square(index.pred)\n  end\n\n  def total\n    (1..64).map {|index| square index }.inject &:+\n  end\nend	\N	\N	0	1	2014-05-04 16:01:29	2014-05-04 16:01:29	11	grains.rb
24	11	3056031ac0cc1411d66a9d0a	superseded	clojure	word-count	(ns word-count)\n\n(defn word-count [phrase]\n  (let [not-letter-or-number #"[^a-zA-Z0-9]"\n        words (clojure.string/split phrase not-letter-or-number)]\n    (->  words\n         (->> (map clojure.string/lower-case))\n         (->  (frequencies))\n         (->  (dissoc "")))))	\N	\N	0	1	2014-04-13 22:53:16	2014-04-13 22:53:16	12	word_count.clj
25	11	9ddf90a3780a1e08241b6d4e	done	clojure	word-count	(ns word-count)\n\n(defn word-count [phrase]\n  (let [not-letter-or-number #"[^a-zA-Z0-9]"\n        words (clojure.string/split phrase not-letter-or-number)]\n    (->  (map clojure.string/lower-case words)\n         (frequencies)\n         (dissoc ""))))	2014-05-04 13:09:14	\N	0	2	2014-04-27 19:48:19	2014-04-27 19:48:19	12	word_count.clj
26	14	61335cb5e3343bd73d3990f4	superseded	ruby	bob	class Bob\n  attr_reader :responses\n\n  def initialize\n    @emotional_responses = [Annoyed.new, TakenBack.new,\n                  PassiveAggressive.new]\n  end\n\n  def hey(input=nil)\n    @emotional_responses.each do |response|\n      return response.to_s if response.produced_by?(input)\n    end\n    Indifferent.new.to_s\n  end\nend\n\nclass Response\n  attr_reader :response\n\n  def initialize\n    return @response\n  end\n\n  def to_s\n    @response\n  end\n\n  def produced_by?(input)\n    return true\n  end\n\nend\n\nclass Annoyed < Response\n  def initialize\n    @response = 'Fine. Be that way!'\n  end\n\n  def produced_by?(input)\n    return true if input.nil? || input.strip.empty?\n    false\n  end\n\nend\n\nclass TakenBack < Response\n  def initialize\n    @response = 'Woah, chill out!'\n  end\n\n  def produced_by?(input)\n    if !Annoyed.new.produced_by?(input) &&\n      input.upcase == input\n      return true\n    end\n    false\n  end\nend\n\nclass PassiveAggressive < Response\n  def initialize\n    @response = 'Sure.'\n  end\n\n  def produced_by?(input)\n    if !TakenBack.new.produced_by?(input) &&\n      input.end_with?('?')\n      return true\n    end\n    false\n  end\nend\n\nclass Indifferent < Response\n  def initialize\n    @response = 'Whatever.'\n  end\nend	\N	\N	0	1	2014-02-16 04:58:59	2014-02-16 04:58:59	13	bob.rb
27	14	2554fe69522e4bda961e6d22	superseded	ruby	bob	class Bob\n  attr_reader :responses\n\n  def initialize\n    @responses = [Annoyed.new, TakenAback.new,\n                  PassiveAggressive.new, Indifferent.new]\n  end\n\n  def hey(input=nil)\n    @responses.find {|response| response.produced_by?(input) }.to_s\n  end\nend\n\nclass Response\n\n  def to_s\n    @response\n  end\nend\n\nclass Annoyed < Response\n  def initialize\n    @response = 'Fine. Be that way!'\n  end\n\n  def produced_by?(input)\n    input.nil? || input.strip.empty?\n  end\n\nend\n\nclass TakenAback < Response\n  def initialize\n    @response = 'Woah, chill out!'\n  end\n\n  def produced_by?(input)\n    input.upcase == input\n  end\nend\n\nclass PassiveAggressive < Response\n  def initialize\n    @response = 'Sure.'\n  end\n\n  def produced_by?(input)\n    input.end_with?('?')\n  end\nend\n\nclass Indifferent < Response\n  def initialize\n    @response = 'Whatever.'\n  end\n\n  def produced_by?(input)\n    return true\n  end\nend	\N	\N	0	4	2014-02-22 22:58:08	2014-02-22 22:58:08	13	bob.rb
28	14	a92e063a7127810a48fe4106	superseded	ruby	bob	class Bob\n  attr_reader :responses\n\n  def initialize\n    @responses = [Annoyed.new, TakenAback.new,\n                  PassiveAggressive.new, Indifferent.new]\n  end\n\n  def hey(input=nil)\n    @responses.find {|response| response.produced_by?(input) }.to_s\n  end\nend\n\nclass Response\n  attr_reader :response\n\n  def to_s\n    @response\n  end\n\n  def produced_by?(input)\n    return true\n  end\n\nend\n\nclass Annoyed < Response\n  def initialize\n    @response = 'Fine. Be that way!'\n  end\n\n  def produced_by?(input)\n    input.nil? || input.strip.empty?\n  end\n\nend\n\nclass TakenAback < Response\n  def initialize\n    @response = 'Woah, chill out!'\n  end\n\n  def produced_by?(input)\n    !Annoyed.new.produced_by?(input) &&\n      input.upcase == input\n  end\nend\n\nclass PassiveAggressive < Response\n  def initialize\n    @response = 'Sure.'\n  end\n\n  def produced_by?(input)\n    !TakenAback.new.produced_by?(input) &&\n      input.end_with?('?')\n  end\nend\n\nclass Indifferent < Response\n  def initialize\n    @response = 'Whatever.'\n  end\nend	\N	\N	0	2	2014-03-07 07:28:31	2014-03-07 07:28:31	13	bob.rb
54	27	7521e58bf54d47a0862c6a6b	done	javascript	bob	Bob = function() {\n\tthis.hey = function(greeting) {\n\t\tif (this.silence(greeting)) {\n\t\t\treturn 'Fine, be that way.'\n\t\t}\t\n\t\telse if (this.shout(greeting)) {\n\t\t\treturn 'Woah, chill out!'\n\t\t} \n\t\telse if (this.question(greeting)) {\n\t\t\treturn 'Sure' \n\t\t} \n\t\telse\n\t\t\treturn 'Whatever'\n\t};\n\n\tthis.silence = function(greeting) {\n\t\treturn greeting === ""; \n\t}\n\n\tthis.question = function(greeting) {\n\t\treturn greeting[greeting.length -1] === "?";\n\t};\n\n\tthis.shout = function(greeting) {\n\t\treturn greeting.toUpperCase() === greeting;\n\t};\n};	2014-07-24 21:44:46	\N	0	2	2014-07-20 18:02:53	2014-07-20 18:02:53	25	bob.js
55	27	b0d7dde996f06e821db026e9	done	haskell	pig-latin	{-# OPTIONS_GHC -Wall #-}\nmodule PigLatin( translate ) where\n\ntranslate :: String -> String\ntranslate = unwords . map anslatetray . words\n  \nanslatetray :: String -> String\nanslatetray w = corpus ++ caput ++ "ay"\n  where \n    (caput', corpus') = break isVowel w\n    isVowel = (`elem` "aeiouy")\n    (caput, corpus) | null caput' || null corpus' = (caput', corpus')\n                    | last caput' == 'q' && head corpus' == 'u'\n                       = (caput' ++ "u", tail corpus')\n                    | otherwise = (caput', corpus')	2014-07-20 18:53:11	\N	0	1	2014-07-15 01:04:34	2014-07-15 01:04:34	26	PigLatin.hs
484	15	9ea09a73c1db115a72245a2c	pending	elixir	word-count	defmodule Words do\n  def count(string) when is_binary(string) do\n    count(to_list(string))\n  end\n\n  def count(list) when is_list(list) do\n    List.foldl(list, HashDict.new, &increment_count(&2, &1))\n  end\n\n  def increment_count(counts, word) do\n    Dict.put(counts, word, Dict.get(counts, word, 0) + 1)\n  end\n\n  def to_list(string) do\n    string = String.downcase(string)\n    List.flatten(Regex.scan(%r/\\w+/, string))\n  end\nend	\N	\N	0	4	2014-07-17 10:52:13	2014-07-17 10:52:13	251	word-count.exs
485	15	14be856768035f6147060924	pending	haskell	grains	module Grains (square, total) where\n\nsquare :: Integer -> Integer\nsquare x = 2 ^ (x - 1)\n\ntotal :: Integer\ntotal = sum . map square $ [1..64]	\N	\N	0	1	2014-07-17 23:16:31	2014-07-17 23:16:31	252	Grains.hs
29	14	ece46b832d83b31e11960dad	superseded	ruby	bob	class Bob\n  attr_reader :responses\n\n  def initialize\n    @responses = [Annoyed.new, TakenAback.new,\n                  PassiveAggressive.new, Indifferent.new]\n  end\n\n  def hey(input=nil)\n    @responses.find {|response| response.produced_by?(input) }.to_s\n  end\nend\n\nclass Response\n\n  def to_s\n    @response\n  end\n\n  def produced_by?(input)\n    return true\n  end\n\nend\n\nclass Annoyed < Response\n  def initialize\n    @response = 'Fine. Be that way!'\n  end\n\n  def produced_by?(input)\n    input.nil? || input.strip.empty?\n  end\n\nend\n\nclass TakenAback < Response\n  def initialize\n    @response = 'Woah, chill out!'\n  end\n\n  def produced_by?(input)\n    input.upcase == input\n  end\nend\n\nclass PassiveAggressive < Response\n  def initialize\n    @response = 'Sure.'\n  end\n\n  def produced_by?(input)\n    input.end_with?('?')\n  end\nend\n\nclass Indifferent < Response\n  def initialize\n    @response = 'Whatever.'\n  end\n\n  def produced_by?(input)\n    return true\n  end\nend	\N	\N	0	3	2014-03-14 22:44:34	2014-03-14 22:44:34	13	bob.rb
30	14	21a954fb41bfc926804997fe	done	ruby	bob	class Bob\n\n  def initialize\n    @responses = [Annoyed.new, TakenAback.new,\n                  PassiveAggressive.new, Indifferent.new]\n  end\n\n  def hey(input)\n    @responses.find {|response| response.produced_by?(input) }.to_s\n  end\nend\n\nclass Response\n\n  def to_s\n    @response\n  end\nend\n\nclass Annoyed < Response\n  def initialize\n    @response = 'Fine. Be that way!'\n  end\n\n  def produced_by?(input)\n    input.nil? || input.strip.empty?\n  end\n\nend\n\nclass TakenAback < Response\n  def initialize\n    @response = 'Woah, chill out!'\n  end\n\n  def produced_by?(input)\n    input.upcase == input\n  end\nend\n\nclass PassiveAggressive < Response\n  def initialize\n    @response = 'Sure.'\n  end\n\n  def produced_by?(input)\n    input.end_with?('?')\n  end\nend\n\nclass Indifferent < Response\n  def initialize\n    @response = 'Whatever.'\n  end\n\n  def produced_by?(input)\n    true\n  end\nend	2014-04-26 20:35:20	\N	0	5	2014-04-21 12:29:10	2014-04-21 12:29:10	13	bob.rb
31	14	5fca7c65cfd78717d90d24cb	pending	ruby	scrabble-score	class Scrabble\n\n  def initialize(word)\n    @scoring = Scoring.new\n    @score = @scoring.calculate_score(word)\n  end\n  \n  def score\n    @score\n  end\n  \n  def self.score(word)\n    scoring = Scoring.new\n    scoring.calculate_score(word)\n  end\nend\n\nclass Scoring\n  \n  def initialize\n    @scores = { 'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1,\n                'l' => 1, 'n' => 1, 'r' => 1, 's' => 1, 't' => 1,\n                'd' => 2, 'g' => 2,\n                'b' => 3, 'c' => 3, 'm' => 3, 'p' => 3, \n                'f' => 4, 'h' => 4, 'v' => 4, 'w' => 4, 'y' => 4,\n                'k' => 5,\n                'j' => 8, 'x' => 8,\n                'q' => 10, 'z' => 10\n              }\n    @scores.default = 0\n  end\n  \n  def calculate_score(word)\n    if !word then word ='' end #handles a nil value\n    \n    arr_word = word.downcase.split("")\n    score = 0\n    arr_word.each do |letter|\n        score += @scores[letter]\n    end\n    \n    score\n  end\nend	\N	\N	0	1	2014-03-10 20:57:11	2014-03-10 20:57:11	14	scrabble.rb
32	14	a5bbd20d01ec10e46f19b250	superseded	ruby	grains	class Grains\n  def square(sq_num)\n    @sq_num = sq_num\n    2**(@sq_num-1)\n  end\n\n  def num_grains\n    current_sq = 1\n    num_grains = 0\n    while current_sq < 65 do\n      num_grains = num_grains + 2**(current_sq-1)\n      current_sq+=1\n    end\n    num_grains  \n  end\nend	\N	\N	0	1	2014-03-12 04:34:59	2014-03-12 04:34:59	15	grains.rb
33	14	3f0ed53d129c3188c37f171a	done	ruby	grains	class Grains\n  def square(square_position)\n   2 ** (square_position - 1)\n  end\n\n  def total(square_position = 64)\n   square(square_position) * 2 - 1\n  end\nend	2014-05-03 16:00:38	\N	0	3	2014-04-25 19:41:35	2014-04-25 19:41:35	15	grains.rb
34	14	438c43e19048eddbf70755fa	superseded	ruby	grains	class Grains\n  def square(position)\n    (1..position).inject { |result, position| result * 2 }\n  end\n\n  def total(position=64)\n    (1..position).inject {|sum, position| square(position) + sum}\n\n  end\nend	\N	\N	0	2	2014-06-03 18:58:10	2014-06-03 18:58:10	15	grains.rb
35	21	662647baa0ef04044a550008	done	ruby	etl	class ETL\n  def self.transform(old_scores)\n    old_scores.each_with_object({}) { |(score, letters), hash|\n      letters.each do |letter|\n        hash[letter.downcase] = score\n      end\n    }\n  end\nend	2014-03-14 04:52:51	\N	0	1	2014-03-08 11:31:09	2014-03-08 11:31:09	16	etl.rb
36	21	dc03b5c0270b11df09b6400b	superseded	elixir	word-count	defmodule Words do\n\t@punctuation ~r/[&@$%^&:!,_]/\n\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: map() \n  def count(sentence) do\n\t\tRegex.replace(@punctuation, sentence, " ")\n\t\t|> String.downcase\n\t\t|> String.split\n\t\t|> Enum.group_by(&(&1))\n\t\t|> Enum.reduce(%{}, fn ({x, xs}, acc) -> Map.put(acc, x, Enum.count(xs)) end)\n\tend\nend	\N	\N	0	1	2014-02-25 10:33:00	2014-02-25 10:33:00	17	word_count.exs
37	21	70b893140cd287a2eda892a6	done	elixir	word-count	defmodule Words do\n  @punctuation ~r/[&@$%^&:!,_]/\n\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: map() \n  def count(sentence) do\n\t\tRegex.replace(@punctuation, sentence, " ")\n\t\t|> String.downcase\n\t\t|> String.split\n\t\t|> Enum.group_by(&(&1))\n\t\t|> Enum.reduce(%{}, fn ({x, xs}, acc) -> Map.put(acc, x, Enum.count(xs)) end)\n\tend\nend	2014-04-20 06:31:22	\N	0	2	2014-04-17 14:39:01	2014-04-17 14:39:01	17	word_count.exs
38	21	03ecb7b944721d4196cb28e4	superseded	haskell	leap	module LeapYear where\n\nisLeapYear :: Int -> Bool\nisLeapYear y =  y `divBy` 400 || (y `divBy` 4 && not (y `divBy` 100))\n  where divBy  :: Integral a => a -> a -> Bool\n        divBy a b = a `mod` b == 0	\N	\N	0	1	2014-01-29 10:10:40	2014-01-29 10:10:40	18	leap.hs
39	21	626318383850fa73b8209167	done	haskell	leap	module LeapYear where\n\nisLeapYear :: Int -> Bool\nisLeapYear y =  y `divBy` 400 || y `divBy` 4 && not (y `divBy` 100)\n  where divBy  :: Integral a => a -> a -> Bool\n        divBy a b = a `mod` b == 0	2014-05-18 10:54:58	\N	0	2	2014-05-07 22:48:11	2014-05-07 22:48:11	18	leap.hs
56	27	3c1cb627961f864b467aa1bc	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(statement) do\n    cond do\n      silence? statement -> "Fine. Be that way!"\n      shouting? statement -> "Woah, chill out!"\n      question? statement -> "Sure."\n      true -> "Whatever."\n    end\n  end\n\n  defp shouting?(statement) do\n    statement == String.upcase(statement)\n  end\n\n  defp question?(statement) do\n    String.ends_with? statement, "?"\n  end\n\n  defp silence? statement do\n    statement == nil or \n    String.strip(statement) == ""\n  end\n\n  defp whatever, do: "Whatever."\n  defp chill, do: "Woah, chill out!"\n  defp sure, do: "Sure."\n  defp fine, do: "Fine. Be that way!"\nend	\N	\N	0	1	2014-07-13 17:03:49	2014-07-13 17:03:49	27	bob.exs
486	15	be07c7140d8c3f75a5e24ff6	pending	javascript	bob	module.exports = function() {\r\n\treturn {\r\n\t\they: function(input) {\r\n\t\t\tvar response = null;\r\n\r\n\t\t\tif(input.trim().length === 0) {\r\n\t\t\t\tresponse = 'Fine. Be that way!';\r\n\t\t\t} else if (input.match(/[a-zA-Z]/) && input == input.toUpperCase()) {\r\n\t\t\t\tresponse = 'Woah, chill out!';\r\n\t\t\t} else if (input.substr(-1) == '?') {\r\n\t\t\t\tresponse = 'Sure.';\r\n\t\t\t} else {\r\n\t\t\t\tresponse = 'Whatever.';\r\n\t\t\t}\r\n\r\n\t\t\treturn response;\r\n\t\t}\r\n\t};\r\n};\r\n\r	\N	\N	0	1	2014-06-23 16:46:35	2014-06-23 16:46:35	253	bob.js
487	15	23fcb0210d13a490f71e4811	pending	swift	leap	struct Year {\n    let calendarYear: Int\n    var isLeapYear: Bool {\n        return calendarYear % 4 == 0 && (calendarYear % 100 != 0 || calendarYear % 400 == 0)\n    }\n}	\N	\N	0	1	2014-05-20 22:18:09	2014-05-20 22:18:09	254	LeapYear.swift
40	21	7ab64570328a0299dc5bfaac	superseded	haskell	bob	module Bob(responseFor) where\n  import Data.Char(isUpper, isAlpha, isSpace)\n  responseFor :: String -> String\n  responseFor x | isNothing x   = "Fine. Be that way!"\n                | isYelling x   = "Woah, chill out!"\n                | isQuestion x  = "Sure."\n                | otherwise     = "Whatever."\n\n  isNothing :: String -> Bool\n  isNothing "" = True\n  isNothing xs = foldl (&&) True $ map isSpace xs\n\n  isQuestion :: String -> Bool\n  isQuestion "" = False\n  isQuestion xs = (last xs == '?')\n\n  isYelling :: String -> Bool\n  isYelling xs = (atLeastOneAlpha xs) && (foldl (&&) True $ map check xs) where\n                  check x | isAlpha x = isUpper x\n                          | otherwise = True\n                  atLeastOneAlpha ""  = False\n                  atLeastOneAlpha (x:xs) | isAlpha x = True\n                                         | otherwise = atLeastOneAlpha xs	\N	\N	0	1	2014-02-12 10:24:09	2014-02-12 10:24:09	19	Bob.hs
41	21	30c4390fe10732fb68019fb3	superseded	haskell	bob	module Bob(responseFor) where\n\nimport Data.Char(isUpper, isAlpha, isSpace)\n\nresponseFor :: String -> String\nresponseFor x \n  | isNothing x   = "Fine. Be that way!"\n  | isYelling x   = "Woah, chill out!"\n  | isQuestion x  = "Sure."\n  | otherwise     = "Whatever."\n\nisNothing :: String -> Bool\nisNothing = all isSpace\n\nisQuestion :: String -> Bool\nisQuestion "" = False\nisQuestion xs = last xs == '?'\n\nisYelling :: String -> Bool\nisYelling xs = atLeastOneAlpha xs && all check xs where\n                check x | isAlpha x = isUpper x\n                        | otherwise = True\n                atLeastOneAlpha ""  = False\n                atLeastOneAlpha (x:xs) | isAlpha x = True\n                                       | otherwise = atLeastOneAlpha xs	\N	\N	0	2	2014-02-13 23:07:27	2014-02-13 23:07:27	19	Bob.hs
42	21	5f4a935aaf7771da2172368c	pending	haskell	bob	module Bob(responseFor) where\n\nimport Data.Char(isUpper, isAlpha, isSpace)\n\nresponseFor :: String -> String\nresponseFor x \n  | isNothing x   = "Fine. Be that way!"\n  | isYelling x   = "Woah, chill out!"\n  | isQuestion x  = "Sure."\n  | otherwise     = "Whatever."\n\nisNothing :: String -> Bool\nisNothing = all isSpace\n\nisQuestion :: String -> Bool\nisQuestion "" = False\nisQuestion xs = last xs == '?'\n\nisYelling :: String -> Bool\nisYelling xs = any isAlpha xs && all check xs where\n                check x\n                  | isAlpha x = isUpper x\n                  | otherwise = True	\N	\N	0	3	2014-06-02 02:47:35	2014-06-02 02:47:35	19	Bob.hs
43	21	6b6c3832fb859edb66443c1f	done	clojure	bob	(ns bob)\n\n(defn response-for-basic\n  "Responds to string"\n  [string]\n  (let\n      [impartial "Whatever."\n       chill "Woah, chill out!"\n       sure  "Sure."\n       fine "Fine. Be that way!"]\n    (case string\n      "Tom-ay-to, tom-aaaah-to."                      impartial\n      "WATCH OUT!"                                    chill\n      "Does this cryogenic chamber make me look fat?" sure\n      "Let's go make out behind the gym!"             impartial\n      "It's OK if you don't want to go to the DMV."   impartial\n      "WHAT THE HELL WERE YOU THINKING?"              chill\n      "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!" chill\n      "1, 2, 3 GO!"                                   chill\n      "I HATE YOU"                                    chill\n      "Ending with ? means a question."               impartial\n      ""                                              fine\n      "    "                                          fine\n      "1, 2, 3"                                       impartial\n      "4?"                                            sure\n      impartial)))\n\n(defn response-for\n  "Responds to string"\n  [string]\n  (let\n      [impartial "Whatever."\n       chill "Woah, chill out!"\n       sure  "Sure."\n       fine "Fine. Be that way!"]\n    (cond\n      (re-matches #".*\\.$" string) impartial\n      (re-matches #"^[0-9].*\\!$" string) chill\n      (re-matches #"^[A-Z][^a-z]+.*$" string) chill\n      (re-matches #".*\\?$" string) sure\n      (re-matches #"^(\\s+|)$" string) fine\n      :else impartial)\n    ))	2014-07-06 06:22:22	\N	0	1	2014-07-01 08:02:59	2014-07-01 08:02:59	20	bob.clj
44	21	30e3d279215fc42211f6dab1	superseded	elixir	rna-transcription	defmodule DNA do\n  @doc """\n  Transcribes a character list representing DNA nucleotides to RNA\n\n  ## Examples\n\n  iex> DNA.to_rna('ACTG')\n  'UGAC'\n  """\n  @spec to_rna([char]) :: [char]\n  def to_rna([]), do: []\n  def to_rna([x|xs]) do\n    cond do\n      x == ?G -> 'C' ++ to_rna xs\n      x == ?C -> 'G' ++ to_rna xs\n      x == ?T -> 'A' ++ to_rna xs\n      x == ?A -> 'U' ++ to_rna xs\n    end\n  end\nend	\N	\N	0	1	2014-02-17 10:24:19	2014-02-17 10:24:19	21	dna.exs
45	21	b72b76827fb51de895c274a1	pending	elixir	rna-transcription	defmodule DNA do\n  @doc """\n  Transcribes a character list representing DNA nucleotides to RNA\n\n  ## Examples\n\n  iex> DNA.to_rna('ACTG')\n  'UGAC'\n  """\n  @spec to_rna([char]) :: [char]\n  def to_rna([]), do: []\n  def to_rna([x|xs]) do\n    case x do\n      ?G -> 'C' ++ to_rna xs\n      ?C -> 'G' ++ to_rna xs\n      ?T -> 'A' ++ to_rna xs\n      ?A -> 'U' ++ to_rna xs\n    end\n  end\nend	\N	\N	0	2	2014-05-30 10:17:14	2014-05-30 10:17:14	21	dna.exs
52	27	fbe7e8f6b7f5b8416049c114	done	clojure	beer-song	(ns beer\n  (:require [clojure.string :as s] ))\n\n(defn plural? [number]\n  (> number 1))\n\n(defn word_completion [number]\n  (if (or (plural? number) (zero? number) ) "s" ""))\n\n(defn verse [number]\n  (let [prev_number (dec number)]\n    (if-not \n      (zero? number)\n      (format "%1$d bottle%3$s of beer on the wall, %1$d bottle%3$s of beer.\\nTake %5$s down and pass it around, %2$s bottle%4$s of beer on the wall.\\n" \n              number\n              (if (plural? number) prev_number "no more")\n              (word_completion number) \n              (word_completion prev_number )\n              (if (plural? number) "one" "it"))\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n")))\n\n(defn sing \n  ([start end]\n   (s/join \n     "\\n" \n     (map \n       verse \n       (range start (dec end) -1))))\n  ([start]\n   (sing start 0)))	2014-07-26 18:01:00	\N	0	4	2014-07-21 11:18:55	2014-07-21 11:18:55	24	beer.clj
488	15	b8d985202842a5151889eafc	superseded	ruby	word-count	class Phrase\n  attr_reader :contents\n\n  def initialize(contents)\n    contents = normalize(contents)\n    @contents = sanitize(contents)\n  end\n\n  def word_count\n    words_in(contents).each_with_object({}) do |word, counts|\n      counts[word] ||= 0\n      counts[word] += 1\n    end\n  end\n\n  private\n\n  def normalize(phrase)\n    phrase.to_s.downcase\n  end\n\n  def sanitize(phrase)\n    phrase.gsub(/[^[:alnum:]]+/, ' ')\n  end\n\n  def words_in(words)\n    words.split\n  end\nend	\N	\N	0	1	2014-05-25 21:24:09	2014-05-25 21:24:09	255	word-count.rb
489	15	7541d8234994a96f859041ce	pending	ruby	word-count	class Phrase\n  attr_reader :contents\n\n  def initialize(contents)\n    @contents = contents\n  end\n\n  def word_count\n    @word_count ||= count_words\n  end\n\n  private\n\n  def count_words\n    words.each_with_object(Hash.new(0)) do |word, counts|\n      counts[normalize(word)] += 1\n    end\n  end\n\n  def normalize(word)\n    word.downcase\n  end\n\n  def words\n    contents.to_s.scan(/\\w+/)\n  end\nend	\N	\N	0	3	2014-06-28 11:01:59	2014-06-28 11:01:59	255	word-count.rb
639	26	332fb561cb7a03203527e98d	superseded	haskell	bob	module Bob where\nimport Data.Char\n\nresponseFor sentence\n  | silence   = "Fine. Be that way!"\n  | shout     = "Woah, chill out!"\n  | question  = "Sure."\n  | otherwise = "Whatever."\n  where\n    stripped = foldl (++) "" $ lines sentence\n    silence  = all isSpace stripped\n    shout    = any isAlpha stripped && map toUpper stripped == stripped\n    question = last stripped == '?'	\N	\N	0	2	2014-07-24 07:58:12	2014-07-24 07:58:12	329	bob.hs
46	27	303e1bc456d1b70c4b3f0797	pending	python	beer-song	class Beer(object):\r\n    """Represents beer song generator."""\r\n    def verse(self, number):\r\n        """Return 'number'th verse of beer song."""\r\n        self.number = number\r\n        return "%s %s of beer on the wall, %s %s of beer.\\n" \\\r\n                "%s, %s %s of beer on the wall.\\n" % \\\r\n               (self._howmany()[0], self._bottles()[0], self._howmany()[1],\\\r\n                self._bottles()[0], self._takeorbuy(), self._howmany()[2], self._bottles()[1])\r\n\r\n    def sing(self, start, end=0):\r\n        """Return all beer song verses form 'start' to 'end'."""\r\n        ret = ""\r\n        for i in range(start, end-1, -1):\r\n            ret += self.verse(i)\r\n            ret += "\\n"\r\n        return ret\r\n\r\n    def _howmany(self):\r\n        if self.number == 0:\r\n            return ["No more", "no more", "99"]\r\n        else:\r\n            if self.number == 1:\r\n                last = "no more"\r\n            else:\r\n                last = str(self.number-1)\r\n            return [str(self.number), str(self.number), last]\r\n\r\n    def _bottles(self):\r\n        if self.number == 1:\r\n            return ["bottle", "bottles"]\r\n        elif self.number == 2:\r\n            return ["bottles", "bottle"]\r\n        else:\r\n            return ["bottles", "bottles"]\r\n\r\n    def _takeorbuy(self):\r\n        if self.number == 0:\r\n            return "Go to the store and buy some more"\r\n        else:\r\n            if self.number == 1:\r\n                word = "it"\r\n            else:\r\n                word = "one"\r\n            return "Take %s down and pass it around" % word	\N	\N	0	1	2014-07-19 01:10:02	2014-07-19 01:10:02	22	beer-song.py
47	27	8fadae4098f6392df9b7af80	superseded	ruby	bob	class Bob\n\n  def hey(phrase)\n    if phrase.strip == ''\n      "Fine. Be that way!"\n    elsif phrase.match(/.*[a-zA-Z].*/) and phrase == phrase.upcase\n      "Woah, chill out!"\n    elsif phrase.split('').last == "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	\N	0	1	2014-07-16 01:30:16	2014-07-16 01:30:16	23	bob.rb
48	27	5134d0492028ef9b0cea24b5	pending	ruby	bob	class Response\n\n  def self.fitting_for?(phrase)\n    true\n  end\n\n  def self.give\n    "Whatever."\n  end\n\nend\n\nclass SilentTreatment < Response\n  def self.fitting_for?(phrase)\n    phrase.strip == ''\n  end\n\n  def self.give\n    "Fine. Be that way!"\n  end\nend\n\nclass Defensive < Response\n  def self.fitting_for?(phrase)\n    phrase.match(/.*[a-zA-Z].*/) and phrase == phrase.upcase\n  end\n\n  def self.give\n    "Woah, chill out!"\n  end\nend\n\nclass FontOfKnowledge < Response\n  def self.fitting_for?(phrase)\n    phrase.split('').last == "?"\n  end\n\n  def self.give\n    "Sure."\n  end\nend\n\nclass Bob\n  @@repretoire = [SilentTreatment, Defensive, FontOfKnowledge, Response]\n\n  def hey(phrase)\n    appropriateResponse = @@repretoire.find { |response| response.fitting_for? phrase }\n\n    appropriateResponse.give\n  end\n\nend	\N	\N	0	2	2014-07-18 01:56:55	2014-07-18 01:56:55	23	bob.rb
49	27	4208b81bb440e52f6cee0998	superseded	clojure	beer-song	(ns beer\n  (:require [clojure.string :as s] ))\n(defn verse [number]\n  (if \n    (= number 0)\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    (format "%1$d bottle%3$s of beer on the wall, %1$d bottle%3$s of beer.\\nTake %5$s down and pass it around, %2$s bottle%4$s of beer on the wall.\\n" \n          number\n          (if (< number 2) "no more" (- number 1))\n          (if (> number 1) "s" "")\n          (if (or (> (- number 1) 1) (= (- number 1) 0) ) "s" "")\n          (if (> number 1) "one" "it"))))\n\n(defn get_song[start end]\n  (s/join \n    "\\n" \n    (map \n      #(beer/verse %1) \n      (range start (- end 1) -1))))\n\n(defn sing \n  ([start end]\n   (beer/get_song start end))\n  ([start]\n   (beer/get_song start 0)))	\N	\N	0	1	2014-07-15 05:17:57	2014-07-15 05:17:57	24	beer.clj
50	27	bea3086b1c6f7744e81cf886	superseded	clojure	beer-song	(ns beer\n  (:require [clojure.string :as s] ))\n\n\n(defn verse [number]\n  (let [prev_number (- number 1)]\n  (if \n    (= number 0)\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    (format "%1$d bottle%3$s of beer on the wall, %1$d bottle%3$s of beer.\\nTake %5$s down and pass it around, %2$s bottle%4$s of beer on the wall.\\n" \n            number\n            (if (< number 2) "no more" prev_number)\n            (if (> number 1) "s" "")\n            (if (or (> prev_number 1) (= prev_number 0) ) "s" "")\n            (if (> number 1) "one" "it")))))\n\n(defn get_song[start end]\n  (s/join \n    "\\n" \n    (map \n      #(beer/verse %1) \n      (range start (- end 1) -1))))\n\n(defn sing \n  ([start end]\n   (beer/get_song start end))\n  ([start]\n   (beer/get_song start 0)))	\N	\N	0	2	2014-07-19 22:40:48	2014-07-19 22:40:48	24	beer.clj
51	27	c33376cb3f5cef5d50f45d0a	superseded	clojure	beer-song	(ns beer\n  (:require [clojure.string :as s] ))\n\n(defn plural? [number]\n  (> number 1))\n\n(defn verse [number]\n  (let [prev_number (- number 1)]\n    (if \n      (not= number 0)\n      (format "%1$d bottle%3$s of beer on the wall, %1$d bottle%3$s of beer.\\nTake %5$s down and pass it around, %2$s bottle%4$s of beer on the wall.\\n" \n              number\n              (if (beer/plural? number) prev_number "no more")\n              (if (beer/plural? number) "s" "")\n              (if (or (beer/plural? prev_number) (= prev_number 0) ) "s" "")\n              (if (beer/plural? number) "one" "it"))\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n")))\n\n(defn get_song[start end]\n  (s/join \n    "\\n" \n    (map \n      #(beer/verse %1) \n      (range start (- end 1) -1))))\n\n(defn sing \n  ([start end]\n   (beer/get_song start end))\n  ([start]\n   (beer/get_song start 0)))	\N	\N	0	3	2014-07-20 21:41:01	2014-07-20 21:41:01	24	beer.clj
490	15	36544eddb2d96a785a6d710e	superseded	ruby	word-count	class Phrase\n  attr_reader :contents\n\n  def initialize(contents)\n    @contents = contents\n  end\n\n  def word_count\n    @word_count ||= count_words\n  end\n\n  private\n\n  def count_words\n    Hash.new { |h,k| h[k] = 0 }.tap do |counts|\n      words.each do |word|\n        counts[normalize(word)] += 1\n      end\n    end\n  end\n\n  def normalize(word)\n    word.downcase\n  end\n\n  def words\n    contents.to_s.scan(/\\w+/)\n  end\nend	\N	\N	0	2	2014-07-04 11:57:00	2014-07-04 11:57:00	255	word-count.rb
53	27	046a3fbc7d0937146a72cbd5	superseded	javascript	bob	Bob = function() {\n\tthis.hey = function(greeting) {\n\t\tif (greeting == '') {\n\t\t\treturn 'Fine, be that way.'\n\t\t}\t\n\t\telse if (this.shout(greeting)) {\n\t\t\treturn 'Woah, chill out!'\n\t\t} \n\t\telse if (this.question(greeting)) {\n\t\t\treturn 'Sure' \n\t\t} \n\t\telse\n\t\t\treturn 'Whatever'\n\t};\n\n\tthis.statement = function(greeting) {\n\t\treturn greeting[greeting.length -1] == ".";\n\t};\n\n\tthis.question = function(greeting) {\n\t\treturn greeting[greeting.length -1] == "?";\n\t};\n\n\tthis.shout = function(greeting) {\n\t\treturn greeting.toUpperCase() == greeting;\n\t};\n};	\N	\N	0	1	2014-07-13 16:54:57	2014-07-13 16:54:57	25	bob.js
455	15	aff949db0f91155506bc342d	pending	python	rna-transcription	class DNA:\n    def __init__(self, dna):\n        self.dna = dna\n\n    def to_rna(self):\n        return self.dna.replace('T', 'U')	\N	\N	0	1	2014-06-25 20:51:30	2014-06-25 20:51:30	239	dna.py
491	15	d3df6a319b1471c0a97367d7	pending	python	anagram	from collections import Counter\n\nclass Anagram(object):  \n  def __init__(self, word):\n    self.word = word.lower()\n  \n  def is_anagram(self, cadidate):\n    return Counter(self.word) == Counter(cadidate) and self.word != cadidate\n    \n  def match(self, candidates):\n    return [ word for word in candidates if self.is_anagram(word.lower()) ]\n    \n  	\N	\N	0	1	2014-06-05 00:03:31	2014-06-05 00:03:31	256	anagram.py
57	27	95706dcf7980350b7f9f9880	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(statement) do\n    cond do\n      silence? statement -> "Fine. Be that way!"\n      shouting? statement -> "Woah, chill out!"\n      question? statement -> "Sure."\n      true -> "Whatever."\n    end\n  end\n\n  defp shouting?(statement) do\n    statement == String.upcase(statement)\n  end\n\n  defp question?(statement) do\n    String.ends_with? statement, "?"\n  end\n\n  defp silence? statement do\n    statement == nil or \n    String.strip(statement) == ""\n  end\n\nend	\N	\N	0	2	2014-07-15 19:19:05	2014-07-15 19:19:05	27	bob.exs
58	27	567368a1b127022f5f6403bc	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(statement) do\n    cond do\n      silence? statement -> "Fine. Be that way!"\n      shouting? statement -> "Woah, chill out!"\n      question? statement -> "Sure."\n      true -> "Whatever."\n    end\n  end\n\n  defp shouting?(statement) do\n    statement == String.upcase(statement)\n  end\n\n  defp question?(statement) do\n    String.ends_with? statement, "?"\n  end\n\n  defp silence?(statement) when statement == nil do\n    true\n  end\n  \n  defp silence?(statement) do\n    String.strip(statement) == ""\n  end\n\nend	\N	\N	0	3	2014-07-16 00:39:48	2014-07-16 00:39:48	27	bob.exs
59	27	eeb96c04978b6405529a10bd	pending	elixir	bob	defmodule Teenager do\n\n  def hey(statement) do\n    cond do\n      silence? statement -> "Fine. Be that way!"\n      shouting? statement -> "Woah, chill out!"\n      question? statement -> "Sure."\n      true -> "Whatever."\n    end\n  end\n\n  defp shouting?(statement) do\n    statement == String.upcase(statement)\n  end\n\n  defp question?(statement) do\n    String.ends_with? statement, "?"\n  end\n\n  defp silence?(nil) do\n    true\n  end\n  \n  defp silence?(statement) do\n    String.strip(statement) == ""\n  end\n\nend	\N	\N	0	4	2014-07-26 04:54:23	2014-07-26 04:54:23	27	bob.exs
60	27	4747938d285f26a8f2a2e4ca	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA []     = []\ntoRNA (x:xs) = translate x : toRNA xs\n\ntranslate :: Char -> Char\ntranslate 'T' = 'U'\ntranslate  c  =  c	\N	\N	0	1	2014-07-13 13:03:19	2014-07-13 13:03:19	28	rna-transcription.hs
61	27	3a030cdca511c17ad3d076bb	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA strand = map translate strand\n  where\n    translate 'T' = 'U'\n    translate  c  =  c	2014-07-18 08:19:37	\N	0	2	2014-07-17 19:25:57	2014-07-17 19:25:57	28	rna-transcription.hs
62	27	5e6a358a16d8fb1b209ddc0e	done	ruby	crypto-square	class Crypto\n  def initialize(message)\n    @message = message\n  end\n\n  def normalize_plaintext\n    @normalized_plaintext ||= @message.downcase.gsub(/\\s|[^a-z0-9]/, '')\n  end\n\n  def size\n    square_root = Math.sqrt(normalize_plaintext.size)\n    square_root == square_root.to_i ? square_root : (square_root.to_i + 1)\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan(%r(.{1,#{size}}))\n  end\n\n  def ciphertext\n    split_segments = plaintext_segments.map{|e|e.split('')}\n    split_segments.shift.zip(*split_segments).join\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(%r(.{1,5})).join(' ')\n  end\nend	2014-07-15 11:44:11	\N	0	1	2014-07-13 23:53:03	2014-07-13 23:53:03	29	crypto-square.rb
63	27	f91754e7cd2b1a6342368876	superseded	ruby	robot-name	# The robot's name is to be assigned when it's created.\n# The name must follow the following pattern: /\\w{2}\\d{3}/\n# Remember, that \\w is the same as [A-Za-z0-9_], but the README seems to\n#   indicate that what they really want is /[A-Z]{2}\\d{3}/\nclass Robot\n  attr_reader :name\n\n  def initialize\n    set_name\n  end\n\n  def reset\n    set_name\n  end\n\n  private\n\n  def random_letter\n    ('A'..'Z').to_a.sample\n  end\n\n  def random_number\n    rand(0..9).to_s\n  end\n\n  def generate_name\n    (2.times.map { random_letter } + 3.times.map { random_number }).join\n  end\n\n  def set_name\n    name = generate_name\n    r1 = Regexp.new(name)\n    roster = File.open('roster.txt', 'a+')\n    found = !roster.grep(r1).empty?\n    if found\n      set_name\n    else\n      @name = name\n      roster.puts @name\n    end\n  end\nend	\N	\N	0	1	2014-07-20 08:21:45	2014-07-20 08:21:45	30	robot-name.rb
64	27	1b2eb36ff6fac8e889b92d52	done	ruby	robot-name	# The robot's name is to be assigned when it's created.\n# The name must follow the following pattern: /\\w{2}\\d{3}/\n# Remember, that \\w is the same as [A-Za-z0-9_], but the README seems to\n#   indicate that what they really want is /[A-Z]{2}\\d{3}/\nclass Robot\n  attr_reader :name\n\n  def initialize\n    set_name\n  end\n\n  def reset\n    set_name\n  end\n\n  private\n\n  def random_letter\n    ('A'..'Z').to_a.sample\n  end\n\n  def random_number\n    rand(0..9).to_s\n  end\n\n  def generate_name\n    (2.times.map { random_letter } + 3.times.map { random_number }).join\n  end\n\n  def set_name\n    name = generate_name\n    if name_available?(name)\n      @name = name\n      @roster.puts @name\n    else\n      set_name\n    end\n  end\n\n  def name_available?(name)\n    r1 = Regexp.new(name)\n    @roster ||= File.open('roster.txt', 'a+')\n    @roster.grep(r1).empty?\n  end\nend	2014-07-26 22:58:27.023731	\N	0	2	2014-07-23 15:35:32	2014-07-23 15:35:32	30	robot-name.rb
65	27	4c628e1a37a02cc6d25cd6b9	superseded	ruby	hamming	class Hamming\n\tdef Hamming.compute(strand1, strand2)\n\t    # calculate max length to evaluate, ignoring rest\n\t    max_index = [strand1.length, strand2.length].min - 1\n\t    # compare each index up to max_index, accumulating differences\n\t  \t(0..max_index).reduce(0) do |sum, index|\n\t\t\t\tstrand1[index] == strand2[index] ? sum : sum += 1\n\t    end\n\tend\nend	\N	\N	0	1	2014-07-17 06:44:38	2014-07-17 06:44:38	31	hamming.rb
469	15	f47691f4b4b1e58dcf393309	superseded	ruby	anagram	require 'pry'\n\nclass Anagram\n\tattr_reader :originalword, :originalword_letters, :originalword_letter_count\n\t\n\tdef initialize(originalword)\n\t\t@originalword = originalword\n\tend\n\n\tdef match(wordsarray)\n\t\twordsarray = wordsarray.select do |word|\n\t\t\tare_these_anagrams?(word,originalword)\n\t\tend\n\t\twordsarray = wordsarray.uniq\n\tend\n\t\n\tprivate\n\n\tdef are_these_anagrams?(word1,word2)\n\t\tword1 = word1.downcase\n\t\tword2 = word2.downcase\n\t\treturn false if word1 == word2\n\t\tcount_letters(word1) == count_letters(word2)\n\tend\n\n\tdef count_letters(word)\n\t\tletters = extract_letters(word)\n\t\tcount = Hash.new(0)\n\t\tletters.each do |letter|\n\t\t\tcount[letter] += 1\n\t\tend\n\t\tcount\n\tend\n\n\tdef extract_letters(word)\n\t\tword.downcase.split('')\n\tend\nend	\N	\N	0	4	2014-06-20 10:55:20	2014-06-20 10:55:20	244	anagram.rb
470	15	ec112557601809dba2bae90a	superseded	ruby	anagram	require 'pry'\n\nclass Anagram\n\tattr_reader :originalword\n\t\n\tdef initialize(originalword)\n\t\t@originalword = originalword\n\tend\n\n\tdef match(wordsarray)\n\t\twordsarray = wordsarray.select do |word|\n\t\t\tanagrams?(word,originalword)\n\t\tend\n\t\twordsarray = wordsarray.uniq\n\tend\n\t\n\tprivate\n\n\tdef anagrams?(word1,word2)\n\t\tword1 = word1.downcase\n\t\tword2 = word2.downcase\n\t\treturn false if word1 == word2\n\t\tcount_letters(word1) == count_letters(word2)\n\tend\n\n\tdef count_letters(word)\n\t\tletters = extract_letters(word)\n\t\tcount = Hash.new(0)\n\t\tletters.each do |letter|\n\t\t\tcount[letter] += 1\n\t\tend\n\t\tcount\n\tend\n\n\tdef extract_letters(word)\n\t\tword.downcase.split('')\n\tend\nend	\N	\N	0	6	2014-06-21 18:44:45	2014-06-21 18:44:45	244	anagram.rb
522	23	0fa28b01dcb230bd5202d4a3	superseded	elixir	word-count	defmodule Words do\n  def count(sentence) do\n    words = sentence |> String.downcase |> String.split %r/\\W+/, trim: true\n    count_all words\n  end\n\n  def count_all([h|t], acc // HashDict.new) do\n    if HashDict.has_key? acc, h do\n      {val, dict} = HashDict.pop(acc, h)\n      new_acc = HashDict.put(dict, h, val + 1)\n    else\n      new_acc = HashDict.put(acc, h, 1)\n    end\n    count_all(t, new_acc)\n  end\n\n  def count_all([], acc) do\n    acc\n  end\nend	\N	\N	0	1	2014-03-01 21:45:58	2014-03-01 21:45:58	271	word-count.exs
66	27	4eecfa6d0576733cadef8cc3	done	ruby	hamming	class Hamming\n\n  # Calculates the number of differences in two\n  # 'strands' of dna \n\tdef Hamming.compute(strand1, strand2)\n\t    # only compare where the strands have corresponding pairs --\n      # which means: compare up to the length of the shortest strand\n\t    max_index = [strand1.length, strand2.length].min - 1\n\t    \n      # compare the strands at each index up to max_index, accumulating a count of differences\n      # using 'sum' -- which is returned by the function\n\t  \t(0..max_index).inject(0) do |sum, index|\n        # if the pair elements are the same, \n\t\t\t\tstrand1[index] == strand2[index] ? sum : sum += 1\n\t    end\n\tend\nend	2014-07-23 10:03:20	\N	0	2	2014-07-21 13:42:29	2014-07-21 13:42:29	31	hamming.rb
67	27	5fd844eeeafabd4843d51ea2	done	haskell	point-mutations	module DNA\n(hammingDistance) where\n  \nhammingDistance :: String -> String -> Int\nhammingDistance s1 s2 = length $ mutations s1 s2\n  where mutations x y = filter id $ zipWith (/=) x y	2014-07-26 22:58:27.077934	\N	0	2	2014-07-17 21:13:05	2014-07-17 21:13:05	32	point-mutations.hs
68	27	d0542c02dba89d12c43ca953	superseded	haskell	point-mutations	module DNA\n(hammingDistance) where\n  \nhammingDistance :: String -> String -> Int\nhammingDistance s1 s2 = length . mutations $ points s1 s2\n  where mutations = filter (\\(x,y) -> x /= y)\n        points = zip \n  	\N	\N	0	1	2014-07-18 21:59:47	2014-07-18 21:59:47	32	point-mutations.hs
69	27	da191ff6e4de0a3ace3f67c2	superseded	ruby	nucleotide-count	class DNATest < MiniTest::Unit::TestCase\n  class DNA\n    def initialize(string)\n      @string = string #nucleotides\n      dna_validation #validates nucleotides\n      @counts = {"A"=> 0, "T" => 0, "C"=> 0, "G"=> 0} #default status for @counts\n    end\n\n\n    def count(element)\n        @element = element #what elements are we counting\n        element_validation #is this element valid\n        @array = converted_array(@string) #converts into a sorted array\n        @array.count(element) #counts elements in an array\n    end\n\n\n    def nucleotide_counts\n      nucleotides = converted_array(@string) #split submitted nucleotides into characters and sort them alphabetically\n      nucleotides.each do  |nucleotide|\n        @counts[nucleotide] += 1 #goes and counts nucleotides, adding them to a hash named @counts\n      end\n      @counts #returns counts of nucleotides\n    end\n\n    private\n\n    def dna_validation\n      return 0 if @string.empty? #if no nucleotides were submitted, returns zero\n      raise ArgumentError, "DNA is not RNA" if @string.include?('U') #error if @string includes U\n      raise ArgumentError, "This is not DNA" unless @string.match(/[ACGT]/) # unless @string contains A, C, G, or T,\n                                                                            #it's not a valid @string.\n      end\n\n    def element_validation\n      raise ArgumentError, "There are no such nucleotide" unless @element.match(/[ACGTU]/) #\n    end\n\n    def converted_array(string)\n        string.chars.sort\n    end\n  end\nend	\N	\N	0	2	2014-07-16 14:26:26	2014-07-16 14:26:26	33	nucleotide-count.rb
70	27	0b3cac57f5fb5b568de1a007	superseded	ruby	nucleotide-count	class DNATest < MiniTest::Unit::TestCase\n  class DNA\n    def initialize(string)\n      @string = string\n      @counts = {"A"=> 0, "T" => 0, "C"=> 0, "G"=> 0}\n      dna_validation\n    end\n    \n    \n    def count(element)\n        @element = element\n        element_validation\n        @array = @string.chars.sort\n        @array.count(element)\n    end\n    \n    def nucleotide_counts\n      nucleotides = @string.chars.sort\n      nucleotides.each do  |nucleotide| \n        @counts[nucleotide] += 1\n      end\n      @counts\n    end\n    \n    def dna_validation\n      return 0 if @string.empty? \n      raise ArgumentError, "DNA is not RNA" if @string.include?('U')\n      raise ArgumentError, "This is not a DNA" unless @string.match(/[ACGT]/)\n      \n    end\n    \n    def element_validation\n      raise ArgumentError, "There are no such nucleotide" unless @element.match(/[ACGTU]/)\n    end\n  end\nend	\N	\N	0	1	2014-07-19 13:00:55	2014-07-19 13:00:55	33	nucleotide-count.rb
492	15	5edf71ab0f3a5057f3d387dc	superseded	ruby	raindrops	class Raindrops\r\n\r\n  def convert(number)\r\n    pling = nil\r\n    plang = nil\r\n    plong = nil\r\n    if number % 3 == 0 || number % 5 == 0 || number % 7 == 0\r\n      (0..number).each do |i|\r\n        if has_threes?(i, number)\r\n          pling = "Pling"\r\n        elsif has_fives?(i, number)\r\n          plang = "Plang"\r\n        elsif has_sevens?(i, number)\r\n          plong = "Plong"\r\n        end\r\n      end\r\n      return "#{pling}#{plang}#{plong}"\r\n    else\r\n      return "#{number}"\r\n    end\r\n  end\r\n\r\n  def has_threes?(i, number)\r\n    i * 3 == number\r\n  end\r\n\r\n  def has_fives?(i, number)\r\n    i * 5 == number\r\n  end\r\n\r\n  def has_sevens?(i, number)\r\n    i * 7 == number\r\n  end\r\n\r\nend	\N	\N	0	1	2014-05-24 12:35:07	2014-05-24 12:35:07	257	raindrops.rb
80	27	102bcfc2f47365df49791d16	superseded	ocaml	list-ops	(** list-ops exercise *)\n\nlet rec length = function\n  | []   -> 0\n  | _::t -> 1 + length t;;\n\nlet reverse l =\n  let rec reverse2 res = function\n    | [] -> res\n    | h::t -> reverse2 (h::res) t\n  in reverse2 [] l;;\n\nlet rec map ~f l =\n  match l with\n  | []   -> []\n  | h::t -> [(f h)] @ (map ~f:f t);;\n\nlet rec filter ~f l =\n  match l with\n  | [] -> []\n  | h::t -> if f h then h :: (filter ~f:f t)\n            else (filter ~f:f t);;\n\nlet rec fold ~init ~f l =\n  match l with\n  | [] -> init\n  | (h::t) -> fold ~init:(f init h) ~f:f t;;\n\nlet rec append l1 l2 =\n  match l1 with\n  | [] -> l2\n  | h::t -> h :: append t l2;;\n\nlet rec concat = function\n  | [] -> []\n  | [h] -> h\n  | h::t -> append h (concat t);;	\N	\N	0	2	2014-07-21 16:34:06	2014-07-21 16:34:06	38	list_ops.ml
493	15	1d437c90785b6b5a3f64b322	superseded	ruby	raindrops	class Raindrops\r\n\r\n  def convert(number)\r\n    pling = nil\r\n    plang = nil\r\n    plong = nil\r\n    (0..number).each do |i|\r\n      if has_threes?(i, number)\r\n        pling = "Pling"\r\n      elsif has_fives?(i, number)\r\n        plang = "Plang"\r\n      elsif has_sevens?(i, number)\r\n        plong = "Plong"\r\n      end\r\n    end\r\n    if pling || plang || plong\r\n      return "#{pling}#{plang}#{plong}"\r\n    else\r\n      return "#{number}"\r\n    end\r\n  end\r\n\r\n  def has_threes?(i, number)\r\n    i * 3 == number\r\n  end\r\n\r\n  def has_fives?(i, number)\r\n    i * 5 == number\r\n  end\r\n\r\n  def has_sevens?(i, number)\r\n    i * 7 == number\r\n  end\r\n\r\nend	\N	\N	0	2	2014-06-01 20:21:24	2014-06-01 20:21:24	257	raindrops.rb
494	15	c3b84d0a8053125647411b7c	superseded	ruby	raindrops	class Raindrops\r\n\r\n  def convert(number)\r\n    plingify(number)\r\n    plangify(number)\r\n    plongify(number)\r\n\r\n    if @pling || @plang || @plong\r\n      return "#{@pling}#{@plang}#{@plong}"\r\n    else\r\n      return "#{number}"\r\n    end\r\n  end\r\n\r\n  def plingify(number)\r\n    @pling = nil\r\n    if number % 3 == 0\r\n      @pling = "Pling"\r\n    end\r\n  end\r\n\r\n  def plangify(number)\r\n    @plang = nil\r\n    if number % 5 == 0\r\n      @plang = "Plang"\r\n    end\r\n  end\r\n\r\n  def plongify(number)\r\n    @plong = nil\r\n    if number % 7 == 0 \r\n      @plong = "Plong"\r\n    end\r\n  end\r\n\r\nend	\N	\N	0	3	2014-06-07 05:55:37	2014-06-07 05:55:37	257	raindrops.rb
495	15	638882926a0018be607bfd7c	superseded	ruby	raindrops	class Raindrops\r\n\r\n  def convert(number)\r\n    pling = plingify(number)\r\n    plang = plangify(number)\r\n    plong = plongify(number)\r\n\r\n    if pling || plang || plong\r\n      return "#{pling}#{plang}#{plong}"\r\n    else\r\n      number.to_s\r\n    end\r\n  end\r\n\r\n  def plingify(number)\r\n    pling = nil\r\n    if number % 3 == 0\r\n      "Pling"\r\n    end\r\n  end\r\n\r\n  def plangify(number)\r\n    plang = nil\r\n    if number % 5 == 0\r\n      "Plang"\r\n    end\r\n  end\r\n\r\n  def plongify(number)\r\n    plong = nil\r\n    if number % 7 == 0 \r\n      "Plong"\r\n    end\r\n  end\r\n\r\nend	\N	\N	0	4	2014-06-20 06:50:38	2014-06-20 06:50:38	257	raindrops.rb
71	27	ba3bcdaf763d3ab17f39c988	done	ruby	nucleotide-count	class DNATest < MiniTest::Unit::TestCase\n  class DNA\n    def initialize(string)\n      @string = string #nucleotides\n      validate_dna #validates nucleotides\n      @counts = {"A"=> 0, "T" => 0, "C"=> 0, "G"=> 0} #default status for @counts\n    end\n\n\n    def count(element)\n        @element = element #what elements are we counting\n        validate_element #is this element valid\n        @array = convert_array(@string) #converts into a sorted array\n        @array.count(element) #counts elements in an array\n    end\n\n\n    def nucleotide_counts\n      nucleotides = convert_array(@string) #split submitted nucleotides into characters and sort them alphabetically\n      nucleotides.each do  |nucleotide|\n        @counts[nucleotide] += 1 #goes and counts nucleotides, adding them to a hash named @counts\n      end\n      @counts #returns counts of nucleotides\n    end\n\n    private\n\n    def validate_dna\n      return if @string.empty? #if no nucleotides were submitted, returns zero\n      raise ArgumentError, "DNA is not RNA" if @string.include?('U') #error if @string includes U\n      raise ArgumentError, "This is not DNA" unless @string.match(/[ACGT]/) # unless @string contains A, C, G, or T,\n                                                                            #it's not a valid @string.\n      end\n\n    def validate_element\n      raise ArgumentError, "There are no such nucleotide" unless @element.match(/[ACGTU]/) #\n    end\n\n    def convert_array(string)\n        string.chars.sort\n    end\n  end\nend	2014-07-26 22:58:27.129359	\N	0	3	2014-07-21 05:17:59	2014-07-21 05:17:59	33	nucleotide-count.rb
72	27	87c91961261f9980ad177369	pending	clojure	grade-school	(ns school)\n\n(defn add [db name g]\n  (assoc db g (conj (grade db g) name)))\n\n(defn grade [db g]\n  (get db g []))\n\n(defn sorted [db]\n  (into {} (sort (for [[g names] db] [g (sort names)]))))	\N	\N	0	1	2014-07-23 17:28:13	2014-07-23 17:28:13	34	school.clj
73	27	39b559680ebe84c6179e6a56	pending	python	bob	import re\n\nclass Bob():\n    def hey(self, phrase):\n        if len(phrase.strip()) == 0:\n            return "Fine. Be that way!"\n        elif phrase.isupper():\n            return "Woah, chill out!"\n        elif re.search("[?]$", phrase):\n            return "Sure."\n        else:\n            return "Whatever."	\N	\N	0	1	2014-07-20 04:17:39	2014-07-20 04:17:39	35	bob_v1.1.py
74	27	286bff5045fdf4bfc62fc3ef	pending	ruby	food-chain	class FoodChainSong\r\n\r\n\tANIMALS = [\t\r\n\t\t\t\t\t\t\t["fly", ""],\r\n\t\t\t\t\t\t\t["spider", "It wriggled and jiggled and tickled inside her."],\r\n\t\t\t\t\t\t\t["bird", "How absurd to swallow a bird!"],\r\n\t\t\t\t\t\t\t["cat", "Imagine that, to swallow a cat!"],\r\n\t\t\t\t\t\t\t["dog", "What a hog, to swallow a dog!"],\r\n\t\t\t\t\t\t\t["goat", "Just opened her throat and swallowed a goat!"],\r\n\t\t\t\t\t\t\t["cow", "I don't know how she swallowed a cow!"],\t\r\n\t\t\t\t\t\t\t["horse", ""]\r\n\t\t\t\t\t\t]\r\n\t\r\n\tdef verse(number)\r\n\t\tsong = "I know an old lady who swallowed a " \r\n\t\tif number < 8\r\n\t\t\tfor n in number.downto(2) do \r\n\t\t\t\t song += ANIMALS[n - 1][0] + "#{ n == 2 && number != 2 ? ANIMALS[n - 1][1].gsub(/It/, ' that') : "." + "#{ ("\\n" + ANIMALS[n - 1][1]) unless n > 2 && n != number }" }" + "\\n" + "She swallowed the " + ANIMALS[n - 1][0] + " to catch the "  \r\n\t\t\tend\t\r\n\t\t\tsong += ANIMALS[0][0]\r\n\t\t\tsong += ".\\n" + "I don't know why she swallowed the fly. Perhaps she'll die.\\n"\r\n\t\telsif number == 8\r\n\t\t\tsong += ANIMALS[7][0] +".\\n" + "She's dead, of course!\\n"\r\n\t\tend\r\n\t\tsong\r\n\tend\r\n\t\r\n\tdef verses(from, to)\r\n\t\tsong = ''\r\n\t\t(from..to).each do |n|\r\n\t\t\tsong += verse(n) + "\\n"\r\n\t\tend\r\n\t\tsong\r\n\tend\r\n\t\r\n\tdef sing\r\n\t\tself.verses(1,8)\r\n\tend\r\n\r\nend	\N	\N	0	1	2014-07-22 23:58:22	2014-07-22 23:58:22	36	food_chain.rb
75	27	2bab2c3fb5cdc8271eb8b741	done	ruby	nth-prime	module Prime\n\n  @@primes = [2, 3]\n\n  def self.nth nb\n    raise ArgumentError unless nb > 0\n\n    (@@primes.last..150_000).step(2) do |candidate|\n      break if @@primes.size > nb\n      @@primes << candidate if @@primes.all? { |i| candidate % i != 0}\n    end\n    @@primes[nb-1]\n  end\n\nend	2014-07-25 17:23:55	\N	0	3	2014-07-14 03:52:52	2014-07-14 03:52:52	37	prime.rb
76	27	1699d1dcc77e109c715efca6	superseded	ruby	nth-prime	module Prime\n\n  @@primes = [2, 3]\n\n  def self.nth nb\n    raise ArgumentError unless nb > 0\n\n    (@@primes.last..150_000).step(2) do |candidate|\n      @@primes << candidate unless @@primes.any? { |i| candidate % i == 0}\n      break if @@primes.size > nb\n    end\n    @@primes[nb-1]\n  end\n\nend	\N	\N	0	2	2014-07-19 15:36:47	2014-07-19 15:36:47	37	prime.rb
77	27	da4087dfa72f4e381cb8ef75	superseded	ruby	nth-prime	module Prime\n\n  @@primes = [2]\n\n  def self.nth nb\n    raise ArgumentError unless nb > 0\n\n    @@primes.last.upto(150_000) do |candidate|\n      @@primes << candidate unless @@primes.any? { |i| candidate % i == 0}\n      break if @@primes.size > nb\n    end\n    @@primes[nb-1]\n  end\n\nend	\N	\N	0	1	2014-07-24 19:32:30	2014-07-24 19:32:30	37	prime.rb
78	27	21e38f28dc08edc99dcc74db	superseded	ocaml	list-ops	(** list-ops exercise *)\n\nlet rec length = function [] -> 0 | _::t -> 1 + length t;;\n\nlet reverse l = let rec reverse2 res\n                   = function [] -> res | h::t -> reverse2 (h::res) t\n                 in reverse2 [] l;;\n\nlet rec map ~f l = match l\n  with | [] -> [] | h::t -> [(f h)] @ (map ~f:f t);;\n\nlet rec filter ~f l = match l\n  with | [] -> [] | h::t -> if f h then h :: (filter ~f:f t)\n                               else (filter ~f:f t);;\n\nlet rec fold ~init ~f l\n  =  match l with  [] -> init | (h::t) -> fold ~init:(f init h) ~f:f t;;\n\nlet rec append l1 l2 = match l1 with | [] -> l2 | h::t -> h :: append t l2;;\n\nlet rec concat = function [] -> [] | [h] -> h | h::t -> append h (concat t);;	\N	\N	0	1	2014-07-15 12:28:31	2014-07-15 12:28:31	38	list_ops.ml
79	27	94a8c9426a50cdc1666d7e32	done	ocaml	list-ops	(** list-ops exercise *)\n\nlet rec length = function\n  | []   -> 0\n  | _::t -> 1 + length t\n\nlet reverse l =\n  let rec reverse2 res = function\n    | [] -> res\n    | h::t -> reverse2 (h::res) t\n  in reverse2 [] l\n\nlet rec map ~f l =\n  match l with\n  | []   -> []\n  | h::t -> [(f h)] @ (map ~f:f t)\n\nlet rec filter ~f l =\n  match l with\n  | [] -> []\n  | h::t -> if f h then h :: (filter ~f:f t)\n            else (filter ~f:f t)\n\nlet rec fold ~init ~f l =\n  match l with\n  | [] -> init\n  | (h::t) -> fold ~init:(f init h) ~f:f t\n\nlet rec append l1 l2 =\n  match l1 with\n  | [] -> l2\n  | h::t -> h :: append t l2\n\nlet rec concat = function\n  | [] -> []\n  | [h] -> h\n  | h::t -> append h (concat t)	2014-07-26 22:58:27.234114	\N	0	3	2014-07-19 11:54:44	2014-07-19 11:54:44	38	list_ops.ml
471	15	f0fdc4b13a458aafef3b666c	pending	ruby	anagram	require 'pry'\n\nclass Anagram\n\tattr_reader :originalword\n\t\n\tdef initialize(word)\n\t\t@originalword = word\n\tend\n\n\tdef match(wordsarray)\n\t\twordsarray = wordsarray.select do |word|\n\t\t\tanagrams?(word,originalword)\n\t\tend\n\t\twordsarray = wordsarray.uniq\n\tend\n\t\n\tprivate\n\n\tdef anagrams?(word1,word2)\n\t\tword1 = word1.downcase\n\t\tword2 = word2.downcase\n\t\treturn false if word1 == word2\n\t\tcount_letters(word1) == count_letters(word2)\n\tend\n\n\tdef count_letters(word)\n\t\tletters = extract_letters(word)\n\t\tcount = Hash.new(0)\n\t\tletters.each do |letter|\n\t\t\tcount[letter] += 1\n\t\tend\n\t\tcount\n\tend\n\n\tdef extract_letters(word)\n\t\tword.downcase.split('')\n\tend\nend	\N	\N	0	7	2014-06-25 07:32:30	2014-06-25 07:32:30	244	anagram.rb
523	23	ca082abc6a2fd4867bc09256	superseded	elixir	word-count	defmodule Words do\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> String.split(%r/\\W+/, trim: true)\n      |> count_words\n  end\n\n  defp count_words(words) do\n    Enum.reduce(words, HashDict.new, fn(word, tally) ->\n      HashDict.update(tally, word, 1, &(&1+1))\n    end)\n  end\nend	\N	\N	0	4	2014-03-05 01:09:43	2014-03-05 01:09:43	271	word-count.exs
81	27	3aeade877aa9d9a4efb3a329	superseded	haskell	sublist	module Sublist (Sublist(Equal, Sublist, Superlist, Unequal), sublist) where\n\nimport Data.List(tails, isPrefixOf)\n\ndata Sublist =\n  Equal | Sublist | Superlist | Unequal\n  deriving (Show, Eq)\n\nsublist :: Eq a => [a] -> [a] -> Sublist\nsublist xs ys\n  | xs == ys                       = Equal\n  | any (isPrefixOf xs) (tails ys) = Sublist\n  | any (isPrefixOf ys) (tails xs) = Superlist\n  | otherwise                      = Unequal	\N	\N	0	1	2014-07-18 20:55:19	2014-07-18 20:55:19	39	Sublist.hs
82	27	ee77e0eb86b83b63f86423bd	done	haskell	sublist	module Sublist (Sublist(Equal, Sublist, Superlist, Unequal), sublist) where\n\nimport Data.List(isInfixOf)\n\ndata Sublist =\n  Equal | Sublist | Superlist | Unequal\n  deriving (Show, Eq)\n\nsublist :: Eq a => [a] -> [a] -> Sublist\nsublist xs ys\n  | xs == ys          = Equal\n  | xs `isInfixOf` ys = Sublist\n  | ys `isInfixOf` xs = Superlist\n  | otherwise         = Unequal	2014-07-24 06:44:47	\N	0	2	2014-07-22 04:31:06	2014-07-22 04:31:06	39	Sublist.hs
83	27	5664fd48d99b595eb26f4a42	done	scala	bob	class Bob {\n  def hey(words: String) =\n    if (isSilence(words))\n      "Fine. Be that way!"\n    else if (isShouting(words))\n      "Woah, chill out!"\n    else if (isQuestion(words))\n      "Sure."\n    else\n      "Whatever."\n\n  private def isShouting(words: String) =\n    words.filter(c => c.isLetter) match {\n      case "" => false\n      case nonEmpty  => nonEmpty.forall(c => c.isUpper)\n    }\n\n  private def isQuestion(words: String) =\n    words.last == '?'\n\n  private def isSilence(words: String) =\n    words.trim.isEmpty\n}	2014-07-19 17:45:56	\N	0	1	2014-07-15 18:07:52	2014-07-15 18:07:52	40	bob.scala
84	27	7d470f557dd0bf53fdccb6db	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    (divisible_by?(4) && !divisible_by?(100)) || divisible_by?(400)\n  end\n\n  private\n\n  def divisible_by?(divisor)\n    (@year % divisor) == 0\n  end\nend	2014-07-26 22:58:27.334338	\N	0	1	2014-07-24 20:44:40	2014-07-24 20:44:40	41	leap.rb
85	27	8601723a3f85790d6abef258	superseded	go	leap	package leap\n\nimport (\n  "math"\n)\n\nfunc IsLeapYear(year int) bool {\n  return math.Mod(float64(year), 4) == 0 &&\n    !(math.Mod(float64(year), 100) == 0 && math.Mod(float64(year), 400) != 0)\n}	\N	\N	0	1	2014-07-15 21:45:51	2014-07-15 21:45:51	42	leap.go
86	27	09302d0ea81d43a5db5fff8b	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  return year % 400 == 0 ||\n    year % 4 == 0 && year % 100 != 0\n}	\N	\N	0	2	2014-07-23 03:49:01	2014-07-23 03:49:01	42	leap.go
87	27	33662fff070cb88a1d1949f8	done	go	leap	package leap\n\ntype Year int\n\nfunc IsLeapYear(y int) bool {\n  year := Year(y)\n\n  return year.DivisibleBy(4) && !year.DivisibleBy(100) ||\n    year.DivisibleBy(400)\n}\n\nfunc (y Year) DivisibleBy(n int) bool {\n  return int(y) % n == 0\n}	2014-07-26 22:58:27.358851	\N	0	3	2014-07-23 18:04:04	2014-07-23 18:04:04	42	leap.go
88	27	eb9d27954b989f221ff4a01f	pending	ruby	gigasecond	=begin\r\n  File: gigasecond.rb\r\n  Author: sherinom\r\n=end\r\n\r\nclass Gigasecond\r\n\r\n\tdef initialize(date)\r\n\t\t@date = date\r\n\tend\r\n\r\n\tdef date\r\n\t\t@date + 10**9 / (60 * 60 * 24)\r\n\tend\r\n\r\nend\r	\N	\N	0	1	2014-07-17 08:56:23	2014-07-17 08:56:23	43	gigasecond.rb
89	27	1c2c7975fb7a0e4cd7ee2df2	superseded	clojure	leap	(ns leap)\n\n(defn leap-year? [year]\n  (cond\n    (= (mod year 400) 0) true\n    (= (mod year 100) 0) false\n    (= (mod year 4)   0) true\n    :else false))	\N	\N	0	1	2014-07-16 10:54:04	2014-07-16 10:54:04	44	leap.clj
90	27	185985dbe487bb326164e523	pending	clojure	leap	(ns leap)\n\n(defn- divisible-by? [a b]\n  (zero? (mod a b)))\n\n(defn leap-year? [year]\n  (cond\n    (divisible-by? year 400) true\n    (divisible-by? year 100) false\n    (divisible-by? year 4)   true\n    :else false))	\N	\N	0	2	2014-07-19 11:53:08	2014-07-19 11:53:08	44	leap.clj
91	27	0853688410b70acf38995478	pending	ruby	grains	class Grains\n  def square(number)\n    return 2 ** (number - 1)\n  end\n  def total\n    return (2 ** 64) - 1 \n  end\nend	\N	\N	0	1	2014-07-22 06:27:01	2014-07-22 06:27:01	45	grains.rb
92	27	5c16963de040f9f7ddb9deab	done	haskell	bob	module Bob (responseFor) where\r\n\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor str \r\n    | all isUpper letters && \r\n      letters /= []   = "Woah, chill out!"\r\n    | all isSpace str = "Fine. Be that way!"\r\n    | last str == '?' = "Sure."\r\n    | otherwise       = "Whatever."\r\n    where letters = filter isLetter str	2014-07-26 22:58:27.48784	\N	0	2	2014-07-22 20:52:43	2014-07-22 20:52:43	46	bob.hs
93	27	d8bcf2a4c99c2154481eadf5	superseded	haskell	bob	module Bob (responseFor) where\r\n\r\nimport qualified Data.Text as T\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor str \r\n    | all isUpper letters && \r\n      letters /= []   = "Woah, chill out!"\r\n    | all isSpace str = "Fine. Be that way!"\r\n    | last str == '?' = "Sure."\r\n    | otherwise       = "Whatever."\r\n    where letters = filter isLetter str	\N	\N	0	1	2014-07-24 04:27:59	2014-07-24 04:27:59	46	bob.hs
143	45	140c5a36c10857f30530f981	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    chars1 = string1.chars\n    chars2 = string2.chars\n\n    merge = string1 <= string2 ? chars1.zip(chars2) : chars2.zip(chars1)\n\n    merge.select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend	\N	\N	0	7	2014-06-01 12:53:04	2014-06-01 12:53:04	73	hamming.rb
472	15	43cb8607ded17aab70cfb95d	pending	elixir	prime-factors	defmodule PrimeFactors do\n  @doc """\n  Compute the prime factors for 'number'.\n\n  The prime factors are prime numbers that when multiplied give the desired\n  number.\n\n  The prime factors of 'number' will be ordered lowest to highest.\n  """\n  @spec factors_for(pos_integer) :: [pos_integer]\n  def factors_for(number) do\n    do_factors(number, 2, []) |> Enum.reverse\n  end\n\n  defp do_factors(1, _, factors), do: factors\n  defp do_factors(number, divisor, factors) do\n    if rem(number, divisor) == 0 do\n      do_factors(div(number, divisor), divisor, [ divisor | factors ])\n    else\n      do_factors(number, divisor + 1, factors)\n    end\n  end\nend	\N	\N	0	1	2014-06-05 23:15:00	2014-06-05 23:15:00	245	prime_factors.exs
473	15	b82409cd9d49ac0728a4626b	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n    return (year % 4 == 0) && ( !(year % 100 == 0) || (year % 400 == 0) )\n}	\N	\N	0	1	2014-06-26 06:24:37	2014-06-26 06:24:37	246	leap.go
474	15	f326cca4a88b35ce1a980bc8	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn (year%4 == 0) && (!(year%100 == 0) || (year%400 == 0))\n}	\N	\N	0	2	2014-07-07 05:23:07	2014-07-07 05:23:07	246	leap.go
475	15	cec7d510c4768475c22176c0	pending	python	nucleotide-count	class DNA(object):\n\n    def __init__(self,strand):\n        self.strand=strand\n\n    def count(self,nuc):\n        if nuc not in "ATCG" + "U":\n            raise ValueError("{0} is not a nucleotide.".format(nuc) )\n        return self.strand.count( nuc )\n\n    def nucleotide_counts(self):\n        return dict( zip( "ATCG", [self.strand.count(c) for c in "ATCG"] ) )\n\n        	\N	\N	0	1	2014-07-11 20:25:41	2014-07-11 20:25:41	247	dna.py
476	15	53b2bbd04ad29362b584c84f	pending	python	etl	def transform(old):\n\treturn {word.lower(): sc for sc, words in old.iteritems() for word in words}	\N	\N	0	1	2014-06-30 05:42:09	2014-06-30 05:42:09	248	etl.py
524	23	f343135cec5b35e166883da5	pending	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) (output map[string]int) {\n    output = make(map[string]int)\n    for val, letters := range input {\n        for _, letter := range letters {\n            output[strings.ToLower(letter)] = val\n        }\n    }\n    return\n}	\N	\N	0	1	2014-01-13 21:15:42	2014-01-13 21:15:42	272	etl.go
94	27	8e50584286a1030862006b63	pending	haskell	beer-song	module Beer\n( sing\n, verse\n) where\n\nimport Data.Char (toLower)\n\nverse :: Int -> String\nverse n = unlines\n        [ bottle n ++ " of beer on the wall, " ++ map toLower (bottle n) ++ " of beer."\n        , if n > 0\n             then "Take " ++ (if n == 1 then "it" else "one") ++ " down and pass it around, " ++ map toLower (bottle (n-1)) ++ " of beer on the wall."\n             else "Go to the store and buy some more, 99 bottles of beer on the wall."\n        ]\n  where\n    bottle :: Int -> String\n    bottle k | k  > 1 = show k ++ " bottles"\n             | k == 1 = show k ++ " bottle"\n             | k  < 1 = "No more bottles"\n\nsing :: Int -> Int -> String\nsing m n = unlines (map verse [m,m-1..n])	\N	\N	0	1	2014-07-15 13:13:00	2014-07-15 13:13:00	47	Beer.hs
95	28	b8385cc80b682f6a2e08fe03	done	haskell	grade-school	module School where\n\nimport Data.Map.Strict (Map)\nimport Data.List (sort)\nimport qualified Data.Map.Strict as M\n\ntype Name = String\ntype Names = [Name]\ntype Grade = Int\ntype School = [(Grade, Names)] -- type for "external use"\ntype School' = Map Grade Names -- type for "internal use"\n\ninsertSorted :: Ord a => a -> [a] -> [a]\ninsertSorted a as = sort (a:as)\n\nempty :: School\nempty = []\n\n-- This is not needed right now, but might be handy\nempty' :: School'\nempty' = M.empty\n\nfromInt :: Int -> Grade\nfromInt i\n  | i > 0 = i\n  | otherwise = error "Grades are positive numbers"\n\ngrade :: Int -> School -> Names\ngrade i = wrap' $ grade' $ fromInt i\n\ngrade' :: Grade -> School' -> Names\ngrade' = M.findWithDefault []\n\n-- our internal structure is sorted at all times\nsorted :: School -> School\nsorted = id\n\n-- NB the type of the function argument to insertWith,\n--    (a -> a -> a), where a is from Map k a,\n--    thus we need to use [n] and head although we only\n--    insert one name\nadd' :: Grade -> Name -> School' -> School'\nadd' g n s = M.insertWith (insertSorted . head) g [n] s\n\nadd :: Grade -> Name -> School -> School\nadd i n = wrap $ add' (fromInt i) n\n\nwrap :: (School' -> School') -> (School -> School)\nwrap f = M.toList . f . M.fromList\n\nwrap' :: (School' -> a) -> (School -> a)\nwrap' f = f . M.fromList	2013-11-26 23:34:47	\N	0	1	2013-11-23 06:56:01	2013-11-23 06:56:01	48	School.hs
96	28	6c024644a8ed1f2c80de96b6	done	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = %w(A T C G U)\n  DNA_NUCLEOTIDES = %w(A T C G)\n\n  def initialize(dna_string)\n    @dna_string = dna_string if valid?(dna_string)\n  end\n\n  def count(a_symbol)\n    raise ArgumentError unless nucleotide?(a_symbol)\n    @dna_string.chars.reduce(0) do |count, a_nuc|\n      count+=1 if a_nuc == a_symbol\n      count\n    end\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.reduce({}) do |accu, nucleotide|\n      accu[nucleotide] = count(nucleotide)\n      accu\n    end\n  end\n\n  private\n  \n  def valid?(dna_string)\n    dna_string.chars.each{ |d| raise ArgumentError unless dna_nucleotide?(d) }\n  end\n\n  def dna_nucleotide?(a_symbol)\n    DNA_NUCLEOTIDES.include?(a_symbol)\n  end\n\n  def nucleotide?(a_symbol)\n    NUCLEOTIDES.include?(a_symbol)\n  end\n\n\nend	2014-02-27 11:29:35	\N	0	2	2014-02-25 05:58:03	2014-02-25 05:58:03	49	nucleotide-count.rb
97	28	60d06a705746b0a6d1bb52e3	superseded	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = %w(A T C G U)\n  DNA_NUCLEOTIDES = %w(A T C G)\n\n  def initialize(dna_string)\n    @dna_string = dna_string if valid?(dna_string)\n  end\n\n  def count(a_symbol)\n    raise ArgumentError unless nucleotide?(a_symbol)\n    @dna_string.chars.reduce(0) do |count, a_nuc|\n      count+=1 if a_nuc == a_symbol\n      count\n    end\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.reduce({}) do |accu, nucleotide|\n      accu[nucleotide] = count(nucleotide)\n      accu\n    end\n  end\n\n  private\n  def valid?(dna_string)\n    dna_string.chars.each{ |d| raise ArgumentError unless dna_nucleotide?(d) }\n  end\n\n  def dna_nucleotide?(a_symbol)\n    DNA_NUCLEOTIDES.include?(a_symbol)\n  end\n\n  def nucleotide?(a_symbol)\n    NUCLEOTIDES.include?(a_symbol)\n  end\n\n\nend	\N	\N	0	1	2014-03-26 04:32:18	2014-03-26 04:32:18	49	nucleotide-count.rb
98	28	da88a0738ffb61d40d726ab8	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isUpper, isAlpha, isSpace)\n\nresponseFor :: String -> String\nresponseFor q\n    | all isSpace q = "Fine. Be that way!"\n    | isShouting = "Woah, chill out!"\n    | last q == '?' = "Sure."\n  where\n    isShouting = case filter isAlpha q of\n        [] -> False\n        xs -> all isUpper xs\nresponseFor _ = "Whatever."	\N	\N	0	1	2014-02-02 23:49:52	2014-02-02 23:49:52	50	bob.hs
99	28	16eac0838834323a857c4f03	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isUpper, isAlpha, isSpace)\n\nresponseFor :: String -> String\nresponseFor q\n    | all isSpace q  = "Fine. Be that way!"\n    | isShouting     = "Woah, chill out!"\n    | last q  == '?' = "Sure."\n    | otherwise      = "Whatever."\n\n  where\n    isShouting = case filter isAlpha q of\n        [] -> False\n        xs -> all isUpper xs	\N	\N	0	2	2014-06-14 08:27:59	2014-06-14 08:27:59	50	bob.hs
100	28	663c479eeaa30ed628c259e9	done	ruby	robot-name	class Robot\n  def name\n    @name ||= initials + sequence\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n  def initials\n    [*'A'..'Z'].sample(2).join\n  end\n\n  def sequence\n    "#{ Random.rand(100..999) }"\n  end\nend	2013-12-30 18:18:36	\N	0	1	2013-12-20 18:55:48	2013-12-20 18:55:48	51	robot.rb
101	28	00629c4c65012b3730c32a56	done	clojure	bob	(ns bob)\n\n(defn uppercase? [s]\n  (-> x\n      (map #(Character/isUpperCase %))\n      (reduce +)))\n\n(defn response-for [x]\n  (let [last-letter (last x)]\n    (cond\n     (= last-letter "?") "Sure."\n     (= last-letter ".") "Whatever."\n     (uppercase? x) "Woah, chill out!"\n     :else "Fine, be that way.")))	2014-01-29 14:17:42	\N	0	3	2014-01-28 17:54:28	2014-01-28 17:54:28	52	bob.clj
102	28	4e3de646ae7e760890b294c9	superseded	clojure	bob	(ns bob)\n\n(defn response-for [x]\n  (cond\n   (= x "SHOUTING") "Woah, chill out!"\n   (= x "A question?") "Sure."\n   (= x "A statement.") "Whatever."\n   :else "Fine, be that way."))	\N	\N	0	1	2014-02-15 17:16:30	2014-02-15 17:16:30	52	bob.clj
103	28	aaef762ac6bd035f7b098fcd	superseded	clojure	bob	(ns bob)\n\n(defn response-for [x]\n  (cond\n   (= x "SHOUTING") "Woah, chill out!"\n   (= x "A question?") "Sure."\n   (= x "A statement.") "Whatever."\n   :else "Fine, be that way."))	\N	\N	0	2	2014-04-25 04:15:20	2014-04-25 04:15:20	52	bob.clj
104	30	6b6b39298e2a72daa472b5bb	done	python	bob	class Bob():\n    def hey(self, t):\n        if t.isupper():\n            return "Woah, chill out!"\n        elif len(t) > 0 and t[-1] == '?':\n            return "Sure."\n        elif len(t) == 0 or t.isspace():\n            return "Fine. Be that way!"\n        else:\n            return "Whatever."	2014-03-08 09:02:55	\N	0	1	2014-03-04 22:38:42	2014-03-04 22:38:42	53	bob.py
515	17	0dbd1e3a2070fe78c36f3741	pending	ruby	crypto-square	class Crypto\n\n  def initialize(str)\n    @text = str\n  end\n\n  def normalize_plaintext\n    @text.gsub(/\\W/,"").downcase\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan(/.{1,#{size}}/)\n  end\n\n  def ciphertext\n    size.times.with_object("") do |column, str|\n      plaintext_segments.each {|segment| str << segment[column] if segment[column]}\n    end\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(/.{1,5}/).join(" ")\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.size).ceil\n  end\nend	\N	\N	0	2	2014-06-01 19:44:28	2014-06-01 19:44:28	267	crypto.rb
144	45	9427a060511a754424e1db8b	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    chars1 = string1.chars\n    chars2 = string2.chars\n\n    merge = string1 <= string2 ? chars1.zip(chars2) : chars2.zip(chars1)\n\n    merge.select { |char1, char2| char1 != char2 }.count\n  end\nend	\N	\N	0	8	2014-06-15 04:57:06	2014-06-15 04:57:06	73	hamming.rb
105	32	3df08492c7a4ef98d65bac14	done	javascript	pascals-triangle	function Triangle(row) {\n    var rows = [];\n    for (var i = 1; i <= row; i++) {\n      var newRow = [];\n      for (var j = 1; j <= i; j++) {\n        if (j === 1 || j === i ) {\n          newRow.push(1);\n        }\n        else {\n          var element = rows[i-2][j-2] + rows[i-2][j-1];\n          newRow.push(element);\n        }\n      }\n      rows.push(newRow);\n    }\n\n    this.rows = rows;\n    this.lastRow = rows[rows.length-1];\n}	2014-05-04 11:50:02	\N	0	1	2014-04-25 17:29:56	2014-04-25 17:29:56	54	pascals-triangle_test.js
106	32	091ff4b5f01603927873ece7	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n}	\N	\N	0	1	2014-02-25 12:56:28	2014-02-25 12:56:28	55	leap.go
107	32	4fe0955b59fafd36c47bd7f0	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  return (everyFourthYear(year) && (!ifCentury(year) || EveryFourCenturies(year)));\n}\n\nfunc everyFourthYear(year int) bool {\n  return year % 4 == 0;\n}\n\nfunc ifCentury(year int) {\n  return year % 100 == 0;\n}\n\nfunc unless EveryFourthCentury(year int) {\n  return year % 400 == 0;\n}	\N	\N	0	2	2014-04-02 22:34:55	2014-04-02 22:34:55	55	leap.go
108	32	e4740e879f59fb581cd2f6f6	done	clojure	beer-song	(ns beer\n  (:use [clojure.string :only [join capitalize]]))\n\n(defn- beer\n  ([n] (beer n true))\n  ([n full]\n     (let [num (if (zero? n) "no more" n)\n           unit (if (= n 1) " bottle" " bottles")\n           wall (if full " on the wall" "")]\n       (str num unit " of beer" wall))))\n\n(defn- action\n  [n]\n  (if (zero? n)\n    "Go to the store and buy some more"\n    (let [pron (if (= n 1) "it" "one")]\n      (str "Take " pron " down and pass it around"))))\n\n(defn verse\n  [n]\n  (str\n   (capitalize (beer n))   ", " (beer n false) ".\\n"\n   (capitalize (action n)) ", " (beer (if (zero? n) 99 (dec n))) ".\\n"))\n\n(defn sing\n  ([from] (sing from 0))\n  ([from to]\n     (join (map #(str % "\\n") (map verse (range from (dec to) -1))))))	2014-03-01 04:34:53	\N	0	1	2014-02-26 17:05:42	2014-02-26 17:05:42	56	beer-song.clj
109	32	3cda16c326081a77f0ef0f8c	done	ruby	word-count	class String\n  def words\n    scan(/\\w+/)\n  end\nend\n\nmodule Aggregatable\n  def frequency_by\n    return enum_for __callee__ unless block_given?\n\n    each_with_object(Hash.new(0)){ |w, counts|\n      category = yield(w)\n      counts[category] += 1\n    }\n  end\nend\n\nclass Phrase\n  def initialize(raw_string)\n    @_words = normalize(raw_string).words\n  end\n\n  def word_count\n    @word_count ||= words.extend(Aggregatable).frequency_by{ |w| w }\n    @word_count.dup\n  end\n\n  def words\n    @_words.dup\n  end\n\n  private\n  def normalize(s)\n    s.downcase\n  end\nend	2014-04-19 21:36:46	\N	0	2	2014-04-11 13:44:39	2014-04-11 13:44:39	57	word-count.rb
110	32	74be43abb1eea60dcb40126f	superseded	ruby	word-count	module ExtendedEnumerable\n  def frequency_by(&block)\n    return enum_for __callee__ unless block_given?\n\n    each_with_object(Hash.new(0)){ |w, counts| counts[yield w] += 1 }\n  end\nend\n\nclass Phrase\n  def initialize(phrase)\n    @phrase = phrase.downcase\n  end\n\n  def word_count\n    @word_count ||= words.extend(ExtendedEnumerable).frequency_by{ |w| w }\n    @word_count.dup\n  end\n\n  def words\n    phrase.scan(/\\w+/)\n  end\n\n  def to_s\n    phrase.dup\n  end\n\n  private\n  attr_reader :phrase\nend	\N	\N	0	1	2014-05-24 01:33:49	2014-05-24 01:33:49	57	word-count.rb
111	32	ae1698f6e179bff35a2076a8	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\toutput := make(map[string]int)\n\tfor k, v := range input {\n\t\tfor _, s := range v {\n\t\t\toutput[strings.ToLower(s)] = k\n\t\t}\n\t}\n\treturn output\n}	\N	\N	0	1	2014-03-04 02:17:46	2014-03-04 02:17:46	58	etl.go
112	32	6f3342c194df16472bf257d9	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\toutput := map[string]int{}\n\tfor score, letters := range input {\n\t\tfor _, letter := range letters {\n\t\t\toutput[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn output\n}	2014-03-13 06:39:12	\N	0	3	2014-03-11 01:08:11	2014-03-11 01:08:11	58	etl.go
113	32	89c73bc018a8a6987c17dc4b	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n\toutput := make(map[string]int)\n\tfor score, letters := range input {\n\t\tfor _, letter := range letters {\n\t\t\toutput[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn output\n}	\N	\N	0	2	2014-04-12 04:57:58	2014-04-12 04:57:58	58	etl.go
114	32	c7f8f5ce95661d9cf014b7af	done	ruby	gigasecond	class Gigasecond\n  attr_reader :date\n  class << self\n    def from(date)\n      new(date)\n    end\n  end\n\n  def initialize(date)\n    @date = date + (10**9  / 86400)\n  end\n\nend	2014-04-13 09:03:59	\N	0	1	2014-04-10 11:14:36	2014-04-10 11:14:36	59	gigasecond.rb
115	37	e22f6a999a94957037c0338f	done	ruby	bob	class Bob\n\tdef hey(words)\n\t\tif words.eql?(words.downcase)\n\t\t\twords.capitalize!\n\t\tend\n\t\tif (words.strip.length == 0)\n\t\t\t"Fine. Be that way!"\n\t\telsif words.eql?(words.downcase) != words.eql?(words.upcase)\n\t\t\t"Woah, chill out!"\n\t\telsif words.end_with?("?")\n\t\t\t"Sure."\n\t\telse\n\t\t\t"Whatever."\n\t\tend\t\t\t\n\tend\nend	2013-12-30 17:44:21	\N	0	1	2013-12-20 22:13:23	2013-12-20 22:13:23	60	bob.rb
116	37	923805c33640173373fe0ef5	superseded	javascript	word-count	function Words(input) {\n  this.count = {};\n\n  this._normalizedWords = input.\n    toLowerCase().\n    replace(/[^\\w\\s]/g, '').\n    split(/\\s+/);\n\n  function countWords(word) {\n    this.count[word] ? this.count[word] += 1 : this.count[word] = 1\n  };\n\n  this._normalizedWords.forEach(countWords.bind(this));\n};\n\nmodule.exports = Words	\N	\N	0	2	2013-11-12 16:39:58	2013-11-12 16:39:58	61	word-count.js
117	37	af09e1a7916b3f740848b53b	superseded	javascript	word-count	function Words(input) {\n  this.count = {};\n\n  this._normalizedWords = input.toLowerCase().replace(/[^\\w\\s]/g, '').split(/\\s+/);\n\n  this._countWords = function() {\n    for (var i = 0; i < this._normalizedWords.length; i++) {\n      var word = this._normalizedWords[i];\n\n      this.count[word] ? this.count[word] += 1 : this.count[word] = 1\n    }\n  };\n\n  this._countWords();\n};\n\nmodule.exports = Words	\N	\N	0	1	2014-01-07 21:33:01	2014-01-07 21:33:01	61	word-count.js
118	37	42a7f0471cbd7638216f2e90	done	javascript	word-count	function Words(input) {\n  this.count = {};\n\n  this._normalizedWords = input.toLowerCase().match(/\\w+/g);\n\n  function countWords(word) {\n    this.count.hasOwnProperty(word) ? this.count[word] += 1 : this.count[word] = 1\n  };\n\n  this._normalizedWords.forEach(countWords.bind(this));\n};\n\nmodule.exports = Words	2014-04-11 02:35:48	\N	0	3	2014-04-03 06:37:39	2014-04-03 06:37:39	61	word-count.js
126	37	d3d2be78c95660352b9ac450	superseded	haskell	robot-name	module Robot( robotName, mkRobot, resetName ) where\nimport System.Random( randomRIO )\nimport Data.IORef( newIORef, readIORef, writeIORef, IORef )\n\nnewtype Robot = Robot (IORef String)\n  \nmkRobot :: IO Robot\nmkRobot = mkName >>= newIORef >>= return . Robot \n\nresetName :: Robot -> IO ()\nresetName (Robot r) = mkName >>= writeIORef r\n\nrobotName :: Robot -> IO String\nrobotName (Robot r) = readIORef r\n\nmkName :: IO String\nmkName = mapM randomRIO $ ('A', 'Z') ** 2 ++ ('0', '9') ** 3\n  where\n    l ** n = replicate n l	\N	\N	0	3	2014-04-20 02:44:59	2014-04-20 02:44:59	65	Robot.hs
477	15	c80b9b4997c5fe02adb1cadb	pending	ruby	octal	class Octal\n  def initialize(number)\n    @number = number.to_s\n  end\n\n  def to_decimal\n    return 0 if @number.empty? || @number.match(/[^0-7]/)\n    reversed_numbers = @number.reverse.chars.map(&:to_i)\n    sum = 0\n    reversed_numbers.each_with_index do |number, index|\n      sum += number * (8 ** index)\n    end\n    sum\n  end\nend	\N	\N	0	1	2014-07-15 08:05:54	2014-07-15 08:05:54	249	octal.rb
119	37	6e80cbd3819d3f6d241a8251	done	coffeescript	luhn	# 8631\nclass Luhn\n  constructor: (number)->\n    @splitNum = (parseInt n for n in (""+number).split(""))\n    @checkDigit = @splitNum[@splitNum.length - 1]\n    @addends = @doubleEven(@splitNum.reverse())\n    @checksum = @addends.reduce (t, s) -> t + s\n    @valid = @checksum % 10 == 0 \n \n\n  doubleEven: (splitNum) ->\n    doubleArr = []\n    for n,i in splitNum\n      if (i + 1) % 2 == 0\n        if n * 2 < 10 \n          doubleArr.push n * 2\n        else \n          doubleArr.push n * 2 - 9\n      else \n        doubleArr.push n \n    doubleArr.reverse()  \n\n  @create = (number) ->\n    finalNumber = number * 10\n    luhnNumber = new Luhn(finalNumber)\n    index = 0\n\n    while(!luhnNumber.valid)\n      finalNumber = number * 10 + index\n      luhnNumber = new Luhn(finalNumber)\n      break if luhnNumber.valid\n      index += 1\n\n    finalNumber            \n\n\nmodule.exports = Luhn	2014-01-16 19:21:48	\N	0	1	2014-01-12 10:42:20	2014-01-12 10:42:20	62	luhn.coffee
120	37	c1c5100086b8ba41f317cd1f	done	javascript	grade-school	function Scholl(name) {\n  this.name = name;\n  this._db = {};\n}\n\nScholl.prototype.add = function(name, grade) {\n  this._db[grade] || (this._db[grade] = []);\n  this._db[grade].push(name);\n}\n\nScholl.prototype.grade = function(grade) {\n  return this._db[grade] || [];\n}\n\nScholl.prototype.sort = function() {\n  var keys = Object.keys(this._db).sort();\n  var result = {};\n  while (keys.length) {\n    result[keys[0]] = this._db[keys.shift()].sort();\n  }\n  return result;\n}\n\nObject.defineProperty(Scholl.prototype, 'db', {\n  get: function() {\n    return this._db;\n  }\n});\n\nmodule.exports = Scholl;	2013-11-22 06:58:42	\N	0	2	2013-11-12 16:56:04	2013-11-12 16:56:04	63	grade-school.js
121	37	ac75be22bf88a5332eb93eb6	superseded	javascript	grade-school	function Scholl(name) {\n  this.name = name;\n  this.db = {};\n}\n\nScholl.prototype.add = function(name, grade) {\n  this.db[grade] || (this.db[grade] = []);\n  this.db[grade].push(name);\n}\n\nScholl.prototype.grade = function(grade) {\n  return this.db[grade] || [];\n}\n\nScholl.prototype.sort = function() {\n  var keys = Object.keys(this.db).sort();\n  var result = {};\n  while (keys.length) {\n    result[keys[0]] = this.db[keys.shift()].sort();\n  }\n  return result;\n}\n\nmodule.exports = Scholl;	\N	\N	0	1	2014-01-02 15:03:24	2014-01-02 15:03:24	63	grade-school.js
122	37	135d8b7bbec85e9e31874774	done	clojure	bob	(ns bob\n  (:require [clojure.string :as str]))\n\n(defn yelling?\n  "Is this considered yelling?"\n  [s]\n  (and\n   (some #(Character/isUpperCase %) s)\n   (= (str/upper-case s) s)))\n\n(defn response-for\n "Bob's responses"\n [s]\n (cond\n  (yelling? s) "Woah, chill out!"\n  (= \\? (last s)) "Sure."\n  (str/blank? s) "Fine. Be that way!"\n  :else "Whatever."))	2013-11-20 09:12:44	\N	0	1	2013-11-15 14:21:54	2013-11-15 14:21:54	64	bob.clj
123	37	a95f22b8c280f5fda573bfc6	superseded	haskell	robot-name	module Robot( robotName, mkRobot, resetName ) where\nimport System.Random( randomRIO )\nimport Data.IORef( newIORef, readIORef, writeIORef, IORef )\n\nnewtype Robot = Robot (IORef String)\n  \nmkRobot :: IO Robot\nmkRobot = do \n  n <- mkName\n  r <- newIORef n\n  return (Robot r)\n\nresetName :: Robot -> IO ()\nresetName (Robot r) = do\n  n <- mkName\n  writeIORef r n  \n\nrobotName :: Robot -> IO String\nrobotName (Robot r) = readIORef r\n\nmkName :: IO String\nmkName = sequence [rC, rC, rD, rD, rD]\n    where\n      rC = randomRIO ('A', 'Z')\n      rD = randomRIO ('0', '9')	\N	\N	0	1	2014-02-17 19:15:18	2014-02-17 19:15:18	65	Robot.hs
124	37	57dc6021247bf21879a6cc56	done	haskell	robot-name	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Robot( robotName, mkRobot, resetName ) where\nimport System.Random( randomRIO )\nimport Data.IORef( newIORef, readIORef, writeIORef, IORef )\n\nnewtype Robot = Robot (IORef String)\n  \nmkRobot :: IO Robot\nmkRobot = mkName >>= newIORef >>= return . Robot \n\nresetName :: Robot -> IO ()\nresetName (Robot r) = mkName >>= writeIORef r\n\nrobotName :: Robot -> IO String\nrobotName (Robot r) = readIORef r\n\nmkName :: IO String\nmkName = mapM randomRIO $ ('A', 'Z') .* 2 ++ ('0', '9') .* 3\n  where\n    (.*) = flip replicate	2014-03-23 22:55:36	\N	0	4	2014-03-20 01:03:04	2014-03-20 01:03:04	65	Robot.hs
125	37	4dec033600483f9198bef197	superseded	haskell	robot-name	module Robot( robotName, mkRobot, resetName ) where\nimport System.Random( randomRIO )\nimport Data.IORef( newIORef, readIORef, writeIORef, IORef )\n\nnewtype Robot = Robot (IORef String)\n  \nmkRobot :: IO Robot\nmkRobot = mkName >>= newIORef >>= return . Robot \n\nresetName :: Robot -> IO ()\nresetName (Robot r) = mkName >>= writeIORef r\n\nrobotName :: Robot -> IO String\nrobotName (Robot r) = readIORef r\n\nmkName :: IO String\nmkName = sequence . map randomRIO $\n           replicate 2 ('A', 'Z') ++ replicate 3 ('0', '9')	\N	\N	0	2	2014-04-06 02:29:25	2014-04-06 02:29:25	65	Robot.hs
496	15	34102c6976199166fd6d1ba6	superseded	ruby	raindrops	class Raindrops\r\n\r\n  def convert(number)\r\n    pling = plingify(number)\r\n    plang = plangify(number)\r\n    plong = plongify(number)\r\n\r\n    if pling || plang || plong\r\n      "#{pling}#{plang}#{plong}"\r\n    else\r\n      number.to_s\r\n    end\r\n  end\r\n\r\n  def plingify(number)\r\n    pling = nil\r\n    if number % 3 == 0\r\n      "Pling"\r\n    end\r\n  end\r\n\r\n  def plangify(number)\r\n    plang = nil\r\n    if number % 5 == 0\r\n      "Plang"\r\n    end\r\n  end\r\n\r\n  def plongify(number)\r\n    plong = nil\r\n    if number % 7 == 0 \r\n      "Plong"\r\n    end\r\n  end\r\n\r\nend	\N	\N	0	5	2014-06-23 01:21:29	2014-06-23 01:21:29	257	raindrops.rb
497	15	f68d09e20a54251823d46c55	superseded	ruby	raindrops	class Raindrops\r\n\r\n  def convert(number)\r\n    pling = plingify(number)\r\n    plang = plangify(number)\r\n    plong = plongify(number)\r\n\r\n    if pling || plang || plong\r\n      "#{pling}#{plang}#{plong}"\r\n    else\r\n      number.to_s\r\n    end\r\n  end\r\n\r\n  def plingify(number)\r\n    if number % 3 == 0\r\n      "Pling"\r\n    end\r\n  end\r\n\r\n  def plangify(number)\r\n    if number % 5 == 0\r\n      "Plang"\r\n    end\r\n  end\r\n\r\n  def plongify(number)\r\n    if number % 7 == 0 \r\n      "Plong"\r\n    end\r\n  end\r\n\r\nend	\N	\N	0	6	2014-06-26 02:57:22	2014-06-26 02:57:22	257	raindrops.rb
498	15	27407c68b934bf0ee86e1419	pending	ruby	raindrops	class Raindrops\r\n\r\n  def convert(number)\r\n    raindrop_sound = plingify(number) + plangify(number) + plongify(number)\r\n    if raindrop_sound.length > 0\r\n      raindrop_sound\r\n    else\r\n      number.to_s\r\n    end\r\n  end\r\n\r\n  def plingify(number)\r\n    if number % 3 == 0\r\n      "Pling"\r\n    else\r\n      ""\r\n    end\r\n  end\r\n\r\n  def plangify(number)\r\n    if number % 5 == 0\r\n      "Plang"\r\n    else\r\n      ""\r\n    end\r\n  end\r\n\r\n  def plongify(number)\r\n    if number % 7 == 0 \r\n      "Plong"\r\n    else\r\n      ""\r\n    end\r\n  end\r\n\r\nend	\N	\N	0	7	2014-07-20 13:00:02	2014-07-20 13:00:02	257	raindrops.rb
499	15	bacad112b9aa32629be36e76	pending	scala	leap	class Year(y:Int) {\n  def isLeap = Seq(4, 100, 400).map(y % _) match {\n    case Seq(0, 0, 0) => true\n    case Seq(0, 0, _) => false\n    case Seq(0, _, _) => true\n    case _ => false\n  }\n}\n\nobject Year {\n  def apply(y: Int) = new Year(y)\n}	\N	\N	0	1	2014-06-18 17:22:40	2014-06-18 17:22:40	258	year.scala
516	17	9b8c62e110d9d2d3c8f7f8d8	pending	haskell	prime-factors	{-# LANGUAGE BangPatterns #-}\nmodule PrimeFactors (primeFactors) where\n\nprimeFactors :: Integer -> [Integer]\nprimeFactors = primeFactors' 2\n    where\n        nextOdd 2 = 3\n        nextOdd !x = x + 2\n        primeFactors' _ 1 = []\n        primeFactors' divider !x\n            | x `mod` divider == 0 = divider : primeFactors' divider (x `div` divider)\n            | otherwise = primeFactors' (nextOdd divider) x	\N	\N	0	1	2014-06-04 07:33:28	2014-06-04 07:33:28	268	prime-factors.hs
127	39	8d717778571e68e8a5c07ac9	done	ruby	beer-song	class Beer\n  attr_accessor :bottle_count\n\n  def sing(first, last=0)\n    first.downto(last).inject("") do |memo, num|\n      memo << verse(num) + "\\n"\n    end\n  end\n\n  def verse(num)\n    @bottle_count = num\n    [line1, line2, action, remaining_bottles].join()\n  end\n\nprivate\n  def line1\n    pluralize_bottles(bottle_count).capitalize + " of beer on the wall, "\n  end\n\n  def line2\n    pluralize_bottles(bottle_count) + " of beer.\\n"\n  end\n\n  def action\n    if bottle_count == 0\n      "Go to the store and buy some more, "\n    else\n      "Take #{humanize_bottles} down and pass it around, "\n    end\n  end\n\n  def remaining_bottles\n    reset_bottles if bottle_count == 0\n    "#{pluralize_bottles(bottle_count-1)} of beer on the wall.\\n"\n  end\n\n  def reset_bottles\n    @bottle_count = 100\n  end\n\n  def humanize_bottles\n    bottle_count == 1 ? 'it' : 'one'\n  end\n\n  def pluralize_bottles(count)\n    if count == 0\n      "no more bottles"\n    elsif count == 1\n      "1 bottle"\n    else\n      "#{count} bottles"\n    end\n  end\n\n\nend	2014-03-28 08:48:36	\N	0	3	2014-03-23 08:39:40	2014-03-23 08:39:40	66	beer-song.rb
128	39	e95e87121484b7c265c8077a	superseded	ruby	beer-song	class Beer\n\n  def sing(first, last=0)\n    s = ""\n    first.downto(last).each do |number|\n      s << verse(number)\n      s << "\\n"\n    end\n    s\n  end\n\n  def verse(number)\n    s = ""\n    s << pluralize_bottles(number).capitalize + " of beer on the wall, "\n    s << pluralize_bottles(number) + " of beer.\\n"\n    s << action(number)\n    s << remaining_bottles(number)\n  end\n\nprivate\n  def action(number)\n    if number == 0\n      "Go to the store and buy some more, "\n    else\n      "Take #{number ==1 ? 'it' : 'one'} down and pass it around, "\n    end\n  end\n\n  def remaining_bottles(number)\n    number = 100 if number == 0\n    "#{pluralize_bottles(number-1)} of beer on the wall.\\n"\n  end\n\n\n  def pluralize_bottles(number)\n    if number == 0\n      "no more bottles"\n    elsif number == 1\n      "1 bottle"\n    else\n      "#{number} bottles"\n    end\n  end\n\n\nend	\N	\N	0	1	2014-06-28 23:24:31	2014-06-28 23:24:31	66	beer-song.rb
129	39	6e1ac263c284d8f426825229	superseded	ruby	beer-song	class Beer\n  attr_accessor :bottle_count\n\n  def sing(first, last=0)\n    s = ""\n    first.downto(last).each do |num|\n      s << verse(num)\n      s << "\\n"\n    end\n    s\n  end\n\n  def verse(num)\n    @bottle_count = num\n    [line1, line2, action, remaining_bottles].inject("") do |memo, word|\n      memo << word\n    end\n  end\n\n  def line1\n    pluralize_bottles(bottle_count).capitalize + " of beer on the wall, "\n  end\n\n  def line2\n    pluralize_bottles(bottle_count) + " of beer.\\n"\n  end\n\n  def action\n    if bottle_count == 0\n      "Go to the store and buy some more, "\n    else\n      "Take #{humanize_bottles} down and pass it around, "\n    end\n  end\n\n  def remaining_bottles\n    reset_bottles if bottle_count == 0\n    "#{pluralize_bottles(bottle_count-1)} of beer on the wall.\\n"\n  end\n\nprivate\n\n  def reset_bottles\n    @bottle_count = 100\n  end\n\n  def humanize_bottles\n    bottle_count == 1 ? 'it' : 'one'\n  end\n\n  def pluralize_bottles(count)\n    if count == 0\n      "no more bottles"\n    elsif count == 1\n      "1 bottle"\n    else\n      "#{count} bottles"\n    end\n  end\n\n\nend	\N	\N	0	2	2014-07-10 17:28:11	2014-07-10 17:28:11	66	beer-song.rb
130	39	65c7a8c57434ce05be595ee6	done	csharp	leap	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace LeapTest\r\n{\r\n    class Year\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n        }\r\n\r\n        public static bool IsLeap(int yearIn)\r\n        {\r\n            if (yearIn < 0)\r\n            {\r\n                return false; \r\n            }\r\n            if (yearIn % 100 == 0)\r\n            {\r\n                return yearIn % 400 == 0; \r\n            }\r\n            return yearIn % 4 == 0; \r\n        }\r\n    }\r\n}\r	2014-05-21 08:15:19	\N	0	1	2014-05-14 11:54:45	2014-05-14 11:54:45	67	Year.cs
131	39	303118aca2d23c515662b131	pending	elixir	phone-number	defmodule Phone do\n  def number(dirty_number) do\n    dirty_number |> clean |> validate\n  end\n\n  def clean(dirty_number) do\n    Regex.replace(%r/[^\\d]+/, dirty_number, "")\n  end\n\n  def validate(number) do\n    cond do\n      String.length(number) == 10 \n        -> number\n      String.length(number) == 11 && \n        String.starts_with?(number, "1") \n        -> String.slice(number, 1, 10) \n      true \n        -> "0000000000"\n    end\n  end\n\n  def area_code(dirty_number) do\n    number(dirty_number) |> String.slice(0, 3)\n  end\n\n  def exchange(dirty_number) do\n    number(dirty_number) |> String.slice(3, 3)\n  end\n\n  def subscriber(dirty_number) do\n    number(dirty_number) |> String.slice(6, 4)\n  end\n\n  def pretty(number) do\n    "(#{area_code(number)}) #{exchange(number)}-#{subscriber(number)}"\n  end\nend	\N	\N	0	1	2014-03-20 02:09:31	2014-03-20 02:09:31	68	phone-number.exs
132	39	9b9131d30ec2ef74f9aee4a8	done	javascript	robot-name	var Robot = function(){\n  var possibleLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n  var possibleNumbers = "1234567890"\n  var robotName = ""\n  var createNameLetter = function(){\n    return possibleLetters.charAt(Math.floor(Math.random() * possibleLetters.length));\n  }\n  var createNameNumber = function(){\n    return possibleNumbers.charAt(Math.floor(Math.random() * possibleNumbers.length));\n  }\n  var createName = function(){\n    return robotName + createNameLetter() + createNameLetter() + createNameNumber() + createNameNumber() + createNameNumber();\n  }\n  this.name = createName();\n}\n\nRobot.prototype.reset = function(){\n  this.name = new Robot();\n}	2014-05-15 02:23:48	\N	0	1	2014-05-05 19:05:50	2014-05-05 19:05:50	69	robot-name.js
133	39	c1160c718be738d4942c0bba	superseded	ruby	house	class House\n\n  def verse(line_number)\n    "This is #{generate_verse(line_number-1)}.\\n"\n  end\n\n  def verses(start_line, end_line)\n    start_line.upto(end_line).inject("") do |memo, line_number|\n      memo += "#{verse(line_number)}\\n"\n    end\n  end\n\n  private\n\n  def generate_verse(line_number)\n    rhyme = "the #{rhymes[line_number].first} that #{rhymes[line_number].last}"\n    if line_number == 0\n      rhyme\n    else\n      rhyme += " #{generate_verse(line_number-1)}"\n    end\n  end\n\n  def rhymes\n    [\n      ['house', 'Jack built'],\n      ['malt', 'lay in'],\n      ['rat', 'ate'],\n      ['cat', 'killed'],\n      ['dog', 'worried'],\n      ['cow with the crumpled horn', 'tossed'],\n      ['maiden all forlorn', 'milked'],\n      ['man all tattered and torn', 'kissed'],\n      ['priest all shaven and shorn', 'married'],\n      ['rooster that crowed in the morn', 'woke'],\n      ['farmer sowing his corn', 'kept'],\n      ['horse and the hound and the horn', 'belonged to']\n    ]\n  end\nend	\N	\N	0	2	2014-02-21 22:11:04	2014-02-21 22:11:04	70	house.rb
146	45	84ae7f1664b8173d7a600f53	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand1, strand2)\n    strand1.chars.zip(strand2.chars).select { |char1, char2| char1 && char2 && char1 != char2 }.count\n  end\nend	\N	\N	0	1	2014-07-16 08:02:51	2014-07-16 08:02:51	73	hamming.rb
500	15	efc40b0d7488018ef15d2aae	pending	javascript	binary-search-tree	function Bst(data) {\n    this.data = data;\n\n    this.insert = function(data) {\n        if (data <= this.data) {\n            if (this.left) {\n                this.left.insert(data);\n            } else {\n                this.left = new Bst(data);\n            }\n        } else {\n            if (this.right) {\n                this.right.insert(data);\n            } else {\n                this.right = new Bst(data);\n            }\n        }\n    };\n\n    this.each = function(fun) {\n        if (this.left) {\n            this.left.each(fun);\n        }\n        fun(this.data);\n        if (this.right) {\n            this.right.each(fun);\n        }\n    };\n}\n\nmodule.exports = Bst;	\N	\N	0	1	2014-05-29 07:29:38	2014-05-29 07:29:38	259	binary-search-tree.js
134	39	f0a35b5ee38bb8ec58f0ecaa	superseded	ruby	house	class House\n\n  def initialize\n    reset_rhyme\n  end\n\n  def verse(line_number)\n    if line_number == 0\n      @rhyme += ".\\n"\n      return @rhyme\n    end\n    @rhyme += " the #{rhymes[line_number-1].first} that #{rhymes[line_number-1].last}"\n    verse(line_number-1)\n  end\n\n  def verses(start_line, end_line)\n    start_line.upto(end_line).inject("") do |memo, line_number|\n      reset_rhyme\n      memo += "#{verse(line_number)}\\n"\n    end\n  end\n\n  private\n\n  def reset_rhyme\n    @rhyme = "This is"\n  end\n\n  def rhymes\n    [\n      ['house', 'Jack built'],\n      ['malt', 'lay in'],\n      ['rat', 'ate'],\n      ['cat', 'killed'],\n      ['dog', 'worried'],\n      ['cow with the crumpled horn', 'tossed'],\n      ['maiden all forlorn', 'milked'],\n      ['man all tattered and torn', 'kissed'],\n      ['priest all shaven and shorn', 'married'],\n      ['rooster that crowed in the morn', 'woke'],\n      ['farmer sowing his corn', 'kept'],\n      ['horse and the hound and the horn', 'belonged to']\n    ]\n  end\nend	\N	\N	0	1	2014-03-20 02:41:14	2014-03-20 02:41:14	70	house.rb
135	39	5c34ab0adbceb9d433dbc56b	superseded	ruby	house	class House\n\n  def verse(line_number)\n    "This is #{generate_verse(line_number-1)}.\\n"\n  end\n\n  def verses(start_line, end_line)\n    start_line.upto(end_line).inject("") do |memo, line_number|\n      memo + verse(line_number) + "\\n"\n    end\n  end\n\n  private\n\n  def generate_verse(line_number)\n    rhyme = "the #{rhymes[line_number].first} that #{rhymes[line_number].last}"\n    if line_number == 0\n      rhyme\n    else\n      rhyme + " " + generate_verse(line_number-1)\n    end\n  end\n\n  def rhymes\n    [\n      ['house', 'Jack built'],\n      ['malt', 'lay in'],\n      ['rat', 'ate'],\n      ['cat', 'killed'],\n      ['dog', 'worried'],\n      ['cow with the crumpled horn', 'tossed'],\n      ['maiden all forlorn', 'milked'],\n      ['man all tattered and torn', 'kissed'],\n      ['priest all shaven and shorn', 'married'],\n      ['rooster that crowed in the morn', 'woke'],\n      ['farmer sowing his corn', 'kept'],\n      ['horse and the hound and the horn', 'belonged to']\n    ]\n  end\nend	\N	\N	0	3	2014-05-15 20:38:22	2014-05-15 20:38:22	70	house.rb
136	39	230fed721ec80c6f0798fe31	pending	ruby	house	class House\n\n  def verse(line_number)\n    "This is #{generate_verse(line_number-1)}.\\n"\n  end\n\n  def verses(start_line, end_line)\n    start_line.upto(end_line).map do |line_number|\n      verse(line_number) + "\\n"\n    end.join\n  end\n\n  private\n\n  def generate_verse(line_number)\n    rhyme = "the #{rhymes[line_number].first} that #{rhymes[line_number].last}"\n    if line_number == 0\n      rhyme\n    else\n      rhyme + " " + generate_verse(line_number-1)\n    end\n  end\n\n  def rhymes\n    [\n      ['house', 'Jack built'],\n      ['malt', 'lay in'],\n      ['rat', 'ate'],\n      ['cat', 'killed'],\n      ['dog', 'worried'],\n      ['cow with the crumpled horn', 'tossed'],\n      ['maiden all forlorn', 'milked'],\n      ['man all tattered and torn', 'kissed'],\n      ['priest all shaven and shorn', 'married'],\n      ['rooster that crowed in the morn', 'woke'],\n      ['farmer sowing his corn', 'kept'],\n      ['horse and the hound and the horn', 'belonged to']\n    ]\n  end\nend	\N	\N	0	4	2014-06-14 22:22:48	2014-06-14 22:22:48	70	house.rb
137	39	89626d498c1279c3220dd46b	superseded	elixir	anagram	defmodule Anagram do\n\n\tdef match(word, candidates) do\n\t\tEnum.filter candidates, &anagrams?(&1, word)\n\tend\n\n\tdefp anagrams?(word1, word2) do\n\t\tdifferents?(word1, word2) && letters_of(word1) == letters_of(word2)\n\tend\n\n\tdefp differents?(word1, word2), do: String.downcase(word1) != String.downcase(word2)\n\tdefp letters_of(word), do: String.downcase(word) |> String.codepoints |> Enum.sort\n\nend	\N	\N	0	1	2014-07-09 03:35:29	2014-07-09 03:35:29	71	anagram.exs
138	39	8896d9b2f5b12d9704506938	done	elixir	anagram	defmodule Anagram do\n\n\tdef match(word, candidates) do\n\t\tEnum.filter candidates, anagram_of?(word)\n\tend\n\n\tdefp anagram_of?(word) do\n\t\t&anagrams?(String.downcase(&1), String.downcase(word))\n\tend\n\n\tdefp anagrams?(word1, word2) when word1 == word2, do: false\n\tdefp anagrams?(word1, word2), do: letters_of(word1) == letters_of(word2)\n\n\tdefp letters_of(word), do: String.codepoints(word) |> Enum.sort\n\nend	2014-07-16 08:47:23	\N	0	2	2014-07-09 12:38:42	2014-07-09 12:38:42	71	anagram.exs
139	43	4fe588e8510acb287bfe66fe	pending	csharp	hamming	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace hamming\r\n{\r\n    public class Hamming\r\n    {\r\n        public static int Compute(string a, string b)\r\n        {\r\n            var differenceCounter = 0;\r\n            for (var i = 0; i < ShortestLengthString(a, b); i++)\r\n            {\r\n                if (a[i] != b[i])\r\n                {\r\n                    differenceCounter++;\r\n                }\r\n            }\r\n            return differenceCounter;\r\n        }\r\n\r\n        private static int ShortestLengthString(params string[] strings)\r\n        {\r\n            return strings.Select(s => s.Length).Min();\r\n        }\r\n    }\r\n}\r	\N	\N	0	1	2014-07-25 07:31:28	2014-07-25 07:31:28	72	Hamming.cs
140	45	578630ba0de4de5f1587d7ac	superseded	ruby	hamming	require 'pry'\n\nclass Hamming\n\n  def self.compute(string1, string2)\n    strand1 = Strand.new(string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    nucleotide.nil? || @char == nucleotide.char\n  end\nend	\N	\N	0	2	2014-05-01 03:56:50	2014-05-01 03:56:50	73	hamming.rb
141	45	aa9370c7c8d931e212a9cdab	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    strand1 = Strand.new(string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    nucleotide.nil? || @char == nucleotide.char\n  end\nend	\N	\N	0	3	2014-05-25 03:15:33	2014-05-25 03:15:33	73	hamming.rb
142	45	e93dd9138e4a0c09eb88b6a0	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    strand1 = Strand.new(string1)\n    strand2 = Strand.new(string2)\n\n    merge = string1 <= string2 ? strand1.zip(strand2) : strand2.zip(strand1)\n\n    merge.select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map\n  end\n\n  def each(&block)\n    @strand.each(&block)\n  end\nend	\N	\N	0	6	2014-05-26 06:10:19	2014-05-26 06:10:19	73	hamming.rb
525	23	1b18fbcbbb7c1165da2c2c61	pending	ruby	rna-transcription	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    strand.tr(thymidine, uracil)\n  end\n\n  def thymidine\n    "T"\n  end\n\n  def uracil\n    "U"\n  end\nend	\N	\N	0	6	2014-01-26 15:46:46	2014-01-26 15:46:46	273	rna-transcription.rb
526	23	4428214ca8684672cc7cc396	superseded	ruby	rna-transcription	class DNA\n  THYMIDINE = "T"\n  URACIL    = "U"\n\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    convert_thymidines_to_uracils\n  end\n\n  def convert_thymidines_to_uracils\n    strand.tr(THYMIDINE, URACIL)\n  end\nend	\N	\N	0	5	2014-01-29 14:36:15	2014-01-29 14:36:15	273	rna-transcription.rb
147	45	45087b82d6f192b77cbaadae	superseded	ruby	hamming	require 'pry'\n\nclass Hamming\n\n  def self.compute(string1, string2)\n    truncate_string1 = string1[0 ... string2.length]\n    strand1 = Strand.new(truncate_string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    @char == nucleotide.char\n  end\nend	\N	\N	0	4	2014-07-19 22:05:58	2014-07-19 22:05:58	73	hamming.rb
148	45	bc283484180b127c0ef1d76b	superseded	ruby	hamming	class Hamming\n\n  def self.compute(string1, string2)\n    truncate_string1 = string1[0 ... string2.length]\n    strand1 = Strand.new(truncate_string1)\n    strand2 = Strand.new(string2)\n\n    strand1.zip(strand2).select { |nucleotide1, nucleotide2| nucleotide1 != nucleotide2 }.count\n  end\nend\n\nclass Strand\n  include Enumerable\n\n  def initialize(string)\n    @strand = string.chars.map { |char| Nucleotide.new(char) }\n  end\n\n  def each\n    @strand.each { |x| yield(x) }\n  end\nend\n\nclass Nucleotide\n  attr_reader :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def ==(nucleotide)\n    @char == nucleotide.char\n  end\nend	\N	\N	0	5	2014-07-21 00:51:29	2014-07-21 00:51:29	73	hamming.rb
149	45	49dae680b3529669952e3007	superseded	ruby	grains	class Grains\n\n  def square(n)\n   return 1 if n == 1\n   2 * square(n - 1)\n  end\n\n  def total\n    (1..64).reduce { |sum, n| sum += square(n) }\n  end\n\nend	\N	\N	0	4	2014-04-29 22:21:39	2014-04-29 22:21:39	74	grains.rb
150	45	2d1e7d31195a89406785596d	done	ruby	grains	class Grains\n\n  def square(n)\n   return 1 if n == 1\n   2 * square(n - 1)\n  end\n\n  def total\n    all_squares.reduce(:+)\n  end\n\n  def all_squares\n    (1..64).map{ |n| square(n) }\n  end\n\nend	2014-05-28 16:24:14	\N	0	5	2014-05-20 15:41:10	2014-05-20 15:41:10	74	grains.rb
151	45	df1ad84045baf1319b23a10b	superseded	ruby	grains	class Grains\n\n  def square(n)\n    2**(n - 1)\n  end\n\n  def total\n    (1..64).to_a.reduce { |memo, n| memo += square(n) }\n  end\n\nend	\N	\N	0	1	2014-06-09 10:09:56	2014-06-09 10:09:56	74	grains.rb
152	45	817298f11ef4bfa5e9b828e6	superseded	ruby	grains	class Grains\n\n  def square(n)\n    2**(n - 1)\n  end\n\n  def total\n    2**64 - 1\n  end\n\nend	\N	\N	0	3	2014-06-09 17:29:10	2014-06-09 17:29:10	74	grains.rb
153	45	2d4a15d2ce3870f1de70815a	superseded	ruby	grains	class Grains\n\n  def square(n)\n    2**(n - 1)\n  end\n\n  def total\n    (1..64).reduce { |memo, n| memo += square(n) }\n  end\n\nend	\N	\N	0	2	2014-06-13 05:46:32	2014-06-13 05:46:32	74	grains.rb
154	45	eabf1920cd23b4b206d1164d	done	ruby	leap	class Year\n  def self.leap?(year)\n    case\n    when year % 4 != 0\n      false\n    when year % 100 != 0\n      true\n    when year % 400 == 0\n      true\n    else\n      false\n    end\n  end\nend	2014-06-13 20:27:56	\N	0	1	2014-06-07 20:18:38	2014-06-07 20:18:38	75	year.rb
155	45	67e88830df81ac403ef0ba8b	done	haskell	grains	module Grains where\n\nsquare :: Integer -> Integer\nsquare = (^) 2 . pred\n\ntotal :: Integer\ntotal = sum [square x | x <- [1..64]]	2014-05-07 22:35:24	\N	0	2	2014-05-04 04:04:53	2014-05-04 04:04:53	76	Grains.hs
156	45	1f77f7910b47ee6a16c7cf95	superseded	haskell	grains	module Grains where\n\nsquare :: Integer -> Integer\nsquare x = 2^(x-1)\n\ntotal :: Integer\ntotal = sum [square x | x <- [1..64]]	\N	\N	0	1	2014-05-16 15:17:51	2014-05-16 15:17:51	76	Grains.hs
157	45	d0498e62c8aadb1ba199a3d9	pending	javascript	phone-number	var PhoneNumber = function(phone) {\n  this.phone = phone.replace(/[\\D+]/g,'');\n  this.invalid = '0000000000';\n};\n\nPhoneNumber.prototype.number = function() {\n  var length = this.phone.length;\n  if (length !== 10) {\n    if (length === 11 && this.phone[0] === '1') { return this.phone.substring(1); }\n    return this.invalid;\n  }\n  return this.phone;\n};\n\nPhoneNumber.prototype.areaCode = function() {\n  return this.phone.substring(0, 3);\n};\n\nPhoneNumber.prototype.toString = function() {\n  var areaCode = this.areaCode();\n  var partA = this.phone.substring(3,6);\n  var partB = this.phone.substring(6);\n  var formatPhone = '(' + areaCode + ')' +\n                    ' ' + partA + '-' +\n                    partB;\n  return formatPhone;\n};\nmodule.exports = PhoneNumber;	\N	\N	0	1	2014-06-08 04:38:12	2014-06-08 04:38:12	77	phone-number.js
158	45	40aa80fc19a5d119f5fabc85	superseded	scala	word-count	/**\n * Created by jindrich on 26.4.14.\n */\nclass Phrase(content: String) {\n  def wordCount: Map[String, Int] = {\n    val words = content.split("""[\\p{Space}\\p{Punct}]+""")\n\n    words.map((_, 1)).groupBy(_._1).map { case (w, occ) => (w, occ.size) }\n  }\n}	\N	\N	0	1	2014-05-09 23:36:48	2014-05-09 23:36:48	78	Phrase.scala
159	45	4bfdf5615f704056081df857	done	scala	word-count	/**\n * Created by jindrich on 26.4.14.\n */\nclass Phrase(content: String) {\n  def wordCount: Map[String, Int] = {\n    val words = content.split("""[\\p{Space}\\p{Punct}]+""")\n\n    words.groupBy(identity).mapValues(_.size)\n  }\n}	2014-05-24 06:11:19	\N	0	2	2014-05-21 08:51:30	2014-05-21 08:51:30	78	Phrase.scala
160	45	2f3da7846338baaa4019c9d3	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_in)\n    @dna_nuces = [ 'A', 'C', 'G', 'T' ]\n    @rna_nuces = [ 'A', 'C', 'G', 'U' ]\n    @nuces = @dna_nuces | @rna_nuces\n    for i in dna_in.chars\n      if @dna_nuces.count(i) == 0\n        raise ArgumentError\n      end\n    end\n    @dna_in = dna_in\n  end\n  \n  def count(nuc)\n    if @nuces.count(nuc) == 0\n      raise ArgumentError\n    end\n    return @dna_in.count(nuc)\n  end\n  \n  def nucleotide_counts\n    c = {}\n    for i in @dna_nuces \n      c[i] = @dna_in.count(i)\n    end\n    return c\n  end\n\nend	\N	\N	0	1	2014-06-18 17:56:55	2014-06-18 17:56:55	79	nucleotide-count.rb
161	45	1677c4a17b7aaf1e4e427d91	done	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_in)\n    @dna_nuces = [ 'A', 'C', 'G', 'T' ]\n    @rna_nuces = [ 'A', 'C', 'G', 'U' ]\n    @all_nuces = @dna_nuces | @rna_nuces\n    dna_in.chars { |i| raise ArgumentError if @dna_nuces.count(i) == 0 }\n    @dna_in = dna_in\n  end\n  \n  def count(nuc)\n    raise ArgumentError if @all_nuces.count(nuc) == 0\n    @dna_in.count(nuc)\n  end\n  \n  def nucleotide_counts\n    @dna_nuces.each_with_object({}) { |n, c| c[n] = @dna_in.count(n) }\n  end\n\nend	2014-07-07 00:58:28	\N	0	2	2014-07-04 08:31:56	2014-07-04 08:31:56	79	nucleotide-count.rb
168	47	8d291fb2a72f4fe72cdcaa8e	done	ruby	gigasecond	require 'date'\nrequire 'time'\nclass Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  # 1 Gs anniversary (assuming born at midnight)\n  # If born after midnight, it could be the day after this.\n  def date\n    (@birth_date.to_time + 1_000_000_000).to_date\n  end\n    \nend	2014-02-22 14:27:55	\N	0	1	2014-02-12 13:06:23	2014-02-12 13:06:23	83	gigasecond.rb
190	48	f5b260b035048628a9d78520	pending	python	rna-transcription	class DNA:\n    def __init__(self, word):\n        self.word = word\n\n    def to_rna(self):\n        rna = ''\n        for letter in self.word:\n            if letter == 'T':\n                rna += 'U'\n            else:\n                rna += letter\n        return rna	\N	\N	0	1	2014-03-03 03:43:58	2014-03-03 03:43:58	96	dna.py
607	41	56cbc6f098ca37167fd93acf	pending	ruby	word-count	class Phrase\n\n  attr_reader :word\n\n  def initialize(input)\n    @word = input\n  end\n\n  def word_count\n    formatted_word.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word] += 1\n    end\n  end\n\n  def formatted_word\n    word.downcase.scan(/\\w+/)\n  end\n\nend	\N	\N	0	3	2014-06-13 17:14:06	2014-06-13 17:14:06	314	word-count.rb
162	47	4dfbeed2f401aa5f2337d5e6	done	python	beer-song	#! /usr/bin/env python\n\n#0 'No more         s                   no more         s\n#1        1        ''                         1         ''\n#>1       2         s                         2         s\nWALL = "{b} bottle{s} of beer on the wall, {b} bottle{s} of beer.\\n"\n\n#1            it                       no more         s\n#1            one                            1         ''\n#2>           one                            3         s\nTAKE = "Take {b1} down and pass it around, {b2} bottle{s} of beer on the wall.\\n"\n\n#\nSTORE = "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\n\nclass Couplet(object):\n\n    def __init__(self, n):\n        self.lines = ""\n        if n == 0:\n            self.lines += WALL.format(b='no more', s='s'*(n != 1)).capitalize()\n            self.lines += STORE\n        elif n == 1:\n            self.lines += WALL.format(b=n, s='s'*(n != 1))\n            self.lines += TAKE.format(b1='it', b2='no more', s='s'*(n-1 != 1))\n        else:\n            self.lines += WALL.format(b=n, s='s'*(n != 1))\n            self.lines += TAKE.format(b1='one', b2=n-1, s='s'*(n-1 != 1))\n\n\nclass Beer(object):\n    def sing(self, start, stop=0):\n        return '\\n'.join([self.verse(i)\n                          for i in range(start, stop - 1, -1)]) + '\\n'\n\n    def verse(self, num):\n        return Couplet(num).lines	2013-11-04 09:12:59	\N	0	2	2013-11-03 21:04:40	2013-11-03 21:04:40	80	beer-song.py
163	47	950d38263083f44f2a5e3636	superseded	python	beer-song	#! /usr/bin/env python\n\n#0  'No more         s                   no more         s\n#1         1        ''                         1         ''\n#>1        2         s                         2         s\nWALL = "{b1} bottle{s} of beer on the wall, {b2} bottle{s} of beer.\\n"\n\n#1             it                       no more         s\n#1             one                            1         ''\n#2>            one                            3         s\nTAKE = "Take {b1} down and pass it around, {b2} bottle{s} of beer on the wall.\\n"\n\n#\nSTORE = "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\n\nclass Couplet(object):\n\n    def __init__(self, n):\n        self.lines = ""\n        if n == 0:\n            self.lines += WALL.format(b1='No more', b2='no more', s='s')\n            self.lines += STORE\n        elif n == 1:\n            self.lines += WALL.format(b1=1, b2=1, s='')\n            self.lines += TAKE.format(b1='it', b2='no more', s='s')\n        elif n == 2:\n            self.lines += WALL.format(b1=n, b2=n, s='s')\n            self.lines += TAKE.format(b1='one', b2=1, s='')\n        else:\n            self.lines += WALL.format(b1=n, b2=n, s='s')\n            self.lines += TAKE.format(b1='one', b2=n-1, s='s')\n\n\nclass Beer(object):\n    def sing(self, start, stop=0):\n        #stanza = ""\n        #for i in range(start, stop - 1, -1):\n        #    stanza += self.verse(i) + "\\n"\n        #return stanza\n        return '\\n'.join([self.verse(i) for i in range(start, stop - 1, -1)]) + '\\n'\n\n    def verse(self, num):\n        return Couplet(num).lines	\N	\N	0	1	2013-12-14 00:57:56	2013-12-14 00:57:56	80	beer-song.py
164	47	a7f5165490a76e2eae7949c1	pending	elixir	binary	defmodule Binary do\n  @doc """\n  Convert a string containing a binary number to an integer.\n\n  On errors returns 0.\n  """\n  @spec to_decimal(String.t) :: non_neg_integer\n  def to_decimal(string) do\n    String.codepoints(string) |> Enum.reduce 0, &accumulate_bits/2\n  end\n\n  defp accumulate_bits(bit, accumulator) do\n    accumulator * 2 + bit_value(bit)\n  end\n\n  defp bit_value("1"), do: 1\n  defp bit_value(_),   do: 0\n\nend	\N	\N	0	1	2014-01-09 01:40:14	2014-01-09 01:40:14	81	binary.exs
165	47	5f65117ca19e1a77e0dfa76b	superseded	python	bob	class Bob(object):\n    def hey(self, s):\n        if s.upper() == s and s.lower() != s:\n            # If s is uppercase, and uppercase is actually different\n            # from lowercase then this is yelling\n            return "Woah, chill out!"\n        elif s.endswith("?"):\n            return "Sure."\n        elif s.strip() == '':\n            return "Fine. Be that way!"\n\n        return "Whatever."	\N	\N	0	1	2013-11-27 10:06:15	2013-11-27 10:06:15	82	bob.py
166	47	16bfb479c969b073069df1f4	done	python	bob	# -*- coding: utf-8 -*-\n"""\n    Bob\n    ~~~\n\n    This module implements the advanced\n    business logic of next-gen chatbot,\n    Bob.\n\n    This is a naïve, pure-Python implementation\n    with limited, single-threaded performance.\n    Unsuitable for high-concurrency, high-velocity,\n    low-latency applications.\n\n"""\n\nclass Bob(object):\n    """Bob the Clockwork Teenager.\n\n    'Clockwork' means that Bob is not really\n    a living human being. It is in fact just\n    a cold-hearted, deterministic machine with\n    no soul. This lets us avoid ethical struggles\n    when employing garbage collection over\n    instances of Bob.\n\n    Instances of Bob have no internal state so\n    I'm guessing they are thread-safe.\n\n    """\n\n    def hey(self, phrase):\n        """Return answer to a given phrase.\n\n        Bob reacts differently to exclamation, question,\n        statement and empty phrase.  Due to input format,\n        Bob cannot distinguish between volume,\n        intonation, speed or pitch of input phrase.\n\n        Arguments:\n            phrase: a string of English text directed at Bob.\n\n        Returns:\n            A string with Bob's response.\n\n        """\n\n        if phrase.isupper():\n            return "Woah, chill out!"\n        elif phrase.endswith("?"):\n            return "Sure."\n        elif phrase.strip() == '':\n            return "Fine. Be that way!"\n\n        return "Whatever."	2013-12-14 00:32:28	\N	0	3	2013-12-10 22:23:23	2013-12-10 22:23:23	82	bob.py
167	47	4d943b9dc44cb9c781590da8	superseded	python	bob	class Bob(object):\n    def hey(self, s):\n        if s.isupper():\n            return "Woah, chill out!"\n        elif s.endswith("?"):\n            return "Sure."\n        elif s.strip() == '':\n            return "Fine. Be that way!"\n\n        return "Whatever."	\N	\N	0	2	2014-01-02 04:15:30	2014-01-02 04:15:30	82	bob.py
180	48	ea66fd129fb8d1100c7f6676	pending	scala	hamming	object Hamming {\n  def compute(s1: String, s2: String): Integer = {\n    s1 zip s2 count { case (char1, char2) => char1 != char2 }\n  }\n}	\N	\N	0	3	2014-05-16 06:37:30	2014-05-16 06:37:30	89	hamming.scala
501	15	b5e75dd3dd7b78677acc45f8	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n\ntype Year  = Integer\ntype Month = Int\n\n-- Can this be made safer than indexing into a list?\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay sc wd year month =\n    let days = matchingDays wd year month in\n    case sc of\n      First  -> head days\n      Second -> days !! 1\n      Third  -> days !! 2\n      Fourth -> days !! 3\n      Last   -> last days\n      Teenth -> head . filter isTeenth $ days\n\nisTeenth :: Day -> Bool\nisTeenth d =\n    let (_, _, day) = toGregorian d in\n    13 <= day && day <= 19\n\nweekdayToInt :: Weekday -> Int\nweekdayToInt w = fromEnum w + 1\n\nmatchingDays :: Weekday -> Year -> Month -> [Day]\nmatchingDays wd year month =\n    [d | d <- [fromGregorian year month 1 .. fromGregorian year month 1],\n         let (_, _, weekDay) = toWeekDate d,\n         weekDay == weekdayToInt wd]	\N	\N	0	2	2014-05-27 04:27:02	2014-05-27 04:27:02	260	meetup.hs
169	47	7116d966f9738b8df9601d24	done	ruby	word-count	class Phrase\n  attr_accessor :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def word_count\n    hash = Hash.new(0)\n    words = []\n    word.gsub(/[,:]/, " ").split(" ").collect{|x| words << x.match(/^[a-zA-Z0-9']*/)}\n    words.each do |key|\n      hash[key.to_s.downcase] += 1 \n    end\n    hash\n  end\nend	2013-11-28 05:00:55	\N	0	1	2013-11-25 13:27:14	2013-11-25 13:27:14	84	phrase.rb
170	47	58ea7f3d69dfdcf2da6a8cfc	done	go	scrabble-score	package scrabble_score\n\nimport "strings"\n\nfunc transform(oldSystem map[int][]string) map[string]int {\n\tnewSystem := map[string]int{}\n\tfor point, letters := range oldSystem {\n\t\tfor _, letter := range letters {\n\t\t\tnewSystem[strings.ToLower(letter)] = point\n\t\t}\n\t}\n\treturn newSystem\n}\n\nfunc Score(word string) int {\n    score2string := map[int][]string {\n        1: {"A", "E", "I", "O", "U", "L", "N", "R", "S", "T"},\n        2: {"D", "G"},\n        3: {"B", "C", "M", "P"},\n        4: {"F", "H", "V", "W", "Y"},\n        5: {"K"},\n        8: {"J", "X"},\n        10:{"Q", "Z"},\n    }\n    scores := transform(score2string)\n    word = strings.ToLower(word)\n    s := 0\n    for i := range word {\n        s += scores[word[i:i+1]]\n    }\n    return s\n}	2013-12-08 08:18:09	\N	0	1	2013-12-02 03:45:52	2013-12-02 03:45:52	85	scrabble_score.go
171	47	f890b15e90d81a1c32ec98fb	superseded	ruby	sieve	class Sieve\n  def initialize(limit)\n    @limit = limit\n  end\n\n  def primes\n    numbers = [*2..@limit]\n    result = []\n\n    while current = numbers[0]\n      result << current\n      numbers.reject! { |n| n % current == 0 }\n    end\n    result\n  end\nend	\N	\N	0	1	2013-12-20 07:47:10	2013-12-20 07:47:10	86	sieve.rb
172	47	cf7cb5e34b81266076d3af76	done	ruby	sieve	class Sieve\n  def initialize(limit)\n    @limit = limit\n  end\n\n  def primes\n    [*2..@limit].tap do |numbers|\n      numbers.each do |current|\n        numbers.reject! { |n| n > current && n % current == 0 }\n      end\n    end\n  end\nend	2014-04-18 22:10:00	\N	0	2	2014-04-16 10:56:10	2014-04-16 10:56:10	86	sieve.rb
173	48	f02fdda1f4a5557829570d8d	pending	ruby	hamming	# Calculates the Hamming difference given two DNA sequences as strings\n\n# Split each dna string into an array with each letter an element\n# create a Hamming count variable\n# for each letter in array_1 with index\n#   add 1 to count if array_1[i] != array_2[i]\n# end\n\n# How to deal with sequences where first\n#   nucleotides don't line up strand\n# padding the strings\n#\n#\n#\nclass Hamming\n  def self.compute(strand_1, strand_2)\n    hamming = 0\n    array_1 = strand_1.split('')\n    array_2 = strand_2.split('')\n    array_1.each_index do |i|\n      break if array_1[i] == nil\n      break if array_2[i] == nil\n      hamming += 1 if array_1[i] != array_2[i]\n    end\n    hamming\n  end\nend\n\n\n\n\n\n\n# class Hamming\n#   def self.compute(dna_1, dna_2)\n#     array_1 = dna_1.split("")\n#     array_2 = dna_2.split("")\n#     hamming_count = 0\n\n#     array_1.each_with_index do |c, i|\n#       hamming_count += 1 if c != array_2[i]\n#     end\n#     hamming_count\n#   end\n# end	\N	\N	0	1	2014-02-20 06:59:40	2014-02-20 06:59:40	87	hamming.rb
174	48	4b95fe1e0117c7274e4687f3	superseded	javascript	bob	function Bob() {\n    this.hey = function(message) {\n        return 'Whatever.';\n    };\n}\nmodule.exports = Bob;	\N	\N	0	1	2013-12-11 19:43:53	2013-12-11 19:43:53	88	bob.js
175	48	eda6d0acc464f960757cfa4b	superseded	javascript	bob	function Bob() {\n    function Yelling(message) {\n        return message.toUpperCase() === message;\n    }\n    function Question(message) {\n        return message[message.length - 1] === '?';\n    }\n\n    function Silence(message) {\n        return message === '';\n    }\n\n\n    this.hey = function(message) {\n        if (Silence(message)) {\n            return "Fine, be that way!";\n        } else if (Question(message)) {\n            return 'Sure.';\n        } else if (Yelling(message)) {\n            return "Woah, chill out!";\n        } else {\n            return 'Whatever.';\n        }\n    };\n}\nmodule.exports = Bob;	\N	\N	0	2	2013-12-11 20:31:21	2013-12-11 20:31:21	88	bob.js
176	48	c6dc52cddb221fb71754370a	superseded	javascript	bob	function Bob() {\n    function isYelling(message) {\n        return message.toUpperCase() === message;\n    }\n    function isQuestion(message) {\n        return message[message.length - 1] === '?';\n    }\n\n    function isSilent(message) {\n        return message === '';\n    }\n\n\n    this.hey = function(message) {\n        if (isSilent(message)) {\n            return "Fine, be that way!";\n        } else if (isQuestion(message)) {\n            return 'Sure.';\n        } else if (isYelling(message)) {\n            return "Woah, chill out!";\n        } else {\n            return 'Whatever.';\n        }\n    };\n}\nmodule.exports = Bob;	\N	\N	0	3	2014-01-16 04:54:01	2014-01-16 04:54:01	88	bob.js
177	48	9c40998c13bcea78c8af2b45	pending	javascript	bob	function Bob() {\n    function isYelling(message) {\n        return message.toUpperCase() === message;\n    }\n    function isQuestion(message) {\n        return message[message.length - 1] === '?';\n    }\n\n    function isSilent(message) {\n        return message === '';\n    }\n\n    this.hey = function(message) {\n        if (isSilent(message)) {\n            return "Fine, be that way!";\n        } else if (isQuestion(message)) {\n            return 'Sure.';\n        } else if (isYelling(message)) {\n            return "Woah, chill out!";\n        } else {\n            return 'Whatever.';\n        }\n    };\n}\nmodule.exports = Bob;	\N	\N	0	4	2014-03-21 15:01:44	2014-03-21 15:01:44	88	bob.js
178	48	64d1987c348bbb3747ecd580	superseded	scala	hamming	object Hamming {\n  def compute(s1: String, s2: String): Integer = {\n    s1 zip s2 count { case (c1, c2) => c1 != c2 }\n  }\n}	\N	\N	0	2	2014-01-05 06:57:16	2014-01-05 06:57:16	89	hamming.scala
179	48	bb781a2ac9afe55d291720a0	superseded	scala	hamming	object Hamming {\n  def compute(s1: String, s2: String): Integer = {\n    val pairs = s1 zip s2\n    val diffs = for { (c1, c2) <- pairs if c1 != c2 } yield 1\n    diffs.sum\n  }\n}	\N	\N	0	1	2014-03-12 15:39:00	2014-03-12 15:39:00	89	hamming.scala
502	15	8d0904089ec62c2156e271f5	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n\ntype Year  = Integer\ntype Month = Int\n\n-- Can this be made safer than indexing into a list?\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay sc wd year month =\n    let days = matchingDays wd year month in\n    case sc of\n      First  -> head days\n      Second -> days !! 1\n      Third  -> days !! 2\n      Fourth -> days !! 3\n      Last   -> last days\n      Teenth -> head . filter isTeenth $ days\n\nisTeenth :: Day -> Bool\nisTeenth d =\n    let (_, _, day) = toGregorian d in\n    13 <= day && day <= 19\n\nweekdayToInt :: Weekday -> Int\nweekdayToInt w = fromEnum w + 1\n\nmatchingDays :: Weekday -> Year -> Month -> [Day]\nmatchingDays wd year month =\n    [d | day <- [1..31],\n         let d = fromGregorian year month day,\n         let (_, _, weekDay) = toWeekDate d,\n         weekDay == weekdayToInt wd]	\N	\N	0	1	2014-06-09 17:01:56	2014-06-09 17:01:56	260	meetup.hs
181	48	9248255f78629dc3ee8e5f9b	pending	go	roman-numerals	package romannumerals\n\nimport "bytes"\n\nvar numerals = map[int]string{\n\t1:    "I",\n\t4:    "IV",\n\t5:    "V",\n\t9:    "IX",\n\t10:   "X",\n\t40:   "XL",\n\t50:   "L",\n\t90:   "XC",\n\t100:  "C",\n\t400:  "CD",\n\t500:  "D",\n\t900:  "CM",\n\t1000: "M",\n}\n\nfunc ToRomanNumeral(arabic int) string {\n\tvar roman bytes.Buffer\n\n\tfor {\n\t\tif arabic == 0 {\n\t\t\tbreak\n\t\t}\n\n\t\tfor _, n := range []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1} {\n\t\t\tif arabic >= n {\n\t\t\t\troman.WriteString(numerals[n])\n\t\t\t\tarabic -= n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\treturn roman.String()\n}	\N	\N	0	1	2013-12-01 04:44:23	2013-12-01 04:44:23	90	roman_numerals.go
182	48	48aaa7f77e21a92caa6db29d	superseded	ruby	anagram	class Anagram\n  def initialize(source)\n    @source = source\n  end\n\n  def match(words)\n    words.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    @source.downcase != word.downcase &&\n      chars_count(@source) == chars_count(word)\n  end\n\n  def chars_count(word)\n    map = word.downcase\n              .chars\n              .group_by { |char| char }\n              .map      { |char, ocurrences| [char, ocurrences.size] }\n    Hash[map]\n  end\nend	\N	\N	0	1	2014-02-27 04:01:24	2014-02-27 04:01:24	91	anagram.rb
183	48	382db42f5e1632c70dfb3338	pending	ruby	anagram	class Anagram\n  def initialize(source)\n    @source = source\n  end\n\n  def match(words)\n    words.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    @source.downcase != word.downcase &&\n      chars(@source) == chars(word)\n  end\n\n  def chars(word)\n    word.downcase.chars.sort\n  end\nend	\N	\N	0	2	2014-03-06 08:22:57	2014-03-06 08:22:57	91	anagram.rb
184	48	40afdb0741f94fa4a5f1f24c	pending	clojure	meetup	(ns meetup)\n(import [java.util Calendar])\n\n(defprotocol Date\n  (day [this])\n  (month [this])\n  (year [this])\n  (day-of-week [this]))\n\n(extend-protocol Date\n  java.util.Calendar\n\n  (day [this]\n       (.get this Calendar/DAY_OF_MONTH))\n  (month [this]\n         (inc (.get this Calendar/MONTH)))\n  (year [this]\n        (.get this Calendar/YEAR))\n  (day-of-week [this]\n               (.get this Calendar/DAY_OF_WEEK)))\n\n(defn vec-date\n  ([d]\n    [(year d) (month d) (day d)])\n  ([]\n   nil))\n\n(defn set-date [ayear amonth aday]\n  (let [return-date (Calendar/getInstance)]\n    (.set return-date ayear (dec amonth) aday)\n    return-date))\n\n(defn nteenth [n amonth ayear]\n  (->> (for [aday (range 13 20)]\n         (set-date ayear amonth aday))\n       (filter #(= n (day-of-week %)))\n       first\n       (vec-date)))\n\n\n(def sunteenth (partial nteenth 1))\n(def monteenth (partial nteenth 2))\n(def tuesteenth (partial nteenth 3))\n(def wednesteenth (partial nteenth 4))\n(def thursteenth (partial nteenth 5))\n(def friteenth (partial nteenth 6))\n(def saturteenth (partial nteenth 7))\n\n(friteenth 5 2014)\n\n(defn first-nday\n  [n amonth ayear]\n  (->> (for [aday (range 1 8)]\n         (set-date ayear amonth aday))\n       (filter #(= n (day-of-week %)))\n       (apply vec-date)))\n\n(def first-sunday (partial first-nday 1))\n(def first-monday (partial first-nday 2))\n(def first-tuesday (partial first-nday 3))\n(def first-wednesday (partial first-nday 4))\n(def first-thursday (partial first-nday 5))\n(def first-friday (partial first-nday 6))\n(def first-saturday (partial first-nday 7))\n\n(defn second-nday\n  [n amonth ayear]\n  (->> (for [aday (range 8 15)]\n         (set-date ayear amonth aday))\n       (filter #(= n (day-of-week %)))\n       (apply vec-date)))\n\n(def second-sunday (partial second-nday 1))\n(def second-monday (partial second-nday 2))\n(def second-tuesday (partial second-nday 3))\n(def second-wednesday (partial second-nday 4))\n(def second-thursday (partial second-nday 5))\n(def second-friday (partial second-nday 6))\n(def second-saturday (partial second-nday 7))\n\n(defn third-nday\n  [n amonth ayear]\n  (->> (for [aday (range 15 22)]\n         (set-date ayear amonth aday))\n       (filter #(= n (day-of-week %)))\n       (apply vec-date)))\n\n(def third-sunday (partial third-nday 1))\n(def third-monday (partial third-nday 2))\n(def third-tuesday (partial third-nday 3))\n(def third-wednesday (partial third-nday 4))\n(def third-thursday (partial third-nday 5))\n(def third-friday (partial third-nday 6))\n(def third-saturday (partial third-nday 7))\n\n(defn fourth-nday\n  [n amonth ayear]\n  (->> (for [aday (range 22 29)]\n         (set-date ayear amonth aday))\n       (filter #(= n (day-of-week %)))\n       (first)\n       (vec-date)))\n\n(def fourth-sunday (partial fourth-nday 1))\n(def fourth-monday (partial fourth-nday 2))\n(def fourth-tuesday (partial fourth-nday 3))\n(def fourth-wednesday (partial fourth-nday 4))\n(def fourth-thursday (partial fourth-nday 5))\n(def fourth-friday (partial fourth-nday 6))\n(def fourth-saturday (partial fourth-nday 7))\n\n(defn last-nday\n  [n amonth ayear]\n  (->> (for [aday (range 1 32)]\n         (set-date ayear amonth aday))\n       (filter #(= amonth (month %)))\n       (filter #(= n (day-of-week %)))\n       (last)\n       (vec-date)))\n\n(def last-sunday (partial last-nday 1))\n(def last-monday (partial last-nday 2))\n(def last-tuesday (partial last-nday 3))\n(def last-wednesday (partial last-nday 4))\n(def last-thursday (partial last-nday 5))\n(def last-friday (partial last-nday 6))\n(def last-saturday (partial last-nday 7))	\N	\N	0	1	2014-03-18 01:44:03	2014-03-18 01:44:03	92	meetup.clj
185	48	ac5695a4addbd09a62d79e10	superseded	ruby	bob	# Playing around with delegation for this solution.\n# Turns out, this is a very effective way to overcomplicate a simple problem.\n\nclass Bob\n  def initialize(responder_chain = nil)\n    @responder_chain = responder_chain || [EmptyResponder.new, ShoutResponder.new, QuestionResponder.new, DefaultResponder.new]\n  end\n\n  def hey(input)\n    @responder_chain.find { |responder| responder.can_respond?(input) }.response\n  end\n\n  class QuestionResponder\n    def can_respond?(input)\n      return input.end_with?("?")\n    end\n\n    def response\n      "Sure."\n    end\n  end\n\n  class EmptyResponder\n    def can_respond?(input)\n      input.nil? || input.strip.empty?\n    end\n\n    def response\n      "Fine. Be that way!"\n    end\n  end\n\n  class ShoutResponder\n    def can_respond?(input)\n      input == input.upcase\n    end\n\n    def response\n      "Woah, chill out!"\n    end\n  end\n\n  class DefaultResponder\n    def can_respond?(input)\n      true\n    end\n\n    def response\n      "Whatever."\n    end\n  end\n\nend	\N	\N	0	2	2013-11-28 02:05:53	2013-11-28 02:05:53	93	bob.rb
186	48	bda6148108ca7721fdf98a6f	superseded	ruby	bob	# Playing around with delegation for this solution.\n# Turns out, this is a very effective way to overcomplicate a simple problem.\n\nclass Bob\n  def initialize(responder_chain = DEFAULT_RESPONDER_CHAIN)\n    @responder_chain = responder_chain\n  end\n\n  def hey(input)\n    @responder_chain.respond(input)\n  end\n\n  class Responder\n    def initialize(next_responder)\n      @next_responder = next_responder\n    end\n\n    def can_respond?(input)\n      raise NotImplementedError\n    end\n\n    def response\n      raise NotImplementedError\n    end\n\n    def respond(input)\n      return self.response if self.can_respond?(input)\n      @next_responder.respond(input)\n    end\n  end\n\n  class QuestionResponder < Responder\n    def can_respond?(input)\n      return input.end_with?("?")\n    end\n\n    def response\n      "Sure."\n    end\n  end\n\n  class EmptyResponder < Responder\n    def can_respond?(input)\n      input.nil? || input.strip.empty?\n    end\n\n    def response\n      "Fine. Be that way!"\n    end\n  end\n\n  class ShoutResponder < Responder\n    def can_respond?(input)\n      input == input.upcase\n    end\n\n    def response\n      "Woah, chill out!"\n    end\n  end\n\n  class DefaultResponder < Responder\n    def initialize(next_responder = nil)\n      unless next_responder.nil?\n        puts "Throwing away DefaultResponder initializer next_responder"\n      end\n      super(nil)\n    end\n\n    def can_respond?(input)\n      true\n    end\n\n    def response\n      "Whatever."\n    end\n  end\n\nprivate\n  DEFAULT_RESPONDER_CHAIN = EmptyResponder.new(\n                              ShoutResponder.new(\n                                QuestionResponder.new(\n                                  DefaultResponder.new)))\nend	\N	\N	0	1	2014-03-04 05:54:26	2014-03-04 05:54:26	93	bob.rb
187	48	57a3ccbbdcee5e1c4b44c9bb	pending	ruby	bob	class Bob\n  def initialize(responder_chain = nil)\n    @responder_chain = responder_chain || [EmptyResponder.new, ShoutResponder.new, QuestionResponder.new, DefaultResponder.new]\n  end\n\n  def hey(input)\n    @responder_chain.find { |responder| responder.can_respond?(input) }.response\n  end\n\n  class QuestionResponder\n    def can_respond?(input)\n      return input.end_with?("?")\n    end\n\n    def response\n      "Sure."\n    end\n  end\n\n  class EmptyResponder\n    def can_respond?(input)\n      input.nil? || input.strip.empty?\n    end\n\n    def response\n      "Fine. Be that way!"\n    end\n  end\n\n  class ShoutResponder\n    def can_respond?(input)\n      input == input.upcase\n    end\n\n    def response\n      "Woah, chill out!"\n    end\n  end\n\n  class DefaultResponder\n    def can_respond?(input)\n      true\n    end\n\n    def response\n      "Whatever."\n    end\n  end\nend	\N	\N	0	3	2014-05-09 19:32:47	2014-05-09 19:32:47	93	bob.rb
188	48	44f17d057e3e684769dd01a6	pending	javascript	trinary	function Trinary(trinaryValue) {\n  this.trinaryValue = trinaryValue;\n}\n\nTrinary.prototype.toDecimal = function() {\n  var length = this.trinaryValue.length, decimal = 0, i;\n  for (i = length - 1; i >= 0; i--) {\n    var number = this.trinaryValue.charAt(i);\n    if (number == '1' || number == '2') {\n      decimal += parseInt(number, 10) * Math.pow(3, length - i - 1);\n    }\n  }\n  return decimal;\n}\n\nmodule.exports = Trinary;	\N	\N	0	1	2013-12-09 14:54:43	2013-12-09 14:54:43	94	trinary.js
189	48	3d50f63984eaf2bd53fe3d90	pending	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    (standard_leap? && !century?) || exeptional_year?\n  end\n\n  def standard_leap?\n    @year % 4 == 0\n  end\n\n  def century?\n    @year % 100 == 0\n  end\n\n  def exeptional_year?\n    @year % 400 == 0\n  end\nend	\N	\N	0	1	2014-02-25 06:01:39	2014-02-25 06:01:39	95	leap.rb
208	48	38b9a0eb48fdf90b10f5bc65	pending	ruby	grains	 class Grains\n \tdef square(count)\n \t\t2**(count - 1)\n \tend\n\n \tdef total\n \t\t2**64 - 1\t\n \tend\n end	\N	\N	0	1	2014-01-21 11:24:21	2014-01-21 11:24:21	109	grains.rb
191	48	5aa85269bdfb030d2c532ed6	pending	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    hash = { "3" => "Pling", "5" => "Plang", "7" => "Plong" }\n    output = ""\n    hash.keys.each do |divisor|\n      output << hash[divisor] if number % divisor.to_i == 0\n    end\n    output.empty? ? number.to_s : output\n  end\nend	\N	\N	0	1	2014-01-25 22:38:46	2014-01-25 22:38:46	97	raindrops.rb
192	48	c266adadf34509aac8c9a749	superseded	go	atbash-cipher	package atbash\n\nimport (\n\t"strings"\n)\n\nvar m = map[string]string{\n\n\t"a": "z",\n\t"b": "y",\n\t"c": "x",\n\t"d": "w",\n\t"e": "v",\n\t"f": "u",\n\t"g": "t",\n\t"h": "s",\n\t"i": "r",\n\t"j": "q",\n\t"k": "p",\n\t"l": "o",\n\t"m": "n",\n\n\t"n": "m",\n\t"o": "l",\n\t"p": "k",\n\t"q": "j",\n\t"r": "i",\n\t"s": "h",\n\t"t": "g",\n\t"u": "f",\n\t"v": "e",\n\t"w": "d",\n\t"x": "c",\n\t"y": "b",\n\t"z": "a",\n\n\t"0": "0",\n\t"1": "1",\n\t"2": "2",\n\t"3": "3",\n\t"4": "4",\n\t"5": "5",\n\t"6": "6",\n\t"7": "7",\n\t"8": "8",\n\t"9": "9",\n}\n\nfunc Atbash(s string) (result string) {\n\tcount := 0\n\tfor _, r := range s {\n\t\tv, ok := m[strings.ToLower(string(r))]\n\t\tif ok {\n\t\t\tresult += v\n\t\t\tcount++\n\t\t}\n\t\tif count == 5 {\n\t\t\tresult += " "\n\t\t\tcount = 0\n\t\t}\n\t}\n\n\treturn strings.TrimRight(result, " ")\n}	\N	\N	0	1	2014-03-07 01:56:47	2014-03-07 01:56:47	98	atbash_cipher.go
193	48	f559d18a6e7a56068433a6f6	pending	go	atbash-cipher	package atbash\n\nimport (\n\t"bytes"\n\t"strings"\n)\n\nvar m = map[rune]rune{\n\n\t'a': 'z',\n\t'b': 'y',\n\t'c': 'x',\n\t'd': 'w',\n\t'e': 'v',\n\t'f': 'u',\n\t'g': 't',\n\t'h': 's',\n\t'i': 'r',\n\t'j': 'q',\n\t'k': 'p',\n\t'l': 'o',\n\t'm': 'n',\n\n\t'n': 'm',\n\t'o': 'l',\n\t'p': 'k',\n\t'q': 'j',\n\t'r': 'i',\n\t's': 'h',\n\t't': 'g',\n\t'u': 'f',\n\t'v': 'e',\n\t'w': 'd',\n\t'x': 'c',\n\t'y': 'b',\n\t'z': 'a',\n\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n}\n\nfunc Atbash(s string) string {\n\tcount := 0\n\tvar b bytes.Buffer\n\tfor _, r := range strings.ToLower(s) {\n\t\tv, ok := m[r]\n\t\tif ok {\n\t\t\tb.WriteRune(v)\n\t\t\tcount++\n\t\t}\n\t\tif count == 5 {\n\t\t\tb.WriteRune(' ')\n\t\t\tcount = 0\n\t\t}\n\t}\n\treturn strings.TrimSuffix(b.String(), " ")\n}	\N	\N	0	2	2014-03-23 02:54:28	2014-03-23 02:54:28	98	atbash_cipher.go
194	48	44c51807ddfc5595568f08e2	pending	ruby	gigasecond	class Gigasecond\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    @birth_date + date_to_seconds\n  end\n\n  private\n\n  def date_to_seconds\n    1000000000 / 60 / 60 / 24\n  end\nend	\N	\N	0	1	2013-11-22 23:10:04	2013-11-22 23:10:04	99	gigasecond.rb
195	48	824e85e6dba0f65737e47ffc	pending	javascript	secret-handshake	var SecretHandshake = function(number){\n  if (number.toString().match(/[^0-9]/)){\n    throw new Error("Handshake must be a number");\n  }\n\n  this.binaryArrayofBooleans = function(){\n    return number.toString(2)\n      .split('')\n      .reverse()\n      .map(function(i) {\n        return i === "1";\n      });\n  }.bind(this)();\n};\n\nSecretHandshake.prototype.commands = function(){\n  var commands = ['wink', 'double blink', 'close your eyes', 'jump', 'reverse'];\n\n  commandsToPreform = this.binaryArrayofBooleans.map(function(performCommand, position){\n    if(performCommand){\n      return commands[position];\n    } else {\n      return null;\n    }\n  }).filter(function(command){\n    return command !== null;\n  });\n\n  if(commandsToPreform[commandsToPreform.length-1] == 'reverse'){\n    return commandsToPreform.slice(0,commandsToPreform.length-1).reverse();\n  } else {\n    return commandsToPreform;\n  }\n};\n\nmodule.exports = SecretHandshake;	\N	\N	0	1	2014-01-31 02:27:53	2014-01-31 02:27:53	100	secret-handshake.js
196	48	03290cf1c29f29bca2672d1d	superseded	haskell	etl	module ETL (transform) where\n\nimport qualified Data.Map.Strict as M\nimport Data.Char (toLower)\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform m = M.fromList $ swapConcat $ M.toList m\n\nswapConcat :: [(Int, [String])] -> [(String, Int)]\nswapConcat = concatMap (\\p -> map (\\s -> (lower s, fst p)) $ snd p)\n  where lower = map toLower	\N	\N	0	1	2013-12-24 18:29:29	2013-12-24 18:29:29	101	ETL.hs
197	48	e9894c1611dedd4cb1c65e8b	pending	haskell	etl	module ETL (transform) where\n\nimport qualified Data.Map.Strict as M\nimport Data.Char (toLower)\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.fromList . concatMap swap . M.toList\n  where swap (v, xs) = map (\\s -> (map toLower s, v)) xs	\N	\N	0	2	2014-03-03 16:59:19	2014-03-03 16:59:19	101	ETL.hs
198	48	1a228463bd9c52688342ab05	superseded	ruby	word-count	class Phrase\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    words.inject({}) do |hsh, word|\n      hsh[word] = (hsh[word] || 0) +1\n      hsh\n    end\n  end\n\nprivate\n\n  def words\n    @phrase.downcase.split(/[^(\\w|')]+/)\n  end\n\nend	\N	\N	0	1	2014-03-03 02:17:47	2014-03-03 02:17:47	102	word-count.rb
199	48	51ed2db520d555cc741f4afb	pending	ruby	word-count	class Phrase\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, hsh| hsh[word] += 1 }\n  end\n\nprivate\n\n  def words\n    @phrase.downcase.split(/[^(\\w|')]+/)\n  end\n\nend	\N	\N	0	2	2014-03-10 21:23:55	2014-03-10 21:23:55	102	word-count.rb
200	48	225b1545896565684be384b7	pending	clojure	rna-transcription	(ns dna\n  (require [clojure.string :as str]))\n\n(def dna->rna {\n  \\G \\C\n  \\C \\G\n  \\T \\A\n  \\A \\U\n  })\n\n(defn validate-strand [strand]\n  (let [valid-dna (set (keys dna->rna))]\n    (every? valid-dna strand)))\n\n(defn to-rna [strand]\n  {:pre [(validate-strand strand)]}\n  (apply str (map dna->rna (seq strand))))	\N	\N	0	1	2014-02-02 03:32:49	2014-02-02 03:32:49	103	dna.clj
201	48	4a258b85d802bf315db8cd5b	pending	elixir	raindrops	defmodule Raindrops do\n  @doc """\n  Returns a string based on raindrop factors.\n\n  - If the number contains 3 as a prime factor, output 'Pling'.\n  - If the number contains 5 as a prime factor, output 'Plang'.\n  - If the number contains 7 as a prime factor, output 'Plong'.\n  - If the number does not contain 3, 5, or 7 as a prime factor,\n    just pass the number's digits straight through.\n  """\n  @spec convert(pos_integer) :: String.t\n  def convert(number) do\n    s = (divides(number, 3, "Pling") <>\n         divides(number, 5, "Plang") <>\n         divides(number, 7, "Plong"))\n    if s == "" do\n      "#{number}"\n    else\n      s\n    end\n  end\n\n  defp divides(number, d, t) when 0 == rem(number, d), do: t\n  defp divides(_, _, _), do: ""\nend	\N	\N	0	1	2014-03-25 23:45:33	2014-03-25 23:45:33	104	raindrops.exs
209	48	3d23cebfc7f405c38b0f9b28	pending	ruby	circular-buffer	class CircularBuffer\n  def initialize(size)\n    @buffer = Array.new\n    @size = size\n  end\n\n  def write(data)\n    if @buffer.length == @size\n      raise BufferFullException\n    elsif !data.nil?\n      @buffer.push(data)\n    end\n  end\n\n  def write!(data)\n    @buffer.shift\n    @buffer.push(data)\n  end\n\n  def read\n    if @buffer.empty?\n      raise BufferEmptyException\n    else\n      @buffer.shift\n    end\n  end\n\n  def clear\n    @buffer = Array.new\n  end\n\n  class CircularBuffer::BufferEmptyException < StandardError\n  end\n\n  class CircularBuffer::BufferFullException < StandardError\n  end\nend	\N	\N	0	1	2014-02-07 19:33:43	2014-02-07 19:33:43	110	circular_buffer.rb
230	25	c8d6399c3016ba6a52d9e529	pending	haskell	binary	module Binary ( toDecimal\n              ) where\n\nimport Data.Maybe(fromMaybe)\nimport Data.List(foldl')\n\ntoDecimal ::  String -> Integer\ntoDecimal = foldl' handleDigit 0 . fromMaybe [] . toDigits\n    where handleDigit soFar digit = soFar * 2 + digit\n\ntoDigits ::  String -> Maybe [Integer]\ntoDigits = mapM toDig\n    where toDig '0' = Just 0\n          toDig '1' = Just 1\n          toDig  _  = Nothing	\N	\N	0	3	2014-06-30 00:55:08	2014-06-30 00:55:08	120	Binary.hs
202	48	e193b10e707974eadf9c16fd	pending	ruby	beer-song	require 'pry'\r\n\r\nclass BeerSong\r\n\r\n  OF_BEER = " of beer"\r\n  ON_THE_WALL = " on the wall"\r\n  PASS_AROUND = "and pass it around, "\r\n  BUY_MORE = "Go to the store and buy some more, "\r\n  NEW_LINE = "\\n"\r\n\r\n  def verses(hi, lo)\r\n    (lo..hi).to_a.reverse.each_with_object(""){|num, song|\r\n      song << single_verse(num) << NEW_LINE\r\n    }\r\n  end\r\n\r\n  def verse(num)\r\n    single_verse(num)\r\n  end\r\n\r\n  def sing\r\n    verses(99,0)\r\n  end\r\n\r\n  private\r\n\r\n  def single_verse(num)\r\n    first_sentence(num) + second_sentence(num)\r\n  end\r\n\r\n  def first_sentence(num)\r\n    bottles(num).capitalize + ON_THE_WALL + ", " + bottles(num) + "." + NEW_LINE  \r\n  end\r\n\r\n  def second_sentence(num)\r\n    take_or_buy(num) + bottles(num-1) + ON_THE_WALL + "." + NEW_LINE\r\n  end\r\n\r\n  def bottles(num)\r\n    plural = {false => "", true => "s"}  \r\n    number_of_bottles(num) + "bottle" + plural[num != 1] + OF_BEER\r\n  end\r\n\r\n  def number_of_bottles(num)\r\n    num_of_bots = [\r\n      "99 ",\r\n      "no more ",\r\n      "1 ",\r\n      "#{num} "\r\n      ]\r\n    num_of_bots[[num+1,3].min]\r\n  end\r\n\r\n  def take_or_buy(num)\r\n    it_one = ["it", "one"]\r\n    num.zero? ? BUY_MORE : take_down(num)\r\n  end\r\n\r\n  def take_down(num)\r\n    it_one = ["it", "one"]\r\n    "Take #{it_one[[num-1,1].min]} down " + PASS_AROUND\r\n  end\r\nend\r\n\r\n=begin\r\n3 bottles of beer on the wall, 3 bottles of beer.\r\nTake one down and pass it around, 2 bottles of beer on the wall.\r\n\r\n2 bottles of beer on the wall, 2 bottles of beer.\r\nTake one down and pass it around, 1 bottle of beer on the wall.\r\n\r\n1 bottle of beer on the wall, 1 bottle of beer.\r\nTake it down and pass it around, no more bottles of beer on the wall.\r\n\r\nNo more bottles of beer on the wall, no more bottles of beer.\r\nGo to the store and buy some more, 99 bottles of beer on the wall.\r\n=end\r	\N	\N	0	1	2014-01-14 20:39:01	2014-01-14 20:39:01	105	beer_song.rb
203	48	f74017d850b778dc7c4f978c	superseded	ruby	food-chain	class FoodChainSong\n\n  def verse n\n    raise ArgumentError unless (1..8).include? n\n\n    animal = ANIMALS[n-1]\n    premisces = PREMISCES[animal].to_s + "\\n" unless animal == 'fly'\n    explanations = EXPLANATIONS[0..(n-1)].reverse.join("\\n") + "\\n" unless animal == 'horse'\n\n    "I know an old lady who swallowed a #{animal}.\\n" +\n       "#{premisces}" +\n       "#{explanations}"\n  end\n\n  def verses n, m\n    (n..m).map { |i| verse i }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses 1, 8\n  end\n\n  ANIMALS = %w(fly spider bird cat dog goat cow horse)\n\n  PREMISCES = {\n    'fly' => nil,\n    'spider' => "It wriggled and jiggled and tickled inside her.",\n    'bird' => "How absurd to swallow a bird!",\n    'cat' => "Imagine that, to swallow a cat!",\n    'dog' => "What a hog, to swallow a dog!",\n    'goat' => "Just opened her throat and swallowed a goat!",\n    'cow' => "I don't know how she swallowed a cow!",\n    'horse' => "She's dead, of course!"\n  }\n\n  EXPLANATIONS = [\n    "I don't know why she swallowed the fly. Perhaps she'll die.",\n    "She swallowed the spider to catch the fly.",\n    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.",\n    "She swallowed the cat to catch the bird.",\n    "She swallowed the dog to catch the cat.",\n    "She swallowed the goat to catch the dog.",\n    "She swallowed the cow to catch the goat."\n  ]\n\nend	\N	\N	0	1	2013-11-27 15:34:57	2013-11-27 15:34:57	106	food_chain.rb
204	48	956a9db3dc5d6461a54c3957	superseded	ruby	food-chain	class FoodChainSong\n\n  def verse n\n    raise ArgumentError unless (1..8).include? n\n\n    animals = (1..n).map { |i| Animal.new(i) }\n    animal = animals.last\n    explanations = animals.map { |a| a.explanation }.reverse.join("\\n") + "\\n" unless animal.last?\n\n    # animal = ANIMALS[n-1]\n    # premisces = PREMISCES[animal].to_s + "\\n" unless animal == 'fly'\n    # explanations = EXPLANATIONS[0..(n-1)].reverse.join("\\n") + "\\n" unless animal == 'horse'\n\n    "I know an old lady who swallowed a #{animal.name}.\\n" +\n      "#{premisces.premisces}" +\n      "#{explanations}"\n  end\n\n  def verses n, m\n    (n..m).map { |i| verse i }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses 1, 8\n  end\n\n\nend\n\nclass Animal\n\n  attr_reader :name\n\n  def initialize(n)\n    @name = NAMES[n-1]\n  end\n\n  def premisce\n    return PREMISCES[name] + "\\n" if PREMISCES[name]\n    ""\n  end\n\n  def explanation\n    EXPLANATIONS[name]\n  end\n\n  def last?\n    name == 'horse'\n  end\n\n  NAMES = %w(fly spider bird cat dog goat cow horse)\n\n  PREMISCES = {\n    'fly'    => nil,\n    'spider' => "It wriggled and jiggled and tickled inside her.",\n    'bird'   => "How absurd to swallow a bird!",\n    'cat'    => "Imagine that, to swallow a cat!",\n    'dog'    => "What a hog, to swallow a dog!",\n    'goat'   => "Just opened her throat and swallowed a goat!",\n    'cow'    => "I don't know how she swallowed a cow!",\n    'horse'  => "She's dead, of course!"\n  }\n\n  EXPLANATIONS = [\n    'fly'    => "I don't know why she swallowed the fly. Perhaps she'll die.",\n    'spider' => "She swallowed the spider to catch the fly.",\n    'bird'   => "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.",\n    'cat'    => "She swallowed the cat to catch the bird.",\n    'dog'    => "She swallowed the dog to catch the cat.",\n    'goat'   => "She swallowed the goat to catch the dog.",\n    'cow'    => "She swallowed the cow to catch the goat."\n  ]\n\nend	\N	\N	0	2	2013-12-20 23:17:01	2013-12-20 23:17:01	106	food_chain.rb
205	48	4eb13200854428cc43c7c063	pending	ruby	food-chain	class FoodChainSong\n\n  def verse n\n    raise ArgumentError unless (1..8).include? n\n    Animal.new(n).story\n  end\n\n  def verses n, m\n    (n..m).map { |i| verse i }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses 1, 8\n  end\n\nend\n\nclass Animal\n\n  attr_reader :name\n\n  def initialize(n)\n    @name = NAMES[n-1]\n  end\n\n  def story\n    "I know an old lady who swallowed a #{name}.\\n" +\n      "#{premisces}" +\n      "#{explanations}"\n  end\n\n  private\n\n  def premisces\n    PREMISCES[name] + "\\n" if PREMISCES[name]\n  end\n\n  def explanations\n    id = NAMES.index(name)\n    NAMES[0..id].map { |name| EXPLANATIONS[name] }.reverse.join("\\n") + "\\n" unless name == 'horse'\n  end\n\n  NAMES = %w(fly spider bird cat dog goat cow horse)\n\n  PREMISCES = {\n    'fly'    => nil,\n    'spider' => "It wriggled and jiggled and tickled inside her.",\n    'bird'   => "How absurd to swallow a bird!",\n    'cat'    => "Imagine that, to swallow a cat!",\n    'dog'    => "What a hog, to swallow a dog!",\n    'goat'   => "Just opened her throat and swallowed a goat!",\n    'cow'    => "I don't know how she swallowed a cow!",\n    'horse'  => "She's dead, of course!"\n  }\n\n  EXPLANATIONS = {\n    'fly'    => "I don't know why she swallowed the fly. Perhaps she'll die.",\n    'spider' => "She swallowed the spider to catch the fly.",\n    'bird'   => "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.",\n    'cat'    => "She swallowed the cat to catch the bird.",\n    'dog'    => "She swallowed the dog to catch the cat.",\n    'goat'   => "She swallowed the goat to catch the dog.",\n    'cow'    => "She swallowed the cow to catch the goat."\n  }\n\n  private_constant :PREMISCES, :EXPLANATIONS, :NAMES\n\nend	\N	\N	0	3	2014-01-22 16:45:13	2014-01-22 16:45:13	106	food_chain.rb
206	48	bea9879ef0dba9d02d8a901a	pending	javascript	phone-number	function PhoneNumber(no_as_string) {\n\n  this.no_as_string = no_as_string;\n  this.n = "0000000000";\n\n  this.init = function() {\n    this.n = this.no_as_string.replace(/[^0-9]/g, "")\n    if (this.n.length == 11 && this.n[0] == 1) {\n      this.n = this.n.substring(1, 11)\n    } else {\n      if (this.n.length > 10 || this.n.length < 10) {\n        this.n = "0000000000"\n      }\n    }\n  }\n\n  this.number = function() {\n    return this.n;\n  }\n\n  this.areaCode = function() {\n    return this.n.substring(0, 3);\n  }\n\n  this.toString = function() {\n    return "(" + this.n.substring(0, 3) + ") " + this.n.substring(3, 6) + "-" + this.n.substring(6, 10)\n  }\n  this.init();\n}\n\nmodule.exports = PhoneNumber;	\N	\N	0	1	2014-06-10 04:42:19	2014-06-10 04:42:19	107	phone-number.js
207	48	a1bc426f8d871bf06772399d	pending	ruby	scrabble-score	class Scrabble\n  def initialize(word)\n    @word = word || ""\n    @values = { 1 =>  ['A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T'],\n                2 =>  ['D', 'G'],\n                3 =>  ['B', 'C', 'M', 'P'],\n                4 =>  ['F', 'H', 'V', 'W', 'Y'],\n                5 =>  ['K'],\n                8 =>  ['J', 'X'],\n                10 => ['Q', 'Z']\n              }\n  end\n\n  def score\n    result = 0\n    @word.split('').each do |letter|\n      @values.each do |k, v|\n        if v.include?(letter.upcase)\n          result += k\n        end\n      end\n    end\n    result\n  end\n\n  def self.score(word)\n    Scrabble.new(word).score\n  end\nend	\N	\N	0	1	2014-03-01 03:13:15	2014-03-01 03:13:15	108	scrabble.rb
210	48	c4a4cbd21582794785e376ed	superseded	python	robot-name	import random\n\nclass Robot(object):\n    _seq = None\n\n    @classmethod\n    def name_code(cls):\n        """ for each char: (number of possible values, int-to-chr conversion func) """\n        toalpha = lambda x: chr(x+65)\n        return ( (26, toalpha), \n                 (26, toalpha),\n                 (10, str),\n                 (10, str),\n                 (10, str), )\n\n    \n    @classmethod\n    def _sequence(cls):\n        if cls._seq == None:\n            #multiply bases together for max number of names\n            maxlength = reduce( lambda a, (k,v) : a * k, cls.name_code(), 1)\n            cls._seq = RandomSequence(maxlength)\n\n        return cls._seq\n\n    @classmethod\n    def _newkey(cls):\n        return cls._sequence().next()\n\n\n    @classmethod\n    def _gen_name(cls):\n        key = cls._newkey()\n\n        name_chars = []\n\n        for base, f in reversed(cls.name_code()):\n            # mod and divide starting at lowest base\n            # and call each base's conversion function\n            name_chars.append( f(key % base) )\n            key = key / base\n\n        return "".join(reversed(name_chars) )\n\n\n    def __init__(self):\n        self.reset()\n\n\n    def reset(self):\n        self.name = self.__class__._gen_name()\n\n   \nclass RandomSequence(object):\n    """ Generates a random sequence of a given length with no repeats using\n        Fisher–Yates shuffle\n        (http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) """\n\n    def __init__(self, maxlength):\n        self.maxlength = maxlength\n\n        def swap(l, i, j): \n            t = l[i]\n            l[i] = l[j]\n            l[j] = t\n\n        self._seq = [x for x in xrange(maxlength)]\n\n        for i in xrange(len(self._seq) - 1, 0, -1):\n            swap(self._seq, i, random.randint(0, i-1) )\n\n        self._iter = iter(self._seq)\n\n    def next(self):\n        return next(self._iter)	\N	\N	0	1	2014-03-25 18:51:06	2014-03-25 18:51:06	111	robot.py
211	48	9a0692050457d73ebf9ec190	pending	python	robot-name	import random\n\nclass Robot(object):\n    _seq = None\n\n    @classmethod\n    def name_code(cls):\n        """ for each char: (number of possible values, int-to-chr conversion func) """\n        toalpha = lambda x: chr(x+65)\n        return ( (26, toalpha), \n                 (26, toalpha),\n                 (10, str),\n                 (10, str),\n                 (10, str), )\n\n    \n    @classmethod\n    def _sequence(cls):\n        if cls._seq == None:\n            #multiply bases together for max number of names\n            maxlength = reduce( lambda a, (k,v) : a * k, cls.name_code(), 1)\n            cls._seq = RandomSequence(maxlength)\n\n        return cls._seq\n\n    @classmethod\n    def _newkey(cls):\n        return cls._sequence().next()\n\n\n    @classmethod\n    def _gen_name(cls):\n        key = cls._newkey()\n\n        name_chars = []\n\n        for base, f in reversed(cls.name_code()):\n            # mod and divide starting at lowest base\n            # and call each base's conversion function\n            name_chars.append( f(key % base) )\n            key = key / base\n\n        return "".join(reversed(name_chars) )\n\n\n    def __init__(self):\n        self.reset()\n\n\n    def reset(self):\n        self.name = self.__class__._gen_name()\n\n   \nclass RandomSequence(object):\n    """ Generates a random sequence of a given length with no repeats using\n        Fischer-Yates Shuffle \n        (http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) """\n\n    def __init__(self, maxlength):\n        self.maxlength = maxlength\n\n        def swap(lst, i, j): \n            lst[i], lst[j] = lst[j], lst[i]\n\n        self._seq = [x for x in xrange(maxlength)]\n\n        for i in xrange(len(self._seq) - 1, 0, -1):\n            swap(self._seq, i, random.randint(0, i) )\n\n        self._iter = iter(self._seq)\n\n    def next(self):\n        return next(self._iter)	\N	\N	0	2	2014-05-18 03:51:17	2014-05-18 03:51:17	111	robot.py
212	48	a4df2f52b5322e76772faec1	superseded	haskell	word-count	module WordCount where\r\nimport Data.Char (isAlphaNum, toLower)\r\nimport Data.List (group, sort)\r\nimport Data.Map (Map, fromList)\r\n\r\nwordCount :: String -> Map String Int\r\nwordCount s = fromList (map toOccurencesPair (groupDuplicates s))\r\n\r\ngroupDuplicates :: String -> [[String]]\r\ngroupDuplicates s = group (sort (words (map convertChar s)))\r\n  where\r\n    convertChar c | isAlphaNum c = (toLower c)\r\n                  | otherwise    = ' '\r\n\r\ntoOccurencesPair :: [String] -> (String, Int)\r\ntoOccurencesPair xs = (head xs, length xs)\r	\N	\N	0	2	2014-02-13 17:38:40	2014-02-13 17:38:40	112	wordcount.hs
213	48	b2b94b36a1cb39d2769ec539	superseded	haskell	word-count	module WordCount where\r\nimport Data.Char (isAlphaNum, toLower)\r\nimport Data.List (group, sort)\r\nimport Data.List.Split (wordsBy)\r\nimport Data.Map (Map, fromList)\r\n\r\nwordCount :: String -> Map String Int\r\nwordCount s = fromList (map toOccurencesPair (groupDuplicates s))\r\n\r\ngroupDuplicates :: String -> [[String]]\r\ngroupDuplicates s = group (sort (wordsBy (not . isAlphaNum) (map toLower s)))\r\n\r\ntoOccurencesPair :: [String] -> (String, Int)\r\ntoOccurencesPair xs = (head xs, length xs)\r	\N	\N	0	3	2014-02-15 19:01:28	2014-02-15 19:01:28	112	wordcount.hs
214	48	0a8d24ff9ba8f2391141fedf	superseded	haskell	word-count	module WordCount where\r\nimport Data.Char (isAlphaNum, toLower)\r\nimport Data.List (group, sort)\r\nimport Data.Map (Map, fromList)\r\n\r\nwordCount :: String -> Map String Int\r\nwordCount s = fromList (map toOccurencesPair (groupDuplicates s))\r\n\r\ngroupDuplicates :: String -> [[String]]\r\ngroupDuplicates s = group (sort (words (map convertChar s)))\r\n\r\ntoOccurencesPair :: [String] -> (String, Int)\r\ntoOccurencesPair xs = (head xs, length xs)\r\n\r\nconvertChar :: Char -> Char\r\nconvertChar c | isAlphaNum c = (toLower c)\r\n              | otherwise    = ' '\r	\N	\N	0	1	2014-04-11 16:11:08	2014-04-11 16:11:08	112	wordcount.hs
215	48	67b0ef8e85249b9f96b98c65	superseded	haskell	word-count	module WordCount (wordCount) where\r\nimport Data.Char (isAlphaNum, toLower)\r\nimport Data.List.Split (wordsBy)\r\nimport Data.Map (Map, fromListWith)\r\n\r\nwordCount :: String -> Map String Int\r\nwordCount = fromListWith (+) . map (\\w -> (map toLower w, 1)) . wordsBy (not . isAlphaNum)\r	\N	\N	0	4	2014-05-06 03:00:00	2014-05-06 03:00:00	112	wordcount.hs
216	48	9579c8aefb24ee8bf200ba1a	pending	haskell	word-count	module WordCount (wordCount) where\r\nimport Data.Char (isAlphaNum, toLower)\r\nimport Data.List.Split (wordsBy)\r\nimport Data.Map.Strict (Map, fromListWith)\r\n\r\nwordCount :: String -> Map String Int\r\nwordCount = fromListWith (+) . map (\\w -> (map toLower w, 1)) . wordsBy (not . isAlphaNum)\r	\N	\N	0	5	2014-05-17 13:50:14	2014-05-17 13:50:14	112	wordcount.hs
217	48	11dcb0d86f97189e161cafc6	pending	python	bob	import re\n\n\nclass Bob():\n\n    def hey(self, words):\n\n        # Am I being ignored?\n        # (Only whitespace or empty)\n        if re.search(r'^[\\s]*$', words):\n            return 'Fine. Be that way!'\n\n        # Am I being yelled at?\n        # (No lowercase present)\n        elif re.search(r'^[^a-z\\xe0-\\xff]+$', words) and re.search(r'[A-Z\\xc0-\\xdf]', words):\n            return 'Woah, chill out!'\n\n        # Am I being questioned?\n        # (Ends with a question mark)\n        elif re.search(r'.*\\?$', words):\n            return 'Sure.'\n\n        # Am I being engaged in boring conversation?\n        # (Anything else)\n        # elif re.match(r'\\S', words):\n        #    return 'Whatever.'\n        else:\n            return 'Whatever.'	\N	\N	0	1	2013-12-17 23:35:39	2013-12-17 23:35:39	113	bob.py
218	48	5eb653cb6b6165ded084709b	pending	python	house	"""This is the House that Jack Built"""\n\nfrom collections import namedtuple\n\n\nPhrase = namedtuple("Phrase", ["verb", "noun"])\n\nphrases = [\n    Phrase("lay in", "the house that Jack built"),\n    Phrase("ate", "the malt"),\n    Phrase("killed", "the rat"),\n    Phrase("worried", "the cat"),\n    Phrase("tossed", "the dog"),\n    Phrase("milked", "the cow with the crumpled horn"),\n    Phrase("kissed", "the maiden all forlorn"),\n    Phrase("married", "the man all tattered and torn"),\n    Phrase("woke", "the priest all shaven and shorn"),\n    Phrase("kept", "the rooster that crowed in the morn"),\n    Phrase("belonged to", "the farmer sowing his corn"),\n    Phrase(None, "the horse and the hound and the horn")\n]\n\n\ndef rhyme():\n    return "\\n\\n".join(stanza(i) for i in xrange(len(phrases)))\n\n\ndef stanza(nth):\n    lines = ["This is {}".format(phrases[nth].noun)]\n    lines.extend(\n        "that {} {}".format(phrases[i].verb, phrases[i].noun)\n        for i in xrange(nth - 1, -1, -1)\n    )\n    lines[-1] += "."\n    return "\\n".join(lines)	\N	\N	0	1	2014-01-04 12:59:49	2014-01-04 12:59:49	114	house.py
219	48	918a287ea2e736a9173f5d9d	superseded	objective-c	bob	#import "Bob.h"\n#import "NSString+ConversationMethods.h"\n\nstatic NSString *const kMyResponseToSilence = @"Fine, be that way.";\nstatic NSString *const kMyResponseToYellingInAllCaps = @"Woah, chill out!";\nstatic NSString *const kMyResponseToQuestion = @"Sure.";\nstatic NSString *const kMyDefaultResponse = @"Whatever.";\n\n@implementation Bob\n\n-(id)hey:(NSString *)whatTheySaid {\n    \n    NSString *myResponse = kMyDefaultResponse;\n    \n    if([whatTheySaid isBlank]) { myResponse = kMyResponseToSilence; }\n    else if ([whatTheySaid isYellingInAllCaps]) { myResponse = kMyResponseToYellingInAllCaps; }\n    else if ([whatTheySaid endsWithQuestionMark]) { myResponse = kMyResponseToQuestion; }\n    \n    return myResponse;\n}\n\n@end	\N	\N	0	1	2014-01-09 21:45:02	2014-01-09 21:45:02	115	Bob.m
220	48	507d30f8a65fff8d7fa4ebdf	pending	objective-c	bob	#import "Bob.h"\n#import "NSString+ConversationMethods.h"\n\nstatic NSString *const kMyResponseToSilence = @"Fine, be that way.";\nstatic NSString *const kMyResponseToYellingInAllCaps = @"Woah, chill out!";\nstatic NSString *const kMyResponseToQuestion = @"Sure.";\nstatic NSString *const kMyDefaultResponse = @"Whatever.";\n\n@implementation NSString (ConversationMethods)\n\n-(BOOL)isBlank {\n    return [[self stringByReplacingOccurrencesOfString:@" " withString:@""] length] == 0;\n}\n\n-(BOOL)containsLowercase {\n    return [self rangeOfCharacterFromSet:[NSCharacterSet lowercaseLetterCharacterSet]].location != NSNotFound;\n}\n\n-(BOOL)containsUppercase {\n    return [self rangeOfCharacterFromSet:[NSCharacterSet uppercaseLetterCharacterSet]].location != NSNotFound;\n}\n\n-(BOOL)endsWithQuestionMark {\n    return [self rangeOfString:@"?" options:NSBackwardsSearch range:NSMakeRange([self length]-1, 1)].location != NSNotFound;\n}\n\n-(BOOL)isYellingInAllCaps {\n    return [self containsUppercase] && ![self containsLowercase];\n}\n\n@end\n\n@implementation Bob\n\n-(id)hey:(NSString *)whatTheySaid {\n    \n    NSString *myResponse = kMyDefaultResponse;\n    \n    if([whatTheySaid isBlank]) { myResponse = kMyResponseToSilence; }\n    else if ([whatTheySaid isYellingInAllCaps]) { myResponse = kMyResponseToYellingInAllCaps; }\n    else if ([whatTheySaid endsWithQuestionMark]) { myResponse = kMyResponseToQuestion; }\n    \n    return myResponse;\n}\n\n@end	\N	\N	0	2	2014-04-22 03:43:32	2014-04-22 03:43:32	115	Bob.m
221	48	3d178e53deda52bc386ed7c5	pending	ruby	etl	class ETL\n\tdef self.transform(input={})\n\t\thash={}\n\t\tinput.each do |key,value|\t\n\t\t\tvalue.each do |v|\n\t\t\t\thash[v.downcase()] = key\n\t\t\tend\n\t\tend\n\t\treturn hash\n\tend\nend	\N	\N	0	1	2014-01-11 01:46:50	2014-01-11 01:46:50	116	etl.rb
222	48	b886837dc51948a135573e5c	pending	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      is_silent?(phrase) ->\n        "Fine. Be that way!"\n      is_yell?(phrase) ->\n        "Woah, chill out!"\n      is_question?(phrase) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp is_silent?(phrase) do\n    String.strip(phrase) == ""\n  end\n\n  defp is_yell?(phrase) do\n    String.upcase(phrase) == phrase\n  end\n\n  defp is_question?(phrase) do\n    String.ends_with?(phrase, "?")\n  end\nend	\N	\N	0	3	2013-12-06 01:33:42	2013-12-06 01:33:42	117	bob.exs
223	48	1cf73b5cc9dbb96cdd419761	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      String.strip(phrase) == "" ->\n        "Fine. Be that way!"\n      String.upcase(phrase) == phrase ->\n        "Woah, chill out!"\n      String.ends_with?(phrase, "?") ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\nend	\N	\N	0	1	2013-12-11 04:46:43	2013-12-11 04:46:43	117	bob.exs
224	48	f91a2cf234a04dcacb5657ee	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      is_silent(phrase) ->\n        "Fine. Be that way!"\n      is_yell(phrase) ->\n        "Woah, chill out!"\n      is_question(phrase) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp is_silent(phrase) do\n    String.strip(phrase) == ""\n  end\n\n  defp is_yell(phrase) do\n    String.upcase(phrase) == phrase\n  end\n\n  defp is_question(phrase) do\n    String.ends_with?(phrase, "?")\n  end\nend	\N	\N	0	2	2014-01-04 18:28:22	2014-01-04 18:28:22	117	bob.exs
225	48	7a95a8836ba6c0f30434ad92	pending	haskell	bob	-- Bob.hs\n--\n\nmodule Bob where\n\nimport Data.Char\n\nhasUpper :: String -> Bool\nhasUpper = any (\\c -> isUpper c)\n\nnoLower :: String -> Bool\nnoLower = all (\\c -> (not . isLower) c)\n\nisShouting :: String -> Bool\nisShouting s = hasUpper s && noLower s\n\nresponseFor :: String -> String\nresponseFor s\n  | fs == "" = "Fine. Be that way!"\n  | isShouting fs = "Woah, chill out!"\n  | last fs == '?' = "Sure."\n  | otherwise = "Whatever."\n  where fs = filter (\\x -> (not . isSpace) x) s	\N	\N	0	2	2013-12-12 20:36:18	2013-12-12 20:36:18	118	Bob.hs
226	48	5fd1a744733165c4127980bb	superseded	haskell	bob	-- Bob.hs\n--\n\nmodule Bob where\n\nimport Data.Char\n\nhasUpper :: String -> Bool\nhasUpper = foldl (\\b c -> b || isUpper c) False\n\nnoLower :: String -> Bool\nnoLower = foldl (\\x c -> x && (not $ isLower c) ) True\n\nisShouting :: String -> Bool\nisShouting s = hasUpper s && noLower s\n\nresponseFor :: String -> String\nresponseFor s\n  | fs == "" = "Fine. Be that way!"\n  | isShouting fs = "Woah, chill out!"\n  | last fs == '?' = "Sure."\n  | otherwise = "Whatever."\n  where fs = filter (\\x -> not $ isSpace x) s	\N	\N	0	1	2014-04-18 18:12:21	2014-04-18 18:12:21	118	Bob.hs
227	48	c60a1a5c1bdd85ae564a3b8e	pending	haskell	point-mutations	module DNA(hammingDistance) where\n\nimport Data.List\n\nhammingDistance :: String -> String -> Int\nhammingDistance x y = sum $ map (fromEnum . not) $ zipWith (==) x y	\N	\N	0	2	2013-12-12 16:23:08	2013-12-12 16:23:08	119	DNA.hs
228	48	48463f8b525483c7ef454dbc	superseded	haskell	point-mutations	module DNA(hammingDistance) where\n\nimport Data.List\n\nhammingDistance :: String -> String -> Integer\nhammingDistance x y = foldl' isFalse 0 . zipWith (==) x y\n                    where isFalse acc x = if not x then acc + 1 else acc	\N	\N	0	1	2014-03-15 15:19:29	2014-03-15 15:19:29	119	DNA.hs
229	25	f67c39bb8b20e0f1a160bf32	superseded	haskell	binary	module Binary ( toDecimal\n              ) where\n\nimport Data.Maybe(fromMaybe)\n\ntoDecimal ::  String -> Integer\ntoDecimal = sum . zipWith (*) digitValues . reverse . fromMaybe [] . toDigits\n\ndigitValues ::  [Integer]\ndigitValues = 1 : map (*2) digitValues\n\ntoDigits ::  String -> Maybe [Integer]\ntoDigits = sequence . map toDig\n    where toDig '0' = Just 0\n          toDig '1' = Just 1\n          toDig  _  = Nothing	\N	\N	0	1	2014-04-08 21:31:39	2014-04-08 21:31:39	120	Binary.hs
231	25	125312315a0462371e0d00d7	superseded	haskell	binary	module Binary ( toDecimal\n              ) where\n\nimport Data.Maybe(fromMaybe)\nimport Data.List(foldl')\n\ntoDecimal ::  String -> Integer\ntoDecimal = foldl' handleDigit 0 . fromMaybe [] . toDigits\n    where handleDigit soFar digit = soFar * 2 + digit\n\ntoDigits ::  String -> Maybe [Integer]\ntoDigits = sequence . map toDig\n    where toDig '0' = Just 0\n          toDig '1' = Just 1\n          toDig  _  = Nothing	\N	\N	0	2	2014-07-05 08:14:47	2014-07-05 08:14:47	120	Binary.hs
232	25	7966fa25057200f77a8d2a4f	pending	javascript	beer-song	function Beer(){};\r\n\r\nBeer.verse = function(count){\r\n\tnewCount = count - 1;\r\n\tnewCount > 1 ? newS = "s" : newS = "";\r\n\tcount != 1 ? oldS = "s" : oldS = "";\r\n\tif(newCount === 0){\r\n\t\treturn count + " bottle of beer on the wall, " + count + " bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\r\n\t}else if(count === 0){\r\n\t\treturn "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\r\n\t}else{\r\n\t\treturn count + " bottle" + oldS + " of beer on the wall, " + count + " bottle" + oldS + " of beer.\\nTake one down and pass it around, " + newCount + " bottle" + newS + " of beer on the wall.\\n";\r\n\t};\r\n}\r\n\r\nBeer.sing = function(startCount, endCount){\r\n\tsong = [];\r\n\tif(endCount === undefined){endCount = 0};\r\n\tfor(var i = startCount; i >= endCount; i--){\r\n\t\tsong.push(Beer.verse(i));\r\n\t}\r\n\treturn song.join("\\n");\r\n}\r\n\r\nmodule.exports = Beer;	\N	\N	0	1	2014-06-01 08:04:43	2014-06-01 08:04:43	121	beer-song.js
233	25	1194fa27e641503d667ff095	pending	javascript	anagram	var isAnagram = function(str1, str2) {\n\n\tif ((typeof str1 == 'string' || str1 instanceof String) &&\n\t\t((typeof str2 == 'string' || str2 instanceof String))) {\n\n\t\tif (str1.length != str2.length) {\n\t\t\treturn false;\n\t\t} else {\n\n\t\t\tif (str1.split("").sort() != str2.split("").sort()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n};\n\nvar Anagram = function(word) {\n\n\tthis.match = function(words) {\n\t\tif (Object.prototype.toString.call(words) === '[object Array]') {\n\n\t\t\tvar anagrams = [];\n\n\t\t\tfor (var i = 0; i < words.length; ++i) {\n\t\t\t\tif (isAnagram(word, words[i])) {\n\t\t\t\t\tanagrams.push(words[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn anagrams;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n};\n\nmodule.exports = Anagram;	\N	\N	0	1	2014-04-18 08:31:26	2014-04-18 08:31:26	122	anagram.js
234	25	54aa73c88cdf28ca79d78353	pending	elixir	grains	defmodule Grains do\n\n\t@doc """\n\tCalculate two to the power of the input minus one.\n\t"""\n\n\t@spec square(pos_integer) :: pos_integer\n\tdef square(number, acc \\\\ 1) do\n\t\tif number <= 1, do: acc, \n\t\telse: square(number - 1, acc * 2)\n\tend\n\n\t@doc """\n\tAdds square of each number from 1 to 64.\n\t"""\n\n\t@spec total :: pos_integer\n\tdef total do\n\t\tEnum.reduce Range.new(1,64), 0, fn(x, a) -> a + square(x) end\n\tend\n\nend\t	\N	\N	0	1	2014-03-30 12:46:56	2014-03-30 12:46:56	123	grains.exs
235	25	9029257e85087b5d234aead2	pending	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    string = ""\n    string << "Pling" if number % 3 == 0\n    string << "Plang" if number % 5 == 0\n    string << "Plong" if number % 7 == 0\n    string = number.to_s if string.empty?\n    string\n  end\nend	\N	\N	0	1	2014-05-26 09:33:10	2014-05-26 09:33:10	124	raindrops.rb
236	25	770f766af7b9a0d6c2de9399	pending	perl5	proverb	package Proverb;\nuse Modern::Perl;\n\nsub proverb {\n    my ( $lost_items_aref, $qualifier ) = @_;\n\n    my @i = @{$lost_items_aref};\n    my $last = $qualifier ? "$qualifier $i[0]" : $i[0];\n\n    my @r = map { "For want of a $i[$_-1] the $i[$_] was lost." }\n            1 .. $#i;\n\n    return join "\\n", @r, "And all for the want of a $last.";\n}\n\n1;	\N	\N	0	1	2014-04-05 16:01:51	2014-04-05 16:01:51	125	Proverb.pm
237	25	825682d2525a20172ce9642e	superseded	clojure	bob	(ns bob)\n\n(require '[clojure.string :as cs])\n\n(defn- silence? [msg]\n  (cs/blank? msg))\n\n(defn- question? [msg]\n  (.endsWith msg "?"))\n\n(defn- yell? [msg]\n  (and\n    (=    (.toUpperCase msg) msg)\n    (not= (.toLowerCase msg) msg)))\n\n\n(defn response-for\n  "Bob the lackadaisical teenager responds to msg"\n  [msg]\n  (cond\n    (silence? msg)  "Fine. Be that way!"\n    (yell? msg)     "Woah, chill out!"\n    (question? msg) "Sure."\n    :else           "Whatever."))	\N	\N	0	1	2014-04-05 00:55:45	2014-04-05 00:55:45	126	bob.clj
238	25	c5247c515cacbf9f4aaa8bd5	superseded	clojure	bob	(ns bob (require '[clojure.string :as cs]))\n\n(defn- silence? [msg]\n  (cs/blank? msg))\n\n(defn- question? [msg]\n  (.endsWith msg "?"))\n\n(defn- yell? [msg]\n  (and\n    (=    (.toUpperCase msg) msg)\n    (not= (.toLowerCase msg) msg)))\n\n\n(defn response-for\n  "Bob the lackadaisical teenager responds to msg"\n  [msg]\n  (cond\n    (silence? msg)  "Fine. Be that way!"\n    (yell? msg)     "Woah, chill out!"\n    (question? msg) "Sure."\n    :else           "Whatever."))	\N	\N	0	2	2014-04-21 08:13:42	2014-04-21 08:13:42	126	bob.clj
239	25	51ada6036f0a0adb2a6392f2	superseded	clojure	bob	(ns bob (:require [clojure.string :as cs]))\n\n(defn- silence? [msg]\n  (cs/blank? msg))\n\n(defn- question? [msg]\n  (.endsWith msg "?"))\n\n(defn- yell? [msg]\n  (and\n    (=    (.toUpperCase msg) msg)\n    (not= (.toLowerCase msg) msg)))\n\n\n(defn response-for\n  "Bob the lackadaisical teenager responds to msg"\n  [msg]\n  (cond\n    (silence? msg)  "Fine. Be that way!"\n    (yell? msg)     "Woah, chill out!"\n    (question? msg) "Sure."\n    :else           "Whatever."))	\N	\N	0	3	2014-05-18 12:12:47	2014-05-18 12:12:47	126	bob.clj
240	25	983c1fe01a8c9caa055cc1cb	pending	clojure	bob	(ns bob (:require [clojure.string :refer [blank? lower-case upper-case]]))\n\n(defn- question? [msg]\n  (.endsWith msg "?"))\n\n(defn- yell? [msg]\n  (and\n    (=    (upper-case msg) msg)\n    (not= (lower-case msg) msg)))\n\n\n(defn response-for\n  "Bob the lackadaisical teenager responds to msg"\n  [msg]\n  (cond\n    (blank? msg)  "Fine. Be that way!"\n    (yell? msg)     "Woah, chill out!"\n    (question? msg) "Sure."\n    :else           "Whatever."))	\N	\N	0	4	2014-06-09 06:09:45	2014-06-09 06:09:45	126	bob.clj
241	6	c8ba25e54cabd3213d80beb1	superseded	ruby	bob	class Bob\n  RESPONSE_TO = {\n    question: "Sure.",\n    yell: "Woah, chill out!",\n    blank: "Fine. Be that way.",\n    default: "Whatever."\n  }.freeze\n\n  def hey(str)\n    RESPONSE_TO[key_for(str)]\n  end\n\n  private\n\n  def key_for(str)\n    return :blank    if empty?(str)\n    return :yell     if yelling?(str)\n    return :question if question_in?(str)\n    :default\n  end\n\n  def question_in?(str)\n    str[-1] == "?"\n  end\n\n  def yelling?(str)\n    str.to_s.upcase == str.to_s\n  end\n\n  def empty?(str)\n    str.nil? || str == ""\n  end\nend	\N	\N	0	1	2014-05-03 09:20:12	2014-05-03 09:20:12	127	bob.rb
242	6	07dc0337b39c525c4934e0ec	superseded	ruby	bob	class Bob\n  def hey(str)\n    return "Fine. Be that way." if empty?(str)\n    return "Woah, chill out!"   if yelling?(str)\n    return "Sure."              if is_a_question?(str)\n    "Whatever."\n  end\n\n  private\n\n  def is_a_question?(str)\n    str[-1] == "?"\n  end\n\n  def yelling?(str)\n    str.to_s.upcase == str.to_s\n  end\n\n  def empty?(str)\n    str.nil? || str == ""\n  end\nend	\N	\N	0	2	2014-05-25 23:15:09	2014-05-25 23:15:09	127	bob.rb
243	6	5ed9c9ccf75b402bd688ea9f	superseded	ruby	bob	class Bob\n  def hey(statement)\n    if silence?(statement)\n      "Fine. Be that way."\n    elsif yelling?(statement)\n      "Woah, chill out!"\n    elsif question?(statement)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def question?(statement)\n    statement.end_with?("?")\n  end\n\n  def yelling?(statement)\n    statement.upcase == statement\n  end\n\n  def silence?(statement)\n    statement.to_s == ""\n  end\nend	\N	\N	0	4	2014-06-05 22:22:06	2014-06-05 22:22:06	127	bob.rb
244	6	57421198fc56270cb2ff078e	superseded	ruby	bob	class Bob\n  def hey(statement)\n    return "Fine. Be that way." if silence?(statement)\n    return "Woah, chill out!"   if yelling?(statement)\n    return "Sure."              if question?(statement)\n    "Whatever."\n  end\n\n  private\n\n  def question?(statement)\n    statement.end_with?("?")\n  end\n\n  def yelling?(statement)\n    statement.to_s.upcase == statement.to_s\n  end\n\n  def silence?(statement)\n    statement.nil? || statement == ""\n  end\nend	\N	\N	0	3	2014-07-01 05:16:46	2014-07-01 05:16:46	127	bob.rb
245	6	a2a817f62971e0e51a01d599	pending	ruby	bob	class Bob\n  def hey(statement)\n    if silence?(statement)\n      "Fine. Be that way."\n    elsif yelling?(statement)\n      "Woah, chill out!"\n    elsif question?(statement)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def question?(statement)\n    statement.end_with?("?")\n  end\n\n  def yelling?(statement)\n    statement.upcase == statement\n  end\n\n  def silence?(statement)\n    statement.to_s.empty?\n  end\nend	\N	\N	0	5	2014-07-13 06:14:19	2014-07-13 06:14:19	127	bob.rb
246	6	d13113b696f14d86ed573c8c	superseded	ruby	linked-list	class Deque\n\n  def push data\n    @last = build data\n  end\n\n  def pop\n    unwire @last\n    data, @last = @last.data, @last.parent\n    data\n  end\n\n  def unshift data\n    @first = build data\n  end\n\n  def shift\n    unwire @first\n    data, @first = @first.data, @first.child\n    data\n  end\n\n  private\n\n  def build data\n    elem = Element.new(data, @first, @last)\n    @first ||= elem\n    @last ||= elem\n    @last.child, @first.parent = [elem] * 2\n    elem\n  end\n\n  def unwire elem\n    elem.parent.child = elem.parent\n    elem.child.parent = elem.child\n  end\n\n  private\n\n  class Element < Struct.new(:data, :parent, :child); end\n\nend	\N	\N	0	1	2014-05-02 01:58:26	2014-05-02 01:58:26	128	linked_list.rb
247	6	cc9ec54028fecb9a0797e741	pending	ruby	linked-list	class Deque\n\n  def push data\n    @last = build data\n  end\n\n  def pop\n    @last.unlink\n    data, @last = @last.data, @last.succ\n    data\n  end\n\n  def unshift data\n    @first = build data\n  end\n\n  def shift\n    @first.unlink\n    data, @first = @first.data, @first.pred\n    data\n  end\n\n  private\n\n  def build data\n    elem = Element.new(data, @first, @last)\n    @first ||= elem\n    @last ||= elem\n    @last.pred, @first.succ = [elem] * 2\n    elem\n  end\n\n  private\n\n  class Element < Struct.new(:data, :pred, :succ)\n    def unlink\n      succ.pred = succ\n      pred.succ = pred\n    end\n  end\n\nend	\N	\N	0	2	2014-05-02 14:14:36	2014-05-02 14:14:36	128	linked_list.rb
248	22	dde3e8aaa4337076e9d35e28	pending	python	bob	class Bob():\n    def hey(self, s):\n        s = s.strip()\n        excl = 'Woah, chill out!'\n        ques = 'Sure.'\n        whatever = 'Whatever.'\n        silent = 'Fine. Be that way!'\n        numbers = [str(n) for n in range(10)]\n        num_numbers = len([c for c in s if c in numbers])\n        is_mostly_numbers = (num_numbers / (len(s) + 0.5)) > 0.3\n        if not s:\n            return silent\n        elif s.upper() == s and not is_mostly_numbers:\n            return excl\n        elif s.endswith('?'):\n            return ques\n        elif is_mostly_numbers:\n            return whatever\n        elif s.endswith('!') and s.upper() == s:\n            return excl\n        else:\n            return whatever	\N	\N	0	1	2014-03-01 23:07:49	2014-03-01 23:07:49	129	bob.py
249	22	7da529e3a4e1ab28e0e5fef4	pending	ruby	bob	class Bob\n  def hey(message)\n    message = Message.new(message)\n\n    return 'Fine. Be that way!' if message.blank?\n    return 'Woah, chill out!' if message.shouting?\n    return 'Sure.' if message.question?\n\n    'Whatever.'\n  end\nend\n\nclass Message < Struct.new(:message)\n  def blank?\n    message.strip.empty?\n  end\n\n  def shouting?\n    message.upcase == message\n  end\n\n  def question?\n    message.end_with?('?')\n  end\nend	\N	\N	0	4	2014-01-19 11:39:01	2014-01-19 11:39:01	130	bob.rb
250	22	d0c58d2832e9f03272e8a4aa	superseded	ruby	bob	class Bob\n  def hey(message)\n    return 'Fine. Be that way!' if blank?(message)\n    return 'Woah, chill out!' if shouting?(message)\n    return 'Sure.' if question?(message)\n\n    'Whatever.'\n  end\n\n  private\n  def blank?(message)\n    message !~ /[^[:space:]]/\n  end\n\n  def shouting?(message)\n    message.upcase == message\n  end\n\n  def question?(message)\n    message[-1] == '?'\n  end\nend	\N	\N	0	1	2014-02-16 06:22:29	2014-02-16 06:22:29	130	bob.rb
251	22	ab3bcd50ec247a0088833415	superseded	ruby	bob	class Bob\n  def hey(message)\n    message = Message.new(message)\n\n    return 'Fine. Be that way!' if message.blank?\n    return 'Woah, chill out!' if message.shouting?\n    return 'Sure.' if message.question?\n\n    'Whatever.'\n  end\nend\n\nclass Message < Struct.new(:message)\n  def blank?\n    message !~ /[^[:space:]]/\n  end\n\n  def shouting?\n    message.upcase == message\n  end\n\n  def question?\n    message[-1] == '?'\n  end\nend	\N	\N	0	2	2014-02-27 16:15:25	2014-02-27 16:15:25	130	bob.rb
252	22	cc0de6809fffada7b5796417	superseded	ruby	bob	class Bob\n  def hey(message)\n    message = Message.new(message)\n\n    return 'Fine. Be that way!' if message.blank?\n    return 'Woah, chill out!' if message.is_shouting?\n    return 'Sure.' if message.is_question?\n\n    'Whatever.'\n  end\nend\n\nclass Message < Struct.new(:message)\n  def blank?\n    message.strip.empty?\n  end\n\n  def is_shouting?\n    message.upcase == message\n  end\n\n  def is_question?\n    message.end_with?('?')\n  end\nend	\N	\N	0	3	2014-03-26 17:06:05	2014-03-26 17:06:05	130	bob.rb
253	22	2682507e6bb44182ad94cd1a	pending	elixir	anagram	defmodule Anagram do\n  @doc """\n  Returns all candidates that are anagrams of, but not equal to, 'base'.\n  """\n  @spec match(String.t, [String.t]) :: [String.t]\n  def match(base, candidates) do\n    Enum.filter(candidates, &is_non_source_anagram?(&1, base))\n  end\n\n  defp is_non_source_anagram?(stack, needle) do\n    String.downcase(needle) != String.downcase(stack)\n    && normalize(needle) == normalize(stack)\n  end\n\n  defp normalize(str) do\n    String.downcase(str)\n    |> String.to_char_list\n    |> Enum.sort\n  end\nend	\N	\N	0	1	2014-03-15 08:56:34	2014-03-15 08:56:34	131	anagram.exs
254	22	4fca6ca08403e125d6611b64	pending	ruby	nucleotide-count	DNA =  Struct.new(:nucleotides) do\n\n  def count(input)\n    unless nucleotide?(input)\n      raise ArgumentError\n    end\n    nucleotides.count(input)\n  end\n\n  def nucleotide_counts\n    { 'A' => count('A'),'T' => count('T'),'G' => count('G'),'C' => count('C')}\n  end\n\n  def nucleotide?(input)\n    %w(A T C G U).include?(input)\n  end\n\nend	\N	\N	0	1	2014-07-04 00:47:21	2014-07-04 00:47:21	132	nucleotide-count.rb
255	16	487428cf578c4aa6c6b1baa7	superseded	go	etl	/*\nPackage etl implements a simple library for transforming scrabble scores from a legacy\nsystem to a shiny new scrabble system\n*/\n\npackage etl\n\nimport "strings"\n\n// Transform converts a map[int][]string into a map[string]int\nfunc Transform(input map[int][]string) map[string]int {\n\tresult := make(map[string]int)\n\tfor score, values := range input {\n\t\tfor _, value := range values {\n\t\t\tresult[strings.ToLower(value)] = score\n\t\t}\n\t}\n\treturn result\n}	\N	\N	0	1	2013-11-22 14:58:33	2013-11-22 14:58:33	133	etl.go
333	34	b3f928a7eb7d8648302a2e5d	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(@text)\n    word_counter.word_make_up\n  end\nend\n\nclass WordCounter\n  def initialize(text)\n    @text = text\n  end\n\n  def word_make_up\n    count_words(build_word_list)\n  end\n\nprivate\n\n  def build_word_list\n    @text.gsub(/\\W/, ' ').split.map { |word| word.downcase}\n  end\n\n  def count_words(list)\n    counts = Hash.new(0)\n    list.each {|word| counts[word] += 1 }\n    counts\n  end\nend	\N	\N	0	1	2014-06-07 23:00:12	2014-06-07 23:00:12	173	word-count.rb
256	16	7276a68691c1fa5f9019d0ce	superseded	go	etl	/*\nPackage etl implements a simple library for transforming scrabble scores from a legacy\nsystem to a shiny new scrabble system\n*/\n\npackage etl\n\nimport "strings"\n\n// Transform converts the legacy data format to the shiny new format.\n//\n// The old system stored a list of letters per score:\n//\n// - 1 point: "A", "E", "I", "O", "U", "L", "N", "R", "S", "T",\n// - 2 points: "D", "G",\n// - 3 points: "B", "C", "M", "P",\n// - 4 points: "F", "H", "V", "W", "Y",\n// - 5 points: "K",\n// - 8 points: "J", "X",\n// - 10 points: "Q", "Z",\n//\n// The shiny new scrabble system instead stores the score per letter,\n// which makes it much faster and easier to calculate the score for a\n// word. It also stores the letters in lower-case regardless of the\n// case of the input letters:\n\n// - "a" is worth 1 point.\n// - "b" is worth 3 points.\n// - "c" is worth 3 points.\n// - "d" is worth 2 points.\n// - Etc.\nfunc Transform(input map[int][]string) map[string]int {\n\tresult := make(map[string]int)\n\tfor score, values := range input {\n\t\tfor _, value := range values {\n\t\t\tresult[strings.ToLower(value)] = score\n\t\t}\n\t}\n\treturn result\n}	\N	\N	0	2	2013-12-19 15:16:07	2013-12-19 15:16:07	133	etl.go
257	16	8bf088b7c0eaee5543aed964	pending	go	etl	/*\nPackage etl implements a simple library for transforming scrabble scores from a\nlegacy system to a shiny new scrabble system\n*/\n\npackage etl\n\nimport "strings"\n\n// Transform converts the legacy data format to the shiny new format. The old\n// system stored a list of letters per score, whereas the shiny new scrabble\n// system instead stores the score per letter. This makes it much faster\n// and easier to calculate the score for a word. It also stores the letters\n// in lower-case.\nfunc Transform(input map[int][]string) map[string]int {\n\tresult := make(map[string]int)\n\tfor score, values := range input {\n\t\tfor _, value := range values {\n\t\t\tresult[strings.ToLower(value)] = score\n\t\t}\n\t}\n\treturn result\n}	\N	\N	0	3	2014-02-09 21:21:41	2014-02-09 21:21:41	133	etl.go
258	19	133419418a8755e60980711c	superseded	ruby	leap	class Year\n  def leap?(years)\n    if years % 400 == 0 || years % 4 == 0 && years % 100 != 0\n    \t'si es'\n    \tend\n    end\nend	\N	\N	0	1	2014-05-23 12:56:22	2014-05-23 12:56:22	134	year.rb
259	19	e64a4695984cb7bd4a5affc1	done	ruby	leap	# Encoding: utf-8\n\n# Clase Year\nclass Year < SimpleDelegator\n  def self.leap?(number)\n    Year.new(number).leap?\n  end\n\n  def leap?\n    divisible_by?(400) || divisible_by?(4) && !divisible_by?(100)\n  end\n\n  private\n\n  def divisible_by?(i)\n    (self % i) == 0\n  end\nend	2014-06-04 01:48:12	\N	0	2	2014-05-26 18:31:01	2014-05-26 18:31:01	134	year.rb
260	19	de6c68c5406fb418f629733f	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\r\n\r\nimport Data.Char\r\nimport Text.Printf\r\n  \r\nnumber :: String -> String\r\nnumber xs\r\n  | length cs == 10                   = cs\r\n  | length cs == 11 && head cs == '1' = tail cs\r\n  | otherwise                         = "0000000000"\r\n  where\r\n    cs = filter isDigit xs\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint xs = printf "(%s) %s-%s" a b c\r\n  where\r\n    n = number xs\r\n    [a,b,c] = splitBy [3,3] n\r\n\r\n-- Trying to do a multi-split with O(n)\r\nsplitBy :: [Int] -> [a] -> [[a]]\r\nsplitBy [] ys = [ys]\r\nsplitBy (x:xs) ys = a : splitBy xs b\r\n  where\r\n    (a, b) = splitAt x ys\r	2014-06-13 19:48:48	\N	0	1	2014-06-03 03:42:48	2014-06-03 03:42:48	135	phone.hs
261	19	ac9ed79ffca5e9b044a4daa2	done	clojure	grade-school	(ns school)\n\n(defn add [db key value]\n  (assoc db value (conj (get db value []) key)))\n\n(defn grade [db key]\n  (get db key []))\n\n(defn sorted [db]\n  (reduce\n    #(assoc %1 %2 (sort (get db %2)))\n    {}\n    (sort > (keys db))))	2014-06-12 14:14:56	\N	0	1	2014-06-07 06:15:04	2014-06-07 06:15:04	136	school.clj
262	20	3094b6ced0873e95221e6431	done	ruby	bob	class Bob\n\n  def hey(conversation)\n    if silent?(conversation)\n      'Fine. Be that way!'\n    elsif shouting?(conversation)\n      'Woah, chill out!'\n    elsif question?(conversation)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def silent?(conversation)\n    conversation.strip.empty?\n  end\n\n  def question?(conversation)\n    conversation[-1] == '?'\n  end\n\n  def shouting?(conversation)\n    conversation !~ /[a-z]/ && conversation =~ /[A-Z]/\n  end\n\nend	2014-06-22 00:44:54	\N	0	2	2014-06-12 09:30:22	2014-06-12 09:30:22	137	bob.rb
263	20	8ee5cd44ab8f8f3315740dca	superseded	ruby	bob	class Bob\n\n  def hey(conversation)\n    if conversation.gsub(/\\s/,"") == ""\n      'Fine. Be that way!'\n    elsif conversation.gsub(/(\\W)|(\\d)/,"") != "" && conversation.gsub(/(\\W)|(\\d)/,"") == conversation.gsub(/(\\W)|(\\d)/,"").upcase\n      'Woah, chill out!'\n    elsif conversation[-1] == '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend	\N	\N	0	1	2014-06-27 04:48:08	2014-06-27 04:48:08	137	bob.rb
264	20	e6ab7125a988eedce716da3b	done	go	difference-of-squares	package diffsquares\n\nfunc SquareOfSums(n int) int {\n\tvar nb int\n\tfor i := 1; i <= n; i++ {\n\t\tnb += i\n\t}\n\treturn nb * nb\n}\n\nfunc SumOfSquares(n int) int {\n\tvar nb int\n\tfor i := 1; i <= n; i++ {\n\t\tnb += i * i\n\t}\n\treturn nb\n}\n\nfunc Difference(n int) int {\n\treturn SquareOfSums(n) - SumOfSquares(n)\n}	2014-06-15 15:38:44	\N	0	1	2014-06-04 14:09:59	2014-06-04 14:09:59	138	difference_of_squares.go
265	20	b580c82905e11beec06b7ccd	done	ruby	trinary	class Trinary\n  def initialize(trinary_string)\n    @trinary_string = trinary_string\n  end\n\n  def to_decimal\n    sum = 0\n    return sum if /[^0-2]/.match(@trinary_string)\n    @trinary_string.chars.reverse.each_with_index do |digit, index|\n      sum += digit.to_i * (3**index)\n    end\n    sum\n  end\nend	2014-07-07 16:44:36	\N	0	1	2014-07-02 05:00:55	2014-07-02 05:00:55	139	trinary.rb
266	20	1c53d4f527f273deeadde944	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA []       = []\ntoRNA ('G':xs) = 'C':toRNA xs\ntoRNA ('C':xs) = 'G':toRNA xs\ntoRNA ('T':xs) = 'A':toRNA xs\ntoRNA ('A':xs) = 'U':toRNA xs	\N	\N	0	1	2014-06-02 01:12:34	2014-06-02 01:12:34	140	DNA.hs
267	20	cbdfc57d99e2e20c405bc1c2	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\nf :: Char -> Char\nf 'G' = 'C'\nf 'C' = 'G'\nf 'T' = 'A'\nf 'A' = 'U'\n\ntoRNA :: String -> String\ntoRNA = map f	\N	\N	0	2	2014-07-03 05:44:02	2014-07-03 05:44:02	140	DNA.hs
268	20	07f4a676a5c0424b3f1a9399	done	haskell	rna-transcription	module DNA (toRNA) where\n\nf :: Char -> Char\nf 'G' = 'C'\nf 'C' = 'G'\nf 'T' = 'A'\nf 'A' = 'U'\nf  _  = error "unknown nucleotide"\n\ntoRNA :: String -> String\ntoRNA = map f	2014-07-22 04:42:16	\N	0	3	2014-07-12 04:16:06	2014-07-12 04:16:06	140	DNA.hs
517	17	cd5d95eaf1b6d110c9e4a6b1	pending	javascript	anagram	var isAnagram = function(str1, str2) {\n\n\tif ((typeof str1 == 'string' || str1 instanceof String) &&\n\t\t((typeof str2 == 'string' || str2 instanceof String))) {\n\n\t\tif (str1.length != str2.length) {\n\t\t\treturn false;\n\t\t} else {\n\n\t\t\tif (str1.split("").sort() != str2.split("").sort()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n};\n\nvar Anagram = function(word) {\n\n\tthis.match = function(words) {\n\t\tif (Object.prototype.toString.call(words) === '[object Array]') {\n\n\t\t\tvar anagrams = [];\n\n\t\t\tfor (var i = 0; i < words.length; ++i) {\n\t\t\t\tif (isAnagram(word, words[i])) {\n\t\t\t\t\tanagrams.push(words[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn anagrams;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n};\n\nmodule.exports = Anagram;	\N	\N	0	1	2014-06-08 11:31:16	2014-06-08 11:31:16	269	anagram.js
269	20	fca63b52f657e390ec867b4b	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(raw_digits)\n    @number = PhoneNumberCleaner.clean(raw_digits)\n  end\n\n  def area_code\n    @number[0..2]\n  end\n\n  def local_number\n    @number[3..9]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number[0..2]}-#{local_number[3..6]}"\n  end\nend\n\nclass PhoneNumberCleaner\n  def self.clean(raw_digits)\n    return default_number unless valid_length? get_digits(raw_digits)\n    return last_ten_digits_of(raw_digits) if valid_numbers? get_digits(raw_digits)\n    default_number\n  end\n\n  def self.last_ten_digits_of(digits)\n    get_digits(digits)[-10..-1]\n  end\n\n  def self.get_digits(raw_digits)\n    raw_digits.scan(/\\d/).join\n  end\n\n  def self.valid_length?(digits)\n    digits.length == 11 || digits.length == 10\n  end\n\n  def self.valid_numbers?(digits)\n    /^1?\\d{10}$/ =~ digits\n  end\n\n  def self.default_number\n    "0000000000"\n  end\nend	\N	\N	0	3	2014-06-17 23:09:14	2014-06-17 23:09:14	141	phone-number.rb
270	20	bc5a0689fe8f4eb59e80c864	superseded	ruby	phone-number	class PhoneNumber\n  def initialize(digits)\n    @digits = clean(digits)\n  end\n\n  def number\n    @digits\n  end\n\n  def area_code\n    @digits[0..2]\n  end\n\n  def to_s\n    "(#{area_code}) #{@digits[3..5]}-#{@digits[6..9]}"\n  end\n\n  private\n\n  def clean(digits)\n    cleaned_number = get_digits(digits)\n    return default_number unless valid_length?(cleaned_number)\n    return cleaned_number.rjust(10,"0")[-10..-1] if /^1?\\d{10}$/ =~ cleaned_number\n    default_number\n  end\n\n  def valid_length?(digits)\n    digits.length == 11 || digits.length == 10\n  end\n\n  def get_digits(digits)\n    digits.scan(/\\d/).join\n  end\n\n  def default_number\n    "0000000000"\n  end\n\nend	\N	\N	0	2	2014-06-18 17:50:39	2014-06-18 17:50:39	141	phone-number.rb
271	20	e462d7e9895b457acae766d9	superseded	ruby	phone-number	class PhoneNumber\n  def initialize(digits)\n    @digits = clean(digits)\n  end\n\n  def number\n    @digits\n  end\n\n  def area_code\n    @digits[0..2]\n  end\n\n  def to_s\n    "(#{area_code}) #{@digits[3..5]}-#{@digits[6..9]}"\n  end\n\n  private\n\n  def clean(digits)\n    cleaned_number = get_digits(digits)\n    return default_number if invalid_length?(cleaned_number)\n    return cleaned_number.rjust(10,"0")[-10..-1] if /^2?\\d{10}$/ =~ cleaned_number\n    default_number\n  end\n\n  def invalid_length?(digits)\n    digits.length > 11 || digits.length < 10\n  end\n\n  def get_digits(digits)\n    digits.scan(/\\d/).join\n  end\n\n  def default_number\n    "0000000000"\n  end\n\nend	\N	\N	0	1	2014-06-21 01:15:35	2014-06-21 01:15:35	141	phone-number.rb
272	20	8596e5ea4a52fbf7a5587522	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(raw_digits)\n    @number = PhoneNumberCleaner.new(raw_digits).clean_number\n  end\n\n  def area_code\n    @number[0..2]\n  end\n\n  def local_number\n    @number[3..9]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number[0..2]}-#{local_number[3..6]}"\n  end\nend\n\nclass PhoneNumberCleaner\n  def initialize(raw_digits)\n    @digits = raw_digits\n  end\n\n  def clean_number\n    valid_phone_number ? last_ten_digits : default_number\n  end\n\n  def get_only_digits\n    @digits.scan(/\\d/).join\n  end\n\n  def last_ten_digits\n    get_only_digits[-10..-1]\n  end\n\n  def valid_phone_number\n    /^1?\\d{10}$/ =~ get_only_digits\n  end\n\n  def default_number\n    "0000000000"\n  end\nend	\N	\N	0	4	2014-07-02 19:56:57	2014-07-02 19:56:57	141	phone-number.rb
273	20	a9ef9d90e5738d80e02f3aa8	done	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize(raw)\n    @number = PhoneNumberCleaner.new(raw).clean_number\n  end\n\n  def area_code\n    @number[0,3]\n  end\n\n  def exchange_code\n    @number[3,3]\n  end\n\n  def subscriber_number\n    @number[6,4]\n  end\n\n  def to_s\n    "(#{area_code}) #{exchange_code}-#{subscriber_number}"\n  end\nend\n\nclass PhoneNumberCleaner\n  def initialize(raw)\n    @raw = raw\n  end\n\n  def clean_number\n    valid_number ? last_ten_numbers : default_number\n  end\n\n  private\n\n  def valid_number\n    /^1?\\d{10}$/ =~ digits\n  end\n\n  def digits\n    @raw.scan(/\\d/).join\n  end\n\n  def last_ten_numbers\n    digits[-10,10]\n  end\n\n  def default_number\n    "0000000000"\n  end\nend	2014-07-21 09:32:48	\N	0	5	2014-07-11 04:14:39	2014-07-11 04:14:39	141	phone-number.rb
274	20	2f0c9bc2e218b16e820c50e9	superseded	elixir	beer-song	defmodule Beer do\n  def sing(n1, n2) do\n    Enum.reduce(n1..n2, "", fn(num, acc) -> \n                                acc <> verse(num) <> "\\n" end)\n  end\n\n  def sing(n) do\n    Enum.reduce(n..0, "", fn(num, acc) ->\n                               acc <> verse(num) <> "\\n" end)\n  end\n\n  def verse(1) do\n    single_verse()\n  end\n\n  def verse(2) do\n    two_verse()\n  end\n\n  def verse(0) do\n    none_verse()\n  end\n\n  def verse(n) do\n    multiple_verse(n)\n  end\n\n  def multiple_verse(n) do\n    "#{n} bottles of beer on the wall, #{n} bottles of beer.\\nTake one down and pass it around, #{n-1} bottles of beer on the wall.\\n"\n  end\n\n  def two_verse() do\n    "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n  end\n\n  def single_verse() do\n    "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  def none_verse() do\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\nend	\N	\N	0	1	2014-06-21 08:24:01	2014-06-21 08:24:01	142	beer-song.exs
275	20	59ef7d09f668dc2c78e23b54	superseded	elixir	beer-song	defmodule Beer do\n  def sing(n) do\n    sing(n, 0)\n  end\n\n  def sing(n1, n2) do\n    Enum.reduce(n1..n2, "", fn(num, acc) -> \n                                acc <> verse(num) <> "\\n" end)\n  end\n\n  def verse(n) do\n    { shelf_bottles, take_bottles } = bottle_phrase(n)\n    { left_bottles, _ } = bottle_phrase(n - 1)\n\n    "#{String.capitalize(shelf_bottles)} of beer on the wall, #{shelf_bottles} of beer.\\n#{take_bottles}, #{left_bottles} of beer on the wall.\\n"\n  end\n\n  def bottle_phrase(n) do\n    cond do\n    n > 1 ->\n      { "#{n} bottles", "Take one down and pass it around" }\n    n == 1 ->\n      { "1 bottle", "Take it down and pass it around" }\n    n < 0 ->\n      { "99 bottles", "" }\n    true ->\n      { "no more bottles", "Go to the store and buy some more" }\n    end\n  end\nend	\N	\N	0	2	2014-07-06 03:46:10	2014-07-06 03:46:10	142	beer-song.exs
329	34	0cb39a441e39085c1b913530	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(@text)\n    word_counter.word_make_up\n  end\nend\n\nclass WordCounter\n  def initialize(text)\n    @text = text\n  end\n\n  def word_make_up\n    count_words(build_word_list)\n  end\n\nprivate\n\n  def build_word_list\n    @text.scan(/\\w+/).map(&:downcase)\n  end\n\n  def count_words(list)\n    list.each_with_object(Hash.new(0)) do |word,hash| \n      hash[word] += 1\n    end\n  end\nend	\N	\N	0	4	2014-05-10 09:22:35	2014-05-10 09:22:35	173	word-count.rb
518	23	af8ea29a18761843fa100dd6	pending	elixir	bob	defmodule Teenager do\n  # I tried to do this with a set of pattern matching functions\n  #  but it was not possible to do guard clauses that made sense\n  #  on the strings.  Any other feedback?\n  def hey(string) do\n    cond do\n      is_silent?(string) ->\n        "Fine. Be that way."\n      is_asking?(string) ->\n        "Sure."\n      is_shouting?(string) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp is_shouting?(string) do\n    String.upcase(string) == string\n  end\n\n  defp is_asking?(string) do\n    String.ends_with?(string, "?")\n  end\n  \n  defp is_silent?(""), do: true\n  defp is_silent?(_), do: false\nend	\N	\N	0	1	2014-05-09 02:10:32	2014-05-09 02:10:32	270	bob.exs
276	20	478a0037b41fc8d0cf5ec102	done	elixir	beer-song	defmodule Beer do\n  def sing(n1, n2 // 0) do\n    Enum.reduce(n1..n2, "", &(&2 <> verse(&1) <> "\\n"))\n  end\n\n  def verse(n) do\n    { shelf_bottles, take_bottles } = bottle_phrase(n)\n    { left_bottles, _ } = bottle_phrase(n - 1)\n\n    """\n    #{String.capitalize(shelf_bottles)} of beer on the wall, #{shelf_bottles} of beer.\n    #{take_bottles}, #{left_bottles} of beer on the wall.\n    """\n  end\n\n  def bottle_phrase(n) do\n    cond do\n    n > 1 ->\n      { "#{n} bottles", "Take one down and pass it around" }\n    n == 1 ->\n      { "1 bottle", "Take it down and pass it around" }\n    n < 0 ->\n      { "99 bottles", "" }\n    true ->\n      { "no more bottles", "Go to the store and buy some more" }\n    end\n  end\nend	2014-07-17 03:16:41	\N	0	3	2014-07-15 05:14:57	2014-07-15 05:14:57	142	beer-song.exs
277	20	bc732d4875f71f5ed74bfe9d	done	scala	gigasecond	import java.util.Calendar\nimport java.util.GregorianCalendar\n\ncase class Gigasecond(start: GregorianCalendar) {\n    val date = start.clone.asInstanceOf[GregorianCalendar]\n    date add (Calendar.SECOND, 1000000000)\n    date set (Calendar.AM_PM, Calendar.AM)\n    date set (Calendar.HOUR, 0)\n    date set (Calendar.MINUTE, 0)\n    date set (Calendar.SECOND, 0)\n}	2014-06-15 22:00:48	\N	0	1	2014-06-08 15:53:19	2014-06-08 15:53:19	143	gigasecond.scala
278	20	522fc076a246364c55fcd3c5	done	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word] +=  1\n    end\n  end\n\n  private\n  def words\n    @text.scan(/\\w+/)\n  end\nend	2014-06-13 07:59:05	\N	0	4	2014-06-03 08:38:13	2014-06-03 08:38:13	144	word-count.rb
279	20	7ff95072cb620669181b3eb2	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_count\n    separate_words.each_with_object({}) do |word, counter|\n      counter[word] ||= 0\n      counter[word] +=  1\n    end\n  end\n\n  private\n  def separate_words\n    text.scan(/\\w+/)\n  end\n\n  def text\n    @text\n  end\nend	\N	\N	0	2	2014-06-11 05:59:07	2014-06-11 05:59:07	144	word-count.rb
280	20	00d19f16d2cd580456173861	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word] +=  1\n    end\n  end\n\n  private\n  def words\n    text.scan(/\\w+/)\n  end\n\n  def text\n    @text\n  end\nend	\N	\N	0	3	2014-06-16 04:45:44	2014-06-16 04:45:44	144	word-count.rb
281	20	cf7c2b8fc1a41e930979db2b	superseded	ruby	word-count	class Phrase\n  attr_reader   :text\n\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_count\n    counter = {}\n    separate_words.each do |word|\n      counter[word] ||= 0\n      counter[word] += 1\n    end\n    counter\n  end\n\n  def separate_words\n    text.split(/[\\W]+/)\n  end\nend	\N	\N	0	1	2014-07-13 17:10:29	2014-07-13 17:10:29	144	word-count.rb
282	20	51e3c3f2a711cde3a37bc3d2	superseded	haskell	linked-list	module Deque (\n    mkDeque,\n    push,\n    pop,\n    shift,\n    unshift\n) where\n\nimport Control.Monad.Trans (lift)\nimport Control.Monad.Trans.Maybe (MaybeT(..))\nimport Control.Monad (void)\nimport Control.Monad.STM (STM, atomically, orElse)\nimport Control.Concurrent.STM.TMVar\n\ndata DNode a = DNode { value :: a, prev :: TMVar (DNode a), next :: TMVar (DNode a) }\ntype Deque a = TMVar (Maybe (DNode a, DNode a))\n\nmkDeque :: IO (Deque a)\nmkDeque = atomically $ newTMVar Nothing\n\nemptyNode :: a -> STM (DNode a)\nemptyNode x = do\n    p <- newEmptyTMVar\n    n <- newEmptyTMVar\n    return $ DNode x p n\n\npush :: Deque a -> a -> IO ()\npush deq x = atomically $ do\n    newTail <- emptyNode x\n    maybeQ <- takeTMVar deq\n    case maybeQ of\n        Nothing -> putTMVar deq $ Just (newTail, newTail)\n        Just (head, tail) -> do\n            putTMVar (next tail) newTail\n            putTMVar (prev newTail) tail\n            putTMVar deq $ Just (head, newTail)\n\npop :: Deque a -> IO (Maybe a)\npop deq = atomically $ runMaybeT $ do\n    (head, tail) <- MaybeT $ takeTMVar deq\n    lift $ do maybePrev <- tryTakeTMVar $ prev tail\n              case maybePrev of\n                  Nothing -> putTMVar deq Nothing\n                  Just newTail -> do\n                      putTMVar deq $ Just (head, newTail)\n                      void $ takeTMVar $ next newTail\n    return $ value tail\n\nunshift :: Deque a -> a -> IO ()\nunshift deq x = atomically $ do \n    newHead <- emptyNode x\n    maybeQ <- takeTMVar deq\n    case maybeQ of\n        Nothing -> putTMVar deq $ Just (newHead, newHead)\n        Just (head, tail) -> do\n            putTMVar (prev head) newHead\n            putTMVar (next newHead) head\n            putTMVar deq $ Just (newHead, tail)\n\nshift :: Deque a -> IO (Maybe a)\nshift deq = atomically $ runMaybeT $ do\n    (head, tail) <- MaybeT $ takeTMVar deq\n    lift $ do maybeNext <- tryTakeTMVar $ next head\n              case maybeNext of\n                  Nothing -> putTMVar deq Nothing\n                  Just newHead -> do\n                      putTMVar deq $ Just (newHead, tail)\n                      void $ takeTMVar $ prev newHead\n    return $ value head	\N	\N	0	2	2014-06-12 23:02:50	2014-06-12 23:02:50	145	linked-list.hs
283	20	59954767f2914c2dd7852fec	done	haskell	linked-list	module Deque (\n    mkDeque,\n    push,\n    pop,\n    shift,\n    unshift\n) where\n\nimport Control.Monad.Trans (lift)\nimport Control.Monad.Trans.Maybe (MaybeT(..))\nimport Control.Monad (void)\nimport Control.Monad.STM (STM, atomically, orElse)\nimport Control.Concurrent.STM.TMVar\n\ndata DNode a = DNode { value :: a, prev :: TMVar (DNode a), next :: TMVar (DNode a) }\ntype Deque a = TMVar (Maybe (DNode a, DNode a))\n\nmkDeque :: IO (Deque a)\nmkDeque = atomically $ newTMVar Nothing\n\nemptyNode :: a -> STM (DNode a)\nemptyNode x = do\n    p <- newEmptyTMVar\n    n <- newEmptyTMVar\n    return $ DNode x p n\n\nsingleton :: Deque a -> DNode a -> STM ()\nsingleton deq node = putTMVar deq $ Just (node, node)\n\nconnect :: DNode a -> DNode a -> STM ()\nconnect x y = do\n    putTMVar (next x) y\n    putTMVar (prev y) x\n\nwithDeque :: Deque a -> STM () -> STM ()\nwithDeque deq m = m `orElse` putTMVar deq Nothing\n\npush :: Deque a -> a -> IO ()\npush deq x = atomically $ do\n    newTail <- emptyNode x\n    maybeQ <- takeTMVar deq\n    case maybeQ of\n        Nothing -> singleton deq newTail\n        Just (head, tail) -> do\n            tail `connect` newTail\n            putTMVar deq $ Just (head, newTail)\n\npop :: Deque a -> IO (Maybe a)\npop deq = atomically $ runMaybeT $ do\n    (head, tail) <- MaybeT $ takeTMVar deq\n    lift $ withDeque deq $ do\n        newTail <- takeTMVar $ prev tail\n        putTMVar deq $ Just (head, newTail)\n        void $ takeTMVar $ next newTail\n    return $ value tail\n\nunshift :: Deque a -> a -> IO ()\nunshift deq x = atomically $ do \n    newHead <- emptyNode x\n    maybeQ <- takeTMVar deq\n    case maybeQ of\n        Nothing -> singleton deq newHead\n        Just (head, tail) -> do\n            newHead `connect` head\n            putTMVar deq $ Just (newHead, tail)\n\nshift :: Deque a -> IO (Maybe a)\nshift deq = atomically $ runMaybeT $ do\n    (head, tail) <- MaybeT $ takeTMVar deq\n    lift $ withDeque deq $ do \n        newHead <- takeTMVar $ next head\n        putTMVar deq $ Just (newHead, tail)\n        void $ takeTMVar $ prev newHead\n    return $ value head	2014-07-04 09:27:37	\N	0	4	2014-06-26 22:20:09	2014-06-26 22:20:09	145	linked-list.hs
284	20	64d80980ef12225c5fbc62fd	superseded	haskell	linked-list	module Deque (\n    mkDeque,\n    push,\n    pop,\n    shift,\n    unshift\n) where\n\nimport Control.Concurrent.MVar (MVar, newMVar, modifyMVar_, modifyMVar)\nimport Data.Sequence\n\ntype Deque a = MVar (Seq a)\n\nmkDeque :: IO (Deque a)\nmkDeque = newMVar empty\n\npushIO :: a -> Seq a -> IO (Seq a)\npushIO x seq = return $ seq |> x\n\npopIO :: Seq a -> IO (Seq a, Maybe a)\npopIO seq = case viewr seq of\n                  EmptyR    -> return (seq, Nothing)\n                  seq' :> x -> return (seq', Just x)\n\nunshiftIO :: a -> Seq a -> IO (Seq a)\nunshiftIO x seq = return $ x <| seq\n\nshiftIO :: Seq a -> IO (Seq a, Maybe a)\nshiftIO seq = case viewl seq of\n                  EmptyL    -> return (seq, Nothing)\n                  x :< seq' -> return (seq', Just x)\n\npush :: Deque a -> a -> IO ()\npush q x = modifyMVar_ q (pushIO x)\n\npop :: Deque a -> IO (Maybe a)\npop q = modifyMVar q popIO\n\nunshift :: Deque a -> a -> IO ()\nunshift q x = modifyMVar_ q (unshiftIO x)\n\nshift :: Deque a -> IO (Maybe a)\nshift q = modifyMVar q shiftIO	\N	\N	0	1	2014-07-10 04:27:16	2014-07-10 04:27:16	145	linked-list.hs
503	15	2769e492919a660ac8ebe67e	pending	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday deriving (Enum)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n\ntype Year  = Integer\ntype Month = Int\n\n-- Can this be made safer than indexing into a list?\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay sc wd year month =\n    let days = matchingDays wd year month in\n    case sc of\n      First  -> head days\n      Second -> days !! 1\n      Third  -> days !! 2\n      Fourth -> days !! 3\n      Last   -> last days\n      Teenth -> head . filter isTeenth $ days\n\nisTeenth :: Day -> Bool\nisTeenth d =\n    let (_, _, day) = toGregorian d in\n    13 <= day && day <= 19\n\nweekdayToInt :: Weekday -> Int\nweekdayToInt w = fromEnum w + 1\n\nmatchingDays :: Weekday -> Year -> Month -> [Day]\nmatchingDays wd year month =\n    [d | d <- [day 1 .. day 31],\n         let (_, _, weekDay) = toWeekDate d,\n         weekDay == weekdayToInt wd]\n    where day = fromGregorian year month	\N	\N	0	3	2014-06-23 02:01:51	2014-06-23 02:01:51	260	meetup.hs
519	23	3957b5c4e1029a22aeca9376	superseded	elixir	word-count	defmodule Words do\n  def count(sentence) do\n    words = sentence |> String.downcase |> String.split %r/\\W+/, trim: true\n    count_all words\n  end\n\n  defp count_all([h|t], acc // HashDict.new) do\n    if HashDict.has_key? acc, h do\n      {val, dict} = HashDict.pop(acc, h)\n      new_acc = HashDict.put(dict, h, val + 1)\n    else\n      new_acc = HashDict.put(acc, h, 1)\n    end\n    count_all t, new_acc\n  end\n\n  defp count_all([], acc) do\n    acc\n  end\nend	\N	\N	0	2	2013-12-17 22:52:23	2013-12-17 22:52:23	271	word-count.exs
285	20	15ffaf295e9cf15006be646c	superseded	haskell	linked-list	module Deque (\n    mkDeque,\n    push,\n    pop,\n    shift,\n    unshift\n) where\n\nimport Control.Monad.Trans (lift)\nimport Control.Monad.Trans.Maybe (MaybeT(..))\nimport Control.Monad (void)\nimport Control.Monad.STM (STM, atomically, orElse)\nimport Control.Concurrent.STM.TMVar\n\ndata DNode a = DNode { value :: a, prev :: TMVar (DNode a), next :: TMVar (DNode a) }\ntype Deque a = TMVar (Maybe (DNode a, DNode a))\n\nmkDeque :: IO (Deque a)\nmkDeque = atomically $ newTMVar Nothing\n\nemptyNode :: a -> STM (DNode a)\nemptyNode x = do\n    p <- newEmptyTMVar\n    n <- newEmptyTMVar\n    return $ DNode x p n\n\nsingleton :: Deque a -> DNode a -> STM ()\nsingleton deq node = putTMVar deq $ Just (node, node)\n\nconnect :: DNode a -> DNode a -> STM ()\nconnect x y = do\n    putTMVar (next x) y\n    putTMVar (prev y) x\n\npush :: Deque a -> a -> IO ()\npush deq x = atomically $ do\n    newTail <- emptyNode x\n    maybeQ <- takeTMVar deq\n    case maybeQ of\n        Nothing -> singleton deq newTail\n        Just (head, tail) -> do\n            tail `connect` newTail\n            putTMVar deq $ Just (head, newTail)\n\npop :: Deque a -> IO (Maybe a)\npop deq = atomically $ runMaybeT $ do\n    (head, tail) <- MaybeT $ takeTMVar deq\n    lift ( do { newTail <- takeTMVar $ prev tail;\n                putTMVar deq $ Just (head, newTail);\n                void $ takeTMVar $ next newTail }\n            `orElse` putTMVar deq Nothing )\n    return $ value tail\n\nunshift :: Deque a -> a -> IO ()\nunshift deq x = atomically $ do \n    newHead <- emptyNode x\n    maybeQ <- takeTMVar deq\n    case maybeQ of\n        Nothing -> singleton deq newHead\n        Just (head, tail) -> do\n            newHead `connect` head\n            putTMVar deq $ Just (newHead, tail)\n\nshift :: Deque a -> IO (Maybe a)\nshift deq = atomically $ runMaybeT $ do\n    (head, tail) <- MaybeT $ takeTMVar deq\n    lift ( do { newHead <- takeTMVar $ next head;\n                putTMVar deq $ Just (newHead, tail); \n                void $ takeTMVar $ prev newHead }\n            `orElse` putTMVar deq Nothing )\n    return $ value head	\N	\N	0	3	2014-07-10 06:26:33	2014-07-10 06:26:33	145	linked-list.hs
286	20	9aabfba6215788d981236c6e	done	haskell	allergies	module Allergies where\n\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries | Tomatoes | Chocolate | Pollen | Cats deriving (Enum, Show, Eq)\n\nbits :: Integer -> [Bool]\nbits 0 = [False]\nbits 1 = [True]\nbits n | n `mod` 2 == 0 = bits (n `div` 2) ++ [False]\n       | otherwise      = bits (n `div` 2) ++ [True]\n\npadTo8 :: [Bool] -> [Bool]\npadTo8 xs = replicate (8-(length xs)) False ++ xs\n\npruneTo8 :: [Bool] -> [Bool]\npruneTo8 xs = drop ((length xs)-8) xs\n\nallergies :: Integer -> [Allergen]\nallergies = map (toEnum . fst) . filter snd . zip [0..] . reverse . pruneTo8 . padTo8 . bits\n\nisAllergicTo :: Allergen -> Integer -> Bool\nisAllergicTo al n = al `elem` (allergies n)	2014-06-16 17:37:15	\N	0	1	2014-06-05 05:22:04	2014-06-05 05:22:04	146	allergies.hs
287	20	5ccab39edda7f46a71746a66	done	ruby	scrabble-score	class Scrabble\n  SCORE = {\n    "A"=>1, "B"=>3, "C"=>3, "D"=>2,\n    "E"=>1, "F"=>4, "G"=>2, "H"=>4,\n    "I"=>1, "J"=>8, "K"=>5, "L"=>1,\n    "M"=>3, "N"=>1, "O"=>1, "P"=>3,\n    "Q"=>10, "R"=>1, "S"=>1, "T"=>1,\n    "U"=>1, "V"=>4, "W"=>4, "X"=>8,\n    "Y"=>4, "Z"=>10\n  }\n\n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    self.class.scrabble_score(@word)\n  end\n\n  def self.score(word)\n    scrabble_score(word)\n  end\n\n  private\n\n  def self.scrabble_score(word)\n    return 0 if word.nil?\n    return 0 if word.strip.empty?\n    word.chars.inject(0) { |score, letter| score + SCORE[letter.upcase]}\n  end\nend	2014-06-17 03:37:28	\N	0	1	2014-06-13 00:13:02	2014-06-13 00:13:02	147	scrabble.rb
288	20	d3ab849c3907b1cd25af3fe8	done	go	queen-attack	package queenattack\n\nimport "fmt"\n\nfunc fileAndRank(pos string) (file, rank byte, err error) {\n\tif len(pos) != 2 {\n\t\treturn 0, 0, fmt.Errorf("bad input length", pos)\n\t}\n\tfile, rank = pos[0], pos[1]\n\tif file < 'a' || file > 'h' {\n\t\treturn 0, 0, fmt.Errorf("invalid file: %q", pos, file)\n\t}\n\tif rank < '1' || rank > '8' {\n\t\treturn 0, 0, fmt.Errorf("invalid rank: %q", pos, rank)\n\t}\n\treturn\n}\n\nfunc absDiff(x, y uint8) uint8 {\n\tif x >= y {\n\t\treturn x - y\n\t}\n\treturn y - x\n}\n\n// CanQueenAttack determines whether two queens on a chess board can attack\n// each other. The positions of the two queens, pos1 and pos2, must be given\n// in algebraic notation, i.e. a1 to h8.\n// If an argument can't be parsed, an error is returned.\nfunc CanQueenAttack(pos1, pos2 string) (b bool, err error) {\n\tfile1, rank1, err := fileAndRank(pos1)\n\tif err != nil {\n\t\treturn false, fmt.Errorf("CanQueenAttack(%q, %q): bad position %q: %s",\n\t\t\tpos1, pos2, pos1, err.Error())\n\t}\n\tfile2, rank2, err := fileAndRank(pos2)\n\tif err != nil {\n\t\treturn false, fmt.Errorf("CanQueenAttack(%q, %q): bad position %q: %s",\n\t\t\tpos1, pos2, pos2, err.Error())\n\t}\n\tif file1 == file2 && rank1 == rank2 {\n\t\treturn false, fmt.Errorf("CanQueenAttack(%q, %q): both queens on same square",\n\t\t\tpos1, pos2)\n\t}\n\n\tswitch {\n\tcase file1 == file2 || rank1 == rank2:\n\t\treturn true, nil\n\tcase absDiff(file1, file2) == absDiff(rank1, rank2):\n\t\treturn true, nil\n\tdefault:\n\t\treturn false, nil\n\t}\n}	2014-06-09 09:39:50	\N	0	1	2014-06-08 14:42:36	2014-06-08 14:42:36	148	queenattack.go
330	34	1310764aec45507fe9a5e2b7	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(@text)\n    word_counter.word_make_up\n  end\nend\n\nclass WordCounter\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_make_up\n    count_words(build_word_list)\n  end\n\nprivate\n\n  def build_word_list\n    @text.scan(/\\w+/)\n  end\n\n  def count_words(list)\n    list.each_with_object(Hash.new(0)) do |word,hash| \n      hash[word] += 1\n    end\n  end\nend	\N	\N	0	5	2014-06-01 21:54:57	2014-06-01 21:54:57	173	word-count.rb
504	15	15c866786105ebed9e0b8f7b	superseded	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet =  Earth\n            | Mercury\n            | Venus\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n            deriving (Enum)\n\nageOn :: Planet -> Integer -> Float\nageOn planet seconds = fromIntegral seconds / orbPeriod planet\n\norbPeriod :: Planet -> Float\norbPeriod planet = 31558149 * (scale !! fromEnum planet)\n  where scale = [1.0,\n                0.2408425,\n                0.6151866,\n                1.8808149,\n                11.862409,\n                29.446986,\n                84.01538,\n                164.78845]	\N	\N	0	1	2014-07-06 07:20:36	2014-07-06 07:20:36	261	SpaceAge.hs
505	15	828b63afb24eb31aa3aeebf5	pending	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet =  Earth\n            | Mercury\n            | Venus\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n            deriving (Enum)\n\nageOn :: Planet -> Integer -> Float\nageOn planet seconds = fromIntegral seconds / orbPeriod planet\n\norbPeriod :: Planet -> Float\norbPeriod planet = 31558149 * case planet of\n                               Earth -> 1.0\n                               Mercury -> 0.2408425\n                               Venus -> 0.6151866\n                               Mars -> 1.8808149\n                               Jupiter-> 11.862409\n                               Saturn -> 29.446986\n                               Uranus -> 84.01538\n                               Neptune -> 164.78845	\N	\N	0	2	2014-07-09 02:50:51	2014-07-09 02:50:51	261	SpaceAge.hs
506	15	734a5cc42a6123467fd3f2de	pending	ruby	phone-number	class PhoneNumber < Struct.new(:raw_number)\n  def number\n    validated_number || invalid_number\n  end\n\n  def area_code\n    number[0..2]\n  end\n\n  def to_s\n    "(#{area_code}) #{first_segment}-#{second_segment}"\n  end\n\n  def first_segment\n    number[3..5]\n  end\n\n  def second_segment\n    number[6..10]\n  end\n\n  private\n\n  def validated_number\n    validation_regex.match(stripped_number) do |match|\n      match[1]\n    end\n  end\n\n  def invalid_number\n    "0000000000"\n  end\n\n  def validation_regex\n    /^1?(\\d{10})$/\n  end\n\n  def stripped_number\n    raw_number.gsub(/[^\\d]/, '')\n  end\nend	\N	\N	0	1	2014-06-13 02:59:18	2014-06-13 02:59:18	262	phone-number.rb
507	15	f0b3a51c75bbe392f42b6cae	pending	python	largest-series-product	from operator import mul\n\nclass Series(object):\n    def __init__(self, ns):\n        self.nums = [int(i) for i in ns]\n\n    def slices(self, n):\n        nums = self.nums\n        if len(nums) < n:\n            raise ValueError("Invalid slice length for this series: {}".format(n))\n        return [nums[i:i+n] for i in xrange(len(nums)-n+1)]\n\n    def largest_product(self, n):\n        ps = [reduce(mul, l, 1) for l in self.slices(n)]\n        if ps:\n            return max(ps)\n        return 0	\N	\N	0	1	2014-07-22 07:38:29	2014-07-22 07:38:29	263	series.py
289	20	aa7b818fdf59fefd7014c655	done	clojure	beer-song	(ns beer)\n\n(defn verse [verse-number]\n  (let [number-of-bottles verse-number\n        bottles-of-beer (fn [num]\n                          (cond\n                            (> num 1) (str num " bottles of beer")\n                            (= num 1) (str "1 bottle of beer")\n                            (= num 0) (str "no more bottles of beer")\n                          ))\n        take-one-down (fn [num]\n                        (cond\n                          (> num 1) "Take one down"\n                          (= num 1) "Take it down"))\n        first-sentence (fn [num]\n                         (str\n                           (clojure.string/capitalize (bottles-of-beer num))\n                           " on the wall, "\n                           (bottles-of-beer num)\n                           ".\\n"))\n        second-sentence (fn [num]\n                          (cond\n                            (= num 0)\n                              "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n                            :else\n                              (str\n                                (take-one-down num)\n                                " and pass it around, "\n                                (bottles-of-beer (dec num))\n                                " on the wall.\\n")))]\n    (str\n      (first-sentence number-of-bottles)\n      (second-sentence number-of-bottles))))\n\n(defn sing [start-verse & [end-verse]]\n  (->\n    (range start-verse (dec (if end-verse end-verse 0)) -1)\n    ((partial map #(verse %)))\n    ((partial clojure.string/join "\\n"))))	2014-06-21 04:23:41	\N	0	1	2014-06-14 19:27:37	2014-06-14 19:27:37	149	beer.clj
290	20	b0d897230b83901b5feebbd3	superseded	elixir	anagram	defmodule Anagram do\n  @doc """\n  Selects the words out of a list that are anagrams of a word.\n  """\n  def match(word, words),\n    do: Enum.filter(words, &anagrams?(word, &1))\n\n  defp anagrams?(word1, word2) do\n    word1 = String.downcase(word1)\n    word2 = String.downcase(word2)\n    if (word1 == word2),\n      do: false,\n      else: sort_chars(word1) == sort_chars(word2)\n  end\n\n  defp sort_chars(word),\n    do: String.to_char_list!(word) |> Enum.sort\nend	\N	\N	0	1	2014-06-15 16:24:04	2014-06-15 16:24:04	150	anagram.exs
291	20	b366c44d5daadc13d594598f	done	elixir	anagram	defmodule Anagram do\n  import String, only: [downcase: 1, graphemes: 1]\n\n  @doc """\n  Selects the words out of a list that are anagrams of a word.\n  """\n  def match(word, words) do\n    Enum.filter(words, &ignore_case_anagrams?(word, &1))\n  end\n\n  defp ignore_case_anagrams?(w1, w2), do: anagrams?(downcase(w1), downcase(w2))\n\n  defp anagrams?(word, word),   do: false\n  defp anagrams?(word1, word2), do: graphemes(word1) == graphemes(word2)\nend	2014-07-19 03:06:22	\N	0	3	2014-07-10 13:32:26	2014-07-10 13:32:26	150	anagram.exs
292	20	e575e2a5a8b3dee4c2fb71b6	superseded	elixir	anagram	defmodule Anagram do\n  import String, only: [downcase: 1, graphemes: 1]\n\n  @doc """\n  Selects the words out of a list that are anagrams of a word.\n  """\n  def match(word, words) do\n    downcase_anagrams? = &anagrams?(downcase(word), downcase(&1))\n    Enum.filter(words, downcase_anagrams?)\n  end\n\n  defp anagrams?(word, word),   do: false\n  defp anagrams?(word1, word2), do: graphemes(word1) == graphemes(word2)\nend	\N	\N	0	2	2014-07-13 20:39:14	2014-07-13 20:39:14	150	anagram.exs
293	20	916d4b3975b32ec11aa466f6	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n  var out map[string]int = make(map[string]int)\n  for counter, letters := range in {\n    for _, letter := range letters {\n      letter = strings.ToLower(letter)\n      out[letter] += counter\n    }\n  }\n  return out\n}	\N	\N	0	1	2014-06-25 19:08:19	2014-06-25 19:08:19	151	etl.go
294	20	b151d46bdb02c305b3ed4370	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor counter, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += counter\n\t\t}\n\t}\n\treturn out\n}	\N	\N	0	2	2014-06-30 05:50:10	2014-06-30 05:50:10	151	etl.go
295	20	a5c47dc89ebd8c4938ab55a3	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor times, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += times\n\t\t}\n\t}\n\treturn out\n}	2014-07-26 04:36:55	\N	0	3	2014-07-23 15:13:12	2014-07-23 15:13:12	151	etl.go
296	20	d8c04595616631192b59d678	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n    @letters = @word.chars.sort\n  end\n\n  def match(words)\n    words.select do |word|\n      downcased_word = word.downcase\n      different?(downcased_word) && same_letters?(downcased_word)\n    end\n  end\n\n  private\n\n  def different?(word)\n    word != @word\n  end\n\n  def same_letters?(word)\n    word.chars.sort == @letters\n  end\nend	2014-07-25 01:43:42	\N	0	1	2014-07-23 02:52:03	2014-07-23 02:52:03	152	anagram.rb
297	20	d8a0187feac448f8d8479a99	superseded	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle \n  attr_reader :side_one, :side_two, :side_three\n\n  def initialize(side_one, side_two, side_three)\n    @side_one = side_one\n    @side_two = side_two\n    @side_three = side_three\n  end\n\n  def kind\n    if invalid_side? || violates_inequality?\n      raise TriangleError\n    elsif [side_one, side_two, side_three].uniq.count == 1  \n      :equilateral\n    elsif [side_one, side_two, side_three].uniq.count == 2\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\nprivate\n\n  def invalid_side?\n    [side_one, side_two, side_three].any? { |side| side <= 0} \n  end\n\n  def violates_inequality?\n    side_one + side_two <= side_three ||\n    side_one + side_three <= side_two ||\n    side_two + side_three <= side_one\n  end\n\nend	\N	\N	0	1	2014-06-11 07:05:37	2014-06-11 07:05:37	153	triangle.rb
508	17	a97a706d4f7819d0af13823f	pending	ruby	leap	class Year\n   def initialize(year)\n     @year = year\n   end\n\n  def leap?\n    @year % 4 == 0 && !(@year % 100 == 0) ||\n    (@year % 100 == 0 && @year % 400 == 0)\n  end\nend	\N	\N	0	1	2014-06-27 18:17:38	2014-06-27 18:17:38	264	leap.rb
331	34	ee702a8ee0597a58736165ef	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(@text)\n    word_counter.word_make_up\n  end\nend\n\nclass WordCounter\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_make_up\n    count_occurances word_list\n  end\n\nprivate\n\n  def word_list\n    @text.scan(/\\w+/)\n  end\n\n  def count_occurances(words)\n    words.each_with_object(Hash.new(0)) do |word,word_count| \n      word_count[word] += 1\n    end\n  end\nend	\N	\N	0	7	2014-06-04 23:01:32	2014-06-04 23:01:32	173	word-count.rb
509	17	91e09a22b4172114c62689b2	superseded	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    case \n    when phrase.strip.empty?\n      'Fine. Be that way!'\n    when phrase.upcase == phrase\n      'Woah, chill out!'\n    when phrase[-1,1] == '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\nend	\N	\N	0	1	2014-05-20 23:32:55	2014-05-20 23:32:55	265	bob.rb
520	23	2f8a4d94ec67e39c1731e421	pending	elixir	word-count	defmodule Words do\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> String.split(%r/\\W+/, trim: true)\n      |> count_words\n  end\n\n  defp count_words(words) do\n    Enum.reduce(words, HashDict.new, fn(word, tally) ->\n      Dict.update(tally, word, 1, &(&1+1))\n    end)\n  end\nend	\N	\N	0	5	2014-01-27 16:38:44	2014-01-27 16:38:44	271	word-count.exs
298	20	012038097aa4602b7a59f3d3	done	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle \n  attr_reader :side_one, :side_two, :side_three\n\n  def initialize(side_one, side_two, side_three)\n    @side_one = side_one\n    @side_two = side_two\n    @side_three = side_three\n  end\n\n  def kind\n    if invalid_side? || violates_inequality?\n      raise TriangleError\n    elsif equilateral? \n      :equilateral\n    elsif isoscoles? \n      :isosceles\n    else\n      :scalene\n    end\n  end\n\nprivate\n\n\tdef equilateral?\n\t\t[side_one, side_two, side_three].uniq.count == 1  \t\t\n\tend\n\n\tdef isoscoles?\n\t\t[side_one, side_two, side_three].uniq.count == 2\n\tend\n\n  def invalid_side?\n    [side_one, side_two, side_three].any? { |side| side <= 0} \n  end\n\n  def violates_inequality?\n\t\tsorted_triangle = [side_one, side_two, side_three].sort\n\t\tsorted_triangle[0] + sorted_triangle[1] <= sorted_triangle[2]\n  end\n\nend	2014-06-21 04:08:54	\N	0	2	2014-06-20 08:58:30	2014-06-20 08:58:30	153	triangle.rb
299	20	cbf85f54ca07a70023aa13e6	done	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n  \twords = Regex.split(~r/[^\\w\\d\\-]|_/,String.downcase(sentence))\n  \tresult = HashDict.new()\n  \tresult = counting(words,result)\n  end\n\n  def counting([], result), do: result\n  def counting([head | tail ], result) do\n  \tif String.strip(head)!="" do\n  \t\tresult = result\n  \t\t|> HashDict.update(head, 1, &(&1 + 1))\n  \tend\n  \tcounting(tail, result)\n  end\nend	2014-06-05 05:06:07	\N	0	2	2014-06-03 10:20:00	2014-06-03 10:20:00	154	word_count.exs
300	20	7ada92bad5a718a054100945	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n  \twords = Regex.split(~r/[^\\w\\d\\-]|_/,String.downcase(sentence))\n  \tresult = HashDict.new()\n  \tresult = counting(words,result)\n  end\n\n\tdef counting([], result) do\n\t\tresult\n  \tend\n  \tdef counting([head | tail ], result) do\n  \t\tif String.strip(head)!="" do\n\t  \t\tresult = case HashDict.has_key?(result, head) do\n\t  \t\t\ttrue -> HashDict.put(result, head, result[head]+1)\n\t\t\t\tfalse -> HashDict.put(result, head, 1)\n\t\t\tend\n\t\tend\n\t\tcounting(tail, result)\n\tend\nend	\N	\N	0	1	2014-07-02 02:12:21	2014-07-02 02:12:21	154	word_count.exs
301	20	56c88e4acc549f79bdfedea7	superseded	ruby	rna-transcription	class Complement\n  DNA = {\n    'G' => 'C',\n    'C' => 'G',\n    'T' => 'A',\n    'A' => 'U'\n  }\n  RNA = DNA.invert\n\n  def self.of_dna(sequence)\n    transcribe(sequence, DNA)\n  end\n\n  def self.of_rna(sequence)\n    transcribe(sequence, RNA)\n  end\n\n  def self.transcribe(sequence, type)\n    sequence.chars.map { |nucleotide| type[nucleotide] }.join\n  end\nend	\N	\N	0	2	2014-06-20 03:18:04	2014-06-20 03:18:04	155	complement.rb
302	20	b4c2554e918d252d96b0dfd3	superseded	ruby	rna-transcription	class Complement\n  DNA_PAIRS = {\n    'G' => 'C',\n    'C' => 'G',\n    'T' => 'A',\n    'A' => 'U'\n  }\n\n  def self.of_dna(sequence)\n    transcribe(sequence) { |nucleotide| DNA_PAIRS[nucleotide] }\n  end\n\n  def self.of_rna(sequence)\n    transcribe(sequence) { |nucleotide| DNA_PAIRS.key(nucleotide) }\n  end\n\n  def self.transcribe(sequence, &block)\n    sequence.chars.map(&block).join\n  end\nend	\N	\N	0	1	2014-06-24 01:26:22	2014-06-24 01:26:22	155	complement.rb
303	20	ecf65ebb6bc0a847aa735e0e	done	ruby	rna-transcription	class Complement\n  DNA = 'GCTA'\n  RNA = 'CGAU'\n\n  def self.of_dna(sequence)\n    sequence.tr(DNA, RNA)\n  end\n\n  def self.of_rna(sequence)\n    sequence.tr(RNA, DNA)\n  end\nend	2014-07-23 17:06:59	\N	0	3	2014-07-21 08:05:37	2014-07-21 08:05:37	155	complement.rb
304	20	4d106c143afb30dccbfbed78	done	ruby	largest-series-product	class Series\r\n\t\r\n\tdef initialize(series)\r\n\t\t@series = series\r\n\tend\r\n\t\r\n\tdef digits\r\n\t\t@series.split(//).map {|digit| digit.to_i}\r\n\tend\r\n\t\r\n\tdef slices(number)\r\n\t\traise ArgumentError.new('No subsets that size possible. Enter smaller number.') if number > @series.length\r\n\t\tnew_arr = []\r\n\t\tunless number == 0\t\r\n\t\t\tarr = self.digits\r\n\t\t\twhile arr.size >= number\r\n\t\t\t\tnew_arr << arr.take(number)\r\n\t\t\t\tarr = arr.drop(1)\r\n\t\t\tend\r\n\t\tend\r\n\t\tnew_arr\r\n\tend\r\n\r\n\tdef largest_product(number)\r\n\t\tarr = self.slices(number)\r\n\t\tlargest_product = 1\r\n\t\tunless arr == []\r\n\t\t\tarr.each do |sub_array|\r\n\t\t\t\tproduct = 1\r\n\t\t\t\tsub_array.each do |digit|\r\n\t\t\t\t\tproduct *= digit\r\n\t\t\t\tend\r\n\t\t\t\tif product > largest_product\r\n\t\t\t\t\tlargest_product = product\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tlargest_product\r\n\tend\r\n\r\nend	2014-07-20 13:02:40	\N	0	1	2014-07-12 05:07:59	2014-07-12 05:07:59	156	series.rb
305	20	d9faf949e4c1835d73b99a1a	done	haskell	robot-name	module Robot (Robot, mkRobot, robotName, resetName) where\n\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\nimport Control.Monad (void)\nimport System.Random (randomRIO)\n\ndata Robot = Robot { robotNameVar :: MVar String }\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newMVar >>= return . Robot\n\nresetName :: Robot -> IO ()\nresetName r = void (generateName >>= swapMVar (robotNameVar r))\n\nrobotName :: Robot -> IO String\nrobotName = readMVar . robotNameVar\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO pattern\n  where pattern = [ letter, letter, digit, digit, digit ]\n        letter = ('A', 'Z')\n        digit = ('0', '9')	2014-07-10 08:47:23	\N	0	1	2014-07-07 01:16:05	2014-07-07 01:16:05	157	robot-name.hs
306	20	ad8e010afaf389ac1292e8c5	done	ruby	grains	class Grains\n\n  def square(x)\n    2 ** (x-1)\n  end\n\n  def total\n    total = 0\n    x = 1\n    while x <= 64\n      total += square(x)\n      x += 1\n    end\n    total\n  end\nend	2014-06-13 20:48:11	\N	0	1	2014-06-09 08:15:44	2014-06-09 08:15:44	158	grains.rb
307	20	aa72d8e4538e47efeac15b76	done	elixir	grade-school	defmodule School do\n\t@moduledoc """\n\tSimulate students in a school.\n\n\tEach student is in a grade.\n\t"""\n\n\t@doc """\n\tAdd a student to a particular grade in school.\n\t"""\n\t@spec add(Dict.t, String.t, pos_integer) :: Dict.t\n\tdef add(db, name, grade) do\n\t\tDict.update db, grade, [name], fn(l) -> l ++ [name] end\n\tend\n\n\t@doc """\n\tReturn the names of the students in a particular grade.\n\t"""\n\t@spec grade(Dict.t, pos_integer) :: [String]\n\tdef grade(db, grade) do\n\t\tcase db[grade] do\n\t\t\tnil -> []\n\t\t\tx -> x\n\t\tend\n\tend\n\n\t@doc """\n\tSorts the school by grade and name.\n\t"""\n\t@spec sort(Dict) :: Dict.t\n\tdef sort(db) do\n\t\tEnum.into db, %{}, fn({grade, students}) ->\n\t\t\t{grade, Enum.sort students |> Enum.reverse}\n\t\tend\n\tend\nend	2014-07-24 00:14:49	\N	0	1	2014-07-15 14:50:51	2014-07-15 14:50:51	159	school.exs
393	40	9bcce669611998418434030d	pending	haskell	prime-factors	module PrimeFactors (primeFactors) where\n\nisFactorOf :: Int -> Int -> Bool\nisFactorOf n x = \n\tn `mod` x == 0\n\nprimeFactors :: Int -> [Int]\nprimeFactors 1 = []\nprimeFactors n =\n\tlet factor = head $ filter (isFactorOf n) [2..n]\n\tin [factor] ++ primeFactors (div n factor)\n\n\t	\N	\N	0	1	2014-06-15 12:27:31	2014-06-15 12:27:31	204	prime-factors.hs
510	17	b0a6b547041681557bfc3229	superseded	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    #Thank you for the nitpicks, really appreciate the feedback!\n\n    case \n    when is_silent?( phrase )\n      'Fine. Be that way!'\n    when is_shouting?( phrase )\n      'Woah, chill out!'\n    when is_question?( phrase )\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\n  private\n\n  def is_question?( phrase )\n    phrase.end_with? '?'\n  end\n\n  def is_silent?( phrase )\n    phrase.strip.empty?\n  end\n\n  def is_shouting?( phrase )\n    phrase.upcase == phrase \n  end\n\nend	\N	\N	0	2	2014-06-11 03:55:32	2014-06-11 03:55:32	265	bob.rb
308	20	6c4c6efc93d101680fe51cdd	done	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\ntype runeslice []rune\n\nfunc (p runeslice) Len() int           { return len(p) }\nfunc (p runeslice) Less(i, j int) bool { return p[i] < p[j] }\nfunc (p runeslice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }\n\n// Detect finds out anagrams among candidates of subject\nfunc Detect(subject string, candidates []string) (anagrams []string) {\n\tanagrams = make([]string, 0, len(candidates))\n\tcount := 0\n\n\tsubject = strings.ToLower(subject)\n\tfor _, candidate := range candidates {\n\t\tif len(subject) != len(candidate) {\n\t\t\tcontinue\n\t\t}\n\n\t\tcandidate := strings.ToLower(candidate)\n\n\t\tif subject == candidate {\n\t\t\tcontinue\n\t\t}\n\n\t\ta := runeslice(subject)\n\t\tb := runeslice(candidate)\n\n\t\tsort.Sort(a)\n\t\tsort.Sort(b)\n\n\t\tif string(a) == string(b) {\n\t\t\tanagrams = anagrams[0 : count+1]\n\t\t\tanagrams[count] = candidate\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn\n}	2014-06-28 04:26:14	\N	0	1	2014-06-22 05:35:45	2014-06-22 05:35:45	160	anagram.go
309	20	6573febf86d920cf0c15eba9	done	scala	bob	/**\n * Created by jindrich on 26.4.14.\n */\nclass Bob {\n  private val questionRegexp = """.*\\?$""".r\n  private val shoutingRegexp = """^[\\p{Upper}\\p{Space}\\p{Punct}]+$""".r\n  private val emptyRegexp = """^\\p{Space}*$"""\n\n  def hey(message: String): String = {\n    message match {\n      case `shoutingRegexp` => "Woah, chill out!"\n      case `questionRegexp` => "Sure."\n      case `emptyRegexp` => "Fine. Be that way!"\n      case _ => "Whatever."\n\n    }\n  }\n\n}	2014-06-22 01:52:10	\N	0	1	2014-06-21 09:44:04	2014-06-21 09:44:04	161	Bob.scala
310	20	5f5bf9368d5dd6165b465517	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (isSpace, isUpper, isLower, isAlpha)\nimport Data.List (isInfixOf)\n\nresponseFor phrase \n  | is_empty phrase = "Fine. Be that way!"\n  | shouty phrase = "Woah, chill out!"\n  | question phrase = "Sure."\n  | otherwise = "Whatever."                   \n  where question = (== '?') . last\n        is_empty = all isSpace\n        isUpperOrNonAlpha c | not (isAlpha c) = True\n                            | isUpper c = True\n                            | otherwise = False\n        shouty phrase = any isUpper phrase && \n                        all isUpperOrNonAlpha phrase\n                  	2014-07-01 13:08:12	\N	0	1	2014-06-26 21:18:31	2014-06-26 21:18:31	162	bob.hs
311	20	c45858c98c15b6c7fb53db75	done	elixir	meetup	defmodule Meetup do\n  @moduledoc """\n  Calculate meetup dates.\n  """\n  \n  @type weekday ::\n      :monday | :tuesday | :wednesday\n    | :thursday | :friday | :saturday | :sunday\n\n  @type schedule :: :first | :second | :third | :fourth | :last | :teenth\n\n  @doc """\n  Calculate a meetup date.\n\n  The schedule is in which week (1..4, last or "teenth") the meetup date should \n  fall.\n  """\n  @spec meetup(pos_integer, pos_integer, weekday, schedule) :: :calendar.date\n  def meetup(year, month, weekday, schedule) do\n    y = rem(year, 100)\n    m = month_val(month, year) \n    c = century_val( Float.floor(year / 100) )\n    w = weekday_val(weekday)\n    base = m + Float.floor(5 * y / 4) + c\n\n    date = get_dates(w, base, month, year) |> select_date schedule\n\n    { year, month, date }\n  end\n\n  defp get_dates(w, base, month, year) do\n    gen_dates( \n      w - base + Float.floor(base / 7) * 7, \n      month, year, days_in_month(month, year)\n    )\n  end\n\n  defp gen_dates(day, month, year, max) do\n    if day <= max do\n      if day > 0 do\n        [ day | gen_dates(day + 7, month, year, max) ]\n      else\n        gen_dates(day + 7, month, year, max)\n      end\n    else \n      []\n    end\n  end\n\n  defp select_date(dates, schedule) do\n    index = case schedule do\n      :first -> 0\n      :second -> 1\n      :third -> 2\n      :fourth -> 3\n      :last -> Enum.count(dates) - 1 \n      :teenth -> Enum.find_index(dates, fn(date) -> date > 12 && date < 20 end)\n    end\n    Enum.at dates, index\n  end  \n\n  @spec weekday_val(weekday) :: non_neg_integer\n  defp weekday_val(weekday) do\n    case weekday do\n      :sunday -> 0\n      :monday -> 1\n      :tuesday -> 2\n      :wednesday -> 3\n      :thursday -> 4\n      :friday -> 5\n      :saturday -> 6\n    end\n\n  end\n\n  defp month_val(m, year) do\n    case m do\n      1 -> if leap_year?(year) do -1 else 0 end\n      2 -> if leap_year?(year) do 2 else 3 end\n      3 -> 3\n      4 -> 6\n      5 -> 1\n      6 -> 4\n      7 -> 6\n      8 -> 2\n      9 -> 5\n      10 -> 0\n      11 -> 3\n      12 -> 5\n    end\n  end  \n\n  defp century_val(c) do\n    case rem(c, 4) do\n      0 -> 6\n      1 -> 4\n      2 -> 2\n      3 -> 0\n    end\n  end\n\n  @spec leap_year?(non_neg_integer) :: boolean\n  defp leap_year?(year) do\n    cond do\n      rem(year, 400) == 0 -> true\n      rem(year, 100) == 0 -> false\n      rem(year, 4) == 0 -> true\n      true -> false \n    end\n  end\n    \n  defp days_in_month(m, year) do\n    case m do\n      1 -> 31\n      2 -> if leap_year?(year) do 29 else 28 end\n      3 -> 31\n      4 -> 30\n      5 -> 31\n      6 -> 30\n      7 -> 31\n      8 -> 31\n      9 -> 30\n      10 -> 31\n      11 -> 30\n      12 -> 31\n    end\n  end\n\nend	2014-07-11 07:48:17	\N	0	1	2014-07-08 14:34:16	2014-07-08 14:34:16	163	meetup.exs
312	20	ec28ac6d948f0139e1042f79	done	python	bob	class Bob:\n    def hey(self, message):\n        if message == None or len(message.strip()) == 0:\n            return "Fine. Be that way!"\n        if message == message.upper():\n            return "Woah, chill out!"\n        if message[-1] == '?':\n            return "Sure."\n        return "Whatever."	2014-06-13 18:14:35	\N	0	1	2014-06-03 15:52:12	2014-06-03 15:52:12	164	bob.py
313	20	d4a0233329e8c9802bda59c5	done	javascript	raindrops	var raindropsForRainSpeak = function(rainSpeak){\n  function Raindrops(){}\n\n  Raindrops.prototype.convert = function(number){\n    var numberToRainSpeak = '';\n\n    for (var rainNumber in rainSpeak){\n      if (number%rainNumber === 0){\n        numberToRainSpeak += rainSpeak[rainNumber];\n      }\n    }\n\n    if (numberToRainSpeak === ''){\n      numberToRainSpeak = number;\n    }\n    return numberToRainSpeak.toString();\n  };\n\n  return Raindrops;\n};\n\nvar defaultRainSpeak = {\n  3: 'Pling',\n  5: 'Plang',\n  7: 'Plong'\n};\n\nmodule.exports = raindropsForRainSpeak(defaultRainSpeak);	2014-06-16 01:10:09	\N	0	1	2014-06-09 07:10:29	2014-06-09 07:10:29	165	raindrops.js
511	17	3a2254fdf4c074838c478b97	superseded	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    phrase = AdultGibberish.new( phrase )\n\n    case \n    when phrase.is_silent?\n      'Fine. Be that way!'\n    when phrase.is_shouting?\n      'Woah, chill out!'\n    when phrase.is_question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\nend\n\nclass AdultGibberish < String \n\n  attr_reader :phrase\n\n  def initialize( phrase )\n    @phrase = phrase\n  end\n\n  def is_question?\n    phrase.end_with? '?'\n  end\n\n  def is_silent?\n    phrase.strip.empty?\n  end\n\n  def is_shouting?\n    phrase.upcase == phrase \n  end\n\nend	\N	\N	0	3	2014-06-15 13:39:08	2014-06-15 13:39:08	265	bob.rb
332	34	b0e799f95e6d2afe92d4d206	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(@text)\n    word_counter.word_make_up\n  end\nend\n\nclass WordCounter\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_make_up\n    count_occurances word_list\n  end\n\nprivate\n\n  def word_list\n    @text.scan(/\\w+/)\n  end\n\n  def count_occurances(list)\n    list.each_with_object(Hash.new(0)) do |word,hash| \n      hash[word] += 1\n    end\n  end\nend	\N	\N	0	6	2014-06-05 12:51:55	2014-06-05 12:51:55	173	word-count.rb
512	17	ac637602f805b7f45342892d	pending	ruby	bob	class Bob\n\n  def hey( phrase )\n\n    phrase = AdultGibberish.new( phrase )\n\n    case \n    when phrase.silent?\n      'Fine. Be that way!'\n    when phrase.shouting?\n      'Woah, chill out!'\n    when phrase.question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n\n  end\n\nend\n\nclass AdultGibberish\n\n  attr_reader :phrase\n\n  def initialize( phrase )\n    @phrase = phrase\n  end\n\n  def question?\n    phrase.end_with? '?'\n  end\n\n  def silent?\n    phrase.strip.empty?\n  end\n\n  def shouting?\n    phrase.upcase!.nil?\n  end\n\nend	\N	\N	0	4	2014-06-20 06:46:08	2014-06-20 06:46:08	265	bob.rb
513	17	25fa791a3b4c707cbc5869e6	pending	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber cs\n  | length num == 10 = num\n  | length num == 11 && head num == '1' = tail num\n  | otherwise = take 10 $ repeat '0'\n    where num = filter isDigit cs\n\nareaCode :: String -> String\nareaCode = take 3\n\nprettyPrint :: String -> String\nprettyPrint cs = printf "(%s) %s-%s"\n                        (areaCode num)\n                        (take 3 $ drop 3 num)\n                        (take 4 $ drop 6 num)\n                          where num = number cs	\N	\N	0	1	2014-05-25 18:18:50	2014-05-25 18:18:50	266	phone-number.hs
521	23	cda6274811cd9cdc22974c57	superseded	elixir	word-count	defmodule Words do\n  def count(sentence) do\n    sentence\n      |> String.downcase\n      |> String.split(%r/\\W+/, trim: true)\n      |> count_words\n  end\n\n  defp count_words([h|t], tally // HashDict.new) do\n    increment = fn(x) -> x + 1 end\n    tally = HashDict.update(tally, h, 1, increment)\n    count_words t, tally\n  end\n\n  defp count_words([], acc) do\n    acc\n  end\nend	\N	\N	0	3	2014-02-10 17:14:58	2014-02-10 17:14:58	271	word-count.exs
314	35	dbf72eb1590374db0a5d268d	done	ruby	bob	########################################################\n# Solution #4,\n#   It would be interesting to define a series of blocks\n#   for the conditions, and to use the result of evaluating\n#   the blocks to determine the answer.  Alas, I have to go\n#   to work.\n########################################################\n\n########################################################\n# Solution #3, separate arrangement from work using\n#              Answers as registered handlers.\n#              This disperses responsibility for knowing\n#              the 'right' answer into the answers themselves,\n#              and suggests that an external configuration\n#              for HANDLERS might be useful.\n########################################################\nclass AnswerSilence\n\n  def self.handles?(input)\n    input.empty?\n  end\n\n  def reply\n    'Fine. Be that way.'\n  end\nend\n\nclass AnswerQuestion\n\n  def self.handles?(input)\n    input.include?('?')\n  end\n\n  def reply\n    'Sure.'\n  end\nend\n\nclass AnswerShout\n\n  def self.handles?(input)\n    input == input.upcase\n  end\n\n  def reply\n    'Woah, chill out!'\n  end\nend\n\nclass AnswerDefault\n\n  def self.handles?(input)\n    true\n  end\n\n  def reply\n    'Whatever.'\n  end\nend\n\nclass Bob\n  HANDLERS = [AnswerSilence, AnswerQuestion, AnswerShout, AnswerDefault]\n\n  def hey(input)\n    answerer(input).reply\n  end\n\n  def answerer(input)\n    HANDLERS.find {|answer| answer.handles?(input)}.new\n  end\n\nend\n\n#\n########################################################\n# Solution #2, separate arrangement from work while\n#              leaving case statement in factory.\n#              This is a good intermediate choice that\n#              simplifies Bob and the Answers and moves\n#              the mess to the Factory.\n########################################################\n# class AnswerSilence\n#   def reply\n#     'Fine. Be that way.'\n#   end\n# end\n# \n# class AnswerQuestion\n#   def reply\n#     'Sure.'\n#   end\n# end\n# class AnswerShout\n#   def reply\n#     'Woah, chill out!'\n#   end\n# end\n# \n# class AnswerDefault\n#   def reply\n#     'Whatever.'\n#   end\n# end\n# \n# class AnswerFactory\n#   def self.answer(input)\n#     case \n#     when input == ''\n#       AnswerSilence.new\n#     when input == input.upcase\n#       AnswerShout.new\n#     when input.include?('?')\n#       AnswerQuestion.new\n#     else\n#       AnswerDefault.new\n#     end\n#   end\n# end\n# \n# \n# class Bob\n#   def hey(input)\n#     AnswerFactory.answer(input).reply\n#   end\n# end\n# \n########################################################\n# Solution #1, first choice if nothing ever changes\n########################################################\n# class Bob\n#\n#   def hey(input)\n#     case\n#     when input == ''\n#       'Fine. Be that way.'\n#     when input == input.upcase\n#       'Woah, chill out!'\n#     when input.include?('?')\n#       'Sure.'\n#     else\n#       'Whatever.'\n#     end\n#   end\n#\n# end	2014-07-26 05:56:20	\N	0	1	2014-07-18 07:04:24	2014-07-18 07:04:24	166	bob.rb
315	35	b899e09762e983444603872e	superseded	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance\n  [s1 s2]\n  (loop [[hd1 & tl1] s1\n         [hd2 & tl2] s2\n         acc-dist (atom 0)]\n    (if-not (= hd1 hd2) (swap! acc-dist inc))\n    (if (some empty? [tl1 tl2])\n      @acc-dist\n      (recur tl1 tl2 acc-dist))))	\N	\N	0	1	2014-07-17 08:01:44	2014-07-17 08:01:44	167	dna.clj
316	35	e8d5a1979802b4ae7400398c	superseded	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance\n  [s1 s2]\n  (reduce +\n          (map\n           #(if (= %1 %2) 0 1)\n           s1 s2)))	\N	\N	0	2	2014-07-17 23:01:23	2014-07-17 23:01:23	167	dna.clj
317	35	70f3637fb8df3796a67c6594	done	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance\n  [s1 s2]\n  (count (filter identity (map not= s1 s2))))	2014-07-25 06:17:14	\N	0	3	2014-07-19 03:43:19	2014-07-19 03:43:19	167	dna.clj
318	29	a074ade23293970c338e1722	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n\n  def initialize(subject)\n    @subject = subject\n  end\n  \n  def match(list_to_compare)\n    list_to_compare.select { |word| same_letters?(word) }\n  end\n\n  def same_letters?(word)\n    word.sort_chars == subject.sort_chars\n  end\nend\n\nclass String\n  def sort_chars\n    chars.sort\n  end\nend	\N	\N	0	3	2014-04-03 11:55:26	2014-04-03 11:55:26	168	anagram.rb
319	29	6a463219713bd893137a1883	done	ruby	anagram	class Anagram\n  attr_reader :subject_letters\n\n  def initialize(subject)\n    @subject_letters = Anagram.alphabetize(subject)\n  end\n  \n  def match(candidates)\n    candidates.select { |word| anagram?(word) }\n  end\n\n  def anagram?(word)\n    Anagram.alphabetize(word) == subject_letters\n  end\n\n  def self.alphabetize(word)\n    word.chars.sort\n  end\nend	2014-04-16 07:24:05	\N	0	6	2014-04-15 08:09:22	2014-04-15 08:09:22	168	anagram.rb
320	29	813b9c3bc1d89756a5eedcfa	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n\n  def initialize(subject)\n    @subject = subject\n  end\n  \n  def match(candidates)\n    candidates.select { |word| anagram?(word) }\n  end\n\n  def anagram?(word)\n    @subject_letters ||= subject.alphabetize\n    word.alphabetize == @subject_letters\n  end\nend\n\nclass String\n  def alphabetize\n    chars.sort\n  end\nend	\N	\N	0	4	2014-06-08 14:23:47	2014-06-08 14:23:47	168	anagram.rb
321	29	5326c58a105790825b8553e5	superseded	ruby	anagram	class Anagram\n  attr_reader :inngangsord\n\n  def initialize(ordet)\n    @inngangsord = ordet\n  end\n  \n  def match(ordliste)\n    ordliste.select do |ordet|\n      ordet if samme_storrelse(ordet) && samme_bokstavene(ordet)\n    end\n  end\n\n  def samme_storrelse(ordet)\n    ordet.size == inngangsord.size\n  end\n\n  def samme_bokstavene(ordet)\n    ordet.chars.sort == inngangsord.chars.sort\n  end\nend	\N	\N	0	1	2014-06-12 05:06:25	2014-06-12 05:06:25	168	anagram.rb
322	29	e4e4c44014c86239e547b51b	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n\n  def initialize(subject)\n    @subject = subject\n  end\n  \n  def match(list_to_compare)\n    list_to_compare.select { |word| word if anagrammatists_dream(word) }\n  end\n\n  def anagrammatists_dream(word)\n    same_size(word) && same_letters(word)\n  end\n\n  def same_size(word)\n    word.size == subject.size\n  end\n\n  def same_letters(word)\n    word.chars.sort == subject.chars.sort\n  end\nend	\N	\N	0	2	2014-06-18 13:06:52	2014-06-18 13:06:52	168	anagram.rb
323	29	45d3a62d4d9786e0f4760449	superseded	ruby	anagram	class Anagram\n  attr_reader :subject_letters\n\n  def initialize(subject)\n    @subject_letters ||= subject.alphabetize\n  end\n  \n  def match(candidates)\n    candidates.select { |word| anagram?(word) }\n  end\n\n  def anagram?(word)\n    word.alphabetize == subject_letters\n  end\nend\n\nclass String\n  def alphabetize\n    chars.sort\n  end\nend	\N	\N	0	5	2014-07-11 18:47:37	2014-07-11 18:47:37	168	anagram.rb
324	29	85d68ba24cfadd310f5b94ec	done	python	word-count	class Phrase:\n    def __init__(self, phrase):\n        phrase = phrase.lower() + '-'\n        words = {}\n\n        word = None\n        for ch in phrase:\n            if ch.isalnum():\n                if word is None:\n                    word = ''\n                word += ch\n            else:\n                if word is not None:\n                    if word not in words:\n                        words[word] = 1\n                    else:\n                        words[word] += 1\n                    word = None\n        self.words = words\n\n    def word_count(self):\n        return self.words\n            	2014-05-20 10:43:16	\N	0	1	2014-05-16 19:50:48	2014-05-16 19:50:48	169	wordcount.py
325	34	7370f0f1fc418f75ca6de840	superseded	ruby	hamming	class Hamming\n  def self.compute(x, y)\n    if x !=y\n      xs = x.split(//)\n      ys = y.split(//)\n      a = 0\n      ys.each{\n        |i|\n        puts i == xs[a]\n        a += 1\n      }\n      return a\n    else\n      return 0\n    end\n  end\nend	\N	\N	0	1	2014-06-03 03:42:58	2014-06-03 03:42:58	170	hamming.rb
326	34	c4c9c733ce5ee0a3b651a7e1	done	ruby	hamming	class Hamming\n  def self.compute(x, y)\n    xs = x.split(//)\n    ys = y.split(//)\n    ham = 0\n    xs.count.times do |num|\n      if xs.count <= ys.count && xs[num] != ys[num]\n        ham += 1\n      end\n    end\n    ham\n  end\nend	2014-06-16 23:22:18	\N	0	2	2014-06-07 14:18:15	2014-06-07 14:18:15	170	hamming.rb
327	34	75742f6e166207a8f9d6393f	done	ruby	gigasecond	class Gigasecond\n  attr_accessor :date\n\n  def initialize(date)\n    @date = (date.to_time + 10**9).to_date\n  end\nend	2014-07-09 18:26:23	\N	0	1	2014-07-01 14:36:22	2014-07-01 14:36:22	171	gigasecond.rb
328	34	1b817bdd332f0fd53a571678	done	go	etl	package etl\n\nimport (\n\t"strings"\n)\n\nfunc Transform(in map[int][]string) map[string]int {\n\tout := make(map[string]int)\n\tfor score, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tout[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\treturn out\n}	2014-05-19 17:29:31	\N	0	1	2014-05-11 10:48:06	2014-05-11 10:48:06	172	etl.go
394	40	dc4ca4bd6ef5698d939fd2db	pending	clojure	grade-school	(ns school)\n\n(defn grade [db num](get db num []))\n\n(defn add [db name num]\n  (assoc db num (conj (grade db num) name)))\n\n(defn sorted [db]\n  (reduce-kv (fn [ret k v] (assoc ret k (sort v))) {} db))	\N	\N	0	1	2014-07-13 01:44:51	2014-07-13 01:44:51	205	school.clj
334	34	aabf2f86284b2aee0c6ee4bb	done	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(word_list)\n    word_counter.word_make_up\n  end\n\n  private\n\n  def word_list\n    @text.downcase.scan(/\\w+/)\n  end\nend\n\nclass WordCounter\n  def initialize(word_list)\n    @word_list = word_list\n  end\n\n  def word_make_up\n    count_occurances @word_list\n  end\n\nprivate\n\n  def count_occurances(words)\n    words.each_with_object(Hash.new(0)) do |word,word_count| \n      word_count[word] += 1\n    end\n  end\nend	2014-06-21 12:33:56	\N	0	9	2014-06-13 12:14:06	2014-06-13 12:14:06	173	word-count.rb
335	34	fb0d61ce3dc6fad9de5b0603	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text.downcase\n  end\n\n  def word_count\n    word_counter = WordCounter.new(word_list)\n    word_counter.word_make_up\n  end\n\n  private\n\n  def word_list\n    @text.scan(/\\w+/)\n  end\nend\n\nclass WordCounter\n  def initialize(word_list)\n    @word_list = word_list\n  end\n\n  def word_make_up\n    count_occurances @word_list\n  end\n\nprivate\n\n  def count_occurances(words)\n    words.each_with_object(Hash.new(0)) do |word,word_count| \n      word_count[word] += 1\n    end\n  end\nend	\N	\N	0	8	2014-06-20 08:33:03	2014-06-20 08:33:03	173	word-count.rb
336	34	3bc77ef95496bbb5bb67a3f2	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(@text)\n    word_counter.word_make_up\n  end\nend\n\nclass WordCounter\n  def initialize(text)\n    @text = text\n  end\n\n  def word_make_up\n    count_words(build_word_list)\n  end\n\nprivate\n\n  def build_word_list\n    @text.scan(/\\w+/).map(&:downcase)\n  end\n\n  def count_words(list)\n    list.each_with_object({}){|name, hash| hash[name] ? hash[name] += 1 : hash[name] = 1}\n  end\nend	\N	\N	0	2	2014-06-21 23:38:58	2014-06-21 23:38:58	173	word-count.rb
337	34	b186ba2588e1e1234cf42a9f	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    word_counter = WordCounter.new(@text)\n    word_counter.word_make_up\n  end\nend\n\nclass WordCounter\n  def initialize(text)\n    @text = text\n  end\n\n  def word_make_up\n    count_words(build_word_list)\n  end\n\nprivate\n\n  def build_word_list\n    @text.scan(/\\w+/).map(&:downcase)\n  end\n\n  def count_words(list)\n    list.each_with_object(Hash.new(0)){|i,a| a[i] += 1}\n  end\nend	\N	\N	0	3	2014-07-01 21:30:59	2014-07-01 21:30:59	173	word-count.rb
338	13	fbecdc0ecb90a36096f73b04	pending	go	rna-transcription	package strand\n\nimport "bytes"\n\nfunc ToRna(dna string) string {\n\tvar buffer bytes.Buffer\n\n\tfor nuc := range transform(dna) {\n\t\tbuffer.WriteRune(nuc)\n\t}\n\n\treturn buffer.String()\n}\n\nfunc transform(dna string) <-chan rune {\n\tout := make(chan rune)\n\tgo func() {\n\t\tfor _, n := range dna {\n\t\t\tswitch {\n\t\t\tcase n == 'C':\n\t\t\t\tout <- 'G'\n\t\t\tcase n == 'G':\n\t\t\t\tout <- 'C'\n\t\t\tcase n == 'A':\n\t\t\t\tout <- 'U'\n\t\t\tcase n == 'T':\n\t\t\t\tout <- 'A'\n\t\t\t}\n\t\t}\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\n//go build -gcflags -m a.go	\N	\N	0	1	2014-07-25 08:08:27	2014-07-25 08:08:27	175	main.go
339	13	683aed6bc6ee78a81d791e8d	pending	ruby	leap	class Year\n  def self.leap?(year)\n    return false unless divisible_by?(year, 4)\n\n    is_century_but_not_fourth?(year) ? false : true\n  end\n\n  private\n  def self.divisible_by?(number, numerator)\n    number % numerator == 0\n  end\n\n  def self.is_century_but_not_fourth?(year)\n    divisible_by?(year, 100) && !divisible_by?(year, 400)\n  end\nend	\N	\N	0	1	2014-07-26 13:52:07	2014-07-26 13:52:07	176	year.rb
340	13	077a9b3792c69752a9574dad	superseded	ruby	bob	class Bob\n\n  def hey msg\n    return "Fine. Be that way." if !msg || msg.empty?\n\n    if msg == msg.upcase\n      "Woah, chill out!"\n    else\n      last_char = msg[-1]\n      if last_char == '?'\n        "Sure."\n      else\n        "Whatever."\n      end\n    end\n  end\n\nend	\N	\N	0	1	2014-07-23 23:57:42	2014-07-23 23:57:42	177	bob.rb
341	13	e1e5913790faaf693952fc21	superseded	ruby	bob	class Bob\n\n  def hey msg\n    return "Fine. Be that way." if is_silent?(msg)\n\n    if is_shouting?(msg)\n      "Woah, chill out!"\n    elsif is_question?(msg)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def is_silent? msg\n    !msg || msg.empty?\n  end\n\n  def is_shouting? msg\n    msg == msg.upcase\n  end\n\n  def is_question? msg\n    msg.end_with? '?'\n  end\n\nend	\N	\N	0	2	2014-07-24 05:59:08	2014-07-24 05:59:08	177	bob.rb
342	13	fc85be2d641b5da65bb90b52	superseded	ruby	bob	class Bob\n\n  def hey message\n    msg = get_usable_message message\n\n    if silent? msg\n      "Fine. Be that way."\n    elsif shouting? msg\n      "Woah, chill out!"\n    elsif question? msg\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def get_usable_message msg\n    msg.respond_to?(:to_str) ? msg.to_str : ''\n  end\n\n  def silent? msg\n    msg.empty?\n  end\n\n  def shouting? msg\n    msg == msg.upcase\n  end\n\n  def question? msg\n    msg.end_with? '?'\n  end\n\nend	\N	\N	0	5	2014-07-24 07:57:34	2014-07-24 07:57:34	177	bob.rb
343	13	fbdaa6a348dea9e8c29a14f0	superseded	ruby	bob	class Bob\n  def hey message\n    msg = make_replyable message\n\n    if silent? msg\n      "Fine. Be that way."\n    elsif shouting? msg\n      "Woah, chill out!"\n    elsif asking_question? msg\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def make_replyable msg\n    msg.respond_to?(:to_str) ? msg.to_str : ''\n  end\n\n  def silent? msg\n    msg.empty?\n  end\n\n  def shouting? msg\n    msg == msg.upcase\n  end\n\n  def asking_question? msg\n    msg.end_with? '?'\n  end\nend	\N	\N	0	6	2014-07-24 11:18:25	2014-07-24 11:18:25	177	bob.rb
344	13	7b5a4ae92236617e54fcfbb9	superseded	ruby	bob	class Bob\n  REPLIES = {\n    silence: "Fine. Be that way.",\n    shouting: "Woah, chill out!",\n    question: "Sure.",\n    default: "Whatever."\n  }\n\n  def hey message\n    msg = make_replyable message\n\n    if silent? msg\n      reply :silence\n    elsif shouting? msg\n      reply :shouting\n    elsif asking_question? msg\n      reply :question\n    else\n      reply :default\n    end\n  end\n\n  private\n\n  def make_replyable msg\n    msg.respond_to?(:to_str) ? msg.to_str : ''\n  end\n\n  def reply msg_type\n    REPLIES[msg_type]\n  end\n\n  def silent? msg\n    msg.empty?\n  end\n\n  def shouting? msg\n    msg == msg.upcase\n  end\n\n  def asking_question? msg\n    msg.end_with? '?'\n  end\nend	\N	\N	0	7	2014-07-24 14:31:10	2014-07-24 14:31:10	177	bob.rb
345	13	09a5ec543cc5c563a04d5ece	pending	ruby	bob	class Bob\n  def hey message\n    msg = message.to_s\n\n    if silent? msg\n      "Fine. Be that way."\n    elsif shouting? msg\n      "Woah, chill out!"\n    elsif asking_question? msg\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def silent? msg\n    msg.empty?\n  end\n\n  def shouting? msg\n    msg == msg.upcase\n  end\n\n  def asking_question? msg\n    msg.end_with? '?'\n  end\nend	\N	\N	0	8	2014-07-24 15:35:49	2014-07-24 15:35:49	177	bob.rb
514	17	fe56dcd74c9fd770dcdd722b	superseded	ruby	crypto-square	class Crypto\n\n  def initialize(str)\n    @text = str\n  end\n\n  def normalize_plaintext\n    @text.gsub(/\\W/,"").downcase\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan(Regexp.new(".{1,#{size}}"))\n  end\n\n  def ciphertext\n    size.times.with_object("") do |column, str|\n      plaintext_segments.each {|segment| str << segment[column] if segment[column]}\n    end\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(/.{1,5}/).join(" ")\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.size).ceil\n  end\nend	\N	\N	0	1	2014-05-24 02:11:04	2014-05-24 02:11:04	267	crypto.rb
346	13	ad7702146e96436112661f33	superseded	ruby	bob	class Bob\n\n  def hey msg\n    if is_silent?(msg)\n      "Fine. Be that way."\n    elsif is_shouting?(msg)\n      "Woah, chill out!"\n    elsif is_question?(msg)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def is_silent? msg\n    !msg || msg.empty?\n  end\n\n  def is_shouting? msg\n    msg == msg.upcase\n  end\n\n  def is_question? msg\n    msg.end_with? '?'\n  end\n\nend	\N	\N	0	3	2014-07-24 17:44:07	2014-07-24 17:44:07	177	bob.rb
347	13	6f8acda0b66c9e35d29f44cf	superseded	ruby	bob	class Bob\n\n  def hey message\n    msg = get_usable_message message\n\n    if is_silent? msg\n      "Fine. Be that way."\n    elsif is_shouting? msg\n      "Woah, chill out!"\n    elsif is_question? msg\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def get_usable_message msg\n    # Makes a copy of a valid string, but it keeps the logic simple\n    msg.respond_to?(:to_str) ? msg.to_str : nil\n  end\n\n  def is_not_a_proper_msg? msg\n    !msg.respond_to :to_s\n  end\n\n  def is_silent? msg\n    msg.nil? || msg.empty?\n  end\n\n  def is_shouting? msg\n    msg == msg.upcase\n  end\n\n  def is_question? msg\n    msg.end_with? '?'\n  end\n\nend	\N	\N	0	4	2014-07-25 20:08:21	2014-07-25 20:08:21	177	bob.rb
348	13	886d9fc3245f80b6c50fe90c	pending	ruby	scrabble-score	class Scrabble\n\n  LETTERS_PER_SCORE = {\n    1 => ['A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T'],\n    2 => ['D', 'G'],\n    3 => ['B', 'C', 'M', 'P'],\n    4 => ['F', 'H', 'V', 'W', 'Y'],\n    5 => ['K'],\n    8 => ['J', 'X'],\n    10 => ['Q', 'Z']\n  }\n\n  def initialize(word)\n    @word = word.strip if word\n    @score_per_letter = transform(LETTERS_PER_SCORE)\n  end\n\n  def transform(letters_per_score_db)\n    letters_per_score_db.each_with_object ({}) do |(score,letters), score_per_letter|\n      letters.each do |a_letter|\n        score_per_letter[a_letter.upcase] = score\n      end\n    end\n  end\n\n\n  def score\n    return 0 unless @word\n    @word.split("").reduce(0) do |sum,letter|\n      sum + @score_per_letter[letter.capitalize]\n    end\n  end\n\n  def self.score(word)\n    Scrabble.new(word).score\n  end\n\nend	\N	\N	0	1	2014-07-25 16:55:49	2014-07-25 16:55:49	178	scrabble.rb
349	40	29755e3bd57e4e2ff6405cc9	pending	clojure	beer-song	(ns beer (:require [clojure.pprint :as pp]\n                   [clojure.string :as str]))\n\n(defn bottles [number]\n  (pp/cl-format nil "~[no more~:;~D~] bottle~:P of beer" number number))\n\n(defn pick-action [number]\n  (case number\n    0 "Go to the store and buy some more"\n    1 "Take it down and pass it around"\n    "Take one down and pass it around"))\n\n(defn verse [number]\n  (let [\n        thisBottle (bottles number)\n        nextBottle (bottles (mod (dec number) 100))\n        action (pick-action number)\n        ]\n    (pp/cl-format\n     nil\n     "~@(~A~) on the wall, ~A.\\n~A, ~A on the wall.\\n"\n     thisBottle thisBottle action nextBottle)))\n\n(defn sing\n  ([begin] (sing begin 0))\n  ([begin end]\n     (str/join "\\n"\n               (map verse (range begin (dec end) -1)))))	\N	\N	0	2	2014-06-12 15:45:41	2014-06-12 15:45:41	179	beer.clj
350	40	422f6a1034aa5058f4c9e26d	superseded	clojure	beer-song	(ns beer (:require [clojure.pprint :as pp]\n                   [clojure.string :as str]))\n\n(defn bottles [number]\n  (pp/cl-format nil "~[no more~:;~D~] bottle~:P of beer" number number))\n\n(defn pick-action [number]\n  (case number\n    0 "Go to the store and buy some more"\n    1 "Take it down and pass it around"\n    "Take one down and pass it around"))\n\n(defn verse [number]\n  (let [\n    thisBottle (bottles number)\n    nextBottle (bottles (mod (dec number) 100))\n    action (pick-action number)\n    ]\n    (pp/cl-format\n     nil\n     "~@(~A~) on the wall, ~A.\\n~A, ~A on the wall.\\n"\n     thisBottle thisBottle action nextBottle)))\n\n(defn sing [begin & rest]\n  (let [end (if rest (first rest) 0) ]\n       (str/join "\\n"\n            (map verse (range begin (dec end) -1)))))	\N	\N	0	1	2014-07-05 00:51:59	2014-07-05 00:51:59	179	beer.clj
351	40	5e4a288e8795abf16b28faff	pending	javascript	bob	var Bob = function () {\n\treturn {\n\t\they: function (message) {\n\t\t\tif (message.trim()) {\n\t\t\t\tif (message.match(/[a-zA-Z]/)) {\n\t\t\t\t\tif (message.toUpperCase() === message) {\n\t\t\t\t\t\treturn "Woah, chill out!";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (message.lastIndexOf("?") === message.length - 1) {\n\t\t\t\t\treturn "Sure.";\n\t\t\t\t}\n\t\t\t\treturn "Whatever.";\n\t\t\t}\n\t\t\treturn "Fine. Be that way!";\n\t\t}\n\t};\n};\nmodule.exports = Bob;	\N	\N	0	1	2014-06-17 22:19:00	2014-06-17 22:19:00	180	bob.js
352	40	17d00df6aa9369962d2c3023	pending	ruby	bob	class Bob\n\n  def hey string\n    sentence = Sentence.new(string)\n    if sentence.empty?\n      "Fine. Be that way!"\n    elsif sentence.shouted?\n      "Woah, chill out!"\n    elsif sentence.questioned?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Sentence < Struct.new(:sentence)\n\n  def empty?\n    sentence.strip.empty?\n  end\n\n  def questioned?\n    sentence.end_with? "?"\n  end\n\n  def shouted?\n    sentence.upcase == sentence and not sentence.downcase == sentence\n  end\n\nend	\N	\N	0	1	2014-06-17 06:09:12	2014-06-17 06:09:12	181	bob.rb
353	40	05385fa5efff7f87816572d0	pending	elixir	grains	defmodule Grains do\n\n\tuse Bitwise\n\n\t@doc """\n\tCalculate two to the power of the input minus one.\n\t"""\n\n\t@spec square(pos_integer) :: pos_integer\n\n\tdef square(number) do\n\t\t1 <<< (number - 1)\n\tend\n\n\t@doc """\n\tAdds square of each number from 1 to 64.\n\t"""\n\n\t@spec total :: pos_integer\n\n\tdef total do\n\t\t0xffffffffffffffff\n\tend\n\nend	\N	\N	0	1	2014-06-15 11:20:32	2014-06-15 11:20:32	182	grains.exs
354	40	b135ce817e1b4a87c37eb2ee	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    output = ""\n\n    output = "Pling" if number % 3 == 0\n    output += "Plang" if number % 5 == 0\n    output += "Plong" if number % 7 == 0\n    output = number.to_s if output == ""\n\n    output\n  end\nend	\N	\N	0	1	2014-06-15 10:44:07	2014-06-15 10:44:07	183	raindrops.rb
355	40	ab4aa5ddda43c47203f49957	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    output = ""\n\n    output << "Pling" if is_factor?(number, 3)\n    output << "Plang" if is_factor?(number, 5)\n    output << "Plong" if is_factor?(number, 7)\n    output << number.to_s if output == ""\n\n    output\n  end\n\n  def self.is_factor?(number, factor)\n    number % factor == 0\n  end\nend	\N	\N	0	2	2014-06-25 19:04:14	2014-06-25 19:04:14	183	raindrops.rb
356	40	fcdc23f5262c42de9822e612	pending	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    output = String.new\n\n    output << "Pling" if is_factor?(number, 3)\n    output << "Plang" if is_factor?(number, 5)\n    output << "Plong" if is_factor?(number, 7)\n    output << number.to_s if is_blank?(output)\n\n    output\n  end\n\n  private\n\n  def self.is_factor?(number, factor)\n    number % factor == 0\n  end\n\n  def self.is_blank?(output)\n    output == ""\n  end\nend	\N	\N	0	3	2014-07-03 04:57:54	2014-07-03 04:57:54	183	raindrops.rb
377	40	e57a36ed26f8b51278abf3c3	pending	clojure	bob	(ns bob\n  [:require [clojure.string :refer (blank? upper-case)]])\n\n(defn- is-question?\n  [convo]\n  (= (last convo) \\?))\n\n(defn- is-yelling?\n  [convo]\n  (and\n    (re-find #"[A-Z]" convo)\n    (= (upper-case convo) convo)))\n\n(defn response-for\n  [convo]\n  (cond\n    (blank? convo) "Fine. Be that way!"\n    (is-yelling? convo) "Woah, chill out!"\n    (is-question? convo) "Sure."\n    :else "Whatever."))	\N	\N	0	2	2014-07-08 11:23:03	2014-07-08 11:23:03	195	bob.clj
357	40	885048705f63ab9c6131ec02	pending	javascript	say	function spell(digit, exp, arr) {\n  var digits = [\n    'zero', 'one', 'two', 'three', 'four',\n    'five', 'six', 'seven', 'eight', 'nine'\n  ], powers = {\n      0: '',\n      1: 'ty-',\n      2: ' hundred ',\n      3: ' thousand ',\n      6: ' million ',\n      9: ' billion '\n    }, keys = Object.keys(powers).reverse();\n\n  if (digit == 0 && arr.length > 1) return '';\n  if (digit == 1 && exp == 1) return 'teen';\n\n  exp = powers[exp] ? exp : exp % (keys[2] || keys[1] || keys[0]);\n  digit = (exp == 1)\n    ? handleExceptions(digits[digit])\n    : digits[digit];\n\n  return digit + powers[exp];\n};\n\nfunction handleExceptions(digit) {\n  var exceptions = {\n    two: 'twen',\n    three: 'thir',\n    four: 'for',\n    five: 'fif',\n    eight: 'eigh'\n  };\n  return exceptions[digit];\n};\n\n\nmodule.exports = {\n  inEnglish: function(number) {\n    if (number < 0 || number > 999999999999) {\n      throw new Error('Number must be between 0 and 999,999,999,999.');\n    }\n\n    var n = number.toString().split('').reverse().map(spell);\n\n    if (number > 20) {\n      return n.reverse().join('').replace(/\\s\\s*$/g, '');\n    };\n\n    return n.join('').replace('ty-', 'ty');\n  }\n};	\N	\N	0	1	2014-07-08 15:07:55	2014-07-08 15:07:55	184	say.js
358	40	7b8ecb927045639907a4e659	superseded	javascript	word-count	function Words(input) {\n  this.count = {};\n\n  this._normalizedWords = input.\n    toLowerCase().\n    replace(/[^\\w\\s]/g, '').\n    split(/\\s+/);\n\n  function countWords(word) {\n    this.count[word] ? this.count[word] += 1 : this.count[word] = 1\n  };\n\n  this._normalizedWords.forEach(countWords.bind(this));\n};\n\nmodule.exports = Words	\N	\N	0	2	2014-06-15 16:19:33	2014-06-15 16:19:33	185	word-count.js
359	40	94e910b8cb141ab64ba19fb5	superseded	javascript	word-count	function Words(input) {\n  this.count = {};\n\n  this._normalizedWords = input.toLowerCase().replace(/[^\\w\\s]/g, '').split(/\\s+/);\n\n  this._countWords = function() {\n    for (var i = 0; i < this._normalizedWords.length; i++) {\n      var word = this._normalizedWords[i];\n\n      this.count[word] ? this.count[word] += 1 : this.count[word] = 1\n    }\n  };\n\n  this._countWords();\n};\n\nmodule.exports = Words	\N	\N	0	1	2014-06-18 13:05:03	2014-06-18 13:05:03	185	word-count.js
360	40	e529f6d10e2983f1e46df9cc	pending	javascript	word-count	function Words(input) {\n  this.count = {};\n\n  this._normalizedWords = input.toLowerCase().match(/\\w+/g);\n\n  function countWords(word) {\n    this.count.hasOwnProperty(word) ? this.count[word] += 1 : this.count[word] = 1\n  };\n\n  this._normalizedWords.forEach(countWords.bind(this));\n};\n\nmodule.exports = Words	\N	\N	0	3	2014-07-02 03:54:21	2014-07-02 03:54:21	185	word-count.js
361	40	ac2896a91cb0a2f935ba58e2	superseded	ruby	custom-set	class CustomSet\n  include Enumerable\n\n  def initialize(elements = [])\n    @elements = elements.to_a.uniq.sort\n  end\n\n  def ==(other)\n    other == elements\n  end\n\n  def each(&block)\n    elements.each(&block)\n  end\n\n  def delete(element)\n    create reject { |e| e.eql? element }\n  end\n\n  def difference(other)\n    create reject { |e| other.member? e }\n  end\n\n  def intersection(other)\n    create find_all { |e| other.member? e }\n  end\n\n  def disjoint?(other)\n    intersection(other) == empty\n  end\n\n  def empty\n    create\n  end\n\n  def member?(element)\n    find { |e| e.eql? element }\n  end\n\n  def put(element)\n    create elements.clone << element\n  end\n\n  def size\n    elements.size\n  end\n\n  def subset?(other)\n    other.all? { |e| self.member? e }\n  end\n\n  def to_list\n    to_a\n  end\n\n  def union(other)\n    create elements.clone.push(*other.to_a)\n  end\n\nprivate \n  attr_reader :elements\n\n  def create(elements = [])\n    self.class.new elements\n  end\n\nend	\N	\N	0	1	2014-07-02 06:00:59	2014-07-02 06:00:59	186	custom_set.rb
362	40	472cac328b3641c5b8d3c066	superseded	ruby	custom-set	class CustomSet\n  include Enumerable\n\n  def initialize(elements = [])\n    @elements = elements.to_a.uniq.sort\n  end\n\n  def size\n    elements.size\n  end\n\n  def to_list\n    to_a\n  end\n\n  def ==(other)\n    other == elements\n  end\n\n  def each(&block)\n    elements.each(&block)\n  end\n\n  def put(element)\n    create to_a << element\n  end\n\n  def delete(element)\n    create reject &equal(element)\n  end\n\n  def member?(element)\n    find &equal(element)\n  end\n\n  def subset?(other)\n    intersection(other) == other\n  end\n\n  def disjoint?(other)\n    intersection(other) == empty\n  end\n\n  def difference(other)\n    create reject &members_of(other)\n  end\n\n  def intersection(other)\n    create find_all &members_of(other)\n  end\n\n  def union(other)\n    create to_a.push(*other.to_a)\n  end\n\n  def empty\n    create\n  end\n\nprivate \n  attr_reader :elements\n\n  def create(elements = [])\n    self.class.new elements\n  end\n\n  def equal(element)\n    lambda { |e| e.eql? element }\n  end\n\n  def members_of(other)\n    lambda { |e| other.member? e }\n  end\n\nend	\N	\N	0	2	2014-07-04 11:18:38	2014-07-04 11:18:38	186	custom_set.rb
363	40	8298f49b8d290c182e66c787	pending	ruby	custom-set	class CustomSet\n  include Enumerable\n\n  def initialize(elements = [])\n    @elements = elements.to_a.uniq.sort\n  end\n\n  def size\n    elements.size\n  end\n\n  def to_list\n    to_a\n  end\n\n  def to_ary\n    to_a\n  end\n\n  def ==(other)\n    other == elements\n  end\n\n  def each(&block)\n    elements.each(&block)\n  end\n\n  def put(element)\n    create to_a << element\n  end\n\n  def delete(element)\n    create reject &equal(element)\n  end\n\n  def member?(element)\n    find &equal(element)\n  end\n\n  def subset?(other)\n    intersection(other) == other\n  end\n\n  def disjoint?(other)\n    intersection(other) == empty\n  end\n\n  def difference(other)\n    create reject &members_of(other)\n  end\n\n  def intersection(other)\n    create find_all &members_of(other)\n  end\n\n  def union(other)\n    create to_a.push(*other.to_a)\n  end\n\n  def empty\n    create\n  end\n\nprivate \n  attr_reader :elements\n\n  def create(elements = [])\n    self.class.new elements\n  end\n\n  def equal(element)\n    lambda { |e| e.eql? element }\n  end\n\n  def members_of(other)\n    lambda { |e| other.member? e }\n  end\n\nend	\N	\N	0	3	2014-07-17 12:03:37	2014-07-17 12:03:37	186	custom_set.rb
364	40	bc9f2e86cf48ba08ccfb126a	pending	ruby	grade-school	class School < Hash\n\n\tdef add(student, grade)\n\t\tself[grade] = [] unless self[grade]\n\t\tself[grade] << student\n\tend\n\n\tdef to_hash\n\t\tself.keys.sort.each.inject(School.new) do |sorted, key| \n\t\t\tsorted[key] = grade(key)\n\t\t \tsorted\n\t\tend\t\n\tend\n\n\tdef grade(grade)\n\t\tself[grade] ? self[grade].sort : []\n\tend\nend	\N	\N	0	1	2014-07-19 05:15:09	2014-07-19 05:15:09	187	school.rb
376	40	a64b866b69ede808933a8807	pending	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = %w[A T C G]\n  RNA_NUCLEOTIDES = %w[A C G U]\n  ALL_NUCLEOTIDES = (DNA_NUCLEOTIDES + RNA_NUCLEOTIDES).uniq\n\n  def initialize(dna_string)\n    self.dna_string = dna_string\n    validate! dna_string, DNA_NUCLEOTIDES\n  end\n\n  def count(char)\n    validate! char, ALL_NUCLEOTIDES\n    nucleotide_counts[char]\n  end\n\n  def nucleotide_counts\n    @nucleotide_counts ||=\n      dna_string\n        .each_char\n        .with_object(initial_counts) { |nucleotide, counts|\n          counts[nucleotide] += 1\n        }\n  end\n\n\n  private\n\n  attr_accessor :dna_string\n\n  def initial_counts\n    DNA_NUCLEOTIDES.each_with_object Hash.new(0) do |nucleotide, counts|\n      counts[nucleotide] = 0\n    end\n  end\n\n  def validate!(nucleotide_string, allowed_nucleotides)\n    return if nucleotide_string =~ /^(?:#{allowed_nucleotides.join '|'})*$/\n    raise ArgumentError, "#{nucleotide_string.inspect} contains nucleotides not in #{allowed_nucleotides.inspect}"\n  end\nend	\N	\N	0	1	2014-07-14 22:59:07	2014-07-14 22:59:07	194	nucleotide-count.rb
365	40	c60ebc6ff9298cfc4216b3c4	pending	ruby	house	module House\n  def self.recite\n    Recital.new.to_s\n  end\n\n  NOUNS_AND_VERBS = {\n    "house that Jack built" => "lay in",\n    "malt" => "ate",\n    "rat" => "killed",\n    "cat" => "worried",\n    "dog" => "tossed",\n    "cow with the crumpled horn" => "milked",\n    "maiden all forlorn" => "kissed",\n    "man all tattered and torn" => "married",\n    "priest all shaven and shorn" => "woke",\n    "rooster that crowed in the morn" => "kept",\n    "farmer sowing his corn" => "belonged to",\n    "horse and the hound and the horn" => nil\n  }\n\n  class Stanza\n    attr_reader :number_of_lines\n    def initialize(number_of_lines)\n      @number_of_lines = number_of_lines\n      @lines = []\n    end\n\n    def to_s\n      ([first_line] + body_lines).compact.join("\\n") + ".\\n"\n    end\n\n    private\n\n    def first_line\n      %{This is the #{word_pairs.pop.first}}\n    end\n\n    def body_lines\n      [].tap do |lines|\n        until word_pairs.empty?\n          lines << next_pair {|noun, verb| %{that #{verb} the #{noun}}}\n        end\n      end\n    end\n\n    def next_pair\n      yield word_pairs.pop\n    end\n\n    def word_pairs\n      @word_pairs ||= NOUNS_AND_VERBS.take(number_of_lines)\n    end\n\n  end\n\n  class Recital\n    def to_s\n      number_of_stanzas.times.map {|x| Stanza.new(x + 1).to_s}.join("\\n")\n    end\n\n    private\n\n    def number_of_stanzas\n      NOUNS_AND_VERBS.count\n    end\n  end\nend	\N	\N	0	1	2014-06-17 09:48:32	2014-06-17 09:48:32	188	house.rb
366	40	03eed0db0a15dea8f9b38aa8	superseded	ruby	leap	class Year\n  def self.leap?(year)\n\n    if divisible_by?(year, 4)\n      if divisible_by?(year, 100)\n        divisible_by?(year, 400) ? (return true) : (return false)\n      else\n        return true\n      end\n      return false\n    end\n  end\n\nprivate\n\n  def self.divisible_by?(year, number)\n    year%number==0 ? true : false\n  end\nend	\N	\N	0	2	2014-06-12 23:47:26	2014-06-12 23:47:26	189	year.rb
367	40	0d3733acf9c4906aa3eaf4b5	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    if divisible_by_4?(year)\n      return (divisible_by_100?(year) ? false : true) unless divisible_by_400?(year)\n      return true\n    else\n      return false\n    end\n  end\n\nprivate\n  def self.divisible_by_4?(year)\n    year%4==0 ? true : false\n  end\n  def self.divisible_by_100?(year)\n    year%100==0 ? true : false\n  end\n  def self.divisible_by_400?(year)\n    year%400==0 ? true : false\n  end\nend	\N	\N	0	1	2014-06-20 20:33:28	2014-06-20 20:33:28	189	year.rb
368	40	17f0afdc6871b2bdedcaea21	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    divisible_by?(year, 4) && century_leap?(year)\n  end\n\nprivate\n  def self.century_leap?(year)\n    if divisible_by?(year, 400)\n      return true\n    else\n      return !(divisible_by?(year, 100))\n    end\n  end\n\n  def self.divisible_by?(year, number)\n    year%number==0 ? true : false\n  end\nend	\N	\N	0	3	2014-07-12 00:01:09	2014-07-12 00:01:09	189	year.rb
369	40	3c8ced62358da1766acd32ec	pending	ruby	leap	class Year\n  def self.leap?(year)\n    @@year=year\n    divisible_by?(4) && century_leap?\n  end\n\nprivate\n  def self.century_leap?\n    if divisible_by?(400)\n      return true\n    else\n      return !(divisible_by?(100))\n    end\n  end\n\n  def self.divisible_by?(number)\n    @@year%number==0 ? true : false\n  end\nend	\N	\N	0	4	2014-07-13 03:13:32	2014-07-13 03:13:32	189	year.rb
370	40	f1eff2cfbf4bc7cea1b4aeb3	superseded	python	bob	class Bob():\r\n    def hey( x, string ):\r\n        if( string.isupper() ):\r\n            return 'Woah, chill out!'\r\n        elif( string.endswith('?') ):\r\n            return 'Sure.'\r\n        elif( string == '' ):\r\n            return 'Fine. Be that way!'\r\n        elif( string.isspace() ):\r\n            return 'Fine. Be that way!'\r\n        else:\r\n            return 'Whatever.'	\N	\N	0	1	2014-06-14 07:32:00	2014-06-14 07:32:00	190	bob.py
371	40	7f9d6046ce9d435a35e727e1	superseded	python	bob	"""\r\nBob: a lackadaisical teenager.\r\n\r\nBob is a lackadaisical teenager. In conversation, his responses are very\r\nlimited. Bob answers 'Sure.' if you ask him a question. He answers 'Woah, chill\r\nout!' if you yell at him. He says 'Fine. Be that way!' if you address him\r\nwithout actually saying anything. He answers 'Whatever.' to anything else.\r\n"""\r\nclass Bob(object):\r\n\r\n    @staticmethod\r\n    def hey(statement):\r\n\r\n        if statement.isupper():\r\n            return 'Woah, chill out!'\r\n        elif statement.endswith('?'):\r\n            return 'Sure.'\r\n        elif not statement or statement.isspace():\r\n            return 'Fine. Be that way!'\r\n\r\n        return 'Whatever.'	\N	\N	0	2	2014-06-17 13:33:46	2014-06-17 13:33:46	190	bob.py
372	40	b03c5411f03113ca651e8e0e	pending	python	bob	class Bob(object):\r\n    """Bob: a lackadaisical teenager."""\r\n\r\n    @staticmethod\r\n    def hey(message):\r\n        """Evaluates an input message and answers accordingly."""\r\n        if message.isupper():\r\n            return 'Woah, chill out!'\r\n        elif message.endswith('?'):\r\n            return 'Sure.'\r\n        elif not message or message.isspace():\r\n            return 'Fine. Be that way!'\r\n        return 'Whatever.'	\N	\N	0	3	2014-06-22 00:16:48	2014-06-22 00:16:48	190	bob.py
373	40	f700f3489cb5335223786a03	pending	javascript	beer-song	module.exports = Beer = {};\n\nBeer.beernum = function(n) {\n    if(n == 0) {\n        return 'no more bottles';\n    }\n\n    else if(n == 1) {\n        return '1 bottle';\n    }\n\n    return n + ' bottles';    \n}\n\n\nBeer.verse = function(n) { \n    if(n > 0) {\n        var num = Beer.beernum(n);\n        var next = Beer.beernum(n-1);\n        var one = (n == 1 ? 'it' : 'one');\n\n        return num + ' of beer on the wall, ' + num + ' of beer.\\n' +\n            'Take ' + one + ' down and pass it around, ' + next +\n            ' of beer on the wall.\\n';\n    }\n\n    else {\n        return 'No more bottles of beer on the wall, no more bottles of beer.\\n' +\n            'Go to the store and buy some more, 99 bottles of beer on the wall.\\n';\n    }\n}\n\nBeer.sing = function(start, end) {\n    var _start = start || 99;\n    var _end = end || 0;\n\n    var str = '';\n    for(var i = _start; i >= _end; --i) {\n        str += Beer.verse(i) + (i==_end?'':'\\n');\n    }\n\n    return str;\n}	\N	\N	0	1	2014-06-24 21:55:09	2014-06-24 21:55:09	191	beer-song.js
374	40	0b56d644cf2c500dfa5b9d6b	pending	clojure	nucleotide-count	(ns dna)\n\n(defn count [char strand]\n  (if (contains? #{\\A \\T \\C \\G \\U} char)\n    (clojure.core/count (re-seq\n                         (re-pattern (str char)) strand))\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [strand]\n  {\\A (count \\A strand)\n   \\T (count \\T strand)\n   \\C (count \\C strand)\n   \\G (count \\G strand)})	\N	\N	0	1	2014-07-12 20:04:34	2014-07-12 20:04:34	192	dna.clj
375	40	35d4d4e1381e7618d4bd777b	pending	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char (toUpper)\n\nverse :: Int -> String\nverse n = unlines [firstVerse n, secondVerse n]\n\nsing :: Int -> Int -> String\nsing start end = unlines . reverse $ map verse [end..start]\n\nfirstVerse :: Int -> String\nfirstVerse n = capitalize (bottles n) ++ " on the wall, " ++ bottles n ++ "."\n\nsecondVerse :: Int -> String\nsecondVerse 0 = "Go to the store and buy some more, 99 bottles of beer on the wall."\nsecondVerse n = "Take " ++ what ++ " down and pass it around, " ++ bottles (n - 1) ++ " on the wall."\n  where what = if n == 1 then "it" else "one"\n\nbottles :: Int -> String\nbottles n = quantity ++ " of beer"\n  where\n    quantity = case n of\n      0 -> "no more bottles"\n      1 -> "1 bottle"\n      _ -> show n ++ " bottles"\n\ncapitalize :: String -> String\ncapitalize "" = ""\ncapitalize (c : cs) = toUpper c : cs	\N	\N	0	1	2014-06-22 16:18:29	2014-06-22 16:18:29	193	Beer.hs
378	40	7131a8d217d81ad447a618f7	superseded	clojure	bob	(ns bob\n  [:require [clojure.string :refer (blank? upper-case)]])\n\n(defn is-question?\n  [convo]\n  (.endsWith convo "?"))\n\n(defn is-yelling?\n  [convo]\n  (and\n    (re-find #"[A-Z]" convo)\n    (= (upper-case convo) convo)))\n\n(defn response-for\n  [convo]\n  (cond\n    (blank? convo) "Fine. Be that way!"\n    (is-yelling? convo) "Woah, chill out!"\n    (is-question? convo) "Sure."\n    :else "Whatever."))	\N	\N	0	1	2014-07-17 04:56:41	2014-07-17 04:56:41	195	bob.clj
379	40	f61cc6d4479f6d3e04ce6e45	pending	javascript	gigasecond	var Gigasecond = function(birthdate) {\r\n\tthis.birthdate = birthdate;\r\n};\r\n\r\nGigasecond.prototype.date = function() {\r\n\tvar date = new Date(this.birthdate.getTime() + 1000000000000);\r\n\tdate.setHours(0);\r\n\tdate.setMinutes(0);\r\n\tdate.setSeconds(0);\r\n\treturn date;\r\n};\r\n\r\nmodule.exports = Gigasecond;	\N	\N	0	1	2014-06-26 06:23:04	2014-06-26 06:23:04	196	gigasecond.js
380	40	a46d117d2f9b607210626a87	pending	clojure	anagram	(ns anagram)\n(use '[clojure.string :only (lower-case)])\n\n(defn- sanitize [word]\n  (sort (lower-case word))\n)\n\n(defn- same? [words]\n  (= 1 (count (distinct words)))\n)\n\n(defn- same-letters? [words]\n  (same? (map sanitize words))\n)\n\n(defn- same-word? [words]\n  (same? (map lower-case words))\n)\n\n(defn- anagrams? [words]\n  (and (same-letters? words) (not (same-word? words)))\n)\n\n(defn anagrams-for [word, options]\n  (filter (fn [option] (anagrams? [word, option])) options)\n)	\N	\N	0	1	2014-06-21 11:55:03	2014-06-21 11:55:03	197	anagram.clj
381	40	e0c90f720072aba098c2ce02	superseded	python	word-count	#!/usr/bin/env python\n\nfrom string import punctuation\n\nclass Phrase:\n    def __init__(self, phrase):\n        self.phrase = phrase\n\n    def word_count(self):\n        frequencies = {}\n        for word in self.phrase.translate(None, punctuation).lower().split():\n            if word in frequencies:\n                frequencies[word] += 1\n            else:\n                frequencies[word] = 1\n        return frequencies	\N	\N	0	1	2014-06-18 20:11:21	2014-06-18 20:11:21	198	wordcount.py
382	40	923053ba7a6335c6d86db7fc	pending	python	word-count	from string import punctuation\n\n\nclass Phrase(object):\n\n    """A couple of words."""\n\n    def __init__(self, phrase):\n        """Create a new phrase from given string."""\n        self.phrase = phrase\n\n    def clean(self):\n        """Return phrase without punctuation."""\n        return self.phrase.translate(None, punctuation)\n\n    def words(self):\n        """Return list of words in this phrase."""\n        return self.clean().split()\n\n    def word_count(self):\n        """Count the words in this phrase, ignoring case."""\n        frequencies = {}\n        for word in [w.lower() for w in self.words()]:\n            if word in frequencies:\n                frequencies[word] += 1\n            else:\n                frequencies[word] = 1\n        return frequencies	\N	\N	0	2	2014-06-28 09:40:05	2014-06-28 09:40:05	198	wordcount.py
383	40	22b6b8ed3f172019dc7bd81e	superseded	javascript	anagram	module.exports = Anagram;\n\nfunction Anagram(subject) {\n  this.match = function(candidates) {\n    return candidates.filter(isAnagramOfSubject);\n  };\n\n  function isAnagramOfSubject(candidate) {\n    return anagramIdentity(candidate) === anagramIdentity(subject);\n  };\n\n  function anagramIdentity(word) {\n    return word.split("").sort().join();\n  }\n};	\N	\N	0	5	2014-06-14 20:09:57	2014-06-14 20:09:57	199	anagram.js
384	40	97e5ed33a3fdb7f06e3485b9	superseded	javascript	anagram	module.exports = Anagram;\n\nfunction Anagram(subject) {\n  this.subject = subject;\n  this.isAnagramOfSubject = function(candidate) {\n    return anagramIdentity(candidate) === anagramIdentity(subject);\n  };\n};\n\nAnagram.prototype.match = function(candidates) {\n  return candidates.filter(this.isAnagramOfSubject);\n};\n\nfunction anagramIdentity(word) {\n  return word.split("").sort().join();\n}	\N	\N	0	3	2014-06-19 03:17:21	2014-06-19 03:17:21	199	anagram.js
385	40	5e31bfa9ff325c8e0b049977	superseded	javascript	anagram	module.exports = Anagram;\n\nfunction Anagram(subject) {\n  this.subject = subject;\n};\n\nAnagram.prototype.match = function(candidates) {\n  return candidates.filter(anagramFilter(this.subject));\n};\n\nfunction anagramFilter(subject) {\n  return function(candidate) {\n    return anagramIdentity(candidate) === anagramIdentity(subject);\n  };\n}\n\nfunction anagramIdentity(word) {\n  return word.split("").sort().join();\n}	\N	\N	0	1	2014-06-27 09:48:40	2014-06-27 09:48:40	199	anagram.js
386	40	5ef9bfe921041a3ee0518ade	superseded	javascript	anagram	module.exports = Anagram;\n\nfunction Anagram(subject) {\n  this.isAnagramOfSubject = function(candidate) {\n    return anagramIdentity(candidate) === anagramIdentity(subject);\n  };\n};\n\nAnagram.prototype.match = function(candidates) {\n  return candidates.filter(this.isAnagramOfSubject);\n};\n\nfunction anagramIdentity(word) {\n  return word.split("").sort().join();\n}	\N	\N	0	2	2014-06-29 22:14:14	2014-06-29 22:14:14	199	anagram.js
387	40	e5d1de202c4473a11b2057f0	superseded	javascript	anagram	module.exports = Anagram;\n\nfunction Anagram(subject) {\n  this.isAnagramOfSubject = function(candidate) {\n    return anagramIdentity(candidate) === anagramIdentity(subject);\n  };\n};\n\nAnagram.prototype.match = function(candidates) {\n  return candidates.filter(this.isAnagramOfSubject);\n};\n\nfunction anagramIdentity(word) {\n  return word.split("").sort().join();\n}	\N	\N	0	4	2014-07-09 01:57:08	2014-07-09 01:57:08	199	anagram.js
388	40	d22737b677be7c52e6080ef6	pending	javascript	anagram	module.exports = Anagram;\n\nfunction Anagram(subject) {\n  this.match = function(candidates) {\n    return candidates.filter(isAnagramOfSubject);\n  };\n\n  function isAnagramOfSubject(candidate) {\n    return anagramIdentity(candidate) === anagramIdentity(subject);\n  }\n\n  function anagramIdentity(word) {\n    return word.split("").sort().join();\n  }\n};	\N	\N	0	6	2014-07-11 05:20:58	2014-07-11 05:20:58	199	anagram.js
389	40	e751f54ace564b10ce9d1156	pending	ruby	word-count	class Phrase\n\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    @string.downcase!\n    word_hash = Hash.new(0)\n    words = @string.split(/[^a-zA-Z0-9']/)\n\n    words.each do |word|\n      word_hash[word] += 1\n    end\n    word_hash.delete("")\n    word_hash\n  end\n\nend	\N	\N	0	1	2014-07-18 01:06:38	2014-07-18 01:06:38	200	phrase.rb
390	40	69193ec9ff1228f7dd254083	pending	clojure	queen-attack	(def my-board\n  (str "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"\n       "O O O O O O O O\\n"))\n\n(defn place-queen [board pos queen]\n  (apply str (concat (take pos board) queen (drop (inc pos) board))))\n\n(defn get-square [[row col]]\n  (* 2 (+ (* 8 row) col)))\n\n(defn board-string [{white :w black :b :as positions}]\n  (if (empty? positions)\n    my-board\n    (place-queen\n      (place-queen my-board (get-square white) "W")\n      (get-square black) "B")))\n\n(defn can-attack [{[r1 c1] :w [r2 c2] :b}]\n  (or (= r1 r2)\n      (= c1 c2)\n      (= (- r1 r2) (- c1 c2))))	\N	\N	0	1	2014-06-12 19:32:28	2014-06-12 19:32:28	201	queens.clj
391	40	b2a5acd59ab7073ad96fd7c3	pending	ruby	binary	class Binary\n  def initialize(binary)\n    @binary = binary\n  end\n\n  def to_decimal\n    @binary.chars.reverse_each.with_index.inject(0) do |decimal, (char, exponent)|\n      decimal + (2 ** exponent) * char.to_i\n    end\n  end\nend	\N	\N	0	1	2014-06-17 06:42:19	2014-06-17 06:42:19	202	binary.rb
392	40	1f2e5eeceb129a5e994da14d	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map transcribe\n\ntranscribe :: Char -> Char\ntranscribe 'T' = 'U'\ntranscribe x = x	\N	\N	0	1	2014-07-08 18:01:34	2014-07-08 18:01:34	203	rna-transcription.hs
395	40	ab046c3a51c816277c0dab8c	pending	haskell	trinary	module Trinary (showTri, readTri) where\n\nshowTri :: (Show n, Integral n) => n -> String\nshowTri = toString 3 toChar\n  where\n    toChar n\n      | n >= 0 && n <= 3 = genericToEnum $ genericFromEnum '0' + n\n      | otherwise        = error $ "showTri: out of range " ++ show n\n\nreadTri :: Integral n => String -> n\nreadTri = fromString 3 fromChar\n  where\n    fromChar c\n      | c >= '0' && c <= '3' = genericFromEnum c - genericFromEnum '0'\n      | otherwise            = error $ "readTri: unrecognised char " ++ show c\n\ngenericToEnum :: (Integral n, Enum e) => n -> e\ngenericToEnum = toEnum . fromIntegral\n\ngenericFromEnum :: (Integral n, Enum e) => e -> n\ngenericFromEnum = fromIntegral . fromEnum\n\ntoString :: (Show n, Integral n) => n -> (n -> Char) -> n -> String\ntoString base toChar n\n  | n <  0    = error $ "toString: applied to negative number " ++ show n\n  | n == 0    = "0"\n  | otherwise = reverse . toString' $ n\n  where\n    toString' n\n      | n == 0    = ""\n      | otherwise = toChar r : toString' q\n      where\n        (q, r) = n `quotRem` base\n\nfromString :: Integral n => n -> (Char -> n) -> String -> n\nfromString base fromChar = fromString' 0\n  where\n    fromString' acc (c:cs) = (`fromString'` cs) $! (acc*base + fromChar c)\n    fromString' acc []     = acc	\N	\N	0	1	2014-06-13 10:03:49	2014-06-13 10:03:49	206	Trinary.hs
396	40	4eeda999b2f9c039b8588d26	pending	haskell	etl	module ETL (transform) where\n\nimport           Data.Char       (toLower)\nimport           Data.List       (foldl')\nimport qualified Data.Map.Strict as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.foldlWithKey' go M.empty\n    where\n        go m v = foldl' (addWithVal v) m\n        addWithVal v m c = M.insert (map toLower c) v m	\N	\N	0	1	2014-06-23 20:56:04	2014-06-23 20:56:04	207	ETL.hs
397	40	d034ea1e8bcb76b6813e7439	pending	clojure	word-count	(ns phrase\n  (:use [clojure.string :only (lower-case)]))\n\n(defn- words-normalised [string]\n  (re-seq #"\\w+" (lower-case string)))\n\n(defn word-count [string]\n  (frequencies (words-normalised string)))	\N	\N	0	2	2014-06-27 19:36:30	2014-06-27 19:36:30	208	word-count.clj
398	40	8ce83b612bfcc3176270ceb9	superseded	clojure	word-count	(ns phrase\n  (:use [clojure.string :only (lower-case)]))\n\n(defn- words [string]\n  (re-seq #"\\w+" (lower-case string)))\n\n(defn- inc-count [bag item]\n  (update-in bag [item] (fnil inc 0)))\n\n(defn word-count [string]\n  (reduce inc-count {} (words string)))	\N	\N	0	1	2014-07-06 03:05:31	2014-07-06 03:05:31	208	word-count.clj
399	40	e1e8cfc7ec4f1849dd266d46	pending	javascript	strain	module.exports = {\r\n\tkeep: function(items, mask) {\r\n\t\tvar keep = [];\r\n\t\titems.forEach(function(item) {\r\n\t\t\tif(mask.call(this, item)) keep.push(item);\r\n\t\t});\r\n\r\n\t\treturn keep;\r\n\t},\r\n\r\n\tdiscard: function(items, mask) {\r\n\t\tvar discard = [];\r\n\t\titems.forEach(function(item) {\r\n\t\t\tif(!mask.call(this, item)) discard.push(item);\r\n\t\t});\r\n\r\n\t\treturn discard;\r\n\t}\r\n};	\N	\N	0	1	2014-06-28 15:29:09	2014-06-28 15:29:09	209	strain.js
400	5	6843a48e1bed7cffa361dde1	superseded	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\n-- here I used classic aproach to BST tree instead of \n--    BST (Maybe BST a) a (Maybe BST a)\n-- beacuse it's simpler to work with leaf/node approach.\ndata BST a \n  = L -- leaf\n  | N (BST a) !a (BST a) \n  deriving (Eq,Show)\n\nbstLeft :: BST a -> Maybe (BST a)\nbstLeft L = Nothing\nbstLeft (N l _ _) = Just l\n\nbstRight :: BST a -> Maybe (BST a)\nbstRight L = Nothing\nbstRight (N _ _ r) = Just r\n\nbstValue :: BST a -> a\nbstValue L = error "I don't like this API!"\nbstValue (N _ x _) = x\n\nsingleton :: a -> BST a\nsingleton x = N L x L\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x L = singleton x\ninsert x (N l y r)\n  | x > y     = N l y (insert x r)\n  | otherwise = N (insert x l) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList = foldl (flip insert) L\n\ntoList :: BST a -> [a]\ntoList (L) = []\ntoList (N l y r) = toList l ++ y:toList r	\N	\N	0	1	2014-05-04 19:23:17	2014-05-04 19:23:17	210	BST.hs
401	5	463cbfa1f94cd65d93e4fbb9	superseded	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\n-- Non-empty BST is a fun!\ndata BST a = \n    { bstLeft  :: BST !(Maybe (BST a))\n    , bstValue :: !a \n    , bstRight :: !(Maybe (BST a))\n    } deriving (Eq,Show)\n\nsingleton :: a -> BST a\nsingleton x = BST Nothing x Nothing\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x (BST l y r) =\n  | x > y = BST l y (maybe (signleton x) (insert x) r)\n  | otherwise = BST (maybe (singleton x) (insert x) l) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList [] = error "list should be non empty"\nfromList (x:xs) = foldl (flip insert) (signleton x) xs\n\ntoList :: BST a -> [a]\ntoList (BST l y r) = maybe [] toList l ++ y:maybe [] toList r	\N	\N	0	2	2014-06-24 10:18:25	2014-06-24 10:18:25	210	BST.hs
402	5	7861012ae9e8d43bd42f80b7	superseded	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\nimport Control.Applicative\nimport Data.Monoid\nimport Data.Maybe\n\n-- Non-empty BST is a fun!\n--\n-- Strictness is added to force thunk to WHNF, we don't need\n-- full strictess here, so following code should work:\n--\n-- *BST> bstValue (BST (Just $ error "foo") 5 Nothing)\n-- 5\n--\ndata BST a = BST \n    { bstLeft  :: !(Maybe (BST a))\n    , bstValue :: !a \n    , bstRight :: !(Maybe (BST a))\n    } deriving (Eq,Show)\n\nsingleton :: a -> BST a\nsingleton x = BST Nothing x Nothing\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x (BST l y r)\n  | x > y = BST l y (fmap (insert x) r <|> (Just (singleton x)))\n  | otherwise = BST (fmap (insert x) l <|> (Just (singleton x))) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList [] = error "list should be non empty"\nfromList (x:xs) = foldl (flip insert) (singleton x) xs\n\ntoList :: BST a -> [a]\ntoList (BST l y r) = fromJust $ -- seems like not simplified well\n  fmap toList l <> Just [y] <> fmap toList r	\N	\N	0	3	2014-06-29 15:29:45	2014-06-29 15:29:45	210	BST.hs
403	5	0b0814c73eb1a37e9db37870	pending	haskell	binary-search-tree	module BST\n  ( bstLeft\n  , bstRight\n  , bstValue\n  , singleton\n  , insert\n  , fromList\n  , toList) where\n\nimport Control.Applicative\nimport Data.Monoid\nimport Data.Maybe\nimport Data.Foldable (Foldable, foldMap, toList)\n\n-- Non-empty BST is a fun!\n--\n-- Strictness is added to force thunk to WHNF, we don't need\n-- full strictess here, so following code should work:\n--\n-- *BST> bstValue (BST (Just $ error "foo") 5 Nothing)\n-- 5\n--\ndata BST a = BST \n    { bstLeft  :: !(Maybe (BST a))\n    , bstValue :: !a \n    , bstRight :: !(Maybe (BST a))\n    } deriving (Eq,Show)\n\nsingleton :: a -> BST a\nsingleton x = BST Nothing x Nothing\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x (BST l y r)\n  | x > y = BST l y (fmap (insert x) r <|> (Just (singleton x)))\n  | otherwise = BST (fmap (insert x) l <|> (Just (singleton x))) y r\n\nfromList :: Ord a => [a] -> BST a\nfromList [] = error "list should be non empty"\nfromList (x:xs) = foldl (flip insert) (singleton x) xs\n\ninstance Foldable BST where\n  foldMap f (BST l x r) = ff l <> f x <> ff r\n    where ff = foldMap (foldMap f)\n\n{-\ntoList :: BST a -> [a]\ntoList (BST l y r) = fromJust $ -- seems like not simplified well\n  fmap toList l <> Just [y] <> fmap toList r\n-}	\N	\N	0	4	2014-07-02 02:36:35	2014-07-02 02:36:35	210	BST.hs
404	33	dd7015fd553661610758bd1c	pending	python	bob	class Bob:\n    QUESTION_RESPONSE = "Sure."\n    YELLING_RESPONSE = "Woah, chill out!"\n    EMPTY_RESPONSE = "Fine. Be that way!"\n    DEFAULT_RESPONSE = "Whatever."\n\n    def hey(self, message):\n        """Return a reply to the passed message."""\n        if message.isupper():\n            return self.YELLING_RESPONSE\n        elif message.endswith("?"):\n            return self.QUESTION_RESPONSE\n        elif len(message.strip()) == 0:\n            return self.EMPTY_RESPONSE\n        return self.DEFAULT_RESPONSE	\N	\N	0	1	2014-06-16 12:06:33	2014-06-16 12:06:33	211	bob.py
405	33	7a179c2288ea509684e198f7	pending	javascript	series	var Series = function(numbers) {\n  var self = this,\n      getDigits = function() {\n        return numbers.match(/\\d/g).map(function(digit) {\n          return parseInt(digit);\n        });\n      },\n      _digits = getDigits(),\n      length = _digits.length;\n\n  this.digits = _digits;\n  this.slices = function(len) {\n    var slcs = [], i;\n\n    if(len > length)\n      throw(new Error("Slice size is too big."));\n\n    for(i = 0; i <= length - len; i++) {\n      slcs.push(_digits.slice(i, i + len));\n    }\n    return slcs;\n  };\n};\n\nmodule.exports = Series;	\N	\N	0	1	2014-07-05 04:56:55	2014-07-05 04:56:55	212	series.js
406	33	1f4340651327d457ff242f00	superseded	ruby	word-count	class Words\n  attr_reader :words_list, :word_counts\n\n  def initialize(phrase)\n    @words_list = phrase.gsub(/\\W/, ' ').downcase.split(' ')\n    @word_counts = {}\n  end\n\n  def count\n    words_list.uniq.each { |word| count_occurences_of(word) }\n    word_counts\n  end\n\n  def count_occurences_of(word)\n    @word_counts[word] = words_list.count(word)\n  end\nend	\N	\N	0	2	2014-07-05 23:14:48	2014-07-05 23:14:48	213	word-count.rb
407	33	48ef65df251366a99db85b30	superseded	ruby	word-count	class Words\n  attr_reader :words_list, :word_counts\n\n  def initialize(phrase)\n    @words_list = phrase.gsub(/\\W/, ' ').downcase.split(' ')\n    @word_counts = {}\n  end\n\n  def count\n    words_list.uniq.each { |word| set_hash_item_for(word) }\n    word_counts\n  end\n\n  def set_hash_item_for(word)\n    @word_counts[word] = words_list.grep(word).size\n  end\nend	\N	\N	0	1	2014-07-15 08:25:31	2014-07-15 08:25:31	213	word-count.rb
408	33	abcaa5a82a3985236a3559b2	pending	ruby	word-count	class Words\n  attr_reader :list\n\n  def initialize(phrase)\n    @list = phrase.gsub(/\\W/, ' ').downcase.split(' ')\n  end\n\n  def count\n    list.uniq.reduce({}) do |count_summary, word|\n      count_summary[word] = list.count(word)\n      count_summary\n    end\n  end\nend	\N	\N	0	5	2014-07-17 06:18:27	2014-07-17 06:18:27	213	word-count.rb
409	33	8d55eb68fe72245adf380b1a	superseded	ruby	word-count	class Words\n  attr_reader :ordliste\n\n  def initialize(phrase)\n    @ordliste = phrase.gsub(/\\W/, ' ').downcase.split(' ')\n  end\n\n  def count\n    ordliste.uniq.reduce({}) do |count_summary, word|\n      count_summary[word] = ordliste.count(word)\n      count_summary\n    end\n  end\nend	\N	\N	0	4	2014-07-25 04:17:40	2014-07-25 04:17:40	213	word-count.rb
410	33	7634362df33f82557bb446e9	superseded	ruby	word-count	class Words\n  attr_reader :words_list\n\n  def initialize(phrase)\n    @words_list = phrase.gsub(/\\W/, ' ').downcase.split(' ')\n  end\n\n  def count\n    words_list.uniq.reduce({}) do |word_counts, word|\n      word_counts[word] = words_list.count(word)\n      word_counts\n    end\n  end\nend	\N	\N	0	3	2014-07-25 09:11:13	2014-07-25 09:11:13	213	word-count.rb
411	33	6f1d5c6e64d471b5eb7b4b5d	pending	ruby	grade-school	class School\n  def initialize\n    @students = Hash.new([])\n  end\n\n  def add(student, grade)\n    @students[grade] = @students[grade] + [student]\n    @students[grade].sort!\n  end\n\n  def grade(grade)\n    @students[grade]\n  end\n\n  def to_hash\n    Hash[@students.keys.sort.collect { |k| [k, @students[k]] }]\n  end\nend	\N	\N	0	1	2014-06-28 19:06:14	2014-06-28 19:06:14	214	school.rb
412	33	bb48e8b465a9af94a329f04b	pending	ruby	house	class House\n  RHYME_PAIRS = [\n      ["house that Jack built.", "\\n"],\n      ["malt", "lay in"],\n      ["rat", "ate"],\n      ["cat", "killed"],\n      ["dog", "worried"],\n      ["cow with the crumpled horn", "tossed"],\n      ["maiden all forlorn", "milked"],\n      ["man all tattered and torn", "kissed"],\n      ["priest all shaven and shorn", "married"],\n      ["rooster that crowed in the morn", "woke"],\n      ["farmer sowing his corn", "kept"],\n      ["horse and the hound and the horn", "belonged to"]\n  ]\n\n  def self.recite\n    poem = ""\n    0.upto(RHYME_PAIRS.length-1) do |iteration|\n      poem += "This is " + build_stanza(iteration)\n    end\n    poem.chomp      #remove the trailing space from last line of last stanza\n                    #considered just changing the test to add the blank at the end <g>\n  end\n\n  private\n\n  def self.build_stanza(iteration)\n    return "the " + RHYME_PAIRS[iteration][0]+ "\\n" + RHYME_PAIRS[iteration][1] if iteration == 0\n    return "the " + RHYME_PAIRS[iteration][0]+ "\\nthat " + RHYME_PAIRS[iteration][1] + " " + build_stanza(iteration-1)\n\n  end\n\n\nend	\N	\N	0	1	2014-06-30 07:16:51	2014-06-30 07:16:51	215	house.rb
413	33	97de7b33b065fbba8d4576c0	pending	go	scrabble-score	package scrabble_score\n\nimport (\n\t"unicode"\n)\n\nvar runeScore map[rune]int\n\nfunc init() {\n\truneScore = make(map[rune]int, 26)\n\t// Two ways of consisly specifying the scores.\n\t// Both are more maintainable then listing out\n\t// the full desired map[rune]int literal.\n\t// I show more than one here just for illustration.\n\t// We could also use a []rune instead of string but that would\n\t// be less readable and no easier to maintain.\n\tif false {\n\t\tfor i, str := range []string{\n\t\t\t"AEIOULNRST",\n\t\t\t"DG",\n\t\t\t"BCMP",\n\t\t\t"FHVWY",\n\t\t\t"K",\n\t\t\t"", "",\n\t\t\t"JX",\n\t\t\t"",\n\t\t\t"QZ"} {\n\t\t\tfor _, r := range str {\n\t\t\t\truneScore[r] = i + 1\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor score, str := range map[int]string{\n\t\t\t1:  "AEIOULNRST",\n\t\t\t2:  "DG",\n\t\t\t3:  "BCMP",\n\t\t\t4:  "FHVWY",\n\t\t\t5:  "K",\n\t\t\t8:  "JX",\n\t\t\t10: "QZ",\n\t\t} {\n\t\t\tfor _, r := range str {\n\t\t\t\truneScore[r] = score\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc Score(s string) (score int) {\n\tfor _, r := range s {\n\t\tscore += runeScore[unicode.ToUpper(r)]\n\t}\n\treturn\n}	\N	\N	0	1	2014-06-18 13:03:26	2014-06-18 13:03:26	216	scrabble_score.go
414	33	8388aec4f709da2ac17f2086	superseded	clojure	bob	(ns bob)\n\n(defn contains-pattern? [pattern message] \n  (if (re-find pattern message) true false))\n\n(defn upcase? [message]\n  (= message (clojure.string/upper-case message )))\n\n(defn not-downcase? [message]\n  (not= message (clojure.string/lower-case message)))\n\n(defn response-for [message] \n  (cond \n   (and (not-downcase? message) (upcase? message)) (str "Woah, chill out!")\n   (clojure.string/blank? message) (str "Fine. Be that way!")\n   (.endsWith message "!") (str "Whatever.")\n   (.endsWith message "?") (str "Sure.")\n   (contains-pattern? #"\\d+" message)(str "Whatever.")\n    :else "Whatever."))	\N	\N	0	1	2014-06-21 03:34:28	2014-06-21 03:34:28	217	bob.clj
415	33	aa9b7d99b0b4c0618fd19494	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]]))\n\n(defn question? [message]\n  (blank? message))\n\n(defn shout? [message]\n  (and\n    (= (upper-case message) message)\n    (re-find #"[a-zA-Z]" message)))\n\n(defn silence? [message]\n  (clojure.string/blank? message))\n\n(defn response-for [message] \n  (cond \n   (shout? message) (str "Woah, chill out!")\n   (silence? message) (str "Fine. Be that way!")\n   (question? message) (str "Sure.")\n    :else "Whatever."))	\N	\N	0	2	2014-06-22 19:09:34	2014-06-22 19:09:34	217	bob.clj
416	33	e4f15119ba1f8d57b4ea6f05	pending	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]]))\n\n(defn question? [message]\n  (.endsWith message "?"))\n\n(defn shout? [message]\n  (and\n    (= (upper-case message) message)\n    (re-find #"[a-zA-Z]" message)))\n\n(defn silence? [message]\n  (blank? message))\n\n(defn response-for [message] \n  (cond \n   (shout? message) (str "Woah, chill out!")\n   (silence? message) (str "Fine. Be that way!")\n   (question? message) (str "Sure.")\n    :else "Whatever."))	\N	\N	0	3	2014-07-04 07:52:17	2014-07-04 07:52:17	217	bob.clj
417	33	e0f58964bb2f483e8a55764f	superseded	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function (s) {\n    switch (interp(s)){\n\tcase "Yelling": return "Woah, chill out!";\n\tcase "Question": return "Sure.";\n\tcase "Silence": return "Fine. Be that way!";\n\tdefault: return "Whatever.";\n    }\n\n    function interp(s){\n\tif (s == s.toUpperCase() && s.search(/[A-Za-z]/) != -1)\n\t    return "Yelling";\n\tif (s.slice(0,-1) + "?" == s)\n\t    return "Question";\n\tif (s.trimLeft() == "")\n\t    return "Silence";\n\treturn s;\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-06-28 12:39:06	2014-06-28 12:39:06	218	bob.js
418	33	e4e2cae23598c70f65daf154	superseded	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function (s) {\n    switch (interp(s)){\n        case "Yelling": return "Woah, chill out!";\n        case "Question": return "Sure.";\n        case "Silence": return "Fine. Be that way!";\n        default: return "Whatever.";\n    }\n\n    function interp(s){\n        if (s === s.toUpperCase() && s.search(/[A-Za-z]/) !== -1)\n            return "Yelling";\n        if (s.slice(0,-1) + "?" === s)\n            return "Question";\n        if (s.trimLeft() === "")\n            return "Silence";\n        return s;\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	2	2014-06-28 22:38:38	2014-06-28 22:38:38	218	bob.js
419	33	3be2f4dfb7f0be7d3bed6994	pending	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function (s) {\n    switch (interp(s)){\n        case "Yelling": return "Woah, chill out!";\n        case "Question": return "Sure.";\n        case "Silence": return "Fine. Be that way!";\n        default: return "Whatever.";\n    }\n\n    function interp(s){\n        if (s === s.toUpperCase() && s.search(/[A-Za-z]/) !== -1)\n            return "Yelling";\n        if (s.slice(0,-1) + "?" === s)\n            return "Question";\n        if (s.trimLeft() === "")\n            return "Silence";\n        return "Whatever";\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	3	2014-07-03 17:06:04	2014-07-03 17:06:04	218	bob.js
420	33	6b237f84717801b616a8780e	superseded	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = %w(A T C G)\n  NUCLEOTIDES = DNA_NUCLEOTIDES + ['U']\n\n  def initialize dna\n    if valid_dna? dna\n      @counts = Hash[NUCLEOTIDES.collect { |key| [key, 0] }]\n      count_nucleotides dna\n    else\n      throw :ArgumentError, 'dna, not a valid DNA string'\n    end\n  end\n\n  def count nucleotide\n    if nucleotide?(nucleotide)\n      @counts[nucleotide]\n    else\n      throw :ArgumentError, 'nucleotide, not a valid dna nucleotide'\n    end\n  end\n\n  def nucleotide_counts\n    select_dna_nucleotides\n  end\n\n  private\n\n  def select_dna_nucleotides\n    @counts.select { |k| DNA_NUCLEOTIDES.include? k }\n  end\n\n  def valid_dna? dna\n    !dna.match /[^ATCG]/\n  end\n\n  def nucleotide? nucleotide\n    NUCLEOTIDES.include? nucleotide\n  end\n\n  def count_nucleotides dna\n    dna.each_char { |c| @counts[c] += 1 }\n  end\nend	\N	\N	0	1	2014-06-23 12:25:42	2014-06-23 12:25:42	219	nucleotide-count.rb
421	33	acfb71b27a1d5013949ad94d	superseded	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = %w(A T C G)\n  NUCLEOTIDES = DNA_NUCLEOTIDES + ['U']\n\n  def initialize dna\n    raise ArgumentError unless valid_dna? dna\n\n    @counts = Hash[NUCLEOTIDES.collect { |n| [n, dna.count(n)] }]\n  end\n\n  def count nucleotide\n    raise ArgumentError unless nucleotide? nucleotide\n\n    @counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    select_dna_nucleotides\n  end\n\n  private\n\n  def select_dna_nucleotides\n    @counts.select { |k| DNA_NUCLEOTIDES.include? k }\n  end\n\n  def valid_dna? dna\n    (dna.chars.to_a - DNA_NUCLEOTIDES).empty?\n  end\n\n  def nucleotide? nucleotide\n    NUCLEOTIDES.include? nucleotide\n  end\nend	\N	\N	0	2	2014-06-28 14:17:36	2014-06-28 14:17:36	219	nucleotide-count.rb
422	33	7a1d939aa085e982d04d2eb3	pending	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = %w(A T C G)\n  NUCLEOTIDES = DNA_NUCLEOTIDES + ['U']\n\n  attr_reader :nucleotide_counts\n\n  def initialize dna\n    raise ArgumentError unless valid_dna? dna\n\n    @nucleotide_counts = Hash[DNA_NUCLEOTIDES.collect { |n| [n, dna.count(n)] }]\n    @nucleotide_counts.default = 0\n  end\n\n  def count nucleotide\n    raise ArgumentError unless nucleotide? nucleotide\n\n    @nucleotide_counts[nucleotide]\n  end\n\n  private\n\n  def valid_dna? dna\n    (dna.chars.to_a - DNA_NUCLEOTIDES).empty?\n  end\n\n  def nucleotide? nucleotide\n    NUCLEOTIDES.include? nucleotide\n  end\nend	\N	\N	0	3	2014-07-01 20:35:51	2014-07-01 20:35:51	219	nucleotide-count.rb
423	33	20029b32b5864708cc14de2c	pending	go	hamming	package hamming\n\n/*\nReturn the number of elements that are different ignoring excess elements as\naccording to the hamming test.\n*/\nfunc Distance(a, b string) int {\n\tcount := 0\n\tvar length int\n\tif len(a) > len(b) {\n\t\tlength = len(b)\n\t} else {\n\t\tlength = len(a)\n\t}\n\tfor i := 0; i <= length - 1\t; i += 1 {\n\t\tif a[i] != b[i] {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}	\N	\N	0	1	2014-07-10 15:43:53	2014-07-10 15:43:53	220	hamming.go
424	33	30637b633e4a3c6964027afd	pending	ruby	etl	class ETL\n  def self.transform(old)\n    new_hash = {}\n    old.keys.each{|old_key| old[old_key].each { |new_key| new_hash[new_key.downcase] = old_key}}\n    new_hash\n  end\nend	\N	\N	0	1	2014-06-19 22:39:22	2014-06-19 22:39:22	221	etl.rb
425	33	6752f1eb773dcf4196fafbff	pending	ruby	wordy	class WordProblem\n  MATH_OPERATORS = {\n    "plus" => "+",\n    "minus" => "-",\n    "multiplied" => "*",\n    "divided" => "/"\n  }\n\n  def initialize(math_question)\n    @math_question = math_question\n    @digits = all_digits.split(" ").count\n\n    raise ArgumentError if too_complex?\n  end\n\n  def answer\n    expression = if digits == 2\n      two_digit_calculation\n    elsif digits == 3\n      three_digit_calculation\n    end\n\n    eval(expression)\n  end\n\n  private\n\n  attr_reader :math_question, :digits\n\n  def two_digit_calculation\n    first, second = all_digits.split(" ")\n    operator = MATH_OPERATORS[operator_as_word.first]\n    [first, operator , second].join(" ")\n  end\n\n  def three_digit_calculation\n    first, second, third = all_digits.split(" ")\n    first_operator = MATH_OPERATORS[operator_as_word.first]\n    second_operator = MATH_OPERATORS[operator_as_word[1]]\n    ["(",first, first_operator, second, ")", second_operator , third].join(" ")\n  end\n\n  def all_digits\n    math_question.gsub(/[^\\d\\-]/, ' ')\n  end\n\n  def too_complex?\n    digits < 2\n  end\n\n  def operator_as_word\n    operators = ["plus", "minus", "multiplied", "divided"]\n    math_question.split(" ").select do |word|\n      operators.include?(word)\n    end\n  end\nend	\N	\N	0	2	2014-06-16 19:23:01	2014-06-16 19:23:01	222	word_problem.rb
451	15	813ebff8b699829de4efe66a	superseded	javascript	anagram	module.exports = function Anagram(word) {\n  'use strict';\n\n  this.match = function(anagrams) {\n    return anagrams.filter(function(anagram) {\n      return isPermutation(anagram, word);\n    });\n  };\n\n  function isPermutation(anagram, word) {\n    return arrayIsEqual(anagram.split(""), word.split(""));\n  }\n\n  function arrayIsEqual(a1, a2) {\n    a1.sort();\n    a2.sort();\n\n    return !(a1 < a2 || a1 > a2);\n  }\n};	\N	\N	0	1	2014-06-06 10:51:40	2014-06-06 10:51:40	236	anagram.js
426	33	b1d29a75467ddfd90e374a44	superseded	ruby	wordy	class WordProblem\n\n  def initialize(math_question)\n    @question = math_question\n    @digits = all_digits.split(" ").count\n\n    raise ArgumentError if too_complex?\n  end\n\n  def answer\n    if digits == 2\n      expression = two_digit_calculation \n    elsif digits == 3\n      expression = three_digit_calculation \n    end\n\n    eval(expression)\n  end\n\n  private \n\n  attr_reader :question, :digits\n\n  def two_digit_calculation\n    first, second = all_digits.split(" ")\n    operator = math_operators[operator_as_word.first]\n    [first, operator , second].join(" ")\n  end\n\n  def three_digit_calculation\n    first, second, third = all_digits.split(" ")\n\n    first_operator = math_operators[operator_as_word.first]\n    second_operator = math_operators[operator_as_word[1]]\n\n    ["(",first, first_operator, second, ")", second_operator , third].join(" ")\n  end\n\n  def all_digits\n    question.gsub(/[^\\d\\-]/, ' ')\n  end\n\n  def math_operators\n    {\n      "plus" => "+",\n      "minus" => "-",\n      "multiplied" => "*",\n      "divided" => "/"\n    }\n  end\n\n  def too_complex?\n    digits < 2\n  end\n\n  def operator_as_word\n    operators = ["plus", "minus", "multiplied", "divided"]\n\n    question.split(" ").select do |word|\n      if operators.include? word\n        word\n      end\n    end\n  end\n\nend	\N	\N	0	1	2014-07-18 19:16:15	2014-07-18 19:16:15	222	word_problem.rb
427	33	8d2186ce095fcc0a6ddac72c	superseded	clojure	phone-number	(ns phone)\n\n(defn- numeric? [c]\n  (let [int-0 (int \\0)\n        int-9 (int \\9)]\n    (<= int-0 (int c) int-9)))\n\n(defn number [text]\n  (let [nums (filter numeric? text)\n        len (count nums)\n        default (apply str (take 10 (repeat \\0)))]\n    (cond (= 10 len)\n            (apply str nums)\n          (and (= 11 len) (= \\1 (first nums)))\n            (apply str (rest nums))\n          :else\n            default)))\n\n(defn- split [text]\n  (let [[area local] (split-at 3 (number text))\n        [exc sub] (split-at 3 local)]\n    (map (partial apply str) [area exc sub])))\n\n(defn area-code [text]\n  (nth (split text) 0))\n\n(defn pretty-print [text]\n  (let [[area exc sub] (split text)]\n    (str "(" area ") " exc "-" sub)))	\N	\N	0	1	2014-06-27 04:03:06	2014-06-27 04:03:06	223	phone-number.clj
428	33	45e539bf4fc82998f93524de	pending	clojure	phone-number	(ns phone)\n\n(declare numeric? split)\n\n(defn number [text]\n  (let [nums (filter numeric? text)\n        len (count nums)\n        default (apply str (take 10 (repeat \\0)))]\n    (cond (= 10 len)\n            (apply str nums)\n          (and (= 11 len) (= \\1 (first nums)))\n            (apply str (rest nums))\n          :else\n            default)))\n\n(defn area-code [text]\n  (nth (split text) 0))\n\n(defn pretty-print [text]\n  (let [[area exc sub] (split text)]\n    (format "(%s) %s-%s" area exc sub)))\n\n(defn- numeric? [ch] (Character/isDigit ch))\n\n(defn- split [text]\n  (let [[area local] (split-at 3 (number text))\n        [exc sub] (split-at 3 local)]\n    (map (partial apply str) [area exc sub])))	\N	\N	0	2	2014-06-30 07:13:55	2014-06-30 07:13:55	223	phone-number.clj
429	33	ac8a1bd6d9aa76373957a72f	pending	python	pascals-triangle	def row(n):\n\tif n < 0:\n\t\traise ValueError("Undefined for negative values!")\n\tif n == 0:\n\t\treturn '1'\n\tprev_vals = row(n - 1).split(' ')\n\tvals = ['1'] + [str(int(a)+int(b)) for a,b in zip(prev_vals, prev_vals[1:])] + ['1']\n\treturn ' '.join(vals)\n\ndef triangle(n):\n\treturn [row(i) for i in xrange(0, n + 1)]\n\ndef is_triangle(inp):\n\treturn triangle(len(inp) - 1) == inp	\N	\N	0	1	2014-06-26 16:09:09	2014-06-26 16:09:09	224	pascals_triangle.py
430	33	948865e8fb5bd1ba9472382b	pending	ruby	bob	class Bob\n  def hey(she_said)\n    respond_with she_said\n  end\n\n  private\n\n  def respond_with she_said\n    begin\n      return 'Fine. Be that way!' if silent? she_said\n      return 'Woah, chill out!' if yelling? she_said\n      return 'Sure.' if question? she_said\n      raise\n    rescue\n      return 'Whatever.'\n    end\n  end\n\n  def question? she_said\n    she_said.end_with?('?')\n  end\n\n  def silent? she_said\n    she_said.strip.empty?\n  end\n\n  def yelling? she_said\n    she_said.upcase === she_said\n  end\nend	\N	\N	0	5	2014-06-22 23:17:32	2014-06-22 23:17:32	225	bob.rb
431	33	b0c7d11d88849a913848c4dd	superseded	ruby	bob	class Bob\n  def hey(statement)\n    respond_with statement.to_s.strip\n  end\n\n  private\n\n  def respond_with statement\n    if statement.empty?\n      return 'Fine. Be that way!'\n    elsif statement.upcase === statement\n      return 'Woah, chill out!'\n    elsif statement.end_with?('?')\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	\N	0	3	2014-06-25 01:42:02	2014-06-25 01:42:02	225	bob.rb
432	33	7fb2f2a749f652a7a1b25879	superseded	ruby	bob	class Bob\n  def hey(arg)\n    return 'Whatever.' if arg.class != String\n\n    if arg =~ /^\\s*$/\n      'Fine. Be that way!'\n    elsif arg.upcase === arg\n      'Woah, chill out!'\n    elsif arg.end_with?('?')\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	2	2014-07-03 13:33:35	2014-07-03 13:33:35	225	bob.rb
433	33	fd8efda6adb6f739d2260a45	superseded	ruby	bob	class Bob\n  def hey(arg)\n    if arg =~ /^\\s*$/\n      'Fine. Be that way!'\n    elsif arg.upcase === arg\n      'Woah, chill out!'\n    elsif arg =~ /.*\\?$/\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	1	2014-07-20 08:46:29	2014-07-20 08:46:29	225	bob.rb
434	33	346f9c0ac15321b69c64e074	superseded	ruby	bob	class Bob\n  def hey(statement)\n    respond_with statement\n  end\n\n  private\n\n  def respond_with statement\n    return 'Whatever.' if statement.class != String\n\n    if statement.strip.empty?\n      return 'Fine. Be that way!'\n    elsif statement.upcase === statement\n      return 'Woah, chill out!'\n    elsif statement.end_with?('?')\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	\N	0	4	2014-07-23 05:36:23	2014-07-23 05:36:23	225	bob.rb
435	33	7a136a62cea6c19c27122392	superseded	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA = map (\\x -> if x == 'T' then 'U' else x)	\N	\N	0	1	2014-06-29 05:35:07	2014-06-29 05:35:07	226	rna-transcription.hs
436	33	f7c657530ca3e0e5504eaf9a	superseded	haskell	rna-transcription	import Test.HUnit (Assertion, (@=?), runTestTT, Test(..))\nimport Control.Monad (void)\nimport DNA (toRNA)\n\ntestCase :: String -> Assertion -> Test\ntestCase label assertion = TestLabel label (TestCase assertion)\n\ntoRNATests :: [Test]\ntoRNATests =\n  [ testCase "transcribes cytidine unchanged" $\n    "C" @=? toRNA "C"\n  , testCase "transcribes guanosine unchanged" $\n    "G" @=? toRNA "G"\n  , testCase "transcribes adenosine unchanged" $\n    "A" @=? toRNA "A"\n  , testCase "transcribes thymidine to uracil" $\n    "U" @=? toRNA "T"\n  , testCase "transcribes all occurrences of thymidine to uracil" $\n    "ACGUGGUCUUAA" @=? toRNA "ACGTGGTCTTAA"\n  ]\n\nmain :: IO ()\nmain = void (runTestTT (TestList toRNATests))	\N	\N	0	2	2014-07-05 04:07:23	2014-07-05 04:07:23	226	rna-transcription.hs
437	33	38df85738929bc2593486b3f	pending	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA = map thymineToUracil\n  where thymineToUracil 'T' = 'U'\n        thymineToUracil x = x	\N	\N	0	3	2014-07-05 14:04:08	2014-07-05 14:04:08	226	rna-transcription.hs
452	15	54cb98e2605d39ae70a9cd5d	pending	javascript	anagram	module.exports = function Anagram(word) {\n  'use strict';\n\n  this.match = function(anagrams) {\n    return anagrams.filter(function(anagram) {\n      return isPermutation(anagram, word);\n    });\n  };\n\n  function isPermutation(anagram, word) {\n    return normalized(anagram) === normalized(word);\n  }\n\n  function normalized(word) {\n    return word.split("").sort().join();\n  }\n};	\N	\N	0	2	2014-06-12 07:59:49	2014-06-12 07:59:49	236	anagram.js
438	33	5d40d2d3feb2799bfb10d153	pending	ruby	kindergarten-garden	class Garden\r\n\r\n\tattr_reader :alice, :students\r\n\t\r\n\tdef initialize(plants, *students)\r\n\t\t@garden = plants.split("\\n")\r\n\t\traise ArgumentError.new('The two lines of the garden differ in length.') if @garden[0].length != @garden[1].length\r\n\t\t@students = if students.empty? then @students = %w{ alice bob charlie david eve fred ginny harriet ileana joseph kincaid larry}.sort! \r\n\t\t\t\t\telsif students[0].is_a?(Array) then students.flatten!.map! {|student| student.downcase!}.sort\r\n\t\t\t\t\telse students.map! {|student| student.downcase!}.sort\r\n\t\t\t\t\tend\t\r\n\t\t@ownership = student_quartets\r\n\t\tstudent_quartets.keys.each do |student|\r\n\t\t\tself.class.send(:define_method, "#{student}") do\t@ownership["#{student}"].map! {|p| PLANTS[p]}\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\tPLANTS = {'G' => :grass, 'C' => :clover, 'R' => :radishes, 'V' => :violets}\r\n\t\r\n\tdef quartets\r\n\t\twindow = 0\r\n\t\troom = 1\r\n\t\tnumber_of_quartets = if @garden[0].length % 2 == 0 then @garden[0].length / 2 else (@garden[0].length + 1) / 2 end\r\n\t\tquartets = Array.new\r\n\t\tfor i in 0..number_of_quartets do\r\n\t\t\tquartets[i] = Array.new\r\n\t\t\tif @garden[window][2*i] \t\tthen quartets[i] << @garden[window][2*i] \t\tend\r\n\t\t\tif @garden[window][2*i + 1] \tthen quartets[i] << @garden[window][2*i + 1] \tend\r\n\t\t\tif @garden[room][2*i]\t\t\tthen quartets[i] << @garden[room][2*i]\t\t\tend\t\t\r\n\t\t\tif @garden[room][2*i + 1]\t\tthen quartets[i] << @garden[room][2*i + 1]\t\tend\r\n\t\t\tquartets[i].reject!(&:empty?)\r\n\t\t\tquartets << quartets[i]\r\n\t\tend\r\n\t\tquartets.reject!(&:empty?)\r\n\t\tquartets\r\n\tend\r\n\t\r\n\tdef student_quartets\r\n\t\townership = Hash.new\r\n\t\t@students.each_with_index do |student, index|\r\n\t\t\townership.merge! ({student => quartets[index]})\r\n\t\tend\r\n\t\townership\r\n\tend\r\n\t\r\n\tdef plantNames(arr)\r\n\t\tarr.map! {|plant| PLANTS[plant]}\r\n\tend\t\r\nend	\N	\N	0	1	2014-07-17 16:56:04	2014-07-17 16:56:04	227	garden.rb
439	33	8af40c022260141da8d7c367	pending	haskell	crypto-square	module CryptoSquare\n    ( normalizePlaintext\n    , squareSize\n    , plaintextSegments\n    , ciphertext\n    , normalizeCiphertext)\nwhere\n\nimport           Control.Applicative (liftA2)\nimport           Data.Char           (isAlphaNum, toLower)\nimport           Data.List           (transpose)\nimport           Data.List.Split     (chunksOf)\n\nnormalizePlaintext :: String -> String\nnormalizePlaintext = map toLower . filter isAlphaNum\n\nsquareSize :: String -> Int\nsquareSize = ceiling . sqrt . (fromIntegral . length :: String -> Double)\n\nplaintextSegments :: String -> [String]\nplaintextSegments = liftA2 chunksOf squareSize id . normalizePlaintext\n\nciphertext :: String -> String\nciphertext = concat . transpose . plaintextSegments\n\nnormalizeCiphertext :: String -> String\nnormalizeCiphertext = unwords . chunksOf 5 . ciphertext	\N	\N	0	1	2014-06-26 04:03:28	2014-06-26 04:03:28	228	CryptoSquare.hs
440	33	b8a027f8882f5993213bf2f0	superseded	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) =>\r\n         l == r match {\r\n           case true => 0\r\n           case false => 1\r\n         }\r\n     } count(_ == 1)\r\n   }\r\n }\r	\N	\N	0	1	2014-07-02 02:55:51	2014-07-02 02:55:51	229	hamming.scala
441	33	1eefd5f6f0aa0d822474284a	pending	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) => l == r\r\n     } count(_ == true)\r\n   }\r\n }\r	\N	\N	0	2	2014-07-07 00:04:16	2014-07-07 00:04:16	229	hamming.scala
442	33	c8852efa59a46655c73e58eb	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\n-- The "all isSpace s" case handles the empty string, so the "last s" case\n-- is guaranteed to not fail.\n\nresponseFor :: String -> String\nresponseFor s | all isSpace s = "Fine. Be that way!"\n              | isShout s     = "Woah, chill out!"\n              | last s == '?' = "Sure."\n              | otherwise     = "Whatever."\n\nisShout :: String -> Bool\nisShout s = not (null letters) && all isUpper letters\n    where letters = filter isLetter s	\N	\N	0	1	2014-07-03 02:11:10	2014-07-03 02:11:10	230	Bob.hs
443	33	be89c7573f06bf579c8416b7	pending	perl5	hamming	use strict;\nuse warnings;\n\npackage Hamming;\n\nsub compute {\n\tmy($s1,$s2) = @_;\n\t\n\tmy @s1 = split(//, $s1);\n\tmy @s2 = split(//, $s2);\n\n\tmy $maxlength = @s2;\n\n\tmy $diff = 0;\n\tmy $i = 0;\n\tforeach(@s1) {\n\t\tlast if $i>(@s2 -1);\n\t\t$diff++ if $_ ne $s2[$i];\n\t\t$i++;\n\t}\n\treturn $diff;\n}\n1;	\N	\N	0	1	2014-06-30 14:29:00	2014-06-30 14:29:00	231	Hamming.pm
444	33	8c3759a0e65899303df2921e	pending	python	anagram	from collections import Counter\n\nclass Anagram:\n    def __init__(self, word):\n        self.word = word.lower()\n\n    def match(self, words):\n        return [word for word in words if word != self.word and\n                Counter(word.lower()) == Counter(self.word)]	\N	\N	0	1	2014-06-19 00:45:24	2014-06-19 00:45:24	232	anagram.py
445	15	077cecf4bc10381d9973c61c	pending	python	bob	import re\n\n\ndef hey(phrase):\n    if not phrase.strip():\n        return 'Fine. Be that way!'\n    alpha = re.search(r'([a-z]|[A-Z])', phrase)\n    # TODO: Doesn't handle unicode...\n    lowercase = re.search(r'[a-z]', phrase)\n    if lowercase is None and alpha is not None:\n        return 'Woah, chill out!'\n    if phrase.strip()[-1] == '?':\n        return 'Sure.'\n    return 'Whatever.'	\N	\N	0	1	2014-06-25 19:25:43	2014-06-25 19:25:43	233	bob.py
446	15	e90e6f8c1a9fba6633744ce8	pending	ruby	gigasecond	class Gigasecond\n  attr_accessor :now\n\n  def initialize(now)\n    @now = now\n  end\n\n  def date\n    future = (10**9)/86400\n    return self.now + future\n  end\n\nend	\N	\N	0	1	2014-05-25 02:11:47	2014-05-25 02:11:47	234	gigasecond.rb
447	15	6e5ef00bd4b2165ecc4f88eb	superseded	ruby	bob	class Bob\n  def hey(message)\n    message.strip!\n\n    if message.empty?\n      "Fine. Be that way!"\n    elsif message.upcase == message\n      "Woah, chill out!"\n    elsif message.end_with?('?')\n      "Sure."\n    elsif message.end_with?('?')\n      "Whatever."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	3	2014-05-28 19:51:49	2014-05-28 19:51:49	235	bob.rb
448	15	c746a9a7afe928f57448ad6a	superseded	ruby	bob	class Bob\n  def hey(message)\n    message.strip!\n    case true\n    when message.empty?\n      "Fine. Be that way!"\n    when message.upcase == message\n      "Woah, chill out!"\n    when message.end_with?('?')\n      "Sure."\n    when message.end_with?('?')\n      "Whatever."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	2	2014-06-10 20:36:37	2014-06-10 20:36:37	235	bob.rb
449	15	39ce77e8c055e41a1a62c098	superseded	ruby	bob	class Bob\n  def hey(message)\n    message.strip!\n    case true\n    when message.empty?\n      "Fine. Be that way!"\n    when message.upcase == message\n      "Woah, chill out!"\n    when message.rindex('?') == message.length-1\n      "Sure."\n    when message.rindex('!') == message.length-1\n      "Whatever."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-07-11 19:59:25	2014-07-11 19:59:25	235	bob.rb
450	15	b48f84b0c2b13bfe0f5b678d	pending	ruby	bob	class Bob\n  def hey(message)\n    message.strip!\n\n    if empty?(message)\n      "Fine. Be that way!"\n    elsif shouting?(message)\n      "Woah, chill out!"\n    elsif question?(message)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def empty?(message)\n    message.empty?\n  end\n\n  def shouting?(message)\n    message.upcase == message\n  end\n\n  def question?(message)\n    message.end_with?('?')\n  end\nend	\N	\N	0	4	2014-07-12 08:55:36	2014-07-12 08:55:36	235	bob.rb
453	15	1c1ffaa8a4b8ec562ccd1c9d	pending	ruby	nth-prime	require 'prime'\n\nclass Prime\n  class << self\n    def nth(nth)\n      raise ArgumentError if nth < 1\n      Prime.first(nth).last\n    end\n  end\nend	\N	\N	0	1	2014-06-05 00:16:21	2014-06-05 00:16:21	237	prime.rb
456	15	26e0e9340baa812397e326ec	pending	javascript	grade-school	###\n  SCHOOL\n###\n\nrequire 'coffee-script'\n\nclass School\n  constructor: (name) ->\n    @name = name\n    @db = {}\n\n  add: (student, grade) ->\n    if @db[grade] then @db[grade].push student else @db[grade] = [student]\n\n  grade: (grade) ->\n    @db[grade] or []\n\n  sort: ->\n    sorted = {}\n    for grade,students of @db\n      sorted[grade] = students.sort()\n    sorted\n\nmodule.exports = School	\N	\N	0	1	2014-06-08 16:53:01	2014-06-08 16:53:01	240	grade-school.js
457	15	786557f9d53a39273b592a4d	pending	ruby	hamming	class Hamming\n  def self.compute(strand_1, strand_2)\n    distance = 0\n    length = [strand_1.size, strand_2.size].min\n    (0..length - 1).each do |i|\n      distance += 1 unless strand_1[i] == strand_2[i]\n    end\n    distance\n  end\nend	\N	\N	0	1	2014-06-06 03:21:47	2014-06-06 03:21:47	241	hamming.rb
458	15	10f9dc0dc9e5fc51a5f8e3b7	pending	scala	anagram	class Anagram(val word: String) {\n  val normalizedWord = word.toLowerCase\n  val sortedWord = normalizedWord.sorted\n\n  def matches(candidates: Seq[String]): Seq[String] =\n    candidates filter { (c) => \n      val lc = c.toLowerCase\n      lc != normalizedWord && lc.sorted == sortedWord\n    }\n}	\N	\N	0	1	2014-07-03 21:00:59	2014-07-03 21:00:59	242	anagram.scala
459	15	e7e259d8c0876cedba064e4e	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- normalize [word]\n  (str/lower-case word))\n\n(defn- char-count [word]\n  (frequencies word))\n\n(defn- is-anagram [word possibility]\n  (let [normalized-possibility (normalize possibility)]\n    (and\n      (not= word normalized-possibility)\n      (=\n        (char-count word)\n        (char-count normalized-possibility)))))\n\n(defn anagrams-for [word possibilities]\n  (let [normalized-word (normalize word)]\n    (filter\n      (partial is-anagram normalized-word)\n      possibilities)))	\N	\N	0	5	2014-05-29 12:04:00	2014-05-29 12:04:00	243	anagram.clj
460	15	b4084702443f29d73711c2a5	pending	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- normalize [word]\n  (str/lower-case word))\n\n(defn- is-anagram [word possibility]\n  (let [normalized-possibility (normalize possibility)]\n    (and\n      (not= word normalized-possibility)\n      (=\n        (frequencies word)\n        (frequencies normalized-possibility)))))\n\n(defn anagrams-for [word possibilities]\n  (let [normalized-word (normalize word)]\n    (filter\n      (partial is-anagram normalized-word)\n      possibilities)))	\N	\N	0	6	2014-05-30 14:59:59	2014-05-30 14:59:59	243	anagram.clj
461	15	a09b6a3ea17e00c3434c459e	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- is-anagram [word possibility]\n  (and\n    (not= word possibility)\n    (=\n      (frequencies (str/lower-case word))\n      (frequencies (str/lower-case possibility)))))\n\n(defn anagrams-for [word possibilities]\n  (filter\n    (partial is-anagram word)\n    possibilities))	\N	\N	0	2	2014-06-02 15:06:09	2014-06-02 15:06:09	243	anagram.clj
462	15	a7f1d9ca64bf90d01479031c	superseded	clojure	anagram	(ns anagram)\n(defn- is-anagram [word possibility]\n  (and\n    (not= word possibility)\n    (=\n      (frequencies (clojure.string/lower-case word))\n      (frequencies (clojure.string/lower-case possibility)))))\n\n(defn anagrams-for [word possibilities]\n  (filter\n    (partial is-anagram word)\n    possibilities))	\N	\N	0	1	2014-06-06 10:13:16	2014-06-06 10:13:16	243	anagram.clj
463	15	0b6472e547400ce541a67281	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- char-count [word]\n  (frequencies (str/lower-case word)))\n\n(defn- is-anagram [word possibility]\n  (and\n    (not= word possibility)\n    (=\n      (char-count word)\n      (char-count possibility))))\n\n(defn anagrams-for [word possibilities]\n  (filter\n    (partial is-anagram word)\n    possibilities))	\N	\N	0	3	2014-07-04 13:40:17	2014-07-04 13:40:17	243	anagram.clj
464	15	54cf4fe405ba3c3b946ece40	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str]))\n\n(defn- normalize [word]\n  (str/lower-case word))\n\n(defn- char-count [word]\n  (frequencies (normalize word)))\n\n(defn- is-anagram [word possibility]\n  (and\n    (not= word (normalize possibility))\n    (=\n      (char-count word)\n      (char-count possibility))))\n\n(defn anagrams-for [word possibilities]\n  (let [normalized-word (normalize word)]\n    (filter\n      (partial is-anagram normalized-word)\n      possibilities)))	\N	\N	0	4	2014-07-07 04:51:39	2014-07-07 04:51:39	243	anagram.clj
465	15	5f1610432ffcdefcf0e719ab	superseded	ruby	anagram	require 'pry'\n\nclass Anagram\n\tdef initialize(originalword)\n\t\t@originalword = originalword\n\t\t@originalword_letters = extract_letters(@originalword)\n\t\t@originalword_letter_count = count_letters(@originalword)\n\tend\n\n\tdef match(wordsarray)\n\t\twordsarray = wordsarray.select do |word|\n\t\t\tword = word.downcase\n\t\t\tnext if word == @originalword\n\t\t\t@originalword_letter_count == count_letters(word)\n\n\t\tend\n\t\twordsarray = wordsarray.uniq\n\tend\n\t\n\tprivate\n\n\tdef extract_letters(word)\n\t\tword.downcase.split('')\n\tend\n\n\tdef count_letters(word)\n\t\tletters = extract_letters(word)\n\t\t@count = Hash.new(0)\n\t\tletters.each do |letter|\n\t\t\t@count[letter] += 1\n\t\tend\n\t\t@count\n\tend\nend	\N	\N	0	1	2014-05-25 19:18:15	2014-05-25 19:18:15	244	anagram.rb
466	15	b49dbae36ced1b533bc3297e	superseded	ruby	anagram	require 'pry'\n\nclass Anagram\n\tattr_reader :originalword, :originalword_letters, :originalword_letter_count\n\t\n\tdef initialize(originalword)\n\t\t@originalword = originalword\n\tend\n\n\tdef match(wordsarray)\n\t\twordsarray = wordsarray.select do |word|\n\t\t\tanagrams?(word,originalword)\n\t\tend\n\t\twordsarray = wordsarray.uniq\n\tend\n\t\n\tprivate\n\n\tdef anagrams?(word1,word2)\n\t\tword1 = word1.downcase\n\t\tword2 = word2.downcase\n\t\treturn false if word1 == word2\n\t\tcount_letters(word1) == count_letters(word2)\n\tend\n\n\tdef count_letters(word)\n\t\tletters = extract_letters(word)\n\t\tcount = Hash.new(0)\n\t\tletters.each do |letter|\n\t\t\tcount[letter] += 1\n\t\tend\n\t\tcount\n\tend\n\n\tdef extract_letters(word)\n\t\tword.downcase.split('')\n\tend\nend	\N	\N	0	5	2014-05-31 15:48:38	2014-05-31 15:48:38	244	anagram.rb
467	15	163fb5bcc852508a8027e33b	superseded	ruby	anagram	require 'pry'\n\nclass Anagram\n\tattr_reader :originalword, :originalword_letters, :originalword_letter_count\n\t\n\tdef initialize(originalword)\n\t\t@originalword = originalword\n\t\t@originalword_letters = extract_letters(originalword)\n\t\t@originalword_letter_count = count_letters(originalword)\n\tend\n\n\tdef match(wordsarray)\n\t\twordsarray = wordsarray.select do |word|\n\t\t\tword = word.downcase\n\t\t\tnext if word == originalword\n\t\t\toriginalword_letter_count == count_letters(word)\n\n\t\tend\n\t\twordsarray = wordsarray.uniq\n\tend\n\t\n\tprivate\n\n\tdef extract_letters(word)\n\t\tword.downcase.split('')\n\tend\n\n\tdef count_letters(word)\n\t\tletters = extract_letters(word)\n\t\t@count = Hash.new(0)\n\t\tletters.each do |letter|\n\t\t\t@count[letter] += 1\n\t\tend\n\t\t@count\n\tend\nend	\N	\N	0	2	2014-06-13 05:15:39	2014-06-13 05:15:39	244	anagram.rb
468	15	aeb11fb567b370b68cbe4fef	superseded	ruby	anagram	require 'pry'\n\nclass Anagram\n\tattr_reader :originalword, :originalword_letters, :originalword_letter_count\n\t\n\tdef initialize(originalword)\n\t\t@originalword = originalword\n\t\t@originalword_letters = extract_letters(originalword)\n\t\t@originalword_letter_count = count_letters(originalword)\n\tend\n\n\tdef match(wordsarray)\n\t\twordsarray = wordsarray.select do |word|\n\t\t\tword = word.downcase\n\t\t\tnext if word == originalword\n\t\t\toriginalword_letter_count == count_letters(word)\n\t\tend\n\t\twordsarray = wordsarray.uniq\n\tend\n\t\n\tprivate\n\n\tdef extract_letters(word)\n\t\tword.downcase.split('')\n\tend\n\n\tdef count_letters(word)\n\t\tletters = extract_letters(word)\n\t\tcount = Hash.new(0)\n\t\tletters.each do |letter|\n\t\t\tcount[letter] += 1\n\t\tend\n\t\tcount\n\tend\nend	\N	\N	0	3	2014-06-15 04:53:51	2014-06-15 04:53:51	244	anagram.rb
527	23	df13de27a80b1cc304357fe6	superseded	ruby	rna-transcription	class DNA\n  attr_reader :dna_strand\n\n  def initialize(dna_strand)\n    @dna_strand = dna_strand\n  end\n\n  def to_rna\n    convert_thymidines_to_uracils\n  end\n\n  def convert_thymidines_to_uracils\n    thymidines_to_uracils.each do |thymidine, uracil|\n      dna_strand.gsub!(thymidine, uracil)\n    end\n\n    dna_strand\n  end\n\n  def thymidines_to_uracils\n    {\n      "T" => "U"\n    }\n  end\nend	\N	\N	0	2	2014-02-06 08:38:12	2014-02-06 08:38:12	273	rna-transcription.rb
528	23	24cd5915589d0d36f290075c	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna_strand)\n    @dna_strand = dna_strand\n  end\n\n  def to_rna\n    uracils\n  end\n\n  def uracils\n    thymidines.map { |nucleotide| thymidine_to_uracil(nucleotide) }.join\n  end\n\n  def thymidines\n    @dna_strand.chars\n  end\n\n  def thymidine_to_uracil(nucleotide)\n    case nucleotide\n    when "T"\n      "U"\n    else\n      nucleotide\n    end\n  end\nend	\N	\N	0	1	2014-02-22 08:15:38	2014-02-22 08:15:38	273	rna-transcription.rb
529	23	c3813be1efa05816202191a7	superseded	ruby	rna-transcription	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    convert_thymidines_to_uracils\n  end\n\n  def convert_thymidines_to_uracils\n    uracils = strand.clone\n\n    thymidines_to_uracils.each do |thymidine, uracil|\n      uracils.tr!(thymidine, uracil)\n    end\n\n    uracils\n  end\n\n  def thymidines_to_uracils\n    {\n      "T" => "U"\n    }\n  end\nend	\N	\N	0	3	2014-04-24 15:59:30	2014-04-24 15:59:30	273	rna-transcription.rb
530	23	4758273643a901de023289c3	superseded	ruby	rna-transcription	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def to_rna\n    convert_thymidines_to_uracils\n  end\n\n  def convert_thymidines_to_uracils\n    strand.tr("T", "U")\n  end\nend	\N	\N	0	4	2014-06-08 17:57:55	2014-06-08 17:57:55	273	rna-transcription.rb
531	23	6c93315e978da51f4396b763	superseded	ruby	robot-name	class Robot\n  LETTERS = [*"A".."Z"]\n  DIGITS = [*0..9].map(&:to_s)\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    self.name = generate_name\n  end\n\n  private\n\n  def generate_name\n    "#{random_letter * 2}#{random_number * 3}"\n  end\n\n  def random_letter\n    LETTERS.sample\n  end\n\n  def random_number\n    DIGITS.sample\n  end\n\n  attr_writer :name\nend	\N	\N	0	2	2014-01-07 04:24:09	2014-01-07 04:24:09	274	robot-name.rb
532	23	d0a8c9f113196be05e0bd37d	superseded	ruby	robot-name	LETTERS = [*"A".."Z"]\nDIGITS = [*0..9].map(&:to_s)\n\nclass Robot\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    self.name = generate_name\n  end\n\n  private\n\n  def generate_name\n    "#{random_letter * 2}#{random_number * 3}"\n  end\n\n  def random_letter\n    ::LETTERS.shuffle.first\n  end\n\n  def random_number\n    ::DIGITS.shuffle.first\n  end\n\n  attr_writer :name\nend	\N	\N	0	1	2014-03-31 22:58:02	2014-03-31 22:58:02	274	robot-name.rb
533	23	9983440d7f19c6bdaf2775e6	superseded	ruby	robot-name	class Robot\n  LETTERS = [*"A".."Z"]\n  DIGITS = [*0..9].map(&:to_s)\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    self.name = generate_name\n  end\n\n  private\n\n  def generate_name\n    "#{random_letters(2)}#{random_numbers(3)}"\n  end\n\n  def random_letters(number)\n    LETTERS.sample(number).join\n  end\n\n  def random_numbers(number)\n    DIGITS.sample(number).join\n  end\n\n  attr_writer :name\nend	\N	\N	0	3	2014-04-24 11:30:10	2014-04-24 11:30:10	274	robot-name.rb
534	23	8dc580de7ff7ab928f0f4238	superseded	ruby	robot-name	class Robot\n  LETTERS = [*"A".."Z"]\n  DIGITS = [*"0".."9"]\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    self.name = nil\n  end\n\n  private\n\n  def generate_name\n    "#{random_letters 2 }#{random_numbers 3 }"\n  end\n\n  def random_letters number\n    (LETTERS * number).sample(number).join\n  end\n\n  def random_numbers number\n    (DIGITS * number).sample(number).join\n  end\n\n  attr_writer :name\nend	\N	\N	0	4	2014-06-23 17:19:54	2014-06-23 17:19:54	274	robot-name.rb
535	23	5c673dcd6f7dfcdda57b60c9	pending	ruby	robot-name	class Robot\n  LETTERS = [*"A".."Z"]\n  DIGITS = [*"0".."9"]\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    self.name = nil\n  end\n\n  private\n\n  def generate_name\n    "#{random_letters 2}#{random_numbers 3}"\n  end\n\n  def random_letters number\n    (LETTERS * number).sample(number).join\n  end\n\n  def random_numbers number\n    (DIGITS * number).sample(number).join\n  end\n\n  attr_writer :name\nend	\N	\N	0	5	2014-06-29 17:00:49	2014-06-29 17:00:49	274	robot-name.rb
536	23	d0d500597c3c307eeba34a47	superseded	ruby	word-count	class Phrase < String\n\n  def word_count\n    word_counts = Hash.new(0)\n\n    each_word do |word|\n      word_counts[word] += 1\n    end\n\n    return word_counts\n  end\n\n  def each_word\n    split(/[^a-zA-Z0-9]+/).each do |word| \n      yield word.downcase \n    end\n  end\n\nend	\N	\N	0	1	2014-02-27 00:30:42	2014-02-27 00:30:42	275	word-count.rb
537	23	6ab057fe36067a1ca03fd403	pending	ruby	word-count	class Phrase < String\n\n  def word_count\n    word_counts = Hash.new(0)\n\n    each_word do |word|\n      word_counts[word] += 1\n    end\n\n    word_counts\n  end\n\n  def each_word\n    downcase.split(/\\W+/).each do |word| \n      yield word \n    end\n  end\n\nend	\N	\N	0	2	2014-04-26 09:20:31	2014-04-26 09:20:31	275	word-count.rb
538	23	48f9956f37d6e3341d0d8ad7	pending	ruby	grains	class Grains\n  def square n\n    2 ** (n - 1)\n  end\n\n  def total\n    2 ** 64 - 1\n  end\nend	\N	\N	0	1	2014-04-10 21:49:04	2014-04-10 21:49:04	276	grains.rb
539	23	82be09cfedfd4cc9440ecf30	pending	haskell	bob	module Bob (responseFor) where\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor msg \r\n\t| isYelling msg  = "Woah, chill out!"\r\n\t| isQuestion msg = "Sure."\r\n\t| isSilent msg   = "Fine. Be that way!"\r\n\t| otherwise      = "Whatever."\r\n\t\r\nisYelling :: String -> Bool\r\nisYelling msg = isYelling' (filter isAlpha msg)\r\n\twhere \r\n\t\tisYelling' "" = False\r\n\t\tisYelling' m  = all isUpper m\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion "" = False\r\nisQuestion msg = last msg == '?'\r\n\r\nisSilent :: String -> Bool\r\nisSilent msg = all isSpace msg\r	\N	\N	0	4	2013-12-21 21:57:16	2013-12-21 21:57:16	277	bob.hs
540	23	a52c0f81d8d8f8979c1abe52	superseded	haskell	bob	module Bob (responseFor) where\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor msg \r\n\t| isYelling msg  = "Woah, chill out!"\r\n\t| isQuestion msg =  "Sure."\r\n\t| isSilent msg   = "Fine. Be that way!"\r\n\t| otherwise      = "Whatever."\r\n\t\r\nisYelling :: String -> Bool\r\nisYelling msg = isYelling' (filter isAlpha msg)\r\n\twhere \r\n\t\tisYelling' "" = False\r\n\t\tisYelling' m  = all isUpper m\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion "" = False\r\nisQuestion msg = (last msg) == '?'\r\n\r\nisSilent :: String -> Bool\r\nisSilent "" = True\r\nisSilent msg = all isSpace msg\r	\N	\N	0	2	2014-02-10 22:41:23	2014-02-10 22:41:23	277	bob.hs
541	23	faa318b577b2a9d0c4b5c8f4	superseded	haskell	bob	module Bob (responseFor) where\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor msg \r\n\t| isYelling msg  = "Woah, chill out!"\r\n\t| isQuestion msg =  "Sure."\r\n\t| isSilent msg   = "Fine. Be that way!"\r\n\t| otherwise      = "Whatever."\r\n\t\r\nisYelling :: String -> Bool\r\nisYelling msg = isYelling' (filter isAlpha msg)\r\n\twhere \r\n\t\tisYelling' "" = False\r\n\t\tisYelling' mg = foldr1 (&&) (map isUpper mg)\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion "" = False\r\nisQuestion msg = if (last msg) == '?' then True else False\r\n\r\nisSilent :: String -> Bool\r\nisSilent "" = True\r\nisSilent msg = foldr1 (&&) (map isSpace msg)\r	\N	\N	0	1	2014-03-30 23:02:12	2014-03-30 23:02:12	277	bob.hs
542	23	c313bb1eb15bf5ff7085718b	superseded	haskell	bob	module Bob (responseFor) where\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor msg \r\n\t| isYelling msg  = "Woah, chill out!"\r\n\t| isQuestion msg = "Sure."\r\n\t| isSilent msg   = "Fine. Be that way!"\r\n\t| otherwise      = "Whatever."\r\n\t\r\nisYelling :: String -> Bool\r\nisYelling msg = isYelling' (filter isAlpha msg)\r\n\twhere \r\n\t\tisYelling' "" = False\r\n\t\tisYelling' m  = all isUpper m\r\n\r\nisQuestion :: String -> Bool\r\nisQuestion "" = False\r\nisQuestion msg = (last msg) == '?'\r\n\r\nisSilent :: String -> Bool\r\nisSilent "" = True\r\nisSilent msg = all isSpace msg\r	\N	\N	0	3	2014-04-24 08:26:09	2014-04-24 08:26:09	277	bob.hs
543	23	b32b5ab3f2b4659ba56bc4e6	superseded	python	word-count	import re\nimport string\n\nclass Phrase(object):\n    def __init__(self, phrase):\n        punc = re.escape(string.punctuation)\n        self._words = re.sub('[{}]'.format(punc), '', phrase)\n    \n    def word_count(self):\n        counts = dict()\n        for word in [w.lower() for w in self._words.split()]:\n            if not counts.get(norm):\n                counts[norm] = 0\n\n            counts[norm] += 1\n\n        return counts	\N	\N	0	1	2014-02-26 10:48:36	2014-02-26 10:48:36	278	wordcount.py
544	23	42c995311ce50c8e65b7d774	pending	python	word-count	import re\nimport string\nimport collections\n\nclass Phrase(object):\n    """\n    A program that given a phrase will count the occurrences of each word\n    in that phrase (excluding punctuation, and ignoring case).\n    """\n    def __init__(self, phrase):\n        punc = re.escape(string.punctuation)\n        self._words = re.sub('[{}]'.format(punc), '', phrase).lower()\n    \n    def word_count(self):\n        return collections.Counter(self._words.split())	\N	\N	0	2	2014-05-10 07:03:35	2014-05-10 07:03:35	278	wordcount.py
545	23	d0041c37514247b5b8de5961	pending	perl5	word-count	=head1 NAME\n\nPhrase\n\n=head1 DESCRIPTION\n\n\n=head1 AUTHOR\n\nlhare\n\n=head1 METHODS\n\n=over\n\n=cut\n\npackage Phrase;\n\nuse strict;\nuse warnings;\n\nsub word_count {\n    my ($text) = @_;\n\n    my $count;\n    foreach my $word (split /\\s+/, $text) {\n        $word = lc $word;\n        $word =~ s/[^a-zA-Z0-9]//g;\n\n        if (!$word) { next; }\n\n        if (!$count->{$word}) {\n            $count->{$word} = 1;\n        }\n        else {\n            $count->{$word}++;\n        }\n    }\n\n    return $count;\n}\n\n\n\n\n=back\n\n=cut\n\n1;	\N	\N	0	1	2014-04-08 08:26:54	2014-04-08 08:26:54	279	word-count.pm
546	23	3404f6ee4b233ebeb108dcf6	pending	javascript	scrabble-score	var score = function(word) {\n  var scoreObj = {\n    1: ["A", "E", "I", "O", "U", "L", "N", "R", "S", "T"],\n    2: ["D", "G"],\n    3: ["B", "C", "M", '"'],\n    4: ["F", "H", "V", "W", "Y"],\n    5: ["K"],\n    8: ["J","X"],\n    10: ["Q", "Z"]\n  };\n  var points = 0;\n  if (word === "" || word === null) {\n    return points;\n  } else {\n    var wordArr = word.toUpperCase().split("");\n    wordArr.forEach(function(letter) {\n      for (var score in scoreObj) {\n        if (scoreObj[score].indexOf(letter) >-1) {\n           points += parseInt(score);\n        }\n      }\n    });\n    return points;\n  }\n};	\N	\N	0	1	2014-03-26 01:23:58	2014-03-26 01:23:58	280	scrabble-score_test.js
547	23	07fe116756668f2ebba341a4	pending	ruby	linked-list	class Deque\n\n  def push(item)\n    @head = Cell.new(item, nil, @head)\n    @head.next.prev = @head if @head.next\n    @tail = @head unless @tail\n  end\n\n  def pop\n    value = @head.value\n    @head = @head.next\n    @head.prev = nil if @head\n    return value\n  end\n\n  def unshift(item)\n    @tail = Cell.new(item, @tail, nil)\n    @tail.prev.next = @tail if @tail.prev\n    @head = @tail unless @head\n  end\n\n  def shift\n    value = @tail.value\n    @tail = @tail.prev\n    @tail.next = nil if @tail\n    return value\n  end\n\nend\n\nclass Cell\n  attr_accessor :value, :next, :prev\n\n  def initialize(value, prev, nxt)\n    @value, @prev, @next = value, prev, nxt\n  end\nend	\N	\N	0	1	2014-06-15 22:57:35	2014-06-15 22:57:35	281	linked_list.rb
548	23	484ca5406ebb7760e01bb2bd	pending	javascript	saddle-points	var Matrix = function (str) {\n\tthis.matArr = str.split('\\n').map(function(el){\n\t\treturn el.split(' ');\n\t});\n\tthis.rows = this.getRows();\n\tthis.columns = this.getCols();\n\tthis.saddlePoints = this.getSaddlePoints();\n};\n\nMatrix.prototype.getRows = function() {\n\tvar matArr = this.matArr;\n\tvar rows = [];\n\tfor (var i = 0; i < matArr.length; i++) {\n\t\tvar stringyRow = matArr[i];\n\t\tvar row = [];\n\t\tfor (var j = 0; j < stringyRow.length; j++) {\n\t\t\trow.push(parseInt(stringyRow[j]));\n\t\t}\n\t\trows.push(row);\n\t}\n\treturn rows;\n};\n\nMatrix.prototype.getCols = function() {\n\tvar rows = this.getRows();\n\tvar numCols = rows.length;\n\tvar cols = [];\n\tfor (var i = 0; i < numCols; i++) {\n\t\tvar col = [];\n\t\tfor (var j = 0; j < numCols; j++) {\n\t\t\tvar row = rows[j];\n\t\t\tcol.push(row[i]);\n\t\t}\n\t\tcols.push(col);\n\t}\n\treturn cols;\n};\n\nMatrix.prototype.getSaddlePoints = function() {\n\tvar rows = this.rows, cols = this.columns;\n\tvar largestInRow = [];\n\t// (row, col) == (1, 0)\n\n\tfor (var i = 0; i < rows.length; i++) {\n\t\tvar row = rows[i];\n\t\tvar biggest = {\n\t\t\tnum: row[0],\n\t\t\trow: 0,\n\t\t\tcol: 0};\n\t\tfor (var j = 1; j < row.length; j++) {\n\t\t\tvar cell = row[j];\n\t\t\tif (cell > biggest.num) {\n\t\t\t\tbiggest.num = cell;\n\t\t\t\tbiggest.row = i;\n\t\t\t\tbiggest.col = j;\n\t\t\t}\n\t\t}\n\t\tlargestInRow.push(biggest);\n\t}\n\n\tvar saddles = [];\n\n\tfor (var k = 0; k < largestInRow.length; k++) {\n\t\tvar colToCheck = largestInRow[k].col;\n\t\tvar numToCheck = largestInRow[k].num;\n\t\tvar smallest = true;\n\t\tfor (var l = 0; l < cols[colToCheck].length; l++) {\n\t\t\tif (numToCheck > cols[colToCheck][l]) {\n\t\t\t\tsmallest = false;\n\t\t\t}\n\t\t}\n\t\tif (smallest) {\n\t\t\tsaddles.push([largestInRow[k].row, colToCheck]);\n\t\t}\n\t}\n\treturn saddles;\n};	\N	\N	0	1	2013-12-31 00:47:34	2013-12-31 00:47:34	282	saddle.js
549	23	fa52de9dfe3a9ed07486610f	pending	javascript	linked-list	function LinkedList() {\n    this.isEmpty = function() {\n        return this.first === undefined;\n    };\n    this.push = function(datum) {\n        if (this.isEmpty()) {\n            this.addFirstElement(datum);\n        } else {\n            var previousLast = this.first.prev;\n            var newLast = new Element(datum, previousLast, this.first);\n            previousLast.next = newLast;\n            this.first.prev = newLast;\n        }\n    };\n\n    this.pop = function() {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        var formerLast = this.first.prev;\n        this.first.prev = formerLast.prev;\n        var result = formerLast.datum;\n        return result;\n    };\n\n    this.shift = function() {\n        var newFirst = this.first.next;\n        var datum = this.first.datum;\n        var last = this.first.prev;\n        newFirst.prev = last;\n        last.next = newFirst;\n        this.first = newFirst;\n        return datum;\n    };\n\n    this.unshift = function(datum) {\n        if (this.isEmpty()) {\n            this.addFirstElement(datum);\n        } else {\n            var last = this.first.prev;\n            var formerFirst = this.first;\n            var newFirst = new Element(datum, last, formerFirst);\n            last.next = newFirst;\n            formerFirst.prev = newFirst;\n            this.first = newFirst;\n        }\n    };\n\n    this.addFirstElement = function(datum) {\n        var firstElement = new Element(datum);\n        firstElement.next = firstElement;\n        firstElement.prev = firstElement;\n        this.first = firstElement;\n    };\n\n    this.count = function() {\n        if (this.isEmpty()) {\n            return 0;\n        }\n\n        var currentElement = this.first;\n        var size = 0;\n        do {\n            currentElement = currentElement.next;\n            size++;\n        } while (currentElement !== this.first);\n\n        return size;\n    };\n\n    this.delete = function(datum) {\n        var currentElement = this.first;\n        while (currentElement.datum !== datum) {\n            currentElement = currentElement.next;\n        }\n        var previousElement = currentElement.prev;\n        var nextElement = currentElement.next;\n        previousElement.next = nextElement;\n        nextElement.prev = previousElement;\n    };\n}\n\nfunction Element(datum, prev, next) {\n    this.datum = datum;\n    this.next = next;\n    this.prev = prev;\n}\n\nmodule.exports = LinkedList;	\N	\N	0	1	2013-12-31 20:39:32	2013-12-31 20:39:32	283	linked-list.js
550	23	520370623382db8ae305ed12	pending	ruby	crypto-square	class Crypto\n  def initialize(string)\n    @string = string.downcase.gsub(/[^a-z0-9]/,"")\n  end\n  def normalize_plaintext\n    @string\n  end\n  def size\n    (normalize_plaintext.length ** (0.5)).ceil\n  end\n  def plaintext_segments\n    normalize_plaintext.each_char.each_slice(size).map(&:join)\n  end\n  def ciphertext\n    arrays = plaintext_segments.map { |string| string.each_char.to_a}\n    arrays[0].zip(*arrays[1..-1]).map(&:compact).flatten.join\n  end\n  def normalize_ciphertext\n    ciphertext.each_char.each_slice(5).map(&:join).join(" ")\n  end\nend	\N	\N	0	1	2014-03-24 15:07:59	2014-03-24 15:07:59	284	crypto-square.rb
551	23	a65e45a8cef65cf581e3cd17	superseded	clojure	anagram	(ns anagram (:require [clojure.string :refer [lower-case]]))\n\n(defn- anagram-of? [a b]\n  (let [lowerA (lower-case a)\n        lowerB (lower-case b)\n        canonicalA (sort lowerA)\n        canonicalB (sort lowerB)]\n    (and (not (= lowerA lowerB))\n      (= canonicalA canonicalB))))\n\n(defn anagrams-for [word candidates]\n  (vec (filter #(anagram-of? word %) candidates)))	\N	\N	0	1	2014-01-17 15:32:01	2014-01-17 15:32:01	285	anagram.clj
552	23	e9342b9944d63b83ad979309	superseded	clojure	anagram	(ns anagram (:require [clojure.string :refer [lower-case]]))\n\n(defn- anagram-of? [a]\n  (let [\n      lowerA (lower-case a)\n      canonicalA (sort lowerA)\n    ]\n    (fn [b]\n      (let [\n          lowerB (lower-case b)\n          canonicalB (sort lowerB)\n        ]\n        (and (not (= lowerA lowerB))\n          (= canonicalA canonicalB))))))\n\n(defn anagrams-for [word candidates]\n  (vec (filter (anagram-of? word) candidates)))	\N	\N	0	2	2014-02-02 14:24:55	2014-02-02 14:24:55	285	anagram.clj
553	23	b3f43d3e91c8f38d85b12c0f	pending	clojure	anagram	(ns anagram (:require [clojure.string :refer [lower-case]]))\n\n(defn- analyse-word [word]\n  (let [lword (lower-case word)]\n    [lword (sort lword)]))\n\n(defn- anagram-of-analysed? [[word-a chars-a] b]\n  (let [[word-b chars-b] (analyse-word b)]\n    (and (= chars-a chars-b) (not (= word-a word-b)))))\n\n(defn anagrams-for [word candidates]\n  (vec (filter (partial anagram-of-analysed? (analyse-word word)) candidates)))	\N	\N	0	3	2014-02-15 14:23:10	2014-02-15 14:23:10	285	anagram.clj
554	23	03903328d974d143821d5117	pending	go	anagram	package anagram\n\nimport "strings"\nimport "sort"\n\n// TODO this is pretty wasteful\nfunc SortString(word string) string {\n\tchars := strings.Split(word, "")\n\tsort.Strings(chars)\n\treturn strings.Join(chars, "")\n}\n\nfunc Anagram(a string, b string) bool {\n\tif a == b {\n\t\treturn false\n\t}\n\n\treturn SortString(a) == SortString(b)\n}\n\nfunc Detect(word string, list []string) []string {\n\tmatches := []string{}\n\tword = strings.ToLower(word)\n\n\tfor _, item := range list {\n\t\titem = strings.ToLower(item)\n\t\tif Anagram(word, item) {\n\t\t\tmatches = append(matches, item)\n\t\t}\n\t}\n\n\treturn matches\n}	\N	\N	0	2	2014-01-19 01:41:08	2014-01-19 01:41:08	286	anagram.go
555	23	f05ebcc6284ed9eecccc547a	superseded	go	anagram	package anagram\n\nfunc Anagram(a string, b string) bool {\n\tif a == b {\n\t\treturn false\n\t}\n\n\t// TODO sort chars and match\n}\n\nfunc Matches(word string, list []string) []string {\n\tmatches := []string{}\n\n\tfor item := range list {\n\t\tif anagram(word, item) {\n\t\t\tmatches.push(item)\n\t\t}\n\t}\n\n\treturn matches\n}	\N	\N	0	1	2014-06-12 13:15:29	2014-06-12 13:15:29	286	anagram.go
556	23	57b2cdf599aab0cd2dd00058	pending	elixir	beer-song	defmodule Beer do\n\n  def verse(n) do\n    first_line(n) <> second_line(n)\n  end\n\n  def sing(from, downto // 0) when from >= downto do\n     Enum.map_join(from..downto, "\\n", &verse/1) <> "\\n"\n  end\n\n  defp bottles(0), do: "no more bottles of beer"\n  defp bottles(1), do: "1 bottle of beer"\n  defp bottles(n), do: "#{n} bottles of beer"\n\n  defp first_line(n) do\n    "#{bottles(n) |> String.capitalize} on the wall, #{bottles(n)}.\\n"\n  end\n\n  defp second_line(0) do\n    "Go to the store and buy some more, #{bottles(99)} on the wall.\\n"\n  end\n  defp second_line(n) do\n    subject = if n > 1, do: "one", else: "it"\n    "Take #{subject} down and pass it around, #{bottles(n-1)} on the wall.\\n"\n  end\nend	\N	\N	0	1	2014-02-06 15:19:28	2014-02-06 15:19:28	287	beer-song.exs
557	23	ddcecebacdcec713da0fa0a1	pending	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Earth | Mercury | Mars | Venus | Neptune | Jupiter | Saturn | Uranus deriving (Eq, Show)\n\nyearScale :: Planet -> Float\nyearScale Earth = 1.0\nyearScale Mercury = 0.2408467\nyearScale Mars = 1.8808158\nyearScale Venus = 0.61519726\nyearScale Neptune = 164.79132\nyearScale Jupiter = 11.862615\nyearScale Saturn = 29.447498\nyearScale Uranus = 84.016846\n\nyearInDays :: Planet -> Float\nyearInDays Earth = 365.25\nyearInDays other = yearScale other * yearInDays Earth\n\nyearInSeconds :: Planet -> Float\nyearInSeconds p =  24 * 60 * 60 * yearInDays p\n\nageOn :: Planet -> Float -> Float\nageOn p s = s / yearInSeconds p	\N	\N	0	1	2014-03-04 04:07:51	2014-03-04 04:07:51	288	SpaceAge.hs
558	23	dc4052014b33bfd67ef488d2	pending	javascript	secret-handshake	/*```\n1 = wink\n10 = double blink\n100 = close your eyes\n1000 = jump\n\n\n10000 = Reverse the order of the operations in the secret handshake.\n```*/\n\nfunction SecretHandshake (num) {\n  if (typeof num !== "number") {\n    throw "Handshake must be a number";\n  }\n  this.num = num;\n}\n\nSecretHandshake.prototype.commands = function() {\n  var commands = ["wink", "double blink", "close your eyes", "jump"];\n  var num = this.num % 32;\n  var reversed = true;\n\n  var resultCommands = [];\n\n  var commandIndex = commands.length-1;\n  var commandVal = Math.pow(2, commandIndex);\n\n  if (Math.floor(num / 16) > 0) {\n    reversed = false;\n    num = num - 16;\n  }\n\n  for (var i = commandIndex; i >= 0; i--) {\n    if (Math.floor(num / commandVal) > 0) {\n      resultCommands.push(commands[i]);\n      num = num - commandVal;\n    }\n    commandVal /= 2;\n  }\n\n  if (reversed) {\n    resultCommands.reverse();\n  }\n  return resultCommands;\n\n};	\N	\N	0	1	2014-01-31 04:00:27	2014-01-31 04:00:27	289	secret-handshake_test.js
559	23	3bf18b00abd64af59469d3f0	superseded	haskell	rna-transcription	module DNA\n(toRNA)\nwhere\n\nuracil = 'U'\nthymine = 'T'\n\nisThymine :: Char -> Bool\nisThymine nucleotide = thymine == nucleotide\n\ncomplement :: Char -> Char\ncomplement nucleotide \n  | isThymine nucleotide = uracil\n  | otherwise            = nucleotide\n\ntoRNA :: String -> String\ntoRNA nucleotides = map complement nucleotides	\N	\N	0	1	2014-01-30 12:37:40	2014-01-30 12:37:40	290	rna-transcription.hs
560	23	3d7fb17a730a20db4af1d4fe	pending	haskell	rna-transcription	module DNA\n(toRNA)\nwhere\n\nuracil = 'U'\nthymine = 'T'\n\ncomplement :: Char -> Char\ncomplement nucleotide \n  | nucleotide == thymine  = uracil\n  | otherwise              = nucleotide\n\ntoRNA :: String -> String\ntoRNA = map complement	\N	\N	0	2	2014-05-07 19:23:12	2014-05-07 19:23:12	290	rna-transcription.hs
561	23	9a8127b706c5b996accb8b56	pending	ruby	roman-numerals	class Fixnum\n  ROMAN = {\n    1 => "I",\n    4 => "IV",\n    5 => "V",\n    9 => "IX",\n    10 => "X",\n    40 => "XL",\n    50 => "L",\n    90 => "XC",\n    100 => "C",\n    400 => "CD",\n    500 => "D",\n    900 => "CM",\n    1000 => "M"\n  }\n\n  def to_roman\n    output = ""\n    current_key = 1\n    current_number = self\n\n    while current_number > 0\n      ROMAN.each do |key, value|\n        if current_number >= key\n          current_key = key\n        end\n      end\n      output += ROMAN[current_key]\n      current_number -= current_key\n    end\n    output\n  end\nend	\N	\N	0	1	2014-06-04 04:04:27	2014-06-04 04:04:27	291	roman.rb
562	23	f3c0bf7787580bd5aea7f080	superseded	haskell	binary	module Binary (toDecimal) where\n\ntoDecimal :: String -> Integer\ntoDecimal b = go 0 b\n  where\n    go n [] = n\n    go n ('0':r) = go (n * 2) r\n    go n ('1':r) = go (n * 2 + 1) r\n    go _ _ = 0	\N	\N	0	1	2014-01-20 07:22:07	2014-01-20 07:22:07	292	Binary.hs
563	23	dbbcca7cad7056688143fac5	superseded	haskell	binary	module Binary (toDecimal) where\n\n\nimport Data.List\n\n\ntoDecimal :: String -> Integer\ntoDecimal b = maybe 0 id $ foldl' processDigit (Just 0) b\n  where\n    processDigit n '0' = fmap (*2) n\n    processDigit n '1' = fmap ((+1) . (*2)) n\n    processDigit _ _   = Nothing	\N	\N	0	2	2014-02-12 04:25:42	2014-02-12 04:25:42	292	Binary.hs
564	23	3f78067946995a2af9cd6751	pending	haskell	binary	module Binary (toDecimal) where\n\n\ntoDecimal :: String -> Integer\ntoDecimal b = maybe 0 id $ foldr processDigit (Just 0) (reverse b)\n  where\n    processDigit '0' n = fmap (*2) n\n    processDigit '1' n = fmap ((+1) . (*2)) n\n    processDigit _ _   = Nothing	\N	\N	0	3	2014-07-22 22:55:16	2014-07-22 22:55:16	292	Binary.hs
565	23	b4ad64890869bdcdc8cd7377	pending	coffeescript	anagram	class Anagram\n  constructor: (@word)->\n    @downcasedWord = @word.toLowerCase()\n    @wordLength = @word.length;\n    @letterList = @toLetterList(@downcasedWord)\n\n  toLetterList: (word)->\n    word.split('').sort()\n\n  match: (candidates)->\n    candidates.map( (x)-> x.toLowerCase() ).filter (candidate)=>\n      @wordLength == candidate.length and\n        candidate != @downcasedWord and\n        @toLetterList(candidate).every (letter, index)=>\n          letter == @letterList[index]\n\n\nmodule.exports = Anagram	\N	\N	0	1	2013-12-17 05:49:19	2013-12-17 05:49:19	293	anagram.coffee
566	23	aecd01cdd6d5db2d2992cb9b	superseded	javascript	bob	function WrappedMessage(message) {\n  this.message = message;\n}\n\nWrappedMessage.prototype.isLoud = function() {\n  return this.message === this.message.toUpperCase() ? true : false;\n};\n\nWrappedMessage.prototype.isSilent = function() {\n  return (this.message === null || this.message.length === 0) ? true : false;\n};\n\nWrappedMessage.prototype.isQuestioning = function() {\n  return this.message.charAt(this.message.length - 1) === '?';\n};\n\nfunction Bob() {}\n\nBob.prototype.hey = function(message) {\n  message = new WrappedMessage(message);\n\n  if (message.isSilent()) {\n    return 'Fine, be that way.';\n  }\n  else if (message.isLoud()) {\n    return 'Woah, chill out!';\n  }\n  else if (message.isQuestioning()) {\n    return 'Sure';\n  }\n  else {\n    return 'Whatever';\n  }\n};\n\nmodule.exports = Bob;	\N	\N	0	2	2013-12-04 23:23:51	2013-12-04 23:23:51	294	bob.js
567	23	1a485ebfc2cd82f8bb44f266	pending	javascript	bob	function WrappedMessage(message) {\n  this.message = message;\n}\n\nWrappedMessage.prototype.isLoud = function() {\n  return this.message === this.message.toUpperCase() ? true : false;\n};\n\nWrappedMessage.prototype.isSilent = function() {\n  return (this.message === null || this.message.length === 0) ? true : false;\n};\n\nWrappedMessage.prototype.isQuestioning = function() {\n  return this.message.charAt(this.message.length - 1) === '?';\n};\n\nfunction Bob() {}\n\nBob.prototype.hey = function(message) {\n  message = new WrappedMessage(message);\n\n  if (message.isSilent()) {\n    return 'Fine, be that way.';\n  }\n  else if (message.isLoud()) {\n    return 'Woah, chill out!';\n  }\n  else if (message.isQuestioning()) {\n    return 'Sure';\n  }\n  else {\n    return 'Whatever';\n  }\n};\n\nmodule.exports = Bob;	\N	\N	0	3	2014-02-04 08:39:15	2014-02-04 08:39:15	294	bob.js
568	23	4909d9d2c4eebf91221e016b	superseded	javascript	bob	function WrappedMessage(message) {\n  this.message = message;\n}\n\nWrappedMessage.prototype.isLoud = function() {\n  return this.message === this.message.toUpperCase() ? true : false\n};\n\nWrappedMessage.prototype.isSilent = function() {\n  return (this.message === null || this.message.length === 0) ? true : false\n};\n\nWrappedMessage.prototype.isQuestioning = function() {\n  return this.message.charAt(this.message.length - 1) === '?'\n};\n\nfunction Bob() {}\n\nBob.prototype.hey = function(message) {\n  message = new WrappedMessage(message);\n\n  if (message.isSilent()) {\n    return 'Fine, be that way.';\n  }\n  else if (message.isLoud()) {\n    return 'Woah, chill out!';\n  }\n  else if (message.isQuestioning()) {\n    return 'Sure';\n  }\n  else {\n    return 'Whatever';\n  }\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-05-09 00:51:16	2014-05-09 00:51:16	294	bob.js
569	41	e153e7a89d6e5845fb0a986e	superseded	ruby	bob	class Bob\n  def hey phrase\n    if quiet? phrase\n      respond_to_silence\n    elsif shouting? phrase\n      respond_to_shout\n    elsif question? phrase\n      respond_to_question\n    elsif forcefully? phrase\n      stating_something\n    elsif numbers? phrase\n      respond_to_shout\n    elsif shouting_without_question_mark? phrase\n      respond_to_shout\n    else\n      stating_something\n    end\n  end\n\n  private\n\n  def shouting? phrase\n    unless quiet? phrase\n      phrase.upcase == phrase\n    end\n  end\n\n  def question? phrase\n    phrase.split(/\\w/).last == '?'\n  end\n\n  def forcefully? phrase\n    phrase.split(/\\w/).last == '!'\n  end\n\n  def numbers? phrase\n    phrase.match /\\d/\n  end\n\n  def shouting_without_question_mark? phrase\n    shouting?(phrase) && forcefully?(phrase)\n  end\n\n  def quiet? phrase\n    phrase.nil? || phrase.empty?\n  end\n\n  def stating_something\n    "Whatever."\n  end\n\n  def respond_to_question\n    "Sure."\n  end\n\n  def respond_to_shout\n    'Woah, chill out!'\n  end\n\n  def respond_to_silence\n    'Fine. Be that way.'\n  end\nend	\N	\N	0	1	2014-03-17 04:04:44	2014-03-17 04:04:44	295	bob.rb
570	41	0c6f792e45bd79fcc1ae32d3	pending	ruby	bob	class Bob\n  def hey phrase\n    if quiet? phrase\n      'Fine. Be that way.'\n    elsif shouting? phrase\n      'Woah, chill out!'\n    elsif question? phrase\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def shouting? phrase\n    phrase.upcase == phrase unless quiet? phrase\n  end\n\n  def question? phrase\n    phrase.end_with? '?'\n  end\n\n  def quiet? phrase\n    phrase.nil? || phrase.empty?\n  end\nend	\N	\N	0	4	2014-04-10 22:25:16	2014-04-10 22:25:16	295	bob.rb
571	41	dd0f32014095a09e350ff00b	superseded	ruby	bob	class Bob\n  def hey phrase\n    if quiet? phrase\n      respond_to_silence\n    elsif shouting?(phrase) || phrase_includes_numbers?(phrase) || shouting_without_question_mark?(phrase)\n      respond_to_shout\n    elsif question? phrase\n      respond_to_question\n    elsif forcefully? phrase\n      stating_something\n    else\n      stating_something\n    end\n  end\n\n  private\n\n  def shouting? phrase\n    unless quiet? phrase\n      phrase.upcase == phrase\n    end\n  end\n\n  def question? phrase\n    phrase.end_with? '?'\n  end\n\n  def forcefully? phrase\n    phrase.end_with? '!'\n  end\n\n  def phrase_includes_numbers? phrase\n    phrase.match /\\d/\n  end\n\n  def shouting_without_question_mark? phrase\n    shouting?(phrase) && forcefully?(phrase)\n  end\n\n  def quiet? phrase\n    phrase.nil? || phrase.empty?\n  end\n\n  def stating_something\n    "Whatever."\n  end\n\n  def respond_to_question\n    "Sure."\n  end\n\n  def respond_to_shout\n    'Woah, chill out!'\n  end\n\n  def respond_to_silence\n    'Fine. Be that way.'\n  end\nend	\N	\N	0	3	2014-04-11 16:08:04	2014-04-11 16:08:04	295	bob.rb
572	41	691cc3a9c4d31409ad7096f2	superseded	ruby	bob	class Bob\n  def hey phrase\n    if quiet? phrase\n      respond_to_silence\n    elsif shouting?(phrase) || phrase_includes_numbers?(phrase) || shouting_without_question_mark?(phrase)\n      respond_to_shout\n    elsif question? phrase\n      respond_to_question\n    elsif forcefully? phrase\n      stating_something\n    else\n      stating_something\n    end\n  end\n\n  private\n\n  def shouting? phrase\n    unless quiet? phrase\n      phrase.upcase == phrase\n    end\n  end\n\n  def question? phrase\n    phrase.split(/\\w/).last == '?'\n  end\n\n  def forcefully? phrase\n    phrase.split(/\\w/).last == '!'\n  end\n\n  def phrase_includes_numbers? phrase\n    phrase.match /\\d/\n  end\n\n  def shouting_without_question_mark? phrase\n    shouting?(phrase) && forcefully?(phrase)\n  end\n\n  def quiet? phrase\n    phrase.nil? || phrase.empty?\n  end\n\n  def stating_something\n    "Whatever."\n  end\n\n  def respond_to_question\n    "Sure."\n  end\n\n  def respond_to_shout\n    'Woah, chill out!'\n  end\n\n  def respond_to_silence\n    'Fine. Be that way.'\n  end\nend	\N	\N	0	2	2014-04-28 06:17:42	2014-04-28 06:17:42	295	bob.rb
573	41	d7f692065911f0129bcf3b93	pending	clojure	bob	(ns bob\n\t(:require [clojure.string :as str]))\n\n(defn silence? [input]\n\t(str/blank? input))\n\n(defn shouting? [input]\n\t(and (= input (str/upper-case input))\n\t     (some #(or (Character/isUpperCase %) (Character/isLowerCase %)) input)))\n\n(defn question? [input]\n\t(= \\? (last input)))\n\n(defn response-for [input] \n    (cond \n        (silence? input) "Fine. Be that way!"\n        (shouting? input) "Woah, chill out!"\n        (question? input) "Sure."        \n        :else "Whatever."))	\N	\N	0	1	2014-03-22 15:20:56	2014-03-22 15:20:56	296	bob.clj
574	41	ee05ee182f0afd638f6a18dc	pending	ruby	anagram	class Anagram \n\n  def initialize(input)\n    @input = input.downcase\n    @count = input.length\n  end\n\n  def match(matches)\n    matches.select do |word|\n      has_all_letters word.downcase\n    end\n  end\n\n  def has_all_letters(word)\n    return false if word.length > @count\n    return false if @input == word\n    @input.chars.each do |c|\n      return false if !word.include?(c)\n      word = word.sub(c, '')\n    end\n    true\n  end\nend	\N	\N	0	1	2014-03-19 12:18:43	2014-03-19 12:18:43	297	anagram.rb
575	41	16cd88d915168fdd55f7cf83	pending	python	saddle-points	def scanrow(matrix, ix):\n\trow = matrix[ix]\n\tmax_v = row[0]\n\tpoints = [ tuple([ ix, 0 ]) ]\n\tfor iy in range(1, len(row)):\n\t\tif row[iy] > max_v:\n\t\t\tmax_v = row[iy]\n\t\t\tpoints = [ tuple([ ix, iy ]) ]\n\t\telif row[iy] == max_v:\n\t\t\tpoints.append(tuple([ ix, iy ]))\n\treturn points\n\ndef scancol(matrix, point):\n\tpix = point[0]\n\tpiy = point[1]\n\tp_val = matrix[pix][piy]\n\n\tfor ix in range(0, len(matrix)):\n\t\tif ix == pix:\n\t\t\tcontinue\n\t\tif matrix[ix][piy] < p_val:\n\t\t\treturn False\n\treturn True\n\ndef saddle_points(matrix):\n\tout = set()\n\tif len(matrix) == 0:\n\t\treturn out\n\trow_len = len(matrix[0])\n\tfor ix in range(0, len(matrix)):\n\t\tif row_len != len(matrix[ix]):\n\t\t\traise ValueError('irregular matrix')\n\tfor ix in range(0, len(matrix)):\n\t\trow_set = scanrow(matrix, ix)\n\t\tfor point in row_set:\n\t\t\tif scancol(matrix, point):\n\t\t\t\tout.add(point)\n\treturn out	\N	\N	0	1	2014-03-18 12:27:42	2014-03-18 12:27:42	298	saddle_points.py
576	41	fefe552dd207ef02ab12aee4	pending	javascript	wordy	var ArgumentError = function(){\n  return 'quit trying to break me'\n}\n\n\nvar WordProblem = function(question){\n  var that = this;\n  var question = question.slice(0, question.length - 1)\n  var result;\n\n  this.numSet = [];\n  this.splitQuestion = question.split(' ')\n\n\n\n  this.splitQuestion.forEach(function(item){\n    if(parseInt(item) || item === 'plus' || item === 'minus' || item === 'multiplied' || item === 'divided'){\n      if(parseInt(item)){\n        that.numSet.push(parseInt(item));\n      } else {\n        that.numSet.push(item);\n      }\n\n    }\n  })\n\n  console.log(this.numSet)\n  for(var i = 0; i < this.numSet.length - 1; i = i+2){\n    console.log(this.numSet[i+1])\n    if(this.numSet[i+1] === 'plus'){\n      if(result){\n        result = result + this.numSet[i+2]\n      } else {\n        result = this.numSet[i] + this.numSet[i+2]\n      }\n    } else if (this.numSet[i+1] === 'minus'){\n       if(result){\n        result = result - this.numSet[i+2]\n      } else {\n        result = this.numSet[i] - this.numSet[i+2]\n      }\n    } else if (this.numSet[i+1] === 'divided'){\n      if(result){\n        result = result / this.numSet[i+2]\n      } else {\n        result = this.numSet[i]/this.numSet[i+2]\n      }\n    } else if (this.numSet[i+1] === 'multiplied'){\n      if(result){\n        result = result * this.numSet[i+2]\n      } else {\n        result = this.numSet[i] * this.numSet[i+2]\n      }\n    }\n\n  }\n\n  this.answer = function(){\n    if(this.numSet.length < 3){\n      throw new ArgumentError\n    } else {\n    return result\n    }\n  }\n\n}	\N	\N	0	1	2014-03-31 11:19:43	2014-03-31 11:19:43	299	wordyTest.js
577	41	3bf88eff8e01a75d7eba8329	superseded	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  defp count([word | words], dict) do\n    dict = Dict.update(dict, word, 1, fn(val) -> val + 1 end)\n    count(words, dict)\n  end\n\n  defp count([], dict) do\n    dict\n  end\n\n  defp words(phrase) do\n    List.flatten(Regex.scan(%r{\\w+}, String.downcase(phrase)))\n  end\nend	\N	\N	0	2	2014-03-23 19:28:47	2014-03-23 19:28:47	300	word-count.exs
578	41	d40bd4b3e1e04e7fc4804647	superseded	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  def count([word | words], dict) do\n    dict = Dict.update(dict, word, 1, fn(val) -> val + 1 end)\n    count(words, dict)\n  end\n\n  def count([], dict) do\n    dict\n  end\n\n  defp words(phrase) do\n    List.flatten(Regex.scan(%r{\\w+}, String.downcase(phrase)))\n  end\nend	\N	\N	0	1	2014-05-25 22:42:43	2014-05-25 22:42:43	300	word-count.exs
579	41	2f7a0a9a781d9fa2f3ab4f2e	superseded	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  defp count([], dict) do\n    dict\n  end\n\n  defp count([word | words], dict) do\n    dict = Dict.update(dict, word, 1, fn(val) -> val + 1 end)\n    count(words, dict)\n  end\n\n  defp words(phrase) do\n    Regex.scan(%r{\\w+}, String.downcase(phrase)) |> List.flatten\n  end\nend	\N	\N	0	3	2014-06-30 11:48:58	2014-06-30 11:48:58	300	word-count.exs
580	41	2e4d1d082cee5e1818a08b73	pending	elixir	word-count	defmodule Words do\n  def count(phrase) do\n    count(words(phrase), HashDict.new)\n  end\n\n  defp count([], dict) do\n    dict\n  end\n\n  defp count([word | words], dict) do\n    count(words, Dict.update(dict, word, 1, &inc/1))\n  end\n\n  defp inc(val) do\n    val + 1\n  end\n\n  defp words(phrase) do\n    Regex.scan(%r{\\w+}, String.downcase(phrase)) |> List.concat\n  end\nend	\N	\N	0	4	2014-07-08 06:05:20	2014-07-08 06:05:20	300	word-count.exs
581	41	514dcecb77e2d18d51716ebe	pending	ruby	hamming	class Hamming\r\n\r\n\tdef self.compute(str1, str2)\r\n\t\ti = 0\r\n\t\tmin_len = [str1.length, str2.length].min\r\n\t\tfor j in 0..(min_len-1)\r\n\t\t\tif str1[j] != str2[j]\r\n\t\t\t\ti = i + 1\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\treturn i\r\n\tend\r\n\r\nend	\N	\N	0	1	2014-05-23 01:42:24	2014-05-23 01:42:24	301	hamming.rb
582	41	f78b96d9d039d041e5799076	superseded	scala	nucleotide-count	class DNA(nucleotides: String) {\n  nucleotides.map {\n    _ match {\n      case 'A' | 'C' | 'T' | 'G' =>\n      case _ => throw new IllegalArgumentException\n    }\n  }\n\n  def count(nucleotide: Char) = nucleotide match {\n    case 'A' | 'C' | 'T' | 'G' | 'U' => nucleotides.count { _ == nucleotide }\n    case _ => throw new IllegalArgumentException\n  }\n\n  def nucleotideCounts() = {\n    "ACTG".toCharArray.foldLeft(Map[Char, Int]().withDefaultValue(0)) {\n      (memo, nucleotide) => memo + (nucleotide -> count(nucleotide))\n    }\n  }\n}	\N	\N	0	1	2014-04-09 03:26:29	2014-04-09 03:26:29	302	DNA.scala
583	41	7040fc65c4df78d61a19b5ea	pending	scala	nucleotide-count	class DNA(nucleotides: String) {\n  nucleotides.map {\n    _ match {\n      case 'A' | 'C' | 'T' | 'G' =>\n      case _ => throw new IllegalArgumentException\n    }\n  }\n\n  def count(nucleotide: Char) = nucleotide match {\n    case 'A' | 'C' | 'T' | 'G' | 'U' => nucleotides.count { _ == nucleotide }\n    case _ => throw new IllegalArgumentException\n  }\n\n  def nucleotideCounts() = {\n    "ACTG".foldLeft(Map[Char, Int]().withDefaultValue(0)) {\n      (memo, nucleotide) => memo + (nucleotide -> count(nucleotide))\n    }\n  }\n}	\N	\N	0	2	2014-05-01 13:25:34	2014-05-01 13:25:34	302	DNA.scala
584	41	86b0faf6d1fe6d55115ee561	pending	ruby	leap	class Year\n  def self.leap? year\n    return true if year % 400 == 0\n    return false if year % 100 == 0\n    return true if year % 4 == 0\n    false\n  end\nend	\N	\N	0	1	2014-04-17 10:26:58	2014-04-17 10:26:58	303	year.rb
585	41	5c4ba36e06fa90681a94475d	pending	go	nucleotide-count	package dna\n\ntype DNA struct {\n\tsequence string\n}\n\ntype DNAError struct {\n\tnucleotide string\n}\n\nfunc (err *DNAError) Error() string {\n\treturn "Invalid nucleotide: " + err.nucleotide\n}\n\nfunc (dna *DNA) Count(nuc string) (count int, err *DNAError) {\n\tif nuc != "A" && nuc != "C" && nuc != "G" && nuc != "T" {\n\t\terr = new(DNAError)\n\t\terr.nucleotide = nuc\n\t\treturn\n\t}\n\tfor i := 0 ; i < len(dna.sequence) ; i++ {\n\t\tr := dna.sequence[i:i+1]\n\t\tif nuc == r {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn\n}\n\ntype Histogram map[string]int\n\nfunc (dna *DNA) Counts() Histogram {\n\tresult := Histogram{"A": 0, "C": 0, "T": 0, "G": 0}\n\tfor _, n := range(dna.sequence) {\n\t\tsn := string(n)\n\t\tresult[sn] = result[sn] + 1\n\t}\n\treturn result\n}	\N	\N	0	1	2014-03-19 08:07:31	2014-03-19 08:07:31	304	dna.go
586	41	7afdfe43727d88fe649e502b	pending	objective-c	bob	//\n//  Bob.m\n//  ObjCBob\n//\n//  Created by BJ Miller on 6/11/14.\n//  Copyright (c) 2014 Six Five Software, LLC. All rights reserved.\n//\n\n#import "Bob.h"\n\n@implementation Bob\n\n- (NSString *)hey:(NSString *)input\n{\n    NSString *result = @"Whatever.";\n    \n    if ([self isUpperCase:input]) {\n        result = @"Woah, chill out!";\n    } else if ([self isQuestion:input]) {\n        result = @"Sure.";\n    } else if ([self isSilent:input]) {\n        result = @"Fine, be that way.";\n    }\n    \n    return result;\n}\n\n- (BOOL)isUpperCase:(NSString *)input\n{\n    return [input isEqualToString:[input uppercaseString]] && [self containsAtLeastOneCharacter:input];\n}\n\n- (BOOL)isQuestion:(NSString *)input\n{\n    return [input hasSuffix:@"?"];\n}\n\n- (BOOL)isSilent:(NSString *)input\n{\n    NSString *result = [input stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@" "]];\n    return [result isEqualToString:@""];\n}\n\n- (BOOL)containsAtLeastOneCharacter:(NSString *)input\n{\n    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"[A-Za-z]" options:NSRegularExpressionCaseInsensitive error:nil];\n    NSArray *matches = [regex matchesInString:input options:NSMatchingReportCompletion range:NSMakeRange(0, input.length)];\n    if (matches.count != 0) {\n        return YES;\n    }\n    return NO;\n}\n\n@end	\N	\N	0	1	2014-04-12 21:10:06	2014-04-12 21:10:06	305	Bob.m
587	41	513e8a4b2c98c4bdc1a076c0	superseded	clojure	rna-transcription	(ns dna)\r\n\r\n(defn valid-dna-strand?\r\n\t[dna-strand]\r\n\t(= (re-find #"[^GCTA]" dna-strand) nil))\r\n\r\n(defn to-rna-char\r\n\t[dna-char]\r\n  (case dna-char\r\n    "G" "C"\r\n    "C" "G"\r\n    "T" "A"\r\n    "A" "U"))\r\n\r\n(defn to-rna\r\n\t[dna-strand]\r\n  (if (valid-dna-strand? dna-strand)\r\n    (clojure.string/replace dna-strand #"[GCTA]" #(str (to-rna-char %1)))\r\n    (throw (AssertionError. "DNA strand must contain only 'GCTA'-characters."))))\r	\N	\N	0	1	2014-04-07 01:11:10	2014-04-07 01:11:10	306	dna.clj
588	41	327993c81592dfe5e88b259f	pending	clojure	rna-transcription	(ns dna)\n\n(defn transcribe [strand map-function]\n  (apply str (map map-function (seq strand))))\n\n(defn to-rna [dna-strand]\n  (defn complements [dna-nucleotide]\n    (case dna-nucleotide\n      \\G \\C\n      \\C \\G\n      \\T \\A\n      \\A \\U\n      (throw (AssertionError. "Unknown DNA-nucleotide"))))\n  (transcribe dna-strand complements))	\N	\N	0	2	2014-04-30 11:06:55	2014-04-30 11:06:55	306	dna.clj
589	41	0f02c0178271f233f311caac	superseded	ruby	etl	class ETL\n  def initialize\n  end\n\n  def self.transform(old)\n    test = {}\n    old.each do |key,value|\n      value.each do |letter|\n        test[letter.downcase] = key\n      end\n    end\n    test\n  end\n\n\nend	\N	\N	0	1	2014-04-18 17:05:57	2014-04-18 17:05:57	307	etl.rb
590	41	4c9d75b48af05cce50843fb4	pending	ruby	etl	class ETL\n  def self.transform(old)\n    new = {}\n    old.each do |key,value|\n      value.each do |letter|\n        new[letter.downcase] = key\n      end\n    end\n    new\n  end\nend	\N	\N	0	2	2014-05-09 12:36:16	2014-05-09 12:36:16	307	etl.rb
591	41	b04200dbe1e18766cb7143cf	pending	javascript	roman-numerals	DECIMAL_TO_ROMAN = { 1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M' };\n\nfunction roman_in_place(n, place) {\n  switch (n) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n      return DECIMAL_TO_ROMAN[place].repeat(n);\n    case 4:\n      return DECIMAL_TO_ROMAN[place] + DECIMAL_TO_ROMAN[place * 5];\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n      return DECIMAL_TO_ROMAN[place * 5] + DECIMAL_TO_ROMAN[place].repeat(n-5);\n    case 9:\n      return DECIMAL_TO_ROMAN[place] + DECIMAL_TO_ROMAN[place * 10];\n    default:\n      throw new Error('not a decimal number: "' + n + '"');\n  }\n}\n\nfunction find_place(num, place) {\n  return Math.floor(num / place) % 10;\n}\n\nfunction make_reducer_for(n) {\n  return function reducer(memo, place) {\n    var value_for_place = find_place(n, place);\n    return memo + roman_in_place(value_for_place, place);\n  };\n}\n\nfunction convert_to_roman(n) {\n  return [1000, 100, 10, 1].reduce(make_reducer_for(n), '');\n}\n\nif (module) {\n  module.exports = convert_to_roman;\n}\n\nString.prototype.repeat = function(count) {\n  // from http://jsperf.com/faster-string-repeat/12\n  if (count < 1) {\n    return '';\n  }\n  var result = '',\n    pattern = this.valueOf();\n  while (count > 0) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result;\n};	\N	\N	0	1	2014-05-05 09:54:53	2014-05-05 09:54:53	308	roman-numerals.js
592	41	0df20f9d2e1f22c2ac8c58d2	superseded	ruby	beer-song	class Beer\n  MAX_BEERS = 99\n  def sing(first, last = 0)\n    first.downto(last).map do |v|\n      verse(v)\n    end.join("\\n") + "\\n"\n  end\n\n  def verse(num)\n    beers = BeerPluralizer.new(num)\n    first_line(beers) + second_line(beers)\n  end\n\n  private\n\n  def first_line(beers)\n    this_many = beers.this_many\n    "#{this_many.capitalize} of beer on the wall, #{this_many} of beer.\\n"\n  end\n\n  def second_line(beers)\n    if beers.last_one?\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    elsif beers.all_gone?\n      "Go to the store and buy some more, " \\\n        "#{MAX_BEERS} bottles of beer on the wall.\\n"\n    else\n      "Take one down and pass it around, " \\\n        "#{beers.one_fewer} of beer on the wall.\\n"\n    end\n  end\n\n  def last_verse?(num)\n    num.zero?\n  end\nend\n\nclass BeerPluralizer\n  def initialize(count)\n    @count = count\n  end\n\n  def this_many(this_count = count)\n    if this_count.zero?\n      "no more bottles"\n    elsif this_count == 1\n      "1 bottle"\n    else\n      "#{this_count} #{noun}"\n    end\n  end\n\n  def one_fewer\n    this_many(count - 1)\n  end\n\n  def last_one?\n    count == 1\n  end\n\n  def all_gone?\n    count.zero?\n  end\n\n  private\n  attr_reader :count\n  def noun\n    last_one? ? 'bottle' : 'bottles'\n  end\n\n  def pronoun\n    last_one? ? 'it' : 'one'\n  end\nend	\N	\N	0	1	2014-03-20 17:21:55	2014-03-20 17:21:55	309	beer-song.rb
593	41	a396c9d73217ed595509243d	pending	ruby	beer-song	class Beer\n  MAX_BEERS = 99\n  def sing(first, last = 0)\n    first.downto(last).map do |v|\n      verse(v)\n    end.join("\\n") + "\\n"\n  end\n\n  def verse(num)\n    beers = BeerPluralizer.new(num)\n    first_line(beers) + second_line(beers)\n  end\n\n  private\n\n  def first_line(beers)\n    this_many = beers.this_many\n    "#{this_many.capitalize} of beer on the wall, #{this_many} of beer.\\n"\n  end\n\n  def second_line(beers)\n    if beers.all_gone?\n      "Go to the store and buy some more, " \\\n        "#{MAX_BEERS} bottles of beer on the wall.\\n"\n    else\n      this_many_left = this_many_left(beers)\n      "Take #{beers.pronoun} down and pass it around, "\\\n        "#{this_many_left} of beer on the wall.\\n"\n    end\n  end\n\n  def this_many_left(beers)\n    beers.last_one? ? 'no more bottles' : beers.one_fewer\n  end\n\n  def last_verse?(num)\n    num.zero?\n  end\nend\n\nclass BeerPluralizer\n  def initialize(count)\n    @count = count\n  end\n\n  def this_many(this_count = count)\n    if this_count.zero?\n      "no more bottles"\n    elsif this_count == 1\n      "1 bottle"\n    else\n      "#{this_count} #{noun}"\n    end\n  end\n\n  def one_fewer\n    this_many(count - 1)\n  end\n\n  def last_one?\n    count == 1\n  end\n\n  def all_gone?\n    count.zero?\n  end\n\n  def pronoun\n    last_one? ? 'it' : 'one'\n  end\n\n  private\n  attr_reader :count\n  def noun\n    last_one? ? 'bottle' : 'bottles'\n  end\nend	\N	\N	0	2	2014-04-10 02:07:26	2014-04-10 02:07:26	309	beer-song.rb
594	41	101528bbacf7b66982c4bd87	superseded	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey(message) when message === "" do\n\t\t"Fine. Be that way."\n\tend\n\n\tdef hey(message) do\t    \n\t\tcond do \n\t\t\tis_question(message) -> "Sure."\n\t\t\tis_shouting(message) -> "Woah, chill out!"\n\t\t\tis_whatever -> "Whatever."\n\t\tend\t\t\n\tend\n\n\tdefp is_question(message) do\n\t\t String.last(message) === "?"\n\tend\n\n\tdefp is_shouting(message) do \t\t\n\t\t String.contains? message,"O"\n\tend\n\n\tdefp is_whatever do\n\t\ttrue\n\tend\n\nend	\N	\N	0	4	2014-03-17 17:03:57	2014-03-17 17:03:57	310	bob.exs
595	41	b56d18545fa8dd22d5774f56	superseded	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey(message) do\t    \n\t\tcond do \n\t\t\tis_silence?  message  -> "Fine. Be that way."\n\t\t\tis_question? message  -> "Sure."\n\t\t\tis_shouting? message  -> "Woah, chill out!"\n\t\t\tis_whatever? \t\t  -> "Whatever."\n\t\tend\t\t\n\tend\n\n\tdefp is_question?(message) do\n\t\t String.last(message) === "?"\n\tend\n\n\tdefp is_shouting?(message) do \t\t\t\t \n\t\t message  === String.upcase message\t\t\n\tend\n\n\tdefp is_silence?(message) do\n\t\t message === ""\n\tend\n\n\tdefp is_whatever? do\n\t\ttrue\n\tend\n\nend	\N	\N	0	6	2014-03-24 19:16:00	2014-03-24 19:16:00	310	bob.exs
596	41	8b9c16bca8a55368875f1607	superseded	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey(message) do\t    \n\t\tcond do \n\t\t\tsilence?  message  -> "Fine. Be that way."\n\t\t\tquestion? message  -> "Sure."\n\t\t\tshouting? message  -> "Woah, chill out!"\n\t\t\twhatever? message  -> "Whatever."\n\t\tend\t\t\n\tend\n\n\tdefp question?(message) do\n\t\t String.last(message) == "?"\n\tend\n\n\tdefp shouting?(message) do \t\t\t\t \n\t\t message  == String.upcase message\t\t\n\tend\n\n\tdefp silence?(message) do\n\t\t message == ""\n\tend\n\n\tdefp whatever?(message) do\n\t\ttrue\n\tend\n\nend	\N	\N	0	7	2014-04-10 02:42:18	2014-04-10 02:42:18	310	bob.exs
597	41	3c70b2192327df80dc380926	pending	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey message do\t    \n\t\tcond do \n\t\t\tsilence?  message  -> "Fine. Be that way."\n\t\t\tquestion? message  -> "Sure."\n\t\t\tshouting? message  -> "Woah, chill out!"\n\t\t\twhatever? message  -> "Whatever."\n\t\tend\t\t\n\tend\n\n\tdefp question? message do\n\t\t String.last(message) == "?"\n\tend\n\n\tdefp shouting? message do \t\t\t\t \n\t\t message  == String.upcase message\t\t\n\tend\n\n\tdefp silence? message do\n\t\t message == ""\n\tend\n\n\tdefp whatever? message do\n\t\ttrue\n\tend\n\nend	\N	\N	0	8	2014-05-07 21:43:50	2014-05-07 21:43:50	310	bob.exs
598	41	cb289dfe630994b29624890a	superseded	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey(message) do\n\t    \n\t    parsed = HashDict.new [{:response,"Whatever."}]\n\n\t    if message === "" do\n\t\t\tparsed = Dict.put(parsed, :response, "Fine. Be that way.")\n\t\tend\t\t\n\t    if isQuestion(message)  do\n\t    \tparsed = Dict.put(parsed, :response, "Sure.")\n\t\tend\n\t\tif isShout(message) do\n\t\t\tparsed = Dict.put(parsed, :response, "Woah, chill out!")\n\t\tend\n\t\t\n\t\tparsed[:response]\n\t\t\t\n\tend\n\n\tdefp isQuestion(text) do\n\t\t String.last(text) === "?"\n\tend\n\n\tdefp isShout(text) do \n\t\tEnum.count(Regex.scan(%r/[A-Z]/, text)) > 1\n\tend\n\nend	\N	\N	0	2	2014-05-11 12:13:25	2014-05-11 12:13:25	310	bob.exs
599	41	a431cbc24c6aee85f259c075	superseded	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey(message) when message === "" do\n\t\t"Fine. Be that way."\n\tend\n\n\tdef hey(message) do\t    \n\t\tcond do \n\t\t\tis_question(message) -> "Sure."\n\t\t\tis_shouting(message) -> "Woah, chill out!"\n\t\t\ttrue -> "Whatever."\n\t\tend\t\t\n\tend\n\n\tdefp is_question(message) do\n\t\t String.last(message) === "?"\n\tend\n\n\tdefp is_shouting(message) do \n\t\tEnum.count(Regex.scan(%r/[A-Z]/, message)) > 1\n\tend\n\nend	\N	\N	0	3	2014-05-13 17:16:55	2014-05-13 17:16:55	310	bob.exs
600	41	b55946bbb5fef1e2afd169b5	superseded	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey(message) do\t    \n\t\tcond do \n\t\t\tis_silence(message)  -> "Fine. Be that way."\n\t\t\tis_question(message) -> "Sure."\n\t\t\tis_shouting(message) -> "Woah, chill out!"\n\t\t\tis_whatever -> "Whatever."\n\t\tend\t\t\n\tend\n\n\tdefp is_question(message) do\n\t\t String.last(message) === "?"\n\tend\n\n\tdefp is_shouting(message) do \t\t\n\t\t String.contains? message,"O"\n\tend\n\n\tdefp is_silence(message) do\n\t\t message === ""\n\tend\n\n\tdefp is_whatever do\n\t\ttrue\n\tend\n\nend	\N	\N	0	5	2014-06-08 14:46:19	2014-06-08 14:46:19	310	bob.exs
601	41	1c80cf78c29dc2930040b994	superseded	elixir	bob	defmodule  Teenager do\n\t\n\tdef hey(request) do\n\n\t\tparseConversation(request) \n\t\t|> resultAnswered\n\t\t\n\tend\n\n\tdefp parseConversation(request) do\n\t    \n\t    parsed = HashDict.new\n\n\t    if isQuestion(request)  do\n\t    \tparsed = Dict.put(parsed, :response, :question)\n\t\tend\n\t\tif countUpperCase(request) > 1 do\n\t\t\tparsed = Dict.put(parsed, :response, :chillout)\n\t\tend\n\t\tif request == "" do\n\t\t\tparsed = Dict.put(parsed, :response, :silence)\n\t\tend\n\n\t\tparsed\n\t\t\t\n\tend\n\n\tdefp resultAnswered(parsedConversation) do\n\n\t\tcase parsedConversation[:response] do \t\t\t\n\t\t\t:question   -> "Sure."\n\t\t\t:chillout   -> "Woah, chill out!"\n\t\t\t:silence    -> "Fine. Be that way."\n\t\t\t_  \t\t\t-> "Whatever."\n\t\tend\n\tend\n\n\tdefp isQuestion(text) do\n\t\t String.last(text) == "?"\n\tend\n\n\tdefp countUpperCase(text) do \n\t\tscanUpperCases = Regex.scan(%r/[A-Z]/, text)\n\t\tEnum.count scanUpperCases \n\tend\n\nend	\N	\N	0	1	2014-06-16 16:46:51	2014-06-16 16:46:51	310	bob.exs
602	41	5858a65fb26153e6b591e230	pending	python	rna-transcription	class DNA:\n    def __init__(self, s):\n        # There is no copy here, to give the user the option of whether or not \n        # to copy the data. If they do, they copy the data on their end, for \n        # now.\n        self.data = s\n\n    def to_rna(self):\n        return ''.join(map(_nt_dna2rna, self.data))\n\n# Converts a single nucleotide from DNA to RNA.\ndef _nt_dna2rna(n):\n    if n == 'G':\n        return 'C'\n    if n == 'C':\n        return 'G'\n    if n == 'T':\n        return 'A'\n    if n == 'A':\n        return 'U'\n    else:\n        raise ValueError('Input is not a DNA nucleotide.')	\N	\N	0	1	2014-05-23 20:44:02	2014-05-23 20:44:02	311	dna.py
603	41	b2769be144c96bf84f1c6b6c	pending	python	matrix	class Matrix(object):\n    def __init__(self, matrix_str):\n        self.rows = matrix_str.split('\\n')\n        self.columns = []\n        for i in range(len(self.rows)):\n            self.rows[i] = self.rows[i].split(' ')\n            for j in range(len(self.rows[i])):\n                self.rows[i][j] = int(self.rows[i][j])\n                if i == 0:\n                    self.columns.append([])\n                self.columns[j].append(self.rows[i][j])	\N	\N	0	1	2014-04-09 15:33:20	2014-04-09 15:33:20	312	matrix.py
604	41	8abe506426671bc1033c5a2f	pending	javascript	octal	var _ = require('underscore');\nfunction Octal(string){\n  if(string.match(/[^0-8]/)){\n    this.characters = ["0"];\n  } else {\n    this.characters = _.map(\n      string.split("").reverse(),\n      function(e){return parseInt (e,10)})\n  }\n}\n\nOctal.prototype.toDecimal = function() {\n  var sum = 0\n  for (var i=0, l = this.characters.length; i<l; i++){\n    sum += Math.pow(8,i)*this.characters[i]\n  }\n  console.log(this.characters);\n  return sum;\n};\n\nmodule.exports = Octal;	\N	\N	0	1	2014-04-16 22:20:58	2014-04-16 22:20:58	313	octal.js
605	41	6fee38d1d4786fd6f3165dd5	superseded	ruby	word-count	class Phrase\n  attr_reader :word_count\n \n  def initialize(input)\n    @word_count = count_words_in(input)\n  end\n \n  def count_words(input)\n    words(input).each_with_object(Hash.new(0)) do |word, collection|\n      collection[word] += 1\n    end\n  end\n \n  def words(input)\n    input.downcase.scan(/\\w+/)\n  end\nend	\N	\N	0	1	2014-04-21 19:03:41	2014-04-21 19:03:41	314	word-count.rb
606	41	fc75e941d90dbbf990aa8a77	superseded	ruby	word-count	class Phrase\n\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    formatted_input.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word] += 1\n    end\n  end\n\n  def formatted_input\n    input.downcase.scan(/\\w+/)\n  end\n\nend	\N	\N	0	2	2014-05-06 11:05:22	2014-05-06 11:05:22	314	word-count.rb
608	41	280e93d01afa6a06b04ab8b9	pending	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    sounds = ""\n    if self.primeFactor(3, number)\n      sounds = sounds + "Pling"\n    end\n\n    if self.primeFactor(5, number)\n      sounds = sounds + "Plang"\n    end\n\n    if self.primeFactor(7, number)\n      sounds = sounds + "Plong"\n    end\n\n    if (sounds == "")\n      sounds = number.to_s\n    end\n\n    sounds\n  end\n\n  private\n  def self.primeFactor(number, seed)\n    ((seed % number) == 0)\n  end\nend	\N	\N	0	1	2014-05-21 17:02:33	2014-05-21 17:02:33	315	raindrops.rb
609	41	863b489706c734dfdbf0007f	pending	javascript	luhn	function Luhn (num) {\n  var newNum = Math.floor(num / 10);\n  var props = this.generateNum(newNum);\n\n  this.checkDigit = num % 10;\n  // Add check digit to the addends array\n  props.addends.push(this.checkDigit);\n\n  this.checksum = props.checksum + this.checkDigit;\n  this.addends = props.addends;\n  this.valid = this.checksum % 10 === 0 ? true : false;\n}\n\nLuhn.prototype.generateNum = function(num) {\n  var checksum = 0;\n  var addends = [];\n  var numString = num + "";\n  var counter = 0;\n\n  for (var i = numString.length - 1; i >=0; i -= 1) {\n    var digit = parseInt(numString[i]);\n    if (counter % 2 === 0) {\n      digit = digit * 2;\n      digit = digit > 10 ? digit - 9 : digit;\n    }\n    addends.push(digit);\n    checksum += digit;\n    counter++;\n  }\n  addends.reverse();\n  return { checksum: checksum, addends: addends };\n};\n\nLuhn.create = function(num) {\n  var props = Luhn.prototype.generateNum(num);\n  var numString = num + "";\n  var checkDigit = props.checksum % 10;\n  checkDigit = (10 - checkDigit) % 10;\n  numString += checkDigit;\n  return parseInt(numString);\n};	\N	\N	0	1	2014-04-18 09:59:21	2014-04-18 09:59:21	316	luhn_test.js
610	41	0c73331eca3b15147543bf14	pending	haskell	atbash-cipher	module Atbash where\n\nimport Data.Char\nimport Data.List\n\nencode :: String -> String\nencode = intercalate " " . toGroups 5 . map (encodeChar . toLower) . filter isAlphaNum\n\nencodeChar :: Char -> Char\nencodeChar c | isAlpha c = toChar . encode . fromChar $ c\n             | otherwise = c\n    where toChar n = chr $ ord 'a' + n\n          encode n = 25 - n\n          fromChar n = ord n - ord 'a'\n\ntoGroups :: Int -> [a] -> [[a]]\ntoGroups n xs | length xs <= n = [xs]\n              | otherwise      = a:(toGroups n b)\n    where (a, b) = splitAt n xs	\N	\N	0	1	2014-05-06 10:11:49	2014-05-06 10:11:49	317	atbash-cipher.hs
611	41	ad909f34a9e3aed0d44d06dc	superseded	haskell	robot-name	module Robot\n    ( robotName\n    , mkRobot\n    , resetName\n    ) where\n\nimport           Control.Applicative\nimport           Control.Monad       (replicateM)\nimport           Data.IORef\nimport           System.Random       (randomRIO)\n\ntype Name = String\ntype Robot = IORef Name\n\nmkRobot :: IO Robot\nmkRobot = mkName >>= newIORef \n\nmkName :: IO Name\nmkName = liftA2 (++) mkPrefix mkSuffix\n  where\n    mkPrefix :: IO String\n    mkPrefix = replicateM 2 $ randomRIO ('A', 'Z')\n\n    -- Easier than generating a number between 1 and 999\n    -- because we don't have to pad <100 with zeroes.\n    mkSuffix :: IO String\n    mkSuffix = replicateM 3 $ randomRIO ('1', '0')\n\nresetName :: Robot -> IO ()\nresetName r = writeIORef r ""\n\nrobotName :: Robot -> IO Name\nrobotName r = do\n    n <- readIORef r \n    case n of \n        "" -> do\n            mkName >>= writeIORef r\n            readIORef r\n        _  ->\n            return n\n        	\N	\N	0	1	2014-04-18 13:43:41	2014-04-18 13:43:41	318	robot-name.hs
612	41	8684c3a8a759b173d3549772	pending	haskell	robot-name	module Robot\n    ( robotName\n    , mkRobot\n    , resetName\n    ) where\n\nimport           Control.Applicative\nimport           Control.Monad       (replicateM)\nimport           Data.IORef\nimport           System.Random       (randomRIO)\n\ntype Name = String\ntype Robot = IORef Name\n\nmkRobot :: IO Robot\nmkRobot = mkName >>= newIORef \n\nmkName :: IO Name\nmkName = liftA2 (++) mkPrefix mkSuffix\n  where\n    mkPrefix :: IO String\n    mkPrefix = replicateM 2 $ randomRIO ('A', 'Z')\n\n    -- Easier than generating a number between 1 and 999\n    -- because we don't have to pad <100 with zeroes.\n    mkSuffix :: IO String\n    mkSuffix = replicateM 3 $ randomRIO ('1', '0')\n\nresetName :: Robot -> IO ()\nresetName r = writeIORef r ""\n\nrobotName :: Robot -> IO Name\nrobotName r = do\n    n <- readIORef r \n    case n of \n        -- I really don't like using if-then-else because of the way it has \n        -- to be indented and so on, so I prefer the case expression in\n        -- most cases.\n        "" -> do\n            mkName >>= writeIORef r\n            readIORef r\n        _  ->\n            return n\n        	\N	\N	0	2	2014-06-02 18:25:54	2014-06-02 18:25:54	318	robot-name.hs
613	41	24866fefa00fd61c5f2fa514	pending	javascript	rna-transcription	"use strict";\n\nvar DNA = function (sequence) {\n  this.sequence = sequence;\n};\n\nDNA.prototype.toRNA = function () {\n  return this.sequence.replace(/T/g, "U");\n};\n\nmodule.exports = DNA;	\N	\N	0	1	2014-07-16 11:53:22	2014-07-16 11:53:22	319	rna-transcription.js
614	41	79b34b0d29f17739bdae7382	pending	coffeescript	palindrome-products	class Palindromes\n  constructor: (range) ->\n    @minFactor = range.minFactor || 0\n    @maxFactor = range.maxFactor\n    @palindromes = []\n\n  generate: ->\n    for factor1 in [@minFactor..@maxFactor]\n      for factor2 in [@minFactor..@maxFactor]\n        product = factor1 * factor2\n        if isPalindrome(product)\n          @palindromes.push(new Palindrome(factor1, factor2))\n\n  largest: ->\n    @mostExtreme(@palindromes, greaterThan)\n\n  smallest: ->\n    @mostExtreme(@palindromes, lessThan)\n\n  greaterThan = (x, y) ->\n    x > y\n\n  lessThan = (x, y) ->\n    x < y\n\n  mostExtreme: (array, comparator) ->\n    values = @palindromes.map (palindrome) ->\n      palindrome.value\n    @palindromes.reduce (previousExtreme, palindrome) ->\n      if comparator(palindrome.value, previousExtreme.value)\n        palindrome\n      else\n        previousExtreme\n    , @palindromes[0]\n\n  isPalindrome = (n) ->\n    n.toString() == n.toString().split("").reverse().join("")\n\nclass Palindrome\n  constructor: (factor1, factor2) ->\n    @value = factor1 * factor2\n    @factors = [[ factor1, factor2 ]]\n\nmodule.exports.Palindromes = Palindromes\nmodule.exports.Palindrome = Palindrome	\N	\N	0	1	2014-04-20 03:28:25	2014-04-20 03:28:25	320	palindrome.coffee
615	41	2007d1a9530231a1cb185cdb	pending	javascript	nucleotide-count	var DNA_NUCLEOTIDES = "ATCG";\nvar ALL_NUCLEOTIDES = DNA_NUCLEOTIDES + "U";\nvar reduce = Array.prototype.reduce;\n\n\nfunction DNA(sequence) {\n  this.nucleotideCounts = nucleotideCounts(sequence);\n}\n\nDNA.prototype.count = function(nucleotide) {\n  validateNucleotide(nucleotide);\n  return this.nucleotideCounts[nucleotide] || 0;\n};\n\nmodule.exports = DNA;\n\n\nfunction nucleotideCounts(sequence) {\n  return reduce.call(sequence, function(counts, nucleotide) {\n    if(counts[nucleotide] >= 0) {\n      counts[nucleotide]++;\n    }\n    return counts;\n  }, initialCounts());\n}\n\nfunction initialCounts() {\n  return reduce.call(DNA_NUCLEOTIDES, function(counts, nucleotide) {\n    counts[nucleotide] = 0;\n    return counts;\n  }, {});\n}\n\nfunction validateNucleotide(letter) {\n  if(!isValidNucleotide(letter)) {\n    throw new Error("Invalid Nucleotide");\n  }\n}\n\nfunction isValidNucleotide(letter) {\n  return ALL_NUCLEOTIDES.indexOf(letter) != -1;\n}	\N	\N	0	3	2014-04-05 05:45:11	2014-04-05 05:45:11	321	nucleotide.js
616	41	65c29492fbf684bac71ac8cf	superseded	javascript	nucleotide-count	function DNA(sequence) {\n\n  var ALL_NUCLEOTIDES = [ "A", "T", "C", "G", "U" ];\n\n  return {\n    count: count,\n    nucleotideCounts: {\n      A: count("A"),\n      T: count("T"),\n      C: count("C"),\n      G: count("G")\n    },\n  };\n\n  function count(nucleotide) {\n    validateNucleotide(nucleotide);\n    return nucleotides().filter(function(n) {\n      return n === nucleotide;\n    }).length;\n  }\n\n  function validateNucleotide(letter) {\n    if(!isValidNucleotide(letter)) {\n      throw new Error("Invalid Nucleotide");\n    }\n  }\n\n  function isValidNucleotide(letter) {\n    return ALL_NUCLEOTIDES.some(function(n) {\n      return n === letter;\n    });\n  }\n\n  function nucleotides() {\n    return sequence.split("");\n  }\n\n}\n\nmodule.exports = DNA;	\N	\N	0	1	2014-04-22 13:51:25	2014-04-22 13:51:25	321	nucleotide-count.js
617	41	4c49a41e3a60a3c73fe4e156	superseded	javascript	nucleotide-count	function DNA(sequence) {\n\n  var ALL_NUCLEOTIDES = [ "A", "T", "C", "G", "U" ];\n\n  return {\n    count: count,\n    nucleotideCounts: {\n      A: count("A"),\n      T: count("T"),\n      C: count("C"),\n      G: count("G")\n    },\n  };\n\n  function count(nucleotide) {\n    validateNucleotide(nucleotide);\n    return nucleotides().filter(function(n) {\n      return n === nucleotide;\n    }).length;\n  }\n\n  function validateNucleotide(letter) {\n    if(!isValidNucleotide(letter)) {\n      throw new Error("Invalid Nucleotide");\n    }\n  }\n\n  function isValidNucleotide(letter) {\n    return ALL_NUCLEOTIDES.indexOf(letter) != -1;\n  }\n\n  function nucleotides() {\n    return sequence.split("");\n  }\n\n}\n\nmodule.exports = DNA;	\N	\N	0	2	2014-05-08 03:14:51	2014-05-08 03:14:51	321	nucleotide-count.js
618	41	cedb68e929651374fa6ab891	pending	ruby	nucleotide-count	class DNA\n  def initialize(dna_string)\n    validate_dna(dna_string)\n    @counts = NucleotideCount.new(dna_string)\n  end\n\n  def count(nucleotide)\n    @counts.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    dna_counts = Hash.new(0)\n    dna_counts['A']=@counts.count('A')\n    dna_counts['T']=@counts.count('T')\n    dna_counts['C']=@counts.count('C')\n    dna_counts['G']=@counts.count('G')\n    dna_counts\n  end\n\n  private\n  def validate_dna(nucleotide_chain)\n    if nucleotide_chain =~ /[^GACT]/\n      throw :ArgumentError\n    end\n  end\nend\n\nclass NucleotideCount\n  def initialize(nucleotide_chain)\n    @nucleotide_string = nucleotide_chain\n  end\n\n  def count(nucleotide)\n    validate_nucleotide(nucleotide)\n    @nucleotide_string.count(nucleotide)\n  end\n\n  private\n  def validate_nucleotide(nucleotide)\n    throw :ArgumentError unless nucleotide =~ /[GACTU]/\n  end\nend	\N	\N	0	3	2014-05-28 20:35:52	2014-05-28 20:35:52	322	nucleotide-count.rb
619	41	1d74df9e065fa53859b99eb6	superseded	ruby	nucleotide-count	class DNA\n  def initialize(dna_string)\n    validate_dna(dna_string)\n    @counts = NucleotideCount.new(dna_string)\n  end\n\n  def count(nucleotide)\n    @counts.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    dna_counts = Hash.new(0)\n    dna_counts['A']=@counts.count('A')\n    dna_counts['T']=@counts.count('T')\n    dna_counts['C']=@counts.count('C')\n    dna_counts['G']=@counts.count('G')\n    dna_counts\n  end\n\n\n  private\n  def validate_dna(possible_dna_sequence)\n    if possible_dna_sequence =~ /[^GACT]/\n      throw :ArgumentError\n    end\n  end\nend\n\nclass NucleotideCount\n  def initialize(nucleotide_chain)\n    @nucleotide_counts = Hash.new(0)\n    @nucleotide_counts['A']=nucleotide_chain.count('A')\n    @nucleotide_counts['T']=nucleotide_chain.count('T')\n    @nucleotide_counts['C']=nucleotide_chain.count('C')\n    @nucleotide_counts['G']=nucleotide_chain.count('G')\n    @nucleotide_counts['U']=nucleotide_chain.count('U')\n  end\n\n  def count(nucleotide)\n    validate_nucleotide(nucleotide)\n    @nucleotide_counts[nucleotide]\n  end\n\n  private\n  def validate_nucleotide(nucleotide)\n    throw :ArgumentError unless nucleotide =~ /[GACTU]/\n  end\nend	\N	\N	0	1	2014-06-18 18:06:55	2014-06-18 18:06:55	322	nucleotide-count.rb
620	41	a56207afde42b7aa550965e4	superseded	ruby	nucleotide-count	class DNA\n  def initialize(dna_string)\n    validate_dna(dna_string)\n    @counts = NucleotideCount.new(dna_string)\n  end\n\n  def count(nucleotide)\n    @counts.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    @counts.dna_counts()\n  end\n\n  private\n  def validate_dna(nucleotide_chain)\n    if nucleotide_chain =~ /[^GACT]/\n      throw :ArgumentError\n    end\n  end\nend\n\nclass NucleotideCount\n  def initialize(nucleotide_chain)\n    @nucleotide_string = nucleotide_chain\n  end\n\n  def count(nucleotide)\n    validate_nucleotide(nucleotide)\n    @nucleotide_string.count(nucleotide)\n  end\n\n  def dna_counts\n    dna_counts = Hash.new(0)\n    dna_counts['A']=count('A')\n    dna_counts['T']=count('T')\n    dna_counts['C']=count('C')\n    dna_counts['G']=count('G')\n    dna_counts\n  end\n\n  private\n  def validate_nucleotide(nucleotide)\n    throw :ArgumentError unless nucleotide =~ /[GACTU]/\n  end\nend	\N	\N	0	2	2014-07-15 22:00:46	2014-07-15 22:00:46	322	nucleotide-count.rb
621	41	e9c052505ea52b1a35d2603c	pending	go	hamming	package hamming\n\nfunc Distance(strandA, strandB string) int {\n  distance := 0\n\n  if len(strandA) > len(strandB) {\n    strandA, strandB = strandB, strandA\n  }\n\n  for k := 0; k < len(strandA); k++ {\n    if strandA[k] != strandB[k] {\n      distance += 1\n    }\n  }\n\n  return distance\n}	\N	\N	0	5	2014-04-23 11:59:46	2014-04-23 11:59:46	323	hamming.go
622	41	508e749c74e1d38eeb83e4bb	superseded	go	hamming	package hamming\n\nfunc Distance(dnaStrandA, dnaStrandB string) int {\n  computedDistance := 0\n  calculatedLength := 0\n\n  if len(dnaStrandA) >= len(dnaStrandB) {\n    calculatedLength = len(dnaStrandB)\n  } else if len(dnaStrandB) > len(dnaStrandA) {\n    calculatedLength = len(dnaStrandA)\n  }\n\n  for k := 0; k < calculatedLength; k++ {\n    if dnaStrandA[k] != dnaStrandB[k] {\n      computedDistance += 1\n    }\n  }\n\n  return computedDistance\n}	\N	\N	0	2	2014-05-06 23:09:38	2014-05-06 23:09:38	323	hamming.go
623	41	fc6a0c80cdb077e4d3369c07	superseded	go	hamming	package hamming\n\nfunc Distance(dnaStrandA, dnaStrandB string) int {\n  computedDistance := 0\n  calculatedLength := 0\n\n  switch {\n  case len(dnaStrandA) > len(dnaStrandB):\n    calculatedLength = len(dnaStrandB)\n  case len(dnaStrandB) > len(dnaStrandA):\n    calculatedLength = len(dnaStrandA)\n  default:\n    calculatedLength = len(dnaStrandA)\n  }\n\n  for k := 0; k < calculatedLength; k++ {\n    if dnaStrandA[k] != dnaStrandB[k] {\n      computedDistance += 1\n    }\n  }\n\n  return computedDistance\n}	\N	\N	0	1	2014-06-15 17:07:47	2014-06-15 17:07:47	323	hamming.go
624	41	0ad70e9c343582673c01747d	superseded	go	hamming	package hamming\n\nfunc Distance(dnaStrandA, dnaStrandB string) int {\n  computedDistance := 0\n\n  if len(dnaStrandA) > len(dnaStrandB) {\n    dnaStrandA, dnaStrandB = dnaStrandB, dnaStrandA\n  }\n\n  for k := 0; k < len(dnaStrandA); k++ {\n    if dnaStrandA[k] != dnaStrandB[k] {\n      computedDistance += 1\n    }\n  }\n\n  return computedDistance\n}	\N	\N	0	3	2014-06-15 20:00:42	2014-06-15 20:00:42	323	hamming.go
625	41	6cb9a7d5ca826e4a0a8b98e0	superseded	go	hamming	package hamming\n\nfunc Distance(strandA, strandB string) int {\n  distance := 0\n\n  if len(strandA) > len(strandB) {\n    strandA, strandB = strandB, strandA\n  }\n\n  for k := 0; k < len(strandB); k++ {\n    if strandA[k] != strandB[k] {\n      distance += 1\n    }\n  }\n\n  return distance\n}	\N	\N	0	4	2014-06-29 14:00:20	2014-06-29 14:00:20	323	hamming.go
626	41	a0dee8a5286bd4efe3691d20	superseded	ruby	grade-school	class School\n\tattr_reader :students\n\n\tdef initialize\n\t\t@students = []\n\tend\n\n\tdef add(name, grade)\n\t\t@students << Student.new(name, grade)\n\tend\n\n\tdef to_hash\n\t\tstudentshash = {}\n\t\tgradelevels.each do |grade|\n\t\t\tstudentshash[grade] = []\n\t\tend\n\t\tstudents.each do |student|\n\t\t\tstudentshash[student.grade] << student.name\n\t\tend\n\t\tstudentshash.each do |grade, students|\n\t\t\tstudentshash[grade] = students.sort\n\t\tend\n\tend\n\n\tdef grade(gradelevel)\n\t\tstudents.select {|s| s.grade == gradelevel}.map{|s| s.name}.sort\n\tend\n\n\tprivate\n\tdef gradelevels\n\t\tstudents.map {|s| s.grade}.uniq.sort\n\tend\nend\n\nclass Student\n\tattr_reader :name, :grade\n\n\tdef initialize(name,grade)\n\t\t@name = name\n\t\t@grade = grade\n\tend\n\nend	\N	\N	0	1	2014-04-22 12:08:34	2014-04-22 12:08:34	324	school.rb
627	41	88625e063b0da51574c156a9	superseded	ruby	grade-school	class School\n\tattr_reader :students\n\n\tdef initialize\n\t\t@students = []\n\tend\n\n\tdef add(name, grade)\n\t\t@students << Student.new(name, grade)\n\tend\n\n\tdef to_hash\n\t\tstudentshash = {}\n\t\t\n\t\t#fill the hash with empty arrays for each grade\n\t\tgradelevels.each { |grade| studentshash[grade] = [] }\n\n\t\t#put each student's name in the appropriate grade level\n\t\tstudents.each do |student|\n\t\t\tstudentshash[student.grade] << student.name\n\t\tend\n\n\t\t#sort the student name arrays\n\t\tstudentshash.each do |grade, students|\n\t\t\tstudentshash[grade] = students.sort\n\t\tend\n\tend\n\n\tdef grade(gradelevel)\n\t\tstudents.select {|s| s.grade == gradelevel}.map{|s| s.name}.sort\n\tend\n\n\tprivate\n\tdef gradelevels\n\t\tstudents.map {|s| s.grade}.uniq.sort\n\tend\nend\n\nclass Student\n\tattr_reader :name, :grade\n\n\tdef initialize(name,grade)\n\t\t@name = name\n\t\t@grade = grade\n\tend\nend	\N	\N	0	2	2014-04-23 05:15:52	2014-04-23 05:15:52	324	school.rb
628	41	db5eeadd4d560b4f6a18b19d	pending	ruby	grade-school	class School\n\tattr_reader :students\n\n\tdef initialize\n\t\t@students = []\n\tend\n\n\tdef add(name, grade)\n\t\t@students << Student.new(name, grade)\n\tend\n\n\tdef to_hash\n\t\tstudentshash = {}\n\t\t\n\t\t#fill studentshash with an empty array for each grade\n\t\tgradelevels.each { |grade| studentshash[grade] = [] }\n\n\t\t#put each student's name in the appropriate grade level\n\t\tstudents.each do |student|\n\t\t\tstudentshash[student.grade] << student.name\n\t\tend\n\t\tstudentshash\n\tend\n\n\tdef grade(gradelevel)\n\t\tstudents.select {|s| s.grade == gradelevel}.map{|s| s.name}\n\tend\n\n\tdef students\n\t\t@students.sort_by { |s| [s.grade, s.name] }\n\tend\n\n\tprivate\n\tdef gradelevels\n\t\tstudents.map {|s| s.grade}.uniq\n\tend\nend\n\n\nclass Student\n\tattr_reader :name, :grade\n\n\tdef initialize(name,grade)\n\t\t@name = name\n\t\t@grade = grade\n\tend\nend	\N	\N	0	4	2014-05-10 14:23:07	2014-05-10 14:23:07	324	school.rb
629	41	c63e1814ed42f80d2112c6db	superseded	ruby	grade-school	class School\n\tattr_reader :students\n\n\tdef initialize\n\t\t@students = []\n\tend\n\n\tdef add(name, grade)\n\t\t@students << Student.new(name, grade)\n\tend\n\n\tdef to_hash\n\t\tstudentshash = {}\n\t\t\n\t\t#fill the hash with empty arrays for each grade\n\t\tgradelevels.each { |grade| studentshash[grade] = [] }\n\n\t\t#put each student's name in the appropriate grade level\n\t\tstudents.each do |student|\n\t\t\tstudentshash[student.grade] << student.name\n\t\tend\n\t\tstudentshash\n\tend\n\n\tdef grade(gradelevel)\n\t\tstudents.select {|s| s.grade == gradelevel}.map{|s| s.name}\n\tend\n\n\tdef students\n\t\t@students.sort_by { |s| [s.grade, s.name] }\n\tend\n\n\tprivate\n\tdef gradelevels\n\t\tstudents.map {|s| s.grade}.uniq\n\tend\nend\n\nclass Student\n\tattr_reader :name, :grade\n\n\tdef initialize(name,grade)\n\t\t@name = name\n\t\t@grade = grade\n\tend\nend	\N	\N	0	3	2014-05-28 06:22:42	2014-05-28 06:22:42	324	school.rb
630	41	ee90807c9e252b200e4b1c03	pending	python	phone-number	import string\n\nclass Phone:\n\tdef __init__(self, nbr):\n\t\tnbr = nbr.translate(None, string.punctuation+string.whitespace)\n\t\tif len(nbr) == 11 and nbr[0] == '1':\n\t\t\tnbr = nbr[1:]\n\t\telif len(nbr) != 10:\n\t\t\tnbr = "0000000000"\n\t\tself.number = nbr\n\t\t\n\tdef pretty(self):\n\t\treturn '({code}) {central}-{nbr}'.format(code=self.number[:3], \n\t\t\tcentral=self.number[3:6], nbr=self.number[6:])\n\t\t\n\tdef area_code(self):\n\t\treturn self.number[:3]	\N	\N	0	1	2014-05-15 17:00:51	2014-05-15 17:00:51	325	phone.py
631	26	e2abc6f61d699ce2c069cac6	superseded	python	point-mutations	from itertools import izip\n\nclass DNA:\n  def __init__(self, sequence):\n    self.sequence = sequence\n\n  def hamming_distance(self, other_sequence):\n    return reduce(self._hamming_distance_accumulator, izip(self.sequence, other_sequence), 0)\n\n  def _hamming_distance_accumulator(self, distance, pair_of_nucleotides):\n    n1, n2 = pair_of_nucleotides\n    if n1 == n2:\n      return distance\n    else:\n      return distance + 1	\N	\N	0	1	2014-06-30 07:20:36	2014-06-30 07:20:36	326	point-mutations.py
632	26	07f1859579a00b9a851efcea	pending	python	point-mutations	from itertools import izip\n\nclass DNA:\n  def __init__(self, sequence):\n    self.sequence = sequence\n\n  def hamming_distance(self, other_sequence):\n    return len([True for (n1, n2) in izip(self.sequence, other_sequence) if n1 != n2])	\N	\N	0	2	2014-07-18 12:03:23	2014-07-18 12:03:23	326	point-mutations.py
633	26	a5297922ab9f589b4854234c	pending	ruby	rna-transcription	class Complement\r\n\t@@h1 = {'G'=>'C','C'=>'G','T'=>'A','A'=>'U'}\r\n\t@@h2 = @@h1.invert\r\n\t\r\n\tdef self.of_dna(x) transcribe(x, @@h1) end\r\n\tdef self.of_rna(x) transcribe(x, @@h2) end\r\n\tdef self.transcribe(x, h)\r\n\t\tx.split('').inject('') { |result, c| result + h[c] }\r\n\tend\r\nend	\N	\N	0	2	2014-06-30 22:46:23	2014-06-30 22:46:23	327	Complement.rb
634	26	7bf817ec47ed2a1cf40f57c7	superseded	ruby	rna-transcription	class Complement\r\n\t@@h = {'G'=>'C','C'=>'G','T'=>'A','A'=>'U'}\r\n\t\r\n\tdef self.of_dna(x)\r\n\t\trna = ''\r\n\t\tx.each_char { |c| rna += @@h[c] }\r\n\t\trna\r\n\tend\r\n\tdef self.of_rna(x)\r\n\t\tdna = ''\r\n\t\thh = @@h.invert\r\n\t\tx.each_char { |c| dna += hh[c] }\r\n\t\tdna\r\n\tend\r\nend	\N	\N	0	1	2014-07-01 12:20:59	2014-07-01 12:20:59	327	Complement.rb
635	26	e56ce6c7b298bf840d703db1	superseded	haskell	scrabble-score	module Scrabble (scoreLetter, scoreWord) where\n\nimport Data.Char (toUpper)\n\nscoreLetter :: Char -> Int\nscoreLetter letter\n  | matchesAnyOf "AEIOULNRST" = 1\n  | matchesAnyOf "DG" = 2\n  | matchesAnyOf "BCMP" = 3\n  | matchesAnyOf "FHVWY" = 4\n  | matchesAnyOf "K" = 5\n  | matchesAnyOf "JX" = 8\n  | matchesAnyOf "QZ" = 10\n  where target = toUpper letter\n        matchesAnyOf = any (==target)\n\nscoreWord :: [Char] -> Int\nscoreWord = foldl (\\total x -> total + scoreLetter x) 0 	\N	\N	0	1	2014-07-01 21:19:34	2014-07-01 21:19:34	328	scrabble-score.hs
636	26	17ccfb8da7e7754f934af65f	pending	haskell	scrabble-score	module Scrabble (scoreLetter, scoreWord) where\n\nimport Data.Array (listArray, (!))\nimport Data.Char (toUpper)\n\nscoreLetter :: Char -> Int\nscoreLetter letter = arr ! toUpper letter\n  where arr = listArray ('A','Z') [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]\n\nscoreWord :: [Char] -> Int\nscoreWord = sum . map scoreLetter	\N	\N	0	2	2014-07-04 22:02:54	2014-07-04 22:02:54	328	scrabble-score.hs
637	26	ec8360513a2de7034dbec92d	pending	haskell	bob	module Bob where\nimport Data.Char\n\nresponseFor sentence\n  | silence   = "Fine. Be that way!"\n  | shout     = "Woah, chill out!"\n  | question  = "Sure."\n  | otherwise = "Whatever."\n  where\n    silence  = all isSpace sentence\n    shout    = any isAlpha sentence && map toUpper sentence == sentence\n    question = last sentence == '?'	\N	\N	0	3	2014-06-29 15:36:36	2014-06-29 15:36:36	329	bob.hs
640	26	605f7981929bc1f5e02f2771	pending	javascript	beer-song	var Beer = function() {\n  var _zero_bottles = "No more bottles of beer on the wall, no more bottles of beer.\\n" +\n              "Go to the store and buy some more, 99 bottles of beer on the wall.\\n";\n\n  var _one_bottle = "1 bottle of beer on the wall, 1 bottle of beer.\\n" +\n            "Take it down and pass it around, no more bottles of beer on the wall.\\n";\n\n  var _two_bottles = "2 bottles of beer on the wall, 2 bottles of beer.\\n" +\n            "Take one down and pass it around, 1 bottle of beer on the wall.\\n";\n\n  function _more_than_two(num) {\n    return num +" bottles of beer on the wall, " + num +\n          " bottles of beer.\\nTake one down and pass it around, " + (num - 1) +\n          " bottles of beer on the wall.\\n";\n  }\n\n  var _responses = { 0: _zero_bottles, 1: _one_bottle, 2: _two_bottles }\n\n  return {\n    verse: function(num) {;\n      if (_responses[num] ===  undefined) {\n        return _more_than_two(num);\n      } else {\n        return _responses[num];\n      }\n    },\n\n    sing: function(start, end) {\n      end = end || 0;\n            // ^ if no end is specified, sing repeats verses to 0 bottles of beer on the wall\n      var verses = []\n      for (var i = start; i >= end; i--) {\n        verses.push(this.verse(i));\n      };\n      return verses.join("\\n");\n    }\n  };\n\n}();	\N	\N	0	1	2014-07-17 15:38:22	2014-07-17 15:38:22	330	beer-song_test.js
641	26	7c924fc1833e4130810d8795	pending	ruby	beer-song	class BeerSong\n  def verse(bottle_count)\n    BottleVerse.new(bottle_count).to_s\n  end\n\n  def verses(start, finish)\n    start.downto(finish).inject(""){|song_verse, bottle_count| "#{song_verse}#{self.verse(bottle_count)}\\n"}\n  end\n\n  def sing\n    verses(99, 0)\n  end\nend\n\nclass BottleVerse\n  attr_reader :number_of_bottles, :present_bottles, :action_to_take, :remaining_bottles\n\n  BOTTLE_COUNT_TO_PHRASES_MAPPING = Hash.new {|mapping, number| mapping[number] = ["#{number} bottles", "take one down and pass it around", "#{number - 1} bottles"] }\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[2] = ['2 bottles', 'take one down and pass it around', '1 bottle']\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[1] = ['1 bottle', 'take it down and pass it around', 'no more bottles']\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[0] = ['no more bottles', 'go to the store and buy some more', '99 bottles']\n\n\n  def initialize(number_of_bottles)\n    @present_bottles, @action_to_take, @remaining_bottles = BOTTLE_COUNT_TO_PHRASES_MAPPING[number_of_bottles]\n  end\n\n  def to_s\n    "#{present_bottles.capitalize} of beer on the wall, #{present_bottles} of beer.\\n#{action_to_take.capitalize}, #{remaining_bottles} of beer on the wall.\\n"\n  end\nend	\N	\N	0	3	2014-06-30 08:14:29	2014-06-30 08:14:29	331	beer-song.rb
642	26	ae5f870cef0693e6b26a4e06	superseded	ruby	beer-song	class BeerSong\n  def verse(bottle_count)\n    BottleVerse.new(bottle_count).to_s\n  end\n\n  def verses(start, finish)\n    start.downto(finish).inject(""){|song_verse, bottle_count| "#{song_verse}#{self.verse(bottle_count)}\\n"}\n  end\n\n  def sing\n    verses(99, 0)\n  end\nend\n\nclass BottleVerse\n  attr_reader :number_of_bottles, :present_bottles, :action_to_take, :remaining_bottles\n\n  BOTTLE_COUNT_TO_PHRASES_MAPPING = Hash.new {|mapping, number| mapping[number] = ["#{number} bottles", "take one down and pass it around", "#{number - 1} bottles"] }\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[2] = ['2 bottles', 'take one down and pass it around', '1 bottle']\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[1] = ['1 bottle', 'take it down and pass it around', 'no more bottles']\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[0] = ['no more bottles', 'go to the store and buy some more', '99 bottles']\n\n\n  def initialize(number_of_bottles)\n    @present_bottles, @action_to_take, @remaining_bottles = BOTTLE_COUNT_TO_PHRASES_MAPPING[number_of_bottles]\n  end\n\n  def to_s\n    "#{present_bottles.capitalize} of beer on the wall, #{present_bottles} of beer.\\n#{action_to_take.capitalize}, #{remaining_bottles} of beer on the wall.\\n"\n  end\nend	\N	\N	0	1	2014-07-07 14:45:54	2014-07-07 14:45:54	331	beer-song.rb
643	26	bc0559431c6431496f66f994	superseded	ruby	beer-song	class BeerSong\n  def verse(bottle_count)\n    BottleVerse.new(bottle_count).to_s\n  end\n\n  def verses(start, finish)\n    start.downto(finish).each_with_object(""){|bottle_count, song_verse| "#{song_verse}#{self.verse(bottle_count)}\\n"}\n  end\n\n  def sing\n    verses(99, 0)\n  end\nend\n\nclass BottleVerse\n  attr_reader :number_of_bottles, :present_bottles, :action_to_take, :remaining_bottles\n\n  BOTTLE_COUNT_TO_PHRASES_MAPPING = Hash.new {|mapping, number| mapping[number] = ["#{number} bottles", "take one down and pass it around", "#{number - 1} bottles"] }\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[2] = ['2 bottles', 'take one down and pass it around', '1 bottle']\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[1] = ['1 bottle', 'take it down and pass it around', 'no more bottles']\n  BOTTLE_COUNT_TO_PHRASES_MAPPING[0] = ['no more bottles', 'go to the store and buy some more', '99 bottles']\n\n\n  def initialize(number_of_bottles)\n    @present_bottles, @action_to_take, @remaining_bottles = BOTTLE_COUNT_TO_PHRASES_MAPPING[number_of_bottles]\n  end\n\n  def to_s\n    "#{present_bottles.capitalize} of beer on the wall, #{present_bottles} of beer.\\n#{action_to_take.capitalize}, #{remaining_bottles} of beer on the wall.\\n"\n  end\nend	\N	\N	0	2	2014-07-14 13:47:14	2014-07-14 13:47:14	331	beer-song.rb
644	44	fd1a48b0a846815a02499cc0	pending	javascript	luhn	var Luhn = function(val) {\n\tvar number = val;\n\tvar checkDigit = val % 10;\n\tvar addends = addendsParse(val);\n\tvar checksum = checksumArray(addends);\n\tvar valid = checksum%10==0;\n\treturn {\n\t\tcheckDigit: checkDigit,\n\t\taddends: addends,\n\t\tchecksum: checksum,\n\t\tvalid: valid\n\t}\n\tfunction addendsParse(val) {\n\t\tvar addendsArray = val.toString().split('').reverse();\n\t\tfor (var i=0; i<addendsArray.length; i++) {\n\t\t\tvar addendsInt = Number(addendsArray[i]) * (i%2+1);\n\t\t\tif (addendsInt > 9) {\n\t\t\t\taddendsInt -= 9;\n\t\t\t}\n\t\t\taddendsArray[i] = addendsInt;\n\t\t}\n\t\treturn addendsArray.reverse();\n\t}\n\tfunction checksumArray(arr) {\n\t\treturn arr.reduce(function(a, b) {return a + b;});\n\t}\n};\n\nLuhn.create = function(num) {\n\tvar luhnNum = new Luhn(num);\n\n\tif (!luhnNum.valid) {\n\t\tvar addendsTempArr = num.toString().split('').reverse();\n\t\tvar createsum = 0;\n\t\tfor (var i=0;i<addendsTempArr.length;i++) {\n\t\t\tif (i%2==0) {\n\t\t\t\tvar tempSum = parseInt(addendsTempArr[i]*2);\n\t\t\t\tif (tempSum > 9) {\n\t\t\t\t\tcreatesum += tempSum - 9;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcreatesum += tempSum;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcreatesum += parseInt(addendsTempArr[i]);\n\t\t\t}\n\t\t}\n\t\t// calculate new check digit\n\t\tvar newCheckDigit = (10 - createsum%10)%10;\n  \t}\n  \treturn num * 10 + newCheckDigit;\n};\n\nmodule.exports = Luhn;	\N	\N	0	1	2013-12-24 15:37:21	2013-12-24 15:37:21	332	luhn.js
645	44	a94445d712899a6d900b8d90	pending	clojure	word-count	(ns word-count)\n(defn word-count \n  [string]\n  (reduce \n    (fn [hsh, key] \n      (update-in hsh [(clojure.string/lower-case key)] (fnil inc 0))) \n    {} \n    (reverse (clojure.string/split string #"\\W+"))))	\N	\N	0	1	2013-12-21 10:31:41	2013-12-21 10:31:41	333	word_count.clj
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 645, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	2	1
3	3	1
4	1	2
5	1	3
6	1	4
7	2	4
8	3	5
9	2	6
10	2	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	2014-02-18 17:38:03	2014-02-18 17:38:03	t
2	1	14	1996-06-24 05:24:40	1996-06-24 05:24:40	t
3	1	17	2012-11-23 17:08:49	2012-11-23 17:08:49	t
4	1	22	1990-01-15 16:56:54	1990-01-15 16:56:54	t
5	1	10	1989-03-27 14:30:24	1989-03-27 14:30:24	t
6	1	7	1988-03-13 09:57:40	1988-03-13 09:57:40	t
7	1	6	1970-11-17 01:37:41	1970-11-17 01:37:41	t
8	1	29	1997-03-26 07:34:01	1997-03-26 07:34:01	t
9	1	30	1989-11-04 18:51:46	1989-11-04 18:51:46	t
10	1	35	2004-08-19 22:59:42	2004-08-19 22:59:42	t
11	1	15	1976-12-27 19:51:54	1976-12-27 19:51:54	f
12	1	16	1986-05-07 23:32:51	1986-05-07 23:32:51	f
13	1	28	1978-03-31 09:10:37	1978-03-31 09:10:37	f
14	1	31	1998-03-03 22:51:47	1998-03-03 22:51:47	f
15	1	37	1990-10-14 04:06:34	1990-10-14 04:06:34	f
16	1	41	1981-02-06 21:54:23	1981-02-06 21:54:23	f
17	1	42	1980-04-09 13:47:37	1980-04-09 13:47:37	f
18	1	46	2001-03-05 21:10:55	2001-03-05 21:10:55	f
19	2	2	2005-06-25 10:15:12	2005-06-25 10:15:12	t
20	2	35	1998-10-26 00:05:11	1998-10-26 00:05:11	t
21	2	30	2002-01-04 11:38:11	2002-01-04 11:38:11	t
22	2	46	1980-10-21 16:31:38	1980-10-21 16:31:38	t
23	2	18	2013-01-26 10:46:29	2013-01-26 10:46:29	f
24	2	37	1994-07-02 08:07:11	1994-07-02 08:07:11	f
25	3	37	1995-09-23 03:04:51	1995-09-23 03:04:51	f
26	3	2	1977-11-10 16:38:29	1977-11-10 16:38:29	f
27	4	2	1987-08-31 16:45:28	1987-08-31 16:45:28	t
28	4	31	1971-10-19 11:08:38	1971-10-19 11:08:38	t
29	4	21	1987-07-23 11:07:45	1987-07-23 11:07:45	t
30	4	26	1977-07-31 00:53:29	1977-07-31 00:53:29	t
31	4	19	1971-06-26 18:36:54	1971-06-26 18:36:54	t
32	4	24	1997-05-07 11:51:38	1997-05-07 11:51:38	t
33	4	18	1986-04-03 00:32:11	1986-04-03 00:32:11	t
34	4	23	1988-01-24 06:45:19	1988-01-24 06:45:19	t
35	4	25	2006-01-15 03:01:35	2006-01-15 03:01:35	t
36	4	20	2000-09-28 19:50:32	2000-09-28 19:50:32	t
37	4	37	2012-03-24 07:21:24	2012-03-24 07:21:24	f
38	4	11	2002-03-13 06:25:55	2002-03-13 06:25:55	f
39	4	13	2008-07-19 07:19:39	2008-07-19 07:19:39	f
40	5	31	2005-08-21 21:08:27	2005-08-21 21:08:27	t
41	5	39	1985-02-10 08:12:15	1985-02-10 08:12:15	t
42	5	34	1980-10-29 05:19:06	1980-10-29 05:19:06	t
43	5	36	1973-06-23 21:34:54	1973-06-23 21:34:54	t
44	5	32	1990-05-07 07:39:58	1990-05-07 07:39:58	t
45	5	35	2000-09-21 16:31:14	2000-09-21 16:31:14	t
46	5	33	2006-10-22 22:07:39	2006-10-22 22:07:39	t
47	5	38	1993-03-17 12:26:24	1993-03-17 12:26:24	t
48	5	40	1984-08-06 01:46:33	1984-08-06 01:46:33	f
49	5	37	2010-05-05 12:45:45	2010-05-05 12:45:45	f
50	5	2	1984-10-12 17:36:55	1984-10-12 17:36:55	f
51	6	5	2009-06-24 06:37:08	2009-06-24 06:37:08	t
52	6	6	1994-01-24 18:34:25	1994-01-24 18:34:25	t
53	6	7	2014-02-22 04:40:12	2014-02-22 04:40:12	t
54	6	8	1982-10-09 23:53:11	1982-10-09 23:53:11	t
55	6	10	2010-08-26 18:43:12	2010-08-26 18:43:12	t
56	6	11	1975-10-29 19:10:41	1975-10-29 19:10:41	t
57	6	12	2010-05-10 05:54:59	2010-05-10 05:54:59	t
58	6	13	1992-09-24 21:09:14	1992-09-24 21:09:14	t
59	6	14	1995-12-11 18:40:21	1995-12-11 18:40:21	t
60	6	15	1993-06-13 18:02:26	1993-06-13 18:02:26	t
61	6	16	2009-10-22 04:03:25	2009-10-22 04:03:25	t
62	6	17	2010-02-24 22:44:09	2010-02-24 22:44:09	t
63	6	22	1989-05-04 14:15:21	1989-05-04 14:15:21	t
64	6	27	1971-04-29 18:27:21	1971-04-29 18:27:21	t
65	6	28	2006-04-29 16:07:06	2006-04-29 16:07:06	t
66	6	29	2010-11-04 09:08:41	2010-11-04 09:08:41	t
67	6	30	1972-06-14 04:26:46	1972-06-14 04:26:46	t
68	6	31	1976-12-25 16:08:40	1976-12-25 16:08:40	t
69	6	37	2014-04-24 11:13:12	2014-04-24 11:13:12	t
70	6	41	1977-02-03 22:15:12	1977-02-03 22:15:12	t
71	6	42	1973-09-06 06:11:32	1973-09-06 06:11:32	t
72	6	43	1976-10-27 08:47:50	1976-10-27 08:47:50	t
73	6	44	1988-12-29 04:27:22	1988-12-29 04:27:22	t
74	6	45	1989-03-09 04:28:12	1989-03-09 04:28:12	t
75	6	46	2005-03-01 22:32:15	2005-03-01 22:32:15	t
76	6	47	1983-04-07 06:07:46	1983-04-07 06:07:46	t
77	6	48	1991-02-23 11:15:30	1991-02-23 11:15:30	t
78	7	2	1976-11-16 17:57:19	1976-11-16 17:57:19	t
79	7	38	1999-08-03 02:07:02	1999-08-03 02:07:02	t
80	7	31	1974-05-15 23:24:59	1974-05-15 23:24:59	t
81	7	37	1983-04-15 14:30:50	1983-04-15 14:30:50	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-02-18 19:02:22.928763	2014-02-18 19:02:22.928763	baconesia
2	chocolades	2014-06-06 13:30:50.965595	2014-06-06 13:30:50.965595	chocolades
3	ghost	2014-06-14 22:18:44.97653	2014-06-14 22:18:44.97653	ghost
4	motley	2014-03-27 03:46:31.983413	2014-03-27 03:46:31.983413	motley
5	rugrats	2014-07-21 05:57:33.003429	2014-07-21 05:57:33.003429	rugrats
6	slate	2014-07-23 01:35:21.019023	2014-07-23 01:35:21.019023	slate
7	polkadots	2013-11-22 02:29:39.050925	2013-11-22 02:29:39.050925	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
258	15	scala	leap	1	pending	\N	2014-06-18 17:22:40	2014-06-18 17:22:40	d3ca766051da0e840fe8b5ad	f
1	8	ruby	anagram	1	done	2014-04-25 06:13:52	2014-04-19 12:04:09	2014-04-19 12:04:09	74baf6f8a06eca260feece33	t
2	10	ruby	grains	1	done	2014-07-20 12:22:00	2014-07-10 20:10:57	2014-07-10 20:10:57	14688601021cafbf9f02c9ea	t
3	10	go	hamming	2	done	2014-07-19 05:23:37	2014-06-28 15:47:20	2014-06-28 15:47:20	eeb7477f82ae1cd920bd187a	t
4	10	javascript	phone-number	3	done	2014-07-10 17:22:58	2014-07-04 01:54:18	2014-07-04 01:54:18	842411a3c9107d3a98ac9a9d	t
5	10	ruby	word-count	4	done	2014-07-15 06:58:27	2014-06-30 15:11:17	2014-06-30 15:11:17	c5c3420440f823be2c3b8548	t
6	10	haskell	anagram	3	done	2014-07-17 23:08:13	2014-06-26 10:27:27	2014-06-26 10:27:27	9bc347299cb1453c06c1ec6f	t
7	10	ruby	sum-of-multiples	1	pending	\N	2014-07-13 06:53:14	2014-07-13 06:53:14	5ccd61abb8cd815deb8fef2a	f
8	10	ruby	hamming	1	done	2014-07-02 20:35:56	2014-06-25 19:24:16	2014-06-25 19:24:16	76fa2f5da5b251dc8a7d5c44	t
9	11	clojure	anagram	4	done	2014-04-13 14:24:34	2014-03-08 17:34:03	2014-03-08 17:34:03	a83f8c8125da81b2cbfdfe66	t
10	11	ruby	roman-numerals	1	done	2014-03-18 20:13:17	2014-03-18 04:34:06	2014-03-18 04:34:06	5c2b05d62691eb97ea8b3952	t
11	11	ruby	grains	2	pending	\N	2014-03-15 02:35:16	2014-03-15 02:35:16	0c4bbe695f1884ba3fdfe513	f
12	11	clojure	word-count	2	done	2014-05-04 13:09:14	2014-04-13 22:53:16	2014-04-13 22:53:16	54996b27012df21fa9b4f7cd	t
13	14	ruby	bob	5	done	2014-04-26 20:35:20	2014-02-16 04:58:59	2014-02-16 04:58:59	7017a65a3dba088a6e9f9273	t
14	14	ruby	scrabble-score	1	pending	\N	2014-03-10 20:57:11	2014-03-10 20:57:11	45c1bfbd9fce05c8ad5fb94f	f
15	14	ruby	grains	3	done	2014-05-03 16:00:38	2014-03-12 04:34:59	2014-03-12 04:34:59	2e7d9b80aae19eaa5665dc07	t
16	21	ruby	etl	1	done	2014-03-14 04:52:51	2014-03-08 11:31:09	2014-03-08 11:31:09	7c0715216bf23cfbdf441f5e	t
17	21	elixir	word-count	2	done	2014-04-20 06:31:22	2014-02-25 10:33:00	2014-02-25 10:33:00	97d7fe0191b4378093d17a3b	t
18	21	haskell	leap	2	done	2014-05-18 10:54:58	2014-01-29 10:10:40	2014-01-29 10:10:40	807b54ad76b1650a25fa58a3	t
19	21	haskell	bob	3	pending	\N	2014-02-12 10:24:09	2014-02-12 10:24:09	7cc5c0d49b969e75970c7066	f
20	21	clojure	bob	1	done	2014-07-06 06:22:22	2014-07-01 08:02:59	2014-07-01 08:02:59	c79c5bcc88a17e6840f88c95	t
21	21	elixir	rna-transcription	2	pending	\N	2014-02-17 10:24:19	2014-02-17 10:24:19	42c8761b241734810ee603b7	f
22	27	python	beer-song	1	pending	\N	2014-07-19 01:10:02	2014-07-19 01:10:02	38a23247dcbaa0756e7b74f6	f
23	27	ruby	bob	2	pending	\N	2014-07-16 01:30:16	2014-07-16 01:30:16	ebfcb255efe47cc7ad018199	f
24	27	clojure	beer-song	4	done	2014-07-26 18:01:00	2014-07-15 05:17:57	2014-07-15 05:17:57	cc6f363849c6e38185e1d988	t
25	27	javascript	bob	2	done	2014-07-24 21:44:46	2014-07-13 16:54:57	2014-07-13 16:54:57	9f29f5d8eb922a20730fb212	t
26	27	haskell	pig-latin	1	done	2014-07-20 18:53:11	2014-07-15 01:04:34	2014-07-15 01:04:34	458f50881a8a71dabaf5f983	t
27	27	elixir	bob	4	pending	\N	2014-07-13 17:03:49	2014-07-13 17:03:49	67a5246948bd67d27d2d62f7	f
28	27	haskell	rna-transcription	2	done	2014-07-18 08:19:37	2014-07-13 13:03:19	2014-07-13 13:03:19	cf1f57fbcf5cbd371088ce62	t
29	27	ruby	crypto-square	1	done	2014-07-15 11:44:11	2014-07-13 23:53:03	2014-07-13 23:53:03	f77330bcdede69760fbb5626	t
30	27	ruby	robot-name	2	done	2014-07-26 22:58:27.023731	2014-07-20 08:21:45	2014-07-20 08:21:45	0ce96bce5109400fea60033d	t
31	27	ruby	hamming	2	done	2014-07-23 10:03:20	2014-07-17 06:44:38	2014-07-17 06:44:38	0b94c79c4b687a4ac7d21b51	t
32	27	haskell	point-mutations	2	done	2014-07-26 22:58:27.077934	2014-07-17 21:13:05	2014-07-17 21:13:05	cc1d3ee5045cf3a0458f939b	t
33	27	ruby	nucleotide-count	3	done	2014-07-26 22:58:27.129359	2014-07-16 14:26:26	2014-07-16 14:26:26	d7c84c578fcdbffb583ad35a	t
34	27	clojure	grade-school	1	pending	\N	2014-07-23 17:28:13	2014-07-23 17:28:13	1e6662061a49c6226750817f	f
35	27	python	bob	1	pending	\N	2014-07-20 04:17:39	2014-07-20 04:17:39	d6d5f1265df7d1ac364e97c6	f
36	27	ruby	food-chain	1	pending	\N	2014-07-22 23:58:22	2014-07-22 23:58:22	474d403f7a1eb89038d348be	f
37	27	ruby	nth-prime	3	done	2014-07-25 17:23:55	2014-07-14 03:52:52	2014-07-14 03:52:52	4b3dd5a90d387a38d9ec33f7	t
38	27	ocaml	list-ops	3	done	2014-07-26 22:58:27.234114	2014-07-15 12:28:31	2014-07-15 12:28:31	ae08c8d66c953c52bde0b92a	t
39	27	haskell	sublist	2	done	2014-07-24 06:44:47	2014-07-18 20:55:19	2014-07-18 20:55:19	c9617230154ed241bfa966d4	t
40	27	scala	bob	1	done	2014-07-19 17:45:56	2014-07-15 18:07:52	2014-07-15 18:07:52	0197e7fd6464ad70046eb792	t
41	27	ruby	leap	1	done	2014-07-26 22:58:27.334338	2014-07-24 20:44:40	2014-07-24 20:44:40	f748fe8b0916a49b5543ce59	t
42	27	go	leap	3	done	2014-07-26 22:58:27.358851	2014-07-15 21:45:51	2014-07-15 21:45:51	736b31f4b30180ac0f0ba375	t
43	27	ruby	gigasecond	1	pending	\N	2014-07-17 08:56:23	2014-07-17 08:56:23	a4d93161bd2e45aa93af1dbf	f
44	27	clojure	leap	2	pending	\N	2014-07-16 10:54:04	2014-07-16 10:54:04	bce7cacce6a75f3e2b546cf1	f
45	27	ruby	grains	1	pending	\N	2014-07-22 06:27:01	2014-07-22 06:27:01	0f11a0730b6b0445b30c89c9	f
46	27	haskell	bob	2	done	2014-07-26 22:58:27.48784	2014-07-22 20:52:43	2014-07-22 20:52:43	2e491c73561b5c7dcddf2312	t
47	27	haskell	beer-song	1	pending	\N	2014-07-15 13:13:00	2014-07-15 13:13:00	c54327873c9c8742bbe02690	f
48	28	haskell	grade-school	1	done	2013-11-26 23:34:47	2013-11-23 06:56:01	2013-11-23 06:56:01	0f9fc55d36803547deddc785	t
49	28	ruby	nucleotide-count	2	done	2014-02-27 11:29:35	2014-02-25 05:58:03	2014-02-25 05:58:03	1c415baf0a71e00d73ccd249	t
50	28	haskell	bob	2	pending	\N	2014-02-02 23:49:52	2014-02-02 23:49:52	8b421fe6c3b2a57edf86ec03	f
51	28	ruby	robot-name	1	done	2013-12-30 18:18:36	2013-12-20 18:55:48	2013-12-20 18:55:48	84ee33e0d10df9bd16214073	t
52	28	clojure	bob	3	done	2014-01-29 14:17:42	2014-01-28 17:54:28	2014-01-28 17:54:28	77d5e14c9acd9eb6a82ef3d2	t
53	30	python	bob	1	done	2014-03-08 09:02:55	2014-03-04 22:38:42	2014-03-04 22:38:42	fdf4ef77f24783ca3c09b3af	t
54	32	javascript	pascals-triangle	1	done	2014-05-04 11:50:02	2014-04-25 17:29:56	2014-04-25 17:29:56	e30fed597e62d701bb98b6a7	t
55	32	go	leap	2	pending	\N	2014-02-25 12:56:28	2014-02-25 12:56:28	a9e419b9a3ef4de0dc7ff229	f
56	32	clojure	beer-song	1	done	2014-03-01 04:34:53	2014-02-26 17:05:42	2014-02-26 17:05:42	796adb1d4ba244f26638992b	t
57	32	ruby	word-count	2	done	2014-04-19 21:36:46	2014-04-11 13:44:39	2014-04-11 13:44:39	cb976946c06f4c0fcb7e0485	t
58	32	go	etl	3	done	2014-03-13 06:39:12	2014-03-04 02:17:46	2014-03-04 02:17:46	dd50645511373cdac2e37979	t
59	32	ruby	gigasecond	1	done	2014-04-13 09:03:59	2014-04-10 11:14:36	2014-04-10 11:14:36	6ad59c87176650f28ee3525b	t
60	37	ruby	bob	1	done	2013-12-30 17:44:21	2013-12-20 22:13:23	2013-12-20 22:13:23	5d9a1fb1bb73d94cefa5b7f3	t
61	37	javascript	word-count	3	done	2014-04-11 02:35:48	2013-11-12 16:39:58	2013-11-12 16:39:58	8da7f262348ad8584d645dc1	t
62	37	coffeescript	luhn	1	done	2014-01-16 19:21:48	2014-01-12 10:42:20	2014-01-12 10:42:20	d629a3027cd6bf670628dd6a	t
63	37	javascript	grade-school	2	done	2013-11-22 06:58:42	2013-11-12 16:56:04	2013-11-12 16:56:04	27b5ba4ec679f8876a08b370	t
64	37	clojure	bob	1	done	2013-11-20 09:12:44	2013-11-15 14:21:54	2013-11-15 14:21:54	2e7e52347e71717fc7772a3f	t
65	37	haskell	robot-name	4	done	2014-03-23 22:55:36	2014-02-17 19:15:18	2014-02-17 19:15:18	23b692095580d85dc3083a70	t
66	39	ruby	beer-song	3	done	2014-03-28 08:48:36	2014-03-23 08:39:40	2014-03-23 08:39:40	e1ecdb2b87bb920e2b40437f	t
67	39	csharp	leap	1	done	2014-05-21 08:15:19	2014-05-14 11:54:45	2014-05-14 11:54:45	59aeaab7e7ca89c53bf4bce5	t
68	39	elixir	phone-number	1	pending	\N	2014-03-20 02:09:31	2014-03-20 02:09:31	1019e6f3d1b64d6ae335e40d	f
69	39	javascript	robot-name	1	done	2014-05-15 02:23:48	2014-05-05 19:05:50	2014-05-05 19:05:50	9436fb073bb85152e9cf4a73	t
70	39	ruby	house	4	pending	\N	2014-02-21 22:11:04	2014-02-21 22:11:04	36e1e6f9bae79772df14afb0	f
71	39	elixir	anagram	2	done	2014-07-16 08:47:23	2014-07-09 03:35:29	2014-07-09 03:35:29	95cb438dec65d17701e434a9	t
72	43	csharp	hamming	1	pending	\N	2014-07-25 07:31:28	2014-07-25 07:31:28	61e3f2239659521a4d6c9e4c	f
73	45	ruby	hamming	9	done	2014-07-19 21:39:30	2014-05-01 03:56:50	2014-05-01 03:56:50	ade8dbf8fffbc823fd740714	t
74	45	ruby	grains	5	done	2014-05-28 16:24:14	2014-04-29 22:21:39	2014-04-29 22:21:39	f4d101a765b0a1615e10ee28	t
75	45	ruby	leap	1	done	2014-06-13 20:27:56	2014-06-07 20:18:38	2014-06-07 20:18:38	1638b6140d270b661f612721	t
76	45	haskell	grains	2	done	2014-05-07 22:35:24	2014-05-04 04:04:53	2014-05-04 04:04:53	ec0bd7e106fb08ddee229449	t
77	45	javascript	phone-number	1	pending	\N	2014-06-08 04:38:12	2014-06-08 04:38:12	635ca0953fbd96c265944814	f
78	45	scala	word-count	2	done	2014-05-24 06:11:19	2014-05-09 23:36:48	2014-05-09 23:36:48	e2d99fb0566a2be40acc1256	t
79	45	ruby	nucleotide-count	2	done	2014-07-07 00:58:28	2014-06-18 17:56:55	2014-06-18 17:56:55	00f216efc93839794f58184d	t
80	47	python	beer-song	2	done	2013-11-04 09:12:59	2013-11-03 21:04:40	2013-11-03 21:04:40	7a37dfa731996b5eae2b72a9	t
81	47	elixir	binary	1	pending	\N	2014-01-09 01:40:14	2014-01-09 01:40:14	d71faa9dc5905efc77dcf692	f
82	47	python	bob	3	done	2013-12-14 00:32:28	2013-11-27 10:06:15	2013-11-27 10:06:15	a4c94963f259464e51536e47	t
83	47	ruby	gigasecond	1	done	2014-02-22 14:27:55	2014-02-12 13:06:23	2014-02-12 13:06:23	012ea59ef6460242d656b82c	t
84	47	ruby	word-count	1	done	2013-11-28 05:00:55	2013-11-25 13:27:14	2013-11-25 13:27:14	41b09fd422c1c1fadd170abe	t
85	47	go	scrabble-score	1	done	2013-12-08 08:18:09	2013-12-02 03:45:52	2013-12-02 03:45:52	3dff5e42054e88eda4b826a4	t
86	47	ruby	sieve	2	done	2014-04-18 22:10:00	2013-12-20 07:47:10	2013-12-20 07:47:10	af8c6bb1f820ebe1b88f10c9	t
87	48	ruby	hamming	1	pending	\N	2014-02-20 06:59:40	2014-02-20 06:59:40	96ebffbe4b0feea32ea2502d	f
88	48	javascript	bob	4	pending	\N	2013-12-11 19:43:53	2013-12-11 19:43:53	6a6b9c40ca811e2bc8527068	f
89	48	scala	hamming	3	pending	\N	2014-01-05 06:57:16	2014-01-05 06:57:16	a7a076da97f7201cdbbf7d97	f
90	48	go	roman-numerals	1	pending	\N	2013-12-01 04:44:23	2013-12-01 04:44:23	1ebd763875bad75598bf6a66	f
91	48	ruby	anagram	2	pending	\N	2014-02-27 04:01:24	2014-02-27 04:01:24	a805c707eac0441b5ef525ff	f
92	48	clojure	meetup	1	pending	\N	2014-03-18 01:44:03	2014-03-18 01:44:03	aede3128343e16f499a38778	f
93	48	ruby	bob	3	pending	\N	2013-11-28 02:05:53	2013-11-28 02:05:53	fdd1c818024e08d95062d8bd	f
94	48	javascript	trinary	1	pending	\N	2013-12-09 14:54:43	2013-12-09 14:54:43	2e009d260f94444e58d559b3	f
95	48	ruby	leap	1	pending	\N	2014-02-25 06:01:39	2014-02-25 06:01:39	27539b64c5c6ac0284b6427d	f
96	48	python	rna-transcription	1	pending	\N	2014-03-03 03:43:58	2014-03-03 03:43:58	040d431eb16464065c560cec	f
97	48	ruby	raindrops	1	pending	\N	2014-01-25 22:38:46	2014-01-25 22:38:46	259c560769d104aa23fc2ccb	f
98	48	go	atbash-cipher	2	pending	\N	2014-03-07 01:56:47	2014-03-07 01:56:47	6277a17084e124e7b1682a67	f
99	48	ruby	gigasecond	1	pending	\N	2013-11-22 23:10:04	2013-11-22 23:10:04	31eee79a8b2257871e7155da	f
100	48	javascript	secret-handshake	1	pending	\N	2014-01-31 02:27:53	2014-01-31 02:27:53	5cfda5c25aacf095f9ba1c2a	f
101	48	haskell	etl	2	pending	\N	2013-12-24 18:29:29	2013-12-24 18:29:29	72efe273473477103ef7002f	f
102	48	ruby	word-count	2	pending	\N	2014-03-03 02:17:47	2014-03-03 02:17:47	a8a010cddffefbd0a5a2be24	f
103	48	clojure	rna-transcription	1	pending	\N	2014-02-02 03:32:49	2014-02-02 03:32:49	35673edf6994d7bb13a3a01a	f
104	48	elixir	raindrops	1	pending	\N	2014-03-25 23:45:33	2014-03-25 23:45:33	2534f9f92fe39f7e7288db1e	f
105	48	ruby	beer-song	1	pending	\N	2014-01-14 20:39:01	2014-01-14 20:39:01	ab40e12bb693440c83798f95	f
106	48	ruby	food-chain	3	pending	\N	2013-11-27 15:34:57	2013-11-27 15:34:57	ecceb03358cca11812088520	f
107	48	javascript	phone-number	1	pending	\N	2014-06-10 04:42:19	2014-06-10 04:42:19	fb204fbece31a67efbc88acb	f
108	48	ruby	scrabble-score	1	pending	\N	2014-03-01 03:13:15	2014-03-01 03:13:15	28d9714c02918b578dd53dc5	f
109	48	ruby	grains	1	pending	\N	2014-01-21 11:24:21	2014-01-21 11:24:21	d0f5a0f955012a8a94418ffe	f
110	48	ruby	circular-buffer	1	pending	\N	2014-02-07 19:33:43	2014-02-07 19:33:43	07d0ceab4d54c62a53c4b30b	f
111	48	python	robot-name	2	pending	\N	2014-03-25 18:51:06	2014-03-25 18:51:06	24f007a9def7400b2a5c347d	f
112	48	haskell	word-count	5	pending	\N	2014-02-13 17:38:40	2014-02-13 17:38:40	95ec1c79902260f0afeca1ad	f
113	48	python	bob	1	pending	\N	2013-12-17 23:35:39	2013-12-17 23:35:39	9b741bb444a710c43c709b01	f
114	48	python	house	1	pending	\N	2014-01-04 12:59:49	2014-01-04 12:59:49	825a74f5ec70a2fff475aaee	f
115	48	objective-c	bob	2	pending	\N	2014-01-09 21:45:02	2014-01-09 21:45:02	b34db29e016772120b3a9a7a	f
116	48	ruby	etl	1	pending	\N	2014-01-11 01:46:50	2014-01-11 01:46:50	467c6193ebda8f03a8f6f27c	f
117	48	elixir	bob	3	pending	\N	2013-12-06 01:33:42	2013-12-06 01:33:42	7f7b06399348fe4cbfc3b7dd	f
118	48	haskell	bob	2	pending	\N	2013-12-12 20:36:18	2013-12-12 20:36:18	fdb15a800a46301b1977d9c5	f
119	48	haskell	point-mutations	2	pending	\N	2013-12-12 16:23:08	2013-12-12 16:23:08	78b22ff99678ac8d98b304e7	f
120	25	haskell	binary	3	pending	\N	2014-04-08 21:31:39	2014-04-08 21:31:39	c37a6670b7c0e618bba7b7a0	f
121	25	javascript	beer-song	1	pending	\N	2014-06-01 08:04:43	2014-06-01 08:04:43	d9e70f9a9be7179bd2850692	f
122	25	javascript	anagram	1	pending	\N	2014-04-18 08:31:26	2014-04-18 08:31:26	6698fac034638054d66b9a48	f
123	25	elixir	grains	1	pending	\N	2014-03-30 12:46:56	2014-03-30 12:46:56	a526abee8265f516d2c49b9a	f
124	25	ruby	raindrops	1	pending	\N	2014-05-26 09:33:10	2014-05-26 09:33:10	5ee150336202a50053040b35	f
125	25	perl5	proverb	1	pending	\N	2014-04-05 16:01:51	2014-04-05 16:01:51	6ee92694e459f760458a4e03	f
126	25	clojure	bob	4	pending	\N	2014-04-05 00:55:45	2014-04-05 00:55:45	5a6c605f651e5f335454db9a	f
127	6	ruby	bob	5	pending	\N	2014-05-03 09:20:12	2014-05-03 09:20:12	c01aa2f801d4e5b594835c97	f
128	6	ruby	linked-list	2	pending	\N	2014-05-02 01:58:26	2014-05-02 01:58:26	e6a7e720705236e6c3d61f18	f
129	22	python	bob	1	pending	\N	2014-03-01 23:07:49	2014-03-01 23:07:49	23d1e8d875c97d9b18a13b59	f
130	22	ruby	bob	4	pending	\N	2014-01-19 11:39:01	2014-01-19 11:39:01	e491d294b5e32f3ef4e01ee5	f
131	22	elixir	anagram	1	pending	\N	2014-03-15 08:56:34	2014-03-15 08:56:34	5ffb10290a2b592d42d8905d	f
132	22	ruby	nucleotide-count	1	pending	\N	2014-07-04 00:47:21	2014-07-04 00:47:21	b06b281b768c54f46be83771	f
133	16	go	etl	3	pending	\N	2013-11-22 14:58:33	2013-11-22 14:58:33	6b98ca69f818f378177c6613	f
134	19	ruby	leap	2	done	2014-06-04 01:48:12	2014-05-23 12:56:22	2014-05-23 12:56:22	c1cd5d076a622e9263e4640f	t
135	19	haskell	phone-number	1	done	2014-06-13 19:48:48	2014-06-03 03:42:48	2014-06-03 03:42:48	520b8de7a247014869c5b085	t
136	19	clojure	grade-school	1	done	2014-06-12 14:14:56	2014-06-07 06:15:04	2014-06-07 06:15:04	36e82ae2ebda2b790379032b	t
137	20	ruby	bob	2	done	2014-06-22 00:44:54	2014-06-12 09:30:22	2014-06-12 09:30:22	6145d4b5b65e5d369549f6b2	t
138	20	go	difference-of-squares	1	done	2014-06-15 15:38:44	2014-06-04 14:09:59	2014-06-04 14:09:59	0f5492ac8332d90b6e0a7541	t
139	20	ruby	trinary	1	done	2014-07-07 16:44:36	2014-07-02 05:00:55	2014-07-02 05:00:55	81a61767fd53da1d8a9c3166	t
140	20	haskell	rna-transcription	3	done	2014-07-22 04:42:16	2014-06-02 01:12:34	2014-06-02 01:12:34	b7d9628c29859c117d64de98	t
141	20	ruby	phone-number	5	done	2014-07-21 09:32:48	2014-06-17 23:09:14	2014-06-17 23:09:14	90d3a0018ffd5caa0c3daf83	t
142	20	elixir	beer-song	3	done	2014-07-17 03:16:41	2014-06-21 08:24:01	2014-06-21 08:24:01	0de522f938a76467754920f4	t
143	20	scala	gigasecond	1	done	2014-06-15 22:00:48	2014-06-08 15:53:19	2014-06-08 15:53:19	38830393a4748b10564b45a1	t
144	20	ruby	word-count	4	done	2014-06-13 07:59:05	2014-06-03 08:38:13	2014-06-03 08:38:13	62e9689f93a0ce1713e47913	t
145	20	haskell	linked-list	4	done	2014-07-04 09:27:37	2014-06-12 23:02:50	2014-06-12 23:02:50	281ca474a8ca5334582130fe	t
146	20	haskell	allergies	1	done	2014-06-16 17:37:15	2014-06-05 05:22:04	2014-06-05 05:22:04	02113bb1cd7544a8e32aa9f8	t
147	20	ruby	scrabble-score	1	done	2014-06-17 03:37:28	2014-06-13 00:13:02	2014-06-13 00:13:02	a7819058eafed38709965fa0	t
148	20	go	queen-attack	1	done	2014-06-09 09:39:50	2014-06-08 14:42:36	2014-06-08 14:42:36	2db377609d0dfb5dba51a9cf	t
149	20	clojure	beer-song	1	done	2014-06-21 04:23:41	2014-06-14 19:27:37	2014-06-14 19:27:37	7dbf5d0ca1b90b5200ae6e3e	t
150	20	elixir	anagram	3	done	2014-07-19 03:06:22	2014-06-15 16:24:04	2014-06-15 16:24:04	48de853e7acbd35ec379b576	t
151	20	go	etl	3	done	2014-07-26 04:36:55	2014-06-25 19:08:19	2014-06-25 19:08:19	61f895a914134d6e179e35fe	t
152	20	ruby	anagram	1	done	2014-07-25 01:43:42	2014-07-23 02:52:03	2014-07-23 02:52:03	c44003d9f6565ffe30a6f25c	t
153	20	ruby	triangle	2	done	2014-06-21 04:08:54	2014-06-11 07:05:37	2014-06-11 07:05:37	8774a058974c01c84f4235a2	t
154	20	elixir	word-count	2	done	2014-06-05 05:06:07	2014-06-03 10:20:00	2014-06-03 10:20:00	c3b7fb028efad8788fcb05d6	t
155	20	ruby	rna-transcription	3	done	2014-07-23 17:06:59	2014-06-20 03:18:04	2014-06-20 03:18:04	a41a92565dff9dce9e7aa69d	t
156	20	ruby	largest-series-product	1	done	2014-07-20 13:02:40	2014-07-12 05:07:59	2014-07-12 05:07:59	3a9c430b959f4c32c7a92730	t
157	20	haskell	robot-name	1	done	2014-07-10 08:47:23	2014-07-07 01:16:05	2014-07-07 01:16:05	b2498c2a659fa1b7d5b25323	t
158	20	ruby	grains	1	done	2014-06-13 20:48:11	2014-06-09 08:15:44	2014-06-09 08:15:44	1da17e9e508497ccd4376994	t
159	20	elixir	grade-school	1	done	2014-07-24 00:14:49	2014-07-15 14:50:51	2014-07-15 14:50:51	ab0ffe0214829af7bf3068c9	t
160	20	go	anagram	1	done	2014-06-28 04:26:14	2014-06-22 05:35:45	2014-06-22 05:35:45	4a7deac4adf42040189bee82	t
161	20	scala	bob	1	done	2014-06-22 01:52:10	2014-06-21 09:44:04	2014-06-21 09:44:04	2e306d30b59847bc32f9fdf0	t
162	20	haskell	bob	1	done	2014-07-01 13:08:12	2014-06-26 21:18:31	2014-06-26 21:18:31	884bf683f2381e53b99a860d	t
163	20	elixir	meetup	1	done	2014-07-11 07:48:17	2014-07-08 14:34:16	2014-07-08 14:34:16	ecb856b5fc492f6663f46956	t
164	20	python	bob	1	done	2014-06-13 18:14:35	2014-06-03 15:52:12	2014-06-03 15:52:12	843a9e425deda85048b2eb4a	t
165	20	javascript	raindrops	1	done	2014-06-16 01:10:09	2014-06-09 07:10:29	2014-06-09 07:10:29	a5ca27c00155d3c9fa34207f	t
166	35	ruby	bob	1	done	2014-07-26 05:56:20	2014-07-18 07:04:24	2014-07-18 07:04:24	fd30f9b8901bccffe3eb4a06	t
167	35	clojure	point-mutations	3	done	2014-07-25 06:17:14	2014-07-17 08:01:44	2014-07-17 08:01:44	db2d6ee141142e91df831c6d	t
168	29	ruby	anagram	6	done	2014-04-16 07:24:05	2014-04-03 11:55:26	2014-04-03 11:55:26	f5d29b86535fec2fd95223df	t
169	29	python	word-count	1	done	2014-05-20 10:43:16	2014-05-16 19:50:48	2014-05-16 19:50:48	b3eaf9eeb71cfdc031de3593	t
170	34	ruby	hamming	2	done	2014-06-16 23:22:18	2014-06-03 03:42:58	2014-06-03 03:42:58	2422c9c4578cf65a674a34e8	t
171	34	ruby	gigasecond	1	done	2014-07-09 18:26:23	2014-07-01 14:36:22	2014-07-01 14:36:22	266b3c0ce80a3a773ee4f77a	t
172	34	go	etl	1	done	2014-05-19 17:29:31	2014-05-11 10:48:06	2014-05-11 10:48:06	1e2e9c2559ed08b150c62b71	t
173	34	ruby	word-count	9	done	2014-06-21 12:33:56	2014-05-10 09:22:35	2014-05-10 09:22:35	5ccbd5f9d1f75c097fbbffd2	t
174	13	coffeescript	word-count	1	pending	\N	2014-07-25 16:29:28	2014-07-25 16:29:28	438d6fae497d07a7f36a258b	f
175	13	go	rna-transcription	1	pending	\N	2014-07-25 08:08:27	2014-07-25 08:08:27	621a71932e18cc7acdcb8699	f
176	13	ruby	leap	1	pending	\N	2014-07-26 13:52:07	2014-07-26 13:52:07	3a33019d0ebdc5f1bbad1bfb	f
177	13	ruby	bob	8	pending	\N	2014-07-23 23:57:42	2014-07-23 23:57:42	7f11a41112bcdf60b517b8f9	f
178	13	ruby	scrabble-score	1	pending	\N	2014-07-25 16:55:49	2014-07-25 16:55:49	c9b4ed337f163fc4e99f196f	f
179	40	clojure	beer-song	2	pending	\N	2014-06-12 15:45:41	2014-06-12 15:45:41	288bf6cb3b9e75505e2753e8	f
180	40	javascript	bob	1	pending	\N	2014-06-17 22:19:00	2014-06-17 22:19:00	b56a2179a937e461d1e7ba51	f
181	40	ruby	bob	1	pending	\N	2014-06-17 06:09:12	2014-06-17 06:09:12	065f29a27eb8590b301068f7	f
182	40	elixir	grains	1	pending	\N	2014-06-15 11:20:32	2014-06-15 11:20:32	eddff243243446880e1e8c89	f
183	40	ruby	raindrops	3	pending	\N	2014-06-15 10:44:07	2014-06-15 10:44:07	b2a759e5d744530b03541ccd	f
184	40	javascript	say	1	pending	\N	2014-07-08 15:07:55	2014-07-08 15:07:55	3d587495eaf01bff6f23935c	f
185	40	javascript	word-count	3	pending	\N	2014-06-15 16:19:33	2014-06-15 16:19:33	f191cd26462d7669618944cc	f
186	40	ruby	custom-set	3	pending	\N	2014-07-02 06:00:59	2014-07-02 06:00:59	219838c776351ebe22949a26	f
187	40	ruby	grade-school	1	pending	\N	2014-07-19 05:15:09	2014-07-19 05:15:09	156054ad4644f637a165d8f0	f
188	40	ruby	house	1	pending	\N	2014-06-17 09:48:32	2014-06-17 09:48:32	3283b945e561ba24183987fb	f
189	40	ruby	leap	4	pending	\N	2014-06-12 23:47:26	2014-06-12 23:47:26	0aacb9de4a2446f8817319fe	f
190	40	python	bob	3	pending	\N	2014-06-14 07:32:00	2014-06-14 07:32:00	cce8ad8ad630737093b5aefd	f
191	40	javascript	beer-song	1	pending	\N	2014-06-24 21:55:09	2014-06-24 21:55:09	3bf8ef20f0dcd7f11ea8ae24	f
192	40	clojure	nucleotide-count	1	pending	\N	2014-07-12 20:04:34	2014-07-12 20:04:34	9ef92fe54a509e7723f0b126	f
193	40	haskell	beer-song	1	pending	\N	2014-06-22 16:18:29	2014-06-22 16:18:29	d513cc8426072d2f31c426f1	f
194	40	ruby	nucleotide-count	1	pending	\N	2014-07-14 22:59:07	2014-07-14 22:59:07	0de15f6e85689726b2107cac	f
195	40	clojure	bob	2	pending	\N	2014-07-08 11:23:03	2014-07-08 11:23:03	55090df277531aff75f39901	f
196	40	javascript	gigasecond	1	pending	\N	2014-06-26 06:23:04	2014-06-26 06:23:04	4ed7df5c389cefff2ca616af	f
197	40	clojure	anagram	1	pending	\N	2014-06-21 11:55:03	2014-06-21 11:55:03	ecb5657d1356b43c6cb087df	f
198	40	python	word-count	2	pending	\N	2014-06-18 20:11:21	2014-06-18 20:11:21	75de4d476b757391b92bbdde	f
199	40	javascript	anagram	6	pending	\N	2014-06-14 20:09:57	2014-06-14 20:09:57	85dab4877250f8a45367dbd7	f
200	40	ruby	word-count	1	pending	\N	2014-07-18 01:06:38	2014-07-18 01:06:38	84be6ea2bb4d4db39bb6d176	f
201	40	clojure	queen-attack	1	pending	\N	2014-06-12 19:32:28	2014-06-12 19:32:28	01e7e201f1c1f901c4395792	f
202	40	ruby	binary	1	pending	\N	2014-06-17 06:42:19	2014-06-17 06:42:19	86746cca4cdfec41211a60fa	f
203	40	haskell	rna-transcription	1	pending	\N	2014-07-08 18:01:34	2014-07-08 18:01:34	69e2c8a02331457354d83455	f
204	40	haskell	prime-factors	1	pending	\N	2014-06-15 12:27:31	2014-06-15 12:27:31	c7295543212dcb833fbf6ead	f
205	40	clojure	grade-school	1	pending	\N	2014-07-13 01:44:51	2014-07-13 01:44:51	361c26ce566a6460b60f6264	f
206	40	haskell	trinary	1	pending	\N	2014-06-13 10:03:49	2014-06-13 10:03:49	e644579c648a3504efdb5d6c	f
207	40	haskell	etl	1	pending	\N	2014-06-23 20:56:04	2014-06-23 20:56:04	830e7b9cbc24b0caae1e1f68	f
208	40	clojure	word-count	2	pending	\N	2014-06-27 19:36:30	2014-06-27 19:36:30	860d5935fcf3a1c9ac11a685	f
209	40	javascript	strain	1	pending	\N	2014-06-28 15:29:09	2014-06-28 15:29:09	ab7e6da5633ada4525f84aa7	f
210	5	haskell	binary-search-tree	4	pending	\N	2014-05-04 19:23:17	2014-05-04 19:23:17	0db5713d977f77b3607d348e	f
211	33	python	bob	1	pending	\N	2014-06-16 12:06:33	2014-06-16 12:06:33	2ddcd66df0b9e15d3de0aa52	f
212	33	javascript	series	1	pending	\N	2014-07-05 04:56:55	2014-07-05 04:56:55	acc551f8df505d4602794606	f
213	33	ruby	word-count	5	pending	\N	2014-07-05 23:14:48	2014-07-05 23:14:48	181b5d0f8c2836c6ac1bb4e3	f
214	33	ruby	grade-school	1	pending	\N	2014-06-28 19:06:14	2014-06-28 19:06:14	6cbbf6a8b9bdd3cd1d9931bd	f
215	33	ruby	house	1	pending	\N	2014-06-30 07:16:51	2014-06-30 07:16:51	23966ea7b86654a4892c6c70	f
216	33	go	scrabble-score	1	pending	\N	2014-06-18 13:03:26	2014-06-18 13:03:26	52ca75f43428ddaadaa49efa	f
217	33	clojure	bob	3	pending	\N	2014-06-21 03:34:28	2014-06-21 03:34:28	30f9bffcf3018b4933a7c4c1	f
218	33	javascript	bob	3	pending	\N	2014-06-28 12:39:06	2014-06-28 12:39:06	7da506250facf634a2b50190	f
219	33	ruby	nucleotide-count	3	pending	\N	2014-06-23 12:25:42	2014-06-23 12:25:42	8ee52ed3ebff1c221edb0785	f
220	33	go	hamming	1	pending	\N	2014-07-10 15:43:53	2014-07-10 15:43:53	8d0c85a5f21e3c170ef222a8	f
221	33	ruby	etl	1	pending	\N	2014-06-19 22:39:22	2014-06-19 22:39:22	2d707b6fec487990977d3689	f
222	33	ruby	wordy	2	pending	\N	2014-06-16 19:23:01	2014-06-16 19:23:01	4100ad44d6a8c6a73edea692	f
223	33	clojure	phone-number	2	pending	\N	2014-06-27 04:03:06	2014-06-27 04:03:06	3b7bdfb46660e4efe01d4b99	f
224	33	python	pascals-triangle	1	pending	\N	2014-06-26 16:09:09	2014-06-26 16:09:09	cc4dcfec4c10f9f78d2a42d9	f
225	33	ruby	bob	5	pending	\N	2014-06-22 23:17:32	2014-06-22 23:17:32	8fd12f5fd7a658d287cbe306	f
226	33	haskell	rna-transcription	3	pending	\N	2014-06-29 05:35:07	2014-06-29 05:35:07	001f4b3ce483e56182d045b8	f
227	33	ruby	kindergarten-garden	1	pending	\N	2014-07-17 16:56:04	2014-07-17 16:56:04	af1d6fe6efb92d3346177eb2	f
228	33	haskell	crypto-square	1	pending	\N	2014-06-26 04:03:28	2014-06-26 04:03:28	8f12861b603c251cf106341f	f
229	33	scala	hamming	2	pending	\N	2014-07-02 02:55:51	2014-07-02 02:55:51	fd8edf07155bf65b5b447c63	f
230	33	haskell	bob	1	pending	\N	2014-07-03 02:11:10	2014-07-03 02:11:10	269b3ebb27800055d33d33ad	f
231	33	perl5	hamming	1	pending	\N	2014-06-30 14:29:00	2014-06-30 14:29:00	9edff8aba67a33c664b5780a	f
232	33	python	anagram	1	pending	\N	2014-06-19 00:45:24	2014-06-19 00:45:24	3c186d441e9a8f53c02247fc	f
233	15	python	bob	1	pending	\N	2014-06-25 19:25:43	2014-06-25 19:25:43	80673e2c82da9887fa6c75c5	f
234	15	ruby	gigasecond	1	pending	\N	2014-05-25 02:11:47	2014-05-25 02:11:47	d85388619bbca8e079ce1472	f
235	15	ruby	bob	4	pending	\N	2014-05-28 19:51:49	2014-05-28 19:51:49	72da6b976598e206a4ebd8e9	f
236	15	javascript	anagram	2	pending	\N	2014-06-06 10:51:40	2014-06-06 10:51:40	b70c3d992d727f075f0268a6	f
237	15	ruby	nth-prime	2	pending	\N	2014-06-05 00:16:21	2014-06-05 00:16:21	049f76ea9b07c04ebe5c89ff	f
238	15	elixir	grains	1	pending	\N	2014-06-10 20:38:56	2014-06-10 20:38:56	d346415b1153795e65e3a5c4	f
239	15	python	rna-transcription	1	pending	\N	2014-06-25 20:51:30	2014-06-25 20:51:30	0c5cea28f393322ec8d28098	f
240	15	javascript	grade-school	1	pending	\N	2014-06-08 16:53:01	2014-06-08 16:53:01	9f28a2ca910ff2aaff5450d5	f
241	15	ruby	hamming	1	pending	\N	2014-06-06 03:21:47	2014-06-06 03:21:47	41351bd3e482b3fc7e589e60	f
242	15	scala	anagram	1	pending	\N	2014-07-03 21:00:59	2014-07-03 21:00:59	7c65675c422999f2baafa1c8	f
243	15	clojure	anagram	6	pending	\N	2014-05-29 12:04:00	2014-05-29 12:04:00	0d905f6f3fc883e45a6793d9	f
244	15	ruby	anagram	7	pending	\N	2014-05-25 19:18:15	2014-05-25 19:18:15	dbd361bd94e6fa890c7dc523	f
245	15	elixir	prime-factors	1	pending	\N	2014-06-05 23:15:00	2014-06-05 23:15:00	bb79b7fb9ff9b06883f9ef16	f
246	15	go	leap	2	pending	\N	2014-06-26 06:24:37	2014-06-26 06:24:37	76c4cc508e34cc3fbad4a810	f
247	15	python	nucleotide-count	1	pending	\N	2014-07-11 20:25:41	2014-07-11 20:25:41	ada23b84c7aca682682737f4	f
248	15	python	etl	1	pending	\N	2014-06-30 05:42:09	2014-06-30 05:42:09	02facd07fa94b76cf74e6ad4	f
249	15	ruby	octal	1	pending	\N	2014-07-15 08:05:54	2014-07-15 08:05:54	4b3111ef86b8f9f35397942a	f
250	15	go	etl	3	pending	\N	2014-05-29 06:08:03	2014-05-29 06:08:03	ace4c2e7956bda65b4791882	f
251	15	elixir	word-count	4	pending	\N	2014-05-27 21:14:00	2014-05-27 21:14:00	9039aeed20cd03d3fbef1d66	f
252	15	haskell	grains	1	pending	\N	2014-07-17 23:16:31	2014-07-17 23:16:31	19791db8672042859b3dffac	f
253	15	javascript	bob	1	pending	\N	2014-06-23 16:46:35	2014-06-23 16:46:35	3b965a10b16f451012a245f8	f
254	15	swift	leap	1	pending	\N	2014-05-20 22:18:09	2014-05-20 22:18:09	4cfc631bb5d7a42e8465e423	f
255	15	ruby	word-count	3	pending	\N	2014-05-25 21:24:09	2014-05-25 21:24:09	a729ee08cc88536ad39ca407	f
256	15	python	anagram	1	pending	\N	2014-06-05 00:03:31	2014-06-05 00:03:31	ee9c19a5a6711b126496e70f	f
257	15	ruby	raindrops	7	pending	\N	2014-05-24 12:35:07	2014-05-24 12:35:07	2f57f9edb2fc3913bb507142	f
259	15	javascript	binary-search-tree	1	pending	\N	2014-05-29 07:29:38	2014-05-29 07:29:38	9cf217ddfbb318e680545c0c	f
260	15	haskell	meetup	3	pending	\N	2014-05-27 04:27:02	2014-05-27 04:27:02	f970c1704d9d6fc366202b17	f
261	15	haskell	space-age	2	pending	\N	2014-07-06 07:20:36	2014-07-06 07:20:36	3127cc6078df65f7716af2a0	f
262	15	ruby	phone-number	1	pending	\N	2014-06-13 02:59:18	2014-06-13 02:59:18	78b297797a149b1ca9d8b1cf	f
263	15	python	largest-series-product	1	pending	\N	2014-07-22 07:38:29	2014-07-22 07:38:29	1be853768d34625de925e3c8	f
264	17	ruby	leap	1	pending	\N	2014-06-27 18:17:38	2014-06-27 18:17:38	fad7b2465d67317cdf465172	f
265	17	ruby	bob	4	pending	\N	2014-05-20 23:32:55	2014-05-20 23:32:55	c360d29a415a06c44d110169	f
266	17	haskell	phone-number	1	pending	\N	2014-05-25 18:18:50	2014-05-25 18:18:50	2312c624365e6e0fb22ab467	f
267	17	ruby	crypto-square	2	pending	\N	2014-05-24 02:11:04	2014-05-24 02:11:04	132aac602046870270852c48	f
268	17	haskell	prime-factors	1	pending	\N	2014-06-04 07:33:28	2014-06-04 07:33:28	926dfd9da71f9f36a29b225a	f
269	17	javascript	anagram	1	pending	\N	2014-06-08 11:31:16	2014-06-08 11:31:16	ac38bf7e6220a634987607b2	f
270	23	elixir	bob	1	pending	\N	2014-05-09 02:10:32	2014-05-09 02:10:32	6a5b38abe8494979f4e8ded7	f
271	23	elixir	word-count	5	pending	\N	2013-12-17 22:52:23	2013-12-17 22:52:23	c99d8c2492272656b80db9a3	f
272	23	go	etl	1	pending	\N	2014-01-13 21:15:42	2014-01-13 21:15:42	27ff786336ba8ee3f3956d61	f
273	23	ruby	rna-transcription	6	pending	\N	2014-01-26 15:46:46	2014-01-26 15:46:46	5030edf001ab615f83937f37	f
274	23	ruby	robot-name	5	pending	\N	2014-01-07 04:24:09	2014-01-07 04:24:09	2267bde8f57190d1480faace	f
275	23	ruby	word-count	2	pending	\N	2014-02-27 00:30:42	2014-02-27 00:30:42	2f787db137aab8d6a6c75369	f
276	23	ruby	grains	1	pending	\N	2014-04-10 21:49:04	2014-04-10 21:49:04	6bb00133129feb3e12c2c89a	f
277	23	haskell	bob	4	pending	\N	2013-12-21 21:57:16	2013-12-21 21:57:16	78ca9d4050161a5e1f8736ae	f
278	23	python	word-count	2	pending	\N	2014-02-26 10:48:36	2014-02-26 10:48:36	6de32805244a9fdbaa7868da	f
279	23	perl5	word-count	1	pending	\N	2014-04-08 08:26:54	2014-04-08 08:26:54	6fac962ae1be5c94f6a6a1ce	f
280	23	javascript	scrabble-score	1	pending	\N	2014-03-26 01:23:58	2014-03-26 01:23:58	cc3f4f7f632d0766d6dd5bf8	f
281	23	ruby	linked-list	1	pending	\N	2014-06-15 22:57:35	2014-06-15 22:57:35	6228ed8d207a8f3ea0ccb712	f
282	23	javascript	saddle-points	1	pending	\N	2013-12-31 00:47:34	2013-12-31 00:47:34	94fa8f4567c6ceb15df85d8a	f
283	23	javascript	linked-list	1	pending	\N	2013-12-31 20:39:32	2013-12-31 20:39:32	f49ae9fc5718075c334215bf	f
284	23	ruby	crypto-square	1	pending	\N	2014-03-24 15:07:59	2014-03-24 15:07:59	1454a258793d68e0123dc292	f
285	23	clojure	anagram	3	pending	\N	2014-01-17 15:32:01	2014-01-17 15:32:01	1066e2003f513d24b0598e15	f
286	23	go	anagram	2	pending	\N	2014-01-19 01:41:08	2014-01-19 01:41:08	7d1c413021f5f9bb2b1f6ab2	f
287	23	elixir	beer-song	1	pending	\N	2014-02-06 15:19:28	2014-02-06 15:19:28	526f3fac45940af6db50f8ea	f
288	23	haskell	space-age	1	pending	\N	2014-03-04 04:07:51	2014-03-04 04:07:51	e9eff1e180291c7d622441ed	f
289	23	javascript	secret-handshake	1	pending	\N	2014-01-31 04:00:27	2014-01-31 04:00:27	57c3b525deabf443b6488682	f
290	23	haskell	rna-transcription	2	pending	\N	2014-01-30 12:37:40	2014-01-30 12:37:40	e607383b9a1b71ff441e5745	f
291	23	ruby	roman-numerals	1	pending	\N	2014-06-04 04:04:27	2014-06-04 04:04:27	829c3a89ba5396d4e8a4e455	f
292	23	haskell	binary	3	pending	\N	2014-01-20 07:22:07	2014-01-20 07:22:07	48e6aa2ab1a2fb8d7377f6e6	f
293	23	coffeescript	anagram	1	pending	\N	2013-12-17 05:49:19	2013-12-17 05:49:19	fb10e4de2f4cf5403d5e7f29	f
294	23	javascript	bob	3	pending	\N	2013-12-04 23:23:51	2013-12-04 23:23:51	37728aab9e831c4b79c5ba9a	f
295	41	ruby	bob	4	pending	\N	2014-03-17 04:04:44	2014-03-17 04:04:44	b438408517c28094c160d8c0	f
296	41	clojure	bob	1	pending	\N	2014-03-22 15:20:56	2014-03-22 15:20:56	a586bbcf25a984d100293c72	f
297	41	ruby	anagram	1	pending	\N	2014-03-19 12:18:43	2014-03-19 12:18:43	beac6ad25eefab5960e05473	f
298	41	python	saddle-points	1	pending	\N	2014-03-18 12:27:42	2014-03-18 12:27:42	2f14292cd0ed8d526930c300	f
299	41	javascript	wordy	1	pending	\N	2014-03-31 11:19:43	2014-03-31 11:19:43	5d967e9fdd2f7114c90a592e	f
300	41	elixir	word-count	4	pending	\N	2014-03-23 19:28:47	2014-03-23 19:28:47	b7e555db9bf93df7c6f2767c	f
301	41	ruby	hamming	1	pending	\N	2014-05-23 01:42:24	2014-05-23 01:42:24	8eba5b3bab14d1f375f5c04d	f
302	41	scala	nucleotide-count	2	pending	\N	2014-04-09 03:26:29	2014-04-09 03:26:29	22d0141cbefebe3986f16670	f
303	41	ruby	leap	1	pending	\N	2014-04-17 10:26:58	2014-04-17 10:26:58	883c960cf6f330065f73ca8f	f
304	41	go	nucleotide-count	1	pending	\N	2014-03-19 08:07:31	2014-03-19 08:07:31	a9da1ead350684dafddd906b	f
305	41	objective-c	bob	1	pending	\N	2014-04-12 21:10:06	2014-04-12 21:10:06	9506454058b7c1a8be0ed2da	f
306	41	clojure	rna-transcription	2	pending	\N	2014-04-07 01:11:10	2014-04-07 01:11:10	97fe6820304f795bf7a4817e	f
307	41	ruby	etl	2	pending	\N	2014-04-18 17:05:57	2014-04-18 17:05:57	2913c94fb5bcb4fabf3c101d	f
308	41	javascript	roman-numerals	1	pending	\N	2014-05-05 09:54:53	2014-05-05 09:54:53	cc2e637d19233ae2f8f1eb3f	f
309	41	ruby	beer-song	2	pending	\N	2014-03-20 17:21:55	2014-03-20 17:21:55	a4de6e05ddd5ccb06c367dff	f
310	41	elixir	bob	8	pending	\N	2014-03-17 17:03:57	2014-03-17 17:03:57	38c5d72cb3b42ea9a55a751c	f
311	41	python	rna-transcription	1	pending	\N	2014-05-23 20:44:02	2014-05-23 20:44:02	2b326396bbdb82b6c0e0c21d	f
312	41	python	matrix	1	pending	\N	2014-04-09 15:33:20	2014-04-09 15:33:20	e4f556d988fb8bb07b3f04b6	f
313	41	javascript	octal	1	pending	\N	2014-04-16 22:20:58	2014-04-16 22:20:58	8c39b88540466f19c5e1074d	f
314	41	ruby	word-count	3	pending	\N	2014-04-21 19:03:41	2014-04-21 19:03:41	0e55ae7c72ef0940190567ef	f
315	41	ruby	raindrops	1	pending	\N	2014-05-21 17:02:33	2014-05-21 17:02:33	1c57e6735f9b9ef4c29b88ee	f
316	41	javascript	luhn	1	pending	\N	2014-04-18 09:59:21	2014-04-18 09:59:21	5396a4425cfc5a7ffccd7a31	f
317	41	haskell	atbash-cipher	1	pending	\N	2014-05-06 10:11:49	2014-05-06 10:11:49	cd276d0426742282b170782f	f
318	41	haskell	robot-name	2	pending	\N	2014-04-18 13:43:41	2014-04-18 13:43:41	04f27046931e4f0df520c6c9	f
319	41	javascript	rna-transcription	1	pending	\N	2014-07-16 11:53:22	2014-07-16 11:53:22	963be2d937ebb4d27fd98024	f
320	41	coffeescript	palindrome-products	1	pending	\N	2014-04-20 03:28:25	2014-04-20 03:28:25	b0f17101271e4c5d3cf81b10	f
321	41	javascript	nucleotide-count	3	pending	\N	2014-04-05 05:45:11	2014-04-05 05:45:11	1396c692a1613f554e8e3af9	f
322	41	ruby	nucleotide-count	3	pending	\N	2014-05-28 20:35:52	2014-05-28 20:35:52	a47534cd00f600ff78e8db19	f
323	41	go	hamming	5	pending	\N	2014-04-23 11:59:46	2014-04-23 11:59:46	de8c5bd3ad87993c8032c80a	f
324	41	ruby	grade-school	4	pending	\N	2014-04-22 12:08:34	2014-04-22 12:08:34	bd998ee3937e9133061f8969	f
325	41	python	phone-number	1	pending	\N	2014-05-15 17:00:51	2014-05-15 17:00:51	b73e6ea918ea3dd9c6245d68	f
326	26	python	point-mutations	2	pending	\N	2014-06-30 07:20:36	2014-06-30 07:20:36	042176fcd77e9182feaee6e1	f
327	26	ruby	rna-transcription	2	pending	\N	2014-06-30 22:46:23	2014-06-30 22:46:23	2bc44a0580ffac3726094468	f
328	26	haskell	scrabble-score	2	pending	\N	2014-07-01 21:19:34	2014-07-01 21:19:34	0f8760b270ba98fa8eb15b5c	f
329	26	haskell	bob	3	pending	\N	2014-06-29 15:36:36	2014-06-29 15:36:36	ff8ce297fcec3e4571a25480	f
330	26	javascript	beer-song	1	pending	\N	2014-07-17 15:38:22	2014-07-17 15:38:22	3e290f7768cf818549b9270f	f
331	26	ruby	beer-song	3	pending	\N	2014-06-30 08:14:29	2014-06-30 08:14:29	3e1a45e2c5bdb4865cb7ef9a	f
332	44	javascript	luhn	1	pending	\N	2013-12-24 15:37:21	2013-12-24 15:37:21	cb67bb87b7718d0d8d8cbe28	f
333	44	clojure	word-count	1	pending	\N	2013-12-21 10:31:41	2013-12-21 10:31:41	2572a01019f783cb23e32991	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 333, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg	-69643	nzo929	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-05-18 20:52:27.764739	2014-05-18 20:52:27.764739	\N
2	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg	-76262	rjz386	---\n- ruby\n- haskell\n	2014-02-06 08:24:54.795347	2014-02-06 08:24:54.795347	\N
3	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg	-5954	iim231	---\n- javascript\n- erlang\n- elixir\n	2014-02-02 07:50:01.797491	2014-02-02 07:50:01.797491	\N
4	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg	-87915	rbz299	---\n- python\n	2014-04-26 20:41:40.79934	2014-04-26 20:41:40.79934	\N
5	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg	-41192	tju489	--- []\n	2014-04-14 22:04:54.801332	2014-04-14 22:04:54.801332	\N
6	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg	-4251	vqq232	--- []\n	2014-05-01 11:39:57.804739	2014-05-01 11:39:57.804739	\N
7	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg	-18350	pjb784	--- []\n	2014-04-12 13:25:03.808369	2014-04-12 13:25:03.808369	\N
8	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg	-96299	qnl113	--- []\n	2014-04-18 22:09:15.810326	2014-04-18 22:09:15.810326	\N
9	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg	-44892	fhg520	--- []\n	2014-03-17 16:17:31.812889	2014-03-17 16:17:31.812889	\N
10	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg	-18415	eoy781	--- []\n	2014-06-25 09:02:50.814465	2014-06-25 09:02:50.814465	\N
11	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg	-4895	yqk652	--- []\n	2014-03-07 11:44:48.816919	2014-03-07 11:44:48.816919	\N
12	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg	-67606	jso426	--- []\n	2014-06-06 01:14:50.819387	2014-06-06 01:14:50.819387	\N
13	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg	-3982	qtf924	--- []\n	2014-07-23 22:54:55.820978	2014-07-23 22:54:55.820978	\N
14	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg	-57882	zqk360	--- []\n	2014-01-29 06:57:02.823357	2014-01-29 06:57:02.823357	\N
15	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg	-51133	oqf319	--- []\n	2014-05-19 18:18:35.825786	2014-05-19 18:18:35.825786	\N
16	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg	-92742	vof432	--- []\n	2013-11-14 06:18:51.837068	2013-11-14 06:18:51.837068	\N
17	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg	-67081	tms886	--- []\n	2014-05-20 05:10:36.844518	2014-05-20 05:10:36.844518	\N
18	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg	-19774	vyb132	--- []\n	2014-04-10 12:54:30.848407	2014-04-10 12:54:30.848407	\N
19	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg	-99855	rwx972	--- []\n	2014-05-21 00:22:55.8515	2014-05-21 00:22:55.8515	\N
20	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg	-861	qfu146	--- []\n	2014-05-31 17:31:38.854312	2014-05-31 17:31:38.854312	\N
21	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg	-45038	vci812	--- []\n	2014-01-28 13:56:15.857399	2014-01-28 13:56:15.857399	\N
22	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg	-8303	xgc301	--- []\n	2014-01-13 13:58:15.861089	2014-01-13 13:58:15.861089	\N
23	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg	-81049	pwk688	--- []\n	2013-12-03 18:33:43.864129	2013-12-03 18:33:43.864129	\N
24	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg	-70859	eoo285	--- []\n	2014-05-01 07:12:18.866732	2014-05-01 07:12:18.866732	\N
25	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg	-65547	xtp624	--- []\n	2014-03-18 07:01:32.869366	2014-03-18 07:01:32.869366	\N
26	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg	-85699	sbb358	--- []\n	2014-06-28 18:58:03.872112	2014-06-28 18:58:03.872112	\N
27	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg	-13848	hnb620	--- []\n	2014-07-13 12:58:35.874667	2014-07-13 12:58:35.874667	\N
28	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg	-21870	ioh268	--- []\n	2013-11-11 15:18:22.877123	2013-11-11 15:18:22.877123	\N
29	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg	-22283	err169	--- []\n	2014-03-02 13:34:17.879532	2014-03-02 13:34:17.879532	\N
30	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg	-62587	nwv286	--- []\n	2014-01-05 18:02:26.881943	2014-01-05 18:02:26.881943	\N
31	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/syntetyc/128.jpg	-79954	ahr584	--- []\n	2014-07-09 08:40:24.884353	2014-07-09 08:40:24.884353	\N
32	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg	-2216	kqf551	--- []\n	2014-02-18 00:25:04.886821	2014-02-18 00:25:04.886821	\N
33	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg	-77978	ond273	--- []\n	2014-06-15 21:49:21.889227	2014-06-15 21:49:21.889227	\N
34	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg	-40356	uqq664	--- []\n	2014-05-10 08:41:29.891708	2014-05-10 08:41:29.891708	\N
35	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/teclaro/128.jpg	-36485	hol773	--- []\n	2014-07-16 14:24:23.894101	2014-07-16 14:24:23.894101	\N
36	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg	-93045	qrk333	--- []\n	2014-06-07 16:21:37.89661	2014-06-07 16:21:37.89661	\N
37	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg	-35368	fkz847	--- []\n	2013-11-03 14:30:20.899081	2013-11-03 14:30:20.899081	\N
38	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg	-96580	isp534	--- []\n	2014-06-17 07:14:21.901565	2014-06-17 07:14:21.901565	\N
39	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg	-66417	iko295	--- []\n	2014-02-16 11:04:39.903518	2014-02-16 11:04:39.903518	\N
40	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg	-27913	seu348	--- []\n	2014-06-11 02:48:20.906244	2014-06-11 02:48:20.906244	\N
41	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg	-32365	dkn264	--- []\n	2014-03-16 18:21:47.908784	2014-03-16 18:21:47.908784	\N
42	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg	-85894	wld795	--- []\n	2014-06-13 14:41:57.911288	2014-06-13 14:41:57.911288	\N
43	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg	-98699	hhm983	--- []\n	2014-06-21 11:51:12.9143	2014-06-21 11:51:12.9143	\N
44	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg	-69758	qpk881	--- []\n	2013-11-09 10:23:07.917048	2013-11-09 10:23:07.917048	\N
45	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg	-48050	cyq793	--- []\n	2014-04-27 16:06:57.919497	2014-04-27 16:06:57.919497	\N
46	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg	-83351	ilu343	--- []\n	2013-12-18 07:33:16.921983	2013-12-18 07:33:16.921983	\N
47	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg	-29673	uug999	--- []\n	2013-11-03 13:38:43.923556	2013-11-03 13:38:43.923556	\N
48	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg	-857	wcy666	--- []\n	2013-11-16 23:20:20.926024	2013-11-16 23:20:20.926024	\N
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- PostgreSQL database dump complete
--

